int *sub_1C499E8EC(uint64_t a1, int a2, const llvm::DILocation *a3, uint64_t a4, unsigned __int8 **a5, unsigned __int8 **a6, int a7, unsigned int a8, char a9)
{
  int v14;
  uint64_t *v16;
  uint64_t v17;
  unsigned __int8 **v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const llvm::DILocation *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  llvm::DILocation *v34;
  unsigned __int8 *v35;
  int v36;
  uint64_t v37;
  BOOL v38;
  unsigned int v39;
  uint64_t v40;
  int **v41;
  int *v42;
  int v43;
  int *v44;
  uint64_t v45;
  const llvm::DILocation *v46;
  uint64_t v47;
  unsigned int v48;
  BOOL v49;
  uint64_t v50;
  int v51;
  int v52;
  llvm::DILocation *v53;
  unsigned __int8 *v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  unsigned __int8 *v68;
  int *v69;
  unsigned __int8 *v70;
  int *result;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  llvm::DILocation *MergedLocation;
  unsigned __int8 *v85;
  BOOL v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  unsigned __int8 *v91;
  int *v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;

  v14 = a2;
  v100 = *MEMORY[0x1E0C80C00];
  if (a9)
  {
    v16 = (uint64_t *)(*(_QWORD *)(a4 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
    if (a2 >= 0)
      v16 = (uint64_t *)(*(_QWORD *)(a4 + 272) + 8 * a2);
    v17 = *v16;
    if (!v17)
      return 0;
    while ((*(_BYTE *)(v17 + 3) & 1) != 0)
    {
      v17 = *(_QWORD *)(v17 + 24);
      if (!v17)
        return 0;
    }
    while (1)
    {
      v17 = *(_QWORD *)(v17 + 24);
      if (!v17)
        break;
      if ((*(_BYTE *)(v17 + 3) & 1) == 0)
        return 0;
    }
  }
  v18 = a5 + 4;
  v89 = (int)a3;
  if (a5 + 4 != a6)
  {
    if (*v18)
      llvm::MetadataTracking::untrack((uint64_t)(a5 + 4), *v18);
    v19 = *a6;
    *v18 = *a6;
    if (v19)
      llvm::MetadataTracking::track((uint64_t)(a5 + 4), v19, 2);
  }
  v90 = 0;
  v20 = *(_QWORD *)(a4 + 24);
  v21 = (uint64_t *)(v20 + 16 * (v14 & 0x7FFFFFFF) + 8);
  v22 = *(_QWORD *)(a4 + 272);
  if (v14 >= 0)
    v21 = (uint64_t *)(v22 + 8 * v14);
  v23 = *v21;
  if (!v23
    || (*(_BYTE *)(v23 + 3) & 1) == 0 && ((v23 = *(_QWORD *)(v23 + 24)) == 0 || (*(_BYTE *)(v23 + 3) & 1) == 0)
    || (v77 = *(_QWORD *)(v23 + 8)) == 0
    || **(_WORD **)(v77 + 16) != 177
    || *(_DWORD *)(v77 + 40) != 2)
  {
    v24 = 0;
    goto LABEL_19;
  }
  v90 = *(_DWORD *)(*(_QWORD *)(v77 + 32) + 36);
  v14 = v90;
  v78 = v90 & 0x7FFFFFFF;
  if (a9)
  {
    v79 = (uint64_t *)(v20 + 16 * v78 + 8);
    if (v90 >= 0)
      v79 = (uint64_t *)(v22 + 8 * v90);
    v80 = *v79;
    if (!v80)
      return 0;
    while ((*(_BYTE *)(v80 + 3) & 1) != 0)
    {
      v80 = *(_QWORD *)(v80 + 24);
      if (!v80)
        return 0;
    }
    result = 0;
    while (1)
    {
      v80 = *(_QWORD *)(v80 + 24);
      if (!v80)
        break;
      if ((*(_BYTE *)(v80 + 3) & 1) == 0)
        return result;
    }
  }
  v81 = (uint64_t *)(v20 + 16 * v78 + 8);
  v82 = (uint64_t *)(v22 + 8 * v90);
  if (v90 >= 0)
    v81 = v82;
  v83 = *v81;
  if ((*(_BYTE *)(v83 + 3) & 1) == 0)
    v83 = *(_QWORD *)(v83 + 24);
  MergedLocation = llvm::DILocation::getMergedLocation((llvm::DILocation *)*v18, *(const llvm::DILocation **)(*(_QWORD *)(v83 + 8) + 56), a3);
  v91 = (unsigned __int8 *)MergedLocation;
  if (MergedLocation)
    llvm::MetadataTracking::track((uint64_t)&v91, (unsigned __int8 *)MergedLocation, 2);
  if (&v91 != v18)
  {
    if (*v18)
      llvm::MetadataTracking::untrack((uint64_t)(a5 + 4), *v18);
    v85 = v91;
    *v18 = v91;
    if (!v85)
      goto LABEL_141;
    llvm::MetadataTracking::track((uint64_t)(a5 + 4), v85, 2);
  }
  if (v91)
    llvm::MetadataTracking::untrack((uint64_t)&v91, v91);
LABEL_141:
  v24 = 1;
LABEL_19:
  v88 = v24;
  if ((~a8 & 0x7C0) == 0 || a7)
  {
    v91 = (unsigned __int8 *)&v90;
    v92 = &v90;
    LODWORD(v98) = v14;
    if (sub_1C49B9E58((_DWORD **)&v91, a4, (unsigned int *)&v98))
    {
      do
      {
        v14 = v90;
        v26 = *(_QWORD *)(a4 + 24);
        v27 = *(_QWORD *)(a4 + 272);
        v28 = v90 & 0x7FFFFFFF;
        if (a9)
        {
          v29 = (uint64_t *)(v26 + 16 * v28 + 8);
          if (v90 >= 0)
            v29 = (uint64_t *)(v27 + 8 * v90);
          v30 = *v29;
          if (!v30)
            return 0;
          while ((*(_BYTE *)(v30 + 3) & 1) != 0)
          {
            v30 = *(_QWORD *)(v30 + 24);
            if (!v30)
              return 0;
          }
          while (1)
          {
            v30 = *(_QWORD *)(v30 + 24);
            if (!v30)
              break;
            if ((*(_BYTE *)(v30 + 3) & 1) == 0)
              return 0;
          }
        }
        v31 = v26 + 16 * v28 + 8;
        v32 = (uint64_t *)(v27 + 8 * v90);
        if (v90 < 0)
          v32 = (uint64_t *)v31;
        v33 = *v32;
        if ((*(_BYTE *)(v33 + 3) & 1) == 0)
          v33 = *(_QWORD *)(v33 + 24);
        v34 = llvm::DILocation::getMergedLocation((llvm::DILocation *)*v18, *(const llvm::DILocation **)(*(_QWORD *)(v33 + 8) + 56), v25);
        v91 = (unsigned __int8 *)v34;
        if (v34)
          llvm::MetadataTracking::track((uint64_t)&v91, (unsigned __int8 *)v34, 2);
        if (&v91 != v18)
        {
          if (*v18)
            llvm::MetadataTracking::untrack((uint64_t)(a5 + 4), *v18);
          v35 = v91;
          *v18 = v91;
          if (!v35)
            goto LABEL_41;
          llvm::MetadataTracking::track((uint64_t)(a5 + 4), v35, 2);
        }
        if (v91)
          llvm::MetadataTracking::untrack((uint64_t)&v91, v91);
LABEL_41:
        v91 = (unsigned __int8 *)&v90;
        v92 = &v90;
        LODWORD(v98) = v14;
      }
      while ((sub_1C49B9E58((_DWORD **)&v91, a4, (unsigned int *)&v98) & 1) != 0);
    }
  }
  v36 = v14;
  if (v14 < 0
    && (v14 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a4 + 432)
    && *(_QWORD *)(*(_QWORD *)(a4 + 424) + 8 * (v14 & 0x7FFFFFFF)) == 257
    || v89 < 0
    && (v89 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a4 + 432)
    && *(_QWORD *)(*(_QWORD *)(a4 + 424) + 8 * (v89 & 0x7FFFFFFF)) == 257)
  {
    v37 = 257;
    v38 = a1 == 257;
    if (a1 != 257 && !a9)
      return 0;
  }
  else
  {
    v38 = 1;
    v37 = a1;
  }
  v39 = a8;
  v40 = a1;
  v41 = (int **)(*(_QWORD *)(a4 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8);
  if (v14 >= 0)
    v41 = (int **)(*(_QWORD *)(a4 + 272) + 8 * v14);
  v42 = *v41;
  v43 = **v41;
  v44 = *v41;
  if ((v43 & 0x1000000) == 0)
    v44 = (int *)*((_QWORD *)v42 + 3);
  v45 = *((_QWORD *)v44 + 1);
  if (**(_WORD **)(v45 + 16) != 165 || (a7 & 1) == 0 && (*(_WORD *)(v45 + 44) & 0x100) == 0)
    return 0;
  v87 = v37;
  v86 = v38;
  if (!sub_1C49B9CEC(v36, a4))
    return 0;
  if ((v43 & 0x1000000) != 0)
  {
    v47 = v40;
    v48 = v39;
    while (1)
    {
      v42 = (int *)*((_QWORD *)v42 + 3);
      if (!v42)
        break;
      if ((*((_BYTE *)v42 + 3) & 1) == 0)
        goto LABEL_69;
    }
    v49 = 0;
  }
  else
  {
    v47 = v40;
    v48 = v39;
    do
    {
LABEL_69:
      v42 = (int *)*((_QWORD *)v42 + 3);
      v49 = v42 == 0;
    }
    while (v42 && (*((_BYTE *)v42 + 3) & 1) != 0);
  }
  v50 = *(_QWORD *)(v45 + 32);
  v51 = *(_DWORD *)(v50 + 36);
  v52 = *(_DWORD *)(v50 + 68);
  v53 = llvm::DILocation::getMergedLocation((llvm::DILocation *)*v18, *(const llvm::DILocation **)(v45 + 56), v46);
  v91 = (unsigned __int8 *)v53;
  if (v53)
    llvm::MetadataTracking::track((uint64_t)&v91, (unsigned __int8 *)v53, 2);
  if (&v91 != v18)
  {
    if (*v18)
      llvm::MetadataTracking::untrack((uint64_t)(a5 + 4), *v18);
    v54 = v91;
    *v18 = v91;
    if (!v54)
      goto LABEL_79;
    llvm::MetadataTracking::track((uint64_t)(a5 + 4), v54, 2);
  }
  if (v91)
    llvm::MetadataTracking::untrack((uint64_t)&v91, v91);
LABEL_79:
  if (v51 < 0)
  {
    v55 = v51;
    v57 = v88;
    if ((v51 & 0x7FFFFFFFu) >= *(_DWORD *)(a4 + 432))
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(a4 + 424) + 8 * (v51 & 0x7FFFFFFF));
  }
  else
  {
    v55 = v51;
    v56 = 0;
    v57 = v88;
  }
  if (v52 < 0 && (v52 & 0x7FFFFFFFu) < *(_DWORD *)(a4 + 432))
    v58 = *(_QWORD *)(*(_QWORD *)(a4 + 424) + 8 * (v52 & 0x7FFFFFFF));
  else
    v58 = 0;
  if (v57)
  {
    v98 = v56;
    v99 = 0;
    LODWORD(v91) = v55;
    v93 = 0;
    (*((void (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, unsigned __int8 **, uint64_t, uint64_t))*a5
     + 4))(a5, 177, &v98, 1, &v91, 1, v48 | 0x100000000);
    v55 = *(_DWORD *)(*(_QWORD *)(v59 + 32) + 4);
  }
  v60 = v87;
  if (v56 == v87)
  {
    v61 = v55;
  }
  else
  {
    v98 = v87;
    v99 = 0;
    LODWORD(v91) = v55;
    v93 = 0;
    (*((void (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, unsigned __int8 **, uint64_t, _QWORD))*a5
     + 4))(a5, 178, &v98, 1, &v91, 1, 0);
    v60 = v87;
    v61 = *(_DWORD *)(*(_QWORD *)(v62 + 32) + 4);
  }
  if (v58 != v60)
  {
    v98 = v60;
    v99 = 0;
    LODWORD(v91) = v52;
    v93 = 0;
    (*((void (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, unsigned __int8 **, uint64_t, _QWORD))*a5
     + 4))(a5, 178, &v98, 1, &v91, 1, 0);
    v60 = v87;
    v52 = *(_DWORD *)(*(_QWORD *)(v63 + 32) + 4);
  }
  v64 = v89;
  if (v89 < 0 && (v89 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a4 + 432))
    v65 = *(_QWORD *)(*(_QWORD *)(a4 + 424) + 8 * (v89 & 0x7FFFFFFF));
  else
    v65 = 0;
  if (v65 != v60)
  {
    v98 = v60;
    v99 = 0;
    LODWORD(v91) = v89;
    v93 = 0;
    (*((void (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, unsigned __int8 **, uint64_t, _QWORD))*a5
     + 4))(a5, 178, &v98, 1, &v91, 1, 0);
    v60 = v87;
    v64 = *(_DWORD *)(*(_QWORD *)(v66 + 32) + 4);
  }
  v67 = !v49;
  if (v18 == a6)
    v67 = 1;
  if ((v67 & 1) == 0)
  {
    if (*v18)
    {
      v75 = v52;
      v76 = v64;
      llvm::MetadataTracking::untrack((uint64_t)(a5 + 4), *v18);
      v60 = v87;
      v64 = v76;
      v52 = v75;
    }
    v68 = *a6;
    *v18 = *a6;
    if (v68)
    {
      v73 = v52;
      v74 = v64;
      llvm::MetadataTracking::track((uint64_t)(a5 + 4), v68, 2);
      v60 = v87;
      v64 = v74;
      v52 = v73;
    }
  }
  v98 = v60;
  v99 = 0;
  LODWORD(v91) = v61;
  v93 = 0;
  v94 = v52;
  v95 = 0;
  v96 = v64;
  v97 = 0;
  v70 = (unsigned __int8 *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, unsigned __int8 **, uint64_t, uint64_t))*a5
                            + 4))(a5, 166, &v98, 1, &v91, 3, v48 | 0x100000000);
  result = v69;
  if (!v86)
  {
    v98 = v47;
    v99 = 0;
    v91 = v70;
    v92 = v69;
    v93 = 1;
    (*((void (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, unsigned __int8 **, uint64_t, _QWORD))*a5
     + 4))(a5, 179, &v98, 1, &v91, 1, 0);
    return (int *)v72;
  }
  return result;
}

uint64_t sub_1C499F11C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  int v7;
  uint64_t (***v8)();
  void (**v9)(uint64_t (***)());
  uint64_t (***v10)();
  void (**v11)(uint64_t (***)());
  int v12;
  void *v13;
  int v14;
  uint64_t (***v15)();
  void (**v16)(uint64_t (***)());
  uint64_t (***v17)();
  void (**v18)(uint64_t (***)());
  uint64_t v19;
  void *v20;
  int v21;
  int64_t v22;
  BOOL v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  int64_t v27;
  unint64_t v28;
  int v29;
  size_t v30;
  void *v31;
  int v32;
  size_t v33;
  void *v34;
  int v36;
  void *__src;
  unsigned int v38;
  unsigned __int8 v39;
  uint64_t (**v40)();
  _QWORD *(*v41)@<X0>(_QWORD *@<X0>, uint64_t@<X8>);
  uint64_t (***v42)();
  uint64_t (**v43)();
  BOOL (*v44)(_BOOL8);
  uint64_t (***v45)();
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v3 = **(unsigned __int16 **)(a1 + 16);
  if ((v3 - 134) < 2)
    return 1;
  if (v3 != 51)
    return 0;
  v7 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 132);
  v43 = &off_1E816EFF0;
  v44 = sub_1C554C7E0;
  v45 = &v43;
  v40 = &off_1E816F038;
  v41 = sub_1C554C7F8;
  v42 = &v40;
  sub_1C554C3AC(v7, a2, (uint64_t)&v43, (uint64_t)&v40, 0, 0, &__src);
  v8 = v42;
  if (v42 == &v40)
  {
    v9 = (void (**)(uint64_t (***)()))(v40 + 4);
    v8 = &v40;
LABEL_6:
    (*v9)(v8);
    goto LABEL_7;
  }
  if (v42)
  {
    v9 = (void (**)(uint64_t (***)()))(*v42 + 5);
    goto LABEL_6;
  }
LABEL_7:
  v10 = v45;
  if (v45 == &v43)
  {
    v11 = (void (**)(uint64_t (***)()))(v43 + 4);
    v10 = &v43;
LABEL_9:
    (*v11)(v10);
    goto LABEL_10;
  }
  if (v45)
  {
    v11 = (void (**)(uint64_t (***)()))(*v45 + 5);
    goto LABEL_9;
  }
LABEL_10:
  v12 = v39;
  if (v39)
  {
    v2 = v38;
    if (v38 > 0x40)
    {
      v36 = v39;
      v30 = (((unint64_t)v38 + 63) >> 3) & 0x3FFFFFF8;
      v13 = (void *)operator new[]();
      v31 = __src;
      memcpy(v13, __src, v30);
      if (v31)
        MEMORY[0x1CAA32F9C](v31, 0x1000C8000313F17);
      v12 = v36;
    }
    else
    {
      v13 = __src;
    }
  }
  else
  {
    v13 = 0;
  }
  v14 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 164);
  v43 = &off_1E816EFF0;
  v44 = sub_1C554C7E0;
  v45 = &v43;
  v40 = &off_1E816F038;
  v41 = sub_1C554C7F8;
  v42 = &v40;
  sub_1C554C3AC(v14, a2, (uint64_t)&v43, (uint64_t)&v40, 0, 0, &__src);
  v15 = v42;
  if (v42 == &v40)
  {
    v16 = (void (**)(uint64_t (***)()))(v40 + 4);
    v15 = &v40;
LABEL_17:
    (*v16)(v15);
    goto LABEL_18;
  }
  if (v42)
  {
    v16 = (void (**)(uint64_t (***)()))(*v42 + 5);
    goto LABEL_17;
  }
LABEL_18:
  v17 = v45;
  if (v45 == &v43)
  {
    v18 = (void (**)(uint64_t (***)()))(v43 + 4);
    v17 = &v43;
LABEL_20:
    (*v18)(v17);
    goto LABEL_21;
  }
  if (v45)
  {
    v18 = (void (**)(uint64_t (***)()))(*v45 + 5);
    goto LABEL_20;
  }
LABEL_21:
  if (v39)
  {
    v19 = v38;
    if (v38 > 0x40)
    {
      v32 = v12;
      v33 = (((unint64_t)v38 + 63) >> 3) & 0x3FFFFFF8;
      v20 = (void *)operator new[]();
      v34 = __src;
      memcpy(v20, __src, v33);
      if (v34)
        MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
      v12 = v32;
      if (!v32)
        goto LABEL_50;
    }
    else
    {
      v20 = __src;
      if (!v12)
        goto LABEL_50;
    }
    if (v2 > 0x40)
    {
      v21 = 0;
      v22 = ((unint64_t)v2 + 63) >> 6;
      do
      {
        v23 = v22-- < 1;
        if (v23)
          break;
        v24 = *((_QWORD *)v13 + v22);
        v21 += __clz(v24);
      }
      while (!v24);
      v25 = v2 | 0xFFFFFFC0;
      if ((v2 & 0x3F) == 0)
        v25 = 0;
      if (v21 + v25 != v2 - 1)
        goto LABEL_50;
    }
    else if (v13 != (void *)1)
    {
      goto LABEL_50;
    }
    if (v19 > 0x40)
    {
      v26 = 0;
      v27 = (unint64_t)(v19 + 63) >> 6;
      do
      {
        v23 = v27-- < 1;
        if (v23)
          break;
        v28 = *((_QWORD *)v20 + v27);
        v26 += __clz(v28);
      }
      while (!v28);
      v29 = v19 | 0xFFFFFFC0;
      if ((v19 & 0x3F) == 0)
        v29 = 0;
      if (v26 + v29 == (_DWORD)v19)
      {
        v4 = 1;
LABEL_51:
        if (v19 >= 0x41 && v20)
          MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
        goto LABEL_54;
      }
    }
    else if (!v20)
    {
      v4 = 1;
      goto LABEL_54;
    }
LABEL_50:
    v4 = 0;
    goto LABEL_51;
  }
  v4 = 0;
LABEL_54:
  if (v12 && v2 >= 0x41 && v13)
    MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
  return v4;
}

BOOL sub_1C499F538(__int16 a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  char v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  char v51;
  BOOL v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58[11];

  if (a1 != 66 && a1 != 45)
    return 0;
  v58[9] = v3;
  v58[10] = v4;
  v5 = a2[1];
  if (v5 < 0 && (v6 = v5 & 0x7FFFFFFF, v6 < *(_DWORD *)(a3 + 432)))
    v7 = *(_QWORD *)(*(_QWORD *)(a3 + 424) + 8 * v6);
  else
    v7 = 0;
  v58[0] = v7;
  v8 = a2[9];
  v9 = a2[17];
  v10 = v8 & 0x7FFFFFFF;
  v11 = (uint64_t *)(*(_QWORD *)(a3 + 24) + 16 * v10 + 8);
  if ((int)v8 >= 0)
    v11 = (uint64_t *)(*(_QWORD *)(a3 + 272) + 8 * v8);
  v12 = *v11;
  if (!v12)
    goto LABEL_10;
  v17 = a2[17];
  v18 = v8 & 0x7FFFFFFF;
  v19 = a2[9];
  v56 = a3;
  if ((*(_BYTE *)(v12 + 3) & 1) != 0)
  {
    v8 = a2[9];
  }
  else
  {
    v12 = *(_QWORD *)(v12 + 24);
    v8 = a2[9];
    if (!v12 || (*(_BYTE *)(v12 + 3) & 1) == 0)
      goto LABEL_10;
  }
  v39 = *(_QWORD *)(v12 + 8);
  if (!v39
    || **(_WORD **)(v39 + 16) != 127
    || *(_DWORD *)(v39 + 40) != 3
    || (v40 = *(_QWORD *)(v39 + 32),
        v41 = *(_DWORD *)(v40 + 36),
        v42 = sub_1C554C050(*(_DWORD *)(v40 + 68), a3),
        v9 = v17,
        v10 = v18,
        v8 = v19,
        a3 = v56,
        !v43))
  {
LABEL_10:
    v13 = v9 & 0x7FFFFFFF;
    goto LABEL_11;
  }
  v13 = v17 & 0x7FFFFFFF;
  v44 = (uint64_t *)(*(_QWORD *)(v56 + 24) + 16 * v13 + 8);
  if ((v17 & 0x80000000) == 0)
    v44 = (uint64_t *)(*(_QWORD *)(v56 + 272) + 8 * v17);
  v45 = *v44;
  if (v45
    && ((v46 = v42, (*(_BYTE *)(v45 + 3) & 1) != 0)
     || (v45 = *(_QWORD *)(v45 + 24)) != 0 && (*(_BYTE *)(v45 + 3) & 1) != 0)
    && (v47 = *(_QWORD *)(v45 + 8)) != 0
    && **(_WORD **)(v47 + 16) == 128
    && *(_DWORD *)(v47 + 40) == 3
    && ((v48 = *(_QWORD *)(v47 + 32), v49 = *(_DWORD *)(v48 + 36), v50 = sub_1C554C050(*(_DWORD *)(v48 + 68), v56), v51)
      ? (v52 = v41 == v49)
      : (v52 = 0),
        v52))
  {
    v53 = v50 + v46;
    v55 = sub_1C4825F50(v58);
    if ((_DWORD)v54 == 1)
    a3 = v56;
    v8 = v19;
    v10 = v18;
    v9 = v17;
    if (v53 == v55)
      return 1;
  }
  else
  {
    a3 = v56;
    v8 = v19;
    v10 = v18;
    v9 = v17;
  }
LABEL_11:
  if (v9 >> 31)
    v14 = (uint64_t *)(*(_QWORD *)(a3 + 24) + 16 * v13 + 8);
  else
    v14 = (uint64_t *)(*(_QWORD *)(a3 + 272) + 8 * v9);
  v15 = *v14;
  if (!v15)
    return 0;
  v20 = v10;
  v21 = v8;
  v57 = a3;
  if ((*(_BYTE *)(v15 + 3) & 1) == 0)
  {
    v15 = *(_QWORD *)(v15 + 24);
    if (!v15 || (*(_BYTE *)(v15 + 3) & 1) == 0)
      return 0;
  }
  v22 = *(_QWORD *)(v15 + 8);
  if (!v22)
    return 0;
  if (**(_WORD **)(v22 + 16) != 127)
    return 0;
  if (*(_DWORD *)(v22 + 40) != 3)
    return 0;
  v23 = *(_QWORD *)(v22 + 32);
  v24 = *(_DWORD *)(v23 + 36);
  v25 = sub_1C554C050(*(_DWORD *)(v23 + 68), a3);
  if (!v26)
    return 0;
  v27 = (uint64_t *)(*(_QWORD *)(v57 + 272) + 8 * v21);
  if ((int)v21 < 0)
    v27 = (uint64_t *)(*(_QWORD *)(v57 + 24) + 16 * v20 + 8);
  v28 = *v27;
  if (!v28)
    return 0;
  v29 = v25;
  if ((*(_BYTE *)(v28 + 3) & 1) == 0)
  {
    v28 = *(_QWORD *)(v28 + 24);
    if (!v28 || (*(_BYTE *)(v28 + 3) & 1) == 0)
      return 0;
  }
  v30 = *(_QWORD *)(v28 + 8);
  if (!v30 || **(_WORD **)(v30 + 16) != 128 || *(_DWORD *)(v30 + 40) != 3)
    return 0;
  v31 = *(_QWORD *)(v30 + 32);
  v32 = *(_DWORD *)(v31 + 36);
  v33 = sub_1C554C050(*(_DWORD *)(v31 + 68), v57);
  if (!v34 || v24 != v32)
    return 0;
  v36 = v33 + v29;
  v38 = sub_1C4825F50(v58);
  if ((_DWORD)v37 == 1)
  return v36 == v38;
}

uint64_t sub_1C499F8BC(uint64_t *a1, uint64_t a2, unint64_t *a3)
{
  unsigned int v6;
  const char *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;

  v6 = sub_1C4825F50(a3);
  if ((_DWORD)v7 == 1)
  {
    v11 = v6;
    v6 = v11;
  }
  v17 = v6;
  if (v6 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v16, -1, 1);
  }
  else
  {
    v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
    if (!v6)
      v8 = 0;
    v16 = v8;
  }
  v13 = 1;
  v12 = 0;
  v15 = 1;
  v14 = 0;
  v9 = sub_1C49A606C(a1, a2, a3, (uint64_t)&v16, &v12, 0, 0);
  if (v15 >= 0x41 && v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
  if (v13 >= 0x41 && v12)
    MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  if (v17 >= 0x41 && v16)
    MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
  return v9;
}

BOOL sub_1C499FA14(unsigned int a1, unsigned int a2, uint64_t a3)
{
  unsigned int v5;
  _BOOL8 v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  void *__src;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;

  sub_1C54EB4A0(a3, (const char *)a1, (uint64_t)&__src);
  sub_1C54EB4A0(a3, (const char *)a2, (uint64_t)&v14);
  v5 = v19;
  if (v19 >= 0x41)
  {
    v7 = (((unint64_t)v19 + 63) >> 3) & 0x3FFFFFF8;
    v8 = (char *)operator new[]();
    memcpy(v8, __src, v7);
    v9 = 0;
    v10 = v14;
    do
    {
      *(_QWORD *)&v8[v9] |= *(_QWORD *)(v10 + v9);
      v9 += 8;
    }
    while (v7 != v9);
    v13 = v5;
    v12 = v8;
    v6 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v12) == v5;
    MEMORY[0x1CAA32F9C](v8, 0x1000C8000313F17);
  }
  else if (v19)
  {
    v6 = (v14 | (unint64_t)__src) == 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
  }
  else
  {
    v6 = 1;
  }
  if (v17 >= 0x41 && v16)
    MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
  if (v15 >= 0x41 && v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
  if (v21 >= 0x41 && v20)
    MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
  if (v19 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  return v6;
}

uint64_t sub_1C499FBDC(llvm::ConstantInt ******a1, uint64_t a2)
{
  _DWORD *v4;
  int v5;
  llvm::ConstantInt *****v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::ConstantInt *****v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  llvm::ConstantInt *****v16;
  const char *v17;
  const llvm::APInt *v18;
  unsigned int v19;
  unint64_t v20;
  llvm::ValueHandleBase *v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  _DWORD v26[6];
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;

  if (**(_WORD **)(a2 + 16) != 66)
    return 0;
  v4 = *(_DWORD **)(a2 + 32);
  v5 = v4[1];
  v6 = *a1;
  v7 = (uint64_t)(*a1)[1][5];
  if (v5 < 0 && (v5 & 0x7FFFFFFFu) < *(_DWORD *)(v7 + 432))
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 424) + 8 * (v5 & 0x7FFFFFFF));
  else
    v8 = 0;
  v29 = v8;
  v9 = v4[9];
  v10 = v4[17];
  v6[5] = *(llvm::ConstantInt *****)(a2 + 24);
  v6[6] = (llvm::ConstantInt ****)a2;
  if ((_DWORD)v9 != (_DWORD)v10)
  {
    if ((v9 & 0x80000000) != 0)
      v12 = (uint64_t *)(*(_QWORD *)(v7 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
    else
      v12 = (uint64_t *)(*(_QWORD *)(v7 + 272) + 8 * v9);
    v13 = *v12;
    if ((*(_BYTE *)(v13 + 3) & 1) == 0)
      v13 = *(_QWORD *)(v13 + 24);
    if (**(_WORD **)(*(_QWORD *)(v13 + 8) + 16) == 68)
      goto LABEL_21;
    if ((v10 & 0x80000000) != 0)
      v14 = (uint64_t *)(*(_QWORD *)(v7 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
    else
      v14 = (uint64_t *)(*(_QWORD *)(v7 + 272) + 8 * v10);
    v15 = *v14;
    if ((*(_BYTE *)(v15 + 3) & 1) == 0)
      v15 = *(_QWORD *)(v15 + 24);
    if (**(_WORD **)(*(_QWORD *)(v15 + 8) + 16) == 68)
    {
LABEL_21:
      v16 = *a1;
      v26[0] = v5;
      v26[2] = 1;
      v19 = sub_1C4825F50(&v29);
      if ((_DWORD)v17 == 1)
      v28 = v19;
      if (v19 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v27, -1, 1);
      }
      else
      {
        v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
        if (!v19)
          v20 = 0;
        v27 = v20;
      }
      v21 = llvm::ConstantInt::get(***v16[1], (llvm::LLVMContext *)&v27, v18);
      ((void (*)(llvm::ConstantInt *****, _DWORD *, llvm::ValueHandleBase *))(*v16)[2])(v16, v26, v21);
      if (v28 >= 0x41 && v27)
        MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
      goto LABEL_30;
    }
    v24 = sub_1C554C1FC(v10, v7);
    if (!v25)
      return 0;
    if (v24 == -1)
    {
      v11 = *a1;
      LODWORD(v27) = v5;
      v28 = 1;
      v26[0] = v10;
      goto LABEL_8;
    }
    if (v24)
      return 0;
  }
  v11 = *a1;
  LODWORD(v27) = v5;
  v28 = 1;
  v26[0] = v9;
LABEL_8:
  v26[4] = 0;
  ((void (*)(llvm::ConstantInt *****, uint64_t, unint64_t *, uint64_t, _DWORD *, uint64_t, _QWORD))(*v11)[4])(v11, 19, &v27, 1, v26, 1, 0);
LABEL_30:
  v22 = a2;
  if ((*(_BYTE *)a2 & 4) == 0)
  {
    v22 = a2;
    if ((*(_WORD *)(a2 + 44) & 8) != 0)
    {
      v22 = a2;
      do
        v22 = *(_QWORD *)(v22 + 8);
      while ((*(_WORD *)(v22 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v22 + 8));
  return 1;
}

uint64_t sub_1C499FE84(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)*a1;
  v4[5] = *(_QWORD *)(a2 + 24);
  v4[6] = a2;
  v5 = (_QWORD *)*a1;
  v6 = *(_QWORD *)(v5[1] + 40);
  v7 = *(_DWORD **)(a2 + 32);
  v8 = v7[9];
  v9 = v7[17];
  if ((v8 & 0x80000000) != 0)
    v10 = (uint64_t *)(*(_QWORD *)(v6 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
  else
    v10 = (uint64_t *)(*(_QWORD *)(v6 + 272) + 8 * v8);
  v11 = *v10;
  if (!v11)
    goto LABEL_5;
  if ((*(_BYTE *)(v11 + 3) & 1) != 0)
    goto LABEL_39;
  v11 = *(_QWORD *)(v11 + 24);
  if (!v11)
    goto LABEL_5;
  if ((*(_BYTE *)(v11 + 3) & 1) != 0)
LABEL_39:
    v11 = *(_QWORD *)(v11 + 8);
  else
    v11 = 0;
LABEL_5:
  if ((v9 & 0x80000000) != 0)
    v12 = (uint64_t *)(*(_QWORD *)(v6 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
  else
    v12 = (uint64_t *)(*(_QWORD *)(v6 + 272) + 8 * v9);
  v13 = *v12;
  if (v13 && ((*(_BYTE *)(v13 + 3) & 1) != 0 || (v13 = *(_QWORD *)(v13 + 24)) != 0 && (*(_BYTE *)(v13 + 3) & 1) != 0))
    v14 = *(_QWORD *)(v13 + 8);
  else
    v14 = 0;
  if (*(_DWORD *)(v11 + 40) != 2)
    return 0;
  v15 = *(_QWORD *)(v11 + 32);
  if (*(_BYTE *)(v15 + 32))
    return 0;
  v18 = *(_DWORD *)(v15 + 36);
  if (v18 < 0 && (v18 & 0x7FFFFFFFu) < *(_DWORD *)(v6 + 432))
    v19 = *(_QWORD *)(*(_QWORD *)(v6 + 424) + 8 * (v18 & 0x7FFFFFFF));
  else
    v19 = 0;
  v20 = *(_DWORD *)(*(_QWORD *)(v14 + 32) + 36);
  if (v20 < 0 && (v20 & 0x7FFFFFFFu) < *(_DWORD *)(v6 + 432))
    v21 = *(_QWORD *)(*(_QWORD *)(v6 + 424) + 8 * (v20 & 0x7FFFFFFF));
  else
    v21 = 0;
  v16 = 0;
  v22 = **(unsigned __int16 **)(v11 + 16);
  if ((v22 - 118) <= 8 && ((1 << (v22 - 118)) & 0x141) != 0)
  {
    if (v19 != v21)
      return 0;
    v23 = **(unsigned __int16 **)(a2 + 16);
    v32 = v19;
    v33 = 0;
    LODWORD(v28[0]) = v18;
    v29 = 0;
    v30 = v20;
    v31 = 0;
    v24 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, _QWORD *, uint64_t, _QWORD))(*v5 + 32))(v5, v23, &v32, 1, v28, 2, 0);
    v25 = (_QWORD *)*a1;
    LODWORD(v32) = v7[1];
    v33 = 1;
    v28[0] = v24;
    v28[1] = v26;
    v29 = 1;
    (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, _QWORD *, uint64_t, _QWORD))(*v25 + 32))(v25, v22, &v32, 1, v28, 1, 0);
    v27 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v27 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v27 = a2;
        do
          v27 = *(_QWORD *)(v27 + 8);
        while ((*(_WORD *)(v27 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v27 + 8));
    return 1;
  }
  return v16;
}

uint64_t sub_1C49A011C(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)();
  uint64_t v14;
  int v15;
  uint64_t (***v16)();
  void (**v17)(uint64_t (***)());
  uint64_t (***v18)();
  void (**v19)(uint64_t (***)());
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t (***v23)();
  void (**v24)(uint64_t (***)());
  uint64_t (***v25)();
  void (**v26)(uint64_t (***)());
  char v27;
  int v28;
  const llvm::APInt *v29;
  llvm::ConstantInt *****v30;
  llvm::ValueHandleBase *v31;
  BOOL (*v32)(_BOOL8);
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  llvm::ValueHandleBase *v40;
  BOOL (*v41)(_BOOL8);
  uint64_t v43;
  llvm::ConstantInt *****v44;
  BOOL (*v45)(_BOOL8);
  uint64_t v46;
  llvm::ConstantInt *****v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  llvm::ConstantInt ******v51;
  int v52;
  uint64_t (**v53)();
  int v54;
  uint64_t (**v55)();
  BOOL (*v56)(_BOOL8);
  int v57;
  uint64_t (***v58)();
  BOOL (*v59)(_BOOL8);
  int v60;
  uint64_t (**v61)();
  unsigned int v62;
  unsigned __int8 v63;
  uint64_t (**v64)();
  uint64_t (*v65)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  char v66;
  uint64_t (***v67)();
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)a1;
  v9 = a4;
  if ((a4 & 0x80000000) != 0)
    v10 = (uint64_t *)(*(_QWORD *)(v8 + 24) + 16 * (a4 & 0x7FFFFFFF) + 8);
  else
    v10 = (uint64_t *)(*(_QWORD *)(v8 + 272) + 8 * a4);
  v11 = *v10;
  if (v11 && ((*(_BYTE *)(v11 + 3) & 1) != 0 || (v11 = *(_QWORD *)(v11 + 24)) != 0 && (*(_BYTE *)(v11 + 3) & 1) != 0))
  {
    v12 = *(_QWORD *)(v11 + 8);
    if ((a3 & 0x80000000) == 0)
      goto LABEL_12;
  }
  else
  {
    v12 = 0;
    if ((a3 & 0x80000000) == 0)
      goto LABEL_12;
  }
  if ((a3 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v8 + 432))
  {
    v13 = *(uint64_t (***)())(*(_QWORD *)(v8 + 424) + 8 * (a3 & 0x7FFFFFFF));
    goto LABEL_13;
  }
LABEL_12:
  v13 = 0;
LABEL_13:
  if (*(_DWORD *)(v12 + 40) != 3)
    goto LABEL_67;
  v14 = **(unsigned __int16 **)(v12 + 16);
  if ((a2 - 65) < 2 || (_DWORD)a2 == 47)
  {
    if ((_DWORD)v14 != (_DWORD)a2)
      goto LABEL_67;
  }
  else if ((_DWORD)a2 != 45 || (v14 - 45) >= 2)
  {
    goto LABEL_67;
  }
  v51 = *(llvm::ConstantInt *******)(a1 + 8);
  v15 = *(_DWORD *)(*(_QWORD *)(v12 + 32) + 68);
  v55 = &off_1E816EFF0;
  v56 = sub_1C554C894;
  v58 = &v55;
  v64 = &off_1E816F038;
  v65 = sub_1C554C8B0;
  v67 = &v64;
  sub_1C554C3AC(v15, v8, (uint64_t)&v55, (uint64_t)&v64, 0, 0, &v61);
  v16 = v67;
  if (v67 == &v64)
  {
    v17 = (void (**)(uint64_t (***)()))(v64 + 4);
    v16 = &v64;
LABEL_22:
    (*v17)(v16);
    goto LABEL_23;
  }
  if (v67)
  {
    v17 = (void (**)(uint64_t (***)()))(*v67 + 5);
    goto LABEL_22;
  }
LABEL_23:
  v18 = v58;
  if (v58 == &v55)
  {
    v19 = (void (**)(uint64_t (***)()))(v55 + 4);
    v18 = &v55;
LABEL_25:
    (*v19)(v18);
    goto LABEL_26;
  }
  if (v58)
  {
    v19 = (void (**)(uint64_t (***)()))(*v58 + 5);
    goto LABEL_25;
  }
LABEL_26:
  v52 = v63;
  if (v63)
  {
    if (v62 >= 0x41 && v61)
      MEMORY[0x1CAA32F9C](v61, 0x1000C8000313F17);
    v20 = 2;
    goto LABEL_42;
  }
  v21 = *(_DWORD *)(*(_QWORD *)(v12 + 32) + 36);
  v22 = *(_QWORD *)a1;
  v55 = &off_1E816EFF0;
  v56 = sub_1C554C894;
  v58 = &v55;
  v64 = &off_1E816F038;
  v65 = sub_1C554C8B0;
  v67 = &v64;
  sub_1C554C3AC(v21, v22, (uint64_t)&v55, (uint64_t)&v64, 0, 0, &v61);
  v23 = v67;
  if (v67 == &v64)
  {
    v24 = (void (**)(uint64_t (***)()))(v64 + 4);
    v23 = &v64;
LABEL_33:
    (*v24)(v23);
    goto LABEL_34;
  }
  if (v67)
  {
    v24 = (void (**)(uint64_t (***)()))(*v67 + 5);
    goto LABEL_33;
  }
LABEL_34:
  v25 = v58;
  if (v58 == &v55)
  {
    v26 = (void (**)(uint64_t (***)()))(v55 + 4);
    v25 = &v55;
LABEL_36:
    (*v26)(v25);
    goto LABEL_37;
  }
  if (v58)
  {
    v26 = (void (**)(uint64_t (***)()))(*v58 + 5);
    goto LABEL_36;
  }
LABEL_37:
  if (v63)
  {
    if (v62 >= 0x41 && v61)
      MEMORY[0x1CAA32F9C](v61, 0x1000C8000313F17);
    v20 = 1;
LABEL_42:
    v50 = v20 ^ 3;
    sub_1C554C050(a3, *(_QWORD *)a1);
    if (v27)
    {
      if (v52)
        v28 = v14;
      else
        v28 = a2;
      sub_1C554CE74(v28, a3, *(_DWORD *)(*(_QWORD *)(v12 + 32) + 32 * v20 + 4), *(_QWORD *)a1, (uint64_t)&v64);
      if (!v66)
        goto LABEL_67;
      v30 = *v51;
      v61 = v13;
      v62 = 0;
      if (v52)
      {
        LODWORD(v55) = *(_DWORD *)(*(_QWORD *)(v12 + 32) + 32 * v50 + 4);
        v57 = 0;
        v53 = v13;
        v54 = 0;
        v31 = llvm::ConstantInt::get(***v30[1], (llvm::LLVMContext *)&v64, v29);
        v58 = (uint64_t (***)())((uint64_t (*)(llvm::ConstantInt *****, uint64_t (***)(), llvm::ValueHandleBase *))(*v30)[2])(v30, &v53, v31);
        v59 = v32;
        v60 = 1;
        ((void (*)(llvm::ConstantInt *****, uint64_t, uint64_t (***)(), uint64_t, uint64_t (***)(), uint64_t, uint64_t))(*v30)[4])(v30, a2, &v61, 1, &v55, 2, **(unsigned __int16 **)(a1 + 16) | 0x100000000);
      }
      else
      {
        v53 = v13;
        v54 = 0;
        v40 = llvm::ConstantInt::get(***v30[1], (llvm::LLVMContext *)&v64, v29);
        v55 = (uint64_t (**)())((uint64_t (*)(llvm::ConstantInt *****, uint64_t (***)(), llvm::ValueHandleBase *))(*v30)[2])(v30, &v53, v40);
        v56 = v41;
        v57 = 1;
        LODWORD(v58) = *(_DWORD *)(*(_QWORD *)(v12 + 32) + 32 * v50 + 4);
        v60 = 0;
        ((void (*)(llvm::ConstantInt *****, uint64_t, uint64_t (***)(), uint64_t, uint64_t (***)(), uint64_t, uint64_t))(*v30)[4])(v30, v14, &v61, 1, &v55, 2, **(unsigned __int16 **)(a1 + 16) | 0x100000000);
      }
      v38 = *(_DWORD *)(*(_QWORD *)(v33 + 32) + 4);
      v39 = v38 & 0xFFFFFF00;
      if (v66 && v65 >= 0x41 && v64)
        MEMORY[0x1CAA32F9C](v64, 0x1000C8000313F17);
    }
    else
    {
      v34 = *(_QWORD *)a1;
      if ((a4 & 0x80000000) != 0)
        v35 = (uint64_t *)(*(_QWORD *)(v34 + 24) + 16 * (a4 & 0x7FFFFFFF) + 8);
      else
        v35 = (uint64_t *)(*(_QWORD *)(v34 + 272) + 8 * v9);
      v36 = *v35;
      if (!*v35)
        goto LABEL_67;
      while ((*(_BYTE *)(v36 + 3) & 1) != 0)
      {
        v36 = *(_QWORD *)(v36 + 24);
        if (!v36)
          goto LABEL_67;
      }
      v37 = 0;
      LOBYTE(v38) = 0;
      v39 = 0;
      while (1)
      {
        v36 = *(_QWORD *)(v36 + 24);
        if (!v36)
          break;
        if ((*(_BYTE *)(v36 + 3) & 1) == 0)
          return v37 | v39 | v38;
      }
      if ((_DWORD)v14 == 46 && !**(_BYTE **)(a1 + 24))
        goto LABEL_67;
      if (v52)
        v43 = a2;
      else
        v43 = v14;
      v44 = *v51;
      v64 = v13;
      LODWORD(v65) = 0;
      LODWORD(v55) = a3;
      v57 = 0;
      LODWORD(v58) = *(_DWORD *)(*(_QWORD *)(v12 + 32) + 32 * v50 + 4);
      v60 = 0;
      v46 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, uint64_t (***)(), uint64_t, uint64_t (***)(), uint64_t, uint64_t))(*v44)[4])(v44, v43, &v64, 1, &v55, 2, *(unsigned __int16 *)(v12 + 44) | 0x100000000);
      v47 = *v51;
      v64 = v13;
      LODWORD(v65) = 0;
      if (v52)
      {
        v55 = (uint64_t (**)())v46;
        v56 = v45;
        v48 = *(_DWORD *)(*(_QWORD *)(v12 + 32) + 68);
        v57 = 1;
        LODWORD(v58) = v48;
        v60 = 0;
      }
      else
      {
        LODWORD(v55) = *(_DWORD *)(*(_QWORD *)(v12 + 32) + 36);
        v57 = 0;
        v58 = (uint64_t (***)())v46;
        v59 = v45;
        v60 = 1;
      }
      ((void (*)(void))(*v47)[4])();
      v38 = *(_DWORD *)(*(_QWORD *)(v49 + 32) + 4);
      v39 = v38 & 0xFFFFFF00;
    }
    v37 = 0x100000000;
    return v37 | v39 | v38;
  }
LABEL_67:
  v37 = 0;
  LOBYTE(v38) = 0;
  v39 = 0;
  return v37 | v39 | v38;
}

uint64_t sub_1C49A07B0(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  const char *v13;
  unsigned int v14;
  unint64_t v15;
  _BYTE v16[8];
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 40);
  if ((a2 & 0x80000000) != 0)
    v3 = (uint64_t *)(*(_QWORD *)(v2 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v3 = (uint64_t *)(*(_QWORD *)(v2 + 272) + 8 * a2);
  v4 = *v3;
  if (!*v3)
    return 1;
  while ((*(_BYTE *)(v4 + 3) & 1) != 0)
  {
    v4 = *(_QWORD *)(v4 + 24);
    if (!v4)
      return 1;
  }
  v7 = (_QWORD *)(v4 + 8);
  v6 = *(_QWORD *)(v4 + 8);
  v8 = *(_QWORD *)(v6 + 32);
  if (*(_BYTE *)v8)
    return 0;
LABEL_10:
  v9 = *(_DWORD *)(v8 + 4);
  if (v9 < 0)
  {
    v10 = v9 & 0x7FFFFFFF;
    if (v10 < *(_DWORD *)(v2 + 432))
    {
      v11 = **(unsigned __int16 **)(v6 + 16);
      v19 = *(_QWORD *)(*(_QWORD *)(v2 + 424) + 8 * v10);
      if ((v19 & 0xFFFFFFFFFFFFFFF9) != 0)
      {
        if (v11 == 119)
        {
          v12 = sub_1C4825F50(&v19);
          if ((_DWORD)v13 == 1)
          {
            v15 = v12;
            v12 = v15;
          }
          if (v12 > 0xF)
            goto LABEL_25;
        }
        v18 = 0;
        v14 = *(_DWORD *)(v8 + 4);
        v17 = &v18;
        v20 = v14;
        if (sub_1C49BCA00((uint64_t)v16, v2, &v20))
        {
          if (v18 == 0xFFFF)
          {
LABEL_25:
            while (1)
            {
              v4 = *(_QWORD *)(v4 + 24);
              if (!v4)
                return 1;
              if ((*(_BYTE *)(v4 + 3) & 1) == 0)
              {
                v6 = *(_QWORD *)(v4 + 8);
                if (v6 != *v7)
                {
                  result = 0;
                  v7 = (_QWORD *)(v4 + 8);
                  v8 = *(_QWORD *)(v6 + 32);
                  if (!*(_BYTE *)v8)
                    goto LABEL_10;
                  return result;
                }
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

void sub_1C49A092C(uint64_t a1, int a2, unint64_t a3, int a4, uint64_t a5)
{
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  const char *v13;
  unsigned int v14;
  unint64_t v15;
  const char *v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  const char *v20;
  void *v21;
  unsigned int v22;
  void *__src;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;

  v26 = a3;
  v9 = sub_1C554C050(a4, a5);
  if (!v10)
    goto LABEL_33;
  v11 = v9;
  if (a4 < 0 && (a4 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a5 + 432))
    v12 = *(_QWORD *)(*(_QWORD *)(a5 + 424) + 8 * (a4 & 0x7FFFFFFF));
  else
    v12 = 0;
  v25 = v12;
  v14 = sub_1C4825F50(&v25);
  if ((_DWORD)v13 == 1)
  v24 = v14;
  if (v14 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__src, v11, 1);
  }
  else
  {
    if (v14)
      v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
    else
      v15 = 0;
    __src = (void *)(v15 & v11);
  }
  if ((a2 - 118) >= 2 && a2 != 126)
  {
    if (a2 == 124)
    {
      v17 = sub_1C4825F50(&v26);
      if ((_DWORD)v16 == 1)
      v18 = v24;
      v19 = v24 > v17;
      if (v24 < v17)
      {
        llvm::APInt::sext((llvm::APInt *)&__src, v17, (llvm::APInt *)&v21);
        goto LABEL_27;
      }
      goto LABEL_23;
    }
    if (v24 >= 0x41 && __src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
LABEL_33:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    return;
  }
  v17 = sub_1C4825F50(&v26);
  if ((_DWORD)v20 == 1)
  v18 = v24;
  v19 = v24 > v17;
  if (v24 < v17)
  {
    llvm::APInt::zext((llvm::APInt *)&__src, v17, (uint64_t)&v21);
    goto LABEL_27;
  }
LABEL_23:
  if (v19)
  {
    llvm::APInt::trunc((llvm::APInt *)&__src, v17, (llvm::APInt *)&v21);
  }
  else
  {
    v22 = v18;
    if (v18 > 0x40)
    {
      v21 = (void *)operator new[]();
      memcpy(v21, __src, (((unint64_t)v22 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v21 = __src;
    }
  }
LABEL_27:
  *(_DWORD *)(a1 + 8) = v22;
  *(_QWORD *)a1 = v21;
  *(_BYTE *)(a1 + 16) = 1;
  if (v24 >= 0x41)
  {
    if (__src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  }
}

void sub_1C49A0B98(uint64_t a1, uint64_t **a2, int *a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t *v11;
  int v12;
  uint64_t *v13;
  const char *v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  void *v27;
  const char *v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  unsigned int v38;
  void *v39;
  BOOL v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  uint64_t v44;
  int64_t v45;
  BOOL v46;
  uint64_t v47;
  BOOL v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int64_t v57;
  unint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  int v76;
  char v77;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  int v85;
  int64_t v86;
  unint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  unsigned int v98;
  void **v99;
  uint64_t v100;
  unsigned int v101;
  void **v102;
  uint64_t v103;
  unsigned int v104;
  void **p_s2;
  unsigned int v106;
  void **v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  BOOL v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  const char *v147;
  unsigned int v148;
  unsigned int v149;
  void *v150;
  _BOOL4 v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  char v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  BOOL v171;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  void *v180;
  const char *v181;
  unsigned int v182;
  const char *v183;
  unsigned int v184;
  void **v185;
  _QWORD *v186;
  unsigned int v187;
  int v188;
  unsigned int v189;
  uint64_t v190;
  unsigned int v191;
  void *v192;
  void *__s1;
  unsigned int v194;
  int v195;
  uint64_t *v196;
  unsigned int v197;
  unint64_t v198;
  void *__s2;
  unsigned int v200;

  v8 = *(_QWORD *)((*a2)[1] + 40);
  v10 = a3[1];
  v9 = a3[2];
  if (v9 < 0 && (v9 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v8 + 432))
    v11 = *(uint64_t **)(*(_QWORD *)(v8 + 424) + 8 * (v9 & 0x7FFFFFFF));
  else
    v11 = 0;
  v12 = *a3;
  v196 = v11;
  if (v10 < 0 && (v10 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v8 + 432))
  {
    v13 = *(uint64_t **)(*(_QWORD *)(v8 + 424) + 8 * (v10 & 0x7FFFFFFF));
    if ((v11 & 1) == 0)
      goto LABEL_18;
  }
  else
  {
    v13 = 0;
    if ((v11 & 1) == 0)
    {
LABEL_18:
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 32) = 0;
      goto LABEL_19;
    }
  }
  if (v13 != v11)
    goto LABEL_18;
  v15 = sub_1C4825F50((unint64_t *)&v196);
  if ((_DWORD)v14 == 1)
  v16 = sub_1C554C050(v10, v8);
  v18 = v17;
  v19 = sub_1C554C050(v9, v8);
  if (!v18 || v20 == 0)
    goto LABEL_18;
  v35 = v19;
  v194 = v15;
  if (v15 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__s1, v16, 1);
    v200 = v15;
    llvm::APInt::initSlowCase((llvm::APInt *)&__s2, v35, 1);
  }
  else
  {
    v36 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
    v37 = (void *)(v16 & v36);
    if (!v15)
    {
      v37 = 0;
      v36 = 0;
    }
    __s1 = v37;
    v200 = v15;
    __s2 = (void *)(v36 & v19);
  }
  switch(v12)
  {
    case ' ':
      v38 = v194;
      v39 = __s2;
      if (v194 > 0x40)
        v40 = memcmp(__s1, __s2, (((unint64_t)v194 + 63) >> 3) & 0x3FFFFFF8) == 0;
      else
        v40 = __s1 == __s2;
      LOBYTE(v43) = v40;
      goto LABEL_174;
    case '!':
      v38 = v194;
      v39 = __s2;
      if (v194 > 0x40)
        v48 = memcmp(__s1, __s2, (((unint64_t)v194 + 63) >> 3) & 0x3FFFFFF8) == 0;
      else
        v48 = __s1 == __s2;
      v77 = v48;
      LOBYTE(v43) = v77 ^ 1;
      goto LABEL_174;
    case '"':
      v38 = v194;
      if (v194 <= 0x40)
      {
        v39 = __s2;
        v46 = __s1 > __s2;
        goto LABEL_62;
      }
      v39 = __s2;
      v43 = (((unint64_t)v194 + 63) >> 3) & 0x3FFFFFF8;
      while (v43)
      {
        v123 = *(_QWORD *)((char *)__s1 + v43 - 8);
        v124 = *(_QWORD *)((char *)__s2 + v43 - 8);
        v43 -= 8;
        v46 = v123 > v124;
        if (v123 != v124)
          goto LABEL_62;
      }
      goto LABEL_174;
    case '#':
      v38 = v194;
      if (v194 <= 0x40)
      {
        v39 = __s2;
        LOBYTE(v43) = __s1 >= __s2;
        goto LABEL_174;
      }
      v39 = __s2;
      v125 = (((unint64_t)v194 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v125)
        {
          LOBYTE(v43) = 1;
          goto LABEL_174;
        }
        v126 = *(_QWORD *)((char *)__s1 + v125 - 8);
        v127 = *(_QWORD *)((char *)__s2 + v125 - 8);
        v125 -= 8;
        v46 = v126 > v127;
      }
      while (v126 == v127);
LABEL_62:
      LOBYTE(v43) = v46;
      goto LABEL_174;
    case '$':
      v38 = v194;
      if (v194 <= 0x40)
      {
        v39 = __s2;
        LOBYTE(v43) = __s1 < __s2;
        goto LABEL_174;
      }
      v39 = __s2;
      v43 = (((unint64_t)v194 + 63) >> 3) & 0x3FFFFFF8;
      while (v43)
      {
        v121 = *(_QWORD *)((char *)__s1 + v43 - 8);
        v122 = *(_QWORD *)((char *)__s2 + v43 - 8);
        v43 -= 8;
        if (v121 != v122)
        {
          LOBYTE(v43) = v121 <= v122;
          goto LABEL_174;
        }
      }
      goto LABEL_174;
    case '%':
      v38 = v194;
      if (v194 <= 0x40)
      {
        v39 = __s2;
        LODWORD(v45) = __s1 > __s2;
        if (__s1 < __s2)
          LODWORD(v45) = -1;
        goto LABEL_77;
      }
      v39 = __s2;
      v45 = (((unint64_t)v194 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v45)
          goto LABEL_77;
        v128 = *(_QWORD *)((char *)__s1 + v45 - 8);
        v129 = *(_QWORD *)((char *)__s2 + v45 - 8);
        v45 -= 8;
        v113 = v128 > v129;
      }
      while (v128 == v129);
      goto LABEL_266;
    case '&':
      v38 = v194;
      if (v194 > 0x40)
      {
        v103 = *((_QWORD *)__s1 + ((v194 - 1) >> 6)) & (1 << (v194 - 1));
        v104 = v200 - 1;
        v39 = __s2;
        p_s2 = &__s2;
        if (v200 >= 0x41)
          p_s2 = (void **)((char *)__s2 + 8 * (v104 >> 6));
        if ((v103 != 0) == (((unint64_t)*p_s2 >> v104) & 1))
        {
          v117 = (((unint64_t)v194 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            if (!v117)
            {
              LODWORD(v43) = 0;
              goto LABEL_82;
            }
            v118 = *(_QWORD *)((char *)__s1 + v117 - 8);
            v119 = *(_QWORD *)((char *)__s2 + v117 - 8);
            v117 -= 8;
          }
          while (v118 == v119);
          if (v118 > v119)
            LODWORD(v43) = 1;
          else
            LODWORD(v43) = -1;
        }
        else if (v103)
        {
          LODWORD(v43) = -1;
        }
        else
        {
          LODWORD(v43) = 1;
        }
      }
      else
      {
        v43 = (uint64_t)((_QWORD)__s1 << -(char)v194) >> -(char)v194;
        v39 = __s2;
        v50 = (uint64_t)((_QWORD)__s2 << -(char)v194) >> -(char)v194;
        v46 = v43 < v50;
        LODWORD(v43) = v43 > v50;
        if (v46)
          LODWORD(v43) = -1;
      }
LABEL_82:
      LOBYTE(v43) = (int)v43 > 0;
      goto LABEL_174;
    case '\'':
      v38 = v194;
      if (v194 > 0x40)
      {
        v100 = *((_QWORD *)__s1 + ((v194 - 1) >> 6)) & (1 << (v194 - 1));
        v101 = v200 - 1;
        v39 = __s2;
        v102 = &__s2;
        if (v200 >= 0x41)
          v102 = (void **)((char *)__s2 + 8 * (v101 >> 6));
        if ((v100 != 0) == (((unint64_t)*v102 >> v101) & 1))
        {
          v114 = (((unint64_t)v194 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            if (!v114)
            {
              LODWORD(v43) = 0;
              goto LABEL_71;
            }
            v115 = *(_QWORD *)((char *)__s1 + v114 - 8);
            v116 = *(_QWORD *)((char *)__s2 + v114 - 8);
            v114 -= 8;
          }
          while (v115 == v116);
          if (v115 > v116)
            LODWORD(v43) = 1;
          else
            LODWORD(v43) = -1;
        }
        else if (v100)
        {
          LODWORD(v43) = -1;
        }
        else
        {
          LODWORD(v43) = 1;
        }
      }
      else
      {
        v43 = (uint64_t)((_QWORD)__s1 << -(char)v194) >> -(char)v194;
        v39 = __s2;
        v47 = (uint64_t)((_QWORD)__s2 << -(char)v194) >> -(char)v194;
        v46 = v43 < v47;
        LODWORD(v43) = v43 > v47;
        if (v46)
          LODWORD(v43) = -1;
      }
LABEL_71:
      LOBYTE(v43) = (int)v43 >= 0;
      goto LABEL_174;
    case '(':
      v38 = v194;
      if (v194 <= 0x40)
      {
        v39 = __s2;
        v49 = (uint64_t)((_QWORD)__s1 << -(char)v194) >> -(char)v194 < (uint64_t)((_QWORD)__s2 << -(char)v194) >> -(char)v194;
        goto LABEL_91;
      }
      v43 = *((_QWORD *)__s1 + ((v194 - 1) >> 6)) >> (v194 - 1);
      v106 = v200 - 1;
      v39 = __s2;
      v107 = &__s2;
      if (v200 >= 0x41)
        v107 = (void **)((char *)__s2 + 8 * (v106 >> 6));
      if (((v43 ^ ((unint64_t)*v107 >> v106)) & 1) != 0)
        goto LABEL_174;
      v43 = (((unint64_t)v194 + 63) >> 3) & 0x3FFFFFF8;
      break;
    case ')':
      v38 = v194;
      if (v194 > 0x40)
      {
        v97 = *((_QWORD *)__s1 + ((v194 - 1) >> 6)) & (1 << (v194 - 1));
        v98 = v200 - 1;
        v39 = __s2;
        v99 = &__s2;
        if (v200 >= 0x41)
          v99 = (void **)((char *)__s2 + 8 * (v98 >> 6));
        if ((v97 != 0) == (((unint64_t)*v99 >> v98) & 1))
        {
          v110 = (((unint64_t)v194 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            if (!v110)
            {
              LODWORD(v45) = 0;
              goto LABEL_77;
            }
            v111 = *(_QWORD *)((char *)__s1 + v110 - 8);
            v112 = *(_QWORD *)((char *)__s2 + v110 - 8);
            v110 -= 8;
            v113 = v111 > v112;
          }
          while (v111 == v112);
LABEL_266:
          if (v113)
            LODWORD(v45) = 1;
          else
            LODWORD(v45) = -1;
        }
        else if (v97)
        {
          LODWORD(v45) = -1;
        }
        else
        {
          LODWORD(v45) = 1;
        }
      }
      else
      {
        v45 = (uint64_t)((_QWORD)__s1 << -(char)v194) >> -(char)v194;
        v39 = __s2;
        v44 = (uint64_t)((_QWORD)__s2 << -(char)v194) >> -(char)v194;
        v46 = v45 < v44;
        LODWORD(v45) = v45 > v44;
        if (v46)
          LODWORD(v45) = -1;
      }
LABEL_77:
      v49 = (int)v45 < 1;
LABEL_91:
      LOBYTE(v43) = v49;
      goto LABEL_174;
    default:
      if (v200 >= 0x41 && __s2)
        MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
      if (v194 >= 0x41 && __s1)
        MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
      goto LABEL_18;
  }
  while (v43)
  {
    v108 = *(_QWORD *)((char *)__s1 + v43 - 8);
    v109 = *(_QWORD *)((char *)__s2 + v43 - 8);
    v43 -= 8;
    if (v108 != v109)
    {
      LOBYTE(v43) = v108 <= v109;
      break;
    }
  }
LABEL_174:
  *(_BYTE *)a1 = v43 & 1;
  *(_DWORD *)(a1 + 24) = 1;
  *(_BYTE *)(a1 + 32) = 1;
  if (v200 >= 0x41 && v39 != 0)
  {
    MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
    v38 = v194;
  }
  if (v38 >= 0x41 && __s1)
    MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
  if (*(_BYTE *)(a1 + 32))
    return;
LABEL_19:
  v22 = *(_QWORD *)((*a2)[1] + 40);
  v24 = a3[1];
  v23 = a3[2];
  v25 = *a3;
  if (v23 < 0 && (v23 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v22 + 432))
    v26 = *(_QWORD *)(*(_QWORD *)(v22 + 424) + 8 * (v23 & 0x7FFFFFFF));
  else
    v26 = 0;
  v198 = v26;
  if ((v24 & 0x80000000) != 0 && (v24 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v22 + 432))
  {
    v27 = *(void **)(*(_QWORD *)(v22 + 424) + 8 * (v24 & 0x7FFFFFFF));
    if ((v26 & 1) == 0)
      goto LABEL_163;
  }
  else
  {
    v27 = 0;
    if ((v26 & 1) == 0)
    {
LABEL_163:
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 32) = 0;
      return;
    }
  }
  v29 = sub_1C4825F50(&v198);
  if ((_DWORD)v28 == 1)
  v30 = sub_1C554C050(v23, v22);
  if (!v31)
    goto LABEL_163;
  v32 = v30;
  v200 = v29;
  if (v29 > 0x40)
  {
    v120 = v30;
    llvm::APInt::initSlowCase((llvm::APInt *)&__s2, v30, 1);
    v32 = v120;
  }
  else
  {
    v33 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v29;
    if (!v29)
      v33 = 0;
    __s2 = (void *)(v33 & v30);
  }
  if ((v25 & 0xFFFFFFFE) != 0x20)
    goto LABEL_114;
  v34 = (uint64_t *)((v24 & 0x80000000) != 0
                  ? *(_QWORD *)(v22 + 24) + 16 * (v24 & 0x7FFFFFFF) + 8
                  : *(_QWORD *)(v22 + 272) + 8 * v24);
  v41 = *v34;
  if (!v41)
    goto LABEL_114;
  while ((*(_BYTE *)(v41 + 3) & 1) != 0)
  {
    v41 = *(_QWORD *)(v41 + 24);
    if (!v41)
      goto LABEL_114;
  }
  while (1)
  {
    v41 = *(_QWORD *)(v41 + 24);
    if (!v41)
      break;
    if ((*(_BYTE *)(v41 + 3) & 1) == 0)
      goto LABEL_114;
  }
  if ((v24 & 0x80000000) != 0)
    v42 = (uint64_t *)(*(_QWORD *)(v22 + 24) + 16 * (v24 & 0x7FFFFFFF) + 8);
  else
    v42 = (uint64_t *)(*(_QWORD *)(v22 + 272) + 8 * v24);
  v51 = *v42;
  if (v51
    && ((v190 = v32, (*(_BYTE *)(v51 + 3) & 1) != 0)
     || (v51 = *(_QWORD *)(v51 + 24)) != 0 && (*(_BYTE *)(v51 + 3) & 1) != 0)
    && (v152 = *(_QWORD *)(v51 + 8)) != 0
    && **(_WORD **)(v152 + 16) == 126
    && *(_DWORD *)(v152 + 40) == 2)
  {
    v54 = *(_DWORD *)(*(_QWORD *)(v152 + 32) + 36);
    if (v54 < 0 && (v54 & 0x7FFFFFFFu) < *(_DWORD *)(v22 + 432))
      v153 = *(void **)(*(_QWORD *)(v22 + 424) + 8 * (v54 & 0x7FFFFFFF));
    else
      v153 = 0;
    __s1 = v153;
    v29 = sub_1C4825F50((unint64_t *)&__s1);
    if ((_DWORD)v183 == 1)
  }
  else
  {
    if ((v24 & 0x80000000) != 0)
      v52 = (uint64_t *)(*(_QWORD *)(v22 + 24) + 16 * (v24 & 0x7FFFFFFF) + 8);
    else
      v52 = (uint64_t *)(*(_QWORD *)(v22 + 272) + 8 * v24);
    v53 = *v52;
    if (!v53)
    {
      v54 = 0;
      goto LABEL_101;
    }
    v190 = v32;
    if ((*(_BYTE *)(v53 + 3) & 1) != 0 || (v53 = *(_QWORD *)(v53 + 24)) != 0 && (*(_BYTE *)(v53 + 3) & 1) != 0)
    {
      v134 = *(_QWORD *)(v53 + 8);
      if (v134)
      {
        if (**(_WORD **)(v134 + 16) == 124 && *(_DWORD *)(v134 + 40) == 2)
        {
          v54 = *(_DWORD *)(*(_QWORD *)(v134 + 32) + 36);
          if (v54 < 0 && (v54 & 0x7FFFFFFFu) < *(_DWORD *)(v22 + 432))
            v135 = *(void **)(*(_QWORD *)(v22 + 424) + 8 * (v54 & 0x7FFFFFFF));
          else
            v135 = 0;
          __s1 = v135;
          v189 = sub_1C4825F50((unint64_t *)&__s1);
          if ((_DWORD)v181 == 1)
          v182 = v200;
          v60 = v182 - sub_1C4959174((llvm::APInt *)&__s2) + 1;
          v29 = v189;
          v32 = v190;
          if (!v189)
            goto LABEL_114;
          goto LABEL_110;
        }
      }
    }
    v54 = 0;
  }
  v32 = v190;
LABEL_101:
  if (v200 > 0x40)
  {
    v56 = 0;
    v57 = ((unint64_t)v200 + 63) >> 6;
    do
    {
      v46 = v57-- < 1;
      if (v46)
        break;
      v58 = *((_QWORD *)__s2 + v57);
      v56 += __clz(v58);
    }
    while (!v58);
    v59 = v200 | 0xFFFFFFC0;
    if ((v200 & 0x3F) == 0)
      v59 = 0;
    v55 = v56 + v59;
  }
  else
  {
    v55 = v200 + __clz((unint64_t)__s2) - 64;
  }
  v60 = v200 - v55;
  if (!v29)
    goto LABEL_114;
LABEL_110:
  if (v29 < v200 && v29 >= v60)
  {
    v79 = (uint64_t *)((8 * v29) | 1);
    v80 = *a2;
    v80[5] = *(_QWORD *)(a4 + 24);
    v80[6] = a4;
    v81 = *a2;
    v196 = v79;
    v197 = 0;
    LODWORD(__s1) = v54;
    v195 = 0;
    sub_1C5546B4C(v81, 126, (unint64_t *)&v196, (int *)&__s1);
    v83 = v82;
    if (v29 == 1)
    {
      v84 = __s2;
      if (v200 >= 0x41)
      {
        v85 = 0;
        v86 = ((unint64_t)v200 + 63) >> 6;
        do
        {
          v46 = v86-- < 1;
          if (v46)
            break;
          v87 = *((_QWORD *)__s2 + v86);
          v85 += __clz(v87);
        }
        while (!v87);
        v88 = v200 | 0xFFFFFFC0;
        if ((v200 & 0x3F) == 0)
          v88 = 0;
        if (v200 - v85 - v88 > 0x40)
          goto LABEL_197;
        v84 = *(void **)__s2;
      }
      if (v84 == (void *)1)
      {
        v89 = (uint64_t)*a2;
        __s1 = (void *)9;
        v194 = 0;
        sub_1C5544694(v89, (unint64_t *)&__s1, 0);
        v91 = v90;
        if (v25 == 32)
          v25 = 33;
        else
          v25 = 32;
LABEL_203:
        v76 = 0;
        v95 = *(_DWORD *)(*(_QWORD *)(v83 + 32) + 4);
        v96 = *(_DWORD *)(*(_QWORD *)(v91 + 32) + 4);
        *(_DWORD *)a1 = v25;
        *(_DWORD *)(a1 + 4) = v95;
        *(_DWORD *)(a1 + 8) = v96;
        *(_QWORD *)(a1 + 16) = v79;
LABEL_204:
        *(_DWORD *)(a1 + 24) = 0;
LABEL_205:
        *(_BYTE *)(a1 + 32) = 1;
        goto LABEL_159;
      }
    }
LABEL_197:
    v92 = (uint64_t)*a2;
    __s1 = (void *)((8 * v29) | 1);
    v194 = 0;
    llvm::APInt::trunc((llvm::APInt *)&__s2, v29, (llvm::APInt *)&v196);
    if (v197 > 0x40)
      v93 = *v196;
    else
      v93 = (uint64_t)((_QWORD)v196 << -(uint64_t)v197) >> -(uint64_t)v197;
    sub_1C5544694(v92, (unint64_t *)&__s1, v93);
    v91 = v94;
    if (v197 >= 0x41 && v196)
      MEMORY[0x1CAA32F9C](v196, 0x1000C8000313F17);
    goto LABEL_203;
  }
LABEL_114:
  if ((v24 & 0x80000000) != 0)
    v62 = (uint64_t *)(*(_QWORD *)(v22 + 24) + 16 * (v24 & 0x7FFFFFFF) + 8);
  else
    v62 = (uint64_t *)(*(_QWORD *)(v22 + 272) + 8 * v24);
  v63 = *v62;
  if (v63)
  {
    v130 = v32;
    if ((*(_BYTE *)(v63 + 3) & 1) != 0 || (v63 = *(_QWORD *)(v63 + 24)) != 0 && (*(_BYTE *)(v63 + 3) & 1) != 0)
    {
      v131 = *(_QWORD *)(v63 + 8);
      if (v131)
      {
        if (**(_WORD **)(v131 + 16) == 126 && *(_DWORD *)(v131 + 40) == 2)
        {
          v188 = *(_DWORD *)(*(_QWORD *)(v131 + 32) + 36);
          if (v188 < 0 && (v132 = v188 & 0x7FFFFFFF, v132 < *(_DWORD *)(v22 + 432)))
            v133 = *(void **)(*(_QWORD *)(v22 + 424) + 8 * v132);
          else
            v133 = 0;
          v192 = v133;
          v191 = sub_1C4825F50((unint64_t *)&v192);
          if ((_DWORD)v147 == 1)
          v148 = v200;
          v149 = v191 - v200;
          v194 = v200;
          if (v200 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&__s1, 0, 0);
            v148 = v194;
          }
          else
          {
            __s1 = 0;
          }
          sub_1C4912E54(&__s1, v149 + v148, v148);
          if (v200 > 0x40)
          {
            v169 = 0;
            v150 = __s1;
            do
            {
              v170 = *(_QWORD *)((_BYTE *)__s1 + v169) & *(_QWORD *)((_BYTE *)__s2 + v169);
              v151 = v170 != 0;
              if (v170)
                v171 = 1;
              else
                v171 = ((((unint64_t)v200 + 63) >> 3) & 0x3FFFFFF8) - 8 == v169;
              v169 += 8;
            }
            while (!v171);
          }
          else
          {
            v150 = __s1;
            v151 = ((unint64_t)__s1 & (unint64_t)__s2) != 0;
          }
          if (v194 >= 0x41 && v150 != 0)
            MEMORY[0x1CAA32F9C](v150, 0x1000C8000313F17);
          if (v151)
          {
            switch(v25)
            {
              case ' ':
              case '"':
              case '#':
                *(_BYTE *)a1 = 0;
                goto LABEL_376;
              case '!':
              case '$':
              case '%':
                v176 = 1;
                *(_BYTE *)a1 = 1;
                break;
              case '&':
              case '\'':
                v184 = v200 - 1;
                v185 = &__s2;
                if (v200 >= 0x41)
                  v185 = (void **)((char *)__s2 + 8 * (v184 >> 6));
                v186 = (_QWORD *)(((unint64_t)*v185 >> v184) & 1);
                goto LABEL_375;
              case '(':
              case ')':
                v187 = v200 - 1;
                v186 = &__s2;
                if (v200 >= 0x41)
                  v186 = (char *)__s2 + 8 * (v187 >> 6);
                LOBYTE(v186) = ((*v186 >> v187) & 1) == 0;
LABEL_375:
                *(_BYTE *)a1 = (_BYTE)v186;
LABEL_376:
                v176 = 1;
                break;
              default:
                goto LABEL_354;
            }
LABEL_377:
            v76 = 0;
            *(_DWORD *)(a1 + 24) = v176;
            goto LABEL_205;
          }
          if ((v25 - 32) <= 5)
          {
            v173 = *a2;
            v173[5] = *(_QWORD *)(a4 + 24);
            v173[6] = a4;
            v174 = (uint64_t)*a2;
            __s1 = v192;
            v194 = 0;
            llvm::APInt::trunc((llvm::APInt *)&__s2, v191, (llvm::APInt *)&v196);
            if (v197 > 0x40)
              v175 = *v196;
            else
              v175 = (uint64_t)((_QWORD)v196 << -(uint64_t)v197) >> -(uint64_t)v197;
            sub_1C5544694(v174, (unint64_t *)&__s1, v175);
            v178 = v177;
            if (v197 >= 0x41 && v196)
              MEMORY[0x1CAA32F9C](v196, 0x1000C8000313F17);
            v176 = 0;
            v179 = *(_DWORD *)(*(_QWORD *)(v178 + 32) + 4);
            v180 = v192;
            *(_DWORD *)a1 = v25;
            *(_DWORD *)(a1 + 4) = v188;
            *(_DWORD *)(a1 + 8) = v179;
            *(_QWORD *)(a1 + 16) = v180;
            goto LABEL_377;
          }
LABEL_354:
          v32 = v130;
        }
      }
    }
  }
  if ((v25 & 0xFFFFFFFE) != 0x20)
    goto LABEL_158;
  if ((v24 & 0x80000000) != 0)
    v64 = (uint64_t *)(*(_QWORD *)(v22 + 24) + 16 * (v24 & 0x7FFFFFFF) + 8);
  else
    v64 = (uint64_t *)(*(_QWORD *)(v22 + 272) + 8 * v24);
  v65 = *v64;
  if (v65)
  {
    while ((*(_BYTE *)(v65 + 3) & 1) != 0)
    {
      v65 = *(_QWORD *)(v65 + 24);
      if (!v65)
        goto LABEL_132;
    }
    while (1)
    {
      v65 = *(_QWORD *)(v65 + 24);
      if (!v65)
        break;
      if ((*(_BYTE *)(v65 + 3) & 1) == 0)
        goto LABEL_132;
    }
    v66 = (uint64_t *)((v24 & 0x80000000) != 0
                    ? *(_QWORD *)(v22 + 24) + 16 * (v24 & 0x7FFFFFFF) + 8
                    : *(_QWORD *)(v22 + 272) + 8 * v24);
    v67 = *v66;
    if (v67)
    {
      v136 = v32;
      if ((*(_BYTE *)(v67 + 3) & 1) != 0 || (v67 = *(_QWORD *)(v67 + 24)) != 0 && (*(_BYTE *)(v67 + 3) & 1) != 0)
      {
        v154 = *(_QWORD *)(v67 + 8);
        if (v154)
        {
          if (**(_WORD **)(v154 + 16) == 45 && *(_DWORD *)(v154 + 40) == 3)
          {
            v155 = *(_QWORD *)(v154 + 32);
            v156 = *(_DWORD *)(v155 + 36);
            v157 = sub_1C554C050(*(_DWORD *)(v155 + 68), v22);
            if (v158)
            {
LABEL_330:
              v160 = (uint64_t)*a2;
              __s1 = v27;
              v194 = 0;
              sub_1C5544694(v160, (unint64_t *)&__s1, v136 - v157);
              v76 = 0;
              v162 = *(_DWORD *)(*(_QWORD *)(v161 + 32) + 4);
              *(_DWORD *)a1 = v25;
              *(_DWORD *)(a1 + 4) = v156;
LABEL_331:
              *(_DWORD *)(a1 + 8) = v162;
              *(_QWORD *)(a1 + 16) = v27;
              goto LABEL_204;
            }
            v157 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v154 + 32) + 36), v22);
            v32 = v136;
            if (v159)
            {
              v156 = *(_DWORD *)(*(_QWORD *)(v154 + 32) + 68);
              goto LABEL_330;
            }
          }
        }
      }
    }
  }
LABEL_132:
  if ((v24 & 0x80000000) != 0)
    v68 = (uint64_t *)(*(_QWORD *)(v22 + 24) + 16 * (v24 & 0x7FFFFFFF) + 8);
  else
    v68 = (uint64_t *)(*(_QWORD *)(v22 + 272) + 8 * v24);
  v69 = *v68;
  if (v69)
  {
    while ((*(_BYTE *)(v69 + 3) & 1) != 0)
    {
      v69 = *(_QWORD *)(v69 + 24);
      if (!v69)
        goto LABEL_145;
    }
    while (1)
    {
      v69 = *(_QWORD *)(v69 + 24);
      if (!v69)
        break;
      if ((*(_BYTE *)(v69 + 3) & 1) == 0)
        goto LABEL_145;
    }
    v70 = (uint64_t *)((v24 & 0x80000000) != 0
                    ? *(_QWORD *)(v22 + 24) + 16 * (v24 & 0x7FFFFFFF) + 8
                    : *(_QWORD *)(v22 + 272) + 8 * v24);
    v71 = *v70;
    if (v71)
    {
      v137 = v32;
      if ((*(_BYTE *)(v71 + 3) & 1) != 0 || (v71 = *(_QWORD *)(v71 + 24)) != 0 && (*(_BYTE *)(v71 + 3) & 1) != 0)
      {
        v163 = *(_QWORD *)(v71 + 8);
        if (v163)
        {
          if (**(_WORD **)(v163 + 16) == 46 && *(_DWORD *)(v163 + 40) == 3)
          {
            v164 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v163 + 32) + 36), v22);
            v32 = v137;
            if (v165)
            {
              v166 = *(_DWORD *)(*(_QWORD *)(v163 + 32) + 68);
              v167 = (uint64_t)*a2;
              __s1 = v27;
              v194 = 0;
              sub_1C5544694(v167, (unint64_t *)&__s1, v164 - v32);
              v76 = 0;
              v162 = *(_DWORD *)(*(_QWORD *)(v168 + 32) + 4);
              *(_DWORD *)a1 = v25;
              *(_DWORD *)(a1 + 4) = v166;
              goto LABEL_331;
            }
          }
        }
      }
    }
  }
LABEL_145:
  v72 = (uint64_t *)((v24 & 0x80000000) != 0
                  ? *(_QWORD *)(v22 + 24) + 16 * (v24 & 0x7FFFFFFF) + 8
                  : *(_QWORD *)(v22 + 272) + 8 * v24);
  v73 = *v72;
  if (!v73)
    goto LABEL_158;
  while ((*(_BYTE *)(v73 + 3) & 1) != 0)
  {
    v73 = *(_QWORD *)(v73 + 24);
    if (!v73)
      goto LABEL_158;
  }
  while (1)
  {
    v73 = *(_QWORD *)(v73 + 24);
    if (!v73)
      break;
    if ((*(_BYTE *)(v73 + 3) & 1) == 0)
      goto LABEL_158;
  }
  v74 = (uint64_t *)((v24 & 0x80000000) != 0
                  ? *(_QWORD *)(v22 + 24) + 16 * (v24 & 0x7FFFFFFF) + 8
                  : *(_QWORD *)(v22 + 272) + 8 * v24);
  if ((v75 = *v74) == 0
    || (v138 = v32, (*(_BYTE *)(v75 + 3) & 1) == 0)
    && ((v75 = *(_QWORD *)(v75 + 24)) == 0 || (*(_BYTE *)(v75 + 3) & 1) == 0)
    || (v139 = *(_QWORD *)(v75 + 8)) == 0
    || **(_WORD **)(v139 + 16) != 46
    || *(_DWORD *)(v139 + 40) != 3)
  {
LABEL_158:
    v76 = 1;
    goto LABEL_159;
  }
  v140 = *(_QWORD *)(v139 + 32);
  v141 = *(_DWORD *)(v140 + 36);
  v142 = sub_1C554C050(*(_DWORD *)(v140 + 68), v22);
  v76 = 1;
  if (v143)
  {
    v144 = (uint64_t)*a2;
    __s1 = v27;
    v194 = 0;
    sub_1C5544694(v144, (unint64_t *)&__s1, v142 + v138);
    v146 = *(_DWORD *)(*(_QWORD *)(v145 + 32) + 4);
    *(_DWORD *)a1 = v25;
    *(_DWORD *)(a1 + 4) = v141;
    *(_DWORD *)(a1 + 8) = v146;
    *(_QWORD *)(a1 + 16) = v27;
    *(_DWORD *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 32) = 1;
    v76 = 0;
  }
LABEL_159:
  if (v200 >= 0x41)
  {
    if (__s2)
      MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
  }
  if (v76)
    goto LABEL_163;
}

uint64_t sub_1C49A1ED4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned int *v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  const llvm::APInt *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  void *v35;
  char v36;
  int v37;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  int v49;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  const llvm::APFloat *v57;
  uint64_t v58;
  llvm::APFloatBase *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  int v66;
  uint64_t *v67;
  unsigned int v68;
  uint64_t *v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void **v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  const llvm::APInt *v84;
  uint64_t v85;
  const llvm::APInt *v86;
  uint64_t *v87;
  const llvm::detail::DoubleAPFloat *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  _DWORD *v93;
  uint64_t *v94;
  _DWORD *v95;
  int v96;
  char v97;
  int v98;
  _BOOL4 v100;
  uint64_t v101;
  uint64_t **v102;
  uint64_t **v103;
  unint64_t v104;
  uint64_t *v105;
  int v106;
  _BOOL4 v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  const llvm::APFloat *v114;
  uint64_t v115;
  llvm::APFloatBase *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  BOOL v138;
  BOOL v139;
  void *v140;
  char v141;
  int v142;
  _BOOL4 v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  int v152;
  _BOOL4 v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t *v159;
  unint64_t v160;
  uint64_t v161;
  _DWORD *v162;
  int v163;
  _BOOL4 v165;
  uint64_t v166;
  uint64_t **v167;
  uint64_t *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  const llvm::APFloat *v172;
  llvm::APFloatBase *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  int v181;
  _BOOL4 v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t *v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  int v191;
  _BOOL4 v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t *v198;
  unint64_t v199;
  uint64_t v200;
  int v201;
  _BOOL4 v203;
  uint64_t v204;
  uint64_t **v205;
  uint64_t *v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  const llvm::APFloat *v210;
  llvm::APFloatBase *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  BOOL v229;
  BOOL v230;
  int v231;
  char v232;
  int v233;
  _BOOL4 v235;
  uint64_t v236;
  uint64_t *v237;
  uint64_t *v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char v242;
  int v243;
  _BOOL4 v245;
  uint64_t v246;
  uint64_t *v247;
  uint64_t *v248;
  uint64_t *v249;
  uint64_t *v250;
  unint64_t v251;
  uint64_t v252;
  int v253;
  _BOOL4 v255;
  uint64_t v256;
  uint64_t **v257;
  uint64_t *v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  const llvm::APFloat *v262;
  llvm::APFloatBase *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  char v269;
  int v270;
  _BOOL4 v272;
  uint64_t v273;
  uint64_t **v274;
  uint64_t **v275;
  unint64_t v276;
  uint64_t *v277;
  int v278;
  _BOOL4 v280;
  uint64_t v281;
  uint64_t *v282;
  uint64_t *v283;
  unint64_t v284;
  uint64_t v285;
  const llvm::APFloat *v286;
  uint64_t v287;
  llvm::APFloatBase *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  char v293;
  int v294;
  _BOOL4 v296;
  uint64_t v297;
  uint64_t **v298;
  uint64_t **v299;
  unint64_t v300;
  uint64_t *v301;
  int v302;
  _BOOL4 v304;
  uint64_t v305;
  uint64_t *v306;
  uint64_t *v307;
  unint64_t v308;
  uint64_t v309;
  const llvm::APFloat *v310;
  uint64_t v311;
  llvm::APFloatBase *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  char v316;
  int v317;
  _BOOL4 v319;
  uint64_t v320;
  uint64_t *v321;
  uint64_t *v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  char v326;
  int v327;
  _BOOL4 v329;
  uint64_t v330;
  uint64_t *v331;
  uint64_t *v332;
  uint64_t *v333;
  uint64_t *v334;
  unint64_t v335;
  uint64_t v336;
  int v337;
  _BOOL4 v339;
  uint64_t v340;
  uint64_t **v341;
  uint64_t *v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v345;
  const llvm::APFloat *v346;
  llvm::APFloatBase *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  int v351;
  int v352;
  llvm::ConstantFP ****v353;
  const llvm::APInt *v354;
  void *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  unsigned int v361;
  uint64_t v362;
  unsigned int v363;
  uint64_t v364;
  unsigned int v365;
  uint64_t v366;
  unsigned int v367;
  _OWORD v368[2];
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  __int16 v372;
  __int128 v373;
  uint64_t v374;
  __int128 v375;
  __int128 v376;
  uint64_t v377;
  __int128 v378;
  uint64_t v379;
  char v380[8];
  uint64_t v381;
  uint64_t *v382;
  int v383;
  char v384;
  char v385[8];
  _DWORD *v386;
  uint64_t *v387;
  int v388;
  char v389;
  char v390[8];
  uint64_t v391;
  uint64_t *v392;
  int v393;
  char v394;
  char v395[8];
  _DWORD *v396;
  uint64_t *v397;
  int v398;
  char v399;
  char v400[8];
  uint64_t v401;
  uint64_t *v402;
  int v403;
  char v404;
  char v405[8];
  _DWORD *v406;
  uint64_t *v407;
  int v408;
  char v409;
  int v410;
  int v411;
  int v412;
  _DWORD *v413;
  uint64_t *v414;
  int v415;
  char v416;
  char v417[8];
  uint64_t v418;
  uint64_t *v419;
  int v420;
  char v421;
  char v422[8];
  _DWORD *v423;
  uint64_t *v424;
  int v425;
  char v426;
  unint64_t v427;
  const llvm::APInt *v428;
  _DWORD *v429;
  uint64_t v430;
  uint64_t v431;
  int v432;
  int v433;
  int v434;
  char v435[8];
  uint64_t v436;
  uint64_t *v437;
  int v438;
  char v439;
  char v440[8];
  _DWORD *v441;
  uint64_t *v442;
  int v443;
  char v444;
  char v445[8];
  uint64_t v446;
  uint64_t *v447;
  int v448;
  char v449;
  const llvm::APInt *v450;
  _DWORD *v451;
  uint64_t *v452;
  int v453;
  char v454;
  uint64_t v455;

  v455 = *MEMORY[0x1E0C80C00];
  if (**(_WORD **)(a2 + 16) != 166)
    return 0;
  v4 = *(_QWORD *)(*a1 + 8);
  v5 = *(_QWORD **)(v4 + 40);
  v6 = *(unsigned int **)(a2 + 32);
  v7 = (const char *)v6[9];
  v8 = (const char *)v6[17];
  v358 = v6[25];
  v9 = v6[1];
  if ((v9 & 0x80000000) != 0 && (v9 & 0x7FFFFFFF) < (unint64_t)*((unsigned int *)v5 + 108))
    v10 = *(const llvm::APInt **)(v5[53] + 8 * (v9 & 0x7FFFFFFF));
  else
    v10 = 0;
  v12 = v5[3];
  v13 = (uint64_t *)(v12 + 16 * (v7 & 0x7FFFFFFF) + 8);
  v14 = v5[34];
  if ((int)v7 >= 0)
    v13 = (uint64_t *)(v14 + 8 * (_QWORD)v7);
  v15 = *v13;
  if ((*(_BYTE *)(v15 + 3) & 1) == 0)
    v15 = *(_QWORD *)(v15 + 24);
  v357 = v9;
  v16 = *(_QWORD *)(v15 + 8);
  if (**(_WORD **)(v16 + 16) == 121)
    v17 = *(_QWORD *)(*(_QWORD *)(v16 + 32) + 48);
  else
    v17 = 0;
  v18 = (uint64_t *)(v12 + 16 * (v8 & 0x7FFFFFFF) + 8);
  v19 = (uint64_t *)(v14 + 8 * (_QWORD)v8);
  if ((int)v8 >= 0)
    v18 = v19;
  v20 = *v18;
  if ((*(_BYTE *)(v20 + 3) & 1) == 0)
    v20 = *(_QWORD *)(v20 + 24);
  v21 = *(_QWORD *)(v20 + 8);
  if (**(_WORD **)(v21 + 16) == 121)
    v22 = *(_QWORD *)(*(_QWORD *)(v21 + 32) + 48);
  else
    v22 = 0;
  v353 = *(llvm::ConstantFP *****)(*a1 + 8);
  v354 = v10;
  v23 = *(_QWORD *)(v4 + 8);
  v24 = &unk_1C866F184;
  if (v10 == (const llvm::APInt *)129)
    v24 = &unk_1C866F15C;
  v355 = v24;
  v25 = *(_OWORD *)(v23 + 1024);
  v368[0] = *(_OWORD *)(v23 + 1008);
  v368[1] = v25;
  v26 = *(_QWORD *)(v23 + 1048);
  v369 = *(_QWORD *)(v23 + 1040);
  v370 = v26;
  v27 = *(_QWORD *)(v23 + 1056);
  v371 = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v372 = *(_WORD *)(v23 + 1064);
  v356 = v22;
  if (*(char *)(v23 + 1095) < 0)
  {
    sub_1C47EBC30(&v373, *(void **)(v23 + 1072), *(_QWORD *)(v23 + 1080));
  }
  else
  {
    v373 = *(_OWORD *)(v23 + 1072);
    v374 = *(_QWORD *)(v23 + 1088);
  }
  v375 = *(_OWORD *)(v23 + 1096);
  v376 = *(_OWORD *)(v23 + 1112);
  sub_1C4843224((uint64_t)&v377, (uint64_t *)(v23 + 1128));
  if (*(char *)(v23 + 1311) < 0)
  {
    sub_1C47EBC30(&v378, *(void **)(v23 + 1288), *(_QWORD *)(v23 + 1296));
  }
  else
  {
    v378 = *(_OWORD *)(v23 + 1288);
    v379 = *(_QWORD *)(v23 + 1304);
  }
  v30 = BYTE12(v368[0]);
  v359 = *(unsigned __int16 *)(a2 + 44);
  v31 = *a1;
  *(_QWORD *)(v31 + 40) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v31 + 48) = a2;
  sub_1C54EB4A0(a1[3], v7, (uint64_t)&v364);
  sub_1C54EB4A0(a1[3], v8, (uint64_t)&v360);
  v32 = v365;
  if (v365)
  {
    if (v365 > 0x40)
    {
      if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v364) == v32)
        goto LABEL_40;
    }
    else if (v364 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v365)
    {
      goto LABEL_40;
    }
    v33 = v361;
    if (v361)
    {
      if (v361 > 0x40)
      {
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v360) != v33)
          goto LABEL_42;
      }
      else if (v360 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v361)
      {
        goto LABEL_42;
      }
    }
  }
LABEL_40:
  if ((BYTE12(v368[0]) & 1) != 0)
    goto LABEL_101;
  if ((v359 & 0x10) != 0)
  {
    if ((v359 & 0x40) != 0)
      goto LABEL_101;
    v67 = &v366;
    v68 = v367 - 1;
    if (v367 >= 0x41)
      v67 = (uint64_t *)(v366 + 8 * (v68 >> 6));
    if ((((unint64_t)*v67 >> v68) & 1) != 0)
    {
      v69 = &v362;
      v70 = v363 - 1;
      if (v363 >= 0x41)
        v69 = (uint64_t *)(v362 + 8 * (v70 >> 6));
      if ((((unint64_t)*v69 >> v70) & 1) != 0)
      {
LABEL_101:
        sub_1C54F8CF8((_QWORD *)a1[2], (uint64_t)v5, v357);
        v71 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v5 + 16) + 176))(*(_QWORD *)(*v5 + 16));
        if ((v357 & 0x80000000) != 0)
          v72 = (uint64_t *)(v5[3] + 16 * (v357 & 0x7FFFFFFF) + 8);
        else
          v72 = (uint64_t *)(v5[34] + 8 * v357);
        v73 = *v72;
        if (*v72)
        {
          do
          {
            v74 = *(_QWORD *)(v73 + 24);
            if ((v358 - 1) <= 0x3FFFFFFE)
              llvm::MachineOperand::substPhysReg((unsigned int *)v73, v358, v71);
            else
              llvm::MachineOperand::setReg(v73, v358);
            v73 = v74;
          }
          while (v74);
        }
        sub_1C54F8DA0(a1[2]);
        v75 = *(_QWORD *)(a2 + 24);
        v76 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v76 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v76 = a2;
            do
              v76 = *(_QWORD *)(v76 + 8);
            while ((*(_WORD *)(v76 + 44) & 8) != 0);
          }
        }
        goto LABEL_111;
      }
    }
  }
LABEL_42:
  if (v17 && v356)
  {
    v34 = *(_QWORD *)(v17 + 32);
    if ((_UNKNOWN *)v34 == &unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v446, (const llvm::detail::DoubleAPFloat *)(v17 + 32));
      v35 = v355;
    }
    else
    {
      v446 = *(_QWORD *)(v17 + 32);
      v35 = v355;
      if ((*(_DWORD *)(v34 + 8) + 64) >= 0x80)
        v447 = (uint64_t *)operator new[]();
      v36 = *(_BYTE *)(v17 + 52);
      v37 = v36 & 7;
      v449 = v449 & 0xF0 | v36 & 0xF;
      v448 = *(_DWORD *)(v17 + 48);
      v39 = (v36 & 6) != 0 && v37 != 3;
      if (v37 == 1 || v39)
      {
        v40 = *(unsigned int *)(v446 + 8);
        if ((v40 - 64) <= 0xFFFFFF7F)
          v41 = v447;
        else
          v41 = (uint64_t *)&v447;
        v44 = *(uint64_t **)(v17 + 40);
        v43 = (uint64_t *)(v17 + 40);
        v42 = v44;
        if ((*(_DWORD *)(*(v43 - 1) + 8) - 64) >= 0xFFFFFF80)
          v42 = v43;
        if (v40 <= 0xFFFFFFBF)
        {
          v45 = (unint64_t)(v40 + 64) >> 6;
          do
          {
            v46 = *v42++;
            *v41++ = v46;
            --v45;
          }
          while (v45);
        }
      }
    }
    sub_1C499C600((uint64_t)&v450, v35, (uint64_t)v445);
    if ((_UNKNOWN *)v446 == &unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v447);
    }
    else if ((*(_DWORD *)(v446 + 8) - 64) <= 0xFFFFFF7F && v447)
    {
      MEMORY[0x1CAA32F9C](v447, 0x1000C8000313F17);
    }
    v47 = *(_QWORD *)(v356 + 32);
    if ((_UNKNOWN *)v47 == &unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v436, (const llvm::detail::DoubleAPFloat *)(v356 + 32));
    }
    else
    {
      v436 = *(_QWORD *)(v356 + 32);
      if ((*(_DWORD *)(v47 + 8) + 64) >= 0x80)
        v437 = (uint64_t *)operator new[]();
      v48 = *(_BYTE *)(v356 + 52);
      v49 = v48 & 7;
      v439 = v439 & 0xF0 | v48 & 0xF;
      v438 = *(_DWORD *)(v356 + 48);
      v51 = (v48 & 6) != 0 && v49 != 3;
      if (v49 == 1 || v51)
      {
        v52 = *(unsigned int *)(v436 + 8);
        if ((v52 - 64) <= 0xFFFFFF7F)
          v53 = v437;
        else
          v53 = (uint64_t *)&v437;
        v54 = *(uint64_t **)(v356 + 40);
        if ((*(_DWORD *)(*(_QWORD *)(v356 + 32) + 8) - 64) >= 0xFFFFFF80)
          v54 = (uint64_t *)(v356 + 40);
        if (v52 <= 0xFFFFFFBF)
        {
          v55 = (unint64_t)(v52 + 64) >> 6;
          do
          {
            v56 = *v54++;
            *v53++ = v56;
            --v55;
          }
          while (v55);
        }
      }
    }
    sub_1C499C600((uint64_t)v440, v35, (uint64_t)v435);
    if ((_UNKNOWN *)v436 == &unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v437);
    }
    else if ((*(_DWORD *)(v436 + 8) - 64) <= 0xFFFFFF7F && v437)
    {
      MEMORY[0x1CAA32F9C](v437, 0x1000C8000313F17);
    }
    if ((sub_1C48DB628((uint64_t)&v450, (uint64_t)v440, 1) & 0x10) == 0)
    {
      v58 = *a1;
      v427 = (unint64_t)v354;
      LODWORD(v428) = 0;
      v59 = llvm::ConstantFP::get(***v353, (llvm::LLVMContext *)&v450, v57);
      v60 = (*(uint64_t (**)(uint64_t, unint64_t *, llvm::APFloatBase *))(*(_QWORD *)v58 + 24))(v58, &v427, v59);
      v61 = *a1;
      v412 = v357;
      LODWORD(v413) = 1;
      LODWORD(v427) = v358;
      LODWORD(v429) = 0;
      v430 = v60;
      v431 = v62;
      v432 = 1;
      (*(void (**)(uint64_t, uint64_t, int *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v61 + 32))(v61, 163, &v412, 1, &v427, 2, v359 | 0x100000000);
      v63 = *(_QWORD *)(a2 + 24);
      v64 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v64 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v64 = a2;
          do
            v64 = *(_QWORD *)(v64 + 8);
          while ((*(_WORD *)(v64 + 44) & 8) != 0);
        }
      }
      goto LABEL_87;
    }
    if (v441 == (_DWORD *)&unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v442);
    }
    else if ((v441[2] - 64) <= 0xFFFFFF7F && v442)
    {
      MEMORY[0x1CAA32F9C](v442, 0x1000C8000313F17);
    }
    if (v451 == (_DWORD *)&unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v452);
    }
    else if ((v451[2] - 64) <= 0xFFFFFF7F && v452)
    {
      MEMORY[0x1CAA32F9C](v452, 0x1000C8000313F17);
    }
    goto LABEL_656;
  }
  if (v17)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[2] + 32))(a1[2], a2);
    llvm::MachineOperand::setReg(*(_QWORD *)(a2 + 32) + 32, v8);
    llvm::MachineOperand::setReg(*(_QWORD *)(a2 + 32) + 64, v7);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[2] + 40))(a1[2], a2);
    goto LABEL_112;
  }
  if (!v356)
    goto LABEL_656;
  LODWORD(v428) = 64;
  v427 = 0x3FF0000000000000;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v450, (const llvm::APInt **)&v427);
  v428 = v450;
  v429 = v451;
  LODWORD(v430) = (_DWORD)v452;
  BYTE4(v430) = BYTE4(v452) & 0xF;
  v78 = (void **)(v356 + 32);
  v79 = v356 + 24;
  llvm::APFloat::convert((uint64_t)&v427, *(void **)(v356 + 32), 1, &v450);
  v80 = sub_1C47ECB98(v356 + 24, (uint64_t)&v427);
  if (v428 == (const llvm::APInt *)&unk_1C866F1C0)
  {
    v351 = v80;
    sub_1C4773C74((uint64_t *)&v429);
LABEL_660:
    v80 = v351;
    goto LABEL_130;
  }
  if ((*((_DWORD *)v428 + 2) - 64) <= 0xFFFFFF7F && v429)
  {
    v351 = v80;
    MEMORY[0x1CAA32F9C](v429, 0x1000C8000313F17);
    goto LABEL_660;
  }
LABEL_130:
  if (v80)
  {
    v81 = *a1;
    LODWORD(v450) = v357;
    LODWORD(v451) = 1;
    LODWORD(v427) = (_DWORD)v7;
    LODWORD(v429) = 0;
    LODWORD(v430) = v358;
    v432 = 0;
    (*(void (**)(uint64_t, uint64_t, const llvm::APInt **, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v81 + 32))(v81, 163, &v450, 1, &v427, 2, v359 | 0x100000000);
    v75 = *(_QWORD *)(a2 + 24);
    v76 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v76 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v76 = a2;
        do
          v76 = *(_QWORD *)(v76 + 8);
        while ((*(_WORD *)(v76 + 44) & 8) != 0);
      }
    }
LABEL_111:
    sub_1C487FE80(v75 + 40, a2, *(_QWORD *)(v76 + 8));
LABEL_112:
    v11 = 1;
    goto LABEL_113;
  }
  LODWORD(v428) = 64;
  v427 = 0xBFF0000000000000;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v450, (const llvm::APInt **)&v427);
  v428 = v450;
  v429 = v451;
  LODWORD(v430) = (_DWORD)v452;
  BYTE4(v430) = BYTE4(v452) & 0xF;
  llvm::APFloat::convert((uint64_t)&v427, *v78, 1, &v450);
  v82 = sub_1C47ECB98(v79, (uint64_t)&v427);
  if (v428 == (const llvm::APInt *)&unk_1C866F1C0)
  {
    v352 = v82;
    sub_1C4773C74((uint64_t *)&v429);
LABEL_664:
    v82 = v352;
    goto LABEL_140;
  }
  if ((*((_DWORD *)v428 + 2) - 64) <= 0xFFFFFF7F && v429)
  {
    v352 = v82;
    MEMORY[0x1CAA32F9C](v429, 0x1000C8000313F17);
    goto LABEL_664;
  }
LABEL_140:
  if (v82)
  {
    v83 = *a1;
    v450 = v354;
    LODWORD(v451) = 0;
    LODWORD(v427) = (_DWORD)v7;
    LODWORD(v429) = 0;
    v84 = (const llvm::APInt *)(*(uint64_t (**)(uint64_t, uint64_t, const llvm::APInt **, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v83 + 32))(v83, 177, &v450, 1, &v427, 1, v359 | 0x100000000);
    v85 = *a1;
    LODWORD(v450) = v357;
    LODWORD(v451) = 1;
    v427 = (unint64_t)v84;
    v428 = v86;
    LODWORD(v429) = 1;
    LODWORD(v430) = v358;
    v432 = 0;
    (*(void (**)(uint64_t, uint64_t, const llvm::APInt **, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v85 + 32))(v85, 163, &v450, 1, &v427, 2, v359 | 0x100000000);
    v75 = *(_QWORD *)(a2 + 24);
    v76 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v76 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v76 = a2;
        do
          v76 = *(_QWORD *)(v76 + 8);
        while ((*(_WORD *)(v76 + 44) & 8) != 0);
      }
    }
    goto LABEL_111;
  }
  if ((v7 & 0x80000000) != 0)
    v87 = (uint64_t *)(v5[3] + 16 * (v7 & 0x7FFFFFFF) + 8);
  else
    v87 = (uint64_t *)(v5[34] + 8 * (_QWORD)v7);
  v88 = (const llvm::detail::DoubleAPFloat *)(v356 + 32);
  v89 = *v87;
  if ((*(_BYTE *)(v89 + 3) & 1) == 0)
    v89 = *(_QWORD *)(v89 + 24);
  v90 = *(_QWORD *)(v89 + 8);
  v91 = **(unsigned __int16 **)(v90 + 16);
  if (v91 == 177)
  {
    v92 = *(_DWORD *)(*(_QWORD *)(v90 + 32) + 36);
    if (v92 != (_DWORD)v358)
    {
      v95 = *v78;
      if (*v78 == &unk_1C866F1C0)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v451, (const llvm::detail::DoubleAPFloat *)v78);
        v96 = v358;
      }
      else
      {
        v451 = *v78;
        v96 = v358;
        if ((v95[2] + 64) >= 0x80)
          v452 = (uint64_t *)operator new[]();
        v97 = *(_BYTE *)(v356 + 52);
        v98 = v97 & 7;
        v454 = v454 & 0xF0 | v97 & 0xF;
        v453 = *(_DWORD *)(v356 + 48);
        v100 = (v97 & 6) != 0 && v98 != 3;
        if (v98 == 1 || v100)
        {
          v101 = v451[2];
          if ((v101 - 64) <= 0xFFFFFF7F)
            v102 = (uint64_t **)v452;
          else
            v102 = &v452;
          v103 = *(uint64_t ***)(v356 + 40);
          if ((*(_DWORD *)(*(_QWORD *)(v356 + 32) + 8) - 64) >= 0xFFFFFF80)
            v103 = (uint64_t **)(v356 + 40);
          if (v101 <= 0xFFFFFFBF)
          {
            v104 = (unint64_t)(v101 + 64) >> 6;
            do
            {
              v105 = *v103++;
              *v102++ = v105;
              --v104;
            }
            while (v104);
          }
        }
      }
      llvm::APFloat::APFloat((uint64_t)&v427, v451, "-1.0", 4uLL);
      if (v451 == (_DWORD *)&unk_1C866F1C0)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v441, (const llvm::detail::DoubleAPFloat *)&v451);
      }
      else
      {
        v441 = v451;
        if ((v451[2] + 64) >= 0x80)
          v442 = (uint64_t *)operator new[]();
        v106 = v454 & 7;
        v444 = v444 & 0xF0 | v454 & 0xF;
        v443 = v453;
        v108 = (v454 & 6) != 0 && v106 != 3;
        if (v106 == 1 || v108)
        {
          v109 = v441[2];
          v110 = (v109 - 64) <= 0xFFFFFF7F ? v442 : (uint64_t *)&v442;
          v111 = (v451[2] - 64) >= 0xFFFFFF80 ? (uint64_t *)&v452 : v452;
          if (v109 <= 0xFFFFFFBF)
          {
            v112 = (unint64_t)(v109 + 64) >> 6;
            do
            {
              v113 = *v111++;
              *v110++ = v113;
              --v112;
            }
            while (v112);
          }
        }
      }
      sub_1C48DB628((uint64_t)v440, (uint64_t)&v427, 1);
      if (v428 == (const llvm::APInt *)&unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)&v429);
      }
      else if ((*((_DWORD *)v428 + 2) - 64) <= 0xFFFFFF7F && v429)
      {
        MEMORY[0x1CAA32F9C](v429, 0x1000C8000313F17);
      }
      v115 = *a1;
      v427 = (unint64_t)v354;
      LODWORD(v428) = 0;
      v116 = llvm::ConstantFP::get(***v353, (llvm::LLVMContext *)v440, v114);
      v117 = (*(uint64_t (**)(uint64_t, unint64_t *, llvm::APFloatBase *))(*(_QWORD *)v115 + 24))(v115, &v427, v116);
      v118 = *a1;
      v412 = v357;
      LODWORD(v413) = 1;
      LODWORD(v427) = v92;
      LODWORD(v429) = 0;
      v430 = v117;
      v431 = v119;
      v432 = 1;
      v433 = v96;
      v434 = 0;
      (*(void (**)(uint64_t, uint64_t, int *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v118 + 32))(v118, 166, &v412, 1, &v427, 3, v359 | 0x100000000);
      v120 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v120 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v120 = a2;
          do
            v120 = *(_QWORD *)(v120 + 8);
          while ((*(_WORD *)(v120 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v120 + 8));
      if (v441 != (_DWORD *)&unk_1C866F1C0)
      {
        if ((v441[2] - 64) <= 0xFFFFFF7F && v442)
          goto LABEL_680;
        goto LABEL_496;
      }
LABEL_670:
      sub_1C4773C74((uint64_t *)&v442);
      goto LABEL_496;
    }
  }
  v93 = *v78;
  if (*v78 == &unk_1C866F1C0)
    v79 = *(_QWORD *)(v356 + 40);
  if ((*(_BYTE *)(v79 + 28) & 7) == 3 && ((BYTE12(v368[0]) & 1) != 0 || (v359 & 0x50) == 0x50))
  {
    v121 = *a1;
    LODWORD(v450) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
    LODWORD(v451) = 1;
    LODWORD(v427) = v358;
    LODWORD(v429) = 0;
    (*(void (**)(uint64_t, uint64_t, const llvm::APInt **, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v121 + 32))(v121, 19, &v450, 1, &v427, 1, 0);
    v75 = *(_QWORD *)(a2 + 24);
    v76 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v76 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v76 = a2;
        do
          v76 = *(_QWORD *)(v76 + 8);
        while ((*(_WORD *)(v76 + 44) & 8) != 0);
      }
    }
    goto LABEL_111;
  }
  if (!(v30 & 1 | ((~(_DWORD)v359 & 0x500) == 0)))
    goto LABEL_656;
  if ((v358 & 0x80000000) != 0)
    v94 = (uint64_t *)(v5[3] + 16 * (v358 & 0x7FFFFFFF) + 8);
  else
    v94 = (uint64_t *)(v5[34] + 8 * v358);
  v122 = *v94;
  if ((*(_BYTE *)(v122 + 3) & 1) == 0)
    v122 = *(_QWORD *)(v122 + 24);
  v123 = *(_QWORD *)(v122 + 8);
  v124 = **(unsigned __int16 **)(v123 + 16);
  if (v124 == 165)
  {
    v125 = *(_QWORD *)(v123 + 32);
    v126 = *(unsigned int *)(v125 + 36);
    v127 = *(unsigned int *)(v125 + 68);
    v128 = v5[3];
    v129 = (uint64_t *)(v128 + 16 * (v126 & 0x7FFFFFFF) + 8);
    v130 = v5[34];
    if ((int)v126 >= 0)
      v129 = (uint64_t *)(v130 + 8 * v126);
    v131 = *v129;
    if ((*(_BYTE *)(v131 + 3) & 1) == 0)
      v131 = *(_QWORD *)(v131 + 24);
    v132 = *(_QWORD *)(v131 + 8);
    if (**(_WORD **)(v132 + 16) == 121)
      v133 = *(_QWORD *)(*(_QWORD *)(v132 + 32) + 48);
    else
      v133 = 0;
    v134 = (uint64_t *)(v128 + 16 * (v127 & 0x7FFFFFFF) + 8);
    v135 = (uint64_t *)(v130 + 8 * v127);
    if ((int)v127 >= 0)
      v134 = v135;
    v136 = *v134;
    if ((*(_BYTE *)(v136 + 3) & 1) == 0)
      v136 = *(_QWORD *)(v136 + 24);
    v137 = *(_QWORD *)(v136 + 8);
    if (**(_WORD **)(v137 + 16) != 121)
    {
      v138 = 0;
      v139 = v133 == 0;
      goto LABEL_227;
    }
    v179 = *(_QWORD *)(*(_QWORD *)(v137 + 32) + 48);
    v139 = v133 == 0;
    v138 = v179 != 0;
    if (v133)
    {
      v88 = (const llvm::detail::DoubleAPFloat *)(v356 + 32);
      goto LABEL_227;
    }
    v88 = (const llvm::detail::DoubleAPFloat *)(v356 + 32);
    if (!v179)
    {
LABEL_227:
      if (!v139 && !v138 && (_DWORD)v7 == (_DWORD)v127)
      {
        if (v93 == (_DWORD *)&unk_1C866F1C0)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v406, v88);
          v140 = v355;
        }
        else
        {
          v406 = *v78;
          v140 = v355;
          if ((v93[2] + 64) >= 0x80)
            v407 = (uint64_t *)operator new[]();
          v141 = *(_BYTE *)(v356 + 52);
          v142 = v141 & 7;
          v409 = v409 & 0xF0 | v141 & 0xF;
          v408 = *(_DWORD *)(v356 + 48);
          v144 = (v141 & 6) != 0 && v142 != 3;
          if (v142 == 1 || v144)
          {
            v145 = v406[2];
            if ((v145 - 64) <= 0xFFFFFF7F)
              v146 = v407;
            else
              v146 = (uint64_t *)&v407;
            v147 = *(uint64_t **)(v356 + 40);
            if ((*(_DWORD *)(*(_QWORD *)(v356 + 32) + 8) - 64) >= 0xFFFFFF80)
              v147 = (uint64_t *)(v356 + 40);
            if (v145 <= 0xFFFFFFBF)
            {
              v148 = (unint64_t)(v145 + 64) >> 6;
              do
              {
                v149 = *v147++;
                *v146++ = v149;
                --v148;
              }
              while (v148);
            }
          }
        }
        sub_1C499C600((uint64_t)&v450, v140, (uint64_t)v405);
        if (v406 == (_DWORD *)&unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v407);
        }
        else if ((v406[2] - 64) <= 0xFFFFFF7F && v407)
        {
          MEMORY[0x1CAA32F9C](v407, 0x1000C8000313F17);
        }
        v150 = *(_QWORD *)(v133 + 32);
        if ((_UNKNOWN *)v150 == &unk_1C866F1C0)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v401, (const llvm::detail::DoubleAPFloat *)(v133 + 32));
        }
        else
        {
          v401 = *(_QWORD *)(v133 + 32);
          if ((*(_DWORD *)(v150 + 8) + 64) >= 0x80)
            v402 = (uint64_t *)operator new[]();
          v151 = *(_BYTE *)(v133 + 52);
          v152 = v151 & 7;
          v404 = v404 & 0xF0 | v151 & 0xF;
          v403 = *(_DWORD *)(v133 + 48);
          v154 = (v151 & 6) != 0 && v152 != 3;
          if (v152 == 1 || v154)
          {
            v155 = *(unsigned int *)(v401 + 8);
            if ((v155 - 64) <= 0xFFFFFF7F)
              v156 = v402;
            else
              v156 = (uint64_t *)&v402;
            v159 = *(uint64_t **)(v133 + 40);
            v158 = (uint64_t *)(v133 + 40);
            v157 = v159;
            if ((*(_DWORD *)(*(v158 - 1) + 8) - 64) >= 0xFFFFFF80)
              v157 = v158;
            if (v155 <= 0xFFFFFFBF)
            {
              v160 = (unint64_t)(v155 + 64) >> 6;
              do
              {
                v161 = *v157++;
                *v156++ = v161;
                --v160;
              }
              while (v160);
            }
          }
        }
        sub_1C499C600((uint64_t)v440, v140, (uint64_t)v400);
        if ((_UNKNOWN *)v401 == &unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v402);
        }
        else if ((*(_DWORD *)(v401 + 8) - 64) <= 0xFFFFFF7F && v402)
        {
          MEMORY[0x1CAA32F9C](v402, 0x1000C8000313F17);
        }
        v162 = v451;
        if (v451 == (_DWORD *)&unk_1C866F1C0)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v413, (const llvm::detail::DoubleAPFloat *)&v451);
        }
        else
        {
          v413 = v451;
          if ((v451[2] + 64) >= 0x80)
            v414 = (uint64_t *)operator new[]();
          v163 = v454 & 7;
          v416 = v416 & 0xF0 | v454 & 0xF;
          v415 = v453;
          v165 = (v454 & 6) != 0 && v163 != 3;
          if (v163 != 1 && !v165)
            goto LABEL_288;
          v166 = v413[2];
          if ((v166 - 64) <= 0xFFFFFF7F)
          {
            v168 = v414;
            if ((v162[2] - 64) >= 0xFFFFFF80)
              v167 = &v452;
            else
              v167 = (uint64_t **)v452;
          }
          else
          {
            v167 = &v452;
            if ((v162[2] - 64) < 0xFFFFFF80)
              v167 = (uint64_t **)v452;
            if (v166 > 0xFFFFFFBF)
              goto LABEL_288;
            v168 = (uint64_t *)&v414;
          }
          v169 = (unint64_t)(v166 + 64) >> 6;
          do
          {
            v170 = (uint64_t)*v167++;
            *v168++ = v170;
            --v169;
          }
          while (v169);
        }
LABEL_288:
        sub_1C47B4138((uint64_t)&v412, (uint64_t)v440, 1);
        v171 = *a1;
        v427 = (unint64_t)v354;
        LODWORD(v428) = 0;
        v173 = llvm::ConstantFP::get(***v353, (llvm::LLVMContext *)&v412, v172);
        v174 = (*(uint64_t (**)(uint64_t, unint64_t *, llvm::APFloatBase *))(*(_QWORD *)v171 + 24))(v171, &v427, v173);
        v175 = *a1;
        v410 = v357;
        v411 = 1;
        LODWORD(v427) = (_DWORD)v7;
        LODWORD(v429) = 0;
        v430 = v174;
        v431 = v176;
        v432 = 1;
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v175 + 32))(v175, 165, &v410, 1, &v427, 2, v359 | 0x100000000);
        v177 = *(_QWORD *)(a2 + 24);
        v178 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v178 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v178 = a2;
            do
              v178 = *(_QWORD *)(v178 + 8);
            while ((*(_WORD *)(v178 + 44) & 8) != 0);
          }
        }
        goto LABEL_290;
      }
      goto LABEL_366;
    }
    if ((_DWORD)v7 != (_DWORD)v126)
      goto LABEL_366;
    if (v93 == (_DWORD *)&unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v423, (const llvm::detail::DoubleAPFloat *)v78);
    }
    else
    {
      v423 = *v78;
      if ((v93[2] + 64) >= 0x80)
        v424 = (uint64_t *)operator new[]();
      v180 = *(_BYTE *)(v356 + 52);
      v181 = v180 & 7;
      v426 = v426 & 0xF0 | v180 & 0xF;
      v425 = *(_DWORD *)(v356 + 48);
      v183 = (v180 & 6) != 0 && v181 != 3;
      if (v181 == 1 || v183)
      {
        v184 = v423[2];
        if ((v184 - 64) <= 0xFFFFFF7F)
          v185 = v424;
        else
          v185 = (uint64_t *)&v424;
        v186 = *(uint64_t **)(v356 + 40);
        if ((*(_DWORD *)(*(_QWORD *)(v356 + 32) + 8) - 64) >= 0xFFFFFF80)
          v186 = (uint64_t *)(v356 + 40);
        if (v184 <= 0xFFFFFFBF)
        {
          v187 = (unint64_t)(v184 + 64) >> 6;
          do
          {
            v188 = *v186++;
            *v185++ = v188;
            --v187;
          }
          while (v187);
        }
      }
    }
    sub_1C499C600((uint64_t)&v450, v355, (uint64_t)v422);
    if (v423 == (_DWORD *)&unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v424);
    }
    else if ((v423[2] - 64) <= 0xFFFFFF7F && v424)
    {
      MEMORY[0x1CAA32F9C](v424, 0x1000C8000313F17);
    }
    v189 = *(_QWORD *)(v179 + 32);
    if ((_UNKNOWN *)v189 == &unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v418, (const llvm::detail::DoubleAPFloat *)(v179 + 32));
    }
    else
    {
      v418 = *(_QWORD *)(v179 + 32);
      if ((*(_DWORD *)(v189 + 8) + 64) >= 0x80)
        v419 = (uint64_t *)operator new[]();
      v190 = *(_BYTE *)(v179 + 52);
      v191 = v190 & 7;
      v421 = v421 & 0xF0 | v190 & 0xF;
      v420 = *(_DWORD *)(v179 + 48);
      v193 = (v190 & 6) != 0 && v191 != 3;
      if (v191 == 1 || v193)
      {
        v194 = *(unsigned int *)(v418 + 8);
        if ((v194 - 64) <= 0xFFFFFF7F)
          v195 = v419;
        else
          v195 = (uint64_t *)&v419;
        v198 = *(uint64_t **)(v179 + 40);
        v197 = (uint64_t *)(v179 + 40);
        v196 = v198;
        if ((*(_DWORD *)(*(v197 - 1) + 8) - 64) >= 0xFFFFFF80)
          v196 = v197;
        if (v194 <= 0xFFFFFFBF)
        {
          v199 = (unint64_t)(v194 + 64) >> 6;
          do
          {
            v200 = *v196++;
            *v195++ = v200;
            --v199;
          }
          while (v199);
        }
      }
    }
    sub_1C499C600((uint64_t)v440, v355, (uint64_t)v417);
    if ((_UNKNOWN *)v418 == &unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v419);
    }
    else if ((*(_DWORD *)(v418 + 8) - 64) <= 0xFFFFFF7F && v419)
    {
      MEMORY[0x1CAA32F9C](v419, 0x1000C8000313F17);
    }
    v162 = v451;
    if (v451 == (_DWORD *)&unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v413, (const llvm::detail::DoubleAPFloat *)&v451);
      goto LABEL_358;
    }
    v413 = v451;
    if ((v451[2] + 64) >= 0x80)
      v414 = (uint64_t *)operator new[]();
    v201 = v454 & 7;
    v416 = v416 & 0xF0 | v454 & 0xF;
    v415 = v453;
    v203 = (v454 & 6) != 0 && v201 != 3;
    if (v201 == 1 || v203)
    {
      v204 = v413[2];
      if ((v204 - 64) <= 0xFFFFFF7F)
      {
        v206 = v414;
        if ((v162[2] - 64) >= 0xFFFFFF80)
          v205 = &v452;
        else
          v205 = (uint64_t **)v452;
        goto LABEL_356;
      }
      v205 = &v452;
      if ((v162[2] - 64) < 0xFFFFFF80)
        v205 = (uint64_t **)v452;
      if (v204 <= 0xFFFFFFBF)
      {
        v206 = (uint64_t *)&v414;
LABEL_356:
        v207 = (unint64_t)(v204 + 64) >> 6;
        do
        {
          v208 = (uint64_t)*v205++;
          *v206++ = v208;
          --v207;
        }
        while (v207);
      }
    }
LABEL_358:
    sub_1C47B4138((uint64_t)&v412, (uint64_t)v440, 1);
    v209 = *a1;
    v427 = (unint64_t)v354;
    LODWORD(v428) = 0;
    v211 = llvm::ConstantFP::get(***v353, (llvm::LLVMContext *)&v412, v210);
    v212 = (*(uint64_t (**)(uint64_t, unint64_t *, llvm::APFloatBase *))(*(_QWORD *)v209 + 24))(v209, &v427, v211);
    v213 = *a1;
    v410 = v357;
    v411 = 1;
    LODWORD(v427) = (_DWORD)v7;
    LODWORD(v429) = 0;
    v430 = v212;
    v431 = v214;
    v432 = 1;
    (*(void (**)(uint64_t, uint64_t, int *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v213 + 32))(v213, 165, &v410, 1, &v427, 2, v359 | 0x100000000);
    v215 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v215 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v215 = a2;
        do
          v215 = *(_QWORD *)(v215 + 8);
        while ((*(_WORD *)(v215 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v215 + 8));
    if (v413 == (_DWORD *)&unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v414);
    }
    else if ((v413[2] - 64) <= 0xFFFFFF7F && v414)
    {
      MEMORY[0x1CAA32F9C](v414, 0x1000C8000313F17);
    }
    if (v441 == (_DWORD *)&unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v442);
    }
    else if ((v441[2] - 64) <= 0xFFFFFF7F && v442)
    {
      MEMORY[0x1CAA32F9C](v442, 0x1000C8000313F17);
    }
    if (v162 == (_DWORD *)&unk_1C866F1C0)
      goto LABEL_497;
    goto LABEL_447;
  }
LABEL_366:
  if (v91 != 165)
    goto LABEL_452;
  v216 = *(_QWORD *)(v90 + 32);
  v217 = *(unsigned int *)(v216 + 36);
  v218 = *(unsigned int *)(v216 + 68);
  v219 = v5[3];
  v220 = (uint64_t *)(v219 + 16 * (v217 & 0x7FFFFFFF) + 8);
  v221 = v5[34];
  if ((int)v217 >= 0)
    v220 = (uint64_t *)(v221 + 8 * v217);
  v222 = *v220;
  if ((*(_BYTE *)(v222 + 3) & 1) == 0)
    v222 = *(_QWORD *)(v222 + 24);
  v223 = *(_QWORD *)(v222 + 8);
  if (**(_WORD **)(v223 + 16) == 121)
    v224 = *(_QWORD *)(*(_QWORD *)(v223 + 32) + 48);
  else
    v224 = 0;
  v225 = (uint64_t *)(v219 + 16 * (v218 & 0x7FFFFFFF) + 8);
  v226 = (uint64_t *)(v221 + 8 * v218);
  if ((int)v218 >= 0)
    v225 = v226;
  v227 = *v225;
  if ((*(_BYTE *)(v227 + 3) & 1) == 0)
    v227 = *(_QWORD *)(v227 + 24);
  v228 = *(_QWORD *)(v227 + 8);
  if (**(_WORD **)(v228 + 16) != 121)
  {
    v229 = 0;
    v230 = v224 == 0;
    goto LABEL_379;
  }
  v268 = *(_QWORD *)(*(_QWORD *)(v228 + 32) + 48);
  v230 = v224 == 0;
  v229 = v268 != 0;
  if (v224)
  {
    v88 = (const llvm::detail::DoubleAPFloat *)(v356 + 32);
    goto LABEL_379;
  }
  v88 = (const llvm::detail::DoubleAPFloat *)(v356 + 32);
  if (v268)
  {
    if ((_DWORD)v217 == (_DWORD)v358)
      goto LABEL_452;
    if (v93 == (_DWORD *)&unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v396, (const llvm::detail::DoubleAPFloat *)v78);
    }
    else
    {
      v396 = *v78;
      if ((v93[2] + 64) >= 0x80)
        v397 = (uint64_t *)operator new[]();
      v316 = *(_BYTE *)(v356 + 52);
      v317 = v316 & 7;
      v399 = v399 & 0xF0 | v316 & 0xF;
      v398 = *(_DWORD *)(v356 + 48);
      v319 = (v316 & 6) != 0 && v317 != 3;
      if (v317 == 1 || v319)
      {
        v320 = v396[2];
        if ((v320 - 64) <= 0xFFFFFF7F)
          v321 = v397;
        else
          v321 = (uint64_t *)&v397;
        v322 = *(uint64_t **)(v356 + 40);
        if ((*(_DWORD *)(*(_QWORD *)(v356 + 32) + 8) - 64) >= 0xFFFFFF80)
          v322 = (uint64_t *)(v356 + 40);
        if (v320 <= 0xFFFFFFBF)
        {
          v323 = (unint64_t)(v320 + 64) >> 6;
          do
          {
            v324 = *v322++;
            *v321++ = v324;
            --v323;
          }
          while (v323);
        }
      }
    }
    sub_1C499C600((uint64_t)&v450, v355, (uint64_t)v395);
    if (v396 == (_DWORD *)&unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v397);
    }
    else if ((v396[2] - 64) <= 0xFFFFFF7F && v397)
    {
      MEMORY[0x1CAA32F9C](v397, 0x1000C8000313F17);
    }
    v325 = *(_QWORD *)(v268 + 32);
    if ((_UNKNOWN *)v325 == &unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v391, (const llvm::detail::DoubleAPFloat *)(v268 + 32));
    }
    else
    {
      v391 = *(_QWORD *)(v268 + 32);
      if ((*(_DWORD *)(v325 + 8) + 64) >= 0x80)
        v392 = (uint64_t *)operator new[]();
      v326 = *(_BYTE *)(v268 + 52);
      v327 = v326 & 7;
      v394 = v394 & 0xF0 | v326 & 0xF;
      v393 = *(_DWORD *)(v268 + 48);
      v329 = (v326 & 6) != 0 && v327 != 3;
      if (v327 == 1 || v329)
      {
        v330 = *(unsigned int *)(v391 + 8);
        if ((v330 - 64) <= 0xFFFFFF7F)
          v331 = v392;
        else
          v331 = (uint64_t *)&v392;
        v334 = *(uint64_t **)(v268 + 40);
        v333 = (uint64_t *)(v268 + 40);
        v332 = v334;
        if ((*(_DWORD *)(*(v333 - 1) + 8) - 64) >= 0xFFFFFF80)
          v332 = v333;
        if (v330 <= 0xFFFFFFBF)
        {
          v335 = (unint64_t)(v330 + 64) >> 6;
          do
          {
            v336 = *v332++;
            *v331++ = v336;
            --v335;
          }
          while (v335);
        }
      }
    }
    sub_1C499C600((uint64_t)v440, v355, (uint64_t)v390);
    if ((_UNKNOWN *)v391 == &unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v392);
    }
    else if ((*(_DWORD *)(v391 + 8) - 64) <= 0xFFFFFF7F && v392)
    {
      MEMORY[0x1CAA32F9C](v392, 0x1000C8000313F17);
    }
    v162 = v451;
    if (v451 == (_DWORD *)&unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v413, (const llvm::detail::DoubleAPFloat *)&v451);
    }
    else
    {
      v413 = v451;
      if ((v451[2] + 64) >= 0x80)
        v414 = (uint64_t *)operator new[]();
      v337 = v454 & 7;
      v416 = v416 & 0xF0 | v454 & 0xF;
      v415 = v453;
      v339 = (v454 & 6) != 0 && v337 != 3;
      if (v337 != 1 && !v339)
        goto LABEL_612;
      v340 = v413[2];
      if ((v340 - 64) <= 0xFFFFFF7F)
      {
        v342 = v414;
        if ((v162[2] - 64) >= 0xFFFFFF80)
          v341 = &v452;
        else
          v341 = (uint64_t **)v452;
      }
      else
      {
        v341 = &v452;
        if ((v162[2] - 64) < 0xFFFFFF80)
          v341 = (uint64_t **)v452;
        if (v340 > 0xFFFFFFBF)
          goto LABEL_612;
        v342 = (uint64_t *)&v414;
      }
      v343 = (unint64_t)(v340 + 64) >> 6;
      do
      {
        v344 = (uint64_t)*v341++;
        *v342++ = v344;
        --v343;
      }
      while (v343);
    }
LABEL_612:
    sub_1C48DB628((uint64_t)&v412, (uint64_t)v440, 1);
    v345 = *a1;
    v427 = (unint64_t)v354;
    LODWORD(v428) = 0;
    v347 = llvm::ConstantFP::get(***v353, (llvm::LLVMContext *)&v412, v346);
    v348 = (*(uint64_t (**)(uint64_t, unint64_t *, llvm::APFloatBase *))(*(_QWORD *)v345 + 24))(v345, &v427, v347);
    v349 = *a1;
    v410 = v357;
    v411 = 1;
    LODWORD(v427) = v217;
    LODWORD(v429) = 0;
    v430 = v348;
    v431 = v350;
    v432 = 1;
    v433 = v358;
    v434 = 0;
    (*(void (**)(uint64_t, uint64_t, int *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v349 + 32))(v349, 166, &v410, 1, &v427, 3, v359 | 0x100000000);
    v177 = *(_QWORD *)(a2 + 24);
    v178 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v178 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v178 = a2;
        do
          v178 = *(_QWORD *)(v178 + 8);
        while ((*(_WORD *)(v178 + 44) & 8) != 0);
      }
    }
LABEL_290:
    sub_1C487FE80(v177 + 40, a2, *(_QWORD *)(v178 + 8));
    if (v413 == (_DWORD *)&unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v414);
    }
    else if ((v413[2] - 64) <= 0xFFFFFF7F && v414)
    {
      MEMORY[0x1CAA32F9C](v414, 0x1000C8000313F17);
    }
    if (v441 == (_DWORD *)&unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v442);
    }
    else if ((v441[2] - 64) <= 0xFFFFFF7F && v442)
    {
      MEMORY[0x1CAA32F9C](v442, 0x1000C8000313F17);
    }
    if (v162 == (_DWORD *)&unk_1C866F1C0)
      goto LABEL_497;
LABEL_447:
    v66 = v162[2];
    goto LABEL_91;
  }
LABEL_379:
  if (!v230 && !v229 && (_DWORD)v218 != (_DWORD)v358)
  {
    if (v93 == (_DWORD *)&unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v386, v88);
      v231 = v358;
    }
    else
    {
      v386 = *v78;
      v231 = v358;
      if ((v93[2] + 64) >= 0x80)
        v387 = (uint64_t *)operator new[]();
      v232 = *(_BYTE *)(v356 + 52);
      v233 = v232 & 7;
      v389 = v389 & 0xF0 | v232 & 0xF;
      v388 = *(_DWORD *)(v356 + 48);
      v235 = (v232 & 6) != 0 && v233 != 3;
      if (v233 == 1 || v235)
      {
        v236 = v386[2];
        if ((v236 - 64) <= 0xFFFFFF7F)
          v237 = v387;
        else
          v237 = (uint64_t *)&v387;
        v238 = *(uint64_t **)(v356 + 40);
        if ((*(_DWORD *)(*(_QWORD *)(v356 + 32) + 8) - 64) >= 0xFFFFFF80)
          v238 = (uint64_t *)(v356 + 40);
        if (v236 <= 0xFFFFFFBF)
        {
          v239 = (unint64_t)(v236 + 64) >> 6;
          do
          {
            v240 = *v238++;
            *v237++ = v240;
            --v239;
          }
          while (v239);
        }
      }
    }
    sub_1C499C600((uint64_t)&v450, v355, (uint64_t)v385);
    if (v386 == (_DWORD *)&unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v387);
    }
    else if ((v386[2] - 64) <= 0xFFFFFF7F && v387)
    {
      MEMORY[0x1CAA32F9C](v387, 0x1000C8000313F17);
    }
    v241 = *(_QWORD *)(v224 + 32);
    if ((_UNKNOWN *)v241 == &unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v381, (const llvm::detail::DoubleAPFloat *)(v224 + 32));
    }
    else
    {
      v381 = *(_QWORD *)(v224 + 32);
      if ((*(_DWORD *)(v241 + 8) + 64) >= 0x80)
        v382 = (uint64_t *)operator new[]();
      v242 = *(_BYTE *)(v224 + 52);
      v243 = v242 & 7;
      v384 = v384 & 0xF0 | v242 & 0xF;
      v383 = *(_DWORD *)(v224 + 48);
      v245 = (v242 & 6) != 0 && v243 != 3;
      if (v243 == 1 || v245)
      {
        v246 = *(unsigned int *)(v381 + 8);
        if ((v246 - 64) <= 0xFFFFFF7F)
          v247 = v382;
        else
          v247 = (uint64_t *)&v382;
        v250 = *(uint64_t **)(v224 + 40);
        v249 = (uint64_t *)(v224 + 40);
        v248 = v250;
        if ((*(_DWORD *)(*(v249 - 1) + 8) - 64) >= 0xFFFFFF80)
          v248 = v249;
        if (v246 <= 0xFFFFFFBF)
        {
          v251 = (unint64_t)(v246 + 64) >> 6;
          do
          {
            v252 = *v248++;
            *v247++ = v252;
            --v251;
          }
          while (v251);
        }
      }
    }
    sub_1C499C600((uint64_t)v440, v355, (uint64_t)v380);
    if ((_UNKNOWN *)v381 == &unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v382);
    }
    else if ((*(_DWORD *)(v381 + 8) - 64) <= 0xFFFFFF7F && v382)
    {
      MEMORY[0x1CAA32F9C](v382, 0x1000C8000313F17);
    }
    v162 = v451;
    if (v451 == (_DWORD *)&unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v413, (const llvm::detail::DoubleAPFloat *)&v451);
      goto LABEL_440;
    }
    v413 = v451;
    if ((v451[2] + 64) >= 0x80)
      v414 = (uint64_t *)operator new[]();
    v253 = v454 & 7;
    v416 = v416 & 0xF0 | v454 & 0xF;
    v415 = v453;
    v255 = (v454 & 6) != 0 && v253 != 3;
    if (v253 == 1 || v255)
    {
      v256 = v413[2];
      if ((v256 - 64) <= 0xFFFFFF7F)
      {
        v258 = v414;
        if ((v162[2] - 64) >= 0xFFFFFF80)
          v257 = &v452;
        else
          v257 = (uint64_t **)v452;
        goto LABEL_438;
      }
      v257 = &v452;
      if ((v162[2] - 64) < 0xFFFFFF80)
        v257 = (uint64_t **)v452;
      if (v256 <= 0xFFFFFFBF)
      {
        v258 = (uint64_t *)&v414;
LABEL_438:
        v259 = (unint64_t)(v256 + 64) >> 6;
        do
        {
          v260 = (uint64_t)*v257++;
          *v258++ = v260;
          --v259;
        }
        while (v259);
      }
    }
LABEL_440:
    sub_1C48DB628((uint64_t)&v412, (uint64_t)v440, 1);
    v261 = *a1;
    v427 = (unint64_t)v354;
    LODWORD(v428) = 0;
    v263 = llvm::ConstantFP::get(***v353, (llvm::LLVMContext *)&v412, v262);
    v264 = (*(uint64_t (**)(uint64_t, unint64_t *, llvm::APFloatBase *))(*(_QWORD *)v261 + 24))(v261, &v427, v263);
    v265 = *a1;
    v410 = v357;
    v411 = 1;
    LODWORD(v427) = v218;
    LODWORD(v429) = 0;
    v430 = v264;
    v431 = v266;
    v432 = 1;
    v433 = v231;
    v434 = 0;
    (*(void (**)(uint64_t, uint64_t, int *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v265 + 32))(v265, 166, &v410, 1, &v427, 3, v359 | 0x100000000);
    v267 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v267 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v267 = a2;
        do
          v267 = *(_QWORD *)(v267 + 8);
        while ((*(_WORD *)(v267 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v267 + 8));
    if (v413 == (_DWORD *)&unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v414);
    }
    else if ((v413[2] - 64) <= 0xFFFFFF7F && v414)
    {
      MEMORY[0x1CAA32F9C](v414, 0x1000C8000313F17);
    }
    if (v441 == (_DWORD *)&unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v442);
    }
    else if ((v441[2] - 64) <= 0xFFFFFF7F && v442)
    {
      MEMORY[0x1CAA32F9C](v442, 0x1000C8000313F17);
    }
    if (v162 == (_DWORD *)&unk_1C866F1C0)
      goto LABEL_497;
    goto LABEL_447;
  }
LABEL_452:
  if ((_DWORD)v7 == (_DWORD)v358)
  {
    if (v93 == (_DWORD *)&unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v451, v88);
    }
    else
    {
      v451 = *v78;
      if ((v93[2] + 64) >= 0x80)
        v452 = (uint64_t *)operator new[]();
      v269 = *(_BYTE *)(v356 + 52);
      v270 = v269 & 7;
      v454 = v454 & 0xF0 | v269 & 0xF;
      v453 = *(_DWORD *)(v356 + 48);
      v272 = (v269 & 6) != 0 && v270 != 3;
      if (v270 == 1 || v272)
      {
        v273 = v451[2];
        if ((v273 - 64) <= 0xFFFFFF7F)
          v274 = (uint64_t **)v452;
        else
          v274 = &v452;
        v275 = *(uint64_t ***)(v356 + 40);
        if ((*(_DWORD *)(*(_QWORD *)(v356 + 32) + 8) - 64) >= 0xFFFFFF80)
          v275 = (uint64_t **)(v356 + 40);
        if (v273 <= 0xFFFFFFBF)
        {
          v276 = (unint64_t)(v273 + 64) >> 6;
          do
          {
            v277 = *v275++;
            *v274++ = v277;
            --v276;
          }
          while (v276);
        }
      }
    }
    llvm::APFloat::APFloat((uint64_t)&v427, v451, "1.0", 3uLL);
    if (v451 == (_DWORD *)&unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v441, (const llvm::detail::DoubleAPFloat *)&v451);
    }
    else
    {
      v441 = v451;
      if ((v451[2] + 64) >= 0x80)
        v442 = (uint64_t *)operator new[]();
      v278 = v454 & 7;
      v444 = v444 & 0xF0 | v454 & 0xF;
      v443 = v453;
      v280 = (v454 & 6) != 0 && v278 != 3;
      if (v278 == 1 || v280)
      {
        v281 = v441[2];
        v282 = (v281 - 64) <= 0xFFFFFF7F ? v442 : (uint64_t *)&v442;
        v283 = (v451[2] - 64) >= 0xFFFFFF80 ? (uint64_t *)&v452 : v452;
        if (v281 <= 0xFFFFFFBF)
        {
          v284 = (unint64_t)(v281 + 64) >> 6;
          do
          {
            v285 = *v283++;
            *v282++ = v285;
            --v284;
          }
          while (v284);
        }
      }
    }
    sub_1C47B4138((uint64_t)v440, (uint64_t)&v427, 1);
    if (v428 == (const llvm::APInt *)&unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v429);
    }
    else if ((*((_DWORD *)v428 + 2) - 64) <= 0xFFFFFF7F && v429)
    {
      MEMORY[0x1CAA32F9C](v429, 0x1000C8000313F17);
    }
    v287 = *a1;
    v427 = (unint64_t)v354;
    LODWORD(v428) = 0;
    v288 = llvm::ConstantFP::get(***v353, (llvm::LLVMContext *)v440, v286);
    v289 = (*(uint64_t (**)(uint64_t, unint64_t *, llvm::APFloatBase *))(*(_QWORD *)v287 + 24))(v287, &v427, v288);
    v290 = *a1;
    v412 = v357;
    LODWORD(v413) = 1;
    LODWORD(v427) = (_DWORD)v7;
    LODWORD(v429) = 0;
    v430 = v289;
    v431 = v291;
    v432 = 1;
    (*(void (**)(uint64_t, uint64_t, int *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v290 + 32))(v290, 165, &v412, 1, &v427, 2, v359 | 0x100000000);
    v292 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v292 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v292 = a2;
        do
          v292 = *(_QWORD *)(v292 + 8);
        while ((*(_WORD *)(v292 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v292 + 8));
    if (v441 != (_DWORD *)&unk_1C866F1C0)
    {
      if ((v441[2] - 64) <= 0xFFFFFF7F && v442)
LABEL_680:
        MEMORY[0x1CAA32F9C](v442, 0x1000C8000313F17);
LABEL_496:
      v65 = v451;
      if (v451 != (_DWORD *)&unk_1C866F1C0)
      {
LABEL_90:
        v66 = v65[2];
LABEL_91:
        if ((v66 - 64) <= 0xFFFFFF7F && v452)
          MEMORY[0x1CAA32F9C](v452, 0x1000C8000313F17);
        goto LABEL_112;
      }
LABEL_497:
      sub_1C4773C74((uint64_t *)&v452);
      goto LABEL_112;
    }
    goto LABEL_670;
  }
  if (v124 == 177 && (_DWORD)v7 == *(_DWORD *)(*(_QWORD *)(v123 + 32) + 36))
  {
    if (v93 == (_DWORD *)&unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v451, (const llvm::detail::DoubleAPFloat *)v78);
    }
    else
    {
      v451 = *v78;
      if ((v93[2] + 64) >= 0x80)
        v452 = (uint64_t *)operator new[]();
      v293 = *(_BYTE *)(v356 + 52);
      v294 = v293 & 7;
      v454 = v454 & 0xF0 | v293 & 0xF;
      v453 = *(_DWORD *)(v356 + 48);
      v296 = (v293 & 6) != 0 && v294 != 3;
      if (v294 == 1 || v296)
      {
        v297 = v451[2];
        if ((v297 - 64) <= 0xFFFFFF7F)
          v298 = (uint64_t **)v452;
        else
          v298 = &v452;
        v299 = *(uint64_t ***)(v356 + 40);
        if ((*(_DWORD *)(*(_QWORD *)(v356 + 32) + 8) - 64) >= 0xFFFFFF80)
          v299 = (uint64_t **)(v356 + 40);
        if (v297 <= 0xFFFFFFBF)
        {
          v300 = (unint64_t)(v297 + 64) >> 6;
          do
          {
            v301 = *v299++;
            *v298++ = v301;
            --v300;
          }
          while (v300);
        }
      }
    }
    llvm::APFloat::APFloat((uint64_t)&v427, v451, "1.0", 3uLL);
    if (v451 == (_DWORD *)&unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v441, (const llvm::detail::DoubleAPFloat *)&v451);
    }
    else
    {
      v441 = v451;
      if ((v451[2] + 64) >= 0x80)
        v442 = (uint64_t *)operator new[]();
      v302 = v454 & 7;
      v444 = v444 & 0xF0 | v454 & 0xF;
      v443 = v453;
      v304 = (v454 & 6) != 0 && v302 != 3;
      if (v302 == 1 || v304)
      {
        v305 = v441[2];
        v306 = (v305 - 64) <= 0xFFFFFF7F ? v442 : (uint64_t *)&v442;
        v307 = (v451[2] - 64) >= 0xFFFFFF80 ? (uint64_t *)&v452 : v452;
        if (v305 <= 0xFFFFFFBF)
        {
          v308 = (unint64_t)(v305 + 64) >> 6;
          do
          {
            v309 = *v307++;
            *v306++ = v309;
            --v308;
          }
          while (v308);
        }
      }
    }
    sub_1C48DB604((uint64_t)v440, (uint64_t)&v427, 1);
    if (v428 == (const llvm::APInt *)&unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v429);
    }
    else if ((*((_DWORD *)v428 + 2) - 64) <= 0xFFFFFF7F && v429)
    {
      MEMORY[0x1CAA32F9C](v429, 0x1000C8000313F17);
    }
    v311 = *a1;
    v427 = (unint64_t)v354;
    LODWORD(v428) = 0;
    v312 = llvm::ConstantFP::get(***v353, (llvm::LLVMContext *)v440, v310);
    v313 = (*(uint64_t (**)(uint64_t, unint64_t *, llvm::APFloatBase *))(*(_QWORD *)v311 + 24))(v311, &v427, v312);
    v314 = *a1;
    v412 = v357;
    LODWORD(v413) = 1;
    LODWORD(v427) = (_DWORD)v7;
    LODWORD(v429) = 0;
    v430 = v313;
    v431 = v315;
    v432 = 1;
    (*(void (**)(uint64_t, uint64_t, int *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v314 + 32))(v314, 165, &v412, 1, &v427, 2, v359 | 0x100000000);
    v63 = *(_QWORD *)(a2 + 24);
    v64 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v64 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v64 = a2;
        do
          v64 = *(_QWORD *)(v64 + 8);
        while ((*(_WORD *)(v64 + 44) & 8) != 0);
      }
    }
LABEL_87:
    sub_1C487FE80(v63 + 40, a2, *(_QWORD *)(v64 + 8));
    if (v441 == (_DWORD *)&unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v442);
    }
    else if ((v441[2] - 64) <= 0xFFFFFF7F && v442)
    {
      MEMORY[0x1CAA32F9C](v442, 0x1000C8000313F17);
    }
    v65 = v451;
    if (v451 != (_DWORD *)&unk_1C866F1C0)
      goto LABEL_90;
    goto LABEL_497;
  }
LABEL_656:
  v11 = 0;
LABEL_113:
  if (v363 >= 0x41 && v362)
    MEMORY[0x1CAA32F9C](v362, 0x1000C8000313F17);
  if (v361 >= 0x41 && v360)
    MEMORY[0x1CAA32F9C](v360, 0x1000C8000313F17);
  if (v367 >= 0x41 && v366)
    MEMORY[0x1CAA32F9C](v366, 0x1000C8000313F17);
  if (v365 >= 0x41 && v364)
    MEMORY[0x1CAA32F9C](v364, 0x1000C8000313F17);
  sub_1C48433E8((uint64_t)v368);
  return v11;
}

void sub_1C49A4E60(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::detail::DoubleAPFloat *v12;
  uint64_t v13;
  uint64_t **v14;
  char v15;
  int v16;
  _BOOL4 v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  long double v26;
  float v27;
  float v28;
  unsigned int v29;
  void *v30;
  uint64_t v31;
  char v32;
  void *v33;
  uint64_t v34;
  uint64_t *v35;
  _DWORD *v36;
  long double v37;
  void *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  char v46;
  void *v47;
  uint64_t v48;
  int v49;
  char v50;
  unint64_t v51;
  int v52;
  char v53[8];
  void *v54;
  uint64_t *v55;
  int v56;
  char v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v8 = (uint64_t *)(a5 + 16 * (a4 & 0x7FFFFFFF) + 8);
  if (a4 >= 0)
    v8 = (uint64_t *)(a6 + 8 * a4);
  v9 = *v8;
  if ((*(_BYTE *)(v9 + 3) & 1) == 0)
    v9 = *(_QWORD *)(v9 + 24);
  v10 = *(_QWORD *)(v9 + 8);
  if (**(_WORD **)(v10 + 16) == 121 && (v11 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 48)) != 0)
  {
    v12 = (llvm::detail::DoubleAPFloat *)&v54;
    v13 = *(_QWORD *)(v11 + 32);
    if ((_UNKNOWN *)v13 == &unk_1C866F1C0)
    {
      v44 = a2;
      v12 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v54, (const llvm::detail::DoubleAPFloat *)(v11 + 32));
      a2 = v44;
    }
    else
    {
      v54 = *(void **)(v11 + 32);
      v14 = (uint64_t **)*(unsigned int *)(v13 + 8);
      if (((_DWORD)v14 + 64) >= 0x80)
      {
        v43 = v11;
        v45 = a2;
        v42 = v13;
        v41 = operator new[]();
        v13 = v42;
        v11 = v43;
        a2 = v45;
        v14 = (uint64_t **)v41;
        v12 = (llvm::detail::DoubleAPFloat *)&v54;
        v55 = (uint64_t *)v14;
      }
      v15 = *(_BYTE *)(v11 + 52);
      v16 = v15 & 7;
      v57 = v15 & 0xF;
      v56 = *(_DWORD *)(v11 + 48);
      v18 = (v15 & 6) != 0 && v16 != 3;
      if (v16 == 1 || v18)
      {
        v20 = *(unsigned int *)(v13 + 8);
        if ((v20 - 64) > 0xFFFFFF7F)
          v14 = &v55;
        v23 = *(uint64_t **)(v11 + 40);
        v21 = (uint64_t *)(v11 + 40);
        v22 = v23;
        if ((*(_DWORD *)(*(v21 - 1) + 8) - 64) < 0xFFFFFF80)
          v21 = v22;
        if (v20 <= 0xFFFFFFBF)
        {
          v24 = (unint64_t)(v20 + 64) >> 6;
          do
          {
            v25 = *v21++;
            *v14++ = (uint64_t *)v25;
            --v24;
          }
          while (v24);
        }
      }
    }
    switch(a2)
    {
      case 175:
        llvm::APFloat::convert((uint64_t)v53, &unk_1C866F198, 1, &v46);
        v26 = llvm::APFloat::convertToDouble((llvm::APFloat *)v53);
        if (a3 == 257)
        {
          v27 = v26;
          v28 = log2f(v27);
          v52 = 32;
          v51 = LODWORD(v28);
          llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v47, (const llvm::APInt **)&v51);
        }
        else
        {
          v37 = log2(v26);
          v52 = 64;
          v51 = *(_QWORD *)&v37;
          llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v47, (const llvm::APInt **)&v51);
        }
        v38 = v47;
        v39 = v48;
        v40 = v50;
        if (v47 != &unk_1C866F1C0)
        {
          *(_DWORD *)(a1 + 24) = v49;
          *(_BYTE *)(a1 + 28) = *(_BYTE *)(a1 + 28) & 0xF0 | v40 & 0xF;
        }
        *(_QWORD *)(a1 + 8) = v38;
        *(_QWORD *)(a1 + 16) = v39;
        *(_BYTE *)(a1 + 32) = 1;
        goto LABEL_54;
      case 176:
      case 178:
      case 180:
      case 181:
      case 182:
      case 183:
        goto LABEL_39;
      case 177:
        v33 = v54;
        goto LABEL_46;
      case 179:
        if (a3 != 129)
          goto LABEL_39;
        llvm::APFloat::convert((uint64_t)v53, &unk_1C866F15C, 0, &v47);
        v33 = v54;
        if (v54 != &unk_1C866F1C0)
          goto LABEL_48;
        v34 = (uint64_t)v55;
        v55 = 0;
        goto LABEL_49;
      case 184:
        v33 = v54;
        v35 = v55;
        if (v54 != &unk_1C866F1C0)
          v35 = (uint64_t *)v53;
        if ((*((_BYTE *)v35 + 28) & 8) == 0)
          goto LABEL_43;
LABEL_46:
        if (v33 == &unk_1C866F1C0)
        {
          llvm::detail::DoubleAPFloat::changeSign(v12);
          v33 = v54;
LABEL_43:
          if (v33 == &unk_1C866F1C0)
          {
            v34 = (uint64_t)v55;
            v55 = 0;
            v33 = &unk_1C866F1C0;
            goto LABEL_49;
          }
        }
        else
        {
          v57 ^= 8u;
        }
LABEL_48:
        v34 = (uint64_t)v55;
        *(_DWORD *)(a1 + 24) = v56;
        *(_BYTE *)(a1 + 28) = *(_BYTE *)(a1 + 28) & 0xF0 | v57 & 0xF;
LABEL_49:
        *(_QWORD *)(a1 + 8) = v33;
        *(_QWORD *)(a1 + 16) = v34;
        v36 = &unk_1C866F210;
        v54 = &unk_1C866F210;
        *(_BYTE *)(a1 + 32) = 1;
LABEL_55:
        if ((v36[2] - 64) <= 0xFFFFFF7F)
        {
          if (v55)
            MEMORY[0x1CAA32F9C](v55, 0x1000C8000313F17);
        }
        break;
      default:
        if (a2 == 217)
        {
          llvm::APFloat::convert((uint64_t)v53, &unk_1C866F198, 1, &v46);
          *(float *)&v29 = sqrt(llvm::APFloat::convertToDouble((llvm::APFloat *)v53));
          v52 = 32;
          v51 = v29;
          llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v47, (const llvm::APInt **)&v51);
          v30 = v47;
          v31 = v48;
          if (v47 != &unk_1C866F1C0)
          {
            v32 = v50;
            *(_DWORD *)(a1 + 24) = v49;
            *(_BYTE *)(a1 + 28) = *(_BYTE *)(a1 + 28) & 0xF0 | v32 & 0xF;
          }
          *(_QWORD *)(a1 + 8) = v30;
          *(_QWORD *)(a1 + 16) = v31;
          *(_BYTE *)(a1 + 32) = 1;
        }
        else
        {
LABEL_39:
          *(_BYTE *)a1 = 0;
          *(_BYTE *)(a1 + 32) = 0;
        }
LABEL_54:
        v36 = v54;
        if (v54 != &unk_1C866F1C0)
          goto LABEL_55;
        sub_1C4773C74((uint64_t *)&v55);
        return;
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
  }
}

uint64_t sub_1C49A527C(int a1, uint64_t a2, _QWORD **a3)
{
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v8 = a1;
  result = sub_1C49BBE6C((uint64_t)(a3 + 1), a2, (unsigned int *)&v8);
  if ((_DWORD)result)
  {
    if (v8 >= 0)
      v6 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v8);
    else
      v6 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
    v7 = *v6;
    if (!v7)
      goto LABEL_6;
    if ((*(_BYTE *)(v7 + 3) & 1) == 0)
    {
      v7 = *(_QWORD *)(v7 + 24);
      if (!v7)
      {
LABEL_6:
        **a3 = v7;
        return v7 != 0;
      }
      if ((*(_BYTE *)(v7 + 3) & 1) == 0)
      {
        v7 = 0;
        goto LABEL_6;
      }
    }
    v7 = *(_QWORD *)(v7 + 8);
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_1C49A5320(int a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(_QWORD *)(a2 + 24);
  v5 = (uint64_t *)(v4 + 16 * (a1 & 0x7FFFFFFF) + 8);
  v6 = *(_QWORD *)(a2 + 272);
  if (a1 >= 0)
    v5 = (uint64_t *)(v6 + 8 * a1);
  v7 = *v5;
  if (!v7)
    return 0;
  v23 = a2;
  if ((*(_BYTE *)(v7 + 3) & 1) == 0)
  {
    v7 = *(_QWORD *)(v7 + 24);
    if (!v7 || (*(_BYTE *)(v7 + 3) & 1) == 0)
      return 0;
  }
  v9 = *(_QWORD *)(v7 + 8);
  if (!v9)
    return 0;
  v10 = **(unsigned __int16 **)(v9 + 16);
  if ((v10 & 0xFFFE) == 0x78)
    return 1;
  v11 = *(unsigned int **)(v9 + 32);
  v12 = v11[1];
  v13 = (uint64_t *)(v4 + 16 * (v12 & 0x7FFFFFFF) + 8);
  v14 = (uint64_t *)(v6 + 8 * v12);
  if ((int)v12 >= 0)
    v13 = v14;
  v15 = *v13;
  if (!v15)
    return 0;
  v16 = v15;
  if ((*(_DWORD *)v15 & 0x1000000) == 0)
    goto LABEL_19;
  v16 = v15;
  do
  {
    v16 = *(_QWORD *)(v16 + 24);
    if (!v16)
    {
LABEL_21:
      if (!a4)
        return 0;
      if ((*(_DWORD *)v15 & 0x1000000) != 0)
      {
        while (1)
        {
          v15 = *(_QWORD *)(v15 + 24);
          if (!v15)
            break;
          if ((*(_BYTE *)(v15 + 3) & 1) == 0)
            goto LABEL_25;
        }
      }
      else
      {
LABEL_25:
        v17 = 0;
LABEL_26:
        ++v17;
        while (1)
        {
          v15 = *(_QWORD *)(v15 + 24);
          if (!v15)
            break;
          if ((*(_BYTE *)(v15 + 3) & 1) == 0)
            goto LABEL_26;
        }
        if (v17 == 2)
          goto LABEL_31;
      }
      return 0;
    }
  }
  while ((*(_BYTE *)(v16 + 3) & 1) != 0);
LABEL_19:
  while (1)
  {
    v16 = *(_QWORD *)(v16 + 24);
    if (!v16)
      break;
    if ((*(_BYTE *)(v16 + 3) & 1) == 0)
      goto LABEL_21;
  }
LABEL_31:
  v18 = a3;
  if (v10 != 318)
    v18 = 0;
  result = 1;
  if ((v18 & 1) != 0 || (v10 & 0xFFFC) == 0x11C)
    return result;
  if (**(unsigned __int16 **)(v9 + 16) <= 0x104u)
  {
    if ((v10 - 163) <= 0x38 && ((1 << (v10 + 93)) & 0x18800000038540DLL) != 0
      || v10 == 85)
    {
      return result;
    }
LABEL_43:
    if ((v10 & 0xFFFE) != 0x74)
      goto LABEL_50;
    v19 = *(unsigned int *)(v9 + 40);
    if (!(_DWORD)v19)
      goto LABEL_50;
    v20 = v11 + 4;
    while (*((_BYTE *)v20 - 16) != 17)
    {
      v20 += 8;
      if (!--v19)
        goto LABEL_50;
    }
    if (*v20 != 2131)
    {
LABEL_50:
      switch(v10)
      {
        case 51:
          if (sub_1C49A5320(v11[33], a2, a3, 0))
          {
            v21 = v11[41];
            a2 = v23;
            v22 = a3;
LABEL_56:
            if ((sub_1C49A5320(v21, a2, v22, 0) & 1) != 0)
              return 1;
          }
          break;
        case 179:
          if ((a3 & 1) != 0)
            return 1;
          v21 = v11[9];
          v22 = 0;
          goto LABEL_56;
        case 178:
          return a3;
        default:
          return 0;
      }
    }
    return 1;
  }
  if (((v10 - 314) > 0x2A || ((1 << (v10 - 58)) & 0x40000200003) == 0) && v10 != 261)
    goto LABEL_43;
  return result;
}

uint64_t sub_1C49A557C(int a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _DWORD *i;
  uint64_t v15;

  v2 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  if (a1 >= 0)
    v2 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * a1);
  v3 = *v2;
  if (!*v2)
    return 1;
  while ((*(_BYTE *)(v3 + 3) & 1) != 0)
  {
    v3 = *(_QWORD *)(v3 + 24);
    if (!v3)
      return 1;
  }
  v6 = *(_QWORD *)(v3 + 8);
LABEL_9:
  v7 = **(unsigned __int16 **)(v6 + 16);
  if ((v7 & 0xFFFE) == 0xB2)
  {
    if ((sub_1C49A557C(*(unsigned int *)(*(_QWORD *)(v6 + 32) + 4), a2) & 1) == 0)
      return 0;
    goto LABEL_43;
  }
  if (**(unsigned __int16 **)(v6 + 16) > 0x104u)
  {
    v12 = (v7 - 314) > 0x2A || ((1 << (v7 - 58)) & 0x40000200003) == 0;
    if (!v12 || v7 == 261)
      goto LABEL_43;
LABEL_33:
    if ((v7 & 0xFFFE) != 0x74)
      return 0;
    v13 = *(unsigned int *)(v6 + 40);
    if (!(_DWORD)v13)
      return 0;
    for (i = (_DWORD *)(*(_QWORD *)(v6 + 32) + 16); *((_BYTE *)i - 16) != 17; i += 8)
    {
      result = 0;
      if (!--v13)
        return result;
    }
    if (*i != 2131)
      return 0;
    goto LABEL_43;
  }
  v8 = (v7 - 163);
  if (v8 > 0x38)
    goto LABEL_32;
  if (((1 << (v7 + 93)) & 0x18800000038140DLL) != 0)
    goto LABEL_43;
  if (v8 != 14)
  {
LABEL_32:
    if (v7 == 85)
      goto LABEL_43;
    goto LABEL_33;
  }
  v9 = *(unsigned int *)(*(_QWORD *)(v6 + 32) + 4);
  v10 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
  if ((int)v9 >= 0)
    v10 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v9);
  v11 = *v10;
  if (!v11)
  {
LABEL_43:
    v15 = *(_QWORD *)(v3 + 8);
    while (1)
    {
      v3 = *(_QWORD *)(v3 + 24);
      if (!v3)
        return 1;
      if ((*(_BYTE *)(v3 + 3) & 1) == 0)
      {
        v6 = *(_QWORD *)(v3 + 8);
        if (v6 != v15)
          goto LABEL_9;
      }
    }
  }
  while ((*(_BYTE *)(v11 + 3) & 1) != 0)
  {
    v11 = *(_QWORD *)(v11 + 24);
    if (!v11)
      goto LABEL_43;
  }
  while (1)
  {
    v11 = *(_QWORD *)(v11 + 24);
    if (!v11)
      break;
    if ((*(_BYTE *)(v11 + 3) & 1) == 0)
      goto LABEL_43;
  }
  result = sub_1C49A557C(v9, a2);
  if ((_DWORD)result)
  {
    if ((sub_1C4998998(v9, a2) & 1) == 0)
      return 0;
    goto LABEL_43;
  }
  return result;
}

uint64_t sub_1C49A5774(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t result;
  int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t *i;
  uint64_t v45;
  uint64_t *v46;
  uint64_t j;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  int v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 40) != 3)
    return 0;
  v3 = *(unsigned int **)(a2 + 32);
  v4 = v3[1];
  if ((v4 & 0x80000000) == 0)
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 40);
  v7 = v4 & 0x7FFFFFFF;
  if (v7 >= *(unsigned int *)(v6 + 432) || *(_QWORD *)(*(_QWORD *)(v6 + 424) + 8 * v7) != 9)
    return 0;
  v8 = v3[9];
  v9 = v3[17];
  if ((v8 & 0x80000000) != 0)
    v10 = (uint64_t *)(*(_QWORD *)(v6 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
  else
    v10 = (uint64_t *)(*(_QWORD *)(v6 + 272) + 8 * v8);
  v11 = *v10;
  if (v11)
  {
    if ((*(_BYTE *)(v11 + 3) & 1) != 0 || (v11 = *(_QWORD *)(v11 + 24)) != 0 && (*(_BYTE *)(v11 + 3) & 1) != 0)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if ((v9 & 0x80000000) != 0)
        goto LABEL_15;
LABEL_10:
      v13 = (uint64_t *)(*(_QWORD *)(v6 + 272) + 8 * v9);
      goto LABEL_16;
    }
  }
  v12 = 0;
  if ((v9 & 0x80000000) == 0)
    goto LABEL_10;
LABEL_15:
  v13 = (uint64_t *)(*(_QWORD *)(v6 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
LABEL_16:
  v14 = *v13;
  if ((*(_BYTE *)(v14 + 3) & 1) == 0)
    v14 = *(_QWORD *)(v14 + 24);
  v15 = *(_QWORD *)(v14 + 8);
  if (!sub_1C499F11C(v15, v6))
    goto LABEL_26;
  if (sub_1C499F11C(v12, v6))
  {
    if ((v9 & 0x80000000) != 0)
      v16 = (uint64_t *)(*(_QWORD *)(v6 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
    else
      v16 = (uint64_t *)(*(_QWORD *)(v6 + 272) + 8 * v9);
    v17 = *v16;
    if (v17)
    {
      while ((*(_BYTE *)(v17 + 3) & 1) != 0)
      {
        v17 = *(_QWORD *)(v17 + 24);
        if (!v17)
          goto LABEL_26;
      }
      do
      {
        v17 = *(_QWORD *)(v17 + 24);
        if (!v17)
          goto LABEL_29;
      }
      while ((*(_BYTE *)(v17 + 3) & 1) != 0);
    }
LABEL_26:
    v18 = v15;
    v19 = v9;
    goto LABEL_30;
  }
LABEL_29:
  v18 = v12;
  v12 = v15;
  v19 = v8;
  LODWORD(v8) = v9;
LABEL_30:
  result = sub_1C499F11C(v12, v6);
  if (!(_DWORD)result)
    return result;
  v60 = 0;
  if (sub_1C499F11C(v12, v6))
  {
    v21 = **(unsigned __int16 **)(v12 + 16);
    if ((v21 - 134) < 2 || v21 == 51)
      v22 = 2;
    else
      v22 = 0;
    v23 = *(_DWORD *)(*(_QWORD *)(v12 + 32) + 32 * v22 + 4);
    v62 = &v60;
    v74 = v23;
    if (sub_1C49BCA00((uint64_t)&v61, v6, &v74))
    {
      if (v60 == 1)
        return 0;
    }
  }
  if (sub_1C499F11C(v18, v6))
  {
    v24 = **(unsigned __int16 **)(v18 + 16);
    if ((v24 - 134) < 2 || v24 == 51)
      v25 = 2;
    else
      v25 = 0;
    v26 = *(_DWORD *)(*(_QWORD *)(v18 + 32) + 32 * v25 + 4);
    v62 = &v60;
    v74 = v26;
    if (sub_1C49BCA00((uint64_t)&v61, v6, &v74))
    {
      if (v60 == 1)
        return 0;
    }
  }
  v27 = **(unsigned __int16 **)(v12 + 16);
  v28 = v27 - 134;
  if ((v27 - 134) < 2 || v27 == 51)
    v29 = 2;
  else
    v29 = 0;
  if (v28 < 2 || v27 == 51)
    v30 = 3;
  else
    v30 = 0;
  v31 = *(_QWORD *)(v12 + 32);
  v32 = v28 < 2 || v27 == 51;
  v33 = v31 + 32 * v29;
  v34 = v31 + 32 * v30;
  v35 = v31 + 32 * v32;
  if ((v8 & 0x80000000) != 0)
    v36 = (uint64_t *)(*(_QWORD *)(v6 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
  else
    v36 = (uint64_t *)(*(_QWORD *)(v6 + 272) + 8 * v8);
  v37 = *(_DWORD *)(v33 + 4);
  v38 = *(_DWORD *)(v34 + 4);
  v39 = *(_DWORD *)(v35 + 16);
  v40 = *v36;
  if (*v36)
  {
    while ((*(_BYTE *)(v40 + 3) & 1) != 0)
    {
      v40 = *(_QWORD *)(v40 + 24);
      if (!v40)
        goto LABEL_63;
    }
    while (1)
    {
      v40 = *(_QWORD *)(v40 + 24);
      if (!v40)
        break;
      if ((*(_BYTE *)(v40 + 3) & 1) == 0)
        goto LABEL_63;
    }
  }
  else
  {
LABEL_63:
    v41 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 16 * v7 + 8);
    if (v41)
    {
      while ((*(_BYTE *)(v41 + 3) & 1) != 0)
      {
        v41 = *(_QWORD *)(v41 + 24);
        if (!v41)
          goto LABEL_69;
      }
      v50 = *(_QWORD *)(v41 + 8);
LABEL_89:
      v51 = **(unsigned __int16 **)(v50 + 16);
      if (v51 == 114 || v51 == 136)
        return 0;
      while (1)
      {
        v41 = *(_QWORD *)(v41 + 24);
        if (!v41)
          break;
        if ((*(_BYTE *)(v41 + 3) & 1) == 0 && *(_QWORD *)(v41 + 8) != v50)
        {
          v50 = *(_QWORD *)(v41 + 8);
          goto LABEL_89;
        }
      }
    }
  }
LABEL_69:
  v42 = 0;
  v43 = v4;
  if ((v4 & 0x80000000) != 0)
    goto LABEL_71;
LABEL_70:
  for (i = (uint64_t *)(*(_QWORD *)(v6 + 272) + 8 * v43);
        ;
        i = (uint64_t *)(*(_QWORD *)(v6 + 24) + 16 * (v43 & 0x7FFFFFFF) + 8))
  {
    v45 = *i;
    if (!v45)
      break;
    while ((*(_BYTE *)(v45 + 3) & 1) != 0)
    {
      v45 = *(_QWORD *)(v45 + 24);
      if (!v45)
        goto LABEL_96;
    }
    while (1)
    {
      v45 = *(_QWORD *)(v45 + 24);
      if (!v45)
        break;
      if ((*(_BYTE *)(v45 + 3) & 1) == 0)
        goto LABEL_96;
    }
    if (v42 == 5)
      break;
    if ((v43 & 0x80000000) != 0)
      v46 = (uint64_t *)(*(_QWORD *)(v6 + 24) + 16 * (v43 & 0x7FFFFFFF) + 8);
    else
      v46 = (uint64_t *)(*(_QWORD *)(v6 + 272) + 8 * v43);
    for (j = *v46; (*(_BYTE *)(j + 3) & 1) != 0; j = *(_QWORD *)(j + 24))
      ;
    v48 = *(_QWORD *)(j + 8);
    v49 = **(unsigned __int16 **)(v48 + 16);
    if ((v49 - 65) >= 2)
    {
      if (v49 == 136)
        return 0;
      break;
    }
    v43 = *(unsigned int *)(*(_QWORD *)(v48 + 32) + 4);
    ++v42;
    if ((v43 & 0x80000000) == 0)
      goto LABEL_70;
LABEL_71:
    ;
  }
LABEL_96:
  v52 = *a1;
  *(_QWORD *)(v52 + 40) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v52 + 48) = a2;
  v53 = **(unsigned __int16 **)(a2 + 16);
  if (v53 != 66)
  {
    if (v53 == 65)
    {
      v54 = *a1;
      v74 = v4;
      v75 = 1;
      v61 = v39;
      v63 = 2;
      v64 = v37;
      v65 = 0;
      v66 = v38;
      v67 = 0;
      LODWORD(v68) = v19;
      v70 = 0;
      v58 = 9;
      v59 = 0;
      v71 = sub_1C5544694(v54, &v58, 0);
      v72 = v55;
      v73 = 1;
      goto LABEL_102;
    }
    return 0;
  }
  v54 = *a1;
  v74 = v4;
  v75 = 1;
  v61 = v39;
  v63 = 2;
  v64 = v37;
  v65 = 0;
  v66 = v38;
  v67 = 0;
  v58 = 9;
  v59 = 0;
  v68 = sub_1C5544694(v54, &v58, 1);
  v69 = v56;
  v70 = 1;
  LODWORD(v71) = v19;
  v73 = 0;
LABEL_102:
  (*(void (**)(uint64_t, uint64_t, unsigned int *, uint64_t, int *, uint64_t, _QWORD))(*(_QWORD *)v54 + 32))(v54, 51, &v74, 1, &v61, 5, 0);
  v57 = a2;
  if ((*(_BYTE *)a2 & 4) == 0)
  {
    v57 = a2;
    if ((*(_WORD *)(a2 + 44) & 8) != 0)
    {
      v57 = a2;
      do
        v57 = *(_QWORD *)(v57 + 8);
      while ((*(_WORD *)(v57 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v57 + 8));
  return 1;
}

uint64_t sub_1C49A5D68(uint64_t *a1, uint64_t a2, llvm::APInt *this, int8x8_t a4)
{
  _DWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t result;
  unsigned int v14;
  int v15;
  unint64_t v16;
  uint8x8_t v17;
  unint64_t v18;
  unint64_t v19;
  const char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD v34[6];
  uint64_t v35;
  int v36;
  _DWORD v37[6];
  uint64_t v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD **)(a2 + 32);
  v5 = v4[1];
  if ((v5 & 0x80000000) == 0)
    return 0;
  v7 = *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 40);
  v8 = v5 & 0x7FFFFFFF;
  if ((v5 & 0x7FFFFFFFu) >= *(_DWORD *)(v7 + 432))
    return 0;
  v9 = v4[9];
  v10 = v4[17];
  v40 = *(_QWORD *)(*(_QWORD *)(v7 + 424) + 8 * v8);
  if ((v40 & 1) == 0)
    return 0;
  v11 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 16 * v8 + 8);
  if (!v11)
    return 0;
  while ((*(_BYTE *)(v11 + 3) & 1) != 0)
  {
    v11 = *(_QWORD *)(v11 + 24);
    if (!v11)
      return 0;
  }
  result = 0;
  do
  {
    v11 = *(_QWORD *)(v11 + 24);
    if (!v11)
      break;
  }
  while ((*(_BYTE *)(v11 + 3) & 1) != 0);
  v14 = *((_DWORD *)this + 2);
  if (v14 > 0x40)
    v15 = llvm::APInt::countLeadingZerosSlowCase(this);
  else
    v15 = v14 + __clz(*(_QWORD *)this) - 64;
  v16 = v14 - v15;
  a4.i32[0] = v14 - v15;
  v17 = (uint8x8_t)vcnt_s8(a4);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.i32[0] != 1)
  {
    v18 = v16 | (v16 >> 1) | ((v16 | (v16 >> 1)) >> 2);
    v19 = v18 | (v18 >> 4) | ((v18 | (v18 >> 4)) >> 8);
    LODWORD(v16) = ((v19 >> 16) | v19) + 1;
  }
  v21 = sub_1C4825F50(&v40);
  if ((_DWORD)v20 == 1)
  if (v21 != 64 && v21 != 32)
    return 0;
  v22 = v16 <= 0x10 ? 16 : v16;
  if (v16 >= 0x11 && (_DWORD)v22 != 32)
    return 0;
  v23 = (8 * v22) | 1;
  if (v23 == v40)
    return 0;
  v24 = *a1;
  *(_QWORD *)(v24 + 40) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v24 + 48) = a2;
  v25 = *a1;
  v26 = **(unsigned __int16 **)(a2 + 16);
  v47 = v23;
  v48 = 0;
  v38 = v23;
  v39 = 0;
  v37[0] = v9;
  v37[4] = 0;
  v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)v25 + 32))(v25, 119, &v38, 1, v37, 1, 0);
  v42 = v27;
  v43 = 1;
  v28 = *a1;
  v35 = v23;
  v36 = 0;
  v34[0] = v10;
  v34[4] = 0;
  v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)v28 + 32))(v28, 119, &v35, 1, v34, 1, 0);
  v45 = v29;
  v46 = 1;
  v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v25 + 32))(v25, v26, &v47, 1, &v41, 2, 0);
  v31 = *a1;
  v37[0] = v5;
  v37[2] = 1;
  v41 = v30;
  v42 = v32;
  v43 = 1;
  (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v31 + 32))(v31, 118, v37, 1, &v41, 1, 0);
  v33 = a2;
  if ((*(_BYTE *)a2 & 4) == 0)
  {
    v33 = a2;
    if ((*(_WORD *)(a2 + 44) & 8) != 0)
    {
      v33 = a2;
      do
        v33 = *(_QWORD *)(v33 + 8);
      while ((*(_WORD *)(v33 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v33 + 8));
  return 1;
}

uint64_t sub_1C49A606C(uint64_t *a1, uint64_t a2, unint64_t *a3, uint64_t a4, _QWORD *a5, int a6, char a7)
{
  unint64_t *v11;
  int v13;
  const char *v14;
  const llvm::APInt *v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  char v22;
  unint64_t *v23;
  unsigned int v24;
  _QWORD *v25;
  int v26;
  uint64_t *v27;
  size_t v28;
  void *v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  BOOL v43;
  unint64_t v44;
  unsigned __int16 *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t *v54;
  int v55;
  int64_t v56;
  BOOL v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  unsigned int v66;
  unsigned int v67;
  _DWORD *v68;
  uint64_t v69;
  uint64_t *v70;
  _DWORD *v71;
  int v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  unsigned int v88;
  char v89;
  unsigned int v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  char v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  char v115;
  BOOL v116;
  size_t v117;
  int v118;
  void *v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  int v125;
  const char *v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  const char *v132;
  unsigned int v133;
  uint64_t *v134;
  const char *v135;
  unsigned int v136;
  uint64_t *v137;
  const char *v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  unsigned int v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  size_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  size_t v173;
  unint64_t v174;
  uint64_t *v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  size_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  int64_t v191;
  int v192;
  unint64_t v193;
  int v194;
  unsigned int v195;
  unint64_t v196;
  _QWORD *v197;
  uint64_t *v198;
  unint64_t v199;
  _QWORD *v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  BOOL v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void (*v216)(void);
  uint64_t v217;
  int v218;
  uint64_t *v219;
  uint64_t v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int64_t v225;
  unint64_t v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  char v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  unsigned int v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  char v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  unsigned int v254;
  int v255;
  int64_t v256;
  unint64_t v257;
  unsigned int v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  void *v264;
  char v265;
  int v266;
  unsigned int v267;
  int v268;
  int64_t v269;
  unint64_t v270;
  unsigned int v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  llvm::APInt *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unsigned int v279;
  unsigned int v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  int8x8_t v284;
  unint64_t v285;
  unint64_t v286;
  unsigned int v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  uint64_t *v291;
  uint64_t v292;
  uint64_t v293;
  void *v294;
  uint64_t v295;
  int v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  unint64_t v302;
  unsigned int v303;
  void *v304;
  unint64_t v305;
  unsigned int v306;
  unint64_t v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t *v316;
  unint64_t v317;
  _QWORD *v318;
  uint64_t v319;
  _BOOL4 v320;
  uint64_t *v321;
  unint64_t v322;
  uint64_t *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  char v328;
  unsigned __int16 *v329;
  unsigned int v330;
  int v331;
  uint64_t v332;
  uint64_t *v333;
  uint64_t v334;
  int v335;
  int v336;
  int v337;
  int v338;
  uint64_t *v339;
  unint64_t v340;
  uint64_t *v341;
  uint64_t *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  llvm::ConstantInt ******i;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t j;
  llvm::ConstantInt *****v354;
  llvm::ConstantInt *****v355;
  llvm::ValueHandleBase *v356;
  uint64_t v357;
  uint64_t *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t *v364;
  uint64_t *v365;
  unint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t v374;
  unint64_t v375;
  uint64_t v376;
  unint64_t v377;
  char v378;
  int8x8_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t v383;
  size_t v384;
  uint64_t *v385;
  unint64_t v386;
  _QWORD *v387;
  uint64_t v388;
  _BOOL4 v389;
  uint64_t *v390;
  unint64_t v391;
  uint64_t *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  char v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  uint64_t *v401;
  unint64_t v402;
  _QWORD *v403;
  uint64_t v404;
  _BOOL4 v405;
  uint64_t *v406;
  unint64_t v407;
  uint64_t *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  char v413;
  uint64_t v414;
  uint64_t v415;
  _QWORD *v416;
  uint64_t *v417;
  unint64_t v418;
  uint64_t v419;
  uint64_t v420;
  _QWORD *v421;
  uint64_t *v422;
  unint64_t v423;
  uint64_t v424;
  int8x8_t v425;
  uint64_t v426;
  uint64_t v427;
  unint64_t v428;
  unint64_t v429;
  uint64_t *v430;
  uint64_t *v431;
  uint64_t *v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t *v443;
  unint64_t v444;
  _QWORD *v445;
  uint64_t v446;
  uint64_t v447;
  void *v448;
  uint64_t *v449;
  unint64_t v450;
  _QWORD *v451;
  unint64_t v452;
  uint64_t v453;
  uint64_t *v454;
  _QWORD *v455;
  uint64_t v456;
  uint64_t v457;
  unint64_t v458;
  uint64_t *v459;
  unint64_t v460;
  _QWORD *v461;
  uint64_t v462;
  uint64_t v463;
  void *v464;
  uint64_t *v465;
  unint64_t v466;
  _QWORD *v467;
  unint64_t v468;
  uint64_t v469;
  uint64_t *v470;
  _QWORD *v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t *v474;
  uint64_t v475;
  uint64_t v476;
  void *v477;
  uint64_t v478;
  uint64_t v479;
  unint64_t v480;
  unint64_t v481;
  uint64_t v482;
  unint64_t v483;
  char v484;
  int8x8_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  unint64_t v489;
  size_t v490;
  uint64_t *v491;
  unint64_t v492;
  _QWORD *v493;
  uint64_t v494;
  _BOOL4 v495;
  uint64_t *v496;
  unint64_t v497;
  uint64_t *v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  char v503;
  uint64_t v504;
  uint64_t v505;
  unint64_t v506;
  uint64_t *v507;
  unint64_t v508;
  _QWORD *v509;
  uint64_t v510;
  _BOOL4 v511;
  uint64_t *v512;
  unint64_t v513;
  uint64_t *v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  char v519;
  uint64_t v520;
  uint64_t v522;
  _QWORD *v523;
  uint64_t *v524;
  unint64_t v525;
  uint64_t v526;
  uint64_t v527;
  _QWORD *v528;
  uint64_t *v529;
  unint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  int v534;
  uint64_t v535;
  char v536;
  char v537;
  unint64_t v538;
  unint64_t v539;
  void *v540;
  unsigned int v541;
  BOOL v542;
  int v543;
  uint64_t v544;
  uint64_t v545;
  unsigned int v546;
  int v547;
  uint64_t v548;
  int v549;
  int v550;
  const char *v551;
  uint64_t v552;
  llvm::APInt *v553;
  uint64_t *v554;
  unint64_t v556;
  unsigned int v557;
  void *v558;
  unsigned int v559;
  unint64_t v560;
  unsigned int v561;
  void *v562;
  unsigned int v563;
  void *v564;
  unsigned int v565;
  void *v566;
  unsigned int v567;
  void *v568;
  unsigned int v569;
  void *v570;
  unsigned int v571;
  void *__src;
  unsigned int v573;
  void *__s1;
  unsigned int v575;
  void *v576;
  unsigned int v577;
  void *v578;
  unsigned int v579;
  unint64_t v580;
  unsigned int v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  int v587;
  uint64_t v588;
  unsigned int v589;
  unint64_t v590;
  unsigned int v591;
  uint64_t v592;

  v11 = a3;
  v592 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)a3 & 1) == 0)
  {
    v13 = **(unsigned __int16 **)(a2 + 16);
    if (v13 != 193 && v13 != 70)
      return 0;
  }
  v16 = sub_1C4825F50(a3);
  if ((_DWORD)v14 == 1)
  LODWORD(v583) = v16;
  if (v16 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v582, 0, 0);
    LODWORD(v585) = v16;
    llvm::APInt::initSlowCase((llvm::APInt *)&v584, 0, 0);
  }
  else
  {
    LODWORD(v585) = v16;
    v582 = 0;
    v584 = 0;
  }
  if (*((_DWORD *)a5 + 2) >= 0x41u && *a5)
    MEMORY[0x1CAA32F9C](*a5, 0x1000C8000313F17);
  *a5 = v582;
  *((_DWORD *)a5 + 2) = v583;
  LODWORD(v583) = 0;
  v553 = (llvm::APInt *)(a5 + 2);
  if (*((_DWORD *)a5 + 6) >= 0x41u && *(_QWORD *)v553)
    MEMORY[0x1CAA32F9C](*(_QWORD *)v553, 0x1000C8000313F17);
  a5[2] = v584;
  *((_DWORD *)a5 + 6) = v585;
  v17 = *(unsigned int *)(a4 + 8);
  v581 = v17;
  if (v17 > 0x40)
  {
    v20 = (unint64_t)(v17 + 63) >> 3;
    v21 = v17;
    v22 = a7;
    v23 = v11;
    v24 = v16;
    v25 = a5;
    v26 = a6;
    v27 = a1;
    v28 = v20 & 0x3FFFFFF8;
    v29 = (void *)operator new[]();
    v18 = *(_QWORD **)a4;
    v30 = v28;
    a1 = v27;
    a6 = v26;
    a5 = v25;
    v16 = v24;
    v11 = v23;
    a7 = v22;
    LODWORD(v17) = v21;
    v19 = (unint64_t)v29;
    memcpy(v29, *(const void **)a4, v30);
  }
  else
  {
    v18 = *(_QWORD **)a4;
    v19 = *(_QWORD *)a4;
  }
  v31 = a2;
  v580 = v19;
  v554 = a1;
  v32 = *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 40);
  v33 = *(_QWORD *)(a2 + 32);
  v34 = (const char *)*(unsigned int *)(v33 + 4);
  if ((v34 & 0x80000000) != 0)
    v35 = (uint64_t *)(*(_QWORD *)(v32 + 24) + 16 * (v34 & 0x7FFFFFFF) + 8);
  else
    v35 = (uint64_t *)(*(_QWORD *)(v32 + 272) + 8 * (_QWORD)v34);
  v36 = *v35;
  if (v36)
  {
    while ((*(_BYTE *)(v36 + 3) & 1) != 0)
    {
      v36 = *(_QWORD *)(v36 + 24);
      if (!v36)
        goto LABEL_19;
    }
    while (1)
    {
      v36 = *(_QWORD *)(v36 + 24);
      if (!v36)
        break;
      if ((*(_BYTE *)(v36 + 3) & 1) == 0)
        goto LABEL_19;
    }
LABEL_32:
    v41 = *(_DWORD *)(a4 + 8);
    if (v41 >= 0x41)
    {
      v42 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a4);
      v31 = a2;
      if (v41 - v42 > 0x40)
      {
        v43 = 0;
        goto LABEL_46;
      }
    }
    else
    {
      v18 = (_QWORD *)a4;
    }
    v43 = *v18 == 0;
LABEL_46:
    v40 = 0;
    if (a6 != 6 && !v43)
      goto LABEL_48;
    goto LABEL_879;
  }
LABEL_19:
  if ((a7 & 1) != 0)
    goto LABEL_32;
  if (!a6)
    goto LABEL_36;
  v37 = *(_QWORD *)(a2 + 16);
  v38 = *(unsigned __int8 *)(v37 + 4);
  if ((*(_BYTE *)(v37 + 8) & 2) == 0 || (v82 = *(_DWORD *)(a2 + 40), v82 == v38))
  {
    v39 = v38;
  }
  else
  {
    v83 = v82 - 1;
    v39 = v38;
    do
    {
      v84 = *(_DWORD *)(v33 + 32 * v38);
      if ((v84 & 0x10000FF) != 0x1000000)
        break;
      v39 += (v84 & 0x2000000) == 0;
      if (v83 == v38)
        break;
      ++v38;
    }
    while ((v84 & 0x2000000) == 0);
  }
  if (v39 != 1)
  {
LABEL_36:
    LODWORD(v583) = v16;
    if (v16 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v582, -1, 1);
      v31 = a2;
      LODWORD(v17) = v581;
    }
    else
    {
      if (v16)
        v44 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v16;
      else
        v44 = 0;
      v582 = v44;
    }
    if (v17 >= 0x41 && v580)
    {
      MEMORY[0x1CAA32F9C](v580, 0x1000C8000313F17);
      v31 = a2;
    }
    v19 = v582;
    v580 = v582;
    LODWORD(v17) = v583;
    v581 = v583;
LABEL_48:
    v577 = 1;
    v576 = 0;
    v579 = 1;
    v578 = 0;
    v45 = *(unsigned __int16 **)(v31 + 16);
    v46 = *v45;
    if (v46 > 0x4F)
    {
      switch(*v45)
      {
        case 0x76u:
          v47 = *(unsigned int *)(*(_QWORD *)(v31 + 32) + 36);
          if ((v47 & 0x80000000) != 0
            && (v47 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v32 + 432))
          {
            v48 = *(_QWORD *)(*(_QWORD *)(v32 + 424) + 8 * (v47 & 0x7FFFFFFF));
          }
          else
          {
            v48 = 0;
          }
          v582 = v48;
          v136 = sub_1C4825F50((unint64_t *)&v582);
          if ((_DWORD)v135 == 1)
          llvm::APInt::trunc((llvm::APInt *)&v580, v136, (llvm::APInt *)&v590);
          if ((v47 & 0x80000000) != 0)
            v137 = (uint64_t *)(*(_QWORD *)(v32 + 24) + 16 * (v47 & 0x7FFFFFFF) + 8);
          else
            v137 = (uint64_t *)(*(_QWORD *)(v32 + 272) + 8 * v47);
          v170 = *v137;
          if (v170
            && ((*(_BYTE *)(v170 + 3) & 1) != 0
             || (v170 = *(_QWORD *)(v170 + 24)) != 0 && (*(_BYTE *)(v170 + 3) & 1) != 0))
          {
            v171 = *(_QWORD *)(v170 + 8);
            if ((v47 & 0x80000000) == 0)
              goto LABEL_540;
          }
          else
          {
            v171 = 0;
            if ((v47 & 0x80000000) == 0)
              goto LABEL_540;
          }
          if ((v47 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v32 + 432))
          {
            v172 = *(_QWORD *)(*(_QWORD *)(v32 + 424) + 8 * (v47 & 0x7FFFFFFF));
            goto LABEL_541;
          }
LABEL_540:
          v172 = 0;
LABEL_541:
          v582 = v172;
          if ((sub_1C49A606C(v554, v171, &v582, &v590, a5, (a6 + 1), 0) & 1) != 0)
            goto LABEL_542;
          llvm::APInt::zext((llvm::APInt *)a5, v16, (uint64_t)&v582);
          llvm::APInt::zext(v553, v16, (uint64_t)&__src);
          goto LABEL_546;
        case 0x77u:
          v95 = *(unsigned int *)(*(_QWORD *)(v31 + 32) + 36);
          if ((v95 & 0x80000000) != 0
            && (v95 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v32 + 432))
          {
            v96 = *(_QWORD *)(*(_QWORD *)(v32 + 424) + 8 * (v95 & 0x7FFFFFFF));
          }
          else
          {
            v96 = 0;
          }
          v582 = v96;
          v133 = sub_1C4825F50((unint64_t *)&v582);
          if ((_DWORD)v132 == 1)
          llvm::APInt::zext((llvm::APInt *)&v580, v133, (uint64_t)&v590);
          if ((v95 & 0x80000000) != 0)
            v134 = (uint64_t *)(*(_QWORD *)(v32 + 24) + 16 * (v95 & 0x7FFFFFFF) + 8);
          else
            v134 = (uint64_t *)(*(_QWORD *)(v32 + 272) + 8 * v95);
          v167 = *v134;
          if (v167
            && ((*(_BYTE *)(v167 + 3) & 1) != 0
             || (v167 = *(_QWORD *)(v167 + 24)) != 0 && (*(_BYTE *)(v167 + 3) & 1) != 0))
          {
            v168 = *(_QWORD *)(v167 + 8);
            if ((v95 & 0x80000000) == 0)
              goto LABEL_533;
          }
          else
          {
            v168 = 0;
            if ((v95 & 0x80000000) == 0)
              goto LABEL_533;
          }
          if ((v95 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v32 + 432))
          {
            v169 = *(_QWORD *)(*(_QWORD *)(v32 + 424) + 8 * (v95 & 0x7FFFFFFF));
            goto LABEL_534;
          }
LABEL_533:
          v169 = 0;
LABEL_534:
          v582 = v169;
          if ((sub_1C49A606C(v554, v168, &v582, &v590, a5, (a6 + 1), 0) & 1) != 0)
          {
LABEL_542:
            if (v591 >= 0x41)
            {
              v285 = v590;
              if (v590)
                goto LABEL_490;
            }
            goto LABEL_876;
          }
          llvm::APInt::trunc((llvm::APInt *)a5, v16, (llvm::APInt *)&v582);
          llvm::APInt::trunc(v553, v16, (llvm::APInt *)&__src);
LABEL_546:
          v301 = v583;
          v302 = v582;
          v303 = v573;
          v304 = __src;
          if (*((_DWORD *)a5 + 2) >= 0x41u && *a5)
            MEMORY[0x1CAA32F9C](*a5, 0x1000C8000313F17);
          *a5 = v302;
          *((_DWORD *)a5 + 2) = v301;
          if (*((_DWORD *)a5 + 6) >= 0x41u && *(_QWORD *)v553)
            MEMORY[0x1CAA32F9C](*(_QWORD *)v553, 0x1000C8000313F17);
          a5[2] = v304;
          *((_DWORD *)a5 + 6) = v303;
          if (v591 < 0x41)
            goto LABEL_587;
          v286 = v590;
          if (!v590)
            goto LABEL_587;
          goto LABEL_550;
        case 0x78u:
          v102 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v31 + 32) + 4), v32);
          if (!v103)
            goto LABEL_587;
          v104 = *((unsigned int *)a5 + 6);
          if (v104 > 0x40)
          {
            *(_QWORD *)a5[2] = v102;
            bzero((void *)(a5[2] + 8), (((unint64_t)(v104 + 63) >> 3) - 8) & 0xFFFFFFF8);
            v104 = *((unsigned int *)a5 + 6);
            v571 = v104;
            if (v104 > 0x40)
            {
              v570 = (void *)operator new[]();
              memcpy(v570, *(const void **)v553, ((unint64_t)(v104 + 63) >> 3) & 0x3FFFFFF8);
              llvm::APInt::flipAllBitsSlowCase((uint64_t)&v570);
              LODWORD(v104) = v571;
              v188 = (unint64_t)v570;
              goto LABEL_321;
            }
            v107 = *(_QWORD *)v553;
            v105 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v104;
          }
          else
          {
            v105 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v104;
            if ((_DWORD)v104)
              v106 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v104;
            else
              v106 = 0;
            v107 = v106 & v102;
            *(_QWORD *)v553 = v107;
            v571 = v104;
          }
          v187 = ~v107;
          if (!(_DWORD)v104)
            v105 = 0;
          v188 = v105 & v187;
          v570 = (void *)(v105 & v187);
LABEL_321:
          v571 = 0;
          if (*((_DWORD *)a5 + 2) <= 0x40u || !*a5)
          {
            v40 = 0;
            *a5 = v188;
            *((_DWORD *)a5 + 2) = v104;
            goto LABEL_877;
          }
          MEMORY[0x1CAA32F9C](*a5, 0x1000C8000313F17);
          v237 = v571;
          *a5 = v188;
          *((_DWORD *)a5 + 2) = v104;
          if (v237 >= 0x41 && v570)
            MEMORY[0x1CAA32F9C](v570, 0x1000C8000313F17);
          goto LABEL_612;
        case 0x79u:
        case 0x7Au:
        case 0x7Bu:
        case 0x7Du:
          goto LABEL_78;
        case 0x7Cu:
          v108 = *v554;
          *(_QWORD *)(v108 + 40) = *(_QWORD *)(v31 + 24);
          *(_QWORD *)(v108 + 48) = v31;
          v109 = *(_QWORD *)(v31 + 32);
          v110 = *(unsigned int *)(v109 + 36);
          v552 = v110;
          if ((v110 & 0x80000000) != 0
            && (v110 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v32 + 432))
          {
            v111 = *(_QWORD *)(*(_QWORD *)(v32 + 424) + 8 * (v110 & 0x7FFFFFFF));
          }
          else
          {
            v111 = 0;
          }
          v549 = *(_DWORD *)(v109 + 4);
          v582 = v111;
          v139 = sub_1C4825F50((unint64_t *)&v582);
          if ((_DWORD)v138 == 1)
          v591 = v16;
          if (v16 <= 0x40)
          {
            v590 = 0;
            sub_1C4912E54(&v590, 0, v139);
            v140 = 0;
            v589 = v16;
            v141 = 1 << (v139 - 1);
            v142 = v16;
LABEL_170:
            v143 = v140 | v141;
            v588 = v140 | v141;
            goto LABEL_171;
          }
          llvm::APInt::initSlowCase((llvm::APInt *)&v590, 0, 0);
          sub_1C4912E54(&v590, 0, v139);
          v589 = v16;
          llvm::APInt::initSlowCase((llvm::APInt *)&v588, 0, 0);
          v141 = 1 << (v139 - 1);
          v142 = v589;
          if (v589 <= 0x40)
          {
            v140 = v588;
            goto LABEL_170;
          }
          v143 = v588;
          *(_QWORD *)(v588 + 8 * ((v139 - 1) >> 6)) |= v141;
LABEL_171:
          v144 = v591;
          v559 = v591;
          if (v591 > 0x40)
          {
            v162 = (((unint64_t)v591 + 63) >> 3) & 0x3FFFFFF8;
            v558 = (void *)operator new[]();
            memcpy(v558, (const void *)v590, v162);
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&v558);
            v163 = v559;
            v147 = (unint64_t)v558;
            v559 = 0;
            if (v163 > 0x40)
            {
              v189 = 0;
              v190 = v580;
              v191 = (unint64_t)(v163 + 63) >> 6;
              do
              {
                *(_QWORD *)(v147 + v189) &= *(_QWORD *)(v190 + v189);
                v189 += 8;
              }
              while (8 * v191 != v189);
              v192 = 0;
              do
              {
                v57 = v191-- < 1;
                if (v57)
                  break;
                v193 = *(_QWORD *)(v147 + 8 * v191);
                v192 += __clz(v193);
              }
              while (!v193);
              v194 = v163 | 0xFFFFFFC0;
              if ((v163 & 0x3F) == 0)
                v194 = 0;
              if ((v163 - v192 - v194) <= 0x40 && !*(_QWORD *)v147)
                goto LABEL_198;
              goto LABEL_238;
            }
            v144 = v163;
          }
          else
          {
            v145 = ~v590;
            if (v591)
              v146 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v591;
            else
              v146 = 0;
            v147 = v146 & v145;
            v558 = (void *)(v146 & v145);
            v559 = 0;
          }
          v147 &= v580;
          LODWORD(v163) = v144;
          if (!v147)
          {
LABEL_198:
            v164 = *v554;
            LODWORD(__src) = v549;
            v573 = 1;
            LODWORD(v582) = v552;
            LODWORD(v584) = 0;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v164 + 32))(v164, 118, &__src, 1, &v582, 1, 0);
            v165 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v165 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v165 = a2;
                do
                  v165 = *(_QWORD *)(v165 + 8);
                while ((*(_WORD *)(v165 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v165 + 8));
            v166 = 1;
            goto LABEL_577;
          }
LABEL_238:
          v547 = v163;
          v195 = v591;
          if (v591 >= 0x41)
          {
            v546 = v142;
            v196 = v591 + 63;
            v197 = (_QWORD *)operator new[]();
            memcpy(v197, (const void *)v590, (v196 >> 3) & 0x3FFFFFF8);
            v198 = (uint64_t *)v580;
            v199 = v196 >> 6;
            v200 = v197;
            v201 = v196 >> 6;
            do
            {
              v202 = *v198++;
              *v200++ &= v202;
              --v201;
            }
            while (v201);
            v557 = v195;
            v556 = (unint64_t)v197;
            v203 = (uint64_t *)v143;
            v142 = v546;
            do
            {
              v204 = *v203++;
              *v197++ |= v204;
              --v199;
            }
            while (v199);
          }
          else
          {
            v557 = v591;
            v556 = v143 | v580 & v590;
          }
          llvm::APInt::trunc((llvm::APInt *)&v556, v139, (llvm::APInt *)&v582);
          if (v557 >= 0x41 && v556)
            MEMORY[0x1CAA32F9C](v556, 0x1000C8000313F17);
          v556 = v582;
          v557 = v583;
          if ((v552 & 0x80000000) != 0)
            v205 = (uint64_t *)(*(_QWORD *)(v32 + 24) + 16 * (v552 & 0x7FFFFFFF) + 8);
          else
            v205 = (uint64_t *)(*(_QWORD *)(v32 + 272) + 8 * v552);
          v206 = *v205;
          if (v206
            && ((*(_BYTE *)(v206 + 3) & 1) != 0
             || (v206 = *(_QWORD *)(v206 + 24)) != 0 && (*(_BYTE *)(v206 + 3) & 1) != 0))
          {
            v207 = *(_QWORD *)(v206 + 8);
            if ((v552 & 0x80000000) == 0)
              goto LABEL_563;
          }
          else
          {
            v207 = 0;
            if ((v552 & 0x80000000) == 0)
              goto LABEL_563;
          }
          if ((v552 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v32 + 432))
          {
            v208 = *(_QWORD *)(*(_QWORD *)(v32 + 424) + 8 * (v552 & 0x7FFFFFFF));
            goto LABEL_564;
          }
LABEL_563:
          v208 = 0;
LABEL_564:
          v582 = v208;
          if ((sub_1C49A606C(v554, v207, &v582, &v556, a5, (a6 + 1), 0) & 1) != 0)
            goto LABEL_572;
          v305 = v143;
          llvm::APInt::sext((llvm::APInt *)a5, v16, (llvm::APInt *)&v582);
          llvm::APInt::sext(v553, v16, (llvm::APInt *)&__src);
          v306 = v583;
          v307 = v582;
          v308 = v573;
          v309 = (unint64_t)__src;
          if (*((_DWORD *)a5 + 2) >= 0x41u && *a5)
            MEMORY[0x1CAA32F9C](*a5, 0x1000C8000313F17);
          *a5 = v307;
          *((_DWORD *)a5 + 2) = v306;
          v310 = a2;
          if (*((_DWORD *)a5 + 6) >= 0x41u && *(_QWORD *)v553)
          {
            MEMORY[0x1CAA32F9C](*(_QWORD *)v553, 0x1000C8000313F17);
            v310 = a2;
            v306 = *((_DWORD *)a5 + 2);
          }
          a5[2] = v309;
          *((_DWORD *)a5 + 6) = v308;
          if (v306 > 0x40)
          {
            v340 = ((unint64_t)v306 + 63) >> 6;
            v341 = (uint64_t *)*a5;
            v143 = v305;
            v342 = (uint64_t *)v305;
            while (1)
            {
              v344 = *v341++;
              v343 = v344;
              v345 = *v342++;
              if ((v345 & v343) != 0)
                break;
              if (!--v340)
                goto LABEL_630;
            }
          }
          else
          {
            v143 = v305;
            if ((v305 & *a5) == 0)
            {
LABEL_630:
              if (v308 > 0x40)
              {
                v363 = (unint64_t)(v308 + 63) >> 6;
                v364 = (uint64_t *)v309;
                v365 = (uint64_t *)v143;
                v366 = v363;
                while (1)
                {
                  v368 = *v364++;
                  v367 = v368;
                  v369 = *v365++;
                  if ((v369 & v367) != 0)
                    break;
                  if (!--v366)
                    goto LABEL_657;
                }
                v370 = (uint64_t *)v147;
                v166 = 2;
                do
                {
                  v371 = *v370++;
                  *(_QWORD *)v309 |= v371;
                  v309 += 8;
                  --v363;
                }
                while (v363);
              }
              else
              {
                if ((v143 & v309) != 0)
                  *(_QWORD *)v553 = v309 | v147;
LABEL_657:
                v166 = 2;
              }
              goto LABEL_573;
            }
          }
          v311 = *v554;
          *(_QWORD *)(v311 + 40) = *(_QWORD *)(v310 + 24);
          *(_QWORD *)(v311 + 48) = v310;
          v312 = *v554;
          LODWORD(__src) = v549;
          v573 = 1;
          LODWORD(v582) = v552;
          LODWORD(v584) = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v312 + 32))(v312, 126, &__src, 1, &v582, 1, 0);
          v313 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v313 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v313 = a2;
              do
                v313 = *(_QWORD *)(v313 + 8);
              while ((*(_WORD *)(v313 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v313 + 8));
LABEL_572:
          v166 = 1;
LABEL_573:
          if (v557 >= 0x41 && v556)
            MEMORY[0x1CAA32F9C](v556, 0x1000C8000313F17);
          LODWORD(v163) = v547;
LABEL_577:
          if (v163 >= 0x41 && v147)
            MEMORY[0x1CAA32F9C](v147, 0x1000C8000313F17);
          if (v142 >= 0x41 && v143)
            MEMORY[0x1CAA32F9C](v143, 0x1000C8000313F17);
          if (v591 >= 0x41 && v590)
            MEMORY[0x1CAA32F9C](v590, 0x1000C8000313F17);
          if (v166 == 2)
            goto LABEL_587;
          goto LABEL_876;
        case 0x7Eu:
          v85 = *(_QWORD *)(v31 + 32);
          v86 = *(_DWORD *)(v85 + 36);
          if (v86 < 0 && (v86 & 0x7FFFFFFFu) < *(_DWORD *)(v32 + 432))
            v87 = *(_QWORD *)(*(_QWORD *)(v32 + 424) + 8 * (v86 & 0x7FFFFFFF));
          else
            v87 = 0;
          v125 = *(_DWORD *)(v85 + 4);
          v582 = v87;
          v127 = sub_1C4825F50((unint64_t *)&v582);
          if ((_DWORD)v126 == 1)
          llvm::APInt::trunc((llvm::APInt *)&v580, v127, (llvm::APInt *)&__src);
          v128 = v127 - v16;
          v561 = v16;
          if (v16 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v560, 0, 0);
            v16 = v561;
          }
          else
          {
            v560 = 0;
          }
          sub_1C4912E54(&v560, v128 + v16, v16);
          v129 = v561;
          if (v561 < 0x41)
          {
            v561 = 0;
            v560 &= v580;
            if (v560)
              goto LABEL_494;
            v130 = 0;
            v131 = a2;
LABEL_190:
            v159 = *v554;
            *(_QWORD *)(v159 + 40) = *(_QWORD *)(v131 + 24);
            *(_QWORD *)(v159 + 48) = v131;
            v160 = *v554;
            LODWORD(v590) = v125;
            v591 = 1;
            LODWORD(v582) = v86;
            LODWORD(v584) = 0;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v160 + 32))(v160, 118, &v590, 1, &v582, 1, 0);
            v161 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v161 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v161 = a2;
                do
                  v161 = *(_QWORD *)(v161 + 8);
                while ((*(_WORD *)(v161 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v161 + 8));
            if (v130 && v129 >= 0x41)
              MEMORY[0x1CAA32F9C](v130, 0x1000C8000313F17);
            goto LABEL_488;
          }
          v154 = (_QWORD *)v560;
          v155 = (uint64_t *)v580;
          v156 = ((unint64_t)v561 + 63) >> 6;
          v131 = a2;
          do
          {
            v157 = *v155++;
            *v154++ &= v157;
            --v156;
          }
          while (v156);
          v158 = 0;
          v130 = v560;
          v561 = 0;
          while ((*(_QWORD *)(v580 + v158) & *(_QWORD *)(v560 + v158)) == 0)
          {
            v158 += 8;
            if (8 * ((unint64_t)(v129 + 63) >> 6) == v158)
              goto LABEL_190;
          }
          if (!v560)
            goto LABEL_494;
          goto LABEL_228;
        case 0x7Fu:
          v97 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v31 + 32) + 68), v32);
          if (!v98)
            goto LABEL_587;
          v99 = v97;
          if (v97 >= v16)
            goto LABEL_587;
          v100 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 36);
          if ((v100 & 0x80000000) != 0)
            v101 = (uint64_t *)(*(_QWORD *)(v32 + 24) + 16 * (v100 & 0x7FFFFFFF) + 8);
          else
            v101 = (uint64_t *)(*(_QWORD *)(v32 + 272) + 8 * v100);
          v232 = *v101;
          if (v232
            && ((*(_BYTE *)(v232 + 3) & 1) != 0
             || (v232 = *(_QWORD *)(v232 + 24)) != 0 && (*(_BYTE *)(v232 + 3) & 1) != 0))
          {
            v233 = *(_QWORD *)(v232 + 8);
          }
          else
          {
            v233 = 0;
          }
          LODWORD(v583) = v17;
          if (v17 > 0x40)
          {
            v263 = v17 + 63;
            v264 = (void *)operator new[]();
            v582 = (uint64_t)v264;
            memcpy(v264, (const void *)v19, (v263 >> 3) & 0x3FFFFFF8);
            llvm::APInt::tcShiftRight((llvm::APInt *)v264, (unint64_t *)(v263 >> 6), v99);
            v265 = sub_1C49A606C(v554, v233, v11, &v582, a5, (a6 + 1), 0);
            MEMORY[0x1CAA32F9C](v264, 0x1000C8000313F17);
            if ((v265 & 1) == 0)
            {
LABEL_310:
              sub_1C4888094((uint64_t)a5, v99);
              sub_1C4888094((uint64_t)v553, v99);
              sub_1C4912E54(a5, 0, v99);
              goto LABEL_587;
            }
          }
          else
          {
            v234 = v19 >> v97;
            if ((_DWORD)v17 == v97)
              v234 = 0;
            v582 = v234;
            if ((sub_1C49A606C(v554, v233, v11, &v582, a5, (a6 + 1), 0) & 1) == 0)
              goto LABEL_310;
          }
          goto LABEL_876;
        case 0x80u:
          v88 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v31 + 32) + 68), v32);
          if (v89)
          {
            v90 = v88;
            if (v88 < v16)
            {
              LODWORD(v583) = v17;
              if (v17 > 0x40)
              {
                v91 = (void *)operator new[]();
                memcpy(v91, (const void *)v19, (((unint64_t)v17 + 63) >> 3) & 0x3FFFFFF8);
                v19 = (unint64_t)v91;
              }
              v582 = v19;
              sub_1C4888094((uint64_t)&v582, v90);
              v92 = a2;
              if ((*(_WORD *)(a2 + 44) & 0x2000) != 0)
              {
                sub_1C4912E54(&v582, 0, v90);
                v92 = a2;
              }
              v93 = *(unsigned int *)(*(_QWORD *)(v92 + 32) + 36);
              if ((v93 & 0x80000000) != 0)
                v94 = (uint64_t *)(*(_QWORD *)(v32 + 24) + 16 * (v93 & 0x7FFFFFFF) + 8);
              else
                v94 = (uint64_t *)(*(_QWORD *)(v32 + 272) + 8 * v93);
              v229 = *v94;
              if ((*(_BYTE *)(v229 + 3) & 1) == 0)
                v229 = *(_QWORD *)(v229 + 24);
              v230 = sub_1C49A606C(v554, *(_QWORD *)(v229 + 8), v11, &v582, a5, (a6 + 1), 0);
              if ((v230 & 1) == 0)
              {
                v231 = *((unsigned int *)a5 + 2);
                if (v231 > 0x40)
                {
                  llvm::APInt::tcShiftRight((llvm::APInt *)*a5, (unint64_t *)((unint64_t)(v231 + 63) >> 6), v90);
                }
                else if ((_DWORD)v231 == v90)
                {
                  *a5 = 0;
                }
                else
                {
                  *a5 >>= v90;
                }
                v248 = *((unsigned int *)a5 + 6);
                if (v248 > 0x40)
                {
                  llvm::APInt::tcShiftRight(*(llvm::APInt **)v553, (unint64_t *)((unint64_t)(v248 + 63) >> 6), v90);
                }
                else if ((_DWORD)v248 == v90)
                {
                  *(_QWORD *)v553 = 0;
                }
                else
                {
                  *(_QWORD *)v553 >>= v90;
                }
                sub_1C4912E54(a5, *((_DWORD *)a5 + 2) - v90, *((_DWORD *)a5 + 2));
              }
              if (v583 >= 0x41 && v582)
                MEMORY[0x1CAA32F9C](v582, 0x1000C8000313F17);
              if ((v230 & 1) != 0)
                goto LABEL_876;
            }
          }
          goto LABEL_587;
        case 0x81u:
          v112 = *(_DWORD *)(*(_QWORD *)(v31 + 32) + 68);
          v113 = sub_1C554C050(v112, v32);
          v114 = v113;
          if (v115)
            v116 = v113 >= v16;
          else
            v116 = 1;
          if (v116)
            goto LABEL_587;
          v573 = v17;
          if (v17 > 0x40)
          {
            v117 = (((unint64_t)v17 + 63) >> 3) & 0x3FFFFFF8;
            v118 = v112;
            v119 = (void *)operator new[]();
            memcpy(v119, (const void *)v19, v117);
            v19 = (unint64_t)v119;
            v112 = v118;
          }
          __src = (void *)v19;
          sub_1C4888094((uint64_t)&__src, v114);
          v120 = a2;
          if ((*(_WORD *)(a2 + 44) & 0x2000) != 0)
          {
            sub_1C4912E54(&__src, 0, v114);
            v120 = a2;
          }
          if (v581 > 0x40)
          {
            v224 = 0;
            v225 = ((unint64_t)v581 + 63) >> 6;
            do
            {
              v57 = v225-- < 1;
              if (v57)
                break;
              v226 = *(_QWORD *)(v580 + 8 * v225);
              v224 += __clz(v226);
            }
            while (!v226);
            if ((v581 & 0x3F) != 0)
              v227 = v581 | 0xFFFFFFC0;
            else
              v227 = 0;
            v121 = v224 + v227;
          }
          else
          {
            v121 = v581 + __clz(v580) - 64;
          }
          if (v121 < v114)
          {
            v228 = 1 << (v573 - 1);
            if (v573 > 0x40)
              *((_QWORD *)__src + ((v573 - 1) >> 6)) |= v228;
            else
              __src = (void *)((unint64_t)__src | v228);
          }
          v238 = *(unsigned int *)(*(_QWORD *)(v120 + 32) + 36);
          if ((v238 & 0x80000000) != 0)
            v239 = (uint64_t *)(*(_QWORD *)(v32 + 24) + 16 * (v238 & 0x7FFFFFFF) + 8);
          else
            v239 = (uint64_t *)(*(_QWORD *)(v32 + 272) + 8 * v238);
          v240 = *v239;
          if ((*(_BYTE *)(v240 + 3) & 1) == 0)
            v240 = *(_QWORD *)(v240 + 24);
          v241 = 0;
          if ((sub_1C49A606C(v554, *(_QWORD *)(v240 + 8), v11, &__src, a5, (a6 + 1), 0) & 1) != 0)
            goto LABEL_389;
          v242 = *((unsigned int *)a5 + 2);
          if (v242 > 0x40)
          {
            llvm::APInt::tcShiftRight((llvm::APInt *)*a5, (unint64_t *)((unint64_t)(v242 + 63) >> 6), v114);
          }
          else if ((_DWORD)v242 == v114)
          {
            *a5 = 0;
          }
          else
          {
            *a5 >>= v114;
          }
          v249 = *((unsigned int *)a5 + 6);
          if (v249 > 0x40)
          {
            llvm::APInt::tcShiftRight(*(llvm::APInt **)v553, (unint64_t *)((unint64_t)(v249 + 63) >> 6), v114);
          }
          else if ((_DWORD)v249 == v114)
          {
            *(_QWORD *)v553 = 0;
          }
          else
          {
            *(_QWORD *)v553 >>= v114;
          }
          v250 = ~v114 + v16;
          v251 = v250 >> 6;
          v252 = (_QWORD *)(*a5 + 8 * v251);
          if (*((_DWORD *)a5 + 2) < 0x41u)
            v252 = a5;
          v253 = 1 << v250;
          if ((*v252 & (1 << v250)) != 0)
            goto LABEL_386;
          if (v581 > 0x40)
          {
            v255 = 0;
            v256 = ((unint64_t)v581 + 63) >> 6;
            do
            {
              v57 = v256-- < 1;
              if (v57)
                break;
              v257 = *(_QWORD *)(v580 + 8 * v256);
              v255 += __clz(v257);
            }
            while (!v257);
            v258 = (v581 & 0x3F) != 0 ? v581 | 0xFFFFFFC0 : 0;
            v254 = v255 + v258;
          }
          else
          {
            v254 = v581 + __clz(v580) - 64;
          }
          if (v254 >= v114)
          {
LABEL_386:
            v259 = *v554;
            *(_QWORD *)(v259 + 40) = *(_QWORD *)(a2 + 24);
            *(_QWORD *)(v259 + 48) = a2;
            v260 = *v554;
            LODWORD(v590) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
            v591 = 1;
            LODWORD(v582) = v238;
            LODWORD(v584) = 0;
            LODWORD(v585) = v112;
            v587 = 0;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v260 + 32))(v260, 128, &v590, 1, &v582, 2, 0x100002000);
            v261 = *(_QWORD *)(a2 + 24);
            v262 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v262 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v262 = a2;
                do
                  v262 = *(_QWORD *)(v262 + 8);
                while ((*(_WORD *)(v262 + 44) & 8) != 0);
              }
            }
LABEL_388:
            sub_1C487FE80(v261 + 40, a2, *(_QWORD *)(v262 + 8));
            v241 = 0;
            goto LABEL_389;
          }
          v266 = sub_1C614D48C((unsigned int *)&v580);
          if ((v266 & 0x80000000) == 0)
          {
            if (v581 > 0x40)
            {
              v268 = 0;
              v269 = ((unint64_t)v581 + 63) >> 6;
              do
              {
                v57 = v269-- < 1;
                if (v57)
                  break;
                v270 = *(_QWORD *)(v580 + 8 * v269);
                v268 += __clz(v270);
              }
              while (!v270);
              v271 = (v581 & 0x3F) != 0 ? v581 | 0xFFFFFFC0 : 0;
              v267 = v268 + v271;
            }
            else
            {
              v267 = v581 + __clz(v580) - 64;
            }
            if (v267 < v114)
            {
              v272 = *v554;
              *(_QWORD *)(v272 + 40) = *(_QWORD *)(a2 + 24);
              *(_QWORD *)(v272 + 48) = a2;
              v273 = *v554;
              if (v112 < 0 && (v112 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v32 + 432))
                v274 = *(_QWORD *)(*(_QWORD *)(v32 + 424) + 8 * (v112 & 0x7FFFFFFF));
              else
                v274 = 0;
              v582 = v274;
              LODWORD(v583) = 0;
              v276 = sub_1C5544694(v273, (unint64_t *)&v582, ~v266 + v16);
              v277 = *v554;
              LODWORD(v590) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
              v591 = 1;
              LODWORD(v582) = v238;
              LODWORD(v584) = 0;
              v585 = v276;
              v586 = v278;
              v587 = 1;
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v277 + 32))(v277, 128, &v590, 1, &v582, 2, 0);
              v261 = *(_QWORD *)(a2 + 24);
              v262 = a2;
              if ((*(_BYTE *)a2 & 4) == 0)
              {
                v262 = a2;
                if ((*(_WORD *)(a2 + 44) & 8) != 0)
                {
                  v262 = a2;
                  do
                    v262 = *(_QWORD *)(v262 + 8);
                  while ((*(_WORD *)(v262 + 44) & 8) != 0);
                }
              }
              goto LABEL_388;
            }
          }
          v15 = (const llvm::APInt *)*((unsigned int *)a5 + 6);
          v275 = (llvm::APInt *)(a5[2] + 8 * v251);
          if (v15 < 0x41)
            v275 = v553;
          if ((*(_QWORD *)v275 & v253) != 0)
            sub_1C4912E54(v553, (_DWORD)v15 - v114, v15);
          v241 = 1;
LABEL_389:
          if (v573 >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          if ((v241 & 1) == 0)
            goto LABEL_876;
          goto LABEL_587;
        default:
          if (v46 != 80)
          {
            if (v46 == 193)
              goto LABEL_55;
            goto LABEL_78;
          }
          v122 = *(unsigned int *)(*(_QWORD *)(v31 + 32) + 36);
          if ((v122 & 0x80000000) != 0)
          {
            v185 = v122 & 0x7FFFFFFF;
            if (v185 >= *(unsigned int *)(v32 + 432))
              v186 = 0;
            else
              v186 = *(_QWORD *)(*(_QWORD *)(v32 + 424) + 8 * v185);
            v220 = 0x7FFFFF800000000;
            if ((v186 & 4) == 0)
              v220 = 0x7FFFFF80000;
            if ((v220 & v186) != 0)
              goto LABEL_587;
            v123 = (uint64_t *)(*(_QWORD *)(v32 + 24) + 16 * v185 + 8);
          }
          else
          {
            v123 = (uint64_t *)(*(_QWORD *)(v32 + 272) + 8 * v122);
          }
          v124 = *v123;
          if ((*(_BYTE *)(v124 + 3) & 1) == 0)
            v124 = *(_QWORD *)(v124 + 24);
          if ((sub_1C49A606C(v554, *(_QWORD *)(v124 + 8), v11, &v580, a5, (a6 + 1), 0) & 1) == 0)
            goto LABEL_587;
          goto LABEL_876;
      }
    }
    if (*v45 <= 0x40u)
    {
      if (v46 - 45 < 3)
      {
LABEL_55:
        v49 = *(_QWORD *)(v31 + 32);
        v50 = *(unsigned int *)(v49 + 36);
        if (v17 > 0x40)
        {
          v55 = 0;
          v56 = ((unint64_t)v17 + 63) >> 6;
          do
          {
            v57 = v56-- < 1;
            if (v57)
              break;
            v58 = *(_QWORD *)(v19 + 8 * v56);
            v55 += __clz(v58);
          }
          while (!v58);
          v59 = v17 | 0xFFFFFFC0;
          if ((v17 & 0x3F) == 0)
            v59 = 0;
          v51 = v55 + v59;
        }
        else
        {
          v51 = v17 + __clz(v19) - 64;
        }
        v60 = *(unsigned int *)(v49 + 68);
        v61 = v16 - v51;
        v573 = v16;
        if (v16 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
        else
          __src = 0;
        sub_1C4912E54(&__src, 0, v61);
        if ((v50 & 0x80000000) != 0)
          v62 = (uint64_t *)(*(_QWORD *)(v32 + 24) + 16 * (v50 & 0x7FFFFFFF) + 8);
        else
          v62 = (uint64_t *)(*(_QWORD *)(v32 + 272) + 8 * v50);
        v63 = *v62;
        if (v63
          && ((*(_BYTE *)(v63 + 3) & 1) != 0 || (v63 = *(_QWORD *)(v63 + 24)) != 0 && (*(_BYTE *)(v63 + 3) & 1) != 0))
        {
          v64 = *(_QWORD *)(v63 + 8);
          if ((v60 & 0x80000000) != 0)
            goto LABEL_475;
        }
        else
        {
          v64 = 0;
          if ((v60 & 0x80000000) != 0)
          {
LABEL_475:
            v65 = (uint64_t *)(*(_QWORD *)(v32 + 24) + 16 * (v60 & 0x7FFFFFFF) + 8);
            goto LABEL_476;
          }
        }
        v65 = (uint64_t *)(*(_QWORD *)(v32 + 272) + 8 * v60);
LABEL_476:
        v281 = *v65;
        if (v281
          && ((*(_BYTE *)(v281 + 3) & 1) != 0 || (v281 = *(_QWORD *)(v281 + 24)) != 0 && (*(_BYTE *)(v281 + 3) & 1) != 0))
        {
          v282 = *(_QWORD *)(v281 + 8);
          if ((v50 & 0x80000000) == 0)
            goto LABEL_484;
        }
        else
        {
          v282 = 0;
          if ((v50 & 0x80000000) == 0)
            goto LABEL_484;
        }
        if ((v50 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v32 + 432))
        {
          v283 = *(_QWORD *)(*(_QWORD *)(v32 + 424) + 8 * (v50 & 0x7FFFFFFF));
LABEL_485:
          v590 = v283;
          if ((sub_1C49A606C(v554, v64, &v590, &__src, a5, (a6 + 1), 0) & 1) != 0
            || (sub_1C49A606C(v554, v282, &v590, &__src, a5, (a6 + 1), 0) & 1) != 0
            || (sub_1C49A5D68(v554, a2, (llvm::APInt *)&v580, v284) & 1) != 0)
          {
LABEL_488:
            if (v573 >= 0x41)
            {
              v285 = (unint64_t)__src;
              if (__src)
LABEL_490:
                MEMORY[0x1CAA32F9C](v285, 0x1000C8000313F17);
            }
            goto LABEL_876;
          }
          sub_1C54EB4A0(v554[3], (const char *)*(unsigned int *)(*(_QWORD *)(a2 + 32) + 4), (uint64_t)&v582);
          if (*((_DWORD *)a5 + 2) >= 0x41u && *a5)
            MEMORY[0x1CAA32F9C](*a5, 0x1000C8000313F17);
          *a5 = v582;
          *((_DWORD *)a5 + 2) = v583;
          LODWORD(v583) = 0;
          if (*((_DWORD *)a5 + 6) < 0x41u || !*(_QWORD *)v553)
          {
            a5[2] = v584;
            *((_DWORD *)a5 + 6) = v585;
            goto LABEL_494;
          }
          MEMORY[0x1CAA32F9C](*(_QWORD *)v553, 0x1000C8000313F17);
          v287 = v583;
          a5[2] = v584;
          *((_DWORD *)a5 + 6) = v585;
          LODWORD(v585) = 0;
          if (v287 < 0x41 || !v582)
          {
LABEL_494:
            if (v573 >= 0x41)
            {
              v286 = (unint64_t)__src;
              if (__src)
LABEL_550:
                MEMORY[0x1CAA32F9C](v286, 0x1000C8000313F17);
            }
            goto LABEL_587;
          }
LABEL_228:
          MEMORY[0x1CAA32F9C]();
          goto LABEL_494;
        }
LABEL_484:
        v283 = 0;
        goto LABEL_485;
      }
      goto LABEL_78;
    }
    if (v46 != 65)
    {
      if (v46 != 66)
      {
        if (v46 != 67)
        {
LABEL_78:
          v66 = *((unsigned __int8 *)v45 + 4);
          if ((v45[4] & 2) == 0 || (v221 = *(_DWORD *)(v31 + 40), v221 == v66))
          {
            v67 = v66;
          }
          else
          {
            v222 = v221 - 1;
            v67 = v66;
            do
            {
              v223 = *(_DWORD *)(*(_QWORD *)(v31 + 32) + 32 * v66);
              if ((v223 & 0x10000FF) != 0x1000000)
                break;
              v67 += (v223 & 0x2000000) == 0;
              if (v222 == v66)
                break;
              ++v66;
            }
            while ((v223 & 0x2000000) == 0);
          }
          if (v67 == 1)
          {
            sub_1C54EB4A0(v554[3], (const char *)*(unsigned int *)(*(_QWORD *)(a2 + 32) + 4), (uint64_t)&__src);
            sub_1C49A9BF8((llvm::APInt *)&__src, v16, (uint64_t)&v582);
            if (*((_DWORD *)a5 + 2) >= 0x41u && *a5)
              MEMORY[0x1CAA32F9C](*a5, 0x1000C8000313F17);
            *a5 = v582;
            *((_DWORD *)a5 + 2) = v583;
            LODWORD(v583) = 0;
            if (*((_DWORD *)a5 + 6) >= 0x41u && *(_QWORD *)v553)
            {
              MEMORY[0x1CAA32F9C](*(_QWORD *)v553, 0x1000C8000313F17);
              v280 = v583;
              a5[2] = v584;
              *((_DWORD *)a5 + 6) = v585;
              LODWORD(v585) = 0;
              if (v280 >= 0x41 && v582)
                MEMORY[0x1CAA32F9C](v582, 0x1000C8000313F17);
            }
            else
            {
              a5[2] = v584;
              *((_DWORD *)a5 + 6) = v585;
              LODWORD(v585) = 0;
            }
            if (v575 < 0x41 || !__s1)
              goto LABEL_494;
            goto LABEL_228;
          }
LABEL_587:
          v314 = *((unsigned int *)a5 + 2);
          if (v314 > 0x40)
          {
            v315 = operator new[]();
            memcpy((void *)v315, (const void *)*a5, ((unint64_t)(v314 + 63) >> 3) & 0x3FFFFFF8);
            v316 = (uint64_t *)a5[2];
            v317 = (unint64_t)(v314 + 63) >> 6;
            v318 = (_QWORD *)v315;
            do
            {
              v319 = *v316++;
              *v318++ |= v319;
              --v317;
            }
            while (v317);
          }
          else
          {
            v315 = a5[2] | *a5;
          }
          if (v581 > 0x40)
          {
            v321 = (uint64_t *)v580;
            v322 = (((unint64_t)v581 + 63) >> 6) - 1;
            v323 = (uint64_t *)v315;
            do
            {
              v325 = *v321++;
              v324 = v325;
              v326 = *v323++;
              v327 = v324 & ~v326;
              v320 = v327 == 0;
              v116 = v322-- != 0;
              v328 = v116;
            }
            while (!v327 && (v328 & 1) != 0);
          }
          else
          {
            v320 = (v580 & ~v315) == 0;
          }
          if (v314 >= 0x41 && v315)
            MEMORY[0x1CAA32F9C](v315, 0x1000C8000313F17);
          if (!v320)
            goto LABEL_612;
          v329 = *(unsigned __int16 **)(a2 + 16);
          v330 = *((unsigned __int8 *)v329 + 4);
          if ((v329[4] & 2) == 0 || (v335 = *(_DWORD *)(a2 + 40), v335 == v330))
          {
            v331 = *((unsigned __int8 *)v329 + 4);
          }
          else
          {
            v336 = v335 - 1;
            v331 = *((unsigned __int8 *)v329 + 4);
            do
            {
              v337 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v330);
              if ((v337 & 0x10000FF) != 0x1000000)
                break;
              v331 += (v337 & 0x2000000) == 0;
              if (v336 == v330)
                break;
              ++v330;
            }
            while ((v337 & 0x2000000) == 0);
          }
          if (v331 != 1)
            goto LABEL_612;
          v332 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 4);
          v333 = (uint64_t *)((v332 & 0x80000000) != 0
                           ? *(_QWORD *)(v32 + 24) + 16 * (v332 & 0x7FFFFFFF) + 8
                           : *(_QWORD *)(v32 + 272) + 8 * v332);
          v334 = *v333;
          if (!v334)
            goto LABEL_612;
          while ((*(_BYTE *)(v334 + 3) & 1) != 0)
          {
            v334 = *(_QWORD *)(v334 + 24);
            if (!v334)
              goto LABEL_612;
          }
          v40 = 0;
          while (1)
          {
            v334 = *(_QWORD *)(v334 + 24);
            if (!v334)
              break;
            if ((*(_BYTE *)(v334 + 3) & 1) == 0)
              goto LABEL_877;
          }
          v338 = *v329;
          if (v338 && v338 != 69)
          {
            v346 = *(_QWORD *)(a2 + 24);
            v347 = a2;
            v348 = a2;
            i = (llvm::ConstantInt ******)v554;
          }
          else
          {
            if ((v332 & 0x80000000) != 0)
              v339 = (uint64_t *)(*(_QWORD *)(v32 + 24) + 16 * (v332 & 0x7FFFFFFF) + 8);
            else
              v339 = (uint64_t *)(*(_QWORD *)(v32 + 272) + 8 * v332);
            v350 = *v339;
            for (i = (llvm::ConstantInt ******)v554; (*(_BYTE *)(v350 + 3) & 1) != 0; v350 = *(_QWORD *)(v350 + 24))
              ;
            v351 = *(_QWORD *)(v350 + 8);
            if (**(_WORD **)(v351 + 16) && **(_WORD **)(v351 + 16) != 69)
            {
              v346 = *(_QWORD *)(a2 + 24);
            }
            else
            {
              v352 = *(_QWORD *)(v351 + 24);
              v346 = *(_QWORD *)(a2 + 24);
              if (v352 == v346)
              {
LABEL_612:
                v40 = 0;
                goto LABEL_877;
              }
            }
            v347 = v346 + 48;
            for (j = *(_QWORD *)(v346 + 56); j != v347; j = *(_QWORD *)(j + 8))
            {
              if (**(_WORD **)(j + 16) && **(_WORD **)(j + 16) != 69)
              {
                v347 = j;
                break;
              }
            }
            v348 = a2;
          }
          v354 = *i;
          v354[5] = (llvm::ConstantInt ****)v346;
          v354[6] = (llvm::ConstantInt ****)v347;
          v355 = *i;
          v582 = (8 * *((unsigned int *)a5 + 2)) | 1;
          LODWORD(v583) = 0;
          v356 = llvm::ConstantInt::get(***v355[1], v553, v15);
          v357 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t *, llvm::ValueHandleBase *))(*v355)[2])(v355, &v582, v356);
          v358 = (uint64_t *)*i;
          LODWORD(__src) = v332;
          v573 = 1;
          v582 = v357;
          v583 = v359;
          LODWORD(v584) = 1;
          sub_1C5546EF4(v358, (uint64_t *)&__src, (int *)&v582);
          v360 = *(_QWORD *)(v348 + 24);
          v361 = v348;
          v362 = v348;
          if ((*(_BYTE *)v348 & 4) == 0)
          {
            v361 = v348;
            if ((*(_WORD *)(v348 + 44) & 8) != 0)
            {
              v361 = v348;
              do
                v361 = *(_QWORD *)(v361 + 8);
              while ((*(_WORD *)(v361 + 44) & 8) != 0);
            }
          }
          goto LABEL_875;
        }
        v52 = *(_DWORD **)(v31 + 32);
        v53 = v52[17];
        if ((v53 & 0x80000000) != 0)
          v54 = (uint64_t *)(*(_QWORD *)(v32 + 24) + 16 * (v53 & 0x7FFFFFFF) + 8);
        else
          v54 = (uint64_t *)(*(_QWORD *)(v32 + 272) + 8 * v53);
        v151 = *v54;
        if (v151
          && ((*(_BYTE *)(v151 + 3) & 1) != 0 || (v151 = *(_QWORD *)(v151 + 24)) != 0 && (*(_BYTE *)(v151 + 3) & 1) != 0))
        {
          v152 = *(_QWORD *)(v151 + 8);
          if ((v53 & 0x80000000) == 0)
            goto LABEL_520;
        }
        else
        {
          v152 = 0;
          if ((v53 & 0x80000000) == 0)
            goto LABEL_520;
        }
        if ((v53 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v32 + 432))
        {
          v153 = *(_QWORD *)(*(_QWORD *)(v32 + 424) + 8 * (v53 & 0x7FFFFFFF));
          goto LABEL_521;
        }
LABEL_520:
        v153 = 0;
LABEL_521:
        v295 = v52[9];
        v296 = v52[1];
        v582 = v153;
        if ((sub_1C49A606C(v554, v152, &v582, &v580, a5, (a6 + 1), 0) & 1) != 0)
          goto LABEL_876;
        if ((v295 & 0x80000000) != 0)
          v297 = (uint64_t *)(*(_QWORD *)(v32 + 24) + 16 * (v295 & 0x7FFFFFFF) + 8);
        else
          v297 = (uint64_t *)(*(_QWORD *)(v32 + 272) + 8 * v295);
        v298 = *v297;
        if (v298
          && ((*(_BYTE *)(v298 + 3) & 1) != 0 || (v298 = *(_QWORD *)(v298 + 24)) != 0 && (*(_BYTE *)(v298 + 3) & 1) != 0))
        {
          v299 = *(_QWORD *)(v298 + 8);
          if ((v295 & 0x80000000) == 0)
            goto LABEL_743;
        }
        else
        {
          v299 = 0;
          if ((v295 & 0x80000000) == 0)
            goto LABEL_743;
        }
        if ((v295 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v32 + 432))
        {
          v300 = *(_QWORD *)(*(_QWORD *)(v32 + 424) + 8 * (v295 & 0x7FFFFFFF));
LABEL_744:
          v582 = v300;
          if ((sub_1C49A606C(v554, v299, &v582, &v580, &v576, (a6 + 1), 0) & 1) != 0)
            goto LABEL_876;
          v426 = *v554;
          *(_QWORD *)(v426 + 40) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(v426 + 48) = a2;
          if (v581 > 0x40)
          {
            v429 = ((unint64_t)v581 + 63) >> 6;
            v430 = (uint64_t *)v580;
            v431 = (uint64_t *)*a5;
            v432 = (uint64_t *)v580;
            v433 = v429;
            while (1)
            {
              v435 = *v432++;
              v434 = v435;
              v436 = *v431++;
              if ((v434 & ~v436) != 0)
                break;
              if (!--v433)
                goto LABEL_754;
            }
            v438 = (uint64_t *)v576;
            while (1)
            {
              v440 = *v430++;
              v439 = v440;
              v441 = *v438++;
              if ((v439 & ~v441) != 0)
                break;
              if (!--v429)
                goto LABEL_762;
            }
LABEL_748:
            if ((sub_1C49A5D68(v554, a2, (llvm::APInt *)&v580, v425) & 1) == 0)
            {
              v427 = *((unsigned int *)a5 + 2);
              if (v427 > 0x40)
              {
                v428 = operator new[]();
                memcpy((void *)v428, (const void *)*a5, ((unint64_t)(v427 + 63) >> 3) & 0x3FFFFFF8);
                v443 = (uint64_t *)v576;
                v444 = (unint64_t)(v427 + 63) >> 6;
                v445 = (_QWORD *)v428;
                do
                {
                  v446 = *v443++;
                  *v445++ &= v446;
                  --v444;
                }
                while (v444);
              }
              else
              {
                v428 = (unint64_t)v576 & *a5;
              }
              v447 = *((unsigned int *)a5 + 6);
              if (v447 >= 0x41)
              {
                v448 = (void *)operator new[]();
                memcpy(v448, *(const void **)v553, ((unint64_t)(v447 + 63) >> 3) & 0x3FFFFFF8);
                v449 = (uint64_t *)v578;
                v450 = (unint64_t)(v447 + 63) >> 6;
                v451 = v448;
                v452 = v450;
                do
                {
                  v453 = *v449++;
                  *v451++ &= v453;
                  --v452;
                }
                while (v452);
                v454 = (uint64_t *)v428;
                v455 = v448;
                do
                {
                  v456 = *v454++;
                  *v455++ |= v456;
                  --v450;
                }
                while (v450);
              }
              else
              {
                v448 = (void *)((unint64_t)v578 & *(_QWORD *)v553 | v428);
              }
              if (v427 >= 0x41 && v428)
                MEMORY[0x1CAA32F9C](v428, 0x1000C8000313F17);
              v457 = *((unsigned int *)a5 + 2);
              if (v457 > 0x40)
              {
                v458 = operator new[]();
                memcpy((void *)v458, (const void *)*a5, ((unint64_t)(v457 + 63) >> 3) & 0x3FFFFFF8);
                v459 = (uint64_t *)v578;
                v460 = (unint64_t)(v457 + 63) >> 6;
                v461 = (_QWORD *)v458;
                do
                {
                  v462 = *v459++;
                  *v461++ &= v462;
                  --v460;
                }
                while (v460);
              }
              else
              {
                v458 = (unint64_t)v578 & *a5;
              }
              v463 = *((unsigned int *)a5 + 6);
              if (v463 >= 0x41)
              {
                v464 = (void *)operator new[]();
                memcpy(v464, *(const void **)v553, ((unint64_t)(v463 + 63) >> 3) & 0x3FFFFFF8);
                v465 = (uint64_t *)v576;
                v466 = (unint64_t)(v463 + 63) >> 6;
                v467 = v464;
                v468 = v466;
                do
                {
                  v469 = *v465++;
                  *v467++ &= v469;
                  --v468;
                }
                while (v468);
                v470 = (uint64_t *)v458;
                v471 = v464;
                do
                {
                  v472 = *v470++;
                  *v471++ |= v472;
                  --v466;
                }
                while (v466);
              }
              else
              {
                v464 = (void *)((unint64_t)v576 & *(_QWORD *)v553 | v458);
              }
              if (v457 >= 0x41 && v458)
                MEMORY[0x1CAA32F9C](v458, 0x1000C8000313F17);
              if (*((_DWORD *)a5 + 2) >= 0x41u && *a5)
                MEMORY[0x1CAA32F9C](*a5, 0x1000C8000313F17);
              *a5 = v448;
              *((_DWORD *)a5 + 2) = v447;
              if (*((_DWORD *)a5 + 6) >= 0x41u && *(_QWORD *)v553)
                MEMORY[0x1CAA32F9C](*(_QWORD *)v553, 0x1000C8000313F17);
              a5[2] = v464;
              *((_DWORD *)a5 + 6) = v463;
              goto LABEL_587;
            }
            goto LABEL_876;
          }
          if ((v580 & ~*a5) != 0)
          {
            if ((v580 & ~(unint64_t)v576) != 0)
              goto LABEL_748;
LABEL_762:
            v442 = *v554;
            LODWORD(__src) = v296;
            v573 = 1;
            LODWORD(v582) = v53;
            LODWORD(v584) = 0;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v442 + 32))(v442, 19, &__src, 1, &v582, 1, 0);
            v362 = a2;
            v360 = *(_QWORD *)(a2 + 24);
            v361 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v361 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v361 = a2;
                do
                  v361 = *(_QWORD *)(v361 + 8);
                while ((*(_WORD *)(v361 + 44) & 8) != 0);
              }
            }
          }
          else
          {
LABEL_754:
            v437 = *v554;
            LODWORD(__src) = v296;
            v573 = 1;
            LODWORD(v582) = v295;
            LODWORD(v584) = 0;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v437 + 32))(v437, 19, &__src, 1, &v582, 1, 0);
            v362 = a2;
            v360 = *(_QWORD *)(a2 + 24);
            v361 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v361 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v361 = a2;
                do
                  v361 = *(_QWORD *)(v361 + 8);
                while ((*(_WORD *)(v361 + 44) & 8) != 0);
              }
            }
          }
LABEL_875:
          sub_1C487FE80(v360 + 40, v362, *(_QWORD *)(v361 + 8));
          goto LABEL_876;
        }
LABEL_743:
        v300 = 0;
        goto LABEL_744;
      }
      v68 = *(_DWORD **)(v31 + 32);
      v69 = v68[17];
      if ((v69 & 0x80000000) != 0)
        v70 = (uint64_t *)(*(_QWORD *)(v32 + 24) + 16 * (v69 & 0x7FFFFFFF) + 8);
      else
        v70 = (uint64_t *)(*(_QWORD *)(v32 + 272) + 8 * v69);
      v148 = *v70;
      if (v148
        && ((*(_BYTE *)(v148 + 3) & 1) != 0 || (v148 = *(_QWORD *)(v148 + 24)) != 0 && (*(_BYTE *)(v148 + 3) & 1) != 0))
      {
        v149 = *(_QWORD *)(v148 + 8);
        if ((v69 & 0x80000000) == 0)
          goto LABEL_507;
      }
      else
      {
        v149 = 0;
        if ((v69 & 0x80000000) == 0)
          goto LABEL_507;
      }
      if ((v69 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v32 + 432))
      {
        v150 = *(_QWORD *)(*(_QWORD *)(v32 + 424) + 8 * (v69 & 0x7FFFFFFF));
        goto LABEL_508;
      }
LABEL_507:
      v150 = 0;
LABEL_508:
      v288 = v68[9];
      v289 = v68[1];
      v290 = (a6 + 1);
      v582 = v150;
      if ((sub_1C49A606C(v554, v149, &v582, &v580, a5, v290, 0) & 1) != 0)
        goto LABEL_876;
      if ((v288 & 0x80000000) != 0)
        v291 = (uint64_t *)(*(_QWORD *)(v32 + 24) + 16 * (v288 & 0x7FFFFFFF) + 8);
      else
        v291 = (uint64_t *)(*(_QWORD *)(v32 + 272) + 8 * v288);
      v292 = *v291;
      if (v292
        && ((*(_BYTE *)(v292 + 3) & 1) != 0 || (v292 = *(_QWORD *)(v292 + 24)) != 0 && (*(_BYTE *)(v292 + 3) & 1) != 0))
      {
        v293 = *(_QWORD *)(v292 + 8);
        if ((v288 & 0x80000000) == 0)
          goto LABEL_672;
      }
      else
      {
        v293 = 0;
        if ((v288 & 0x80000000) == 0)
          goto LABEL_672;
      }
      if ((v288 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v32 + 432))
      {
        v294 = *(void **)(*(_QWORD *)(v32 + 424) + 8 * (v288 & 0x7FFFFFFF));
        goto LABEL_673;
      }
LABEL_672:
      v294 = 0;
LABEL_673:
      __src = v294;
      v372 = *((unsigned int *)a5 + 6);
      v563 = v372;
      if (v372 > 0x40)
      {
        v562 = (void *)operator new[]();
        memcpy(v562, *(const void **)v553, ((unint64_t)(v372 + 63) >> 3) & 0x3FFFFFF8);
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v562);
        v372 = v563;
        v375 = (unint64_t)v562;
        v563 = 0;
        if (v372 > 0x40)
        {
          v376 = 0;
          v377 = v580;
          do
          {
            *(_QWORD *)(v375 + v376) &= *(_QWORD *)(v377 + v376);
            v376 += 8;
          }
          while ((((unint64_t)(v372 + 63) >> 3) & 0x3FFFFFF8) != v376);
LABEL_681:
          LODWORD(v583) = v372;
          v582 = v375;
          v378 = sub_1C49A606C(v554, v293, &__src, &v582, &v576, v290, 0);
          if (v372 >= 0x41 && v375)
            MEMORY[0x1CAA32F9C](v375, 0x1000C8000313F17);
          if ((v378 & 1) != 0)
            goto LABEL_876;
          v380 = a2;
          v381 = *v554;
          *(_QWORD *)(v381 + 40) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(v381 + 48) = a2;
          v382 = v579;
          if (v579 > 0x40)
          {
            v384 = (((unint64_t)v579 + 63) >> 3) & 0x3FFFFFF8;
            v383 = operator new[]();
            memcpy((void *)v383, v578, v384);
            v385 = (uint64_t *)*a5;
            v386 = (unint64_t)(v382 + 63) >> 6;
            v387 = (_QWORD *)v383;
            do
            {
              v388 = *v385++;
              *v387++ |= v388;
              --v386;
            }
            while (v386);
            v380 = a2;
          }
          else
          {
            v383 = *a5 | (unint64_t)v578;
          }
          if (v581 > 0x40)
          {
            v390 = (uint64_t *)v580;
            v391 = (((unint64_t)v581 + 63) >> 6) - 1;
            v392 = (uint64_t *)v383;
            do
            {
              v394 = *v390++;
              v393 = v394;
              v395 = *v392++;
              v396 = v393 & ~v395;
              v389 = v396 == 0;
              v116 = v391-- != 0;
              v397 = v116;
            }
            while (!v396 && (v397 & 1) != 0);
          }
          else
          {
            v389 = (v580 & ~v383) == 0;
          }
          if (v382 >= 0x41 && v383)
          {
            MEMORY[0x1CAA32F9C](v383, 0x1000C8000313F17);
            v380 = a2;
          }
          if (v389)
          {
            v398 = *v554;
            LODWORD(__src) = v289;
            v573 = 1;
            LODWORD(v582) = v288;
            LODWORD(v584) = 0;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v398 + 32))(v398, 19, &__src, 1, &v582, 1, 0);
            v362 = a2;
            v360 = *(_QWORD *)(a2 + 24);
            v361 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v361 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v361 = a2;
                do
                  v361 = *(_QWORD *)(v361 + 8);
                while ((*(_WORD *)(v361 + 44) & 8) != 0);
              }
            }
          }
          else
          {
            v399 = *((unsigned int *)a5 + 6);
            if (v399 > 0x40)
            {
              v400 = operator new[]();
              memcpy((void *)v400, *(const void **)v553, ((unint64_t)(v399 + 63) >> 3) & 0x3FFFFFF8);
              v401 = (uint64_t *)v576;
              v402 = (unint64_t)(v399 + 63) >> 6;
              v403 = (_QWORD *)v400;
              do
              {
                v404 = *v401++;
                *v403++ |= v404;
                --v402;
              }
              while (v402);
              v380 = a2;
            }
            else
            {
              v400 = (unint64_t)v576 | *(_QWORD *)v553;
            }
            if (v581 > 0x40)
            {
              v406 = (uint64_t *)v580;
              v407 = (((unint64_t)v581 + 63) >> 6) - 1;
              v408 = (uint64_t *)v400;
              do
              {
                v410 = *v406++;
                v409 = v410;
                v411 = *v408++;
                v412 = v409 & ~v411;
                v405 = v412 == 0;
                v116 = v407-- != 0;
                v413 = v116;
              }
              while (!v412 && (v413 & 1) != 0);
            }
            else
            {
              v405 = (v580 & ~v400) == 0;
            }
            if (v399 >= 0x41 && v400)
            {
              MEMORY[0x1CAA32F9C](v400, 0x1000C8000313F17);
              v380 = a2;
            }
            if (!v405)
            {
              if ((sub_1C49A5D68(v554, v380, (llvm::APInt *)&v580, v379) & 1) == 0)
              {
                v415 = *((unsigned int *)a5 + 2);
                if (v415 > 0x40)
                {
                  v416 = (_QWORD *)*a5;
                  v417 = (uint64_t *)v576;
                  v418 = (unint64_t)(v415 + 63) >> 6;
                  do
                  {
                    v419 = *v417++;
                    *v416++ &= v419;
                    --v418;
                  }
                  while (v418);
                }
                else
                {
                  *a5 &= (unint64_t)v576;
                }
                v420 = *((unsigned int *)a5 + 6);
                if (v420 > 0x40)
                {
                  v421 = *(_QWORD **)v553;
                  v422 = (uint64_t *)v578;
                  v423 = (unint64_t)(v420 + 63) >> 6;
                  do
                  {
                    v424 = *v422++;
                    *v421++ |= v424;
                    --v423;
                  }
                  while (v423);
                }
                else
                {
                  *(_QWORD *)v553 |= (unint64_t)v578;
                }
                goto LABEL_587;
              }
LABEL_876:
              v40 = 1;
LABEL_877:
              if (v579 >= 0x41 && v578)
                MEMORY[0x1CAA32F9C](v578, 0x1000C8000313F17);
              if (v577 >= 0x41 && v576)
                MEMORY[0x1CAA32F9C](v576, 0x1000C8000313F17);
              goto LABEL_879;
            }
            v414 = *v554;
            LODWORD(__src) = v289;
            v573 = 1;
            LODWORD(v582) = v69;
            LODWORD(v584) = 0;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v414 + 32))(v414, 19, &__src, 1, &v582, 1, 0);
            v362 = a2;
            v360 = *(_QWORD *)(a2 + 24);
            v361 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v361 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v361 = a2;
                do
                  v361 = *(_QWORD *)(v361 + 8);
                while ((*(_WORD *)(v361 + 44) & 8) != 0);
              }
            }
          }
          goto LABEL_875;
        }
      }
      else
      {
        v373 = ~*(_QWORD *)v553;
        if ((_DWORD)v372)
          v374 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v372;
        else
          v374 = 0;
        v375 = v374 & v373;
        v562 = (void *)(v374 & v373);
        v563 = 0;
      }
      v375 &= v580;
      goto LABEL_681;
    }
    v71 = *(_DWORD **)(v31 + 32);
    v72 = v71[1];
    v73 = (const char *)v71[9];
    v74 = v71[17];
    v75 = sub_1C554C050(v71[17], v32);
    v551 = v73;
    if (!v76)
    {
LABEL_348:
      if ((v74 & 0x80000000) != 0)
        v244 = (uint64_t *)(*(_QWORD *)(v32 + 24) + 16 * (v74 & 0x7FFFFFFF) + 8);
      else
        v244 = (uint64_t *)(*(_QWORD *)(v32 + 272) + 8 * v74);
      v245 = *v244;
      if (v245)
      {
        if ((*(_BYTE *)(v245 + 3) & 1) != 0 || (v245 = *(_QWORD *)(v245 + 24)) != 0 && (*(_BYTE *)(v245 + 3) & 1) != 0)
          v246 = *(_QWORD *)(v245 + 8);
        else
          v246 = 0;
        v73 = v551;
        if ((v74 & 0x80000000) == 0)
          goto LABEL_801;
      }
      else
      {
        v246 = 0;
        if ((v74 & 0x80000000) == 0)
          goto LABEL_801;
      }
      if ((v74 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v32 + 432))
      {
        v247 = *(_QWORD *)(*(_QWORD *)(v32 + 424) + 8 * (v74 & 0x7FFFFFFF));
        goto LABEL_802;
      }
LABEL_801:
      v247 = 0;
LABEL_802:
      v582 = v247;
      v473 = (a6 + 1);
      if ((sub_1C49A606C(v554, v246, &v582, &v580, a5, v473, 0) & 1) != 0)
        goto LABEL_876;
      if ((v73 & 0x80000000) != 0)
        v474 = (uint64_t *)(*(_QWORD *)(v32 + 24) + 16 * (v73 & 0x7FFFFFFF) + 8);
      else
        v474 = (uint64_t *)(*(_QWORD *)(v32 + 272) + 8 * (_QWORD)v73);
      v475 = *v474;
      if (v475)
      {
        if ((*(_BYTE *)(v475 + 3) & 1) != 0 || (v475 = *(_QWORD *)(v475 + 24)) != 0 && (*(_BYTE *)(v475 + 3) & 1) != 0)
          v476 = *(_QWORD *)(v475 + 8);
        else
          v476 = 0;
        LODWORD(v73) = (_DWORD)v551;
        if ((v551 & 0x80000000) == 0)
          goto LABEL_821;
      }
      else
      {
        v476 = 0;
        if ((v73 & 0x80000000) == 0)
          goto LABEL_821;
      }
      if ((v73 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v32 + 432))
      {
        v477 = *(void **)(*(_QWORD *)(v32 + 424) + 8 * (v73 & 0x7FFFFFFF));
        goto LABEL_822;
      }
LABEL_821:
      v477 = 0;
LABEL_822:
      __src = v477;
      v478 = *((unsigned int *)a5 + 2);
      v565 = v478;
      if (v478 > 0x40)
      {
        v564 = (void *)operator new[]();
        memcpy(v564, (const void *)*a5, ((unint64_t)(v478 + 63) >> 3) & 0x3FFFFFF8);
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v564);
        v478 = v565;
        v481 = (unint64_t)v564;
        v565 = 0;
        if (v478 > 0x40)
        {
          v482 = 0;
          v483 = v580;
          do
          {
            *(_QWORD *)(v481 + v482) &= *(_QWORD *)(v483 + v482);
            v482 += 8;
          }
          while ((((unint64_t)(v478 + 63) >> 3) & 0x3FFFFFF8) != v482);
LABEL_830:
          LODWORD(v583) = v478;
          v582 = v481;
          v484 = sub_1C49A606C(v554, v476, &__src, &v582, &v576, v473, 0);
          if (v478 >= 0x41 && v481)
            MEMORY[0x1CAA32F9C](v481, 0x1000C8000313F17);
          if ((v484 & 1) != 0)
            goto LABEL_876;
          v486 = a2;
          v487 = *v554;
          *(_QWORD *)(v487 + 40) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(v487 + 48) = a2;
          v488 = v577;
          if (v577 > 0x40)
          {
            v490 = (((unint64_t)v577 + 63) >> 3) & 0x3FFFFFF8;
            v489 = operator new[]();
            memcpy((void *)v489, v576, v490);
            v491 = *(uint64_t **)v553;
            v492 = (unint64_t)(v488 + 63) >> 6;
            v493 = (_QWORD *)v489;
            do
            {
              v494 = *v491++;
              *v493++ |= v494;
              --v492;
            }
            while (v492);
            v486 = a2;
          }
          else
          {
            v489 = *(_QWORD *)v553 | (unint64_t)v576;
          }
          if (v581 > 0x40)
          {
            v496 = (uint64_t *)v580;
            v497 = (((unint64_t)v581 + 63) >> 6) - 1;
            v498 = (uint64_t *)v489;
            do
            {
              v500 = *v496++;
              v499 = v500;
              v501 = *v498++;
              v502 = v499 & ~v501;
              v495 = v502 == 0;
              v116 = v497-- != 0;
              v503 = v116;
            }
            while (!v502 && (v503 & 1) != 0);
          }
          else
          {
            v495 = (v580 & ~v489) == 0;
          }
          if (v488 >= 0x41 && v489)
          {
            MEMORY[0x1CAA32F9C](v489, 0x1000C8000313F17);
            v486 = a2;
          }
          if (v495)
          {
            v504 = *v554;
            LODWORD(__src) = v72;
            v573 = 1;
            LODWORD(v582) = (_DWORD)v551;
            LODWORD(v584) = 0;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v504 + 32))(v504, 19, &__src, 1, &v582, 1, 0);
            v362 = a2;
            v360 = *(_QWORD *)(a2 + 24);
            v361 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v361 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v361 = a2;
                do
                  v361 = *(_QWORD *)(v361 + 8);
                while ((*(_WORD *)(v361 + 44) & 8) != 0);
              }
            }
          }
          else
          {
            v505 = *((unsigned int *)a5 + 2);
            if (v505 > 0x40)
            {
              v506 = operator new[]();
              memcpy((void *)v506, (const void *)*a5, ((unint64_t)(v505 + 63) >> 3) & 0x3FFFFFF8);
              v507 = (uint64_t *)v578;
              v508 = (unint64_t)(v505 + 63) >> 6;
              v509 = (_QWORD *)v506;
              do
              {
                v510 = *v507++;
                *v509++ |= v510;
                --v508;
              }
              while (v508);
              v486 = a2;
            }
            else
            {
              v506 = (unint64_t)v578 | *a5;
            }
            if (v581 > 0x40)
            {
              v512 = (uint64_t *)v580;
              v513 = (((unint64_t)v581 + 63) >> 6) - 1;
              v514 = (uint64_t *)v506;
              do
              {
                v516 = *v512++;
                v515 = v516;
                v517 = *v514++;
                v518 = v515 & ~v517;
                v511 = v518 == 0;
                v116 = v513-- != 0;
                v519 = v116;
              }
              while (!v518 && (v519 & 1) != 0);
            }
            else
            {
              v511 = (v580 & ~v506) == 0;
            }
            if (v505 >= 0x41 && v506)
            {
              MEMORY[0x1CAA32F9C](v506, 0x1000C8000313F17);
              v486 = a2;
            }
            if (!v511)
            {
              if ((sub_1C49A5D68(v554, v486, (llvm::APInt *)&v580, v485) & 1) != 0)
                goto LABEL_876;
              v522 = *((unsigned int *)a5 + 6);
              if (v522 > 0x40)
              {
                v523 = *(_QWORD **)v553;
                v524 = (uint64_t *)v578;
                v525 = (unint64_t)(v522 + 63) >> 6;
                do
                {
                  v526 = *v524++;
                  *v523++ &= v526;
                  --v525;
                }
                while (v525);
              }
              else
              {
                *(_QWORD *)v553 &= (unint64_t)v578;
              }
              v527 = *((unsigned int *)a5 + 2);
              if (v527 > 0x40)
              {
                v528 = (_QWORD *)*a5;
                v529 = (uint64_t *)v576;
                v530 = (unint64_t)(v527 + 63) >> 6;
                do
                {
                  v531 = *v529++;
                  *v528++ |= v531;
                  --v530;
                }
                while (v530);
              }
              else
              {
                *a5 |= (unint64_t)v576;
              }
              goto LABEL_587;
            }
            v520 = *v554;
            LODWORD(__src) = v72;
            v573 = 1;
            LODWORD(v582) = v74;
            LODWORD(v584) = 0;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v520 + 32))(v520, 19, &__src, 1, &v582, 1, 0);
            v362 = a2;
            v360 = *(_QWORD *)(a2 + 24);
            v361 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v361 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v361 = a2;
                do
                  v361 = *(_QWORD *)(v361 + 8);
                while ((*(_WORD *)(v361 + 44) & 8) != 0);
              }
            }
          }
          goto LABEL_875;
        }
      }
      else
      {
        v479 = ~*a5;
        if ((_DWORD)v478)
          v480 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v478;
        else
          v480 = 0;
        v481 = v480 & v479;
        v564 = (void *)(v480 & v479);
        v565 = 0;
      }
      v481 &= v580;
      goto LABEL_830;
    }
    v77 = v75;
    sub_1C54EB4A0(v554[3], v73, (uint64_t)&v582);
    sub_1C49A9BF8((llvm::APInt *)&v582, v16, (uint64_t)&__src);
    if (v585 >= 0x41 && v584)
      MEMORY[0x1CAA32F9C](v584, 0x1000C8000313F17);
    if (v583 >= 0x41 && v582)
      MEMORY[0x1CAA32F9C](v582, 0x1000C8000313F17);
    v591 = v16;
    if (v16 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v590, v77, 0);
    }
    else
    {
      v78 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v16;
      if (!v16)
        v78 = 0;
      v590 = v78 & v77;
    }
    v79 = v573;
    if (v573 > 0x40)
    {
      v173 = (((unint64_t)v573 + 63) >> 3) & 0x3FFFFFF8;
      v81 = (void *)operator new[]();
      memcpy(v81, __src, v173);
      v80 = v580;
      v174 = (unint64_t)(v79 + 63) >> 6;
      v175 = (uint64_t *)v580;
      v176 = v81;
      do
      {
        v177 = *v175++;
        *v176++ &= v177;
        --v174;
      }
      while (v174);
    }
    else
    {
      v80 = v580;
      v81 = (void *)(v580 & (unint64_t)__src);
    }
    v550 = v72;
    v178 = v591;
    v569 = v591;
    if (v591 > 0x40)
    {
      v184 = (((unint64_t)v591 + 63) >> 3) & 0x3FFFFFF8;
      v568 = (void *)operator new[]();
      v179 = v590;
      memcpy(v568, (const void *)v590, v184);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v568);
      v183 = v569;
      v182 = (unint64_t)v568;
      v569 = 0;
      if (v183 > 0x40)
      {
        v209 = 0;
        v210 = v580;
        do
        {
          *(_QWORD *)(v182 + v209) &= *(_QWORD *)(v210 + v209);
          v209 += 8;
        }
        while ((((unint64_t)(v183 + 63) >> 3) & 0x3FFFFFF8) != v209);
        goto LABEL_256;
      }
      v80 = v580;
    }
    else
    {
      v179 = v590;
      v180 = ~v590;
      v181 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v591;
      if (!v591)
        v181 = 0;
      v182 = v181 & v180;
      v568 = (void *)(v181 & v180);
      v569 = 0;
      LODWORD(v183) = v591;
    }
    v182 &= v80;
LABEL_256:
    v548 = v74;
    if (v79 > 0x40)
      v211 = memcmp(v81, (const void *)v182, ((unint64_t)(v79 + 63) >> 3) & 0x3FFFFFF8) == 0;
    else
      v211 = v81 == (void *)v182;
    v212 = v211;
    if (v183 >= 0x41 && v182)
      MEMORY[0x1CAA32F9C](v182, 0x1000C8000313F17);
    if (v79 >= 0x41 && v81)
      MEMORY[0x1CAA32F9C](v81, 0x1000C8000313F17);
    v213 = a2;
    v72 = v550;
    if (v212)
    {
      v214 = *v554;
      *(_QWORD *)(v214 + 40) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(v214 + 48) = a2;
      v215 = *v554;
      LODWORD(v588) = v550;
      v589 = 1;
      LODWORD(v582) = (_DWORD)v551;
      LODWORD(v584) = 0;
      v216 = *(void (**)(void))(*(_QWORD *)v215 + 32);
      goto LABEL_270;
    }
    if ((v551 & 0x80000000) != 0)
      v219 = (uint64_t *)(*(_QWORD *)(v32 + 24) + 16 * (v551 & 0x7FFFFFFF) + 8);
    else
      v219 = (uint64_t *)(*(_QWORD *)(v32 + 272) + 8 * (_QWORD)v551);
    v235 = *v219;
    if (!v235)
      goto LABEL_341;
    while ((*(_BYTE *)(v235 + 3) & 1) != 0)
    {
      v235 = *(_QWORD *)(v235 + 24);
      if (!v235)
        goto LABEL_341;
    }
    while (1)
    {
      v235 = *(_QWORD *)(v235 + 24);
      if (!v235)
        break;
      if ((*(_BYTE *)(v235 + 3) & 1) == 0)
        goto LABEL_341;
    }
    v236 = (uint64_t *)((v551 & 0x80000000) != 0
                     ? *(_QWORD *)(v32 + 24) + 16 * (v551 & 0x7FFFFFFF) + 8
                     : *(_QWORD *)(v32 + 272) + 8 * (_QWORD)v551);
    v243 = *v236;
    if (!v243)
    {
LABEL_341:
      v218 = 1;
      goto LABEL_342;
    }
    if ((*(_BYTE *)(v243 + 3) & 1) != 0 || (v243 = *(_QWORD *)(v243 + 24)) != 0 && (*(_BYTE *)(v243 + 3) & 1) != 0)
    {
      v532 = *(_QWORD *)(v243 + 8);
      if (v532)
      {
        if (**(_WORD **)(v532 + 16) == 67 && *(_DWORD *)(v532 + 40) == 3)
        {
          v533 = *(_QWORD *)(v532 + 32);
          v534 = *(_DWORD *)(v533 + 36);
          v535 = sub_1C554C050(*(_DWORD *)(v533 + 68), v32);
          if (!v536)
          {
            v535 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v532 + 32) + 36), v32);
            if (!v537)
              goto LABEL_906;
            v534 = *(_DWORD *)(*(_QWORD *)(v532 + 32) + 68);
          }
          if (v535 == -1)
          {
            v567 = v178;
            if (v178 > 0x40)
            {
              v566 = (void *)operator new[]();
              memcpy(v566, (const void *)v179, ((unint64_t)(v178 + 63) >> 3) & 0x3FFFFFF8);
              llvm::APInt::flipAllBitsSlowCase((uint64_t)&v566);
              v541 = v567;
              v540 = v566;
            }
            else
            {
              v538 = ~v179;
              v539 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v178;
              if (!(_DWORD)v178)
                v539 = 0;
              v540 = (void *)(v539 & v538);
              v566 = (void *)(v539 & v538);
              v541 = v178;
            }
            v567 = 0;
            if (v575 > 0x40)
              v542 = memcmp(__s1, v540, (((unint64_t)v575 + 63) >> 3) & 0x3FFFFFF8) == 0;
            else
              v542 = __s1 == v540;
            v543 = v542;
            if (v541 >= 0x41 && v540)
              MEMORY[0x1CAA32F9C](v540, 0x1000C8000313F17);
            v218 = 1;
            v72 = v550;
            if (!v543)
            {
LABEL_342:
              if (v178 >= 0x41 && v179)
                MEMORY[0x1CAA32F9C](v179, 0x1000C8000313F17);
              v74 = v548;
              v73 = v551;
              if (v575 >= 0x41 && __s1)
                MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
              if (v573 >= 0x41 && __src)
                MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
              if (!v218)
                goto LABEL_876;
              goto LABEL_348;
            }
            v213 = a2;
            v544 = *v554;
            *(_QWORD *)(v544 + 40) = *(_QWORD *)(a2 + 24);
            *(_QWORD *)(v544 + 48) = a2;
            v545 = *v554;
            LODWORD(v588) = v550;
            v589 = 1;
            LODWORD(v582) = v534;
            LODWORD(v584) = 0;
            LODWORD(v585) = v548;
            v587 = 0;
            v216 = *(void (**)(void))(*(_QWORD *)v545 + 32);
LABEL_270:
            v216();
            v217 = v213;
            if ((*(_BYTE *)v213 & 4) == 0)
            {
              v217 = v213;
              if ((*(_WORD *)(v213 + 44) & 8) != 0)
              {
                v217 = v213;
                do
                  v217 = *(_QWORD *)(v217 + 8);
                while ((*(_WORD *)(v217 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(v213 + 24) + 40, v213, *(_QWORD *)(v217 + 8));
            v218 = 0;
            goto LABEL_342;
          }
        }
      }
    }
LABEL_906:
    v218 = 1;
    v72 = v550;
    goto LABEL_342;
  }
  sub_1C54EB4A0(v554[3], v34, (uint64_t)&v576);
  sub_1C49A9BF8((llvm::APInt *)&v576, v16, (uint64_t)&v582);
  if (*((_DWORD *)a5 + 2) >= 0x41u && *a5)
    MEMORY[0x1CAA32F9C](*a5, 0x1000C8000313F17);
  *a5 = v582;
  *((_DWORD *)a5 + 2) = v583;
  LODWORD(v583) = 0;
  if (*((_DWORD *)a5 + 6) >= 0x41u && *(_QWORD *)v553)
  {
    MEMORY[0x1CAA32F9C](*(_QWORD *)v553, 0x1000C8000313F17);
    v279 = v583;
    a5[2] = v584;
    *((_DWORD *)a5 + 6) = v585;
    LODWORD(v585) = 0;
    if (v279 >= 0x41 && v582)
      MEMORY[0x1CAA32F9C](v582, 0x1000C8000313F17);
  }
  else
  {
    a5[2] = v584;
    *((_DWORD *)a5 + 6) = v585;
    LODWORD(v585) = 0;
  }
  if (v579 >= 0x41 && v578)
    MEMORY[0x1CAA32F9C](v578, 0x1000C8000313F17);
  if (v577 >= 0x41 && v576)
    MEMORY[0x1CAA32F9C](v576, 0x1000C8000313F17);
  v40 = 0;
LABEL_879:
  if (v581 >= 0x41 && v580)
    MEMORY[0x1CAA32F9C](v580, 0x1000C8000313F17);
  return v40;
}

void sub_1C49A9BF8(llvm::APInt *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  void *v11;
  unint64_t v12;
  size_t v13;
  size_t v14;
  void *v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  void *__src;
  unsigned int v20;

  v6 = *((unsigned int *)this + 2);
  if (v6 < a2)
  {
    llvm::APInt::zext(this, a2, (uint64_t)&__src);
    sub_1C4912E54(&__src, v6, v20);
    v10 = v20;
    if (v20 > 0x40)
    {
      v16 = v20;
      v12 = (((unint64_t)v20 + 63) >> 3) & 0x3FFFFFF8;
      v11 = (void *)operator new[]();
      v13 = v12;
      v10 = v16;
      memcpy(v11, __src, v13);
    }
    else
    {
      v11 = __src;
    }
    llvm::APInt::zext((llvm::APInt *)((char *)this + 16), a2, (uint64_t)&v17);
    *(_DWORD *)(a3 + 8) = v10;
    *(_QWORD *)a3 = v11;
    *(_DWORD *)(a3 + 24) = v18;
    *(_QWORD *)(a3 + 16) = v17;
    v18 = 0;
    if (v20 >= 0x41 && __src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  }
  else
  {
    if (v6 > a2)
    {
      llvm::APInt::trunc(this, a2, (llvm::APInt *)&__src);
      llvm::APInt::trunc((llvm::APInt *)((char *)this + 16), a2, (llvm::APInt *)&v17);
      *(_DWORD *)(a3 + 8) = v20;
      *(_QWORD *)a3 = __src;
      *(_DWORD *)(a3 + 24) = v18;
      v9 = v17;
    }
    else
    {
      *(_DWORD *)(a3 + 8) = v6;
      if (v6 > 0x40)
      {
        v7 = (void *)operator new[]();
        memcpy(v7, *(const void **)this, ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v7 = *(void **)this;
      }
      *(_QWORD *)a3 = v7;
      v8 = *((unsigned int *)this + 6);
      *(_DWORD *)(a3 + 24) = v8;
      if (v8 > 0x40)
      {
        v14 = ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8;
        v15 = (void *)operator new[]();
        *(_QWORD *)(a3 + 16) = v15;
        memcpy(v15, *((const void **)this + 2), v14);
        return;
      }
      v9 = *((_QWORD *)this + 2);
    }
    *(_QWORD *)(a3 + 16) = v9;
  }
}

uint64_t sub_1C49A9DF8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  char v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  const llvm::MachineOperand *v35;
  _DWORD *v36;
  const llvm::MachineOperand *v37;
  int v38;
  uint64_t v39;
  _DWORD *v40;
  const char *v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  llvm::MachineFunction *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  int v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  unsigned __int8 v84;
  BOOL v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  int v97;
  char v98;
  _QWORD *v99;
  uint64_t v100;
  llvm::MachineFunction *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  unsigned __int8 v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  unsigned __int8 v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;

  v137 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*a1 + 8);
  v5 = *(_QWORD *)(v4 + 40);
  v6 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 8) + 16))(*(_QWORD *)(v4 + 8), *(_QWORD *)v4);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 168))(v6);
  v8 = v7;
  v9 = **(unsigned __int16 **)(a2 + 16);
  if ((v9 - 118) <= 8 && ((1 << (v9 - 118)) & 0x103) != 0)
  {
    v11 = *(_QWORD *)(a2 + 32);
    v12 = *(unsigned int *)(v11 + 36);
    if ((v12 & 0x80000000) != 0)
      v13 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
    else
      v13 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v12);
    v14 = *v13;
    if (!v14)
      return 0;
    if ((*(_BYTE *)(v14 + 3) & 1) == 0)
    {
      v14 = *(_QWORD *)(v14 + 24);
      if (!v14 || (*(_BYTE *)(v14 + 3) & 1) == 0)
        return 0;
    }
    v16 = *(_QWORD *)(v14 + 8);
    if (!v16)
      return 0;
    v17 = **(unsigned __int16 **)(v16 + 16);
    if ((v17 & 0xFFFE) != 0x34)
      return 0;
    v18 = *(_DWORD *)(v11 + 4);
    if (v18 < 0 && (v19 = v18 & 0x7FFFFFFF, v19 < *(_DWORD *)(v5 + 432)))
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 424) + 8 * v19);
    else
      v20 = 0;
    v134 = v20;
    v21 = *(_QWORD *)(v16 + 32);
    v22 = *(_DWORD *)(v21 + 36);
    if (v22 < 0 && (v23 = v22 & 0x7FFFFFFF, v23 < *(_DWORD *)(v5 + 432)))
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 424) + 8 * v23);
    else
      v24 = 0;
    v135 = v24;
    v25 = *(_DWORD *)(v21 + 68);
    if (v25 < 0 && (v26 = v25 & 0x7FFFFFFF, v26 < *(_DWORD *)(v5 + 432)))
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 424) + 8 * v26);
    else
      v27 = 0;
    v136 = v27;
    LODWORD(v126) = v17;
    v127 = &v134;
    v128 = 3;
    v129 = 0;
    v130 = 0;
    v28 = v17 - 45;
    v29 = *(_DWORD *)(v7 + 8 + 168 * v28);
    if (v29)
      v28 = v29 - 45;
    v30 = sub_1C553C530(v7 + 8 + 168 * v28, (uint64_t)&v126);
    if (v30 == 11)
    {
      if (v128)
      {
        v121 = 0;
        v122 = 1;
        while (1)
        {
          v123 = v127[v121];
          v131 = v126;
          v132 = v122 - 1;
          v133 = v123;
          v124 = sub_1C553DEB0(v8 + 35456, (uint64_t)&v131);
          if (v124)
            break;
          v121 = v122;
          v85 = v128 > v122++;
          if (!v85)
            goto LABEL_119;
        }
        if (v124 - 1 <= 9)
          goto LABEL_31;
      }
    }
    else if (v30)
    {
LABEL_31:
      v9 = **(unsigned __int16 **)(a2 + 16);
      goto LABEL_32;
    }
LABEL_119:
    v99 = (_QWORD *)*a1;
    v101 = sub_1C55437B8((_QWORD *)*a1, **(unsigned __int16 **)(v16 + 16));
    v102 = v100;
    v103 = (uint64_t *)v99[6];
    v104 = *(_QWORD *)(v99[5] + 40);
    *(_QWORD *)(v100 + 24) = v104;
    v105 = *(_QWORD *)(v104 + 32);
    v106 = *(unsigned int *)(v100 + 40);
    if ((_DWORD)v106)
    {
      v110 = *(_QWORD *)(v100 + 32);
      v111 = *(_QWORD *)(v105 + 40);
      v112 = 32 * v106;
      do
      {
        if (!*(_BYTE *)v110)
        {
          v113 = *(unsigned int *)(v110 + 4);
          if ((int)v113 >= 0)
            v114 = (uint64_t *)(*(_QWORD *)(v111 + 272) + 8 * v113);
          else
            v114 = (uint64_t *)(*(_QWORD *)(v111 + 24) + 16 * (v113 & 0x7FFFFFFF) + 8);
          v115 = *v114;
          if (*v114)
          {
            v116 = *(_QWORD *)(v115 + 16);
            *(_QWORD *)(v115 + 16) = v110;
            *(_QWORD *)(v110 + 16) = v116;
            if ((*(_BYTE *)(v110 + 3) & 1) != 0)
            {
              *(_QWORD *)(v110 + 24) = v115;
            }
            else
            {
              *(_QWORD *)(v110 + 24) = 0;
              v114 = (uint64_t *)(v116 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v110 + 16) = v110;
            *(_QWORD *)(v110 + 24) = 0;
          }
          *v114 = v110;
        }
        v110 += 32;
        v112 -= 32;
      }
      while (v112);
    }
    v107 = *(_QWORD *)(v105 + 728);
    if (v107)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v107 + 24))(v107, v100);
    v108 = *v103 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v102 = v108 | *(_QWORD *)v102 & 7;
    *(_QWORD *)(v102 + 8) = v103;
    *(_QWORD *)(v108 + 8) = v102;
    *v103 = *v103 & 7 | v102;
    v109 = v99[7];
    if (v109)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v109 + 24))(v109, v102);
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v102, v101, *(const llvm::MachineOperand **)(a2 + 32));
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v102, v101, (const llvm::MachineOperand *)(*(_QWORD *)(v16 + 32) + 32));
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v102, v101, (const llvm::MachineOperand *)(*(_QWORD *)(v16 + 32) + 64));
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v102, v101, (const llvm::MachineOperand *)(*(_QWORD *)(v16 + 32) + 96));
    *(_WORD *)(v102 + 44) = *(_WORD *)(v102 + 44) & 0xC | *(_WORD *)(v16 + 44) & 0xFFF3;
    v63 = *(_QWORD *)(a2 + 24);
    v64 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v64 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v64 = a2;
        do
          v64 = *(_QWORD *)(v64 + 8);
        while ((*(_WORD *)(v64 + 44) & 8) != 0);
      }
    }
    goto LABEL_61;
  }
LABEL_32:
  if ((v9 & 0xFFFE) != 0x34)
    return 0;
  v31 = *(_DWORD **)(a2 + 32);
  v32 = v31[9];
  if ((v32 & 0x80000000) != 0)
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v32 & 0x7FFFFFFF) + 8);
  else
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v32);
  v34 = *v33;
  if (v34 && ((*(_BYTE *)(v34 + 3) & 1) != 0 || (v34 = *(_QWORD *)(v34 + 24)) != 0 && (*(_BYTE *)(v34 + 3) & 1) != 0))
  {
    v86 = *(_QWORD *)(v34 + 8);
    v35 = (const llvm::MachineOperand *)(v31 + 8);
    v36 = v31 + 16;
    if (v86 && (**(unsigned __int16 **)(v86 + 16) | 8) == 0x7E)
    {
      v87 = v31[1];
      if (v87 < 0 && (v88 = v87 & 0x7FFFFFFF, v88 < *(_DWORD *)(v5 + 432)))
        v89 = *(_QWORD *)(*(_QWORD *)(v5 + 424) + 8 * v88);
      else
        v89 = 0;
      v134 = v89;
      v90 = *(_DWORD *)(*(_QWORD *)(v86 + 32) + 36);
      if (v90 < 0 && (v91 = v90 & 0x7FFFFFFF, v91 < *(_DWORD *)(v5 + 432)))
        v92 = *(_QWORD *)(*(_QWORD *)(v5 + 424) + 8 * v91);
      else
        v92 = 0;
      v135 = v92;
      v93 = v31[17];
      if (v93 < 0 && (v94 = v93 & 0x7FFFFFFF, v94 < *(_DWORD *)(v5 + 432)))
        v95 = *(_QWORD *)(*(_QWORD *)(v5 + 424) + 8 * v94);
      else
        v95 = 0;
      v136 = v95;
      LODWORD(v126) = v9;
      v127 = &v134;
      v128 = 3;
      v129 = 0;
      v130 = 0;
      v96 = v9 - 45;
      v97 = *(_DWORD *)(v8 + 8 + 168 * v96);
      if (v97)
        v96 = v97 - 45;
      v98 = sub_1C553C530(v8 + 8 + 168 * v96, (uint64_t)&v126);
      if (v98 == 11)
      {
        if (!v128)
          goto LABEL_117;
        v117 = 0;
        v118 = 1;
        while (1)
        {
          v119 = v127[v117];
          v131 = v126;
          v132 = v118 - 1;
          v133 = v119;
          v120 = sub_1C553DEB0(v8 + 35456, (uint64_t)&v131);
          if (v120)
            break;
          v117 = v118;
          v85 = v128 > v118++;
          if (!v85)
            goto LABEL_117;
        }
        if (v120 - 1 > 9)
          goto LABEL_117;
      }
      else if (!v98)
      {
LABEL_117:
        v37 = (const llvm::MachineOperand *)(*(_QWORD *)(v86 + 32) + 32);
        goto LABEL_39;
      }
    }
  }
  else
  {
    v35 = (const llvm::MachineOperand *)(v31 + 8);
    v36 = v31 + 16;
  }
  v37 = v35;
LABEL_39:
  v38 = v31[17];
  if ((v38 & 0x80000000) == 0 || (v39 = v38 & 0x7FFFFFFF, v39 >= *(_DWORD *)(v5 + 432)))
  {
    v125 = 0;
    goto LABEL_51;
  }
  v125 = *(_QWORD *)(*(_QWORD *)(v5 + 424) + 8 * v39);
  v40 = v36;
  if ((v125 & 1) == 0)
    goto LABEL_52;
  v42 = sub_1C4825F50(&v125);
  if ((_DWORD)v41 == 1)
  v40 = v36;
  if (v42 < 0x11)
    goto LABEL_52;
  v43 = sub_1C554C050(v31[17], v5);
  v40 = v36;
  if (!v44)
    goto LABEL_52;
  v45 = v43;
  if (v43 >> 16)
  {
LABEL_51:
    v40 = v36;
    goto LABEL_52;
  }
  v46 = **(unsigned __int16 **)(a2 + 16);
  v47 = *(_QWORD *)(a2 + 32);
  v48 = *(_DWORD *)(v47 + 4);
  if (v48 < 0 && (v49 = v48 & 0x7FFFFFFF, v49 < *(_DWORD *)(v5 + 432)))
    v50 = *(_QWORD *)(*(_QWORD *)(v5 + 424) + 8 * v49);
  else
    v50 = 0;
  v134 = v50;
  v72 = *(_DWORD *)(v47 + 36);
  if (v72 < 0 && (v73 = v72 & 0x7FFFFFFF, v73 < *(_DWORD *)(v5 + 432)))
    v74 = *(_QWORD *)(*(_QWORD *)(v5 + 424) + 8 * v73);
  else
    v74 = 0;
  v135 = v74;
  v136 = 129;
  LODWORD(v126) = v46;
  v127 = &v134;
  v128 = 3;
  v129 = 0;
  v130 = 0;
  v75 = v46 - 45;
  v76 = *(_DWORD *)(v8 + 8 + 168 * v75);
  if (v76)
    v75 = v76 - 45;
  v77 = sub_1C553C530(v8 + 8 + 168 * v75, (uint64_t)&v126);
  if (v77 == 11)
  {
    if (!v128)
      goto LABEL_84;
    v80 = 0;
    v81 = v8 + 35456;
    v82 = 1;
    while (1)
    {
      v83 = v127[v80];
      v131 = v126;
      v132 = v82 - 1;
      v133 = v83;
      v84 = sub_1C553DEB0(v81, (uint64_t)&v131);
      if (v84)
        break;
      v80 = v82;
      v85 = v128 > v82++;
      if (!v85)
        goto LABEL_84;
    }
    if (v84 - 1 >= 0xA)
      goto LABEL_84;
    goto LABEL_51;
  }
  v40 = v36;
  if (!v77)
  {
LABEL_84:
    v78 = *a1;
    v126 = 129;
    LODWORD(v127) = 0;
    sub_1C5544694(v78, &v126, v45);
    v40 = *(_DWORD **)(v79 + 32);
  }
LABEL_52:
  if (v35 == v37 && v36 == v40)
    return 0;
  v51 = (_QWORD *)*a1;
  v53 = sub_1C55437B8((_QWORD *)*a1, **(unsigned __int16 **)(a2 + 16));
  v54 = v52;
  v55 = (uint64_t *)v51[6];
  v56 = *(_QWORD *)(v51[5] + 40);
  *(_QWORD *)(v52 + 24) = v56;
  v57 = *(_QWORD *)(v56 + 32);
  v58 = *(unsigned int *)(v52 + 40);
  if ((_DWORD)v58)
  {
    v65 = *(_QWORD *)(v52 + 32);
    v66 = *(_QWORD *)(v57 + 40);
    v67 = 32 * v58;
    do
    {
      if (!*(_BYTE *)v65)
      {
        v68 = *(unsigned int *)(v65 + 4);
        if ((int)v68 >= 0)
          v69 = (uint64_t *)(*(_QWORD *)(v66 + 272) + 8 * v68);
        else
          v69 = (uint64_t *)(*(_QWORD *)(v66 + 24) + 16 * (v68 & 0x7FFFFFFF) + 8);
        v70 = *v69;
        if (*v69)
        {
          v71 = *(_QWORD *)(v70 + 16);
          *(_QWORD *)(v70 + 16) = v65;
          *(_QWORD *)(v65 + 16) = v71;
          if ((*(_BYTE *)(v65 + 3) & 1) != 0)
          {
            *(_QWORD *)(v65 + 24) = v70;
          }
          else
          {
            *(_QWORD *)(v65 + 24) = 0;
            v69 = (uint64_t *)(v71 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v65 + 16) = v65;
          *(_QWORD *)(v65 + 24) = 0;
        }
        *v69 = v65;
      }
      v65 += 32;
      v67 -= 32;
    }
    while (v67);
  }
  v59 = *(_QWORD *)(v57 + 728);
  if (v59)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v59 + 24))(v59, v52);
  v60 = *v55 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v54 = v60 | *(_QWORD *)v54 & 7;
  *(_QWORD *)(v54 + 8) = v55;
  *(_QWORD *)(v60 + 8) = v54;
  *v55 = *v55 & 7 | v54;
  v61 = v51[7];
  if (v61)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 24))(v61, v54);
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v53, *(const llvm::MachineOperand **)(a2 + 32));
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v53, v37);
  v62 = v40[1];
  v127 = 0;
  v128 = 0;
  LODWORD(v126) = 0;
  HIDWORD(v126) = v62;
  v129 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v53, (const llvm::MachineOperand *)&v126);
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v53, (const llvm::MachineOperand *)(*(_QWORD *)(a2 + 32) + 96));
  *(_WORD *)(v54 + 44) = *(_WORD *)(v54 + 44) & 0xC | *(_WORD *)(a2 + 44) & 0xFFF3;
  v63 = *(_QWORD *)(a2 + 24);
  v64 = a2;
  if ((*(_BYTE *)a2 & 4) == 0)
  {
    v64 = a2;
    if ((*(_WORD *)(a2 + 44) & 8) != 0)
    {
      v64 = a2;
      do
        v64 = *(_QWORD *)(v64 + 8);
      while ((*(_WORD *)(v64 + 44) & 8) != 0);
    }
  }
LABEL_61:
  sub_1C487FE80(v63 + 40, a2, *(_QWORD *)(v64 + 8));
  return 1;
}

uint64_t sub_1C49AA7A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  const char *v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint8x8_t v31;
  __int32 v32;
  int8x8_t *v33;
  unint64_t v34;
  int8x8_t v35;
  uint8x8_t v36;
  uint8x8_t v37;
  unint64_t v38;
  int v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  size_t v44;
  void *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  int v60;
  int64_t v61;
  unint64_t v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  unsigned int v68;
  uint64_t v69;
  llvm::MachineFunction *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int8x8_t *v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  _DWORD *v91;
  int8x8_t v92;
  void *v94;
  unsigned int v95;
  void *v96;
  unsigned int v97;
  void *__src;
  unsigned int v99;
  unint64_t v100;
  int8x8_t *v101;
  uint64_t v102;
  _DWORD *v103;
  unsigned int v104;
  void *v105;
  __int128 v106;
  _QWORD v107[4];

  v107[2] = *MEMORY[0x1E0C80C00];
  if (**(_WORD **)(a2 + 16) != 65)
    return 0;
  v2 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(v2 + 32) || *(_BYTE *)(v2 + 64))
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 40);
  v4 = *(unsigned int *)(v2 + 36);
  v5 = (uint64_t *)((v4 & 0x80000000) != 0
                 ? *(_QWORD *)(v3 + 24) + 16 * (v4 & 0x7FFFFFFF) + 8
                 : *(_QWORD *)(v3 + 272) + 8 * v4);
  v6 = *v5;
  if (v6 && ((*(_BYTE *)(v6 + 3) & 1) != 0 || (v6 = *(_QWORD *)(v6 + 24)) != 0 && (*(_BYTE *)(v6 + 3) & 1) != 0))
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  v8 = *(unsigned int *)(v2 + 68);
  v9 = (uint64_t *)((v8 & 0x80000000) != 0
                 ? *(_QWORD *)(v3 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8
                 : *(_QWORD *)(v3 + 272) + 8 * v8);
  v10 = *v9;
  if (!v10)
    return 0;
  if ((*(_BYTE *)(v10 + 3) & 1) == 0)
  {
    v10 = *(_QWORD *)(v10 + 24);
    if (!v10 || (*(_BYTE *)(v10 + 3) & 1) == 0)
      return 0;
  }
  result = 0;
  if (!v7)
    return result;
  v13 = *(_QWORD *)(v10 + 8);
  if (!v13)
    return result;
  if (**(unsigned __int16 **)(v13 + 16) - 127 <= 1)
  {
    v14 = **(unsigned __int16 **)(v7 + 16);
    v15 = v14 == 120;
    if (v14 == 120)
      v16 = v7;
    else
      v16 = v13;
    if (v15)
      v7 = v13;
    v13 = v16;
  }
  if (**(unsigned __int16 **)(v7 + 16) - 127 > 1 || **(_WORD **)(v13 + 16) != 120)
    return 0;
  v17 = *(_DWORD *)(v2 + 4);
  if (v17 < 0 && (v18 = v17 & 0x7FFFFFFF, v18 < *(_DWORD *)(v3 + 432)))
    v19 = *(_QWORD *)(*(_QWORD *)(v3 + 424) + 8 * v18);
  else
    v19 = 0;
  v100 = v19;
  v105 = v107;
  v106 = xmmword_1C6612EE0;
  v21 = sub_1C4825F50(&v100);
  if ((_DWORD)v20 == 1)
  v22 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v13 + 32) + 4), v3);
  v99 = v21;
  if (v21 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__src, v22, 0);
  }
  else
  {
    v23 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v21;
    if (!v21)
      v23 = 0;
    __src = (void *)(v23 & v22);
  }
  llvm::APInt::toString((uint64_t)&__src, &v105, 0x10u, 0, 0);
  v24 = 0;
  if (**(_WORD **)(v7 + 16) != 127)
  {
LABEL_83:
    sub_1C54EB4A0(a1[3], (const char *)*(unsigned int *)(*(_QWORD *)(v7 + 32) + 4), (uint64_t)&v101);
    v46 = v102;
    v91 = v103;
    v92 = (int8x8_t)v101;
    v47 = v104;
    LODWORD(v102) = v46;
    if (v46 > 0x40)
    {
      v80 = (int8x8_t *)operator new[]();
      v101 = v80;
      memcpy(v80, *(const void **)&v92, ((unint64_t)(v46 + 63) >> 3) & 0x3FFFFFF8);
      llvm::APInt::tcShiftRight((llvm::APInt *)v80, (unint64_t *)((unint64_t)(v46 + 63) >> 6), v24);
      v81 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v101);
      sub_1C4912E54(&__src, 0, v81);
      MEMORY[0x1CAA32F9C](v80, 0x1000C8000313F17);
    }
    else
    {
      v48 = __clz(__rbit64(~((unint64_t)v101 >> v24)));
      if ((_DWORD)v46 == v24)
        v49 = 0;
      else
        v49 = v48;
      sub_1C4912E54(&__src, 0, v49);
    }
    v28 = sub_1C49AB31C((llvm::APInt *)&__src);
    if (!(_DWORD)v28)
      goto LABEL_141;
    LODWORD(v102) = v99;
    if (v99 > 0x40)
    {
      v101 = (int8x8_t *)operator new[]();
      memcpy(v101, __src, (((unint64_t)v102 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v101 = (int8x8_t *)__src;
    }
    sub_1C4888094((uint64_t)&v101, v24);
    llvm::APInt::toString((uint64_t)&v101, &v105, 0x10u, 0, 0);
    if (v102 >= 0x41 && v101)
      MEMORY[0x1CAA32F9C](v101, 0x1000C8000313F17);
    v97 = v46;
    if (v46 > 0x40)
    {
      v96 = (void *)operator new[]();
      memcpy(v96, *(const void **)&v92, ((unint64_t)(v46 + 63) >> 3) & 0x3FFFFFF8);
      llvm::APInt::tcShiftRight((llvm::APInt *)v96, (unint64_t *)((unint64_t)(v46 + 63) >> 6), v24);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v96);
      v53 = v97;
      v52 = (unint64_t)v96;
    }
    else
    {
      if ((_DWORD)v46 == v24)
        v50 = -1;
      else
        v50 = ~(*(_QWORD *)&v92 >> v24);
      v51 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v46;
      if (!(_DWORD)v46)
        v51 = 0;
      v52 = v51 & v50;
      v96 = (void *)(v51 & v50);
      v53 = v46;
    }
    v97 = 0;
    if (v99 > 0x40)
    {
      v54 = __src;
      v55 = ((unint64_t)v99 + 63) >> 6;
      v56 = (uint64_t *)v52;
      do
      {
        v57 = *v56++;
        *v54++ &= v57;
        --v55;
      }
      while (v55);
    }
    else
    {
      __src = (void *)((unint64_t)__src & v52);
    }
    if (v53 >= 0x41 && v52)
      MEMORY[0x1CAA32F9C](v52, 0x1000C8000313F17);
    v58 = v99;
    if (v99 > 0x40)
    {
      v60 = 0;
      v61 = ((unint64_t)v99 + 63) >> 6;
      do
      {
        if (v61-- < 1)
          break;
        v63 = *((_QWORD *)__src + v61);
        v60 += __clz(v63);
      }
      while (!v63);
      v64 = v99 | 0xFFFFFFC0;
      if ((v99 & 0x3F) == 0)
        v64 = 0;
      v59 = v60 + v64;
      if (v99 != v60 + v64)
      {
        v95 = v99;
        llvm::APInt::initSlowCase((llvm::APInt *)&v94, 0, 0);
        goto LABEL_120;
      }
    }
    else
    {
      v59 = v99 + __clz((unint64_t)__src) - 64;
      if (v99 != v59)
      {
        v95 = v99;
        v94 = 0;
LABEL_120:
        v66 = v58 - v59;
        sub_1C4912E54(&v94, 0, v58 - v59);
        LODWORD(v102) = v95;
        if (v95 > 0x40)
        {
          v101 = (int8x8_t *)operator new[]();
          memcpy(v101, v94, (((unint64_t)v102 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v101 = (int8x8_t *)v94;
        }
        sub_1C4888094((uint64_t)&v101, v24);
        if (v99 >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        __src = v101;
        v99 = v102;
        LODWORD(v102) = 0;
        if (v95 >= 0x41 && v94)
          MEMORY[0x1CAA32F9C](v94, 0x1000C8000313F17);
        llvm::APInt::toString((uint64_t)&__src, &v105, 0x10u, 0, 0);
        v67 = (_QWORD *)*a1;
        if (**(_WORD **)(v7 + 16) == 128)
          v68 = 52;
        else
          v68 = 53;
        v70 = sub_1C55437B8(v67, v68);
        v71 = v69;
        v72 = (uint64_t *)v67[6];
        v73 = *(_QWORD *)(v67[5] + 40);
        *(_QWORD *)(v69 + 24) = v73;
        v74 = *(_QWORD *)(v73 + 32);
        v75 = *(unsigned int *)(v69 + 40);
        if ((_DWORD)v75)
        {
          v82 = *(_QWORD *)(v69 + 32);
          v83 = *(_QWORD *)(v74 + 40);
          v84 = 32 * v75;
          do
          {
            if (!*(_BYTE *)v82)
            {
              v85 = *(unsigned int *)(v82 + 4);
              if ((int)v85 >= 0)
                v86 = (uint64_t *)(*(_QWORD *)(v83 + 272) + 8 * v85);
              else
                v86 = (uint64_t *)(*(_QWORD *)(v83 + 24) + 16 * (v85 & 0x7FFFFFFF) + 8);
              v87 = *v86;
              if (*v86)
              {
                v88 = *(_QWORD *)(v87 + 16);
                *(_QWORD *)(v87 + 16) = v82;
                *(_QWORD *)(v82 + 16) = v88;
                if ((*(_BYTE *)(v82 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v82 + 24) = v87;
                }
                else
                {
                  *(_QWORD *)(v82 + 24) = 0;
                  v86 = (uint64_t *)(v88 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v82 + 16) = v82;
                *(_QWORD *)(v82 + 24) = 0;
              }
              *v86 = v82;
            }
            v82 += 32;
            v84 -= 32;
          }
          while (v84);
        }
        v76 = *(_QWORD *)(v74 + 728);
        if (v76)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v76 + 24))(v76, v69);
        v77 = *v72 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v71 = v77 | *(_QWORD *)v71 & 7;
        *(_QWORD *)(v71 + 8) = v72;
        *(_QWORD *)(v77 + 8) = v71;
        *v72 = *v72 & 7 | v71;
        v78 = v67[7];
        if (v78)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v78 + 24))(v78, v71);
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v71, v70, *(const llvm::MachineOperand **)(a2 + 32));
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v71, v70, (const llvm::MachineOperand *)(*(_QWORD *)(v7 + 32) + 32));
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v71, v70, (const llvm::MachineOperand *)(*(_QWORD *)(v7 + 32) + 64));
        LODWORD(v101) = 1;
        v102 = 0;
        v103 = (_DWORD *)v66;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v71, v70, (const llvm::MachineOperand *)&v101);
        *(_WORD *)(v71 + 44) = *(_WORD *)(v71 + 44) & 0xC | *(_WORD *)(v7 + 44) & 0xFFF3;
        goto LABEL_138;
      }
    }
    v65 = *a1;
    LODWORD(v101) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
    LODWORD(v102) = 1;
    sub_1C5544694(v65, (unint64_t *)&v101, 0);
LABEL_138:
    v79 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v79 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v79 = a2;
        do
          v79 = *(_QWORD *)(v79 + 8);
        while ((*(_WORD *)(v79 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v79 + 8));
LABEL_141:
    if (v47 >= 0x41 && v91)
      MEMORY[0x1CAA32F9C](v91, 0x1000C8000313F17);
    if (v46 < 0x41)
      goto LABEL_143;
    goto LABEL_166;
  }
  v25 = *(unsigned int *)(*(_QWORD *)(v7 + 32) + 68);
  if ((v25 & 0x80000000) != 0)
    v26 = (uint64_t *)(*(_QWORD *)(v3 + 24) + 16 * (v25 & 0x7FFFFFFF) + 8);
  else
    v26 = (uint64_t *)(*(_QWORD *)(v3 + 272) + 8 * v25);
  v27 = *v26;
  if (!v27
    || (*(_BYTE *)(v27 + 3) & 1) == 0 && ((v27 = *(_QWORD *)(v27 + 24)) == 0 || (*(_BYTE *)(v27 + 3) & 1) == 0)
    || (v29 = *(_QWORD *)(v27 + 8)) == 0)
  {
LABEL_48:
    v28 = 0;
    goto LABEL_143;
  }
  sub_1C54EB4A0(a1[3], (const char *)*(unsigned int *)(*(_QWORD *)(v29 + 32) + 4), (uint64_t)&v101);
  v30 = v103;
  v89 = v104;
  v90 = v102;
  v92 = (int8x8_t)v101;
  if (v102 > 0x40)
  {
    v32 = 0;
    v33 = v101;
    v34 = ((unint64_t)v102 + 63) >> 6;
    do
    {
      v35 = *v33++;
      v36 = (uint8x8_t)vcnt_s8(v35);
      v36.i16[0] = vaddlv_u8(v36);
      v32 += v36.i32[0];
      --v34;
    }
    while (v34);
  }
  else
  {
    v31 = (uint8x8_t)vcnt_s8((int8x8_t)v101);
    v31.i16[0] = vaddlv_u8(v31);
    v32 = v31.i32[0];
  }
  if (v104 >= 0x41)
  {
    v38 = 0;
    v39 = 0;
    do
    {
      v40 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v103[v38 / 4]);
      v40.i16[0] = vaddlv_u8(v40);
      v39 += v40.i32[0];
      v38 += 8;
    }
    while (((((unint64_t)v104 + 63) >> 3) & 0x3FFFFFF8) != v38);
    if (v39 + v32 != (_DWORD)v102)
    {
      v43 = 0;
      v24 = 0;
      goto LABEL_75;
    }
    v24 = *v103;
LABEL_66:
    v41 = v99;
    if (v99 > 0x40)
    {
      v44 = (((unint64_t)v99 + 63) >> 3) & 0x3FFFFFF8;
      v42 = operator new[]();
      v45 = __src;
      memcpy((void *)v42, __src, v44);
      llvm::APInt::tcShiftRight((llvm::APInt *)v42, (unint64_t *)((unint64_t)(v41 + 63) >> 6), v24);
      if (v99 >= 0x41 && v45)
        MEMORY[0x1CAA32F9C](v45, 0x1000C8000313F17);
    }
    else if (v99 == v24)
    {
      v42 = 0;
    }
    else
    {
      v42 = (unint64_t)__src >> v24;
    }
    __src = (void *)v42;
    v99 = v41;
    v43 = 1;
LABEL_75:
    if (v89 >= 0x41 && v30)
      MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
    if (v90 >= 0x41 && *(_QWORD *)&v92)
    {
      MEMORY[0x1CAA32F9C](*(_QWORD *)&v92, 0x1000C8000313F17);
      if ((v43 & 1) != 0)
        goto LABEL_83;
    }
    else if (v43)
    {
      goto LABEL_83;
    }
    goto LABEL_48;
  }
  v37 = (uint8x8_t)vcnt_s8((int8x8_t)v103);
  v37.i16[0] = vaddlv_u8(v37);
  v24 = v103;
  if (v32 + v37.i32[0] == (_DWORD)v102)
    goto LABEL_66;
  v28 = 0;
  if (v102 >= 0x41)
  {
LABEL_166:
    if (v92)
      MEMORY[0x1CAA32F9C](*(_QWORD *)&v92, 0x1000C8000313F17);
  }
LABEL_143:
  if (v99 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  if (v105 != v107)
    free(v105);
  return v28;
}

uint64_t sub_1C49AB31C(llvm::APInt *this)
{
  unsigned int v2;
  uint64_t result;

  v2 = *((_DWORD *)this + 2);
  if (v2 <= 0x40)
    return ((*(_QWORD *)this + 1) & *(_QWORD *)this) == 0 && *(_QWORD *)this != 0;
  result = llvm::APInt::countTrailingOnesSlowCase(this);
  if ((_DWORD)result)
    return llvm::APInt::countLeadingZerosSlowCase(this) + (_DWORD)result == v2;
  return result;
}

uint64_t sub_1C49AB388(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  const llvm::APFloat *v44;
  llvm::ConstantFP *v45;
  uint64_t v46;
  llvm::APFloatBase *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  unsigned int v72;
  const char *v73;
  unsigned int v74;
  unint64_t v75;
  const llvm::APFloat *v76;
  uint64_t v77;
  llvm::APFloatBase *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  _DWORD *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  const char *v109;
  uint64_t *v110;
  _DWORD *v111;
  unsigned int v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  int v116;
  const char *v117;
  unsigned int v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  unsigned int v127;
  unint64_t v128;
  BOOL v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _DWORD *v133;
  _DWORD *k;
  uint64_t v135;
  uint64_t v136;
  _DWORD *v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  _DWORD *v155;
  int v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t *v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  const llvm::APFloat *v193;
  llvm::ConstantFP *v194;
  uint64_t v195;
  llvm::APFloatBase *v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  const llvm::APFloat *v203;
  llvm::APFloatBase *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  int v223;
  uint64_t *v224;
  uint64_t v225;
  _DWORD *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t v232;
  _DWORD *v233;
  int v234;
  unsigned int v235;
  unsigned int v236;
  char v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  _DWORD *v244;
  int v245;
  int v246;
  unint64_t v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t *v253;
  _DWORD *v254;
  int v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  _DWORD *v259;
  int v260;
  int v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  void *v267;
  uint64_t v268;
  uint64_t v269;
  void *v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char v277;
  uint64_t v278;
  uint64_t v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t *v286;
  uint64_t *v287;
  const char *v288;
  uint64_t v289;
  const char *v290;
  uint64_t v291;
  uint64_t v292;
  unsigned int v293;
  void *v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  char v299;
  uint64_t v300;
  uint64_t v301;
  const char *v302;
  unsigned int v303;
  const char *v304;
  unsigned int v305;
  uint64_t v306;
  char v307;
  _DWORD *v308;
  uint64_t v309;
  void *v310;
  uint64_t *v311;
  void *v312;
  void *v313;
  void *v314;
  void *v315;
  uint64_t *v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  void *v320;
  uint64_t *v321;
  void *v322;
  void *v323;
  uint64_t v324;
  void *v325;
  const llvm::APFloat *v326;
  llvm::APFloatBase *v327;
  uint64_t v328;
  uint64_t v329;
  int v330;
  uint64_t v331;
  char v332;
  int v333;
  unsigned int v334;
  _DWORD *v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t *v343;
  uint64_t v344;
  uint64_t v345;
  char v346;
  int v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  int v351;
  void (*v352)(void);
  int v353;
  int v354;
  int v355;
  uint64_t v356;
  _QWORD **v357;
  uint64_t v358;
  unsigned __int8 **v359;
  unsigned __int8 **v360;
  unsigned __int8 *v361;
  _QWORD *v362;
  uint64_t v363;
  llvm::MachineFunction *v364;
  uint64_t v365;
  uint64_t *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  void *v377;
  uint64_t *v378;
  unint64_t *v379;
  unint64_t v380;
  int *v381;
  int *v382;
  uint64_t v383;
  int *v384;
  uint64_t v385;
  unint64_t v386;
  unint64_t v387;
  unint64_t *v388;
  int *v389;
  int *v390;
  uint64_t v391;
  int *v392;
  uint64_t v393;
  unint64_t v394;
  uint64_t *v395;
  uint64_t *v396;
  uint64_t v397;
  const char *v398;
  unint64_t v399;
  uint64_t v400;
  const char *v401;
  uint64_t v402;
  const char *v403;
  unint64_t v404;
  unint64_t v405;
  uint64_t v406;
  _DWORD *v407;
  __int16 v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t *v416;
  uint64_t v417;
  int v418;
  uint64_t v419;
  int v420;
  uint64_t *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  unsigned __int16 *v434;
  uint64_t v435;
  uint64_t v436;
  char v437;
  _DWORD *v438;
  uint64_t v439;
  char v440;
  uint64_t v441;
  uint64_t *v442;
  uint64_t v443;
  uint64_t *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  _QWORD *v448;
  uint64_t *v449;
  void *v450;
  unint64_t v451;
  uint64_t v452;
  uint64_t *v453;
  uint64_t v454;
  _DWORD *v455;
  uint64_t v456;
  uint64_t *v457;
  void *v458;
  uint64_t v459;
  uint64_t *v460;
  uint64_t v461;
  uint64_t *v462;
  uint64_t v463;
  uint64_t *v464;
  uint64_t v465;
  uint64_t v466;
  const char *v467;
  uint64_t v468;
  uint64_t *v469;
  int v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  double v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t *v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  const char *v486;
  uint64_t v487;
  unint64_t v488;
  void *v489;
  void *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t *v495;
  uint64_t v496;
  uint64_t v497;
  char v498;
  uint64_t v499;
  uint64_t *v500;
  uint64_t v501;
  uint64_t v502;
  int v503;
  uint64_t v504;
  BOOL v505;
  char v506;
  uint64_t v507;
  int v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t *v512;
  uint64_t v513;
  uint64_t v514;
  int v515;
  uint64_t v516;
  BOOL v517;
  uint64_t *v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t *v521;
  uint64_t v522;
  uint64_t *v523;
  uint64_t v524;
  uint64_t *v525;
  uint64_t v526;
  uint64_t *v527;
  uint64_t v528;
  BOOL v529;
  int v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t *v534;
  int v535;
  uint64_t v536;
  void *v537;
  uint64_t v538;
  int v539;
  uint64_t v540;
  uint64_t v542;
  unsigned int v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t *v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  char v551;
  uint64_t v552;
  const char *v553;
  char v554;
  const char *v555;
  int v556;
  int v557;
  unint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  int v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t *v567;
  uint64_t *v568;
  uint64_t v569;
  int v570;
  uint64_t *v571;
  uint64_t v572;
  uint64_t *v573;
  uint64_t v574;
  _QWORD *v575;
  unsigned int *v576;
  uint64_t v577;
  uint64_t *v578;
  uint64_t v579;
  unint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  int v587;
  uint64_t v588;
  char v589;
  BOOL v590;
  uint64_t v592;
  int v594;
  uint64_t v595;
  void *v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  unint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t *v604;
  uint64_t v605;
  uint64_t *v606;
  uint64_t v607;
  uint64_t *v608;
  uint64_t v609;
  uint64_t v610;
  char v611;
  int v612;
  _BOOL4 v614;
  uint64_t v615;
  uint64_t *v616;
  uint64_t *v617;
  uint64_t *v618;
  uint64_t *v619;
  unint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  char v624;
  int v625;
  _BOOL4 v627;
  uint64_t v629;
  uint64_t *v630;
  uint64_t *v631;
  uint64_t *v632;
  uint64_t *v633;
  unint64_t v634;
  uint64_t v635;
  uint64_t v636;
  int v637;
  _BOOL4 v639;
  uint64_t v640;
  uint64_t **v641;
  uint64_t *v642;
  unint64_t v643;
  uint64_t v644;
  uint64_t v645;
  const llvm::APFloat *v646;
  llvm::APFloatBase *v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  unint64_t v651;
  int v652;
  uint64_t *v653;
  uint64_t v654;
  uint64_t v655;
  char v656;
  int v657;
  _BOOL4 v659;
  uint64_t v660;
  uint64_t **v661;
  uint64_t **v662;
  uint64_t **v663;
  uint64_t **v664;
  unint64_t v665;
  uint64_t *v666;
  int v667;
  _BOOL4 v669;
  uint64_t v670;
  uint64_t *v671;
  uint64_t *v672;
  unint64_t v673;
  uint64_t v674;
  const llvm::APFloat *v675;
  uint64_t v676;
  llvm::APFloatBase *v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  unint64_t v681;
  uint64_t *v682;
  uint64_t *v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t *v686;
  uint64_t v687;
  uint64_t *v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  unsigned int v692;
  unsigned int v693;
  unint64_t v694;
  char v695;
  uint64_t v696;
  char v697;
  uint64_t *v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  char v702;
  int v703;
  uint64_t v704;
  void (*v705)(void);
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  int *v710;
  uint64_t v711;
  uint64_t *v712;
  int *v713;
  uint64_t v714;
  unint64_t v715;
  uint64_t v716;
  char v717;
  unint64_t v718;
  unint64_t v719;
  uint64_t *v720;
  unint64_t v721;
  uint64_t v722;
  uint64_t v723;
  const char *v724;
  int v725;
  int v726;
  uint64_t v727;
  uint64_t v728;
  unint64_t v729;
  uint64_t v730;
  unsigned int *v731;
  uint64_t v732;
  unsigned int v733;
  uint64_t *v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  int v738;
  unsigned int v739;
  uint64_t v740;
  uint64_t v741;
  unint64_t v742;
  _QWORD *v743;
  uint64_t v744;
  unint64_t v745;
  uint64_t *v746;
  uint64_t v747;
  int v748;
  uint64_t v749;
  uint64_t *v750;
  uint64_t v751;
  _BOOL4 v752;
  uint64_t *v753;
  uint64_t v754;
  _BOOL4 v755;
  unint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t *v762;
  uint64_t v763;
  uint64_t *v764;
  uint64_t v765;
  unint64_t v766;
  unsigned int v767;
  int v768;
  void *v769;
  unint64_t v770;
  char v771;
  char v772;
  unint64_t v773;
  unint64_t v774;
  const char *v775;
  unint64_t v776;
  const char *v777;
  unint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  void *v782;
  uint64_t v783;
  unint64_t v784;
  uint64_t v785;
  void (*v786)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t);
  unint64_t *v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t *v791;
  uint64_t v792;
  uint64_t *v793;
  uint64_t v794;
  uint64_t *v795;
  uint64_t v796;
  uint64_t v797;
  char v798;
  int v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t *v802;
  void *v803;
  uint64_t v804;
  uint64_t *v805;
  unint64_t v806;
  uint64_t v807;
  uint64_t v808;
  int v809;
  const char *v810;
  unint64_t v811;
  uint64_t v812;
  BOOL v813;
  uint64_t *v814;
  uint64_t *v815;
  uint64_t v816;
  uint64_t v817;
  const char *v818;
  const char *v819;
  uint64_t v820;
  uint64_t v821;
  unint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t *v826;
  int v827;
  void *v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  char v833;
  uint64_t v834;
  uint64_t v835;
  void *v836;
  uint64_t v837;
  void *v838;
  uint64_t v839;
  uint64_t v840;
  int *v841;
  int *v842;
  const char *v843;
  unint64_t v844;
  const char *v845;
  unint64_t v846;
  uint64_t *v847;
  char v848;
  const char *v849;
  unsigned int v850;
  const char *v851;
  unint64_t v852;
  uint64_t v853;
  uint64_t v854;
  unsigned int v855;
  int v856;
  _DWORD *v857;
  uint64_t v858;
  _DWORD *v859;
  uint64_t *v860;
  uint64_t v861;
  unint64_t v862;
  uint64_t v863;
  uint64_t *v864;
  uint64_t v865;
  uint64_t *v866;
  uint64_t v867;
  void *v868;
  unint64_t *v869;
  _DWORD *v870;
  int v871;
  int v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  int v876;
  _QWORD *v877;
  llvm::MachineFunction *v878;
  llvm::MachineInstr *v879;
  llvm::MachineInstr *v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t *v883;
  uint64_t *v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t *v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t *v891;
  uint64_t *v892;
  const char *v893;
  unsigned int v894;
  uint64_t v895;
  int v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t *v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t m;
  uint64_t v907;
  int v908;
  uint64_t v909;
  unint64_t v910;
  unint64_t v911;
  uint64_t v912;
  uint64_t v913;
  int v914;
  const char *v915;
  unint64_t v916;
  uint64_t v917;
  unsigned int v919;
  unsigned int v921;
  BOOL v922;
  unsigned int v923;
  uint64_t v924;
  uint64_t v925;
  int v926;
  uint64_t v927;
  uint64_t *v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  int v932;
  uint64_t v933;
  const char *v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  int v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t *v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t *v946;
  uint64_t v947;
  int v948;
  uint64_t v949;
  llvm::MachineFunction *v950;
  llvm::MachineInstr *v951;
  llvm::MachineInstr *v952;
  int v953;
  unint64_t v954;
  unint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  unint64_t v960;
  uint64_t v961;
  unsigned int v962;
  const char *v963;
  unsigned int v964;
  int v965;
  uint64_t *v966;
  uint64_t v967;
  const char *v968;
  uint64_t v969;
  unint64_t v970;
  unint64_t *v971;
  int *v972;
  int *v973;
  uint64_t v974;
  int *v975;
  uint64_t v976;
  unint64_t v977;
  uint64_t v978;
  void *v979;
  uint64_t v980;
  unint64_t v981;
  unint64_t v982;
  uint64_t v983;
  uint64_t v984;
  char v985;
  int v986;
  _BOOL4 v988;
  uint64_t v990;
  __int128 *v991;
  uint64_t *v992;
  uint64_t *v993;
  uint64_t *v994;
  unint64_t v995;
  uint64_t v996;
  llvm::ConstantFP *v997;
  uint64_t v998;
  const llvm::APFloat *v999;
  llvm::APFloatBase *v1000;
  unint64_t v1001;
  _DWORD *v1002;
  void *v1003;
  uint64_t v1004;
  uint64_t v1005;
  int *v1006;
  uint64_t v1007;
  uint64_t v1008;
  __int128 *v1009;
  uint64_t v1010;
  uint64_t v1011;
  int v1012;
  _DWORD *v1013;
  int v1014;
  unsigned int v1015;
  uint64_t v1016;
  unsigned int v1017;
  llvm::APFloatBase *v1018;
  uint64_t v1019;
  int64_t v1020;
  uint64_t v1021;
  int64_t v1022;
  BOOL v1023;
  uint64_t v1024;
  BOOL v1025;
  BOOL v1026;
  uint64_t v1027;
  char v1028;
  int v1029;
  unsigned int v1030;
  uint64_t v1031;
  llvm::MachineFunction *v1032;
  llvm::MachineInstr *v1033;
  llvm::MachineInstr *v1034;
  llvm::ConstantFP *v1035;
  const char *v1036;
  int v1037;
  char v1038;
  uint64_t v1039;
  int v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t *v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t *v1052;
  uint64_t *v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  unsigned int v1057;
  int v1058;
  uint64_t v1059;
  char v1060;
  uint64_t v1061;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  llvm::detail::DoubleAPFloat *v1067;
  int v1068;
  const llvm::APFloat *v1069;
  _DWORD *v1070;
  const llvm::APInt *v1071;
  const llvm::APFloat *v1072;
  uint64_t v1073;
  unint64_t v1074;
  uint64_t v1075;
  uint64_t *v1076;
  uint64_t v1077;
  uint64_t v1078;
  void *v1079;
  uint64_t v1080;
  void *v1081;
  _DWORD *v1082;
  uint64_t v1083;
  int v1084;
  __int16 v1085;
  int v1086;
  int *v1087;
  uint64_t v1088;
  const char *v1089;
  uint64_t v1090;
  uint64_t *v1091;
  uint64_t v1092;
  uint64_t v1093;
  unint64_t v1094;
  uint64_t v1095;
  const char *v1096;
  unsigned int v1097;
  unint64_t v1098;
  unint64_t v1099;
  uint64_t v1100;
  uint64_t *v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t *v1104;
  uint64_t v1105;
  int v1106;
  uint64_t *v1107;
  uint64_t v1108;
  unsigned int v1109;
  int *v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  int v1117;
  uint64_t v1118;
  uint64_t v1119;
  unsigned int v1120;
  unint64_t *v1121;
  uint64_t v1122;
  unsigned int v1123;
  unint64_t *v1124;
  uint64_t v1125;
  unsigned int v1126;
  unint64_t *v1127;
  unsigned int v1128;
  unint64_t *v1129;
  unint64_t v1130;
  unint64_t v1131;
  uint64_t v1132;
  unsigned __int8 *v1133;
  BOOL v1134;
  uint64_t v1135;
  char v1136;
  uint64_t v1137;
  const char *v1138;
  unsigned int v1139;
  unint64_t v1140;
  unsigned int v1141;
  uint64_t *v1142;
  uint64_t v1143;
  uint64_t **v1144;
  uint64_t *v1145;
  uint64_t v1146;
  uint64_t *v1147;
  uint64_t v1148;
  int v1149;
  unsigned int v1150;
  int v1151;
  int v1152;
  int64_t v1153;
  unint64_t v1154;
  int v1155;
  unsigned int v1156;
  unsigned int v1157;
  uint64_t *v1159;
  uint64_t *v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  char v1166;
  uint64_t v1167;
  uint64_t *v1168;
  uint64_t v1169;
  uint64_t *v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t *v1174;
  int v1175;
  int v1176;
  uint64_t v1177;
  unint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  int v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t *v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  void (*v1190)(void);
  int v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  int v1196;
  uint64_t v1197;
  unint64_t v1198;
  unint64_t v1199;
  unint64_t v1200;
  BOOL v1201;
  unint64_t v1202;
  unint64_t v1203;
  unint64_t v1204;
  unint64_t v1205;
  unint64_t v1206;
  unint64_t v1207;
  unint64_t v1208;
  unint64_t v1209;
  unint64_t v1210;
  unint64_t v1211;
  unint64_t v1212;
  unint64_t v1213;
  unint64_t v1214;
  unint64_t v1215;
  unint64_t v1216;
  uint64_t v1217;
  unsigned __int8 *v1218;
  BOOL v1219;
  int v1220;
  int v1221;
  uint64_t v1222;
  _DWORD *v1223;
  uint64_t v1224;
  uint64_t v1225;
  int v1226;
  int v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  const char *v1231;
  uint64_t v1232;
  const char *v1233;
  uint64_t v1234;
  const char *v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  int v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  int v1244;
  int v1245;
  uint64_t v1246;
  uint64_t v1247;
  char v1248;
  uint64_t v1249;
  const char *v1250;
  unsigned int v1251;
  unint64_t v1252;
  _DWORD *v1253;
  int *v1254;
  int v1255;
  uint64_t v1256;
  int v1257;
  uint64_t v1258;
  uint64_t v1259;
  llvm::ConstantInt *****v1260;
  const char *v1261;
  const llvm::APInt *v1262;
  unsigned int v1263;
  _DWORD *v1264;
  llvm::ValueHandleBase *v1265;
  uint64_t v1266;
  unint64_t v1267;
  unint64_t v1268;
  uint64_t v1269;
  void *v1270;
  uint64_t v1271;
  void *v1272;
  unint64_t v1273;
  int v1274;
  int64_t v1275;
  unint64_t v1276;
  int v1277;
  uint64_t v1278;
  _DWORD *v1279;
  int v1280;
  void *v1281;
  uint64_t *v1282;
  uint64_t *v1283;
  uint64_t v1284;
  int v1285;
  uint64_t *v1286;
  uint64_t v1287;
  const char *v1288;
  unint64_t v1289;
  uint64_t v1290;
  void **v1291;
  unint64_t v1292;
  unsigned int v1293;
  uint64_t v1294;
  char v1295;
  uint64_t v1296;
  const char *v1297;
  unsigned int v1298;
  uint64_t v1299;
  unsigned int v1300;
  char v1301;
  uint64_t v1302;
  unint64_t v1303;
  uint64_t v1304;
  const char *v1305;
  char v1306;
  uint64_t v1307;
  const char *v1308;
  char v1309;
  uint64_t v1310;
  uint64_t v1311;
  _DWORD *v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  const char *v1316;
  char v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  unint64_t v1322;
  const char *v1323;
  unsigned int v1324;
  uint64_t v1325;
  unsigned int v1326;
  char v1327;
  uint64_t v1328;
  unint64_t v1329;
  uint64_t v1330;
  char v1331;
  uint64_t v1332;
  const char *v1333;
  uint64_t v1334;
  const char *v1335;
  unsigned int v1336;
  _DWORD *v1337;
  const void *v1338;
  uint64_t v1339;
  unsigned int v1340;
  char v1341;
  uint64_t v1342;
  unint64_t v1343;
  uint64_t v1344;
  char v1345;
  uint64_t v1346;
  const char *v1347;
  uint64_t v1348;
  uint64_t v1349;
  _DWORD *v1350;
  uint64_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t j;
  void **v1358;
  void *v1359;
  void *v1360;
  const llvm::APFloat *v1361;
  llvm::APFloatBase *v1362;
  uint64_t v1363;
  _BOOL4 v1364;
  int v1365;
  uint64_t *v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t *v1369;
  uint64_t v1370;
  uint64_t v1371;
  unint64_t v1372;
  uint64_t v1373;
  void (*v1374)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t);
  unint64_t *v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t *v1379;
  uint64_t *v1380;
  uint64_t v1381;
  uint64_t *v1382;
  uint64_t v1383;
  uint64_t *v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  unint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t *v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  int v1395;
  int v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  llvm::ConstantFP *****v1400;
  const llvm::APFloat *v1401;
  llvm::APFloatBase *v1402;
  uint64_t v1403;
  char v1404;
  int v1405;
  void **v1406;
  void **v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t *v1410;
  uint64_t v1411;
  int v1412;
  uint64_t v1413;
  uint64_t v1414;
  void (*v1415)(void);
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t *v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t *v1426;
  uint64_t *v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t *v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t *v1441;
  uint64_t *v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  char v1446;
  int v1447;
  _BOOL4 v1449;
  uint64_t v1451;
  _QWORD *v1452;
  uint64_t v1453;
  uint64_t v1454;
  unsigned int v1455;
  uint64_t v1456;
  uint64_t *v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  char v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t *v1477;
  uint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  uint64_t *v1482;
  uint64_t *v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  uint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t *v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  uint64_t *v1496;
  uint64_t *v1497;
  uint64_t v1498;
  uint64_t v1499;
  unint64_t v1500;
  unint64_t v1501;
  uint64_t v1502;
  int *v1503;
  BOOL v1504;
  unint64_t v1505;
  int *v1506;
  int v1507;
  int v1508;
  unint64_t v1509;
  uint64_t v1510;
  int v1511;
  int *v1512;
  uint64_t v1513;
  __int128 *v1514;
  uint64_t v1515;
  uint64_t v1516;
  int v1517;
  _DWORD *v1518;
  unint64_t v1519;
  unsigned int v1520;
  char v1521;
  unsigned int v1522;
  int *v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  __int128 *v1527;
  uint64_t v1528;
  uint64_t v1529;
  int v1530;
  _DWORD *v1531;
  int v1532;
  unint64_t v1533;
  uint64_t v1534;
  _DWORD *v1535;
  uint64_t v1536;
  uint64_t *v1537;
  uint64_t **v1538;
  uint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  const char *v1542;
  uint64_t v1543;
  int v1544;
  uint64_t *v1545;
  uint64_t *v1546;
  uint64_t *v1547;
  uint64_t v1548;
  uint64_t v1549;
  int v1550;
  uint64_t v1551;
  char v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  char v1559;
  unint64_t *v1560;
  uint64_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t *v1564;
  uint64_t v1565;
  uint64_t v1566;
  uint64_t v1567;
  int v1568;
  uint64_t v1569;
  uint64_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  uint64_t v1573;
  uint64_t v1574;
  int v1575;
  char v1576;
  void *v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t *v1581;
  uint64_t v1582;
  uint64_t v1583;
  uint64_t v1584;
  uint64_t *v1585;
  uint64_t **v1586;
  uint64_t v1587;
  uint64_t v1588;
  uint64_t v1589;
  const char *v1590;
  uint64_t v1591;
  int GenericVirtualRegister;
  uint64_t *v1593;
  uint64_t *v1594;
  uint64_t v1595;
  uint64_t v1596;
  uint64_t v1597;
  char v1598;
  uint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  uint64_t v1602;
  char v1603;
  uint64_t v1604;
  char v1605;
  unint64_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  uint64_t v1609;
  uint64_t *v1610;
  uint64_t v1611;
  uint64_t v1612;
  uint64_t v1613;
  uint64_t v1614;
  uint64_t *v1615;
  uint64_t *v1616;
  uint64_t v1617;
  uint64_t v1618;
  uint64_t v1619;
  uint64_t v1620;
  uint64_t v1621;
  uint64_t *v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t *v1625;
  uint64_t v1626;
  int v1627;
  uint64_t v1628;
  int v1629;
  uint64_t *v1630;
  uint64_t v1631;
  char v1632;
  uint64_t v1633;
  uint64_t v1634;
  char v1635;
  uint64_t v1636;
  const char *v1637;
  unsigned int v1638;
  uint64_t v1639;
  void *v1640;
  uint64_t *v1641;
  void *v1642;
  uint64_t v1643;
  void *v1644;
  uint64_t v1645;
  uint64_t v1646;
  unsigned int v1647;
  uint64_t v1648;
  char v1649;
  uint64_t v1650;
  uint64_t v1651;
  uint64_t *v1652;
  uint64_t v1653;
  const char *v1654;
  const char *v1655;
  unsigned int v1656;
  unint64_t v1657;
  unint64_t v1658;
  uint64_t v1659;
  int v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t v1663;
  uint64_t v1664;
  void *v1665;
  uint64_t v1666;
  unint64_t v1667;
  uint64_t v1668;
  void *v1669;
  uint64_t v1670;
  void *v1671;
  uint64_t v1672;
  unint64_t v1673;
  const char *v1674;
  unsigned int v1675;
  unint64_t v1676;
  unint64_t v1677;
  _BOOL4 v1678;
  int v1679;
  uint64_t v1681;
  uint64_t v1682;
  uint64_t *v1683;
  uint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  int v1687;
  _QWORD *v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  uint64_t *v1693;
  uint64_t *v1694;
  uint64_t v1695;
  uint64_t v1696;
  uint64_t v1697;
  uint64_t v1698;
  char v1699;
  uint64_t v1700;
  uint64_t v1701;
  int v1702;
  uint64_t v1703;
  int v1704;
  _DWORD *v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  uint64_t *v1709;
  uint64_t v1710;
  uint64_t v1711;
  uint64_t *v1712;
  uint64_t v1713;
  uint64_t v1714;
  unint64_t v1715;
  uint64_t v1716;
  int v1717;
  uint64_t v1718;
  llvm::detail::DoubleAPFloat *v1719;
  void *v1720;
  uint64_t v1721;
  uint64_t v1722;
  char v1723;
  uint64_t v1724;
  char v1725;
  uint64_t v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t v1730;
  uint64_t v1731;
  int v1732;
  __int16 v1733;
  char v1734;
  char v1735;
  uint64_t v1736;
  void *v1737;
  void *v1738;
  void *v1739;
  uint64_t v1740;
  uint64_t v1741;
  unint64_t v1742;
  uint64_t v1743;
  unsigned int v1744;
  uint64_t v1745;
  uint64_t v1746;
  uint64_t v1747;
  uint64_t v1748;
  uint64_t v1749;
  uint64_t v1750;
  uint64_t v1751;
  uint64_t v1752;
  uint64_t v1753;
  uint64_t v1754;
  int64_t v1755;
  unint64_t v1756;
  unsigned int v1757;
  uint64_t v1758;
  uint64_t v1759;
  unint64_t v1760;
  void *v1761;
  void *v1762;
  void *v1763;
  unint64_t v1764;
  uint64_t v1765;
  uint64_t v1766;
  void *v1767;
  uint64_t v1768;
  void *v1769;
  void *v1770;
  uint64_t v1771;
  void *v1772;
  unint64_t v1773;
  uint64_t v1774;
  _DWORD *v1775;
  int v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;
  uint64_t v1780;
  uint64_t v1781;
  unsigned int v1782;
  uint64_t v1784;
  uint64_t v1785;
  char v1786;
  const char *v1787;
  unint64_t v1788;
  uint64_t v1789;
  void *v1790;
  uint64_t v1791;
  uint64_t v1792;
  int v1793;
  uint64_t v1794;
  char v1795;
  char v1796;
  uint64_t v1797;
  void *v1798;
  uint64_t v1799;
  uint64_t v1800;
  uint64_t v1801;
  int v1802;
  uint64_t v1803;
  uint64_t v1804;
  uint64_t v1805;
  uint64_t v1806;
  uint64_t v1807;
  unsigned int v1808;
  uint64_t v1810;
  uint64_t v1811;
  const char *v1812;
  const char *v1813;
  int v1814;
  uint64_t v1815;
  char v1816;
  int v1817;
  _BOOL4 v1819;
  uint64_t v1821;
  _QWORD *v1822;
  uint64_t *v1823;
  uint64_t *v1824;
  uint64_t *v1825;
  unint64_t v1826;
  uint64_t v1827;
  uint64_t v1828;
  char v1829;
  int v1830;
  _BOOL4 v1832;
  uint64_t v1834;
  uint64_t *v1835;
  uint64_t *v1836;
  unint64_t v1837;
  uint64_t v1838;
  uint64_t v1839;
  int v1840;
  _BOOL4 v1842;
  uint64_t v1843;
  uint64_t **v1844;
  uint64_t **v1845;
  unint64_t v1846;
  uint64_t *v1847;
  uint64_t v1848;
  const llvm::APFloat *v1849;
  llvm::APFloatBase *v1850;
  uint64_t v1851;
  unint64_t v1852;
  uint64_t v1853;
  int v1854;
  uint8x8_t v1855;
  int v1856;
  unint64_t v1857;
  _DWORD *v1858;
  size_t v1859;
  const char *v1860;
  unsigned int v1861;
  _BOOL4 v1862;
  uint64_t *v1863;
  uint64_t *v1864;
  unint64_t v1865;
  uint64_t v1866;
  uint64_t v1867;
  uint64_t v1868;
  uint64_t v1869;
  char v1870;
  uint64_t v1871;
  uint64_t *v1872;
  uint64_t *v1873;
  uint64_t *v1874;
  unint64_t v1875;
  uint64_t v1876;
  uint64_t v1877;
  char v1878;
  int v1879;
  _BOOL4 v1881;
  uint64_t v1882;
  uint64_t *v1883;
  uint64_t *v1884;
  unint64_t v1885;
  uint64_t v1886;
  int v1887;
  _BOOL4 v1889;
  uint64_t v1890;
  uint64_t **v1891;
  uint64_t **v1892;
  unint64_t v1893;
  uint64_t *v1894;
  uint64_t v1895;
  const llvm::APFloat *v1896;
  llvm::APFloatBase *v1897;
  uint64_t v1898;
  uint64_t v1899;
  int v1900;
  int v1901;
  uint64_t v1903;
  uint64_t *v1904;
  uint64_t v1905;
  uint64_t v1906;
  int v1907;
  int v1908;
  uint64_t v1910;
  uint64_t *v1911;
  void **v1912;
  uint64_t v1913;
  uint64_t *v1914;
  uint64_t v1915;
  uint64_t *v1916;
  uint64_t v1917;
  uint64_t v1918;
  uint64_t v1919;
  char v1920;
  char v1921;
  uint64_t *v1922;
  int v1923;
  uint64_t v1924;
  char v1925;
  uint64_t v1926;
  uint64_t *v1927;
  uint64_t v1928;
  uint64_t *v1929;
  uint64_t v1930;
  uint64_t v1931;
  uint64_t v1932;
  uint64_t v1933;
  uint64_t v1934;
  uint64_t v1935;
  int v1936;
  uint64_t v1937;
  uint64_t v1938;
  int v1939;
  uint64_t i;
  uint64_t v1941;
  uint64_t v1942;
  uint64_t v1943;
  unint64_t v1944;
  uint64_t v1945;
  uint64_t v1946;
  uint64_t v1947;
  int v1948;
  uint64_t v1949;
  uint64_t v1950;
  int v1951;
  uint64_t *v1952;
  uint64_t v1953;
  uint64_t v1954;
  uint64_t *v1955;
  uint64_t v1956;
  uint64_t v1957;
  uint64_t v1958;
  uint64_t v1959;
  uint64_t v1960;
  void *v1961;
  uint64_t v1962;
  uint64_t v1963;
  uint64_t v1964;
  void *v1965;
  void *v1966;
  void *v1967;
  void *__src;
  uint64_t v1969;
  uint64_t v1970;
  _DWORD *v1971;
  uint64_t v1972;
  uint64_t v1973;
  unsigned int v1974;
  unsigned int v1975;
  int v1976;
  uint64_t v1977;
  uint64_t v1978;
  void *v1979;
  int v1980;
  uint64_t v1981;
  _DWORD *v1982;
  int v1983;
  uint64_t v1984;
  uint64_t v1985;
  int v1986;
  uint64_t v1987;
  uint64_t v1988;
  int v1989;
  __int16 v1990;
  unsigned int v1991;
  int v1992;
  int v1993;
  unsigned int v1994;
  uint64_t v1995;
  uint64_t v1996;
  uint64_t v1997;
  uint64_t v1998;
  uint64_t v1999;
  uint64_t v2000;
  uint64_t v2001;
  _DWORD v2002[4];
  int v2003;
  uint64_t v2004;
  uint64_t *v2005;
  int v2006;
  char v2007;
  unint64_t v2008;
  uint64_t v2009;
  uint64_t *v2010;
  int v2011;
  char v2012;
  unsigned __int16 *v2013;
  uint64_t v2014;
  uint64_t *v2015;
  int v2016;
  char v2017;
  unint64_t v2018;
  uint64_t v2019;
  uint64_t *v2020;
  int v2021;
  char v2022;
  __int128 v2023;
  uint64_t *v2024;
  int v2025;
  char v2026;
  __int128 v2027;
  uint64_t *v2028;
  int v2029;
  char v2030;
  void *v2031;
  __int128 v2032;
  int v2033;
  char v2034;
  void *__s1[2];
  __int128 v2036;
  unint64_t v2037;
  uint64_t v2038;
  uint64_t v2039;
  uint64_t v2040;
  _BYTE v2041[24];
  _BYTE v2042[32];
  _BYTE v2043[160];
  __int128 v2044;
  uint64_t v2045;
  unint64_t v2046;
  __int128 v2047;
  uint64_t v2048;
  uint64_t v2049;
  int v2050;
  uint64_t v2051;
  uint64_t v2052;
  int v2053;
  uint64_t v2054;

  v3 = a1;
  v2054 = *MEMORY[0x1E0C80C00];
  v4 = **(unsigned __int16 **)(a2 + 16);
  v5 = (v4 - 45) > 0x16 || ((1 << (v4 - 45)) & 0x73C007) == 0;
  if (!v5 || (v4 - 127) < 3)
  {
    sub_1C554CE74(v4, *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36), *(_DWORD *)(*(_QWORD *)(a2 + 32) + 68), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 40), (uint64_t)__s1);
    if ((_BYTE)v2036)
    {
      v957 = *(_QWORD *)v3;
      *(_QWORD *)(v957 + 40) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(v957 + 48) = a2;
      v958 = *(_QWORD *)v3;
      LODWORD(v2046) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
      LODWORD(v2047) = 1;
      if (LODWORD(__s1[1]) > 0x40)
        v959 = *(_QWORD *)__s1[0];
      else
        v959 = (uint64_t)__s1[0] << -(uint64_t)LODWORD(__s1[1]) >> -(uint64_t)LODWORD(__s1[1]);
      sub_1C5544694(v958, &v2046, v959);
      v960 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v960 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v960 = a2;
          do
            v960 = *(_QWORD *)(v960 + 8);
          while ((*(_WORD *)(v960 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v960 + 8));
      if (!(_BYTE)v2036 || LODWORD(__s1[1]) < 0x41 || !__s1[0])
        return 1;
      goto LABEL_2069;
    }
    v4 = **(unsigned __int16 **)(a2 + 16);
  }
  if ((v4 - 45) <= 0x16 && ((1 << (v4 - 45)) & 0x700005) != 0)
  {
    v38 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
    a1 = sub_1C554C1FC(v38, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40));
    if ((_BYTE)a2)
    {
      v1015 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 68);
      (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(v3 + 16) + 32))(*(_QWORD *)(v3 + 16), a2);
      llvm::MachineOperand::setReg(*(_QWORD *)(a2 + 32) + 32, v1015);
      v1016 = *(_QWORD *)(a2 + 32) + 64;
      v1017 = v38;
LABEL_2062:
      llvm::MachineOperand::setReg(v1016, v1017);
      goto LABEL_2063;
    }
    v4 = **(unsigned __int16 **)(a2 + 16);
  }
  if (v4 <= 163)
  {
    if (v4 <= 89)
    {
      switch(v4)
      {
        case 'A':
          v11 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
          v12 = *(_QWORD *)v3;
          v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40);
          *(_QWORD *)(v12 + 40) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(v12 + 48) = a2;
          v14 = *(_QWORD *)(a2 + 32);
          v15 = *(unsigned int *)(v14 + 36);
          v16 = *(unsigned int *)(v14 + 68);
          if ((v15 & 0x80000000) != 0
            && (v15 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v13 + 432))
          {
            v17 = *(_QWORD *)(*(_QWORD *)(v13 + 424) + 8 * (v15 & 0x7FFFFFFF));
          }
          else
          {
            v17 = 0;
          }
          *(_QWORD *)&v2023 = v17;
          v276 = sub_1C554C1FC(v16, v13);
          if (v277)
          {
            v278 = v276;
            if (v276 == -1)
            {
              v582 = *(_QWORD *)v3;
              LODWORD(v2046) = v11;
              LODWORD(v2047) = 1;
              LODWORD(__s1[0]) = v15;
              LODWORD(v2036) = 0;
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v582 + 32))(v582, 19, &v2046, 1, __s1, 1, 0);
              v63 = *(_QWORD *)(a2 + 24);
              v64 = a2;
              if ((*(_BYTE *)a2 & 4) == 0)
              {
                v64 = a2;
                if ((*(_WORD *)(a2 + 44) & 8) != 0)
                {
                  v64 = a2;
                  do
                    v64 = *(_QWORD *)(v64 + 8);
                  while ((*(_WORD *)(v64 + 44) & 8) != 0);
                }
              }
              goto LABEL_2820;
            }
            if (!v276)
            {
              v279 = *(_QWORD *)v3;
              LODWORD(__s1[0]) = v11;
              LODWORD(__s1[1]) = 1;
              sub_1C5544694(v279, (unint64_t *)__s1, 0);
              v63 = *(_QWORD *)(a2 + 24);
              v64 = a2;
              if ((*(_BYTE *)a2 & 4) == 0)
              {
                v64 = a2;
                if ((*(_WORD *)(a2 + 44) & 8) != 0)
                {
                  v64 = a2;
                  do
                    v64 = *(_QWORD *)(v64 + 8);
                  while ((*(_WORD *)(v64 + 44) & 8) != 0);
                }
              }
              goto LABEL_2820;
            }
            if ((_DWORD)v15 == (_DWORD)v16)
            {
LABEL_699:
              v583 = *(_QWORD *)v3;
              LODWORD(v2046) = v11;
              LODWORD(v2047) = 1;
              LODWORD(__s1[0]) = v15;
              LODWORD(v2036) = 0;
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v583 + 32))(v583, 19, &v2046, 1, __s1, 1, 0);
              v63 = *(_QWORD *)(a2 + 24);
              v64 = a2;
              if ((*(_BYTE *)a2 & 4) == 0)
              {
                v64 = a2;
                if ((*(_WORD *)(a2 + 44) & 8) != 0)
                {
                  v64 = a2;
                  do
                    v64 = *(_QWORD *)(v64 + 8);
                  while ((*(_WORD *)(v64 + 44) & 8) != 0);
                }
              }
              goto LABEL_2820;
            }
            if ((v15 & 0x80000000) != 0)
              v815 = (uint64_t *)(*(_QWORD *)(v13 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
            else
              v815 = (uint64_t *)(*(_QWORD *)(v13 + 272) + 8 * v15);
            v863 = *v815;
            if (v863)
            {
              if ((*(_BYTE *)(v863 + 3) & 1) != 0
                || (v863 = *(_QWORD *)(v863 + 24)) != 0 && (*(_BYTE *)(v863 + 3) & 1) != 0)
              {
                v1653 = *(_QWORD *)(v863 + 8);
                if (v1653)
                {
                  if (**(_WORD **)(v1653 + 16) == 118 && *(_DWORD *)(v1653 + 40) == 2)
                  {
                    v1654 = (const char *)*(unsigned int *)(*(_QWORD *)(v1653 + 32) + 36);
                    v1656 = sub_1C4825F50((unint64_t *)&v2023);
                    if ((_DWORD)v1655 == 1)
                    LODWORD(v2047) = v1656;
                    if (v1656 > 0x40)
                    {
                      llvm::APInt::initSlowCase((llvm::APInt *)&v2046, v278, 0);
                      if ((v1654 & 0x80000000) == 0)
                        goto LABEL_3437;
                    }
                    else
                    {
                      v1657 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1656;
                      if (!v1656)
                        v1657 = 0;
                      v2046 = v1657 & v278;
                      if ((v1654 & 0x80000000) == 0)
                        goto LABEL_3437;
                    }
                    if ((v1654 & 0x7FFFFFFF) < *(_DWORD *)(v13 + 432))
                    {
                      v1658 = *(_QWORD *)(*(_QWORD *)(v13 + 424) + 8 * (v1654 & 0x7FFFFFFF));
LABEL_3438:
                      v2018 = v1658;
                      v1856 = v2047;
                      LODWORD(v2032) = v2047;
                      if (v2047 > 0x40)
                      {
                        v1859 = (((unint64_t)v2047 + 63) >> 3) & 0x3FFFFFF8;
                        v2031 = (void *)operator new[]();
                        memcpy(v2031, (const void *)v2046, v1859);
                        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v2031);
                        v1856 = v2032;
                        v1858 = v2031;
                        if (v2047 > 0x40 && v2046)
                          MEMORY[0x1CAA32F9C](v2046, 0x1000C8000313F17);
                      }
                      else
                      {
                        v1857 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2047;
                        if (!(_DWORD)v2047)
                          v1857 = 0;
                        v1858 = (_DWORD *)(v1857 & ~v2046);
                      }
                      v2046 = (unint64_t)v1858;
                      LODWORD(v2047) = v1856;
                      v1861 = sub_1C4825F50(&v2018);
                      if ((_DWORD)v1860 == 1)
                      llvm::APInt::trunc((llvm::APInt *)&v2046, v1861, (llvm::APInt *)__s1);
                      if (v2047 >= 0x41 && v2046)
                        MEMORY[0x1CAA32F9C](v2046, 0x1000C8000313F17);
                      v2046 = (unint64_t)__s1[0];
                      LODWORD(v2047) = __s1[1];
                      sub_1C54EB4A0(*(_QWORD *)(v3 + 24), v1654, (uint64_t)__s1);
                      if (v2047 > 0x40)
                      {
                        v1863 = (uint64_t *)v2046;
                        v1864 = (uint64_t *)__s1[0];
                        v1865 = (((unint64_t)v2047 + 63) >> 6) - 1;
                        do
                        {
                          v1867 = *v1863++;
                          v1866 = v1867;
                          v1868 = *v1864++;
                          v1869 = v1866 & ~v1868;
                          v1862 = v1869 == 0;
                          v813 = v1865-- != 0;
                          v1870 = v813;
                        }
                        while (!v1869 && (v1870 & 1) != 0);
                      }
                      else
                      {
                        v1862 = (v2046 & ~(uint64_t)__s1[0]) == 0;
                      }
                      if (DWORD2(v2036) >= 0x41 && (_QWORD)v2036)
                        MEMORY[0x1CAA32F9C](v2036, 0x1000C8000313F17);
                      if (LODWORD(__s1[1]) >= 0x41 && __s1[0])
                        MEMORY[0x1CAA32F9C](__s1[0], 0x1000C8000313F17);
                      if (v1862)
                      {
                        v1871 = *(_QWORD *)v3;
                        LODWORD(v2027) = v11;
                        DWORD2(v2027) = 1;
                        LODWORD(__s1[0]) = (_DWORD)v1654;
                        LODWORD(v2036) = 0;
                        (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v1871 + 32))(v1871, 126, &v2027, 1, __s1, 1, 0);
                        v1177 = *(_QWORD *)(a2 + 24);
                        v1178 = a2;
                        if ((*(_BYTE *)a2 & 4) == 0)
                        {
                          v1178 = a2;
                          if ((*(_WORD *)(a2 + 44) & 8) != 0)
                          {
                            v1178 = a2;
                            do
                              v1178 = *(_QWORD *)(v1178 + 8);
                            while ((*(_WORD *)(v1178 + 44) & 8) != 0);
                          }
                        }
LABEL_1876:
                        sub_1C487FE80(v1177 + 40, a2, *(_QWORD *)(v1178 + 8));
                        if (v2047 < 0x41 || !v2046)
                          return 1;
                        goto LABEL_2069;
                      }
                      if (v2047 >= 0x41 && v2046)
                        MEMORY[0x1CAA32F9C](v2046, 0x1000C8000313F17);
                      goto LABEL_1262;
                    }
LABEL_3437:
                    v1658 = 0;
                    goto LABEL_3438;
                  }
                }
              }
            }
          }
          else if ((_DWORD)v15 == (_DWORD)v16)
          {
            goto LABEL_699;
          }
LABEL_1262:
          if ((v15 & 0x80000000) != 0)
            v864 = (uint64_t *)(*(_QWORD *)(v13 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
          else
            v864 = (uint64_t *)(*(_QWORD *)(v13 + 272) + 8 * v15);
          v865 = *v864;
          if (!v865)
            goto LABEL_1266;
          if ((*(_BYTE *)(v865 + 3) & 1) == 0)
          {
            v865 = *(_QWORD *)(v865 + 24);
            if (!v865)
            {
LABEL_1266:
              if ((v16 & 0x80000000) != 0)
                v866 = (uint64_t *)(*(_QWORD *)(v13 + 24) + 16 * (v16 & 0x7FFFFFFF) + 8);
              else
                v866 = (uint64_t *)(*(_QWORD *)(v13 + 272) + 8 * v16);
              v867 = *v866;
              if ((*(_BYTE *)(v867 + 3) & 1) == 0)
                v867 = *(_QWORD *)(v867 + 24);
              if (**(unsigned __int16 **)(v865 + 16) != **(unsigned __int16 **)(*(_QWORD *)(v867 + 8) + 16)
                || (sub_1C499FE84((_QWORD *)v3, a2) & 1) == 0)
              {
                if ((v11 & 0x80000000) == 0)
                  goto LABEL_1276;
                v405 = v11 & 0x7FFFFFFF;
                if ((v11 & 0x7FFFFFFFu) >= *(_DWORD *)(v13 + 432))
                  goto LABEL_1276;
LABEL_1275:
                v868 = *(void **)(*(_QWORD *)(v13 + 424) + 8 * v405);
LABEL_1277:
                __s1[0] = v868;
                v869 = (unint64_t *)__s1;
LABEL_1278:
                if ((sub_1C499F8BC((uint64_t *)v3, a2, v869) & 1) == 0)
                  return sub_1C6037A10((uint64_t *)v3, a2);
              }
              return 1;
            }
            if ((*(_BYTE *)(v865 + 3) & 1) == 0)
            {
              v865 = 0;
              goto LABEL_1266;
            }
          }
          v865 = *(_QWORD *)(v865 + 8);
          goto LABEL_1266;
        case 'B':
          v105 = *(_QWORD *)v3;
          v106 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40);
          v107 = *(_QWORD *)(a2 + 32);
          v108 = (const char *)*(unsigned int *)(v107 + 36);
          v109 = (const char *)*(unsigned int *)(v107 + 68);
          *(_QWORD *)(v105 + 40) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(v105 + 48) = a2;
          if ((v108 & 0x80000000) != 0)
            v110 = (uint64_t *)(*(_QWORD *)(v106 + 24) + 16 * (v108 & 0x7FFFFFFF) + 8);
          else
            v110 = (uint64_t *)(*(_QWORD *)(v106 + 272) + 8 * (_QWORD)v108);
          v422 = *v110;
          if (v422
            && ((*(_BYTE *)(v422 + 3) & 1) != 0
             || (v422 = *(_QWORD *)(v422 + 24)) != 0 && (*(_BYTE *)(v422 + 3) & 1) != 0))
          {
            v423 = *(_QWORD *)(v422 + 8);
            if ((v109 & 0x80000000) != 0)
              goto LABEL_2171;
          }
          else
          {
            v423 = 0;
            if ((v109 & 0x80000000) != 0)
            {
LABEL_2171:
              v424 = (uint64_t *)(*(_QWORD *)(v106 + 24) + 16 * (v109 & 0x7FFFFFFF) + 8);
LABEL_2172:
              v1278 = *v424;
              v1996 = v423;
              if (v1278
                && ((*(_BYTE *)(v1278 + 3) & 1) != 0
                 || (v1278 = *(_QWORD *)(v1278 + 24)) != 0 && (*(_BYTE *)(v1278 + 3) & 1) != 0))
              {
                v1987 = *(_QWORD *)(v1278 + 8);
              }
              else
              {
                v1987 = 0;
              }
              if ((sub_1C499FBDC((llvm::ConstantInt ******)v3, a2) & 1) != 0)
                return 1;
              v1279 = *(_DWORD **)(a2 + 32);
              v1280 = v1279[1];
              if (v1280 < 0 && (v1280 & 0x7FFFFFFFu) < *(_DWORD *)(v106 + 432))
                v1281 = *(void **)(*(_QWORD *)(v106 + 424) + 8 * (v1280 & 0x7FFFFFFF));
              else
                v1281 = 0;
              v1981 = v1279[1];
              *(_QWORD *)&v2027 = v1281;
              if (sub_1C499F538(**(_WORD **)(a2 + 16), v1279, v106))
              {
                if ((v109 & 0x80000000) != 0)
                  v1282 = (uint64_t *)(*(_QWORD *)(v106 + 24) + 16 * (v109 & 0x7FFFFFFF) + 8);
                else
                  v1282 = (uint64_t *)(*(_QWORD *)(v106 + 272) + 8 * (_QWORD)v109);
                v1284 = *v1282;
                if (v1284)
                {
                  v1586 = (uint64_t **)v3;
                  if (((*(_BYTE *)(v1284 + 3) & 1) != 0
                     || (v1284 = *(_QWORD *)(v1284 + 24)) != 0 && (*(_BYTE *)(v1284 + 3) & 1) != 0)
                    && (v1587 = *(_QWORD *)(v1284 + 8)) != 0
                    && **(_WORD **)(v1587 + 16) == 128
                    && *(_DWORD *)(v1587 + 40) == 3)
                  {
                    v1721 = *(_QWORD *)(v1587 + 32);
                    v1285 = *(_DWORD *)(v1721 + 36);
                    v1722 = sub_1C554C050(*(_DWORD *)(v1721 + 68), v106);
                    if (v1723)
                    {
                      v1589 = v1722;
                      goto LABEL_2815;
                    }
                  }
                  else
                  {
                    v1285 = 0;
                  }
                  if ((v108 & 0x80000000) == 0)
                    goto LABEL_2188;
                }
                else
                {
                  v1285 = 0;
                  if ((v108 & 0x80000000) == 0)
                  {
LABEL_2188:
                    v1286 = (uint64_t *)(*(_QWORD *)(v106 + 272) + 8 * (_QWORD)v108);
LABEL_2812:
                    v1588 = *v1286;
                    if (!v1588)
                    {
                      v1586 = (uint64_t **)v3;
LABEL_2814:
                      v1589 = 0;
                      goto LABEL_2815;
                    }
                    v1586 = (uint64_t **)v3;
                    if ((*(_BYTE *)(v1588 + 3) & 1) == 0)
                    {
                      v1588 = *(_QWORD *)(v1588 + 24);
                      if (!v1588 || (*(_BYTE *)(v1588 + 3) & 1) == 0)
                        goto LABEL_2814;
                    }
                    v1595 = *(_QWORD *)(v1588 + 8);
                    if (!v1595 || **(_WORD **)(v1595 + 16) != 128 || *(_DWORD *)(v1595 + 40) != 3)
                      goto LABEL_2814;
                    v1596 = *(_QWORD *)(v1595 + 32);
                    v1285 = *(_DWORD *)(v1596 + 36);
                    v1597 = sub_1C554C050(*(_DWORD *)(v1596 + 68), v106);
                    if (v1598)
                      v1589 = v1597;
                    else
                      v1589 = 0;
LABEL_2815:
                    v1591 = 16 * sub_1C4825F50((unint64_t *)&v2027);
                    if ((_DWORD)v1590 == 1)
                    GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(v106, v1591 & 0x7FFFFFFF0 | 1, "", 0);
                    v1593 = *v1586;
                    LODWORD(v2046) = GenericVirtualRegister;
                    LODWORD(v2047) = 1;
                    LODWORD(__s1[0]) = v1285;
                    LODWORD(v2036) = 0;
                    DWORD2(v2036) = v1285;
                    LODWORD(v2038) = 0;
                    (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*v1593 + 32))(v1593, 76, &v2046, 1, __s1, 2, 0);
                    v1594 = *v1586;
                    LODWORD(v2046) = v1981;
                    LODWORD(v2047) = 1;
                    LODWORD(__s1[0]) = GenericVirtualRegister;
                    LODWORD(v2036) = 0;
                    sub_1C5546FE4(v1594, &v2046, (int *)__s1, v1589);
                    v63 = *(_QWORD *)(a2 + 24);
                    if ((*(_BYTE *)a2 & 4) == 0 && (*(_WORD *)(a2 + 44) & 8) != 0)
                    {
                      v64 = a2;
                      do
                        v64 = *(_QWORD *)(v64 + 8);
                      while ((*(_WORD *)(v64 + 44) & 8) != 0);
                      goto LABEL_2820;
                    }
LABEL_2819:
                    v64 = a2;
                    goto LABEL_2820;
                  }
                }
                v1286 = (uint64_t *)(*(_QWORD *)(v106 + 24) + 16 * (v108 & 0x7FFFFFFF) + 8);
                goto LABEL_2812;
              }
              if (sub_1C499FA14(v108, v109, *(_QWORD *)(v3 + 24)))
              {
                v1283 = (uint64_t *)((v1981 & 0x80000000) != 0
                                  ? *(_QWORD *)(v106 + 24) + 16 * (v1981 & 0x7FFFFFFF) + 8
                                  : *(_QWORD *)(v106 + 272) + 8 * v1981);
                v1287 = *v1283;
                if (v1287)
                {
                  v1630 = (uint64_t *)v3;
                  if ((*(_BYTE *)(v1287 + 3) & 1) != 0
                    || (v1287 = *(_QWORD *)(v1287 + 24)) != 0 && (*(_BYTE *)(v1287 + 3) & 1) != 0)
                  {
                    v1645 = *(_QWORD *)(v1287 + 8);
                    if (v1645)
                    {
                      if (**(_WORD **)(v1645 + 16) == 66 && *(_DWORD *)(v1645 + 40) == 3)
                      {
                        v1646 = *(_QWORD *)(v1645 + 32);
                        v1647 = *(_DWORD *)(v1646 + 36);
                        v1648 = sub_1C554C050(*(_DWORD *)(v1646 + 68), v106);
                        if (v1649)
                        {
                          v1650 = v1648;
                        }
                        else
                        {
                          v1724 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v1645 + 32) + 36), v106);
                          if (!v1725)
                            goto LABEL_2191;
                          v1650 = v1724;
                          v1647 = *(_DWORD *)(*(_QWORD *)(v1645 + 32) + 68);
                        }
                        v1651 = v1647;
                        if ((v1647 & 0x80000000) != 0)
                          v1652 = (uint64_t *)(*(_QWORD *)(v106 + 24) + 16 * (v1647 & 0x7FFFFFFF) + 8);
                        else
                          v1652 = (uint64_t *)(*(_QWORD *)(v106 + 272) + 8 * v1647);
                        v1729 = *v1652;
                        if (v1729)
                        {
                          if ((*(_BYTE *)(v1729 + 3) & 1) != 0
                            || (v1729 = *(_QWORD *)(v1729 + 24)) != 0 && (*(_BYTE *)(v1729 + 3) & 1) != 0)
                          {
                            v1917 = *(_QWORD *)(v1729 + 8);
                            if (v1917)
                            {
                              if (**(_WORD **)(v1917 + 16) == 45 && *(_DWORD *)(v1917 + 40) == 3)
                              {
                                v1918 = *(_QWORD *)(v1917 + 32);
                                v1976 = *(_DWORD *)(v1918 + 36);
                                v1919 = sub_1C554C050(*(_DWORD *)(v1918 + 68), v106);
                                if (!v1920)
                                {
                                  v1919 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v1917 + 32) + 36), v106);
                                  if (!v1921)
                                    goto LABEL_2191;
                                  v1976 = *(_DWORD *)(*(_QWORD *)(v1917 + 32) + 68);
                                }
                                if ((v1651 & 0x80000000) != 0)
                                  v1922 = (uint64_t *)(*(_QWORD *)(v106 + 24) + 16 * (v1651 & 0x7FFFFFFF) + 8);
                                else
                                  v1922 = (uint64_t *)(*(_QWORD *)(v106 + 272) + 8 * v1651);
                                for (i = *v1922; ; i = *(_QWORD *)(i + 24))
                                {
                                  v3 = (uint64_t)v1630;
                                  if (!i)
                                    break;
                                  if ((*(_BYTE *)(i + 3) & 1) == 0)
                                  {
                                    while (1)
                                    {
                                      i = *(_QWORD *)(i + 24);
                                      if (!i)
                                        break;
                                      v3 = (uint64_t)v1630;
                                      if ((*(_BYTE *)(i + 3) & 1) == 0)
                                        goto LABEL_2191;
                                    }
                                    v1941 = *v1630;
                                    v2031 = v1281;
                                    LODWORD(v2032) = 0;
                                    v1942 = sub_1C5544694(v1941, (unint64_t *)&v2031, v1919 + v1650);
                                    v1943 = *(unsigned __int16 *)(a2 + 44) | 0x100000000;
                                    LODWORD(v2046) = v1981;
                                    LODWORD(v2047) = 1;
                                    LODWORD(__s1[0]) = v1976;
                                    LODWORD(v2036) = 0;
                                    *((_QWORD *)&v2036 + 1) = v1942;
                                    v2037 = v1944;
                                    LODWORD(v2038) = 1;
                                    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v1941 + 32))(v1941, 45, &v2046, 1, __s1, 2, v1943);
                                    v63 = *(_QWORD *)(a2 + 24);
                                    if ((*(_BYTE *)a2 & 4) == 0 && (*(_WORD *)(a2 + 44) & 8) != 0)
                                    {
                                      v64 = a2;
                                      do
                                        v64 = *(_QWORD *)(v64 + 8);
                                      while ((*(_WORD *)(v64 + 44) & 8) != 0);
                                      goto LABEL_2820;
                                    }
                                    goto LABEL_2819;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_2191:
              if (**(unsigned __int16 **)(v1996 + 16) == **(unsigned __int16 **)(v1987 + 16)
                && (sub_1C499FE84((_QWORD *)v3, a2) & 1) != 0)
              {
                return 1;
              }
              if (v1281 != (void *)257 && v1281 != (void *)513)
                return sub_1C6037A10((uint64_t *)v3, a2);
              v1289 = sub_1C4825F50((unint64_t *)&v2027);
              if ((_DWORD)v1288 == 1)
              v1290 = 0;
              *(_QWORD *)&v2023 = (8 * (v1289 >> 1)) | 1;
              do
              {
                v1291 = &__s1[v1290];
                *((_DWORD *)v1291 + 2) = 1;
                *v1291 = 0;
                *((_DWORD *)v1291 + 6) = 1;
                v1291[2] = 0;
                v1290 += 4;
              }
              while (v1290 != 8);
              sub_1C54EB4A0(*(_QWORD *)(v3 + 24), v108, (uint64_t)&v2046);
              if (LODWORD(__s1[1]) >= 0x41 && __s1[0])
                MEMORY[0x1CAA32F9C](__s1[0], 0x1000C8000313F17);
              v1292 = v2046;
              __s1[0] = (void *)v2046;
              v1293 = v2047;
              LODWORD(__s1[1]) = v2047;
              LODWORD(v2047) = 0;
              if (DWORD2(v2036) >= 0x41 && (_QWORD)v2036)
              {
                MEMORY[0x1CAA32F9C](v2036, 0x1000C8000313F17);
                *(_QWORD *)&v2036 = *((_QWORD *)&v2047 + 1);
                DWORD2(v2036) = v2048;
                LODWORD(v2048) = 0;
                if (v2047 >= 0x41 && v2046)
                  MEMORY[0x1CAA32F9C](v2046, 0x1000C8000313F17);
              }
              else
              {
                *(_QWORD *)&v2036 = *((_QWORD *)&v2047 + 1);
                DWORD2(v2036) = v2048;
              }
              sub_1C54EB4A0(*(_QWORD *)(v3 + 24), v109, (uint64_t)&v2046);
              if (v2038 >= 0x41 && v2037)
                MEMORY[0x1CAA32F9C](v2037, 0x1000C8000313F17);
              v1971 = (_DWORD *)v2046;
              v2037 = v2046;
              v1975 = v2047;
              LODWORD(v2038) = v2047;
              LODWORD(v2047) = 0;
              if (v2040 >= 0x41 && v2039)
              {
                MEMORY[0x1CAA32F9C](v2039, 0x1000C8000313F17);
                v2039 = *((_QWORD *)&v2047 + 1);
                LODWORD(v2040) = v2048;
                LODWORD(v2048) = 0;
                if (v2047 >= 0x41 && v2046)
                  MEMORY[0x1CAA32F9C](v2046, 0x1000C8000313F17);
              }
              else
              {
                v2039 = *((_QWORD *)&v2047 + 1);
                LODWORD(v2040) = v2048;
              }
              v1294 = sub_1C554C050((int)v109, v106);
              if (!v1295)
                goto LABEL_2236;
              v1296 = v1294;
              v1298 = sub_1C4825F50((unint64_t *)&v2023);
              if ((_DWORD)v1297 == 1)
              LODWORD(v2047) = v1293;
              __src = (void *)v1292;
              v1299 = v1292;
              v1300 = v1293;
              if (v1293 >= 0x41
                && (v1299 = operator new[](),
                    v2046 = v1299,
                    v1300 = v2047,
                    memcpy((void *)v1299, __src, (((unint64_t)v2047 + 63) >> 3) & 0x3FFFFFF8),
                    v1300 > 0x40))
              {
                llvm::APInt::ashrSlowCase((unsigned int *)&v2046, v1298);
                v1300 = v2047;
                if ((_DWORD)v2047)
                  goto LABEL_2215;
              }
              else
              {
                v1301 = v1298;
                if (v1300 == v1298)
                  v1301 = 63;
                v1302 = v1299 << -(char)v1300 >> -(char)v1300 >> v1301;
                if (v1300)
                  v1303 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1300;
                else
                  v1303 = 0;
                v2046 = v1303 & v1302;
                if (v1300)
                {
LABEL_2215:
                  if (v1300 > 0x40)
                  {
                    if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v2046) != v1300)
                    {
                      if (v2046)
                        MEMORY[0x1CAA32F9C](v2046, 0x1000C8000313F17);
                      goto LABEL_2235;
                    }
                  }
                  else if (v2046 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v1300)
                  {
LABEL_2235:
                    v1292 = (unint64_t)__src;
                    goto LABEL_2236;
                  }
                }
              }
              v1304 = v3;
              v1306 = sub_1C4825F50((unint64_t *)&v2023);
              if ((_DWORD)v1305 == 1)
              v1307 = v1296 >> v1306;
              v1309 = sub_1C4825F50((unint64_t *)&v2023);
              if ((_DWORD)v1308 == 1)
              v1310 = v1307 << v1309;
              if (v2047 >= 0x41 && v2046)
                MEMORY[0x1CAA32F9C](v2046, 0x1000C8000313F17);
              v5 = v1310 == v1296;
              v3 = v1304;
              v1292 = (unint64_t)__src;
              if (v5)
              {
                v1311 = *(_QWORD *)v3;
                v2031 = (void *)v2023;
                LODWORD(v2032) = 0;
                LODWORD(v2046) = (_DWORD)v108;
                DWORD2(v2047) = 0;
                v1312 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v1311 + 32))(v1311, 119, &v2031, 1, &v2046, 1, 0);
                v1314 = v1313;
                v1315 = *(_QWORD *)v3;
                v2046 = v2023;
                LODWORD(v2047) = 0;
                v1317 = sub_1C4825F50((unint64_t *)&v2023);
                if ((_DWORD)v1316 == 1)
                v1318 = sub_1C5544694(v1315, &v2046, v1296 >> v1317);
                v1319 = *(_QWORD *)v3;
                LODWORD(v2031) = v1981;
                LODWORD(v2032) = 1;
                v2046 = (unint64_t)v1312;
                *(_QWORD *)&v2047 = v1314;
                DWORD2(v2047) = 1;
                v2048 = v1318;
                v2049 = v1320;
                v2050 = 1;
                (*(void (**)(uint64_t, uint64_t, void **, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v1319 + 32))(v1319, 76, &v2031, 1, &v2046, 2, 0);
                v1321 = *(_QWORD *)(a2 + 24);
                v1322 = a2;
                if ((*(_BYTE *)a2 & 4) == 0)
                {
                  v1322 = a2;
                  if ((*(_WORD *)(a2 + 44) & 8) != 0)
                  {
                    v1322 = a2;
                    do
                      v1322 = *(_QWORD *)(v1322 + 8);
                    while ((*(_WORD *)(v1322 + 44) & 8) != 0);
                  }
                }
                goto LABEL_2232;
              }
LABEL_2236:
              v1324 = sub_1C4825F50((unint64_t *)&v2023);
              if ((_DWORD)v1323 == 1)
              LODWORD(v2047) = v1293;
              v1325 = v1292;
              v1326 = v1293;
              if (v1293 >= 0x41
                && (v1325 = operator new[](),
                    v2046 = v1325,
                    v1326 = v2047,
                    memcpy((void *)v1325, (const void *)v1292, (((unint64_t)v2047 + 63) >> 3) & 0x3FFFFFF8), v1326 > 0x40))
              {
                llvm::APInt::ashrSlowCase((unsigned int *)&v2046, v1324);
                v1326 = v2047;
                if (!(_DWORD)v2047)
                  goto LABEL_2249;
              }
              else
              {
                v1327 = v1324;
                if (v1326 == v1324)
                  v1327 = 63;
                v1328 = v1325 << -(char)v1326 >> -(char)v1326 >> v1327;
                if (v1326)
                  v1329 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1326;
                else
                  v1329 = 0;
                v2046 = v1329 & v1328;
                if (!v1326)
                  goto LABEL_2249;
              }
              if (v1326 > 0x40)
              {
                if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v2046) != v1326)
                  goto LABEL_2260;
              }
              else if (v2046 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v1326)
              {
                goto LABEL_2262;
              }
LABEL_2249:
              if (**(_WORD **)(v1987 + 16) == 127)
              {
                v1330 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v1987 + 32) + 68), v106);
                if (v1331)
                {
                  v1332 = v1330;
                  v1334 = sub_1C4825F50((unint64_t *)&v2023);
                  if ((_DWORD)v1333 == 1)
                  if (v2047 >= 0x41 && v2046)
                    MEMORY[0x1CAA32F9C](v2046, 0x1000C8000313F17);
                  if (v1332 == v1334)
                  {
                    v1996 = v1987;
                    LODWORD(v109) = (_DWORD)v108;
                    goto LABEL_2263;
                  }
LABEL_2262:
                  __s1[0] = v1971;
                  v2037 = v1292;
                  LODWORD(v2038) = v1293;
                  v1292 = (unint64_t)v1971;
                  v1293 = v1975;
                  LODWORD(__s1[1]) = v1975;
LABEL_2263:
                  v1336 = sub_1C4825F50((unint64_t *)&v2023);
                  if ((_DWORD)v1335 == 1)
                  LODWORD(v2047) = v1293;
                  if (v1293 < 0x41)
                    goto LABEL_2267;
                  v1337 = (_DWORD *)operator new[]();
                  v2046 = (unint64_t)v1337;
                  v1338 = (const void *)v1292;
                  v1339 = v3;
                  v1340 = v2047;
                  memcpy(v1337, v1338, (((unint64_t)v2047 + 63) >> 3) & 0x3FFFFFF8);
                  v1293 = v1340;
                  v590 = v1340 > 0x40;
                  v3 = v1339;
                  v1292 = (unint64_t)v1337;
                  if (v590)
                  {
                    llvm::APInt::ashrSlowCase((unsigned int *)&v2046, v1336);
                    v1293 = v2047;
                    if (!(_DWORD)v2047)
                      goto LABEL_2276;
                  }
                  else
                  {
LABEL_2267:
                    v1341 = v1336;
                    if (v1293 == v1336)
                      v1341 = 63;
                    v1342 = (uint64_t)(v1292 << -(char)v1293) >> -(char)v1293 >> v1341;
                    if (v1293)
                      v1343 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1293;
                    else
                      v1343 = 0;
                    v2046 = v1343 & v1342;
                    if (!v1293)
                      goto LABEL_2276;
                  }
                  if (v1293 > 0x40)
                  {
                    if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v2046) != v1293)
                      goto LABEL_2289;
                  }
                  else if (v2046 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v1293)
                  {
                    goto LABEL_2291;
                  }
LABEL_2276:
                  if (**(_WORD **)(v1996 + 16) == 127)
                  {
                    v1344 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v1996 + 32) + 68), v106);
                    if (v1345)
                    {
                      v1346 = v1344;
                      v1348 = sub_1C4825F50((unint64_t *)&v2023);
                      if ((_DWORD)v1347 == 1)
                      if (v2047 >= 0x41 && v2046)
                        MEMORY[0x1CAA32F9C](v2046, 0x1000C8000313F17);
                      if (v1346 != v1348)
                        goto LABEL_2291;
                      v1349 = *(_QWORD *)v3;
                      v2031 = (void *)v2023;
                      LODWORD(v2032) = 0;
                      LODWORD(v2046) = (_DWORD)v109;
                      DWORD2(v2047) = 0;
                      v1350 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v1349 + 32))(v1349, 119, &v2031, 1, &v2046, 1, 0);
                      v1352 = v1351;
                      v1353 = *(_QWORD *)v3;
                      v2031 = (void *)v2023;
                      LODWORD(v2032) = 0;
                      LODWORD(v2046) = *(_DWORD *)(*(_QWORD *)(v1996 + 32) + 36);
                      DWORD2(v2047) = 0;
                      v1354 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v1353 + 32))(v1353, 119, &v2031, 1, &v2046, 1, 0);
                      v1355 = *(_QWORD *)v3;
                      LODWORD(v2031) = v1981;
                      LODWORD(v2032) = 1;
                      v2046 = (unint64_t)v1350;
                      *(_QWORD *)&v2047 = v1352;
                      DWORD2(v2047) = 1;
                      v2048 = v1354;
                      v2049 = v1356;
                      v2050 = 1;
                      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v1355 + 32))(v1355, 76, &v2031, 1, &v2046, 2, 0);
                      v1321 = *(_QWORD *)(a2 + 24);
                      v1322 = a2;
                      if ((*(_BYTE *)a2 & 4) == 0)
                      {
                        v1322 = a2;
                        if ((*(_WORD *)(a2 + 44) & 8) != 0)
                        {
                          v1322 = a2;
                          do
                            v1322 = *(_QWORD *)(v1322 + 8);
                          while ((*(_WORD *)(v1322 + 44) & 8) != 0);
                        }
                      }
LABEL_2232:
                      sub_1C487FE80(v1321 + 40, a2, *(_QWORD *)(v1322 + 8));
                      v437 = 1;
                      goto LABEL_2292;
                    }
                    v1293 = v2047;
                  }
                  if (v1293 < 0x41)
                  {
LABEL_2291:
                    v437 = 0;
LABEL_2292:
                    for (j = 0; j != -8; j -= 4)
                    {
                      v1358 = &__s1[j];
                      if (*(_DWORD *)&v2041[j * 8 - 8] >= 0x41u)
                      {
                        v1359 = v1358[6];
                        if (v1359)
                          MEMORY[0x1CAA32F9C](v1359, 0x1000C8000313F17);
                      }
                      if (*((_DWORD *)v1358 + 10) >= 0x41u)
                      {
                        v1360 = v1358[4];
                        if (v1360)
                          MEMORY[0x1CAA32F9C](v1360, 0x1000C8000313F17);
                      }
                    }
                    goto LABEL_2655;
                  }
LABEL_2289:
                  if (v2046)
                    MEMORY[0x1CAA32F9C](v2046, 0x1000C8000313F17);
                  goto LABEL_2291;
                }
                v1326 = v2047;
              }
              if (v1326 < 0x41)
                goto LABEL_2262;
LABEL_2260:
              if (v2046)
                MEMORY[0x1CAA32F9C](v2046, 0x1000C8000313F17);
              goto LABEL_2262;
            }
          }
          v424 = (uint64_t *)(*(_QWORD *)(v106 + 272) + 8 * (_QWORD)v109);
          goto LABEL_2172;
        case 'C':
          v87 = *(_QWORD *)v3;
          v88 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40);
          v89 = *(_DWORD **)(a2 + 32);
          v90 = v89[1];
          if (v90 < 0 && (v90 & 0x7FFFFFFFu) < *(_DWORD *)(v88 + 432))
            v91 = *(_QWORD *)(*(_QWORD *)(v88 + 424) + 8 * (v90 & 0x7FFFFFFF));
          else
            v91 = 0;
          *(_QWORD *)&v2027 = v91;
          v284 = v89[9];
          v285 = v89[17];
          if ((v284 & 0x80000000) != 0)
            v286 = (uint64_t *)(*(_QWORD *)(v88 + 24) + 16 * (v284 & 0x7FFFFFFF) + 8);
          else
            v286 = (uint64_t *)(*(_QWORD *)(v88 + 272) + 8 * v284);
          v411 = *v286;
          if (v411
            && ((*(_BYTE *)(v411 + 3) & 1) != 0
             || (v411 = *(_QWORD *)(v411 + 24)) != 0 && (*(_BYTE *)(v411 + 3) & 1) != 0))
          {
            v412 = *(_QWORD *)(v411 + 8);
            if ((v285 & 0x80000000) != 0)
              goto LABEL_2092;
          }
          else
          {
            v412 = 0;
            if ((v285 & 0x80000000) != 0)
            {
LABEL_2092:
              v413 = (uint64_t *)(*(_QWORD *)(v88 + 24) + 16 * (v285 & 0x7FFFFFFF) + 8);
LABEL_2093:
              v1242 = *v413;
              if ((*(_BYTE *)(v1242 + 3) & 1) == 0)
                v1242 = *(_QWORD *)(v1242 + 24);
              v1243 = *(_QWORD *)(v1242 + 8);
              *(_QWORD *)(v87 + 40) = *(_QWORD *)(a2 + 24);
              *(_QWORD *)(v87 + 48) = a2;
              v1244 = **(unsigned __int16 **)(v412 + 16);
              v1245 = **(unsigned __int16 **)(v1243 + 16);
              if (v1244 == 68 && v1245 == 68)
              {
                v1246 = *(_QWORD *)v3;
                LODWORD(__s1[0]) = v90;
                LODWORD(__s1[1]) = 1;
                sub_1C5544694(v1246, (unint64_t *)__s1, 0);
                v63 = *(_QWORD *)(a2 + 24);
                v64 = a2;
                if ((*(_BYTE *)a2 & 4) == 0)
                {
                  v64 = a2;
                  if ((*(_WORD *)(a2 + 44) & 8) != 0)
                  {
                    v64 = a2;
                    do
                      v64 = *(_QWORD *)(v64 + 8);
                    while ((*(_WORD *)(v64 + 44) & 8) != 0);
                  }
                }
                goto LABEL_2820;
              }
              if (v1244 == 68 || v1245 == 68)
              {
                if (v1244 == 68)
                  v1257 = v284;
                else
                  v1257 = v285;
                v1258 = *(_QWORD *)v3;
                LODWORD(v2046) = v90;
                LODWORD(v2047) = 1;
                LODWORD(__s1[0]) = v1257;
                LODWORD(v2036) = 0;
                (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v1258 + 32))(v1258, 19, &v2046, 1, __s1, 1, 0);
                v63 = *(_QWORD *)(a2 + 24);
                v64 = a2;
                if ((*(_BYTE *)a2 & 4) == 0)
                {
                  v64 = a2;
                  if ((*(_WORD *)(a2 + 44) & 8) != 0)
                  {
                    v64 = a2;
                    do
                      v64 = *(_QWORD *)(v64 + 8);
                    while ((*(_WORD *)(v64 + 44) & 8) != 0);
                  }
                }
                goto LABEL_2820;
              }
              v1247 = sub_1C554C1FC(v285, v88);
              if (!v1248)
                goto LABEL_2132;
              v1249 = v1247;
              if (!v1247)
              {
                v1259 = *(_QWORD *)v3;
                LODWORD(v2046) = v90;
                LODWORD(v2047) = 1;
                LODWORD(__s1[0]) = v284;
                LODWORD(v2036) = 0;
                (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v1259 + 32))(v1259, 19, &v2046, 1, __s1, 1, 0);
                v63 = *(_QWORD *)(a2 + 24);
                v64 = a2;
                if ((*(_BYTE *)a2 & 4) == 0)
                {
                  v64 = a2;
                  if ((*(_WORD *)(a2 + 44) & 8) != 0)
                  {
                    v64 = a2;
                    do
                      v64 = *(_QWORD *)(v64 + 8);
                    while ((*(_WORD *)(v64 + 44) & 8) != 0);
                  }
                }
                goto LABEL_2820;
              }
              v1251 = sub_1C4825F50((unint64_t *)&v2027);
              if ((_DWORD)v1250 == 1)
              LODWORD(v2047) = v1251;
              if (v1251 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v2046, v1249, 0);
                v1251 = v2047;
                if (v2047 > 0x40)
                {
                  v1274 = 0;
                  v1275 = ((unint64_t)v2047 + 63) >> 6;
                  v1253 = (_DWORD *)v2046;
                  do
                  {
                    v590 = v1275-- < 1;
                    if (v590)
                      break;
                    v1276 = *(_QWORD *)(v2046 + 8 * v1275);
                    v1274 += __clz(v1276);
                  }
                  while (!v1276);
                  v1277 = v2047 | 0xFFFFFFC0;
                  if ((v2047 & 0x3F) == 0)
                    v1277 = 0;
                  if (v1274 + v1277 != (_DWORD)v2047 - 1)
                  {
LABEL_2130:
                    if (v1253)
                      MEMORY[0x1CAA32F9C](v1253, 0x1000C8000313F17);
                    goto LABEL_2132;
                  }
LABEL_2113:
                  if (sub_1C499F11C(v412, v88))
                  {
                    v1254 = *(int **)(v412 + 32);
                    v1255 = dword_1C6612E34[v1254[12]];
                    v1256 = *(_QWORD *)v3;
                    if ((**(_WORD **)(v412 + 16) & 0xFFFE) == 0x86)
                    {
                      LODWORD(v2031) = v90;
                      LODWORD(v2032) = 1;
                      LODWORD(__s1[0]) = v1255;
                      LODWORD(v2036) = 2;
                      DWORD2(v2036) = v1254[17];
                      LODWORD(v2038) = 0;
                      LODWORD(v2039) = v1254[25];
                      *(_DWORD *)v2041 = 0;
                    }
                    else
                    {
                      LODWORD(v2031) = v90;
                      LODWORD(v2032) = 1;
                      LODWORD(__s1[0]) = v1255;
                      LODWORD(v2036) = 2;
                      DWORD2(v2036) = v1254[17];
                      LODWORD(v2038) = 0;
                      LODWORD(v2039) = v1254[25];
                      *(_DWORD *)v2041 = 0;
                      *(_DWORD *)&v2041[8] = v1254[33];
                      *(_DWORD *)v2042 = 0;
                      *(_DWORD *)&v2042[8] = v1254[41];
                      *(_DWORD *)&v2042[24] = 0;
                    }
                    (*(void (**)(void))(*(_QWORD *)v1256 + 32))();
                    v1273 = a2;
                    if ((*(_BYTE *)a2 & 4) == 0)
                    {
                      v1273 = a2;
                      if ((*(_WORD *)(a2 + 44) & 8) != 0)
                      {
                        v1273 = a2;
                        do
                          v1273 = *(_QWORD *)(v1273 + 8);
                        while ((*(_WORD *)(v1273 + 44) & 8) != 0);
                      }
                    }
                    sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v1273 + 8));
                    if (v1251 < 0x41 || !v1253)
                      return 1;
                    goto LABEL_2069;
                  }
                  if (v1251 >= 0x41)
                    goto LABEL_2130;
LABEL_2132:
                  LODWORD(v2031) = 0;
                  LODWORD(v2023) = 0;
                  __s1[0] = &v2031;
                  __s1[1] = &v2023;
                  if (!sub_1C49BC770((uint64_t)__s1, v88, v284) || (_DWORD)v2023 != (_DWORD)v285)
                    return sub_1C6037A10((uint64_t *)v3, a2);
                  v1260 = *(llvm::ConstantInt ******)v3;
                  __s1[0] = (void *)v2027;
                  LODWORD(__s1[1]) = 0;
                  v1263 = sub_1C4825F50((unint64_t *)&v2027);
                  if ((_DWORD)v1261 == 1)
                  LODWORD(v2047) = v1263;
                  if (v1263 > 0x40)
                  {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v2046, -1, 1);
                  }
                  else
                  {
                    v1264 = (_DWORD *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v1263);
                    if (!v1263)
                      v1264 = 0;
                    v2046 = (unint64_t)v1264;
                  }
                  v1265 = llvm::ConstantInt::get(***v1260[1], (llvm::LLVMContext *)&v2046, v1262);
                  v1266 = ((uint64_t (*)(llvm::ConstantInt *****, void **, llvm::ValueHandleBase *))(*v1260)[2])(v1260, __s1, v1265);
                  v1268 = v1267;
                  if (v2047 >= 0x41 && v2046)
                    MEMORY[0x1CAA32F9C](v2046, 0x1000C8000313F17);
                  v1269 = *(_QWORD *)v3;
                  v2046 = v2027;
                  LODWORD(v2047) = 0;
                  LODWORD(__s1[0]) = (_DWORD)v2031;
                  LODWORD(v2036) = 0;
                  *((_QWORD *)&v2036 + 1) = v1266;
                  v2037 = v1268;
                  LODWORD(v2038) = 1;
                  v1270 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v1269 + 32))(v1269, 67, &v2046, 1, __s1, 2, 0);
                  v1271 = *(_QWORD *)v3;
                  LODWORD(v2046) = v90;
                  LODWORD(v2047) = 1;
                  __s1[0] = v1270;
                  __s1[1] = v1272;
                  LODWORD(v2036) = 1;
                  DWORD2(v2036) = v2023;
                  LODWORD(v2038) = 0;
                  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v1271 + 32))(v1271, 65, &v2046, 1, __s1, 2, 0);
                  v63 = *(_QWORD *)(a2 + 24);
                  v64 = a2;
                  if ((*(_BYTE *)a2 & 4) == 0)
                  {
                    v64 = a2;
                    if ((*(_WORD *)(a2 + 44) & 8) != 0)
                    {
                      v64 = a2;
                      do
                        v64 = *(_QWORD *)(v64 + 8);
                      while ((*(_WORD *)(v64 + 44) & 8) != 0);
                    }
                  }
                  goto LABEL_2820;
                }
                v1253 = (_DWORD *)v2046;
              }
              else
              {
                if (v1251)
                  v1252 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1251;
                else
                  v1252 = 0;
                v1253 = (_DWORD *)(v1252 & v1249);
                v2046 = (unint64_t)v1253;
              }
              if (v1253 != (_DWORD *)1)
                goto LABEL_2132;
              goto LABEL_2113;
            }
          }
          v413 = (uint64_t *)(*(_QWORD *)(v88 + 272) + 8 * v285);
          goto LABEL_2093;
        case 'D':
        case 'F':
        case 'G':
        case 'H':
        case 'I':
        case 'K':
        case 'L':
        case 'M':
        case 'N':
        case 'O':
          return sub_1C6037A10((uint64_t *)v3, a2);
        case 'E':
          if (!sub_1C4778650(*(_QWORD *)(*(_QWORD *)v3 + 24), *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4)))
            return sub_1C6037A10((uint64_t *)v3, a2);
          v63 = *(_QWORD *)(a2 + 24);
          v64 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v64 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v64 = a2;
              do
                v64 = *(_QWORD *)(v64 + 8);
              while ((*(_WORD *)(v64 + 44) & 8) != 0);
            }
          }
          goto LABEL_2820;
        case 'J':
          v92 = *(_QWORD *)v3;
          *(_QWORD *)(v92 + 40) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(v92 + 48) = a2;
          v93 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40);
          v94 = (*(_DWORD *)(a2 + 40) - 1);
          v95 = *(_QWORD *)(a2 + 32);
          v96 = *(unsigned int *)(v95 + 32 * v94 + 4);
          v97 = *(_DWORD *)(v95 + 4);
          if (v97 < 0 && (v98 = v97 & 0x7FFFFFFF, v98 < *(_DWORD *)(v93 + 432)))
            v99 = *(void **)(*(_QWORD *)(v93 + 424) + 8 * v98);
          else
            v99 = 0;
          v2031 = v99;
          if ((v96 & 0x80000000) != 0)
            v287 = (uint64_t *)(*(_QWORD *)(v93 + 24) + 16 * (v96 & 0x7FFFFFFF) + 8);
          else
            v287 = (uint64_t *)(*(_QWORD *)(v93 + 272) + 8 * v96);
          v414 = *v287;
          if ((*(_BYTE *)(v414 + 3) & 1) == 0)
            v414 = *(_QWORD *)(v414 + 24);
          v415 = *(_QWORD *)(v414 + 8);
          LODWORD(v414) = **(unsigned __int16 **)(v415 + 16);
          if ((_DWORD)v414 == 82)
          {
            v96 = *(unsigned int *)(*(_QWORD *)(v415 + 32) + 36);
            if ((v96 & 0x80000000) != 0)
              v416 = (uint64_t *)(*(_QWORD *)(v93 + 24) + 16 * (v96 & 0x7FFFFFFF) + 8);
            else
              v416 = (uint64_t *)(*(_QWORD *)(v93 + 272) + 8 * v96);
            v414 = *v416;
            if ((*(_BYTE *)(v414 + 3) & 1) == 0)
              v414 = *(_QWORD *)(v414 + 24);
            v415 = *(_QWORD *)(v414 + 8);
            LOWORD(v414) = **(_WORD **)(v415 + 16);
          }
          if ((v414 & 0xFFFE) == 0x4C)
          {
            v535 = *(_DWORD *)(*(_QWORD *)(v415 + 32) + 36);
            if (v535 < 0 && (v536 = v535 & 0x7FFFFFFF, v536 < *(_DWORD *)(v93 + 432)))
              v537 = *(void **)(*(_QWORD *)(v93 + 424) + 8 * v536);
            else
              v537 = 0;
            if (v537 == v99)
            {
              if ((_DWORD)v94)
              {
                v538 = 0;
                do
                {
                  v539 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v538 + 4);
                  v540 = v538 + 1;
                  if (*(_QWORD *)(*(_QWORD *)(v93 + 24) + 16 * (v539 & 0x7FFFFFFF)) >= 8uLL
                    && (*(_QWORD *)(*(_QWORD *)(v93 + 24) + 16 * (v539 & 0x7FFFFFFF)) & 4) == 0)
                  {
                    v549 = *(_QWORD *)v3;
                    LODWORD(v2046) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v538 + 4);
                    LODWORD(v2047) = 1;
                    LODWORD(__s1[0]) = *(_DWORD *)(*(_QWORD *)(v415 + 32) + 32 * v540 + 4);
                    LODWORD(v2036) = 0;
                    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v549 + 32))(v549, 19, &v2046, 1, __s1, 1, 0);
                  }
                  else
                  {
                    sub_1C54F8CF8(*(_QWORD **)(v3 + 16), v93, v539);
                    v542 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 32 * v538 + 4);
                    v543 = *(_DWORD *)(*(_QWORD *)(v415 + 32) + 32 * v540 + 4);
                    v544 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v93 + 16) + 176))(*(_QWORD *)(*(_QWORD *)v93 + 16));
                    v545 = v3;
                    if ((v542 & 0x80000000) != 0)
                      v546 = (uint64_t *)(*(_QWORD *)(v93 + 24) + 16 * (v542 & 0x7FFFFFFF) + 8);
                    else
                      v546 = (uint64_t *)(*(_QWORD *)(v93 + 272) + 8 * v542);
                    v547 = *v546;
                    if (*v546)
                    {
                      do
                      {
                        v548 = *(_QWORD *)(v547 + 24);
                        if (v543 - 1 <= 0x3FFFFFFE)
                          llvm::MachineOperand::substPhysReg((unsigned int *)v547, v543, v544);
                        else
                          llvm::MachineOperand::setReg(v547, v543);
                        v547 = v548;
                      }
                      while (v548);
                    }
                    v3 = v545;
                    sub_1C54F8DA0(*(_QWORD *)(v545 + 16));
                  }
                  v538 = v540;
                }
                while (v540 != v94);
              }
              v63 = *(_QWORD *)(a2 + 24);
              v64 = a2;
              if ((*(_BYTE *)a2 & 4) == 0)
              {
                v64 = a2;
                if ((*(_WORD *)(a2 + 44) & 8) != 0)
                {
                  v64 = a2;
                  do
                    v64 = *(_QWORD *)(v64 + 8);
                  while ((*(_WORD *)(v64 + 44) & 8) != 0);
                }
              }
              goto LABEL_2820;
            }
          }
          v550 = sub_1C554C050(v96, v93);
          if (v551)
          {
            v552 = v550;
            v554 = sub_1C4825F50((unint64_t *)&v2031);
            if ((_DWORD)v553 == 1)
            v556 = sub_1C4825F50((unint64_t *)&v2031);
            if ((_DWORD)v555 == 1)
            if (*(_DWORD *)(a2 + 40) != 1)
            {
              v557 = 0;
              v558 = 0;
              v559 = ~(-1 << v554);
              v560 = 4;
              do
              {
                v561 = *(_QWORD *)v3;
                LODWORD(__s1[0]) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + v560);
                LODWORD(__s1[1]) = 1;
                sub_1C5544694(v561, (unint64_t *)__s1, (v559 & (unint64_t)v552) >> v557);
                v559 <<= v556;
                ++v558;
                v557 += v556;
                v560 += 32;
              }
              while (v558 < (*(_DWORD *)(a2 + 40) - 1));
            }
            v63 = *(_QWORD *)(a2 + 24);
            v64 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v64 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v64 = a2;
                do
                  v64 = *(_QWORD *)(v64 + 8);
                while ((*(_WORD *)(v64 + 44) & 8) != 0);
              }
            }
            goto LABEL_2820;
          }
          if (*(_DWORD *)(a2 + 40) != 3)
            return sub_1C6037A10((uint64_t *)v3, a2);
          if (sub_1C4778650(v93, *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4))
            || !sub_1C4778650(v93, *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36)))
          {
            if (*(_DWORD *)(a2 + 40) != 3)
              return sub_1C6037A10((uint64_t *)v3, a2);
            v814 = (uint64_t *)((v96 & 0x80000000) != 0
                             ? *(_QWORD *)(v93 + 24) + 16 * (v96 & 0x7FFFFFFF) + 8
                             : *(_QWORD *)(v93 + 272) + 8 * v96);
            v898 = *v814;
            if (!v898)
              return sub_1C6037A10((uint64_t *)v3, a2);
            if ((*(_BYTE *)(v898 + 3) & 1) == 0)
            {
              v898 = *(_QWORD *)(v898 + 24);
              if (!v898 || (*(_BYTE *)(v898 + 3) & 1) == 0)
                return sub_1C6037A10((uint64_t *)v3, a2);
            }
            v1701 = *(_QWORD *)(v898 + 8);
            if (!v1701 || **(_WORD **)(v1701 + 16) != 126 || *(_DWORD *)(v1701 + 40) != 2)
              return sub_1C6037A10((uint64_t *)v3, a2);
            v1702 = *(_DWORD *)(*(_QWORD *)(v1701 + 32) + 36);
            v1703 = *(_QWORD *)(a2 + 32);
            v1704 = *(_DWORD *)(v1703 + 4);
            if (v1704 < 0 && (v1704 & 0x7FFFFFFFu) < *(_DWORD *)(v93 + 432))
              v1705 = *(_DWORD **)(*(_QWORD *)(v93 + 424) + 8 * (v1704 & 0x7FFFFFFF));
            else
              v1705 = 0;
            if (v1702 < 0 && (v1702 & 0x7FFFFFFFu) < *(_DWORD *)(v93 + 432))
              v1775 = *(_DWORD **)(*(_QWORD *)(v93 + 424) + 8 * (v1702 & 0x7FFFFFFF));
            else
              v1775 = 0;
            v1776 = *(_DWORD *)(v1703 + 36);
            if (v1705 != v1775)
            {
              v1777 = *(_QWORD *)v3;
              v2046 = (unint64_t)v1705;
              LODWORD(v2047) = 0;
              LODWORD(__s1[0]) = v1702;
              LODWORD(v2036) = 0;
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v1777 + 32))(v1777, 126, &v2046, 1, __s1, 1, 0);
              v1702 = *(_DWORD *)(*(_QWORD *)(v1778 + 32) + 4);
            }
            v1779 = *(_QWORD *)v3;
            LODWORD(v2046) = v1704;
            LODWORD(v2047) = 1;
            LODWORD(__s1[0]) = v1702;
            LODWORD(v2036) = 0;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v1779 + 32))(v1779, 19, &v2046, 1, __s1, 1, 0);
            v1780 = *(_QWORD *)v3;
            LODWORD(__s1[0]) = v1776;
            LODWORD(__s1[1]) = 1;
            sub_1C5544694(v1780, (unint64_t *)__s1, 0);
            v63 = *(_QWORD *)(a2 + 24);
            v64 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v64 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v64 = a2;
                do
                  v64 = *(_QWORD *)(v64 + 8);
                while ((*(_WORD *)(v64 + 44) & 8) != 0);
              }
            }
            goto LABEL_2820;
          }
          v562 = *(_QWORD *)(a2 + 32);
          v563 = *(_DWORD *)(v562 + 68);
          if (v563 < 0 && (v564 = v563 & 0x7FFFFFFF, v564 < *(_DWORD *)(v93 + 432)))
          {
            *(_QWORD *)&v2027 = *(_QWORD *)(*(_QWORD *)(v93 + 424) + 8 * v564);
            if ((v2027 & 1) != 0)
            {
              v565 = v562 + 64;
LABEL_1331:
              v896 = *(_DWORD *)(v565 + 4);
              v897 = *(_QWORD *)v3;
              LODWORD(v2046) = *(_DWORD *)(v562 + 4);
              LODWORD(v2047) = 1;
              LODWORD(__s1[0]) = v896;
              LODWORD(v2036) = 0;
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v897 + 32))(v897, 119, &v2046, 1, __s1, 1, 0);
              v63 = *(_QWORD *)(a2 + 24);
              v64 = a2;
              if ((*(_BYTE *)a2 & 4) == 0)
              {
                v64 = a2;
                if ((*(_WORD *)(a2 + 44) & 8) != 0)
                {
                  v64 = a2;
                  do
                    v64 = *(_QWORD *)(v64 + 8);
                  while ((*(_WORD *)(v64 + 44) & 8) != 0);
                }
              }
              goto LABEL_2820;
            }
          }
          else
          {
            *(_QWORD *)&v2027 = 0;
          }
          v892 = *(uint64_t **)v3;
          v894 = sub_1C4825F50((unint64_t *)&v2027);
          if ((_DWORD)v893 == 1)
          v2046 = (8 * v894) | 1;
          LODWORD(v2047) = 0;
          LODWORD(__s1[0]) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 68);
          LODWORD(v2036) = 0;
          sub_1C5546EF4(v892, (uint64_t *)&v2046, (int *)__s1);
          v565 = *(_QWORD *)(v895 + 32);
          v562 = *(_QWORD *)(a2 + 32);
          goto LABEL_1331;
        case 'P':
          v100 = *(_QWORD *)v3;
          v101 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40);
          v102 = *(_QWORD *)(a2 + 32);
          v103 = *(unsigned int *)(v102 + 36);
          if ((v103 & 0x80000000) != 0)
            v104 = (uint64_t *)(*(_QWORD *)(v101 + 24) + 16 * (v103 & 0x7FFFFFFF) + 8);
          else
            v104 = (uint64_t *)(*(_QWORD *)(v101 + 272) + 8 * v103);
          v417 = *v104;
          if (!v417)
            return sub_1C6037A10((uint64_t *)v3, a2);
          v418 = *(_DWORD *)(v102 + 4);
          if ((*(_BYTE *)(v417 + 3) & 1) == 0)
          {
            v417 = *(_QWORD *)(v417 + 24);
            if (!v417 || (*(_BYTE *)(v417 + 3) & 1) == 0)
              return sub_1C6037A10((uint64_t *)v3, a2);
          }
          v419 = *(_QWORD *)(v417 + 8);
          if (!v419 || **(_WORD **)(v419 + 16) != 81 || *(_DWORD *)(v419 + 40) != 2)
            return sub_1C6037A10((uint64_t *)v3, a2);
          v420 = *(_DWORD *)(*(_QWORD *)(v419 + 32) + 36);
          *(_QWORD *)(v100 + 40) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(v100 + 48) = a2;
          v421 = *(uint64_t **)v3;
          LODWORD(v2046) = v418;
          LODWORD(v2047) = 1;
          LODWORD(__s1[0]) = v420;
          LODWORD(v2036) = 0;
          sub_1C5546B4C(v421, 126, &v2046, (int *)__s1);
          v63 = *(_QWORD *)(a2 + 24);
          v64 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v64 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v64 = a2;
              do
                v64 = *(_QWORD *)(v64 + 8);
              while ((*(_WORD *)(v64 + 44) & 8) != 0);
            }
          }
          goto LABEL_2820;
        case 'Q':
          v83 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40);
          v84 = *(_QWORD *)(a2 + 32);
          v85 = *(_DWORD *)(v84 + 4);
          if (v85 < 0 && (v85 & 0x7FFFFFFFu) < *(_DWORD *)(v83 + 432))
            v86 = *(void **)(*(_QWORD *)(v83 + 424) + 8 * (v85 & 0x7FFFFFFF));
          else
            v86 = 0;
          v280 = *(_DWORD *)(v84 + 36);
          LODWORD(v2031) = 0;
          __s1[0] = &v2031;
          __s1[1] = v86;
          LODWORD(v2046) = v280;
          if ((sub_1C49BCC18((uint64_t)__s1, v83, (unsigned int *)&v2046) & 1) == 0)
            return sub_1C6037A10((uint64_t *)v3, a2);
          v281 = *(_QWORD *)v3;
          *(_QWORD *)(v281 + 40) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(v281 + 48) = a2;
          v282 = *(_QWORD *)v3;
          LODWORD(v2046) = v85;
          LODWORD(v2047) = 1;
          LODWORD(__s1[0]) = (_DWORD)v2031;
          LODWORD(v2036) = 0;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v282 + 32))(v282, 19, &v2046, 1, __s1, 1, 0);
          v63 = *(_QWORD *)(a2 + 24);
          if ((*(_BYTE *)a2 & 4) != 0 || (*(_WORD *)(a2 + 44) & 8) == 0)
          {
            v283 = *(_QWORD *)(a2 + 8);
            goto LABEL_2821;
          }
          v64 = a2;
          do
            v64 = *(_QWORD *)(v64 + 8);
          while ((*(_WORD *)(v64 + 44) & 8) != 0);
          goto LABEL_2820;
        default:
          switch(v4)
          {
            case '-':
              v31 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 4);
              v32 = *(_QWORD *)v3;
              v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40);
              *(_QWORD *)(v32 + 40) = *(_QWORD *)(a2 + 24);
              *(_QWORD *)(v32 + 48) = a2;
              v34 = *(_DWORD **)(a2 + 32);
              v35 = v34[9];
              v36 = v34[17];
              if ((v31 & 0x80000000) != 0
                && (v31 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v33 + 432))
              {
                v37 = *(_QWORD *)(*(_QWORD *)(v33 + 424) + 8 * (v31 & 0x7FFFFFFF));
              }
              else
              {
                v37 = 0;
              }
              *(_QWORD *)&v2027 = v37;
              if (sub_1C499F538(**(_WORD **)(a2 + 16), v34, v33))
              {
                if ((v36 & 0x80000000) != 0)
                  v378 = (uint64_t *)(*(_QWORD *)(v33 + 24) + 16 * (v36 & 0x7FFFFFFF) + 8);
                else
                  v378 = (uint64_t *)(*(_QWORD *)(v33 + 272) + 8 * v36);
                v569 = *v378;
                if (v569)
                {
                  v1538 = (uint64_t **)v3;
                  if (((*(_BYTE *)(v569 + 3) & 1) != 0
                     || (v569 = *(_QWORD *)(v569 + 24)) != 0 && (*(_BYTE *)(v569 + 3) & 1) != 0)
                    && (v1539 = *(_QWORD *)(v569 + 8)) != 0
                    && **(_WORD **)(v1539 + 16) == 128
                    && *(_DWORD *)(v1539 + 40) == 3)
                  {
                    v1697 = *(_QWORD *)(v1539 + 32);
                    v570 = *(_DWORD *)(v1697 + 36);
                    v1698 = sub_1C554C050(*(_DWORD *)(v1697 + 68), v33);
                    if (v1699)
                    {
                      v1541 = v1698;
                      goto LABEL_2681;
                    }
                  }
                  else
                  {
                    v570 = 0;
                  }
                  if ((v35 & 0x80000000) == 0)
                    goto LABEL_672;
                }
                else
                {
                  v570 = 0;
                  if ((v35 & 0x80000000) == 0)
                  {
LABEL_672:
                    v571 = (uint64_t *)(*(_QWORD *)(v33 + 272) + 8 * v35);
LABEL_2678:
                    v1540 = *v571;
                    if (!v1540)
                    {
                      v1538 = (uint64_t **)v3;
LABEL_2680:
                      v1541 = 0;
                      goto LABEL_2681;
                    }
                    v1538 = (uint64_t **)v3;
                    if ((*(_BYTE *)(v1540 + 3) & 1) == 0)
                    {
                      v1540 = *(_QWORD *)(v1540 + 24);
                      if (!v1540 || (*(_BYTE *)(v1540 + 3) & 1) == 0)
                        goto LABEL_2680;
                    }
                    v1556 = *(_QWORD *)(v1540 + 8);
                    if (!v1556 || **(_WORD **)(v1556 + 16) != 128 || *(_DWORD *)(v1556 + 40) != 3)
                      goto LABEL_2680;
                    v1557 = *(_QWORD *)(v1556 + 32);
                    v570 = *(_DWORD *)(v1557 + 36);
                    v1558 = sub_1C554C050(*(_DWORD *)(v1557 + 68), v33);
                    if (v1559)
                      v1541 = v1558;
                    else
                      v1541 = 0;
LABEL_2681:
                    v1543 = 16 * sub_1C4825F50((unint64_t *)&v2027);
                    if ((_DWORD)v1542 == 1)
                    v1544 = llvm::MachineRegisterInfo::createGenericVirtualRegister(v33, v1543 & 0x7FFFFFFF0 | 1, "", 0);
                    v1545 = *v1538;
                    LODWORD(v2046) = v1544;
                    LODWORD(v2047) = 1;
                    LODWORD(__s1[0]) = v570;
                    LODWORD(v2036) = 0;
                    DWORD2(v2036) = v570;
                    LODWORD(v2038) = 0;
                    (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*v1545 + 32))(v1545, 76, &v2046, 1, __s1, 2, 0);
                    v1546 = *v1538;
                    LODWORD(v2046) = v31;
                    LODWORD(v2047) = 1;
                    LODWORD(__s1[0]) = v1544;
                    LODWORD(v2036) = 0;
                    sub_1C5546FE4(v1546, &v2046, (int *)__s1, v1541);
                    v63 = *(_QWORD *)(a2 + 24);
                    if ((*(_BYTE *)a2 & 4) == 0 && (*(_WORD *)(a2 + 44) & 8) != 0)
                    {
                      v64 = a2;
                      do
                        v64 = *(_QWORD *)(v64 + 8);
                      while ((*(_WORD *)(v64 + 44) & 8) != 0);
                      goto LABEL_2820;
                    }
                    goto LABEL_2819;
                  }
                }
                v571 = (uint64_t *)(*(_QWORD *)(v33 + 24) + 16 * (v35 & 0x7FFFFFFF) + 8);
                goto LABEL_2678;
              }
              if ((v31 & 0x80000000) != 0)
                v442 = (uint64_t *)(*(_QWORD *)(v33 + 24) + 16 * (v31 & 0x7FFFFFFF) + 8);
              else
                v442 = (uint64_t *)(*(_QWORD *)(v33 + 272) + 8 * v31);
              v572 = *v442;
              if (!v572)
                goto LABEL_675;
              v1547 = (uint64_t *)v3;
              if ((*(_BYTE *)(v572 + 3) & 1) == 0)
              {
                v572 = *(_QWORD *)(v572 + 24);
                if (!v572 || (*(_BYTE *)(v572 + 3) & 1) == 0)
                  goto LABEL_675;
              }
              v1599 = *(_QWORD *)(v572 + 8);
              if (!v1599 || **(_WORD **)(v1599 + 16) != 45 || *(_DWORD *)(v1599 + 40) != 3)
                goto LABEL_675;
              v1600 = *(_QWORD *)(v1599 + 32);
              LODWORD(v1601) = *(_DWORD *)(v1600 + 36);
              v1602 = sub_1C554C050(*(_DWORD *)(v1600 + 68), v33);
              if (v1603)
              {
                v1606 = v1602;
              }
              else
              {
                v1604 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v1599 + 32) + 36), v33);
                if (v1605)
                {
                  v1606 = v1604;
                  LODWORD(v1601) = *(_DWORD *)(*(_QWORD *)(v1599 + 32) + 68);
                }
                else
                {
LABEL_675:
                  if ((v31 & 0x80000000) != 0)
                    v573 = (uint64_t *)(*(_QWORD *)(v33 + 24) + 16 * (v31 & 0x7FFFFFFF) + 8);
                  else
                    v573 = (uint64_t *)(*(_QWORD *)(v33 + 272) + 8 * v31);
                  v574 = *v573;
                  if (!v574)
                    goto LABEL_679;
                  v1547 = (uint64_t *)v3;
                  if ((*(_BYTE *)(v574 + 3) & 1) == 0)
                  {
                    v574 = *(_QWORD *)(v574 + 24);
                    if (!v574 || (*(_BYTE *)(v574 + 3) & 1) == 0)
                      goto LABEL_679;
                  }
                  v1607 = *(_QWORD *)(v574 + 8);
                  if (!v1607 || **(_WORD **)(v1607 + 16) != 45 || *(_DWORD *)(v1607 + 40) != 3)
                    goto LABEL_679;
                  v1608 = *(_QWORD *)(v1607 + 32);
                  v1601 = *(unsigned int *)(v1608 + 68);
                  v1609 = *(_QWORD *)(v33 + 24);
                  v1610 = (uint64_t *)(v1609 + 16 * (v1601 & 0x7FFFFFFF) + 8);
                  v1611 = *(_QWORD *)(v33 + 272);
                  if ((int)v1601 >= 0)
                    v1610 = (uint64_t *)(v1611 + 8 * v1601);
                  v1612 = *v1610;
                  if ((*(_BYTE *)(v1612 + 3) & 1) == 0)
                    v1612 = *(_QWORD *)(v1612 + 24);
                  v1613 = *(unsigned int *)(v1608 + 36);
                  v1614 = *(_QWORD *)(v1612 + 8);
                  if (**(_WORD **)(v1614 + 16) == 121 && (v1619 = *(_QWORD *)(*(_QWORD *)(v1614 + 32) + 48)) != 0)
                  {
                    LODWORD(v1601) = v1613;
                  }
                  else
                  {
                    v1615 = (uint64_t *)(v1609 + 16 * (v1613 & 0x7FFFFFFF) + 8);
                    v1616 = (uint64_t *)(v1611 + 8 * v1613);
                    if ((int)v1613 >= 0)
                      v1615 = v1616;
                    v1617 = *v1615;
                    if ((*(_BYTE *)(v1617 + 3) & 1) == 0)
                      v1617 = *(_QWORD *)(v1617 + 24);
                    v1618 = *(_QWORD *)(v1617 + 8);
                    if (**(_WORD **)(v1618 + 16) != 121)
                      goto LABEL_679;
                    v1619 = *(_QWORD *)(*(_QWORD *)(v1618 + 32) + 48);
                    if (!v1619)
                      goto LABEL_679;
                  }
                  v1720 = *(void **)(v1619 + 32);
                  v1719 = (llvm::detail::DoubleAPFloat *)(v1619 + 32);
                  if (v1720 == &unk_1C866F1C0)
                    llvm::detail::DoubleAPFloat::bitcastToAPInt(v1719, (unsigned int *)__s1);
                  else
                    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v1719, (unsigned int *)__s1);
                  if (LODWORD(__s1[1]) >= 0x41)
                    v1912 = (void **)__s1[0];
                  else
                    v1912 = __s1;
                  v1606 = (unint64_t)*v1912;
                  if (LODWORD(__s1[1]) >= 0x41 && __s1[0])
                    MEMORY[0x1CAA32F9C]();
                }
              }
              if (!v1606)
              {
                v1700 = *v1547;
                LODWORD(v2046) = v31;
                LODWORD(v2047) = 1;
                LODWORD(__s1[0]) = v1601;
                LODWORD(v2036) = 0;
                (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v1700 + 32))(v1700, 19, &v2046, 1, __s1, 1, 0);
                v63 = *(_QWORD *)(a2 + 24);
                if ((*(_BYTE *)a2 & 4) == 0 && (*(_WORD *)(a2 + 44) & 8) != 0)
                {
                  v64 = a2;
                  do
                    v64 = *(_QWORD *)(v64 + 8);
                  while ((*(_WORD *)(v64 + 44) & 8) != 0);
                  goto LABEL_2820;
                }
                goto LABEL_2819;
              }
              v3 = (uint64_t)v1547;
              if (v1606 >= 0x8000000000000001)
              {
                v1643 = *v1547;
                if ((v1601 & 0x80000000) != 0 && (v1601 & 0x7FFFFFFF) < *(_DWORD *)(v33 + 432))
                  v1644 = *(void **)(*(_QWORD *)(v33 + 424) + 8 * (v1601 & 0x7FFFFFFF));
                else
                  v1644 = 0;
                v2031 = v1644;
                LODWORD(v2032) = 0;
                v1713 = sub_1C5544694(v1643, (unint64_t *)&v2031, -(uint64_t)v1606);
                v1714 = *(unsigned __int16 *)(a2 + 44) | 0x100000000;
                LODWORD(v2046) = v31;
                LODWORD(v2047) = 1;
                LODWORD(__s1[0]) = v1601;
                LODWORD(v2036) = 0;
                *((_QWORD *)&v2036 + 1) = v1713;
                v2037 = v1715;
                LODWORD(v2038) = 1;
                (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v1643 + 32))(v1643, 46, &v2046, 1, __s1, 2, v1714);
                v63 = *(_QWORD *)(a2 + 24);
                if ((*(_BYTE *)a2 & 4) == 0 && (*(_WORD *)(a2 + 44) & 8) != 0)
                {
                  v64 = a2;
                  do
                    v64 = *(_QWORD *)(v64 + 8);
                  while ((*(_WORD *)(v64 + 44) & 8) != 0);
                  goto LABEL_2820;
                }
                goto LABEL_2819;
              }
LABEL_679:
              v575 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40);
              LOWORD(v2046) = *(_WORD *)(a2 + 44);
              v576 = *(unsigned int **)(a2 + 32);
              v577 = v576[1];
              LOBYTE(v2031) = 0;
              if ((v577 & 0x80000000) != 0)
                v578 = (uint64_t *)(v575[3] + 16 * (v577 & 0x7FFFFFFF) + 8);
              else
                v578 = (uint64_t *)(v575[34] + 8 * v577);
              v689 = *v578;
              if (v689)
              {
                while ((*(_BYTE *)(v689 + 3) & 1) != 0)
                {
                  v689 = *(_QWORD *)(v689 + 24);
                  if (!v689)
                    goto LABEL_895;
                }
                v690 = *(_QWORD *)(v689 + 8);
                if (**(_WORD **)(v690 + 16) == 81)
                {
LABEL_894:
                  LOBYTE(v2031) = 1;
                }
                else
                {
                  while (1)
                  {
                    v689 = *(_QWORD *)(v689 + 24);
                    if (!v689)
                      break;
                    if ((*(_BYTE *)(v689 + 3) & 1) == 0)
                    {
                      v706 = *(_QWORD *)(v689 + 8);
                      if (v706 != v690)
                      {
                        v690 = *(_QWORD *)(v689 + 8);
                        if (**(_WORD **)(v706 + 16) == 81)
                          goto LABEL_894;
                      }
                    }
                  }
                }
              }
LABEL_895:
              __s1[0] = v575;
              __s1[1] = (void *)v3;
              *(_QWORD *)&v2036 = &v2046;
              *((_QWORD *)&v2036 + 1) = &v2031;
              v691 = **(unsigned __int16 **)(a2 + 16);
              v692 = v576[9];
              v693 = v576[17];
              v694 = sub_1C49A011C((uint64_t)__s1, v691, v692, v693);
              if (!HIDWORD(v694))
              {
                if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + 11) & 2) == 0
                  || (v694 = sub_1C49A011C((uint64_t)__s1, v691, v693, v692), !HIDWORD(v694)))
                {
                  LODWORD(v2031) = 0;
                  LODWORD(v2023) = 0;
                  v695 = 1;
                  while (1)
                  {
                    v696 = v36;
                    v36 = v35;
                    v697 = v695;
                    __s1[0] = &v2031;
                    __s1[1] = &v2023;
                    LODWORD(v2046) = v35;
                    if (sub_1C49BC874((uint64_t)__s1, v33, (unsigned int *)&v2046))
                    {
                      if (v696 == v2023)
                        break;
                    }
                    if ((v35 & 0x80000000) != 0)
                      v698 = (uint64_t *)(*(_QWORD *)(v33 + 24) + 16 * (v35 & 0x7FFFFFFF) + 8);
                    else
                      v698 = (uint64_t *)(*(_QWORD *)(v33 + 272) + 8 * v35);
                    v699 = *v698;
                    if (v699)
                    {
                      if ((*(_BYTE *)(v699 + 3) & 1) != 0
                        || (v699 = *(_QWORD *)(v699 + 24)) != 0 && (*(_BYTE *)(v699 + 3) & 1) != 0)
                      {
                        v700 = *(_QWORD *)(v699 + 8);
                        if (v700)
                        {
                          if (**(_WORD **)(v700 + 16) == 46 && *(_DWORD *)(v700 + 40) == 3)
                          {
                            v701 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v700 + 32) + 36), v33);
                            if (v702)
                            {
                              v703 = *(_DWORD *)(*(_QWORD *)(v700 + 32) + 68);
                              LODWORD(v2023) = v703;
                              if (!v701)
                              {
                                v704 = *(_QWORD *)v3;
                                LODWORD(v2046) = v31;
                                LODWORD(v2047) = 1;
                                LODWORD(__s1[0]) = v696;
                                LODWORD(v2036) = 0;
                                DWORD2(v2036) = v703;
                                LODWORD(v2038) = 0;
                                v705 = *(void (**)(void))(*(_QWORD *)v704 + 32);
LABEL_1194:
                                v705();
                                v63 = *(_QWORD *)(a2 + 24);
                                v64 = a2;
                                if ((*(_BYTE *)a2 & 4) == 0)
                                {
                                  v64 = a2;
                                  if ((*(_WORD *)(a2 + 44) & 8) != 0)
                                  {
                                    v64 = a2;
                                    do
                                      v64 = *(_QWORD *)(v64 + 8);
                                    while ((*(_WORD *)(v64 + 44) & 8) != 0);
                                  }
                                }
                                goto LABEL_2820;
                              }
                            }
                          }
                        }
                      }
                    }
                    v695 = 0;
                    v35 = v696;
                    if ((v697 & 1) == 0)
                    {
                      if ((v31 & 0x80000000) != 0
                        && (v31 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v33 + 432))
                      {
                        v803 = *(void **)(*(_QWORD *)(v33 + 424) + 8 * (v31 & 0x7FFFFFFF));
                      }
                      else
                      {
                        v803 = 0;
                      }
                      __s1[0] = v803;
                      if ((sub_1C499F8BC((uint64_t *)v3, a2, (unint64_t *)__s1) & 1) != 0)
                        return 1;
                      if (!sub_1C499FA14(v696, v36, *(_QWORD *)(v3 + 24)))
                        return sub_1C6037A10((uint64_t *)v3, a2);
                      v816 = *(_QWORD *)v3;
                      *(_QWORD *)(v816 + 40) = *(_QWORD *)(a2 + 24);
                      *(_QWORD *)(v816 + 48) = a2;
                      v817 = *(_QWORD *)v3;
                      LODWORD(v2046) = v31;
                      LODWORD(v2047) = 1;
                      LODWORD(__s1[0]) = v696;
                      LODWORD(v2036) = 0;
                      DWORD2(v2036) = v36;
                      LODWORD(v2038) = 0;
                      v705 = *(void (**)(void))(*(_QWORD *)v817 + 32);
                      goto LABEL_1194;
                    }
                  }
                  v829 = *(_QWORD *)v3;
                  LODWORD(v2046) = v31;
                  LODWORD(v2047) = 1;
                  LODWORD(__s1[0]) = (_DWORD)v2031;
                  LODWORD(v2036) = 0;
                  v705 = *(void (**)(void))(*(_QWORD *)v829 + 32);
                  goto LABEL_1194;
                }
              }
              v707 = *(_QWORD *)v3;
              LODWORD(v2046) = v31;
              LODWORD(v2047) = 1;
              LODWORD(__s1[0]) = v694;
              LODWORD(v2036) = 0;
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v707 + 32))(v707, 19, &v2046, 1, __s1, 1, 0);
              v63 = *(_QWORD *)(a2 + 24);
              if ((*(_BYTE *)a2 & 4) == 0 && (*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v64 = a2;
                do
                  v64 = *(_QWORD *)(v64 + 8);
                while ((*(_WORD *)(v64 + 44) & 8) != 0);
                goto LABEL_2820;
              }
              goto LABEL_2819;
            case '.':
              v264 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
              v265 = *(_QWORD *)v3;
              v266 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40);
              if (v264 < 0 && (v264 & 0x7FFFFFFFu) < *(_DWORD *)(v266 + 432))
                v267 = *(void **)(*(_QWORD *)(v266 + 424) + 8 * (v264 & 0x7FFFFFFF));
              else
                v267 = 0;
              *(_QWORD *)(v265 + 40) = *(_QWORD *)(a2 + 24);
              *(_QWORD *)(v265 + 48) = a2;
              v373 = *(_QWORD *)(a2 + 32);
              v374 = *(unsigned int *)(v373 + 36);
              v375 = *(unsigned int *)(v373 + 68);
              if ((_DWORD)v374 == (_DWORD)v375)
              {
                v376 = *(_QWORD *)v3;
                LODWORD(v2046) = v264;
                LODWORD(v2047) = 1;
                v2031 = v267;
                LODWORD(v2032) = 0;
                __s1[0] = (void *)sub_1C5544694(v376, (unint64_t *)&v2031, 0);
                __s1[1] = v377;
                LODWORD(v2036) = 1;
                (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v376 + 32))(v376, 19, &v2046, 1, __s1, 1, 0);
                v63 = *(_QWORD *)(a2 + 24);
                v64 = a2;
                if ((*(_BYTE *)a2 & 4) == 0)
                {
                  v64 = a2;
                  if ((*(_WORD *)(a2 + 44) & 8) != 0)
                  {
                    v64 = a2;
                    do
                      v64 = *(_QWORD *)(v64 + 8);
                    while ((*(_WORD *)(v64 + 44) & 8) != 0);
                  }
                }
                goto LABEL_2820;
              }
              v439 = sub_1C554C1FC(*(_DWORD *)(v373 + 68), v266);
              if (v440 && !v439)
              {
                v441 = *(_QWORD *)v3;
                LODWORD(v2046) = v264;
                LODWORD(v2047) = 1;
                LODWORD(__s1[0]) = v374;
                LODWORD(v2036) = 0;
                (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v441 + 32))(v441, 19, &v2046, 1, __s1, 1, 0);
                v63 = *(_QWORD *)(a2 + 24);
                v64 = a2;
                if ((*(_BYTE *)a2 & 4) == 0)
                {
                  v64 = a2;
                  if ((*(_WORD *)(a2 + 44) & 8) != 0)
                  {
                    v64 = a2;
                    do
                      v64 = *(_QWORD *)(v64 + 8);
                    while ((*(_WORD *)(v64 + 44) & 8) != 0);
                  }
                }
                goto LABEL_2820;
              }
              if ((v374 & 0x80000000) != 0)
                v568 = (uint64_t *)(*(_QWORD *)(v266 + 24) + 16 * (v374 & 0x7FFFFFFF) + 8);
              else
                v568 = (uint64_t *)(*(_QWORD *)(v266 + 272) + 8 * v374);
              v801 = *v568;
              if ((*(_BYTE *)(v801 + 3) & 1) == 0)
                v801 = *(_QWORD *)(v801 + 24);
              if (**(_WORD **)(*(_QWORD *)(v801 + 8) + 16) == 68)
                goto LABEL_1204;
              if ((v375 & 0x80000000) != 0)
                v802 = (uint64_t *)(*(_QWORD *)(v266 + 24) + 16 * (v375 & 0x7FFFFFFF) + 8);
              else
                v802 = (uint64_t *)(*(_QWORD *)(v266 + 272) + 8 * v375);
              v830 = *v802;
              if ((*(_BYTE *)(v830 + 3) & 1) == 0)
                v830 = *(_QWORD *)(v830 + 24);
              if (**(_WORD **)(*(_QWORD *)(v830 + 8) + 16) == 68)
              {
                LODWORD(v374) = v375;
LABEL_1204:
                v831 = *(_QWORD *)v3;
                LODWORD(v2046) = v264;
                LODWORD(v2047) = 1;
                LODWORD(__s1[0]) = v374;
                LODWORD(v2036) = 0;
                (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v831 + 32))(v831, 19, &v2046, 1, __s1, 1, 0);
                v63 = *(_QWORD *)(a2 + 24);
                v64 = a2;
                if ((*(_BYTE *)a2 & 4) == 0)
                {
                  v64 = a2;
                  if ((*(_WORD *)(a2 + 44) & 8) != 0)
                  {
                    v64 = a2;
                    do
                      v64 = *(_QWORD *)(v64 + 8);
                    while ((*(_WORD *)(v64 + 44) & 8) != 0);
                  }
                }
              }
              else
              {
                v832 = sub_1C554C050(v374, v266);
                LODWORD(v2023) = 0;
                *(_QWORD *)&v2027 = 0;
                if (!v833)
                  return sub_1C6037A10((uint64_t *)v3, a2);
                v834 = v832;
                __s1[0] = &v2027;
                __s1[1] = &v2023;
                LODWORD(v2046) = v375;
                if (!sub_1C49BC904((uint64_t)__s1, v266, (unsigned int *)&v2046))
                  return sub_1C6037A10((uint64_t *)v3, a2);
                v835 = *(_QWORD *)v3;
                v2031 = v267;
                LODWORD(v2032) = 0;
                v836 = (void *)sub_1C5544694(v835, (unint64_t *)&v2031, v834 - v2027);
                v837 = *(unsigned __int16 *)(a2 + 44) | 0x100000000;
                LODWORD(v2046) = v264;
                LODWORD(v2047) = 1;
                __s1[0] = v836;
                __s1[1] = v838;
                LODWORD(v2036) = 1;
                DWORD2(v2036) = v2023;
                LODWORD(v2038) = 0;
                (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v835 + 32))(v835, 46, &v2046, 1, __s1, 2, v837);
                v63 = *(_QWORD *)(a2 + 24);
                v64 = a2;
                if ((*(_BYTE *)a2 & 4) == 0)
                {
                  v64 = a2;
                  if ((*(_WORD *)(a2 + 44) & 8) != 0)
                  {
                    v64 = a2;
                    do
                      v64 = *(_QWORD *)(v64 + 8);
                    while ((*(_WORD *)(v64 + 44) & 8) != 0);
                  }
                }
              }
              goto LABEL_2820;
            case '/':
              v268 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 4);
              v269 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40);
              if ((v268 & 0x80000000) != 0)
              {
                v481 = v268 & 0x7FFFFFFF;
                if ((v268 & 0x7FFFFFFF) >= *(_DWORD *)(v269 + 432))
                  v270 = 0;
                else
                  v270 = *(void **)(*(_QWORD *)(v269 + 424) + 8 * v481);
                *(_QWORD *)&v2023 = v270;
                v271 = (uint64_t *)(*(_QWORD *)(v269 + 24) + 16 * v481 + 8);
              }
              else
              {
                v270 = 0;
                *(_QWORD *)&v2023 = 0;
                v271 = (uint64_t *)(*(_QWORD *)(v269 + 272) + 8 * v268);
              }
              v708 = *v271;
              if (!v708)
                return sub_1C6037A10((uint64_t *)v3, a2);
              v709 = v3;
              if ((*(_BYTE *)(v708 + 3) & 1) == 0)
              {
                v708 = *(_QWORD *)(v708 + 24);
                if (!v708 || (*(_BYTE *)(v708 + 3) & 1) == 0)
                  return sub_1C6037A10((uint64_t *)v3, a2);
              }
              v1548 = *(_QWORD *)(v708 + 8);
              if (!v1548 || **(_WORD **)(v1548 + 16) != 47 || *(_DWORD *)(v1548 + 40) != 3)
                return sub_1C6037A10((uint64_t *)v3, a2);
              v1549 = *(_QWORD *)(v1548 + 32);
              v1550 = *(_DWORD *)(v1549 + 36);
              v1551 = sub_1C554C050(*(_DWORD *)(v1549 + 68), v269);
              if (v1552)
              {
                v1553 = v1551;
              }
              else
              {
                v1631 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v1548 + 32) + 36), v269);
                if (!v1632)
                  return sub_1C6037A10((uint64_t *)v3, a2);
                v1553 = v1631;
                v1550 = *(_DWORD *)(*(_QWORD *)(v1548 + 32) + 68);
              }
              v1554 = *(_QWORD *)v3;
              *(_QWORD *)(v1554 + 40) = *(_QWORD *)(a2 + 24);
              *(_QWORD *)(v1554 + 48) = a2;
              switch(v1553)
              {
                case -1:
                  v1668 = *(_QWORD *)v3;
                  v2031 = v270;
                  LODWORD(v2032) = 0;
                  v1669 = (void *)sub_1C5544694(v1668, (unint64_t *)&v2031, 0);
                  v1670 = *(unsigned __int16 *)(a2 + 44) | 0x100000000;
                  LODWORD(v2046) = v268;
                  LODWORD(v2047) = 1;
                  __s1[0] = v1669;
                  __s1[1] = v1671;
                  LODWORD(v2036) = 1;
                  DWORD2(v2036) = v1550;
                  LODWORD(v2038) = 0;
                  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v1668 + 32))(v1668, 46, &v2046, 1, __s1, 2, v1670);
                  v63 = *(_QWORD *)(a2 + 24);
                  v64 = a2;
                  if ((*(_BYTE *)a2 & 4) == 0)
                  {
                    v64 = a2;
                    if ((*(_WORD *)(a2 + 44) & 8) != 0)
                    {
                      v64 = a2;
                      do
                        v64 = *(_QWORD *)(v64 + 8);
                      while ((*(_WORD *)(v64 + 44) & 8) != 0);
                    }
                  }
                  goto LABEL_2820;
                case 1:
                  v1672 = *(_QWORD *)v3;
                  LODWORD(v2046) = v268;
                  LODWORD(v2047) = 1;
                  LODWORD(__s1[0]) = v1550;
                  LODWORD(v2036) = 0;
                  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v1672 + 32))(v1672, 19, &v2046, 1, __s1, 1, 0);
                  v63 = *(_QWORD *)(a2 + 24);
                  v64 = a2;
                  if ((*(_BYTE *)a2 & 4) == 0)
                  {
                    v64 = a2;
                    if ((*(_WORD *)(a2 + 44) & 8) != 0)
                    {
                      v64 = a2;
                      do
                        v64 = *(_QWORD *)(v64 + 8);
                      while ((*(_WORD *)(v64 + 44) & 8) != 0);
                    }
                  }
                  goto LABEL_2820;
                case 0:
                  v1555 = *(_QWORD *)v3;
                  LODWORD(__s1[0]) = v268;
                  LODWORD(__s1[1]) = 1;
                  sub_1C5544694(v1555, (unint64_t *)__s1, 0);
                  v63 = *(_QWORD *)(a2 + 24);
                  v64 = a2;
                  if ((*(_BYTE *)a2 & 4) == 0)
                  {
                    v64 = a2;
                    if ((*(_WORD *)(a2 + 44) & 8) != 0)
                    {
                      v64 = a2;
                      do
                        v64 = *(_QWORD *)(v64 + 8);
                      while ((*(_WORD *)(v64 + 44) & 8) != 0);
                    }
                  }
                  goto LABEL_2820;
              }
              if (v1553 >= 0)
                v1673 = v1553;
              else
                v1673 = -v1553;
              v1675 = sub_1C4825F50((unint64_t *)&v2023);
              if ((_DWORD)v1674 == 1)
              LODWORD(v2032) = v1675;
              if (v1675 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v2031, v1673, 0);
                v1675 = v2032;
                if (v2032 > 0x40)
                {
                  v1853 = 0;
                  v1854 = 0;
                  v1677 = (unint64_t)v2031;
                  do
                  {
                    v1855 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)v2031 + v1853));
                    v1855.i16[0] = vaddlv_u8(v1855);
                    v1854 += v1855.i32[0];
                    v1853 += 8;
                  }
                  while (((((unint64_t)v2032 + 63) >> 3) & 0x3FFFFFF8) != v1853);
                  v1679 = 0;
                  v1678 = v1854 == 1;
LABEL_2985:
                  if (!v1678 || v1673 > 0x10)
                  {
                    if (v1677 && v1675 >= 0x41)
                      MEMORY[0x1CAA32F9C](v1677, 0x1000C8000313F17);
                    goto LABEL_2993;
                  }
                  *(_WORD *)(a2 + 44) &= 0xE7FFu;
                  v1743 = *(_QWORD *)v3;
                  __s1[0] = (void *)v2023;
                  LODWORD(__s1[1]) = 0;
                  if (v1679)
                  {
                    v1744 = v1675 + __clz(v1677) - 64;
                  }
                  else
                  {
                    v1755 = ((unint64_t)v1675 + 63) >> 6;
                    do
                    {
                      v590 = v1755-- < 1;
                      if (v590)
                        break;
                      v1756 = *(_QWORD *)(v1677 + 8 * v1755);
                      v1679 += __clz(v1756);
                    }
                    while (!v1756);
                    v1757 = v1675 | 0xFFFFFFC0;
                    if ((v1675 & 0x3F) == 0)
                      v1757 = 0;
                    v1744 = v1679 + v1757;
                  }
                  v1758 = sub_1C5544694(v1743, (unint64_t *)__s1, v1675 + ~v1744);
                  v1759 = *(_QWORD *)v3;
                  v2046 = v2023;
                  LODWORD(v2047) = 0;
                  LODWORD(__s1[0]) = v1550;
                  LODWORD(v2036) = 0;
                  *((_QWORD *)&v2036 + 1) = v1758;
                  v2037 = v1760;
                  LODWORD(v2038) = 1;
                  v1761 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v1759 + 32))(v1759, 127, &v2046, 1, __s1, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
                  v1763 = v1761;
                  v1764 = (unint64_t)v1762;
                  v1765 = *(_QWORD *)v3;
                  if (v1553 < 0)
                  {
                    *(_QWORD *)&v2027 = v2023;
                    DWORD2(v2027) = 0;
                    v1770 = (void *)sub_1C5544694(v1765, (unint64_t *)&v2027, 0);
                    v1771 = *(unsigned __int16 *)(a2 + 44) | 0x100000000;
                    LODWORD(v2046) = v268;
                    LODWORD(v2047) = 1;
                    __s1[0] = v1770;
                    __s1[1] = v1772;
                    LODWORD(v2036) = 1;
                    *((_QWORD *)&v2036 + 1) = v1763;
                    v2037 = v1764;
                    LODWORD(v2038) = 1;
                    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v1765 + 32))(v1765, 46, &v2046, 1, __s1, 2, v1771);
                  }
                  else
                  {
                    LODWORD(v2046) = v268;
                    LODWORD(v2047) = 1;
                    __s1[0] = v1761;
                    __s1[1] = v1762;
                    LODWORD(v2036) = 1;
                    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v1765 + 32))(v1765, 19, &v2046, 1, __s1, 1, 0);
                  }
                  v1773 = a2;
                  if ((*(_BYTE *)a2 & 4) == 0)
                  {
                    v1773 = a2;
                    if ((*(_WORD *)(a2 + 44) & 8) != 0)
                    {
                      v1773 = a2;
                      do
                        v1773 = *(_QWORD *)(v1773 + 8);
                      while ((*(_WORD *)(v1773 + 44) & 8) != 0);
                    }
                  }
                  sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v1773 + 8));
                  if (!v1677 || v1675 < 0x41)
                    return 1;
                  goto LABEL_2069;
                }
                v1677 = (unint64_t)v2031;
                if (!v2031)
                  goto LABEL_2993;
              }
              else
              {
                v1676 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1675;
                if (!v1675)
                  v1676 = 0;
                v1677 = v1676 & v1673;
                if ((v1676 & v1673) == 0)
                  goto LABEL_2993;
              }
              v1678 = (v1677 & (v1677 - 1)) == 0;
              v1679 = 1;
              goto LABEL_2985;
            case '2':
              v259 = *(_DWORD **)(a2 + 32);
              v260 = v259[9];
              v261 = v259[17];
              if (v260 < 0
                && (v262 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40),
                    (v260 & 0x7FFFFFFFu) < *(_DWORD *)(v262 + 432)))
              {
                v263 = *(_QWORD *)(*(_QWORD *)(v262 + 424) + 8 * (v260 & 0x7FFFFFFF));
              }
              else
              {
                v263 = 0;
              }
              LODWORD(v2046) = v259[4];
              HIDWORD(v2046) = v260;
              LODWORD(v2047) = v261;
              *((_QWORD *)&v2047 + 1) = v263;
              sub_1C49A0B98((uint64_t)__s1, (uint64_t **)v3, (int *)&v2046, a2);
              if (!(_BYTE)v2037 || DWORD2(v2036))
                return sub_1C6037A10((uint64_t *)v3, a2);
              v353 = (int)__s1[0];
              v354 = HIDWORD(__s1[0]);
              v355 = (int)__s1[1];
              v356 = *(_QWORD *)v3;
              *(_QWORD *)(v356 + 40) = *(_QWORD *)(a2 + 24);
              *(_QWORD *)(v356 + 48) = a2;
              v357 = (_QWORD **)v3;
              v358 = *(_QWORD *)v3;
              v359 = (unsigned __int8 **)(a2 + 56);
              v360 = (unsigned __int8 **)(v358 + 32);
              if (a2 + 56 != v358 + 32)
              {
                if (*v360)
                  llvm::MetadataTracking::untrack(v358 + 32, *v360);
                v361 = *v359;
                *v360 = *v359;
                if (v361)
                  llvm::MetadataTracking::track((uint64_t)v360, v361, 2);
              }
              v362 = *v357;
              v364 = sub_1C55437B8(v362, 0x32u);
              v365 = v363;
              v366 = (uint64_t *)v362[6];
              v367 = *(_QWORD *)(v362[5] + 40);
              *(_QWORD *)(v363 + 24) = v367;
              v368 = *(_QWORD *)(v367 + 32);
              v369 = *(unsigned int *)(v363 + 40);
              if ((_DWORD)v369)
              {
                v899 = *(_QWORD *)(v363 + 32);
                v900 = *(_QWORD *)(v368 + 40);
                v901 = 32 * v369;
                do
                {
                  if (!*(_BYTE *)v899)
                  {
                    v902 = *(unsigned int *)(v899 + 4);
                    if ((int)v902 >= 0)
                      v903 = (uint64_t *)(*(_QWORD *)(v900 + 272) + 8 * v902);
                    else
                      v903 = (uint64_t *)(*(_QWORD *)(v900 + 24) + 16 * (v902 & 0x7FFFFFFF) + 8);
                    v904 = *v903;
                    if (*v903)
                    {
                      v905 = *(_QWORD *)(v904 + 16);
                      *(_QWORD *)(v904 + 16) = v899;
                      *(_QWORD *)(v899 + 16) = v905;
                      if ((*(_BYTE *)(v899 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v899 + 24) = v904;
                      }
                      else
                      {
                        *(_QWORD *)(v899 + 24) = 0;
                        v903 = (uint64_t *)(v905 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v899 + 16) = v899;
                      *(_QWORD *)(v899 + 24) = 0;
                    }
                    *v903 = v899;
                  }
                  v899 += 32;
                  v901 -= 32;
                }
                while (v901);
              }
              v370 = *(_QWORD *)(v368 + 728);
              if (v370)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v370 + 24))(v370, v363);
              v371 = *v366 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v365 = v371 | *(_QWORD *)v365 & 7;
              *(_QWORD *)(v365 + 8) = v366;
              *(_QWORD *)(v371 + 8) = v365;
              *v366 = *v366 & 7 | v365;
              v372 = v362[7];
              if (v372)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v372 + 24))(v372, v365);
              LODWORD(v2046) = 18;
              *(_QWORD *)&v2047 = 0;
              DWORD2(v2047) = v353;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v365, v364, (const llvm::MachineOperand *)&v2046);
              v2047 = 0uLL;
              LODWORD(v2046) = 0;
              HIDWORD(v2046) = v354;
              v2048 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v365, v364, (const llvm::MachineOperand *)&v2046);
              v2047 = 0uLL;
              LODWORD(v2046) = 0;
              HIDWORD(v2046) = v355;
              v2048 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v365, v364, (const llvm::MachineOperand *)&v2046);
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v365, v364, (const llvm::MachineOperand *)(*(_QWORD *)(a2 + 32) + 96));
              *(_WORD *)(v365 + 44) = *(_WORD *)(v365 + 44) & 0xC | *(_WORD *)(a2 + 44) & 0xFFF3;
              v63 = *(_QWORD *)(a2 + 24);
              v64 = a2;
              if ((*(_BYTE *)a2 & 4) == 0)
              {
                v64 = a2;
                if ((*(_WORD *)(a2 + 44) & 8) != 0)
                {
                  v64 = a2;
                  do
                    v64 = *(_QWORD *)(v64 + 8);
                  while ((*(_WORD *)(v64 + 44) & 8) != 0);
                }
              }
              goto LABEL_2820;
            case '3':
              v254 = *(_DWORD **)(a2 + 32);
              v255 = v254[17];
              v256 = v254[25];
              if (v255 < 0
                && (v257 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40),
                    (v255 & 0x7FFFFFFFu) < *(_DWORD *)(v257 + 432)))
              {
                v258 = *(_QWORD *)(*(_QWORD *)(v257 + 424) + 8 * (v255 & 0x7FFFFFFF));
              }
              else
              {
                v258 = 0;
              }
              v347 = v254[33];
              v348 = v254[41];
              LODWORD(__s1[0]) = v254[12];
              HIDWORD(__s1[0]) = v255;
              LODWORD(__s1[1]) = v256;
              *(_QWORD *)&v2036 = v258;
              sub_1C49A0B98((uint64_t)&v2046, (uint64_t **)v3, (int *)__s1, a2);
              if (!(_BYTE)v2049)
                return sub_1C6037A10((uint64_t *)v3, a2);
              v349 = *(_QWORD *)v3;
              *(_QWORD *)(v349 + 40) = *(_QWORD *)(a2 + 24);
              *(_QWORD *)(v349 + 48) = a2;
              if ((_DWORD)v2048)
              {
                v350 = *(_QWORD *)v3;
                LODWORD(v2031) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
                LODWORD(v2032) = 1;
                if ((_BYTE)v2046)
                  v351 = v347;
                else
                  v351 = v348;
                LODWORD(__s1[0]) = v351;
                LODWORD(v2036) = 0;
                v352 = *(void (**)(void))(*(_QWORD *)v350 + 32);
              }
              else
              {
                v581 = *(_QWORD *)v3;
                LODWORD(v2031) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
                LODWORD(v2032) = 1;
                LODWORD(__s1[0]) = v2046;
                LODWORD(v2036) = 2;
                DWORD2(v2036) = HIDWORD(v2046);
                LODWORD(v2038) = 0;
                LODWORD(v2039) = v2047;
                *(_DWORD *)v2041 = 0;
                *(_DWORD *)&v2041[8] = v347;
                *(_DWORD *)v2042 = 0;
                *(_DWORD *)&v2042[8] = v348;
                *(_DWORD *)&v2042[24] = 0;
                v352 = *(void (**)(void))(*(_QWORD *)v581 + 32);
              }
              v352();
              v63 = *(_QWORD *)(a2 + 24);
              v64 = a2;
              if ((*(_BYTE *)a2 & 4) == 0)
              {
                v64 = a2;
                if ((*(_WORD *)(a2 + 44) & 8) != 0)
                {
                  v64 = a2;
                  do
                    v64 = *(_QWORD *)(v64 + 8);
                  while ((*(_WORD *)(v64 + 44) & 8) != 0);
                }
              }
              goto LABEL_2820;
            default:
              return sub_1C6037A10((uint64_t *)v3, a2);
          }
      }
    }
    switch(v4)
    {
      case 116:
        v130 = *(_QWORD *)v3;
        *(_QWORD *)(v130 + 40) = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(v130 + 48) = a2;
        if ((**(_WORD **)(a2 + 16) & 0xFFFE) != 0x74)
          return sub_1C6037A10((uint64_t *)v3, a2);
        v131 = *(unsigned int *)(a2 + 40);
        if (!(_DWORD)v131)
          return sub_1C6037A10((uint64_t *)v3, a2);
        v132 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40);
        v133 = *(_DWORD **)(a2 + 32);
        for (k = v133 + 4; *((_BYTE *)k - 16) != 17; k += 8)
        {
          if (!--v131)
            return sub_1C6037A10((uint64_t *)v3, a2);
        }
        if (*k != 2131)
          return sub_1C6037A10((uint64_t *)v3, a2);
        v744 = v133[17];
        v745 = v744 & 0x7FFFFFFF;
        v746 = (uint64_t *)(*(_QWORD *)(v132 + 24) + 16 * v745 + 8);
        if ((int)v744 >= 0)
          v746 = (uint64_t *)(*(_QWORD *)(v132 + 272) + 8 * v744);
        v747 = *v746;
        if ((*(_BYTE *)(v747 + 3) & 1) == 0)
          v747 = *(_QWORD *)(v747 + 24);
        v748 = v133[1];
        v749 = *(_QWORD *)(v747 + 8);
        if (**(_WORD **)(v749 + 16) != 121)
          goto LABEL_1009;
        v1018 = *(llvm::APFloatBase **)(*(_QWORD *)(v749 + 32) + 48);
        if (!v1018)
          goto LABEL_1009;
        if ((v744 & 0x80000000) != 0 && v745 < *(unsigned int *)(v132 + 432))
          v1019 = *(_QWORD *)(*(_QWORD *)(v132 + 424) + 8 * v745);
        else
          v1019 = 0;
        v1035 = ****(llvm::ConstantFP *****)(*(_QWORD *)(a2 + 24) + 32);
        *(_QWORD *)&v2027 = v1019;
        v1037 = sub_1C4825F50((unint64_t *)&v2027);
        if ((_DWORD)v1036 == 1)
        if (*((_UNKNOWN **)v1018 + 4) == &unk_1C866F1C0)
          v1038 = *(_BYTE *)(*((_QWORD *)v1018 + 5) + 28);
        else
          v1038 = *((_BYTE *)v1018 + 52);
        if ((v1038 & 7) == 1 || (v1038 & 8) != 0)
        {
          v1071 = 0;
        }
        else
        {
          if ((v1038 & 7) != 0)
          {
            LODWORD(v2032) = 32;
            v2031 = (void *)1065353216;
            llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v2046, (const llvm::APInt **)&v2031);
            __s1[1] = (void *)v2046;
            *(_QWORD *)&v2036 = v2047;
            DWORD2(v2036) = DWORD2(v2047);
            BYTE12(v2036) = BYTE12(v2036) & 0xF0 | BYTE12(v2047) & 0xF;
            LOBYTE(v2031) = 0;
            if (v1037 == 16)
              llvm::APFloat::convert((uint64_t)__s1, &unk_1C866F15C, 1, &v2031);
            v1067 = (llvm::APFloatBase *)((char *)v1018 + 32);
            if (*((_UNKNOWN **)v1018 + 4) == &unk_1C866F1C0)
              v1068 = llvm::detail::DoubleAPFloat::compare(v1067, (const llvm::detail::DoubleAPFloat *)&__s1[1]);
            else
              llvm::detail::IEEEFloat::compare(v1067, (const llvm::detail::IEEEFloat *)&__s1[1]);
            if (v1068 == 2)
            {
              sub_1C554CD98(v1037, (uint64_t)&v2046, COERCE_CONST_LLVM_APINT_(1.0));
              v1018 = llvm::ConstantFP::get(v1035, (llvm::LLVMContext *)&v2046, v1069);
              if ((_UNKNOWN *)v2047 == &unk_1C866F1C0)
              {
                sub_1C4773C74((uint64_t *)&v2047 + 1);
              }
              else if ((*(_DWORD *)(v2047 + 8) - 64) <= 0xFFFFFF7F && *((_QWORD *)&v2047 + 1))
              {
                MEMORY[0x1CAA32F9C](*((_QWORD *)&v2047 + 1), 0x1000C8000313F17);
              }
            }
            v1070 = __s1[1];
            if (__s1[1] == &unk_1C866F1C0)
              goto LABEL_3234;
            goto LABEL_1672;
          }
          v1071 = COERCE_CONST_LLVM_APINT_(1.0);
        }
        sub_1C554CD98(v1037, (uint64_t)__s1, v1071);
        v1018 = llvm::ConstantFP::get(v1035, (llvm::LLVMContext *)__s1, v1072);
        v1070 = __s1[1];
        if (__s1[1] == &unk_1C866F1C0)
        {
LABEL_3234:
          sub_1C4773C74((uint64_t *)&v2036);
          goto LABEL_1673;
        }
LABEL_1672:
        if ((v1070[2] - 64) <= 0xFFFFFF7F && (_QWORD)v2036)
          MEMORY[0x1CAA32F9C](v2036, 0x1000C8000313F17);
LABEL_1673:
        if (v1018)
        {
          v1073 = *(_QWORD *)v3;
          LODWORD(__s1[0]) = v748;
          LODWORD(__s1[1]) = 1;
          (*(void (**)(uint64_t, void **, llvm::APFloatBase *))(*(_QWORD *)v1073 + 24))(v1073, __s1, v1018);
        }
        else
        {
LABEL_1009:
          if ((v744 & 0x80000000) != 0)
            v750 = (uint64_t *)(*(_QWORD *)(v132 + 24) + 16 * v745 + 8);
          else
            v750 = (uint64_t *)(*(_QWORD *)(v132 + 272) + 8 * v744);
          v874 = *v750;
          if (!v874)
            return sub_1C6037A10((uint64_t *)v3, a2);
          if ((*(_BYTE *)(v874 + 3) & 1) == 0)
          {
            v874 = *(_QWORD *)(v874 + 24);
            if (!v874 || (*(_BYTE *)(v874 + 3) & 1) == 0)
              return sub_1C6037A10((uint64_t *)v3, a2);
          }
          v875 = *(_QWORD *)(v874 + 8);
          if (!v875)
            return sub_1C6037A10((uint64_t *)v3, a2);
          if (**(_WORD **)(v875 + 16) != 179)
            return sub_1C6037A10((uint64_t *)v3, a2);
          if (*(_DWORD *)(v875 + 40) != 2)
            return sub_1C6037A10((uint64_t *)v3, a2);
          v876 = *(_DWORD *)(*(_QWORD *)(v875 + 32) + 36);
          if (!sub_1C49A5320(v876, v132, 0, 0))
            return sub_1C6037A10((uint64_t *)v3, a2);
          v877 = *(_QWORD **)v3;
          LODWORD(__s1[0]) = llvm::MachineRegisterInfo::createGenericVirtualRegister(v132, 257, "", 0);
          v878 = sub_1C5547D24(v877, 2131, (int *)__s1, 1, 0);
          v880 = v879;
          __s1[1] = 0;
          v2036 = 0uLL;
          HIDWORD(__s1[0]) = v876;
          LODWORD(__s1[0]) = 0;
          llvm::MachineInstr::addOperand(v879, v878, (const llvm::MachineOperand *)__s1);
          v881 = *(_QWORD *)v3;
          LODWORD(v2046) = v748;
          LODWORD(v2047) = 1;
          __s1[0] = v878;
          __s1[1] = v880;
          LODWORD(v2036) = 1;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v881 + 32))(v881, 179, &v2046, 1, __s1, 1, 0);
        }
        v63 = *(_QWORD *)(a2 + 24);
        v64 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v64 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v64 = a2;
            do
              v64 = *(_QWORD *)(v64 + 8);
            while ((*(_WORD *)(v64 + 44) & 8) != 0);
          }
        }
        goto LABEL_2820;
      case 117:
      case 120:
      case 121:
      case 122:
      case 123:
      case 125:
      case 130:
      case 131:
      case 132:
      case 133:
      case 135:
        return sub_1C6037A10((uint64_t *)v3, a2);
      case 118:
      case 124:
      case 126:
        if ((v4 - 118) > 8 || ((1 << (v4 - 118)) & 0x141) == 0)
          return sub_1C6037A10((uint64_t *)v3, a2);
        v25 = *(_QWORD *)v3;
        v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40);
        v27 = *(_QWORD *)(a2 + 32);
        v28 = *(_DWORD *)(v27 + 4);
        v29 = *(unsigned int *)(v27 + 36);
        if ((v29 & 0x80000000) != 0)
          v30 = (uint64_t *)(*(_QWORD *)(v26 + 24) + 16 * (v29 & 0x7FFFFFFF) + 8);
        else
          v30 = (uint64_t *)(*(_QWORD *)(v26 + 272) + 8 * v29);
        v80 = *v30;
        if (v80
          && ((*(_BYTE *)(v80 + 3) & 1) != 0 || (v80 = *(_QWORD *)(v80 + 24)) != 0 && (*(_BYTE *)(v80 + 3) & 1) != 0))
        {
          v81 = *(_QWORD *)(v80 + 8);
          if ((v28 & 0x80000000) == 0)
            goto LABEL_2047;
        }
        else
        {
          v81 = 0;
          if ((v28 & 0x80000000) == 0)
            goto LABEL_2047;
        }
        if ((v28 & 0x7FFFFFFFu) < *(_DWORD *)(v26 + 432))
        {
          v82 = *(void **)(*(_QWORD *)(v26 + 424) + 8 * (v28 & 0x7FFFFFFF));
          goto LABEL_2048;
        }
LABEL_2047:
        v82 = 0;
LABEL_2048:
        v2031 = v82;
        *(_QWORD *)(v25 + 40) = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(v25 + 48) = a2;
        v1232 = sub_1C4825F50((unint64_t *)&v2031);
        if ((_DWORD)v1231 == 1)
        if (v1232 == 64)
          goto LABEL_3742;
        v1234 = sub_1C4825F50((unint64_t *)&v2031);
        if ((_DWORD)v1233 == 1)
        if (v1234 == 32)
          goto LABEL_3742;
        v1236 = sub_1C4825F50((unint64_t *)&v2031);
        if ((_DWORD)v1235 == 1)
        if (v1236 == 16)
        {
LABEL_3742:
          sub_1C49A092C((uint64_t)__s1, v4, (unint64_t)v2031, v29, v26);
          if ((_BYTE)v2036)
          {
            v1237 = *(_QWORD *)v3;
            LODWORD(v2046) = v28;
            LODWORD(v2047) = 1;
            v293 = __s1[1];
            v294 = __s1[0];
            if (LODWORD(__s1[1]) > 0x40)
              v1238 = *(_QWORD *)__s1[0];
            else
              v1238 = (uint64_t)__s1[0] << -LOBYTE(__s1[1]) >> -LOBYTE(__s1[1]);
            sub_1C5544694(v1237, &v2046, v1238);
            v579 = *(_QWORD *)(a2 + 24);
            v580 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v580 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v580 = a2;
                do
                  v580 = *(_QWORD *)(v580 + 8);
                while ((*(_WORD *)(v580 + 44) & 8) != 0);
              }
            }
            goto LABEL_2067;
          }
        }
        v1239 = **(unsigned __int16 **)(v81 + 16);
        if (v1239 == v4)
        {
          (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(v3 + 16) + 32))(*(_QWORD *)(v3 + 16), a2);
          v1016 = *(_QWORD *)(a2 + 32) + 32;
          v1017 = *(_DWORD *)(*(_QWORD *)(v81 + 32) + 36);
          goto LABEL_2062;
        }
        if (v4 != 124 && v4 != 118)
          return sub_1C6037A10((uint64_t *)v3, a2);
        if ((v1239 & 0xFFFFFFFD) == 0x7C)
        {
          v1240 = *(_QWORD *)v3;
          LODWORD(v2046) = v28;
          LODWORD(v2047) = 1;
          LODWORD(__s1[0]) = *(_DWORD *)(*(_QWORD *)(v81 + 32) + 36);
          LODWORD(v2036) = 0;
          (*(void (**)(uint64_t))(*(_QWORD *)v1240 + 32))(v1240);
          v63 = *(_QWORD *)(a2 + 24);
          v64 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v64 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v64 = a2;
              do
                v64 = *(_QWORD *)(v64 + 8);
              while ((*(_WORD *)(v64 + 44) & 8) != 0);
            }
          }
        }
        else
        {
          if (v4 != 118)
            return sub_1C6037A10((uint64_t *)v3, a2);
          LODWORD(v2027) = 0;
          __s1[0] = v2031;
          __s1[1] = &v2027;
          LODWORD(v2046) = v29;
          if (!sub_1C49BCB64((uint64_t)__s1, v26, (unsigned int *)&v2046))
            return sub_1C6037A10((uint64_t *)v3, a2);
          v1241 = *(_QWORD *)v3;
          LODWORD(v2046) = v28;
          LODWORD(v2047) = 1;
          LODWORD(__s1[0]) = v2027;
          LODWORD(v2036) = 0;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v1241 + 32))(v1241, 19, &v2046, 1, __s1, 1, 0);
          v63 = *(_QWORD *)(a2 + 24);
          v64 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v64 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v64 = a2;
              do
                v64 = *(_QWORD *)(v64 + 8);
              while ((*(_WORD *)(v64 + 44) & 8) != 0);
            }
          }
        }
        goto LABEL_2820;
      case 119:
        v140 = *(_QWORD *)v3;
        v141 = *(_QWORD *)(*(_QWORD *)v3 + 8);
        v142 = *(_QWORD *)(v141 + 40);
        v143 = *(_QWORD *)(a2 + 32);
        v144 = *(_DWORD *)(v143 + 4);
        v145 = *(unsigned int *)(v143 + 36);
        if ((v144 & 0x80000000) != 0 && (v144 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v142 + 432))
          v146 = *(_QWORD *)(*(_QWORD *)(v142 + 424) + 8 * (v144 & 0x7FFFFFFF));
        else
          v146 = 0;
        v2008 = v146;
        *(_QWORD *)(v140 + 40) = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(v140 + 48) = a2;
        v289 = sub_1C4825F50(&v2008);
        if ((_DWORD)v288 == 1)
        if (v289 != 16)
        {
          v291 = sub_1C4825F50(&v2008);
          if ((_DWORD)v290 == 1)
          if (v291 != 32)
            goto LABEL_1052;
        }
        sub_1C49A092C((uint64_t)__s1, 119, v2008, v145, v142);
        if ((_BYTE)v2036)
        {
          v292 = *(_QWORD *)v3;
          LODWORD(v2046) = v144;
          LODWORD(v2047) = 1;
          v293 = __s1[1];
          v294 = __s1[0];
          if (LODWORD(__s1[1]) > 0x40)
            v295 = *(_QWORD *)__s1[0];
          else
            v295 = (uint64_t)__s1[0] << -LOBYTE(__s1[1]) >> -LOBYTE(__s1[1]);
          sub_1C5544694(v292, &v2046, v295);
          v579 = *(_QWORD *)(a2 + 24);
          v580 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v580 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v580 = a2;
              do
                v580 = *(_QWORD *)(v580 + 8);
              while ((*(_WORD *)(v580 + 44) & 8) != 0);
            }
          }
LABEL_2067:
          sub_1C487FE80(v579 + 40, a2, *(_QWORD *)(v580 + 8));
          if (v293 < 0x41 || !v294)
            return 1;
          goto LABEL_2069;
        }
        if ((v145 & 0x80000000) != 0)
          v518 = (uint64_t *)(*(_QWORD *)(v142 + 24) + 16 * (v145 & 0x7FFFFFFF) + 8);
        else
          v518 = (uint64_t *)(*(_QWORD *)(v142 + 272) + 8 * v145);
        v760 = *v518;
        if ((*(_BYTE *)(v760 + 3) & 1) == 0)
          v760 = *(_QWORD *)(v760 + 24);
        if (**(_WORD **)(*(_QWORD *)(v760 + 8) + 16) == 68)
        {
          v761 = *(_QWORD *)v3;
          LODWORD(__s1[0]) = v144;
          LODWORD(__s1[1]) = 1;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v761 + 32))(v761, 68, __s1, 1, 0, 0, 0);
          v63 = *(_QWORD *)(a2 + 24);
          v64 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v64 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v64 = a2;
              do
                v64 = *(_QWORD *)(v64 + 8);
              while ((*(_WORD *)(v64 + 44) & 8) != 0);
            }
          }
          goto LABEL_2820;
        }
LABEL_1052:
        if (v145 >> 31)
          v762 = (uint64_t *)(*(_QWORD *)(v142 + 24) + 16 * (v145 & 0x7FFFFFFF) + 8);
        else
          v762 = (uint64_t *)(*(_QWORD *)(v142 + 272) + 8 * v145);
        v763 = *v762;
        if (v763)
        {
          if ((*(_BYTE *)(v763 + 3) & 1) != 0
            || (v763 = *(_QWORD *)(v763 + 24)) != 0 && (*(_BYTE *)(v763 + 3) & 1) != 0)
          {
            v1570 = *(_QWORD *)(v763 + 8);
            if (v1570)
            {
              if (**(_WORD **)(v1570 + 16) == 82 && *(_DWORD *)(v1570 + 40) == 2)
                v145 = *(unsigned int *)(*(_QWORD *)(v1570 + 32) + 36);
            }
          }
        }
        if ((v145 & 0x80000000) != 0)
          v764 = (uint64_t *)(*(_QWORD *)(v142 + 24) + 16 * (v145 & 0x7FFFFFFF) + 8);
        else
          v764 = (uint64_t *)(*(_QWORD *)(v142 + 272) + 8 * v145);
        v765 = *v764;
        if (v765
          && ((*(_BYTE *)(v765 + 3) & 1) != 0 || (v765 = *(_QWORD *)(v765 + 24)) != 0 && (*(_BYTE *)(v765 + 3) & 1) != 0))
        {
          v766 = *(_QWORD *)(v765 + 8);
        }
        else
        {
          v766 = 0;
        }
        v767 = **(unsigned __int16 **)(v766 + 16);
        if (v767 > 0x75)
        {
          if (v767 == 118 || v767 == 124 || v767 == 126)
          {
            v768 = *(_DWORD *)(*(_QWORD *)(v766 + 32) + 36);
            if (v768 < 0 && (v768 & 0x7FFFFFFFu) < *(_DWORD *)(v142 + 432))
              v769 = *(void **)(*(_QWORD *)(v142 + 424) + 8 * (v768 & 0x7FFFFFFF));
            else
              v769 = 0;
            v2031 = v769;
            v776 = sub_1C4825F50((unint64_t *)&v2031);
            if ((_DWORD)v775 == 1)
            v778 = sub_1C4825F50(&v2008);
            if ((_DWORD)v777 == 1)
            if (v776 >= v778)
            {
              sub_1C4825F50((unint64_t *)&v2031);
              if ((_DWORD)v818 == 1)
              sub_1C4825F50(&v2008);
              if ((_DWORD)v819 == 1)
            }
            v779 = *(_QWORD *)v3;
            LODWORD(v2046) = v144;
            LODWORD(v2047) = 1;
            LODWORD(__s1[0]) = v768;
            LODWORD(v2036) = 0;
            (*(void (**)(void))(*(_QWORD *)v779 + 32))();
            v63 = *(_QWORD *)(a2 + 24);
            v64 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v64 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v64 = a2;
                do
                  v64 = *(_QWORD *)(v64 + 8);
                while ((*(_WORD *)(v64 + 44) & 8) != 0);
              }
            }
            goto LABEL_2820;
          }
LABEL_1241:
          v2003 = 0;
          v2002[0] = 0;
          if ((v145 & 0x80000000) != 0)
            v847 = (uint64_t *)(*(_QWORD *)(v142 + 24) + 16 * (v145 & 0x7FFFFFFF) + 8);
          else
            v847 = (uint64_t *)(*(_QWORD *)(v142 + 272) + 8 * v145);
          v882 = *v847;
          if (v882)
          {
            while ((*(_BYTE *)(v882 + 3) & 1) != 0)
            {
              v882 = *(_QWORD *)(v882 + 24);
              if (!v882)
                goto LABEL_1477;
            }
            while (1)
            {
              v882 = *(_QWORD *)(v882 + 24);
              if (!v882)
                break;
              if ((*(_BYTE *)(v882 + 3) & 1) == 0)
                goto LABEL_1477;
            }
            __s1[0] = &v2003;
            __s1[1] = v2002;
            LODWORD(v2046) = v145;
            if (sub_1C49BCAD4((uint64_t)__s1, v142, (unsigned int *)&v2046))
            {
              if ((v2002[0] & 0x80000000) != 0)
                v883 = (uint64_t *)(*(_QWORD *)(v142 + 24) + 16 * (v2002[0] & 0x7FFFFFFF) + 8);
              else
                v883 = (uint64_t *)(*(_QWORD *)(v142 + 272) + 8 * v2002[0]);
              v961 = *v883;
              if ((*(_BYTE *)(v961 + 3) & 1) == 0)
                v961 = *(_QWORD *)(v961 + 24);
              v1985 = *(_QWORD *)(v961 + 8);
              sub_1C54EB4A0(*(_QWORD *)(v3 + 24), (const char *)*(unsigned int *)(*(_QWORD *)(v1985 + 32) + 4), (uint64_t)__s1);
              v1979 = __s1[0];
              v2046 = (unint64_t)__s1[0];
              v962 = __s1[1];
              LODWORD(v2047) = __s1[1];
              v1973 = v2036;
              *((_QWORD *)&v2047 + 1) = v2036;
              v1994 = DWORD2(v2036);
              LODWORD(v2048) = DWORD2(v2036);
              v964 = sub_1C4825F50(&v2008);
              if ((_DWORD)v963 == 1)
              if (v962 > 0x40)
              {
                v965 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v2046);
              }
              else if (v962)
              {
                v965 = __clz(~((_QWORD)v1979 << -(char)v962));
              }
              else
              {
                v965 = 0;
              }
              if (v962 - v965 <= 31 - __clz(v964))
              {
                v978 = *(_QWORD *)v3;
                LODWORD(v2023) = v144;
                DWORD2(v2023) = 1;
                v2018 = v2008;
                LODWORD(v2019) = 0;
                LODWORD(v2031) = v2003;
                DWORD2(v2032) = 0;
                __s1[0] = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v978 + 32))(v978, 119, &v2018, 1, &v2031, 1, 0);
                __s1[1] = v979;
                LODWORD(v2036) = 1;
                v980 = *(_QWORD *)v3;
                v2013 = (unsigned __int16 *)v2008;
                LODWORD(v2014) = 0;
                LODWORD(v2027) = v2002[0];
                LODWORD(v2028) = 0;
                *((_QWORD *)&v2036 + 1) = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int16 **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v980 + 32))(v980, 119, &v2013, 1, &v2027, 1, 0);
                v2037 = v981;
                LODWORD(v2038) = 1;
                (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v978 + 32))(v978, 127, &v2023, 1, __s1, 2, *(unsigned __int16 *)(v1985 + 44) | 0x100000000);
                v982 = a2;
                if ((*(_BYTE *)a2 & 4) == 0)
                {
                  v982 = a2;
                  if ((*(_WORD *)(a2 + 44) & 8) != 0)
                  {
                    v982 = a2;
                    do
                      v982 = *(_QWORD *)(v982 + 8);
                    while ((*(_WORD *)(v982 + 44) & 8) != 0);
                  }
                }
                sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v982 + 8));
                if (v1994 >= 0x41 && v1973)
                  MEMORY[0x1CAA32F9C](v1973, 0x1000C8000313F17);
                if (v962 < 0x41 || !v1979)
                  return 1;
                goto LABEL_2069;
              }
              if (v1994 >= 0x41 && v1973)
                MEMORY[0x1CAA32F9C](v1973, 0x1000C8000313F17);
              if (v962 >= 0x41 && v1979)
                MEMORY[0x1CAA32F9C](v1979, 0x1000C8000313F17);
            }
          }
LABEL_1477:
          if (v767 != 90)
            goto LABEL_1714;
          v966 = (uint64_t *)((v145 & 0x80000000) != 0
                           ? *(_QWORD *)(v142 + 24) + 16 * (v145 & 0x7FFFFFFF) + 8
                           : *(_QWORD *)(v142 + 272) + 8 * v145);
          v967 = *v966;
          if (!v967)
            goto LABEL_1714;
          while ((*(_BYTE *)(v967 + 3) & 1) != 0)
          {
            v967 = *(_QWORD *)(v967 + 24);
            if (!v967)
              goto LABEL_1714;
          }
          while (1)
          {
            v967 = *(_QWORD *)(v967 + 24);
            if (!v967)
              break;
            if ((*(_BYTE *)(v967 + 3) & 1) == 0)
              goto LABEL_1714;
          }
          if ((v2008 & 1) == 0)
            goto LABEL_1714;
          v969 = sub_1C4825F50(&v2008);
          if ((_DWORD)v968 == 1)
          if (v969 != 16)
          {
LABEL_1714:
            if ((v2008 & 1) == 0)
              goto LABEL_1722;
            v1090 = sub_1C4825F50(&v2008);
            if ((_DWORD)v1089 == 1)
            if (v1090 != 16)
              goto LABEL_1722;
            v1091 = (uint64_t *)((v145 & 0x80000000) != 0
                              ? *(_QWORD *)(v142 + 24) + 16 * (v145 & 0x7FFFFFFF) + 8
                              : *(_QWORD *)(v142 + 272) + 8 * v145);
            v1092 = *v1091;
            if (!v1092)
              goto LABEL_1722;
            if ((*(_BYTE *)(v1092 + 3) & 1) == 0)
            {
              v1092 = *(_QWORD *)(v1092 + 24);
              if (!v1092 || (*(_BYTE *)(v1092 + 3) & 1) == 0)
                goto LABEL_1722;
            }
            v1730 = *(_QWORD *)(v1092 + 8);
            if (!v1730 || **(_WORD **)(v1730 + 16) != 45 || *(_DWORD *)(v1730 + 40) != 3)
              goto LABEL_1722;
            v1731 = *(_QWORD *)(v1730 + 32);
            v1732 = *(_DWORD *)(v1731 + 36);
            v1733 = sub_1C554C050(*(_DWORD *)(v1731 + 68), v142);
            if (!v1734)
            {
              v1733 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v1730 + 32) + 36), v142);
              if (!v1735)
                goto LABEL_1722;
              v1732 = *(_DWORD *)(*(_QWORD *)(v1730 + 32) + 68);
            }
            if (!v1733 && sub_1C49A07B0(v3, v145))
            {
              v1736 = *(_QWORD *)v3;
              *(_QWORD *)&v2027 = v2008;
              DWORD2(v2027) = 0;
              LODWORD(v2046) = v1732;
              DWORD2(v2047) = 0;
              v1737 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v1736 + 32))(v1736, 119, &v2027, 1, &v2046, 1, 0);
              v1739 = v1738;
              v1740 = *(_QWORD *)v3;
              *(_QWORD *)&v2023 = v2008;
              DWORD2(v2023) = 0;
              v1741 = sub_1C5544694(v1740, (unint64_t *)&v2023, 0);
              LODWORD(v2031) = v144;
              LODWORD(v2032) = 1;
              __s1[0] = v1737;
              __s1[1] = v1739;
              LODWORD(v2036) = 1;
              *((_QWORD *)&v2036 + 1) = v1741;
              v2037 = v1742;
              LODWORD(v2038) = 1;
              (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v1736 + 32))(v1736, 45, &v2031, 1, __s1, 2, 0);
              v63 = *(_QWORD *)(a2 + 24);
              v64 = a2;
              if ((*(_BYTE *)a2 & 4) == 0)
              {
                v64 = a2;
                if ((*(_WORD *)(a2 + 44) & 8) != 0)
                {
                  v64 = a2;
                  do
                    v64 = *(_QWORD *)(v64 + 8);
                  while ((*(_WORD *)(v64 + 44) & 8) != 0);
                }
              }
              goto LABEL_2820;
            }
LABEL_1722:
            v869 = &v2008;
            goto LABEL_1278;
          }
          v971 = (unint64_t *)(v766 + 48);
          v970 = *(_QWORD *)(v766 + 48);
          if (v970 < 8)
          {
            v972 = 0;
LABEL_1711:
            v1087 = 0;
            v1088 = 0;
            goto LABEL_1712;
          }
          if ((v970 & 7) != 0)
          {
            v972 = 0;
            if ((*(_QWORD *)(v766 + 48) & 7) != 3)
              goto LABEL_1763;
            v973 = (int *)(v970 & 0xFFFFFFFFFFFFFFF8);
            if ((v970 & 0xFFFFFFFFFFFFFFF8) == 0)
              goto LABEL_1763;
            v976 = *v973;
            v975 = v973 + 2;
            v974 = v976;
            if (!(_DWORD)v976)
            {
              v972 = v975;
              goto LABEL_1763;
            }
            v977 = (unint64_t)&v975[2 * v974];
          }
          else
          {
            v970 &= 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v766 + 48) = v970;
            v977 = v766 + 56;
            v975 = (int *)(v766 + 48);
          }
          v972 = v975;
          while ((*(_WORD *)(*(_QWORD *)v972 + 36) & 0xF00) == 0)
          {
            v972 += 2;
            if (v972 == (int *)v977)
            {
              v972 = (int *)v977;
              break;
            }
          }
          if (v970 < 8)
            goto LABEL_1711;
LABEL_1763:
          if ((v970 & 7) != 0)
          {
            v1087 = 0;
            if ((v970 & 7) == 3 && (v1110 = (int *)(v970 & 0xFFFFFFFFFFFFFFF8), (v970 & 0xFFFFFFFFFFFFFFF8) != 0))
            {
              v1088 = *v1110;
              v1087 = v1110 + 2;
            }
            else
            {
              v1088 = 0;
            }
          }
          else
          {
            *v971 = v970 & 0xFFFFFFFFFFFFFFF8;
            v1088 = 1;
            v1087 = (int *)(v766 + 48);
          }
LABEL_1712:
          if (v972 != &v1087[2 * v1088] && *(_QWORD *)v972)
            goto LABEL_1714;
          (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(v3 + 16) + 32))(*(_QWORD *)(v3 + 16), v766);
          llvm::MachineOperand::setReg(*(_QWORD *)(v766 + 32), v144);
          v1093 = *(_QWORD *)(v766 + 48);
          if ((v1093 & 7) != 0)
          {
            v1094 = *(_QWORD *)((v1093 & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          else
          {
            v1094 = v1093 & 0xFFFFFFFFFFFFFFF8;
            *v971 = v1093 & 0xFFFFFFFFFFFFFFF8;
          }
          v1095 = *(_QWORD *)(v1094 + 8);
          v1097 = sub_1C4825F50(&v2008);
          if ((_DWORD)v1096 == 1)
          __s1[0] = (void *)llvm::MachineFunction::getMachineMemOperand(v141, v1094, v1095, ((unint64_t)(v1097 >> 3) << 6) | 1);
          if (*v971 >= 8)
          {
            v1217 = *v971 & 7;
            v1218 = (unsigned __int8 *)(*v971 & 0xFFFFFFFFFFFFFFF8);
            if (v1217 == 1 && v1218)
            {
              v1098 = 0;
              v1100 = 0;
              v1099 = *v971 & 0xFFFFFFFFFFFFFFF8;
              goto LABEL_1731;
            }
            if (v1217 != 3 || !v1218)
            {
              v1099 = 0;
              v1100 = 0;
              if (v1218)
                v1219 = v1217 == 2;
              else
                v1219 = 0;
              if (v1219)
                v1098 = *v971 & 0xFFFFFFFFFFFFFFF8;
              else
                v1098 = 0;
LABEL_1731:
              llvm::MachineInstr::setExtraInfo(v766, v141, __s1, 1, v1099, v1098, v1100);
              (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), v766);
              v63 = *(_QWORD *)(a2 + 24);
              v64 = a2;
              if ((*(_BYTE *)a2 & 4) == 0)
              {
                v64 = a2;
                if ((*(_WORD *)(a2 + 44) & 8) != 0)
                {
                  v64 = a2;
                  do
                    v64 = *(_QWORD *)(v64 + 8);
                  while ((*(_WORD *)(v64 + 44) & 8) != 0);
                }
              }
              goto LABEL_2820;
            }
            v1230 = v1218[4];
            if (v1218[4])
              v1099 = *(_QWORD *)&v1218[8 * *(int *)v1218 + 8];
            else
              v1099 = 0;
            if (v1218[5])
              v1098 = *(_QWORD *)&v1218[8 * *(int *)v1218 + 8 + 8 * v1230];
            else
              v1098 = 0;
            if (v1218[6])
            {
              v1100 = *(_QWORD *)&v1218[8 * *(int *)v1218 + 8 + 8 * v1218[5] + 8 * v1230];
              goto LABEL_1731;
            }
          }
          else
          {
            v1098 = 0;
            v1099 = 0;
          }
          v1100 = 0;
          goto LABEL_1731;
        }
        if (v767 == 76)
        {
          v827 = *(_DWORD *)(*(_QWORD *)(v766 + 32) + 36);
          if (v827 < 0 && (v827 & 0x7FFFFFFFu) < *(_DWORD *)(v142 + 432))
            v828 = *(void **)(*(_QWORD *)(v142 + 424) + 8 * (v827 & 0x7FFFFFFF));
          else
            v828 = 0;
          v1992 = *(_DWORD *)(*(_QWORD *)(v766 + 32) + 36);
          v2031 = v828;
          v844 = sub_1C4825F50((unint64_t *)&v2031);
          if ((_DWORD)v843 == 1)
          v846 = sub_1C4825F50(&v2008);
          if ((_DWORD)v845 == 1)
          if (v844 >= v846)
          {
            v891 = *(uint64_t **)v3;
            LODWORD(v2046) = v144;
            LODWORD(v2047) = 1;
            LODWORD(__s1[0]) = v1992;
            LODWORD(v2036) = 0;
            sub_1C5546B4C(v891, 126, &v2046, (int *)__s1);
            v63 = *(_QWORD *)(a2 + 24);
            v64 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v64 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v64 = a2;
                do
                  v64 = *(_QWORD *)(v64 + 8);
                while ((*(_WORD *)(v64 + 44) & 8) != 0);
              }
            }
            goto LABEL_2820;
          }
          goto LABEL_1241;
        }
        if (v767 != 78)
          goto LABEL_1241;
        if ((v145 & 0x80000000) != 0 && (v145 & 0x7FFFFFFF) < *(_DWORD *)(v142 + 432))
        {
          v770 = *(_QWORD *)(*(_QWORD *)(v142 + 424) + 8 * (v145 & 0x7FFFFFFF));
          if ((v770 & 2) != 0)
          {
            v771 = 35;
            v772 = 19;
            if ((v770 & 4) == 0)
              v771 = 19;
            v773 = v770 >> v771;
            if ((v770 & 4) == 0)
              v772 = 3;
            if ((v770 & 1) != 0)
              v772 = 3;
            v774 = (8 * (unsigned __int16)(v770 >> v772)) & 0xFFFFF8000007FFFFLL | ((v773 & 0xFFFFFF) << 19) | 2;
LABEL_1247:
            *(_QWORD *)&v2027 = v774;
            v850 = sub_1C4825F50((unint64_t *)&v2027);
            if ((_DWORD)v849 == 1)
            v852 = sub_1C4825F50(&v2008);
            if ((_DWORD)v851 == 1)
            __s1[0] = &v2036;
            __s1[1] = (void *)0x400000000;
            v853 = (v852 / v850);
            if (v853)
            {
              v854 = 0;
              v855 = 0;
              do
              {
                v856 = *(_DWORD *)(*(_QWORD *)(v766 + 32) + v854 + 36);
                if (v855 >= HIDWORD(__s1[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__s1, (uint64_t)&v2036, v855 + 1, 4);
                  v855 = __s1[1];
                }
                *((_DWORD *)__s1[0] + v855) = v856;
                v855 = ++LODWORD(__s1[1]);
                v854 += 32;
              }
              while (32 * v853 != v854);
            }
            v857 = (_DWORD *)sub_1C4953AD0(v853, v2027);
            v858 = *(_QWORD *)v3;
            v2046 = (unint64_t)v857;
            LODWORD(v2047) = 0;
            v859 = (_DWORD *)sub_1C5547750(v858, (uint64_t)&v2046, (int *)__s1[0], LODWORD(__s1[1]));
            v860 = *(uint64_t **)v3;
            LODWORD(v2031) = v144;
            LODWORD(v2032) = 1;
            v2046 = (unint64_t)v859;
            *(_QWORD *)&v2047 = v861;
            DWORD2(v2047) = 1;
            sub_1C5546EF4(v860, (uint64_t *)&v2031, (int *)&v2046);
            v862 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v862 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v862 = a2;
                do
                  v862 = *(_QWORD *)(v862 + 8);
                while ((*(_WORD *)(v862 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v862 + 8));
            if (__s1[0] != &v2036)
              free(__s1[0]);
            return 1;
          }
        }
        else
        {
          v770 = 0;
        }
        v848 = 3;
        if ((v770 & 1) == 0)
          v848 = 19;
        v774 = v770 & 0x8000000000000000 | (8 * (v770 >> v848)) | 1;
        goto LABEL_1247;
      case 127:
        v147 = *(_QWORD *)v3;
        v148 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40);
        v149 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
        *(_QWORD *)(v147 + 40) = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(v147 + 48) = a2;
        v150 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(a2 + 32) + 68), v148);
        if (v151)
        {
          v152 = v150;
          v153 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 36);
          if ((v153 & 0x80000000) != 0)
            v154 = (uint64_t *)(*(_QWORD *)(v148 + 24) + 16 * (v153 & 0x7FFFFFFF) + 8);
          else
            v154 = (uint64_t *)(*(_QWORD *)(v148 + 272) + 8 * v153);
          v493 = *v154;
          if (v493
            && ((*(_BYTE *)(v493 + 3) & 1) != 0
             || (v493 = *(_QWORD *)(v493 + 24)) != 0 && (*(_BYTE *)(v493 + 3) & 1) != 0))
          {
            v494 = *(_QWORD *)(v493 + 8);
            if (!v150)
              goto LABEL_2476;
          }
          else
          {
            v494 = 0;
            if (!v150)
            {
LABEL_2476:
              v1414 = *(_QWORD *)v3;
              LODWORD(v2046) = v149;
              LODWORD(v2047) = 1;
              LODWORD(__s1[0]) = v153;
              LODWORD(v2036) = 0;
              v1415 = *(void (**)(void))(*(_QWORD *)v1414 + 32);
LABEL_2477:
              v1415();
              goto LABEL_2478;
            }
          }
          if ((v153 & 0x80000000) != 0)
            v495 = (uint64_t *)(*(_QWORD *)(v148 + 24) + 16 * (v153 & 0x7FFFFFFF) + 8);
          else
            v495 = (uint64_t *)(*(_QWORD *)(v148 + 272) + 8 * v153);
          v584 = *v495;
          if (v584)
          {
            if ((*(_BYTE *)(v584 + 3) & 1) != 0
              || (v584 = *(_QWORD *)(v584 + 24)) != 0 && (*(_BYTE *)(v584 + 3) & 1) != 0)
            {
              v585 = *(_QWORD *)(v584 + 8);
              if (v585 && **(_WORD **)(v585 + 16) == 127 && *(_DWORD *)(v585 + 40) == 3)
              {
                v586 = *(_QWORD *)(v585 + 32);
                v587 = *(_DWORD *)(v586 + 36);
                v588 = sub_1C554C050(*(_DWORD *)(v586 + 68), v148);
                v590 = !v589 || v152 < 1;
                if (!v590 && v588 >= 1)
                {
                  v592 = v588 + v152;
                  if ((unint64_t)(v588 + v152) <= 0x20
                    && (unint64_t)(v588 + v152 - 17) <= 0xFFFFFFFFFFFFFFF3)
                  {
                    v594 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 68);
                    if (v594 < 0 && (v595 = v594 & 0x7FFFFFFF, v595 < *(_DWORD *)(v148 + 432)))
                      v596 = *(void **)(*(_QWORD *)(v148 + 424) + 8 * v595);
                    else
                      v596 = 0;
                    v1752 = *(_QWORD *)v3;
                    __s1[0] = v596;
                    LODWORD(__s1[1]) = 0;
                    sub_1C5544694(v1752, (unint64_t *)__s1, v592);
                    v1753 = *(_QWORD *)v3;
                    LODWORD(v2046) = v149;
                    LODWORD(v2047) = 1;
                    LODWORD(__s1[0]) = v587;
                    LODWORD(v2036) = 0;
                    DWORD2(v2036) = *(_DWORD *)(*(_QWORD *)(v1754 + 32) + 4);
                    LODWORD(v2038) = 0;
                    v1415 = *(void (**)(void))(*(_QWORD *)v1753 + 32);
                    goto LABEL_2477;
                  }
                }
              }
            }
          }
        }
        else
        {
          v443 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 36);
          if ((v443 & 0x80000000) != 0)
            v444 = (uint64_t *)(*(_QWORD *)(v148 + 24) + 16 * (v443 & 0x7FFFFFFF) + 8);
          else
            v444 = (uint64_t *)(*(_QWORD *)(v148 + 272) + 8 * v443);
          v597 = *v444;
          if ((*(_BYTE *)(v597 + 3) & 1) == 0)
            v597 = *(_QWORD *)(v597 + 24);
          v494 = *(_QWORD *)(v597 + 8);
        }
        if (**(_WORD **)(v494 + 16) != 68)
          return sub_1C6037A10((uint64_t *)v3, a2);
        v598 = *(_QWORD *)v3;
        LODWORD(__s1[0]) = v149;
        LODWORD(__s1[1]) = 1;
        sub_1C5544694(v598, (unint64_t *)__s1, 0);
LABEL_2478:
        v63 = *(_QWORD *)(a2 + 24);
        v64 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v64 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v64 = a2;
            do
              v64 = *(_QWORD *)(v64 + 8);
            while ((*(_WORD *)(v64 + 44) & 8) != 0);
          }
        }
        goto LABEL_2820;
      case 128:
      case 129:
        v53 = *(_QWORD *)v3;
        *(_QWORD *)(v53 + 40) = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(v53 + 48) = a2;
        v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40);
        v54 = *(_DWORD **)(a2 + 32);
        v55 = v54[1];
        if ((v55 & 0x80000000) != 0
          && (v55 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v13 + 432))
        {
          v56 = *(_QWORD *)(*(_QWORD *)(v13 + 424) + 8 * (v55 & 0x7FFFFFFF));
        }
        else
        {
          v56 = 0;
        }
        v57 = v54[9];
        *(_QWORD *)&v2027 = v56;
        v58 = sub_1C554C050(v54[17], v13);
        v60 = v59;
        if (v59)
        {
          v61 = v58;
          if (!v58)
          {
            v62 = *(_QWORD *)v3;
            LODWORD(v2046) = v55;
            LODWORD(v2047) = 1;
            LODWORD(__s1[0]) = v57;
            LODWORD(v2036) = 0;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v62 + 32))(v62, 19, &v2046, 1, __s1, 1, 0);
            v63 = *(_QWORD *)(a2 + 24);
            v64 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v64 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v64 = a2;
                do
                  v64 = *(_QWORD *)(v64 + 8);
                while ((*(_WORD *)(v64 + 44) & 8) != 0);
              }
            }
            goto LABEL_2820;
          }
        }
        else
        {
          v61 = 0;
        }
        if ((v55 & 0x80000000) != 0)
          v395 = (uint64_t *)(*(_QWORD *)(v13 + 24) + 16 * (v55 & 0x7FFFFFFF) + 8);
        else
          v395 = (uint64_t *)(*(_QWORD *)(v13 + 272) + 8 * v55);
        v397 = *v395;
        if (!*v395)
          goto LABEL_380;
        while ((*(_BYTE *)(v397 + 3) & 1) != 0)
        {
          v397 = *(_QWORD *)(v397 + 24);
          if (!v397)
            goto LABEL_380;
        }
        v406 = *(_QWORD *)(v397 + 8);
        v407 = *(_DWORD **)(v406 + 32);
        v408 = **(_WORD **)(v406 + 16);
LABEL_396:
        if (sub_1C499F538(v408, v407, v13))
          return sub_1C6037A10((uint64_t *)v3, a2);
        v409 = *(_QWORD *)(v397 + 8);
        while (1)
        {
          v397 = *(_QWORD *)(v397 + 24);
          if (!v397)
            break;
          if ((*(_BYTE *)(v397 + 3) & 1) == 0)
          {
            v410 = *(_QWORD *)(v397 + 8);
            if (v410 != v409)
            {
              v407 = *(_DWORD **)(v410 + 32);
              v408 = **(_WORD **)(v410 + 16);
              goto LABEL_396;
            }
          }
        }
LABEL_380:
        v399 = sub_1C4825F50((unint64_t *)&v2027);
        if ((_DWORD)v398 == 1)
        *(_QWORD *)&v2023 = (8 * (v399 >> 1)) | 1;
        if (!v60)
          goto LABEL_392;
        v400 = v2027;
        if ((_QWORD)v2027 != 257)
          goto LABEL_388;
        v402 = sub_1C4825F50((unint64_t *)&v2023);
        if ((_DWORD)v401 == 1)
        if (v61 == v402)
          goto LABEL_516;
        v400 = v2027;
LABEL_388:
        if (v400 == 513)
        {
          v404 = sub_1C4825F50((unint64_t *)&v2023);
          if ((_DWORD)v403 == 1)
          if (v61 >= v404)
          {
LABEL_516:
            v482 = *(uint64_t **)v3;
            LODWORD(__s1[0]) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
            LODWORD(v2036) = 0;
            sub_1C5544C30(v482, v2023, (int *)__s1);
            v483 = *(_QWORD *)v3;
            v484 = **(unsigned __int16 **)(a2 + 16);
            v2046 = v2023;
            LODWORD(v2047) = 0;
            LODWORD(__s1[0]) = *(_DWORD *)(*(_QWORD *)(v485 + 32) + 36);
            LODWORD(v2036) = 0;
            v2031 = (void *)v2023;
            LODWORD(v2032) = 0;
            v487 = sub_1C4825F50((unint64_t *)&v2023);
            if ((_DWORD)v486 == 1)
            *((_QWORD *)&v2036 + 1) = sub_1C5544694(v483, (unint64_t *)&v2031, v61 - v487);
            v2037 = v488;
            LODWORD(v2038) = 1;
            v489 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v483 + 32))(v483, v484, &v2046, 1, __s1, 2, 0);
            v491 = *(_QWORD *)v3;
            if (**(_WORD **)(a2 + 16) == 128)
              v492 = 126;
            else
              v492 = 124;
            LODWORD(v2046) = v55;
            LODWORD(v2047) = 1;
            __s1[0] = v489;
            __s1[1] = v490;
            LODWORD(v2036) = 1;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v491 + 32))(v491, v492, &v2046, 1, __s1, 1, 0);
            v63 = *(_QWORD *)(a2 + 24);
            v64 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v64 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v64 = a2;
                do
                  v64 = *(_QWORD *)(v64 + 8);
                while ((*(_WORD *)(v64 + 44) & 8) != 0);
              }
            }
            goto LABEL_2820;
          }
        }
LABEL_392:
        if ((v55 & 0x80000000) == 0 || (v405 = v55 & 0x7FFFFFFF, v405 >= *(unsigned int *)(v13 + 432)))
        {
LABEL_1276:
          v868 = 0;
          goto LABEL_1277;
        }
        goto LABEL_1275;
      case 134:
        v111 = *(_DWORD **)(a2 + 32);
        v112 = v111[17];
        if ((v112 & 0x80000000) == 0)
          return sub_1C6037A10((uint64_t *)v3, a2);
        v113 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40);
        if ((v112 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(v113 + 432))
          return sub_1C6037A10((uint64_t *)v3, a2);
        v114 = v111[1];
        v115 = v111[12];
        v116 = v111[25];
        *(_QWORD *)&v2027 = *(_QWORD *)(*(_QWORD *)(v113 + 424) + 8 * (v112 & 0x7FFFFFFF));
        if ((v2027 & 1) == 0)
          return sub_1C6037A10((uint64_t *)v3, a2);
        v1989 = v114;
        v118 = sub_1C4825F50((unint64_t *)&v2027);
        if ((_DWORD)v117 == 1)
        v119 = sub_1C554C050(v112, v113);
        if (v120)
        {
          v121 = v119;
          v122 = sub_1C554C050(v116, v113);
          if (v123)
          {
            v124 = v122;
            LODWORD(__s1[1]) = v118;
            if (v118 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)__s1, v121, 0);
              LODWORD(v2047) = v118;
              llvm::APInt::initSlowCase((llvm::APInt *)&v2046, v124, 0);
            }
            else
            {
              if (v118)
              {
                v125 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v118;
                v126 = (void *)(v121 & v125);
              }
              else
              {
                v126 = 0;
                v125 = 0;
              }
              __s1[0] = v126;
              LODWORD(v2047) = v118;
              v2046 = v125 & v122;
            }
            switch((int)v115)
            {
              case ' ':
                v127 = __s1[1];
                v128 = v2046;
                if (LODWORD(__s1[1]) > 0x40)
                  v129 = memcmp(__s1[0], (const void *)v2046, (((unint64_t)LODWORD(__s1[1]) + 63) >> 3) & 0x3FFFFFF8) == 0;
                else
                  v129 = __s1[0] == (void *)v2046;
                LOBYTE(v1020) = v129;
                goto LABEL_1633;
              case '!':
                v127 = __s1[1];
                v128 = v2046;
                if (LODWORD(__s1[1]) > 0x40)
                  v1025 = memcmp(__s1[0], (const void *)v2046, (((unint64_t)LODWORD(__s1[1]) + 63) >> 3) & 0x3FFFFFF8) == 0;
                else
                  v1025 = __s1[0] == (void *)v2046;
                v1060 = v1025;
                LOBYTE(v1020) = v1060 ^ 1;
                goto LABEL_1633;
              case '"':
                v127 = __s1[1];
                if (LODWORD(__s1[1]) <= 0x40)
                {
                  v128 = v2046;
                  v1023 = __s1[0] > (void *)v2046;
                  goto LABEL_1548;
                }
                v128 = v2046;
                v1020 = (((unint64_t)LODWORD(__s1[1]) + 63) >> 3) & 0x3FFFFFF8;
                while (v1020)
                {
                  v1210 = *(_QWORD *)((char *)__s1[0] + v1020 - 8);
                  v1211 = *(_QWORD *)(v2046 + v1020 - 8);
                  v1020 -= 8;
                  v1023 = v1210 > v1211;
                  if (v1210 != v1211)
                    goto LABEL_1548;
                }
                goto LABEL_1633;
              case '#':
                v127 = __s1[1];
                if (LODWORD(__s1[1]) <= 0x40)
                {
                  v128 = v2046;
                  LOBYTE(v1020) = __s1[0] >= (void *)v2046;
                  goto LABEL_1633;
                }
                v128 = v2046;
                v1212 = (((unint64_t)LODWORD(__s1[1]) + 63) >> 3) & 0x3FFFFFF8;
                do
                {
                  if (!v1212)
                  {
                    LOBYTE(v1020) = 1;
                    goto LABEL_1633;
                  }
                  v1213 = *(_QWORD *)((char *)__s1[0] + v1212 - 8);
                  v1214 = *(_QWORD *)(v2046 + v1212 - 8);
                  v1212 -= 8;
                  v1023 = v1213 > v1214;
                }
                while (v1213 == v1214);
LABEL_1548:
                LOBYTE(v1020) = v1023;
                goto LABEL_1633;
              case '$':
                v127 = __s1[1];
                if (LODWORD(__s1[1]) <= 0x40)
                {
                  v128 = v2046;
                  LOBYTE(v1020) = __s1[0] < (void *)v2046;
                  goto LABEL_1633;
                }
                v128 = v2046;
                v1020 = (((unint64_t)LODWORD(__s1[1]) + 63) >> 3) & 0x3FFFFFF8;
                while (v1020)
                {
                  v1208 = *(_QWORD *)((char *)__s1[0] + v1020 - 8);
                  v1209 = *(_QWORD *)(v2046 + v1020 - 8);
                  v1020 -= 8;
                  if (v1208 != v1209)
                  {
                    LOBYTE(v1020) = v1208 <= v1209;
                    goto LABEL_1633;
                  }
                }
                goto LABEL_1633;
              case '%':
                v127 = __s1[1];
                if (LODWORD(__s1[1]) <= 0x40)
                {
                  v128 = v2046;
                  LODWORD(v1022) = __s1[0] > (void *)v2046;
                  if (__s1[0] < (void *)v2046)
                    LODWORD(v1022) = -1;
                  goto LABEL_1563;
                }
                v128 = v2046;
                v1022 = (((unint64_t)LODWORD(__s1[1]) + 63) >> 3) & 0x3FFFFFF8;
                do
                {
                  if (!v1022)
                    goto LABEL_1563;
                  v1215 = *(_QWORD *)((char *)__s1[0] + v1022 - 8);
                  v1216 = *(_QWORD *)(v2046 + v1022 - 8);
                  v1022 -= 8;
                  v1201 = v1215 > v1216;
                }
                while (v1215 == v1216);
                goto LABEL_1951;
              case '&':
                v127 = __s1[1];
                if (LODWORD(__s1[1]) > 0x40)
                {
                  v1125 = *((_QWORD *)__s1[0] + ((LODWORD(__s1[1]) - 1) >> 6)) & (1 << (LOBYTE(__s1[1]) - 1));
                  v1126 = v2047 - 1;
                  v128 = v2046;
                  v1127 = &v2046;
                  if (v2047 >= 0x41)
                    v1127 = (unint64_t *)(v2046 + 8 * (v1126 >> 6));
                  if ((v1125 != 0) == ((*v1127 >> v1126) & 1))
                  {
                    v1205 = (((unint64_t)LODWORD(__s1[1]) + 63) >> 3) & 0x3FFFFFF8;
                    do
                    {
                      if (!v1205)
                      {
                        LODWORD(v1020) = 0;
                        goto LABEL_1568;
                      }
                      v1206 = *(_QWORD *)((char *)__s1[0] + v1205 - 8);
                      v1207 = *(_QWORD *)(v2046 + v1205 - 8);
                      v1205 -= 8;
                    }
                    while (v1206 == v1207);
                    if (v1206 > v1207)
                      LODWORD(v1020) = 1;
                    else
                      LODWORD(v1020) = -1;
                  }
                  else if (v1125)
                  {
                    LODWORD(v1020) = -1;
                  }
                  else
                  {
                    LODWORD(v1020) = 1;
                  }
                }
                else
                {
                  v1020 = (uint64_t)__s1[0] << -LOBYTE(__s1[1]) >> -LOBYTE(__s1[1]);
                  v128 = v2046;
                  v1027 = (uint64_t)(v2046 << -LOBYTE(__s1[1])) >> -LOBYTE(__s1[1]);
                  v590 = v1020 < v1027;
                  LODWORD(v1020) = v1020 > v1027;
                  if (v590)
                    LODWORD(v1020) = -1;
                }
LABEL_1568:
                LOBYTE(v1020) = (int)v1020 > 0;
                goto LABEL_1633;
              case '\'':
                v127 = __s1[1];
                if (LODWORD(__s1[1]) > 0x40)
                {
                  v1122 = *((_QWORD *)__s1[0] + ((LODWORD(__s1[1]) - 1) >> 6)) & (1 << (LOBYTE(__s1[1]) - 1));
                  v1123 = v2047 - 1;
                  v128 = v2046;
                  v1124 = &v2046;
                  if (v2047 >= 0x41)
                    v1124 = (unint64_t *)(v2046 + 8 * (v1123 >> 6));
                  if ((v1122 != 0) == ((*v1124 >> v1123) & 1))
                  {
                    v1202 = (((unint64_t)LODWORD(__s1[1]) + 63) >> 3) & 0x3FFFFFF8;
                    do
                    {
                      if (!v1202)
                      {
                        LODWORD(v1020) = 0;
                        goto LABEL_1557;
                      }
                      v1203 = *(_QWORD *)((char *)__s1[0] + v1202 - 8);
                      v1204 = *(_QWORD *)(v2046 + v1202 - 8);
                      v1202 -= 8;
                    }
                    while (v1203 == v1204);
                    if (v1203 > v1204)
                      LODWORD(v1020) = 1;
                    else
                      LODWORD(v1020) = -1;
                  }
                  else if (v1122)
                  {
                    LODWORD(v1020) = -1;
                  }
                  else
                  {
                    LODWORD(v1020) = 1;
                  }
                }
                else
                {
                  v1020 = (uint64_t)__s1[0] << -LOBYTE(__s1[1]) >> -LOBYTE(__s1[1]);
                  v128 = v2046;
                  v1024 = (uint64_t)(v2046 << -LOBYTE(__s1[1])) >> -LOBYTE(__s1[1]);
                  v590 = v1020 < v1024;
                  LODWORD(v1020) = v1020 > v1024;
                  if (v590)
                    LODWORD(v1020) = -1;
                }
LABEL_1557:
                LOBYTE(v1020) = (int)v1020 >= 0;
                goto LABEL_1633;
              case '(':
                v127 = __s1[1];
                if (LODWORD(__s1[1]) <= 0x40)
                {
                  v128 = v2046;
                  v1026 = (uint64_t)__s1[0] << -LOBYTE(__s1[1]) >> -LOBYTE(__s1[1]) < (uint64_t)(v2046 << -LOBYTE(__s1[1])) >> -LOBYTE(__s1[1]);
                  goto LABEL_1580;
                }
                v1020 = *((_QWORD *)__s1[0] + ((LODWORD(__s1[1]) - 1) >> 6)) >> (LOBYTE(__s1[1]) - 1);
                v1128 = v2047 - 1;
                v128 = v2046;
                v1129 = &v2046;
                if (v2047 >= 0x41)
                  v1129 = (unint64_t *)(v2046 + 8 * (v1128 >> 6));
                if (((v1020 ^ (*v1129 >> v1128)) & 1) != 0)
                  goto LABEL_1633;
                v1020 = (((unint64_t)LODWORD(__s1[1]) + 63) >> 3) & 0x3FFFFFF8;
                break;
              case ')':
                v127 = __s1[1];
                if (LODWORD(__s1[1]) > 0x40)
                {
                  v1119 = *((_QWORD *)__s1[0] + ((LODWORD(__s1[1]) - 1) >> 6)) & (1 << (LOBYTE(__s1[1]) - 1));
                  v1120 = v2047 - 1;
                  v128 = v2046;
                  v1121 = &v2046;
                  if (v2047 >= 0x41)
                    v1121 = (unint64_t *)(v2046 + 8 * (v1120 >> 6));
                  if ((v1119 != 0) == ((*v1121 >> v1120) & 1))
                  {
                    v1198 = (((unint64_t)LODWORD(__s1[1]) + 63) >> 3) & 0x3FFFFFF8;
                    do
                    {
                      if (!v1198)
                      {
                        LODWORD(v1022) = 0;
                        goto LABEL_1563;
                      }
                      v1199 = *(_QWORD *)((char *)__s1[0] + v1198 - 8);
                      v1200 = *(_QWORD *)(v2046 + v1198 - 8);
                      v1198 -= 8;
                      v1201 = v1199 > v1200;
                    }
                    while (v1199 == v1200);
LABEL_1951:
                    if (v1201)
                      LODWORD(v1022) = 1;
                    else
                      LODWORD(v1022) = -1;
                  }
                  else if (v1119)
                  {
                    LODWORD(v1022) = -1;
                  }
                  else
                  {
                    LODWORD(v1022) = 1;
                  }
                }
                else
                {
                  v1022 = (uint64_t)__s1[0] << -LOBYTE(__s1[1]) >> -LOBYTE(__s1[1]);
                  v128 = v2046;
                  v1021 = (uint64_t)(v2046 << -LOBYTE(__s1[1])) >> -LOBYTE(__s1[1]);
                  v590 = v1022 < v1021;
                  LODWORD(v1022) = v1022 > v1021;
                  if (v590)
                    LODWORD(v1022) = -1;
                }
LABEL_1563:
                v1026 = (int)v1022 < 1;
LABEL_1580:
                LOBYTE(v1020) = v1026;
                goto LABEL_1633;
              default:
                if (v2047 >= 0x41 && v2046)
                  MEMORY[0x1CAA32F9C](v2046, 0x1000C8000313F17);
                if (LODWORD(__s1[1]) >= 0x41 && __s1[0])
                  MEMORY[0x1CAA32F9C](__s1[0], 0x1000C8000313F17);
                goto LABEL_1575;
            }
            do
            {
              if (!v1020)
                goto LABEL_1633;
              v1130 = *(_QWORD *)((char *)__s1[0] + v1020 - 8);
              v1131 = *(_QWORD *)(v2046 + v1020 - 8);
              v1020 -= 8;
            }
            while (v1130 == v1131);
            LOBYTE(v1020) = v1130 <= v1131;
LABEL_1633:
            v1061 = v1020 & 1;
            if (v2047 >= 0x41 && v128 != 0)
            {
              MEMORY[0x1CAA32F9C](v128, 0x1000C8000313F17);
              v127 = __s1[1];
            }
            if (v127 >= 0x41 && __s1[0])
              MEMORY[0x1CAA32F9C](__s1[0], 0x1000C8000313F17);
            v1063 = *(_QWORD *)v3;
            *(_QWORD *)(v1063 + 40) = *(_QWORD *)(a2 + 24);
            *(_QWORD *)(v1063 + 48) = a2;
            v1064 = *(_QWORD *)v3;
            LODWORD(__s1[0]) = v1989;
            LODWORD(__s1[1]) = 1;
            sub_1C5544694(v1064, (unint64_t *)__s1, v1061);
            v63 = *(_QWORD *)(a2 + 24);
            v64 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v64 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v64 = a2;
                do
                  v64 = *(_QWORD *)(v64 + 8);
                while ((*(_WORD *)(v64 + 44) & 8) != 0);
              }
            }
            goto LABEL_2820;
          }
        }
LABEL_1575:
        sub_1C554C050(v112, v113);
        if (v1028)
          __asm { BR              X9 }
        v1029 = v116;
        v1030 = v112;
        v1135 = sub_1C554C050(v1029, v113);
        if (!v1136)
          goto LABEL_1854;
        v1137 = v1135;
        v1139 = sub_1C4825F50((unint64_t *)&v2027);
        if ((_DWORD)v1138 == 1)
        LODWORD(v2047) = v1139;
        if (v1139 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v2046, v1137, 1);
        }
        else
        {
          v1140 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1139;
          if (!v1139)
            v1140 = 0;
          v2046 = v1140 & v1137;
        }
        if ((v115 & 0xFFFFFFFE) != 0x20)
          goto LABEL_1850;
        v1141 = v112;
        v1142 = (uint64_t *)((v112 & 0x80000000) != 0
                          ? *(_QWORD *)(v113 + 24) + 16 * (v112 & 0x7FFFFFFF) + 8
                          : *(_QWORD *)(v113 + 272) + 8 * v112);
        v1143 = *v1142;
        if (!v1143)
          goto LABEL_1850;
        while ((*(_BYTE *)(v1143 + 3) & 1) != 0)
        {
          v1143 = *(_QWORD *)(v1143 + 24);
          if (!v1143)
            goto LABEL_1850;
        }
        while (1)
        {
          v1143 = *(_QWORD *)(v1143 + 24);
          if (!v1143)
            break;
          if ((*(_BYTE *)(v1143 + 3) & 1) == 0)
            goto LABEL_1850;
        }
        v1144 = (uint64_t **)v3;
        if ((v1030 & 0x80000000) != 0)
          v1145 = (uint64_t *)(*(_QWORD *)(v113 + 24) + 16 * (v1141 & 0x7FFFFFFF) + 8);
        else
          v1145 = (uint64_t *)(*(_QWORD *)(v113 + 272) + 8 * v1030);
        v1146 = *v1145;
        if (v1146
          && ((*(_BYTE *)(v1146 + 3) & 1) != 0
           || (v1146 = *(_QWORD *)(v1146 + 24)) != 0 && (*(_BYTE *)(v1146 + 3) & 1) != 0)
          && (v1766 = *(_QWORD *)(v1146 + 8)) != 0
          && **(_WORD **)(v1766 + 16) == 126
          && *(_DWORD *)(v1766 + 40) == 2)
        {
          v1149 = *(_DWORD *)(*(_QWORD *)(v1766 + 32) + 36);
          if (v1149 < 0 && (v1149 & 0x7FFFFFFFu) < *(_DWORD *)(v113 + 432))
            v1767 = *(void **)(*(_QWORD *)(v113 + 424) + 8 * (v1149 & 0x7FFFFFFF));
          else
            v1767 = 0;
          __s1[0] = v1767;
          v1150 = sub_1C4825F50((unint64_t *)__s1);
          if ((_DWORD)v1812 == 1)
        }
        else
        {
          if ((v1030 & 0x80000000) != 0)
            v1147 = (uint64_t *)(*(_QWORD *)(v113 + 24) + 16 * (v1141 & 0x7FFFFFFF) + 8);
          else
            v1147 = (uint64_t *)(*(_QWORD *)(v113 + 272) + 8 * v1030);
          v1148 = *v1147;
          if (v1148)
          {
            if ((*(_BYTE *)(v1148 + 3) & 1) != 0
              || (v1148 = *(_QWORD *)(v1148 + 24)) != 0 && (*(_BYTE *)(v1148 + 3) & 1) != 0)
            {
              v1768 = *(_QWORD *)(v1148 + 8);
              if (v1768)
              {
                if (**(_WORD **)(v1768 + 16) == 124 && *(_DWORD *)(v1768 + 40) == 2)
                {
                  v1149 = *(_DWORD *)(*(_QWORD *)(v1768 + 32) + 36);
                  if (v1149 < 0 && (v1149 & 0x7FFFFFFFu) < *(_DWORD *)(v113 + 432))
                    v1769 = *(void **)(*(_QWORD *)(v113 + 424) + 8 * (v1149 & 0x7FFFFFFF));
                  else
                    v1769 = 0;
                  __s1[0] = v1769;
                  v1150 = sub_1C4825F50((unint64_t *)__s1);
                  if ((_DWORD)v1813 == 1)
                  v1814 = v2047;
                  v1156 = v1814 - sub_1C4959174((llvm::APInt *)&v2046) + 1;
LABEL_1842:
                  v3 = (uint64_t)v1144;
                  if (!v1150)
                  {
LABEL_1850:
                    v1157 = v2047;
                    goto LABEL_1851;
                  }
                  v1157 = v2047;
                  if (v1150 < v2047 && v1150 >= v1156)
                  {
                    v1159 = *v1144;
                    v1159[5] = *(_QWORD *)(a2 + 24);
                    v1159[6] = a2;
                    v1160 = *v1144;
                    v2031 = (void *)((8 * v1150) | 1);
                    LODWORD(v2032) = 0;
                    LODWORD(__s1[0]) = v1149;
                    LODWORD(v2036) = 0;
                    sub_1C5546B4C(v1160, 126, (unint64_t *)&v2031, (int *)__s1);
                    v1162 = v1161;
                    v1163 = (uint64_t)*v1144;
                    __s1[0] = (void *)((8 * v1150) | 1);
                    LODWORD(__s1[1]) = 0;
                    llvm::APInt::trunc((llvm::APInt *)&v2046, v1150, (llvm::APInt *)&v2031);
                    if (v2032 > 0x40)
                      v1164 = *(_QWORD *)v2031;
                    else
                      v1164 = (uint64_t)((_QWORD)v2031 << -(uint64_t)v2032) >> -(uint64_t)v2032;
                    sub_1C5544694(v1163, (unint64_t *)__s1, v1164);
                    v1173 = v1172;
                    if (v2032 >= 0x41 && v2031)
                      MEMORY[0x1CAA32F9C](v2031, 0x1000C8000313F17);
                    v1174 = *v1144;
                    LODWORD(v2031) = v1989;
                    LODWORD(v2032) = 1;
                    v1175 = *(_DWORD *)(*(_QWORD *)(v1162 + 32) + 4);
                    v1176 = *(_DWORD *)(*(_QWORD *)(v1173 + 32) + 4);
                    LODWORD(__s1[0]) = v115;
                    LODWORD(v2036) = 2;
                    DWORD2(v2036) = v1175;
                    LODWORD(v2038) = 0;
                    LODWORD(v2039) = v1176;
                    *(_DWORD *)v2041 = 0;
                    (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1174 + 32))(v1174, 134, &v2031, 1, __s1, 3, 0);
                    v1177 = *(_QWORD *)(a2 + 24);
                    v1178 = a2;
                    if ((*(_BYTE *)a2 & 4) == 0)
                    {
                      v1178 = a2;
                      if ((*(_WORD *)(a2 + 44) & 8) != 0)
                      {
                        v1178 = a2;
                        do
                          v1178 = *(_QWORD *)(v1178 + 8);
                        while ((*(_WORD *)(v1178 + 44) & 8) != 0);
                      }
                    }
                    goto LABEL_1876;
                  }
LABEL_1851:
                  if (v1157 >= 0x41 && v2046)
                    MEMORY[0x1CAA32F9C](v2046, 0x1000C8000313F17);
LABEL_1854:
                  v1165 = sub_1C554C050(v1029, v113);
                  if (!v1166 || (v115 & 0xFFFFFFFE) != 0x20)
                    return sub_1C6037A10((uint64_t *)v3, a2);
                  v1167 = v1165;
                  v1168 = (uint64_t *)((v1030 & 0x80000000) != 0
                                    ? *(_QWORD *)(v113 + 24) + 16 * (v1030 & 0x7FFFFFFF) + 8
                                    : *(_QWORD *)(v113 + 272) + 8 * v1030);
                  v1169 = *v1168;
                  if (!v1169)
                    return sub_1C6037A10((uint64_t *)v3, a2);
                  while ((*(_BYTE *)(v1169 + 3) & 1) != 0)
                  {
                    v1169 = *(_QWORD *)(v1169 + 24);
                    if (!v1169)
                      return sub_1C6037A10((uint64_t *)v3, a2);
                  }
                  while (1)
                  {
                    v1169 = *(_QWORD *)(v1169 + 24);
                    if (!v1169)
                      break;
                    if ((*(_BYTE *)(v1169 + 3) & 1) == 0)
                      return sub_1C6037A10((uint64_t *)v3, a2);
                  }
                  v1170 = (uint64_t *)((v1030 & 0x80000000) != 0
                                    ? *(_QWORD *)(v113 + 24) + 16 * (v1030 & 0x7FFFFFFF) + 8
                                    : *(_QWORD *)(v113 + 272) + 8 * v1030);
                  v1171 = *v1170;
                  if (!v1171)
                    return sub_1C6037A10((uint64_t *)v3, a2);
                  if ((*(_BYTE *)(v1171 + 3) & 1) == 0)
                  {
                    v1171 = *(_QWORD *)(v1171 + 24);
                    if (!v1171 || (*(_BYTE *)(v1171 + 3) & 1) == 0)
                      return sub_1C6037A10((uint64_t *)v3, a2);
                  }
                  v1791 = *(_QWORD *)(v1171 + 8);
                  if (!v1791 || **(_WORD **)(v1791 + 16) != 45 || *(_DWORD *)(v1791 + 40) != 3)
                    return sub_1C6037A10((uint64_t *)v3, a2);
                  v1792 = *(_QWORD *)(v1791 + 32);
                  v1793 = *(_DWORD *)(v1792 + 36);
                  v1794 = sub_1C554C050(*(_DWORD *)(v1792 + 68), v113);
                  if (!v1795)
                  {
                    v1794 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v1791 + 32) + 36), v113);
                    if (!v1796)
                      return sub_1C6037A10((uint64_t *)v3, a2);
                    v1793 = *(_DWORD *)(*(_QWORD *)(v1791 + 32) + 68);
                  }
                  v1797 = *(_QWORD *)v3;
                  LODWORD(v2046) = v1989;
                  LODWORD(v2047) = 1;
                  if (v1793 < 0 && (v1793 & 0x7FFFFFFFu) < *(_DWORD *)(v113 + 432))
                    v1798 = *(void **)(*(_QWORD *)(v113 + 424) + 8 * (v1793 & 0x7FFFFFFF));
                  else
                    v1798 = 0;
                  v2031 = v1798;
                  LODWORD(v2032) = 0;
                  v1805 = sub_1C5544694(v1797, (unint64_t *)&v2031, v1167 - v1794);
                  LODWORD(__s1[0]) = v115;
                  LODWORD(v2036) = 2;
                  DWORD2(v2036) = v1793;
                  LODWORD(v2038) = 0;
                  v2039 = v1805;
                  v2040 = v1806;
                  *(_DWORD *)v2041 = 1;
                  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v1797 + 32))(v1797, 134, &v2046, 1, __s1, 3, 0);
                  v63 = *(_QWORD *)(a2 + 24);
                  v64 = a2;
                  if ((*(_BYTE *)a2 & 4) == 0)
                  {
                    v64 = a2;
                    if ((*(_WORD *)(a2 + 44) & 8) != 0)
                    {
                      v64 = a2;
                      do
                        v64 = *(_QWORD *)(v64 + 8);
                      while ((*(_WORD *)(v64 + 44) & 8) != 0);
                    }
                  }
                  goto LABEL_2820;
                }
              }
            }
          }
          v1149 = 0;
          v1150 = 0;
        }
        if (v2047 > 0x40)
        {
          v1152 = 0;
          v1153 = ((unint64_t)v2047 + 63) >> 6;
          do
          {
            v590 = v1153-- < 1;
            if (v590)
              break;
            v1154 = *(_QWORD *)(v2046 + 8 * v1153);
            v1152 += __clz(v1154);
          }
          while (!v1154);
          v1155 = v2047 | 0xFFFFFFC0;
          if ((v2047 & 0x3F) == 0)
            v1155 = 0;
          v1151 = v1152 + v1155;
        }
        else
        {
          v1151 = v2047 + __clz(v2046) - 64;
        }
        v1156 = v2047 - v1151;
        goto LABEL_1842;
      case 136:
        v135 = *(_QWORD *)v3;
        v136 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40);
        v137 = *(_DWORD **)(a2 + 32);
        v138 = v137[9];
        if ((v138 & 0x80000000) != 0)
          v139 = (uint64_t *)(*(_QWORD *)(v136 + 24) + 16 * (v138 & 0x7FFFFFFF) + 8);
        else
          v139 = (uint64_t *)(*(_QWORD *)(v136 + 272) + 8 * v138);
        v425 = v137[17];
        v426 = v137[25];
        v427 = *v139;
        if ((*(_BYTE *)(v427 + 3) & 1) == 0)
          v427 = *(_QWORD *)(v427 + 24);
        if ((_DWORD)v425 != (_DWORD)v426 && **(_WORD **)(*(_QWORD *)(v427 + 8) + 16) != 68)
        {
          if ((v425 & 0x80000000) != 0)
            v428 = (uint64_t *)(*(_QWORD *)(v136 + 24) + 16 * (v425 & 0x7FFFFFFF) + 8);
          else
            v428 = (uint64_t *)(*(_QWORD *)(v136 + 272) + 8 * v425);
          v566 = *v428;
          if ((*(_BYTE *)(v566 + 3) & 1) == 0)
            v566 = *(_QWORD *)(v566 + 24);
          if (**(_WORD **)(*(_QWORD *)(v566 + 8) + 16) == 68)
          {
            LODWORD(v425) = v137[25];
          }
          else
          {
            if ((v426 & 0x80000000) != 0)
              v567 = (uint64_t *)(*(_QWORD *)(v136 + 24) + 16 * (v426 & 0x7FFFFFFF) + 8);
            else
              v567 = (uint64_t *)(*(_QWORD *)(v136 + 272) + 8 * v426);
            v796 = *v567;
            if ((*(_BYTE *)(v796 + 3) & 1) == 0)
              v796 = *(_QWORD *)(v796 + 24);
            if (**(_WORD **)(*(_QWORD *)(v796 + 8) + 16) != 68)
            {
              v797 = sub_1C554C050(v137[9], *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40));
              if (v798)
              {
                if (v797)
                  v799 = v425;
                else
                  v799 = v426;
                v800 = *(_QWORD *)v3;
                LODWORD(v2046) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
                LODWORD(v2047) = 1;
                LODWORD(__s1[0]) = v799;
                LODWORD(v2036) = 0;
                (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v800 + 32))(v800, 19, &v2046, 1, __s1, 1, 0);
                v63 = *(_QWORD *)(a2 + 24);
                v64 = a2;
                if ((*(_BYTE *)a2 & 4) == 0)
                {
                  v64 = a2;
                  if ((*(_WORD *)(a2 + 44) & 8) != 0)
                  {
                    v64 = a2;
                    do
                      v64 = *(_QWORD *)(v64 + 8);
                    while ((*(_WORD *)(v64 + 44) & 8) != 0);
                  }
                }
              }
              else
              {
                if (**(_WORD **)(a2 + 16) != 136)
                  return sub_1C6037A10((uint64_t *)v3, a2);
                v870 = *(_DWORD **)(a2 + 32);
                v871 = v870[1];
                v872 = v870[9];
                if (v871 < 0 && (v871 & 0x7FFFFFFFu) < *(_DWORD *)(v136 + 432))
                  v873 = *(_QWORD *)(*(_QWORD *)(v136 + 424) + 8 * (v871 & 0x7FFFFFFF));
                else
                  v873 = 0;
                if ((v872 & 0x80000000) == 0
                  || (v872 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v136 + 432)
                  || *(_QWORD *)(*(_QWORD *)(v136 + 424) + 8 * (v872 & 0x7FFFFFFF)) != 9)
                {
                  return sub_1C6037A10((uint64_t *)v3, a2);
                }
                v709 = v3;
                v937 = *(_QWORD *)v3;
                v1984 = *(unsigned __int16 *)(a2 + 44);
                v938 = v870[17];
                v1993 = v870[25];
                LODWORD(v2023) = 0;
                LODWORD(v2018) = 0;
                __s1[0] = &v2023;
                __s1[1] = &v2018;
                if (sub_1C49BAF38((uint64_t)__s1, v136, v872))
                {
                  LODWORD(v2031) = v871;
                  LODWORD(v2032) = 1;
                  LODWORD(__s1[0]) = v2023;
                  LODWORD(v2036) = 0;
                  DWORD2(v2036) = v938;
                  LODWORD(v2038) = 0;
                  *(_QWORD *)&v2027 = v873;
                  DWORD2(v2027) = 0;
                  LODWORD(v2046) = v2018;
                  DWORD2(v2047) = 0;
                  LODWORD(v2048) = v938;
                  v2050 = 0;
                  LODWORD(v2051) = v1993;
                  v2053 = 0;
                  v939 = v1984 | 0x100000000;
                  v2039 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v937 + 32))(v937, 136, &v2027, 1, &v2046, 3, v1984 | 0x100000000);
                  v2040 = v940;
                  *(_DWORD *)v2041 = 1;
                }
                else
                {
                  __s1[0] = &v2023;
                  __s1[1] = &v2018;
                  if (!sub_1C49BC770((uint64_t)__s1, v136, v872))
                  {
LABEL_2993:
                    v3 = v709;
                    return sub_1C6037A10((uint64_t *)v3, a2);
                  }
                  LODWORD(v2031) = v871;
                  LODWORD(v2032) = 1;
                  LODWORD(__s1[0]) = v2023;
                  LODWORD(v2036) = 0;
                  *(_QWORD *)&v2027 = v873;
                  DWORD2(v2027) = 0;
                  LODWORD(v2046) = v2018;
                  DWORD2(v2047) = 0;
                  LODWORD(v2048) = v938;
                  v2050 = 0;
                  LODWORD(v2051) = v1993;
                  v2053 = 0;
                  v939 = v1984 | 0x100000000;
                  *((_QWORD *)&v2036 + 1) = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v937 + 32))(v937, 136, &v2027, 1, &v2046, 3, v1984 | 0x100000000);
                  v2037 = v1074;
                  LODWORD(v2038) = 1;
                  LODWORD(v2039) = v1993;
                  *(_DWORD *)v2041 = 0;
                }
                (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v937 + 32))(v937, 136, &v2031, 1, __s1, 3, v939);
                v63 = *(_QWORD *)(a2 + 24);
                v64 = a2;
                if ((*(_BYTE *)a2 & 4) == 0)
                {
                  v64 = a2;
                  if ((*(_WORD *)(a2 + 44) & 8) != 0)
                  {
                    v64 = a2;
                    do
                      v64 = *(_QWORD *)(v64 + 8);
                    while ((*(_WORD *)(v64 + 44) & 8) != 0);
                  }
                }
              }
              goto LABEL_2820;
            }
          }
          LODWORD(v2046) = v137[1];
          LODWORD(v2047) = 1;
          LODWORD(__s1[0]) = v425;
          LODWORD(v2036) = 0;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v135 + 32))(v135, 19, &v2046, 1, __s1, 1, 0);
          v63 = *(_QWORD *)(a2 + 24);
          v64 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v64 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v64 = a2;
              do
                v64 = *(_QWORD *)(v64 + 8);
              while ((*(_WORD *)(v64 + 44) & 8) != 0);
            }
          }
          goto LABEL_2820;
        }
        LODWORD(v2046) = v137[1];
        LODWORD(v2047) = 1;
        LODWORD(__s1[0]) = v425;
        LODWORD(v2036) = 0;
        (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v135 + 32))(v135, 19, &v2046, 1, __s1, 1, 0);
        v63 = *(_QWORD *)(a2 + 24);
        v64 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v64 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v64 = a2;
            do
              v64 = *(_QWORD *)(v64 + 8);
            while ((*(_WORD *)(v64 + 44) & 8) != 0);
          }
        }
        goto LABEL_2820;
      default:
        if (v4 != 90)
        {
          if (v4 != 96)
            return sub_1C6037A10((uint64_t *)v3, a2);
          v1988 = *(_QWORD *)(*(_QWORD *)v3 + 8);
          v50 = *(_QWORD *)(v1988 + 40);
          v1977 = *(_QWORD *)(a2 + 32);
          v51 = *(unsigned int *)(v1977 + 4);
          if ((v51 & 0x80000000) != 0
            && (v51 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v50 + 432))
          {
            v52 = *(_QWORD *)(*(_QWORD *)(v50 + 424) + 8 * (v51 & 0x7FFFFFFF));
          }
          else
          {
            v52 = 0;
          }
          v388 = (unint64_t *)(a2 + 48);
          v387 = *(_QWORD *)(a2 + 48);
          if (v387 < 8)
          {
            v389 = 0;
LABEL_952:
            v713 = 0;
            v714 = 0;
LABEL_953:
            if (v389 == &v713[2 * v714] || !*(_QWORD *)v389)
            {
              v716 = v52 & 4;
              v715 = v52 & 0xFFFFFFFFFFFFFFF9;
              if ((v52 & 0xFFFFFFFFFFFFFFF9) == 0 || (v52 & 4) == 0)
              {
                if ((v387 & 7) != 0)
                {
                  v721 = *(_QWORD *)((v387 & 0xFFFFFFFFFFFFFFF8) + 8);
                }
                else
                {
                  v721 = v387 & 0xFFFFFFFFFFFFFFF8;
                  *v388 = v387 & 0xFFFFFFFFFFFFFFF8;
                }
                v807 = *(_QWORD *)(v721 + 24);
                v806 = v721 + 24;
                v808 = (1 << *(_BYTE *)(v806 + 10)) | *(_QWORD *)(v806 - 16);
                v809 = __clz(v808 & -v808);
                if ((v807 & 0xFFFFFFFFFFFFFFF9) != 0)
                {
                  v811 = (unint64_t)(sub_1C4825F50((unint64_t *)v806) + 7) >> 3;
                  if ((_DWORD)v810 == 1)
                }
                else
                {
                  v811 = -1;
                }
                v812 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1988 + 16) + 168))(*(_QWORD *)(v1988 + 16));
                if ((63 - v809) <= 1u && (1 << (63 - v809)) % v811)
                {
                  v813 = v809 == 63 || v811 >= 9;
                  if (v813)
                  {
                    sub_1C4933670(v812, a2, v50, *(uint64_t **)v3);
                    return 1;
                  }
                }
              }
            }
            else
            {
              v715 = v52 & 0xFFFFFFFFFFFFFFF9;
              v716 = v52 & 4;
            }
            if (!v716 || !v715)
              return sub_1C6037A10((uint64_t *)v3, a2);
            v717 = 3;
            if ((v52 & 1) == 0)
              v717 = 19;
            v718 = v52 >> v717;
            if ((v52 & 2) != 0)
              v719 = (v52 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v718) | 2;
            else
              v719 = v52 & 0x8000000000000000 | (8 * v718) | 1;
            *(_QWORD *)&v2027 = v719;
            if ((v51 & 0x80000000) != 0)
              v720 = (uint64_t *)(*(_QWORD *)(v50 + 24) + 16 * (v51 & 0x7FFFFFFF) + 8);
            else
              v720 = (uint64_t *)(*(_QWORD *)(v50 + 272) + 8 * v51);
            v722 = *v720;
            if (v722
              && ((*(_BYTE *)(v722 + 3) & 1) != 0
               || (v722 = *(_QWORD *)(v722 + 24)) != 0 && (*(_BYTE *)(v722 + 3) & 1) != 0))
            {
              v723 = *(_QWORD *)(v722 + 8);
            }
            else
            {
              v723 = 0;
            }
            v725 = sub_1C4825F50((unint64_t *)&v2027);
            if ((_DWORD)v724 == 1)
            v726 = **(unsigned __int16 **)(v723 + 16);
            if (v726 == 68)
              goto LABEL_998;
            if (v726 != 77)
              return sub_1C6037A10((uint64_t *)v3, a2);
            v727 = (*(_DWORD *)(v723 + 40) - 1);
            if ((v727 * v725) > 0x80)
              return sub_1C6037A10((uint64_t *)v3, a2);
            v728 = 0x800000000000000;
            if ((v52 & 2) == 0)
              v728 = 0x8000000000000;
            if ((v728 & v52) != 0)
              llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v724);
            v729 = 0xFFFFFFFFFFFFFFFFLL >> -(unsigned __int16)(v52 >> 3);
            if (!(unsigned __int16)(v52 >> 3))
              v729 = 0;
            if ((_DWORD)v727)
            {
              v730 = 0;
              v731 = (unsigned int *)(*(_QWORD *)(v723 + 32) + 36);
              do
              {
                v733 = *v731;
                v731 += 8;
                v732 = v733;
                if ((v733 & 0x80000000) != 0)
                  v734 = (uint64_t *)(*(_QWORD *)(v50 + 24) + 16 * (v732 & 0x7FFFFFFF) + 8);
                else
                  v734 = (uint64_t *)(*(_QWORD *)(v50 + 272) + 8 * v732);
                v735 = *v734;
                if ((*(_BYTE *)(v735 + 3) & 1) == 0)
                  v735 = *(_QWORD *)(v735 + 24);
                v736 = v730 + 1;
                if (**(_WORD **)(*(_QWORD *)(v735 + 8) + 16) == 68)
                  v737 = ~(1 << v730);
                else
                  v737 = -1;
                v729 &= v737;
                v730 = v736;
              }
              while (v727 != v736);
            }
            if (!v729)
            {
LABEL_998:
              (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16), a2);
              v63 = *(_QWORD *)(a2 + 24);
              v64 = a2;
              if ((*(_BYTE *)a2 & 4) == 0)
              {
                v64 = a2;
                if ((*(_WORD *)(a2 + 44) & 8) != 0)
                {
                  v64 = a2;
                  do
                    v64 = *(_QWORD *)(v64 + 8);
                  while ((*(_WORD *)(v64 + 44) & 8) != 0);
                }
              }
              goto LABEL_2820;
            }
            v738 = __clz(v729);
            if (v738 == 63)
            {
              v739 = *(_DWORD *)(*(_QWORD *)(v723 + 32) + 36);
              LODWORD(v740) = 1;
              goto LABEL_996;
            }
            v919 = 64 - v738;
            if (v725 != 8 && v738 == 61)
              v921 = 3;
            else
              v921 = 65 - v738;
            if ((v919 & 1) != 0)
              v740 = v921;
            else
              v740 = v919;
            v922 = v727 <= v740 || v740 > 8;
            if (v922 || v740 >= 5 && (v2027 & 0x8000000000000000) != 0)
              return sub_1C6037A10((uint64_t *)v3, a2);
            v923 = 0;
            v2046 = (unint64_t)&v2047 + 8;
            *(_QWORD *)&v2047 = 0x400000000;
            v924 = 36;
            v925 = v740;
            do
            {
              v926 = *(_DWORD *)(*(_QWORD *)(v723 + 32) + v924);
              if (v923 >= DWORD1(v2047))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2046, (uint64_t)&v2047 + 8, v923 + 1, 4);
                v923 = v2047;
              }
              *(_DWORD *)(v2046 + 4 * v923) = v926;
              v923 = v2047 + 1;
              LODWORD(v2047) = v2047 + 1;
              v924 += 32;
              --v925;
            }
            while (v925);
            v1003 = (void *)sub_1C4953AD0(v740, v2027);
            v1004 = v3;
            v1005 = *(_QWORD *)v3;
            v2031 = v1003;
            LODWORD(v2032) = 0;
            v1006 = (int *)v2046;
            v1007 = v2047;
            __s1[0] = &v2036;
            __s1[1] = (void *)0x800000000;
            if (v2047 >= 9)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__s1, (uint64_t)&v2036, v2047, 24);
              v1008 = LODWORD(__s1[1]);
              v1009 = (__int128 *)__s1[0];
            }
            else
            {
              if (!(_DWORD)v2047)
              {
                v1014 = 0;
                v1009 = &v2036;
LABEL_1647:
                LODWORD(__s1[1]) = v1014 + v1007;
                (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *))(*(_QWORD *)v1005 + 32))(v1005, 77, &v2031, 1, v1009);
                v1066 = v1065;
                if (__s1[0] != &v2036)
                  free(__s1[0]);
                v739 = *(_DWORD *)(*(_QWORD *)(v1066 + 32) + 4);
                if ((__int128 *)v2046 != (__int128 *)((char *)&v2047 + 8))
                  free((void *)v2046);
                v3 = v1004;
LABEL_996:
                (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(v3 + 16) + 32))(*(_QWORD *)(v3 + 16), a2);
                llvm::MachineOperand::setReg(v1977, v739);
                v741 = *(_QWORD *)(a2 + 48);
                if ((v741 & 7) != 0)
                {
                  v742 = *(_QWORD *)((v741 & 0xFFFFFFFFFFFFFFF8) + 8);
                  v743 = (_QWORD *)(a2 + 48);
                }
                else
                {
                  v742 = v741 & 0xFFFFFFFFFFFFFFF8;
                  v743 = (_QWORD *)(a2 + 48);
                  *(_QWORD *)(a2 + 48) = v741 & 0xFFFFFFFFFFFFFFF8;
                }
                v953 = (unsigned __int16)(v52 >> 19);
                if ((v52 & 2) == 0)
                  v953 = v52 >> 19;
                if ((v52 & 1) != 0)
                  v953 = v52 >> 3;
                __s1[0] = (void *)llvm::MachineFunction::getMachineMemOperand(v1988, v742, *(_QWORD *)(v742 + 8), ((unint64_t)((v740 * v953) >> 3) << 6) | 1);
                if (*v743 >= 8uLL)
                {
                  v1132 = *v743 & 7;
                  v1133 = (unsigned __int8 *)(*v743 & 0xFFFFFFFFFFFFFFF8);
                  if (v1132 == 1 && v1133)
                  {
                    v954 = 0;
                    v956 = 0;
                    v955 = *v743 & 0xFFFFFFFFFFFFFFF8;
                    goto LABEL_1456;
                  }
                  if (v1132 != 3 || !v1133)
                  {
                    v955 = 0;
                    v956 = 0;
                    if (v1133)
                      v1134 = v1132 == 2;
                    else
                      v1134 = 0;
                    if (v1134)
                      v954 = *v743 & 0xFFFFFFFFFFFFFFF8;
                    else
                      v954 = 0;
                    goto LABEL_1456;
                  }
                  v1229 = v1133[4];
                  if (v1133[4])
                    v955 = *(_QWORD *)&v1133[8 * *(int *)v1133 + 8];
                  else
                    v955 = 0;
                  if (v1133[5])
                    v954 = *(_QWORD *)&v1133[8 * *(int *)v1133 + 8 + 8 * v1229];
                  else
                    v954 = 0;
                  if (v1133[6])
                  {
                    v956 = *(_QWORD *)&v1133[8 * *(int *)v1133 + 8 + 8 * v1133[5] + 8 * v1229];
                    goto LABEL_1456;
                  }
                }
                else
                {
                  v954 = 0;
                  v955 = 0;
                }
                v956 = 0;
LABEL_1456:
                llvm::MachineInstr::setExtraInfo(a2, v1988, __s1, 1, v955, v954, v956);
                goto LABEL_2063;
              }
              v1008 = 0;
              v1009 = &v2036;
            }
            v1010 = 24 * v1008;
            v1011 = 4 * v1007;
            do
            {
              v1012 = *v1006++;
              v1013 = (_DWORD *)((char *)v1009 + v1010);
              *v1013 = v1012;
              v1013[4] = 0;
              v1010 += 24;
              v1011 -= 4;
            }
            while (v1011);
            v1014 = (int)__s1[1];
            goto LABEL_1647;
          }
          if ((v387 & 7) != 0)
          {
            v389 = 0;
            if ((*(_QWORD *)(a2 + 48) & 7) != 3)
              goto LABEL_1229;
            v390 = (int *)(v387 & 0xFFFFFFFFFFFFFFF8);
            if ((v387 & 0xFFFFFFFFFFFFFFF8) == 0)
              goto LABEL_1229;
            v393 = *v390;
            v392 = v390 + 2;
            v391 = v393;
            if (!(_DWORD)v393)
            {
              v389 = v392;
              goto LABEL_1229;
            }
            v394 = (unint64_t)&v392[2 * v391];
          }
          else
          {
            v387 &= 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(a2 + 48) = v387;
            v394 = a2 + 56;
            v392 = (int *)(a2 + 48);
          }
          v389 = v392;
          while ((*(_WORD *)(*(_QWORD *)v389 + 36) & 0xF00) == 0)
          {
            v389 += 2;
            if (v389 == (int *)v394)
            {
              v389 = (int *)v394;
              break;
            }
          }
          if (v387 < 8)
            goto LABEL_952;
LABEL_1229:
          if ((v387 & 7) != 0)
          {
            v713 = 0;
            if ((v387 & 7) == 3 && (v842 = (int *)(v387 & 0xFFFFFFFFFFFFFFF8), (v387 & 0xFFFFFFFFFFFFFFF8) != 0))
            {
              v714 = *v842;
              v713 = v842 + 2;
            }
            else
            {
              v714 = 0;
            }
          }
          else
          {
            v387 &= 0xFFFFFFFFFFFFFFF8;
            *v388 = v387;
            v714 = 1;
            v713 = (int *)(a2 + 48);
          }
          goto LABEL_953;
        }
        v272 = *(_QWORD *)(*(_QWORD *)v3 + 8);
        v273 = *(_QWORD *)(v272 + 40);
        v274 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 4);
        if ((v274 & 0x80000000) != 0
          && (v274 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v273 + 432))
        {
          v275 = *(_QWORD *)(*(_QWORD *)(v273 + 424) + 8 * (v274 & 0x7FFFFFFF));
        }
        else
        {
          v275 = 0;
        }
        v379 = (unint64_t *)(a2 + 48);
        v380 = *(_QWORD *)(a2 + 48);
        if (v380 < 8)
        {
          v381 = 0;
LABEL_939:
          v710 = 0;
          v711 = 0;
LABEL_940:
          if ((v381 == &v710[2 * v711] || !*(_QWORD *)v381) && ((v275 & 0xFFFFFFFFFFFFFFF9) == 0 || (v275 & 4) == 0))
          {
            v712 = (uint64_t *)((v274 & 0x80000000) != 0
                             ? *(_QWORD *)(v273 + 24) + 16 * (v274 & 0x7FFFFFFF) + 8
                             : *(_QWORD *)(v273 + 272) + 8 * v274);
            v804 = *v712;
            if (!v804)
              goto LABEL_1363;
            while ((*(_BYTE *)(v804 + 3) & 1) != 0)
            {
              v804 = *(_QWORD *)(v804 + 24);
              if (!v804)
                goto LABEL_1363;
            }
            while (1)
            {
              v804 = *(_QWORD *)(v804 + 24);
              if (!v804)
                break;
              if ((*(_BYTE *)(v804 + 3) & 1) == 0)
                goto LABEL_1363;
            }
            v805 = (uint64_t *)((v274 & 0x80000000) != 0
                             ? *(_QWORD *)(v273 + 24) + 16 * (v274 & 0x7FFFFFFF) + 8
                             : *(_QWORD *)(v273 + 272) + 8 * v274);
            for (m = *v805; (*(_BYTE *)(m + 3) & 1) != 0; m = *(_QWORD *)(m + 24))
              ;
            v907 = *(_QWORD *)(m + 8);
            if (**(_WORD **)(v907 + 16) != 119
              || (v908 = *(_DWORD *)(*(_QWORD *)(v907 + 32) + 4), (v908 & 0x80000000) == 0)
              || (v909 = v908 & 0x7FFFFFFF, v909 >= *(_DWORD *)(v273 + 432))
              || *(_QWORD *)(*(_QWORD *)(v273 + 424) + 8 * v909) != 129)
            {
LABEL_1363:
              if ((v380 & 7) != 0)
              {
                v910 = *(_QWORD *)((v380 & 0xFFFFFFFFFFFFFFF8) + 8);
              }
              else
              {
                v910 = v380 & 0xFFFFFFFFFFFFFFF8;
                *v379 = v380 & 0xFFFFFFFFFFFFFFF8;
              }
              v912 = *(_QWORD *)(v910 + 24);
              v911 = v910 + 24;
              v913 = (1 << *(_BYTE *)(v911 + 10)) | *(_QWORD *)(v911 - 16);
              v914 = __clz(v913 & -v913);
              if ((v912 & 0xFFFFFFFFFFFFFFF9) != 0)
              {
                v916 = (unint64_t)(sub_1C4825F50((unint64_t *)v911) + 7) >> 3;
                if ((_DWORD)v915 == 1)
              }
              else
              {
                v916 = -1;
              }
              v917 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v272 + 16) + 168))(*(_QWORD *)(v272 + 16));
              if ((63 - v914) <= 1u
                && (1 << (63 - v914)) % v916
                && (v914 == 63 || v916 >= 9))
              {
                sub_1C4932E94(v917, a2, v273, *(uint64_t **)v3);
                return 1;
              }
            }
          }
          return sub_1C6037A10((uint64_t *)v3, a2);
        }
        if ((v380 & 7) != 0)
        {
          v381 = 0;
          if ((*(_QWORD *)(a2 + 48) & 7) != 3)
            goto LABEL_1222;
          v382 = (int *)(v380 & 0xFFFFFFFFFFFFFFF8);
          if ((v380 & 0xFFFFFFFFFFFFFFF8) == 0)
            goto LABEL_1222;
          v385 = *v382;
          v384 = v382 + 2;
          v383 = v385;
          if (!(_DWORD)v385)
          {
            v381 = v384;
            goto LABEL_1222;
          }
          v386 = (unint64_t)&v384[2 * v383];
        }
        else
        {
          v380 &= 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(a2 + 48) = v380;
          v386 = a2 + 56;
          v384 = (int *)(a2 + 48);
        }
        v381 = v384;
        while ((*(_WORD *)(*(_QWORD *)v381 + 36) & 0xF00) == 0)
        {
          v381 += 2;
          if (v381 == (int *)v386)
          {
            v381 = (int *)v386;
            break;
          }
        }
        if (v380 < 8)
          goto LABEL_939;
LABEL_1222:
        if ((v380 & 7) != 0)
        {
          v710 = 0;
          if ((v380 & 7) == 3 && (v841 = (int *)(v380 & 0xFFFFFFFFFFFFFFF8), (v380 & 0xFFFFFFFFFFFFFFF8) != 0))
          {
            v711 = *v841;
            v710 = v841 + 2;
          }
          else
          {
            v711 = 0;
          }
        }
        else
        {
          v380 &= 0xFFFFFFFFFFFFFFF8;
          *v379 = v380;
          v711 = 1;
          v710 = (int *)(a2 + 48);
        }
        goto LABEL_940;
    }
  }
  if (v4 <= 271)
  {
    if (v4 <= 203)
    {
      switch(v4)
      {
        case 164:
          v166 = *(_QWORD *)(*(_QWORD *)v3 + 8);
          v167 = *(_QWORD *)(v166 + 40);
          v168 = *(_QWORD *)(v166 + 8);
          v169 = *(_OWORD *)(v168 + 1024);
          *(_OWORD *)__s1 = *(_OWORD *)(v168 + 1008);
          v2036 = v169;
          v170 = *(_QWORD *)(v168 + 1048);
          v2037 = *(_QWORD *)(v168 + 1040);
          v2038 = v170;
          v171 = *(_QWORD *)(v168 + 1056);
          v2039 = v171;
          if (v171)
          {
            v172 = (unint64_t *)(v171 + 8);
            do
              v173 = __ldxr(v172);
            while (__stxr(v173 + 1, v172));
          }
          LOWORD(v2040) = *(_WORD *)(v168 + 1064);
          if (*(char *)(v168 + 1095) < 0)
          {
            sub_1C47EBC30(v2041, *(void **)(v168 + 1072), *(_QWORD *)(v168 + 1080));
          }
          else
          {
            *(_OWORD *)v2041 = *(_OWORD *)(v168 + 1072);
            *(_QWORD *)&v2041[16] = *(_QWORD *)(v168 + 1088);
          }
          *(_OWORD *)v2042 = *(_OWORD *)(v168 + 1096);
          *(_OWORD *)&v2042[16] = *(_OWORD *)(v168 + 1112);
          sub_1C4843224((uint64_t)v2043, (uint64_t *)(v168 + 1128));
          if (*(char *)(v168 + 1311) < 0)
          {
            sub_1C47EBC30(&v2044, *(void **)(v168 + 1288), *(_QWORD *)(v168 + 1296));
          }
          else
          {
            v2044 = *(_OWORD *)(v168 + 1288);
            v2045 = *(_QWORD *)(v168 + 1304);
          }
          v445 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 4);
          LODWORD(v2008) = 0;
          v2003 = 0;
          v446 = *(unsigned __int16 *)(a2 + 44);
          if ((v445 & 0x80000000) != 0)
          {
            v451 = v445 & 0x7FFFFFFF;
            if (v451 < *(unsigned int *)(v167 + 432) && *(_QWORD *)(*(_QWORD *)(v167 + 424) + 8 * v451) == 129)
            {
              v452 = *(_QWORD *)v3;
              v448 = (_QWORD *)(a2 + 24);
              *(_QWORD *)(v452 + 40) = *(_QWORD *)(a2 + 24);
              *(_QWORD *)(v452 + 48) = a2;
              v450 = &unk_1C866F15C;
            }
            else
            {
              v519 = *(_QWORD *)v3;
              v448 = (_QWORD *)(a2 + 24);
              *(_QWORD *)(v519 + 40) = *(_QWORD *)(a2 + 24);
              *(_QWORD *)(v519 + 48) = a2;
              v450 = &unk_1C866F184;
            }
            v449 = (uint64_t *)(*(_QWORD *)(v167 + 24) + 16 * v451 + 8);
          }
          else
          {
            v447 = *(_QWORD *)v3;
            v448 = (_QWORD *)(a2 + 24);
            *(_QWORD *)(v447 + 40) = *(_QWORD *)(a2 + 24);
            *(_QWORD *)(v447 + 48) = a2;
            v449 = (uint64_t *)(*(_QWORD *)(v167 + 272) + 8 * v445);
            v450 = &unk_1C866F184;
          }
          v520 = *v449;
          if (v520)
          {
            if ((*(_BYTE *)(v520 + 3) & 1) != 0
              || (v520 = *(_QWORD *)(v520 + 24)) != 0 && (*(_BYTE *)(v520 + 3) & 1) != 0)
            {
              v1430 = *(_QWORD *)(v520 + 8);
              if (v1430)
              {
                if (**(_WORD **)(v1430 + 16) == 164 && *(_DWORD *)(v1430 + 40) == 3)
                {
                  v1431 = *(_QWORD *)(v1430 + 32);
                  v1432 = *(unsigned int *)(v1431 + 36);
                  v1433 = *(_QWORD *)(v167 + 24);
                  v1434 = *(_QWORD *)(v167 + 272);
                  if ((int)v1432 >= 0)
                    v1435 = (uint64_t *)(v1434 + 8 * v1432);
                  else
                    v1435 = (uint64_t *)(v1433 + 16 * (v1432 & 0x7FFFFFFF) + 8);
                  v1436 = *v1435;
                  if ((*(_BYTE *)(v1436 + 3) & 1) == 0)
                    v1436 = *(_QWORD *)(v1436 + 24);
                  v1437 = *(_QWORD *)(v1436 + 8);
                  if (**(_WORD **)(v1437 + 16) == 121)
                  {
                    v1438 = *(_QWORD *)(*(_QWORD *)(v1437 + 32) + 48);
                    if (v1438)
                    {
                      v1439 = *(unsigned int *)(v1431 + 68);
                      v1440 = v1433 + 16 * (v1439 & 0x7FFFFFFF) + 8;
                      v1441 = (uint64_t *)(v1434 + 8 * v1439);
                      if ((int)v1439 >= 0)
                        v1442 = v1441;
                      else
                        v1442 = (uint64_t *)v1440;
                      v1443 = *v1442;
                      if ((*(_BYTE *)(v1443 + 3) & 1) == 0)
                        v1443 = *(_QWORD *)(v1443 + 24);
                      v1444 = *(_QWORD *)(v1443 + 8);
                      if (**(_WORD **)(v1444 + 16) == 121)
                      {
                        v1997 = *(_QWORD *)(*(_QWORD *)(v1444 + 32) + 48);
                        if (v1997)
                        {
                          v1445 = *(_QWORD *)(v1438 + 32);
                          if ((_UNKNOWN *)v1445 == &unk_1C866F1C0)
                          {
                            llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v2032, (const llvm::detail::DoubleAPFloat *)(v1438 + 32));
                          }
                          else
                          {
                            *(_QWORD *)&v2032 = *(_QWORD *)(v1438 + 32);
                            if ((*(_DWORD *)(v1445 + 8) + 64) >= 0x80)
                              *((_QWORD *)&v2032 + 1) = operator new[]();
                            v1446 = *(_BYTE *)(v1438 + 52);
                            v1447 = v1446 & 7;
                            v2034 = v2034 & 0xF0 | v1446 & 0xF;
                            v2033 = *(_DWORD *)(v1438 + 48);
                            v1449 = (v1446 & 6) != 0 && v1447 != 3;
                            if (v1447 == 1 || v1449)
                            {
                              v1451 = *(unsigned int *)(v2032 + 8);
                              if ((v1451 - 64) <= 0xFFFFFF7F)
                                v1452 = (_QWORD *)*((_QWORD *)&v2032 + 1);
                              else
                                v1452 = (_QWORD *)&v2032 + 1;
                              v1874 = *(uint64_t **)(v1438 + 40);
                              v1873 = (uint64_t *)(v1438 + 40);
                              v1872 = v1874;
                              if ((*(_DWORD *)(*(v1873 - 1) + 8) - 64) >= 0xFFFFFF80)
                                v1872 = v1873;
                              if (v1451 <= 0xFFFFFFBF)
                              {
                                v1875 = (unint64_t)(v1451 + 64) >> 6;
                                do
                                {
                                  v1876 = *v1872++;
                                  *v1452++ = v1876;
                                  --v1875;
                                }
                                while (v1875);
                              }
                            }
                          }
                          sub_1C499C600((uint64_t)&v2046, v450, (uint64_t)&v2031);
                          if ((_UNKNOWN *)v2032 == &unk_1C866F1C0)
                          {
                            sub_1C4773C74((uint64_t *)&v2032 + 1);
                          }
                          else if ((*(_DWORD *)(v2032 + 8) - 64) <= 0xFFFFFF7F && *((_QWORD *)&v2032 + 1))
                          {
                            MEMORY[0x1CAA32F9C](*((_QWORD *)&v2032 + 1), 0x1000C8000313F17);
                          }
                          v1877 = *(_QWORD *)(v1997 + 32);
                          if ((_UNKNOWN *)v1877 == &unk_1C866F1C0)
                          {
                            llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v2023 + 8), (const llvm::detail::DoubleAPFloat *)(v1997 + 32));
                          }
                          else
                          {
                            *((_QWORD *)&v2023 + 1) = *(_QWORD *)(v1997 + 32);
                            if ((*(_DWORD *)(v1877 + 8) + 64) >= 0x80)
                              v2024 = (uint64_t *)operator new[]();
                            v1878 = *(_BYTE *)(v1997 + 52);
                            v1879 = v1878 & 7;
                            v2026 = v2026 & 0xF0 | v1878 & 0xF;
                            v2025 = *(_DWORD *)(v1997 + 48);
                            v1881 = (v1878 & 6) != 0 && v1879 != 3;
                            if (v1879 == 1 || v1881)
                            {
                              v1882 = *(unsigned int *)(*((_QWORD *)&v2023 + 1) + 8);
                              if ((v1882 - 64) <= 0xFFFFFF7F)
                                v1883 = v2024;
                              else
                                v1883 = (uint64_t *)&v2024;
                              v1884 = *(uint64_t **)(v1997 + 40);
                              if ((*(_DWORD *)(*(_QWORD *)(v1997 + 32) + 8) - 64) >= 0xFFFFFF80)
                                v1884 = (uint64_t *)(v1997 + 40);
                              if (v1882 <= 0xFFFFFFBF)
                              {
                                v1885 = (unint64_t)(v1882 + 64) >> 6;
                                do
                                {
                                  v1886 = *v1884++;
                                  *v1883++ = v1886;
                                  --v1885;
                                }
                                while (v1885);
                              }
                            }
                          }
                          sub_1C499C600((uint64_t)&v2027, v450, (uint64_t)&v2023);
                          if (*((_UNKNOWN **)&v2023 + 1) == &unk_1C866F1C0)
                          {
                            sub_1C4773C74((uint64_t *)&v2024);
                          }
                          else if ((*(_DWORD *)(*((_QWORD *)&v2023 + 1) + 8) - 64) <= 0xFFFFFF7F
                                 && v2024)
                          {
                            MEMORY[0x1CAA32F9C](v2024, 0x1000C8000313F17);
                          }
                          v1839 = v2047;
                          if ((_UNKNOWN *)v2047 == &unk_1C866F1C0)
                          {
                            llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v2019, (const llvm::detail::DoubleAPFloat *)&v2047);
                          }
                          else
                          {
                            v2019 = v2047;
                            if ((*(_DWORD *)(v2047 + 8) + 64) >= 0x80)
                              v2020 = (uint64_t *)operator new[]();
                            v1887 = BYTE4(v2048) & 7;
                            v2022 = v2022 & 0xF0 | BYTE4(v2048) & 0xF;
                            v2021 = v2048;
                            v1889 = (v2048 & 0x600000000) != 0 && v1887 != 3;
                            if (v1887 != 1 && !v1889)
                              goto LABEL_3553;
                            v1890 = *(unsigned int *)(v2019 + 8);
                            if ((v1890 - 64) <= 0xFFFFFF7F)
                            {
                              v1892 = (uint64_t **)v2020;
                              if ((*(_DWORD *)(v1839 + 8) - 64) >= 0xFFFFFF80)
                                v1891 = (uint64_t **)&v2047 + 1;
                              else
                                v1891 = (uint64_t **)*((_QWORD *)&v2047 + 1);
                            }
                            else
                            {
                              v1891 = (uint64_t **)&v2047 + 1;
                              if ((*(_DWORD *)(v1839 + 8) - 64) < 0xFFFFFF80)
                                v1891 = (uint64_t **)*((_QWORD *)&v2047 + 1);
                              if (v1890 > 0xFFFFFFBF)
                                goto LABEL_3553;
                              v1892 = &v2020;
                            }
                            v1893 = (unint64_t)(v1890 + 64) >> 6;
                            do
                            {
                              v1894 = *v1891++;
                              *v1892++ = v1894;
                              --v1893;
                            }
                            while (v1893);
                          }
LABEL_3553:
                          sub_1C48DB604((uint64_t)&v2018, (uint64_t)&v2027, 1);
                          v1895 = *(_QWORD *)v3;
                          LODWORD(v2013) = v445;
                          LODWORD(v2014) = 1;
                          v1897 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v166, (llvm::LLVMContext *)&v2018, v1896);
                          (*(void (**)(uint64_t, unsigned __int16 **, llvm::APFloatBase *))(*(_QWORD *)v1895 + 24))(v1895, &v2013, v1897);
                          v1851 = *(_QWORD *)(a2 + 24);
                          v1852 = a2;
                          if ((*(_BYTE *)a2 & 4) == 0)
                          {
                            v1852 = a2;
                            if ((*(_WORD *)(a2 + 44) & 8) != 0)
                            {
                              v1852 = a2;
                              do
                                v1852 = *(_QWORD *)(v1852 + 8);
                              while ((*(_WORD *)(v1852 + 44) & 8) != 0);
                            }
                          }
LABEL_3406:
                          sub_1C487FE80(v1851 + 40, a2, *(_QWORD *)(v1852 + 8));
                          if ((_UNKNOWN *)v2019 == &unk_1C866F1C0)
                          {
                            sub_1C4773C74((uint64_t *)&v2020);
                          }
                          else if ((*(_DWORD *)(v2019 + 8) - 64) <= 0xFFFFFF7F && v2020)
                          {
                            MEMORY[0x1CAA32F9C](v2020, 0x1000C8000313F17);
                          }
                          if (*((_UNKNOWN **)&v2027 + 1) == &unk_1C866F1C0)
                          {
                            sub_1C4773C74((uint64_t *)&v2028);
                          }
                          else if ((*(_DWORD *)(*((_QWORD *)&v2027 + 1) + 8) - 64) <= 0xFFFFFF7F
                                 && v2028)
                          {
                            MEMORY[0x1CAA32F9C](v2028, 0x1000C8000313F17);
                          }
                          if ((_UNKNOWN *)v1839 != &unk_1C866F1C0)
                          {
                            if ((*(_DWORD *)(v1839 + 8) - 64) > 0xFFFFFF7F)
                              goto LABEL_1220;
                            v653 = (uint64_t *)*((_QWORD *)&v2047 + 1);
                            if (!*((_QWORD *)&v2047 + 1))
                              goto LABEL_1220;
                            goto LABEL_822;
                          }
                          v1560 = &v2046;
LABEL_2719:
                          sub_1C4773C74((uint64_t *)v1560 + 2);
                          goto LABEL_1220;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if ((v445 & 0x80000000) != 0)
            v521 = (uint64_t *)(*(_QWORD *)(v167 + 24) + 16 * (v445 & 0x7FFFFFFF) + 8);
          else
            v521 = (uint64_t *)(*(_QWORD *)(v167 + 272) + 8 * v445);
          v522 = *v521;
          if (v522)
          {
            if ((*(_BYTE *)(v522 + 3) & 1) != 0
              || (v522 = *(_QWORD *)(v522 + 24)) != 0 && (*(_BYTE *)(v522 + 3) & 1) != 0)
            {
              v1453 = *(_QWORD *)(v522 + 8);
              if (v1453)
              {
                if (**(_WORD **)(v1453 + 16) == 164 && *(_DWORD *)(v1453 + 40) == 3)
                {
                  v1454 = *(_QWORD *)(v1453 + 32);
                  v1455 = *(_DWORD *)(v1454 + 36);
                  LODWORD(v2008) = v1455;
                  v1456 = *(unsigned int *)(v1454 + 68);
                  if ((int)v1456 >= 0)
                    v1457 = (uint64_t *)(*(_QWORD *)(v167 + 272) + 8 * v1456);
                  else
                    v1457 = (uint64_t *)(*(_QWORD *)(v167 + 24) + 16 * (v1456 & 0x7FFFFFFF) + 8);
                  v1458 = *v1457;
                  if ((*(_BYTE *)(v1458 + 3) & 1) == 0)
                    v1458 = *(_QWORD *)(v1458 + 24);
                  v1459 = *(_QWORD *)(v1458 + 8);
                  if (**(_WORD **)(v1459 + 16) == 121)
                  {
                    v1460 = *(_QWORD *)(*(_QWORD *)(v1459 + 32) + 48);
                    if (v1460)
                    {
                      v1461 = *(_UNKNOWN **)(v1460 + 32) == &unk_1C866F1C0
                            ? *(_BYTE *)(*(_QWORD *)(v1460 + 40) + 28)
                            : *(_BYTE *)(v1460 + 52);
                      if ((v1461 & 7) == 3
                        && ((v1461 & 8) == 0 || (BYTE4(__s1[1]) & 1) != 0 || (*(_WORD *)(a2 + 44) & 0x40) != 0))
                      {
                        v1688 = *(_QWORD **)(v3 + 16);
                        goto LABEL_3141;
                      }
                    }
                  }
                }
              }
            }
          }
          v2046 = (unint64_t)&v2008;
          *(_QWORD *)&v2047 = &v2003;
          LODWORD(v2027) = v445;
          if (sub_1C49BBDDC((uint64_t)&v2046, v167, (unsigned int *)&v2027)
            && (_DWORD)v2008 == v2003
            && ((BYTE4(__s1[1]) & 1) != 0 || (*(_WORD *)(a2 + 44) & 0x10) != 0))
          {
            v599 = *(_QWORD *)v3;
            LODWORD(v2046) = v445;
            LODWORD(v2047) = 1;
            sub_1C5545FFC(v599, &v2046, 0.0);
            v600 = *(_QWORD *)(a2 + 24);
            v601 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v601 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v601 = a2;
                do
                  v601 = *(_QWORD *)(v601 + 8);
                while ((*(_WORD *)(v601 + 44) & 8) != 0);
              }
            }
            goto LABEL_1219;
          }
          if ((v445 & 0x80000000) != 0)
            v523 = (uint64_t *)(*(_QWORD *)(v167 + 24) + 16 * (v445 & 0x7FFFFFFF) + 8);
          else
            v523 = (uint64_t *)(*(_QWORD *)(v167 + 272) + 8 * v445);
          v524 = *v523;
          if (v524)
          {
            if ((*(_BYTE *)(v524 + 3) & 1) != 0
              || (v524 = *(_QWORD *)(v524 + 24)) != 0 && (*(_BYTE *)(v524 + 3) & 1) != 0)
            {
              v1561 = *(_QWORD *)(v524 + 8);
              if (v1561)
              {
                if (**(_WORD **)(v1561 + 16) == 164 && *(_DWORD *)(v1561 + 40) == 3)
                {
                  v1562 = *(_QWORD *)(v1561 + 32);
                  v1563 = *(unsigned int *)(v1562 + 36);
                  if ((int)v1563 >= 0)
                    v1564 = (uint64_t *)(*(_QWORD *)(v167 + 272) + 8 * v1563);
                  else
                    v1564 = (uint64_t *)(*(_QWORD *)(v167 + 24) + 16 * (v1563 & 0x7FFFFFFF) + 8);
                  v1565 = *v1564;
                  if ((*(_BYTE *)(v1565 + 3) & 1) == 0)
                    v1565 = *(_QWORD *)(v1565 + 24);
                  v1566 = *(_QWORD *)(v1565 + 8);
                  if (**(_WORD **)(v1566 + 16) == 121)
                  {
                    v1567 = *(_QWORD *)(*(_QWORD *)(v1566 + 32) + 48);
                    if (v1567)
                    {
                      v1568 = *(_DWORD *)(v1562 + 68);
                      LODWORD(v2008) = v1568;
                      v1569 = *(_UNKNOWN **)(v1567 + 32) == &unk_1C866F1C0 ? *(_QWORD *)(v1567 + 40) : v1567 + 24;
                      if ((*(_BYTE *)(v1569 + 28) & 7) == 3
                        && ((BYTE4(__s1[1]) & 0x10) != 0 || (*(_WORD *)(a2 + 44) & 0x40) != 0))
                      {
                        v1745 = *(_QWORD *)v3;
                        *(_QWORD *)(v1745 + 40) = *(_QWORD *)(a2 + 24);
                        *(_QWORD *)(v1745 + 48) = a2;
                        v1746 = *(_QWORD *)v3;
                        LODWORD(v2027) = v445;
                        DWORD2(v2027) = 1;
                        LODWORD(v2046) = v1568;
                        DWORD2(v2047) = 0;
                        (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v1746 + 32))(v1746, 177, &v2027, 1, &v2046, 1, v446 | 0x100000000);
                        v600 = *(_QWORD *)(a2 + 24);
                        v601 = a2;
                        if ((*(_BYTE *)a2 & 4) == 0)
                        {
                          v601 = a2;
                          if ((*(_WORD *)(a2 + 44) & 8) != 0)
                          {
                            v601 = a2;
                            do
                              v601 = *(_QWORD *)(v601 + 8);
                            while ((*(_WORD *)(v601 + 44) & 8) != 0);
                          }
                        }
                        goto LABEL_1219;
                      }
                    }
                  }
                }
              }
            }
          }
          if ((BYTE4(__s1[1]) & 1) != 0 || (~*(unsigned __int16 *)(a2 + 44) & 0x440) == 0)
          {
            if ((v445 & 0x80000000) != 0)
              v525 = (uint64_t *)(*(_QWORD *)(v167 + 24) + 16 * (v445 & 0x7FFFFFFF) + 8);
            else
              v525 = (uint64_t *)(*(_QWORD *)(v167 + 272) + 8 * v445);
            v526 = *v525;
            if (v526)
            {
              if ((*(_BYTE *)(v526 + 3) & 1) != 0
                || (v526 = *(_QWORD *)(v526 + 24)) != 0 && (*(_BYTE *)(v526 + 3) & 1) != 0)
              {
                v1578 = *(_QWORD *)(v526 + 8);
                if (v1578 && **(_WORD **)(v1578 + 16) == 164 && *(_DWORD *)(v1578 + 40) == 3)
                {
                  v1579 = *(_QWORD *)(v1578 + 32);
                  v1580 = *(unsigned int *)(v1579 + 68);
                  v1581 = (uint64_t *)((v1580 & 0x80000000) != 0
                                    ? *(_QWORD *)(v167 + 24) + 16 * (v1580 & 0x7FFFFFFF) + 8
                                    : *(_QWORD *)(v167 + 272) + 8 * v1580);
                  v1626 = *v1581;
                  if (*v1581)
                  {
                    v1627 = *(_DWORD *)(v1579 + 36);
                    if ((*(_BYTE *)(v1626 + 3) & 1) != 0
                      || (v1626 = *(_QWORD *)(v1626 + 24)) != 0 && (*(_BYTE *)(v1626 + 3) & 1) != 0)
                    {
                      v1898 = *(_QWORD *)(v1626 + 8);
                      if (v1898 && **(_WORD **)(v1898 + 16) == 163 && *(_DWORD *)(v1898 + 40) == 3)
                      {
                        v1899 = *(_QWORD *)(v1898 + 32);
                        v1900 = *(_DWORD *)(v1899 + 36);
                        v1901 = *(_DWORD *)(v1899 + 68);
                        if (v1627 == v1900 && v1627 != v1901)
                        {
                          v1903 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 68);
                          if ((v1903 & 0x80000000) != 0)
                            v1904 = (uint64_t *)(*(_QWORD *)(v167 + 24) + 16 * (v1903 & 0x7FFFFFFF) + 8);
                          else
                            v1904 = (uint64_t *)(*(_QWORD *)(v167 + 272) + 8 * v1903);
                          v1930 = *v1904;
                          if ((*(_BYTE *)(v1930 + 3) & 1) == 0)
                            v1930 = *(_QWORD *)(v1930 + 24);
                          if (**(_WORD **)(*(_QWORD *)(v1930 + 8) + 16) == 163)
                          {
                            v1931 = *(_QWORD *)v3;
                            LODWORD(v2027) = v445;
                            DWORD2(v2027) = 1;
                            LODWORD(v2046) = v1901;
                            DWORD2(v2047) = 0;
                            (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v1931 + 32))(v1931, 177, &v2027, 1, &v2046, 1, v446 | 0x100000000);
                            v600 = *(_QWORD *)(a2 + 24);
                            v601 = a2;
                            if ((*(_BYTE *)a2 & 4) == 0)
                            {
                              v601 = a2;
                              if ((*(_WORD *)(a2 + 44) & 8) != 0)
                              {
                                v601 = a2;
                                do
                                  v601 = *(_QWORD *)(v601 + 8);
                                while ((*(_WORD *)(v601 + 44) & 8) != 0);
                              }
                            }
                            goto LABEL_1219;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if ((v445 & 0x80000000) != 0)
              v527 = (uint64_t *)(*(_QWORD *)(v167 + 24) + 16 * (v445 & 0x7FFFFFFF) + 8);
            else
              v527 = (uint64_t *)(*(_QWORD *)(v167 + 272) + 8 * v445);
            v528 = *v527;
            if (v528)
            {
              if ((*(_BYTE *)(v528 + 3) & 1) != 0
                || (v528 = *(_QWORD *)(v528 + 24)) != 0 && (*(_BYTE *)(v528 + 3) & 1) != 0)
              {
                v1582 = *(_QWORD *)(v528 + 8);
                if (v1582 && **(_WORD **)(v1582 + 16) == 164 && *(_DWORD *)(v1582 + 40) == 3)
                {
                  v1583 = *(_QWORD *)(v1582 + 32);
                  v1584 = *(unsigned int *)(v1583 + 68);
                  v1585 = (uint64_t *)((v1584 & 0x80000000) != 0
                                    ? *(_QWORD *)(v167 + 24) + 16 * (v1584 & 0x7FFFFFFF) + 8
                                    : *(_QWORD *)(v167 + 272) + 8 * v1584);
                  v1628 = *v1585;
                  if (*v1585)
                  {
                    v1629 = *(_DWORD *)(v1583 + 36);
                    if ((*(_BYTE *)(v1628 + 3) & 1) != 0
                      || (v1628 = *(_QWORD *)(v1628 + 24)) != 0 && (*(_BYTE *)(v1628 + 3) & 1) != 0)
                    {
                      v1905 = *(_QWORD *)(v1628 + 8);
                      if (v1905 && **(_WORD **)(v1905 + 16) == 163 && *(_DWORD *)(v1905 + 40) == 3)
                      {
                        v1906 = *(_QWORD *)(v1905 + 32);
                        v1907 = *(_DWORD *)(v1906 + 36);
                        v1908 = *(_DWORD *)(v1906 + 68);
                        if (v1629 != v1907 && v1629 == v1908)
                        {
                          v1910 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 68);
                          if ((v1910 & 0x80000000) != 0)
                            v1911 = (uint64_t *)(*(_QWORD *)(v167 + 24) + 16 * (v1910 & 0x7FFFFFFF) + 8);
                          else
                            v1911 = (uint64_t *)(*(_QWORD *)(v167 + 272) + 8 * v1910);
                          v1932 = *v1911;
                          if ((*(_BYTE *)(v1932 + 3) & 1) == 0)
                            v1932 = *(_QWORD *)(v1932 + 24);
                          if (**(_WORD **)(*(_QWORD *)(v1932 + 8) + 16) == 163)
                          {
                            v1933 = *(_QWORD *)v3;
                            LODWORD(v2027) = v445;
                            DWORD2(v2027) = 1;
                            LODWORD(v2046) = v1907;
                            DWORD2(v2047) = 0;
                            (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v1933 + 32))(v1933, 177, &v2027, 1, &v2046, 1, v446 | 0x100000000);
                            v600 = *(_QWORD *)(a2 + 24);
                            v601 = a2;
                            if ((*(_BYTE *)a2 & 4) == 0)
                            {
                              v601 = a2;
                              if ((*(_WORD *)(a2 + 44) & 8) != 0)
                              {
                                v601 = a2;
                                do
                                  v601 = *(_QWORD *)(v601 + 8);
                                while ((*(_WORD *)(v601 + 44) & 8) != 0);
                              }
                            }
                            goto LABEL_1219;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v529 = (BYTE4(__s1[1]) & 1) != 0 || *(_DWORD *)&v2042[8] == 0;
          v530 = !v529;
          if (!v529 && (v446 & 0x100) == 0)
            goto LABEL_1042;
          v531 = *(_QWORD *)(a2 + 32);
          v532 = *(unsigned int *)(v531 + 36);
          LODWORD(v2008) = v532;
          v533 = *(unsigned int *)(v531 + 68);
          v2003 = *(_DWORD *)(v531 + 68);
          if ((v532 & 0x80000000) != 0)
            v534 = (uint64_t *)(*(_QWORD *)(v167 + 24) + 16 * (v532 & 0x7FFFFFFF) + 8);
          else
            v534 = (uint64_t *)(*(_QWORD *)(v167 + 272) + 8 * v532);
          v751 = *v534;
          if (*v534)
          {
            while ((*(_BYTE *)(v751 + 3) & 1) != 0)
            {
              v751 = *(_QWORD *)(v751 + 24);
              if (!v751)
                goto LABEL_1015;
            }
            do
            {
              v751 = *(_QWORD *)(v751 + 24);
              v752 = v751 == 0;
            }
            while (v751 && (*(_BYTE *)(v751 + 3) & 1) != 0);
          }
          else
          {
LABEL_1015:
            v752 = 0;
          }
          if ((v533 & 0x80000000) != 0)
            v753 = (uint64_t *)(*(_QWORD *)(v167 + 24) + 16 * (v533 & 0x7FFFFFFF) + 8);
          else
            v753 = (uint64_t *)(*(_QWORD *)(v167 + 272) + 8 * v533);
          v754 = *v753;
          if (v754)
          {
            while ((*(_BYTE *)(v754 + 3) & 1) != 0)
            {
              v754 = *(_QWORD *)(v754 + 24);
              if (!v754)
                goto LABEL_1024;
            }
            do
            {
              v754 = *(_QWORD *)(v754 + 24);
              v755 = v754 == 0;
            }
            while (v754 && (*(_BYTE *)(v754 + 3) & 1) != 0);
          }
          else
          {
LABEL_1024:
            v755 = 0;
          }
          v2002[0] = 0;
          LODWORD(v2000) = 0;
          if ((v445 & 0x80000000) != 0
            && (v445 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v167 + 432))
          {
            v756 = *(_QWORD *)(*(_QWORD *)(v167 + 424) + 8 * (v445 & 0x7FFFFFFF));
          }
          else
          {
            v756 = 0;
          }
          v757 = *(_QWORD *)v3;
          *(_QWORD *)(v757 + 40) = *v448;
          *(_QWORD *)(v757 + 48) = a2;
          if (v752
            && (v2046 = (unint64_t)v2002,
                *(_QWORD *)&v2047 = &v2000,
                LODWORD(v2027) = v532,
                sub_1C49BBE6C((uint64_t)&v2046, v167, (unsigned int *)&v2027)))
          {
            v758 = *(_QWORD *)v3;
            LODWORD(v2018) = v445;
            LODWORD(v2019) = 1;
            LODWORD(v2046) = v2002[0];
            DWORD2(v2047) = 0;
            LODWORD(v2048) = v2000;
            v2050 = 0;
            v2013 = (unsigned __int16 *)v756;
            LODWORD(v2014) = 0;
            LODWORD(v2027) = v2003;
            LODWORD(v2028) = 0;
            v2051 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int16 **, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v758 + 32))(v758, 177, &v2013, 1, &v2027, 1, v446 | 0x100000000);
            v2052 = v759;
            v2053 = 1;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v758 + 32))(v758, 166, &v2018, 1, &v2046, 3, v446 | 0x100000000);
            v600 = *(_QWORD *)(a2 + 24);
            if ((*(_BYTE *)a2 & 4) == 0 && (*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v601 = a2;
              do
                v601 = *(_QWORD *)(v601 + 8);
              while ((*(_WORD *)(v601 + 44) & 8) != 0);
              goto LABEL_1219;
            }
          }
          else
          {
            if (!v755
              || (v2046 = (unint64_t)v2002,
                  *(_QWORD *)&v2047 = &v2000,
                  LODWORD(v2027) = v2003,
                  !sub_1C49BBE6C((uint64_t)&v2046, v167, (unsigned int *)&v2027))
              || v530 && (*(_WORD *)(a2 + 44) & 0x400) == 0)
            {
LABEL_1042:
              sub_1C48433E8((uint64_t)__s1);
              return sub_1C6037A10((uint64_t *)v3, a2);
            }
            v839 = *(_QWORD *)v3;
            LODWORD(v2018) = v445;
            LODWORD(v2019) = 1;
            v2013 = (unsigned __int16 *)v756;
            LODWORD(v2014) = 0;
            LODWORD(v2027) = v2000;
            LODWORD(v2028) = 0;
            v2046 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int16 **, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v839 + 32))(v839, 177, &v2013, 1, &v2027, 1, v446 | 0x100000000);
            *(_QWORD *)&v2047 = v840;
            DWORD2(v2047) = 1;
            LODWORD(v2048) = v2002[0];
            v2050 = 0;
            LODWORD(v2051) = v2008;
            v2053 = 0;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v839 + 32))(v839, 166, &v2018, 1, &v2046, 3, v446 | 0x100000000);
            v600 = *(_QWORD *)(a2 + 24);
            if ((*(_BYTE *)a2 & 4) == 0 && (*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v601 = a2;
              do
                v601 = *(_QWORD *)(v601 + 8);
              while ((*(_WORD *)(v601 + 44) & 8) != 0);
              goto LABEL_1219;
            }
          }
          v601 = a2;
LABEL_1219:
          sub_1C487FE80(v600 + 40, a2, *(_QWORD *)(v601 + 8));
          goto LABEL_1220;
        case 165:
          v174 = *(_QWORD *)(*(_QWORD *)v3 + 8);
          v167 = *(_QWORD *)(v174 + 40);
          v175 = *(_QWORD *)(v174 + 8);
          v176 = *(_OWORD *)(v175 + 1024);
          *(_OWORD *)__s1 = *(_OWORD *)(v175 + 1008);
          v2036 = v176;
          v177 = *(_QWORD *)(v175 + 1048);
          v2037 = *(_QWORD *)(v175 + 1040);
          v2038 = v177;
          v178 = *(_QWORD *)(v175 + 1056);
          v2039 = v178;
          if (v178)
          {
            v179 = (unint64_t *)(v178 + 8);
            do
              v180 = __ldxr(v179);
            while (__stxr(v180 + 1, v179));
          }
          LOWORD(v2040) = *(_WORD *)(v175 + 1064);
          if (*(char *)(v175 + 1095) < 0)
          {
            sub_1C47EBC30(v2041, *(void **)(v175 + 1072), *(_QWORD *)(v175 + 1080));
          }
          else
          {
            *(_OWORD *)v2041 = *(_OWORD *)(v175 + 1072);
            *(_QWORD *)&v2041[16] = *(_QWORD *)(v175 + 1088);
          }
          *(_OWORD *)v2042 = *(_OWORD *)(v175 + 1096);
          *(_OWORD *)&v2042[16] = *(_OWORD *)(v175 + 1112);
          sub_1C4843224((uint64_t)v2043, (uint64_t *)(v175 + 1128));
          if (*(char *)(v175 + 1311) < 0)
          {
            sub_1C47EBC30(&v2044, *(void **)(v175 + 1288), *(_QWORD *)(v175 + 1296));
          }
          else
          {
            v2044 = *(_OWORD *)(v175 + 1288);
            v2045 = *(_QWORD *)(v175 + 1304);
          }
          v453 = (uint64_t *)v3;
          v454 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 4);
          v2000 = 0;
          v2001 = 0;
          v1999 = 0;
          if ((v454 & 0x80000000) == 0)
          {
            v455 = 0;
            v456 = *(_QWORD *)v3;
            *(_QWORD *)(v456 + 40) = *(_QWORD *)(a2 + 24);
            *(_QWORD *)(v456 + 48) = a2;
            v457 = (uint64_t *)(*(_QWORD *)(v167 + 272) + 8 * v454);
            v458 = &unk_1C866F184;
            goto LABEL_740;
          }
          if ((v454 & 0x7FFFFFFF) >= *(_DWORD *)(v167 + 432))
          {
            v455 = 0;
          }
          else
          {
            v455 = *(_DWORD **)(*(_QWORD *)(v167 + 424) + 8 * (v454 & 0x7FFFFFFF));
            if (v455 == (_DWORD *)129)
            {
              v459 = *(_QWORD *)v3;
              *(_QWORD *)(v459 + 40) = *(_QWORD *)(a2 + 24);
              *(_QWORD *)(v459 + 48) = a2;
              v458 = &unk_1C866F15C;
              goto LABEL_739;
            }
          }
          v602 = *(_QWORD *)v3;
          *(_QWORD *)(v602 + 40) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(v602 + 48) = a2;
          v458 = &unk_1C866F184;
LABEL_739:
          v457 = (uint64_t *)(*(_QWORD *)(v167 + 24) + 16 * (v454 & 0x7FFFFFFF) + 8);
LABEL_740:
          v603 = *v457;
          if (!v603)
            goto LABEL_741;
          if ((*(_BYTE *)(v603 + 3) & 1) == 0)
          {
            v603 = *(_QWORD *)(v603 + 24);
            if (!v603 || (*(_BYTE *)(v603 + 3) & 1) == 0)
              goto LABEL_741;
          }
          v1462 = *(_QWORD *)(v603 + 8);
          if (!v1462 || **(_WORD **)(v1462 + 16) != 165 || *(_DWORD *)(v1462 + 40) != 3)
            goto LABEL_741;
          v1463 = *(_QWORD *)(v1462 + 32);
          v1464 = *(unsigned int *)(v1463 + 36);
          v1465 = *(_QWORD *)(v167 + 24);
          v1466 = *(_QWORD *)(v167 + 272);
          if ((int)v1464 >= 0)
            v1467 = v1466 + 8 * v1464;
          else
            v1467 = v1465 + 16 * (v1464 & 0x7FFFFFFF) + 8;
          v1468 = *(_QWORD *)v1467;
          if ((*(_BYTE *)(*(_QWORD *)v1467 + 3) & 1) == 0)
            v1468 = *(_QWORD *)(v1468 + 24);
          v1469 = *(_QWORD *)(v1468 + 8);
          if (**(_WORD **)(v1469 + 16) == 121)
          {
            v1681 = *(_QWORD *)(*(_QWORD *)(v1469 + 32) + 48);
            v2000 = v1681;
            if (v1681)
            {
              v1682 = *(unsigned int *)(v1463 + 68);
              if ((int)v1682 >= 0)
                v1683 = (uint64_t *)(v1466 + 8 * v1682);
              else
                v1683 = (uint64_t *)(v1465 + 16 * (v1682 & 0x7FFFFFFF) + 8);
              v1684 = *v1683;
              if ((*(_BYTE *)(v1684 + 3) & 1) == 0)
                v1684 = *(_QWORD *)(v1684 + 24);
              v1685 = *(_QWORD *)(v1684 + 8);
              if (**(_WORD **)(v1685 + 16) == 121)
              {
                v1999 = *(_QWORD *)(*(_QWORD *)(v1685 + 32) + 48);
                if (v1999)
                  goto LABEL_3342;
              }
              else
              {
                v1999 = 0;
              }
            }
          }
          else
          {
            v2000 = 0;
          }
          v1470 = *(_QWORD *)v1467;
          if ((*(_BYTE *)(v1470 + 3) & 1) == 0)
            v1470 = *(_QWORD *)(v1470 + 24);
          v1471 = *(_QWORD *)(v1470 + 8);
          if (**(_WORD **)(v1471 + 16) != 121)
          {
            v1999 = 0;
LABEL_2568:
            v453 = (uint64_t *)v3;
            goto LABEL_741;
          }
          v1999 = *(_QWORD *)(*(_QWORD *)(v1471 + 32) + 48);
          v453 = (uint64_t *)v3;
          if (!v1999)
            goto LABEL_741;
          v1691 = *(unsigned int *)(v1463 + 68);
          v1692 = v1465 + 16 * (v1691 & 0x7FFFFFFF) + 8;
          v1693 = (uint64_t *)(v1466 + 8 * v1691);
          if ((int)v1691 >= 0)
            v1694 = v1693;
          else
            v1694 = (uint64_t *)v1692;
          v1695 = *v1694;
          if ((*(_BYTE *)(v1695 + 3) & 1) == 0)
            v1695 = *(_QWORD *)(v1695 + 24);
          v1696 = *(_QWORD *)(v1695 + 8);
          if (**(_WORD **)(v1696 + 16) != 121)
          {
            v2000 = 0;
            goto LABEL_2568;
          }
          v1681 = *(_QWORD *)(*(_QWORD *)(v1696 + 32) + 48);
          v2000 = v1681;
          v453 = (uint64_t *)v3;
          if (!v1681)
          {
LABEL_741:
            if ((v454 & 0x80000000) != 0)
              v604 = (uint64_t *)(*(_QWORD *)(v167 + 24) + 16 * (v454 & 0x7FFFFFFF) + 8);
            else
              v604 = (uint64_t *)(*(_QWORD *)(v167 + 272) + 8 * v454);
            v605 = *v604;
            if (!v605)
              goto LABEL_745;
            v1410 = v453;
            if ((*(_BYTE *)(v605 + 3) & 1) == 0)
            {
              v605 = *(_QWORD *)(v605 + 24);
              if (!v605 || (*(_BYTE *)(v605 + 3) & 1) == 0)
                goto LABEL_745;
            }
            v1472 = *(_QWORD *)(v605 + 8);
            if (!v1472 || **(_WORD **)(v1472 + 16) != 165 || *(_DWORD *)(v1472 + 40) != 3)
              goto LABEL_745;
            v1473 = *(_QWORD *)(v1472 + 32);
            v1474 = *(unsigned int *)(v1473 + 36);
            HIDWORD(v2001) = *(_DWORD *)(v1473 + 36);
            v1475 = *(unsigned int *)(v1473 + 68);
            v1476 = *(_QWORD *)(v167 + 24);
            v1477 = (uint64_t *)(v1476 + 16 * (v1475 & 0x7FFFFFFF) + 8);
            v1478 = *(_QWORD *)(v167 + 272);
            if ((int)v1475 >= 0)
              v1477 = (uint64_t *)(v1478 + 8 * v1475);
            v1479 = *v1477;
            if ((*(_BYTE *)(v1479 + 3) & 1) == 0)
              v1479 = *(_QWORD *)(v1479 + 24);
            v1480 = *(_QWORD *)(v1479 + 8);
            if (**(_WORD **)(v1480 + 16) == 121)
            {
              v1686 = *(_QWORD *)(*(_QWORD *)(v1480 + 32) + 48);
              v2000 = v1686;
              if (v1686)
                goto LABEL_3003;
            }
            else
            {
              v2000 = 0;
            }
            v1481 = v1476 + 16 * (v1474 & 0x7FFFFFFF) + 8;
            v1482 = (uint64_t *)(v1478 + 8 * v1474);
            if ((int)v1474 >= 0)
              v1483 = v1482;
            else
              v1483 = (uint64_t *)v1481;
            v1484 = *v1483;
            if ((*(_BYTE *)(v1484 + 3) & 1) == 0)
              v1484 = *(_QWORD *)(v1484 + 24);
            v1485 = *(_QWORD *)(v1484 + 8);
            if (**(_WORD **)(v1485 + 16) != 121)
            {
              v2000 = 0;
              goto LABEL_745;
            }
            v1686 = *(_QWORD *)(*(_QWORD *)(v1485 + 32) + 48);
            v2000 = v1686;
            if (!v1686)
            {
LABEL_745:
              if ((v454 & 0x80000000) != 0)
                v606 = (uint64_t *)(*(_QWORD *)(v167 + 24) + 16 * (v454 & 0x7FFFFFFF) + 8);
              else
                v606 = (uint64_t *)(*(_QWORD *)(v167 + 272) + 8 * v454);
              v607 = *v606;
              if (!v607)
                goto LABEL_749;
              if ((*(_BYTE *)(v607 + 3) & 1) == 0)
              {
                v607 = *(_QWORD *)(v607 + 24);
                if (!v607 || (*(_BYTE *)(v607 + 3) & 1) == 0)
                  goto LABEL_749;
              }
              v1486 = *(_QWORD *)(v607 + 8);
              if (!v1486 || **(_WORD **)(v1486 + 16) != 165 || *(_DWORD *)(v1486 + 40) != 3)
                goto LABEL_749;
              v1487 = *(_QWORD *)(v1486 + 32);
              v1488 = *(unsigned int *)(v1487 + 36);
              HIDWORD(v2001) = *(_DWORD *)(v1487 + 36);
              v1489 = *(unsigned int *)(v1487 + 68);
              v1490 = *(_QWORD *)(v167 + 24);
              v1491 = (uint64_t *)(v1490 + 16 * (v1489 & 0x7FFFFFFF) + 8);
              v1492 = *(_QWORD *)(v167 + 272);
              if ((int)v1489 >= 0)
                v1491 = (uint64_t *)(v1492 + 8 * v1489);
              v1493 = *v1491;
              if ((*(_BYTE *)(v1493 + 3) & 1) == 0)
                v1493 = *(_QWORD *)(v1493 + 24);
              v1494 = *(_QWORD *)(v1493 + 8);
              if (**(_WORD **)(v1494 + 16) == 121)
              {
                v1689 = *(_QWORD *)(*(_QWORD *)(v1494 + 32) + 48);
                v2000 = v1689;
                if (v1689)
                {
LABEL_3008:
                  if (*(_UNKNOWN **)(v1689 + 32) == &unk_1C866F1C0)
                    v1690 = *(_QWORD *)(v1689 + 40);
                  else
                    v1690 = v1689 + 24;
                  if ((*(_BYTE *)(v1690 + 28) & 7) == 3 && (~*(unsigned __int16 *)(a2 + 44) & 0x70) == 0)
                  {
                    v1728 = *v453;
                    LODWORD(v2046) = v454;
                    LODWORD(v2047) = 1;
                    sub_1C5545FFC(v1728, &v2046, 0.0);
                    v600 = *(_QWORD *)(a2 + 24);
                    v601 = a2;
                    if ((*(_BYTE *)a2 & 4) == 0)
                    {
                      v601 = a2;
                      if ((*(_WORD *)(a2 + 44) & 8) != 0)
                      {
                        v601 = a2;
                        do
                          v601 = *(_QWORD *)(v601 + 8);
                        while ((*(_WORD *)(v601 + 44) & 8) != 0);
                      }
                    }
                    goto LABEL_1219;
                  }
LABEL_749:
                  if ((BYTE4(__s1[1]) & 1) != 0 || (*(_WORD *)(a2 + 44) & 0x400) != 0)
                  {
                    v608 = v453;
                    v2046 = (unint64_t)&v2001 + 4;
                    *(_QWORD *)&v2047 = &v2000;
                    *((_QWORD *)&v2047 + 1) = &v1999;
                    LODWORD(v2027) = v454;
                    if (sub_1C49BBEFC((uint64_t)&v2046, v167, (unsigned int *)&v2027))
                    {
                      v609 = v2000;
                      v610 = *(_QWORD *)(v2000 + 32);
                      if ((_UNKNOWN *)v610 == &unk_1C866F1C0)
                      {
                        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v2014, (const llvm::detail::DoubleAPFloat *)(v2000 + 32));
                      }
                      else
                      {
                        v2014 = *(_QWORD *)(v2000 + 32);
                        if ((*(_DWORD *)(v610 + 8) + 64) >= 0x80)
                          v2015 = (uint64_t *)operator new[]();
                        v611 = *(_BYTE *)(v609 + 52);
                        v612 = v611 & 7;
                        v2017 = v2017 & 0xF0 | v611 & 0xF;
                        v2016 = *(_DWORD *)(v609 + 48);
                        v614 = (v611 & 6) != 0 && v612 != 3;
                        if (v612 == 1 || v614)
                        {
                          v615 = *(unsigned int *)(v2014 + 8);
                          if ((v615 - 64) <= 0xFFFFFF7F)
                            v616 = v2015;
                          else
                            v616 = (uint64_t *)&v2015;
                          v619 = *(uint64_t **)(v609 + 40);
                          v618 = (uint64_t *)(v609 + 40);
                          v617 = v619;
                          if ((*(_DWORD *)(*(v618 - 1) + 8) - 64) >= 0xFFFFFF80)
                            v617 = v618;
                          if (v615 <= 0xFFFFFFBF)
                          {
                            v620 = (unint64_t)(v615 + 64) >> 6;
                            do
                            {
                              v621 = *v617++;
                              *v616++ = v621;
                              --v620;
                            }
                            while (v620);
                          }
                        }
                      }
                      sub_1C499C600((uint64_t)&v2027, v458, (uint64_t)&v2013);
                      if ((_UNKNOWN *)v2014 == &unk_1C866F1C0)
                      {
                        sub_1C4773C74((uint64_t *)&v2015);
                      }
                      else if ((*(_DWORD *)(v2014 + 8) - 64) <= 0xFFFFFF7F && v2015)
                      {
                        MEMORY[0x1CAA32F9C](v2015, 0x1000C8000313F17);
                      }
                      v622 = v1999;
                      v623 = *(_QWORD *)(v1999 + 32);
                      if ((_UNKNOWN *)v623 == &unk_1C866F1C0)
                      {
                        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v2009, (const llvm::detail::DoubleAPFloat *)(v1999 + 32));
                      }
                      else
                      {
                        v2009 = *(_QWORD *)(v1999 + 32);
                        if ((*(_DWORD *)(v623 + 8) + 64) >= 0x80)
                          v2010 = (uint64_t *)operator new[]();
                        v624 = *(_BYTE *)(v622 + 52);
                        v625 = v624 & 7;
                        v2012 = v2012 & 0xF0 | v624 & 0xF;
                        v2011 = *(_DWORD *)(v622 + 48);
                        v627 = (v624 & 6) != 0 && v625 != 3;
                        if (v625 == 1 || v627)
                        {
                          v629 = *(unsigned int *)(v2009 + 8);
                          if ((v629 - 64) <= 0xFFFFFF7F)
                            v630 = v2010;
                          else
                            v630 = (uint64_t *)&v2010;
                          v633 = *(uint64_t **)(v622 + 40);
                          v632 = (uint64_t *)(v622 + 40);
                          v631 = v633;
                          if ((*(_DWORD *)(*(v632 - 1) + 8) - 64) >= 0xFFFFFF80)
                            v631 = v632;
                          if (v629 <= 0xFFFFFFBF)
                          {
                            v634 = (unint64_t)(v629 + 64) >> 6;
                            do
                            {
                              v635 = *v631++;
                              *v630++ = v635;
                              --v634;
                            }
                            while (v634);
                          }
                        }
                      }
                      sub_1C499C600((uint64_t)&v2018, v458, (uint64_t)&v2008);
                      if ((_UNKNOWN *)v2009 == &unk_1C866F1C0)
                      {
                        sub_1C4773C74((uint64_t *)&v2010);
                      }
                      else if ((*(_DWORD *)(v2009 + 8) - 64) <= 0xFFFFFF7F && v2010)
                      {
                        MEMORY[0x1CAA32F9C](v2010, 0x1000C8000313F17);
                      }
                      v636 = *((_QWORD *)&v2027 + 1);
                      if (*((_UNKNOWN **)&v2027 + 1) == &unk_1C866F1C0)
                      {
                        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v2004, (const llvm::detail::DoubleAPFloat *)((char *)&v2027 + 8));
                        goto LABEL_812;
                      }
                      v2004 = *((_QWORD *)&v2027 + 1);
                      if ((*(_DWORD *)(*((_QWORD *)&v2027 + 1) + 8) + 64) >= 0x80)
                        v2005 = (uint64_t *)operator new[]();
                      v637 = v2030 & 7;
                      v2007 = v2007 & 0xF0 | v2030 & 0xF;
                      v2006 = v2029;
                      v639 = (v2030 & 6) != 0 && v637 != 3;
                      if (v637 == 1 || v639)
                      {
                        v640 = *(unsigned int *)(v2004 + 8);
                        if ((v640 - 64) <= 0xFFFFFF7F)
                        {
                          v642 = v2005;
                          if ((*(_DWORD *)(v636 + 8) - 64) >= 0xFFFFFF80)
                            v641 = &v2028;
                          else
                            v641 = (uint64_t **)v2028;
                          goto LABEL_810;
                        }
                        v641 = &v2028;
                        if ((*(_DWORD *)(v636 + 8) - 64) < 0xFFFFFF80)
                          v641 = (uint64_t **)v2028;
                        if (v640 <= 0xFFFFFFBF)
                        {
                          v642 = (uint64_t *)&v2005;
LABEL_810:
                          v643 = (unint64_t)(v640 + 64) >> 6;
                          do
                          {
                            v644 = (uint64_t)*v641++;
                            *v642++ = v644;
                            --v643;
                          }
                          while (v643);
                        }
                      }
LABEL_812:
                      sub_1C48DB628((uint64_t)&v2003, (uint64_t)&v2018, 1);
                      v645 = *v608;
                      v2046 = (unint64_t)v455;
                      LODWORD(v2047) = 0;
                      v647 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v174, (llvm::LLVMContext *)&v2003, v646);
                      v648 = (*(uint64_t (**)(uint64_t, unint64_t *, llvm::APFloatBase *))(*(_QWORD *)v645 + 24))(v645, &v2046, v647);
                      v649 = *v608;
                      v2002[0] = v454;
                      v2002[2] = 1;
                      LODWORD(v2046) = HIDWORD(v2001);
                      DWORD2(v2047) = 0;
                      v2048 = v648;
                      v2049 = v650;
                      v2050 = 1;
                      (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v649 + 32))(v649, 165, v2002, 1, &v2046, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
                      v651 = a2;
                      if ((*(_BYTE *)a2 & 4) == 0)
                      {
                        v651 = a2;
                        if ((*(_WORD *)(a2 + 44) & 8) != 0)
                        {
                          v651 = a2;
                          do
                            v651 = *(_QWORD *)(v651 + 8);
                          while ((*(_WORD *)(v651 + 44) & 8) != 0);
                        }
                      }
                      sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v651 + 8));
                      if ((_UNKNOWN *)v2004 == &unk_1C866F1C0)
                      {
                        sub_1C4773C74((uint64_t *)&v2005);
                      }
                      else if ((*(_DWORD *)(v2004 + 8) - 64) <= 0xFFFFFF7F && v2005)
                      {
                        MEMORY[0x1CAA32F9C](v2005, 0x1000C8000313F17);
                      }
                      if ((_UNKNOWN *)v2019 == &unk_1C866F1C0)
                      {
                        sub_1C4773C74((uint64_t *)&v2020);
                      }
                      else if ((*(_DWORD *)(v2019 + 8) - 64) <= 0xFFFFFF7F && v2020)
                      {
                        MEMORY[0x1CAA32F9C](v2020, 0x1000C8000313F17);
                      }
                      if ((_UNKNOWN *)v636 != &unk_1C866F1C0)
                      {
                        v652 = *(_DWORD *)(v636 + 8);
LABEL_820:
                        if ((v652 - 64) > 0xFFFFFF7F)
                          goto LABEL_1220;
                        v653 = v2028;
                        if (!v2028)
                          goto LABEL_1220;
LABEL_822:
                        MEMORY[0x1CAA32F9C](v653, 0x1000C8000313F17);
LABEL_1220:
                        sub_1C48433E8((uint64_t)__s1);
                        return 1;
                      }
                      goto LABEL_2718;
                    }
                    v2046 = (unint64_t)&v2001 + 4;
                    *(_QWORD *)&v2047 = &v2001;
                    *((_QWORD *)&v2047 + 1) = &v2000;
                    LODWORD(v2027) = v454;
                    if (sub_1C49BC2DC((uint64_t)&v2046, v167, (unsigned int *)&v2027))
                    {
                      v453 = v608;
                      if (HIDWORD(v2001) == (_DWORD)v2001)
                      {
                        v654 = v2000;
                        v655 = *(_QWORD *)(v2000 + 32);
                        if ((_UNKNOWN *)v655 == &unk_1C866F1C0)
                        {
                          llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v2027 + 8), (const llvm::detail::DoubleAPFloat *)(v2000 + 32));
                        }
                        else
                        {
                          *((_QWORD *)&v2027 + 1) = *(_QWORD *)(v2000 + 32);
                          if ((*(_DWORD *)(v655 + 8) + 64) >= 0x80)
                            v2028 = (uint64_t *)operator new[]();
                          v656 = *(_BYTE *)(v654 + 52);
                          v657 = v656 & 7;
                          v2030 = v2030 & 0xF0 | v656 & 0xF;
                          v2029 = *(_DWORD *)(v654 + 48);
                          v659 = (v656 & 6) != 0 && v657 != 3;
                          if (v657 == 1 || v659)
                          {
                            v660 = *(unsigned int *)(*((_QWORD *)&v2027 + 1) + 8);
                            if ((v660 - 64) <= 0xFFFFFF7F)
                              v661 = (uint64_t **)v2028;
                            else
                              v661 = &v2028;
                            v664 = *(uint64_t ***)(v654 + 40);
                            v663 = (uint64_t **)(v654 + 40);
                            v662 = v664;
                            if ((*((_DWORD *)*(v663 - 1) + 2) - 64) >= 0xFFFFFF80)
                              v662 = v663;
                            if (v660 <= 0xFFFFFFBF)
                            {
                              v665 = (unint64_t)(v660 + 64) >> 6;
                              do
                              {
                                v666 = *v662++;
                                *v661++ = v666;
                                --v665;
                              }
                              while (v665);
                            }
                          }
                        }
                        llvm::APFloat::APFloat((uint64_t)&v2046, *((void **)&v2027 + 1), "2.0", 3uLL);
                        if (*((_UNKNOWN **)&v2027 + 1) == &unk_1C866F1C0)
                        {
                          llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v2019, (const llvm::detail::DoubleAPFloat *)((char *)&v2027 + 8));
                        }
                        else
                        {
                          v2019 = *((_QWORD *)&v2027 + 1);
                          if ((*(_DWORD *)(*((_QWORD *)&v2027 + 1) + 8) + 64) >= 0x80)
                            v2020 = (uint64_t *)operator new[]();
                          v667 = v2030 & 7;
                          v2022 = v2022 & 0xF0 | v2030 & 0xF;
                          v2021 = v2029;
                          v669 = (v2030 & 6) != 0 && v667 != 3;
                          if (v667 == 1 || v669)
                          {
                            v670 = *(unsigned int *)(v2019 + 8);
                            v671 = (v670 - 64) <= 0xFFFFFF7F ? v2020 : (uint64_t *)&v2020;
                            v672 = (*(_DWORD *)(*((_QWORD *)&v2027 + 1) + 8) - 64) >= 0xFFFFFF80
                                 ? (uint64_t *)&v2028
                                 : v2028;
                            if (v670 <= 0xFFFFFFBF)
                            {
                              v673 = (unint64_t)(v670 + 64) >> 6;
                              do
                              {
                                v674 = *v672++;
                                *v671++ = v674;
                                --v673;
                              }
                              while (v673);
                            }
                          }
                        }
                        sub_1C48DB628((uint64_t)&v2018, (uint64_t)&v2046, 1);
                        if ((_UNKNOWN *)v2047 == &unk_1C866F1C0)
                        {
                          sub_1C4773C74((uint64_t *)&v2047 + 1);
                        }
                        else if ((*(_DWORD *)(v2047 + 8) - 64) <= 0xFFFFFF7F && *((_QWORD *)&v2047 + 1))
                        {
                          MEMORY[0x1CAA32F9C](*((_QWORD *)&v2047 + 1), 0x1000C8000313F17);
                        }
                        v676 = *v608;
                        v2046 = (unint64_t)v455;
                        LODWORD(v2047) = 0;
                        v677 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v174, (llvm::LLVMContext *)&v2018, v675);
                        v678 = (*(uint64_t (**)(uint64_t, unint64_t *, llvm::APFloatBase *))(*(_QWORD *)v676 + 24))(v676, &v2046, v677);
                        v679 = *v608;
                        v2003 = v454;
                        LODWORD(v2004) = 1;
                        LODWORD(v2046) = HIDWORD(v2001);
                        DWORD2(v2047) = 0;
                        v2048 = v678;
                        v2049 = v680;
                        v2050 = 1;
                        (*(void (**)(uint64_t, uint64_t, int *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v679 + 32))(v679, 165, &v2003, 1, &v2046, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
                        v681 = a2;
                        if ((*(_BYTE *)a2 & 4) == 0)
                        {
                          v681 = a2;
                          if ((*(_WORD *)(a2 + 44) & 8) != 0)
                          {
                            v681 = a2;
                            do
                              v681 = *(_QWORD *)(v681 + 8);
                            while ((*(_WORD *)(v681 + 44) & 8) != 0);
                          }
                        }
                        sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v681 + 8));
                        if ((_UNKNOWN *)v2019 == &unk_1C866F1C0)
                        {
                          sub_1C4773C74((uint64_t *)&v2020);
                        }
                        else if ((*(_DWORD *)(v2019 + 8) - 64) <= 0xFFFFFF7F && v2020)
                        {
                          MEMORY[0x1CAA32F9C](v2020, 0x1000C8000313F17);
                        }
                        if (*((_UNKNOWN **)&v2027 + 1) != &unk_1C866F1C0)
                        {
                          v652 = *(_DWORD *)(*((_QWORD *)&v2027 + 1) + 8);
                          goto LABEL_820;
                        }
LABEL_2718:
                        v1560 = (unint64_t *)&v2027;
                        goto LABEL_2719;
                      }
                    }
                    else
                    {
                      v453 = v608;
                    }
                  }
                  if ((v454 & 0x80000000) != 0)
                    v682 = (uint64_t *)(*(_QWORD *)(v167 + 24) + 16 * (v454 & 0x7FFFFFFF) + 8);
                  else
                    v682 = (uint64_t *)(*(_QWORD *)(v167 + 272) + 8 * v454);
                  v683 = v453;
                  v684 = *v682;
                  if (v684)
                  {
                    if ((*(_BYTE *)(v684 + 3) & 1) != 0
                      || (v684 = *(_QWORD *)(v684 + 24)) != 0 && (*(_BYTE *)(v684 + 3) & 1) != 0)
                    {
                      v1416 = *(_QWORD *)(v684 + 8);
                      if (v1416)
                      {
                        if (**(_WORD **)(v1416 + 16) == 165 && *(_DWORD *)(v1416 + 40) == 3)
                        {
                          v1417 = *(_QWORD *)(v1416 + 32);
                          v1418 = *(unsigned int *)(v1417 + 36);
                          HIDWORD(v2001) = *(_DWORD *)(v1417 + 36);
                          v1419 = *(unsigned int *)(v1417 + 68);
                          v1420 = *(_QWORD *)(v167 + 24);
                          v1421 = (uint64_t *)(v1420 + 16 * (v1419 & 0x7FFFFFFF) + 8);
                          v1422 = *(_QWORD *)(v167 + 272);
                          if ((int)v1419 >= 0)
                            v1421 = (uint64_t *)(v1422 + 8 * v1419);
                          v1423 = *v1421;
                          if ((*(_BYTE *)(v1423 + 3) & 1) == 0)
                            v1423 = *(_QWORD *)(v1423 + 24);
                          v1424 = *(_QWORD *)(v1423 + 8);
                          if (**(_WORD **)(v1424 + 16) == 121)
                          {
                            v1716 = *(_QWORD *)(*(_QWORD *)(v1424 + 32) + 48);
                            v2000 = v1716;
                            if (v1716)
                              goto LABEL_3060;
                          }
                          else
                          {
                            v2000 = 0;
                          }
                          v1425 = v1420 + 16 * (v1418 & 0x7FFFFFFF) + 8;
                          v1426 = (uint64_t *)(v1422 + 8 * v1418);
                          if ((int)v1418 >= 0)
                            v1427 = v1426;
                          else
                            v1427 = (uint64_t *)v1425;
                          v1428 = *v1427;
                          if ((*(_BYTE *)(v1428 + 3) & 1) == 0)
                            v1428 = *(_QWORD *)(v1428 + 24);
                          v1429 = *(_QWORD *)(v1428 + 8);
                          if (**(_WORD **)(v1429 + 16) != 121)
                          {
                            v2000 = 0;
                            goto LABEL_875;
                          }
                          v1716 = *(_QWORD *)(*(_QWORD *)(v1429 + 32) + 48);
                          v2000 = v1716;
                          if (v1716)
                          {
                            HIDWORD(v2001) = v1419;
LABEL_3060:
                            LODWORD(v2047) = 64;
                            v2046 = 0xBFF0000000000000;
                            llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v2027, (const llvm::APInt **)&v2046);
                            v2047 = v2027;
                            LODWORD(v2048) = (_DWORD)v2028;
                            BYTE4(v2048) = BYTE4(v2028) & 0xF;
                            llvm::APFloat::convert((uint64_t)&v2046, *(void **)(v1716 + 32), 1, &v2027);
                            v1717 = sub_1C47ECB98(v1716 + 24, (uint64_t)&v2046);
                            if ((_UNKNOWN *)v2047 == &unk_1C866F1C0)
                            {
                              sub_1C4773C74((uint64_t *)&v2047 + 1);
                            }
                            else if ((*(_DWORD *)(v2047 + 8) - 64) <= 0xFFFFFF7F
                                   && *((_QWORD *)&v2047 + 1))
                            {
                              MEMORY[0x1CAA32F9C](*((_QWORD *)&v2047 + 1), 0x1000C8000313F17);
                            }
                            if (v1717)
                            {
                              v1718 = *v683;
                              LODWORD(v2027) = v454;
                              DWORD2(v2027) = 1;
                              LODWORD(v2046) = HIDWORD(v2001);
                              DWORD2(v2047) = 0;
                              (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v1718 + 32))(v1718, 177, &v2027, 1, &v2046, 1, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
                              v600 = *(_QWORD *)(a2 + 24);
                              v601 = a2;
                              if ((*(_BYTE *)a2 & 4) == 0)
                              {
                                v601 = a2;
                                if ((*(_WORD *)(a2 + 44) & 8) != 0)
                                {
                                  v601 = a2;
                                  do
                                    v601 = *(_QWORD *)(v601 + 8);
                                  while ((*(_WORD *)(v601 + 44) & 8) != 0);
                                }
                              }
                              goto LABEL_1219;
                            }
                          }
                        }
                      }
                    }
                  }
LABEL_875:
                  v2046 = (unint64_t)&v2001 + 4;
                  *(_QWORD *)&v2047 = &v2001;
                  LODWORD(v2027) = v454;
                  if (sub_1C49BC528((_DWORD **)&v2046, v167, (unsigned int *)&v2027))
                  {
                    v685 = *v683;
                    LODWORD(v2027) = v454;
                    DWORD2(v2027) = 1;
                    LODWORD(v2046) = HIDWORD(v2001);
                    DWORD2(v2047) = 0;
                    LODWORD(v2048) = v2001;
                    v2050 = 0;
                    (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v685 + 32))(v685, 165, &v2027, 1, &v2046, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
                    v600 = *(_QWORD *)(a2 + 24);
                    v601 = a2;
                    if ((*(_BYTE *)a2 & 4) == 0)
                    {
                      v601 = a2;
                      if ((*(_WORD *)(a2 + 44) & 8) != 0)
                      {
                        v601 = a2;
                        do
                          v601 = *(_QWORD *)(v601 + 8);
                        while ((*(_WORD *)(v601 + 44) & 8) != 0);
                      }
                    }
                    goto LABEL_1219;
                  }
                  v2046 = (unint64_t)&v2001 + 4;
                  *(_QWORD *)&v2047 = &v2001;
                  LODWORD(v2027) = v454;
                  if (sub_1C49BBE6C((uint64_t)&v2046, v167, (unsigned int *)&v2027))
                  {
                    if ((v2001 & 0x80000000) != 0)
                      v686 = (uint64_t *)(*(_QWORD *)(v167 + 24) + 16 * (v2001 & 0x7FFFFFFF) + 8);
                    else
                      v686 = (uint64_t *)(*(_QWORD *)(v167 + 272) + 8 * v2001);
                    v823 = *v686;
                    if ((*(_BYTE *)(v823 + 3) & 1) == 0)
                      v823 = *(_QWORD *)(v823 + 24);
                    v824 = *(_QWORD *)(v823 + 8);
                    if (**(_WORD **)(v824 + 16) == 136)
                    {
                      v825 = *(unsigned int *)(*(_QWORD *)(v824 + 32) + 36);
                      if ((v825 & 0x80000000) != 0)
                        v826 = (uint64_t *)(*(_QWORD *)(v167 + 24) + 16 * (v825 & 0x7FFFFFFF) + 8);
                      else
                        v826 = (uint64_t *)(*(_QWORD *)(v167 + 272) + 8 * v825);
                      v885 = *v826;
                      if ((*(_BYTE *)(v885 + 3) & 1) == 0)
                        v885 = *(_QWORD *)(v885 + 24);
                      v886 = *(_QWORD *)(v885 + 8);
                      if (**(_WORD **)(v886 + 16) == 135)
                      {
                        v887 = *(unsigned int *)(*(_QWORD *)(v886 + 32) + 100);
                        if ((int)v887 >= 0)
                          v888 = (uint64_t *)(*(_QWORD *)(v167 + 272) + 8 * v887);
                        else
                          v888 = (uint64_t *)(*(_QWORD *)(v167 + 24) + 16 * (v887 & 0x7FFFFFFF) + 8);
                        v889 = *v888;
                        if ((*(_BYTE *)(v889 + 3) & 1) == 0)
                          v889 = *(_QWORD *)(v889 + 24);
                        v890 = *(_QWORD *)(v889 + 8);
                        if (**(_WORD **)(v890 + 16) == 121)
                        {
                          v1039 = *(_QWORD *)(*(_QWORD *)(v890 + 32) + 48);
                          if (v1039)
                          {
                            LODWORD(v2047) = 64;
                            v2046 = 0;
                            llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v2027, (const llvm::APInt **)&v2046);
                            v2047 = v2027;
                            LODWORD(v2048) = (_DWORD)v2028;
                            BYTE4(v2048) = BYTE4(v2028) & 0xF;
                            llvm::APFloat::convert((uint64_t)&v2046, *(void **)(v1039 + 32), 1, &v2027);
                            v1040 = sub_1C47ECB98(v1039 + 24, (uint64_t)&v2046);
                            if ((_UNKNOWN *)v2047 == &unk_1C866F1C0)
                            {
                              sub_1C4773C74((uint64_t *)&v2047 + 1);
                            }
                            else if ((*(_DWORD *)(v2047 + 8) - 64) <= 0xFFFFFF7F
                                   && *((_QWORD *)&v2047 + 1))
                            {
                              MEMORY[0x1CAA32F9C](*((_QWORD *)&v2047 + 1), 0x1000C8000313F17);
                            }
                            if (v1040)
                            {
                              v1041 = *(_QWORD *)(v886 + 32);
                              if (HIDWORD(v2001) == *(_DWORD *)(v1041 + 68)
                                && (~*(unsigned __int16 *)(a2 + 44) & 0x50) == 0)
                              {
                                v1042 = *(_QWORD *)(v824 + 32);
                                v1043 = *(unsigned int *)(v1042 + 68);
                                v1044 = *(_QWORD *)(v167 + 24);
                                v1045 = *(_QWORD *)(v167 + 272);
                                if ((int)v1043 >= 0)
                                  v1046 = (uint64_t *)(v1045 + 8 * v1043);
                                else
                                  v1046 = (uint64_t *)(v1044 + 16 * (v1043 & 0x7FFFFFFF) + 8);
                                v1047 = *v1046;
                                if ((*(_BYTE *)(v1047 + 3) & 1) == 0)
                                  v1047 = *(_QWORD *)(v1047 + 24);
                                v1048 = *(_QWORD *)(v1047 + 8);
                                if (**(_WORD **)(v1048 + 16) == 121)
                                  v1049 = *(_QWORD *)(*(_QWORD *)(v1048 + 32) + 48);
                                else
                                  v1049 = 0;
                                v1050 = *(unsigned int *)(v1042 + 100);
                                v1051 = v1044 + 16 * (v1050 & 0x7FFFFFFF) + 8;
                                v1052 = (uint64_t *)(v1045 + 8 * v1050);
                                if ((int)v1050 >= 0)
                                  v1053 = v1052;
                                else
                                  v1053 = (uint64_t *)v1051;
                                v1054 = *v1053;
                                if ((*(_BYTE *)(v1054 + 3) & 1) == 0)
                                  v1054 = *(_QWORD *)(v1054 + 24);
                                v1055 = *(_QWORD *)(v1054 + 8);
                                if (**(_WORD **)(v1055 + 16) == 121)
                                {
                                  if (v1049)
                                  {
                                    v1056 = *(_QWORD *)(*(_QWORD *)(v1055 + 32) + 48);
                                    if (v1056)
                                    {
                                      v1057 = *(_DWORD *)(v1041 + 48);
                                      if (v1057 <= 0xD)
                                      {
                                        v1058 = 1 << v1057;
                                        if ((v1058 & 0xC0C) != 0)
                                        {
                                          v1059 = *(_QWORD *)(*(_QWORD *)(v1055 + 32) + 48);
                                          v1056 = v1049;
                                        }
                                        else
                                        {
                                          if ((v1058 & 0x3030) == 0)
                                            goto LABEL_1321;
                                          v1059 = v1049;
                                        }
                                        LODWORD(v2047) = 64;
                                        v2046 = 0xBFF0000000000000;
                                        llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v2027, (const llvm::APInt **)&v2046);
                                        v2047 = v2027;
                                        LODWORD(v2048) = (_DWORD)v2028;
                                        BYTE4(v2048) = BYTE4(v2028) & 0xF;
                                        llvm::APFloat::convert((uint64_t)&v2046, *(void **)(v1056 + 32), 1, &v2027);
                                        v1220 = sub_1C47ECB98(v1056 + 24, (uint64_t)&v2046);
                                        if ((_UNKNOWN *)v2047 == &unk_1C866F1C0)
                                        {
                                          sub_1C4773C74((uint64_t *)&v2047 + 1);
                                        }
                                        else if ((*(_DWORD *)(v2047 + 8) - 64) <= 0xFFFFFF7F
                                               && *((_QWORD *)&v2047 + 1))
                                        {
                                          MEMORY[0x1CAA32F9C](*((_QWORD *)&v2047 + 1), 0x1000C8000313F17);
                                        }
                                        if (v1220)
                                        {
                                          LODWORD(v2047) = 64;
                                          v2046 = 0x3FF0000000000000;
                                          llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v2027, (const llvm::APInt **)&v2046);
                                          v2047 = v2027;
                                          LODWORD(v2048) = (_DWORD)v2028;
                                          BYTE4(v2048) = BYTE4(v2028) & 0xF;
                                          llvm::APFloat::convert((uint64_t)&v2046, *(void **)(v1059 + 32), 1, &v2027);
                                          v1221 = sub_1C47ECB98(v1059 + 24, (uint64_t)&v2046);
                                          if ((_UNKNOWN *)v2047 == &unk_1C866F1C0)
                                          {
                                            sub_1C4773C74((uint64_t *)&v2047 + 1);
                                          }
                                          else if ((*(_DWORD *)(v2047 + 8) - 64) <= 0xFFFFFF7F
                                                 && *((_QWORD *)&v2047 + 1))
                                          {
                                            MEMORY[0x1CAA32F9C](*((_QWORD *)&v2047 + 1), 0x1000C8000313F17);
                                          }
                                          if (v1221)
                                          {
                                            v1222 = *v683;
                                            *(_QWORD *)&v2027 = v455;
                                            DWORD2(v2027) = 0;
                                            LODWORD(v2046) = HIDWORD(v2001);
                                            DWORD2(v2047) = 0;
                                            v1223 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v1222 + 32))(v1222, 184, &v2027, 1, &v2046, 1, 0);
                                            v1224 = *v683;
                                            LODWORD(v2027) = v454;
                                            DWORD2(v2027) = 1;
                                            v2046 = (unint64_t)v1223;
                                            *(_QWORD *)&v2047 = v1225;
                                            DWORD2(v2047) = 1;
                                            (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v1224 + 32))(v1224, 177, &v2027, 1, &v2046, 1, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
                                            v600 = *(_QWORD *)(a2 + 24);
                                            v601 = a2;
                                            if ((*(_BYTE *)a2 & 4) == 0)
                                            {
                                              v601 = a2;
                                              if ((*(_WORD *)(a2 + 44) & 8) != 0)
                                              {
                                                v601 = a2;
                                                do
                                                  v601 = *(_QWORD *)(v601 + 8);
                                                while ((*(_WORD *)(v601 + 44) & 8) != 0);
                                              }
                                            }
                                            goto LABEL_1219;
                                          }
                                        }
                                        LODWORD(v2047) = 64;
                                        v2046 = 0x3FF0000000000000;
                                        llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v2027, (const llvm::APInt **)&v2046);
                                        v2047 = v2027;
                                        LODWORD(v2048) = (_DWORD)v2028;
                                        BYTE4(v2048) = BYTE4(v2028) & 0xF;
                                        llvm::APFloat::convert((uint64_t)&v2046, *(void **)(v1056 + 32), 1, &v2027);
                                        v1226 = sub_1C47ECB98(v1056 + 24, (uint64_t)&v2046);
                                        if ((_UNKNOWN *)v2047 == &unk_1C866F1C0)
                                        {
                                          sub_1C4773C74((uint64_t *)&v2047 + 1);
                                        }
                                        else if ((*(_DWORD *)(v2047 + 8) - 64) <= 0xFFFFFF7F
                                               && *((_QWORD *)&v2047 + 1))
                                        {
                                          MEMORY[0x1CAA32F9C](*((_QWORD *)&v2047 + 1), 0x1000C8000313F17);
                                        }
                                        if (v1226)
                                        {
                                          LODWORD(v2047) = 64;
                                          v2046 = 0xBFF0000000000000;
                                          llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v2027, (const llvm::APInt **)&v2046);
                                          v2047 = v2027;
                                          LODWORD(v2048) = (_DWORD)v2028;
                                          BYTE4(v2048) = BYTE4(v2028) & 0xF;
                                          llvm::APFloat::convert((uint64_t)&v2046, *(void **)(v1059 + 32), 1, &v2027);
                                          v1227 = sub_1C47ECB98(v1059 + 24, (uint64_t)&v2046);
                                          if ((_UNKNOWN *)v2047 == &unk_1C866F1C0)
                                          {
                                            sub_1C4773C74((uint64_t *)&v2047 + 1);
                                          }
                                          else if ((*(_DWORD *)(v2047 + 8) - 64) <= 0xFFFFFF7F
                                                 && *((_QWORD *)&v2047 + 1))
                                          {
                                            MEMORY[0x1CAA32F9C](*((_QWORD *)&v2047 + 1), 0x1000C8000313F17);
                                          }
                                          if (v1227)
                                          {
                                            v1228 = *v683;
                                            LODWORD(v2027) = v454;
                                            DWORD2(v2027) = 1;
                                            LODWORD(v2046) = HIDWORD(v2001);
                                            DWORD2(v2047) = 0;
                                            (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v1228 + 32))(v1228, 184, &v2027, 1, &v2046, 1, 0);
                                            v600 = *(_QWORD *)(a2 + 24);
                                            v601 = a2;
                                            if ((*(_BYTE *)a2 & 4) == 0)
                                            {
                                              v601 = a2;
                                              if ((*(_WORD *)(a2 + 44) & 8) != 0)
                                              {
                                                v601 = a2;
                                                do
                                                  v601 = *(_QWORD *)(v601 + 8);
                                                while ((*(_WORD *)(v601 + 44) & 8) != 0);
                                              }
                                            }
                                            goto LABEL_1219;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
LABEL_1321:
                  sub_1C48433E8((uint64_t)__s1);
                  v3 = (uint64_t)v683;
                  return sub_1C6037A10((uint64_t *)v3, a2);
                }
              }
              else
              {
                v2000 = 0;
              }
              v1495 = v1490 + 16 * (v1488 & 0x7FFFFFFF) + 8;
              v1496 = (uint64_t *)(v1492 + 8 * v1488);
              if ((int)v1488 >= 0)
                v1497 = v1496;
              else
                v1497 = (uint64_t *)v1495;
              v1498 = *v1497;
              if ((*(_BYTE *)(v1498 + 3) & 1) == 0)
                v1498 = *(_QWORD *)(v1498 + 24);
              v1499 = *(_QWORD *)(v1498 + 8);
              if (**(_WORD **)(v1499 + 16) != 121)
              {
                v2000 = 0;
                goto LABEL_749;
              }
              v1689 = *(_QWORD *)(*(_QWORD *)(v1499 + 32) + 48);
              v2000 = v1689;
              if (!v1689)
                goto LABEL_749;
              HIDWORD(v2001) = v1489;
              goto LABEL_3008;
            }
            HIDWORD(v2001) = v1475;
LABEL_3003:
            LODWORD(v2047) = 64;
            v2046 = 0x3FF0000000000000;
            llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v2027, (const llvm::APInt **)&v2046);
            v2047 = v2027;
            LODWORD(v2048) = (_DWORD)v2028;
            BYTE4(v2048) = BYTE4(v2028) & 0xF;
            llvm::APFloat::convert((uint64_t)&v2046, *(void **)(v1686 + 32), 1, &v2027);
            v1687 = sub_1C47ECB98(v1686 + 24, (uint64_t)&v2046);
            if ((_UNKNOWN *)v2047 == &unk_1C866F1C0)
            {
              sub_1C4773C74((uint64_t *)&v2047 + 1);
            }
            else if ((*(_DWORD *)(v2047 + 8) - 64) <= 0xFFFFFF7F && *((_QWORD *)&v2047 + 1))
            {
              MEMORY[0x1CAA32F9C](*((_QWORD *)&v2047 + 1), 0x1000C8000313F17);
            }
            v453 = v1410;
            if (v1687)
            {
              v1455 = HIDWORD(v2001);
              v1688 = (_QWORD *)v1410[2];
LABEL_3141:
              sub_1C4923194((_QWORD *)v167, a2, v1455, v1688);
              goto LABEL_1220;
            }
            goto LABEL_745;
          }
LABEL_3342:
          v1815 = *(_QWORD *)(v1681 + 32);
          if ((_UNKNOWN *)v1815 == &unk_1C866F1C0)
          {
            llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v2032, (const llvm::detail::DoubleAPFloat *)(v1681 + 32));
          }
          else
          {
            *(_QWORD *)&v2032 = *(_QWORD *)(v1681 + 32);
            if ((*(_DWORD *)(v1815 + 8) + 64) >= 0x80)
              *((_QWORD *)&v2032 + 1) = operator new[]();
            v1816 = *(_BYTE *)(v1681 + 52);
            v1817 = v1816 & 7;
            v2034 = v2034 & 0xF0 | v1816 & 0xF;
            v2033 = *(_DWORD *)(v1681 + 48);
            v1819 = (v1816 & 6) != 0 && v1817 != 3;
            if (v1817 == 1 || v1819)
            {
              v1821 = *(unsigned int *)(v2032 + 8);
              if ((v1821 - 64) <= 0xFFFFFF7F)
                v1822 = (_QWORD *)*((_QWORD *)&v2032 + 1);
              else
                v1822 = (_QWORD *)&v2032 + 1;
              v1825 = *(uint64_t **)(v1681 + 40);
              v1824 = (uint64_t *)(v1681 + 40);
              v1823 = v1825;
              if ((*(_DWORD *)(*(v1824 - 1) + 8) - 64) >= 0xFFFFFF80)
                v1823 = v1824;
              if (v1821 <= 0xFFFFFFBF)
              {
                v1826 = (unint64_t)(v1821 + 64) >> 6;
                do
                {
                  v1827 = *v1823++;
                  *v1822++ = v1827;
                  --v1826;
                }
                while (v1826);
              }
            }
          }
          sub_1C499C600((uint64_t)&v2046, v458, (uint64_t)&v2031);
          if ((_UNKNOWN *)v2032 == &unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v2032 + 1);
          }
          else if ((*(_DWORD *)(v2032 + 8) - 64) <= 0xFFFFFF7F && *((_QWORD *)&v2032 + 1))
          {
            MEMORY[0x1CAA32F9C](*((_QWORD *)&v2032 + 1), 0x1000C8000313F17);
          }
          v1828 = *(_QWORD *)(v1999 + 32);
          if ((_UNKNOWN *)v1828 == &unk_1C866F1C0)
          {
            llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v2023 + 8), (const llvm::detail::DoubleAPFloat *)(v1999 + 32));
          }
          else
          {
            *((_QWORD *)&v2023 + 1) = *(_QWORD *)(v1999 + 32);
            if ((*(_DWORD *)(v1828 + 8) + 64) >= 0x80)
              v2024 = (uint64_t *)operator new[]();
            v1829 = *(_BYTE *)(v1999 + 52);
            v1830 = v1829 & 7;
            v2026 = v2026 & 0xF0 | v1829 & 0xF;
            v2025 = *(_DWORD *)(v1999 + 48);
            v1832 = (v1829 & 6) != 0 && v1830 != 3;
            if (v1830 == 1 || v1832)
            {
              v1834 = *(unsigned int *)(*((_QWORD *)&v2023 + 1) + 8);
              if ((v1834 - 64) <= 0xFFFFFF7F)
                v1835 = v2024;
              else
                v1835 = (uint64_t *)&v2024;
              v1836 = *(uint64_t **)(v1999 + 40);
              if ((*(_DWORD *)(*(_QWORD *)(v1999 + 32) + 8) - 64) >= 0xFFFFFF80)
                v1836 = (uint64_t *)(v1999 + 40);
              if (v1834 <= 0xFFFFFFBF)
              {
                v1837 = (unint64_t)(v1834 + 64) >> 6;
                do
                {
                  v1838 = *v1836++;
                  *v1835++ = v1838;
                  --v1837;
                }
                while (v1837);
              }
            }
          }
          sub_1C499C600((uint64_t)&v2027, v458, (uint64_t)&v2023);
          if (*((_UNKNOWN **)&v2023 + 1) == &unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v2024);
          }
          else if ((*(_DWORD *)(*((_QWORD *)&v2023 + 1) + 8) - 64) <= 0xFFFFFF7F && v2024)
          {
            MEMORY[0x1CAA32F9C](v2024, 0x1000C8000313F17);
          }
          v1839 = v2047;
          if ((_UNKNOWN *)v2047 == &unk_1C866F1C0)
          {
            llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v2019, (const llvm::detail::DoubleAPFloat *)&v2047);
          }
          else
          {
            v2019 = v2047;
            if ((*(_DWORD *)(v2047 + 8) + 64) >= 0x80)
              v2020 = (uint64_t *)operator new[]();
            v1840 = BYTE4(v2048) & 7;
            v2022 = v2022 & 0xF0 | BYTE4(v2048) & 0xF;
            v2021 = v2048;
            v1842 = (v2048 & 0x600000000) != 0 && v1840 != 3;
            if (v1840 != 1 && !v1842)
              goto LABEL_3404;
            v1843 = *(unsigned int *)(v2019 + 8);
            if ((v1843 - 64) <= 0xFFFFFF7F)
            {
              v1845 = (uint64_t **)v2020;
              if ((*(_DWORD *)(v1839 + 8) - 64) >= 0xFFFFFF80)
                v1844 = (uint64_t **)&v2047 + 1;
              else
                v1844 = (uint64_t **)*((_QWORD *)&v2047 + 1);
            }
            else
            {
              v1844 = (uint64_t **)&v2047 + 1;
              if ((*(_DWORD *)(v1839 + 8) - 64) < 0xFFFFFF80)
                v1844 = (uint64_t **)*((_QWORD *)&v2047 + 1);
              if (v1843 > 0xFFFFFFBF)
                goto LABEL_3404;
              v1845 = &v2020;
            }
            v1846 = (unint64_t)(v1843 + 64) >> 6;
            do
            {
              v1847 = *v1844++;
              *v1845++ = v1847;
              --v1846;
            }
            while (v1846);
          }
LABEL_3404:
          sub_1C48DB628((uint64_t)&v2018, (uint64_t)&v2027, 1);
          v1848 = *(_QWORD *)v3;
          v2003 = v454;
          LODWORD(v2004) = 1;
          v1850 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v174, (llvm::LLVMContext *)&v2018, v1849);
          (*(void (**)(uint64_t, int *, llvm::APFloatBase *))(*(_QWORD *)v1848 + 24))(v1848, &v2003, v1850);
          v1851 = *(_QWORD *)(a2 + 24);
          v1852 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v1852 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v1852 = a2;
              do
                v1852 = *(_QWORD *)(v1852 + 8);
              while ((*(_WORD *)(v1852 + 44) & 8) != 0);
            }
          }
          goto LABEL_3406;
        case 166:
          if ((sub_1C49A1ED4((uint64_t *)v3, a2) & 1) != 0)
            return 1;
          return sub_1C6037A10((uint64_t *)v3, a2);
        case 175:
          v188 = *(_QWORD *)v3;
          *(_QWORD *)(v188 + 40) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(v188 + 48) = a2;
          v189 = *(_QWORD *)(a2 + 32);
          v190 = *(_DWORD *)(v189 + 4);
          if ((v190 & 0x80000000) == 0)
            return sub_1C6037A10((uint64_t *)v3, a2);
          v191 = *(_QWORD *)(*(_QWORD *)v3 + 8);
          v192 = *(_QWORD *)(v191 + 40);
          if ((v190 & 0x7FFFFFFFu) >= *(_DWORD *)(v192 + 432))
            return sub_1C6037A10((uint64_t *)v3, a2);
          if (*(_QWORD *)(*(_QWORD *)(v192 + 424) + 8 * (v190 & 0x7FFFFFFF)) != 257)
            return sub_1C6037A10((uint64_t *)v3, a2);
          sub_1C49A4E60((uint64_t)__s1, 175, 257, *(_DWORD *)(v189 + 36), *(_QWORD *)(v192 + 24), *(_QWORD *)(v192 + 272));
          if (!(_BYTE)v2037)
            return sub_1C6037A10((uint64_t *)v3, a2);
          v194 = ***(llvm::ConstantFP ****)v191;
          v195 = *(_QWORD *)v3;
          LODWORD(v2046) = v190;
          LODWORD(v2047) = 1;
          v196 = llvm::ConstantFP::get(v194, (llvm::LLVMContext *)__s1, v193);
          (*(void (**)(uint64_t, unint64_t *, llvm::APFloatBase *))(*(_QWORD *)v195 + 24))(v195, &v2046, v196);
          v48 = *(_QWORD *)(a2 + 24);
          v49 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v49 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v49 = a2;
              do
                v49 = *(_QWORD *)(v49 + 8);
              while ((*(_WORD *)(v49 + 44) & 8) != 0);
            }
          }
          goto LABEL_2337;
        case 177:
          v159 = *(_QWORD *)v3;
          *(_QWORD *)(v159 + 40) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(v159 + 48) = a2;
          v160 = *(_QWORD *)(*(_QWORD *)v3 + 8);
          v161 = *(_QWORD *)(v160 + 40);
          v162 = *(_QWORD *)(a2 + 32);
          v163 = *(_DWORD *)(v162 + 4);
          v164 = *(unsigned int *)(v162 + 36);
          if ((v164 & 0x80000000) != 0)
            v165 = (uint64_t *)(*(_QWORD *)(v161 + 24) + 16 * (v164 & 0x7FFFFFFF) + 8);
          else
            v165 = (uint64_t *)(*(_QWORD *)(v161 + 272) + 8 * v164);
          v429 = *v165;
          if (v429
            && ((*(_BYTE *)(v429 + 3) & 1) != 0
             || (v429 = *(_QWORD *)(v429 + 24)) != 0 && (*(_BYTE *)(v429 + 3) & 1) != 0))
          {
            v430 = *(_QWORD *)(v429 + 8);
            if ((v163 & 0x80000000) == 0)
              goto LABEL_2333;
          }
          else
          {
            v430 = 0;
            if ((v163 & 0x80000000) == 0)
              goto LABEL_2333;
          }
          if ((v163 & 0x7FFFFFFFu) < *(_DWORD *)(v161 + 432))
          {
            v431 = *(_QWORD *)(*(_QWORD *)(v161 + 424) + 8 * (v163 & 0x7FFFFFFF));
            goto LABEL_2334;
          }
LABEL_2333:
          v431 = 0;
LABEL_2334:
          sub_1C49A4E60((uint64_t)__s1, 177, v431, v164, *(_QWORD *)(v161 + 24), *(_QWORD *)(v161 + 272));
          if ((_BYTE)v2037)
          {
            v1362 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v160, (llvm::LLVMContext *)__s1, v1361);
            v1363 = *(_QWORD *)v3;
            LODWORD(v2046) = v163;
            LODWORD(v2047) = 1;
            (*(void (**)(uint64_t, unint64_t *, llvm::APFloatBase *))(*(_QWORD *)v1363 + 24))(v1363, &v2046, v1362);
            v48 = *(_QWORD *)(a2 + 24);
            v49 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v49 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v49 = a2;
                do
                  v49 = *(_QWORD *)(v49 + 8);
                while ((*(_WORD *)(v49 + 44) & 8) != 0);
              }
            }
            goto LABEL_2337;
          }
          v1364 = (*(_WORD *)(a2 + 44) & 0x40 | *(_WORD *)(*(_QWORD *)(v160 + 8) + 1020) & 1) != 0;
          if (!v430)
            return sub_1C6037A10((uint64_t *)v3, a2);
          v1365 = **(unsigned __int16 **)(v430 + 16);
          if ((v1365 - 163) > 3 || v1365 == 164)
            goto LABEL_2356;
          if ((v164 & 0x80000000) != 0)
            v1366 = (uint64_t *)(*(_QWORD *)(v161 + 24) + 16 * (v164 & 0x7FFFFFFF) + 8);
          else
            v1366 = (uint64_t *)(*(_QWORD *)(v161 + 272) + 8 * v164);
          v1367 = *v1366;
          if (!v1367)
            goto LABEL_2351;
          while ((*(_BYTE *)(v1367 + 3) & 1) != 0)
          {
            v1367 = *(_QWORD *)(v1367 + 24);
            if (!v1367)
            {
LABEL_2351:
              if ((sub_1C4998998(v163, v161) & 1) != 0 || !sub_1C4998998(v164, v161))
                return sub_1C6037A10((uint64_t *)v3, a2);
              v1365 = **(unsigned __int16 **)(v430 + 16);
              goto LABEL_2356;
            }
          }
          while (1)
          {
            v1367 = *(_QWORD *)(v1367 + 24);
            if (!v1367)
              break;
            if ((*(_BYTE *)(v1367 + 3) & 1) == 0)
              goto LABEL_2351;
          }
LABEL_2356:
          if (v1365 == 177)
          {
            v1368 = *(_QWORD *)v3;
            LODWORD(v2046) = v163;
            LODWORD(v2047) = 1;
            LODWORD(__s1[0]) = *(_DWORD *)(*(_QWORD *)(v430 + 32) + 36);
            LODWORD(v2036) = 0;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v1368 + 32))(v1368, 19, &v2046, 1, __s1, 1, 0);
            v63 = *(_QWORD *)(a2 + 24);
            v64 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v64 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v64 = a2;
                do
                  v64 = *(_QWORD *)(v64 + 8);
                while ((*(_WORD *)(v64 + 44) & 8) != 0);
              }
            }
            goto LABEL_2820;
          }
          LODWORD(v2013) = 0;
          LODWORD(v2008) = 0;
          if (!v1364)
            goto LABEL_2379;
          if ((v164 & 0x80000000) != 0)
            v1369 = (uint64_t *)(*(_QWORD *)(v161 + 24) + 16 * (v164 & 0x7FFFFFFF) + 8);
          else
            v1369 = (uint64_t *)(*(_QWORD *)(v161 + 272) + 8 * v164);
          v1370 = *v1369;
          if (v1370)
          {
            if ((*(_BYTE *)(v1370 + 3) & 1) != 0
              || (v1370 = *(_QWORD *)(v1370 + 24)) != 0 && (*(_BYTE *)(v1370 + 3) & 1) != 0)
            {
              v1662 = *(_QWORD *)(v1370 + 8);
              if (v1662)
              {
                if (**(_WORD **)(v1662 + 16) == 163 && *(_DWORD *)(v1662 + 40) == 3)
                {
                  v1663 = *(_QWORD *)(v1662 + 32);
                  LODWORD(v2013) = *(_DWORD *)(v1663 + 36);
                  LODWORD(v2008) = *(_DWORD *)(v1663 + 68);
                  v1664 = *(_QWORD *)v3;
                  LODWORD(v2027) = v163;
                  DWORD2(v2027) = 1;
                  *(_QWORD *)&v2023 = v431;
                  DWORD2(v2023) = 0;
                  LODWORD(v2046) = (_DWORD)v2013;
                  DWORD2(v2047) = 0;
                  __s1[0] = (void *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v1664 + 32))(v1664, 177, &v2023, 1, &v2046, 1, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
                  __s1[1] = v1665;
                  LODWORD(v2036) = 1;
                  v1666 = *(_QWORD *)v3;
                  v2018 = v431;
                  LODWORD(v2019) = 0;
                  LODWORD(v2031) = v2008;
                  DWORD2(v2032) = 0;
                  *((_QWORD *)&v2036 + 1) = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v1666 + 32))(v1666, 177, &v2018, 1, &v2031, 1, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
                  v2037 = v1667;
                  LODWORD(v2038) = 1;
                  v1373 = *(unsigned __int16 *)(v430 + 44) | 0x100000000;
                  v1374 = *(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v1664 + 32);
                  v1375 = (unint64_t *)&v2027;
                  v1376 = v1664;
                  v1377 = 163;
                  goto LABEL_2369;
                }
              }
            }
          }
          __s1[0] = &v2013;
          __s1[1] = &v2008;
          LODWORD(v2046) = v164;
          if (sub_1C49BBE6C((uint64_t)__s1, v161, (unsigned int *)&v2046))
          {
            v1371 = *(_QWORD *)v3;
            LODWORD(v2031) = v163;
            LODWORD(v2032) = 1;
            LODWORD(__s1[0]) = (_DWORD)v2013;
            LODWORD(v2036) = 0;
            *(_QWORD *)&v2027 = v431;
            DWORD2(v2027) = 0;
            LODWORD(v2046) = v2008;
            DWORD2(v2047) = 0;
            *((_QWORD *)&v2036 + 1) = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v1371 + 32))(v1371, 177, &v2027, 1, &v2046, 1, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
            v2037 = v1372;
            LODWORD(v2038) = 1;
            v1373 = *(unsigned __int16 *)(v430 + 44) | 0x100000000;
            v1374 = *(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v1371 + 32);
            v1375 = (unint64_t *)&v2031;
            v1376 = v1371;
            v1377 = 165;
LABEL_2369:
            v1378 = 2;
LABEL_2370:
            v1374(v1376, v1377, v1375, 1, __s1, v1378, v1373);
            goto LABEL_2371;
          }
          if (**(_WORD **)(v430 + 16) != 166)
          {
LABEL_2379:
            if ((v164 & 0x80000000) != 0)
              v1380 = (uint64_t *)(*(_QWORD *)(v161 + 24) + 16 * (v164 & 0x7FFFFFFF) + 8);
            else
              v1380 = (uint64_t *)(*(_QWORD *)(v161 + 272) + 8 * v164);
            v1381 = *v1380;
            if (v1381
              && ((*(_BYTE *)(v1381 + 3) & 1) != 0
               || (v1381 = *(_QWORD *)(v1381 + 24)) != 0 && (*(_BYTE *)(v1381 + 3) & 1) != 0)
              && (v1710 = *(_QWORD *)(v1381 + 8)) != 0
              && **(_WORD **)(v1710 + 16) == 178
              && *(_DWORD *)(v1710 + 40) == 2
              && ((v1711 = *(unsigned int *)(*(_QWORD *)(v1710 + 32) + 36), (v1711 & 0x80000000) != 0)
                ? (v1712 = (uint64_t *)(*(_QWORD *)(v161 + 24) + 16 * (v1711 & 0x7FFFFFFF) + 8))
                : (v1712 = (uint64_t *)(*(_QWORD *)(v161 + 272) + 8 * v1711)),
                  (v1800 = *v1712) != 0
               && ((*(_BYTE *)(v1800 + 3) & 1) != 0
                || (v1800 = *(_QWORD *)(v1800 + 24)) != 0 && (*(_BYTE *)(v1800 + 3) & 1) != 0)
               && (v1928 = *(_QWORD *)(v1800 + 8)) != 0))
            {
              if ((v1711 & 0x80000000) != 0)
                v1929 = (uint64_t *)(*(_QWORD *)(v161 + 24) + 16 * (v1711 & 0x7FFFFFFF) + 8);
              else
                v1929 = (uint64_t *)(*(_QWORD *)(v161 + 272) + 8 * v1711);
              v1949 = *v1929;
              if (v1949
                && ((*(_BYTE *)(v1949 + 3) & 1) != 0
                 || (v1949 = *(_QWORD *)(v1949 + 24)) != 0 && (*(_BYTE *)(v1949 + 3) & 1) != 0)
                && (v1950 = *(_QWORD *)(v1949 + 8)) != 0
                && **(_WORD **)(v1950 + 16) == 177
                && *(_DWORD *)(v1950 + 40) == 2)
              {
                v1951 = *(_DWORD *)(*(_QWORD *)(v1950 + 32) + 36);
                v1376 = *(_QWORD *)v3;
                LODWORD(v2046) = v163;
                LODWORD(v2047) = 1;
                LODWORD(__s1[0]) = v1951;
                LODWORD(v2036) = 0;
                v1374 = *(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v1376 + 32);
                v1375 = &v2046;
              }
              else
              {
                v1956 = *(_QWORD *)v3;
                LODWORD(v2031) = v163;
                LODWORD(v2032) = 1;
                if ((v1711 & 0x80000000) != 0 && (v1711 & 0x7FFFFFFF) < *(_DWORD *)(v161 + 432))
                  v1957 = *(_QWORD *)(*(_QWORD *)(v161 + 424) + 8 * (v1711 & 0x7FFFFFFF));
                else
                  v1957 = 0;
                *(_QWORD *)&v2027 = v1957;
                DWORD2(v2027) = 0;
                LODWORD(v2046) = v1711;
                DWORD2(v2047) = 0;
                __s1[0] = (void *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v1956 + 32))(v1956, 177, &v2027, 1, &v2046, 1, *(unsigned __int16 *)(v1928 + 44) | 0x100000000);
                __s1[1] = v1965;
                LODWORD(v2036) = 1;
                v1374 = *(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v1956 + 32);
                v1375 = (unint64_t *)&v2031;
                v1376 = v1956;
              }
              v1377 = 178;
            }
            else
            {
              if ((v164 & 0x80000000) != 0)
                v1382 = (uint64_t *)(*(_QWORD *)(v161 + 24) + 16 * (v164 & 0x7FFFFFFF) + 8);
              else
                v1382 = (uint64_t *)(*(_QWORD *)(v161 + 272) + 8 * v164);
              v1383 = *v1382;
              if (!v1383)
                return sub_1C6037A10((uint64_t *)v3, a2);
              v1384 = (uint64_t *)v3;
              if ((*(_BYTE *)(v1383 + 3) & 1) == 0)
              {
                v1383 = *(_QWORD *)(v1383 + 24);
                if (!v1383 || (*(_BYTE *)(v1383 + 3) & 1) == 0)
                  return sub_1C6037A10((uint64_t *)v3, a2);
              }
              v1707 = *(_QWORD *)(v1383 + 8);
              if (!v1707 || **(_WORD **)(v1707 + 16) != 179 || *(_DWORD *)(v1707 + 40) != 2)
                return sub_1C6037A10((uint64_t *)v3, a2);
              v1708 = *(unsigned int *)(*(_QWORD *)(v1707 + 32) + 36);
              v1709 = (uint64_t *)((v1708 & 0x80000000) != 0
                                ? *(_QWORD *)(v161 + 24) + 16 * (v1708 & 0x7FFFFFFF) + 8
                                : *(_QWORD *)(v161 + 272) + 8 * v1708);
              v1799 = *v1709;
              if (!v1799)
                return sub_1C6037A10((uint64_t *)v3, a2);
              if ((*(_BYTE *)(v1799 + 3) & 1) == 0)
              {
                v1799 = *(_QWORD *)(v1799 + 24);
                if (!v1799 || (*(_BYTE *)(v1799 + 3) & 1) == 0)
                  return sub_1C6037A10((uint64_t *)v3, a2);
              }
              v1926 = *(_QWORD *)(v1799 + 8);
              if (!v1926)
                return sub_1C6037A10((uint64_t *)v3, a2);
              if ((v1708 & 0x80000000) != 0)
                v1927 = (uint64_t *)(*(_QWORD *)(v161 + 24) + 16 * (v1708 & 0x7FFFFFFF) + 8);
              else
                v1927 = (uint64_t *)(*(_QWORD *)(v161 + 272) + 8 * v1708);
              v1946 = *v1927;
              if (v1946
                && ((*(_BYTE *)(v1946 + 3) & 1) != 0
                 || (v1946 = *(_QWORD *)(v1946 + 24)) != 0 && (*(_BYTE *)(v1946 + 3) & 1) != 0)
                && (v1947 = *(_QWORD *)(v1946 + 8)) != 0
                && **(_WORD **)(v1947 + 16) == 177
                && *(_DWORD *)(v1947 + 40) == 2)
              {
                v1948 = *(_DWORD *)(*(_QWORD *)(v1947 + 32) + 36);
                v1376 = *(_QWORD *)v3;
                LODWORD(v2046) = v163;
                LODWORD(v2047) = 1;
                LODWORD(__s1[0]) = v1948;
                LODWORD(v2036) = 0;
                v1374 = *(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v1376 + 32);
                v1375 = &v2046;
              }
              else
              {
                if ((sub_1C4998998(v163, v161) & 1) != 0)
                  return sub_1C6037A10((uint64_t *)v3, a2);
                v1955 = (uint64_t *)((v164 & 0x80000000) != 0
                                  ? *(_QWORD *)(v161 + 24) + 16 * (v164 & 0x7FFFFFFF) + 8
                                  : *(_QWORD *)(v161 + 272) + 8 * v164);
                v1962 = *v1955;
                if (!v1962)
                  return sub_1C6037A10((uint64_t *)v3, a2);
                while ((*(_BYTE *)(v1962 + 3) & 1) != 0)
                {
                  v1962 = *(_QWORD *)(v1962 + 24);
                  v3 = (uint64_t)v1384;
                  if (!v1962)
                    return sub_1C6037A10((uint64_t *)v3, a2);
                }
                while (1)
                {
                  v1962 = *(_QWORD *)(v1962 + 24);
                  if (!v1962)
                    break;
                  v3 = (uint64_t)v1384;
                  if ((*(_BYTE *)(v1962 + 3) & 1) == 0)
                    return sub_1C6037A10((uint64_t *)v3, a2);
                }
                v1963 = *v1384;
                LODWORD(v2031) = v163;
                LODWORD(v2032) = 1;
                if ((v1708 & 0x80000000) != 0 && (v1708 & 0x7FFFFFFF) < *(_DWORD *)(v161 + 432))
                  v1964 = *(_QWORD *)(*(_QWORD *)(v161 + 424) + 8 * (v1708 & 0x7FFFFFFF));
                else
                  v1964 = 0;
                *(_QWORD *)&v2027 = v1964;
                DWORD2(v2027) = 0;
                LODWORD(v2046) = v1708;
                DWORD2(v2047) = 0;
                __s1[0] = (void *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v1963 + 32))(v1963, 177, &v2027, 1, &v2046, 1, *(unsigned __int16 *)(v1926 + 44) | 0x100000000);
                __s1[1] = v1967;
                LODWORD(v2036) = 1;
                v1374 = *(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v1963 + 32);
                v1375 = (unint64_t *)&v2031;
                v1376 = v1963;
              }
              v1377 = 179;
            }
            v1373 = 0;
            v1378 = 1;
            goto LABEL_2370;
          }
          if ((v164 & 0x80000000) != 0)
            v1379 = (uint64_t *)(*(_QWORD *)(v161 + 24) + 16 * (v164 & 0x7FFFFFFF) + 8);
          else
            v1379 = (uint64_t *)(*(_QWORD *)(v161 + 272) + 8 * v164);
          v1385 = *v1379;
          if (!v1385)
            return sub_1C6037A10((uint64_t *)v3, a2);
          while ((*(_BYTE *)(v1385 + 3) & 1) != 0)
          {
            v1385 = *(_QWORD *)(v1385 + 24);
            if (!v1385)
              return sub_1C6037A10((uint64_t *)v3, a2);
          }
          while (1)
          {
            v1385 = *(_QWORD *)(v1385 + 24);
            if (!v1385)
              break;
            if ((*(_BYTE *)(v1385 + 3) & 1) == 0)
              return sub_1C6037A10((uint64_t *)v3, a2);
          }
          v1386 = *(_QWORD *)v3;
          LODWORD(v2027) = v163;
          DWORD2(v2027) = 1;
          v1387 = *(_QWORD *)(v430 + 32);
          LODWORD(__s1[0]) = *(_DWORD *)(v1387 + 36);
          LODWORD(v2036) = 0;
          *(_QWORD *)&v2023 = v431;
          DWORD2(v2023) = 0;
          LODWORD(v2046) = *(_DWORD *)(v1387 + 68);
          DWORD2(v2047) = 0;
          *((_QWORD *)&v2036 + 1) = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v1386 + 32))(v1386, 177, &v2023, 1, &v2046, 1, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
          v2037 = v1388;
          LODWORD(v2038) = 1;
          v1389 = *(_QWORD *)v3;
          v2018 = v431;
          LODWORD(v2019) = 0;
          LODWORD(v2031) = *(_DWORD *)(*(_QWORD *)(v430 + 32) + 100);
          DWORD2(v2032) = 0;
          v2039 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v1389 + 32))(v1389, 177, &v2018, 1, &v2031, 1, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
          v2040 = v1390;
          *(_DWORD *)v2041 = 1;
          (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v1386 + 32))(v1386, 166, &v2027, 1, __s1, 3, *(unsigned __int16 *)(v430 + 44) | 0x100000000);
LABEL_2371:
          v63 = *(_QWORD *)(a2 + 24);
          v64 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v64 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v64 = a2;
              do
                v64 = *(_QWORD *)(v64 + 8);
              while ((*(_WORD *)(v64 + 44) & 8) != 0);
            }
          }
          goto LABEL_2820;
        case 178:
          v206 = *(_QWORD *)v3;
          *(_QWORD *)(v206 + 40) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(v206 + 48) = a2;
          v207 = *(_QWORD *)(a2 + 32);
          v208 = *(_DWORD *)(v207 + 4);
          if ((v208 & 0x80000000) == 0)
            return sub_1C6037A10((uint64_t *)v3, a2);
          v209 = *(_QWORD *)v3;
          v210 = *(_QWORD *)(*(_QWORD *)v3 + 8);
          v211 = *(_QWORD *)(v210 + 40);
          v212 = v208 & 0x7FFFFFFF;
          if ((v208 & 0x7FFFFFFFu) >= *(_DWORD *)(v211 + 432)
            || *(_QWORD *)(*(_QWORD *)(v211 + 424) + 8 * v212) != 257)
          {
            return sub_1C6037A10((uint64_t *)v3, a2);
          }
          v213 = *(unsigned int *)(v207 + 36);
          v214 = *(_QWORD *)(v211 + 24);
          v215 = (uint64_t *)(v214 + 16 * (v213 & 0x7FFFFFFF) + 8);
          v216 = *(_QWORD *)(v211 + 272);
          if ((int)v213 >= 0)
            v215 = (uint64_t *)(v216 + 8 * v213);
          v217 = *v215;
          v218 = v217;
          if ((*(_BYTE *)(v217 + 3) & 1) == 0)
            v218 = *(_QWORD *)(v217 + 24);
          v1990 = *(_WORD *)(*(_QWORD *)(v210 + 8) + 1020);
          v219 = *(_QWORD *)(v218 + 8);
          if (**(_WORD **)(v219 + 16) == 121)
          {
            v983 = *(_QWORD *)(*(_QWORD *)(v219 + 32) + 48);
            if (v983)
            {
              v984 = *(_QWORD *)(v983 + 32);
              if ((_UNKNOWN *)v984 == &unk_1C866F1C0)
              {
                llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&__s1[1], (const llvm::detail::DoubleAPFloat *)(v983 + 32));
              }
              else
              {
                __s1[1] = *(void **)(v983 + 32);
                if ((*(_DWORD *)(v984 + 8) + 64) >= 0x80)
                {
                  a1 = operator new[]();
                  *(_QWORD *)&v2036 = a1;
                }
                v985 = *(_BYTE *)(v983 + 52);
                v986 = v985 & 7;
                BYTE12(v2036) = v985 & 0xF;
                DWORD2(v2036) = *(_DWORD *)(v983 + 48);
                v988 = (v985 & 6) != 0 && v986 != 3;
                if (v986 == 1 || v988)
                {
                  v990 = *(unsigned int *)(v984 + 8);
                  if ((v990 - 64) <= 0xFFFFFF7F)
                    v991 = (__int128 *)a1;
                  else
                    v991 = &v2036;
                  v994 = *(uint64_t **)(v983 + 40);
                  v993 = (uint64_t *)(v983 + 40);
                  v992 = v994;
                  if ((*(_DWORD *)(*(v993 - 1) + 8) - 64) >= 0xFFFFFF80)
                    v992 = v993;
                  if (v990 <= 0xFFFFFFBF)
                  {
                    v995 = (unint64_t)(v990 + 64) >> 6;
                    do
                    {
                      v996 = *v992++;
                      *(_QWORD *)v991 = v996;
                      v991 = (__int128 *)((char *)v991 + 8);
                      --v995;
                    }
                    while (v995);
                  }
                }
              }
              v997 = ***(llvm::ConstantFP ****)v210;
              llvm::APFloat::convert((uint64_t)__s1, &unk_1C866F184, 1, &v2031);
              v998 = *(_QWORD *)v3;
              LODWORD(v2046) = v208;
              LODWORD(v2047) = 1;
              v1000 = llvm::ConstantFP::get(v997, (llvm::LLVMContext *)__s1, v999);
              (*(void (**)(uint64_t, unint64_t *, llvm::APFloatBase *))(*(_QWORD *)v998 + 24))(v998, &v2046, v1000);
              v1001 = a2;
              if ((*(_BYTE *)a2 & 4) == 0)
              {
                v1001 = a2;
                if ((*(_WORD *)(a2 + 44) & 8) != 0)
                {
                  v1001 = a2;
                  do
                    v1001 = *(_QWORD *)(v1001 + 8);
                  while ((*(_WORD *)(v1001 + 44) & 8) != 0);
                }
              }
              sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v1001 + 8));
              v1002 = __s1[1];
              if (__s1[1] != &unk_1C866F1C0)
                goto LABEL_2339;
              goto LABEL_1528;
            }
          }
          LODWORD(v2023) = 0;
          if ((*(_BYTE *)(v217 + 3) & 1) == 0)
          {
            v217 = *(_QWORD *)(v217 + 24);
            if (!v217 || (*(_BYTE *)(v217 + 3) & 1) == 0)
              goto LABEL_204;
          }
          v220 = *(_QWORD *)(v217 + 8);
          if (!v220 || **(_WORD **)(v220 + 16) != 179 || *(_DWORD *)(v220 + 40) != 2)
            goto LABEL_204;
          LODWORD(v2023) = *(_DWORD *)(*(_QWORD *)(v220 + 32) + 36);
          v221 = (uint64_t *)(v216 + 8 * v2023);
          if ((int)v2023 < 0)
            v221 = (uint64_t *)(v214 + 16 * (v2023 & 0x7FFFFFFF) + 8);
          v222 = *v221;
          if (!v222)
            goto LABEL_204;
          if ((*(_BYTE *)(v222 + 3) & 1) == 0)
          {
            v222 = *(_QWORD *)(v222 + 24);
            if (!v222 || (*(_BYTE *)(v222 + 3) & 1) == 0)
              goto LABEL_204;
          }
          v1774 = *(_QWORD *)(v222 + 8);
          if (!v1774)
            goto LABEL_204;
          if (**(_WORD **)(v1774 + 16) == 318)
            goto LABEL_3286;
          v1804 = *(_QWORD *)(v214 + 16 * v212 + 8);
          if (!v1804)
            goto LABEL_3285;
          while ((*(_BYTE *)(v1804 + 3) & 1) != 0)
          {
            v1804 = *(_QWORD *)(v1804 + 24);
            if (!v1804)
              goto LABEL_3285;
          }
          v1807 = *(_QWORD *)(v1804 + 8);
LABEL_3308:
          v1808 = **(unsigned __int16 **)(v1807 + 16);
          if (v1808 > 0x104)
          {
            v1810 = v1808 - 314;
            if (v1810 > 0x2A)
              goto LABEL_3323;
            if (((1 << (v1808 - 58)) & 0x40000200003) != 0)
              goto LABEL_3324;
            if (v1810 != 22)
            {
LABEL_3323:
              if (v1808 == 261)
                goto LABEL_3324;
              goto LABEL_3286;
            }
          }
          else
          {
            if (v1808 - 163 <= 0x38 && ((1 << (v1808 + 93)) & 0x18800000038540DLL) != 0)
            {
LABEL_3324:
              while (1)
              {
                v1804 = *(_QWORD *)(v1804 + 24);
                if (!v1804)
                  break;
                if ((*(_BYTE *)(v1804 + 3) & 1) == 0 && *(_QWORD *)(v1804 + 8) != v1807)
                {
                  v1807 = *(_QWORD *)(v1804 + 8);
                  goto LABEL_3308;
                }
              }
LABEL_3285:
              if ((sub_1C49A5320(v2023, v211, 1u, 0) & 1) != 0)
              {
LABEL_204:
                v2031 = 0;
                __s1[0] = &v2023;
                __s1[1] = &v2023;
                *(_QWORD *)&v2036 = &v2031;
                LODWORD(v2046) = v213;
                if (!sub_1C49BCCD0((uint64_t)__s1, v211, (unsigned int *)&v2046))
                  goto LABEL_1399;
                v223 = v2023;
                v224 = (uint64_t *)((v2023 & 0x80000000) != 0
                                 ? *(_QWORD *)(v211 + 24) + 16 * (v2023 & 0x7FFFFFFF) + 8
                                 : *(_QWORD *)(v211 + 272) + 8 * (unint64_t)v2023);
                v927 = *v224;
                if (!v927)
                  goto LABEL_1399;
                if ((*(_BYTE *)(v927 + 3) & 1) == 0)
                {
                  v927 = *(_QWORD *)(v927 + 24);
                  if (!v927 || (*(_BYTE *)(v927 + 3) & 1) == 0)
                    goto LABEL_1399;
                }
                v1706 = *(_QWORD *)(v927 + 8);
                if (!v1706)
                  goto LABEL_1399;
                if (**(_WORD **)(v1706 + 16) == 318)
                {
LABEL_3151:
                  if ((v1990 & 1) != 0)
                  {
                    v1749 = *((unsigned __int16 *)v2031 + 22);
                    v1750 = *(_QWORD *)v3;
                    v1751 = **((unsigned __int16 **)v2031 + 2);
                    LODWORD(v2046) = v208;
                    LODWORD(v2047) = 1;
                    LODWORD(__s1[0]) = v223;
                    LODWORD(v2036) = 0;
                    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v1750 + 32))(v1750, v1751, &v2046, 1, __s1, 1, v1749 | 0x100000000);
                    v63 = *(_QWORD *)(a2 + 24);
                    v64 = a2;
                    if ((*(_BYTE *)a2 & 4) == 0)
                    {
                      v64 = a2;
                      if ((*(_WORD *)(a2 + 44) & 8) != 0)
                      {
                        v64 = a2;
                        do
                          v64 = *(_QWORD *)(v64 + 8);
                        while ((*(_WORD *)(v64 + 44) & 8) != 0);
                      }
                    }
                    goto LABEL_2820;
                  }
LABEL_1399:
                  if ((v213 & 0x80000000) != 0)
                    v928 = (uint64_t *)(*(_QWORD *)(v211 + 24) + 16 * (v213 & 0x7FFFFFFF) + 8);
                  else
                    v928 = (uint64_t *)(*(_QWORD *)(v211 + 272) + 8 * v213);
                  v929 = *v928;
                  if ((*(_BYTE *)(v929 + 3) & 1) == 0)
                    v929 = *(_QWORD *)(v929 + 24);
                  v930 = *(_QWORD *)(v929 + 8);
                  v931 = **(unsigned __int16 **)(v930 + 16);
                  if ((v931 & 0xFFFE) != 0xB6)
                    return sub_1C6037A10((uint64_t *)v3, a2);
                  v932 = *(_DWORD *)(*(_QWORD *)(v930 + 32) + 36);
                  if (v932 < 0 && (v932 & 0x7FFFFFFFu) < *(_DWORD *)(v211 + 432))
                    v933 = *(_QWORD *)(*(_QWORD *)(v211 + 424) + 8 * (v932 & 0x7FFFFFFF));
                  else
                    v933 = 0;
                  *(_QWORD *)&v2027 = v933;
                  if ((v1990 & 1) == 0)
                  {
                    v935 = sub_1C4825F50((unint64_t *)&v2027);
                    if ((_DWORD)v934 == 1)
                    if (v935 != 8)
                      return sub_1C6037A10((uint64_t *)v3, a2);
                    v932 = *(_DWORD *)(*(_QWORD *)(v930 + 32) + 36);
                  }
                  v936 = *(_QWORD *)v3;
                  LODWORD(v2046) = v208;
                  LODWORD(v2047) = 1;
                  LODWORD(__s1[0]) = v932;
                  LODWORD(v2036) = 0;
                  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v936 + 32))(v936, v931, &v2046, 1, __s1, 1, 0);
                  v63 = *(_QWORD *)(a2 + 24);
                  v64 = a2;
                  if ((*(_BYTE *)a2 & 4) == 0)
                  {
                    v64 = a2;
                    if ((*(_WORD *)(a2 + 44) & 8) != 0)
                    {
                      v64 = a2;
                      do
                        v64 = *(_QWORD *)(v64 + 8);
                      while ((*(_WORD *)(v64 + 44) & 8) != 0);
                    }
                  }
                  goto LABEL_2820;
                }
                v1748 = *(_QWORD *)(*(_QWORD *)(v211 + 24) + 16 * v212 + 8);
                if (v1748)
                {
                  while ((*(_BYTE *)(v1748 + 3) & 1) != 0)
                  {
                    v1748 = *(_QWORD *)(v1748 + 24);
                    if (!v1748)
                      goto LABEL_3150;
                  }
                  v1781 = *(_QWORD *)(v1748 + 8);
LABEL_3212:
                  v1782 = **(unsigned __int16 **)(v1781 + 16);
                  if (v1782 > 0x104)
                  {
                    v1784 = v1782 - 314;
                    if (v1784 > 0x2A)
                      goto LABEL_3227;
                    if (((1 << (v1782 - 58)) & 0x40000200003) != 0)
                      goto LABEL_3228;
                    if (v1784 != 22)
                    {
LABEL_3227:
                      if (v1782 == 261)
                        goto LABEL_3228;
                      goto LABEL_3151;
                    }
                  }
                  else
                  {
                    if (v1782 - 163 <= 0x38 && ((1 << (v1782 + 93)) & 0x18800000038540DLL) != 0)
                    {
LABEL_3228:
                      while (1)
                      {
                        v1748 = *(_QWORD *)(v1748 + 24);
                        if (!v1748)
                          goto LABEL_3150;
                        if ((*(_BYTE *)(v1748 + 3) & 1) == 0 && *(_QWORD *)(v1748 + 8) != v1781)
                        {
                          v1781 = *(_QWORD *)(v1748 + 8);
                          goto LABEL_3212;
                        }
                      }
                    }
                    if (v1782 != 51)
                    {
                      if (v1782 == 85)
                        goto LABEL_3228;
                      goto LABEL_3151;
                    }
                  }
                  v1785 = *(_QWORD *)(v1781 + 32);
                  if (*(_DWORD *)(v1785 + 132) != v208 && *(_DWORD *)(v1785 + 164) != v208)
                    goto LABEL_3228;
                  goto LABEL_3151;
                }
LABEL_3150:
                if ((sub_1C49A5320(v2023, v211, 1u, 0) & 1) != 0)
                  goto LABEL_1399;
                goto LABEL_3151;
              }
LABEL_3286:
              if ((v1990 & 1) != 0)
              {
                LODWORD(v2046) = v208;
                LODWORD(v2047) = 1;
                LODWORD(__s1[0]) = v2023;
                LODWORD(v2036) = 0;
                (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v209 + 32))(v209, 19, &v2046, 1, __s1, 1, 0);
                v63 = *(_QWORD *)(a2 + 24);
                v64 = a2;
                if ((*(_BYTE *)a2 & 4) == 0)
                {
                  v64 = a2;
                  if ((*(_WORD *)(a2 + 44) & 8) != 0)
                  {
                    v64 = a2;
                    do
                      v64 = *(_QWORD *)(v64 + 8);
                    while ((*(_WORD *)(v64 + 44) & 8) != 0);
                  }
                }
                goto LABEL_2820;
              }
              goto LABEL_204;
            }
            if (v1808 != 51)
            {
              if (v1808 == 85)
                goto LABEL_3324;
              goto LABEL_3286;
            }
          }
          v1811 = *(_QWORD *)(v1807 + 32);
          if (*(_DWORD *)(v1811 + 132) != v208 && *(_DWORD *)(v1811 + 164) != v208)
            goto LABEL_3324;
          goto LABEL_3286;
        case 179:
          v197 = *(_QWORD *)v3;
          *(_QWORD *)(v197 + 40) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(v197 + 48) = a2;
          v198 = *(_QWORD *)(a2 + 32);
          v199 = *(_DWORD *)(v198 + 4);
          if ((v199 & 0x80000000) == 0)
            return sub_1C6037A10((uint64_t *)v3, a2);
          v200 = *(_QWORD *)(*(_QWORD *)v3 + 8);
          v201 = *(_QWORD *)(v200 + 40);
          if ((v199 & 0x7FFFFFFFu) >= *(_DWORD *)(v201 + 432)
            || *(_QWORD *)(*(_QWORD *)(v201 + 424) + 8 * (v199 & 0x7FFFFFFF)) != 129)
          {
            return sub_1C6037A10((uint64_t *)v3, a2);
          }
          v202 = *(unsigned int *)(v198 + 36);
          sub_1C49A4E60((uint64_t)__s1, 179, 129, *(_DWORD *)(v198 + 36), *(_QWORD *)(v201 + 24), *(_QWORD *)(v201 + 272));
          if ((_BYTE)v2037)
          {
            v204 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v200, (llvm::LLVMContext *)__s1, v203);
            v205 = *(_QWORD *)v3;
            LODWORD(v2046) = v199;
            LODWORD(v2047) = 1;
            (*(void (**)(uint64_t, unint64_t *, llvm::APFloatBase *))(*(_QWORD *)v205 + 24))(v205, &v2046, v204);
            v48 = *(_QWORD *)(a2 + 24);
            v49 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v49 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v49 = a2;
                do
                  v49 = *(_QWORD *)(v49 + 8);
                while ((*(_WORD *)(v49 + 44) & 8) != 0);
              }
            }
            goto LABEL_2337;
          }
          if ((v202 & 0x80000000) != 0)
            v884 = (uint64_t *)(*(_QWORD *)(v201 + 24) + 16 * (v202 & 0x7FFFFFFF) + 8);
          else
            v884 = (uint64_t *)(*(_QWORD *)(v201 + 272) + 8 * v202);
          v941 = *v884;
          if ((*(_BYTE *)(v941 + 3) & 1) == 0)
            v941 = *(_QWORD *)(v941 + 24);
          v942 = *(_QWORD *)(v941 + 8);
          if ((v202 & 0x80000000) != 0)
            v943 = (uint64_t *)(*(_QWORD *)(v201 + 24) + 16 * (v202 & 0x7FFFFFFF) + 8);
          else
            v943 = (uint64_t *)(*(_QWORD *)(v201 + 272) + 8 * v202);
          v944 = **(unsigned __int16 **)(v942 + 16);
          v945 = *v943;
          if (*v943)
          {
            if ((*(_BYTE *)(v945 + 3) & 1) != 0
              || (v945 = *(_QWORD *)(v945 + 24)) != 0 && (*(_BYTE *)(v945 + 3) & 1) != 0)
            {
              v1659 = *(_QWORD *)(v945 + 8);
              if (v1659)
              {
                if (**(_WORD **)(v1659 + 16) == 178 && *(_DWORD *)(v1659 + 40) == 2)
                {
                  v1660 = *(_DWORD *)(*(_QWORD *)(v1659 + 32) + 36);
                  if (v1660 < 0
                    && (v1660 & 0x7FFFFFFFu) < *(_DWORD *)(v201 + 432)
                    && *(_QWORD *)(*(_QWORD *)(v201 + 424) + 8 * (v1660 & 0x7FFFFFFF)) == 129)
                  {
                    v1661 = *(_QWORD *)v3;
                    LODWORD(v2046) = v199;
                    LODWORD(v2047) = 1;
                    LODWORD(__s1[0]) = v1660;
                    LODWORD(v2036) = 0;
                    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v1661 + 32))(v1661, 19, &v2046, 1, __s1, 1, 0);
                    v63 = *(_QWORD *)(a2 + 24);
                    v64 = a2;
                    if ((*(_BYTE *)a2 & 4) == 0)
                    {
                      v64 = a2;
                      if ((*(_WORD *)(a2 + 44) & 8) != 0)
                      {
                        v64 = a2;
                        do
                          v64 = *(_QWORD *)(v64 + 8);
                        while ((*(_WORD *)(v64 + 44) & 8) != 0);
                      }
                    }
                    goto LABEL_2820;
                  }
                }
              }
            }
          }
          if ((v202 & 0x80000000) != 0)
            v946 = (uint64_t *)(*(_QWORD *)(v201 + 24) + 16 * (v202 & 0x7FFFFFFF) + 8);
          else
            v946 = (uint64_t *)(*(_QWORD *)(v201 + 272) + 8 * v202);
          v947 = *v946;
          if (!v947)
            return sub_1C6037A10((uint64_t *)v3, a2);
          while ((*(_BYTE *)(v947 + 3) & 1) != 0)
          {
            v947 = *(_QWORD *)(v947 + 24);
            if (!v947)
              return sub_1C6037A10((uint64_t *)v3, a2);
          }
          while (1)
          {
            v947 = *(_QWORD *)(v947 + 24);
            if (!v947)
              break;
            if ((*(_BYTE *)(v947 + 3) & 1) == 0)
              return sub_1C6037A10((uint64_t *)v3, a2);
          }
          v948 = v944 & 0xFFFE;
          if (v948 == 284)
          {
            v1031 = *(_QWORD *)v3;
            LODWORD(__s1[0]) = v199;
            LODWORD(__s1[1]) = 1;
            v1032 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v1031 + 32))(v1031, v944, __s1, 1, 0, 0, 0);
            v1034 = v1033;
            llvm::MachineInstr::addOperand(v1033, v1032, (const llvm::MachineOperand *)(*(_QWORD *)(v942 + 32) + 32));
            llvm::MachineInstr::addOperand(v1034, v1032, (const llvm::MachineOperand *)(*(_QWORD *)(v942 + 32) + 64));
            llvm::MachineInstr::addOperand(v1034, v1032, (const llvm::MachineOperand *)(*(_QWORD *)(v942 + 32) + 96));
            llvm::MachineInstr::addOperand(v1034, v1032, (const llvm::MachineOperand *)(*(_QWORD *)(v942 + 32) + 128));
            llvm::MachineInstr::addOperand(v1034, v1032, (const llvm::MachineOperand *)(*(_QWORD *)(v942 + 32) + 160));
            v63 = *(_QWORD *)(a2 + 24);
            v64 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v64 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v64 = a2;
                do
                  v64 = *(_QWORD *)(v64 + 8);
                while ((*(_WORD *)(v64 + 44) & 8) != 0);
              }
            }
            goto LABEL_2820;
          }
          if (v948 == 286)
          {
            v949 = *(_QWORD *)v3;
            LODWORD(__s1[0]) = v199;
            LODWORD(__s1[1]) = 1;
            v950 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v949 + 32))(v949, v944, __s1, 1, 0, 0, 0);
            v952 = v951;
            llvm::MachineInstr::addOperand(v951, v950, (const llvm::MachineOperand *)(*(_QWORD *)(v942 + 32) + 32));
            llvm::MachineInstr::addOperand(v952, v950, (const llvm::MachineOperand *)(*(_QWORD *)(v942 + 32) + 64));
            llvm::MachineInstr::addOperand(v952, v950, (const llvm::MachineOperand *)(*(_QWORD *)(v942 + 32) + 96));
            llvm::MachineInstr::addOperand(v952, v950, (const llvm::MachineOperand *)(*(_QWORD *)(v942 + 32) + 128));
            v63 = *(_QWORD *)(a2 + 24);
            v64 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v64 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v64 = a2;
                do
                  v64 = *(_QWORD *)(v64 + 8);
                while ((*(_WORD *)(v64 + 44) & 8) != 0);
              }
            }
            goto LABEL_2820;
          }
          if (**(unsigned __int16 **)(v942 + 16) > 0x139u)
          {
            if ((v944 - 314) < 2)
              goto LABEL_1689;
            if ((_DWORD)v944 != 336)
            {
              if ((_DWORD)v944 == 335)
                goto LABEL_1689;
              goto LABEL_1902;
            }
          }
          else
          {
            if (**(unsigned __int16 **)(v942 + 16) > 0xAEu)
            {
              if ((_DWORD)v944 != 175)
              {
                if (((_DWORD)v944 == 177 || (_DWORD)v944 == 184) && sub_1C4998998(v199, v201))
                {
                  v1078 = *(_QWORD *)v3;
                  v2046 = 129;
                  LODWORD(v2047) = 0;
                  LODWORD(__s1[0]) = *(_DWORD *)(*(_QWORD *)(v942 + 32) + 36);
                  LODWORD(v2036) = 0;
                  v1079 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v1078 + 32))(v1078, 179, &v2046, 1, __s1, 1, *(unsigned __int16 *)(v942 + 44) | 0x100000000);
                  v1080 = *(_QWORD *)v3;
                  LODWORD(v2046) = v199;
                  LODWORD(v2047) = 1;
                  __s1[0] = v1079;
                  __s1[1] = v1081;
                  LODWORD(v2036) = 1;
                  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v1080 + 32))(v1080, v944, &v2046, 1, __s1, 1, 0);
                  v63 = *(_QWORD *)(a2 + 24);
                  v64 = a2;
                  if ((*(_BYTE *)a2 & 4) == 0)
                  {
                    v64 = a2;
                    if ((*(_WORD *)(a2 + 44) & 8) != 0)
                    {
                      v64 = a2;
                      do
                        v64 = *(_QWORD *)(v64 + 8);
                      while ((*(_WORD *)(v64 + 44) & 8) != 0);
                    }
                  }
                  goto LABEL_2820;
                }
                goto LABEL_1902;
              }
LABEL_1689:
              v1075 = *(unsigned int *)(*(_QWORD *)(v942 + 32) + 36);
              if ((v1075 & 0x80000000) != 0)
                v1076 = (uint64_t *)(*(_QWORD *)(v201 + 24) + 16 * (v1075 & 0x7FFFFFFF) + 8);
              else
                v1076 = (uint64_t *)(*(_QWORD *)(v201 + 272) + 8 * v1075);
              v1077 = *v1076;
              if (v1077)
              {
                if ((*(_BYTE *)(v1077 + 3) & 1) != 0
                  || (v1077 = *(_QWORD *)(v1077 + 24)) != 0 && (*(_BYTE *)(v1077 + 3) & 1) != 0)
                {
                  v1801 = *(_QWORD *)(v1077 + 8);
                  if (v1801)
                  {
                    if (**(_WORD **)(v1801 + 16) == 178 && *(_DWORD *)(v1801 + 40) == 2)
                    {
                      v1802 = *(_DWORD *)(*(_QWORD *)(v1801 + 32) + 36);
                      v1803 = *(_QWORD *)v3;
                      LODWORD(v2046) = v199;
                      LODWORD(v2047) = 1;
                      LODWORD(__s1[0]) = v1802;
                      LODWORD(v2036) = 0;
                      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v1803 + 32))(v1803, v944, &v2046, 1, __s1, 1, *(unsigned __int16 *)(v942 + 44) | 0x100000000);
                      v63 = *(_QWORD *)(a2 + 24);
                      v64 = a2;
                      if ((*(_BYTE *)a2 & 4) == 0)
                      {
                        v64 = a2;
                        if ((*(_WORD *)(a2 + 44) & 8) != 0)
                        {
                          v64 = a2;
                          do
                            v64 = *(_QWORD *)(v64 + 8);
                          while ((*(_WORD *)(v64 + 44) & 8) != 0);
                        }
                      }
                      goto LABEL_2820;
                    }
                  }
                }
              }
              goto LABEL_1902;
            }
            if ((_DWORD)v944 != 51)
            {
              if ((_DWORD)v944 == 173)
                goto LABEL_1689;
LABEL_1902:
              if (v948 != 182)
                return sub_1C6037A10((uint64_t *)v3, a2);
              v1192 = *(_QWORD *)v3;
              LODWORD(v2046) = v199;
              LODWORD(v2047) = 1;
              LODWORD(__s1[0]) = *(_DWORD *)(*(_QWORD *)(v942 + 32) + 36);
              LODWORD(v2036) = 0;
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v1192 + 32))(v1192, v944, &v2046, 1, __s1, 1, 0);
              v63 = *(_QWORD *)(a2 + 24);
              v64 = a2;
              if ((*(_BYTE *)a2 & 4) == 0)
              {
                v64 = a2;
                if ((*(_WORD *)(a2 + 44) & 8) != 0)
                {
                  v64 = a2;
                  do
                    v64 = *(_QWORD *)(v64 + 8);
                  while ((*(_WORD *)(v64 + 44) & 8) != 0);
                }
              }
              goto LABEL_2820;
            }
          }
          v1082 = *(_DWORD **)(v942 + 32);
          v1986 = v1082[17];
          v1980 = v1082[25];
          v1083 = v1082[33];
          v1995 = v1082[41];
          if (sub_1C49A557C(v202, v201))
            v1084 = 2;
          else
            v1084 = 1;
          v1974 = v1084;
          v1085 = *(_WORD *)(*(_QWORD *)(v200 + 8) + 1020);
          if ((_DWORD)v944 == 51)
            v1086 = v1085 & 1 | ((~*(unsigned __int16 *)(v942 + 44) & 0x7C0) == 0);
          else
            v1086 = *(_WORD *)(v942 + 44) & 0x10 | v1085 & 1;
          if ((v1083 & 0x80000000) != 0)
            v1101 = (uint64_t *)(*(_QWORD *)(v201 + 24) + 16 * (v1083 & 0x7FFFFFFF) + 8);
          else
            v1101 = (uint64_t *)(*(_QWORD *)(v201 + 272) + 8 * v1083);
          v1102 = *v1101;
          if (v1102
            && ((*(_BYTE *)(v1102 + 3) & 1) != 0
             || (v1102 = *(_QWORD *)(v1102 + 24)) != 0 && (*(_BYTE *)(v1102 + 3) & 1) != 0))
          {
            v1103 = *(_QWORD *)(v1102 + 8);
          }
          else
          {
            v1103 = 0;
          }
          if ((v1995 & 0x80000000) != 0)
            v1104 = (uint64_t *)(*(_QWORD *)(v201 + 24) + 16 * (v1995 & 0x7FFFFFFF) + 8);
          else
            v1104 = (uint64_t *)(*(_QWORD *)(v201 + 272) + 8 * v1995);
          v1105 = *v1104;
          if (v1105
            && ((*(_BYTE *)(v1105 + 3) & 1) != 0
             || (v1105 = *(_QWORD *)(v1105 + 24)) != 0 && (*(_BYTE *)(v1105 + 3) & 1) != 0))
          {
            v1970 = *(_QWORD *)(v1105 + 8);
            if (!v1086)
              goto LABEL_1753;
          }
          else
          {
            v1970 = 0;
            if (!v1086)
              goto LABEL_1753;
          }
          if ((_DWORD)v1083 == v1986 && (_DWORD)v1995 == v1980 || (_DWORD)v1083 == v1980 && (_DWORD)v1995 == v1986)
          {
            v1106 = sub_1C49A5320(v1083, v201, 1u, 1);
            if (sub_1C49A5320(v1995, v201, 1u, 1) + v1106 >= v1974)
            {
              v1111 = *(_QWORD *)v3;
              v2046 = 129;
              LODWORD(v2047) = 0;
              LODWORD(__s1[0]) = v1986;
              LODWORD(v2036) = 0;
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v1111 + 32))(v1111, 179, &v2046, 1, __s1, 1, 0);
              v1986 = *(_DWORD *)(*(_QWORD *)(v1112 + 32) + 4);
              v1113 = *(_QWORD *)v3;
              v2046 = 129;
              LODWORD(v2047) = 0;
              LODWORD(__s1[0]) = v1980;
              LODWORD(v2036) = 0;
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v1113 + 32))(v1113, 179, &v2046, 1, __s1, 1, 0);
              v1980 = *(_DWORD *)(*(_QWORD *)(v1114 + 32) + 4);
              v1115 = *(_QWORD *)v3;
              v2046 = 129;
              LODWORD(v2047) = 0;
              LODWORD(__s1[0]) = v1083;
              LODWORD(v2036) = 0;
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v1115 + 32))(v1115, 179, &v2046, 1, __s1, 1, 0);
              v1117 = *(_DWORD *)(*(_QWORD *)(v1116 + 32) + 4);
              v1118 = *(_QWORD *)v3;
              v2046 = 129;
              goto LABEL_1909;
            }
          }
LABEL_1753:
          if (**(_WORD **)(v1103 + 16) == 177 && *(_DWORD *)(*(_QWORD *)(v1103 + 32) + 36) == (_DWORD)v1995)
          {
            v1107 = (uint64_t *)((v1083 & 0x80000000) != 0
                              ? *(_QWORD *)(v201 + 24) + 16 * (v1083 & 0x7FFFFFFF) + 8
                              : *(_QWORD *)(v201 + 272) + 8 * v1083);
            v1179 = *v1107;
            if (v1179)
            {
              while ((*(_BYTE *)(v1179 + 3) & 1) != 0)
              {
                v1179 = *(_QWORD *)(v1179 + 24);
                if (!v1179)
                  goto LABEL_1888;
              }
              while (1)
              {
                v1179 = *(_QWORD *)(v1179 + 24);
                if (!v1179)
                  break;
                if ((*(_BYTE *)(v1179 + 3) & 1) == 0)
                  goto LABEL_1888;
              }
              if (sub_1C49A5320(v1995, v201, 1u, 1))
              {
                v1180 = *(_QWORD *)v3;
                v2046 = 129;
                LODWORD(v2047) = 0;
                LODWORD(__s1[0]) = v1995;
                LODWORD(v2036) = 0;
                (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v1180 + 32))(v1180, 179, &v2046, 1, __s1, 1, 0);
                v1182 = *(_DWORD *)(*(_QWORD *)(v1181 + 32) + 4);
                v1183 = *(_QWORD *)v3;
                v2046 = 129;
                LODWORD(v2047) = 0;
                LODWORD(__s1[0]) = v1182;
                LODWORD(v2036) = 0;
                (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v1183 + 32))(v1183, 177, &v2046, 1, __s1, 1, *(unsigned __int16 *)(v942 + 44) | 0x100000000);
                v1117 = *(_DWORD *)(*(_QWORD *)(v1184 + 32) + 4);
LABEL_1911:
                v1196 = *(_DWORD *)(*(_QWORD *)(v942 + 32) + 48);
                v1197 = *(_QWORD *)v3;
                LODWORD(v2046) = v199;
                LODWORD(v2047) = 1;
                LODWORD(__s1[0]) = v1196;
                LODWORD(v2036) = 2;
                DWORD2(v2036) = v1986;
                LODWORD(v2038) = 0;
                LODWORD(v2039) = v1980;
                *(_DWORD *)v2041 = 0;
                *(_DWORD *)&v2041[8] = v1117;
                *(_DWORD *)v2042 = 0;
                *(_DWORD *)&v2042[8] = v1182;
                *(_DWORD *)&v2042[24] = 0;
                (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v1197 + 32))(v1197, v944, &v2046, 1, __s1, 5, *(unsigned __int16 *)(v942 + 44) | 0x100000000);
                v63 = *(_QWORD *)(a2 + 24);
                v64 = a2;
                if ((*(_BYTE *)a2 & 4) == 0)
                {
                  v64 = a2;
                  if ((*(_WORD *)(a2 + 44) & 8) != 0)
                  {
                    v64 = a2;
                    do
                      v64 = *(_QWORD *)(v64 + 8);
                    while ((*(_WORD *)(v64 + 44) & 8) != 0);
                  }
                }
                goto LABEL_2820;
              }
            }
          }
LABEL_1888:
          if (**(_WORD **)(v1970 + 16) == 177 && *(_DWORD *)(*(_QWORD *)(v1970 + 32) + 36) == (_DWORD)v1083)
          {
            v1185 = (uint64_t *)((v1995 & 0x80000000) != 0
                              ? *(_QWORD *)(v201 + 24) + 16 * (v1995 & 0x7FFFFFFF) + 8
                              : *(_QWORD *)(v201 + 272) + 8 * v1995);
            v1186 = *v1185;
            if (v1186)
            {
              while ((*(_BYTE *)(v1186 + 3) & 1) != 0)
              {
                v1186 = *(_QWORD *)(v1186 + 24);
                if (!v1186)
                  goto LABEL_1901;
              }
              while (1)
              {
                v1186 = *(_QWORD *)(v1186 + 24);
                if (!v1186)
                  break;
                if ((*(_BYTE *)(v1186 + 3) & 1) == 0)
                  goto LABEL_1901;
              }
              if (sub_1C49A5320(v1083, v201, 1u, 1))
              {
                v1187 = *(_QWORD *)v3;
                v2046 = 129;
                LODWORD(v2047) = 0;
                LODWORD(__s1[0]) = v1083;
                LODWORD(v2036) = 0;
                (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v1187 + 32))(v1187, 179, &v2046, 1, __s1, 1, 0);
                v1117 = *(_DWORD *)(*(_QWORD *)(v1188 + 32) + 4);
                v1189 = *(_QWORD *)v3;
                v2046 = 129;
                LODWORD(v2047) = 0;
                LODWORD(__s1[0]) = v1117;
                LODWORD(v2036) = 0;
                v1190 = *(void (**)(void))(*(_QWORD *)v1189 + 32);
LABEL_1910:
                v1190();
                v1182 = *(_DWORD *)(*(_QWORD *)(v1195 + 32) + 4);
                goto LABEL_1911;
              }
            }
          }
LABEL_1901:
          v1191 = sub_1C49A5320(v1083, v201, 1u, 0);
          if (sub_1C49A5320(v1995, v201, 1u, 0) + v1191 < v1974)
            goto LABEL_1902;
          v1193 = *(_QWORD *)v3;
          v2046 = 129;
          LODWORD(v2047) = 0;
          LODWORD(__s1[0]) = v1083;
          LODWORD(v2036) = 0;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v1193 + 32))(v1193, 179, &v2046, 1, __s1, 1, 0);
          v1117 = *(_DWORD *)(*(_QWORD *)(v1194 + 32) + 4);
          v1118 = *(_QWORD *)v3;
          v2046 = 129;
LABEL_1909:
          LODWORD(v2047) = 0;
          LODWORD(__s1[0]) = v1995;
          LODWORD(v2036) = 0;
          v1190 = *(void (**)(void))(*(_QWORD *)v1118 + 32);
          goto LABEL_1910;
        case 182:
        case 183:
          v18 = *(_QWORD *)v3;
          *(_QWORD *)(v18 + 40) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(v18 + 48) = a2;
          v19 = *(_QWORD *)(*(_QWORD *)v3 + 8);
          v20 = *(_QWORD *)(v19 + 40);
          v21 = *(_QWORD *)(a2 + 32);
          v22 = *(_DWORD *)(v21 + 4);
          v23 = *(unsigned int *)(v21 + 36);
          if (v22 < 0 && (v22 & 0x7FFFFFFFu) < *(_DWORD *)(v20 + 432))
            v24 = *(void **)(*(_QWORD *)(v20 + 424) + 8 * (v22 & 0x7FFFFFFF));
          else
            v24 = 0;
          *(_QWORD *)&v2023 = v24;
          if ((v23 & 0x80000000) != 0
            && (v23 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v20 + 432))
          {
            v65 = *(_QWORD *)(*(_QWORD *)(v20 + 424) + 8 * (v23 & 0x7FFFFFFF));
          }
          else
          {
            v65 = 0;
          }
          v2018 = v65;
          v66 = **(unsigned __int16 **)(a2 + 16);
          v67 = sub_1C554C050(v23, v20);
          if (v68)
          {
            v69 = v67;
            if (v24 == (void *)129)
              v70 = &unk_1C866F15C;
            else
              v70 = &unk_1C866F184;
            v72 = sub_1C4825F50((unint64_t *)&v2023);
            if ((_DWORD)v71 == 1)
            LODWORD(v2047) = v72;
            if (v72 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v2046, 0, 0);
              v1108 = v3;
              v1109 = v2047;
              llvm::detail::IEEEFloat::initFromAPInt((llvm::detail::IEEEFloat *)&__s1[1], v70, (const llvm::APInt **)&v2046);
              v813 = v1109 >= 0x41;
              v3 = v1108;
              if (v813 && v2046)
                MEMORY[0x1CAA32F9C](v2046, 0x1000C8000313F17);
            }
            else
            {
              v2046 = 0;
              llvm::detail::IEEEFloat::initFromAPInt((llvm::detail::IEEEFloat *)&__s1[1], v70, (const llvm::APInt **)&v2046);
            }
            v74 = sub_1C4825F50(&v2018);
            if ((_DWORD)v73 == 1)
            LODWORD(v2047) = v74;
            if (v74 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v2046, v69, 0);
            }
            else
            {
              v75 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v74;
              if (!v74)
                v75 = 0;
              v2046 = v75 & v69;
            }
            sub_1C4959BCC((uint64_t)__s1, (uint64_t)&v2046, v66 == 182, 1);
            if (v2047 >= 0x41 && v2046)
              MEMORY[0x1CAA32F9C](v2046, 0x1000C8000313F17);
            v77 = *(_QWORD *)v3;
            LODWORD(v2046) = v22;
            LODWORD(v2047) = 1;
            v78 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v19, (llvm::LLVMContext *)__s1, v76);
            (*(void (**)(uint64_t, unint64_t *, llvm::APFloatBase *))(*(_QWORD *)v77 + 24))(v77, &v2046, v78);
            v79 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v79 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v79 = a2;
                do
                  v79 = *(_QWORD *)(v79 + 8);
                while ((*(_WORD *)(v79 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v79 + 8));
            goto LABEL_2338;
          }
          if ((v23 & 0x80000000) != 0)
            v396 = (uint64_t *)(*(_QWORD *)(v20 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8);
          else
            v396 = (uint64_t *)(*(_QWORD *)(v20 + 272) + 8 * v23);
          v461 = *v396;
          if (v461)
          {
            if ((*(_BYTE *)(v461 + 3) & 1) != 0
              || (v461 = *(_QWORD *)(v461 + 24)) != 0 && (*(_BYTE *)(v461 + 3) & 1) != 0)
            {
              v1411 = *(_QWORD *)(v461 + 8);
              if (v1411)
              {
                if (**(_WORD **)(v1411 + 16) == 126 && *(_DWORD *)(v1411 + 40) == 2)
                {
                  v1412 = *(_DWORD *)(*(_QWORD *)(v1411 + 32) + 36);
                  v1413 = *(_QWORD *)v3;
                  LODWORD(v2046) = v22;
                  LODWORD(v2047) = 1;
                  LODWORD(__s1[0]) = v1412;
                  LODWORD(v2036) = 0;
                  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v1413 + 32))(v1413, 183, &v2046, 1, __s1, 1, 0);
                  v63 = *(_QWORD *)(a2 + 24);
                  v64 = a2;
                  if ((*(_BYTE *)a2 & 4) == 0)
                  {
                    v64 = a2;
                    if ((*(_WORD *)(a2 + 44) & 8) != 0)
                    {
                      v64 = a2;
                      do
                        v64 = *(_QWORD *)(v64 + 8);
                      while ((*(_WORD *)(v64 + 44) & 8) != 0);
                    }
                  }
                  goto LABEL_2820;
                }
              }
            }
          }
          if ((v23 & 0x80000000) != 0)
            v462 = (uint64_t *)(*(_QWORD *)(v20 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8);
          else
            v462 = (uint64_t *)(*(_QWORD *)(v20 + 272) + 8 * v23);
          v463 = *v462;
          if (!v463)
            goto LABEL_498;
          if ((*(_BYTE *)(v463 + 3) & 1) == 0)
          {
            v463 = *(_QWORD *)(v463 + 24);
            if (!v463 || (*(_BYTE *)(v463 + 3) & 1) == 0)
              goto LABEL_498;
          }
          v1573 = *(_QWORD *)(v463 + 8);
          if (!v1573 || **(_WORD **)(v1573 + 16) != 65 || *(_DWORD *)(v1573 + 40) != 3)
            goto LABEL_498;
          v1574 = *(_QWORD *)(v1573 + 32);
          v1575 = *(_DWORD *)(v1574 + 36);
          v1998 = sub_1C554C050(*(_DWORD *)(v1574 + 68), v20);
          if (v1576)
          {
            if ((v1575 & 0x80000000) == 0)
              goto LABEL_3237;
          }
          else
          {
            v1998 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v1573 + 32) + 36), v20);
            if (!v1786)
              goto LABEL_498;
            v1575 = *(_DWORD *)(*(_QWORD *)(v1573 + 32) + 68);
            if ((v1575 & 0x80000000) == 0)
              goto LABEL_3237;
          }
          if ((v1575 & 0x7FFFFFFFu) < *(_DWORD *)(v20 + 432))
          {
            v1577 = *(void **)(*(_QWORD *)(v20 + 424) + 8 * (v1575 & 0x7FFFFFFF));
            goto LABEL_3238;
          }
LABEL_3237:
          v1577 = 0;
LABEL_3238:
          __s1[0] = v1577;
          v1788 = sub_1C4825F50((unint64_t *)__s1);
          if ((_DWORD)v1787 == 1)
          if (v1788 >= 0x11 && v1998 == 0xFFFF)
          {
            v1789 = *(_QWORD *)v3;
            LODWORD(v2031) = v22;
            LODWORD(v2032) = 1;
            *(_QWORD *)&v2027 = 129;
            DWORD2(v2027) = 0;
            LODWORD(v2046) = v1575;
            DWORD2(v2047) = 0;
            __s1[0] = (void *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v1789 + 32))(v1789, 119, &v2027, 1, &v2046, 1, 0);
            __s1[1] = v1790;
            LODWORD(v2036) = 1;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v1789
                                                                                                 + 32))(v1789, 183, &v2031, 1, __s1, 1, 0);
            v63 = *(_QWORD *)(a2 + 24);
            v64 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v64 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v64 = a2;
                do
                  v64 = *(_QWORD *)(v64 + 8);
                while ((*(_WORD *)(v64 + 44) & 8) != 0);
              }
            }
            goto LABEL_2820;
          }
LABEL_498:
          if ((v23 & 0x80000000) != 0)
            v464 = (uint64_t *)(*(_QWORD *)(v20 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8);
          else
            v464 = (uint64_t *)(*(_QWORD *)(v20 + 272) + 8 * v23);
          v465 = *v464;
          if (v465
            && ((*(_BYTE *)(v465 + 3) & 1) != 0
             || (v465 = *(_QWORD *)(v465 + 24)) != 0 && (*(_BYTE *)(v465 + 3) & 1) != 0))
          {
            v466 = *(_QWORD *)(v465 + 8);
          }
          else
          {
            v466 = 0;
          }
          v468 = sub_1C4825F50(&v2018);
          if ((_DWORD)v467 == 1)
          if (v468 != 1 || (**(_WORD **)(v466 + 16) & 0xFFFE) != 0x86)
            return sub_1C6037A10((uint64_t *)v3, a2);
          v469 = (uint64_t *)v3;
          v470 = *(_DWORD *)(*(_QWORD *)(v466 + 32) + 48);
          v471 = *v469;
          __s1[0] = v24;
          LODWORD(__s1[1]) = 0;
          v472 = sub_1C5545FFC(v471, (unint64_t *)__s1, 0.0);
          v474 = v473;
          v475 = *v469;
          __s1[0] = v24;
          LODWORD(__s1[1]) = 0;
          v476 = 1.0;
          if (v66 == 182)
            v476 = -1.0;
          v477 = sub_1C5545FFC(v475, (unint64_t *)__s1, v476);
          v478 = *v469;
          LODWORD(v2046) = v22;
          LODWORD(v2047) = 1;
          LODWORD(__s1[0]) = v470;
          LODWORD(v2036) = 2;
          v479 = *(_QWORD *)(v466 + 32);
          DWORD2(v2036) = *(_DWORD *)(v479 + 68);
          LODWORD(v2038) = 0;
          LODWORD(v2039) = *(_DWORD *)(v479 + 100);
          *(_DWORD *)v2041 = 0;
          *(_QWORD *)&v2041[8] = v477;
          *(_QWORD *)&v2041[16] = v480;
          *(_DWORD *)v2042 = 1;
          *(_QWORD *)&v2042[8] = v472;
          *(_QWORD *)&v2042[16] = v474;
          *(_DWORD *)&v2042[24] = 1;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v478 + 32))(v478, 51, &v2046, 1, __s1, 5, 0);
          v63 = *(_QWORD *)(a2 + 24);
          v64 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v64 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v64 = a2;
              do
                v64 = *(_QWORD *)(v64 + 8);
              while ((*(_WORD *)(v64 + 44) & 8) != 0);
            }
          }
          goto LABEL_2820;
        case 184:
          v181 = *(_QWORD *)v3;
          *(_QWORD *)(v181 + 40) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(v181 + 48) = a2;
          v182 = *(_QWORD *)(*(_QWORD *)v3 + 8);
          v183 = *(_QWORD *)(v182 + 40);
          v184 = *(_QWORD *)(a2 + 32);
          v185 = *(_DWORD *)(v184 + 4);
          v186 = *(unsigned int *)(v184 + 36);
          if (v185 < 0 && (v185 & 0x7FFFFFFFu) < *(_DWORD *)(v183 + 432))
            v187 = *(_QWORD *)(*(_QWORD *)(v183 + 424) + 8 * (v185 & 0x7FFFFFFF));
          else
            v187 = 0;
          sub_1C49A4E60((uint64_t)__s1, 184, v187, v186, *(_QWORD *)(v183 + 24), *(_QWORD *)(v183 + 272));
          if ((_BYTE)v2037)
          {
            v327 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v182, (llvm::LLVMContext *)__s1, v326);
            v328 = *(_QWORD *)v3;
            LODWORD(v2046) = v185;
            LODWORD(v2047) = 1;
            (*(void (**)(uint64_t, unint64_t *, llvm::APFloatBase *))(*(_QWORD *)v328 + 24))(v328, &v2046, v327);
            v48 = *(_QWORD *)(a2 + 24);
            v49 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v49 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v49 = a2;
                do
                  v49 = *(_QWORD *)(v49 + 8);
                while ((*(_WORD *)(v49 + 44) & 8) != 0);
              }
            }
            goto LABEL_2337;
          }
          if ((v186 & 0x80000000) != 0)
            v460 = (uint64_t *)(*(_QWORD *)(v183 + 24) + 16 * (v186 & 0x7FFFFFFF) + 8);
          else
            v460 = (uint64_t *)(*(_QWORD *)(v183 + 272) + 8 * v186);
          v687 = *v460;
          if (v687)
          {
            if ((*(_BYTE *)(v687 + 3) & 1) != 0
              || (v687 = *(_QWORD *)(v687 + 24)) != 0 && (*(_BYTE *)(v687 + 3) & 1) != 0)
            {
              v1571 = *(_QWORD *)(v687 + 8);
              if (v1571)
              {
                if (**(_WORD **)(v1571 + 16) == 184 && *(_DWORD *)(v1571 + 40) == 2)
                {
                  v1572 = *(_QWORD *)v3;
                  LODWORD(v2046) = v185;
                  LODWORD(v2047) = 1;
                  LODWORD(__s1[0]) = v186;
                  LODWORD(v2036) = 0;
                  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v1572 + 32))(v1572, 19, &v2046, 1, __s1, 1, 0);
                  v63 = *(_QWORD *)(a2 + 24);
                  v64 = a2;
                  if ((*(_BYTE *)a2 & 4) == 0)
                  {
                    v64 = a2;
                    if ((*(_WORD *)(a2 + 44) & 8) != 0)
                    {
                      v64 = a2;
                      do
                        v64 = *(_QWORD *)(v64 + 8);
                      while ((*(_WORD *)(v64 + 44) & 8) != 0);
                    }
                  }
                  goto LABEL_2820;
                }
              }
            }
          }
          LODWORD(v2008) = 0;
          v2003 = 0;
          v2013 = 0;
          if ((v186 & 0x80000000) != 0)
            v688 = (uint64_t *)(*(_QWORD *)(v183 + 24) + 16 * (v186 & 0x7FFFFFFF) + 8);
          else
            v688 = (uint64_t *)(*(_QWORD *)(v183 + 272) + 8 * v186);
          v780 = *v688;
          if (!v780)
            goto LABEL_1101;
          while ((*(_BYTE *)(v780 + 3) & 1) != 0)
          {
            v780 = *(_QWORD *)(v780 + 24);
            if (!v780)
              goto LABEL_1101;
          }
          while (1)
          {
            v780 = *(_QWORD *)(v780 + 24);
            if (!v780)
              break;
            if ((*(_BYTE *)(v780 + 3) & 1) == 0)
              goto LABEL_1101;
          }
          __s1[0] = &v2013;
          __s1[1] = &v2008;
          *(_QWORD *)&v2036 = &v2003;
          if (sub_1C49A527C(v186, v183, (_QWORD **)__s1))
          {
            v781 = *(_QWORD *)v3;
            LODWORD(v2027) = v185;
            DWORD2(v2027) = 1;
            *(_QWORD *)&v2023 = v187;
            DWORD2(v2023) = 0;
            LODWORD(v2046) = v2008;
            DWORD2(v2047) = 0;
            __s1[0] = (void *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v781 + 32))(v781, 184, &v2023, 1, &v2046, 1, 0);
            __s1[1] = v782;
            LODWORD(v2036) = 1;
            v783 = *(_QWORD *)v3;
            v2018 = v187;
            LODWORD(v2019) = 0;
            LODWORD(v2031) = v2003;
            DWORD2(v2032) = 0;
            *((_QWORD *)&v2036 + 1) = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v783 + 32))(v783, 184, &v2018, 1, &v2031, 1, 0);
            v2037 = v784;
            LODWORD(v2038) = 1;
            v785 = v2013[22] | 0x100000000;
            v786 = *(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v781 + 32);
            v787 = (unint64_t *)&v2027;
            v788 = v781;
            v789 = 165;
            v790 = 2;
            goto LABEL_1096;
          }
LABEL_1101:
          if ((v186 & 0x80000000) != 0)
            v791 = (uint64_t *)(*(_QWORD *)(v183 + 24) + 16 * (v186 & 0x7FFFFFFF) + 8);
          else
            v791 = (uint64_t *)(*(_QWORD *)(v183 + 272) + 8 * v186);
          v792 = *v791;
          if (v792
            && ((*(_BYTE *)(v792 + 3) & 1) != 0
             || (v792 = *(_QWORD *)(v792 + 24)) != 0 && (*(_BYTE *)(v792 + 3) & 1) != 0)
            && (v1623 = *(_QWORD *)(v792 + 8)) != 0
            && **(_WORD **)(v1623 + 16) == 178
            && *(_DWORD *)(v1623 + 40) == 2
            && ((v1624 = *(unsigned int *)(*(_QWORD *)(v1623 + 32) + 36), (v1624 & 0x80000000) != 0)
              ? (v1625 = (uint64_t *)(*(_QWORD *)(v183 + 24) + 16 * (v1624 & 0x7FFFFFFF) + 8))
              : (v1625 = (uint64_t *)(*(_QWORD *)(v183 + 272) + 8 * v1624)),
                (v1727 = *v1625) != 0
             && ((*(_BYTE *)(v1727 + 3) & 1) != 0
              || (v1727 = *(_QWORD *)(v1727 + 24)) != 0 && (*(_BYTE *)(v1727 + 3) & 1) != 0)
             && (v1915 = *(_QWORD *)(v1727 + 8)) != 0))
          {
            if ((v1624 & 0x80000000) != 0)
              v1916 = (uint64_t *)(*(_QWORD *)(v183 + 24) + 16 * (v1624 & 0x7FFFFFFF) + 8);
            else
              v1916 = (uint64_t *)(*(_QWORD *)(v183 + 272) + 8 * v1624);
            v1937 = *v1916;
            if (v1937
              && ((*(_BYTE *)(v1937 + 3) & 1) != 0
               || (v1937 = *(_QWORD *)(v1937 + 24)) != 0 && (*(_BYTE *)(v1937 + 3) & 1) != 0)
              && (v1938 = *(_QWORD *)(v1937 + 8)) != 0
              && **(_WORD **)(v1938 + 16) == 184
              && *(_DWORD *)(v1938 + 40) == 2)
            {
              v1939 = *(_DWORD *)(*(_QWORD *)(v1938 + 32) + 36);
              v788 = *(_QWORD *)v3;
              LODWORD(v2046) = v185;
              LODWORD(v2047) = 1;
              LODWORD(__s1[0]) = v1939;
              LODWORD(v2036) = 0;
              v786 = *(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v788 + 32);
              v787 = &v2046;
            }
            else
            {
              v1953 = *(_QWORD *)v3;
              LODWORD(v2031) = v185;
              LODWORD(v2032) = 1;
              if ((v1624 & 0x80000000) != 0 && (v1624 & 0x7FFFFFFF) < *(_DWORD *)(v183 + 432))
                v1954 = *(_QWORD *)(*(_QWORD *)(v183 + 424) + 8 * (v1624 & 0x7FFFFFFF));
              else
                v1954 = 0;
              *(_QWORD *)&v2027 = v1954;
              DWORD2(v2027) = 0;
              LODWORD(v2046) = v1624;
              DWORD2(v2047) = 0;
              __s1[0] = (void *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v1953 + 32))(v1953, 184, &v2027, 1, &v2046, 1, *(unsigned __int16 *)(v1915 + 44) | 0x100000000);
              __s1[1] = v1961;
              LODWORD(v2036) = 1;
              v786 = *(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v1953 + 32);
              v787 = (unint64_t *)&v2031;
              v788 = v1953;
            }
            v789 = 178;
          }
          else
          {
            if ((v186 & 0x80000000) != 0)
              v793 = (uint64_t *)(*(_QWORD *)(v183 + 24) + 16 * (v186 & 0x7FFFFFFF) + 8);
            else
              v793 = (uint64_t *)(*(_QWORD *)(v183 + 272) + 8 * v186);
            v794 = *v793;
            if (!v794)
              return sub_1C6037A10((uint64_t *)v3, a2);
            v795 = (uint64_t *)v3;
            if ((*(_BYTE *)(v794 + 3) & 1) == 0)
            {
              v794 = *(_QWORD *)(v794 + 24);
              if (!v794 || (*(_BYTE *)(v794 + 3) & 1) == 0)
                return sub_1C6037A10((uint64_t *)v3, a2);
            }
            v1620 = *(_QWORD *)(v794 + 8);
            if (!v1620 || **(_WORD **)(v1620 + 16) != 179 || *(_DWORD *)(v1620 + 40) != 2)
              return sub_1C6037A10((uint64_t *)v3, a2);
            v1621 = *(unsigned int *)(*(_QWORD *)(v1620 + 32) + 36);
            v1622 = (uint64_t *)((v1621 & 0x80000000) != 0
                              ? *(_QWORD *)(v183 + 24) + 16 * (v1621 & 0x7FFFFFFF) + 8
                              : *(_QWORD *)(v183 + 272) + 8 * v1621);
            v1726 = *v1622;
            if (!v1726)
              return sub_1C6037A10((uint64_t *)v3, a2);
            if ((*(_BYTE *)(v1726 + 3) & 1) == 0)
            {
              v1726 = *(_QWORD *)(v1726 + 24);
              if (!v1726 || (*(_BYTE *)(v1726 + 3) & 1) == 0)
                return sub_1C6037A10((uint64_t *)v3, a2);
            }
            v1913 = *(_QWORD *)(v1726 + 8);
            if (!v1913)
              return sub_1C6037A10((uint64_t *)v3, a2);
            if ((v1621 & 0x80000000) != 0)
              v1914 = (uint64_t *)(*(_QWORD *)(v183 + 24) + 16 * (v1621 & 0x7FFFFFFF) + 8);
            else
              v1914 = (uint64_t *)(*(_QWORD *)(v183 + 272) + 8 * v1621);
            v1934 = *v1914;
            if (v1934)
            {
              if ((*(_BYTE *)(v1934 + 3) & 1) != 0
                || (v1934 = *(_QWORD *)(v1934 + 24)) != 0 && (*(_BYTE *)(v1934 + 3) & 1) != 0)
              {
                v1935 = *(_QWORD *)(v1934 + 8);
                if (v1935)
                {
                  if (**(_WORD **)(v1935 + 16) == 184 && *(_DWORD *)(v1935 + 40) == 2)
                  {
                    v1936 = *(_DWORD *)(*(_QWORD *)(v1935 + 32) + 36);
                    v788 = *(_QWORD *)v3;
                    LODWORD(v2046) = v185;
                    LODWORD(v2047) = 1;
                    LODWORD(__s1[0]) = v1936;
                    LODWORD(v2036) = 0;
                    v785 = *(unsigned __int16 *)(v1913 + 44) | 0x100000000;
                    v786 = *(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v788 + 32);
                    v787 = &v2046;
                    v789 = 179;
                    goto LABEL_3735;
                  }
                }
              }
            }
            if ((sub_1C4998998(v185, v183) & 1) != 0)
              return sub_1C6037A10((uint64_t *)v3, a2);
            v1952 = (uint64_t *)((v186 & 0x80000000) != 0
                              ? *(_QWORD *)(v183 + 24) + 16 * (v186 & 0x7FFFFFFF) + 8
                              : *(_QWORD *)(v183 + 272) + 8 * v186);
            v1958 = *v1952;
            if (!v1958)
              return sub_1C6037A10((uint64_t *)v3, a2);
            while ((*(_BYTE *)(v1958 + 3) & 1) != 0)
            {
              v1958 = *(_QWORD *)(v1958 + 24);
              v3 = (uint64_t)v795;
              if (!v1958)
                return sub_1C6037A10((uint64_t *)v3, a2);
            }
            while (1)
            {
              v1958 = *(_QWORD *)(v1958 + 24);
              if (!v1958)
                break;
              v3 = (uint64_t)v795;
              if ((*(_BYTE *)(v1958 + 3) & 1) == 0)
                return sub_1C6037A10((uint64_t *)v3, a2);
            }
            v1959 = *v795;
            LODWORD(v2031) = v185;
            LODWORD(v2032) = 1;
            if ((v1621 & 0x80000000) != 0 && (v1621 & 0x7FFFFFFF) < *(_DWORD *)(v183 + 432))
              v1960 = *(_QWORD *)(*(_QWORD *)(v183 + 424) + 8 * (v1621 & 0x7FFFFFFF));
            else
              v1960 = 0;
            *(_QWORD *)&v2027 = v1960;
            DWORD2(v2027) = 0;
            LODWORD(v2046) = v1621;
            DWORD2(v2047) = 0;
            __s1[0] = (void *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v1959 + 32))(v1959, 184, &v2027, 1, &v2046, 1, *(unsigned __int16 *)(v1913 + 44) | 0x100000000);
            __s1[1] = v1966;
            LODWORD(v2036) = 1;
            v786 = *(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v1959 + 32);
            v787 = (unint64_t *)&v2031;
            v788 = v1959;
            v789 = 179;
          }
          v785 = 0;
LABEL_3735:
          v790 = 1;
LABEL_1096:
          v786(v788, v789, v787, 1, __s1, v790, v785);
          v63 = *(_QWORD *)(a2 + 24);
          v64 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v64 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v64 = a2;
              do
                v64 = *(_QWORD *)(v64 + 8);
              while ((*(_WORD *)(v64 + 44) & 8) != 0);
            }
          }
          goto LABEL_2820;
        case 185:
          v225 = *(_QWORD *)v3;
          *(_QWORD *)(v225 + 40) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(v225 + 48) = a2;
          v226 = *(_DWORD **)(a2 + 32);
          v227 = v226[9];
          v228 = v226[17];
          v229 = *(_QWORD *)(v3 + 8);
          if ((v228 & 0x80000000) != 0)
            v230 = (uint64_t *)(*(_QWORD *)(v229 + 24) + 16 * (v228 & 0x7FFFFFFF) + 8);
          else
            v230 = (uint64_t *)(*(_QWORD *)(v229 + 272) + 8 * v228);
          v432 = *v230;
          if (v432
            && ((*(_BYTE *)(v432 + 3) & 1) != 0
             || (v432 = *(_QWORD *)(v432 + 24)) != 0 && (*(_BYTE *)(v432 + 3) & 1) != 0))
          {
            v433 = *(_QWORD *)(v432 + 8);
            if ((v227 & 0x80000000) == 0)
              goto LABEL_2406;
          }
          else
          {
            v433 = 0;
            if ((v227 & 0x80000000) == 0)
              goto LABEL_2406;
          }
          if ((v227 & 0x7FFFFFFF) < *(_DWORD *)(v229 + 432))
          {
            v434 = *(unsigned __int16 **)(*(_QWORD *)(v229 + 424) + 8 * (v227 & 0x7FFFFFFF));
            goto LABEL_2407;
          }
LABEL_2406:
          v434 = 0;
LABEL_2407:
          v1391 = (uint64_t *)(*(_QWORD *)(v229 + 24) + 16 * (v227 & 0x7FFFFFFF) + 8);
          if ((int)v227 >= 0)
            v1391 = (uint64_t *)(*(_QWORD *)(v229 + 272) + 8 * v227);
          v1392 = *v1391;
          if ((*(_BYTE *)(v1392 + 3) & 1) == 0)
            v1392 = *(_QWORD *)(v1392 + 24);
          v1393 = *(_QWORD *)(v1392 + 8);
          if (**(_WORD **)(v1393 + 16) != 121)
            return sub_1C6037A10((uint64_t *)v3, a2);
          v1394 = *(_QWORD *)(*(_QWORD *)(v1393 + 32) + 48);
          if (!v1394)
            return sub_1C6037A10((uint64_t *)v3, a2);
          v1395 = v226[1];
          v1396 = llvm::MachineRegisterInfo::createGenericVirtualRegister(v229, (uint64_t)v434, "", 0);
          v1397 = *(_QWORD *)v3;
          v1398 = *(unsigned __int16 *)(v433 + 44) | 0x100000000;
          LODWORD(v2046) = v1396;
          LODWORD(v2047) = 1;
          LODWORD(__s1[0]) = v227;
          LODWORD(v2036) = 0;
          v2046 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v1397 + 32))(v1397, 177, &v2046, 1, __s1, 1, v1398);
          *(_QWORD *)&v2047 = v1399;
          v1400 = *(llvm::ConstantFP ******)v3;
          __s1[0] = v434;
          LODWORD(__s1[1]) = 0;
          v1402 = llvm::ConstantFP::get(***v1400[1], (llvm::LLVMContext *)(v1394 + 24), v1401);
          v2031 = (void *)((uint64_t (*)(llvm::ConstantFP *****, void **, llvm::APFloatBase *))(*v1400)[3])(v1400, __s1, v1402);
          *(_QWORD *)&v2032 = v1403;
          if (*(_UNKNOWN **)(v1394 + 32) == &unk_1C866F1C0)
            v1404 = *(_BYTE *)(*(_QWORD *)(v1394 + 40) + 28);
          else
            v1404 = *(_BYTE *)(v1394 + 52);
          v1405 = v1404 & 8;
          v1406 = &v2031;
          if (!v1405)
            v1406 = (void **)&v2046;
          v2027 = *(_OWORD *)v1406;
          v5 = v1405 == 0;
          v1407 = (void **)&v2046;
          if (v5)
            v1407 = &v2031;
          v2023 = *(_OWORD *)v1407;
          v1408 = *(_QWORD *)v3;
          LODWORD(v2018) = v1395;
          LODWORD(v2019) = 1;
          LODWORD(__s1[0]) = 40;
          LODWORD(v2036) = 2;
          DWORD2(v2036) = v228;
          LODWORD(v2038) = 0;
          v2013 = v434;
          LODWORD(v2014) = 0;
          v2039 = sub_1C5544694(v1408, (unint64_t *)&v2013, 0);
          v2040 = v1409;
          *(_OWORD *)&v2041[8] = v2027;
          *(_DWORD *)v2041 = 1;
          *(_DWORD *)v2042 = 1;
          *(_OWORD *)&v2042[8] = v2023;
          *(_DWORD *)&v2042[24] = 1;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v1408 + 32))(v1408, 51, &v2018, 1, __s1, 5, 0);
          v63 = *(_QWORD *)(a2 + 24);
          v64 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v64 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v64 = a2;
              do
                v64 = *(_QWORD *)(v64 + 8);
              while ((*(_WORD *)(v64 + 44) & 8) != 0);
            }
          }
          goto LABEL_2820;
        case 193:
          v155 = *(_DWORD **)(a2 + 32);
          v156 = v155[1];
          if (v156 < 0 && (v157 = *(_QWORD *)(v3 + 8), (v156 & 0x7FFFFFFFu) < *(_DWORD *)(v157 + 432)))
            v158 = *(_QWORD *)(*(_QWORD *)(v157 + 424) + 8 * (v156 & 0x7FFFFFFF));
          else
            v158 = 0;
          v2031 = (void *)v158;
          v296 = v155[9];
          v297 = v155[17];
          v298 = *(_QWORD *)v3;
          *(_QWORD *)(v298 + 40) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(v298 + 48) = a2;
          v299 = 35;
          if ((v158 & 4) == 0)
            v299 = 19;
          v300 = 257;
          v301 = (v158 >> v299) & 0xFFFFFF;
          if ((_DWORD)v301 && (_DWORD)v301 != 3)
          {
            v303 = sub_1C4825F50((unint64_t *)&v2031);
            if ((_DWORD)v302 == 1)
            v300 = (8 * v303) | 1;
          }
          v305 = sub_1C4825F50((unint64_t *)&v2031);
          if ((_DWORD)v304 == 1)
          v306 = 0x7FFFFF800000000;
          if ((v2031 & 4) == 0)
            v306 = 0x7FFFFF80000;
          if ((v306 & (unint64_t)v2031) == 0)
            goto LABEL_278;
          v307 = 35;
          if ((v2031 & 4) == 0)
            v307 = 19;
          if ((((unint64_t)v2031 >> v307) & 0xFFFFFF) - 1 > 2)
          {
            v496 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40);
            v497 = sub_1C554C050(v297, v496);
            if (!v498)
              return sub_1C6037A10((uint64_t *)v3, a2);
            v499 = v497;
            v500 = (uint64_t *)((v296 & 0x80000000) != 0
                             ? *(_QWORD *)(v496 + 24) + 16 * (v296 & 0x7FFFFFFF) + 8
                             : *(_QWORD *)(v496 + 272) + 8 * v296);
            v820 = *v500;
            if (!v820)
              return sub_1C6037A10((uint64_t *)v3, a2);
            if ((*(_BYTE *)(v820 + 3) & 1) == 0)
            {
              v820 = *(_QWORD *)(v820 + 24);
              if (!v820 || (*(_BYTE *)(v820 + 3) & 1) == 0)
                return sub_1C6037A10((uint64_t *)v3, a2);
            }
            v1633 = *(_QWORD *)(v820 + 8);
            if (!v1633)
              return sub_1C6037A10((uint64_t *)v3, a2);
            if (**(_WORD **)(v1633 + 16) != 81)
              return sub_1C6037A10((uint64_t *)v3, a2);
            if (*(_DWORD *)(v1633 + 40) != 2)
              return sub_1C6037A10((uint64_t *)v3, a2);
            v1634 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v1633 + 32) + 36), v496);
            if (!v1635)
              return sub_1C6037A10((uint64_t *)v3, a2);
            v1636 = v1634 + v499;
            v1638 = sub_1C4825F50((unint64_t *)&v2031);
            if ((_DWORD)v1637 == 1)
            v1639 = *(_QWORD *)v3;
            __s1[0] = (void *)((8 * v1638) | 1);
            LODWORD(__s1[1]) = 0;
            v1640 = (void *)sub_1C5544694(v1639, (unint64_t *)__s1, v1636);
            v1641 = *(uint64_t **)v3;
            LODWORD(v2046) = v156;
            LODWORD(v2047) = 1;
            __s1[0] = v1640;
            __s1[1] = v1642;
            LODWORD(v2036) = 1;
            sub_1C5546EF4(v1641, (uint64_t *)&v2046, (int *)__s1);
          }
          else
          {
LABEL_278:
            v308 = (_DWORD *)((8 * v305) | 1);
            v309 = *(_QWORD *)v3;
            v2046 = (unint64_t)v308;
            LODWORD(v2047) = 0;
            LODWORD(__s1[0]) = v296;
            LODWORD(v2036) = 0;
            v310 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v309 + 32))(v309, 80, &v2046, 1, __s1, 1, 0);
            v311 = *(uint64_t **)v3;
            v2046 = v300;
            LODWORD(v2047) = 0;
            __s1[0] = v310;
            __s1[1] = v312;
            LODWORD(v2036) = 1;
            v313 = (void *)sub_1C5546B4C(v311, 126, &v2046, (int *)__s1);
            v315 = v314;
            v316 = *(uint64_t **)v3;
            v2046 = v300;
            LODWORD(v2047) = 0;
            LODWORD(__s1[0]) = v297;
            LODWORD(v2036) = 0;
            v317 = sub_1C5546B4C(v316, 126, &v2046, (int *)__s1);
            v318 = *(_QWORD *)v3;
            v2046 = v300;
            LODWORD(v2047) = 0;
            __s1[0] = v313;
            __s1[1] = v315;
            LODWORD(v2036) = 1;
            *((_QWORD *)&v2036 + 1) = v317;
            v2037 = v319;
            LODWORD(v2038) = 1;
            v320 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v318 + 32))(v318, 45, &v2046, 1, __s1, 2, 0);
            v321 = *(uint64_t **)v3;
            v2046 = (unint64_t)v308;
            LODWORD(v2047) = 0;
            __s1[0] = v320;
            __s1[1] = v322;
            LODWORD(v2036) = 1;
            v323 = (void *)sub_1C5546B4C(v321, 126, &v2046, (int *)__s1);
            v324 = *(_QWORD *)v3;
            LODWORD(v2046) = v156;
            LODWORD(v2047) = 1;
            __s1[0] = v323;
            __s1[1] = v325;
            LODWORD(v2036) = 1;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v324 + 32))(v324, 81, &v2046, 1, __s1, 1, 0);
          }
          v63 = *(_QWORD *)(a2 + 24);
          v64 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v64 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v64 = a2;
              do
                v64 = *(_QWORD *)(v64 + 8);
              while ((*(_WORD *)(v64 + 44) & 8) != 0);
            }
          }
          goto LABEL_2820;
        default:
          return sub_1C6037A10((uint64_t *)v3, a2);
      }
    }
    if (v4 != 204)
    {
      if (v4 != 205)
      {
        if (v4 != 217)
          return sub_1C6037A10((uint64_t *)v3, a2);
        v39 = *(_QWORD *)v3;
        *(_QWORD *)(v39 + 40) = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(v39 + 48) = a2;
        v40 = *(_QWORD *)(a2 + 32);
        v41 = *(_DWORD *)(v40 + 4);
        if ((v41 & 0x80000000) == 0)
          return sub_1C6037A10((uint64_t *)v3, a2);
        v42 = *(_QWORD *)(*(_QWORD *)v3 + 8);
        v43 = *(_QWORD *)(v42 + 40);
        if ((v41 & 0x7FFFFFFFu) >= *(_DWORD *)(v43 + 432))
          return sub_1C6037A10((uint64_t *)v3, a2);
        if (*(_QWORD *)(*(_QWORD *)(v43 + 424) + 8 * (v41 & 0x7FFFFFFF)) != 257)
          return sub_1C6037A10((uint64_t *)v3, a2);
        sub_1C49A4E60((uint64_t)__s1, 217, 257, *(_DWORD *)(v40 + 36), *(_QWORD *)(v43 + 24), *(_QWORD *)(v43 + 272));
        if (!(_BYTE)v2037)
          return sub_1C6037A10((uint64_t *)v3, a2);
        v45 = ***(llvm::ConstantFP ****)v42;
        v46 = *(_QWORD *)v3;
        LODWORD(v2046) = v41;
        LODWORD(v2047) = 1;
        v47 = llvm::ConstantFP::get(v45, (llvm::LLVMContext *)__s1, v44);
        (*(void (**)(uint64_t, unint64_t *, llvm::APFloatBase *))(*(_QWORD *)v46 + 24))(v46, &v2046, v47);
        v48 = *(_QWORD *)(a2 + 24);
        v49 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v49 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v49 = a2;
            do
              v49 = *(_QWORD *)(v49 + 8);
            while ((*(_WORD *)(v49 + 44) & 8) != 0);
          }
        }
LABEL_2337:
        sub_1C487FE80(v48 + 40, a2, *(_QWORD *)(v49 + 8));
        if (!(_BYTE)v2037)
          return 1;
LABEL_2338:
        v1002 = __s1[1];
        if (__s1[1] == &unk_1C866F1C0)
        {
LABEL_1528:
          sub_1C4773C74((uint64_t *)&v2036);
          return 1;
        }
LABEL_2339:
        if ((v1002[2] - 64) > 0xFFFFFF7F || !(_QWORD)v2036)
          return 1;
LABEL_2069:
        MEMORY[0x1CAA32F9C]();
        return 1;
      }
      v231 = *(_QWORD *)v3;
      *(_QWORD *)(v231 + 40) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(v231 + 48) = a2;
      v232 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40);
      v233 = *(_DWORD **)(a2 + 32);
      v234 = v233[1];
      v235 = v233[9];
      v236 = sub_1C554C050(v233[17], v232);
      if (!v237)
        return sub_1C6037A10((uint64_t *)v3, a2);
      v238 = v236;
      v239 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 36);
      if ((v239 & 0x80000000) != 0)
        v240 = (uint64_t *)(*(_QWORD *)(v232 + 24) + 16 * (v239 & 0x7FFFFFFF) + 8);
      else
        v240 = (uint64_t *)(*(_QWORD *)(v232 + 272) + 8 * v239);
      v435 = *v240;
      if (!v435)
        goto LABEL_453;
      if ((*(_BYTE *)(v435 + 3) & 1) == 0)
      {
        v435 = *(_QWORD *)(v435 + 24);
        if (!v435 || (*(_BYTE *)(v435 + 3) & 1) == 0)
          goto LABEL_453;
      }
      v1534 = *(_QWORD *)(v435 + 8);
      if (!v1534 || **(_WORD **)(v1534 + 16) != 204 || *(_DWORD *)(v1534 + 40) != 4)
        goto LABEL_453;
      v1535 = *(_DWORD **)(v1534 + 32);
      v1536 = v1535[9];
      v1537 = (uint64_t *)((v1536 & 0x80000000) != 0
                        ? *(_QWORD *)(v232 + 24) + 16 * (v1536 & 0x7FFFFFFF) + 8
                        : *(_QWORD *)(v232 + 272) + 8 * v1536);
      if ((v1747 = *v1537) == 0
        || (*(_BYTE *)(v1747 + 3) & 1) == 0
        && ((v1747 = *(_QWORD *)(v1747 + 24)) == 0 || (*(_BYTE *)(v1747 + 3) & 1) == 0)
        || !*(_QWORD *)(v1747 + 8)
        || (v1923 = v1535[17], v1924 = sub_1C554C050(v1535[25], v232), !v1925))
      {
LABEL_453:
        v436 = v238;
        goto LABEL_454;
      }
      if (v1924 != v238)
      {
        v436 = v238;
LABEL_454:
        __s1[0] = &v2036;
        __s1[1] = (void *)0x800000000;
        v437 = sub_1C49BAAC0(v235, v232, *(_QWORD *)v3, (uint64_t)__s1);
        if ((v437 & 1) != 0)
        {
          v821 = *(_QWORD *)v3;
          LODWORD(v2031) = v234;
          LODWORD(v2032) = 1;
          LODWORD(v2046) = *((_DWORD *)__s1[0] + v436);
          DWORD2(v2047) = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v821 + 32))(v821, 19, &v2031, 1, &v2046, 1, 0);
          v822 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v822 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v822 = a2;
              do
                v822 = *(_QWORD *)(v822 + 8);
              while ((*(_WORD *)(v822 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v822 + 8));
        }
        v438 = __s1[0];
        if (__s1[0] != &v2036)
LABEL_2654:
          free(v438);
LABEL_2655:
        if ((v437 & 1) == 0)
          return sub_1C6037A10((uint64_t *)v3, a2);
        return 1;
      }
      v1945 = *(_QWORD *)v3;
      LODWORD(v2046) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
      LODWORD(v2047) = 1;
      LODWORD(__s1[0]) = v1923;
      LODWORD(v2036) = 0;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v1945 + 32))(v1945, 19, &v2046, 1, __s1, 1, 0);
      v63 = *(_QWORD *)(a2 + 24);
      v64 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v64 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v64 = a2;
          do
            v64 = *(_QWORD *)(v64 + 8);
          while ((*(_WORD *)(v64 + 44) & 8) != 0);
        }
      }
LABEL_2820:
      v283 = *(_QWORD *)(v64 + 8);
LABEL_2821:
      sub_1C487FE80(v63 + 40, a2, v283);
      return 1;
    }
    v241 = *(_QWORD *)v3;
    *(_QWORD *)(v241 + 40) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(v241 + 48) = a2;
    v242 = *(_QWORD *)v3;
    v243 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40);
    v244 = *(_DWORD **)(a2 + 32);
    v245 = v244[1];
    v246 = v244[25];
    if (v245 < 0 && (v245 & 0x7FFFFFFFu) < *(_DWORD *)(v243 + 432))
      v247 = *(_QWORD *)(*(_QWORD *)(v243 + 424) + 8 * (v245 & 0x7FFFFFFF));
    else
      v247 = 0;
    v1991 = v244[9];
    v1983 = v244[17];
    v329 = 0x8000000000000;
    if ((v247 & 2) != 0)
      v329 = 0x800000000000000;
    v330 = v244[25];
    if ((v329 & v247) != 0)
    {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
      v330 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 100);
    }
    v331 = sub_1C554C050(v330, v243);
    if (!v332 || (v333 = (unsigned __int16)(v247 >> 3), v331 != v333 - 1))
    {
LABEL_2639:
      v1520 = sub_1C554C050(v246, v243);
      if (!v1521)
        return sub_1C6037A10((uint64_t *)v3, a2);
      v1522 = v1520;
      v2046 = (unint64_t)&v2047 + 8;
      *(_QWORD *)&v2047 = 0x800000000;
      v437 = sub_1C49BAAC0(v1991, v243, *(_QWORD *)v3, (uint64_t)&v2046);
      if ((v437 & 1) == 0)
      {
LABEL_2653:
        v438 = (_DWORD *)v2046;
        if ((__int128 *)v2046 == (__int128 *)((char *)&v2047 + 8))
          goto LABEL_2655;
        goto LABEL_2654;
      }
      v1523 = (int *)v2046;
      *(_DWORD *)(v2046 + 4 * v1522) = v1983;
      v1524 = *(_QWORD *)v3;
      LODWORD(v2031) = v245;
      LODWORD(v2032) = 1;
      v1525 = v2047;
      __s1[0] = &v2036;
      __s1[1] = (void *)0x800000000;
      if (v2047 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__s1, (uint64_t)&v2036, v2047, 24);
        v1526 = LODWORD(__s1[1]);
        v1527 = (__int128 *)__s1[0];
      }
      else
      {
        if (!(_DWORD)v2047)
        {
          v1532 = 0;
          v1527 = &v2036;
LABEL_2648:
          LODWORD(__s1[1]) = v1532 + v1525;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *))(*(_QWORD *)v1524 + 32))(v1524, 77, &v2031, 1, v1527);
          if (__s1[0] != &v2036)
            free(__s1[0]);
          v1533 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v1533 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v1533 = a2;
              do
                v1533 = *(_QWORD *)(v1533 + 8);
              while ((*(_WORD *)(v1533 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v1533 + 8));
          goto LABEL_2653;
        }
        v1526 = 0;
        v1527 = &v2036;
      }
      v1528 = 24 * v1526;
      v1529 = 4 * v1525;
      do
      {
        v1530 = *v1523++;
        v1531 = (_DWORD *)((char *)v1527 + v1528);
        *v1531 = v1530;
        v1531[4] = 0;
        v1528 += 24;
        v1529 -= 4;
      }
      while (v1529);
      v1532 = (int)__s1[1];
      goto LABEL_2648;
    }
    v334 = 0;
    v335 = (_DWORD *)&v2047 + 2;
    v2046 = (unint64_t)&v2047 + 8;
    *(_QWORD *)&v2047 = 0x400000000;
    v336 = a2;
    while (1)
    {
      v337 = *(unsigned int *)(*(_QWORD *)(v336 + 32) + 4);
      v338 = (uint64_t *)((v337 & 0x80000000) != 0
                       ? *(_QWORD *)(v243 + 24) + 16 * (v337 & 0x7FFFFFFF) + 8
                       : *(_QWORD *)(v243 + 272) + 8 * v337);
      v339 = *v338;
      if (!v339)
        break;
      v1972 = v3;
      v1978 = (uint64_t)v335;
      if ((*(_BYTE *)(v339 + 3) & 1) == 0)
      {
        v339 = *(_QWORD *)(v339 + 24);
        if (!v339 || (*(_BYTE *)(v339 + 3) & 1) == 0)
          goto LABEL_2601;
      }
      v340 = *(_QWORD *)(v339 + 8);
      if (!v340 || **(_WORD **)(v340 + 16) != 204 || *(_DWORD *)(v340 + 40) != 4)
        goto LABEL_2601;
      v341 = *(_QWORD *)(v340 + 32);
      v342 = *(unsigned int *)(v341 + 36);
      v343 = (uint64_t *)((v342 & 0x80000000) != 0
                       ? *(_QWORD *)(v243 + 24) + 16 * (v342 & 0x7FFFFFFF) + 8
                       : *(_QWORD *)(v243 + 272) + 8 * v342);
      v344 = *v343;
      if (!v344)
        goto LABEL_2601;
      if ((*(_BYTE *)(v344 + 3) & 1) == 0)
      {
        v344 = *(_QWORD *)(v344 + 24);
        if (!v344 || (*(_BYTE *)(v344 + 3) & 1) == 0)
          goto LABEL_2601;
      }
      v336 = *(_QWORD *)(v344 + 8);
      if (!v336)
        break;
      v345 = *(unsigned int *)(v341 + 68);
      v1969 = sub_1C554C050(*(_DWORD *)(v341 + 100), v243);
      v334 = v2047;
      if (!v346)
      {
LABEL_2601:
        v3 = v1972;
        v335 = (_DWORD *)v1978;
        break;
      }
      if (v2047 >= DWORD1(v2047))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2046, v1978, v2047 + 1, 8);
        v334 = v2047;
      }
      *(_QWORD *)(v2046 + 8 * v334) = v345 | (v1969 << 32);
      v334 = v2047 + 1;
      LODWORD(v2047) = v2047 + 1;
      v3 = v1972;
      v335 = (_DWORD *)v1978;
    }
    v1500 = v334;
    if (v334 != (unint64_t)(unsigned __int16)(v247 >> 3))
    {
      v1504 = 0;
      goto LABEL_2636;
    }
    v1982 = v335;
    v2031 = &v2033;
    v2032 = xmmword_1C6612EF0;
    sub_1C49B9F28(&v2031, v334, 0);
    v1501 = 126 - 2 * __clz(v2047);
    if ((_DWORD)v2047)
      v1502 = v1501;
    else
      v1502 = 0;
    sub_1C49B9FD4((int *)v2046, (int *)(v2046 + 8 * v2047), v1502, 1);
    v1503 = (int *)v2046;
    if (v333)
    {
      if (*(_DWORD *)(v2046 + 4))
      {
        v1504 = 0;
LABEL_2633:
        if (v2031 != &v2033)
          free(v2031);
        v335 = v1982;
LABEL_2636:
        if ((_DWORD *)v2046 != v335)
          free((void *)v2046);
        if (v1504)
          return 1;
        goto LABEL_2639;
      }
      v1505 = 0;
      v1506 = (int *)(v2046 + 12);
      while (v1500 - 1 != v1505)
      {
        ++v1505;
        v1507 = *v1506;
        v1506 += 2;
        if (v1505 != v1507)
        {
          v1504 = v1505 >= v1500;
          goto LABEL_2633;
        }
      }
    }
    *(_QWORD *)&v2027 = &v2028;
    *((_QWORD *)&v2027 + 1) = 0x400000000;
    v1508 = v2047;
    if ((_DWORD)v2047)
    {
      LODWORD(v1509) = 0;
      v1510 = 8 * v2047;
      do
      {
        v1511 = *v1503;
        if (v1509 >= HIDWORD(v2027))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2027, (uint64_t)&v2028, v1509 + 1, 4);
          LODWORD(v1509) = DWORD2(v2027);
        }
        *(_DWORD *)(v2027 + 4 * v1509) = v1511;
        v1509 = ++DWORD2(v2027);
        v1503 += 2;
        v1510 -= 8;
      }
      while (v1510);
      v1512 = (int *)v2027;
      LODWORD(v2023) = v245;
      DWORD2(v2023) = 1;
      __s1[0] = &v2036;
      __s1[1] = (void *)0x800000000;
      if (v1509 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__s1, (uint64_t)&v2036, v1509, 24);
        v1513 = LODWORD(__s1[1]);
        v1514 = (__int128 *)__s1[0];
LABEL_2622:
        v1515 = 24 * v1513;
        v1516 = 4 * v1509;
        do
        {
          v1517 = *v1512++;
          v1518 = (_DWORD *)((char *)v1514 + v1515);
          *v1518 = v1517;
          v1518[4] = 0;
          v1515 += 24;
          v1516 -= 4;
        }
        while (v1516);
        v1508 = (int)__s1[1];
        goto LABEL_2626;
      }
      if ((_DWORD)v1509)
      {
        v1513 = 0;
        v1514 = &v2036;
        goto LABEL_2622;
      }
      v1508 = 0;
    }
    else
    {
      LODWORD(v1509) = 0;
      LODWORD(v2023) = v245;
      DWORD2(v2023) = 1;
      __s1[0] = &v2036;
      HIDWORD(__s1[1]) = 8;
    }
LABEL_2626:
    LODWORD(__s1[1]) = v1508 + v1509;
    (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v242 + 32))(v242, 77, &v2023, 1);
    if (__s1[0] != &v2036)
      free(__s1[0]);
    v1519 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v1519 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v1519 = a2;
        do
          v1519 = *(_QWORD *)(v1519 + 8);
        while ((*(_WORD *)(v1519 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v1519 + 8));
    if ((uint64_t **)v2027 != &v2028)
      free((void *)v2027);
    v1504 = 1;
    goto LABEL_2633;
  }
  if ((v4 - 272) < 0x10)
  {
    v7 = (uint64_t *)v3;
    v8 = a2;
    v9 = 2;
    goto LABEL_16;
  }
  if (v4 == 313)
  {
    v248 = *(_QWORD *)(a2 + 32);
    v249 = *(unsigned __int8 *)(v248 + 80);
    if (!*(_BYTE *)(v248 + 80))
      goto LABEL_549;
    v250 = *(_QWORD *)v3;
    v251 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40);
    v252 = *(unsigned int *)(v248 + 36);
    if ((v252 & 0x80000000) != 0)
      v253 = (uint64_t *)(*(_QWORD *)(v251 + 24) + 16 * (v252 & 0x7FFFFFFF) + 8);
    else
      v253 = (uint64_t *)(*(_QWORD *)(v251 + 272) + 8 * v252);
    v501 = *v253;
    if ((*(_BYTE *)(v501 + 3) & 1) == 0)
      v501 = *(_QWORD *)(v501 + 24);
    v502 = *(_QWORD *)(v501 + 8);
    *(_QWORD *)(v250 + 40) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(v250 + 48) = a2;
    v503 = **(unsigned __int16 **)(v502 + 16);
    v504 = v503 == 124 ? 2 : v503 == 126;
    if ((_DWORD)v504 && (v503 != 126 ? (v505 = (_DWORD)v504 == v249) : (v505 = 1), v505))
    {
      (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(v3 + 16) + 32))(*(_QWORD *)(v3 + 16), a2);
      llvm::MachineOperand::setReg(*(_QWORD *)(a2 + 32) + 32, *(_DWORD *)(*(_QWORD *)(v502 + 32) + 36));
      if ((_DWORD)v504 != v249)
        *(_QWORD *)(*(_QWORD *)(a2 + 32) + 80) = v504;
      (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2);
      v506 = 1;
    }
    else
    {
LABEL_549:
      v506 = 0;
    }
    v507 = *(_QWORD *)(a2 + 32);
    v508 = *(unsigned __int8 *)(v507 + 144);
    if (!*(_BYTE *)(v507 + 144))
      goto LABEL_567;
    v509 = *(_QWORD *)v3;
    v510 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40);
    v511 = *(unsigned int *)(v507 + 100);
    if ((v511 & 0x80000000) != 0)
      v512 = (uint64_t *)(*(_QWORD *)(v510 + 24) + 16 * (v511 & 0x7FFFFFFF) + 8);
    else
      v512 = (uint64_t *)(*(_QWORD *)(v510 + 272) + 8 * v511);
    v513 = *v512;
    if ((*(_BYTE *)(v513 + 3) & 1) == 0)
      v513 = *(_QWORD *)(v513 + 24);
    v514 = *(_QWORD *)(v513 + 8);
    *(_QWORD *)(v509 + 40) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(v509 + 48) = a2;
    v515 = **(unsigned __int16 **)(v514 + 16);
    v516 = v515 == 124 ? 2 : v515 == 126;
    if (!(_DWORD)v516 || (v515 != 126 ? (v517 = (_DWORD)v516 == v508) : (v517 = 1), !v517))
    {
LABEL_567:
      if ((v506 & 1) == 0)
        return sub_1C6037A10((uint64_t *)v3, a2);
      return 1;
    }
    (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(v3 + 16) + 32))(*(_QWORD *)(v3 + 16), a2);
    llvm::MachineOperand::setReg(*(_QWORD *)(a2 + 32) + 96, *(_DWORD *)(*(_QWORD *)(v514 + 32) + 36));
    if ((_DWORD)v516 != v508)
      *(_QWORD *)(*(_QWORD *)(a2 + 32) + 144) = v516;
LABEL_2063:
    (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2);
    return 1;
  }
  if (v4 != 317)
    return sub_1C6037A10((uint64_t *)v3, a2);
  v7 = (uint64_t *)v3;
  v8 = a2;
  v9 = 1;
LABEL_16:
  if (!sub_1C603A154(v7, v8, v9))
    return sub_1C6037A10((uint64_t *)v3, a2);
  return 1;
}

uint64_t sub_1C49B9CEC(int a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v7;
  int v8;
  unsigned int *v10;
  uint64_t v11;
  _DWORD *v12;

  v2 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  if (a1 >= 0)
    v2 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * a1);
  v3 = *v2;
  if (!*v2)
    return 1;
  while ((*(_BYTE *)(v3 + 3) & 1) != 0)
  {
    v3 = *(_QWORD *)(v3 + 24);
    if (!v3)
      return 1;
  }
  v7 = *(_QWORD *)(v3 + 8);
LABEL_8:
  v8 = **(unsigned __int16 **)(v7 + 16);
  if ((v8 - 177) <= 7 && ((1 << (v8 + 79)) & 0x87) != 0)
  {
    v10 = *(unsigned int **)(v7 + 32);
    goto LABEL_17;
  }
  if (v8 != 51 && v8 != 336)
  {
    if ((v8 & 0xFFFE) == 0x74)
    {
      v11 = *(unsigned int *)(v7 + 40);
      if (!(_DWORD)v11)
        return 0;
      v12 = (_DWORD *)(*(_QWORD *)(v7 + 32) + 16);
      while (*((_BYTE *)v12 - 16) != 17)
      {
        v12 += 8;
        if (!--v11)
          goto LABEL_29;
      }
      if (*v12 == 2131)
        goto LABEL_18;
    }
LABEL_29:
    if (v8 != 163 || *(_DWORD *)(*(_QWORD *)(v7 + 32) + 36) == *(_DWORD *)(*(_QWORD *)(v7 + 32) + 68))
      return 0;
LABEL_18:
    while (1)
    {
      v3 = *(_QWORD *)(v3 + 24);
      if (!v3)
        return 1;
      if ((*(_BYTE *)(v3 + 3) & 1) == 0 && *(_QWORD *)(v3 + 8) != v7)
      {
        v7 = *(_QWORD *)(v3 + 8);
        goto LABEL_8;
      }
    }
  }
  v10 = *(unsigned int **)(v7 + 32);
  if (v10[17] != a1 && v10[25] != a1)
  {
LABEL_17:
    if ((sub_1C49B9CEC(v10[1], a2) & 1) != 0)
      goto LABEL_18;
  }
  return 0;
}

uint64_t sub_1C49B9E58(_DWORD **a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v3 = *a3;
  if ((int)v3 >= 0)
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v3);
  else
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  v5 = *v4;
  if (!v5)
    return 0;
  v7 = v5;
  if (((*(_BYTE *)(v5 + 3) & 1) != 0 || (v7 = *(_QWORD *)(v5 + 24)) != 0 && (*(_BYTE *)(v7 + 3) & 1) != 0)
    && (v8 = *(_QWORD *)(v7 + 8)) != 0
    && **(_WORD **)(v8 + 16) == 179
    && *(_DWORD *)(v8 + 40) == 2)
  {
    ++a1;
  }
  else
  {
    if ((*(_BYTE *)(v5 + 3) & 1) == 0)
    {
      v5 = *(_QWORD *)(v5 + 24);
      if (!v5 || (*(_BYTE *)(v5 + 3) & 1) == 0)
        return 0;
    }
    v8 = *(_QWORD *)(v5 + 8);
    if (!v8 || **(_WORD **)(v8 + 16) != 178 || *(_DWORD *)(v8 + 40) != 2)
      return 0;
  }
  **a1 = *(_DWORD *)(*(_QWORD *)(v8 + 32) + 36);
  return 1;
}

_QWORD *sub_1C49B9F28(_QWORD *result, unint64_t a2, int __c)
{
  void **v5;
  unint64_t *v6;
  char *v7;
  unint64_t v8;
  size_t v9;

  v5 = (void **)result;
  if (result[2] >= a2)
  {
    v7 = (char *)*result;
    v6 = result + 1;
    v8 = result[1];
    if (v8 >= a2)
      v9 = a2;
    else
      v9 = result[1];
    if (v9)
      result = memset(v7, __c, v9);
    if (a2 > v8)
      result = memset(&v7[v8], __c, a2 - v8);
  }
  else
  {
    result[1] = 0;
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, a2, 1);
    result = memset(*v5, __c, a2);
    v6 = (unint64_t *)(v5 + 1);
  }
  *v6 = a2;
  return result;
}

int *sub_1C49B9FD4(int *result, int *a2, uint64_t a3, char a4)
{
  int *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int *v18;
  int *v19;
  int *v20;
  unsigned int v21;
  int *v22;
  unsigned int v23;
  int *v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  unsigned int v33;
  int *v34;
  unsigned int v35;
  int *v36;
  int *v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  int *v55;
  BOOL v57;
  uint64_t v58;
  int *v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  char *v65;
  int v66;
  int *v67;
  int64_t v68;
  int64_t v69;
  int64_t v70;
  uint64_t v71;
  int *v72;
  unsigned int v73;
  unsigned int v74;
  int *v75;
  int v76;
  unsigned int v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  int *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  unsigned int v93;
  int *v94;
  int *v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  int *v101;
  int *v102;
  unsigned int v103;
  int v104;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*(a2 - 1) < v8[1])
        {
          v43 = *v8;
          *v8 = *(a2 - 2);
          *(a2 - 2) = v43;
          v44 = v8[1];
          v8[1] = *(a2 - 1);
          *(a2 - 1) = v44;
        }
        return result;
      case 3:
        return sub_1C49BA72C(v8, v8 + 2, a2 - 2);
      case 4:
        return sub_1C49BA9FC(v8, v8 + 2, v8 + 4, a2 - 2);
      case 5:
        result = sub_1C49BA9FC(v8, v8 + 2, v8 + 4, v8 + 6);
        if (*(a2 - 1) < v8[7])
        {
          v45 = v8[6];
          v8[6] = *(a2 - 2);
          *(a2 - 2) = v45;
          v46 = v8[7];
          v8[7] = *(a2 - 1);
          *(a2 - 1) = v46;
          v47 = v8[7];
          v48 = v8[5];
          if (v47 < v48)
          {
            v49 = v8[6];
            v50 = v8[3];
            v51 = v8[4];
            v8[4] = v49;
            v8[5] = v47;
            v8[6] = v51;
            v8[7] = v48;
            if (v47 < v50)
            {
              v52 = v8[1];
              v53 = v8[2];
              v8[2] = v49;
              v8[3] = v47;
              v8[4] = v53;
              v8[5] = v50;
              if (v47 < v52)
              {
                v54 = *v8;
                *v8 = v49;
                v8[1] = v47;
                v8[2] = v54;
                v8[3] = v52;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v55 = v8 + 2;
          v57 = v8 == a2 || v55 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v57)
            {
              v58 = 0;
              v59 = v8;
              do
              {
                v60 = v59[3];
                v61 = v59[1];
                v59 = v55;
                if (v60 < v61)
                {
                  v62 = *v55;
                  v63 = v59[1];
                  v64 = v58;
                  while (1)
                  {
                    v65 = (char *)v8 + v64;
                    v66 = *(int *)((char *)v8 + v64 + 4);
                    *((_DWORD *)v65 + 2) = *(int *)((char *)v8 + v64);
                    *((_DWORD *)v65 + 3) = v66;
                    if (!v64)
                      break;
                    v64 -= 8;
                    if (*((_DWORD *)v65 - 1) <= v63)
                    {
                      v67 = (int *)((char *)v8 + v64 + 8);
                      goto LABEL_78;
                    }
                  }
                  v67 = v8;
LABEL_78:
                  *v67 = v62;
                  v67[1] = v63;
                }
                v55 = v59 + 2;
                v58 += 8;
              }
              while (v59 + 2 != a2);
            }
          }
          else if (!v57)
          {
            v96 = v8 + 3;
            do
            {
              v97 = v7[3];
              v98 = v7[1];
              v7 = v55;
              if (v97 < v98)
              {
                v99 = *(_QWORD *)v55;
                v100 = HIDWORD(*(_QWORD *)v7);
                v101 = v96;
                do
                {
                  v102 = v101;
                  v103 = *(v101 - 4);
                  *(v101 - 1) = *(v101 - 3);
                  v104 = *(v101 - 2);
                  v101 -= 2;
                  *v102 = v104;
                }
                while (v103 > v100);
                *(v101 - 1) = v99;
                *v101 = v100;
              }
              v55 = v7 + 2;
              v96 += 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v68 = (unint64_t)(v10 - 2) >> 1;
            v69 = v68;
            do
            {
              v70 = v69;
              if (v68 >= v69)
              {
                v71 = (2 * v69) | 1;
                v72 = &v8[2 * v71];
                if (2 * v70 + 2 < v10)
                {
                  v73 = v72[1];
                  v74 = v72[3];
                  v72 += 2 * (v73 < v74);
                  if (v73 < v74)
                    v71 = 2 * v70 + 2;
                }
                if (v72[1] >= v8[2 * v70 + 1])
                {
                  v75 = &v8[2 * v70];
                  v76 = *v75;
                  v77 = v75[1];
                  do
                  {
                    v78 = v75;
                    v75 = v72;
                    *v78 = *v72;
                    v78[1] = v72[1];
                    if (v68 < v71)
                      break;
                    v79 = (2 * v71) | 1;
                    v72 = &v8[2 * v79];
                    v80 = 2 * v71 + 2;
                    if (v80 < v10)
                    {
                      v81 = v72[1];
                      result = (int *)v72[3];
                      v72 += 2 * (v81 < result);
                      if (v81 < result)
                        v79 = v80;
                    }
                    v71 = v79;
                  }
                  while (v72[1] >= v77);
                  *v75 = v76;
                  v75[1] = v77;
                }
              }
              v69 = v70 - 1;
            }
            while (v70);
            do
            {
              v82 = 0;
              v83 = *(_QWORD *)v8;
              v84 = v8;
              do
              {
                v85 = &v84[2 * v82 + 2];
                v86 = (2 * v82) | 1;
                v87 = 2 * v82 + 2;
                if (v87 < v10)
                {
                  v88 = v85[1];
                  v89 = v85[3];
                  v85 += 2 * (v88 < v89);
                  if (v88 < v89)
                    v86 = v87;
                }
                *v84 = *v85;
                v84[1] = v85[1];
                v84 = v85;
                v82 = v86;
              }
              while (v86 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v85 == a2 - 2)
              {
                *(_QWORD *)v85 = v83;
              }
              else
              {
                *v85 = *(a2 - 2);
                v85[1] = *(a2 - 1);
                *((_QWORD *)a2 - 1) = v83;
                v90 = (char *)v85 - (char *)v8 + 8;
                if (v90 >= 9)
                {
                  v91 = (((unint64_t)v90 >> 3) - 2) >> 1;
                  if (v8[2 * v91 + 1] < v85[1])
                  {
                    v92 = *v85;
                    v93 = v85[1];
                    do
                    {
                      v94 = v85;
                      v85 = &v8[2 * v91];
                      *v94 = *v85;
                      v94[1] = v85[1];
                      if (!v91)
                        break;
                      v91 = (v91 - 1) >> 1;
                    }
                    while (v8[2 * v91 + 1] < v93);
                    *v85 = v92;
                    v85[1] = v93;
                  }
                }
              }
              a2 -= 2;
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[2 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
          result = sub_1C49BA72C(&v7[2 * ((unint64_t)v10 >> 1)], v7, a2 - 2);
        }
        else
        {
          sub_1C49BA72C(v7, &v7[2 * ((unint64_t)v10 >> 1)], a2 - 2);
          sub_1C49BA72C(v7 + 2, v12 - 2, a2 - 4);
          sub_1C49BA72C(v7 + 4, &v7[2 * v11 + 2], a2 - 6);
          result = sub_1C49BA72C(v12 - 2, v12, &v7[2 * v11 + 2]);
          v13 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        if ((a4 & 1) == 0 && *(v7 - 1) >= v7[1])
        {
          v30 = *(_QWORD *)v7;
          v31 = HIDWORD(*(_QWORD *)v7);
          if (*(a2 - 1) <= v31)
          {
            v34 = v7 + 2;
            do
            {
              v8 = v34;
              if (v34 >= a2)
                break;
              v35 = v34[1];
              v34 += 2;
            }
            while (v35 <= v31);
          }
          else
          {
            v32 = v7;
            do
            {
              v8 = v32 + 2;
              v33 = v32[3];
              v32 += 2;
            }
            while (v33 <= v31);
          }
          v36 = a2;
          if (v8 < a2)
          {
            v37 = a2;
            do
            {
              v36 = v37 - 2;
              v38 = *(v37 - 1);
              v37 -= 2;
            }
            while (v38 > v31);
          }
          while (v8 < v36)
          {
            v39 = *v8;
            *v8 = *v36;
            *v36 = v39;
            v40 = v8[1];
            v8[1] = v36[1];
            v36[1] = v40;
            do
            {
              v41 = v8[3];
              v8 += 2;
            }
            while (v41 <= v31);
            do
            {
              v42 = *(v36 - 1);
              v36 -= 2;
            }
            while (v42 > v31);
          }
          if (v8 - 2 != v7)
          {
            *v7 = *(v8 - 2);
            v7[1] = *(v8 - 1);
          }
          a4 = 0;
          *(v8 - 2) = v30;
          *(v8 - 1) = v31;
          continue;
        }
        v14 = 0;
        v15 = *(_QWORD *)v7;
        v16 = HIDWORD(*(_QWORD *)v7);
        do
        {
          v17 = v7[v14 + 3];
          v14 += 2;
        }
        while (v17 < v16);
        v18 = &v7[v14];
        v19 = a2;
        if (v14 == 2)
        {
          v22 = a2;
          while (v18 < v22)
          {
            v20 = v22 - 2;
            v23 = *(v22 - 1);
            v22 -= 2;
            if (v23 < v16)
              goto LABEL_21;
          }
          v20 = v22;
        }
        else
        {
          do
          {
            v20 = v19 - 2;
            v21 = *(v19 - 1);
            v19 -= 2;
          }
          while (v21 >= v16);
        }
LABEL_21:
        v8 = v18;
        if (v18 < v20)
        {
          v24 = v20;
          do
          {
            v25 = *v8;
            *v8 = *v24;
            *v24 = v25;
            v26 = v8[1];
            v8[1] = v24[1];
            v24[1] = v26;
            do
            {
              v27 = v8[3];
              v8 += 2;
            }
            while (v27 < v16);
            do
            {
              v28 = *(v24 - 1);
              v24 -= 2;
            }
            while (v28 >= v16);
          }
          while (v8 < v24);
        }
        if (v8 - 2 != v7)
        {
          *v7 = *(v8 - 2);
          v7[1] = *(v8 - 1);
        }
        *(v8 - 2) = v15;
        *(v8 - 1) = v16;
        if (v18 < v20)
        {
LABEL_32:
          result = (int *)sub_1C49B9FD4(v7, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v29 = sub_1C49BA808(v7, v8 - 2);
        result = (int *)sub_1C49BA808(v8, a2);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 2;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

int *sub_1C49BA72C(int *result, int *a2, int *a3)
{
  int *v3;
  unsigned int v4;
  int *v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;

  v3 = a2 + 1;
  v4 = a2[1];
  v5 = result + 1;
  v6 = a3[1];
  if (v4 < result[1])
  {
    v7 = *result;
    if (v6 >= v4)
    {
      *result = *a2;
      *a2 = v7;
      v11 = result[1];
      result[1] = a2[1];
      a2[1] = v11;
      if (a3[1] >= v11)
        return result;
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      v5 = a2 + 1;
    }
    else
    {
      *result = *a3;
      *a3 = v7;
    }
    v3 = a3 + 1;
    goto LABEL_10;
  }
  if (v6 < v4)
  {
    v8 = *a2;
    *a2 = *a3;
    *a3 = v8;
    v9 = a2[1];
    a2[1] = a3[1];
    a3[1] = v9;
    if (a2[1] < *v5)
    {
      v10 = *result;
      *result = *a2;
      *a2 = v10;
LABEL_10:
      v13 = *v5;
      *v5 = *v3;
      *v3 = v13;
    }
  }
  return result;
}

BOOL sub_1C49BA808(int *a1, int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  int *v8;
  int *v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  int *v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 1) < a1[1])
      {
        v6 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v6;
        v7 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1C49BA72C(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_1C49BA9FC(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_1C49BA9FC(a1, a1 + 2, a1 + 4, a1 + 6);
      if (*(a2 - 1) < a1[7])
      {
        v18 = a1[6];
        a1[6] = *(a2 - 2);
        *(a2 - 2) = v18;
        v19 = a1[7];
        a1[7] = *(a2 - 1);
        *(a2 - 1) = v19;
        v20 = a1[7];
        v21 = a1[5];
        if (v20 < v21)
        {
          v22 = a1[6];
          v23 = a1[3];
          v24 = a1[4];
          a1[4] = v22;
          a1[5] = v20;
          a1[6] = v24;
          a1[7] = v21;
          if (v20 < v23)
          {
            v25 = a1[1];
            v26 = a1[2];
            a1[2] = v22;
            a1[3] = v20;
            a1[4] = v26;
            a1[5] = v23;
            if (v20 < v25)
            {
              v27 = *a1;
              *a1 = v22;
              a1[1] = v20;
              a1[2] = v27;
              a1[3] = v25;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 4;
      sub_1C49BA72C(a1, a1 + 2, a1 + 4);
      v9 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    if (v9[1] < v8[1])
    {
      v12 = *v9;
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        v15 = (int *)((char *)a1 + v14);
        v16 = *(int *)((char *)a1 + v14 + 20);
        v15[6] = *(int *)((char *)a1 + v14 + 16);
        v15[7] = v16;
        if (v14 == -16)
          break;
        v14 -= 8;
        if (v15[3] <= v13)
        {
          v17 = (int *)((char *)a1 + v14 + 24);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      v17[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 8;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

int *sub_1C49BA9FC(int *a1, int *a2, int *a3, int *a4)
{
  int *result;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;

  result = sub_1C49BA72C(a1, a2, a3);
  if (a4[1] < a3[1])
  {
    v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    if (a3[1] < a2[1])
    {
      v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      if (a2[1] < a1[1])
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
        v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

uint64_t sub_1C49BAAC0(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  char v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  char v37;
  char v38;
  unint64_t v39;
  void *v40;
  int v41;
  int v42;
  void *v43;
  int v44;
  void *v45;
  uint64_t v46;
  _DWORD v47[4];
  uint64_t v48;

  v7 = 0;
  v48 = *MEMORY[0x1E0C80C00];
  v8 = a1 & 0x7FFFFFFF;
  if ((a1 & 0x80000000) != 0
    && v8 < *(unsigned int *)(a2 + 432)
    && (v7 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * v8), (v7 & 2) != 0))
  {
    v37 = 35;
    v38 = 19;
    if ((v7 & 4) == 0)
      v37 = 19;
    v39 = v7 >> v37;
    if ((v7 & 4) == 0)
      v38 = 3;
    if ((v7 & 1) != 0)
      v38 = 3;
    v10 = (void *)((8 * (unsigned __int16)(v7 >> v38)) & 0xFFFFF8000007FFFFLL | ((v39 & 0xFFFFFF) << 19) | 2);
    v11 = 0x800000000000000;
  }
  else
  {
    v9 = 3;
    if ((v7 & 1) == 0)
      v9 = 19;
    v10 = (void *)(v7 & 0x8000000000000000 | (8 * (v7 >> v9)) | 1);
    v11 = 0x8000000000000;
  }
  v12 = *(_QWORD *)(a2 + 24) + 16 * v8 + 8;
  v13 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * a1);
  if ((a1 & 0x80000000) != 0)
    v13 = (uint64_t *)v12;
  v14 = *v13;
  if (v14 && ((*(_BYTE *)(v14 + 3) & 1) != 0 || (v14 = *(_QWORD *)(v14 + 24)) != 0 && (*(_BYTE *)(v14 + 3) & 1) != 0))
    v15 = *(_QWORD *)(v14 + 8);
  else
    v15 = 0;
  if ((v7 & v11) != 0)
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
  v16 = **(unsigned __int16 **)(v15 + 16);
  if (v16 == 119)
  {
    v45 = v47;
    v46 = 0x400000000;
    if ((sub_1C49BAAC0(*(unsigned int *)(*(_QWORD *)(v15 + 32) + 36), a2, a3, &v45) & 1) != 0)
    {
      if ((_DWORD)v46)
      {
        v22 = 0;
        do
        {
          v43 = v10;
          v44 = 0;
          LODWORD(v40) = *((_DWORD *)v45 + v22);
          v42 = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(a3, 119, &v43, 1, &v40, 1, 0);
          v24 = *(_DWORD *)(*(_QWORD *)(v23 + 32) + 4);
          v25 = *(unsigned int *)(a4 + 8);
          if (v25 >= *(unsigned int *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v25 + 1, 4);
            v25 = *(unsigned int *)(a4 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a4 + 4 * v25) = v24;
          ++*(_DWORD *)(a4 + 8);
          ++v22;
        }
        while (v22 < v46);
      }
      if (v45 != v47)
        free(v45);
      goto LABEL_34;
    }
    if (v45 != v47)
      free(v45);
    v16 = **(unsigned __int16 **)(v15 + 16);
  }
  v17 = (unsigned __int16)(v7 >> 3);
  if (v16 == 78)
  {
    if (*(_DWORD *)(v15 + 40) == v17 + 1)
    {
      if (v17)
      {
        v31 = 0;
        v32 = 32 * v17;
        do
        {
          v40 = v10;
          v41 = 0;
          LODWORD(v45) = *(_DWORD *)(*(_QWORD *)(v15 + 32) + v31 + 36);
          v47[0] = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(a3, 119, &v40, 1, &v45, 1, 0);
          v34 = *(_DWORD *)(*(_QWORD *)(v33 + 32) + 4);
          v35 = *(unsigned int *)(a4 + 8);
          if (v35 >= *(unsigned int *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v35 + 1, 4);
            v35 = *(unsigned int *)(a4 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a4 + 4 * v35) = v34;
          ++*(_DWORD *)(a4 + 8);
          v31 += 32;
        }
        while (v32 != v31);
      }
      goto LABEL_34;
    }
LABEL_50:
    v18 = 0;
    v26 = 0;
    return v18 | (v26 << 8);
  }
  if (v16 != 77)
  {
    if (v16 == 68)
    {
      v45 = v10;
      LODWORD(v46) = 0;
      v18 = 1;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 68, &v45, 1, 0, 0, 0);
      if (!v17)
      {
LABEL_35:
        v26 = 1;
        return v18 | (v26 << 8);
      }
      v20 = *(_DWORD *)(*(_QWORD *)(v19 + 32) + 4);
      v21 = *(_DWORD *)(a4 + 8);
      do
      {
        if (v21 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v21 + 1, 4);
          v21 = *(_DWORD *)(a4 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a4 + 4 * v21) = v20;
        v21 = *(_DWORD *)(a4 + 8) + 1;
        *(_DWORD *)(a4 + 8) = v21;
        --v17;
      }
      while (v17);
LABEL_34:
      v18 = 1;
      goto LABEL_35;
    }
    goto LABEL_50;
  }
  if (*(_DWORD *)(v15 + 40) != v17 + 1)
    goto LABEL_50;
  if (v17)
  {
    v27 = 0;
    v28 = *(_DWORD *)(a4 + 8);
    v29 = 32 * v17;
    do
    {
      v30 = *(_DWORD *)(*(_QWORD *)(v15 + 32) + v27 + 36);
      if (v28 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v28 + 1, 4);
        v28 = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v28) = v30;
      v28 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v28;
      v27 += 32;
    }
    while (v29 != v27);
  }
  v26 = 0;
  v18 = 1;
  return v18 | (v26 << 8);
}

uint64_t sub_1C49BAF38(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t v4;
  int v6;

  v6 = a3;
  v3 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
  if (a3 >= 0)
    v3 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * a3);
  v4 = *v3;
  if (!v4)
    return 0;
  while ((*(_BYTE *)(v4 + 3) & 1) != 0)
  {
    v4 = *(_QWORD *)(v4 + 24);
    if (!v4)
      return 0;
  }
  while (1)
  {
    v4 = *(_QWORD *)(v4 + 24);
    if (!v4)
      break;
    if ((*(_BYTE *)(v4 + 3) & 1) == 0)
      return 0;
  }
  return sub_1C49BAFAC(a1, a2, (unsigned int *)&v6);
}

uint64_t sub_1C49BAFAC(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  v3 = *a3;
  if ((int)v3 >= 0)
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v3);
  else
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  v5 = *v4;
  if (!v5)
    return 0;
  if ((*(_BYTE *)(v5 + 3) & 1) == 0)
  {
    v5 = *(_QWORD *)(v5 + 24);
    if (!v5 || (*(_BYTE *)(v5 + 3) & 1) == 0)
      return 0;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7 || **(_WORD **)(v7 + 16) != 66 || *(_DWORD *)(v7 + 40) != 3)
    return 0;
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_DWORD **)(a1 + 8);
  **(_DWORD **)a1 = *(_DWORD *)(v8 + 36);
  *v9 = *(_DWORD *)(v8 + 68);
  return 1;
}

uint64_t sub_1C49BB03C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v3 = *a3;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 272);
  if ((int)v3 >= 0)
    v6 = (uint64_t *)(v5 + 8 * v3);
  else
    v6 = (uint64_t *)(v4 + 16 * (v3 & 0x7FFFFFFF) + 8);
  v7 = *v6;
  if (!v7)
    return 0;
  if ((*(_BYTE *)(v7 + 3) & 1) == 0)
  {
    v7 = *(_QWORD *)(v7 + 24);
    if (!v7 || (*(_BYTE *)(v7 + 3) & 1) == 0)
      return 0;
  }
  v9 = *(_QWORD *)(v7 + 8);
  if (!v9 || **(_WORD **)(v9 + 16) != 163 || *(_DWORD *)(v9 + 40) != 3)
    return 0;
  v10 = *(unsigned int *)(*(_QWORD *)(v9 + 32) + 36);
  v11 = (uint64_t *)(v4 + 16 * (v10 & 0x7FFFFFFF) + 8);
  v12 = (uint64_t *)(v5 + 8 * v10);
  if ((int)v10 >= 0)
    v11 = v12;
  v13 = *v11;
  if (!v13)
    goto LABEL_15;
  if ((*(_BYTE *)(v13 + 3) & 1) == 0)
  {
    v13 = *(_QWORD *)(v13 + 24);
    if (!v13 || (*(_BYTE *)(v13 + 3) & 1) == 0)
      goto LABEL_15;
  }
  v30 = *(_QWORD *)(v13 + 8);
  if (!v30 || **(_WORD **)(v30 + 16) != 163 || *(_DWORD *)(v30 + 40) != 3)
    goto LABEL_15;
  v31 = *(_QWORD *)(v30 + 32);
  v32 = *(_QWORD **)(a1 + 8);
  **(_DWORD **)a1 = *(_DWORD *)(v31 + 36);
  v33 = *(unsigned int *)(v31 + 68);
  if ((int)v33 >= 0)
    v34 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v33);
  else
    v34 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v33 & 0x7FFFFFFF) + 8);
  v35 = *v34;
  if ((*(_BYTE *)(v35 + 3) & 1) == 0)
    v35 = *(_QWORD *)(v35 + 24);
  v36 = *(_QWORD *)(v35 + 8);
  if (**(_WORD **)(v36 + 16) != 121)
  {
    *v32 = 0;
LABEL_63:
    v44 = *(unsigned int *)(*(_QWORD *)(v30 + 32) + 36);
    v45 = *(_QWORD **)(a1 + 8);
    if ((int)v44 >= 0)
      v46 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v44);
    else
      v46 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v44 & 0x7FFFFFFF) + 8);
    v47 = *v46;
    if ((*(_BYTE *)(v47 + 3) & 1) == 0)
      v47 = *(_QWORD *)(v47 + 24);
    v48 = *(_QWORD *)(v47 + 8);
    if (**(_WORD **)(v48 + 16) != 121)
      goto LABEL_77;
    v49 = *(_QWORD *)(*(_QWORD *)(v48 + 32) + 48);
    *v45 = v49;
    if (!v49)
      goto LABEL_15;
    **(_DWORD **)a1 = *(_DWORD *)(*(_QWORD *)(v30 + 32) + 68);
    goto LABEL_71;
  }
  v43 = *(_QWORD *)(*(_QWORD *)(v36 + 32) + 48);
  *v32 = v43;
  if (!v43)
    goto LABEL_63;
LABEL_71:
  v50 = *(unsigned int *)(*(_QWORD *)(v9 + 32) + 68);
  v45 = *(_QWORD **)(a1 + 16);
  if ((int)v50 >= 0)
    v51 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v50);
  else
    v51 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v50 & 0x7FFFFFFF) + 8);
  v52 = *v51;
  if ((*(_BYTE *)(v52 + 3) & 1) == 0)
    v52 = *(_QWORD *)(v52 + 24);
  v53 = *(_QWORD *)(v52 + 8);
  if (**(_WORD **)(v53 + 16) != 121)
  {
LABEL_77:
    *v45 = 0;
    goto LABEL_15;
  }
  v54 = *(_QWORD *)(*(_QWORD *)(v53 + 32) + 48);
  *v45 = v54;
  if (v54)
    return 1;
LABEL_15:
  v14 = *(unsigned int *)(*(_QWORD *)(v9 + 32) + 36);
  v15 = *(_QWORD **)(a1 + 16);
  if ((int)v14 >= 0)
    v16 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v14);
  else
    v16 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8);
  v17 = *v16;
  if ((*(_BYTE *)(v17 + 3) & 1) == 0)
    v17 = *(_QWORD *)(v17 + 24);
  v18 = *(_QWORD *)(v17 + 8);
  if (**(_WORD **)(v18 + 16) != 121)
    goto LABEL_21;
  v19 = *(_QWORD *)(*(_QWORD *)(v18 + 32) + 48);
  *v15 = v19;
  if (!v19)
    return 0;
  v20 = *(unsigned int *)(*(_QWORD *)(v9 + 32) + 68);
  v21 = (uint64_t *)((int)v20 >= 0 ? *(_QWORD *)(a2 + 272) + 8 * v20 : *(_QWORD *)(a2 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
  v22 = *v21;
  if (!v22)
    return 0;
  if ((*(_BYTE *)(v22 + 3) & 1) == 0)
  {
    v22 = *(_QWORD *)(v22 + 24);
    if (!v22 || (*(_BYTE *)(v22 + 3) & 1) == 0)
      return 0;
  }
  v23 = *(_QWORD *)(v22 + 8);
  if (!v23 || **(_WORD **)(v23 + 16) != 163 || *(_DWORD *)(v23 + 40) != 3)
    return 0;
  v24 = *(_QWORD *)(v23 + 32);
  v25 = *(_QWORD **)(a1 + 8);
  **(_DWORD **)a1 = *(_DWORD *)(v24 + 36);
  v26 = *(unsigned int *)(v24 + 68);
  if ((int)v26 >= 0)
    v27 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v26);
  else
    v27 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v26 & 0x7FFFFFFF) + 8);
  v28 = *v27;
  if ((*(_BYTE *)(v28 + 3) & 1) == 0)
    v28 = *(_QWORD *)(v28 + 24);
  v29 = *(_QWORD *)(v28 + 8);
  if (**(_WORD **)(v29 + 16) != 121)
  {
    *v25 = 0;
    goto LABEL_54;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v29 + 32) + 48);
  *v25 = v37;
  if (!v37)
  {
LABEL_54:
    v38 = *(unsigned int *)(*(_QWORD *)(v23 + 32) + 36);
    v15 = *(_QWORD **)(a1 + 8);
    if ((int)v38 >= 0)
      v39 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v38);
    else
      v39 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v38 & 0x7FFFFFFF) + 8);
    v40 = *v39;
    if ((*(_BYTE *)(v40 + 3) & 1) == 0)
      v40 = *(_QWORD *)(v40 + 24);
    v41 = *(_QWORD *)(v40 + 8);
    if (**(_WORD **)(v41 + 16) != 121)
    {
LABEL_21:
      result = 0;
      *v15 = 0;
      return result;
    }
    v42 = *(_QWORD *)(*(_QWORD *)(v41 + 32) + 48);
    *v15 = v42;
    if (v42)
    {
      **(_DWORD **)a1 = *(_DWORD *)(*(_QWORD *)(v23 + 32) + 68);
      return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1C49BB41C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v3 = *a3;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 272);
  if ((int)v3 >= 0)
    v6 = (uint64_t *)(v5 + 8 * v3);
  else
    v6 = (uint64_t *)(v4 + 16 * (v3 & 0x7FFFFFFF) + 8);
  v7 = *v6;
  if (!v7)
    return 0;
  if ((*(_BYTE *)(v7 + 3) & 1) == 0)
  {
    v7 = *(_QWORD *)(v7 + 24);
    if (!v7 || (*(_BYTE *)(v7 + 3) & 1) == 0)
      return 0;
  }
  v9 = *(_QWORD *)(v7 + 8);
  if (!v9 || **(_WORD **)(v9 + 16) != 163 || *(_DWORD *)(v9 + 40) != 3)
    return 0;
  v11 = *(_QWORD *)(v9 + 32);
  v10 = (uint64_t *)(v9 + 32);
  v12 = *(unsigned int *)(v11 + 36);
  v13 = (uint64_t *)(v4 + 16 * (v12 & 0x7FFFFFFF) + 8);
  v14 = (uint64_t *)(v5 + 8 * v12);
  if ((int)v12 >= 0)
    v13 = v14;
  v15 = *v13;
  if (v15)
  {
    if ((*(_BYTE *)(v15 + 3) & 1) != 0 || (v15 = *(_QWORD *)(v15 + 24)) != 0 && (*(_BYTE *)(v15 + 3) & 1) != 0)
    {
      v27 = *(_QWORD *)(v15 + 8);
      if (v27)
      {
        if (**(_WORD **)(v27 + 16) == 165 && *(_DWORD *)(v27 + 40) == 3)
        {
          v28 = *(_QWORD *)(v27 + 32);
          v29 = *(_QWORD **)(a1 + 8);
          **(_DWORD **)a1 = *(_DWORD *)(v28 + 36);
          v30 = *(unsigned int *)(v28 + 68);
          if ((int)v30 >= 0)
            v31 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v30);
          else
            v31 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v30 & 0x7FFFFFFF) + 8);
          v32 = *v31;
          if ((*(_BYTE *)(v32 + 3) & 1) == 0)
            v32 = *(_QWORD *)(v32 + 24);
          v33 = *(_QWORD *)(v32 + 8);
          if (**(_WORD **)(v33 + 16) == 121)
          {
            v40 = *(_QWORD *)(*(_QWORD *)(v33 + 32) + 48);
            *v29 = v40;
            if (v40)
            {
LABEL_65:
              a1 += 16;
LABEL_66:
              **(_DWORD **)a1 = *(_DWORD *)(*v10 + 68);
              return 1;
            }
          }
          else
          {
            *v29 = 0;
          }
          v41 = *(unsigned int *)(*(_QWORD *)(v27 + 32) + 36);
          v42 = *(_QWORD **)(a1 + 8);
          if ((int)v41 >= 0)
            v43 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v41);
          else
            v43 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v41 & 0x7FFFFFFF) + 8);
          v44 = *v43;
          if ((*(_BYTE *)(v44 + 3) & 1) == 0)
            v44 = *(_QWORD *)(v44 + 24);
          v45 = *(_QWORD *)(v44 + 8);
          if (**(_WORD **)(v45 + 16) != 121)
          {
            *v42 = 0;
            goto LABEL_15;
          }
          v47 = *(_QWORD *)(*(_QWORD *)(v45 + 32) + 48);
          *v42 = v47;
          if (v47)
          {
            **(_DWORD **)a1 = *(_DWORD *)(*(_QWORD *)(v27 + 32) + 68);
            goto LABEL_65;
          }
        }
      }
    }
  }
LABEL_15:
  v16 = *v10;
  **(_DWORD **)(a1 + 16) = *(_DWORD *)(v16 + 36);
  v17 = *(unsigned int *)(v16 + 68);
  if ((int)v17 >= 0)
    v18 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v17);
  else
    v18 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v17 & 0x7FFFFFFF) + 8);
  v19 = *v18;
  if (!v19)
    return 0;
  if ((*(_BYTE *)(v19 + 3) & 1) == 0)
  {
    v19 = *(_QWORD *)(v19 + 24);
    if (!v19 || (*(_BYTE *)(v19 + 3) & 1) == 0)
      return 0;
  }
  v20 = *(_QWORD *)(v19 + 8);
  if (!v20 || **(_WORD **)(v20 + 16) != 165 || *(_DWORD *)(v20 + 40) != 3)
    return 0;
  v21 = *(_QWORD *)(v20 + 32);
  v10 = (uint64_t *)(v20 + 32);
  v22 = *(_QWORD **)(a1 + 8);
  **(_DWORD **)a1 = *(_DWORD *)(v21 + 36);
  v23 = *(unsigned int *)(v21 + 68);
  if ((int)v23 >= 0)
    v24 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v23);
  else
    v24 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8);
  v25 = *v24;
  if ((*(_BYTE *)(v25 + 3) & 1) == 0)
    v25 = *(_QWORD *)(v25 + 24);
  v26 = *(_QWORD *)(v25 + 8);
  if (**(_WORD **)(v26 + 16) != 121)
  {
    *v22 = 0;
    goto LABEL_46;
  }
  v34 = *(_QWORD *)(*(_QWORD *)(v26 + 32) + 48);
  *v22 = v34;
  if (!v34)
  {
LABEL_46:
    v35 = *(unsigned int *)(*v10 + 36);
    v36 = *(_QWORD **)(a1 + 8);
    if ((int)v35 >= 0)
      v37 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v35);
    else
      v37 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v35 & 0x7FFFFFFF) + 8);
    v38 = *v37;
    if ((*(_BYTE *)(v38 + 3) & 1) == 0)
      v38 = *(_QWORD *)(v38 + 24);
    v39 = *(_QWORD *)(v38 + 8);
    if (**(_WORD **)(v39 + 16) != 121)
    {
      result = 0;
      *v36 = 0;
      return result;
    }
    v46 = *(_QWORD *)(*(_QWORD *)(v39 + 32) + 48);
    *v36 = v46;
    if (v46)
      goto LABEL_66;
    return 0;
  }
  return 1;
}

uint64_t sub_1C49BB74C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD **v56;
  _DWORD *v57;
  uint64_t v58;

  v3 = *a3;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 272);
  if ((int)v3 >= 0)
    v6 = (uint64_t *)(v5 + 8 * v3);
  else
    v6 = (uint64_t *)(v4 + 16 * (v3 & 0x7FFFFFFF) + 8);
  v7 = *v6;
  if (!v7)
    return 0;
  if ((*(_BYTE *)(v7 + 3) & 1) == 0)
  {
    v7 = *(_QWORD *)(v7 + 24);
    if (!v7 || (*(_BYTE *)(v7 + 3) & 1) == 0)
      return 0;
  }
  v9 = *(_QWORD *)(v7 + 8);
  if (!v9 || **(_WORD **)(v9 + 16) != 163 || *(_DWORD *)(v9 + 40) != 3)
    return 0;
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int *)(v10 + 36);
  v12 = (uint64_t *)(v4 + 16 * (v11 & 0x7FFFFFFF) + 8);
  v13 = (uint64_t *)(v5 + 8 * v11);
  if ((int)v11 >= 0)
    v12 = v13;
  v14 = *v12;
  if (!v14)
    goto LABEL_15;
  if ((*(_BYTE *)(v14 + 3) & 1) == 0)
  {
    v14 = *(_QWORD *)(v14 + 24);
    if (!v14 || (*(_BYTE *)(v14 + 3) & 1) == 0)
      goto LABEL_15;
  }
  v25 = *(_QWORD *)(v14 + 8);
  if (!v25 || **(_WORD **)(v25 + 16) != 163 || *(_DWORD *)(v25 + 40) != 3)
    goto LABEL_15;
  v26 = *(_QWORD *)(v25 + 32);
  v27 = *(_DWORD **)(a1 + 8);
  **(_DWORD **)a1 = *(_DWORD *)(v26 + 36);
  *v27 = *(_DWORD *)(v26 + 68);
  v28 = *(unsigned int *)(v10 + 68);
  v29 = (uint64_t *)((int)v28 >= 0 ? *(_QWORD *)(a2 + 272) + 8 * v28 : *(_QWORD *)(a2 + 24) + 16 * (v28 & 0x7FFFFFFF) + 8);
  if ((v30 = *v29) == 0
    || (*(_BYTE *)(v30 + 3) & 1) == 0 && ((v30 = *(_QWORD *)(v30 + 24)) == 0 || (*(_BYTE *)(v30 + 3) & 1) == 0)
    || (v31 = *(_QWORD *)(v30 + 8)) == 0
    || **(_WORD **)(v31 + 16) != 165
    || *(_DWORD *)(v31 + 40) != 3)
  {
LABEL_15:
    v15 = *(unsigned int *)(*(_QWORD *)(v9 + 32) + 36);
    if ((int)v15 >= 0)
      v16 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v15);
    else
      v16 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
    v17 = *v16;
    if (!v17)
      return 0;
    if ((*(_BYTE *)(v17 + 3) & 1) == 0)
    {
      v17 = *(_QWORD *)(v17 + 24);
      if (!v17 || (*(_BYTE *)(v17 + 3) & 1) == 0)
        return 0;
    }
    v18 = *(_QWORD *)(v17 + 8);
    if (!v18 || **(_WORD **)(v18 + 16) != 165 || *(_DWORD *)(v18 + 40) != 3)
      return 0;
    v19 = *(_QWORD *)(v18 + 32);
    v20 = *(_QWORD **)(a1 + 24);
    **(_DWORD **)(a1 + 16) = *(_DWORD *)(v19 + 36);
    v21 = *(unsigned int *)(v19 + 68);
    if ((int)v21 >= 0)
      v22 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v21);
    else
      v22 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v21 & 0x7FFFFFFF) + 8);
    v23 = *v22;
    if ((*(_BYTE *)(v23 + 3) & 1) == 0)
      v23 = *(_QWORD *)(v23 + 24);
    v24 = *(_QWORD *)(v23 + 8);
    if (**(_WORD **)(v24 + 16) == 121)
    {
      v38 = *(_QWORD *)(*(_QWORD *)(v24 + 32) + 48);
      *v20 = v38;
      if (v38)
        goto LABEL_73;
    }
    else
    {
      *v20 = 0;
    }
    v39 = *(unsigned int *)(*(_QWORD *)(v18 + 32) + 36);
    v40 = *(_QWORD **)(a1 + 24);
    if ((int)v39 >= 0)
      v41 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v39);
    else
      v41 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8);
    v42 = *v41;
    if ((*(_BYTE *)(v42 + 3) & 1) == 0)
      v42 = *(_QWORD *)(v42 + 24);
    v43 = *(_QWORD *)(v42 + 8);
    if (**(_WORD **)(v43 + 16) != 121)
    {
      result = 0;
      *v40 = 0;
      return result;
    }
    v50 = *(_QWORD *)(*(_QWORD *)(v43 + 32) + 48);
    *v40 = v50;
    if (!v50)
      return 0;
    **(_DWORD **)(a1 + 16) = *(_DWORD *)(*(_QWORD *)(v18 + 32) + 68);
LABEL_73:
    v51 = *(unsigned int *)(*(_QWORD *)(v9 + 32) + 68);
    if ((int)v51 >= 0)
      v52 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v51);
    else
      v52 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v51 & 0x7FFFFFFF) + 8);
    v53 = *v52;
    if (v53)
    {
      if ((*(_BYTE *)(v53 + 3) & 1) != 0 || (v53 = *(_QWORD *)(v53 + 24)) != 0 && (*(_BYTE *)(v53 + 3) & 1) != 0)
      {
        v54 = *(_QWORD *)(v53 + 8);
        if (v54)
        {
          if (**(_WORD **)(v54 + 16) == 163 && *(_DWORD *)(v54 + 40) == 3)
          {
            v55 = *(_QWORD *)(v54 + 32);
            v57 = *(_DWORD **)a1;
            v56 = (_DWORD **)(a1 + 8);
            *v57 = *(_DWORD *)(v55 + 36);
LABEL_86:
            **v56 = *(_DWORD *)(v55 + 68);
            return 1;
          }
        }
      }
    }
    return 0;
  }
  v32 = *(_QWORD *)(v31 + 32);
  v33 = *(_QWORD **)(a1 + 24);
  **(_DWORD **)(a1 + 16) = *(_DWORD *)(v32 + 36);
  v34 = *(unsigned int *)(v32 + 68);
  if ((int)v34 >= 0)
    v35 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v34);
  else
    v35 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v34 & 0x7FFFFFFF) + 8);
  v36 = *v35;
  if ((*(_BYTE *)(v36 + 3) & 1) == 0)
    v36 = *(_QWORD *)(v36 + 24);
  v37 = *(_QWORD *)(v36 + 8);
  if (**(_WORD **)(v37 + 16) != 121)
  {
    *v33 = 0;
    goto LABEL_64;
  }
  v44 = *(_QWORD *)(*(_QWORD *)(v37 + 32) + 48);
  *v33 = v44;
  if (!v44)
  {
LABEL_64:
    v45 = *(unsigned int *)(*(_QWORD *)(v31 + 32) + 36);
    v46 = *(_QWORD **)(a1 + 24);
    if ((int)v45 >= 0)
      v47 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v45);
    else
      v47 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v45 & 0x7FFFFFFF) + 8);
    v48 = *v47;
    if ((*(_BYTE *)(v48 + 3) & 1) == 0)
      v48 = *(_QWORD *)(v48 + 24);
    v49 = *(_QWORD *)(v48 + 8);
    if (**(_WORD **)(v49 + 16) == 121)
    {
      v58 = *(_QWORD *)(*(_QWORD *)(v49 + 32) + 48);
      *v46 = v58;
      if (v58)
      {
        v56 = (_DWORD **)(a1 + 16);
        v55 = *(_QWORD *)(v31 + 32);
        goto LABEL_86;
      }
    }
    else
    {
      *v46 = 0;
    }
    goto LABEL_15;
  }
  return 1;
}

uint64_t sub_1C49BBB6C(_DWORD **a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD **v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;

  v3 = *a3;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 272);
  if ((int)v3 >= 0)
    v6 = (uint64_t *)(v5 + 8 * v3);
  else
    v6 = (uint64_t *)(v4 + 16 * (v3 & 0x7FFFFFFF) + 8);
  v7 = *v6;
  if (!v7)
    return 0;
  if ((*(_BYTE *)(v7 + 3) & 1) == 0)
  {
    v7 = *(_QWORD *)(v7 + 24);
    if (!v7 || (*(_BYTE *)(v7 + 3) & 1) == 0)
      return 0;
  }
  v9 = *(_QWORD *)(v7 + 8);
  if (!v9 || **(_WORD **)(v9 + 16) != 163 || *(_DWORD *)(v9 + 40) != 3)
    return 0;
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int *)(v10 + 36);
  if ((int)v11 >= 0)
    v12 = (uint64_t *)(v5 + 8 * v11);
  else
    v12 = (uint64_t *)(v4 + 16 * (v11 & 0x7FFFFFFF) + 8);
  v13 = *v12;
  if (v13)
  {
    if ((*(_BYTE *)(v13 + 3) & 1) != 0 || (v13 = *(_QWORD *)(v13 + 24)) != 0 && (*(_BYTE *)(v13 + 3) & 1) != 0)
    {
      v28 = *(_QWORD *)(v13 + 8);
      if (v28 && **(_WORD **)(v28 + 16) == 163 && *(_DWORD *)(v28 + 40) == 3)
      {
        v29 = *(_QWORD *)(v28 + 32);
        v30 = a1[1];
        **a1 = *(_DWORD *)(v29 + 36);
        *v30 = *(_DWORD *)(v29 + 68);
        v31 = *(unsigned int *)(v10 + 68);
        v4 = *(_QWORD *)(a2 + 24);
        v5 = *(_QWORD *)(a2 + 272);
        v32 = (uint64_t *)((int)v31 >= 0 ? v5 + 8 * v31 : v4 + 16 * (v31 & 0x7FFFFFFF) + 8);
        v33 = *v32;
        if (v33)
        {
          if ((*(_BYTE *)(v33 + 3) & 1) != 0 || (v33 = *(_QWORD *)(v33 + 24)) != 0 && (*(_BYTE *)(v33 + 3) & 1) != 0)
          {
            v34 = *(_QWORD *)(v33 + 8);
            if (v34)
            {
              if (**(_WORD **)(v34 + 16) == 163 && *(_DWORD *)(v34 + 40) == 3)
              {
                v25 = *(_QWORD *)(v34 + 32);
                *a1[2] = *(_DWORD *)(v25 + 36);
                v26 = a1 + 3;
                goto LABEL_53;
              }
            }
          }
        }
      }
    }
  }
  v14 = *(unsigned int *)(v10 + 36);
  v15 = (uint64_t *)(v4 + 16 * (v14 & 0x7FFFFFFF) + 8);
  v16 = (uint64_t *)(v5 + 8 * v14);
  if ((int)v14 >= 0)
    v15 = v16;
  v17 = *v15;
  if (!v17)
    return 0;
  if ((*(_BYTE *)(v17 + 3) & 1) == 0)
  {
    v17 = *(_QWORD *)(v17 + 24);
    if (!v17 || (*(_BYTE *)(v17 + 3) & 1) == 0)
      return 0;
  }
  v18 = *(_QWORD *)(v17 + 8);
  if (!v18 || **(_WORD **)(v18 + 16) != 163 || *(_DWORD *)(v18 + 40) != 3)
    return 0;
  v19 = *(_QWORD *)(v18 + 32);
  v20 = a1[3];
  *a1[2] = *(_DWORD *)(v19 + 36);
  *v20 = *(_DWORD *)(v19 + 68);
  v21 = *(unsigned int *)(v10 + 68);
  v22 = (uint64_t *)((int)v21 >= 0 ? *(_QWORD *)(a2 + 272) + 8 * v21 : *(_QWORD *)(a2 + 24) + 16 * (v21 & 0x7FFFFFFF) + 8);
  v23 = *v22;
  if (!v23)
    return 0;
  if ((*(_BYTE *)(v23 + 3) & 1) == 0)
  {
    v23 = *(_QWORD *)(v23 + 24);
    if (!v23 || (*(_BYTE *)(v23 + 3) & 1) == 0)
      return 0;
  }
  v24 = *(_QWORD *)(v23 + 8);
  if (!v24 || **(_WORD **)(v24 + 16) != 163 || *(_DWORD *)(v24 + 40) != 3)
    return 0;
  v25 = *(_QWORD *)(v24 + 32);
  v27 = *a1;
  v26 = a1 + 1;
  *v27 = *(_DWORD *)(v25 + 36);
LABEL_53:
  **v26 = *(_DWORD *)(v25 + 68);
  return 1;
}

uint64_t sub_1C49BBDDC(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  v3 = *a3;
  if ((int)v3 >= 0)
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v3);
  else
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  v5 = *v4;
  if (!v5)
    return 0;
  if ((*(_BYTE *)(v5 + 3) & 1) == 0)
  {
    v5 = *(_QWORD *)(v5 + 24);
    if (!v5 || (*(_BYTE *)(v5 + 3) & 1) == 0)
      return 0;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7 || **(_WORD **)(v7 + 16) != 164 || *(_DWORD *)(v7 + 40) != 3)
    return 0;
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_DWORD **)(a1 + 8);
  **(_DWORD **)a1 = *(_DWORD *)(v8 + 36);
  *v9 = *(_DWORD *)(v8 + 68);
  return 1;
}

uint64_t sub_1C49BBE6C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  v3 = *a3;
  if ((int)v3 >= 0)
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v3);
  else
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  v5 = *v4;
  if (!v5)
    return 0;
  if ((*(_BYTE *)(v5 + 3) & 1) == 0)
  {
    v5 = *(_QWORD *)(v5 + 24);
    if (!v5 || (*(_BYTE *)(v5 + 3) & 1) == 0)
      return 0;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7 || **(_WORD **)(v7 + 16) != 165 || *(_DWORD *)(v7 + 40) != 3)
    return 0;
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_DWORD **)(a1 + 8);
  **(_DWORD **)a1 = *(_DWORD *)(v8 + 36);
  *v9 = *(_DWORD *)(v8 + 68);
  return 1;
}

uint64_t sub_1C49BBEFC(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v3 = *a3;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 272);
  if ((int)v3 >= 0)
    v6 = (uint64_t *)(v5 + 8 * v3);
  else
    v6 = (uint64_t *)(v4 + 16 * (v3 & 0x7FFFFFFF) + 8);
  v7 = *v6;
  if (!v7)
    return 0;
  if ((*(_BYTE *)(v7 + 3) & 1) == 0)
  {
    v7 = *(_QWORD *)(v7 + 24);
    if (!v7 || (*(_BYTE *)(v7 + 3) & 1) == 0)
      return 0;
  }
  v9 = *(_QWORD *)(v7 + 8);
  if (!v9 || **(_WORD **)(v9 + 16) != 165 || *(_DWORD *)(v9 + 40) != 3)
    return 0;
  v10 = *(unsigned int *)(*(_QWORD *)(v9 + 32) + 36);
  v11 = (uint64_t *)(v4 + 16 * (v10 & 0x7FFFFFFF) + 8);
  v12 = (uint64_t *)(v5 + 8 * v10);
  if ((int)v10 >= 0)
    v11 = v12;
  v13 = *v11;
  if (!v13)
    goto LABEL_15;
  if ((*(_BYTE *)(v13 + 3) & 1) == 0)
  {
    v13 = *(_QWORD *)(v13 + 24);
    if (!v13 || (*(_BYTE *)(v13 + 3) & 1) == 0)
      goto LABEL_15;
  }
  v30 = *(_QWORD *)(v13 + 8);
  if (!v30 || **(_WORD **)(v30 + 16) != 165 || *(_DWORD *)(v30 + 40) != 3)
    goto LABEL_15;
  v31 = *(_QWORD *)(v30 + 32);
  v32 = *(_QWORD **)(a1 + 8);
  **(_DWORD **)a1 = *(_DWORD *)(v31 + 36);
  v33 = *(unsigned int *)(v31 + 68);
  if ((int)v33 >= 0)
    v34 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v33);
  else
    v34 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v33 & 0x7FFFFFFF) + 8);
  v35 = *v34;
  if ((*(_BYTE *)(v35 + 3) & 1) == 0)
    v35 = *(_QWORD *)(v35 + 24);
  v36 = *(_QWORD *)(v35 + 8);
  if (**(_WORD **)(v36 + 16) != 121)
  {
    *v32 = 0;
LABEL_63:
    v44 = *(unsigned int *)(*(_QWORD *)(v30 + 32) + 36);
    v45 = *(_QWORD **)(a1 + 8);
    if ((int)v44 >= 0)
      v46 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v44);
    else
      v46 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v44 & 0x7FFFFFFF) + 8);
    v47 = *v46;
    if ((*(_BYTE *)(v47 + 3) & 1) == 0)
      v47 = *(_QWORD *)(v47 + 24);
    v48 = *(_QWORD *)(v47 + 8);
    if (**(_WORD **)(v48 + 16) != 121)
      goto LABEL_77;
    v49 = *(_QWORD *)(*(_QWORD *)(v48 + 32) + 48);
    *v45 = v49;
    if (!v49)
      goto LABEL_15;
    **(_DWORD **)a1 = *(_DWORD *)(*(_QWORD *)(v30 + 32) + 68);
    goto LABEL_71;
  }
  v43 = *(_QWORD *)(*(_QWORD *)(v36 + 32) + 48);
  *v32 = v43;
  if (!v43)
    goto LABEL_63;
LABEL_71:
  v50 = *(unsigned int *)(*(_QWORD *)(v9 + 32) + 68);
  v45 = *(_QWORD **)(a1 + 16);
  if ((int)v50 >= 0)
    v51 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v50);
  else
    v51 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v50 & 0x7FFFFFFF) + 8);
  v52 = *v51;
  if ((*(_BYTE *)(v52 + 3) & 1) == 0)
    v52 = *(_QWORD *)(v52 + 24);
  v53 = *(_QWORD *)(v52 + 8);
  if (**(_WORD **)(v53 + 16) != 121)
  {
LABEL_77:
    *v45 = 0;
    goto LABEL_15;
  }
  v54 = *(_QWORD *)(*(_QWORD *)(v53 + 32) + 48);
  *v45 = v54;
  if (v54)
    return 1;
LABEL_15:
  v14 = *(unsigned int *)(*(_QWORD *)(v9 + 32) + 36);
  v15 = *(_QWORD **)(a1 + 16);
  if ((int)v14 >= 0)
    v16 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v14);
  else
    v16 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8);
  v17 = *v16;
  if ((*(_BYTE *)(v17 + 3) & 1) == 0)
    v17 = *(_QWORD *)(v17 + 24);
  v18 = *(_QWORD *)(v17 + 8);
  if (**(_WORD **)(v18 + 16) != 121)
    goto LABEL_21;
  v19 = *(_QWORD *)(*(_QWORD *)(v18 + 32) + 48);
  *v15 = v19;
  if (!v19)
    return 0;
  v20 = *(unsigned int *)(*(_QWORD *)(v9 + 32) + 68);
  v21 = (uint64_t *)((int)v20 >= 0 ? *(_QWORD *)(a2 + 272) + 8 * v20 : *(_QWORD *)(a2 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
  v22 = *v21;
  if (!v22)
    return 0;
  if ((*(_BYTE *)(v22 + 3) & 1) == 0)
  {
    v22 = *(_QWORD *)(v22 + 24);
    if (!v22 || (*(_BYTE *)(v22 + 3) & 1) == 0)
      return 0;
  }
  v23 = *(_QWORD *)(v22 + 8);
  if (!v23 || **(_WORD **)(v23 + 16) != 165 || *(_DWORD *)(v23 + 40) != 3)
    return 0;
  v24 = *(_QWORD *)(v23 + 32);
  v25 = *(_QWORD **)(a1 + 8);
  **(_DWORD **)a1 = *(_DWORD *)(v24 + 36);
  v26 = *(unsigned int *)(v24 + 68);
  if ((int)v26 >= 0)
    v27 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v26);
  else
    v27 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v26 & 0x7FFFFFFF) + 8);
  v28 = *v27;
  if ((*(_BYTE *)(v28 + 3) & 1) == 0)
    v28 = *(_QWORD *)(v28 + 24);
  v29 = *(_QWORD *)(v28 + 8);
  if (**(_WORD **)(v29 + 16) != 121)
  {
    *v25 = 0;
    goto LABEL_54;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v29 + 32) + 48);
  *v25 = v37;
  if (!v37)
  {
LABEL_54:
    v38 = *(unsigned int *)(*(_QWORD *)(v23 + 32) + 36);
    v15 = *(_QWORD **)(a1 + 8);
    if ((int)v38 >= 0)
      v39 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v38);
    else
      v39 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v38 & 0x7FFFFFFF) + 8);
    v40 = *v39;
    if ((*(_BYTE *)(v40 + 3) & 1) == 0)
      v40 = *(_QWORD *)(v40 + 24);
    v41 = *(_QWORD *)(v40 + 8);
    if (**(_WORD **)(v41 + 16) != 121)
    {
LABEL_21:
      result = 0;
      *v15 = 0;
      return result;
    }
    v42 = *(_QWORD *)(*(_QWORD *)(v41 + 32) + 48);
    *v15 = v42;
    if (v42)
    {
      **(_DWORD **)a1 = *(_DWORD *)(*(_QWORD *)(v23 + 32) + 68);
      return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1C49BC2DC(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = *a3;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 272);
  if ((int)v3 >= 0)
    v6 = (uint64_t *)(v5 + 8 * v3);
  else
    v6 = (uint64_t *)(v4 + 16 * (v3 & 0x7FFFFFFF) + 8);
  v7 = *v6;
  if (!v7)
    return 0;
  if ((*(_BYTE *)(v7 + 3) & 1) == 0)
  {
    v7 = *(_QWORD *)(v7 + 24);
    if (!v7 || (*(_BYTE *)(v7 + 3) & 1) == 0)
      return 0;
  }
  v9 = *(_QWORD *)(v7 + 8);
  if (!v9 || **(_WORD **)(v9 + 16) != 165 || *(_DWORD *)(v9 + 40) != 3)
    return 0;
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int *)(v10 + 36);
  v12 = (uint64_t *)(v4 + 16 * (v11 & 0x7FFFFFFF) + 8);
  v13 = (uint64_t *)(v5 + 8 * v11);
  if ((int)v11 >= 0)
    v12 = v13;
  v14 = *v12;
  if (v14)
  {
    if ((*(_BYTE *)(v14 + 3) & 1) != 0 || (v14 = *(_QWORD *)(v14 + 24)) != 0 && (*(_BYTE *)(v14 + 3) & 1) != 0)
    {
      v27 = *(_QWORD *)(v14 + 8);
      if (v27)
      {
        if (**(_WORD **)(v27 + 16) == 163 && *(_DWORD *)(v27 + 40) == 3)
        {
          v28 = *(_QWORD *)(v27 + 32);
          v29 = *(_DWORD **)(a1 + 8);
          **(_DWORD **)a1 = *(_DWORD *)(v28 + 36);
          *v29 = *(_DWORD *)(v28 + 68);
          v30 = *(unsigned int *)(v10 + 68);
          v31 = *(_QWORD **)(a1 + 16);
          if ((int)v30 >= 0)
            v32 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v30);
          else
            v32 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v30 & 0x7FFFFFFF) + 8);
          v33 = *v32;
          if ((*(_BYTE *)(v33 + 3) & 1) == 0)
            v33 = *(_QWORD *)(v33 + 24);
          v34 = *(_QWORD *)(v33 + 8);
          if (**(_WORD **)(v34 + 16) == 121)
          {
            v35 = *(_QWORD *)(*(_QWORD *)(v34 + 32) + 48);
            *v31 = v35;
            if (v35)
              return 1;
          }
          else
          {
            *v31 = 0;
          }
        }
      }
    }
  }
  v15 = *(unsigned int *)(*(_QWORD *)(v9 + 32) + 36);
  v16 = *(_QWORD **)(a1 + 16);
  if ((int)v15 >= 0)
    v17 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v15);
  else
    v17 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
  v18 = *v17;
  if ((*(_BYTE *)(v18 + 3) & 1) == 0)
    v18 = *(_QWORD *)(v18 + 24);
  v19 = *(_QWORD *)(v18 + 8);
  if (**(_WORD **)(v19 + 16) != 121)
  {
    result = 0;
    *v16 = 0;
    return result;
  }
  v20 = *(_QWORD *)(*(_QWORD *)(v19 + 32) + 48);
  *v16 = v20;
  if (!v20)
    return 0;
  v21 = *(unsigned int *)(*(_QWORD *)(v9 + 32) + 68);
  v22 = (uint64_t *)((int)v21 >= 0 ? *(_QWORD *)(a2 + 272) + 8 * v21 : *(_QWORD *)(a2 + 24) + 16 * (v21 & 0x7FFFFFFF) + 8);
  v23 = *v22;
  if (!v23)
    return 0;
  if ((*(_BYTE *)(v23 + 3) & 1) == 0)
  {
    v23 = *(_QWORD *)(v23 + 24);
    if (!v23 || (*(_BYTE *)(v23 + 3) & 1) == 0)
      return 0;
  }
  v24 = *(_QWORD *)(v23 + 8);
  if (!v24 || **(_WORD **)(v24 + 16) != 163 || *(_DWORD *)(v24 + 40) != 3)
    return 0;
  v25 = *(_QWORD *)(v24 + 32);
  v26 = *(_DWORD **)(a1 + 8);
  **(_DWORD **)a1 = *(_DWORD *)(v25 + 36);
  *v26 = *(_DWORD *)(v25 + 68);
  return 1;
}

uint64_t sub_1C49BC528(_DWORD **a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v3 = *a3;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 272);
  if ((int)v3 >= 0)
    v6 = (uint64_t *)(v5 + 8 * v3);
  else
    v6 = (uint64_t *)(v4 + 16 * (v3 & 0x7FFFFFFF) + 8);
  v7 = *v6;
  if (!v7)
    return 0;
  if ((*(_BYTE *)(v7 + 3) & 1) == 0)
  {
    v7 = *(_QWORD *)(v7 + 24);
    if (!v7 || (*(_BYTE *)(v7 + 3) & 1) == 0)
      return 0;
  }
  v9 = *(_QWORD *)(v7 + 8);
  if (!v9 || **(_WORD **)(v9 + 16) != 165 || *(_DWORD *)(v9 + 40) != 3)
    return 0;
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int *)(v10 + 36);
  v12 = (uint64_t *)((int)v11 >= 0 ? v5 + 8 * v11 : v4 + 16 * (v11 & 0x7FFFFFFF) + 8);
  v13 = *v12;
  if (!v13)
    goto LABEL_16;
  if ((*(_BYTE *)(v13 + 3) & 1) == 0)
  {
    v13 = *(_QWORD *)(v13 + 24);
    if (!v13 || (*(_BYTE *)(v13 + 3) & 1) == 0)
      goto LABEL_16;
  }
  v24 = *(_QWORD *)(v13 + 8);
  if (!v24 || **(_WORD **)(v24 + 16) != 177 || *(_DWORD *)(v24 + 40) != 2)
    goto LABEL_16;
  v25 = *(_QWORD *)(v24 + 32);
  v23 = a1 + 1;
  **a1 = *(_DWORD *)(v25 + 36);
  v26 = *(unsigned int *)(v10 + 68);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 272);
  v27 = (uint64_t *)((int)v26 >= 0 ? v5 + 8 * v26 : v4 + 16 * (v26 & 0x7FFFFFFF) + 8);
  if ((v28 = *v27) == 0
    || (*(_BYTE *)(v28 + 3) & 1) == 0 && ((v28 = *(_QWORD *)(v28 + 24)) == 0 || (*(_BYTE *)(v28 + 3) & 1) == 0)
    || (v22 = *(_QWORD *)(v28 + 8)) == 0
    || **(_WORD **)(v22 + 16) != 177
    || *(_DWORD *)(v22 + 40) != 2)
  {
LABEL_16:
    v14 = *(unsigned int *)(v10 + 36);
    v15 = (uint64_t *)(v4 + 16 * (v14 & 0x7FFFFFFF) + 8);
    v16 = (uint64_t *)(v5 + 8 * v14);
    if ((int)v14 >= 0)
      v15 = v16;
    v17 = *v15;
    if (!v17)
      return 0;
    if ((*(_BYTE *)(v17 + 3) & 1) == 0)
    {
      v17 = *(_QWORD *)(v17 + 24);
      if (!v17 || (*(_BYTE *)(v17 + 3) & 1) == 0)
        return 0;
    }
    v18 = *(_QWORD *)(v17 + 8);
    if (!v18 || **(_WORD **)(v18 + 16) != 177 || *(_DWORD *)(v18 + 40) != 2)
      return 0;
    *a1[1] = *(_DWORD *)(*(_QWORD *)(v18 + 32) + 36);
    v19 = *(unsigned int *)(v10 + 68);
    v20 = (uint64_t *)((int)v19 >= 0
                    ? *(_QWORD *)(a2 + 272) + 8 * v19
                    : *(_QWORD *)(a2 + 24) + 16 * (v19 & 0x7FFFFFFF) + 8);
    v21 = *v20;
    if (!v21)
      return 0;
    if ((*(_BYTE *)(v21 + 3) & 1) == 0)
    {
      v21 = *(_QWORD *)(v21 + 24);
      if (!v21 || (*(_BYTE *)(v21 + 3) & 1) == 0)
        return 0;
    }
    v22 = *(_QWORD *)(v21 + 8);
    if (!v22)
      return 0;
    if (**(_WORD **)(v22 + 16) != 177)
      return 0;
    v23 = a1;
    if (*(_DWORD *)(v22 + 40) != 2)
      return 0;
  }
  **v23 = *(_DWORD *)(*(_QWORD *)(v22 + 32) + 36);
  return 1;
}

uint64_t sub_1C49BC770(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t v4;
  int v6;

  v6 = a3;
  v3 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
  if (a3 >= 0)
    v3 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * a3);
  v4 = *v3;
  if (!v4)
    return 0;
  while ((*(_BYTE *)(v4 + 3) & 1) != 0)
  {
    v4 = *(_QWORD *)(v4 + 24);
    if (!v4)
      return 0;
  }
  while (1)
  {
    v4 = *(_QWORD *)(v4 + 24);
    if (!v4)
      break;
    if ((*(_BYTE *)(v4 + 3) & 1) == 0)
      return 0;
  }
  return sub_1C49BC7E4(a1, a2, (unsigned int *)&v6);
}

uint64_t sub_1C49BC7E4(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  v3 = *a3;
  if ((int)v3 >= 0)
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v3);
  else
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  v5 = *v4;
  if (!v5)
    return 0;
  if ((*(_BYTE *)(v5 + 3) & 1) == 0)
  {
    v5 = *(_QWORD *)(v5 + 24);
    if (!v5 || (*(_BYTE *)(v5 + 3) & 1) == 0)
      return 0;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7 || **(_WORD **)(v7 + 16) != 65 || *(_DWORD *)(v7 + 40) != 3)
    return 0;
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_DWORD **)(a1 + 8);
  **(_DWORD **)a1 = *(_DWORD *)(v8 + 36);
  *v9 = *(_DWORD *)(v8 + 68);
  return 1;
}

uint64_t sub_1C49BC874(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  v3 = *a3;
  if ((int)v3 >= 0)
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v3);
  else
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  v5 = *v4;
  if (!v5)
    return 0;
  if ((*(_BYTE *)(v5 + 3) & 1) == 0)
  {
    v5 = *(_QWORD *)(v5 + 24);
    if (!v5 || (*(_BYTE *)(v5 + 3) & 1) == 0)
      return 0;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7 || **(_WORD **)(v7 + 16) != 46 || *(_DWORD *)(v7 + 40) != 3)
    return 0;
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_DWORD **)(a1 + 8);
  **(_DWORD **)a1 = *(_DWORD *)(v8 + 36);
  *v9 = *(_DWORD *)(v8 + 68);
  return 1;
}

uint64_t sub_1C49BC904(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _DWORD *v13;

  v3 = *a3;
  if ((int)v3 >= 0)
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v3);
  else
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  v5 = *v4;
  if (!v5)
    return 0;
  if ((*(_BYTE *)(v5 + 3) & 1) == 0)
  {
    v5 = *(_QWORD *)(v5 + 24);
    if (!v5 || (*(_BYTE *)(v5 + 3) & 1) == 0)
      return 0;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7 || **(_WORD **)(v7 + 16) != 45 || *(_DWORD *)(v7 + 40) != 3)
    return 0;
  v8 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v7 + 32) + 36), a2);
  if (v9)
  {
    v13 = *(_DWORD **)(a1 + 8);
    **(_QWORD **)a1 = v8;
    *v13 = *(_DWORD *)(*(_QWORD *)(v7 + 32) + 68);
    return 1;
  }
  v10 = *(_QWORD *)(v7 + 32);
  **(_DWORD **)(a1 + 8) = *(_DWORD *)(v10 + 36);
  v11 = sub_1C554C050(*(_DWORD *)(v10 + 68), a2);
  if (!v12)
    return 0;
  **(_QWORD **)a1 = v11;
  return 1;
}

uint64_t sub_1C49BCA00(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;

  v3 = *a3;
  if ((int)v3 >= 0)
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v3);
  else
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  v5 = *v4;
  if (!v5)
    return 0;
  if ((*(_BYTE *)(v5 + 3) & 1) == 0)
  {
    v5 = *(_QWORD *)(v5 + 24);
    if (!v5 || (*(_BYTE *)(v5 + 3) & 1) == 0)
      return 0;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7)
    return 0;
  if (**(_WORD **)(v7 + 16) != 65)
    return 0;
  if (*(_DWORD *)(v7 + 40) != 3)
    return 0;
  v8 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v7 + 32) + 68), a2);
  if (!v9)
  {
    v8 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v7 + 32) + 36), a2);
    if (!v10)
      return 0;
  }
  **(_QWORD **)(a1 + 8) = v8;
  return 1;
}

uint64_t sub_1C49BCAD4(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  v3 = *a3;
  if ((int)v3 >= 0)
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v3);
  else
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  v5 = *v4;
  if (!v5)
    return 0;
  if ((*(_BYTE *)(v5 + 3) & 1) == 0)
  {
    v5 = *(_QWORD *)(v5 + 24);
    if (!v5 || (*(_BYTE *)(v5 + 3) & 1) == 0)
      return 0;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7 || **(_WORD **)(v7 + 16) != 127 || *(_DWORD *)(v7 + 40) != 3)
    return 0;
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_DWORD **)(a1 + 8);
  **(_DWORD **)a1 = *(_DWORD *)(v8 + 36);
  *v9 = *(_DWORD *)(v8 + 68);
  return 1;
}

BOOL sub_1C49BCB64(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a3;
  if ((int)v3 >= 0)
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v3);
  else
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  v5 = *v4;
  if (!v5)
    return 0;
  if ((*(_BYTE *)(v5 + 3) & 1) == 0)
  {
    v5 = *(_QWORD *)(v5 + 24);
    if (!v5 || (*(_BYTE *)(v5 + 3) & 1) == 0)
      return 0;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7 || **(_WORD **)(v7 + 16) != 119 || *(_DWORD *)(v7 + 40) != 2)
    return 0;
  v8 = *(_DWORD *)(*(_QWORD *)(v7 + 32) + 36);
  **(_DWORD **)(a1 + 8) = v8;
  if (v8 < 0 && (v9 = v8 & 0x7FFFFFFF, v9 < *(_DWORD *)(a2 + 432)))
    v10 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * v9);
  else
    v10 = 0;
  return v10 == *(_QWORD *)a1;
}

uint64_t sub_1C49BCC18(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v3 = *a3;
  if ((int)v3 >= 0)
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v3);
  else
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  v5 = *v4;
  if (!v5)
    return 0;
  if ((*(_BYTE *)(v5 + 3) & 1) == 0)
  {
    v5 = *(_QWORD *)(v5 + 24);
    if (!v5 || (*(_BYTE *)(v5 + 3) & 1) == 0)
      return 0;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7 || **(_WORD **)(v7 + 16) != 80 || *(_DWORD *)(v7 + 40) != 2)
    return 0;
  v8 = *(_DWORD *)(*(_QWORD *)(v7 + 32) + 36);
  if (v8 < 0 && (v8 & 0x7FFFFFFFu) < *(_DWORD *)(a2 + 432))
    v9 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v8 & 0x7FFFFFFF));
  else
    v9 = 0;
  if (v9 != *(_QWORD *)(a1 + 8))
    return 0;
  **(_DWORD **)a1 = v8;
  return 1;
}

uint64_t sub_1C49BCCD0(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;

  v3 = *(_QWORD **)(a1 + 16);
  v4 = *a3;
  v5 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v4 & 0x7FFFFFFF) + 8);
  if ((int)v4 >= 0)
    v5 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v4);
  v6 = *v5;
  if (!v6 || (*(_BYTE *)(v6 + 3) & 1) == 0 && ((v6 = *(_QWORD *)(v6 + 24)) == 0 || (*(_BYTE *)(v6 + 3) & 1) == 0))
  {
    result = 0;
    *v3 = 0;
    return result;
  }
  v8 = *(_QWORD *)(v6 + 8);
  *v3 = v8;
  if (!v8)
    return 0;
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 272);
  v11 = (uint64_t *)((int)v4 < 0 ? v9 + 16 * (v4 & 0x7FFFFFFF) + 8 : v10 + 8 * v4);
  v12 = *v11;
  if (!v12)
    return 0;
  v13 = v12;
  if (((*(_BYTE *)(v12 + 3) & 1) != 0 || (v13 = *(_QWORD *)(v12 + 24)) != 0 && (*(_BYTE *)(v13 + 3) & 1) != 0)
    && (v14 = *(_QWORD *)(v13 + 8)) != 0
    && **(_WORD **)(v14 + 16) == 184
    && *(_DWORD *)(v14 + 40) == 2
    && ((v15 = *(unsigned int *)(*(_QWORD *)(v14 + 32) + 36), (int)v15 >= 0)
      ? (v16 = (uint64_t *)(v10 + 8 * v15))
      : (v16 = (uint64_t *)(v9 + 16 * (v15 & 0x7FFFFFFF) + 8)),
        (v17 = *v16) != 0
     && ((*(_BYTE *)(v17 + 3) & 1) != 0 || (v17 = *(_QWORD *)(v17 + 24)) != 0 && (*(_BYTE *)(v17 + 3) & 1) != 0)
     && (v18 = *(_QWORD *)(v17 + 8)) != 0
     && **(_WORD **)(v18 + 16) == 179
     && *(_DWORD *)(v18 + 40) == 2))
  {
    a1 += 8;
  }
  else
  {
    if ((*(_BYTE *)(v12 + 3) & 1) == 0)
    {
      v12 = *(_QWORD *)(v12 + 24);
      if (!v12 || (*(_BYTE *)(v12 + 3) & 1) == 0)
        return 0;
    }
    v19 = *(_QWORD *)(v12 + 8);
    if (!v19 || **(_WORD **)(v19 + 16) != 177 || *(_DWORD *)(v19 + 40) != 2)
      return 0;
    v20 = *(unsigned int *)(*(_QWORD *)(v19 + 32) + 36);
    v21 = (uint64_t *)(v9 + 16 * (v20 & 0x7FFFFFFF) + 8);
    v22 = (uint64_t *)(v10 + 8 * v20);
    if ((int)v20 >= 0)
      v21 = v22;
    v23 = *v21;
    if (!v23)
      return 0;
    if ((*(_BYTE *)(v23 + 3) & 1) == 0)
    {
      v23 = *(_QWORD *)(v23 + 24);
      if (!v23 || (*(_BYTE *)(v23 + 3) & 1) == 0)
        return 0;
    }
    v18 = *(_QWORD *)(v23 + 8);
    if (!v18 || **(_WORD **)(v18 + 16) != 179 || *(_DWORD *)(v18 + 40) != 2)
      return 0;
  }
  **(_DWORD **)a1 = *(_DWORD *)(*(_QWORD *)(v18 + 32) + 36);
  return 1;
}

uint64_t sub_1C49BCEC0(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "AddRelaxedMathFlags";
  *(_QWORD *)(v2 + 8) = 19;
  *(_QWORD *)(v2 + 16) = "add-relaxed-math-flags";
  *(_QWORD *)(v2 + 24) = 22;
  *(_QWORD *)(v2 + 32) = &unk_1ED7EC8A0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C49BD01C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C49BCF50(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED7EC8A0;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E7FA83E8;
  *(_QWORD *)(a1 + 32) = a2;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED7EC8A8);
  if (v4 != -1)
  {
    v8[0] = sub_1C49BCEC0;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED7EC8A8, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C49BD01C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C49BCF50(v0, 0);
}

void sub_1C49BD04C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C49BD070(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  unsigned int v9;

  if ((*(_WORD *)(*(_QWORD *)(a1 + 32) + 1020) & 1) != 0 || (v2 = a2 + 72, v3 = *(_QWORD *)(a2 + 80), v3 == a2 + 72))
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = v3 - 24;
      if (!v3)
        v5 = 0;
      v6 = v5 + 40;
      for (i = *(_QWORD *)(v5 + 48); i != v6; i = *(_QWORD *)(i + 8))
      {
        if (i)
          v8 = i - 24;
        else
          v8 = 0;
        if (sub_1C4774A9C(v8))
        {
          v9 = *(unsigned __int8 *)(v8 + 17);
          if (v9 >= 0xFE)
          {
            *(_BYTE *)(v8 + 17) = v9 & 1 | 0xF2;
            v4 = 1;
          }
        }
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return v4 & 1;
}

uint64_t sub_1C49BD128(uint64_t a1, uint64_t a2)
{
  _QWORD v4[4];
  __int16 v5;

  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 64;
  *(_QWORD *)(a1 + 56) = 0x1000000000;
  *(_QWORD *)(a1 + 37) = 0;
  *(_QWORD *)a1 = &unk_1E8146698;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 134) = 0;
  v4[0] = "TopQ";
  v5 = 259;
  sub_1C49BD288(a1 + 144, 1, (uint64_t)v4);
  v4[0] = "BotQ";
  v5 = 259;
  sub_1C49BD288(a1 + 848, 2, (uint64_t)v4);
  *(_QWORD *)(a1 + 1576) = 0;
  *(_QWORD *)(a1 + 1568) = 0;
  *(_QWORD *)(a1 + 1582) = 0;
  *(_QWORD *)(a1 + 1552) = 0;
  *(_DWORD *)(a1 + 1560) = 0;
  *(_QWORD *)(a1 + 1640) = 0;
  *(_QWORD *)(a1 + 1624) = 0;
  *(_QWORD *)(a1 + 1616) = 0;
  *(_QWORD *)(a1 + 1630) = 0;
  *(_QWORD *)(a1 + 1600) = 0;
  *(_QWORD *)(a1 + 1592) = 0;
  *(_DWORD *)(a1 + 1608) = 0;
  return a1;
}

uint64_t sub_1C49BD200(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 136);
}

uint64_t sub_1C49BD208(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 137);
}

void sub_1C49BD210(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 228) & 0x400) == 0)
  {
    llvm::SchedBoundary::releaseNode(a1 + 144, a2, *(_DWORD *)(a2 + 248), 0, 0);
    *(_QWORD *)(a1 + 1568) = 0;
  }
}

void sub_1C49BD24C(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 228) & 0x400) == 0)
  {
    llvm::SchedBoundary::releaseNode(a1 + 848, a2, *(_DWORD *)(a2 + 252), 0, 0);
    *(_QWORD *)(a1 + 1616) = 0;
  }
}

uint64_t sub_1C49BD288(uint64_t a1, int a2, uint64_t a3)
{
  int v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  const char *v11;
  uint64_t v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  __int16 v18;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v6 = *(unsigned __int8 *)(a3 + 32);
  if (v6 == 1)
  {
    v15 = ".A";
    v7 = 259;
    goto LABEL_5;
  }
  if (!*(_BYTE *)(a3 + 32))
  {
    v7 = 256;
LABEL_5:
    v18 = v7;
    goto LABEL_6;
  }
  v10 = *(_QWORD *)(a3 + 8);
  if (*(_BYTE *)(a3 + 33) == 1)
  {
    v11 = *(const char **)a3;
  }
  else
  {
    LOBYTE(v6) = 2;
    v11 = (const char *)a3;
  }
  v15 = v11;
  v16 = v10;
  v17 = ".A";
  LOBYTE(v18) = v6;
  HIBYTE(v18) = 3;
LABEL_6:
  *(_DWORD *)(a1 + 24) = a2;
  llvm::Twine::str((llvm::Twine *)&v15, (_QWORD *)(a1 + 32));
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v8 = *(unsigned __int8 *)(a3 + 32);
  if (v8 == 1)
  {
    v15 = ".P";
    v9 = 259;
    goto LABEL_14;
  }
  if (!*(_BYTE *)(a3 + 32))
  {
    v9 = 256;
LABEL_14:
    v18 = v9;
    goto LABEL_15;
  }
  v13 = *(_QWORD *)(a3 + 8);
  if (*(_BYTE *)(a3 + 33) == 1)
  {
    v14 = *(const char **)a3;
  }
  else
  {
    LOBYTE(v8) = 2;
    v14 = (const char *)a3;
  }
  v15 = v14;
  v16 = v13;
  v17 = ".P";
  LOBYTE(v18) = v8;
  HIBYTE(v18) = 3;
LABEL_15:
  *(_DWORD *)(a1 + 80) = 4 * a2;
  llvm::Twine::str((llvm::Twine *)&v15, (_QWORD *)(a1 + 88));
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 192;
  *(_QWORD *)(a1 + 184) = 0x1000000000;
  *(_QWORD *)(a1 + 272) = a1 + 288;
  *(_QWORD *)(a1 + 280) = 0x1000000000;
  *(_QWORD *)(a1 + 352) = a1 + 368;
  *(_QWORD *)(a1 + 360) = 0x1000000000;
  *(_QWORD *)(a1 + 432) = a1 + 448;
  *(_QWORD *)(a1 + 440) = 0x1000000000;
  llvm::SchedBoundary::reset((llvm::SchedBoundary *)a1);
  return a1;
}

_QWORD *sub_1C49BD404(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_1E8146698;
  llvm::SchedBoundary::~SchedBoundary((llvm::SchedBoundary *)(a1 + 106));
  llvm::SchedBoundary::~SchedBoundary((llvm::SchedBoundary *)(a1 + 18));
  *a1 = &off_1E7FA8528;
  v2 = (_QWORD *)a1[6];
  if (v2 != a1 + 8)
    free(v2);
  return a1;
}

uint64_t sub_1C49BD46C()
{
  sub_1C4769074(qword_1ED7EC8B0, "agx2-new-scheduler", "New AGX2 scheduler", (uint64_t)sub_1C614D55C);
  return __cxa_atexit((void (*)(void *))sub_1C476900C, qword_1ED7EC8B0, &dword_1C475E000);
}

uint64_t sub_1C49BD4C0(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeMachineBlockFrequencyInfoPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "AGX2 lmspill";
  *(_QWORD *)(v3 + 8) = 12;
  *(_QWORD *)(v3 + 16) = "agx2-lmspill";
  *(_QWORD *)(v3 + 24) = 12;
  *(_QWORD *)(v3 + 32) = &unk_1ED7EC8E0;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C49BD638;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C49BD550(uint64_t a1)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  v2 = sub_1C4776848(a1, (uint64_t)&unk_1ED7EC8E0);
  *(_QWORD *)v2 = &off_1E7FA85C0;
  *(_DWORD *)(v2 + 316) = 0;
  *(_BYTE *)(v2 + 320) = 0;
  *(_QWORD *)(v2 + 248) = 0;
  *(_QWORD *)(v2 + 256) = 0;
  *(_DWORD *)(v2 + 264) = 0;
  *(_QWORD *)(v2 + 272) = 0;
  *(_QWORD *)(v2 + 280) = 0;
  *(_DWORD *)(v2 + 288) = 0;
  *(_QWORD *)(v2 + 296) = 0;
  *(_QWORD *)(v2 + 304) = 0;
  *(_BYTE *)(v2 + 312) = 0;
  *(_DWORD *)(v2 + 344) = 254;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED7EC8E8);
  if (v4 != -1)
  {
    v8[0] = sub_1C49BD4C0;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED7EC8E8, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C49BD638()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C49BD550(v0);
}

void sub_1C49BD660(llvm::Pass *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  *(_QWORD *)a1 = &off_1E7FA85C0;
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 34), 4);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 31), 4);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v2 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v2 != (_QWORD *)((char *)a1 + 192))
    free(v2);
  v3 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v3 != (_QWORD *)((char *)a1 + 120))
    free(v3);
  v4 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v4 != (_QWORD *)((char *)a1 + 48))
    free(v4);
  llvm::Pass::~Pass(a1);
}

void sub_1C49BD6FC(llvm::Pass *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  *(_QWORD *)a1 = &off_1E7FA85C0;
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 34), 4);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 31), 4);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v2 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v2 != (_QWORD *)((char *)a1 + 192))
    free(v2);
  v3 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v3 != (_QWORD *)((char *)a1 + 120))
    free(v3);
  v4 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v4 != (_QWORD *)((char *)a1 + 48))
    free(v4);
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C49BD7AC()
{
  return "AGX2 LM spill pass";
}

void *sub_1C49BD7BC(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C49BD800(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  void **v6;
  void *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  int *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int8x8_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  llvm::MachineFunction *v41;
  llvm::MachineInstr *v42;
  llvm::MachineInstr *v43;
  int v44;
  uint64_t v45;
  unsigned __int16 *v46;
  int v47;
  __int16 v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  uint8x8_t v55;
  _DWORD *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  llvm::MachineFunction *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t *v114;
  _DWORD *v115;
  _DWORD *v116;
  _BYTE *v117;
  _DWORD *v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t *v121;
  _BOOL4 v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  unsigned __int8 *v127;
  int v128;
  unsigned int v129;
  int v130;
  unsigned __int8 *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned __int8 *v135;
  void *v136[2];
  int v137;
  uint64_t v138;
  __int128 v139;
  char v140;
  uint64_t v141;
  _QWORD v142[2];
  void *v143;
  uint64_t v144;
  _BYTE v145[32];
  uint64_t v146;
  void *v147;
  uint64_t v148;
  _DWORD v149[14];
  void *v150;
  uint64_t v151;
  _DWORD v152[14];
  void *v153;
  uint64_t v154;
  _DWORD v155[14];
  void *v156;
  uint64_t v157;
  _DWORD v158[14];
  uint64_t v159;

  v2 = (uint64_t)a2;
  v3 = a1;
  v159 = *MEMORY[0x1E0C80C00];
  v4 = a2[2];
  v118 = (_DWORD *)(a1 + 296);
  sub_1C49909F8(v4, a2, (_DWORD *)(a1 + 296), (uint64_t)&v139);
  *(_OWORD *)(v3 + 304) = v139;
  *(_BYTE *)(v3 + 320) = v140;
  v5 = *(_DWORD *)(v3 + 308);
  if (!v5)
    return 0;
  v115 = (_DWORD *)(v3 + 304);
  *(_DWORD *)(v3 + 296) = (*(_DWORD *)(v3 + 296) + 3) & 0xFFFFFFFC;
  if (v5 >= *(_DWORD *)(v3 + 344))
    v5 = *(_DWORD *)(v3 + 344);
  *(_DWORD *)(v3 + 308) = v5;
  *(_QWORD *)(v3 + 328) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  *(_QWORD *)(v3 + 336) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4);
  v6 = **(void ****)(v3 + 8);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != &llvm::MachineBlockFrequencyInfo::ID);
  v8 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), &llvm::MachineBlockFrequencyInfo::ID);
  v9 = *(_DWORD *)(v3 + 256);
  if (v9 || *(_DWORD *)(v3 + 260))
  {
    v10 = *(unsigned int *)(v3 + 264);
    if (v10 <= 4 * v9 || v10 < 0x41)
    {
      if ((_DWORD)v10)
      {
        v11 = *(_DWORD **)(v3 + 248);
        v12 = 8 * v10;
        do
        {
          *v11 = -1;
          v11 += 2;
          v12 -= 8;
        }
        while (v12);
      }
      *(_QWORD *)(v3 + 256) = 0;
    }
    else
    {
      sub_1C476BF54((_DWORD *)(v3 + 248));
    }
  }
  v116 = (_DWORD *)(v3 + 272);
  v13 = *(_DWORD *)(v3 + 280);
  if (v13 || *(_DWORD *)(v3 + 284))
  {
    v14 = *(unsigned int *)(v3 + 288);
    if (v14 <= 4 * v13 || v14 < 0x41)
    {
      if ((_DWORD)v14)
      {
        v15 = *(_DWORD **)v116;
        v16 = 8 * v14;
        do
        {
          *v15 = -1;
          v15 += 2;
          v16 -= 8;
        }
        while (v16);
      }
      *(_QWORD *)(v3 + 280) = 0;
    }
    else
    {
      sub_1C476BF54(v116);
    }
  }
  sub_1C4990A5C(v2, v8, 0, &v139);
  v17 = (char *)v139;
  v119 = v2;
  v18 = 0;
  if (DWORD2(v139))
  {
    v19 = 8 * DWORD2(v139);
    v20 = (int *)(v139 + 4);
    do
    {
      v21 = *v20;
      if ((*v20 + v18) <= *(_DWORD *)(v3 + 308))
      {
        LODWORD(v131) = *(v20 - 1);
        v22 = (int)v131;
        sub_1C48C3740(v3 + 248, &v131)[1] = v18;
        LODWORD(v131) = v22;
        sub_1C48C3740((uint64_t)v116, &v131)[1] = v21;
        v18 += v21;
      }
      v20 += 2;
      v19 -= 8;
    }
    while (v19);
    v17 = (char *)v139;
    v2 = v119;
  }
  *(_DWORD *)(v3 + 300) = v18;
  if (v17 != &v140)
    free(v17);
  if (!*(_DWORD *)(v3 + 256))
    return 0;
  v117 = *(_BYTE **)(v2 + 16);
  v23 = *(_QWORD *)(v2 + 48);
  if (!v23)
  {
    v23 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 8) + 216))(*(_QWORD *)(v2 + 8), v2 + 128, v2);
    *(_QWORD *)(v2 + 48) = v23;
  }
  v24 = *(_QWORD *)(v23 + 468);
  if (*(_QWORD *)(v23 + 468))
    v25 = (*(_QWORD *)(v23 + 468) & 0xFF00000000) == 0;
  else
    v25 = 1;
  v122 = v25;
  if (v25)
  {
    v126 = 0;
    v123 = 0;
  }
  else
  {
    v123 = (_QWORD *)sub_1C49BE5B0(v3, *(_QWORD *)(v2 + 328), 0, v24);
    v126 = sub_1C49BE7E4(v3, v123, v24);
  }
  v27 = *(uint64_t **)(v2 + 328);
  v114 = (uint64_t *)(v2 + 320);
  if (v27 != (uint64_t *)(v2 + 320))
  {
    v125 = v3;
    while (1)
    {
      v141 = 0;
      v142[0] = 0;
      *(_QWORD *)((char *)v142 + 5) = 0;
      v143 = v145;
      v144 = 0x200000000;
      v146 = 0;
      v147 = v149;
      v148 = 0x600000000;
      v149[12] = 0;
      v150 = v152;
      v151 = 0x600000000;
      v152[12] = 0;
      v153 = v155;
      v154 = 0x600000000;
      v155[12] = 0;
      v156 = v158;
      v157 = 0x600000000;
      v158[12] = 0;
      if (v122 || *(_BYTE *)(v3 + 312))
      {
        llvm::RegScavenger::init((llvm::RegScavenger *)&v139, (llvm::MachineBasicBlock *)v27);
        llvm::LiveRegUnits::addLiveIns((llvm::LiveRegUnits *)&v146, (const llvm::MachineFunction **)v27);
      }
      v28 = v27 + 6;
      v29 = v27[7];
      if ((uint64_t *)v29 != v27 + 6)
        break;
LABEL_157:
      if (v156 != v158)
        free(v156);
      if (v153 != v155)
        free(v153);
      if (v150 != v152)
        free(v150);
      if (v147 != v149)
        free(v147);
      if (v143 != v145)
        free(v143);
      v27 = (uint64_t *)v27[1];
      if (v27 == v114)
        goto LABEL_168;
    }
    v120 = v27 + 5;
    v121 = v27;
    while (1)
    {
      if (!v29 || (v30 = v29, (*(_BYTE *)v29 & 4) == 0))
      {
        v30 = v29;
        if ((*(_WORD *)(v29 + 44) & 8) != 0)
        {
          v30 = v29;
          do
            v30 = *(_QWORD *)(v30 + 8);
          while ((*(_WORD *)(v30 + 44) & 8) != 0);
        }
      }
      v31 = *(_QWORD *)(v30 + 8);
      v130 = 0;
      if (!(*(unsigned int (**)(_QWORD, uint64_t, int *))(**(_QWORD **)(v3 + 328) + 96))(*(_QWORD *)(v3 + 328), v29, &v130)&& !(*(unsigned int (**)(_QWORD, uint64_t, int *))(**(_QWORD **)(v3 + 328) + 64))(*(_QWORD *)(v3 + 328), v29, &v130))
      {
        goto LABEL_130;
      }
      v33 = *(_QWORD *)(v3 + 248);
      v34 = *(unsigned int *)(v3 + 264);
      if ((_DWORD)v34)
      {
        LODWORD(v35) = (v34 - 1) & (37 * v130);
        v36 = (int *)(v33 + 8 * v35);
        v37 = *v36;
        if (v130 == *v36)
          goto LABEL_56;
        v94 = 1;
        while (v37 != -1)
        {
          v95 = v35 + v94++;
          v35 = v95 & (v34 - 1);
          v37 = *(_DWORD *)(v33 + 8 * v35);
          if (v130 == v37)
          {
            v36 = (int *)(v33 + 8 * v35);
            goto LABEL_56;
          }
        }
      }
      v36 = (int *)(v33 + 8 * v34);
LABEL_56:
      if ((int *)(v33 + 8 * v34) != v36)
      {
        if (v122)
        {
          v38 = sub_1C49BE904((uint64_t)&v139, v2, (_QWORD *)v29);
          v39 = v38;
          v123 = (_QWORD *)sub_1C49BE5B0(v3, *(_QWORD *)(v2 + 328), (unint64_t *)v29, v38);
          v126 = sub_1C49BE7E4(v3, v123, v39);
        }
        if (*(_BYTE *)(v3 + 312))
        {
          v40 = sub_1C49BE904((uint64_t)&v139, v2, (_QWORD *)v29);
          v136[0] = 0;
          v126 = v40;
          v41 = sub_1C4779044((uint64_t)v27, v29, (unsigned __int8 **)v136, *(_QWORD *)(*(_QWORD *)(v3 + 328) + 8) + 136800, v40);
          v43 = v42;
          LODWORD(v131) = 1;
          v132 = 0;
          v133 = 0;
          llvm::MachineInstr::addOperand(v42, v41, (const llvm::MachineOperand *)&v131);
          v44 = *(_DWORD *)(v123[4] + 4);
          v132 = 0;
          LODWORD(v131) = 0;
          HIDWORD(v131) = v44;
          v133 = 0;
          v134 = 0;
          llvm::MachineInstr::addOperand(v43, v41, (const llvm::MachineOperand *)&v131);
          LODWORD(v131) = 1;
          v132 = 0;
          v133 = 0;
          llvm::MachineInstr::addOperand(v43, v41, (const llvm::MachineOperand *)&v131);
          LODWORD(v135) = v130;
          v45 = sub_1C48C3740((uint64_t)v116, &v135)[1];
          LODWORD(v131) = 1;
          v132 = 0;
          v133 = v45;
          llvm::MachineInstr::addOperand(v43, v41, (const llvm::MachineOperand *)&v131);
          LODWORD(v131) = 1;
          v132 = 0;
          v133 = 0;
          llvm::MachineInstr::addOperand(v43, v41, (const llvm::MachineOperand *)&v131);
          if (v136[0])
            llvm::MetadataTracking::untrack((uint64_t)v136, (unsigned __int8 *)v136[0]);
        }
        v46 = *(unsigned __int16 **)(v29 + 16);
        v47 = *v46;
        v124 = v31;
        if ((unsigned __int16)(v47 - 1) <= 1u && (*(_BYTE *)(*(_QWORD *)(v29 + 32) + 48) & 0x10) != 0)
        {
LABEL_151:
          LODWORD(v50) = 1;
        }
        else
        {
          v48 = *(_WORD *)(v29 + 44);
          v49 = *((_QWORD *)v46 + 1);
          if ((v48 & 0xC) != 0 && (v48 & 4) == 0)
          {
            v96 = v29;
            if ((v49 & 0x100000) != 0)
              goto LABEL_151;
            while (1)
            {
              v97 = *(unsigned __int16 *)(v96 + 44);
              LODWORD(v50) = (v97 >> 3) & 1;
              if ((v97 & 8) == 0)
                break;
              v96 = *(_QWORD *)(v96 + 8);
              v27 = v121;
              v3 = v125;
              if ((*(_BYTE *)(*(_QWORD *)(v96 + 16) + 10) & 0x10) != 0)
                goto LABEL_66;
            }
            v27 = v121;
            v3 = v125;
          }
          else
          {
            v50 = (v49 >> 20) & 1;
          }
        }
LABEL_66:
        v51 = v47 - 322;
        if (v51 > 0x21)
          v52 = 0;
        else
          v52 = dword_1C6612F00[(__int16)v51];
        v53 = *(_DWORD *)(*(_QWORD *)(v29 + 32) + 32 * (v50 ^ 1) + 16);
        v54 = v53 & 0xF0;
        v128 = v53 & 0xF;
        v129 = v54;
        if (!(_BYTE)v53)
        {
          sub_1C4887E24(v52 >> 3, &v129, &v128);
          v54 = v129;
        }
        v32.i32[0] = v54 >> 4;
        v55 = (uint8x8_t)vcnt_s8(v32);
        v55.i16[0] = vaddlv_u8(v55);
        v136[0] = &v137;
        v56 = &unk_1C646B0C0;
        if (v52 / v55.i32[0] == 16)
          v56 = &unk_1C646B0B0;
        v137 = v56[v55.u32[0] - 1];
        v138 = 0x100000002;
        v136[1] = (void *)0x300000003;
        if ((_DWORD)v50)
          v57 = 51;
        else
          v57 = 50;
        v58 = sub_1C4884024(v57, &v137, 3, v117);
        v127 = 0;
        v59 = *(_QWORD *)(*(_QWORD *)(v3 + 328) + 8) + 48 * v58;
        if ((*(_WORD *)(v29 + 44) & 4) != 0)
        {
          v60 = (llvm::MachineFunction *)v27[4];
          v135 = 0;
          v61 = *((_QWORD *)v60 + 28);
          if (v61)
          {
            *((_QWORD *)v60 + 28) = *(_QWORD *)v61;
            v131 = 0;
          }
          else
          {
            v61 = sub_1C484358C((uint64_t)v60 + 128, 72, 3);
            v131 = v135;
            if (v135)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v135, v135, (uint64_t)&v131);
              v135 = 0;
            }
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v61, v60, v59, &v131, 0);
          if (v131)
            llvm::MetadataTracking::untrack((uint64_t)&v131, v131);
          if (v135)
            llvm::MetadataTracking::untrack((uint64_t)&v135, v135);
          if (v28 != (_QWORD *)v29 && (*(_WORD *)(v29 + 44) & 4) != 0)
            *(_WORD *)(v61 + 44) |= 0xCu;
          sub_1C512CA10(v120, (uint64_t *)v29, v61);
        }
        else
        {
          v60 = (llvm::MachineFunction *)v27[4];
          v135 = 0;
          v61 = *((_QWORD *)v60 + 28);
          if (v61)
          {
            *((_QWORD *)v60 + 28) = *(_QWORD *)v61;
            v131 = 0;
          }
          else
          {
            v61 = sub_1C484358C((uint64_t)v60 + 128, 72, 3);
            v131 = v135;
            if (v135)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v135, v135, (uint64_t)&v131);
              v135 = 0;
            }
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v61, v60, v59, &v131, 0);
          if (v131)
            llvm::MetadataTracking::untrack((uint64_t)&v131, v131);
          if (v135)
            llvm::MetadataTracking::untrack((uint64_t)&v135, v135);
          v62 = *v120;
          *(_QWORD *)(v61 + 24) = *v120;
          v63 = *(_QWORD *)(v62 + 32);
          v64 = *(unsigned int *)(v61 + 40);
          if ((_DWORD)v64)
          {
            v87 = *(_QWORD *)(v61 + 32);
            v88 = *(_QWORD *)(v63 + 40);
            v89 = 32 * v64;
            do
            {
              if (!*(_BYTE *)v87)
              {
                v90 = *(unsigned int *)(v87 + 4);
                if ((int)v90 >= 0)
                  v91 = (uint64_t *)(*(_QWORD *)(v88 + 272) + 8 * v90);
                else
                  v91 = (uint64_t *)(*(_QWORD *)(v88 + 24) + 16 * (v90 & 0x7FFFFFFF) + 8);
                v92 = *v91;
                if (*v91)
                {
                  v93 = *(_QWORD *)(v92 + 16);
                  *(_QWORD *)(v92 + 16) = v87;
                  *(_QWORD *)(v87 + 16) = v93;
                  if ((*(_BYTE *)(v87 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v87 + 24) = v92;
                  }
                  else
                  {
                    *(_QWORD *)(v87 + 24) = 0;
                    v91 = (uint64_t *)(v93 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v87 + 16) = v87;
                  *(_QWORD *)(v87 + 24) = 0;
                }
                *v91 = v87;
              }
              v87 += 32;
              v89 -= 32;
            }
            while (v89);
          }
          v65 = *(_QWORD *)(v63 + 728);
          if (v65)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v65 + 24))(v65, v61);
          v66 = *(_QWORD *)v29 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v61 = v66 | *(_QWORD *)v61 & 7;
          *(_QWORD *)(v61 + 8) = v29;
          *(_QWORD *)(v66 + 8) = v61;
          *(_QWORD *)v29 = *(_QWORD *)v29 & 7 | v61;
        }
        if (v127)
          llvm::MetadataTracking::untrack((uint64_t)&v127, v127);
        v67 = 64;
        if (!(_DWORD)v50)
          v67 = 0;
        v68 = *(_DWORD *)(*(_QWORD *)(v29 + 32) + v67 + 4);
        if ((v50 & 1) == 0)
        {
          v132 = 0;
          v133 = 0;
          v134 = 0;
          LODWORD(v131) = 0x1000000;
          HIDWORD(v131) = v68;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v61, v60, (const llvm::MachineOperand *)&v131);
        }
        v69 = v129 | v128 | 0x1000;
        LODWORD(v131) = 1;
        v132 = 0;
        v133 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v61, v60, (const llvm::MachineOperand *)&v131);
        LODWORD(v131) = 1;
        v132 = 0;
        v133 = v69;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v61, v60, (const llvm::MachineOperand *)&v131);
        if ((_DWORD)v50)
        {
          v132 = 0;
          LODWORD(v131) = 0;
          HIDWORD(v131) = v68;
          v133 = 0;
          v134 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v61, v60, (const llvm::MachineOperand *)&v131);
        }
        v70 = v36[1];
        if (*(_BYTE *)(v125 + 312))
          v70 *= *v115;
        v27 = v121;
        v71 = *v118 + v70;
        v72 = sub_1C4884088(v69);
        v132 = 0;
        LODWORD(v131) = 0;
        HIDWORD(v131) = v126;
        v133 = 0;
        v134 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v61, v60, (const llvm::MachineOperand *)&v131);
        LODWORD(v131) = 1;
        v132 = 0;
        v133 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v61, v60, (const llvm::MachineOperand *)&v131);
        LODWORD(v131) = 1;
        v132 = 0;
        v133 = v71 >> v72;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v61, v60, (const llvm::MachineOperand *)&v131);
        v73 = *(_QWORD *)(*(_QWORD *)(v29 + 24) + 32);
        v2 = v119;
        v31 = v124;
        v3 = v125;
        if (v73)
        {
          v74 = *(_QWORD *)(v73 + 728);
          if (v74)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v74 + 32))(v74, v29);
          v75 = *(unsigned int *)(v29 + 40);
          if ((_DWORD)v75)
          {
            v76 = *(_QWORD *)(v29 + 32);
            v77 = *(_QWORD *)(v73 + 40);
            v78 = 32 * v75;
            do
            {
              if (!*(_BYTE *)v76)
              {
                v79 = *(unsigned int *)(v76 + 4);
                if ((v79 & 0x80000000) != 0)
                  v80 = (uint64_t *)(*(_QWORD *)(v77 + 24) + 16 * (v79 & 0x7FFFFFFF) + 8);
                else
                  v80 = (uint64_t *)(*(_QWORD *)(v77 + 272) + 8 * v79);
                v81 = *v80;
                v83 = *(_QWORD *)(v76 + 16);
                v82 = *(_QWORD *)(v76 + 24);
                if (v76 != *v80)
                  v80 = (uint64_t *)(v83 + 24);
                *v80 = v82;
                if (v82)
                  v84 = v82;
                else
                  v84 = v81;
                *(_QWORD *)(v84 + 16) = v83;
                *(_QWORD *)(v76 + 16) = 0;
                *(_QWORD *)(v76 + 24) = 0;
              }
              v76 += 32;
              v78 -= 32;
            }
            while (v78);
          }
        }
        *(_QWORD *)(v29 + 24) = 0;
        v85 = *(unint64_t **)(v29 + 8);
        v86 = *(_QWORD *)v29 & 0xFFFFFFFFFFFFFFF8;
        *v85 = v86 | *v85 & 7;
        *(_QWORD *)(v86 + 8) = v85;
        *(_QWORD *)v29 &= 7uLL;
        *(_QWORD *)(v29 + 8) = 0;
        if (v136[0] != &v137)
          free(v136[0]);
      }
LABEL_130:
      v29 = v31;
      if ((_QWORD *)v31 == v28)
        goto LABEL_157;
    }
  }
LABEL_168:
  v98 = *(_QWORD *)(v2 + 56);
  v99 = *(_QWORD *)(v98 + 8);
  v100 = (unint64_t)(*(_QWORD *)(v98 + 16) - v99) >> 3;
  v101 = *(_DWORD *)(v98 + 32);
  v102 = (-858993459 * v100 - v101);
  if ((int)v102 >= 1)
  {
    v103 = 0;
    v104 = *(_QWORD *)(v3 + 248);
    v105 = *(unsigned int *)(v3 + 264);
    v106 = v105 - 1;
    do
    {
      if ((_DWORD)v105)
      {
        LODWORD(v107) = (37 * v103) & v106;
        v108 = (unsigned int *)(v104 + 8 * v107);
        v109 = *v108;
        if (v103 == v109)
        {
LABEL_172:
          if ((unsigned int *)(v104 + 8 * v105) != v108)
            *(_QWORD *)(v99 + 40 * (v101 + v103) + 8) = -1;
        }
        else
        {
          v110 = 1;
          while ((_DWORD)v109 != -1)
          {
            v111 = v107 + v110++;
            v107 = v111 & v106;
            v109 = *(unsigned int *)(v104 + 8 * v107);
            if (v103 == v109)
            {
              v108 = (unsigned int *)(v104 + 8 * v107);
              goto LABEL_172;
            }
          }
        }
      }
      ++v103;
    }
    while (v103 != v102);
  }
  v112 = *(unsigned int *)(v3 + 300);
  v26 = 1;
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 344) + 8))(*(_QWORD *)(v2 + 344), 13, v112, 1, 0, 1, 3);
  return v26;
}

unint64_t sub_1C49BE5B0(uint64_t a1, unint64_t a2, unint64_t *a3, int a4)
{
  unint64_t *v5;
  unint64_t v6;
  uint64_t i;
  uint64_t v8;
  llvm::MachineFunction *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a3)
  {
    v5 = a3;
    v6 = a3[3];
  }
  else
  {
    v6 = a2;
    v5 = (unint64_t *)(a2 + 48);
    for (i = *(_QWORD *)(a2 + 56); (unint64_t *)i != v5; i = *(_QWORD *)(i + 8))
    {
      if (**(_WORD **)(i + 16) && **(_WORD **)(i + 16) != 69)
      {
        v5 = (unint64_t *)i;
        break;
      }
    }
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 8) + 219504;
  v9 = *(llvm::MachineFunction **)(v6 + 32);
  v24 = 0;
  v10 = *((_QWORD *)v9 + 28);
  if (v10)
    *((_QWORD *)v9 + 28) = *(_QWORD *)v10;
  else
    v10 = sub_1C484358C((uint64_t)v9 + 128, 72, 3);
  v25 = 0;
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v10, v9, v8, (unsigned __int8 **)&v25, 0);
  if (v25)
    llvm::MetadataTracking::untrack((uint64_t)&v25, (unsigned __int8 *)v25);
  if (v24)
    llvm::MetadataTracking::untrack((uint64_t)&v24, v24);
  v11 = *(_QWORD *)(v6 + 40);
  *(_QWORD *)(v10 + 24) = v11;
  v12 = *(_QWORD *)(v11 + 32);
  v13 = *(unsigned int *)(v10 + 40);
  if ((_DWORD)v13)
  {
    v17 = *(_QWORD *)(v10 + 32);
    v18 = *(_QWORD *)(v12 + 40);
    v19 = 32 * v13;
    do
    {
      if (!*(_BYTE *)v17)
      {
        v20 = *(unsigned int *)(v17 + 4);
        if ((int)v20 >= 0)
          v21 = (uint64_t *)(*(_QWORD *)(v18 + 272) + 8 * v20);
        else
          v21 = (uint64_t *)(*(_QWORD *)(v18 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
        v22 = *v21;
        if (*v21)
        {
          v23 = *(_QWORD *)(v22 + 16);
          *(_QWORD *)(v22 + 16) = v17;
          *(_QWORD *)(v17 + 16) = v23;
          if ((*(_BYTE *)(v17 + 3) & 1) != 0)
          {
            *(_QWORD *)(v17 + 24) = v22;
          }
          else
          {
            *(_QWORD *)(v17 + 24) = 0;
            v21 = (uint64_t *)(v23 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v17 + 16) = v17;
          *(_QWORD *)(v17 + 24) = 0;
        }
        *v21 = v17;
      }
      v17 += 32;
      v19 -= 32;
    }
    while (v19);
  }
  v14 = *(_QWORD *)(v12 + 728);
  if (v14)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v14 + 24))(v14, v10);
  v15 = *v5 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v10 = v15 | *(_QWORD *)v10 & 7;
  *(_QWORD *)(v10 + 8) = v5;
  *(_QWORD *)(v15 + 8) = v10;
  *v5 = *v5 & 7 | v10;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  LODWORD(v25) = 0x1000000;
  HIDWORD(v25) = a4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v10, v9, (const llvm::MachineOperand *)&v25);
  LODWORD(v25) = 1;
  v26 = 0;
  v27 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v10, v9, (const llvm::MachineOperand *)&v25);
  v26 = 0;
  v27 = 0;
  v25 = 0x1900000000;
  v28 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v10, v9, (const llvm::MachineOperand *)&v25);
  return v10;
}

uint64_t sub_1C49BE7E4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  llvm::MachineFunction *v8;
  llvm::MachineInstr *v9;
  llvm::MachineInstr *v10;
  uint64_t v11;
  unsigned __int8 *v13;
  _DWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *(unsigned int *)(a2[4] + 4);
  if (!*(_BYTE *)(a1 + 312))
  {
    v6 = a2[3];
    if (a2[1] == v6 + 48)
      v7 = 0;
    else
      v7 = a2[1];
    v13 = 0;
    v8 = sub_1C4779044(v6, v7, &v13, *(_QWORD *)(*(_QWORD *)(a1 + 328) + 8) + 136800, a3);
    v10 = v9;
    v14[0] = 1;
    v15 = 0;
    v16 = 0;
    llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)v14);
    v15 = 0;
    v16 = 0;
    v14[0] = 0;
    v14[1] = v3;
    v17 = 0;
    llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)v14);
    v14[0] = 1;
    v15 = 0;
    v16 = 0;
    llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)v14);
    v11 = *(unsigned int *)(a1 + 300);
    v14[0] = 1;
    v15 = 0;
    v16 = v11;
    llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)v14);
    v14[0] = 1;
    v15 = 0;
    v16 = 0;
    llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)v14);
    if (v13)
      llvm::MetadataTracking::untrack((uint64_t)&v13, v13);
    return a3;
  }
  return v3;
}

unint64_t sub_1C49BE904(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int StackObject;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;

  sub_1C614D6B4((llvm::RegScavenger *)a1, (uint64_t)a3);
  llvm::RegScavenger::backward((llvm::RegScavenger *)a1);
  result = llvm::RegScavenger::FindUnusedReg(a1, (unsigned __int16 ***)&off_1E7FA5F10);
  if (!(_DWORD)result)
  {
    llvm::RegScavenger::forward((llvm::RegScavenger *)a1);
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
    v8 = *(_QWORD *)(v7 + 264)
       + 24 * *(_DWORD *)(v7 + 272) * ((*(_QWORD *)(v7 + 248) - *(_QWORD *)(v7 + 240)) >> 3);
    StackObject = llvm::MachineFrameInfo::CreateStackObject(*(unsigned __int8 **)(a2 + 56), (unint64_t)*(unsigned int *)(v8 + 4) >> 3, 63 - __clz((unint64_t)*(unsigned int *)(v8 + 8) >> 3), 0, 0, 0);
    v10 = *(unsigned int *)(a1 + 56);
    if (v10 >= *(_DWORD *)(a1 + 60))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 48, a1 + 64, v10 + 1, 16);
      LODWORD(v10) = *(_DWORD *)(a1 + 56);
    }
    v11 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    *v11 = StackObject;
    v11[1] = 0;
    ++*(_DWORD *)(a1 + 56);
    v12 = llvm::RegScavenger::scavengeRegisterBackwards((_QWORD *)a1, (uint64_t)&off_1E7FA5F10, a3, 0, 0, 1);
    llvm::RegScavenger::backward((llvm::RegScavenger *)a1);
    return v12;
  }
  return result;
}

_QWORD *sub_1C49BEA38(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E819E480;
  v2 = (_QWORD *)(a1 + 200);
  v3 = *(_QWORD **)(a1 + 224);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  *(_QWORD *)(a1 + 152) = &off_1E7FA8D20;
  if (*(char *)(a1 + 183) < 0)
    operator delete(*(void **)(a1 + 160));
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  return sub_1C47A80D0((_QWORD *)a1);
}

void sub_1C49BEAC4(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t NamedMetadata;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  _QWORD *v25;
  unint64_t *v26;
  void (**v27)(unint64_t *);
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  uint64_t j;
  unsigned __int16 *v37;
  int v38;
  BOOL v40;
  uint64_t v41;
  _BOOL4 v42;
  _BOOL4 v43;
  BOOL v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  _DWORD *v52;
  __int128 *v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  void *v76;
  BOOL v77;
  unsigned int v78;
  __int128 v79;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  unsigned int v85;
  uint64_t v86;
  void *v87[2];
  _BYTE v88[48];
  int v89;
  char v90;
  void *__src;
  uint64_t v92;
  _BYTE v93[48];
  int v94;
  __int128 v95;
  _OWORD v96[2];
  uint64_t v97;
  _QWORD *v98;
  int v99;
  unint64_t v100;
  void **v101;
  _QWORD **v102;
  const void **v103;
  __int16 v104;
  uint64_t v105;

  v2 = a1;
  v105 = *MEMORY[0x1E0C80C00];
  v86 = a1[2];
  v87[0] = v88;
  v87[1] = (void *)0x600000000;
  sub_1C4765AA4((char *)v87, 2uLL, 0);
  v89 = 128;
  v90 = 0;
  __src = v93;
  v92 = 0x600000000;
  v94 = 0;
  v95 = 0u;
  memset(v96, 0, 27);
  if (*(_BYTE *)(v86 + 343))
  {
    v3 = *(_QWORD *)(*v2 + 40);
    v4 = v2[43];
    v97 = 1;
    for (i = 8; i != 264; i += 16)
      *(uint64_t *)((char *)&v97 + i) = -4096;
    v100 = (unint64_t)"agx.interpolations";
    v104 = 259;
    NamedMetadata = llvm::Module::getNamedMetadata(v3, (uint64_t)&v100);
    if (NamedMetadata)
    {
      v7 = NamedMetadata;
      v8 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
      if ((_DWORD)v8)
      {
        v9 = 0;
        v10 = 8 * v8;
        do
        {
          v11 = *(_QWORD *)(**(_QWORD **)(v7 + 48) + v9);
          v12 = *(unsigned int *)(v11 + 8);
          if (*(_QWORD *)(v11 - 8 * v12))
          {
            v100 = 0;
            v100 = *(_QWORD *)(*(_QWORD *)(v11 - 8 * v12) + 128);
            sub_1C485BD74((uint64_t)&v97, &v100)[1] = v11;
          }
          v9 += 8;
        }
        while (v10 != v9);
      }
    }
    (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 128))(&v100, v4, 9);
    (*(void (**)(_QWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 136))(&v84, v4, 9);
    v13 = v100;
    v14 = v84;
    v83 = v2;
    if (v100)
    {
      (*(void (**)(unint64_t *__return_ptr, unint64_t))(*(_QWORD *)v100 + 16))(&v100, v100);
      v15 = v100;
    }
    else
    {
      v15 = 0;
    }
    v82 = v14;
    (*(void (**)(unint64_t *__return_ptr, _QWORD *))(*v14 + 16))(&v100, v14);
    v16 = v100;
    while (((*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)v15 + 24))(v15, v16) & 1) == 0)
    {
      v17 = *(_QWORD *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v15 + 32))(v15);
      LODWORD(v84) = 0;
      LODWORD(v84) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 400))(v4, v17);
      if ((v97 & 1) != 0)
      {
        v18 = 16;
        v19 = &v98;
      }
      else
      {
        v18 = v99;
        if (!v99)
          goto LABEL_22;
        v19 = v98;
      }
      v20 = v18 - 1;
      v21 = (v18 - 1) & ((v17 >> 4) ^ (v17 >> 9));
      v22 = v19[2 * v21];
      if (v17 == v22)
      {
LABEL_19:
        v25 = (_QWORD *)v19[2 * v21 + 1];
        goto LABEL_23;
      }
      v23 = 1;
      while (v22 != -4096)
      {
        v24 = v21 + v23++;
        v21 = v24 & v20;
        v22 = v19[2 * v21];
        if (v17 == v22)
          goto LABEL_19;
      }
LABEL_22:
      v25 = 0;
LABEL_23:
      v100 = (unint64_t)&off_1E7FA8C70;
      v101 = v87;
      v102 = &v84;
      v103 = (const void **)&v100;
      sub_1C485BBE8(v25, (uint64_t)&v100);
      v26 = (unint64_t *)v103;
      if (v103 == (const void **)&v100)
      {
        v27 = (void (**)(unint64_t *))(v100 + 32);
        v26 = &v100;
        goto LABEL_27;
      }
      if (v103)
      {
        v27 = (void (**)(unint64_t *))((char *)*v103 + 40);
LABEL_27:
        (*v27)(v26);
      }
      (*(void (**)(unint64_t))(*(_QWORD *)v15 + 40))(v15);
    }
    if (v16)
      (*(void (**)(unint64_t))(*(_QWORD *)v16 + 8))(v16);
    (*(void (**)(unint64_t))(*(_QWORD *)v15 + 8))(v15);
    (*(void (**)(_QWORD *))(*v82 + 8))(v82);
    if (v13)
      (*(void (**)(unint64_t))(*(_QWORD *)v13 + 8))(v13);
    v2 = v83;
    if ((v97 & 1) == 0)
      MEMORY[0x1CAA32FB4](v98, 8);
    v28 = v89;
    v29 = v92;
    if ((v94 & 0x3F) != 0)
      *((_QWORD *)__src + v92 - 1) &= ~(-1 << (v94 & 0x3F));
    v30 = v29;
    v94 = v28;
    v31 = v28 + 63;
    if ((_DWORD)v29 != (v28 + 63) >> 6)
    {
      v32 = v31 >> 6;
      if (v29 > v32)
      {
        LODWORD(v92) = v31 >> 6;
        v30 = v31 >> 6;
      }
      else
      {
        v33 = v29;
        if (v32 > HIDWORD(v92))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v93, v32, 8);
          v33 = v92;
          v30 = v92;
        }
        if (v32 != v29)
          bzero((char *)__src + 8 * v33, 8 * (v32 - v29));
        v30 += v32 - v29;
        LODWORD(v92) = v30;
        LOBYTE(v28) = v94;
      }
    }
    v34 = v28 & 0x3F;
    if (v34)
      *((_QWORD *)__src + v30 - 1) &= ~(-1 << v34);
  }
  else
  {
    v30 = 0;
  }
  v35 = (_QWORD *)v2[41];
  v81 = v2 + 40;
  if (v35 == v2 + 40)
    goto LABEL_144;
  do
  {
    for (j = v35[7]; (_QWORD *)j != v35 + 6; j = *(_QWORD *)(j + 8))
    {
      v37 = *(unsigned __int16 **)(j + 16);
      v38 = *v37;
      v40 = (v38 - 9) <= 0x3C && ((1 << (v38 - 9)) & 0x1000000000000605) != 0
         || v38 == 0;
      if (!v40 && (v37[4] & 0x10) == 0)
        ++LODWORD(v96[1]);
      if ((v38 - 419) > 3)
      {
        if ((v38 - 6165) > 1)
        {
          if ((v38 - 566) <= 2)
            BYTE10(v96[1]) = 1;
        }
        else
        {
          BYTE9(v96[1]) = 1;
        }
      }
      else
      {
        BYTE8(v96[1]) = 1;
      }
      v41 = *((_QWORD *)v37 + 2);
      v42 = (v41 & 0x800200) == 8389120;
      v43 = (v41 & 0x800100) == 8388864;
      v44 = (v41 & 0x800100) == 0x800100 || (v41 & 0x800200) == 8389120;
      if (v44 && (*(_BYTE *)(*(_QWORD *)(j + 32) + 32 * sub_1C4C2FD5C(v38) + 17) & 4) != 0)
      {
        v43 = 0;
        v42 = 0;
      }
      if ((v41 & 0x1D00) == 0x500)
      {
        v45 = *(_QWORD *)(j + 48);
        if ((v45 & 7) != 0)
        {
          v46 = *(uint64_t **)((v45 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          v46 = (uint64_t *)(v45 & 0xFFFFFFFFFFFFFFF8);
          *(_QWORD *)(j + 48) = v46;
        }
        v47 = *v46;
        v43 = 0;
        if ((v47 & 4) != 0)
        {
          v48 = (_DWORD *)(v47 & 0xFFFFFFFFFFFFFFF8);
          if ((v47 & 0xFFFFFFFFFFFFFFF8) != 0
            && v48[2] >= 7u
            && !(*(unsigned int (**)(_DWORD *))(*(_QWORD *)v48 + 48))(v48))
          {
            v43 = 1;
          }
        }
      }
      else if ((v41 & 0x1E00) == 0x600)
      {
        v49 = *(_QWORD *)(j + 48);
        if ((v49 & 7) != 0)
        {
          v50 = *(uint64_t **)((v49 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          v50 = (uint64_t *)(v49 & 0xFFFFFFFFFFFFFFF8);
          *(_QWORD *)(j + 48) = v50;
        }
        v51 = *v50;
        v42 = 0;
        if ((v51 & 4) != 0)
        {
          v52 = (_DWORD *)(v51 & 0xFFFFFFFFFFFFFFF8);
          if ((v51 & 0xFFFFFFFFFFFFFFF8) != 0
            && v52[2] >= 7u
            && !(*(unsigned int (**)(_DWORD *))(*(_QWORD *)v52 + 48))(v52))
          {
            v42 = 1;
          }
        }
      }
      if (v43 || v42)
      {
        sub_1C4A16D7C(j, (uint64_t)&v97);
        if (BYTE6(v98))
        {
          if (v42)
            v53 = v96;
          else
            v53 = &v95;
          *(_QWORD *)v53 = -1;
          *((_QWORD *)v53 + 1) = -1;
          goto LABEL_116;
        }
        sub_1C4A16EB0((unsigned int *)&v97, (llvm::APInt *)&v100);
        if (v42)
        {
          v85 = v101;
          if (v101 < 0x41
            || (llvm::APInt::initSlowCase((llvm::APInt *)&v84, 0, 0), v66 = v85, v85 < 0x41))
          {
            v84 = (_QWORD *)v100;
            *(_QWORD *)&v96[0] |= v100;
          }
          else
          {
            v67 = 0;
            v68 = v84;
            *v84 = -1;
            v69 = v100;
            v70 = ((unint64_t)(v66 + 63) >> 3) & 0x3FFFFFF8;
            do
            {
              v68[v67 / 8] &= *(_QWORD *)(v69 + v67);
              v67 += 8;
            }
            while (v70 != v67);
            *(_QWORD *)&v96[0] |= *v68;
            MEMORY[0x1CAA32F9C]();
          }
          v54 = v101;
          if (v101 <= 0x40)
          {
            if ((_DWORD)v101 == 64)
              v55 = 0;
            else
              v55 = v100;
            v85 = v101;
LABEL_99:
            v84 = (_QWORD *)v55;
            *((_QWORD *)&v96[0] + 1) |= v55;
LABEL_110:
            if (v54 >= 0x41 && v55)
              MEMORY[0x1CAA32F9C](v55, 0x1000C8000313F17);
            if (v101 >= 0x41 && v100)
              MEMORY[0x1CAA32F9C](v100, 0x1000C8000313F17);
            goto LABEL_116;
          }
          v56 = v101 + 63;
          v55 = operator new[]();
          memcpy((void *)v55, (const void *)v100, (v56 >> 3) & 0x3FFFFFF8);
          LODWORD(v56) = (v56 >> 6) - 1;
          memmove((void *)v55, (const void *)(v55 + 8), (8 * v56));
          *(_QWORD *)(v55 + 8 * v56) = 0;
          v85 = v54;
          llvm::APInt::initSlowCase((llvm::APInt *)&v84, 0, 0);
          v57 = v85;
          if (v85 < 0x41)
            goto LABEL_99;
          v58 = 0;
          v59 = v84;
          *v84 = -1;
          v60 = ((unint64_t)(v57 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            v59[v58 / 8] &= *(_QWORD *)(v55 + v58);
            v58 += 8;
          }
          while (v60 != v58);
          *((_QWORD *)&v96[0] + 1) |= *v59;
LABEL_130:
          MEMORY[0x1CAA32F9C]();
          goto LABEL_110;
        }
        v85 = v101;
        if (v101 < 0x41
          || (llvm::APInt::initSlowCase((llvm::APInt *)&v84, 0, 0), v71 = v85, v85 < 0x41))
        {
          v84 = (_QWORD *)v100;
          *(_QWORD *)&v95 = v95 | v100;
        }
        else
        {
          v72 = 0;
          v73 = v84;
          *v84 = -1;
          v74 = v100;
          v75 = ((unint64_t)(v71 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            v73[v72 / 8] &= *(_QWORD *)(v74 + v72);
            v72 += 8;
          }
          while (v75 != v72);
          *(_QWORD *)&v95 = v95 | *v73;
          MEMORY[0x1CAA32F9C]();
        }
        v54 = v101;
        if (v101 > 0x40)
        {
          v61 = v101 + 63;
          v55 = operator new[]();
          memcpy((void *)v55, (const void *)v100, (v61 >> 3) & 0x3FFFFFF8);
          LODWORD(v61) = (v61 >> 6) - 1;
          memmove((void *)v55, (const void *)(v55 + 8), (8 * v61));
          *(_QWORD *)(v55 + 8 * v61) = 0;
          v85 = v54;
          llvm::APInt::initSlowCase((llvm::APInt *)&v84, 0, 0);
          v62 = v85;
          if (v85 >= 0x41)
          {
            v63 = 0;
            v64 = v84;
            *v84 = -1;
            v65 = ((unint64_t)(v62 + 63) >> 3) & 0x3FFFFFF8;
            do
            {
              v64[v63 / 8] &= *(_QWORD *)(v55 + v63);
              v63 += 8;
            }
            while (v65 != v63);
            *((_QWORD *)&v95 + 1) |= *v64;
            goto LABEL_130;
          }
        }
        else
        {
          if ((_DWORD)v101 == 64)
            v55 = 0;
          else
            v55 = v100;
          v85 = v101;
        }
        v84 = (_QWORD *)v55;
        *((_QWORD *)&v95 + 1) |= v55;
        goto LABEL_110;
      }
LABEL_116:
      if ((*(_BYTE *)j & 4) == 0)
      {
        while ((*(_WORD *)(j + 44) & 8) != 0)
          j = *(_QWORD *)(j + 8);
      }
    }
    v35 = (_QWORD *)v35[1];
  }
  while (v35 != v81);
  v30 = v92;
LABEL_144:
  DWORD1(v96[1]) = 0;
  v76 = (void *)(a2 + 16);
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x600000000;
  if (v30)
    v77 = &__src == (void **)a2;
  else
    v77 = 1;
  if (!v77)
  {
    if (v30 < 7)
    {
      v78 = v30;
      goto LABEL_152;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (uint64_t)v76, v30, 8);
    v78 = v92;
    if ((_DWORD)v92)
    {
      v76 = *(void **)a2;
LABEL_152:
      memcpy(v76, __src, 8 * v78);
    }
    *(_DWORD *)(a2 + 8) = v30;
  }
  *(_DWORD *)(a2 + 64) = v94;
  v79 = v96[0];
  *(_OWORD *)(a2 + 72) = v95;
  *(_OWORD *)(a2 + 88) = v79;
  *(_OWORD *)(a2 + 99) = *(_OWORD *)((char *)v96 + 11);
  if (__src != v93)
    free(__src);
  if (v87[0] != v88)
    free(v87[0]);
}

uint64_t sub_1C49BF5F4(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  unsigned __int8 v6;
  double v7;
  double v8;
  double v9;
  double v10;
  unsigned __int8 v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  int v21;
  size_t v22;
  size_t v23;
  std::string *v24;
  const void *v25;
  const char *v26;
  const char *v27;
  const std::string::value_type *v28;
  const std::string::value_type *v29;
  std::string *v30;
  llvm *v31;
  llvm::raw_ostream *v32;
  std::string *v33;
  size_t size;
  double v35;
  double v36;
  llvm::raw_ostream *v37;
  llvm::raw_ostream *v38;
  _QWORD v39[3];
  _QWORD v40[3];
  _QWORD v41[3];
  _QWORD v42[3];
  std::string v43;

  v4 = atomic_load((unsigned __int8 *)&qword_1ED7EC938);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EC938))
  {
    byte_1ED7EC8F2 = 0;
    __cxa_guard_release(&qword_1ED7EC938);
  }
  if (byte_1ED7EC8F2)
  {
    v5 = a1 + 792;
    v6 = atomic_load((unsigned __int8 *)&qword_1ED7EC948);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EC948))
    {
      qword_1ED7EC940 = 0x4059000000000000;
      __cxa_guard_release(&qword_1ED7EC948);
    }
    if ((*(double (**)(uint64_t))(*(_QWORD *)v5 + 744))(a1 + 792) >= *(double *)&qword_1ED7EC940)
    {
      v7 = (*(double (**)(uint64_t))(*(_QWORD *)v5 + 744))(a1 + 792);
      v8 = (*(double (**)(uint64_t))(*(_QWORD *)v5 + 736))(a1 + 792);
      v9 = (*(double (**)(uint64_t))(*(_QWORD *)v5 + 744))(a1 + 792);
      v10 = (*(double (**)(uint64_t))(*(_QWORD *)v5 + 736))(a1 + 792);
      v11 = atomic_load((unsigned __int8 *)&qword_1ED7EC958);
      v12 = v9 / v10;
      if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EC958))
      {
        qword_1ED7EC950 = 0x3FF19999A0000000;
        __cxa_guard_release(&qword_1ED7EC958);
      }
      if (v12 >= *(double *)&qword_1ED7EC950)
      {
        v17 = v7 - v8;
        v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(a1 + 792);
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(a1 + 792);
        v20 = *(_BYTE *)(a2 + 215);
        v21 = v20;
        v22 = v20 & 0x7F;
        if (v21 >= 0)
          v23 = v22;
        else
          v23 = *(_QWORD *)(a2 + 200);
        sub_1C484371C((uint64_t)&v43, v23 + 1);
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v24 = &v43;
        else
          v24 = (std::string *)v43.__r_.__value_.__r.__words[0];
        if (v23)
        {
          if (*(char *)(a2 + 215) >= 0)
            v25 = (const void *)(a2 + 192);
          else
            v25 = *(const void **)(a2 + 192);
          memmove(v24, v25, v23);
        }
        *(_WORD *)((char *)&v24->__r_.__value_.__l.__data_ + v23) = 9;
        v26 = "Mix\t";
        v27 = "GLd\t";
        if (v19 <= 2 * v18)
          v27 = "Mix\t";
        if (v19 <= v18)
          v27 = "Mix\t";
        if (v18 > 2 * v19)
          v26 = "Smp\t";
        if (v18 > v19)
          v28 = v26;
        else
          v28 = v27;
        std::string::append(&v43, v28);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 80))(a1 + 792))
          v29 = "Yes\t";
        else
          v29 = "No\t";
        v30 = std::string::append(&v43, v29);
        v31 = llvm::dbgs((llvm *)v30);
        v32 = v31;
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v33 = &v43;
        else
          v33 = (std::string *)v43.__r_.__value_.__r.__words[0];
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = *((_BYTE *)&v43.__r_.__value_.__s + 23) & 0x7F;
        else
          size = v43.__r_.__value_.__l.__size_;
        llvm::raw_ostream::write(v31, (const char *)v33, size);
        v35 = (*(double (**)(uint64_t))(*(_QWORD *)v5 + 736))(a1 + 792);
        v42[0] = &off_1E7FA8D00;
        v42[1] = "%0.4f\t";
        *(double *)&v42[2] = v35;
        llvm::raw_ostream::operator<<(v32, (uint64_t)v42);
        v36 = (*(double (**)(uint64_t))(*(_QWORD *)v5 + 744))(a1 + 792);
        v41[0] = &off_1E7FA8D00;
        v41[1] = "%0.4f\t";
        *(double *)&v41[2] = v36;
        v37 = llvm::raw_ostream::operator<<(v32, (uint64_t)v41);
        v40[0] = &off_1E7FA8D00;
        v40[1] = "%0.4f\t";
        *(double *)&v40[2] = v17;
        v38 = llvm::raw_ostream::operator<<(v37, (uint64_t)v40);
        v39[0] = &off_1E7FA8D00;
        v39[1] = "%0.4f\n";
        *(double *)&v39[2] = v12;
        llvm::raw_ostream::operator<<(v38, (uint64_t)v39);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
      }
    }
  }
  v13 = sub_1C5FF1550(a1, a2);
  *(_DWORD *)(a1 + 1752) = 0;
  *(_DWORD *)(a1 + 1808) = 0;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_OWORD *)(a1 + 1843) = 0u;
  sub_1C558AC98((_QWORD *)(a1 + 1592));
  *(_DWORD *)(a1 + 1672) = 0;
  sub_1C5571D80((_DWORD *)(a1 + 1872));
  *(_DWORD *)(a1 + 1152) = 0;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  v14 = *(unsigned int *)(a1 + 1168);
  if ((_DWORD)v14)
    bzero(*(void **)(a1 + 1160), 8 * v14);
  *(_QWORD *)(a1 + 1240) = 0;
  v15 = *(_QWORD *)(a1 + 264);
  *(_DWORD *)(v15 + 144) = 0;
  *(_BYTE *)(v15 + 148) = 0;
  return v13;
}

llvm::Constant *sub_1C49BF9F0(uint64_t a1, llvm::Constant *a2)
{
  uint64_t Metadata;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  llvm::Constant *result;
  _QWORD *v14;
  uint64_t v15;
  unsigned int *v16;
  unint64_t Symbol;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;

  if (!a2 || *((_BYTE *)a2 + 16) != 3)
    return sub_1C5FF4488((_QWORD *)a1, a2);
  Metadata = llvm::Value::getMetadata((uint64_t)a2, "agx.bind", 8uLL);
  if (!Metadata)
    goto LABEL_21;
  v5 = (_QWORD *)(Metadata - 8 * *(unsigned int *)(Metadata + 8));
  v6 = v5[1];
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v5 + 128) + 24) + 8) == 17)
  {
    if (*(_BYTE *)v6 != 1 || (v7 = *(_QWORD *)(v6 + 128), *(_BYTE *)(v7 + 16) != 16))
    {
      v8 = (_QWORD *)(v6 - 8 * *(unsigned int *)(v6 + 8));
      v9 = *(_QWORD *)(*v8 + 128);
      v10 = (_QWORD *)(v9 + 24);
      if (*(_DWORD *)(v9 + 32) >= 0x41u)
        v10 = (_QWORD *)*v10;
      v11 = (_QWORD *)*v10;
      v12 = v8[1];
      goto LABEL_15;
    }
  }
  else
  {
    v7 = *(_QWORD *)(v6 + 128);
  }
  v14 = (_QWORD *)(v7 + 24);
  if (*(_DWORD *)(v7 + 32) >= 0x41u)
    v14 = (_QWORD *)*v14;
  v11 = (_QWORD *)*v14;
  v12 = v5[2];
LABEL_15:
  v15 = *(_QWORD *)(v12 + 128);
  v16 = (unsigned int *)(v15 + 24);
  if (*(_DWORD *)(v15 + 32) >= 0x41u)
    v16 = *(unsigned int **)v16;
  if ((_DWORD)v11 != 114 && (_DWORD)v11 != 18)
  {
LABEL_21:
    Symbol = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1 + 248), a2);
    v19 = *(_QWORD *)(a1 + 264);
    result = (llvm::Constant *)sub_1C484358C(v19 + 192, 24, 3);
    v20 = *(unsigned __int8 *)(*(_QWORD *)(v19 + 152) + 18) << 16;
    *(_BYTE *)result = 2;
    *(_DWORD *)((char *)result + 1) = v20 | (*((unsigned __int8 *)result + 4) << 24);
    *((_QWORD *)result + 1) = 0;
    *((_QWORD *)result + 2) = Symbol;
    return result;
  }
  v21 = *v16;
  v22 = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1 + 248), a2);
  v23 = *(_QWORD *)(a1 + 264);
  v24 = sub_1C484358C(v23 + 192, 24, 3);
  v25 = v24;
  if (*(_BYTE *)(*(_QWORD *)(v23 + 152) + 18))
    v26 = 65689;
  else
    v26 = 153;
  *(_BYTE *)v24 = 2;
  *(_DWORD *)(v24 + 1) = v26 | (*(unsigned __int8 *)(v24 + 4) << 24);
  *(_QWORD *)(v24 + 8) = 0;
  *(_QWORD *)(v24 + 16) = v22;
  v27 = sub_1C484358C(v23 + 192, 24, 3);
  *(_BYTE *)v27 = 1;
  *(_DWORD *)(v27 + 1) = *(unsigned __int8 *)(v27 + 4) << 24;
  *(_QWORD *)(v27 + 8) = 0;
  *(_QWORD *)(v27 + 16) = v21;
  result = (llvm::Constant *)sub_1C484358C(v23 + 192, 32, 3);
  *(_BYTE *)result = 0;
  *(_DWORD *)((char *)result + 1) = *((unsigned __int8 *)result + 4) << 24;
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 2) = v25;
  *((_QWORD *)result + 3) = v27;
  return result;
}

const llvm::GlobalValue *sub_1C49BFC18(llvm::TargetMachine **a1, const llvm::GlobalValue *a2)
{
  const llvm::GlobalValue *result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v17;

  result = (const llvm::GlobalValue *)llvm::Value::getMetadata((uint64_t)a2, "agx.bind", 8uLL);
  if (!result)
    goto LABEL_2;
  v5 = (_QWORD *)((char *)result - 8 * *((unsigned int *)result + 2));
  v6 = v5[1];
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v5 + 128) + 24) + 8) == 17)
  {
    if (*(_BYTE *)v6 != 1 || (v7 = *(_QWORD *)(v6 + 128), *(_BYTE *)(v7 + 16) != 16))
    {
      v8 = (_QWORD *)(v6 - 8 * *(unsigned int *)(v6 + 8));
      v9 = *(_QWORD *)(*v8 + 128);
      v10 = (_QWORD *)(v9 + 24);
      if (*(_DWORD *)(v9 + 32) >= 0x41u)
        v10 = (_QWORD *)*v10;
      v11 = (_QWORD *)*v10;
      v12 = v8[1];
      goto LABEL_14;
    }
  }
  else
  {
    v7 = *(_QWORD *)(v6 + 128);
  }
  v13 = (_QWORD *)(v7 + 24);
  if (*(_DWORD *)(v7 + 32) >= 0x41u)
    v13 = (_QWORD *)*v13;
  v11 = (_QWORD *)*v13;
  v12 = v5[2];
LABEL_14:
  v14 = *(_QWORD *)(v12 + 128);
  v15 = (_QWORD *)(v14 + 24);
  if (*(_DWORD *)(v14 + 32) >= 0x41u)
    v15 = (_QWORD *)*v15;
  if ((_DWORD)v11 == 114 || (_DWORD)v11 == 18)
  {
    v17 = (_QWORD *)*v15;
    result = (const llvm::GlobalValue *)llvm::TargetMachine::getSymbol(a1[31], a2);
    *((_DWORD *)result + 4) = (_DWORD)v17;
    return result;
  }
LABEL_2:
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFFFFFF00) == 0x200)
    return sub_1C5FEC228((const llvm::GlobalValue *)a1, a2);
  return result;
}

uint64_t sub_1C49BFD4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v25;

  v2 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 272) + 16);
  v4 = *(_QWORD *)(a1 + 248);
  v5 = *(_BYTE *)(v4 + 519);
  v6 = *(_QWORD *)(v4 + 504);
  if (v5 >= 0)
    v7 = (unsigned __int16 *)(v4 + 496);
  else
    v7 = *(unsigned __int16 **)(v4 + 496);
  v8 = v5 & 0x7F;
  if (v5 < 0)
    v8 = v6;
  switch(v8)
  {
    case 3:
      if (*v7 ^ 0x3167 | *((unsigned __int8 *)v7 + 2) ^ 0x35)
        v2 = 0;
      else
        v2 = 0x100000001;
      break;
    case 4:
      if (*(_DWORD *)v7 != 1731539303)
        goto LABEL_16;
      goto LABEL_11;
    case 5:
      v9 = *(_DWORD *)v7;
      v10 = *((unsigned __int8 *)v7 + 4);
      if (v9 == 926050143 && v10 == 53)
LABEL_11:
        v2 = 0x100000011;
      else
LABEL_16:
        v2 = 0;
      break;
    case 7:
      v2 = 0x100000011;
      if (*(_DWORD *)v7 == 1731539303 && *(_DWORD *)((char *)v7 + 3) == 811674983)
      {
        v2 = 0x100000004;
      }
      else if (*(_DWORD *)v7 == 1731539303 && *(_DWORD *)((char *)v7 + 3) == 811740519)
      {
        v2 = 0x100000005;
      }
      else if (*(_DWORD *)v7 != 1731539303 || *(_DWORD *)((char *)v7 + 3) != 811806055)
      {
        if (*(_DWORD *)v7 == 1932865895 && *(_DWORD *)((char *)v7 + 3) == 811674995)
        {
          v2 = 0x100000006;
        }
        else if (*(_DWORD *)v7 == 1932865895 && *(_DWORD *)((char *)v7 + 3) == 811740531)
        {
          v2 = 0x100000007;
        }
        else if (*(_DWORD *)v7 == 1932865895 && *(_DWORD *)((char *)v7 + 3) == 828517747)
        {
          v2 = 0x10000001ALL;
        }
        else if (*(_DWORD *)v7 == 1664430439 && *(_DWORD *)((char *)v7 + 3) == 811674979)
        {
          v2 = 0x100000008;
        }
        else if (*(_DWORD *)v7 == 1664430439 && *(_DWORD *)((char *)v7 + 3) == 811740515)
        {
          v2 = 0x100000009;
        }
        else if (*(_DWORD *)v7 == 1882599783 && *(_DWORD *)((char *)v7 + 3) == 811674992)
        {
          v2 = 0x10000000ELL;
        }
        else if (*(_DWORD *)v7 == 1882599783 && *(_DWORD *)((char *)v7 + 3) == 811740528)
        {
          v2 = 0x10000000FLL;
        }
        else if (*(_DWORD *)v7 == 1882599783 && *(_DWORD *)((char *)v7 + 3) == 828517744)
        {
          v2 = 0x10000001BLL;
        }
        else if (*(_DWORD *)v7 == 1731604839 && *(_DWORD *)((char *)v7 + 3) == 811674983)
        {
          v2 = 0x100000010;
        }
        else if (*(_DWORD *)v7 == 1731604839 && *(_DWORD *)((char *)v7 + 3) == 811740519)
        {
          v2 = 0x100000019;
        }
        else
        {
          v2 = 0x100000014;
          if (*(_DWORD *)v7 ^ 0x70373167 | *(_DWORD *)((char *)v7 + 3) ^ 0x30612D70)
            v2 = 0;
        }
      }
      break;
    default:
      break;
  }
  if ((v2 & 0xFF00000000) != 0)
    v25 = v2;
  else
    v25 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 88))(v3, v25);
}

void sub_1C49C0024(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  _BOOL4 v11;
  int v12;
  int v13;
  std::string *v14;
  std::string::size_type v15;
  char v16;
  std::string::size_type v17;
  int v18;
  std::string *v19;
  std::string::size_type v20;
  char v21;
  std::string::size_type v22;
  int v23;
  int v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  std::string v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(*(_QWORD *)a2 + 32);
  v7 = *(_DWORD *)(v6 + 32 * a3 + 16) - 81;
  if (*(_DWORD *)(v6 + 32 * a3))
    v8 = (*(_DWORD *)(v6 + 32 * a3) >> 8) & 0xFFF;
  else
    v8 = 0;
  if ((v8 & 0x200) != 0)
    v9 = v8 & 0xFFFFFDFF;
  else
    v9 = v8;
  if ((v9 & 0xFFFFFEFF) != 0)
  {
    if ((v9 & 1) != 0)
      v10 = 4;
    else
      v10 = 2;
  }
  else
  {
    v10 = dword_1C6613038[v7];
  }
  v11 = (v9 & 0xFFFFFEFF) != 0;
  if ((v9 & 0x100) != 0)
    goto LABEL_15;
  while (2)
  {
    if (v11 && v10 >= dword_1C6613038[v7])
    {
LABEL_15:
      *(_BYTE *)(a1 + 23) = 6;
      strcpy((char *)a1, "Unused");
      return;
    }
    v12 = 2;
    switch(*(_DWORD *)(v6 + 32 * a3 + 16))
    {
      case 'Q':
        v13 = *(_DWORD *)(v6 + 32 * a3 + 4);
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        std::to_string(&__p, v13);
        v14 = std::string::insert(&__p, 0, "ir");
        v15 = v14->__r_.__value_.__r.__words[0];
        v30.__r_.__value_.__r.__words[0] = v14->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v30.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
        v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(a1 + 23) < 0)
          operator delete(*(void **)a1);
        v17 = v30.__r_.__value_.__r.__words[0];
        *(_QWORD *)a1 = v15;
        *(_QWORD *)(a1 + 8) = v17;
        *(_QWORD *)(a1 + 15) = *(std::string::size_type *)((char *)v30.__r_.__value_.__r.__words + 7);
        *(_BYTE *)(a1 + 23) = v16;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_42;
      case 'R':
        goto LABEL_25;
      case 'S':
        v12 = 4;
        goto LABEL_25;
      case 'T':
        v12 = 8;
        goto LABEL_25;
      case 'U':
        v12 = 16;
LABEL_25:
        v18 = *(_DWORD *)(v6 + 32 * a3 + 4);
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        std::to_string(&__p, v18);
        v19 = std::string::insert(&__p, 0, "{ ir");
        v20 = v19->__r_.__value_.__r.__words[0];
        v30.__r_.__value_.__r.__words[0] = v19->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v30.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
        v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(a1 + 23) < 0)
          operator delete(*(void **)a1);
        v22 = v30.__r_.__value_.__r.__words[0];
        *(_QWORD *)a1 = v20;
        *(_QWORD *)(a1 + 8) = v22;
        *(_QWORD *)(a1 + 15) = *(std::string::size_type *)((char *)v30.__r_.__value_.__r.__words + 7);
        *(_BYTE *)(a1 + 23) = v21;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v23 = v18 + v12;
        v24 = v18 + 1;
        do
        {
          std::to_string(&v30, v24);
          v25 = std::string::insert(&v30, 0, ", ir");
          v26 = v25->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v26;
          v25->__r_.__value_.__l.__size_ = 0;
          v25->__r_.__value_.__r.__words[2] = 0;
          v25->__r_.__value_.__r.__words[0] = 0;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
          else
            size = __p.__r_.__value_.__l.__size_;
          std::string::append((std::string *)a1, (const std::string::value_type *)p_p, size);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v30.__r_.__value_.__l.__data_);
          ++v24;
        }
        while (v24 < v23);
        std::string::append((std::string *)a1, " }");
LABEL_42:
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a2 + 32) + 32 * (a3 + 1) + 16) & 0x10) != 0)
          std::string::append((std::string *)a1, ".lu");
        break;
      default:
        v10 = 0;
        v11 = 0;
        continue;
    }
    break;
  }
}

void sub_1C49C0360(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  int v9;
  int v10;
  unsigned __int16 *v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  _BYTE *v15;
  int v16;
  unsigned int v17;
  std::string *v18;
  std::string::size_type v19;
  unsigned int v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type size;
  unsigned int v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  size_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  const char *v35;
  uint64_t v36;
  char *v37;
  int v38;
  std::string::size_type v39;
  unsigned int NumExplicitOperands;
  _QWORD *v41;
  uint64_t v42;
  int *v43;
  int v44;
  int64_t v45;
  int64_t v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  _QWORD *i;
  unsigned int v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  unsigned int v61;
  unint64_t v62;
  void *v63;
  unint64_t v64;
  int v65;
  const char *v66;
  size_t v67;
  _BYTE *v68;
  const char *v69;
  float v70;
  char *v71;
  std::string::size_type v72;
  int v73;
  float v74;
  _BYTE *v75;
  uint64_t j;
  uint64_t v77;
  uint64_t v78;
  uint64_t k;
  std::string::size_type v80;
  std::string::size_type v81;
  int v82;
  char *v83;
  std::string *v84;
  size_t v85;
  _WORD *v86;
  unsigned __int16 *v87;
  int v88;
  unsigned __int8 v89;
  uint64_t v90;
  char v91;
  int v92;
  int v93;
  int v94;
  llvm::MCStreamer *v95;
  std::string::size_type v96;
  std::string::size_type v97;
  llvm *v98;
  llvm::raw_ostream *v99;
  llvm::raw_ostream *v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE *v103;
  size_t v104;
  size_t v105;
  llvm::raw_ostream *v106;
  llvm::raw_ostream *v107;
  llvm::raw_ostream *v108;
  llvm *v109;
  void *v110;
  llvm *v111;
  llvm::raw_ostream *v112;
  llvm::raw_ostream *v113;
  uint64_t v114;
  uint64_t (**v115)();
  int v116;
  char v117;
  void *v118[2];
  void *__p[2];
  __int128 v120;
  void **v121;
  uint64_t v122[2];
  uint64_t v123;
  std::string v124;
  int v125;
  char v126;
  void *v127;
  uint64_t v128;
  int v129;
  char v130;
  std::string v131;
  void *v132;
  __int128 v133;
  _QWORD v134[2];
  char v135;
  uint64_t v136;
  int v137;
  void **v138;
  _QWORD v139[2];
  void *v140;
  uint64_t v141;
  _BYTE v142[136];
  std::string v143;
  uint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  v122[0] = *(_QWORD *)(a1 + 264);
  v122[1] = a1;
  v139[0] = 0;
  v139[1] = 0;
  v140 = v142;
  v141 = 0x800000000;
  v142[128] = 0;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 344);
  v5 = **(unsigned __int16 **)(a2 + 16);
  v6 = sub_1C4C915C4(v5);
  if ((v6 & 0xFF00000000) != 0)
  {
    v7 = (_DWORD)v6 == 85 || (_DWORD)v6 == 18;
    if (!v7
      || ((*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v4 + 8))(v4, 39, 1, 1, 0, 1, 2), v5 = **(unsigned __int16 **)(a2 + 16), v6 = sub_1C4C915C4(v5), (v6 & 0xFF00000000) != 0))
    {
      if ((v6 - 51) <= 0x18 && ((1 << (v6 - 51)) & 0x1F80007) != 0)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v4 + 8))(v4, 41, 1, 1, 0, 1, 2);
        v5 = **(unsigned __int16 **)(a2 + 16);
      }
    }
  }
  v9 = *(_DWORD *)(a1 + 7952);
  if ((v5 - 542) >= 2)
  {
    if (v5 == 544)
      v10 = -*(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * sub_1C4C2FD5C(544) + 16);
    else
      v10 = 0;
  }
  else
  {
    v10 = -1;
  }
  *(_DWORD *)(a1 + 7952) = (v10 + v9) & ~((v10 + v9) >> 31);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 96))(*(_QWORD *)(a1 + 272)))
  {
    v132 = v134;
    v133 = xmmword_1C64638C0;
    v116 = 0;
    LOBYTE(__p[1]) = 0;
    *(_QWORD *)&v120 = 0;
    v115 = &off_1E81A7280;
    v121 = &v132;
    DWORD2(v120) = 0;
    v118[1] = 0;
    __p[0] = 0;
    v118[0] = 0;
    v11 = *(unsigned __int16 **)(a2 + 16);
    v12 = sub_1C4C915C4(*v11);
    if ((v12 & 0xFF00000000) != 0)
    {
      if ((_DWORD)v12 != 80 && (_DWORD)v12 != 167 && (_DWORD)v12 != 165)
        goto LABEL_65;
      if (*(_DWORD *)(a1 + 7952))
      {
        v13 = 0;
        do
        {
          if (v118[1] == __p[0])
            llvm::raw_ostream::write((llvm::raw_ostream *)&v115, "\t", 1uLL);
          else
            *(_BYTE *)__p[0]++ = 9;
          ++v13;
        }
        while (v13 != *(_DWORD *)(a1 + 7952));
        v15 = v118[1];
        v14 = __p[0];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
      if ((unint64_t)(v15 - (_BYTE *)v14) > 3)
      {
        *v14 = 539963145;
        __p[0] = (char *)__p[0] + 4;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v115, "\t// ", 4uLL);
      }
      v16 = **(unsigned __int16 **)(a2 + 16);
      if ((sub_1C4C915C4(v16) & 0xFF00000000) != 0)
      {
        v123 = a2;
        v17 = sub_1C4C2FD5C(v16);
        sub_1C49C0024((uint64_t)&v143, (uint64_t)&v123, v17);
        v18 = std::string::insert(&v143, 0, "IPRs: i0 = ");
        v19 = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v131.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v131.__r_.__value_.__r.__words[2] = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v143.__r_.__value_.__l.__data_);
        v20 = sub_1C4C2FD5C(**(unsigned __int16 **)(a2 + 16));
        sub_1C49C0024((uint64_t)&v124, (uint64_t)&v123, v20);
        v21 = std::string::insert(&v124, 0, ", i1 = ");
        v22 = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v143.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v143.__r_.__value_.__r.__words[2] = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v23 = &v143;
        else
          v23 = (std::string *)v143.__r_.__value_.__r.__words[0];
        if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = *((_BYTE *)&v143.__r_.__value_.__s + 23) & 0x7F;
        else
          size = v143.__r_.__value_.__l.__size_;
        std::string::append(&v131, (const std::string::value_type *)v23, size);
        if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v143.__r_.__value_.__l.__data_);
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v124.__r_.__value_.__l.__data_);
        v25 = sub_1C4C2FD5C(**(unsigned __int16 **)(a2 + 16));
        sub_1C49C0024((uint64_t)&v124, (uint64_t)&v123, v25);
        v26 = std::string::insert(&v124, 0, ", i2 = ");
        v27 = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v143.__r_.__value_.__l.__data_ = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v143.__r_.__value_.__r.__words[2] = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v28 = &v143;
        else
          v28 = (std::string *)v143.__r_.__value_.__r.__words[0];
        if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v29 = *((_BYTE *)&v143.__r_.__value_.__s + 23) & 0x7F;
        else
          v29 = v143.__r_.__value_.__l.__size_;
        std::string::append(&v131, (const std::string::value_type *)v28, v29);
        if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v143.__r_.__value_.__l.__data_);
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v124.__r_.__value_.__l.__data_);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = &v131;
        else
          v30 = (std::string *)v131.__r_.__value_.__r.__words[0];
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v31 = *((_BYTE *)&v131.__r_.__value_.__s + 23) & 0x7F;
        else
          v31 = v131.__r_.__value_.__l.__size_;
        llvm::raw_ostream::write((llvm::raw_ostream *)&v115, (const char *)v30, v31);
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v131.__r_.__value_.__l.__data_);
        v11 = *(unsigned __int16 **)(a2 + 16);
LABEL_65:
        v32 = *((_QWORD *)v11 + 1);
        if ((v32 & 0x2000) == 0)
        {
          v33 = *v11;
          if (((v33 - 9) > 0x3C || ((1 << (v33 - 9)) & 0x1000000000000605) == 0)
            && *v11
            && (v32 & 0x10) == 0
            && (v11[8] & 1) == 0)
          {
            if (v33 == 6167)
            {
              v34 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48);
              switch(v34)
              {
                case '(':
                  v35 = "rel_preempt";
                  goto LABEL_272;
                case ')':
                  v35 = "lock_preempt";
                  goto LABEL_272;
                case '*':
                case '+':
                case ',':
                case '-':
                case '.':
                case '/':
                  break;
                case '0':
                  v35 = "util_done";
                  goto LABEL_272;
                case '1':
                  v35 = "util_fail";
                  goto LABEL_272;
                case '2':
                  v35 = "util_unlock";
                  goto LABEL_272;
                default:
                  if (v34 != 32)
                    break;
                  v35 = "yield";
LABEL_272:
                  v99 = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 120))(*(_QWORD *)(a1 + 272));
                  v100 = v99;
                  v101 = *((_QWORD *)v99 + 4);
                  if ((unint64_t)(*((_QWORD *)v99 + 3) - v101) > 9)
                  {
                    *(_WORD *)(v101 + 8) = 30768;
                    *(_QWORD *)v101 = *(_QWORD *)"message 0x";
                    *((_QWORD *)v99 + 4) += 10;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v99, "message 0x", 0xAuLL);
                  }
                  llvm::write_hex(v100, v34, 1, 0, 0);
                  v102 = *((_QWORD *)v100 + 4);
                  if ((unint64_t)(*((_QWORD *)v100 + 3) - v102) > 2)
                  {
                    *(_BYTE *)(v102 + 2) = 32;
                    *(_WORD *)v102 = 15648;
                    v103 = (_BYTE *)(*((_QWORD *)v100 + 4) + 3);
                    *((_QWORD *)v100 + 4) = v103;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v100, " = ", 3uLL);
                    v103 = (_BYTE *)*((_QWORD *)v100 + 4);
                  }
                  v104 = strlen(v35);
                  v105 = v104;
                  if (v104 <= *((_QWORD *)v100 + 3) - (_QWORD)v103)
                  {
                    if (v104)
                    {
                      memcpy(v103, v35, v104);
                      v103 = (_BYTE *)(*((_QWORD *)v100 + 4) + v105);
                      *((_QWORD *)v100 + 4) = v103;
                    }
                  }
                  else
                  {
                    llvm::raw_ostream::write(v100, v35, v104);
                    v103 = (_BYTE *)*((_QWORD *)v100 + 4);
                  }
                  if (*((_BYTE **)v100 + 3) == v103)
                  {
                    llvm::raw_ostream::write(v100, "\n", 1uLL);
                  }
                  else
                  {
                    *v103 = 10;
                    ++*((_QWORD *)v100 + 4);
                  }
                  break;
              }
            }
LABEL_210:
            sub_1C49C18AC(&v124, a2, 0);
            v81 = *((_BYTE *)&v124.__r_.__value_.__s + 23) & 0x7F;
            if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v81 = v124.__r_.__value_.__l.__size_;
            if (v81)
            {
              if (*(_DWORD *)(a1 + 7952) != -1)
              {
                v82 = -1;
                do
                {
                  if (v118[1] == __p[0])
                    llvm::raw_ostream::write((llvm::raw_ostream *)&v115, "\t", 1uLL);
                  else
                    *(_BYTE *)__p[0]++ = 9;
                  ++v82;
                }
                while (v82 != *(_DWORD *)(a1 + 7952));
              }
              v83 = (char *)__p[0];
              if ((void *)((char *)v118[1] - (char *)__p[0]) > (void *)0x14)
              {
                *(_OWORD *)__p[0] = *(_OWORD *)"// Read Locations: { ";
                *(_QWORD *)(v83 + 13) = *(_QWORD *)"ions: { ";
                __p[0] = (char *)__p[0] + 21;
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v115, "// Read Locations: { ", 0x15uLL);
              }
              if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v84 = &v124;
              else
                v84 = (std::string *)v124.__r_.__value_.__r.__words[0];
              if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v85 = *((_BYTE *)&v124.__r_.__value_.__s + 23) & 0x7F;
              else
                v85 = v124.__r_.__value_.__l.__size_;
              llvm::raw_ostream::write((llvm::raw_ostream *)&v115, (const char *)v84, v85);
              v86 = __p[0];
              if ((void *)((char *)v118[1] - (char *)__p[0]) > (void *)2)
              {
                *((_BYTE *)__p[0] + 2) = 10;
                *v86 = 32032;
                __p[0] = (char *)__p[0] + 3;
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v115, " }\n", 3uLL);
              }
            }
            if ((_QWORD)v133)
            {
              v95 = *(llvm::MCStreamer **)(a1 + 272);
              v97 = (std::string::size_type)*v121;
              v96 = (std::string::size_type)v121[1];
              LOWORD(v145) = 261;
              v143.__r_.__value_.__r.__words[0] = v97;
              v143.__r_.__value_.__l.__size_ = v96;
              llvm::MCStreamer::emitRawText(v95, (const char **)&v143.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v124.__r_.__value_.__l.__data_);
            v115 = (uint64_t (**)())off_1E81A6E70;
            if (DWORD2(v120) == 1 && v118[0])
              MEMORY[0x1CAA32F9C](v118[0], 0x1000C8077774924);
            if (v132 != v134)
              free(v132);
            goto LABEL_237;
          }
          v114 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 344);
          v143.__r_.__value_.__r.__words[0] = (std::string::size_type)&v143.__r_.__value_.__r.__words[2];
          v143.__r_.__value_.__l.__size_ = 0x400000000;
          v146 = 0;
          v147 = 0;
          v145 = &v146;
          NumExplicitOperands = llvm::MachineInstr::getNumExplicitOperands(a2);
          v41 = 0;
          if (NumExplicitOperands < 2)
          {
LABEL_173:
            sub_1C47655E8((uint64_t)&v145, v41);
            if ((std::string::size_type *)v143.__r_.__value_.__l.__data_ != &v143.__r_.__value_.__r.__words[2])
              free(v143.__r_.__value_.__l.__data_);
            goto LABEL_210;
          }
          v42 = 1;
          while (1)
          {
            v43 = (int *)(*(_QWORD *)(a2 + 32) + 32 * v42);
            if (*v43 != 7)
              goto LABEL_160;
            v44 = 0;
            v45 = v43[1] | ((unint64_t)v43[6] << 32);
            v46 = v45 >= 0 ? v43[1] | ((unint64_t)v43[6] << 32) : v45 + 1;
            v47 = (*v43 >> 8) & 0xFFF;
            v48 = 1;
            if (v47 <= 2)
              break;
            if (v47 == 3)
            {
              v44 = 0;
              v48 = 0;
              v49 = 64;
            }
            else
            {
              if (v47 == 15)
                goto LABEL_98;
              v49 = 0;
              if (v47 == 14)
                goto LABEL_99;
            }
LABEL_101:
            LODWORD(v123) = 0;
            v50 = v43[1];
            v51 = *v43;
            if ((_BYTE)v51)
              v52 = (v51 << 8) & 0xFFF0000;
            else
              v52 = 0;
            v53 = v52 | v50;
            LODWORD(v123) = v53;
            if (v147)
            {
              for (i = v146; i; i = (_QWORD *)*i)
              {
                v55 = *((_DWORD *)i + 7);
                if (v53 >= v55)
                {
                  if (v55 >= v53)
                    goto LABEL_160;
                  ++i;
                }
              }
            }
            else if (LODWORD(v143.__r_.__value_.__r.__words[1]))
            {
              v56 = (_DWORD *)v143.__r_.__value_.__r.__words[0];
              v57 = 4 * LODWORD(v143.__r_.__value_.__r.__words[1]);
              while (*v56 != v53)
              {
                ++v56;
                v57 -= 4;
                if (!v57)
                  goto LABEL_117;
              }
              if (v57)
                goto LABEL_160;
            }
LABEL_117:
            v58 = v46 >> 1;
            v59 = (*(uint64_t (**)(uint64_t, int64_t))(*(_QWORD *)v114 + 384))(v114, v46 >> 1);
            if ((v59 & 0xFF00000000) != 0)
            {
              v60 = v45 - (v46 & 0xFFFFFFFE);
              v61 = WORD1(v59);
              if (!v60)
                v61 = v59;
              if (v44)
                v62 = (unsigned __int16)v61;
              else
                v62 = v61;
              if (v44)
                v63 = &unk_1C866F15C;
              else
                v63 = &unk_1C866F184;
              LODWORD(v131.__r_.__value_.__r.__words[1]) = v49;
              v64 = 0xFFFFFFFFFFFFFFFFLL >> (-(char)v49 & 0x30);
              if (v48)
                v64 = 0;
              v131.__r_.__value_.__r.__words[0] = v64 & v62;
              llvm::detail::IEEEFloat::initFromAPInt((llvm::detail::IEEEFloat *)&v124.__r_.__value_.__r.__words[1], v63, (const llvm::APInt **)&v131);
              if (v44)
                llvm::APFloat::convert((uint64_t)&v124, &unk_1C866F184, 0, &v131);
              if (LODWORD(v143.__r_.__value_.__r.__words[1]) || v147)
              {
                if ((void *)((char *)v118[1] - (char *)__p[0]) <= (void *)1)
                {
                  v66 = ", ";
                  v67 = 2;
                  goto LABEL_143;
                }
                *(_WORD *)__p[0] = 8236;
                v71 = (char *)__p[0] + 2;
              }
              else
              {
                if (*(_DWORD *)(a1 + 7952))
                {
                  v65 = 0;
                  do
                  {
                    if (v118[1] == __p[0])
                      llvm::raw_ostream::write((llvm::raw_ostream *)&v115, "\t", 1uLL);
                    else
                      *(_BYTE *)__p[0]++ = 9;
                    ++v65;
                  }
                  while (v65 != *(_DWORD *)(a1 + 7952));
                }
                if ((void *)((char *)v118[1] - (char *)__p[0]) <= (void *)3)
                {
                  v66 = "\t// ";
                  v67 = 4;
LABEL_143:
                  llvm::raw_ostream::write((llvm::raw_ostream *)&v115, v66, v67);
LABEL_144:
                  if (v118[1] == __p[0])
                    llvm::raw_ostream::write((llvm::raw_ostream *)&v115, "u", 1uLL);
                  else
                    *(_BYTE *)__p[0]++ = 117;
                  sub_1C5E21910((llvm::raw_ostream *)&v115, v58, 0, 0, 0);
                  v68 = __p[0];
                  if (v44)
                  {
                    if (v60)
                      v69 = "h";
                    else
                      v69 = "l";
                    if (v118[1] == __p[0])
                    {
                      llvm::raw_ostream::write((llvm::raw_ostream *)&v115, v69, 1uLL);
                      v68 = __p[0];
                    }
                    else
                    {
                      *(_BYTE *)__p[0] = *v69;
                      v68 = ++__p[0];
                    }
                  }
                  if ((void *)((char *)v118[1] - (char *)v68) > (void *)2)
                  {
                    v68[2] = 32;
                    *(_WORD *)v68 = 15648;
                    __p[0] = (char *)__p[0] + 3;
                  }
                  else
                  {
                    llvm::raw_ostream::write((llvm::raw_ostream *)&v115, " = ", 3uLL);
                  }
                  v70 = llvm::APFloat::convertToFloat((llvm::APFloat *)&v124);
                  llvm::write_double((llvm::raw_ostream *)&v115, 0, 0, 0, v70);
                  if ((void *)((char *)v118[1] - (char *)__p[0]) > (void *)1)
                  {
                    *(_WORD *)__p[0] = 10272;
                    __p[0] = (char *)__p[0] + 2;
                  }
                  else
                  {
                    llvm::raw_ostream::write((llvm::raw_ostream *)&v115, " (", 2uLL);
                  }
                  sub_1C5E21910((llvm::raw_ostream *)&v115, v62, 0, 0, 0);
                  if (v118[1] == __p[0])
                    llvm::raw_ostream::write((llvm::raw_ostream *)&v115, ")", 1uLL);
                  else
                    *(_BYTE *)__p[0]++ = 41;
                  sub_1C4854E58((uint64_t)&v143, (unsigned int *)&v123);
                  if ((_UNKNOWN *)v124.__r_.__value_.__l.__size_ == &unk_1C866F1C0)
                  {
                    sub_1C4773C74((uint64_t *)&v124.__r_.__value_.__r.__words[2]);
                  }
                  else if ((*(_DWORD *)(v124.__r_.__value_.__l.__size_ + 8) - 64) <= 0xFFFFFF7F
                         && v124.__r_.__value_.__r.__words[2])
                  {
                    MEMORY[0x1CAA32F9C](v124.__r_.__value_.__r.__words[2], 0x1000C8000313F17);
                  }
                  goto LABEL_160;
                }
                *(_DWORD *)__p[0] = 539963145;
                v71 = (char *)__p[0] + 4;
              }
              __p[0] = v71;
              goto LABEL_144;
            }
LABEL_160:
            if (++v42 >= (unint64_t)llvm::MachineInstr::getNumExplicitOperands(a2))
            {
              v41 = v146;
              goto LABEL_173;
            }
          }
          if (v47 != 1)
          {
            v49 = 0;
            if (v47 != 2)
              goto LABEL_101;
LABEL_98:
            v44 = 0;
            v48 = 0;
            v49 = 32;
            goto LABEL_101;
          }
LABEL_99:
          v48 = 0;
          v49 = 16;
          v44 = 1;
          goto LABEL_101;
        }
        v36 = 0;
        LOBYTE(v123) = 0;
        do
        {
          v37 = (char *)&v131 + v36;
          *((_DWORD *)v37 + 2) = 1;
          *(_QWORD *)v37 = 0;
          v36 += 16;
        }
        while (v36 != 32);
        v126 = v126 & 0xF0 | 2;
        v125 = 23;
        v124.__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1C866F184;
        v124.__r_.__value_.__r.__words[2] = 0;
        llvm::detail::IEEEFloat::normalize((llvm::APInt *)&v124.__r_.__value_.__r.__words[1], 1, 0);
        v130 = v130 & 0xF0 | 2;
        v129 = 23;
        v127 = &unk_1C866F184;
        v128 = 0;
        llvm::detail::IEEEFloat::normalize((llvm::APInt *)&v127, 1, 0);
        v38 = **(unsigned __int16 **)(a2 + 16);
        if (v38 == 5623)
        {
          v72 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 32) + 80);
          if (LODWORD(v131.__r_.__value_.__r.__words[1]) >= 0x41 && v131.__r_.__value_.__r.__words[0])
            MEMORY[0x1CAA32F9C](v131.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
          v131.__r_.__value_.__r.__words[0] = v72;
          LODWORD(v131.__r_.__value_.__r.__words[1]) = 16;
          llvm::detail::IEEEFloat::initFromHalfAPInt((llvm::detail::IEEEFloat *)&v143.__r_.__value_.__r.__words[1], (const llvm::APInt **)&v131);
          sub_1C48552C0((uint64_t)&v124.__r_.__value_.__l.__size_, (uint64_t)&v143.__r_.__value_.__l.__size_);
          if ((_UNKNOWN *)v143.__r_.__value_.__l.__size_ == &unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v143.__r_.__value_.__r.__words[2]);
          }
          else if ((*(_DWORD *)(v143.__r_.__value_.__l.__size_ + 8) - 64) <= 0xFFFFFF7F
                 && v143.__r_.__value_.__r.__words[2])
          {
            MEMORY[0x1CAA32F9C](v143.__r_.__value_.__r.__words[2], 0x1000C8000313F17);
          }
          llvm::APFloat::convert((uint64_t)&v124, &unk_1C866F184, 0, &v123);
        }
        else
        {
          if (v38 != 5622)
          {
LABEL_198:
            for (j = 0; j != -64; j -= 32)
            {
              v77 = *(uint64_t *)((char *)&v127 + j);
              if ((_UNKNOWN *)v77 == &unk_1C866F1C0)
              {
                sub_1C4773C74((uint64_t *)((char *)&v128 + j));
              }
              else if ((*(_DWORD *)(v77 + 8) - 64) <= 0xFFFFFF7F)
              {
                v78 = *(uint64_t *)((char *)&v128 + j);
                if (v78)
                  MEMORY[0x1CAA32F9C](v78, 0x1000C8000313F17);
              }
            }
            for (k = 0; k != -4; k -= 2)
            {
              if (*(_DWORD *)((char *)&v131 + k * 8 + 24) >= 0x41u)
              {
                v80 = v131.__r_.__value_.__r.__words[k + 2];
                if (v80)
                  MEMORY[0x1CAA32F9C](v80, 0x1000C8000313F17);
              }
            }
            goto LABEL_210;
          }
          v39 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 80);
          if (LODWORD(v131.__r_.__value_.__r.__words[1]) >= 0x41 && v131.__r_.__value_.__r.__words[0])
            MEMORY[0x1CAA32F9C](v131.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
          v131.__r_.__value_.__r.__words[0] = v39;
          LODWORD(v131.__r_.__value_.__r.__words[1]) = 32;
          llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v143.__r_.__value_.__r.__words[1], (const llvm::APInt **)&v131);
          sub_1C48552C0((uint64_t)&v124.__r_.__value_.__l.__size_, (uint64_t)&v143.__r_.__value_.__l.__size_);
          if ((_UNKNOWN *)v143.__r_.__value_.__l.__size_ == &unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v143.__r_.__value_.__r.__words[2]);
          }
          else if ((*(_DWORD *)(v143.__r_.__value_.__l.__size_ + 8) - 64) <= 0xFFFFFF7F
                 && v143.__r_.__value_.__r.__words[2])
          {
            MEMORY[0x1CAA32F9C](v143.__r_.__value_.__r.__words[2], 0x1000C8000313F17);
          }
        }
        if (*(_DWORD *)(a1 + 7952))
        {
          v73 = 0;
          do
          {
            if (v118[1] == __p[0])
              llvm::raw_ostream::write((llvm::raw_ostream *)&v115, "\t", 1uLL);
            else
              *(_BYTE *)__p[0]++ = 9;
            ++v73;
          }
          while (v73 != *(_DWORD *)(a1 + 7952));
        }
        if ((void *)((char *)v118[1] - (char *)__p[0]) > (void *)3)
        {
          *(_DWORD *)__p[0] = 539963145;
          __p[0] = (char *)__p[0] + 4;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v115, "\t// ", 4uLL);
        }
        v74 = llvm::APFloat::convertToFloat((llvm::APFloat *)&v124);
        llvm::write_double((llvm::raw_ostream *)&v115, 0, 0, 0, v74);
        if ((void *)((char *)v118[1] - (char *)__p[0]) > (void *)1)
        {
          *(_WORD *)__p[0] = 10272;
          __p[0] = (char *)__p[0] + 2;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v115, " (", 2uLL);
        }
        v143.__r_.__value_.__r.__words[0] = (std::string::size_type)&v144;
        *(_OWORD *)&v143.__r_.__value_.__r.__words[1] = xmmword_1C64638D0;
        llvm::APInt::toString((uint64_t)&v131, &v143, 0xAu, 1, 0);
        llvm::raw_ostream::write((llvm::raw_ostream *)&v115, v143.__r_.__value_.__l.__data_, v143.__r_.__value_.__l.__size_);
        if ((uint64_t *)v143.__r_.__value_.__l.__data_ != &v144)
          free(v143.__r_.__value_.__l.__data_);
        if (v118[1] == __p[0])
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v115, ")", 1uLL);
          v75 = __p[0];
        }
        else
        {
          *(_BYTE *)__p[0] = 41;
          v75 = ++__p[0];
        }
        if (v118[1] == v75)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v115, "\n", 1uLL);
        }
        else
        {
          *v75 = 10;
          ++__p[0];
        }
        goto LABEL_198;
      }
    }
    llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
  }
LABEL_237:
  v87 = *(unsigned __int16 **)(a2 + 16);
  if (!byte_1ED7ECAB0 || (v87[10] & 4) != 0)
  {
    v88 = *v87;
    if (!sub_1C4C2FD5C(v88) && sub_1C4C32DEC(v88) == 21)
      *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48) |= 0x800uLL;
    sub_1C4AA5A70(v122, a2, (uint64_t)v139);
    (*(void (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 272) + 1184))(*(_QWORD *)(a1 + 272), v139, *(_QWORD *)(*(_QWORD *)(a1 + 280) + 16));
  }
  v89 = atomic_load((unsigned __int8 *)&qword_1ED7EC908);
  if ((v89 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EC908))
  {
    dword_1ED7EC8F8 = 20;
    __cxa_guard_release(&qword_1ED7EC908);
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 104))(*(_QWORD *)(a1 + 272)))
  {
    v90 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 16);
    v91 = *(_BYTE *)(v90 + 308);
    if ((v91 || *(_BYTE *)(v90 + 309)) && (*(_BYTE *)(*(_QWORD *)(a2 + 16) + 20) & 4) == 0)
    {
      v116 = 22;
      v117 = v91 ^ 1;
      v115 = (uint64_t (**)())&off_1E7FA8680;
      *(_OWORD *)v118 = 0u;
      *(_OWORD *)__p = 0u;
      v120 = 0u;
      LODWORD(v133) = 0;
      v135 = 0;
      v136 = 0;
      v132 = &unk_1E81A7208;
      v138 = &__p[1];
      v137 = 0;
      v134[0] = 0;
      v134[1] = 0;
      *((_QWORD *)&v133 + 1) = 0;
      llvm::MachineInstr::print((llvm::MachineInstr *)a2, (llvm::raw_ostream *)&v132, 1, 0, 0, 0, 0);
      v98 = (llvm *)MEMORY[0x1CAA32ABC](v118, "is not implemented yet for G15");
      v132 = off_1E81A6E70;
      if (v137 == 1)
      {
        v98 = (llvm *)*((_QWORD *)&v133 + 1);
        if (*((_QWORD *)&v133 + 1))
          v98 = (llvm *)MEMORY[0x1CAA32F9C](*((_QWORD *)&v133 + 1), 0x1000C8077774924);
      }
      if (*(_BYTE *)(v90 + 308) && dword_1ED7EC8F8)
      {
        v106 = (llvm::raw_ostream *)llvm::errs(v98);
        v107 = sub_1C4816AD8(v106, "AGX_FAIL_BAD_COMPILE_WITH_CODE=");
        v108 = sub_1C614D714(v107, dword_1ED7EC8F8);
        v109 = sub_1C4816AD8(v108, ": ");
        v110 = llvm::errs(v109);
        v132 = &unk_1E814E990;
        *(_QWORD *)&v133 = v110;
        v111 = (llvm *)sub_1C614D71C((uint64_t)&v115, (uint64_t)&v132);
        v112 = (llvm::raw_ostream *)llvm::errs(v111);
        v113 = sub_1C4816AD8(v112, "\n");
        llvm::sys::RunInterruptHandlers(v113);
        exit(dword_1ED7EC8F8);
      }
      llvm::LLVMContext::diagnose(****(_QWORD ****)(a1 + 280), (const llvm::DiagnosticInfo *)&v115);
      v115 = (uint64_t (**)())&off_1E7FA8680;
      if (SHIBYTE(v120) < 0)
        operator delete(__p[1]);
      if (SHIBYTE(__p[0]) < 0)
        operator delete(v118[0]);
    }
  }
  v92 = *(_DWORD *)(a1 + 7952);
  v93 = **(unsigned __int16 **)(a2 + 16);
  if ((v93 - 542) < 2)
  {
    v94 = 1;
  }
  else if ((v93 - 548) > 1)
  {
    v94 = 0;
  }
  else
  {
    v94 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * sub_1C4C2FD5C(v93) + 16);
  }
  *(_DWORD *)(a1 + 7952) = (v94 + v92) & ~((v94 + v92) >> 31);
  if (v140 != v142)
    free(v140);
}

void sub_1C49C18AC(_QWORD *a1, uint64_t a2, char a3)
{
  unsigned __int8 v5;
  unsigned __int16 *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned __int32 v17;
  unsigned __int16 *v18;
  uint64_t v19;
  BOOL v20;
  unsigned __int32 v21;
  unsigned int v22;
  unsigned int v23;
  __int32 *v24;
  __int32 *v25;
  __int32 *v26;
  char *v27;
  __int32 *v28;
  __int32 *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  void *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  int v44;
  unsigned __int32 v45;
  _QWORD *v46;
  void *v47[2];
  uint64_t v48;
  void *__dst[2];
  uint64_t v50;
  void *v51[2];
  uint64_t v52;
  void *v53[2];
  uint64_t v54;
  void *v55[2];
  char v56;
  void *v57;
  char v58;
  void *v59[2];
  char v60;
  void *v61;
  char v62;
  void *__p[2];
  char v64;
  void *v65;
  char v66;
  void *v67[2];
  char v68;
  const void *v69[2];
  char v70;
  void *v71[2];
  char v72;
  const void *v73[2];
  char v74;
  char v75;
  char v76;
  uint64_t v77;
  _QWORD *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  _BYTE v82[48];
  _DWORD *v83;
  uint64_t v84;
  _QWORD v85[9];

  v85[6] = *MEMORY[0x1E0C80C00];
  v76 = a3;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v5 = atomic_load((unsigned __int8 *)&qword_1ED7EC960);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EC960))
  {
    byte_1ED7EC8F3 = 0;
    __cxa_guard_release(&qword_1ED7EC960);
  }
  v6 = *(unsigned __int16 **)(a2 + 16);
  v7 = *v6;
  if (v7 >= 0x100)
  {
    v8 = *((_QWORD *)v6 + 1) & 8;
    if (byte_1ED7EC8F3 && v8 == 0)
    {
      v10 = 0;
      v11 = 0;
      v83 = v85;
      v84 = 0xC00000000;
      do
      {
        v12 = sub_1C4C2FD5C(v7);
        if (v11 >= HIDWORD(v84))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, (uint64_t)v85, v11 + 1, 4);
          v11 = v84;
        }
        v83[v11] = v12;
        v11 = v84 + 1;
        LODWORD(v84) = v84 + 1;
        v10 += 4;
      }
      while (v10 != 28);
      v13 = 0;
      v14 = 0;
      v77 = 0x1C0000001ELL;
      LODWORD(v78) = 71;
      v80 = v82;
      v81 = 0xC00000000;
      do
      {
        v15 = sub_1C4C2FD5C(v7);
        if (v14 >= HIDWORD(v81))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, (uint64_t)v82, v14 + 1, 4);
          v14 = v81;
        }
        *(_DWORD *)&v80[4 * v14] = v15;
        v14 = v81 + 1;
        LODWORD(v81) = v81 + 1;
        v13 += 4;
      }
      while (v13 != 12);
      v75 = 1;
      v77 = (uint64_t)&v75;
      v78 = a1;
      v79 = &v76;
      v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 16);
      v46 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 176))(v16);
      if (!llvm::MachineInstr::getNumExplicitOperands(a2))
      {
LABEL_104:
        if (v80 != v82)
          free(v80);
        if (v83 != (_DWORD *)v85)
          free(v83);
        return;
      }
      v17 = 0;
      while (1)
      {
        v18 = *(unsigned __int16 **)(a2 + 16);
        if ((word_1C6AA47DC[dword_1C6A9B6CC[*v18] + (unsigned __int16)v17] & 0xFFFB) == 0x3A)
          break;
        v19 = *(_QWORD *)(a2 + 32);
        if ((*(_DWORD *)(v19 + 32 * v17) & 0x10000FF) == 0x1000000)
        {
          v22 = *((unsigned __int8 *)v18 + 4);
          if ((v18[4] & 2) == 0 || (v34 = *(_DWORD *)(a2 + 40), v34 == v22))
          {
            v23 = v22;
          }
          else
          {
            v35 = v34 - 1;
            v23 = v22;
            do
            {
              v36 = *(_DWORD *)(v19 + 32 * v22);
              if ((v36 & 0x10000FF) != 0x1000000)
                break;
              v23 += (v36 & 0x2000000) == 0;
              if (v35 == v22)
                break;
              ++v22;
            }
            while ((v36 & 0x2000000) == 0);
          }
          v21 = v23 + v17;
LABEL_29:
          if (v21 != -1)
            goto LABEL_31;
          goto LABEL_30;
        }
        if (*(_DWORD *)(v19 + 32 * v17))
          v20 = *(_DWORD *)(v19 + 32 * v17) == 7;
        else
          v20 = 1;
        if (v20)
        {
          v21 = v17 + 1;
          goto LABEL_29;
        }
LABEL_30:
        v21 = v17;
LABEL_31:
        v24 = &v83[v84];
        v25 = wmemchr(v83, v17, v84);
        if (v25)
          v26 = v25;
        else
          v26 = v24;
        if (v26 != &v83[v84])
          goto LABEL_35;
        v27 = &v80[4 * v81];
        v28 = wmemchr((__int32 *)v80, v17, v81);
        if (v28)
          v29 = v28;
        else
          v29 = (__int32 *)v27;
        if (v29 != (__int32 *)&v80[4 * v81])
        {
          v30 = sub_1C4C915C4(v7);
          if ((v30 & 0xFF00000000) == 0)
            goto LABEL_111;
          if ((_DWORD)v30 != 94)
          {
            v74 = 5;
            strcpy((char *)v73, "coeff");
            v72 = 7;
            strcpy((char *)v71, "not_gpr");
            sub_1C49C77A0((uint64_t)&v77, v73, (uint64_t)v71);
            if (v72 < 0)
              operator delete(v71[0]);
            if ((v74 & 0x80000000) == 0)
              goto LABEL_35;
            v33 = (void *)v73[0];
            goto LABEL_95;
          }
        }
        v31 = *(_QWORD *)(a2 + 32);
        v32 = sub_1C4AD4FB8(a2, v17, v46 + 1);
        if (v32 <= 7)
        {
          if (((1 << v32) & 0xAC) != 0)
            goto LABEL_35;
          if (v32 == 4)
          {
            v70 = 2;
            strcpy((char *)v69, "ir");
            v68 = 7;
            strcpy((char *)v67, "not_gpr");
            sub_1C49C77A0((uint64_t)&v77, v69, (uint64_t)v67);
            if (v68 < 0)
              operator delete(v67[0]);
            if ((v70 & 0x80000000) == 0)
              goto LABEL_35;
            v33 = (void *)v69[0];
            goto LABEL_95;
          }
          if (v32 == 6)
          {
            v66 = 3;
            LODWORD(v65) = 7042163;
            v64 = 7;
            strcpy((char *)__p, "not_gpr");
            sub_1C49C77A0((uint64_t)&v77, (const void **)&v65, (uint64_t)__p);
            if (v64 < 0)
              operator delete(__p[0]);
            if ((v66 & 0x80000000) == 0)
              goto LABEL_35;
            v33 = v65;
            goto LABEL_95;
          }
        }
        v37 = *(unsigned __int8 *)(v31 + 32 * v17);
        if (v37 == 1)
        {
          v58 = 3;
          LODWORD(v57) = 7171433;
          v56 = 7;
          strcpy((char *)v55, "not_gpr");
          sub_1C49C77A0((uint64_t)&v77, (const void **)&v57, (uint64_t)v55);
          if (v56 < 0)
            operator delete(v55[0]);
          if ((v58 & 0x80000000) == 0)
            goto LABEL_35;
          v33 = v57;
          goto LABEL_95;
        }
        if (v37 != 7 || *(_DWORD *)(v31 + 32 * v17 + 16) != 64)
        {
          if (v32 != 1)
            goto LABEL_35;
          v39 = (char *)(*(uint64_t (**)(_QWORD *, _QWORD))(*v46 + 512))(v46, *(unsigned int *)(*(_QWORD *)(a2 + 32) + 32 * v17 + 4));
          sub_1C5E3DEA4(v53, v39, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &v39[v40], (uint64_t)sub_1C5E3C6A8, v40);
          v51[0] = 0;
          v51[1] = 0;
          v52 = 0;
          v41 = (*(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v21 + 16) >> 14) & 7;
          if (v41 <= 5)
            MEMORY[0x1CAA32ABC](v51, off_1E7FA8D30[v41]);
          if (SHIBYTE(v54) < 0)
          {
            sub_1C47EBC30(__dst, v53[0], (unint64_t)v53[1]);
          }
          else
          {
            *(_OWORD *)__dst = *(_OWORD *)v53;
            v50 = v54;
          }
          if (SHIBYTE(v52) < 0)
          {
            sub_1C47EBC30(v47, v51[0], (unint64_t)v51[1]);
          }
          else
          {
            *(_OWORD *)v47 = *(_OWORD *)v51;
            v48 = v52;
          }
          sub_1C49C77A0((uint64_t)&v77, (const void **)__dst, (uint64_t)v47);
          if (SHIBYTE(v48) < 0)
            operator delete(v47[0]);
          if (SHIBYTE(v50) < 0)
            operator delete(__dst[0]);
          if (SHIBYTE(v52) < 0)
            operator delete(v51[0]);
          if ((SHIBYTE(v54) & 0x80000000) == 0)
            goto LABEL_35;
          v33 = v53[0];
          goto LABEL_95;
        }
        v38 = *(_QWORD *)(a2 + 32);
        if (*(_BYTE *)(v38 + 32 * v17) != 7 || *(_DWORD *)(v38 + 32 * v17 + 16) != 64)
          goto LABEL_67;
        v42 = **(unsigned __int16 **)(a2 + 16);
        v45 = sub_1C4C2FD5C(v42);
        v44 = sub_1C4C2FD5C(v42);
        v43 = sub_1C4C915C4(v42);
        if ((v43 & 0xFF00000000) == 0)
LABEL_111:
          llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
        if (((v43 - 190) < 4 || (v43 - 105) <= 1) && v17 == v44 || v17 >= v45)
        {
LABEL_67:
          v62 = 3;
          LODWORD(v61) = 6909557;
          v60 = 7;
          strcpy((char *)v59, "not_gpr");
          sub_1C49C77A0((uint64_t)&v77, (const void **)&v61, (uint64_t)v59);
          if (v60 < 0)
            operator delete(v59[0]);
          if (v62 < 0)
          {
            v33 = v61;
LABEL_95:
            operator delete(v33);
          }
        }
LABEL_35:
        v17 = v21 + 1;
        if (v21 + 1 >= llvm::MachineInstr::getNumExplicitOperands(a2))
          goto LABEL_104;
      }
      v21 = v17 + 2;
      goto LABEL_29;
    }
  }
}

uint64_t sub_1C49C20EC(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  _QWORD **v5;
  uint64_t v6;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  int *v11;
  int v12;
  unsigned __int8 v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t (**v23)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t (****v24)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t (****v26)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t (***v27)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t (***v28)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t);
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t AnalysisPass;
  const llvm::MachineLoopInfo *v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  uint64_t v43;
  uint64_t *v44;
  unsigned int v45;
  unsigned __int8 *v46;
  llvm::MachineInstr *v47;
  uint64_t v48;
  uint64_t NamedMetadata;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  void **v63;
  char v64;
  int v65;
  int v66;
  char v67;
  void **v68;
  const char **v69;
  uint64_t ***v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t ****v75;
  uint64_t ***v76;
  int v77;
  int v78;
  uint64_t ***v79;
  std::string::size_type v80;
  char *v81;
  std::string::size_type v82;
  char v83;
  char v84;
  _QWORD *v85;
  BOOL v86;
  std::string *v87;
  std::string *v88;
  void **v89;
  std::string::size_type v90;
  std::string *v91;
  llvm::raw_ostream *v92;
  std::string *v93;
  size_t size;
  _BYTE *v95;
  llvm::raw_ostream *v96;
  _WORD *v97;
  _QWORD *v98;
  unint64_t v99;
  char v100;
  uint64_t i;
  uint64_t v102;
  void *v103;
  void *v104;
  std::string *v105;
  size_t v106;
  uint64_t v107;
  uint64_t v108;
  std::string::size_type v109;
  unsigned int v110;
  std::string *v111;
  void (**v112)(std::string *);
  unsigned int v113;
  int v114;
  _QWORD *v116;
  unsigned __int8 *v117;
  void *__p[2];
  char v119;
  const char *v120;
  uint64_t v121;
  __int16 v122;
  void **v123;
  void **v124;
  void **v125;
  __int16 v126;
  void **v127;
  void **v128;
  const char *v129;
  uint64_t v130;
  char v131;
  char v132;
  _QWORD v133[2];
  char *v134;
  std::string::size_type v135;
  __int16 v136;
  void *v137[2];
  char v138;
  std::error_code v139;
  std::string v140;
  std::string *v141;
  _QWORD v142[3];
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  uint64_t v166;

  v166 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)a2 + 352) = 6;
  v3 = *a2;
  v4 = *(_WORD *)(*a2 + 18) & 0x3FF0;
  *(_BYTE *)(*(_QWORD *)(a1 + 264) + 148) = v4 == 1600;
  v5 = (_QWORD **)a2[43];
  v6 = ((uint64_t (*)(_QWORD **))(*v5)[70])(v5);
  v114 = v4;
  if (v4 == 1600 || v3 == v6)
  {
    v8 = v6;
    v9 = atomic_load((unsigned __int8 *)&qword_1ED7EC920);
    if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EC920))
    {
      dword_1ED7EC8FC = 0;
      __cxa_guard_release(&qword_1ED7EC920);
    }
    v10 = atomic_load((unsigned __int8 *)&qword_1ED7EC928);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EC928))
    {
      dword_1ED7EC900 = 0;
      __cxa_guard_release(&qword_1ED7EC928);
    }
    v11 = &dword_1ED7EC900;
    if (v3 == v8)
      v11 = &dword_1ED7EC8FC;
    v12 = *v11;
    if (*v11)
    {
      v13 = atomic_load((unsigned __int8 *)&qword_1ED7EC930);
      if ((v13 & 1) != 0 || !__cxa_guard_acquire(&qword_1ED7EC930))
      {
LABEL_12:
        v14 = v12 + dword_1ED7EC904 - 1;
        v15 = a2[40];
        v16 = *(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFFFF8;
        if (!v16 || (*(_BYTE *)v16 & 4) == 0)
        {
          while ((*(_WORD *)(v16 + 44) & 4) != 0)
            v16 = *(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8;
        }
        if (dword_1ED7EC904 <= v14)
        {
          v43 = **(_QWORD **)(a2[1] + 576) + 29904;
          v44 = (uint64_t *)(v15 + 40);
          if (v14 / dword_1ED7EC904 <= 1)
            v45 = 1;
          else
            v45 = v14 / dword_1ED7EC904;
          do
          {
            v46 = *(unsigned __int8 **)(v16 + 56);
            v117 = v46;
            if (v46)
              llvm::MetadataTracking::track((uint64_t)&v117, v46, 2);
            v47 = (llvm::MachineInstr *)a2[28];
            if (v47)
              a2[28] = *(_QWORD *)v47;
            else
              v47 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)(a2 + 16), 72, 3);
            *(_QWORD *)&v143 = v117;
            if (v117)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v117, v117, (uint64_t)&v143);
              v117 = 0;
            }
            llvm::MachineInstr::MachineInstr(v47, (llvm::MachineFunction *)a2, v43, (unsigned __int8 **)&v143, 0);
            if ((_QWORD)v143)
              llvm::MetadataTracking::untrack((uint64_t)&v143, (unsigned __int8 *)v143);
            if (v117)
              llvm::MetadataTracking::untrack((uint64_t)&v117, v117);
            sub_1C49879A4(v44, v16, (uint64_t)v47);
            LODWORD(v143) = 1;
            *((_QWORD *)&v143 + 1) = 0;
            *(_QWORD *)&v144 = 0;
            llvm::MachineInstr::addOperand(v47, (llvm::MachineFunction *)a2, (const llvm::MachineOperand *)&v143);
            --v45;
          }
          while (v45);
        }
        goto LABEL_18;
      }
      v109 = a2[2];
      v165 = 0;
      v163 = 0u;
      v164 = 0u;
      v161 = 0u;
      v162 = 0u;
      v159 = 0u;
      v160 = 0u;
      v157 = 0u;
      v158 = 0u;
      v155 = 0u;
      v156 = 0u;
      v153 = 0u;
      v154 = 0u;
      v151 = 0u;
      v152 = 0u;
      v149 = 0u;
      v150 = 0u;
      v147 = 0u;
      v148 = 0u;
      v145 = 0u;
      v146 = 0u;
      v143 = 0u;
      v144 = 0u;
      if (*(_BYTE *)(v109 + 303) || *(_BYTE *)(v109 + 305))
        *(_QWORD *)&v143 = 0x2700000003;
      LODWORD(v127) = 0;
      LODWORD(v123) = 0;
      v140.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E81316D0;
      v140.__r_.__value_.__l.__size_ = v109;
      v141 = &v140;
      v110 = sub_1C4C0B384(&v140);
      v111 = v141;
      if (v141 == &v140)
      {
        v112 = (void (**)(std::string *))(v140.__r_.__value_.__r.__words[0] + 32);
        v111 = &v140;
      }
      else
      {
        if (!v141)
          goto LABEL_195;
        v112 = (void (**)(std::string *))(v141->__r_.__value_.__r.__words[0] + 40);
      }
      (*v112)(v111);
LABEL_195:
      v141 = 0;
      v142[0] = 0;
      v140.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141;
      *(_QWORD *)((char *)v142 + 6) = 0;
      *(_OWORD *)&v140.__r_.__value_.__r.__words[1] = xmmword_1C6613070;
      LOBYTE(v133[0]) = 0;
      LOBYTE(v134) = 0;
      sub_1C4C94178(v110, (uint64_t)&v143, 0x22u, (uint64_t)v133, &v141, &v127, &v123);
      v113 = v123;
      if ((std::string **)v140.__r_.__value_.__l.__data_ != &v141)
        free(v140.__r_.__value_.__l.__data_);
      dword_1ED7EC904 = v113 >> 1;
      __cxa_guard_release(&qword_1ED7EC930);
      goto LABEL_12;
    }
  }
LABEL_18:
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 184))(a1, a2);
  sub_1C5FEDEA0(a1);
  v17 = a2[6];
  if (!v17)
  {
    v17 = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD *))(*(_QWORD *)a2[1] + 216))(a2[1], a2 + 16, a2);
    a2[6] = v17;
  }
  v18 = a2[7];
  v19 = *(_QWORD *)(v17 + 552);
  if ((v19 & 0xFF00000000) != 0)
    v20 = (4 * v19 + 4);
  else
    v20 = 0;
  if (!*(_BYTE *)(v18 + 62))
  {
    v21 = *(unsigned int *)(v18 + 48);
    if (v114 != 1600)
    {
      ((void (*)(_QWORD **, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*v5)[1])(v5, 15, v21, 1, 0, 1, 4);
      goto LABEL_29;
    }
LABEL_27:
    ((void (*)(_QWORD **, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(*v5)[1])(v5, 17, v20, 1, 0, 1, 3);
    ((void (*)(_QWORD **, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*v5)[1])(v5, 12, v21, 1, 0, 1, 3);
    goto LABEL_36;
  }
  v20 = ((_DWORD)v20 + 63) & 0xFFFFFFC0;
  v21 = *(unsigned int *)(v18 + 48);
  if (v114 == 1600)
    goto LABEL_27;
  ((void (*)(_QWORD **, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*v5)[1])(v5, 16, v21, 1, 0, 1, 3);
LABEL_29:
  ((void (*)(_QWORD **, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(*v5)[1])(v5, 11, 0, 1, 0, 1, 0);
  v22 = ((uint64_t (*)(_QWORD **))(*v5)[11])(v5);
  v23 = (uint64_t (**)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))*v5;
  if (v22)
  {
    v24 = (uint64_t (****)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))((uint64_t (*)(_QWORD **))v23[12])(v5);
    v25 = ((uint64_t (*)(_QWORD **))(*v5)[13])(v5);
    if (v24 != (uint64_t (****)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))v25)
    {
      v26 = (uint64_t (****)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))v25;
      do
      {
        v28 = *v24++;
        v27 = v28;
        v29 = (**v28)(v28, 16, 0, 1, 4);
        v30 = (**v27)(v27, 15, 0, 1, 4);
        ((void (*)(uint64_t (***)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t), uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(*v27)[1])(v27, 11, (v30 + v29), 1, 0, 1, 3);
      }
      while (v24 != v26);
    }
  }
  else
  {
    v31 = (*v23)(v5, 16, 0, 1, 4);
    v32 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**v5)(v5, 15, 0, 1, 4);
    ((void (*)(_QWORD **, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(*v5)[1])(v5, 11, (v32 + v31), 1, 0, 1, 3);
  }
  ((void (*)(_QWORD **, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(*v5)[1])(v5, 18, v20, 1, 0, 1, 3);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*v5[1] + 112))(v5[1], *a2, v20);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*v5[1] + 96))(v5[1], *a2, v21);
LABEL_36:
  v33 = (*(unsigned __int16 *)(*a2 + 18) >> 4) & 0x3FF;
  if (!v33 || (v33 != 255 ? (v34 = v33 == 8) : (v34 = 1), v34))
  {
    v35 = ((uint64_t (*)(_QWORD **, uint64_t))(*v5)[74])(v5, 100);
    v36 = ((uint64_t (*)(_QWORD **))(*v5)[4])(v5);
    if (v35)
    {
      v37 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 24))(v36, v35);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 360))(v37))
      {
        ((void (*)(_QWORD **, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*v5)[1])(v5, 12, v21, 1, 0, 1, 3);
        ((void (*)(_QWORD **, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(*v5)[1])(v5, 17, v20, 1, 0, 1, 3);
      }
    }
  }
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), &llvm::MachineLoopInfo::ID, 1);
  if (AnalysisPass)
    v39 = (const llvm::MachineLoopInfo *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::MachineLoopInfo::ID);
  else
    v39 = 0;
  llvm::GPUMetadataEmitter::runOnMachineFunction((llvm::GPUMetadataEmitter *)(a1 + 1584), (llvm::MachineFunction *)a2, v39, *(llvm::MCContext **)(a1 + 264), *(llvm::MCStreamer **)(a1 + 272));
  v40 = atomic_load((unsigned __int8 *)&qword_1ED7EC910);
  if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EC910))
  {
    byte_1ED7EC8F0 = 0;
    __cxa_guard_release(&qword_1ED7EC910);
  }
  v41 = atomic_load((unsigned __int8 *)&qword_1ED7EC918);
  if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EC918))
  {
    byte_1ED7EC8F1 = 0;
    __cxa_guard_release(&qword_1ED7EC918);
  }
  if (byte_1ED7EC8F0 && byte_1ED7EC8F1)
  {
    v48 = *(_QWORD *)(*a2 + 40);
    *(_QWORD *)&v143 = "agxcompiler.config";
    LOWORD(v145) = 259;
    NamedMetadata = llvm::Module::getNamedMetadata(v48, (uint64_t)&v143);
    if (NamedMetadata && (v50 = *(uint64_t **)(NamedMetadata + 48), v51 = *((unsigned int *)v50 + 2), (_DWORD)v51))
    {
      v53 = 0;
      LODWORD(v52) = 0;
      v54 = *v50;
      do
      {
        v55 = (_QWORD *)(*(_QWORD *)v54 - 8 * *(unsigned int *)(*(_QWORD *)v54 + 8));
        if (!*(_BYTE *)*v55)
        {
          v56 = *(_QWORD **)(*v55 + 8);
          if (*v56 == 16)
          {
            v58 = v56[3];
            v57 = v56[4];
            if (v58 == 0x2E74736575716552 && v57 == 0x4449726564616853)
            {
              v60 = v55[1];
              if (*(_BYTE *)v60 == 1)
              {
                v61 = *(_QWORD *)(v60 + 128);
                if (*(_BYTE *)(v61 + 16) == 16)
                {
                  v62 = *(_DWORD *)(v61 + 32);
                  if (v62 > 0x40)
                    v52 = **(_QWORD **)(v61 + 24);
                  else
                    v52 = (uint64_t)(*(_QWORD *)(v61 + 24) << -(char)v62) >> -(char)v62;
                  v53 = 1;
                }
              }
            }
          }
        }
        v54 += 8;
        --v51;
      }
      while (v51);
    }
    else
    {
      LODWORD(v52) = 0;
      v53 = 0;
    }
    v139.__val_ = 0;
    v139.__cat_ = std::system_category();
    if (v53)
    {
      std::to_string(&v140, v52);
      LOWORD(v145) = 260;
      *(_QWORD *)&v143 = &v140;
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v140.__r_.__value_.__l.__data_);
    }
    else
    {
      LOWORD(v145) = 260;
      *(_QWORD *)&v143 = &v140;
    }
    v122 = 261;
    v120 = "readlocs-shaderid";
    v121 = 17;
    v63 = __p;
    llvm::Twine::str((llvm::Twine *)&v143, __p);
    v64 = v122;
    if (v122 == 1)
    {
      v123 = __p;
      v126 = 260;
      v65 = 4;
      v68 = v124;
    }
    else
    {
      if (!(_BYTE)v122)
      {
        v65 = 0;
        v126 = 256;
        v66 = 1;
        v67 = 1;
        goto LABEL_99;
      }
      v69 = (const char **)v120;
      v65 = 2;
      if (HIBYTE(v122) != 1)
      {
        v64 = 2;
        v69 = &v120;
      }
      v123 = (void **)v69;
      v124 = (void **)v121;
      v68 = __p;
      v125 = __p;
      LOBYTE(v126) = v64;
      HIBYTE(v126) = 4;
      v63 = (void **)&v123;
    }
    v66 = 0;
    v127 = v63;
    v128 = v68;
    v129 = "-";
    v130 = 1;
    v67 = 5;
LABEL_99:
    v131 = v65;
    v132 = v67;
    v70 = (uint64_t ***)*a2;
    if ((*(_BYTE *)(*a2 + 23) & 0x10) == 0)
    {
      v80 = 0;
      v81 = &byte_1C871356D;
      goto LABEL_108;
    }
    v71 = ***v70;
    v72 = *(_QWORD *)(v71 + 152);
    v73 = *(unsigned int *)(v71 + 168);
    if ((_DWORD)v73)
    {
      LODWORD(v74) = (v73 - 1) & ((v70 >> 4) ^ (v70 >> 9));
      v75 = (uint64_t ****)(v72 + 16 * v74);
      v76 = *v75;
      if (*v75 == v70)
      {
LABEL_107:
        v79 = v75[1];
        v82 = (std::string::size_type)*v79;
        v81 = (char *)(v79 + 2);
        v80 = v82;
LABEL_108:
        if (v65)
        {
          v85 = v127;
          v86 = v66 == 0;
          v83 = 2;
          if (v86)
            LOBYTE(v65) = 2;
          if (v86)
            v85 = &v127;
          v133[0] = v85;
          v133[1] = v128;
          v134 = v81;
          v135 = v80;
          LOBYTE(v136) = v65;
          HIBYTE(v136) = 5;
          v140.__r_.__value_.__r.__words[0] = (std::string::size_type)v133;
          v140.__r_.__value_.__l.__size_ = v80;
          v84 = 5;
          v140.__r_.__value_.__r.__words[2] = (std::string::size_type)".json";
          v141 = (std::string *)5;
        }
        else
        {
          v83 = 0;
          v136 = 256;
          v84 = 1;
        }
        LOBYTE(v142[0]) = v83;
        BYTE1(v142[0]) = v84;
        llvm::Twine::str((llvm::Twine *)&v140, v137);
        if (v119 < 0)
          operator delete(__p[0]);
        v87 = (std::string *)operator new();
        v88 = v87;
        if (v138 >= 0)
          v89 = v137;
        else
          v89 = (void **)v137[0];
        if (v138 >= 0)
          v90 = v138 & 0x7F;
        else
          v90 = (std::string::size_type)v137[1];
        v91 = llvm::ToolOutputFile::ToolOutputFile(v87, (std::string::value_type *)v89, v90, (uint64_t)&v139, 1);
        v133[0] = v91;
        if (v139.__val_)
        {
          v92 = (llvm::raw_ostream *)llvm::errs((llvm *)v91);
          std::error_code::message(&v140, &v139);
          if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v93 = &v140;
          else
            v93 = (std::string *)v140.__r_.__value_.__r.__words[0];
          if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = *((_BYTE *)&v140.__r_.__value_.__s + 23) & 0x7F;
          else
            size = v140.__r_.__value_.__l.__size_;
          llvm::raw_ostream::write(v92, (const char *)v93, size);
          v95 = (_BYTE *)*((_QWORD *)v92 + 4);
          if ((unint64_t)v95 >= *((_QWORD *)v92 + 3))
          {
            llvm::raw_ostream::write(v92, 10);
          }
          else
          {
            *((_QWORD *)v92 + 4) = v95 + 1;
            *v95 = 10;
          }
          if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v140.__r_.__value_.__l.__data_);
        }
        else
        {
          v96 = (llvm::raw_ostream *)v88[5].__r_.__value_.__r.__words[2];
          v97 = (_WORD *)*((_QWORD *)v96 + 4);
          if (*((_QWORD *)v96 + 3) - (_QWORD)v97 > 1uLL)
          {
            *v97 = 2683;
            *((_QWORD *)v96 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v96, "{\n", 2uLL);
          }
          v98 = (_QWORD *)a2[41];
          v116 = a2 + 40;
          if (v98 != a2 + 40)
          {
            v99 = -1;
            v100 = 1;
            do
            {
              for (i = v98[7]; (_QWORD *)i != v98 + 6; i = *(_QWORD *)(i + 8))
              {
                v102 = *((_QWORD *)v96 + 4);
                if ((v100 & 1) == 0)
                {
                  if ((unint64_t)(*((_QWORD *)v96 + 3) - v102) > 1)
                  {
                    *(_WORD *)v102 = 2604;
                    v102 = *((_QWORD *)v96 + 4) + 2;
                    *((_QWORD *)v96 + 4) = v102;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v96, ",\n", 2uLL);
                    v102 = *((_QWORD *)v96 + 4);
                  }
                }
                if ((unint64_t)(*((_QWORD *)v96 + 3) - v102) > 6)
                {
                  *(_DWORD *)(v102 + 3) = 1920234350;
                  *(_DWORD *)v102 = 1850286601;
                  *((_QWORD *)v96 + 4) += 7;
                }
                else
                {
                  llvm::raw_ostream::write(v96, "\t\"Instr", 7uLL);
                }
                llvm::raw_ostream::operator<<(v96, ++v99);
                v103 = (void *)*((_QWORD *)v96 + 4);
                if (*((_QWORD *)v96 + 3) - (_QWORD)v103 > 0xCuLL)
                {
                  qmemcpy(v103, "\" : { \"PC\" : ", 13);
                  *((_QWORD *)v96 + 4) += 13;
                }
                else
                {
                  llvm::raw_ostream::write(v96, "\" : { \"PC\" : ", 0xDuLL);
                }
                llvm::raw_ostream::operator<<(v96, v99);
                v104 = (void *)*((_QWORD *)v96 + 4);
                if (*((_QWORD *)v96 + 3) - (_QWORD)v104 > 0x14uLL)
                {
                  qmemcpy(v104, ", \"ReadLocations\" : [", 21);
                  *((_QWORD *)v96 + 4) += 21;
                }
                else
                {
                  llvm::raw_ostream::write(v96, ", \"ReadLocations\" : [", 0x15uLL);
                }
                sub_1C49C18AC(&v140, i, 1);
                if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v105 = &v140;
                else
                  v105 = (std::string *)v140.__r_.__value_.__r.__words[0];
                if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v106 = *((_BYTE *)&v140.__r_.__value_.__s + 23) & 0x7F;
                else
                  v106 = v140.__r_.__value_.__l.__size_;
                llvm::raw_ostream::write(v96, (const char *)v105, v106);
                v107 = *((_QWORD *)v96 + 4);
                if ((unint64_t)(*((_QWORD *)v96 + 3) - v107) > 2)
                {
                  *(_BYTE *)(v107 + 2) = 125;
                  *(_WORD *)v107 = 8285;
                  *((_QWORD *)v96 + 4) += 3;
                }
                else
                {
                  llvm::raw_ostream::write(v96, "] }", 3uLL);
                }
                if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v140.__r_.__value_.__l.__data_);
                if ((*(_BYTE *)i & 4) == 0)
                {
                  while ((*(_WORD *)(i + 44) & 8) != 0)
                    i = *(_QWORD *)(i + 8);
                }
                v100 = 0;
              }
              v98 = (_QWORD *)v98[1];
            }
            while (v98 != v116);
          }
          v108 = *((_QWORD *)v96 + 4);
          if ((unint64_t)(*((_QWORD *)v96 + 3) - v108) > 2)
          {
            *(_BYTE *)(v108 + 2) = 10;
            *(_WORD *)v108 = 32010;
            *((_QWORD *)v96 + 4) += 3;
          }
          else
          {
            llvm::raw_ostream::write(v96, "\n}\n", 3uLL);
          }
          v88[1].__r_.__value_.__s.__data_[0] = 1;
        }
        v133[0] = 0;
        sub_1C49C7E54((uint64_t)v133, v88);
        if (v138 < 0)
          operator delete(v137[0]);
        return 0;
      }
      v77 = 1;
      while (v76 != (uint64_t ***)-4096)
      {
        v78 = v74 + v77++;
        v74 = v78 & (v73 - 1);
        v76 = *(uint64_t ****)(v72 + 16 * v74);
        if (v76 == v70)
        {
          v75 = (uint64_t ****)(v72 + 16 * v74);
          goto LABEL_107;
        }
      }
    }
    v75 = (uint64_t ****)(v72 + 16 * v73);
    goto LABEL_107;
  }
  return 0;
}

uint64_t sub_1C49C3014()
{
  return 1;
}

uint64_t sub_1C49C301C(_QWORD *a1, llvm::Module *a2)
{
  unsigned int *v2;
  llvm::MCStreamer *v3;

  v2 = (unsigned int *)a1[33];
  v3 = (llvm::MCStreamer *)a1[34];
  a1[142] = v2[36];
  return llvm::GPUMetadataEmitter::emitEndOfAsmFile((llvm::GPUMetadataEmitter *)(a1 + 198), a2, (llvm::MCContext *)v2, v3);
}

void sub_1C49C3030(int32x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned __int8 v7;
  _BYTE *v8;
  uint64_t ***v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ****v15;
  uint64_t ***v16;
  int v17;
  int v18;
  unint64_t *v19;
  size_t v20;
  const void *v21;
  unint64_t v22;
  __int128 *p_dst;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::raw_ostream *PICLevel;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  uint64_t j;
  unsigned __int16 *v33;
  int v34;
  BOOL v35;
  BOOL v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  double v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  _QWORD *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int16 *v63;
  int v64;
  BOOL v66;
  unsigned __int16 *v67;
  int v68;
  unsigned int v70;
  char v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  __int32 v78;
  unsigned int v79;
  _DWORD *v80;
  int v81;
  unsigned int v82;
  _WORD *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t **v87;
  unint64_t v88;
  uint64_t **v89;
  uint64_t v90;
  unsigned int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  unint64_t v96;
  uint64_t v97;
  int *v98;
  unint64_t v99;
  _BYTE *v100;
  int v101;
  int v102;
  unsigned int v104;
  uint64_t v105;
  unint64_t v106;
  _WORD *v107;
  unsigned __int16 v108;
  unsigned int v109;
  int *v110;
  uint64_t v111;
  unsigned int v112;
  int v113;
  _QWORD *v114;
  _QWORD **v115;
  _QWORD **v116;
  _QWORD *v117;
  unsigned int v118;
  _QWORD *v119;
  _QWORD *v120;
  unsigned int v121;
  int v122;
  _QWORD *v123;
  int v124;
  unsigned int v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int *v128;
  int v129;
  BOOL v130;
  unsigned int v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int v134;
  uint64_t *v135;
  uint64_t **v136;
  uint64_t **v137;
  uint64_t *v138;
  unsigned int v139;
  uint64_t **v140;
  uint64_t *v141;
  uint64_t *v142;
  int v143;
  int NumExplicitOperands;
  _DWORD *v145;
  unsigned int v146;
  unint64_t v147;
  _WORD *v148;
  unsigned __int16 v149;
  unsigned int v150;
  _QWORD *v151;
  uint64_t *v152;
  uint64_t *v153;
  _QWORD *v154;
  unsigned int v155;
  _QWORD *v156;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t *v160;
  unsigned int v161;
  uint64_t **v162;
  uint64_t *v163;
  uint64_t **k;
  uint64_t **v165;
  unsigned int v166;
  _DWORD *v167;
  uint64_t *v168;
  int v169;
  unint64_t v170;
  _WORD *v171;
  unsigned __int16 v172;
  unsigned int v173;
  _QWORD *m;
  unsigned int v175;
  _DWORD *v176;
  uint64_t v177;
  int v178;
  int v179;
  unsigned int v180;
  int v181;
  int v182;
  unsigned __int16 *v183;
  int v184;
  int v185;
  _DWORD *v186;
  unint64_t v187;
  int v188;
  uint64_t v189;
  int v191;
  __int16 v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t *v200;
  unsigned int v201;
  _QWORD *v202;
  uint64_t *v203;
  uint64_t *v204;
  _QWORD *v205;
  unsigned int v206;
  _QWORD *v207;
  uint64_t *v208;
  uint64_t *v209;
  uint64_t *v210;
  uint64_t *v211;
  unsigned int v212;
  uint64_t **v213;
  unint64_t v214;
  unint64_t v215;
  unsigned int v216;
  uint64_t v217;
  uint64_t v218;
  unsigned int v219;
  uint64_t v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned __int32 v224;
  uint64_t v225;
  void *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  int32x2_t *v241;
  unsigned __int32 v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  int v252;
  const char *v253;
  uint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  int v258;
  const char *v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  int v264;
  const char *v265;
  uint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  int v270;
  const char *v271;
  uint64_t v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  int v276;
  const char *v277;
  uint64_t v278;
  uint64_t v279;
  llvm *v280;
  char v281;
  BOOL v282;
  const char *v283;
  size_t v284;
  size_t v285;
  llvm::raw_ostream *v286;
  void *v287;
  const char *v288;
  size_t v289;
  _BYTE *v290;
  llvm *v291;
  char v292;
  BOOL v293;
  const char *v294;
  size_t v295;
  size_t v296;
  llvm::raw_ostream *v297;
  void *v298;
  const char *v299;
  size_t v300;
  llvm::raw_ostream *v301;
  _BYTE *v302;
  llvm *v303;
  char v304;
  BOOL v305;
  const char *v306;
  size_t v307;
  size_t v308;
  llvm::raw_ostream *v309;
  void *v310;
  const char *v311;
  size_t v312;
  _BYTE *v313;
  llvm *v314;
  char v315;
  BOOL v316;
  const char *v317;
  size_t v318;
  size_t v319;
  llvm::raw_ostream *v320;
  void *v321;
  const char *v322;
  size_t v323;
  llvm::raw_ostream *v324;
  _BYTE *v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  uint64_t v329;
  uint64_t v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  int v334;
  uint64_t v335;
  uint64_t v336;
  int v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v345;
  int v346;
  uint64_t v347;
  int v348;
  int v349;
  int v350;
  char v351;
  unsigned int v352;
  unsigned int v353;
  uint64_t v354;
  int32x2_t *v355;
  llvm::TargetSubtargetInfo *v356;
  _QWORD *v357;
  uint64_t v358;
  unsigned int v359;
  unsigned int v360;
  unsigned int v361;
  uint64_t **v362;
  uint64_t *v363;
  uint64_t v364;
  uint64_t *v365;
  _QWORD *v366;
  uint64_t v367;
  unsigned int *v368;
  uint64_t v369;
  _QWORD *v370;
  unsigned int v371;
  void *v372[2];
  _BYTE v373[64];
  _QWORD **v374;
  _QWORD *v375[2];
  void *v376;
  uint64_t v377;
  _BYTE v378[64];
  _QWORD **v379;
  _QWORD *v380;
  uint64_t v381;
  void *v382[2];
  _BYTE v383[64];
  _QWORD **v384;
  _QWORD *v385[2];
  __int128 __dst;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  uint64_t v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  uint64_t v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  void *v399;
  uint64_t v400;
  _QWORD v401[12];

  v401[9] = *MEMORY[0x1E0C80C00];
  v356 = *(llvm::TargetSubtargetInfo **)(a2 + 16);
  v6 = (*(uint64_t (**)(void))(*(_QWORD *)v356 + 176))();
  v347 = v6;
  v7 = atomic_load((unsigned __int8 *)&qword_1ED7EC968);
  if ((v7 & 1) == 0)
  {
    v6 = __cxa_guard_acquire(&qword_1ED7EC968);
    if ((_DWORD)v6)
    {
      byte_1ED7EC8F4 = 0;
      __cxa_guard_release(&qword_1ED7EC968);
    }
  }
  v355 = a1;
  if (!byte_1ED7EC8F4)
    goto LABEL_32;
  v8 = *(_BYTE **)(a2 + 48);
  if (!v8)
  {
    v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 8) + 216))(*(_QWORD *)(a2 + 8), a2 + 128, a2);
    v8 = (_BYTE *)v6;
    *(_QWORD *)(a2 + 48) = v6;
  }
  v9 = *(uint64_t ****)a2;
  v10 = *(_QWORD *)(*(_QWORD *)a2 + 40);
  if ((*(_BYTE *)(*(_QWORD *)a2 + 23) & 0x10) == 0)
  {
    v20 = 0;
    BYTE7(v387) = 0;
    p_dst = &__dst;
    goto LABEL_22;
  }
  v11 = ***v9;
  v12 = *(_QWORD *)(v11 + 152);
  v13 = *(unsigned int *)(v11 + 168);
  if ((_DWORD)v13)
  {
    LODWORD(v14) = (v13 - 1) & ((v9 >> 4) ^ (v9 >> 9));
    v15 = (uint64_t ****)(v12 + 16 * v14);
    v16 = *v15;
    if (*v15 == v9)
      goto LABEL_13;
    v17 = 1;
    while (v16 != (uint64_t ***)-4096)
    {
      v18 = v14 + v17++;
      v14 = v18 & (v13 - 1);
      v16 = *(uint64_t ****)(v12 + 16 * v14);
      if (v16 == v9)
      {
        v15 = (uint64_t ****)(v12 + 16 * v14);
        goto LABEL_13;
      }
    }
  }
  v15 = (uint64_t ****)(v12 + 16 * v13);
LABEL_13:
  v19 = (unint64_t *)v15[1];
  v22 = *v19;
  v21 = v19 + 2;
  v20 = v22;
  if (v22 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v20 >= 0x17)
  {
    v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v24 = v20 | 7;
    v25 = v24 + 1;
    p_dst = (__int128 *)operator new(v24 + 1);
    *(_QWORD *)&v387 = v25 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    *((_QWORD *)&__dst + 1) = v20;
  }
  else
  {
    BYTE7(v387) = v20;
    p_dst = &__dst;
    if (!v20)
      goto LABEL_21;
  }
  v6 = (uint64_t)memmove(p_dst, v21, v20);
LABEL_21:
  a1 = v355;
LABEL_22:
  *((_BYTE *)p_dst + v20) = 0;
  v26 = BYTE7(v387);
  if (SBYTE7(v387) < 0)
    v26 = *((_QWORD *)&__dst + 1);
  if (!v26)
    v6 = MEMORY[0x1CAA32ABC](&__dst, "unnamed");
  if (v8[496])
  {
    v280 = llvm::dbgs((llvm *)v6);
    v281 = *(_BYTE *)(v10 + 215);
    v282 = v281 < 0;
    if (v281 >= 0)
      v283 = (const char *)(v10 + 192);
    else
      v283 = *(const char **)(v10 + 192);
    v284 = v281 & 0x7F;
    if (v282)
      v285 = *(_QWORD *)(v10 + 200);
    else
      v285 = v284;
    v286 = llvm::raw_ostream::write(v280, v283, v285);
    v287 = (void *)*((_QWORD *)v286 + 4);
    if (*((_QWORD *)v286 + 3) - (_QWORD)v287 > 0x1CuLL)
    {
      qmemcpy(v287, " Indirect branch detected in ", 29);
      *((_QWORD *)v286 + 4) += 29;
    }
    else
    {
      v286 = llvm::raw_ostream::write(v286, " Indirect branch detected in ", 0x1DuLL);
    }
    if ((SBYTE7(v387) & 0x80u) == 0)
      v288 = (const char *)&__dst;
    else
      v288 = (const char *)__dst;
    if ((SBYTE7(v387) & 0x80u) == 0)
      v289 = BYTE7(v387) & 0x7F;
    else
      v289 = *((_QWORD *)&__dst + 1);
    v6 = (uint64_t)llvm::raw_ostream::write(v286, v288, v289);
    v290 = *(_BYTE **)(v6 + 32);
    if (*(_BYTE **)(v6 + 24) == v290)
    {
      v6 = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)v6, "\n", 1uLL);
    }
    else
    {
      *v290 = 10;
      ++*(_QWORD *)(v6 + 32);
    }
  }
  if (v8[498])
  {
    v291 = llvm::dbgs((llvm *)v6);
    v292 = *(_BYTE *)(v10 + 215);
    v293 = v292 < 0;
    if (v292 >= 0)
      v294 = (const char *)(v10 + 192);
    else
      v294 = *(const char **)(v10 + 192);
    v295 = v292 & 0x7F;
    if (v293)
      v296 = *(_QWORD *)(v10 + 200);
    else
      v296 = v295;
    v297 = llvm::raw_ostream::write(v291, v294, v296);
    v298 = (void *)*((_QWORD *)v297 + 4);
    if (*((_QWORD *)v297 + 3) - (_QWORD)v298 > 0x1BuLL)
    {
      qmemcpy(v298, " Binary linking detected in ", 28);
      *((_QWORD *)v297 + 4) += 28;
    }
    else
    {
      v297 = llvm::raw_ostream::write(v297, " Binary linking detected in ", 0x1CuLL);
    }
    if ((SBYTE7(v387) & 0x80u) == 0)
      v299 = (const char *)&__dst;
    else
      v299 = (const char *)__dst;
    if ((SBYTE7(v387) & 0x80u) == 0)
      v300 = BYTE7(v387) & 0x7F;
    else
      v300 = *((_QWORD *)&__dst + 1);
    v301 = llvm::raw_ostream::write(v297, v299, v300);
    v302 = (_BYTE *)*((_QWORD *)v301 + 4);
    if (*((_BYTE **)v301 + 3) == v302)
    {
      llvm::raw_ostream::write(v301, "\n", 1uLL);
    }
    else
    {
      *v302 = 10;
      ++*((_QWORD *)v301 + 4);
    }
  }
  PICLevel = (llvm::raw_ostream *)llvm::Module::getPICLevel((llvm::Module *)v10);
  if ((_DWORD)PICLevel)
  {
    v303 = llvm::dbgs(PICLevel);
    v304 = *(_BYTE *)(v10 + 215);
    v305 = v304 < 0;
    if (v304 >= 0)
      v306 = (const char *)(v10 + 192);
    else
      v306 = *(const char **)(v10 + 192);
    v307 = v304 & 0x7F;
    if (v305)
      v308 = *(_QWORD *)(v10 + 200);
    else
      v308 = v307;
    v309 = llvm::raw_ostream::write(v303, v306, v308);
    v310 = (void *)*((_QWORD *)v309 + 4);
    if (*((_QWORD *)v309 + 3) - (_QWORD)v310 > 0x1BuLL)
    {
      qmemcpy(v310, " Dylib function detected in ", 28);
      *((_QWORD *)v309 + 4) += 28;
    }
    else
    {
      v309 = llvm::raw_ostream::write(v309, " Dylib function detected in ", 0x1CuLL);
    }
    if ((SBYTE7(v387) & 0x80u) == 0)
      v311 = (const char *)&__dst;
    else
      v311 = (const char *)__dst;
    if ((SBYTE7(v387) & 0x80u) == 0)
      v312 = BYTE7(v387) & 0x7F;
    else
      v312 = *((_QWORD *)&__dst + 1);
    PICLevel = llvm::raw_ostream::write(v309, v311, v312);
    v313 = (_BYTE *)*((_QWORD *)PICLevel + 4);
    if (*((_BYTE **)PICLevel + 3) == v313)
    {
      PICLevel = llvm::raw_ostream::write(PICLevel, "\n", 1uLL);
    }
    else
    {
      *v313 = 10;
      ++*((_QWORD *)PICLevel + 4);
    }
  }
  if (v8[497])
  {
    v314 = llvm::dbgs(PICLevel);
    v315 = *(_BYTE *)(v10 + 215);
    v316 = v315 < 0;
    if (v315 >= 0)
      v317 = (const char *)(v10 + 192);
    else
      v317 = *(const char **)(v10 + 192);
    v318 = v315 & 0x7F;
    if (v316)
      v319 = *(_QWORD *)(v10 + 200);
    else
      v319 = v318;
    v320 = llvm::raw_ostream::write(v314, v317, v319);
    v321 = (void *)*((_QWORD *)v320 + 4);
    if (*((_QWORD *)v320 + 3) - (_QWORD)v321 > 0x1DuLL)
    {
      qmemcpy(v321, " Recursive branch detected in ", 30);
      *((_QWORD *)v320 + 4) += 30;
    }
    else
    {
      v320 = llvm::raw_ostream::write(v320, " Recursive branch detected in ", 0x1EuLL);
    }
    if ((SBYTE7(v387) & 0x80u) == 0)
      v322 = (const char *)&__dst;
    else
      v322 = (const char *)__dst;
    if ((SBYTE7(v387) & 0x80u) == 0)
      v323 = BYTE7(v387) & 0x7F;
    else
      v323 = *((_QWORD *)&__dst + 1);
    v324 = llvm::raw_ostream::write(v320, v322, v323);
    v325 = (_BYTE *)*((_QWORD *)v324 + 4);
    if (*((_BYTE **)v324 + 3) == v325)
    {
      llvm::raw_ostream::write(v324, "\n", 1uLL);
    }
    else
    {
      *v325 = 10;
      ++*((_QWORD *)v324 + 4);
    }
  }
  if (SBYTE7(v387) < 0)
    operator delete((void *)__dst);
LABEL_32:
  v28 = a2 + 320;
  v29 = *(_QWORD *)(a2 + 328);
  if (v29 == a2 + 320)
  {
    if ((*(_WORD *)(*(_QWORD *)a2 + 18) & 0x3FF0) == 0x640)
    {
LABEL_60:
      a1[25].i32[1] += (***(uint64_t (****)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(a2 + 344))(*(_QWORD *)(a2 + 344), 12, 0, 1, 3);
      return;
    }
  }
  else
  {
    v30 = *(_QWORD *)(a2 + 328);
    do
    {
      for (i = *(_QWORD *)(v30 + 56); i != v30 + 48; i = *(_QWORD *)(i + 8))
      {
        if ((*(_BYTE *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            i = *(_QWORD *)(i + 8);
        }
      }
      v30 = *(_QWORD *)(v30 + 8);
    }
    while (v30 != v28);
    if ((*(_WORD *)(*(_QWORD *)a2 + 18) & 0x3FF0) == 0x640)
    {
      do
      {
        for (j = *(_QWORD *)(v29 + 56); j != v29 + 48; j = *(_QWORD *)(j + 8))
        {
          v33 = *(unsigned __int16 **)(j + 16);
          v34 = *v33;
          v35 = (v34 - 9) > 0x3C || ((1 << (v34 - 9)) & 0x1000000000000605) == 0;
          v36 = !v35 || v34 == 0;
          if (!v36 && (v33[4] & 0x10) == 0)
            ++a1[24].i32[0];
          if ((*(_BYTE *)j & 4) == 0)
          {
            while ((*(_WORD *)(j + 44) & 8) != 0)
              j = *(_QWORD *)(j + 8);
          }
        }
        v29 = *(_QWORD *)(v29 + 8);
      }
      while (v29 != v28);
      goto LABEL_60;
    }
  }
  v388 = xmmword_1C8663800;
  v389 = unk_1C8663810;
  __dst = llvm::MCSchedModel::Default;
  v387 = unk_1C86637F0;
  v392 = unk_1C86637F0;
  v393 = xmmword_1C8663800;
  v394 = unk_1C8663810;
  v390 = 0;
  v395 = 0;
  v391 = llvm::MCSchedModel::Default;
  v397 = 0u;
  v398 = 0u;
  v396 = 0u;
  v399 = v401;
  v400 = 0x1000000000;
  v401[8] = 0;
  llvm::TargetSchedModel::init((llvm::TargetSchedModel *)&__dst, v356);
  v366 = 0;
  v367 = 0;
  v364 = 0;
  v365 = (uint64_t *)&v366;
  v362 = &v363;
  v363 = 0;
  v342 = a2;
  v37 = *(_QWORD *)(a2 + 328);
  if (v37 == v28)
  {
    v39 = 0;
    goto LABEL_449;
  }
  v351 = 0;
  v38 = 0;
  v353 = 0;
  v39 = 0;
  v359 = 0;
  v349 = -1;
  v350 = -1;
  do
  {
    v40 = *(_QWORD *)(a3 + 248);
    v41 = v37 >> 4;
    v42 = *(_DWORD *)(a3 + 264);
    v345 = v37;
    if (!byte_1ED8312F8)
      goto LABEL_70;
    if (!v42)
      goto LABEL_445;
    v43 = (v42 - 1) & (v41 ^ (v37 >> 9));
    v44 = *(_QWORD *)(v40 + 16 * v43);
    if (v37 != v44)
    {
      v45 = 1;
      do
      {
        if (v44 == -4096)
          goto LABEL_445;
        v46 = v43 + v45++;
        v43 = v46 & (v42 - 1);
        v44 = *(_QWORD *)(v40 + 16 * v43);
      }
      while (v37 != v44);
    }
    if (*(_QWORD *)(v40 + 16 * v43 + 8))
    {
LABEL_70:
      v47 = 0.0;
      if (v42)
      {
        v48 = v41 ^ (v37 >> 9);
        v49 = v42 - 1;
        v50 = (v42 - 1) & v48;
        v51 = *(_QWORD *)(v40 + 16 * v50);
        v52 = v50;
        if (v37 == v51)
        {
LABEL_75:
          v56 = *(_QWORD *)(v40 + 16 * v52 + 8);
          if (v56)
            LODWORD(v56) = **(_QWORD **)(v56 + 32) == v37;
        }
        else
        {
          v53 = 1;
          v54 = *(_QWORD *)(v40 + 16 * v50);
          LODWORD(v52) = v50;
          while (v54 != -4096)
          {
            v55 = v52 + v53++;
            v52 = v55 & v49;
            v54 = *(_QWORD *)(v40 + 16 * v52);
            if (v37 == v54)
              goto LABEL_75;
          }
          LODWORD(v56) = 0;
        }
        a1[26].i32[1] += v56;
        if (v37 == v51)
        {
LABEL_82:
          v59 = *(_QWORD **)(v40 + 16 * v50 + 8);
          if (v59)
          {
            v60 = 0;
            do
            {
              v59 = (_QWORD *)*v59;
              ++v60;
            }
            while (v59);
            if (v60)
              v47 = __exp10((double)v60);
          }
        }
        else
        {
          v57 = 1;
          while (v51 != -4096)
          {
            v58 = v50 + v57++;
            v50 = v58 & v49;
            v51 = *(_QWORD *)(v40 + 16 * v50);
            if (v37 == v51)
              goto LABEL_82;
          }
        }
      }
      v61 = *(_QWORD *)(v37 + 56);
      if (v61 == v37 + 48)
        goto LABEL_445;
      v62 = *(_QWORD *)(v37 + 56);
      do
      {
        v63 = *(unsigned __int16 **)(v62 + 16);
        v64 = *v63;
        v66 = (v64 - 9) <= 0x3C && ((1 << (v64 - 9)) & 0x1000000000000605) != 0
           || v64 == 0;
        if (!v66 && (v63[4] & 0x10) == 0)
          a1[27].i32[0] += v47;
        if ((*(_BYTE *)v62 & 4) == 0)
        {
          while ((*(_WORD *)(v62 + 44) & 8) != 0)
            v62 = *(_QWORD *)(v62 + 8);
        }
        v62 = *(_QWORD *)(v62 + 8);
      }
      while (v62 != v37 + 48);
      v354 = v37 + 48;
LABEL_103:
      v67 = *(unsigned __int16 **)(v61 + 16);
      v68 = *v67;
      if ((unsigned __int16)(v68 - 18) < 0xFFFBu && (unsigned __int16)(v68 - 7) < 0xFFFCu)
        ++v39;
      v70 = v68 - 9;
      if ((v68 - 9) <= 0x3C && ((1 << (v68 - 9)) & 0x1000000000000605) != 0
        || v68 == 0)
      {
        goto LABEL_441;
      }
      if ((unsigned __int16)(v68 - 1) < 2u || (*((_QWORD *)v67 + 1) & 0x10) != 0)
        goto LABEL_441;
      v74 = 1;
      if ((v70 > 0x3C || ((1 << v70) & 0x1000000000000605) == 0) && *v67)
        v74 = v67[8] & 1;
      if ((v351 & 1) != 0)
        ++a1[12].i32[1];
      if (v38)
        ++a1[13].i32[0];
      switch(sub_1C4C085A0(v68))
      {
        case 1u:
          ++a1[1].i32[1];
          goto LABEL_139;
        case 2u:
          ++a1[2].i32[0];
          goto LABEL_139;
        case 3u:
          ++a1[2].i32[1];
          goto LABEL_139;
        case 4u:
          ++a1[3].i32[0];
          goto LABEL_139;
        case 5u:
          ++a1[3].i32[1];
          goto LABEL_139;
        case 6u:
          ++a1[4].i32[0];
          goto LABEL_139;
        case 7u:
        case 9u:
        case 0xAu:
        case 0xBu:
        case 0xDu:
        case 0xEu:
        case 0xFu:
          __break(1u);
          return;
        case 8u:
          ++a1[4].i32[1];
          goto LABEL_139;
        case 0xCu:
          ++a1[5].i32[0];
          goto LABEL_139;
        case 0x10u:
          ++a1[5].i32[1];
          goto LABEL_139;
        default:
          ++a1[6].i32[0];
LABEL_139:
          v358 = *((_QWORD *)v67 + 2);
          v75 = sub_1C4C2FD5C(v68);
          v76 = *(_DWORD *)(v61 + 40);
          v77 = (v75 + 1);
          if (v77 >= v76)
            goto LABEL_154;
          v78 = a1[10].i32[1];
          v79 = ~v75 + v76;
          v80 = (_DWORD *)(*(_QWORD *)(v61 + 32) + 32 * v77 + 16);
          break;
      }
      while (1)
      {
        v81 = 0;
        if (*(v80 - 4) != 7 || *v80 != 64)
          goto LABEL_153;
        v81 = 0;
        v82 = (*(v80 - 4) >> 8) & 0xFFF;
        if (v82 > 2)
          break;
        if (v82 == 1)
          goto LABEL_151;
        if (v82 == 2)
          goto LABEL_150;
LABEL_153:
        v80 += 8;
        v78 += v81;
        a1[10].i32[1] = v78;
        if (!--v79)
        {
LABEL_154:
          v352 = v38;
          if ((v74 & 1) != 0)
          {
            ++a1[6].i32[1];
            v83 = (_WORD *)(*((_QWORD *)&v388 + 1) + 24 * v67[3]);
            if ((v83[4] & 0x1FFF) == 0x1FFE)
            {
              do
                v91 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v398 + 200))(v398);
              while ((*(_WORD *)(*((_QWORD *)&v388 + 1) + 24 * v91 + 8) & 0x1FFF) == 0x1FFE);
              v83 = (_WORD *)(*((_QWORD *)&v388 + 1) + 24 * v91);
            }
            if ((~(unsigned __int16)v83[4] & 0x1FFF) == 0)
              ++a1[26].i32[0];
            if ((v358 & 0x200000000000) != 0)
            {
              ++a1[7].i32[1];
            }
            else if ((v358 & 0x100000000000) != 0)
            {
              ++a1[7].i32[0];
            }
            else if ((v358 & 0x40000000000) != 0)
            {
              a1[8] = vadd_s32(a1[8], (int32x2_t)0x100000001);
            }
            else
            {
              ++a1[8].i32[0];
              if ((v358 & 0x80000000000) != 0)
              {
                ++a1[9].i32[0];
              }
              else if ((v358 & 0x4000) != 0)
              {
                if (!*(_BYTE *)(*(_QWORD *)(v61 + 16) + 4))
                  goto LABEL_184;
                v84 = *(unsigned int *)(*(_QWORD *)(v61 + 32) + 4);
                v85 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
                v86 = 0;
                v87 = *(uint64_t ***)(v85 + 248);
                v88 = v84 >> 3;
                v89 = *(uint64_t ***)(v85 + 240);
                do
                {
                  if ((v84 - 0x40000000) >= 0xC0000001)
                  {
                    v90 = **v89;
                    if (v88 < *(unsigned __int16 *)(v90 + 22)
                      && ((1 << (v84 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v90 + 8) + v88)) != 0
                      && (!v86
                       || *v89 != v86
                       && ((*(_DWORD *)(v86[1] + ((*(unsigned __int16 *)(v90 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v90 + 24)) & 1) != 0))
                    {
                      v86 = *v89;
                    }
                  }
                  ++v89;
                }
                while (v89 != v87);
                v92 = *(_DWORD *)(*(_QWORD *)(v85 + 264)
                                + 24
                                * (*(unsigned __int16 *)(*v86 + 24)
                                 + *(_DWORD *)(v85 + 272)
                                 * (((unint64_t)v87 - *(_QWORD *)(v85 + 240)) >> 3))
                                + 4) >> 3;
                if (v92 == 4)
                {
LABEL_184:
                  ++a1[10].i32[0];
                }
                else if (v92 == 2)
                {
                  ++a1[9].i32[1];
                }
              }
            }
            if ((~(unsigned __int16)v83[4] & 0x1FFF) != 0 && v83[8])
              v346 = *(__int16 *)(*((_QWORD *)v356 + 18) + 4 * (unsigned __int16)v83[7]);
            else
              v346 = 0;
            v382[0] = v383;
            v382[1] = (void *)0x1000000000;
            v385[0] = 0;
            v385[1] = 0;
            v384 = v385;
            v376 = v378;
            v377 = 0x1000000000;
            v380 = 0;
            v381 = 0;
            v379 = &v380;
            v372[0] = v373;
            v372[1] = (void *)0x1000000000;
            v375[0] = 0;
            v375[1] = 0;
            v374 = v375;
            v93 = 8;
            v369 = 1;
            do
            {
              *(_DWORD *)((char *)&v369 + v93) = -1;
              v93 += 8;
            }
            while (v93 != 136);
            v94 = v358 & 0x80000000000;
            if (v350 + 1 == v359 && v94)
            {
              ++v359;
              ++a1[12].i32[0];
              ++a1[11].i32[0];
            }
            if ((v358 & 0x200000000000) == 0 && v349 + 1 == v359 && (v358 & 0x40000000000) == 0 && !v94)
            {
              ++v359;
              ++a1[11].i32[0];
            }
            v348 = v39;
            if (llvm::MachineInstr::getNumExplicitOperands(v61) != 1)
            {
              v95 = 0;
              v96 = 0;
              while (1)
              {
                v97 = *(_QWORD *)(v61 + 32);
                v98 = (int *)(v97 + 32 * v96);
                v99 = v96 + 1;
                v100 = (_BYTE *)(v97 + 32 * (v96 + 1));
                v101 = *v98;
                if (!*v98 && v98[1] == 31 || !*v100 && *(_DWORD *)(v97 + 32 * v99 + 4) == 31)
                {
                  a1[41].i32[0] = 1;
                  v101 = *v98;
                }
                if (v101 != 1)
                {
                  v102 = *v100;
                  if ((v101 & 0x10000FF) != 0x1000000 && v102 == 1)
                    break;
                }
LABEL_293:
                NumExplicitOperands = llvm::MachineInstr::getNumExplicitOperands(v61);
                v96 = v99;
                if (v99 >= (NumExplicitOperands - 1))
                  goto LABEL_294;
              }
              if ((_BYTE)v101 || (v104 = *(_DWORD *)(v97 + 32 * v96 + 4)) == 0)
              {
                ++v95;
                goto LABEL_293;
              }
              v357 = (_QWORD *)(v97 + 32 * v99 + 16);
              v105 = *v357 & 0x30;
              v106 = *(unsigned int *)(*(_QWORD *)(v347 + 8) + 24 * v104 + 16);
              v107 = (_WORD *)(*(_QWORD *)(v347 + 56) + ((v106 >> 3) & 0x1FFFFFFE));
              v108 = *v107 + (v106 & 0xF) * v104;
              while (2)
              {
                v109 = v108;
                LODWORD(v368) = v108;
                sub_1C48302EC((uint64_t)&v376, (unsigned int *)&v368);
                if (v105)
                {
                  LODWORD(v368) = v109;
                  sub_1C48302EC((uint64_t)v382, (unsigned int *)&v368);
                }
                if ((~(unsigned __int16)v83[4] & 0x1FFF) != 0 && v83[10])
                {
                  v110 = (int *)(*((_QWORD *)v356 + 19) + 12 * (unsigned __int16)v83[9] + 8);
                  v111 = 12 * (unsigned __int16)v83[10];
                  while (1)
                  {
                    v112 = *(v110 - 2);
                    if (v112 >= v95)
                    {
                      if (v112 > v95)
                        goto LABEL_227;
                      if (!*(v110 - 1))
                        break;
                    }
                    v110 += 3;
                    v111 -= 12;
                    if (!v111)
                      goto LABEL_227;
                  }
                  v113 = *v110;
                }
                else if ((v358 & 0x40000000000) != 0)
                {
                  v113 = -(*(_DWORD *)v357 & 1);
                }
                else
                {
LABEL_227:
                  v113 = 0;
                }
                v114 = v366;
                if (v366)
                {
                  v115 = &v366;
                  do
                  {
                    v116 = v115;
                    v117 = v114;
                    v118 = *((_DWORD *)v114 + 7);
                    v119 = v114 + 1;
                    if (v118 >= v109)
                    {
                      v119 = v117;
                      v115 = (_QWORD **)v117;
                    }
                    v114 = (_QWORD *)*v119;
                  }
                  while (v114);
                  if (v115 != &v366)
                  {
                    v120 = v118 >= v109 ? v117 : v116;
                    if (*((_DWORD *)v120 + 7) <= v109)
                    {
                      if (v118 >= v109)
                        v116 = (_QWORD **)v117;
                      v121 = *((_DWORD *)v116 + 8) - v113;
                      if ((*(_BYTE *)v357 & 0x10) != 0)
                      {
                        v360 = v109;
                        v361 = v121;
                        if ((v369 & 1) != 0)
                        {
                          v122 = 16;
                          v123 = &v370;
                          goto LABEL_244;
                        }
                        v122 = v371;
                        if (!v371)
                        {
                          v132 = 0;
                          v133 = 0;
                          goto LABEL_259;
                        }
                        v123 = v370;
LABEL_244:
                        v124 = v122 - 1;
                        v125 = v124 & (37 * v109);
                        v126 = (unsigned int *)&v123[v125];
                        v127 = *v126;
                        if (*v126 != v109)
                        {
                          v128 = 0;
                          v129 = 1;
                          while (v127 != -1)
                          {
                            if (v128)
                              v130 = 0;
                            else
                              v130 = v127 == -2;
                            if (v130)
                              v128 = v126;
                            v131 = v125 + v129++;
                            v125 = v131 & v124;
                            v126 = (unsigned int *)&v123[v125];
                            v127 = *v126;
                            if (*v126 == v109)
                              goto LABEL_264;
                          }
                          if (v128)
                            v132 = v128;
                          else
                            v132 = v126;
                          if ((v369 & 1) != 0)
                            v133 = 16;
                          else
                            v133 = v371;
LABEL_259:
                          if (4 * (v369 >> 1) + 4 >= 3 * v133)
                          {
                            v133 *= 2;
                          }
                          else if (v133 + ~(v369 >> 1) - HIDWORD(v369) > v133 >> 3)
                          {
                            goto LABEL_261;
                          }
                          sub_1C485B4FC((uint64_t)&v369, v133);
                          v368 = 0;
                          sub_1C485B44C((uint64_t)&v369, &v360, &v368);
                          v132 = v368;
LABEL_261:
                          LODWORD(v369) = v369 + 2;
                          if (*v132 != -1)
                            --HIDWORD(v369);
                          *v132 = v360;
                          v132[1] = v361;
                        }
                      }
LABEL_264:
                      if (v113)
                      {
                        LODWORD(v368) = v109;
                        sub_1C48302EC((uint64_t)v372, (unsigned int *)&v368);
                      }
                      v134 = v121 - v359;
                      if (v121 > v359)
                      {
                        v355[11].i32[0] += v134;
                        v135 = v363;
                        if (v363)
                        {
                          v136 = &v363;
                          do
                          {
                            v137 = v136;
                            v138 = v135;
                            v139 = *((_DWORD *)v135 + 8);
                            v140 = (uint64_t **)(v135 + 1);
                            if (v139 >= v109)
                            {
                              v140 = (uint64_t **)v138;
                              v136 = (uint64_t **)v138;
                            }
                            v135 = *v140;
                          }
                          while (v135);
                          if (v136 != &v363)
                          {
                            v141 = v139 >= v109 ? v138 : (uint64_t *)v137;
                            if (*((_DWORD *)v141 + 8) <= v109)
                            {
                              if (v139 >= v109)
                                v137 = (uint64_t **)v138;
                              v142 = v137[5];
                              if (((unint64_t)v142 & 0x40000000000) != 0)
                              {
                                v355[11].i32[1] += v134;
                              }
                              else if (((unint64_t)v142 & 0x80000000000) != 0)
                              {
                                v355[12].i32[0] += v134;
                              }
                            }
                          }
                        }
                        v359 = v121;
                      }
                    }
                  }
                }
                v143 = (unsigned __int16)v107[1];
                ++v107;
                v108 = v143 + v109;
                if (!v143)
                {
                  ++v95;
                  a1 = v355;
                  v39 = v348;
                  goto LABEL_293;
                }
                continue;
              }
            }
LABEL_294:
            v145 = *(_DWORD **)(v61 + 32);
            if ((*v145 & 0x10000FF) == 0x1000000)
            {
              v146 = v145[1];
              v147 = *(unsigned int *)(*(_QWORD *)(v347 + 8) + 24 * v146 + 16);
              v148 = (_WORD *)(*(_QWORD *)(v347 + 56) + ((v147 >> 3) & 0x1FFFFFFE));
              v149 = *v148 + (v147 & 0xF) * v146;
              do
              {
                v150 = v149;
                v151 = v366;
                if (v366)
                {
                  v152 = (uint64_t *)&v366;
                  do
                  {
                    v153 = v152;
                    v154 = v151;
                    v155 = *((_DWORD *)v151 + 7);
                    v156 = v151 + 1;
                    if (v155 >= v150)
                    {
                      v156 = v154;
                      v152 = v154;
                    }
                    v151 = (_QWORD *)*v156;
                  }
                  while (v151);
                  if (v152 != (uint64_t *)&v366)
                  {
                    if (v155 >= v150)
                      v153 = v154;
                    if (*((_DWORD *)v153 + 7) <= v150)
                    {
                      sub_1C485B670(&v365, v152);
                      operator delete(v152);
                    }
                  }
                }
                v157 = v363;
                if (v363)
                {
                  v158 = (uint64_t *)&v363;
                  do
                  {
                    v159 = v158;
                    v160 = v157;
                    v161 = *((_DWORD *)v157 + 8);
                    v162 = (uint64_t **)(v157 + 1);
                    if (v161 >= v150)
                    {
                      v162 = (uint64_t **)v160;
                      v158 = v160;
                    }
                    v157 = *v162;
                  }
                  while (v157);
                  if (v158 != (uint64_t *)&v363)
                  {
                    if (v161 >= v150)
                      v159 = v160;
                    if (*((_DWORD *)v159 + 8) <= v150)
                    {
                      sub_1C49C7D1C((uint64_t **)&v362, v158);
                      operator delete(v158);
                    }
                  }
                }
                LODWORD(v368) = v150;
                HIDWORD(v368) = v359 + v346;
                sub_1C485BA70(&v365, (unsigned int *)&v368, &v368);
                v163 = v363;
                for (k = &v363; ; v163 = *k)
                {
                  v165 = k;
                  if (!v163)
                    break;
                  while (1)
                  {
                    k = (uint64_t **)v163;
                    v166 = *((_DWORD *)v163 + 8);
                    if (v166 > v150)
                      break;
                    if (v166 >= v150)
                      goto LABEL_327;
                    v163 = k[1];
                    if (!v163)
                    {
                      v165 = k + 1;
                      goto LABEL_323;
                    }
                  }
                }
LABEL_323:
                v167 = operator new(0x30uLL);
                v167[8] = v150;
                *((_QWORD *)v167 + 5) = v358;
                *(_QWORD *)v167 = 0;
                *((_QWORD *)v167 + 1) = 0;
                *((_QWORD *)v167 + 2) = k;
                *v165 = (uint64_t *)v167;
                if (*v362)
                {
                  v362 = (uint64_t **)*v362;
                  v168 = *v165;
                }
                else
                {
                  v168 = (uint64_t *)v167;
                }
                sub_1C4768E74(v363, v168);
                ++v364;
LABEL_327:
                v169 = (unsigned __int16)v148[1];
                ++v148;
                v149 = v169 + v150;
              }
              while (v169);
              v170 = *(unsigned int *)(*(_QWORD *)(v347 + 8) + 24 * v146 + 16);
              v171 = (_WORD *)(*(_QWORD *)(v347 + 56) + ((v170 >> 3) & 0x1FFFFFFE));
              v172 = *v171 + (v170 & 0xF) * v146;
              v39 = v348;
              do
              {
                v173 = v172;
                if (v381)
                {
                  for (m = v380; m; m = (_QWORD *)*m)
                  {
                    v175 = *((_DWORD *)m + 7);
                    if (v175 <= v173)
                    {
                      if (v175 >= v173)
                        goto LABEL_342;
                      ++m;
                    }
                  }
                }
                else if ((_DWORD)v377)
                {
                  v176 = v376;
                  v177 = 4 * v377;
                  while (*v176 != v173)
                  {
                    ++v176;
                    v177 -= 4;
                    if (!v177)
                      goto LABEL_343;
                  }
                  if (v177)
                  {
LABEL_342:
                    LODWORD(v368) = v173;
                    sub_1C48302EC((uint64_t)v382, (unsigned int *)&v368);
                  }
                }
LABEL_343:
                v178 = (unsigned __int16)v171[1];
                ++v171;
                v172 = v178 + v173;
              }
              while (v178);
            }
            v179 = v349;
            if ((v358 & 0x200000000000) != 0)
              v180 = v349;
            else
              v180 = v359;
            if ((v358 & 0xC0000000000) == 0)
              v179 = v180;
            v181 = v350;
            if ((v358 & 0x80000000000) != 0)
              v181 = v359;
            v349 = v179;
            v350 = v181;
            if ((v83[4] & 0x1FFF) == 0x1FFF)
              v182 = 0;
            else
              v182 = v83[4] & 0x1FFF;
            if ((v369 & 1) == 0)
              MEMORY[0x1CAA32FB4](v370, 4);
            sub_1C47655E8((uint64_t)&v374, v375[0]);
            if (v372[0] != v373)
              free(v372[0]);
            sub_1C47655E8((uint64_t)&v379, v380);
            if (v376 != v378)
              free(v376);
            sub_1C47655E8((uint64_t)&v384, v385[0]);
            if (v382[0] != v383)
              free(v382[0]);
            v359 += v182;
          }
          else
          {
            sub_1C47655E8((uint64_t)&v365, v366);
            v366 = 0;
            v367 = 0;
            v365 = (uint64_t *)&v366;
            sub_1C6143384(v363);
            v363 = 0;
            v364 = 0;
            ++v359;
            v362 = &v363;
          }
          v183 = *(unsigned __int16 **)(v61 + 16);
          v184 = *v183;
          if (v184 == 6504)
          {
            ++a1[14].i32[0];
            v351 = 1;
          }
          v185 = sub_1C4C2FD5C(v184);
          v186 = *(_DWORD **)(v61 + 32);
          v187 = *(_QWORD *)&v186[8 * v185 + 4] & 0x40;
          if (v187)
            v188 = v39;
          else
            v188 = 0;
          v189 = sub_1C4C915C4(v184);
          if ((v189 & 0xFF00000000) != 0 && v189 == 19)
          {
            v191 = v358;
            if ((*v186 & 0x10000FF) == 0x1000000)
              ++a1[20].i32[1];
          }
          else
          {
            v191 = v358;
            if ((v189 & 0xFF00000000) == 0)
              goto LABEL_379;
          }
          if ((v189 - 51) <= 0x18 && ((1 << (v189 - 51)) & 0x1F80007) != 0)
            ++a1[15].i32[0];
LABEL_379:
          v192 = *(_WORD *)(v61 + 44);
          v193 = *((_QWORD *)v183 + 1);
          if ((v192 & 0xC) == 0 || (v192 & 4) != 0)
          {
            if ((v193 & 0x400) == 0)
              goto LABEL_387;
LABEL_386:
            ++a1[14].i32[1];
            goto LABEL_387;
          }
          v194 = v61;
          if ((v193 & 0x400) != 0)
            goto LABEL_386;
          while ((*(_WORD *)(v194 + 44) & 8) != 0)
          {
            v194 = *(_QWORD *)(v194 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v194 + 16) + 9) & 4) != 0)
              goto LABEL_386;
          }
LABEL_387:
          if ((v191 & 2) != 0)
            ++a1[15].i32[1];
          if ((v191 & 0x4000000) != 0)
            ++a1[16].i32[0];
          if ((v191 & 0x2001C00) == 0x2000800)
          {
            ++a1[21].i32[1];
          }
          else if ((v191 & 0x2001C00) == 0x2000400)
          {
            ++a1[21].i32[0];
          }
          v195 = v191 & 0x1D00;
          if (v195 == 1280)
            ++a1[16].i32[1];
          v196 = v191 & 0x1E00;
          if (v196 == 1536)
            ++a1[17].i32[0];
          if (v195 == 2304)
            ++a1[17].i32[1];
          if (v196 == 2560)
            ++a1[18].i32[0];
          if (v195 == 3328)
            ++a1[18].i32[1];
          if (v196 == 3584)
            ++a1[19].i32[0];
          if (v195 == 5376)
            ++a1[19].i32[1];
          if (v196 == 5632)
            ++a1[20].i32[0];
          if ((v191 & 0x8000000) != 0)
            ++a1[22].i32[0];
          v353 += v188;
          v38 = v352 + (v187 >> 6);
          ++a1[1].i32[0];
          v197 = v365;
          while (v197 != (uint64_t *)&v366)
          {
            v198 = v197;
            v199 = (uint64_t *)v197[1];
            v200 = v197;
            if (v199)
            {
              do
              {
                v197 = v199;
                v199 = (uint64_t *)*v199;
              }
              while (v199);
            }
            else
            {
              do
              {
                v197 = (uint64_t *)v200[2];
                v35 = *v197 == (_QWORD)v200;
                v200 = v197;
              }
              while (!v35);
            }
            if (*((_DWORD *)v198 + 8) + 1 <= v359)
            {
              v201 = *((_DWORD *)v198 + 7);
              v202 = v366;
              if (v366)
              {
                v203 = (uint64_t *)&v366;
                do
                {
                  v204 = v203;
                  v205 = v202;
                  v206 = *((_DWORD *)v202 + 7);
                  v207 = v202 + 1;
                  if (v206 >= v201)
                  {
                    v207 = v205;
                    v203 = v205;
                  }
                  v202 = (_QWORD *)*v207;
                }
                while (v202);
                if (v203 != (uint64_t *)&v366)
                {
                  if (v206 >= v201)
                    v204 = v205;
                  if (*((_DWORD *)v204 + 7) <= v201)
                  {
                    sub_1C485B670(&v365, v203);
                    operator delete(v203);
                  }
                }
              }
              v208 = v363;
              if (v363)
              {
                v209 = (uint64_t *)&v363;
                do
                {
                  v210 = v209;
                  v211 = v208;
                  v212 = *((_DWORD *)v208 + 8);
                  v213 = (uint64_t **)(v208 + 1);
                  if (v212 >= v201)
                  {
                    v213 = (uint64_t **)v211;
                    v209 = v211;
                  }
                  v208 = *v213;
                }
                while (v208);
                if (v209 != (uint64_t *)&v363)
                {
                  if (v212 >= v201)
                    v210 = v211;
                  if (*((_DWORD *)v210 + 8) <= v201)
                  {
                    sub_1C49C7D1C((uint64_t **)&v362, v209);
                    operator delete(v209);
                  }
                }
              }
            }
          }
LABEL_441:
          if ((*(_BYTE *)v61 & 4) == 0)
          {
            while ((*(_WORD *)(v61 + 44) & 8) != 0)
              v61 = *(_QWORD *)(v61 + 8);
          }
          v61 = *(_QWORD *)(v61 + 8);
          if (v61 == v354)
            goto LABEL_445;
          goto LABEL_103;
        }
      }
      if (v82 == 3)
      {
        v81 = 8;
        goto LABEL_153;
      }
      if (v82 != 15)
      {
        if (v82 != 14)
          goto LABEL_153;
LABEL_151:
        v81 = 2;
        goto LABEL_153;
      }
LABEL_150:
      v81 = 4;
      goto LABEL_153;
    }
LABEL_445:
    v37 = *(_QWORD *)(v345 + 8);
  }
  while (v37 != a2 + 320);
  if (v38)
    v39 = v353 / v38;
LABEL_449:
  a1[13].i32[1] = v39;
  v214 = sub_1C49C7A50(a2, 0, 1);
  v215 = HIDWORD(v214);
  v216 = a1[22].u32[1];
  if (v216 <= v214)
    v216 = v214;
  a1[22].i32[1] = v216;
  if (a1[45].i32[0] > HIDWORD(v214))
    LODWORD(v215) = a1[45].i32[0];
  a1[45].i32[0] = v215;
  if (((*(unsigned __int16 *)(*(_QWORD *)a2 + 18) >> 4) & 0x3FFu) - 100 <= 8)
  {
    v217 = *(_QWORD *)(a2 + 344);
    v218 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v217 + 336))(*(_QWORD *)(v342 + 344));
    v219 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v218 + 24))(v218, 4);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v217 + 128))(&v369, v217, 3);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v217 + 136))(v382, v217, 3);
    v220 = v369;
    v221 = v382[0];
    if (v369)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v369 + 16))(&v369, v369);
      v222 = v369;
    }
    else
    {
      v222 = 0;
    }
    (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v221 + 16))(&v369, v221);
    v223 = v369;
    v224 = 0;
    while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v222 + 24))(v222, v223) & 1) == 0)
    {
      v250 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v222 + 32))(v222);
      v251 = *v250;
      v252 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v217 + 400))(v217, *v250);
      sub_1C4768AD0(a4, *(_QWORD *)(v251 + 24));
      v255 = v254;
      if ((_DWORD)v253 == 1)
      if ((v219 - 1 + ((unint64_t)(v255 + 7) >> 3)) / v219 + v252 > v224)
        v224 = (v219 - 1 + ((unint64_t)(v255 + 7) >> 3)) / v219 + v252;
      (*(void (**)(uint64_t))(*(_QWORD *)v222 + 40))(v222);
    }
    if (v223)
      (*(void (**)(uint64_t))(*(_QWORD *)v223 + 8))(v223);
    (*(void (**)(uint64_t))(*(_QWORD *)v222 + 8))(v222);
    (*(void (**)(void *))(*(_QWORD *)v221 + 8))(v221);
    if (v220)
      (*(void (**)(uint64_t))(*(_QWORD *)v220 + 8))(v220);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v217 + 128))(&v369, v217, 5);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v217 + 136))(v382, v217, 5);
    v225 = v369;
    v226 = v382[0];
    if (v369)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v369 + 16))(&v369, v369);
      v227 = v369;
    }
    else
    {
      v227 = 0;
    }
    (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v226 + 16))(&v369, v226);
    v228 = v369;
    while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v227 + 24))(v227, v228) & 1) == 0)
    {
      v256 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v227 + 32))(v227);
      v257 = *v256;
      if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v217 + 184))(v217, 15, *v256) & 1) == 0)
      {
        v258 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v217 + 400))(v217, v257);
        sub_1C4768AD0(a4, *(_QWORD *)(v257 + 24));
        v261 = v260;
        if ((_DWORD)v259 == 1)
        if ((v219 - 1 + ((unint64_t)(v261 + 7) >> 3)) / v219 + v258 > v224)
          v224 = (v219 - 1 + ((unint64_t)(v261 + 7) >> 3)) / v219 + v258;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v227 + 40))(v227);
    }
    if (v228)
      (*(void (**)(uint64_t))(*(_QWORD *)v228 + 8))(v228);
    (*(void (**)(uint64_t))(*(_QWORD *)v227 + 8))(v227);
    (*(void (**)(void *))(*(_QWORD *)v226 + 8))(v226);
    if (v225)
      (*(void (**)(uint64_t))(*(_QWORD *)v225 + 8))(v225);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v217 + 128))(&v369, v217, 4);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v217 + 136))(v382, v217, 4);
    v229 = v369;
    v230 = v382[0];
    if (v369)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v369 + 16))(&v369, v369);
      v231 = v369;
    }
    else
    {
      v231 = 0;
    }
    (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v230 + 16))(&v369, v230);
    v232 = v369;
    while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v231 + 24))(v231, v232) & 1) == 0)
    {
      v262 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v231 + 32))(v231);
      v263 = *v262;
      v264 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v217 + 400))(v217, *v262);
      sub_1C4768AD0(a4, *(_QWORD *)(v263 + 24));
      v267 = v266;
      if ((_DWORD)v265 == 1)
      if ((v219 - 1 + ((unint64_t)(v267 + 7) >> 3)) / v219 + v264 > v224)
        v224 = (v219 - 1 + ((unint64_t)(v267 + 7) >> 3)) / v219 + v264;
      (*(void (**)(uint64_t))(*(_QWORD *)v231 + 40))(v231);
    }
    if (v232)
      (*(void (**)(uint64_t))(*(_QWORD *)v232 + 8))(v232);
    (*(void (**)(uint64_t))(*(_QWORD *)v231 + 8))(v231);
    (*(void (**)(void *))(*(_QWORD *)v230 + 8))(v230);
    if (v229)
      (*(void (**)(uint64_t))(*(_QWORD *)v229 + 8))(v229);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v217 + 128))(&v369, v217, 6);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v217 + 136))(v382, v217, 6);
    v233 = v369;
    v234 = v382[0];
    if (v369)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v369 + 16))(&v369, v369);
      v235 = v369;
    }
    else
    {
      v235 = 0;
    }
    (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v234 + 16))(&v369, v234);
    v236 = v369;
    while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v235 + 24))(v235, v236) & 1) == 0)
    {
      v268 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v235 + 32))(v235);
      v269 = *v268;
      v270 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v217 + 400))(v217, *v268);
      sub_1C4768AD0(a4, *(_QWORD *)(v269 + 24));
      v273 = v272;
      if ((_DWORD)v271 == 1)
      if ((v219 - 1 + ((unint64_t)(v273 + 7) >> 3)) / v219 + v270 > v224)
        v224 = (v219 - 1 + ((unint64_t)(v273 + 7) >> 3)) / v219 + v270;
      (*(void (**)(uint64_t))(*(_QWORD *)v235 + 40))(v235);
    }
    if (v236)
      (*(void (**)(uint64_t))(*(_QWORD *)v236 + 8))(v236);
    (*(void (**)(uint64_t))(*(_QWORD *)v235 + 8))(v235);
    (*(void (**)(void *))(*(_QWORD *)v234 + 8))(v234);
    if (v233)
      (*(void (**)(uint64_t))(*(_QWORD *)v233 + 8))(v233);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v217 + 128))(&v369, v217, 7);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v217 + 136))(v382, v217, 7);
    v237 = v369;
    v238 = v382[0];
    if (v369)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v369 + 16))(&v369, v369);
      v239 = v369;
    }
    else
    {
      v239 = 0;
    }
    (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v238 + 16))(&v369, v238);
    v240 = v369;
    while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v239 + 24))(v239, v240) & 1) == 0)
    {
      v274 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v239 + 32))(v239);
      v275 = *v274;
      v276 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v217 + 400))(v217, *v274);
      sub_1C4768AD0(a4, *(_QWORD *)(v275 + 24));
      v279 = v278;
      if ((_DWORD)v277 == 1)
      if ((v219 - 1 + ((unint64_t)(v279 + 7) >> 3)) / v219 + v276 > v224)
        v224 = (v219 - 1 + ((unint64_t)(v279 + 7) >> 3)) / v219 + v276;
      (*(void (**)(uint64_t))(*(_QWORD *)v239 + 40))(v239);
    }
    if (v240)
      (*(void (**)(uint64_t))(*(_QWORD *)v240 + 8))(v240);
    (*(void (**)(uint64_t))(*(_QWORD *)v239 + 8))(v239);
    (*(void (**)(void *))(*(_QWORD *)v238 + 8))(v238);
    v241 = v355;
    if (v237)
      (*(void (**)(uint64_t))(*(_QWORD *)v237 + 8))(v237);
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v217 + 312))(v217))
    {
      v242 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v217 + 392))(v217);
      if (v224 <= v242)
        v224 = v242;
    }
    v355[23].i32[0] = v224;
    v243 = *(_QWORD *)(v342 + 344);
    v244 = sub_1C5EAC85C(v243, 9, 0);
    v245 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v243 + 176))(v243, 20);
    if (v245)
    {
      if (v245 == 1)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v243 + 128))(&v369, v243, 20);
        v326 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v369 + 32))(v369);
        v327 = v369;
        v369 = 0;
        if (v327)
          (*(void (**)(uint64_t))(*(_QWORD *)v327 + 8))(v327);
        if (!v326)
          goto LABEL_493;
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v243 + 128))(&v369, v243, 20);
        v326 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v369 + 32))(v369);
        v338 = v369;
        v369 = 0;
        if (v338)
          (*(void (**)(uint64_t))(*(_QWORD *)v338 + 8))(v338);
        v241 = v355;
        if (!v326)
          goto LABEL_493;
      }
      v328 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v243 + 400))(v243, v326);
      if (v244 <= v328 + 1)
        v244 = (v328 + 1);
      else
        v244 = v244;
    }
LABEL_493:
    v246 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v243 + 176))(v243, 21);
    if (v246)
    {
      if (v246 == 1)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v243 + 128))(&v369, v243, 21);
        v329 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v369 + 32))(v369);
        v330 = v369;
        v369 = 0;
        if (v330)
          (*(void (**)(uint64_t))(*(_QWORD *)v330 + 8))(v330);
        if (!v329)
          goto LABEL_494;
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v243 + 128))(&v369, v243, 21);
        v329 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v369 + 32))(v369);
        v339 = v369;
        v369 = 0;
        if (v339)
          (*(void (**)(uint64_t))(*(_QWORD *)v339 + 8))(v339);
        v241 = v355;
        if (!v329)
          goto LABEL_494;
      }
      v331 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v243 + 400))(v243, v329);
      if (v244 <= v331 + 1)
        v244 = (v331 + 1);
      else
        v244 = v244;
    }
LABEL_494:
    v247 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v243 + 176))(v243, 22);
    if (v247)
    {
      if (v247 == 1)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v243 + 128))(&v369, v243, 22);
        v332 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v369 + 32))(v369);
        v333 = v369;
        v369 = 0;
        if (v333)
          (*(void (**)(uint64_t))(*(_QWORD *)v333 + 8))(v333);
        if (!v332)
          goto LABEL_495;
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v243 + 128))(&v369, v243, 22);
        v332 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v369 + 32))(v369);
        v340 = v369;
        v369 = 0;
        if (v340)
          (*(void (**)(uint64_t))(*(_QWORD *)v340 + 8))(v340);
        v241 = v355;
        if (!v332)
          goto LABEL_495;
      }
      v334 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v243 + 400))(v243, v332);
      if (v244 <= v334 + 1)
        v244 = (v334 + 1);
      else
        v244 = v244;
    }
LABEL_495:
    v248 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v243 + 176))(v243, 23);
    if (v248)
    {
      if (v248 == 1)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v243 + 128))(&v369, v243, 23);
        v335 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v369 + 32))(v369);
        v336 = v369;
        v369 = 0;
        if (v336)
          (*(void (**)(uint64_t))(*(_QWORD *)v336 + 8))(v336);
        if (!v335)
          goto LABEL_496;
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v243 + 128))(&v369, v243, 23);
        v335 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v369 + 32))(v369);
        v341 = v369;
        v369 = 0;
        if (v341)
          (*(void (**)(uint64_t))(*(_QWORD *)v341 + 8))(v341);
        v241 = v355;
        if (!v335)
          goto LABEL_496;
      }
      v337 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v243 + 400))(v243, v335);
      if (v244 <= v337 + 1)
        v244 = (v337 + 1);
      else
        v244 = v244;
    }
LABEL_496:
    v249 = sub_1C5EAC85C(v243, 13, v244);
    v241[23].i32[1] = sub_1C5EAC85C(v243, 12, v249);
  }
  sub_1C6143384(v363);
  sub_1C47655E8((uint64_t)&v365, v366);
  if (v399 != v401)
    free(v399);
}

uint64_t sub_1C49C570C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_1C49C5714(uint64_t a1)
{
  return *(unsigned int *)(a1 + 124);
}

uint64_t sub_1C49C571C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 132);
}

uint64_t sub_1C49C5724(uint64_t a1)
{
  return *(unsigned int *)(a1 + 136);
}

uint64_t sub_1C49C572C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 132);
}

uint64_t sub_1C49C5734(uint64_t a1)
{
  return *(unsigned int *)(a1 + 136);
}

uint64_t sub_1C49C573C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 116);
}

uint64_t sub_1C49C5744(uint64_t a1)
{
  return *(unsigned int *)(a1 + 120);
}

uint64_t sub_1C49C574C(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t NamedMetadata;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  const char **v16;
  void (**v17)(const char **);
  unsigned int v18;
  int v19;
  const char **v20;
  void (**v21)(const char **);
  unsigned int v22;
  unsigned int v23;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void *v28;
  uint64_t v29;
  _BYTE v30[80];
  const char *v31;
  char *v32;
  uint64_t v33;
  const char **v34;
  _WORD v35[64];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *(_QWORD *)(*a2 + 40);
  v31 = "tpp_functions";
  v35[0] = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(v4, (uint64_t)&v31);
  if (NamedMetadata && (v6 = *(uint64_t **)(NamedMetadata + 48), v7 = *((unsigned int *)v6 + 2), (_DWORD)v7))
  {
    v8 = *v6;
    while (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 - 8 * *(unsigned int *)(*(_QWORD *)v8 + 8)) + 128) != v3)
    {
      v8 += 8;
      if (!--v7)
        goto LABEL_6;
    }
    v31 = (const char *)v35;
    v32 = (char *)v35;
    v33 = 16;
    LODWORD(v34) = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v31, a2[41]);
    v25 = *(_QWORD *)(*(_QWORD *)(a2[41] + 88) + 8 * (**(_QWORD **)(a2[41] + 88) == *(_QWORD *)(a2[41] + 8)));
    v28 = v30;
    v29 = 0xA00000000;
    sub_1C4848C0C((unsigned int *)&v28, 1uLL, v25);
    while ((_DWORD)v29)
    {
      v26 = *((_QWORD *)v28 + v29 - 1);
      LODWORD(v29) = v29 - 1;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v31, v26);
      if (v27)
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v31, v26);
        sub_1C485BB4C((unsigned int *)&v28, *(char **)(v26 + 88), *(char **)(v26 + 96));
      }
    }
    v9 = sub_1C49C7A50((uint64_t)a2, &v31, 0);
    if (v28 != v30)
      free(v28);
    if (v32 != v31)
      free(v32);
  }
  else
  {
LABEL_6:
    v9 = sub_1C49C7A50((uint64_t)a2, 0, 0);
  }
  v10 = *(_QWORD *)(v3 + 40);
  sub_1C5EAE59C(v10, 1, (uint64_t)&v31);
  v11 = (char *)a2[2];
  if ((_BYTE)v32)
  {
    v12 = v31;
    sub_1C5EAE59C(v10, 0, (uint64_t)&v31);
    v13 = v31;
    if (!(_BYTE)v32)
      v13 = 0;
    if (v12 < v13)
      v13 = v12;
    if ((_BYTE)v32)
      v14 = v13;
    else
      v14 = v12;
    v31 = (const char *)&off_1E81316D0;
    v32 = v11;
    v34 = &v31;
    v15 = sub_1C4C0B384(&v31);
    v16 = v34;
    if (v34 == &v31)
    {
      v17 = (void (**)(const char **))(v31 + 32);
      v16 = &v31;
    }
    else
    {
      if (!v34)
        goto LABEL_18;
      v17 = (void (**)(const char **))(*v34 + 40);
    }
    (*v17)(v16);
LABEL_18:
    v18 = dword_1C661304C[v15];
    if (v18 >= v14)
      v18 = v14;
    if (v18 > v9)
      v9 = v18;
  }
  v31 = (const char *)&off_1E81316D0;
  v32 = v11;
  v34 = &v31;
  v19 = sub_1C4C0B384(&v31);
  v20 = v34;
  if (v34 == &v31)
  {
    v21 = (void (**)(const char **))(v31 + 32);
    v20 = &v31;
LABEL_24:
    (*v21)(v20);
    goto LABEL_25;
  }
  if (v34)
  {
    v21 = (void (**)(const char **))(*v34 + 40);
    goto LABEL_24;
  }
LABEL_25:
  v22 = dword_1C661304C[v19];
  if (v9 <= 1)
    v23 = 1;
  else
    v23 = v9;
  if (v22 >= v23)
    return v23;
  else
    return v22;
}

uint64_t sub_1C49C5A30(uint64_t a1)
{
  return *(unsigned int *)(a1 + 212);
}

uint64_t sub_1C49C5A38(uint64_t a1)
{
  return *(unsigned int *)(a1 + 216);
}

uint64_t sub_1C49C5A40(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t NamedMetadata;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  int v11;
  const char **v12;
  void (**v13)(const char **);
  unsigned int v14;
  unsigned int v15;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  _BYTE v22[80];
  const char *v23;
  char *v24;
  uint64_t v25;
  const char **v26;
  _WORD v27[64];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *(_QWORD *)(*a2 + 40);
  v23 = "tpp_functions";
  v27[0] = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(v4, (uint64_t)&v23);
  if (NamedMetadata && (v6 = *(uint64_t **)(NamedMetadata + 48), v7 = *((unsigned int *)v6 + 2), (_DWORD)v7))
  {
    v8 = *v6;
    while (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 - 8 * *(unsigned int *)(*(_QWORD *)v8 + 8)) + 128) != v3)
    {
      v8 += 8;
      if (!--v7)
        goto LABEL_6;
    }
    v23 = (const char *)v27;
    v24 = (char *)v27;
    v25 = 16;
    LODWORD(v26) = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v23, a2[41]);
    v17 = *(_QWORD *)(a2[41] + 8);
    v20 = v22;
    v21 = 0xA00000000;
    sub_1C4848C0C((unsigned int *)&v20, 1uLL, v17);
    while ((_DWORD)v21)
    {
      v18 = *((_QWORD *)v20 + v21 - 1);
      LODWORD(v21) = v21 - 1;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v23, v18);
      if (v19)
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v23, v18);
        sub_1C485BB4C((unsigned int *)&v20, *(char **)(v18 + 88), *(char **)(v18 + 96));
      }
    }
    v9 = sub_1C49C7A50((uint64_t)a2, &v23, 0);
    if (v20 != v22)
      free(v20);
    if (v24 != v23)
      free(v24);
  }
  else
  {
LABEL_6:
    v9 = 0;
  }
  v10 = (char *)a2[2];
  v23 = (const char *)&off_1E81316D0;
  v24 = v10;
  v26 = &v23;
  v11 = sub_1C4C0B384(&v23);
  v12 = v26;
  if (v26 == &v23)
  {
    v13 = (void (**)(const char **))(v23 + 32);
    v12 = &v23;
LABEL_9:
    (*v13)(v12);
    goto LABEL_10;
  }
  if (v26)
  {
    v13 = (void (**)(const char **))(*v26 + 40);
    goto LABEL_9;
  }
LABEL_10:
  v14 = dword_1C661304C[v11];
  if (v9 <= 1)
    v15 = 1;
  else
    v15 = v9;
  if (v14 >= v15)
    return v15;
  else
    return v14;
}

uint64_t sub_1C49C5C4C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 192);
}

uint64_t sub_1C49C5C54(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_1C49C5C5C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 328);
}

uint64_t sub_1C49C5C64(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_1C49C5C6C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_1C49C5C74(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C49C5C7C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_1C49C5C84(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_1C49C5C8C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_1C49C5C94(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_1C49C5C9C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_1C49C5CA4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_1C49C5CAC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 180);
}

uint64_t sub_1C49C5CB4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 184);
}

uint64_t sub_1C49C5CBC()
{
  return 0;
}

uint64_t sub_1C49C5CC4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t sub_1C49C5CCC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 172);
}

uint64_t sub_1C49C5CD4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 168);
}

uint64_t sub_1C49C5CDC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 140);
}

uint64_t sub_1C49C5CE4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 132);
}

uint64_t sub_1C49C5CEC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 144);
}

uint64_t sub_1C49C5CF4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 136);
}

uint64_t sub_1C49C5CFC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 124);
}

uint64_t sub_1C49C5D04(uint64_t a1)
{
  return *(unsigned int *)(a1 + 176);
}

uint64_t sub_1C49C5D0C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 112);
}

uint64_t sub_1C49C5D14(uint64_t a1)
{
  return *(unsigned int *)(a1 + 68);
}

uint64_t sub_1C49C5D1C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t sub_1C49C5D24(uint64_t a1)
{
  return *(unsigned int *)(a1 + 76);
}

uint64_t sub_1C49C5D2C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 80);
}

uint64_t sub_1C49C5D34()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1C49C5D3C()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1C49C5D44(uint64_t a1)
{
  return *(unsigned int *)(a1 + 164);
}

uint64_t sub_1C49C5D4C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 60);
}

uint64_t sub_1C49C5D54(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_1C49C5D5C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t sub_1C49C5D64(uint64_t a1)
{
  return *(unsigned int *)(a1 + 84);
}

uint64_t sub_1C49C5D6C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t sub_1C49C5D74(uint64_t a1)
{
  return *(unsigned int *)(a1 + 92);
}

uint64_t sub_1C49C5D7C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

uint64_t sub_1C49C5D84(uint64_t a1)
{
  return *(unsigned int *)(a1 + 100);
}

uint64_t sub_1C49C5D8C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t sub_1C49C5D94(uint64_t a1)
{
  return *(unsigned int *)(a1 + 108);
}

uint64_t sub_1C49C5D9C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 128);
}

uint64_t sub_1C49C5DA4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 188);
}

uint64_t sub_1C49C5DAC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 360);
}

uint64_t sub_1C49C5DB4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 196);
}

uint64_t sub_1C49C5DBC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 204);
}

uint64_t sub_1C49C5DC4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 200);
}

uint64_t sub_1C49C5DCC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 224);
}

double sub_1C49C5DD4(uint64_t a1)
{
  return *(double *)(a1 + 232);
}

double sub_1C49C5DDC(uint64_t a1)
{
  return *(double *)(a1 + 256);
}

double sub_1C49C5DE4(uint64_t a1)
{
  return *(double *)(a1 + 240);
}

double sub_1C49C5DEC(uint64_t a1)
{
  return *(double *)(a1 + 264);
}

uint64_t sub_1C49C5DF4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 272);
}

uint64_t sub_1C49C5DFC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 280);
}

uint64_t sub_1C49C5E04(uint64_t a1)
{
  return *(_QWORD *)(a1 + 288);
}

uint64_t sub_1C49C5E0C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 296);
}

uint64_t sub_1C49C5E14(uint64_t a1)
{
  return *(_QWORD *)(a1 + 304);
}

uint64_t sub_1C49C5E1C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 312);
}

uint64_t sub_1C49C5E24(uint64_t a1)
{
  return *(unsigned int *)(a1 + 332);
}

uint64_t sub_1C49C5E2C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 336);
}

uint64_t sub_1C49C5E34(uint64_t a1)
{
  return *(unsigned int *)(a1 + 352);
}

uint64_t sub_1C49C5E3C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 316);
}

uint64_t sub_1C49C5E44(uint64_t a1)
{
  return *(unsigned int *)(a1 + 320);
}

uint64_t sub_1C49C5E4C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 324);
}

uint64_t sub_1C49C5E54(uint64_t a1)
{
  return *(_QWORD *)(a1 + 344);
}

uint64_t sub_1C49C5E5C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 356);
}

void sub_1C49C5E64(_DWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  void *__p[4];
  void **v54;

  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  v4 = a1[2];
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "TotalInstructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v4;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v5 = a1[3];
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C6A0;
  strcpy((char *)__p[0], "NumFullRateInstructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v5;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v6 = a1[4];
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C6A0;
  strcpy((char *)__p[0], "NumHalfRateInstructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v6;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v7 = a1[5];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C690;
  strcpy((char *)__p[0], "NumThirdRateInstructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v7;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v8 = a1[6];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1C64638E0;
  strcpy((char *)__p[0], "NumQuarterRateInstructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v8;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v9 = a1[7];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C690;
  strcpy((char *)__p[0], "NumFifthRateInstructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v9;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v10 = a1[8];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C690;
  strcpy((char *)__p[0], "NumSixthRateInstructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v10;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v11 = a1[9];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C680;
  strcpy((char *)__p[0], "NumEighthRateInstructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v11;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v12 = a1[10];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1C64638E0;
  strcpy((char *)__p[0], "NumTwelfthRateInstructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v12;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v13 = a1[11];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1C6613080;
  strcpy((char *)__p[0], "NumSixteenthRateInstructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v13;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v14 = a1[12];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1C6613090;
  strcpy((char *)__p[0], "NumThirtySecondRateInstructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v14;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v15 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 216))(a1);
  strcpy((char *)__p, "RateScaledInstructions");
  HIBYTE(__p[2]) = 22;
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v15;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v16 = a1[13];
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "DataInstructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v16;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v17 = a1[14];
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "MoveInstructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v17;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v18 = a1[15];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "ImmInstructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v18;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v19 = a1[16];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "ALUInstructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v19;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v20 = a1[17];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "F16Instructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v20;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v21 = a1[18];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "F32Instructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v21;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v22 = a1[19];
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "Int16Instructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v22;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v23 = a1[20];
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "Int32Instructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v23;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v24 = a1[21];
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "UniformReadBytes");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v24;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v25 = a1[22];
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "TotalStallCycles");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v25;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v26 = a1[23];
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "F16StallCycles");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v26;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v27 = a1[24];
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "F32StallCycles");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v27;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v28 = a1[25];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C690;
  strcpy((char *)__p[0], "AfterPixwaitInstructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v28;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v29 = a1[26];
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C6A0;
  strcpy((char *)__p[0], "AfterDis2x2Instructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v29;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v30 = a1[27];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "AvgDis2x2InstID");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v30;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v31 = a1[28];
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "PixwaitInstructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v31;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v32 = a1[29];
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "BranchInstructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v32;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v33 = a1[31];
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "SampleInstructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v33;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v34 = a1[44];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C690;
  strcpy((char *)__p[0], "TextureWriteInstructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v34;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v35 = a1[32];
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "LoadCoefInstructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v35;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v36 = a1[33];
  strcpy((char *)__p, "GlobalLoadInstructions");
  HIBYTE(__p[2]) = 22;
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v36;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v37 = a1[34];
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C6A0;
  strcpy((char *)__p[0], "GlobalStoreInstructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v37;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v38 = a1[35];
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "LocalLoadInstructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v38;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v39 = a1[36];
  strcpy((char *)__p, "LocalStoreInstructions");
  HIBYTE(__p[2]) = 22;
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v39;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v40 = a1[37];
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "StackLoadInstructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v40;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v41 = a1[38];
  strcpy((char *)__p, "StackStoreInstructions");
  HIBYTE(__p[2]) = 22;
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v41;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v42 = a1[39];
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C6A0;
  strcpy((char *)__p[0], "GenericLoadInstructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v42;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v43 = a1[40];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C690;
  strcpy((char *)__p[0], "GenericStoreInstructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v43;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v44 = a1[42];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C690;
  strcpy((char *)__p[0], "DeviceAtomicInstructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v44;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v45 = a1[43];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C6B0;
  strcpy((char *)__p[0], "ThreadgroupAtomicInstructions");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v45;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v46 = a1[53];
  HIBYTE(__p[2]) = 8;
  strcpy((char *)__p, "NumLoops");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v46;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v47 = a1[54];
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "TotalLoopInsts");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v47;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v48 = a1[45];
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "MaxTempRegisterUsed");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v48;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v49 = a1[47];
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "MaxCoeffRegisterUsed");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v49;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v50 = a1[46];
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "MaxUniRegisterUsed");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v50;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v51 = a1[49];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "SpillBufferSize");
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v51;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v52 = a1[52];
  strcpy((char *)__p, "InvalidScheduleClasses");
  HIBYTE(__p[2]) = 22;
  v54 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v52;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

uint64_t sub_1C49C7154(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  int v6;

  v2 = a2 + 320;
  v3 = *(_QWORD *)(a2 + 328);
  if (v3 != a2 + 320)
  {
    v4 = result;
    do
    {
      for (i = *(_QWORD *)(v3 + 56); i != v3 + 48; i = *(_QWORD *)(i + 8))
      {
        if (**(unsigned __int16 **)(i + 16) - 6717 <= 5)
        {
          v6 = 35;
          switch(*(_DWORD *)(*(_QWORD *)(i + 32) + 68))
          {
            case 5:
              v6 = 29;
              break;
            case 6:
              v6 = 42;
              break;
            case 7:
              v6 = 71;
              break;
            case 8:
              v6 = 27;
              break;
            case 0xB:
              v6 = 53;
              break;
            case 0xC:
              v6 = 54;
              break;
            case 0xD:
              v6 = 78;
              break;
            case 0xF:
              v6 = 77;
              break;
            case 0x10:
              v6 = 63;
              break;
            case 0x11:
              v6 = 30;
              break;
            case 0x12:
              v6 = 3;
              break;
            case 0x13:
              v6 = 13;
              break;
            case 0x14:
              v6 = 12;
              break;
            case 0x15:
              v6 = 10;
              break;
            case 0x16:
              v6 = 11;
              break;
            case 0x17:
              v6 = 20;
              break;
            case 0x18:
              v6 = 17;
              break;
            case 0x19:
              v6 = 18;
              break;
            case 0x1A:
              v6 = 19;
              break;
            case 0x1B:
              v6 = 75;
              break;
            case 0x1C:
              v6 = 74;
              break;
            case 0x1D:
              v6 = 73;
              break;
            case 0x1E:
              v6 = 72;
              break;
            case 0x1F:
              v6 = 14;
              break;
            case 0x20:
              v6 = 65;
              break;
            case 0x22:
              v6 = 44;
              break;
            case 0x23:
              v6 = 23;
              break;
            case 0x24:
              v6 = 25;
              break;
            case 0x26:
              v6 = 69;
              break;
            case 0x27:
              v6 = 68;
              break;
            case 0x29:
              v6 = 79;
              break;
            case 0x2B:
              v6 = 21;
              break;
            case 0x2C:
              v6 = 22;
              break;
            case 0x2D:
              v6 = 28;
              break;
            case 0x2E:
              v6 = 66;
              break;
            case 0x2F:
              v6 = 67;
              break;
            case 0x30:
              v6 = 64;
              break;
            case 0x31:
              v6 = 7;
              break;
            case 0x32:
              v6 = 8;
              break;
            case 0x33:
              v6 = 9;
              break;
            case 0x34:
              v6 = 0;
              break;
            case 0x35:
              v6 = 4;
              break;
            case 0x36:
              v6 = 1;
              break;
            case 0x37:
              v6 = 5;
              break;
            case 0x38:
              v6 = 2;
              break;
            case 0x39:
              v6 = 6;
              break;
            case 0x3A:
              v6 = 70;
              break;
            case 0x3B:
              break;
            case 0x3C:
              v6 = 36;
              break;
            case 0x3D:
              v6 = 37;
              break;
            case 0x3F:
              v6 = 24;
              break;
            case 0x40:
              v6 = 26;
              break;
            case 0x41:
              v6 = 60;
              break;
            case 0x42:
              v6 = 59;
              break;
            case 0x43:
              v6 = 61;
              break;
            case 0x44:
              v6 = 62;
              break;
            case 0x45:
              v6 = 76;
              break;
            default:
              llvm::report_fatal_error((llvm *)"Special register not implemented yet for G15", (const char *)1);
          }
          result = sub_1C4C32BD0(v6);
          *(_QWORD *)(*(_QWORD *)(v4 + 368) + 8 * (result >> 6)) |= 1 << result;
        }
        if ((*(_BYTE *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            i = *(_QWORD *)(i + 8);
        }
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return result;
}

unsigned int *sub_1C49C7410@<X0>(unsigned int *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unint64_t i;

  v3 = a2 + 16;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x800000000;
  v4 = result[108];
  if ((_DWORD)v4)
  {
    v5 = result;
    v6 = 0;
    for (i = 0; i < v4; ++i)
    {
      if (((*(_QWORD *)(*((_QWORD *)v5 + 46) + 8 * (i >> 6)) >> i) & 1) != 0)
      {
        if (v6 >= *(_DWORD *)(a2 + 12))
        {
          result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v3, v6 + 1, 4);
          v6 = *(_DWORD *)(a2 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a2 + 4 * v6) = i;
        v6 = *(_DWORD *)(a2 + 8) + 1;
        *(_DWORD *)(a2 + 8) = v6;
        v4 = v5[108];
      }
    }
  }
  return result;
}

uint64_t sub_1C49C74C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  if (!v2)
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 8) + 216))(*(_QWORD *)(a2 + 8), a2 + 128, a2);
    *(_QWORD *)(a2 + 48) = v2;
  }
  return *(unsigned int *)(v2 + 488);
}

uint64_t sub_1C49C7514()
{
  return 0;
}

uint64_t sub_1C49C751C()
{
  return 0;
}

uint64_t sub_1C49C7524(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))
{
  unsigned int v5;
  unsigned int v6;
  uint64_t result;
  unsigned int v8;

  v5 = (**a3)(a3, 11, 0, 1, 4);
  v6 = *(_DWORD *)(a1 + 196);
  if (v6 <= v5)
    v6 = v5;
  *(_DWORD *)(a1 + 196) = v6;
  result = (**a3)(a3, 18, 0, 1, 4);
  v8 = *(_DWORD *)(a1 + 200);
  if (v8 <= result)
    v8 = result;
  *(_DWORD *)(a1 + 200) = v8;
  return result;
}

uint64_t sub_1C49C75A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  if (!v2)
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 8) + 216))(*(_QWORD *)(a2 + 8), a2 + 128, a2);
    *(_QWORD *)(a2 + 48) = v2;
  }
  return *(unsigned __int8 *)(v2 + 568);
}

const char *sub_1C49C75F0()
{
  return "AGX3 Assembly Printer";
}

BOOL sub_1C49C7600(unsigned __int8 *a1, unsigned __int8 *a2)
{
  signed __int8 v2;
  uint64_t v3;
  signed __int8 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v13;
  BOOL v14;
  _BOOL8 v15;

  v2 = a1[23];
  if (v2 >= 0)
    v3 = v2 & 0x7F;
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = v4;
  v6 = v4 & 0x7F;
  if (v5 < 0)
    v6 = *((_QWORD *)a2 + 1);
  if (v3 != v6)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((a1[23] & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if ((v2 & 0x7F) == 0)
    return 1;
  v7 = (v2 & 0x7F) - 1;
  do
  {
    v9 = *a1++;
    v8 = v9;
    v11 = *a2++;
    v10 = v11;
    v13 = v7-- != 0;
    v14 = v8 == v10;
    v15 = v8 == v10;
  }
  while (v14 && v13);
  return v15;
}

void sub_1C49C76AC()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C49C76C0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7FA8C70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C49C76F8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA8C70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C49C7718(uint64_t result, int *a2, uint64_t a3, int *a4)
{
  int v4;
  int v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v9;

  v4 = *a2;
  v5 = *a4;
  v6 = *(unsigned int **)(result + 16);
  v7 = *v6;
  *v6 += *a4;
  if (v4 == 1 && v5 != 0)
  {
    v9 = **(_QWORD **)(result + 8);
    do
    {
      *(_QWORD *)(v9 + 8 * (v7 >> 6)) |= 1 << v7;
      ++v7;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1C49C776C(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16));
}

void sub_1C49C77A0(uint64_t a1, const void **a2, uint64_t a3)
{
  std::string *v6;
  const std::string::value_type *v7;
  std::string *v8;
  std::string::size_type v9;
  char v10;
  BOOL v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  char v19;
  int v20;
  size_t v21;
  size_t v22;
  std::string *v23;
  const void *v24;
  char v25;
  BOOL v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  char *v33;
  int v34;
  std::string::size_type *p_size;
  const std::string::value_type *v36;
  std::string::size_type v37;
  std::string::size_type v38;
  std::string v39;
  std::string v40;
  std::string v41;
  __int128 v42;
  std::string::size_type v43;

  if (!**(_BYTE **)a1)
  {
    v6 = *(std::string **)(a1 + 8);
    if (**(_BYTE **)(a1 + 16))
      v7 = ", ";
    else
      v7 = " ";
    std::string::append(v6, v7);
  }
  std::operator+<char>();
  v8 = std::string::append(&v39, "\",\"");
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = *(_BYTE *)(a3 + 23);
  v11 = v10 < 0;
  if (v10 >= 0)
    v12 = (const std::string::value_type *)a3;
  else
    v12 = *(const std::string::value_type **)a3;
  v13 = v10 & 0x7F;
  if (v11)
    v14 = *(_QWORD *)(a3 + 8);
  else
    v14 = v13;
  v15 = std::string::append(&v40, v12, v14);
  v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = std::string::append(&v41, "\"]");
  v18 = v17->__r_.__value_.__r.__words[2];
  v42 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v43 = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  v19 = *((_BYTE *)a2 + 23);
  v20 = v19;
  v21 = v19 & 0x7F;
  if (v20 >= 0)
    v22 = v21;
  else
    v22 = (size_t)a2[1];
  v23 = &v40;
  sub_1C484371C((uint64_t)&v40, v22 + 1);
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v23 = (std::string *)v40.__r_.__value_.__r.__words[0];
  if (v22)
  {
    if (*((char *)a2 + 23) >= 0)
      v24 = a2;
    else
      v24 = *a2;
    memmove(v23, v24, v22);
  }
  *(_WORD *)((char *)&v23->__r_.__value_.__l.__data_ + v22) = 44;
  v25 = *(_BYTE *)(a3 + 23);
  v26 = v25 < 0;
  if (v25 >= 0)
    v27 = (const std::string::value_type *)a3;
  else
    v27 = *(const std::string::value_type **)a3;
  v28 = v25 & 0x7F;
  if (v26)
    v29 = *(_QWORD *)(a3 + 8);
  else
    v29 = v28;
  v30 = std::string::append(&v40, v27, v29);
  v31 = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (**(_BYTE **)(a1 + 16))
    v32 = (std::string *)&v42;
  else
    v32 = &v41;
  v33 = (char *)&v41.__r_.__value_.__r.__words[2] + 7;
  if (**(_BYTE **)(a1 + 16))
    v33 = (char *)&v43 + 7;
  v34 = *v33;
  p_size = (std::string::size_type *)&v42 + 1;
  if (!**(_BYTE **)(a1 + 16))
    p_size = &v41.__r_.__value_.__l.__size_;
  if (v34 >= 0)
    v36 = (const std::string::value_type *)v32;
  else
    v36 = (const std::string::value_type *)v32->__r_.__value_.__r.__words[0];
  v37 = *p_size;
  if (v34 >= 0)
    v38 = v34 & 0x7F;
  else
    v38 = v37;
  std::string::append(*(std::string **)(a1 + 8), v36, v38);
  **(_BYTE **)a1 = 0;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43) < 0)
    operator delete((void *)v42);
}

uint64_t sub_1C49C7A04(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E7FA8680;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_1C49C7A50(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t i;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t j;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  int v22;
  int v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int16 v31;
  unsigned __int16 *v32;
  int v33;
  uint64_t v34;
  unsigned int k;
  unint64_t v36;
  uint64_t v37;
  unsigned __int16 v38;
  unsigned __int16 *v39;
  int v40;
  void *v42[2];
  _DWORD v43[14];
  uint64_t v44;

  v3 = a3;
  v44 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a3)
    v6 = 71;
  else
    v6 = 0;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 176))(*(_QWORD *)(a1 + 16));
  v8 = *(_DWORD *)(v7 + 44);
  v42[0] = v43;
  v42[1] = (void *)0x600000000;
  sub_1C4765AA4((char *)v42, (v8 + 63) >> 6, 0);
  v43[12] = v8;
  v9 = a1 + 320;
  for (i = *(_QWORD *)(a1 + 328); i != v9; i = *(_QWORD *)(i + 8))
  {
    if (a2)
    {
      v11 = sub_1C477672C((uint64_t)a2, i);
      v12 = a2[1];
      v13 = v12 == *a2 ? 20 : 16;
      if (v11 == (_QWORD *)(v12 + 8 * *(unsigned int *)((char *)a2 + v13)))
        continue;
    }
    for (j = *(_QWORD *)(i + 56); j != i + 48; j = *(_QWORD *)(j + 8))
    {
      v15 = *(unsigned int *)(j + 40);
      if ((_DWORD)v15)
      {
        v16 = *(_QWORD *)(j + 32);
        v17 = v16 + 32 * v15;
        v18 = v42[0];
        do
        {
          if (!*(_BYTE *)v16)
          {
            v19 = *(_DWORD *)(v16 + 4);
            if (v19)
            {
              v20 = (unsigned __int16 *)(*(_QWORD *)(v7 + 56)
                                       + (((unint64_t)*(unsigned int *)(*(_QWORD *)(v7 + 8) + 24 * v19 + 16) >> 3) & 0x1FFFFFFE));
              v22 = *v20;
              v21 = v20 + 1;
              v23 = v22 + (*(_DWORD *)(*(_QWORD *)(v7 + 8) + 24 * v19 + 16) & 0xF) * v19;
              do
              {
                v18[(unsigned __int16)v23 >> 6] |= 1 << v23;
                v24 = *v21++;
                v23 += v24;
              }
              while (v24);
            }
          }
          v16 += 32;
        }
        while (v16 != v17);
        if (!j)
          goto LABEL_23;
      }
      if ((*(_BYTE *)j & 4) == 0)
      {
LABEL_23:
        while ((*(_WORD *)(j + 44) & 8) != 0)
          j = *(_QWORD *)(j + 8);
      }
    }
  }
  if (v7)
    v25 = (uint64_t *)(v7 + 8);
  else
    v25 = 0;
  v26 = *v25;
  v27 = v25[6];
  v28 = 230;
  while (2)
  {
    v29 = *(unsigned int *)(v26 + 24 * v28 + 16);
    v30 = (v29 >> 3) & 0x1FFFFFFE;
    v31 = *(_WORD *)(v27 + v30) + (v29 & 0xF) * v28;
    v32 = (unsigned __int16 *)(v27 + 2 + v30);
    do
    {
      if (((*((_QWORD *)v42[0] + (v31 >> 6)) >> v31) & 1) != 0)
      {
        v34 = (v28 - 102);
        goto LABEL_36;
      }
      v33 = *v32++;
      v31 += v33;
    }
    while (v33);
    if ((unint64_t)--v28 > 0x66)
      continue;
    break;
  }
  v34 = 0;
LABEL_36:
  if ((_DWORD)v3)
  {
    for (k = 86; k >= v6; --k)
    {
      v36 = *(unsigned int *)(v26 + 24 * k + 16);
      v37 = (v36 >> 3) & 0x1FFFFFFE;
      v38 = *(_WORD *)(v27 + v37) + (v36 & 0xF) * k;
      v39 = (unsigned __int16 *)(v27 + 2 + v37);
      while (((*((_QWORD *)v42[0] + (v38 >> 6)) >> v38) & 1) == 0)
      {
        v40 = *v39++;
        v38 += v40;
        if (!v40)
          goto LABEL_43;
      }
      v3 = k - v6 + 1;
      if (k - v6 != -1)
        goto LABEL_45;
LABEL_43:
      ;
    }
    v3 = 0;
  }
LABEL_45:
  if (v42[0] != v43)
    free(v42[0]);
  return v34 | (v3 << 32);
}

uint64_t *sub_1C49C7D1C(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  return sub_1C485B6E0(v6, a2);
}

void sub_1C49C7D74(const char **a1, uint64_t a2)
{
  const char *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  std::string __dst;

  v3 = *a1;
  v4 = strlen(*a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4)
LABEL_8:
    memmove(p_dst, v3, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  std::string::operator=((std::string *)(a2 + 128), &__dst);
  *(_BYTE *)(a2 + 184) = 1;
  std::string::operator=((std::string *)(a2 + 160), &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_1C49C7E54(uint64_t a1, _BYTE *a2)
{
  if (a2)
  {
    if (a2[128])
    {
      llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)(a2 + 32));
      a2[128] = 0;
    }
    llvm::ToolOutputFile::CleanupInstaller::~CleanupInstaller((llvm::ToolOutputFile::CleanupInstaller *)a2);
    JUMPOUT(0x1CAA32FC0);
  }
}

uint64_t sub_1C49C7EA4()
{
  uint64_t v0;
  char v2;
  char *v3;
  __int128 v4;

  *(_QWORD *)&v4 = "Add more comments.";
  *((_QWORD *)&v4 + 1) = 18;
  v2 = 0;
  v3 = &v2;
  sub_1C614D990((uint64_t)&unk_1ED7EC970, "print-detailed-asm-comments", &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EC970, &dword_1C475E000);
  *(_QWORD *)&v4 = "Do not emit non-G15 instructions";
  *((_QWORD *)&v4 + 1) = 32;
  v2 = 0;
  v3 = &v2;
  sub_1C614D990((uint64_t)&unk_1ED7ECA30, "skip-non-g15", &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7ECA30, &dword_1C475E000);
  *(_QWORD *)&v4 = "";
  v0 = sub_1C47AD050((uint64_t)qword_1EF8F6448, 0, 0);
  qword_1EF8F64C8 = 0;
  unk_1EF8F64D0 = 0;
  qword_1EF8F64F0 = 0;
  unk_1EF8F64F8 = 0;
  qword_1EF8F64E8 = 0;
  byte_1EF8F6500 = 0;
  qword_1EF8F64D8 = 0;
  unk_1EF8F64E0 = &unk_1E819E950;
  qword_1EF8F6448[0] = (uint64_t)&unk_1E819E480;
  qword_1EF8F6508 = (uint64_t)&unk_1E819E970;
  qword_1EF8F6510 = (uint64_t)&off_1E7FA8CB8;
  qword_1EF8F6528 = (uint64_t)&qword_1EF8F6510;
  llvm::cl::Option::setArgStr(v0, "clique-trace-verify", 0x13uLL);
  qword_1EF8F6468 = (uint64_t)"Run verifiers along a clique-trace specified";
  unk_1EF8F6470 = 44;
  sub_1C49C7D74((const char **)&v4, (uint64_t)qword_1EF8F6448);
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EF8F6448);
  return __cxa_atexit((void (*)(void *))sub_1C49BEA38, qword_1EF8F6448, &dword_1C475E000);
}

uint64_t sub_1C49C802C(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  void **v5;
  void (**v6)(void **);
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  char *v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  unsigned __int16 v24;
  uint64_t v25;
  unsigned int v26;
  __n128 v27;
  void **v28;
  double (**v29)(void **);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  int v34;
  uint64_t v35;
  char *v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  char v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  int v46;
  uint64_t v47;
  char *v48;
  uint64_t v50;
  int v51;
  char v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  void **v57;
  uint64_t v58;

  v1 = a1;
  v58 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 32) + 16);
  v54 = &off_1E81316D0;
  v55 = v3;
  v57 = &v54;
  v4 = sub_1C4C0B384(&v54);
  v5 = v57;
  if (v57 == &v54)
  {
    v6 = (void (**)(void **))((char *)v54 + 32);
    v5 = &v54;
LABEL_3:
    (*v6)(v5);
    goto LABEL_4;
  }
  if (v57)
  {
    v6 = (void (**)(void **))((char *)*v57 + 40);
    goto LABEL_3;
  }
LABEL_4:
  v7 = **(unsigned __int16 **)(v2 + 16);
  v8 = sub_1C4C915C4(v7);
  if ((v8 & 0xFF00000000) == 0)
    goto LABEL_42;
  v9 = v8;
  v10 = v8 - 164;
  if ((v8 - 164) >= 4 && (v8 - 78) >= 3)
  {
    if ((_DWORD)v8 == 85)
    {
      if (v4 <= 3)
        v20 = 0;
      else
        v20 = 0x100000007;
      v38 = v20 & 0x100000000;
      v37 = 0;
      return v38 & 0x100000000 | v20 | v37 & 0xFFFFFF00;
    }
LABEL_42:
    LOBYTE(v20) = 0;
    v38 = 0;
    v37 = 0;
    return v38 & 0x100000000 | v20 | v37 & 0xFFFFFF00;
  }
  v11 = sub_1C4C2FD5C(v7);
  v12 = *(_QWORD *)(v2 + 32);
  v13 = *(_QWORD *)(v12 + 32 * v11 + 16);
  if (v9 == 78)
  {
    if (v4 == 5)
      v14 = 4;
    else
      v14 = v4;
    sub_1C4C9CF00((v13 >> 7) & 7, (v13 >> 23) & 3, (v13 >> 5) & 3, (v13 >> 22) & 1, &v54, v14);
    v15 = (char *)v54;
    if ((_DWORD)v55)
    {
      v16 = 0;
      v17 = 96 * v55;
      v18 = (int *)((char *)v54 + 4);
      do
      {
        v19 = *v18;
        v18 += 24;
        v16 |= 1 << v19;
        v17 -= 96;
      }
      while (v17);
      LODWORD(v20) = v16;
      v21 = 96 * v55;
      do
      {
        v22 = *(char **)&v15[v21 - 72];
        if (&v15[v21 - 56] != v22)
          free(v22);
        v21 -= 96;
      }
      while (v21);
      v37 = v20 & 0xFFFFFF00;
      v38 = 0x100000000;
      v15 = (char *)v54;
    }
    else
    {
      v38 = 0;
      v37 = 0;
      LOBYTE(v20) = 0;
    }
    if (v15 != (char *)&v56)
      free(v15);
    return v38 & 0x100000000 | v20 | v37 & 0xFFFFFF00;
  }
  v53 = *(_QWORD *)(v12 + 32 * v11 + 16);
  v23 = (unsigned __int16)((v1 - v12) >> 5);
  v24 = 61;
  if (v23 != sub_1C4C2FD5C(v7))
  {
    if (v23 == sub_1C4C2FD5C(v7))
      v24 = 94;
    else
      v24 = 95;
  }
  if (v10 < 2)
  {
    v39 = 1;
    goto LABEL_49;
  }
  if ((v9 - 79) > 1)
  {
    v39 = 0;
LABEL_49:
    v50 = sub_1C4C919CC((4 * v13) & 0x300000000 | (v13 >> 2) & 7, v13 & 0x300000000 | (v13 >> 7) & 7, v13 & 3, (v13 >> 10) & 1, v4);
    v51 = v40;
    v52 = v41;
    sub_1C4C91BF4(v39, (v13 >> 2) & 7, v13 & 0x300000000 | (v13 >> 7) & 7, v13 & 3, (v13 >> 10) & 1, &v50, v4, v24, &v54, v42);
    v30 = (char *)v54;
    if ((_DWORD)v55)
    {
      LODWORD(v43) = 0;
      v44 = 96 * v55;
      v45 = (int *)((char *)v54 + 4);
      do
      {
        v46 = *v45;
        v45 += 24;
        v43 = (1 << v46) | v43;
        v44 -= 96;
      }
      while (v44);
      v47 = 96 * v55;
      do
      {
        v48 = *(char **)&v30[v47 - 72];
        if (&v30[v47 - 56] != v48)
          free(v48);
        v47 -= 96;
      }
      while (v47);
      v20 = v43 | 0x100000000;
      v30 = (char *)v54;
    }
    else
    {
      v20 = 0;
    }
    goto LABEL_59;
  }
  v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 32) + 16);
  v54 = &off_1E81316D0;
  v55 = v25;
  v57 = &v54;
  v26 = sub_1C4C0B384(&v54);
  v28 = v57;
  if (v57 == &v54)
  {
    v29 = (double (**)(void **))((char *)v54 + 32);
    v28 = &v54;
LABEL_27:
    v27.n128_f64[0] = (*v29)(v28);
    goto LABEL_28;
  }
  if (v57)
  {
    v29 = (double (**)(void **))((char *)*v57 + 40);
    goto LABEL_27;
  }
LABEL_28:
  sub_1C4C92114(&v53, v26, v24, (uint64_t *)&v54, v27);
  v30 = (char *)v54;
  if ((_DWORD)v55)
  {
    LODWORD(v31) = 0;
    v32 = 96 * v55;
    v33 = (int *)((char *)v54 + 4);
    do
    {
      v34 = *v33;
      v33 += 24;
      v31 = (1 << v34) | v31;
      v32 -= 96;
    }
    while (v32);
    v35 = 96 * v55;
    do
    {
      v36 = *(char **)&v30[v35 - 72];
      if (&v30[v35 - 56] != v36)
        free(v36);
      v35 -= 96;
    }
    while (v35);
    v20 = v31 | 0x100000000;
    v30 = (char *)v54;
  }
  else
  {
    v20 = 0;
  }
LABEL_59:
  if (v30 != (char *)&v56)
    free(v30);
  v37 = v20 & 0xFFFFFF00;
  v38 = v20 & 0x100000000;
  return v38 & 0x100000000 | v20 | v37 & 0xFFFFFF00;
}

BOOL sub_1C49C84A4(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;

  v4 = **(unsigned __int16 **)(a1 + 16);
  v5 = sub_1C4C915C4(v4);
  return (v5 & 0xFF00000000) != 0
      && ((_DWORD)v5 == 3 || (_DWORD)v5 == 194 || (_DWORD)v5 == 151)
      && (a2 & ~*(_DWORD *)(*(_QWORD *)(a1 + 32) + 32 * sub_1C4C2FD5C(v4) + 16)) == 0;
}

uint64_t sub_1C49C8528(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int16 *v2;
  int v3;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  unint64_t v11;
  int v12;

  v1 = *(_QWORD **)(a1 + 8);
  v2 = (unsigned __int16 *)v1[2];
  v3 = *v2;
  if ((v3 - 9) <= 0x3C && ((1 << (v3 - 9)) & 0x1000000000000605) != 0 || v3 == 0)
    return 0;
  if ((v2[4] & 0x10) != 0)
    return 0;
  v7 = *(_QWORD *)(*(_QWORD *)(v1[3] + 32) + 16);
  v8 = sub_1C4C915C4(v3);
  if ((v8 & 0xFF00000000) == 0 || (v8 - 51) < 0x19 && ((0x1F80007u >> (v8 - 51)) & 1) != 0)
    return 0;
  v9 = v8 - 26;
  result = 0;
  v11 = (unint64_t)(a1 - v1[4]) >> 5;
  switch(v9)
  {
    case 0:
    case 1:
    case 10:
    case 11:
    case 130:
    case 131:
    case 132:
    case 133:
      if (sub_1C4C2FD5C(v3) == (__int16)v11)
        return 0;
      goto LABEL_19;
    case 2:
    case 3:
    case 14:
    case 15:
      if ((*(_BYTE *)(v7 + 303) || *(_BYTE *)(v7 + 305))
        && ((__int16)v11 == sub_1C4C2FD5C(v3) || (__int16)v11 == sub_1C4C2FD5C(v3)))
      {
        return 0;
      }
      goto LABEL_13;
    case 6:
    case 7:
      if (!*(_BYTE *)(v7 + 303) && !*(_BYTE *)(v7 + 305))
        goto LABEL_13;
      v12 = v3;
      goto LABEL_15;
    case 35:
    case 36:
    case 37:
    case 38:
    case 65:
    case 66:
    case 67:
      v12 = v3;
      goto LABEL_15;
    case 53:
    case 54:
    case 138:
    case 139:
    case 140:
    case 141:
      return result;
    case 75:
    case 95:
    case 96:
      goto LABEL_21;
    case 79:
      if (sub_1C4C2FD5C(v3) == (__int16)v11)
        return 0;
LABEL_21:
      v12 = v3;
      goto LABEL_15;
    case 80:
    case 164:
    case 165:
    case 166:
    case 167:
      v12 = v3;
      goto LABEL_15;
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
      if (!*(_BYTE *)(v7 + 303) && !*(_BYTE *)(v7 + 305))
        goto LABEL_13;
      v12 = v3;
LABEL_15:
      if (sub_1C4C2FD5C(v12) == (__int16)v11)
        return 0;
LABEL_13:
      result = 1;
      break;
    case 113:
    case 116:
    case 117:
    case 118:
    case 126:
    case 127:
    case 134:
    case 135:
LABEL_19:
      v12 = v3;
      goto LABEL_15;
    default:
      goto LABEL_13;
  }
  return result;
}

uint64_t sub_1C49C86DC(unsigned int *a1, unsigned __int8 *a2, unsigned __int8 *a3, _DWORD *a4, uint64_t a5)
{
  int v10;
  void *v11;
  unint64_t v12;
  BOOL v13;
  int v14;
  uint64_t result;

  v10 = *a3;
  v11 = &unk_1C6613182;
  v12 = 37;
  v13 = v10 == 6 || v10 == 11;
  if (!v13 && v10 != 95)
  {
    if (sub_1C485C504(a3))
    {
      v11 = &unk_1C6613182;
      v12 = 37;
    }
    else
    {
      v14 = *a3;
      v11 = &unk_1C66131CC;
      v12 = 35;
      if (v14 != 7 && v14 != 13)
      {
        result = sub_1C61396F8(a3);
        if (!(_DWORD)result)
          return result;
        v11 = &unk_1C66131CC;
        v12 = 35;
      }
    }
  }
  result = sub_1C476CA98(a5, (uint64_t)v11, v12);
  if ((_DWORD)result)
  {
    sub_1C476CB98(*(_DWORD **)(a5 + 24), *a1 | (unint64_t)(result << 32), (*a2 << 8) | (*a3 << 16) | (4 * (*a4 & 0x3F)));
    return 1;
  }
  return result;
}

unint64_t sub_1C49C87CC(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;

  v1 = a1[2];
  if (!(_DWORD)v1)
    return 0;
  LODWORD(v2) = 0;
  v3 = 12 * v1;
  v4 = (int *)(*(_QWORD *)a1 + 4);
  do
  {
    v6 = *v4;
    v4 += 3;
    v5 = v6;
    v7 = v6 - 103;
    v8 = v6 - 1960;
    if ((v6 - 391) >= 0x80)
      v9 = -1048;
    else
      v9 = -1560;
    if (v8 >= 0x7F)
      v10 = v9;
    else
      v10 = -7836;
    if (v7 >= 0x80)
      v11 = v10;
    else
      v11 = -408;
    v12 = v11 + 4 * v5;
    if (v2 <= v12)
      v2 = v12;
    else
      v2 = v2;
    v3 -= 12;
  }
  while (v3);
  return (unint64_t)(v2 + 15) >> 4;
}

BOOL sub_1C49C8848(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  int v8;
  unsigned __int8 v9;
  uint64_t v12;
  int v14;
  unsigned int v15;
  unsigned __int8 v16;
  unsigned __int8 v17;

  LOBYTE(v8) = a4;
  v9 = a3;
  v17 = a2;
  v16 = a3;
  v14 = a4;
  v15 = a1;
  if (a3 > 0x1Bu)
  {
    if (a3 > 0x4Bu)
    {
      if (a3 != 76)
      {
        if (a3 != 95)
          return 1;
        return !sub_1C49C93B8(&v15, &v17, &v16, &v14, a7);
      }
    }
    else if (a3 != 28)
    {
      if (a3 != 49)
        return 1;
      return !sub_1C49C93B8(&v15, &v17, &v16, &v14, a7);
    }
  }
  else
  {
    switch(a3)
    {
      case 2u:
        v16 = 4;
        if ((a5 & 2) != 0)
        {
          v8 = 1;
        }
        else if ((a5 & 1) != 0)
        {
          v8 = 2;
        }
        else
        {
          v8 = 3;
        }
        v14 = v8;
        v9 = 4;
        break;
      case 4u:
      case 9u:
        break;
      case 5u:
      case 0xAu:
        goto LABEL_19;
      case 6u:
        return !sub_1C49C93B8(&v15, &v17, &v16, &v14, a7);
      default:
        return 1;
    }
    v12 = sub_1C476CA98(a7, (uint64_t)&unk_1C6613212, 0x100uLL);
    if ((_DWORD)v12)
      goto LABEL_20;
    if (v9 == 6)
      return !sub_1C49C93B8(&v15, &v17, &v16, &v14, a7);
    if (v9 != 5)
      return 1;
  }
LABEL_19:
  v12 = sub_1C476CA98(a7, (uint64_t)&unk_1C6613412, 0x80uLL);
  if ((_DWORD)v12)
  {
LABEL_20:
    sub_1C476CB98(*(_DWORD **)(a7 + 24), a1 | (unint64_t)(v12 << 32), (unsigned __int16)(a2 << 8) | (v9 << 16) | (4 * (v8 & 0x3F)));
    return 0;
  }
  if (v9 == 49 || v9 == 6)
    return !sub_1C49C93B8(&v15, &v17, &v16, &v14, a7);
  return 1;
}

uint64_t sub_1C49C89C8(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  int v10;
  char v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t result;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned __int8 v28;

  v28 = a3;
  if ((a3 & 0xFE) == 2)
  {
    v28 = 4;
    v10 = 4;
    if ((a5 & 2) != 0)
      v11 = 1;
    else
      v11 = a5 & 1 ^ 3;
  }
  else
  {
    v11 = a4;
    v10 = a3;
    if (a3 > 0x1Bu || ((1 << a3) & 0x8000310) == 0)
      goto LABEL_8;
  }
  v12 = sub_1C476CA98(a7, (uint64_t)&unk_1C6613610, 0x4CuLL);
  if ((_DWORD)v12)
  {
LABEL_24:
    v18 = a1 | (unint64_t)(v12 << 32);
    v19 = (a2 << 8) | (v10 << 16) | (4 * (v11 & 0x3F));
LABEL_25:
    sub_1C476CB98(*(_DWORD **)(a7 + 24), v18, v19);
    return 0;
  }
LABEL_8:
  v13 = &unk_1C66136F4;
  v14 = 37;
  v15 = (v10 - 5);
  if (v15 <= 0x3C)
  {
    if (((1 << (v10 - 5)) & 0x1000501800000000) != 0)
      goto LABEL_18;
    if (((1 << (v10 - 5)) & 0x200800021) != 0)
      goto LABEL_15;
    if (v15 == 1)
      goto LABEL_23;
  }
  v16 = v10 - 76;
  if ((v10 - 76) > 0x15)
    goto LABEL_30;
  if (((1 << v16) & 0x20300C) != 0)
    goto LABEL_18;
  if (((1 << v16) & 0x401) == 0)
  {
    if (v10 != 95)
      goto LABEL_30;
    goto LABEL_23;
  }
LABEL_15:
  v12 = sub_1C476CA98(a7, (uint64_t)aQrstuvwxyz, 0x26uLL);
  if ((_DWORD)v12)
    goto LABEL_24;
  if ((v10 - 40) > 0x27 || ((1 << (v10 - 40)) & 0xC002000A03) == 0)
  {
    if (v10 != 6)
      goto LABEL_30;
    goto LABEL_19;
  }
LABEL_18:
  if (sub_1C485C504(&v28))
  {
LABEL_19:
    v13 = &unk_1C66136F4;
    v14 = 37;
    goto LABEL_23;
  }
  v10 = v28;
  v17 = v28 - 41;
  if (v17 > 0x38 || ((1 << v17) & 0x100004001000401) == 0)
    goto LABEL_30;
  v13 = &unk_1C661373E;
  v14 = 35;
LABEL_23:
  v12 = sub_1C476CA98(a7, (uint64_t)v13, v14);
  v10 = v28;
  if ((_DWORD)v12)
    goto LABEL_24;
LABEL_30:
  result = 1;
  if (v10 > 37)
  {
    if (v10 <= 75)
    {
      if (v10 == 38)
        goto LABEL_53;
      if (v10 != 49)
      {
        if (v10 != 51)
          return result;
LABEL_60:
        v21 = (*(_DWORD *)(a7 + 40) + 15) & 0xFFFFFFF0;
        *(_DWORD *)(a7 + 40) = v21 + 16;
        v26 = *(unsigned __int8 *)(a7 + 44);
        if (v26 <= 4)
          LOBYTE(v26) = 4;
        *(_BYTE *)(a7 + 44) = v26;
        if (*(_BYTE *)(a7 + 5))
          goto LABEL_69;
        v23 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 56);
        if (*(unsigned __int8 *)(v23 + 60) > 3u)
          goto LABEL_69;
        v24 = 4;
        goto LABEL_71;
      }
    }
    else
    {
      if (v10 <= 94)
      {
        if (v10 != 76 && v10 != 86)
          return result;
LABEL_53:
        v21 = (*(_DWORD *)(a7 + 40) + 3) & 0xFFFFFFFC;
        *(_DWORD *)(a7 + 40) = v21 + 4;
        v25 = *(unsigned __int8 *)(a7 + 44);
        if (v25 <= 2)
          LOBYTE(v25) = 2;
        *(_BYTE *)(a7 + 44) = v25;
        if (*(_BYTE *)(a7 + 5))
          goto LABEL_69;
        v23 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 56);
        if (*(unsigned __int8 *)(v23 + 60) > 1u)
          goto LABEL_69;
        v24 = 2;
LABEL_71:
        *(_BYTE *)(v23 + 60) = v24;
LABEL_69:
        v18 = a1 | (unint64_t)(v21 << 32);
        v19 = (a2 << 8) | (v10 << 16) | (4 * (v11 & 0x3F)) | 1;
        goto LABEL_25;
      }
      if (v10 != 95)
      {
        if (v10 != 97)
          return result;
        goto LABEL_60;
      }
    }
    v21 = (*(_DWORD *)(a7 + 40) + 7) & 0xFFFFFFF8;
    *(_DWORD *)(a7 + 40) = v21 + 8;
    v27 = *(unsigned __int8 *)(a7 + 44);
    if (v27 <= 3)
      LOBYTE(v27) = 3;
    *(_BYTE *)(a7 + 44) = v27;
    if (*(_BYTE *)(a7 + 5))
      goto LABEL_69;
    v23 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 56);
    if (*(unsigned __int8 *)(v23 + 60) > 2u)
      goto LABEL_69;
    v24 = 3;
    goto LABEL_71;
  }
  if (v10 <= 7)
  {
    if ((v10 - 2) >= 3)
    {
      if (v10 != 5)
        return result;
      goto LABEL_53;
    }
LABEL_44:
    v21 = (*(_DWORD *)(a7 + 40) + 1) & 0xFFFFFFFE;
    *(_DWORD *)(a7 + 40) = v21 + 2;
    v22 = *(unsigned __int8 *)(a7 + 44);
    if (v22 <= 1)
      LOBYTE(v22) = 1;
    *(_BYTE *)(a7 + 44) = v22;
    if (*(_BYTE *)(a7 + 5))
      goto LABEL_69;
    v23 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 56);
    if (*(_BYTE *)(v23 + 60))
      goto LABEL_69;
    v24 = 1;
    goto LABEL_71;
  }
  if ((v10 - 8) < 2)
    goto LABEL_44;
  if (v10 == 10 || v10 == 28)
    goto LABEL_53;
  return result;
}

uint64_t (*sub_1C49C8DBC(int a1))(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  if (!a1)
    return sub_1C49C8F98;
  if (a1 <= 101)
  {
    if (a1 != 8)
      return (uint64_t (*)(unsigned int, unsigned __int8, unsigned __int8, int, char, uint64_t, uint64_t))sub_1C49C8E18;
    return sub_1C49C8F98;
  }
  if (a1 == 102)
    return (uint64_t (*)(unsigned int, unsigned __int8, unsigned __int8, int, char, uint64_t, uint64_t))sub_1C49C8E18;
  if (a1 != 106)
    return sub_1C49C8F98;
  return (uint64_t (*)(unsigned int, unsigned __int8, unsigned __int8, int, char, uint64_t, uint64_t))sub_1C49C8E08;
}

BOOL sub_1C49C8E08(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, int a4, char a5, unsigned int a6, uint64_t a7)
{
  return sub_1C49C8E18(a1, a2, a3, a4, a5, a6, a7);
}

BOOL sub_1C49C8E18(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  int v8;
  unsigned __int8 v9;
  uint64_t v12;
  int v14;
  unsigned int v15;
  unsigned __int8 v16;
  unsigned __int8 v17;

  LOBYTE(v8) = a4;
  v9 = a3;
  v17 = a2;
  v16 = a3;
  v14 = a4;
  v15 = a1;
  if (a3 > 0x1Bu)
  {
    if (a3 > 0x4Bu)
    {
      if (a3 != 76)
      {
        if (a3 != 95)
          return 1;
        return !sub_1C49C93B8(&v15, &v17, &v16, &v14, a7);
      }
    }
    else if (a3 != 28)
    {
      if (a3 != 49)
        return 1;
      return !sub_1C49C93B8(&v15, &v17, &v16, &v14, a7);
    }
  }
  else
  {
    switch(a3)
    {
      case 2u:
        v16 = 4;
        if ((a5 & 2) != 0)
        {
          v8 = 1;
        }
        else if ((a5 & 1) != 0)
        {
          v8 = 2;
        }
        else
        {
          v8 = 3;
        }
        v14 = v8;
        v9 = 4;
        break;
      case 4u:
      case 9u:
        break;
      case 5u:
      case 0xAu:
        goto LABEL_19;
      case 6u:
        return !sub_1C49C93B8(&v15, &v17, &v16, &v14, a7);
      default:
        return 1;
    }
    v12 = sub_1C476CA98(a7, (uint64_t)&unk_1C6613784, 0x100uLL);
    if ((_DWORD)v12)
      goto LABEL_20;
    if (v9 == 6)
      return !sub_1C49C93B8(&v15, &v17, &v16, &v14, a7);
    if (v9 != 5)
      return 1;
  }
LABEL_19:
  v12 = sub_1C476CA98(a7, (uint64_t)aGhijklmnopqrst, 0x80uLL);
  if ((_DWORD)v12)
  {
LABEL_20:
    sub_1C476CB98(*(_DWORD **)(a7 + 24), a1 | (unint64_t)(v12 << 32), (unsigned __int16)(a2 << 8) | (v9 << 16) | (4 * (v8 & 0x3F)));
    return 0;
  }
  if (v9 == 49 || v9 == 6)
    return !sub_1C49C93B8(&v15, &v17, &v16, &v14, a7);
  return 1;
}

uint64_t sub_1C49C8F98(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned __int8 v26;
  unsigned __int8 v27;

  v27 = a2;
  v26 = a3;
  v24 = a4;
  v25 = a1;
  if ((a3 & 0xFE) == 2)
  {
    v26 = 4;
    if ((a5 & 2) != 0)
    {
      v10 = 1;
    }
    else if ((a5 & 1) != 0)
    {
      v10 = 2;
    }
    else
    {
      v10 = 3;
    }
    v24 = v10;
    v11 = 4;
LABEL_14:
    v12 = sub_1C476CA98(a7, (uint64_t)&unk_1C6613A84, 0x4CuLL);
    if ((_DWORD)v12)
    {
LABEL_24:
      v13 = a1 | (unint64_t)(v12 << 32);
      v14 = (a2 << 8) | (v11 << 16) | (4 * (v10 & 0x3F));
      goto LABEL_25;
    }
    goto LABEL_15;
  }
  LOBYTE(v10) = a4;
  v11 = a3;
  if (a3 <= 0x1Bu)
  {
    if (((1 << a3) & 0x8000310) != 0)
      goto LABEL_14;
    if (a3 == 17)
    {
      v26 = 28;
      if ((a5 & 2) != 0)
      {
        v10 = 1;
      }
      else if ((a5 & 1) != 0)
      {
        v10 = 2;
      }
      else
      {
        v10 = 3;
      }
      v24 = v10;
      v11 = 28;
      goto LABEL_23;
    }
  }
LABEL_15:
  if ((v11 > 0x26 || ((1 << v11) & 0x4010000420) == 0) && v11 != 86 && v11 != 76)
    goto LABEL_28;
LABEL_23:
  v12 = sub_1C476CA98(a7, (uint64_t)aQrstuvwxyz_0, 0x26uLL);
  if ((_DWORD)v12)
    goto LABEL_24;
LABEL_28:
  if (v11 - 6 <= 0x3A && ((1 << (v11 - 6)) & 0x400080400800021) != 0
    || v11 - 78 <= 0x20 && ((1 << (v11 - 78)) & 0x100020401) != 0)
  {
    if ((sub_1C49C86DC(&v25, &v27, &v26, &v24, a7) & 1) != 0)
      return 0;
    v11 = v26;
  }
  if (v11 - 13 <= 0x34 && ((1 << (v11 - 13)) & 0x10004010020001) != 0
    || v11 - 79 <= 0x20 && ((1 << (v11 - 79)) & 0x100040401) != 0)
  {
    if ((sub_1C49C86DC(&v25, &v27, &v26, &v24, a7) & 1) != 0)
      return 0;
    v11 = v26;
  }
  result = 1;
  switch(v11)
  {
    case 2u:
    case 3u:
    case 4u:
    case 8u:
    case 9u:
      v16 = (*(_DWORD *)(a7 + 40) + 1) & 0xFFFFFFFE;
      *(_DWORD *)(a7 + 40) = v16 + 2;
      v17 = *(unsigned __int8 *)(a7 + 44);
      if (v17 <= 1)
        LOBYTE(v17) = 1;
      *(_BYTE *)(a7 + 44) = v17;
      if (*(_BYTE *)(a7 + 5))
        goto LABEL_64;
      v18 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 56);
      if (*(_BYTE *)(v18 + 60))
        goto LABEL_64;
      v19 = 1;
      goto LABEL_66;
    case 5u:
    case 0xAu:
    case 0x1Cu:
    case 0x26u:
      goto LABEL_60;
    case 6u:
    case 0xBu:
    case 0x1Du:
    case 0x28u:
      goto LABEL_54;
    case 7u:
    case 0xCu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x16u:
    case 0x17u:
    case 0x18u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Fu:
    case 0x20u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x27u:
      return result;
    case 0xDu:
    case 0x1Eu:
    case 0x29u:
      goto LABEL_49;
    default:
      v20 = v11 - 49;
      if (v11 - 49 > 0x3E)
        return result;
      if (((1 << v20) & 0x2000408020008001) != 0)
      {
LABEL_54:
        v16 = (*(_DWORD *)(a7 + 40) + 7) & 0xFFFFFFF8;
        *(_DWORD *)(a7 + 40) = v16 + 8;
        v22 = *(unsigned __int8 *)(a7 + 44);
        if (v22 <= 3)
          LOBYTE(v22) = 3;
        *(_BYTE *)(a7 + 44) = v22;
        if (!*(_BYTE *)(a7 + 5))
        {
          v18 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 56);
          if (*(unsigned __int8 *)(v18 + 60) <= 2u)
          {
            v19 = 3;
            goto LABEL_66;
          }
        }
      }
      else if (((1 << v20) & 0x4001010040010004) != 0)
      {
LABEL_49:
        v16 = (*(_DWORD *)(a7 + 40) + 15) & 0xFFFFFFF0;
        *(_DWORD *)(a7 + 40) = v16 + 16;
        v21 = *(unsigned __int8 *)(a7 + 44);
        if (v21 <= 4)
          LOBYTE(v21) = 4;
        *(_BYTE *)(a7 + 44) = v21;
        if (!*(_BYTE *)(a7 + 5))
        {
          v18 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 56);
          if (*(unsigned __int8 *)(v18 + 60) <= 3u)
          {
            v19 = 4;
LABEL_66:
            *(_BYTE *)(v18 + 60) = v19;
          }
        }
      }
      else
      {
        if (((1 << v20) & 0x2008000000) == 0)
          return result;
LABEL_60:
        v16 = (*(_DWORD *)(a7 + 40) + 3) & 0xFFFFFFFC;
        *(_DWORD *)(a7 + 40) = v16 + 4;
        v23 = *(unsigned __int8 *)(a7 + 44);
        if (v23 <= 2)
          LOBYTE(v23) = 2;
        *(_BYTE *)(a7 + 44) = v23;
        if (!*(_BYTE *)(a7 + 5))
        {
          v18 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 56);
          if (*(unsigned __int8 *)(v18 + 60) <= 1u)
          {
            v19 = 2;
            goto LABEL_66;
          }
        }
      }
LABEL_64:
      v13 = a1 | (unint64_t)(v16 << 32);
      v14 = (a2 << 8) | (v11 << 16) | (4 * (v10 & 0x3F)) | 1;
      break;
  }
LABEL_25:
  sub_1C476CB98(*(_DWORD **)(a7 + 24), v13, v14);
  return 0;
}

BOOL sub_1C49C93B8(unsigned int *a1, unsigned __int8 *a2, unsigned __int8 *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v10;
  int v11;

  v10 = sub_1C476CA98(a5, (uint64_t)&unk_1C6613512, 0x7FuLL);
  v11 = v10;
  if ((_DWORD)v10)
    sub_1C476CB98(*(_DWORD **)(a5 + 24), *a1 | (unint64_t)(v10 << 32), (*a2 << 8) | (*a3 << 16) | (4 * (*a4 & 0x3F)));
  return v11 != 0;
}

uint64_t sub_1C49C9440(uint64_t a1, uint64_t *a2, uint64_t *a3, _BYTE *a4, uint64_t a5)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::MachineFunction *v14;
  llvm::MachineInstr *v15;
  llvm::MachineInstr *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  llvm::DataLayout *v26;
  unsigned int v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (***v37)();
  void (**v38)(uint64_t (***)());
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t (***v43)();
  void (**v44)(uint64_t (***)());
  llvm::MachineFunction *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  llvm::LLVMContext *v66;
  unsigned int v67;
  uint64_t v68;
  _QWORD v69[4];
  char v70;
  uint64_t (**v71)();
  uint64_t *v72;
  _QWORD *v73;
  uint64_t (***v74)();
  llvm::MachineFunction *v75;
  llvm::MachineInstr *v76;
  void *v77;
  uint64_t v78;
  _BYTE v79[96];
  void *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  _BYTE v90[1216];
  char *v91;
  uint64_t v92;
  _QWORD v93[10];

  v93[8] = *MEMORY[0x1E0C80C00];
  v10 = (uint64_t *)a2[1];
  v11 = *v10;
  v12 = v10[5];
  v13 = *(_QWORD *)(*v10 + 40);
  v14 = sub_1C55437B8(a2, 0x223u);
  v16 = v15;
  v67 = 1;
  LODWORD(v80) = 1;
  v81 = 0;
  v82 = 0;
  llvm::MachineInstr::addOperand(v15, v14, (const llvm::MachineOperand *)&v80);
  if (!a5)
    goto LABEL_2;
  v25 = a1;
  v68 = v12;
  v26 = (llvm::DataLayout *)(v13 + 272);
  v27 = (*(unsigned __int16 *)(v11 + 18) >> 4) & 0x3FF;
  if (v27 <= 0x64 || (v28 = sub_1C49C8848, v27 != 101) && v27 != 108)
    v28 = sub_1C49C89C8;
  v29 = v25;
  v30 = *(_QWORD *)(v25 + 8);
  v91 = (char *)v93;
  v92 = 0x400000000;
  llvm::ComputeValueVTs(v30, v26, *a3, (uint64_t)&v91, 0, 0, 0);
  v66 = *(llvm::LLVMContext **)*a3;
  v88 = v90;
  v89 = 0x800000000;
  if (!(_DWORD)v92)
  {
    v80 = &v82;
    v81 = (void *)0x1000000000;
    v45 = v14;
    goto LABEL_58;
  }
  v65 = v28;
  v32 = 0;
  v33 = 0;
  v34 = a4;
  do
  {
    llvm::EVT::getTypeForEVT((llvm::EVT *)&v91[v32], v66);
    sub_1C4860878((uint64_t)&v80, v34, 1, v35, 0, 0, 0, 1, 0);
    LODWORD(v69[0]) = *(_DWORD *)&a4[4 * v33];
    sub_1C54F2560(v29, (uint64_t *)&v80, 0, (uint64_t)v26, v11);
    v36 = (*(unsigned __int16 *)(v11 + 18) >> 4) & 0x3FF;
    v71 = &off_1E7FA8F30;
    v72 = a2;
    v73 = v69;
    v74 = &v71;
    sub_1C485DA84(*(_QWORD *)(v29 + 8), (int *)&v80, (uint64_t)&v88, v26, v68, v36, (uint64_t)&v71);
    v37 = v74;
    if (v74 == &v71)
    {
      v38 = (void (**)(uint64_t (***)()))(v71 + 4);
      v37 = &v71;
LABEL_14:
      (*v38)(v37);
      goto LABEL_15;
    }
    if (v74)
    {
      v38 = (void (**)(uint64_t (***)()))(*v74 + 5);
      goto LABEL_14;
    }
LABEL_15:
    if (v86 != &v87)
      free(v86);
    if (v84 != &v85)
      free(v84);
    if (v81 != &v83)
      free(v81);
    ++v33;
    v32 += 16;
    v34 += 4;
  }
  while (v33 < v92);
  v39 = v88;
  v80 = &v82;
  v81 = (void *)0x1000000000;
  if ((_DWORD)v89)
  {
    v40 = 152 * v89;
    v41 = (char *)v88;
    v42 = (_QWORD *)v68;
    while (1)
    {
      v71 = &off_1E7FA8F78;
      v72 = a2;
      v73 = v39;
      v74 = &v71;
      sub_1C485DD68((unint64_t)v41, (uint64_t)&v80, v68, (uint64_t)&v71);
      v43 = v74;
      if (v74 == &v71)
      {
        v44 = (void (**)(uint64_t (***)()))(v71 + 4);
        v43 = &v71;
      }
      else
      {
        if (!v74)
          goto LABEL_27;
        v44 = (void (**)(uint64_t (***)()))(*v74 + 5);
      }
      (*v44)(v43);
LABEL_27:
      v41 += 152;
      v39 += 19;
      v40 -= 152;
      if (!v40)
      {
        v45 = v14;
        v28 = v65;
        goto LABEL_29;
      }
    }
  }
  v45 = v14;
  v28 = v65;
LABEL_58:
  v42 = (_QWORD *)v68;
LABEL_29:
  v70 = 0;
  v69[2] = v28;
  v69[3] = 0;
  v69[0] = &off_1E7F9F708;
  v69[1] = v28;
  v72 = a2;
  v73 = v42;
  LOBYTE(v74) = 0;
  v71 = &off_1E7FA8DE0;
  v75 = v45;
  v76 = v16;
  v77 = v79;
  v78 = 0x800000000;
  v67 = sub_1C54F28EC(v29, (uint64_t)&v71, (uint64_t)v69, (uint64_t *)&v80, a2, (*(unsigned __int16 *)(v11 + 18) >> 4) & 0x3FF, *(_DWORD *)(*(_QWORD *)(v11 + 24) + 8) > 0xFFu, v31, 0, 0);
  v71 = &off_1E7FA8DE0;
  if (v77 != v79)
    free(v77);
  v46 = (char *)v80;
  if ((_DWORD)v81)
  {
    v47 = 152 * v81;
    do
    {
      v48 = &v46[v47];
      v49 = *(char **)&v46[v47 - 40];
      if (&v46[v47 - 24] != v49)
        free(v49);
      v50 = (char *)*((_QWORD *)v48 - 9);
      if (v48 - 56 != v50)
        free(v50);
      v51 = *(char **)&v46[v47 - 144];
      if (&v46[v47 - 128] != v51)
        free(v51);
      v47 -= 152;
    }
    while (v47);
    v46 = (char *)v80;
  }
  if (v46 != (char *)&v82)
    free(v46);
  v52 = (char *)v88;
  if ((_DWORD)v89)
  {
    v53 = 152 * v89;
    do
    {
      v54 = &v52[v53];
      v55 = *(char **)&v52[v53 - 40];
      if (&v52[v53 - 24] != v55)
        free(v55);
      v56 = (char *)*((_QWORD *)v54 - 9);
      if (v54 - 56 != v56)
        free(v56);
      v57 = *(char **)&v52[v53 - 144];
      if (&v52[v53 - 128] != v57)
        free(v57);
      v53 -= 152;
    }
    while (v53);
    v52 = (char *)v88;
  }
  if (v52 != v90)
    free(v52);
  if (v91 != (char *)v93)
    free(v91);
LABEL_2:
  v17 = (uint64_t *)a2[6];
  v18 = *(_QWORD *)(a2[5] + 40);
  *((_QWORD *)v16 + 3) = v18;
  v19 = *(_QWORD *)(v18 + 32);
  v20 = *((unsigned int *)v16 + 10);
  if ((_DWORD)v20)
  {
    v58 = *((_QWORD *)v16 + 4);
    v59 = *(_QWORD *)(v19 + 40);
    v60 = 32 * v20;
    do
    {
      if (!*(_BYTE *)v58)
      {
        v61 = *(unsigned int *)(v58 + 4);
        if ((int)v61 >= 0)
          v62 = (uint64_t *)(*(_QWORD *)(v59 + 272) + 8 * v61);
        else
          v62 = (uint64_t *)(*(_QWORD *)(v59 + 24) + 16 * (v61 & 0x7FFFFFFF) + 8);
        v63 = *v62;
        if (*v62)
        {
          v64 = *(_QWORD *)(v63 + 16);
          *(_QWORD *)(v63 + 16) = v58;
          *(_QWORD *)(v58 + 16) = v64;
          if ((*(_BYTE *)(v58 + 3) & 1) != 0)
          {
            *(_QWORD *)(v58 + 24) = v63;
          }
          else
          {
            *(_QWORD *)(v58 + 24) = 0;
            v62 = (uint64_t *)(v64 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v58 + 16) = v58;
          *(_QWORD *)(v58 + 24) = 0;
        }
        *v62 = v58;
      }
      v58 += 32;
      v60 -= 32;
    }
    while (v60);
  }
  v21 = *(_QWORD *)(v19 + 728);
  if (v21)
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(_QWORD *)v21 + 24))(v21, v16);
  v22 = *v17 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v16 = v22 | *(_QWORD *)v16 & 7;
  *((_QWORD *)v16 + 1) = v17;
  *(_QWORD *)(v22 + 8) = v16;
  *v17 = *v17 & 7 | (unint64_t)v16;
  v23 = a2[7];
  if (v23)
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(_QWORD *)v23 + 24))(v23, v16);
  return v67;
}

_QWORD *sub_1C49C9A94(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA8DE0;
  v2 = (_QWORD *)a1[6];
  if (v2 != a1 + 8)
    free(v2);
  return a1;
}

uint64_t sub_1C49C9AD4(llvm *a1, uint64_t a2, uint64_t *a3, _BYTE *a4, uint64_t a5)
{
  int v6;
  uint64_t v7;
  llvm::MachineFunction *v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::raw_ostream *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;

  v6 = (*(unsigned __int16 *)(**(_QWORD **)(a2 + 8) + 18) >> 4) & 0x3FF;
  if ((v6 - 100) < 5)
    goto LABEL_2;
  if (((*(unsigned __int16 *)(**(_QWORD **)(a2 + 8) + 18) >> 4) & 0x3FFu) <= 0x69)
  {
    if (v6)
      v20 = v6 == 8;
    else
      v20 = 1;
    if (!v20)
      goto LABEL_12;
  }
  else
  {
    if ((v6 - 106) < 3)
    {
LABEL_2:
      v8 = sub_1C55437B8((_QWORD *)a2, 0x26Fu);
      v9 = (unint64_t *)v7;
      v10 = *(unint64_t **)(a2 + 48);
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 40);
      *(_QWORD *)(v7 + 24) = v11;
      v12 = *(_QWORD *)(v11 + 32);
      v13 = *(unsigned int *)(v7 + 40);
      if ((_DWORD)v13)
      {
        v21 = *(_QWORD *)(v7 + 32);
        v22 = *(_QWORD *)(v12 + 40);
        v23 = 32 * v13;
        do
        {
          if (!*(_BYTE *)v21)
          {
            v24 = *(unsigned int *)(v21 + 4);
            if ((int)v24 >= 0)
              v25 = (uint64_t *)(*(_QWORD *)(v22 + 272) + 8 * v24);
            else
              v25 = (uint64_t *)(*(_QWORD *)(v22 + 24) + 16 * (v24 & 0x7FFFFFFF) + 8);
            v26 = *v25;
            if (*v25)
            {
              v27 = *(_QWORD *)(v26 + 16);
              *(_QWORD *)(v26 + 16) = v21;
              *(_QWORD *)(v21 + 16) = v27;
              if ((*(_BYTE *)(v21 + 3) & 1) != 0)
              {
                *(_QWORD *)(v21 + 24) = v26;
              }
              else
              {
                *(_QWORD *)(v21 + 24) = 0;
                v25 = (uint64_t *)(v27 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v21 + 16) = v21;
              *(_QWORD *)(v21 + 24) = 0;
            }
            *v25 = v21;
          }
          v21 += 32;
          v23 -= 32;
        }
        while (v23);
      }
      v14 = *(_QWORD *)(v12 + 728);
      if (v14)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 24))(v14, v7);
      v15 = *v10 & 0xFFFFFFFFFFFFFFF8;
      *v9 = v15 | *v9 & 7;
      v9[1] = (unint64_t)v10;
      *(_QWORD *)(v15 + 8) = v9;
      *v10 = *v10 & 7 | (unint64_t)v9;
      v16 = *(_QWORD *)(a2 + 56);
      if (v16)
        (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v16 + 24))(v16, v9);
      v17 = 1;
      v28 = 1;
      v29 = 0;
      v30 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v9, v8, (const llvm::MachineOperand *)&v28);
      return v17;
    }
    if (v6 != 255)
    {
LABEL_12:
      v19 = (llvm::raw_ostream *)llvm::errs(a1);
      sub_1C4816AD8(v19, "Unsupported calling convention\n");
      return 0;
    }
  }
  return sub_1C49C9440((uint64_t)a1, (uint64_t *)a2, a3, a4, a5);
}

uint64_t sub_1C49C9CA0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  llvm::Type *v13;
  int v14;
  llvm *v15;
  uint64_t *v16;
  unint64_t *v17;
  const llvm::DataLayout *v18;
  int GenericVirtualRegister;
  unint64_t v20;
  uint64_t v21;
  uint64_t (***v22)();
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  void (**v28)(void);
  uint64_t v29;
  int v30;
  uint64_t (*v31)(unsigned int, unsigned __int8, unsigned __int8, int, char, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v52;
  uint64_t (**v55)();
  uint64_t (*v56)(unsigned int, unsigned __int8, unsigned __int8, int, char, uint64_t, uint64_t);
  uint64_t (*v57)(unsigned int, unsigned __int8, unsigned __int8, int, char, uint64_t, uint64_t);
  uint64_t v58;
  char v59;
  char v60;
  int v61;
  unint64_t LLTForType;
  uint64_t (**v63)();
  uint64_t *v64;
  char *v65;
  uint64_t (***v66)();
  void *v67[2];
  _BYTE v68[96];
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  _QWORD v79[154];

  v79[152] = *MEMORY[0x1E0C80C00];
  if (!a5)
    return 1;
  v6 = a3;
  v7 = a2[1];
  v8 = *(_QWORD *)(a3 + 40);
  v9 = *(_QWORD *)(v7 + 40);
  v48 = a2[5];
  v49 = *(_QWORD *)(v7 + 48);
  if (!v49)
  {
    v49 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v7 + 8) + 216))(*(_QWORD *)(v7 + 8), v7 + 128, v7);
    *(_QWORD *)(v7 + 48) = v49;
  }
  v77 = v79;
  v78 = 0x800000000;
  v10 = sub_1C485F330(v6);
  v50 = v11;
  v52 = v6;
  if ((uint64_t *)v10 != v11)
  {
    v12 = (uint64_t *)v10;
    v13 = (llvm::Type *)(v8 + 272);
    v14 = 1;
    do
    {
      v15 = (llvm *)*v12;
      if (sub_1C49CA294(*v12))
        *(_BYTE *)(v49 + 560) = 1;
      v16 = (uint64_t *)(a4 + 16 * (v14 - 1));
      v17 = (unint64_t *)(v16 + 1);
      sub_1C4860878((uint64_t)&v69, (_BYTE *)*v16, v16[1], (uint64_t)v15, v14 - 1, 0, 0, 1, 0);
      sub_1C54F2560(a1, (uint64_t *)&v69, v14, (uint64_t)v13, v6);
      LLTForType = 0;
      if (v16[1] == 1)
      {
        GenericVirtualRegister = *(_DWORD *)*v16;
        if (GenericVirtualRegister < 0 && (GenericVirtualRegister & 0x7FFFFFFFu) < *(_DWORD *)(v9 + 432))
          v20 = *(_QWORD *)(*(_QWORD *)(v9 + 424) + 8 * (GenericVirtualRegister & 0x7FFFFFFF));
        else
          v20 = 0;
        LLTForType = v20;
      }
      else
      {
        LLTForType = llvm::getLLTForType(v15, v13, v18);
        GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(v9, LLTForType, "", 0);
      }
      v61 = GenericVirtualRegister;
      v60 = 0;
      v21 = (*(unsigned __int16 *)(v6 + 18) >> 4) & 0x3FF;
      v22 = (uint64_t (***)())operator new(0x30uLL);
      *v22 = &off_1E7FA8FC0;
      v22[1] = (uint64_t (**)())&v60;
      v22[2] = (uint64_t (**)())&v61;
      v22[3] = (uint64_t (**)())v9;
      v22[4] = (uint64_t (**)())&LLTForType;
      v22[5] = (uint64_t (**)())a2;
      v66 = v22;
      sub_1C485DA84(*(_QWORD *)(a1 + 8), (int *)&v69, (uint64_t)&v77, v13, v9, v21, (uint64_t)&v63);
      ((void (*)(uint64_t (***)()))(*v22)[5])(v22);
      if (v61 != GenericVirtualRegister)
      {
        LODWORD(v55) = GenericVirtualRegister;
        LODWORD(v56) = 1;
        LODWORD(v63) = v61;
        LODWORD(v65) = 0;
        (*(void (**)(uint64_t *, uint64_t, uint64_t (***)(), uint64_t, uint64_t (***)(), uint64_t, _QWORD))(*a2 + 32))(a2, 19, &v55, 1, &v63, 1, 0);
      }
      if (*v17 >= 2)
        sub_1C54F27B8(a1, *v16, *v17, GenericVirtualRegister, (uint64_t)v15, (uint64_t)a2);
      v6 = v52;
      if (v75 != &v76)
        free(v75);
      if (v73 != &v74)
        free(v73);
      if (v70 != &v72)
        free(v70);
      v12 += 5;
      ++v14;
    }
    while (v12 != v50);
  }
  v23 = a2[6];
  if (v48 + 48 != (*(_QWORD *)(v48 + 48) & 0xFFFFFFFFFFFFFFF8))
  {
    v24 = *(_QWORD *)(v48 + 56);
    a2[5] = *(_QWORD *)(v24 + 24);
    a2[6] = v24;
  }
  v69 = &v71;
  v70 = (void *)0x1000000000;
  if ((_DWORD)v78)
  {
    v25 = (char *)v77;
    v26 = 152 * v78;
    v27 = (char *)v77;
    while (1)
    {
      v63 = &off_1E7FA9008;
      v64 = a2;
      v65 = v25;
      v66 = &v63;
      sub_1C485DD68((unint64_t)v27, (uint64_t)&v69, v9, (uint64_t)&v63);
      if (v66 == &v63)
        break;
      if (v66)
      {
        v28 = (void (**)(void))(*v66 + 5);
LABEL_34:
        (*v28)();
      }
      v27 += 152;
      v25 += 152;
      v26 -= 152;
      if (!v26)
        goto LABEL_36;
    }
    v28 = (void (**)(void))(v63 + 4);
    goto LABEL_34;
  }
LABEL_36:
  if (v48 + 48 != (*(_QWORD *)(v48 + 48) & 0xFFFFFFFFFFFFFFF8))
  {
    v29 = *(_QWORD *)(v48 + 56);
    a2[5] = *(_QWORD *)(v29 + 24);
    a2[6] = v29;
  }
  v30 = (*(unsigned __int16 *)(v52 + 18) >> 4) & 0x3FF;
  v31 = sub_1C49C8DBC(v30);
  v59 = 1;
  v57 = v31;
  v58 = 0;
  v55 = &off_1E7F9F738;
  v56 = v31;
  v64 = a2;
  v65 = (char *)v9;
  LOBYTE(v66) = 1;
  v63 = &off_1E7FA8E30;
  v67[0] = v68;
  v67[1] = (void *)0x800000000;
  v33 = sub_1C54F28EC(a1, (uint64_t)&v63, (uint64_t)&v55, (uint64_t *)&v69, a2, v30, *(_DWORD *)(*(_QWORD *)(v52 + 24) + 8) > 0xFFu, v32, 0, 0);
  if ((_DWORD)v33)
  {
    a2[5] = v48;
    a2[6] = v23;
    if ((a6 & 1) == 0)
      *(_DWORD *)(v49 + 488) = 4 * sub_1C49C87CC((unsigned int *)v67);
  }
  v63 = &off_1E7FA8E30;
  if (v67[0] != v68)
    free(v67[0]);
  v34 = (char *)v69;
  if ((_DWORD)v70)
  {
    v35 = 152 * v70;
    do
    {
      v36 = &v34[v35];
      v37 = *(char **)&v34[v35 - 40];
      if (&v34[v35 - 24] != v37)
        free(v37);
      v38 = (char *)*((_QWORD *)v36 - 9);
      if (v36 - 56 != v38)
        free(v38);
      v39 = *(char **)&v34[v35 - 144];
      if (&v34[v35 - 128] != v39)
        free(v39);
      v35 -= 152;
    }
    while (v35);
    v34 = (char *)v69;
  }
  if (v34 != (char *)&v71)
    free(v34);
  v40 = (char *)v77;
  if ((_DWORD)v78)
  {
    v41 = 152 * v78;
    do
    {
      v42 = &v40[v41];
      v43 = *(char **)&v40[v41 - 40];
      if (&v40[v41 - 24] != v43)
        free(v43);
      v44 = (char *)*((_QWORD *)v42 - 9);
      if (v42 - 56 != v44)
        free(v44);
      v45 = *(char **)&v40[v41 - 144];
      if (&v40[v41 - 128] != v45)
        free(v45);
      v41 -= 152;
    }
    while (v41);
    v40 = (char *)v77;
  }
  if (v40 != (char *)v79)
    free(v40);
  return v33;
}

uint64_t sub_1C49CA294(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;

  while (1)
  {
    v2 = *(_DWORD *)(a1 + 8);
    if (a1 && v2 == 16)
    {
      v3 = *(unsigned int *)(a1 + 12);
      if ((_DWORD)v3)
      {
        v4 = *(_QWORD **)(a1 + 16);
        v5 = 8 * v3;
        while ((sub_1C49CA294(*v4) & 1) == 0)
        {
          ++v4;
          v5 -= 8;
          if (!v5)
            goto LABEL_7;
        }
        return 1;
      }
      if ((v2 & 0xFE) != 0x12)
        return 0;
      goto LABEL_15;
    }
LABEL_7:
    if (v2 == 17)
      goto LABEL_13;
    if ((v2 & 0xFE) != 0x12)
      break;
LABEL_15:
    v6 = (uint64_t *)(a1 + 24);
LABEL_16:
    a1 = *v6;
  }
  if (v2 != 15)
    return 0;
  if (v2 < 0x100)
    return 1;
  if (!a1 || *(_QWORD *)(a1 + 24))
  {
LABEL_13:
    v6 = *(uint64_t **)(a1 + 16);
    goto LABEL_16;
  }
  return 0;
}

_QWORD *sub_1C49CA358(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA8E30;
  v2 = (_QWORD *)a1[4];
  if (v2 != a1 + 6)
    free(v2);
  return a1;
}

uint64_t sub_1C49CA398(llvm *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  int v6;
  char v7;
  BOOL v9;
  llvm::raw_ostream *v10;

  v5 = (*(unsigned __int16 *)(a3 + 18) >> 4) & 0x3FF;
  if (v5 <= 0x63)
  {
    if (v5)
      v9 = v5 == 8;
    else
      v9 = 1;
    if (!v9)
      goto LABEL_16;
    goto LABEL_14;
  }
  if (v5 - 100 > 8)
    goto LABEL_15;
  v6 = 1 << (v5 - 100);
  if ((v6 & 0x45) != 0)
  {
    v7 = 0;
    return sub_1C49C9CA0((uint64_t)a1, a2, a3, a4, a5, v7);
  }
  if ((v6 & 0x19A) == 0)
  {
LABEL_15:
    if (v5 != 255)
    {
LABEL_16:
      v10 = (llvm::raw_ostream *)llvm::errs(a1);
      sub_1C4816AD8(v10, "Unsupported calling convention\n");
      return 0;
    }
LABEL_14:
    v7 = 1;
    return sub_1C49C9CA0((uint64_t)a1, a2, a3, a4, a5, v7);
  }
  return 1;
}

uint64_t sub_1C49CA428()
{
  uint64_t v0;
  unsigned int *v1;
  unsigned int *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  llvm::DataLayout *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (**v20)(void);
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t **v33;
  BOOL v34;
  char v35;
  BOOL v36;
  _BYTE *v37;
  unsigned int v38;
  llvm::MachineFunction *v39;
  llvm::MachineInstr *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  void *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  unsigned int v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  void (**v68)(void);
  int v69;
  char *v70;
  uint64_t v71;
  _QWORD *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  char **v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  unsigned int v103;
  unsigned __int8 v104;
  char *v105;
  uint64_t v106;
  llvm::MachineFunction *v107;
  unint64_t *v108;
  unint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  void *v156;
  uint64_t v157;
  llvm::MachineInstr *v158;
  llvm::MachineFunction *v159;
  uint64_t v160;
  llvm::MachineFunction *v161;
  uint64_t (*v162)(unsigned int, unsigned __int8, unsigned __int8, int, char, uint64_t, uint64_t);
  uint64_t v163;
  uint64_t **v164;
  _OWORD *v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  int v169[6];
  uint64_t v170;
  int v171;
  _QWORD v172[3];
  unint64_t v173;
  char v174;
  _QWORD v175[3];
  uint64_t v176;
  char v177;
  _OWORD v178[2];
  _QWORD v179[3];
  _QWORD *v180;
  void *v181;
  uint64_t v182;
  _QWORD v183[14];
  void *v184;
  uint64_t v185;
  _BYTE v186[64];
  void *v187;
  uint64_t v188;
  char *v189;
  void **v190;
  void *v191;
  uint64_t v192;
  _BYTE v193[32];
  _QWORD v194[3];
  char v195;
  llvm::MachineFunction *v196;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  _BYTE v200[96];
  int v201[12];
  void *v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  void *v206;
  uint64_t v207;
  void *v208;
  uint64_t v209;
  void *v210[2];
  _BYTE v211[192];
  void *v212;
  uint64_t v213;
  _QWORD v214[304];
  void *v215;
  uint64_t v216;
  _QWORD v217[154];

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v5 = v0;
  v217[152] = *MEMORY[0x1E0C80C00];
  v6 = v3[1];
  v7 = *(uint64_t ***)v6;
  v160 = *(_QWORD *)(v6 + 56);
  *(_BYTE *)(v160 + 62) = 1;
  v8 = *(_QWORD *)(v6 + 40);
  v9 = (llvm::DataLayout *)(v7[5] + 34);
  v165 = v1 + 2;
  v167 = v6;
  v164 = v7;
  if (!*((_BYTE *)v1 + 8))
  {
    v10 = v1[3];
    v11 = (uint64_t *)((v10 & 0x80000000) != 0
                    ? *(_QWORD *)(v8 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8
                    : *(_QWORD *)(v8 + 272) + 8 * v10);
    v12 = *v11;
    if (v12)
    {
      if ((*(_BYTE *)(v12 + 3) & 1) != 0 || (v12 = *(_QWORD *)(v12 + 24)) != 0 && (*(_BYTE *)(v12 + 3) & 1) != 0)
      {
        v150 = *(_QWORD *)(v12 + 8);
        if (v150)
        {
          if (**(_WORD **)(v150 + 16) == 19 && *(_DWORD *)(v150 + 40) == 2)
          {
            v151 = *(_DWORD *)(*(_QWORD *)(v150 + 32) + 36);
            if (v151 < 0)
            {
              v152 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 16 * (v151 & 0x7FFFFFFF) + 8);
              if ((*(_BYTE *)(v152 + 3) & 1) == 0)
                v152 = *(_QWORD *)(v152 + 24);
              v153 = *(_QWORD *)(v152 + 8);
              if (**(_WORD **)(v153 + 16) == 71)
              {
                v154 = *(_QWORD *)(v153 + 32);
                v155 = *(_OWORD *)(v154 + 48);
                *v165 = *(_OWORD *)(v154 + 32);
                *(_OWORD *)(v1 + 6) = v155;
              }
            }
          }
        }
      }
    }
  }
  v215 = v217;
  v216 = 0x800000000;
  v13 = v1[50];
  if (v13)
  {
    v14 = (int *)*((_QWORD *)v1 + 24);
    v15 = 152 * v13;
    do
    {
      v16 = *v2;
      v214[1] = 0;
      sub_1C485DA84(*(_QWORD *)(v5 + 8), v14, (uint64_t)&v215, v9, v8, v16, (uint64_t)&v212);
      v14 += 38;
      v15 -= 152;
    }
    while (v15);
    v17 = (char *)v215;
    v212 = v214;
    v213 = 0x1000000000;
    if ((_DWORD)v216)
    {
      v18 = 152 * v216;
      v19 = (char *)v215;
      while (1)
      {
        v187 = &off_1E7FA9050;
        v188 = (uint64_t)v4;
        v189 = v17;
        v190 = &v187;
        sub_1C485DD68((unint64_t)v19, (uint64_t)&v212, v8, (uint64_t)&v187);
        if (v190 == &v187)
          break;
        if (v190)
        {
          v20 = (void (**)(void))((char *)*v190 + 40);
LABEL_15:
          (*v20)();
        }
        v19 += 152;
        v17 += 152;
        v18 -= 152;
        if (!v18)
          goto LABEL_17;
      }
      v20 = (void (**)(void))((char *)v187 + 32);
      goto LABEL_15;
    }
LABEL_17:
    v6 = v167;
    v7 = v164;
  }
  else
  {
    v212 = v214;
    v213 = 0x1000000000;
  }
  v21 = (*(uint64_t (**)(_QWORD, uint64_t **))(**(_QWORD **)(v6 + 8) + 16))(*(_QWORD *)(v6 + 8), v7);
  v157 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 112))(v21);
  v163 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 176))(v21);
  v162 = sub_1C49C8DBC(*v2);
  v159 = sub_1C55437B8(v4, 0x101u);
  v23 = (unint64_t *)v22;
  v24 = (unint64_t *)v4[6];
  v25 = *(_QWORD *)(v4[5] + 40);
  *(_QWORD *)(v22 + 24) = v25;
  v26 = *(_QWORD *)(v25 + 32);
  v27 = *(unsigned int *)(v22 + 40);
  if ((_DWORD)v27)
  {
    v129 = *(_QWORD *)(v22 + 32);
    v130 = *(_QWORD *)(v26 + 40);
    v131 = 32 * v27;
    do
    {
      if (!*(_BYTE *)v129)
      {
        v132 = *(unsigned int *)(v129 + 4);
        if ((int)v132 >= 0)
          v133 = (uint64_t *)(*(_QWORD *)(v130 + 272) + 8 * v132);
        else
          v133 = (uint64_t *)(*(_QWORD *)(v130 + 24) + 16 * (v132 & 0x7FFFFFFF) + 8);
        v134 = *v133;
        if (*v133)
        {
          v135 = *(_QWORD *)(v134 + 16);
          *(_QWORD *)(v134 + 16) = v129;
          *(_QWORD *)(v129 + 16) = v135;
          if ((*(_BYTE *)(v129 + 3) & 1) != 0)
          {
            *(_QWORD *)(v129 + 24) = v134;
          }
          else
          {
            *(_QWORD *)(v129 + 24) = 0;
            v133 = (uint64_t *)(v135 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v129 + 16) = v129;
          *(_QWORD *)(v129 + 24) = 0;
        }
        *v133 = v129;
      }
      v129 += 32;
      v131 -= 32;
    }
    while (v131);
  }
  v28 = *(_QWORD *)(v26 + 728);
  if (v28)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 24))(v28, v22);
  v29 = *v24 & 0xFFFFFFFFFFFFFFF8;
  *v23 = v29 | *v23 & 7;
  v23[1] = (unint64_t)v24;
  *(_QWORD *)(v29 + 8) = v23;
  *v24 = *v24 & 7 | (unint64_t)v23;
  v30 = v4[7];
  if (v30)
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v30 + 24))(v30, v23);
  v158 = (llvm::MachineInstr *)v23;
  v31 = *(unsigned __int8 *)v165;
  if (v31 == 10)
  {
    v32 = *((_QWORD *)v2 + 3);
    if (*(_BYTE *)(v32 + 16))
      v33 = 0;
    else
      v33 = (uint64_t **)*((_QWORD *)v2 + 3);
    if (v33)
      v34 = v7 == v33;
    else
      v34 = 0;
    v35 = v34;
    v36 = llvm::Module::getPICLevel(*(llvm::Module **)(v32 + 40)) != 0;
  }
  else
  {
    v36 = 0;
    v35 = 0;
  }
  v37 = *(_BYTE **)(v167 + 48);
  if (!v37)
  {
    v37 = (_BYTE *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v167 + 8) + 216))(*(_QWORD *)(v167 + 8), v167 + 128, v167);
    *(_QWORD *)(v167 + 48) = v37;
  }
  v37[12] = v31 != 0;
  v37[496] = v31 == 0;
  if (v31)
    v38 = 260;
  else
    v38 = 261;
  v37[497] = v35;
  v37[498] = v36;
  v39 = sub_1C55437B8(v4, v38);
  v41 = (uint64_t)v40;
  v42 = v165[1];
  v178[0] = *v165;
  v178[1] = v42;
  llvm::MachineInstr::addOperand(v40, v39, (const llvm::MachineOperand *)v178);
  v43 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v163 + 40))(v163, v167, *v2);
  LODWORD(v187) = 12;
  v188 = 0;
  v189 = (char *)v43;
  v161 = v39;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v41, v39, (const llvm::MachineOperand *)&v187);
  if (!v37[560])
  {
    v64 = v2[50];
    if (v64)
    {
      v65 = (uint64_t *)*((_QWORD *)v2 + 24);
      v66 = 152 * v64;
      while (!sub_1C49CA294(*v65))
      {
        v65 += 19;
        v66 -= 152;
        if (!v66)
          goto LABEL_42;
      }
      v37[560] = 1;
    }
  }
LABEL_42:
  v210[0] = v211;
  v210[1] = (void *)0x1000000000;
  llvm::CCState::CCState((uint64_t)v201, *v2, *((_BYTE *)v2 + 5123), v167, (uint64_t)v210, **v164);
  v177 = 0;
  v175[2] = v162;
  v176 = 0;
  v175[0] = &off_1E7F9F708;
  v175[1] = v162;
  v44 = 0;
  if (sub_1C54F2A64(v5, (uint64_t)v175, (uint64_t *)&v212, v201))
  {
    v194[2] = v8;
    v195 = 0;
    v196 = v161;
    v197 = v41;
    v198 = v200;
    v199 = 0x800000000;
    v194[1] = v4;
    v194[0] = &off_1E7FA8E88;
    v44 = 0;
    if (!sub_1C54F2CF0(v5, (uint64_t)v194, (uint64_t)&v212, (uint64_t)v201, (uint64_t *)v210, v4, 0, 0))
    {
LABEL_149:
      v194[0] = &off_1E7FA8DE0;
      if (v198 != v200)
        free(v198);
      goto LABEL_151;
    }
    v45 = (char *)*((_QWORD *)v2 + 636);
    if (v45)
    {
      LODWORD(v187) = 14;
      v188 = 0;
      v189 = v45;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v41, v161, (const llvm::MachineOperand *)&v187);
    }
    v46 = (uint64_t *)v4[6];
    v47 = *(_QWORD *)(v4[5] + 40);
    *(_QWORD *)(v41 + 24) = v47;
    v48 = *(_QWORD *)(v47 + 32);
    v49 = *(unsigned int *)(v41 + 40);
    if ((_DWORD)v49)
    {
      v136 = *(_QWORD *)(v41 + 32);
      v137 = *(_QWORD *)(v48 + 40);
      v138 = 32 * v49;
      do
      {
        if (!*(_BYTE *)v136)
        {
          v139 = *(unsigned int *)(v136 + 4);
          if ((int)v139 >= 0)
            v140 = (uint64_t *)(*(_QWORD *)(v137 + 272) + 8 * v139);
          else
            v140 = (uint64_t *)(*(_QWORD *)(v137 + 24) + 16 * (v139 & 0x7FFFFFFF) + 8);
          v141 = *v140;
          if (*v140)
          {
            v142 = *(_QWORD *)(v141 + 16);
            *(_QWORD *)(v141 + 16) = v136;
            *(_QWORD *)(v136 + 16) = v142;
            if ((*(_BYTE *)(v136 + 3) & 1) != 0)
            {
              *(_QWORD *)(v136 + 24) = v141;
            }
            else
            {
              *(_QWORD *)(v136 + 24) = 0;
              v140 = (uint64_t *)(v142 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v136 + 16) = v136;
            *(_QWORD *)(v136 + 24) = 0;
          }
          *v140 = v136;
        }
        v136 += 32;
        v138 -= 32;
      }
      while (v138);
    }
    v50 = *(_QWORD *)(v48 + 728);
    if (v50)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 24))(v50, v41);
    v51 = *v46 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v41 = v51 | *(_QWORD *)v41 & 7;
    *(_QWORD *)(v41 + 8) = v46;
    *(_QWORD *)(v51 + 8) = v41;
    *v46 = *v46 & 7 | v41;
    v52 = v4[7];
    if (v52)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 24))(v52, v41);
    if (!*(_BYTE *)v165)
    {
      v166 = *(_QWORD *)(v41 + 32);
      v53 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v167 + 16) + 104))(*(_QWORD *)(v167 + 16));
      v54 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v167 + 16) + 184))(*(_QWORD *)(v167 + 16));
      v55 = sub_1C554ADA8(v167, v163, (_QWORD *)v8, v53, v54, v41, *(_QWORD *)(v41 + 16), (uint64_t)v178, 0);
      llvm::MachineOperand::setReg(v166, v55);
    }
    v168 = v176;
    v56 = *v2;
    if ((int)v56 <= 100 || (v57 = sub_1C49C8848, (_DWORD)v56 != 101) && (_DWORD)v56 != 108)
      v57 = sub_1C49C89C8;
    if (!v2[32])
    {
      v69 = v176;
LABEL_141:
      v103 = *(unsigned __int8 *)(v160 + 60);
      v104 = 63 - __clz((1 << *(_BYTE *)(v157 + 12)));
      if (v103 <= v104)
        LOBYTE(v103) = v104;
      LODWORD(v187) = 1;
      v105 = (char *)(-(int)(1 << v103) & (v69 + (1 << v103) - 1));
      v188 = 0;
      v189 = v105;
      llvm::MachineInstr::addOperand(v158, v159, (const llvm::MachineOperand *)&v187);
      LODWORD(v187) = 1;
      v189 = 0;
      v188 = 0;
      llvm::MachineInstr::addOperand(v158, v159, (const llvm::MachineOperand *)&v187);
      v107 = sub_1C55437B8(v4, 0x100u);
      v108 = (unint64_t *)v106;
      v109 = (unint64_t *)v4[6];
      v110 = *(_QWORD *)(v4[5] + 40);
      *(_QWORD *)(v106 + 24) = v110;
      v111 = *(_QWORD *)(v110 + 32);
      v112 = *(unsigned int *)(v106 + 40);
      if ((_DWORD)v112)
      {
        v143 = *(_QWORD *)(v106 + 32);
        v144 = *(_QWORD *)(v111 + 40);
        v145 = 32 * v112;
        do
        {
          if (!*(_BYTE *)v143)
          {
            v146 = *(unsigned int *)(v143 + 4);
            if ((int)v146 >= 0)
              v147 = (uint64_t *)(*(_QWORD *)(v144 + 272) + 8 * v146);
            else
              v147 = (uint64_t *)(*(_QWORD *)(v144 + 24) + 16 * (v146 & 0x7FFFFFFF) + 8);
            v148 = *v147;
            if (*v147)
            {
              v149 = *(_QWORD *)(v148 + 16);
              *(_QWORD *)(v148 + 16) = v143;
              *(_QWORD *)(v143 + 16) = v149;
              if ((*(_BYTE *)(v143 + 3) & 1) != 0)
              {
                *(_QWORD *)(v143 + 24) = v148;
              }
              else
              {
                *(_QWORD *)(v143 + 24) = 0;
                v147 = (uint64_t *)(v149 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v143 + 16) = v143;
              *(_QWORD *)(v143 + 24) = 0;
            }
            *v147 = v143;
          }
          v143 += 32;
          v145 -= 32;
        }
        while (v145);
      }
      v113 = *(_QWORD *)(v111 + 728);
      if (v113)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v113 + 24))(v113, v106);
      v114 = *v109 & 0xFFFFFFFFFFFFFFF8;
      *v108 = v114 | *v108 & 7;
      v108[1] = (unint64_t)v109;
      *(_QWORD *)(v114 + 8) = v108;
      *v109 = *v109 & 7 | (unint64_t)v108;
      v115 = v4[7];
      if (v115)
        (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v115 + 24))(v115, v108);
      v44 = 1;
      LODWORD(v187) = 1;
      v188 = 0;
      v189 = v105;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v108, v107, (const llvm::MachineOperand *)&v187);
      LODWORD(v187) = 1;
      v189 = 0;
      v188 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v108, v107, (const llvm::MachineOperand *)&v187);
      goto LABEL_149;
    }
    v156 = v57;
    if ((_DWORD)v216)
    {
      v58 = (char *)v215;
      v59 = 152 * v216;
      do
      {
        v60 = &v58[v59];
        v61 = *(char **)&v58[v59 - 40];
        if (&v58[v59 - 24] != v61)
          free(v61);
        v62 = (char *)*((_QWORD *)v60 - 9);
        if (v60 - 56 != v62)
          free(v62);
        v63 = *(char **)&v58[v59 - 144];
        if (&v58[v59 - 128] != v63)
          free(v63);
        v59 -= 152;
      }
      while (v59);
      v56 = *v2;
    }
    LODWORD(v216) = 0;
    v191 = v193;
    v192 = 0x800000000;
    v187 = &off_1E7FA9098;
    v188 = (uint64_t)&v191;
    v190 = &v187;
    sub_1C485DA84(*(_QWORD *)(v5 + 8), (int *)v2 + 10, (uint64_t)&v215, v9, v8, v56, (uint64_t)&v187);
    if (v190 == &v187)
    {
      v68 = (void (**)(void))((char *)v187 + 32);
    }
    else
    {
      if (!v190)
        goto LABEL_78;
      v68 = (void (**)(void))((char *)*v190 + 40);
    }
    (*v68)();
LABEL_78:
    v187 = &v189;
    v188 = 0x1000000000;
    v184 = v186;
    v185 = 0x400000000;
    if ((_DWORD)v216)
    {
      v70 = (char *)v215;
      v71 = 152 * v216;
      do
      {
        v72 = operator new(0x20uLL);
        *v72 = &off_1E7FA90E0;
        v72[1] = v4;
        v72[2] = v70;
        v72[3] = &v184;
        v180 = v72;
        sub_1C485DD68((unint64_t)v70, (uint64_t)&v187, v8, (uint64_t)v179);
        (*(void (**)(_QWORD *))(*v72 + 40))(v72);
        v70 += 152;
        v71 -= 152;
      }
      while (v71);
    }
    v174 = 0;
    v172[2] = v156;
    v173 = 0;
    v172[0] = &off_1E7F9F708;
    v172[1] = v156;
    v179[1] = v4;
    v179[2] = v8;
    LOBYTE(v180) = 1;
    v181 = v183;
    v182 = 0x800000000;
    v179[0] = &off_1E7FA8ED8;
    v183[12] = v161;
    v183[13] = v41;
    v44 = sub_1C54F28EC(v5, (uint64_t)v179, (uint64_t)v172, (uint64_t *)&v187, v4, *v2, *((_BYTE *)v2 + 5123), v67, 0, 0);
    if ((v44 & 1) != 0)
    {
      if ((_DWORD)v185)
      {
        v73 = (char *)v184;
        v74 = (char *)v184 + 16 * v185;
        do
        {
          v75 = *((_QWORD *)v73 + 1);
          v76 = (uint64_t *)v4[6];
          v77 = *(_QWORD *)(v4[5] + 40);
          *(_QWORD *)(v75 + 24) = v77;
          v78 = *(_QWORD *)(v77 + 32);
          v79 = *(unsigned int *)(v75 + 40);
          if ((_DWORD)v79)
          {
            v83 = *(_QWORD *)(v75 + 32);
            v84 = *(_QWORD *)(v78 + 40);
            v85 = 32 * v79;
            do
            {
              if (!*(_BYTE *)v83)
              {
                v86 = *(unsigned int *)(v83 + 4);
                if ((int)v86 >= 0)
                  v87 = (uint64_t *)(*(_QWORD *)(v84 + 272) + 8 * v86);
                else
                  v87 = (uint64_t *)(*(_QWORD *)(v84 + 24) + 16 * (v86 & 0x7FFFFFFF) + 8);
                v88 = *v87;
                if (*v87)
                {
                  v89 = *(_QWORD *)(v88 + 16);
                  *(_QWORD *)(v88 + 16) = v83;
                  *(_QWORD *)(v83 + 16) = v89;
                  if ((*(_BYTE *)(v83 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v83 + 24) = v88;
                  }
                  else
                  {
                    *(_QWORD *)(v83 + 24) = 0;
                    v87 = (uint64_t *)(v89 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v83 + 16) = v83;
                  *(_QWORD *)(v83 + 24) = 0;
                }
                *v87 = v83;
              }
              v83 += 32;
              v85 -= 32;
            }
            while (v85);
          }
          v80 = *(_QWORD *)(v78 + 728);
          if (v80)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v80 + 24))(v80, v75);
          v81 = *v76 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v75 = v81 | *(_QWORD *)v75 & 7;
          *(_QWORD *)(v75 + 8) = v76;
          *(_QWORD *)(v81 + 8) = v75;
          *v76 = *v76 & 7 | v75;
          v82 = v4[7];
          if (v82)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v82 + 24))(v82, v75);
          v73 += 16;
        }
        while (v73 != v74);
      }
      if ((_DWORD)v192)
      {
        v90 = 0;
        v91 = (char *)v191;
        v92 = 4 * v192;
        do
        {
          v93 = *(_DWORD *)(*((_QWORD *)v2 + 15) + v90);
          if (v93 < 0 && (v93 & 0x7FFFFFFFu) < *(_DWORD *)(v8 + 432))
            v94 = *(_QWORD *)(*(_QWORD *)(v8 + 424) + 8 * (v93 & 0x7FFFFFFF));
          else
            v94 = 0;
          v95 = *(_DWORD *)&v91[v90];
          if (v95 < 0 && (v95 & 0x7FFFFFFFu) < *(_DWORD *)(v8 + 432))
            v96 = *(_QWORD *)(*(_QWORD *)(v8 + 424) + 8 * (v95 & 0x7FFFFFFF));
          else
            v96 = 0;
          LODWORD(v170) = *(_DWORD *)(*((_QWORD *)v2 + 15) + v90);
          v171 = 1;
          v169[0] = v95;
          v169[4] = 0;
          if (v94 == v96)
            (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, int *, uint64_t, _QWORD))(*v4 + 32))(v4, 19, &v170, 1, v169, 1, 0);
          else
            sub_1C5546EF4(v4, &v170, v169);
          v90 += 4;
        }
        while (v92 != v90);
      }
      if (v173 <= v168)
        v69 = v168;
      else
        v69 = v173;
    }
    else
    {
      v69 = v168;
    }
    v179[0] = &off_1E7FA8E30;
    if (v181 != v183)
      free(v181);
    if (v184 != v186)
      free(v184);
    v97 = (char **)v187;
    if ((_DWORD)v188)
    {
      v98 = 19 * v188;
      do
      {
        v99 = (char *)&v97[v98];
        v100 = v97[v98 - 5];
        if (&v97[v98 - 3] != (char **)v100)
          free(v100);
        v101 = (char *)*((_QWORD *)v99 - 9);
        if (v99 - 56 != v101)
          free(v101);
        v102 = v97[v98 - 18];
        if (&v97[v98 - 16] != (char **)v102)
          free(v102);
        v98 -= 19;
      }
      while (v98 * 8);
      v97 = (char **)v187;
    }
    if (v97 != &v189)
      free(v97);
    if (v191 != v193)
      free(v191);
    if (!(_DWORD)v44)
      goto LABEL_149;
    goto LABEL_141;
  }
LABEL_151:
  if (v208 != &v209)
    free(v208);
  if (v206 != &v207)
    free(v206);
  if (v204 != &v205)
    free(v204);
  if (v202 != &v203)
    free(v202);
  if (v210[0] != v211)
    free(v210[0]);
  v116 = (char *)v212;
  if ((_DWORD)v213)
  {
    v117 = 152 * v213;
    do
    {
      v118 = &v116[v117];
      v119 = *(char **)&v116[v117 - 40];
      if (&v116[v117 - 24] != v119)
        free(v119);
      v120 = (char *)*((_QWORD *)v118 - 9);
      if (v118 - 56 != v120)
        free(v120);
      v121 = *(char **)&v116[v117 - 144];
      if (&v116[v117 - 128] != v121)
        free(v121);
      v117 -= 152;
    }
    while (v117);
    v116 = (char *)v212;
  }
  if (v116 != (char *)v214)
    free(v116);
  v122 = (char *)v215;
  if ((_DWORD)v216)
  {
    v123 = 152 * v216;
    do
    {
      v124 = &v122[v123];
      v125 = *(char **)&v122[v123 - 40];
      if (&v122[v123 - 24] != v125)
        free(v125);
      v126 = (char *)*((_QWORD *)v124 - 9);
      if (v124 - 56 != v126)
        free(v126);
      v127 = *(char **)&v122[v123 - 144];
      if (&v122[v123 - 128] != v127)
        free(v127);
      v123 -= 152;
    }
    while (v123);
    v122 = (char *)v215;
  }
  if (v122 != (char *)v217)
    free(v122);
  return v44;
}

_QWORD *sub_1C49CB4B8(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA8E30;
  v2 = (_QWORD *)a1[4];
  if (v2 != a1 + 6)
    free(v2);
  return a1;
}

_QWORD *sub_1C49CB4F8(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA8DE0;
  v2 = (_QWORD *)a1[6];
  if (v2 != a1 + 8)
    free(v2);
  return a1;
}

void sub_1C49CB538(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA8DE0;
  v2 = (_QWORD *)a1[6];
  if (v2 != a1 + 8)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C49CB588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C486129C(*(_QWORD **)(a1 + 8), *(_QWORD *)(a1 + 16), a2, a3, a4);
}

_DWORD *sub_1C49CB5A0(uint64_t a1, unsigned int a2, int a3, uint64_t a4, int a5)
{
  llvm::MachineInstr *v8;
  llvm::MachineFunction *v9;
  int v10;
  uint64_t v11;
  _DWORD v13[4];
  uint64_t v14;
  int v15;
  _DWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v14 = a4;
  v15 = a5;
  v8 = *(llvm::MachineInstr **)(a1 + 40);
  v9 = *(llvm::MachineFunction **)(a1 + 32);
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v16[0] = 0x2000000;
  v16[1] = a3;
  llvm::MachineInstr::addOperand(v8, v9, (const llvm::MachineOperand *)v16);
  v10 = sub_1C54F5000(a1, a2, (uint64_t)&v14, 0);
  v11 = *(_QWORD *)(a1 + 8);
  v13[0] = a3;
  v13[2] = 1;
  v16[0] = v10;
  LODWORD(v18) = 0;
  (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 19, v13, 1, v16, 1, 0);
  return sub_1C476CB98((_DWORD *)(a1 + 48), v14, v15);
}

llvm::MachineFunction *sub_1C49CB660(uint64_t a1, unsigned int a2, int a3, unint64_t a4, __int128 *a5, uint64_t a6)
{
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  llvm::LLVMContext ****v15;
  unint64_t v16;
  llvm::LLVMContext ***v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  unint64_t v22;
  _QWORD *v23;
  int v25[6];
  unsigned int v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;

  v31 = a4;
  if ((*(unsigned __int8 *)(a6 + 8) >> 2) - 1 <= 2u)
  {
    LOBYTE(v26) = *(_BYTE *)(a6 + 9);
    v11 = sub_1C47A8C74((unsigned __int8 *)&v26);
    v13 = v12;
    if (v11 != sub_1C4825F50(&v31) || v13 != v14)
      a2 = sub_1C54F5000(a1, a2, a6, 0);
  }
  v15 = *(llvm::LLVMContext *****)(*(_QWORD *)(a1 + 8) + 8);
  v29 = *a5;
  v30 = *((_QWORD *)a5 + 2);
  v16 = v31;
  v17 = *v15;
  v18 = (uint64_t)((*v15)[5] + 34);
  LOBYTE(v26) = *(_BYTE *)(a6 + 9);
  v27 = 0;
  llvm::EVT::getTypeForEVT((llvm::EVT *)&v26, **v17);
  llvm::DataLayout::getAlignment(v18, v19);
  v21 = v20;
  v22 = sub_1C484358C((uint64_t)(v15 + 16), 80, 3);
  *(_OWORD *)v22 = v29;
  *(_QWORD *)(v22 + 16) = v30;
  *(_QWORD *)(v22 + 24) = v16;
  *(_WORD *)(v22 + 32) = 2;
  *(_BYTE *)(v22 + 34) = v21;
  *(_OWORD *)(v22 + 40) = 0u;
  *(_OWORD *)(v22 + 56) = 0u;
  *(_QWORD *)(v22 + 72) = 0;
  *(_WORD *)(v22 + 36) = 1;
  v23 = *(_QWORD **)(a1 + 8);
  v26 = a2;
  v28 = 0;
  v25[0] = a3;
  v25[4] = 0;
  return sub_1C5546848(v23, (int *)&v26, v25, (llvm::MachineMemOperand *)v22);
}

void sub_1C49CB7CC(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA8E30;
  v2 = (_QWORD *)a1[4];
  if (v2 != a1 + 6)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C49CB81C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C486129C(*(_QWORD **)(a1 + 8), *(_QWORD *)(a1 + 16), a2, a3, a4);
}

_DWORD *sub_1C49CB834(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  _QWORD v17[2];
  int v18;
  unint64_t v19;
  int v20;

  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 64))(a1, a3, a2);
  if ((a5 >> 2) - 1 >= 3)
  {
    v14 = *(_QWORD *)(a1 + 8);
    LODWORD(v19) = a2;
    v20 = 1;
    LODWORD(v17[0]) = a3;
    v18 = 0;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 19, &v19, 1, v17, 1, 0);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 8);
    llvm::LLT::LLT(&v16, BYTE2(a5));
    v19 = v16;
    v20 = 0;
    LODWORD(v17[0]) = a3;
    v18 = 0;
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, 19, &v19, 1, v17, 1, 0);
    v12 = *(_QWORD *)(a1 + 8);
    LODWORD(v19) = a2;
    v20 = 1;
    v17[0] = v11;
    v17[1] = v13;
    v18 = 1;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 119, &v19, 1, v17, 1, 0);
  }
  return sub_1C476CB98((_DWORD *)(a1 + 32), a4, a5);
}

llvm::MachineFunction *sub_1C49CB978(uint64_t a1, int a2, int a3, unint64_t a4, __int128 *a5, unsigned __int8 *a6)
{
  llvm::LLVMContext ****v11;
  llvm::LLVMContext ***v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  llvm::MachineFunction *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  llvm::MachineFunction *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  int v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;

  v11 = *(llvm::LLVMContext *****)(*(_QWORD *)(a1 + 8) + 8);
  v34 = *a5;
  v35 = *((_QWORD *)a5 + 2);
  v36 = a4;
  v12 = *v11;
  v13 = (uint64_t)((*v11)[5] + 34);
  LOBYTE(v29) = a6[9];
  v30 = 0;
  llvm::EVT::getTypeForEVT((llvm::EVT *)&v29, **v12);
  llvm::DataLayout::getAlignment(v13, v14);
  LOBYTE(v13) = v15;
  v16 = sub_1C484358C((uint64_t)(v11 + 16), 80, 3);
  *(_OWORD *)v16 = v34;
  *(_QWORD *)(v16 + 16) = v35;
  *(_QWORD *)(v16 + 24) = a4;
  *(_WORD *)(v16 + 32) = 33;
  *(_BYTE *)(v16 + 34) = v13;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_QWORD *)(v16 + 72) = 0;
  *(_WORD *)(v16 + 36) = 1;
  if ((a6[8] >> 2) - 1 >= 3u)
  {
    v23 = *(_QWORD **)(a1 + 8);
    LODWORD(v32) = a2;
    v33 = 1;
    LODWORD(v29) = a3;
    v31 = 0;
    return sub_1C55464EC(v23, 0x5Au, (int *)&v32, (int *)&v29, (llvm::MachineMemOperand *)v16);
  }
  LOBYTE(v29) = a6[9];
  v17 = sub_1C47A8C74((unsigned __int8 *)&v29);
  v19 = v18;
  v20 = sub_1C4825F50(&v36);
  v22 = *(_QWORD **)(a1 + 8);
  if (v17 == v20 && v19 == v21)
  {
    LODWORD(v32) = a2;
    v33 = 1;
    LODWORD(v29) = a3;
    v31 = 0;
    v23 = v22;
    return sub_1C55464EC(v23, 0x5Au, (int *)&v32, (int *)&v29, (llvm::MachineMemOperand *)v16);
  }
  llvm::LLT::LLT(&v28, a6[10]);
  v32 = v28;
  v33 = 0;
  LODWORD(v29) = a3;
  v31 = 0;
  v25 = sub_1C55464EC(v22, 0x5Au, (int *)&v32, (int *)&v29, (llvm::MachineMemOperand *)v16);
  v26 = *(_QWORD *)(a1 + 8);
  LODWORD(v32) = a2;
  v33 = 1;
  v29 = v25;
  v30 = v27;
  v31 = 1;
  return (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, llvm::MachineFunction **, uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 119, &v32, 1, &v29, 1, 0);
}

void sub_1C49CBB70(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _QWORD *v6;
  unint64_t v7;
  char *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  v6 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 40);
  v8 = (char *)v6[20];
  v7 = v6[21];
  if ((unint64_t)v8 >= v7)
  {
    v10 = (char *)v6[19];
    v11 = (v8 - v10) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      goto LABEL_36;
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 60)
        goto LABEL_37;
      v15 = (char *)operator new(16 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[16 * v11];
    *(_WORD *)v16 = a2;
    *((_QWORD *)v16 + 1) = -1;
    v9 = v16 + 16;
    if (v8 != v10)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v8 - 1);
        v16 -= 16;
        v8 -= 16;
      }
      while (v8 != v10);
      v8 = (char *)v6[19];
    }
    v6[19] = v16;
    v6[20] = v9;
    v6[21] = &v15[16 * v14];
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_WORD *)v8 = a2;
    *((_QWORD *)v8 + 1) = -1;
    v9 = v8 + 16;
  }
  v6[20] = v9;
  v17 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 40);
  v18 = a2 | (unint64_t)(a3 << 32);
  v20 = (unint64_t *)v17[58];
  v19 = v17[59];
  if ((unint64_t)v20 < v19)
  {
    *v20 = v18;
    v21 = v20 + 1;
    goto LABEL_35;
  }
  v22 = (_QWORD *)v17[57];
  v23 = v20 - v22;
  v24 = v23 + 1;
  if ((unint64_t)(v23 + 1) >> 61)
LABEL_36:
    abort();
  v25 = v19 - (_QWORD)v22;
  if (v25 >> 2 > v24)
    v24 = v25 >> 2;
  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
    v26 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v26 = v24;
  if (!v26)
  {
    v27 = 0;
    goto LABEL_30;
  }
  if (v26 >> 61)
LABEL_37:
    sub_1C4764EE4();
  v27 = (char *)operator new(8 * v26);
LABEL_30:
  v28 = &v27[8 * v23];
  *(_QWORD *)v28 = v18;
  v21 = v28 + 8;
  if (v20 != v22)
  {
    do
    {
      v29 = *--v20;
      *((_QWORD *)v28 - 1) = v29;
      v28 -= 8;
    }
    while (v20 != v22);
    v20 = (unint64_t *)v17[57];
  }
  v17[57] = v28;
  v17[58] = v21;
  v17[59] = &v27[8 * v26];
  if (v20)
    operator delete(v20);
LABEL_35:
  v17[58] = v21;
}

void sub_1C49CBD4C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA8DE0;
  v2 = (_QWORD *)a1[6];
  if (v2 != a1 + 8)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C49CBD9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C49CBDA8(*(uint64_t **)(a1 + 8), *(_QWORD *)(a1 + 16), a3, a4);
}

uint64_t sub_1C49CBDA8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int GenericVirtualRegister;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v8 = a1[1];
  GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a2, 257, "", 0);
  LODWORD(v21) = GenericVirtualRegister;
  v22 = 1;
  (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 16) + 176))(*(_QWORD *)(v8 + 16));
  LODWORD(v16) = 105;
  v18 = 0;
  (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*a1 + 32))(a1, 19, &v21, 1, &v16, 1, 0);
  v10 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a2, 514, "", 0);
  LODWORD(v21) = v10;
  v22 = 1;
  LODWORD(v16) = GenericVirtualRegister;
  v18 = 0;
  sub_1C5546EF4(a1, &v21, (int *)&v16);
  if (a3)
  {
    v11 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a2, 513, "", 0);
    LODWORD(v16) = v11;
    v17 = 1;
    sub_1C5544694((uint64_t)a1, &v16, a3);
    v12 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a2, 514, "", 0);
    LODWORD(v21) = v12;
    v22 = 1;
    LODWORD(v16) = v10;
    v18 = 0;
    v19 = v11;
    v20 = 0;
    (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*a1 + 32))(a1, 193, &v21, 1, &v16, 2, 0);
    v10 = v12;
  }
  v13 = *(_QWORD *)(v8 + 432);
  v14 = (v13 + 8) | 4;
  LODWORD(v13) = *(_DWORD *)(v13 + 20);
  *(_QWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = a3;
  *(_DWORD *)(a4 + 16) = v13;
  *(_BYTE *)(a4 + 20) = 0;
  return v10;
}

void sub_1C49CBF88(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA8E30;
  v2 = (_QWORD *)a1[4];
  if (v2 != a1 + 6)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C49CBFD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C49CBDA8(*(uint64_t **)(a1 + 8), *(_QWORD *)(a1 + 16), a3, a4);
}

void sub_1C49CBFE4(uint64_t a1, int a2)
{
  llvm::MachineInstr *v2;
  llvm::MachineFunction *v3;
  _DWORD v4[2];
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(llvm::MachineFunction **)(a1 + 144);
  v2 = *(llvm::MachineInstr **)(a1 + 152);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v4[0] = 50331648;
  v4[1] = a2;
  llvm::MachineInstr::addOperand(v2, v3, (const llvm::MachineOperand *)v4);
}

void sub_1C49CC024()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C49CC038(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7FA8F30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C49CC070(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA8F30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C49CC090(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t *v4;
  int v6[6];
  unint64_t v7;
  int v8;

  v3 = *a3;
  LODWORD(v7) = *a2;
  v8 = 1;
  v4 = *(uint64_t **)(a1 + 8);
  v6[0] = **(_DWORD **)(a1 + 16);
  v6[4] = 0;
  return sub_1C5546FE4(v4, &v7, v6, v3);
}

void sub_1C49CC0E0()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C49CC0F4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7FA8F78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C49CC12C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA8F78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C49CC14C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _DWORD v6[6];

  v3 = *(char **)a2;
  v2 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  v6[0] = **(_DWORD **)(*(_QWORD *)(a1 + 16) + 80);
  v6[4] = 0;
  return sub_1C5547540(v4, v3, v2, (uint64_t)v6);
}

void sub_1C49CC190()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C49CC1A4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E7FA8FC0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_1C49CC1EC(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E7FA8FC0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C49CC21C(uint64_t a1, int *a2, uint64_t *a3)
{
  int v4;
  uint64_t v5;
  _BYTE *v6;
  int GenericVirtualRegister;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t result;
  int v12[6];
  _DWORD v13[4];
  __int128 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = *a3;
  v6 = *(_BYTE **)(a1 + 8);
  if (!*v6)
  {
    *v6 = 1;
    GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(_QWORD *)(a1 + 24), **(_QWORD **)(a1 + 32), "", 0);
    **(_DWORD **)(a1 + 16) = GenericVirtualRegister;
    v8 = *(_QWORD *)(a1 + 40);
    LODWORD(v14) = GenericVirtualRegister;
    DWORD2(v14) = 1;
    (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v8 + 32))(v8, 68, &v14, 1, 0, 0, 0);
  }
  v9 = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(_QWORD *)(a1 + 24), **(_QWORD **)(a1 + 32), "", 0);
  v10 = *(uint64_t **)(a1 + 40);
  v13[0] = v9;
  v13[2] = 1;
  LODWORD(v14) = **(_DWORD **)(a1 + 16);
  v15 = 0;
  v12[0] = v4;
  v12[4] = 0;
  result = sub_1C55473DC(v10, (uint64_t)v13, &v14, v12, v5);
  **(_DWORD **)(a1 + 16) = v9;
  return result;
}

void sub_1C49CC348()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C49CC35C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7FA9008;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C49CC394(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA9008;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C49CC3B4(uint64_t a1, int **a2)
{
  int *v2;
  int *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  _QWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  _DWORD v11[4];
  void *v12;
  uint64_t v13;
  _QWORD v14[25];

  v14[24] = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = a2[1];
  v4 = *(_QWORD *)(a1 + 8);
  v11[0] = **(_DWORD **)(*(_QWORD *)(a1 + 16) + 80);
  v11[2] = 1;
  v12 = v14;
  v13 = 0x800000000;
  if ((unint64_t)(4 * (_QWORD)v3) >= 0x21)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v12, (uint64_t)v14, (4 * (uint64_t)v3) >> 2, 24);
    v5 = v13;
    v7 = v12;
    v6 = v13;
    if (v3)
    {
LABEL_3:
      v8 = &v7[3 * v5];
      v9 = 4 * (_QWORD)v3;
      do
      {
        v10 = *v2++;
        *v8 = v10;
        v8[4] = 0;
        v8 += 6;
        v9 -= 4;
      }
      while (v9);
      v6 = v13;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = v14;
    if (v3)
      goto LABEL_3;
  }
  LODWORD(v13) = v6 + ((unint64_t)(4 * (_QWORD)v3) >> 2);
  (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _QWORD *))(*(_QWORD *)v4 + 32))(v4, 77, v11, 1, v7);
  if (v12 != v14)
    free(v12);
}

void sub_1C49CC4F4()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C49CC508(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7FA9050;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C49CC540(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA9050;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C49CC560(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _DWORD v6[6];

  v3 = *(char **)a2;
  v2 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  v6[0] = **(_DWORD **)(*(_QWORD *)(a1 + 16) + 80);
  v6[4] = 0;
  return sub_1C5547540(v4, v3, v2, (uint64_t)v6);
}

void sub_1C49CC5A4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C49CC5B8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA9098;
  result[1] = v3;
  return result;
}

uint64_t sub_1C49CC5EC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FA9098;
  a2[1] = v2;
  return result;
}

_QWORD *sub_1C49CC608(_QWORD *result, int *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  v3 = result[1];
  v4 = *(unsigned int *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(result[1], v3 + 16, v4 + 1, 4);
    LODWORD(v4) = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v4) = v2;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

void sub_1C49CC668()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C49CC67C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7FA90E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C49CC6BC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA90E0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C49CC6E4(uint64_t a1, int **a2)
{
  int *v3;
  int *v4;
  llvm::MachineFunction *v5;
  llvm::MachineInstr *v6;
  llvm::MachineInstr *v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  llvm::MachineFunction **v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *a2;
  v4 = a2[1];
  v5 = sub_1C55437B8(*(_QWORD **)(a1 + 8), 0x4Du);
  v7 = v6;
  v8 = **(_DWORD **)(*(_QWORD *)(a1 + 16) + 80);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v14 = 0x1000000;
  v15 = v8;
  llvm::MachineInstr::addOperand(v6, v5, (const llvm::MachineOperand *)&v14);
  if (v4)
  {
    v9 = 4 * (_QWORD)v4;
    do
    {
      v10 = *v3++;
      v16 = 0;
      v14 = 0;
      v15 = v10;
      v17 = 0;
      v18 = 0;
      llvm::MachineInstr::addOperand(v7, v5, (const llvm::MachineOperand *)&v14);
      v9 -= 4;
    }
    while (v9);
  }
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(unsigned int *)(v11 + 8);
  if (v12 >= *(_DWORD *)(v11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v11 + 16, v12 + 1, 16);
    LODWORD(v12) = *(_DWORD *)(v11 + 8);
  }
  v13 = (llvm::MachineFunction **)(*(_QWORD *)v11 + 16 * v12);
  *v13 = v5;
  v13[1] = v7;
  ++*(_DWORD *)(v11 + 8);
}

void sub_1C49CC7D8(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t *v24;
  uint64_t **v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t **v29;
  int v30;
  int v31;
  _QWORD *v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t **v41;
  unsigned int v42;
  uint64_t *v43;
  uint64_t *v44;
  int v45;
  _QWORD *v46;
  uint64_t v47;
  BOOL v48;
  _QWORD *v49;
  unsigned int v50;
  int v51;
  uint64_t *v52;
  uint64_t **i;
  uint64_t **v54;
  int v55;
  uint64_t *v56;
  uint64_t *v57;
  int v58;
  unint64_t v59;
  int *v60;
  int v61;
  size_t v62;
  _QWORD *v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t **v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t **v70;
  uint64_t *v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  int *v75;
  int v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t **v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  unsigned int *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  _QWORD *v101;
  int v102;
  unsigned int v103;
  int v104;
  int v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  size_t v110;
  _QWORD *v111;
  unsigned int v112;
  char *v113;
  uint64_t v114;
  char *v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int *v120;
  uint64_t v121;
  uint64_t v122;
  int *v123;
  uint64_t v124;
  int v125;
  int v126;
  int *v127;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v133;
  uint64_t *v134;
  uint64_t **v135;
  unsigned int *v136;
  int v137;
  uint64_t **v138;
  uint64_t *v139;
  uint64_t v140;
  void *v141[2];
  _BYTE v142[16];
  int v143;
  void *v144;
  uint64_t v145;
  _BYTE v146[16];
  uint64_t v147;
  uint64_t v148[4];
  char *v149;
  uint64_t v150;
  _BYTE v151[160];
  uint64_t v152;
  _QWORD *v153;
  unsigned int v154;
  uint64_t v155;

  v155 = *MEMORY[0x1E0C80C00];
  v3 = ((a1[14] - a1[13]) >> 3);
  v149 = v151;
  v150 = 0;
  *a2 = (uint64_t)(a2 + 2);
  a2[1] = 0;
  sub_1C49CDD8C((uint64_t)a2, v3, (uint64_t)&v149);
  if (v149 != v151)
    free(v149);
  v152 = 1;
  memset_pattern16(&v153, &unk_1C6613B70, 0x10uLL);
  v139 = 0;
  v140 = 0;
  v138 = &v139;
  v4 = a1[41];
  if ((_QWORD *)v4 == a1 + 40)
    goto LABEL_221;
  v5 = 0;
  do
  {
    if (v139)
    {
      v6 = *(_DWORD *)(v4 + 24);
      v7 = v139;
      v8 = (uint64_t *)&v139;
      do
      {
        v9 = v8;
        v10 = v7;
        v11 = *((_DWORD *)v7 + 8);
        v12 = (uint64_t **)(v7 + 1);
        if (v11 >= v6)
          v8 = v7;
        else
          ++v7;
        v7 = (uint64_t *)*v7;
      }
      while (v7);
      if (v8 != (uint64_t *)&v139)
      {
        v13 = v11 >= v6 ? v10 : v9;
        if (v6 >= *((_DWORD *)v13 + 8))
        {
          if (v11 < v6)
            v12 = (uint64_t **)(v9 + 1);
          v14 = *v12;
          v15 = v8;
          if (*v12)
          {
            do
            {
              v16 = (uint64_t **)v14;
              v14 = (uint64_t *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              v16 = (uint64_t **)v15[2];
              v48 = *v16 == v15;
              v15 = (uint64_t *)v16;
            }
            while (!v48);
          }
          if (v138 == (uint64_t **)v8)
            v138 = v16;
          --v140;
          sub_1C485B6E0(v139, v8);
          if (v11 >= v6)
            v17 = v10;
          else
            v17 = v9;
          v18 = (void *)v17[5];
          v19 = v9 + 7;
          if (v11 >= v6)
            v19 = v10 + 7;
          if (v18 != v19)
            free(v18);
          operator delete(v8);
        }
      }
    }
    v20 = *(_QWORD *)(v4 + 88);
    v21 = *(_QWORD *)(v4 + 96);
    v22 = -1;
    while (v20 != v21)
    {
      v23 = *(_DWORD *)(*(_QWORD *)v20 + 24);
      if (v23 > *(_DWORD *)(v4 + 24))
      {
        if (v22 <= v23)
          v22 = *(_DWORD *)(*(_QWORD *)v20 + 24);
        LODWORD(v147) = *(_DWORD *)(*(_QWORD *)v20 + 24);
        sub_1C49CDFE0((uint64_t)&v149, (uint64_t)&v152, (int *)&v147);
      }
      v20 += 8;
    }
    v24 = v139;
    v25 = &v139;
    if (v139)
    {
      v25 = &v139;
      do
      {
        v26 = *((_DWORD *)v24 + 8);
        v27 = v26 < v22;
        if (v26 >= v22)
          v28 = v24;
        else
          v28 = v24 + 1;
        if (!v27)
          v25 = (uint64_t **)v24;
        v24 = (uint64_t *)*v28;
      }
      while (*v28);
    }
    v29 = v138;
    if (v138 != v25)
    {
      do
      {
        v30 = *((_DWORD *)v29 + 8);
        if ((v152 & 1) != 0)
        {
          v31 = 4;
          v32 = &v153;
        }
        else
        {
          v31 = v154;
          if (!v154)
            goto LABEL_58;
          v32 = v153;
        }
        v33 = v31 - 1;
        v34 = v33 & (37 * v30);
        v35 = *((_DWORD *)v32 + v34);
        if (v30 != v35)
        {
          v36 = 1;
          while (v35 != 0x7FFFFFFF)
          {
            v37 = v34 + v36++;
            v34 = v37 & v33;
            v35 = *((_DWORD *)v32 + v34);
            if (v30 == v35)
              goto LABEL_61;
          }
LABEL_58:
          v38 = *a2 + 16 * *(int *)(v4 + 24);
          v39 = *(unsigned int *)(v38 + 8);
          if (v39 >= *(unsigned int *)(v38 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(*a2 + 16 * *(int *)(v4 + 24), v38 + 16, v39 + 1, 4);
            v39 = *(unsigned int *)(v38 + 8);
          }
          *(_DWORD *)(*(_QWORD *)v38 + 4 * v39) = v30;
          ++*(_DWORD *)(v38 + 8);
        }
LABEL_61:
        v40 = v29[1];
        if (v40)
        {
          do
          {
            v41 = (uint64_t **)v40;
            v40 = (uint64_t *)*v40;
          }
          while (v40);
        }
        else
        {
          do
          {
            v41 = (uint64_t **)v29[2];
            v48 = *v41 == (uint64_t *)v29;
            v29 = v41;
          }
          while (!v48);
        }
        v29 = v41;
      }
      while (v41 != v25);
    }
    v42 = v152;
    v131 = v4;
    if (v152 <= 1)
    {
      if ((_DWORD)v152)
      {
        v46 = &v153;
        v47 = 4;
      }
      else
      {
        v46 = v153;
        v47 = v154;
      }
      v44 = (_QWORD *)((char *)v46 + 4 * v47);
      v45 = v152;
      v43 = v44;
    }
    else
    {
      v43 = &v155;
      v44 = (uint64_t *)&v153;
      if ((v152 & 1) == 0)
      {
        v44 = v153;
        v45 = v154;
        if (!v154)
        {
          v43 = v153;
          goto LABEL_76;
        }
        v43 = (_QWORD *)((char *)v153 + 4 * v154);
      }
      v45 = v152 & 1;
      while ((*(_DWORD *)v44 - 0x7FFFFFFF) <= 1)
      {
        v44 = (uint64_t *)((char *)v44 + 4);
        if (v44 == v43)
        {
          v44 = v43;
          break;
        }
      }
    }
LABEL_76:
    v48 = v45 == 0;
    if (v45)
      v49 = &v153;
    else
      v49 = v153;
    v50 = v154;
    if (!v48)
      v50 = 4;
    v134 = (_QWORD *)((char *)v49 + 4 * v50);
    if (v44 != v134)
    {
      do
      {
        v51 = *(_DWORD *)v44;
        v52 = v139;
        for (i = &v139; ; v52 = *i)
        {
          v54 = i;
          if (!v52)
            break;
          while (1)
          {
            i = (uint64_t **)v52;
            v55 = *((_DWORD *)v52 + 8);
            if (v55 > v51)
              break;
            if (v55 >= v51)
              goto LABEL_92;
            v52 = i[1];
            if (!v52)
            {
              v54 = i + 1;
              goto LABEL_89;
            }
          }
        }
LABEL_89:
        v56 = (uint64_t *)i;
        i = (uint64_t **)operator new(0x40uLL);
        *((_DWORD *)i + 8) = v51;
        i[5] = (uint64_t *)(i + 7);
        i[6] = (uint64_t *)0x200000000;
        *i = 0;
        i[1] = 0;
        i[2] = v56;
        *v54 = (uint64_t *)i;
        v57 = (uint64_t *)i;
        if (*v138)
        {
          v138 = (uint64_t **)*v138;
          v57 = *v54;
        }
        sub_1C4768E74(v139, v57);
        ++v140;
        v4 = v131;
LABEL_92:
        v58 = *(_DWORD *)(v4 + 24);
        v59 = *((unsigned int *)i + 12);
        if (v59 >= *((unsigned int *)i + 13))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(i + 5), (uint64_t)(i + 7), v59 + 1, 4);
          v59 = *((unsigned int *)i + 12);
        }
        *((_DWORD *)i[5] + v59) = v58;
        ++*((_DWORD *)i + 12);
        v60 = (int *)v44 + 1;
        while (v60 != (int *)v43)
        {
          v61 = *v60++;
          if ((v61 - 0x7FFFFFFF) >= 2)
          {
            v44 = (uint64_t *)(v60 - 1);
            goto LABEL_99;
          }
        }
        v44 = v43;
LABEL_99:
        ;
      }
      while (v44 != v134);
      v42 = v152;
    }
    if (v42 <= 1 && !HIDWORD(v152))
      goto LABEL_107;
    if ((v42 & 1) != 0)
    {
      v62 = 16;
      v63 = &v153;
    }
    else
    {
      v116 = (2 * v42) & 0xFFFFFFFC;
      v64 = v154;
      v62 = 4 * v154;
      if (v116 < v154)
      {
        if (v154 > 0x40)
        {
          sub_1C614DE18((unsigned int *)&v152);
          v4 = v131;
          goto LABEL_107;
        }
      }
      else if (!v154)
      {
        v4 = v131;
        goto LABEL_106;
      }
      v63 = v153;
      v4 = v131;
    }
    memset_pattern16(v63, &unk_1C6613B70, v62);
    v64 = v152 & 1;
LABEL_106:
    v152 = v64;
LABEL_107:
    v65 = sub_1C4AD5250(v4);
    if (!v65)
      goto LABEL_192;
    v66 = v65;
    v149 = v151;
    v150 = 0x400000000;
    v147 = 1;
    memset_pattern16(v148, &unk_1C6613B70, 0x20uLL);
    v67 = &v139;
    v135 = v138;
    if (&v139 == v138)
      goto LABEL_181;
    do
    {
      v68 = *v67;
      v69 = *v67;
      v70 = v67;
      if (*v67)
      {
        do
        {
          v71 = v69;
          v69 = (uint64_t *)v69[1];
        }
        while (v69);
      }
      else
      {
        do
        {
          v71 = v70[2];
          v48 = *v71 == (_QWORD)v70;
          v70 = (uint64_t **)v71;
        }
        while (v48);
      }
      v72 = *((unsigned int *)v71 + 12);
      if ((_DWORD)v72)
      {
        v73 = (int *)v71[5];
        v74 = 4 * v72;
        while (1)
        {
          v137 = 0;
          v137 = *v73;
          if (v137 >= *(_DWORD *)(v66 + 24))
            break;
LABEL_132:
          ++v73;
          v74 -= 4;
          if (!v74)
          {
            v68 = *v67;
            goto LABEL_138;
          }
        }
        if ((_DWORD)v150)
        {
          v75 = (int *)v149;
          v76 = *((_DWORD *)v71 + 8);
          if (*(_DWORD *)&v149[40 * v150 - 40] == v76)
          {
LABEL_128:
            sub_1C49CE3B4((uint64_t)&v147, &v137, (uint64_t)&v143);
            if ((_BYTE)v145)
            {
              v81 = v66;
              v82 = &v149[40 * v150];
              v83 = v137;
              v84 = *((unsigned int *)v82 - 6);
              if (v84 >= *((unsigned int *)v82 - 5))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v82 - 32), (uint64_t)(v82 - 16), v84 + 1, 4);
                v84 = *((unsigned int *)v82 - 6);
              }
              *(_DWORD *)(*((_QWORD *)v82 - 4) + 4 * v84) = v83;
              ++*((_DWORD *)v82 - 6);
              v66 = v81;
            }
            goto LABEL_132;
          }
          v77 = v150;
        }
        else
        {
          v77 = 0;
          v76 = *((_DWORD *)v71 + 8);
          v75 = (int *)v149;
        }
        v141[0] = v142;
        v141[1] = (void *)0x400000000;
        v143 = v76;
        v144 = v146;
        v145 = 0x400000000;
        if (v150 >= HIDWORD(v150))
        {
          v85 = v77 + 1;
          if (v75 <= &v143 && &v75[10 * v77] > &v143)
          {
            v86 = (char *)((char *)&v143 - (char *)v75);
            sub_1C614DEE4((uint64_t)&v149, v85);
            v75 = (int *)v149;
            v78 = &v86[(_QWORD)v149];
          }
          else
          {
            sub_1C614DEE4((uint64_t)&v149, v85);
            v78 = (char *)&v143;
            v75 = (int *)v149;
          }
        }
        else
        {
          v78 = (char *)&v143;
        }
        v79 = (char *)&v75[10 * v150];
        *(_DWORD *)v79 = *(_DWORD *)v78;
        *((_QWORD *)v79 + 2) = 0x400000000;
        *((_QWORD *)v79 + 1) = v79 + 24;
        v80 = (uint64_t)(v79 + 8);
        if (*((_DWORD *)v78 + 4))
          sub_1C614C900(v80, (uint64_t)(v78 + 8));
        LODWORD(v150) = v150 + 1;
        if (v144 != v146)
          free(v144);
        if (v141[0] != v142)
          free(v141[0]);
        goto LABEL_128;
      }
LABEL_138:
      if (v68)
      {
        do
        {
          v87 = (uint64_t **)v68;
          v68 = (uint64_t *)v68[1];
        }
        while (v68);
      }
      else
      {
        do
        {
          v87 = (uint64_t **)v67[2];
          v48 = *v87 == (uint64_t *)v67;
          v67 = v87;
        }
        while (v48);
      }
      v67 = v87;
    }
    while (v87 != v135);
    if ((int)v150 < 2)
      goto LABEL_181;
    v88 = 0;
    v130 = (v150 - 1);
    v133 = v150 - 1;
    while (2)
    {
      v89 = &v149[40 * v88];
      v90 = *((unsigned int *)v89 + 4);
      if (!(_DWORD)v90)
        goto LABEL_180;
      v91 = (unsigned int *)*((_QWORD *)v89 + 1);
      v136 = &v91[v90];
      while (2)
      {
        v92 = *v91;
        v93 = (int)v92;
        v94 = *(_QWORD *)(a1[13] + 8 * v92);
        v95 = *(uint64_t **)(v94 + 88);
        v96 = *(uint64_t **)(v94 + 96);
        while (v95 != v96)
        {
          v97 = *v95++;
          LODWORD(v141[0]) = *(_DWORD *)(v97 + 24);
          sub_1C49CDFE0((uint64_t)&v143, (uint64_t)&v152, (int *)v141);
        }
        v98 = v133;
        while (2)
        {
          v99 = *(_DWORD *)&v149[40 * v98];
          if ((v152 & 1) != 0)
          {
            v100 = 4;
            v101 = &v153;
            goto LABEL_153;
          }
          v100 = v154;
          if (v154)
          {
            v101 = v153;
LABEL_153:
            v102 = v100 - 1;
            v103 = v102 & (37 * v99);
            v104 = *((_DWORD *)v101 + v103);
            if (v99 != v104)
            {
              v105 = 1;
              while (v104 != 0x7FFFFFFF)
              {
                v106 = v103 + v105++;
                v103 = v106 & v102;
                v104 = *((_DWORD *)v101 + v103);
                if (v99 == v104)
                  goto LABEL_163;
              }
              goto LABEL_160;
            }
          }
          else
          {
LABEL_160:
            v107 = *a2 + 16 * v93;
            v108 = *(unsigned int *)(v107 + 8);
            if (v108 >= *(unsigned int *)(v107 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(*a2 + 16 * v93, v107 + 16, v108 + 1, 4);
              v108 = *(unsigned int *)(v107 + 8);
            }
            *(_DWORD *)(*(_QWORD *)v107 + 4 * v108) = v99;
            ++*(_DWORD *)(v107 + 8);
            v5 = 1;
          }
LABEL_163:
          if (--v98 > v88)
            continue;
          break;
        }
        if (v152 > 1 || HIDWORD(v152) != 0)
        {
          if ((v152 & 1) != 0)
          {
            v110 = 16;
            v111 = &v153;
            goto LABEL_170;
          }
          v112 = v154;
          v110 = 4 * v154;
          if (((2 * (_DWORD)v152) & 0xFFFFFFFC) >= v154)
          {
            if (!v154)
              goto LABEL_171;
            goto LABEL_178;
          }
          if (v154 > 0x40)
          {
            sub_1C614DE18((unsigned int *)&v152);
          }
          else
          {
LABEL_178:
            v111 = v153;
LABEL_170:
            memset_pattern16(v111, &unk_1C6613B70, v110);
            v112 = v152 & 1;
LABEL_171:
            v152 = v112;
          }
        }
        if (++v91 != v136)
          continue;
        break;
      }
LABEL_180:
      if (++v88 != v130)
        continue;
      break;
    }
LABEL_181:
    if ((v147 & 1) == 0)
      MEMORY[0x1CAA32FB4](v148[0], 4);
    v113 = v149;
    v4 = v131;
    if ((_DWORD)v150)
    {
      v114 = 40 * v150;
      do
      {
        v115 = *(char **)&v113[v114 - 32];
        if (&v113[v114 - 16] != v115)
          free(v115);
        v114 -= 40;
      }
      while (v114);
      v113 = v149;
    }
    if (v113 != v151)
      free(v113);
LABEL_192:
    v4 = *(_QWORD *)(v4 + 8);
  }
  while ((_QWORD *)v4 != a1 + 40);
  if ((v5 & 1) != 0)
  {
    v117 = *((unsigned int *)a2 + 2);
    if ((_DWORD)v117)
    {
      v118 = *a2;
      v119 = v118 + 16 * v117;
      do
      {
        std::__sort<std::__less<int,int> &,int *>();
        v120 = *(int **)v118;
        v121 = *(unsigned int *)(v118 + 8);
        v122 = *(_QWORD *)v118 + 4 * v121;
        if ((_DWORD)v121)
        {
          v123 = v120 - 1;
          v124 = 4 * v121 - 4;
          while (v124)
          {
            v125 = v123[1];
            v126 = v123[2];
            ++v123;
            v124 -= 4;
            if (v125 == v126)
              goto LABEL_213;
          }
        }
        else
        {
          v123 = *(int **)v118;
LABEL_213:
          if (v123 != (int *)v122)
          {
            v127 = v123 + 2;
            if (v123 + 2 != (int *)v122)
            {
              v128 = *v123;
              do
              {
                v129 = v128;
                v128 = *v127;
                if (v129 != *v127)
                {
                  v123[1] = v128;
                  ++v123;
                }
                ++v127;
              }
              while (v127 != (int *)v122);
            }
            v122 = (uint64_t)(v123 + 1);
          }
        }
        *(_DWORD *)(v118 + 8) = (unint64_t)(v122 - (_QWORD)v120) >> 2;
        v118 += 16;
      }
      while (v118 != v119);
    }
  }
LABEL_221:
  sub_1C49CDF84(v139);
  if ((v152 & 1) == 0)
    MEMORY[0x1CAA32FB4](v153, 4);
}

void sub_1C49CD49C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13[2];
  uint64_t v14;

  v4 = *(unsigned int *)(a1 + 8);
  v13[0] = &v14;
  v13[1] = 0;
  *a2 = a2 + 2;
  a2[1] = 0;
  sub_1C49CDD8C((uint64_t)a2, v4, (uint64_t)v13);
  if (v13[0] != &v14)
    free(v13[0]);
  v5 = *(unsigned int *)(a1 + 8);
  if ((int)v5 >= 1)
  {
    for (i = 0; i != v5; ++i)
    {
      v7 = *(_QWORD *)a1 + 16 * i;
      v8 = *(unsigned int *)(v7 + 8);
      if ((_DWORD)v8)
      {
        v9 = *(int **)v7;
        v10 = 4 * v8;
        do
        {
          v11 = *a2 + 16 * *v9;
          v12 = *(unsigned int *)(v11 + 8);
          if (v12 >= *(unsigned int *)(v11 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(*a2 + 16 * *v9, v11 + 16, v12 + 1, 4);
            v12 = *(unsigned int *)(v11 + 8);
          }
          *(_DWORD *)(*(_QWORD *)v11 + 4 * v12) = i;
          ++*(_DWORD *)(v11 + 8);
          ++v9;
          v10 -= 4;
        }
        while (v10);
      }
    }
  }
}

void sub_1C49CD5AC(_QWORD *a1, uint64_t a2, llvm::raw_ostream *a3)
{
  size_t v6;
  char *Name;
  size_t v8;
  _WORD *v9;
  llvm::raw_ostream *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  unint64_t v15;
  int v16;
  llvm::Value *v17;
  uint64_t v18;
  _BYTE *v19;
  llvm::Value *v20;
  size_t v21;
  char *v22;
  size_t v23;
  _WORD *v24;
  llvm::raw_ostream *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  const char *v30;
  _WORD *v31;
  _DWORD *v32;
  llvm::raw_ostream *v33;
  unint64_t v34;
  int v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  const char *v42;
  _WORD *v43;
  _DWORD *v44;
  llvm::raw_ostream *v45;
  unint64_t v46;
  int v47;
  _BYTE *v48;
  uint64_t v49;
  char v50;
  __int16 v51;
  int v52;
  int v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  unint64_t v60;
  uint64_t v61;
  _WORD *v62;
  llvm::raw_ostream *v63;
  _BYTE *v64;
  uint64_t v65;

  Name = llvm::Value::getName(*(llvm::Value **)a2);
  v8 = v6;
  v9 = (_WORD *)*((_QWORD *)a3 + 4);
  if (v6 <= *((_QWORD *)a3 + 3) - (_QWORD)v9)
  {
    if (v6)
    {
      memcpy(v9, Name, v6);
      v9 = (_WORD *)(*((_QWORD *)a3 + 4) + v8);
      *((_QWORD *)a3 + 4) = v9;
    }
    v10 = a3;
  }
  else
  {
    v10 = llvm::raw_ostream::write(a3, Name, v6);
    v9 = (_WORD *)*((_QWORD *)v10 + 4);
  }
  if (*((_QWORD *)v10 + 3) - (_QWORD)v9 > 1uLL)
  {
    *v9 = 2618;
    *((_QWORD *)v10 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v10, ":\n", 2uLL);
  }
  v11 = a2 + 320;
  v12 = *(_QWORD *)(a2 + 328);
  v65 = v11;
  while (v12 != v65)
  {
    v13 = *((_QWORD *)a3 + 4);
    if ((unint64_t)(*((_QWORD *)a3 + 3) - v13) > 2)
    {
      *(_BYTE *)(v13 + 2) = 46;
      *(_WORD *)v13 = 25186;
      *((_QWORD *)a3 + 4) += 3;
      v14 = a3;
    }
    else
    {
      v14 = llvm::raw_ostream::write(a3, "bb.", 3uLL);
    }
    v15 = *(int *)(v12 + 24);
    if ((v15 & 0x80000000) != 0)
    {
      v15 = -(uint64_t)v15;
      v16 = 1;
    }
    else
    {
      v16 = 0;
    }
    sub_1C5E21910(v14, v15, 0, 0, v16);
    v17 = *(llvm::Value **)(v12 + 16);
    if (!v17)
      goto LABEL_20;
    llvm::Value::getName(v17);
    if (v18)
    {
      v19 = (_BYTE *)*((_QWORD *)a3 + 4);
      if (*((_BYTE **)a3 + 3) == v19)
      {
        llvm::raw_ostream::write(a3, ".", 1uLL);
      }
      else
      {
        *v19 = 46;
        ++*((_QWORD *)a3 + 4);
      }
    }
    v20 = *(llvm::Value **)(v12 + 16);
    if (v20)
    {
      v22 = llvm::Value::getName(v20);
      v23 = v21;
      v24 = (_WORD *)*((_QWORD *)a3 + 4);
      if (v21 > *((_QWORD *)a3 + 3) - (_QWORD)v24)
      {
        v25 = llvm::raw_ostream::write(a3, v22, v21);
        v24 = (_WORD *)*((_QWORD *)v25 + 4);
        goto LABEL_22;
      }
      if (v21)
      {
        memcpy(v24, v22, v21);
        v24 = (_WORD *)(*((_QWORD *)a3 + 4) + v23);
        *((_QWORD *)a3 + 4) = v24;
      }
    }
    else
    {
LABEL_20:
      v24 = (_WORD *)*((_QWORD *)a3 + 4);
    }
    v25 = a3;
LABEL_22:
    if (*((_QWORD *)v25 + 3) - (_QWORD)v24 > 1uLL)
    {
      *v24 = 2618;
      *((_QWORD *)v25 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v25, ":\n", 2uLL);
    }
    if (*(_QWORD *)(v12 + 88) != *(_QWORD *)(v12 + 96))
    {
      v26 = *((_QWORD *)a3 + 4);
      if ((unint64_t)(*((_QWORD *)a3 + 3) - v26) > 0x12)
      {
        *(_DWORD *)(v26 + 15) = 1936879475;
        *(_OWORD *)v26 = *(_OWORD *)"  thread-successors";
        *((_QWORD *)a3 + 4) += 19;
      }
      else
      {
        llvm::raw_ostream::write(a3, "  thread-successors", 0x13uLL);
      }
      v27 = *(uint64_t **)(v12 + 88);
      v28 = *(uint64_t **)(v12 + 96);
      while (v27 != v28)
      {
        v29 = *v27;
        if (*v27 == **(_QWORD **)(v12 + 88))
          v30 = ": ";
        else
          v30 = ", ";
        v31 = (_WORD *)*((_QWORD *)a3 + 4);
        if (*((_QWORD *)a3 + 3) - (_QWORD)v31 > 1uLL)
        {
          *v31 = *(_WORD *)v30;
          v32 = (_DWORD *)(*((_QWORD *)a3 + 4) + 2);
          *((_QWORD *)a3 + 4) = v32;
        }
        else
        {
          llvm::raw_ostream::write(a3, v30, 2uLL);
          v32 = (_DWORD *)*((_QWORD *)a3 + 4);
        }
        if (*((_QWORD *)a3 + 3) - (_QWORD)v32 > 3uLL)
        {
          *v32 = 778199589;
          *((_QWORD *)a3 + 4) += 4;
          v33 = a3;
        }
        else
        {
          v33 = llvm::raw_ostream::write(a3, "%bb.", 4uLL);
        }
        v34 = *(int *)(v29 + 24);
        if ((v34 & 0x80000000) != 0)
        {
          v34 = -(uint64_t)v34;
          v35 = 1;
        }
        else
        {
          v35 = 0;
        }
        sub_1C5E21910(v33, v34, 0, 0, v35);
        ++v27;
      }
      v36 = (_BYTE *)*((_QWORD *)a3 + 4);
      if (*((_BYTE **)a3 + 3) == v36)
      {
        llvm::raw_ostream::write(a3, "\n", 1uLL);
      }
      else
      {
        *v36 = 10;
        ++*((_QWORD *)a3 + 4);
      }
    }
    if (*(_DWORD *)(*a1 + 16 * *(int *)(v12 + 24) + 8))
    {
      v37 = *((_QWORD *)a3 + 4);
      if ((unint64_t)(*((_QWORD *)a3 + 3) - v37) > 0x10)
      {
        *(_BYTE *)(v37 + 16) = 115;
        *(_OWORD *)v37 = *(_OWORD *)"  simd-successors";
        *((_QWORD *)a3 + 4) += 17;
      }
      else
      {
        llvm::raw_ostream::write(a3, "  simd-successors", 0x11uLL);
      }
      v38 = *a1 + 16 * *(int *)(v12 + 24);
      v39 = *(unsigned int *)(v38 + 8);
      if ((_DWORD)v39)
      {
        v40 = *(int **)v38;
        v41 = 4 * v39;
        do
        {
          if (v40 == *(int **)(*a1 + 16 * *(int *)(v12 + 24)))
            v42 = ": ";
          else
            v42 = ", ";
          v43 = (_WORD *)*((_QWORD *)a3 + 4);
          if (*((_QWORD *)a3 + 3) - (_QWORD)v43 > 1uLL)
          {
            *v43 = *(_WORD *)v42;
            v44 = (_DWORD *)(*((_QWORD *)a3 + 4) + 2);
            *((_QWORD *)a3 + 4) = v44;
          }
          else
          {
            llvm::raw_ostream::write(a3, v42, 2uLL);
            v44 = (_DWORD *)*((_QWORD *)a3 + 4);
          }
          if (*((_QWORD *)a3 + 3) - (_QWORD)v44 > 3uLL)
          {
            *v44 = 778199589;
            *((_QWORD *)a3 + 4) += 4;
            v45 = a3;
          }
          else
          {
            v45 = llvm::raw_ostream::write(a3, "%bb.", 4uLL);
          }
          v46 = *v40;
          if ((v46 & 0x80000000) != 0)
          {
            v46 = -(uint64_t)v46;
            v47 = 1;
          }
          else
          {
            v47 = 0;
          }
          sub_1C5E21910(v45, v46, 0, 0, v47);
          ++v40;
          v41 -= 4;
        }
        while (v41);
      }
      v48 = (_BYTE *)*((_QWORD *)a3 + 4);
      if (*((_BYTE **)a3 + 3) == v48)
      {
        llvm::raw_ostream::write(a3, "\n", 1uLL);
      }
      else
      {
        *v48 = 10;
        ++*((_QWORD *)a3 + 4);
      }
    }
    v49 = *(_QWORD *)(v12 + 56);
    if (v49 != v12 + 48)
    {
      v50 = 0;
      do
      {
        v51 = *(_WORD *)(v49 + 44);
        v52 = v51 & 0xC;
        if ((v51 & 0xC) != 0 && (v51 & 4) == 0)
        {
          if (llvm::MachineInstr::hasPropertyInBundle(v49, 32, 1))
            goto LABEL_99;
          v51 = *(_WORD *)(v49 + 44);
          v52 = v51 & 0xC;
        }
        else if ((*(_BYTE *)(*(_QWORD *)(v49 + 16) + 8) & 0x20) != 0)
        {
          goto LABEL_99;
        }
        v54 = v51 & 4;
        if (v52)
          v55 = v54 == 0;
        else
          v55 = 0;
        if (v55)
        {
          if (llvm::MachineInstr::hasPropertyInBundle(v49, 1024, 1))
            goto LABEL_99;
          v56 = *(_QWORD *)(v49 + 16);
        }
        else
        {
          v56 = *(_QWORD *)(v49 + 16);
          if ((*(_BYTE *)(v56 + 9) & 4) != 0)
            goto LABEL_99;
        }
        if ((*(_BYTE *)(v56 + 16) & 0x40) == 0)
        {
          v57 = *(unsigned int *)(v49 + 40);
          if (!(_DWORD)v57)
          {
LABEL_85:
            if ((v50 & 1) == 0)
            {
              v61 = *((_QWORD *)a3 + 4);
              if ((unint64_t)(*((_QWORD *)a3 + 3) - v61) > 9)
              {
                *(_WORD *)(v61 + 8) = 2622;
                *(_QWORD *)v61 = *(_QWORD *)"  ; <...>\n";
                *((_QWORD *)a3 + 4) += 10;
              }
              else
              {
                llvm::raw_ostream::write(a3, "  ; <...>\n", 0xAuLL);
              }
            }
            v50 = 1;
            goto LABEL_89;
          }
          v58 = 32 * v57;
          v59 = (unsigned int *)(*(_QWORD *)(v49 + 32) + 4);
          while (1)
          {
            if (!*((_BYTE *)v59 - 4))
            {
              v60 = *v59;
              if ((_DWORD)v60 == 267
                || (v60 - 1) <= 0x56
                && ((byte_1C69FEF1A[v60 >> 3] >> (v60 & 7)) & 1) != 0)
              {
                break;
              }
            }
            v59 += 8;
            v58 -= 32;
            if (!v58)
              goto LABEL_85;
          }
        }
LABEL_99:
        v62 = (_WORD *)*((_QWORD *)a3 + 4);
        if (*((_QWORD *)a3 + 3) - (_QWORD)v62 > 1uLL)
        {
          *v62 = 8224;
          *((_QWORD *)a3 + 4) += 2;
          v63 = a3;
        }
        else
        {
          v63 = llvm::raw_ostream::write(a3, "  ", 2uLL);
        }
        llvm::MachineInstr::print((llvm::MachineInstr *)v49, v63, 1, 0, 0, 1, 0);
        v50 = 0;
LABEL_89:
        if ((*(_BYTE *)v49 & 4) == 0)
        {
          while ((*(_WORD *)(v49 + 44) & 8) != 0)
            v49 = *(_QWORD *)(v49 + 8);
        }
        v49 = *(_QWORD *)(v49 + 8);
      }
      while (v49 != v12 + 48);
    }
    v64 = (_BYTE *)*((_QWORD *)a3 + 4);
    if (*((_BYTE **)a3 + 3) == v64)
    {
      llvm::raw_ostream::write(a3, "\n", 1uLL);
    }
    else
    {
      *v64 = 10;
      ++*((_QWORD *)a3 + 4);
    }
    v12 = *(_QWORD *)(v12 + 8);
  }
}

uint64_t sub_1C49CDD20(const void **a1, const void *a2, size_t __n)
{
  size_t v3;
  char *v6;
  size_t v8;

  v3 = (size_t)a1[1];
  if (v3 < __n)
    return 0;
  v6 = (char *)*a1;
  if (__n)
  {
    if (memcmp(*a1, a2, __n))
      return 0;
  }
  if (v3 >= __n)
    v8 = __n;
  else
    v8 = v3;
  *a1 = &v6[v8];
  a1[1] = (const void *)(v3 - v8);
  return 1;
}

void sub_1C49CDD8C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;

  if (*(unsigned int *)(a1 + 12) >= a2)
  {
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= a2)
      v7 = a2;
    else
      v7 = *(unsigned int *)(a1 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)a1;
      do
      {
        sub_1C614CA14(v8, a3);
        v8 += 16;
        --v7;
      }
      while (v7);
      v6 = *(unsigned int *)(a1 + 8);
    }
    v9 = v6 - a2;
    if (v6 >= a2)
    {
      if (v6 > a2)
      {
        v13 = *(_QWORD *)a1 + 16 * v6;
        v14 = 16 * a2 - 16 * v6;
        v15 = v13;
        do
        {
          v17 = *(void **)(v15 - 16);
          v15 -= 16;
          v16 = v17;
          if ((void *)v13 != v17)
            free(v16);
          v13 = v15;
          v14 += 16;
        }
        while (v14);
      }
    }
    else
    {
      v10 = (_QWORD *)(*(_QWORD *)a1 + 16 * v6);
      do
      {
        v11 = v10 + 2;
        *v10 = v10 + 2;
        v10[1] = 0;
        if (*(_DWORD *)(a3 + 8))
          sub_1C614CA14((uint64_t)v10, a3);
        v10 = v11;
      }
      while (!__CFADD__(v9++, 1));
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
  else
  {
    sub_1C49CDE98(a1, a2, a3);
  }
}

_QWORD *sub_1C49CDE98(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *result;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;

  v19 = 0;
  result = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 16, &v19);
  if (a2)
  {
    v7 = result;
    v8 = a2;
    do
    {
      v9 = v7 + 2;
      *v7 = v7 + 2;
      v7[1] = 0;
      if (*(_DWORD *)(a3 + 8))
      {
        v15 = v8;
        v16 = result;
        sub_1C614CA14((uint64_t)v7, a3);
        v8 = v15;
        result = v16;
      }
      v7 = v9;
      --v8;
    }
    while (v8);
  }
  v10 = *(char **)a1;
  v11 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v11)
  {
    v17 = result;
    v13 = 16 * v11;
    do
    {
      v14 = *(char **)&v10[v13 - 16];
      if (&v10[v13] != v14)
        free(v14);
      v13 -= 16;
    }
    while (v13);
    v10 = *(char **)a1;
    result = v17;
  }
  v12 = v19;
  if (v10 != (char *)(a1 + 16))
  {
    v18 = result;
    free(v10);
    result = v18;
  }
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = v12;
  return result;
}

void sub_1C49CDF84(_QWORD *a1)
{
  _QWORD *v2;

  if (a1)
  {
    sub_1C49CDF84(*a1);
    sub_1C49CDF84(a1[1]);
    v2 = (_QWORD *)a1[5];
    if (v2 != a1 + 7)
      free(v2);
    operator delete(a1);
  }
}

uint64_t sub_1C49CDFE0(uint64_t result, uint64_t a2, int *a3)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int *v9;
  int v10;
  int *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  int *v25;

  v3 = a2 + 8;
  v4 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 & 1) != 0)
  {
    v5 = 4;
    v6 = a2 + 8;
  }
  else
  {
    v5 = *(_DWORD *)(a2 + 16);
    if (!v5)
    {
      v9 = 0;
      v13 = 0;
      goto LABEL_9;
    }
    v6 = *(_QWORD *)(a2 + 8);
  }
  v7 = v5 - 1;
  v8 = (37 * *a3) & (v5 - 1);
  v9 = (int *)(v6 + 4 * v8);
  v10 = *v9;
  if (*a3 == *v9)
  {
LABEL_23:
    if ((v4 & 1) != 0)
    {
      v20 = 4;
    }
    else
    {
      v3 = *(_QWORD *)(a2 + 8);
      v20 = *(unsigned int *)(a2 + 16);
    }
    v17 = 0;
    v16 = v3 + 4 * v20;
    goto LABEL_16;
  }
  v11 = 0;
  v12 = 1;
  while (v10 != 0x7FFFFFFF)
  {
    if (v11)
      v18 = 0;
    else
      v18 = v10 == 0x80000000;
    if (v18)
      v11 = v9;
    v19 = v8 + v12++;
    v8 = v19 & v7;
    v9 = (int *)(v6 + 4 * (v19 & v7));
    v10 = *v9;
    if (*a3 == *v9)
      goto LABEL_23;
  }
  if ((v4 & 1) != 0 && !v11)
    goto LABEL_8;
  if (v11)
    v9 = v11;
  if ((v4 & 1) != 0)
LABEL_8:
    v13 = 4;
  else
    v13 = *(_DWORD *)(a2 + 16);
LABEL_9:
  v14 = v4 >> 1;
  if (4 * v14 + 4 >= 3 * v13)
  {
    v13 *= 2;
    goto LABEL_35;
  }
  if (v13 + ~v14 - *(_DWORD *)(a2 + 4) <= v13 >> 3)
  {
LABEL_35:
    v22 = result;
    v24 = a2;
    v23 = a3;
    v21 = a2 + 8;
    sub_1C49CE248(a2, v13);
    v25 = 0;
    sub_1C49CE1AC(v24, *v23, &v25);
    v3 = v21;
    result = v22;
    a3 = v23;
    a2 = v24;
    v9 = v25;
  }
  *(_DWORD *)a2 += 2;
  if (*v9 != 0x7FFFFFFF)
    --*(_DWORD *)(a2 + 4);
  *v9 = *a3;
  if ((*(_BYTE *)a2 & 1) != 0)
  {
    v15 = 4;
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 8);
    v15 = *(unsigned int *)(a2 + 16);
  }
  v16 = v3 + 4 * v15;
  v17 = 1;
LABEL_16:
  *(_QWORD *)result = v9;
  *(_QWORD *)(result + 8) = v16;
  *(_BYTE *)(result + 16) = v17;
  return result;
}

uint64_t sub_1C49CE1AC(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  _DWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;

  v3 = result + 8;
  if ((*(_BYTE *)result & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      v7 = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(result + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & (37 * a2);
  v7 = (_DWORD *)(v3 + 4 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 0;
    v10 = 1;
    while (v8 != 0x7FFFFFFF)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == 0x80000000;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_DWORD *)(v3 + 4 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_8;
    }
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

void sub_1C49CE248(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  int *v8;
  uint64_t i;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13[4];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(int **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v12 = a2;
      *(_QWORD *)(a1 + 8) = operator new(4 * a2, (std::align_val_t)4uLL);
      *(_QWORD *)(a1 + 16) = v12;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C614DD5C(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v13;
  for (i = 8; i != 24; i += 4)
  {
    v10 = *(_DWORD *)(a1 + i);
    if ((v10 - 0x7FFFFFFF) >= 2)
      *v8++ = v10;
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(4 * a2, (std::align_val_t)4uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  sub_1C614DD5C(a1, v13, v8);
}

_DWORD *sub_1C49CE3B4@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *result;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;

  v14 = 0;
  result = (_DWORD *)sub_1C49CE46C(a1, a2, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v12 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v13 = 8;
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(unsigned int *)(a1 + 16);
    }
    v11 = 0;
    v10 = v12 + 4 * v13;
  }
  else
  {
    result = sub_1C49CE518((_DWORD *)a1, (uint64_t)a2, a2, v14);
    v7 = result;
    *result = *a2;
    v8 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v9 = 8;
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(unsigned int *)(a1 + 16);
    }
    v10 = v8 + 4 * v9;
    v11 = 1;
  }
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v10;
  *(_BYTE *)(a3 + 16) = v11;
  return result;
}

uint64_t sub_1C49CE46C(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  _DWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (37 * *a2) & (v4 - 1);
  v7 = (_DWORD *)(v3 + 4 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_17:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != 0x7FFFFFFF)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == 0x80000000;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_DWORD *)(v3 + 4 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_17;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

_DWORD *sub_1C49CE518(_DWORD *a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  _DWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 8;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1C49CE5DC((uint64_t)a1, v7);
  v9 = 0;
  sub_1C49CE46C((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != 0x7FFFFFFF)
    --a1[1];
  return a4;
}

void sub_1C49CE5DC(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t i;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD v13[8];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_DWORD **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v12 = a2;
      *(_QWORD *)(a1 + 8) = operator new(4 * a2, (std::align_val_t)4uLL);
      *(_QWORD *)(a1 + 16) = v12;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C49CE748(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v13;
  for (i = 8; i != 40; i += 4)
  {
    v10 = *(_DWORD *)(a1 + i);
    if ((v10 - 0x7FFFFFFF) >= 2)
      *v8++ = v10;
  }
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(4 * a2, (std::align_val_t)4uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  sub_1C49CE748(a1, v13, v8);
}

void sub_1C49CE748(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  _DWORD *v10;

  v6 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (void *)(a1 + 8);
    v9 = 32;
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v7)
      goto LABEL_5;
    v8 = *(void **)(a1 + 8);
    v9 = 4 * v7;
  }
  memset_pattern16(v8, &unk_1C6613B70, v9);
LABEL_5:
  while (a2 != a3)
  {
    if ((*a2 - 0x7FFFFFFF) >= 2)
    {
      v10 = 0;
      sub_1C49CE46C(a1, a2, &v10);
      *v10 = *a2;
      *(_DWORD *)a1 += 2;
    }
    ++a2;
  }
}

unint64_t sub_1C49CE808(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;

  if (a2 - 4 <= 4)
  {
    v28 = *(unsigned int *)((char *)a1 + a2 - 4) ^ a3;
    v10 = 0x9DDFEA08EB382D69;
    v29 = 0x9DDFEA08EB382D69 * ((a2 + 8 * *(unsigned int *)a1) ^ v28);
    v11 = v28 ^ (v29 >> 47) ^ v29;
    goto LABEL_6;
  }
  if (a2 - 9 <= 7)
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (*a1 ^ a3 ^ v4)) >> 47) ^ (0x9DDFEA08EB382D69 * (*a1 ^ a3 ^ v4)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (*a1 ^ a3 ^ v4)) >> 47) ^ (0x9DDFEA08EB382D69 * (*a1 ^ a3 ^ v4)))) >> 47))) ^ v3;
  }
  if (a2 - 17 <= 0xF)
  {
    v6 = a1[1];
    v7 = 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
    v8 = __ROR8__(0xB492B66FBE98F273 * *a1 - v6, 43)
       - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)
       + __ROR8__(v7 ^ a3, 30);
    v9 = a3 + a2 + __ROR8__(v6 ^ 0xC949D7C7509E6557, 20) - 0x4B6D499041670D8DLL * *a1 - v7;
    v10 = 0x9DDFEA08EB382D69;
    v11 = v9 ^ ((0x9DDFEA08EB382D69 * (v8 ^ v9)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ v9));
LABEL_6:
    v12 = 0x9DDFEA08EB382D69 * v11;
    return (v12 ^ (v12 >> 47)) * v10;
  }
  if (a2 >= 0x21)
  {
    v13 = *(_QWORD *)((char *)a1 + a2 - 16);
    v14 = *(_QWORD *)((char *)a1 + a2 - 8);
    v15 = *a1 - 0x3C5A37A36834CED9 * (v13 + a2);
    v17 = a1[2];
    v16 = a1[3];
    v18 = __ROR8__(v15 + v16, 52);
    v19 = v15 + a1[1];
    v20 = __ROR8__(v19, 7);
    v21 = v19 + v17;
    v22 = v20 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v13 + a2), 37) + v18 + __ROR8__(v21, 31);
    v23 = *(_QWORD *)((char *)a1 + a2 - 32) + v17;
    v24 = __ROR8__(v23 + v14, 52);
    v25 = *(_QWORD *)((char *)a1 + a2 - 24) + v23 + v13;
    v26 = v25 + v14;
    v10 = 0x9AE16A3B2F90404FLL;
    v27 = 0xC3A5C85C97CB3127 * (v26 + v22)
        - 0x651E95C4D06FBFB1
        * (v21 + v16
               + __ROR8__(v23, 37)
               + v24
               + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v23, 7)
               + __ROR8__(v25, 31));
    v12 = ((0xC3A5C85C97CB3127 * (v27 ^ (v27 >> 47))) ^ a3) + v22;
    return (v12 ^ (v12 >> 47)) * v10;
  }
  if (a2)
  {
    v10 = 0x9AE16A3B2F90404FLL;
    v12 = (0x9AE16A3B2F90404FLL
         * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8))) ^ (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ a3;
    return (v12 ^ (v12 >> 47)) * v10;
  }
  return a3 ^ 0x9AE16A3B2F90404FLL;
}

uint64_t sub_1C49CEA94()
{
  char v1;
  _BYTE *v2;
  __int128 v3;

  *(_QWORD *)&v3 = "Run even expensive verifiers for clique control flow utility functions";
  *((_QWORD *)&v3 + 1) = 70;
  v1 = 0;
  v2 = &v1;
  sub_1C614D990((uint64_t)&unk_1EF8EF740, "verify-clique-cfg", &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8EF740, &dword_1C475E000);
}

uint64_t sub_1C49CEB08(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeFunctionGroupInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "AGX3 Specific CodeGen Prepare";
  *(_QWORD *)(v3 + 8) = 29;
  *(_QWORD *)(v3 + 16) = "agx3-codegen-prepare";
  *(_QWORD *)(v3 + 24) = 20;
  *(_QWORD *)(v3 + 32) = &unk_1EF8EF808;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C49CEC84;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C49CEBB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8EF808;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E7FA9128;
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    if (v5 == a2)
    {
      *(_QWORD *)(a1 + 56) = a1 + 32;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1 + 32);
    }
    else
    {
      *(_QWORD *)(a1 + 56) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 56) = 0;
  }
  v6 = *(_QWORD *)(a3 + 24);
  if (v6)
  {
    if (v6 == a3)
    {
      *(_QWORD *)(a1 + 88) = a1 + 64;
      (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 88) = 0;
  }
  return a1;
}

uint64_t sub_1C49CEC84()
{
  uint64_t v0;
  void (**v1)(void);
  void (**v2)(void);
  _QWORD v4[3];
  _QWORD *v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  v6[0] = &unk_1E7F9F768;
  v6[1] = sub_1C49CED8C;
  v7 = v6;
  v4[0] = &unk_1E7F9F768;
  v4[1] = sub_1C49CED8C;
  v5 = v4;
  sub_1C49CEBB4(v0, (uint64_t)v6, (uint64_t)v4);
  if (v5 == v4)
  {
    v1 = (void (**)(void))(v4[0] + 32);
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v1 = (void (**)(void))(*v5 + 40);
  }
  (*v1)();
LABEL_6:
  if (v7 == v6)
  {
    v2 = (void (**)(void))(v6[0] + 32);
    goto LABEL_10;
  }
  if (v7)
  {
    v2 = (void (**)(void))(*v7 + 40);
LABEL_10:
    (*v2)();
  }
  return v0;
}

uint64_t sub_1C49CED8C()
{
  return 0;
}

void sub_1C49CED94(llvm::Pass *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  llvm::Pass *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7FA9128;
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 11);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (llvm::Pass *)*((_QWORD *)this + 7);
  if (v5 == (llvm::Pass *)((char *)this + 32))
  {
    v6 = 4;
    v5 = (llvm::Pass *)((char *)this + 32);
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
  }
  llvm::Pass::~Pass(this);
}

void sub_1C49CEE20(llvm::Pass *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  llvm::Pass *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7FA9128;
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 11);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (llvm::Pass *)*((_QWORD *)this + 7);
  if (v5 == (llvm::Pass *)((char *)this + 32))
  {
    v6 = 4;
    v5 = (llvm::Pass *)((char *)this + 32);
  }
  else
  {
    if (!v5)
    {
LABEL_11:
      llvm::Pass::~Pass(this);
      JUMPOUT(0x1CAA32FC0);
    }
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
  goto LABEL_11;
}

const char *sub_1C49CEEC0()
{
  return "AGX3 Specific CodeGen Prepare";
}

void *sub_1C49CEED0(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::ScalarEvolutionWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  return sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
}

uint64_t sub_1C49CEF54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  void *v6;
  void **v7;
  void *v8;
  uint64_t v9;
  void **v10;
  void *v11;
  uint64_t v12;
  void **v13;
  void *v14;
  llvm::Instruction *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  llvm::ValueAsMetadata *v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  int v34;
  uint64_t **v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *Select;
  llvm::Value *FCmpHelper;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  unsigned __int8 *v47;
  int v48;
  uint64_t v49;
  unsigned __int8 *v51;
  llvm::Value *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  llvm::Value *v65;
  int v66;
  uint64_t *v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  llvm::Type *v79;
  unsigned __int8 *v80;
  uint64_t v81;
  unsigned __int8 *v82;
  llvm::UndefValue *v83;
  llvm::Type *v84;
  unsigned __int8 *v85;
  uint64_t v86;
  uint64_t v87;
  llvm::GetElementPtrInst *v88;
  uint64_t ***v89;
  uint64_t v90;
  char v91;
  char v92;
  char *v93;
  char *v94;
  llvm::Value *v95;
  uint64_t **v96;
  _QWORD *v97;
  uint64_t **v98;
  const llvm::APInt *v99;
  llvm::ConstantInt *v100;
  unsigned int v101;
  unint64_t v102;
  llvm::ValueHandleBase *v103;
  char *v104;
  char *v105;
  unsigned __int8 **v106;
  int v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  llvm::PointerType *v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  unsigned __int8 *v114;
  unsigned __int8 *v115;
  uint64_t ***v116;
  char *v117;
  char *v118;
  llvm::Value *v119;
  uint64_t **v120;
  _QWORD *v121;
  uint64_t **v122;
  llvm::PointerType *v123;
  llvm::PointerType *v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  unsigned __int8 *v128;
  unsigned __int8 *v129;
  __int16 v130;
  char *v131;
  char *v132;
  llvm::Value *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  llvm::ConstantInt *v137;
  llvm::Value **v138;
  unsigned __int8 *v139;
  llvm::Value **v140;
  unsigned __int8 *v141;
  llvm::Type *v142;
  llvm::UndefValue *v143;
  unsigned __int8 *v144;
  unsigned __int8 *v145;
  llvm::Value **v146;
  unsigned __int8 *v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  unint64_t v152;
  uint64_t v153;
  int v154;
  llvm::Type *v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  _QWORD *v159;
  llvm::PointerType *v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t *v165;
  uint64_t v166;
  BOOL v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  unsigned __int8 *v171;
  unsigned __int8 *v172;
  uint64_t ***v173;
  llvm::ConstantInt *v174;
  llvm::Value **v175;
  uint64_t v176;
  unsigned __int8 *v177;
  char *v178;
  char *v179;
  uint64_t ****v180;
  llvm::Value *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t **v185;
  uint64_t *****v186;
  uint64_t **v187;
  llvm::PointerType *v188;
  llvm::UndefValue *v189;
  uint64_t v190;
  unsigned int v191;
  uint64_t v192;
  unsigned __int8 *v193;
  unsigned __int8 *v194;
  llvm::Value **v195;
  uint64_t v196;
  unsigned __int8 *v197;
  llvm::Value **v198;
  uint64_t v199;
  unsigned __int8 *v200;
  llvm::Type *v201;
  llvm::UndefValue *v202;
  unsigned __int8 *v203;
  unsigned __int8 *v204;
  __int16 v205;
  char *v206;
  char *v207;
  unsigned __int8 **v208;
  llvm::Value *v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  unsigned __int8 ***v214;
  uint64_t v215;
  uint64_t *v216;
  const char *v217;
  unint64_t v218;
  unint64_t v219;
  unsigned int v220;
  unint64_t v221;
  uint64_t v222;
  int v223;
  llvm::Type *v224;
  unsigned int v225;
  uint64_t v226;
  unsigned int v227;
  _QWORD *v228;
  llvm::FixedVectorType *v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t *UnaryIntrinsic;
  uint64_t v234;
  uint64_t v235;
  int v236;
  int v237;
  const llvm::APInt *v238;
  uint64_t v239;
  unsigned int v240;
  unsigned __int8 *v241;
  unsigned int v242;
  unsigned __int8 *v243;
  unsigned __int8 *v244;
  uint64_t v245;
  uint64_t v246;
  char v247;
  int v248;
  int v249;
  uint64_t *v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t *v262;
  _QWORD *v263;
  unsigned int v264;
  uint64_t i;
  unsigned __int8 *v266;
  unsigned int v267;
  unsigned __int8 *v268;
  uint64_t v269;
  _DWORD *v270;
  _QWORD *v271;
  unint64_t v272;
  llvm::Constant ***v273;
  unint64_t v274;
  unint64_t v275;
  llvm::Value **IntegerValue;
  char *v277;
  char *v278;
  uint64_t v279;
  char **v280;
  llvm::Value *v281;
  llvm::Value *v282;
  char *v283;
  uint64_t v284;
  unsigned __int8 *v285;
  llvm::UndefValue *v286;
  llvm::Type *v287;
  unsigned __int8 *v288;
  uint64_t v289;
  unsigned __int8 *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t ***v293;
  char v294;
  char v295;
  char *v296;
  char *v297;
  llvm::Value *v298;
  uint64_t **v299;
  _QWORD *v300;
  uint64_t **v301;
  const llvm::APInt *v302;
  llvm::ConstantInt *v303;
  unsigned int v304;
  unint64_t v305;
  llvm::ValueHandleBase *v306;
  char *v307;
  char *v308;
  unsigned __int8 **v309;
  int v310;
  unsigned __int8 *v311;
  unsigned __int8 **v312;
  unsigned __int8 *v313;
  llvm::Type *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unsigned __int8 *v318;
  unsigned __int8 *v319;
  unsigned __int8 *v320;
  const llvm::APInt *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  llvm::ConstantInt *v325;
  unsigned int v326;
  unint64_t v327;
  llvm::ValueHandleBase *v328;
  uint64_t *v329;
  uint64_t ***v330;
  char v331;
  char v332;
  char *v333;
  char *v334;
  uint64_t ****v335;
  llvm::Value *v336;
  uint64_t v337;
  _QWORD *v338;
  uint64_t v339;
  uint64_t **v340;
  uint64_t *****v341;
  uint64_t **v342;
  char *v343;
  char *v344;
  unsigned __int8 **v345;
  int v346;
  unsigned __int8 *v347;
  unsigned __int8 *v348;
  uint64_t v349;
  char *v350;
  char *v351;
  unsigned __int8 **v352;
  int v353;
  unsigned __int8 *v354;
  unsigned __int8 *v355;
  unsigned __int8 *v356;
  char *v357;
  char *v358;
  unsigned __int8 **v359;
  int v360;
  unsigned __int8 *v361;
  unsigned __int8 *v362;
  unsigned __int8 *v363;
  char *v364;
  char *v365;
  unsigned __int8 **v366;
  int v367;
  unsigned __int8 *v368;
  unsigned __int8 *v369;
  unsigned __int8 *v370;
  char *v371;
  char *v372;
  unsigned __int8 **v373;
  int v374;
  unsigned __int8 *v375;
  unsigned __int8 *v376;
  unsigned __int8 *v377;
  char *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  char *v382;
  uint64_t *v383;
  uint64_t v384;
  unsigned __int8 *v385;
  uint64_t v386;
  unsigned __int8 *v387;
  uint64_t *v388;
  uint64_t v389;
  int v390;
  llvm::GetElementPtrInst *ParamElementType;
  unsigned __int8 *v392;
  uint64_t v393;
  unsigned __int8 *v394;
  _DWORD *v395;
  _DWORD *v396;
  int v397;
  _DWORD *v398;
  _DWORD *v399;
  int v400;
  uint64_t v401;
  uint64_t v402;
  int v403;
  const llvm::APInt *v404;
  _QWORD *j;
  _QWORD *v406;
  uint64_t v407;
  uint64_t v408;
  llvm::Value **v409;
  llvm::UndefValue *v410;
  unint64_t v411;
  const llvm::APInt *v412;
  llvm::ConstantInt *v413;
  const llvm::APInt *v414;
  llvm::ValueHandleBase *v415;
  llvm::ConstantInt *v416;
  unsigned int v417;
  char v418;
  const llvm::APInt *v419;
  llvm::ValueHandleBase *v420;
  llvm::ConstantInt *v421;
  unsigned int v422;
  unint64_t v423;
  const llvm::APInt *v424;
  llvm::ValueHandleBase *v425;
  llvm::ConstantInt *v426;
  unsigned int v427;
  unint64_t v428;
  llvm::ValueHandleBase *v429;
  unsigned __int8 *v430;
  uint64_t v431;
  unsigned __int8 *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t **v436;
  char *v437;
  uint64_t v438;
  uint64_t *v439;
  uint64_t v440;
  llvm::Value *v441;
  uint64_t v442;
  uint64_t v443;
  llvm::ConstantInt *v444;
  unsigned int v445;
  unint64_t v446;
  llvm::ValueHandleBase *v447;
  uint64_t v448;
  unsigned __int8 *v449;
  uint64_t v450;
  uint64_t **v451;
  uint64_t v452;
  unsigned __int8 *v453;
  _QWORD *v454;
  llvm::Instruction *v455;
  llvm::Instruction *v456;
  unsigned int v457;
  llvm::Instruction *v458;
  int v460;
  unsigned int k;
  uint64_t Successor;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t **v466;
  uint64_t v467;
  uint64_t v468;
  llvm::Value *v469;
  char *v470;
  char *v471;
  uint64_t *v472;
  uint64_t v473;
  _QWORD *v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t **v477;
  uint64_t v478;
  char *v479;
  char *v480;
  unsigned __int8 **v481;
  int v482;
  unsigned __int8 *v483;
  unsigned __int8 *v484;
  unsigned __int8 *v485;
  uint64_t v486;
  uint64_t v487;
  const llvm::APInt *v488;
  uint64_t v489;
  llvm::ConstantInt *v490;
  unsigned int v491;
  unint64_t v492;
  uint64_t *v493;
  uint64_t **v494;
  unsigned __int8 *v495;
  llvm::Type *v496;
  _QWORD *v497;
  uint64_t m;
  uint64_t v499;
  uint64_t v500;
  llvm::UndefValue *v501;
  _QWORD *v502;
  _QWORD *v503;
  _QWORD *v504;
  void **v505;
  void **v506;
  _QWORD *n;
  _QWORD *v508;
  _QWORD *v509;
  uint64_t **v510;
  uint64_t Declaration;
  uint64_t v512;
  uint64_t **v513;
  uint64_t *v514;
  uint64_t **v515;
  uint64_t v516;
  llvm::Value *v517;
  _QWORD *v518;
  _QWORD *v519;
  int v520;
  uint64_t v521;
  uint64_t **v522;
  uint64_t **v523;
  uint64_t *v524;
  BOOL v525;
  uint64_t v526;
  llvm::UndefValue **v527;
  llvm::Type *v528;
  llvm::UndefValue *v529;
  uint64_t v530;
  uint64_t v531;
  unsigned int v532;
  BOOL v533;
  BOOL v534;
  uint64_t v535;
  unsigned int v536;
  BOOL v537;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  unint64_t *v542;
  unint64_t *v543;
  unsigned int v544;
  unsigned int v545;
  uint64_t v546;
  char *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  char *v551;
  unint64_t v552;
  int v553;
  uint64_t v554;
  unint64_t v555;
  uint64_t v556;
  _QWORD **v557;
  uint64_t v558;
  unint64_t *v559;
  unint64_t v560;
  uint64_t v561;
  unint64_t *v562;
  uint64_t v563;
  unint64_t *v564;
  unint64_t v565;
  uint64_t v566;
  _QWORD *v567;
  unint64_t *v568;
  unint64_t v569;
  unsigned int v570;
  uint64_t *v571;
  char *v572;
  char *v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  char *v577;
  uint64_t v578;
  uint64_t v579;
  unint64_t v580;
  unint64_t v581;
  uint64_t *v582;
  llvm::BasicBlock *v583;
  uint64_t v584;
  uint64_t v585;
  unsigned int v586;
  BOOL v587;
  _QWORD *v589;
  _QWORD *v590;
  _QWORD *v591;
  _QWORD *v592;
  _QWORD *v593;
  _QWORD *v594;
  uint64_t v595;
  int v596;
  unint64_t v597;
  uint64_t v598;
  uint64_t v599;
  unsigned int v600;
  uint64_t *v601;
  unint64_t v602;
  unsigned __int8 *v603;
  uint64_t v604;
  unsigned __int8 *v605;
  unsigned __int8 *v606;
  BOOL v607;
  int v608;
  uint64_t v609;
  uint64_t v610;
  int v611;
  uint64_t v612;
  int v613;
  uint64_t v614;
  int32x2_t v615;
  unsigned __int32 v616;
  unsigned __int32 v617;
  unsigned int v618;
  uint64_t v619;
  unsigned __int8 *v620;
  int v621;
  unsigned int v622;
  uint64_t v623;
  uint64_t SCEVIter;
  uint64_t v625;
  unsigned __int32 v626;
  unsigned int v627;
  uint64_t v628;
  uint64_t v629;
  int v630;
  unsigned int v631;
  uint64_t v632;
  uint64_t v633;
  _QWORD *v634;
  uint64_t v635;
  uint64_t v636;
  llvm::Type *v637;
  _QWORD *ii;
  _QWORD *v639;
  void **v640;
  void **v641;
  llvm::ConstantFP **v642;
  uint64_t *v643;
  llvm::Type *v644;
  llvm::APFloatBase *v645;
  uint64_t *v646;
  llvm::Value *v647;
  uint64_t v648;
  uint64_t *v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t *v652;
  uint64_t v653;
  uint64_t v654;
  _QWORD *v655;
  uint64_t v656;
  uint64_t *v657;
  unsigned int v658;
  void **v659;
  uint64_t *v660;
  void **v661;
  int v662;
  BOOL v663;
  unsigned int v664;
  void **v665;
  _QWORD *v666;
  uint64_t *v667;
  uint64_t jj;
  uint64_t v669;
  unsigned int v670;
  uint64_t v671;
  uint64_t v673;
  llvm::Value *v674;
  uint64_t *v675;
  uint64_t v676;
  _QWORD *v677;
  uint64_t v678;
  _QWORD *v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  llvm::ValueSymbolTable *v683;
  uint64_t v684;
  _QWORD *v685;
  uint64_t v686;
  llvm::ValueSymbolTable *v687;
  unint64_t *v688;
  unint64_t *v689;
  unsigned int v690;
  unsigned int v691;
  uint64_t v692;
  char *v693;
  uint64_t v694;
  char *v695;
  unint64_t v696;
  int v697;
  uint64_t v698;
  unint64_t v699;
  uint64_t v700;
  _QWORD **v701;
  uint64_t v702;
  unint64_t *v703;
  unint64_t v704;
  uint64_t v705;
  unint64_t *v706;
  uint64_t v707;
  unint64_t *v708;
  unint64_t v709;
  uint64_t v710;
  _QWORD *v711;
  unint64_t *v712;
  unint64_t v713;
  int v717;
  unsigned int v718;
  char *v719;
  int v720;
  unsigned int v721;
  char *v722;
  uint64_t v723;
  llvm::Value **v724;
  uint64_t v725;
  int32x2_t *v726;
  int32x2_t *v727;
  unsigned __int8 **v728;
  char *v729;
  unsigned __int8 **v730;
  unsigned __int8 **v731;
  unint64_t v732;
  uint64_t v733;
  uint64_t v734;
  _QWORD *v735;
  _QWORD *v736;
  _QWORD *v737;
  _QWORD *v738;
  int32x2_t *v739;
  char v740;
  llvm::UndefValue *v741;
  llvm::UndefValue *v742;
  unsigned __int8 *v743;
  llvm::UndefValue *v744;
  llvm::UndefValue *v745;
  void *v746;
  _QWORD *v747;
  _QWORD *v748;
  unsigned __int8 *v749;
  unint64_t *v750;
  char *v751;
  uint64_t v752;
  int v753;
  _BYTE v754[64];
  uint64_t v755;
  int v756;
  unsigned __int8 *v757;
  uint64_t *v758;
  uint64_t v759;
  uint64_t v760;
  unsigned int v761;
  __int16 v762;
  void *v763;
  uint64_t v764;
  _QWORD *v765;
  uint64_t v766;
  uint64_t v767;
  char v768;
  uint64_t v769;
  _QWORD *v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  char *v774;
  uint64_t v775;
  _BYTE v776[32];
  void **v777;
  uint64_t v778;
  uint64_t v779;
  int v780;
  char v781;
  __int16 v782;
  uint64_t v783;

  v783 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 40);
  v5 = **(void ****)(a1 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::ScalarEvolutionWrapperPass::ID);
  v739 = *(int32x2_t **)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v7 = **(void ****)(a1 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != &llvm::DominatorTreeWrapperPass::ID);
  v9 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::DominatorTreeWrapperPass::ID);
  v10 = **(void ****)(a1 + 8);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != &llvm::LoopInfoWrapperPass::ID);
  v12 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), &llvm::LoopInfoWrapperPass::ID);
  v13 = **(void ****)(a1 + 8);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != &llvm::FunctionGroupInfoWrapperPass::ID);
  v15 = (llvm::Instruction *)(v9 + 32);
  v16 = (uint64_t *)(v12 + 32);
  v17 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), &llvm::FunctionGroupInfoWrapperPass::ID);
  v18 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v17 + 32) + 24))(*(_QWORD *)(v17 + 32), a2);
  v750 = (unint64_t *)v754;
  v751 = v754;
  v752 = 8;
  v753 = 0;
  v774 = v776;
  v775 = 0x400000000;
  v746 = (void *)(v4 + 272);
  v19 = sub_1C5E9F490(a2, (void **)(v4 + 272), v15);
  v20 = v19 | sub_1C5E9FF40(a2);
  v21 = sub_1C5EA0CE0(a2, v15);
  sub_1C5EA12A4(a2, 0, 1u, 1, 1, v16);
  v23 = v20 | v21 | v22 | sub_1C5EA2178((void ***)a2, v18, (uint64_t)v15, v16);
  v24 = *(_QWORD *)(a1 + 88);
  if (v24 && (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 48))(v24, a2))
    v23 |= sub_1C5EA2BC4((uint64_t *)a2);
  v726 = (int32x2_t *)v16;
  v727 = (int32x2_t *)v15;
  v733 = a1;
  v734 = a2;
  v25 = *(_QWORD **)(a2 + 80);
  v737 = (_QWORD *)(a2 + 72);
  v740 = v23;
  if (v25 != (_QWORD *)(a2 + 72))
  {
    while (1)
    {
      v26 = v25 - 3;
      v735 = v25;
      if (!v25)
        v26 = 0;
      v27 = v26 + 5;
      v28 = (_QWORD *)v26[6];
      if (v28 != v26 + 5)
        break;
LABEL_773:
      v25 = (_QWORD *)v735[1];
      if (v25 == v737)
        goto LABEL_774;
    }
    v747 = v26 + 5;
    while (1)
    {
      v29 = (_QWORD *)v28[1];
      v30 = (llvm::ValueAsMetadata *)(v28 - 3);
      if (v28)
        v31 = (uint64_t)(v28 - 3);
      else
        v31 = 0;
      v32 = (char *)sub_1C477672C((uint64_t)&v750, v31);
      if (v751 == (char *)v750)
        v33 = (uint64_t *)((char *)&v752 + 4);
      else
        v33 = &v752;
      if (v32 != &v751[8 * *(unsigned int *)v33])
        goto LABEL_24;
      v34 = *(unsigned __int8 *)(v31 + 16);
      if (v34 == 85)
        v35 = (uint64_t **)v31;
      else
        v35 = 0;
      v748 = v29;
      if (v28 && v34 == 85)
      {
        v36 = *v35;
        if (*((_DWORD *)*v35 + 2) - 7 < 0xFFFFFFFB)
          goto LABEL_81;
        v758 = 0;
        v759 = 0;
        v758 = *(v35 - 8);
        v759 = (uint64_t)*(v35 - 4);
        if ((sub_1C4771F04((uint64_t)&v758) & 1) != 0)
        {
          sub_1C4773D54((uint64_t)&v763, v31, 0, 0, 0);
          v37 = (uint64_t)*(v35 - 12);
          v782 = 257;
          Select = (uint64_t *)llvm::IRBuilderBase::CreateSelect((uint64_t *)&v763, v37, v758, v759, (uint64_t)&v777, 0);
          v782 = 257;
          FCmpHelper = (llvm::Value *)sub_1C47721A0((uint64_t)&v763, Select, v36, (uint64_t)&v777);
LABEL_241:
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v31, FCmpHelper, (llvm::Value *)1);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v750, v31);
          if (v763 != &v765)
            free(v763);
          v740 = 1;
LABEL_297:
          v27 = v747;
          goto LABEL_24;
        }
        v34 = *(unsigned __int8 *)(v31 + 16);
      }
      if (v34 == 62)
        v40 = v31;
      else
        v40 = 0;
      if (v28 && v34 == 62)
      {
        v41 = *(_DWORD *)(v40 + 20);
        v42 = v41 & 0x7FFFFFF;
        if ((v41 & 0x40000000) != 0)
          v43 = *(_QWORD *)(v40 - 8);
        else
          v43 = v40 - 32 * v42;
        v44 = *(_QWORD *)(v43 + 32 * (v42 - 1));
        v45 = *(unsigned __int8 *)(v44 + 16);
        if (v44)
          v46 = v45 >= 0x1C;
        else
          v46 = 0;
        if (!v46)
          goto LABEL_81;
        if (v45 == 67)
        {
          v47 = *(unsigned __int8 **)(v44 - 32);
          v45 = v47[16];
          if (v45 < 0x1C)
            goto LABEL_81;
          v48 = 0;
        }
        else if (v45 == 68)
        {
          v47 = *(unsigned __int8 **)(v44 - 32);
          v45 = v47[16];
          if (v45 <= 0x1B)
            goto LABEL_81;
          v48 = 1;
        }
        else
        {
          v48 = 1;
          v47 = (unsigned __int8 *)v44;
        }
        v534 = v45 > 0x35;
        v49 = (1 << v45) & 0x20220000000000;
        if (v534 || v49 == 0)
          goto LABEL_81;
        if (sub_1C5EA8010(v47, (llvm::ScalarEvolution *)v739, v48))
        {
          v51 = sub_1C5EA8790((uint64_t)v47, *(_QWORD *)v44, v48);
          v52 = (llvm::Value *)v51;
          if (v51 && v51[16] == 66)
          {
            v763 = &v765;
            v764 = 0x800000000;
            v53 = *(_QWORD *)(v44 + 8);
            if (v53)
            {
              LODWORD(v54) = 0;
              do
              {
                if (v54 >= HIDWORD(v764))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v763, (uint64_t)&v765, v54 + 1, 8);
                  LODWORD(v54) = v764;
                }
                *((_QWORD *)v763 + v54) = v53;
                v54 = (v764 + 1);
                LODWORD(v764) = v764 + 1;
                v53 = *(_QWORD *)(v53 + 8);
              }
              while (v53);
              v251 = (char *)v763;
              if ((_DWORD)v54)
              {
                v252 = 8 * v54;
                do
                {
                  v253 = *(_QWORD *)v251;
                  v254 = *(_QWORD *)(*(_QWORD *)v251 + 24);
                  v255 = *(unsigned __int8 *)(v254 + 16);
                  if (v255 == 62 || v255 == 5 && *(_WORD *)(v254 + 18) == 34)
                  {
                    v256 = *((_QWORD *)v52 - 4);
                    if (*(_QWORD *)v253)
                    {
                      **(_QWORD **)(v253 + 16) = *(_QWORD *)(v253 + 8);
                      v257 = *(_QWORD *)(v253 + 8);
                      if (v257)
                        *(_QWORD *)(v257 + 16) = *(_QWORD *)(v253 + 16);
                    }
                    *(_QWORD *)v253 = v256;
                    if (v256)
                    {
                      v260 = *(_QWORD *)(v256 + 8);
                      v258 = (_QWORD *)(v256 + 8);
                      v259 = v260;
                      *(_QWORD *)(v253 + 8) = v260;
                      if (v260)
                        *(_QWORD *)(v259 + 16) = v253 + 8;
                      *(_QWORD *)(v253 + 16) = v258;
                      *v258 = v253;
                    }
                    llvm::ScalarEvolution::forgetValue(v739, (llvm::Value *)v254);
                  }
                  v251 += 8;
                  v252 -= 8;
                }
                while (v252);
                v251 = (char *)v763;
              }
              if (v251 != (char *)&v765)
                free(v251);
            }
            v29 = v748;
          }
          v740 = 1;
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v44, v52, (llvm::Value *)1);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v750, v44);
          goto LABEL_297;
        }
        v34 = *(unsigned __int8 *)(v31 + 16);
      }
      if (v34 == 82)
        v55 = v31;
      else
        v55 = 0;
      if (v28 && v34 == 82)
      {
        if (!*(_BYTE *)(**(_QWORD **)(v55 - 64) + 8))
          goto LABEL_81;
        v758 = 0;
        v759 = 0;
        v758 = *(uint64_t **)(v55 - 64);
        v759 = *(_QWORD *)(v55 - 32);
        if ((sub_1C4771F04((uint64_t)&v758) & 1) != 0)
        {
          sub_1C4773D54((uint64_t)&v763, v31, 0, 0, 0);
          v56 = *(_WORD *)(v55 + 18) & 0x3F;
          v782 = 257;
          FCmpHelper = (llvm::Value *)llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)&v763, v56, v758, v759, (uint64_t)&v777, 0, 0);
          goto LABEL_241;
        }
        v34 = *(unsigned __int8 *)(v31 + 16);
      }
      if (v34 == 52)
      {
        v57 = *(_DWORD *)(v31 + 20);
        if ((v57 & 0x40000000) != 0)
          v58 = *(_QWORD *)(v31 - 8);
        else
          v58 = v31 - 32 * (v57 & 0x7FFFFFF);
        v230 = *(uint64_t **)v58;
        v231 = *(_QWORD *)(v58 + 32);
        sub_1C4773D54((uint64_t)&v763, v31, 0, 0, 0);
        v782 = 257;
        v232 = (uint64_t *)sub_1C4867220((uint64_t)&v763, v230, v231, v31, (uint64_t)&v777);
        v782 = 257;
        UnaryIntrinsic = (uint64_t *)llvm::IRBuilderBase::CreateUnaryIntrinsic((uint64_t *)&v763, 296, v232, v31, (uint64_t)&v777);
        v782 = 257;
        v234 = sub_1C4867450((uint64_t)&v763, UnaryIntrinsic, v231, v31, (uint64_t)&v777);
        v782 = 257;
        FCmpHelper = (llvm::Value *)sub_1C4867680((uint64_t)&v763, v230, v234, v31, (uint64_t)&v777);
        goto LABEL_241;
      }
LABEL_81:
      v763 = 0;
      v777 = &v763;
      if (sub_1C4E7B6EC(&v777, v31))
      {
        v59 = v763;
        v27 = v747;
        if (v763)
        {
          v60 = *((_QWORD *)v763 + 1);
          if (v60)
          {
            if (!*(_QWORD *)(v60 + 8))
            {
              sub_1C4773D54((uint64_t)&v763, v31, 0, 0, 0);
              v61 = *((unsigned __int8 *)v59 + 16);
              if (v61 == 5)
              {
                v249 = *((unsigned __int16 *)v59 + 9);
                if (v249 != 21)
                {
                  if (v249 != 18)
                    goto LABEL_301;
                  v250 = (uint64_t *)&v59[-8 * (v59[5] & 0x7FFFFFF)];
                  v62 = *v250;
                  if (!*v250)
                    goto LABEL_301;
                  v63 = v250[4];
                  if (!v63)
                    goto LABEL_276;
LABEL_90:
                  v782 = 257;
                  v64 = (uint64_t *)sub_1C4772890((uint64_t *)&v763, v62, (uint64_t)&v777, 0);
                  v782 = 257;
                  v65 = (llvm::Value *)sub_1C4867450((uint64_t)&v763, v64, v63, (uint64_t)v59, (uint64_t)&v777);
LABEL_299:
                  v27 = v747;
                  if (v65)
                  {
                    v740 = 1;
                    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v31, v65, (llvm::Value *)1);
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v750, v31);
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v750, (uint64_t)v59);
                    v248 = 0;
                    goto LABEL_312;
                  }
                  goto LABEL_301;
                }
                v262 = (uint64_t *)&v59[-8 * (v59[5] & 0x7FFFFFF)];
                v245 = *v262;
                if (*v262)
                {
                  v246 = v262[4];
                  if (v246)
                    goto LABEL_267;
                  goto LABEL_310;
                }
              }
              else
              {
                if (v61 != 49)
                {
                  if (v61 == 46)
                  {
                    v62 = *((_QWORD *)v59 - 8);
                    if (v62)
                    {
                      v63 = *((_QWORD *)v59 - 4);
                      if (v63)
                        goto LABEL_90;
LABEL_276:
                      v248 = 1;
LABEL_277:
                      v27 = v747;
LABEL_312:
                      if (v763 == &v765)
                      {
                        if (!v248)
                          goto LABEL_24;
                      }
                      else
                      {
                        free(v763);
                        if (!v248)
                          goto LABEL_24;
                      }
                      goto LABEL_92;
                    }
                  }
LABEL_301:
                  v248 = 1;
                  goto LABEL_312;
                }
                v245 = *((_QWORD *)v59 - 8);
                if (v245)
                {
                  v246 = *((_QWORD *)v59 - 4);
                  if (v246)
                  {
LABEL_267:
                    if (*(_BYTE *)(v245 + 16) == 17)
                    {
                      v756 = 64;
                      v755 = 0x3FF0000000000000;
                      llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v758, (const llvm::APInt **)&v755);
                      v778 = (uint64_t)v758;
                      v779 = v759;
                      v780 = v760;
                      v781 = BYTE4(v760) & 0xF;
                      llvm::APFloat::convert((uint64_t)&v777, *(void **)(v245 + 32), 1, &v758);
                      v247 = sub_1C47ECB98(v245 + 24, (uint64_t)&v777);
                      if ((_UNKNOWN *)v778 == &unk_1C866F1C0)
                      {
                        sub_1C4773C74(&v779);
                      }
                      else if ((*(_DWORD *)(v778 + 8) - 64) <= 0xFFFFFF7F && v779)
                      {
                        MEMORY[0x1CAA32F9C](v779, 0x1000C8000313F17);
                      }
                      if ((v247 & 1) != 0)
                      {
                        v248 = 1;
                        goto LABEL_277;
                      }
                    }
                    v782 = 257;
                    v261 = (uint64_t *)sub_1C4772890((uint64_t *)&v763, v245, (uint64_t)&v777, 0);
                    v782 = 257;
                    v65 = (llvm::Value *)sub_1C4867220((uint64_t)&v763, v261, v246, (uint64_t)v59, (uint64_t)&v777);
                    goto LABEL_299;
                  }
LABEL_310:
                  v248 = 1;
                  goto LABEL_312;
                }
              }
              v248 = 1;
              goto LABEL_312;
            }
          }
        }
      }
      else
      {
        v27 = v747;
      }
LABEL_92:
      v66 = *(unsigned __int8 *)(v31 + 16);
      if (v66 == 60)
        v67 = (uint64_t *)v31;
      else
        v67 = 0;
      if (v28 && v66 == 60)
      {
        v68 = *(_QWORD *)*(v67 - 4);
        v69 = *(_DWORD *)(v68 + 8);
        v70 = v69;
        if ((v69 & 0xFE) == 0x12)
          v70 = *(_DWORD *)(**(_QWORD **)(v68 + 16) + 8);
        v71 = *v67;
        if ((v70 & 0xFFFFFF00) == 0x4000)
        {
          sub_1C4768AD0((uint64_t)v746, *v67);
          v74 = v73;
          if ((_DWORD)v72 == 1)
          if (((v74 + 7) & 0xFFFFFFFFFFFFFFF8) > 0x40)
          {
            v741 = (llvm::UndefValue *)v71;
            sub_1C4768AD0((uint64_t)v746, v71);
            v77 = v76;
            if ((_DWORD)v75 == 1)
            v78 = v77 + 7;
            v79 = (llvm::Type *)((unint64_t)(v77 + 7) >> 5);
            sub_1C4773D54((uint64_t)&v763, v31, 0, 0, 0);
            v80 = (unsigned __int8 *)*(v67 - 4);
            v81 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v771 + 1960), (llvm::Type *)0x40);
            v782 = 257;
            v82 = sub_1C4773E38((uint64_t *)&v763, 49, v80, v81, (uint64_t)&v777);
            llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(_QWORD *)v771 + 1960), v79);
            v85 = (unsigned __int8 *)llvm::UndefValue::get(v83, v84);
            if (!(_DWORD)v79)
            {
              v29 = v748;
LABEL_262:
              v782 = 257;
              v244 = sub_1C4773E38((uint64_t *)&v763, 49, v85, (uint64_t)v741, (uint64_t)&v777);
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v31, (llvm::Value *)v244, (llvm::Value *)1);
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v750, v31);
              if (v763 != &v765)
                free(v763);
              v740 = 1;
              goto LABEL_297;
            }
            v86 = 0;
            v87 = (v78 >> 5);
            while (1)
            {
              v88 = (llvm::GetElementPtrInst *)(*(_QWORD *)v771 + 1960);
              v782 = 257;
              v89 = sub_1C4772C18((uint64_t *)&v763, v88, v82, v86, (uint64_t)&v777);
              v90 = *(_QWORD *)v771 + 1960;
              v762 = 257;
              llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v769 + 56) + 40) + 272, v90);
              v92 = v91;
              v93 = (char *)operator new(0x60uLL);
              v94 = v93;
              v95 = (llvm::Value *)(v93 + 32);
              *((_QWORD *)v93 + 2) = 0;
              *((_QWORD *)v93 + 3) = v93 + 32;
              v782 = 257;
              *((_QWORD *)v93 + 4) = v90;
              *((_QWORD *)v93 + 5) = 0;
              *((_WORD *)v93 + 24) = 60;
              *((_DWORD *)v93 + 13) = 1;
              *(_OWORD *)(v93 + 56) = 0u;
              *(_OWORD *)(v93 + 72) = 0u;
              *((_DWORD *)v93 + 22) = 0;
              *(_QWORD *)v93 = v89;
              *((_QWORD *)v93 + 1) = 0;
              if (v89)
              {
                v98 = v89[1];
                v97 = v89 + 1;
                v96 = v98;
                *((_QWORD *)v93 + 1) = v98;
                if (v98)
                  v96[2] = (uint64_t *)(v93 + 8);
                *((_QWORD *)v93 + 2) = v97;
                *v97 = v93;
              }
              *((_WORD *)v93 + 25) = 2 * (v92 & 0x3F);
              v93[92] = 1;
              llvm::Value::setName((uint64_t ***)v93 + 4, (uint64_t)&v777);
              (*(void (**)(uint64_t, llvm::Value *, uint64_t **, uint64_t, _QWORD *))(*(_QWORD *)v773 + 16))(v773, v95, &v758, v769, v770);
              if ((_DWORD)v764)
                break;
LABEL_112:
              v100 = *(llvm::ConstantInt **)(*(_QWORD *)v771 + 1960);
              v101 = *(_DWORD *)(*(_QWORD *)v771 + 1968);
              LODWORD(v778) = v101 >> 8;
              if (v101 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v777, v86, 0);
              }
              else
              {
                if (v101 <= 0xFF)
                  v102 = 0;
                else
                  v102 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v101);
                v777 = (void **)(v102 & v86);
              }
              v29 = v748;
              v103 = llvm::ConstantInt::get(v100, (llvm::LLVMContext *)&v777, v99);
              if (v778 >= 0x41 && v777)
                MEMORY[0x1CAA32F9C](v777, 0x1000C8000313F17);
              v782 = 257;
              v85 = sub_1C4773154((uint64_t *)&v763, (uint64_t)v85, (uint64_t)v95, (uint64_t)v103, (uint64_t)&v777);
              if (++v86 == v87)
                goto LABEL_262;
            }
            v104 = (char *)v763;
            v105 = (char *)v763 + 16 * v764;
            v106 = (unsigned __int8 **)(v94 + 80);
            while (1)
            {
              v107 = *(_DWORD *)v104;
              v99 = (const llvm::APInt *)*((_QWORD *)v104 + 1);
              if (v99)
              {
                if (!v107)
                {
                  v755 = *((_QWORD *)v104 + 1);
                  llvm::MetadataTracking::track((uint64_t)&v755, (unsigned __int8 *)v99, 2);
                  v108 = *v106;
                  if (!*v106)
                  {
LABEL_132:
                    v109 = (unsigned __int8 *)v755;
                    *v106 = (unsigned __int8 *)v755;
                    if (v109)
                      llvm::MetadataTracking::retrack((uint64_t)&v755, v109, (uint64_t)(v94 + 80));
                    goto LABEL_129;
                  }
LABEL_126:
                  llvm::MetadataTracking::untrack((uint64_t)(v94 + 80), v108);
                  goto LABEL_132;
                }
              }
              else
              {
                v108 = *v106;
                if (!*v106 && (v94[55] & 0x20) == 0)
                  goto LABEL_129;
                if (!v107)
                {
                  v755 = 0;
                  if (!v108)
                    goto LABEL_132;
                  goto LABEL_126;
                }
              }
              llvm::Value::setMetadata(v95, *(_DWORD *)v104, v99);
LABEL_129:
              v104 += 16;
              if (v104 == v105)
                goto LABEL_112;
            }
          }
          v68 = *(_QWORD *)*(v67 - 4);
          v69 = *(_DWORD *)(v68 + 8);
          v27 = v747;
        }
        if ((v69 & 0xFE) == 0x12)
          v69 = *(_DWORD *)(**(_QWORD **)(v68 + 16) + 8);
        if ((v69 & 0xFFFFFF00) == 0x4000
          && (*(_DWORD *)(v71 + 8) & 0xFE) == 0x12
          && *(_DWORD *)(*(_QWORD *)(v71 + 24) + 8) == 2061
          && *(_DWORD *)(v71 + 32) == 3)
        {
          sub_1C4773D54((uint64_t)&v763, v31, 0, 0, 0);
          v110 = (llvm::PointerType *)v71;
          if ((*(_DWORD *)(v71 + 8) & 0xFE) == 0x12)
            v110 = **(llvm::PointerType ***)(v71 + 16);
          v111 = *(_QWORD *)*(v67 - 4);
          v112 = *(_DWORD *)(v111 + 8);
          if ((v112 & 0xFE) == 0x12)
            v112 = *(_DWORD *)(**(_QWORD **)(v111 + 16) + 8);
          v113 = llvm::PointerType::get(v110, (llvm::Type *)(v112 >> 8));
          v114 = (unsigned __int8 *)*(v67 - 4);
          v782 = 257;
          v115 = sub_1C4773E38((uint64_t *)&v763, 49, v114, v113, (uint64_t)&v777);
          v782 = 257;
          v116 = sub_1C4772C18((uint64_t *)&v763, v110, v115, 2u, (uint64_t)&v777);
          v762 = 257;
          v117 = (char *)operator new(0x60uLL);
          v118 = v117;
          v119 = (llvm::Value *)(v117 + 32);
          *((_QWORD *)v117 + 2) = 0;
          *((_QWORD *)v117 + 3) = v117 + 32;
          v782 = 257;
          *((_QWORD *)v117 + 4) = v110;
          *((_QWORD *)v117 + 5) = 0;
          *((_WORD *)v117 + 24) = 60;
          *((_DWORD *)v117 + 13) = 1;
          *(_OWORD *)(v117 + 56) = 0u;
          *(_OWORD *)(v117 + 72) = 0u;
          *((_DWORD *)v117 + 22) = 0;
          *(_QWORD *)v117 = v116;
          *((_QWORD *)v117 + 1) = 0;
          if (v116)
          {
            v122 = v116[1];
            v121 = v116 + 1;
            v120 = v122;
            *((_QWORD *)v117 + 1) = v122;
            if (v122)
              v120[2] = (uint64_t *)(v117 + 8);
            *((_QWORD *)v117 + 2) = v121;
            *v121 = v117;
          }
          v742 = (llvm::UndefValue *)v71;
          *((_WORD *)v117 + 25) = 0;
          v117[92] = 1;
          llvm::Value::setName((uint64_t ***)v117 + 4, (uint64_t)&v777);
          (*(void (**)(uint64_t, llvm::Value *, uint64_t **, uint64_t, _QWORD *))(*(_QWORD *)v773 + 16))(v773, v119, &v758, v769, v770);
          if (!(_DWORD)v764)
          {
LABEL_153:
            llvm::FixedVectorType::get(v110, (llvm::Type *)2);
            v124 = v123;
            v125 = *(_QWORD *)*(v67 - 4);
            v126 = *(_DWORD *)(v125 + 8);
            if ((v126 & 0xFE) == 0x12)
              v126 = *(_DWORD *)(**(_QWORD **)(v125 + 16) + 8);
            v127 = llvm::PointerType::get(v123, (llvm::Type *)(v126 >> 8));
            v128 = (unsigned __int8 *)*(v67 - 4);
            v782 = 257;
            v129 = sub_1C4773E38((uint64_t *)&v763, 49, v128, v127, (uint64_t)&v777);
            v130 = *((_WORD *)v67 + 9);
            v762 = 257;
            v131 = (char *)operator new(0x60uLL);
            v132 = v131;
            v133 = (llvm::Value *)(v131 + 32);
            *((_QWORD *)v131 + 2) = 0;
            *((_QWORD *)v131 + 3) = v131 + 32;
            v782 = 257;
            *((_QWORD *)v131 + 4) = v124;
            *((_QWORD *)v131 + 5) = 0;
            *((_WORD *)v131 + 24) = 60;
            *((_DWORD *)v131 + 13) = 1;
            *(_OWORD *)(v131 + 56) = 0u;
            *(_OWORD *)(v131 + 72) = 0u;
            *((_DWORD *)v131 + 22) = 0;
            *(_QWORD *)v131 = v129;
            *((_QWORD *)v131 + 1) = 0;
            if (v129)
            {
              v136 = *((_QWORD *)v129 + 1);
              v135 = v129 + 8;
              v134 = v136;
              *((_QWORD *)v131 + 1) = v136;
              if (v136)
                *(_QWORD *)(v134 + 16) = v131 + 8;
              *((_QWORD *)v131 + 2) = v135;
              *v135 = v131;
            }
            *((_WORD *)v131 + 25) = v130 & 0x7E;
            v131[92] = 1;
            llvm::Value::setName((uint64_t ***)v131 + 4, (uint64_t)&v777);
            (*(void (**)(uint64_t, llvm::Value *, uint64_t **, uint64_t, _QWORD *))(*(_QWORD *)v773 + 16))(v773, v133, &v758, v769, v770);
            if (!(_DWORD)v764)
            {
LABEL_160:
              v137 = (llvm::ConstantInt *)(***(_QWORD ***)v31 + 1960);
              v138 = llvm::ConstantInt::get(v137, 0, 0);
              v782 = 257;
              v139 = sub_1C4772EE0((uint64_t *)&v763, (uint64_t)v133, (uint64_t)v138, (uint64_t)&v777);
              v140 = llvm::ConstantInt::get(v137, 1, 0);
              v782 = 257;
              v141 = sub_1C4772EE0((uint64_t *)&v763, (uint64_t)v133, (uint64_t)v140, (uint64_t)&v777);
              v143 = llvm::UndefValue::get(v742, v142);
              v782 = 257;
              v144 = sub_1C4773154((uint64_t *)&v763, (uint64_t)v143, (uint64_t)v139, (uint64_t)v138, (uint64_t)&v777);
              v782 = 257;
              v145 = sub_1C4773154((uint64_t *)&v763, (uint64_t)v144, (uint64_t)v141, (uint64_t)v140, (uint64_t)&v777);
              v146 = llvm::ConstantInt::get(v137, 2, 0);
              v782 = 257;
              v147 = sub_1C4773154((uint64_t *)&v763, (uint64_t)v145, (uint64_t)v119, (uint64_t)v146, (uint64_t)&v777);
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v31, (llvm::Value *)v147, (llvm::Value *)1);
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v750, v31);
              if (v763 != &v765)
                free(v763);
              v740 = 1;
LABEL_220:
              v27 = v747;
              v29 = v748;
              goto LABEL_24;
            }
            v357 = (char *)v763;
            v358 = (char *)v763 + 16 * v764;
            v359 = (unsigned __int8 **)(v132 + 80);
            while (2)
            {
              v360 = *(_DWORD *)v357;
              v361 = (unsigned __int8 *)*((_QWORD *)v357 + 1);
              if (v361)
              {
                if (v360)
                  goto LABEL_467;
                v755 = *((_QWORD *)v357 + 1);
                llvm::MetadataTracking::track((uint64_t)&v755, v361, 2);
                v362 = *v359;
LABEL_471:
                if (v362)
                  llvm::MetadataTracking::untrack((uint64_t)(v132 + 80), v362);
                v363 = (unsigned __int8 *)v755;
                *v359 = (unsigned __int8 *)v755;
                if (v363)
                  llvm::MetadataTracking::retrack((uint64_t)&v755, v363, (uint64_t)(v132 + 80));
              }
              else
              {
                v362 = *v359;
                if (*v359 || (v132[55] & 0x20) != 0)
                {
                  if (!v360)
                  {
                    v755 = 0;
                    goto LABEL_471;
                  }
LABEL_467:
                  llvm::Value::setMetadata(v133, *(_DWORD *)v357, (llvm::MDNode *)v361);
                }
              }
              v357 += 16;
              if (v357 == v358)
                goto LABEL_160;
              continue;
            }
          }
          v350 = (char *)v763;
          v351 = (char *)v763 + 16 * v764;
          v352 = (unsigned __int8 **)(v118 + 80);
          while (2)
          {
            v353 = *(_DWORD *)v350;
            v354 = (unsigned __int8 *)*((_QWORD *)v350 + 1);
            if (v354)
            {
              if (v353)
                goto LABEL_452;
              v755 = *((_QWORD *)v350 + 1);
              llvm::MetadataTracking::track((uint64_t)&v755, v354, 2);
              v355 = *v352;
LABEL_456:
              if (v355)
                llvm::MetadataTracking::untrack((uint64_t)(v118 + 80), v355);
              v356 = (unsigned __int8 *)v755;
              *v352 = (unsigned __int8 *)v755;
              if (v356)
                llvm::MetadataTracking::retrack((uint64_t)&v755, v356, (uint64_t)(v118 + 80));
            }
            else
            {
              v355 = *v352;
              if (*v352 || (v118[55] & 0x20) != 0)
              {
                if (!v353)
                {
                  v755 = 0;
                  goto LABEL_456;
                }
LABEL_452:
                llvm::Value::setMetadata(v119, *(_DWORD *)v350, (llvm::MDNode *)v354);
              }
            }
            v350 += 16;
            if (v350 == v351)
              goto LABEL_153;
            continue;
          }
        }
        if (*(_BYTE *)(*v67 + 8) == 13)
        {
          sub_1C4768AD0((uint64_t)v746, *v67);
          v150 = v149;
          if ((_DWORD)v148 == 1)
          if (((v150 + 7) & 0xFFFFFFFFFFFFFFF8) >= 0x41)
          {
            sub_1C4773D54((uint64_t)&v763, v31, 0, 0, 0);
            v151 = *(_DWORD *)(*v67 + 8) >> 8;
            LODWORD(v152) = 8 * (1 << ((unint64_t)*((unsigned __int16 *)v67 + 9) >> 1));
            if (v152 >= 0x40)
              v152 = 64;
            else
              v152 = v152;
            v153 = 1 << ~__clz(v152);
            if (!(_DWORD)v152)
              LODWORD(v153) = 0;
            do
            {
              v154 = v153;
              v155 = (llvm::Type *)(v151 / v153);
              v156 = v151 % v153;
              if (v153 < 9)
                break;
              LODWORD(v153) = v153 >> 1;
            }
            while (v156);
            if (!v156)
            {
              v157 = *(_QWORD *)*(v67 - 4);
              v158 = *(_DWORD *)(v157 + 8);
              if ((v158 & 0xFE) == 0x12)
                v158 = *(_DWORD *)(**(_QWORD **)(v157 + 16) + 8);
              v159 = *(_QWORD **)*v67;
              LODWORD(v777) = v154;
              if (v154 <= 63)
              {
                if (v154 > 31)
                {
                  if (v154 == 32)
                  {
                    v160 = (llvm::PointerType *)(*v159 + 1960);
                    goto LABEL_361;
                  }
                  goto LABEL_528;
                }
                switch(v154)
                {
                  case 16:
                    v160 = (llvm::PointerType *)(*v159 + 1936);
                    break;
                  case 8:
                    v160 = (llvm::PointerType *)(*v159 + 1912);
                    break;
                  case 1:
                    v160 = (llvm::PointerType *)(*v159 + 1888);
                    break;
                  default:
                    goto LABEL_528;
                }
              }
              else
              {
                if (v154 == 64)
                {
                  v160 = (llvm::PointerType *)(*v159 + 1984);
                  goto LABEL_361;
                }
                if (v154 == 128)
                {
                  v160 = (llvm::PointerType *)(*v159 + 2008);
                  goto LABEL_361;
                }
LABEL_528:
                v395 = sub_1C5270984(*v159 + 2168, &v777);
                v160 = (llvm::PointerType *)*((_QWORD *)v395 + 1);
                if (!v160)
                {
                  v396 = v395;
                  v160 = (llvm::PointerType *)sub_1C484358C(*v159 + 2040, 24, 3);
                  v397 = (int)v777;
                  *(_QWORD *)v160 = v159;
                  *((_QWORD *)v160 + 2) = 0;
                  *((_QWORD *)v160 + 1) = (v397 << 8) | 0xDu;
                  *((_QWORD *)v396 + 1) = v160;
                }
              }
LABEL_361:
              v284 = llvm::PointerType::get(v160, (llvm::Type *)(v158 >> 8));
              v285 = (unsigned __int8 *)*(v67 - 4);
              v782 = 257;
              v743 = sub_1C4773E38((uint64_t *)&v763, 49, v285, v284, (uint64_t)&v777);
              llvm::FixedVectorType::get(v160, v155);
              v288 = (unsigned __int8 *)llvm::UndefValue::get(v286, v287);
              if (v154 > v151)
              {
LABEL_362:
                v289 = *v67;
                v782 = 257;
                v290 = sub_1C4773E38((uint64_t *)&v763, 49, v288, v289, (uint64_t)&v777);
                v740 = 1;
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v31, (llvm::Value *)v290, (llvm::Value *)1);
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v750, v31);
                v27 = v747;
                goto LABEL_363;
              }
              v291 = 0;
              if (v155 <= 1)
                v292 = 1;
              else
                v292 = v155;
              while (1)
              {
                v782 = 257;
                v293 = sub_1C48678B0((uint64_t *)&v763, v160, v743, v291, (uint64_t)&v777);
                v762 = 257;
                llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v769 + 56) + 40) + 272, (uint64_t)v160);
                v295 = v294;
                v296 = (char *)operator new(0x60uLL);
                v297 = v296;
                v298 = (llvm::Value *)(v296 + 32);
                *((_QWORD *)v296 + 2) = 0;
                *((_QWORD *)v296 + 3) = v296 + 32;
                v782 = 257;
                *((_QWORD *)v296 + 4) = v160;
                *((_QWORD *)v296 + 5) = 0;
                *((_WORD *)v296 + 24) = 60;
                *((_DWORD *)v296 + 13) = 1;
                *(_OWORD *)(v296 + 56) = 0u;
                *(_OWORD *)(v296 + 72) = 0u;
                *((_DWORD *)v296 + 22) = 0;
                *(_QWORD *)v296 = v293;
                *((_QWORD *)v296 + 1) = 0;
                if (v293)
                {
                  v301 = v293[1];
                  v300 = v293 + 1;
                  v299 = v301;
                  *((_QWORD *)v296 + 1) = v301;
                  if (v301)
                    v299[2] = (uint64_t *)(v296 + 8);
                  *((_QWORD *)v296 + 2) = v300;
                  *v300 = v296;
                }
                *((_WORD *)v296 + 25) = 2 * (v295 & 0x3F);
                v296[92] = 1;
                llvm::Value::setName((uint64_t ***)v296 + 4, (uint64_t)&v777);
                (*(void (**)(uint64_t, llvm::Value *, uint64_t **, uint64_t, _QWORD *))(*(_QWORD *)v773 + 16))(v773, v298, &v758, v769, v770);
                if ((_DWORD)v764)
                  break;
LABEL_374:
                v782 = 257;
                v303 = *(llvm::ConstantInt **)(*(_QWORD *)v771 + 1984);
                v304 = *(_DWORD *)(*(_QWORD *)v771 + 1992);
                LODWORD(v759) = v304 >> 8;
                if (v304 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v758, v291, 0);
                }
                else
                {
                  if (v304 <= 0xFF)
                    v305 = 0;
                  else
                    v305 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v304);
                  v758 = (uint64_t *)(v305 & v291);
                }
                v306 = llvm::ConstantInt::get(v303, (llvm::LLVMContext *)&v758, v302);
                if (v759 >= 0x41 && v758)
                  MEMORY[0x1CAA32F9C](v758, 0x1000C8000313F17);
                v288 = sub_1C4773154((uint64_t *)&v763, (uint64_t)v288, (uint64_t)v298, (uint64_t)v306, (uint64_t)&v777);
                if (++v291 == v292)
                  goto LABEL_362;
              }
              v307 = (char *)v763;
              v308 = (char *)v763 + 16 * v764;
              v309 = (unsigned __int8 **)(v297 + 80);
              while (2)
              {
                v310 = *(_DWORD *)v307;
                v302 = (const llvm::APInt *)*((_QWORD *)v307 + 1);
                if (v302)
                {
                  if (v310)
                    goto LABEL_390;
                  v755 = *((_QWORD *)v307 + 1);
                  v730 = v309;
                  llvm::MetadataTracking::track((uint64_t)&v755, (unsigned __int8 *)v302, 2);
                  v309 = v730;
                  v311 = *v730;
                  if (*v730)
                  {
LABEL_388:
                    v728 = v309;
                    llvm::MetadataTracking::untrack((uint64_t)v309, v311);
                    v309 = v728;
                  }
LABEL_394:
                  v313 = (unsigned __int8 *)v755;
                  *v309 = (unsigned __int8 *)v755;
                  if (v313)
                  {
                    v731 = v309;
                    llvm::MetadataTracking::retrack((uint64_t)&v755, v313, (uint64_t)v309);
                    v309 = v731;
                  }
                }
                else
                {
                  v311 = *v309;
                  if (*v309 || (v297[55] & 0x20) != 0)
                  {
                    if (!v310)
                    {
                      v755 = 0;
                      if (v311)
                        goto LABEL_388;
                      goto LABEL_394;
                    }
LABEL_390:
                    v729 = v308;
                    v312 = v309;
                    llvm::Value::setMetadata(v298, *(_DWORD *)v307, v302);
                    v309 = v312;
                    v308 = v729;
                  }
                }
                v307 += 16;
                if (v307 == v308)
                  goto LABEL_374;
                continue;
              }
            }
LABEL_363:
            if (v763 != &v765)
              free(v763);
LABEL_365:
            v29 = v748;
            goto LABEL_24;
          }
        }
      }
      v161 = *(unsigned __int8 *)(v31 + 16);
      if (v161 == 61)
        v162 = v31;
      else
        v162 = 0;
      if (v28)
      {
        v29 = v748;
        if (v161 == 61)
        {
          v163 = **(_QWORD **)(v162 - 32);
          v164 = *(_DWORD *)(v163 + 8);
          if ((v164 & 0xFE) == 0x12)
            v164 = *(_DWORD *)(**(_QWORD **)(v163 + 16) + 8);
          v165 = *(uint64_t **)(v162 - 64);
          v166 = *v165;
          v167 = (v164 & 0xFFFFFF00) == 0x4000 && (*(_DWORD *)(*v165 + 8) & 0xFE) == 18;
          if (v167 && *(_DWORD *)(*(_QWORD *)(v166 + 24) + 8) == 2061 && *(_DWORD *)(v166 + 32) == 3)
          {
            sub_1C4773D54((uint64_t)&v763, v31, 0, 0, 0);
            if ((*(_DWORD *)(v166 + 8) & 0xFE) == 0x12)
              v166 = **(_QWORD **)(v166 + 16);
            v168 = **(_QWORD **)(v162 - 32);
            v169 = *(_DWORD *)(v168 + 8);
            if ((v169 & 0xFE) == 0x12)
              v169 = *(_DWORD *)(**(_QWORD **)(v168 + 16) + 8);
            v170 = llvm::PointerType::get((llvm::PointerType *)v166, (llvm::Type *)(v169 >> 8));
            v171 = *(unsigned __int8 **)(v162 - 32);
            v782 = 257;
            v172 = sub_1C4773E38((uint64_t *)&v763, 49, v171, v170, (uint64_t)&v777);
            v782 = 257;
            v173 = sub_1C4772C18((uint64_t *)&v763, (llvm::GetElementPtrInst *)v166, v172, 2u, (uint64_t)&v777);
            v174 = (llvm::ConstantInt *)(***(_QWORD ***)v31 + 1960);
            v175 = llvm::ConstantInt::get(v174, 2, 0);
            v176 = *(_QWORD *)(v162 - 64);
            v782 = 257;
            v177 = sub_1C4772EE0((uint64_t *)&v763, v176, (uint64_t)v175, (uint64_t)&v777);
            v178 = (char *)operator new(0x80uLL);
            v179 = v178;
            *((_DWORD *)v178 + 21) = *((_DWORD *)v178 + 21) & 0x38000000 | 2;
            *(_QWORD *)v178 = 0;
            *((_QWORD *)v178 + 2) = 0;
            *((_QWORD *)v178 + 1) = 0;
            *((_QWORD *)v178 + 5) = 0;
            *((_QWORD *)v178 + 6) = 0;
            *((_QWORD *)v178 + 4) = 0;
            v180 = (uint64_t ****)(v178 + 32);
            *((_QWORD *)v178 + 8) = ***(_QWORD ***)v177 + 1576;
            v181 = (llvm::Value *)(v178 + 64);
            *((_QWORD *)v178 + 3) = v178 + 64;
            *((_QWORD *)v178 + 7) = v178 + 64;
            *((_QWORD *)v178 + 9) = 0;
            v178[80] = 61;
            v178[81] = 0;
            *((_WORD *)v178 + 41) = 0;
            *((_DWORD *)v178 + 21) = 2;
            *(_OWORD *)(v178 + 88) = 0u;
            *(_OWORD *)(v178 + 104) = 0u;
            *((_DWORD *)v178 + 30) = 0;
            *(_QWORD *)v178 = v177;
            v184 = *((_QWORD *)v177 + 1);
            v183 = v177 + 8;
            v182 = v184;
            *((_QWORD *)v178 + 1) = v184;
            if (v184)
              *(_QWORD *)(v182 + 16) = v178 + 8;
            *((_QWORD *)v178 + 2) = v183;
            *v183 = v178;
            if (*((_QWORD *)v178 + 4))
            {
              **((_QWORD **)v178 + 6) = *((_QWORD *)v178 + 5);
              v539 = *((_QWORD *)v178 + 5);
              if (v539)
                *(_QWORD *)(v539 + 16) = *((_QWORD *)v178 + 6);
            }
            *v180 = v173;
            if (v173)
            {
              v187 = v173[1];
              v186 = (uint64_t *****)(v173 + 1);
              v185 = v187;
              *((_QWORD *)v178 + 5) = v187;
              if (v187)
                v185[2] = (uint64_t *)(v178 + 40);
              *((_QWORD *)v178 + 6) = v186;
              *v186 = v180;
            }
            *((_WORD *)v178 + 41) = 0;
            v178[124] = 1;
            v782 = 257;
            (*(void (**)(uint64_t, llvm::Value *, void ***, uint64_t, _QWORD *))(*(_QWORD *)v773 + 16))(v773, v181, &v777, v769, v770);
            if (!(_DWORD)v764)
            {
LABEL_206:
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v166, (llvm::Type *)2);
              v189 = v188;
              v190 = **(_QWORD **)(v162 - 32);
              v191 = *(_DWORD *)(v190 + 8);
              if ((v191 & 0xFE) == 0x12)
                v191 = *(_DWORD *)(**(_QWORD **)(v190 + 16) + 8);
              v192 = llvm::PointerType::get(v188, (llvm::Type *)(v191 >> 8));
              v193 = *(unsigned __int8 **)(v162 - 32);
              v782 = 257;
              v194 = sub_1C4773E38((uint64_t *)&v763, 49, v193, v192, (uint64_t)&v777);
              v195 = llvm::ConstantInt::get(v174, 0, 0);
              v196 = *(_QWORD *)(v162 - 64);
              v782 = 257;
              v197 = sub_1C4772EE0((uint64_t *)&v763, v196, (uint64_t)v195, (uint64_t)&v777);
              v198 = llvm::ConstantInt::get(v174, 1, 0);
              v199 = *(_QWORD *)(v162 - 64);
              v782 = 257;
              v200 = sub_1C4772EE0((uint64_t *)&v763, v199, (uint64_t)v198, (uint64_t)&v777);
              v202 = llvm::UndefValue::get(v189, v201);
              v782 = 257;
              v203 = sub_1C4773154((uint64_t *)&v763, (uint64_t)v202, (uint64_t)v197, (uint64_t)v195, (uint64_t)&v777);
              v782 = 257;
              v204 = sub_1C4773154((uint64_t *)&v763, (uint64_t)v203, (uint64_t)v200, (uint64_t)v198, (uint64_t)&v777);
              v205 = *(_WORD *)(v162 + 18);
              v206 = (char *)operator new(0x80uLL);
              v207 = v206;
              *((_DWORD *)v206 + 21) = *((_DWORD *)v206 + 21) & 0x38000000 | 2;
              *(_QWORD *)v206 = 0;
              *((_QWORD *)v206 + 2) = 0;
              *((_QWORD *)v206 + 1) = 0;
              *((_QWORD *)v206 + 5) = 0;
              *((_QWORD *)v206 + 6) = 0;
              *((_QWORD *)v206 + 4) = 0;
              v208 = (unsigned __int8 **)(v206 + 32);
              *((_QWORD *)v206 + 8) = ***(_QWORD ***)v204 + 1576;
              v209 = (llvm::Value *)(v206 + 64);
              *((_QWORD *)v206 + 3) = v206 + 64;
              *((_QWORD *)v206 + 7) = v206 + 64;
              *((_QWORD *)v206 + 9) = 0;
              v206[80] = 61;
              v206[81] = 0;
              *((_WORD *)v206 + 41) = 0;
              *((_DWORD *)v206 + 21) = 2;
              *(_OWORD *)(v206 + 88) = 0u;
              *(_OWORD *)(v206 + 104) = 0u;
              *((_DWORD *)v206 + 30) = 0;
              *(_QWORD *)v206 = v204;
              v212 = *((_QWORD *)v204 + 1);
              v211 = v204 + 8;
              v210 = v212;
              *((_QWORD *)v206 + 1) = v212;
              if (v212)
                *(_QWORD *)(v210 + 16) = v206 + 8;
              *((_QWORD *)v206 + 2) = v211;
              *v211 = v206;
              if (*((_QWORD *)v206 + 4))
              {
                **((_QWORD **)v206 + 6) = *((_QWORD *)v206 + 5);
                v540 = *((_QWORD *)v206 + 5);
                if (v540)
                  *(_QWORD *)(v540 + 16) = *((_QWORD *)v206 + 6);
              }
              *v208 = v194;
              if (v194)
              {
                v215 = *((_QWORD *)v194 + 1);
                v214 = (unsigned __int8 ***)(v194 + 8);
                v213 = v215;
                *((_QWORD *)v206 + 5) = v215;
                if (v215)
                  *(_QWORD *)(v213 + 16) = v206 + 40;
                *((_QWORD *)v206 + 6) = v214;
                *v214 = v208;
              }
              *((_WORD *)v206 + 41) = v205 & 0x7E;
              v206[124] = 1;
              v782 = 257;
              (*(void (**)(uint64_t, llvm::Value *, void ***, uint64_t, _QWORD *))(*(_QWORD *)v773 + 16))(v773, v209, &v777, v769, v770);
              if (!(_DWORD)v764)
              {
LABEL_216:
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v750, v31);
                v216 = (uint64_t *)v763;
LABEL_217:
                if (v216 != (uint64_t *)&v765)
                  free(v216);
                v740 = 1;
                goto LABEL_220;
              }
              v371 = (char *)v763;
              v372 = (char *)v763 + 16 * v764;
              v373 = (unsigned __int8 **)(v207 + 112);
              while (1)
              {
                v374 = *(_DWORD *)v371;
                v375 = (unsigned __int8 *)*((_QWORD *)v371 + 1);
                if (v375)
                {
                  if (!v374)
                  {
                    v758 = (uint64_t *)*((_QWORD *)v371 + 1);
                    llvm::MetadataTracking::track((uint64_t)&v758, v375, 2);
                    v376 = *v373;
                    goto LABEL_502;
                  }
                }
                else
                {
                  v376 = *v373;
                  if (!*v373 && (v207[87] & 0x20) == 0)
                    goto LABEL_499;
                  if (!v374)
                  {
                    v758 = 0;
LABEL_502:
                    if (v376)
                      llvm::MetadataTracking::untrack((uint64_t)(v207 + 112), v376);
                    v377 = (unsigned __int8 *)v758;
                    *v373 = (unsigned __int8 *)v758;
                    if (v377)
                      llvm::MetadataTracking::retrack((uint64_t)&v758, v377, (uint64_t)(v207 + 112));
                    goto LABEL_499;
                  }
                }
                llvm::Value::setMetadata(v209, *(_DWORD *)v371, (llvm::MDNode *)v375);
LABEL_499:
                v371 += 16;
                if (v371 == v372)
                  goto LABEL_216;
              }
            }
            v364 = (char *)v763;
            v365 = (char *)v763 + 16 * v764;
            v366 = (unsigned __int8 **)(v179 + 112);
            while (1)
            {
              v367 = *(_DWORD *)v364;
              v368 = (unsigned __int8 *)*((_QWORD *)v364 + 1);
              if (v368)
              {
                if (!v367)
                {
                  v758 = (uint64_t *)*((_QWORD *)v364 + 1);
                  llvm::MetadataTracking::track((uint64_t)&v758, v368, 2);
                  v369 = *v366;
                  goto LABEL_487;
                }
              }
              else
              {
                v369 = *v366;
                if (!*v366 && (v179[87] & 0x20) == 0)
                  goto LABEL_484;
                if (!v367)
                {
                  v758 = 0;
LABEL_487:
                  if (v369)
                    llvm::MetadataTracking::untrack((uint64_t)(v179 + 112), v369);
                  v370 = (unsigned __int8 *)v758;
                  *v366 = (unsigned __int8 *)v758;
                  if (v370)
                    llvm::MetadataTracking::retrack((uint64_t)&v758, v370, (uint64_t)(v179 + 112));
                  goto LABEL_484;
                }
              }
              llvm::Value::setMetadata(v181, *(_DWORD *)v364, (llvm::MDNode *)v368);
LABEL_484:
              v364 += 16;
              if (v364 == v365)
                goto LABEL_206;
            }
          }
          if (*(_DWORD *)(*v165 + 8) != 13)
            goto LABEL_24;
          sub_1C4768AD0((uint64_t)v746, *v165);
          v219 = v218;
          if ((_DWORD)v217 == 1)
          if (v219 > 0x40)
          {
            sub_1C4773D54((uint64_t)&v763, v31, 0, 0, 0);
            v220 = *(_DWORD *)(*v165 + 8) >> 8;
            LODWORD(v221) = 8 * (1 << ((unint64_t)*(unsigned __int16 *)(v162 + 18) >> 1));
            if (v221 >= 0x40)
              v221 = 64;
            else
              v221 = v221;
            v222 = 1 << ~__clz(v221);
            if (!(_DWORD)v221)
              LODWORD(v222) = 0;
            do
            {
              v223 = v222;
              v224 = (llvm::Type *)(v220 / v222);
              v225 = v220 % v222;
              if (v222 < 9)
                break;
              LODWORD(v222) = v222 >> 1;
            }
            while (v225);
            if (v225)
              goto LABEL_403;
            v226 = **(_QWORD **)(v162 - 32);
            v227 = *(_DWORD *)(v226 + 8);
            if ((v227 & 0xFE) == 0x12)
              v227 = *(_DWORD *)(**(_QWORD **)(v226 + 16) + 8);
            v228 = **(_QWORD ***)v162;
            LODWORD(v777) = v223;
            if (v223 <= 63)
            {
              if (v223 > 31)
              {
                if (v223 == 32)
                {
                  v229 = (llvm::FixedVectorType *)(*v228 + 1960);
                  goto LABEL_401;
                }
                goto LABEL_532;
              }
              switch(v223)
              {
                case 16:
                  v229 = (llvm::FixedVectorType *)(*v228 + 1936);
                  break;
                case 8:
                  v229 = (llvm::FixedVectorType *)(*v228 + 1912);
                  break;
                case 1:
                  v229 = (llvm::FixedVectorType *)(*v228 + 1888);
                  break;
                default:
                  goto LABEL_532;
              }
            }
            else
            {
              if (v223 == 64)
              {
                v229 = (llvm::FixedVectorType *)(*v228 + 1984);
                goto LABEL_401;
              }
              if (v223 == 128)
              {
                v229 = (llvm::FixedVectorType *)(*v228 + 2008);
                goto LABEL_401;
              }
LABEL_532:
              v398 = sub_1C5270984(*v228 + 2168, &v777);
              v229 = (llvm::FixedVectorType *)*((_QWORD *)v398 + 1);
              if (!v229)
              {
                v399 = v398;
                v229 = (llvm::FixedVectorType *)sub_1C484358C(*v228 + 2040, 24, 3);
                v400 = (int)v777;
                *(_QWORD *)v229 = v228;
                *((_QWORD *)v229 + 2) = 0;
                *((_QWORD *)v229 + 1) = (v400 << 8) | 0xDu;
                *((_QWORD *)v399 + 1) = v229;
              }
            }
LABEL_401:
            v314 = (llvm::Type *)(v227 >> 8);
            llvm::FixedVectorType::get(v229, v224);
            v316 = v315;
            v744 = v229;
            v317 = llvm::PointerType::get(v229, v314);
            v318 = *(unsigned __int8 **)(v162 - 32);
            v782 = 257;
            v319 = sub_1C4773E38((uint64_t *)&v763, 49, v318, v317, (uint64_t)&v777);
            v782 = 257;
            v320 = sub_1C4773E38((uint64_t *)&v763, 49, (unsigned __int8 *)v165, v316, (uint64_t)&v777);
            if (v223 > v220)
            {
LABEL_402:
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v750, v31);
              v740 = 1;
              v27 = v747;
              v29 = v748;
LABEL_403:
              if (v763 != &v765)
                free(v763);
              goto LABEL_24;
            }
            v322 = (uint64_t)v320;
            v323 = 0;
            if (v224 <= 1)
              v324 = 1;
            else
              v324 = v224;
            while (1)
            {
              v782 = 257;
              v325 = *(llvm::ConstantInt **)(*(_QWORD *)v771 + 1984);
              v326 = *(_DWORD *)(*(_QWORD *)v771 + 1992);
              LODWORD(v759) = v326 >> 8;
              if (v326 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v758, v323, 0);
              }
              else
              {
                if (v326 <= 0xFF)
                  v327 = 0;
                else
                  v327 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v326);
                v758 = (uint64_t *)(v327 & v323);
              }
              v328 = llvm::ConstantInt::get(v325, (llvm::LLVMContext *)&v758, v321);
              if (v759 >= 0x41 && v758)
                MEMORY[0x1CAA32F9C](v758, 0x1000C8000313F17);
              v329 = (uint64_t *)sub_1C4772EE0((uint64_t *)&v763, v322, (uint64_t)v328, (uint64_t)&v777);
              v782 = 257;
              v330 = sub_1C48678B0((uint64_t *)&v763, v744, v319, v323, (uint64_t)&v777);
              llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v769 + 56) + 40) + 272, *v329);
              v332 = v331;
              v333 = (char *)operator new(0x80uLL);
              v334 = v333;
              *((_DWORD *)v333 + 21) = *((_DWORD *)v333 + 21) & 0x38000000 | 2;
              *(_QWORD *)v333 = 0;
              *((_QWORD *)v333 + 2) = 0;
              *((_QWORD *)v333 + 1) = 0;
              *((_QWORD *)v333 + 5) = 0;
              *((_QWORD *)v333 + 6) = 0;
              *((_QWORD *)v333 + 4) = 0;
              v335 = (uint64_t ****)(v333 + 32);
              *((_QWORD *)v333 + 8) = **(_QWORD **)*v329 + 1576;
              v336 = (llvm::Value *)(v333 + 64);
              *((_QWORD *)v333 + 3) = v333 + 64;
              *((_QWORD *)v333 + 7) = v333 + 64;
              *((_QWORD *)v333 + 9) = 0;
              v333[80] = 61;
              v333[81] = 0;
              *((_WORD *)v333 + 41) = 0;
              *((_DWORD *)v333 + 21) = 2;
              *(_OWORD *)(v333 + 88) = 0u;
              *(_OWORD *)(v333 + 104) = 0u;
              *((_DWORD *)v333 + 30) = 0;
              *(_QWORD *)v333 = v329;
              v339 = v329[1];
              v338 = v329 + 1;
              v337 = v339;
              *((_QWORD *)v333 + 1) = v339;
              if (v339)
                *(_QWORD *)(v337 + 16) = v333 + 8;
              *((_QWORD *)v333 + 2) = v338;
              *v338 = v333;
              if (*((_QWORD *)v333 + 4))
              {
                **((_QWORD **)v333 + 6) = *((_QWORD *)v333 + 5);
                v349 = *((_QWORD *)v333 + 5);
                if (v349)
                  *(_QWORD *)(v349 + 16) = *((_QWORD *)v333 + 6);
              }
              *v335 = v330;
              if (v330)
              {
                v342 = v330[1];
                v341 = (uint64_t *****)(v330 + 1);
                v340 = v342;
                *((_QWORD *)v333 + 5) = v342;
                if (v342)
                  v340[2] = (uint64_t *)(v333 + 40);
                *((_QWORD *)v333 + 6) = v341;
                *v341 = v335;
              }
              *((_WORD *)v333 + 41) = 2 * (v332 & 0x3F);
              v333[124] = 1;
              v782 = 257;
              (*(void (**)(uint64_t, llvm::Value *, void ***, uint64_t, _QWORD *))(*(_QWORD *)v773 + 16))(v773, v336, &v777, v769, v770);
              if ((_DWORD)v764)
                break;
LABEL_423:
              if (++v323 == v324)
                goto LABEL_402;
            }
            v343 = (char *)v763;
            v344 = (char *)v763 + 16 * v764;
            v345 = (unsigned __int8 **)(v334 + 112);
            while (2)
            {
              v346 = *(_DWORD *)v343;
              v321 = (const llvm::APInt *)*((_QWORD *)v343 + 1);
              if (v321)
              {
                if (v346)
                  goto LABEL_432;
                v758 = (uint64_t *)*((_QWORD *)v343 + 1);
                llvm::MetadataTracking::track((uint64_t)&v758, (unsigned __int8 *)v321, 2);
                v347 = *v345;
LABEL_436:
                if (v347)
                  llvm::MetadataTracking::untrack((uint64_t)(v334 + 112), v347);
                v348 = (unsigned __int8 *)v758;
                *v345 = (unsigned __int8 *)v758;
                if (v348)
                  llvm::MetadataTracking::retrack((uint64_t)&v758, v348, (uint64_t)(v334 + 112));
              }
              else
              {
                v347 = *v345;
                if (*v345 || (v334[87] & 0x20) != 0)
                {
                  if (!v346)
                  {
                    v758 = 0;
                    goto LABEL_436;
                  }
LABEL_432:
                  llvm::Value::setMetadata(v336, *(_DWORD *)v343, v321);
                }
              }
              v343 += 16;
              if (v343 == v344)
                goto LABEL_423;
              continue;
            }
          }
          v161 = *(unsigned __int8 *)(v31 + 16);
        }
      }
      else
      {
        v29 = v748;
      }
      if (v161 != 84)
        goto LABEL_24;
      v235 = *(_QWORD *)(v31 - 32);
      if (!v235
        || *(_BYTE *)(v235 + 16)
        || *(_QWORD *)(v235 + 24) != *(_QWORD *)(v31 + 72)
        || (*(_BYTE *)(v235 + 33) & 0x20) == 0)
      {
        goto LABEL_24;
      }
      v236 = *(_DWORD *)(*(v28 - 7) + 36);
      if ((v236 - 1282) < 0x190)
      {
LABEL_251:
        if (*(v28 - 2))
        {
          v237 = 1;
          llvm::SampleInfo::SampleInfo((uint64_t)&v763, v236, 1);
          v777 = (void **)&v779;
          v778 = 0x400000000;
          v239 = *(v28 - 2);
          if (v239)
          {
            v240 = 0;
            do
            {
              v241 = *(unsigned __int8 **)(v239 + 24);
              v242 = v241[16];
              if (v240 >= HIDWORD(v778))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v777, (uint64_t)&v779, v240 + 1, 8);
                v240 = v778;
              }
              if (v242 <= 0x1B)
                v243 = 0;
              else
                v243 = v241;
              v777[v240] = v243;
              v240 = v778 + 1;
              LODWORD(v778) = v778 + 1;
              v239 = *(_QWORD *)(v239 + 8);
            }
            while (v239);
            if (v240)
            {
              while (1)
              {
                v263 = v777[--v240];
                LODWORD(v778) = v240;
                v27 = v747;
                if (!v263)
                {
LABEL_475:
                  v237 = 0;
                  goto LABEL_336;
                }
                v237 = 0;
                v264 = *((unsigned __int8 *)v263 + 16);
                if (v264 <= 0x5B)
                  break;
                if (v264 != 92)
                {
                  if (v264 != 95)
                    goto LABEL_336;
LABEL_323:
                  for (i = v263[1]; i; i = *(_QWORD *)(i + 8))
                  {
                    v266 = *(unsigned __int8 **)(i + 24);
                    v267 = v266[16];
                    if (v240 >= HIDWORD(v778))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v777, (uint64_t)&v779, v240 + 1, 8);
                      v240 = v778;
                    }
                    if (v267 <= 0x1B)
                      v268 = 0;
                    else
                      v268 = v266;
                    v777[v240] = v268;
                    v240 = v778 + 1;
                    LODWORD(v778) = v778 + 1;
                  }
                  goto LABEL_333;
                }
                if (*((_DWORD *)v263 + 18) > 1u)
                  goto LABEL_475;
                if (*(_DWORD *)v263[8])
                {
                  v237 = 0;
                  goto LABEL_335;
                }
LABEL_333:
                if (!v240)
                  goto LABEL_334;
              }
              if (v264 != 83 && v264 != 85)
                goto LABEL_336;
              goto LABEL_323;
            }
LABEL_334:
            v237 = 1;
          }
LABEL_335:
          v27 = v747;
LABEL_336:
          if (v777 != (void **)&v779)
            free(v777);
          v29 = v748;
          if (!v237)
            goto LABEL_24;
          v269 = HIDWORD(v766);
          v270 = (_DWORD *)*((_QWORD *)v30 + 4 * HIDWORD(v766) + -4 * (*((_DWORD *)v28 - 1) & 0x7FFFFFF));
          v271 = v270 + 6;
          if (v270[8] >= 0x41u)
            v271 = (_QWORD *)*v271;
          v272 = *v271 & 0xFFFFFFFFFFFFFFFELL;
          v273 = *(llvm::Constant ****)v270;
          v274 = *(unsigned int *)(*(_QWORD *)v270 + 8);
          LODWORD(v778) = v274 >> 8;
          if (v274 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v777, v272, 0);
          }
          else
          {
            if (v274 <= 0xFF)
              v275 = 0;
            else
              v275 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v274);
            v777 = (void **)(v275 & v272);
          }
          IntegerValue = llvm::Constant::getIntegerValue(v273, (llvm::Type *)&v777, v238);
          v277 = (char *)v30 - 32 * (*((_DWORD *)v28 - 1) & 0x7FFFFFF);
          v278 = &v277[32 * v269];
          if (*(_QWORD *)v278)
          {
            **((_QWORD **)v278 + 2) = *((_QWORD *)v278 + 1);
            v279 = *((_QWORD *)v278 + 1);
            if (v279)
              *(_QWORD *)(v279 + 16) = *((_QWORD *)v278 + 2);
          }
          *(_QWORD *)v278 = IntegerValue;
          if (IntegerValue)
          {
            v282 = IntegerValue[1];
            v280 = (char **)(IntegerValue + 1);
            v281 = v282;
            v283 = &v277[32 * v269];
            *((_QWORD *)v283 + 1) = v282;
            if (v282)
              *((_QWORD *)v281 + 2) = v283 + 8;
            *((_QWORD *)v283 + 2) = v280;
            *v280 = v278;
          }
          if (v778 >= 0x41 && v777)
            MEMORY[0x1CAA32F9C](v777, 0x1000C8000313F17);
          llvm::ScalarEvolution::forgetValue(v739, (llvm::Value *)(v28 - 3));
          goto LABEL_297;
        }
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v750, v31);
LABEL_358:
        v740 = 1;
        goto LABEL_24;
      }
      if (v236 <= 1265)
      {
        if (v236 > 166)
        {
          if ((v236 - 167) < 2)
          {
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v750, v31);
            goto LABEL_24;
          }
          if (v236 != 295)
            goto LABEL_24;
          for (j = *(_QWORD **)(v734 + 80); j != v737; j = (_QWORD *)j[1])
          {
            if (j)
              v406 = j - 3;
            else
              v406 = 0;
            v407 = v406[5];
            if (v407)
              v408 = v407 - 24;
            else
              v408 = 0;
            if (*(unsigned __int8 *)(v408 + 16) - 29 >= 0xB)
              v408 = 0;
            if (*(_BYTE *)(v408 + 16) == 29)
            {
              v454 = (_QWORD *)*v27;
              if ((_QWORD *)*v27 == v27)
              {
                v455 = 0;
              }
              else
              {
                v455 = (llvm::Instruction *)(v454 - 3);
                if (v454)
                  v456 = (llvm::Instruction *)(v454 - 3);
                else
                  v456 = 0;
                v457 = *((unsigned __int8 *)v456 + 16) - 40;
                if (v457 >= 0xFFFFFFF5)
                  v458 = v456;
                else
                  v458 = 0;
                if (v454)
                {
                  if (*((_BYTE *)v458 + 16) == 30 && v457 >= 0xFFFFFFF5)
                  {
                    if (*((_BYTE *)v454 - 8) != 30)
                    {
                      v460 = 2;
                      switch(*((_BYTE *)v454 - 8))
                      {
                        case 0x1E:
                          __break(1u);
                          goto LABEL_1070;
                        case 0x1F:
                          v460 = (*((_DWORD *)v454 - 1) >> 1) & 0x3FFFFFF;
                          goto LABEL_691;
                        case 0x20:
                        case 0x26:
                          v460 = (*((_DWORD *)v454 - 1) & 0x7FFFFFF) - 1;
                          goto LABEL_691;
                        case 0x21:
                          goto LABEL_608;
                        case 0x24:
                          v460 = *((_WORD *)v454 - 3) & 1;
                          goto LABEL_691;
                        case 0x25:
                          v460 = 1;
                          goto LABEL_608;
                        case 0x27:
                          v460 = *((_DWORD *)v454 + 14) + 1;
LABEL_691:
                          if (!v460)
                            goto LABEL_654;
                          goto LABEL_608;
                        default:
                          goto LABEL_654;
                      }
                    }
                    if ((*((_DWORD *)v454 - 1) & 0x7FFFFFF) == 3)
                      v460 = 2;
                    else
                      v460 = 1;
LABEL_608:
                    for (k = 0; k != v460; ++k)
                    {
                      Successor = llvm::Instruction::getSuccessor(v455, k);
                      v463 = v775;
                      if (v775 >= (unint64_t)HIDWORD(v775))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v774, (uint64_t)v776, v775 + 1, 8);
                        v463 = v775;
                      }
                      *(_QWORD *)&v774[8 * v463] = Successor;
                      LODWORD(v775) = v775 + 1;
                    }
                    v455 = v458;
                  }
                }
              }
LABEL_654:
              sub_1C4773D54((uint64_t)&v763, v31, 0, 0, 0);
              sub_1C4867DC8((uint64_t *)&v763, (uint64_t)(j - 3));
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v750, (uint64_t)v455);
              v497 = j + 2;
              if ((_QWORD *)j[2] != j + 2)
              {
                for (m = j[3]; ; m = *(_QWORD *)(v499 + 32))
                {
                  v499 = m - 24;
                  v500 = m ? m - 24 : 0;
                  if (!m || *(_BYTE *)(v500 + 16) != 83)
                    break;
                  v501 = llvm::UndefValue::get(*(llvm::UndefValue **)v499, v496);
                  sub_1C477667C((llvm::PHINode *)v499, (uint64_t)v501, *(_QWORD *)(v31 + 40));
                }
              }
              v502 = (_QWORD *)j[3];
              v503 = v502 - 3;
              if (!v502)
                v503 = 0;
              if (*((_BYTE *)v503 + 16) == 83)
              {
                do
                {
                  v502 = (_QWORD *)v502[1];
                  v504 = v502 - 3;
                  if (!v502)
                    v504 = 0;
                }
                while (*((_BYTE *)v504 + 16) == 83);
              }
              v769 = v502[2];
              v770 = v502;
              v505 = (void **)v502[3];
              v777 = v505;
              if (v505)
              {
                llvm::MetadataTracking::track((uint64_t)&v777, (unsigned __int8 *)v505, 2);
                v506 = v777;
              }
              else
              {
                v506 = 0;
              }
              sub_1C4774EF4((uint64_t)&v763, 0, (uint64_t)v506);
              if (v777)
                llvm::MetadataTracking::untrack((uint64_t)&v777, (unsigned __int8 *)v777);
              for (n = (_QWORD *)j[3]; n != v497; n = (_QWORD *)n[1])
              {
                v508 = n - 3;
                if (n)
                  v509 = n - 3;
                else
                  v509 = 0;
                if (*((_BYTE *)v509 + 16) != 83)
                  goto LABEL_694;
              }
              v508 = 0;
LABEL_694:
              v518 = v508 + 3;
              while (v518 != v497)
              {
                if (v518)
                  v519 = v518 - 3;
                else
                  v519 = 0;
                v520 = *((_DWORD *)v519 + 5);
                if ((v520 & 0x40000000) != 0)
                {
                  v522 = (uint64_t **)*(v519 - 1);
                  v521 = v520 & 0x7FFFFFF;
                }
                else
                {
                  v521 = v520 & 0x7FFFFFF;
                  v522 = (uint64_t **)&v519[-4 * v521];
                }
                v518 = (_QWORD *)v518[1];
                if (v521)
                {
                  v523 = &v522[4 * v521];
                  do
                  {
                    v524 = *v522;
                    if (*v522)
                      v525 = *((unsigned __int8 *)*v522 + 16) >= 0x1Cu;
                    else
                      v525 = 0;
                    if (v525 && (_QWORD *)v524[5] != j - 3)
                    {
                      v526 = *v524;
                      v782 = 257;
                      v527 = (llvm::UndefValue **)sub_1C4867E94((uint64_t)&v763, v526, 2, (uint64_t)&v777);
                      v529 = llvm::UndefValue::get(*v527, v528);
                      sub_1C477667C((llvm::PHINode *)v527, (uint64_t)v529, *(_QWORD *)(v31 + 40));
                      v530 = *(j - 2);
                      if (v530)
                      {
                        while (1)
                        {
                          v531 = *(_QWORD *)(v530 + 24);
                          v532 = *(unsigned __int8 *)(v531 + 16);
                          v533 = v531 && v532 >= 0x1C;
                          v534 = !v533 || v532 - 29 > 0xA;
                          if (!v534)
                            break;
                          v530 = *(_QWORD *)(v530 + 8);
                          if (!v530)
                            goto LABEL_719;
                        }
LABEL_722:
                        v535 = *(_QWORD *)(v531 + 40);
                        if (v535 != *(_QWORD *)(v31 + 40))
                          sub_1C477667C((llvm::PHINode *)v527, (uint64_t)v524, v535);
                        while (1)
                        {
                          v530 = *(_QWORD *)(v530 + 8);
                          if (!v530)
                            break;
                          v531 = *(_QWORD *)(v530 + 24);
                          v536 = *(unsigned __int8 *)(v531 + 16);
                          if (v531)
                            v537 = v536 >= 0x1C;
                          else
                            v537 = 0;
                          if (v537 && v536 - 29 < 0xB)
                            goto LABEL_722;
                        }
                      }
LABEL_719:
                      sub_1C5EADA2C((uint64_t)(j - 3), (llvm::Value *)v524, (llvm::Value *)v527);
                    }
                    v522 += 4;
                  }
                  while (v522 != v523);
                }
              }
              if (v763 != &v765)
                free(v763);
              v27 = v747;
              break;
            }
          }
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v750, v31);
          v740 = 1;
          goto LABEL_365;
        }
        if (v236 != 52)
        {
          if (v236 != 139)
            goto LABEL_24;
          v401 = *((_QWORD *)v30 - 4 * (*((_DWORD *)v28 - 1) & 0x7FFFFFF));
          v758 = 0;
          v755 = 0;
          v402 = *(_QWORD *)(v401 + 8);
          if (!v402 || *(_QWORD *)(v402 + 8))
            goto LABEL_24;
          v403 = *(unsigned __int8 *)(v401 + 16);
          if (v403 == 5)
          {
            if (*(_WORD *)(v401 + 18) != 18)
              goto LABEL_24;
            v510 = (uint64_t **)(v401 - 32 * (*(_DWORD *)(v401 + 20) & 0x7FFFFFF));
            if (!*v510)
              goto LABEL_24;
            v758 = *v510;
            v404 = (const llvm::APInt *)v510[4];
            if (!v404)
              goto LABEL_24;
          }
          else
          {
            if (v403 != 46)
              goto LABEL_24;
            if (!*(_QWORD *)(v401 - 64))
              goto LABEL_24;
            v758 = *(uint64_t **)(v401 - 64);
            v404 = *(const llvm::APInt **)(v401 - 32);
            if (!v404)
              goto LABEL_24;
          }
          v755 = (uint64_t)v404;
          sub_1C4773D54((uint64_t)&v763, v31, 0, 0, 0);
          v757 = *(unsigned __int8 **)v401;
          Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(v734 + 40), 139, (uint64_t *)&v757, 1);
          v512 = Declaration;
          if (Declaration)
          {
            v513 = *(uint64_t ***)(Declaration + 24);
            v782 = 257;
            v514 = (uint64_t *)sub_1C4774778((uint64_t *)&v763, v513, Declaration, (uint64_t *)&v758, 1, (uint64_t)&v777, 0);
            v515 = *(uint64_t ***)(v512 + 24);
          }
          else
          {
            v782 = 257;
            v514 = (uint64_t *)sub_1C4774778((uint64_t *)&v763, 0, 0, (uint64_t *)&v758, 1, (uint64_t)&v777, 0);
            v515 = 0;
          }
          v782 = 257;
          v516 = sub_1C4774778((uint64_t *)&v763, v515, v512, &v755, 1, (uint64_t)&v777, 0);
          v782 = 257;
          v517 = (llvm::Value *)sub_1C4867450((uint64_t)&v763, v514, v516, v401, (uint64_t)&v777);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)(v28 - 3), v517, (llvm::Value *)1);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v750, v31);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v750, v401);
          v216 = (uint64_t *)v763;
          goto LABEL_217;
        }
        v409 = llvm::ConstantInt::get((llvm::ConstantInt *)(**(_QWORD **)*(v28 - 3) + 1888), 1, 0);
        v410 = (llvm::UndefValue *)((_QWORD *)v30 - 4 * (*((_DWORD *)v28 - 1) & 0x7FFFFFF))[4];
        v411 = *(unsigned int *)(*(v28 - 3) + 8);
        sub_1C4773D54((uint64_t)&v763, v31, 0, 0, 0);
        if (v411 >> 8 < 0x21)
        {
          v442 = ***(_QWORD ***)v30;
          v443 = ((*(_DWORD *)(*(_QWORD *)v30 + 8) >> 8) - 1);
          v444 = *(llvm::ConstantInt **)(v442 + 1960);
          v445 = *(_DWORD *)(v442 + 1968);
          LODWORD(v778) = v445 >> 8;
          if (v445 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v777, v443, 0);
          }
          else
          {
            if (v445 <= 0xFF)
              v446 = 0;
            else
              v446 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v445);
            v777 = (void **)(v446 & v443);
          }
          v447 = llvm::ConstantInt::get(v444, (llvm::LLVMContext *)&v777, v412);
          if (v778 >= 0x41 && v777)
            MEMORY[0x1CAA32F9C](v777, 0x1000C8000313F17);
          v448 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(v734 + 40), 2168, 0, 0);
          v758 = 0;
          v449 = (unsigned __int8 *)*((_QWORD *)v30 - 4 * (*((_DWORD *)v28 - 1) & 0x7FFFFFF));
          v450 = ***(_QWORD ***)v448 + 1960;
          v782 = 257;
          v758 = (uint64_t *)sub_1C4773690((uint64_t *)&v763, v449, v450, (uint64_t)&v777);
          v451 = *(uint64_t ***)(v448 + 24);
          v782 = 257;
          v452 = sub_1C4774778((uint64_t *)&v763, v451, v448, (uint64_t *)&v758, 1, (uint64_t)&v777, 0);
          v782 = 257;
          v453 = (unsigned __int8 *)sub_1C47733F8((uint64_t)&v763, (uint64_t)v447, v452, (uint64_t)&v777, 0, 0);
        }
        else
        {
          v732 = v411;
          v413 = *(llvm::ConstantInt **)(*(_QWORD *)v771 + 1960);
          LODWORD(v778) = *(_DWORD *)(*(_QWORD *)v771 + 1968) >> 8;
          if (v778 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v777, 0, 0);
          else
            v777 = 0;
          v415 = llvm::ConstantInt::get(v413, (llvm::LLVMContext *)&v777, v412);
          if (v778 >= 0x41 && v777)
            MEMORY[0x1CAA32F9C](v777, 0x1000C8000313F17);
          v416 = *(llvm::ConstantInt **)(*(_QWORD *)v771 + 1960);
          v417 = *(_DWORD *)(*(_QWORD *)v771 + 1968);
          LODWORD(v778) = v417 >> 8;
          if (v417 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v777, 1, 0);
          }
          else
          {
            if (v417 <= 0xFF)
              v418 = 0;
            else
              v418 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v417);
            v777 = (void **)(v418 & 1);
          }
          v420 = llvm::ConstantInt::get(v416, (llvm::LLVMContext *)&v777, v414);
          if (v778 >= 0x41 && v777)
            MEMORY[0x1CAA32F9C](v777, 0x1000C8000313F17);
          v421 = *(llvm::ConstantInt **)(*(_QWORD *)v771 + 1960);
          v422 = *(_DWORD *)(*(_QWORD *)v771 + 1968);
          LODWORD(v778) = v422 >> 8;
          if (v422 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v777, 31, 0);
          }
          else
          {
            if (v422 <= 0xFF)
              LOBYTE(v423) = 0;
            else
              v423 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v422);
            v777 = (void **)(v423 & 0x1F);
          }
          v745 = v410;
          v425 = llvm::ConstantInt::get(v421, (llvm::LLVMContext *)&v777, v419);
          if (v778 >= 0x41 && v777)
            MEMORY[0x1CAA32F9C](v777, 0x1000C8000313F17);
          v426 = *(llvm::ConstantInt **)(*(_QWORD *)v771 + 1960);
          v427 = *(_DWORD *)(*(_QWORD *)v771 + 1968);
          LODWORD(v778) = v427 >> 8;
          if (v427 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v777, 32, 0);
          }
          else
          {
            if (v427 <= 0xFF)
              LOBYTE(v428) = 0;
            else
              v428 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v427);
            v777 = (void **)(v428 & 0x20);
          }
          v429 = llvm::ConstantInt::get(v426, (llvm::LLVMContext *)&v777, v424);
          if (v778 >= 0x41 && v777)
            MEMORY[0x1CAA32F9C](v777, 0x1000C8000313F17);
          llvm::FixedVectorType::get((llvm::FixedVectorType *)(**(_QWORD **)*(v28 - 3) + 1960), (llvm::Type *)2);
          v430 = (unsigned __int8 *)*((_QWORD *)v30 - 4 * (*((_DWORD *)v28 - 1) & 0x7FFFFFF));
          v782 = 257;
          v432 = sub_1C4773E38((uint64_t *)&v763, 49, v430, v431, (uint64_t)&v777);
          v757 = 0;
          v782 = 257;
          v757 = sub_1C4772EE0((uint64_t *)&v763, (uint64_t)v432, (uint64_t)v415, (uint64_t)&v777);
          v749 = 0;
          v782 = 257;
          v749 = sub_1C4772EE0((uint64_t *)&v763, (uint64_t)v432, (uint64_t)v420, (uint64_t)&v777);
          v782 = 257;
          v433 = sub_1C4774B48((uint64_t)&v763, 32, (uint64_t)v749, (uint64_t)v415, (uint64_t)&v777);
          v434 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(v734 + 40), 2168, 0, 0);
          v435 = v434;
          if (v434)
            v436 = *(uint64_t ***)(v434 + 24);
          else
            v436 = 0;
          v782 = 257;
          v464 = sub_1C4774778((uint64_t *)&v763, v436, v434, (uint64_t *)&v749, 1, (uint64_t)&v777, 0);
          v782 = 257;
          v465 = sub_1C47733F8((uint64_t)&v763, (uint64_t)v425, v464, (uint64_t)&v777, 0, 0);
          v725 = (uint64_t)v415;
          if (v435)
            v466 = *(uint64_t ***)(v435 + 24);
          else
            v466 = 0;
          v782 = 257;
          v467 = sub_1C4774778((uint64_t *)&v763, v466, v435, (uint64_t *)&v757, 1, (uint64_t)&v777, 0);
          v782 = 257;
          v468 = sub_1C47733F8((uint64_t)&v763, (uint64_t)v425, v467, (uint64_t)&v777, 0, 0);
          v762 = 257;
          v469 = (llvm::Value *)(*(uint64_t (**)(uint64_t, llvm::ValueHandleBase *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v772 + 16))(v772, v429, v468, 0, 0);
          if (!v469)
          {
            v723 = v433;
            v782 = 257;
            v470 = (char *)operator new(0x80uLL);
            v471 = v470;
            *(_QWORD *)v470 = 0;
            *((_QWORD *)v470 + 1) = 0;
            *((_QWORD *)v470 + 2) = 0;
            *((_QWORD *)v470 + 5) = 0;
            *((_QWORD *)v470 + 6) = 0;
            *((_QWORD *)v470 + 4) = 0;
            v472 = (uint64_t *)(v470 + 32);
            *((_QWORD *)v470 + 8) = *(_QWORD *)v429;
            v469 = (llvm::Value *)(v470 + 64);
            *((_QWORD *)v470 + 3) = v470 + 64;
            *((_QWORD *)v470 + 7) = v470 + 64;
            *((_QWORD *)v470 + 9) = 0;
            v470[80] = 41;
            v470[81] = 0;
            *((_WORD *)v470 + 41) = 0;
            *((_DWORD *)v470 + 21) = 2;
            *((_DWORD *)v470 + 30) = 0;
            *(_OWORD *)(v470 + 104) = 0u;
            *(_OWORD *)(v470 + 88) = 0u;
            *(_QWORD *)v470 = v429;
            v475 = *((_QWORD *)v429 + 1);
            v474 = (_QWORD *)((char *)v429 + 8);
            v473 = v475;
            *((_QWORD *)v470 + 1) = v475;
            if (v475)
              *(_QWORD *)(v473 + 16) = v470 + 8;
            v724 = v409;
            *((_QWORD *)v470 + 2) = v474;
            *v474 = v470;
            if (*((_QWORD *)v470 + 4))
            {
              **((_QWORD **)v470 + 6) = *((_QWORD *)v470 + 5);
              v541 = *((_QWORD *)v470 + 5);
              if (v541)
                *(_QWORD *)(v541 + 16) = *((_QWORD *)v470 + 6);
            }
            *v472 = v468;
            if (v468)
            {
              v478 = *(_QWORD *)(v468 + 8);
              v477 = (uint64_t **)(v468 + 8);
              v476 = v478;
              *((_QWORD *)v470 + 5) = v478;
              if (v478)
                *(_QWORD *)(v476 + 16) = v470 + 40;
              *((_QWORD *)v470 + 6) = v477;
              *v477 = v472;
            }
            llvm::Value::setName((uint64_t ***)v470 + 8, (uint64_t)&v777);
            (*(void (**)(uint64_t, llvm::Value *, uint64_t **, uint64_t, _QWORD *))(*(_QWORD *)v773 + 16))(v773, v469, &v758, v769, v770);
            if ((_DWORD)v764)
            {
              v479 = (char *)v763;
              v480 = (char *)v763 + 16 * v764;
              v481 = (unsigned __int8 **)(v471 + 112);
              do
              {
                v482 = *(_DWORD *)v479;
                v483 = (unsigned __int8 *)*((_QWORD *)v479 + 1);
                if (v483)
                {
                  if (!v482)
                  {
                    v755 = *((_QWORD *)v479 + 1);
                    llvm::MetadataTracking::track((uint64_t)&v755, v483, 2);
                    v484 = *v481;
                    goto LABEL_637;
                  }
                }
                else
                {
                  v484 = *v481;
                  if (!*v481 && (v471[87] & 0x20) == 0)
                    goto LABEL_634;
                  if (!v482)
                  {
                    v755 = 0;
LABEL_637:
                    if (v484)
                      llvm::MetadataTracking::untrack((uint64_t)(v471 + 112), v484);
                    v485 = (unsigned __int8 *)v755;
                    *v481 = (unsigned __int8 *)v755;
                    if (v485)
                      llvm::MetadataTracking::retrack((uint64_t)&v755, v485, (uint64_t)(v471 + 112));
                    goto LABEL_634;
                  }
                }
                llvm::Value::setMetadata(v469, *(_DWORD *)v479, (llvm::MDNode *)v483);
LABEL_634:
                v479 += 16;
              }
              while (v479 != v480);
            }
            v433 = v723;
            v409 = v724;
          }
          v782 = 257;
          v453 = (unsigned __int8 *)llvm::IRBuilderBase::CreateSelect((uint64_t *)&v763, v433, (uint64_t *)v469, v465, (uint64_t)&v777, 0);
          if (v409 == (llvm::Value **)v745)
          {
            v29 = v748;
          }
          else
          {
            v486 = v732 >> 8;
            v782 = 257;
            v487 = sub_1C4773594((uint64_t)&v763, v749, (uint64_t)v757, (uint64_t)&v777);
            v762 = 257;
            v489 = sub_1C4774B48((uint64_t)&v763, 32, v487, v725, (uint64_t)&v758);
            v490 = *(llvm::ConstantInt **)(*(_QWORD *)v771 + 1960);
            v491 = *(_DWORD *)(*(_QWORD *)v771 + 1968);
            LODWORD(v778) = v491 >> 8;
            v29 = v748;
            if (v491 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v777, v486, 0);
            }
            else
            {
              if (v491 <= 0xFF)
                v492 = 0;
              else
                v492 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v491);
              v777 = (void **)(v492 & v486);
            }
            v493 = (uint64_t *)llvm::ConstantInt::get(v490, (llvm::LLVMContext *)&v777, v488);
            if (v778 >= 0x41 && v777)
              MEMORY[0x1CAA32F9C](v777, 0x1000C8000313F17);
            v782 = 257;
            v453 = (unsigned __int8 *)llvm::IRBuilderBase::CreateSelect((uint64_t *)&v763, v489, v493, (uint64_t)v453, (uint64_t)&v777, 0);
          }
        }
        v27 = v747;
        v494 = *(uint64_t ***)v30;
        v782 = 257;
        v495 = sub_1C4773690((uint64_t *)&v763, v453, (uint64_t)v494, (uint64_t)&v777);
        llvm::Value::doRAUW(v30, (llvm::Value *)v495, (llvm::Value *)1);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v750, v31);
        if (v763 != &v765)
          free(v763);
        goto LABEL_358;
      }
      if ((v236 - 2824) < 0xC)
        goto LABEL_251;
      if (v236 == 1266)
      {
        sub_1C4773D54((uint64_t)&v763, v31, 0, 0, 0);
        v437 = (char *)v30 - 32 * (*((_DWORD *)v28 - 1) & 0x7FFFFFF);
        v438 = *((_QWORD *)v437 + 8);
        v439 = *(uint64_t **)v437;
        v440 = *((_QWORD *)v437 + 4);
        v782 = 257;
        v441 = llvm::IRBuilderBase::CreateSelect((uint64_t *)&v763, v438, v439, v440, (uint64_t)&v777, 0);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)(v28 - 3), v441, (llvm::Value *)1);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v750, v31);
        if (v763 != &v765)
          free(v763);
        goto LABEL_24;
      }
      if (v236 == 1267)
      {
        sub_1C4773D54((uint64_t)&v763, v31, 0, 0, 0);
        v378 = (char *)v30 - 32 * (*((_DWORD *)v28 - 1) & 0x7FFFFFF);
        v379 = *((_QWORD *)v378 + 8);
        v380 = *((_QWORD *)v378 + 12);
        v782 = 257;
        v381 = sub_1C4774B48((uint64_t)&v763, 37, v379, v380, (uint64_t)&v777);
        v382 = (char *)v30 - 32 * (*((_DWORD *)v28 - 1) & 0x7FFFFFF);
        v383 = (uint64_t *)*((_QWORD *)v382 + 8);
        v384 = *((_QWORD *)v382 + 16);
        v782 = 257;
        v385 = (unsigned __int8 *)llvm::IRBuilderBase::CreateSelect((uint64_t *)&v763, v381, v383, v384, (uint64_t)&v777, 0);
        v386 = *(_QWORD *)v771 + 1984;
        v762 = 257;
        v387 = sub_1C4773E38((uint64_t *)&v763, 39, v385, v386, (uint64_t)&v758);
        v388 = (uint64_t *)((_QWORD *)v30 - 4 * (*((_DWORD *)v28 - 1) & 0x7FFFFFF))[4];
        v389 = *v388;
        v390 = *(unsigned __int8 *)(*v388 + 8);
        if (*v388 && v390 == 15 && !*(_QWORD *)(v389 + 24))
        {
          ParamElementType = (llvm::GetElementPtrInst *)llvm::AttributeList::getParamElementType((llvm::AttributeList *)(v28 + 5), 1);
        }
        else
        {
          if ((v390 & 0xFE) == 0x12)
            v389 = **(_QWORD **)(v389 + 16);
          ParamElementType = **(llvm::GetElementPtrInst ***)(v389 + 16);
        }
        v782 = 257;
        v392 = (unsigned __int8 *)sub_1C4867B70((uint64_t *)&v763, ParamElementType, v388, (uint64_t)v387, (uint64_t)&v777);
        v393 = **((_QWORD **)v30 - 4 * (*((_DWORD *)v28 - 1) & 0x7FFFFFF));
        v782 = 257;
        v394 = sub_1C4773E38((uint64_t *)&v763, 49, v392, v393, (uint64_t)&v777);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)(v28 - 3), (llvm::Value *)v394, (llvm::Value *)1);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v750, v31);
        if (v763 != &v765)
          free(v763);
        goto LABEL_297;
      }
LABEL_24:
      v28 = v29;
      if (v29 == v27)
        goto LABEL_773;
    }
  }
LABEL_774:
  v543 = v750;
  v542 = (unint64_t *)v751;
  v545 = v752;
  v544 = HIDWORD(v752);
  if (v751 == (char *)v750)
    v546 = HIDWORD(v752);
  else
    v546 = v752;
  v547 = v751;
  v549 = v733;
  v548 = v734;
  if ((_DWORD)v546)
  {
    v550 = 0;
    while (*(_QWORD *)&v751[v550] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v550 += 8;
      if (8 * v546 == v550)
        goto LABEL_799;
    }
    v547 = &v751[v550];
  }
  v551 = &v751[8 * v546];
  if (v547 != v551)
  {
    v552 = *(_QWORD *)v547;
LABEL_785:
    v553 = *(_DWORD *)(v552 + 20);
    if ((v553 & 0x40000000) != 0)
    {
      v555 = *(_QWORD *)(v552 - 8);
      v554 = v553 & 0x7FFFFFF;
      if (!v554)
        goto LABEL_792;
    }
    else
    {
      v554 = v553 & 0x7FFFFFF;
      v555 = v552 - 32 * v554;
      if (!v554)
        goto LABEL_792;
    }
    v556 = 32 * v554;
    v557 = (_QWORD **)(v555 + 16);
    do
    {
      if (*(v557 - 2))
      {
        **v557 = *(v557 - 1);
        v558 = (uint64_t)*(v557 - 1);
        if (v558)
          *(_QWORD *)(v558 + 16) = *v557;
      }
      *(v557 - 2) = 0;
      v557 += 4;
      v556 -= 32;
    }
    while (v556);
LABEL_792:
    v559 = (unint64_t *)(v547 + 8);
    while (v559 != (unint64_t *)v551)
    {
      v560 = *v559++;
      v552 = v560;
      if (v560 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v547 = (char *)(v559 - 1);
        goto LABEL_785;
      }
    }
    v543 = v750;
    v542 = (unint64_t *)v751;
    v545 = v752;
    v544 = HIDWORD(v752);
  }
LABEL_799:
  if (v542 == v543)
    v561 = v544;
  else
    v561 = v545;
  v562 = v542;
  if ((_DWORD)v561)
  {
    v563 = 0;
    while (v542[v563] >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (v561 == ++v563)
        goto LABEL_815;
    }
    v562 = &v542[v563];
  }
  v564 = &v542[v561];
  if (v562 != v564)
  {
    v565 = *v562;
LABEL_810:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v565 + 40) + 40, (uint64_t ***)v565);
    v566 = *(_QWORD *)(v565 + 24);
    v567 = *(_QWORD **)(v565 + 32);
    *v567 = v566;
    *(_QWORD *)(v566 + 8) = v567;
    *(_QWORD *)(v565 + 24) = 0;
    *(_QWORD *)(v565 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v565);
    v568 = v562 + 1;
    while (v568 != v564)
    {
      v569 = *v568++;
      v565 = v569;
      if (v569 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v562 = v568 - 1;
        goto LABEL_810;
      }
    }
    v543 = v750;
    v542 = (unint64_t *)v751;
  }
LABEL_815:
  if (v542 == v543)
    goto LABEL_816;
  if (v752 < 0x21 || 4 * (HIDWORD(v752) - v753) >= v752)
  {
    memset(v542, 255, 8 * v752);
LABEL_816:
    HIDWORD(v752) = 0;
    v753 = 0;
    goto LABEL_817;
  }
  free(v542);
  v717 = 1 << (33 - __clz(HIDWORD(v752) - v753 - 1));
  v534 = (HIDWORD(v752) - v753) > 0x10;
  HIDWORD(v752) = 0;
  v753 = 0;
  if (v534)
    v718 = v717;
  else
    v718 = 32;
  LODWORD(v752) = v718;
  v719 = (char *)malloc_type_malloc(8 * v718, 0x4065EBACuLL);
  if (!v719)
    goto LABEL_1070;
  v751 = v719;
  memset(v719, 255, 8 * v752);
LABEL_817:
  v570 = v775;
  if (v775 >= 2)
  {
    qsort(v774, v775, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C4776710);
    v570 = v775;
  }
  v571 = (uint64_t *)v774;
  v572 = &v774[8 * v570];
  v573 = v774;
  if (v570)
  {
    v573 = v774 - 8;
    v574 = 8 * v570 - 8;
    while (v574)
    {
      v575 = *((_QWORD *)v573 + 1);
      v576 = *((_QWORD *)v573 + 2);
      v573 += 8;
      v574 -= 8;
      if (v575 == v576)
        goto LABEL_823;
    }
  }
  else
  {
LABEL_823:
    if (v573 != v572)
    {
      v577 = v573 + 16;
      if (v573 + 16 != v572)
      {
        v578 = *(_QWORD *)v573;
        do
        {
          v579 = v578;
          v578 = *(_QWORD *)v577;
          if (v579 != *(_QWORD *)v577)
          {
            *((_QWORD *)v573 + 1) = v578;
            v573 += 8;
          }
          v577 += 8;
        }
        while (v577 != v572);
      }
      v572 = v573 + 8;
    }
  }
  v580 = v572 - (char *)v571;
  v581 = (unint64_t)(v572 - (char *)v571) >> 3;
  LODWORD(v775) = v581;
  if ((v580 >> 3))
  {
    v582 = &v571[v581];
    do
    {
      v583 = (llvm::BasicBlock *)*v571;
      v584 = *(_QWORD *)(*v571 + 8);
      if (v584)
      {
        while (1)
        {
          v585 = *(_QWORD *)(v584 + 24);
          v586 = *(unsigned __int8 *)(v585 + 16);
          v587 = v585 && v586 >= 0x1C;
          if (v587 && v586 - 29 < 0xB)
            break;
          v584 = *(_QWORD *)(v584 + 8);
          if (!v584)
            goto LABEL_842;
        }
      }
      else
      {
LABEL_842:
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::eraseNode(v727, *v571);
        llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::removeBlock(v726, (uint64_t)v583);
        llvm::BasicBlock::eraseFromParent(v583);
      }
      ++v571;
    }
    while (v571 != v582);
  }
  LODWORD(v775) = 0;
  v589 = *(_QWORD **)(v734 + 80);
  if (v589 != v737)
  {
    while (1)
    {
      v590 = v589 - 3;
      v738 = v589;
      if (!v589)
        v590 = 0;
      v591 = v590 + 5;
      v592 = (_QWORD *)v590[6];
      if (v592 != v590 + 5)
        break;
LABEL_997:
      v589 = (_QWORD *)v738[1];
      if (v589 == v737)
        goto LABEL_998;
    }
    v736 = v590;
    while (1)
    {
      v593 = v592;
      v592 = (_QWORD *)v592[1];
      v594 = v593 - 3;
      if (v593)
        v595 = (uint64_t)(v593 - 3);
      else
        v595 = 0;
      v596 = *(unsigned __int8 *)(v595 + 16);
      if (v596 == 67)
        v597 = v595;
      else
        v597 = 0;
      if (v593 && v596 == 67 && *(_DWORD *)(*(_QWORD *)v597 + 8) == 16397)
      {
        v598 = *(_QWORD *)(v595 + 8);
        if (!v598)
        {
LABEL_861:
          v599 = *(_QWORD *)(v597 - 32);
          if (!*(_QWORD *)(v595 + 40))
          {
            if (!v599
              || *(unsigned __int8 *)(v599 + 16) < 0x1Cu
              || (v594 = *(_QWORD **)(v597 - 32), !*(_QWORD *)(v599 + 40)))
            {
              v594 = 0;
            }
          }
          v763 = v746;
          v764 = 0;
          v765 = v594;
          v766 = 0;
          v767 = 0;
          v768 = 1;
          sub_1C4F83784(v599, 0, (uint64_t *)&v763, &v758);
          v600 = v759 - 1;
          v601 = (uint64_t *)&v758;
          if (v759 >= 0x41)
            v601 = &v758[v600 >> 6];
          v602 = *v601;
          sub_1C4773D54((uint64_t)&v763, v595, 0, 0, 0);
          v603 = *(unsigned __int8 **)(v597 - 32);
          v604 = *(_QWORD *)v597;
          v782 = 257;
          v605 = sub_1C4773B94((uint64_t *)&v763, v603, v604, (uint64_t)&v777);
          v606 = v605;
          if (v605)
            v607 = v605[16] > 0x1Bu;
          else
            v607 = 0;
          v608 = v607;
          if (!v607)
          {
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v595, (llvm::Value *)v605, (llvm::Value *)1);
            goto LABEL_874;
          }
          if (((v602 >> v600) & 1) != 0)
          {
LABEL_873:
            v740 = 1;
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v595, (llvm::Value *)v606, (llvm::Value *)1);
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v750, v595);
            goto LABEL_874;
          }
          v615 = v739[13];
          v616 = v739[15].u32[0];
          if (v616)
          {
            v617 = v616 - 1;
            v618 = (v616 - 1) & ((v605 >> 4) ^ (v605 >> 9));
            v619 = *(_QWORD *)&v615 + 48 * v618;
            v620 = *(unsigned __int8 **)(v619 + 24);
            if (v620 != v605)
            {
              v621 = 1;
              while (v620 != (unsigned __int8 *)-4096)
              {
                v622 = v618 + v621++;
                v618 = v622 & v617;
                v619 = *(_QWORD *)&v615 + 48 * (v622 & v617);
                v620 = *(unsigned __int8 **)(v619 + 24);
                if (v620 == v605)
                  goto LABEL_902;
              }
              goto LABEL_903;
            }
LABEL_902:
            v623 = v549;
          }
          else
          {
LABEL_903:
            v623 = v549;
            v619 = *(_QWORD *)&v615 + 48 * v616;
          }
          if (v619 == *(_QWORD *)&v615 + 48 * v616 || (SCEVIter = *(_QWORD *)(v619 + 40)) == 0)
          {
            SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v739, (unint64_t)v605);
            v615 = v739[13];
            v616 = v739[15].u32[0];
          }
          v625 = *(_QWORD *)&v615 + 48 * v616;
          if (v616)
          {
            v626 = v616 - 1;
            v627 = v626 & ((v597 >> 4) ^ (v597 >> 9));
            v628 = *(_QWORD *)&v615 + 48 * v627;
            v629 = *(_QWORD *)(v628 + 24);
            if (v629 != v597)
            {
              v630 = 1;
              while (v629 != -4096)
              {
                v631 = v627 + v630++;
                v627 = v631 & v626;
                v628 = *(_QWORD *)&v615 + 48 * v627;
                v629 = *(_QWORD *)(v628 + 24);
                if (v629 == v597)
                  goto LABEL_914;
              }
              goto LABEL_913;
            }
          }
          else
          {
LABEL_913:
            v628 = v625;
          }
LABEL_914:
          v549 = v623;
          if (v628 == v625 || (v632 = *(_QWORD *)(v628 + 40)) == 0)
            v632 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v739, v597);
          v548 = v734;
          if (SCEVIter == v632)
            goto LABEL_873;
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v606 + 5) + 40, (uint64_t ***)v606);
          v633 = *((_QWORD *)v606 + 3);
          v634 = (_QWORD *)*((_QWORD *)v606 + 4);
          *v634 = v633;
          *(_QWORD *)(v633 + 8) = v634;
          *((_QWORD *)v606 + 3) = 0;
          *((_QWORD *)v606 + 4) = 0;
          llvm::Value::deleteValue((llvm::Value *)v606);
LABEL_874:
          if (v763 != &v765)
            free(v763);
          if (v761 >= 0x41 && v760)
            MEMORY[0x1CAA32F9C](v760, 0x1000C8000313F17);
          if (v759 >= 0x41 && v758)
            MEMORY[0x1CAA32F9C](v758, 0x1000C8000313F17);
          if (!v608)
            goto LABEL_983;
          goto LABEL_879;
        }
        while (*(_BYTE *)(*(_QWORD *)(v598 + 24) + 16) == 62)
        {
          v598 = *(_QWORD *)(v598 + 8);
          if (!v598)
            goto LABEL_861;
        }
      }
LABEL_879:
      if (*(_DWORD *)(*(_QWORD *)v595 + 8) == 269)
      {
        v609 = *(_QWORD *)(v549 + 56);
        if (!v609)
          sub_1C485C2F0();
        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v609 + 48))(v609, v548))
        {
          if (*(_BYTE *)(v595 + 16) != 82)
          {
            v610 = *(_QWORD *)(v595 + 8);
            if (v610)
            {
              v611 = 0;
              while (1)
              {
                v612 = *(_QWORD *)(v610 + 24);
                v613 = *(unsigned __int8 *)(v612 + 16);
                if (v613 == 30)
                  v614 = *(_QWORD *)(v610 + 24);
                else
                  v614 = 0;
                if ((!v612 || v613 != 85 || *(_QWORD *)(v612 - 96) != v595)
                  && (!v614 || *(_QWORD *)(v614 - 32 * (*(_DWORD *)(v614 + 20) & 0x7FFFFFF)) != v595))
                {
                  goto LABEL_895;
                }
                if (v611)
                  break;
                v611 = 1;
LABEL_895:
                v610 = *(_QWORD *)(v610 + 8);
                if (!v610)
                  goto LABEL_983;
              }
              llvm::Instruction::clone((llvm::Instruction *)v595);
              v636 = v635;
              sub_1C4773D54((uint64_t)&v763, v595, 0, 0, 0);
              if (*(_BYTE *)(v595 + 16) == 83)
              {
                for (ii = (_QWORD *)v736[6]; ; ii = (_QWORD *)ii[1])
                {
                  v639 = ii - 3;
                  if (!ii)
                    v639 = 0;
                  if (*((_BYTE *)v639 + 16) != 83)
                    break;
                }
                v769 = ii[2];
                v770 = ii;
                v640 = (void **)ii[3];
                v777 = v640;
                if (v640)
                {
                  llvm::MetadataTracking::track((uint64_t)&v777, (unsigned __int8 *)v640, 2);
                  v641 = v777;
                }
                else
                {
                  v641 = 0;
                }
                sub_1C4774EF4((uint64_t)&v763, 0, (uint64_t)v641);
                v637 = (llvm::Type *)v777;
                if (v777)
                  llvm::MetadataTracking::untrack((uint64_t)&v777, (unsigned __int8 *)v777);
              }
              v642 = (llvm::ConstantFP **)(***(_QWORD ***)v595 + 1624);
              v643 = (uint64_t *)llvm::ConstantFP::get(v642, v637, 0.0);
              v645 = llvm::ConstantFP::get(v642, v644, 1.0);
              v782 = 257;
              v646 = (uint64_t *)llvm::IRBuilderBase::CreateSelect((uint64_t *)&v763, v636, v643, (uint64_t)v645, (uint64_t)&v777, 0);
              v782 = 257;
              v647 = (llvm::Value *)llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)&v763, 1, v646, (uint64_t)v643, (uint64_t)&v777, 0, 0);
              v648 = v646[5];
              *(_QWORD *)(v636 + 40) = v648;
              *(_WORD *)(v648 + 18) &= ~0x8000u;
              if ((*(_BYTE *)(v636 + 23) & 0x10) != 0)
              {
                v686 = *(_QWORD *)(v648 + 56);
                if (v686)
                {
                  v687 = *(llvm::ValueSymbolTable **)(v686 + 104);
                  if (v687)
                    llvm::ValueSymbolTable::reinsertValue(v687, (llvm::Value *)v636);
                }
              }
              v650 = v646[3];
              v649 = v646 + 3;
              *(_QWORD *)(v636 + 24) = v650;
              *(_QWORD *)(v636 + 32) = v649;
              v651 = v636 + 24;
              *(_QWORD *)(v650 + 8) = v651;
              *v649 = v651;
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v595, v647, (llvm::Value *)1);
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v750, v595);
              v652 = (uint64_t *)*((_QWORD *)v647 + 5);
              LODWORD(v779) = 0;
              v777 = 0;
              v778 = 0;
              v653 = *((_QWORD *)v647 + 1);
              if (v653)
              {
                while (1)
                {
                  v655 = (_QWORD *)(v653 + 8);
                  v654 = *(_QWORD *)(v653 + 8);
                  v656 = *(_QWORD *)(v653 + 24);
                  if (*(_BYTE *)(v656 + 16) != 83)
                  {
                    v657 = *(uint64_t **)(v656 + 40);
                    v758 = v657;
                    if (v657 != v652)
                      break;
                  }
LABEL_970:
                  v653 = v654;
                  if (!v654)
                  {
                    v549 = v733;
                    v548 = v734;
                    if (!*((_QWORD *)v647 + 1))
                    {
                      v652 = (uint64_t *)*((_QWORD *)v647 + 5);
                      goto LABEL_979;
                    }
                    goto LABEL_980;
                  }
                }
                if ((_DWORD)v779)
                {
                  v658 = (v779 - 1) & ((v657 >> 4) ^ (v657 >> 9));
                  v659 = &v777[2 * v658];
                  v660 = (uint64_t *)*v659;
                  if (v657 != *v659)
                  {
                    v661 = 0;
                    v662 = 1;
                    while (v660 != (uint64_t *)-4096)
                    {
                      if (v661)
                        v663 = 0;
                      else
                        v663 = v660 == (uint64_t *)-8192;
                      if (v663)
                        v661 = v659;
                      v664 = v658 + v662++;
                      v658 = v664 & (v779 - 1);
                      v659 = &v777[2 * v658];
                      v660 = (uint64_t *)*v659;
                      if (v657 == *v659)
                        goto LABEL_949;
                    }
                    if (v661)
                      v665 = v661;
                    else
                      v665 = v659;
LABEL_948:
                    v659 = (void **)sub_1C4775118((uint64_t)&v777, (uint64_t)&v758, (uint64_t *)&v758, v665);
                    *v659 = v758;
                    v659[1] = 0;
                  }
LABEL_949:
                  v666 = v659[1];
                  if (!v666)
                  {
                    v667 = v758 + 5;
                    for (jj = v758[6]; (uint64_t *)jj != v667; jj = *(_QWORD *)(jj + 8))
                    {
                      v669 = jj - 24;
                      if (!jj)
                        v669 = 0;
                      if (*(_BYTE *)(v669 + 16) != 83)
                      {
                        v670 = *(unsigned __int8 *)(jj - 8) - 38;
                        v534 = v670 > 0x38;
                        v671 = (1 << v670) & 0x100060000000001;
                        if (v534 || v671 == 0)
                          v667 = (uint64_t *)jj;
                        else
                          v667 = *(uint64_t **)(jj + 8);
                        break;
                      }
                    }
                    llvm::Instruction::clone(v647);
                    v674 = (llvm::Value *)v673;
                    v659[1] = (void *)v673;
                    v675 = v758;
                    *(_QWORD *)(v673 + 40) = v758;
                    *((_WORD *)v675 + 9) &= ~0x8000u;
                    if ((*(_BYTE *)(v673 + 23) & 0x10) != 0)
                    {
                      v682 = v675[7];
                      if (v682)
                      {
                        v683 = *(llvm::ValueSymbolTable **)(v682 + 104);
                        if (v683)
                          llvm::ValueSymbolTable::reinsertValue(v683, v674);
                      }
                    }
                    v676 = *v667;
                    *((_QWORD *)v674 + 3) = *v667;
                    *((_QWORD *)v674 + 4) = v667;
                    v677 = (_QWORD *)((char *)v674 + 24);
                    *(_QWORD *)(v676 + 8) = v677;
                    *v667 = (uint64_t)v677;
                    v666 = v659[1];
                  }
                  if (*(_QWORD *)v653)
                  {
                    **(_QWORD **)(v653 + 16) = *(_QWORD *)(v653 + 8);
                    v678 = *(_QWORD *)(v653 + 8);
                    if (v678)
                      *(_QWORD *)(v678 + 16) = *(_QWORD *)(v653 + 16);
                  }
                  *(_QWORD *)v653 = v666;
                  if (v666)
                  {
                    v681 = v666[1];
                    v679 = v666 + 1;
                    v680 = v681;
                    *v655 = v681;
                    if (v681)
                      *(_QWORD *)(v680 + 16) = v655;
                    *(_QWORD *)(v653 + 16) = v679;
                    *v679 = v653;
                  }
                  goto LABEL_970;
                }
                v665 = 0;
                goto LABEL_948;
              }
              v549 = v733;
              v548 = v734;
LABEL_979:
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v652 + 5), (uint64_t ***)v647);
              v684 = *((_QWORD *)v647 + 3);
              v685 = (_QWORD *)*((_QWORD *)v647 + 4);
              *v685 = v684;
              *(_QWORD *)(v684 + 8) = v685;
              *((_QWORD *)v647 + 3) = 0;
              *((_QWORD *)v647 + 4) = 0;
              llvm::Value::deleteValue(v647);
LABEL_980:
              MEMORY[0x1CAA32FB4](v777, 8);
              if (v763 != &v765)
                free(v763);
              v740 = 1;
            }
          }
        }
      }
LABEL_983:
      if (v592 == v591)
        goto LABEL_997;
    }
  }
LABEL_998:
  v689 = v750;
  v688 = (unint64_t *)v751;
  v691 = v752;
  v690 = HIDWORD(v752);
  if (v751 == (char *)v750)
    v692 = HIDWORD(v752);
  else
    v692 = v752;
  v693 = v751;
  if ((_DWORD)v692)
  {
    v694 = 0;
    while (*(_QWORD *)&v751[v694] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v694 += 8;
      if (8 * v692 == v694)
        goto LABEL_1023;
    }
    v693 = &v751[v694];
  }
  v695 = &v751[8 * v692];
  if (v693 != v695)
  {
    v696 = *(_QWORD *)v693;
LABEL_1009:
    v697 = *(_DWORD *)(v696 + 20);
    if ((v697 & 0x40000000) != 0)
    {
      v699 = *(_QWORD *)(v696 - 8);
      v698 = v697 & 0x7FFFFFF;
      if (!v698)
        goto LABEL_1016;
    }
    else
    {
      v698 = v697 & 0x7FFFFFF;
      v699 = v696 - 32 * v698;
      if (!v698)
        goto LABEL_1016;
    }
    v700 = 32 * v698;
    v701 = (_QWORD **)(v699 + 16);
    do
    {
      if (*(v701 - 2))
      {
        **v701 = *(v701 - 1);
        v702 = (uint64_t)*(v701 - 1);
        if (v702)
          *(_QWORD *)(v702 + 16) = *v701;
      }
      *(v701 - 2) = 0;
      v701 += 4;
      v700 -= 32;
    }
    while (v700);
LABEL_1016:
    v703 = (unint64_t *)(v693 + 8);
    while (v703 != (unint64_t *)v695)
    {
      v704 = *v703++;
      v696 = v704;
      if (v704 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v693 = (char *)(v703 - 1);
        goto LABEL_1009;
      }
    }
    v689 = v750;
    v688 = (unint64_t *)v751;
    v691 = v752;
    v690 = HIDWORD(v752);
  }
LABEL_1023:
  if (v688 == v689)
    v705 = v690;
  else
    v705 = v691;
  v706 = v688;
  if ((_DWORD)v705)
  {
    v707 = 0;
    while (v688[v707] >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (v705 == ++v707)
        goto LABEL_1039;
    }
    v706 = &v688[v707];
  }
  v708 = &v688[v705];
  if (v706 != v708)
  {
    v709 = *v706;
LABEL_1034:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v709 + 40) + 40, (uint64_t ***)v709);
    v710 = *(_QWORD *)(v709 + 24);
    v711 = *(_QWORD **)(v709 + 32);
    *v711 = v710;
    *(_QWORD *)(v710 + 8) = v711;
    *(_QWORD *)(v709 + 24) = 0;
    *(_QWORD *)(v709 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v709);
    v712 = v706 + 1;
    while (v712 != v708)
    {
      v713 = *v712++;
      v709 = v713;
      if (v713 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v706 = v712 - 1;
        goto LABEL_1034;
      }
    }
    v689 = v750;
    v688 = (unint64_t *)v751;
  }
LABEL_1039:
  if (v688 == v689)
    goto LABEL_1040;
  if (v752 < 0x21 || 4 * (HIDWORD(v752) - v753) >= v752)
  {
    memset(v688, 255, 8 * v752);
LABEL_1040:
    HIDWORD(v752) = 0;
    v753 = 0;
    goto LABEL_1041;
  }
  free(v688);
  v720 = 1 << (33 - __clz(HIDWORD(v752) - v753 - 1));
  v534 = (HIDWORD(v752) - v753) > 0x10;
  HIDWORD(v752) = 0;
  v753 = 0;
  if (v534)
    v721 = v720;
  else
    v721 = 32;
  LODWORD(v752) = v721;
  v722 = (char *)malloc_type_malloc(8 * v721, 0x4065EBACuLL);
  if (!v722)
LABEL_1070:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v751 = v722;
  memset(v722, 255, 8 * v752);
LABEL_1041:
  if (v774 != v776)
    free(v774);
  if (v751 != (char *)v750)
    free(v751);
  return v740 & 1;
}

uint64_t sub_1C49D33E0(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "AGX3 Specific CodeGen Prepare CFGMod";
  *(_QWORD *)(v2 + 8) = 36;
  *(_QWORD *)(v2 + 16) = "agx3-codegen-prepare-cfgmod";
  *(_QWORD *)(v2 + 24) = 27;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EF818;
  *(_WORD *)(v2 + 40) = 1;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C49D3474;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C49D3474()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8EF818;
  *(_DWORD *)(result + 24) = 2;
  *(_QWORD *)result = &off_1E7FA91C8;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

void sub_1C49D34C4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C49D34E8()
{
  return "AGX3 Specific CodeGen Prepare: CFG Modifying Part";
}

uint64_t sub_1C49D34F8(uint64_t a1, uint64_t a2)
{
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  char *v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  unsigned int *v17;
  llvm::Value *ScalarElement;
  int v19;
  unint64_t *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD **v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t *v43;
  unint64_t v44;
  int v45;
  int v48;
  BOOL v49;
  unsigned int v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int v55;
  _BYTE v56[64];

  v3 = (unint64_t *)v56;
  v52 = v56;
  v53 = v56;
  v54 = 8;
  v55 = 0;
  v4 = a2 + 72;
  v5 = *(_QWORD *)(a2 + 80);
  if (v5 == a2 + 72)
  {
    v21 = 0;
    v6 = 0;
    v22 = 8;
    v20 = (unint64_t *)v56;
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = v5 - 24;
      if (!v5)
        v7 = 0;
      v8 = v7 + 40;
      v9 = *(_QWORD *)(v7 + 48);
      if (v9 != v7 + 40)
      {
        do
        {
          v10 = *(_QWORD *)(v9 + 8);
          if (v9)
            v11 = (unsigned __int8 *)(v9 - 24);
          else
            v11 = 0;
          v12 = (char *)sub_1C477672C((uint64_t)&v52, (uint64_t)v11);
          if (v53 == v52)
            v13 = (uint64_t *)((char *)&v54 + 4);
          else
            v13 = &v54;
          if (v12 == &v53[8 * *(unsigned int *)v13])
          {
            v14 = v11[16];
            if (v14 != 89)
              v11 = 0;
            if (v9 && v14 == 89)
            {
              v15 = *((_QWORD *)v11 - 4);
              if (v15)
                v16 = *(_BYTE *)(v15 + 16) == 16;
              else
                v16 = 0;
              if (!v16)
                goto LABEL_26;
              v17 = (unsigned int *)(v15 + 24);
              if (*(_DWORD *)(v15 + 32) >= 0x41u)
                v17 = *(unsigned int **)v17;
              ScalarElement = llvm::findScalarElement(*((llvm **)v11 - 8), (llvm::Value *)*v17);
              if (ScalarElement)
              {
                v19 = 1;
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v11, ScalarElement, (llvm::Value *)1);
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v52, (uint64_t)v11);
              }
              else
              {
LABEL_26:
                v19 = 0;
              }
              v6 |= v19;
            }
          }
          v9 = v10;
        }
        while (v10 != v8);
      }
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != v4);
    v3 = (unint64_t *)v52;
    v20 = (unint64_t *)v53;
    v22 = v54;
    v21 = HIDWORD(v54);
  }
  if (v20 == v3)
    v23 = v21;
  else
    v23 = v22;
  v24 = v20;
  if ((_DWORD)v23)
  {
    v25 = 0;
    while (v20[v25] >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (v23 == ++v25)
        goto LABEL_57;
    }
    v24 = &v20[v25];
  }
  v26 = &v20[v23];
  if (v24 != v26)
  {
    v27 = *v24;
LABEL_43:
    v28 = *(_DWORD *)(v27 + 20);
    if ((v28 & 0x40000000) != 0)
    {
      v30 = *(_QWORD *)(v27 - 8);
      v29 = v28 & 0x7FFFFFF;
      if (!v29)
        goto LABEL_50;
    }
    else
    {
      v29 = v28 & 0x7FFFFFF;
      v30 = v27 - 32 * v29;
      if (!v29)
        goto LABEL_50;
    }
    v31 = 32 * v29;
    v32 = (_QWORD **)(v30 + 16);
    do
    {
      if (*(v32 - 2))
      {
        **v32 = *(v32 - 1);
        v33 = (uint64_t)*(v32 - 1);
        if (v33)
          *(_QWORD *)(v33 + 16) = *v32;
      }
      *(v32 - 2) = 0;
      v32 += 4;
      v31 -= 32;
    }
    while (v31);
LABEL_50:
    v34 = v24 + 1;
    while (v34 != v26)
    {
      v35 = *v34++;
      v27 = v35;
      if (v35 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v24 = v34 - 1;
        goto LABEL_43;
      }
    }
    v3 = (unint64_t *)v52;
    v20 = (unint64_t *)v53;
    v22 = v54;
    v21 = HIDWORD(v54);
  }
LABEL_57:
  if (v20 == v3)
    v36 = v21;
  else
    v36 = v22;
  v37 = v20;
  if ((_DWORD)v36)
  {
    v38 = 0;
    while (v20[v38] >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (v36 == ++v38)
        goto LABEL_73;
    }
    v37 = &v20[v38];
  }
  v39 = &v20[v36];
  if (v37 != v39)
  {
    v40 = *v37;
LABEL_68:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v40 + 40) + 40, (uint64_t ***)v40);
    v41 = *(_QWORD *)(v40 + 24);
    v42 = *(_QWORD **)(v40 + 32);
    *v42 = v41;
    *(_QWORD *)(v41 + 8) = v42;
    *(_QWORD *)(v40 + 24) = 0;
    *(_QWORD *)(v40 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v40);
    v43 = v37 + 1;
    while (v43 != v39)
    {
      v44 = *v43++;
      v40 = v44;
      if (v44 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v37 = v43 - 1;
        goto LABEL_68;
      }
    }
    v3 = (unint64_t *)v52;
    v20 = (unint64_t *)v53;
  }
LABEL_73:
  if (v20 == v3)
    goto LABEL_74;
  if (v54 < 0x21 || 4 * (HIDWORD(v54) - v55) >= v54)
  {
    memset(v20, 255, 8 * v54);
LABEL_74:
    HIDWORD(v54) = 0;
    v55 = 0;
    goto LABEL_75;
  }
  free(v20);
  v48 = 1 << (33 - __clz(HIDWORD(v54) - v55 - 1));
  v49 = (HIDWORD(v54) - v55) > 0x10;
  HIDWORD(v54) = 0;
  v55 = 0;
  if (v49)
    v50 = v48;
  else
    v50 = 32;
  LODWORD(v54) = v50;
  v51 = (char *)malloc_type_malloc(8 * v50, 0x4065EBACuLL);
  if (!v51)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v53 = v51;
  memset(v51, 255, 8 * v54);
LABEL_75:
  v45 = sub_1C5E9DFC8(a2, (llvm::BinaryOperator *)1);
  if (v53 != v52)
    free(v53);
  return (v6 | v45) & 1;
}

uint64_t sub_1C49D38AC(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "AGX3 Common Store Backfiller";
  *(_QWORD *)(v2 + 8) = 28;
  *(_QWORD *)(v2 + 16) = "agx3-common-store-backfiller";
  *(_QWORD *)(v2 + 24) = 28;
  *(_QWORD *)(v2 + 32) = &unk_1ED7ECAF0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C49D3A00;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C49D3938(uint64_t a1)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  v2 = sub_1C4776848(a1, (uint64_t)&unk_1ED7ECAF0);
  *(_QWORD *)v2 = &off_1E7FA9268;
  *(_QWORD *)(v2 + 280) = 0;
  *(_QWORD *)(v2 + 288) = 0;
  *(_DWORD *)(v2 + 296) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED7ECAF8);
  if (v4 != -1)
  {
    v8[0] = sub_1C49D38AC;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED7ECAF8, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C49D3A00()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C49D3938(v0);
}

void sub_1C49D3A28(llvm::Pass *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  *(_QWORD *)a1 = &off_1E7FA9268;
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 35), 8);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v2 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v2 != (_QWORD *)((char *)a1 + 192))
    free(v2);
  v3 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v3 != (_QWORD *)((char *)a1 + 120))
    free(v3);
  v4 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v4 != (_QWORD *)((char *)a1 + 48))
    free(v4);
  llvm::Pass::~Pass(a1);
}

void sub_1C49D3AB8(llvm::Pass *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  *(_QWORD *)a1 = &off_1E7FA9268;
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 35), 8);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v2 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v2 != (_QWORD *)((char *)a1 + 192))
    free(v2);
  v3 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v3 != (_QWORD *)((char *)a1 + 120))
    free(v3);
  v4 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v4 != (_QWORD *)((char *)a1 + 48))
    free(v4);
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C49D3B5C()
{
  return "AGX3 Common Store Backfiller Pass";
}

void *sub_1C49D3B6C(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C49D3B9C(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char hasAddressTaken;
  llvm::Function *v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  const llvm::MachineOperand *v32;
  uint64_t v33;
  uint64_t UniqueVRegDef;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  char v46;
  unsigned int v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t i;
  unsigned __int16 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  _BOOL4 v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t **v70;
  uint64_t **v71;
  uint64_t *v72;
  unint64_t v73;
  uint64_t **v74;
  uint64_t *v75;
  int v76;
  unsigned int v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  int v81;
  BOOL v82;
  char v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t **v90;
  uint64_t **v91;
  unint64_t v92;
  char *v93;
  void *v94;
  unsigned int v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t *v98;
  void *v99;
  uint64_t v100;
  uint64_t *v101;
  _DWORD *v102;
  int v103;
  int v104;
  unsigned int v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t *v108;
  int v109;
  BOOL v110;
  unsigned int v111;
  uint64_t *v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  char v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t *v124;
  unsigned int v125;
  uint64_t *v126;
  uint64_t **v127;
  uint64_t *v128;
  unsigned int v129;
  uint64_t *v130;
  uint64_t **v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  char v138;
  unint64_t v139;
  uint64_t *v140;
  uint64_t **v141;
  uint64_t **v142;
  unint64_t v143;
  char *v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t *v160;
  unint64_t v161;
  uint64_t **v162;
  uint64_t *v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t *v167;
  void *v168;
  void *v169;
  uint64_t *v170;
  int v171;
  int v172;
  uint64_t v173;
  _QWORD *v174;
  unint64_t v175;
  unint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t *v181;
  int64x2_t v182;
  char v183;
  uint64_t v184;
  unsigned int v185;
  unsigned int v186;
  void *__src[2];
  uint64_t v188;
  int v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t v192;
  void *v193;
  uint64_t v194;
  _OWORD v195[4];
  void *v196;
  uint64_t v197;
  _BYTE v198[64];
  _BYTE v199[28];
  _BYTE v200[64];
  _BYTE v201[28];
  _BYTE v202[32];
  unsigned __int8 v203;
  void *v204;
  unsigned int v205;
  int v206;
  _QWORD v207[24];

  v2 = a2;
  v207[21] = *MEMORY[0x1E0C80C00];
  v4 = a2[2];
  *(_QWORD *)(a1 + 272) = v4;
  *(_QWORD *)(a1 + 248) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  *(_QWORD *)(a1 + 256) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 176))(*(_QWORD *)(a1 + 272));
  *(_QWORD *)(a1 + 264) = v2[5];
  v5 = v2[43];
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5) & 1) != 0)
  {
    hasAddressTaken = 0;
  }
  else
  {
    v7 = (llvm::Function *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 568))(v5);
    if (v7)
      hasAddressTaken = llvm::Function::hasAddressTaken(v7, 0, 0, 1, 0, 0);
    else
      hasAddressTaken = 1;
  }
  sub_1C611A8F4(&v188, *(_QWORD *)(*v2 + 40));
  if (sub_1C611A970((uint64_t)&v188, *v2)
    || !*(_BYTE *)(*(_QWORD *)(a1 + 272) + 311)
    || (*(_DWORD *)(v2[1] + 544) == 1 ? (v8 = 1) : (v8 = hasAddressTaken),
        (v8 & 1) != 0 || (*(_WORD *)(*v2 + 18) & 0x3FF0) == 0x640 || sub_1C49D508C(a1, *v2)))
  {
    v183 = 0;
    goto LABEL_15;
  }
  v191 = 0;
  v192 = 0;
  v190 = (uint64_t *)&v191;
  v51 = v2 + 40;
  v52 = (uint64_t *)v2[41];
  v180 = v2;
  if (v52 == v2 + 40)
    goto LABEL_366;
  v53 = v2[43];
  v182 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v184 = v53;
  v181 = v2 + 40;
  do
  {
    for (i = v52[7]; (uint64_t *)i != v52 + 6; i = *(_QWORD *)(i + 8))
    {
      v55 = *(unsigned __int16 **)(i + 16);
      if ((*((_BYTE *)v55 + 9) & 0x20) == 0)
        goto LABEL_124;
      v56 = *(_QWORD *)(i + 32);
      if ((*(_DWORD *)v56 & 0xFFF00) != 0)
        goto LABEL_124;
      v57 = *(unsigned int *)(v56 + 4);
      v58 = *(_QWORD *)(a1 + 264);
      v59 = (uint64_t *)((v57 & 0x80000000) != 0
                      ? *(_QWORD *)(v58 + 24) + 16 * (v57 & 0x7FFFFFFF) + 8
                      : *(_QWORD *)(v58 + 272) + 8 * v57);
      v60 = *v59;
      if (!v60)
        goto LABEL_124;
      if ((*(_BYTE *)(v60 + 3) & 1) == 0)
      {
        v60 = *(_QWORD *)(v60 + 24);
        if (!v60 || (*(_BYTE *)(v60 + 3) & 1) == 0)
          goto LABEL_124;
      }
      v61 = *(_QWORD *)(v60 + 24);
      if (v61)
      {
        v62 = (*(_BYTE *)(v61 + 3) & 1) == 0;
        if ((v57 & 0x80000000) == 0)
          goto LABEL_124;
      }
      else
      {
        v62 = 1;
        if ((v57 & 0x80000000) == 0)
          goto LABEL_124;
      }
      if (!v62 || (v63 = *v55 - 517, v63 >= 2) && *(_BYTE *)(v56 + 64) != 1)
      {
LABEL_124:
        if ((*(_BYTE *)i & 4) != 0)
          continue;
        goto LABEL_244;
      }
      v189 = 0;
      *(_QWORD *)v199 = v200;
      *(_QWORD *)&v199[8] = v200;
      *(_QWORD *)&v199[16] = 8;
      *(_DWORD *)&v199[24] = 0;
      v64 = v57 & 0x7FFFFFFF;
      v65 = *(_QWORD *)(*(_QWORD *)(v58 + 24) + 16 * v64 + 8);
      if (!v65)
        goto LABEL_143;
      while ((*(_BYTE *)(v65 + 3) & 1) != 0)
      {
        v65 = *(_QWORD *)(v65 + 24);
        if (!v65)
          goto LABEL_143;
      }
      if (sub_1C49D54C4(v65, v58, &v189, (unsigned int *)v199))
      {
        while (1)
        {
          v65 = *(_QWORD *)(v65 + 24);
          if (!v65)
            break;
          if ((*(_BYTE *)(v65 + 3) & 1) == 0
            && (sub_1C49D54C4(v65, *(_QWORD *)(a1 + 264), &v189, (unsigned int *)v199) & 1) == 0)
          {
            goto LABEL_239;
          }
        }
LABEL_143:
        if (v63 >= 2)
          v66 = *(_QWORD *)(*(_QWORD *)(i + 32) + 80);
        else
          v66 = 0;
        v67 = *(_QWORD *)(a1 + 256);
        v68 = v66 | ((unint64_t)(*(_DWORD *)(*(_QWORD *)(v67 + 264)
                                                  + 24
                                                  * (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 24)
                                                                                                 + 16 * v64) & 0xFFFFFFFFFFFFFFF8)
                                                                         + 24)
                                                   + *(_DWORD *)(v67 + 272)
                                                   * ((*(_QWORD *)(v67 + 248) - *(_QWORD *)(v67 + 240)) >> 3))) == 32) << 63);
        v69 = v191;
        if (v191)
        {
          v70 = &v191;
          do
          {
            v71 = v70;
            v72 = v69;
            v73 = v69[4];
            v74 = (uint64_t **)(v69 + 1);
            if (v73 >= v68)
            {
              v74 = (uint64_t **)v72;
              v70 = (uint64_t **)v72;
            }
            v69 = *v74;
          }
          while (v69);
          if (v70 != &v191)
          {
            v75 = v73 >= v68 ? v72 : (uint64_t *)v71;
            if (v68 >= v75[4])
            {
              if (v73 >= v68)
                v99 = v72;
              else
                v99 = v71;
              *((_DWORD *)v99 + 10) += (v189 << 16) + 1;
              if (v73 >= v68)
                v100 = (uint64_t)(v72 + 6);
              else
                v100 = (uint64_t)(v71 + 6);
              *(_QWORD *)v202 = i;
              v101 = (uint64_t *)(v71 + 7);
              if (v73 >= v68)
                v101 = v72 + 7;
              if ((*((_BYTE *)v99 + 48) & 1) != 0)
              {
                v103 = 8;
LABEL_217:
                v104 = v103 - 1;
                v105 = v104 & ((i >> 4) ^ (i >> 9));
                v106 = &v101[v105];
                v107 = *v106;
                if (i != *v106)
                {
                  v108 = 0;
                  v109 = 1;
                  while (v107 != -4096)
                  {
                    if (v108)
                      v110 = 0;
                    else
                      v110 = v107 == -8192;
                    if (v110)
                      v108 = v106;
                    v111 = v105 + v109++;
                    v105 = v111 & v104;
                    v106 = &v101[v105];
                    v107 = *v106;
                    if (i == *v106)
                      goto LABEL_238;
                  }
                  if (v108)
                    v112 = v108;
                  else
                    v112 = v106;
                  goto LABEL_230;
                }
              }
              else
              {
                if (v73 >= v68)
                  v102 = v72;
                else
                  v102 = v71;
                v103 = v102[16];
                if (v103)
                {
                  v101 = (uint64_t *)*((_QWORD *)v99 + 7);
                  goto LABEL_217;
                }
                v112 = 0;
LABEL_230:
                v113 = sub_1C486D2E8(v100, (uint64_t)v202, v202, v112);
                *v113 = *(_QWORD *)v202;
                if (v73 >= v68)
                  v114 = v72;
                else
                  v114 = v71;
                if (v73 >= v68)
                  v115 = (uint64_t)(v72 + 15);
                else
                  v115 = (uint64_t)(v71 + 15);
                v116 = *(_QWORD *)v202;
                v117 = *((unsigned int *)v114 + 32);
                if (v117 >= *((unsigned int *)v114 + 33))
                {
                  if (v73 >= v68)
                    v118 = (uint64_t)(v72 + 17);
                  else
                    v118 = (uint64_t)(v71 + 17);
                  v119 = *(_QWORD *)v202;
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v115, v118, v117 + 1, 8);
                  v116 = v119;
                  v117 = *((unsigned int *)v114 + 32);
                }
                *(_QWORD *)(v114[15] + 8 * v117) = v116;
                ++*((_DWORD *)v114 + 32);
                v53 = v184;
              }
LABEL_238:
              v51 = v181;
              goto LABEL_239;
            }
          }
        }
        v194 = 1;
        v195[0] = v182;
        v195[1] = v182;
        v195[2] = v182;
        v195[3] = v182;
        v196 = v198;
        v197 = 0x800000000;
        v76 = (v189 << 16) | 1;
        LODWORD(v193) = v76;
        *(_QWORD *)v202 = i;
        v77 = ((i >> 4) ^ (i >> 9)) & 7;
        v78 = (_QWORD *)v195 + v77;
        v79 = *v78;
        if (i != *v78)
        {
          v80 = 0;
          v81 = 1;
          while (v79 != -4096)
          {
            if (v80)
              v82 = 0;
            else
              v82 = v79 == -8192;
            if (v82)
              v80 = v78;
            v83 = v77 + v81++;
            v77 = v83 & 7;
            v78 = (_QWORD *)v195 + v77;
            v79 = *v78;
            if (i == *v78)
              goto LABEL_177;
          }
          if (v80)
            v84 = v80;
          else
            v84 = v78;
          v85 = sub_1C486D2E8((uint64_t)&v194, (uint64_t)v202, v202, v84);
          *v85 = *(_QWORD *)v202;
          v86 = *(_QWORD *)v202;
          v87 = v197;
          if (v197 >= (unint64_t)HIDWORD(v197))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v196, (uint64_t)v198, v197 + 1, 8);
            v87 = v197;
          }
          *((_QWORD *)v196 + v87) = v86;
          v76 = (int)v193;
          LODWORD(v197) = v197 + 1;
        }
LABEL_177:
        *(_QWORD *)v202 = v68;
        *(_DWORD *)&v202[8] = v76;
        sub_1C486D878((int *)&v202[16], (uint64_t)&v194);
        v88 = v191;
        v89 = *(_QWORD *)v202;
        v90 = &v191;
        v91 = &v191;
        if (v191)
        {
          while (1)
          {
            while (1)
            {
              v91 = (uint64_t **)v88;
              v92 = v88[4];
              if (*(_QWORD *)v202 >= v92)
                break;
              v88 = *v91;
              v90 = v91;
              if (!*v91)
                goto LABEL_184;
            }
            if (v92 >= *(_QWORD *)v202)
              goto LABEL_194;
            v88 = v91[1];
            if (!v88)
            {
              v90 = v91 + 1;
              break;
            }
          }
        }
LABEL_184:
        v93 = (char *)operator new(0xC8uLL);
        *(_QWORD *)v201 = v93;
        *(_QWORD *)&v201[8] = &v191;
        *((_QWORD *)v93 + 4) = v89;
        *((_DWORD *)v93 + 10) = *(_DWORD *)&v202[8];
        *((_QWORD *)v93 + 6) = 1;
        *(int64x2_t *)(v93 + 56) = v182;
        *(int64x2_t *)(v93 + 72) = v182;
        *(int64x2_t *)(v93 + 88) = v182;
        *(int64x2_t *)(v93 + 104) = v182;
        sub_1C486D78C((unsigned int *)v93 + 12, (unsigned int *)&v202[16]);
        v94 = v93 + 136;
        *((_QWORD *)v93 + 15) = v93 + 136;
        *((_QWORD *)v93 + 16) = 0x800000000;
        v95 = v205;
        if (v205)
        {
          if (v204 == v207)
          {
            if (v205 < 9)
            {
              v96 = v207;
              v97 = v205;
              goto LABEL_188;
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v93 + 120), (uint64_t)(v93 + 136), v205, 8);
            v97 = v205;
            if (v205)
            {
              v96 = v204;
              v94 = (void *)*((_QWORD *)v93 + 15);
LABEL_188:
              memcpy(v94, v96, 8 * v97);
            }
            *((_DWORD *)v93 + 32) = v95;
          }
          else
          {
            *((_QWORD *)v93 + 15) = v204;
            v120 = v206;
            *((_DWORD *)v93 + 32) = v95;
            *((_DWORD *)v93 + 33) = v120;
            v204 = v207;
            v206 = 0;
          }
          v205 = 0;
          v53 = v184;
        }
        v201[16] = 1;
        v98 = *(uint64_t **)v201;
        **(_QWORD **)v201 = 0;
        v98[1] = 0;
        v98[2] = (uint64_t)v91;
        *v90 = v98;
        if (*v190)
        {
          v190 = (uint64_t *)*v190;
          v98 = *v90;
        }
        sub_1C4768E74(v191, v98);
        ++v192;
        *(_QWORD *)v201 = 0;
        sub_1C486D724((uint64_t *)v201);
LABEL_194:
        if (v204 != v207)
          free(v204);
        v51 = v181;
        if ((v202[16] & 1) == 0)
          MEMORY[0x1CAA32FB4](*(_QWORD *)&v202[24], 8);
        if (v196 != v198)
          free(v196);
        if ((v194 & 1) == 0)
          MEMORY[0x1CAA32FB4](*(_QWORD *)&v195[0], 8);
      }
LABEL_239:
      if (*(_QWORD *)&v199[8] != *(_QWORD *)v199)
        free(*(void **)&v199[8]);
      if (i)
        goto LABEL_124;
LABEL_244:
      while ((*(_WORD *)(i + 44) & 8) != 0)
        i = *(_QWORD *)(i + 8);
    }
    v52 = (uint64_t *)v52[1];
  }
  while (v52 != v51);
  if (!v192)
  {
LABEL_366:
    v121 = 0;
    goto LABEL_367;
  }
  v121 = 0;
  v122 = 0;
  *(int64x2_t *)__src = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    v123 = -1;
    v193 = (void *)-1;
    v194 = -1;
    v124 = v190;
    v186 = v122;
    if (v190 == (uint64_t *)&v191)
      goto LABEL_289;
    v125 = 0;
    do
    {
      *(_QWORD *)v202 = v124[4];
      *(_DWORD *)&v202[8] = *((_DWORD *)v124 + 10);
      sub_1C486D878((int *)&v202[16], (uint64_t)(v124 + 6));
      if (*(_DWORD *)&v202[8] > v125)
      {
        v193 = *(void **)v202;
        v125 = *(_DWORD *)&v202[8];
      }
      if (v204 != v207)
        free(v204);
      if ((v202[16] & 1) == 0)
        MEMORY[0x1CAA32FB4](*(_QWORD *)&v202[24], 8);
      v126 = (uint64_t *)v124[1];
      if (v126)
      {
        do
        {
          v127 = (uint64_t **)v126;
          v126 = (uint64_t *)*v126;
        }
        while (v126);
      }
      else
      {
        do
        {
          v127 = (uint64_t **)v124[2];
          v82 = *v127 == v124;
          v124 = (uint64_t *)v127;
        }
        while (!v82);
      }
      v124 = (uint64_t *)v127;
    }
    while (v127 != &v191);
    v123 = (uint64_t)v193;
    if (((unint64_t)v193 & 0x8000000000000000) != 0)
    {
LABEL_289:
      v132 = 1;
    }
    else
    {
      v128 = v190;
      if (v190 != (uint64_t *)&v191)
      {
        v129 = 0;
        do
        {
          *(_QWORD *)v202 = v128[4];
          *(_DWORD *)&v202[8] = *((_DWORD *)v128 + 10);
          sub_1C486D878((int *)&v202[16], (uint64_t)(v128 + 6));
          if (*(_DWORD *)&v202[8] > v129 && (*(_QWORD *)v202 & 0x8000000000000000) == 0 && *(void **)v202 != v193)
          {
            v194 = *(_QWORD *)v202;
            v129 = *(_DWORD *)&v202[8];
          }
          if (v204 != v207)
            free(v204);
          if ((v202[16] & 1) == 0)
            MEMORY[0x1CAA32FB4](*(_QWORD *)&v202[24], 8);
          v130 = (uint64_t *)v128[1];
          if (v130)
          {
            do
            {
              v131 = (uint64_t **)v130;
              v130 = (uint64_t *)*v130;
            }
            while (v130);
          }
          else
          {
            do
            {
              v131 = (uint64_t **)v128[2];
              v82 = *v131 == v128;
              v128 = (uint64_t *)v131;
            }
            while (!v82);
          }
          v128 = (uint64_t *)v131;
        }
        while (v131 != &v191);
      }
      v132 = 0;
      if (v194 != -1)
        v123 |= v194 << 16;
    }
    v133 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 224))(v53, v123);
    v134 = v133;
    if ((v133 & 0xFF00000000) == 0)
    {
      v135 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 376))(v53, 0);
      if ((_DWORD)v135 == -1)
        break;
      v134 = v135;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v53 + 232))(v53, v123, v135);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v53 + 328))(v53, v123);
    }
    v136 = 0;
    v137 = 1;
    do
    {
      v138 = v137;
      v139 = (unint64_t)*(&v193 + v136);
      if (v139 != -1)
      {
        v140 = v191;
        v141 = &v191;
        v142 = &v191;
        if (v191)
        {
          while (1)
          {
            while (1)
            {
              v142 = (uint64_t **)v140;
              v143 = v140[4];
              if (v139 >= v143)
                break;
              v140 = *v142;
              v141 = v142;
              if (!*v142)
                goto LABEL_304;
            }
            if (v143 >= v139)
              break;
            v140 = v142[1];
            if (!v140)
            {
              v141 = v142 + 1;
              goto LABEL_304;
            }
          }
        }
        else
        {
LABEL_304:
          v144 = (char *)operator new(0xC8uLL);
          *(_QWORD *)v202 = v144;
          *(_QWORD *)&v202[8] = &v191;
          *((_QWORD *)v144 + 4) = v139;
          *(_OWORD *)(v144 + 40) = 0u;
          *(_OWORD *)(v144 + 120) = 0u;
          *(_OWORD *)(v144 + 152) = 0u;
          *(_OWORD *)(v144 + 168) = 0u;
          *(_OWORD *)(v144 + 184) = 0u;
          *(_OWORD *)(v144 + 136) = 0u;
          *((_DWORD *)v144 + 12) = 1;
          *(_OWORD *)(v144 + 56) = *(_OWORD *)__src;
          *(_OWORD *)(v144 + 72) = *(_OWORD *)__src;
          *(_OWORD *)(v144 + 88) = *(_OWORD *)__src;
          *(_OWORD *)(v144 + 104) = *(_OWORD *)__src;
          *((_QWORD *)v144 + 15) = v144 + 136;
          *((_QWORD *)v144 + 16) = 0x800000000;
          v202[16] = 1;
          *(_QWORD *)v144 = 0;
          *((_QWORD *)v144 + 1) = 0;
          *((_QWORD *)v144 + 2) = v142;
          *v141 = (uint64_t *)v144;
          if (*v190)
          {
            v190 = (uint64_t *)*v190;
            v145 = *v141;
          }
          else
          {
            v145 = (uint64_t *)v144;
          }
          sub_1C4768E74(v191, v145);
          ++v192;
          v142 = *(uint64_t ***)v202;
          *(_QWORD *)v202 = 0;
          sub_1C486D724((uint64_t *)v202);
        }
        v146 = *((unsigned int *)v142 + 32);
        if ((_DWORD)v146)
        {
          v147 = v142[15];
          v148 = &v147[v146];
          do
          {
            v149 = *v147;
            v150 = *(unsigned int *)(*(_QWORD *)(*v147 + 32) + 4);
            v151 = *(_QWORD *)(a1 + 264);
            if ((v150 & 0x80000000) != 0)
              v152 = (uint64_t *)(*(_QWORD *)(v151 + 24) + 16 * (v150 & 0x7FFFFFFF) + 8);
            else
              v152 = (uint64_t *)(*(_QWORD *)(v151 + 272) + 8 * v150);
            v153 = *v152;
            if (*v152)
            {
              while ((*(_BYTE *)(v153 + 3) & 1) != 0)
              {
                v153 = *(_QWORD *)(v153 + 24);
                if (!v153)
                  goto LABEL_322;
              }
              v154 = v153;
              while (1)
              {
                v154 = *(_QWORD *)(v154 + 24);
                if (!v154)
                  break;
                if ((*(_BYTE *)(v154 + 3) & 1) == 0)
                {
                  sub_1C49D5678(v153, *(_QWORD *)(a1 + 264), v134, v136, v132);
                  v153 = v154;
                }
              }
              sub_1C49D5678(v153, *(_QWORD *)(a1 + 264), v134, v136, v132);
            }
LABEL_322:
            v155 = v149;
            if ((*(_BYTE *)v149 & 4) == 0)
            {
              v155 = v149;
              if ((*(_WORD *)(v149 + 44) & 8) != 0)
              {
                v155 = v149;
                do
                  v155 = *(_QWORD *)(v155 + 8);
                while ((*(_WORD *)(v155 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(v149 + 24) + 40, v149, *(_QWORD *)(v155 + 8));
            ++v147;
          }
          while (v147 != v148);
        }
        if (v191)
        {
          v156 = (unint64_t)*(&v193 + v136);
          v157 = v191;
          v158 = (uint64_t *)&v191;
          do
          {
            v159 = v158;
            v160 = v157;
            v161 = v157[4];
            v162 = (uint64_t **)(v157 + 1);
            if (v161 >= v156)
              v158 = v157;
            else
              ++v157;
            v157 = (uint64_t *)*v157;
          }
          while (v157);
          if (v158 != (uint64_t *)&v191)
          {
            v163 = v161 >= v156 ? v160 : v159;
            if (v156 >= v163[4])
            {
              if (v161 < v156)
                v162 = (uint64_t **)(v159 + 1);
              v164 = *v162;
              v165 = v158;
              if (*v162)
              {
                do
                {
                  v166 = v164;
                  v164 = (uint64_t *)*v164;
                }
                while (v164);
              }
              else
              {
                do
                {
                  v166 = (uint64_t *)v165[2];
                  v82 = *v166 == (_QWORD)v165;
                  v165 = v166;
                }
                while (!v82);
              }
              if (v190 == v158)
                v190 = v166;
              --v192;
              sub_1C485B6E0(v191, v158);
              if (v161 >= v156)
                v167 = v160;
              else
                v167 = v159;
              v168 = (void *)v167[15];
              v169 = v159 + 17;
              if (v161 >= v156)
                v169 = v160 + 17;
              if (v168 != v169)
                free(v168);
              if (v161 >= v156)
                v170 = v160;
              else
                v170 = v159;
              if ((v170[6] & 1) == 0)
                MEMORY[0x1CAA32FB4](v170[7], 8);
              operator delete(v158);
            }
          }
        }
      }
      v137 = 0;
      v136 = 1;
    }
    while ((v138 & 1) != 0);
    v121 = 1;
    if (v186 > 0x1E)
      break;
    v122 = v186 + 1;
    v53 = v184;
  }
  while (v192);
LABEL_367:
  v183 = v121;
  sub_1C486DA00(v191);
  v2 = v180;
LABEL_15:
  v9 = (uint64_t *)v2[41];
  if (v9 == v2 + 40)
    goto LABEL_107;
  while (2)
  {
    v193 = v195;
    v194 = 0x400000000;
    v10 = v9[7];
    if ((uint64_t *)v10 == v9 + 6)
      goto LABEL_104;
    v185 = 0;
    while (2)
    {
      v11 = *(unsigned __int16 **)(v10 + 16);
      v12 = *v11;
      if ((unsigned __int16)(v12 - 1) > 1u || (*(_BYTE *)(*(_QWORD *)(v10 + 32) + 48) & 8) == 0)
      {
        v13 = *(unsigned __int16 *)(v10 + 44);
        v82 = (v13 & 0xC) == 0;
        v14 = (v13 >> 2) & 1;
        if (v82)
          LOBYTE(v14) = 1;
        v15 = *((_QWORD *)v11 + 1);
        if ((v14 & 1) != 0)
        {
          if ((v15 & 0x80000) != 0)
            goto LABEL_27;
        }
        else
        {
          v36 = v10;
          if ((v15 & 0x80000) != 0)
            goto LABEL_27;
          while ((*(_WORD *)(v36 + 44) & 8) != 0)
          {
            v36 = *(_QWORD *)(v36 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v36 + 16) + 10) & 8) != 0)
              goto LABEL_27;
          }
        }
        if ((unsigned __int16)(v12 - 1) > 1u || (*(_BYTE *)(*(_QWORD *)(v10 + 32) + 48) & 0x10) == 0)
        {
          if ((v14 & 1) != 0)
          {
            if ((v15 & 0x100000) != 0)
              goto LABEL_27;
          }
          else
          {
            v37 = v10;
            if ((v15 & 0x100000) != 0)
              goto LABEL_27;
            while ((*(_WORD *)(v37 + 44) & 8) != 0)
            {
              v37 = *(_QWORD *)(v37 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v37 + 16) + 10) & 0x10) != 0)
                goto LABEL_27;
            }
          }
          goto LABEL_62;
        }
      }
LABEL_27:
      v16 = sub_1C4C915C4(v12);
      if ((v16 & 0xFF00000000) != 0)
      {
        v17 = 0;
        v18 = v16 - 61;
        if ((v16 - 61) <= 0x2D)
        {
          if (((1 << v18) & 0xC000000000FLL) != 0)
            goto LABEL_33;
          if (((1 << v18) & 0x220180000000) != 0)
          {
            v17 = 1;
            goto LABEL_33;
          }
        }
        if ((v16 - 190) < 2)
        {
LABEL_33:
          v19 = sub_1C4C2FD5C(v12);
          v20 = *(_QWORD *)(v10 + 32);
          if (*(_BYTE *)(v20 + 32 * v19))
            goto LABEL_62;
          v21 = v19;
          v22 = v20 + 32 * v19;
          v23 = *(_DWORD *)(v22 + 4);
          if (v17)
          {
            sub_1C49D58E4((uint64_t)v202, *(_DWORD *)(v22 + 4), *(_QWORD *)(a1 + 264), 556, 2);
            LOBYTE(v24) = v202[0];
            v25 = *(_DWORD *)v202 >> 8;
            *(_OWORD *)v199 = *(_OWORD *)&v202[4];
            *(_OWORD *)&v199[12] = *(_OWORD *)&v202[16];
            if (!v203)
              goto LABEL_62;
LABEL_49:
            *(_QWORD *)v202 = &v202[16];
            *(_QWORD *)&v202[8] = 0x800000000;
            sub_1C4778BB4((unsigned int *)v202, (uint64_t)&v202[16], (_BYTE *)(*(_QWORD *)(v10 + 32) + 32 * v21), (_BYTE *)(*(_QWORD *)(v10 + 32) + 32 * *(unsigned int *)(v10 + 40)));
            v30 = *(_QWORD *)v202;
            **(_DWORD **)v202 = v24 | (v25 << 8);
            *(_OWORD *)(v30 + 4) = *(_OWORD *)v199;
            *(_OWORD *)(v30 + 16) = *(_OWORD *)&v199[12];
            while (1)
            {
              v31 = *(_DWORD *)(v10 + 40);
              if (v31 <= v21)
                break;
              llvm::MachineInstr::removeOperand(v10, v31 - 1);
            }
            v32 = *(const llvm::MachineOperand **)v202;
            if (*(_DWORD *)&v202[8])
            {
              v33 = 32 * *(unsigned int *)&v202[8];
              do
              {
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v10, *(llvm::MachineFunction **)(*(_QWORD *)(v10 + 24) + 32), v32);
                v32 = (const llvm::MachineOperand *)((char *)v32 + 32);
                v33 -= 32;
              }
              while (v33);
              v32 = *(const llvm::MachineOperand **)v202;
            }
            if (v32 != (const llvm::MachineOperand *)&v202[16])
              free(v32);
            *(_QWORD *)(v10 + 16) = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8) + 48 * v12;
            if (sub_1C4778650(*(_QWORD *)(a1 + 264), v23))
            {
              UniqueVRegDef = llvm::MachineRegisterInfo::getUniqueVRegDef(*(_QWORD *)(a1 + 264), v23);
              v35 = v194;
              if (v194 >= (unint64_t)HIDWORD(v194))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v193, (uint64_t)v195, v194 + 1, 8);
                v35 = v194;
              }
              *((_QWORD *)v193 + v35) = UniqueVRegDef;
              LODWORD(v194) = v194 + 1;
            }
            goto LABEL_62;
          }
          v26 = *(_QWORD *)(a1 + 264);
          v27 = llvm::MachineRegisterInfo::getUniqueVRegDef(v26, *(_DWORD *)(v22 + 4));
          v24 = v27;
          if (!v27)
            goto LABEL_47;
          if (**(_WORD **)(v27 + 16) != 18 || *(_DWORD *)(v27 + 40) != 5)
            goto LABEL_46;
          sub_1C49D58E4((uint64_t)v202, *(_DWORD *)(*(_QWORD *)(v27 + 32) + 36), v26, 552, 4);
          v28 = v203;
          if (!v203)
            goto LABEL_68;
          v29 = *(_QWORD *)(v24 + 32);
          if (*(_QWORD *)(v29 + 80) != 25)
            goto LABEL_46;
          sub_1C49D58E4((uint64_t)v199, *(_DWORD *)(v29 + 100), v26, 552, 4);
          v28 = v200[0];
          if (v200[0])
          {
            if (*(_QWORD *)(*(_QWORD *)(v24 + 32) + 144) == 26
              && (*(unsigned int *)&v202[4] | ((unint64_t)*(unsigned int *)&v202[24] << 32)) + 2 == (*(unsigned int *)&v199[4] | ((unint64_t)*(unsigned int *)&v199[24] << 32)))
            {
              *(_OWORD *)v201 = *(_OWORD *)&v202[4];
              *(_OWORD *)&v201[12] = *(_OWORD *)&v202[16];
              LODWORD(v24) = *(_DWORD *)v202 & 0xFFF000FF | 0x300;
              v185 = v24 >> 8;
              v28 = 1;
              goto LABEL_48;
            }
LABEL_46:
            LOBYTE(v24) = 0;
LABEL_47:
            v28 = 0;
          }
          else
          {
LABEL_68:
            LOBYTE(v24) = 0;
          }
LABEL_48:
          *(_OWORD *)v199 = *(_OWORD *)v201;
          *(_OWORD *)&v199[12] = *(_OWORD *)&v201[12];
          v25 = v185;
          if (!v28)
            goto LABEL_62;
          goto LABEL_49;
        }
      }
LABEL_62:
      if ((*(_BYTE *)v10 & 4) == 0)
      {
        while ((*(_WORD *)(v10 + 44) & 8) != 0)
          v10 = *(_QWORD *)(v10 + 8);
      }
      v10 = *(_QWORD *)(v10 + 8);
      if ((uint64_t *)v10 != v9 + 6)
        continue;
      break;
    }
    while ((_DWORD)v194)
    {
      v38 = *((_QWORD *)v193 + v194 - 1);
      LODWORD(v194) = v194 - 1;
      if (**(_WORD **)(v38 + 16) == 18)
      {
        v39 = llvm::MachineRegisterInfo::getUniqueVRegDef(*(_QWORD *)(a1 + 264), *(_DWORD *)(*(_QWORD *)(v38 + 32) + 36));
        v40 = llvm::MachineRegisterInfo::getUniqueVRegDef(*(_QWORD *)(a1 + 264), *(_DWORD *)(*(_QWORD *)(v38 + 32) + 100));
        v41 = v38;
        if ((*(_BYTE *)v38 & 4) == 0)
        {
          v41 = v38;
          if ((*(_WORD *)(v38 + 44) & 8) != 0)
          {
            v41 = v38;
            do
              v41 = *(_QWORD *)(v41 + 8);
            while ((*(_WORD *)(v41 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(v38 + 24) + 40, v38, *(_QWORD *)(v41 + 8));
        if (v39 && sub_1C4778650(*(_QWORD *)(a1 + 264), *(_DWORD *)(*(_QWORD *)(v39 + 32) + 4)))
        {
          v42 = v39;
          if ((*(_BYTE *)v39 & 4) == 0)
          {
            v42 = v39;
            if ((*(_WORD *)(v39 + 44) & 8) != 0)
            {
              v42 = v39;
              do
                v42 = *(_QWORD *)(v42 + 8);
              while ((*(_WORD *)(v42 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(v39 + 24) + 40, v39, *(_QWORD *)(v42 + 8));
        }
        if (v39 == v40)
          continue;
        v38 = v40;
        if (!sub_1C4778650(*(_QWORD *)(a1 + 264), *(_DWORD *)(*(_QWORD *)(v40 + 32) + 4)))
          continue;
      }
      v43 = v38;
      if ((*(_BYTE *)v38 & 4) == 0)
      {
        v43 = v38;
        if ((*(_WORD *)(v38 + 44) & 8) != 0)
        {
          v43 = v38;
          do
            v43 = *(_QWORD *)(v43 + 8);
          while ((*(_WORD *)(v43 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(v38 + 24) + 40, v38, *(_QWORD *)(v43 + 8));
    }
LABEL_104:
    if (v193 != v195)
      free(v193);
    v9 = (uint64_t *)v9[1];
    if (v9 != v2 + 40)
      continue;
    break;
  }
LABEL_107:
  v44 = (_QWORD *)(a1 + 280);
  v45 = *(_DWORD *)(a1 + 288);
  if (v45)
  {
    v47 = *(_DWORD *)(a1 + 296);
    v46 = v183;
    if (v47 > 4 * v45 && v47 >= 0x41)
    {
      v171 = 1 << (33 - __clz(v45 - 1));
      if (v171 <= 64)
        v172 = 64;
      else
        v172 = v171;
      goto LABEL_371;
    }
LABEL_113:
    if (v47)
    {
      v48 = (_QWORD *)*v44;
      v49 = 16 * v47;
      do
      {
        *v48 = -4096;
        v48 += 2;
        v49 -= 16;
      }
      while (v49);
    }
    *(_QWORD *)(a1 + 288) = 0;
  }
  else
  {
    v46 = v183;
    if (*(_DWORD *)(a1 + 292))
    {
      v47 = *(_DWORD *)(a1 + 296);
      if (v47 <= 0x40)
      {
        v46 = v183;
        goto LABEL_113;
      }
      v172 = 0;
LABEL_371:
      if (v172 == v47)
      {
        *(_QWORD *)(a1 + 288) = 0;
        v173 = 16 * v47;
        v174 = *(_QWORD **)(a1 + 280);
        v46 = v183;
        do
        {
          *v174 = -4096;
          v174 += 2;
          v173 -= 16;
        }
        while (v173);
      }
      else
      {
        MEMORY[0x1CAA32FB4](*v44, 8);
        if (v172)
        {
          v175 = (4 * v172 / 3u + 1) | ((unint64_t)(4 * v172 / 3u + 1) >> 1);
          v176 = v175 | (v175 >> 2) | ((v175 | (v175 >> 2)) >> 4);
          LODWORD(v176) = (((v176 | (v176 >> 8)) >> 16) | v176 | (v176 >> 8)) + 1;
          *(_DWORD *)(a1 + 296) = v176;
          v177 = operator new(16 * v176, (std::align_val_t)8uLL);
          *(_QWORD *)(a1 + 280) = v177;
          *(_QWORD *)(a1 + 288) = 0;
          v178 = *(unsigned int *)(a1 + 296);
          v46 = v183;
          if ((_DWORD)v178)
          {
            v179 = 16 * v178;
            do
            {
              *v177 = -4096;
              v177 += 2;
              v179 -= 16;
            }
            while (v179);
          }
        }
        else
        {
          *v44 = 0;
          *(_QWORD *)(a1 + 288) = 0;
          *(_DWORD *)(a1 + 296) = 0;
          v46 = v183;
        }
      }
    }
  }
  return v46 & 1;
}

BOOL sub_1C49D508C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  _BOOL8 result;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13[3];
  char v14;
  uint64_t v15;
  uint64_t v16;

  v15 = a2;
  v16 = a2;
  v4 = (uint64_t *)(a1 + 280);
  v13[0] = 0;
  if (sub_1C49D52C0((uint64_t *)(a1 + 280), &v16, v13)
    && v13[0] != (_QWORD *)(*(_QWORD *)(a1 + 280) + 16 * *(unsigned int *)(a1 + 296)))
  {
    return *((_BYTE *)v13[0] + 8) != 0;
  }
  sub_1C611A8F4(&v16, *(_QWORD *)(a2 + 40));
  if (sub_1C611A970((uint64_t)&v16, a2) || (*(_WORD *)(a2 + 18) & 0x3FF0) == 0x640)
    goto LABEL_6;
  v14 = 0;
  sub_1C49D5230((uint64_t)v4, &v15, &v14, (uint64_t)v13);
  v8 = *(_QWORD *)(v15 + 8);
  if (!v8)
    return 0;
  while (1)
  {
    v9 = *(_QWORD *)(v8 + 24);
    v10 = *(unsigned __int8 *)(v9 + 16);
    if (v10 == 84)
    {
      if ((sub_1C49D508C(a1, *(_QWORD *)(*(_QWORD *)(v9 + 40) + 56)) & 1) != 0)
        goto LABEL_6;
      goto LABEL_21;
    }
    if (v10 != 77 && (v10 != 5 || *(_WORD *)(v9 + 18) != 49))
      goto LABEL_6;
    v11 = *(_QWORD *)(v9 + 8);
    if (v11)
      break;
LABEL_21:
    result = 0;
    v8 = *(_QWORD *)(v8 + 8);
    if (!v8)
      return result;
  }
  while (1)
  {
    v12 = *(_QWORD *)(v11 + 24);
    if (!v12 || *(_BYTE *)(v12 + 16) != 84 || (sub_1C49D508C(a1, *(_QWORD *)(*(_QWORD *)(v12 + 40) + 56)) & 1) != 0)
      break;
    v11 = *(_QWORD *)(v11 + 8);
    if (!v11)
      goto LABEL_21;
  }
LABEL_6:
  v13[0] = 0;
  v6 = sub_1C49D52C0(v4, &v15, v13);
  v7 = v13[0];
  if ((v6 & 1) == 0)
  {
    v7 = sub_1C49D535C((uint64_t)v4, (uint64_t)&v15, &v15, v13[0]);
    *v7 = v15;
    *((_BYTE *)v7 + 8) = 0;
  }
  result = 1;
  *((_BYTE *)v7 + 8) = 1;
  return result;
}

uint64_t sub_1C49D5230@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C49D52C0((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C49D535C(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_BYTE *)(result + 8) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_1C49D52C0(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v9 = v7;
        v13 = v6 + v10++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_7;
      }
      result = 0;
      if (v9)
        v7 = v9;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C49D535C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C49D540C(a1, v7);
  v9 = 0;
  sub_1C49D52C0((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C49D540C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C614E2E4(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C49D54C4(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int *a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  _BOOL8 v18;
  uint64_t v19;

  v6 = *(_QWORD *)(a1 + 8);
  if (**(_WORD **)(v6 + 16) != 19)
    goto LABEL_14;
  v8 = *(unsigned int *)(a1 + 4);
  v9 = (uint64_t *)((v8 & 0x80000000) != 0
                 ? *(_QWORD *)(a2 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8
                 : *(_QWORD *)(a2 + 272) + 8 * v8);
  v10 = *v9;
  if (!v10)
    goto LABEL_14;
  while ((*(_BYTE *)(v10 + 3) & 1) != 0)
  {
    v10 = *(_QWORD *)(v10 + 24);
    if (!v10)
      goto LABEL_14;
  }
  while (1)
  {
    v10 = *(_QWORD *)(v10 + 24);
    if (!v10)
      break;
    if ((*(_BYTE *)(v10 + 3) & 1) == 0)
      goto LABEL_14;
  }
  v11 = *(_DWORD *)(*(_QWORD *)(v6 + 32) + 4);
  if ((v11 & 0x80000000) == 0
    || (v12 = v8 & 0x7FFFFFFF,
        v13 = *(_QWORD *)(a2 + 24),
        (__int16 ***)(*(_QWORD *)(v13 + 16 * v12) & 0xFFFFFFFFFFFFFFF8) != &off_1E7FADAE8)
    || (v14 = v11 & 0x7FFFFFFF, (__int16 ***)(*(_QWORD *)(v13 + 16 * v14) & 0xFFFFFFFFFFFFFFF8) != &off_1E7FB1568))
  {
LABEL_14:
    if (sub_1C49C8528(a1))
    {
      v15 = sub_1C477672C((uint64_t)a4, v6);
      v16 = *((_QWORD *)a4 + 1);
      if (v16 == *(_QWORD *)a4)
        v17 = a4 + 5;
      else
        v17 = a4 + 4;
      if (v15 == (_QWORD *)(v16 + 8 * *v17))
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, v6);
        ++*a3;
      }
      return 1;
    }
    return 0;
  }
  v19 = *(_QWORD *)(v13 + 16 * v14 + 8);
  if (!v19)
    return 1;
  while ((*(_BYTE *)(v19 + 3) & 1) != 0)
  {
    v19 = *(_QWORD *)(v19 + 24);
    if (!v19)
      return 1;
  }
  if (!sub_1C49D54C4(v19, a2, a3, a4))
    return 0;
  do
  {
    v19 = *(_QWORD *)(v19 + 24);
    v18 = v19 == 0;
  }
  while (v19 && ((*(_BYTE *)(v19 + 3) & 1) != 0 || (sub_1C49D54C4(v19, a2, a3, a4) & 1) != 0));
  return v18;
}

uint64_t sub_1C49D5678(uint64_t result, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  _BOOL4 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = *(_QWORD *)(result + 8);
  if (**(_WORD **)(v5 + 16) == 19
    && ((v6 = *(unsigned int *)(result + 4), (v6 & 0x80000000) != 0)
      ? (v7 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8))
      : (v7 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v6)),
        (v8 = *v7) != 0))
  {
    while ((*(_BYTE *)(v8 + 3) & 1) != 0)
    {
      v8 = *(_QWORD *)(v8 + 24);
      if (!v8)
        goto LABEL_8;
    }
    while (1)
    {
      v8 = *(_QWORD *)(v8 + 24);
      if (!v8)
        break;
      if ((*(_BYTE *)(v8 + 3) & 1) == 0)
        goto LABEL_8;
    }
    v24 = v6 & 0x7FFFFFFF;
    v25 = *(_QWORD *)(a2 + 24);
    if ((__int16 ***)(*(_QWORD *)(v25 + 16 * v24) & 0xFFFFFFFFFFFFFFF8) == &off_1E7FADAE8)
    {
      v26 = *(unsigned int *)(*(_QWORD *)(v5 + 32) + 4);
      if ((__int16 ***)(*(_QWORD *)(v25 + 16 * (v26 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == &off_1E7FB1568)
      {
        if ((v26 & 0x80000000) != 0)
          v27 = (uint64_t *)(v25 + 16 * (v26 & 0x7FFFFFFF) + 8);
        else
          v27 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v26);
        v28 = *v27;
        if (*v27)
        {
          while ((*(_BYTE *)(v28 + 3) & 1) != 0)
          {
            v28 = *(_QWORD *)(v28 + 24);
            if (!v28)
              goto LABEL_48;
          }
          v29 = v28;
          while (1)
          {
            v29 = *(_QWORD *)(v29 + 24);
            if (!v29)
              break;
            if ((*(_BYTE *)(v29 + 3) & 1) == 0)
              sub_1C49D5678();
          }
          sub_1C49D5678();
        }
LABEL_48:
        v30 = v5;
        if ((*(_BYTE *)v5 & 4) == 0)
        {
          v30 = v5;
          if ((*(_WORD *)(v5 + 44) & 8) != 0)
          {
            v30 = v5;
            do
              v30 = *(_QWORD *)(v30 + 8);
            while ((*(_WORD *)(v30 + 44) & 8) != 0);
          }
        }
        return sub_1C487FE80(*(_QWORD *)(v5 + 24) + 40, v5, *(_QWORD *)(v30 + 8));
      }
    }
  }
  else
  {
LABEL_8:
    v9 = *(_DWORD *)result;
    v11 = a4 == 1 || (*(_DWORD *)result & 0xFFF00) == 512;
    v12 = v11 | (2 * a3);
    if (!*(_DWORD *)result)
    {
      if (v5)
      {
        v13 = *(_QWORD *)(result + 16);
        if (v13)
        {
          v14 = *(_QWORD *)(v5 + 24);
          if (v14)
          {
            v15 = *(_QWORD *)(v14 + 32);
            if (v15)
            {
              v16 = *(_QWORD *)(v15 + 40);
              v17 = *(unsigned int *)(result + 4);
              if ((v17 & 0x80000000) != 0)
                v18 = (uint64_t *)(*(_QWORD *)(v16 + 24) + 16 * (v17 & 0x7FFFFFFF) + 8);
              else
                v18 = (uint64_t *)(*(_QWORD *)(v16 + 272) + 8 * v17);
              v19 = *v18;
              v20 = *(_QWORD *)(result + 24);
              if (*v18 != result)
                v18 = (uint64_t *)(v13 + 24);
              *v18 = v20;
              if (v20)
                v21 = v20;
              else
                v21 = v19;
              *(_QWORD *)(v21 + 16) = v13;
              *(_QWORD *)(result + 16) = 0;
              *(_QWORD *)(result + 24) = 0;
              v9 = *(_DWORD *)result;
            }
          }
        }
      }
    }
    *(_DWORD *)(result + 16) = 64;
    *(_DWORD *)(result + 24) = 0;
    v22 = v9 & 0xFFF00000;
    if (a5)
      v23 = 519;
    else
      v23 = 263;
    *(_DWORD *)result = v23 | v22;
    *(_DWORD *)(result + 4) = v12;
  }
  return result;
}

uint64_t sub_1C49D58E4(uint64_t a1, unsigned int a2, uint64_t a3, int a4, int a5)
{
  uint64_t result;
  uint64_t v9;
  int v10;
  unsigned int v11;
  __int128 v12;
  char v13;

  result = llvm::MachineRegisterInfo::getUniqueVRegDef(a3, a2);
  if (!result)
    goto LABEL_20;
  if (**(unsigned __int16 **)(result + 16) != a4)
    goto LABEL_20;
  v9 = *(_QWORD *)(result + 32);
  if (*(_QWORD *)(v9 + 48) || *(_DWORD *)(v9 + 64) != 7 || *(_DWORD *)(v9 + 80) != 64)
    goto LABEL_20;
  v10 = 0;
  v11 = (*(_DWORD *)(v9 + 64) >> 8) & 0xFFF;
  if (v11 > 2)
  {
    if (v11 == 3)
    {
      v10 = 8;
      goto LABEL_16;
    }
    if (v11 != 15)
    {
      if (v11 != 14)
        goto LABEL_16;
      goto LABEL_14;
    }
LABEL_13:
    v10 = 4;
    goto LABEL_16;
  }
  if (v11 == 1)
  {
LABEL_14:
    v10 = 2;
    goto LABEL_16;
  }
  if (v11 == 2)
    goto LABEL_13;
LABEL_16:
  if (v10 != a5 || a5 == 2 && (*(_BYTE *)(v9 + 68) & 1) != 0)
  {
LABEL_20:
    v13 = 0;
    *(_BYTE *)a1 = 0;
    goto LABEL_21;
  }
  v12 = *(_OWORD *)(v9 + 80);
  *(_OWORD *)a1 = *(_OWORD *)(v9 + 64);
  *(_OWORD *)(a1 + 16) = v12;
  v13 = 1;
LABEL_21:
  *(_BYTE *)(a1 + 32) = v13;
  return result;
}

void sub_1C49D59E0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)a1 = &off_1E7FA9328;
  free(*(void **)(a1 + 416));
  v2 = *(void **)(a1 + 272);
  if (v2 != (void *)(a1 + 288))
    free(v2);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v3 = *(void **)(a1 + 176);
  if (v3 != (void *)(a1 + 192))
    free(v3);
  v4 = *(void **)(a1 + 104);
  if (v4 != (void *)(a1 + 120))
    free(v4);
  v5 = *(void **)(a1 + 32);
  if (v5 != (void *)(a1 + 48))
    free(v5);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C49D5A80(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)a1 = &off_1E7FA9328;
  free(*(void **)(a1 + 416));
  v2 = *(void **)(a1 + 272);
  if (v2 != (void *)(a1 + 288))
    free(v2);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v3 = *(void **)(a1 + 176);
  if (v3 != (void *)(a1 + 192))
    free(v3);
  v4 = *(void **)(a1 + 104);
  if (v4 != (void *)(a1 + 120))
    free(v4);
  v5 = *(void **)(a1 + 32);
  if (v5 != (void *)(a1 + 48))
    free(v5);
  llvm::Pass::~Pass((llvm::Pass *)a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C49D5B34()
{
  return "AGX3 constant merger pass";
}

void sub_1C49D5B44(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C49D5B68(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  unsigned __int16 *v28;
  unsigned int v29;
  BOOL v30;
  int v31;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  int IncompleteVirtualRegister;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 **v48;
  uint64_t v49;
  llvm::MachineFunction *v50;
  unsigned __int8 *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  __int16 v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE **v79;
  _BYTE **v80;
  _BYTE *v81;
  _BYTE *v82;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  char v92;
  unsigned __int8 *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD v102[10];

  v3 = a1;
  v102[8] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 248) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(v3 + 256) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(v3 + 264) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(v3 + 280) = 0;
  if ((*(_DWORD *)(v3 + 424) - 512) >= 0x604)
  {
    free(*(void **)(v3 + 416));
    v4 = malloc_type_calloc(0x200uLL, 2uLL, 0x6D9A4F0CuLL);
    if (!v4)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    *(_QWORD *)(v3 + 416) = v4;
    *(_DWORD *)(v3 + 424) = 512;
  }
  v5 = *(_QWORD *)(a2 + 328);
  v84 = a2 + 320;
  if (v5 == a2 + 320)
  {
    LOBYTE(v6) = 0;
    return v6 & 1;
  }
  v6 = 0;
  v7 = &v96;
  v90 = v3;
  do
  {
    v100 = v102;
    v101 = 0x800000000;
    v98 = 0;
    v99 = 0;
    v8 = v5 + 48;
    v9 = *(_QWORD *)(v5 + 56);
    if (v9 == v5 + 48)
    {
      v11 = 0;
      goto LABEL_134;
    }
    v85 = v5;
    v86 = v6;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v87 = v8;
    do
    {
      if (!v9 || (v14 = v9, (*(_BYTE *)v9 & 4) == 0))
      {
        v14 = v9;
        if ((*(_WORD *)(v9 + 44) & 8) != 0)
        {
          v14 = v9;
          do
            v14 = *(_QWORD *)(v14 + 8);
          while ((*(_WORD *)(v14 + 44) & 8) != 0);
        }
      }
      v15 = *(_QWORD *)(v14 + 8);
      v16 = **(unsigned __int16 **)(v9 + 16);
      if (v16 != 518 && v16 != 5626 && v16 != 5623)
      {
LABEL_49:
        v24 = v12;
        goto LABEL_120;
      }
      v19 = *(_QWORD **)(v3 + 264);
      v20 = *(_QWORD *)(v9 + 32);
      v21 = *(unsigned int *)(v20 + 4);
      if ((v21 & 0x80000000) != 0)
        v22 = (uint64_t *)(v19[3] + 16 * (v21 & 0x7FFFFFFF) + 8);
      else
        v22 = (uint64_t *)(v19[34] + 8 * v21);
      v23 = *v22;
      if (*v22)
      {
        while ((*(_BYTE *)(v23 + 3) & 1) != 0)
        {
          v23 = *(_QWORD *)(v23 + 24);
          if (!v23)
            goto LABEL_27;
        }
        v26 = v19[3];
        v24 = (*(_QWORD *)(v26 + 16 * (*(_DWORD *)(v23 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == (_QWORD)&off_1E7FAD990;
        if (v13)
          v27 = (*(_QWORD *)(v26 + 16 * (*(_DWORD *)(v23 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == (_QWORD)&off_1E7FAD990;
        else
          v27 = 0;
        if ((v27 & v12 & 1) != 0)
        {
LABEL_35:
          v24 = 1;
          goto LABEL_120;
        }
LABEL_36:
        v28 = *(unsigned __int16 **)(*(_QWORD *)(v23 + 8) + 16);
        if ((v28[8] & 2) != 0)
          goto LABEL_49;
        v29 = *v28;
        v30 = v29 > 0x13;
        v31 = (1 << v29) & 0xC0200;
        if (!v30 && v31 != 0)
          goto LABEL_49;
        while (1)
        {
          v23 = *(_QWORD *)(v23 + 24);
          if (!v23)
            break;
          if ((*(_BYTE *)(v23 + 3) & 1) == 0)
          {
            if (v13)
              v33 = (*(_QWORD *)(v26 + 16 * (*(_DWORD *)(v23 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == (_QWORD)&off_1E7FAD990;
            else
              v33 = 0;
            v24 = ((*(_QWORD *)(v26 + 16 * (*(_DWORD *)(v23 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == (_QWORD)&off_1E7FAD990) | v24;
            if ((v33 & v12 & 1) == 0)
              goto LABEL_36;
            goto LABEL_35;
          }
        }
      }
      else
      {
LABEL_27:
        v24 = 0;
      }
      if (v13)
      {
        v99 = v9;
        v97 = 0x200000001;
        if (**(_WORD **)(v13 + 16) == 518)
          v25 = 0;
        else
          v25 = *(unsigned __int16 *)(*(_QWORD *)(v13 + 32) + 80);
        if (v16 == 518)
          v34 = 0;
        else
          v34 = *(unsigned __int16 *)(v20 + 80);
        v88 = v9;
        v89 = v15;
        if ((v24 & 1) != 0)
        {
          v97 = 0x100000002;
          v35 = v25;
        }
        else
        {
          v35 = v34;
          v34 = v25;
        }
        IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)v19, "", 0);
        *(_QWORD *)(v19[3] + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7FB1568;
        v37 = v19[1];
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37);
        v38 = v34 | (v35 << 16);
        v39 = 1;
        sub_1C49D63F4(*(_QWORD *)(v3 + 248), *(_QWORD *)(v13 + 24), (unint64_t *)v13, v38, IncompleteVirtualRegister, 0, 1, (unsigned __int8 **)(v13 + 56), 0);
        v40 = 0;
        v91 = IncompleteVirtualRegister;
        do
        {
          v41 = v7;
          v92 = v39;
          v42 = *(&v98 + v40);
          v43 = *(unsigned int *)(*(_QWORD *)(v42 + 32) + 4);
          v44 = *(_QWORD *)(v3 + 264);
          v45 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v44, "", 0);
          *(_QWORD *)(*(_QWORD *)(v44 + 24) + 16 * (v45 & 0x7FFFFFFF)) = &off_1E7FB1B88;
          v46 = *(_QWORD *)(v44 + 8);
          if (v46)
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 24))(v46, v45);
          v47 = *(_QWORD *)(v42 + 24);
          v48 = (unsigned __int8 **)(v42 + 56);
          v49 = *(_QWORD *)(*(_QWORD *)(v3 + 248) + 8) + 912;
          if ((*(_WORD *)(v42 + 44) & 4) != 0)
          {
            v50 = sub_1C612596C(*(_QWORD *)(v42 + 24), v42, v48, *(_QWORD *)(*(_QWORD *)(v3 + 248) + 8) + 912, v45);
            v52 = v75;
            v7 = v41;
            v56 = v91;
          }
          else
          {
            v50 = *(llvm::MachineFunction **)(v47 + 32);
            v51 = *v48;
            v93 = v51;
            if (v51)
              llvm::MetadataTracking::track((uint64_t)&v93, v51, 2);
            v52 = *((_QWORD *)v50 + 28);
            if (v52)
              *((_QWORD *)v50 + 28) = *(_QWORD *)v52;
            else
              v52 = sub_1C484358C((uint64_t)v50 + 128, 72, 3);
            v94 = v93;
            if (v93)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v93, v93, (uint64_t)&v94);
              v93 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v52, v50, v49, (unsigned __int8 **)&v94, 0);
            if (v94)
              llvm::MetadataTracking::untrack((uint64_t)&v94, (unsigned __int8 *)v94);
            if (v93)
              llvm::MetadataTracking::untrack((uint64_t)&v93, v93);
            v53 = *(_QWORD *)(v47 + 40);
            *(_QWORD *)(v52 + 24) = v53;
            v54 = *(_QWORD *)(v53 + 32);
            v55 = *(unsigned int *)(v52 + 40);
            v7 = v41;
            v56 = v91;
            if ((_DWORD)v55)
            {
              v68 = *(_QWORD *)(v52 + 32);
              v69 = *(_QWORD *)(v54 + 40);
              v70 = 32 * v55;
              do
              {
                if (!*(_BYTE *)v68)
                {
                  v71 = *(unsigned int *)(v68 + 4);
                  if ((int)v71 >= 0)
                    v72 = (uint64_t *)(*(_QWORD *)(v69 + 272) + 8 * v71);
                  else
                    v72 = (uint64_t *)(*(_QWORD *)(v69 + 24) + 16 * (v71 & 0x7FFFFFFF) + 8);
                  v73 = *v72;
                  if (*v72)
                  {
                    v74 = *(_QWORD *)(v73 + 16);
                    *(_QWORD *)(v73 + 16) = v68;
                    *(_QWORD *)(v68 + 16) = v74;
                    if ((*(_BYTE *)(v68 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v68 + 24) = v73;
                    }
                    else
                    {
                      *(_QWORD *)(v68 + 24) = 0;
                      v72 = (uint64_t *)(v74 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v68 + 16) = v68;
                    *(_QWORD *)(v68 + 24) = 0;
                  }
                  *v72 = v68;
                }
                v68 += 32;
                v70 -= 32;
              }
              while (v70);
            }
            v57 = *(_QWORD *)(v54 + 728);
            if (v57)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v57 + 24))(v57, v52);
            v58 = *(_QWORD *)v42 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v52 = v58 | *(_QWORD *)v52 & 7;
            *(_QWORD *)(v52 + 8) = v42;
            *(_QWORD *)(v58 + 8) = v52;
            *(_QWORD *)v42 = *(_QWORD *)v42 & 7 | v52;
            v95 = 0;
            *v7 = 0;
            v7[1] = 0;
            LODWORD(v94) = 0x1000000;
            HIDWORD(v94) = v45;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v52, v50, (const llvm::MachineOperand *)&v94);
          }
          v59 = *((_DWORD *)&v97 + v40);
          v95 = 0;
          *v7 = 0;
          v7[1] = 0;
          LODWORD(v94) = (v59 & 0xFFF) << 8;
          HIDWORD(v94) = v56;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v52, v50, (const llvm::MachineOperand *)&v94);
          v94 = v7;
          v95 = 0x800000000;
          v3 = v90;
          v60 = *(_QWORD *)(v90 + 264);
          if ((v43 & 0x80000000) != 0)
            v61 = (uint64_t *)(*(_QWORD *)(v60 + 24) + 16 * (v43 & 0x7FFFFFFF) + 8);
          else
            v61 = (uint64_t *)(*(_QWORD *)(v60 + 272) + 8 * v43);
          v62 = *v61;
          if (*v61)
          {
            while ((*(_BYTE *)(v62 + 3) & 1) != 0)
            {
              v62 = *(_QWORD *)(v62 + 24);
              if (!v62)
                goto LABEL_99;
            }
            LODWORD(v63) = 0;
            v64 = 8;
LABEL_87:
            if (v63 >= v64)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, (uint64_t)v7, v63 + 1, 8);
              LODWORD(v63) = v95;
            }
            *((_QWORD *)v94 + v63) = v62;
            v63 = (v95 + 1);
            LODWORD(v95) = v95 + 1;
            while (1)
            {
              v62 = *(_QWORD *)(v62 + 24);
              if (!v62)
                break;
              if ((*(_BYTE *)(v62 + 3) & 1) == 0)
              {
                v64 = HIDWORD(v95);
                goto LABEL_87;
              }
            }
            v65 = (uint64_t *)v94;
            if ((_DWORD)v63)
            {
              v66 = 8 * v63;
              do
              {
                v67 = *v65++;
                llvm::MachineOperand::setReg(v67, v45);
                v66 -= 8;
              }
              while (v66);
              v65 = (uint64_t *)v94;
            }
            if (v65 != v7)
              free(v65);
          }
LABEL_99:
          v39 = 0;
          v40 = 1;
        }
        while ((v92 & 1) != 0);
        v76 = v101;
        v77 = v88;
        v15 = v89;
        if (v101 >= (unint64_t)HIDWORD(v101))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, (uint64_t)v102, v101 + 1, 8);
          v77 = v88;
          v15 = v89;
          v76 = v101;
        }
        v8 = v87;
        v100[v76] = v13;
        v78 = (v101 + 1);
        LODWORD(v101) = v78;
        if (v78 >= HIDWORD(v101))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, (uint64_t)v102, v78 + 1, 8);
          v77 = v88;
          v15 = v89;
          LODWORD(v78) = v101;
        }
        v13 = 0;
        v24 = 0;
        v100[v78] = v77;
        v10 = v101 + 1;
        LODWORD(v101) = v101 + 1;
        v98 = 0;
        v99 = 0;
        v11 = 1;
      }
      else
      {
        v98 = v9;
        v13 = v9;
      }
LABEL_120:
      v12 = v24;
      v9 = v15;
    }
    while (v15 != v8);
    v79 = (_BYTE **)v100;
    if (v10)
    {
      v80 = (_BYTE **)&v100[v10];
      do
      {
        v81 = *v79;
        v82 = *v79;
        if ((**v79 & 4) == 0)
        {
          v82 = *v79;
          if ((*((_WORD *)v81 + 22) & 8) != 0)
          {
            v82 = *v79;
            do
              v82 = (_BYTE *)*((_QWORD *)v82 + 1);
            while ((*((_WORD *)v82 + 22) & 8) != 0);
          }
        }
        sub_1C487FE80(*((_QWORD *)v81 + 3) + 40, (uint64_t)v81, *((_QWORD *)v82 + 1));
        ++v79;
      }
      while (v79 != v80);
      v79 = (_BYTE **)v100;
    }
    if (v79 != v102)
      free(v79);
    v6 = v86;
    v5 = v85;
LABEL_134:
    v6 |= v11;
    v5 = *(_QWORD *)(v5 + 8);
  }
  while (v5 != v84);
  return v6 & 1;
}

unint64_t sub_1C49D63F4(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, int a5, int a6, int a7, unsigned __int8 **a8, uint64_t a9)
{
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  llvm::MachineFunction *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (a6)
    v13 = 5626;
  else
    v13 = 5625;
  if (a6)
    v14 = 5623;
  else
    v14 = 5622;
  if (a7)
    v13 = v14;
  if (a6)
    v15 = 518;
  else
    v15 = 517;
  if (a4)
    v16 = v13;
  else
    v16 = v15;
  v17 = *(_QWORD *)(a1 + 8);
  v18 = *(llvm::MachineFunction **)(a2 + 32);
  v19 = *a8;
  v35 = v19;
  if (v19)
    llvm::MetadataTracking::track((uint64_t)&v35, v19, 2);
  v20 = v17 + 48 * v16;
  v21 = *((_QWORD *)v18 + 28);
  if (v21)
    *((_QWORD *)v18 + 28) = *(_QWORD *)v21;
  else
    v21 = sub_1C484358C((uint64_t)v18 + 128, 72, 3);
  v36 = v35;
  if (v35)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v35, v35, (uint64_t)&v36);
    v35 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v21, v18, v20, &v36, 0);
  if (v36)
    llvm::MetadataTracking::untrack((uint64_t)&v36, v36);
  if (v35)
    llvm::MetadataTracking::untrack((uint64_t)&v35, v35);
  v22 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v21 + 24) = v22;
  v23 = *(_QWORD *)(v22 + 32);
  v24 = *(unsigned int *)(v21 + 40);
  if ((_DWORD)v24)
  {
    v28 = *(_QWORD *)(v21 + 32);
    v29 = *(_QWORD *)(v23 + 40);
    v30 = 32 * v24;
    do
    {
      if (!*(_BYTE *)v28)
      {
        v31 = *(unsigned int *)(v28 + 4);
        if ((int)v31 >= 0)
          v32 = (uint64_t *)(*(_QWORD *)(v29 + 272) + 8 * v31);
        else
          v32 = (uint64_t *)(*(_QWORD *)(v29 + 24) + 16 * (v31 & 0x7FFFFFFF) + 8);
        v33 = *v32;
        if (*v32)
        {
          v34 = *(_QWORD *)(v33 + 16);
          *(_QWORD *)(v33 + 16) = v28;
          *(_QWORD *)(v28 + 16) = v34;
          if ((*(_BYTE *)(v28 + 3) & 1) != 0)
          {
            *(_QWORD *)(v28 + 24) = v33;
          }
          else
          {
            *(_QWORD *)(v28 + 24) = 0;
            v32 = (uint64_t *)(v34 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v28 + 16) = v28;
          *(_QWORD *)(v28 + 24) = 0;
        }
        *v32 = v28;
      }
      v28 += 32;
      v30 -= 32;
    }
    while (v30);
  }
  v25 = *(_QWORD *)(v23 + 728);
  if (v25)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v25 + 24))(v25, v21);
  v26 = *a3 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v21 = v26 | *(_QWORD *)v21 & 7;
  *(_QWORD *)(v21 + 8) = a3;
  *(_QWORD *)(v26 + 8) = v21;
  *a3 = *a3 & 7 | v21;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  LODWORD(v36) = 0x1000000;
  HIDWORD(v36) = a5;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v21, v18, (const llvm::MachineOperand *)&v36);
  LODWORD(v36) = 1;
  v37 = 0;
  v38 = a9;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v21, v18, (const llvm::MachineOperand *)&v36);
  if (v16 - 519 <= 0xFFFFFFFD)
  {
    LODWORD(v36) = 1;
    v37 = 0;
    v38 = a4;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v21, v18, (const llvm::MachineOperand *)&v36);
  }
  return v21;
}

uint64_t sub_1C49D665C(uint64_t a1, uint64_t a2)
{
  llvm::SmallPtrSetImplBase *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (llvm::SmallPtrSetImplBase *)(a1 + 280);
  result = (uint64_t)sub_1C477672C(a1 + 280, a2);
  v6 = *(_QWORD *)(a1 + 288);
  v7 = 296;
  if (v6 == *(_QWORD *)(a1 + 280))
    v7 = 300;
  if (result == v6 + 8 * *(unsigned int *)(a1 + v7))
  {
    sub_1C4774094(v4, a2);
    result = **(unsigned __int16 **)(a2 + 16);
    if ((_DWORD)result != 623)
    {
      result = sub_1C4C2FD5C(result);
      v8 = *(_QWORD *)(a2 + 32) + 32 * result;
      *(_QWORD *)(v8 + 16) |= 0x40uLL;
    }
  }
  return result;
}

uint64_t sub_1C49D66F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE v10[8];
  uint64_t v11;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = 8;
  while (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 16) + 378))
  {
    v10[0] = 0;
    v11 = v1;
    sub_1C4AD7260((uint64_t)v10);
    v4 = v11;
    v5 = v10[0] || v11 == 0;
    if (v5 || !sub_1C4AD7184(v11))
      break;
    v6 = *(_QWORD *)(v1 + 24);
    v2 = *(_QWORD *)(v4 + 24);
    if (v6 == v2)
      return v4;
    if (**(_WORD **)(v1 + 16) == 544)
    {
      v8 = v6 + 88;
      v7 = *(_QWORD **)(v6 + 88);
      if (((*(_QWORD *)(v8 + 8) - (_QWORD)v7) & 0x7FFFFFFF8) == 8 && *v7 == v2)
      {
        v1 = v4;
        if (--v3)
          continue;
      }
    }
    return v1;
  }
  return v1;
}

uint64_t sub_1C49D67BC(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned int v8;
  uint64_t result;
  void **v11;
  void *v12;
  uint64_t v13;
  void **v14;
  void *v15;
  uint64_t v16;
  void **v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t i;
  unsigned int v30;
  unsigned int v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unsigned __int16 *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v40;
  unint64_t v41;
  int v42;
  __int16 v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  int v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  unint64_t v70;
  __int16 v71;
  unint64_t v72;
  unint64_t v73;
  unsigned int v74;
  int v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  int v82;
  int v83;
  unsigned int v84;
  unint64_t v85;
  unsigned int v86;
  _QWORD *v87;
  _QWORD *v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  int v98;
  unsigned int v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v112;
  _BOOL4 v113;
  int v114;
  int v115;
  uint64_t v116;
  unint64_t *v117;
  llvm::MachineFunction *v118;
  llvm::MachineInstr *v119;
  llvm::MachineInstr *v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  unint64_t v124;
  __n128 v125;
  unsigned __int8 *v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  void *v130[2];
  void *v131[2];
  __int128 v132;
  void *__p[2];
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int16 *)(*(_QWORD *)a2 + 18);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  v7 = *(void **)(a1 + 288);
  if (v7 != *(void **)(a1 + 280))
  {
    v24 = *(unsigned int *)(a1 + 296);
    if (v24 >= 0x21 && 4 * (*(_DWORD *)(a1 + 300) - *(_DWORD *)(a1 + 304)) < v24)
    {
      free(v7);
      v97 = *(_DWORD *)(a1 + 300) - *(_DWORD *)(a1 + 304);
      v98 = 1 << (33 - __clz(v97 - 1));
      if (v97 <= 0x10)
        v99 = 32;
      else
        v99 = v98;
      *(_DWORD *)(a1 + 296) = v99;
      *(_QWORD *)(a1 + 300) = 0;
      v100 = malloc_type_malloc(8 * v99, 0x4065EBACuLL);
      if (!v100)
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      *(_QWORD *)(a1 + 288) = v100;
      memset(v100, 255, 8 * *(unsigned int *)(a1 + 296));
      goto LABEL_3;
    }
    memset(v7, 255, 8 * v24);
  }
  *(_QWORD *)(a1 + 300) = 0;
LABEL_3:
  v8 = ((v4 >> 4) & 0x3FF) - 101;
  if (v8 > 3 || v8 == 1)
    return 0;
  if (*(_BYTE *)(v5 + 321))
  {
    v116 = *(_QWORD *)(a2 + 328);
    v117 = *(unint64_t **)(v116 + 56);
    v126 = 0;
    v118 = sub_1C4787570(v116, v117, &v126, *(_QWORD *)(v6 + 8) + 47760, 391);
    v120 = v119;
    LODWORD(v136) = 1;
    v137 = 0;
    v138 = 0;
    llvm::MachineInstr::addOperand(v119, v118, (const llvm::MachineOperand *)&v136);
    LODWORD(v136) = 1;
    v137 = 0;
    v138 = 0;
    llvm::MachineInstr::addOperand(v120, v118, (const llvm::MachineOperand *)&v136);
    LODWORD(v136) = 1;
    v137 = 0;
    v138 = 0;
    llvm::MachineInstr::addOperand(v120, v118, (const llvm::MachineOperand *)&v136);
    if (v126)
      llvm::MetadataTracking::untrack((uint64_t)&v126, v126);
    sub_1C49D665C(a1, (uint64_t)v120);
    return 1;
  }
  if (!*(_BYTE *)(v5 + 284))
    return 0;
  v11 = **(void ****)(a1 + 8);
  do
  {
    v12 = *v11;
    v11 += 2;
  }
  while (v12 != &llvm::SlotIndexes::ID);
  v13 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), &llvm::SlotIndexes::ID);
  v14 = **(void ****)(a1 + 8);
  do
  {
    v15 = *v14;
    v14 += 2;
  }
  while (v15 != &llvm::MachineDominatorTree::ID);
  v16 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v14 - 1) + 96))(*(v14 - 1), &llvm::MachineDominatorTree::ID);
  v17 = **(void ****)(a1 + 8);
  do
  {
    v18 = *v17;
    v17 += 2;
  }
  while (v18 != &llvm::MachinePostDominatorTree::ID);
  v19 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v17 - 1) + 96))(*(v17 - 1), &llvm::MachinePostDominatorTree::ID);
  v20 = *(_QWORD **)(a2 + 320);
  if (((v20[12] - v20[11]) & 0x7FFFFFFF8) != 0)
    return 0;
  v21 = v20[6] & 0xFFFFFFFFFFFFFFF8;
  if (v20 + 6 == (_QWORD *)v21)
    return 0;
  if (!v21 || (*(_BYTE *)v21 & 4) == 0)
  {
    while ((*(_WORD *)(v21 + 44) & 4) != 0)
      v21 = *(_QWORD *)v21 & 0xFFFFFFFFFFFFFFF8;
  }
  if (**(_WORD **)(v21 + 16) != 623)
    return 0;
  v22 = (unint64_t *)(v13 + 344);
  v23 = *(_QWORD *)(v13 + 352) & 0xFFFFFFFFFFFFFFF8;
  while (1)
  {
    v23 = *(_QWORD *)(v23 + 8);
    if ((unint64_t *)v23 == v22)
      break;
    if (*(_QWORD *)(v23 + 16))
      goto LABEL_34;
  }
  v23 = *v22;
LABEL_34:
  v121 = v19;
  v122 = v16;
  v124 = v23 & 0xFFFFFFFFFFFFFFF9;
  v25 = *(_QWORD *)(a2 + 328);
  LODWORD(v126) = 0;
  v127 = 0;
  v128 = 0;
  v129 = 0;
  *(_OWORD *)v130 = 0u;
  *(_OWORD *)v131 = 0u;
  v132 = 0u;
  *(_OWORD *)__p = 0u;
  v134 = 0;
  sub_1C49D746C((int *)&v126, v25);
  sub_1C49D7680((int *)&v126);
  v28 = (uint64_t *)v131[1];
  v27 = (uint64_t *)v132;
  if (v131[1] == (void *)v132)
    goto LABEL_156;
  v123 = (_QWORD *)(v13 + 344);
  v26 = (__n128)vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v125 = v26;
  do
  {
    v136 = 1;
    for (i = 8; i != 264; i += 16)
      *(__n128 *)((char *)&v136 + i) = v26;
    if (v28 == v27)
    {
LABEL_143:
      v42 = 1;
      goto LABEL_144;
    }
    do
    {
      v135 = 0;
      if ((sub_1C49D7C44((uint64_t)&v136, *v28, &v135) & 1) != 0)
        goto LABEL_48;
      v30 = v136 >> 1;
      if ((v136 & 1) != 0)
        v31 = 32;
      else
        v31 = v138;
      if (4 * v30 + 4 >= 3 * v31)
      {
        v31 *= 2;
LABEL_154:
        sub_1C49D7CE8((uint64_t)&v136, v31);
        v135 = 0;
        sub_1C49D7C44((uint64_t)&v136, *v28, &v135);
        goto LABEL_45;
      }
      if (v31 + ~v30 - HIDWORD(v136) <= v31 >> 3)
        goto LABEL_154;
LABEL_45:
      LODWORD(v136) = v136 + 2;
      if (*v135 != -4096)
        --HIDWORD(v136);
      *v135 = *v28;
LABEL_48:
      ++v28;
    }
    while (v28 != v27);
    v32 = v131[1];
    v33 = (_QWORD *)v132;
    if (v131[1] == (void *)v132)
      goto LABEL_143;
    while (2)
    {
      v34 = (_QWORD *)(*v32 + 48);
      v35 = *v34 & 0xFFFFFFFFFFFFFFF8;
      if (!v35 || (*(_BYTE *)v35 & 4) == 0)
      {
        while ((*(_WORD *)(v35 + 44) & 4) != 0)
          v35 = *(_QWORD *)v35 & 0xFFFFFFFFFFFFFFF8;
      }
LABEL_55:
      if ((_QWORD *)v35 == v34)
      {
        ++v32;
        v42 = 1;
        if (v32 == v33)
          goto LABEL_144;
        continue;
      }
      break;
    }
    v36 = *(unsigned __int16 **)(v35 + 16);
    v37 = *((_QWORD *)v36 + 2);
    if ((v37 & 2) != 0)
    {
      if (sub_1C4A16F80((_QWORD *)v35))
        goto LABEL_81;
      v36 = *(unsigned __int16 **)(v35 + 16);
    }
    else if ((v37 & 0x80) != 0 || (byte_1C6613CF9[*v36] & 1) != 0)
    {
LABEL_81:
      v43 = *(_WORD *)(v35 + 44);
      v44 = v35;
      if ((v43 & 4) != 0)
      {
        do
          v44 = *(_QWORD *)v44 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v44 + 44) & 4) != 0);
      }
      if ((v43 & 8) != 0)
      {
        do
          v35 = *(_QWORD *)(v35 + 8);
        while ((*(_WORD *)(v35 + 44) & 8) != 0);
      }
      v45 = *(_QWORD *)(v35 + 8);
      if (v44 != v45)
      {
        while (1)
        {
          v46 = **(unsigned __int16 **)(v44 + 16);
          v47 = v46 > 0x17;
          v48 = (1 << v46) & 0x83E000;
          if (v47 || v48 == 0)
            break;
          v44 = *(_QWORD *)(v44 + 8);
          if (v44 == v45)
          {
            v44 = *(_QWORD *)(v35 + 8);
            break;
          }
        }
      }
      v50 = *(_QWORD *)(v13 + 368);
      v51 = *(unsigned int *)(v13 + 384);
      if ((_DWORD)v51)
      {
        LODWORD(v52) = ((v44 >> 4) ^ (v44 >> 9)) & (v51 - 1);
        v53 = (uint64_t *)(v50 + 16 * v52);
        v54 = *v53;
        if (v44 == *v53)
        {
LABEL_91:
          v55 = v53[1];
          goto LABEL_92;
        }
        v89 = 1;
        while (v54 != -4096)
        {
          v90 = v52 + v89++;
          v52 = v90 & (v51 - 1);
          v54 = *(_QWORD *)(v50 + 16 * v52);
          if (v44 == v54)
          {
            v53 = (uint64_t *)(v50 + 16 * v52);
            goto LABEL_91;
          }
        }
      }
      v53 = (uint64_t *)(v50 + 16 * v51);
      goto LABEL_91;
    }
    v38 = *((_QWORD *)v36 + 1);
    if ((*(_WORD *)(v35 + 44) & 0xC) == 0 || (*(_WORD *)(v35 + 44) & 4) != 0)
    {
      if ((v38 & 0x80) != 0)
        goto LABEL_182;
      if ((v38 & 0x800) != 0)
        goto LABEL_133;
      goto LABEL_65;
    }
    v40 = v35;
    if ((v38 & 0x80) == 0)
    {
      while ((*(_WORD *)(v40 + 44) & 8) != 0)
      {
        v40 = *(_QWORD *)(v40 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v40 + 16) + 8) & 0x80) != 0)
          goto LABEL_182;
      }
      v41 = v35;
      if ((v38 & 0x800) != 0)
        goto LABEL_133;
      while ((*(_WORD *)(v41 + 44) & 8) != 0)
      {
        v41 = *(_QWORD *)(v41 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v41 + 16) + 9) & 8) != 0)
          goto LABEL_133;
      }
LABEL_65:
      v35 = *(_QWORD *)v35 & 0xFFFFFFFFFFFFFFF8;
      if (!v35 || (*(_BYTE *)v35 & 4) == 0)
      {
        while ((*(_WORD *)(v35 + 44) & 4) != 0)
          v35 = *(_QWORD *)v35 & 0xFFFFFFFFFFFFFFF8;
      }
      goto LABEL_55;
    }
LABEL_182:
    v55 = sub_1C4850E04(v13, v35);
LABEL_92:
    v56 = (char *)v131[1];
    if ((unint64_t)v132 - (unint64_t)v131[1] <= 8)
    {
      v87 = *(_QWORD **)(*(_QWORD *)v131[1] + 88);
      v88 = *(_QWORD **)(*(_QWORD *)v131[1] + 96);
      if (v87 != v88)
      {
        while (*v87 != *(_QWORD *)v131[1])
        {
          if (++v87 == v88)
          {
            v87 = *(_QWORD **)(*(_QWORD *)v131[1] + 96);
            break;
          }
        }
      }
      if (v87 == v88)
      {
        v85 = v124;
        v86 = *(_DWORD *)((v124 & 0xFFFFFFFFFFFFFFF8) + 24) | (v124 >> 1) & 3;
        v84 = *(_DWORD *)((v55 & 0xFFFFFFFFFFFFFFF8) + 24) | (v55 >> 1) & 3;
LABEL_140:
        if (v86 < v84)
          v85 = v55;
        v124 = v85;
        goto LABEL_143;
      }
    }
    if (v131[1] == (void *)v132)
      goto LABEL_133;
    v57 = *(_QWORD *)(v13 + 352) & 0xFFFFFFFFFFFFFFF9;
    v59 = &v137;
    if ((v136 & 1) != 0)
    {
      v60 = 31;
    }
    else
    {
      v59 = v137;
      v60 = v138 - 1;
    }
    v55 = *v123 & 0xFFFFFFFFFFFFFFF9;
    while (2)
    {
      v61 = *(_QWORD *)v56;
      v58 = *(_QWORD *)(v13 + 392);
      v62 = *(_QWORD *)(v58 + 16 * *(unsigned int *)(*(_QWORD *)v56 + 24));
      if ((*(_DWORD *)((v57 & 0xFFFFFFFFFFFFFFF8) + 24) | (v57 >> 1) & 3) < ((v62 >> 1) & 3 | *(_DWORD *)((v62 & 0xFFFFFFFFFFFFFFF8) + 24)))
        v57 = *(_QWORD *)(v58 + 16 * *(unsigned int *)(*(_QWORD *)v56 + 24));
      v63 = *(uint64_t **)(v61 + 88);
      v64 = *(uint64_t **)(v61 + 96);
      while (2)
      {
        if (v63 != v64)
        {
          v65 = *v63;
          if (*v63 + 48 == (*(_QWORD *)(*v63 + 48) & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_105:
            ++v63;
            continue;
          }
          if (v136 & 1 | ((_DWORD)v138 != 0))
          {
            v66 = ((v65 >> 4) ^ (v65 >> 9)) & v60;
            v67 = v59[v66];
            if (v67 == v65)
              goto LABEL_105;
            v68 = 1;
            while (v67 != -4096)
            {
              v69 = v66 + v68++;
              v66 = v69 & v60;
              v67 = v59[v66];
              if (v67 == v65)
                goto LABEL_105;
            }
          }
          v70 = *(_QWORD *)(v65 + 56);
          v71 = *(_WORD *)(v70 + 44);
          v72 = v70;
          if ((v71 & 4) != 0)
          {
            do
              v72 = *(_QWORD *)v72 & 0xFFFFFFFFFFFFFFF8;
            while ((*(_WORD *)(v72 + 44) & 4) != 0);
          }
          if ((v71 & 8) != 0)
          {
            do
              v70 = *(_QWORD *)(v70 + 8);
            while ((*(_WORD *)(v70 + 44) & 8) != 0);
          }
          v73 = *(_QWORD *)(v70 + 8);
          if (v72 != v73)
          {
            while (1)
            {
              v74 = **(unsigned __int16 **)(v72 + 16);
              v47 = v74 > 0x17;
              v75 = (1 << v74) & 0x83E000;
              if (v47 || v75 == 0)
                break;
              v72 = *(_QWORD *)(v72 + 8);
              if (v72 == v73)
              {
                v72 = v73;
                break;
              }
            }
          }
          v77 = *(_QWORD *)(v13 + 368);
          v78 = *(unsigned int *)(v13 + 384);
          if ((_DWORD)v78)
          {
            LODWORD(v79) = ((v72 >> 4) ^ (v72 >> 9)) & (v78 - 1);
            v80 = (uint64_t *)(v77 + 16 * v79);
            v81 = *v80;
            if (v72 == *v80)
              goto LABEL_120;
            v82 = 1;
            while (v81 != -4096)
            {
              v83 = v79 + v82++;
              v79 = v83 & (v78 - 1);
              v81 = *(_QWORD *)(v77 + 16 * v79);
              if (v72 == v81)
              {
                v80 = (uint64_t *)(v77 + 16 * v79);
                goto LABEL_120;
              }
            }
          }
          v80 = (uint64_t *)(v77 + 16 * v78);
LABEL_120:
          if (((v80[1] >> 1) & 3 | *(_DWORD *)((v80[1] & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((v55 & 0xFFFFFFFFFFFFFFF8) + 24) | (v55 >> 1) & 3))
            v55 = v80[1];
          goto LABEL_105;
        }
        break;
      }
      v56 += 8;
      if (v56 != (char *)v132)
        continue;
      break;
    }
    if (v55 != (*v123 & 0xFFFFFFFFFFFFFFF9))
    {
      v84 = *(_DWORD *)((v55 & 0xFFFFFFFFFFFFFFF8) + 24) | (v55 >> 1) & 3;
      if (v84 > (*(_DWORD *)((v57 & 0xFFFFFFFFFFFFFFF8) + 24) | (v57 >> 1) & 3))
      {
        v85 = v124;
        v86 = *(_DWORD *)((v124 & 0xFFFFFFFFFFFFFFF8) + 24) | (v124 >> 1) & 3;
        goto LABEL_140;
      }
    }
LABEL_133:
    v42 = 0;
LABEL_144:
    if ((v136 & 1) == 0)
      MEMORY[0x1CAA32FB4](v137, 8);
    if (!v42)
    {
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v131[1])
      {
        *(void **)&v132 = v131[1];
        operator delete(v131[1]);
      }
      if (v130[0])
      {
        v130[1] = v130[0];
        operator delete(v130[0]);
      }
      MEMORY[0x1CAA32FB4](v127, 8);
      return 0;
    }
    sub_1C49D7680((int *)&v126);
    v26 = v125;
    v28 = (uint64_t *)v131[1];
    v27 = (uint64_t *)v132;
  }
  while (v131[1] != (void *)v132);
LABEL_156:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
    v28 = (uint64_t *)v131[1];
  }
  if (v28)
  {
    *(_QWORD *)&v132 = v28;
    operator delete(v28);
  }
  if (v130[0])
  {
    v130[1] = v130[0];
    operator delete(v130[0]);
  }
  MEMORY[0x1CAA32FB4](v127, 8, v26);
  if (v124 < 8)
    return 0;
  result = *(_QWORD *)((v124 & 0xFFFFFFFFFFFFFFF8) + 16);
  if (!result)
    return result;
  v91 = sub_1C49D66F0(result);
  if (**(_WORD **)(v91 + 16) == 623)
    return 0;
  v92 = v91;
  sub_1C49D665C(a1, v91);
  v93 = *(_QWORD *)(v121 + 248);
  v94 = *(_QWORD *)(v93 + 72);
  if (!*(_QWORD *)v94 && *(_DWORD *)(v94 + 32) > 1u)
    return 1;
  v95 = *(_QWORD *)(v92 + 24);
  v96 = *(_QWORD *)(a2 + 328);
  if (llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::dominates(v93, v95, v96))
    return 1;
  v101 = *(_QWORD *)(v121 + 248);
  v102 = *(_QWORD *)(v101 + 48);
  v103 = *(unsigned int *)(v101 + 64);
  if ((_DWORD)v103)
  {
    LODWORD(v104) = (v103 - 1) & ((v95 >> 4) ^ (v95 >> 9));
    v105 = (uint64_t *)(v102 + 16 * v104);
    v106 = *v105;
    if (*v105 == v95)
      goto LABEL_185;
    v114 = 1;
    while (v106 != -4096)
    {
      v115 = v104 + v114++;
      v104 = v115 & (v103 - 1);
      v106 = *(_QWORD *)(v102 + 16 * v104);
      if (v106 == v95)
      {
        v105 = (uint64_t *)(v102 + 16 * v104);
        goto LABEL_185;
      }
    }
  }
  v105 = (uint64_t *)(v102 + 16 * v103);
LABEL_185:
  if (v105 == (uint64_t *)(v102 + 16 * v103))
    v107 = 0;
  else
    v107 = (uint64_t *)v105[1];
  while (1)
  {
    v107 = (uint64_t *)v107[1];
    if (!v107)
      return 1;
    v108 = *v107;
    llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v122);
    if (!llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v122 + 1320), v95, v108))
    {
      v109 = *(_QWORD *)(v108 + 56);
      if (v109 != v108 + 48)
      {
        while (1)
        {
          v110 = **(unsigned __int16 **)(v109 + 16);
          if ((v110 - 13) >= 5 && v110 != 23)
            break;
          if ((*(_BYTE *)v109 & 4) == 0)
          {
            while ((*(_WORD *)(v109 + 44) & 8) != 0)
              v109 = *(_QWORD *)(v109 + 8);
          }
          v109 = *(_QWORD *)(v109 + 8);
          if (v109 == v108 + 48)
          {
            v109 = v108 + 48;
            break;
          }
        }
      }
      v112 = sub_1C49D66F0(v109);
      sub_1C49D665C(a1, v112);
    }
    v113 = llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::dominates(*(_QWORD *)(v121 + 248), v108, v96);
    result = 1;
    if (v113)
      return result;
  }
}

uint64_t sub_1C49D73B8(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeMachinePostDominatorTreePass(a1, v2);
  llvm::initializeSlotIndexesPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "AGX3Dis2x2";
  *(_QWORD *)(v3 + 8) = 10;
  *(_QWORD *)(v3 + 16) = "agx3-dis2x2";
  *(_QWORD *)(v3 + 24) = 11;
  *(_QWORD *)(v3 + 32) = &unk_1ED7ECB00;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C614E610;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

const char *sub_1C49D745C()
{
  return "AGX3 Dis2x2 pass";
}

void sub_1C49D746C(int *a1, uint64_t a2)
{
  int v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  char *v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;

  v28 = a2;
  v3 = *a1 + 1;
  *a1 = v3;
  *((_DWORD *)sub_1C49D78CC((uint64_t)(a1 + 2), &v28) + 2) = v3;
  v5 = (_QWORD *)*((_QWORD *)a1 + 5);
  v4 = *((_QWORD *)a1 + 6);
  if ((unint64_t)v5 < v4)
  {
    *v5 = v28;
    v13 = v5 + 1;
  }
  else
  {
    v6 = (_QWORD *)*((_QWORD *)a1 + 4);
    v7 = v5 - v6;
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 61)
      goto LABEL_35;
    v9 = v4 - (_QWORD)v6;
    if (v9 >> 2 > v8)
      v8 = v9 >> 2;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 61)
        goto LABEL_36;
      v11 = (char *)operator new(8 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[8 * v7];
    *(_QWORD *)v12 = v28;
    v13 = v12 + 8;
    if (v5 != v6)
    {
      do
      {
        v14 = *--v5;
        *((_QWORD *)v12 - 1) = v14;
        v12 -= 8;
      }
      while (v5 != v6);
      v5 = (_QWORD *)*((_QWORD *)a1 + 4);
    }
    *((_QWORD *)a1 + 4) = v12;
    *((_QWORD *)a1 + 5) = v13;
    *((_QWORD *)a1 + 6) = &v11[8 * v10];
    if (v5)
      operator delete(v5);
  }
  *((_QWORD *)a1 + 5) = v13;
  v15 = v28;
  v16 = *(_QWORD *)(v28 + 88);
  v17 = *a1;
  v19 = (char *)*((_QWORD *)a1 + 11);
  v18 = *((_QWORD *)a1 + 12);
  if ((unint64_t)v19 < v18)
  {
    *(_QWORD *)v19 = v28;
    *((_QWORD *)v19 + 1) = v16;
    v26 = v19 + 24;
    *((_DWORD *)v19 + 4) = v17;
    goto LABEL_32;
  }
  v20 = (_BYTE *)*((_QWORD *)a1 + 10);
  v21 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v20) >> 3) + 1;
  if (v21 > 0xAAAAAAAAAAAAAAALL)
LABEL_35:
    abort();
  v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (_QWORD)v20) >> 3);
  if (2 * v22 > v21)
    v21 = 2 * v22;
  if (v22 >= 0x555555555555555)
    v23 = 0xAAAAAAAAAAAAAAALL;
  else
    v23 = v21;
  if (!v23)
  {
    v24 = 0;
    goto LABEL_26;
  }
  if (v23 > 0xAAAAAAAAAAAAAAALL)
LABEL_36:
    sub_1C4764EE4();
  v24 = (char *)operator new(24 * v23);
LABEL_26:
  v25 = &v24[8 * ((v19 - v20) >> 3)];
  *(_QWORD *)v25 = v15;
  *((_QWORD *)v25 + 1) = v16;
  *((_DWORD *)v25 + 4) = v17;
  v26 = v25 + 24;
  if (v19 != v20)
  {
    do
    {
      v27 = *(_OWORD *)(v19 - 24);
      *((_DWORD *)v25 - 2) = *((_DWORD *)v19 - 2);
      *(_OWORD *)(v25 - 24) = v27;
      v25 -= 24;
      v19 -= 24;
    }
    while (v19 != v20);
    v19 = (char *)*((_QWORD *)a1 + 10);
  }
  *((_QWORD *)a1 + 10) = v25;
  *((_QWORD *)a1 + 11) = v26;
  *((_QWORD *)a1 + 12) = &v24[24 * v23];
  if (v19)
    operator delete(v19);
LABEL_32:
  *((_QWORD *)a1 + 11) = v26;
}

int *sub_1C49D7680(int *result)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *((_QWORD *)result + 8) = *((_QWORD *)result + 7);
  v2 = *((_QWORD *)result + 10);
  v1 = *((_QWORD *)result + 11);
  if (v2 != v1)
  {
    v3 = result;
    v4 = (uint64_t)(result + 2);
    while (1)
    {
      v5 = (_QWORD *)(v1 - 16);
      v6 = *(uint64_t **)(v1 - 16);
      if (v6 != *(uint64_t **)(*(_QWORD *)(v1 - 24) + 96))
      {
        do
        {
          *v5 = v6 + 1;
          v7 = *v6;
          v22 = *v6;
          v23 = 0;
          if (sub_1C4926528(v4, &v22, &v23) && v23 != *((_QWORD *)v3 + 1) + 16 * v3[6])
          {
            v8 = *(_DWORD *)(v23 + 8);
            v1 = *((_QWORD *)v3 + 11);
            if (*(_DWORD *)(v1 - 8) > v8)
              *(_DWORD *)(v1 - 8) = v8;
          }
          else
          {
            sub_1C49D746C(v3, v7);
            v1 = *((_QWORD *)v3 + 11);
          }
          v5 = (_QWORD *)(v1 - 16);
          v6 = *(uint64_t **)(v1 - 16);
        }
        while (v6 != *(uint64_t **)(*(_QWORD *)(v1 - 24) + 96));
        v2 = *((_QWORD *)v3 + 10);
      }
      v23 = 0;
      v23 = *(_QWORD *)(v1 - 24);
      v9 = *(_DWORD *)(v1 - 8);
      *((_QWORD *)v3 + 11) = v1 - 24;
      if (v2 != v1 - 24 && *(_DWORD *)(v1 - 32) > v9)
        *(_DWORD *)(v1 - 32) = v9;
      result = (int *)sub_1C49D78CC(v4, &v23);
      if (v9 == result[2])
        break;
      v2 = *((_QWORD *)v3 + 10);
      v1 = *((_QWORD *)v3 + 11);
      if (v2 == v1)
        return result;
    }
    v10 = (_QWORD *)*((_QWORD *)v3 + 8);
    do
    {
      v11 = *((_QWORD *)v3 + 5);
      v12 = *((_QWORD *)v3 + 9);
      if ((unint64_t)v10 >= v12)
      {
        v14 = (_QWORD *)*((_QWORD *)v3 + 7);
        v15 = v10 - v14;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61)
          abort();
        v17 = v12 - (_QWORD)v14;
        if (v17 >> 2 > v16)
          v16 = v17 >> 2;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          if (v18 >> 61)
            sub_1C4764EE4();
          v19 = (char *)operator new(8 * v18);
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[8 * v15];
        *(_QWORD *)v20 = *(_QWORD *)(v11 - 8);
        v13 = v20 + 8;
        if (v10 != v14)
        {
          do
          {
            v21 = *--v10;
            *((_QWORD *)v20 - 1) = v21;
            v20 -= 8;
          }
          while (v10 != v14);
          v10 = (_QWORD *)*((_QWORD *)v3 + 7);
        }
        *((_QWORD *)v3 + 7) = v20;
        *((_QWORD *)v3 + 8) = v13;
        *((_QWORD *)v3 + 9) = &v19[8 * v18];
        if (v10)
          operator delete(v10);
      }
      else
      {
        *v10 = *(_QWORD *)(v11 - 8);
        v13 = v10 + 1;
      }
      *((_QWORD *)v3 + 8) = v13;
      *((_QWORD *)v3 + 5) -= 8;
      result = (int *)sub_1C49D78CC(v4, v13 - 1);
      result[2] = -1;
      v10 = (_QWORD *)*((_QWORD *)v3 + 8);
    }
    while (*(v10 - 1) != v23);
  }
  return result;
}

_QWORD *sub_1C49D78CC(uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _QWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v12 = 0;
LABEL_15:
    v6 = sub_1C49D7988(a1, (uint64_t)a2, a2, v12);
    *v6 = *a2;
    *((_DWORD *)v6 + 2) = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -4096)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -8192;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v11 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
    goto LABEL_15;
  }
  return v6;
}

_QWORD *sub_1C49D7988(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C49D7AB8(a1, v7);
      v17 = 0;
      sub_1C4926528(a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C49D7AB8(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C49D7AB8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C49D7B70(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C49D7B70(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  unsigned int v14;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)result;
    v5 = 16 * v3;
    do
    {
      *v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 2)
  {
    v6 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v7 = *(_DWORD *)(result + 16) - 1;
      v8 = v7 & ((v6 >> 4) ^ (v6 >> 9));
      v9 = *(_QWORD *)result + 16 * v8;
      v10 = *(_QWORD *)v9;
      if (v6 != *(_QWORD *)v9)
      {
        v11 = 0;
        v12 = 1;
        while (v10 != -4096)
        {
          if (v11)
            v13 = 0;
          else
            v13 = v10 == -8192;
          if (v13)
            v11 = v9;
          v14 = v8 + v12++;
          v8 = v14 & v7;
          v9 = *(_QWORD *)result + 16 * (v14 & v7);
          v10 = *(_QWORD *)v9;
          if (v6 == *(_QWORD *)v9)
            goto LABEL_18;
        }
        if (v11)
          v9 = v11;
      }
LABEL_18:
      *(_QWORD *)v9 = v6;
      *(_DWORD *)(v9 + 8) = *((_DWORD *)a2 + 2);
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

uint64_t sub_1C49D7C44(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 32;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_15;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_12:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_12;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_15:
  *a3 = v7;
  return result;
}

uint64_t sub_1C49D7CE8(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[33];

  v14[32] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x21)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x20)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C49D7E5C(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 264; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C49D7E5C(a1, v14, v8);
}

uint64_t sub_1C49D7E5C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 264);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C49D7C44((uint64_t)v5, v10, &v11);
      *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C49D7F14(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1ED7ECB10) = &off_1E7FA94A8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7ECB18);
  if (v3 != -1)
  {
    v7[0] = sub_1C49D7FD4;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7ECB18, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C49D7FD4(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "AGX3DropStackInitZero";
  *(_QWORD *)(v2 + 8) = 21;
  *(_QWORD *)(v2 + 16) = "agx3-drop-stack-init-zero";
  *(_QWORD *)(v2 + 24) = 25;
  *(_QWORD *)(v2 + 32) = &unk_1ED7ECB10;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C49DAA2C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void sub_1C49D8064(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C49D80F8(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C49D8184()
{
  return "AGX3 Drop Stack Initializations of Zero";
}

void *sub_1C49D8194(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C49D81C4(uint64_t a1, llvm::MachineFunction *a2)
{
  llvm::MachineFunction *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  llvm::MachineFunction *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t i;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  unsigned int *v38;
  unsigned int *v39;
  unint64_t v40;
  BOOL v41;
  uint64_t *v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t *v60;
  _BOOL4 v61;
  _DWORD **v62;
  _DWORD **v63;
  _DWORD *v64;
  int v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  unsigned int *v80;
  int v81;
  unsigned int *v82;
  void *v83;
  unint64_t v84;
  uint64_t v86;
  uint64_t v87;
  unsigned int *v88;
  unint64_t v89;
  void **v90;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t *v96;
  uint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  llvm::MachineFunction *v114;
  _QWORD *v115;
  uint64_t *v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  __int128 v121;
  __int128 v122;
  int v123;
  _QWORD v124[2];
  int v125;
  unsigned int *v126[3];
  uint64_t **v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  void *__dst;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  char v136;
  void *v137;
  uint64_t v138;
  char v139;
  void *v140;
  uint64_t v141;
  char v142;
  void *v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  _BYTE v149[512];
  int v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*((_QWORD *)a2 + 2) + 392)
    && (v2 = a2,
        v3 = *((_QWORD *)a2 + 7),
        v4 = *(_QWORD *)a2,
        v4 == (*(uint64_t (**)(uint64_t))(**((_QWORD **)a2 + 43) + 560))(*((_QWORD *)a2 + 43)))
    && *(_QWORD *)(v3 + 48))
  {
    llvm::MachineFunction::RenumberBlocks(v2, 0);
    v118 = 0;
    v119 = 0;
    v120 = 0;
    v124[0] = 0;
    v124[1] = 0;
    v125 = 0;
    v122 = 0u;
    v123 = 0;
    sub_1C49D9000(&v122);
    sub_1C49D9000(v124);
    v121 = (unint64_t)v2;
    v7 = (*((_QWORD *)v2 + 14) - *((_QWORD *)v2 + 13)) >> 3;
    v8 = v2;
    if ((_DWORD)v7)
    {
      v9 = (4 * (int)v7 / 3u + 1) | ((unint64_t)(4 * (int)v7 / 3u + 1) >> 1);
      v10 = v9 | (v9 >> 2) | ((v9 | (v9 >> 2)) >> 4);
      v11 = ((v10 | (v10 >> 8)) >> 16) | v10 | (v10 >> 8);
      v8 = v2;
      if (v120 <= v11)
      {
        sub_1C49D92A0((uint64_t)&v118, v11 + 1);
        v8 = (llvm::MachineFunction *)v121;
      }
    }
    v114 = v2;
    v12 = (char *)v8 + 320;
    v13 = *((_QWORD *)v8 + 41);
    if ((llvm::MachineFunction *)v13 != (llvm::MachineFunction *)((char *)v8 + 320))
    {
      while (1)
      {
        __dst = &unk_1E7FA95C0;
        LOBYTE(v132) = 0;
        v136 = 0;
        LOBYTE(v137) = 0;
        v139 = 0;
        LOBYTE(v140) = 0;
        v142 = 0;
        LOBYTE(v143) = 0;
        v145 = 0;
        v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v13 + 32) + 16) + 176))(*(_QWORD *)(*(_QWORD *)(v13 + 32) + 16));
        v147 = v149;
        v148 = 0x2000000000;
        v146 = v14;
        __dst = off_1E7FA9568;
        v150 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 32) + 56) + 48) >> 1;
        v127 = 0;
        if ((sub_1C49D9368(v118, v120, v13, &v127) & 1) == 0)
          break;
LABEL_26:
        __dst = &unk_1E7FA95C0;
        if (v147 != v149)
          free(v147);
        if (v145)
        {
          if (v143 != &v144)
            free(v143);
          v145 = 0;
        }
        if (v142)
        {
          if (v140 != &v141)
            free(v140);
          v142 = 0;
        }
        if (v139)
        {
          if (v137 != &v138)
            free(v137);
          v139 = 0;
        }
        if (v136 && v132 != &v134)
          free(v132);
        v13 = *(_QWORD *)(v13 + 8);
        if ((char *)v13 == v12)
          goto LABEL_47;
      }
      v15 = v120;
      if (4 * (int)v119 + 4 >= 3 * v120)
      {
        v15 = 2 * v120;
      }
      else if (v120 + ~(_DWORD)v119 - HIDWORD(v119) > v120 >> 3)
      {
LABEL_13:
        v16 = (uint64_t *)v127;
        LODWORD(v119) = v119 + 1;
        if (*v127 != (uint64_t *)-4096)
          --HIDWORD(v119);
        *v127 = (uint64_t *)v13;
        v16[1] = (uint64_t)&unk_1E7FA95C0;
        *((_BYTE *)v16 + 16) = 0;
        *((_BYTE *)v16 + 88) = 0;
        if (v136)
          sub_1C614E7D8((uint64_t)(v16 + 2), (uint64_t)&v132);
        *((_BYTE *)v16 + 96) = 0;
        *((_BYTE *)v16 + 168) = 0;
        if (v139)
          sub_1C614E7D8((uint64_t)(v16 + 12), (uint64_t)&v137);
        *((_BYTE *)v16 + 176) = 0;
        *((_BYTE *)v16 + 248) = 0;
        if (v142)
          sub_1C614E7D8((uint64_t)(v16 + 22), (uint64_t)&v140);
        *((_BYTE *)v16 + 256) = 0;
        *((_BYTE *)v16 + 328) = 0;
        if (v145)
          sub_1C614E7D8((uint64_t)(v16 + 32), (uint64_t)&v143);
        v16[42] = v146;
        v16[43] = (uint64_t)(v16 + 45);
        v16[44] = 0x2000000000;
        if ((_DWORD)v148)
          sub_1C49DA288((uint64_t)(v16 + 43), (uint64_t)&v147);
        v16[1] = (uint64_t)off_1E7FA9568;
        *((_DWORD *)v16 + 218) = v150;
        goto LABEL_26;
      }
      sub_1C49D92A0((uint64_t)&v118, v15);
      v127 = 0;
      sub_1C49D9368(v118, v120, v13, &v127);
      goto LABEL_13;
    }
LABEL_47:
    v17 = (_QWORD *)((char *)v2 + 320);
    v18 = *((_QWORD *)v2 + 41);
    if ((llvm::MachineFunction *)v18 != (llvm::MachineFunction *)((char *)v2 + 320))
    {
      do
      {
        __dst = 0;
        v19 = sub_1C49DA5F4(v118, v120, v18, &__dst);
        v20 = (char *)__dst;
        if (!v19)
          v20 = (char *)(v118 + 880 * v120);
        v21 = *(_QWORD *)(v18 + 56);
        if (v21 != v18 + 48)
        {
          v22 = v20 + 8;
          do
          {
            if ((*(_BYTE *)(*(_QWORD *)(v21 + 16) + 20) & 4) != 0)
              (*(void (**)(char *, uint64_t))(*(_QWORD *)v22 + 48))(v22, v21);
            if ((*(_BYTE *)v21 & 4) == 0)
            {
              while ((*(_WORD *)(v21 + 44) & 8) != 0)
                v21 = *(_QWORD *)(v21 + 8);
            }
            v21 = *(_QWORD *)(v21 + 8);
          }
          while (v21 != v18 + 48);
        }
        v18 = *(_QWORD *)(v18 + 8);
      }
      while ((_QWORD *)v18 != v17);
    }
    v23 = (_QWORD *)v121;
    v24 = v121 + 320;
    v115 = (_QWORD *)((char *)v2 + 320);
    if (*(_QWORD *)(v121 + 320) != (_QWORD)v121 + 320)
    {
      v128 = 0;
      v129 = 0;
      v127 = &v128;
      v25 = *(_QWORD *)(v121 + 328);
      if (v25 != v24)
      {
        do
        {
          LODWORD(v126[0]) = *(_DWORD *)(v25 + 24);
          __dst = (void *)v25;
          sub_1C49DA68C((uint64_t **)&v127, (unsigned int *)v126, v126, (uint64_t **)&__dst);
          v25 = *(_QWORD *)(v25 + 8);
        }
        while (v25 != v24);
        v23 = (_QWORD *)v121;
      }
      v26 = *(_QWORD *)(v23[7] + 48) >> 1;
      v27 = ((v23[14] - v23[13]) >> 3);
      __dst = &v133;
      v132 = (void *)0x600000000;
      sub_1C4765AA4((char *)&__dst, (v26 + 63) >> 6, 0);
      v135 = v26;
      sub_1C49DA774(v126, v27, (unsigned int *)&__dst);
      if (__dst != &v133)
        free(__dst);
      for (i = v129; v129; i = v129)
      {
        v29 = (uint64_t *)v127;
        v30 = v127[1];
        v31 = (uint64_t *)v127;
        if (v30)
        {
          do
          {
            v32 = v30;
            v30 = (uint64_t *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            v32 = (uint64_t *)v31[2];
            v41 = *v32 == (_QWORD)v31;
            v31 = v32;
          }
          while (!v41);
        }
        v33 = (uint64_t)v127[5];
        v127 = (uint64_t **)v32;
        v129 = i - 1;
        sub_1C485B6E0(v128, v29);
        operator delete(v29);
        v35 = *(uint64_t **)(v33 + 64);
        v34 = *(uint64_t **)(v33 + 72);
        v116 = v34;
        while (v35 != v34)
        {
          v36 = *v35;
          v37 = *(_DWORD *)(v33 + 24);
          v38 = v126[0];
          v39 = &v126[0][18 * v37];
          __dst = &v133;
          v132 = (void *)0x600000000;
          v40 = v39[2];
          v41 = &__dst == (void **)v39 || v40 == 0;
          if (!v41)
          {
            v42 = &v133;
            v43 = v39[2];
            if (v40 < 7)
              goto LABEL_80;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)&v133, v39[2], 8);
            v43 = v39[2];
            if ((_DWORD)v43)
            {
              v42 = (uint64_t *)__dst;
LABEL_80:
              memcpy(v42, *(const void **)v39, 8 * v43);
            }
            LODWORD(v132) = v40;
          }
          v44 = &v38[18 * v37];
          v46 = v44[16];
          v45 = v44 + 16;
          v135 = v46;
          v130 = 0;
          if (sub_1C49DA5F4(v118, v120, v36, &v130))
            v47 = v130;
          else
            v47 = v118 + 880 * v120;
          if (!*(_BYTE *)(v47 + 248))
            (*(void (**)(uint64_t))(*(_QWORD *)(v47 + 8) + 40))(v47 + 8);
          v48 = *v45;
          v49 = *(_DWORD *)(v47 + 240);
          if (*v45 < v49)
          {
            v65 = *v45 & 0x3F;
            v66 = v39[2];
            if (v65)
              *(_QWORD *)(*(_QWORD *)v39 + 8 * v66 - 8) &= ~(-1 << v65);
            v67 = v66;
            *v45 = v49;
            v68 = v49 + 63;
            if ((_DWORD)v66 != (v49 + 63) >> 6)
            {
              v69 = v68 >> 6;
              if (v66 > v69)
              {
                v39[2] = v69;
                v67 = v68 >> 6;
              }
              else
              {
                v70 = v66;
                if (v69 > v39[3])
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v39, (uint64_t)(v39 + 4), v69, 8);
                  v70 = v39[2];
                  v67 = v39[2];
                }
                if (v69 != v66)
                  bzero((void *)(*(_QWORD *)v39 + 8 * v70), 8 * (v69 - v66));
                v67 += v69 - v66;
                v39[2] = v67;
                v49 = *v45;
              }
            }
            if ((v49 & 0x3F) != 0)
              *(_QWORD *)(*(_QWORD *)v39 + 8 * v67 - 8) &= ~(-1 << (v49 & 0x3F));
            v48 = v49;
          }
          v50 = *(unsigned int *)(v47 + 184);
          if ((_DWORD)v50)
          {
            v51 = *(uint64_t **)(v47 + 176);
            v52 = *(_QWORD **)v39;
            do
            {
              v53 = *v51++;
              *v52++ |= v53;
              --v50;
            }
            while (v50);
          }
          v54 = &v126[0][18 * *(int *)(v36 + 24)];
          v55 = v54[16];
          if (v48 < v55)
          {
            v71 = v48 & 0x3F;
            v72 = v39[2];
            if (v71)
              *(_QWORD *)(*(_QWORD *)v39 + 8 * v72 - 8) &= ~(-1 << v71);
            v73 = v72;
            *v45 = v55;
            v74 = v55 + 63;
            if ((_DWORD)v72 != (v55 + 63) >> 6)
            {
              v75 = v74 >> 6;
              if (v72 > v75)
              {
                v39[2] = v75;
                v73 = v74 >> 6;
              }
              else
              {
                v76 = v72;
                if (v75 > v39[3])
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v39, (uint64_t)(v39 + 4), v75, 8);
                  v76 = v39[2];
                  v73 = v39[2];
                }
                if (v75 != v72)
                  bzero((void *)(*(_QWORD *)v39 + 8 * v76), 8 * (v75 - v72));
                v73 += v75 - v72;
                v39[2] = v73;
                v55 = *v45;
              }
            }
            if ((v55 & 0x3F) != 0)
              *(_QWORD *)(*(_QWORD *)v39 + 8 * v73 - 8) &= ~(-1 << (v55 & 0x3F));
          }
          else
          {
            v55 = v48;
          }
          v56 = v54[2];
          if ((_DWORD)v56)
          {
            v57 = *(uint64_t **)v54;
            v58 = *(_QWORD **)v39;
            do
            {
              v59 = *v57++;
              *v58++ |= v59;
              --v56;
            }
            while (v56);
          }
          v60 = (uint64_t *)__dst;
          v61 = v135 != v55 || memcmp(__dst, *(const void **)v39, 8 * v132) != 0;
          if (v60 != &v133)
            free(v60);
          if (v61)
          {
            v62 = *(_DWORD ***)(v33 + 88);
            v63 = *(_DWORD ***)(v33 + 96);
            while (v62 != v63)
            {
              __dst = 0;
              v64 = *v62++;
              __dst = v64;
              LODWORD(v130) = v64[6];
              sub_1C49DA87C((uint64_t **)&v127, (unsigned int *)&v130, &__dst);
            }
          }
          ++v35;
          v34 = v116;
        }
      }
      v77 = v121 + 320;
      v78 = *(_QWORD *)(v121 + 328);
      if (v78 != (_QWORD)v121 + 320)
      {
        while (1)
        {
          __dst = 0;
          if (sub_1C49DA5F4(v118, v120, v78, &__dst))
            v79 = (char *)__dst;
          else
            v79 = (char *)(v118 + 880 * v120);
          if (v79[168])
            llvm::report_fatal_error((llvm *)"This should only happen once", (const char *)1);
          v80 = v126[0];
          v81 = *(_DWORD *)(v78 + 24);
          v82 = &v126[0][18 * v81];
          v83 = v79 + 112;
          *((_QWORD *)v79 + 12) = v79 + 112;
          *((_QWORD *)v79 + 13) = 0x600000000;
          v84 = v82[2];
          if (v79 + 96 == (char *)v82 || v84 == 0)
            goto LABEL_147;
          if (v84 < 7)
            break;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v79 + 96), (uint64_t)(v79 + 112), v82[2], 8);
          v86 = v82[2];
          if ((_DWORD)v86)
          {
            v83 = (void *)*((_QWORD *)v79 + 12);
            goto LABEL_145;
          }
LABEL_146:
          *((_DWORD *)v79 + 26) = v84;
LABEL_147:
          *((_DWORD *)v79 + 40) = v80[18 * v81 + 16];
          v79[168] = 1;
          v78 = *(_QWORD *)(v78 + 8);
          if (v78 == v77)
            goto LABEL_148;
        }
        v86 = v82[2];
LABEL_145:
        memcpy(v83, *(const void **)v82, 8 * v86);
        goto LABEL_146;
      }
LABEL_148:
      __dst = v126;
      sub_1C476B22C((void ***)&__dst);
      sub_1C61247C0((uint64_t)&v127, v128);
      v2 = v114;
      v17 = v115;
    }
    v87 = *((_QWORD *)v2 + 41);
    if ((_QWORD *)v87 != v17)
    {
      v117 = 0;
      while (1)
      {
        __dst = 0;
        v88 = sub_1C49DA5F4(v118, v120, v87, &__dst)
            ? (unsigned int *)__dst
            : (unsigned int *)(v118 + 880 * v120);
        __dst = &v133;
        v132 = (void *)0x600000000;
        v89 = v88[26];
        v90 = (void **)(v88 + 24);
        if ((_DWORD)v89 && &__dst != v90)
          break;
LABEL_163:
        v135 = v88[40];
        v94 = v88[88];
        if ((_DWORD)v94)
        {
          v95 = (char *)(v88 + 2);
          v96 = (uint64_t *)*((_QWORD *)v88 + 43);
          v97 = &v96[2 * v94];
          while (2)
          {
            v98 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)v95 + 16))(v95, v96[1]);
            if ((v99 & 0xFF00000000) != 0)
            {
              v100 = v98;
              v101 = *v96;
              v102 = HIDWORD(v98);
              if (sub_1C476BA0C(&__dst, v98, SHIDWORD(v98), 1u) == -1
                && (*(_BYTE *)(*(_QWORD *)(v101 + 32)
                             + 32 * sub_1C4C2FD5C(**(unsigned __int16 **)(v101 + 16))
                             + 18) & 2) != 0)
              {
                v107 = v101;
                if ((*(_BYTE *)v101 & 4) == 0)
                {
                  v107 = v101;
                  if ((*(_WORD *)(v101 + 44) & 8) != 0)
                  {
                    v107 = v101;
                    do
                      v107 = *(_QWORD *)(v107 + 8);
                    while ((*(_WORD *)(v107 + 44) & 8) != 0);
                  }
                }
                sub_1C487FE80(*(_QWORD *)(v101 + 24) + 40, v101, *(_QWORD *)(v107 + 8));
                v117 = 1;
                goto LABEL_172;
              }
              if ((_DWORD)v100 != (_DWORD)v102)
              {
                v103 = v100 >> 6;
                v104 = -1 << v100;
                if (v100 >> 6 == v102 >> 6)
                {
                  v105 = (1 << SBYTE4(v100)) + v104;
                  v106 = __dst;
                  goto LABEL_171;
                }
                v106 = __dst;
                *((_QWORD *)__dst + v103) |= v104;
                v108 = (v100 + 63) & 0xFFFFFFC0;
                if (v108 + 64 <= v102)
                {
                  do
                  {
                    v106[v108 >> 6] = -1;
                    v109 = v108 + 64;
                    v110 = v108 + 128;
                    v108 += 64;
                  }
                  while (v110 <= v102);
                }
                else
                {
                  v109 = (v100 + 63) & 0xFFFFFFC0;
                }
                if (v109 < v102)
                {
                  v105 = ~(-1 << SBYTE4(v100));
                  v103 = v109 >> 6;
LABEL_171:
                  v106[v103] |= v105;
                }
              }
            }
LABEL_172:
            v96 += 2;
            if (v96 == v97)
              break;
            continue;
          }
        }
        if (__dst != &v133)
          free(__dst);
        v87 = *(_QWORD *)(v87 + 8);
        if ((_QWORD *)v87 == v115)
          goto LABEL_191;
      }
      v92 = &v133;
      v93 = v88[26];
      if (v89 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)&v133, v88[26], 8);
        v93 = v88[26];
        if (!(_DWORD)v93)
        {
LABEL_162:
          LODWORD(v132) = v89;
          goto LABEL_163;
        }
        v92 = (uint64_t *)__dst;
      }
      memcpy(v92, *v90, 8 * v93);
      goto LABEL_162;
    }
    v117 = 0;
LABEL_191:
    sub_1C49D9160((uint64_t)v124);
    MEMORY[0x1CAA32FB4](v124[0], 8);
    sub_1C49D9160((uint64_t)&v122);
    MEMORY[0x1CAA32FB4](v122, 8);
    v111 = v118;
    if (v120)
    {
      v112 = v118 + 8;
      v113 = 880 * v120;
      do
      {
        if ((*(_QWORD *)(v112 - 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
          (*(void (**)(uint64_t))(*(_QWORD *)v112 + 24))(v112);
        v112 += 880;
        v113 -= 880;
      }
      while (v113);
      v111 = v118;
    }
    MEMORY[0x1CAA32FB4](v111, 8);
    v5 = v117;
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

_DWORD *sub_1C49D8F68(_DWORD *result, int a2)
{
  _DWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    result = operator new(40 * v4, (std::align_val_t)8uLL);
    *(_QWORD *)v2 = result;
    *((_QWORD *)v2 + 1) = 0;
    v5 = v2[4];
    if ((_DWORD)v5)
    {
      v6 = 40 * v5;
      do
      {
        *(_QWORD *)result = -4096;
        result += 10;
        v6 -= 40;
      }
      while (v6);
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

void sub_1C49D9000(_DWORD *a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  v1 = a1[2];
  if (v1 || a1[3])
  {
    v2 = a1[4];
    if (v2 <= 4 * v1 || v2 < 0x41)
    {
      if ((_DWORD)v2)
      {
        v3 = 40 * v2;
        v4 = *(_QWORD *)a1 + 24;
        do
        {
          v5 = *(_QWORD *)(v4 - 24);
          if (v5 != -4096)
          {
            if (v5 != -8192)
            {
              v6 = *(void **)(v4 - 16);
              if ((void *)v4 != v6)
              {
                v9 = a1;
                v7 = v4;
                v8 = v3;
                free(v6);
                v4 = v7;
                v3 = v8;
                a1 = v9;
              }
            }
            *(_QWORD *)(v4 - 24) = -4096;
          }
          v4 += 40;
          v3 -= 40;
        }
        while (v3);
      }
      *((_QWORD *)a1 + 1) = 0;
    }
    else
    {
      sub_1C49D90C0(a1);
    }
  }
}

void sub_1C49D90C0(_DWORD *a1)
{
  int v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1[2];
  sub_1C49D9160((uint64_t)a1);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if ((_DWORD)v4 == a1[4])
  {
    *((_QWORD *)a1 + 1) = 0;
    if ((_DWORD)v4)
    {
      v5 = *(_QWORD **)a1;
      v6 = 40 * v4;
      do
      {
        *v5 = -4096;
        v5 += 5;
        v6 -= 40;
      }
      while (v6);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    sub_1C49D8F68(a1, v4);
  }
}

void sub_1C49D9160(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = 40 * v1;
    v3 = *(_QWORD *)a1 + 24;
    do
    {
      v4 = *(_QWORD *)(v3 - 24);
      if (v4 != -4096 && v4 != -8192)
      {
        v5 = *(void **)(v3 - 16);
        if ((void *)v3 != v5)
        {
          v6 = v3;
          v7 = v2;
          free(v5);
          v3 = v6;
          v2 = v7;
        }
      }
      v3 += 40;
      v2 -= 40;
    }
    while (v2);
  }
}

uint64_t sub_1C49D91D0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v6;
  void *v7;

  *(_QWORD *)a1 = &unk_1E7FA95C0;
  v2 = *(void **)(a1 + 336);
  if (v2 != (void *)(a1 + 352))
    free(v2);
  if (*(_BYTE *)(a1 + 320))
  {
    v3 = *(void **)(a1 + 248);
    if (v3 != (void *)(a1 + 264))
      free(v3);
    *(_BYTE *)(a1 + 320) = 0;
  }
  if (*(_BYTE *)(a1 + 240))
  {
    v4 = *(void **)(a1 + 168);
    if (v4 != (void *)(a1 + 184))
      free(v4);
    *(_BYTE *)(a1 + 240) = 0;
  }
  if (*(_BYTE *)(a1 + 160))
  {
    v7 = *(void **)(a1 + 88);
    if (v7 != (void *)(a1 + 104))
      free(v7);
    *(_BYTE *)(a1 + 160) = 0;
  }
  if (*(_BYTE *)(a1 + 80))
  {
    v6 = *(void **)(a1 + 8);
    if (v6 != (void *)(a1 + 24))
      free(v6);
    *(_BYTE *)(a1 + 80) = 0;
  }
  return a1;
}

_QWORD *sub_1C49D92A0(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(880 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C614E6C0(a1, v4, v4 + 880 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = 880 * v10;
    do
    {
      *result = -4096;
      result += 110;
      v11 -= 880;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C49D9368(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t result;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 880 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(a1 + 880 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_11;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a4 = v6;
  return result;
}

uint64_t sub_1C49D93F4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)result = &unk_1E7FA95C0;
  *(_BYTE *)(result + 8) = 0;
  *(_BYTE *)(result + 80) = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    v2 = a2;
    v6 = result;
    sub_1C614E7D8(result + 8, a2 + 8);
    a2 = v2;
    result = v6;
  }
  *(_BYTE *)(result + 88) = 0;
  *(_BYTE *)(result + 160) = 0;
  if (*(_BYTE *)(a2 + 160))
  {
    v3 = a2;
    v7 = result;
    sub_1C614E7D8(result + 88, a2 + 88);
    a2 = v3;
    result = v7;
  }
  *(_BYTE *)(result + 168) = 0;
  *(_BYTE *)(result + 240) = 0;
  if (*(_BYTE *)(a2 + 240))
  {
    v4 = a2;
    v8 = result;
    sub_1C614E7D8(result + 168, a2 + 168);
    a2 = v4;
    result = v8;
  }
  *(_BYTE *)(result + 248) = 0;
  *(_BYTE *)(result + 320) = 0;
  if (*(_BYTE *)(a2 + 320))
  {
    v5 = a2;
    v9 = result;
    sub_1C614E7D8(result + 248, a2 + 248);
    a2 = v5;
    result = v9;
  }
  *(_QWORD *)(result + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(result + 336) = result + 352;
  *(_QWORD *)(result + 344) = 0x2000000000;
  if (*(_DWORD *)(a2 + 344))
  {
    v10 = result;
    sub_1C49DA288(result + 336, a2 + 336);
    return v10;
  }
  return result;
}

uint64_t sub_1C49D9514(uint64_t a1)
{
  return *(unsigned int *)(a1 + 864);
}

uint64_t sub_1C49D951C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = sub_1C4AD4FB8(v4, (unint64_t)(a2 - *(_QWORD *)(v4 + 32)) >> 5, (_QWORD *)(*(_QWORD *)(a1 + 328) + 8));
  v6 = sub_1C4C915C4(**(unsigned __int16 **)(v4 + 16));
  v8 = v5;
  v9 = v6;
  v10 = v4;
  if (sub_1C614E850((uint64_t)&v8))
    return sub_1C49DA374(a1, a2);
  else
    return 0;
}

uint64_t sub_1C49D95BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 8);
  if (sub_1C4AD4FB8(v4, (unint64_t)(a2 - *(_QWORD *)(v4 + 32)) >> 5, (_QWORD *)(*(_QWORD *)(a1 + 328) + 8)) == 7)return sub_1C49DA374(a1, a2);
  v5 = sub_1C4C915C4(**(unsigned __int16 **)(v4 + 16));
  if ((v5 & 0xFF00000000) == 0)
    return 0;
  v6 = v5;
  result = 0;
  if (v6 == 193)
    return sub_1C49DA374(a1, a2);
  return result;
}

void sub_1C49D965C(uint64_t a1)
{
  int v2;
  void **v3;
  void *v4;
  int v5;
  _BYTE *v6;
  unsigned int v7;
  int v8;
  void **v9;
  void *v10;
  int v11;
  _BYTE *v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  void *v28;
  uint64_t v29;
  _BYTE v30[48];
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 240) || *(_BYTE *)(a1 + 320))
    return;
  v2 = (**(uint64_t (***)(uint64_t))a1)(a1);
  v28 = v30;
  v29 = 0x600000000;
  sub_1C4765AA4((char *)&v28, (v2 + 63) >> 6, 0);
  v31 = v2;
  v3 = (void **)(a1 + 248);
  if (!*(_BYTE *)(a1 + 320))
  {
    v4 = (void *)(a1 + 264);
    *(_QWORD *)(a1 + 248) = a1 + 264;
    *(_QWORD *)(a1 + 256) = 0x600000000;
    if (v3 == &v28)
      goto LABEL_12;
    v5 = v29;
    if (!(_DWORD)v29)
      goto LABEL_12;
    if (v28 != v30)
    {
      *(_QWORD *)(a1 + 248) = v28;
      *(_DWORD *)(a1 + 256) = v5;
      *(_DWORD *)(a1 + 260) = HIDWORD(v29);
      v28 = v30;
      HIDWORD(v29) = 0;
      goto LABEL_11;
    }
    if (v29 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 248, a1 + 264, v29, 8);
      v7 = v29;
      if (!(_DWORD)v29)
        goto LABEL_10;
      v6 = v28;
      v4 = *v3;
    }
    else
    {
      v6 = v30;
      v7 = v29;
    }
    memcpy(v4, v6, 8 * v7);
LABEL_10:
    *(_DWORD *)(a1 + 256) = v5;
    v2 = v31;
LABEL_11:
    LODWORD(v29) = 0;
LABEL_12:
    *(_DWORD *)(a1 + 312) = v2;
    *(_BYTE *)(a1 + 320) = 1;
    goto LABEL_13;
  }
  sub_1C476B4F4(a1 + 248, (uint64_t)&v28);
  *(_DWORD *)(a1 + 312) = v31;
LABEL_13:
  if (v28 != v30)
    free(v28);
  v8 = (**(uint64_t (***)(uint64_t))a1)(a1);
  v28 = v30;
  v29 = 0x600000000;
  sub_1C4765AA4((char *)&v28, (v8 + 63) >> 6, 0);
  v31 = v8;
  v9 = (void **)(a1 + 168);
  if (!*(_BYTE *)(a1 + 240))
  {
    v10 = (void *)(a1 + 184);
    *(_QWORD *)(a1 + 168) = a1 + 184;
    *(_QWORD *)(a1 + 176) = 0x600000000;
    if (v9 == &v28)
      goto LABEL_24;
    v11 = v29;
    if (!(_DWORD)v29)
      goto LABEL_24;
    if (v28 != v30)
    {
      *(_QWORD *)(a1 + 168) = v28;
      v24 = HIDWORD(v29);
      *(_DWORD *)(a1 + 176) = v11;
      *(_DWORD *)(a1 + 180) = v24;
      v28 = v30;
      HIDWORD(v29) = 0;
      goto LABEL_23;
    }
    if (v29 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 168, a1 + 184, v29, 8);
      v13 = v29;
      if (!(_DWORD)v29)
        goto LABEL_22;
      v12 = v28;
      v10 = *v9;
    }
    else
    {
      v12 = v30;
      v13 = v29;
    }
    memcpy(v10, v12, 8 * v13);
LABEL_22:
    *(_DWORD *)(a1 + 176) = v11;
    v8 = v31;
LABEL_23:
    LODWORD(v29) = 0;
LABEL_24:
    *(_DWORD *)(a1 + 232) = v8;
    *(_BYTE *)(a1 + 240) = 1;
    goto LABEL_25;
  }
  sub_1C476B4F4(a1 + 168, (uint64_t)&v28);
  *(_DWORD *)(a1 + 232) = v31;
LABEL_25:
  if (v28 != v30)
    free(v28);
  v14 = *(unsigned int *)(a1 + 344);
  if ((_DWORD)v14)
  {
    v15 = *(_QWORD **)(a1 + 336);
    v16 = &v15[2 * v14];
    do
    {
      v17 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, v15[1]);
      if ((v18 & 0xFF00000000) != 0)
      {
        v19 = v17;
        v20 = *v15;
        if ((*(_BYTE *)(*(_QWORD *)(v20 + 32)
                       + 32 * sub_1C4C2FD5C(**(unsigned __int16 **)(*v15 + 16))
                       + 18) & 2) == 0
          && (_DWORD)v19 != HIDWORD(v19))
        {
          v21 = v19 >> 6;
          if (v19 >> 6 == HIDWORD(v19) >> 6)
          {
            v22 = (1 << SBYTE4(v19)) + (-1 << v19);
            v23 = *v9;
          }
          else
          {
            v23 = *v9;
            *((_QWORD *)*v9 + v21) |= -1 << v19;
            v25 = (v19 + 63) & 0xFFFFFFC0;
            if (v25 + 64 <= HIDWORD(v19))
            {
              do
              {
                v23[v25 >> 6] = -1;
                v26 = v25 + 64;
                v27 = v25 + 128;
                v25 += 64;
              }
              while (v27 <= HIDWORD(v19));
            }
            else
            {
              v26 = (v19 + 63) & 0xFFFFFFC0;
            }
            if (v26 >= HIDWORD(v19))
              goto LABEL_36;
            v22 = ~(-1 << SBYTE4(v19));
            v21 = v26 >> 6;
          }
          v23[v21] |= v22;
        }
      }
LABEL_36:
      v15 += 2;
    }
    while (v15 != v16);
  }
}

uint64_t sub_1C49D9A18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_DWORD *)(a2 + 40))
  {
    v4 = 0;
    v5 = 0;
    while ((sub_1C4AD4FB8(a2, v5, (_QWORD *)(*(_QWORD *)(a1 + 328) + 8)) & 0xFFFFFFFE) != 6)
    {
      ++v5;
      v4 += 32;
      if (v5 >= *(_DWORD *)(a2 + 40))
        goto LABEL_5;
    }
    v12 = *(_QWORD *)(a2 + 32) + v4;
    v15 = v12;
    v16 = a2;
    v13 = *(unsigned int *)(a1 + 344);
    if (v13 >= *(_DWORD *)(a1 + 348))
    {
      sub_1C49DA4AC(a1 + 336, &v16, &v15);
    }
    else
    {
      v14 = (uint64_t *)(*(_QWORD *)(a1 + 336) + 16 * v13);
      *v14 = a2;
      v14[1] = v12;
      *(_DWORD *)(a1 + 344) = v13 + 1;
    }
  }
LABEL_5:
  result = sub_1C4C915C4(**(unsigned __int16 **)(a2 + 16));
  if ((result & 0xFF00000000) != 0)
  {
    if ((int)result > 192)
    {
      if ((_DWORD)result != 193)
        return result;
    }
    else if ((_DWORD)result != 100 && (_DWORD)result != 4 && (_DWORD)result != 11)
    {
      return result;
    }
    v9 = *(_QWORD *)(a2 + 32);
    v15 = v9;
    v16 = a2;
    v10 = *(unsigned int *)(a1 + 344);
    if (v10 >= *(_DWORD *)(a1 + 348))
    {
      return sub_1C49DA4AC(a1 + 336, &v16, &v15);
    }
    else
    {
      v11 = (uint64_t *)(*(_QWORD *)(a1 + 336) + 16 * v10);
      *v11 = a2;
      v11[1] = v9;
      *(_DWORD *)(a1 + 344) = v10 + 1;
    }
  }
  return result;
}

uint64_t sub_1C49D9B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1C4C915C4(**(unsigned __int16 **)(a2 + 16));
  if ((v4 & 0xFF00000000) != 0 && v4 == 100 || !*(_DWORD *)(a2 + 40))
    return 0;
  v5 = 0;
  while (sub_1C4AD4FB8(a2, v5, (_QWORD *)(*(_QWORD *)(a1 + 328) + 8)) != 6)
  {
    if (++v5 >= *(_DWORD *)(a2 + 40))
      return 0;
  }
  return v5 + 0x100000001;
}

void sub_1C49D9BE0(uint64_t a1)
{
  int v2;
  void **v3;
  void *v4;
  int v5;
  _BYTE *v6;
  unsigned int v7;
  int v8;
  void **v9;
  void *v10;
  int v11;
  _BYTE *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  _QWORD *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  void *v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  _BYTE v52[48];
  int v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 240) || *(_BYTE *)(a1 + 320))
    return;
  v2 = (**(uint64_t (***)(uint64_t))a1)(a1);
  v50 = v52;
  v51 = 0x600000000;
  sub_1C4765AA4((char *)&v50, (v2 + 63) >> 6, 0);
  v53 = v2;
  v3 = (void **)(a1 + 248);
  if (!*(_BYTE *)(a1 + 320))
  {
    v4 = (void *)(a1 + 264);
    *(_QWORD *)(a1 + 248) = a1 + 264;
    *(_QWORD *)(a1 + 256) = 0x600000000;
    if (v3 == &v50)
      goto LABEL_13;
    v5 = v51;
    if (!(_DWORD)v51)
      goto LABEL_13;
    if (v50 != v52)
    {
      *(_QWORD *)(a1 + 248) = v50;
      *(_DWORD *)(a1 + 256) = v5;
      *(_DWORD *)(a1 + 260) = HIDWORD(v51);
      v50 = v52;
      HIDWORD(v51) = 0;
      goto LABEL_12;
    }
    if (v51 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 248, a1 + 264, v51, 8);
      v7 = v51;
      if (!(_DWORD)v51)
        goto LABEL_11;
      v6 = v50;
      v4 = *v3;
    }
    else
    {
      v6 = v52;
      v7 = v51;
    }
    memcpy(v4, v6, 8 * v7);
LABEL_11:
    *(_DWORD *)(a1 + 256) = v5;
    v2 = v53;
LABEL_12:
    LODWORD(v51) = 0;
LABEL_13:
    *(_DWORD *)(a1 + 312) = v2;
    *(_BYTE *)(a1 + 320) = 1;
    goto LABEL_14;
  }
  if (v3 != &v50)
  {
    v42 = v50;
    if (v50 != v52)
    {
      v48 = *(void **)(a1 + 248);
      if (v48 != (void *)(a1 + 264))
      {
        free(v48);
        v42 = v50;
      }
      *(_QWORD *)(a1 + 248) = v42;
      *(_QWORD *)(a1 + 256) = v51;
      v50 = v52;
      HIDWORD(v51) = 0;
      goto LABEL_77;
    }
    v43 = v51;
    v44 = *(unsigned int *)(a1 + 256);
    if (v44 >= v51)
    {
      if ((_DWORD)v51)
        memmove(*v3, v52, 8 * v51);
LABEL_76:
      *(_DWORD *)(a1 + 256) = v43;
LABEL_77:
      LODWORD(v51) = 0;
      v2 = v53;
      goto LABEL_78;
    }
    if (*(_DWORD *)(a1 + 260) < v51)
    {
      *(_DWORD *)(a1 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 248, a1 + 264, v43, 8);
    }
    else if ((_DWORD)v44)
    {
      memmove(*v3, v52, 8 * v44);
LABEL_94:
      if (v44 != v51)
        memcpy((char *)*v3 + 8 * v44, (char *)v50 + 8 * v44, 8 * v51 - 8 * v44);
      goto LABEL_76;
    }
    v44 = 0;
    goto LABEL_94;
  }
LABEL_78:
  *(_DWORD *)(a1 + 312) = v2;
LABEL_14:
  if (v50 != v52)
    free(v50);
  v8 = (**(uint64_t (***)(uint64_t))a1)(a1);
  v50 = v52;
  v51 = 0x600000000;
  sub_1C4765AA4((char *)&v50, (v8 + 63) >> 6, 0);
  v53 = v8;
  v9 = (void **)(a1 + 168);
  if (!*(_BYTE *)(a1 + 240))
  {
    v10 = (void *)(a1 + 184);
    *(_QWORD *)(a1 + 168) = a1 + 184;
    *(_QWORD *)(a1 + 176) = 0x600000000;
    if (v9 == &v50)
      goto LABEL_25;
    v11 = v51;
    if (!(_DWORD)v51)
      goto LABEL_25;
    if (v50 != v52)
    {
      *(_QWORD *)(a1 + 168) = v50;
      v41 = HIDWORD(v51);
      *(_DWORD *)(a1 + 176) = v11;
      *(_DWORD *)(a1 + 180) = v41;
      v50 = v52;
      HIDWORD(v51) = 0;
      goto LABEL_24;
    }
    if (v51 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 168, a1 + 184, v51, 8);
      v13 = v51;
      if (!(_DWORD)v51)
        goto LABEL_23;
      v12 = v50;
      v10 = *v9;
    }
    else
    {
      v12 = v52;
      v13 = v51;
    }
    memcpy(v10, v12, 8 * v13);
LABEL_23:
    *(_DWORD *)(a1 + 176) = v11;
    v8 = v53;
LABEL_24:
    LODWORD(v51) = 0;
LABEL_25:
    *(_DWORD *)(a1 + 232) = v8;
    *(_BYTE *)(a1 + 240) = 1;
    goto LABEL_26;
  }
  if (v9 != &v50)
  {
    v45 = v50;
    if (v50 != v52)
    {
      v49 = *(void **)(a1 + 168);
      if (v49 != (void *)(a1 + 184))
      {
        free(v49);
        v45 = v50;
      }
      *(_QWORD *)(a1 + 168) = v45;
      *(_QWORD *)(a1 + 176) = v51;
      v50 = v52;
      HIDWORD(v51) = 0;
      goto LABEL_85;
    }
    v46 = v51;
    v47 = *(unsigned int *)(a1 + 176);
    if (v47 >= v51)
    {
      if ((_DWORD)v51)
        memmove(*v9, v52, 8 * v51);
LABEL_84:
      *(_DWORD *)(a1 + 176) = v46;
LABEL_85:
      LODWORD(v51) = 0;
      v8 = v53;
      goto LABEL_86;
    }
    if (*(_DWORD *)(a1 + 180) < v51)
    {
      *(_DWORD *)(a1 + 176) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 168, a1 + 184, v46, 8);
    }
    else if ((_DWORD)v47)
    {
      memmove(*v9, v52, 8 * v47);
LABEL_99:
      if (v47 != v51)
        memcpy((char *)*v9 + 8 * v47, (char *)v50 + 8 * v47, 8 * v51 - 8 * v47);
      goto LABEL_84;
    }
    v47 = 0;
    goto LABEL_99;
  }
LABEL_86:
  *(_DWORD *)(a1 + 232) = v8;
LABEL_26:
  if (v50 != v52)
    free(v50);
  v14 = *(unsigned int *)(a1 + 344);
  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 336);
    v16 = v15 + 16 * v14;
    do
    {
      v17 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 8))(a1, *(_QWORD *)(v15 + 8));
      if ((v18 & 0xFF00000000) != 0)
      {
        if ((_DWORD)v18)
        {
          if (HIDWORD(v17) != (_DWORD)v17)
          {
            v19 = 0;
            do
            {
              if (((v18 >> v19) & 1) != 0)
                *((_QWORD *)*v3 + ((v17 + v19) >> 6)) |= 1 << (v17
                                                                             + v19);
              ++v19;
            }
            while (HIDWORD(v17) - (_DWORD)v17 != v19);
          }
          goto LABEL_49;
        }
        if (HIDWORD(v17) != (_DWORD)v17)
        {
          v27 = v17 >> 6;
          v28 = -1 << v17;
          if (v17 >> 6 == HIDWORD(v17) >> 6)
          {
            v25 = (1 << SBYTE4(v17)) + v28;
            v29 = *v3;
          }
          else
          {
            v29 = *v3;
            *((_QWORD *)*v3 + v27) |= v28;
            v33 = (v17 + 63) & 0xFFFFFFC0;
            if (v33 + 64 <= HIDWORD(v17))
            {
              do
              {
                v29[v33 >> 6] = -1;
                v34 = v33 + 64;
                v36 = v33 + 128;
                v33 += 64;
              }
              while (v36 <= HIDWORD(v17));
            }
            else
            {
              v34 = (v17 + 63) & 0xFFFFFFC0;
            }
            if (v34 >= HIDWORD(v17))
              goto LABEL_49;
            v25 = ~(-1 << SBYTE4(v17));
            v27 = v34 >> 6;
          }
          v26 = &v29[v27];
          goto LABEL_48;
        }
      }
      else
      {
        v20 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, *(_QWORD *)(v15 + 8));
        if ((_DWORD)v20 != HIDWORD(v20))
        {
          v21 = v20 >> 6;
          v22 = -1 << v20;
          if (v20 >> 6 == HIDWORD(v20) >> 6)
          {
            v23 = ~((1 << SBYTE4(v20)) + v22);
            v24 = (char *)*v3 + 8 * v21;
            goto LABEL_41;
          }
          v37 = *v3;
          *((_QWORD *)*v3 + v21) &= ~v22;
          v38 = (v20 + 63) & 0xFFFFFFC0;
          if (v38 + 64 <= HIDWORD(v20))
          {
            do
            {
              v37[v38 >> 6] = 0;
              v39 = v38 + 64;
              v40 = v38 + 128;
              v38 += 64;
            }
            while (v40 <= HIDWORD(v20));
          }
          else
          {
            v39 = (v20 + 63) & 0xFFFFFFC0;
          }
          if (v39 < HIDWORD(v20))
          {
            v23 = -1 << SBYTE4(v20);
            v24 = &v37[v39 >> 6];
LABEL_41:
            *v24 &= v23;
          }
          if (v21 == HIDWORD(v20) >> 6)
          {
            v25 = (1 << SBYTE4(v20)) + v22;
            v26 = (char *)*v9 + 8 * v21;
          }
          else
          {
            v30 = *v9;
            *((_QWORD *)*v9 + v21) |= v22;
            v31 = (v20 + 63) & 0xFFFFFFC0;
            if (v31 + 64 <= HIDWORD(v20))
            {
              do
              {
                v30[v31 >> 6] = -1;
                v32 = v31 + 64;
                v35 = v31 + 128;
                v31 += 64;
              }
              while (v35 <= HIDWORD(v20));
            }
            else
            {
              v32 = (v20 + 63) & 0xFFFFFFC0;
            }
            if (v32 >= HIDWORD(v20))
              goto LABEL_49;
            v25 = ~(-1 << SBYTE4(v20));
            v26 = &v30[v32 >> 6];
          }
LABEL_48:
          *v26 |= v25;
        }
      }
LABEL_49:
      v15 += 16;
    }
    while (v15 != v16);
  }
}

uint64_t sub_1C49DA288(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 *v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 *v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 v14;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v7 = *(__int128 **)a2;
        v8 = *(_OWORD **)a1;
        v9 = 16 * v4;
        do
        {
          v10 = *v7++;
          *v8++ = v10;
          v9 -= 16;
        }
        while (v9);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) >= v4)
      {
        if ((_DWORD)v5)
        {
          v11 = *(__int128 **)a2;
          v12 = *(_OWORD **)a1;
          v13 = 16 * v5;
          do
          {
            v14 = *v11++;
            *v12++ = v14;
            v13 -= 16;
          }
          while (v13);
        }
        else
        {
          v5 = 0;
        }
        v6 = v4;
      }
      else
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4, 16);
        v5 = 0;
        v6 = *(unsigned int *)(a2 + 8);
      }
      if (v5 != v6)
        memcpy((void *)(*(_QWORD *)a1 + 16 * v5), (const void *)(*(_QWORD *)a2 + 16 * v5), *(_QWORD *)a2 + 16 * v6 - (*(_QWORD *)a2 + 16 * v5));
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t sub_1C49DA374(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = sub_1C4AD4FB8(v4, (unint64_t)(a2 - *(_QWORD *)(v4 + 32)) >> 5, (_QWORD *)(*(_QWORD *)(a1 + 328) + 8));
  v6 = sub_1C4C915C4(**(unsigned __int16 **)(v4 + 16));
  if ((v5 - 8) > 0xFFFFFFFD || (v6 & 0xFF00000000) == 0)
  {
    if (*(_BYTE *)a2 == 7)
      v8 = *(_DWORD *)(a2 + 4);
    else
      v8 = *(_DWORD *)(a2 + 16);
    v10 = *(_QWORD *)(v4 + 48);
    if ((v10 & 7) != 0)
    {
      v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      v11 = v10 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v4 + 48) = v10 & 0xFFFFFFFFFFFFFFF8;
    }
    v15 = *(_QWORD *)(v11 + 24);
    v14 = (unint64_t *)(v11 + 24);
    if ((v15 & 0xFFFFFFFFFFFFFFF9) != 0)
    {
      v17 = sub_1C4825F50(v14) + 7;
      if ((_DWORD)v16 == 1)
      v18 = (v17 >> 4) & 0x7FFFFFFF;
    }
    else
    {
      LODWORD(v18) = 0x7FFFFFFF;
    }
    v13 = v18 + v8;
    v12 = v8;
  }
  else
  {
    if ((int)v6 > 99)
    {
      if ((_DWORD)v6 != 100 && (_DWORD)v6 != 193)
        goto LABEL_28;
    }
    else if ((_DWORD)v6 != 4 && (_DWORD)v6 != 11)
    {
LABEL_28:
      llvm::report_fatal_error((llvm *)"Unexpected Opcode", (const char *)1);
    }
    v12 = 0;
    v13 = *(unsigned int *)(a1 + 864);
  }
  return v12 | (v13 << 32);
}

uint64_t sub_1C49DA4AC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *a2;
  v5 = *a3;
  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 16);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1 + 16 * v6);
  *v7 = v4;
  v7[1] = v5;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v7;
  return *(_QWORD *)a1 + 16 * v7 - 16;
}

uint64_t sub_1C49DA524(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v6;
  void *v7;

  *(_QWORD *)a1 = &unk_1E7FA95C0;
  v2 = *(void **)(a1 + 336);
  if (v2 != (void *)(a1 + 352))
    free(v2);
  if (*(_BYTE *)(a1 + 320))
  {
    v3 = *(void **)(a1 + 248);
    if (v3 != (void *)(a1 + 264))
      free(v3);
    *(_BYTE *)(a1 + 320) = 0;
  }
  if (*(_BYTE *)(a1 + 240))
  {
    v4 = *(void **)(a1 + 168);
    if (v4 != (void *)(a1 + 184))
      free(v4);
    *(_BYTE *)(a1 + 240) = 0;
  }
  if (*(_BYTE *)(a1 + 160))
  {
    v7 = *(void **)(a1 + 88);
    if (v7 != (void *)(a1 + 104))
      free(v7);
    *(_BYTE *)(a1 + 160) = 0;
  }
  if (*(_BYTE *)(a1 + 80))
  {
    v6 = *(void **)(a1 + 8);
    if (v6 != (void *)(a1 + 24))
      free(v6);
    *(_BYTE *)(a1 + 80) = 0;
  }
  return a1;
}

uint64_t sub_1C49DA5F4(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 880 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 880 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

uint64_t **sub_1C49DA68C(uint64_t **a1, unsigned int *a2, _DWORD *a3, uint64_t **a4)
{
  uint64_t *v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t **v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v7;
        v11 = *((_DWORD *)v7 + 8);
        if (v9 >= v11)
          break;
        v7 = *v10;
        v8 = v10;
        if (!*v10)
          goto LABEL_10;
      }
      if (v11 >= v9)
        break;
      v7 = v10[1];
      if (!v7)
      {
        v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_10:
    v12 = (uint64_t *)v10;
    v10 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v10 + 8) = *a3;
    v10[5] = *a4;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v8 = (uint64_t *)v10;
    v13 = (uint64_t *)**a1;
    v14 = (uint64_t *)v10;
    if (v13)
    {
      *a1 = v13;
      v14 = *v8;
    }
    sub_1C4768E74(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v10;
}

unsigned int **sub_1C49DA774(unsigned int **a1, unint64_t a2, unsigned int *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  char *v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x38E38E38E38E38FLL)
      abort();
    v5 = 9 * a2;
    v6 = 72 * a2;
    v7 = (unsigned int *)operator new(72 * a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = (char *)&v7[2 * v5];
    a1[2] = (unsigned int *)v8;
    while (1)
    {
      v9 = v7 + 4;
      *(_QWORD *)v7 = v7 + 4;
      *((_QWORD *)v7 + 1) = 0x600000000;
      if (v7 == a3)
        goto LABEL_10;
      v10 = a3[2];
      if (!a3[2])
        goto LABEL_10;
      if (v10 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v7, (uint64_t)(v7 + 4), a3[2], 8);
        v11 = a3[2];
        if (!(_DWORD)v11)
          goto LABEL_9;
        v9 = *(void **)v7;
      }
      else
      {
        v11 = a3[2];
      }
      memcpy(v9, *(const void **)a3, 8 * v11);
LABEL_9:
      v7[2] = v10;
LABEL_10:
      v7[16] = a3[16];
      v7 += 18;
      v6 -= 72;
      if (!v6)
      {
        a1[1] = (unsigned int *)v8;
        return a1;
      }
    }
  }
  return a1;
}

uint64_t **sub_1C49DA87C(uint64_t **a1, unsigned int *a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t **v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *v14;

  v6 = operator new(0x30uLL);
  v7 = v6;
  v8 = *a2;
  *((_DWORD *)v6 + 8) = *a2;
  v6[5] = *a3;
  v9 = a1 + 1;
  v10 = a1[1];
  if (v10)
  {
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v10;
        v12 = *((_DWORD *)v10 + 8);
        if (v8 >= v12)
          break;
        v10 = (uint64_t *)*v10;
        v9 = v11;
        if (!*v11)
          goto LABEL_9;
      }
      if (v12 >= v8)
        break;
      v10 = (uint64_t *)v10[1];
      if (!v10)
      {
        v9 = v11 + 1;
        goto LABEL_9;
      }
    }
    operator delete(v6);
    return v11;
  }
  else
  {
    v11 = a1 + 1;
LABEL_9:
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v11;
    *v9 = v6;
    v13 = (uint64_t *)**a1;
    v14 = v6;
    if (v13)
    {
      *a1 = v13;
      v14 = *v9;
    }
    sub_1C4768E74(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v7;
}

uint64_t sub_1C49DA960(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 8 * v4);
      goto LABEL_8;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4, 8);
    }
    else if ((_DWORD)v5)
    {
      memmove(*(void **)a1, *(const void **)a2, 8 * v5);
LABEL_6:
      v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v5), (const void *)(*(_QWORD *)a2 + 8 * v5), *(_QWORD *)a2 + 8 * v6 - (*(_QWORD *)a2 + 8 * v5));
LABEL_8:
      *(_DWORD *)(a1 + 8) = v4;
      return a1;
    }
    v5 = 0;
    goto LABEL_6;
  }
  return a1;
}

uint64_t sub_1C49DAA2C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C49D7F14(v0);
}

uint64_t sub_1C49DAA54(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "AGX3 Expand Pseudos";
  *(_QWORD *)(v2 + 8) = 19;
  *(_QWORD *)(v2 + 16) = "agx3-expand-pseudos";
  *(_QWORD *)(v2 + 24) = 19;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EF828;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C49DAAE0;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_QWORD *sub_1C49DAAE0()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8EF828);
  *result = &off_1E7FA9618;
  return result;
}

void sub_1C49DAB20(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C49DABB4(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C49DAC40()
{
  return "AGX3 expand pseudo inst pass";
}

uint64_t sub_1C49DAC50(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  int v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  _WORD *v19;
  unsigned __int16 *v20;
  __int16 v21;
  unsigned __int16 v22;
  uint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unsigned __int16 *v31;
  unsigned __int16 *v32;
  int v33;
  int v34;
  unsigned __int16 *v35;
  unsigned __int16 v36;
  int v37;
  int v38;
  uint64_t v39;
  llvm::BasicBlock *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  llvm::BasicBlock *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t MachineMemOperand;
  _QWORD *v58;
  int *v59;
  int v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  llvm::MachineFunction *v64;
  unint64_t *v65;
  unint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  __int32 v73;
  uint64_t v74;
  llvm::MachineFunction *v75;
  unint64_t *v76;
  unint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  llvm::MachineFunction *v84;
  uint64_t v85;
  unint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  __int32 v93;
  uint64_t v94;
  llvm::MachineFunction *v95;
  unint64_t *v96;
  unint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  __int32 v104;
  _QWORD *v105;
  __int32 v106;
  _QWORD *v107;
  char v108;
  uint64_t v109;
  llvm::MachineFunction *v110;
  unint64_t *v111;
  unint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  unsigned int v119;
  _QWORD *v120;
  __int32 v121;
  uint64_t v122;
  llvm::MachineFunction *v123;
  uint64_t v124;
  unint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  _QWORD *v131;
  __int32 v132;
  uint64_t v133;
  llvm::MachineFunction *v134;
  unint64_t *v135;
  unint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  llvm::MachineFunction *v143;
  uint64_t v144;
  unint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  _QWORD *v151;
  __int32 v152;
  uint64_t v153;
  llvm::MachineFunction *v154;
  unint64_t *v155;
  unint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  _QWORD *v162;
  __int32 v163;
  _QWORD *v164;
  __int32 v165;
  _QWORD *v166;
  char v167;
  uint64_t v168;
  llvm::MachineFunction *v169;
  unint64_t *v170;
  unint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  _QWORD *v177;
  __int32 v178;
  uint64_t v179;
  llvm::MachineFunction *v180;
  unint64_t *v181;
  unint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  llvm::MachineFunction *v190;
  unint64_t *v191;
  unint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  _QWORD *v198;
  int v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  unsigned __int16 *v206;
  unsigned __int16 *v207;
  int v208;
  int v209;
  int v210;
  unsigned int v211;
  unsigned __int16 *v212;
  unsigned __int16 *v213;
  int v214;
  int v215;
  int v216;
  _QWORD *v217;
  int v218;
  uint64_t v219;
  _QWORD *v220;
  unsigned __int16 *v221;
  unsigned __int16 *v222;
  int v223;
  int v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t *v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t *v311;
  char *v312;
  char *v313;
  _BYTE *v314;
  _BYTE *v315;
  _QWORD *v316;
  unint64_t *v317;
  uint64_t v318;
  llvm::MachineFunction *v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  unint64_t *v326;
  unint64_t *v327;
  unint64_t i;
  uint64_t v329;
  uint64_t v330;
  _BYTE *v331;
  int v332;
  uint64_t v333;
  BOOL v334;
  BOOL v335;
  _BOOL4 v336;
  const llvm::MachineBasicBlock *v337;
  _BOOL4 v338;
  _BOOL4 v339;
  unsigned __int16 *v340;
  int v341;
  int v342;
  llvm::MachineFunction **v344;
  uint64_t v345;
  _BOOL4 v346;
  unint64_t *v347;
  uint64_t v348;
  uint64_t v349;
  llvm::MachineFunction *v350;
  void *v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  unint64_t v355;
  unsigned int v356;
  unsigned __int16 *v357;
  unsigned __int16 *j;
  int v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  llvm::MachineFunction *v364;
  unsigned __int8 *v365;
  unint64_t v366;
  uint64_t v367;
  llvm::MachineBasicBlock *v368;
  unint64_t *v369;
  llvm::MachineInstr *k;
  uint64_t v371;
  uint64_t v372;
  int *v373;
  int v374;
  unint64_t v375;
  uint64_t v376;
  _BYTE *v377;
  char *v378;
  char *v379;
  uint64_t v380;
  llvm::MachineInstr *v381;
  int v382;
  int v383;
  char *v384;
  int v385;
  int v386;
  char *v387;
  char *v388;
  uint64_t v389;
  uint64_t v390;
  __int32 v391;
  _QWORD *v392;
  uint64_t v393;
  llvm::BasicBlock *v394;
  unint64_t v395;
  uint64_t v396;
  unint64_t *v397;
  unint64_t v398;
  unint64_t *v399;
  llvm::MachineInstr *v400;
  unint64_t *v401;
  char *v403;
  char *v404;
  int v405;
  unint64_t v406;
  _QWORD *v407;
  _QWORD *v408;
  _QWORD *v409;
  uint64_t v410;
  unint64_t v411;
  uint64_t v412;
  unint64_t v413;
  char *v414;
  char *v415;
  char *v416;
  llvm::BasicBlock *v417;
  unint64_t v418;
  uint64_t v419;
  unint64_t *v420;
  unint64_t v421;
  char *v422;
  char *v423;
  int v424;
  unint64_t v425;
  _QWORD *v426;
  _QWORD *v427;
  _QWORD *v428;
  uint64_t v429;
  unint64_t v430;
  uint64_t v431;
  unint64_t v432;
  char *v433;
  char *v434;
  char *v435;
  void **v436;
  uint64_t v437;
  uint64_t v438;
  llvm::MachineFunction *v439;
  void *v440;
  unint64_t v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  unint64_t v446;
  uint64_t v447;
  llvm::MachineFunction *v448;
  void *v449;
  unint64_t v450;
  unint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  unint64_t v455;
  uint64_t v456;
  llvm::MachineFunction *v457;
  void *v458;
  unint64_t v459;
  unint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t v464;
  uint64_t v465;
  unint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  unint64_t v470;
  unint64_t *v471;
  uint64_t v472;
  llvm::MachineFunction *v473;
  void *v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  unint64_t v480;
  int v481;
  uint64_t v482;
  llvm::MachineFunction *v483;
  void *v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  unint64_t v489;
  uint64_t v490;
  llvm::MachineFunction *v491;
  void *v492;
  unint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  unint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  unsigned int v502;
  char *v503;
  uint64_t v504;
  uint64_t RegClassConstraint;
  const llvm::TargetRegisterInfo *v506;
  uint64_t v507;
  unsigned __int16 ***CommonSubClass;
  uint64_t v509;
  uint64_t v510;
  uint64_t *v511;
  uint64_t *v512;
  _QWORD *v513;
  uint64_t v514;
  unint64_t v515;
  uint64_t v516;
  unsigned int v517;
  uint64_t v518;
  uint64_t v519;
  _QWORD *v520;
  unsigned int v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  unint64_t v526;
  unint64_t v527;
  unsigned int v528;
  uint64_t v529;
  unsigned int v530;
  unint64_t v531;
  uint64_t *v532;
  uint64_t v533;
  uint64_t v534;
  unint64_t v535;
  __int16 v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  _QWORD *v540;
  _WORD *v541;
  unsigned __int16 v542;
  int v543;
  int v544;
  uint64_t v545;
  int v546;
  unsigned __int16 *v547;
  int v548;
  int v549;
  uint64_t v550;
  __int32 v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t *v554;
  _QWORD *v555;
  uint64_t *v556;
  uint64_t v557;
  uint64_t v558;
  unint64_t *v559;
  uint64_t v560;
  unint64_t v561;
  _BOOL4 v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  unint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t *v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t *v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t *v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t *v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t *v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t *v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t *v614;
  uint64_t v615;
  uint64_t v616;
  unint64_t v617;
  unint64_t *v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t *v623;
  uint64_t v624;
  uint64_t v625;
  _BOOL4 v626;
  int v627;
  uint64_t v628;
  BOOL v629;
  uint64_t v630;
  uint64_t v631;
  _DWORD *v633;
  int v634;
  unsigned int v635;
  uint64_t v636;
  uint64_t v637;
  int v638;
  uint64_t *v639;
  unsigned int v640;
  _QWORD *v641;
  unint64_t v642;
  _WORD *v643;
  unsigned __int16 *v644;
  __int16 v645;
  unsigned __int16 v646;
  int v647;
  _QWORD *v648;
  uint64_t v649;
  unint64_t v650;
  _BOOL4 v651;
  int RegisterUseOperandIdx;
  uint64_t v653;
  int v654;
  unint64_t v655;
  int v656;
  uint64_t v657;
  int v658;
  int v659;
  unsigned int v660;
  uint64_t v661;
  unsigned int v662;
  uint64_t v663;
  uint64_t v664;
  unsigned int v665;
  llvm::MachineFunction *v666;
  llvm::MachineInstr *v667;
  llvm::MachineInstr *v668;
  unsigned int v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  unsigned int v673;
  unsigned __int16 ***v674;
  uint64_t *v675;
  uint64_t v676;
  _QWORD *v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  unint64_t v685;
  unint64_t v686;
  unsigned int v687;
  uint64_t v688;
  _QWORD *v689;
  char *v690;
  char *v691;
  char v692;
  _BYTE *v693;
  _BYTE *v694;
  uint64_t v695;
  int v696;
  char v697;
  uint64_t v698;
  unint64_t *v699;
  unsigned __int8 v700;
  uint64_t v701;
  _QWORD *v702;
  unint64_t *v703;
  uint64_t v704;
  llvm::MachineFunction *v705;
  unint64_t v706;
  unint64_t *v707;
  unint64_t *v708;
  unint64_t *v709;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  unint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  unint64_t *v719;
  _QWORD *v720;
  unint64_t m;
  unsigned int v722;
  unint64_t v723;
  _WORD *v724;
  unsigned __int16 *v725;
  __int16 v726;
  unsigned __int16 v727;
  unsigned int v728;
  int v729;
  int v730;
  uint64_t *v731;
  char *v732;
  char *v733;
  uint64_t v734;
  int v735;
  int v736;
  char *v737;
  int v738;
  int v739;
  uint64_t v740;
  unint64_t *v741;
  uint64_t v742;
  unint64_t v743;
  int v744;
  uint64_t v745;
  _QWORD *v746;
  unint64_t *v747;
  unsigned __int16 *v748;
  unsigned __int16 *v749;
  _QWORD *v750;
  unsigned __int16 *v751;
  unsigned __int16 *v752;
  int v753;
  int v754;
  int v755;
  _QWORD *v756;
  llvm::MachineInstr *v757;
  unint64_t v758;
  uint64_t v759;
  _DWORD *v760;
  _DWORD *v761;
  unsigned int v762;
  unint64_t v763;
  _WORD *v764;
  unsigned __int16 v765;
  uint64_t v766;
  _QWORD *n;
  unsigned int v768;
  _DWORD *v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  unsigned int v773;
  unsigned int v774;
  unsigned int v775;
  uint64_t v776;
  int v777;
  unsigned int *v778;
  uint64_t v779;
  int *v780;
  uint64_t v781;
  int v782;
  int v783;
  int *v784;
  int v785;
  int v786;
  uint64_t v787;
  unint64_t *v788;
  uint64_t v789;
  unint64_t v790;
  unint64_t v791;
  int v792;
  _BOOL4 v793;
  unint64_t FirstTerminator;
  unint64_t v797;
  unint64_t *v798;
  unsigned __int16 *v799;
  uint64_t v800;
  __int16 v801;
  uint64_t v802;
  unint64_t v804;
  unint64_t v805;
  unint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t *v811;
  uint64_t v812;
  uint64_t v813;
  unint64_t *v814;
  unint64_t v815;
  uint64_t v816;
  unint64_t v817;
  int v818;
  unint64_t v819;
  unsigned __int16 *v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v824;
  int v825;
  __int16 v826;
  unsigned __int16 *v827;
  uint64_t v828;
  unint64_t v829;
  unint64_t v830;
  unint64_t v831;
  unint64_t v832;
  unsigned int v833;
  _QWORD *v834;
  uint64_t *v835;
  unint64_t v836;
  uint64_t v837;
  BOOL v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t *v845;
  uint64_t v846;
  uint64_t v847;
  int v848;
  uint64_t v849;
  llvm::MachineBasicBlock *v850;
  _BOOL4 v851;
  unint64_t *v852;
  int v853;
  char v854;
  char v855;
  unint64_t *v856;
  uint64_t v857;
  unsigned int v858;
  int v859;
  char v860;
  unint64_t *v861;
  llvm::MachineMemOperand *v862;
  uint64_t v863;
  llvm::MachineFunction *v864;
  uint64_t v865;
  unint64_t *v866;
  char *v867;
  uint64_t v868;
  _QWORD *v869;
  unint64_t v870;
  unint64_t v871;
  unsigned int v872;
  unsigned int v873;
  uint64_t v874;
  _QWORD *v875;
  uint64_t v876;
  unint64_t *v877;
  unint64_t v878;
  _QWORD *v879;
  _QWORD *v880;
  uint64_t v881;
  int v882;
  llvm::MachineBasicBlock *v883;
  unint64_t *v884;
  uint64_t v885;
  llvm::MachineInstr *v886;
  llvm::MachineInstr *v887;
  _QWORD v888[2];
  int v889;
  void *v890;
  uint64_t v891;
  _BYTE v892[32];
  int64x2_t v893;
  uint64_t v894;
  uint64_t v895;
  unsigned int v896;
  void *v897;
  uint64_t v898;
  _BYTE v899[24];
  void *v900[2];
  _BYTE v901[16];
  void *v902;
  uint64_t v903;
  unint64_t v904;
  void *v905;
  __int128 v906;
  __int128 v907;
  __int128 v908;
  __int128 v909;
  void *v910[2];
  uint64_t v911;
  uint64_t v912;
  _QWORD v913[2];
  void *v914;
  uint64_t v915;
  uint64_t v916;
  int v917;
  uint64_t v918;
  void *v919;
  uint64_t v920;
  _BYTE v921[24];
  _QWORD **v922;
  _QWORD *v923;
  uint64_t v924;
  int v925;
  void *v926;
  uint64_t v927;
  _BYTE v928[48];
  int v929;
  void *v930;
  uint64_t v931;
  _BYTE v932[48];
  int v933;
  void *v934;
  uint64_t v935;
  _BYTE v936[48];
  int v937;
  int64x2_t v938;
  uint64_t v939;
  _BYTE v940[40];
  unsigned int v941;
  int v942;
  uint64_t v943;

  v3 = a1;
  v943 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 248) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8), *(_QWORD *)a2);
  *(_QWORD *)(v3 + 256) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(v3 + 264) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(v3 + 272) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v3 + 280) = *(_QWORD *)(a2 + 344);
  *(_DWORD *)(v3 + 288) = 16843009;
  *(_BYTE *)(v3 + 292) = 0;
  v4 = (unint64_t *)(a2 + 320);
  v849 = a2;
  v5 = *(unint64_t **)(a2 + 320);
  v856 = v4;
  v885 = v3;
  v6 = 0;
  if (v5 == v4)
    goto LABEL_333;
  v7 = v940;
  do
  {
    v910[0] = &v911;
    v910[1] = (void *)0x800000000;
    v878 = v5[4];
    v8 = v5[7];
    v9 = *(_QWORD *)(v3 + 264);
    v939 = 0x600000000;
    v938.i64[1] = (uint64_t)v940;
    v938.i64[0] = v9;
    v10 = *(_DWORD *)(v9 + 44);
    v942 = v10;
    v11 = v10 + 63;
    if ((v10 + 63) < 0x40)
    {
      v15 = 0;
    }
    else
    {
      v12 = v11 >> 6;
      if (v11 >= 0x1C0)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v938.i64[1], (uint64_t)v940, v11 >> 6, 8);
        v7 = (_BYTE *)v938.i64[1];
        v13 = v939;
        LOBYTE(v10) = v942;
        v14 = v939;
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
      bzero(&v7[8 * v13], 8 * v12);
      v15 = v14 + v12;
      LODWORD(v939) = v14 + v12;
    }
    if ((v10 & 0x3F) != 0)
      *(_QWORD *)&v7[8 * v15 - 8] &= ~(-1 << (v10 & 0x3F));
    v16 = (unint64_t)(v5 + 6);
    llvm::LiveRegUnits::addLiveOuts((llvm::LiveRegUnits *)&v938, (const llvm::MachineBasicBlock *)v5);
    if (v938.i64[0])
      v17 = (_QWORD *)(v938.i64[0] + 8);
    else
      v17 = 0;
    v18 = *(unsigned int *)(*v17 + 6424);
    v19 = (_WORD *)(v17[6] + ((v18 >> 3) & 0x1FFFFFFE));
    v21 = *v19;
    v20 = v19 + 1;
    v22 = v21 + 267 * (v18 & 0xF);
    do
    {
      v23 = (1 << v22) & *(_QWORD *)(v938.i64[1] + 8 * (v22 >> 6));
      if (v23)
        break;
      v24 = *v20++;
      v22 += v24;
    }
    while (v24);
    if (v16 == v8)
    {
      v25 = 0;
      goto LABEL_316;
    }
    v863 = v23;
    v25 = 0;
    v874 = v878 + 320;
    v877 = v5 + 6;
    v865 = v878 + 128;
    do
    {
      v26 = v16;
      while (1)
      {
        v16 = *(_QWORD *)v26 & 0xFFFFFFFFFFFFFFF8;
        if (v16)
        {
          v27 = *(_QWORD *)v26 & 0xFFFFFFFFFFFFFFF8;
          if ((*(_BYTE *)v16 & 4) != 0)
            goto LABEL_24;
        }
        else
        {
          v27 = 0;
        }
        while ((*(_WORD *)(v27 + 44) & 4) != 0)
          v27 = *(_QWORD *)v27 & 0xFFFFFFFFFFFFFFF8;
LABEL_24:
        if (**(_WORD **)(v27 + 16) == 264)
          break;
        llvm::LiveRegUnits::stepBackward((llvm::LiveRegUnits *)&v938, (const llvm::MachineInstr *)v27);
        v26 = *(_QWORD *)v26 & 0xFFFFFFFFFFFFFFF8;
        if (!v26 || (*(_BYTE *)v26 & 4) == 0)
        {
          while ((*(_WORD *)(v26 + 44) & 4) != 0)
            v26 = *(_QWORD *)v26 & 0xFFFFFFFFFFFFFFF8;
        }
        if (v26 == v8)
          goto LABEL_316;
      }
      if (v863)
      {
        v28 = v938.i64[1];
        if (v938.i64[0])
          v29 = (_QWORD *)(v938.i64[0] + 8);
        else
          v29 = 0;
        v30 = *(unsigned int *)(*v29 + 6424);
        v31 = (unsigned __int16 *)(v29[6] + ((v30 >> 3) & 0x1FFFFFFE));
        v33 = *v31;
        v32 = v31 + 1;
        v34 = v33 + 267 * (v30 & 0xF);
        v35 = v32;
        v36 = v34;
        while (((*(_QWORD *)(v938.i64[1] + 8 * (v36 >> 6)) >> v36) & 1) == 0)
        {
          v37 = *v35++;
          v36 += v37;
          if (!v37)
          {
            do
            {
              *(_QWORD *)(v28 + 8 * ((unsigned __int16)v34 >> 6)) |= 1 << v34;
              v38 = *v32++;
              v34 += v38;
            }
            while (v38);
            v16 = *(_QWORD *)v26 & 0xFFFFFFFFFFFFFFF8;
            break;
          }
        }
      }
      if (!v16 || (*(_BYTE *)v16 & 4) == 0)
      {
        while ((*(_WORD *)(v16 + 44) & 4) != 0)
          v16 = *(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8;
      }
      v39 = LODWORD(v910[1]);
      if (LODWORD(v910[1]) >= (unint64_t)HIDWORD(v910[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v910, (uint64_t)&v911, LODWORD(v910[1]) + 1, 8);
        v39 = LODWORD(v910[1]);
      }
      *((_QWORD *)v910[0] + v39) = v16;
      ++LODWORD(v910[1]);
      v40 = (llvm::BasicBlock *)v5[2];
      v41 = *(_QWORD *)(v878 + 312);
      if (v41)
        *(_QWORD *)(v878 + 312) = *(_QWORD *)v41;
      else
        v41 = sub_1C484358C(v865, 232, 3);
      *(_QWORD *)v41 = 0;
      *(_QWORD *)(v41 + 8) = 0;
      *(_QWORD *)(v41 + 16) = v40;
      *(_DWORD *)(v41 + 24) = -1;
      *(_QWORD *)(v41 + 48) = (v41 + 48) | 4;
      *(_QWORD *)(v41 + 56) = v41 + 48;
      *(_BYTE *)(v41 + 144) = 0;
      *(_OWORD *)(v41 + 64) = 0u;
      *(_OWORD *)(v41 + 80) = 0u;
      *(_OWORD *)(v41 + 96) = 0u;
      *(_OWORD *)(v41 + 112) = 0u;
      *(_OWORD *)(v41 + 121) = 0u;
      *(_QWORD *)(v41 + 160) = 0;
      *(_QWORD *)(v41 + 168) = 0;
      *(_QWORD *)(v41 + 152) = 0;
      *(_BYTE *)(v41 + 176) = 0;
      *(_DWORD *)(v41 + 187) = 0;
      *(_QWORD *)(v41 + 180) = 0;
      *(_QWORD *)(v41 + 192) = 0;
      *(_DWORD *)(v41 + 199) = 0;
      *(_QWORD *)(v41 + 216) = 0;
      *(_QWORD *)(v41 + 224) = 0;
      *(_QWORD *)(v41 + 208) = 0;
      *(_QWORD *)(v41 + 32) = v878;
      *(_QWORD *)(v41 + 40) = v41;
      if (v40)
      {
        *(_QWORD *)(v41 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v40);
        *(_QWORD *)(v41 + 144) = v42;
      }
      v43 = (unint64_t *)v5[1];
      llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v874, v41);
      v44 = *v43;
      *(_QWORD *)v41 = *v43;
      *(_QWORD *)(v41 + 8) = v43;
      *(_QWORD *)(v44 + 8) = v41;
      *v43 = v41;
      if ((unint64_t *)v26 != v877)
      {
        v45 = *(unint64_t **)(v41 + 56);
        if (v45 != v877)
        {
          if ((unint64_t *)v41 != v5)
          {
            v310 = *(_QWORD *)(v41 + 40);
            v311 = (unint64_t *)v26;
            do
            {
              v311[3] = v310;
              v311 = (unint64_t *)v311[1];
            }
            while (v311 != v877);
          }
          sub_1C4785D30(v45, (unint64_t *)v26, v877);
        }
      }
      llvm::MachineBasicBlock::transferSuccessorsAndUpdatePHIs((unsigned int *)v41, (llvm::MachineBasicBlock *)v5);
      v46 = (llvm::BasicBlock *)v5[2];
      v47 = *(_QWORD *)(v878 + 312);
      if (v47)
        *(_QWORD *)(v878 + 312) = *(_QWORD *)v47;
      else
        v47 = sub_1C484358C(v865, 232, 3);
      *(_QWORD *)v47 = 0;
      *(_QWORD *)(v47 + 8) = 0;
      *(_QWORD *)(v47 + 16) = v46;
      *(_DWORD *)(v47 + 24) = -1;
      *(_QWORD *)(v47 + 48) = (v47 + 48) | 4;
      *(_QWORD *)(v47 + 56) = v47 + 48;
      *(_BYTE *)(v47 + 144) = 0;
      *(_OWORD *)(v47 + 64) = 0u;
      *(_OWORD *)(v47 + 80) = 0u;
      *(_OWORD *)(v47 + 96) = 0u;
      *(_OWORD *)(v47 + 112) = 0u;
      *(_OWORD *)(v47 + 121) = 0u;
      *(_QWORD *)(v47 + 160) = 0;
      *(_QWORD *)(v47 + 168) = 0;
      *(_QWORD *)(v47 + 152) = 0;
      *(_BYTE *)(v47 + 176) = 0;
      *(_DWORD *)(v47 + 187) = 0;
      *(_QWORD *)(v47 + 180) = 0;
      *(_QWORD *)(v47 + 192) = 0;
      *(_DWORD *)(v47 + 199) = 0;
      *(_QWORD *)(v47 + 216) = 0;
      *(_QWORD *)(v47 + 224) = 0;
      *(_QWORD *)(v47 + 208) = 0;
      *(_QWORD *)(v47 + 32) = v878;
      *(_QWORD *)(v47 + 40) = v47;
      if (v46)
      {
        *(_QWORD *)(v47 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v46);
        *(_QWORD *)(v47 + 144) = v48;
      }
      llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v874, v47);
      v49 = *(_QWORD *)v41;
      *(_QWORD *)v47 = *(_QWORD *)v41;
      *(_QWORD *)(v47 + 8) = v41;
      *(_QWORD *)(v49 + 8) = v47;
      *(_QWORD *)v41 = v47;
      llvm::MachineBasicBlock::addSuccessor(v5, (_QWORD *)v47, 0);
      llvm::MachineBasicBlock::addSuccessor((_QWORD *)v47, (_QWORD *)v47, 0);
      llvm::MachineBasicBlock::addSuccessor((_QWORD *)v47, (_QWORD *)v41, 0x80000000);
      llvm::MachineBasicBlock::addSuccessor(v5, (_QWORD *)v41, 0x80000000);
      v869 = *(_QWORD **)(v885 + 264);
      v50 = *(_QWORD *)(v16 + 24);
      v908 = 0u;
      v909 = 0u;
      v906 = 0u;
      v907 = 0u;
      v51 = *(_QWORD *)(v50 + 32);
      v905 = &off_1E816EC08;
      *(_QWORD *)&v906 = v51;
      *(_QWORD *)&v907 = *(_QWORD *)(v51 + 40);
      *((_QWORD *)&v906 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v51 + 16) + 104))(*(_QWORD *)(v51 + 16));
      v893.i64[0] = 0;
      if (*((_QWORD *)&v907 + 1))
      {
        llvm::MetadataTracking::untrack((uint64_t)&v907 + 8, *((unsigned __int8 **)&v907 + 1));
        *((_QWORD *)&v907 + 1) = v893.i64[0];
        if (v893.i64[0])
          llvm::MetadataTracking::retrack((uint64_t)&v893, (unsigned __int8 *)v893.i64[0], (uint64_t)&v907 + 8);
      }
      else
      {
        *((_QWORD *)&v907 + 1) = 0;
      }
      *(_QWORD *)&v909 = 0;
      *((_QWORD *)&v908 + 1) = v16;
      *(_QWORD *)&v908 = *(_QWORD *)(v16 + 24);
      *((_QWORD *)&v908 + 1) = v16;
      if ((__int128 *)(v16 + 56) != (__int128 *)((char *)&v907 + 8))
      {
        if (*((_QWORD *)&v907 + 1))
          llvm::MetadataTracking::untrack((uint64_t)&v907 + 8, *((unsigned __int8 **)&v907 + 1));
        v52 = *(unsigned __int8 **)(v16 + 56);
        *((_QWORD *)&v907 + 1) = v52;
        if (v52)
          llvm::MetadataTracking::track((uint64_t)&v907 + 8, v52, 2);
      }
      v853 = v6;
      v53 = v906;
      v900[0] = (void *)v16;
      v54 = *(_QWORD *)(v16 + 48);
      if ((v54 & 7) != 0)
      {
        v55 = *(_QWORD *)((v54 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        v55 = v54 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v16 + 48) = v54 & 0xFFFFFFFFFFFFFFF8;
      }
      v56 = *(_QWORD *)(*(_QWORD *)(v16 + 32)
                      + 32 * sub_1C4C2FD5C(**(unsigned __int16 **)(v16 + 16))
                      + 16);
      v862 = (llvm::MachineMemOperand *)v55;
      MachineMemOperand = llvm::MachineFunction::getMachineMemOperand(v53, v55, v56 / 8, 65);
      v902 = v900;
      v903 = v53;
      v904 = MachineMemOperand;
      v58 = v900[0];
      v59 = (int *)(v58[4] + 32 * sub_1C4C2FD5C(**((unsigned __int16 **)v900[0] + 2)));
      v859 = v59[4];
      if ((v859 - 81) > 4)
      {
        v858 = 0;
      }
      else
      {
        v61 = *v59;
        v60 = v59[1];
        if ((_BYTE)v61)
          v62 = (v61 << 14) & 0x80000000;
        else
          v62 = 0;
        v858 = v62 | v60;
      }
      *(_QWORD *)&v908 = v5;
      *((_QWORD *)&v908 + 1) = v5 + 6;
      v64 = sub_1C55437B8(&v905, 0x224u);
      v65 = (unint64_t *)v63;
      v66 = (unint64_t *)*((_QWORD *)&v908 + 1);
      v67 = *(_QWORD *)(v908 + 40);
      *(_QWORD *)(v63 + 24) = v67;
      v68 = *(_QWORD *)(v67 + 32);
      v69 = *(unsigned int *)(v63 + 40);
      if ((_DWORD)v69)
      {
        v226 = *(_QWORD *)(v63 + 32);
        v227 = *(_QWORD *)(v68 + 40);
        v228 = 32 * v69;
        do
        {
          if (!*(_BYTE *)v226)
          {
            v229 = *(unsigned int *)(v226 + 4);
            if ((int)v229 >= 0)
              v230 = (uint64_t *)(*(_QWORD *)(v227 + 272) + 8 * v229);
            else
              v230 = (uint64_t *)(*(_QWORD *)(v227 + 24) + 16 * (v229 & 0x7FFFFFFF) + 8);
            v231 = *v230;
            if (*v230)
            {
              v232 = *(_QWORD *)(v231 + 16);
              *(_QWORD *)(v231 + 16) = v226;
              *(_QWORD *)(v226 + 16) = v232;
              if ((*(_BYTE *)(v226 + 3) & 1) != 0)
              {
                *(_QWORD *)(v226 + 24) = v231;
              }
              else
              {
                *(_QWORD *)(v226 + 24) = 0;
                v230 = (uint64_t *)(v232 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v226 + 16) = v226;
              *(_QWORD *)(v226 + 24) = 0;
            }
            *v230 = v226;
          }
          v226 += 32;
          v228 -= 32;
        }
        while (v228);
      }
      v70 = *(_QWORD *)(v68 + 728);
      if (v70)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 24))(v70, v63);
      v71 = *v66 & 0xFFFFFFFFFFFFFFF8;
      *v65 = v71 | *v65 & 7;
      v65[1] = (unint64_t)v66;
      *(_QWORD *)(v71 + 8) = v65;
      *v66 = *v66 & 7 | (unint64_t)v65;
      if ((_QWORD)v909)
        (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v909 + 24))(v909, v65);
      v893.i32[0] = 1;
      v893.i64[1] = 0;
      v894 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v65, v64, (const llvm::MachineOperand *)&v893);
      v72 = v900[0];
      v73 = *(_DWORD *)(v72[4] + 32 * sub_1C4C2FD5C(**((unsigned __int16 **)v900[0] + 2)) + 4);
      v893.i64[1] = 0;
      v893.i32[1] = v73;
      v893.i32[0] = 0;
      v894 = 0;
      v895 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v65, v64, (const llvm::MachineOperand *)&v893);
      v893.i32[0] = 1;
      v893.i64[1] = 0;
      v894 = 2;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v65, v64, (const llvm::MachineOperand *)&v893);
      v75 = sub_1C55437B8(&v905, 0x1AAu);
      v76 = (unint64_t *)v74;
      v77 = (unint64_t *)*((_QWORD *)&v908 + 1);
      v78 = *(_QWORD *)(v908 + 40);
      *(_QWORD *)(v74 + 24) = v78;
      v79 = *(_QWORD *)(v78 + 32);
      v80 = *(unsigned int *)(v74 + 40);
      if ((_DWORD)v80)
      {
        v233 = *(_QWORD *)(v74 + 32);
        v234 = *(_QWORD *)(v79 + 40);
        v235 = 32 * v80;
        do
        {
          if (!*(_BYTE *)v233)
          {
            v236 = *(unsigned int *)(v233 + 4);
            if ((int)v236 >= 0)
              v237 = (uint64_t *)(*(_QWORD *)(v234 + 272) + 8 * v236);
            else
              v237 = (uint64_t *)(*(_QWORD *)(v234 + 24) + 16 * (v236 & 0x7FFFFFFF) + 8);
            v238 = *v237;
            if (*v237)
            {
              v239 = *(_QWORD *)(v238 + 16);
              *(_QWORD *)(v238 + 16) = v233;
              *(_QWORD *)(v233 + 16) = v239;
              if ((*(_BYTE *)(v233 + 3) & 1) != 0)
              {
                *(_QWORD *)(v233 + 24) = v238;
              }
              else
              {
                *(_QWORD *)(v233 + 24) = 0;
                v237 = (uint64_t *)(v239 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v233 + 16) = v233;
              *(_QWORD *)(v233 + 24) = 0;
            }
            *v237 = v233;
          }
          v233 += 32;
          v235 -= 32;
        }
        while (v235);
      }
      v81 = *(_QWORD *)(v79 + 728);
      if (v81)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v81 + 24))(v81, v74);
      v82 = *v77 & 0xFFFFFFFFFFFFFFF8;
      *v76 = v82 | *v76 & 7;
      v76[1] = (unint64_t)v77;
      *(_QWORD *)(v82 + 8) = v76;
      *v77 = *v77 & 7 | (unint64_t)v76;
      if ((_QWORD)v909)
        (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v909 + 24))(v909, v76);
      v893.i32[0] = 1;
      v893.i64[1] = 0;
      v894 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v76, v75, (const llvm::MachineOperand *)&v893);
      v893.i64[1] = 0;
      v894 = v41;
      v893.i32[0] = 4;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v76, v75, (const llvm::MachineOperand *)&v893);
      *(_QWORD *)&v908 = v47;
      *((_QWORD *)&v908 + 1) = v47 + 48;
      v84 = sub_1C55437B8(&v905, 0x1631u);
      v85 = v83;
      v86 = (unint64_t *)*((_QWORD *)&v908 + 1);
      v87 = *(_QWORD *)(v908 + 40);
      *(_QWORD *)(v83 + 24) = v87;
      v88 = *(_QWORD *)(v87 + 32);
      v89 = *(unsigned int *)(v83 + 40);
      if ((_DWORD)v89)
      {
        v240 = *(_QWORD *)(v83 + 32);
        v241 = *(_QWORD *)(v88 + 40);
        v242 = 32 * v89;
        do
        {
          if (!*(_BYTE *)v240)
          {
            v243 = *(unsigned int *)(v240 + 4);
            if ((int)v243 >= 0)
              v244 = (uint64_t *)(*(_QWORD *)(v241 + 272) + 8 * v243);
            else
              v244 = (uint64_t *)(*(_QWORD *)(v241 + 24) + 16 * (v243 & 0x7FFFFFFF) + 8);
            v245 = *v244;
            if (*v244)
            {
              v246 = *(_QWORD *)(v245 + 16);
              *(_QWORD *)(v245 + 16) = v240;
              *(_QWORD *)(v240 + 16) = v246;
              if ((*(_BYTE *)(v240 + 3) & 1) != 0)
              {
                *(_QWORD *)(v240 + 24) = v245;
              }
              else
              {
                *(_QWORD *)(v240 + 24) = 0;
                v244 = (uint64_t *)(v246 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v240 + 16) = v240;
              *(_QWORD *)(v240 + 24) = 0;
            }
            *v244 = v240;
          }
          v240 += 32;
          v242 -= 32;
        }
        while (v242);
      }
      v90 = *(_QWORD *)(v88 + 728);
      if (v90)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v90 + 24))(v90, v83);
      v91 = *v86 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v85 = v91 | *(_QWORD *)v85 & 7;
      *(_QWORD *)(v85 + 8) = v86;
      *(_QWORD *)(v91 + 8) = v85;
      *v86 = *v86 & 7 | v85;
      if ((_QWORD)v909)
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v909 + 24))(v909, v85);
      v92 = v900[0];
      v93 = *(_DWORD *)(v92[4] + 32 * sub_1C4C2FD5C(**((unsigned __int16 **)v900[0] + 2)) + 4);
      v893.i64[1] = 0;
      v894 = 0;
      v895 = 0;
      v893.i32[1] = v93;
      v893.i32[0] = 0x1000000;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v85, v84, (const llvm::MachineOperand *)&v893);
      v890 = v84;
      v891 = v85;
      sub_1C49E07CC((uint64_t **)&v902, (llvm::MachineFunction **)&v890, 1);
      v95 = sub_1C55437B8(&v905, 0x177u);
      v96 = (unint64_t *)v94;
      v97 = (unint64_t *)*((_QWORD *)&v908 + 1);
      v98 = *(_QWORD *)(v908 + 40);
      *(_QWORD *)(v94 + 24) = v98;
      v99 = *(_QWORD *)(v98 + 32);
      v100 = *(unsigned int *)(v94 + 40);
      if ((_DWORD)v100)
      {
        v247 = *(_QWORD *)(v94 + 32);
        v248 = *(_QWORD *)(v99 + 40);
        v249 = 32 * v100;
        do
        {
          if (!*(_BYTE *)v247)
          {
            v250 = *(unsigned int *)(v247 + 4);
            if ((int)v250 >= 0)
              v251 = (uint64_t *)(*(_QWORD *)(v248 + 272) + 8 * v250);
            else
              v251 = (uint64_t *)(*(_QWORD *)(v248 + 24) + 16 * (v250 & 0x7FFFFFFF) + 8);
            v252 = *v251;
            if (*v251)
            {
              v253 = *(_QWORD *)(v252 + 16);
              *(_QWORD *)(v252 + 16) = v247;
              *(_QWORD *)(v247 + 16) = v253;
              if ((*(_BYTE *)(v247 + 3) & 1) != 0)
              {
                *(_QWORD *)(v247 + 24) = v252;
              }
              else
              {
                *(_QWORD *)(v247 + 24) = 0;
                v251 = (uint64_t *)(v253 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v247 + 16) = v247;
              *(_QWORD *)(v247 + 24) = 0;
            }
            *v251 = v247;
          }
          v247 += 32;
          v249 -= 32;
        }
        while (v249);
      }
      v101 = *(_QWORD *)(v99 + 728);
      if (v101)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v101 + 24))(v101, v94);
      v102 = *v97 & 0xFFFFFFFFFFFFFFF8;
      *v96 = v102 | *v96 & 7;
      v96[1] = (unint64_t)v97;
      *(_QWORD *)(v102 + 8) = v96;
      *v97 = *v97 & 7 | (unint64_t)v96;
      if ((_QWORD)v909)
        (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v909 + 24))(v909, v96);
      v103 = v900[0];
      v104 = *(_DWORD *)(v103[4] + 32 * sub_1C4C2FD5C(**((unsigned __int16 **)v900[0] + 2)) + 4);
      v893.i64[1] = 0;
      v894 = 0;
      v895 = 0;
      v893.i32[1] = v104;
      v893.i32[0] = 0x1000000;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v95, (const llvm::MachineOperand *)&v893);
      v893.i32[0] = 1;
      v893.i64[1] = 0;
      v894 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v95, (const llvm::MachineOperand *)&v893);
      v105 = v900[0];
      v106 = *(_DWORD *)(v105[4] + 32 * sub_1C4C2FD5C(**((unsigned __int16 **)v900[0] + 2)) + 4);
      v893.i64[1] = 0;
      v893.i32[1] = v106;
      v893.i32[0] = 0;
      v894 = 0;
      v895 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v95, (const llvm::MachineOperand *)&v893);
      v893.i32[0] = 1;
      v893.i64[1] = 0;
      v894 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v95, (const llvm::MachineOperand *)&v893);
      v107 = v900[0];
      v108 = *(_QWORD *)(v107[4] + 32 * sub_1C4C2FD5C(**((unsigned __int16 **)v900[0] + 2)) + 16) & 7;
      v893.i32[0] = 1;
      v893.i64[1] = 0;
      v894 = 1 << v108;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v95, (const llvm::MachineOperand *)&v893);
      v110 = sub_1C55437B8(&v905, 0x18BEu);
      v111 = (unint64_t *)v109;
      v112 = (unint64_t *)*((_QWORD *)&v908 + 1);
      v113 = *(_QWORD *)(v908 + 40);
      *(_QWORD *)(v109 + 24) = v113;
      v114 = *(_QWORD *)(v113 + 32);
      v115 = *(unsigned int *)(v109 + 40);
      if ((_DWORD)v115)
      {
        v254 = *(_QWORD *)(v109 + 32);
        v255 = *(_QWORD *)(v114 + 40);
        v256 = 32 * v115;
        do
        {
          if (!*(_BYTE *)v254)
          {
            v257 = *(unsigned int *)(v254 + 4);
            if ((int)v257 >= 0)
              v258 = (uint64_t *)(*(_QWORD *)(v255 + 272) + 8 * v257);
            else
              v258 = (uint64_t *)(*(_QWORD *)(v255 + 24) + 16 * (v257 & 0x7FFFFFFF) + 8);
            v259 = *v258;
            if (*v258)
            {
              v260 = *(_QWORD *)(v259 + 16);
              *(_QWORD *)(v259 + 16) = v254;
              *(_QWORD *)(v254 + 16) = v260;
              if ((*(_BYTE *)(v254 + 3) & 1) != 0)
              {
                *(_QWORD *)(v254 + 24) = v259;
              }
              else
              {
                *(_QWORD *)(v254 + 24) = 0;
                v258 = (uint64_t *)(v260 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v254 + 16) = v254;
              *(_QWORD *)(v254 + 24) = 0;
            }
            *v258 = v254;
          }
          v254 += 32;
          v256 -= 32;
        }
        while (v256);
      }
      v116 = *(_QWORD *)(v114 + 728);
      if (v116)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v116 + 24))(v116, v109);
      v117 = *v112 & 0xFFFFFFFFFFFFFFF8;
      *v111 = v117 | *v111 & 7;
      v111[1] = (unint64_t)v112;
      *(_QWORD *)(v117 + 8) = v111;
      *v112 = *v112 & 7 | (unint64_t)v111;
      if ((_QWORD)v909)
        (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v909 + 24))(v909, v111);
      v118 = v900[0];
      v119 = sub_1C4C2FD5C(**((unsigned __int16 **)v900[0] + 2));
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v111, v110, (const llvm::MachineOperand *)(v118[4] + 32 * v119));
      v893.i32[0] = 1;
      v893.i64[1] = 0;
      v894 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v111, v110, (const llvm::MachineOperand *)&v893);
      v893.i32[0] = 1;
      v893.i64[1] = 0;
      v894 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v111, v110, (const llvm::MachineOperand *)&v893);
      v120 = v900[0];
      v121 = *(_DWORD *)(v120[4] + 32 * sub_1C4C2FD5C(**((unsigned __int16 **)v900[0] + 2)) + 4);
      v893.i64[1] = 0;
      v893.i32[1] = v121;
      v893.i32[0] = 0;
      v894 = 0;
      v895 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v111, v110, (const llvm::MachineOperand *)&v893);
      v893.i32[0] = 1;
      v893.i64[1] = 0;
      v894 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v111, v110, (const llvm::MachineOperand *)&v893);
      v893.i32[0] = 1;
      v893.i64[1] = 0;
      v894 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v111, v110, (const llvm::MachineOperand *)&v893);
      v123 = sub_1C55437B8(&v905, 0x23A0u);
      v124 = v122;
      v125 = (unint64_t *)*((_QWORD *)&v908 + 1);
      v126 = *(_QWORD *)(v908 + 40);
      *(_QWORD *)(v122 + 24) = v126;
      v127 = *(_QWORD *)(v126 + 32);
      v128 = *(unsigned int *)(v122 + 40);
      if ((_DWORD)v128)
      {
        v261 = *(_QWORD *)(v122 + 32);
        v262 = *(_QWORD *)(v127 + 40);
        v263 = 32 * v128;
        do
        {
          if (!*(_BYTE *)v261)
          {
            v264 = *(unsigned int *)(v261 + 4);
            if ((int)v264 >= 0)
              v265 = (uint64_t *)(*(_QWORD *)(v262 + 272) + 8 * v264);
            else
              v265 = (uint64_t *)(*(_QWORD *)(v262 + 24) + 16 * (v264 & 0x7FFFFFFF) + 8);
            v266 = *v265;
            if (*v265)
            {
              v267 = *(_QWORD *)(v266 + 16);
              *(_QWORD *)(v266 + 16) = v261;
              *(_QWORD *)(v261 + 16) = v267;
              if ((*(_BYTE *)(v261 + 3) & 1) != 0)
              {
                *(_QWORD *)(v261 + 24) = v266;
              }
              else
              {
                *(_QWORD *)(v261 + 24) = 0;
                v265 = (uint64_t *)(v267 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v261 + 16) = v261;
              *(_QWORD *)(v261 + 24) = 0;
            }
            *v265 = v261;
          }
          v261 += 32;
          v263 -= 32;
        }
        while (v263);
      }
      v129 = *(_QWORD *)(v127 + 728);
      if (v129)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v129 + 24))(v129, v122);
      v130 = *v125 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v124 = v130 | *(_QWORD *)v124 & 7;
      *(_QWORD *)(v124 + 8) = v125;
      *(_QWORD *)(v130 + 8) = v124;
      *v125 = *v125 & 7 | v124;
      if ((_QWORD)v909)
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v909 + 24))(v909, v124);
      v131 = v900[0];
      v132 = *(_DWORD *)(v131[4] + 32 * sub_1C4C2FD5C(**((unsigned __int16 **)v900[0] + 2)) + 4);
      v893.i64[1] = 0;
      v893.i32[1] = v132;
      v893.i32[0] = 0;
      v894 = 0;
      v895 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v124, v123, (const llvm::MachineOperand *)&v893);
      v897 = v123;
      v898 = v124;
      sub_1C49E07CC((uint64_t **)&v902, (llvm::MachineFunction **)&v897, 2);
      sub_1C4AD6390((uint64_t)&v905, 1u);
      v134 = sub_1C55437B8(&v905, 0x226u);
      v135 = (unint64_t *)v133;
      v136 = (unint64_t *)*((_QWORD *)&v908 + 1);
      v137 = *(_QWORD *)(v908 + 40);
      *(_QWORD *)(v133 + 24) = v137;
      v138 = *(_QWORD *)(v137 + 32);
      v139 = *(unsigned int *)(v133 + 40);
      if ((_DWORD)v139)
      {
        v268 = *(_QWORD *)(v133 + 32);
        v269 = *(_QWORD *)(v138 + 40);
        v270 = 32 * v139;
        do
        {
          if (!*(_BYTE *)v268)
          {
            v271 = *(unsigned int *)(v268 + 4);
            if ((int)v271 >= 0)
              v272 = (uint64_t *)(*(_QWORD *)(v269 + 272) + 8 * v271);
            else
              v272 = (uint64_t *)(*(_QWORD *)(v269 + 24) + 16 * (v271 & 0x7FFFFFFF) + 8);
            v273 = *v272;
            if (*v272)
            {
              v274 = *(_QWORD *)(v273 + 16);
              *(_QWORD *)(v273 + 16) = v268;
              *(_QWORD *)(v268 + 16) = v274;
              if ((*(_BYTE *)(v268 + 3) & 1) != 0)
              {
                *(_QWORD *)(v268 + 24) = v273;
              }
              else
              {
                *(_QWORD *)(v268 + 24) = 0;
                v272 = (uint64_t *)(v274 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v268 + 16) = v268;
              *(_QWORD *)(v268 + 24) = 0;
            }
            *v272 = v268;
          }
          v268 += 32;
          v270 -= 32;
        }
        while (v270);
      }
      v140 = *(_QWORD *)(v138 + 728);
      if (v140)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v140 + 24))(v140, v133);
      v141 = *v136 & 0xFFFFFFFFFFFFFFF8;
      *v135 = v141 | *v135 & 7;
      v135[1] = (unint64_t)v136;
      *(_QWORD *)(v141 + 8) = v135;
      *v136 = *v136 & 7 | (unint64_t)v135;
      if ((_QWORD)v909)
        (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v909 + 24))(v909, v135);
      v893.i32[0] = 1;
      v893.i64[1] = 0;
      v894 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v135, v134, (const llvm::MachineOperand *)&v893);
      v893.i32[3] = 0;
      LODWORD(v894) = v859;
      LODWORD(v895) = 0;
      *(uint64_t *)((char *)v893.i64 + 4) = v858 & 0x7FFFFFFF;
      v893.i32[0] = (v858 >> 14) & 0x20000 | 7;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v135, v134, (const llvm::MachineOperand *)&v893);
      v893.i32[0] = 1;
      v893.i64[1] = 0;
      v894 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v135, v134, (const llvm::MachineOperand *)&v893);
      llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v135, v134, v862);
      v143 = sub_1C55437B8(&v905, 0x1631u);
      v144 = v142;
      v145 = (unint64_t *)*((_QWORD *)&v908 + 1);
      v146 = *(_QWORD *)(v908 + 40);
      *(_QWORD *)(v142 + 24) = v146;
      v147 = *(_QWORD *)(v146 + 32);
      v148 = *(unsigned int *)(v142 + 40);
      if ((_DWORD)v148)
      {
        v275 = *(_QWORD *)(v142 + 32);
        v276 = *(_QWORD *)(v147 + 40);
        v277 = 32 * v148;
        do
        {
          if (!*(_BYTE *)v275)
          {
            v278 = *(unsigned int *)(v275 + 4);
            if ((int)v278 >= 0)
              v279 = (uint64_t *)(*(_QWORD *)(v276 + 272) + 8 * v278);
            else
              v279 = (uint64_t *)(*(_QWORD *)(v276 + 24) + 16 * (v278 & 0x7FFFFFFF) + 8);
            v280 = *v279;
            if (*v279)
            {
              v281 = *(_QWORD *)(v280 + 16);
              *(_QWORD *)(v280 + 16) = v275;
              *(_QWORD *)(v275 + 16) = v281;
              if ((*(_BYTE *)(v275 + 3) & 1) != 0)
              {
                *(_QWORD *)(v275 + 24) = v280;
              }
              else
              {
                *(_QWORD *)(v275 + 24) = 0;
                v279 = (uint64_t *)(v281 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v275 + 16) = v275;
              *(_QWORD *)(v275 + 24) = 0;
            }
            *v279 = v275;
          }
          v275 += 32;
          v277 -= 32;
        }
        while (v277);
      }
      v149 = *(_QWORD *)(v147 + 728);
      if (v149)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v149 + 24))(v149, v142);
      v150 = *v145 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v144 = v150 | *(_QWORD *)v144 & 7;
      *(_QWORD *)(v144 + 8) = v145;
      *(_QWORD *)(v150 + 8) = v144;
      *v145 = *v145 & 7 | v144;
      if ((_QWORD)v909)
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v909 + 24))(v909, v144);
      v151 = v900[0];
      v152 = *(_DWORD *)(v151[4] + 32 * sub_1C4C2FD5C(**((unsigned __int16 **)v900[0] + 2)) + 4);
      v893.i64[1] = 0;
      v894 = 0;
      v895 = 0;
      v893.i32[1] = v152;
      v893.i32[0] = 0x1000000;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v144, v143, (const llvm::MachineOperand *)&v893);
      v890 = v143;
      v891 = v144;
      sub_1C49E07CC((uint64_t **)&v902, (llvm::MachineFunction **)&v890, 1);
      v154 = sub_1C55437B8(&v905, 0x1192u);
      v155 = (unint64_t *)v153;
      v156 = (unint64_t *)*((_QWORD *)&v908 + 1);
      v157 = *(_QWORD *)(v908 + 40);
      *(_QWORD *)(v153 + 24) = v157;
      v158 = *(_QWORD *)(v157 + 32);
      v159 = *(unsigned int *)(v153 + 40);
      if ((_DWORD)v159)
      {
        v282 = *(_QWORD *)(v153 + 32);
        v283 = *(_QWORD *)(v158 + 40);
        v284 = 32 * v159;
        do
        {
          if (!*(_BYTE *)v282)
          {
            v285 = *(unsigned int *)(v282 + 4);
            if ((int)v285 >= 0)
              v286 = (uint64_t *)(*(_QWORD *)(v283 + 272) + 8 * v285);
            else
              v286 = (uint64_t *)(*(_QWORD *)(v283 + 24) + 16 * (v285 & 0x7FFFFFFF) + 8);
            v287 = *v286;
            if (*v286)
            {
              v288 = *(_QWORD *)(v287 + 16);
              *(_QWORD *)(v287 + 16) = v282;
              *(_QWORD *)(v282 + 16) = v288;
              if ((*(_BYTE *)(v282 + 3) & 1) != 0)
              {
                *(_QWORD *)(v282 + 24) = v287;
              }
              else
              {
                *(_QWORD *)(v282 + 24) = 0;
                v286 = (uint64_t *)(v288 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v282 + 16) = v282;
              *(_QWORD *)(v282 + 24) = 0;
            }
            *v286 = v282;
          }
          v282 += 32;
          v284 -= 32;
        }
        while (v284);
      }
      v160 = *(_QWORD *)(v158 + 728);
      if (v160)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v160 + 24))(v160, v153);
      v161 = *v156 & 0xFFFFFFFFFFFFFFF8;
      *v155 = v161 | *v155 & 7;
      v155[1] = (unint64_t)v156;
      *(_QWORD *)(v161 + 8) = v155;
      *v156 = *v156 & 7 | (unint64_t)v155;
      if ((_QWORD)v909)
        (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v909 + 24))(v909, v155);
      v162 = v900[0];
      v163 = *(_DWORD *)(v162[4] + 32 * sub_1C4C2FD5C(**((unsigned __int16 **)v900[0] + 2)) + 4);
      v893.i64[1] = 0;
      v894 = 0;
      v895 = 0;
      v893.i32[1] = v163;
      v893.i32[0] = 0x1000000;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v155, v154, (const llvm::MachineOperand *)&v893);
      v893.i32[0] = 1;
      v893.i64[1] = 0;
      v894 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v155, v154, (const llvm::MachineOperand *)&v893);
      v893.i32[0] = 1;
      v893.i64[1] = 0;
      v894 = 15;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v155, v154, (const llvm::MachineOperand *)&v893);
      v164 = v900[0];
      v165 = *(_DWORD *)(v164[4] + 32 * sub_1C4C2FD5C(**((unsigned __int16 **)v900[0] + 2)) + 4);
      v893.i64[1] = 0;
      v893.i32[1] = v165;
      v893.i32[0] = 0;
      v894 = 0;
      v895 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v155, v154, (const llvm::MachineOperand *)&v893);
      v893.i32[0] = 1;
      v893.i64[1] = 0;
      v894 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v155, v154, (const llvm::MachineOperand *)&v893);
      v166 = v900[0];
      v167 = *(_QWORD *)(v166[4] + 32 * sub_1C4C2FD5C(**((unsigned __int16 **)v900[0] + 2)) + 16) & 7;
      v893.i32[0] = 1;
      v893.i64[1] = 0;
      v894 = 1 << v167;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v155, v154, (const llvm::MachineOperand *)&v893);
      v169 = sub_1C55437B8(&v905, 0x221u);
      v170 = (unint64_t *)v168;
      v171 = (unint64_t *)*((_QWORD *)&v908 + 1);
      v172 = *(_QWORD *)(v908 + 40);
      *(_QWORD *)(v168 + 24) = v172;
      v173 = *(_QWORD *)(v172 + 32);
      v174 = *(unsigned int *)(v168 + 40);
      if ((_DWORD)v174)
      {
        v289 = *(_QWORD *)(v168 + 32);
        v290 = *(_QWORD *)(v173 + 40);
        v291 = 32 * v174;
        do
        {
          if (!*(_BYTE *)v289)
          {
            v292 = *(unsigned int *)(v289 + 4);
            if ((int)v292 >= 0)
              v293 = (uint64_t *)(*(_QWORD *)(v290 + 272) + 8 * v292);
            else
              v293 = (uint64_t *)(*(_QWORD *)(v290 + 24) + 16 * (v292 & 0x7FFFFFFF) + 8);
            v294 = *v293;
            if (*v293)
            {
              v295 = *(_QWORD *)(v294 + 16);
              *(_QWORD *)(v294 + 16) = v289;
              *(_QWORD *)(v289 + 16) = v295;
              if ((*(_BYTE *)(v289 + 3) & 1) != 0)
              {
                *(_QWORD *)(v289 + 24) = v294;
              }
              else
              {
                *(_QWORD *)(v289 + 24) = 0;
                v293 = (uint64_t *)(v295 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v289 + 16) = v289;
              *(_QWORD *)(v289 + 24) = 0;
            }
            *v293 = v289;
          }
          v289 += 32;
          v291 -= 32;
        }
        while (v291);
      }
      v175 = *(_QWORD *)(v173 + 728);
      if (v175)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v175 + 24))(v175, v168);
      v176 = *v171 & 0xFFFFFFFFFFFFFFF8;
      *v170 = v176 | *v170 & 7;
      v170[1] = (unint64_t)v171;
      *(_QWORD *)(v176 + 8) = v170;
      *v171 = *v171 & 7 | (unint64_t)v170;
      if ((_QWORD)v909)
        (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v909 + 24))(v909, v170);
      v893.i32[0] = 1;
      v893.i64[1] = 0;
      v894 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v170, v169, (const llvm::MachineOperand *)&v893);
      v177 = v900[0];
      v178 = *(_DWORD *)(v177[4] + 32 * sub_1C4C2FD5C(**((unsigned __int16 **)v900[0] + 2)) + 4);
      v893.i64[1] = 0;
      v893.i32[1] = v178;
      v893.i32[0] = 0;
      v894 = 0;
      v895 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v170, v169, (const llvm::MachineOperand *)&v893);
      v893.i32[0] = 1;
      v893.i64[1] = 0;
      v894 = 2;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v170, v169, (const llvm::MachineOperand *)&v893);
      v180 = sub_1C55437B8(&v905, 0x1A6u);
      v181 = (unint64_t *)v179;
      v182 = (unint64_t *)*((_QWORD *)&v908 + 1);
      v183 = *(_QWORD *)(v908 + 40);
      *(_QWORD *)(v179 + 24) = v183;
      v184 = *(_QWORD *)(v183 + 32);
      v185 = *(unsigned int *)(v179 + 40);
      if ((_DWORD)v185)
      {
        v296 = *(_QWORD *)(v179 + 32);
        v297 = *(_QWORD *)(v184 + 40);
        v298 = 32 * v185;
        do
        {
          if (!*(_BYTE *)v296)
          {
            v299 = *(unsigned int *)(v296 + 4);
            if ((int)v299 >= 0)
              v300 = (uint64_t *)(*(_QWORD *)(v297 + 272) + 8 * v299);
            else
              v300 = (uint64_t *)(*(_QWORD *)(v297 + 24) + 16 * (v299 & 0x7FFFFFFF) + 8);
            v301 = *v300;
            if (*v300)
            {
              v302 = *(_QWORD *)(v301 + 16);
              *(_QWORD *)(v301 + 16) = v296;
              *(_QWORD *)(v296 + 16) = v302;
              if ((*(_BYTE *)(v296 + 3) & 1) != 0)
              {
                *(_QWORD *)(v296 + 24) = v301;
              }
              else
              {
                *(_QWORD *)(v296 + 24) = 0;
                v300 = (uint64_t *)(v302 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v296 + 16) = v296;
              *(_QWORD *)(v296 + 24) = 0;
            }
            *v300 = v296;
          }
          v296 += 32;
          v298 -= 32;
        }
        while (v298);
      }
      v186 = *(_QWORD *)(v184 + 728);
      if (v186)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v186 + 24))(v186, v179);
      v187 = *v182 & 0xFFFFFFFFFFFFFFF8;
      *v181 = v187 | *v181 & 7;
      v181[1] = (unint64_t)v182;
      *(_QWORD *)(v187 + 8) = v181;
      *v182 = *v182 & 7 | (unint64_t)v181;
      if ((_QWORD)v909)
        (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v909 + 24))(v909, v181);
      v893.i32[0] = 1;
      v893.i64[1] = 0;
      v894 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v181, v180, (const llvm::MachineOperand *)&v893);
      v893.i64[1] = 0;
      v894 = v47;
      v893.i32[0] = 4;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v181, v180, (const llvm::MachineOperand *)&v893);
      v188 = *(_QWORD *)(v41 + 56);
      *(_QWORD *)&v908 = v41;
      *((_QWORD *)&v908 + 1) = v188;
      v190 = sub_1C55437B8(&v905, 0x220u);
      v191 = (unint64_t *)v189;
      v192 = (unint64_t *)*((_QWORD *)&v908 + 1);
      v193 = *(_QWORD *)(v908 + 40);
      *(_QWORD *)(v189 + 24) = v193;
      v194 = *(_QWORD *)(v193 + 32);
      v195 = *(unsigned int *)(v189 + 40);
      if ((_DWORD)v195)
      {
        v303 = *(_QWORD *)(v189 + 32);
        v304 = *(_QWORD *)(v194 + 40);
        v305 = 32 * v195;
        do
        {
          if (!*(_BYTE *)v303)
          {
            v306 = *(unsigned int *)(v303 + 4);
            if ((int)v306 >= 0)
              v307 = (uint64_t *)(*(_QWORD *)(v304 + 272) + 8 * v306);
            else
              v307 = (uint64_t *)(*(_QWORD *)(v304 + 24) + 16 * (v306 & 0x7FFFFFFF) + 8);
            v308 = *v307;
            if (*v307)
            {
              v309 = *(_QWORD *)(v308 + 16);
              *(_QWORD *)(v308 + 16) = v303;
              *(_QWORD *)(v303 + 16) = v309;
              if ((*(_BYTE *)(v303 + 3) & 1) != 0)
              {
                *(_QWORD *)(v303 + 24) = v308;
              }
              else
              {
                *(_QWORD *)(v303 + 24) = 0;
                v307 = (uint64_t *)(v309 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v303 + 16) = v303;
              *(_QWORD *)(v303 + 24) = 0;
            }
            *v307 = v303;
          }
          v303 += 32;
          v305 -= 32;
        }
        while (v305);
      }
      v196 = *(_QWORD *)(v194 + 728);
      if (v196)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v196 + 24))(v196, v189);
      v197 = *v192 & 0xFFFFFFFFFFFFFFF8;
      *v191 = v197 | *v191 & 7;
      v191[1] = (unint64_t)v192;
      *(_QWORD *)(v197 + 8) = v191;
      *v192 = *v192 & 7 | (unint64_t)v191;
      if ((_QWORD)v909)
        (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v909 + 24))(v909, v191);
      v893.i32[0] = 1;
      v893.i64[1] = 0;
      v894 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v191, v190, (const llvm::MachineOperand *)&v893);
      v893.i32[0] = 1;
      v893.i64[1] = 0;
      v894 = 2;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v191, v190, (const llvm::MachineOperand *)&v893);
      sub_1C49E0940((_QWORD *)v41, &v938, v869);
      v198 = v900[0];
      v199 = **((unsigned __int16 **)v900[0] + 2);
      v200 = sub_1C4C2FD5C(v199);
      v201 = v198[4];
      v202 = v938.i64[1];
      if (v938.i64[0])
        v203 = (uint64_t *)(v938.i64[0] + 8);
      else
        v203 = 0;
      v204 = *v203;
      v205 = v203[6];
      v206 = (unsigned __int16 *)(v205
                                + (((unint64_t)*(unsigned int *)(*v203
                                                                      + 24
                                                                      * (unsigned __int16)*(_DWORD *)(v201 + 32 * v200 + 4)
                                                                      + 16) >> 3) & 0x1FFFFFFE));
      v208 = *v206;
      v207 = v206 + 1;
      v209 = v208
           + (*(_DWORD *)(*v203 + 24 * (unsigned __int16)*(_DWORD *)(v201 + 32 * v200 + 4) + 16) & 0xF)
           * *(_DWORD *)(v201 + 32 * v200 + 4);
      do
      {
        *(_QWORD *)(v202 + 8 * ((unsigned __int16)v209 >> 6)) |= 1 << v209;
        v210 = *v207++;
        v209 += v210;
      }
      while (v210);
      v211 = sub_1C4C2FD5C(v199);
      v212 = (unsigned __int16 *)(v205
                                + (((unint64_t)*(unsigned int *)(v204
                                                                      + 24
                                                                      * (unsigned __int16)*(_DWORD *)(v201 + 32 * v211 + 4)
                                                                      + 16) >> 3) & 0x1FFFFFFE));
      v214 = *v212;
      v213 = v212 + 1;
      v215 = v214
           + (*(_DWORD *)(v204 + 24 * (unsigned __int16)*(_DWORD *)(v201 + 32 * v211 + 4) + 16) & 0xF)
           * *(_DWORD *)(v201 + 32 * v211 + 4);
      do
      {
        *(_QWORD *)(v202 + 8 * ((unsigned __int16)v215 >> 6)) |= 1 << v215;
        v216 = *v213++;
        v215 += v216;
      }
      while (v216);
      sub_1C49E0940((_QWORD *)v47, &v938, v869);
      v217 = v900[0];
      v218 = *(_DWORD *)(v217[4] + 32 * sub_1C4C2FD5C(**((unsigned __int16 **)v900[0] + 2)) + 4);
      v219 = v938.i64[1];
      if (v938.i64[0])
        v220 = (_QWORD *)(v938.i64[0] + 8);
      else
        v220 = 0;
      v221 = (unsigned __int16 *)(v220[6]
                                + (((unint64_t)*(unsigned int *)(*v220 + 24 * (unsigned __int16)v218 + 16) >> 3) & 0x1FFFFFFE));
      v223 = *v221;
      v222 = v221 + 1;
      v224 = v223 + (*(_DWORD *)(*v220 + 24 * (unsigned __int16)v218 + 16) & 0xF) * v218;
      v6 = v853;
      do
      {
        *(_QWORD *)(v219 + 8 * ((unsigned __int16)v224 >> 6)) |= 1 << v224;
        v225 = *v222++;
        v224 += v225;
      }
      while (v225);
      v905 = &off_1E816EC08;
      v3 = v885;
      if (*((_QWORD *)&v907 + 1))
        llvm::MetadataTracking::untrack((uint64_t)&v907 + 8, *((unsigned __int8 **)&v907 + 1));
      v25 = 1;
    }
    while (v16 != v8);
LABEL_316:
    if (LODWORD(v910[1]))
    {
      v312 = (char *)v910[0];
      v313 = (char *)v910[0] + 8 * LODWORD(v910[1]);
      do
      {
        v314 = *(_BYTE **)v312;
        v315 = *(_BYTE **)v312;
        if ((**(_BYTE **)v312 & 4) == 0)
        {
          v315 = *(_BYTE **)v312;
          if ((*((_WORD *)v314 + 22) & 8) != 0)
          {
            v315 = *(_BYTE **)v312;
            do
              v315 = (_BYTE *)*((_QWORD *)v315 + 1);
            while ((*((_WORD *)v315 + 22) & 8) != 0);
          }
        }
        sub_1C487FE80(*((_QWORD *)v314 + 3) + 40, (uint64_t)v314, *((_QWORD *)v315 + 1));
        v312 += 8;
      }
      while (v312 != v313);
    }
    v7 = v940;
    if ((_BYTE *)v938.i64[1] != v940)
      free((void *)v938.i64[1]);
    if (v910[0] != &v911)
      free(v910[0]);
    v6 |= v25;
    v5 = (unint64_t *)*v5;
  }
  while (v5 != v856);
LABEL_333:
  v848 = (*(unsigned __int16 *)(*(_QWORD *)v849 + 18) >> 4) & 0x3FF;
  if (*(_BYTE *)(*(_QWORD *)(v3 + 248) + 307)
    && ((*(unsigned __int16 *)(*(_QWORD *)v849 + 18) >> 4) & 0x3FF) != 0x6B)
  {
    v316 = *(_QWORD **)(v849 + 328);
    v317 = (unint64_t *)v316[7];
    v905 = 0;
    v318 = *(_QWORD *)(*(_QWORD *)(v3 + 256) + 8) + 298656;
    v319 = (llvm::MachineFunction *)v316[4];
    v938.i64[0] = 0;
    v320 = *((_QWORD *)v319 + 28);
    if (v320)
    {
      *((_QWORD *)v319 + 28) = *(_QWORD *)v320;
      v910[0] = 0;
    }
    else
    {
      v320 = sub_1C484358C((uint64_t)v319 + 128, 72, 3);
      v910[0] = (void *)v938.i64[0];
      if (v938.i64[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)&v938, (unsigned __int8 *)v938.i64[0], (uint64_t)v910);
        v938.i64[0] = 0;
      }
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v320, v319, v318, (unsigned __int8 **)v910, 0);
    if (v910[0])
      llvm::MetadataTracking::untrack((uint64_t)v910, (unsigned __int8 *)v910[0]);
    if (v938.i64[0])
      llvm::MetadataTracking::untrack((uint64_t)&v938, (unsigned __int8 *)v938.i64[0]);
    v321 = v316[5];
    *(_QWORD *)(v320 + 24) = v321;
    v322 = *(_QWORD *)(v321 + 32);
    v323 = *(unsigned int *)(v320 + 40);
    if ((_DWORD)v323)
    {
      v807 = *(_QWORD *)(v320 + 32);
      v808 = *(_QWORD *)(v322 + 40);
      v809 = 32 * v323;
      do
      {
        if (!*(_BYTE *)v807)
        {
          v810 = *(unsigned int *)(v807 + 4);
          if ((int)v810 >= 0)
            v811 = (uint64_t *)(*(_QWORD *)(v808 + 272) + 8 * v810);
          else
            v811 = (uint64_t *)(*(_QWORD *)(v808 + 24) + 16 * (v810 & 0x7FFFFFFF) + 8);
          v812 = *v811;
          if (*v811)
          {
            v813 = *(_QWORD *)(v812 + 16);
            *(_QWORD *)(v812 + 16) = v807;
            *(_QWORD *)(v807 + 16) = v813;
            if ((*(_BYTE *)(v807 + 3) & 1) != 0)
            {
              *(_QWORD *)(v807 + 24) = v812;
            }
            else
            {
              *(_QWORD *)(v807 + 24) = 0;
              v811 = (uint64_t *)(v813 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v807 + 16) = v807;
            *(_QWORD *)(v807 + 24) = 0;
          }
          *v811 = v807;
        }
        v807 += 32;
        v809 -= 32;
      }
      while (v809);
    }
    v324 = *(_QWORD *)(v322 + 728);
    if (v324)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v324 + 24))(v324, v320);
    v325 = *v317 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v320 = v325 | *(_QWORD *)v320 & 7;
    *(_QWORD *)(v320 + 8) = v317;
    *(_QWORD *)(v325 + 8) = v320;
    *v317 = *v317 & 7 | v320;
    LODWORD(v910[0]) = 1;
    v911 = 0;
    v910[1] = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v320, v319, (const llvm::MachineOperand *)v910);
    if (v905)
      llvm::MetadataTracking::untrack((uint64_t)&v905, (unsigned __int8 *)v905);
    LOBYTE(v6) = 1;
  }
  v326 = *(unint64_t **)(v849 + 328);
  v854 = v6;
  if (v326 == v856)
    goto LABEL_968;
  v327 = *(unint64_t **)(v849 + 328);
  do
  {
    for (i = v326[7]; (unint64_t *)i != v326 + 6; i = *(_QWORD *)(i + 8))
    {
      if (**(_WORD **)(i + 16) == 336)
        *(_BYTE *)(v3 + 292) = 1;
      if ((*(_BYTE *)i & 4) == 0)
      {
        while ((*(_WORD *)(i + 44) & 8) != 0)
          i = *(_QWORD *)(i + 8);
      }
    }
    v326 = (unint64_t *)v326[1];
  }
  while (v326 != v856);
  while (2)
  {
    v890 = v892;
    v891 = 0x400000000;
    v852 = v327;
    v329 = v327[7];
    v875 = v327 + 6;
    if ((unint64_t *)v329 == v327 + 6)
    {
      v692 = 0;
      goto LABEL_967;
    }
    v860 = 0;
    while (2)
    {
      v330 = *(_QWORD *)(v329 + 24);
      v864 = *(llvm::MachineFunction **)(v330 + 32);
      v331 = (_BYTE *)*((_QWORD *)v864 + 2);
      v886 = (llvm::MachineInstr *)v329;
      if (!v331[360]
        || (v332 = **(unsigned __int16 **)(v329 + 16), v333 = sub_1C4C915C4(v332), (v333 & 0xFF00000000) == 0)
        || ((v333 - 61) <= 0x3C
          ? (v334 = ((1 << (v333 - 61)) & 0x100037B180000007) == 0)
          : (v334 = 1),
            v334 && ((v333 - 190) <= 3 ? (v335 = (_DWORD)v333 == 191) : (v335 = 1), v335)))
      {
        v336 = 0;
        v337 = (const llvm::MachineBasicBlock *)v330;
      }
      else
      {
        v367 = *(_QWORD *)(v3 + 264);
        v888[0] = v329;
        v888[1] = v367;
        v889 = v332;
        sub_1C4AD642C((int *)v888, (uint64_t)v910);
        sub_1C4AD662C((uint64_t)v888, (uint64_t)v910, 0, 0, 0, &v902);
        if (v910[0] != &v911)
          free(v910[0]);
        v336 = v903 != 0;
        if ((_DWORD)v903)
        {
          v912 = 0;
          memset(v913, 0, 13);
          v914 = &v916;
          v915 = 0x200000000;
          v918 = 0;
          v919 = v921;
          v920 = 0x600000000;
          v925 = 0;
          v926 = v928;
          v927 = 0x600000000;
          v929 = 0;
          v930 = v932;
          v931 = 0x600000000;
          v933 = 0;
          v934 = v936;
          v935 = 0x600000000;
          v937 = 0;
          v368 = *(llvm::MachineBasicBlock **)(v329 + 24);
          llvm::RegScavenger::enterBasicBlockEnd((llvm::RegScavenger *)v910, v368);
          while (v913[0] != v329)
            llvm::RegScavenger::backward((llvm::RegScavenger *)v910);
          llvm::RegScavenger::backward((llvm::RegScavenger *)v910);
          v500 = *((_QWORD *)v368 + 4);
          v501 = *(_QWORD *)(v500 + 48);
          if (!v501)
          {
            v501 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v500 + 8) + 216))(*(_QWORD *)(v500 + 8), v500 + 128, *((_QWORD *)v368 + 4));
            *(_QWORD *)(v500 + 48) = v501;
          }
          v850 = v368;
          v857 = v330;
          v900[0] = v901;
          v900[1] = (void *)0x300000000;
          if (*(_DWORD *)(v501 + 512))
            sub_1C614CA14((uint64_t)v900, v501 + 504);
          v897 = v899;
          v898 = 0x300000000;
          v502 = *(_DWORD *)(*(_QWORD *)(v3 + 264) + 16);
          v938.i64[0] = (uint64_t)&v939;
          v938.i64[1] = 0x600000000;
          sub_1C4765AA4(v938.i8, (v502 + 63) >> 6, 0);
          v941 = v502;
          if ((_DWORD)v903)
          {
            v872 = 0;
            v503 = (char *)v902;
            v867 = (char *)v902 + 8 * v903;
            do
            {
              v504 = *((unsigned int *)v503 + 1);
              v881 = *(unsigned int *)v503;
              RegClassConstraint = llvm::MachineInstr::getRegClassConstraint((llvm::MachineInstr *)v329, v504, *(const llvm::TargetInstrInfo **)(v3 + 256), *(const llvm::TargetRegisterInfo **)(v3 + 264));
              v506 = *(const llvm::TargetRegisterInfo **)(v3 + 264);
              v507 = llvm::MachineInstr::getRegClassConstraint((llvm::MachineInstr *)v329, v504, *(const llvm::TargetInstrInfo **)(v3 + 256), v506);
              CommonSubClass = (unsigned __int16 ***)llvm::TargetRegisterInfo::getCommonSubClass((uint64_t)v506, RegClassConstraint, v507);
              llvm::RegScavenger::getRegsAvailable(v910, CommonSubClass, (char *)&v905);
              v509 = v906;
              if (v938.i32[2] >= v906)
                v510 = v906;
              else
                v510 = v938.u32[2];
              v511 = (uint64_t *)v905;
              if ((_DWORD)v510)
              {
                v512 = (uint64_t *)v938.i64[0];
                v513 = v905;
                do
                {
                  v514 = *v512++;
                  *v513++ &= ~v514;
                  --v510;
                }
                while (v510);
              }
              if ((_DWORD)v509)
              {
                v515 = 0;
                v516 = 8 * v509;
                while (!v511[v515 / 8])
                {
                  v515 += 8;
                  if (v516 == v515)
                    goto LABEL_644;
                }
              }
              else
              {
LABEL_644:
                llvm::RegScavenger::forward((llvm::RegScavenger *)v910);
                v517 = v872;
                v518 = *((unsigned int *)v900[0] + v872);
                v519 = v915;
                if (v915 >= (unint64_t)HIDWORD(v915))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v914, (uint64_t)&v916, v915 + 1, 16);
                  v517 = v872;
                  v519 = v915;
                }
                v872 = v517 + 1;
                v520 = (char *)v914 + 16 * v519;
                *v520 = v518;
                v520[1] = 0;
                LODWORD(v915) = v915 + 1;
                v521 = llvm::RegScavenger::scavengeRegisterBackwards(v910, (uint64_t)CommonSubClass, (_QWORD *)v329, 0, 0, 1);
                v511 = (uint64_t *)v905;
                *((_QWORD *)v905 + (v521 >> 6)) |= 1 << v521;
              }
              if (DWORD2(v909))
              {
                v522 = 0;
                v523 = (DWORD2(v909) - 1) & 0xFFFFFFC0;
                while (1)
                {
                  v525 = *v511++;
                  v524 = v525;
                  v526 = v523 == v522 ? 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v909) : -1;
                  v527 = v526 & v524;
                  if (v527)
                    break;
                  v522 += 64;
                  if (v523 + 64 == v522)
                    goto LABEL_654;
                }
                v528 = __clz(__rbit64(v527)) + v522;
              }
              else
              {
LABEL_654:
                v528 = -1;
              }
              v529 = *(_QWORD *)(v3 + 264);
              v530 = *(_DWORD *)(v529 + 16);
              v531 = (v530 + 63) >> 6;
              v893.i64[0] = (uint64_t)&v894;
              v893.i64[1] = 0x600000000;
              sub_1C4765AA4(v893.i8, v531, 0);
              v896 = v530;
              if (v529)
                v532 = (uint64_t *)(v529 + 8);
              else
                v532 = 0;
              v533 = v528;
              v534 = *v532;
              v535 = *(unsigned int *)(*v532 + 24 * v528 + 16);
              v536 = v535 & 0xF;
              v537 = (v535 >> 3) & 0x1FFFFFFE;
              v540 = v532 + 5;
              v539 = v532[5];
              v538 = v540[1];
              v541 = (_WORD *)(v538 + v537);
              v542 = *v541 + v536 * v528;
              v329 = (uint64_t)v886;
              do
              {
                v543 = *(unsigned __int16 *)(v539 + 4 * v542);
                if (*(_WORD *)(v539 + 4 * v542))
                {
                  v544 = *(unsigned __int16 *)(v539 + 4 * v542 + 2);
                  v545 = v893.i64[0];
                  do
                  {
                    v546 = v543;
                    v543 = v544;
                    if (v538)
                    {
                      v547 = (unsigned __int16 *)(v538
                                                + 2 * *(unsigned int *)(v534 + 24 * (unsigned __int16)v546 + 8));
                      do
                      {
                        *(_QWORD *)(v545 + 8 * ((unsigned __int16)v546 >> 6)) |= 1 << v546;
                        v548 = *v547++;
                        v546 += v548;
                      }
                      while (v548);
                    }
                    v544 = 0;
                  }
                  while ((_WORD)v543);
                }
                v549 = (unsigned __int16)v541[1];
                ++v541;
                v542 += v549;
              }
              while (v549);
              if (v941 < v530)
              {
                v550 = v938.u32[2];
                if ((v941 & 0x3F) != 0)
                  *(_QWORD *)(v938.i64[0] + 8 * v938.u32[2] - 8) &= ~(-1 << (v941 & 0x3F));
                v551 = v550;
                v941 = v530;
                if ((_DWORD)v550 != (_DWORD)v531)
                {
                  if (v550 > v531)
                  {
                    v938.i32[2] = v531;
                  }
                  else
                  {
                    v552 = v550;
                    if (v531 > v938.i32[3])
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v938, (uint64_t)&v939, (v530 + 63) >> 6, 8);
                      v552 = v938.u32[2];
                      v551 = v938.i32[2];
                    }
                    if (v531 != v550)
                      bzero((void *)(v938.i64[0] + 8 * v552), 8 * (v531 - v550));
                    LODWORD(v531) = v551 + v531 - v550;
                    v938.i32[2] = v531;
                    LOBYTE(v530) = v941;
                  }
                }
                v3 = v885;
                if ((v530 & 0x3F) != 0)
                  *(_QWORD *)(v938.i64[0] + 8 * v531 - 8) &= ~(-1 << (v530 & 0x3F));
              }
              v553 = v893.u32[2];
              v554 = (uint64_t *)v893.i64[0];
              if (v893.i32[2])
              {
                v555 = (_QWORD *)v938.i64[0];
                v556 = (uint64_t *)v893.i64[0];
                do
                {
                  v557 = *v556++;
                  *v555++ |= v557;
                  --v553;
                }
                while (v553);
              }
              if (v554 != &v894)
                free(v554);
              v558 = v898;
              if (v898 >= (unint64_t)HIDWORD(v898))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v897, (uint64_t)v899, v898 + 1, 8);
                v558 = v898;
              }
              *((_QWORD *)v897 + v558) = v533 | (v881 << 32);
              LODWORD(v898) = v898 + 1;
              llvm::MachineOperand::setReg(*((_QWORD *)v886 + 4) + 32 * v504, v533);
              sub_1C525D2AC(&v918, (unsigned __int16)v881, -1);
              if (v905 != (char *)&v906 + 8)
                free(v905);
              v503 += 8;
            }
            while (v503 != v867);
          }
          if ((_DWORD)v898)
          {
            v559 = (unint64_t *)v897;
            v560 = 8 * v898;
            do
            {
              v561 = *v559++;
              (*(void (**)(_QWORD, llvm::MachineBasicBlock *, uint64_t, uint64_t, _QWORD, unint64_t, uint64_t))(**(_QWORD **)(v3 + 256) + 400))(*(_QWORD *)(v3 + 256), v850, v329, v329 + 56, v561, HIDWORD(v561), 1);
              v560 -= 8;
            }
            while (v560);
          }
          v330 = v857;
          if ((uint64_t *)v938.i64[0] != &v939)
            free((void *)v938.i64[0]);
          if (v897 != v899)
            free(v897);
          if (v900[0] != v901)
            free(v900[0]);
          if (v934 != v936)
            free(v934);
          v336 = 1;
          if (v930 != v932)
          {
            free(v930);
            v336 = 1;
          }
          if (v926 != v928)
          {
            free(v926);
            v336 = 1;
          }
          if (v919 != v921)
          {
            free(v919);
            v336 = 1;
          }
          if (v914 != &v916)
          {
            free(v914);
            v336 = 1;
          }
        }
        if (v902 != &v904)
        {
          v562 = v336;
          free(v902);
          v336 = v562;
        }
        v337 = *(const llvm::MachineBasicBlock **)(v329 + 24);
        v331 = *(_BYTE **)(*((_QWORD *)v337 + 4) + 16);
      }
      if (v331[372])
      {
        v626 = v336;
        v627 = **(unsigned __int16 **)(v329 + 16);
        v628 = sub_1C4C915C4(v627);
        if ((v628 & 0xFF00000000) == 0
          || (v628 <= 0x25 ? (v629 = ((1 << v628) & 0x300C000000) == 0) : (v629 = 1),
              v629
           || (v630 = sub_1C4C2FD5C(v627), v631 = *((_QWORD *)v886 + 4) + 32 * v630, *(_BYTE *)v631)))
        {
          v338 = 0;
          v3 = v885;
          v329 = (uint64_t)v886;
        }
        else
        {
          v671 = *(unsigned int *)(v631 + 4);
          v672 = *(_QWORD *)(v885 + 264);
          v893.i64[0] = (uint64_t)v886;
          v893.i64[1] = v672;
          LODWORD(v894) = v627;
          sub_1C6158918(v893.i32, (uint64_t)v910);
          v338 = sub_1C6158A54((uint64_t)&v893, (uint64_t)v910, v671, 0, 0);
          if (v910[0] != &v911)
            free(v910[0]);
          if (v338)
          {
            v912 = 0;
            memset(v913, 0, 13);
            v914 = &v916;
            v915 = 0x200000000;
            v918 = 0;
            v919 = v921;
            v920 = 0x600000000;
            v925 = 0;
            v926 = v928;
            v927 = 0x600000000;
            v929 = 0;
            v930 = v932;
            v931 = 0x600000000;
            v933 = 0;
            v934 = v936;
            v935 = 0x600000000;
            v937 = 0;
            v883 = (llvm::MachineBasicBlock *)*((_QWORD *)v886 + 3);
            llvm::RegScavenger::enterBasicBlockEnd((llvm::RegScavenger *)v910, v883);
            while ((llvm::MachineInstr *)v913[0] != v886)
              llvm::RegScavenger::backward((llvm::RegScavenger *)v910);
            llvm::RegScavenger::backward((llvm::RegScavenger *)v910);
            v673 = *(_DWORD *)(*(_QWORD *)(v885 + 264) + 16);
            v938.i64[0] = (uint64_t)&v939;
            v938.i64[1] = 0x600000000;
            sub_1C4765AA4(v938.i8, (v673 + 63) >> 6, 0);
            v941 = v673;
            v674 = (unsigned __int16 ***)llvm::MachineInstr::getRegClassConstraint(v886, v630, *(const llvm::TargetInstrInfo **)(v885 + 256), *(const llvm::TargetRegisterInfo **)(v885 + 264));
            llvm::RegScavenger::getRegsAvailable(v910, v674, (char *)&v905);
            if ((_DWORD)v906)
            {
              v675 = (uint64_t *)v905;
              v676 = 8 * v906;
              v677 = v905;
              while (!*v677)
              {
                ++v677;
                v676 -= 8;
                if (!v676)
                  goto LABEL_921;
              }
              if (DWORD2(v909))
              {
                v681 = 0;
                v682 = (DWORD2(v909) - 1) & 0xFFFFFFC0;
                while (1)
                {
                  v684 = *v675++;
                  v683 = v684;
                  v685 = v682 == v681 ? 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v909) : -1;
                  v686 = v685 & v683;
                  if (v686)
                    break;
                  v681 += 64;
                  if (v682 + 64 == v681)
                    goto LABEL_934;
                }
                v687 = __clz(__rbit64(v686)) + v681;
              }
              else
              {
LABEL_934:
                v687 = -1;
              }
            }
            else
            {
LABEL_921:
              llvm::RegScavenger::forward((llvm::RegScavenger *)v910);
              v678 = *(_QWORD *)(*((_QWORD *)v886 + 3) + 32);
              v679 = *(_QWORD *)(v678 + 48);
              if (!v679)
              {
                v679 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v678 + 8) + 216))(*(_QWORD *)(v678 + 8), v678 + 128, v678);
                *(_QWORD *)(v678 + 48) = v679;
              }
              if (*(_DWORD *)(v679 + 512))
                v680 = **(unsigned int **)(v679 + 504);
              else
                v680 = 0;
              v688 = v915;
              if (v915 >= (unint64_t)HIDWORD(v915))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v914, (uint64_t)&v916, v915 + 1, 16);
                v688 = v915;
              }
              v689 = (char *)v914 + 16 * v688;
              *v689 = v680;
              v689[1] = 0;
              LODWORD(v915) = v915 + 1;
              v687 = llvm::RegScavenger::scavengeRegisterBackwards(v910, (uint64_t)v674, v886, 0, 0, 1);
              llvm::RegScavenger::backward((llvm::RegScavenger *)v910);
            }
            (*(void (**)(_QWORD, llvm::MachineBasicBlock *, llvm::MachineInstr *, uint64_t, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v885 + 256) + 400))(*(_QWORD *)(v885 + 256), v883, v886, (uint64_t)v886 + 56, v687, v671, 1);
            llvm::MachineOperand::setReg(v631, v687);
            if (v905 != (char *)&v906 + 8)
              free(v905);
            if ((uint64_t *)v938.i64[0] != &v939)
              free((void *)v938.i64[0]);
            if (v934 != v936)
              free(v934);
            if (v930 != v932)
              free(v930);
            if (v926 != v928)
              free(v926);
            if (v919 != v921)
              free(v919);
            if (v914 != &v916)
              free(v914);
          }
          v3 = v885;
          v329 = (uint64_t)v886;
          v337 = (const llvm::MachineBasicBlock *)*((_QWORD *)v886 + 3);
          v331 = *(_BYTE **)(*((_QWORD *)v337 + 4) + 16);
        }
        v336 = v626;
      }
      else
      {
        v338 = 0;
      }
      v339 = v331[381] != 0;
      v340 = *(unsigned __int16 **)(v329 + 16);
      if (!v331[381])
      {
LABEL_378:
        v341 = *v340;
        goto LABEL_379;
      }
      v851 = v336;
      v341 = *v340;
      if ((v341 - 541) <= 8 && ((1 << (v341 - 29)) & 0x125) != 0)
      {
        v868 = *((_QWORD *)v886 + 4) + 32 * sub_1C4C2FD5C(v341);
        v873 = *(_DWORD *)(v868 + 4);
        v633 = *(_DWORD **)(v885 + 264);
        v911 = 0x600000000;
        v910[1] = &v912;
        v910[0] = v633;
        v634 = v633[11];
        v917 = v634;
        v635 = v634 + 63;
        if ((v634 + 63) < 0x40)
        {
          v640 = 0;
          v639 = &v912;
        }
        else
        {
          v636 = v635 >> 6;
          if (v635 >= 0x1C0)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v910[1], (uint64_t)&v912, v635 >> 6, 8);
            v639 = (uint64_t *)v910[1];
            v637 = v911;
            LOBYTE(v634) = v917;
            v638 = v911;
          }
          else
          {
            v637 = 0;
            v638 = 0;
            v639 = &v912;
          }
          bzero(&v639[v637], 8 * v636);
          v640 = v638 + v636;
          LODWORD(v911) = v638 + v636;
        }
        if ((v634 & 0x3F) != 0)
          v639[v640 - 1] &= ~(-1 << (v634 & 0x3F));
        llvm::LiveRegUnits::addLiveOuts((llvm::LiveRegUnits *)v910, v337);
        if (v910[0])
          v641 = (char *)v910[0] + 8;
        else
          v641 = 0;
        v642 = *(unsigned int *)(*v641 + 24 * (unsigned __int16)v873 + 16);
        v643 = (_WORD *)(v641[6] + ((v642 >> 3) & 0x1FFFFFFE));
        v645 = *v643;
        v644 = v643 + 1;
        v646 = v645 + (v642 & 0xF) * v873;
        while (((*((_QWORD *)v910[1] + (v646 >> 6)) >> v646) & 1) == 0)
        {
          v647 = *v644++;
          v646 += v647;
          if (!v647)
          {
            v649 = *((_QWORD *)v337 + 6);
            v648 = (_QWORD *)((char *)v337 + 48);
            v650 = v649 & 0xFFFFFFFFFFFFFFF8;
            if ((v649 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_BYTE *)v650 & 4) == 0)
            {
              while ((*(_WORD *)(v650 + 44) & 4) != 0)
                v650 = *(_QWORD *)v650 & 0xFFFFFFFFFFFFFFF8;
            }
            if ((llvm::MachineInstr *)v650 == v886)
              goto LABEL_897;
            v882 = 0;
            do
            {
              v651 = llvm::MachineInstr::findRegisterDefOperandIdx(v650, v873, 0, 0, *(_QWORD *)(v885 + 264)) == -1;
              RegisterUseOperandIdx = llvm::MachineInstr::findRegisterUseOperandIdx(v650, v873, 0, *(_QWORD *)(v885 + 264));
              v653 = *(_QWORD *)v650;
              v654 = v651 & v882;
              if (RegisterUseOperandIdx != -1)
                v654 = 1;
              v882 = v654;
              v650 = v653 & 0xFFFFFFFFFFFFFFF8;
              if ((v653 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_BYTE *)v650 & 4) == 0)
              {
                while ((*(_WORD *)(v650 + 44) & 4) != 0)
                  v650 = *(_QWORD *)v650 & 0xFFFFFFFFFFFFFFF8;
              }
            }
            while ((llvm::MachineInstr *)v650 != v886);
            if ((v654 & 1) == 0)
            {
LABEL_897:
              v655 = *(_QWORD *)v886 & 0xFFFFFFFFFFFFFFF8;
              if (!v655 || (*(_BYTE *)v655 & 4) == 0)
              {
                while ((*(_WORD *)(v655 + 44) & 4) != 0)
                  v655 = *(_QWORD *)v655 & 0xFFFFFFFFFFFFFFF8;
              }
              while ((_QWORD *)v655 != v648)
              {
                if (llvm::MachineInstr::findRegisterDefOperandIdx(v655, v873, 0, 0, *(_QWORD *)(v885 + 264)) != -1)goto LABEL_881;
                if (llvm::MachineInstr::findRegisterUseOperandIdx(v655, v873, 0, *(_QWORD *)(v885 + 264)) != -1)
                  break;
                v655 = *(_QWORD *)v655 & 0xFFFFFFFFFFFFFFF8;
                if (!v655 || (*(_BYTE *)v655 & 4) == 0)
                {
                  while ((*(_WORD *)(v655 + 44) & 4) != 0)
                    v655 = *(_QWORD *)v655 & 0xFFFFFFFFFFFFFFF8;
                }
              }
            }
            break;
          }
        }
        v655 = 0;
LABEL_881:
        if (v910[1] != &v912)
          free(v910[1]);
        v3 = v885;
        v329 = (uint64_t)v886;
        if (!v655)
          goto LABEL_892;
        v656 = **(unsigned __int16 **)(v655 + 16);
        v657 = sub_1C4C915C4(v656);
        if ((v657 & 0xFF00000000) == 0)
          llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
        v658 = v657;
        v3 = v885;
        v329 = (uint64_t)v886;
        if ((_DWORD)v657 != 69 && (_DWORD)v657 != 50)
          goto LABEL_892;
        if (sub_1C4C32DEC(v656) == 13)
          v659 = 12;
        else
          v659 = 13;
        v660 = sub_1C4C915F0(v656, 20, v659);
        v661 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v655 + 24) + 32) + 16);
        *(_QWORD *)(v655 + 16) = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v661 + 104))(v661) + 8)
                               + 48 * v660;
        v662 = sub_1C4C915F0(**((unsigned __int16 **)v886 + 2), 8, 12);
        v663 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v886 + 3) + 32) + 16);
        v340 = (unsigned __int16 *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v663 + 104))(v663) + 8)
                                  + 48 * v662);
        *((_QWORD *)v886 + 2) = v340;
        if (v658 == 50)
        {
          v3 = v885;
          v329 = (uint64_t)v886;
        }
        else
        {
          v3 = v885;
          v329 = (uint64_t)v886;
          v336 = v851;
          if (v658 == 69)
            goto LABEL_378;
LABEL_892:
          v664 = *(_QWORD *)(v329 + 24);
          *(_OWORD *)v910 = xmmword_1C6613BA0;
          v665 = sub_1C4C640F8(148, 4, v910);
          v938.i64[0] = 0;
          v666 = sub_1C612596C(v664, v329, (unsigned __int8 **)&v938, *(_QWORD *)(*(_QWORD *)(v3 + 256) + 8) + 48 * v665, 74);
          v668 = v667;
          LODWORD(v910[0]) = 1;
          v910[1] = 0;
          v911 = 0;
          llvm::MachineInstr::addOperand(v667, v666, (const llvm::MachineOperand *)v910);
          v910[1] = 0;
          HIDWORD(v910[0]) = v873;
          LODWORD(v910[0]) = 0;
          v911 = 0;
          v912 = 0;
          llvm::MachineInstr::addOperand(v668, v666, (const llvm::MachineOperand *)v910);
          LODWORD(v910[0]) = 1;
          v910[1] = 0;
          v911 = 0;
          llvm::MachineInstr::addOperand(v668, v666, (const llvm::MachineOperand *)v910);
          LODWORD(v910[0]) = 1;
          v910[1] = 0;
          v911 = 1;
          llvm::MachineInstr::addOperand(v668, v666, (const llvm::MachineOperand *)v910);
          if (v938.i64[0])
            llvm::MetadataTracking::untrack((uint64_t)&v938, (unsigned __int8 *)v938.i64[0]);
          llvm::MachineOperand::setReg(v868, 0x4Au);
          v329 = (uint64_t)v886;
          v669 = sub_1C4C915F0(**((unsigned __int16 **)v886 + 2), 8, 12);
          v670 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v886 + 3) + 32) + 16);
          v340 = (unsigned __int16 *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v670 + 104))(v670)
                                                + 8)
                                    + 48 * v669);
          *((_QWORD *)v886 + 2) = v340;
          v3 = v885;
        }
        v336 = v851;
        goto LABEL_378;
      }
      v339 = 0;
      v3 = v885;
      v329 = (uint64_t)v886;
LABEL_379:
      if (v341 > 303)
      {
        if (v341 == 6167)
        {
          v360 = v329;
          v361 = *(_QWORD *)(*(_QWORD *)(v3 + 256) + 8);
          v362 = *(unsigned __int8 *)(v361 + 296021);
          v363 = *(unsigned __int8 *)(v361 + 20405);
          v364 = *(llvm::MachineFunction **)(v330 + 32);
          v365 = *(unsigned __int8 **)(v360 + 56);
          v938.i64[0] = (uint64_t)v365;
          if (v365)
            llvm::MetadataTracking::track((uint64_t)&v938, v365, 2);
          v366 = *((_QWORD *)v364 + 28);
          if (v366)
            *((_QWORD *)v364 + 28) = *(_QWORD *)v366;
          else
            v366 = sub_1C484358C((uint64_t)v364 + 128, 72, 3);
          v910[0] = (void *)v938.i64[0];
          if (v938.i64[0])
          {
            llvm::MetadataTracking::retrack((uint64_t)&v938, (unsigned __int8 *)v938.i64[0], (uint64_t)v910);
            v938.i64[0] = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v366, v364, v361 + 20400, (unsigned __int8 **)v910, 0);
          if (v910[0])
            llvm::MetadataTracking::untrack((uint64_t)v910, (unsigned __int8 *)v910[0]);
          v329 = (uint64_t)v886;
          if (v938.i64[0])
            llvm::MetadataTracking::untrack((uint64_t)&v938, (unsigned __int8 *)v938.i64[0]);
          v563 = *(_QWORD *)(v330 + 40);
          *(_QWORD *)(v366 + 24) = v563;
          v564 = *(_QWORD *)(v563 + 32);
          v565 = *(unsigned int *)(v366 + 40);
          if ((_DWORD)v565)
          {
            v619 = *(_QWORD *)(v366 + 32);
            v620 = *(_QWORD *)(v564 + 40);
            v621 = 32 * v565;
            do
            {
              if (!*(_BYTE *)v619)
              {
                v622 = *(unsigned int *)(v619 + 4);
                if ((int)v622 >= 0)
                  v623 = (uint64_t *)(*(_QWORD *)(v620 + 272) + 8 * v622);
                else
                  v623 = (uint64_t *)(*(_QWORD *)(v620 + 24) + 16 * (v622 & 0x7FFFFFFF) + 8);
                v624 = *v623;
                if (*v623)
                {
                  v625 = *(_QWORD *)(v624 + 16);
                  *(_QWORD *)(v624 + 16) = v619;
                  *(_QWORD *)(v619 + 16) = v625;
                  if ((*(_BYTE *)(v619 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v619 + 24) = v624;
                  }
                  else
                  {
                    *(_QWORD *)(v619 + 24) = 0;
                    v623 = (uint64_t *)(v625 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v619 + 16) = v619;
                  *(_QWORD *)(v619 + 24) = 0;
                }
                *v623 = v619;
              }
              v619 += 32;
              v621 -= 32;
            }
            while (v621);
          }
          v566 = *(_QWORD *)(v564 + 728);
          if (v566)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v566 + 24))(v566, v366);
          v567 = *(_QWORD *)v886 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v366 = v567 | *(_QWORD *)v366 & 7;
          *(_QWORD *)(v366 + 8) = v886;
          *(_QWORD *)(v567 + 8) = v366;
          *(_QWORD *)v886 = *(_QWORD *)v886 & 7 | v366;
          LODWORD(v910[0]) = 1;
          v910[1] = 0;
          v911 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v366, v364, (const llvm::MachineOperand *)v910);
          LODWORD(v910[0]) = 1;
          v910[1] = 0;
          v911 = v363 + v362;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v366, v364, (const llvm::MachineOperand *)v910);
          goto LABEL_724;
        }
        if (v341 == 336)
          goto LABEL_402;
        if (v341 != 304)
          goto LABEL_417;
        goto LABEL_386;
      }
      if ((v341 - 260) < 2)
      {
LABEL_386:
        if (*(_BYTE *)(v3 + 289))
        {
          v342 = (*(unsigned __int16 *)(*(_QWORD *)v864 + 18) >> 4) & 0x3FF;
          if (v342 && v342 != 8 && v342 != 255)
          {
            v344 = (llvm::MachineFunction **)*((_QWORD *)v864 + 41);
            if (v344 == (llvm::MachineFunction **)((char *)v864 + 320)
              || v344[1] == (llvm::MachineFunction *)((char *)v864 + 320))
            {
              v345 = *(_QWORD *)(v3 + 256);
              v346 = *(_QWORD *)(v329 + 56) != 0;
              v910[0] = 0;
              sub_1C49D63F4(v345, v330, (unint64_t *)v329, 0, 267, 1, v346, (unsigned __int8 **)v910, 0);
              if (v910[0])
                llvm::MetadataTracking::untrack((uint64_t)v910, (unsigned __int8 *)v910[0]);
              *(_BYTE *)(v3 + 289) = 0;
              v341 = **(unsigned __int16 **)(v329 + 16);
            }
          }
        }
        v347 = *(unint64_t **)(v329 + 24);
        if (v341 == 260)
        {
          sub_1C4AAB114(*(_QWORD **)(v329 + 24));
          v938 = 0uLL;
          v938.i64[0] = sub_1C49E0FE4((uint64_t)v347, (unint64_t *)v329, (unsigned __int8 **)(v329 + 56), *(_QWORD *)(v3 + 256));
          v938.i64[1] = v348;
          v349 = *(_QWORD *)(*(_QWORD *)(v3 + 256) + 8);
          v350 = (llvm::MachineFunction *)v347[4];
          v351 = *(void **)(v329 + 56);
          v905 = v351;
          if (v351)
            llvm::MetadataTracking::track((uint64_t)&v905, (unsigned __int8 *)v351, 2);
          v352 = *((_QWORD *)v350 + 28);
          if (v352)
            *((_QWORD *)v350 + 28) = *(_QWORD *)v352;
          else
            v352 = sub_1C484358C((uint64_t)v350 + 128, 72, 3);
          v910[0] = v905;
          if (v905)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v905, (unsigned __int8 *)v905, (uint64_t)v910);
            v905 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v352, v350, v349 + 26304, (unsigned __int8 **)v910, 0);
          if (v910[0])
            llvm::MetadataTracking::untrack((uint64_t)v910, (unsigned __int8 *)v910[0]);
          if (v905)
            llvm::MetadataTracking::untrack((uint64_t)&v905, (unsigned __int8 *)v905);
          v442 = v347[5];
          *(_QWORD *)(v352 + 24) = v442;
          v443 = *(_QWORD *)(v442 + 32);
          v444 = *(unsigned int *)(v352 + 40);
          if ((_DWORD)v444)
          {
            v568 = *(_QWORD *)(v352 + 32);
            v569 = *(_QWORD *)(v443 + 40);
            v570 = 32 * v444;
            do
            {
              if (!*(_BYTE *)v568)
              {
                v571 = *(unsigned int *)(v568 + 4);
                if ((int)v571 >= 0)
                  v572 = (uint64_t *)(*(_QWORD *)(v569 + 272) + 8 * v571);
                else
                  v572 = (uint64_t *)(*(_QWORD *)(v569 + 24) + 16 * (v571 & 0x7FFFFFFF) + 8);
                v573 = *v572;
                if (*v572)
                {
                  v574 = *(_QWORD *)(v573 + 16);
                  *(_QWORD *)(v573 + 16) = v568;
                  *(_QWORD *)(v568 + 16) = v574;
                  if ((*(_BYTE *)(v568 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v568 + 24) = v573;
                  }
                  else
                  {
                    *(_QWORD *)(v568 + 24) = 0;
                    v572 = (uint64_t *)(v574 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v568 + 16) = v568;
                  *(_QWORD *)(v568 + 24) = 0;
                }
                *v572 = v568;
              }
              v568 += 32;
              v570 -= 32;
            }
            while (v570);
          }
          v445 = *(_QWORD *)(v443 + 728);
          if (v445)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v445 + 24))(v445, v352);
          v446 = *(_QWORD *)v329 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v352 = v446 | *(_QWORD *)v352 & 7;
          *(_QWORD *)(v352 + 8) = v329;
          *(_QWORD *)(v446 + 8) = v352;
          *(_QWORD *)v329 = *(_QWORD *)v329 & 7 | v352;
          LODWORD(v910[0]) = 1;
          v910[1] = 0;
          v911 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v352, v350, (const llvm::MachineOperand *)v910);
          v910[1] = 0;
          v910[0] = (void *)0x200000000;
          v911 = 0;
          v912 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v352, v350, (const llvm::MachineOperand *)v910);
          LODWORD(v910[0]) = 1;
          v910[1] = 0;
          v911 = 2;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v352, v350, (const llvm::MachineOperand *)v910);
          v447 = *(_QWORD *)(*(_QWORD *)(v3 + 256) + 8);
          v448 = (llvm::MachineFunction *)v347[4];
          v449 = *(void **)(v329 + 56);
          v905 = v449;
          if (v449)
            llvm::MetadataTracking::track((uint64_t)&v905, (unsigned __int8 *)v449, 2);
          v450 = *((_QWORD *)v448 + 28);
          if (v450)
            *((_QWORD *)v448 + 28) = *(_QWORD *)v450;
          else
            v450 = sub_1C484358C((uint64_t)v448 + 128, 72, 3);
          v910[0] = v905;
          if (v905)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v905, (unsigned __int8 *)v905, (uint64_t)v910);
            v905 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v450, v448, v447 + 20064, (unsigned __int8 **)v910, 0);
          if (v910[0])
            llvm::MetadataTracking::untrack((uint64_t)v910, (unsigned __int8 *)v910[0]);
          if (v905)
            llvm::MetadataTracking::untrack((uint64_t)&v905, (unsigned __int8 *)v905);
          v451 = v347[5];
          *(_QWORD *)(v450 + 24) = v451;
          v452 = *(_QWORD *)(v451 + 32);
          v453 = *(unsigned int *)(v450 + 40);
          if ((_DWORD)v453)
          {
            v575 = *(_QWORD *)(v450 + 32);
            v576 = *(_QWORD *)(v452 + 40);
            v577 = 32 * v453;
            do
            {
              if (!*(_BYTE *)v575)
              {
                v578 = *(unsigned int *)(v575 + 4);
                if ((int)v578 >= 0)
                  v579 = (uint64_t *)(*(_QWORD *)(v576 + 272) + 8 * v578);
                else
                  v579 = (uint64_t *)(*(_QWORD *)(v576 + 24) + 16 * (v578 & 0x7FFFFFFF) + 8);
                v580 = *v579;
                if (*v579)
                {
                  v581 = *(_QWORD *)(v580 + 16);
                  *(_QWORD *)(v580 + 16) = v575;
                  *(_QWORD *)(v575 + 16) = v581;
                  if ((*(_BYTE *)(v575 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v575 + 24) = v580;
                  }
                  else
                  {
                    *(_QWORD *)(v575 + 24) = 0;
                    v579 = (uint64_t *)(v581 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v575 + 16) = v575;
                  *(_QWORD *)(v575 + 24) = 0;
                }
                *v579 = v575;
              }
              v575 += 32;
              v577 -= 32;
            }
            while (v577);
          }
          v454 = *(_QWORD *)(v452 + 728);
          if (v454)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v454 + 24))(v454, v450);
          v455 = *(_QWORD *)v329 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v450 = v455 | *(_QWORD *)v450 & 7;
          *(_QWORD *)(v450 + 8) = v329;
          *(_QWORD *)(v455 + 8) = v450;
          *(_QWORD *)v329 = *(_QWORD *)v329 & 7 | v450;
          LODWORD(v910[0]) = 1;
          v910[1] = 0;
          v911 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v450, v448, (const llvm::MachineOperand *)v910);
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v450, v448, *(const llvm::MachineOperand **)(v329 + 32));
          v456 = *(_QWORD *)(*(_QWORD *)(v885 + 256) + 8);
          v457 = (llvm::MachineFunction *)v347[4];
          v458 = *(void **)(v329 + 56);
          v905 = v458;
          if (v458)
            llvm::MetadataTracking::track((uint64_t)&v905, (unsigned __int8 *)v458, 2);
          v459 = *((_QWORD *)v457 + 28);
          if (v459)
            *((_QWORD *)v457 + 28) = *(_QWORD *)v459;
          else
            v459 = sub_1C484358C((uint64_t)v457 + 128, 72, 3);
          v910[0] = v905;
          if (v905)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v905, (unsigned __int8 *)v905, (uint64_t)v910);
            v905 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v459, v457, v456 + 26112, (unsigned __int8 **)v910, 0);
          if (v910[0])
            llvm::MetadataTracking::untrack((uint64_t)v910, (unsigned __int8 *)v910[0]);
          if (v905)
            llvm::MetadataTracking::untrack((uint64_t)&v905, (unsigned __int8 *)v905);
          v460 = v347[5];
          *(_QWORD *)(v459 + 24) = v460;
          v461 = *(_QWORD *)(v460 + 32);
          v462 = *(unsigned int *)(v459 + 40);
          if ((_DWORD)v462)
          {
            v582 = *(_QWORD *)(v459 + 32);
            v583 = *(_QWORD *)(v461 + 40);
            v584 = 32 * v462;
            do
            {
              if (!*(_BYTE *)v582)
              {
                v585 = *(unsigned int *)(v582 + 4);
                if ((int)v585 >= 0)
                  v586 = (uint64_t *)(*(_QWORD *)(v583 + 272) + 8 * v585);
                else
                  v586 = (uint64_t *)(*(_QWORD *)(v583 + 24) + 16 * (v585 & 0x7FFFFFFF) + 8);
                v587 = *v586;
                if (*v586)
                {
                  v588 = *(_QWORD *)(v587 + 16);
                  *(_QWORD *)(v587 + 16) = v582;
                  *(_QWORD *)(v582 + 16) = v588;
                  if ((*(_BYTE *)(v582 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v582 + 24) = v587;
                  }
                  else
                  {
                    *(_QWORD *)(v582 + 24) = 0;
                    v586 = (uint64_t *)(v588 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v582 + 16) = v582;
                  *(_QWORD *)(v582 + 24) = 0;
                }
                *v586 = v582;
              }
              v582 += 32;
              v584 -= 32;
            }
            while (v584);
          }
          v463 = *(_QWORD *)(v461 + 728);
          if (v463)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v463 + 24))(v463, v459);
          v464 = *(_QWORD *)v329 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v459 = v464 | *(_QWORD *)v459 & 7;
          *(_QWORD *)(v459 + 8) = v329;
          *(_QWORD *)(v464 + 8) = v459;
          *(_QWORD *)v329 = *(_QWORD *)v329 & 7 | v459;
          LODWORD(v910[0]) = 1;
          v910[1] = 0;
          v911 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v459, v457, (const llvm::MachineOperand *)v910);
          LODWORD(v910[0]) = 1;
          v910[1] = 0;
          v911 = 2;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v459, v457, (const llvm::MachineOperand *)v910);
          sub_1C49E1094((llvm::MachineBasicBlock *)v347, (unint64_t *)v329, *(unsigned __int8 **)(v329 + 56), *(_QWORD *)(v885 + 256), &v938);
          v465 = v329;
        }
        else
        {
          v870 = v347[4];
          v910[0] = &v911;
          v910[1] = (void *)0x1000000000;
          v354 = v347[11];
          v355 = v347[12];
          if (v354 == v355)
          {
            v356 = 0;
          }
          else
          {
            v356 = 0;
            do
            {
              v357 = *(unsigned __int16 **)(*(_QWORD *)v354 + 152);
              for (j = *(unsigned __int16 **)(*(_QWORD *)v354 + 160); v357 != j; v357 += 8)
              {
                v359 = *v357;
                if (v356 >= HIDWORD(v910[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v910, (uint64_t)&v911, v356 + 1, 4);
                  v356 = v910[1];
                }
                *((_DWORD *)v910[0] + v356) = v359;
                v356 = ++LODWORD(v910[1]);
              }
              v354 += 8;
            }
            while (v354 != v355);
          }
          v369 = v347 + 6;
          for (k = v886; k != (llvm::MachineInstr *)v369; k = (llvm::MachineInstr *)*((_QWORD *)k + 1))
          {
            v371 = *((unsigned int *)k + 10);
            if ((_DWORD)v371)
            {
              v372 = 32 * v371;
              v373 = (int *)(*((_QWORD *)k + 4) + 4);
              do
              {
                if ((*(v373 - 1) & 0x10000FF) == 0)
                {
                  v374 = *v373;
                  if (v356 >= HIDWORD(v910[1]))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v910, (uint64_t)&v911, v356 + 1, 4);
                    v356 = v910[1];
                  }
                  *((_DWORD *)v910[0] + v356) = v374;
                  v356 = ++LODWORD(v910[1]);
                }
                v373 += 8;
                v372 -= 32;
              }
              while (v372);
              if (!k)
                goto LABEL_438;
            }
            if ((*(_BYTE *)k & 4) == 0)
            {
LABEL_438:
              while ((*((_WORD *)k + 22) & 8) != 0)
                k = (llvm::MachineInstr *)*((_QWORD *)k + 1);
            }
          }
          v375 = 126 - 2 * __clz(v356);
          if (v356)
            v376 = v375;
          else
            v376 = 0;
          sub_1C4878988((uint64_t)v910[0], (unsigned int *)v910[0] + v356, (uint64_t)&v938, v376, 1);
          v377 = v910[0];
          v378 = (char *)v910[0] + 4 * LODWORD(v910[1]);
          if (LODWORD(v910[1]))
          {
            v379 = (char *)v910[0] - 4;
            v380 = 4 * LODWORD(v910[1]) - 4;
            v381 = v886;
            while (v380)
            {
              v382 = *((_DWORD *)v379 + 1);
              v383 = *((_DWORD *)v379 + 2);
              v379 += 4;
              v380 -= 4;
              if (v382 == v383)
                goto LABEL_449;
            }
          }
          else
          {
            v379 = (char *)v910[0];
            v381 = v886;
LABEL_449:
            if (v379 != v378)
            {
              v384 = v379 + 8;
              if (v379 + 8 != v378)
              {
                v385 = *(_DWORD *)v379;
                do
                {
                  v386 = v385;
                  v385 = *(_DWORD *)v384;
                  if (v386 != *(_DWORD *)v384)
                  {
                    *((_DWORD *)v379 + 1) = v385;
                    v379 += 4;
                  }
                  v384 += 4;
                }
                while (v384 != v378);
              }
              v378 = v379 + 4;
            }
          }
          LODWORD(v910[1]) = (unint64_t)(v378 - v377) >> 2;
          v387 = (char *)v347[11];
          v388 = (char *)v347[12];
          v938.i64[0] = (uint64_t)&v939;
          v938.i64[1] = 0x800000000;
          v389 = v388 - v387;
          if ((unint64_t)(v388 - v387) >= 0x41)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v938, (uint64_t)&v939, v389 >> 3, 8);
            v390 = v938.u32[2];
            v391 = v938.i32[2];
          }
          else
          {
            v390 = 0;
            v391 = 0;
          }
          if (v387 != v388)
          {
            v392 = (_QWORD *)(v938.i64[0] + 8 * v390);
            do
            {
              v393 = *(_QWORD *)v387;
              v387 += 8;
              *v392++ = v393;
            }
            while (v387 != v388);
          }
          v938.i32[2] = v391 + ((unint64_t)v389 >> 3);
          v394 = (llvm::BasicBlock *)v347[2];
          v395 = *(_QWORD *)(v870 + 312);
          if (v395)
            *(_QWORD *)(v870 + 312) = *(_QWORD *)v395;
          else
            v395 = sub_1C484358C(v870 + 128, 232, 3);
          *(_QWORD *)v395 = 0;
          *(_QWORD *)(v395 + 8) = 0;
          *(_QWORD *)(v395 + 16) = v394;
          *(_DWORD *)(v395 + 24) = -1;
          *(_QWORD *)(v395 + 48) = (v395 + 48) | 4;
          *(_QWORD *)(v395 + 56) = v395 + 48;
          *(_QWORD *)(v395 + 152) = 0;
          v879 = (_QWORD *)(v395 + 152);
          *(_BYTE *)(v395 + 144) = 0;
          *(_OWORD *)(v395 + 64) = 0u;
          *(_OWORD *)(v395 + 80) = 0u;
          *(_OWORD *)(v395 + 96) = 0u;
          *(_OWORD *)(v395 + 112) = 0u;
          *(_OWORD *)(v395 + 121) = 0u;
          *(_QWORD *)(v395 + 160) = 0;
          *(_QWORD *)(v395 + 168) = 0;
          *(_BYTE *)(v395 + 176) = 0;
          *(_DWORD *)(v395 + 187) = 0;
          *(_QWORD *)(v395 + 180) = 0;
          *(_QWORD *)(v395 + 192) = 0;
          *(_DWORD *)(v395 + 199) = 0;
          *(_QWORD *)(v395 + 216) = 0;
          *(_QWORD *)(v395 + 224) = 0;
          *(_QWORD *)(v395 + 208) = 0;
          *(_QWORD *)(v395 + 32) = v870;
          *(_QWORD *)(v395 + 40) = v395;
          if (v394)
          {
            *(_QWORD *)(v395 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v394);
            *(_QWORD *)(v395 + 144) = v396;
          }
          v397 = (unint64_t *)v347[1];
          llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v870 + 320, v395);
          v398 = *v397;
          *(_QWORD *)v395 = *v397;
          *(_QWORD *)(v395 + 8) = v397;
          *(_QWORD *)(v398 + 8) = v395;
          *v397 = v395;
          v399 = *(unint64_t **)(v395 + 56);
          v400 = v381;
          if ((*(_BYTE *)v381 & 4) == 0)
          {
            v400 = v381;
            if ((*((_WORD *)v381 + 22) & 8) != 0)
            {
              v400 = v381;
              do
                v400 = (llvm::MachineInstr *)*((_QWORD *)v400 + 1);
              while ((*((_WORD *)v400 + 22) & 8) != 0);
            }
          }
          v401 = (unint64_t *)*((_QWORD *)v400 + 1);
          if (v401 != v369 && v399 != v369)
          {
            if ((unint64_t *)v395 != v347)
            {
              v617 = *(_QWORD *)(v395 + 40);
              v618 = v401;
              do
              {
                v618[3] = v617;
                v618 = (unint64_t *)v618[1];
              }
              while (v618 != v369);
            }
            sub_1C4785D30(v399, v401, v347 + 6);
          }
          v861 = v347 + 6;
          llvm::MachineBasicBlock::transferSuccessorsAndUpdatePHIs((unsigned int *)v395, (llvm::MachineBasicBlock *)v347);
          v866 = v347;
          if (LODWORD(v910[1]))
          {
            v403 = (char *)v910[0];
            v404 = (char *)v910[0] + 4 * LODWORD(v910[1]);
            do
            {
              v405 = *(_DWORD *)v403;
              if (*(_DWORD *)v403)
              {
                v407 = *(_QWORD **)(v395 + 160);
                v406 = *(_QWORD *)(v395 + 168);
                if ((unint64_t)v407 >= v406)
                {
                  v409 = (_QWORD *)*v879;
                  v410 = ((uint64_t)v407 - *v879) >> 4;
                  v411 = v410 + 1;
                  if ((unint64_t)(v410 + 1) >> 60)
LABEL_1274:
                    abort();
                  v412 = v406 - (_QWORD)v409;
                  if (v412 >> 3 > v411)
                    v411 = v412 >> 3;
                  if ((unint64_t)v412 >= 0x7FFFFFFFFFFFFFF0)
                    v413 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v413 = v411;
                  if (v413)
                  {
                    if (v413 >> 60)
LABEL_1278:
                      sub_1C4764EE4();
                    v414 = (char *)operator new(16 * v413);
                  }
                  else
                  {
                    v414 = 0;
                  }
                  v415 = &v414[16 * v410];
                  *(_WORD *)v415 = v405;
                  *((_QWORD *)v415 + 1) = -1;
                  v416 = v415;
                  if (v407 != v409)
                  {
                    do
                    {
                      *((_OWORD *)v416 - 1) = *((_OWORD *)v407 - 1);
                      v416 -= 16;
                      v407 -= 2;
                    }
                    while (v407 != v409);
                    v407 = (_QWORD *)*v879;
                  }
                  v408 = v415 + 16;
                  *(_QWORD *)(v395 + 152) = v416;
                  *(_QWORD *)(v395 + 160) = v415 + 16;
                  *(_QWORD *)(v395 + 168) = &v414[16 * v413];
                  v381 = v886;
                  if (v407)
                    operator delete(v407);
                  v347 = v866;
                }
                else
                {
                  *(_WORD *)v407 = v405;
                  v407[1] = -1;
                  v408 = v407 + 2;
                }
                *(_QWORD *)(v395 + 160) = v408;
              }
              v403 += 4;
            }
            while (v403 != v404);
          }
          v417 = (llvm::BasicBlock *)v347[2];
          v418 = *(_QWORD *)(v870 + 312);
          if (v418)
            *(_QWORD *)(v870 + 312) = *(_QWORD *)v418;
          else
            v418 = sub_1C484358C(v870 + 128, 232, 3);
          *(_QWORD *)v418 = 0;
          *(_QWORD *)(v418 + 8) = 0;
          *(_QWORD *)(v418 + 16) = v417;
          *(_DWORD *)(v418 + 24) = -1;
          *(_QWORD *)(v418 + 48) = (v418 + 48) | 4;
          *(_QWORD *)(v418 + 56) = v418 + 48;
          *(_QWORD *)(v418 + 152) = 0;
          v880 = (_QWORD *)(v418 + 152);
          *(_BYTE *)(v418 + 144) = 0;
          *(_OWORD *)(v418 + 64) = 0u;
          *(_OWORD *)(v418 + 80) = 0u;
          *(_OWORD *)(v418 + 96) = 0u;
          *(_OWORD *)(v418 + 112) = 0u;
          *(_OWORD *)(v418 + 121) = 0u;
          *(_QWORD *)(v418 + 160) = 0;
          *(_QWORD *)(v418 + 168) = 0;
          *(_BYTE *)(v418 + 176) = 0;
          *(_DWORD *)(v418 + 187) = 0;
          *(_QWORD *)(v418 + 180) = 0;
          *(_QWORD *)(v418 + 192) = 0;
          *(_DWORD *)(v418 + 199) = 0;
          *(_QWORD *)(v418 + 216) = 0;
          *(_QWORD *)(v418 + 224) = 0;
          *(_QWORD *)(v418 + 208) = 0;
          *(_QWORD *)(v418 + 32) = v870;
          *(_QWORD *)(v418 + 40) = v418;
          if (v417)
          {
            *(_QWORD *)(v418 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v417);
            *(_QWORD *)(v418 + 144) = v419;
          }
          v420 = (unint64_t *)v347[1];
          llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v870 + 320, v418);
          v421 = *v420;
          *(_QWORD *)v418 = *v420;
          *(_QWORD *)(v418 + 8) = v420;
          *(_QWORD *)(v421 + 8) = v418;
          *v420 = v418;
          sub_1C48532D0((unint64_t *)v418, *(unint64_t **)(v418 + 56), v347, (unint64_t *)v381);
          llvm::MachineBasicBlock::addSuccessor(v347, (_QWORD *)v418, -1);
          v871 = v418;
          if (LODWORD(v910[1]))
          {
            v422 = (char *)v910[0];
            v423 = (char *)v910[0] + 4 * LODWORD(v910[1]);
            do
            {
              v424 = *(_DWORD *)v422;
              if (*(_DWORD *)v422)
              {
                v426 = *(_QWORD **)(v418 + 160);
                v425 = *(_QWORD *)(v418 + 168);
                if ((unint64_t)v426 >= v425)
                {
                  v428 = (_QWORD *)*v880;
                  v429 = ((uint64_t)v426 - *v880) >> 4;
                  v430 = v429 + 1;
                  if ((unint64_t)(v429 + 1) >> 60)
                    goto LABEL_1274;
                  v431 = v425 - (_QWORD)v428;
                  if (v431 >> 3 > v430)
                    v430 = v431 >> 3;
                  if ((unint64_t)v431 >= 0x7FFFFFFFFFFFFFF0)
                    v432 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v432 = v430;
                  if (v432)
                  {
                    if (v432 >> 60)
                      goto LABEL_1278;
                    v433 = (char *)operator new(16 * v432);
                  }
                  else
                  {
                    v433 = 0;
                  }
                  v434 = &v433[16 * v429];
                  *(_WORD *)v434 = v424;
                  *((_QWORD *)v434 + 1) = -1;
                  v435 = v434;
                  if (v426 == v428)
                  {
                    v418 = v871;
                  }
                  else
                  {
                    v418 = v871;
                    do
                    {
                      *((_OWORD *)v435 - 1) = *((_OWORD *)v426 - 1);
                      v435 -= 16;
                      v426 -= 2;
                    }
                    while (v426 != v428);
                    v426 = (_QWORD *)*v880;
                  }
                  v427 = v434 + 16;
                  *(_QWORD *)(v418 + 152) = v435;
                  *(_QWORD *)(v418 + 160) = v434 + 16;
                  *(_QWORD *)(v418 + 168) = &v433[16 * v432];
                  v381 = v886;
                  if (v426)
                    operator delete(v426);
                }
                else
                {
                  *(_WORD *)v426 = v424;
                  v426[1] = -1;
                  v427 = v426 + 2;
                }
                *(_QWORD *)(v418 + 160) = v427;
              }
              v422 += 4;
            }
            while (v422 != v423);
          }
          llvm::MachineBasicBlock::addSuccessor((_QWORD *)v418, (_QWORD *)v418, -1);
          llvm::MachineBasicBlock::addSuccessor((_QWORD *)v418, (_QWORD *)v395, -1);
          sub_1C4AAB114(v866);
          v436 = (void **)((char *)v381 + 56);
          v893 = 0uLL;
          v893.i64[0] = sub_1C49E0FE4((uint64_t)v866, v861, (unsigned __int8 **)v381 + 7, *(_QWORD *)(v885 + 256));
          v893.i64[1] = v437;
          v438 = *(_QWORD *)(*(_QWORD *)(v885 + 256) + 8);
          v439 = (llvm::MachineFunction *)v866[4];
          v440 = (void *)*((_QWORD *)v381 + 7);
          v902 = v440;
          if (v440)
            llvm::MetadataTracking::track((uint64_t)&v902, (unsigned __int8 *)v440, 2);
          v441 = *((_QWORD *)v439 + 28);
          if (v441)
            *((_QWORD *)v439 + 28) = *(_QWORD *)v441;
          else
            v441 = sub_1C484358C((uint64_t)v439 + 128, 72, 3);
          v905 = v902;
          if (v902)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v902, (unsigned __int8 *)v902, (uint64_t)&v905);
            v902 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v441, v439, v438 + 26304, (unsigned __int8 **)&v905, 0);
          if (v905)
            llvm::MetadataTracking::untrack((uint64_t)&v905, (unsigned __int8 *)v905);
          if (v902)
            llvm::MetadataTracking::untrack((uint64_t)&v902, (unsigned __int8 *)v902);
          v466 = v866[5];
          *(_QWORD *)(v441 + 24) = v466;
          v467 = *(_QWORD *)(v466 + 32);
          v468 = *(unsigned int *)(v441 + 40);
          if ((_DWORD)v468)
          {
            v589 = *(_QWORD *)(v441 + 32);
            v590 = *(_QWORD *)(v467 + 40);
            v591 = 32 * v468;
            do
            {
              if (!*(_BYTE *)v589)
              {
                v592 = *(unsigned int *)(v589 + 4);
                if ((int)v592 >= 0)
                  v593 = (uint64_t *)(*(_QWORD *)(v590 + 272) + 8 * v592);
                else
                  v593 = (uint64_t *)(*(_QWORD *)(v590 + 24) + 16 * (v592 & 0x7FFFFFFF) + 8);
                v594 = *v593;
                if (*v593)
                {
                  v595 = *(_QWORD *)(v594 + 16);
                  *(_QWORD *)(v594 + 16) = v589;
                  *(_QWORD *)(v589 + 16) = v595;
                  if ((*(_BYTE *)(v589 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v589 + 24) = v594;
                  }
                  else
                  {
                    *(_QWORD *)(v589 + 24) = 0;
                    v593 = (uint64_t *)(v595 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v589 + 16) = v589;
                  *(_QWORD *)(v589 + 24) = 0;
                }
                *v593 = v589;
              }
              v589 += 32;
              v591 -= 32;
            }
            while (v591);
          }
          v469 = *(_QWORD *)(v467 + 728);
          if (v469)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v469 + 24))(v469, v441);
          v470 = *v861 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v441 = v470 | *(_QWORD *)v441 & 7;
          *(_QWORD *)(v441 + 8) = v861;
          *(_QWORD *)(v470 + 8) = v441;
          *v861 = *v861 & 7 | v441;
          LODWORD(v905) = 1;
          v906 = 0uLL;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v441, v439, (const llvm::MachineOperand *)&v905);
          v906 = 0uLL;
          v905 = (void *)0x200000000;
          *(_QWORD *)&v907 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v441, v439, (const llvm::MachineOperand *)&v905);
          LODWORD(v905) = 1;
          *(_QWORD *)&v906 = 0;
          *((_QWORD *)&v906 + 1) = 2;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v441, v439, (const llvm::MachineOperand *)&v905);
          v471 = *(unint64_t **)(v395 + 56);
          v472 = *(_QWORD *)(*(_QWORD *)(v885 + 256) + 8);
          v473 = *(llvm::MachineFunction **)(v395 + 32);
          v474 = *v436;
          v902 = v474;
          if (v474)
            llvm::MetadataTracking::track((uint64_t)&v902, (unsigned __int8 *)v474, 2);
          v475 = *((_QWORD *)v473 + 28);
          if (v475)
            *((_QWORD *)v473 + 28) = *(_QWORD *)v475;
          else
            v475 = sub_1C484358C((uint64_t)v473 + 128, 72, 3);
          v905 = v902;
          if (v902)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v902, (unsigned __int8 *)v902, (uint64_t)&v905);
            v902 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v475, v473, v472 + 26112, (unsigned __int8 **)&v905, 0);
          if (v905)
            llvm::MetadataTracking::untrack((uint64_t)&v905, (unsigned __int8 *)v905);
          v329 = (uint64_t)v886;
          if (v902)
            llvm::MetadataTracking::untrack((uint64_t)&v902, (unsigned __int8 *)v902);
          v476 = *(_QWORD *)(v395 + 40);
          *(_QWORD *)(v475 + 24) = v476;
          v477 = *(_QWORD *)(v476 + 32);
          v478 = *(unsigned int *)(v475 + 40);
          if ((_DWORD)v478)
          {
            v596 = *(_QWORD *)(v475 + 32);
            v597 = *(_QWORD *)(v477 + 40);
            v598 = 32 * v478;
            do
            {
              if (!*(_BYTE *)v596)
              {
                v599 = *(unsigned int *)(v596 + 4);
                if ((int)v599 >= 0)
                  v600 = (uint64_t *)(*(_QWORD *)(v597 + 272) + 8 * v599);
                else
                  v600 = (uint64_t *)(*(_QWORD *)(v597 + 24) + 16 * (v599 & 0x7FFFFFFF) + 8);
                v601 = *v600;
                if (*v600)
                {
                  v602 = *(_QWORD *)(v601 + 16);
                  *(_QWORD *)(v601 + 16) = v596;
                  *(_QWORD *)(v596 + 16) = v602;
                  if ((*(_BYTE *)(v596 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v596 + 24) = v601;
                  }
                  else
                  {
                    *(_QWORD *)(v596 + 24) = 0;
                    v600 = (uint64_t *)(v602 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v596 + 16) = v596;
                  *(_QWORD *)(v596 + 24) = 0;
                }
                *v600 = v596;
              }
              v596 += 32;
              v598 -= 32;
            }
            while (v598);
          }
          v479 = *(_QWORD *)(v477 + 728);
          if (v479)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v479 + 24))(v479, v475);
          v480 = *v471 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v475 = v480 | *(_QWORD *)v475 & 7;
          *(_QWORD *)(v475 + 8) = v471;
          *(_QWORD *)(v480 + 8) = v475;
          *v471 = *v471 & 7 | v475;
          LODWORD(v905) = 1;
          v906 = 0uLL;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v475, v473, (const llvm::MachineOperand *)&v905);
          LODWORD(v905) = 1;
          *(_QWORD *)&v906 = 0;
          *((_QWORD *)&v906 + 1) = 2;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v475, v473, (const llvm::MachineOperand *)&v905);
          sub_1C49E1094((llvm::MachineBasicBlock *)v395, v471, *((unsigned __int8 **)v886 + 7), *(_QWORD *)(v885 + 256), &v893);
          v481 = *(_DWORD *)(*((_QWORD *)v886 + 4) + 4);
          v482 = *(_QWORD *)(*(_QWORD *)(v885 + 256) + 8);
          v483 = *(llvm::MachineFunction **)(v871 + 32);
          v484 = (void *)*((_QWORD *)v886 + 7);
          v902 = v484;
          if (v484)
            llvm::MetadataTracking::track((uint64_t)&v902, (unsigned __int8 *)v484, 2);
          v450 = *((_QWORD *)v483 + 28);
          if (v450)
            *((_QWORD *)v483 + 28) = *(_QWORD *)v450;
          else
            v450 = sub_1C484358C((uint64_t)v483 + 128, 72, 3);
          v905 = v902;
          if (v902)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v902, (unsigned __int8 *)v902, (uint64_t)&v905);
            v902 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v450, v483, v482 + 25824, (unsigned __int8 **)&v905, 0);
          if (v905)
            llvm::MetadataTracking::untrack((uint64_t)&v905, (unsigned __int8 *)v905);
          if (v902)
            llvm::MetadataTracking::untrack((uint64_t)&v902, (unsigned __int8 *)v902);
          v485 = *(_QWORD *)(v871 + 40);
          *(_QWORD *)(v450 + 24) = v485;
          v486 = *(_QWORD *)(v485 + 32);
          v487 = *(unsigned int *)(v450 + 40);
          if ((_DWORD)v487)
          {
            v603 = *(_QWORD *)(v450 + 32);
            v604 = *(_QWORD *)(v486 + 40);
            v605 = 32 * v487;
            do
            {
              if (!*(_BYTE *)v603)
              {
                v606 = *(unsigned int *)(v603 + 4);
                if ((int)v606 >= 0)
                  v607 = (uint64_t *)(*(_QWORD *)(v604 + 272) + 8 * v606);
                else
                  v607 = (uint64_t *)(*(_QWORD *)(v604 + 24) + 16 * (v606 & 0x7FFFFFFF) + 8);
                v608 = *v607;
                if (*v607)
                {
                  v609 = *(_QWORD *)(v608 + 16);
                  *(_QWORD *)(v608 + 16) = v603;
                  *(_QWORD *)(v603 + 16) = v609;
                  if ((*(_BYTE *)(v603 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v603 + 24) = v608;
                  }
                  else
                  {
                    *(_QWORD *)(v603 + 24) = 0;
                    v607 = (uint64_t *)(v609 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v603 + 16) = v603;
                  *(_QWORD *)(v603 + 24) = 0;
                }
                *v607 = v603;
              }
              v603 += 32;
              v605 -= 32;
            }
            while (v605);
          }
          v488 = *(_QWORD *)(v486 + 728);
          if (v488)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v488 + 24))(v488, v450);
          v489 = *(_QWORD *)v886 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v450 = v489 | *(_QWORD *)v450 & 7;
          *(_QWORD *)(v450 + 8) = v886;
          *(_QWORD *)(v489 + 8) = v450;
          *(_QWORD *)v886 = *(_QWORD *)v886 & 7 | v450;
          LODWORD(v905) = 1;
          v906 = 0uLL;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v450, v483, (const llvm::MachineOperand *)&v905);
          v906 = 0uLL;
          HIDWORD(v905) = v481;
          LODWORD(v905) = 0;
          *(_QWORD *)&v907 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v450, v483, (const llvm::MachineOperand *)&v905);
          LODWORD(v905) = 1;
          v906 = 0uLL;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v450, v483, (const llvm::MachineOperand *)&v905);
          v490 = *(_QWORD *)(*(_QWORD *)(v885 + 256) + 8);
          v491 = *(llvm::MachineFunction **)(v871 + 32);
          v492 = (void *)*((_QWORD *)v886 + 7);
          v902 = v492;
          if (v492)
            llvm::MetadataTracking::track((uint64_t)&v902, (unsigned __int8 *)v492, 2);
          v493 = *((_QWORD *)v491 + 28);
          if (v493)
            *((_QWORD *)v491 + 28) = *(_QWORD *)v493;
          else
            v493 = sub_1C484358C((uint64_t)v491 + 128, 72, 3);
          v905 = v902;
          if (v902)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v902, (unsigned __int8 *)v902, (uint64_t)&v905);
            v902 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v493, v491, v490 + 20256, (unsigned __int8 **)&v905, 0);
          if (v905)
            llvm::MetadataTracking::untrack((uint64_t)&v905, (unsigned __int8 *)v905);
          v465 = (uint64_t)v861;
          if (v902)
            llvm::MetadataTracking::untrack((uint64_t)&v902, (unsigned __int8 *)v902);
          v494 = *(_QWORD *)(v871 + 40);
          *(_QWORD *)(v493 + 24) = v494;
          v495 = *(_QWORD *)(v494 + 32);
          v496 = *(unsigned int *)(v493 + 40);
          if ((_DWORD)v496)
          {
            v610 = *(_QWORD *)(v493 + 32);
            v611 = *(_QWORD *)(v495 + 40);
            v612 = 32 * v496;
            do
            {
              if (!*(_BYTE *)v610)
              {
                v613 = *(unsigned int *)(v610 + 4);
                if ((int)v613 >= 0)
                  v614 = (uint64_t *)(*(_QWORD *)(v611 + 272) + 8 * v613);
                else
                  v614 = (uint64_t *)(*(_QWORD *)(v611 + 24) + 16 * (v613 & 0x7FFFFFFF) + 8);
                v615 = *v614;
                if (*v614)
                {
                  v616 = *(_QWORD *)(v615 + 16);
                  *(_QWORD *)(v615 + 16) = v610;
                  *(_QWORD *)(v610 + 16) = v616;
                  if ((*(_BYTE *)(v610 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v610 + 24) = v615;
                  }
                  else
                  {
                    *(_QWORD *)(v610 + 24) = 0;
                    v614 = (uint64_t *)(v616 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v610 + 16) = v610;
                  *(_QWORD *)(v610 + 24) = 0;
                }
                *v614 = v610;
              }
              v610 += 32;
              v612 -= 32;
            }
            while (v612);
          }
          v497 = *(_QWORD *)(v495 + 728);
          if (v497)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v497 + 24))(v497, v493);
          v498 = *(_QWORD *)v886 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v493 = v498 | *(_QWORD *)v493 & 7;
          *(_QWORD *)(v493 + 8) = v886;
          *(_QWORD *)(v498 + 8) = v493;
          *(_QWORD *)v886 = *(_QWORD *)v886 & 7 | v493;
          LODWORD(v905) = 1;
          v906 = 0uLL;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v493, v491, (const llvm::MachineOperand *)&v905);
          *(_QWORD *)&v906 = 0;
          *((_QWORD *)&v906 + 1) = v871;
          LODWORD(v905) = 4;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v493, v491, (const llvm::MachineOperand *)&v905);
          if ((uint64_t *)v938.i64[0] != &v939)
            free((void *)v938.i64[0]);
          if (v910[0] != &v911)
            free(v910[0]);
        }
        llvm::MachineInstr::copyImplicitOps((llvm::MachineInstr *)v450, v864, (const llvm::MachineInstr *)v329);
        v499 = v891;
        if (v891 >= (unint64_t)HIDWORD(v891))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v890, (uint64_t)v892, v891 + 1, 8);
          v499 = v891;
        }
        v3 = v885;
        *((_QWORD *)v890 + v499) = v329;
        LODWORD(v891) = v891 + 1;
        v329 = v465;
        goto LABEL_724;
      }
      if (v341 != 266)
      {
LABEL_417:
        if (!v336 && !v338 && !v339)
          goto LABEL_725;
        goto LABEL_724;
      }
LABEL_402:
      v353 = v891;
      if (v891 >= (unint64_t)HIDWORD(v891))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v890, (uint64_t)v892, v891 + 1, 8);
        v353 = v891;
      }
      *((_QWORD *)v890 + v353) = v329;
      LODWORD(v891) = v891 + 1;
LABEL_724:
      v860 = 1;
      if ((_QWORD *)v329 == v875)
        break;
LABEL_725:
      if ((*(_BYTE *)v329 & 4) == 0)
      {
        while ((*(_WORD *)(v329 + 44) & 8) != 0)
          v329 = *(_QWORD *)(v329 + 8);
      }
      v329 = *(_QWORD *)(v329 + 8);
      if ((_QWORD *)v329 != v875)
        continue;
      break;
    }
    v690 = (char *)v890;
    v691 = (char *)v890 + 8 * v891;
    v692 = v860;
    if ((_DWORD)v891)
    {
      do
      {
        v694 = *(_BYTE **)v690;
        v693 = *(_BYTE **)v690;
        if ((**(_BYTE **)v690 & 4) == 0)
        {
          v693 = *(_BYTE **)v690;
          if ((*((_WORD *)v694 + 22) & 8) != 0)
          {
            v693 = *(_BYTE **)v690;
            do
              v693 = (_BYTE *)*((_QWORD *)v693 + 1);
            while ((*((_WORD *)v693 + 22) & 8) != 0);
          }
        }
        sub_1C487FE80(*((_QWORD *)v694 + 3) + 40, (uint64_t)v694, *((_QWORD *)v693 + 1));
        v690 += 8;
      }
      while (v690 != v691);
      v690 = (char *)v890;
    }
    if (v690 != v892)
      free(v690);
LABEL_967:
    v854 |= v692;
    v327 = (unint64_t *)v852[1];
    if (v327 != v856)
      continue;
    break;
  }
LABEL_968:
  v695 = *(_QWORD *)(v849 + 48);
  if (!v695)
  {
    v695 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v849 + 8) + 216))(*(_QWORD *)(v849 + 8), v849 + 128, v849);
    *(_QWORD *)(v849 + 48) = v695;
  }
  v696 = *(_DWORD *)(v695 + 564);
  v697 = v854;
  if (v696)
  {
    v910[0] = (void *)((uint64_t)(v696 + (v696 < 0 ? 3 : 0)) >> 2);
    v910[1] = 0;
    v698 = *(_QWORD *)(v849 + 328);
    v699 = *(unint64_t **)(v698 + 56);
    v938.i64[0] = 0;
    sub_1C49E0538(v698, v699, 0, *(_QWORD *)(v3 + 256), (uint64_t *)v910);
    if (v938.i64[0])
      llvm::MetadataTracking::untrack((uint64_t)&v938, (unsigned __int8 *)v938.i64[0]);
    v697 = 1;
  }
  v700 = atomic_load((unsigned __int8 *)&qword_1ED7ECB28);
  if ((v700 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7ECB28))
  {
    byte_1ED7ECB20 = 1;
    __cxa_guard_release(&qword_1ED7ECB28);
  }
  if ((byte_1ED7ECB20 & 1) != 0 || (v848 - 101) > 3 || v848 == 102)
    goto LABEL_1001;
  v701 = *(_QWORD *)(v3 + 248);
  if (*(_BYTE *)(v701 + 321))
  {
    v702 = *(_QWORD **)(v849 + 328);
    v703 = (unint64_t *)v702[7];
    v905 = 0;
    v704 = *(_QWORD *)(*(_QWORD *)(v3 + 256) + 8) + 47760;
    v705 = (llvm::MachineFunction *)v702[4];
    v938.i64[0] = 0;
    v706 = *((_QWORD *)v705 + 28);
    if (v706)
    {
      *((_QWORD *)v705 + 28) = *(_QWORD *)v706;
      v910[0] = 0;
    }
    else
    {
      v706 = sub_1C484358C((uint64_t)v705 + 128, 72, 3);
      v910[0] = (void *)v938.i64[0];
      if (v938.i64[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)&v938, (unsigned __int8 *)v938.i64[0], (uint64_t)v910);
        v938.i64[0] = 0;
      }
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v706, v705, v704, (unsigned __int8 **)v910, 0);
    if (v910[0])
      llvm::MetadataTracking::untrack((uint64_t)v910, (unsigned __int8 *)v910[0]);
    if (v938.i64[0])
      llvm::MetadataTracking::untrack((uint64_t)&v938, (unsigned __int8 *)v938.i64[0]);
    v711 = v702[5];
    *(_QWORD *)(v706 + 24) = v711;
    v712 = *(_QWORD *)(v711 + 32);
    v713 = *(unsigned int *)(v706 + 40);
    if ((_DWORD)v713)
    {
      v841 = *(_QWORD *)(v706 + 32);
      v842 = *(_QWORD *)(v712 + 40);
      v843 = 32 * v713;
      do
      {
        if (!*(_BYTE *)v841)
        {
          v844 = *(unsigned int *)(v841 + 4);
          if ((int)v844 >= 0)
            v845 = (uint64_t *)(*(_QWORD *)(v842 + 272) + 8 * v844);
          else
            v845 = (uint64_t *)(*(_QWORD *)(v842 + 24) + 16 * (v844 & 0x7FFFFFFF) + 8);
          v846 = *v845;
          if (*v845)
          {
            v847 = *(_QWORD *)(v846 + 16);
            *(_QWORD *)(v846 + 16) = v841;
            *(_QWORD *)(v841 + 16) = v847;
            if ((*(_BYTE *)(v841 + 3) & 1) != 0)
            {
              *(_QWORD *)(v841 + 24) = v846;
            }
            else
            {
              *(_QWORD *)(v841 + 24) = 0;
              v845 = (uint64_t *)(v847 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v841 + 16) = v841;
            *(_QWORD *)(v841 + 24) = 0;
          }
          *v845 = v841;
        }
        v841 += 32;
        v843 -= 32;
      }
      while (v843);
    }
    v714 = *(_QWORD *)(v712 + 728);
    if (v714)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v714 + 24))(v714, v706);
    v715 = *v703 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v706 = v715 | *(_QWORD *)v706 & 7;
    *(_QWORD *)(v706 + 8) = v703;
    *(_QWORD *)(v715 + 8) = v706;
    *v703 = *v703 & 7 | v706;
    v911 = 0;
    v910[1] = 0;
    v912 = 0;
    v910[0] = (void *)0x18701000000;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v706, v705, (const llvm::MachineOperand *)v910);
    LODWORD(v910[0]) = 1;
    v911 = 0;
    v910[1] = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v706, v705, (const llvm::MachineOperand *)v910);
    LODWORD(v910[0]) = 1;
    v911 = 0;
    v910[1] = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v706, v705, (const llvm::MachineOperand *)v910);
    LODWORD(v910[0]) = 1;
    v911 = 0;
    v910[1] = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v706, v705, (const llvm::MachineOperand *)v910);
    if (v905)
      llvm::MetadataTracking::untrack((uint64_t)&v905, (unsigned __int8 *)v905);
    sub_1C49E075C(v706);
    v697 = 1;
    goto LABEL_1001;
  }
  if (!*(_BYTE *)(v701 + 284))
    goto LABEL_1001;
  v708 = *(unint64_t **)(v849 + 320);
  v707 = *(unint64_t **)(v849 + 328);
  v938.i64[0] = 0;
  if (v708 == v707)
  {
    v709 = v708;
  }
  else
  {
    do
    {
      v709 = v708;
      v708 = (unint64_t *)*v708;
    }
    while (((v709[12] - v709[11]) & 0x7FFFFFFF8) != 0 && v708 != v707);
  }
  FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator((llvm::MachineBasicBlock *)v709);
  if (((v709[12] - v709[11]) & 0x7FFFFFFF8) != 0 || v709 + 6 == (unint64_t *)FirstTerminator)
    goto LABEL_1255;
  v797 = FirstTerminator;
  v798 = v709 + 7;
  while (v797 != *v798)
  {
    v799 = *(unsigned __int16 **)(v797 + 16);
    v800 = *((_QWORD *)v799 + 2);
    if ((v800 & 0x2000) != 0)
    {
      if ((v800 & 2) != 0)
      {
        if (sub_1C4A16F80((_QWORD *)v797))
          goto LABEL_1254;
        v799 = *(unsigned __int16 **)(v797 + 16);
      }
      else if ((v800 & 0x80) != 0 || (byte_1C6613CF9[*v799] & 1) != 0)
      {
LABEL_1254:
        sub_1C49E075C(v797);
        goto LABEL_1255;
      }
    }
    if (*v799 != 623)
    {
      v801 = *(_WORD *)(v797 + 44);
      v802 = *((_QWORD *)v799 + 1);
      if ((v801 & 0xC) != 0 && (v801 & 4) == 0)
      {
        v804 = v797;
        if ((v802 & 0x80) != 0)
          goto LABEL_1270;
        while ((*(_WORD *)(v804 + 44) & 8) != 0)
        {
          v804 = *(_QWORD *)(v804 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v804 + 16) + 8) & 0x80) != 0)
            goto LABEL_1270;
        }
        if ((v802 & 0x20) != 0)
          goto LABEL_1270;
        v805 = v797;
        while ((*(_WORD *)(v805 + 44) & 8) != 0)
        {
          v805 = *(_QWORD *)(v805 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v805 + 16) + 8) & 0x20) != 0)
            goto LABEL_1270;
        }
        if ((v802 & 0x800) != 0)
        {
LABEL_1270:
          if ((v801 & 8) != 0 && (*(_QWORD *)v797 & 4) == 0)
          {
            do
              v797 = *(_QWORD *)(v797 + 8);
            while ((*(_WORD *)(v797 + 44) & 8) != 0);
          }
          v798 = (unint64_t *)(v797 + 8);
LABEL_1246:
          v797 = *v798;
LABEL_1252:
          while (v797 != llvm::MachineBasicBlock::getFirstTerminator((llvm::MachineBasicBlock *)v709))
          {
            if ((*(_BYTE *)(*(_QWORD *)(v797 + 16) + 17) & 0x20) != 0)
              goto LABEL_1254;
            if ((*(_BYTE *)v797 & 4) == 0)
            {
              while ((*(_WORD *)(v797 + 44) & 8) != 0)
                v797 = *(_QWORD *)(v797 + 8);
            }
            v797 = *(_QWORD *)(v797 + 8);
          }
          goto LABEL_1255;
        }
        v806 = v797;
        while ((*(_WORD *)(v806 + 44) & 8) != 0)
        {
          v806 = *(_QWORD *)(v806 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v806 + 16) + 9) & 8) != 0)
            goto LABEL_1270;
        }
      }
      else if ((v802 & 0x8A0) != 0)
      {
        goto LABEL_1270;
      }
    }
    v797 = *(_QWORD *)v797 & 0xFFFFFFFFFFFFFFF8;
    if (!v797 || (*(_BYTE *)v797 & 4) == 0)
    {
      while ((*(_WORD *)(v797 + 44) & 4) != 0)
        v797 = *(_QWORD *)v797 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  if (v708 == v707)
    goto LABEL_1252;
  v814 = (unint64_t *)*v709;
  v815 = *v709 + 48;
  v910[0] = v913;
  v910[1] = v913;
  v911 = 16;
  LODWORD(v912) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)v910, (uint64_t)v709);
  v816 = 0;
  v817 = 0;
  v818 = 0;
  while (1)
  {
LABEL_1177:
    v819 = v707[7];
    if (v815 == v819)
      goto LABEL_1243;
    if (v815 != v814[7])
      break;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)v910, (uint64_t)v814);
    v814 = (unint64_t *)*v814;
    v815 = (unint64_t)(v814 + 6);
  }
  v815 = *(_QWORD *)v815 & 0xFFFFFFFFFFFFFFF8;
  if (!v815 || (*(_BYTE *)v815 & 4) == 0)
  {
    while ((*(_WORD *)(v815 + 44) & 4) != 0)
      v815 = *(_QWORD *)v815 & 0xFFFFFFFFFFFFFFF8;
  }
  v820 = *(unsigned __int16 **)(v815 + 16);
  v821 = *v820;
  if (v821 == 623)
  {
LABEL_1191:
    if (v815 != v819)
    {
      v824 = *((_QWORD *)v820 + 2);
      if ((v824 & 2) == 0)
      {
        v825 = 1;
        if ((v824 & 0x80) != 0 || (byte_1C6613CF9[v821] & 1) != 0)
          goto LABEL_1224;
        goto LABEL_1195;
      }
      if (!sub_1C4A16F80((_QWORD *)v815))
      {
LABEL_1195:
        v826 = *(_WORD *)(v815 + 44);
        v827 = *(unsigned __int16 **)(v815 + 16);
        v828 = *((_QWORD *)v827 + 1);
        if ((v826 & 0xC) == 0 || (v826 & 4) != 0)
        {
          if ((v828 & 0x400) == 0)
          {
LABEL_1216:
            v825 = 0;
            goto LABEL_1224;
          }
        }
        else
        {
          v829 = v815;
          if ((v828 & 0x400) == 0)
          {
            while ((*(_WORD *)(v829 + 44) & 8) != 0)
            {
              v829 = *(_QWORD *)(v829 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v829 + 16) + 9) & 4) != 0)
                goto LABEL_1217;
            }
            goto LABEL_1216;
          }
        }
LABEL_1217:
        v833 = sub_1C4C2FD5C(*v827);
        v834 = sub_1C477672C((uint64_t)v910, *(_QWORD *)(*(_QWORD *)(v815 + 32) + 32 * v833 + 16));
        v825 = 0;
        if (v910[1] == v910[0])
          v835 = (uint64_t *)((char *)&v911 + 4);
        else
          v835 = &v911;
        if (v834 == (_QWORD *)((char *)v910[1] + 8 * *(unsigned int *)v835))
          v818 = 1;
LABEL_1224:
        if (v818)
          v836 = v816;
        else
          v836 = v815;
        v837 = *(_QWORD *)(*(_QWORD *)(v815 + 16) + 16) & 0x2000;
        if (v837)
          v816 = v836;
        if (v818)
          v838 = v837 == 0;
        else
          v838 = 1;
        if (!v838)
          v817 = v815;
        if (v825)
          goto LABEL_1235;
        goto LABEL_1177;
      }
    }
    v825 = 1;
    goto LABEL_1224;
  }
  v822 = *((_QWORD *)v820 + 1);
  if ((*(_WORD *)(v815 + 44) & 0xC) == 0 || (*(_WORD *)(v815 + 44) & 4) != 0)
  {
    if ((v822 & 0x8A0) != 0)
      goto LABEL_1235;
    goto LABEL_1191;
  }
  v830 = v815;
  if ((v822 & 0x80) == 0)
  {
    while ((*(_WORD *)(v830 + 44) & 8) != 0)
    {
      v830 = *(_QWORD *)(v830 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v830 + 16) + 8) & 0x80) != 0)
        goto LABEL_1235;
    }
    if ((v822 & 0x20) == 0)
    {
      v831 = v815;
      while ((*(_WORD *)(v831 + 44) & 8) != 0)
      {
        v831 = *(_QWORD *)(v831 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v831 + 16) + 8) & 0x20) != 0)
          goto LABEL_1235;
      }
      if ((v822 & 0x800) == 0)
      {
        v832 = v815;
        while ((*(_WORD *)(v832 + 44) & 8) != 0)
        {
          v832 = *(_QWORD *)(v832 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v832 + 16) + 9) & 8) != 0)
            goto LABEL_1235;
        }
        goto LABEL_1191;
      }
    }
  }
LABEL_1235:
  if (v814 == v707)
    v839 = v817;
  else
    v839 = v816;
  if (v817)
    v840 = v839;
  else
    v840 = v816;
  if (!v840 || (sub_1C49E075C(v840), *(unint64_t **)(v840 + 24) != v707))
  {
LABEL_1243:
    if (v910[1] != v910[0])
      free(v910[1]);
    v3 = v885;
    goto LABEL_1246;
  }
  if (v910[1] != v910[0])
    free(v910[1]);
  v3 = v885;
LABEL_1255:
  if (v938.i64[0])
    llvm::MetadataTracking::untrack((uint64_t)&v938, (unsigned __int8 *)v938.i64[0]);
LABEL_1001:
  v716 = *(_QWORD *)(v3 + 248);
  v855 = v697;
  if (*(_BYTE *)(v716 + 333))
  {
    v718 = *(_QWORD *)(v3 + 256);
    v717 = *(_QWORD *)(v3 + 264);
    v910[0] = &v911;
    v910[1] = (void *)0x2000000000;
    v719 = *(unint64_t **)(*(_QWORD *)(v849 + 328) + 8);
    if (v719 != v856)
    {
      if (v717)
        v720 = (_QWORD *)(v717 + 8);
      else
        v720 = 0;
      do
      {
        for (m = v719[7]; (unint64_t *)m != v719 + 6; m = *(_QWORD *)(m + 8))
        {
          if ((*(_BYTE *)(*(_QWORD *)(m + 16) + 16) & 2) != 0 && sub_1C4A16F80((_QWORD *)m))
          {
            v722 = *(_DWORD *)(*(_QWORD *)(m + 32)
                             + 32 * sub_1C4C2FD5C(**(unsigned __int16 **)(m + 16))
                             + 4);
            v723 = *(unsigned int *)(*v720 + 24 * v722 + 16);
            v724 = (_WORD *)(v720[6] + ((v723 >> 3) & 0x1FFFFFFE));
            v726 = *v724;
            v725 = v724 + 1;
            v727 = v726 + (v723 & 0xF) * v722;
            v728 = v910[1];
            do
            {
              v729 = *(unsigned __int16 *)(v720[5] + 4 * v727);
              if (v728 >= HIDWORD(v910[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v910, (uint64_t)&v911, v728 + 1, 4);
                v728 = v910[1];
              }
              *((_DWORD *)v910[0] + v728) = v729;
              v728 = ++LODWORD(v910[1]);
              v730 = *v725++;
              v727 += v730;
            }
            while (v730);
          }
          if ((*(_BYTE *)m & 4) == 0 && (*(_WORD *)(m + 44) & 8) != 0)
          {
            v3 = v885;
            do
              m = *(_QWORD *)(m + 8);
            while ((*(_WORD *)(m + 44) & 8) != 0);
          }
          else
          {
            v3 = v885;
          }
        }
        v719 = (unint64_t *)v719[1];
      }
      while (v719 != v856);
      v697 = v855;
    }
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    v731 = (uint64_t *)v910[0];
    v732 = (char *)v910[0] + 4 * LODWORD(v910[1]);
    v733 = (char *)v910[0];
    if (LODWORD(v910[1]))
    {
      v733 = (char *)v910[0] - 4;
      v734 = 4 * LODWORD(v910[1]) - 4;
      while (v734)
      {
        v735 = *((_DWORD *)v733 + 1);
        v736 = *((_DWORD *)v733 + 2);
        v733 += 4;
        v734 -= 4;
        if (v735 == v736)
          goto LABEL_1026;
      }
    }
    else
    {
LABEL_1026:
      if (v733 != v732)
      {
        v737 = v733 + 8;
        if (v733 + 8 != v732)
        {
          v738 = *(_DWORD *)v733;
          do
          {
            v739 = v738;
            v738 = *(_DWORD *)v737;
            if (v739 != *(_DWORD *)v737)
            {
              *((_DWORD *)v733 + 1) = v738;
              v733 += 4;
            }
            v737 += 4;
          }
          while (v737 != v732);
        }
        v732 = v733 + 4;
      }
    }
    LODWORD(v910[1]) = (unint64_t)(v732 - (char *)v731) >> 2;
    if (LODWORD(v910[1]))
    {
      v740 = *(_QWORD *)(v849 + 328);
      v741 = *(unint64_t **)(v740 + 56);
      v742 = 4 * LODWORD(v910[1]);
      do
      {
        v743 = *(unsigned int *)v731;
        if ((v743 - 1) > 0x206)
          v744 = 0;
        else
          v744 = (byte_1C69FED14[v743 >> 3] >> (v743 & 7)) & 1;
        v938.i64[0] = 0;
        sub_1C49D63F4(v718, v740, v741, 0, v743, v744, 0, (unsigned __int8 **)&v938, 0);
        if (v938.i64[0])
          llvm::MetadataTracking::untrack((uint64_t)&v938, (unsigned __int8 *)v938.i64[0]);
        v731 = (uint64_t *)((char *)v731 + 4);
        v742 -= 4;
      }
      while (v742);
      v731 = (uint64_t *)v910[0];
    }
    if (v731 != &v911)
      free(v731);
    v716 = *(_QWORD *)(v3 + 248);
  }
  if (*(_BYTE *)(v716 + 334))
  {
    v745 = *(_QWORD *)(v3 + 264);
    v876 = *(_QWORD *)(v3 + 256);
    v938.i64[0] = (uint64_t)&v939;
    v938.i64[1] = 0x2000000000;
    v910[0] = &v911;
    v910[1] = (void *)0x2000000000;
    v924 = 0;
    v923 = 0;
    v922 = &v923;
    v746 = *(_QWORD **)(v849 + 40);
    v747 = *(unint64_t **)(v849 + 328);
    v748 = (unsigned __int16 *)v747[19];
    v749 = (unsigned __int16 *)v747[20];
    if (v749 != v748)
    {
      if (v745)
        v750 = (_QWORD *)(v745 + 8);
      else
        v750 = 0;
      do
      {
        v751 = (unsigned __int16 *)(v750[6]
                                  + (((unint64_t)*(unsigned int *)(*v750 + 24 * *v748 + 16) >> 3) & 0x1FFFFFFE));
        v753 = *v751;
        v752 = v751 + 1;
        v754 = v753 + (*(_DWORD *)(*v750 + 24 * *v748 + 16) & 0xF) * *v748;
        do
        {
          LODWORD(v905) = (unsigned __int16)v754;
          sub_1C4879438((uint64_t)v910, (unsigned int *)&v905);
          v755 = *v752++;
          v754 += v755;
        }
        while (v755);
        v748 += 8;
      }
      while (v748 != v749);
      v747 = *(unint64_t **)(v849 + 328);
    }
    if (v747 != v856)
    {
      if (v745)
        v756 = (_QWORD *)(v745 + 8);
      else
        v756 = 0;
      do
      {
        v757 = (llvm::MachineInstr *)(v747 + 6);
        v884 = v747;
        v758 = v747[7];
        v887 = (llvm::MachineInstr *)(v747 + 6);
        while ((llvm::MachineInstr *)v758 != v757)
        {
          v759 = *(unsigned int *)(v758 + 40);
          if (!(_DWORD)v759)
            goto LABEL_1088;
          v760 = *(_DWORD **)(v758 + 32);
          v761 = &v760[8 * v759];
          do
          {
            if ((*v760 & 0x10000FF) == 0)
            {
              v762 = v760[1];
              v763 = *(unsigned int *)(*v756 + 24 * v762 + 16);
              v764 = (_WORD *)(v756[6] + ((v763 >> 3) & 0x1FFFFFFE));
              v765 = *v764 + (v763 & 0xF) * v762;
              do
              {
                v766 = v765;
                if (v924)
                {
                  for (n = v923; n; n = (_QWORD *)*n)
                  {
                    v768 = *((_DWORD *)n + 7);
                    if (v768 <= v766)
                    {
                      if (v768 >= v766)
                        goto LABEL_1085;
                      ++n;
                    }
                  }
                }
                else if (LODWORD(v910[1]))
                {
                  v769 = v910[0];
                  v770 = 4 * LODWORD(v910[1]);
                  while (*v769 != (_DWORD)v766)
                  {
                    ++v769;
                    v770 -= 4;
                    if (!v770)
                      goto LABEL_1077;
                  }
                  if (v770)
                    goto LABEL_1085;
                }
LABEL_1077:
                v771 = v756[5];
                v772 = 4 * v766;
                v773 = *(unsigned __int16 *)(v771 + v772);
                if (*(_WORD *)(v771 + v772))
                {
                  v774 = *(unsigned __int16 *)(v771 + 4 * v766 + 2);
                  do
                  {
                    v775 = v774;
                    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v746 + 16)
                                                                                              + 176))(*(_QWORD *)(*v746 + 16))
                                                          + 216)
                                              + 16)
                                  + v773)
                      && ((*(_QWORD *)(v746[44] + (((unint64_t)v773 >> 3) & 0x1FFFFFF8)) >> v773) & 1) == 0)
                    {
                      v776 = v938.u32[2];
                      if (v938.u32[2] >= (unint64_t)v938.u32[3])
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v938, (uint64_t)&v939, v938.u32[2] + 1, 4);
                        v776 = v938.u32[2];
                      }
                      *(_DWORD *)(v938.i64[0] + 4 * v776) = v773;
                      ++v938.i32[2];
                    }
                    v774 = 0;
                    v773 = v775;
                  }
                  while (v775);
                }
LABEL_1085:
                v777 = (unsigned __int16)v764[1];
                ++v764;
                v765 = v777 + v766;
              }
              while (v777);
            }
            v760 += 8;
          }
          while (v760 != v761);
          if (v758)
          {
LABEL_1088:
            if ((*(_BYTE *)v758 & 4) != 0)
              goto LABEL_1092;
          }
          while ((*(_WORD *)(v758 + 44) & 8) != 0)
            v758 = *(_QWORD *)(v758 + 8);
LABEL_1092:
          v758 = *(_QWORD *)(v758 + 8);
          v757 = v887;
        }
        v747 = (unint64_t *)v884[1];
      }
      while (v747 != v856);
    }
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    v778 = (unsigned int *)v938.i64[0];
    v779 = v938.i64[0] + 4 * v938.u32[2];
    v780 = (int *)v938.i64[0];
    if (v938.i32[2])
    {
      v780 = (int *)(v938.i64[0] - 4);
      v781 = 4 * v938.u32[2] - 4;
      while (v781)
      {
        v782 = v780[1];
        v783 = v780[2];
        ++v780;
        v781 -= 4;
        if (v782 == v783)
          goto LABEL_1098;
      }
    }
    else
    {
LABEL_1098:
      if (v780 != (int *)v779)
      {
        v784 = v780 + 2;
        if (v780 + 2 != (int *)v779)
        {
          v785 = *v780;
          do
          {
            v786 = v785;
            v785 = *v784;
            if (v786 != *v784)
            {
              v780[1] = v785;
              ++v780;
            }
            ++v784;
          }
          while (v784 != (int *)v779);
        }
        v779 = (uint64_t)(v780 + 1);
      }
    }
    v938.i32[2] = (unint64_t)(v779 - (_QWORD)v778) >> 2;
    if (v938.i32[2])
    {
      v787 = *(_QWORD *)(v849 + 328);
      v788 = *(unint64_t **)(v787 + 56);
      v789 = 4 * v938.u32[2];
      while (1)
      {
        v790 = *v778;
        if ((v790 - 1) > 0x3FFFFFFE)
          goto LABEL_1114;
        v791 = v790 >> 3;
        if (v790 > 0x57)
          break;
        v792 = 1 << (v790 & 7);
        if ((v792 & byte_1C69FEF1A[v791]) == 0)
          goto LABEL_1113;
LABEL_1117:
        ++v778;
        v789 -= 4;
        if (!v789)
          goto LABEL_1118;
      }
      if (v790 > 0x207)
      {
LABEL_1114:
        v793 = 0;
      }
      else
      {
        v791 = v791;
        v792 = 1 << (v790 & 7);
LABEL_1113:
        v793 = (v792 & byte_1C69FED14[v791]) != 0;
      }
      v905 = 0;
      sub_1C49D63F4(v876, v787, v788, 0, v790, v793, 0, (unsigned __int8 **)&v905, 0);
      if (v905)
        llvm::MetadataTracking::untrack((uint64_t)&v905, (unsigned __int8 *)v905);
      goto LABEL_1117;
    }
LABEL_1118:
    sub_1C47655E8((uint64_t)&v922, v923);
    if (v910[0] != &v911)
      free(v910[0]);
    v697 = v855;
    if ((uint64_t *)v938.i64[0] != &v939)
      free((void *)v938.i64[0]);
  }
  return v697 & 1;
}

void sub_1C49E0538(uint64_t a1, unint64_t *a2, unsigned __int8 *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  llvm::MachineFunction *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;

  if (*(_OWORD *)a5 != 0)
  {
    v8 = *(_QWORD *)(a4 + 8);
    v9 = *(llvm::MachineFunction **)(a1 + 32);
    v29 = a3;
    if (a3)
      llvm::MetadataTracking::track((uint64_t)&v29, a3, 2);
    v10 = v8 + 239136;
    v11 = *((_QWORD *)v9 + 28);
    if (v11)
      *((_QWORD *)v9 + 28) = *(_QWORD *)v11;
    else
      v11 = sub_1C484358C((uint64_t)v9 + 128, 72, 3);
    v26 = v29;
    if (v29)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v29, v29, (uint64_t)&v26);
      v29 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v11, v9, v10, &v26, 0);
    if (v26)
      llvm::MetadataTracking::untrack((uint64_t)&v26, v26);
    if (v29)
      llvm::MetadataTracking::untrack((uint64_t)&v29, v29);
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(v11 + 24) = v12;
    v13 = *(_QWORD *)(v12 + 32);
    v14 = *(unsigned int *)(v11 + 40);
    if ((_DWORD)v14)
    {
      v19 = *(_QWORD *)(v11 + 32);
      v20 = *(_QWORD *)(v13 + 40);
      v21 = 32 * v14;
      do
      {
        if (!*(_BYTE *)v19)
        {
          v22 = *(unsigned int *)(v19 + 4);
          if ((int)v22 >= 0)
            v23 = (uint64_t *)(*(_QWORD *)(v20 + 272) + 8 * v22);
          else
            v23 = (uint64_t *)(*(_QWORD *)(v20 + 24) + 16 * (v22 & 0x7FFFFFFF) + 8);
          v24 = *v23;
          if (*v23)
          {
            v25 = *(_QWORD *)(v24 + 16);
            *(_QWORD *)(v24 + 16) = v19;
            *(_QWORD *)(v19 + 16) = v25;
            if ((*(_BYTE *)(v19 + 3) & 1) != 0)
            {
              *(_QWORD *)(v19 + 24) = v24;
            }
            else
            {
              *(_QWORD *)(v19 + 24) = 0;
              v23 = (uint64_t *)(v25 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v19 + 16) = v19;
            *(_QWORD *)(v19 + 24) = 0;
          }
          *v23 = v19;
        }
        v19 += 32;
        v21 -= 32;
      }
      while (v21);
    }
    v15 = *(_QWORD *)(v13 + 728);
    if (v15)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v15 + 24))(v15, v11);
    v16 = *a2 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v11 = v16 | *(_QWORD *)v11 & 7;
    *(_QWORD *)(v11 + 8) = a2;
    *(_QWORD *)(v16 + 8) = v11;
    *a2 = *a2 & 7 | v11;
    LODWORD(v26) = 1;
    v27 = 0;
    v28 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v11, v9, (const llvm::MachineOperand *)&v26);
    v17 = *a5;
    LODWORD(v26) = 1;
    v27 = 0;
    v28 = v17;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v11, v9, (const llvm::MachineOperand *)&v26);
    v18 = a5[1];
    LODWORD(v26) = 1;
    v27 = 0;
    v28 = v18;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v11, v9, (const llvm::MachineOperand *)&v26);
  }
}

uint64_t sub_1C49E075C(uint64_t a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(unsigned __int16 **)(a1 + 16);
  v2 = *((_QWORD *)v1 + 2);
  v3 = *(_QWORD *)(a1 + 32);
  if ((v2 & 0x400000000) != 0)
  {
    v4 = *v1;
    goto LABEL_5;
  }
  v4 = *v1;
  if ((v2 & 0x4000002) == 0)
  {
LABEL_5:
    result = sub_1C4C2FD5C(v4);
    v6 = 64;
    goto LABEL_6;
  }
  result = sub_1C4C2FD5C(v4);
  v6 = 0x4000000000000000;
LABEL_6:
  *(_QWORD *)(v3 + 32 * result + 16) |= v6;
  return result;
}

void sub_1C49E07CC(uint64_t **a1, llvm::MachineFunction **a2, __int16 a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::MachineInstr *v9;
  llvm::MachineFunction *v10;
  llvm::MachineInstr *v11;
  llvm::MachineFunction *v12;
  uint64_t v13;
  int v14;
  llvm::MachineInstr *v15;
  llvm::MachineFunction *v16;
  llvm::MachineInstr *v17;
  llvm::MachineFunction *v18;
  llvm::MachineInstr *v19;
  llvm::MachineFunction *v20;
  llvm::MachineInstr *v21;
  llvm::MachineFunction *v22;
  uint64_t v23;
  llvm::MachineInstr *v24;
  llvm::MachineFunction *v25;
  llvm::MachineMemOperand *MachineMemOperand;
  _DWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = **a1;
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 32 * sub_1C4C2FD5C(**(unsigned __int16 **)(v6 + 16)) + 16);
  v8 = v7 + 7;
  v10 = *a2;
  v9 = a2[1];
  v27[0] = 1;
  v28 = 0;
  v29 = 0;
  llvm::MachineInstr::addOperand(v9, v10, (const llvm::MachineOperand *)v27);
  v12 = *a2;
  v11 = a2[1];
  v27[0] = 1;
  v28 = 0;
  v29 = 2064;
  llvm::MachineInstr::addOperand(v11, v12, (const llvm::MachineOperand *)v27);
  v13 = **a1;
  v14 = *(_DWORD *)(*(_QWORD *)(v13 + 32) + 32 * sub_1C4C2FD5C(**(unsigned __int16 **)(v13 + 16)) + 4);
  v16 = *a2;
  v15 = a2[1];
  v28 = 0;
  v29 = 0;
  v27[0] = 0;
  v27[1] = v14;
  v30 = 0;
  llvm::MachineInstr::addOperand(v15, v16, (const llvm::MachineOperand *)v27);
  v18 = *a2;
  v17 = a2[1];
  v27[0] = 1;
  v28 = 0;
  v29 = 0;
  llvm::MachineInstr::addOperand(v17, v18, (const llvm::MachineOperand *)v27);
  if (v7 >= 0)
    v8 = v7;
  v20 = *a2;
  v19 = a2[1];
  v27[0] = 1;
  v28 = 0;
  v29 = v7 / 128;
  llvm::MachineInstr::addOperand(v19, v20, (const llvm::MachineOperand *)v27);
  v22 = *a2;
  v21 = a2[1];
  if (v8 >> 3 <= 0)
    v23 = -(-(v8 >> 3) & 0xF);
  else
    v23 = (v8 >> 3) & 0xF;
  v27[0] = 1;
  v28 = 0;
  v29 = v23;
  llvm::MachineInstr::addOperand(v21, v22, (const llvm::MachineOperand *)v27);
  v25 = *a2;
  v24 = a2[1];
  v27[0] = 1;
  v28 = 0;
  v29 = 16;
  llvm::MachineInstr::addOperand(v24, v25, (const llvm::MachineOperand *)v27);
  MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand((uint64_t)a1[1], (__int128 *)a1[2], a3);
  llvm::MachineInstr::addMemOperand(a2[1], *a2, MachineMemOperand);
}

void sub_1C49E0940(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  __int16 *v5;
  __int16 v6;
  _QWORD *v7;
  unint64_t v8;
  _WORD *v9;
  unsigned __int16 *v10;
  __int16 v11;
  unsigned __int16 v12;
  int v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int16 *v25;
  _QWORD *v26;
  __int16 v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  __int16 v32;
  uint64_t v33;
  _WORD *v34;
  unsigned __int16 *v35;
  __int16 v36;
  unsigned __int16 v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  unsigned __int16 v43;
  _WORD *v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  _WORD *v47;
  unsigned __int16 v48;
  int v49;
  unsigned int v50;
  int v51;
  unint64_t v52;
  __int16 v53;
  _WORD *v54;
  unsigned __int16 *v55;
  __int16 v56;
  unsigned __int16 v57;
  int v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  _WORD *v62;
  unsigned __int16 *v63;
  __int16 v64;
  unsigned __int16 v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  _BYTE *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  _BYTE *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  __int16 *v89;
  __int16 v90;
  _QWORD *v91;
  unint64_t v92;
  _WORD *v93;
  unsigned __int16 *v94;
  __int16 v95;
  unsigned __int16 v96;
  int v97;
  unint64_t v98;
  char *v99;
  _QWORD *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  char *v107;
  char *v108;

  v5 = &word_1C69FEEFA;
  do
  {
    v6 = *v5;
    if (*a2)
      v7 = (_QWORD *)(*a2 + 8);
    else
      v7 = 0;
    v8 = *(unsigned int *)(*v7 + 24 * (unsigned __int16)*v5 + 16);
    v9 = (_WORD *)(v7[6] + ((v8 >> 3) & 0x1FFFFFFE));
    v11 = *v9;
    v10 = v9 + 1;
    v12 = v11 + (v8 & 0xF) * v6;
    while (((*(_QWORD *)(a2[1] + 8 * (v12 >> 6)) >> v12) & 1) == 0)
    {
      v13 = *v10++;
      v12 += v13;
      if (!v13)
        goto LABEL_27;
    }
    v15 = (char *)a1[20];
    v14 = a1[21];
    if ((unint64_t)v15 >= v14)
    {
      v17 = (char *)a1[19];
      v18 = (v15 - v17) >> 4;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 60)
        goto LABEL_134;
      v20 = v14 - (_QWORD)v17;
      if (v20 >> 3 > v19)
        v19 = v20 >> 3;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
        v21 = 0xFFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        if (v21 >> 60)
          goto LABEL_135;
        v22 = (char *)operator new(16 * v21);
      }
      else
      {
        v22 = 0;
      }
      v23 = &v22[16 * v18];
      *(_WORD *)v23 = v6;
      *((_QWORD *)v23 + 1) = -1;
      v24 = v23;
      if (v15 != v17)
      {
        do
        {
          *((_OWORD *)v24 - 1) = *((_OWORD *)v15 - 1);
          v24 -= 16;
          v15 -= 16;
        }
        while (v15 != v17);
        v15 = (char *)a1[19];
      }
      v16 = v23 + 16;
      a1[19] = v24;
      a1[20] = v23 + 16;
      a1[21] = &v22[16 * v21];
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_WORD *)v15 = v6;
      *((_QWORD *)v15 + 1) = -1;
      v16 = v15 + 16;
    }
    a1[20] = v16;
LABEL_27:
    ++v5;
  }
  while (v5 != (__int16 *)&unk_1C69FEF1A);
  v25 = &word_1C69FF39A;
  v26 = a3;
  do
  {
    v27 = *v25;
    v28 = a2[1];
    if (*a2)
      v29 = (uint64_t *)(*a2 + 8);
    else
      v29 = 0;
    v30 = *v29;
    v31 = *(unsigned int *)(*v29 + 24 * (unsigned __int16)*v25 + 16);
    v32 = v31 & 0xF;
    v33 = v29[6];
    v34 = (_WORD *)(v33 + ((v31 >> 3) & 0x1FFFFFFE));
    v36 = *v34;
    v35 = v34 + 1;
    v37 = v36 + v32 * v27;
    while (((*(_QWORD *)(v28 + 8 * (v37 >> 6)) >> v37) & 1) == 0)
    {
      v38 = *v35++;
      v37 += v38;
      if (!v38)
        goto LABEL_100;
    }
    v39 = v26[1];
    v40 = v26[7];
    v41 = *(unsigned int *)(v39 + 24 * (unsigned __int16)*v25 + 4);
    v42 = *(_WORD *)(v40 + 2 * v41);
    if (!v42)
      goto LABEL_57;
    v43 = v42 + v27;
    v44 = (_WORD *)(v26[11] + 2 * *(unsigned int *)(v39 + 24 * (unsigned __int16)*v25 + 12));
    v45 = (unsigned __int16 *)(v40 + 2 * v41 + 2);
    v46 = v45;
    v47 = v44;
    v48 = v42 + v27;
    while (*v47 != 1)
    {
      v49 = *v46++;
      v48 += v49;
      ++v47;
      if (!v49)
      {
        v50 = 0;
        goto LABEL_42;
      }
    }
    v50 = v48;
LABEL_42:
    while (*v44 != 2)
    {
      v51 = *v45++;
      v43 += v51;
      ++v44;
      if (!v51)
        goto LABEL_57;
    }
    if (!v50 || !v43)
    {
LABEL_57:
      v60 = (char *)a1[20];
      v68 = a1[21];
      if ((unint64_t)v60 < v68)
      {
        *(_WORD *)v60 = v27;
        goto LABEL_59;
      }
      v70 = (_BYTE *)a1[19];
      v71 = (v60 - v70) >> 4;
      v72 = v71 + 1;
      if (!((unint64_t)(v71 + 1) >> 60))
      {
        v73 = v68 - (_QWORD)v70;
        if (v73 >> 3 > v72)
          v72 = v73 >> 3;
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF0)
          v74 = 0xFFFFFFFFFFFFFFFLL;
        else
          v74 = v72;
        if (v74)
        {
          if (v74 >> 60)
            goto LABEL_135;
          v75 = (char *)operator new(16 * v74);
        }
        else
        {
          v75 = 0;
        }
        v76 = &v75[16 * v71];
        *(_WORD *)v76 = v27;
        *((_QWORD *)v76 + 1) = -1;
        v77 = v76;
        if (v60 != v70)
        {
          do
          {
            *((_OWORD *)v77 - 1) = *((_OWORD *)v60 - 1);
            v77 -= 16;
            v60 -= 16;
          }
          while (v60 != v70);
          goto LABEL_94;
        }
        goto LABEL_95;
      }
LABEL_134:
      abort();
    }
    v52 = *(unsigned int *)(v30 + 24 * v43 + 16);
    v53 = v52 & 0xF;
    v54 = (_WORD *)(v33 + ((v52 >> 3) & 0x1FFFFFFE));
    v56 = *v54;
    v55 = v54 + 1;
    v57 = v56 + v53 * v43;
    do
    {
      if (((*(_QWORD *)(v28 + 8 * (v57 >> 6)) >> v57) & 1) != 0)
      {
        v61 = *(unsigned int *)(v30 + 24 * v50 + 16);
        v62 = (_WORD *)(v33 + ((v61 >> 3) & 0x1FFFFFFE));
        v64 = *v62;
        v63 = v62 + 1;
        v65 = v64 + (v61 & 0xF) * v50;
        do
        {
          if (((*(_QWORD *)(v28 + 8 * (v65 >> 6)) >> v65) & 1) != 0)
            goto LABEL_57;
          v66 = *v63++;
          v65 += v66;
        }
        while (v66);
        v60 = (char *)a1[20];
        v67 = a1[21];
        if ((unint64_t)v60 < v67)
        {
          *(_WORD *)v60 = v43;
LABEL_59:
          *((_QWORD *)v60 + 1) = -1;
          v69 = v60 + 16;
          goto LABEL_99;
        }
        v82 = (_BYTE *)a1[19];
        v83 = (v60 - v82) >> 4;
        v84 = v83 + 1;
        if (!((unint64_t)(v83 + 1) >> 60))
        {
          v85 = v67 - (_QWORD)v82;
          if (v85 >> 3 > v84)
            v84 = v85 >> 3;
          if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF0)
            v86 = 0xFFFFFFFFFFFFFFFLL;
          else
            v86 = v84;
          if (v86)
          {
            if (v86 >> 60)
              goto LABEL_135;
            v87 = (char *)operator new(16 * v86);
          }
          else
          {
            v87 = 0;
          }
          v76 = &v87[16 * v83];
          *(_WORD *)v76 = v43;
          *((_QWORD *)v76 + 1) = -1;
          v77 = v76;
          if (v60 != v82)
          {
            do
            {
              *((_OWORD *)v77 - 1) = *((_OWORD *)v60 - 1);
              v77 -= 16;
              v60 -= 16;
            }
            while (v60 != v82);
            v60 = (char *)a1[19];
          }
          v88 = &v87[16 * v86];
          goto LABEL_96;
        }
        goto LABEL_134;
      }
      v58 = *v55++;
      v57 += v58;
    }
    while (v58);
    v60 = (char *)a1[20];
    v59 = a1[21];
    if ((unint64_t)v60 < v59)
    {
      *(_WORD *)v60 = v50;
      goto LABEL_59;
    }
    v78 = (_BYTE *)a1[19];
    v79 = (v60 - v78) >> 4;
    v80 = v79 + 1;
    if ((unint64_t)(v79 + 1) >> 60)
      goto LABEL_134;
    v81 = v59 - (_QWORD)v78;
    if (v81 >> 3 > v80)
      v80 = v81 >> 3;
    if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0)
      v74 = 0xFFFFFFFFFFFFFFFLL;
    else
      v74 = v80;
    if (v74)
    {
      if (!(v74 >> 60))
      {
        v75 = (char *)operator new(16 * v74);
        goto LABEL_92;
      }
LABEL_135:
      sub_1C4764EE4();
    }
    v75 = 0;
LABEL_92:
    v76 = &v75[16 * v79];
    *(_WORD *)v76 = v50;
    *((_QWORD *)v76 + 1) = -1;
    v77 = v76;
    if (v60 != v78)
    {
      do
      {
        *((_OWORD *)v77 - 1) = *((_OWORD *)v60 - 1);
        v77 -= 16;
        v60 -= 16;
      }
      while (v60 != v78);
LABEL_94:
      v60 = (char *)a1[19];
    }
LABEL_95:
    v88 = &v75[16 * v74];
LABEL_96:
    v69 = v76 + 16;
    a1[19] = v77;
    a1[20] = v76 + 16;
    a1[21] = v88;
    if (v60)
      operator delete(v60);
    v26 = a3;
LABEL_99:
    a1[20] = v69;
LABEL_100:
    ++v25;
  }
  while (v25 != (__int16 *)&unk_1C69FF49A);
  v89 = &word_1C69FF610;
  do
  {
    v90 = *v89;
    if (*a2)
      v91 = (_QWORD *)(*a2 + 8);
    else
      v91 = 0;
    v92 = *(unsigned int *)(*v91 + 24 * (unsigned __int16)*v89 + 16);
    v93 = (_WORD *)(v91[6] + ((v92 >> 3) & 0x1FFFFFFE));
    v95 = *v93;
    v94 = v93 + 1;
    v96 = v95 + (v92 & 0xF) * v90;
    while (((*(_QWORD *)(a2[1] + 8 * (v96 >> 6)) >> v96) & 1) == 0)
    {
      v97 = *v94++;
      v96 += v97;
      if (!v97)
        goto LABEL_132;
    }
    v99 = (char *)a1[20];
    v98 = a1[21];
    if ((unint64_t)v99 >= v98)
    {
      v101 = (char *)a1[19];
      v102 = (v99 - v101) >> 4;
      v103 = v102 + 1;
      if ((unint64_t)(v102 + 1) >> 60)
        goto LABEL_134;
      v104 = v98 - (_QWORD)v101;
      if (v104 >> 3 > v103)
        v103 = v104 >> 3;
      if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF0)
        v105 = 0xFFFFFFFFFFFFFFFLL;
      else
        v105 = v103;
      if (v105)
      {
        if (v105 >> 60)
          goto LABEL_135;
        v106 = (char *)operator new(16 * v105);
      }
      else
      {
        v106 = 0;
      }
      v107 = &v106[16 * v102];
      *(_WORD *)v107 = v90;
      *((_QWORD *)v107 + 1) = -1;
      v108 = v107;
      if (v99 != v101)
      {
        do
        {
          *((_OWORD *)v108 - 1) = *((_OWORD *)v99 - 1);
          v108 -= 16;
          v99 -= 16;
        }
        while (v99 != v101);
        v99 = (char *)a1[19];
      }
      v100 = v107 + 16;
      a1[19] = v108;
      a1[20] = v107 + 16;
      a1[21] = &v106[16 * v105];
      if (v99)
        operator delete(v99);
    }
    else
    {
      *(_WORD *)v99 = v90;
      *((_QWORD *)v99 + 1) = -1;
      v100 = v99 + 16;
    }
    a1[20] = v100;
LABEL_132:
    ++v89;
  }
  while (v89 != (__int16 *)&unk_1C69FF698);
}

uint64_t sub_1C49E0FE4(uint64_t a1, unint64_t *a2, unsigned __int8 **a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14[2];

  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(v8 + 48);
  v10 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 48) >> 2;
  v14[0] = v10;
  if (!v9)
  {
    v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v8 + 8) + 216))(*(_QWORD *)(v8 + 8), v8 + 128, v8);
    *(_QWORD *)(v8 + 48) = v9;
  }
  v11 = *(_QWORD *)(v9 + 552);
  if ((v11 & 0xFF00000000) != 0)
    v12 = ((v11 + 1) + 15) & 0x1FFFFFFF0;
  else
    v12 = 0;
  v14[1] = v12;
  sub_1C49E0538(a1, a2, *a3, a4, v14);
  return v10;
}

void sub_1C49E1094(llvm::MachineBasicBlock *a1, unint64_t *a2, unsigned __int8 *a3, uint64_t a4, int64x2_t *a5)
{
  int64x2_t v9;

  v9 = vnegq_s64(*a5);
  sub_1C49E0538((uint64_t)a1, a2, a3, a4, v9.i64);
  if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 56) + 72) + 1) >= 2)
    sub_1C4A13C98(a4, 4 * a5->i32[0], a1, a2);
}

BOOL sub_1C49E1120(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  __int16 v5;
  _WORD *v6;
  unsigned __int16 v7;
  unint64_t v8;
  __int16 v9;
  _WORD *v10;
  unsigned __int16 *v11;
  __int16 v12;
  unsigned __int16 v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  unsigned __int16 v16;
  int v17;
  int v18;

  v4 = *(unsigned int *)(a3 + 24 * a1 + 16);
  v5 = v4 & 0xF;
  v6 = (_WORD *)(a4 + ((v4 >> 3) & 0x1FFFFFFE));
  v7 = *v6 + v5 * a1;
  v8 = *(unsigned int *)(a3 + 24 * a2 + 16);
  v9 = v8 & 0xF;
  v10 = (_WORD *)(a4 + ((v8 >> 3) & 0x1FFFFFFE));
  v12 = *v10;
  v11 = v10 + 1;
  v13 = v12 + v9 * a2;
LABEL_2:
  ++v6;
  v14 = v11;
  v15 = v13;
  while (1)
  {
    v16 = v15;
    v17 = v7;
    if (v7 == v15)
      return v17 == v16;
    v18 = *v14++;
    v15 += v18;
    if (!v18)
    {
      v7 += *v6;
      if (*v6)
        goto LABEL_2;
      return v17 == v16;
    }
  }
}

double sub_1C49E11A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  void *v6;
  double result;
  unsigned int v8;
  const void **v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;

  v12 = 0;
  if (!sub_1C49F6FA8(a2, a3, a4, &v12))
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)&result = 0x600000000;
    *(_QWORD *)(a1 + 8) = 0x600000000;
    *(_DWORD *)(a1 + 64) = 0;
    return result;
  }
  v5 = v12;
  v6 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)&result = 0x600000000;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v8 = *(_DWORD *)(v5 + 16);
  v9 = (const void **)(v5 + 8);
  if (v8)
    v10 = v9 == (const void **)a1;
  else
    v10 = 1;
  if (!v10)
  {
    if (v8 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, *(unsigned int *)(v5 + 16), 8);
      v11 = *(_DWORD *)(v5 + 16);
      if (!v11)
        goto LABEL_9;
      v6 = *(void **)a1;
    }
    else
    {
      v11 = *(_DWORD *)(v5 + 16);
    }
    memcpy(v6, *v9, 8 * v11);
LABEL_9:
    *(_DWORD *)(a1 + 8) = v8;
  }
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(v5 + 72);
  return result;
}

void sub_1C49E1284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v6 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  *(_DWORD *)(a1 + 64) = 0;
  v7 = *(_QWORD *)(a3 + 64);
  v8 = *(_QWORD *)(a3 + 72);
  if (v7 == v8)
  {
    v9 = 0;
    v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(a2 + 16) + 304 * *(int *)(*(_QWORD *)v7 + 24);
      v12 = *(unsigned int *)(v11 + 224);
      if (v10 < v12)
      {
        v17 = v10 & 0x3F;
        v18 = v9;
        if (v17)
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v9 - 8) &= ~(-1 << v17);
        *(_DWORD *)(a1 + 64) = v12;
        v19 = v12 + 63;
        if (v9 != (v12 + 63) >> 6)
        {
          v20 = v19 >> 6;
          if (v9 > v20)
          {
            *(_DWORD *)(a1 + 8) = v20;
            v9 = v19 >> 6;
          }
          else
          {
            v54 = v6;
            v21 = v9;
            if (v20 > *(_DWORD *)(a1 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a1, v6, v20, 8);
              v21 = *(unsigned int *)(a1 + 8);
              v9 = *(_DWORD *)(a1 + 8);
            }
            if (v20 != v18)
              bzero((void *)(*(_QWORD *)a1 + 8 * v21), 8 * (v20 - v18));
            v9 += v20 - v18;
            *(_DWORD *)(a1 + 8) = v9;
            v12 = *(unsigned int *)(a1 + 64);
            v6 = v54;
          }
        }
        if ((v12 & 0x3F) != 0)
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v9 - 8) &= ~(-1 << (v12 & 0x3F));
        v10 = v12;
      }
      v13 = *(unsigned int *)(v11 + 168);
      if ((_DWORD)v13)
      {
        v14 = *(uint64_t **)(v11 + 160);
        v15 = *(_QWORD **)a1;
        do
        {
          v16 = *v14++;
          *v15++ |= v16;
          --v13;
        }
        while (v13);
      }
      v7 += 8;
    }
    while (v7 != v8);
  }
  v22 = **(_QWORD **)(a2 + 40) + 16 * *(int *)(a3 + 24);
  v23 = *(unsigned int *)(v22 + 8);
  if ((_DWORD)v23)
  {
    v24 = *(int **)v22;
    v25 = *(_QWORD *)v22 + 4 * v23;
    do
    {
      v26 = *v24;
      v27 = *(_QWORD *)(a2 + 16);
      v28 = v27 + 304 * *v24;
      v29 = *(unsigned int *)(v28 + 224);
      if (v10 < v29)
      {
        v39 = v10 & 0x3F;
        v40 = v9;
        if (v39)
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v9 - 8) &= ~(-1 << v39);
        *(_DWORD *)(a1 + 64) = v29;
        v41 = v29 + 63;
        if (v9 != (v29 + 63) >> 6)
        {
          v42 = v41 >> 6;
          if (v9 > v42)
          {
            *(_DWORD *)(a1 + 8) = v42;
            v9 = v41 >> 6;
          }
          else
          {
            v43 = v9;
            if (v42 > *(_DWORD *)(a1 + 12))
            {
              v52 = v6;
              llvm::SmallVectorBase<unsigned int>::grow_pod(a1, v6, v42, 8);
              v6 = v52;
              v43 = *(unsigned int *)(a1 + 8);
              v9 = *(_DWORD *)(a1 + 8);
            }
            v44 = v42 - v40;
            if (v42 != v40)
            {
              v55 = v25;
              v45 = v40;
              v40 = v6;
              bzero((void *)(*(_QWORD *)a1 + 8 * v43), 8 * v44);
              v6 = v40;
              LODWORD(v40) = v45;
              v25 = v55;
            }
            v9 += v42 - v40;
            *(_DWORD *)(a1 + 8) = v9;
            v29 = *(unsigned int *)(a1 + 64);
          }
        }
        if ((v29 & 0x3F) != 0)
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v9 - 8) &= ~(-1 << (v29 & 0x3F));
      }
      else
      {
        v29 = v10;
      }
      v30 = *(unsigned int *)(v28 + 168);
      if ((_DWORD)v30)
      {
        v31 = *(uint64_t **)(v28 + 160);
        v32 = *(_QWORD **)a1;
        do
        {
          v33 = *v31++;
          *v32++ |= v33;
          --v30;
        }
        while (v30);
      }
      v34 = v27 + 304 * v26;
      v10 = *(unsigned int *)(v34 + 296);
      if (v29 < v10)
      {
        v46 = v29 & 0x3F;
        v47 = v9;
        if (v46)
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v9 - 8) &= ~(-1 << v46);
        *(_DWORD *)(a1 + 64) = v10;
        v48 = v10 + 63;
        if (v9 != (v10 + 63) >> 6)
        {
          v49 = v48 >> 6;
          if (v9 > v49)
          {
            *(_DWORD *)(a1 + 8) = v49;
            v9 = v48 >> 6;
          }
          else
          {
            v50 = v9;
            if (v49 > *(_DWORD *)(a1 + 12))
            {
              v53 = v6;
              llvm::SmallVectorBase<unsigned int>::grow_pod(a1, v6, v49, 8);
              v6 = v53;
              v50 = *(unsigned int *)(a1 + 8);
              v9 = *(_DWORD *)(a1 + 8);
            }
            if (v49 != v47)
            {
              v51 = v6;
              bzero((void *)(*(_QWORD *)a1 + 8 * v50), 8 * (v49 - v47));
              v6 = v51;
            }
            v9 += v49 - v47;
            *(_DWORD *)(a1 + 8) = v9;
            v10 = *(unsigned int *)(a1 + 64);
          }
        }
        if ((v10 & 0x3F) != 0)
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v9 - 8) &= ~(-1 << (v10 & 0x3F));
      }
      else
      {
        v10 = v29;
      }
      v35 = *(unsigned int *)(v34 + 240);
      if ((_DWORD)v35)
      {
        v36 = *(uint64_t **)(v34 + 232);
        v37 = *(_QWORD **)a1;
        do
        {
          v38 = *v36++;
          *v37++ |= v38;
          --v35;
        }
        while (v35);
      }
      ++v24;
    }
    while (v24 != (int *)v25);
  }
}

uint64_t sub_1C49E16FC(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeMachineLoopInfoPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "AGX3 Fence Placement";
  *(_QWORD *)(v2 + 8) = 20;
  *(_QWORD *)(v2 + 16) = "agx3-fence-placement";
  *(_QWORD *)(v2 + 24) = 20;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EF838;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C49E1AF4;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_DWORD *sub_1C49E178C(_DWORD *a1, _QWORD *a2, unsigned int a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  int v13;
  int *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;
  uint64_t v32;

  v12 = a2[4];
  v13 = sub_1C4AD4FB8((uint64_t)a2, a3, (_QWORD *)(a4 + 8));
  v14 = (int *)(v12 + 32 * a3);
  switch(v13)
  {
    case 0:
      a1[1] = 0;
      a1[2] = 0;
      break;
    case 1:
    case 2:
    case 3:
      v15 = *(unsigned int *)(v12 + 32 * a3 + 4);
      *a1 = 0;
      v16 = *(unsigned __int16 *)(*(_QWORD *)(a4 + 112) + 2 * v15);
      v17 = v16 + (sub_1C49E1960(a4, v15) >> 4);
      a1[1] = v16;
      a1[2] = v17;
      if (((a5 & 1) != 0 || a6) && ((a6 & 1) != 0 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2[3] + 32) + 16) + 356)))
      {
        v18 = (v17 + 1) >> 1;
        a1[1] = v16 >> 1;
        goto LABEL_25;
      }
      break;
    case 4:
    case 5:
      v19 = v12 + 32 * a3;
      v20 = *(_DWORD *)(v19 + 16) - 81;
      if (v20 > 4)
      {
        v24 = 0;
      }
      else
      {
        v21 = *v14;
        v22 = *(_DWORD *)(v19 + 4);
        if ((_BYTE)v21)
          v23 = (v21 << 14) & 0x80000000;
        else
          v23 = 0;
        v24 = v23 | v22;
      }
      *a1 = 1;
      a1[1] = v24;
      v18 = dword_1C6613BFC[v20] + v24;
      goto LABEL_25;
    case 6:
    case 7:
      *a1 = 2;
      v25 = v12 + 32 * a3;
      if (*(_BYTE *)v14 == 7)
        LODWORD(v25) = *(_DWORD *)(v25 + 4);
      else
        v25 = *(_QWORD *)(v25 + 16);
      a1[1] = v25;
      v26 = a2[6];
      if ((v26 & 7) != 0)
      {
        v27 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        v27 = v26 & 0xFFFFFFFFFFFFFFF8;
        a2[6] = v26 & 0xFFFFFFFFFFFFFFF8;
      }
      v29 = *(_QWORD *)(v27 + 24);
      v28 = (unint64_t *)(v27 + 24);
      if ((v29 & 0xFFFFFFFFFFFFFFF9) != 0)
      {
        v31 = sub_1C4825F50(v28) + 7;
        if ((_DWORD)v30 == 1)
        v32 = (v31 >> 4) & 0x7FFFFFFF;
      }
      else
      {
        LODWORD(v32) = 0x7FFFFFFF;
      }
      v18 = a1[1] + v32;
LABEL_25:
      a1[2] = v18;
      break;
    default:
      return a1;
  }
  return a1;
}

uint64_t sub_1C49E1960(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;

  v2 = a2;
  v3 = (_QWORD *)(a1 + 648);
  v4 = *(_QWORD *)(a1 + 656);
  if (v4 <= a2)
  {
    v6 = a2 + 1;
    if (v4 != v6)
    {
      if (v4 <= v6)
      {
        v12 = (_QWORD *)(a1 + 648);
        v13 = a2;
        v14 = a2;
        v15 = a1;
        v16 = a2 + 1;
        if (*(_QWORD *)(a1 + 664) < v6)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v12, (void *)(a1 + 672), v6, 2);
          v4 = *(_QWORD *)(v15 + 656);
        }
        v6 = v16;
        a2 = v14;
        a1 = v15;
        v2 = v13;
        if (v16 != v4)
        {
          bzero((void *)(*v12 + 2 * v4), 2 * (v16 - v4));
          v2 = v13;
          a2 = v14;
          v6 = v16;
          a1 = v15;
        }
      }
      *(_QWORD *)(a1 + 656) = v6;
    }
  }
  else
  {
    v5 = *(unsigned __int16 *)(*v3 + 2 * a2);
    if (*(_WORD *)(*v3 + 2 * a2))
      return v5;
  }
  v7 = 0;
  v8 = *(uint64_t ***)(a1 + 248);
  v9 = *(uint64_t ***)(a1 + 240);
  do
  {
    if (a2 - 0x40000000 >= 0xC0000001)
    {
      v10 = **v9;
      if (a2 >> 3 < *(unsigned __int16 *)(v10 + 22)
        && ((1 << (a2 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v10 + 8) + (a2 >> 3))) != 0
        && (!v7
         || *v9 != v7
         && ((*(_DWORD *)(v7[1] + ((*(unsigned __int16 *)(v10 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v10 + 24)) & 1) != 0))
      {
        v7 = *v9;
      }
    }
    ++v9;
  }
  while (v9 != v8);
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 264)
                       + 24
                       * (*(unsigned __int16 *)(*v7 + 24)
                        + *(_DWORD *)(a1 + 272) * (((unint64_t)v8 - *(_QWORD *)(a1 + 240)) >> 3)));
  *(_WORD *)(*(_QWORD *)(a1 + 648) + 2 * v2) = v5;
  return v5;
}

_QWORD *sub_1C49E1AF4()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8EF838);
  *result = &off_1E7FA96D8;
  return result;
}

void sub_1C49E1B34(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C49E1BC8(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C49E1C54()
{
  return "AGX3 Fence Placement Pass";
}

void *sub_1C49E1C64(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineLoopInfo::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C49E1CC4()
{
  uint64_t v0;
  llvm::MachineFunction *v1;
  void **v2;
  void *v3;
  llvm::MachineFunction *v4;
  BOOL v5;
  int v6;
  int v7;
  void **v8;
  uint64_t v9;
  void **v10;
  void **v11;
  uint64_t v12;
  void **v13;
  unsigned __int8 *v14;
  uint64_t v15;
  _BYTE *v16;
  size_t v17;
  int v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  int64x2_t v22;
  llvm::MachineBasicBlock **v23;
  int v24;
  int v25;
  llvm::MachineBasicBlock *v26;
  llvm::MachineBasicBlock *v27;
  int v28;
  unsigned __int16 *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  _BOOL4 v39;
  BOOL v40;
  int v41;
  BOOL v42;
  BOOL v43;
  int v44;
  __int16 v45;
  uint64_t v46;
  llvm::MachineBasicBlock *v47;
  _BOOL4 v48;
  unsigned __int8 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  llvm::MachineBasicBlock *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  int v58;
  unint64_t v59;
  _QWORD *i;
  unsigned int v61;
  _DWORD *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  _DWORD *v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  _DWORD *v72;
  int v73;
  BOOL v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  _DWORD *v79;
  int v80;
  BOOL v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  _DWORD *v86;
  int v87;
  BOOL v88;
  unsigned int v89;
  uint64_t v90;
  _BOOL4 v91;
  uint64_t v92;
  uint64_t j;
  unint64_t v94;
  int v95;
  unint64_t v96;
  _QWORD *k;
  unsigned int v98;
  _DWORD *v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  int v105;
  uint64_t v106;
  char *v107;
  int v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  llvm::MachineBasicBlock *v112;
  int v113;
  int v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t FirstTerminator;
  char v122;
  unsigned __int16 *v123;
  int v124;
  __int16 v125;
  uint64_t v126;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  _BYTE *v136;
  unsigned __int8 v137;
  uint64_t v138;
  uint64_t m;
  _BYTE *n;
  uint64_t v141;
  __n128 v142;
  unsigned int v143;
  llvm::MachineBasicBlock **v144;
  char *v145;
  uint64_t v146;
  void **v147;
  void **v148;
  int v149;
  char *v151;
  uint64_t v152;
  int v153;
  int v154;
  char *v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  unsigned int v163;
  uint64_t *v164;
  llvm::MachineBasicBlock *v165;
  uint64_t v166;
  unsigned int v167;
  BOOL v168;
  unsigned int v169;
  char *v170;
  uint64_t v171;
  unsigned int *v172;
  unint64_t v173;
  int v174;
  unint64_t v175;
  unsigned int v176;
  unsigned int v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  unsigned int v181;
  unsigned int v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  int v186;
  unint64_t v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t *v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  int v201;
  int v202;
  unint64_t v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t *v209;
  char *v210;
  int v211;
  unsigned int *v212;
  unsigned int *v213;
  unsigned int *v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int *v222;
  unsigned int v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int v228;
  int v229;
  char *v230;
  char *v231;
  char *v232;
  uint64_t v233;
  int v234;
  int v235;
  char *v236;
  int v237;
  int v238;
  unint64_t v239;
  unint64_t v240;
  void *v241;
  unsigned int v243;
  int *v244;
  int *v245;
  unint64_t v246;
  int v247;
  unsigned int v248;
  unint64_t v249;
  unsigned int v250;
  unsigned int *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unsigned int v256;
  unsigned int v257;
  char *v258;
  unsigned int v259;
  uint64_t v260;
  uint64_t *v261;
  _QWORD *v262;
  uint64_t v263;
  int v264;
  uint64_t v265;
  unsigned int v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t *v270;
  _QWORD *v271;
  uint64_t v272;
  char *v273;
  char *v274;
  unsigned int *v275;
  unint64_t v276;
  unsigned int v277;
  std::string *v278;
  char *v279;
  unint64_t v280;
  char *v281;
  _DWORD *v282;
  unint64_t v283;
  int *v284;
  unsigned int v285;
  std::string *v286;
  _BYTE *v287;
  unint64_t v288;
  char *v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  unsigned int *v294;
  unsigned int v295;
  uint64_t **v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t *v299;
  _QWORD *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t *v303;
  _QWORD *v304;
  uint64_t v305;
  char *v306;
  unsigned int v307;
  uint64_t v308;
  uint64_t *v309;
  _QWORD *v310;
  uint64_t v311;
  unsigned int v312;
  uint64_t v313;
  uint64_t *v314;
  uint64_t *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t *v321;
  uint64_t *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  _BOOL4 v328;
  BOOL v329;
  uint64_t v330;
  uint64_t v331;
  int *v332;
  unsigned int v333;
  uint64_t v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  unsigned int v338;
  int v339;
  int v340;
  unsigned int v341;
  unint64_t v342;
  uint64_t v343;
  int v344;
  unsigned int v345;
  uint64_t v346;
  uint64_t v347;
  char *v348;
  unsigned int v349;
  char *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unsigned int v356;
  std::string::size_type v357;
  char v358;
  std::string::size_type v359;
  _QWORD *v360;
  unint64_t v361;
  _QWORD *v362;
  _DWORD *v363;
  std::string::size_type v364;
  uint64_t v365;
  uint64_t v366;
  _QWORD *v367;
  _QWORD *v368;
  __n128 v369;
  char *v370;
  uint64_t v371;
  uint64_t v372;
  char *v373;
  char *v374;
  char *v375;
  char *v376;
  char *v377;
  char *v378;
  char *v379;
  uint64_t v380;
  unint64_t v381;
  uint64_t v382;
  unsigned int v383;
  uint64_t v384;
  _BOOL4 v385;
  int v386;
  char v387;
  unsigned int ii;
  int v389;
  BOOL v390;
  unint64_t v391;
  int v392;
  unint64_t v393;
  unsigned int v394;
  uint64_t v395;
  int v396;
  llvm::MachineBasicBlock *v397;
  unsigned int v398;
  unsigned int v399;
  unint64_t v400;
  llvm::MachineBasicBlock *v401;
  uint64_t v402;
  unint64_t v403;
  int v404;
  unint64_t v405;
  unsigned int v406;
  uint64_t v407;
  int v408;
  uint64_t v409;
  unsigned int v410;
  unsigned int v411;
  unint64_t v412;
  uint64_t v413;
  unsigned int v414;
  unsigned int jj;
  int v416;
  uint64_t *v417;
  std::string::value_type *v418;
  uint64_t v419;
  int v420;
  unsigned int v421;
  int v422;
  _WORD *v423;
  unsigned int v424;
  _QWORD *v425;
  unsigned int v426;
  uint64_t *v427;
  int v428;
  unsigned int v429;
  uint64_t v430;
  uint64_t v431;
  int v432;
  unsigned int v433;
  unint64_t v434;
  unsigned __int16 *v435;
  int v436;
  uint64_t v437;
  int v439;
  unsigned int kk;
  unint64_t v441;
  int v442;
  unint64_t v443;
  unsigned int v444;
  uint64_t v445;
  uint64_t *v446;
  uint64_t v447;
  unsigned int v448;
  __int16 *v449;
  llvm::SmallPtrSetImplBase *v450;
  unint64_t v451;
  unint64_t v452;
  __int16 v453;
  _WORD *v454;
  unsigned __int16 *v455;
  __int16 v456;
  unsigned __int16 v457;
  int v458;
  unint64_t v459;
  uint64_t v460;
  int v461;
  int v462;
  int v463;
  uint64_t v464;
  uint64_t v465;
  unint64_t *v466;
  _DWORD *v467;
  unint64_t v468;
  _QWORD *v469;
  __int16 *v470;
  unint64_t v471;
  __int16 v472;
  _WORD *v473;
  unsigned __int16 *v474;
  __int16 v475;
  unsigned __int16 v476;
  int v477;
  uint64_t *v478;
  unsigned int v479;
  char **v480;
  uint64_t v481;
  uint64_t v482;
  _DWORD *v483;
  uint64_t v484;
  unsigned int v485;
  unsigned int v486;
  int v487;
  int v488;
  int v489;
  int v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  __int128 *v496;
  uint64_t v497;
  std::string::size_type v498;
  uint64_t v499;
  uint64_t v500;
  llvm::MachineFunction *v501;
  uint64_t v502;
  uint64_t *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  unint64_t v508;
  uint64_t v509;
  llvm::MachineFunction *v510;
  unint64_t *v511;
  unint64_t *v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  unint64_t v517;
  int *v518;
  int NumExplicitOperands;
  int *v520;
  uint64_t v521;
  _QWORD *v522;
  int v523;
  int v524;
  int v525;
  BOOL v526;
  unsigned __int16 *v527;
  unsigned __int16 *v528;
  int v529;
  int v530;
  int v531;
  unsigned __int16 *v532;
  unsigned __int16 *v533;
  int v534;
  int v535;
  int v536;
  int v537;
  uint64_t *size;
  char **v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t *v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t *v552;
  uint64_t v553;
  uint64_t v554;
  __int16 *v555;
  unint64_t v556;
  __int16 v557;
  _WORD *v558;
  unsigned __int16 *v559;
  __int16 v560;
  unsigned __int16 v561;
  int v562;
  uint64_t v563;
  std::string::size_type v564;
  uint64_t v565;
  uint64_t v566;
  llvm::MachineFunction *v567;
  unint64_t *v568;
  unint64_t *v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  unint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t *v579;
  uint64_t v580;
  uint64_t v581;
  int v582;
  int v583;
  void *v584;
  char *v585;
  uint64_t v586;
  uint64_t v587;
  char *v588;
  uint64_t v589;
  uint64_t v590;
  _QWORD *v591;
  _QWORD *v592;
  char *v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  __int128 *v599;
  llvm::MachineMemOperand *v600;
  uint64_t v601;
  uint64_t v602;
  _BYTE *v603;
  unsigned __int8 *v604;
  uint64_t v605;
  llvm::MachineFunction *v606;
  unint64_t *v607;
  unint64_t *v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  unint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t *v618;
  uint64_t v619;
  uint64_t v620;
  void **v621;
  void **v622;
  unsigned int v623;
  uint64_t v624;
  uint64_t nn;
  uint64_t v626;
  uint64_t v628;
  unint64_t v629;
  unsigned __int16 *v630;
  uint64_t v631;
  uint64_t v632;
  unsigned __int8 *v633;
  uint64_t v634;
  uint64_t v635;
  int v636;
  int v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t *v640;
  uint64_t v641;
  uint64_t v642;
  unint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t *v650;
  _BYTE *v651;
  _QWORD *v652;
  uint64_t v653;
  _QWORD *v654;
  uint64_t v655;
  uint64_t v656;
  unint64_t *v657;
  unint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t *v663;
  _QWORD *v664;
  uint64_t v665;
  _QWORD *v666;
  uint64_t v667;
  uint64_t v668;
  unint64_t *v669;
  unint64_t v670;
  unsigned int v671;
  void **v672;
  uint64_t v673;
  uint64_t v674;
  unsigned int *v675;
  uint64_t v676;
  unint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  unsigned __int16 *v684;
  int v685;
  uint64_t v686;
  uint64_t v687;
  int v688;
  uint64_t i1;
  unsigned __int16 *v690;
  int v691;
  unsigned int i2;
  unsigned int v693;
  uint64_t v694;
  unint64_t v695;
  int v696;
  unint64_t v697;
  uint64_t v698;
  unsigned __int8 *v699;
  uint64_t v700;
  llvm::MachineFunction *v701;
  unint64_t *v702;
  unint64_t *v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  unint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  char v712;
  char v713;
  unsigned int v714;
  uint64_t v715;
  uint64_t v716;
  unsigned int v717;
  _QWORD *v718;
  uint64_t v719;
  _QWORD *v720;
  int v721;
  BOOL v722;
  unsigned int v723;
  _QWORD *v724;
  __int16 v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  _DWORD *v729;
  uint64_t v730;
  unsigned int v731;
  _DWORD *v732;
  uint64_t v733;
  char *v734;
  uint64_t v735;
  char *v736;
  unsigned int *v737;
  std::string::size_type v738;
  unsigned int v739;
  unint64_t v740;
  int v741;
  unint64_t v742;
  BOOL v743;
  unint64_t v744;
  uint64_t v745;
  char *v746;
  char *v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t *v750;
  uint64_t v751;
  char *v752;
  uint64_t v753;
  unint64_t *v754;
  unint64_t v755;
  uint64_t v756;
  unint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  unint64_t *v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t *v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  BOOL v773;
  unint64_t *v774;
  unint64_t v775;
  unint64_t v776;
  int v777;
  unint64_t v778;
  unint64_t *v779;
  unint64_t v780;
  char *v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t *v784;
  uint64_t v785;
  uint64_t v786;
  unint64_t *v787;
  unint64_t v788;
  void *v789;
  uint64_t v790;
  unsigned int v792;
  int v793;
  unsigned int v794;
  void *v795;
  unsigned int v796;
  int v797;
  unsigned int v798;
  void *v799;
  char *v800;
  char *v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t *v806;
  _QWORD *v807;
  uint64_t v808;
  unint64_t *v809;
  unint64_t v810;
  uint64_t v811;
  uint64_t *v812;
  uint64_t v813;
  uint64_t v814;
  char *v815;
  uint64_t v816;
  char *v817;
  char *v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t *v823;
  _QWORD *v824;
  uint64_t v825;
  int v826;
  uint64_t i3;
  unint64_t *v828;
  unint64_t v829;
  uint64_t v830;
  uint64_t i4;
  int v832;
  uint64_t v833;
  _BOOL4 v835;
  uint64_t v837;
  int v838;
  uint64_t v839;
  uint64_t v840;
  void *v841;
  BOOL v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v846;
  int v847;
  uint64_t v848;
  BOOL v849;
  unsigned __int8 v850;
  unsigned __int8 v851;
  unint64_t v852;
  uint64_t i5;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  int v862;
  int v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t *v866;
  uint64_t v867;
  uint64_t v869;
  int v870;
  uint64_t v871;
  uint64_t v872;
  char v873;
  char v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t *v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  unsigned int v883;
  char *v884;
  uint64_t v885;
  __int32 v886;
  unsigned int v887;
  int32x2_t *v888;
  __int32 v889;
  char *v890;
  int v891;
  int v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t *v895;
  uint64_t *v896;
  uint64_t v897;
  uint64_t v898;
  unsigned int v899;
  char *v900;
  uint64_t v901;
  __int32 v902;
  unsigned int v903;
  int32x2_t *v904;
  __int32 v905;
  char *v906;
  uint64_t v907;
  char *v908;
  char *v909;
  char *v910;
  std::string::size_type v911;
  std::string::size_type *v912;
  int v913;
  int v914;
  char *v915;
  uint64_t v916;
  int v917;
  unsigned int v918;
  int v919;
  int v920;
  int v921;
  char *v922;
  int i6;
  uint64_t v924;
  std::string::size_type v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  unsigned int v929;
  uint64_t v930;
  int v931;
  int v932;
  int v933;
  unsigned int v934;
  unsigned int v935;
  uint64_t v936;
  int v937;
  int v938;
  int v939;
  int v940;
  int v941;
  uint64_t v942;
  int v943;
  int v944;
  __int32 v945;
  unsigned int v946;
  uint64_t v947;
  int32x2_t *v948;
  int32x2_t *v949;
  __int32 v950;
  int32x2_t v951;
  int v952;
  int *v953;
  __int32 v954;
  int v955;
  char *v956;
  std::string *v957;
  std::string *v958;
  uint64_t v959;
  unsigned int v960;
  int v961;
  int v962;
  int v963;
  char *v964;
  std::string *v965;
  std::string *v966;
  unint64_t v967;
  uint64_t v968;
  unint64_t v969;
  unsigned int v970;
  uint64_t v971;
  int v972;
  _BOOL4 v973;
  char *v974;
  char *v975;
  uint64_t v976;
  int *v977;
  unsigned int v978;
  uint64_t v979;
  int v980;
  char *v981;
  char *v982;
  uint64_t v983;
  uint64_t *v984;
  uint64_t v985;
  int v986;
  uint64_t v987;
  unsigned int v988;
  uint64_t v989;
  char *v990;
  char *v991;
  uint64_t v992;
  uint64_t *v993;
  uint64_t v994;
  int v995;
  uint64_t v996;
  char *v997;
  uint64_t v998;
  char *v999;
  uint64_t v1000;
  void *v1001;
  void *v1002;
  char *v1003;
  char *v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t *v1009;
  _QWORD *v1010;
  uint64_t v1011;
  int v1012;
  uint64_t v1013;
  unint64_t *v1014;
  unint64_t v1015;
  uint64_t v1016;
  int *v1017;
  unsigned int v1018;
  uint64_t v1019;
  int v1020;
  int v1021;
  uint64_t v1022;
  char *v1023;
  uint64_t v1024;
  char *v1025;
  char *v1026;
  char *v1027;
  uint64_t v1028;
  int *v1029;
  unsigned int v1030;
  uint64_t v1031;
  int v1032;
  uint64_t v1033;
  char *v1034;
  char *v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t *v1040;
  uint64_t *v1041;
  unsigned int v1042;
  uint64_t v1043;
  uint64_t v1044;
  int v1045;
  uint64_t v1046;
  _QWORD *v1047;
  uint64_t v1048;
  uint64_t v1049;
  unint64_t *v1050;
  unint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  char *v1055;
  int v1056;
  char *v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t *v1062;
  _QWORD *v1063;
  uint64_t v1064;
  int v1065;
  uint64_t v1066;
  unint64_t *v1067;
  unint64_t v1068;
  uint64_t v1069;
  uint64_t *v1070;
  uint64_t v1071;
  int v1072;
  uint64_t v1073;
  unsigned __int8 v1074;
  uint64_t v1075;
  uint64_t v1076;
  int *v1077;
  unsigned int v1078;
  uint64_t v1079;
  int v1080;
  uint64_t v1081;
  int v1082;
  uint64_t v1083;
  uint64_t v1084;
  unsigned int v1085;
  int v1086;
  unsigned int v1087;
  void *v1088;
  unsigned int v1089;
  int v1090;
  unsigned int v1091;
  void *v1092;
  _BYTE *v1093;
  uint64_t v1094;
  uint64_t v1095;
  _QWORD *v1096;
  uint64_t *v1097;
  uint64_t *v1098;
  unint64_t v1099;
  unint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  unsigned int *v1103;
  uint64_t v1104;
  uint64_t v1105;
  unint64_t v1106;
  unint64_t v1107;
  uint64_t i7;
  unsigned __int16 *v1109;
  uint64_t v1110;
  unsigned __int16 *v1111;
  _DWORD *v1112;
  int v1113;
  unsigned int v1115;
  uint64_t v1116;
  unint64_t v1117;
  uint64_t v1118;
  int v1119;
  int v1120;
  unsigned int v1121;
  int v1122;
  unint64_t v1123;
  unint64_t v1124;
  _BOOL4 v1125;
  unint64_t v1126;
  int v1127;
  unint64_t v1128;
  unint64_t v1129;
  unsigned __int8 *v1130;
  unint64_t v1131;
  unsigned int v1132;
  uint64_t v1133;
  _QWORD *v1134;
  uint64_t v1135;
  uint64_t v1136;
  llvm::MachineFunction *v1137;
  unint64_t v1138;
  uint64_t v1139;
  int v1140;
  _OWORD *v1141;
  uint64_t v1142;
  uint64_t i8;
  void **v1144;
  uint64_t v1145;
  unsigned __int16 *v1146;
  unsigned int v1147;
  int v1148;
  unint64_t v1149;
  BOOL v1150;
  int v1151;
  uint64_t v1152;
  char v1153;
  _DWORD *v1154;
  _DWORD *v1155;
  int v1156;
  uint64_t v1157;
  unsigned int v1158;
  uint64_t v1159;
  BOOL v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  unint64_t i9;
  _QWORD *v1166;
  char *v1167;
  char *v1168;
  unsigned int v1169;
  uint64_t v1170;
  uint64_t v1171;
  void *v1172;
  char *v1173;
  int v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  unint64_t v1179;
  _QWORD *v1180;
  char *v1181;
  char *v1182;
  char *v1183;
  uint64_t v1184;
  char *v1185;
  unsigned int v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  unsigned int v1191;
  uint64_t v1192;
  uint64_t v1193;
  int v1194;
  unint64_t v1195;
  unsigned int v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  unint64_t v1200;
  char *v1201;
  char *v1202;
  uint64_t v1203;
  uint64_t v1204;
  unint64_t v1205;
  unint64_t v1206;
  uint64_t *v1207;
  uint64_t *v1208;
  uint64_t *v1209;
  unint64_t v1210;
  __int128 *v1211;
  __int128 *v1212;
  unint64_t v1213;
  unint64_t v1214;
  uint64_t *v1215;
  uint64_t *v1216;
  uint64_t *v1217;
  unint64_t v1218;
  void **v1219;
  uint64_t v1220;
  void **v1221;
  void **v1222;
  uint64_t v1223;
  void **v1224;
  char *v1225;
  uint64_t v1226;
  char *v1227;
  unsigned __int8 v1229;
  llvm *v1230;
  llvm *v1231;
  _BYTE *v1232;
  uint64_t v1233;
  uint64_t v1234;
  const char *v1235;
  const char *v1236;
  char v1237;
  const char *v1238;
  size_t v1239;
  size_t v1240;
  llvm::raw_ostream *v1241;
  _WORD *v1242;
  llvm *v1243;
  llvm *v1244;
  char *v1245;
  char *v1246;
  uint64_t v1247;
  llvm *v1248;
  void *v1249;
  int v1250;
  llvm *v1251;
  _BYTE *v1252;
  _BYTE *v1253;
  uint64_t v1254;
  uint64_t *v1255;
  uint64_t v1256;
  uint64_t *v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  char *v1261;
  char *v1262;
  char *v1263;
  char *v1264;
  char *v1265;
  char *v1266;
  char *v1267;
  std::string::size_type v1268;
  _BYTE *v1269;
  _BYTE *v1270;
  int v1271;
  uint64_t *v1272;
  uint64_t *v1273;
  unsigned int v1274;
  uint64_t v1275;
  uint64_t *v1276;
  unint64_t v1277;
  uint64_t v1278;
  char *v1279;
  llvm::MachineInstr *v1280;
  uint64_t v1281;
  llvm *v1282;
  llvm *v1283;
  uint64_t v1284;
  llvm *v1285;
  void *v1286;
  llvm *v1287;
  llvm::raw_ostream *v1288;
  _QWORD *v1289;
  uint64_t ***v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t ****v1295;
  uint64_t ***v1296;
  int v1297;
  int v1298;
  uint64_t ***v1299;
  uint64_t **v1300;
  char *v1301;
  uint64_t **v1302;
  uint64_t v1303;
  uint64_t ***v1304;
  uint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t ****v1309;
  uint64_t ***v1310;
  int v1311;
  int v1312;
  uint64_t ***v1313;
  uint64_t **v1314;
  char *v1315;
  uint64_t **v1316;
  std::string *v1317;
  std::string::size_type v1318;
  char v1319;
  char v1320;
  _BYTE *v1321;
  std::string *v1322;
  size_t v1323;
  llvm::raw_ostream *v1324;
  llvm::raw_ostream *v1325;
  const char *v1326;
  size_t v1327;
  void *v1328;
  uint64_t v1329;
  llvm *v1330;
  uint64_t mm;
  llvm *v1332;
  llvm::raw_ostream *v1333;
  _DWORD *v1334;
  llvm::raw_ostream *v1335;
  uint64_t v1336;
  llvm *v1337;
  _BYTE *v1338;
  llvm *v1339;
  llvm::raw_ostream *v1340;
  _DWORD *v1341;
  llvm::MachineInstr **v1342;
  llvm::MachineInstr **v1343;
  llvm::MachineInstr *v1344;
  llvm *v1345;
  _DWORD *v1346;
  llvm *v1347;
  llvm *v1348;
  llvm *v1349;
  llvm::raw_ostream *v1350;
  _QWORD *v1351;
  uint64_t v1352;
  uint64_t v1353;
  uint64_t ***v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t ****v1359;
  uint64_t ***v1360;
  int v1361;
  int v1362;
  uint64_t ***v1363;
  uint64_t **v1364;
  char *v1365;
  uint64_t **v1366;
  const std::string::value_type *v1367;
  std::string::size_type v1368;
  std::string *v1369;
  size_t v1370;
  _BYTE *v1371;
  void **v1372;
  char v1373;
  uint64_t *v1374;
  _DWORD *v1375;
  void *v1376;
  void *v1377;
  uint64_t v1378;
  uint64_t v1379;
  llvm::MachineBasicBlock **v1380;
  llvm::MachineBasicBlock *v1381;
  uint64_t *v1382;
  int v1383;
  unsigned int v1384;
  unsigned int v1385;
  llvm::SmallPtrSetImplBase *v1386;
  llvm::SmallPtrSetImplBase *v1387;
  llvm::MachineBasicBlock *v1388;
  llvm::MachineBasicBlock *v1389;
  int v1390;
  llvm::MachineBasicBlock *v1391;
  llvm::MachineBasicBlock *v1392;
  int v1393;
  int v1394;
  char v1395;
  llvm::MachineFunction *v1396;
  unsigned int v1397;
  int v1398;
  llvm::SmallPtrSetImplBase *v1399;
  llvm::SmallPtrSetImplBase *v1400;
  llvm::SmallPtrSetImplBase *v1401;
  _BOOL4 v1402;
  int v1403;
  uint64_t v1404;
  int v1405;
  llvm::MachineMemOperand *v1406;
  llvm::MachineMemOperand *v1407;
  llvm::MachineMemOperand *v1408;
  llvm::MachineMemOperand *MachineMemOperand;
  char v1410;
  int v1411;
  int v1412;
  uint64_t v1413;
  unsigned __int32 v1414;
  uint64_t v1415;
  char *v1416;
  int v1417;
  int *v1418;
  unsigned int *v1419;
  unsigned __int32 v1420;
  uint64_t *v1421;
  uint64_t v1422;
  char *v1423;
  uint64_t v1424;
  uint64_t v1425;
  __n128 v1426;
  void **v1427;
  void *v1428;
  uint64_t v1429;
  void *v1430;
  uint64_t v1431;
  uint64_t v1432;
  __int128 v1433;
  unsigned __int32 v1434;
  _BYTE __p[24];
  uint64_t v1436;
  __int16 v1437;
  int v1438;
  int v1439;
  uint64_t v1440;
  void **v1441;
  unsigned int v1442;
  void *v1443;
  uint64_t v1444;
  _BYTE v1445[128];
  void *v1446;
  uint64_t v1447;
  void *v1448;
  uint64_t v1449;
  void *v1450;
  uint64_t v1451;
  unsigned int v1452;
  uint64_t v1453;
  char v1454;
  void *v1455;
  int v1456;
  int v1457;
  _BYTE v1458[1024];
  __int128 v1459;
  char *v1460;
  uint64_t v1461;
  uint64_t v1462;
  __int128 *v1463;
  uint64_t v1464;
  __int128 v1465;
  void *v1466;
  uint64_t v1467;
  __int128 v1468;
  unsigned int v1469;
  __int128 v1470;
  unsigned int v1471;
  void *v1472;
  uint64_t v1473;
  unsigned int v1474;
  void *v1475;
  uint64_t v1476;
  _BYTE v1477[48];
  int v1478;
  void *v1479;
  uint64_t v1480;
  _QWORD v1481[2];
  int v1482;
  unsigned __int8 *v1483;
  uint64_t v1484;
  _OWORD v1485[4];
  uint64_t v1486;
  __int128 v1487;
  __int128 v1488;
  __int128 v1489;
  __int128 v1490;
  uint64_t v1491;
  __int128 v1492;
  __int128 v1493;
  __int128 v1494;
  void *v1495;
  uint64_t v1496;
  _QWORD v1497[9];
  uint64_t v1498;
  uint64_t v1499;
  unsigned int v1500;
  void *v1501;
  uint64_t v1502;
  _BYTE v1503[16];
  _QWORD **v1504;
  _QWORD *v1505;
  uint64_t v1506;
  void *v1507[2];
  char v1508;
  _QWORD **v1509;
  _QWORD *v1510[2];
  char v1511;
  unsigned __int8 v1512;
  unsigned int v1513;
  char v1514;
  char v1515;
  char v1516;
  char v1517;
  int v1518;
  unsigned int v1519;
  uint64_t v1520;
  void *v1521;
  uint64_t v1522;
  uint64_t v1523;
  int v1524;
  __int128 v1525;
  char *v1526;
  unint64_t v1527;
  _QWORD v1528[2];
  void *__dst;
  __int128 v1530;
  _BYTE v1531[56];
  uint64_t v1532;
  void *v1533;
  __int128 v1534;
  __int128 v1535;
  __int128 v1536;
  __int128 v1537;
  __int128 v1538;
  _BYTE v1539[48];
  uint64_t v1540;
  void *v1541;
  _DWORD v1542[12];
  __int128 v1543;
  uint64_t v1544;
  int v1545;
  void *v1546;
  uint64_t v1547;
  _BYTE v1548[128];
  uint64_t v1549;
  unsigned int v1550;
  std::string v1551;
  unsigned int v1552;
  void *v1553;
  unint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  std::string v1557;
  uint64_t v1558;
  unsigned __int8 *v1559;
  uint64_t v1560;
  unint64_t *v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;

  v0 = MEMORY[0x1E0C80A78]();
  v1396 = v1;
  v1564 = *MEMORY[0x1E0C80C00];
  v2 = **(void ****)(v0 + 8);
  do
  {
    v3 = *v2;
    v2 += 2;
  }
  while (v3 != &llvm::MachineLoopInfo::ID);
  v1375 = (_DWORD *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v2 - 1) + 96))(*(v2 - 1), &llvm::MachineLoopInfo::ID);
  v4 = v1396;
  llvm::MachineFunction::RenumberBlocks(v1396, 0);
  if (byte_1ED7ECC00)
    v5 = 1;
  else
    v5 = word_1ED7ECB88 == 0;
  v6 = v5;
  v1430 = &v1432;
  v1431 = 0;
  v1428 = &v1430;
  v1429 = 0;
  if (byte_1ED7ECFC0)
    v7 = v6;
  else
    v7 = 0;
  if (v7 == 1)
  {
    sub_1C49CC7D8(v1396, (uint64_t *)&v1446);
    sub_1C49EAB08(&v1430, (uint64_t)&v1446);
    v8 = (void **)v1446;
    if ((_DWORD)v1447)
    {
      v9 = 2 * v1447;
      do
      {
        v10 = (void **)v8[v9 - 2];
        if (&v8[v9] != v10)
          free(v10);
        v9 -= 2;
      }
      while (v9 * 8);
      v8 = (void **)v1446;
    }
    if (v8 != &v1448)
      free(v8);
    sub_1C49CD49C((uint64_t)&v1430, &v1446);
    sub_1C49EAB08(&v1428, (uint64_t)&v1446);
    v11 = (void **)v1446;
    if ((_DWORD)v1447)
    {
      v12 = 2 * v1447;
      do
      {
        v13 = (void **)v11[v12 - 2];
        if (&v11[v12] != v13)
          free(v13);
        v12 -= 2;
      }
      while (v12 * 8);
      v11 = (void **)v1446;
    }
    if (v11 != &v1448)
      free(v11);
    v4 = v1396;
  }
  v14 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
  v15 = (*((_QWORD *)v4 + 14) - *((_QWORD *)v4 + 13)) >> 3;
  v1446 = &v1448;
  v1447 = 0;
  v1448 = &v1450;
  v1449 = 0;
  v1450 = &v1452;
  v1451 = 0;
  v1452 = 0;
  v1453 = 0;
  v1454 = 0;
  v1455 = v1458;
  v1457 = 128;
  v1373 = v7;
  if (v15 >= 0x81)
  {
    v1456 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1455, (uint64_t)v1458, v15, 8);
    v16 = v1455;
    v17 = 8 * v15;
LABEL_34:
    bzero(v16, v17);
    goto LABEL_35;
  }
  if ((_DWORD)v15)
  {
    v17 = 8 * v15;
    v16 = v1458;
    goto LABEL_34;
  }
LABEL_35:
  v1456 = v15;
  v1459 = 0u;
  v1460 = (char *)&v1462;
  v1461 = 0x400000000;
  v1465 = 0u;
  v1463 = &v1465;
  v1464 = 0;
  v1466 = &v1468;
  v1467 = 0;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1466, (uint64_t)&v1468, 1uLL, 8);
  *((_QWORD *)v1466 + v1467) = 0;
  LODWORD(v1467) = v1467 + 1;
  v1468 = 0u;
  v1469 = 0;
  v1471 = 0;
  v1470 = 0u;
  v1472 = &v1474;
  v1473 = 0;
  v1474 = 0;
  v1475 = v1477;
  v1476 = 0x600000000;
  v1478 = 0;
  v1479 = v1481;
  v1480 = 0;
  v1481[0] = &v1428;
  v1481[1] = 0x7FFFFFFFLL;
  v1482 = 1;
  v1483 = v14;
  v1484 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v14 + 176))(v14);
  v1485[1] = unk_1C86637F0;
  memset(&v1485[2], 0, 32);
  v1486 = 0;
  v1485[0] = llvm::MCSchedModel::Default;
  v1488 = unk_1C86637F0;
  v1489 = xmmword_1C8663800;
  v1490 = unk_1C8663810;
  v1487 = llvm::MCSchedModel::Default;
  v1491 = 0;
  v1494 = 0u;
  v1493 = 0u;
  v1492 = 0u;
  v1495 = v1497;
  v1496 = 0x1000000000;
  v1499 = 0;
  v1500 = 0;
  v1497[8] = 0;
  v1498 = 0;
  v1501 = v1503;
  v1502 = 0x400000000;
  v1505 = 0;
  v1506 = 0;
  v1504 = &v1505;
  v1507[0] = &v1508;
  v1507[1] = (void *)0x400000000;
  v1510[1] = 0;
  v1510[0] = 0;
  v1509 = v1510;
  v1511 = v14[356];
  v1512 = v6;
  v1513 = dword_1ED7ECCC0;
  v1514 = byte_1ED7ECD80;
  v1515 = byte_1ED7ECE40;
  v1516 = byte_1ED7ECF00;
  v1517 = 0;
  if (v14[303] | v14[305])
    v18 = 8;
  else
    v18 = 6;
  v1518 = v18;
  v1519 = dword_1ED7ED200;
  v1520 = 0;
  llvm::TargetSchedModel::init((llvm::TargetSchedModel *)v1485, (const llvm::TargetSubtargetInfo *)v14);
  if (!word_1ED7ECC48)
    v1513 = dword_1ED7ECCC0;
  if (!word_1ED7ECD08)
  {
    if (v1512)
      v19 = byte_1ED7ECD80 == 0;
    else
      v19 = 1;
    v20 = !v19;
    v1514 = v20;
  }
  if (!word_1ED7ECDC8)
    v1515 = (v1512 | byte_1ED7ECE40) != 0;
  if (!word_1ED7ECE88)
    v1516 = (v1512 | byte_1ED7ECF00) != 0;
  v1427 = &v1501;
  v1517 = 0;
  if (!word_1ED7ED188)
    v1519 = dword_1ED7ED200;
  v1440 = 1;
  v1372 = (void **)&v1441;
  v21 = 8;
  v22 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)((char *)&v1440 + v21) = v22;
    v21 += 16;
  }
  while (v21 != 136);
  v1443 = v1445;
  v1444 = 0x1000000000;
  v23 = (llvm::MachineBasicBlock **)*((_QWORD *)v1396 + 41);
  v1380 = (llvm::MachineBasicBlock **)((char *)v1396 + 320);
  if (v23 == (llvm::MachineBasicBlock **)((char *)v1396 + 320))
  {
    LOBYTE(v24) = 0;
    v1410 = 0;
    goto LABEL_1053;
  }
  v1410 = 0;
  v24 = 0;
  v25 = 0;
  v1385 = 0;
  do
  {
    v26 = (llvm::MachineBasicBlock *)(v23 + 6);
    v1381 = (llvm::MachineBasicBlock *)v23;
    v27 = v23[7];
    if (v27 != (llvm::MachineBasicBlock *)(v23 + 6))
    {
      v28 = 0;
      v1388 = (llvm::MachineBasicBlock *)(v23 + 6);
      while (1)
      {
        v29 = (unsigned __int16 *)*((_QWORD *)v27 + 2);
        v30 = *((_QWORD *)v29 + 2);
        if ((~*((_DWORD *)v29 + 4) & 0x800200) != 0)
        {
          v31 = *v29;
          if ((v30 & 0x400000000) == 0)
          {
LABEL_64:
            v32 = sub_1C4C915C4(v31);
            v33 = 0;
            v34 = v32 & 0xFF00000000;
            goto LABEL_83;
          }
          v35 = sub_1C4C915C4(*v29);
          if ((v35 & 0xFF00000000) == 0)
            goto LABEL_2178;
          v1410 |= (_DWORD)v35 == 123;
        }
        else
        {
          v31 = *v29;
          v1410 = 1;
          if ((v30 & 0x400000000) == 0)
            goto LABEL_64;
        }
        v32 = sub_1C4C915C4(v31);
        if ((v32 & 0xFF00000000) == 0)
          goto LABEL_2178;
        v36 = v32 - 85;
        v39 = (v32 - 192) <= 6 && ((1 << (v32 + 64)) & 0x61) != 0 || (_DWORD)v32 == 18;
        v40 = v36 > 0xD;
        v41 = (1 << v36) & 0x3001;
        v42 = v40 || v41 == 0;
        v34 = 1;
        v33 = !v42 || v39;
LABEL_83:
        if (v34)
          v43 = (_DWORD)v32 == 63;
        else
          v43 = 0;
        v44 = v43;
        v1426.n128_u32[0] = v44;
        v45 = *((_WORD *)v27 + 22);
        v46 = *((_QWORD *)v29 + 1);
        if ((v45 & 0xC) == 0 || (v45 & 4) != 0)
        {
          if ((v46 & 0x80) != 0)
          {
LABEL_97:
            (*(void (**)(_QWORD))(**((_QWORD **)v1396 + 2) + 176))(*((_QWORD *)v1396 + 2));
            v48 = sub_1C4AD4D04((uint64_t)v27) != 4;
            goto LABEL_98;
          }
        }
        else
        {
          v47 = v27;
          if ((v46 & 0x80) != 0)
            goto LABEL_97;
          while ((*((_WORD *)v47 + 22) & 8) != 0)
          {
            v47 = (llvm::MachineBasicBlock *)*((_QWORD *)v47 + 1);
            if ((*(_BYTE *)(*((_QWORD *)v47 + 2) + 8) & 0x80) != 0)
              goto LABEL_97;
          }
        }
        v48 = 0;
LABEL_98:
        v49 = atomic_load((unsigned __int8 *)&qword_1ED7ECB40);
        if ((v49 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7ECB40))
        {
          byte_1ED7ECB30 = 1;
          __cxa_guard_release(&qword_1ED7ECB40);
        }
        if (byte_1ED7ECB30)
        {
          v50 = sub_1C4C915C4(**((unsigned __int16 **)v27 + 2));
          if ((v50 & 0xFF00000000) != 0 && v50 == 63)
          {
            __dst = v27;
            sub_1C49EAC08((uint64_t)&v1440, (uint64_t *)&__dst);
          }
        }
        if (!v1512 || !byte_1ED7ECFC0)
          goto LABEL_249;
        v51 = *((_WORD *)v27 + 22);
        v52 = *(_QWORD *)(*((_QWORD *)v27 + 2) + 8);
        if ((v51 & 0xC) == 0 || (v51 & 4) != 0)
        {
          if ((v52 & 0x80) != 0)
          {
LABEL_248:
            v1511 = 1;
            goto LABEL_249;
          }
        }
        else
        {
          v53 = v27;
          if ((v52 & 0x80) != 0)
            goto LABEL_248;
          while ((*((_WORD *)v53 + 22) & 8) != 0)
          {
            v53 = (llvm::MachineBasicBlock *)*((_QWORD *)v53 + 1);
            if ((*(_BYTE *)(*((_QWORD *)v53 + 2) + 8) & 0x80) != 0)
              goto LABEL_248;
          }
        }
        v1402 = v48;
        v1405 = v33;
        v1411 = v28;
        v1417 = v25;
        if (!sub_1C4AD4D04((uint64_t)v27))
        {
          v54 = *((unsigned int *)v27 + 10);
          if ((_DWORD)v54)
          {
            v55 = 0;
            while (sub_1C4AD4FB8((uint64_t)v27, v55, (_QWORD *)(v1484 + 8)) != 5)
            {
LABEL_194:
              if (++v55 == v54)
                goto LABEL_195;
            }
            v56 = *(_DWORD *)(*((_QWORD *)v27 + 4) + 32 * v55 + 16);
            sub_1C49E178C(&__dst, v27, v55, v1484, 1, 0);
            v57 = (unint64_t)__dst;
            v58 = v1530;
            v59 = (unint64_t)__dst >> 32;
            while (2)
            {
              if (v58 == (_DWORD)v59)
                goto LABEL_194;
              LODWORD(__dst) = v59;
              if (v1506)
              {
                for (i = v1505; i; i = (_QWORD *)*i)
                {
                  v61 = *((_DWORD *)i + 7);
                  if (v61 <= v59)
                  {
                    if (v61 >= v59)
                      goto LABEL_162;
                    ++i;
                  }
                }
                goto LABEL_131;
              }
              if ((_DWORD)v1502)
              {
                v62 = v1501;
                v63 = 4 * v1502;
                while (*v62 != (_DWORD)v59)
                {
                  ++v62;
                  v63 -= 4;
                  if (!v63)
                    goto LABEL_131;
                }
                if (v63)
                  goto LABEL_162;
              }
LABEL_131:
              if (!v1500)
                goto LABEL_137;
              v64 = (v1500 - 1) & (37 * (_DWORD)v59);
              v65 = *(_DWORD *)(v1498 + 8 * v64);
              if (v65 == (_DWORD)v59)
              {
                if (v1500 == (_DWORD)v64)
                  goto LABEL_142;
              }
              else
              {
                v66 = 1;
                while (v65 != -1)
                {
                  v67 = v64 + v66++;
                  v64 = v67 & (v1500 - 1);
                  v65 = *(_DWORD *)(v1498 + 8 * v64);
                  if (v65 == (_DWORD)v59)
                    goto LABEL_138;
                }
LABEL_137:
                v64 = v1500;
LABEL_138:
                if (v64 == v1500)
                {
                  if (!v1500)
                  {
                    v68 = 0;
                    goto LABEL_156;
                  }
LABEL_142:
                  v69 = v1500 - 1;
                  v70 = (v1500 - 1) & (37 * v59);
                  v68 = (_DWORD *)(v1498 + 8 * v70);
                  v71 = *v68;
                  if ((_DWORD)v59 != *v68)
                  {
                    v72 = 0;
                    v73 = 1;
                    while (v71 != -1)
                    {
                      if (v72)
                        v74 = 0;
                      else
                        v74 = v71 == -2;
                      if (v74)
                        v72 = v68;
                      v75 = v70 + v73++;
                      v70 = v75 & v69;
                      v68 = (_DWORD *)(v1498 + 8 * (v75 & v69));
                      v71 = *v68;
                      if ((_DWORD)v59 == *v68)
                        goto LABEL_161;
                    }
                    if (v72)
                      v68 = v72;
LABEL_156:
                    if (4 * (int)v1499 + 4 >= 3 * v1500)
                    {
                      sub_1C49EE6D8((uint64_t)&v1498, 2 * v1500);
                      if (v1500)
                      {
                        v76 = v1500 - 1;
                        v77 = (37 * (_DWORD)__dst) & (v1500 - 1);
                        v68 = (_DWORD *)(v1498 + 8 * v77);
                        v78 = *v68;
                        if ((_DWORD)__dst != *v68)
                        {
                          v79 = 0;
                          v80 = 1;
                          while (v78 != -1)
                          {
                            if (v79)
                              v81 = 0;
                            else
                              v81 = v78 == -2;
                            if (v81)
                              v79 = v68;
                            v82 = v77 + v80++;
                            v77 = v82 & v76;
                            v68 = (_DWORD *)(v1498 + 8 * (v82 & v76));
                            v78 = *v68;
                            if ((_DWORD)__dst == *v68)
                              goto LABEL_158;
                          }
                          if (v79)
                            v68 = v79;
                        }
                      }
                      else
                      {
                        v68 = 0;
                      }
                    }
                    else if (v1500 + ~(_DWORD)v1499 - HIDWORD(v1499) <= v1500 >> 3)
                    {
                      v1393 = v24;
                      sub_1C49EE6D8((uint64_t)&v1498, v1500);
                      if (v1500)
                      {
                        v83 = v1500 - 1;
                        v84 = (37 * (_DWORD)__dst) & (v1500 - 1);
                        v68 = (_DWORD *)(v1498 + 8 * v84);
                        v85 = *v68;
                        if ((_DWORD)__dst != *v68)
                        {
                          v86 = 0;
                          v87 = 1;
                          while (v85 != -1)
                          {
                            if (v86)
                              v88 = 0;
                            else
                              v88 = v85 == -2;
                            if (v88)
                              v86 = v68;
                            v89 = v84 + v87++;
                            v84 = v89 & v83;
                            v68 = (_DWORD *)(v1498 + 8 * (v89 & v83));
                            v85 = *v68;
                            v24 = v1393;
                            if ((_DWORD)__dst == *v68)
                              goto LABEL_158;
                          }
                          if (v86)
                            v68 = v86;
                        }
                      }
                      else
                      {
                        v68 = 0;
                      }
                      v24 = v1393;
                    }
LABEL_158:
                    LODWORD(v1499) = v1499 + 1;
                    if (*v68 != -1)
                      --HIDWORD(v1499);
                    *(_QWORD *)v68 = __dst;
                  }
LABEL_161:
                  v68[1] = v56;
LABEL_162:
                  v57 = (v57 & 0xFFFFFFFF00000000) + 0x100000000;
                  v59 = HIDWORD(v57);
                  continue;
                }
              }
              break;
            }
            if (v56 != *(_DWORD *)(v1498 + 8 * v64 + 4))
              sub_1C4854E58((uint64_t)v1427, (unsigned int *)&__dst);
            goto LABEL_162;
          }
        }
LABEL_195:
        v90 = *((_QWORD *)v27 + 2);
        if ((*(_BYTE *)(v90 + 16) & 2) != 0)
        {
          v91 = sub_1C4A16F80(v27);
          v90 = *((_QWORD *)v27 + 2);
        }
        else
        {
          v91 = 0;
        }
        v25 = v1417;
        v26 = v1388;
        v28 = v1411;
        v33 = v1405;
        v48 = v1402;
        if ((sub_1C49EE5AC((unsigned __int16 *)v90) & 1) != 0 || v91)
        {
          v1394 = v24;
          sub_1C49EE62C((uint64_t)&__dst, *((unsigned __int16 **)v27 + 2));
          v92 = *((unsigned int *)v27 + 10);
          if ((_DWORD)v92)
          {
            for (j = 0; j != v92; ++j)
            {
              if (v91 && sub_1C4AD4FB8((uint64_t)v27, j, (_QWORD *)(v1484 + 8)) == 4)
              {
                sub_1C49E178C(__p, v27, j, v1484, 1, 0);
                v94 = *(_QWORD *)__p;
                v95 = *(_DWORD *)&__p[8];
                LODWORD(v96) = *(_DWORD *)&__p[4];
                while (1)
                {
                  if (v95 == (_DWORD)v96)
                    goto LABEL_230;
                  *(_DWORD *)__p = v96;
                  if (v1506)
                    break;
                  if (!(_DWORD)v1502)
                    goto LABEL_219;
                  v99 = v1501;
                  v100 = 4 * v1502;
                  while (*v99 != (_DWORD)v96)
                  {
                    ++v99;
                    v100 -= 4;
                    if (!v100)
                      goto LABEL_219;
                  }
                  if (!v100)
                    goto LABEL_219;
LABEL_226:
                  v94 = (v94 & 0xFFFFFFFF00000000) + 0x100000000;
                  v96 = HIDWORD(v94);
                }
                for (k = v1505; k; k = (_QWORD *)*k)
                {
                  v98 = *((_DWORD *)k + 7);
                  if (v98 <= v96)
                  {
                    if (v98 >= v96)
                      goto LABEL_226;
                    ++k;
                  }
                }
LABEL_219:
                v101 = *((_QWORD *)v27 + 4) + 32 * j;
                if ((*(_DWORD *)(v101 + 16) - 81) > 4)
                  v102 = 0;
                else
                  v102 = *(_DWORD *)(v101 + 4);
                v103 = sub_1C49C802C(v101);
                if ((v103 & 0xFF00000000) == 0 || ((1 << (v96 - v102)) & v103) != 0)
                  sub_1C4854E58((uint64_t)v1427, (unsigned int *)__p);
                goto LABEL_226;
              }
              if (!v1511)
              {
                v105 = *(_DWORD *)(*((_QWORD *)v27 + 4) + 32 * j);
                if (!(_BYTE)v105)
                {
                  if ((_QWORD)v1530)
                  {
                    v106 = 2 * v1530;
                    v107 = (char *)__dst;
                    while (*(unsigned __int16 *)v107 != (unsigned __int16)j)
                    {
                      v107 += 2;
                      v106 -= 2;
                      if (!v106)
                      {
                        v107 = (char *)__dst + 2 * v1530;
                        break;
                      }
                    }
                    if ((v105 & 0x2000000) != 0)
                      continue;
LABEL_240:
                    if ((_QWORD)v1530 == (v107 - (_BYTE *)__dst) >> 1
                      && sub_1C4AD4FB8((uint64_t)v27, j, (_QWORD *)(v1484 + 8)) == 1)
                    {
                      sub_1C49E178C(__p, v27, j, v1484, 1, 0);
                      for (; *(_DWORD *)&__p[4] != *(_DWORD *)&__p[8]; ++*(_DWORD *)&__p[4])
                        sub_1C4854E58((uint64_t)v1507, (unsigned int *)&__p[4]);
                    }
                    continue;
                  }
                  v107 = (char *)__dst;
                  if ((v105 & 0x2000000) == 0)
                    goto LABEL_240;
                }
              }
LABEL_230:
              ;
            }
          }
          if (__dst != v1531)
            free(__dst);
          v24 = v1394;
          v25 = v1417;
          v26 = v1388;
          v28 = v1411;
          v33 = v1405;
          v48 = v1402;
        }
LABEL_249:
        if ((*(_BYTE *)v27 & 4) == 0)
        {
          while ((*((_WORD *)v27 + 22) & 8) != 0)
            v27 = (llvm::MachineBasicBlock *)*((_QWORD *)v27 + 1);
        }
        v24 |= v33;
        v25 |= v1426.n128_u32[0];
        v28 |= v48;
        v27 = (llvm::MachineBasicBlock *)*((_QWORD *)v27 + 1);
        if (v27 == v26)
          goto LABEL_257;
      }
    }
    LOBYTE(v28) = 0;
LABEL_257:
    v108 = v1375[66];
    if (!v108)
      goto LABEL_264;
    v109 = *((_QWORD *)v1375 + 31);
    v110 = v108 - 1;
    v111 = (v108 - 1) & ((v1381 >> 4) ^ (v1381 >> 9));
    v112 = *(llvm::MachineBasicBlock **)(v109 + 16 * v111);
    if (v1381 != v112)
    {
      v113 = 1;
      while (v112 != (llvm::MachineBasicBlock *)-4096)
      {
        v114 = v111 + v113++;
        v111 = v114 & v110;
        v112 = *(llvm::MachineBasicBlock **)(v109 + 16 * v111);
        if (v1381 == v112)
          goto LABEL_262;
      }
LABEL_264:
      LODWORD(v115) = 0;
      goto LABEL_265;
    }
LABEL_262:
    v115 = *(_QWORD *)(v109 + 16 * v111 + 8);
    if (v115)
      LODWORD(v115) = **(_QWORD **)(v115 + 32) == (_QWORD)v1381;
LABEL_265:
    v1385 += v115;
    if (v1512)
    {
      v116 = (uint64_t *)*((_QWORD *)v1381 + 8);
      v117 = (uint64_t *)*((_QWORD *)v1381 + 9);
      while (v116 != v117)
      {
        v118 = sub_1C49EE844((uint64_t)&v1446, *v116);
        v119 = v118;
        if ((v28 & 1) != 0 || *(_DWORD *)(sub_1C49EE8D4(v118) + 4) < v1385)
          *(_BYTE *)(v119 + 16) = 1;
        ++v116;
      }
      v120 = sub_1C49EE844((uint64_t)&v1446, (uint64_t)v1381);
      *(_DWORD *)(sub_1C49EE8D4(v120) + 4) = v1385;
      FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v1381);
      if (v26 != (llvm::MachineBasicBlock *)FirstTerminator)
      {
        v122 = 0;
        while (1)
        {
          v123 = *(unsigned __int16 **)(FirstTerminator + 16);
          v124 = *v123;
          v125 = *(_WORD *)(FirstTerminator + 44);
          v126 = *((_QWORD *)v123 + 1);
          if ((v125 & 0xC) != 0 && (v125 & 4) == 0)
            break;
          if ((v126 & 0x20) != 0 || (v126 & 0x800) != 0)
            goto LABEL_280;
LABEL_282:
          if ((*(_BYTE *)FirstTerminator & 4) == 0 && (v125 & 8) != 0)
          {
            do
              FirstTerminator = *(_QWORD *)(FirstTerminator + 8);
            while ((*(_WORD *)(FirstTerminator + 44) & 8) != 0);
          }
          v122 |= v124 == 623;
          FirstTerminator = *(_QWORD *)(FirstTerminator + 8);
          if ((llvm::MachineBasicBlock *)FirstTerminator == v26)
            goto LABEL_296;
        }
        v128 = FirstTerminator;
        if ((v126 & 0x20) == 0)
        {
          while ((*(_WORD *)(v128 + 44) & 8) != 0)
          {
            v128 = *(_QWORD *)(v128 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v128 + 16) + 8) & 0x20) != 0)
              goto LABEL_280;
          }
          v129 = FirstTerminator;
          if ((v126 & 0x800) == 0)
          {
            while ((*(_WORD *)(v129 + 44) & 8) != 0)
            {
              v129 = *(_QWORD *)(v129 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v129 + 16) + 9) & 8) != 0)
                goto LABEL_280;
            }
            goto LABEL_282;
          }
        }
LABEL_280:
        if (v124 != 623)
          *(_BYTE *)(v120 + 16) = 1;
        goto LABEL_282;
      }
      v122 = 0;
LABEL_296:
      *(_BYTE *)(v120 + 17) = v122 & 1;
      if (*((_QWORD *)v1381 + 11) == *((_QWORD *)v1381 + 12) && (v122 & 1) == 0)
        *(_BYTE *)(v120 + 16) = 1;
    }
    v23 = (llvm::MachineBasicBlock **)*((_QWORD *)v1381 + 1);
  }
  while (v23 != v1380);
  if (!(v1373 & 1 | ((v25 & 1) == 0)))
  {
    sub_1C49CC7D8(v1396, (uint64_t *)&__dst);
    sub_1C49EAB08(&v1430, (uint64_t)&__dst);
    v130 = (char *)__dst;
    if ((_DWORD)v1530)
    {
      v131 = 16 * v1530;
      do
      {
        v132 = *(char **)&v130[v131 - 16];
        if (&v130[v131] != v132)
          free(v132);
        v131 -= 16;
      }
      while (v131);
      v130 = (char *)__dst;
    }
    if (v130 != (char *)&v1530 + 8)
      free(v130);
    sub_1C49CD49C((uint64_t)&v1430, &__dst);
    sub_1C49EAB08(&v1428, (uint64_t)&__dst);
    v133 = (char *)__dst;
    if ((_DWORD)v1530)
    {
      v134 = 16 * v1530;
      do
      {
        v135 = *(char **)&v133[v134 - 16];
        if (&v133[v134] != v135)
          free(v135);
        v134 -= 16;
      }
      while (v134);
      v133 = (char *)__dst;
    }
    if (v133 != (char *)&v1530 + 8)
      free(v133);
  }
  if ((v25 & 1) == 0)
    goto LABEL_1053;
  v136 = (_BYTE *)*((_QWORD *)v1396 + 2);
  if (!v136[384])
    goto LABEL_1053;
  v137 = atomic_load((unsigned __int8 *)&qword_1ED7ECB48);
  if ((v137 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7ECB48))
  {
    byte_1ED7ECB31 = 0;
    __cxa_guard_release(&qword_1ED7ECB48);
  }
  v138 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v136 + 176))(v136);
  v1433 = 0uLL;
  v1434 = 0;
  v1395 = v24;
  v1386 = (llvm::SmallPtrSetImplBase *)v138;
  if (byte_1ED7ECB31)
  {
    memset(&v1551, 0, 20);
    for (m = *((_QWORD *)v1396 + 41); (llvm::MachineBasicBlock **)m != v1380; m = *(_QWORD *)(m + 8))
    {
      for (n = *(_BYTE **)(m + 56); n != (_BYTE *)(m + 48); n = (_BYTE *)*((_QWORD *)n + 1))
      {
        v141 = sub_1C4C915C4(**((unsigned __int16 **)n + 2));
        if ((v141 & 0xFF00000000) != 0 && v141 == 63)
        {
          *(_QWORD *)__p = &__p[16];
          *(_QWORD *)&__p[16] = n;
          *(_QWORD *)&__p[8] = 0x100000001;
          __dst = n;
          *(_QWORD *)&v1530 = v1531;
          *(_QWORD *)v1531 = n;
          *((_QWORD *)&v1530 + 1) = 0x100000001;
          sub_1C614ED40((uint64_t)&v1557, (uint64_t)&v1551, (uint64_t *)&__dst, (uint64_t)&v1530);
          if ((_BYTE *)v1530 != v1531)
            free((void *)v1530);
          if (*(_BYTE **)__p != &__p[16])
            free(*(void **)__p);
        }
        if ((*n & 4) == 0)
        {
          while ((*((_WORD *)n + 22) & 8) != 0)
            n = (_BYTE *)*((_QWORD *)n + 1);
        }
      }
    }
    v142 = MEMORY[0x1CAA32FB4](0, 8);
    v1433 = *(_OWORD *)&v1551.__r_.__value_.__l.__data_;
    v1551.__r_.__value_.__r.__words[0] = 0;
    v142.n128_u64[0] = v1551.__r_.__value_.__l.__size_;
    v1426 = v142;
    v1551.__r_.__value_.__l.__size_ = 0;
    v1434 = v1551.__r_.__value_.__r.__words[2];
    MEMORY[0x1CAA32FB4](0, 8);
    goto LABEL_722;
  }
  *(_QWORD *)&v1525 = v1396;
  *((_QWORD *)&v1525 + 1) = v138;
  v143 = -1;
  v144 = (llvm::MachineBasicBlock **)((char *)v1396 + 320);
  do
  {
    v144 = (llvm::MachineBasicBlock **)v144[1];
    ++v143;
  }
  while (v144 != v1380);
  v1543 = 0u;
  memset(v1542, 0, sizeof(v1542));
  v1540 = 0;
  memset(v1539, 0, sizeof(v1539));
  v1538 = 0u;
  v1537 = 0u;
  v1536 = 0u;
  v1535 = 0u;
  v1534 = 0u;
  v1532 = 0;
  memset(&v1531[8], 0, 48);
  __dst = (char *)&v1530 + 8;
  *(_QWORD *)&v1530 = 0;
  *((_QWORD *)&v1530 + 1) = &v1531[8];
  *(_QWORD *)v1531 = 0x600000000;
  v1533 = (char *)&v1534 + 8;
  DWORD1(v1534) = 6;
  *(_QWORD *)&v1538 = v1539;
  HIDWORD(v1538) = 6;
  v1541 = &v1542[2];
  v1542[1] = 6;
  v1526 = (char *)v1528;
  v1527 = 0;
  if (v143)
  {
    *(_QWORD *)__p = 0;
    v145 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v1526, v143, 304, (unint64_t *)__p);
    v146 = 0;
    while (1)
    {
      v147 = (void **)&v145[v146];
      v148 = (void **)&v145[v146 + 16];
      *v147 = v148;
      v147[1] = 0;
      if ((_DWORD)v1530)
        sub_1C614EBE4((uint64_t)&v145[v146], (uint64_t)&__dst);
      *v148 = v147 + 4;
      v147[3] = (void *)0x600000000;
      v149 = *(_DWORD *)v1531;
      if (*(_DWORD *)v1531 && v147 != &__dst)
        break;
LABEL_348:
      v151 = &v145[v146];
      *((_DWORD *)v151 + 20) = v1532;
      v152 = (uint64_t)&v145[v146 + 104];
      *(_QWORD *)&v145[v146 + 88] = v152;
      *((_QWORD *)v151 + 12) = 0x600000000;
      v153 = v1534;
      if ((_DWORD)v1534 && v147 != &__dst)
      {
        if (v1534 < 7)
        {
          v159 = v1534;
          goto LABEL_368;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145[v146 + 88], v152, v1534, 8);
        v159 = v1534;
        if ((_DWORD)v1534)
LABEL_368:
          memcpy(*(void **)&v145[v146 + 88], v1533, 8 * v159);
        *((_DWORD *)v151 + 24) = v153;
      }
      *((_DWORD *)v151 + 38) = DWORD2(v1537);
      *((_QWORD *)v151 + 20) = v151 + 176;
      *((_QWORD *)v151 + 21) = 0x600000000;
      v154 = DWORD2(v1538);
      if (DWORD2(v1538) && v147 != &__dst)
      {
        if (DWORD2(v1538) < 7)
        {
          v160 = DWORD2(v1538);
          goto LABEL_371;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v151 + 160), (uint64_t)(v151 + 176), DWORD2(v1538), 8);
        v160 = DWORD2(v1538);
        if (DWORD2(v1538))
LABEL_371:
          memcpy(*((void **)v151 + 20), (const void *)v1538, 8 * v160);
        *((_DWORD *)v151 + 42) = v154;
      }
      v155 = &v145[v146];
      *((_DWORD *)v155 + 56) = v1540;
      v156 = (uint64_t)&v145[v146 + 248];
      *(_QWORD *)&v145[v146 + 232] = v156;
      *((_QWORD *)v155 + 30) = 0x600000000;
      v157 = v1542[0];
      if (!v1542[0] || v147 == &__dst)
        goto LABEL_351;
      if (v1542[0] < 7u)
      {
        v161 = v1542[0];
LABEL_374:
        memcpy(*(void **)&v145[v146 + 232], v1541, 8 * v161);
        goto LABEL_375;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145[v146 + 232], v156, v1542[0], 8);
      v161 = v1542[0];
      if (v1542[0])
        goto LABEL_374;
LABEL_375:
      *((_DWORD *)v155 + 60) = v157;
LABEL_351:
      *((_DWORD *)v155 + 74) = DWORD2(v1543);
      v146 += 304;
      if (304 * v143 == v146)
      {
        v162 = v1526;
        if ((_DWORD)v1527)
        {
          v1259 = 0;
          v1260 = 304 * v1527;
          do
          {
            v1261 = &v162[v1260];
            v1262 = *(char **)&v162[v1260 - 72];
            if (&v162[v1260 - 56] != v1262)
              free(v1262);
            v1263 = (char *)*((_QWORD *)v1261 - 18);
            if (v1261 - 128 != v1263)
              free(v1263);
            v1264 = &v162[v1260];
            v1265 = *(char **)&v162[v1260 - 216];
            if (&v162[v1260 - 200] != v1265)
              free(v1265);
            v1266 = (char *)*((_QWORD *)v1264 - 36);
            if (v1264 - 272 != v1266)
              free(v1266);
            v1267 = (char *)*((_QWORD *)v1261 - 38);
            if (v1264 - 288 != v1267)
              free(v1267);
            v162 -= 304;
            v1259 += 304;
          }
          while (v1260 != v1259);
          v162 = v1526;
        }
        v163 = *(_DWORD *)__p;
        if (v162 != (char *)v1528)
          free(v162);
        v1526 = v145;
        v1527 = __PAIR64__(v163, v143);
        if (v1541 != &v1542[2])
          free(v1541);
        goto LABEL_382;
      }
    }
    if (*(_DWORD *)v1531 < 7u)
    {
      v158 = *(unsigned int *)v1531;
      goto LABEL_365;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145[v146 + 16], (uint64_t)(v147 + 4), *(unsigned int *)v1531, 8);
    v158 = *(unsigned int *)v1531;
    if (*(_DWORD *)v1531)
LABEL_365:
      memcpy(*v148, *((const void **)&v1530 + 1), 8 * v158);
    *((_DWORD *)v147 + 6) = v149;
    goto LABEL_348;
  }
  LODWORD(v1527) = v143;
LABEL_382:
  if ((_BYTE *)v1538 != v1539)
    free((void *)v1538);
  if (v1533 != (char *)&v1534 + 8)
    free(v1533);
  if (*((_BYTE **)&v1530 + 1) != &v1531[8])
    free(*((void **)&v1530 + 1));
  if (__dst != (char *)&v1530 + 8)
    free(__dst);
  v1528[0] = &v1430;
  v1528[1] = &v1428;
  v1521 = &v1523;
  v1522 = 0x800000000;
  v1553 = &v1555;
  v1554 = 0x800000000;
  v164 = *(uint64_t **)(v1525 + 328);
  v1374 = (uint64_t *)(v1525 + 320);
  if (v164 == (uint64_t *)(v1525 + 320))
    goto LABEL_673;
  while (2)
  {
    v165 = (llvm::MachineBasicBlock *)(v164 + 6);
    v1382 = v164;
    v166 = v164[7];
    v1389 = (llvm::MachineBasicBlock *)(v164 + 6);
    while (2)
    {
      if ((llvm::MachineBasicBlock *)v166 != v165)
      {
        if ((*(_BYTE *)(*(_QWORD *)(v166 + 16) + 20) & 4) == 0
          || ((v167 = sub_1C4AD4D04(v166), v1397 = v167, v167 != 2) ? (v168 = v167 == 4) : (v168 = 1),
              v168 || (v1403 = *(_DWORD *)(v166 + 40)) == 0))
        {
LABEL_399:
          if ((*(_BYTE *)v166 & 4) == 0)
          {
            while ((*(_WORD *)(v166 + 44) & 8) != 0)
              v166 = *(_QWORD *)(v166 + 8);
          }
          v166 = *(_QWORD *)(v166 + 8);
          v165 = v1389;
          continue;
        }
        v169 = 0;
        v170 = &v1526[304 * *((int *)v1382 + 6)];
        v171 = (uint64_t)(v170 + 88);
        v172 = (unsigned int *)(v170 + 152);
        v1379 = (uint64_t)(v170 + 104);
        v1426.n128_u64[0] = (unint64_t)(v170 + 16);
        v1418 = (int *)(v170 + 80);
        v1406 = (llvm::MachineMemOperand *)v170;
        v1376 = v170 + 16;
        v1378 = (uint64_t)(v170 + 32);
        while (2)
        {
          if (sub_1C4AD4FB8(v166, v169, (_QWORD *)(*((_QWORD *)&v1525 + 1) + 8)) - 8 >= 0xFFFFFFFE)
          {
            if (v1397 < 2)
            {
LABEL_409:
              sub_1C49E178C(&__dst, (_QWORD *)v166, v169, *((uint64_t *)&v1525 + 1), 0, 0);
              v173 = (unint64_t)__dst;
              v174 = v1530;
              v175 = (unint64_t)__dst >> 32;
              if ((_DWORD)v1530 != HIDWORD(__dst))
              {
                v176 = *v172;
                do
                {
                  v177 = v175 >> 1;
                  if (v176 <= v175 >> 1)
                  {
                    v179 = v176 & 0x3F;
                    v180 = *(unsigned int *)(v171 + 8);
                    if (v179)
                      *(_QWORD *)(*(_QWORD *)v171 + 8 * v180 - 8) &= ~(-1 << v179);
                    v181 = v180;
                    v176 = v177 + 1;
                    *v172 = v177 + 1;
                    v182 = v177 + 64;
                    if ((_DWORD)v180 != (v177 + 64) >> 6)
                    {
                      v183 = v182 >> 6;
                      if (v180 > v183)
                      {
                        *(_DWORD *)(v171 + 8) = v183;
                        v181 = v182 >> 6;
                      }
                      else
                      {
                        v184 = v180;
                        if (v183 > *(_DWORD *)(v171 + 12))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod(v171, v1379, v183, 8);
                          v184 = *(unsigned int *)(v171 + 8);
                          v181 = *(_DWORD *)(v171 + 8);
                        }
                        if (v183 != v180)
                          bzero((void *)(*(_QWORD *)v171 + 8 * v184), 8 * (v183 - v180));
                        v181 += v183 - v180;
                        *(_DWORD *)(v171 + 8) = v181;
                        v176 = *v172;
                      }
                    }
                    v178 = *(_QWORD *)v171;
                    if ((v176 & 0x3F) != 0)
                      *(_QWORD *)(v178 + 8 * v181 - 8) &= ~(-1 << (v176 & 0x3F));
                  }
                  else
                  {
                    v178 = *(_QWORD *)v171;
                  }
                  *(_QWORD *)(v178 + ((v173 >> 36) & 0xFFFFFF8)) |= 1 << v177;
                  v173 = (v173 & 0xFFFFFFFF00000000) + 0x100000000;
                  v175 = HIDWORD(v173);
                }
                while (v174 != HIDWORD(v173));
              }
            }
            else if (v1397 == 3)
            {
              sub_1C49E178C(&__dst, (_QWORD *)v166, v169, *((uint64_t *)&v1525 + 1), 0, 0);
              v185 = (unint64_t)__dst;
              v186 = v1530;
              v187 = (unint64_t)__dst >> 32;
              v1412 = v1530;
              while (v186 != (_DWORD)v187)
              {
                v188 = v187 >> 1;
                v189 = *v172;
                if (*v172 <= v187 >> 1)
                {
                  v190 = *(unsigned int *)(v171 + 8);
                  if ((v189 & 0x3F) != 0)
                    *(_QWORD *)(*(_QWORD *)v171 + 8 * v190 - 8) &= ~(-1 << (v189 & 0x3F));
                  v191 = v190;
                  LOBYTE(v192) = v188 + 1;
                  *v172 = v188 + 1;
                  v193 = v188 + 64;
                  if ((_DWORD)v190 != (v188 + 64) >> 6)
                  {
                    v194 = v193 >> 6;
                    if (v190 > v194)
                    {
                      *(_DWORD *)(v171 + 8) = v194;
                      v191 = v193 >> 6;
                    }
                    else
                    {
                      v195 = v190;
                      if (v194 > *(_DWORD *)(v171 + 12))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod(v171, v1379, v194, 8);
                        v195 = *(unsigned int *)(v171 + 8);
                        v191 = *(_DWORD *)(v171 + 8);
                      }
                      if (v194 != v190)
                        bzero((void *)(*(_QWORD *)v171 + 8 * v195), 8 * (v194 - v190));
                      v191 += v194 - v190;
                      *(_DWORD *)(v171 + 8) = v191;
                      v192 = *v172;
                    }
                  }
                  v196 = v192 & 0x3F;
                  if (v196)
                    *(_QWORD *)(*(_QWORD *)v171 + 8 * v191 - 8) &= ~(-1 << v196);
                }
                v197 = (uint64_t *)v1426.n128_u64[0];
                if (*v1418 <= v188)
                {
                  v199 = *v1418 & 0x3F;
                  v200 = *(unsigned int *)(v1426.n128_u64[0] + 8);
                  if (v199)
                    *(_QWORD *)(*(_QWORD *)v1426.n128_u64[0] + 8 * v200 - 8) &= ~(-1 << v199);
                  v201 = v200;
                  LOBYTE(v202) = v188 + 1;
                  *v1418 = v188 + 1;
                  v203 = (v188 + 64) >> 6;
                  if ((_DWORD)v200 == (v188 + 64) >> 6)
                  {
                    v197 = (uint64_t *)v1426.n128_u64[0];
                  }
                  else if (v200 > v203)
                  {
                    v197 = (uint64_t *)v1426.n128_u64[0];
                    *(_DWORD *)(v1426.n128_u64[0] + 8) = v203;
                  }
                  else
                  {
                    v204 = v200;
                    if (v203 > *(_DWORD *)(v1426.n128_u64[0] + 12))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v1426.n128_i64[0], v1378, v203, 8);
                      v204 = *(unsigned int *)(v1426.n128_u64[0] + 8);
                      v201 = *(_DWORD *)(v1426.n128_u64[0] + 8);
                    }
                    if (v203 != v200)
                      bzero((void *)(*(_QWORD *)v1426.n128_u64[0] + 8 * v204), 8 * (v203 - v200));
                    LODWORD(v203) = v201 + v203 - v200;
                    *(_DWORD *)(v1426.n128_u64[0] + 8) = v203;
                    v202 = *v1418;
                    v197 = (uint64_t *)v1426.n128_u64[0];
                  }
                  v198 = *v197;
                  v205 = v202 & 0x3F;
                  if (v205)
                    *(_QWORD *)(v198 + 8 * v203 - 8) &= ~(-1 << v205);
                }
                else
                {
                  v198 = *(_QWORD *)v1426.n128_u64[0];
                }
                v206 = 1 << v188;
                v207 = v185 >> 39;
                if ((*(_QWORD *)(v198 + 8 * (v185 >> 39)) & (1 << v188)) == 0)
                {
                  v208 = *((unsigned int *)v1406 + 2);
                  if (v208 >= *((unsigned int *)v1406 + 3))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1406, (uint64_t)v1376, v208 + 1, 16);
                    v208 = *((unsigned int *)v1406 + 2);
                    v197 = (uint64_t *)v1426.n128_u64[0];
                  }
                  v209 = (uint64_t *)(*(_QWORD *)v1406 + 16 * v208);
                  *v209 = v166;
                  v209[1] = v188;
                  ++*((_DWORD *)v1406 + 2);
                  v198 = *v197;
                }
                *(_QWORD *)(*(_QWORD *)v171 + 8 * v207) &= ~v206;
                *(_QWORD *)(v198 + 8 * v207) |= v206;
                v185 = (v185 & 0xFFFFFFFF00000000) + 0x100000000;
                v187 = HIDWORD(v185);
                v186 = v1412;
              }
            }
            else if (v1397 == 5)
            {
              goto LABEL_409;
            }
          }
          if (++v169 == v1403)
            goto LABEL_399;
          continue;
        }
      }
      break;
    }
    v210 = v1526;
    v211 = *((_DWORD *)v1382 + 6);
    v212 = (unsigned int *)&v1526[304 * v211];
    v213 = v212 + 22;
    v214 = v212 + 58;
    v215 = v212[24];
    v216 = v212[60];
    if (v216 >= v215)
    {
      if ((_DWORD)v215)
        memmove(*(void **)v214, *(const void **)v213, 8 * v215);
LABEL_474:
      v216 = v213[2];
      LODWORD(v217) = v213[2];
    }
    else
    {
      if (v212[61] < v215)
      {
        v212[60] = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v212 + 58), (uint64_t)(v212 + 62), v215, 8);
      }
      else if ((_DWORD)v216)
      {
        memmove(*(void **)v214, *(const void **)v213, 8 * v216);
        goto LABEL_472;
      }
      v216 = 0;
LABEL_472:
      v217 = v213[2];
      if (v216 != v217)
      {
        memcpy((void *)(*(_QWORD *)v214 + 8 * v216), (const void *)(*(_QWORD *)v213 + 8 * v216), *(_QWORD *)v213 + 8 * v217 - (*(_QWORD *)v213 + 8 * v216));
        goto LABEL_474;
      }
    }
    v214[2] = v215;
    *(_DWORD *)&v210[304 * v211 + 296] = *(_DWORD *)&v210[304 * v211 + 152];
    if ((_DWORD)v217)
    {
      v218 = *(_QWORD **)v213;
      v219 = 8 * v216;
      while (!*v218)
      {
        ++v218;
        v219 -= 8;
        if (!v219)
          goto LABEL_490;
      }
      v220 = *(_QWORD *)v1528[0] + 16 * *((int *)v1382 + 6);
      v221 = *(unsigned int *)(v220 + 8);
      if ((_DWORD)v221)
      {
        v222 = *(int **)v220;
        v223 = v1522;
        v224 = 4 * v221;
        do
        {
          v225 = *v222;
          if (v223 >= HIDWORD(v1522))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1521, (uint64_t)&v1523, v223 + 1, 4);
            v223 = v1522;
          }
          *((_DWORD *)v1521 + v223) = v225;
          v223 = v1522 + 1;
          LODWORD(v1522) = v1522 + 1;
          ++v222;
          v224 -= 4;
        }
        while (v224);
      }
      v226 = v1382[11];
      v227 = v1382[12];
      if (v226 != v227)
      {
        v228 = v1522;
        do
        {
          v229 = *(_DWORD *)(*(_QWORD *)v226 + 24);
          if (v228 >= HIDWORD(v1522))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1521, (uint64_t)&v1523, v228 + 1, 4);
            v228 = v1522;
          }
          *((_DWORD *)v1521 + v228) = v229;
          v228 = v1522 + 1;
          LODWORD(v1522) = v1522 + 1;
          v226 += 8;
        }
        while (v226 != v227);
      }
    }
LABEL_490:
    v164 = (uint64_t *)v1382[1];
    if (v164 != v1374)
      continue;
    break;
  }
  if ((_DWORD)v1522)
  {
    while (1)
    {
      std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
      v230 = (char *)v1521;
      v231 = (char *)v1521 + 4 * v1522;
      v232 = (char *)v1521;
      if ((_DWORD)v1522)
      {
        v232 = (char *)v1521 - 4;
        v233 = 4 * v1522 - 4;
        while (v233)
        {
          v234 = *((_DWORD *)v232 + 1);
          v235 = *((_DWORD *)v232 + 2);
          v232 += 4;
          v233 -= 4;
          if (v234 == v235)
            goto LABEL_496;
        }
      }
      else
      {
LABEL_496:
        if (v232 != v231)
        {
          v236 = v232 + 8;
          if (v232 + 8 != v231)
          {
            v237 = *(_DWORD *)v232;
            do
            {
              v238 = v237;
              v237 = *(_DWORD *)v236;
              if (v238 != *(_DWORD *)v236)
              {
                *((_DWORD *)v232 + 1) = v237;
                v232 += 4;
              }
              v236 += 4;
            }
            while (v236 != v231);
          }
          v231 = v232 + 4;
        }
      }
      v239 = v231 - v230;
      v240 = v239 >> 2;
      LODWORD(v1522) = v239 >> 2;
      v241 = v1553;
      if (v1553 == &v1555 || v230 == (char *)&v1523)
      {
        if (HIDWORD(v1554) < v240)
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1553, (uint64_t)&v1555, (v239 >> 2), 4);
        v243 = v1554;
        if (HIDWORD(v1522) < v1554)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1521, (uint64_t)&v1523, v1554, 4);
          v243 = v1554;
        }
        v250 = v1522;
        if (v243 >= v1522)
          v240 = v1522;
        else
          v240 = v243;
        if ((_DWORD)v240)
        {
          v244 = (int *)v1553;
          v245 = (int *)v1521;
          v246 = v240;
          do
          {
            v247 = *v244;
            *v244++ = *v245;
            *v245++ = v247;
            --v246;
          }
          while (v246);
          v243 = v1554;
          v250 = v1522;
        }
        v248 = v243 - v250;
        if (v243 <= v250)
        {
          v345 = v250 - v243;
          if (v250 <= v243)
          {
            LODWORD(v240) = v243;
          }
          else
          {
            if ((_DWORD)v240 != v250)
            {
              memcpy((char *)v1553 + 4 * v243, (char *)v1521 + 4 * v240, 4 * v250 - 4 * v240);
              v243 = v1554;
            }
            LODWORD(v1522) = v240;
            v250 = v240;
            LODWORD(v1554) = v243 + v345;
            LODWORD(v240) = v243 + v345;
          }
        }
        else
        {
          if ((_DWORD)v240 != v243)
          {
            memcpy((char *)v1521 + 4 * v250, (char *)v1553 + 4 * v240, 4 * v243 - 4 * v240);
            v250 = v1522;
          }
          v250 += v248;
          LODWORD(v1522) = v250;
          LODWORD(v1554) = v240;
        }
      }
      else
      {
        v1553 = v230;
        v1521 = v241;
        v249 = v1554;
        v1554 = __PAIR64__(HIDWORD(v1522), v240);
        v1522 = v249;
        v250 = v249;
      }
      if ((_DWORD)v240)
        break;
LABEL_666:
      LODWORD(v1554) = 0;
      if (!v250)
        goto LABEL_673;
    }
    v251 = (unsigned int *)v1553;
    v1407 = (llvm::MachineMemOperand *)((char *)v1553 + 4 * v240);
    while (2)
    {
      v1419 = v251;
      v252 = *v251;
      v253 = *(_QWORD *)(*(_QWORD *)(v1525 + 104) + 8 * v252);
      sub_1C49E1284((uint64_t)&v1557, (uint64_t)&v1525, v253);
      v1413 = v253;
      v254 = *(_QWORD *)(v253 + 64);
      v255 = *(_QWORD *)(v253 + 72);
      v1551.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1551.__r_.__value_.__r.__words[2];
      v1551.__r_.__value_.__l.__size_ = 0x600000000;
      v1552 = 0;
      if (v254 == v255)
      {
        v256 = 0;
      }
      else
      {
        v256 = 0;
        v257 = 0;
        do
        {
          v258 = &v1526[304 * *(int *)(*(_QWORD *)v254 + 24)];
          v259 = *((_DWORD *)v258 + 74);
          if (v257 < v259)
          {
            v264 = v257 & 0x3F;
            v265 = v256;
            if (v264)
              *(_QWORD *)(v1551.__r_.__value_.__r.__words[0] + 8 * v256 - 8) &= ~(-1 << v264);
            v1552 = v259;
            v266 = v259 + 63;
            if (v256 != (v259 + 63) >> 6)
            {
              v267 = v266 >> 6;
              if (v256 > v267)
              {
                LODWORD(v1551.__r_.__value_.__r.__words[1]) = v266 >> 6;
                v256 = v266 >> 6;
              }
              else
              {
                v268 = v256;
                if (v267 > HIDWORD(v1551.__r_.__value_.__r.__words[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1551, (uint64_t)&v1551.__r_.__value_.__r.__words[2], v267, 8);
                  v268 = LODWORD(v1551.__r_.__value_.__r.__words[1]);
                  v256 = v1551.__r_.__value_.__r.__words[1];
                }
                if (v267 != v265)
                  bzero((void *)(v1551.__r_.__value_.__r.__words[0] + 8 * v268), 8 * (v267 - v265));
                v256 += v267 - v265;
                LODWORD(v1551.__r_.__value_.__r.__words[1]) = v256;
                v259 = v1552;
              }
            }
            if ((v259 & 0x3F) != 0)
              *(_QWORD *)(v1551.__r_.__value_.__r.__words[0] + 8 * v256 - 8) &= ~(-1 << (v259 & 0x3F));
            v257 = v259;
          }
          v260 = *((unsigned int *)v258 + 60);
          if ((_DWORD)v260)
          {
            v261 = (uint64_t *)*((_QWORD *)v258 + 29);
            v262 = (_QWORD *)v1551.__r_.__value_.__r.__words[0];
            do
            {
              v263 = *v261++;
              *v262++ |= v263;
              --v260;
            }
            while (v260);
          }
          v254 += 8;
        }
        while (v254 != v255);
      }
      if (LODWORD(v1557.__r_.__value_.__r.__words[1]) >= v256)
        v269 = v256;
      else
        v269 = LODWORD(v1557.__r_.__value_.__r.__words[1]);
      if ((_DWORD)v269)
      {
        v270 = (uint64_t *)v1557.__r_.__value_.__r.__words[0];
        v271 = (_QWORD *)v1551.__r_.__value_.__r.__words[0];
        do
        {
          v272 = *v270++;
          *v271++ &= ~v272;
          --v269;
        }
        while (v269);
      }
      v273 = v1526;
      v274 = &v1526[304 * v252];
      *(_QWORD *)&v1530 = 0x600000000;
      v277 = *((_DWORD *)v274 + 42);
      v275 = (unsigned int *)(v274 + 168);
      v276 = v277;
      v278 = (std::string *)(v275 - 2);
      __dst = (char *)&v1530 + 8;
      if (v277 && &__dst != (void **)(v275 - 2))
      {
        v279 = (char *)&v1530 + 8;
        v280 = v276;
        if (v276 < 7)
          goto LABEL_558;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)&v1530 + 8, v276, 8);
        v280 = *v275;
        if ((_DWORD)v280)
        {
          v279 = (char *)__dst;
LABEL_558:
          memcpy(v279, v278->__r_.__value_.__l.__data_, 8 * v280);
        }
        LODWORD(v1530) = v276;
      }
      v281 = &v273[304 * v252];
      v282 = v281 + 224;
      *(_DWORD *)&v1531[40] = *((_DWORD *)v281 + 56);
      *(_QWORD *)&__p[8] = 0x600000000;
      v285 = *((_DWORD *)v281 + 60);
      v284 = (int *)(v281 + 240);
      v283 = v285;
      v286 = (std::string *)(v284 - 2);
      *(_QWORD *)__p = &__p[16];
      if (v285 && __p != (_BYTE *)(v284 - 2))
      {
        v287 = &__p[16];
        v288 = v283;
        if (v283 < 7)
          goto LABEL_565;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)&__p[16], v283, 8);
        v288 = *v284;
        if ((_DWORD)v288)
        {
          v287 = *(_BYTE **)__p;
LABEL_565:
          memcpy(v287, v286->__r_.__value_.__l.__data_, 8 * v288);
        }
        *(_DWORD *)&__p[8] = v283;
      }
      v289 = &v273[304 * v252];
      v1438 = *((_DWORD *)v289 + 74);
      if (v278 == &v1557)
        goto LABEL_579;
      v290 = LODWORD(v1557.__r_.__value_.__r.__words[1]);
      v291 = *v275;
      if (v291 >= LODWORD(v1557.__r_.__value_.__r.__words[1]))
      {
        if (LODWORD(v1557.__r_.__value_.__r.__words[1]))
          memmove(v278->__r_.__value_.__l.__data_, v1557.__r_.__value_.__l.__data_, 8 * LODWORD(v1557.__r_.__value_.__r.__words[1]));
        goto LABEL_578;
      }
      if (*(_DWORD *)&v273[304 * v252 + 172] < LODWORD(v1557.__r_.__value_.__r.__words[1]))
      {
        *v275 = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v275 - 2), (uint64_t)&v273[304 * v252 + 176], v290, 8);
      }
      else if ((_DWORD)v291)
      {
        memmove(v278->__r_.__value_.__l.__data_, v1557.__r_.__value_.__l.__data_, 8 * v291);
LABEL_576:
        if (v291 != LODWORD(v1557.__r_.__value_.__r.__words[1]))
          memcpy((void *)(v278->__r_.__value_.__r.__words[0] + 8 * v291), (const void *)(v1557.__r_.__value_.__r.__words[0] + 8 * v291), 8 * LODWORD(v1557.__r_.__value_.__r.__words[1]) - 8 * v291);
LABEL_578:
        *v275 = v290;
LABEL_579:
        *v282 = v1563;
        if (v286 == &v1551)
          goto LABEL_591;
        v292 = LODWORD(v1551.__r_.__value_.__r.__words[1]);
        v293 = *v284;
        if (v293 >= LODWORD(v1551.__r_.__value_.__r.__words[1]))
        {
          if (LODWORD(v1551.__r_.__value_.__r.__words[1]))
            memmove(v286->__r_.__value_.__l.__data_, v1551.__r_.__value_.__l.__data_, 8 * LODWORD(v1551.__r_.__value_.__r.__words[1]));
          goto LABEL_590;
        }
        if (*(_DWORD *)&v273[304 * v252 + 244] < LODWORD(v1551.__r_.__value_.__r.__words[1]))
        {
          *v284 = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v284 - 2), (uint64_t)&v273[304 * v252 + 248], v292, 8);
        }
        else if ((_DWORD)v293)
        {
          memmove(v286->__r_.__value_.__l.__data_, v1551.__r_.__value_.__l.__data_, 8 * v293);
LABEL_588:
          if (v293 != LODWORD(v1551.__r_.__value_.__r.__words[1]))
            memcpy((void *)(v286->__r_.__value_.__r.__words[0] + 8 * v293), (const void *)(v1551.__r_.__value_.__r.__words[0] + 8 * v293), 8 * LODWORD(v1551.__r_.__value_.__r.__words[1]) - 8 * v293);
LABEL_590:
          *v284 = v292;
LABEL_591:
          v294 = (unsigned int *)(v289 + 296);
          v295 = v1552;
          *((_DWORD *)v289 + 74) = v1552;
          v298 = (unint64_t)&v273[304 * v252];
          v296 = (uint64_t **)(v298 + 16);
          LODWORD(v297) = *v275;
          LODWORD(v298) = *(_DWORD *)(v298 + 24);
          if (v298 >= *v275)
            v297 = v297;
          else
            v297 = v298;
          if ((_DWORD)v297)
          {
            v299 = *v296;
            v300 = (_QWORD *)v278->__r_.__value_.__r.__words[0];
            do
            {
              v301 = *v299++;
              *v300++ &= ~v301;
              --v297;
            }
            while (v297);
          }
          v302 = *v284;
          if (v298 >= v302)
            v298 = v302;
          else
            v298 = v298;
          if ((_DWORD)v298)
          {
            v303 = *v296;
            v304 = (_QWORD *)v286->__r_.__value_.__r.__words[0];
            do
            {
              v305 = *v303++;
              *v304++ &= ~v305;
              --v298;
            }
            while (v298);
          }
          v306 = &v273[304 * v252];
          v307 = *((_DWORD *)v306 + 38);
          if (v295 < v307)
          {
            v340 = v295 & 0x3F;
            if (v340)
              *(_QWORD *)(v286->__r_.__value_.__r.__words[0] + 8 * v302 - 8) &= ~(-1 << v340);
            *v294 = v307;
            v341 = v307 + 63;
            if ((_DWORD)v302 != (v307 + 63) >> 6)
            {
              v342 = v341 >> 6;
              if (v302 > v342)
              {
                *v284 = v342;
                LODWORD(v302) = v341 >> 6;
              }
              else
              {
                v343 = v302;
                v344 = v302;
                if (v342 > *(_DWORD *)&v273[304 * v252 + 244])
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v284 - 2), (uint64_t)&v273[304 * v252 + 248], v342, 8);
                  v343 = *v284;
                  v344 = *v284;
                }
                if (v342 != v302)
                {
                  v1383 = v344;
                  bzero((void *)(v286->__r_.__value_.__r.__words[0] + 8 * v343), 8 * (v342 - v302));
                  v344 = v1383;
                }
                LODWORD(v302) = v344 + v342 - v302;
                *v284 = v302;
                v307 = *v294;
              }
            }
            if ((v307 & 0x3F) != 0)
              *(_QWORD *)(v286->__r_.__value_.__r.__words[0] + 8 * v302 - 8) &= ~(-1 << (v307 & 0x3F));
          }
          v308 = *(unsigned int *)&v273[304 * v252 + 96];
          if ((_DWORD)v308)
          {
            v309 = (uint64_t *)*((_QWORD *)v306 + 11);
            v310 = (_QWORD *)v286->__r_.__value_.__r.__words[0];
            do
            {
              v311 = *v309++;
              *v310++ |= v311;
              --v308;
            }
            while (v308);
          }
          v312 = *v275;
          if (v1530 >= *v275)
            v313 = v312;
          else
            v313 = v1530;
          if ((_DWORD)v313)
          {
            v314 = (uint64_t *)v278->__r_.__value_.__r.__words[0];
            v315 = (uint64_t *)__dst;
            v316 = v313;
            while (1)
            {
              v318 = *v314++;
              v317 = v318;
              v319 = *v315++;
              if ((v317 & ~v319) != 0)
                break;
              if (!--v316)
                goto LABEL_614;
            }
LABEL_631:
            v328 = 1;
          }
          else
          {
LABEL_614:
            if (v312 > v1530)
            {
              while (!*(_QWORD *)(v278->__r_.__value_.__r.__words[0] + 8 * v313))
              {
                LODWORD(v313) = v313 + 1;
                if (v312 == (_DWORD)v313)
                  goto LABEL_617;
              }
              goto LABEL_631;
            }
LABEL_617:
            if (*(_DWORD *)&__p[8] >= v302)
              v320 = v302;
            else
              v320 = *(unsigned int *)&__p[8];
            if ((_DWORD)v320)
            {
              v321 = (uint64_t *)v286->__r_.__value_.__r.__words[0];
              v322 = *(uint64_t **)__p;
              v323 = v320;
              do
              {
                v325 = *v321++;
                v324 = v325;
                v326 = *v322++;
                if ((v324 & ~v326) != 0)
                  goto LABEL_631;
              }
              while (--v323);
            }
            if (v302 <= *(_DWORD *)&__p[8])
            {
              v328 = 0;
            }
            else
            {
              do
              {
                v327 = *(_QWORD *)(v286->__r_.__value_.__r.__words[0] + 8 * v320);
                v328 = v327 != 0;
                if (v327)
                  v329 = 1;
                else
                  v329 = (_DWORD)v302 - 1 == (_DWORD)v320;
                LODWORD(v320) = v320 + 1;
              }
              while (!v329);
            }
          }
          if (*(_BYTE **)__p != &__p[16])
            free(*(void **)__p);
          if (__dst != (char *)&v1530 + 8)
            free(__dst);
          if (v328)
          {
            v330 = *(_QWORD *)v1528[0] + 16 * *(int *)(v1413 + 24);
            v331 = *(unsigned int *)(v330 + 8);
            if ((_DWORD)v331)
            {
              v332 = *(int **)v330;
              v333 = v1522;
              v334 = 4 * v331;
              do
              {
                v335 = *v332;
                if (v333 >= HIDWORD(v1522))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1521, (uint64_t)&v1523, v333 + 1, 4);
                  v333 = v1522;
                }
                *((_DWORD *)v1521 + v333) = v335;
                v333 = v1522 + 1;
                LODWORD(v1522) = v1522 + 1;
                ++v332;
                v334 -= 4;
              }
              while (v334);
            }
            v336 = *(_QWORD *)(v1413 + 88);
            v337 = *(_QWORD *)(v1413 + 96);
            if (v336 != v337)
            {
              v338 = v1522;
              do
              {
                v339 = *(_DWORD *)(*(_QWORD *)v336 + 24);
                if (v338 >= HIDWORD(v1522))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1521, (uint64_t)&v1523, v338 + 1, 4);
                  v338 = v1522;
                }
                *((_DWORD *)v1521 + v338) = v339;
                v338 = v1522 + 1;
                LODWORD(v1522) = v1522 + 1;
                v336 += 8;
              }
              while (v336 != v337);
            }
          }
          if ((std::string::size_type *)v1551.__r_.__value_.__l.__data_ != &v1551.__r_.__value_.__r.__words[2])
            free(v1551.__r_.__value_.__l.__data_);
          if ((std::string::size_type *)v1557.__r_.__value_.__l.__data_ != &v1557.__r_.__value_.__r.__words[2])
            free(v1557.__r_.__value_.__l.__data_);
          v251 = v1419 + 1;
          if (v1419 + 1 == (unsigned int *)v1407)
          {
            v250 = v1522;
            goto LABEL_666;
          }
          continue;
        }
        v293 = 0;
        goto LABEL_588;
      }
      break;
    }
    v291 = 0;
    goto LABEL_576;
  }
LABEL_673:
  memset(__p, 0, 20);
  v346 = v1525 + 320;
  v347 = *(_QWORD *)(v1525 + 328);
  if (v347 != (_QWORD)v1525 + 320)
  {
    do
    {
      v348 = &v1526[304 * *(int *)(v347 + 24)];
      sub_1C49E1284((uint64_t)&__dst, (uint64_t)&v1525, v347);
      if (*((_DWORD *)v348 + 6) >= v1530)
        v349 = v1530;
      else
        v349 = *((_DWORD *)v348 + 6);
      v350 = (char *)__dst;
      if (v349)
      {
        v351 = 0;
        v352 = 8 * v349;
        while ((*(_QWORD *)(*((_QWORD *)v348 + 2) + v351) & *(_QWORD *)((_BYTE *)__dst + v351)) == 0)
        {
          v351 += 8;
          if (v352 == v351)
            goto LABEL_693;
        }
        v353 = *((unsigned int *)v348 + 2);
        if ((_DWORD)v353)
        {
          v354 = *(_QWORD *)v348;
          v355 = 16 * v353;
          do
          {
            v356 = *(_DWORD *)(v354 + 8);
            if (*(_DWORD *)&v1531[40] > v356 && ((*((_QWORD *)__dst + (v356 >> 6)) >> v356) & 1) != 0)
            {
              v1551.__r_.__value_.__r.__words[0] = *(_QWORD *)v354;
              v357 = v1551.__r_.__value_.__r.__words[0];
              v1557.__r_.__value_.__r.__words[0] = 0;
              v358 = sub_1C49EEE4C(*(uint64_t *)__p, *(int *)&__p[16], (uint64_t)v1551.__r_.__value_.__l.__data_, &v1557);
              v359 = v1557.__r_.__value_.__r.__words[0];
              if ((v358 & 1) != 0)
              {
                v363 = (_DWORD *)(v1557.__r_.__value_.__r.__words[0] + 16);
                v361 = *(unsigned int *)(v1557.__r_.__value_.__r.__words[0] + 16);
                v362 = (_QWORD *)(v1557.__r_.__value_.__r.__words[0] + 8);
                v364 = *(_QWORD *)v354;
                if (v361 >= *(unsigned int *)(v1557.__r_.__value_.__r.__words[0] + 20))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v1557.__r_.__value_.__r.__words[0] + 8, v1557.__r_.__value_.__r.__words[0] + 24, v361 + 1, 8);
                  v361 = *(unsigned int *)(v359 + 16);
                }
              }
              else
              {
                v360 = sub_1C49EEEE0((uint64_t)__p, (uint64_t *)&v1551, v1557.__r_.__value_.__l.__data_);
                v361 = 0;
                *v360 = v357;
                v360[1] = v360 + 3;
                v362 = v360 + 1;
                v360[2] = 0x100000000;
                v363 = v360 + 2;
                v364 = *(_QWORD *)v354;
              }
              *(_QWORD *)(*v362 + 8 * v361) = v364;
              ++*v363;
            }
            v354 += 16;
            v355 -= 16;
          }
          while (v355);
          v350 = (char *)__dst;
        }
      }
LABEL_693:
      if (v350 != (char *)&v1530 + 8)
        free(v350);
      v347 = *(_QWORD *)(v347 + 8);
    }
    while (v347 != v346);
  }
  if (v1553 != &v1555)
    free(v1553);
  LOBYTE(v24) = v1395;
  if (v1521 != &v1523)
    free(v1521);
  v365 = v1433;
  if (v1434)
  {
    v366 = 32 * v1434;
    v367 = (_QWORD *)(v1433 + 24);
    do
    {
      if ((*(v367 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v368 = (_QWORD *)*(v367 - 2);
        if (v367 != v368)
          free(v368);
      }
      v367 += 4;
      v366 -= 32;
    }
    while (v366);
  }
  v369 = MEMORY[0x1CAA32FB4](v365, 8);
  v1433 = *(_OWORD *)__p;
  v369.n128_u64[0] = *(_QWORD *)&__p[8];
  v1426 = v369;
  *(_OWORD *)__p = 0uLL;
  v1434 = *(_DWORD *)&__p[16];
  MEMORY[0x1CAA32FB4](0, 8);
  v370 = v1526;
  if ((_DWORD)v1527)
  {
    v371 = 0;
    v372 = 304 * v1527;
    do
    {
      v373 = &v370[v372];
      v374 = *(char **)&v370[v372 - 72];
      if (&v370[v372 - 56] != v374)
        free(v374);
      v375 = (char *)*((_QWORD *)v373 - 18);
      if (v373 - 128 != v375)
        free(v375);
      v376 = &v370[v372];
      v377 = *(char **)&v370[v372 - 216];
      if (&v370[v372 - 200] != v377)
        free(v377);
      v378 = (char *)*((_QWORD *)v376 - 36);
      if (v376 - 272 != v378)
        free(v378);
      v379 = (char *)*((_QWORD *)v373 - 38);
      if (v376 - 288 != v379)
        free(v379);
      v370 -= 304;
      v371 += 304;
    }
    while (v372 != v371);
    v370 = v1526;
  }
  if (v370 != (char *)v1528)
    free(v370);
LABEL_722:
  if (byte_1ED7ED140)
  {
    v1229 = atomic_load((unsigned __int8 *)&qword_1ED7ECB50);
    if ((v1229 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7ECB50))
    {
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE4AB8], &stru_1EF8EB0A0, &dword_1C475E000);
      __cxa_guard_release(&qword_1ED7ECB50);
    }
    std::mutex::lock(&stru_1EF8EB0A0);
    v1231 = llvm::dbgs(v1230);
    v1232 = (_BYTE *)*((_QWORD *)v1231 + 4);
    if (*((_BYTE **)v1231 + 3) == v1232)
    {
      v1231 = llvm::raw_ostream::write(v1231, "[", 1uLL);
    }
    else
    {
      *v1232 = 91;
      ++*((_QWORD *)v1231 + 4);
    }
    v1233 = *(_QWORD *)(*(_QWORD *)v1396 + 40);
    v1236 = *(const char **)(v1233 + 168);
    v1234 = v1233 + 168;
    v1235 = v1236;
    v1237 = *(_BYTE *)(v1234 + 23);
    if (v1237 >= 0)
      v1238 = (const char *)v1234;
    else
      v1238 = v1235;
    v1239 = *(_QWORD *)(v1234 + 8);
    if (v1237 >= 0)
      v1240 = v1237 & 0x7F;
    else
      v1240 = v1239;
    v1241 = llvm::raw_ostream::write(v1231, v1238, v1240);
    v1242 = (_WORD *)*((_QWORD *)v1241 + 4);
    if (*((_QWORD *)v1241 + 3) - (_QWORD)v1242 > 1uLL)
    {
      *v1242 = 2653;
      *((_QWORD *)v1241 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v1241, "]\n", 2uLL);
    }
    sub_1C49CC7D8(v1396, (uint64_t *)&__dst);
    v1244 = llvm::dbgs(v1243);
    sub_1C49CD5AC(&__dst, (uint64_t)v1396, v1244);
    v1246 = (char *)__dst;
    if ((_DWORD)v1530)
    {
      v1247 = 16 * v1530;
      do
      {
        v1245 = *(char **)&v1246[v1247 - 16];
        if (&v1246[v1247] != v1245)
          free(v1245);
        v1247 -= 16;
      }
      while (v1247);
      v1246 = (char *)__dst;
    }
    if (v1246 != (char *)&v1530 + 8)
      free(v1246);
    v1248 = llvm::dbgs((llvm *)v1245);
    v1249 = (void *)*((_QWORD *)v1248 + 4);
    if (*((_QWORD *)v1248 + 3) - (_QWORD)v1249 > 0x3DuLL)
    {
      qmemcpy(v1249, "*** GIN-782-Extended :: Hazard Reachability Analysis Results:\n", 62);
      *((_QWORD *)v1248 + 4) += 62;
    }
    else
    {
      v1248 = llvm::raw_ostream::write(v1248, "*** GIN-782-Extended :: Hazard Reachability Analysis Results:\n", 0x3EuLL);
    }
    v1250 = DWORD2(v1433);
    v1251 = llvm::dbgs(v1248);
    v1253 = (_BYTE *)*((_QWORD *)v1251 + 3);
    v1252 = (_BYTE *)*((_QWORD *)v1251 + 4);
    if (!v1250)
    {
      if ((unint64_t)(v1253 - v1252) > 0x7A)
      {
        qmemcpy(v1252, "- Nothing to do: no atomicdev.wrtn (gatomic.rtrn) instruction will see incoming RLD or BYP stk hazards even at SIMD-scope\n\n", 123);
        *((_QWORD *)v1251 + 4) += 123;
      }
      else
      {
        llvm::raw_ostream::write(v1251, "- Nothing to do: no atomicdev.wrtn (gatomic.rtrn) instruction will see incoming RLD or BYP stk hazards even at SIMD-scope\n\n", 0x7BuLL);
      }
LABEL_2370:
      std::mutex::unlock(&stru_1EF8EB0A0);
      if (!v1250)
        goto LABEL_1046;
LABEL_724:
      *(_QWORD *)&v1530 = 0;
      __dst = 0;
      DWORD2(v1530) = 0;
      *(_QWORD *)v1531 = &v1531[16];
      *(_QWORD *)&v1531[8] = 0x600000000;
      LODWORD(v1533) = 0;
      LODWORD(v1534) = 32;
      *((_QWORD *)&v1534 + 1) = v1386;
      *(_QWORD *)&v1535 = &v1536;
      *((_QWORD *)&v1535 + 1) = 0;
      LODWORD(v1536) = 0;
      v380 = *((_QWORD *)v1396 + 41);
      if ((llvm::MachineBasicBlock **)v380 != v1380)
      {
        v1420 = v1434;
        v1414 = v1434 - 1;
        v1408 = (llvm::MachineMemOperand *)v1433;
        do
        {
          v381 = v380 + 48;
          v1404 = v380;
          v382 = *(_QWORD *)(v380 + 56);
          v1426.n128_u64[0] = v380 + 48;
          while (v382 != v381)
          {
            if (v1420)
            {
              v383 = ((v382 >> 4) ^ (v382 >> 9)) & v1414;
              v384 = *((_QWORD *)v1408 + 4 * v383);
              if (v382 == v384)
              {
                v385 = 1;
              }
              else
              {
                v420 = 1;
                do
                {
                  v385 = v384 != -4096;
                  if (v384 == -4096)
                    break;
                  v421 = v383 + v420++;
                  v383 = v421 & v1414;
                  v384 = *((_QWORD *)v1408 + 4 * v383);
                }
                while (v382 != v384);
              }
            }
            else
            {
              v385 = 0;
            }
            if ((*(_BYTE *)(*(_QWORD *)(v382 + 16) + 20) & 4) != 0)
            {
              v386 = *(_DWORD *)(v382 + 40);
              if (v386)
              {
                v387 = 0;
                for (ii = 0; ii != v386; ++ii)
                {
                  v389 = sub_1C4AD4FB8(v382, ii, (_QWORD *)(*((_QWORD *)&v1534 + 1) + 8));
                  v390 = v389 == 3;
                  if (v389 == 1)
                  {
                    sub_1C49E178C(__p, (_QWORD *)v382, ii, *((uint64_t *)&v1534 + 1), 0, 0);
                    v391 = *(_QWORD *)__p;
                    v392 = *(_DWORD *)&__p[8];
                    LODWORD(v393) = *(_DWORD *)&__p[4];
                    if (*(_DWORD *)&__p[8] != *(_DWORD *)&__p[4])
                    {
                      v394 = v1533;
                      do
                      {
                        if (v394 <= v393)
                        {
                          v396 = v394 & 0x3F;
                          v397 = (llvm::MachineBasicBlock *)*(unsigned int *)&v1531[8];
                          if (v396)
                            *(_QWORD *)(*(_QWORD *)v1531 + 8 * *(unsigned int *)&v1531[8] - 8) &= ~(-1 << v396);
                          v398 = v397;
                          v394 = v393 + 1;
                          LODWORD(v1533) = v393 + 1;
                          v399 = v393 + 64;
                          if ((_DWORD)v397 != (v393 + 64) >> 6)
                          {
                            v400 = v399 >> 6;
                            if (v397 > v400)
                            {
                              *(_DWORD *)&v1531[8] = v399 >> 6;
                              v398 = v399 >> 6;
                            }
                            else
                            {
                              v401 = v397;
                              if (v400 > *(_DWORD *)&v1531[12])
                              {
                                v1399 = (llvm::SmallPtrSetImplBase *)(v399 >> 6);
                                v1391 = v397;
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1531, (uint64_t)&v1531[16], v400, 8);
                                v400 = (unint64_t)v1399;
                                v397 = v1391;
                                v401 = (llvm::MachineBasicBlock *)*(unsigned int *)&v1531[8];
                                v398 = *(_DWORD *)&v1531[8];
                              }
                              if ((llvm::MachineBasicBlock *)v400 != v397)
                              {
                                v1384 = v398;
                                v1390 = (int)v397;
                                v1398 = v400;
                                bzero((void *)(*(_QWORD *)v1531 + 8 * (_QWORD)v401), 8 * (v400 - (_QWORD)v397));
                                LODWORD(v400) = v1398;
                                LODWORD(v397) = v1390;
                                v398 = v1384;
                              }
                              v398 += v400 - (_DWORD)v397;
                              *(_DWORD *)&v1531[8] = v398;
                              v394 = v1533;
                            }
                          }
                          v395 = *(_QWORD *)v1531;
                          if ((v394 & 0x3F) != 0)
                            *(_QWORD *)(*(_QWORD *)v1531 + 8 * v398 - 8) &= ~(-1 << (v394 & 0x3F));
                        }
                        else
                        {
                          v395 = *(_QWORD *)v1531;
                        }
                        *(_QWORD *)(v395 + ((v391 >> 35) & 0x1FFFFFF8)) &= ~(1 << v393);
                        v391 = (v391 & 0xFFFFFFFF00000000) + 0x100000000;
                        v393 = HIDWORD(v391);
                      }
                      while (v392 != HIDWORD(v391));
                    }
                  }
                  v387 |= v390;
                }
                if ((v387 & 1) != 0)
                {
                  v402 = sub_1C4C915C4(**(unsigned __int16 **)(v382 + 16));
                  if ((v402 & 0xFF00000000) == 0)
                    goto LABEL_2178;
                  if ((_DWORD)v402 != 147)
                  {
                    sub_1C49E178C(__p, (_QWORD *)v382, 0, *((uint64_t *)&v1534 + 1), 0, 0);
                    v403 = *(_QWORD *)__p;
                    v404 = *(_DWORD *)&__p[8];
                    LODWORD(v405) = *(_DWORD *)&__p[4];
                    if (*(_DWORD *)&__p[8] != *(_DWORD *)&__p[4])
                    {
                      v406 = v1533;
                      do
                      {
                        if (v406 <= v405)
                        {
                          v408 = v406 & 0x3F;
                          v409 = *(unsigned int *)&v1531[8];
                          if (v408)
                            *(_QWORD *)(*(_QWORD *)v1531 + 8 * *(unsigned int *)&v1531[8] - 8) &= ~(-1 << v408);
                          v410 = v409;
                          v406 = v405 + 1;
                          LODWORD(v1533) = v405 + 1;
                          v411 = v405 + 64;
                          if ((_DWORD)v409 != (v405 + 64) >> 6)
                          {
                            v412 = v411 >> 6;
                            if (v409 > v412)
                            {
                              *(_DWORD *)&v1531[8] = v411 >> 6;
                              v410 = v411 >> 6;
                            }
                            else
                            {
                              v413 = v409;
                              if (v412 > *(_DWORD *)&v1531[12])
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1531, (uint64_t)&v1531[16], v412, 8);
                                v413 = *(unsigned int *)&v1531[8];
                                v410 = *(_DWORD *)&v1531[8];
                              }
                              if (v412 != v409)
                                bzero((void *)(*(_QWORD *)v1531 + 8 * v413), 8 * (v412 - v409));
                              v410 += v412 - v409;
                              *(_DWORD *)&v1531[8] = v410;
                              v406 = v1533;
                            }
                          }
                          v407 = *(_QWORD *)v1531;
                          if ((v406 & 0x3F) != 0)
                            *(_QWORD *)(*(_QWORD *)v1531 + 8 * v410 - 8) &= ~(-1 << (v406 & 0x3F));
                        }
                        else
                        {
                          v407 = *(_QWORD *)v1531;
                        }
                        *(_QWORD *)(v407 + ((v403 >> 35) & 0x1FFFFFF8)) |= 1 << v405;
                        v403 = (v403 & 0xFFFFFFFF00000000) + 0x100000000;
                        v405 = HIDWORD(v403);
                      }
                      while (v404 != HIDWORD(v403));
                    }
                  }
                }
              }
              if (v385)
              {
                v414 = ((_DWORD)v1533 + 1) >> 1;
                v1557.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1557.__r_.__value_.__r.__words[2];
                v1557.__r_.__value_.__l.__size_ = 0x600000000;
                sub_1C4765AA4((char *)&v1557, (v414 + 63) >> 6, 0);
                LODWORD(v1563) = v414;
                for (jj = sub_1C476B7EC((uint64_t)v1531); jj != -1; jj = sub_1C476BA0C(v1531, jj + 1, (int)v1533, 1u))
                  *(_QWORD *)(v1557.__r_.__value_.__r.__words[0] + (((unint64_t)jj >> 4) & 0xFFFFFF8)) |= 1 << ((unint64_t)jj >> 1);
                *(_QWORD *)__p = v382;
                *(_QWORD *)&__p[8] = &v1436;
                *(_QWORD *)&__p[16] = 0x600000000;
                v416 = v1557.__r_.__value_.__r.__words[1];
                if (LODWORD(v1557.__r_.__value_.__r.__words[1]))
                {
                  if ((std::string::size_type *)v1557.__r_.__value_.__l.__data_ == &v1557.__r_.__value_.__r.__words[2])
                  {
                    if (LODWORD(v1557.__r_.__value_.__r.__words[1]) < 7)
                    {
                      v417 = &v1436;
                      v418 = &v1557.__r_.__value_.__s.__data_[16];
                      v419 = LODWORD(v1557.__r_.__value_.__r.__words[1]);
                      goto LABEL_790;
                    }
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p[8], (uint64_t)&v1436, LODWORD(v1557.__r_.__value_.__r.__words[1]), 8);
                    v419 = LODWORD(v1557.__r_.__value_.__r.__words[1]);
                    if (LODWORD(v1557.__r_.__value_.__r.__words[1]))
                    {
                      v418 = (std::string::value_type *)v1557.__r_.__value_.__r.__words[0];
                      v417 = *(uint64_t **)&__p[8];
LABEL_790:
                      memcpy(v417, v418, 8 * v419);
                    }
                    *(_DWORD *)&__p[16] = v416;
                  }
                  else
                  {
                    *(_OWORD *)&__p[8] = *(_OWORD *)&v1557.__r_.__value_.__l.__data_;
                    v1557.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1557.__r_.__value_.__r.__words[2];
                    HIDWORD(v1557.__r_.__value_.__r.__words[1]) = 0;
                  }
                  LODWORD(v1557.__r_.__value_.__r.__words[1]) = 0;
                }
                v1439 = v1563;
                sub_1C49F6DEC((uint64_t)&v1551, (uint64_t)&__dst, (uint64_t *)__p, (uint64_t)&__p[8]);
                if (*(uint64_t **)&__p[8] != &v1436)
                  free(*(void **)&__p[8]);
                if ((std::string::size_type *)v1557.__r_.__value_.__l.__data_ != &v1557.__r_.__value_.__r.__words[2])
                  free(v1557.__r_.__value_.__l.__data_);
              }
            }
            if ((*(_BYTE *)v382 & 4) != 0)
            {
              LOBYTE(v24) = v1395;
            }
            else
            {
              for (LOBYTE(v24) = v1395; (*(_WORD *)(v382 + 44) & 8) != 0; v382 = *(_QWORD *)(v382 + 8))
                ;
            }
            v382 = *(_QWORD *)(v382 + 8);
            v381 = v1426.n128_u64[0];
          }
          v380 = *(_QWORD *)(v1404 + 8);
        }
        while ((llvm::MachineBasicBlock **)v380 != v1380);
      }
      (*(void (**)(std::string *__return_ptr, llvm::SmallPtrSetImplBase *, llvm::MachineFunction *))(*(_QWORD *)v1386 + 88))(&v1551, v1386, v1396);
      v422 = *((_DWORD *)v1386 + 4);
      v1521 = &v1523;
      v1522 = 0x600000000;
      sub_1C4765AA4((char *)&v1521, (v422 + 63) >> 6, 0);
      v1524 = v422;
      v423 = (_WORD *)(*(uint64_t (**)(llvm::SmallPtrSetImplBase *, llvm::MachineFunction *))(*(_QWORD *)v1386 + 32))(v1386, v1396);
      if (v423)
      {
        v424 = (unsigned __int16)*v423;
        if (*v423)
        {
          v425 = v1521;
          v426 = 1;
          do
          {
            v425[v424 >> 6] |= 1 << v424;
            v424 = (unsigned __int16)v423[v426++];
          }
          while (v424);
        }
      }
      v1392 = *v1380;
      if (*v1380 == (llvm::MachineBasicBlock *)v1380)
      {
LABEL_1029:
        if (v1521 != &v1523)
          free(v1521);
        if ((std::string::size_type *)v1551.__r_.__value_.__l.__data_ != &v1551.__r_.__value_.__r.__words[2])
          free(v1551.__r_.__value_.__l.__data_);
        if ((__int128 *)v1535 != &v1536)
          free((void *)v1535);
        if (*(_BYTE **)v1531 != &v1531[16])
          free(*(void **)v1531);
        v584 = __dst;
        if (DWORD2(v1530))
        {
          v585 = (char *)__dst + 24;
          v586 = 80 * DWORD2(v1530);
          do
          {
            v587 = *((_QWORD *)v585 - 3);
            if (v587 != -4096 && v587 != -8192)
            {
              v588 = (char *)*((_QWORD *)v585 - 2);
              if (v585 != v588)
                free(v588);
            }
            v585 += 80;
            v586 -= 80;
          }
          while (v586);
          v584 = __dst;
        }
        MEMORY[0x1CAA32FB4](v584, 8);
        goto LABEL_1046;
      }
      v427 = &v1436;
LABEL_811:
      *(_QWORD *)&__p[16] = 0x600000000;
      *(_QWORD *)__p = v1386;
      *(_QWORD *)&__p[8] = &v1436;
      v428 = *((_DWORD *)v1386 + 11);
      v1439 = v428;
      v429 = v428 + 63;
      if ((v428 + 63) < 0x40)
      {
        v433 = 0;
      }
      else
      {
        v430 = v429 >> 6;
        if (v429 >= 0x1C0)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p[8], (uint64_t)&v1436, v429 >> 6, 8);
          v427 = *(uint64_t **)&__p[8];
          v431 = *(unsigned int *)&__p[16];
          LOBYTE(v428) = v1439;
          v432 = *(_DWORD *)&__p[16];
        }
        else
        {
          v431 = 0;
          v432 = 0;
        }
        bzero(&v427[v431], 8 * v430);
        v433 = v432 + v430;
        *(_DWORD *)&__p[16] = v432 + v430;
      }
      if ((v428 & 0x3F) != 0)
        v427[v433 - 1] &= ~(-1 << (v428 & 0x3F));
      llvm::LiveRegUnits::addLiveOuts((llvm::LiveRegUnits *)__p, v1392);
      v434 = *((_QWORD *)v1392 + 6) & 0xFFFFFFFFFFFFFFF8;
      if (!v434 || (*(_BYTE *)v434 & 4) == 0)
      {
        while ((*(_WORD *)(v434 + 44) & 4) != 0)
          v434 = *(_QWORD *)v434 & 0xFFFFFFFFFFFFFFF8;
      }
      while (1)
      {
        if ((llvm::MachineBasicBlock *)v434 == (llvm::MachineBasicBlock *)((char *)v1392 + 48))
        {
          v427 = &v1436;
          if (*(uint64_t **)&__p[8] != &v1436)
            free(*(void **)&__p[8]);
          v1392 = *(llvm::MachineBasicBlock **)v1392;
          if (v1392 == (llvm::MachineBasicBlock *)v1380)
            goto LABEL_1029;
          goto LABEL_811;
        }
        v435 = *(unsigned __int16 **)(v434 + 16);
        v436 = *v435;
        if ((v436 - 13) >= 5)
        {
          v437 = sub_1C4C915C4(v436);
          if ((v437 & 0xFF00000000) != 0 && v437 == 19)
          {
            v518 = *(int **)(v434 + 32);
            NumExplicitOperands = llvm::MachineInstr::getNumExplicitOperands(v434);
            if (NumExplicitOperands)
            {
              v520 = &v518[8 * NumExplicitOperands];
              v521 = *(_QWORD *)&__p[8];
              if (*(_QWORD *)__p)
                v522 = (_QWORD *)(*(_QWORD *)__p + 8);
              else
                v522 = 0;
              do
              {
                v523 = *v518;
                if ((*v518 & 0x800000FF) == 0)
                {
                  if ((v523 & 0x1000000) != 0)
                  {
                    v532 = (unsigned __int16 *)(v522[6]
                                              + (((unint64_t)*(unsigned int *)(*v522
                                                                                    + 24 * (unsigned __int16)v518[1]
                                                                                    + 16) >> 3) & 0x1FFFFFFE));
                    v534 = *v532;
                    v533 = v532 + 1;
                    v535 = v534 + (*(_DWORD *)(*v522 + 24 * (unsigned __int16)v518[1] + 16) & 0xF) * v518[1];
                    do
                    {
                      *(_QWORD *)(v521 + 8 * ((unsigned __int16)v535 >> 6)) &= ~(1 << v535);
                      v536 = *v533++;
                      v535 += v536;
                    }
                    while (v536);
                  }
                  else
                  {
                    v524 = v523 & 0x30000000;
                    v525 = v523 & 0x10FFF00;
                    if (v524)
                      v526 = 1;
                    else
                      v526 = v525 == 0x1000000;
                    if (!v526)
                    {
                      v527 = (unsigned __int16 *)(v522[6]
                                                + (((unint64_t)*(unsigned int *)(*v522
                                                                                      + 24 * (unsigned __int16)v518[1]
                                                                                      + 16) >> 3) & 0x1FFFFFFE));
                      v529 = *v527;
                      v528 = v527 + 1;
                      v530 = v529 + (*(_DWORD *)(*v522 + 24 * (unsigned __int16)v518[1] + 16) & 0xF) * v518[1];
                      do
                      {
                        *(_QWORD *)(v521 + 8 * ((unsigned __int16)v530 >> 6)) |= 1 << v530;
                        v531 = *v528++;
                        v530 += v531;
                      }
                      while (v531);
                    }
                  }
                }
                v518 += 8;
              }
              while (v518 != v520);
            }
          }
          else
          {
            llvm::LiveRegUnits::stepBackward((llvm::LiveRegUnits *)__p, (const llvm::MachineInstr *)v434);
            v435 = *(unsigned __int16 **)(v434 + 16);
          }
          if ((v435[10] & 4) != 0)
          {
            v439 = *(_DWORD *)(v434 + 40);
            if (v439)
            {
              for (kk = 0; kk != v439; ++kk)
              {
                if (sub_1C4AD4FB8(v434, kk, (_QWORD *)(*((_QWORD *)&v1534 + 1) + 8)) == 1)
                {
                  sub_1C49E178C(&v1557, (_QWORD *)v434, kk, *((uint64_t *)&v1534 + 1), 0, 0);
                  v441 = v1557.__r_.__value_.__r.__words[0];
                  v442 = v1557.__r_.__value_.__r.__words[1];
                  for (LODWORD(v443) = HIDWORD(v1557.__r_.__value_.__r.__words[0]);
                        v442 != HIDWORD(v441);
                        LOBYTE(v24) = v1395)
                  {
                    v444 = v443 >> 1;
                    v24 = v1536;
                    if (DWORD2(v1535) <= v443 >> 1)
                      sub_1C49F6D78((uint64_t)&v1535, v444 + 1);
                    *(_DWORD *)(v1535 + 4 * v444) = v24;
                    v441 = (v441 & 0xFFFFFFFF00000000) + 0x100000000;
                    v443 = HIDWORD(v441);
                  }
                }
              }
            }
            LODWORD(v1536) = v1536 + 1;
          }
          if (v1434)
          {
            v445 = (v1434 - 1) & ((v434 >> 4) ^ (v434 >> 9));
            v446 = (uint64_t *)(v1433 + 32 * v445);
            v447 = *v446;
            if (v434 == *v446)
            {
LABEL_843:
              if ((_DWORD)v445 == v1434)
                goto LABEL_923;
              v448 = 0;
              *(_QWORD *)&v1525 = &v1526;
              v449 = &word_1C69FF39A;
              *((_QWORD *)&v1525 + 1) = 0;
              v450 = v1386;
              do
              {
                v451 = (unsigned __int16)*v449;
                if (((1 << v451) & *(_QWORD *)(v1551.__r_.__value_.__r.__words[0] + 8 * (v451 >> 6))) == 0
                  && (*((_QWORD *)v1521 + (v451 >> 6)) & (1 << v451)) == 0)
                {
                  v452 = *(unsigned int *)(*((_QWORD *)v450 + 1) + 24 * (unsigned __int16)*v449 + 16);
                  v453 = v452 & 0xF;
                  v454 = (_WORD *)(*((_QWORD *)v450 + 7) + ((v452 >> 3) & 0x1FFFFFFE));
                  v456 = *v454;
                  v455 = v454 + 1;
                  v457 = v456 + v453 * v451;
                  while (((*(_QWORD *)(*(_QWORD *)&__p[8] + 8 * (v457 >> 6)) >> v457) & 1) != 0)
                  {
                    v458 = *v455++;
                    v457 += v458;
                    if (!v458)
                    {
                      v459 = (unint64_t)*(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)&v1534 + 1) + 112)
                                                                   + 2 * v451) >> 1;
                      sub_1C49E11A4((uint64_t)&v1557, (uint64_t)__dst, SDWORD2(v1530), v434);
                      if (v1563 <= v459)
                        v460 = 0;
                      else
                        v460 = (*(_QWORD *)(v1557.__r_.__value_.__r.__words[0] + 8 * (v459 >> 6)) >> v459) & 1;
                      v461 = v1536;
                      if (DWORD2(v1535) <= v459)
                        sub_1C49F6D78((uint64_t)&v1535, (v459 + 1));
                      v462 = *(_DWORD *)(v1535 + 4 * v459);
                      v463 = v1534;
                      if ((std::string::size_type *)v1557.__r_.__value_.__l.__data_ != &v1557.__r_.__value_.__r.__words[2])
                        free(v1557.__r_.__value_.__l.__data_);
                      v464 = DWORD2(v1525);
                      if (DWORD2(v1525) >= (unint64_t)HIDWORD(v1525))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1525, (uint64_t)&v1526, DWORD2(v1525) + 1, 16);
                        v464 = DWORD2(v1525);
                      }
                      v465 = (v461 - v462);
                      v466 = (unint64_t *)(v1525 + 16 * v464);
                      *v466 = v460 | ((unint64_t)((v463 - (_DWORD)v465) & ~((v463 - (int)v465) >> 31)) << 32);
                      v466[1] = v465 | (v451 << 32);
                      v448 = ++DWORD2(v1525);
                      v450 = v1386;
                      break;
                    }
                  }
                }
                ++v449;
              }
              while (v449 != (__int16 *)&unk_1C69FF49A);
              if (v448)
              {
                v467 = (_DWORD *)v1525;
                if (v448 != 1)
                {
                  v482 = v448;
                  v483 = (_DWORD *)(v1525 + 16);
                  v484 = 16 * v482 - 16;
                  do
                  {
                    v485 = *(unsigned __int8 *)v483;
                    v486 = *(unsigned __int8 *)v467;
                    if (v485 < v486
                      || v486 >= v485
                      && ((v487 = v483[1], v488 = v467[1], v487 < v488)
                       || v488 >= v487
                       && ((v489 = v483[2], v490 = v467[2], v489 < v490) || v490 >= v489 && v483[3] < v467[3])))
                    {
                      v467 = v483;
                    }
                    v483 += 4;
                    v484 -= 16;
                  }
                  while (v484);
                }
                LODWORD(v468) = v467[3];
              }
              else
              {
                if (*(_QWORD *)__p)
                  v469 = (_QWORD *)(*(_QWORD *)__p + 8);
                else
                  v469 = 0;
                v470 = &word_1C69FF39A;
                while (1)
                {
                  v468 = (unsigned __int16)*v470;
                  if (((*(_QWORD *)(v1551.__r_.__value_.__r.__words[0] + ((v468 >> 3) & 0x1FF8)) >> v468) & 1) == 0)
                    break;
LABEL_870:
                  if (++v470 == (__int16 *)&unk_1C69FF49A)
                  {
                    v555 = &word_1C69FF39A;
                    do
                    {
                      v468 = (unsigned __int16)*v555;
                      if (((*(_QWORD *)(v1551.__r_.__value_.__r.__words[0] + ((v468 >> 3) & 0x1FF8)) >> v468) & 1) == 0)
                      {
                        v556 = *(unsigned int *)(*v469 + 24 * (unsigned __int16)*v555 + 16);
                        v557 = v556 & 0xF;
                        v558 = (_WORD *)(v469[6] + ((v556 >> 3) & 0x1FFFFFFE));
                        v560 = *v558;
                        v559 = v558 + 1;
                        v561 = v560 + v557 * v468;
                        while (((*(_QWORD *)(*(_QWORD *)&__p[8] + 8 * (v561 >> 6)) >> v561) & 1) == 0)
                        {
                          v562 = *v559++;
                          v561 += v562;
                          if (!v562)
                          {
                            if (*v555)
                            {
                              v563 = *(_QWORD *)(v434 + 24);
                              v1563 = 0;
                              v564 = *(_QWORD *)(v563 + 32);
                              v1557.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E816EC08;
                              v1557.__r_.__value_.__l.__size_ = v564;
                              v1558 = *(_QWORD *)(v564 + 40);
                              v1557.__r_.__value_.__r.__words[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v564 + 16) + 104))(*(_QWORD *)(v564 + 16));
                              v1559 = 0;
                              v565 = *(_QWORD *)(v434 + 24);
                              v1561 = (unint64_t *)v434;
                              v1562 = 0;
                              v1560 = v565;
                              if ((unsigned __int8 **)(v434 + 56) != &v1559)
                              {
                                v1559 = *(unsigned __int8 **)(v434 + 56);
                                if (v1559)
                                  llvm::MetadataTracking::track((uint64_t)&v1559, v1559, 2);
                              }
                              v567 = sub_1C55437B8(&v1557, 0xAu);
                              v568 = (unint64_t *)v566;
                              v569 = v1561;
                              v570 = *(_QWORD *)(v1560 + 40);
                              *(_QWORD *)(v566 + 24) = v570;
                              v571 = *(_QWORD *)(v570 + 32);
                              v572 = *(unsigned int *)(v566 + 40);
                              if ((_DWORD)v572)
                              {
                                v575 = *(_QWORD *)(v566 + 32);
                                v576 = *(_QWORD *)(v571 + 40);
                                v577 = 32 * v572;
                                do
                                {
                                  if (!*(_BYTE *)v575)
                                  {
                                    v578 = *(unsigned int *)(v575 + 4);
                                    if ((int)v578 >= 0)
                                      v579 = (uint64_t *)(*(_QWORD *)(v576 + 272) + 8 * v578);
                                    else
                                      v579 = (uint64_t *)(*(_QWORD *)(v576 + 24) + 16 * (v578 & 0x7FFFFFFF) + 8);
                                    v580 = *v579;
                                    if (*v579)
                                    {
                                      v581 = *(_QWORD *)(v580 + 16);
                                      *(_QWORD *)(v580 + 16) = v575;
                                      *(_QWORD *)(v575 + 16) = v581;
                                      if ((*(_BYTE *)(v575 + 3) & 1) != 0)
                                      {
                                        *(_QWORD *)(v575 + 24) = v580;
                                      }
                                      else
                                      {
                                        *(_QWORD *)(v575 + 24) = 0;
                                        v579 = (uint64_t *)(v581 + 24);
                                      }
                                    }
                                    else
                                    {
                                      *(_QWORD *)(v575 + 16) = v575;
                                      *(_QWORD *)(v575 + 24) = 0;
                                    }
                                    *v579 = v575;
                                  }
                                  v575 += 32;
                                  v577 -= 32;
                                }
                                while (v577);
                              }
                              v573 = *(_QWORD *)(v571 + 728);
                              if (v573)
                                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v573 + 24))(v573, v566);
                              v574 = *v569 & 0xFFFFFFFFFFFFFFF8;
                              *v568 = v574 | *v568 & 7;
                              v568[1] = (unint64_t)v569;
                              *(_QWORD *)(v574 + 8) = v568;
                              *v569 = *v569 & 7 | (unint64_t)v568;
                              if (v1562)
                                (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v1562 + 24))(v1562, v568);
                              v1554 = 0;
                              v1555 = 0;
                              v1556 = 0;
                              HIDWORD(v1553) = v468;
                              LODWORD(v1553) = 0x1000000;
                              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v568, v567, (const llvm::MachineOperand *)&v1553);
                              v1557.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E816EC08;
                              if (v1559)
                                llvm::MetadataTracking::untrack((uint64_t)&v1559, v1559);
                            }
                            else
                            {
                              LODWORD(v468) = 103;
                            }
                            goto LABEL_876;
                          }
                        }
                      }
                      ++v555;
                      LODWORD(v468) = 103;
                    }
                    while (v555 != (__int16 *)&unk_1C69FF49A);
                    goto LABEL_876;
                  }
                }
                v471 = *(unsigned int *)(*v469 + 24 * (unsigned __int16)*v470 + 16);
                v472 = v471 & 0xF;
                v473 = (_WORD *)(v469[6] + ((v471 >> 3) & 0x1FFFFFFE));
                v475 = *v473;
                v474 = v473 + 1;
                v476 = v475 + v472 * v468;
                while (((*(_QWORD *)(*(_QWORD *)&__p[8] + 8 * (v476 >> 6)) >> v476) & 1) == 0)
                {
                  v477 = *v474++;
                  v476 += v477;
                  if (!v477)
                    goto LABEL_870;
                }
              }
LABEL_876:
              if ((char **)v1525 != &v1526)
                free((void *)v1525);
              v478 = (uint64_t *)v446[1];
              *(_QWORD *)&v1525 = &v1526;
              *((_QWORD *)&v1525 + 1) = 0x100000000;
              if (&v1525 == (__int128 *)(v446 + 1))
              {
                v479 = 0;
              }
              else
              {
                v479 = *((_DWORD *)v446 + 4);
                if (v479)
                {
                  if (v478 == v446 + 3)
                  {
                    if (v479 == 1)
                    {
                      v480 = &v1526;
                      v481 = 1;
                      goto LABEL_883;
                    }
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1525, (uint64_t)&v1526, *((unsigned int *)v446 + 4), 8);
                    v481 = *((unsigned int *)v446 + 4);
                    v478 = (uint64_t *)v446[1];
                    if ((_DWORD)v481)
                    {
                      v480 = (char **)v1525;
LABEL_883:
                      memcpy(v480, v478, 8 * v481);
                      v478 = (uint64_t *)v446[1];
                    }
                    DWORD2(v1525) = v479;
                  }
                  else
                  {
                    *(_QWORD *)&v1525 = v478;
                    *((_QWORD *)&v1525 + 1) = __PAIR64__(*((_DWORD *)v446 + 5), v479);
                    v446[1] = (uint64_t)(v446 + 3);
                    *((_DWORD *)v446 + 5) = 0;
                    v478 = v446 + 3;
                  }
                  *((_DWORD *)v446 + 4) = 0;
                }
              }
              if (v478 != v446 + 3)
              {
                free(v478);
                v479 = DWORD2(v1525);
              }
              *v446 = -8192;
              *((int32x2_t *)&v1433 + 1) = vadd_s32(*(int32x2_t *)((char *)&v1433 + 8), (int32x2_t)0x1FFFFFFFFLL);
              v1432 = 0;
              v491 = *(_QWORD *)(v1525 + 8 * v479 - 8);
              DWORD2(v1525) = v479 - 1;
              v1432 = v491;
              v492 = *(_QWORD *)(v491 + 32);
              v493 = *(_QWORD *)(v492 + 16);
              v494 = *(_QWORD *)(v492 + 48);
              v495 = *(_QWORD *)(v491 + 48);
              if ((v495 & 7) != 0)
              {
                v496 = *(__int128 **)((v495 & 0xFFFFFFFFFFFFFFF8) + 8);
              }
              else
              {
                v496 = (__int128 *)(v495 & 0xFFFFFFFFFFFFFFF8);
                *(_QWORD *)(v491 + 48) = v495 & 0xFFFFFFFFFFFFFFF8;
              }
              MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand((uint64_t)v1396, v496, 1);
              v497 = *(_QWORD *)(v434 + 24);
              v1563 = 0;
              v498 = *(_QWORD *)(v497 + 32);
              v1557.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E816EC08;
              v1557.__r_.__value_.__l.__size_ = v498;
              v1558 = *(_QWORD *)(v498 + 40);
              v1557.__r_.__value_.__r.__words[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v498 + 16) + 104))(*(_QWORD *)(v498 + 16));
              v1559 = 0;
              v499 = *(_QWORD *)(v434 + 24);
              v1561 = (unint64_t *)v434;
              v1562 = 0;
              v1560 = v499;
              if ((unsigned __int8 **)(v434 + 56) != &v1559)
              {
                v1559 = *(unsigned __int8 **)(v434 + 56);
                if (v1559)
                  llvm::MetadataTracking::track((uint64_t)&v1559, v1559, 2);
              }
              v501 = sub_1C55437B8(&v1557, 0x231u);
              v502 = v500;
              v503 = (uint64_t *)v1561;
              v504 = *(_QWORD *)(v1560 + 40);
              *(_QWORD *)(v500 + 24) = v504;
              v505 = *(_QWORD *)(v504 + 32);
              v506 = *(unsigned int *)(v500 + 40);
              if ((_DWORD)v506)
              {
                v541 = *(_QWORD *)(v500 + 32);
                v542 = *(_QWORD *)(v505 + 40);
                v543 = 32 * v506;
                do
                {
                  if (!*(_BYTE *)v541)
                  {
                    v544 = *(unsigned int *)(v541 + 4);
                    if ((int)v544 >= 0)
                      v545 = (uint64_t *)(*(_QWORD *)(v542 + 272) + 8 * v544);
                    else
                      v545 = (uint64_t *)(*(_QWORD *)(v542 + 24) + 16 * (v544 & 0x7FFFFFFF) + 8);
                    v546 = *v545;
                    if (*v545)
                    {
                      v547 = *(_QWORD *)(v546 + 16);
                      *(_QWORD *)(v546 + 16) = v541;
                      *(_QWORD *)(v541 + 16) = v547;
                      if ((*(_BYTE *)(v541 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v541 + 24) = v546;
                      }
                      else
                      {
                        *(_QWORD *)(v541 + 24) = 0;
                        v545 = (uint64_t *)(v547 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v541 + 16) = v541;
                      *(_QWORD *)(v541 + 24) = 0;
                    }
                    *v545 = v541;
                  }
                  v541 += 32;
                  v543 -= 32;
                }
                while (v543);
              }
              v507 = *(_QWORD *)(v505 + 728);
              if (v507)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v507 + 24))(v507, v500);
              v508 = *v503 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v502 = v508 | *(_QWORD *)v502 & 7;
              *(_QWORD *)(v502 + 8) = v503;
              *(_QWORD *)(v508 + 8) = v502;
              *v503 = *v503 & 7 | v502;
              if (v1562)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1562 + 24))(v1562, v502);
              LODWORD(v1553) = 1;
              v1554 = 0;
              v1555 = v493;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v502, v501, (const llvm::MachineOperand *)&v1553);
              LODWORD(v1553) = 1;
              v1554 = 0;
              v1555 = v494;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v502, v501, (const llvm::MachineOperand *)&v1553);
              LODWORD(v1553) = 1;
              v1554 = 0;
              v1555 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v502, v501, (const llvm::MachineOperand *)&v1553);
              v1554 = 0;
              HIDWORD(v1553) = v468;
              LODWORD(v1553) = 0;
              v1555 = 0;
              v1556 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v502, v501, (const llvm::MachineOperand *)&v1553);
              LODWORD(v1553) = 1;
              v1554 = 0;
              v1555 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v502, v501, (const llvm::MachineOperand *)&v1553);
              llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v502, v501, (llvm::MachineMemOperand *)v496);
              v510 = sub_1C55437B8(&v1557, 0x1A43u);
              v511 = (unint64_t *)v509;
              v512 = v1561;
              v513 = *(_QWORD *)(v1560 + 40);
              *(_QWORD *)(v509 + 24) = v513;
              v514 = *(_QWORD *)(v513 + 32);
              v515 = *(unsigned int *)(v509 + 40);
              if ((_DWORD)v515)
              {
                v548 = *(_QWORD *)(v509 + 32);
                v549 = *(_QWORD *)(v514 + 40);
                v550 = 32 * v515;
                do
                {
                  if (!*(_BYTE *)v548)
                  {
                    v551 = *(unsigned int *)(v548 + 4);
                    if ((int)v551 >= 0)
                      v552 = (uint64_t *)(*(_QWORD *)(v549 + 272) + 8 * v551);
                    else
                      v552 = (uint64_t *)(*(_QWORD *)(v549 + 24) + 16 * (v551 & 0x7FFFFFFF) + 8);
                    v553 = *v552;
                    if (*v552)
                    {
                      v554 = *(_QWORD *)(v553 + 16);
                      *(_QWORD *)(v553 + 16) = v548;
                      *(_QWORD *)(v548 + 16) = v554;
                      if ((*(_BYTE *)(v548 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v548 + 24) = v553;
                      }
                      else
                      {
                        *(_QWORD *)(v548 + 24) = 0;
                        v552 = (uint64_t *)(v554 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v548 + 16) = v548;
                      *(_QWORD *)(v548 + 24) = 0;
                    }
                    *v552 = v548;
                  }
                  v548 += 32;
                  v550 -= 32;
                }
                while (v550);
              }
              v516 = *(_QWORD *)(v514 + 728);
              if (v516)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v516 + 24))(v516, v509);
              v517 = *v512 & 0xFFFFFFFFFFFFFFF8;
              *v511 = v517 | *v511 & 7;
              v511[1] = (unint64_t)v512;
              *(_QWORD *)(v517 + 8) = v511;
              *v512 = *v512 & 7 | (unint64_t)v511;
              if (v1562)
                (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v1562 + 24))(v1562, v511);
              v1554 = 0;
              v1555 = 0;
              v1556 = 0;
              HIDWORD(v1553) = v468;
              LODWORD(v1553) = 0x1000000;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v511, v510, (const llvm::MachineOperand *)&v1553);
              LODWORD(v1553) = 1;
              v1554 = 0;
              v1555 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v511, v510, (const llvm::MachineOperand *)&v1553);
              LODWORD(v1553) = 1;
              v1554 = 0;
              v1555 = v493;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v511, v510, (const llvm::MachineOperand *)&v1553);
              LODWORD(v1553) = 1;
              v1554 = 0;
              v1555 = v494;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v511, v510, (const llvm::MachineOperand *)&v1553);
              LODWORD(v1553) = 1;
              v1554 = 0;
              v1555 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v511, v510, (const llvm::MachineOperand *)&v1553);
              llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v511, v510, MachineMemOperand);
              v1557.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E816EC08;
              if (v1559)
                llvm::MetadataTracking::untrack((uint64_t)&v1559, v1559);
              LOBYTE(v24) = v1395;
              if (v434 == v1432)
                sub_1C49EEB5C((uint64_t)&v1440, &v1432);
              if (!DWORD2(v1525))
              {
LABEL_921:
                if ((char **)v1525 != &v1526)
                  free((void *)v1525);
                goto LABEL_923;
              }
              sub_1C614E950((uint64_t)&__dst, v502, v434);
              v1557.__r_.__value_.__r.__words[0] = v502;
              v1557.__r_.__value_.__l.__size_ = (std::string::size_type)&v1558;
              v1557.__r_.__value_.__r.__words[2] = 0x100000000;
              v537 = DWORD2(v1525);
              if (DWORD2(v1525))
              {
                if ((char **)v1525 == &v1526)
                {
                  if (DWORD2(v1525) < 2)
                  {
                    size = &v1558;
                    v539 = &v1526;
                    v540 = DWORD2(v1525);
                    goto LABEL_950;
                  }
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1557.__r_.__value_.__l.__size_, (uint64_t)&v1558, DWORD2(v1525), 8);
                  v540 = DWORD2(v1525);
                  if (DWORD2(v1525))
                  {
                    v539 = (char **)v1525;
                    size = (uint64_t *)v1557.__r_.__value_.__l.__size_;
LABEL_950:
                    memcpy(size, v539, 8 * v540);
                  }
                  LODWORD(v1557.__r_.__value_.__r.__words[2]) = v537;
                }
                else
                {
                  *(_OWORD *)&v1557.__r_.__value_.__r.__words[1] = v1525;
                  *(_QWORD *)&v1525 = &v1526;
                  HIDWORD(v1525) = 0;
                }
                DWORD2(v1525) = 0;
              }
              sub_1C614ED40((uint64_t)&v1553, (uint64_t)&v1433, (uint64_t *)&v1557, (uint64_t)&v1557.__r_.__value_.__l.__size_);
              if ((uint64_t *)v1557.__r_.__value_.__l.__size_ != &v1558)
                free((void *)v1557.__r_.__value_.__l.__size_);
              goto LABEL_921;
            }
            v582 = 1;
            while (v447 != -4096)
            {
              v583 = v445 + v582++;
              v445 = v583 & (v1434 - 1);
              v447 = *(_QWORD *)(v1433 + 32 * v445);
              if (v434 == v447)
              {
                v446 = (uint64_t *)(v1433 + 32 * v445);
                goto LABEL_843;
              }
            }
          }
        }
LABEL_923:
        v434 = *(_QWORD *)v434 & 0xFFFFFFFFFFFFFFF8;
        if (!v434 || (*(_BYTE *)v434 & 4) == 0)
        {
          while ((*(_WORD *)(v434 + 44) & 4) != 0)
            v434 = *(_QWORD *)v434 & 0xFFFFFFFFFFFFFFF8;
        }
      }
    }
    if (v1253 == v1252)
    {
      llvm::raw_ostream::write(v1251, "\n", 1uLL);
    }
    else
    {
      *v1252 = 10;
      ++*((_QWORD *)v1251 + 4);
    }
    v1553 = &v1555;
    v1554 = 0;
    memset(__p, 0, 20);
    memset(&v1557, 0, 20);
    v1254 = v1433;
    v1255 = (uint64_t *)(v1433 + 32 * v1434);
    v1256 = 32 * v1434;
    v1257 = (uint64_t *)v1433;
    v1426.n128_u32[0] = v1434;
    if (v1434)
    {
      v1258 = 32 * v1434;
      v1257 = (uint64_t *)v1433;
      while ((*v1257 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v1257 += 4;
        v1258 -= 32;
        if (!v1258)
        {
LABEL_2202:
          v1257 = v1255;
          break;
        }
      }
    }
    while (v1257 != v1255)
    {
      v1268 = *(_QWORD *)(*v1257 + 24);
      v1551.__r_.__value_.__r.__words[0] = v1268;
      sub_1C614F72C((uint64_t)__p, &v1551, (uint64_t)&__dst);
      if (BYTE8(v1530))
      {
        v1269 = (_BYTE *)(v1268 + 48);
        v1270 = *(_BYTE **)(v1268 + 56);
        if (v1270 != v1269)
        {
          v1271 = 0;
          do
          {
            __dst = v1270;
            *((_DWORD *)sub_1C6144C70((uint64_t)&v1557, (uint64_t *)&__dst) + 2) = v1271;
            if (!v1270 || (*v1270 & 4) == 0)
            {
              while ((*((_WORD *)v1270 + 22) & 8) != 0)
                v1270 = (_BYTE *)*((_QWORD *)v1270 + 1);
            }
            ++v1271;
            v1270 = (_BYTE *)*((_QWORD *)v1270 + 1);
          }
          while (v1270 != v1269);
        }
      }
      v1272 = v1257 + 4;
      v1257 = v1255;
      LOBYTE(v24) = v1395;
      if (v1272 != v1255)
      {
        v1257 = v1272;
        while ((*v1257 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v1257 += 4;
          if (v1257 == v1255)
            goto LABEL_2202;
        }
      }
    }
    v1273 = (uint64_t *)v1254;
    if (v1426.n128_u32[0])
    {
      v1273 = (uint64_t *)v1254;
      while ((*v1273 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v1273 += 4;
        v1256 -= 32;
        if (!v1256)
        {
          v1273 = v1255;
          break;
        }
      }
    }
    v1274 = v1554;
LABEL_2224:
    while (v1273 != v1255)
    {
      v1275 = *v1273;
      if (v1274 >= HIDWORD(v1554))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1553, (uint64_t)&v1555, v1274 + 1, 8);
        v1274 = v1554;
      }
      *((_QWORD *)v1553 + v1274) = v1275;
      v1274 = v1554 + 1;
      LODWORD(v1554) = v1554 + 1;
      v1276 = v1273 + 4;
      v1273 = v1255;
      if (v1276 != v1255)
      {
        v1273 = v1276;
        while ((*v1273 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v1273 += 4;
          if (v1273 == v1255)
          {
            v1273 = v1255;
            goto LABEL_2224;
          }
        }
      }
    }
    __dst = &v1557;
    v1277 = 126 - 2 * __clz(v1274);
    if (v1274)
      v1278 = v1277;
    else
      v1278 = 0;
    sub_1C49F71BC((uint64_t)v1553, (uint64_t *)v1553 + v1274, (uint64_t *)&__dst, v1278, 1);
    MEMORY[0x1CAA32FB4](v1557.__r_.__value_.__r.__words[0], 8);
    MEMORY[0x1CAA32FB4](*(_QWORD *)__p, 8);
    v1279 = (char *)v1553;
    if (!(_DWORD)v1554)
    {
LABEL_2368:
      if (v1279 != (char *)&v1555)
        free(v1279);
      goto LABEL_2370;
    }
    v1416 = (char *)v1553 + 8 * v1554;
    v1425 = v1254;
    while (1)
    {
      v1280 = *(llvm::MachineInstr **)v1279;
      v1281 = *(_QWORD *)(*(_QWORD *)v1279 + 24);
      sub_1C614EA34(&v1521, v1254, v1426.n128_i32[0], *(_QWORD *)v1279);
      v1283 = llvm::dbgs(v1282);
      v1284 = *((_QWORD *)v1283 + 4);
      if ((unint64_t)(*((_QWORD *)v1283 + 3) - v1284) > 8)
      {
        *(_BYTE *)(v1284 + 8) = 32;
        *(_QWORD *)v1284 = *(_QWORD *)"- Insert ";
        *((_QWORD *)v1283 + 4) += 9;
      }
      else
      {
        v1283 = llvm::raw_ostream::write(v1283, "- Insert ", 9uLL);
      }
      if ((_DWORD)v1522 != 1)
      {
        v1285 = llvm::dbgs(v1283);
        v1283 = sub_1C5E21910(v1285, v1522, 0, 0, 0);
        v1286 = (void *)*((_QWORD *)v1285 + 4);
        if (*((_QWORD *)v1285 + 3) - (_QWORD)v1286 > 0x15uLL)
        {
          qmemcpy(v1286, " per-stk instances of ", 22);
          *((_QWORD *)v1285 + 4) += 22;
        }
        else
        {
          v1283 = llvm::raw_ostream::write(v1285, " per-stk instances of ", 0x16uLL);
        }
      }
      v1287 = llvm::dbgs(v1283);
      v1288 = v1287;
      v1289 = (_QWORD *)*((_QWORD *)v1287 + 4);
      if (*((_QWORD *)v1287 + 3) - (_QWORD)v1289 > 7uLL)
      {
        *v1289 = 0x206E692041575753;
        *((_QWORD *)v1287 + 4) += 8;
      }
      else
      {
        v1288 = llvm::raw_ostream::write(v1287, "SWWA in ", 8uLL);
      }
      v1290 = **(uint64_t *****)(v1281 + 32);
      if ((*((_BYTE *)v1290 + 23) & 0x10) != 0)
        break;
      v1300 = 0;
      v1301 = &byte_1C871356D;
LABEL_2253:
      v1437 = 773;
      *(_QWORD *)__p = v1301;
      *(_QWORD *)&__p[8] = v1300;
      *(_QWORD *)&__p[16] = ":";
      v1303 = *(unsigned int *)(v1281 + 24);
      __dst = "bb.";
      *((_QWORD *)&v1530 + 1) = v1303;
      *(_WORD *)&v1531[8] = 2307;
      llvm::Twine::str((llvm::Twine *)&__dst, &v1551);
      v1304 = *(uint64_t ****)(v1281 + 16);
      if (!v1304)
        goto LABEL_2271;
      if ((*((_BYTE *)v1304 + 23) & 0x10) != 0)
      {
        v1305 = ***v1304;
        v1306 = *(_QWORD *)(v1305 + 152);
        v1307 = *(unsigned int *)(v1305 + 168);
        if (!(_DWORD)v1307)
          goto LABEL_2261;
        LODWORD(v1308) = (v1307 - 1) & ((v1304 >> 4) ^ (v1304 >> 9));
        v1309 = (uint64_t ****)(v1306 + 16 * v1308);
        v1310 = *v1309;
        if (*v1309 != v1304)
        {
          v1311 = 1;
          while (v1310 != (uint64_t ***)-4096)
          {
            v1312 = v1308 + v1311++;
            v1308 = v1312 & (v1307 - 1);
            v1310 = *(uint64_t ****)(v1306 + 16 * v1308);
            if (v1310 == v1304)
            {
              v1309 = (uint64_t ****)(v1306 + 16 * v1308);
              goto LABEL_2262;
            }
          }
LABEL_2261:
          v1309 = (uint64_t ****)(v1306 + 16 * v1307);
        }
LABEL_2262:
        v1313 = v1309[1];
        v1316 = *v1313;
        v1315 = (char *)(v1313 + 2);
        v1314 = v1316;
        goto LABEL_2263;
      }
      v1314 = 0;
      v1315 = &byte_1C871356D;
LABEL_2263:
      *(_WORD *)&v1531[8] = 1283;
      __dst = ".";
      *((_QWORD *)&v1530 + 1) = v1315;
      *(_QWORD *)v1531 = v1314;
      llvm::Twine::str((llvm::Twine *)&__dst, &v1557);
      if ((v1557.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v1317 = &v1557;
      else
        v1317 = (std::string *)v1557.__r_.__value_.__r.__words[0];
      if ((v1557.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v1318 = *((_BYTE *)&v1557.__r_.__value_.__s + 23) & 0x7F;
      else
        v1318 = v1557.__r_.__value_.__l.__size_;
      std::string::append(&v1551, (const std::string::value_type *)v1317, v1318);
      if (SHIBYTE(v1557.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1557.__r_.__value_.__l.__data_);
LABEL_2271:
      v1319 = v1437;
      if ((_BYTE)v1437)
      {
        if (v1437 == 1)
        {
          __dst = &v1551;
          v1320 = 1;
          v1319 = 4;
        }
        else
        {
          if (HIBYTE(v1437) != 1)
            v1319 = 2;
          v1321 = __p;
          if (HIBYTE(v1437) == 1)
            v1321 = *(_BYTE **)__p;
          __dst = v1321;
          *(_QWORD *)&v1530 = *(_QWORD *)&__p[8];
          *((_QWORD *)&v1530 + 1) = &v1551;
          v1320 = 4;
        }
      }
      else
      {
        v1320 = 1;
      }
      v1531[8] = v1319;
      v1531[9] = v1320;
      llvm::Twine::str((llvm::Twine *)&__dst, &v1557);
      if (SHIBYTE(v1551.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1551.__r_.__value_.__l.__data_);
      if ((v1557.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v1322 = &v1557;
      else
        v1322 = (std::string *)v1557.__r_.__value_.__r.__words[0];
      if ((v1557.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v1323 = *((_BYTE *)&v1557.__r_.__value_.__s + 23) & 0x7F;
      else
        v1323 = v1557.__r_.__value_.__l.__size_;
      v1324 = llvm::raw_ostream::write(v1288, (const char *)v1322, v1323);
      v1325 = v1324;
      if (v1280 == *(llvm::MachineInstr **)(v1281 + 56))
        v1326 = "\n";
      else
        v1326 = " after:\n";
      if (v1280 == *(llvm::MachineInstr **)(v1281 + 56))
        v1327 = 1;
      else
        v1327 = 8;
      v1329 = *((_QWORD *)v1324 + 3);
      v1328 = (void *)*((_QWORD *)v1324 + 4);
      if (v1327 <= v1329 - (uint64_t)v1328)
      {
        v1330 = (llvm *)memcpy(v1328, v1326, v1327);
        *((_QWORD *)v1325 + 4) += v1327;
      }
      else
      {
        v1330 = llvm::raw_ostream::write(v1325, v1326, v1327);
      }
      v1254 = v1425;
      if (SHIBYTE(v1557.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1557.__r_.__value_.__l.__data_);
      for (mm = *(_QWORD *)(v1281 + 56); (llvm::MachineInstr *)mm != v1280; mm = *(_QWORD *)(mm + 8))
      {
        v1339 = llvm::dbgs(v1330);
        v1340 = v1339;
        v1341 = (_DWORD *)*((_QWORD *)v1339 + 4);
        if (*((_QWORD *)v1339 + 3) - (_QWORD)v1341 > 3uLL)
        {
          *v1341 = 538976288;
          *((_QWORD *)v1339 + 4) += 4;
        }
        else
        {
          v1340 = llvm::raw_ostream::write(v1339, "    ", 4uLL);
        }
        llvm::MachineInstr::print((llvm::MachineInstr *)mm, v1340, 1, 0, 0, 1, 0);
        if (!mm || (*(_BYTE *)mm & 4) == 0)
        {
          while ((*(_WORD *)(mm + 44) & 8) != 0)
            mm = *(_QWORD *)(mm + 8);
        }
      }
      v1332 = llvm::dbgs(v1330);
      v1333 = v1332;
      v1334 = (_DWORD *)*((_QWORD *)v1332 + 4);
      if (*((_QWORD *)v1332 + 3) - (_QWORD)v1334 > 3uLL)
      {
        *v1334 = 538997857;
        *((_QWORD *)v1332 + 4) += 4;
      }
      else
      {
        v1333 = llvm::raw_ostream::write(v1332, "at  ", 4uLL);
      }
      llvm::MachineInstr::print(v1280, v1333, 1, 0, 0, 1, 0);
      v1336 = *((_QWORD *)v1333 + 4);
      if ((unint64_t)(*((_QWORD *)v1333 + 3) - v1336) > 0xB)
      {
        *(_DWORD *)(v1336 + 8) = 171603043;
        *(_QWORD *)v1336 = *(_QWORD *)"to protect:\n";
        *((_QWORD *)v1333 + 4) += 12;
      }
      else
      {
        v1335 = llvm::raw_ostream::write(v1333, "to protect:\n", 0xCuLL);
      }
      if ((_DWORD)v1522)
      {
        v1342 = (llvm::MachineInstr **)v1521;
        v1343 = (llvm::MachineInstr **)((char *)v1521 + 8 * v1522);
        while (1)
        {
          v1344 = *v1342;
          v1345 = llvm::dbgs(v1335);
          v1346 = (_DWORD *)*((_QWORD *)v1345 + 4);
          if (*((_QWORD *)v1345 + 3) - (_QWORD)v1346 > 3uLL)
          {
            *v1346 = 539828256;
            *((_QWORD *)v1345 + 4) += 4;
          }
          else
          {
            v1345 = llvm::raw_ostream::write(v1345, "  - ", 4uLL);
          }
          v1347 = llvm::dbgs(v1345);
          llvm::MachineInstr::print(v1344, v1347, 1, 0, 1, 0, 0);
          v1349 = llvm::dbgs(v1348);
          v1350 = v1349;
          v1351 = (_QWORD *)*((_QWORD *)v1349 + 4);
          if (*((_QWORD *)v1349 + 3) - (_QWORD)v1351 > 7uLL)
          {
            *v1351 = 0x206D6F7266202309;
            *((_QWORD *)v1349 + 4) += 8;
          }
          else
          {
            v1350 = llvm::raw_ostream::write(v1349, "\t# from ", 8uLL);
          }
          v1352 = *((_QWORD *)v1344 + 3);
          v1353 = *(unsigned int *)(v1352 + 24);
          __dst = "bb.";
          *((_QWORD *)&v1530 + 1) = v1353;
          *(_WORD *)&v1531[8] = 2307;
          llvm::Twine::str((llvm::Twine *)&__dst, &v1557);
          v1354 = *(uint64_t ****)(v1352 + 16);
          if (v1354)
            break;
LABEL_2343:
          if ((v1557.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v1369 = &v1557;
          else
            v1369 = (std::string *)v1557.__r_.__value_.__r.__words[0];
          if ((v1557.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v1370 = *((_BYTE *)&v1557.__r_.__value_.__s + 23) & 0x7F;
          else
            v1370 = v1557.__r_.__value_.__l.__size_;
          v1335 = llvm::raw_ostream::write(v1350, (const char *)v1369, v1370);
          v1371 = (_BYTE *)*((_QWORD *)v1335 + 4);
          if (*((_BYTE **)v1335 + 3) == v1371)
          {
            v1335 = llvm::raw_ostream::write(v1335, "\n", 1uLL);
          }
          else
          {
            *v1371 = 10;
            ++*((_QWORD *)v1335 + 4);
          }
          if (SHIBYTE(v1557.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1557.__r_.__value_.__l.__data_);
          if (++v1342 == v1343)
            goto LABEL_2304;
        }
        if ((*((_BYTE *)v1354 + 23) & 0x10) != 0)
        {
          v1355 = ***v1354;
          v1356 = *(_QWORD *)(v1355 + 152);
          v1357 = *(unsigned int *)(v1355 + 168);
          if (!(_DWORD)v1357)
            goto LABEL_2333;
          LODWORD(v1358) = (v1357 - 1) & ((v1354 >> 4) ^ (v1354 >> 9));
          v1359 = (uint64_t ****)(v1356 + 16 * v1358);
          v1360 = *v1359;
          if (*v1359 != v1354)
          {
            v1361 = 1;
            while (v1360 != (uint64_t ***)-4096)
            {
              v1362 = v1358 + v1361++;
              v1358 = v1362 & (v1357 - 1);
              v1360 = *(uint64_t ****)(v1356 + 16 * v1358);
              if (v1360 == v1354)
              {
                v1359 = (uint64_t ****)(v1356 + 16 * v1358);
                goto LABEL_2334;
              }
            }
LABEL_2333:
            v1359 = (uint64_t ****)(v1356 + 16 * v1357);
          }
LABEL_2334:
          v1363 = v1359[1];
          v1366 = *v1363;
          v1365 = (char *)(v1363 + 2);
          v1364 = v1366;
        }
        else
        {
          v1364 = 0;
          v1365 = &byte_1C871356D;
        }
        *(_WORD *)&v1531[8] = 1283;
        __dst = ".";
        *((_QWORD *)&v1530 + 1) = v1365;
        *(_QWORD *)v1531 = v1364;
        llvm::Twine::str((llvm::Twine *)&__dst, __p);
        if (__p[23] >= 0)
          v1367 = __p;
        else
          v1367 = *(const std::string::value_type **)__p;
        if (__p[23] >= 0)
          v1368 = __p[23] & 0x7F;
        else
          v1368 = *(_QWORD *)&__p[8];
        std::string::append(&v1557, v1367, v1368);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        goto LABEL_2343;
      }
LABEL_2304:
      v1337 = llvm::dbgs(v1335);
      v1338 = (_BYTE *)*((_QWORD *)v1337 + 4);
      if (*((_BYTE **)v1337 + 3) == v1338)
      {
        llvm::raw_ostream::write(v1337, "\n", 1uLL);
      }
      else
      {
        *v1338 = 10;
        ++*((_QWORD *)v1337 + 4);
      }
      if (v1521 != &v1523)
        free(v1521);
      v1279 += 8;
      if (v1279 == v1416)
      {
        v1279 = (char *)v1553;
        LOBYTE(v24) = v1395;
        goto LABEL_2368;
      }
    }
    v1291 = ***v1290;
    v1292 = *(_QWORD *)(v1291 + 152);
    v1293 = *(unsigned int *)(v1291 + 168);
    if ((_DWORD)v1293)
    {
      LODWORD(v1294) = (v1293 - 1) & ((v1290 >> 4) ^ (v1290 >> 9));
      v1295 = (uint64_t ****)(v1292 + 16 * v1294);
      v1296 = *v1295;
      if (*v1295 == v1290)
      {
LABEL_2252:
        v1299 = v1295[1];
        v1302 = *v1299;
        v1301 = (char *)(v1299 + 2);
        v1300 = v1302;
        goto LABEL_2253;
      }
      v1297 = 1;
      while (v1296 != (uint64_t ***)-4096)
      {
        v1298 = v1294 + v1297++;
        v1294 = v1298 & (v1293 - 1);
        v1296 = *(uint64_t ****)(v1292 + 16 * v1294);
        if (v1296 == v1290)
        {
          v1295 = (uint64_t ****)(v1292 + 16 * v1294);
          goto LABEL_2252;
        }
      }
    }
    v1295 = (uint64_t ****)(v1292 + 16 * v1293);
    goto LABEL_2252;
  }
  if (v1426.n128_u32[0])
    goto LABEL_724;
LABEL_1046:
  v589 = v1433;
  if (v1434)
  {
    v590 = 32 * v1434;
    v591 = (_QWORD *)(v1433 + 24);
    do
    {
      if ((*(v591 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v592 = (_QWORD *)*(v591 - 2);
        if (v591 != v592)
          free(v592);
      }
      v591 += 4;
      v590 -= 32;
    }
    while (v590);
  }
  MEMORY[0x1CAA32FB4](v589, 8);
LABEL_1053:
  if ((_DWORD)v1444)
  {
    v593 = (char *)v1443;
    v1426.n128_u64[0] = (unint64_t)v1443 + 8 * v1444;
    do
    {
      v594 = *(_QWORD *)v593;
      v595 = *(_QWORD *)(*(_QWORD *)v593 + 32);
      v596 = *(_QWORD *)(v595 + 16);
      v597 = *(_QWORD *)(v595 + 48);
      v598 = *(_QWORD *)(*(_QWORD *)v593 + 48);
      if ((v598 & 7) != 0)
      {
        v599 = *(__int128 **)((v598 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        v599 = (__int128 *)(v598 & 0xFFFFFFFFFFFFFFF8);
        *(_QWORD *)(v594 + 48) = v598 & 0xFFFFFFFFFFFFFFF8;
      }
      v600 = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand((uint64_t)v1396, v599, 6);
      v601 = *(_QWORD *)(v594 + 24);
      v1530 = 0u;
      memset(v1531, 0, 48);
      v602 = *(_QWORD *)(v601 + 32);
      __dst = &off_1E816EC08;
      *(_QWORD *)&v1530 = v602;
      *(_QWORD *)v1531 = *(_QWORD *)(v602 + 40);
      *((_QWORD *)&v1530 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v602 + 16) + 104))(*(_QWORD *)(v602 + 16));
      *(_QWORD *)__p = 0;
      if (*(_QWORD *)&v1531[8])
      {
        llvm::MetadataTracking::untrack((uint64_t)&v1531[8], *(unsigned __int8 **)&v1531[8]);
        *(_QWORD *)&v1531[8] = *(_QWORD *)__p;
        if (*(_QWORD *)__p)
          llvm::MetadataTracking::retrack((uint64_t)__p, *(unsigned __int8 **)__p, (uint64_t)&v1531[8]);
      }
      else
      {
        *(_QWORD *)&v1531[8] = 0;
      }
      *(_QWORD *)&v1531[32] = 0;
      *(_QWORD *)&v1531[24] = v594;
      *(_QWORD *)&v1531[16] = *(_QWORD *)(v594 + 24);
      *(_QWORD *)&v1531[24] = v594;
      v603 = (_BYTE *)(v594 + 56);
      if (v603 != &v1531[8])
      {
        if (*(_QWORD *)&v1531[8])
          llvm::MetadataTracking::untrack((uint64_t)&v1531[8], *(unsigned __int8 **)&v1531[8]);
        v604 = *(unsigned __int8 **)v603;
        *(_QWORD *)&v1531[8] = v604;
        if (v604)
          llvm::MetadataTracking::track((uint64_t)&v1531[8], v604, 2);
      }
      v606 = sub_1C55437B8(&__dst, 0x207u);
      v607 = (unint64_t *)v605;
      v608 = *(unint64_t **)&v1531[24];
      v609 = *(_QWORD *)(*(_QWORD *)&v1531[16] + 40);
      *(_QWORD *)(v605 + 24) = v609;
      v610 = *(_QWORD *)(v609 + 32);
      v611 = *(unsigned int *)(v605 + 40);
      if ((_DWORD)v611)
      {
        v614 = *(_QWORD *)(v605 + 32);
        v615 = *(_QWORD *)(v610 + 40);
        v616 = 32 * v611;
        do
        {
          if (!*(_BYTE *)v614)
          {
            v617 = *(unsigned int *)(v614 + 4);
            if ((int)v617 >= 0)
              v618 = (uint64_t *)(*(_QWORD *)(v615 + 272) + 8 * v617);
            else
              v618 = (uint64_t *)(*(_QWORD *)(v615 + 24) + 16 * (v617 & 0x7FFFFFFF) + 8);
            v619 = *v618;
            if (*v618)
            {
              v620 = *(_QWORD *)(v619 + 16);
              *(_QWORD *)(v619 + 16) = v614;
              *(_QWORD *)(v614 + 16) = v620;
              if ((*(_BYTE *)(v614 + 3) & 1) != 0)
              {
                *(_QWORD *)(v614 + 24) = v619;
              }
              else
              {
                *(_QWORD *)(v614 + 24) = 0;
                v618 = (uint64_t *)(v620 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v614 + 16) = v614;
              *(_QWORD *)(v614 + 24) = 0;
            }
            *v618 = v614;
          }
          v614 += 32;
          v616 -= 32;
        }
        while (v616);
      }
      v612 = *(_QWORD *)(v610 + 728);
      if (v612)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v612 + 24))(v612, v605);
      v613 = *v608 & 0xFFFFFFFFFFFFFFF8;
      *v607 = v613 | *v607 & 7;
      v607[1] = (unint64_t)v608;
      *(_QWORD *)(v613 + 8) = v607;
      *v608 = *v608 & 7 | (unint64_t)v607;
      if (*(_QWORD *)&v1531[32])
        (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)&v1531[32] + 24))(*(_QWORD *)&v1531[32], v607);
      v1557.__r_.__value_.__l.__size_ = 0;
      LODWORD(v1557.__r_.__value_.__r.__words[2]) = 87;
      LODWORD(v1558) = 0;
      LODWORD(v1557.__r_.__value_.__l.__data_) = 7;
      HIDWORD(v1557.__r_.__value_.__r.__words[0]) = v596;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v607, v606, (const llvm::MachineOperand *)&v1557);
      *(_DWORD *)__p = 1;
      *(_QWORD *)&__p[8] = 0;
      *(_QWORD *)&__p[16] = v597;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v607, v606, (const llvm::MachineOperand *)__p);
      *(_DWORD *)__p = 1;
      *(_QWORD *)&__p[8] = 0;
      *(_QWORD *)&__p[16] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v607, v606, (const llvm::MachineOperand *)__p);
      llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v607, v606, v600);
      __dst = &off_1E816EC08;
      if (*(_QWORD *)&v1531[8])
        llvm::MetadataTracking::untrack((uint64_t)&v1531[8], *(unsigned __int8 **)&v1531[8]);
      v593 += 8;
    }
    while (v593 != (char *)v1426.n128_u64[0]);
    if (v1440 <= 1 && !HIDWORD(v1440))
    {
LABEL_1095:
      LODWORD(v1444) = 0;
      goto LABEL_1096;
    }
    v621 = &v1443;
    if ((v1440 & 1) != 0)
    {
LABEL_1091:
      v622 = v1372;
      do
        *v622++ = (void *)-4096;
      while (v622 != v621);
      v623 = v1440 & 1;
    }
    else
    {
      v623 = v1442;
      if (((2 * (_DWORD)v1440) & 0xFFFFFFFC) < v1442 && v1442 >= 0x41)
      {
        sub_1C614EF20(&v1440);
        goto LABEL_1095;
      }
      if (v1442)
      {
        v1372 = v1441;
        v621 = &v1441[v1442];
        goto LABEL_1091;
      }
    }
    v1440 = v623;
    goto LABEL_1095;
  }
LABEL_1096:
  if ((v24 & 1) != 0)
  {
    v624 = *((_QWORD *)v1396 + 41);
    if ((llvm::MachineBasicBlock **)v624 != v1380)
    {
LABEL_1098:
      for (nn = *(_QWORD *)(v624 + 56); ; nn = *(_QWORD *)(nn + 8))
      {
        if (nn == v624 + 48)
        {
          v624 = *(_QWORD *)(v624 + 8);
          if ((llvm::MachineBasicBlock **)v624 == v1380)
            break;
          goto LABEL_1098;
        }
        v626 = *(_QWORD *)(*(_QWORD *)(nn + 16) + 8);
        if ((*(_WORD *)(nn + 44) & 0xC) != 0 && (*(_WORD *)(nn + 44) & 4) == 0)
        {
          v634 = nn;
          if ((v626 & 0x20) == 0)
          {
            while ((*(_WORD *)(v634 + 44) & 8) != 0)
            {
              v634 = *(_QWORD *)(v634 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v634 + 16) + 8) & 0x20) != 0)
                goto LABEL_1105;
            }
            goto LABEL_1123;
          }
        }
        else if ((v626 & 0x20) == 0)
        {
          goto LABEL_1123;
        }
LABEL_1105:
        v628 = *(_QWORD *)(nn + 24);
        if (*(_QWORD *)(v628 + 56) == nn)
          goto LABEL_1114;
        v629 = *(_QWORD *)nn & 0xFFFFFFFFFFFFFFF8;
        if (!v629 || (*(_BYTE *)v629 & 4) == 0)
        {
          while ((*(_WORD *)(v629 + 44) & 4) != 0)
            v629 = *(_QWORD *)v629 & 0xFFFFFFFFFFFFFFF8;
        }
        v630 = *(unsigned __int16 **)(v629 + 16);
        if ((v630[10] & 4) == 0)
          goto LABEL_1114;
        v631 = sub_1C4C915C4(*v630);
        if ((v631 & 0xFF00000000) == 0)
          goto LABEL_2178;
        if ((_DWORD)v631 != 146)
        {
LABEL_1114:
          v1530 = 0u;
          memset(v1531, 0, 48);
          v632 = *(_QWORD *)(v628 + 32);
          __dst = &off_1E816EC08;
          *(_QWORD *)&v1530 = v632;
          *(_QWORD *)v1531 = *(_QWORD *)(v632 + 40);
          *((_QWORD *)&v1530 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v632 + 16) + 104))(*(_QWORD *)(v632 + 16));
          *(_QWORD *)__p = 0;
          if (*(_QWORD *)&v1531[8])
          {
            llvm::MetadataTracking::untrack((uint64_t)&v1531[8], *(unsigned __int8 **)&v1531[8]);
            *(_QWORD *)&v1531[8] = *(_QWORD *)__p;
            if (*(_QWORD *)__p)
              llvm::MetadataTracking::retrack((uint64_t)__p, *(unsigned __int8 **)__p, (uint64_t)&v1531[8]);
          }
          else
          {
            *(_QWORD *)&v1531[8] = 0;
          }
          *(_QWORD *)&v1531[32] = 0;
          *(_QWORD *)&v1531[24] = nn;
          *(_QWORD *)&v1531[16] = *(_QWORD *)(nn + 24);
          *(_QWORD *)&v1531[24] = nn;
          if ((_BYTE *)(nn + 56) != &v1531[8])
          {
            if (*(_QWORD *)&v1531[8])
              llvm::MetadataTracking::untrack((uint64_t)&v1531[8], *(unsigned __int8 **)&v1531[8]);
            v633 = *(unsigned __int8 **)(nn + 56);
            *(_QWORD *)&v1531[8] = v633;
            if (v633)
              llvm::MetadataTracking::track((uint64_t)&v1531[8], v633, 2);
          }
          sub_1C4AD6390((uint64_t)&__dst, 1u);
          __dst = &off_1E816EC08;
          if (*(_QWORD *)&v1531[8])
            llvm::MetadataTracking::untrack((uint64_t)&v1531[8], *(unsigned __int8 **)&v1531[8]);
        }
LABEL_1123:
        if ((*(_BYTE *)nn & 4) == 0)
        {
          while ((*(_WORD *)(nn + 44) & 8) != 0)
            nn = *(_QWORD *)(nn + 8);
        }
      }
    }
  }
  v635 = *((_QWORD *)v1396 + 7);
  v636 = *(_DWORD *)(v635 + 32);
  v637 = -v636;
  if (v636 > 0)
  {
    do
    {
      v1186 = *(_DWORD *)(v635 + 32) + v637;
      v1187 = *(_QWORD *)(v635 + 8);
      if (!*(_BYTE *)(v1187 + 40 * v1186 + 18))
      {
        if (!v1474)
        {
          v1188 = v1467;
          v1189 = v1467;
          if (v1467 >= HIDWORD(v1467))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1466, (uint64_t)&v1468, v1467 + 1, 8);
            v1189 = v1467;
          }
          *((_QWORD *)v1466 + v1189) = v1188;
          LODWORD(v1467) = v1467 + 1;
          v1474 = v1188;
          v1187 = *(_QWORD *)(v635 + 8);
          v1186 = *(_DWORD *)(v635 + 32) + v637;
        }
        v1190 = v1187 + 40 * v1186;
        v1191 = *(_DWORD *)(v1190 + 8) + *(_QWORD *)v1190;
        if (*(uint64_t *)v1190 >= 0)
          v1192 = *(_QWORD *)v1190;
        else
          v1192 = *(_QWORD *)v1190 + 1;
        v1193 = v1192 >> 1;
        v1194 = (v1191 >> 1) + 1;
        if (v1194 != (_DWORD)v1193)
        {
          v1195 = (v1193 << 32) | 2;
          do
          {
            v1196 = v1474;
            v1197 = sub_1C49EF04C((uint64_t)&v1450, v1195);
            v1198 = v1197;
            *(_DWORD *)(v1197 + 16) = 0;
            if (*(_DWORD *)(v1197 + 20))
            {
              v1199 = 0;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v1197 + 8, v1197 + 24, 1uLL, 4);
              v1199 = *(unsigned int *)(v1198 + 16);
            }
            *(_DWORD *)(*(_QWORD *)(v1198 + 8) + 4 * v1199) = v1196;
            ++*(_DWORD *)(v1198 + 16);
            v1200 = (v1195 & 0xFFFFFFFF00000000) + 0x100000000;
            v1195 = v1200 & 0xFFFFFFFF00000000 | v1195;
          }
          while (v1194 != HIDWORD(v1200));
        }
      }
      v773 = __CFADD__(v637++, 1);
    }
    while (!v773);
  }
  *(_QWORD *)__p = &__p[16];
  *(_QWORD *)&__p[8] = 0x1000000000;
  v638 = *((_QWORD *)v1396 + 41);
  if ((llvm::MachineBasicBlock **)v638 == v1380)
    goto LABEL_1865;
  while (2)
  {
    v1415 = v638;
    if (v1512)
    {
      v1377 = (void *)sub_1C49EE844((uint64_t)&v1446, v638);
      v639 = sub_1C49EE8D4((uint64_t)v1377);
      v640 = *(uint64_t **)(v638 + 64);
      v1421 = *(uint64_t **)(v638 + 72);
      if (v640 != v1421)
      {
        v641 = v639;
        v1400 = (llvm::SmallPtrSetImplBase *)(v639 + 128);
        v1387 = (llvm::SmallPtrSetImplBase *)(v639 + 64);
        do
        {
          v642 = *v640;
          v643 = sub_1C49EE844((uint64_t)&v1446, *v640);
          v644 = sub_1C49EE8D4(v643);
          if (*(_BYTE *)v644)
          {
            v645 = v644;
            sub_1C49EF31C((uint64_t)&v1446, (uint64_t *)(v644 + 16), 0, 0);
            sub_1C49EF878(&v1450, (uint64_t *)(v645 + 48));
            sub_1C49EFCB8((uint64_t)&v1448, (uint64_t *)(v645 + 32), 0);
            if (v641)
            {
              v646 = *(_QWORD *)(v645 + 136);
              v647 = 144;
              if (v646 == *(_QWORD *)(v645 + 128))
                v647 = 148;
              v648 = *(unsigned int *)(v645 + v647);
              if ((_DWORD)v648)
              {
                v649 = 8 * v648;
                v650 = *(uint64_t **)(v645 + 136);
                while ((unint64_t)*v650 >= 0xFFFFFFFFFFFFFFFELL)
                {
                  ++v650;
                  v649 -= 8;
                  if (!v649)
                    goto LABEL_1160;
                }
              }
              else
              {
                v650 = *(uint64_t **)(v645 + 136);
              }
              v652 = (_QWORD *)(v646 + 8 * v648);
              if (v650 != v652)
              {
                v653 = *v650;
LABEL_1152:
                sub_1C4774094(v1400, v653);
                v654 = sub_1C477672C((uint64_t)v1387, v653);
                v655 = *(_QWORD *)(v641 + 72);
                v656 = 80;
                if (v655 == *(_QWORD *)(v641 + 64))
                  v656 = 84;
                if (v654 != (_QWORD *)(v655 + 8 * *(unsigned int *)(v641 + v656)))
                {
                  *v654 = -2;
                  ++*(_DWORD *)(v641 + 88);
                }
                v657 = (unint64_t *)(v650 + 1);
                while (v657 != v652)
                {
                  v658 = *v657++;
                  v653 = v658;
                  if (v658 <= 0xFFFFFFFFFFFFFFFDLL)
                  {
                    v650 = (uint64_t *)(v657 - 1);
                    goto LABEL_1152;
                  }
                }
              }
LABEL_1160:
              v659 = *(_QWORD *)(v645 + 72);
              v660 = 80;
              if (v659 == *(_QWORD *)(v645 + 64))
                v660 = 84;
              v661 = *(unsigned int *)(v645 + v660);
              if ((_DWORD)v661)
              {
                v662 = 8 * v661;
                v663 = *(uint64_t **)(v645 + 72);
                while ((unint64_t)*v663 >= 0xFFFFFFFFFFFFFFFELL)
                {
                  ++v663;
                  v662 -= 8;
                  if (!v662)
                    goto LABEL_1178;
                }
              }
              else
              {
                v663 = *(uint64_t **)(v645 + 72);
              }
              v664 = (_QWORD *)(v659 + 8 * v661);
              if (v663 != v664)
              {
                v665 = *v663;
LABEL_1170:
                v666 = sub_1C477672C((uint64_t)v1400, v665);
                v667 = *(_QWORD *)(v641 + 136);
                v668 = 144;
                if (v667 == *(_QWORD *)(v641 + 128))
                  v668 = 148;
                if (v666 == (_QWORD *)(v667 + 8 * *(unsigned int *)(v641 + v668)))
                  sub_1C4774094(v1387, v665);
                v669 = (unint64_t *)(v663 + 1);
                while (v669 != v664)
                {
                  v670 = *v669++;
                  v665 = v670;
                  if (v670 <= 0xFFFFFFFFFFFFFFFDLL)
                  {
                    v663 = (uint64_t *)(v669 - 1);
                    goto LABEL_1170;
                  }
                }
              }
            }
LABEL_1178:
            v671 = *(_DWORD *)(v645 + 8) + 1;
            *(_DWORD *)(v645 + 8) = v671;
            v638 = v1415;
            if (v671 < ((*(_QWORD *)(v642 + 96) - *(_QWORD *)(v642 + 88)) >> 3))
              goto LABEL_1181;
            sub_1C49EE99C((uint64_t *)(v643 + 24), 0);
            v651 = (_BYTE *)(v643 + 32);
          }
          else
          {
            v651 = (_BYTE *)(v643 + 16);
            v638 = v1415;
          }
          *v651 = 1;
LABEL_1181:
          ++v640;
        }
        while (v640 != v1421);
      }
      if (byte_1ED7ECFC0)
      {
        v672 = v1511 ? 0 : v1507;
        v673 = *(_QWORD *)v1481[0] + 16 * *(int *)(v638 + 24);
        v674 = *(unsigned int *)(v673 + 8);
        if ((_DWORD)v674)
        {
          v675 = *(unsigned int **)v673;
          v676 = 4 * v674;
          do
          {
            v677 = sub_1C49EE844((uint64_t)&v1446, *(_QWORD *)(*((_QWORD *)v1396 + 13) + 8 * *v675));
            v678 = sub_1C49EE8D4(v677);
            if (*(_BYTE *)v678)
            {
              v679 = v678;
              sub_1C49EF31C((uint64_t)&v1446, (uint64_t *)(v678 + 16), (uint64_t)v672, 1);
              sub_1C49EFCB8((uint64_t)&v1448, (uint64_t *)(v679 + 32), (uint64_t)v1427);
            }
            else
            {
              *(_BYTE *)(v677 + 16) = 1;
            }
            ++v675;
            v676 -= 4;
          }
          while (v676);
        }
      }
      *(_BYTE *)sub_1C49EE8D4((uint64_t)v1377) = 1;
    }
    v680 = v638 + 48;
    v681 = *(_QWORD *)(v638 + 56);
    v1422 = v638 + 48;
    if (v681 != v638 + 48)
    {
      while (2)
      {
        if (!v681 || (v682 = v681, (*(_BYTE *)v681 & 4) == 0))
        {
          v682 = v681;
          if ((*(_WORD *)(v681 + 44) & 8) != 0)
          {
            v682 = v681;
            do
              v682 = *(_QWORD *)(v682 + 8);
            while ((*(_WORD *)(v682 + 44) & 8) != 0);
          }
        }
        v683 = *(_QWORD *)(v682 + 8);
        v684 = *(unsigned __int16 **)(v681 + 16);
        v685 = *v684;
        if (v685 == 258)
        {
          v686 = v681;
          if ((*(_BYTE *)v681 & 4) == 0)
          {
            v686 = v681;
            if ((*(_WORD *)(v681 + 44) & 8) != 0)
            {
              v686 = v681;
              do
                v686 = *(_QWORD *)(v686 + 8);
              while ((*(_WORD *)(v686 + 44) & 8) != 0);
            }
          }
          v687 = *(_QWORD *)(v681 + 24);
          v688 = *(_DWORD *)(*(_QWORD *)(v681 + 32) + 16);
          for (i1 = *(_QWORD *)(v686 + 8); i1 != v687 + 48; i1 = *(_QWORD *)(i1 + 8))
          {
            v690 = *(unsigned __int16 **)(i1 + 16);
            if ((v690[10] & 4) != 0)
            {
              v715 = *(_QWORD *)(i1 + 32) + 32 * sub_1C4C2FD5C(*v690);
              *(_QWORD *)(v715 + 16) |= 0x1000000 << v688;
              goto LABEL_1252;
            }
            if (*v690 != 258)
              break;
            if ((*(_BYTE *)i1 & 4) == 0)
            {
              while ((*(_WORD *)(i1 + 44) & 8) != 0)
                i1 = *(_QWORD *)(i1 + 8);
            }
          }
          v1530 = 0u;
          memset(v1531, 0, 48);
          v698 = *(_QWORD *)(v687 + 32);
          __dst = &off_1E816EC08;
          *(_QWORD *)&v1530 = v698;
          *(_QWORD *)v1531 = *(_QWORD *)(v698 + 40);
          *((_QWORD *)&v1530 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v698 + 16) + 104))(*(_QWORD *)(v698 + 16));
          v1557.__r_.__value_.__r.__words[0] = 0;
          if (*(_QWORD *)&v1531[8])
          {
            llvm::MetadataTracking::untrack((uint64_t)&v1531[8], *(unsigned __int8 **)&v1531[8]);
            *(_QWORD *)&v1531[8] = v1557.__r_.__value_.__r.__words[0];
            if (v1557.__r_.__value_.__r.__words[0])
              llvm::MetadataTracking::retrack((uint64_t)&v1557, (unsigned __int8 *)v1557.__r_.__value_.__l.__data_, (uint64_t)&v1531[8]);
          }
          else
          {
            *(_QWORD *)&v1531[8] = 0;
          }
          *(_QWORD *)&v1531[32] = 0;
          *(_QWORD *)&v1531[24] = v681;
          *(_QWORD *)&v1531[16] = *(_QWORD *)(v681 + 24);
          *(_QWORD *)&v1531[24] = v681;
          if ((_BYTE *)(v681 + 56) != &v1531[8])
          {
            if (*(_QWORD *)&v1531[8])
              llvm::MetadataTracking::untrack((uint64_t)&v1531[8], *(unsigned __int8 **)&v1531[8]);
            v699 = *(unsigned __int8 **)(v681 + 56);
            *(_QWORD *)&v1531[8] = v699;
            if (v699)
              llvm::MetadataTracking::track((uint64_t)&v1531[8], v699, 2);
          }
          v701 = sub_1C55437B8(&__dst, 0x184Eu);
          v702 = (unint64_t *)v700;
          v703 = *(unint64_t **)&v1531[24];
          v704 = *(_QWORD *)(*(_QWORD *)&v1531[16] + 40);
          *(_QWORD *)(v700 + 24) = v704;
          v705 = *(_QWORD *)(v704 + 32);
          v706 = *(unsigned int *)(v700 + 40);
          if ((_DWORD)v706)
          {
            v765 = *(_QWORD *)(v700 + 32);
            v766 = *(_QWORD *)(v705 + 40);
            v767 = 32 * v706;
            do
            {
              if (!*(_BYTE *)v765)
              {
                v768 = *(unsigned int *)(v765 + 4);
                if ((int)v768 >= 0)
                  v769 = (uint64_t *)(*(_QWORD *)(v766 + 272) + 8 * v768);
                else
                  v769 = (uint64_t *)(*(_QWORD *)(v766 + 24) + 16 * (v768 & 0x7FFFFFFF) + 8);
                v770 = *v769;
                if (*v769)
                {
                  v771 = *(_QWORD *)(v770 + 16);
                  *(_QWORD *)(v770 + 16) = v765;
                  *(_QWORD *)(v765 + 16) = v771;
                  if ((*(_BYTE *)(v765 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v765 + 24) = v770;
                  }
                  else
                  {
                    *(_QWORD *)(v765 + 24) = 0;
                    v769 = (uint64_t *)(v771 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v765 + 16) = v765;
                  *(_QWORD *)(v765 + 24) = 0;
                }
                *v769 = v765;
              }
              v765 += 32;
              v767 -= 32;
            }
            while (v767);
          }
          v707 = *(_QWORD *)(v705 + 728);
          if (v707)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v707 + 24))(v707, v700);
          v708 = *v703 & 0xFFFFFFFFFFFFFFF8;
          *v702 = v708 | *v702 & 7;
          v702[1] = (unint64_t)v703;
          *(_QWORD *)(v708 + 8) = v702;
          *v703 = *v703 & 7 | (unint64_t)v702;
          if (*(_QWORD *)&v1531[32])
            (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)&v1531[32] + 24))(*(_QWORD *)&v1531[32], v702);
          LODWORD(v1557.__r_.__value_.__l.__data_) = 1;
          v1557.__r_.__value_.__l.__size_ = 0;
          v1557.__r_.__value_.__r.__words[2] = 0x1000000 << v688;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v702, v701, (const llvm::MachineOperand *)&v1557);
          __dst = &off_1E816EC08;
          if (*(_QWORD *)&v1531[8])
            llvm::MetadataTracking::untrack((uint64_t)&v1531[8], *(unsigned __int8 **)&v1531[8]);
LABEL_1252:
          v680 = v1422;
          v716 = v681;
          if ((*(_BYTE *)v681 & 4) == 0)
          {
            v716 = v681;
            if ((*(_WORD *)(v681 + 44) & 8) != 0)
            {
              v716 = v681;
              do
                v716 = *(_QWORD *)(v716 + 8);
              while ((*(_WORD *)(v716 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(v681 + 24) + 40, v681, *(_QWORD *)(v716 + 8));
LABEL_1385:
          v681 = v683;
          if (v683 == v680)
            goto LABEL_1409;
          continue;
        }
        break;
      }
      if ((v684[10] & 4) == 0)
        goto LABEL_1385;
      v1454 = 0;
      v1557.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1557.__r_.__value_.__r.__words[2];
      v1557.__r_.__value_.__l.__size_ = 0x200000000;
      v691 = *(_DWORD *)(v681 + 40);
      if (v691)
      {
        for (i2 = 0; i2 != v691; ++i2)
        {
          v693 = sub_1C4AD4FB8(v681, i2, (_QWORD *)(v1484 + 8));
          if (v693 <= 7)
          {
            if (((1 << v693) & 0xAC) != 0)
            {
              v694 = LODWORD(v1557.__r_.__value_.__r.__words[1]);
              if (LODWORD(v1557.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v1557.__r_.__value_.__r.__words[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1557, (uint64_t)&v1557.__r_.__value_.__r.__words[2], LODWORD(v1557.__r_.__value_.__r.__words[1]) + 1, 4);
                v694 = LODWORD(v1557.__r_.__value_.__r.__words[1]);
              }
              *(_DWORD *)(v1557.__r_.__value_.__r.__words[0] + 4 * v694) = i2;
              ++LODWORD(v1557.__r_.__value_.__r.__words[1]);
            }
            else if (((1 << v693) & 0x52) != 0)
            {
              sub_1C49E178C(&__dst, (_QWORD *)v681, i2, v1484, 1, 0);
              v695 = (unint64_t)__dst;
              v696 = v1530;
              if ((_DWORD)v1530 != HIDWORD(__dst))
              {
                do
                {
                  sub_1C49F1164((uint64_t)&v1446, v695, (_QWORD *)v681, i2);
                  v697 = (v695 & 0xFFFFFFFF00000000) + 0x100000000;
                  v695 = v697 & 0xFFFFFFFF00000000 | v695;
                }
                while (v696 != HIDWORD(v697));
              }
            }
          }
        }
        v685 = **(unsigned __int16 **)(v681 + 16);
      }
      v709 = sub_1C4C915C4(v685);
      if ((v709 & 0xFF00000000) == 0)
        goto LABEL_2178;
      if ((_DWORD)v709 == 100 || (_DWORD)v709 == 193)
      {
        sub_1C49F3004((uint64_t)&v1446, v681);
        if (!v1452)
        {
          v710 = v1467;
          v711 = v1467;
          if (v1467 >= HIDWORD(v1467))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1466, (uint64_t)&v1468, v1467 + 1, 8);
            v711 = v1467;
          }
          *((_QWORD *)v1466 + v711) = v710;
          LODWORD(v1467) = v1467 + 1;
          v1452 = v710;
          __dst = &v1453;
          LODWORD(v1530) = 0;
          sub_1C49F2F1C((uint64_t)&__dst);
          v712 = v1453;
          v1453 &= ~0x20uLL;
          if ((v712 & 0x1F) == 0)
            v1452 = 0;
        }
        __dst = &v1453;
        LODWORD(v1530) = 0;
        sub_1C49F2F1C((uint64_t)&__dst);
        v713 = v1453;
        if ((v1453 & 0x1F) == 0)
          v1452 = 0;
        v1453 &= 0xFFFFFFFFFFFFFFDBLL;
        if ((v713 & 0x1B) != 0)
        {
          v714 = v1452;
        }
        else
        {
          v714 = 0;
          v1452 = 0;
        }
        __dst = (void *)v681;
        if (!v1469)
        {
          v724 = 0;
          goto LABEL_1268;
        }
        v717 = (v1469 - 1) & ((v681 >> 4) ^ (v681 >> 9));
        v718 = (_QWORD *)(v1468 + 16 * v717);
        v719 = *v718;
        if (v681 != *v718)
        {
          v720 = 0;
          v721 = 1;
          while (v719 != -4096)
          {
            if (v720)
              v722 = 0;
            else
              v722 = v719 == -8192;
            if (v722)
              v720 = v718;
            v723 = v717 + v721++;
            v717 = v723 & (v1469 - 1);
            v718 = (_QWORD *)(v1468 + 16 * v717);
            v719 = *v718;
            if (v681 == *v718)
              goto LABEL_1269;
          }
          if (v720)
            v724 = v720;
          else
            v724 = v718;
LABEL_1268:
          v718 = sub_1C49F2CB0((uint64_t)&v1468, (uint64_t *)&__dst, v724);
          *v718 = v681;
          v718[1] = 0;
        }
LABEL_1269:
        *((_DWORD *)v718 + 3) = v714;
      }
      v725 = *(_WORD *)(v681 + 44);
      v726 = *(_QWORD *)(*(_QWORD *)(v681 + 16) + 8);
      if ((v725 & 0xC) == 0 || (v725 & 4) != 0)
      {
        if ((v726 & 0x80) == 0)
          goto LABEL_1292;
      }
      else
      {
        v727 = v681;
        if ((v726 & 0x80) == 0)
        {
          while ((*(_WORD *)(v727 + 44) & 8) != 0)
          {
            v727 = *(_QWORD *)(v727 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v727 + 16) + 8) & 0x80) != 0)
              goto LABEL_1277;
          }
LABEL_1292:
          if (LODWORD(v1557.__r_.__value_.__r.__words[1]))
          {
            v737 = (unsigned int *)v1557.__r_.__value_.__r.__words[0];
            v738 = v1557.__r_.__value_.__r.__words[0] + 4 * LODWORD(v1557.__r_.__value_.__r.__words[1]);
            do
            {
              v739 = *v737;
              sub_1C49E178C(&__dst, (_QWORD *)v681, *v737, v1484, 1, 0);
              v740 = (unint64_t)__dst;
              v741 = v1530;
              if ((_DWORD)v1530 != HIDWORD(__dst))
              {
                do
                {
                  sub_1C49F1164((uint64_t)&v1446, v740, (_QWORD *)v681, v739);
                  v742 = (v740 & 0xFFFFFFFF00000000) + 0x100000000;
                  v740 = v742 & 0xFFFFFFFF00000000 | v740;
                }
                while (v741 != HIDWORD(v742));
              }
              ++v737;
            }
            while (v737 != (unsigned int *)v738);
          }
          if (v1512)
            v743 = v1454 == 0;
          else
            v743 = 1;
          v638 = v1415;
          if (!v743)
          {
            v744 = sub_1C49EE844((uint64_t)&v1446, *(_QWORD *)(v681 + 24));
            v745 = sub_1C49EE8D4(v744);
            v746 = *(char **)(v745 + 136);
            v747 = *(char **)(v745 + 128);
            v748 = 144;
            if (v746 == v747)
              v748 = 148;
            v749 = *(unsigned int *)(v745 + v748);
            v750 = *(uint64_t **)(v745 + 136);
            if ((_DWORD)v749)
            {
              v751 = 0;
              while (*(_QWORD *)&v746[v751] >= 0xFFFFFFFFFFFFFFFELL)
              {
                v751 += 8;
                if (8 * v749 == v751)
                  goto LABEL_1316;
              }
              v750 = (uint64_t *)&v746[v751];
            }
            v752 = &v746[8 * v749];
            if (v750 != (uint64_t *)v752)
            {
              v753 = *v750;
LABEL_1311:
              sub_1C4774094((llvm::SmallPtrSetImplBase *)(v745 + 64), v753);
              v754 = (unint64_t *)(v750 + 1);
              while (v754 != (unint64_t *)v752)
              {
                v755 = *v754++;
                v753 = v755;
                if (v755 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v750 = (uint64_t *)(v754 - 1);
                  goto LABEL_1311;
                }
              }
              v747 = *(char **)(v745 + 128);
              v746 = *(char **)(v745 + 136);
            }
LABEL_1316:
            if (v746 == v747)
            {
LABEL_1317:
              *(_DWORD *)(v745 + 148) = 0;
              *(_DWORD *)(v745 + 152) = 0;
            }
            else
            {
              v772 = *(unsigned int *)(v745 + 144);
              v773 = v772 < 0x21
                  || 4 * (*(_DWORD *)(v745 + 148) - *(_DWORD *)(v745 + 152)) >= v772;
              if (v773)
              {
                memset(v746, 255, 8 * v772);
                goto LABEL_1317;
              }
              free(v746);
              v792 = *(_DWORD *)(v745 + 148) - *(_DWORD *)(v745 + 152);
              v793 = 1 << (33 - __clz(v792 - 1));
              *(_DWORD *)(v745 + 148) = 0;
              *(_DWORD *)(v745 + 152) = 0;
              if (v792 <= 0x10)
                v794 = 32;
              else
                v794 = v793;
              *(_DWORD *)(v745 + 144) = v794;
              v795 = malloc_type_malloc(8 * v794, 0x4065EBACuLL);
              if (!v795)
                goto LABEL_2181;
              *(_QWORD *)(v745 + 136) = v795;
              memset(v795, 255, 8 * *(unsigned int *)(v745 + 144));
            }
          }
          v756 = sub_1C4C915C4(**(unsigned __int16 **)(v681 + 16));
          v680 = v1422;
          if ((v756 & 0xFF00000000) == 0)
            goto LABEL_2178;
          if ((v756 - 79) <= 1)
          {
            __dst = &v1531[8];
            *(_QWORD *)&v1530 = &v1531[8];
            *((_QWORD *)&v1530 + 1) = 4;
            *(_DWORD *)v1531 = 0;
            v757 = sub_1C49EE844((uint64_t)&v1446, *(_QWORD *)(v681 + 24));
            if (v757)
            {
              v758 = sub_1C49EE8D4(v757);
              if (*(_DWORD *)(v758 + 84) - *(_DWORD *)(v758 + 88) >= v1519)
              {
                v759 = v758;
                v760 = *(_QWORD *)(v758 + 72);
                v761 = 80;
                if (v760 == *(_QWORD *)(v758 + 64))
                  v761 = 84;
                v762 = *(unsigned int *)(v758 + v761);
                if ((_DWORD)v762)
                {
                  v763 = 8 * v762;
                  v764 = *(unint64_t **)(v758 + 72);
                  while (*v764 >= 0xFFFFFFFFFFFFFFFELL)
                  {
                    ++v764;
                    v763 -= 8;
                    if (!v763)
                      goto LABEL_1362;
                  }
                }
                else
                {
                  v764 = *(unint64_t **)(v758 + 72);
                }
                v774 = (unint64_t *)(v760 + 8 * v762);
                if (v764 != v774)
                {
                  v775 = *v764;
LABEL_1353:
                  sub_1C49E178C(&v1551, *(_QWORD **)(v775 + 8), (v775 - *(_QWORD *)(*(_QWORD *)(v775 + 8) + 32)) >> 5, v1484, 1, 0);
                  v776 = v1551.__r_.__value_.__r.__words[0];
                  v777 = v1551.__r_.__value_.__r.__words[1];
                  while (1)
                  {
                    v778 = HIDWORD(v776);
                    if (v777 == HIDWORD(v776))
                      break;
                    if (v778 >= v1447)
                      sub_1C49F0388((uint64_t)&v1446, (HIDWORD(v776) + 1));
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&__dst, (uint64_t)v1446 + 32 * v778);
                    v776 = (v776 & 0xFFFFFFFF00000000) + 0x100000000;
                  }
                  v779 = v764 + 1;
                  v638 = v1415;
                  while (v779 != v774)
                  {
                    v780 = *v779++;
                    v775 = v780;
                    if (v780 <= 0xFFFFFFFFFFFFFFFDLL)
                    {
                      v764 = v779 - 1;
                      goto LABEL_1353;
                    }
                  }
                }
LABEL_1362:
                if ((void *)v1530 == __dst)
                  v781 = (char *)&v1530 + 12;
                else
                  v781 = (char *)&v1530 + 8;
                v782 = *(unsigned int *)v781;
                if ((_DWORD)v782)
                {
                  v783 = 8 * v782;
                  v784 = (uint64_t *)v1530;
                  v680 = v1422;
                  while ((unint64_t)*v784 >= 0xFFFFFFFFFFFFFFFELL)
                  {
                    ++v784;
                    v783 -= 8;
                    if (!v783)
                      goto LABEL_1379;
                  }
                }
                else
                {
                  v784 = (uint64_t *)v1530;
                  v680 = v1422;
                }
                v785 = v1530 + 8 * v782;
                if (v784 != (uint64_t *)v785)
                {
                  v786 = *v784;
LABEL_1373:
                  if (*(_DWORD *)(v786 + 16))
                    sub_1C49F1FA4((uint64_t)&v1446, *(_QWORD *)(v681 + 24), v681, 0, 0, v786);
                  v787 = (unint64_t *)(v784 + 1);
                  while (v787 != (unint64_t *)v785)
                  {
                    v788 = *v787++;
                    v786 = v788;
                    if (v788 <= 0xFFFFFFFFFFFFFFFDLL)
                    {
                      v784 = (uint64_t *)(v787 - 1);
                      goto LABEL_1373;
                    }
                  }
                }
LABEL_1379:
                v789 = *(void **)(v759 + 72);
                if (v789 == *(void **)(v759 + 64))
                {
LABEL_1380:
                  *(_DWORD *)(v759 + 84) = 0;
                  *(_DWORD *)(v759 + 88) = 0;
                }
                else
                {
                  v790 = *(unsigned int *)(v759 + 80);
                  if (v790 < 0x21
                    || 4 * (*(_DWORD *)(v759 + 84) - *(_DWORD *)(v759 + 88)) >= v790)
                  {
                    memset(v789, 255, 8 * v790);
                    goto LABEL_1380;
                  }
                  free(v789);
                  v796 = *(_DWORD *)(v759 + 84) - *(_DWORD *)(v759 + 88);
                  v797 = 1 << (33 - __clz(v796 - 1));
                  *(_DWORD *)(v759 + 84) = 0;
                  *(_DWORD *)(v759 + 88) = 0;
                  if (v796 <= 0x10)
                    v798 = 32;
                  else
                    v798 = v797;
                  *(_DWORD *)(v759 + 80) = v798;
                  v799 = malloc_type_malloc(8 * v798, 0x4065EBACuLL);
                  if (!v799)
                    goto LABEL_2181;
                  *(_QWORD *)(v759 + 72) = v799;
                  memset(v799, 255, 8 * *(unsigned int *)(v759 + 80));
                }
              }
            }
            if ((void *)v1530 != __dst)
              free((void *)v1530);
          }
          if ((std::string::size_type *)v1557.__r_.__value_.__l.__data_ != &v1557.__r_.__value_.__r.__words[2])
            free(v1557.__r_.__value_.__l.__data_);
          goto LABEL_1385;
        }
      }
LABEL_1277:
      sub_1C49F3004((uint64_t)&v1446, v681);
      v728 = v1452;
      if (v1452)
      {
        __dst = (void *)v681;
        v729 = sub_1C49F2BBC((uint64_t)&v1468, (uint64_t *)&__dst);
        v730 = *v729;
        if ((_DWORD)v730)
          LODWORD(v728) = sub_1C49F2C20((uint64_t *)&v1466, v728, v730);
        *v729 = v728;
        v731 = sub_1C4AD4D04(v681);
        sub_1C49F2EA8((uint64_t)&v1452, v731);
      }
      if ((_DWORD)v1447)
      {
        v732 = v1446;
        v733 = 32 * v1447;
        do
        {
          sub_1C49F1E00((uint64_t)&v1446, (uint64_t)v732);
          if (v732[4])
            sub_1C49F1FA4((uint64_t)&v1446, *(_QWORD *)(v681 + 24), v681, 0, 0, (uint64_t)v732);
          v732 += 8;
          v733 -= 32;
        }
        while (v733);
        if ((_DWORD)v1447)
        {
          v734 = (char *)v1446;
          v735 = 32 * v1447;
          do
          {
            v736 = *(char **)&v734[v735 - 24];
            if (&v734[v735 - 8] != v736)
              free(v736);
            v735 -= 32;
          }
          while (v735);
        }
      }
      LODWORD(v1447) = 0;
      goto LABEL_1292;
    }
LABEL_1409:
    if ((_DWORD)v1449)
    {
      v800 = (char *)v1448;
      v801 = (char *)v1448 + 96 * v1449;
      do
      {
        if (*((_DWORD *)v800 + 11) == *((_DWORD *)v800 + 12))
          goto LABEL_1427;
        v802 = *((_QWORD *)v800 + 4);
        v803 = 40;
        if (v802 == *((_QWORD *)v800 + 3))
          v803 = 44;
        v804 = *(unsigned int *)&v800[v803];
        if ((_DWORD)v804)
        {
          v805 = 8 * v804;
          v806 = (uint64_t *)*((_QWORD *)v800 + 4);
          while ((unint64_t)*v806 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v806;
            v805 -= 8;
            if (!v805)
              goto LABEL_1426;
          }
        }
        else
        {
          v806 = (uint64_t *)*((_QWORD *)v800 + 4);
        }
        v807 = (_QWORD *)(v802 + 8 * v804);
        if (v806 != v807)
        {
          v808 = *v806;
LABEL_1422:
          sub_1C49F20C4((uint64_t)&v1446, v808);
          v809 = (unint64_t *)(v806 + 1);
          while (v809 != v807)
          {
            v810 = *v809++;
            v808 = v810;
            if (v810 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v806 = (uint64_t *)(v809 - 1);
              goto LABEL_1422;
            }
          }
        }
LABEL_1426:
        if (!v800[4])
        {
LABEL_1427:
          v811 = *((unsigned int *)v800 + 4);
          if ((_DWORD)v811)
          {
            v812 = (uint64_t *)*((_QWORD *)v800 + 1);
            v813 = 8 * v811;
            do
            {
              v814 = *v812++;
              sub_1C49F20C4((uint64_t)&v1446, v814);
              v813 -= 8;
            }
            while (v813);
          }
        }
        v800 += 96;
      }
      while (v800 != v801);
    }
    if ((_DWORD)v1447)
    {
      v815 = (char *)v1446;
      v816 = 32 * v1447;
      do
      {
        sub_1C49F1E00((uint64_t)&v1446, (uint64_t)v815);
        v815 += 32;
        v816 -= 32;
      }
      while (v816);
    }
    if ((_DWORD)v1451)
    {
      v817 = (char *)v1450;
      v818 = (char *)v1450 + 104 * v1451;
      while (1)
      {
        v819 = *((_QWORD *)v817 + 5);
        v820 = 48;
        if (v819 == *((_QWORD *)v817 + 4))
          v820 = 52;
        v821 = *(unsigned int *)&v817[v820];
        if ((_DWORD)v821)
        {
          v822 = 8 * v821;
          v823 = (uint64_t *)*((_QWORD *)v817 + 5);
          while ((unint64_t)*v823 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v823;
            v822 -= 8;
            if (!v822)
              goto LABEL_1454;
          }
        }
        else
        {
          v823 = (uint64_t *)*((_QWORD *)v817 + 5);
        }
        v824 = (_QWORD *)(v819 + 8 * v821);
        if (v823 != v824)
          break;
LABEL_1454:
        v817 += 104;
        if (v817 == v818)
          goto LABEL_1455;
      }
      v825 = *v823;
      v826 = **(unsigned __int16 **)(*(_QWORD *)(*v823 + 8) + 16);
      for (i3 = sub_1C4C915C4(v826); (i3 & 0xFF00000000) != 0; v823 = (uint64_t *)(v828 - 1))
      {
        if ((_DWORD)i3 == 188 && sub_1C4C32DEC(v826) - 79 >= 2)
          sub_1C49F20C4((uint64_t)&v1446, v825);
        v828 = (unint64_t *)(v823 + 1);
        do
        {
          if (v828 == v824)
            goto LABEL_1454;
          v829 = *v828++;
          v825 = v829;
        }
        while (v829 > 0xFFFFFFFFFFFFFFFDLL);
        v826 = **(unsigned __int16 **)(*(_QWORD *)(v825 + 8) + 16);
        i3 = sub_1C4C915C4(v826);
      }
LABEL_2178:
      llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
    }
LABEL_1455:
    v830 = *(_QWORD *)(v638 + 56);
    for (i4 = v1422; v830 != i4; v830 = *(_QWORD *)(v830 + 8))
    {
      v832 = **(unsigned __int16 **)(v830 + 16);
      v833 = sub_1C4C915C4(v832);
      v835 = (_DWORD)v833 == 80 || (v833 & 0xFFFFFFFD) == 165;
      if ((v833 & 0xFF00000000) != 0 && v835)
      {
        v837 = *(_QWORD *)(v830 + 32) + 32 * sub_1C4C2FD5C(v832);
        __dst = 0;
        v838 = sub_1C49F21C0(v1470, v1471, v837, &__dst);
        v839 = v1470;
        v840 = v1471;
        v841 = (void *)(v1470 + 16 * v1471);
        v842 = !v838 || __dst == v841;
        v843 = v842 ? 0 : *((unsigned int *)__dst + 3);
        v844 = *(_QWORD *)(v830 + 32) + 32 * sub_1C4C2FD5C(**(unsigned __int16 **)(v830 + 16));
        __dst = 0;
        if (!sub_1C49F21C0(v839, v840, v844, &__dst) || __dst == v841)
        {
          v846 = v1470;
          v847 = v1471;
        }
        else
        {
          sub_1C49F2C20((uint64_t *)&v1466, v843, *((unsigned int *)__dst + 3));
          v846 = v1470;
          v847 = v1471;
          v840 = v1471;
          v839 = v1470;
        }
        v848 = *(_QWORD *)(v830 + 32) + 32 * sub_1C4C2FD5C(**(unsigned __int16 **)(v830 + 16));
        __dst = 0;
        v849 = !sub_1C49F21C0(v846, v847, v848, &__dst) || __dst == (void *)(v839 + 16 * v840);
        i4 = v1422;
        if (!v849)
          sub_1C49F2C20((uint64_t *)&v1466, v843, *((unsigned int *)__dst + 3));
      }
      if ((*(_BYTE *)v830 & 4) == 0)
      {
        while ((*(_WORD *)(v830 + 44) & 8) != 0)
          v830 = *(_QWORD *)(v830 + 8);
      }
    }
    v850 = atomic_load((unsigned __int8 *)&qword_1ED7ECB58);
    if ((v850 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7ECB58))
    {
      byte_1ED7ECB32 = 0;
      __cxa_guard_release(&qword_1ED7ECB58);
    }
    if (!byte_1ED7ECB32)
    {
      for (i5 = *(_QWORD *)(v638 + 56); i5 != i4; i5 = *(_QWORD *)(i5 + 8))
      {
        if ((*(_BYTE *)(*(_QWORD *)(i5 + 16) + 20) & 4) != 0)
        {
          v854 = *(unsigned int *)(i5 + 40);
          if ((_DWORD)v854)
          {
            v855 = 0;
            v856 = *(_QWORD *)(i5 + 32);
            v857 = v856 + 32 * v854;
            do
            {
              if (v1471)
              {
                v858 = ((v856 >> 4) ^ (v856 >> 9)) & (v1471 - 1);
                v859 = *(_QWORD *)(v1470 + 16 * v858);
                if (v856 == v859)
                {
LABEL_1500:
                  if ((_DWORD)v858 != v1471)
                  {
                    v860 = v1470 + 16 * v858;
                    v861 = *(unsigned int *)(v860 + 8);
                    if ((_DWORD)v861)
                    {
                      if ((_DWORD)v855)
                        sub_1C49F2C20((uint64_t *)&v1466, v855, v861);
                      else
                        v855 = *(unsigned int *)(v860 + 8);
                    }
                  }
                }
                else
                {
                  v862 = 1;
                  while (v859 != -4096)
                  {
                    v863 = v858 + v862++;
                    v858 = v863 & (v1471 - 1);
                    v859 = *(_QWORD *)(v1470 + 16 * v858);
                    if (v856 == v859)
                      goto LABEL_1500;
                  }
                }
              }
              v856 += 32;
            }
            while (v856 != v857);
          }
          else
          {
            v855 = 0;
          }
          v864 = v1468;
          v865 = v1469;
          v866 = sub_1C49F31C4(v1468, v1469, i5);
          if ((uint64_t *)(v864 + 16 * v865) != v866)
          {
            v867 = *((unsigned int *)v866 + 2);
            if ((_DWORD)v867 && (_DWORD)v855 != 0)
              sub_1C49F2C20((uint64_t *)&v1466, v855, v867);
          }
          if (!i5)
            goto LABEL_1522;
        }
        if ((*(_BYTE *)i5 & 4) == 0)
        {
LABEL_1522:
          while ((*(_WORD *)(i5 + 44) & 8) != 0)
            i5 = *(_QWORD *)(i5 + 8);
        }
      }
    }
    v851 = atomic_load((unsigned __int8 *)&qword_1ED7ECB60);
    if ((v851 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7ECB60))
    {
      dword_1ED7ECB34 = 0;
      __cxa_guard_release(&qword_1ED7ECB60);
    }
    if (dword_1ED7ECB34 >= 1)
    {
      v1553 = &v1555;
      v1554 = 0;
      if ((_DWORD)v1467)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1553, (uint64_t)&v1555, v1467, 12);
        v852 = v1467;
      }
      else
      {
        v852 = 0;
      }
      *(_QWORD *)&v1525 = &v1526;
      *((_QWORD *)&v1525 + 1) = 0;
      sub_1C49F3364((unsigned int *)&v1525, v852);
      if (v1474)
      {
        v869 = v1525 + 12 * v1474;
        *(_QWORD *)v869 = 0x400000002;
        *(_DWORD *)(v869 + 8) = 7;
      }
      v870 = v1467;
      __dst = (char *)&v1530 + 8;
      *(_QWORD *)&v1530 = 0x600000000;
      sub_1C4765AA4((char *)&__dst, (v1467 + 63) >> 6, 0);
      *(_DWORD *)&v1531[40] = v870;
      v871 = *(_QWORD *)(v638 + 56);
      if (v871 == i4)
        goto LABEL_1582;
      v872 = 0;
      while (1)
      {
        ++v872;
        v873 = 1;
        while (1)
        {
          v874 = v873;
          v875 = *(unsigned int *)(v871 + 40);
          if ((_DWORD)v875)
          {
            v876 = *(_QWORD *)(v871 + 32);
            v877 = v876 + 32 * v875;
            do
            {
              if (v1471)
              {
                LODWORD(v878) = ((v876 >> 4) ^ (v876 >> 9)) & (v1471 - 1);
                v879 = (uint64_t *)(v1470 + 16 * v878);
                v880 = *v879;
                if (v876 == *v879)
                {
LABEL_1534:
                  if ((_DWORD)v878 != v1471)
                  {
                    if ((v874 & 1) != 0)
                    {
                      v881 = *((unsigned int *)v879 + 2);
                      if ((_DWORD)v881)
                      {
                        v882 = *((_QWORD *)__dst + (v881 >> 6));
                        if ((v882 & (1 << v881)) == 0)
                        {
                          *((_QWORD *)__dst + (v881 >> 6)) = v882 | (1 << v881);
                          v883 = v1554;
                          if (!(_DWORD)v1554 || v872 != *((_DWORD *)v1553 + 3 * v1554 - 3))
                          {
                            if (v1554 >= (unint64_t)HIDWORD(v1554))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1553, (uint64_t)&v1555, v1554 + 1, 12);
                              v883 = v1554;
                            }
                            v884 = (char *)v1553 + 12 * v883;
                            *(_QWORD *)v884 = v872 | (v881 << 32);
                            *((_DWORD *)v884 + 2) = 0;
                            LODWORD(v1554) = v1554 + 1;
                          }
                        }
                      }
                    }
                    else if (*((_DWORD *)v879 + 3))
                    {
                      v885 = sub_1C49F9518(*(_QWORD *)(v876 + 8), (unint64_t)(v876 - *(_QWORD *)(*(_QWORD *)(v876 + 8) + 32)) >> 5, v1484);
                      v887 = *((_DWORD *)v879 + 3);
                      if (v887)
                      {
                        v888 = (int32x2_t *)(v1525 + 12 * v887);
                        v889 = v888[1].i32[0];
                        if (v889 <= v886)
                          v889 = v886;
                        v888[1].i32[0] = v889;
                        *v888 = vmax_s32(*v888, (int32x2_t)v885);
                        if ((_DWORD)v1554)
                        {
                          v890 = (char *)v1553 + 12 * v1554;
                          if (*((_DWORD *)v890 - 1) > v889)
                            v889 = *((_DWORD *)v890 - 1);
                          *((_DWORD *)v890 - 1) = v889;
                        }
                      }
                    }
                  }
                }
                else
                {
                  v891 = 1;
                  while (v880 != -4096)
                  {
                    v892 = v878 + v891++;
                    v878 = v892 & (v1471 - 1);
                    v880 = *(_QWORD *)(v1470 + 16 * v878);
                    if (v876 == v880)
                    {
                      v879 = (uint64_t *)(v1470 + 16 * v878);
                      goto LABEL_1534;
                    }
                  }
                }
              }
              v876 += 32;
            }
            while (v876 != v877);
          }
          v893 = v1468;
          v894 = v1469;
          v895 = sub_1C49F31C4(v1468, v1469, v871);
          if ((uint64_t *)(v893 + 16 * v894) == v895)
            goto LABEL_1566;
          v896 = v895;
          if ((v874 & 1) == 0)
            break;
          v897 = *((unsigned int *)v895 + 2);
          if ((_DWORD)v897)
          {
            v898 = *((_QWORD *)__dst + (v897 >> 6));
            if ((v898 & (1 << v897)) == 0)
            {
              *((_QWORD *)__dst + (v897 >> 6)) = v898 | (1 << v897);
              v899 = v1554;
              if (!(_DWORD)v1554 || v872 != *((_DWORD *)v1553 + 3 * v1554 - 3))
              {
                if (v1554 >= (unint64_t)HIDWORD(v1554))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1553, (uint64_t)&v1555, v1554 + 1, 12);
                  v899 = v1554;
                }
                v900 = (char *)v1553 + 12 * v899;
                *(_QWORD *)v900 = v872 | (v897 << 32);
                *((_DWORD *)v900 + 2) = 0;
                LODWORD(v1554) = v1554 + 1;
              }
            }
          }
LABEL_1566:
          v873 = 0;
          if ((v874 & 1) == 0)
            goto LABEL_1576;
        }
        if (*((_DWORD *)v895 + 3))
        {
          v901 = sub_1C49F972C(*v895);
          v903 = *((_DWORD *)v896 + 3);
          if (v903)
          {
            v904 = (int32x2_t *)(v1525 + 12 * v903);
            v905 = v904[1].i32[0];
            if (v905 <= v902)
              v905 = v902;
            v904[1].i32[0] = v905;
            *v904 = vmax_s32(*v904, (int32x2_t)v901);
            if ((_DWORD)v1554)
            {
              v906 = (char *)v1553 + 12 * v1554;
              if (*((_DWORD *)v906 - 1) > v905)
                v905 = *((_DWORD *)v906 - 1);
              *((_DWORD *)v906 - 1) = v905;
            }
          }
        }
LABEL_1576:
        if (!v871 || (*(_BYTE *)v871 & 4) == 0)
        {
          while ((*(_WORD *)(v871 + 44) & 8) != 0)
            v871 = *(_QWORD *)(v871 + 8);
        }
        v871 = *(_QWORD *)(v871 + 8);
        if (v871 == v1422)
        {
LABEL_1582:
          v907 = v1554;
          i4 = v1422;
          if ((_DWORD)v1554)
          {
            *(_OWORD *)&v1551.__r_.__value_.__r.__words[1] = 0uLL;
            v908 = (char *)v1553;
            v909 = (char *)v1553 + 12 * v1554;
            v910 = v909 - 12;
            v911 = *((_QWORD *)v909 - 1);
            v912 = (std::string::size_type *)operator new(0x40uLL);
            v913 = 0x7FFFFFFF;
            *((_DWORD *)v912 + 8) = 0x7FFFFFFF;
            v912[5] = v911;
            v912[6] = (std::string::size_type)&v1551.__r_.__value_.__l.__size_;
            v912[7] = (std::string::size_type)&v1551.__r_.__value_.__l.__size_;
            *v912 = 0;
            v912[1] = 0;
            v912[2] = (std::string::size_type)&v1551.__r_.__value_.__l.__size_;
            v1551.__r_.__value_.__l.__size_ = (std::string::size_type)v912;
            v1551.__r_.__value_.__r.__words[0] = (std::string::size_type)v912;
            *((_BYTE *)v912 + 24) = 1;
            v1551.__r_.__value_.__r.__words[2] = 1;
            if (v910 != v908)
            {
              v914 = *(_DWORD *)v910;
              v915 = v908 - 24;
              v916 = 12 * v907;
              do
              {
                v917 = *(_DWORD *)&v915[v916];
                v918 = *(_DWORD *)&v915[v916 + 4];
                LODWORD(v1557.__r_.__value_.__l.__data_) = v918;
                v919 = *(_DWORD *)&v915[v916 + 8];
                HIDWORD(v1557.__r_.__value_.__r.__words[0]) = v919;
                v1557.__r_.__value_.__l.__size_ = (std::string::size_type)&v1551.__r_.__value_.__l.__size_;
                v1557.__r_.__value_.__r.__words[2] = (std::string::size_type)v912;
                if (v912 == &v1551.__r_.__value_.__r.__words[1])
                {
                  v919 = 0;
                }
                else
                {
                  v920 = *(_DWORD *)(v1525 + 12 * *((unsigned int *)v912 + 10) + 8) - *(_DWORD *)(v1525 + 12 * v918);
                  v921 = v920 & ~(v920 >> 31);
                  if (v919 >= v921)
                    v919 = v921;
                  if (*(int *)(v1525 + 12 * *((unsigned int *)v912 + 10) + 4) <= 60
                    && *(int *)(v1525 + 12 * v918 + 4) <= 60)
                  {
                    v919 += dword_1ED7ECB34;
                  }
                }
                v922 = sub_1C49F3224((uint64_t **)&v1551, v914 - v917 + v919, (uint64_t)&v1557);
                v912[6] = (std::string::size_type)v922;
                v914 = *(_DWORD *)&v915[v916];
                v916 -= 12;
                v912 = (std::string::size_type *)v922;
              }
              while (v916 != 12);
              v912 = (std::string::size_type *)v1551.__r_.__value_.__r.__words[0];
              v913 = *(_DWORD *)(v1551.__r_.__value_.__r.__words[0] + 32);
            }
            for (i6 = dword_1ED7ECB34; v913 <= dword_1ED7ECB34; i4 = v1422)
            {
              v924 = v912[6];
              v925 = v912[7];
              v926 = *((unsigned int *)v912 + 10);
              LODWORD(v1521) = *((_DWORD *)v912 + 10);
              v927 = *(_QWORD *)(v925 + 56);
              v1522 = v924;
              v1523 = v927;
              if (&v1551.__r_.__value_.__r.__words[1] == (std::string::size_type *)v924)
              {
                v934 = 0x80000000;
              }
              else
              {
                v928 = *(_QWORD *)(v924 + 56);
                if ((std::string::size_type *)v928 == &v1551.__r_.__value_.__r.__words[1])
                {
                  v932 = 0;
                }
                else
                {
                  v929 = *(_DWORD *)(v924 + 40);
                  v930 = v1525 + 12 * *(unsigned int *)(v928 + 40);
                  v931 = *(_DWORD *)(v930 + 4);
                  v932 = (*(_DWORD *)(v930 + 8) - *(_DWORD *)(v1525 + 12 * v929)) & ~((*(_DWORD *)(v930 + 8)
                                                                                       - *(_DWORD *)(v1525 + 12 * v929)) >> 31);
                  if (*(_DWORD *)(v924 + 44) < v932)
                    v932 = *(_DWORD *)(v924 + 44);
                  if (v931 <= 60)
                  {
                    if (*(int *)(v1525 + 12 * v929 + 4) <= 60)
                      v933 = i6;
                    else
                      v933 = 0;
                    v932 += v933;
                  }
                }
                v934 = *(_DWORD *)(v924 + 32) - v932;
              }
              if (&v1551.__r_.__value_.__r.__words[1] == (std::string::size_type *)v927)
              {
                v938 = 0;
              }
              else
              {
                v935 = *(_DWORD *)(v925 + 40);
                v936 = v1525 + 12 * *(unsigned int *)(v927 + 40);
                v937 = *(_DWORD *)(v936 + 4);
                v938 = (*(_DWORD *)(v936 + 8) - *(_DWORD *)(v1525 + 12 * v935)) & ~((*(_DWORD *)(v936 + 8)
                                                                                     - *(_DWORD *)(v1525 + 12 * v935)) >> 31);
                if (*(_DWORD *)(v925 + 44) < v938)
                  v938 = *(_DWORD *)(v925 + 44);
                if (v937 <= 60)
                {
                  if (*(int *)(v1525 + 12 * v935 + 4) <= 60)
                    v939 = i6;
                  else
                    v939 = 0;
                  v938 += v939;
                }
              }
              v940 = *(_DWORD *)(v925 + 32) - v938;
              v941 = 0x7FFFFFFF;
              if (v940 != 0x7FFFFFFF)
              {
                if (&v1551.__r_.__value_.__r.__words[1] == (std::string::size_type *)v925)
                {
                  v944 = 0;
                }
                else
                {
                  v942 = v1525 + 12 * *(unsigned int *)(v925 + 40);
                  v943 = *(_DWORD *)(v942 + 4);
                  LODWORD(v942) = *(_DWORD *)(v942 + 8) - *(_DWORD *)(v1525 + 12 * v926);
                  v944 = v942 & ~((int)v942 >> 31);
                  if (*((_DWORD *)v912 + 11) < v944)
                    v944 = *((_DWORD *)v912 + 11);
                  if (v943 <= 60)
                  {
                    if (*(int *)(v1525 + 12 * v926 + 4) > 60)
                      i6 = 0;
                    v944 += i6;
                  }
                }
                v941 = v940 + v913 - v944;
              }
              sub_1C49F2C20((uint64_t *)&v1466, v926, *(unsigned int *)(v925 + 40));
              v945 = *((_DWORD *)v912 + 11);
              v946 = *(_DWORD *)(v925 + 40);
              if (v945 <= *(_DWORD *)(v925 + 44))
                v945 = *(_DWORD *)(v925 + 44);
              HIDWORD(v1521) = v945;
              v947 = v1525;
              v948 = (int32x2_t *)(v1525 + 12 * v926);
              v949 = (int32x2_t *)(v1525 + 12 * v946);
              v950 = v948[1].i32[0];
              if (v950 <= v949[1].i32[0])
                v950 = v949[1].i32[0];
              v948[1].i32[0] = v950;
              v951 = vmax_s32(*v948, *v949);
              *v948 = v951;
              if (&v1551.__r_.__value_.__r.__words[1] == (std::string::size_type *)v927)
              {
                v945 = 0;
              }
              else
              {
                v953 = (int *)(v947 + 12 * *(unsigned int *)(v927 + 40) + 4);
                v952 = *v953;
                v954 = (v953[1] - v951.i32[0]) & ~((v953[1] - v951.i32[0]) >> 31);
                if (v945 >= v954)
                  v945 = v954;
                if (v952 <= 60 && v951.i32[1] <= 60)
                  v945 += dword_1ED7ECB34;
              }
              v955 = v945 + v941;
              sub_1C49F32EC((uint64_t **)&v1551, (uint64_t *)v912);
              sub_1C49F32EC((uint64_t **)&v1551, (uint64_t *)v925);
              v956 = sub_1C49F3224((uint64_t **)&v1551, v955, (uint64_t)&v1521);
              v957 = (std::string *)*((_QWORD *)v956 + 6);
              if (v957 != (std::string *)&v1551.__r_.__value_.__r.__words[1])
                v957[2].__r_.__value_.__l.__size_ = (std::string::size_type)v956;
              v958 = (std::string *)*((_QWORD *)v956 + 7);
              v638 = v1415;
              if (v958 != (std::string *)&v1551.__r_.__value_.__r.__words[1])
                v958[2].__r_.__value_.__r.__words[0] = (std::string::size_type)v956;
              if (&v1551.__r_.__value_.__r.__words[1] != (std::string::size_type *)v924)
              {
                v959 = *(_QWORD *)(v924 + 56);
                if ((std::string::size_type *)v959 == &v1551.__r_.__value_.__r.__words[1])
                {
                  v963 = 0;
                }
                else
                {
                  v960 = *(_DWORD *)(v924 + 40);
                  v961 = *(_DWORD *)(v1525 + 12 * *(unsigned int *)(v959 + 40) + 8) - *(_DWORD *)(v1525 + 12 * v960);
                  v962 = v961 & ~(v961 >> 31);
                  if (*(_DWORD *)(v924 + 44) >= v962)
                    v963 = v962;
                  else
                    v963 = *(_DWORD *)(v924 + 44);
                  if (*(int *)(v1525 + 12 * *(unsigned int *)(v959 + 40) + 4) <= 60
                    && *(int *)(v1525 + 12 * v960 + 4) <= 60)
                  {
                    v963 += dword_1ED7ECB34;
                  }
                }
                v1557 = *(std::string *)(v924 + 40);
                sub_1C49F32EC((uint64_t **)&v1551, (uint64_t *)v924);
                v964 = sub_1C49F3224((uint64_t **)&v1551, v963 + v934, (uint64_t)&v1557);
                v965 = (std::string *)*((_QWORD *)v964 + 6);
                if (v965 != (std::string *)&v1551.__r_.__value_.__r.__words[1])
                  v965[2].__r_.__value_.__l.__size_ = (std::string::size_type)v964;
                v966 = (std::string *)*((_QWORD *)v964 + 7);
                if (v966 != (std::string *)&v1551.__r_.__value_.__r.__words[1])
                  v966[2].__r_.__value_.__r.__words[0] = (std::string::size_type)v964;
              }
              v912 = (std::string::size_type *)v1551.__r_.__value_.__r.__words[0];
              v913 = *(_DWORD *)(v1551.__r_.__value_.__r.__words[0] + 32);
              i6 = dword_1ED7ECB34;
            }
            sub_1C49F3440((_QWORD *)v1551.__r_.__value_.__l.__size_);
          }
          if (__dst != (char *)&v1530 + 8)
            free(__dst);
          if ((char **)v1525 != &v1526)
            free((void *)v1525);
          if (v1553 != &v1555)
            free(v1553);
          break;
        }
      }
    }
    LODWORD(v1480) = 0;
    v967 = sub_1C49EE844((uint64_t)&v1446, v638);
    v968 = v967;
    v969 = *(_QWORD *)(v638 + 48) & 0xFFFFFFFFFFFFFFF8;
    if (i4 != v969)
    {
      if (!v969 || (*(_BYTE *)v969 & 4) == 0)
      {
        while ((*(_WORD *)(v969 + 44) & 4) != 0)
          v969 = *(_QWORD *)v969 & 0xFFFFFFFFFFFFFFF8;
      }
      if (**(_WORD **)(v969 + 16) == 623)
        goto LABEL_1834;
    }
    if (v1512)
    {
      v970 = -1;
      v971 = i4;
      do
      {
        v971 = *(_QWORD *)(v971 + 8);
        ++v970;
      }
      while (v971 != i4);
      v972 = *(unsigned __int8 *)(v967 + 16) | (v1513 < v970);
      v973 = v972 != 0;
      *(_BYTE *)(v967 + 16) = v972;
    }
    else
    {
      v973 = 1;
    }
    if (v1514)
    {
      if ((_DWORD)v1451)
      {
        v974 = (char *)v1450;
        v975 = (char *)v1450 + 104 * v1451;
        do
        {
          if (*((_DWORD *)v974 + 13) == *((_DWORD *)v974 + 14))
          {
            v976 = *((unsigned int *)v974 + 4);
            if ((_DWORD)v976)
            {
              v977 = (int *)*((_QWORD *)v974 + 1);
              v978 = v1480;
              v979 = 4 * v976;
              do
              {
                v980 = *v977;
                if (v978 >= HIDWORD(v1480))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1479, (uint64_t)v1481, v978 + 1, 4);
                  v978 = v1480;
                }
                *((_DWORD *)v1479 + v978) = v980;
                v978 = v1480 + 1;
                LODWORD(v1480) = v1480 + 1;
                ++v977;
                v979 -= 4;
              }
              while (v979);
              *((_DWORD *)v974 + 4) = 0;
              *v974 = 1;
            }
          }
          v974 += 104;
        }
        while (v974 != v975);
      }
      if ((_DWORD)v1449)
      {
        v981 = (char *)v1448;
        v982 = (char *)v1448 + 96 * v1449;
        do
        {
          if (*((_DWORD *)v981 + 11) == *((_DWORD *)v981 + 12))
          {
            v983 = *((unsigned int *)v981 + 4);
            if ((_DWORD)v983)
            {
              v984 = (uint64_t *)*((_QWORD *)v981 + 1);
              v985 = 8 * v983;
              do
              {
                v986 = sub_1C49F20C4((uint64_t)&v1446, *v984);
                v987 = v1480;
                if (v1480 >= (unint64_t)HIDWORD(v1480))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1479, (uint64_t)v1481, v1480 + 1, 4);
                  v987 = v1480;
                }
                *((_DWORD *)v1479 + v987) = v986;
                LODWORD(v1480) = v1480 + 1;
                ++v984;
                v985 -= 8;
              }
              while (v985);
            }
            *((_DWORD *)v981 + 4) = 0;
            *(_DWORD *)v981 = 0;
            v981[4] = 1;
          }
          v981 += 96;
        }
        while (v981 != v982);
      }
    }
    v988 = v1452;
    if (v1452)
    {
      v989 = v1480;
      if (v1480 >= (unint64_t)HIDWORD(v1480))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1479, (uint64_t)v1481, v1480 + 1, 4);
        v989 = v1480;
      }
      *((_DWORD *)v1479 + v989) = v988;
      LODWORD(v1480) = v1480 + 1;
      __dst = &v1453;
      LODWORD(v1530) = 0;
      sub_1C49F2F90((uint64_t)&__dst);
      if ((v1453 & 0x3F) == 0)
      {
        v1452 = 0;
        if (!v973)
          goto LABEL_1746;
LABEL_1700:
        if ((_DWORD)v1447)
        {
          v990 = (char *)v1446;
          v991 = (char *)v1446 + 32 * v1447;
          do
          {
            v992 = *((unsigned int *)v990 + 4);
            if ((_DWORD)v992)
            {
              v993 = (uint64_t *)*((_QWORD *)v990 + 1);
              v994 = 8 * v992;
              do
              {
                v995 = sub_1C49F20C4((uint64_t)&v1446, *v993);
                v996 = v1480;
                if (v1480 >= (unint64_t)HIDWORD(v1480))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1479, (uint64_t)v1481, v1480 + 1, 4);
                  v996 = v1480;
                }
                *((_DWORD *)v1479 + v996) = v995;
                LODWORD(v1480) = v1480 + 1;
                ++v993;
                v994 -= 8;
              }
              while (v994);
            }
            v990 += 32;
          }
          while (v990 != v991);
          if ((_DWORD)v1447)
          {
            v997 = (char *)v1446;
            v998 = 32 * v1447;
            do
            {
              v999 = *(char **)&v997[v998 - 24];
              if (&v997[v998 - 8] != v999)
                free(v999);
              v998 -= 32;
            }
            while (v998);
          }
        }
        LODWORD(v1447) = 0;
        if (!v1512)
          goto LABEL_1718;
        v1000 = sub_1C49EE8D4(v968);
        v1001 = *(void **)(v1000 + 72);
        if (v1001 != *(void **)(v1000 + 64))
        {
          v1083 = *(unsigned int *)(v1000 + 80);
          if (v1083 >= 0x21
            && 4 * (*(_DWORD *)(v1000 + 84) - *(_DWORD *)(v1000 + 88)) < v1083)
          {
            free(v1001);
            v1085 = *(_DWORD *)(v1000 + 84) - *(_DWORD *)(v1000 + 88);
            v1086 = 1 << (33 - __clz(v1085 - 1));
            *(_DWORD *)(v1000 + 84) = 0;
            *(_DWORD *)(v1000 + 88) = 0;
            if (v1085 <= 0x10)
              v1087 = 32;
            else
              v1087 = v1086;
            *(_DWORD *)(v1000 + 80) = v1087;
            v1088 = malloc_type_malloc(8 * v1087, 0x4065EBACuLL);
            if (!v1088)
              goto LABEL_2181;
            *(_QWORD *)(v1000 + 72) = v1088;
            memset(v1088, 255, 8 * *(unsigned int *)(v1000 + 80));
LABEL_1716:
            v1002 = *(void **)(v1000 + 136);
            if (v1002 == *(void **)(v1000 + 128))
            {
LABEL_1717:
              *(_DWORD *)(v1000 + 148) = 0;
              *(_DWORD *)(v1000 + 152) = 0;
LABEL_1718:
              v1003 = (char *)v1450;
              if ((_DWORD)v1451)
              {
                v1004 = (char *)v1450 + 104 * v1451;
                do
                {
                  if (*((_DWORD *)v1003 + 13) == *((_DWORD *)v1003 + 14))
                    goto LABEL_1738;
                  v1005 = *((_QWORD *)v1003 + 5);
                  v1006 = 48;
                  if (v1005 == *((_QWORD *)v1003 + 4))
                    v1006 = 52;
                  v1007 = *(unsigned int *)&v1003[v1006];
                  if ((_DWORD)v1007)
                  {
                    v1008 = 8 * v1007;
                    v1009 = (uint64_t *)*((_QWORD *)v1003 + 5);
                    while ((unint64_t)*v1009 >= 0xFFFFFFFFFFFFFFFELL)
                    {
                      ++v1009;
                      v1008 -= 8;
                      if (!v1008)
                        goto LABEL_1737;
                    }
                  }
                  else
                  {
                    v1009 = (uint64_t *)*((_QWORD *)v1003 + 5);
                  }
                  v1010 = (_QWORD *)(v1005 + 8 * v1007);
                  if (v1009 != v1010)
                  {
                    v1011 = *v1009;
LABEL_1731:
                    v1012 = sub_1C49F20C4((uint64_t)&v1446, v1011);
                    v1013 = v1480;
                    if (v1480 >= (unint64_t)HIDWORD(v1480))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1479, (uint64_t)v1481, v1480 + 1, 4);
                      v1013 = v1480;
                    }
                    *((_DWORD *)v1479 + v1013) = v1012;
                    LODWORD(v1480) = v1480 + 1;
                    v1014 = (unint64_t *)(v1009 + 1);
                    while (v1014 != v1010)
                    {
                      v1015 = *v1014++;
                      v1011 = v1015;
                      if (v1015 <= 0xFFFFFFFFFFFFFFFDLL)
                      {
                        v1009 = (uint64_t *)(v1014 - 1);
                        goto LABEL_1731;
                      }
                    }
                  }
LABEL_1737:
                  if (!*v1003)
                  {
LABEL_1738:
                    v1016 = *((unsigned int *)v1003 + 4);
                    if ((_DWORD)v1016)
                    {
                      v1017 = (int *)*((_QWORD *)v1003 + 1);
                      v1018 = v1480;
                      v1019 = 4 * v1016;
                      do
                      {
                        v1020 = *v1017;
                        if (v1018 >= HIDWORD(v1480))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1479, (uint64_t)v1481, v1018 + 1, 4);
                          v1018 = v1480;
                        }
                        *((_DWORD *)v1479 + v1018) = v1020;
                        v1018 = v1480 + 1;
                        LODWORD(v1480) = v1480 + 1;
                        ++v1017;
                        v1019 -= 4;
                      }
                      while (v1019);
                    }
                  }
                  v1003 += 104;
                }
                while (v1003 != v1004);
                v1003 = (char *)v1450;
                v1021 = v1451;
              }
              else
              {
                v1021 = 0;
              }
              sub_1C49EEAA4((uint64_t)v1003, (uint64_t)&v1003[104 * v1021]);
              LODWORD(v1451) = 0;
              v1055 = (char *)v1448;
              if ((_DWORD)v1449)
              {
                v1057 = (char *)v1448 + 96 * v1449;
                do
                {
                  if (*((_DWORD *)v1055 + 11) == *((_DWORD *)v1055 + 12))
                    goto LABEL_1815;
                  v1058 = *((_QWORD *)v1055 + 4);
                  v1059 = 40;
                  if (v1058 == *((_QWORD *)v1055 + 3))
                    v1059 = 44;
                  v1060 = *(unsigned int *)&v1055[v1059];
                  if ((_DWORD)v1060)
                  {
                    v1061 = 8 * v1060;
                    v1062 = (uint64_t *)*((_QWORD *)v1055 + 4);
                    while ((unint64_t)*v1062 >= 0xFFFFFFFFFFFFFFFELL)
                    {
                      ++v1062;
                      v1061 -= 8;
                      if (!v1061)
                        goto LABEL_1814;
                    }
                  }
                  else
                  {
                    v1062 = (uint64_t *)*((_QWORD *)v1055 + 4);
                  }
                  v1063 = (_QWORD *)(v1058 + 8 * v1060);
                  if (v1062 != v1063)
                  {
                    v1064 = *v1062;
LABEL_1808:
                    v1065 = sub_1C49F20C4((uint64_t)&v1446, v1064);
                    v1066 = v1480;
                    if (v1480 >= (unint64_t)HIDWORD(v1480))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1479, (uint64_t)v1481, v1480 + 1, 4);
                      v1066 = v1480;
                    }
                    *((_DWORD *)v1479 + v1066) = v1065;
                    LODWORD(v1480) = v1480 + 1;
                    v1067 = (unint64_t *)(v1062 + 1);
                    while (v1067 != v1063)
                    {
                      v1068 = *v1067++;
                      v1064 = v1068;
                      if (v1068 <= 0xFFFFFFFFFFFFFFFDLL)
                      {
                        v1062 = (uint64_t *)(v1067 - 1);
                        goto LABEL_1808;
                      }
                    }
                  }
LABEL_1814:
                  if (!v1055[4])
                  {
LABEL_1815:
                    *(_DWORD *)v1055 = 0;
                    v1069 = *((unsigned int *)v1055 + 4);
                    if ((_DWORD)v1069)
                    {
                      v1070 = (uint64_t *)*((_QWORD *)v1055 + 1);
                      v1071 = 8 * v1069;
                      do
                      {
                        v1072 = sub_1C49F20C4((uint64_t)&v1446, *v1070);
                        v1073 = v1480;
                        if (v1480 >= (unint64_t)HIDWORD(v1480))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1479, (uint64_t)v1481, v1480 + 1, 4);
                          v1073 = v1480;
                        }
                        *((_DWORD *)v1479 + v1073) = v1072;
                        LODWORD(v1480) = v1480 + 1;
                        ++v1070;
                        v1071 -= 8;
                      }
                      while (v1071);
                    }
                  }
                  v1055 += 96;
                }
                while (v1055 != v1057);
                v1055 = (char *)v1448;
                v1056 = v1449;
              }
              else
              {
                v1056 = 0;
              }
              goto LABEL_1823;
            }
            v1084 = *(unsigned int *)(v1000 + 144);
            if (v1084 < 0x21
              || 4 * (*(_DWORD *)(v1000 + 148) - *(_DWORD *)(v1000 + 152)) >= v1084)
            {
              memset(v1002, 255, 8 * v1084);
              goto LABEL_1717;
            }
            free(v1002);
            v1089 = *(_DWORD *)(v1000 + 148) - *(_DWORD *)(v1000 + 152);
            v1090 = 1 << (33 - __clz(v1089 - 1));
            *(_DWORD *)(v1000 + 148) = 0;
            *(_DWORD *)(v1000 + 152) = 0;
            if (v1089 <= 0x10)
              v1091 = 32;
            else
              v1091 = v1090;
            *(_DWORD *)(v1000 + 144) = v1091;
            v1092 = malloc_type_malloc(8 * v1091, 0x4065EBACuLL);
            if (v1092)
            {
              *(_QWORD *)(v1000 + 136) = v1092;
              memset(v1092, 255, 8 * *(unsigned int *)(v1000 + 144));
              goto LABEL_1718;
            }
LABEL_2181:
            llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
          }
          memset(v1001, 255, 8 * v1083);
        }
        *(_DWORD *)(v1000 + 84) = 0;
        *(_DWORD *)(v1000 + 88) = 0;
        goto LABEL_1716;
      }
    }
    if (v973)
      goto LABEL_1700;
LABEL_1746:
    v1022 = sub_1C49EE8D4(v968);
    sub_1C49EF31C(v1022 + 16, (uint64_t *)&v1446, 0, 0);
    if ((_DWORD)v1447)
    {
      v1023 = (char *)v1446;
      v1024 = 32 * v1447;
      do
      {
        v1025 = *(char **)&v1023[v1024 - 24];
        if (&v1023[v1024 - 8] != v1025)
          free(v1025);
        v1024 -= 32;
      }
      while (v1024);
    }
    LODWORD(v1447) = 0;
    if ((_DWORD)v1451)
    {
      v1026 = (char *)v1450;
      v1027 = (char *)v1450 + 104 * v1451;
      do
      {
        if (v1026[1])
        {
          v1028 = *((unsigned int *)v1026 + 4);
          if ((_DWORD)v1028)
          {
            v1029 = (int *)*((_QWORD *)v1026 + 1);
            v1030 = v1480;
            v1031 = 4 * v1028;
            do
            {
              v1032 = *v1029;
              if (v1030 >= HIDWORD(v1480))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1479, (uint64_t)v1481, v1030 + 1, 4);
                v1030 = v1480;
              }
              *((_DWORD *)v1479 + v1030) = v1032;
              v1030 = v1480 + 1;
              LODWORD(v1480) = v1480 + 1;
              ++v1029;
              v1031 -= 4;
            }
            while (v1031);
          }
          v1026[1] = 0;
        }
        v1026 += 104;
      }
      while (v1026 != v1027);
    }
    v1401 = (llvm::SmallPtrSetImplBase *)v968;
    v1033 = sub_1C49EE8D4(v968);
    sub_1C49EF878((_DWORD *)(v1033 + 48), (uint64_t *)&v1450);
    sub_1C49EEAA4((uint64_t)v1450, (uint64_t)v1450 + 104 * v1451);
    LODWORD(v1451) = 0;
    if (v1517 && (_DWORD)v1449)
    {
      v1034 = (char *)v1448;
      v1035 = (char *)v1448 + 96 * v1449;
      v1423 = v1035;
      do
      {
        v1036 = *((_QWORD *)v1034 + 4);
        v1037 = 40;
        if (v1036 == *((_QWORD *)v1034 + 3))
          v1037 = 44;
        v1038 = *(unsigned int *)&v1034[v1037];
        if ((_DWORD)v1038)
        {
          v1039 = 8 * v1038;
          v1040 = (uint64_t *)*((_QWORD *)v1034 + 4);
          while ((unint64_t)*v1040 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v1040;
            v1039 -= 8;
            if (!v1039)
              goto LABEL_1792;
          }
        }
        else
        {
          v1040 = (uint64_t *)*((_QWORD *)v1034 + 4);
        }
        v1041 = (uint64_t *)(v1036 + 8 * v1038);
        if (v1040 != v1041)
        {
          v1042 = *((_DWORD *)v1034 + 11) - *((_DWORD *)v1034 + 12);
          do
          {
            v1043 = *v1040;
            v1044 = sub_1C4C915C4(**(unsigned __int16 **)(*(_QWORD *)(*v1040 + 8) + 16));
            if ((v1044 & 0xFF00000000) == 0)
              goto LABEL_2178;
            if ((v1044 - 79) <= 1)
            {
              v1045 = sub_1C49F20C4((uint64_t)&v1446, v1043);
              v1046 = v1480;
              if (v1480 >= (unint64_t)HIDWORD(v1480))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1479, (uint64_t)v1481, v1480 + 1, 4);
                v1046 = v1480;
              }
              *((_DWORD *)v1479 + v1046) = v1045;
              LODWORD(v1480) = v1480 + 1;
              v1047 = sub_1C477672C((uint64_t)(v1034 + 24), v1043);
              v1048 = *((_QWORD *)v1034 + 4);
              v1049 = 40;
              if (v1048 == *((_QWORD *)v1034 + 3))
                v1049 = 44;
              if (v1047 != (_QWORD *)(v1048 + 8 * *(unsigned int *)&v1034[v1049]))
              {
                *v1047 = -2;
                ++*((_DWORD *)v1034 + 12);
              }
            }
            v1050 = (unint64_t *)(v1040 + 1);
            while (v1050 != (unint64_t *)v1041)
            {
              v1051 = *v1050++;
              if (v1051 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                v1040 = (uint64_t *)(v1050 - 1);
                goto LABEL_1787;
              }
            }
            v1040 = v1041;
LABEL_1787:
            v1052 = *((_QWORD *)v1034 + 4);
            v1053 = 40;
            if (v1052 == *((_QWORD *)v1034 + 3))
              v1053 = 44;
          }
          while (v1040 != (uint64_t *)(v1052 + 8 * *(unsigned int *)&v1034[v1053]));
          v1035 = v1423;
          if (v1042 > *((_DWORD *)v1034 + 11) - *((_DWORD *)v1034 + 12))
          {
            *((_DWORD *)v1034 + 4) = 0;
            *(_DWORD *)v1034 = 0;
            v1034[4] = 1;
          }
        }
LABEL_1792:
        v1034 += 96;
      }
      while (v1034 != v1035);
    }
    v968 = (uint64_t)v1401;
    v1054 = sub_1C49EE8D4((uint64_t)v1401);
    sub_1C49EFCB8(v1054 + 32, (uint64_t *)&v1448, 0);
    v1055 = (char *)v1448;
    v1056 = v1449;
    v638 = v1415;
LABEL_1823:
    sub_1C49EEAFC(v1055, &v1055[96 * v1056]);
    LODWORD(v1449) = 0;
    v1074 = atomic_load((unsigned __int8 *)&qword_1ED7ECB68);
    if ((v1074 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7ECB68))
    {
      byte_1ED7ECB33 = 0;
      __cxa_guard_release(&qword_1ED7ECB68);
    }
    if (byte_1ED7ECB33 && v1480 >= 2)
    {
      v1075 = 4 * v1480;
      v1076 = 4;
      do
      {
        sub_1C49F2C20((uint64_t *)&v1466, *(unsigned int *)v1479, *(unsigned int *)((char *)v1479 + v1076));
        v1076 += 4;
      }
      while (v1075 != v1076);
    }
    if (v1512 && (_DWORD)v1480)
    {
      v1077 = (int *)v1479;
      v1078 = *(_DWORD *)(v968 + 8);
      v1079 = 4 * v1480;
      do
      {
        v1080 = *v1077;
        if (v1078 >= *(_DWORD *)(v968 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v968, v968 + 16, v1078 + 1, 4);
          v1078 = *(_DWORD *)(v968 + 8);
        }
        *(_DWORD *)(*(_QWORD *)v968 + 4 * v1078) = v1080;
        v1078 = *(_DWORD *)(v968 + 8) + 1;
        *(_DWORD *)(v968 + 8) = v1078;
        ++v1077;
        v1079 -= 4;
      }
      while (v1079);
    }
LABEL_1834:
    v1478 = 0;
    LODWORD(v1476) = 0;
    v1081 = *(unsigned int *)&__p[8];
    if (*(unsigned int *)&__p[8] >= (unint64_t)*(unsigned int *)&__p[12])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)&__p[16], *(unsigned int *)&__p[8] + 1, 8);
      v1081 = *(unsigned int *)&__p[8];
    }
    *(_QWORD *)(*(_QWORD *)__p + 8 * v1081) = v638;
    v1082 = ++*(_DWORD *)&__p[8];
    if (v1512)
    {
      v638 = *(_QWORD *)(v638 + 8);
      if ((llvm::MachineBasicBlock **)v638 != v1380)
        continue;
      if (v1082)
        sub_1C49EAC94((uint64_t)&v1446, v1410 & 1, (uint64_t)__p);
    }
    else
    {
      sub_1C49EAC94((uint64_t)&v1446, v1410 & 1, (uint64_t)__p);
      sub_1C49EDD28((uint64_t)&v1446);
      *(_DWORD *)&__p[8] = 0;
      v638 = *(_QWORD *)(v638 + 8);
      if ((llvm::MachineBasicBlock **)v638 != v1380)
        continue;
    }
    break;
  }
LABEL_1865:
  v1093 = (_BYTE *)*((_QWORD *)v1396 + 2);
  if (v1093[356])
  {
    v1094 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1093 + 176))(v1093);
    v1095 = *((_QWORD *)v1396 + 41);
    if ((llvm::MachineBasicBlock **)v1095 != v1380)
    {
      v1096 = (_QWORD *)(v1094 + 8);
      while (2)
      {
        if (v1512)
        {
          v1097 = *(uint64_t **)(v1095 + 64);
          v1098 = *(uint64_t **)(v1095 + 72);
          if (v1097 == v1098)
          {
            v1099 = 0;
          }
          else
          {
            v1099 = 0;
            do
            {
              v1100 = sub_1C49EE844((uint64_t)&v1446, *v1097);
              if (!*(_BYTE *)(v1100 + 16))
                v1099 |= *(_QWORD *)(v1100 + 72);
              ++v1097;
            }
            while (v1097 != v1098);
          }
          if (byte_1ED7ECFC0)
          {
            v1101 = *(_QWORD *)v1481[0] + 16 * *(int *)(v1095 + 24);
            v1102 = *(unsigned int *)(v1101 + 8);
            if ((_DWORD)v1102)
            {
              v1103 = *(unsigned int **)v1101;
              v1104 = *(_QWORD *)(v1095 + 32);
              v1105 = 4 * v1102;
              do
              {
                v1106 = sub_1C49EE844((uint64_t)&v1446, *(_QWORD *)(*(_QWORD *)(v1104 + 104) + 8 * *v1103));
                if (!*(_BYTE *)(v1106 + 16))
                  v1099 |= *(_QWORD *)(v1106 + 72);
                ++v1103;
                v1105 -= 4;
              }
              while (v1105);
            }
          }
        }
        else
        {
          v1099 = 0;
        }
        v1107 = v1095 + 48;
        for (i7 = *(_QWORD *)(v1095 + 56); i7 != v1107; i7 = *(_QWORD *)(i7 + 8))
        {
          v1109 = *(unsigned __int16 **)(i7 + 16);
          if ((v1109[4] & 0x10) == 0)
          {
            v1110 = *(_QWORD *)(*(_QWORD *)(i7 + 32) + 32 * sub_1C4C2FD5C(*v1109) + 16);
            if (sub_1C4AD4FB8(i7, 0, v1096) == 3)
            {
              if (llvm::MachineInstr::getNumExplicitOperands(i7))
              {
                v1111 = *(unsigned __int16 **)(i7 + 16);
                v1112 = *(_DWORD **)(i7 + 32);
                if ((word_1C6AA47DC[dword_1C6A9B6CC[*v1111]] & 0xFFFB) == 0x3A)
                {
                  v1115 = 2;
                }
                else if ((*v1112 & 0x10000FF) == 0x1000000)
                {
                  v1115 = *((unsigned __int8 *)v1111 + 4);
                  if ((v1111[4] & 2) != 0)
                  {
                    v1119 = *(_DWORD *)(i7 + 40);
                    if (v1119 != v1115)
                    {
                      v1120 = v1119 - 1;
                      v1121 = v1115;
                      do
                      {
                        v1122 = v1112[8 * v1115];
                        if ((v1122 & 0x10000FF) != 0x1000000)
                          break;
                        v1121 += (v1122 & 0x2000000) == 0;
                        if (v1120 == v1115)
                          break;
                        ++v1115;
                      }
                      while ((v1122 & 0x2000000) == 0);
                      v1115 = v1121;
                    }
                  }
                }
                else
                {
                  v1113 = *v1112;
                  if (v1113 == 7 || v1113 == 0)
                    v1115 = 1;
                  else
                    v1115 = -1;
                }
              }
              else
              {
                v1112 = *(_DWORD **)(i7 + 32);
                v1115 = -1;
              }
              v1117 = *(_QWORD *)&v1112[8 * v1115 + 4];
              v5 = ((v1117 >> 20) & 0xF) == 0;
              v1116 = 1 << (((v1117 >> 20) & 0xFu) - 1);
              if (v5)
                v1116 = 0;
            }
            else
            {
              v1116 = 0;
            }
            v1118 = BYTE3(v1110) & v1099;
            v1099 = v1116 | v1099 & ~(unint64_t)BYTE3(v1110);
            sub_1C49F6870(v1095, (unint64_t *)i7, v1118);
          }
          if ((*(_BYTE *)i7 & 4) == 0)
          {
            while ((*(_WORD *)(i7 + 44) & 8) != 0)
              i7 = *(_QWORD *)(i7 + 8);
          }
        }
        v1123 = *(_QWORD *)v1107 & 0xFFFFFFFFFFFFFFF8;
        if (v1107 == v1123)
          goto LABEL_1922;
        if (v1123)
        {
          v1124 = *(_QWORD *)v1107 & 0xFFFFFFFFFFFFFFF8;
          if ((*(_BYTE *)v1123 & 4) != 0)
          {
LABEL_1920:
            if (**(_WORD **)(v1124 + 16) == 623)
            {
              v1125 = 1;
              goto LABEL_1923;
            }
LABEL_1922:
            v1125 = *(_QWORD *)(v1095 + 88) == *(_QWORD *)(v1095 + 96);
LABEL_1923:
            if (!v1512)
            {
              if (v1107 != v1123)
              {
                if (v1123)
                {
                  v1129 = *(_QWORD *)v1107 & 0xFFFFFFFFFFFFFFF8;
                  if ((*(_BYTE *)v1123 & 4) != 0)
                  {
LABEL_1935:
                    if (**(_WORD **)(v1123 + 16) == 623)
                      v1107 = v1123;
                    goto LABEL_1960;
                  }
                }
                else
                {
                  v1129 = 0;
                }
                while ((*(_WORD *)(v1129 + 44) & 4) != 0)
                  v1129 = *(_QWORD *)v1129 & 0xFFFFFFFFFFFFFFF8;
                if (**(_WORD **)(v1129 + 16) == 623)
                {
                  if (v1123)
                  {
                    v1107 = *(_QWORD *)v1107 & 0xFFFFFFFFFFFFFFF8;
                    if ((*(_BYTE *)v1123 & 4) != 0)
                      goto LABEL_1960;
                  }
                  else
                  {
                    v1107 = 0;
                  }
                  while ((*(_WORD *)(v1107 + 44) & 4) != 0)
                    v1107 = *(_QWORD *)v1107 & 0xFFFFFFFFFFFFFFF8;
                }
              }
LABEL_1960:
              sub_1C49F6870(v1095, (unint64_t *)v1107, v1099);
              goto LABEL_1961;
            }
            v1126 = sub_1C49EE844((uint64_t)&v1446, v1095);
            if (*(_BYTE *)(v1126 + 16))
              v1127 = 1;
            else
              v1127 = v1125;
            if (v1127 == 1)
            {
              v1123 = *(_QWORD *)v1107 & 0xFFFFFFFFFFFFFFF8;
              if (v1107 != v1123)
              {
                if (v1123)
                {
                  v1128 = *(_QWORD *)v1107 & 0xFFFFFFFFFFFFFFF8;
                  if ((*(_BYTE *)v1123 & 4) != 0)
                    goto LABEL_1935;
                }
                else
                {
                  v1128 = 0;
                }
                while ((*(_WORD *)(v1128 + 44) & 4) != 0)
                  v1128 = *(_QWORD *)v1128 & 0xFFFFFFFFFFFFFFF8;
                if (**(_WORD **)(v1128 + 16) == 623)
                {
                  if (v1123)
                  {
                    v1107 = *(_QWORD *)v1107 & 0xFFFFFFFFFFFFFFF8;
                    if ((*(_BYTE *)v1123 & 4) != 0)
                      goto LABEL_1960;
                  }
                  else
                  {
                    v1107 = 0;
                  }
                  while ((*(_WORD *)(v1107 + 44) & 4) != 0)
                    v1107 = *(_QWORD *)v1107 & 0xFFFFFFFFFFFFFFF8;
                  goto LABEL_1960;
                }
              }
              goto LABEL_1960;
            }
            *(_QWORD *)(v1126 + 72) = v1099;
LABEL_1961:
            v1095 = *(_QWORD *)(v1095 + 8);
            if ((llvm::MachineBasicBlock **)v1095 == v1380)
              goto LABEL_1962;
            continue;
          }
        }
        else
        {
          v1124 = 0;
        }
        break;
      }
      while ((*(_WORD *)(v1124 + 44) & 4) != 0)
        v1124 = *(_QWORD *)v1124 & 0xFFFFFFFFFFFFFFF8;
      goto LABEL_1920;
    }
  }
LABEL_1962:
  sub_1C49EDD28((uint64_t)&v1446);
  *(_DWORD *)&__p[8] = 0;
  if ((*(_WORD *)(*(_QWORD *)v1396 + 18) & 0x3FF0) != 0x640)
  {
    v1130 = (unsigned __int8 *)*((_QWORD *)v1396 + 2);
    if (v1130[390])
    {
      __dst = (char *)&v1530 + 8;
      *(_QWORD *)&v1530 = 0x800000000;
      v1544 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v1130 + 176))(v1130);
      v1545 = 0;
      v1546 = v1548;
      v1547 = 0x800000000;
      v1549 = 0;
      v1550 = 0;
      if (v1130[303] | v1130[305])
        v1131 = 8;
      else
        v1131 = 6;
      v1550 = v1131;
      v1132 = v1530;
      if ((_DWORD)v1530 != (_DWORD)v1131)
      {
        if (v1530 > v1131)
        {
          sub_1C614EFE0((uint64_t)&__dst, v1131);
        }
        else
        {
          if (DWORD1(v1530) < v1131)
          {
            sub_1C614F05C((uint64_t)&__dst, v1131);
            v1132 = v1530;
          }
          if (v1132 != (_DWORD)v1131)
          {
            v1133 = 104 * v1131 - 104 * v1132;
            v1134 = (char *)__dst + 104 * v1132 + 88;
            do
            {
              *(_OWORD *)(v1134 - 3) = 0uLL;
              *(_OWORD *)(v1134 - 5) = 0uLL;
              *(_OWORD *)(v1134 - 7) = 0uLL;
              *(_OWORD *)(v1134 - 9) = 0uLL;
              *(v1134 - 11) = v1134 - 9;
              *(v1134 - 10) = 0x1000000000;
              *v1134 = 0;
              v1134[1] = 0;
              *(v1134 - 1) = v1134;
              v1134 += 13;
              v1133 -= 104;
            }
            while (v1133);
          }
          LODWORD(v1530) = v1131;
        }
      }
      v1135 = v1550;
      v1136 = v1547;
      v1137 = v1396;
      if ((_DWORD)v1547 != v1550)
      {
        if (v1547 <= v1550)
        {
          v1138 = v1550 - (unint64_t)v1547;
          v1139 = v1547;
          v1140 = v1547;
          if (v1550 > HIDWORD(v1547))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1546, (uint64_t)v1548, v1550, 16);
            v1139 = v1547;
            v1140 = v1547;
            if (v1138)
              goto LABEL_1979;
          }
          else if (v1138)
          {
LABEL_1979:
            v1141 = (char *)v1546 + 16 * v1139;
            v1142 = v1136 - v1135;
            do
            {
              *v1141++ = xmmword_1C6612660;
              v773 = __CFADD__(v1142++, 1);
            }
            while (!v773);
            v1140 = v1547;
          }
          LODWORD(v1135) = v1140 + v1138;
          v1137 = v1396;
        }
        LODWORD(v1547) = v1135;
      }
      for (i8 = *((_QWORD *)v1137 + 41); (llvm::MachineBasicBlock **)i8 != v1380; i8 = *(_QWORD *)(v1424 + 8))
      {
        v1144 = (void **)(i8 + 48);
        v1424 = i8;
        v1145 = *(_QWORD *)(i8 + 56);
        v1427 = (void **)(i8 + 48);
        if (v1145 != i8 + 48)
        {
          do
          {
            v1146 = *(unsigned __int16 **)(v1145 + 16);
            if ((v1146[10] & 4) != 0)
            {
              ++v1545;
              v1147 = sub_1C4C2FD5C(*v1146);
              v1148 = *(unsigned __int8 *)(*(_QWORD *)(v1145 + 32) + 32 * v1147 + 19);
              v1149 = v1550;
              if (*(_BYTE *)(*(_QWORD *)(v1145 + 32) + 32 * v1147 + 19))
                v1150 = v1550 == 0;
              else
                v1150 = 1;
              if (!v1150)
              {
                v1177 = 0;
                v1178 = 0;
                v1179 = 0;
                do
                {
                  if ((v1148 & (1 << v1179)) != 0)
                  {
                    v1181 = (char *)__dst + v1177 + 88;
                    v1180 = *(_QWORD **)v1181;
                    *((_DWORD *)v1181 - 20) = 0;
                    sub_1C47655E8((uint64_t)(v1181 - 8), v1180);
                    *((_QWORD *)v1181 - 1) = v1181;
                    *(_QWORD *)v1181 = 0;
                    *((_QWORD *)v1181 + 1) = 0;
                    v1182 = (char *)v1546 + v1178;
                    *(_DWORD *)v1182 = -1;
                    *((_QWORD *)v1182 + 1) = 0;
                    v1149 = v1550;
                  }
                  ++v1179;
                  v1178 += 16;
                  v1177 += 104;
                }
                while (v1179 < v1149);
              }
              v1151 = sub_1C4AD4FB8(v1145, 0, (_QWORD *)(v1544 + 8));
              v1152 = *(unsigned int *)(v1145 + 40);
              if ((_DWORD)v1152)
              {
                v1153 = 0;
                v1154 = *(_DWORD **)(v1145 + 32);
                v1155 = &v1154[8 * v1152];
                do
                {
                  if ((*v1154 & 0x20000FF) == 0)
                  {
                    v1156 = HIBYTE(*v1154) & 1;
                    if (v1151 != 3)
                      LOBYTE(v1156) = 0;
                    if ((v1156 & 1) == 0 && v1550)
                    {
                      v1157 = 0;
                      v1158 = 0;
                      while ((sub_1C49F6C74((uint64_t)__dst, v1544, v1158, (uint64_t)v1154) & 1) == 0)
                      {
                        ++v1158;
                        v1157 += 16;
                        if (v1158 >= v1550)
                          goto LABEL_1996;
                      }
                      v1159 = *(_QWORD *)((char *)v1546 + v1157 + 8);
                      v1160 = v1545 != *(_DWORD *)((char *)v1546 + v1157);
                      v1161 = *(_QWORD *)(v1159 + 8);
                      if (sub_1C4AD4FB8(v1161, 0, (_QWORD *)(v1544 + 8)) == 3)
                      {
                        v1162 = *(_QWORD *)(v1161 + 32)
                              + 32 * sub_1C4C2FD5C(**(unsigned __int16 **)(v1161 + 16));
                        *(_QWORD *)(v1162 + 16) |= 0x20uLL;
                        ++HIDWORD(v1549);
                      }
                      v1153 |= v1160;
                      if (v1550)
                      {
                        v1163 = 0;
                        v1164 = 0;
                        for (i9 = 0; i9 < v1550; ++i9)
                        {
                          if (sub_1C49F6C74((uint64_t)__dst, v1544, i9, (uint64_t)v1154))
                          {
                            v1167 = (char *)__dst + v1163 + 88;
                            v1166 = *(_QWORD **)v1167;
                            *((_DWORD *)v1167 - 20) = 0;
                            sub_1C47655E8((uint64_t)(v1167 - 8), v1166);
                            *((_QWORD *)v1167 - 1) = v1167;
                            *(_QWORD *)v1167 = 0;
                            *((_QWORD *)v1167 + 1) = 0;
                            v1168 = (char *)v1546 + v1164;
                            *(_DWORD *)v1168 = -1;
                            *((_QWORD *)v1168 + 1) = 0;
                          }
                          v1164 += 16;
                          v1163 += 104;
                        }
                      }
                    }
                  }
LABEL_1996:
                  v1154 += 8;
                }
                while (v1154 != v1155);
              }
              else
              {
                v1153 = 0;
              }
              if (v1151 == 3)
              {
                v1169 = sub_1C4C2FD5C(**(unsigned __int16 **)(v1145 + 16));
                v1170 = *(_QWORD *)(v1145 + 32);
                v1171 = ((*(_DWORD *)(v1170 + 32 * v1169 + 16) >> 20) & 0xFu) - 1;
                v1172 = __dst;
                sub_1C49E178C(&v1557, *(_QWORD **)(v1170 + 8), (unint64_t)(v1170 - *(_QWORD *)(*(_QWORD *)(v1170 + 8) + 32)) >> 5, v1544, 0, 1);
                for (;
                      HIDWORD(v1557.__r_.__value_.__r.__words[0]) != LODWORD(v1557.__r_.__value_.__r.__words[1]);
                      ++HIDWORD(v1557.__r_.__value_.__r.__words[0]))
                {
                  sub_1C48302EC((uint64_t)v1172 + 104 * v1171, (unsigned int *)v1557.__r_.__value_.__r.__words + 1);
                }
                v1173 = (char *)v1546 + 16 * v1171;
                *(_DWORD *)v1173 = v1545;
                *((_QWORD *)v1173 + 1) = v1170;
              }
              if ((v1153 & 1) != 0)
                LODWORD(v1549) = v1549 + 1;
              v1174 = **(unsigned __int16 **)(v1145 + 16);
              v1175 = sub_1C4C915C4(v1174);
              if ((v1175 & 0xFF00000000) == 0)
                goto LABEL_2178;
              v1144 = v1427;
              if ((_DWORD)v1175 == 93)
              {
                v1176 = *(_QWORD *)(v1145 + 32) + 32 * sub_1C4C2FD5C(v1174);
                *(_QWORD *)(v1176 + 16) |= 0x20uLL;
                ++HIDWORD(v1549);
              }
            }
            if ((*(_BYTE *)v1145 & 4) == 0)
            {
              while ((*(_WORD *)(v1145 + 44) & 8) != 0)
                v1145 = *(_QWORD *)(v1145 + 8);
            }
            v1145 = *(_QWORD *)(v1145 + 8);
          }
          while ((void **)v1145 != v1144);
        }
      }
      if (v1546 != v1548)
        free(v1546);
      v1183 = (char *)__dst;
      if ((_DWORD)v1530)
      {
        v1184 = 104 * v1530;
        do
        {
          sub_1C47655E8((uint64_t)&v1183[v1184 - 24], *(_QWORD **)&v1183[v1184 - 16]);
          v1185 = *(char **)&v1183[v1184 - 104];
          if (&v1183[v1184 - 88] != v1185)
            free(v1185);
          v1184 -= 104;
        }
        while (v1184);
        v1183 = (char *)__dst;
      }
      if (v1183 != (char *)&v1530 + 8)
        free(v1183);
    }
  }
  if (*(_BYTE **)__p != &__p[16])
    free(*(void **)__p);
  if (v1443 != v1445)
    free(v1443);
  if ((v1440 & 1) == 0)
    MEMORY[0x1CAA32FB4](v1441, 8);
  sub_1C47655E8((uint64_t)&v1509, v1510[0]);
  if (v1507[0] != &v1508)
    free(v1507[0]);
  sub_1C47655E8((uint64_t)&v1504, v1505);
  if (v1501 != v1503)
    free(v1501);
  MEMORY[0x1CAA32FB4](v1498, 4);
  if (v1495 != v1497)
    free(v1495);
  if (v1479 != v1481)
    free(v1479);
  if (v1475 != v1477)
    free(v1475);
  if (v1472 != &v1474)
    free(v1472);
  MEMORY[0x1CAA32FB4](v1470, 8);
  MEMORY[0x1CAA32FB4](v1468, 8);
  if (v1466 != &v1468)
    free(v1466);
  if ((_DWORD)v1461)
  {
    v1201 = v1460;
    v1202 = &v1460[8 * v1461];
    do
    {
      v1203 = *(_QWORD *)v1201;
      if (*(_QWORD *)v1201 == *(_QWORD *)&v1460[8 * v1461 - 8])
      {
        v1205 = v1459;
      }
      else
      {
        v1204 = ((unint64_t)(v1201 - v1460) >> 10) & 0x1FFFFFF;
        if (v1204 >= 0x1E)
          LOBYTE(v1204) = 30;
        v1205 = v1203 + (4096 << v1204);
      }
      v1206 = (v1203 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v1206 + 96 <= v1205)
      {
        v1207 = (uint64_t *)(v1206 + 56);
        do
        {
          sub_1C49F4710(v1207 + 3, 0);
          v1208 = (uint64_t *)*(v1207 - 2);
          if (v1207 != v1208)
            free(v1208);
          sub_1C49EE99C(v1207 - 4, 0);
          v1209 = (uint64_t *)*(v1207 - 7);
          if (v1207 - 5 != v1209)
            free(v1209);
          v1210 = (unint64_t)(v1207 + 17);
          v1207 += 12;
        }
        while (v1210 <= v1205);
      }
      v1201 += 8;
    }
    while (v1201 != v1202);
  }
  if ((_DWORD)v1464)
  {
    v1211 = v1463;
    v1212 = &v1463[v1464];
    do
    {
      v1213 = (*(_QWORD *)v1211 + 7) & 0xFFFFFFFFFFFFFFF8;
      v1214 = *(_QWORD *)v1211 + *((_QWORD *)v1211 + 1);
      if (v1213 + 96 <= v1214)
      {
        v1215 = (uint64_t *)(v1213 + 56);
        do
        {
          sub_1C49F4710(v1215 + 3, 0);
          v1216 = (uint64_t *)*(v1215 - 2);
          if (v1215 != v1216)
            free(v1216);
          sub_1C49EE99C(v1215 - 4, 0);
          v1217 = (uint64_t *)*(v1215 - 7);
          if (v1215 - 5 != v1217)
            free(v1217);
          v1218 = (unint64_t)(v1215 + 17);
          v1215 += 12;
        }
        while (v1218 <= v1214);
      }
      ++v1211;
    }
    while (v1211 != v1212);
  }
  sub_1C4926A50((uint64_t)&v1459);
  sub_1C4926AE8((uint64_t)&v1459);
  if (v1455 != v1458)
    free(v1455);
  sub_1C49EEAA4((uint64_t)v1450, (uint64_t)v1450 + 104 * v1451);
  if (v1450 != &v1452)
    free(v1450);
  sub_1C49EEAFC((char *)v1448, (char *)v1448 + 96 * v1449);
  if (v1448 != &v1450)
    free(v1448);
  v1219 = (void **)v1446;
  if ((_DWORD)v1447)
  {
    v1220 = 4 * v1447;
    do
    {
      v1221 = (void **)v1219[v1220 - 3];
      if (&v1219[v1220 - 1] != v1221)
        free(v1221);
      v1220 -= 4;
    }
    while (v1220 * 8);
    v1219 = (void **)v1446;
  }
  if (v1219 != &v1448)
    free(v1219);
  v1222 = (void **)v1428;
  if ((_DWORD)v1429)
  {
    v1223 = 2 * v1429;
    do
    {
      v1224 = (void **)v1222[v1223 - 2];
      if (&v1222[v1223] != v1224)
        free(v1224);
      v1223 -= 2;
    }
    while (v1223 * 8);
    v1222 = (void **)v1428;
  }
  if (v1222 != &v1430)
    free(v1222);
  v1225 = (char *)v1430;
  if ((_DWORD)v1431)
  {
    v1226 = 16 * v1431;
    do
    {
      v1227 = *(char **)&v1225[v1226 - 16];
      if (&v1225[v1226] != v1227)
        free(v1227);
      v1226 -= 16;
    }
    while (v1226);
    v1225 = (char *)v1430;
  }
  if (v1225 != (char *)&v1432)
    free(v1225);
  return 1;
}

void **sub_1C49EAB08(void **result, uint64_t a2)
{
  _DWORD *v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  void **v14;
  void **v15;
  void **v16;
  char *v17;
  char *v18;

  if (result != (void **)a2)
  {
    v2 = (_DWORD *)(a2 + 8);
    v3 = (void **)*result;
    v4 = *((unsigned int *)result + 2);
    if (*(_DWORD *)(a2 + 8))
    {
      if ((_DWORD)v4)
      {
        v10 = a2;
        v12 = (_DWORD *)(a2 + 8);
        v15 = result;
        v18 = (char *)*result;
        v7 = 16 * v4;
        do
        {
          v8 = *(char **)&v18[v7 - 16];
          if (&v18[v7] != v8)
            free(v8);
          v7 -= 16;
        }
        while (v7);
        v2 = v12;
        result = v15;
        v3 = (void **)*v15;
        a2 = v10;
      }
      if (v3 != result + 2)
      {
        v13 = v2;
        v16 = result;
        v9 = a2;
        free(v3);
        v2 = v13;
        result = v16;
        a2 = v9;
      }
      *result = *(void **)a2;
      result[1] = *(void **)(a2 + 8);
      *(_QWORD *)a2 = a2 + 16;
      *(_DWORD *)(a2 + 12) = 0;
    }
    else
    {
      v11 = result + 1;
      v14 = result;
      v17 = (char *)*result;
      if ((_DWORD)v4)
      {
        v5 = 16 * v4;
        do
        {
          v6 = *(char **)&v17[v5 - 16];
          if (&v17[v5] != v6)
            free(v6);
          v5 -= 16;
        }
        while (v5);
      }
      v2 = v11;
      result = v14;
    }
    *v2 = 0;
  }
  return result;
}

BOOL sub_1C49EAC08(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned __int8 v9;

  sub_1C49EE160(a1, a2, (uint64_t)&v8);
  v4 = v9;
  if (v9)
  {
    v5 = *a2;
    v6 = *(unsigned int *)(a1 + 144);
    if (v6 >= *(_DWORD *)(a1 + 148))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 136, a1 + 152, v6 + 1, 8);
      LODWORD(v6) = *(_DWORD *)(a1 + 144);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 144);
  }
  return v4 != 0;
}

void sub_1C49EAC94(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  char *v7;
  unsigned int v8;
  uint64_t i;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  void (**v32)(void);
  void (**v33)(void);
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  _OWORD *v41;
  uint64_t v42;
  unsigned int v43;
  int *v44;
  int v45;
  int v46;
  char *v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int *v62;
  BOOL v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  unsigned int v69;
  char *v70;
  char *v71;
  uint64_t v72;
  signed int v73;
  signed int *v74;
  signed int v75;
  char *v76;
  signed int v77;
  _DWORD *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  BOOL v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  int *v89;
  int v90;
  int *v91;
  int v92;
  BOOL v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int *v99;
  int v100;
  BOOL v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  int v107;
  BOOL v108;
  unsigned int v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  int *v113;
  uint64_t v114;
  int v115;
  _BYTE *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t *v122;
  char *v123;
  uint64_t v124;
  unsigned __int8 v125;
  unsigned int v126;
  unsigned int v127;
  int v128;
  int v129;
  char *v130;
  char *v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  unsigned int v135;
  int v136;
  uint64_t v137;
  unint64_t v138;
  unsigned int v139;
  unint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  int *v147;
  uint64_t v148;
  unsigned int v149;
  int v150;
  int v151;
  char *v152;
  _DWORD *v153;
  _DWORD *v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  int v158;
  int v159;
  unsigned int *v160;
  int v161;
  int v162;
  uint64_t v163;
  unsigned int v164;
  int v165;
  char *v166;
  int *v167;
  int v168;
  int v169;
  int v170;
  int v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  _DWORD *v177;
  uint64_t v178;
  int v179;
  char *v180;
  char *v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  uint64_t v188;
  uint64_t v189;
  int v190;
  int v191;
  BOOL v192;
  char *v193;
  char *v194;
  uint64_t v195;
  int v196;
  char *v197;
  char *v198;
  _DWORD *v199;
  int v200;
  char *v201;
  unint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unsigned int *v214;
  uint64_t v215;
  unsigned int *v216;
  unsigned int *v217;
  uint64_t v218;
  unsigned int *v219;
  uint64_t v220;
  uint64_t v222;
  unsigned int v223;
  unsigned int v224;
  uint64_t v225;
  unint64_t v226;
  int v227;
  uint64_t v228;
  int v229;
  int v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  unsigned int v235;
  uint64_t v236;
  uint64_t v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  unint64_t v242;
  int v243;
  int v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t *v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unsigned int v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unsigned int *v263;
  uint64_t v264;
  uint64_t v265;
  unsigned int v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t *v279;
  uint64_t *v280;
  unsigned int v281;
  char v282;
  uint64_t v283;
  int v284;
  uint64_t v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  int v291;
  uint64_t v292;
  _DWORD *v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  uint64_t v297;
  char v298;
  unsigned int *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  int v303;
  uint64_t v304;
  _DWORD *v305;
  uint64_t v306;
  uint64_t v307;
  int v308;
  char v309;
  __int128 *v310;
  uint64_t v311;
  uint64_t v312;
  _QWORD *v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  unsigned int v317;
  uint64_t v318;
  uint64_t v319;
  void (**v320)(void);
  _DWORD **v321;
  uint64_t v322;
  _QWORD *v323;
  uint64_t v324;
  _DWORD *v325;
  uint64_t v326;
  unsigned int v327;
  BOOL v328;
  void (**v329)(void);
  uint64_t v330;
  char v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  unsigned int *v335;
  uint64_t v336;
  uint64_t v337;
  _BYTE *v338;
  unsigned int v339;
  int v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t v343;
  unint64_t v344;
  char *v345;
  uint64_t v346;
  uint64_t v347;
  char *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  _QWORD *v352;
  char v353;
  uint64_t *v354;
  uint64_t v355;
  _DWORD *v356;
  void (**v357)(void);
  void (**v358)(void);
  void (**v359)(void);
  uint64_t v360;
  uint64_t *v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unsigned int *v368;
  uint64_t v369;
  unsigned int *v370;
  unsigned int *v371;
  int v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t v376;
  unint64_t v377;
  unsigned __int16 *v378;
  BOOL v379;
  unsigned int v380;
  unsigned int v381;
  unsigned int v382;
  uint64_t v383;
  unsigned int *v384;
  int v385;
  int v386;
  int v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t *v393;
  uint64_t *v394;
  int v395;
  uint64_t v396;
  uint64_t v397;
  char v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t *v401;
  uint64_t v402;
  _QWORD *v403;
  _QWORD *v404;
  uint64_t *v405;
  uint64_t *v406;
  unint64_t v407;
  _QWORD *v408;
  uint64_t v409;
  unsigned __int16 *v410;
  uint64_t v411;
  char v412;
  int *v414;
  uint64_t v415;
  int v416;
  uint64_t v417;
  unsigned __int16 *v418;
  uint64_t v419;
  unsigned int v420;
  uint64_t v421;
  BOOL v422;
  unsigned int v423;
  unsigned int v424;
  int v425;
  unsigned int v426;
  uint64_t v427;
  int v428;
  int v429;
  int v430;
  unint64_t v431;
  uint64_t *v432;
  uint64_t *v433;
  int8x8_t *v434;
  __int128 v435;
  uint64_t v436;
  uint64_t v437;
  unsigned int *v438;
  uint64_t v439;
  uint64_t v440;
  int8x8_t *v441;
  __int128 v442;
  uint64_t v443;
  unsigned int v444;
  unsigned int v445;
  unsigned __int8 *v446;
  uint64_t v447;
  uint64_t v448;
  int v449;
  unsigned int v450;
  unsigned int NumExplicitOperands;
  uint64_t v452;
  BOOL v453;
  unsigned int v454;
  int v456;
  unsigned int v457;
  int v458;
  uint64_t v459;
  unsigned int v460;
  int v461;
  unsigned int v462;
  uint64_t v463;
  unsigned __int16 *v464;
  int v465;
  uint64_t v466;
  unsigned int v467;
  int v468;
  unsigned int v469;
  int v470;
  unsigned int v471;
  uint64_t v472;
  unsigned int v473;
  int v474;
  int v475;
  int v476;
  int v477;
  int v478;
  int v479;
  unint64_t v480;
  unint64_t v481;
  uint64_t v482;
  uint64_t v483;
  unsigned int *v484;
  uint64_t v485;
  unsigned int v486;
  uint64_t v487;
  unint64_t v488;
  unint64_t v489;
  unint64_t v490;
  __int16 v491;
  int v492;
  int v493;
  uint64_t v494;
  uint64_t v495;
  BOOL v496;
  unint64_t v497;
  unint64_t v498;
  unint64_t v499;
  llvm::MachineFunction *v500;
  unint64_t *v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  unint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t *v512;
  uint64_t v513;
  uint64_t v514;
  char *v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  unsigned int v519;
  uint64_t v520;
  unint64_t v521;
  uint64_t *v522;
  uint64_t *v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  int *v528;
  unint64_t v529;
  uint64_t v530;
  int v531;
  _QWORD *v532;
  uint64_t *v533;
  int v534;
  _QWORD *v535;
  uint64_t v536;
  int v537;
  uint64_t v538;
  uint64_t v539;
  char *v540;
  uint64_t v541;
  uint64_t v542;
  __int128 v543;
  void *v544;
  uint64_t v545;
  void *v546;
  uint64_t v547;
  int v548[2];
  int *v549;
  unsigned int v550;
  uint64_t v551;
  uint64_t v552;
  unsigned int v553;
  void *__p;
  uint64_t v555;
  void **v556;
  void **p_p;
  uint64_t *v558;
  uint64_t v559;
  int v560;
  void *v561;
  uint64_t v562;
  void *v563;
  uint64_t v564;
  void *v565[2];
  unsigned int v566;
  void *v567;
  _BYTE v568[24];
  __int128 v569;
  __int128 v570;
  uint64_t v571;
  uint64_t v572;

  v572 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(a1 + 1216);
  v6 = (uint64_t *)(a1 + 1208);
  __p = 0;
  v555 = 0;
  v556 = 0;
  if (!(_DWORD)v5)
  {
    v7 = 0;
    goto LABEL_9;
  }
  v7 = (char *)operator new(4 * v5);
  __p = v7;
  v556 = (void **)&v7[4 * v5];
  bzero(v7, 4 * v5);
  v555 = (uint64_t)v556;
  if ((_DWORD)v5 == 1)
  {
LABEL_9:
    v8 = 0;
    goto LABEL_10;
  }
  v8 = 0;
  for (i = 1; i != v5; ++i)
  {
    v10 = sub_1C49F2E68(v6, i);
    v11 = *(_DWORD *)&v7[4 * v10];
    if (!v11)
    {
      v11 = v8 + 1;
      *(_DWORD *)&v7[4 * v10] = ++v8;
    }
    *(_DWORD *)&v7[4 * i] = v11;
  }
LABEL_10:
  v12 = *(_QWORD *)(a1 + 1248);
  v13 = *(unsigned int *)(a1 + 1264);
  v14 = v12 + 16 * v13;
  if (*(_DWORD *)(a1 + 1256))
  {
    if ((_DWORD)v13)
    {
      v15 = 16 * v13;
      v16 = *(_QWORD *)(a1 + 1248);
      while ((*(_QWORD *)v16 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v16 += 16;
        v15 -= 16;
        if (!v15)
          goto LABEL_15;
      }
    }
    else
    {
      v16 = *(_QWORD *)(a1 + 1248);
    }
  }
  else
  {
LABEL_15:
    v16 = v12 + 16 * v13;
  }
  v17 = v12 + 16 * v13;
LABEL_18:
  while (v16 != v17)
  {
    v18 = *(unsigned int *)(v16 + 12);
    *(_DWORD *)(v16 + 8) = *(_DWORD *)&v7[4 * *(unsigned int *)(v16 + 8)];
    *(_DWORD *)(v16 + 12) = *(_DWORD *)&v7[4 * v18];
    v19 = v16 + 16;
    v16 = v14;
    if (v19 != v14)
    {
      v16 = v19;
      while ((*(_QWORD *)v16 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v16 += 16;
        if (v16 == v14)
        {
          v16 = v14;
          goto LABEL_18;
        }
      }
    }
  }
  v20 = *(_QWORD *)(a1 + 1224);
  v21 = *(unsigned int *)(a1 + 1240);
  v22 = v20 + 16 * v21;
  if (*(_DWORD *)(a1 + 1232))
  {
    if ((_DWORD)v21)
    {
      v23 = 16 * v21;
      v24 = *(_QWORD *)(a1 + 1224);
      while ((*(_QWORD *)v24 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v24 += 16;
        v23 -= 16;
        if (!v23)
          goto LABEL_29;
      }
    }
    else
    {
      v24 = *(_QWORD *)(a1 + 1224);
    }
  }
  else
  {
LABEL_29:
    v24 = v20 + 16 * v21;
  }
  v25 = v20 + 16 * v21;
LABEL_32:
  while (v24 != v25)
  {
    v26 = *(unsigned int *)(v24 + 12);
    *(_DWORD *)(v24 + 8) = *(_DWORD *)&v7[4 * *(unsigned int *)(v24 + 8)];
    *(_DWORD *)(v24 + 12) = *(_DWORD *)&v7[4 * v26];
    v27 = v24 + 16;
    v24 = v22;
    if (v27 != v22)
    {
      v24 = v27;
      while ((*(_QWORD *)v24 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v24 += 16;
        if (v24 == v22)
        {
          v24 = v22;
          goto LABEL_32;
        }
      }
    }
  }
  *(_DWORD *)(a1 + 1288) = *(_DWORD *)&v7[4 * *(unsigned int *)(a1 + 1288)];
  if (*(_BYTE *)(a1 + 1841))
  {
    v28 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v28)
    {
      v29 = *(uint64_t **)a3;
      v30 = 8 * v28;
      while (1)
      {
        v31 = sub_1C49EE844(a1, *v29);
        v567 = &unk_1E7FA9798;
        *(_QWORD *)v568 = &__p;
        *(_QWORD *)&v568[16] = &v567;
        sub_1C49F3478(v31, (uint64_t)&v567);
        if (*(void ***)&v568[16] == &v567)
          break;
        if (*(_QWORD *)&v568[16])
        {
          v32 = (void (**)(void))(**(_QWORD **)&v568[16] + 40);
LABEL_45:
          (*v32)();
        }
        ++v29;
        v30 -= 8;
        if (!v30)
          goto LABEL_53;
      }
      v32 = (void (**)(void))((char *)v567 + 32);
      goto LABEL_45;
    }
  }
  else
  {
    v567 = &unk_1E7FA9798;
    *(_QWORD *)v568 = &__p;
    *(_QWORD *)&v568[16] = &v567;
    sub_1C49F3478(a1 + 1368, (uint64_t)&v567);
    if (*(void ***)&v568[16] == &v567)
    {
      v33 = (void (**)(void))((char *)v567 + 32);
    }
    else
    {
      if (!*(_QWORD *)&v568[16])
        goto LABEL_53;
      v33 = (void (**)(void))(**(_QWORD **)&v568[16] + 40);
    }
    (*v33)();
  }
LABEL_53:
  v525 = a1 + 1224;
  if (__p)
  {
    v555 = (uint64_t)__p;
    operator delete(__p);
  }
  v34 = 0;
  *(_DWORD *)(a1 + 1216) = 0;
  if (!*(_DWORD *)(a1 + 1220))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v6, v525, 1uLL, 8);
    v34 = *(_DWORD *)(a1 + 1216);
  }
  v528 = (int *)(a1 + 1288);
  *(_QWORD *)(*(_QWORD *)(a1 + 1208) + 8 * v34) = 0;
  v35 = *(_DWORD *)(a1 + 1216) + 1;
  *(_DWORD *)(a1 + 1216) = v35;
  v36 = v8 + 1;
  v37 = *(_DWORD *)(a1 + 1280);
  v521 = v36;
  if (v37 != (_DWORD)v36)
  {
    if (v37 <= v36)
    {
      if (*(_DWORD *)(a1 + 1284) < v36)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 1272, (uint64_t)v528, v8 + 1, 4);
        v37 = *(_DWORD *)(a1 + 1280);
      }
      if (v37 != (_DWORD)v36)
      {
        bzero((void *)(*(_QWORD *)(a1 + 1272) + 4 * v37), 4 * (v36 - v37));
        v36 = v8 + 1;
      }
    }
    *(_DWORD *)(a1 + 1280) = v36;
    v35 = *(_DWORD *)(a1 + 1216);
  }
  if (v35 != (_DWORD)v36)
  {
    if (v35 <= v36)
    {
      if (*(_DWORD *)(a1 + 1220) < v36)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v6, v525, v521, 8);
        v36 = v8 + 1;
        v35 = *(_DWORD *)(a1 + 1216);
      }
      if (v35 != (_DWORD)v36)
      {
        bzero((void *)(*v6 + 8 * v35), 8 * (v36 - v35));
        LODWORD(v36) = v521;
      }
    }
    *(_DWORD *)(a1 + 1216) = v36;
  }
  v38 = 0;
  if (v36 <= 1)
    v39 = 1;
  else
    v39 = v36;
  v40 = (_DWORD *)(*v6 + 4);
  do
  {
    *(v40 - 1) = v38;
    *v40 = 0;
    ++v38;
    v40 += 2;
  }
  while (v39 != v38);
  v535 = (_QWORD *)(a1 + 1272);
  v546 = v548;
  v547 = 0;
  v544 = &v546;
  v545 = 0;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v544, (uint64_t)&v546, v521, 16);
  if (v8 != -1)
  {
    v41 = v544;
    v42 = v8 + 1;
    do
    {
      *v41++ = xmmword_1C6613C10;
      --v42;
    }
    while (v42);
  }
  LODWORD(v545) = v8 + 1;
  v43 = *v528;
  v561 = &v563;
  v562 = 0;
  sub_1C49F3364((unsigned int *)&v561, v521);
  v563 = v565;
  v564 = 0;
  v565[0] = &v566;
  v565[1] = 0;
  sub_1C4893E04((char *)v565, v521, -1);
  v566 = 0x80000000;
  if (v43)
  {
    v44 = (int *)((char *)v561 + 12 * v43);
    v45 = *v44;
    if (*v44 <= 1)
      v45 = 1;
    *v44 = v45;
    v46 = v44[2];
    if (v46 <= 4)
      v46 = 4;
    v44[2] = v46;
    if ((_DWORD)v564)
    {
      v47 = (char *)v563 + 12 * v564;
      if (*((int *)v47 - 1) <= 4)
        v48 = 4;
      else
        v48 = *((_DWORD *)v47 - 1);
      *((_DWORD *)v47 - 1) = v48;
    }
  }
  v49 = (2 * v545 - 2);
  if (v49 > HIDWORD(v547))
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v546, (uint64_t)v548, v49, 12);
  v519 = v8;
  v524 = v6;
  v551 = 0;
  v552 = 0;
  v553 = 0;
  v567 = &v568[8];
  *(_QWORD *)v568 = 0x200000000;
  __p = &v546;
  v555 = (uint64_t)&v567;
  v556 = &v544;
  p_p = &v561;
  v558 = &v551;
  v559 = a1;
  v50 = *(unsigned int *)(a1 + 1288);
  if ((_DWORD)v50)
  {
    *((_DWORD *)v544 + 4 * v50) = 0;
    sub_1C476CB98(&v546, 0x100000000, v50);
  }
  v518 = a3;
  v51 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v51)
  {
    LODWORD(v52) = 0;
    v53 = *(uint64_t **)a3;
    v526 = *(_QWORD *)a3 + 8 * v51;
    while (1)
    {
      v533 = v53;
      v54 = *v53;
      v55 = *(_WORD *)(**(_QWORD **)(*v53 + 32) + 18);
      *(_DWORD *)(a1 + 1392) = 0x7FFFFFFF;
      v530 = v54;
      v56 = *(_QWORD *)(v54 + 56);
      v536 = v54 + 48;
      if (v56 != v54 + 48)
        break;
LABEL_190:
      if (*(_BYTE *)(a1 + 1841))
      {
        LODWORD(v52) = v52 + 1;
        *(_DWORD *)(a1 + 1392) = v52;
        v110 = sub_1C49EE844(a1, v530);
        v111 = *(unsigned int *)(v110 + 8);
        if ((_DWORD)v111)
        {
          v112 = v110;
          v113 = *(int **)v110;
          v114 = 4 * v111;
          do
          {
            v115 = *v113++;
            v549 = (int *)0x8000000080000000;
            v550 = 0x80000000;
            v548[0] = v115;
            v548[1] = 0;
            sub_1C49F3600((uint64_t)&__p, v52, v548, (uint64_t *)&v549, *(unsigned __int8 *)(v112 + 16));
            v114 -= 4;
          }
          while (v114);
        }
      }
      v53 = v533 + 1;
      if (v533 + 1 == (uint64_t *)v526)
        goto LABEL_195;
    }
    v57 = v55 & 0x3FF0;
    while (1)
    {
      v52 = (v52 + 1);
      v58 = *(unsigned int *)(v56 + 40);
      if ((_DWORD)v58)
      {
        v59 = *(_QWORD *)(v56 + 32);
        v60 = 32 * v58;
        do
        {
          v549 = 0;
          v61 = sub_1C49F21C0(*(_QWORD *)(a1 + 1248), *(_DWORD *)(a1 + 1264), v59, &v549);
          v62 = v549;
          if (v61)
            v63 = v549 == (int *)(*(_QWORD *)(a1 + 1248) + 16 * *(unsigned int *)(a1 + 1264));
          else
            v63 = 1;
          if (!v63)
          {
            v549 = (int *)0x8000000080000000;
            v550 = 0x80000000;
            if (v62[3])
            {
              v549 = (int *)sub_1C49F9518(*(_QWORD *)(*(_QWORD *)v62 + 8), (*(_QWORD *)v62 - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v62 + 8) + 32)) >> 5, *(_QWORD *)(a1 + 1416));
              v550 = v64;
            }
            sub_1C49F3600((uint64_t)&__p, v52, v62 + 2, (uint64_t *)&v549, 0);
          }
          v59 += 32;
          v60 -= 32;
        }
        while (v60);
      }
      v65 = *(_QWORD *)(a1 + 1224);
      v66 = *(unsigned int *)(a1 + 1240);
      v67 = sub_1C49F31C4(v65, *(_DWORD *)(a1 + 1240), v56);
      if ((uint64_t *)(v65 + 16 * v66) != v67)
      {
        v68 = v67;
        v549 = (int *)0x8000000080000000;
        v550 = 0x80000000;
        if (*((_DWORD *)v67 + 3))
        {
          v549 = (int *)sub_1C49F972C(*v67);
          v550 = v69;
        }
        sub_1C49F3600((uint64_t)&__p, v52, (int *)v68 + 2, (uint64_t *)&v549, 0);
      }
      if (*(_DWORD *)v568)
        break;
LABEL_184:
      *(_DWORD *)v568 = 0;
      if (!v56 || (*(_BYTE *)v56 & 4) == 0)
      {
        while ((*(_WORD *)(v56 + 44) & 8) != 0)
          v56 = *(_QWORD *)(v56 + 8);
      }
      v56 = *(_QWORD *)(v56 + 8);
      if (v56 == v536)
        goto LABEL_190;
    }
    v70 = (char *)v567;
    v71 = (char *)v567 + 24 * *(unsigned int *)v568;
    while (1)
    {
      v72 = *((unsigned int *)v70 + 2);
      v73 = *((_DWORD *)v70 + 3);
      v74 = (signed int *)((char *)v561 + 12 * v72);
      if (*v74 > v73)
        v73 = *v74;
      *v74 = v73;
      v75 = v74[2];
      if (v75 <= *((_DWORD *)v70 + 5))
        v75 = *((_DWORD *)v70 + 5);
      v74[2] = v75;
      if ((_DWORD)v564)
      {
        v76 = (char *)v563 + 12 * v564;
        v77 = *((_DWORD *)v76 - 1);
        if (v77 <= *((_DWORD *)v70 + 5))
          v77 = *((_DWORD *)v70 + 5);
        *((_DWORD *)v76 - 1) = v77;
        v72 = *((unsigned int *)v70 + 2);
      }
      v78 = (char *)v544 + 16 * v72;
      if (*v78 == 0x80000000)
      {
        *v78 = v52;
        if (v547 >= HIDWORD(v547))
        {
          sub_1C476CB98(&v546, *(_QWORD *)v70, *((_DWORD *)v70 + 2));
        }
        else
        {
          v79 = (char *)v546 + 12 * v547;
          v80 = *(_QWORD *)v70;
          *((_DWORD *)v79 + 2) = *((_DWORD *)v70 + 2);
          *(_QWORD *)v79 = v80;
          LODWORD(v547) = v547 + 1;
        }
      }
      if (v57 == 1600 || !*(_DWORD *)(a1 + 1400))
        goto LABEL_153;
      v81 = *(_QWORD *)(a1 + 1416);
      v82 = **(unsigned __int16 **)(v56 + 16);
      v83 = sub_1C4C915C4(v82);
      if ((v83 & 0xFF00000000) == 0)
LABEL_812:
        llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
      v84 = (v83 - 94) > 0x35 || ((1 << (v83 - 94)) & 0x200000080007D1) == 0;
      if (v84 || (_DWORD)v83 == 147 && !*(_BYTE *)(*(_QWORD *)(v56 + 32) + 32 * sub_1C4C2FD5C(v82)))
        goto LABEL_153;
      v85 = sub_1C49F9518(v56, 0, v81);
      if (!v553)
      {
        v89 = 0;
        goto LABEL_147;
      }
      v86 = *((_DWORD *)v70 + 2);
      v87 = v553 - 1;
      v88 = (37 * v86) & (v553 - 1);
      v89 = (int *)(v551 + 12 * v88);
      v90 = *v89;
      if (v86 != *v89)
        break;
LABEL_152:
      *(_QWORD *)(v89 + 1) = v85 | (unint64_t)(v52 << 32);
LABEL_153:
      v70 += 24;
      if (v70 == v71)
        goto LABEL_184;
    }
    v91 = 0;
    v92 = 1;
    while (v90 != -1)
    {
      if (v91)
        v93 = 0;
      else
        v93 = v90 == -2;
      if (v93)
        v91 = v89;
      v94 = v88 + v92++;
      v88 = v94 & v87;
      v89 = (int *)(v551 + 12 * (v94 & v87));
      v90 = *v89;
      if (v86 == *v89)
        goto LABEL_152;
    }
    if (v91)
      v89 = v91;
LABEL_147:
    if (4 * (int)v552 + 4 >= 3 * v553)
    {
      sub_1C49F39AC(&v551, 2 * v553);
      if (v553)
      {
        v95 = *((_DWORD *)v70 + 2);
        v96 = v553 - 1;
        v97 = (37 * v95) & (v553 - 1);
        v89 = (int *)(v551 + 12 * v97);
        v98 = *v89;
        if (v95 == *v89)
          goto LABEL_149;
        v99 = 0;
        v100 = 1;
        while (v98 != -1)
        {
          if (v99)
            v101 = 0;
          else
            v101 = v98 == -2;
          if (v101)
            v99 = v89;
          v102 = v97 + v100++;
          v97 = v102 & v96;
          v89 = (int *)(v551 + 12 * (v102 & v96));
          v98 = *v89;
          if (v95 == *v89)
            goto LABEL_149;
        }
LABEL_180:
        if (v99)
          v89 = v99;
        goto LABEL_149;
      }
    }
    else
    {
      if (v553 + ~(_DWORD)v552 - HIDWORD(v552) > v553 >> 3)
      {
LABEL_149:
        LODWORD(v552) = v552 + 1;
        if (*v89 != -1)
          --HIDWORD(v552);
        *v89 = *((_DWORD *)v70 + 2);
        *(_QWORD *)(v89 + 1) = 0x8000000080000000;
        goto LABEL_152;
      }
      sub_1C49F39AC(&v551, v553);
      if (v553)
      {
        v103 = *((_DWORD *)v70 + 2);
        v104 = v553 - 1;
        v105 = (37 * v103) & (v553 - 1);
        v89 = (int *)(v551 + 12 * v105);
        v106 = *v89;
        if (*v89 == v103)
          goto LABEL_149;
        v99 = 0;
        v107 = 1;
        while (v106 != -1)
        {
          if (v99)
            v108 = 0;
          else
            v108 = v106 == -2;
          if (v108)
            v99 = v89;
          v109 = v105 + v107++;
          v105 = v109 & v104;
          v89 = (int *)(v551 + 12 * (v109 & v104));
          v106 = *v89;
          if (*v89 == v103)
            goto LABEL_149;
        }
        goto LABEL_180;
      }
    }
    v89 = 0;
    goto LABEL_149;
  }
LABEL_195:
  v116 = v546;
  if ((_DWORD)v547)
  {
    v117 = 0;
    v118 = (char *)v546 + 12 * v547;
    v119 = 12 * v547;
    v120 = v518;
    v121 = v8;
    while (*((_BYTE *)v546 + v117 + 4)
         || *(_DWORD *)((char *)v546 + v117) >= *((_DWORD *)v544 + 4 * *(unsigned int *)((char *)v546 + v117 + 8) + 3))
    {
      v117 += 12;
      if (v119 == v117)
      {
        v122 = v524;
        goto LABEL_202;
      }
    }
    v118 = (char *)v546 + v117;
    if (v119 - 12 == v117)
    {
      v122 = v524;
    }
    else
    {
      v515 = v118 + 12;
      v516 = v119 - v117 - 12;
      v122 = v524;
      do
      {
        if (v515[4] || *(_DWORD *)v515 >= *((_DWORD *)v544 + 4 * *((unsigned int *)v515 + 2) + 3))
        {
          v517 = *(_QWORD *)v515;
          *((_DWORD *)v118 + 2) = *((_DWORD *)v515 + 2);
          *(_QWORD *)v118 = v517;
          v118 += 12;
        }
        v515 += 12;
        v516 -= 12;
      }
      while (v516);
      v116 = v546;
    }
  }
  else
  {
    v118 = (char *)v546;
    v120 = v518;
    v122 = v524;
    v121 = v8;
  }
LABEL_202:
  LODWORD(v547) = -1431655765 * ((unint64_t)(v118 - v116) >> 2);
  LODWORD(v562) = 0;
  if ((_DWORD)v564)
  {
    v123 = (char *)v563;
    if ((char *)v563 + 12 * v564 - 12 != v563)
    {
      v124 = 12 * v564;
      do
      {
        *(_DWORD *)&v123[v124 - 16] += *(_DWORD *)&v123[v124 - 4];
        v124 -= 12;
      }
      while (v124 != 12);
    }
  }
  if (v567 != &v568[8])
    free(v567);
  MEMORY[0x1CAA32FB4](v551, 4);
  __p = &v556;
  v555 = 0x600000000;
  sub_1C4765AA4((char *)&__p, (v121 + 64) >> 6, 0);
  v560 = v521;
  v567 = &v568[8];
  *(_QWORD *)v568 = 0x800000000;
  v125 = atomic_load((unsigned __int8 *)&qword_1ED7ECB70);
  if ((v125 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7ECB70))
    __cxa_guard_release(&qword_1ED7ECB70);
  v126 = dword_1ED7ED080;
  if (!word_1ED7ED008)
    v126 = 0;
  v127 = *(_DWORD *)(a1 + 1852);
  v128 = v127 - v126;
  if (v127 < v126)
    v128 = 0;
  if (v126)
    v129 = v128;
  else
    v129 = 0;
  if (*(_DWORD *)(a1 + 1400) >= v127 - v129)
    *(_DWORD *)(a1 + 1400) = 0;
  if ((_DWORD)v547)
  {
    v130 = (char *)v546;
    v131 = (char *)v546 + 12 * v547;
    v132 = ~(-1 << v129);
    v540 = v131;
    v534 = v129;
    do
    {
      v133 = *((unsigned int *)v130 + 2);
      v134 = (char *)__p;
      if (((*(_QWORD *)((char *)__p + ((v133 >> 3) & 0x1FFFFFF8)) >> v133) & 1) == 0)
      {
        if (v130[4])
        {
          v135 = *(_DWORD *)v568;
          v136 = *(_DWORD *)(a1 + 1852);
          if (*(_DWORD *)v568 >= (v136 - v129))
          {
            v153 = v544;
            v154 = v565[0];
            if (*(_DWORD *)v568 == 1)
            {
              v156 = 0;
            }
            else
            {
              v155 = 0;
              v156 = 0;
              v157 = *((unsigned int *)v567 + 1);
              v158 = *((_DWORD *)v544 + 4 * v157 + 2);
              v159 = *((_DWORD *)v565[0] + v157);
              v160 = (unsigned int *)((char *)v567 + 12);
              v161 = 0x7FFFFFFF;
              do
              {
                v162 = 0;
                v164 = *v160;
                v160 += 2;
                v163 = v164;
                v165 = *((_DWORD *)v565[0] + v164);
                if (v159 != -1 && v165 != -1)
                {
                  v166 = (char *)v563 + 12 * v165;
                  v167 = (int *)((char *)v563 + 12 * v159);
                  v168 = *v167;
                  v169 = v167[2] - *((_DWORD *)v166 + 2);
                  v162 = (*((_DWORD *)v166 + 1) - v168) & ~((*((_DWORD *)v166 + 1) - v168) >> 31);
                  if (v169 < v162)
                    v162 = v169;
                }
                v170 = *((_DWORD *)v544 + 4 * v163 + 2);
                v171 = v162 + v170 - v158;
                if (v171 <= v161)
                  v156 = v155;
                v172 = v155 + 1;
                if (v171 < v161)
                  v161 = v171;
                v159 = v165;
                v158 = v170;
                ++v155;
              }
              while (*(_DWORD *)v568 - 1 != v172);
            }
            v173 = (char *)v567 + 8 * v156;
            v174 = v156 + 1;
            v175 = (char *)v567 + 8 * v174;
            v176 = *((unsigned int *)v173 + 1);
            v177 = (char *)v544 + 16 * v176;
            v178 = *((unsigned int *)v175 + 1);
            v179 = *((_DWORD *)v544 + 4 * v178);
            if (*v177 <= v179)
              v180 = (char *)v567 + 8 * v156;
            else
              v180 = (char *)v567 + 8 * v174;
            if (*v177 <= v179)
              v181 = (char *)v567 + 8 * v174;
            else
              v181 = (char *)v567 + 8 * v156;
            v537 = *(_DWORD *)v180;
            v182 = *((_DWORD *)v544 + 4 * *((unsigned int *)v180 + 1));
            v183 = *(_DWORD *)v181;
            v184 = v177[2];
            v185 = *((_DWORD *)v565[0] + v176);
            v186 = *((_DWORD *)v565[0] + v178);
            if (v185 != -1 && v186 != -1)
            {
              *(int32x2_t *)((char *)v563 + 12 * v185) = vmax_s32(*(int32x2_t *)((char *)v563 + 12 * v185), *(int32x2_t *)((char *)v563 + 12 * v186));
              v154[v178] = v185;
              v176 = *((unsigned int *)v173 + 1);
              v178 = *((unsigned int *)v175 + 1);
            }
            v188 = v156;
            v189 = v132 & ~(1 << v183);
            v190 = v153[4 * v176 + 3];
            v191 = v153[4 * v178 + 3];
            v192 = v190 <= v191;
            if (v190 <= v191)
              v193 = v173;
            else
              v193 = v175;
            if (v192)
              v194 = v175;
            else
              v194 = v173;
            v195 = *((unsigned int *)v194 + 1);
            v196 = v153[4 * v195 + 3];
            *(_QWORD *)&v134[((unint64_t)*((unsigned int *)v193 + 1) >> 3) & 0x1FFFFFF8] |= 1 << *((_DWORD *)v193 + 1);
            sub_1C49F2C20(v524, v176, v178);
            v197 = (char *)v544 + 16 * v195;
            *(_DWORD *)v197 = v182;
            v197[4] = 0;
            *((_DWORD *)v197 + 2) = v184;
            *((_DWORD *)v197 + 3) = v196;
            v198 = (char *)v567;
            v199 = (char *)v567 + 8 * v188;
            *v199 = v537;
            v199[1] = v195;
            v200 = __clz(__rbit64(~v189));
            v201 = &v198[8 * v174];
            *(_DWORD *)v201 = v200;
            *((_DWORD *)v201 + 1) = v133;
            v202 = (v188 + 2);
            if (*(_DWORD *)v568 <= v202)
            {
              v120 = v518;
              v122 = v524;
              v121 = v519;
              v129 = v534;
              v131 = v540;
            }
            else
            {
              v203 = (8 * v202) | 4;
              v120 = v518;
              v122 = v524;
              v121 = v519;
              v129 = v534;
              v131 = v540;
              do
              {
                v204 = v567;
                if (*((_DWORD *)v544 + 4 * *((unsigned int *)v567 + 2 * v174 + 1) + 2) <= *((_DWORD *)v544 + 4 * *(unsigned int *)((char *)v567 + v203) + 2))
                  break;
                v205 = *((_QWORD *)v567 + v174);
                *((_QWORD *)v567 + v174) = *((_QWORD *)v567 + v202);
                v204[v202++] = v205;
                LODWORD(v174) = v174 + 1;
                v203 += 8;
              }
              while (v202 < *(unsigned int *)v568);
            }
            if ((_DWORD)v174)
            {
              do
              {
                v206 = (v174 - 1);
                v207 = v567;
                if (*((_DWORD *)v544 + 4 * *((unsigned int *)v567 + 2 * v206 + 1) + 2) <= *((_DWORD *)v544 + 4 * *((unsigned int *)v567 + 2 * v174 + 1) + 2))
                  break;
                v208 = *((_QWORD *)v567 + v206);
                *((_QWORD *)v567 + v206) = *((_QWORD *)v567 + v174);
                v207[v174] = v208;
                LODWORD(v174) = v174 - 1;
              }
              while ((_DWORD)v206);
            }
            v132 = (1 << v200) | v189;
          }
          else
          {
            if (*((_BYTE *)v544 + 16 * v133 + 4) && (v137 = *(unsigned int *)(a1 + 1400), (_DWORD)v137))
            {
              while (((v132 >> (v136 - 1)) & 1) != 0)
              {
                --v136;
                if (!--v137)
                  goto LABEL_229;
              }
              v138 = (v136 - 1);
            }
            else
            {
LABEL_229:
              v138 = __clz(__rbit64(~v132));
            }
            v139 = *(_DWORD *)v568;
            if (*(_DWORD *)v568 >= *(_DWORD *)&v568[4])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v567, (uint64_t)&v568[8], *(unsigned int *)v568 + 1, 8);
              v139 = *(_DWORD *)v568;
            }
            *((_QWORD *)v567 + v139) = v138 | (v133 << 32);
            ++*(_DWORD *)v568;
            v140 = v135 + 1;
            if (*(_DWORD *)v568 > v140)
            {
              v141 = (8 * v140) | 4;
              do
              {
                v142 = v567;
                if (*((_DWORD *)v544 + 4 * *((unsigned int *)v567 + 2 * v135 + 1) + 2) <= *((_DWORD *)v544
                                                                                           + 4
                                                                                           * *(unsigned int *)((char *)v567 + v141)
                                                                                           + 2))
                  break;
                v143 = *((_QWORD *)v567 + v135);
                *((_QWORD *)v567 + v135) = *((_QWORD *)v567 + v140);
                v142[v140++] = v143;
                ++v135;
                v141 += 8;
              }
              while (v140 < *(unsigned int *)v568);
            }
            if (v135)
            {
              do
              {
                v144 = v135 - 1;
                v145 = v567;
                if (*((_DWORD *)v544 + 4 * *((unsigned int *)v567 + 2 * v144 + 1) + 2) <= *((_DWORD *)v544 + 4 * *((unsigned int *)v567 + 2 * v135 + 1) + 2))
                  break;
                v146 = *((_QWORD *)v567 + v144);
                *((_QWORD *)v567 + v144) = *((_QWORD *)v567 + v135);
                v145[v135--] = v146;
              }
              while ((_DWORD)v144);
            }
            v132 |= 1 << v138;
            v131 = v540;
          }
        }
        else
        {
          v147 = (int *)v567;
          if (*(_DWORD *)v568)
          {
            v148 = 8 * *(unsigned int *)v568;
            while (v147[1] != (_DWORD)v133)
            {
              v147 += 2;
              v148 -= 8;
              if (!v148)
              {
                v147 = (int *)((char *)v567 + 8 * *(unsigned int *)v568);
                break;
              }
            }
          }
          v149 = sub_1C49F2E68(v122, v147[1]);
          v150 = *v147;
          *(_DWORD *)(*v535 + 4 * v149) = *v147 + 1;
          v151 = *(_DWORD *)v568;
          v152 = (char *)v567 + 8 * *(unsigned int *)v568;
          if (v152 != (char *)(v147 + 2))
          {
            memmove(v147, v147 + 2, v152 - (char *)(v147 + 2));
            v151 = *(_DWORD *)v568;
          }
          v132 &= ~(1 << v150);
          *(_DWORD *)v568 = v151 - 1;
        }
      }
      v130 += 12;
    }
    while (v130 != v131);
  }
  if (*(_DWORD *)v568)
  {
    v209 = 8 * *(unsigned int *)v568;
    v210 = (unsigned int *)((char *)v567 + 4);
    do
    {
      *(_DWORD *)(*v535 + 4 * sub_1C49F2E68(v122, *v210)) = *(v210 - 1) + 1;
      v210 += 2;
      v209 -= 8;
    }
    while (v209);
  }
  if (v121)
  {
    v211 = 1;
    do
    {
      *(_DWORD *)(*v535 + 4 * v211) = *(_DWORD *)(*v535 + 4 * sub_1C49F2E68(v122, v211));
      v211 = (v211 + 1);
    }
    while (v211 <= v121);
  }
  v212 = *(_QWORD *)(a1 + 1248);
  v213 = *(unsigned int *)(a1 + 1264);
  v214 = (unsigned int *)(v212 + 16 * v213);
  if (*(_DWORD *)(a1 + 1256))
  {
    if ((_DWORD)v213)
    {
      v215 = 16 * v213;
      v216 = *(unsigned int **)(a1 + 1248);
      while ((*(_QWORD *)v216 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v216 += 4;
        v215 -= 16;
        if (!v215)
          goto LABEL_300;
      }
    }
    else
    {
      v216 = *(unsigned int **)(a1 + 1248);
    }
  }
  else
  {
LABEL_300:
    v216 = (unsigned int *)(v212 + 16 * v213);
  }
  v217 = (unsigned int *)(v212 + 16 * v213);
LABEL_303:
  while (v216 != v217)
  {
    v218 = *(_QWORD *)v216;
    if (sub_1C4AD4FB8(*(_QWORD *)(*(_QWORD *)v216 + 8), (*(_QWORD *)v216 - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v216 + 8) + 32)) >> 5, (_QWORD *)(*(_QWORD *)(a1 + 1416) + 8)) == 4)
    {
      v220 = sub_1C4C915C4(**(unsigned __int16 **)(*(_QWORD *)(v218 + 8) + 16));
      if ((v220 & 0xFF00000000) == 0)
        goto LABEL_812;
      if ((_DWORD)v220 == 85 || (_DWORD)v220 == 18)
        *(_DWORD *)(*(_QWORD *)(a1 + 1272) + 4 * v216[3]) = *(_DWORD *)(a1 + 1852);
    }
    v219 = v216 + 4;
    v216 = v214;
    if (v219 != v214)
    {
      v216 = v219;
      while ((*(_QWORD *)v216 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v216 += 4;
        if (v216 == v214)
        {
          v216 = v214;
          goto LABEL_303;
        }
      }
    }
  }
  v222 = *v528;
  if ((_DWORD)v222)
    *(_DWORD *)(*v535 + 4 * v222) = 6;
  v223 = 0;
  *(_DWORD *)(a1 + 1216) = 0;
  if (!*(_DWORD *)(a1 + 1220))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v122, v525, 1uLL, 8);
    v223 = *(_DWORD *)(a1 + 1216);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 1208) + 8 * v223) = 0;
  ++*(_DWORD *)(a1 + 1216);
  if (v567 != &v568[8])
    free(v567);
  if (__p != &v556)
    free(__p);
  if (v565[0] != &v566)
    free(v565[0]);
  if (v563 != v565)
    free(v563);
  if (v561 != &v563)
    free(v561);
  if (v544 != &v546)
    free(v544);
  if (v546 != v548)
    free(v546);
  if (*(_BYTE *)(a1 + 1850))
  {
    v224 = *(_DWORD *)(v120 + 8);
    if (*v528 && v224)
    {
      v225 = **(_QWORD **)v120;
      v226 = sub_1C49EE844(a1, v225);
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v225 + 32) + 16) + 303) | *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v225 + 32) + 16) + 305))
        v227 = 8;
      else
        v227 = 6;
      v228 = sub_1C49F3B34(v226, v227);
      v538 = *(_QWORD *)(*(_QWORD *)(v225 + 32) + 56);
      v229 = *(_DWORD *)(v538 + 32);
      v230 = -v229;
      if (v229 > 0)
      {
        v231 = v228;
        v232 = *(_DWORD *)(*(_QWORD *)(a1 + 1272) + 4 * *(unsigned int *)(a1 + 1288));
        v541 = v228 + 472;
        v233 = v228 + 496;
        v234 = v228 + 448;
        while (1)
        {
          v235 = *(_DWORD *)(v538 + 32) + v230;
          v236 = *(_QWORD *)(v538 + 8);
          if (!*(_BYTE *)(v236 + 40 * v235 + 18))
          {
            v237 = v236 + 40 * v235;
            v238 = *(_DWORD *)(v237 + 8) + *(_QWORD *)v237;
            v239 = *(uint64_t *)v237 >= 0 ? *(_QWORD *)v237 : *(_QWORD *)v237 + 1;
            v240 = v239 >> 1;
            v241 = v238 >> 1;
            if ((v238 >> 1) + 1 != (_DWORD)v240)
              break;
          }
LABEL_356:
          if (__CFADD__(v230++, 1))
            goto LABEL_358;
        }
        v242 = (v240 << 32) | 2;
        v243 = v240 - 1;
        while (1)
        {
          v244 = *v528;
          if ((_DWORD)v242 == 2)
            break;
          v245 = v234;
          if ((_DWORD)v242 == 1)
            goto LABEL_354;
          v245 = v233;
          if (!(_DWORD)v242)
            goto LABEL_354;
          v246 = 0;
LABEL_355:
          sub_1C49F3E04(v231, v246 + 24, 0, v232, v244);
          v242 = v242 | ((unint64_t)(v243 + 2) << 32);
          if (v241 == ++v243)
            goto LABEL_356;
        }
        v245 = v541;
LABEL_354:
        v246 = sub_1C49F3F18(v231, SHIDWORD(v242), v245);
        goto LABEL_355;
      }
LABEL_358:
      v120 = v518;
      v224 = *(_DWORD *)(v518 + 8);
    }
    if (v224)
    {
      v248 = *(uint64_t **)v120;
      v249 = a1 + 1728;
      v520 = *(_QWORD *)v120 + 8 * v224;
      while (1)
      {
        v522 = v248;
        v250 = *v248;
        v529 = sub_1C49EE844(a1, v250);
        *(_QWORD *)(a1 + 1864) = sub_1C49F3B34(v529, *(_DWORD *)(a1 + 1852));
        v251 = *(uint64_t **)(v250 + 64);
        v252 = *(uint64_t **)(v250 + 72);
        v542 = v250;
        while (v251 != v252)
        {
          v253 = *v251;
          v254 = sub_1C49EE844(a1, *v251);
          v255 = *(_QWORD *)(a1 + 1864);
          v256 = sub_1C49F3B34(v254, *(_DWORD *)(a1 + 1852));
          v257 = *(_QWORD *)(a1 + 1416);
          sub_1C49F433C(v255, v542, v253, v257, v255 + 448, v256 + 448, 0, 0);
          sub_1C49F433C(v255, v542, v253, v257, v255 + 472, v256 + 472, 0, 0);
          sub_1C49F433C(v255, v542, v253, v257, v255 + 496, v256 + 496, 0, 0);
          if (!*(_BYTE *)(v254 + 16))
          {
            v258 = sub_1C49F3B34(v254, *(_DWORD *)(a1 + 1852));
            v259 = *(_DWORD *)(v258 + 520) + 1;
            *(_DWORD *)(v258 + 520) = v259;
            if (v259 >= ((*(_QWORD *)(v253 + 96) - *(_QWORD *)(v253 + 88)) >> 3))
            {
              sub_1C49F3D98(v258);
              sub_1C49F4710((uint64_t *)(v254 + 80), 0);
              *(_BYTE *)(v254 + 88) = 1;
            }
          }
          ++v251;
        }
        if (byte_1ED7ECFC0)
        {
          v260 = *(_BYTE *)(a1 + 1840) ? 0 : a1 + 1784;
          v261 = **(_QWORD **)(a1 + 1384) + 16 * *(int *)(v542 + 24);
          v262 = *(unsigned int *)(v261 + 8);
          if ((_DWORD)v262)
          {
            v263 = *(unsigned int **)v261;
            v264 = *(_QWORD *)(v542 + 32);
            v265 = 4 * v262;
            do
            {
              v266 = *v263++;
              v267 = *(_QWORD *)(*(_QWORD *)(v264 + 104) + 8 * v266);
              v268 = sub_1C49EE844(a1, v267);
              v269 = *(_QWORD *)(a1 + 1864);
              v270 = sub_1C49F3B34(v268, *(_DWORD *)(a1 + 1852));
              sub_1C49F433C(v269, v542, v267, *(_QWORD *)(a1 + 1416), v269 + 496, v270 + 496, v260, 1);
              v271 = *(_QWORD *)(a1 + 1864);
              v272 = sub_1C49F3B34(v268, *(_DWORD *)(a1 + 1852));
              sub_1C49F433C(v271, v542, v267, *(_QWORD *)(a1 + 1416), v271 + 448, v272 + 448, v249, 1);
              v265 -= 4;
            }
            while (v265);
          }
        }
        v273 = v542 + 48;
        v274 = *(_QWORD *)(v542 + 56);
        v275 = v529;
        v276 = (uint64_t *)(a1 + 1272);
        if (v274 != v542 + 48)
        {
          while (1)
          {
            if ((*(_BYTE *)(*(_QWORD *)(v274 + 16) + 20) & 4) == 0)
              goto LABEL_456;
            v277 = *(_QWORD *)(a1 + 1224);
            v278 = *(unsigned int *)(a1 + 1240);
            v279 = sub_1C49F31C4(v277, *(_DWORD *)(a1 + 1240), v274);
            if ((uint64_t *)(v277 + 16 * v278) != v279)
            {
              v280 = v279;
              v281 = *(_DWORD *)(*v276 + 4 * *((unsigned int *)v279 + 2));
              if (v281)
              {
                v282 = sub_1C4AD4D04(v274) == 4;
                v283 = *(_QWORD *)(a1 + 1864);
                v284 = *((_DWORD *)v280 + 2);
                v285 = *(_QWORD *)(a1 + 1416);
                v286 = sub_1C4AD4D04(v274);
                sub_1C49F4F94(*(_QWORD *)(v283 + 8), v281, v284, 1u, v282, v285, v286);
              }
            }
            v561 = &v563;
            v562 = 0x200000000;
            v567 = &v568[8];
            *(_QWORD *)v568 = 0x800000000;
            v287 = *(unsigned int *)(v274 + 40);
            if ((_DWORD)v287)
            {
              v288 = 0;
              v289 = 0;
              while (2)
              {
                v290 = *(_QWORD *)(v274 + 32) + v288;
                __p = 0;
                v291 = sub_1C49F21C0(*(_QWORD *)(a1 + 1248), *(_DWORD *)(a1 + 1264), v290, &__p);
                v292 = *(unsigned int *)(a1 + 1264);
                if (v291)
                  v293 = __p;
                else
                  v293 = (_DWORD *)(*(_QWORD *)(a1 + 1248) + 16 * v292);
                if (v293 == (_DWORD *)(*(_QWORD *)(a1 + 1248) + 16 * v292))
                {
                  LODWORD(v294) = 0;
                }
                else
                {
                  v294 = v293[2];
                  if ((_DWORD)v294)
                  {
                    v295 = *(unsigned int *)(*v535 + 4 * v294);
LABEL_389:
                    v296 = sub_1C4AD4FB8(v274, v289, (_QWORD *)(*(_QWORD *)(a1 + 1416) + 8));
                    switch(v296)
                    {
                      case 0:
                        goto LABEL_399;
                      case 1:
                        v298 = sub_1C49F495C(a1, (_QWORD *)v274, v289, 1, v295, v294, (uint64_t)&v567, 0, 0);
                        goto LABEL_395;
                      case 2:
                      case 3:
                      case 5:
                      case 7:
                        v297 = v562;
                        if (v562 >= (unint64_t)HIDWORD(v562))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v561, (uint64_t)&v563, v562 + 1, 4);
                          v297 = v562;
                        }
                        *((_DWORD *)v561 + v297) = v289;
                        LODWORD(v562) = v562 + 1;
                        goto LABEL_399;
                      case 4:
                      case 6:
                        v298 = sub_1C49F495C(a1, (_QWORD *)v274, v289, v296, v295, v294, (uint64_t)&v567, 1, 0);
LABEL_395:
                        if ((v298 & 1) == 0)
                          goto LABEL_396;
                        goto LABEL_399;
                      default:
LABEL_396:
                        if (v293 != (_DWORD *)(*(_QWORD *)(a1 + 1248) + 16 * *(unsigned int *)(a1 + 1264)) && v293[2])
                          v293[2] = 0;
LABEL_399:
                        ++v289;
                        v288 += 32;
                        if (v287 != v289)
                          continue;
                        if (!(_DWORD)v562)
                          goto LABEL_418;
                        v299 = (unsigned int *)v561;
                        v300 = 4 * v562;
                        break;
                    }
                    while (2)
                    {
                      v301 = *v299;
                      v302 = *(_QWORD *)(v274 + 32) + 32 * v301;
                      __p = 0;
                      v303 = sub_1C49F21C0(*(_QWORD *)(a1 + 1248), *(_DWORD *)(a1 + 1264), v302, &__p);
                      v304 = *(unsigned int *)(a1 + 1264);
                      if (v303)
                        v305 = __p;
                      else
                        v305 = (_DWORD *)(*(_QWORD *)(a1 + 1248) + 16 * v304);
                      if (v305 == (_DWORD *)(*(_QWORD *)(a1 + 1248) + 16 * v304))
                      {
                        LODWORD(v306) = 0;
                      }
                      else
                      {
                        v306 = v305[2];
                        if ((_DWORD)v306)
                        {
                          v307 = *(unsigned int *)(*v535 + 4 * v306);
                          goto LABEL_410;
                        }
                      }
                      v307 = 0;
LABEL_410:
                      v308 = sub_1C4AD4FB8(v274, v301, (_QWORD *)(*(_QWORD *)(a1 + 1416) + 8));
                      if (v308 == 2)
                        v309 = sub_1C49F495C(a1, (_QWORD *)v274, v301, 2, v307, v306, (uint64_t)&v567, 0, 1);
                      else
                        v309 = sub_1C49F495C(a1, (_QWORD *)v274, v301, v308, v307, v306, (uint64_t)&v567, 1, 1);
                      if ((v309 & 1) == 0
                        && v305 != (_DWORD *)(*(_QWORD *)(a1 + 1248) + 16 * *(unsigned int *)(a1 + 1264))
                        && v305[2])
                      {
                        v305[2] = 0;
                      }
                      ++v299;
                      v300 -= 4;
                      if (!v300)
                      {
LABEL_418:
                        if (*(_DWORD *)v568)
                        {
                          v310 = (__int128 *)v567;
                          v311 = 48 * *(unsigned int *)v568;
                          do
                          {
                            sub_1C49F4660(*(_QWORD *)(a1 + 1864), *((_QWORD *)v310 + 5) + 24, v310, 0);
                            v310 += 3;
                            v311 -= 48;
                          }
                          while (v311);
                        }
                        goto LABEL_421;
                      }
                      continue;
                    }
                  }
                }
                break;
              }
              v295 = 0;
              goto LABEL_389;
            }
LABEL_421:
            v312 = sub_1C4C915C4(**(unsigned __int16 **)(v274 + 16));
            if ((v312 & 0xFF00000000) == 0)
              goto LABEL_812;
            v276 = (uint64_t *)(a1 + 1272);
            if ((_DWORD)v312 == 100 || (_DWORD)v312 == 193)
              break;
LABEL_451:
            if (v567 != &v568[8])
              free(v567);
            if (v561 != &v563)
              free(v561);
            v273 = v542 + 48;
            v275 = v529;
            if (!v274)
            {
LABEL_459:
              while ((*(_WORD *)(v274 + 44) & 8) != 0)
                v274 = *(_QWORD *)(v274 + 8);
              goto LABEL_460;
            }
LABEL_456:
            if ((*(_BYTE *)v274 & 4) == 0)
              goto LABEL_459;
LABEL_460:
            v274 = *(_QWORD *)(v274 + 8);
            if (v274 == v273)
              goto LABEL_461;
          }
          v551 = v274;
          v313 = sub_1C49F2BBC(v525, &v551);
          v314 = *(unsigned int *)v313;
          if ((_DWORD)v314)
            v315 = (unint64_t)*(unsigned int *)(*v535 + 4 * v314) << 32;
          else
            v315 = 0;
          v316 = *((unsigned int *)v313 + 1);
          if ((_DWORD)v316)
            v317 = *(_DWORD *)(*v535 + 4 * v316);
          else
            v317 = 0;
          v318 = *(_QWORD *)(a1 + 1864);
          v319 = *(_QWORD *)(a1 + 1416);
          v531 = v317;
          __p = &unk_1E7FA97E0;
          v555 = v315 | v317;
          v556 = (void **)v319;
          p_p = &__p;
          sub_1C49F5790(v318 + 472, (uint64_t)&__p);
          if (p_p == &__p)
          {
            v320 = (void (**)(void))((char *)__p + 32);
LABEL_434:
            (*v320)();
          }
          else if (p_p)
          {
            v320 = (void (**)(void))((char *)*p_p + 40);
            goto LABEL_434;
          }
          v321 = *(_DWORD ***)(v318 + 240);
          v322 = *(unsigned int *)(v318 + 248);
          if ((_DWORD)v322)
          {
            v323 = (_QWORD *)(v319 + 8);
            v324 = 8 * v322;
            do
            {
              v325 = *v321;
              if (!**v321)
              {
                v326 = *((_QWORD *)v325 + 3);
                v327 = v325[8];
                if (v326)
                  v328 = v327 == -1;
                else
                  v328 = 1;
                if (!v328)
                  sub_1C4AD4FB8(v326, v327, v323);
                *v325 = 2;
              }
              ++v321;
              v324 -= 8;
            }
            while (v324);
          }
          __p = &off_1E7FA9828;
          p_p = &__p;
          sub_1C49F5790(v318 + 472, (uint64_t)&__p);
          if (p_p == &__p)
          {
            v329 = (void (**)(void))((char *)__p + 32);
            v276 = (uint64_t *)(a1 + 1272);
            v249 = a1 + 1728;
LABEL_449:
            (*v329)();
          }
          else
          {
            v276 = (uint64_t *)(a1 + 1272);
            v249 = a1 + 1728;
            if (p_p)
            {
              v329 = (void (**)(void))((char *)*p_p + 40);
              goto LABEL_449;
            }
          }
          *(_DWORD *)(v318 + 248) = 0;
          sub_1C49F3E04(v318, v318 + 240, v274, v531, v316);
          goto LABEL_451;
        }
LABEL_461:
        v330 = *(_QWORD *)(a1 + 1864);
        v331 = *(_DWORD *)(*(_QWORD *)(v330 + 8) + 8) == 0;
        if (!*(_BYTE *)(v275 + 17))
        {
          v332 = *(_QWORD *)(a1 + 1416);
          v333 = (*(_DWORD *)v330 + 1);
          v567 = &v568[16];
          *(_OWORD *)v568 = xmmword_1C6464ED0;
          sub_1C49B9F28(&v567, v333, 0);
          v334 = *(unsigned int *)(v529 + 8);
          if ((_DWORD)v334)
          {
            v335 = *(unsigned int **)v529;
            v336 = *v276;
            v337 = 4 * v334;
            v338 = v567;
            do
            {
              v339 = *v335++;
              v338[*(unsigned int *)(v336 + 4 * v339)] = 1;
              v337 -= 4;
            }
            while (v337);
          }
          v340 = *(_DWORD *)v330;
          if ((*(_DWORD *)v330 - 1) <= 0xFFFFFFFD)
          {
            v341 = 1;
            do
            {
              v342 = *(_QWORD *)(v330 + 8);
              v343 = v342 + 24 * v341;
              if (*((_BYTE *)v567 + v341))
              {
                sub_1C49F4F94(v342, v341, 0, 1u, 1, v332, 4);
                LODWORD(v344) = *(_DWORD *)(v343 + 8);
                v340 = *(_DWORD *)v330;
              }
              else
              {
                v345 = *(char **)v343;
                v346 = *(unsigned int *)(v343 + 8);
                if ((_DWORD)v346)
                {
                  v347 = 0;
                  v348 = &v345[8 * v346];
                  v349 = 8 * v346;
                  v350 = 8 * v346 - 8;
                  v351 = v350;
                  while (!**(_DWORD **)&v345[v347])
                  {
                    v347 += 8;
                    v351 -= 8;
                    if (v349 == v347)
                      goto LABEL_481;
                  }
                  v348 = &v345[v347];
                  if (v350 != v347)
                  {
                    v352 = v348 + 8;
                    do
                    {
                      if (!*(_DWORD *)*v352)
                      {
                        *(_QWORD *)v348 = *v352;
                        v348 += 8;
                      }
                      ++v352;
                      v351 -= 8;
                    }
                    while (v351);
                    v345 = *(char **)v343;
                  }
                }
                else
                {
                  v348 = *(char **)v343;
                }
LABEL_481:
                v344 = (unint64_t)(v348 - v345) >> 3;
                *(_DWORD *)(v343 + 8) = v344;
              }
              v331 &= (_DWORD)v344 == 0;
              ++v341;
            }
            while (v341 < (v340 + 1));
          }
          if (v567 != &v568[16])
            free(v567);
          v353 = *(_BYTE *)(v529 + 17) ? 1 : v331;
          if ((v353 & 1) == 0)
            break;
        }
        sub_1C49F3D98(v330);
        v354 = v522;
LABEL_490:
        v248 = v354 + 1;
        if (v248 == (uint64_t *)v520)
        {
          v360 = *(unsigned int *)(v518 + 8);
          if ((_DWORD)v360)
          {
            v361 = *(uint64_t **)v518;
            v362 = 8 * v360;
            do
            {
              v363 = *v361++;
              v364 = sub_1C49EE844(a1, v363);
              *(_BYTE *)(v364 + 88) = 0;
              v365 = sub_1C49F3B34(v364, *(_DWORD *)(a1 + 1852));
              *(_QWORD *)(a1 + 1864) = v365;
              sub_1C49F3D98(v365);
              v362 -= 8;
            }
            while (v362);
          }
          goto LABEL_514;
        }
      }
      v355 = (*(_DWORD *)v330 + 1);
      if (*(_DWORD *)v330 != -1)
      {
        v356 = (_DWORD *)(*(_QWORD *)(v330 + 8) + 8);
        do
        {
          *v356 = 0;
          v356 += 6;
          --v355;
        }
        while (v355);
      }
      LOBYTE(__p) = 1;
      v567 = &off_1E7FA9870;
      *(_QWORD *)v568 = v542;
      *(_QWORD *)&v568[8] = &__p;
      *(_QWORD *)&v568[16] = &v567;
      sub_1C49F5790(v330 + 448, (uint64_t)&v567);
      if (*(void ***)&v568[16] == &v567)
      {
        v357 = (void (**)(void))((char *)v567 + 32);
        v354 = v522;
      }
      else
      {
        v354 = v522;
        if (!*(_QWORD *)&v568[16])
          goto LABEL_500;
        v357 = (void (**)(void))(**(_QWORD **)&v568[16] + 40);
      }
      (*v357)();
LABEL_500:
      v567 = &off_1E7FA9870;
      *(_QWORD *)v568 = v542;
      *(_QWORD *)&v568[8] = &__p;
      *(_QWORD *)&v568[16] = &v567;
      sub_1C49F5790(v330 + 472, (uint64_t)&v567);
      if (*(void ***)&v568[16] == &v567)
      {
        v358 = (void (**)(void))((char *)v567 + 32);
      }
      else
      {
        if (!*(_QWORD *)&v568[16])
          goto LABEL_505;
        v358 = (void (**)(void))(**(_QWORD **)&v568[16] + 40);
      }
      (*v358)();
LABEL_505:
      v567 = &off_1E7FA9870;
      *(_QWORD *)v568 = v542;
      *(_QWORD *)&v568[8] = &__p;
      *(_QWORD *)&v568[16] = &v567;
      sub_1C49F5790(v330 + 496, (uint64_t)&v567);
      if (*(void ***)&v568[16] == &v567)
      {
        v359 = (void (**)(void))((char *)v567 + 32);
      }
      else
      {
        if (!*(_QWORD *)&v568[16])
        {
LABEL_510:
          *(_DWORD *)(v330 + 248) = 0;
          goto LABEL_490;
        }
        v359 = (void (**)(void))(**(_QWORD **)&v568[16] + 40);
      }
      (*v359)();
      goto LABEL_510;
    }
  }
LABEL_514:
  v366 = *(_QWORD *)(a1 + 1248);
  v367 = *(unsigned int *)(a1 + 1264);
  v368 = (unsigned int *)(v366 + 16 * v367);
  if (*(_DWORD *)(a1 + 1256))
  {
    if ((_DWORD)v367)
    {
      v369 = 16 * v367;
      v370 = *(unsigned int **)(a1 + 1248);
      while ((*(_QWORD *)v370 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v370 += 4;
        v369 -= 16;
        if (!v369)
          goto LABEL_519;
      }
    }
    else
    {
      v370 = *(unsigned int **)(a1 + 1248);
    }
  }
  else
  {
LABEL_519:
    v370 = (unsigned int *)(v366 + 16 * v367);
  }
  v371 = (unsigned int *)(v366 + 16 * v367);
LABEL_522:
  while (v370 != v371)
  {
    v372 = *(_DWORD *)(*v535 + 4 * v370[2]);
    v373 = *(unsigned int *)(*v535 + 4 * v370[3]);
    v374 = *(_QWORD *)(*(_QWORD *)v370 + 8);
    v375 = *(_QWORD *)(v374 + 32);
    v376 = *(_QWORD *)v370 - v375;
    v377 = v376 >> 5;
    if (llvm::MachineInstr::getNumExplicitOperands(v374) <= (v376 >> 5))
      goto LABEL_549;
    v378 = *(unsigned __int16 **)(v374 + 16);
    if ((word_1C6AA47DC[dword_1C6A9B6CC[*v378] + (unsigned __int16)v377] & 0xFFFB) == 0x3A)
    {
      v380 = v377 + 2;
    }
    else
    {
      if ((*(_DWORD *)(v375 + (v376 & 0x1FFFFFFFE0)) & 0x10000FF) == 0x1000000)
      {
        v381 = *((unsigned __int8 *)v378 + 4);
        if ((v378[4] & 2) == 0 || (v385 = *(_DWORD *)(v374 + 40), v385 == v381))
        {
          v382 = v381;
        }
        else
        {
          v386 = v385 - 1;
          v382 = v381;
          do
          {
            v387 = *(_DWORD *)(v375 + 32 * v381);
            if ((v387 & 0x10000FF) != 0x1000000)
              break;
            v382 += (v387 & 0x2000000) == 0;
            if (v386 == v381)
              break;
            ++v381;
          }
          while ((v387 & 0x2000000) == 0);
        }
        v380 = v382 + v377;
        goto LABEL_535;
      }
      if (*(_DWORD *)(v375 + (v376 & 0x1FFFFFFFE0)))
        v379 = *(_DWORD *)(v375 + (v376 & 0x1FFFFFFFE0)) == 7;
      else
        v379 = 1;
      if (!v379)
      {
LABEL_549:
        v380 = -1;
        goto LABEL_535;
      }
      v380 = v377 + 1;
    }
LABEL_535:
    *(_QWORD *)(v375 + 32 * v380 + 16) |= v373 << 20;
    if (v372)
    {
      v383 = *(_QWORD *)(v374 + 32) + 32 * sub_1C4C2FD5C(**(unsigned __int16 **)(v374 + 16));
      *(_QWORD *)(v383 + 16) |= 0x1000000 << (v372 - 1);
    }
    v384 = v370 + 4;
    v370 = v368;
    if (v384 != v368)
    {
      v370 = v384;
      while ((*(_QWORD *)v370 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v370 += 4;
        if (v370 == v368)
        {
          v370 = v368;
          goto LABEL_522;
        }
      }
    }
  }
  v388 = *(_QWORD *)(a1 + 1224);
  v389 = *(unsigned int *)(a1 + 1240);
  v390 = (uint64_t *)(v388 + 16 * v389);
  if (*(_DWORD *)(a1 + 1232))
  {
    v391 = v518;
    if ((_DWORD)v389)
    {
      v392 = 16 * v389;
      v393 = *(uint64_t **)(a1 + 1224);
      while ((*v393 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v393 += 2;
        v392 -= 16;
        if (!v392)
        {
          v393 = (uint64_t *)(v388 + 16 * v389);
          break;
        }
      }
    }
    else
    {
      v393 = *(uint64_t **)(a1 + 1224);
    }
  }
  else
  {
    v393 = (uint64_t *)(v388 + 16 * v389);
    v391 = v518;
  }
  v394 = (uint64_t *)(v388 + 16 * v389);
  while (v393 != v394)
  {
    v395 = *(_DWORD *)(*v535 + 4 * *((unsigned int *)v393 + 2));
    v396 = *(unsigned int *)(*v535 + 4 * *((unsigned int *)v393 + 3));
    v397 = *v393;
    if (v395)
    {
      v398 = v395 - 1;
      v399 = *(_QWORD *)(v397 + 32) + 32 * sub_1C4C2FD5C(**(unsigned __int16 **)(v397 + 16));
      *(_QWORD *)(v399 + 16) |= 0x1000000 << v398;
    }
    if ((_DWORD)v396)
    {
      v400 = *(_QWORD *)(v397 + 32) + 32 * sub_1C4C2FD5C(**(unsigned __int16 **)(v397 + 16));
      *(_QWORD *)(v400 + 16) |= v396 << 12;
    }
    v401 = v393 + 2;
    v393 = v390;
    if (v401 != v390)
    {
      v393 = v401;
      while ((*v393 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v393 += 2;
        if (v393 == v390)
        {
          v393 = v390;
          break;
        }
      }
    }
  }
  v402 = *(unsigned int *)(v391 + 8);
  if (!(_DWORD)v402)
    return;
  v403 = *(_QWORD **)v391;
  v527 = *(_QWORD *)v391 + 8 * v402;
  while (2)
  {
    v532 = v403;
    v404 = (_QWORD *)*v403;
    v567 = &v568[8];
    *(_QWORD *)v568 = 0x100000000;
    if (*(_BYTE *)(a1 + 1841))
    {
      v405 = (uint64_t *)v404[8];
      v406 = (uint64_t *)v404[9];
      while (v405 != v406)
      {
        v407 = sub_1C49EE844(a1, *v405);
        if (!*(_BYTE *)(v407 + 16))
          sub_1C49F5E24((uint64_t)&v567, *(int **)(v407 + 40), *(_DWORD *)(v407 + 48));
        ++v405;
      }
    }
    v408 = v404 + 6;
    v539 = (uint64_t)v404;
    v409 = v404[7];
    while (2)
    {
      if ((_QWORD *)v409 != v408)
      {
        v410 = *(unsigned __int16 **)(v409 + 16);
        if ((v410[10] & 4) != 0)
        {
          v411 = sub_1C4C915C4(*v410);
          if ((v411 & 0xFF00000000) == 0)
            goto LABEL_812;
          v412 = 0;
          if ((int)v411 <= 84)
          {
            if ((_DWORD)v411 != 4 && (_DWORD)v411 != 11)
            {
              if ((_DWORD)v411 != 18)
                goto LABEL_612;
LABEL_591:
              v412 = 1;
            }
LABEL_592:
            if (*(_DWORD *)v568)
            {
              v414 = (int *)v567;
              v415 = 4 * *(unsigned int *)v568;
              do
              {
                v416 = *v414++;
                v417 = *(_QWORD *)(v409 + 32) + 32 * sub_1C4C2FD5C(**(unsigned __int16 **)(v409 + 16));
                *(_QWORD *)(v417 + 16) |= 0x1000000 << (v416 - 1);
                v415 -= 4;
              }
              while (v415);
            }
            *(_DWORD *)v568 = 0;
            if ((v412 & 1) == 0)
              goto LABEL_612;
            v418 = *(unsigned __int16 **)(v409 + 16);
            v419 = *v418;
            v420 = sub_1C4C2FD5C(*v418);
            if (llvm::MachineInstr::getNumExplicitOperands(v409) <= v420)
            {
LABEL_623:
              v423 = -1;
            }
            else if ((word_1C6AA47DC[dword_1C6A9B6CC[v419] + (unsigned __int16)v420] & 0xFFFB) == 0x3A)
            {
              v423 = v420 + 2;
            }
            else
            {
              v421 = *(_QWORD *)(v409 + 32);
              if ((*(_DWORD *)(v421 + 32 * v420) & 0x10000FF) == 0x1000000)
              {
                v424 = *((unsigned __int8 *)v418 + 4);
                if ((v418[4] & 2) == 0 || (v428 = *(_DWORD *)(v409 + 40), v428 == v424))
                {
                  v425 = *((unsigned __int8 *)v418 + 4);
                }
                else
                {
                  v429 = v428 - 1;
                  v425 = *((unsigned __int8 *)v418 + 4);
                  do
                  {
                    v430 = *(_DWORD *)(v421 + 32 * v424);
                    if ((v430 & 0x10000FF) != 0x1000000)
                      break;
                    v425 += (v430 & 0x2000000) == 0;
                    if (v429 == v424)
                      break;
                    ++v424;
                  }
                  while ((v430 & 0x2000000) == 0);
                }
                v423 = v425 + v420;
              }
              else
              {
                if (*(_DWORD *)(v421 + 32 * v420))
                  v422 = *(_DWORD *)(v421 + 32 * v420) == 7;
                else
                  v422 = 1;
                if (!v422)
                  goto LABEL_623;
                v423 = v420 + 1;
              }
            }
            v426 = *(_DWORD *)(*(_QWORD *)(v409 + 32) + 32 * v423 + 16);
            if (*(_DWORD *)&v568[4])
            {
              v427 = 0;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v567, (uint64_t)&v568[8], 1uLL, 4);
              v427 = *(unsigned int *)v568;
            }
            *((_DWORD *)v567 + v427) = (v426 >> 20) & 0xF;
            ++*(_DWORD *)v568;
            goto LABEL_612;
          }
          if ((v411 - 97) < 2 || (_DWORD)v411 == 192)
            goto LABEL_592;
          if ((_DWORD)v411 == 85)
            goto LABEL_591;
        }
LABEL_612:
        if ((*(_BYTE *)v409 & 4) == 0)
        {
          while ((*(_WORD *)(v409 + 44) & 8) != 0)
            v409 = *(_QWORD *)(v409 + 8);
        }
        v409 = *(_QWORD *)(v409 + 8);
        continue;
      }
      break;
    }
    if (*(_BYTE *)(a1 + 1841) && !*(_BYTE *)(sub_1C49EE844(a1, v539) + 16))
    {
      v431 = sub_1C49EE844(a1, v539);
      sub_1C49F5E24(v431 + 40, (int *)v567, *(unsigned int *)v568);
    }
    if (v567 != &v568[8])
      free(v567);
    if (*(_BYTE *)(a1 + 1841))
    {
      v432 = *(uint64_t **)(v539 + 64);
      v433 = *(uint64_t **)(v539 + 72);
      if (v432 == v433)
      {
        v543 = 0uLL;
      }
      else
      {
        v543 = 0uLL;
        do
        {
          v434 = (int8x8_t *)sub_1C49EE844(a1, *v432);
          if (!v434[2].i8[0])
          {
            *((_QWORD *)&v435 + 1) = *((_QWORD *)&v543 + 1);
            *(int8x8_t *)&v435 = vorr_s8(v434[8], *(int8x8_t *)&v543);
            v543 = v435;
          }
          ++v432;
        }
        while (v432 != v433);
      }
      if (byte_1ED7ECFC0)
      {
        v436 = **(_QWORD **)(a1 + 1384) + 16 * *(int *)(v539 + 24);
        v437 = *(unsigned int *)(v436 + 8);
        if ((_DWORD)v437)
        {
          v438 = *(unsigned int **)v436;
          v439 = *(_QWORD *)(v539 + 32);
          v440 = 4 * v437;
          do
          {
            v441 = (int8x8_t *)sub_1C49EE844(a1, *(_QWORD *)(*(_QWORD *)(v439 + 104) + 8 * *v438));
            if (!v441[2].i8[0])
            {
              *((_QWORD *)&v442 + 1) = *((_QWORD *)&v543 + 1);
              *(int8x8_t *)&v442 = vorr_s8(v441[8], *(int8x8_t *)&v543);
              v543 = v442;
            }
            ++v438;
            v440 -= 4;
          }
          while (v440);
        }
      }
    }
    else
    {
      *(_QWORD *)&v543 = 0;
    }
    v443 = *(_QWORD *)(v539 + 56);
    v444 = v543;
    v445 = DWORD1(v543);
    while (2)
    {
      if ((_QWORD *)v443 != v408)
      {
        v446 = *(unsigned __int8 **)(v443 + 16);
        if ((v446[20] & 4) == 0)
        {
LABEL_647:
          if ((*(_BYTE *)v443 & 4) == 0)
          {
            while ((*(_WORD *)(v443 + 44) & 8) != 0)
              v443 = *(_QWORD *)(v443 + 8);
          }
          v443 = *(_QWORD *)(v443 + 8);
          continue;
        }
        v447 = *(unsigned __int16 *)v446;
        v448 = sub_1C4C915C4(*(unsigned __int16 *)v446);
        if ((v448 & 0xFF00000000) == 0)
          goto LABEL_812;
        v449 = v448;
        if ((int)v448 > 122)
        {
          if ((int)v448 <= 163)
          {
            if ((_DWORD)v448 != 123 && (_DWORD)v448 != 151)
              goto LABEL_647;
            goto LABEL_692;
          }
          if ((v448 - 164) < 4)
            goto LABEL_659;
          if ((_DWORD)v448 != 194)
            goto LABEL_647;
LABEL_692:
          v456 = 0;
          if (v445 && ((_DWORD)v448 == 3 || (_DWORD)v448 == 123 || (_DWORD)v448 == 105))
            goto LABEL_696;
        }
        else
        {
          if ((int)v448 > 77)
          {
            if ((v448 - 78) >= 3)
            {
              if ((_DWORD)v448 != 105)
                goto LABEL_647;
              goto LABEL_692;
            }
LABEL_659:
            v450 = sub_1C4C2FD5C(v447);
            NumExplicitOperands = llvm::MachineInstr::getNumExplicitOperands(v443);
            if (NumExplicitOperands <= v450)
            {
LABEL_726:
              v454 = -1;
            }
            else if ((word_1C6AA47DC[dword_1C6A9B6CC[v447] + (unsigned __int16)v450] & 0xFFFB) == 0x3A)
            {
              v454 = v450 + 2;
            }
            else
            {
              v452 = *(_QWORD *)(v443 + 32);
              if ((*(_DWORD *)(v452 + 32 * v450) & 0x10000FF) == 0x1000000)
              {
                v457 = v446[4];
                if ((v446[8] & 2) == 0 || (v474 = *(_DWORD *)(v443 + 40), v474 == v457))
                {
                  v458 = v446[4];
                }
                else
                {
                  v475 = v474 - 1;
                  v458 = v446[4];
                  do
                  {
                    v476 = *(_DWORD *)(v452 + 32 * v457);
                    if ((v476 & 0x10000FF) != 0x1000000)
                      break;
                    v458 += (v476 & 0x2000000) == 0;
                    if (v475 == v457)
                      break;
                    ++v457;
                  }
                  while ((v476 & 0x2000000) == 0);
                }
                v454 = v458 + v450;
              }
              else
              {
                if (*(_DWORD *)(v452 + 32 * v450))
                  v453 = *(_DWORD *)(v452 + 32 * v450) == 7;
                else
                  v453 = 1;
                if (!v453)
                  goto LABEL_726;
                v454 = v450 + 1;
              }
            }
            v459 = *(_QWORD *)(v443 + 32);
            v460 = *(_DWORD *)(v459 + 32 * v454 + 16);
            v63 = ((v460 >> 20) & 0xF) == 0;
            v461 = 1 << (((v460 >> 20) & 0xF) - 1);
            if (v63)
              v461 = 0;
            v444 |= v461;
            if (v449 != 78 || !a2)
              goto LABEL_647;
            if (NumExplicitOperands <= v450)
            {
LABEL_725:
              v462 = -1;
            }
            else if ((word_1C6AA47DC[dword_1C6A9B6CC[v447] + (unsigned __int16)v450] & 0xFFFB) == 0x3A)
            {
              v462 = v450 + 2;
            }
            else if ((*(_DWORD *)(v459 + 32 * v450) & 0x10000FF) == 0x1000000)
            {
              v467 = v446[4];
              if ((v446[8] & 2) == 0 || (v477 = *(_DWORD *)(v443 + 40), v477 == v467))
              {
                v468 = v446[4];
              }
              else
              {
                v478 = v477 - 1;
                v468 = v446[4];
                do
                {
                  v479 = *(_DWORD *)(v459 + 32 * v467);
                  if ((v479 & 0x10000FF) != 0x1000000)
                    break;
                  v468 += (v479 & 0x2000000) == 0;
                  if (v478 == v467)
                    break;
                  ++v467;
                }
                while ((v479 & 0x2000000) == 0);
              }
              v462 = v468 + v450;
            }
            else
            {
              if (*(_DWORD *)(v459 + 32 * v450)
                && *(_DWORD *)(v459 + 32 * v450) != 7)
              {
                goto LABEL_725;
              }
              v462 = v450 + 1;
            }
            v469 = *(_DWORD *)(v459 + 32 * v462 + 16);
            v63 = ((v469 >> 20) & 0xF) == 0;
            v470 = 1 << (((v469 >> 20) & 0xF) - 1);
            if (v63)
              v470 = 0;
            v445 |= v470;
            goto LABEL_647;
          }
          if ((_DWORD)v448 == 3)
            goto LABEL_692;
          if ((_DWORD)v448 != 4 && (_DWORD)v448 != 11)
            goto LABEL_647;
          v456 = 1;
          if (v445)
          {
LABEL_696:
            v463 = *(_QWORD *)(v443 + 32) + 32 * sub_1C4C2FD5C(v447);
            *(_QWORD *)(v463 + 16) |= (unint64_t)v445 << 24;
            v444 &= ~v445;
            v445 = 0;
          }
        }
        if (v449 == 105 || v449 == 123 || !v444)
          goto LABEL_647;
        v464 = *(unsigned __int16 **)(v443 + 16);
        v465 = *v464;
        if (v456)
        {
          v466 = *(_QWORD *)(v443 + 32);
        }
        else
        {
          v471 = sub_1C4C2FD5C(*v464);
          v466 = *(_QWORD *)(v443 + 32);
          if ((*(_BYTE *)(v466 + 32 * v471 + 17) & 4) == 0)
            goto LABEL_647;
        }
        v472 = v444;
        v473 = sub_1C4C2FD5C(v465);
        v445 = 0;
        v444 = 0;
        *(_QWORD *)(v466 + 32 * v473 + 16) |= v472 << 24;
        goto LABEL_647;
      }
      break;
    }
    v480 = a1 + 1368;
    if (*(_BYTE *)(a1 + 1841))
    {
      v481 = sub_1C49EE844(a1, v539);
      if (!*(_BYTE *)(v481 + 16))
      {
        *(_DWORD *)(v481 + 64) = v444;
        *(_DWORD *)(v481 + 68) = v445;
      }
      v480 = a1 + 1368;
      if (*(_BYTE *)(a1 + 1841))
        v480 = sub_1C49EE844(a1, v539);
    }
    v482 = *(unsigned int *)(v480 + 8);
    if (!(_DWORD)v482)
      goto LABEL_786;
    v483 = 0;
    v484 = *(unsigned int **)v480;
    v485 = 4 * v482;
    do
    {
      v486 = *v484++;
      v483 |= 1 << (*(_DWORD *)(*v535 + 4 * v486) - 1);
      v485 -= 4;
    }
    while (v485);
    v487 = *(_QWORD *)(v539 + 32);
    v571 = 0;
    v569 = 0u;
    v570 = 0u;
    *(_OWORD *)&v568[8] = 0u;
    v567 = &off_1E816EC08;
    *(_QWORD *)v568 = v487;
    *(_QWORD *)&v568[16] = *(_QWORD *)(v487 + 40);
    *(_QWORD *)&v568[8] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v487 + 16) + 104))(*(_QWORD *)(v487 + 16));
    __p = 0;
    if ((_QWORD)v569)
    {
      llvm::MetadataTracking::untrack((uint64_t)&v569, (unsigned __int8 *)v569);
      *(_QWORD *)&v569 = __p;
      if (__p)
        llvm::MetadataTracking::retrack((uint64_t)&__p, (unsigned __int8 *)__p, (uint64_t)&v569);
    }
    else
    {
      *(_QWORD *)&v569 = 0;
    }
    v570 = 0uLL;
    if (v408 == *(_QWORD **)(v539 + 56))
      goto LABEL_777;
    v488 = (unint64_t)v408;
    while (2)
    {
      v489 = *(_QWORD *)v488 & 0xFFFFFFFFFFFFFFF8;
      if (!v489)
      {
        v490 = 0;
LABEL_744:
        while (1)
        {
          v491 = *(_WORD *)(v490 + 44);
          if ((v491 & 4) == 0)
            break;
          v490 = *(_QWORD *)v490 & 0xFFFFFFFFFFFFFFF8;
        }
        goto LABEL_745;
      }
      v490 = *(_QWORD *)v488 & 0xFFFFFFFFFFFFFFF8;
      if ((*(_BYTE *)v489 & 4) == 0)
        goto LABEL_744;
      v491 = *(_WORD *)(v489 + 44);
      v490 = *(_QWORD *)v488 & 0xFFFFFFFFFFFFFFF8;
LABEL_745:
      v492 = v491 & 0xC;
      v493 = v491 & 4;
      v494 = *(_QWORD *)(v490 + 16);
      v495 = *(_QWORD *)(v494 + 8);
      if (v492)
        v496 = v493 == 0;
      else
        v496 = 0;
      if (v496)
      {
        v497 = v490;
        if ((v495 & 0x20) == 0)
        {
          while ((*(_WORD *)(v497 + 44) & 8) != 0)
          {
            v497 = *(_QWORD *)(v497 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v497 + 16) + 8) & 0x20) != 0)
              goto LABEL_755;
          }
          if ((v495 & 0x400) == 0)
          {
            v498 = v490;
            while ((*(_WORD *)(v498 + 44) & 8) != 0)
            {
              v498 = *(_QWORD *)(v498 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v498 + 16) + 9) & 4) != 0)
                goto LABEL_755;
            }
            goto LABEL_750;
          }
        }
      }
      else if ((v495 & 0x420) == 0)
      {
LABEL_750:
        if ((*(_BYTE *)(v494 + 16) & 0x40) == 0)
        {
          if ((_QWORD *)v488 != v408)
            break;
          if (sub_1C4AD4D04(v490) != 4 || (unint64_t)sub_1C4AD4D04(v490) >> 32 != 2)
            goto LABEL_777;
          v489 = *v408 & 0xFFFFFFFFFFFFFFF8;
        }
      }
LABEL_755:
      if (v489)
      {
        v488 = v489;
        if ((*(_BYTE *)v489 & 4) != 0)
          goto LABEL_761;
      }
      else
      {
        v488 = 0;
      }
      while ((*(_WORD *)(v488 + 44) & 4) != 0)
        v488 = *(_QWORD *)v488 & 0xFFFFFFFFFFFFFFF8;
LABEL_761:
      if (v488 != *(_QWORD *)(v539 + 56))
        continue;
      break;
    }
    if ((_QWORD *)v488 != v408)
    {
      if (sub_1C4AD4D04(v488) == 4)
      {
        v408 = (_QWORD *)v488;
        if ((unint64_t)sub_1C4AD4D04(v488) >> 32 == 2)
          goto LABEL_783;
      }
      else
      {
        v408 = (_QWORD *)v488;
      }
    }
LABEL_777:
    *((_QWORD *)&v569 + 1) = v539;
    *(_QWORD *)&v570 = v408;
    v500 = sub_1C55437B8(&v567, 0x184Eu);
    v488 = v499;
    v501 = (unint64_t *)v570;
    v502 = *(_QWORD *)(*((_QWORD *)&v569 + 1) + 40);
    *(_QWORD *)(v499 + 24) = v502;
    v503 = *(_QWORD *)(v502 + 32);
    v504 = *(unsigned int *)(v499 + 40);
    if ((_DWORD)v504)
    {
      v508 = *(_QWORD *)(v499 + 32);
      v509 = *(_QWORD *)(v503 + 40);
      v510 = 32 * v504;
      do
      {
        if (!*(_BYTE *)v508)
        {
          v511 = *(unsigned int *)(v508 + 4);
          if ((int)v511 >= 0)
            v512 = (uint64_t *)(*(_QWORD *)(v509 + 272) + 8 * v511);
          else
            v512 = (uint64_t *)(*(_QWORD *)(v509 + 24) + 16 * (v511 & 0x7FFFFFFF) + 8);
          v513 = *v512;
          if (*v512)
          {
            v514 = *(_QWORD *)(v513 + 16);
            *(_QWORD *)(v513 + 16) = v508;
            *(_QWORD *)(v508 + 16) = v514;
            if ((*(_BYTE *)(v508 + 3) & 1) != 0)
            {
              *(_QWORD *)(v508 + 24) = v513;
            }
            else
            {
              *(_QWORD *)(v508 + 24) = 0;
              v512 = (uint64_t *)(v514 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v508 + 16) = v508;
            *(_QWORD *)(v508 + 24) = 0;
          }
          *v512 = v508;
        }
        v508 += 32;
        v510 -= 32;
      }
      while (v510);
    }
    v505 = *(_QWORD *)(v503 + 728);
    if (v505)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v505 + 24))(v505, v499);
    v506 = *v501 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v488 = v506 | *(_QWORD *)v488 & 7;
    *(_QWORD *)(v488 + 8) = v501;
    *(_QWORD *)(v506 + 8) = v488;
    *v501 = *v501 & 7 | v488;
    if (*((_QWORD *)&v570 + 1))
      (*(void (**)(_QWORD, unint64_t))(**((_QWORD **)&v570 + 1) + 24))(*((_QWORD *)&v570 + 1), v488);
    LODWORD(__p) = 1;
    v555 = 0;
    v556 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v488, v500, (const llvm::MachineOperand *)&__p);
LABEL_783:
    v567 = &off_1E816EC08;
    if ((_QWORD)v569)
      llvm::MetadataTracking::untrack((uint64_t)&v569, (unsigned __int8 *)v569);
    v507 = *(_QWORD *)(v488 + 32) + 32 * sub_1C4C2FD5C(**(unsigned __int16 **)(v488 + 16));
    *(_QWORD *)(v507 + 16) |= v483 << 24;
LABEL_786:
    v403 = v532 + 1;
    if (v532 + 1 != (_QWORD *)v527)
      continue;
    break;
  }
}

void sub_1C49EDD28(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  unsigned int v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _DWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;

  *(_DWORD *)(a1 + 1288) = 0;
  v2 = a1 + 1248;
  v3 = *(_DWORD *)(a1 + 1256);
  if (v3)
  {
    v4 = *(unsigned int *)(a1 + 1264);
    if (v4 > 4 * v3 && v4 >= 0x41)
    {
      v5 = *(_QWORD **)v2;
      v6 = 1 << (33 - __clz(v3 - 1));
      if (v6 <= 64)
        v7 = 64;
      else
        v7 = v6;
      if (v7 == (_DWORD)v4)
      {
        *(_QWORD *)(a1 + 1256) = 0;
        v8 = 16 * v4;
        do
        {
          *v5 = -4096;
          v5 += 2;
          v8 -= 16;
        }
        while (v8);
      }
      else
      {
        MEMORY[0x1CAA32FB4](v5, 8);
        v26 = (4 * v7 / 3u + 1) | ((unint64_t)(4 * v7 / 3u + 1) >> 1);
        v27 = v26 | (v26 >> 2) | ((v26 | (v26 >> 2)) >> 4);
        LODWORD(v27) = (((v27 | (v27 >> 8)) >> 16) | v27 | (v27 >> 8)) + 1;
        *(_DWORD *)(a1 + 1264) = v27;
        v28 = operator new(16 * v27, (std::align_val_t)8uLL);
        *(_QWORD *)(a1 + 1248) = v28;
        *(_QWORD *)(a1 + 1256) = 0;
        v29 = *(unsigned int *)(a1 + 1264);
        if ((_DWORD)v29)
        {
          v30 = 16 * v29;
          do
          {
            *v28 = -4096;
            v28 += 2;
            v30 -= 16;
          }
          while (v30);
        }
      }
      goto LABEL_18;
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 1260))
      goto LABEL_18;
    LODWORD(v4) = *(_DWORD *)(a1 + 1264);
    if (v4 > 0x40)
    {
      MEMORY[0x1CAA32FB4](*(_QWORD *)v2, 8);
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      goto LABEL_18;
    }
  }
  if ((_DWORD)v4)
  {
    v9 = *(_QWORD **)v2;
    v10 = 16 * v4;
    do
    {
      *v9 = -4096;
      v9 += 2;
      v10 -= 16;
    }
    while (v10);
  }
  *(_QWORD *)(a1 + 1256) = 0;
LABEL_18:
  v11 = (_QWORD *)(a1 + 1224);
  v12 = *(_DWORD *)(a1 + 1232);
  if (v12)
  {
    v13 = *(unsigned int *)(a1 + 1240);
    if (v13 > 4 * v12 && v13 >= 0x41)
    {
      v14 = (_QWORD *)*v11;
      v15 = 1 << (33 - __clz(v12 - 1));
      if (v15 <= 64)
        v16 = 64;
      else
        v16 = v15;
      if (v16 == (_DWORD)v13)
      {
        *(_QWORD *)(a1 + 1232) = 0;
        v17 = 16 * v13;
        do
        {
          *v14 = -4096;
          v14 += 2;
          v17 -= 16;
        }
        while (v17);
      }
      else
      {
        MEMORY[0x1CAA32FB4](v14, 8);
        v31 = (4 * v16 / 3u + 1) | ((unint64_t)(4 * v16 / 3u + 1) >> 1);
        v32 = v31 | (v31 >> 2) | ((v31 | (v31 >> 2)) >> 4);
        LODWORD(v32) = (((v32 | (v32 >> 8)) >> 16) | v32 | (v32 >> 8)) + 1;
        *(_DWORD *)(a1 + 1240) = v32;
        v33 = operator new(16 * v32, (std::align_val_t)8uLL);
        *(_QWORD *)(a1 + 1224) = v33;
        *(_QWORD *)(a1 + 1232) = 0;
        v34 = *(unsigned int *)(a1 + 1240);
        if ((_DWORD)v34)
        {
          v35 = 16 * v34;
          do
          {
            *v33 = -4096;
            v33 += 2;
            v35 -= 16;
          }
          while (v35);
        }
      }
      goto LABEL_35;
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 1236))
      goto LABEL_35;
    LODWORD(v13) = *(_DWORD *)(a1 + 1240);
    if (v13 > 0x40)
    {
      MEMORY[0x1CAA32FB4](*v11, 8);
      *v11 = 0;
      *(_QWORD *)(a1 + 1232) = 0;
      *(_DWORD *)(a1 + 1240) = 0;
      goto LABEL_35;
    }
  }
  if ((_DWORD)v13)
  {
    v18 = (_QWORD *)*v11;
    v19 = 16 * v13;
    do
    {
      *v18 = -4096;
      v18 += 2;
      v19 -= 16;
    }
    while (v19);
  }
  *(_QWORD *)(a1 + 1232) = 0;
LABEL_35:
  *(_DWORD *)(a1 + 1280) = 0;
  *(_DWORD *)(a1 + 1376) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  v20 = (_QWORD *)(a1 + 1704);
  v21 = *(_DWORD *)(a1 + 1712);
  if (v21)
  {
    v22 = *(_DWORD *)(a1 + 1720);
    if (v22 > 4 * v21 && v22 >= 0x41)
    {
      v36 = 1 << (33 - __clz(v21 - 1));
      if (v36 <= 64)
        v23 = 64;
      else
        v23 = v36;
LABEL_57:
      if (v23 == v22)
      {
        *(_QWORD *)(a1 + 1712) = 0;
        v37 = *(_DWORD **)(a1 + 1704);
        v38 = 8 * v22;
        do
        {
          *v37 = -1;
          v37 += 2;
          v38 -= 8;
        }
        while (v38);
      }
      else
      {
        MEMORY[0x1CAA32FB4](*v20, 4);
        if (v23)
        {
          v39 = (4 * v23 / 3u + 1) | ((unint64_t)(4 * v23 / 3u + 1) >> 1);
          v40 = v39 | (v39 >> 2) | ((v39 | (v39 >> 2)) >> 4);
          LODWORD(v40) = (((v40 | (v40 >> 8)) >> 16) | v40 | (v40 >> 8)) + 1;
          *(_DWORD *)(a1 + 1720) = v40;
          v41 = operator new(8 * v40, (std::align_val_t)4uLL);
          *(_QWORD *)(a1 + 1704) = v41;
          *(_QWORD *)(a1 + 1712) = 0;
          v42 = *(unsigned int *)(a1 + 1720);
          if ((_DWORD)v42)
          {
            v43 = 8 * v42;
            do
            {
              *v41 = -1;
              v41 += 2;
              v43 -= 8;
            }
            while (v43);
          }
        }
        else
        {
          *v20 = 0;
          *(_QWORD *)(a1 + 1712) = 0;
          *(_DWORD *)(a1 + 1720) = 0;
        }
      }
      goto LABEL_45;
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 1716))
      goto LABEL_45;
    v22 = *(_DWORD *)(a1 + 1720);
    if (v22 > 0x40)
    {
      v23 = 0;
      goto LABEL_57;
    }
  }
  if (v22)
  {
    v24 = (_DWORD *)*v20;
    v25 = 8 * v22;
    do
    {
      *v24 = -1;
      v24 += 2;
      v25 -= 8;
    }
    while (v25);
  }
  *(_QWORD *)(a1 + 1712) = 0;
LABEL_45:
  *(_DWORD *)(a1 + 1792) = 0;
  sub_1C47655E8(a1 + 1816, *(_QWORD **)(a1 + 1824));
  *(_QWORD *)(a1 + 1816) = a1 + 1824;
  *(_QWORD *)(a1 + 1832) = 0;
  *(_QWORD *)(a1 + 1824) = 0;
  *(_DWORD *)(a1 + 1736) = 0;
  sub_1C47655E8(a1 + 1760, *(_QWORD **)(a1 + 1768));
  *(_QWORD *)(a1 + 1760) = a1 + 1768;
  *(_QWORD *)(a1 + 1776) = 0;
  *(_QWORD *)(a1 + 1768) = 0;
  *(_BYTE *)(a1 + 1840) = *(_BYTE *)(*(_QWORD *)(a1 + 1408) + 356);
}

_QWORD *sub_1C49EE160@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = (_QWORD *)sub_1C49EE218(a1, a2, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v12 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v13 = 16;
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(unsigned int *)(a1 + 16);
    }
    v11 = 0;
    v10 = v12 + 8 * v13;
  }
  else
  {
    result = sub_1C49EE2C0((_DWORD *)a1, (uint64_t)a2, a2, v14);
    v7 = result;
    *result = *a2;
    v8 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v9 = 16;
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(unsigned int *)(a1 + 16);
    }
    v10 = v8 + 8 * v9;
    v11 = 1;
  }
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v10;
  *(_BYTE *)(a3 + 16) = v11;
  return result;
}

uint64_t sub_1C49EE218(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_13:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v12 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_13;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C49EE2C0(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 16;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1C49EE37C((uint64_t)a1, v7);
  v9 = 0;
  sub_1C49EE218((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_1C49EE37C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[17];

  v14[16] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C49EE4E4(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 136; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C49EE4E4(a1, v14, v8);
}

uint64_t sub_1C49EE4E4(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 136);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_11;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_11:
  while (a2 != a3)
  {
    if (*a2 != -8192 && *a2 != -4096)
    {
      v10 = 0;
      result = sub_1C49EE218((uint64_t)v5, a2, &v10);
      *v10 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C49EE5AC(unsigned __int16 *a1)
{
  unint64_t v1;
  uint64_t result;
  uint64_t v3;
  unsigned int v4;

  v1 = *((_QWORD *)a1 + 2);
  if ((v1 & 0x400000000) == 0)
    return 0;
  v3 = sub_1C4C915C4(*a1);
  if ((v3 & 0xFF00000000) == 0)
    llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
  v4 = v3;
  result = 1;
  if (v4 > 0x29 || ((1 << v4) & 0x30030000000) == 0)
  {
    if (v4 - 164 >= 4)
      return (v1 >> 7) & 1;
    else
      return 1;
  }
  return result;
}

uint64_t sub_1C49EE62C(uint64_t result, unsigned __int16 *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  unsigned __int16 v6;
  unsigned __int16 v7;
  unsigned __int16 v8;

  v2 = (_QWORD *)result;
  if ((a2[8] & 2) != 0)
  {
    v5 = *a2;
    v6 = sub_1C4C2FD5C(v5);
    v7 = sub_1C4C2FD5C(v5);
    v8 = sub_1C4C2FD5C(v5);
    result = sub_1C4C2FD5C(v5);
    v2[3] = ((unint64_t)v8 << 32) | (result << 48) | ((unint64_t)v7 << 16) | v6;
    v4 = v2 + 3;
    v3 = 4;
  }
  else
  {
    v3 = 0;
    v4 = (_QWORD *)(result + 24);
  }
  *v2 = v4;
  v2[1] = v3;
  v2[2] = 4;
  return result;
}

_DWORD *sub_1C49EE6D8(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  int v14;
  int *v15;
  int v16;
  unsigned int v17;
  _DWORD *v18;
  int v19;
  _DWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)4uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      v12 = result;
      do
      {
        *v12 = -1;
        v12 += 2;
        v11 -= 8;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v13 = 0;
      v14 = v10 - 1;
      v15 = v4;
      do
      {
        v16 = *v15;
        if (*v15 <= 0xFFFFFFFD)
        {
          v17 = (37 * v16) & v14;
          v18 = &result[2 * v17];
          v19 = *v18;
          if (v16 != *v18)
          {
            v20 = 0;
            v21 = 1;
            while (v19 != -1)
            {
              if (v20)
                v22 = 0;
              else
                v22 = v19 == -2;
              if (v22)
                v20 = v18;
              v23 = v17 + v21++;
              v17 = v23 & v14;
              v18 = &result[2 * (v23 & v14)];
              v19 = *v18;
              if (v16 == *v18)
                goto LABEL_23;
            }
            if (v20)
              v18 = v20;
          }
LABEL_23:
          v24 = v15[1];
          *v18 = v16;
          v18[1] = v24;
          *(_DWORD *)(a1 + 8) = ++v13;
        }
        v15 += 2;
      }
      while (v15 != &v4[2 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v25 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v25)
  {
    v26 = 8 * v25;
    do
    {
      *result = -1;
      result += 2;
      v26 -= 8;
    }
    while (v26);
  }
  return result;
}

unint64_t sub_1C49EE844(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  if (!*(_BYTE *)(a1 + 1841))
    return 0;
  result = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * *(int *)(a2 + 24));
  if (!result)
  {
    result = sub_1C484358C(a1 + 1112, 96, 3);
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = result + 16;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 40) = result + 56;
    *(_QWORD *)(result + 48) = 0x100000000;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_BYTE *)(result + 88) = 0;
    *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * *(int *)(a2 + 24)) = result;
  }
  return result;
}

uint64_t sub_1C49EE8D4(uint64_t a1)
{
  uint64_t result;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (uint64_t *)(a1 + 24);
  result = *(_QWORD *)(a1 + 24);
  if (!result)
  {
    v3 = operator new();
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 128) = 0u;
    *(_OWORD *)(v3 + 144) = 0u;
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 112) = 0u;
    *(_OWORD *)(v3 + 160) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)(v3 + 176) = 0u;
    *(_QWORD *)(v3 + 16) = v3 + 32;
    *(_QWORD *)(v3 + 32) = v3 + 48;
    *(_QWORD *)(v3 + 48) = v3 + 64;
    *(_QWORD *)(v3 + 64) = v3 + 96;
    *(_QWORD *)(v3 + 72) = v3 + 96;
    *(_DWORD *)(v3 + 80) = 4;
    *(_QWORD *)(v3 + 128) = v3 + 160;
    *(_QWORD *)(v3 + 136) = v3 + 160;
    *(_DWORD *)(v3 + 144) = 4;
    v4 = 0;
    sub_1C49EE99C(v2, v3);
    sub_1C49EE99C(&v4, 0);
    return *v2;
  }
  return result;
}

uint64_t *sub_1C49EE99C(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(void **)(v2 + 136);
    if (v3 != *(void **)(v2 + 128))
      free(v3);
    v4 = *(void **)(v2 + 72);
    if (v4 != *(void **)(v2 + 64))
      free(v4);
    sub_1C49EEAA4(*(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 48) + 104 * *(unsigned int *)(v2 + 56));
    if (*(_QWORD *)(v2 + 48) != v2 + 64)
      free(*(void **)(v2 + 48));
    sub_1C49EEAFC(*(char **)(v2 + 32), (char *)(*(_QWORD *)(v2 + 32) + 96 * *(unsigned int *)(v2 + 40)));
    if (*(_QWORD *)(v2 + 32) != v2 + 48)
      free(*(void **)(v2 + 32));
    v5 = *(char **)(v2 + 16);
    v6 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v6)
    {
      v7 = 32 * v6;
      do
      {
        v8 = *(char **)&v5[v7 - 24];
        if (&v5[v7 - 8] != v8)
          free(v8);
        v7 -= 32;
      }
      while (v7);
      v5 = *(char **)(v2 + 16);
    }
    if (v5 != (char *)(v2 + 32))
      free(v5);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

void sub_1C49EEAA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v4;
  void *v5;

  if (a2 != a1)
  {
    v2 = a2;
    do
    {
      v4 = *(void **)(v2 - 64);
      if (v4 != *(void **)(v2 - 72))
        free(v4);
      v5 = *(void **)(v2 - 96);
      if ((void *)(v2 - 80) != v5)
        free(v5);
      v2 -= 104;
    }
    while (v2 != a1);
  }
}

void sub_1C49EEAFC(char *a1, char *a2)
{
  char *v2;
  void *v4;
  char *v5;
  char *v6;

  if (a2 != a1)
  {
    v2 = a2;
    do
    {
      v4 = (void *)*((_QWORD *)v2 - 8);
      v5 = v2 - 72;
      if (v4 != *((void **)v2 - 9))
        free(v4);
      v6 = (char *)*((_QWORD *)v2 - 11);
      if (v5 != v6)
        free(v6);
      v2 -= 96;
    }
    while (v5 - 24 != a1);
  }
}

uint64_t sub_1C49EEB5C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = sub_1C49EEDFC((_DWORD *)a1, a2);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD **)(a1 + 136);
    v6 = *(unsigned int *)(a1 + 144);
    v7 = &v5[v6];
    if ((_DWORD)v6)
    {
      v8 = 8 * v6;
      while (*v5 != *a2)
      {
        ++v5;
        v8 -= 8;
        if (!v8)
        {
          v5 = v7;
          break;
        }
      }
    }
    if (v7 != v5 + 1)
    {
      memmove(v5, v5 + 1, (char *)v7 - (char *)(v5 + 1));
      LODWORD(v6) = *(_DWORD *)(a1 + 144);
    }
    *(_DWORD *)(a1 + 144) = v6 - 1;
  }
  return v4;
}

uint64_t sub_1C49EEBE4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 8 * v4);
      goto LABEL_8;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4, 8);
    }
    else if ((_DWORD)v5)
    {
      v9 = *(unsigned int *)(a1 + 8);
      memmove(*(void **)a1, *(const void **)a2, 8 * v5);
      v6 = v9;
LABEL_6:
      v7 = *(unsigned int *)(a2 + 8);
      if (v6 != v7)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v6), (const void *)(*(_QWORD *)a2 + 8 * v6), *(_QWORD *)a2 + 8 * v7 - (*(_QWORD *)a2 + 8 * v6));
LABEL_8:
      *(_DWORD *)(a1 + 8) = v4;
      return a1;
    }
    v6 = 0;
    goto LABEL_6;
  }
  return a1;
}

uint64_t sub_1C49EECC0(uint64_t a1, const void **a2)
{
  const void *v3;
  const void **v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;

  if ((const void **)a1 != a2)
  {
    v4 = a2 + 2;
    v3 = *a2;
    if (*a2 != a2 + 2)
    {
      v11 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        v12 = a2;
        free(v11);
        a2 = v12;
        v3 = *v12;
      }
      *(_QWORD *)a1 = v3;
      v6 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = v4;
      *((_DWORD *)a2 + 3) = 0;
      goto LABEL_10;
    }
    v6 = a2 + 1;
    v5 = *((unsigned int *)a2 + 2);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v5)
    {
      if ((_DWORD)v5)
        memmove(*(void **)a1, *a2, 8 * v5);
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v14 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 8);
      a2 = v14;
    }
    else if ((_DWORD)v7)
    {
      v13 = *(unsigned int *)(a1 + 8);
      v15 = a2;
      memmove(*(void **)a1, v3, 8 * v7);
      v8 = v13;
      a2 = v15;
LABEL_7:
      v9 = *v6;
      if (v8 != v9)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v8), (char *)*a2 + 8 * v8, (_BYTE *)*a2 + 8 * v9 - ((_BYTE *)*a2 + 8 * v8));
LABEL_9:
      *(_DWORD *)(a1 + 8) = v5;
LABEL_10:
      *v6 = 0;
      return a1;
    }
    v8 = 0;
    goto LABEL_7;
  }
  return a1;
}

uint64_t sub_1C49EEDFC(_DWORD *a1, _QWORD *a2)
{
  uint64_t result;
  int v4;
  _QWORD *v5;

  v5 = 0;
  result = sub_1C49EE218((uint64_t)a1, a2, &v5);
  if ((_DWORD)result)
  {
    *v5 = -8192;
    v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

uint64_t sub_1C49EEE4C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  BOOL v11;
  int v12;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = (_QWORD *)(a1 + 32 * v4);
    v6 = *v5;
    if (*v5 == a3)
    {
      v9 = 1;
    }
    else
    {
      v7 = 0;
      v8 = 1;
      while (v6 != -4096)
      {
        if (v7)
          v11 = 0;
        else
          v11 = v6 == -8192;
        if (v11)
          v7 = v5;
        v12 = v4 + v8++;
        v4 = v12 & (a2 - 1);
        v5 = (_QWORD *)(a1 + 32 * v4);
        v6 = *v5;
        v9 = 1;
        if (*v5 == a3)
          goto LABEL_7;
      }
      v9 = 0;
      if (v7)
        v5 = v7;
    }
  }
  else
  {
    v5 = 0;
    v9 = 0;
  }
LABEL_7:
  *a4 = v5;
  return v9;
}

_QWORD *sub_1C49EEEE0(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C49EEF94(a1, v6);
  v8 = 0;
  sub_1C49EEE4C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C49EEF94(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C614EE34(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C49EF04C(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v3 = HIDWORD(a2);
  v4 = *(unsigned int *)(a1 + 8);
  v5 = HIDWORD(a2) + 1;
  v6 = (HIDWORD(a2) + 1);
  if (HIDWORD(a2) >= v4 && v6 != v4)
  {
    if (v6 >= v4)
    {
      if (v6 > *(unsigned int *)(a1 + 12))
      {
        sub_1C49EF13C(a1, (HIDWORD(a2) + 1));
        v4 = *(unsigned int *)(a1 + 8);
      }
      if (v6 != v4)
      {
        v8 = *(_QWORD *)a1 + 104 * v6;
        v9 = *(_QWORD *)a1 + 104 * v4;
        do
        {
          *(_OWORD *)v9 = 0uLL;
          *(_OWORD *)(v9 + 16) = 0uLL;
          *(_OWORD *)(v9 + 32) = 0uLL;
          *(_OWORD *)(v9 + 48) = 0uLL;
          *(_QWORD *)(v9 + 96) = 0;
          *(_OWORD *)(v9 + 80) = 0uLL;
          *(_OWORD *)(v9 + 64) = 0uLL;
          *(_BYTE *)v9 = 1;
          *(_QWORD *)(v9 + 8) = v9 + 24;
          *(_DWORD *)(v9 + 20) = 1;
          *(_QWORD *)(v9 + 32) = v9 + 64;
          *(_QWORD *)(v9 + 40) = v9 + 64;
          *(_DWORD *)(v9 + 48) = 4;
          v9 += 104;
        }
        while (v9 != v8);
      }
    }
    else
    {
      sub_1C49EEAA4(*(_QWORD *)a1 + 104 * v6, *(_QWORD *)a1 + 104 * v4);
    }
    *(_DWORD *)(a1 + 8) = v5;
  }
  return *(_QWORD *)a1 + 104 * v3;
}

void sub_1C49EF13C(uint64_t a1, unint64_t a2)
{
  char *v3;
  _BYTE *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  unsigned int v12;
  BOOL v13;
  char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;

  v25 = 0;
  v3 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 104, &v25);
  v4 = *(_BYTE **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    v6 = 0;
    v7 = 104 * v5;
    while (1)
    {
      v8 = &v3[v6];
      v9 = &v4[v6];
      *(_WORD *)v8 = *(_WORD *)&v4[v6];
      v10 = &v3[v6 + 24];
      *(_QWORD *)&v3[v6 + 8] = v10;
      v11 = &v3[v6 + 8];
      *((_QWORD *)v8 + 2) = 0x100000000;
      v12 = *(_DWORD *)&v4[v6 + 16];
      if (v12)
        v13 = v9 == v8;
      else
        v13 = 1;
      if (v13)
        goto LABEL_13;
      v14 = (char *)*((_QWORD *)v9 + 1);
      if (v9 + 24 != v14)
      {
        *(_QWORD *)v11 = v14;
        v22 = *(_DWORD *)&v4[v6 + 20];
        *((_DWORD *)v8 + 4) = v12;
        *((_DWORD *)v8 + 5) = v22;
        *((_QWORD *)v9 + 1) = v9 + 24;
        *(_DWORD *)&v4[v6 + 20] = 0;
        goto LABEL_12;
      }
      if (v12 >= 2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v3[v6 + 8], (uint64_t)&v3[v6 + 24], *(unsigned int *)&v4[v6 + 16], 4);
        v15 = *((unsigned int *)v9 + 4);
        if (!(_DWORD)v15)
          goto LABEL_11;
        v14 = (char *)*((_QWORD *)v9 + 1);
        v10 = *(char **)v11;
      }
      else
      {
        v15 = *(unsigned int *)&v4[v6 + 16];
      }
      memcpy(v10, v14, 4 * v15);
LABEL_11:
      *((_DWORD *)v8 + 4) = v12;
LABEL_12:
      *((_DWORD *)v9 + 4) = 0;
LABEL_13:
      v16 = v8 + 64;
      *((_QWORD *)v8 + 4) = v8 + 64;
      v18 = *((_QWORD *)v9 + 4);
      v17 = *((_QWORD *)v9 + 5);
      if (v17 == v18)
      {
        *((_QWORD *)v8 + 5) = v16;
        v19 = *(unsigned int *)&v4[v6 + 52];
        if ((_DWORD)v19)
          memmove(v16, *((const void **)v9 + 5), 8 * v19);
      }
      else
      {
        *((_QWORD *)v8 + 5) = v17;
        *((_QWORD *)v9 + 5) = v18;
      }
      v20 = &v4[v6];
      v21 = &v3[v6];
      *((_QWORD *)v21 + 6) = *(_QWORD *)&v4[v6 + 48];
      *((_DWORD *)v21 + 14) = *(_DWORD *)&v4[v6 + 56];
      *((_QWORD *)v20 + 6) = 4;
      *((_DWORD *)v20 + 14) = 0;
      v21[96] = v4[v6 + 96];
      v6 += 104;
      if (v7 == v6)
      {
        v4 = *(_BYTE **)a1;
        v23 = *(_DWORD *)(a1 + 8);
        goto LABEL_23;
      }
    }
  }
  v23 = 0;
LABEL_23:
  sub_1C49EEAA4((uint64_t)v4, (uint64_t)&v4[104 * v23]);
  v24 = v25;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v24;
}

void sub_1C49EF31C(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t *v5;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *i;
  unsigned int v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  unsigned int v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *j;
  unsigned int v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  _BYTE *v54;
  const void **v55;
  char v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t *k;
  unsigned int v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v80;

  v5 = a2;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *((_DWORD *)a2 + 2);
  if (v8 >= v7)
    v9 = v7;
  else
    v9 = v8;
  if ((_DWORD)v9)
  {
    v10 = 0;
    while (1)
    {
      if (a3)
      {
        if (*(_QWORD *)(a3 + 48))
        {
          for (i = *(uint64_t **)(a3 + 40); i; i = (uint64_t *)*i)
          {
            v12 = *((_DWORD *)i + 7);
            if (v12 <= v10)
            {
              if (v12 >= v10)
                goto LABEL_20;
              ++i;
            }
          }
          goto LABEL_48;
        }
        v13 = *(unsigned int *)(a3 + 8);
        if (!(_DWORD)v13)
          goto LABEL_48;
        v14 = *(_DWORD **)a3;
        v15 = 4 * v13;
        while (*v14 != (_DWORD)v10)
        {
          ++v14;
          v15 -= 4;
          if (!v15)
            goto LABEL_48;
        }
        if (!v15)
          goto LABEL_48;
      }
LABEL_20:
      v16 = *(_QWORD *)a1;
      v17 = *(_QWORD *)a1 + 32 * v10;
      v18 = *v5 + 32 * v10;
      v19 = *(unsigned int *)(v18 + 16);
      if ((_DWORD)v19)
      {
        if (!*(_DWORD *)(v17 + 16) || (v20 = *(_BYTE *)v17) != 0)
        {
          v20 = a4;
          if (*(_BYTE *)v18)
            v20 = 1;
        }
        *(_BYTE *)v17 = v20;
        v21 = v16 + 32 * v10;
        v22 = v21 + 8;
        v23 = *(uint64_t **)(v18 + 8);
        v24 = v21 + 24;
        v25 = *(_DWORD *)(v21 + 16);
        v26 = 8 * v19;
        do
        {
          v27 = *v23;
          if (v25 >= *(_DWORD *)(v22 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v22, v24, v25 + 1, 8);
            v25 = *(_DWORD *)(v22 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v22 + 8 * v25) = v27;
          v25 = *(_DWORD *)(v22 + 8) + 1;
          *(_DWORD *)(v22 + 8) = v25;
          ++v23;
          v26 -= 8;
        }
        while (v26);
        v5 = a2;
      }
      else
      {
        v22 = v17 + 8;
        v25 = *(_DWORD *)(v17 + 16);
      }
      v28 = v16 + 32 * v10;
      v29 = 126 - 2 * __clz(v25);
      if (v25)
        v30 = v29;
      else
        v30 = 0;
      sub_1C49F044C(*(unint64_t **)v22, (unint64_t *)(*(_QWORD *)v22 + 8 * v25), v30, 1);
      v33 = *(_DWORD *)(v28 + 16);
      v32 = (_DWORD *)(v28 + 16);
      v31 = v33;
      v34 = *(unint64_t **)v22;
      v35 = *(_QWORD *)v22 + 8 * v33;
      v36 = *(unint64_t **)v22;
      if (v33)
      {
        v37 = 0;
        v38 = 8 * v31 - 8;
        while (v38 != v37)
        {
          v40 = v34[v37 / 8];
          v39 = v34[v37 / 8 + 1];
          v37 += 8;
          if (v40 == v39)
          {
            v36 = &v34[v37 / 8 - 1];
            goto LABEL_39;
          }
        }
      }
      else
      {
LABEL_39:
        if (v36 != (unint64_t *)v35)
        {
          v41 = v36 + 2;
          if (v36 + 2 != (unint64_t *)v35)
          {
            v42 = *v36;
            do
            {
              v43 = v42;
              v42 = *v41;
              if (v43 != *v41)
              {
                v36[1] = v42;
                ++v36;
              }
              ++v41;
            }
            while (v41 != (unint64_t *)v35);
            v34 = *(unint64_t **)v22;
          }
          v35 = (uint64_t)(v36 + 1);
        }
      }
      *v32 = (unint64_t)(v35 - (_QWORD)v34) >> 3;
LABEL_48:
      if (++v10 == v9)
      {
        v8 = *((_DWORD *)v5 + 2);
        break;
      }
    }
  }
  if (v9 >= v8)
    return;
  v44 = v8;
  if (a3)
  {
    while (1)
    {
      v45 = v44 - 1;
      if (*(_QWORD *)(a3 + 48))
      {
        for (j = *(uint64_t **)(a3 + 40); j; j = (uint64_t *)*j)
        {
          v47 = *((_DWORD *)j + 7);
          if (v47 <= v45)
          {
            if (v47 >= v45)
              goto LABEL_65;
            ++j;
          }
        }
        goto LABEL_77;
      }
      v48 = *(unsigned int *)(a3 + 8);
      if (!(_DWORD)v48)
        goto LABEL_77;
      v49 = *(_DWORD **)a3;
      v50 = 4 * v48;
      while (*v49 != (_DWORD)v45)
      {
        ++v49;
        v50 -= 4;
        if (!v50)
          goto LABEL_77;
      }
      if (!v50)
        goto LABEL_77;
LABEL_65:
      if (v45 >= *(unsigned int *)(a1 + 8))
        sub_1C49F0388(a1, v44);
      v51 = *v5;
      v52 = (_BYTE *)(*v5 + 32 * v45);
      v53 = *(_QWORD *)a1;
      v54 = (_BYTE *)(*(_QWORD *)a1 + 32 * v45);
      v56 = *v52;
      v55 = (const void **)(v52 + 8);
      *v54 = v56;
      v57 = (uint64_t)(v54 + 8);
      if (v53 != v51)
        break;
LABEL_77:
      v44 = v45;
      if (v45 == v9)
      {
        v61 = *(_DWORD *)(a1 + 8);
        goto LABEL_81;
      }
    }
    v58 = *((unsigned int *)v55 + 2);
    v59 = *(unsigned int *)(v57 + 8);
    if (v59 >= v58)
    {
      if ((_DWORD)v58)
        memmove(*(void **)v57, *v55, 8 * v58);
      goto LABEL_76;
    }
    if (*(_DWORD *)(v57 + 12) < v58)
    {
      *(_DWORD *)(v57 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v57, v57 + 16, v58, 8);
    }
    else if ((_DWORD)v59)
    {
      memmove(*(void **)v57, *v55, 8 * v59);
LABEL_72:
      v60 = *((unsigned int *)v55 + 2);
      if (v59 != v60)
        memcpy((void *)(*(_QWORD *)v57 + 8 * v59), (char *)*v55 + 8 * v59, (_BYTE *)*v55 + 8 * v60 - ((_BYTE *)*v55 + 8 * v59));
LABEL_76:
      *(_DWORD *)(v57 + 8) = v58;
      goto LABEL_77;
    }
    v59 = 0;
    goto LABEL_72;
  }
  v61 = *(_DWORD *)(a1 + 8);
  v67 = *v5 + 32 * v9;
  v68 = 32 * v44 - 32 * v9;
  v69 = v67;
  do
  {
    v70 = *(_QWORD *)a1;
    v71 = v69;
    if (v61 >= *(_DWORD *)(a1 + 12))
    {
      v77 = v61 + 1;
      v78 = v70 + 32 * v61;
      if (v70 <= v69 && v78 > v69)
      {
        v80 = v67 - v70;
        sub_1C49F0D54(a1, v77);
        v70 = *(_QWORD *)a1;
        v71 = *(_QWORD *)a1 + v80;
      }
      else
      {
        sub_1C49F0D54(a1, v77);
        v70 = *(_QWORD *)a1;
        v71 = v69;
      }
    }
    v72 = v70 + 32 * *(unsigned int *)(a1 + 8);
    *(_BYTE *)v72 = *(_BYTE *)v71;
    v73 = (void *)(v72 + 24);
    *(_QWORD *)(v72 + 16) = 0x100000000;
    *(_QWORD *)(v72 + 8) = v72 + 24;
    v74 = v72 + 8;
    v75 = *(unsigned int *)(v71 + 16);
    if ((_DWORD)v75 && v74 != v71 + 8)
    {
      if (v75 >= 2)
      {
        *(_DWORD *)(v74 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v74, v74 + 16, v75, 8);
        v76 = *(unsigned int *)(v71 + 16);
        if (!(_DWORD)v76)
          goto LABEL_108;
        v73 = *(void **)v74;
      }
      else
      {
        v76 = *(unsigned int *)(v71 + 16);
      }
      memcpy(v73, *(const void **)(v71 + 8), 8 * v76);
LABEL_108:
      *(_DWORD *)(v74 + 8) = v75;
    }
    v61 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v61;
    v69 += 32;
    v67 += 32;
    v68 -= 32;
  }
  while (v68);
LABEL_81:
  if (v9 < v61)
  {
    while (!a3)
    {
LABEL_90:
      if (a4)
        goto LABEL_91;
LABEL_99:
      if (++v9 == v61)
        return;
    }
    if (*(_QWORD *)(a3 + 48))
    {
      for (k = *(uint64_t **)(a3 + 40); k; k = (uint64_t *)*k)
      {
        v63 = *((_DWORD *)k + 7);
        if (v63 <= v9)
        {
          if (v63 >= v9)
            goto LABEL_90;
          ++k;
        }
      }
      goto LABEL_99;
    }
    v64 = *(unsigned int *)(a3 + 8);
    if (!(_DWORD)v64)
      goto LABEL_99;
    v65 = *(_DWORD **)a3;
    v66 = 4 * v64;
    while (*v65 != (_DWORD)v9)
    {
      ++v65;
      v66 -= 4;
      if (!v66)
        goto LABEL_99;
    }
    if (!v66 || (a4 & 1) == 0)
      goto LABEL_99;
LABEL_91:
    *(_BYTE *)(*(_QWORD *)a1 + 32 * v9) = 1;
    goto LABEL_99;
  }
}

_DWORD *sub_1C49EF878(_DWORD *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t i;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  unsigned int v22;
  int *v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  int v27;
  int v28;
  int *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  unsigned int *v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  const void *v58;
  const void *v59;
  int v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;

  v2 = (uint64_t)result;
  v3 = result[2];
  v4 = *((_DWORD *)a2 + 2);
  if (v4 >= v3)
    v5 = v3;
  else
    v5 = v4;
  v70 = v5;
  if ((_DWORD)v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v7 = *(_QWORD *)v2;
      v8 = (char *)(*(_QWORD *)v2 + 104 * i);
      v9 = *a2;
      v10 = *a2 + 104 * i;
      if (*v8)
        v11 = *(_BYTE *)v10 == 0;
      else
        v11 = 1;
      v12 = !v11;
      *v8 = v12;
      v13 = (uint64_t)(v8 + 8);
      v14 = *(unsigned int *)(v10 + 16);
      if ((_DWORD)v14)
      {
        v15 = *(int **)(v10 + 8);
        v16 = *(_DWORD *)(v13 + 8);
        v17 = 4 * v14;
        do
        {
          v18 = *v15;
          if (v16 >= *(_DWORD *)(v13 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v13 + 16, v16 + 1, 4);
            v16 = *(_DWORD *)(v13 + 8);
          }
          *(_DWORD *)(*(_QWORD *)v13 + 4 * v16) = v18;
          v16 = *(_DWORD *)(v13 + 8) + 1;
          *(_DWORD *)(v13 + 8) = v16;
          ++v15;
          v17 -= 4;
        }
        while (v17);
      }
      v19 = v7 + 104 * i;
      result = (_DWORD *)std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
      v22 = *(_DWORD *)(v19 + 16);
      v21 = (_DWORD *)(v19 + 16);
      v20 = v22;
      v23 = *(int **)v13;
      v24 = *(_QWORD *)v13 + 4 * v22;
      if (v22)
      {
        v25 = v23 - 1;
        v26 = 4 * v20 - 4;
        while (v26)
        {
          v27 = v25[1];
          v28 = v25[2];
          ++v25;
          v26 -= 4;
          if (v27 == v28)
            goto LABEL_23;
        }
      }
      else
      {
        v25 = *(int **)v13;
LABEL_23:
        if (v25 != (int *)v24)
        {
          v29 = v25 + 2;
          if (v25 + 2 != (int *)v24)
          {
            v30 = *v25;
            do
            {
              v31 = v30;
              v30 = *v29;
              if (v31 != *v29)
              {
                v25[1] = v30;
                ++v25;
              }
              ++v29;
            }
            while (v29 != (int *)v24);
          }
          v24 = (uint64_t)(v25 + 1);
        }
      }
      *v21 = (unint64_t)(v24 - (_QWORD)v23) >> 2;
      v32 = v9 + 104 * i;
      v34 = *(uint64_t **)(v32 + 32);
      v33 = *(uint64_t **)(v32 + 40);
      v35 = (unsigned int *)(v32 + 52);
      v36 = (unsigned int *)(v32 + 48);
      if (v33 == v34)
        v36 = v35;
      v37 = *v36;
      if ((_DWORD)v37)
      {
        v38 = 8 * v37;
        v39 = v33;
        v5 = v70;
        while ((unint64_t)*v39 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v39;
          v38 -= 8;
          if (!v38)
            goto LABEL_44;
        }
      }
      else
      {
        v39 = v33;
        v5 = v70;
      }
      v40 = &v33[v37];
      if (v39 != v40)
      {
        v41 = *v39;
LABEL_40:
        result = sub_1C4774094((llvm::SmallPtrSetImplBase *)(v7 + 104 * i + 32), v41);
        v42 = (unint64_t *)(v39 + 1);
        while (v42 != (unint64_t *)v40)
        {
          v43 = *v42++;
          v41 = v43;
          if (v43 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v39 = (uint64_t *)(v42 - 1);
            goto LABEL_40;
          }
        }
      }
LABEL_44:
      ;
    }
    v4 = *((_DWORD *)a2 + 2);
  }
  if (v5 >= v4)
    return result;
  v44 = *a2 + 104 * v5;
  LODWORD(v45) = *(_DWORD *)(v2 + 8);
  v46 = 104 * v4 - 104 * v5;
  v47 = v44;
  do
  {
    v48 = *(_QWORD *)v2;
    v49 = v47;
    if (v45 >= *(_DWORD *)(v2 + 12))
    {
      v64 = v45 + 1;
      v65 = v48 + 104 * v45;
      if (v48 <= v47 && v65 > v47)
      {
        v67 = v44 - v48;
        sub_1C49EF13C(v2, v64);
        v48 = *(_QWORD *)v2;
        v49 = *(_QWORD *)v2 + v67;
      }
      else
      {
        sub_1C49EF13C(v2, v64);
        v48 = *(_QWORD *)v2;
        v49 = v47;
      }
    }
    v50 = *(_DWORD *)(v2 + 8);
    v51 = v48 + 104 * v50;
    *(_WORD *)v51 = *(_WORD *)v49;
    v52 = (void *)(v51 + 24);
    *(_QWORD *)(v51 + 16) = 0x100000000;
    *(_QWORD *)(v51 + 8) = v51 + 24;
    v53 = v51 + 8;
    v54 = *(unsigned int *)(v49 + 16);
    if ((_DWORD)v54 && v53 != v49 + 8)
    {
      if (v54 >= 2)
      {
        *(_DWORD *)(v53 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v53, v53 + 16, v54, 4);
        v55 = *(unsigned int *)(v49 + 16);
        if (!(_DWORD)v55)
          goto LABEL_54;
        v52 = *(void **)v53;
      }
      else
      {
        v55 = *(unsigned int *)(v49 + 16);
      }
      memcpy(v52, *(const void **)(v49 + 8), 4 * v55);
LABEL_54:
      *(_DWORD *)(v53 + 8) = v54;
    }
    v56 = v48 + 104 * v50;
    result = (_DWORD *)(v56 + 64);
    *(_QWORD *)(v56 + 32) = v56 + 64;
    v57 = v56 + 32;
    v58 = *(const void **)(v49 + 40);
    if (v58 == *(const void **)(v49 + 32))
    {
      *(_QWORD *)(v57 + 8) = result;
    }
    else
    {
      v63 = *(unsigned int *)(v49 + 48);
      result = malloc_type_malloc(8 * v63, 0x4065EBACuLL);
      if (!result && ((_DWORD)v63 || (result = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      *(_QWORD *)(v57 + 8) = result;
      v58 = *(const void **)(v49 + 32);
    }
    *(_DWORD *)(v57 + 16) = *(_DWORD *)(v49 + 48);
    v59 = *(const void **)(v49 + 40);
    v60 = *(_DWORD *)(v49 + 52);
    if (v59 == v58)
      v61 = *(_DWORD *)(v49 + 52);
    else
      v61 = *(_DWORD *)(v49 + 48);
    if (v61)
    {
      result = memmove(result, v59, 8 * v61);
      v60 = *(_DWORD *)(v49 + 52);
    }
    v62 = *(_DWORD *)(v49 + 56);
    *(_DWORD *)(v57 + 20) = v60;
    *(_DWORD *)(v57 + 24) = v62;
    *(_BYTE *)(v48 + 104 * v50 + 96) = *(_BYTE *)(v49 + 96);
    v45 = (*(_DWORD *)(v2 + 8) + 1);
    *(_DWORD *)(v2 + 8) = v45;
    v47 += 104;
    v44 += 104;
    v46 -= 104;
  }
  while (v46);
  if (v70 < v45)
  {
    v68 = v45 - v70;
    v69 = (_BYTE *)(*(_QWORD *)v2 + 104 * v70 + 96);
    do
    {
      *v69 = 1;
      v69 += 104;
      --v68;
    }
    while (v68);
  }
  return result;
}

void sub_1C49EFCB8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *i;
  unsigned int v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  unsigned int v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  unsigned int *v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t *j;
  unsigned int v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  void **v66;
  const void **v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t *k;
  unsigned int v73;
  uint64_t v74;
  _DWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unsigned int v83;
  unint64_t v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  const void *v92;
  const void *v93;
  int v94;
  unsigned int v95;
  int v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v101;
  unint64_t v104;

  v3 = a3;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *((_DWORD *)a2 + 2);
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  if ((_DWORD)v6)
  {
    v7 = 0;
    while (1)
    {
      if (v3)
      {
        if (*(_QWORD *)(v3 + 48))
        {
          for (i = *(uint64_t **)(v3 + 40); i; i = (uint64_t *)*i)
          {
            v9 = *((_DWORD *)i + 7);
            if (v9 <= v7)
            {
              if (v9 >= v7)
                goto LABEL_20;
              ++i;
            }
          }
          goto LABEL_63;
        }
        v10 = *(unsigned int *)(v3 + 8);
        if (!(_DWORD)v10)
          goto LABEL_63;
        v11 = *(_DWORD **)v3;
        v12 = 4 * v10;
        while (*v11 != (_DWORD)v7)
        {
          ++v11;
          v12 -= 4;
          if (!v12)
            goto LABEL_63;
        }
        if (!v12)
          goto LABEL_63;
      }
LABEL_20:
      v13 = *(_QWORD *)a1;
      v14 = *a2;
      v15 = *(_QWORD *)a1 + 96 * v7;
      v16 = *a2 + 96 * v7;
      if (*(_BYTE *)(v15 + 4))
        v17 = *(_BYTE *)(v16 + 4) == 0;
      else
        v17 = 1;
      v18 = !v17;
      *(_BYTE *)(v15 + 4) = v18;
      v19 = v15 + 8;
      v20 = *(unsigned int *)(v16 + 16);
      if ((_DWORD)v20)
      {
        v21 = *(uint64_t **)(v16 + 8);
        v22 = *(_DWORD *)(v19 + 8);
        v23 = 8 * v20;
        do
        {
          v24 = *v21;
          if (v22 >= *(_DWORD *)(v19 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v19, v19 + 16, v22 + 1, 8);
            v22 = *(_DWORD *)(v19 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v19 + 8 * v22) = v24;
          v22 = *(_DWORD *)(v19 + 8) + 1;
          *(_DWORD *)(v19 + 8) = v22;
          ++v21;
          v23 -= 8;
        }
        while (v23);
      }
      else
      {
        v22 = *(_DWORD *)(v13 + 96 * v7 + 16);
      }
      v25 = v13 + 96 * v7;
      v26 = 126 - 2 * __clz(v22);
      if (v22)
        v27 = v26;
      else
        v27 = 0;
      sub_1C49F044C(*(unint64_t **)v19, (unint64_t *)(*(_QWORD *)v19 + 8 * v22), v27, 1);
      v30 = *(_DWORD *)(v25 + 16);
      v29 = (_DWORD *)(v25 + 16);
      v28 = v30;
      v31 = *(unint64_t **)v19;
      v32 = *(_QWORD *)v19 + 8 * v30;
      v33 = *(unint64_t **)v19;
      if (v30)
      {
        v34 = 0;
        v35 = 8 * v28 - 8;
        while (v35 != v34)
        {
          v37 = v31[v34 / 8];
          v36 = v31[v34 / 8 + 1];
          v34 += 8;
          if (v37 == v36)
          {
            v33 = &v31[v34 / 8 - 1];
            goto LABEL_41;
          }
        }
      }
      else
      {
LABEL_41:
        if (v33 != (unint64_t *)v32)
        {
          v38 = v33 + 2;
          if (v33 + 2 != (unint64_t *)v32)
          {
            v39 = *v33;
            do
            {
              v40 = v39;
              v39 = *v38;
              if (v40 != *v38)
              {
                v33[1] = v39;
                ++v33;
              }
              ++v38;
            }
            while (v38 != (unint64_t *)v32);
            v31 = *(unint64_t **)v19;
          }
          v32 = (uint64_t)(v33 + 1);
        }
      }
      *v29 = (unint64_t)(v32 - (_QWORD)v31) >> 3;
      v41 = v14 + 96 * v7;
      v43 = *(uint64_t **)(v41 + 24);
      v42 = *(uint64_t **)(v41 + 32);
      v44 = (unsigned int *)(v41 + 44);
      v45 = (unsigned int *)(v41 + 40);
      if (v42 == v43)
        v45 = v44;
      v46 = *v45;
      if ((_DWORD)v46)
      {
        v47 = 8 * v46;
        v48 = v42;
        v3 = a3;
        while ((unint64_t)*v48 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v48;
          v47 -= 8;
          if (!v47)
            goto LABEL_63;
        }
      }
      else
      {
        v48 = v42;
        v3 = a3;
      }
      v49 = &v42[v46];
      if (v48 != v49)
      {
        v50 = *v48;
LABEL_59:
        sub_1C4774094((llvm::SmallPtrSetImplBase *)(v13 + 96 * v7 + 24), v50);
        v51 = (unint64_t *)(v48 + 1);
        while (v51 != (unint64_t *)v49)
        {
          v52 = *v51++;
          v50 = v52;
          if (v52 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v48 = (uint64_t *)(v51 - 1);
            goto LABEL_59;
          }
        }
      }
LABEL_63:
      if (++v7 == v6)
      {
        v53 = a1;
        v5 = *((_DWORD *)a2 + 2);
        goto LABEL_66;
      }
    }
  }
  v53 = a1;
LABEL_66:
  if (v6 < v5)
  {
    v54 = v5;
    if (v3)
    {
      while (1)
      {
        v55 = v54 - 1;
        if (*(_QWORD *)(v3 + 48))
        {
          for (j = *(uint64_t **)(v3 + 40); j; j = (uint64_t *)*j)
          {
            v57 = *((_DWORD *)j + 7);
            if (v57 <= v55)
            {
              if (v57 >= v55)
                goto LABEL_81;
              ++j;
            }
          }
          goto LABEL_94;
        }
        v58 = *(unsigned int *)(v3 + 8);
        if (!(_DWORD)v58)
          goto LABEL_94;
        v59 = *(_DWORD **)v3;
        v60 = 4 * v58;
        while (*v59 != (_DWORD)v55)
        {
          ++v59;
          v60 -= 4;
          if (!v60)
            goto LABEL_94;
        }
        if (!v60)
          goto LABEL_94;
LABEL_81:
        if (v55 >= *(unsigned int *)(v53 + 8))
          sub_1C49F0ED4(v53, v54);
        v61 = *a2;
        v62 = *a2 + 96 * v55;
        v63 = *(_QWORD *)v53;
        v64 = *(_DWORD *)v62;
        v65 = *(_QWORD *)v53 + 96 * v55;
        *(_BYTE *)(v65 + 4) = *(_BYTE *)(v62 + 4);
        *(_DWORD *)v65 = v64;
        if (v63 != v61)
          break;
LABEL_93:
        *(_BYTE *)(v65 + 88) = *(_BYTE *)(v62 + 88);
        v3 = a3;
        v53 = a1;
LABEL_94:
        v54 = v55;
        if (v55 == v6)
        {
          v71 = *(_DWORD *)(v53 + 8);
          goto LABEL_98;
        }
      }
      v66 = (void **)(v65 + 8);
      v67 = (const void **)(v62 + 8);
      v68 = *(unsigned int *)(v62 + 16);
      v69 = *(unsigned int *)(v65 + 16);
      if (v69 >= v68)
      {
        if ((_DWORD)v68)
          memmove(*v66, *v67, 8 * v68);
        goto LABEL_92;
      }
      if (*(_DWORD *)(v65 + 20) < v68)
      {
        *(_DWORD *)(v65 + 16) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v65 + 8, v65 + 24, v68, 8);
      }
      else if ((_DWORD)v69)
      {
        memmove(*v66, *v67, 8 * v69);
LABEL_88:
        v70 = *(unsigned int *)(v62 + 16);
        if (v69 != v70)
          memcpy((char *)*v66 + 8 * v69, (char *)*v67 + 8 * v69, (_BYTE *)*v67 + 8 * v70 - ((_BYTE *)*v67 + 8 * v69));
LABEL_92:
        *(_DWORD *)(v65 + 16) = v68;
        llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)(v63 + 96 * v55 + 24), (const llvm::SmallPtrSetImplBase *)(v61 + 96 * v55 + 24));
        goto LABEL_93;
      }
      v69 = 0;
      goto LABEL_88;
    }
    v71 = *(_DWORD *)(v53 + 8);
    v78 = *a2 + 96 * v6;
    v79 = 96 * v54 - 96 * v6;
    v80 = v78;
    do
    {
      v81 = *(_QWORD *)v53;
      v82 = v80;
      if (v71 >= *(_DWORD *)(v53 + 12))
      {
        v98 = v71 + 1;
        v99 = v81 + 96 * v71;
        if (v81 <= v80 && v99 > v80)
        {
          v101 = v78 - v81;
          sub_1C49F0F98(v53, v98);
          v81 = *(_QWORD *)v53;
          v82 = *(_QWORD *)v53 + v101;
        }
        else
        {
          sub_1C49F0F98(v53, v98);
          v81 = *(_QWORD *)v53;
          v82 = v80;
        }
      }
      v83 = *(_DWORD *)(v53 + 8);
      v104 = v81;
      v84 = v81 + 96 * v83;
      v85 = *(_DWORD *)v82;
      *(_BYTE *)(v84 + 4) = *(_BYTE *)(v82 + 4);
      *(_DWORD *)v84 = v85;
      v86 = v84 + 24;
      *(_QWORD *)(v84 + 16) = 0;
      *(_QWORD *)(v84 + 8) = v84 + 24;
      v87 = v84 + 8;
      v88 = *(unsigned int *)(v82 + 16);
      if ((_DWORD)v88 && v87 != v82 + 8)
      {
        *(_DWORD *)(v87 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v87, v87 + 16, v88, 8);
        v89 = *(unsigned int *)(v82 + 16);
        if ((_DWORD)v89)
          memcpy(*(void **)v87, *(const void **)(v82 + 8), 8 * v89);
        *(_DWORD *)(v87 + 8) = v88;
      }
      v90 = v104;
      v91 = (void *)(v104 + 96 * v83 + 56);
      *(_QWORD *)v86 = v91;
      v92 = *(const void **)(v82 + 32);
      if (v92 == *(const void **)(v82 + 24))
      {
        *(_QWORD *)(v86 + 8) = v91;
        v53 = a1;
      }
      else
      {
        v97 = *(unsigned int *)(v82 + 40);
        v91 = malloc_type_malloc(8 * v97, 0x4065EBACuLL);
        if (!v91 && ((_DWORD)v97 || (v91 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        *(_QWORD *)(v86 + 8) = v91;
        v92 = *(const void **)(v82 + 24);
        v90 = v104;
        v53 = a1;
      }
      *(_DWORD *)(v86 + 16) = *(_DWORD *)(v82 + 40);
      v93 = *(const void **)(v82 + 32);
      v94 = *(_DWORD *)(v82 + 44);
      if (v93 == v92)
        v95 = *(_DWORD *)(v82 + 44);
      else
        v95 = *(_DWORD *)(v82 + 40);
      if (v95)
      {
        memmove(v91, v93, 8 * v95);
        v94 = *(_DWORD *)(v82 + 44);
      }
      v96 = *(_DWORD *)(v82 + 48);
      *(_DWORD *)(v86 + 20) = v94;
      *(_DWORD *)(v86 + 24) = v96;
      *(_BYTE *)(v90 + 96 * v83 + 88) = *(_BYTE *)(v82 + 88);
      v71 = *(_DWORD *)(v53 + 8) + 1;
      *(_DWORD *)(v53 + 8) = v71;
      v80 += 96;
      v78 += 96;
      v79 -= 96;
    }
    while (v79);
LABEL_98:
    if (v6 < v71)
    {
      do
      {
        if (a3)
        {
          if (*(_QWORD *)(a3 + 48))
          {
            for (k = *(uint64_t **)(a3 + 40); k; k = (uint64_t *)*k)
            {
              v73 = *((_DWORD *)k + 7);
              if (v73 <= v6)
              {
                if (v73 >= v6)
                  goto LABEL_113;
                ++k;
              }
            }
            goto LABEL_114;
          }
          v74 = *(unsigned int *)(a3 + 8);
          if (!(_DWORD)v74)
            goto LABEL_114;
          v75 = *(_DWORD **)a3;
          v76 = 4 * v74;
          while (*v75 != (_DWORD)v6)
          {
            ++v75;
            v76 -= 4;
            if (!v76)
              goto LABEL_114;
          }
          if (!v76)
            goto LABEL_114;
        }
LABEL_113:
        v77 = *(_QWORD *)v53 + 96 * v6;
        *(_BYTE *)(v77 + 88) = 1;
        *(_DWORD *)v77 = 0;
LABEL_114:
        ++v6;
      }
      while (v6 != v71);
    }
  }
}

void sub_1C49F0388(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        sub_1C49F0D54(a1, a2);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
      {
        v8 = *(_QWORD *)a1 + 32 * a2;
        v9 = *(_QWORD *)a1 + 32 * v2;
        do
        {
          *(_OWORD *)v9 = 0uLL;
          *(_OWORD *)(v9 + 16) = 0uLL;
          *(_QWORD *)(v9 + 8) = v9 + 24;
          *(_DWORD *)(v9 + 20) = 1;
          v9 += 32;
        }
        while (v9 != v8);
      }
    }
    else
    {
      v5 = *(_QWORD *)a1 + 32 * v2 - 8;
      v6 = 32 * a2 - 32 * v2;
      do
      {
        v7 = *(void **)(v5 - 16);
        if ((void *)v5 != v7)
          free(v7);
        v5 -= 32;
        v6 += 32;
      }
      while (v6);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

unint64_t *sub_1C49F044C(unint64_t *result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  BOOL v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  BOOL v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  BOOL v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v71;
  unint64_t v72;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v37 = *(a2 - 1);
        v38 = *v8;
        if (v37 < *v8)
        {
          *v8 = v37;
          *(a2 - 1) = v38;
        }
        return result;
      case 3:
        return sub_1C49F0A6C(v8, v8 + 1, a2 - 1);
      case 4:
        return sub_1C49F0C38(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        return sub_1C49F0CB4(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 <= 191)
        {
          v39 = v8 + 1;
          v41 = v8 == a2 || v39 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v41)
            {
              v42 = 8;
              v43 = v8;
              do
              {
                v45 = *v43;
                v44 = v43[1];
                v43 = v39;
                if (v44 < v45)
                {
                  v46 = v42;
                  while (1)
                  {
                    *(unint64_t *)((char *)v8 + v46) = v45;
                    v47 = v46 - 8;
                    if (v46 == 8)
                      break;
                    v45 = *(unint64_t *)((char *)v8 + v46 - 16);
                    v46 -= 8;
                    if (v44 >= v45)
                    {
                      v48 = (unint64_t *)((char *)v8 + v47);
                      goto LABEL_75;
                    }
                  }
                  v48 = v8;
LABEL_75:
                  *v48 = v44;
                }
                v39 = v43 + 1;
                v42 += 8;
              }
              while (v43 + 1 != a2);
            }
          }
          else if (!v41)
          {
            do
            {
              v72 = *v7;
              v71 = v7[1];
              v7 = v39;
              if (v71 < v72)
              {
                do
                {
                  *v39 = v72;
                  v72 = *(v39 - 2);
                  --v39;
                }
                while (v71 < v72);
                *v39 = v71;
              }
              v39 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v49 = (unint64_t)(v10 - 2) >> 1;
            v50 = v49;
            do
            {
              v51 = v50;
              if (v49 >= v50)
              {
                v52 = (2 * v50) | 1;
                v53 = &v8[v52];
                if (2 * v51 + 2 >= v10)
                {
                  v54 = *v53;
                }
                else
                {
                  v54 = v53[1];
                  v55 = *v53 >= v54;
                  if (*v53 < v54)
                    ++v53;
                  else
                    v54 = *v53;
                  if (!v55)
                    v52 = 2 * v51 + 2;
                }
                v56 = &v8[v51];
                v57 = *v56;
                if (v54 >= *v56)
                {
                  do
                  {
                    *v56 = v54;
                    v56 = v53;
                    if (v49 < v52)
                      break;
                    v58 = (2 * v52) | 1;
                    v53 = &v8[v58];
                    v52 = 2 * v52 + 2;
                    if (v52 >= v10)
                    {
                      v54 = *v53;
                      v52 = v58;
                    }
                    else
                    {
                      v54 = *v53;
                      result = (unint64_t *)v53[1];
                      if (*v53 >= (unint64_t)result)
                      {
                        v52 = v58;
                      }
                      else
                      {
                        v54 = v53[1];
                        ++v53;
                      }
                    }
                  }
                  while (v54 >= v57);
                  *v56 = v57;
                }
              }
              v50 = v51 - 1;
            }
            while (v51);
            do
            {
              v59 = 0;
              v60 = *v8;
              v61 = v8;
              do
              {
                v62 = &v61[v59 + 1];
                v63 = (2 * v59) | 1;
                v59 = 2 * v59 + 2;
                if (v59 >= v10)
                {
                  v64 = *v62;
                  v59 = v63;
                }
                else
                {
                  v64 = *v62;
                  if (*v62 >= v62[1])
                  {
                    v59 = v63;
                  }
                  else
                  {
                    v64 = v62[1];
                    ++v62;
                  }
                }
                *v61 = v64;
                v61 = v62;
              }
              while (v59 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v62 == --a2)
              {
                *v62 = v60;
              }
              else
              {
                *v62 = *a2;
                *a2 = v60;
                v65 = (char *)v62 - (char *)v8 + 8;
                if (v65 >= 9)
                {
                  v66 = (((unint64_t)v65 >> 3) - 2) >> 1;
                  v67 = &v8[v66];
                  v68 = *v67;
                  v69 = *v62;
                  if (*v67 < *v62)
                  {
                    do
                    {
                      *v62 = v68;
                      v62 = v67;
                      if (!v66)
                        break;
                      v66 = (v66 - 1) >> 1;
                      v67 = &v8[v66];
                      v68 = *v67;
                    }
                    while (*v67 < v69);
                    *v62 = v69;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = sub_1C49F0A6C(&v7[(unint64_t)v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1C49F0A6C(v7, &v7[(unint64_t)v10 >> 1], a2 - 1);
          sub_1C49F0A6C(v7 + 1, v12 - 1, a2 - 2);
          sub_1C49F0A6C(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = sub_1C49F0A6C(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0 && *(v7 - 1) >= v14)
        {
          if (v14 >= *(a2 - 1))
          {
            v29 = v7 + 1;
            do
            {
              v8 = v29;
              if (v29 >= a2)
                break;
              ++v29;
            }
            while (v14 >= *v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v28 = v8[1];
              ++v8;
            }
            while (v14 >= v28);
          }
          v30 = a2;
          if (v8 < a2)
          {
            v30 = a2;
            do
              v31 = *--v30;
            while (v14 < v31);
          }
          if (v8 < v30)
          {
            v32 = *v8;
            v33 = *v30;
            do
            {
              *v8 = v33;
              *v30 = v32;
              do
              {
                v34 = v8[1];
                ++v8;
                v32 = v34;
              }
              while (v14 >= v34);
              do
              {
                v35 = *--v30;
                v33 = v35;
              }
              while (v14 < v35);
            }
            while (v8 < v30);
          }
          v36 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v36;
          a4 = 0;
          *v36 = v14;
          continue;
        }
        v15 = 0;
        do
          v16 = v7[++v15];
        while (v16 < v14);
        v17 = &v7[v15];
        v18 = a2;
        if (v15 == 1)
        {
          v18 = a2;
          do
          {
            if (v17 >= v18)
              break;
            v20 = *--v18;
          }
          while (v20 >= v14);
        }
        else
        {
          do
            v19 = *--v18;
          while (v19 >= v14);
        }
        if (v17 >= v18)
        {
          v26 = v17 - 1;
        }
        else
        {
          v21 = *v18;
          v22 = &v7[v15];
          v23 = v18;
          do
          {
            *v22 = v21;
            *v23 = v16;
            do
            {
              v24 = v22[1];
              ++v22;
              v16 = v24;
            }
            while (v24 < v14);
            do
            {
              v25 = *--v23;
              v21 = v25;
            }
            while (v25 >= v14);
          }
          while (v22 < v23);
          v26 = v22 - 1;
        }
        if (v26 != v7)
          *v7 = *v26;
        *v26 = v14;
        if (v17 < v18)
        {
LABEL_32:
          result = (unint64_t *)sub_1C49F044C(v7, v26, a3, a4 & 1);
          a4 = 0;
          v8 = v26 + 1;
          continue;
        }
        v27 = sub_1C49F0ADC(v7, v26);
        v8 = v26 + 1;
        result = (unint64_t *)sub_1C49F0ADC(v26 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v27)
            continue;
          goto LABEL_32;
        }
        a2 = v26;
        if (!v27)
          goto LABEL_2;
        return result;
    }
  }
}

unint64_t *sub_1C49F0A6C(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = *result;
  v5 = *a3;
  if (*a2 >= *result)
  {
    if (v5 < v3)
    {
      *a2 = v5;
      *a3 = v3;
      v6 = *result;
      if (*a2 < *result)
      {
        *result = *a2;
        *a2 = v6;
      }
    }
  }
  else
  {
    if (v5 >= v3)
    {
      *result = v3;
      *a2 = v4;
      if (*a3 >= v4)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v5;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1C49F0ADC(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1C49F0A6C(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C49F0C38(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1C49F0CB4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C49F0A6C(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 < *v8)
    {
      v14 = v11;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(unint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 >= v13)
        {
          v16 = (unint64_t *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

unint64_t *sub_1C49F0C38(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t *result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  result = sub_1C49F0A6C(a1, a2, a3);
  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

unint64_t *sub_1C49F0CB4(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t *result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  result = sub_1C49F0C38(a1, a2, a3, a4);
  v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

void sub_1C49F0D54(uint64_t a1, unint64_t a2)
{
  char *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  unint64_t v12;
  BOOL v13;
  char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  unint64_t v21;

  v21 = 0;
  v3 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 32, &v21);
  v4 = *(_BYTE **)a1;
  v5 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v5)
    goto LABEL_24;
  v6 = 0;
  v7 = 32 * v5;
  do
  {
    v8 = &v3[v6];
    v9 = &v4[v6];
    *v8 = v4[v6];
    v10 = &v3[v6 + 24];
    *(_QWORD *)&v3[v6 + 8] = v10;
    v11 = &v3[v6 + 8];
    *((_QWORD *)v8 + 2) = 0x100000000;
    v12 = *(unsigned int *)&v4[v6 + 16];
    if ((_DWORD)v12)
      v13 = v9 == v8;
    else
      v13 = 1;
    if (!v13)
    {
      v14 = (char *)*((_QWORD *)v9 + 1);
      if (v9 + 24 != v14)
      {
        *(_QWORD *)v11 = v14;
        v16 = *(_DWORD *)&v4[v6 + 20];
        *((_DWORD *)v8 + 4) = v12;
        *((_DWORD *)v8 + 5) = v16;
        *((_QWORD *)v9 + 1) = v9 + 24;
        *(_DWORD *)&v4[v6 + 20] = 0;
        goto LABEL_12;
      }
      if (v12 >= 2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v11, (uint64_t)&v3[v6 + 24], v12, 8);
        v15 = *((unsigned int *)v9 + 4);
        if (!(_DWORD)v15)
          goto LABEL_11;
        v14 = (char *)*((_QWORD *)v9 + 1);
        v10 = *(char **)&v3[v6 + 8];
      }
      else
      {
        v15 = *(unsigned int *)&v4[v6 + 16];
      }
      memcpy(v10, v14, 8 * v15);
LABEL_11:
      *((_DWORD *)v8 + 4) = v12;
LABEL_12:
      *((_DWORD *)v9 + 4) = 0;
    }
    v6 += 32;
  }
  while (v7 != v6);
  v4 = *(_BYTE **)a1;
  v17 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v17)
  {
    v18 = 32 * v17;
    do
    {
      v19 = *(char **)&v4[v18 - 24];
      if (&v4[v18 - 8] != v19)
        free(v19);
      v18 -= 32;
    }
    while (v18);
    v4 = *(_BYTE **)a1;
  }
LABEL_24:
  v20 = v21;
  if (v4 != (_BYTE *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v20;
}

void sub_1C49F0ED4(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        sub_1C49F0F98(a1, a2);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
      {
        v5 = *(_QWORD *)a1 + 96 * a2;
        v6 = *(_QWORD *)a1 + 96 * v2;
        do
        {
          *(_OWORD *)v6 = 0uLL;
          *(_OWORD *)(v6 + 16) = 0uLL;
          *(_OWORD *)(v6 + 64) = 0uLL;
          *(_OWORD *)(v6 + 80) = 0uLL;
          *(_OWORD *)(v6 + 32) = 0uLL;
          *(_OWORD *)(v6 + 48) = 0uLL;
          *(_QWORD *)(v6 + 24) = v6 + 56;
          *(_BYTE *)(v6 + 4) = 1;
          *(_QWORD *)(v6 + 8) = v6 + 24;
          *(_QWORD *)(v6 + 32) = v6 + 56;
          *(_DWORD *)(v6 + 40) = 4;
          v6 += 96;
        }
        while (v6 != v5);
      }
    }
    else
    {
      sub_1C49EEAFC((char *)(*(_QWORD *)a1 + 96 * a2), (char *)(*(_QWORD *)a1 + 96 * v2));
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

void sub_1C49F0F98(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  char *v11;
  int v12;
  BOOL v13;
  char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;

  v25 = 0;
  v3 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 96, &v25);
  v4 = *(char **)a1;
  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 96 * v5;
    do
    {
      v8 = &v4[v6];
      v9 = &v3[v6];
      v10 = *(_DWORD *)&v4[v6];
      v9[4] = v4[v6 + 4];
      v11 = &v3[v6 + 24];
      *(_QWORD *)&v3[v6 + 8] = v11;
      *(_DWORD *)v9 = v10;
      *((_QWORD *)v9 + 2) = 0;
      v12 = *(_DWORD *)&v4[v6 + 16];
      if (v12)
        v13 = v8 == v9;
      else
        v13 = 1;
      if (!v13)
      {
        v14 = (char *)*((_QWORD *)v8 + 1);
        if (v8 + 24 == v14)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v3[v6 + 8], (uint64_t)&v3[v6 + 24], *(unsigned int *)&v4[v6 + 16], 8);
          v15 = *((unsigned int *)v8 + 4);
          if ((_DWORD)v15)
            memcpy(*(void **)&v3[v6 + 8], *((const void **)v8 + 1), 8 * v15);
          *((_DWORD *)v9 + 4) = v12;
        }
        else
        {
          *((_QWORD *)v9 + 1) = v14;
          v22 = *(_DWORD *)&v4[v6 + 20];
          *((_DWORD *)v9 + 4) = v12;
          *((_DWORD *)v9 + 5) = v22;
          *((_QWORD *)v8 + 1) = v8 + 24;
          *(_DWORD *)&v4[v6 + 20] = 0;
        }
        *((_DWORD *)v8 + 4) = 0;
      }
      v16 = v9 + 56;
      *(_QWORD *)v11 = v9 + 56;
      v18 = *((_QWORD *)v8 + 3);
      v17 = *((_QWORD *)v8 + 4);
      if (v17 == v18)
      {
        *((_QWORD *)v9 + 4) = v16;
        v19 = *(unsigned int *)&v4[v6 + 44];
        if ((_DWORD)v19)
          memmove(v16, *((const void **)v8 + 4), 8 * v19);
      }
      else
      {
        *((_QWORD *)v9 + 4) = v17;
        *((_QWORD *)v8 + 4) = v18;
      }
      v20 = &v4[v6];
      v21 = &v3[v6];
      *((_QWORD *)v21 + 5) = *(_QWORD *)&v4[v6 + 40];
      *((_DWORD *)v21 + 12) = *(_DWORD *)&v4[v6 + 48];
      *((_QWORD *)v20 + 5) = 4;
      *((_DWORD *)v20 + 12) = 0;
      v21[88] = v4[v6 + 88];
      v6 += 96;
    }
    while (v7 != v6);
    v4 = *(char **)a1;
    v23 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    v23 = 0;
  }
  sub_1C49EEAFC(v4, &v4[96 * v23]);
  v24 = v25;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v24;
}

void sub_1C49F1164(uint64_t a1, unint64_t a2, _QWORD *a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  int *v44;
  int v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  unsigned int *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  unsigned int v77;
  uint64_t **v78;
  int v79;
  __int16 v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t *v83;
  uint64_t v84;
  BOOL v85;
  char v86;
  uint64_t *v87;
  uint64_t v88;
  _DWORD *v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  _DWORD *v104;
  int v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t *v108;
  _DWORD *v109;
  int v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  void *v126;
  unsigned int v127;
  int v128;
  unsigned int v129;
  void *v130;
  unsigned int *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  unsigned int v145;
  unsigned int *v146;
  unsigned int *v147;
  uint64_t **v148;
  _DWORD *v149;

  v7 = a4;
  v8 = a3[3];
  v9 = a3[4];
  v10 = v9 + 32 * a4;
  v11 = (_DWORD *)v10;
  v12 = sub_1C4AD4FB8((uint64_t)a3, a4, (_QWORD *)(*(_QWORD *)(a1 + 1416) + 8));
  if ((_DWORD)a2 != 2)
  {
    v13 = HIDWORD(a2);
    if ((_DWORD)a2 != 1)
    {
      if (!(_DWORD)a2)
      {
        if (v13 >= *(unsigned int *)(a1 + 8))
          sub_1C49F0388(a1, (HIDWORD(a2) + 1));
        v14 = *(_QWORD *)a1 + 32 * v13;
        sub_1C49F1E00(a1, v14);
        sub_1C49F1FA4(a1, v8, (uint64_t)a3, v7 | 0x100000000, v12 | 0x100000000, v14);
        if (v12 == 3)
        {
          sub_1C49F20C4(a1, (uint64_t)v11);
          v15 = *(unsigned int *)(v14 + 16);
          if (v15 >= *(_DWORD *)(v14 + 20))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v14 + 8, v14 + 24, v15 + 1, 8);
            LODWORD(v15) = *(_DWORD *)(v14 + 16);
          }
          *(_QWORD *)(*(_QWORD *)(v14 + 8) + 8 * v15) = v11;
          ++*(_DWORD *)(v14 + 16);
          v16 = sub_1C49EE844(a1, v8);
          if (v16)
          {
            v17 = sub_1C49EE8D4(v16);
            if ((*(_BYTE *)(a3[2] + 16) & 2) != 0)
              sub_1C4774094((llvm::SmallPtrSetImplBase *)(v17 + 128), (uint64_t)v11);
          }
          *(_BYTE *)v14 = 0;
        }
      }
      return;
    }
    if (v13 >= *(unsigned int *)(a1 + 24))
      sub_1C49F0ED4(a1 + 16, (HIDWORD(a2) + 1));
    v18 = *(_QWORD *)(a1 + 16);
    if (v12 == 4)
    {
      v19 = v9 + 32 * v7;
      if ((*(_DWORD *)(v19 + 16) - 81) > 4)
        v20 = 0;
      else
        v20 = *(_DWORD *)(v19 + 4);
      v21 = sub_1C49C802C((uint64_t)v11);
      if ((v21 & 0xFF00000000) == 0 || ((1 << (BYTE4(a2) - v20)) & v21) != 0)
      {
        v22 = v18 + 96 * HIDWORD(a2);
        v25 = *(uint64_t **)(v22 + 8);
        v23 = v22 + 8;
        v24 = v25;
        v26 = *(unsigned int *)(v23 + 8);
        if ((_DWORD)v26)
        {
          v27 = 8 * v26;
          do
          {
            v28 = *v24++;
            sub_1C49F2158(a1, v28, (uint64_t)v11);
            v27 -= 8;
          }
          while (v27);
        }
        v29 = (_BYTE *)(v18 + 96 * v13);
        v29[4] = 1;
        v29[88] = 0;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)(v29 + 24), (uint64_t)v11);
        if (*(_DWORD *)(v23 + 8))
        {
          v30 = *(uint64_t **)v23;
          v31 = **(_QWORD **)v23;
          *(_DWORD *)(v23 + 8) = 0;
          if (*(_DWORD *)(v23 + 12))
          {
            v32 = 0;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v23, v23 + 16, 1uLL, 8);
            v30 = *(uint64_t **)v23;
            v32 = *(unsigned int *)(v23 + 8);
          }
          v30[v32] = v31;
          ++*(_DWORD *)(v23 + 8);
        }
      }
      return;
    }
    v47 = (unsigned int *)(v18 + 96 * HIDWORD(a2));
    v49 = v47 + 11;
    LODWORD(v48) = v47[11];
    v50 = (uint64_t)(v47 + 6);
    v148 = (uint64_t **)(v47 + 6);
    if ((_DWORD)v48 == v47[12])
    {
      v51 = 0;
      goto LABEL_78;
    }
    v144 = *(_QWORD *)(a1 + 16);
    v146 = (unsigned int *)(v18 + 96 * v13);
    v58 = v146[10];
    v59 = (uint64_t *)*((_QWORD *)v146 + 4);
    v60 = *(uint64_t **)v50;
    if (v59 == *(uint64_t **)v50)
      v61 = v48;
    else
      v61 = v58;
    v62 = (uint64_t *)*((_QWORD *)v146 + 4);
    if ((_DWORD)v61)
    {
      v63 = 0;
      while ((unint64_t)v59[v63] >= 0xFFFFFFFFFFFFFFFELL)
      {
        if (v61 == ++v63)
          goto LABEL_64;
      }
      v62 = &v59[v63];
    }
    v64 = &v59[v61];
    if (v62 != v64)
    {
      v65 = *v62;
LABEL_59:
      sub_1C49F2158(a1, v65, (uint64_t)v11);
      v66 = (unint64_t *)(v62 + 1);
      while (v66 != (unint64_t *)v64)
      {
        v67 = *v66++;
        v65 = v67;
        if (v67 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v62 = (uint64_t *)(v66 - 1);
          goto LABEL_59;
        }
      }
      v59 = (uint64_t *)*((_QWORD *)v146 + 4);
      v60 = *v148;
      LODWORD(v48) = *v49;
      v58 = v146[10];
    }
LABEL_64:
    if (v59 == v60)
      v48 = v48;
    else
      v48 = v58;
    if ((_DWORD)v48)
    {
      v68 = 8 * v48;
      v69 = &v59[v48];
      v18 = v144;
      v47 = v146;
      while ((unint64_t)*v59 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v59;
        v68 -= 8;
        if (!v68)
        {
          v59 = v69;
          break;
        }
      }
    }
    else
    {
      v18 = v144;
      v47 = v146;
    }
    v51 = sub_1C49F20C4(a1, *v59);
    v50 = (uint64_t)(v49 - 5);
    v70 = *(uint64_t **)(v49 - 3);
    if (v70 == *v148)
      goto LABEL_74;
    v114 = *(v49 - 1);
    if (v114 < 0x21 || 4 * (*v49 - v49[1]) >= v114)
    {
      memset(v70, 255, 8 * v114);
      v50 = (uint64_t)(v49 - 5);
LABEL_74:
      *(_DWORD *)(v50 + 20) = 0;
      *(_DWORD *)(v50 + 24) = 0;
      goto LABEL_75;
    }
    free(v70);
    v123 = *v49 - v49[1];
    v124 = 1 << (33 - __clz(v123 - 1));
    *v49 = 0;
    v49[1] = 0;
    if (v123 <= 0x10)
      v125 = 32;
    else
      v125 = v124;
    *(v49 - 1) = v125;
    v126 = malloc_type_malloc(8 * v125, 0x4065EBACuLL);
    if (v126)
    {
      *(_QWORD *)(v49 - 3) = v126;
      memset(v126, 255, 8 * *(v49 - 1));
      v50 = (uint64_t)(v49 - 5);
LABEL_75:
      if (*(_BYTE *)(v18 + 96 * v13 + 4))
      {
        v71 = v18 + 96 * v13;
        *(_DWORD *)(v71 + 16) = 0;
        v72 = (unsigned int *)(v71 + 16);
        if (v72[1])
        {
          v73 = 0;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v72 - 2), v50, 1uLL, 8);
          v73 = *v72;
        }
        *(_QWORD *)(*((_QWORD *)v72 - 1) + 8 * v73) = v11;
        ++*v72;
        *v47 = v51;
        goto LABEL_200;
      }
LABEL_78:
      v74 = v18 + 96 * v13;
      v77 = *(_DWORD *)(v74 + 16);
      v76 = (_DWORD *)(v74 + 16);
      v75 = v77;
      v78 = (uint64_t **)(v76 - 2);
      if (v77)
      {
        v79 = *(_DWORD *)(v9 + 32 * v7 + 16);
        v145 = v51;
        if ((v79 - 81) > 4)
        {
          v82 = 0;
        }
        else
        {
          if (*v11)
            v80 = (*v11 >> 8) & 0xFFF;
          else
            v80 = 0;
          if ((v80 & 0x200) != 0)
            v80 &= 0xCFFu;
          v85 = (v80 & 0xEFF) == 0;
          v81 = ((v80 & 0xEFFu) - 129) >> 1;
          if (v85)
            v82 = 0;
          else
            v82 = v81;
        }
        v83 = *v78;
        v84 = **v78;
        v85 = v79 == 81 || *(_BYTE *)(v18 + 96 * v13 + 88) == 0;
        v86 = v85;
        if (v79 == *(_DWORD *)(v84 + 16) && (v86 & 1) != 0)
        {
          v143 = (uint64_t *)(v76 - 2);
          if (!*(_BYTE *)(v18 + 96 * v13 + 88))
          {
            v103 = 8 * v75;
            while (1)
            {
              v104 = (_DWORD *)*v83;
              if ((*(_DWORD *)(*v83 + 16) - 81) > 4)
              {
                v106 = 0;
              }
              else
              {
                if (*v104)
                  v105 = (*v104 >> 8) & 0xFFF;
                else
                  v105 = 0;
                if ((v105 & 0x200) != 0)
                  v105 &= 0xCFFu;
                v106 = v105 & 0xFFFFFEFF;
                if (v106)
                  v106 = (v106 - 129) >> 1;
              }
              if ((v106 ^ v82) <= 1)
                break;
              ++v83;
              v103 -= 8;
              if (!v103)
              {
                v118 = *v47;
                if ((_DWORD)v118)
                {
                  v149 = v11;
                  v119 = sub_1C49F29DC(a1 + 1248, (uint64_t *)&v149);
                  v120 = *(unsigned int *)v119;
                  if ((_DWORD)v120)
                    LODWORD(v118) = sub_1C49F2C20((uint64_t *)(a1 + 1208), v118, v120);
                  *(_DWORD *)v119 = v118;
                  if (v145)
                    sub_1C49F2C20((uint64_t *)(a1 + 1208), v145, *v47);
                }
                else if (v145)
                {
                  *v47 = v145;
                }
                v121 = *v76;
                if (v121 >= *(_DWORD *)(v18 + 96 * v13 + 20))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v143, (uint64_t)v148, v121 + 1, 8);
                  LODWORD(v121) = *v76;
                }
                *(_QWORD *)(*v143 + 8 * v121) = v11;
                goto LABEL_199;
              }
            }
            sub_1C49F20C4(a1, (uint64_t)v104);
            *v83 = (uint64_t)v11;
            if (v145)
              *v47 = v145;
            goto LABEL_200;
          }
          v147 = v47;
          v87 = &v83[v75];
          v88 = 8 * v75 - 8;
          while (1)
          {
            v89 = (_DWORD *)*v83;
            if ((*(_DWORD *)(*v83 + 16) - 81) > 4)
            {
              v91 = 0;
            }
            else
            {
              if (*v89)
                v90 = (*v89 >> 8) & 0xFFF;
              else
                v90 = 0;
              if ((v90 & 0x200) != 0)
                v90 &= 0xCFFu;
              v91 = v90 & 0xFFFFFEFF;
              if (v91)
                v91 = (v91 - 129) >> 1;
            }
            if ((v91 ^ v82) <= 1)
              break;
            ++v83;
            v88 -= 8;
            if (v83 == v87)
              goto LABEL_169;
          }
          sub_1C49F20C4(a1, (uint64_t)v89);
          if (v83 + 1 != v87)
          {
            v107 = 1;
            v108 = v83;
            do
            {
              v109 = (_DWORD *)v83[v107];
              if ((v109[4] - 81) > 4)
              {
                v111 = 0;
              }
              else
              {
                if (*v109)
                  v110 = (*v109 >> 8) & 0xFFF;
                else
                  v110 = 0;
                if ((v110 & 0x200) != 0)
                  v110 &= 0xCFFu;
                v111 = v110 & 0xFFFFFEFF;
                if (v111)
                  v111 = (v111 - 129) >> 1;
              }
              if ((v111 ^ v82) > 1)
                *v108++ = (uint64_t)v109;
              else
                sub_1C49F20C4(a1, (uint64_t)v109);
              ++v107;
              v88 -= 8;
            }
            while (v88);
          }
LABEL_169:
          if (v145)
            *v147 = v145;
          v112 = *v143;
          *v76 = 0;
          if (*(_DWORD *)(v18 + 96 * v13 + 20))
          {
            v113 = 0;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v143, (uint64_t)v148, 1uLL, 8);
            v112 = *v143;
            v113 = *v76;
          }
          *(_QWORD *)(v112 + 8 * v113) = v11;
          goto LABEL_199;
        }
        v94 = 8 * v75;
        do
        {
          v95 = *v83++;
          sub_1C49F2158(a1, v95, (uint64_t)v11);
          v94 -= 8;
        }
        while (v94);
        v96 = sub_1C49F20C4(a1, v84);
        *v47 = v96;
        if (v145)
          sub_1C49F2C20((uint64_t *)(a1 + 1208), v145, v96);
        *v76 = 0;
        if (*(_DWORD *)(v18 + 96 * v13 + 20))
        {
          v92 = 0;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v76 - 2), (uint64_t)v148, 1uLL, 8);
          v92 = *v76;
        }
        v93 = (uint64_t *)*((_QWORD *)v76 - 1);
      }
      else
      {
        if (*(_DWORD *)(v18 + 96 * v13 + 20))
        {
          v92 = 0;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v76 - 2), v50, 1uLL, 8);
          v92 = *v76;
        }
        v93 = *v78;
      }
      v93[v92] = (uint64_t)v11;
LABEL_199:
      ++*v76;
LABEL_200:
      v122 = v18 + 96 * v13;
      *(_BYTE *)(v122 + 4) = 0;
      *(_BYTE *)(v122 + 88) = 0;
      return;
    }
LABEL_234:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v34 = *(_QWORD *)(v10 + 8);
  v33 = v10 + 8;
  v35 = sub_1C4AD4D04(v34);
  v36 = (unsigned __int8 *)sub_1C49EF04C(a1 + 32, a2);
  v37 = v36;
  if (v12 == 6)
  {
    v38 = *((unsigned int *)v36 + 4);
    if ((_DWORD)v38)
    {
      v39 = (unsigned int *)*((_QWORD *)v36 + 1);
      v40 = 4 * v38;
      do
      {
        v41 = *v39;
        v149 = v11;
        v42 = sub_1C49F29DC(a1 + 1248, (uint64_t *)&v149);
        v43 = *(unsigned int *)v42;
        if ((_DWORD)v43)
          LODWORD(v41) = sub_1C49F2C20((uint64_t *)(a1 + 1208), v41, v43);
        *(_DWORD *)v42 = v41;
        ++v39;
        v40 -= 4;
      }
      while (v40);
      v44 = (int *)*((_QWORD *)v37 + 1);
      v45 = *v44;
      *((_DWORD *)v37 + 4) = 0;
      if (*((_DWORD *)v37 + 5))
      {
        v46 = 0;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v37 + 8), (uint64_t)(v37 + 24), 1uLL, 4);
        v44 = (int *)*((_QWORD *)v37 + 1);
        v46 = *((unsigned int *)v37 + 4);
      }
      v44[v46] = v45;
      ++*((_DWORD *)v37 + 4);
    }
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(v37 + 32), (uint64_t)v11);
    *(_WORD *)v37 = 1;
    v37[96] = 0;
    goto LABEL_221;
  }
  v52 = *v36;
  *v36 = 0;
  v36[96] = 0;
  v36[1] = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v33 + 16) + 16) & 0x2001C00) == 33555456;
  LODWORD(v53) = *((_DWORD *)v36 + 13);
  if ((_DWORD)v53 == *((_DWORD *)v36 + 14))
    goto LABEL_211;
  v55 = (char *)*((_QWORD *)v36 + 4);
  v54 = (char *)*((_QWORD *)v36 + 5);
  if (v54 == v55)
    v53 = v53;
  else
    v53 = *((unsigned int *)v37 + 12);
  v56 = (uint64_t *)*((_QWORD *)v37 + 5);
  if ((_DWORD)v53)
  {
    v57 = 0;
    while (*(_QWORD *)&v54[v57] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v57 += 8;
      if (8 * v53 == v57)
        goto LABEL_127;
    }
    v56 = (uint64_t *)&v54[v57];
  }
  v97 = &v54[8 * v53];
  if (v56 != (uint64_t *)v97)
  {
    v98 = *v56;
LABEL_122:
    sub_1C49F2158(a1, v98, (uint64_t)v11);
    v99 = (unint64_t *)(v56 + 1);
    while (v99 != (unint64_t *)v97)
    {
      v100 = *v99++;
      v98 = v100;
      if (v100 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v56 = (uint64_t *)(v99 - 1);
        goto LABEL_122;
      }
    }
    v55 = (char *)*((_QWORD *)v37 + 4);
    v54 = (char *)*((_QWORD *)v37 + 5);
  }
LABEL_127:
  if (v54 != v55)
  {
    v116 = *((unsigned int *)v37 + 12);
    if (v116 >= 0x21 && 4 * (*((_DWORD *)v37 + 13) - *((_DWORD *)v37 + 14)) < v116)
    {
      free(v54);
      v127 = *((_DWORD *)v37 + 13) - *((_DWORD *)v37 + 14);
      v128 = 1 << (33 - __clz(v127 - 1));
      *((_DWORD *)v37 + 13) = 0;
      *((_DWORD *)v37 + 14) = 0;
      if (v127 <= 0x10)
        v129 = 32;
      else
        v129 = v128;
      *((_DWORD *)v37 + 12) = v129;
      v130 = malloc_type_malloc(8 * v129, 0x4065EBACuLL);
      if (!v130)
        goto LABEL_234;
      *((_QWORD *)v37 + 5) = v130;
      memset(v130, 255, 8 * *((unsigned int *)v37 + 12));
      if (v52)
        goto LABEL_129;
LABEL_211:
      v131 = (unsigned int *)*((_QWORD *)v37 + 1);
      v132 = *((unsigned int *)v37 + 4);
      if ((_DWORD)v132)
      {
        v133 = 4 * v132;
        do
        {
          v134 = *v131;
          v149 = v11;
          v135 = sub_1C49F29DC(a1 + 1248, (uint64_t *)&v149);
          v136 = *(unsigned int *)v135;
          if ((_DWORD)v136)
            LODWORD(v134) = sub_1C49F2C20((uint64_t *)(a1 + 1208), v134, v136);
          *(_DWORD *)v135 = v134;
          ++v131;
          v133 -= 4;
        }
        while (v133);
      }
      v137 = sub_1C49F20C4(a1, (uint64_t)v11);
      *((_DWORD *)v37 + 4) = 0;
      if (*((_DWORD *)v37 + 5))
      {
        v138 = 0;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v37 + 8), (uint64_t)(v37 + 24), 1uLL, 4);
        v138 = *((unsigned int *)v37 + 4);
      }
      *(_DWORD *)(*((_QWORD *)v37 + 1) + 4 * v138) = v137;
      goto LABEL_220;
    }
    memset(v54, 255, 8 * v116);
  }
  *((_DWORD *)v37 + 13) = 0;
  *((_DWORD *)v37 + 14) = 0;
  if (!v52)
    goto LABEL_211;
LABEL_129:
  v101 = sub_1C49F20C4(a1, (uint64_t)v11);
  *((_DWORD *)v37 + 4) = 0;
  if (*((_DWORD *)v37 + 5))
  {
    v102 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v37 + 8), (uint64_t)(v37 + 24), 1uLL, 4);
    v102 = *((unsigned int *)v37 + 4);
  }
  *(_DWORD *)(*((_QWORD *)v37 + 1) + 4 * v102) = v101;
LABEL_220:
  ++*((_DWORD *)v37 + 4);
LABEL_221:
  if (v35 == 5)
  {
    v139 = 63;
  }
  else
  {
    if (v35 >= 6)
      abort();
    v139 = 1 << v35;
  }
  if ((*(_QWORD *)(a1 + 56) & v139) != 0)
  {
    v140 = *(unsigned int *)(a1 + 48);
    v149 = v11;
    v141 = sub_1C49F29DC(a1 + 1248, (uint64_t *)&v149);
    v142 = *(unsigned int *)v141;
    if ((_DWORD)v142)
      LODWORD(v140) = sub_1C49F2C20((uint64_t *)(a1 + 1208), v140, v142);
    *(_DWORD *)v141 = v140;
    sub_1C49F2EA8(a1 + 48, v35);
  }
}

uint64_t sub_1C49F1E00(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v4)
  {
    v5 = result;
    v6 = (uint64_t *)(v3 + 8 * v4);
    result = *(_QWORD *)(result + 1248);
    LODWORD(v7) = *(_DWORD *)(v5 + 1264);
    v8 = 8 * v4 - 8;
    v9 = *(uint64_t **)(a2 + 8);
    while (1)
    {
      v10 = *v9;
      v22 = 0;
      if (sub_1C49F21C0(result, v7, v10, &v22))
      {
        v11 = v22;
        result = *(_QWORD *)(v5 + 1248);
        v7 = *(unsigned int *)(v5 + 1264);
      }
      else
      {
        result = *(_QWORD *)(v5 + 1248);
        v7 = *(unsigned int *)(v5 + 1264);
        v11 = result + 16 * v7;
      }
      if (v11 != result + 16 * v7)
      {
        v12 = *(_DWORD *)(v11 + 12);
        if (v12)
        {
          v13 = *(_DWORD *)(v5 + 1360);
          if (v13 > v12 && ((*(_QWORD *)(*(_QWORD *)(v5 + 1296) + 8 * (v12 >> 6)) >> v12) & 1) != 0)
            break;
        }
      }
      ++v9;
      v8 -= 8;
      if (v9 == v6)
        goto LABEL_13;
    }
    if (v9 + 1 == v6)
    {
      v6 = v9;
    }
    else
    {
      v15 = 1;
      v6 = v9;
      do
      {
        v16 = v9[v15];
        v22 = 0;
        result = sub_1C49F21C0(*(_QWORD *)(v5 + 1248), *(_DWORD *)(v5 + 1264), v16, &v22);
        if ((_DWORD)result)
        {
          v17 = v22;
          v18 = *(_QWORD *)(v5 + 1248);
          v19 = v7;
        }
        else
        {
          v18 = *(_QWORD *)(v5 + 1248);
          v19 = v7;
          v17 = v18 + 16 * v7;
        }
        if (v17 == v18 + 16 * v19
          || ((v20 = *(_DWORD *)(v17 + 12)) != 0 ? (v21 = v13 > v20) : (v21 = 0),
              !v21 || ((*(_QWORD *)(*(_QWORD *)(v5 + 1296) + 8 * (v20 >> 6)) >> v20) & 1) == 0))
        {
          *v6++ = v9[v15];
        }
        ++v15;
        v8 -= 8;
      }
      while (v8);
      v3 = *(_QWORD *)(a2 + 8);
    }
  }
  else
  {
    v6 = *(uint64_t **)(a2 + 8);
  }
LABEL_13:
  v14 = ((unint64_t)v6 - v3) >> 3;
  *(_DWORD *)(a2 + 16) = v14;
  if (!(_DWORD)v14)
    *(_BYTE *)a2 = 0;
  return result;
}

uint64_t sub_1C49F1FA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[8];

  v23 = a5;
  v24 = a4;
  v22 = a2;
  result = sub_1C4AD4D04(a3);
  v21 = (_DWORD)result == 4;
  v12 = (a5 & 0xFF00000000) != 0 && (_DWORD)a5 != 1;
  v20 = v12;
  v13 = *(uint64_t **)(a6 + 8);
  v14 = *(unsigned int *)(a6 + 16);
  v25[0] = a1;
  v25[1] = &v22;
  v25[2] = a3;
  v25[3] = &v24;
  v25[4] = &v23;
  v25[5] = &v21;
  v25[6] = &v20;
  v25[7] = a6;
  if (!(_DWORD)v14)
    goto LABEL_18;
  v15 = &v13[v14];
  v16 = 8 * v14 - 8;
  v17 = v13;
  do
  {
    v18 = *v17++;
    result = sub_1C49F2254((uint64_t)v25, v18);
    if ((_DWORD)result)
      break;
    v16 -= 8;
    v13 = v17;
  }
  while (v17 != v15);
  if (v17 == v15)
  {
LABEL_18:
    v15 = v13;
  }
  else
  {
    v19 = 1;
    v15 = v13;
    do
    {
      result = sub_1C49F2254((uint64_t)v25, v13[v19]);
      if ((result & 1) == 0)
        *v15++ = v13[v19];
      ++v19;
      v16 -= 8;
    }
    while (v16);
  }
  *(_DWORD *)(a6 + 16) = ((unint64_t)v15 - *(_QWORD *)(a6 + 8)) >> 3;
  return result;
}

uint64_t sub_1C49F20C4(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;

  v8 = a2;
  v3 = sub_1C49F29DC(a1 + 1248, &v8);
  v4 = *((unsigned int *)v3 + 1);
  if (!(_DWORD)v4)
  {
    v5 = v3;
    v4 = *(unsigned int *)(a1 + 1216);
    v6 = v4;
    if (v4 >= *(_DWORD *)(a1 + 1220))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 1208, a1 + 1224, v4 + 1, 8);
      v6 = *(unsigned int *)(a1 + 1216);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 1208) + 8 * v6) = v4;
    ++*(_DWORD *)(a1 + 1216);
    *((_DWORD *)v5 + 1) = v4;
  }
  return v4;
}

unsigned int *sub_1C49F2158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int *result;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = sub_1C49F20C4(a1, a2);
  v9 = a3;
  result = (unsigned int *)sub_1C49F29DC(a1 + 1248, &v9);
  v7 = result;
  v8 = *result;
  if ((_DWORD)v8)
  {
    result = (unsigned int *)sub_1C49F2C20((uint64_t *)(a1 + 1208), v5, v8);
    LODWORD(v5) = (_DWORD)result;
  }
  *v7 = v5;
  return result;
}

uint64_t sub_1C49F21C0(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

uint64_t sub_1C49F2254(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _DWORD *v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t result;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unsigned int v83;

  v3 = *(_QWORD *)a1;
  v80 = **(_QWORD **)(a1 + 8);
  v81 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = **(_QWORD **)(a1 + 24);
  v6 = **(_DWORD **)(a1 + 32);
  v73 = **(unsigned __int8 **)(a1 + 40);
  v7 = *(unsigned __int8 *)(v3 + 1849);
  v8 = **(unsigned __int8 **)(a1 + 48);
  v9 = **(unsigned __int8 **)(a1 + 56);
  v10 = *(_QWORD *)(v4 + 32);
  v11 = v10 + 32 * v5;
  if ((v5 & 0xFF00000000) == 0 || v10 == 0)
  {
    if ((v5 & 0xFF00000000) == 0)
    {
      sub_1C49F2974(v3, a2, v4);
      goto LABEL_15;
    }
  }
  else
  {
    v13 = *(_QWORD *)(v3 + 1408);
    v14 = *(unsigned __int8 *)(v13 + 356);
    if (*(_BYTE *)(v13 + 356))
      v15 = sub_1C49E1120(*(_DWORD *)(v11 + 4), *(_DWORD *)(a2 + 4), *(_QWORD *)(*(_QWORD *)(v3 + 1416) + 8), *(_QWORD *)(*(_QWORD *)(v3 + 1416) + 56));
    else
      v15 = 1;
    if (v9)
      v15 = 0;
    if (!sub_1C49F2828(v15, v6, v4, v5, v14 != 0))
      return 0;
  }
  sub_1C49F2158(v3, a2, v11);
LABEL_15:
  if (*(_BYTE *)(v3 + 1841))
  {
    v16 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 16);
    v17 = sub_1C49EE844(v3, v80);
    v18 = sub_1C49EE8D4(v17);
    if ((*(_BYTE *)(v16 + 16) & 2) != 0)
    {
      v19 = v18;
      v20 = sub_1C477672C(v18 + 64, a2);
      v21 = *(_QWORD *)(v19 + 72);
      v22 = 80;
      if (v21 == *(_QWORD *)(v19 + 64))
        v22 = 84;
      v23 = (_QWORD *)(v21 + 8 * *(unsigned int *)(v19 + v22));
      if (v20 != v23)
      {
        *v20 = -2;
        ++*(_DWORD *)(v19 + 88);
      }
      *(_BYTE *)(v3 + 64) = v20 == v23;
      v24 = sub_1C477672C(v19 + 128, a2);
      v25 = *(_QWORD *)(v19 + 136);
      v26 = 144;
      if (v25 == *(_QWORD *)(v19 + 128))
        v26 = 148;
      if (v24 != (_QWORD *)(v25 + 8 * *(unsigned int *)(v19 + v26)))
      {
        *v24 = -2;
        ++*(_DWORD *)(v19 + 152);
      }
    }
  }
  v72 = v8;
  v27 = *((unsigned int *)sub_1C49F29DC(v3 + 1248, &v81) + 1);
  if (v7)
  {
    v28 = *(_QWORD *)(a2 + 8);
    v74 = *(unsigned int *)(v28 + 40);
    if ((_DWORD)v74)
    {
      v29 = 0;
      v78 = (uint64_t *)(v3 + 1208);
      v79 = *(_QWORD *)(v28 + 24);
      v76 = (uint64_t *)(v3 + 16);
      v77 = v3 + 32;
      do
      {
        v30 = *(_QWORD *)(v28 + 32) + 32 * v29;
        v31 = sub_1C4AD4FB8(v28, v29, (_QWORD *)(*(_QWORD *)(v3 + 1416) + 8));
        if (v31 == 6)
        {
          if (v73)
          {
            if (*(_DWORD *)(v3 + 40))
            {
              sub_1C49E178C(&v82, (_QWORD *)v28, v29, *(_QWORD *)(v3 + 1416), 1, 0);
              v52 = v82;
              v53 = v83;
              if (v83 != HIDWORD(v82))
              {
                do
                {
                  v54 = sub_1C49EF04C(v77, v52);
                  v55 = sub_1C477672C(v54 + 32, v30);
                  v56 = *(_QWORD *)(v54 + 40);
                  if (v56 == *(_QWORD *)(v54 + 32))
                    v57 = (unsigned int *)(v54 + 52);
                  else
                    v57 = (unsigned int *)(v54 + 48);
                  if (v55 != (_QWORD *)(v56 + 8 * *v57))
                  {
                    *v55 = -2;
                    ++*(_DWORD *)(v54 + 56);
                    v58 = sub_1C49F20C4(v3, v30);
                    sub_1C49F2C20(v78, v27, v58);
                    if (v79 == v80)
                      *(_DWORD *)(v54 + 16) = 0;
                  }
                  v59 = (v52 & 0xFFFFFFFF00000000) + 0x100000000;
                  v52 = v59 & 0xFFFFFFFF00000000 | v52;
                }
                while (v53 != HIDWORD(v59));
              }
            }
          }
        }
        else if (v31 == 4 && *(_DWORD *)(v3 + 24))
        {
          sub_1C49E178C(&v82, (_QWORD *)v28, v29, *(_QWORD *)(v3 + 1416), 1, 0);
          v32 = v82;
          v33 = v83;
          while (1)
          {
            v34 = HIDWORD(v32);
            if ((_DWORD)v33 == HIDWORD(v32))
              break;
            v35 = (_DWORD *)(*(_QWORD *)(v28 + 32) + 32 * v29);
            if ((v35[4] - 81) > 4)
            {
              v37 = 0;
            }
            else
            {
              if (*v35)
                v36 = (*v35 << 14) & 0x80000000;
              else
                LOBYTE(v36) = 0;
              v37 = v36 | v35[1];
            }
            v38 = sub_1C49C802C((uint64_t)v35);
            if ((v38 & 0xFF00000000) == 0 || ((1 << (BYTE4(v32) - v37)) & v38) != 0)
            {
              v40 = v33;
              v41 = v28;
              v42 = v3;
              v43 = v27;
              v44 = v42;
              if (v34 >= *(unsigned int *)(v42 + 24))
                sub_1C49F0ED4((uint64_t)v76, (HIDWORD(v32) + 1));
              v75 = *v76;
              v45 = *v76 + 96 * v34;
              v46 = v45 + 24;
              v47 = sub_1C477672C(v45 + 24, v30);
              v48 = *(_QWORD *)(v45 + 32);
              if (v48 == *(_QWORD *)(v45 + 24))
                v49 = (unsigned int *)(v45 + 44);
              else
                v49 = (unsigned int *)(v45 + 40);
              v27 = v43;
              v3 = v44;
              v28 = v41;
              v33 = v40;
              if (v47 != (_QWORD *)(v48 + 8 * *v49))
              {
                *v47 = -2;
                ++*(_DWORD *)(v46 + 24);
                v50 = sub_1C49F20C4(v3, v30);
                sub_1C49F2C20(v78, v27, v50);
                if (v79 == v80)
                {
                  v51 = v75 + 96 * v34;
                  *(_DWORD *)(v51 + 16) = 0;
                  *(_DWORD *)v51 = 0;
                  *(_BYTE *)(v51 + 4) = 1;
                }
              }
            }
            v32 = (v32 & 0xFFFFFFFF00000000) + 0x100000000;
          }
        }
        ++v29;
      }
      while (v29 != v74);
    }
  }
  if (v72)
    return 1;
  v61 = (uint64_t *)(v3 + 1296);
  if (*(_DWORD *)(v3 + 1360) <= v27)
  {
    v63 = v27 + 1;
    v64 = *(_DWORD *)(v3 + 1360) & 0x3F;
    v65 = *(unsigned int *)(v3 + 1304);
    if (v64)
    {
      v71 = *(_QWORD *)(v3 + 1296) + 8 * v65;
      *(_QWORD *)(v71 - 8) &= ~(-1 << v64);
    }
    v66 = v65;
    *(_DWORD *)(v3 + 1360) = v63;
    v67 = v27 + 64;
    if ((_DWORD)v65 != (v27 + 64) >> 6)
    {
      v68 = v67 >> 6;
      if (v65 > v68)
      {
        *(_DWORD *)(v3 + 1304) = v68;
        v66 = v67 >> 6;
      }
      else
      {
        v69 = v65;
        if (v68 > *(_DWORD *)(v3 + 1308))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 1296, v3 + 1312, v68, 8);
          v69 = *(unsigned int *)(v3 + 1304);
          v66 = *(_DWORD *)(v3 + 1304);
        }
        if (v68 != v65)
          bzero((void *)(*v61 + 8 * v69), 8 * (v68 - v65));
        v66 += v68 - v65;
        *(_DWORD *)(v3 + 1304) = v66;
        v63 = *(_DWORD *)(v3 + 1360);
      }
    }
    v62 = *v61;
    v70 = v63 & 0x3F;
    if (v70)
      *(_QWORD *)(v62 + 8 * v66 - 8) &= ~(-1 << v70);
  }
  else
  {
    v62 = *v61;
  }
  result = 1;
  *(_QWORD *)(v62 + ((v27 >> 3) & 0x1FFFFFF8)) |= 1 << v27;
  return result;
}

BOOL sub_1C49F2828(char a1, int a2, uint64_t a3, unsigned __int16 a4, int a5)
{
  int v6;
  uint64_t v7;
  _BOOL8 v8;
  char *v10;
  uint64_t v11;
  char *v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    if (a2 != 3 || (a1 & 1) != 0)
      return 1;
    v6 = **(unsigned __int16 **)(a3 + 16);
    v7 = sub_1C4C915C4(v6);
    if ((v7 & 0xFF00000000) == 0)
      llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
    return (_DWORD)v7 == 147 && !*(_BYTE *)(*(_QWORD *)(a3 + 32) + 32 * sub_1C4C2FD5C(v6));
  }
  if ((a1 & 1) != 0)
    return 1;
  if (a2 != 1 || !sub_1C49EE5AC(*(unsigned __int16 **)(a3 + 16)))
    return 0;
  sub_1C49EE62C((uint64_t)&v13, *(unsigned __int16 **)(a3 + 16));
  v10 = v13;
  if (v14)
  {
    v11 = 2 * v14;
    v10 = v13;
    while (*(unsigned __int16 *)v10 != a4)
    {
      v10 += 2;
      v11 -= 2;
      if (!v11)
      {
        v10 = &v13[2 * v14];
        break;
      }
    }
  }
  v8 = v14 == (v10 - v13) >> 1;
  if (v13 != (char *)v15)
    free(v13);
  return v8;
}

unsigned int *sub_1C49F2974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int *result;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = sub_1C49F20C4(a1, a2);
  v9 = a3;
  result = (unsigned int *)sub_1C49F2BBC(a1 + 1224, &v9);
  v7 = result;
  v8 = *result;
  if ((_DWORD)v8)
  {
    result = (unsigned int *)sub_1C49F2C20((uint64_t *)(a1 + 1208), v5, v8);
    LODWORD(v5) = (_DWORD)result;
  }
  *v7 = v5;
  return result;
}

uint64_t *sub_1C49F29DC(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;

  v24 = 0;
  v4 = sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v24);
  v5 = v24;
  if ((v4 & 1) != 0)
    return v5 + 1;
  v25 = v24;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 16);
  if (4 * v6 + 4 >= (3 * v7))
  {
    v8 = 2 * v7;
    goto LABEL_9;
  }
  v8 = *(_DWORD *)(a1 + 16);
  if ((int)v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    v10 = *(_QWORD *)a1;
    v11 = (v8 - 1) | ((unint64_t)(v8 - 1) >> 1);
    v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
    v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
    if ((v13 + 1) > 0x40)
      v14 = v13 + 1;
    else
      v14 = 64;
    *(_DWORD *)(a1 + 16) = v14;
    v15 = operator new(16 * v14, (std::align_val_t)8uLL);
    *(_QWORD *)a1 = v15;
    if (v10)
    {
      *(_QWORD *)(a1 + 8) = 0;
      v16 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v16)
      {
        v17 = 16 * v16;
        do
        {
          *v15 = -4096;
          v15 += 2;
          v17 -= 16;
        }
        while (v17);
      }
      if ((_DWORD)v7)
      {
        v18 = (uint64_t *)(v10 + 8);
        v19 = 16 * v7;
        do
        {
          v20 = *(v18 - 1);
          if ((v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v26 = 0;
            sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v20, &v26);
            v21 = v26;
            *v26 = v20;
            v21[1] = *v18;
            ++*(_DWORD *)(a1 + 8);
          }
          v18 += 2;
          v19 -= 16;
        }
        while (v19);
      }
      MEMORY[0x1CAA32FB4](v10, 8);
      v15 = *(_QWORD **)a1;
      LODWORD(v22) = *(_DWORD *)(a1 + 16);
    }
    else
    {
      *(_QWORD *)(a1 + 8) = 0;
      v22 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v22)
      {
        v23 = 0;
        do
        {
          v15[v23] = -4096;
          v23 += 2;
        }
        while (2 * v22 != v23);
      }
    }
    sub_1C49F21C0((uint64_t)v15, v22, *a2, &v25);
    v6 = *(_DWORD *)(a1 + 8);
    v5 = v25;
  }
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (*v5 != -4096)
    --*(_DWORD *)(a1 + 12);
  *v5 = *a2;
  v5[1] = 0;
  return v5 + 1;
}

_QWORD *sub_1C49F2BBC(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C49F2CB0(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5 + 1;
}

uint64_t sub_1C49F2C20(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  int v15;

  v5 = sub_1C49F2E68(a1, a2);
  v6 = sub_1C49F2E68(a1, a3);
  result = v5;
  if ((_DWORD)v5 != v6)
  {
    v8 = *a1;
    v9 = *(_DWORD *)(*a1 + 8 * v5 + 4);
    v10 = *(_DWORD *)(*a1 + 8 * v6 + 4);
    if (v9 >= v10)
      result = v5;
    else
      result = v6;
    if (v9 < v10)
      v6 = v5;
    v11 = (_DWORD *)(v8 + 8 * v6);
    *v11 = result;
    v12 = v8 + 8 * result;
    v15 = *(_DWORD *)(v12 + 4);
    v13 = (_DWORD *)(v12 + 4);
    v14 = v15;
    if (v15 == v11[1])
      *v13 = v14 + 1;
  }
  return result;
}

_QWORD *sub_1C49F2CB0(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;

  v23 = a3;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v7 = 2 * v6;
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
  }
  v9 = *(_QWORD *)a1;
  v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40)
    v13 = v12 + 1;
  else
    v13 = 64;
  *(_DWORD *)(a1 + 16) = v13;
  v14 = operator new(16 * v13, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = v14;
  if (v9)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v15 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v15)
    {
      v16 = 16 * v15;
      do
      {
        *v14 = -4096;
        v14 += 2;
        v16 -= 16;
      }
      while (v16);
    }
    if ((_DWORD)v6)
    {
      v17 = (uint64_t *)(v9 + 8);
      v18 = 16 * v6;
      do
      {
        v19 = *(v17 - 1);
        if ((v19 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v24 = 0;
          sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v19, &v24);
          v20 = v24;
          *v24 = v19;
          v20[1] = *v17;
          ++*(_DWORD *)(a1 + 8);
        }
        v17 += 2;
        v18 -= 16;
      }
      while (v18);
    }
    MEMORY[0x1CAA32FB4](v9, 8);
    v14 = *(_QWORD **)a1;
    LODWORD(v21) = *(_DWORD *)(a1 + 16);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v21 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v21)
    {
      v22 = 0;
      do
      {
        v14[v22] = -4096;
        v22 += 2;
      }
      while (2 * v21 != v22);
    }
  }
  sub_1C49F21C0((uint64_t)v14, v21, *a2, &v23);
  v5 = *(_DWORD *)(a1 + 8);
  a3 = v23;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C49F2E68(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;

  v2 = a2;
  v3 = (_DWORD *)(*a1 + 8 * a2);
  if (*v3 != (_DWORD)a2)
  {
    v2 = sub_1C49F2E68();
    *v3 = v2;
  }
  return v2;
}

uint64_t sub_1C49F2EA8(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v2 = result;
  if (a2 == 4)
  {
    v4 = result + 8;
    v5 = 0;
    result = sub_1C49F2F90((uint64_t)&v4);
    v3 = *(_QWORD *)(v2 + 8);
  }
  else
  {
    if (a2 >= 6)
      abort();
    v3 = *(_QWORD *)(result + 8) & ~(1 << a2);
    *(_QWORD *)(result + 8) = v3;
  }
  if ((v3 & 0x3F) == 0)
    *(_DWORD *)v2 = 0;
  return result;
}

uint64_t sub_1C49F2F1C(uint64_t result)
{
  int v1;
  _QWORD *v2;
  unint64_t v3;
  char v4;
  char v5;

  v1 = *(_DWORD *)(result + 8);
  v2 = *(_QWORD **)result;
  if (!v1)
  {
    v5 = -6;
    goto LABEL_7;
  }
  v3 = (64 - v1);
  v4 = 6;
  if (v3 < 6)
    v4 = 64 - v1;
  *v2++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v1 - v4)) & (-1 << v1);
  *(_QWORD *)result = v2;
  if (v3 <= 5)
  {
    v5 = v4 - 6;
LABEL_7:
    *(_QWORD *)result = v2;
    *v2 |= 0xFFFFFFFFFFFFFFFFLL >> v5;
  }
  return result;
}

uint64_t sub_1C49F2F90(uint64_t result)
{
  int v1;
  _QWORD *v2;
  unint64_t v3;
  char v4;
  char v5;

  v1 = *(_DWORD *)(result + 8);
  v2 = *(_QWORD **)result;
  if (!v1)
  {
    v5 = -6;
    goto LABEL_7;
  }
  v3 = (64 - v1);
  v4 = 6;
  if (v3 < 6)
    v4 = 64 - v1;
  *v2++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v1 - v4)) & (-1 << v1));
  *(_QWORD *)result = v2;
  if (v3 <= 5)
  {
    v5 = v4 - 6;
LABEL_7:
    *(_QWORD *)result = v2;
    *v2 &= ~(0xFFFFFFFFFFFFFFFFLL >> v5);
  }
  return result;
}

void sub_1C49F3004(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  int *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = v5 + 104 * v2;
    v7 = a1 + 1224;
    v8 = (uint64_t *)(a1 + 1208);
    v27 = v6;
    do
    {
      if (*(_DWORD *)(v5 + 52) == *(_DWORD *)(v5 + 56))
        goto LABEL_19;
      v9 = *(_QWORD *)(v5 + 40);
      v10 = 48;
      if (v9 == *(_QWORD *)(v5 + 32))
        v10 = 52;
      v11 = *(unsigned int *)(v5 + v10);
      if ((_DWORD)v11)
      {
        v12 = 8 * v11;
        v13 = *(uint64_t **)(v5 + 40);
        while ((unint64_t)*v13 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v13;
          v12 -= 8;
          if (!v12)
            goto LABEL_18;
        }
      }
      else
      {
        v13 = *(uint64_t **)(v5 + 40);
      }
      v14 = (_QWORD *)(v9 + 8 * v11);
      if (v13 != v14)
      {
        v15 = *v13;
LABEL_14:
        sub_1C49F2974(a1, v15, a2);
        v16 = (unint64_t *)(v13 + 1);
        while (v16 != v14)
        {
          v17 = *v16++;
          v15 = v17;
          if (v17 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v13 = (uint64_t *)(v16 - 1);
            goto LABEL_14;
          }
        }
      }
LABEL_18:
      if (!*(_BYTE *)v5)
      {
LABEL_19:
        v18 = *(unsigned int *)(v5 + 16);
        if ((_DWORD)v18)
        {
          v19 = *(unsigned int **)(v5 + 8);
          v20 = 4 * v18;
          do
          {
            v21 = *v19;
            v28 = a2;
            v22 = sub_1C49F2BBC(v7, &v28);
            v23 = *v22;
            if ((_DWORD)v23)
              LODWORD(v21) = sub_1C49F2C20(v8, v21, v23);
            *v22 = v21;
            ++v19;
            v20 -= 4;
          }
          while (v20);
          v24 = *(int **)(v5 + 8);
          v25 = *v24;
          *(_DWORD *)(v5 + 16) = 0;
          if (*(_DWORD *)(v5 + 20))
          {
            v26 = 0;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 8, v5 + 24, 1uLL, 4);
            v24 = *(int **)(v5 + 8);
            v26 = *(unsigned int *)(v5 + 16);
          }
          v6 = v27;
          v24[v26] = v25;
          ++*(_DWORD *)(v5 + 16);
        }
      }
      v5 += 104;
    }
    while (v5 != v6);
    sub_1C49EEAA4(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 32) + 104 * *(unsigned int *)(a1 + 40));
    *(_DWORD *)(a1 + 40) = 0;
  }
}

uint64_t *sub_1C49F31C4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;

  if (!a2)
    return (uint64_t *)(a1 + 16 * a2);
  LODWORD(v3) = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
  v4 = (uint64_t *)(a1 + 16 * v3);
  v5 = *v4;
  if (*v4 != a3)
  {
    v6 = 1;
    while (v5 != -4096)
    {
      v7 = v3 + v6++;
      v3 = v7 & (a2 - 1);
      v5 = *(_QWORD *)(a1 + 16 * v3);
      if (v5 == a3)
        return (uint64_t *)(a1 + 16 * v3);
    }
    return (uint64_t *)(a1 + 16 * a2);
  }
  return v4;
}

char *sub_1C49F3224(uint64_t **a1, int a2, uint64_t a3)
{
  char *v6;
  char *v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = (char *)operator new(0x40uLL);
  v7 = v6;
  *((_DWORD *)v6 + 8) = a2;
  *(_OWORD *)(v6 + 40) = *(_OWORD *)a3;
  *((_QWORD *)v6 + 7) = *(_QWORD *)(a3 + 16);
  v8 = a1 + 1;
  v9 = (uint64_t **)a1[1];
  if (v9)
  {
    do
    {
      while (1)
      {
        v8 = v9;
        if (*((_DWORD *)v9 + 8) <= a2)
          break;
        v9 = (uint64_t **)*v9;
        v10 = v8;
        if (!*v8)
          goto LABEL_8;
      }
      v9 = (uint64_t **)v9[1];
    }
    while (v9);
    v10 = v8 + 1;
  }
  else
  {
    v10 = a1 + 1;
  }
LABEL_8:
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = v8;
  *v10 = (uint64_t *)v6;
  v11 = (uint64_t *)**a1;
  v12 = (uint64_t *)v6;
  if (v11)
  {
    *a1 = v11;
    v12 = *v10;
  }
  sub_1C4768E74(a1[1], v12);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v7;
}

void sub_1C49F32EC(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;
  uint64_t *v7;

  v3 = (uint64_t *)a2[1];
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  else
  {
    v5 = a2;
    do
    {
      v4 = (uint64_t *)v5[2];
      v6 = *v4 == (_QWORD)v5;
      v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2)
    *a1 = v4;
  v7 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_1C485B6E0(v7, a2);
  operator delete(a2);
}

unsigned int *sub_1C49F3364(unsigned int *result, unint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v3 = result;
  if (result[3] >= a2)
  {
    v6 = result[2];
    if (v6 >= a2)
      v7 = a2;
    else
      v7 = result[2];
    if (v7)
    {
      v8 = *(_QWORD *)result;
      do
      {
        *(_QWORD *)v8 = 0x8000000080000000;
        *(_DWORD *)(v8 + 8) = 0x80000000;
        v8 += 12;
        --v7;
      }
      while (v7);
      v6 = result[2];
    }
    v9 = v6 - a2;
    if (v6 < a2)
    {
      v10 = *(_QWORD *)result + 12 * v6;
      do
      {
        *(_QWORD *)v10 = 0x8000000080000000;
        *(_DWORD *)(v10 + 8) = 0x80000000;
        v10 += 12;
      }
      while (!__CFADD__(v9++, 1));
    }
  }
  else
  {
    result[2] = 0;
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), a2, 12);
    v4 = *(_QWORD *)v3;
    v5 = a2;
    do
    {
      *(_QWORD *)v4 = 0x8000000080000000;
      *(_DWORD *)(v4 + 8) = 0x80000000;
      v4 += 12;
      --v5;
    }
    while (v5);
  }
  v3[2] = a2;
  return result;
}

void sub_1C49F3440(_QWORD *a1)
{
  if (a1)
  {
    sub_1C49F3440(*a1);
    sub_1C49F3440(a1[1]);
    operator delete(a1);
  }
}

uint64_t sub_1C49F3478(uint64_t a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  int v15;
  int *v16;
  int v17;
  int v18;

  v3 = *(int **)a1;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4)
  {
    v6 = 4 * v4;
    do
    {
      v7 = *(_QWORD *)(a2 + 24);
      if (!v7)
      {
        sub_1C485C2F0();
        JUMPOUT(0x1C49F3580);
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v7 + 48))(v7, v3++);
      v6 -= 4;
    }
    while (v6);
  }
  result = std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  v9 = *(int **)a1;
  v10 = *(unsigned int *)(a1 + 8);
  v11 = *(_QWORD *)a1 + 4 * v10;
  if ((_DWORD)v10)
  {
    v12 = v9 - 1;
    v13 = 4 * v10 - 4;
    while (v13)
    {
      v14 = v12[1];
      v15 = v12[2];
      ++v12;
      v13 -= 4;
      if (v14 == v15)
        goto LABEL_11;
    }
  }
  else
  {
    v12 = *(int **)a1;
LABEL_11:
    if (v12 != (int *)v11)
    {
      v16 = v12 + 2;
      if (v12 + 2 != (int *)v11)
      {
        v17 = *v12;
        do
        {
          v18 = v17;
          v17 = *v16;
          if (v18 != *v16)
          {
            v12[1] = v17;
            ++v12;
          }
          ++v16;
        }
        while (v16 != (int *)v11);
      }
      v11 = (uint64_t)(v12 + 1);
    }
  }
  *(_DWORD *)(a1 + 8) = (unint64_t)(v11 - (_QWORD)v9) >> 2;
  return result;
}

void sub_1C49F3584()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C49F3598(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E7FA9798;
  result[1] = v3;
  return result;
}

uint64_t sub_1C49F35CC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E7FA9798;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C49F35E8(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(**(_QWORD **)(result + 8) + 4 * *a2);
  return result;
}

__n128 sub_1C49F3600(uint64_t a1, unsigned int a2, int *a3, uint64_t *a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unsigned int *v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 result;
  uint64_t v20;
  int *v21;
  int v22;
  int v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  _DWORD *v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned __int8 v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  __n128 *v43;
  __n128 *v44;
  unint64_t v45;
  BOOL v46;
  char *v47;
  int v48;
  int v49;
  uint64_t v50;
  _DWORD *v51;
  unsigned int *v52;
  unsigned int *v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  _DWORD *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  _DWORD *v63;
  unsigned int v64;
  char v65;
  int v66;
  uint64_t v67;
  int v68;

  v9 = *a3;
  if (!(_DWORD)v9)
    goto LABEL_34;
  v10 = **(_QWORD **)(a1 + 16);
  v11 = (_DWORD *)(v10 + 16 * v9);
  v12 = v11 + 3;
  if (v11[3] == a2)
    goto LABEL_34;
  v13 = *(_DWORD **)(a1 + 40);
  if (v11[2] == 0x7FFFFFFF)
  {
    v11[2] = a2;
    v14 = *(_QWORD *)(a1 + 24);
    if (*(_DWORD *)(v14 + 48) == a2)
    {
      v15 = *(_DWORD *)(v14 + 24) - 1;
    }
    else
    {
      v16 = (_QWORD *)(v14 + 16);
      v17 = *(unsigned int *)(v14 + 24);
      if (v17 >= *(_DWORD *)(v14 + 28))
      {
        v58 = a5;
        v52 = v11 + 3;
        v54 = v10;
        v60 = v9;
        v62 = v13;
        v56 = (_DWORD *)(v10 + 16 * v9);
        v50 = v14;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v16, v14 + 32, v17 + 1, 12);
        v14 = v50;
        v12 = v52;
        v10 = v54;
        v11 = v56;
        v9 = v60;
        v13 = v62;
        a5 = v58;
        v18 = *(_QWORD *)(v50 + 16) + 12 * *(unsigned int *)(v50 + 24);
      }
      else
      {
        v18 = *v16 + 12 * v17;
        *(_QWORD *)(v18 + 4) = 0;
        result.n128_u64[0] = 0x8000000080000000;
      }
      *(_QWORD *)v18 = 0x8000000080000000;
      *(_DWORD *)(v18 + 8) = 0;
      v15 = *(_DWORD *)(v14 + 24);
      *(_DWORD *)(v14 + 24) = v15 + 1;
      *(_DWORD *)(v14 + 48) = a2;
    }
    *(_DWORD *)(*(_QWORD *)(v14 + 32) + 4 * v9) = v15;
    v20 = *(_QWORD *)(v14 + 16) + 12 * *(unsigned int *)(v14 + 24);
    v21 = (int *)(*(_QWORD *)v14 + 12 * v9);
    v22 = *v21;
    v23 = *(_DWORD *)(v20 - 8);
    if (*(_DWORD *)(v20 - 12) > *v21)
      v22 = *(_DWORD *)(v20 - 12);
    *(_DWORD *)(v20 - 12) = v22;
    v24 = v21[2];
    if (v23 > v24)
      v24 = v23;
    *(_DWORD *)(v20 - 8) = v24;
    if (v13[350])
    {
      v25 = *(uint64_t **)(a1 + 32);
      v26 = *v25;
      v27 = *((_DWORD *)v25 + 4);
      if (v27)
      {
        v28 = v27 - 1;
        v29 = (37 * *a3) & (v27 - 1);
        v30 = (_DWORD *)(v26 + 12 * v29);
        v31 = *v30;
        if (*a3 == *v30)
          goto LABEL_21;
        v32 = 1;
        while (v31 != -1)
        {
          v33 = v29 + v32++;
          v29 = v33 & v28;
          v30 = (_DWORD *)(v26 + 12 * (v33 & v28));
          v31 = *v30;
          if (*a3 == *v30)
            goto LABEL_21;
        }
      }
      v30 = (_DWORD *)(v26 + 12 * v27);
LABEL_21:
      if (v30 != (_DWORD *)(v26 + 12 * v27))
      {
        v34 = v13[349];
        v35 = atomic_load((unsigned __int8 *)&qword_1ED7ECB78);
        if ((v35 & 1) == 0)
        {
          v59 = a5;
          v53 = v12;
          v55 = v10;
          v61 = v9;
          v63 = v13;
          v57 = v11;
          v51 = v30;
          v49 = v13[349];
          v48 = __cxa_guard_acquire(&qword_1ED7ECB78);
          v34 = v49;
          v30 = v51;
          v12 = v53;
          v10 = v55;
          v11 = v57;
          v9 = v61;
          v13 = v63;
          a5 = v59;
          if (v48)
          {
            dword_1ED7ECB38 = 10;
            __cxa_guard_release(&qword_1ED7ECB78);
            v34 = v49;
            v30 = v51;
            v12 = v53;
            v10 = v55;
            v11 = v57;
            v9 = v61;
            v13 = v63;
            a5 = v59;
          }
        }
        v36 = v30[1];
        if (v36 != 0x80000000 && *v11 >= v34)
        {
          v37 = v30[2];
          if ((int)(v36 - a2 + v37) >= dword_1ED7ECB38)
          {
            *(_BYTE *)(v10 + 16 * v9 + 4) = 1;
            v13[349] = v37;
          }
        }
      }
    }
  }
  if (!a5 || (v13[348] == a2 ? (v38 = *v12 == 0x7FFFFFFF) : (v38 = 1), v38))
  {
    *v12 = a2;
    sub_1C476CB98(*(_DWORD **)a1, a2, *a3);
  }
LABEL_34:
  v39 = a3[1];
  if (v39)
  {
    v40 = *(_QWORD *)(a1 + 8);
    v64 = a2;
    v65 = 1;
    v66 = v39;
    v67 = *a4;
    v68 = *((_DWORD *)a4 + 2);
    v41 = *(unsigned int *)(v40 + 8);
    v42 = *(_QWORD *)v40;
    v43 = (__n128 *)&v64;
    if (v41 >= *(_DWORD *)(v40 + 12))
    {
      v45 = v41 + 1;
      v46 = v42 + 24 * v41 > (unint64_t)&v64;
      if (v42 <= (unint64_t)&v64 && v46)
      {
        v47 = (char *)&v64 - v42;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v40, v40 + 16, v45, 24);
        v42 = *(_QWORD *)v40;
        v43 = (__n128 *)&v47[*(_QWORD *)v40];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v40, v40 + 16, v45, 24);
        v42 = *(_QWORD *)v40;
        v43 = (__n128 *)&v64;
      }
    }
    v44 = (__n128 *)(v42 + 24 * *(unsigned int *)(v40 + 8));
    result = *v43;
    v44[1].n128_u64[0] = v43[1].n128_u64[0];
    *v44 = result;
    ++*(_DWORD *)(v40 + 8);
  }
  return result;
}

_DWORD *sub_1C49F39AC(uint64_t *a1, int a2)
{
  unsigned int v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *((_DWORD *)a1 + 4);
  v4 = (int *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(12 * v8, (std::align_val_t)4uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 12 * v10;
      do
      {
        *result = -1;
        result += 3;
        v11 -= 12;
      }
      while (v11);
    }
    if (v3)
    {
      v12 = v4;
      do
      {
        v13 = *v12;
        if (*v12 <= 0xFFFFFFFD)
        {
          v14 = *((_DWORD *)a1 + 4) - 1;
          v15 = v14 & (37 * v13);
          v16 = *a1 + 12 * v15;
          v17 = *(_DWORD *)v16;
          if (v13 != *(_DWORD *)v16)
          {
            v18 = 0;
            v19 = 1;
            while (v17 != -1)
            {
              if (v18)
                v20 = 0;
              else
                v20 = v17 == -2;
              if (v20)
                v18 = v16;
              v21 = v15 + v19++;
              v15 = v21 & v14;
              v16 = *a1 + 12 * (v21 & v14);
              v17 = *(_DWORD *)v16;
              if (v13 == *(_DWORD *)v16)
                goto LABEL_23;
            }
            if (v18)
              v16 = v18;
          }
LABEL_23:
          *(_DWORD *)v16 = v13;
          *(_QWORD *)(v16 + 4) = *(_QWORD *)(v12 + 1);
          ++*((_DWORD *)a1 + 2);
        }
        v12 += 3;
      }
      while (v12 != &v4[3 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v22 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v22)
  {
    v23 = 12 * v22;
    do
    {
      *result = -1;
      result += 3;
      v23 -= 12;
    }
    while (v23);
  }
  return result;
}

uint64_t sub_1C49F3B34(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void **v8;
  uint64_t v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)(a1 + 80);
  result = *(_QWORD *)(a1 + 80);
  if (!result)
  {
    v5 = operator new();
    v6 = v5;
    *(_DWORD *)v5 = a2;
    v7 = (char *)(v5 + 24);
    *(_QWORD *)(v5 + 8) = v5 + 24;
    v8 = (void **)(v5 + 8);
    v9 = (a2 + 1);
    v10 = v9;
    v23[0] = 0;
    v21 = v23;
    v22 = 0x100000000;
    *(_QWORD *)(v5 + 16) = 0x900000000;
    if (v9 < 0xA)
    {
      if (a2 != -1)
      {
        do
        {
          *(_QWORD *)v7 = v7 + 16;
          *((_QWORD *)v7 + 1) = 0x100000000;
          if ((_DWORD)v22)
            sub_1C49F5C14((uint64_t)v7, (uint64_t)&v21);
          v7 += 24;
          --v9;
        }
        while (v9);
      }
    }
    else
    {
      v20 = 0;
      v11 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(v5 + 8, (a2 + 1), 24, &v20);
      v12 = 0;
      v13 = 24 * v9;
      do
      {
        v14 = &v11[v12];
        *(_QWORD *)v14 = &v11[v12 + 16];
        *((_QWORD *)v14 + 1) = 0x100000000;
        if ((_DWORD)v22)
          sub_1C49F5C14((uint64_t)v14, (uint64_t)&v21);
        v12 += 24;
      }
      while (v13 != v12);
      v15 = *(char **)(v6 + 8);
      v16 = *(unsigned int *)(v6 + 16);
      if ((_DWORD)v16)
      {
        v17 = 24 * v16;
        do
        {
          v18 = *(char **)&v15[v17 - 24];
          if (&v15[v17 - 8] != v18)
            free(v18);
          v17 -= 24;
        }
        while (v17);
        v15 = (char *)*v8;
      }
      v19 = v20;
      if (v15 != v7)
        free(v15);
      *(_QWORD *)(v6 + 8) = v11;
      *(_DWORD *)(v6 + 20) = v19;
    }
    *(_DWORD *)(v6 + 16) = v10;
    if (v21 != v23)
      free(v21);
    *(_QWORD *)(v6 + 240) = v6 + 256;
    *(_QWORD *)(v6 + 248) = 0;
    *(_QWORD *)(v6 + 256) = 0;
    *(_QWORD *)(v6 + 264) = 0;
    *(_QWORD *)(v6 + 272) = v6 + 288;
    *(_QWORD *)(v6 + 280) = 0x400000000;
    *(_QWORD *)(v6 + 320) = v6 + 336;
    *(_OWORD *)(v6 + 328) = 0u;
    *(_OWORD *)(v6 + 344) = 0u;
    *(_QWORD *)(v6 + 360) = 0;
    *(_QWORD *)(v6 + 368) = v6 + 384;
    *(_QWORD *)(v6 + 376) = 0x400000000;
    *(_QWORD *)(v6 + 416) = v6 + 432;
    *(_DWORD *)(v6 + 520) = 0;
    *(_OWORD *)(v6 + 424) = 0u;
    *(_OWORD *)(v6 + 440) = 0u;
    *(_OWORD *)(v6 + 452) = 0u;
    *(_QWORD *)(v6 + 472) = 0;
    *(_QWORD *)(v6 + 480) = 0;
    *(_DWORD *)(v6 + 488) = 0;
    *(_QWORD *)(v6 + 496) = 0;
    *(_QWORD *)(v6 + 504) = 0;
    *(_DWORD *)(v6 + 512) = 0;
    v21 = 0;
    sub_1C49F4710(v3, v6);
    sub_1C49F4710((uint64_t *)&v21, 0);
    return *v3;
  }
  return result;
}

uint64_t sub_1C49F3D98(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t result;

  sub_1C49F5CE0((unsigned int *)(a1 + 448));
  sub_1C49F5CE0((unsigned int *)(a1 + 472));
  sub_1C49F5CE0((unsigned int *)(a1 + 496));
  *(_DWORD *)(a1 + 248) = 0;
  v2 = (*(_DWORD *)a1 + 1);
  if (*(_DWORD *)a1 != -1)
  {
    v3 = (_DWORD *)(*(_QWORD *)(a1 + 8) + 8);
    do
    {
      *v3 = 0;
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_1C4926A50(a1 + 352);
  result = sub_1C49F4808(a1 + 256);
  *(_DWORD *)(a1 + 520) = 0;
  return result;
}

void *sub_1C49F3E04(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  unint64_t v10;
  uint64_t v11;

  v10 = sub_1C484358C(a1 + 352, 40, 3);
  *(_DWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  *(_DWORD *)(v10 + 16) = a4;
  *(_DWORD *)(v10 + 20) = a5;
  *(_QWORD *)(v10 + 24) = a3;
  *(_DWORD *)(v10 + 32) = -1;
  *(_BYTE *)(v10 + 36) = 0;
  v11 = *(unsigned int *)(a2 + 8);
  if (v11 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v11) = v10;
  ++*(_DWORD *)(a2 + 8);
  return sub_1C49F3EB4(*(void **)(a1 + 8), v10);
}

void *sub_1C49F3EB4(void *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = (uint64_t)result + 24 * *(unsigned int *)(a2 + 16);
  v4 = *(unsigned int *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = a2;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

unint64_t sub_1C49F3F18(uint64_t a1, int a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  int v19;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  BOOL v36;
  unsigned int v37;

  v5 = *(_DWORD *)(a3 + 16);
  if (!v5)
    goto LABEL_4;
  v6 = *(_QWORD *)a3;
  v7 = (v5 - 1) & (37 * a2);
  v8 = *(_DWORD *)(*(_QWORD *)a3 + 16 * v7);
  if (v8 != a2)
  {
    v21 = 1;
    while (v8 != -1)
    {
      v22 = v7 + v21++;
      v7 = v22 & (v5 - 1);
      v8 = *(_DWORD *)(v6 + 16 * v7);
      if (v8 == a2)
        goto LABEL_3;
    }
LABEL_4:
    v9 = sub_1C484358C(a1 + 256, 40, 3);
    *(_QWORD *)(v9 + 24) = v9 + 40;
    *(_BYTE *)v9 = 0;
    *(_QWORD *)(v9 + 8) = v9 + 24;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 32) = 0;
    v10 = *(_DWORD *)(a3 + 16);
    if (v10)
    {
      v11 = v10 - 1;
      v12 = (v10 - 1) & (37 * a2);
      v13 = *(_QWORD *)a3 + 16 * v12;
      v14 = *(_DWORD *)v13;
      if (*(_DWORD *)v13 == a2)
      {
LABEL_22:
        *(_QWORD *)(v13 + 8) = v9;
        return v9;
      }
      v15 = 0;
      v16 = 1;
      while (v14 != -1)
      {
        if (v15)
          v17 = 0;
        else
          v17 = v14 == -2;
        if (v17)
          v15 = v13;
        v18 = v12 + v16++;
        v12 = v18 & v11;
        v13 = *(_QWORD *)a3 + 16 * (v18 & v11);
        v14 = *(_DWORD *)v13;
        if (*(_DWORD *)v13 == a2)
          goto LABEL_22;
      }
      if (v15)
        v13 = v15;
    }
    else
    {
      v13 = 0;
    }
    v19 = *(_DWORD *)(a3 + 8);
    if (4 * v19 + 4 >= 3 * v10)
    {
      sub_1C49F41C0((uint64_t *)a3, 2 * v10);
      v23 = *(_DWORD *)(a3 + 16);
      if (v23)
      {
        v24 = v23 - 1;
        v25 = (v23 - 1) & (37 * a2);
        v13 = *(_QWORD *)a3 + 16 * v25;
        v26 = *(_DWORD *)v13;
        if (*(_DWORD *)v13 == a2)
          goto LABEL_19;
        v27 = 0;
        v28 = 1;
        while (v26 != -1)
        {
          if (v27)
            v29 = 0;
          else
            v29 = v26 == -2;
          if (v29)
            v27 = v13;
          v30 = v25 + v28++;
          v25 = v30 & v24;
          v13 = *(_QWORD *)a3 + 16 * (v30 & v24);
          v26 = *(_DWORD *)v13;
          if (*(_DWORD *)v13 == a2)
            goto LABEL_19;
        }
LABEL_54:
        if (v27)
          v13 = v27;
        goto LABEL_19;
      }
    }
    else
    {
      if (v10 + ~v19 - *(_DWORD *)(a3 + 12) > v10 >> 3)
      {
LABEL_19:
        ++*(_DWORD *)(a3 + 8);
        if (*(_DWORD *)v13 != -1)
          --*(_DWORD *)(a3 + 12);
        *(_DWORD *)v13 = a2;
        *(_QWORD *)(v13 + 8) = 0;
        goto LABEL_22;
      }
      sub_1C49F41C0((uint64_t *)a3, v10);
      v31 = *(_DWORD *)(a3 + 16);
      if (v31)
      {
        v32 = v31 - 1;
        v33 = (v31 - 1) & (37 * a2);
        v13 = *(_QWORD *)a3 + 16 * v33;
        v34 = *(_DWORD *)v13;
        if (*(_DWORD *)v13 == a2)
          goto LABEL_19;
        v27 = 0;
        v35 = 1;
        while (v34 != -1)
        {
          if (v27)
            v36 = 0;
          else
            v36 = v34 == -2;
          if (v36)
            v27 = v13;
          v37 = v33 + v35++;
          v33 = v37 & v32;
          v13 = *(_QWORD *)a3 + 16 * (v37 & v32);
          v34 = *(_DWORD *)v13;
          if (*(_DWORD *)v13 == a2)
            goto LABEL_19;
        }
        goto LABEL_54;
      }
    }
    v13 = 0;
    goto LABEL_19;
  }
LABEL_3:
  if ((_DWORD)v7 == v5)
    goto LABEL_4;
  return *(_QWORD *)(v6 + 16 * v7 + 8);
}

_DWORD *sub_1C49F41C0(uint64_t *a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *((unsigned int *)a1 + 4);
  v4 = (int *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -1;
        result += 4;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      do
      {
        v13 = *v12;
        if (*v12 <= 0xFFFFFFFD)
        {
          v14 = *((_DWORD *)a1 + 4) - 1;
          v15 = v14 & (37 * v13);
          v16 = *a1 + 16 * v15;
          v17 = *(_DWORD *)v16;
          if (v13 != *(_DWORD *)v16)
          {
            v18 = 0;
            v19 = 1;
            while (v17 != -1)
            {
              if (v18)
                v20 = 0;
              else
                v20 = v17 == -2;
              if (v20)
                v18 = v16;
              v21 = v15 + v19++;
              v15 = v21 & v14;
              v16 = *a1 + 16 * (v21 & v14);
              v17 = *(_DWORD *)v16;
              if (v13 == *(_DWORD *)v16)
                goto LABEL_12;
            }
            if (v18)
              v16 = v18;
          }
LABEL_12:
          *(_DWORD *)v16 = v13;
          *(_QWORD *)(v16 + 8) = *((_QWORD *)v12 + 1);
          ++*((_DWORD *)a1 + 2);
        }
        v12 += 4;
      }
      while (v12 != &v4[4 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v22 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v22)
  {
    v23 = 16 * v22;
    do
    {
      *result = -1;
      result += 4;
      v23 -= 16;
    }
    while (v23);
  }
  return result;
}

uint64_t sub_1C49F433C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  _QWORD *v48;
  uint64_t v51;

  v10 = result;
  v11 = *(unsigned int *)(a6 + 16);
  v12 = *(_QWORD *)a6 + 16 * v11;
  if (*(_DWORD *)(a6 + 8))
  {
    if ((_DWORD)v11)
    {
      v13 = 16 * v11;
      v14 = *(_QWORD *)a6;
      while (*(_DWORD *)v14 >= 0xFFFFFFFE)
      {
        v14 += 16;
        v13 -= 16;
        if (!v13)
          goto LABEL_6;
      }
    }
    else
    {
      v14 = *(_QWORD *)a6;
    }
  }
  else
  {
LABEL_6:
    v14 = *(_QWORD *)a6 + 16 * v11;
  }
  v15 = *(_QWORD *)a6 + 16 * v11;
  if (v14 != v15)
  {
    v48 = (_QWORD *)(a4 + 8);
    v51 = *(_QWORD *)a6 + 16 * v11;
    do
    {
      if (a7)
      {
        if (*(_QWORD *)(a7 + 48))
        {
          v16 = *(uint64_t **)(a7 + 40);
          if (v16)
          {
            v17 = *(_DWORD *)v14;
            do
            {
              v18 = *((_DWORD *)v16 + 7);
              if (v17 >= v18)
              {
                if (v18 >= v17)
                  goto LABEL_20;
                ++v16;
              }
              v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
          goto LABEL_51;
        }
        v42 = *(unsigned int *)(a7 + 8);
        if (!(_DWORD)v42)
          goto LABEL_51;
        v43 = *(_DWORD **)a7;
        v17 = *(_DWORD *)v14;
        v44 = 4 * v42;
        while (*v43 != v17)
        {
          ++v43;
          v44 -= 4;
          if (!v44)
            goto LABEL_51;
        }
        if (!v44)
          goto LABEL_51;
      }
      else
      {
        v17 = *(_DWORD *)v14;
      }
LABEL_20:
      v19 = *(_QWORD *)(v14 + 8);
      result = sub_1C49F3F18(v10, v17, a5);
      v20 = result;
      v21 = *(unsigned int *)(v19 + 32);
      if ((_DWORD)v21)
      {
        v22 = *(uint64_t **)(v19 + 24);
        v23 = &v22[v21];
        do
        {
          v24 = *v22;
          v25 = *(unsigned int *)(v20 + 32);
          if ((_DWORD)v25)
          {
            v26 = *(uint64_t **)(v20 + 24);
            v27 = 8 * v25;
            while (1)
            {
              v28 = *v26;
              if (*(_QWORD *)(v24 + 24) == *(_QWORD *)(*v26 + 24) && *(_DWORD *)(v24 + 32) == *(_DWORD *)(v28 + 32))
                break;
              ++v26;
              v27 -= 8;
              if (!v27)
                goto LABEL_27;
            }
            *(_DWORD *)v28 = 0;
            *(_QWORD *)(v28 + 8) &= *(_QWORD *)(v24 + 8);
            v29 = *(_BYTE *)(v28 + 36);
            if (v29)
            {
              if (*(_BYTE *)(v24 + 36))
                v29 = 1;
              else
                v29 = a8;
            }
            *(_BYTE *)(v28 + 36) = v29;
          }
          else
          {
LABEL_27:
            result = (uint64_t)sub_1C49F4660(v10, v20 + 24, (__int128 *)v24, a8);
          }
          ++v22;
        }
        while (v22 != v23);
      }
      if (*(_BYTE *)v19
        || !*(_DWORD *)(v19 + 32)
        || ((v45 = **(_QWORD **)(v19 + 24), result = *(_QWORD *)(v45 + 24), v46 = *(_DWORD *)(v45 + 32), result)
          ? (v47 = v46 == -1)
          : (v47 = 1),
            v47 || (result = sub_1C4AD4FB8(result, v46, v48), a2 == a3) || (result & 0xFFFFFFFD) != 5))
      {
        v30 = *(unsigned int *)(v19 + 16);
        if ((_DWORD)v30)
        {
          v31 = *(uint64_t **)(v19 + 8);
          v32 = &v31[v30];
          do
          {
            v33 = *v31;
            v34 = *(unsigned int *)(v20 + 32);
            if ((_DWORD)v34)
            {
              v35 = *(_QWORD *)(v20 + 24);
              v36 = 8 * v34;
              while (*(_QWORD *)(v33 + 24) != *(_QWORD *)(*(_QWORD *)v35 + 24)
                   || *(_DWORD *)(v33 + 32) != *(_DWORD *)(*(_QWORD *)v35 + 32))
              {
                v35 += 8;
                v36 -= 8;
                if (!v36)
                  goto LABEL_43;
              }
            }
            else
            {
LABEL_43:
              v37 = *(unsigned int *)(v20 + 16);
              if ((_DWORD)v37)
              {
                v38 = *(_QWORD *)(v20 + 8);
                v39 = 8 * v37;
                while (*(_QWORD *)(v33 + 24) != *(_QWORD *)(*(_QWORD *)v38 + 24)
                     || *(_DWORD *)(v33 + 32) != *(_DWORD *)(*(_QWORD *)v38 + 32))
                {
                  v38 += 8;
                  v39 -= 8;
                  if (!v39)
                    goto LABEL_48;
                }
              }
              else
              {
LABEL_48:
                result = (uint64_t)sub_1C49F4660(v10, v20 + 8, (__int128 *)v33, 0);
              }
            }
            ++v31;
          }
          while (v31 != v32);
        }
      }
      *(_BYTE *)v20 = 1;
      v15 = v51;
LABEL_51:
      v40 = (unsigned int *)(v14 + 16);
      while (v40 != (unsigned int *)v12)
      {
        v41 = *v40;
        v40 += 4;
        if (v41 <= 0xFFFFFFFD)
        {
          v14 = (uint64_t)(v40 - 4);
          goto LABEL_56;
        }
      }
      v14 = v12;
LABEL_56:
      ;
    }
    while (v14 != v15);
  }
  return result;
}

void *sub_1C49F4660(uint64_t a1, uint64_t a2, __int128 *a3, int a4)
{
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  void *result;

  v8 = sub_1C484358C(a1 + 352, 40, 3);
  v9 = *a3;
  v10 = a3[1];
  *(_QWORD *)(v8 + 32) = *((_QWORD *)a3 + 4);
  *(_OWORD *)v8 = v9;
  *(_OWORD *)(v8 + 16) = v10;
  v11 = *(unsigned int *)(a2 + 8);
  if (v11 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v11) = v8;
  ++*(_DWORD *)(a2 + 8);
  result = sub_1C49F3EB4(*(void **)(a1 + 8), v8);
  if (a4)
    *(_BYTE *)(v8 + 36) = 1;
  return result;
}

uint64_t *sub_1C49F4710(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)(v2 + 496), 8);
    MEMORY[0x1CAA32FB4](*(_QWORD *)(v2 + 472), 8);
    MEMORY[0x1CAA32FB4](*(_QWORD *)(v2 + 448), 8);
    sub_1C4926A50(v2 + 352);
    sub_1C4926AE8(v2 + 352);
    sub_1C49F4808(v2 + 256);
    sub_1C4926AE8(v2 + 256);
    v3 = *(void **)(v2 + 240);
    if (v3 != (void *)(v2 + 256))
      free(v3);
    v4 = *(char **)(v2 + 8);
    v5 = *(unsigned int *)(v2 + 16);
    if ((_DWORD)v5)
    {
      v6 = 24 * v5;
      do
      {
        v7 = *(char **)&v4[v6 - 24];
        if (&v4[v6 - 8] != v7)
          free(v7);
        v6 -= 24;
      }
      while (v6);
      v4 = *(char **)(v2 + 8);
    }
    if (v4 != (char *)(v2 + 24))
      free(v4);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

uint64_t sub_1C49F4808(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void **v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  void **v18;
  void **v19;
  void **v20;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      v9 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v9 + 40 <= v8)
      {
        v10 = (void **)(v9 + 24);
        do
        {
          if (v10 + 2 != *v10)
            free(*v10);
          v11 = (void **)*(v10 - 2);
          if (v10 != v11)
            free(v11);
          v12 = v10 + 7;
          v10 += 5;
        }
        while ((unint64_t)v12 <= v8);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v13 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v13)
  {
    v14 = *(_QWORD **)(a1 + 64);
    v15 = &v14[2 * v13];
    do
    {
      v16 = (*v14 + 7) & 0xFFFFFFFFFFFFFFF8;
      v17 = *v14 + v14[1];
      if (v16 + 40 <= v17)
      {
        v18 = (void **)(v16 + 24);
        do
        {
          if (v18 + 2 != *v18)
            free(*v18);
          v19 = (void **)*(v18 - 2);
          if (v18 != v19)
            free(v19);
          v20 = v18 + 7;
          v18 += 5;
        }
        while ((unint64_t)v20 <= v17);
      }
      v14 += 2;
    }
    while (v14 != v15);
  }
  return sub_1C4926A50(a1);
}

uint64_t sub_1C49F495C(uint64_t a1, _QWORD *a2, unsigned int a3, int a4, uint64_t a5, int a6, uint64_t a7, int a8, char a9)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD **v48;
  uint64_t v49;
  _DWORD *v50;
  int v51;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD **v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  BOOL v64;
  uint64_t v65;
  unint64_t *v66;
  _OWORD *v67;
  __int128 v68;
  __int128 v69;
  char *v70;
  uint64_t v71;
  uint64_t v73;
  _BYTE v74[12];
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  _DWORD *v78;
  unsigned int v80;
  int v81;
  uint64_t v82;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  int v88;
  unsigned __int8 v89;
  unint64_t v90;
  char *v91;
  _QWORD *v92;
  _QWORD *v93;
  unsigned __int8 *v94;
  unint64_t v95;
  int *v96;
  uint64_t *v97;
  int v98;
  int v99;
  __int16 *v100;
  unint64_t v101;
  char *v102;
  BOOL v103;
  char v104;
  __int16 *v105;
  uint64_t v106;

  v11 = a2;
  v12 = a1;
  v89 = 0;
  if ((a4 & 0xFFFFFFFE) == 6 && (v13 = *(_QWORD *)(a1 + 1864), v14 = *(unsigned int *)(v13 + 248), (_DWORD)v14))
  {
    v15 = *(_DWORD **)(*(_QWORD *)(v13 + 240) + 8 * v14 - 8);
    if (*v15)
      v16 = 0;
    else
      v16 = v15;
  }
  else
  {
    v16 = 0;
  }
  v17 = a2[4] + 32 * a3;
  v90 = 0;
  if (sub_1C49F21C0(*(_QWORD *)(a1 + 1248), *(_DWORD *)(a1 + 1264), v17, &v90))
    v18 = v90 == *(_QWORD *)(v12 + 1248) + 16 * *(unsigned int *)(v12 + 1264);
  else
    v18 = 1;
  if (v18)
  {
    *(_DWORD *)&v74[4] = 0;
    *(_DWORD *)v74 = 0;
  }
  else
  {
    *(_QWORD *)&v74[4] = *(unsigned int *)(v90 + 12);
    *(_DWORD *)v74 = *(_DWORD *)(*(_QWORD *)(v12 + 1272) + 4 * *(_QWORD *)&v74[4]);
  }
  v80 = sub_1C4AD4D04((uint64_t)v11);
  sub_1C49E178C(&v90, v11, a3, *(_QWORD *)(v12 + 1416), 1, 0);
  v19 = v90;
  v20 = HIDWORD(v90);
  v81 = (int)v91;
  if ((_DWORD)v91 != HIDWORD(v90))
  {
    v73 = 1 << v80;
    v71 = a7 + 16;
    v75 = (_DWORD)v90 == 0;
    v77 = v12;
    v78 = v16;
    v76 = a7;
    while (a4 == 4)
    {
      v28 = v11[4] + 32 * a3;
      v29 = (*(_DWORD *)(v28 + 16) - 81) > 4 ? 0 : *(_DWORD *)(v28 + 4);
      v30 = sub_1C49C802C(v28);
      if ((v30 & 0xFF00000000) == 0 || ((1 << (v20 - v29)) & v30) != 0)
        break;
LABEL_79:
      LODWORD(v20) = v20 + 1;
      v19 = v19 | ((unint64_t)v20 << 32);
      if ((_DWORD)v20 == v81)
        goto LABEL_14;
    }
    v32 = *(_QWORD *)(v12 + 1864);
    if ((_DWORD)v19)
    {
      if ((_DWORD)v19 == 2)
      {
        v33 = v32 + 472;
      }
      else
      {
        if ((_DWORD)v19 != 1)
        {
          v34 = 0;
          if (!v16)
          {
LABEL_42:
            v88 = 0;
            v87 = 0;
            v86 = 0;
            v85 = 0;
            v36 = v11[3];
            v37 = *(uint64_t **)(v34 + 24);
            v82 = v34 + 24;
            v38 = *(unsigned int *)(v34 + 32);
            v90 = v12;
            v91 = (char *)&v85 + 1;
            v39 = v11;
            v92 = v11;
            LODWORD(v93) = a3;
            v94 = &v89;
            LODWORD(v95) = v80;
            v96 = &v88;
            v97 = &v86;
            v40 = a5;
            v98 = a5;
            v99 = a4;
            v100 = &v87;
            v101 = v34;
            v102 = (char *)&v87 + 1;
            v103 = v75;
            v104 = a9;
            v105 = &v85;
            v106 = v36;
            if (!(_DWORD)v38)
              goto LABEL_53;
            v41 = 8 * v38;
            v42 = v37;
            v43 = &v37[v38];
            do
            {
              v44 = *v42++;
              if (sub_1C49F53A4((uint64_t)&v90, v44))
                break;
              v37 = v42;
              v41 -= 8;
            }
            while (v41);
            if (v41 == 8)
            {
LABEL_53:
              v43 = v37;
            }
            else
            {
              v45 = 8;
              v43 = v37;
              do
              {
                if ((sub_1C49F53A4((uint64_t)&v90, v37[(unint64_t)v45 / 8]) & 1) == 0)
                  *v43++ = v37[(unint64_t)v45 / 8];
                v45 += 8;
              }
              while (v41 != v45);
            }
            *(_DWORD *)(v34 + 32) = ((unint64_t)v43 - *(_QWORD *)(v34 + 24)) >> 3;
            if ((_BYTE)v85)
            {
              v12 = v77;
              v16 = v78;
              a5 = v40;
              v11 = v39;
              v46 = v76;
              if (!HIBYTE(v85))
              {
LABEL_62:
                v51 = v88;
                if (v88 != 1 && v87 != 0)
                {
                  v53 = sub_1C49F52D0(v12, a4, a3, (uint64_t)v11, v34 + 8);
                  v89 |= v53;
                  v51 = v88;
                }
                if (v51 == 2)
                {
                  sub_1C49F52D0(v12, a4, a3, (uint64_t)v11, v82);
                  v54 = *(_QWORD *)(v34 + 8);
                  v55 = *(unsigned int *)(v34 + 16);
                  if ((_DWORD)v55)
                  {
                    v56 = 8 * v55;
                    v57 = *(_DWORD ***)(v34 + 8);
                    do
                    {
                      v58 = *v57++;
                      *v58 = 2;
                      v56 -= 8;
                    }
                    while (v56);
                  }
                  v59 = v86;
                  *(_DWORD *)(v34 + 16) = 0;
                  if (*(_DWORD *)(v34 + 20))
                  {
                    v60 = 0;
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod(v34 + 8, v82, 1uLL, 8);
                    v54 = *(_QWORD *)(v34 + 8);
                    v60 = *(unsigned int *)(v34 + 16);
                  }
                  *(_QWORD *)(v54 + 8 * v60) = v59;
                  ++*(_DWORD *)(v34 + 16);
                }
                *(_BYTE *)v34 = 0;
                if (a8)
                {
                  v61 = *(unsigned int *)(v46 + 8);
                  if (v61 >= *(_DWORD *)(v46 + 12))
                  {
                    LODWORD(v90) = 0;
                    v91 = 0;
                    v92 = *(_QWORD **)v74;
                    v93 = v11;
                    LODWORD(v94) = a3;
                    BYTE4(v94) = 0;
                    v95 = v34;
                    v63 = v61 + 1;
                    v64 = *(_QWORD *)v46 + 48 * (unint64_t)v61 > (unint64_t)&v90;
                    if (*(_QWORD *)v46 <= (unint64_t)&v90 && v64)
                    {
                      v70 = (char *)&v90 - *(_QWORD *)v46;
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v46, v71, v63, 48);
                      v65 = *(_QWORD *)v46;
                      v66 = (unint64_t *)&v70[*(_QWORD *)v46];
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v46, v71, v63, 48);
                      v65 = *(_QWORD *)v46;
                      v66 = &v90;
                    }
                    v67 = (_OWORD *)(v65 + 48 * *(unsigned int *)(v46 + 8));
                    v68 = *(_OWORD *)v66;
                    v69 = *((_OWORD *)v66 + 2);
                    v67[1] = *((_OWORD *)v66 + 1);
                    v67[2] = v69;
                    *v67 = v68;
                  }
                  else
                  {
                    v62 = *(_QWORD *)v46 + 48 * v61;
                    *(_DWORD *)v62 = 0;
                    *(_QWORD *)(v62 + 8) = 0;
                    *(_DWORD *)(v62 + 16) = *(_DWORD *)v74;
                    *(_DWORD *)(v62 + 20) = *(_DWORD *)&v74[4];
                    *(_QWORD *)(v62 + 24) = v11;
                    *(_DWORD *)(v62 + 32) = a3;
                    *(_BYTE *)(v62 + 36) = 0;
                    *(_QWORD *)(v62 + 40) = v34;
                  }
                  ++*(_DWORD *)(v46 + 8);
                }
                goto LABEL_79;
              }
            }
            else
            {
              v85 = 256;
              v12 = v77;
              v16 = v78;
              a5 = v40;
              v11 = v39;
              v46 = v76;
            }
            v47 = *(unsigned int *)(v34 + 16);
            if ((_DWORD)v47)
            {
              v48 = *(_DWORD ***)(v34 + 8);
              v49 = 8 * v47;
              do
              {
                v50 = *v48++;
                *v50 = 2;
                v49 -= 8;
              }
              while (v49);
            }
            *(_DWORD *)(v34 + 16) = 0;
            goto LABEL_62;
          }
LABEL_38:
          if (!*v16)
          {
            if (v80 >= 7)
              abort();
            v35 = *((_QWORD *)v16 + 1);
            if ((v35 & v73) == 0)
            {
              v89 = 1;
              *((_QWORD *)v16 + 1) = v73 | v35 | 0x40;
            }
          }
          goto LABEL_42;
        }
        v33 = v32 + 448;
      }
    }
    else
    {
      v33 = v32 + 496;
    }
    v34 = sub_1C49F3F18(v32, SHIDWORD(v19), v33);
    if (!v16)
      goto LABEL_42;
    goto LABEL_38;
  }
LABEL_14:
  if (!(_DWORD)a5)
  {
    if (!v89)
      goto LABEL_17;
    goto LABEL_16;
  }
  v21 = (uint64_t)v11;
  v22 = v89 != 0;
  v23 = sub_1C4AD4D04(v21) == 4;
  v24 = *(_QWORD *)(v12 + 1864);
  v25 = *(_QWORD *)(v12 + 1416);
  v26 = sub_1C4AD4D04(v21);
  if ((sub_1C49F4F94(*(_QWORD *)(v24 + 8), a5, a6, v22, v23, v25, v26) & 1) != 0)
LABEL_16:
    v89 = 1;
LABEL_17:
  if (v16 && *v16)
    *(_DWORD *)(*(_QWORD *)(v12 + 1864) + 248) = 0;
  return v89;
}

uint64_t sub_1C49F4F94(uint64_t a1, unsigned int a2, int a3, unsigned __int8 a4, char a5, uint64_t a6, int a7)
{
  uint64_t v10;
  __int128 v12;
  char *v13;
  int v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  char *v18;
  int v19;
  uint64_t v20;
  int v21;
  char v22;
  char v23;
  unsigned __int8 v24;

  v24 = a4;
  v23 = a5;
  v22 = 0;
  v10 = a1 + 24 * a2;
  *(_QWORD *)&v17 = &v24;
  *((_QWORD *)&v17 + 1) = &v23;
  v18 = &v22;
  v19 = a3;
  v20 = a6;
  v21 = a7;
  sub_1C49F5044(v10, &v17);
  if (v22)
  {
    *(_QWORD *)&v12 = &v24;
    *((_QWORD *)&v12 + 1) = &v23;
    v13 = &v22;
    v14 = a3;
    v15 = a6;
    v16 = a7;
    sub_1C49F5044(v10, &v12);
  }
  return v24;
}

uint64_t sub_1C49F5044(uint64_t result, _OWORD *a2)
{
  uint64_t v2;
  int **v3;
  uint64_t v4;
  __int128 v5;
  int **v6;
  uint64_t v7;
  int **v8;
  _OWORD v9[3];

  v2 = result;
  v3 = *(int ***)result;
  v4 = *(unsigned int *)(result + 8);
  v5 = a2[1];
  v9[0] = *a2;
  v9[1] = v5;
  v9[2] = a2[2];
  if ((_DWORD)v4)
  {
    v6 = &v3[v4];
    v7 = 8 * v4 - 8;
    while (1)
    {
      result = sub_1C49F5104((uint64_t)v9, v3);
      v8 = v3 + 1;
      if ((_DWORD)result)
        break;
      v7 -= 8;
      ++v3;
      if (v7 == -8)
      {
        v3 = v6;
        goto LABEL_10;
      }
    }
    for (; v7; v7 -= 8)
    {
      result = sub_1C49F5104((uint64_t)v9, v8);
      if ((result & 1) == 0)
        *v3++ = *v8;
      ++v8;
    }
  }
LABEL_10:
  *(_DWORD *)(v2 + 8) = ((unint64_t)v3 - *(_QWORD *)v2) >> 3;
  return result;
}

BOOL sub_1C49F5104(uint64_t a1, int **a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  _BYTE *v14;
  unsigned int v15;
  int *v16;
  int v17;

  v4 = *((_QWORD *)*a2 + 3);
  if (!v4)
  {
    v7 = 0;
LABEL_11:
    v13 = 0;
    v12 = 0;
    goto LABEL_12;
  }
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (*a2)[8];
  v7 = (sub_1C4AD4D04(*((_QWORD *)*a2 + 3)) == 1) << 8;
  if (v6 == -1)
    goto LABEL_11;
  v8 = (_QWORD *)(v5 + 8);
  if (sub_1C4AD4FB8(v4, v6, v8) - 3 > 1)
    goto LABEL_11;
  v9 = *(unsigned int *)(v4 + 40);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = 0;
    while ((*(_DWORD *)(*(_QWORD *)(v4 + 32) + v10) & 0x10000FF) != 0x1000000
         || sub_1C4AD4FB8(v4, v11, v8) != 3)
    {
      ++v11;
      v10 += 32;
      if (v9 == v11)
        goto LABEL_9;
    }
    v13 = 1;
    v12 = 1;
  }
  else
  {
LABEL_9:
    v12 = 0;
    v13 = 1;
  }
LABEL_12:
  v14 = *(_BYTE **)a1;
  if (**(_BYTE **)a1)
  {
    if ((v13 & 1) != 0 || **(_BYTE **)(a1 + 8))
      **a2 = 2;
    v15 = *(_DWORD *)(a1 + 40);
    if (v15 >= 7)
      abort();
    v16 = *a2;
    *((_QWORD *)v16 + 1) = (1 << v15) | *((_QWORD *)*a2 + 1) | 0x40;
    v17 = *v16;
  }
  else
  {
    v17 = **a2;
    if (!v17)
    {
      v17 = *(_DWORD *)(a1 + 24);
      if (v17)
      {
        if ((*a2)[5] == v17 && ((v13 & v12 & 1) != 0 || v7 && **(_BYTE **)(a1 + 8)))
        {
          v17 = 0;
          **(_BYTE **)(a1 + 16) = 1;
          *v14 = 1;
        }
        else
        {
          v17 = 0;
        }
      }
    }
  }
  return v17 != 0;
}

uint64_t sub_1C49F52D0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;

  v10 = sub_1C4AD4D04(a4);
  v11 = *(unsigned int *)(a5 + 8);
  if ((_DWORD)v11)
  {
    v12 = v10;
    v13 = 0;
    v14 = *(uint64_t **)a5;
    v15 = 1 << v10;
    v16 = 8 * v11;
    do
    {
      v17 = (_DWORD *)*v14;
      if (!*(_DWORD *)*v14 && sub_1C49F5578(a1, a4, a3, a2, *v14))
      {
        if (v12 >= 7)
          abort();
        v13 |= (*((_QWORD *)v17 + 1) & v15) == 0;
      }
      ++v14;
      v16 -= 8;
    }
    while (v16);
  }
  else
  {
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_1C49F53A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  _DWORD *v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;

  if (*(_DWORD *)a2)
  {
    if (*(_DWORD *)a2 == 2 && !**(_BYTE **)(a1 + 80))
    {
      v4 = *(_QWORD *)(a2 + 24);
      if (v4)
        LOBYTE(v4) = *(_QWORD *)(v4 + 24) == *(_QWORD *)(a1 + 112);
    }
    else
    {
      LOBYTE(v4) = 0;
    }
    **(_BYTE **)(a1 + 8) |= v4;
    return 1;
  }
  v6 = *(_QWORD *)a1;
  **(_BYTE **)(a1 + 104) = 1;
  v7 = sub_1C49F5578(v6, *(_QWORD *)(a1 + 16), *(unsigned int *)(a1 + 24), *(_DWORD *)(a1 + 68), a2);
  if (v7 == 1)
  {
    **(_BYTE **)(a1 + 88) = 1;
    v10 = *(_DWORD **)(a1 + 48);
    if (!*v10)
      *v10 = 1;
    if (*(_DWORD *)(a1 + 68) != 5)
    {
      v11 = *(_DWORD *)(a1 + 40);
      if (v11 >= 7)
        goto LABEL_33;
      v12 = ((*(_QWORD *)(a2 + 8) >> v11) & 1) == 0 && *(_DWORD *)(a1 + 64) != 0;
      **(_BYTE **)(a1 + 32) |= v12;
    }
    if (*(_BYTE *)(a1 + 96) && !*(_BYTE *)(a1 + 97))
      return 0;
    result = 1;
LABEL_31:
    *(_DWORD *)a2 = 1;
    return result;
  }
  if (v7 != 2)
  {
    result = 0;
    **(_BYTE **)(a1 + 72) = 1;
    **(_BYTE **)(a1 + 88) = 1;
    return result;
  }
  v8 = *(_DWORD *)(a1 + 40);
  if (v8 >= 7)
LABEL_33:
    abort();
  v9 = ((*(_QWORD *)(a2 + 8) >> v8) & 1) == 0 && *(_DWORD *)(a1 + 64) != 0;
  **(_BYTE **)(a1 + 32) |= v9;
  **(_DWORD **)(a1 + 48) = 2;
  v13 = *(uint64_t **)(a1 + 56);
  v14 = *v13;
  if (!*v13)
  {
    *v13 = a2;
    v14 = **(_QWORD **)(a1 + 56);
  }
  result = 1;
  if (v14 != a2)
  {
    *(_QWORD *)(v14 + 8) &= *(_QWORD *)(a2 + 8);
    goto LABEL_31;
  }
  return result;
}

uint64_t sub_1C49F5578(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  if (*(_QWORD *)(a5 + 24))
  {
    sub_1C4AD4FB8(*(_QWORD *)(a5 + 24), *(_DWORD *)(a5 + 32), (_QWORD *)(*(_QWORD *)(a1 + 1416) + 8));
    __asm { BR              X10 }
  }
  if (a4 == 6)
    return 2;
  else
    return 1;
}

uint64_t sub_1C49F5790(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  v3 = *(unsigned int *)(result + 16);
  v4 = *(_QWORD *)result + 16 * v3;
  if (*(_DWORD *)(result + 8))
  {
    if ((_DWORD)v3)
    {
      v5 = 16 * v3;
      v6 = *(_QWORD *)result;
      while (*(_DWORD *)v6 >= 0xFFFFFFFE)
      {
        v6 += 16;
        v5 -= 16;
        if (!v5)
          goto LABEL_6;
      }
    }
    else
    {
      v6 = *(_QWORD *)result;
    }
  }
  else
  {
LABEL_6:
    v6 = *(_QWORD *)result + 16 * v3;
  }
  v7 = *(_QWORD *)result + 16 * v3;
LABEL_9:
  while (v6 != v7)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v8 = *(_QWORD *)(a2 + 24);
    if (!v8)
    {
      sub_1C485C2F0();
      JUMPOUT(0x1C49F5858);
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 48))(v8, &v11);
    v9 = (unsigned int *)(v6 + 16);
    while (v9 != (unsigned int *)v4)
    {
      v10 = *v9;
      v9 += 4;
      if (v10 <= 0xFFFFFFFD)
      {
        v6 = (uint64_t)(v9 - 4);
        goto LABEL_9;
      }
    }
    v6 = v4;
  }
  return result;
}

void sub_1C49F585C()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C49F5870(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_1E7FA97E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C49F58A8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E7FA97E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C49F58C8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD **v5;
  uint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  _DWORD **v11;
  uint64_t v12;
  _DWORD *v13;

  v2 = *a2;
  v3 = *(unsigned int *)(*a2 + 32);
  if ((_DWORD)v3)
  {
    v4 = result;
    v5 = *(_DWORD ***)(v2 + 24);
    v6 = 8 * v3;
    do
    {
      v7 = *v5;
      if (!**v5)
      {
        result = *((_QWORD *)v7 + 3);
        v8 = v7[8];
        if (result)
          v9 = v8 == -1;
        else
          v9 = 1;
        if (!v9)
          result = sub_1C4AD4FB8(result, v8, (_QWORD *)(*(_QWORD *)(v4 + 16) + 8));
        *v7 = 2;
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v10 = *(unsigned int *)(v2 + 16);
  if ((_DWORD)v10)
  {
    v11 = *(_DWORD ***)(v2 + 8);
    v12 = 8 * v10;
    do
    {
      v13 = *v11++;
      *v13 = 2;
      v12 -= 8;
    }
    while (v12);
  }
  return result;
}

void sub_1C49F5970()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C49F5984()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FA9828;
  return result;
}

void sub_1C49F59A8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FA9828;
}

void sub_1C49F59C0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 16) = 0;
  *(_BYTE *)v2 = 0;
}

void sub_1C49F59D8()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C49F59EC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7FA9870;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C49F5A24(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA9870;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C49F5A44(uint64_t result, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int **v6;
  uint64_t v7;
  int **v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _DWORD **v23;
  _DWORD **v24;
  _DWORD *v25;
  uint64_t v26;
  _DWORD *v27;
  char *v28;
  BOOL v29;
  char v30;

  v2 = *a2;
  v3 = *((_QWORD *)*a2 + 3);
  v4 = *((unsigned int *)*a2 + 8);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(result + 8);
    v6 = (int **)(v3 + 8 * v4);
    v7 = 8 * v4 - 8;
    v8 = (int **)*((_QWORD *)*a2 + 3);
    while (1)
    {
      v9 = **v8;
      if (v9)
        break;
      ++v8;
      v7 -= 8;
      if (v8 == v6)
      {
        v10 = 0;
        goto LABEL_25;
      }
    }
    v11 = *((_QWORD *)*v8 + 3);
    v10 = v11 && *(_QWORD *)(v11 + 24) == v5 && v9 == 2 && *v2 == 0;
    if (v8 + 1 == v6)
    {
      v6 = v8;
    }
    else
    {
      v12 = 1;
      v6 = v8;
      do
      {
        v13 = v8[v12];
        v14 = *v13;
        if (*v13)
        {
          v15 = *((_QWORD *)v13 + 3);
          if (v15 && *(_QWORD *)(v15 + 24) == v5)
          {
            if (v14 == 2)
              v16 = *v2 ^ 1;
            else
              v16 = 0;
            v10 = (v16 | v10) != 0;
          }
        }
        else
        {
          *v6++ = v13;
        }
        ++v12;
        v7 -= 8;
      }
      while (v7);
      v3 = *((_QWORD *)v2 + 3);
    }
  }
  else
  {
    v10 = 0;
    v6 = (int **)*((_QWORD *)*a2 + 3);
  }
LABEL_25:
  v17 = (unint64_t)v6 - v3;
  v18 = ((unint64_t)v6 - v3) >> 3;
  *((_DWORD *)v2 + 8) = v18;
  if (v10 || (v17 & 0x7FFFFFFF8) == 0)
  {
    *((_DWORD *)v2 + 4) = 0;
  }
  else
  {
    v19 = *((_QWORD *)v2 + 1);
    v20 = *((unsigned int *)v2 + 4);
    if ((_DWORD)v20)
    {
      v21 = (_QWORD *)(v19 + 8 * v20);
      v22 = 8 * v20 - 8;
      v23 = (_DWORD **)*((_QWORD *)v2 + 1);
      v24 = v23;
      while (1)
      {
        v25 = *v24++;
        if (*v25)
          break;
        v22 -= 8;
        v23 = v24;
        if (v24 == v21)
          goto LABEL_40;
      }
      if (v24 == v21)
      {
        v21 = v23;
      }
      else
      {
        v26 = 1;
        v21 = v23;
        do
        {
          v27 = v23[v26];
          if (!*v27)
            *v21++ = v27;
          ++v26;
          v22 -= 8;
        }
        while (v22);
        v19 = *((_QWORD *)v2 + 1);
      }
    }
    else
    {
      v21 = (_QWORD *)*((_QWORD *)v2 + 1);
    }
LABEL_40:
    *((_DWORD *)v2 + 4) = ((unint64_t)v21 - v19) >> 3;
  }
  v28 = *(char **)(result + 16);
  if ((_DWORD)v18)
    v29 = 1;
  else
    v29 = *v28 == 0;
  v30 = !v29;
  *v28 = v30;
  return result;
}

uint64_t sub_1C49F5C14(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 8 * v4);
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 8 * v5);
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4, 8);
    }
    v5 = 0;
LABEL_10:
    v6 = *(unsigned int *)(a2 + 8);
    if (v5 != v6)
      memcpy((void *)(*(_QWORD *)a1 + 8 * v5), (const void *)(*(_QWORD *)a2 + 8 * v5), *(_QWORD *)a2 + 8 * v6 - (*(_QWORD *)a2 + 8 * v5));
LABEL_12:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

unsigned int *sub_1C49F5CE0(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = result;
  v2 = result[2];
  if (v2)
  {
    v3 = result[4];
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      result = *(unsigned int **)result;
      v4 = 1 << (33 - __clz(v2 - 1));
      if (v4 <= 64)
        v5 = 64;
      else
        v5 = v4;
      if (v5 == (_DWORD)v3)
      {
        *((_QWORD *)v1 + 1) = 0;
        v6 = 16 * v3;
        do
        {
          *result = -1;
          result += 4;
          v6 -= 16;
        }
        while (v6);
      }
      else
      {
        MEMORY[0x1CAA32FB4](result, 8);
        v9 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
        v10 = v9 | (v9 >> 2) | ((v9 | (v9 >> 2)) >> 4);
        LODWORD(v10) = (((v10 | (v10 >> 8)) >> 16) | v10 | (v10 >> 8)) + 1;
        v1[4] = v10;
        result = (unsigned int *)operator new(16 * v10, (std::align_val_t)8uLL);
        *(_QWORD *)v1 = result;
        *((_QWORD *)v1 + 1) = 0;
        v11 = v1[4];
        if ((_DWORD)v11)
        {
          v12 = 16 * v11;
          do
          {
            *result = -1;
            result += 4;
            v12 -= 16;
          }
          while (v12);
        }
      }
      return result;
    }
  }
  else
  {
    if (!result[3])
      return result;
    LODWORD(v3) = result[4];
    if (v3 > 0x40)
    {
      result = (unsigned int *)MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
      *(_QWORD *)v1 = 0;
      *((_QWORD *)v1 + 1) = 0;
      v1[4] = 0;
      return result;
    }
  }
  if ((_DWORD)v3)
  {
    v7 = *(_DWORD **)result;
    v8 = 16 * v3;
    do
    {
      *v7 = -1;
      v7 += 4;
      v8 -= 16;
    }
    while (v8);
  }
  *((_QWORD *)result + 1) = 0;
  return result;
}

unsigned int *sub_1C49F5E24(uint64_t a1, int *a2, unsigned int a3)
{
  unsigned int v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *result;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  if (a3)
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = 4 * a3;
    do
    {
      v7 = *a2;
      if (v5 >= *(_DWORD *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5 + 1, 4);
        v5 = *(_DWORD *)(a1 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a1 + 4 * v5) = v7;
      v5 = *(_DWORD *)(a1 + 8) + 1;
      *(_DWORD *)(a1 + 8) = v5;
      ++a2;
      v6 -= 4;
    }
    while (v6);
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 8);
  }
  v8 = 126 - 2 * __clz(v5);
  if (v5)
    v9 = v8;
  else
    v9 = 0;
  result = sub_1C49F5F68(*(unsigned int **)a1, (unsigned int *)(*(_QWORD *)a1 + 4 * v5), v9, 1);
  v11 = *(unsigned int **)a1;
  v12 = *(unsigned int *)(a1 + 8);
  v13 = *(_QWORD *)a1 + 4 * v12;
  if ((_DWORD)v12)
  {
    v14 = v11 - 1;
    v15 = 4 * v12 - 4;
    while (v15)
    {
      v16 = v14[1];
      v17 = v14[2];
      ++v14;
      v15 -= 4;
      if (v16 == v17)
        goto LABEL_17;
    }
  }
  else
  {
    v14 = *(unsigned int **)a1;
LABEL_17:
    if (v14 != (unsigned int *)v13)
    {
      v18 = v14 + 2;
      if (v14 + 2 != (unsigned int *)v13)
      {
        v19 = *v14;
        do
        {
          v20 = v19;
          v19 = *v18;
          if (v20 != *v18)
          {
            v14[1] = v19;
            ++v14;
          }
          ++v18;
        }
        while (v18 != (unsigned int *)v13);
      }
      v13 = (uint64_t)(v14 + 1);
    }
  }
  *(_DWORD *)(a1 + 8) = (unint64_t)(v13 - (_QWORD)v11) >> 2;
  return result;
}

unsigned int *sub_1C49F5F68(unsigned int *result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  BOOL v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  BOOL v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  BOOL v55;
  unsigned int *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int *v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v72;
  unsigned int v73;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v37 = *(a2 - 1);
        v38 = *v8;
        if (v37 < *v8)
        {
          *v8 = v37;
          *(a2 - 1) = v38;
        }
        return result;
      case 3:
        return sub_1C49F6588(v8, v8 + 1, a2 - 1);
      case 4:
        return sub_1C49F6754(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        return sub_1C49F67D0(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 <= 95)
        {
          v39 = v8 + 1;
          v41 = v8 == a2 || v39 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v41)
            {
              v42 = 4;
              v43 = v8;
              do
              {
                v45 = *v43;
                v44 = v43[1];
                v43 = v39;
                if (v44 < v45)
                {
                  v46 = v42;
                  while (1)
                  {
                    *(unsigned int *)((char *)v8 + v46) = v45;
                    v47 = v46 - 4;
                    if (v46 == 4)
                      break;
                    v45 = *(unsigned int *)((char *)v8 + v46 - 8);
                    v46 -= 4;
                    if (v44 >= v45)
                    {
                      v48 = (unsigned int *)((char *)v8 + v47);
                      goto LABEL_75;
                    }
                  }
                  v48 = v8;
LABEL_75:
                  *v48 = v44;
                }
                v39 = v43 + 1;
                v42 += 4;
              }
              while (v43 + 1 != a2);
            }
          }
          else if (!v41)
          {
            do
            {
              v73 = *v7;
              v72 = v7[1];
              v7 = v39;
              if (v72 < v73)
              {
                do
                {
                  *v39 = v73;
                  v73 = *(v39 - 2);
                  --v39;
                }
                while (v72 < v73);
                *v39 = v72;
              }
              v39 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v49 = (unint64_t)(v10 - 2) >> 1;
            v50 = v49;
            do
            {
              v51 = v50;
              if (v49 >= v50)
              {
                v52 = (2 * v50) | 1;
                v53 = &v8[v52];
                if (2 * v51 + 2 >= v10)
                {
                  v54 = *v53;
                }
                else
                {
                  v54 = v53[1];
                  v55 = *v53 >= v54;
                  if (*v53 > v54)
                    v54 = *v53;
                  if (!v55)
                  {
                    ++v53;
                    v52 = 2 * v51 + 2;
                  }
                }
                v56 = &v8[v51];
                v57 = *v56;
                if (v54 >= *v56)
                {
                  do
                  {
                    *v56 = v54;
                    v56 = v53;
                    if (v49 < v52)
                      break;
                    v58 = (2 * v52) | 1;
                    v53 = &v8[v58];
                    v52 = 2 * v52 + 2;
                    if (v52 >= v10)
                    {
                      v54 = *v53;
                      v52 = v58;
                    }
                    else
                    {
                      v54 = *v53;
                      result = (unsigned int *)v53[1];
                      if (*v53 <= result)
                        v54 = v53[1];
                      if (*v53 >= result)
                        v52 = v58;
                      else
                        ++v53;
                    }
                  }
                  while (v54 >= v57);
                  *v56 = v57;
                }
              }
              v50 = v51 - 1;
            }
            while (v51);
            do
            {
              v59 = 0;
              v60 = *v8;
              v61 = v8;
              do
              {
                v62 = &v61[v59 + 1];
                v63 = (2 * v59) | 1;
                v59 = 2 * v59 + 2;
                if (v59 >= v10)
                {
                  v64 = *v62;
                  v59 = v63;
                }
                else
                {
                  v64 = *v62;
                  v65 = v62[1];
                  if (*v62 <= v65)
                    v64 = v62[1];
                  if (*v62 >= v65)
                    v59 = v63;
                  else
                    ++v62;
                }
                *v61 = v64;
                v61 = v62;
              }
              while (v59 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v62 == --a2)
              {
                *v62 = v60;
              }
              else
              {
                *v62 = *a2;
                *a2 = v60;
                v66 = (char *)v62 - (char *)v8 + 4;
                if (v66 >= 5)
                {
                  v67 = (((unint64_t)v66 >> 2) - 2) >> 1;
                  v68 = &v8[v67];
                  v69 = *v68;
                  v70 = *v62;
                  if (*v68 < *v62)
                  {
                    do
                    {
                      *v62 = v69;
                      v62 = v68;
                      if (!v67)
                        break;
                      v67 = (v67 - 1) >> 1;
                      v68 = &v8[v67];
                      v69 = *v68;
                    }
                    while (*v68 < v70);
                    *v62 = v70;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x201)
        {
          result = sub_1C49F6588(&v7[(unint64_t)v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1C49F6588(v7, &v7[(unint64_t)v10 >> 1], a2 - 1);
          sub_1C49F6588(v7 + 1, v12 - 1, a2 - 2);
          sub_1C49F6588(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = sub_1C49F6588(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0 && *(v7 - 1) >= v14)
        {
          if (v14 >= *(a2 - 1))
          {
            v29 = v7 + 1;
            do
            {
              v8 = v29;
              if (v29 >= a2)
                break;
              ++v29;
            }
            while (v14 >= *v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v28 = v8[1];
              ++v8;
            }
            while (v14 >= v28);
          }
          v30 = a2;
          if (v8 < a2)
          {
            v30 = a2;
            do
              v31 = *--v30;
            while (v14 < v31);
          }
          if (v8 < v30)
          {
            v32 = *v8;
            v33 = *v30;
            do
            {
              *v8 = v33;
              *v30 = v32;
              do
              {
                v34 = v8[1];
                ++v8;
                v32 = v34;
              }
              while (v14 >= v34);
              do
              {
                v35 = *--v30;
                v33 = v35;
              }
              while (v14 < v35);
            }
            while (v8 < v30);
          }
          v36 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v36;
          a4 = 0;
          *v36 = v14;
          continue;
        }
        v15 = 0;
        do
          v16 = v7[++v15];
        while (v16 < v14);
        v17 = &v7[v15];
        v18 = a2;
        if (v15 == 1)
        {
          v18 = a2;
          do
          {
            if (v17 >= v18)
              break;
            v20 = *--v18;
          }
          while (v20 >= v14);
        }
        else
        {
          do
            v19 = *--v18;
          while (v19 >= v14);
        }
        if (v17 >= v18)
        {
          v26 = v17 - 1;
        }
        else
        {
          v21 = *v18;
          v22 = &v7[v15];
          v23 = v18;
          do
          {
            *v22 = v21;
            *v23 = v16;
            do
            {
              v24 = v22[1];
              ++v22;
              v16 = v24;
            }
            while (v24 < v14);
            do
            {
              v25 = *--v23;
              v21 = v25;
            }
            while (v25 >= v14);
          }
          while (v22 < v23);
          v26 = v22 - 1;
        }
        if (v26 != v7)
          *v7 = *v26;
        *v26 = v14;
        if (v17 < v18)
        {
LABEL_32:
          result = (unsigned int *)sub_1C49F5F68(v7, v26, a3, a4 & 1);
          a4 = 0;
          v8 = v26 + 1;
          continue;
        }
        v27 = sub_1C49F65F8(v7, v26);
        v8 = v26 + 1;
        result = (unsigned int *)sub_1C49F65F8(v26 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v27)
            continue;
          goto LABEL_32;
        }
        a2 = v26;
        if (!v27)
          goto LABEL_2;
        return result;
    }
  }
}

unsigned int *sub_1C49F6588(unsigned int *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *a2;
  v4 = *result;
  v5 = *a3;
  if (*a2 >= *result)
  {
    if (v5 < v3)
    {
      *a2 = v5;
      *a3 = v3;
      v6 = *result;
      if (*a2 < *result)
      {
        *result = *a2;
        *a2 = v6;
      }
    }
  }
  else
  {
    if (v5 >= v3)
    {
      *result = v3;
      *a2 = v4;
      if (*a3 >= v4)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v5;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1C49F65F8(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1C49F6588(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C49F6754(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1C49F67D0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C49F6588(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 12;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 < *v8)
    {
      v14 = v11;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v14) = v13;
        v15 = v14 - 4;
        if (v14 == 4)
          break;
        v13 = *(unsigned int *)((char *)a1 + v14 - 8);
        v14 -= 4;
        if (v12 >= v13)
        {
          v16 = (unsigned int *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 4;
    if (++v9 == a2)
      return 1;
  }
}

unsigned int *sub_1C49F6754(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int *result;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  result = sub_1C49F6588(a1, a2, a3);
  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

unsigned int *sub_1C49F67D0(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int *result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  result = sub_1C49F6754(a1, a2, a3, a4);
  v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

void sub_1C49F6870(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  llvm::MachineFunction *v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int i;
  uint64_t v17;
  llvm::MachineFunction *v18;
  unint64_t *v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[4];
  unsigned __int8 *v41;
  uint64_t v42;
  unint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;

  if (a3)
  {
    v6 = *(_QWORD *)(a1 + 32);
    v45 = 0;
    v40[0] = &off_1E816EC08;
    v40[1] = v6;
    v40[3] = *(_QWORD *)(v6 + 40);
    v40[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 16) + 104))(*(_QWORD *)(v6 + 16));
    v41 = 0;
    v42 = a1;
    v43 = a2;
    v44 = 0;
    v8 = sub_1C55437B8(v40, 0x184Eu);
    v9 = (unint64_t *)v7;
    v10 = v43;
    v11 = *(_QWORD *)(v42 + 40);
    *(_QWORD *)(v7 + 24) = v11;
    v12 = *(_QWORD *)(v11 + 32);
    v13 = *(unsigned int *)(v7 + 40);
    if ((_DWORD)v13)
    {
      v33 = *(_QWORD *)(v7 + 32);
      v34 = *(_QWORD *)(v12 + 40);
      v35 = 32 * v13;
      do
      {
        if (!*(_BYTE *)v33)
        {
          v36 = *(unsigned int *)(v33 + 4);
          if ((int)v36 >= 0)
            v37 = (uint64_t *)(*(_QWORD *)(v34 + 272) + 8 * v36);
          else
            v37 = (uint64_t *)(*(_QWORD *)(v34 + 24) + 16 * (v36 & 0x7FFFFFFF) + 8);
          v38 = *v37;
          if (*v37)
          {
            v39 = *(_QWORD *)(v38 + 16);
            *(_QWORD *)(v38 + 16) = v33;
            *(_QWORD *)(v33 + 16) = v39;
            if ((*(_BYTE *)(v33 + 3) & 1) != 0)
            {
              *(_QWORD *)(v33 + 24) = v38;
            }
            else
            {
              *(_QWORD *)(v33 + 24) = 0;
              v37 = (uint64_t *)(v39 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v33 + 16) = v33;
            *(_QWORD *)(v33 + 24) = 0;
          }
          *v37 = v33;
        }
        v33 += 32;
        v35 -= 32;
      }
      while (v35);
    }
    v14 = *(_QWORD *)(v12 + 728);
    if (v14)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 24))(v14, v7);
    v15 = *v10 & 0xFFFFFFFFFFFFFFF8;
    *v9 = v15 | *v9 & 7;
    v9[1] = (unint64_t)v10;
    *(_QWORD *)(v15 + 8) = v9;
    *v10 = *v10 & 7 | (unint64_t)v9;
    if (v44)
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v44 + 24))(v44, v9);
    v46 = 1;
    v47 = 0;
    v48 = a3 << 24;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v9, v8, (const llvm::MachineOperand *)&v46);
    for (i = 1; i != 4; ++i)
    {
      v18 = sub_1C55437B8(v40, 0x184Eu);
      v19 = (unint64_t *)v17;
      v20 = v43;
      v21 = *(_QWORD *)(v42 + 40);
      *(_QWORD *)(v17 + 24) = v21;
      v22 = *(_QWORD *)(v21 + 32);
      v23 = *(unsigned int *)(v17 + 40);
      if ((_DWORD)v23)
      {
        v26 = *(_QWORD *)(v17 + 32);
        v27 = *(_QWORD *)(v22 + 40);
        v28 = 32 * v23;
        do
        {
          if (!*(_BYTE *)v26)
          {
            v29 = *(unsigned int *)(v26 + 4);
            if ((int)v29 >= 0)
              v30 = (uint64_t *)(*(_QWORD *)(v27 + 272) + 8 * v29);
            else
              v30 = (uint64_t *)(*(_QWORD *)(v27 + 24) + 16 * (v29 & 0x7FFFFFFF) + 8);
            v31 = *v30;
            if (*v30)
            {
              v32 = *(_QWORD *)(v31 + 16);
              *(_QWORD *)(v31 + 16) = v26;
              *(_QWORD *)(v26 + 16) = v32;
              if ((*(_BYTE *)(v26 + 3) & 1) != 0)
              {
                *(_QWORD *)(v26 + 24) = v31;
              }
              else
              {
                *(_QWORD *)(v26 + 24) = 0;
                v30 = (uint64_t *)(v32 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v26 + 16) = v26;
              *(_QWORD *)(v26 + 24) = 0;
            }
            *v30 = v26;
          }
          v26 += 32;
          v28 -= 32;
        }
        while (v28);
      }
      v24 = *(_QWORD *)(v22 + 728);
      if (v24)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 24))(v24, v17);
      v25 = *v20 & 0xFFFFFFFFFFFFFFF8;
      *v19 = v25 | *v19 & 7;
      v19[1] = (unint64_t)v20;
      *(_QWORD *)(v25 + 8) = v19;
      *v20 = *v20 & 7 | (unint64_t)v19;
      if (v44)
        (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v44 + 24))(v44, v19);
      v46 = 1;
      v47 = 0;
      v48 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v19, v18, (const llvm::MachineOperand *)&v46);
    }
    v40[0] = &off_1E816EC08;
    if (v41)
      llvm::MetadataTracking::untrack((uint64_t)&v41, v41);
  }
}

uint64_t sub_1C49F6B78(uint64_t a1, uint64_t a2)
{
  void *v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v11;
  unsigned int v12;
  int v13;

  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x1000000000;
  if (a1 == a2)
    goto LABEL_3;
  v5 = *(_DWORD *)(a2 + 8);
  if (!v5)
    goto LABEL_3;
  v11 = *(const void **)a2;
  if (*(_QWORD *)a2 != a2 + 16)
  {
    *(_QWORD *)a1 = v11;
    v13 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 8) = v5;
    *(_DWORD *)(a1 + 12) = v13;
    *(_QWORD *)a2 = a2 + 16;
    *(_DWORD *)(a2 + 12) = 0;
    goto LABEL_11;
  }
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, *(unsigned int *)(a2 + 8), 4);
    v12 = *(_DWORD *)(a2 + 8);
    if (!v12)
      goto LABEL_10;
    v11 = *(const void **)a2;
    v4 = *(void **)a1;
  }
  else
  {
    v12 = *(_DWORD *)(a2 + 8);
  }
  memcpy(v4, v11, 4 * v12);
LABEL_10:
  *(_DWORD *)(a1 + 8) = v5;
LABEL_11:
  *(_DWORD *)(a2 + 8) = 0;
LABEL_3:
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v6 = (_QWORD *)(a2 + 88);
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v7;
  v8 = a1 + 88;
  v9 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v9;
  if (v9)
  {
    *(_QWORD *)(v7 + 16) = v8;
    *(_QWORD *)(a2 + 80) = v6;
    *v6 = 0;
    *(_QWORD *)(a2 + 96) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 80) = v8;
  }
  return a1;
}

uint64_t sub_1C49F6C74(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t *i;
  unsigned int v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;

  sub_1C49E178C(&v16, *(_QWORD **)(a4 + 8), (unint64_t)(a4 - *(_QWORD *)(*(_QWORD *)(a4 + 8) + 32)) >> 5, a2, 0, 1);
  result = 0;
  v7 = v16;
  v8 = HIDWORD(v16);
  if (v17 != HIDWORD(v16))
  {
    v9 = a1 + 104 * a3;
    v10 = (uint64_t **)(v9 + 88);
    while (1)
    {
      if (*(_QWORD *)(v9 + 96))
      {
        for (i = *v10; i; i = (uint64_t *)*i)
        {
          v12 = *((_DWORD *)i + 7);
          if (v12 <= v8)
          {
            if (v12 >= v8)
              return 1;
            ++i;
          }
        }
      }
      else
      {
        v13 = *(unsigned int *)(v9 + 8);
        if ((_DWORD)v13)
        {
          v14 = *(_DWORD **)v9;
          v15 = 4 * v13;
          while (*v14 != (_DWORD)v8)
          {
            ++v14;
            v15 -= 4;
            if (!v15)
              goto LABEL_16;
          }
          if (v15)
            return 1;
        }
      }
LABEL_16:
      v7 = (v7 & 0xFFFFFFFF00000000) + 0x100000000;
      v8 = HIDWORD(v7);
      if (v17 == HIDWORD(v7))
        return 0;
    }
  }
  return result;
}

void sub_1C49F6D78(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, a2, 4);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (a2 != v2)
        bzero((void *)(*(_QWORD *)a1 + 4 * v2), 4 * (a2 - v2));
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

uint64_t sub_1C49F6DEC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  int v11;
  void *v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v18 = 0;
  result = sub_1C49F6FA8(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v18);
  v9 = v18;
  v10 = *(_DWORD *)(a2 + 16);
  if ((result & 1) != 0)
  {
    v16 = 0;
    goto LABEL_15;
  }
  v11 = *(_DWORD *)(a2 + 8);
  if (4 * v11 + 4 >= 3 * v10)
  {
    v10 *= 2;
  }
  else if (v10 + ~v11 - *(_DWORD *)(a2 + 12) > v10 >> 3)
  {
    goto LABEL_4;
  }
  sub_1C49F7040(a2, v10);
  v18 = 0;
  sub_1C49F6FA8(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v18);
  v9 = v18;
LABEL_4:
  ++*(_DWORD *)(a2 + 8);
  if (*(_QWORD *)v9 != -4096)
    --*(_DWORD *)(a2 + 12);
  *(_QWORD *)v9 = *a3;
  v12 = (void *)(v9 + 24);
  *(_QWORD *)(v9 + 8) = v9 + 24;
  result = v9 + 8;
  *(_QWORD *)(v9 + 16) = 0x600000000;
  if (v9 + 8 == a4)
    goto LABEL_14;
  v13 = *(unsigned int *)(a4 + 8);
  if (!(_DWORD)v13)
    goto LABEL_14;
  v14 = *(const void **)a4;
  if (*(_QWORD *)a4 != a4 + 16)
  {
    *(_QWORD *)(v9 + 8) = v14;
    *(_DWORD *)(v9 + 16) = v13;
    *(_DWORD *)(v9 + 20) = *(_DWORD *)(a4 + 12);
    *(_QWORD *)a4 = a4 + 16;
    *(_DWORD *)(a4 + 12) = 0;
    goto LABEL_13;
  }
  if (v13 >= 7)
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(result, v9 + 24, v13, 8);
    v15 = *(unsigned int *)(a4 + 8);
    if (!(_DWORD)v15)
      goto LABEL_12;
    v14 = *(const void **)a4;
    v12 = *(void **)(v9 + 8);
  }
  else
  {
    v15 = *(unsigned int *)(a4 + 8);
  }
  result = (uint64_t)memcpy(v12, v14, 8 * v15);
LABEL_12:
  *(_DWORD *)(v9 + 16) = v13;
LABEL_13:
  *(_DWORD *)(a4 + 8) = 0;
LABEL_14:
  *(_DWORD *)(v9 + 72) = *(_DWORD *)(a4 + 64);
  v10 = *(_DWORD *)(a2 + 16);
  v16 = 1;
LABEL_15:
  v17 = *(_QWORD *)a2 + 80 * v10;
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v17;
  *(_BYTE *)(a1 + 16) = v16;
  return result;
}

uint64_t sub_1C49F6FA8(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 80 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 80 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_QWORD *sub_1C49F7040(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(80 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C614F630(a1, v4, v4 + 80 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 80 * v10;
    do
    {
      *result = -4096;
      result += 10;
      v11 -= 80;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C49F7104(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C614F8F8(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C49F71BC(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t *v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t *i;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  int v110;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  int v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  int v129;
  uint64_t *v131;
  BOOL v132;
  char v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  int v141;
  int v142;
  uint64_t v143;
  int v144;
  BOOL v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  int v153;
  int v154;
  uint64_t v155;
  int v156;
  int64_t v158;
  int64_t v159;
  int64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  int v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  int v170;
  BOOL v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  int v177;
  int v178;
  uint64_t v179;
  int v180;
  uint64_t *v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  int v192;
  BOOL v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  int v197;
  int v198;
  uint64_t v199;
  int v200;
  BOOL v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  int v212;
  BOOL v213;
  uint64_t *v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  int v223;
  int v224;
  uint64_t v225;
  int v226;
  BOOL v227;
  uint64_t v228;
  uint64_t *v229;
  unint64_t v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  int v234;
  int v235;
  uint64_t v236;
  int v237;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  int v244;
  int v245;
  uint64_t v246;
  int v247;
  BOOL v248;
  uint64_t v249;
  uint64_t *v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  int v255;
  int v256;
  uint64_t v257;
  int v258;
  uint64_t v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  int v264;
  uint64_t *v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  uint64_t v270;
  int v271;
  int v272;
  uint64_t v273;
  int v274;
  int v275;
  uint64_t v276;
  int v277;
  BOOL v278;
  uint64_t v279;
  BOOL v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  int v284;
  uint64_t v285;
  int v286;
  int v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  int v293;
  uint64_t v294;
  int v295;
  int v296;
  uint64_t v297;
  int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  uint64_t v303;
  int v304;
  int v305;
  uint64_t v306;
  int v307;
  int v308;
  int v309;
  uint64_t v310;
  int v312;
  uint64_t v313;
  int v314;
  uint64_t *v315;
  uint64_t *v316;
  int v317;
  int8x16_t *v319;
  uint64_t v320;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2;
  v315 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v10 = v9;
    v11 = (char *)v8 - (char *)v9;
    v12 = v8 - v9;
    v319 = (int8x16_t *)v9;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v260 = *(a2 - 1);
        v261 = *v9;
        v262 = *(_DWORD *)(*(_QWORD *)(v260 + 24) + 24);
        v263 = *a3;
        v320 = 0;
        if (sub_1C6144BDC(*(_QWORD *)v263, *(_DWORD *)(v263 + 16), v260, &v320))
          v264 = *(_DWORD *)(v320 + 8);
        else
          v264 = 0;
        v272 = *(_DWORD *)(*(_QWORD *)(v261 + 24) + 24);
        v273 = *a3;
        v320 = 0;
        result = sub_1C6144BDC(*(_QWORD *)v273, *(_DWORD *)(v273 + 16), v261, &v320);
        if ((_DWORD)result)
          v274 = *(_DWORD *)(v320 + 8);
        else
          v274 = 0;
        if (v262 < v272 || (v272 >= v262 ? (v278 = v264 < v274) : (v278 = 0), v278))
        {
          v279 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v279;
        }
        return result;
      case 3uLL:
        return sub_1C49F8728(v9, v9 + 1, v315, a3);
      case 4uLL:
        return sub_1C49F9038(v9, v9 + 1, v9 + 2, v315, a3);
      case 5uLL:
        v265 = v9 + 2;
        v266 = v9 + 3;
        sub_1C49F9038(v10, v10 + 1, v10 + 2, v10 + 3, a3);
        v267 = *(a2 - 1);
        v268 = v10[3];
        v269 = *(_DWORD *)(*(_QWORD *)(v267 + 24) + 24);
        v270 = *a3;
        v320 = 0;
        if (sub_1C6144BDC(*(_QWORD *)v270, *(_DWORD *)(v270 + 16), v267, &v320))
          v271 = *(_DWORD *)(v320 + 8);
        else
          v271 = 0;
        v275 = *(_DWORD *)(*(_QWORD *)(v268 + 24) + 24);
        v276 = *a3;
        v320 = 0;
        result = sub_1C6144BDC(*(_QWORD *)v276, *(_DWORD *)(v276 + 16), v268, &v320);
        if ((_DWORD)result)
          v277 = *(_DWORD *)(v320 + 8);
        else
          v277 = 0;
        if (v269 < v275 || (v275 >= v269 ? (v280 = v271 < v277) : (v280 = 0), v280))
        {
          v281 = *v266;
          *v266 = *(a2 - 1);
          *(a2 - 1) = v281;
          v282 = *v266;
          v283 = *v265;
          v284 = *(_DWORD *)(*(_QWORD *)(*v266 + 24) + 24);
          v285 = *a3;
          v320 = 0;
          v286 = sub_1C6144BDC(*(_QWORD *)v285, *(_DWORD *)(v285 + 16), v282, &v320)
               ? *(_DWORD *)(v320 + 8)
               : 0;
          v287 = *(_DWORD *)(*(_QWORD *)(v283 + 24) + 24);
          v288 = *a3;
          v320 = 0;
          result = sub_1C6144BDC(*(_QWORD *)v288, *(_DWORD *)(v288 + 16), v283, &v320);
          v289 = (_DWORD)result ? *(_DWORD *)(v320 + 8) : 0;
          if (v284 < v287 || v287 >= v284 && v286 < v289)
          {
            v290 = *v265;
            v291 = *v266;
            *v265 = *v266;
            *v266 = v290;
            v292 = v10[1];
            v293 = *(_DWORD *)(*(_QWORD *)(v291 + 24) + 24);
            v294 = *a3;
            v320 = 0;
            v295 = sub_1C6144BDC(*(_QWORD *)v294, *(_DWORD *)(v294 + 16), v291, &v320)
                 ? *(_DWORD *)(v320 + 8)
                 : 0;
            v296 = *(_DWORD *)(*(_QWORD *)(v292 + 24) + 24);
            v297 = *a3;
            v320 = 0;
            result = sub_1C6144BDC(*(_QWORD *)v297, *(_DWORD *)(v297 + 16), v292, &v320);
            v298 = (_DWORD)result ? *(_DWORD *)(v320 + 8) : 0;
            if (v293 < v296 || v296 >= v293 && v295 < v298)
            {
              v300 = v10[1];
              v299 = v10[2];
              v301 = *v10;
              v10[1] = v299;
              v10[2] = v300;
              v302 = *(_DWORD *)(*(_QWORD *)(v299 + 24) + 24);
              v303 = *a3;
              v320 = 0;
              v304 = sub_1C6144BDC(*(_QWORD *)v303, *(_DWORD *)(v303 + 16), v299, &v320)
                   ? *(_DWORD *)(v320 + 8)
                   : 0;
              v305 = *(_DWORD *)(*(_QWORD *)(v301 + 24) + 24);
              v306 = *a3;
              v320 = 0;
              result = sub_1C6144BDC(*(_QWORD *)v306, *(_DWORD *)(v306 + 16), v301, &v320);
              v307 = (_DWORD)result ? *(_DWORD *)(v320 + 8) : 0;
              if (v302 < v305 || v305 >= v302 && v304 < v307)
                *v319 = vextq_s8(*v319, *v319, 8uLL);
            }
          }
        }
        return result;
      default:
        if (v11 <= 191)
        {
          v131 = v9 + 1;
          v132 = v9 == v8 || v131 == v8;
          v133 = v132;
          if ((a5 & 1) != 0)
          {
            if ((v133 & 1) == 0)
            {
              v134 = 0;
              v135 = v9;
              do
              {
                v136 = v131;
                v138 = *v135;
                v137 = v135[1];
                v139 = *(_DWORD *)(*(_QWORD *)(v137 + 24) + 24);
                v140 = *a3;
                v320 = 0;
                if (sub_1C6144BDC(*(_QWORD *)v140, *(_DWORD *)(v140 + 16), v137, &v320))
                  v141 = *(_DWORD *)(v320 + 8);
                else
                  v141 = 0;
                v142 = *(_DWORD *)(*(_QWORD *)(v138 + 24) + 24);
                v143 = *a3;
                v320 = 0;
                result = sub_1C6144BDC(*(_QWORD *)v143, *(_DWORD *)(v143 + 16), v138, &v320);
                if ((_DWORD)result)
                  v144 = *(_DWORD *)(v320 + 8);
                else
                  v144 = 0;
                if (v139 < v142 || (v142 >= v139 ? (v145 = v141 < v144) : (v145 = 0), v145))
                {
                  v146 = v135[1];
                  v135[1] = *v135;
                  v147 = v10;
                  if (v135 != v10)
                  {
                    v148 = v134;
                    do
                    {
                      v149 = (uint64_t *)((char *)v10 + v148);
                      v150 = *(uint64_t *)((char *)v10 + v148 - 8);
                      v151 = *(_DWORD *)(*(_QWORD *)(v146 + 24) + 24);
                      v152 = *a3;
                      v320 = 0;
                      if (sub_1C6144BDC(*(_QWORD *)v152, *(_DWORD *)(v152 + 16), v146, &v320))
                        v153 = *(_DWORD *)(v320 + 8);
                      else
                        v153 = 0;
                      v154 = *(_DWORD *)(*(_QWORD *)(v150 + 24) + 24);
                      v155 = *a3;
                      v320 = 0;
                      result = sub_1C6144BDC(*(_QWORD *)v155, *(_DWORD *)(v155 + 16), v150, &v320);
                      if ((_DWORD)result)
                        v156 = *(_DWORD *)(v320 + 8);
                      else
                        v156 = 0;
                      if (v151 >= v154 && (v154 < v151 || v153 >= v156))
                      {
                        v10 = (uint64_t *)v319;
                        v147 = (uint64_t *)((char *)v319->i64 + v148);
                        goto LABEL_223;
                      }
                      *v149 = *(v149 - 1);
                      v148 -= 8;
                      v10 = (uint64_t *)v319;
                    }
                    while (v148);
                    v147 = (uint64_t *)v319;
                  }
LABEL_223:
                  *v147 = v146;
                }
                v131 = v136 + 1;
                v134 += 8;
                v135 = v136;
              }
              while (v136 + 1 != a2);
            }
          }
          else if ((v133 & 1) == 0)
          {
            do
            {
              v239 = v131;
              v241 = *v10;
              v240 = v10[1];
              v242 = *(_DWORD *)(*(_QWORD *)(v240 + 24) + 24);
              v243 = *a3;
              v320 = 0;
              if (sub_1C6144BDC(*(_QWORD *)v243, *(_DWORD *)(v243 + 16), v240, &v320))
                v244 = *(_DWORD *)(v320 + 8);
              else
                v244 = 0;
              v245 = *(_DWORD *)(*(_QWORD *)(v241 + 24) + 24);
              v246 = *a3;
              v320 = 0;
              result = sub_1C6144BDC(*(_QWORD *)v246, *(_DWORD *)(v246 + 16), v241, &v320);
              if ((_DWORD)result)
                v247 = *(_DWORD *)(v320 + 8);
              else
                v247 = 0;
              if (v242 < v245 || (v245 >= v242 ? (v248 = v244 < v247) : (v248 = 0), v248))
              {
                v249 = *v239;
                do
                {
                  v250 = v10;
                  v10[1] = *v10;
                  v252 = *--v10;
                  v251 = v252;
                  v253 = *(_DWORD *)(*(_QWORD *)(v249 + 24) + 24);
                  v254 = *a3;
                  v320 = 0;
                  if (sub_1C6144BDC(*(_QWORD *)v254, *(_DWORD *)(v254 + 16), v249, &v320))
                    v255 = *(_DWORD *)(v320 + 8);
                  else
                    v255 = 0;
                  v256 = *(_DWORD *)(*(_QWORD *)(v251 + 24) + 24);
                  v257 = *a3;
                  v320 = 0;
                  result = sub_1C6144BDC(*(_QWORD *)v257, *(_DWORD *)(v257 + 16), v251, &v320);
                  if ((_DWORD)result)
                    v258 = *(_DWORD *)(v320 + 8);
                  else
                    v258 = 0;
                }
                while (v253 < v256 || v256 >= v253 && v255 < v258);
                *v250 = v249;
              }
              v131 = v239 + 1;
              v10 = v239;
            }
            while (v239 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v9 != v8)
          {
            v158 = (v12 - 2) >> 1;
            v159 = v158;
            do
            {
              v160 = v159;
              if (v158 >= v159)
              {
                v161 = (2 * v159) | 1;
                v162 = &v319->i64[v161];
                if (2 * v159 + 2 < (uint64_t)v12)
                {
                  v163 = *v162;
                  v165 = v162 + 1;
                  v164 = v162[1];
                  v166 = *(_DWORD *)(*(_QWORD *)(*v162 + 24) + 24);
                  v167 = *a3;
                  v320 = 0;
                  v312 = sub_1C6144BDC(*(_QWORD *)v167, *(_DWORD *)(v167 + 16), v163, &v320)
                       ? *(_DWORD *)(v320 + 8)
                       : 0;
                  v168 = *(_DWORD *)(*(_QWORD *)(v164 + 24) + 24);
                  v169 = *a3;
                  v320 = 0;
                  v170 = sub_1C6144BDC(*(_QWORD *)v169, *(_DWORD *)(v169 + 16), v164, &v320)
                       ? *(_DWORD *)(v320 + 8)
                       : 0;
                  v162 = &v319->i64[v161];
                  if (v166 < v168 || (v312 < v170 ? (v171 = v168 < v166) : (v171 = 1), !v171))
                  {
                    v162 = v165;
                    v161 = 2 * v160 + 2;
                  }
                }
                v172 = &v319->i64[v160];
                v316 = v162;
                v173 = *v162;
                v174 = *v172;
                v175 = *(_DWORD *)(*(_QWORD *)(*v162 + 24) + 24);
                v176 = *a3;
                v320 = 0;
                if (sub_1C6144BDC(*(_QWORD *)v176, *(_DWORD *)(v176 + 16), v173, &v320))
                  v177 = *(_DWORD *)(v320 + 8);
                else
                  v177 = 0;
                v178 = *(_DWORD *)(*(_QWORD *)(v174 + 24) + 24);
                v179 = *a3;
                v320 = 0;
                result = sub_1C6144BDC(*(_QWORD *)v179, *(_DWORD *)(v179 + 16), v174, &v320);
                if ((_DWORD)result)
                  v180 = *(_DWORD *)(v320 + 8);
                else
                  v180 = 0;
                if (v175 >= v178 && (v178 < v175 || v177 >= v180))
                {
                  v313 = *v172;
                  do
                  {
                    v182 = v316;
                    *v172 = *v316;
                    if (v158 < v161)
                      break;
                    v183 = 2 * v161;
                    v161 = (2 * v161) | 1;
                    v184 = &v319->i64[v161];
                    v185 = v183 + 2;
                    if (v183 + 2 < (uint64_t)v12)
                    {
                      v186 = *v184;
                      v188 = v184 + 1;
                      v187 = v184[1];
                      v309 = *(_DWORD *)(*(_QWORD *)(*v184 + 24) + 24);
                      v189 = *a3;
                      v320 = 0;
                      v308 = sub_1C6144BDC(*(_QWORD *)v189, *(_DWORD *)(v189 + 16), v186, &v320)
                           ? *(_DWORD *)(v320 + 8)
                           : 0;
                      v190 = *(_DWORD *)(*(_QWORD *)(v187 + 24) + 24);
                      v191 = *a3;
                      v320 = 0;
                      v192 = sub_1C6144BDC(*(_QWORD *)v191, *(_DWORD *)(v191 + 16), v187, &v320)
                           ? *(_DWORD *)(v320 + 8)
                           : 0;
                      v184 = &v319->i64[v161];
                      if (v309 < v190 || (v308 < v192 ? (v193 = v190 < v309) : (v193 = 1), !v193))
                      {
                        v184 = v188;
                        v161 = v185;
                      }
                    }
                    v316 = v184;
                    v194 = *v184;
                    v195 = *(_DWORD *)(*(_QWORD *)(*v184 + 24) + 24);
                    v196 = *a3;
                    v320 = 0;
                    v197 = sub_1C6144BDC(*(_QWORD *)v196, *(_DWORD *)(v196 + 16), v194, &v320)
                         ? *(_DWORD *)(v320 + 8)
                         : 0;
                    v198 = *(_DWORD *)(*(_QWORD *)(v313 + 24) + 24);
                    v199 = *a3;
                    v320 = 0;
                    result = sub_1C6144BDC(*(_QWORD *)v199, *(_DWORD *)(v199 + 16), v313, &v320);
                    v200 = (_DWORD)result ? *(_DWORD *)(v320 + 8) : 0;
                    if (v195 < v198)
                      break;
                    v201 = v198 >= v195 && v197 < v200;
                    v172 = v182;
                  }
                  while (!v201);
                  *v182 = v313;
                }
              }
              v159 = v160 - 1;
            }
            while (v160);
            v202 = (uint64_t *)v319;
            do
            {
              v203 = 0;
              v310 = *v202;
              do
              {
                v204 = v202;
                v202 += v203 + 1;
                v205 = 2 * v203;
                v203 = (2 * v203) | 1;
                v206 = v205 + 2;
                if (v205 + 2 < (uint64_t)v12)
                {
                  v207 = *v202;
                  v208 = v202[1];
                  v317 = *(_DWORD *)(*(_QWORD *)(*v202 + 24) + 24);
                  v209 = *a3;
                  v320 = 0;
                  v314 = sub_1C6144BDC(*(_QWORD *)v209, *(_DWORD *)(v209 + 16), v207, &v320)
                       ? *(_DWORD *)(v320 + 8)
                       : 0;
                  v210 = *(_DWORD *)(*(_QWORD *)(v208 + 24) + 24);
                  v211 = *a3;
                  v320 = 0;
                  result = sub_1C6144BDC(*(_QWORD *)v211, *(_DWORD *)(v211 + 16), v208, &v320);
                  v212 = (_DWORD)result ? *(_DWORD *)(v320 + 8) : 0;
                  if (v317 < v210 || (v314 < v212 ? (v213 = v210 < v317) : (v213 = 1), !v213))
                  {
                    ++v202;
                    v203 = v206;
                  }
                }
                *v204 = *v202;
              }
              while (v203 <= (uint64_t)((v12 - 2) >> 1));
              v214 = a2 - 1;
              v132 = v202 == --a2;
              if (v132)
              {
                *v202 = v310;
              }
              else
              {
                *v202 = *v214;
                *v214 = v310;
                v215 = (char *)v202 - (char *)v319 + 8;
                if (v215 >= 9)
                {
                  v216 = ((unint64_t)v215 >> 3) - 2;
                  v217 = v216 >> 1;
                  v218 = &v319->i64[v216 >> 1];
                  v219 = *v218;
                  v220 = *v202;
                  v221 = *(_DWORD *)(*(_QWORD *)(*v218 + 24) + 24);
                  v222 = *a3;
                  v320 = 0;
                  v223 = sub_1C6144BDC(*(_QWORD *)v222, *(_DWORD *)(v222 + 16), v219, &v320)
                       ? *(_DWORD *)(v320 + 8)
                       : 0;
                  v224 = *(_DWORD *)(*(_QWORD *)(v220 + 24) + 24);
                  v225 = *a3;
                  v320 = 0;
                  result = sub_1C6144BDC(*(_QWORD *)v225, *(_DWORD *)(v225 + 16), v220, &v320);
                  v226 = (_DWORD)result ? *(_DWORD *)(v320 + 8) : 0;
                  if (v221 < v224 || (v224 >= v221 ? (v227 = v223 < v226) : (v227 = 0), v227))
                  {
                    v228 = *v202;
                    *v202 = *v218;
                    if (v216 >= 2)
                    {
                      while (1)
                      {
                        v230 = v217 - 1;
                        v217 = (v217 - 1) >> 1;
                        v229 = &v319->i64[v217];
                        v231 = *v229;
                        v232 = *(_DWORD *)(*(_QWORD *)(*v229 + 24) + 24);
                        v233 = *a3;
                        v320 = 0;
                        v234 = sub_1C6144BDC(*(_QWORD *)v233, *(_DWORD *)(v233 + 16), v231, &v320)
                             ? *(_DWORD *)(v320 + 8)
                             : 0;
                        v235 = *(_DWORD *)(*(_QWORD *)(v228 + 24) + 24);
                        v236 = *a3;
                        v320 = 0;
                        result = sub_1C6144BDC(*(_QWORD *)v236, *(_DWORD *)(v236 + 16), v228, &v320);
                        v237 = (_DWORD)result ? *(_DWORD *)(v320 + 8) : 0;
                        if (v232 >= v235 && (v235 < v232 || v234 >= v237))
                          break;
                        *v218 = *v229;
                        v218 = &v319->i64[v217];
                        if (v230 <= 1)
                          goto LABEL_332;
                      }
                    }
                    v229 = v218;
LABEL_332:
                    *v229 = v228;
                  }
                }
              }
              v25 = (uint64_t)v12-- <= 2;
              v202 = (uint64_t *)v319;
            }
            while (!v25);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v9[v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          sub_1C49F8728(&v10[v12 >> 1], v10, v315, a3);
        }
        else
        {
          sub_1C49F8728(v10, &v10[v12 >> 1], v315, a3);
          sub_1C49F8728(v10 + 1, v14 - 1, a2 - 2, a3);
          sub_1C49F8728(v10 + 2, &v10[v13 + 1], a2 - 3, a3);
          sub_1C49F8728(v14 - 1, &v10[v12 >> 1], &v10[v13 + 1], a3);
          v15 = *v10;
          *v10 = *v14;
          *v14 = v15;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v67 = *(v10 - 1);
          v68 = *v10;
          v69 = *(_DWORD *)(*(_QWORD *)(v67 + 24) + 24);
          v70 = *a3;
          v320 = 0;
          v71 = sub_1C6144BDC(*(_QWORD *)v70, *(_DWORD *)(v70 + 16), v67, &v320)
              ? *(_DWORD *)(v320 + 8)
              : 0;
          v72 = *(_DWORD *)(*(_QWORD *)(v68 + 24) + 24);
          v73 = *a3;
          v320 = 0;
          v74 = sub_1C6144BDC(*(_QWORD *)v73, *(_DWORD *)(v73 + 16), v68, &v320)
              ? *(_DWORD *)(v320 + 8)
              : 0;
          if (v69 >= v72 && (v72 < v69 || v71 >= v74))
          {
            v76 = *v10;
            v77 = *v315;
            v78 = *(_DWORD *)(*(_QWORD *)(*v10 + 24) + 24);
            v79 = *a3;
            v320 = 0;
            if (sub_1C6144BDC(*(_QWORD *)v79, *(_DWORD *)(v79 + 16), v76, &v320))
              v80 = *(_DWORD *)(v320 + 8);
            else
              v80 = 0;
            v81 = *(_DWORD *)(*(_QWORD *)(v77 + 24) + 24);
            v82 = *a3;
            v320 = 0;
            result = sub_1C6144BDC(*(_QWORD *)v82, *(_DWORD *)(v82 + 16), v77, &v320);
            if ((_DWORD)result)
              v83 = *(_DWORD *)(v320 + 8);
            else
              v83 = 0;
            if (v78 >= v81 && (v81 < v78 || v80 >= v83))
            {
              v122 = v10 + 1;
              do
              {
                v9 = v122;
                if (v122 >= v8)
                  break;
                v123 = *v122;
                v124 = *(_DWORD *)(*(_QWORD *)(v76 + 24) + 24);
                v125 = *a3;
                v320 = 0;
                v126 = sub_1C6144BDC(*(_QWORD *)v125, *(_DWORD *)(v125 + 16), v76, &v320)
                     ? *(_DWORD *)(v320 + 8)
                     : 0;
                v127 = *(_DWORD *)(*(_QWORD *)(v123 + 24) + 24);
                v128 = *a3;
                v320 = 0;
                result = sub_1C6144BDC(*(_QWORD *)v128, *(_DWORD *)(v128 + 16), v123, &v320);
                v129 = (_DWORD)result ? *(_DWORD *)(v320 + 8) : 0;
                v10 = (uint64_t *)v319;
                if (v124 < v127)
                  break;
                v122 = v9 + 1;
              }
              while (v127 < v124 || v126 >= v129);
            }
            else
            {
              v84 = v10 + 1;
              do
              {
                v9 = v84;
                v85 = *v84;
                v86 = *(_DWORD *)(*(_QWORD *)(v76 + 24) + 24);
                v87 = *a3;
                v320 = 0;
                if (sub_1C6144BDC(*(_QWORD *)v87, *(_DWORD *)(v87 + 16), v76, &v320))
                  v88 = *(_DWORD *)(v320 + 8);
                else
                  v88 = 0;
                v89 = *(_DWORD *)(*(_QWORD *)(v85 + 24) + 24);
                v90 = *a3;
                v320 = 0;
                result = sub_1C6144BDC(*(_QWORD *)v90, *(_DWORD *)(v90 + 16), v85, &v320);
                if ((_DWORD)result)
                  v91 = *(_DWORD *)(v320 + 8);
                else
                  v91 = 0;
                v10 = (uint64_t *)v319;
                if (v86 < v89)
                  break;
                v84 = v9 + 1;
              }
              while (v89 < v86 || v88 >= v91);
            }
            i = v8;
            if (v9 < v8)
            {
              for (i = a2 - 1; ; --i)
              {
                v94 = *i;
                v95 = *(_DWORD *)(*(_QWORD *)(v76 + 24) + 24);
                v96 = *a3;
                v320 = 0;
                v97 = sub_1C6144BDC(*(_QWORD *)v96, *(_DWORD *)(v96 + 16), v76, &v320)
                    ? *(_DWORD *)(v320 + 8)
                    : 0;
                v98 = *(_DWORD *)(*(_QWORD *)(v94 + 24) + 24);
                v99 = *a3;
                v320 = 0;
                result = sub_1C6144BDC(*(_QWORD *)v99, *(_DWORD *)(v99 + 16), v94, &v320);
                v100 = (_DWORD)result ? *(_DWORD *)(v320 + 8) : 0;
                v10 = (uint64_t *)v319;
                if (v95 >= v98 && (v98 < v95 || v97 >= v100))
                  break;
              }
            }
            while (v9 < i)
            {
              v102 = *v9;
              *v9 = *i;
              *i = v102;
              v103 = v9 + 1;
              do
              {
                v9 = v103;
                v104 = *v103;
                v105 = *(_DWORD *)(*(_QWORD *)(v76 + 24) + 24);
                v106 = *a3;
                v320 = 0;
                if (sub_1C6144BDC(*(_QWORD *)v106, *(_DWORD *)(v106 + 16), v76, &v320))
                  v107 = *(_DWORD *)(v320 + 8);
                else
                  v107 = 0;
                v108 = *(_DWORD *)(*(_QWORD *)(v104 + 24) + 24);
                v109 = *a3;
                v320 = 0;
                if (sub_1C6144BDC(*(_QWORD *)v109, *(_DWORD *)(v109 + 16), v104, &v320))
                  v110 = *(_DWORD *)(v320 + 8);
                else
                  v110 = 0;
                if (v105 < v108)
                  break;
                v103 = v9 + 1;
              }
              while (v108 < v105 || v107 >= v110);
              do
              {
                v113 = *--i;
                v112 = v113;
                v114 = *(_DWORD *)(*(_QWORD *)(v76 + 24) + 24);
                v115 = *a3;
                v320 = 0;
                if (sub_1C6144BDC(*(_QWORD *)v115, *(_DWORD *)(v115 + 16), v76, &v320))
                  v116 = *(_DWORD *)(v320 + 8);
                else
                  v116 = 0;
                v117 = *(_DWORD *)(*(_QWORD *)(v112 + 24) + 24);
                v118 = *a3;
                v320 = 0;
                result = sub_1C6144BDC(*(_QWORD *)v118, *(_DWORD *)(v118 + 16), v112, &v320);
                if ((_DWORD)result)
                  v119 = *(_DWORD *)(v320 + 8);
                else
                  v119 = 0;
                v10 = (uint64_t *)v319;
              }
              while (v114 < v117 || v117 >= v114 && v116 < v119);
            }
            v121 = v9 - 1;
            if (v9 - 1 != v10)
              *v10 = *v121;
            a5 = 0;
            *v121 = v76;
            v8 = a2;
            continue;
          }
        }
        v16 = *v10;
        for (j = 1; ; ++j)
        {
          v18 = v10[j];
          v19 = *(_DWORD *)(*(_QWORD *)(v18 + 24) + 24);
          v20 = *a3;
          v320 = 0;
          v21 = sub_1C6144BDC(*(_QWORD *)v20, *(_DWORD *)(v20 + 16), v18, &v320)
              ? *(_DWORD *)(v320 + 8)
              : 0;
          v22 = *(_DWORD *)(*(_QWORD *)(v16 + 24) + 24);
          v23 = *a3;
          v320 = 0;
          v24 = sub_1C6144BDC(*(_QWORD *)v23, *(_DWORD *)(v23 + 16), v16, &v320)
              ? *(_DWORD *)(v320 + 8)
              : 0;
          if (v19 >= v22)
          {
            v25 = v22 >= v19 && v21 < v24;
            if (!v25)
              break;
          }
        }
        v26 = (unint64_t)&v10[j];
        v27 = a2 - 1;
        if (j == 1)
        {
          v37 = a2 - 1;
          while (v26 < (unint64_t)(v37 + 1))
          {
            v28 = v37;
            v38 = *v37;
            v39 = *(_DWORD *)(*(_QWORD *)(*v37 + 24) + 24);
            v40 = *a3;
            v320 = 0;
            if (sub_1C6144BDC(*(_QWORD *)v40, *(_DWORD *)(v40 + 16), v38, &v320))
              v41 = *(_DWORD *)(v320 + 8);
            else
              v41 = 0;
            v42 = *(_DWORD *)(*(_QWORD *)(v16 + 24) + 24);
            v43 = *a3;
            v320 = 0;
            if (sub_1C6144BDC(*(_QWORD *)v43, *(_DWORD *)(v43 + 16), v16, &v320))
              v44 = *(_DWORD *)(v320 + 8);
            else
              v44 = 0;
            if (v39 >= v42)
            {
              v37 = v28 - 1;
              if (v42 < v39 || v41 >= v44)
                continue;
            }
            goto LABEL_54;
          }
          v28 = v37 + 1;
        }
        else
        {
          do
          {
            v28 = v27;
            v29 = *v27;
            v30 = *(_DWORD *)(*(_QWORD *)(*v27 + 24) + 24);
            v31 = *a3;
            v320 = 0;
            if (sub_1C6144BDC(*(_QWORD *)v31, *(_DWORD *)(v31 + 16), v29, &v320))
              v32 = *(_DWORD *)(v320 + 8);
            else
              v32 = 0;
            v33 = *(_DWORD *)(*(_QWORD *)(v16 + 24) + 24);
            v34 = *a3;
            v320 = 0;
            if (sub_1C6144BDC(*(_QWORD *)v34, *(_DWORD *)(v34 + 16), v16, &v320))
              v35 = *(_DWORD *)(v320 + 8);
            else
              v35 = 0;
            if (v30 < v33)
              break;
            v27 = v28 - 1;
          }
          while (v33 < v30 || v32 >= v35);
        }
LABEL_54:
        v9 = (uint64_t *)v26;
        if (v26 < (unint64_t)v28)
        {
          v46 = v28;
          do
          {
            v47 = *v9;
            *v9++ = *v46;
            *v46 = v47;
            while (1)
            {
              v48 = *v9;
              v49 = *(_DWORD *)(*(_QWORD *)(*v9 + 24) + 24);
              v50 = *a3;
              v320 = 0;
              v51 = sub_1C6144BDC(*(_QWORD *)v50, *(_DWORD *)(v50 + 16), v48, &v320)
                  ? *(_DWORD *)(v320 + 8)
                  : 0;
              v52 = *(_DWORD *)(*(_QWORD *)(v16 + 24) + 24);
              v53 = *a3;
              v320 = 0;
              v54 = sub_1C6144BDC(*(_QWORD *)v53, *(_DWORD *)(v53 + 16), v16, &v320)
                  ? *(_DWORD *)(v320 + 8)
                  : 0;
              if (v49 >= v52 && (v52 < v49 || v51 >= v54))
                break;
              ++v9;
            }
            v56 = v46 - 1;
            do
            {
              v46 = v56;
              v57 = *v56;
              v58 = *(_DWORD *)(*(_QWORD *)(*v56 + 24) + 24);
              v59 = *a3;
              v320 = 0;
              if (sub_1C6144BDC(*(_QWORD *)v59, *(_DWORD *)(v59 + 16), v57, &v320))
                v60 = *(_DWORD *)(v320 + 8);
              else
                v60 = 0;
              v61 = *(_DWORD *)(*(_QWORD *)(v16 + 24) + 24);
              v62 = *a3;
              v320 = 0;
              if (sub_1C6144BDC(*(_QWORD *)v62, *(_DWORD *)(v62 + 16), v16, &v320))
                v63 = *(_DWORD *)(v320 + 8);
              else
                v63 = 0;
              if (v58 < v61)
                break;
              v56 = v46 - 1;
            }
            while (v61 < v58 || v60 >= v63);
          }
          while (v9 < v46);
        }
        v65 = v9 - 1;
        v7 = (uint64_t *)v319;
        if (v9 - 1 != (uint64_t *)v319)
          v319->i64[0] = *v65;
        *v65 = v16;
        v8 = a2;
        if (v26 < (unint64_t)v28)
        {
LABEL_88:
          result = sub_1C49F71BC(v319, v9 - 1, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v66 = sub_1C49F8A68(v319->i64, v9 - 1, a3);
        result = sub_1C49F8A68(v9, a2, a3);
        if (!(_DWORD)result)
        {
          if (v66)
            continue;
          goto LABEL_88;
        }
        a2 = v9 - 1;
        if (!v66)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_1C49F8728(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t result;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;

  v6 = a2;
  v7 = a1;
  v8 = *a2;
  v9 = *a1;
  v10 = *(_DWORD *)(*(_QWORD *)(*a2 + 24) + 24);
  v11 = *a4;
  v50 = 0;
  if (sub_1C6144BDC(*(_QWORD *)v11, *(_DWORD *)(v11 + 16), v8, &v50))
    v12 = *(_DWORD *)(v50 + 8);
  else
    v12 = 0;
  v13 = *(_DWORD *)(*(_QWORD *)(v9 + 24) + 24);
  v14 = *a4;
  v50 = 0;
  if (sub_1C6144BDC(*(_QWORD *)v14, *(_DWORD *)(v14 + 16), v9, &v50))
    v15 = *(_DWORD *)(v50 + 8);
  else
    v15 = 0;
  if (v10 < v13 || (v13 >= v10 ? (v16 = v12 < v15) : (v16 = 0), v16))
  {
    v22 = *a3;
    v23 = *v6;
    v24 = *(_DWORD *)(*(_QWORD *)(*a3 + 24) + 24);
    v25 = *a4;
    v50 = 0;
    if (sub_1C6144BDC(*(_QWORD *)v25, *(_DWORD *)(v25 + 16), v22, &v50))
      v26 = *(_DWORD *)(v50 + 8);
    else
      v26 = 0;
    v27 = *(_DWORD *)(*(_QWORD *)(v23 + 24) + 24);
    v28 = *a4;
    v50 = 0;
    result = sub_1C6144BDC(*(_QWORD *)v28, *(_DWORD *)(v28 + 16), v23, &v50);
    if ((_DWORD)result)
      v30 = *(_DWORD *)(v50 + 8);
    else
      v30 = 0;
    if (v24 >= v27 && (v27 < v24 || v26 >= v30))
    {
      v41 = *v7;
      *v7 = *v6;
      *v6 = v41;
      v42 = *a3;
      v43 = *(_DWORD *)(*(_QWORD *)(*a3 + 24) + 24);
      v44 = *a4;
      v50 = 0;
      if (sub_1C6144BDC(*(_QWORD *)v44, *(_DWORD *)(v44 + 16), v42, &v50))
        v40 = *(_DWORD *)(v50 + 8);
      else
        v40 = 0;
      v48 = *(_DWORD *)(*(_QWORD *)(v41 + 24) + 24);
      v49 = *a4;
      v50 = 0;
      result = sub_1C6144BDC(*(_QWORD *)v49, *(_DWORD *)(v49 + 16), v41, &v50);
      if ((_DWORD)result)
        v47 = *(_DWORD *)(v50 + 8);
      else
        v47 = 0;
      if (v43 >= v48)
      {
        if (v48 < v43)
          return result;
        v7 = v6;
        v6 = a3;
LABEL_52:
        if (v40 >= v47)
          return result;
        goto LABEL_24;
      }
      v7 = v6;
    }
    v6 = a3;
LABEL_24:
    v31 = *v7;
    *v7 = *v6;
    *v6 = v31;
    return result;
  }
  v17 = *a3;
  v18 = *v6;
  v19 = *(_DWORD *)(*(_QWORD *)(*a3 + 24) + 24);
  v20 = *a4;
  v50 = 0;
  if (sub_1C6144BDC(*(_QWORD *)v20, *(_DWORD *)(v20 + 16), v17, &v50))
    v21 = *(_DWORD *)(v50 + 8);
  else
    v21 = 0;
  v32 = *(_DWORD *)(*(_QWORD *)(v18 + 24) + 24);
  v33 = *a4;
  v50 = 0;
  result = sub_1C6144BDC(*(_QWORD *)v33, *(_DWORD *)(v33 + 16), v18, &v50);
  if ((_DWORD)result)
    v34 = *(_DWORD *)(v50 + 8);
  else
    v34 = 0;
  if (v19 < v32 || v32 >= v19 && v21 < v34)
  {
    v35 = *v6;
    *v6 = *a3;
    *a3 = v35;
    v36 = *v6;
    v37 = *v7;
    v38 = *(_DWORD *)(*(_QWORD *)(*v6 + 24) + 24);
    v39 = *a4;
    v50 = 0;
    if (sub_1C6144BDC(*(_QWORD *)v39, *(_DWORD *)(v39 + 16), v36, &v50))
      v40 = *(_DWORD *)(v50 + 8);
    else
      v40 = 0;
    v45 = *(_DWORD *)(*(_QWORD *)(v37 + 24) + 24);
    v46 = *a4;
    v50 = 0;
    result = sub_1C6144BDC(*(_QWORD *)v46, *(_DWORD *)(v46 + 16), v37, &v50);
    if ((_DWORD)result)
      v47 = *(_DWORD *)(v50 + 8);
    else
      v47 = 0;
    if (v38 >= v45)
    {
      if (v45 < v38)
        return result;
      goto LABEL_52;
    }
    goto LABEL_24;
  }
  return result;
}

BOOL sub_1C49F8A68(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  int v82;
  int8x16_t *v83;
  uint64_t *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v34 = *(a2 - 1);
      v35 = *v5;
      v36 = *(_DWORD *)(*(_QWORD *)(v34 + 24) + 24);
      v37 = *v3;
      v87 = 0;
      if (sub_1C6144BDC(*(_QWORD *)v37, *(_DWORD *)(v37 + 16), v34, &v87))
        v38 = *(_DWORD *)(v87 + 8);
      else
        v38 = 0;
      v47 = *(_DWORD *)(*(_QWORD *)(v35 + 24) + 24);
      v48 = *v3;
      v87 = 0;
      if (sub_1C6144BDC(*(_QWORD *)v48, *(_DWORD *)(v48 + 16), v35, &v87))
        v49 = *(_DWORD *)(v87 + 8);
      else
        v49 = 0;
      if (v36 < v47 || (v47 >= v36 ? (v53 = v38 < v49) : (v53 = 0), v53))
      {
        v54 = *v5;
        *v5 = *(v4 - 1);
        *(v4 - 1) = v54;
      }
      return 1;
    case 3:
      sub_1C49F8728(v5, v5 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1C49F9038(v5, v5 + 1, v5 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v39 = v5 + 2;
      v40 = v5 + 3;
      sub_1C49F9038(v5, v5 + 1, v5 + 2, v5 + 3, a3);
      v41 = v4;
      v42 = *(v4 - 1);
      v43 = v5[3];
      v44 = *(_DWORD *)(*(_QWORD *)(v42 + 24) + 24);
      v45 = *v3;
      v87 = 0;
      if (sub_1C6144BDC(*(_QWORD *)v45, *(_DWORD *)(v45 + 16), v42, &v87))
        v46 = *(_DWORD *)(v87 + 8);
      else
        v46 = 0;
      v50 = *(_DWORD *)(*(_QWORD *)(v43 + 24) + 24);
      v51 = *v3;
      v87 = 0;
      if (sub_1C6144BDC(*(_QWORD *)v51, *(_DWORD *)(v51 + 16), v43, &v87))
        v52 = *(_DWORD *)(v87 + 8);
      else
        v52 = 0;
      if (v44 >= v50 && (v50 < v44 || v46 >= v52))
        return 1;
      v56 = *v40;
      *v40 = *(v41 - 1);
      *(v41 - 1) = v56;
      v57 = *v40;
      v58 = *v39;
      v59 = *(_DWORD *)(*(_QWORD *)(*v40 + 24) + 24);
      v60 = *v3;
      v87 = 0;
      if (sub_1C6144BDC(*(_QWORD *)v60, *(_DWORD *)(v60 + 16), v57, &v87))
        v61 = *(_DWORD *)(v87 + 8);
      else
        v61 = 0;
      v62 = *(_DWORD *)(*(_QWORD *)(v58 + 24) + 24);
      v63 = *v3;
      v87 = 0;
      if (sub_1C6144BDC(*(_QWORD *)v63, *(_DWORD *)(v63 + 16), v58, &v87))
        v64 = *(_DWORD *)(v87 + 8);
      else
        v64 = 0;
      if (v59 < v62 || (result = 1, v62 >= v59) && v61 < v64)
      {
        v65 = *v39;
        v66 = *v40;
        *v39 = *v40;
        *v40 = v65;
        v67 = v5[1];
        v68 = *(_DWORD *)(*(_QWORD *)(v66 + 24) + 24);
        v69 = *v3;
        v87 = 0;
        v70 = sub_1C6144BDC(*(_QWORD *)v69, *(_DWORD *)(v69 + 16), v66, &v87) ? *(_DWORD *)(v87 + 8) : 0;
        v71 = *(_DWORD *)(*(_QWORD *)(v67 + 24) + 24);
        v72 = *v3;
        v87 = 0;
        v73 = sub_1C6144BDC(*(_QWORD *)v72, *(_DWORD *)(v72 + 16), v67, &v87) ? *(_DWORD *)(v87 + 8) : 0;
        if (v68 < v71 || (result = 1, v71 >= v68) && v70 < v73)
        {
          v75 = v5[1];
          v74 = v5[2];
          v76 = *v5;
          v5[1] = v74;
          v5[2] = v75;
          v77 = *(_DWORD *)(*(_QWORD *)(v74 + 24) + 24);
          v78 = *v3;
          v87 = 0;
          v79 = sub_1C6144BDC(*(_QWORD *)v78, *(_DWORD *)(v78 + 16), v74, &v87) ? *(_DWORD *)(v87 + 8) : 0;
          v80 = *(_DWORD *)(*(_QWORD *)(v76 + 24) + 24);
          v81 = *v3;
          v87 = 0;
          v82 = sub_1C6144BDC(*(_QWORD *)v81, *(_DWORD *)(v81 + 16), v76, &v87) ? *(_DWORD *)(v87 + 8) : 0;
          v83 = (int8x16_t *)v5;
          if (v77 < v80 || (result = 1, v80 >= v77) && (v83 = (int8x16_t *)v5, v79 < v82))
          {
            *v83 = vextq_s8(*v83, *v83, 8uLL);
            return 1;
          }
        }
      }
      return result;
    default:
      v8 = v5 + 2;
      sub_1C49F8728(v5, v5 + 1, v5 + 2, a3);
      v9 = v5 + 3;
      if (v5 + 3 == v4)
        return 1;
      v10 = 0;
      v86 = 0;
      v84 = v4;
      break;
  }
  while (1)
  {
    v11 = *v9;
    v12 = *v8;
    v13 = *(_DWORD *)(*(_QWORD *)(*v9 + 24) + 24);
    v14 = *v3;
    v87 = 0;
    v15 = sub_1C6144BDC(*(_QWORD *)v14, *(_DWORD *)(v14 + 16), v11, &v87) ? *(_DWORD *)(v87 + 8) : 0;
    v16 = *(_DWORD *)(*(_QWORD *)(v12 + 24) + 24);
    v17 = *v3;
    v87 = 0;
    v18 = sub_1C6144BDC(*(_QWORD *)v17, *(_DWORD *)(v17 + 16), v12, &v87) ? *(_DWORD *)(v87 + 8) : 0;
    if (v13 < v16 || (v16 >= v13 ? (v19 = v15 < v18) : (v19 = 0), v19))
    {
      v20 = *v9;
      *v9 = *v8;
      v21 = v5;
      if (v8 != v5)
      {
        v22 = v3;
        v85 = v10;
        v23 = v10;
        do
        {
          v24 = (char *)v5 + v23;
          v25 = *(uint64_t *)((char *)v5 + v23 + 8);
          v26 = *(_DWORD *)(*(_QWORD *)(v20 + 24) + 24);
          v27 = *v22;
          v87 = 0;
          v28 = v5;
          if (sub_1C6144BDC(*(_QWORD *)v27, *(_DWORD *)(v27 + 16), v20, &v87))
            v29 = *(_DWORD *)(v87 + 8);
          else
            v29 = 0;
          v30 = *(_DWORD *)(*(_QWORD *)(v25 + 24) + 24);
          v31 = *v22;
          v87 = 0;
          if (sub_1C6144BDC(*(_QWORD *)v31, *(_DWORD *)(v31 + 16), v25, &v87))
            v32 = *(_DWORD *)(v87 + 8);
          else
            v32 = 0;
          if (v26 >= v30 && (v30 < v26 || v29 >= v32))
          {
            v5 = v28;
            v21 = (uint64_t *)((char *)v28 + v23 + 16);
            goto LABEL_33;
          }
          *((_QWORD *)v24 + 2) = *((_QWORD *)v24 + 1);
          v23 -= 8;
          v5 = v28;
        }
        while (v23 != -16);
        v21 = v28;
LABEL_33:
        v3 = v22;
        v4 = v84;
        v10 = v85;
      }
      *v21 = v20;
      if (++v86 == 8)
        return v9 + 1 == v4;
    }
    v8 = v9;
    v10 += 8;
    result = 1;
    if (++v9 == v4)
      return result;
  }
}

uint64_t sub_1C49F9038(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t result;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;

  sub_1C49F8728(a1, a2, a3, a5);
  v10 = *a4;
  v11 = *a3;
  v12 = *(_DWORD *)(*(_QWORD *)(*a4 + 24) + 24);
  v13 = *a5;
  v39 = 0;
  if (sub_1C6144BDC(*(_QWORD *)v13, *(_DWORD *)(v13 + 16), v10, &v39))
    v14 = *(_DWORD *)(v39 + 8);
  else
    v14 = 0;
  v15 = *(_DWORD *)(*(_QWORD *)(v11 + 24) + 24);
  v16 = *a5;
  v39 = 0;
  result = sub_1C6144BDC(*(_QWORD *)v16, *(_DWORD *)(v16 + 16), v11, &v39);
  if ((_DWORD)result)
    v18 = *(_DWORD *)(v39 + 8);
  else
    v18 = 0;
  if (v12 < v15 || (v15 >= v12 ? (v19 = v14 < v18) : (v19 = 0), v19))
  {
    v20 = *a3;
    *a3 = *a4;
    *a4 = v20;
    v21 = *a3;
    v22 = *a2;
    v23 = *(_DWORD *)(*(_QWORD *)(*a3 + 24) + 24);
    v24 = *a5;
    v39 = 0;
    if (sub_1C6144BDC(*(_QWORD *)v24, *(_DWORD *)(v24 + 16), v21, &v39))
      v25 = *(_DWORD *)(v39 + 8);
    else
      v25 = 0;
    v26 = *(_DWORD *)(*(_QWORD *)(v22 + 24) + 24);
    v27 = *a5;
    v39 = 0;
    result = sub_1C6144BDC(*(_QWORD *)v27, *(_DWORD *)(v27 + 16), v22, &v39);
    if ((_DWORD)result)
      v28 = *(_DWORD *)(v39 + 8);
    else
      v28 = 0;
    if (v23 < v26 || v26 >= v23 && v25 < v28)
    {
      v29 = *a2;
      *a2 = *a3;
      *a3 = v29;
      v30 = *a2;
      v31 = *a1;
      v32 = *(_DWORD *)(*(_QWORD *)(*a2 + 24) + 24);
      v33 = *a5;
      v39 = 0;
      if (sub_1C6144BDC(*(_QWORD *)v33, *(_DWORD *)(v33 + 16), v30, &v39))
        v34 = *(_DWORD *)(v39 + 8);
      else
        v34 = 0;
      v35 = *(_DWORD *)(*(_QWORD *)(v31 + 24) + 24);
      v36 = *a5;
      v39 = 0;
      result = sub_1C6144BDC(*(_QWORD *)v36, *(_DWORD *)(v36 + 16), v31, &v39);
      if ((_DWORD)result)
        v37 = *(_DWORD *)(v39 + 8);
      else
        v37 = 0;
      if (v32 < v35 || v35 >= v32 && v34 < v37)
      {
        v38 = *a1;
        *a1 = *a2;
        *a2 = v38;
      }
    }
  }
  return result;
}

uint64_t sub_1C49F9268()
{
  int v1;
  char *v2;
  int v3;
  __int128 v4;

  *(_QWORD *)&v4 = "Enable global fence placement.";
  *((_QWORD *)&v4 + 1) = 30;
  v3 = 0;
  LOBYTE(v1) = 1;
  v2 = (char *)&v1;
  sub_1C614F160(&v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7ECB80, &dword_1C475E000);
  *(_QWORD *)&v4 = "Specify size of MBB from which we allow to fences live out from the basic block.";
  *((_QWORD *)&v4 + 1) = 80;
  v3 = 0;
  v1 = -1;
  v2 = (char *)&v1;
  sub_1C614F230(&v4, &v3, (int **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7ECC40, &dword_1C475E000);
  *(_QWORD *)&v4 = "Whether to kill set-fences for IR and STK writes out of basic blocks.";
  *((_QWORD *)&v4 + 1) = 69;
  v3 = 0;
  LOBYTE(v1) = 0;
  v2 = (char *)&v1;
  sub_1C614F300((uint64_t)&unk_1ED7ECD00, "global-fence-placement-kill-non-waited-writes", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7ECD00, &dword_1C475E000);
  *(_QWORD *)&v4 = "Force applying a special technique of dependency killing by transitivity.";
  *((_QWORD *)&v4 + 1) = 73;
  v3 = 0;
  LOBYTE(v1) = 1;
  v2 = (char *)&v1;
  sub_1C614F300((uint64_t)&unk_1ED7ECDC0, "fence-placement-force-aggressive-transitivity", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7ECDC0, &dword_1C475E000);
  *(_QWORD *)&v4 = "Enable physical fence post-processing: validate fence placement and remove unneeded waits.";
  *((_QWORD *)&v4 + 1) = 90;
  v3 = 0;
  LOBYTE(v1) = 0;
  v2 = (char *)&v1;
  sub_1C614F3E4(&v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7ECE80, &dword_1C475E000);
  *(_QWORD *)&v4 = "Enable fence plancement for divergent hazards.";
  *((_QWORD *)&v4 + 1) = 46;
  v3 = 0;
  LOBYTE(v1) = 1;
  v2 = (char *)&v1;
  sub_1C614F300((uint64_t)&unk_1ED7ECF40, "fence-placement-divergent-hazards", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7ECF40, &dword_1C475E000);
  *(_QWORD *)&v4 = "Restrict physical fence count.";
  *((_QWORD *)&v4 + 1) = 30;
  LODWORD(v2) = 0;
  sub_1C614F4B4(&v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7ED000, &dword_1C475E000);
  *(_QWORD *)&v4 = "Print GIN-782 SWWA Debug thread-safely (agx-perf multithreaded-compatible)";
  *((_QWORD *)&v4 + 1) = 74;
  LOBYTE(v3) = 0;
  v2 = (char *)&v3;
  sub_1C614D990((uint64_t)&unk_1ED7ED0C0, "print-gin-782-debug", &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7ED0C0, &dword_1C475E000);
  *(_QWORD *)&v4 = "Minimal size for a batch of post-deactivation samples to force a wait for the samples on first encounterd imgwci.";
  *((_QWORD *)&v4 + 1) = 113;
  v3 = 0;
  v1 = 16;
  v2 = (char *)&v1;
  sub_1C614F564(&v4, &v3, (int **)&v2);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7ED180, &dword_1C475E000);
}

uint64_t sub_1C49F9518(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_1C4C915C4(**(unsigned __int16 **)(a1 + 16));
  if ((v6 & 0xFF00000000) == 0)
    llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
  v7 = v6;
  result = sub_1C4AD4FB8(a1, a2, (_QWORD *)(a3 + 8));
  if ((_DWORD)result != 3)
    __asm { BR              X11 }
  if (v7 <= 146)
  {
    switch(v7)
    {
      case ']':
      case 'b':
        v9 = 0x9600000000;
        v10 = 50;
        return v9 | v10;
      case '^':
      case 'd':
        v9 = 0x2700000000;
        v10 = 33;
        return v9 | v10;
      case '_':
      case 'a':
      case 'c':
        __break(1u);
        return result;
      case 'e':
      case 'f':
      case 'g':
      case 'h':
        goto LABEL_8;
      default:
        if (v7 == 64)
        {
          v9 = 0xFA00000000;
          v10 = 100;
        }
        else
        {
LABEL_8:
          v9 = 0x3000000000;
          v10 = 40;
        }
        break;
    }
  }
  else
  {
    v9 = 0x1F400000000;
    v10 = 300;
    if ((v7 - 164) >= 4)
    {
      v10 = 27;
      v9 = 0x2000000000;
    }
  }
  return v9 | v10;
}

uint64_t sub_1C49F972C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = sub_1C4C915C4(**(unsigned __int16 **)(a1 + 16));
  if ((v1 & 0xFF00000000) == 0)
    llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
  if ((_DWORD)v1 == 193)
  {
    v2 = 0x1500000000;
    v3 = 18;
  }
  else if ((_DWORD)v1 == 100)
  {
    v2 = 0x2200000000;
    v3 = 29;
  }
  else
  {
    v2 = 0x1900000000;
    v3 = 25;
  }
  return v2 | v3;
}

unint64_t sub_1C49F97A0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  _WORD *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unint64_t result;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32) + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6);
  v7 = (_WORD *)(*(_QWORD *)(a2 + 40) + 24 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 16) + 6));
  if ((v7[4] & 0x1FFF) != 0x1FFE)
  {
    if (!a3)
      goto LABEL_3;
LABEL_13:
    result = sub_1C614F9A4(a1);
    if (HIDWORD(result))
      return result;
    goto LABEL_3;
  }
  do
  {
    v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 176) + 200))(*(_QWORD *)(a2 + 176));
    v13 = *(_QWORD *)(a2 + 40);
  }
  while ((*(_WORD *)(v13 + 24 * v12 + 8) & 0x1FFF) == 0x1FFE);
  v7 = (_WORD *)(v13 + 24 * v12);
  if (a3)
    goto LABEL_13;
LABEL_3:
  if (!v7[6])
    return 1;
  v8 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a2 + 176) + 136) + 4 * (unsigned __int16)v7[5] + 2);
  v9 = 4 * (unsigned __int16)v7[6];
  while (*(v8 - 1) != 9)
  {
    v8 += 2;
    v9 -= 4;
    if (!v9)
      return 1;
  }
  v11 = *v8;
  if (v11 <= 1)
    return 1;
  else
    return v11;
}

uint64_t sub_1C49F98BC(_QWORD *a1, _QWORD *a2)
{
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  llvm::MachineBasicBlock *LoopLatch;
  unint64_t *v10;
  char *v11;
  unsigned int v12;
  char *v13;
  unint64_t FirstTerminator;
  int v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  llvm::AAResults *v23;
  uint64_t v24;
  unsigned __int16 v25;
  __int16 v26;
  __int16 v27;
  char *v28;
  uint64_t *v29;
  int v30;
  _OWORD *v31;
  int v32;
  unsigned int v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  llvm::MachineBasicBlock **v51;
  llvm::MachineBasicBlock *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  llvm::MachineBasicBlock *v58;
  int v59;
  int v60;
  _QWORD *v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t *v64;
  int v65;
  int v66;
  _QWORD *v67;
  unsigned int v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unsigned int *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  llvm::MachineBasicBlock **v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 v82;
  BOOL v83;
  uint64_t v84;
  char *v85;
  unsigned int v86;
  uint64_t v87;
  char *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  int v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  int v105;
  _OWORD *v106;
  int v107;
  unsigned int v108;
  uint64_t v109;
  int v110;
  unsigned int v111;
  int v112;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  int v119;
  unsigned __int8 v120;
  _QWORD *v121;
  _QWORD *v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  unint64_t *FirstInstrTerminator;
  int v128;
  BOOL v129[8];
  char *v130;
  char *v131;
  uint64_t v132;
  int v133;
  _BYTE v134[32];
  void *v135;
  uint64_t v136;
  _BYTE v137[16];
  char *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  _OWORD v142[4];
  void *v143;
  uint64_t v144;
  _QWORD v145[10];

  v145[8] = *MEMORY[0x1E0C80C00];
  v4 = atomic_load((unsigned __int8 *)&qword_1ED7ED260);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7ED260))
  {
    dword_1ED7ED248 = 16;
    __cxa_guard_release(&qword_1ED7ED260);
  }
  v5 = (uint64_t *)a2[1];
  v6 = (uint64_t *)a2[2];
  if (v5 == v6)
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = *v5++;
      v7 |= sub_1C49F98BC(a1, v8);
    }
    while (v5 != v6);
  }
  LoopLatch = (llvm::MachineBasicBlock *)llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopLatch((uint64_t)a2);
  if (!LoopLatch)
    return v7 & 1;
  v10 = (unint64_t *)LoopLatch;
  v11 = (char *)LoopLatch + 48;
  v12 = -1;
  v13 = (char *)LoopLatch + 48;
  do
  {
    v13 = (char *)*((_QWORD *)v13 + 1);
    ++v12;
  }
  while (v13 != v11);
  if (dword_1ED7ED248 < v12)
    return v7 & 1;
  FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(LoopLatch);
  if (v11 == (char *)FirstTerminator)
    return v7 & 1;
  while (**(_WORD **)(FirstTerminator + 16) != 305)
  {
    if ((*(_BYTE *)FirstTerminator & 4) == 0)
    {
      while ((*(_WORD *)(FirstTerminator + 44) & 8) != 0)
        FirstTerminator = *(_QWORD *)(FirstTerminator + 8);
    }
    FirstTerminator = *(_QWORD *)(FirstTerminator + 8);
    if ((char *)FirstTerminator == v11)
      return v7 & 1;
  }
  v15 = *(_DWORD *)(*(_QWORD *)(FirstTerminator + 32) + 4);
  if ((v15 & 0x80000000) == 0)
    return v7 & 1;
  v17 = *(_QWORD *)(*(_QWORD *)(a1[33] + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
  if (!v17)
    return v7 & 1;
  v18 = v17;
  if ((*(_DWORD *)v17 & 0x1000000) != 0)
  {
    v18 = v17;
    do
    {
      v18 = *(_QWORD *)(v18 + 24);
      if (!v18)
        return v7 & 1;
    }
    while ((*(_BYTE *)(v18 + 3) & 1) != 0);
  }
  while (1)
  {
    v18 = *(_QWORD *)(v18 + 24);
    if (!v18)
      break;
    if ((*(_BYTE *)(v18 + 3) & 1) == 0)
      return v7 & 1;
  }
  if ((*(_DWORD *)v17 & 0x1000000) != 0 || (v17 = *(_QWORD *)(v17 + 24)) != 0 && (*(_BYTE *)(v17 + 3) & 1) != 0)
    v19 = *(_QWORD *)(v17 + 8);
  else
    v19 = 0;
  v141 = 1;
  v142[0] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v142[1] = v142[0];
  v142[2] = v142[0];
  v142[3] = v142[0];
  v143 = v145;
  v144 = 0x800000000;
  v135 = v137;
  v136 = 0x400000000;
  v139 = 0;
  v140 = 0;
  v138 = (char *)&v139;
  v130 = v134;
  v131 = v134;
  v132 = 4;
  v133 = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v130, v19);
  v20 = *(_QWORD *)(v19 + 24) + 48;
  v128 = 1;
  if (v20 != v19)
  {
    while (1)
    {
      if (HIDWORD(v132) == v133)
      {
LABEL_99:
        v128 = 1;
        goto LABEL_100;
      }
      v21 = (char *)sub_1C477672C((uint64_t)&v130, v19);
      v22 = v131 == v130 ? (uint64_t *)((char *)&v132 + 4) : &v132;
      if (v21 != &v131[8 * *(unsigned int *)v22])
        break;
LABEL_83:
      v19 = *(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8;
      if (!v19 || (*(_BYTE *)v19 & 4) == 0)
      {
        while ((*(_WORD *)(v19 + 44) & 4) != 0)
          v19 = *(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8;
      }
      if (v19 == v20)
        goto LABEL_99;
    }
    v23 = (llvm::AAResults *)a1[34];
    v129[0] = 1;
    if (!llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)v19, v23, v129))
      goto LABEL_98;
    v24 = *(_QWORD *)(v19 + 16);
    v25 = *(_WORD *)v24 - 1;
    if (v25 <= 1u && (*(_BYTE *)(*(_QWORD *)(v19 + 32) + 48) & 8) != 0)
      goto LABEL_98;
    v26 = *(_WORD *)(v19 + 44);
    if ((v26 & 0xC) != 0 && (v26 & 4) == 0)
    {
      if (llvm::MachineInstr::hasPropertyInBundle(v19, 0x80000, 1))
        goto LABEL_98;
      v24 = *(_QWORD *)(v19 + 16);
      v25 = *(_WORD *)v24 - 1;
    }
    else if ((*(_BYTE *)(v24 + 10) & 8) != 0)
    {
      goto LABEL_98;
    }
    if (v25 <= 1u && (*(_BYTE *)(*(_QWORD *)(v19 + 32) + 48) & 0x20) != 0)
    {
LABEL_98:
      v128 = 0;
      goto LABEL_100;
    }
    v27 = *(_WORD *)(v19 + 44);
    if ((v27 & 0xC) != 0 && (v27 & 4) == 0)
    {
      if (llvm::MachineInstr::hasPropertyInBundle(v19, 0x1000000000, 1))
        goto LABEL_98;
    }
    else if ((*(_QWORD *)(v24 + 8) & 0x1000000000) != 0)
    {
      goto LABEL_98;
    }
    v28 = (char *)sub_1C477672C((uint64_t)&v130, v19);
    if (v131 == v130)
      v29 = (uint64_t *)((char *)&v132 + 4);
    else
      v29 = &v132;
    if (v28 != &v131[8 * *(unsigned int *)v29])
    {
      *(_QWORD *)v28 = -2;
      ++v133;
    }
    *(_QWORD *)v129 = v19;
    if ((v141 & 1) != 0)
    {
      v30 = 8;
      v31 = v142;
    }
    else
    {
      v30 = DWORD2(v142[0]);
      if (!DWORD2(v142[0]))
      {
        v40 = 0;
        goto LABEL_70;
      }
      v31 = *(_OWORD **)&v142[0];
    }
    v32 = v30 - 1;
    v33 = v32 & ((v19 >> 4) ^ (v19 >> 9));
    v34 = (_QWORD *)v31 + v33;
    v35 = *v34;
    if (v19 == *v34)
      goto LABEL_73;
    v36 = 0;
    v37 = 1;
    while (v35 != -4096)
    {
      if (v36)
        v38 = 0;
      else
        v38 = v35 == -8192;
      if (v38)
        v36 = v34;
      v39 = v33 + v37++;
      v33 = v39 & v32;
      v34 = (_QWORD *)v31 + v33;
      v35 = *v34;
      if (v19 == *v34)
        goto LABEL_73;
    }
    if (v36)
      v40 = v36;
    else
      v40 = v34;
LABEL_70:
    v41 = sub_1C486D2E8((uint64_t)&v141, (uint64_t)v129, v129, v40);
    *v41 = *(_QWORD *)v129;
    v42 = *(_QWORD *)v129;
    v43 = v144;
    if (v144 >= (unint64_t)HIDWORD(v144))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v143, (uint64_t)v145, v144 + 1, 8);
      v43 = v144;
    }
    *((_QWORD *)v143 + v43) = v42;
    LODWORD(v144) = v144 + 1;
LABEL_73:
    v44 = *(unsigned int *)(v19 + 40);
    if ((_DWORD)v44)
    {
      v45 = 0;
      v46 = 32 * v44;
      do
      {
        v47 = *(_QWORD *)(v19 + 32);
        if ((*(_DWORD *)(v47 + v45) & 0x30000FF) == 0)
        {
          v48 = *(_DWORD *)(v47 + v45 + 4);
          if ((v48 & 0x80000000) == 0)
            goto LABEL_98;
          v49 = *(_QWORD *)(*(_QWORD *)(a1[33] + 24) + 16 * (v48 & 0x7FFFFFFF) + 8);
          if ((*(_BYTE *)(v49 + 3) & 1) == 0)
            v49 = *(_QWORD *)(v49 + 24);
          v50 = *(_QWORD *)(v49 + 8);
          if (*(_QWORD *)(v50 + 24) == *(_QWORD *)(v19 + 24))
          {
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v130, v50);
          }
          else
          {
            *(_DWORD *)v129 = v48;
            sub_1C4854E58((uint64_t)&v135, (unsigned int *)v129);
          }
        }
        v45 += 32;
      }
      while (v46 != v45);
    }
    goto LABEL_83;
  }
LABEL_100:
  if (v131 != v130)
    free(v131);
  if (!v128)
    goto LABEL_166;
  v51 = *(llvm::MachineBasicBlock ***)(sub_1C49FA70C(a1[36], (uint64_t)v10) + 8);
  if (!v51)
    goto LABEL_166;
  v52 = *v51;
  if (!*v51)
    goto LABEL_166;
  while (1)
  {
    v53 = a1[35];
    v54 = *(_DWORD *)(v53 + 264);
    if (!v54)
    {
LABEL_152:
      v79 = sub_1C477672C((uint64_t)(a2 + 7), (uint64_t)v52);
      v80 = a2[8];
      v81 = 72;
      if (v80 == a2[7])
        v81 = 76;
      if (v79 == (_QWORD *)(v80 + 8 * *(unsigned int *)((char *)a2 + v81)))
        goto LABEL_166;
      v82 = atomic_load((unsigned __int8 *)&qword_1ED7ED258);
      if ((v82 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7ED258))
      {
        byte_1ED7ED241 = 1;
        __cxa_guard_release(&qword_1ED7ED258);
      }
      if (byte_1ED7ED241)
      {
        if (!v52)
          goto LABEL_166;
      }
      else
      {
        v83 = llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::properlyDominates(*(_QWORD *)(a1[37] + 248), (uint64_t)v10, (uint64_t)v52);
        if (!v52 || !v83)
          goto LABEL_166;
      }
      v84 = v144;
      if (!(_DWORD)v144)
        goto LABEL_165;
      v85 = (char *)v143;
      v86 = -1;
      v87 = *(_QWORD *)(*(_QWORD *)v143 + 24) + 48;
      do
      {
        v87 = *(_QWORD *)(v87 + 8);
        ++v86;
      }
      while (v87 != *(_QWORD *)(*(_QWORD *)v143 + 24) + 48);
      if ((unint64_t)v144 + 8 < v86)
      {
LABEL_165:
        LOBYTE(v7) = 0;
        goto LABEL_166;
      }
      if (*(llvm::MachineBasicBlock **)a2[4] == v52 && a2[1] != a2[2])
      {
        v120 = atomic_load((unsigned __int8 *)&qword_1ED7ED250);
        if ((v120 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7ED250))
        {
          dword_1ED7ED244 = 500;
          __cxa_guard_release(&qword_1ED7ED250);
        }
        v121 = (_QWORD *)a2[4];
        v122 = (_QWORD *)a2[5];
        if (v122 != v121)
        {
          v123 = 0;
          do
          {
            --v123;
            v124 = *v121 + 48;
            do
            {
              v124 = *(_QWORD *)(v124 + 8);
              ++v123;
            }
            while (v124 != *v121 + 48);
            ++v121;
          }
          while (v121 != v122);
          if (v123 > dword_1ED7ED244)
            goto LABEL_165;
        }
        v84 = v144;
        if (!(_DWORD)v144)
        {
LABEL_247:
          LOBYTE(v7) = 1;
          goto LABEL_166;
        }
        v85 = (char *)v143;
      }
      v88 = &v85[8 * v84];
      v89 = 0;
      do
      {
        v90 = *(_QWORD *)v85;
        v91 = *(_QWORD *)(*(_QWORD *)v85 + 16);
        if (*(_WORD *)v91 != 10)
        {
          v92 = *(unsigned __int8 *)(v91 + 4);
          if ((*(_BYTE *)(v91 + 8) & 2) == 0 || (v117 = *(_DWORD *)(v90 + 40), v117 == v92))
          {
            v93 = *(unsigned __int8 *)(v91 + 4);
          }
          else
          {
            v118 = v117 - 1;
            v93 = *(unsigned __int8 *)(v91 + 4);
            do
            {
              v119 = *(_DWORD *)(*(_QWORD *)(v90 + 32) + 32 * v92);
              if ((v119 & 0x10000FF) != 0x1000000)
                break;
              v93 += (v119 & 0x2000000) == 0;
              if (v118 == v92)
                break;
              ++v92;
            }
            while ((v119 & 0x2000000) == 0);
          }
          v94 = *(_QWORD *)(v91 + 32);
          if (v94)
          {
            v95 = -1;
            do
              ++v95;
            while (*(_WORD *)(v94 + 2 * v95));
          }
          else
          {
            v95 = 0;
          }
          if (v95 + v93 != 1)
            goto LABEL_165;
          v96 = *(_QWORD *)(v90 + 32);
          if (*(_BYTE *)v96)
            goto LABEL_165;
          v97 = a1[33];
          v98 = *(unsigned int *)(v96 + 4);
          if ((v98 & 0x80000000) != 0)
            v99 = (uint64_t *)(*(_QWORD *)(v97 + 24) + 16 * (v98 & 0x7FFFFFFF) + 8);
          else
            v99 = (uint64_t *)(*(_QWORD *)(v97 + 272) + 8 * v98);
          v100 = *v99;
          if (v100)
          {
            while ((*(_BYTE *)(v100 + 3) & 1) != 0)
            {
              v100 = *(_QWORD *)(v100 + 24);
              if (!v100)
                goto LABEL_193;
            }
            while (1)
            {
              v100 = *(_QWORD *)(v100 + 24);
              if (!v100)
                break;
              if ((*(_BYTE *)(v100 + 3) & 1) == 0)
                goto LABEL_193;
            }
          }
          else
          {
LABEL_193:
            if ((v98 & 0x80000000) != 0)
              v101 = (uint64_t *)(*(_QWORD *)(v97 + 24) + 16 * (v98 & 0x7FFFFFFF) + 8);
            else
              v101 = (uint64_t *)(*(_QWORD *)(v97 + 272) + 8 * v98);
            v102 = *v101;
            if (*v101)
            {
              while ((*(_BYTE *)(v102 + 3) & 1) != 0)
              {
                v102 = *(_QWORD *)(v102 + 24);
                if (!v102)
                  goto LABEL_199;
              }
              v103 = 0;
              v104 = *(_QWORD *)(v102 + 8);
LABEL_204:
              if ((v141 & 1) != 0)
              {
                v105 = 8;
                v106 = v142;
LABEL_206:
                v107 = v105 - 1;
                v108 = v107 & ((v104 >> 4) ^ (v104 >> 9));
                v109 = *((_QWORD *)v106 + v108);
                if (v104 == v109)
                  goto LABEL_222;
                v110 = 1;
                while (v109 != -4096)
                {
                  v111 = v108 + v110++;
                  v108 = v111 & v107;
                  v109 = *((_QWORD *)v106 + v108);
                  if (v104 == v109)
                  {
LABEL_222:
                    while (1)
                    {
                      v102 = *(_QWORD *)(v102 + 24);
                      if (!v102)
                        goto LABEL_200;
                      if ((*(_BYTE *)(v102 + 3) & 1) == 0 && *(_QWORD *)(v102 + 8) != v104)
                      {
                        v104 = *(_QWORD *)(v102 + 8);
                        goto LABEL_204;
                      }
                    }
                  }
                }
              }
              else
              {
                v105 = DWORD2(v142[0]);
                if (DWORD2(v142[0]))
                {
                  v106 = *(_OWORD **)&v142[0];
                  goto LABEL_206;
                }
              }
              v112 = **(unsigned __int16 **)(v104 + 16);
              if (v112 == 69 || v112 == 0)
              {
                v114 = sub_1C477672C((uint64_t)(a2 + 7), *(_QWORD *)(v104 + 24));
                v115 = a2[8];
                v116 = 72;
                if (v115 == a2[7])
                  v116 = 76;
                if (v114 != (_QWORD *)(v115 + 8 * *(unsigned int *)((char *)a2 + v116)))
                {
                  v104 = *(_QWORD *)(v102 + 8);
                  v103 = 1;
                  goto LABEL_222;
                }
              }
              goto LABEL_165;
            }
LABEL_199:
            v103 = 0;
LABEL_200:
            v89 += v103 & 1;
          }
        }
        v85 += 8;
      }
      while (v85 != v88);
      if (v89 > 2)
        goto LABEL_165;
      if ((_DWORD)v144)
      {
        v125 = 8 * v144;
        v126 = (char *)v143 - 8;
        LOBYTE(v7) = 1;
        do
        {
          FirstInstrTerminator = (unint64_t *)llvm::MachineBasicBlock::getFirstInstrTerminator(v52);
          sub_1C48532D0((unint64_t *)v52, FirstInstrTerminator, v10, *(unint64_t **)&v126[v125]);
          v125 -= 8;
        }
        while (v125);
        goto LABEL_166;
      }
      goto LABEL_247;
    }
    v55 = *(_QWORD *)(v53 + 248);
    v56 = v54 - 1;
    v57 = v56 & ((v52 >> 4) ^ (v52 >> 9));
    v58 = *(llvm::MachineBasicBlock **)(v55 + 16 * v57);
    if (v52 != v58)
    {
      v59 = 1;
      while (v58 != (llvm::MachineBasicBlock *)-4096)
      {
        v60 = v57 + v59++;
        v57 = v60 & v56;
        v58 = *(llvm::MachineBasicBlock **)(v55 + 16 * v57);
        if (v52 == v58)
          goto LABEL_110;
      }
LABEL_114:
      v62 = 0;
      goto LABEL_115;
    }
LABEL_110:
    v61 = *(_QWORD **)(v55 + 16 * v57 + 8);
    if (!v61)
      goto LABEL_114;
    v62 = 0;
    do
    {
      v61 = (_QWORD *)*v61;
      ++v62;
    }
    while (v61);
LABEL_115:
    v63 = v56 & ((v10 >> 4) ^ (v10 >> 9));
    v64 = *(unint64_t **)(v55 + 16 * v63);
    if (v64 != v10)
    {
      v65 = 1;
      while (v64 != (unint64_t *)-4096)
      {
        v66 = v63 + v65++;
        v63 = v66 & v56;
        v64 = *(unint64_t **)(v55 + 16 * v63);
        if (v64 == v10)
          goto LABEL_119;
      }
LABEL_123:
      v68 = 0;
      goto LABEL_124;
    }
LABEL_119:
    v67 = *(_QWORD **)(v55 + 16 * v63 + 8);
    if (!v67)
      goto LABEL_123;
    v68 = 0;
    do
    {
      v67 = (_QWORD *)*v67;
      ++v68;
    }
    while (v67);
LABEL_124:
    if (v62 <= v68)
      goto LABEL_152;
    if (v140)
      v69 = v138;
    else
      v69 = (char *)v135;
    v70 = (char *)v135 + 4 * v136;
    if (v140)
      v70 = (char *)&v139;
    if (v69 != v70)
      break;
LABEL_149:
    v78 = *(llvm::MachineBasicBlock ***)(sub_1C49FA70C(a1[36], (uint64_t)v52) + 8);
    if (v78)
    {
      v52 = *v78;
      if (*v78)
        continue;
    }
    goto LABEL_166;
  }
  v71 = a1[33];
  while (1)
  {
    v72 = (unsigned int *)(v69 + 28);
    if (!v140)
      v72 = (unsigned int *)v69;
    v73 = *v72;
    if ((v73 & 0x80000000) != 0)
      v74 = (uint64_t *)(*(_QWORD *)(v71 + 24) + 16 * (v73 & 0x7FFFFFFF) + 8);
    else
      v74 = (uint64_t *)(*(_QWORD *)(v71 + 272) + 8 * v73);
    v75 = *v74;
    if ((*(_BYTE *)(v75 + 3) & 1) == 0)
      v75 = *(_QWORD *)(v75 + 24);
    if (*(llvm::MachineBasicBlock **)(*(_QWORD *)(v75 + 8) + 24) == v52)
      break;
    if (v140)
    {
      v76 = (char *)*((_QWORD *)v69 + 1);
      if (v76)
      {
        do
        {
          v77 = v76;
          v76 = *(char **)v76;
        }
        while (v76);
      }
      else
      {
        do
        {
          v77 = (char *)*((_QWORD *)v69 + 2);
          v38 = *(_QWORD *)v77 == (_QWORD)v69;
          v69 = v77;
        }
        while (!v38);
      }
    }
    else
    {
      v77 = v69 + 4;
    }
    v69 = v77;
    if (v77 == v70)
      goto LABEL_149;
  }
LABEL_166:
  sub_1C47655E8((uint64_t)&v138, v139);
  if (v135 != v137)
    free(v135);
  if (v143 != v145)
    free(v143);
  if ((v141 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)&v142[0], 8);
  return v7 & 1;
}

uint64_t sub_1C49FA4E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *v8;
  void **v9;
  void *v10;
  void **v11;
  void *v12;
  void **v13;
  void *v14;
  uint64_t v15;
  _QWORD **v16;
  _QWORD **v17;
  int v18;
  _QWORD *v20;

  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, *(const llvm::Function **)a2) & 1) != 0)
    goto LABEL_11;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 248) = v4;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 256) = v5;
  *(_QWORD *)(a1 + 264) = v6;
  v7 = **(void ****)(a1 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != &llvm::MachineLoopInfo::ID);
  *(_QWORD *)(a1 + 280) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::MachineLoopInfo::ID);
  v9 = **(void ****)(a1 + 8);
  do
  {
    v10 = *v9;
    v9 += 2;
  }
  while (v10 != &llvm::MachineDominatorTree::ID);
  *(_QWORD *)(a1 + 288) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), &llvm::MachineDominatorTree::ID);
  v11 = **(void ****)(a1 + 8);
  do
  {
    v12 = *v11;
    v11 += 2;
  }
  while (v12 != &llvm::MachinePostDominatorTree::ID);
  *(_QWORD *)(a1 + 296) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), &llvm::MachinePostDominatorTree::ID);
  v13 = **(void ****)(a1 + 8);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != &llvm::AAResultsWrapperPass::ID);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), &llvm::AAResultsWrapperPass::ID)+ 32);
  v15 = *(_QWORD *)(a1 + 280);
  v16 = *(_QWORD ***)(v15 + 272);
  v17 = *(_QWORD ***)(v15 + 280);
  if (v16 == v17)
  {
LABEL_11:
    LOBYTE(v18) = 0;
  }
  else
  {
    v18 = 0;
    do
    {
      v20 = *v16++;
      v18 |= sub_1C49F98BC((_QWORD *)a1, v20);
    }
    while (v16 != v17);
  }
  return v18 & 1;
}

uint64_t sub_1C49FA650(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeMachineLoopInfoPass((uint64_t)a1);
  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeMachinePostDominatorTreePass(a1, v2);
  llvm::initializeAAResultsWrapperPassPass(a1, v3);
  v4 = operator new();
  *(_QWORD *)v4 = "AGX3FlagDefHoist";
  *(_QWORD *)(v4 + 8) = 16;
  *(_QWORD *)(v4 + 16) = "agx3-flag-def-hoist";
  *(_QWORD *)(v4 + 24) = 19;
  *(_QWORD *)(v4 + 32) = &unk_1ED7ED240;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C614FC24;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

const char *sub_1C49FA6FC()
{
  return "AGX3 flag def hoisting pass";
}

uint64_t sub_1C49FA70C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;

  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)a1);
  v4 = *(_QWORD *)(a1 + 1320);
  v5 = *(_QWORD *)(v4 + 24);
  v6 = *(unsigned int *)(v4 + 40);
  if ((_DWORD)v6)
  {
    LODWORD(v7) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v8 = (uint64_t *)(v5 + 16 * v7);
    v9 = *v8;
    if (*v8 == a2)
      goto LABEL_8;
    v10 = 1;
    while (v9 != -4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v9 = *(_QWORD *)(v5 + 16 * v7);
      if (v9 == a2)
      {
        v8 = (uint64_t *)(v5 + 16 * v7);
        goto LABEL_8;
      }
    }
  }
  v8 = (uint64_t *)(v5 + 16 * v6);
LABEL_8:
  if (v8 == (uint64_t *)(v5 + 16 * v6))
    return 0;
  else
    return v8[1];
}

uint64_t sub_1C49FA7AC(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1ED7ED270) = &off_1E7FA9978;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7ED278);
  if (v3 != -1)
  {
    v7[0] = sub_1C49FA86C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7ED278, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C49FA86C(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeSlotIndexesPass(a1);
  llvm::initializeLiveIntervalsPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "AGX3FlagToGPRSpiller";
  *(_QWORD *)(v2 + 8) = 20;
  *(_QWORD *)(v2 + 16) = "agx3-flag-to-gpr-spiller";
  *(_QWORD *)(v2 + 24) = 24;
  *(_QWORD *)(v2 + 32) = &unk_1ED7ED270;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C49FB9C4;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void sub_1C49FA908(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C49FA99C(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C49FAA28()
{
  return "AGX3 FlagR to GPR Spiller pass";
}

void *sub_1C49FAA38(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::LiveIntervals::ID);
  *((_BYTE *)this + 160) = 1;
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

BOOL sub_1C49FAA98(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t i;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  _DWORD *v21;
  unsigned int v22;
  uint64_t v23;
  int *v24;
  int v25;
  int v26;
  int v27;
  int IncompleteVirtualRegister;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  _DWORD *v33;
  int v34;
  _DWORD *v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  _DWORD *v42;
  int v43;
  BOOL v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  llvm::MachineFunction *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  _BOOL8 v82;
  _DWORD *v84;
  int *v85;
  uint64_t v86;
  int *v87;
  int *v88;
  uint64_t v89;
  llvm::LiveInterval *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v96;
  uint64_t v97;
  int *v98;
  int v99;
  const llvm::LiveRange **v100;
  uint64_t v101;
  const llvm::LiveRange *v102;
  _BOOL4 v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t *v109;
  _DWORD *v110;
  _DWORD *v111;
  uint64_t v112;
  unsigned int v113;
  _DWORD v114[4];
  void *v115;
  uint64_t v116;
  _DWORD v117[8];
  void *v118;
  uint64_t v119;
  _BYTE v120[48];
  uint64_t (**v121)();
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  if (!byte_1EF8EF8C0)
    return 0;
  v3 = a2 + 320;
  if (*(_QWORD *)(a2 + 320) == a2 + 320)
    return 0;
  v5 = *(_QWORD *)(a2 + 48);
  v108 = *(_QWORD *)(a2 + 56);
  if (!v5)
  {
    v5 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 8) + 216))(*(_QWORD *)(a2 + 8), a2 + 128, a2);
    *(_QWORD *)(a2 + 48) = v5;
  }
  *(_QWORD *)(a1 + 272) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 256) = v6;
  *(_QWORD *)(a1 + 248) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6);
  *(_QWORD *)(a1 + 264) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 256) + 176))(*(_QWORD *)(a1 + 256));
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 40);
  v7 = **(void ****)(a1 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != &llvm::LiveIntervals::ID);
  *(_QWORD *)(a1 + 288) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::LiveIntervals::ID);
  v118 = v120;
  v119 = 0x600000000;
  v9 = *(_QWORD *)(a2 + 328);
  if (v9 == v3)
    return 0;
  v10 = 0;
  do
  {
    for (i = *(_QWORD *)(v9 + 56); i != v9 + 48; i = *(_QWORD *)(i + 8))
    {
      v12 = **(unsigned __int16 **)(i + 16);
      if (v12 != 332 && v12 != 356)
      {
        v13 = sub_1C4C915C4(v12);
        if ((v13 & 0xFF00000000) == 0 || (_DWORD)v13 != 59 && (_DWORD)v13 != 148 && (_DWORD)v13 != 88)
          goto LABEL_16;
        v14 = *(_QWORD *)(i + 48);
        if (v14 < 8)
          goto LABEL_16;
        if ((v14 & 7) != 0)
        {
          if ((*(_QWORD *)(i + 48) & 7) != 3
            || (v14 & 0xFFFFFFFFFFFFFFF8) == 0
            || *(_DWORD *)(v14 & 0xFFFFFFFFFFFFFFF8) != 1)
          {
            goto LABEL_16;
          }
        }
        else
        {
          v14 &= 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(i + 48) = v14;
        }
        if ((v14 & 7) != 0)
        {
          v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          v15 = v14 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(i + 48) = v15;
        }
        if (*(_DWORD *)(v15 + 16))
          goto LABEL_16;
      }
      if (v10 >= HIDWORD(v119))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, (uint64_t)v120, v10 + 1, 8);
        v10 = v119;
      }
      *((_QWORD *)v118 + v10) = i;
      v10 = v119 + 1;
      LODWORD(v119) = v119 + 1;
LABEL_16:
      if ((*(_BYTE *)i & 4) == 0)
      {
        while ((*(_WORD *)(i + 44) & 8) != 0)
          i = *(_QWORD *)(i + 8);
      }
    }
    v9 = *(_QWORD *)(v9 + 8);
  }
  while (v9 != v3);
  v16 = (uint64_t *)v118;
  v103 = v10 != 0;
  if (!v10)
    goto LABEL_217;
  v111 = 0;
  v112 = 0;
  v113 = 0;
  v107 = sub_1C4C2FD5C(356);
  v106 = sub_1C4C2FD5C(332);
  v105 = sub_1C4C2FD5C(356);
  v104 = sub_1C4C2FD5C(332);
  v109 = &v16[v10];
  while (2)
  {
    v17 = *v16;
    v18 = **(unsigned __int16 **)(*v16 + 16);
    if (v18 == 356 || v18 == 332)
    {
      v19 = v107;
      if (v18 != 356)
        v19 = v106;
    }
    else
    {
      v19 = 1;
    }
    v20 = *(_DWORD *)(*(_QWORD *)(v17 + 32) + 32 * v19 + 16);
    v21 = v111;
    v22 = v113;
    if (v113)
    {
      LODWORD(v23) = (v113 - 1) & (37 * v20);
      v24 = &v111[2 * v23];
      v25 = *v24;
      if (*v24 != v20)
      {
        v26 = 1;
        while (v25 != 0x7FFFFFFF)
        {
          v27 = v23 + v26++;
          v23 = v27 & (v113 - 1);
          v25 = v111[2 * v23];
          if (v25 == v20)
          {
            v24 = &v111[2 * v23];
            goto LABEL_53;
          }
        }
        goto LABEL_52;
      }
    }
    else
    {
LABEL_52:
      v24 = &v111[2 * v113];
    }
LABEL_53:
    if (&v111[2 * v113] == v24)
    {
      v29 = *(_QWORD *)(a1 + 280);
      IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v29, "", 0);
      *(_QWORD *)(*(_QWORD *)(v29 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7FB1B88;
      v30 = *(_QWORD *)(v29 + 8);
      if (v30)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30);
        if (v22)
          goto LABEL_57;
      }
      else if (v22)
      {
LABEL_57:
        v31 = v22 - 1;
        v32 = (v22 - 1) & (37 * v20);
        v33 = &v21[2 * v32];
        v34 = *v33;
        if (v20 == *v33)
        {
LABEL_101:
          v33[1] = IncompleteVirtualRegister;
          goto LABEL_102;
        }
        v35 = 0;
        v36 = 1;
        while (v34 != 0x7FFFFFFF)
        {
          if (v35)
            v37 = 0;
          else
            v37 = v34 == 0x80000000;
          if (v37)
            v35 = v33;
          v38 = v32 + v36++;
          v32 = v38 & v31;
          v33 = &v21[2 * (v38 & v31)];
          v34 = *v33;
          if (v20 == *v33)
            goto LABEL_101;
        }
        if (v35)
          v33 = v35;
LABEL_72:
        if (4 * (int)v112 + 4 >= 3 * v22)
        {
          sub_1C49FB7A8((uint64_t)&v111, 2 * v22);
          if (v113)
          {
            v46 = v113 - 1;
            v47 = (v113 - 1) & (37 * v20);
            v33 = &v111[2 * v47];
            v48 = *v33;
            if (v20 != *v33)
            {
              v42 = 0;
              v49 = 1;
              while (v48 != 0x7FFFFFFF)
              {
                if (v42)
                  v50 = 0;
                else
                  v50 = v48 == 0x80000000;
                if (v50)
                  v42 = v33;
                v51 = v47 + v49++;
                v47 = v51 & v46;
                v33 = &v111[2 * (v51 & v46)];
                v48 = *v33;
                if (v20 == *v33)
                  goto LABEL_98;
              }
              goto LABEL_96;
            }
LABEL_98:
            LODWORD(v112) = v112 + 1;
            if (*v33 != 0x7FFFFFFF)
              --HIDWORD(v112);
            *v33 = v20;
            v33[1] = 0;
            goto LABEL_101;
          }
        }
        else
        {
          if (v22 + ~(_DWORD)v112 - HIDWORD(v112) > v22 >> 3)
            goto LABEL_98;
          sub_1C49FB7A8((uint64_t)&v111, v22);
          if (v113)
          {
            v39 = v113 - 1;
            v40 = (v113 - 1) & (37 * v20);
            v33 = &v111[2 * v40];
            v41 = *v33;
            if (v20 != *v33)
            {
              v42 = 0;
              v43 = 1;
              while (v41 != 0x7FFFFFFF)
              {
                if (v42)
                  v44 = 0;
                else
                  v44 = v41 == 0x80000000;
                if (v44)
                  v42 = v33;
                v45 = v40 + v43++;
                v40 = v45 & v39;
                v33 = &v111[2 * (v45 & v39)];
                v41 = *v33;
                if (v20 == *v33)
                  goto LABEL_98;
              }
LABEL_96:
              if (v42)
                v33 = v42;
              goto LABEL_98;
            }
            goto LABEL_98;
          }
        }
        v33 = 0;
        goto LABEL_98;
      }
      v33 = 0;
      goto LABEL_72;
    }
    IncompleteVirtualRegister = v24[1];
LABEL_102:
    if (v18 == 356 || v18 == 332)
    {
      v52 = *(_QWORD *)(v17 + 24);
      v53 = **(unsigned __int16 **)(v17 + 16);
      if (v53 == 356)
        v54 = v105;
      else
        v54 = v104;
      v55 = *(_DWORD *)(*(_QWORD *)(v17 + 32) + 32 * v54 + 4);
      v124 = 0u;
      v125 = 0u;
      v122 = 0u;
      v123 = 0u;
      v56 = *(_QWORD *)(v52 + 32);
      v121 = &off_1E816EC08;
      *(_QWORD *)&v122 = v56;
      *(_QWORD *)&v123 = *(_QWORD *)(v56 + 40);
      *((_QWORD *)&v122 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v56 + 16) + 104))(*(_QWORD *)(v56 + 16));
      v115 = 0;
      if (*((_QWORD *)&v123 + 1))
      {
        llvm::MetadataTracking::untrack((uint64_t)&v123 + 8, *((unsigned __int8 **)&v123 + 1));
        *((_QWORD *)&v123 + 1) = v115;
        if (v115)
          llvm::MetadataTracking::retrack((uint64_t)&v115, (unsigned __int8 *)v115, (uint64_t)&v123 + 8);
      }
      else
      {
        *((_QWORD *)&v123 + 1) = 0;
      }
      *((_QWORD *)&v124 + 1) = v17;
      *(_QWORD *)&v125 = 0;
      *(_QWORD *)&v124 = *(_QWORD *)(v17 + 24);
      *((_QWORD *)&v124 + 1) = v17;
      if ((__int128 *)(v17 + 56) != (__int128 *)((char *)&v123 + 8))
      {
        if (*((_QWORD *)&v123 + 1))
          llvm::MetadataTracking::untrack((uint64_t)&v123 + 8, *((unsigned __int8 **)&v123 + 1));
        *((_QWORD *)&v123 + 1) = *(_QWORD *)(v17 + 56);
        if (*((_QWORD *)&v123 + 1))
          llvm::MetadataTracking::track((uint64_t)&v123 + 8, *((unsigned __int8 **)&v123 + 1), 2);
      }
      if (v53 == 356)
        v57 = v55;
      else
        v57 = IncompleteVirtualRegister;
      if (v53 == 356)
        v58 = IncompleteVirtualRegister;
      else
        v58 = v55;
      v114[0] = v58;
      v114[2] = 1;
      LODWORD(v115) = v57;
      v117[0] = 0;
      ((void (*)(uint64_t (***)(), uint64_t, _DWORD *, uint64_t, void **, uint64_t, _QWORD))v121[4])(&v121, 19, v114, 1, &v115, 1, 0);
      v60 = v59;
      v121 = &off_1E816EC08;
      if (*((_QWORD *)&v123 + 1))
        llvm::MetadataTracking::untrack((uint64_t)&v123 + 8, *((unsigned __int8 **)&v123 + 1));
    }
    else
    {
      v61 = sub_1C4C915F0(**(unsigned __int16 **)(v17 + 16), 0, 2);
      v62 = *(_QWORD *)(v17 + 24);
      v63 = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8) + 48 * v61;
      if ((*(_WORD *)(v17 + 44) & 4) != 0)
      {
        v64 = *(llvm::MachineFunction **)(v62 + 32);
        v66 = *(void **)(v17 + 56);
        v115 = v66;
        if (v66)
          llvm::MetadataTracking::track((uint64_t)&v115, (unsigned __int8 *)v66, 2);
        v60 = *((_QWORD *)v64 + 28);
        if (v60)
          *((_QWORD *)v64 + 28) = *(_QWORD *)v60;
        else
          v60 = sub_1C484358C((uint64_t)v64 + 128, 72, 3);
        v121 = (uint64_t (**)())v115;
        if (v115)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v115, (unsigned __int8 *)v115, (uint64_t)&v121);
          v115 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v60, v64, v63, (unsigned __int8 **)&v121, 0);
        if (v121)
          llvm::MetadataTracking::untrack((uint64_t)&v121, (unsigned __int8 *)v121);
        if (v115)
          llvm::MetadataTracking::untrack((uint64_t)&v115, (unsigned __int8 *)v115);
        if (v62 + 48 != v17 && (*(_WORD *)(v17 + 44) & 4) != 0)
          *(_WORD *)(v60 + 44) |= 0xCu;
        sub_1C512CA10((uint64_t *)(v62 + 40), (uint64_t *)v17, v60);
      }
      else
      {
        v64 = *(llvm::MachineFunction **)(v62 + 32);
        v65 = *(void **)(v17 + 56);
        v115 = v65;
        if (v65)
          llvm::MetadataTracking::track((uint64_t)&v115, (unsigned __int8 *)v65, 2);
        v60 = *((_QWORD *)v64 + 28);
        if (v60)
          *((_QWORD *)v64 + 28) = *(_QWORD *)v60;
        else
          v60 = sub_1C484358C((uint64_t)v64 + 128, 72, 3);
        v121 = (uint64_t (**)())v115;
        if (v115)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v115, (unsigned __int8 *)v115, (uint64_t)&v121);
          v115 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v60, v64, v63, (unsigned __int8 **)&v121, 0);
        if (v121)
          llvm::MetadataTracking::untrack((uint64_t)&v121, (unsigned __int8 *)v121);
        if (v115)
          llvm::MetadataTracking::untrack((uint64_t)&v115, (unsigned __int8 *)v115);
        v67 = *(_QWORD *)(v62 + 40);
        *(_QWORD *)(v60 + 24) = v67;
        v68 = *(_QWORD *)(v67 + 32);
        v69 = *(unsigned int *)(v60 + 40);
        if ((_DWORD)v69)
        {
          v75 = *(_QWORD *)(v60 + 32);
          v76 = *(_QWORD *)(v68 + 40);
          v77 = 32 * v69;
          do
          {
            if (!*(_BYTE *)v75)
            {
              v78 = *(unsigned int *)(v75 + 4);
              if ((int)v78 >= 0)
                v79 = (uint64_t *)(*(_QWORD *)(v76 + 272) + 8 * v78);
              else
                v79 = (uint64_t *)(*(_QWORD *)(v76 + 24) + 16 * (v78 & 0x7FFFFFFF) + 8);
              v80 = *v79;
              if (*v79)
              {
                v81 = *(_QWORD *)(v80 + 16);
                *(_QWORD *)(v80 + 16) = v75;
                *(_QWORD *)(v75 + 16) = v81;
                if ((*(_BYTE *)(v75 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v75 + 24) = v80;
                }
                else
                {
                  *(_QWORD *)(v75 + 24) = 0;
                  v79 = (uint64_t *)(v81 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v75 + 16) = v75;
                *(_QWORD *)(v75 + 24) = 0;
              }
              *v79 = v75;
            }
            v75 += 32;
            v77 -= 32;
          }
          while (v77);
        }
        v70 = *(_QWORD *)(v68 + 728);
        if (v70)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v70 + 24))(v70, v60);
        v71 = *(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v60 = v71 | *(_QWORD *)v60 & 7;
        *(_QWORD *)(v60 + 8) = v17;
        *(_QWORD *)(v71 + 8) = v60;
        *(_QWORD *)v17 = *(_QWORD *)v17 & 7 | v60;
      }
      v122 = 0uLL;
      *(_QWORD *)&v123 = 0;
      LODWORD(v121) = 0x1000000;
      HIDWORD(v121) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v60, v64, (const llvm::MachineOperand *)&v121);
      if (*(_DWORD *)(v17 + 40) >= 3u)
      {
        v72 = 64;
        v73 = 2;
        do
        {
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v60, v64, (const llvm::MachineOperand *)(*(_QWORD *)(v17 + 32) + v72));
          ++v73;
          v72 += 32;
        }
        while (v73 < *(unsigned int *)(v17 + 40));
      }
    }
    sub_1C49FB860(*(int32x2_t **)(*(_QWORD *)(a1 + 288) + 288), v17, v60);
    v74 = v17;
    if ((*(_BYTE *)v17 & 4) == 0)
    {
      v74 = v17;
      if ((*(_WORD *)(v17 + 44) & 8) != 0)
      {
        v74 = v17;
        do
          v74 = *(_QWORD *)(v74 + 8);
        while ((*(_WORD *)(v74 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(v17 + 24) + 40, v17, *(_QWORD *)(v74 + 8));
    if (++v16 != v109)
      continue;
    break;
  }
  v115 = v117;
  v116 = 0x400000000;
  v84 = v111;
  v85 = &v111[2 * v113];
  if ((_DWORD)v112)
  {
    if (v113)
    {
      v86 = 8 * v113;
      v87 = v111;
      while ((*v87 - 0x7FFFFFFF) <= 1)
      {
        v87 += 2;
        v86 -= 8;
        if (!v86)
          goto LABEL_186;
      }
    }
    else
    {
      v87 = v111;
    }
  }
  else
  {
LABEL_186:
    v87 = &v111[2 * v113];
  }
  v88 = &v111[2 * v113];
  if (v87 != v88)
  {
    v110 = v111;
    do
    {
      v89 = *(_QWORD *)(a1 + 288);
      v90 = (llvm::LiveInterval *)sub_1C4851220(v89, v87[1]);
      v91 = *(_QWORD *)(v89 + 304);
      v92 = *(_QWORD *)(v89 + 248);
      *(_QWORD *)v91 = v92;
      *(_QWORD *)(v91 + 8) = *(_QWORD *)(v92 + 40);
      *(_OWORD *)(v91 + 16) = *(_OWORD *)(v89 + 288);
      *(_QWORD *)(v91 + 32) = v89 + 312;
      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v91);
      *(_DWORD *)(v91 + 184) = 0;
      v93 = *(_QWORD *)(v89 + 256);
      v37 = *(_BYTE *)(v93 + 16) == 0;
      v94 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v93 + 24) + 16 * (*((_DWORD *)v90 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                               + 34);
      v96 = !v37 && v94 != 0;
      llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v89 + 304), v90, v96);
      llvm::LiveIntervals::computeDeadValues(v89, (uint64_t)v90, 0);
      v121 = *(uint64_t (***)())(a1 + 288);
      *(_QWORD *)&v122 = &v123;
      *((_QWORD *)&v122 + 1) = 0x800000000;
      LODWORD(v125) = 0;
      if (llvm::ConnectedVNInfoEqClasses::Classify((llvm::ConnectedVNInfoEqClasses *)&v121, v90) >= 2)
      {
        v97 = v116;
        if (v116 >= (unint64_t)HIDWORD(v116))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, (uint64_t)v117, v116 + 1, 8);
          v97 = v116;
        }
        *((_QWORD *)v115 + v97) = v90;
        LODWORD(v116) = v116 + 1;
      }
      *(_QWORD *)(*(_QWORD *)(v108 + 8) + 40 * (*(_DWORD *)(v108 + 32) + *v87) + 8) = -1;
      if ((__int128 *)v122 != &v123)
        free((void *)v122);
      v98 = v87 + 2;
      while (v98 != v85)
      {
        v99 = *v98;
        v98 += 2;
        if ((v99 - 0x7FFFFFFF) >= 2)
        {
          v87 = v98 - 2;
          goto LABEL_207;
        }
      }
      v87 = v85;
LABEL_207:
      ;
    }
    while (v87 != v88);
    v100 = (const llvm::LiveRange **)v115;
    if ((_DWORD)v116)
    {
      v101 = 8 * v116;
      do
      {
        v102 = *v100;
        v121 = (uint64_t (**)())&v122 + 1;
        *(_QWORD *)&v122 = 0x400000000;
        llvm::LiveIntervals::splitSeparateComponents(*(_QWORD *)(a1 + 288), v102, (uint64_t)&v121);
        if (v121 != (uint64_t (**)())((char *)&v122 + 8))
          free(v121);
        ++v100;
        v101 -= 8;
      }
      while (v101);
      v100 = (const llvm::LiveRange **)v115;
    }
    v84 = v110;
    if (v100 != (const llvm::LiveRange **)v117)
      free(v100);
  }
  MEMORY[0x1CAA32FB4](v84, 4);
  v16 = (uint64_t *)v118;
LABEL_217:
  v82 = v103;
  if (v16 != (uint64_t *)v120)
    free(v16);
  return v82;
}

_DWORD *sub_1C49FB7A8(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)4uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C614FCD4(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result = 0x7FFFFFFF;
      result += 2;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C49FB860(int32x2_t *a1, uint64_t a2, uint64_t a3)
{
  int32x2_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int32x2_t v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  int v15;
  int v16;
  _QWORD *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v3 = a1[46];
  v4 = a1[48].u32[0];
  if ((_DWORD)v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = (uint64_t *)(*(_QWORD *)&v3 + 16 * v5);
    v7 = *v6;
    if (*v6 == a2)
      goto LABEL_3;
    v15 = 1;
    while (v7 != -4096)
    {
      v16 = v5 + v15++;
      v5 = v16 & (v4 - 1);
      v7 = *(_QWORD *)(*(_QWORD *)&v3 + 16 * v5);
      if (v7 == a2)
      {
        v6 = (uint64_t *)(*(_QWORD *)&v3 + 16 * v5);
        goto LABEL_3;
      }
    }
  }
  v6 = (uint64_t *)(*(_QWORD *)&v3 + 16 * v4);
LABEL_3:
  if (v6 == (uint64_t *)(*(_QWORD *)&v3 + 16 * v4))
    return 0;
  v8 = v6[1];
  *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 16) = a3;
  *v6 = -8192;
  a1[47] = vadd_s32(a1[47], (int32x2_t)0x1FFFFFFFFLL);
  v23 = a3;
  v24 = v8;
  if (!(_DWORD)v4)
  {
    v21 = 0;
LABEL_24:
    v22 = sub_1C4850F64((uint64_t)&a1[46], (uint64_t)&v23, &v23, v21);
    *v22 = v23;
    v22[1] = v24;
    return v8;
  }
  v9 = a1[46];
  v10 = v4 - 1;
  v11 = v10 & ((a3 >> 4) ^ (a3 >> 9));
  v12 = (_QWORD *)(*(_QWORD *)&v9 + 16 * v11);
  v13 = *v12;
  if (*v12 != a3)
  {
    v17 = 0;
    v18 = 1;
    while (v13 != -4096)
    {
      if (v17)
        v19 = 0;
      else
        v19 = v13 == -8192;
      if (v19)
        v17 = v12;
      v20 = v11 + v18++;
      v11 = v20 & v10;
      v12 = (_QWORD *)(*(_QWORD *)&v9 + 16 * v11);
      v13 = *v12;
      if (*v12 == a3)
        return v8;
    }
    if (v17)
      v21 = v17;
    else
      v21 = v12;
    goto LABEL_24;
  }
  return v8;
}

uint64_t sub_1C49FB9C4()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C49FA7AC(v0);
}

uint64_t sub_1C49FB9EC()
{
  int v1;
  char v2;
  char *v3;
  __n128 v4;

  v4.n128_u64[0] = (unint64_t)"Enable Spilling of Flag regs to GPRs";
  v4.n128_u64[1] = 36;
  v2 = 1;
  v3 = &v2;
  v1 = 1;
  sub_1C614FDB4((llvm::cl::Option *)&unk_1EF8EF840, "enable-flag-to-gpr-spiller", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8EF840, &dword_1C475E000);
}

uint64_t (***sub_1C49FBA6C())()
{
  return &off_1EF8EB0E0;
}

BOOL sub_1C49FBA78(uint64_t a1, uint64_t a2)
{
  return sub_1C49C84A4(a2, 1024);
}

uint64_t sub_1C49FBA84()
{
  return 391;
}

uint64_t sub_1C49FBA8C()
{
  return 267;
}

uint64_t sub_1C49FBA94()
{
  return 104;
}

uint64_t sub_1C49FBAA0(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 32) + 32 * sub_1C4C2FD5C(**(unsigned __int16 **)(a2 + 16));
}

void sub_1C49FBAD8(int a1, llvm::MachineBasicBlock *this, int a3, uint64_t a4)
{
  _QWORD *v4;
  int v5;
  BOOL v6;
  unint64_t FirstTerminator;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  unsigned __int8 *v17;
  BOOL hasPropertyInBundle;
  unint64_t v20;
  unsigned __int8 *v21;

  v4 = (_QWORD *)*((_QWORD *)this + 4);
  v5 = (*(unsigned __int16 *)(*v4 + 18) >> 4) & 0x3FF;
  if (v5)
    v6 = v5 == 8;
  else
    v6 = 1;
  if (v6 || v5 == 255)
    return;
  if (*(_BYTE *)(v4[7] + 62))
  {
    v11 = *((_QWORD *)this + 7);
    FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(this);
    if (v11 == FirstTerminator)
      goto LABEL_9;
    do
    {
      if ((*(_WORD *)(v11 + 44) & 0xC) != 0 && (*(_WORD *)(v11 + 44) & 4) == 0)
      {
        v20 = FirstTerminator;
        hasPropertyInBundle = llvm::MachineInstr::hasPropertyInBundle(v11, 128, 1);
        FirstTerminator = v20;
        if (hasPropertyInBundle)
          goto LABEL_9;
      }
      else if ((*(_BYTE *)(*(_QWORD *)(v11 + 16) + 8) & 0x80) != 0)
      {
        goto LABEL_9;
      }
      if ((*(_BYTE *)v11 & 4) == 0)
      {
        while ((*(_WORD *)(v11 + 44) & 8) != 0)
          v11 = *(_QWORD *)(v11 + 8);
      }
      v11 = *(_QWORD *)(v11 + 8);
    }
    while (v11 != FirstTerminator);
  }
  else
  {
    FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(this);
  }
  v11 = FirstTerminator;
LABEL_9:
  if ((llvm::MachineBasicBlock *)((char *)this + 48) == (llvm::MachineBasicBlock *)v11)
  {
LABEL_32:
    v21 = 0;
  }
  else
  {
    v12 = v11;
    while (1)
    {
      v13 = **(unsigned __int16 **)(v12 + 16);
      v14 = v13 > 0x17;
      v15 = (1 << v13) & 0x83E000;
      if (v14 || v15 == 0)
        break;
      v12 = *(_QWORD *)(v12 + 8);
      if ((llvm::MachineBasicBlock *)v12 == (llvm::MachineBasicBlock *)((char *)this + 48))
        goto LABEL_32;
    }
    v17 = *(unsigned __int8 **)(v12 + 56);
    v21 = v17;
    if (v17)
      llvm::MetadataTracking::track((uint64_t)&v21, v17, 2);
  }
  sub_1C49D63F4(a4, (uint64_t)this, (unint64_t *)v11, 0, a3, 1, 0, &v21, 0);
  if (v21)
    llvm::MetadataTracking::untrack((uint64_t)&v21, v21);
}

uint64_t sub_1C49FBC70@<X0>(llvm::TargetInstrInfo *this@<X2>, uint64_t result@<X0>, _QWORD *a3@<X1>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 *v10;
  int v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  int v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  if (((a3[12] - a3[11]) & 0x7FFFFFFF8) == 0)
    goto LABEL_30;
  v6 = (_QWORD *)a3[7];
  if (a3 + 6 == v6)
    goto LABEL_30;
  v8 = result;
  v9 = a3[6] & 0xFFFFFFFFFFFFFFF8;
  if (!v9 || (*(_BYTE *)v9 & 4) == 0)
  {
    while ((*(_WORD *)(v9 + 44) & 4) != 0)
      v9 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
  }
  while (1)
  {
    v10 = *(unsigned __int16 **)(v9 + 16);
    v11 = *v10;
    v12 = (v11 - 9) > 0x3C || ((1 << (v11 - 9)) & 0x1000000000000605) == 0;
    v13 = !v12 || v11 == 0;
    if (!v13 && (v10[4] & 0x10) == 0)
      break;
    if ((_QWORD *)v9 == v6)
      goto LABEL_30;
    v9 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
    if (!v9 || (*(_BYTE *)v9 & 4) == 0)
    {
      while ((*(_WORD *)(v9 + 44) & 4) != 0)
        v9 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  if (v11 == 304)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 1;
    goto LABEL_32;
  }
  result = llvm::TargetInstrInfo::isUnpredicatedTerminator(this, (const llvm::MachineInstr *)v9);
  if (!(_DWORD)result)
  {
LABEL_30:
    v14 = 0;
    v15 = 0;
    goto LABEL_31;
  }
  v18 = **(unsigned __int16 **)(v9 + 16);
  if (v9 == a3[7])
    goto LABEL_39;
  v19 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
  if (!v19 || (*(_BYTE *)v19 & 4) == 0)
  {
    while ((*(_WORD *)(v19 + 44) & 4) != 0)
      v19 = *(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8;
  }
  result = llvm::TargetInstrInfo::isUnpredicatedTerminator(this, (const llvm::MachineInstr *)v19);
  if ((result & 1) == 0)
  {
LABEL_39:
    if (v18 != 305)
    {
      if (v18 == 303)
      {
        result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v8 + 40))(v8, v9);
        v14 = 0;
        v17 = 0;
        v16 = 0;
        v15 = *(_QWORD *)(result + 16);
      }
      else
      {
        v14 = 0;
        v15 = 0;
        v17 = 0;
        v16 = 1;
      }
      goto LABEL_32;
    }
    result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v8 + 40))(v8, v9);
    v15 = *(_QWORD *)(result + 16);
    v20 = (_QWORD *)a3[11];
    v21 = (_QWORD *)a3[12];
    if (v20 == v21)
    {
LABEL_50:
      v14 = 0;
    }
    else
    {
      v14 = a3[1];
      while (v14 != *v20 || *v20 == v15)
      {
        if (++v20 == v21)
          goto LABEL_50;
      }
    }
LABEL_31:
    v17 = 0;
    v16 = 0;
    goto LABEL_32;
  }
  v17 = 0;
  v14 = 0;
  v16 = 1;
  v15 = 0;
  if (**(_WORD **)(v19 + 16) == 305 && v18 == 303)
  {
    v15 = *(_QWORD *)((*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v8 + 40))(v8, v19) + 16);
    result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v8 + 40))(v8, v9);
    v17 = 0;
    v16 = 0;
    v14 = *(_QWORD *)(result + 16);
  }
LABEL_32:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v14;
  *(_BYTE *)(a4 + 16) = v17;
  *(_BYTE *)(a4 + 17) = 0;
  *(_BYTE *)(a4 + 18) = v16;
  return result;
}

void sub_1C49FBEF8(int a1, llvm::MachineBasicBlock *a2, int a3, int a4, llvm::TargetInstrInfo *this)
{
  unint64_t v8;
  unint64_t FirstTerminator;
  _QWORD *v10;
  unint64_t v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::MachineFunction *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;

  v8 = sub_1C49FE550((uint64_t)a2, this);
  FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(a2);
  v10 = (_QWORD *)FirstTerminator;
  if ((llvm::MachineBasicBlock *)((char *)a2 + 48) == (llvm::MachineBasicBlock *)FirstTerminator)
  {
LABEL_45:
    v35 = 0;
LABEL_9:
    v17 = 26304;
    if (a4)
      v17 = 26352;
    v18 = *((_QWORD *)this + 1) + v17;
    v19 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
    v40 = 0;
    goto LABEL_12;
  }
  v11 = FirstTerminator;
  while (1)
  {
    v12 = **(unsigned __int16 **)(v11 + 16);
    v13 = v12 > 0x17;
    v14 = (1 << v12) & 0x83E000;
    if (v13 || v14 == 0)
      break;
    v11 = *(_QWORD *)(v11 + 8);
    if ((llvm::MachineBasicBlock *)v11 == (llvm::MachineBasicBlock *)((char *)a2 + 48))
      goto LABEL_45;
  }
  v16 = *(unsigned __int8 **)(v11 + 56);
  v35 = v16;
  if (!v16)
    goto LABEL_9;
  llvm::MetadataTracking::track((uint64_t)&v35, v16, 2);
  v34 = 26304;
  if (a4)
    v34 = 26352;
  v18 = *((_QWORD *)this + 1) + v34;
  v19 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
  v40 = v35;
  if (v35)
    llvm::MetadataTracking::track((uint64_t)&v40, v35, 2);
LABEL_12:
  v20 = *((_QWORD *)v19 + 28);
  if (v20)
    *((_QWORD *)v19 + 28) = *(_QWORD *)v20;
  else
    v20 = sub_1C484358C((uint64_t)v19 + 128, 72, 3);
  v36 = v40;
  if (v40)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v40, v40, (uint64_t)&v36);
    v40 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v20, v19, v18, &v36, 0);
  if (v36)
    llvm::MetadataTracking::untrack((uint64_t)&v36, v36);
  if (v40)
    llvm::MetadataTracking::untrack((uint64_t)&v40, v40);
  v21 = *((_QWORD *)a2 + 5);
  *(_QWORD *)(v20 + 24) = v21;
  v22 = *(_QWORD *)(v21 + 32);
  v23 = *(unsigned int *)(v20 + 40);
  if ((_DWORD)v23)
  {
    v27 = *(_QWORD *)(v20 + 32);
    v28 = *(_QWORD *)(v22 + 40);
    v29 = 32 * v23;
    do
    {
      if (!*(_BYTE *)v27)
      {
        v30 = *(unsigned int *)(v27 + 4);
        if ((int)v30 >= 0)
          v31 = (uint64_t *)(*(_QWORD *)(v28 + 272) + 8 * v30);
        else
          v31 = (uint64_t *)(*(_QWORD *)(v28 + 24) + 16 * (v30 & 0x7FFFFFFF) + 8);
        v32 = *v31;
        if (*v31)
        {
          v33 = *(_QWORD *)(v32 + 16);
          *(_QWORD *)(v32 + 16) = v27;
          *(_QWORD *)(v27 + 16) = v33;
          if ((*(_BYTE *)(v27 + 3) & 1) != 0)
          {
            *(_QWORD *)(v27 + 24) = v32;
          }
          else
          {
            *(_QWORD *)(v27 + 24) = 0;
            v31 = (uint64_t *)(v33 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v27 + 16) = v27;
          *(_QWORD *)(v27 + 24) = 0;
        }
        *v31 = v27;
      }
      v27 += 32;
      v29 -= 32;
    }
    while (v29);
  }
  v24 = *(_QWORD *)(v22 + 728);
  if (v24)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v24 + 24))(v24, v20);
  v25 = *v10 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v20 = v25 | *(_QWORD *)v20 & 7;
  *(_QWORD *)(v20 + 8) = v10;
  *(_QWORD *)(v25 + 8) = v20;
  *v10 = *v10 & 7 | v20;
  LODWORD(v36) = 1;
  v37 = 0;
  v38 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v20, v19, (const llvm::MachineOperand *)&v36);
  v26 = *(_DWORD *)(*(_QWORD *)(v8 + 32) + 4);
  v37 = 0;
  v38 = 0;
  LODWORD(v36) = 0;
  HIDWORD(v36) = v26;
  v39 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v20, v19, (const llvm::MachineOperand *)&v36);
  LODWORD(v36) = 1;
  v37 = 0;
  v38 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v20, v19, (const llvm::MachineOperand *)&v36);
  if (v35)
    llvm::MetadataTracking::untrack((uint64_t)&v35, v35);
}

void sub_1C49FC1D8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  unsigned __int8 *v13;
  uint64_t v14;
  llvm::MachineFunction *v15;
  llvm::MachineInstr *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;

  sub_1C4AAB114(a2);
  v6 = a2 + 6;
  v7 = a2[7];
  if (a2 + 6 == (_QWORD *)v7)
  {
LABEL_28:
    v17 = 0;
LABEL_9:
    v14 = *(_QWORD *)(a4 + 8) + 26016;
    v15 = (llvm::MachineFunction *)a2[4];
    v22 = 0;
    goto LABEL_10;
  }
  v8 = a2[7];
  while (1)
  {
    v9 = **(unsigned __int16 **)(v8 + 16);
    v10 = v9 > 0x17;
    v11 = (1 << v9) & 0x83E000;
    if (v10 || v11 == 0)
      break;
    v8 = *(_QWORD *)(v8 + 8);
    if ((_QWORD *)v8 == v6)
      goto LABEL_28;
  }
  v13 = *(unsigned __int8 **)(v8 + 56);
  v17 = v13;
  if (!v13)
    goto LABEL_9;
  llvm::MetadataTracking::track((uint64_t)&v17, v13, 2);
  v14 = *(_QWORD *)(a4 + 8) + 26016;
  v15 = (llvm::MachineFunction *)a2[4];
  v22 = v17;
  if (v17)
    llvm::MetadataTracking::track((uint64_t)&v22, v17, 2);
LABEL_10:
  v16 = (llvm::MachineInstr *)*((_QWORD *)v15 + 28);
  if (v16)
    *((_QWORD *)v15 + 28) = *(_QWORD *)v16;
  else
    v16 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v15 + 128, 72, 3);
  v18 = (uint64_t)v22;
  if (v22)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v22, v22, (uint64_t)&v18);
    v22 = 0;
  }
  llvm::MachineInstr::MachineInstr(v16, v15, v14, (unsigned __int8 **)&v18, 0);
  if (v18)
    llvm::MetadataTracking::untrack((uint64_t)&v18, (unsigned __int8 *)v18);
  if (v22)
    llvm::MetadataTracking::untrack((uint64_t)&v22, v22);
  if (v6 != (_QWORD *)v7 && (*(_WORD *)(v7 + 44) & 4) != 0)
    *((_WORD *)v16 + 22) |= 0xCu;
  sub_1C512CA10(a2 + 5, (uint64_t *)v7, (uint64_t)v16);
  LODWORD(v18) = 1;
  v19 = 0;
  v20 = 0;
  llvm::MachineInstr::addOperand(v16, v15, (const llvm::MachineOperand *)&v18);
  v19 = 0;
  v20 = 0;
  v18 = 0x200000000;
  v21 = 0;
  llvm::MachineInstr::addOperand(v16, v15, (const llvm::MachineOperand *)&v18);
  LODWORD(v18) = 1;
  v19 = 0;
  v20 = 1;
  llvm::MachineInstr::addOperand(v16, v15, (const llvm::MachineOperand *)&v18);
  if (v17)
    llvm::MetadataTracking::untrack((uint64_t)&v17, v17);
}

void sub_1C49FC3E4(int a1, llvm::MachineBasicBlock *a2, int a3, int a4, int a5, int a6, int a7, unsigned int a8, unsigned __int8 a9, unsigned __int8 a10, char a11, llvm::TargetInstrInfo *a12)
{
  unint64_t FirstTerminator;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  unsigned __int8 *v26;
  uint64_t v27;
  unint64_t *v28;
  unsigned int v29;
  int v30;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::MachineFunction *v35;
  unint64_t v36;
  unint64_t *v37;
  unsigned int v38;
  int v39;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  llvm::MachineFunction *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  llvm::MachineInstr *v52;
  llvm::MachineFunction *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 *v83;

  v76 = sub_1C49FE550((uint64_t)a2, a12);
  FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(a2);
  v19 = (unint64_t *)FirstTerminator;
  v20 = (unint64_t *)((char *)a2 + 48);
  if ((llvm::MachineBasicBlock *)((char *)a2 + 48) == (llvm::MachineBasicBlock *)FirstTerminator)
  {
LABEL_8:
    v78 = 0;
    if ((a7 & 1) == 0)
    {
LABEL_12:
      if ((a11 & 1) == 0 && !a9)
        goto LABEL_24;
    }
  }
  else
  {
    v21 = FirstTerminator;
    while (1)
    {
      v22 = **(unsigned __int16 **)(v21 + 16);
      v23 = v22 > 0x17;
      v24 = (1 << v22) & 0x83E000;
      if (v23 || v24 == 0)
        break;
      v21 = *(_QWORD *)(v21 + 8);
      if ((unint64_t *)v21 == v20)
        goto LABEL_8;
    }
    v26 = *(unsigned __int8 **)(v21 + 56);
    v78 = v26;
    if (v26)
    {
      llvm::MetadataTracking::track((uint64_t)&v78, v26, 2);
      if ((a7 & 1) == 0)
        goto LABEL_12;
    }
    else if ((a7 & 1) == 0)
    {
      goto LABEL_12;
    }
  }
  if ((!a7 || (a5 & 1) != 0 || a9) && ((a9 & ~(_BYTE)a5 & 1) != 0 || (a7 & 1) != 0))
  {
    sub_1C49FE678(*(_DWORD *)(*(_QWORD *)(v76 + 32) + 4), v19, (uint64_t)a2, a8, a10, a5, a4, (uint64_t)a12);
  }
  else
  {
    if (a5)
      v27 = a10;
    else
      v27 = a8;
    sub_1C49D63F4((uint64_t)a12, (uint64_t)a2, v19, v27, a4, 1, 0, &v78, 0);
  }
LABEL_24:
  if (a6)
  {
    if (v20 == v19)
    {
LABEL_32:
      v77 = 0;
    }
    else
    {
      v28 = v19;
      while (1)
      {
        v29 = *(unsigned __int16 *)v28[2];
        v23 = v29 > 0x17;
        v30 = (1 << v29) & 0x83E000;
        if (v23 || v30 == 0)
          break;
        v28 = (unint64_t *)v28[1];
        if (v28 == v20)
          goto LABEL_32;
      }
      v32 = (unsigned __int8 *)v28[7];
      v77 = v32;
      if (v32)
      {
        llvm::MetadataTracking::track((uint64_t)&v77, v32, 2);
        v74 = 25968;
        if (a5)
          v74 = 25920;
        v34 = *((_QWORD *)a12 + 1) + v74;
        v35 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
        v83 = v77;
        if (v77)
          llvm::MetadataTracking::track((uint64_t)&v83, v77, 2);
        goto LABEL_37;
      }
    }
    v33 = 25968;
    if (a5)
      v33 = 25920;
    v34 = *((_QWORD *)a12 + 1) + v33;
    v35 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
    v83 = 0;
LABEL_37:
    v36 = *((_QWORD *)v35 + 28);
    if (v36)
      *((_QWORD *)v35 + 28) = *(_QWORD *)v36;
    else
      v36 = sub_1C484358C((uint64_t)v35 + 128, 72, 3);
    v79 = v83;
    if (v83)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v83, v83, (uint64_t)&v79);
      v83 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v36, v35, v34, &v79, 0);
    if (v79)
      llvm::MetadataTracking::untrack((uint64_t)&v79, v79);
    if (v83)
      llvm::MetadataTracking::untrack((uint64_t)&v83, v83);
    v46 = *((_QWORD *)a2 + 5);
    *(_QWORD *)(v36 + 24) = v46;
    v47 = *(_QWORD *)(v46 + 32);
    v48 = *(unsigned int *)(v36 + 40);
    if ((_DWORD)v48)
    {
      v60 = *(_QWORD *)(v36 + 32);
      v61 = *(_QWORD *)(v47 + 40);
      v62 = 32 * v48;
      do
      {
        if (!*(_BYTE *)v60)
        {
          v63 = *(unsigned int *)(v60 + 4);
          if ((int)v63 >= 0)
            v64 = (uint64_t *)(*(_QWORD *)(v61 + 272) + 8 * v63);
          else
            v64 = (uint64_t *)(*(_QWORD *)(v61 + 24) + 16 * (v63 & 0x7FFFFFFF) + 8);
          v65 = *v64;
          if (*v64)
          {
            v66 = *(_QWORD *)(v65 + 16);
            *(_QWORD *)(v65 + 16) = v60;
            *(_QWORD *)(v60 + 16) = v66;
            if ((*(_BYTE *)(v60 + 3) & 1) != 0)
            {
              *(_QWORD *)(v60 + 24) = v65;
            }
            else
            {
              *(_QWORD *)(v60 + 24) = 0;
              v64 = (uint64_t *)(v66 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v60 + 16) = v60;
            *(_QWORD *)(v60 + 24) = 0;
          }
          *v64 = v60;
        }
        v60 += 32;
        v62 -= 32;
      }
      while (v62);
    }
    v49 = *(_QWORD *)(v47 + 728);
    if (v49)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v49 + 24))(v49, v36);
    v50 = *v19 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v36 = v50 | *(_QWORD *)v36 & 7;
    *(_QWORD *)(v36 + 8) = v19;
    *(_QWORD *)(v50 + 8) = v36;
    *v19 = *v19 & 7 | v36;
    LODWORD(v79) = 1;
    v80 = 0;
    v81 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v35, (const llvm::MachineOperand *)&v79);
    v51 = *(_DWORD *)(*(_QWORD *)(v76 + 32) + 4);
    v80 = 0;
    v81 = 0;
    LODWORD(v79) = 0;
    HIDWORD(v79) = v51;
    v82 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v35, (const llvm::MachineOperand *)&v79);
    LODWORD(v79) = 1;
    v80 = 0;
    v81 = (a6 + 2);
    v52 = (llvm::MachineInstr *)v36;
    v53 = v35;
    goto LABEL_75;
  }
  if (v20 == v19)
  {
LABEL_46:
    v77 = 0;
  }
  else
  {
    v37 = v19;
    while (1)
    {
      v38 = *(unsigned __int16 *)v37[2];
      v23 = v38 > 0x17;
      v39 = (1 << v38) & 0x83E000;
      if (v23 || v39 == 0)
        break;
      v37 = (unint64_t *)v37[1];
      if (v37 == v20)
        goto LABEL_46;
    }
    v41 = (unsigned __int8 *)v37[7];
    v77 = v41;
    if (v41)
    {
      llvm::MetadataTracking::track((uint64_t)&v77, v41, 2);
      v75 = 26160;
      if (a5)
        v75 = 26208;
      v43 = *((_QWORD *)a12 + 1) + v75;
      v44 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
      v83 = v77;
      if (v77)
        llvm::MetadataTracking::track((uint64_t)&v83, v77, 2);
      goto LABEL_51;
    }
  }
  v42 = 26160;
  if (a5)
    v42 = 26208;
  v43 = *((_QWORD *)a12 + 1) + v42;
  v44 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
  v83 = 0;
LABEL_51:
  v45 = *((_QWORD *)v44 + 28);
  if (v45)
    *((_QWORD *)v44 + 28) = *(_QWORD *)v45;
  else
    v45 = sub_1C484358C((uint64_t)v44 + 128, 72, 3);
  v79 = v83;
  if (v83)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v83, v83, (uint64_t)&v79);
    v83 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v45, v44, v43, &v79, 0);
  if (v79)
    llvm::MetadataTracking::untrack((uint64_t)&v79, v79);
  if (v83)
    llvm::MetadataTracking::untrack((uint64_t)&v83, v83);
  v54 = *((_QWORD *)a2 + 5);
  *(_QWORD *)(v45 + 24) = v54;
  v55 = *(_QWORD *)(v54 + 32);
  v56 = *(unsigned int *)(v45 + 40);
  if ((_DWORD)v56)
  {
    v67 = *(_QWORD *)(v45 + 32);
    v68 = *(_QWORD *)(v55 + 40);
    v69 = 32 * v56;
    do
    {
      if (!*(_BYTE *)v67)
      {
        v70 = *(unsigned int *)(v67 + 4);
        if ((int)v70 >= 0)
          v71 = (uint64_t *)(*(_QWORD *)(v68 + 272) + 8 * v70);
        else
          v71 = (uint64_t *)(*(_QWORD *)(v68 + 24) + 16 * (v70 & 0x7FFFFFFF) + 8);
        v72 = *v71;
        if (*v71)
        {
          v73 = *(_QWORD *)(v72 + 16);
          *(_QWORD *)(v72 + 16) = v67;
          *(_QWORD *)(v67 + 16) = v73;
          if ((*(_BYTE *)(v67 + 3) & 1) != 0)
          {
            *(_QWORD *)(v67 + 24) = v72;
          }
          else
          {
            *(_QWORD *)(v67 + 24) = 0;
            v71 = (uint64_t *)(v73 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v67 + 16) = v67;
          *(_QWORD *)(v67 + 24) = 0;
        }
        *v71 = v67;
      }
      v67 += 32;
      v69 -= 32;
    }
    while (v69);
  }
  v57 = *(_QWORD *)(v55 + 728);
  if (v57)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v57 + 24))(v57, v45);
  v58 = *v19 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v45 = v58 | *(_QWORD *)v45 & 7;
  *(_QWORD *)(v45 + 8) = v19;
  *(_QWORD *)(v58 + 8) = v45;
  *v19 = *v19 & 7 | v45;
  LODWORD(v79) = 1;
  v80 = 0;
  v81 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v45, v44, (const llvm::MachineOperand *)&v79);
  v59 = *(_DWORD *)(*(_QWORD *)(v76 + 32) + 4);
  v80 = 0;
  v81 = 0;
  LODWORD(v79) = 0;
  HIDWORD(v79) = v59;
  v82 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v45, v44, (const llvm::MachineOperand *)&v79);
  LODWORD(v79) = 1;
  v80 = 0;
  v81 = 2;
  v52 = (llvm::MachineInstr *)v45;
  v53 = v44;
LABEL_75:
  llvm::MachineInstr::addOperand(v52, v53, (const llvm::MachineOperand *)&v79);
  if (v77)
    llvm::MetadataTracking::untrack((uint64_t)&v77, v77);
  if (v78)
    llvm::MetadataTracking::untrack((uint64_t)&v78, v78);
}

void sub_1C49FCA5C(int a1, llvm::MachineBasicBlock *a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, unsigned __int8 a9, unsigned __int8 a10, unsigned __int8 a11, char a12, char a13, llvm::TargetInstrInfo *a14)
{
  unint64_t v20;
  unint64_t FirstTerminator;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  unsigned __int8 *v29;
  uint64_t v30;
  unint64_t *v31;
  unsigned int v32;
  int v33;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  llvm::MachineFunction *v38;
  unint64_t v39;
  unint64_t *v40;
  unsigned int v41;
  int v42;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  llvm::MachineFunction *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  llvm::MachineInstr *v56;
  llvm::MachineFunction *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  llvm::MachineFunction *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int8 *v96;
  unsigned __int8 *v97;
  unsigned __int8 *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int8 *v102;

  v20 = sub_1C49FE550((uint64_t)a2, a14);
  FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(a2);
  v22 = (unint64_t *)FirstTerminator;
  v23 = (unint64_t *)((char *)a2 + 48);
  if ((llvm::MachineBasicBlock *)((char *)a2 + 48) == (llvm::MachineBasicBlock *)FirstTerminator)
  {
LABEL_8:
    v97 = 0;
    if (!v20)
      goto LABEL_78;
  }
  else
  {
    v24 = FirstTerminator;
    while (1)
    {
      v25 = **(unsigned __int16 **)(v24 + 16);
      v26 = v25 > 0x17;
      v27 = (1 << v25) & 0x83E000;
      if (v26 || v27 == 0)
        break;
      v24 = *(_QWORD *)(v24 + 8);
      if ((unint64_t *)v24 == v23)
        goto LABEL_8;
    }
    v29 = *(unsigned __int8 **)(v24 + 56);
    v97 = v29;
    if (v29)
    {
      llvm::MetadataTracking::track((uint64_t)&v97, v29, 2);
      if (!v20)
        goto LABEL_78;
    }
    else if (!v20)
    {
      goto LABEL_78;
    }
  }
  if ((a8 & 1) != 0 || (a12 & 1) != 0 || a10)
  {
    if ((!a8 || (a6 & 1) != 0 || a10) && ((a10 & ~(_BYTE)a6 & 1) != 0 || (a8 & 1) != 0))
    {
      sub_1C49FE678(*(_DWORD *)(*(_QWORD *)(v20 + 32) + 4), v22, (uint64_t)a2, a9, a11, a6, a5, (uint64_t)a14);
    }
    else
    {
      if (a6)
        v30 = a11;
      else
        v30 = a9;
      sub_1C49D63F4((uint64_t)a14, (uint64_t)a2, v22, v30, a5, 1, 0, &v97, 0);
    }
  }
  if (!a7)
  {
    if (v23 == v22)
    {
LABEL_47:
      v96 = 0;
    }
    else
    {
      v40 = v22;
      while (1)
      {
        v41 = *(unsigned __int16 *)v40[2];
        v26 = v41 > 0x17;
        v42 = (1 << v41) & 0x83E000;
        if (v26 || v42 == 0)
          break;
        v40 = (unint64_t *)v40[1];
        if (v40 == v23)
          goto LABEL_47;
      }
      v44 = (unsigned __int8 *)v40[7];
      v96 = v44;
      if (v44)
      {
        llvm::MetadataTracking::track((uint64_t)&v96, v44, 2);
        v95 = 26160;
        if (a6)
          v95 = 26208;
        v46 = *((_QWORD *)a14 + 1) + v95;
        v47 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
        v102 = v96;
        if (v96)
          llvm::MetadataTracking::track((uint64_t)&v102, v96, 2);
        goto LABEL_52;
      }
    }
    v45 = 26160;
    if (a6)
      v45 = 26208;
    v46 = *((_QWORD *)a14 + 1) + v45;
    v47 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
    v102 = 0;
LABEL_52:
    v48 = *((_QWORD *)v47 + 28);
    if (v48)
      *((_QWORD *)v47 + 28) = *(_QWORD *)v48;
    else
      v48 = sub_1C484358C((uint64_t)v47 + 128, 72, 3);
    v98 = v102;
    if (v102)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v102, v102, (uint64_t)&v98);
      v102 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v48, v47, v46, &v98, 0);
    if (v98)
      llvm::MetadataTracking::untrack((uint64_t)&v98, v98);
    if (v102)
      llvm::MetadataTracking::untrack((uint64_t)&v102, v102);
    v58 = *((_QWORD *)a2 + 5);
    *(_QWORD *)(v48 + 24) = v58;
    v59 = *(_QWORD *)(v58 + 32);
    v60 = *(unsigned int *)(v48 + 40);
    if ((_DWORD)v60)
    {
      v87 = *(_QWORD *)(v48 + 32);
      v88 = *(_QWORD *)(v59 + 40);
      v89 = 32 * v60;
      do
      {
        if (!*(_BYTE *)v87)
        {
          v90 = *(unsigned int *)(v87 + 4);
          if ((int)v90 >= 0)
            v91 = (uint64_t *)(*(_QWORD *)(v88 + 272) + 8 * v90);
          else
            v91 = (uint64_t *)(*(_QWORD *)(v88 + 24) + 16 * (v90 & 0x7FFFFFFF) + 8);
          v92 = *v91;
          if (*v91)
          {
            v93 = *(_QWORD *)(v92 + 16);
            *(_QWORD *)(v92 + 16) = v87;
            *(_QWORD *)(v87 + 16) = v93;
            if ((*(_BYTE *)(v87 + 3) & 1) != 0)
            {
              *(_QWORD *)(v87 + 24) = v92;
            }
            else
            {
              *(_QWORD *)(v87 + 24) = 0;
              v91 = (uint64_t *)(v93 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v87 + 16) = v87;
            *(_QWORD *)(v87 + 24) = 0;
          }
          *v91 = v87;
        }
        v87 += 32;
        v89 -= 32;
      }
      while (v89);
    }
    v61 = *(_QWORD *)(v59 + 728);
    if (v61)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v61 + 24))(v61, v48);
    v62 = *v22 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v48 = v62 | *(_QWORD *)v48 & 7;
    *(_QWORD *)(v48 + 8) = v22;
    *(_QWORD *)(v62 + 8) = v48;
    *v22 = *v22 & 7 | v48;
    LODWORD(v98) = 1;
    v99 = 0;
    v100 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v48, v47, (const llvm::MachineOperand *)&v98);
    v63 = *(_DWORD *)(*(_QWORD *)(v20 + 32) + 4);
    v99 = 0;
    v100 = 0;
    LODWORD(v98) = 0;
    HIDWORD(v98) = v63;
    v101 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v48, v47, (const llvm::MachineOperand *)&v98);
    LODWORD(v98) = 1;
    v99 = 0;
    v100 = 2;
    v56 = (llvm::MachineInstr *)v48;
    v57 = v47;
    goto LABEL_76;
  }
  if (v23 == v22)
  {
LABEL_33:
    v96 = 0;
  }
  else
  {
    v31 = v22;
    while (1)
    {
      v32 = *(unsigned __int16 *)v31[2];
      v26 = v32 > 0x17;
      v33 = (1 << v32) & 0x83E000;
      if (v26 || v33 == 0)
        break;
      v31 = (unint64_t *)v31[1];
      if (v31 == v23)
        goto LABEL_33;
    }
    v35 = (unsigned __int8 *)v31[7];
    v96 = v35;
    if (v35)
    {
      llvm::MetadataTracking::track((uint64_t)&v96, v35, 2);
      v94 = 25968;
      if (a6)
        v94 = 25920;
      v37 = *((_QWORD *)a14 + 1) + v94;
      v38 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
      v102 = v96;
      if (v96)
        llvm::MetadataTracking::track((uint64_t)&v102, v96, 2);
      goto LABEL_38;
    }
  }
  v36 = 25968;
  if (a6)
    v36 = 25920;
  v37 = *((_QWORD *)a14 + 1) + v36;
  v38 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
  v102 = 0;
LABEL_38:
  v39 = *((_QWORD *)v38 + 28);
  if (v39)
    *((_QWORD *)v38 + 28) = *(_QWORD *)v39;
  else
    v39 = sub_1C484358C((uint64_t)v38 + 128, 72, 3);
  v98 = v102;
  if (v102)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v102, v102, (uint64_t)&v98);
    v102 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v39, v38, v37, &v98, 0);
  if (v98)
    llvm::MetadataTracking::untrack((uint64_t)&v98, v98);
  if (v102)
    llvm::MetadataTracking::untrack((uint64_t)&v102, v102);
  v49 = *((_QWORD *)a2 + 5);
  *(_QWORD *)(v39 + 24) = v49;
  v50 = *(_QWORD *)(v49 + 32);
  v51 = *(unsigned int *)(v39 + 40);
  if ((_DWORD)v51)
  {
    v80 = *(_QWORD *)(v39 + 32);
    v81 = *(_QWORD *)(v50 + 40);
    v82 = 32 * v51;
    do
    {
      if (!*(_BYTE *)v80)
      {
        v83 = *(unsigned int *)(v80 + 4);
        if ((int)v83 >= 0)
          v84 = (uint64_t *)(*(_QWORD *)(v81 + 272) + 8 * v83);
        else
          v84 = (uint64_t *)(*(_QWORD *)(v81 + 24) + 16 * (v83 & 0x7FFFFFFF) + 8);
        v85 = *v84;
        if (*v84)
        {
          v86 = *(_QWORD *)(v85 + 16);
          *(_QWORD *)(v85 + 16) = v80;
          *(_QWORD *)(v80 + 16) = v86;
          if ((*(_BYTE *)(v80 + 3) & 1) != 0)
          {
            *(_QWORD *)(v80 + 24) = v85;
          }
          else
          {
            *(_QWORD *)(v80 + 24) = 0;
            v84 = (uint64_t *)(v86 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v80 + 16) = v80;
          *(_QWORD *)(v80 + 24) = 0;
        }
        *v84 = v80;
      }
      v80 += 32;
      v82 -= 32;
    }
    while (v82);
  }
  v52 = (a7 + 2);
  v53 = *(_QWORD *)(v50 + 728);
  if (v53)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v53 + 24))(v53, v39);
  v54 = *v22 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v39 = v54 | *(_QWORD *)v39 & 7;
  *(_QWORD *)(v39 + 8) = v22;
  *(_QWORD *)(v54 + 8) = v39;
  *v22 = *v22 & 7 | v39;
  LODWORD(v98) = 1;
  v99 = 0;
  v100 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v39, v38, (const llvm::MachineOperand *)&v98);
  v55 = *(_DWORD *)(*(_QWORD *)(v20 + 32) + 4);
  v99 = 0;
  v100 = 0;
  LODWORD(v98) = 0;
  HIDWORD(v98) = v55;
  v101 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v39, v38, (const llvm::MachineOperand *)&v98);
  LODWORD(v98) = 1;
  v99 = 0;
  v100 = v52;
  v56 = (llvm::MachineInstr *)v39;
  v57 = v38;
LABEL_76:
  llvm::MachineInstr::addOperand(v56, v57, (const llvm::MachineOperand *)&v98);
  if (v96)
    llvm::MetadataTracking::untrack((uint64_t)&v96, v96);
LABEL_78:
  if (a5 && (a13 & 1) == 0)
    sub_1C49D63F4((uint64_t)a14, (uint64_t)a2, v22, 0, a5, 1, 0, &v97, 0);
  v64 = *((_QWORD *)a14 + 1);
  v65 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
  v102 = v97;
  if (v97)
    llvm::MetadataTracking::track((uint64_t)&v102, v97, 2);
  v66 = v64 + 20256;
  v67 = *((_QWORD *)v65 + 28);
  if (v67)
    *((_QWORD *)v65 + 28) = *(_QWORD *)v67;
  else
    v67 = sub_1C484358C((uint64_t)v65 + 128, 72, 3);
  v98 = v102;
  if (v102)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v102, v102, (uint64_t)&v98);
    v102 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v67, v65, v66, &v98, 0);
  if (v98)
    llvm::MetadataTracking::untrack((uint64_t)&v98, v98);
  if (v102)
    llvm::MetadataTracking::untrack((uint64_t)&v102, v102);
  v68 = *((_QWORD *)a2 + 5);
  *(_QWORD *)(v67 + 24) = v68;
  v69 = *(_QWORD *)(v68 + 32);
  v70 = *(unsigned int *)(v67 + 40);
  if ((_DWORD)v70)
  {
    v73 = *(_QWORD *)(v67 + 32);
    v74 = *(_QWORD *)(v69 + 40);
    v75 = 32 * v70;
    do
    {
      if (!*(_BYTE *)v73)
      {
        v76 = *(unsigned int *)(v73 + 4);
        if ((int)v76 >= 0)
          v77 = (uint64_t *)(*(_QWORD *)(v74 + 272) + 8 * v76);
        else
          v77 = (uint64_t *)(*(_QWORD *)(v74 + 24) + 16 * (v76 & 0x7FFFFFFF) + 8);
        v78 = *v77;
        if (*v77)
        {
          v79 = *(_QWORD *)(v78 + 16);
          *(_QWORD *)(v78 + 16) = v73;
          *(_QWORD *)(v73 + 16) = v79;
          if ((*(_BYTE *)(v73 + 3) & 1) != 0)
          {
            *(_QWORD *)(v73 + 24) = v78;
          }
          else
          {
            *(_QWORD *)(v73 + 24) = 0;
            v77 = (uint64_t *)(v79 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v73 + 16) = v73;
          *(_QWORD *)(v73 + 24) = 0;
        }
        *v77 = v73;
      }
      v73 += 32;
      v75 -= 32;
    }
    while (v75);
  }
  v71 = *(_QWORD *)(v69 + 728);
  if (v71)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v71 + 24))(v71, v67);
  v72 = *v22 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v67 = v72 | *(_QWORD *)v67 & 7;
  *(_QWORD *)(v67 + 8) = v22;
  *(_QWORD *)(v72 + 8) = v67;
  *v22 = *v22 & 7 | v67;
  LODWORD(v98) = 1;
  v99 = 0;
  v100 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v67, v65, (const llvm::MachineOperand *)&v98);
  v99 = 0;
  v100 = a3;
  LODWORD(v98) = 4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v67, v65, (const llvm::MachineOperand *)&v98);
  if (v97)
    llvm::MetadataTracking::untrack((uint64_t)&v97, v97);
}

