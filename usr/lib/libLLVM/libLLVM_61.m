uint64_t sub_1C60610EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  unint64_t v40;
  BOOL v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  int v49;
  void *v50;
  uint64_t v51;
  _BYTE v52[64];
  uint64_t v53;
  void *v54;
  uint64_t v55;
  _QWORD v56[10];

  v56[8] = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v48 = *a2;
  v49 = 0;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)a1;
    v7 = v5 - 1;
    v8 = (v5 - 1) & ((v4 >> 4) ^ (v4 >> 9));
    v9 = (_QWORD *)(*(_QWORD *)a1 + 16 * v8);
    v10 = *v9;
    if (v4 == *v9)
    {
LABEL_11:
      v15 = *(_DWORD *)(v6 + 16 * v8 + 8);
      v16 = *(_QWORD *)(a1 + 24);
      return v16 + 88 * v15 + 8;
    }
    v11 = 0;
    v12 = 1;
    while (v10 != -4096)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v10 == -8192;
      if (v13)
        v11 = v9;
      v14 = v8 + v12++;
      v8 = v14 & v7;
      v9 = (_QWORD *)(v6 + 16 * v8);
      v10 = *v9;
      if (v4 == *v9)
        goto LABEL_11;
    }
    if (v11)
      v18 = v11;
    else
      v18 = v9;
  }
  else
  {
    v18 = 0;
  }
  v19 = sub_1C504A120(a1, (uint64_t)&v48, &v48, v18);
  *v19 = v48;
  *((_DWORD *)v19 + 2) = v49;
  v50 = v52;
  v51 = 0x800000000;
  v20 = *a2;
  v53 = *a2;
  v54 = v56;
  v55 = 0x800000000;
  v22 = *(_QWORD *)(a1 + 32);
  v21 = *(_QWORD *)(a1 + 40);
  if (v22 < v21)
  {
    *(_QWORD *)v22 = v20;
    v23 = (void *)(v22 + 24);
    *(_QWORD *)(v22 + 8) = v22 + 24;
    *(_QWORD *)(v22 + 16) = 0x800000000;
    if ((uint64_t *)v22 == &v53)
      goto LABEL_25;
    v24 = v55;
    if (!(_DWORD)v55)
      goto LABEL_25;
    if (v54 != v56)
    {
      *(_QWORD *)(v22 + 8) = v54;
      *(_DWORD *)(v22 + 16) = v24;
      *(_DWORD *)(v22 + 20) = HIDWORD(v55);
      v54 = v56;
      HIDWORD(v55) = 0;
      goto LABEL_24;
    }
    if (v55 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v22 + 8, v22 + 24, v55, 8);
      v26 = v55;
      if (!(_DWORD)v55)
        goto LABEL_23;
      v25 = v54;
      v23 = *(void **)(v22 + 8);
    }
    else
    {
      v25 = v56;
      v26 = v55;
    }
    memcpy(v23, v25, 8 * v26);
LABEL_23:
    *(_DWORD *)(v22 + 16) = v24;
LABEL_24:
    LODWORD(v55) = 0;
LABEL_25:
    v27 = (_QWORD *)(v22 + 88);
    goto LABEL_26;
  }
  v28 = *(_QWORD *)(a1 + 24);
  v29 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v22 - v28) >> 3) + 1;
  if (v29 > 0x2E8BA2E8BA2E8BALL)
    abort();
  v30 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v21 - v28) >> 3);
  if (2 * v30 > v29)
    v29 = 2 * v30;
  if (v30 >= 0x1745D1745D1745DLL)
    v31 = 0x2E8BA2E8BA2E8BALL;
  else
    v31 = v29;
  if (v31 > 0x2E8BA2E8BA2E8BALL)
    sub_1C4764EE4();
  v32 = 88 * v31;
  v33 = (char *)operator new(88 * v31);
  v34 = (uint64_t *)&v33[8 * ((uint64_t)(v22 - v28) >> 3)];
  *v34 = v20;
  v34[1] = (uint64_t)(v34 + 3);
  v34[2] = 0x800000000;
  v27 = v34 + 11;
  if (v22 == v28)
  {
    *(_QWORD *)(a1 + 24) = v34;
    *(_QWORD *)(a1 + 32) = v27;
    *(_QWORD *)(a1 + 40) = &v33[v32];
    goto LABEL_40;
  }
  v46 = &v33[v32];
  v47 = v19;
  v35 = 0;
  do
  {
    v36 = (uint64_t *)(v22 + v35 * 8);
    v37 = &v34[v35];
    *(v37 - 11) = *(_QWORD *)(v22 + v35 * 8 - 88);
    v38 = &v34[v35 - 8];
    v34[v35 - 10] = (uint64_t)v38;
    v39 = &v34[v35 - 10];
    *(v37 - 9) = 0x800000000;
    v40 = *(unsigned int *)(v22 + v35 * 8 - 72);
    if ((_DWORD)v40)
      v41 = v37 == v36;
    else
      v41 = 1;
    if (!v41)
    {
      v42 = (uint64_t *)*(v36 - 10);
      if (v36 - 8 != v42)
      {
        *v39 = (uint64_t)v42;
        *((_DWORD *)v37 - 18) = v40;
        *((_DWORD *)v37 - 17) = *(_DWORD *)(v22 + v35 * 8 - 68);
        *(v36 - 10) = (uint64_t)(v36 - 8);
        *(_DWORD *)(v22 + v35 * 8 - 68) = 0;
        goto LABEL_52;
      }
      if (v40 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v39, (uint64_t)&v34[v35 - 8], v40, 8);
        v43 = *((unsigned int *)v36 - 18);
        if (!(_DWORD)v43)
          goto LABEL_51;
        v42 = (uint64_t *)*(v36 - 10);
        v38 = (uint64_t *)v34[v35 - 10];
      }
      else
      {
        v43 = *(unsigned int *)(v22 + v35 * 8 - 72);
      }
      memcpy(v38, v42, 8 * v43);
LABEL_51:
      *((_DWORD *)v37 - 18) = v40;
LABEL_52:
      *((_DWORD *)v36 - 18) = 0;
    }
    v35 -= 11;
  }
  while (v22 + v35 * 8 != v28);
  v22 = *(_QWORD *)(a1 + 24);
  v44 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = &v34[v35];
  *(_QWORD *)(a1 + 32) = v27;
  *(_QWORD *)(a1 + 40) = v46;
  if (v44 == v22)
  {
    v19 = v47;
  }
  else
  {
    v19 = v47;
    do
    {
      v45 = *(void **)(v44 - 80);
      if ((void *)(v44 - 64) != v45)
        free(v45);
      v44 -= 88;
    }
    while (v44 != v22);
  }
LABEL_40:
  if (v22)
    operator delete((void *)v22);
LABEL_26:
  *(_QWORD *)(a1 + 32) = v27;
  if (v54 != v56)
    free(v54);
  if (v50 != v52)
    free(v50);
  v16 = *(_QWORD *)(a1 + 24);
  v15 = -1171354717 * ((unint64_t)(*(_QWORD *)(a1 + 32) - v16) >> 3) - 1;
  *((_DWORD *)v19 + 2) = v15;
  return v16 + 88 * v15 + 8;
}

_QWORD *sub_1C606152C(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;

  if (a4)
  {
    if (a4 >= 0x2E8BA2E8BA2E8BBLL)
      abort();
    v6 = result;
    v7 = 11 * a4;
    result = operator new(88 * a4);
    v8 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    if (a2 != a3)
    {
      v9 = 0;
      while (1)
      {
        v10 = a2 + v9 * 8;
        v11 = &v8[v9];
        *v11 = *(_QWORD *)(a2 + v9 * 8);
        v12 = &v8[v9 + 3];
        v8[v9 + 1] = v12;
        v11[2] = 0x800000000;
        v13 = *(_DWORD *)(a2 + v9 * 8 + 16);
        if (v13)
          v14 = v11 == (_QWORD *)v10;
        else
          v14 = 1;
        if (v14)
          goto LABEL_13;
        if (v13 >= 9)
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v8[v9 + 1], (uint64_t)&v8[v9 + 3], *(unsigned int *)(a2 + v9 * 8 + 16), 8);
          v15 = *(unsigned int *)(v10 + 16);
          if (!(_DWORD)v15)
            goto LABEL_12;
          v12 = (_QWORD *)v8[v9 + 1];
        }
        else
        {
          v15 = *(unsigned int *)(a2 + v9 * 8 + 16);
        }
        result = memcpy(v12, *(const void **)(v10 + 8), 8 * v15);
LABEL_12:
        *((_DWORD *)v11 + 4) = v13;
LABEL_13:
        v9 += 11;
        if (a2 + v9 * 8 == a3)
        {
          v8 = (_QWORD *)((char *)v8 + v9 * 8);
          break;
        }
      }
    }
    v6[1] = v8;
  }
  return result;
}

uint64_t sub_1C606165C(uint64_t a1, uint64_t *a2, uint64_t a3, llvm::SmallPtrSetImplBase *a4)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  const char *v16;
  int v17;
  int v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  int8x8_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  llvm::FixedVectorType *v40;
  double v41;
  llvm::PointerType *v42;
  llvm::PointerType *v43;
  unsigned int v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned __int8 v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *v57;
  unsigned __int8 *v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned __int8 **v61;
  const llvm::APInt *v62;
  uint64_t v63;
  llvm::ValueAsMetadata *v64;
  int v65;
  llvm::Type *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  llvm::ValueAsMetadata **v72;
  llvm::ValueAsMetadata *v73;
  int v74;
  int v75;
  uint64_t v76;
  llvm::ConstantInt *v77;
  unint64_t v78;
  unint64_t v79;
  llvm::ValueHandleBase *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  llvm::ValueAsMetadata **v85;
  llvm::ValueAsMetadata *v86;
  int v87;
  int v88;
  llvm::ValueAsMetadata *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  _QWORD *v95;
  unsigned __int8 *v96;
  llvm::ValueAsMetadata *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t **v101;
  llvm::ValueHandleBase *v102;
  int v103;
  int v104;
  unsigned int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  llvm::ValueSymbolTable *v134;
  _DWORD *v135;
  _DWORD *v136;
  int v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  void *v142;
  uint64_t v143;
  _QWORD v144[2];
  __int16 v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  _WORD v150[64];
  uint64_t v151;

  v6 = a2;
  v151 = *MEMORY[0x1E0C80C00];
  v8 = *a2;
  v9 = 8 * a3;
  if (a3)
  {
    v10 = 8 * a3;
    v11 = (uint64_t **)a2;
    while (1)
    {
      v12 = **v11;
      if ((*(_DWORD *)(v12 + 8) & 0xFE) == 0x12)
        v13 = *(unsigned __int8 *)(**(_QWORD **)(v12 + 16) + 8);
      else
        v13 = *(_DWORD *)(v12 + 8);
      if (v13 == 13)
        goto LABEL_22;
      if (v13 == 15)
        break;
      ++v11;
      v10 -= 8;
      if (!v10)
        goto LABEL_22;
    }
    v14 = *a2;
    v15 = **(_QWORD ***)(*(_QWORD *)a1 + 40);
    sub_1C4768AD0(*(_QWORD *)(a1 + 48), **v11);
    v18 = v17;
    if ((_DWORD)v16 == 1)
    LODWORD(v146) = v18;
    if (v18 <= 63)
    {
      if (v18 <= 31)
      {
        switch(v18)
        {
          case 16:
            v12 = *v15 + 1936;
            goto LABEL_21;
          case 8:
            v12 = *v15 + 1912;
            goto LABEL_21;
          case 1:
            v12 = *v15 + 1888;
            goto LABEL_21;
        }
      }
      else if (v18 == 32)
      {
        v12 = *v15 + 1960;
        goto LABEL_21;
      }
    }
    else
    {
      if (v18 == 64)
      {
        v12 = *v15 + 1984;
LABEL_21:
        v8 = v14;
        goto LABEL_22;
      }
      if (v18 == 128)
      {
        v12 = *v15 + 2008;
        goto LABEL_21;
      }
    }
    v135 = sub_1C5270984(*v15 + 2168, &v146);
    v12 = *((_QWORD *)v135 + 1);
    if (!v12)
    {
      v136 = v135;
      v12 = sub_1C484358C(*v15 + 2040, 24, 3);
      v137 = (int)v146;
      *(_QWORD *)v12 = v15;
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)(v12 + 8) = (v137 << 8) | 0xDu;
      *((_QWORD *)v136 + 1) = v12;
    }
    goto LABEL_21;
  }
  v12 = 0;
LABEL_22:
  sub_1C4768AD0(*(_QWORD *)(a1 + 48), v12);
  v21 = v20;
  if ((_DWORD)v19 == 1)
  v22 = **(_QWORD **)(v8 - 32);
  v23 = *(_DWORD *)(v22 + 8);
  if ((v23 & 0xFE) == 0x12)
    v23 = *(_DWORD *)(**(_QWORD **)(v22 + 16) + 8);
  v24 = v23 >> 8;
  v25 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 1064))(**(_QWORD **)(a1 + 40), v24);
  if (!(_DWORD)v21
    || (a3 & 0xFFFFFFFE) == 0
    || (v26.i32[0] = v21, v27 = (uint8x8_t)vcnt_s8(v26), v27.i16[0] = vaddlv_u8(v27), v27.i32[0] > 1u)
    || (v28 = v25 / v21, v28 <= 1))
  {
    if (a3)
    {
      do
      {
        v34 = *v6++;
        sub_1C4774094(a4, v34);
        v9 -= 8;
      }
      while (v9);
    }
    return 0;
  }
  v140 = v8;
  v29 = *(unsigned __int16 *)(v8 + 18);
  v30 = sub_1C60641B0(a1, v6, a3);
  if (v31 == 1)
  {
    sub_1C4774094(a4, *v30);
    return 0;
  }
  v32 = v31;
  if (!v31)
  {
    do
    {
      v33 = *v6++;
      sub_1C4774094(a4, v33);
      v9 -= 8;
    }
    while (v9);
    return 0;
  }
  v141 = v30;
  v36 = v21 >> 3;
  v37 = (v21 >> 3) * v31;
  v38 = *(unsigned __int8 *)(v12 + 8);
  if (v38 == 18)
    v39 = v12;
  else
    v39 = 0;
  v139 = v39;
  if (v39)
  {
    if ((v38 & 0xFE) == 0x12)
      v12 = **(_QWORD **)(v12 + 16);
    v31 = (*(_DWORD *)(v39 + 32) * v31);
    v40 = (llvm::FixedVectorType *)v12;
  }
  else
  {
    v40 = (llvm::FixedVectorType *)v12;
  }
  v41 = llvm::FixedVectorType::get(v40, (llvm::Type *)v31);
  v43 = v42;
  v44 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, llvm::PointerType *, double))(***(_QWORD ***)(a1 + 40)
                                                                                                 + 1120))(**(_QWORD **)(a1 + 40), v28, v21, v36 * v32, v42, v41);
  if (v28 < v32
    || ((_DWORD)v28 != v44 ? (v45 = v44 >= v32) : (v45 = 1), !v45))
  {
    v103 = sub_1C606165C(a1);
    return v103 | sub_1C606165C(a1);
  }
  v46 = __clz(1 << (v29 >> 1)) ^ 0x3F;
  v138 = v32;
  v47 = 8 * v32;
  v48 = v141;
  do
  {
    v49 = *v48++;
    sub_1C4774094(a4, v49);
    v47 -= 8;
  }
  while (v47);
  if (sub_1C6064AB8((_QWORD ***)a1, v36 * v32, v24, v46))
  {
    v50 = *(_QWORD *)(v140 - 32);
    v51 = *(_DWORD *)(*(_QWORD *)v50 + 8);
    if ((v51 & 0xFE) == 0x12)
      v51 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v50 + 16) + 8);
    v52 = *(_QWORD *)(a1 + 48);
    if (*(_DWORD *)(v52 + 4) != v51 >> 8)
      goto LABEL_107;
    v53 = llvm::getOrEnforceKnownAlignment(v50, 258, (unsigned __int8 *)v52, v140, 0, *(_QWORD *)(a1 + 24));
    if (v46 <= v53)
    {
      v46 = v53;
      goto LABEL_60;
    }
    return 0;
  }
LABEL_60:
  if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 40) + 1088))(**(_QWORD **)(a1 + 40), v37, v46, v24) & 1) == 0)
  {
LABEL_107:
    v104 = sub_1C606165C(a1);
    return v104 | sub_1C606165C(a1);
  }
  v54 = sub_1C6064B3C(v141, v32);
  v55 = 0;
  v56 = v54 - 24;
  if (!v54)
    v56 = 0;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(v56 + 40);
  *(_QWORD *)(a1 + 112) = v56 + 24;
  v57 = *(void **)(v56 + 48);
  v146 = v57;
  if (v57)
  {
    llvm::MetadataTracking::track((uint64_t)&v146, (unsigned __int8 *)v57, 2);
    v55 = v146;
  }
  sub_1C4774EF4(a1 + 56, 0, (uint64_t)v55);
  if (v146)
    llvm::MetadataTracking::untrack((uint64_t)&v146, (unsigned __int8 *)v146);
  v58 = *(unsigned __int8 **)(v140 - 32);
  v59 = llvm::PointerType::get(v43, (llvm::Type *)v24);
  v150[0] = 257;
  v60 = sub_1C4773E38((uint64_t *)(a1 + 56), 49, v58, v59, (uint64_t)&v146);
  v150[0] = 257;
  v61 = (unsigned __int8 **)sub_1C506D920((uint64_t *)(a1 + 56), (uint64_t)v43, (uint64_t)v60, (unsigned __int16)v46 | 0x100u, 0, (uint64_t)&v146);
  sub_1C6064BE8(v61, v141, v32);
  if ((_DWORD)v32)
  {
    v63 = 0;
    while (1)
    {
      v64 = (llvm::ValueAsMetadata *)v141[v63];
      if (v139)
      {
        v65 = *(_DWORD *)(v139 + 32);
        v146 = &v148;
        v147 = 0x800000000;
        sub_1C57E87D8((uint64_t)&v146, v65 * (int)v63, v65 + v65 * (int)v63);
        v67 = (uint64_t *)(a1 + 56);
        if ((*((_BYTE *)v64 + 23) & 0x10) != 0)
        {
          v68 = ***(_QWORD ***)v64;
          v69 = *(_QWORD *)(v68 + 152);
          v70 = *(unsigned int *)(v68 + 168);
          if (!(_DWORD)v70)
            goto LABEL_90;
          LODWORD(v71) = (v70 - 1) & ((v64 >> 4) ^ (v64 >> 9));
          v72 = (llvm::ValueAsMetadata **)(v69 + 16 * v71);
          v73 = *v72;
          if (*v72 != v64)
          {
            v74 = 1;
            while (v73 != (llvm::ValueAsMetadata *)-4096)
            {
              v75 = v71 + v74++;
              v71 = v75 & (v70 - 1);
              v73 = *(llvm::ValueAsMetadata **)(v69 + 16 * v71);
              if (v73 == v64)
              {
                v72 = (llvm::ValueAsMetadata **)(v69 + 16 * v71);
                goto LABEL_91;
              }
            }
LABEL_90:
            v72 = (llvm::ValueAsMetadata **)(v69 + 16 * v70);
          }
LABEL_91:
          v89 = v72[1];
          v92 = *(_QWORD *)v89;
          v91 = (char *)v89 + 16;
          v90 = v92;
        }
        else
        {
          v90 = 0;
          v91 = &byte_1C871356D;
        }
        v93 = v146;
        v94 = v147;
        v145 = 261;
        v142 = v91;
        v143 = v90;
        v95 = llvm::PoisonValue::get((llvm::PoisonValue *)*v61, v66);
        v96 = (unsigned __int8 *)sub_1C486AD20(a1 + 56, (uint64_t)v61, (uint64_t)v95, v93, v94, (uint64_t)&v142);
        if (v146 != &v148)
          free(v146);
        goto LABEL_97;
      }
      v76 = **(_QWORD **)(a1 + 120);
      v77 = *(llvm::ConstantInt **)(v76 + 1960);
      v78 = *(unsigned int *)(v76 + 1968);
      LODWORD(v147) = v78 >> 8;
      v67 = (uint64_t *)(a1 + 56);
      if (v78 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v146, v63, 0);
      }
      else
      {
        if (v78 <= 0xFF)
          v79 = 0;
        else
          v79 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v78);
        v146 = (void *)(v79 & v63);
      }
      v80 = llvm::ConstantInt::get(v77, (llvm::LLVMContext *)&v146, v62);
      if (v147 >= 0x41 && v146)
      {
        v102 = v80;
        MEMORY[0x1CAA32F9C](v146, 0x1000C8000313F17);
        v80 = v102;
      }
      if ((*((_BYTE *)v64 + 23) & 0x10) == 0)
      {
        v98 = 0;
        v99 = &byte_1C871356D;
        goto LABEL_96;
      }
      v81 = ***(_QWORD ***)v64;
      v82 = *(_QWORD *)(v81 + 152);
      v83 = *(unsigned int *)(v81 + 168);
      if (!(_DWORD)v83)
        goto LABEL_94;
      LODWORD(v84) = (v83 - 1) & ((v64 >> 4) ^ (v64 >> 9));
      v85 = (llvm::ValueAsMetadata **)(v82 + 16 * v84);
      v86 = *v85;
      if (*v85 != v64)
        break;
LABEL_95:
      v97 = v85[1];
      v100 = *(_QWORD *)v97;
      v99 = (char *)v97 + 16;
      v98 = v100;
LABEL_96:
      v150[0] = 261;
      v146 = v99;
      v147 = v98;
      v96 = sub_1C4772EE0((uint64_t *)(a1 + 56), (uint64_t)v61, (uint64_t)v80, (uint64_t)&v146);
LABEL_97:
      v101 = *(uint64_t ***)v64;
      if (*(_QWORD *)v96 != *(_QWORD *)v64)
      {
        v150[0] = 257;
        v96 = sub_1C506D6A8(v67, v96, (uint64_t)v101, (uint64_t)&v146);
      }
      llvm::Value::doRAUW(v64, (llvm::Value *)v96, (llvm::Value *)1);
      if (++v63 == v32)
        goto LABEL_108;
    }
    v87 = 1;
    while (v86 != (llvm::ValueAsMetadata *)-4096)
    {
      v88 = v84 + v87++;
      v84 = v88 & (v83 - 1);
      v86 = *(llvm::ValueAsMetadata **)(v82 + 16 * v84);
      if (v86 == v64)
      {
        v85 = (llvm::ValueAsMetadata **)(v82 + 16 * v84);
        goto LABEL_95;
      }
    }
LABEL_94:
    v85 = (llvm::ValueAsMetadata **)(v82 + 16 * v83);
    goto LABEL_95;
  }
LABEL_108:
  if (!v60 || v60[16] < 0x1Cu || v60 == *(unsigned __int8 **)(v140 - 32))
    v60 = (unsigned __int8 *)v61;
  v146 = v150;
  v147 = (uint64_t)v150;
  v148 = 16;
  v149 = 0;
  v142 = v144;
  HIDWORD(v143) = 16;
  v144[0] = v60;
  v105 = 1;
  do
  {
    v106 = *((_QWORD *)v142 + --v105);
    LODWORD(v143) = v105;
    v107 = *(_DWORD *)(v106 + 20);
    v108 = v107 & 0x7FFFFFF;
    if ((v107 & 0x7FFFFFF) != 0)
    {
      v109 = 0;
      do
      {
        v110 = *(_DWORD *)(v106 + 20);
        if ((v110 & 0x40000000) != 0)
          v111 = *(_QWORD *)(v106 - 8);
        else
          v111 = v106 - 32 * (v110 & 0x7FFFFFF);
        v112 = *(_QWORD *)(v111 + 32 * v109);
        v113 = *(unsigned __int8 *)(v112 + 16);
        if (v113 != 83 && v112 != 0 && v113 >= 0x1C)
        {
          v116 = *(_QWORD *)(v112 + 40);
          if (v116 == *((_QWORD *)v60 + 5))
          {
            v117 = *(__int16 *)(v116 + 18);
            if ((v117 & 0x80000000) == 0)
            {
              v119 = *(_QWORD *)(v116 + 48);
              if (v119 != v116 + 40)
              {
                v120 = 0;
                do
                {
                  v121 = v119 - 24;
                  if (!v119)
                    v121 = 0;
                  *(_DWORD *)(v121 + 56) = v120++;
                  v119 = *(_QWORD *)(v119 + 8);
                }
                while (v119 != v116 + 40);
              }
              *(_WORD *)(v116 + 18) = v117 | 0x8000;
            }
            if (*(_DWORD *)(v112 + 56) >= *((_DWORD *)v60 + 14))
            {
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v146, v112);
              v118 = v143;
              if (v143 >= (unint64_t)HIDWORD(v143))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, (uint64_t)v144, v143 + 1, 8);
                v118 = v143;
              }
              *((_QWORD *)v142 + v118) = v112;
              v105 = v143 + 1;
              LODWORD(v143) = v143 + 1;
            }
          }
        }
        ++v109;
      }
      while (v109 != v108);
    }
  }
  while (v105);
  v122 = (uint64_t *)(v60 + 24);
  v123 = *((_QWORD *)v60 + 5) + 40;
  if (v60 + 24 != (unsigned __int8 *)v123)
  {
    v124 = v60 + 24;
    do
    {
      if (v124)
        v125 = (uint64_t)(v124 - 3);
      else
        v125 = 0;
      v126 = sub_1C477672C((uint64_t)&v146, v125);
      if ((void *)v147 == v146)
        v127 = (uint64_t *)((char *)&v148 + 4);
      else
        v127 = &v148;
      if (v126 != (_QWORD *)(v147 + 8 * *(unsigned int *)v127))
      {
        v124 = (_QWORD *)*v124;
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v125 + 40) + 40, (uint64_t ***)v125);
        v128 = *(_QWORD *)(v125 + 24);
        v129 = *(_QWORD **)(v125 + 32);
        v130 = v125 + 24;
        *v129 = v128;
        *(_QWORD *)(v128 + 8) = v129;
        *(_QWORD *)(v125 + 24) = 0;
        *(_QWORD *)(v125 + 32) = 0;
        v131 = *((_QWORD *)v60 + 5);
        *(_QWORD *)(v125 + 40) = v131;
        *(_WORD *)(v131 + 18) &= ~0x8000u;
        if ((*(_BYTE *)(v125 + 23) & 0x10) != 0)
        {
          v133 = *(_QWORD *)(v131 + 56);
          if (v133)
          {
            v134 = *(llvm::ValueSymbolTable **)(v133 + 104);
            if (v134)
              llvm::ValueSymbolTable::reinsertValue(v134, (llvm::Value *)v125);
          }
        }
        v132 = *v122;
        *(_QWORD *)(v125 + 24) = *v122;
        *(_QWORD *)(v125 + 32) = v122;
        *(_QWORD *)(v132 + 8) = v130;
        *v122 = v130;
      }
      v124 = (_QWORD *)v124[1];
    }
    while (v124 != (_QWORD *)v123);
  }
  if (v142 != v144)
    free(v142);
  if ((void *)v147 != v146)
    free((void *)v147);
  sub_1C6064CE4(v141, v138);
  return 1;
}

uint64_t sub_1C60621A0(uint64_t *a1, uint64_t *a2, uint64_t a3, llvm::SmallPtrSetImplBase *a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  const char *v16;
  int v17;
  int v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  int8x8_t v27;
  uint8x8_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  llvm::FixedVectorType *v40;
  uint64_t v41;
  double v42;
  llvm::PoisonValue *v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned __int8 v55;
  llvm::Type *v56;
  uint64_t v57;
  uint64_t v58;
  llvm::Type *v59;
  llvm::Type *v60;
  const llvm::APInt *v61;
  uint64_t *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  llvm::ConstantInt *v69;
  unint64_t v70;
  unint64_t v71;
  llvm::ValueHandleBase *v72;
  const llvm::APInt *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  llvm::ConstantInt *v79;
  unint64_t v80;
  unint64_t v81;
  llvm::ValueHandleBase *v82;
  int v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  char *v88;
  int v89;
  uint64_t v90;
  unsigned __int8 *v91;
  const llvm::APInt *v92;
  const llvm::APInt *v93;
  BOOL v94;
  uint64_t v95;
  llvm::ConstantInt *v96;
  unint64_t v97;
  unint64_t v98;
  llvm::ValueHandleBase *v99;
  unsigned __int8 *v100;
  uint64_t v101;
  unsigned __int8 *v102;
  unsigned __int8 **v103;
  _DWORD *v104;
  _DWORD *v105;
  int v106;
  __int16 v107;
  uint64_t v108;
  int v109;
  llvm::PoisonValue *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unsigned int v114;
  llvm::Type *v115;
  uint64_t v116;
  llvm::Type *v117;
  unsigned int v118;
  __int16 v119;

  v6 = a2;
  v7 = (uint64_t)a1;
  v8 = *a2;
  v9 = 8 * a3;
  if (a3)
  {
    v10 = 8 * a3;
    v11 = a2;
    while (1)
    {
      v12 = **(_QWORD **)(*v11 - 64);
      if ((*(_DWORD *)(v12 + 8) & 0xFE) == 0x12)
        v13 = *(unsigned __int8 *)(**(_QWORD **)(v12 + 16) + 8);
      else
        v13 = *(_DWORD *)(v12 + 8);
      if (v13 == 13)
        goto LABEL_22;
      if (v13 == 15)
        break;
      ++v11;
      v10 -= 8;
      if (!v10)
        goto LABEL_22;
    }
    v14 = *a2;
    v15 = **(_QWORD ***)(*a1 + 40);
    sub_1C4768AD0(a1[6], **(_QWORD **)(*v11 - 64));
    v18 = v17;
    if ((_DWORD)v16 == 1)
    LODWORD(v117) = v18;
    v19 = v7;
    if (v18 <= 63)
    {
      if (v18 <= 31)
      {
        switch(v18)
        {
          case 16:
            v12 = *v15 + 1936;
            goto LABEL_21;
          case 8:
            v12 = *v15 + 1912;
            goto LABEL_21;
          case 1:
            v12 = *v15 + 1888;
            goto LABEL_21;
        }
      }
      else if (v18 == 32)
      {
        v12 = *v15 + 1960;
        goto LABEL_21;
      }
    }
    else
    {
      if (v18 == 64)
      {
        v12 = *v15 + 1984;
LABEL_21:
        v7 = v19;
        v8 = v14;
        goto LABEL_22;
      }
      if (v18 == 128)
      {
        v12 = *v15 + 2008;
        goto LABEL_21;
      }
    }
    v104 = sub_1C5270984(*v15 + 2168, &v117);
    v12 = *((_QWORD *)v104 + 1);
    if (!v12)
    {
      v105 = v104;
      v12 = sub_1C484358C(*v15 + 2040, 24, 3);
      v106 = (int)v117;
      *(_QWORD *)v12 = v15;
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)(v12 + 8) = (v106 << 8) | 0xDu;
      *((_QWORD *)v105 + 1) = v12;
    }
    goto LABEL_21;
  }
  v12 = 0;
LABEL_22:
  sub_1C4768AD0(*(_QWORD *)(v7 + 48), v12);
  v22 = v21;
  if ((_DWORD)v20 == 1)
  v23 = **(_QWORD **)(v8 - 32);
  v24 = *(_DWORD *)(v23 + 8);
  if ((v24 & 0xFE) == 0x12)
    v24 = *(_DWORD *)(**(_QWORD **)(v23 + 16) + 8);
  v25 = v24 >> 8;
  v26 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v7 + 40) + 1064))(**(_QWORD **)(v7 + 40), v25);
  if (!(_DWORD)v22
    || (a3 & 0xFFFFFFFE) == 0
    || (v27.i32[0] = v22, v28 = (uint8x8_t)vcnt_s8(v27), v28.i16[0] = vaddlv_u8(v28), v28.i32[0] > 1u)
    || (v29 = v26 / v22, v29 <= 1))
  {
    if (a3)
    {
      do
      {
        v34 = *v6++;
        sub_1C4774094(a4, v34);
        v9 -= 8;
      }
      while (v9);
    }
    return 0;
  }
  v114 = v25;
  v30 = *(unsigned __int16 *)(v8 + 18);
  v31 = sub_1C60641B0(v7, v6, a3);
  if (v32 == 1)
  {
    sub_1C4774094(a4, *v31);
    return 0;
  }
  if (!v32)
  {
    do
    {
      v33 = *v6++;
      sub_1C4774094(a4, v33);
      v9 -= 8;
    }
    while (v9);
    return 0;
  }
  v111 = v8;
  v36 = v22 >> 3;
  v37 = (v22 >> 3) * v32;
  v38 = *(unsigned __int8 *)(v12 + 8);
  if (v38 == 18)
    v39 = v12;
  else
    v39 = 0;
  v115 = (llvm::Type *)v31;
  v113 = v39;
  if (v39)
  {
    v40 = (llvm::FixedVectorType *)v12;
    if ((v38 & 0xFE) == 0x12)
      v40 = **(llvm::FixedVectorType ***)(v12 + 16);
    v41 = v32;
    v32 = (*(_DWORD *)(v39 + 32) * v32);
  }
  else
  {
    v40 = (llvm::FixedVectorType *)v12;
    v41 = v32;
  }
  v42 = llvm::FixedVectorType::get(v40, (llvm::Type *)v32);
  v110 = v43;
  v44 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, llvm::PoisonValue *, double))(***(_QWORD ***)(v7 + 40)
                                                                                                  + 1128))(**(_QWORD **)(v7 + 40), v29, v22, v37, v43, v42);
  v45 = v44;
  if (v29 < v41
    || ((_DWORD)v29 != v44 ? (v46 = v44 >= v41) : (v46 = 1), !v46))
  {
    v83 = sub_1C60621A0(v7, v115);
    return v83 | sub_1C60621A0(v7, (char *)v115 + 8 * v45);
  }
  v47 = __clz(1 << (v30 >> 1)) ^ 0x3F;
  v108 = v41;
  v48 = 8 * v41;
  v49 = (uint64_t *)v115;
  do
  {
    v50 = *v49++;
    sub_1C4774094(a4, v50);
    v48 -= 8;
  }
  while (v48);
  v51 = (uint64_t *)v115;
  if (sub_1C6064AB8((_QWORD ***)v7, v37, v114, v47))
  {
    v52 = *(_QWORD *)(v111 - 32);
    v53 = *(_DWORD *)(*(_QWORD *)v52 + 8);
    if ((v53 & 0xFE) == 0x12)
      v53 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v52 + 16) + 8);
    v54 = *(_QWORD *)(v7 + 48);
    if (*(_DWORD *)(v54 + 4) != v53 >> 8)
      goto LABEL_100;
    v55 = llvm::getOrEnforceKnownAlignment(v52, 258, (unsigned __int8 *)v54, v111, 0, *(_QWORD *)(v7 + 24));
    if (v47 <= v55)
    {
      v47 = v55;
      goto LABEL_60;
    }
    return 0;
  }
LABEL_60:
  if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(***(_QWORD ***)(v7 + 40) + 1096))(**(_QWORD **)(v7 + 40), v37, v47, v114) & 1) == 0)
  {
LABEL_100:
    v84 = (v37 & 0xFFFFFFFC) / v36;
    if (v36 > (v37 & 0xFFFFFFFC))
      v85 = 1;
    else
      v85 = (v37 & 0xFFFFFFFC) / v36;
    v86 = v84 - 1;
    if ((v84 & 1) == 0)
      v86 = v84 >> 1;
    if (v41 == v84)
      v87 = v86;
    else
      v87 = v85;
    v88 = (char *)v115 + 8 * v87;
    v89 = sub_1C60621A0(v7, v115);
    return v89 | sub_1C60621A0(v7, v88);
  }
  sub_1C6064B3C(v115, v41);
  v56 = 0;
  v58 = v57 - 24;
  if (!v57)
    v58 = 0;
  *(_QWORD *)(v7 + 104) = *(_QWORD *)(v58 + 40);
  *(_QWORD *)(v7 + 112) = v58 + 24;
  v59 = *(llvm::Type **)(v58 + 48);
  v117 = v59;
  if (v59)
  {
    llvm::MetadataTracking::track((uint64_t)&v117, (unsigned __int8 *)v59, 2);
    v56 = v117;
  }
  sub_1C4774EF4(v7 + 56, 0, (uint64_t)v56);
  v60 = v117;
  if (v117)
    llvm::MetadataTracking::untrack((uint64_t)&v117, (unsigned __int8 *)v117);
  v62 = llvm::PoisonValue::get(v110, v60);
  v107 = v47;
  if (v113)
  {
    if ((_DWORD)v41)
    {
      v63 = 0;
      v64 = 0;
      v109 = *(_DWORD *)(v113 + 32);
      while (1)
      {
        v65 = *(unsigned int *)(v113 + 32);
        v112 = v64;
        if ((_DWORD)v65)
          break;
LABEL_97:
        v64 = v112 + 1;
        v63 += v109;
        v51 = (uint64_t *)v115;
        if (v112 + 1 == v108)
          goto LABEL_131;
      }
      v66 = 0;
      v116 = v51[v64];
      while (1)
      {
        v67 = *(_QWORD *)(v116 - 64);
        v68 = **(_QWORD **)(v7 + 120);
        v69 = *(llvm::ConstantInt **)(v68 + 1960);
        v70 = *(unsigned int *)(v68 + 1968);
        v118 = v70 >> 8;
        if (v70 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v117, v66, 0);
        }
        else
        {
          if (v70 <= 0xFF)
            v71 = 0;
          else
            v71 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v70);
          v117 = (llvm::Type *)(v71 & v66);
        }
        v72 = llvm::ConstantInt::get(v69, (llvm::LLVMContext *)&v117, v61);
        if (v118 >= 0x41 && v117)
          MEMORY[0x1CAA32F9C](v117, 0x1000C8000313F17);
        v119 = 257;
        v74 = sub_1C4772EE0((uint64_t *)(v7 + 56), v67, (uint64_t)v72, (uint64_t)&v117);
        v75 = *(_QWORD *)v74;
        if ((*(_DWORD *)(v12 + 8) & 0xFE) == 0x12)
          break;
        v76 = v12;
        if (v75 != v12)
          goto LABEL_82;
LABEL_83:
        v77 = **(_QWORD **)(v7 + 120);
        v78 = (v63 + v66);
        v79 = *(llvm::ConstantInt **)(v77 + 1960);
        v80 = *(unsigned int *)(v77 + 1968);
        v118 = v80 >> 8;
        if (v80 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v117, v78, 0);
        }
        else
        {
          if (v80 <= 0xFF)
            v81 = 0;
          else
            v81 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v80);
          v117 = (llvm::Type *)(v81 & v78);
        }
        v82 = llvm::ConstantInt::get(v79, (llvm::LLVMContext *)&v117, v73);
        if (v118 >= 0x41 && v117)
          MEMORY[0x1CAA32F9C](v117, 0x1000C8000313F17);
        v119 = 257;
        v62 = (uint64_t *)sub_1C4773154((uint64_t *)(v7 + 56), (uint64_t)v62, (uint64_t)v74, (uint64_t)v82, (uint64_t)&v117);
        if (v65 == ++v66)
          goto LABEL_97;
      }
      v76 = **(_QWORD **)(v12 + 16);
      if (v75 == v76)
        goto LABEL_83;
LABEL_82:
      v119 = 257;
      v74 = sub_1C4773E38((uint64_t *)(v7 + 56), 49, v74, v76, (uint64_t)&v117);
      goto LABEL_83;
    }
  }
  else if ((_DWORD)v41)
  {
    v90 = 0;
    do
    {
      v91 = *(unsigned __int8 **)(v51[v90] - 64);
      v92 = *(const llvm::APInt **)v91;
      if ((*(_DWORD *)(v12 + 8) & 0xFE) == 0x12)
      {
        v93 = **(const llvm::APInt ***)(v12 + 16);
        v94 = v92 == v93;
      }
      else
      {
        v93 = (const llvm::APInt *)v12;
        v94 = v92 == (const llvm::APInt *)v12;
      }
      if (!v94)
      {
        v119 = 257;
        v91 = sub_1C506D6A8((uint64_t *)(v7 + 56), v91, (uint64_t)v93, (uint64_t)&v117);
      }
      v95 = **(_QWORD **)(v7 + 120);
      v96 = *(llvm::ConstantInt **)(v95 + 1960);
      v97 = *(unsigned int *)(v95 + 1968);
      v118 = v97 >> 8;
      if (v97 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v117, v90, 0);
      }
      else
      {
        if (v97 <= 0xFF)
          v98 = 0;
        else
          v98 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v97);
        v117 = (llvm::Type *)(v98 & v90);
      }
      v99 = llvm::ConstantInt::get(v96, (llvm::LLVMContext *)&v117, v93);
      if (v118 >= 0x41 && v117)
        MEMORY[0x1CAA32F9C](v117, 0x1000C8000313F17);
      v119 = 257;
      v62 = (uint64_t *)sub_1C4773154((uint64_t *)(v7 + 56), (uint64_t)v62, (uint64_t)v91, (uint64_t)v99, (uint64_t)&v117);
      ++v90;
      v51 = (uint64_t *)v115;
    }
    while (v41 != v90);
  }
LABEL_131:
  v100 = *(unsigned __int8 **)(v111 - 32);
  v101 = llvm::PointerType::get(v110, (llvm::Type *)v114);
  v119 = 257;
  v102 = sub_1C4773E38((uint64_t *)(v7 + 56), 49, v100, v101, (uint64_t)&v117);
  v103 = (unsigned __int8 **)sub_1C509CCE8((uint64_t *)(v7 + 56), v62, (uint64_t)v102, v107 | 0x100u, 0);
  sub_1C6064BE8(v103, v51, v108);
  sub_1C6064CE4(v51, v108);
  return 1;
}

uint64_t sub_1C6062ADC(uint64_t a1)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  unsigned int v5;

  v2 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v2 == 60 || (result = 0xFFFFFFFFLL, a1) && v2 == 61)
  {
    v4 = **(_QWORD **)(a1 - 32);
    v5 = *(_DWORD *)(v4 + 8);
    if ((v5 & 0xFE) == 0x12)
      v5 = *(_DWORD *)(**(_QWORD **)(v4 + 16) + 8);
    return v5 >> 8;
  }
  return result;
}

uint64_t sub_1C6062B2C(uint64_t a1, uint64_t *a2, uint64_t a3, llvm::APInt *a4, int a5)
{
  llvm::DataLayout *v10;
  unsigned int PointerTypeSizeInBits;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const char *v17;
  int v18;
  int v19;
  const char *v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  const llvm::APInt *v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  size_t v33;
  uint64_t v34;
  _BOOL8 v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _BOOL4 v40;
  unint64_t v41;
  _BOOL4 v42;
  unint64_t v43;
  void *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _BOOL4 v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t SCEVIter;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t Constant;
  uint64_t v71;
  uint64_t AddExpr;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;
  void *v76;
  int v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  llvm::UndefValue **v88;
  uint64_t v89;
  uint64_t v90;
  llvm::UndefValue **v91;
  int v92;
  llvm::UndefValue *v93;
  llvm::UndefValue *v94;
  llvm::UndefValue *v95;
  llvm::UndefValue *v96;
  BOOL v97;
  unsigned int v98;
  void **v99;
  unint64_t v100;
  llvm::UndefValue *v101;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  size_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  llvm::UndefValue *AggregateElement;
  unsigned int *v113;
  unsigned int *v114;
  unsigned int *v115;
  const char *v116;
  unint64_t v117;
  llvm::Type *v118;
  unsigned int PrimitiveSizeInBits;
  int v120;
  int v121;
  _QWORD **v122;
  int v123;
  unint64_t *v124;
  unint64_t v125;
  unsigned int v126;
  _QWORD *v127;
  int v128;
  unint64_t v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  int v133;
  _QWORD *v134;
  unsigned int v135;
  llvm::Type *v136;
  unsigned int v137;
  unint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  BOOL v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  BOOL v149;
  char v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  _QWORD *v158;
  int v159;
  unsigned int v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  unsigned int v166;
  uint64_t v167;
  const llvm::APInt *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  uint64_t v173;
  char v174;
  char v175;
  uint64_t v176;
  char v177;
  _BOOL8 v178;
  uint64_t *v179;
  uint64_t v180;
  char v181;
  int v182;
  _QWORD *v183;
  int v184;
  unint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int v217;
  uint64_t v218;
  _QWORD *v219;
  _QWORD *v220;
  uint64_t v221;
  llvm::Type *v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unsigned int v226;
  void *v227;
  unsigned int v228;
  void *v229;
  unsigned int v230;
  void *v231;
  unsigned int v232;
  void *__src;
  unsigned int v234;
  unint64_t v235;
  unsigned int v236;
  _QWORD v237[2];
  llvm::UndefValue **v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  uint64_t v242;
  unsigned int v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  char v249;
  uint64_t v250;

  v250 = *MEMORY[0x1E0C80C00];
  v10 = *(llvm::DataLayout **)(a1 + 48);
  PointerTypeSizeInBits = llvm::DataLayout::getPointerTypeSizeInBits((uint64_t)v10, *a2);
  v13 = PointerTypeSizeInBits;
  v234 = PointerTypeSizeInBits;
  if (PointerTypeSizeInBits > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
    v232 = v13;
    llvm::APInt::initSlowCase((llvm::APInt *)&v231, 0, 0);
    v10 = *(llvm::DataLayout **)(a1 + 48);
  }
  else
  {
    __src = 0;
    v232 = PointerTypeSizeInBits;
    v231 = 0;
  }
  v14 = llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)a2, v10, (const void **)&__src, 0, 0, 0, v12);
  v16 = llvm::Value::stripAndAccumulateConstantOffsets(a3, *(llvm::DataLayout **)(a1 + 48), (const void **)&v231, 0, 0, 0, v15);
  sub_1C4768AD0(*(_QWORD *)(a1 + 48), *(_QWORD *)v14);
  v19 = v18 + 7;
  if ((_DWORD)v17 == 1)
  sub_1C4768AD0(*(_QWORD *)(a1 + 48), *(_QWORD *)v16);
  v22 = (v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  if ((_DWORD)v20 == 1)
  if ((v19 & 0xFFFFFFF8) != v22)
  {
    v24 = 0;
    goto LABEL_140;
  }
  v23 = v19 & 0xFFFFFFF8;
  if (v234 < v23)
  {
    llvm::APInt::sext((llvm::APInt *)&__src, v23, (llvm::APInt *)&v244);
  }
  else if (v234 > v23)
  {
    llvm::APInt::trunc((llvm::APInt *)&__src, v23, (llvm::APInt *)&v244);
  }
  else
  {
    LODWORD(v245) = v234;
    if (v234 > 0x40)
    {
      v244 = operator new[]();
      memcpy((void *)v244, __src, (((unint64_t)v245 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v244 = (unint64_t)__src;
    }
  }
  if (v234 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  __src = (void *)v244;
  v234 = v245;
  if (v232 < v23)
  {
    llvm::APInt::sext((llvm::APInt *)&v231, v23, (llvm::APInt *)&v244);
  }
  else if (v232 > v23)
  {
    llvm::APInt::trunc((llvm::APInt *)&v231, v23, (llvm::APInt *)&v244);
  }
  else
  {
    LODWORD(v245) = v232;
    if (v232 > 0x40)
    {
      v244 = operator new[]();
      memcpy((void *)v244, v231, (((unint64_t)v245 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v244 = (unint64_t)v231;
    }
  }
  if (v232 >= 0x41 && v231)
    MEMORY[0x1CAA32F9C](v231, 0x1000C8000313F17);
  v231 = (void *)v244;
  v232 = v245;
  v25 = *((_DWORD *)a4 + 2);
  if (v25 < v23)
  {
    llvm::APInt::sext(a4, v23, (llvm::APInt *)&v244);
  }
  else if (v25 > v23)
  {
    llvm::APInt::trunc(a4, v23, (llvm::APInt *)&v244);
  }
  else
  {
    sub_1C5DD14E0((uint64_t)&v244, (uint64_t)a4);
  }
  if (*((_DWORD *)a4 + 2) >= 0x41u && *(_QWORD *)a4)
    MEMORY[0x1CAA32F9C](*(_QWORD *)a4, 0x1000C8000313F17);
  v27 = v244;
  *(_QWORD *)a4 = v244;
  v28 = v245;
  *((_DWORD *)a4 + 2) = v245;
  v29 = v232;
  if (v232 >= 0x41)
  {
    v32 = v232 + 63;
    v33 = (v32 >> 3) & 0x3FFFFFF8;
    v31 = (char *)operator new[]();
    memcpy(v31, v231, v33);
    v34 = 0;
    v35 = 0;
    v36 = (char *)__src;
    do
    {
      v37 = *(_QWORD *)&v31[v34];
      v38 = *(_QWORD *)&v36[v34];
      v39 = v37 - v38;
      v40 = v37 < v38;
      v41 = v37 + ~v38;
      v42 = v41 >= v37;
      if (v35)
      {
        v35 = v42;
      }
      else
      {
        v41 = v39;
        v35 = v40;
      }
      *(_QWORD *)&v31[v34] = v41;
      v34 += 8;
    }
    while (8 * (v32 >> 6) != v34);
    *(_QWORD *)&v31[8 * (v32 >> 6) - 8] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v29;
    if (v14 == v16)
    {
      v24 = memcmp(v31, *(const void **)a4, v33) == 0;
LABEL_139:
      MEMORY[0x1CAA32F9C](v31, 0x1000C8000313F17);
      goto LABEL_140;
    }
    v28 = *((_DWORD *)a4 + 2);
  }
  else
  {
    if (v232)
      v30 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v232;
    else
      v30 = 0;
    v31 = (char *)(v30 & ((_BYTE *)v231 - (_BYTE *)__src));
    if (v14 == v16)
    {
      v24 = v31 == (char *)v27;
      goto LABEL_140;
    }
  }
  v226 = v29;
  if (v28 >= 0x41)
  {
    v45 = v28 + 63;
    v44 = (void *)operator new[]();
    memcpy(v44, *(const void **)a4, (v45 >> 3) & 0x3FFFFFF8);
    v46 = 0;
    v47 = (unint64_t *)v44;
    v48 = v31;
    v49 = v45 >> 6;
    do
    {
      v50 = *(_QWORD *)v48;
      v48 += 8;
      v51 = *v47 - v50;
      v52 = *v47 < v50;
      v53 = *v47 + ~v50;
      if (v46)
      {
        v46 = v53 >= *v47;
      }
      else
      {
        v53 = v51;
        v46 = v52;
      }
      *v47++ = v53;
      --v49;
    }
    while (v49);
    *((_QWORD *)v44 + (v45 >> 6) - 1) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v28;
  }
  else
  {
    if (v28)
      v43 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v28;
    else
      v43 = 0;
    v44 = (void *)(v43 & (*(_QWORD *)a4 - (_QWORD)v31));
  }
  v230 = v28;
  v229 = v44;
  v54 = *(_QWORD *)(a1 + 32);
  v55 = *(_QWORD *)(v54 + 104);
  v56 = *(_DWORD *)(v54 + 120);
  if (!v56)
    goto LABEL_59;
  v57 = v56 - 1;
  v58 = (v56 - 1) & ((v14 >> 4) ^ (v14 >> 9));
  v59 = v55 + 48 * v58;
  v60 = *(_QWORD *)(v59 + 24);
  if (v60 != v14)
  {
    v61 = 1;
    while (v60 != -4096)
    {
      v62 = v58 + v61++;
      v58 = v62 & v57;
      v59 = v55 + 48 * (v62 & v57);
      v60 = *(_QWORD *)(v59 + 24);
      if (v60 == v14)
        goto LABEL_60;
    }
LABEL_59:
    v59 = v55 + 48 * v56;
  }
LABEL_60:
  if (v59 != v55 + 48 * v56)
  {
    SCEVIter = *(_QWORD *)(v59 + 40);
    if (SCEVIter)
    {
      if (v56)
        goto LABEL_63;
LABEL_70:
      v65 = v55 + 48 * v56;
      goto LABEL_71;
    }
  }
  SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v54, v14);
  v54 = *(_QWORD *)(a1 + 32);
  v55 = *(_QWORD *)(v54 + 104);
  v56 = *(_DWORD *)(v54 + 120);
  if (!v56)
    goto LABEL_70;
LABEL_63:
  v64 = (v56 - 1) & ((v16 >> 4) ^ (v16 >> 9));
  v65 = v55 + 48 * v64;
  v66 = *(_QWORD *)(v65 + 24);
  if (v66 != v16)
  {
    v67 = 1;
    while (v66 != -4096)
    {
      v68 = v64 + v67++;
      v64 = v68 & (v56 - 1);
      v65 = v55 + 48 * v64;
      v66 = *(_QWORD *)(v65 + 24);
      if (v66 == v16)
        goto LABEL_71;
    }
    goto LABEL_70;
  }
LABEL_71:
  if (v65 == v55 + 48 * v56 || (v69 = *(_QWORD *)(v65 + 40)) == 0)
  {
    v69 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v54, v16);
    v54 = *(_QWORD *)(a1 + 32);
  }
  Constant = llvm::ScalarEvolution::getConstant((llvm::ConstantInt ****)v54, (const llvm::APInt *)&v229, v26);
  v71 = *(_QWORD *)(a1 + 32);
  v244 = (unint64_t)&v246;
  v246 = SCEVIter;
  v247 = Constant;
  v245 = 0x200000002;
  AddExpr = llvm::ScalarEvolution::getAddExpr(v71, (uint64_t)&v244, 0, 0);
  if ((uint64_t *)v244 != &v246)
    free((void *)v244);
  v97 = AddExpr == v69;
  v73 = v226;
  if (v97 || (llvm::ScalarEvolution::getMinusSCEV(*(_QWORD *)(a1 + 32), v69, SCEVIter), Constant == v74))
  {
    v24 = 1;
    goto LABEL_134;
  }
  v75 = v230;
  v228 = v230;
  if (v230 > 0x40)
  {
    v76 = (void *)operator new[]();
    v227 = v76;
    memcpy(v76, v229, (((unint64_t)v228 + 63) >> 3) & 0x3FFFFFF8);
    v75 = v228;
  }
  else
  {
    v76 = v229;
    v227 = v229;
  }
  v77 = *(unsigned __int8 *)(v14 + 16);
  v78 = *(unsigned __int8 *)(v16 + 16);
  if (v78 == 62)
    v79 = v16;
  else
    v79 = 0;
  if (v77 == 62)
    v80 = v14;
  else
    v80 = 0;
  if (v77 == 62 && v78 == 62)
  {
    v81 = *(_DWORD *)(v80 + 20);
    v82 = v81 & 0x7FFFFFF;
    v83 = *(_DWORD *)(v79 + 20);
    if ((v81 & 0x7FFFFFF) == (v83 & 0x7FFFFFF))
    {
      v84 = (_QWORD *)(v80 - 32 * v82);
      v85 = (_QWORD *)(v79 - 32 * v82);
      if (*v84 == *v85)
      {
        v86 = 24;
        if (*(_BYTE *)(v80 + 16) == 62)
          v86 = 64;
        v87 = *(_QWORD *)(v80 + v86);
        if ((v81 & 0x40000000) != 0)
          v84 = *(_QWORD **)(v80 - 8);
        v88 = (llvm::UndefValue **)(v84 + 4);
        v238 = (llvm::UndefValue **)(v84 + 4);
        v239 = v87 | 4;
        v89 = 24;
        if (*(_BYTE *)(v79 + 16) == 62)
          v89 = 64;
        v90 = *(_QWORD *)(v79 + v89);
        if ((v83 & 0x40000000) != 0)
          v85 = *(_QWORD **)(v79 - 8);
        v91 = (llvm::UndefValue **)(v85 + 4);
        v237[0] = v85 + 4;
        v237[1] = v90 | 4;
        v92 = v82 - 2;
        if ((_DWORD)v82 != 2)
        {
          do
          {
            if (*v238 != *(llvm::UndefValue **)v237[0])
              goto LABEL_130;
            sub_1C4774E38((uint64_t)&v238);
            sub_1C4774E38((uint64_t)v237);
            --v92;
          }
          while (v92);
          v91 = (llvm::UndefValue **)v237[0];
          v88 = v238;
        }
        v93 = *v88;
        v94 = *((unsigned __int8 *)*v88 + 16) <= 0x1Bu ? 0 : *v88;
        v95 = *v91;
        v96 = *((unsigned __int8 *)*v91 + 16) <= 0x1Bu ? 0 : *v91;
        v97 = !v94 || v96 == 0;
        if (!v97
          && *((unsigned __int8 *)v94 + 16) == *((unsigned __int8 *)v96 + 16)
          && *(_QWORD *)v94 == *(_QWORD *)v96)
        {
          v98 = v228 - 1;
          if (v228 >= 0x41)
            v99 = (void **)((char *)v227 + 8 * (v98 >> 6));
          else
            v99 = &v227;
          if (((1 << v98) & (unint64_t)*v99) == 0)
          {
            v101 = v95;
            v95 = v93;
            goto LABEL_168;
          }
          if (v228 > 0x40)
          {
            if ((*((_QWORD *)v227 + ((v228 - 1) >> 6)) & (1 << v98)) != 0
              && llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v227) == v98)
            {
              v24 = 0;
              v73 = v226;
              goto LABEL_131;
            }
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&v227);
            v73 = v226;
            goto LABEL_125;
          }
          if ((void *)(1 << v98) != v227)
          {
            if (v228)
              v100 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v228;
            else
              v100 = 0;
            v227 = (void *)(v100 & ~(unint64_t)v227);
LABEL_125:
            llvm::APInt::operator++((uint64_t)&v227);
            v101 = v93;
LABEL_168:
            v110 = *(_QWORD *)(a1 + 48);
            v111 = v239 & 0xFFFFFFFFFFFFFFF8;
            if ((v239 & 4) == 0 || !v111)
            {
              AggregateElement = *v238;
              if (!*v238 || *((_BYTE *)AggregateElement + 16) != 16)
                AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
              v115 = (unsigned int *)*((_QWORD *)AggregateElement + 3);
              v113 = (unsigned int *)((char *)AggregateElement + 24);
              v114 = v115;
              if (v113[2] < 0x41)
                v114 = v113;
              v111 = *(_QWORD *)(*(_QWORD *)(v111 + 16) + 8 * *v114);
            }
            v117 = sub_1C4E3D148(v110, v111);
            if ((_DWORD)v116 == 1)
            if (!llvm::APInt::urem((uint64_t **)&v227, v117))
            {
              v118 = *(llvm::Type **)v95;
              if ((*(_DWORD *)(*(_QWORD *)v95 + 8) & 0xFE) == 0x12)
                v118 = (llvm::Type *)**((_QWORD **)v118 + 2);
              PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v118);
              llvm::APInt::udiv((llvm::APInt *)&v227, v117, (llvm::APInt *)&v244);
              if (v245 < PrimitiveSizeInBits)
              {
                llvm::APInt::zext((llvm::APInt *)&v244, PrimitiveSizeInBits, (uint64_t)&v235);
              }
              else
              {
                v236 = v245;
                if (v245 > 0x40)
                {
                  v235 = operator new[]();
                  memcpy((void *)v235, (const void *)v244, (((unint64_t)v236 + 63) >> 3) & 0x3FFFFFF8);
                }
                else
                {
                  v235 = v244;
                }
              }
              if (v245 >= 0x41 && v244)
                MEMORY[0x1CAA32F9C](v244, 0x1000C8000313F17);
              v120 = *((unsigned __int8 *)v95 + 16);
              if ((v120 - 67) > 1)
              {
                v24 = 0;
                goto LABEL_277;
              }
              v121 = *((_DWORD *)v95 + 5);
              if ((v121 & 0x40000000) != 0)
                v122 = (_QWORD **)*((_QWORD *)v95 - 1);
              else
                v122 = (_QWORD **)((char *)v95 - 32 * (v121 & 0x7FFFFFF));
              v123 = *((_DWORD *)v101 + 5);
              if ((v123 & 0x40000000) != 0)
                v124 = (unint64_t *)*((_QWORD *)v101 - 1);
              else
                v124 = (unint64_t *)((char *)v101 - 32 * (v123 & 0x7FFFFFF));
              v24 = 0;
              v125 = *v124;
              if (!*v124)
                goto LABEL_276;
              v126 = *(unsigned __int8 *)(v125 + 16);
              v73 = v226;
              if (v126 >= 0x1C)
              {
                v127 = *v122;
                if (**v122 != *(_QWORD *)v125)
                  goto LABEL_199;
                if (v126 == 41
                  && ((v128 = *(_DWORD *)(v125 + 20), (v128 & 0x40000000) != 0)
                    ? (v129 = *(_QWORD *)(v125 - 8))
                    : (v129 = v125 - 32 * (v128 & 0x7FFFFFF)),
                      (v130 = *(_QWORD *)(v129 + 32), *(_BYTE *)(v130 + 16) == 16)
                   && ((v131 = *(_DWORD *)(v130 + 32), v131 > 0x40)
                     ? (v132 = **(_QWORD **)(v130 + 24))
                     : (v132 = (uint64_t)(*(_QWORD *)(v130 + 24) << -(char)v131) >> -(char)v131),
                       !sub_1C4DA92C4((llvm::APInt *)&v235, v132))))
                {
                  v135 = *(unsigned __int8 *)(v125 + 17);
                  if (v120 == 68)
                    v133 = (v135 >> 2) & 1;
                  else
                    v133 = (v135 >> 1) & 1;
                }
                else
                {
                  LOBYTE(v133) = 0;
                }
                if (*((unsigned __int8 *)v127 + 16) <= 0x1Bu)
                  v134 = 0;
                else
                  v134 = v127;
                if ((v133 & 1) == 0 && v134 && *((_BYTE *)v134 + 16) == 41 && *(_BYTE *)(v125 + 16) == 41)
                {
                  if (v120 == 68)
                  {
                    if ((*((_BYTE *)v134 + 17) & 4) != 0 && (*(_BYTE *)(v125 + 17) & 4) != 0)
                    {
LABEL_280:
                      v172 = 0;
                      v173 = 0;
                      v174 = 0;
                      v244 = 0x100000000;
                      while (1)
                      {
                        v175 = 0;
                        v176 = *((unsigned int *)&v244 + v173);
                        v177 = v172;
                        v240 = 0x100000000;
                        v179 = &v240;
                        v180 = 1;
                        do
                        {
                          v181 = v175;
                          if ((v174 & 1) != 0)
                          {
LABEL_283:
                            v174 = 1;
                            goto LABEL_292;
                          }
                          v182 = *((_DWORD *)v134 + 5);
                          if ((v182 & 0x40000000) != 0)
                            v183 = (_QWORD *)*(v134 - 1);
                          else
                            v183 = &v134[-4 * (v182 & 0x7FFFFFF)];
                          v184 = *(_DWORD *)(v125 + 20);
                          if ((v184 & 0x40000000) != 0)
                            v185 = *(_QWORD *)(v125 - 8);
                          else
                            v185 = v125 - 32 * (v184 & 0x7FFFFFF);
                          v186 = *(unsigned int *)v179;
                          if (v183[4 * v176] != *(_QWORD *)(v185 + 32 * v186))
                            goto LABEL_291;
                          if ((v182 & 0x40000000) != 0)
                            v187 = (_QWORD *)*(v134 - 1);
                          else
                            v187 = &v134[-4 * (v182 & 0x7FFFFFF)];
                          if ((v184 & 0x40000000) != 0)
                            v188 = *(_QWORD *)(v125 - 8);
                          else
                            v188 = v125 - 32 * (v184 & 0x7FFFFFF);
                          v178 = v176 != 1;
                          v189 = v187[4 * v178];
                          v190 = *(_QWORD *)(v188 + 32 * ((_DWORD)v186 != 1));
                          if (*(unsigned __int8 *)(v189 + 16) <= 0x1Bu)
                            v191 = 0;
                          else
                            v191 = v187[4 * v178];
                          if (*(unsigned __int8 *)(v190 + 16) <= 0x1Bu)
                            v192 = 0;
                          else
                            v192 = v190;
                          if (v192 && *(_BYTE *)(v192 + 16) == 41)
                          {
                            if (v120 == 68)
                            {
                              if ((*(_BYTE *)(v192 + 17) & 4) == 0)
                                goto LABEL_326;
                            }
                            else if ((*(_BYTE *)(v192 + 17) & 2) == 0)
                            {
                              goto LABEL_326;
                            }
                            v193 = *(_DWORD *)(v192 + 20);
                            if ((v193 & 0x40000000) != 0)
                              v194 = *(_QWORD *)(v192 - 8);
                            else
                              v194 = v192 - 32 * (v193 & 0x7FFFFFF);
                            v195 = *(_QWORD *)(v194 + 32);
                            if (*(_BYTE *)(v195 + 16) == 16)
                            {
                              v196 = *(_DWORD *)(v195 + 32);
                              v197 = v196 > 0x40
                                   ? **(_QWORD **)(v195 + 24)
                                   : (uint64_t)(*(_QWORD *)(v195 + 24) << -(char)v196) >> -(char)v196;
                              v198 = (v193 & 0x40000000) != 0
                                   ? *(_QWORD **)(v192 - 8)
                                   : (_QWORD *)(v192 - 32 * (v193 & 0x7FFFFFF));
                              if (*v198 == v189)
                              {
                                v199 = (uint64_t)(v235 << -(uint64_t)v236) >> -(uint64_t)v236;
                                if (v236 >= 0x41)
                                  v199 = *(_QWORD *)v235;
                                if (v199 == v197)
                                  goto LABEL_283;
                              }
                            }
                          }
LABEL_326:
                          if (!v191 || *(_BYTE *)(v191 + 16) != 41)
                            goto LABEL_291;
                          if (v120 == 68)
                          {
                            if ((*(_BYTE *)(v191 + 17) & 4) != 0)
                              goto LABEL_332;
                          }
                          else if ((*(_BYTE *)(v191 + 17) & 2) != 0)
                          {
LABEL_332:
                            v200 = *(_DWORD *)(v191 + 20);
                            if ((v200 & 0x40000000) != 0)
                              v201 = *(_QWORD *)(v191 - 8);
                            else
                              v201 = v191 - 32 * (v200 & 0x7FFFFFF);
                            v202 = *(_QWORD *)(v201 + 32);
                            if (*(_BYTE *)(v202 + 16) == 16)
                            {
                              v203 = *(_DWORD *)(v202 + 32);
                              v204 = v203 > 0x40
                                   ? **(_QWORD **)(v202 + 24)
                                   : (uint64_t)(*(_QWORD *)(v202 + 24) << -(char)v203) >> -(char)v203;
                              v205 = (v200 & 0x40000000) != 0
                                   ? *(_QWORD **)(v191 - 8)
                                   : (_QWORD *)(v191 - 32 * (v200 & 0x7FFFFFF));
                              if (*v205 == v190)
                              {
                                v206 = (uint64_t)(v235 << -(uint64_t)v236) >> -(uint64_t)v236;
                                if (v236 >= 0x41)
                                  v206 = *(_QWORD *)v235;
                                if (!(v206 + v204))
                                  goto LABEL_283;
                              }
                            }
                          }
                          if (!v192 || *(_BYTE *)(v192 + 16) != 41)
                            goto LABEL_291;
                          if (v120 == 68)
                          {
                            if ((*(_BYTE *)(v191 + 17) & 4) == 0 || (*(_BYTE *)(v192 + 17) & 4) == 0)
                              goto LABEL_291;
                          }
                          else if ((*(_BYTE *)(v191 + 17) & 2) == 0 || (*(_BYTE *)(v192 + 17) & 2) == 0)
                          {
                            goto LABEL_291;
                          }
                          v207 = *(_DWORD *)(v191 + 20);
                          if ((v207 & 0x40000000) != 0)
                            v208 = *(_QWORD *)(v191 - 8);
                          else
                            v208 = v191 - 32 * (v207 & 0x7FFFFFF);
                          if (*(_BYTE *)(*(_QWORD *)(v208 + 32) + 16) == 16)
                          {
                            v209 = *(_DWORD *)(v192 + 20);
                            v210 = (v209 & 0x40000000) != 0 ? *(_QWORD *)(v192 - 8) : v192 - 32 * (v209 & 0x7FFFFFF);
                            if (*(_BYTE *)(*(_QWORD *)(v210 + 32) + 16) == 16)
                            {
                              v211 = (v207 & 0x40000000) != 0 ? *(_QWORD *)(v191 - 8) : v191 - 32 * (v207 & 0x7FFFFFF);
                              v212 = *(_QWORD *)(v211 + 32);
                              v213 = *(_DWORD *)(v212 + 32);
                              v214 = v213 > 0x40
                                   ? **(_QWORD **)(v212 + 24)
                                   : (uint64_t)(*(_QWORD *)(v212 + 24) << -(char)v213) >> -(char)v213;
                              v215 = (v209 & 0x40000000) != 0 ? *(_QWORD *)(v192 - 8) : v192 - 32 * (v209 & 0x7FFFFFF);
                              v216 = *(_QWORD *)(v215 + 32);
                              v217 = *(_DWORD *)(v216 + 32);
                              v218 = v217 > 0x40
                                   ? **(_QWORD **)(v216 + 24)
                                   : (uint64_t)(*(_QWORD *)(v216 + 24) << -(char)v217) >> -(char)v217;
                              v219 = (v207 & 0x40000000) != 0
                                   ? *(_QWORD **)(v191 - 8)
                                   : (_QWORD *)(v191 - 32 * (v207 & 0x7FFFFFF));
                              v220 = (v209 & 0x40000000) != 0
                                   ? *(_QWORD **)(v192 - 8)
                                   : (_QWORD *)(v192 - 32 * (v209 & 0x7FFFFFF));
                              if (*v219 == *v220)
                              {
                                v221 = (uint64_t)(v235 << -(uint64_t)v236) >> -(uint64_t)v236;
                                if (v236 >= 0x41)
                                  v221 = *(_QWORD *)v235;
                                if (v221 == v218 - v214)
                                  goto LABEL_283;
                              }
                            }
                          }
LABEL_291:
                          v174 = 0;
LABEL_292:
                          v179 = (uint64_t *)((char *)&v240 + 4 * v180);
                          v175 = 1;
                          v180 = 2;
                        }
                        while ((v181 & 1) == 0);
                        v172 = 1;
                        v173 = 1;
                        if ((v177 & 1) != 0)
                        {
                          v222 = (llvm::Type *)*v127;
                          if ((*(_DWORD *)(*v127 + 8) & 0xFE) == 0x12)
                            v222 = (llvm::Type *)**((_QWORD **)v222 + 2);
                          v137 = llvm::Type::getPrimitiveSizeInBits(v222);
                          if ((v174 & 1) != 0)
                            goto LABEL_250;
LABEL_230:
                          v241 = v137;
                          if (v137 > 0x40)
                          {
                            llvm::APInt::initSlowCase((llvm::APInt *)&v240, 0, 0);
                            v243 = v137;
                            llvm::APInt::initSlowCase((llvm::APInt *)&v242, 0, 0);
                          }
                          else
                          {
                            v243 = v137;
                            v240 = 0;
                            v242 = 0;
                          }
                          v139 = *(_QWORD *)(a1 + 16);
                          v138 = *(_QWORD *)(a1 + 24);
                          v140 = (_QWORD *)v125;
                          if (!*(_QWORD *)(v125 + 40))
                          {
                            if (*((unsigned __int8 *)v127 + 16) < 0x1Cu || (v140 = v127, !v127[5]))
                              v140 = 0;
                          }
                          v244 = *(_QWORD *)(a1 + 48);
                          v245 = v139;
                          v246 = (uint64_t)v140;
                          v247 = v138;
                          v248 = 0;
                          v249 = 1;
                          sub_1C4F82B7C((uint64_t)v127, (int8x8_t *)&v240, 0, (const llvm::DataLayout **)&v244);
                          llvm::APInt::zext((llvm::APInt *)&v240, v236, (uint64_t)&v244);
                          if (v120 == 68)
                          {
                            v141 = ~(1 << (v137 - 1));
                            v142 = v245;
                            if (v245 <= 0x40)
                            {
                              v143 = v244 & v141;
                              goto LABEL_238;
                            }
                            *(_QWORD *)(v244 + 8 * ((v137 - 1) >> 6)) &= v141;
                            v145 = v244;
                            v146 = ((unint64_t)(v142 + 63) >> 3) & 0x3FFFFFF8;
                            while (v146)
                            {
                              v147 = *(_QWORD *)(v244 + v146 - 8);
                              v148 = *(_QWORD *)(v235 - 8 + v146);
                              v146 -= 8;
                              v149 = v147 > v148;
                              if (v147 != v148)
                                goto LABEL_242;
                            }
LABEL_396:
                            v151 = 0;
                            v144 = 0;
                            if (v145)
                            {
LABEL_246:
                              MEMORY[0x1CAA32F9C](v145, 0x1000C8000313F17);
                              v144 = v151;
                            }
                          }
                          else
                          {
                            if (v245 > 0x40)
                            {
                              v145 = v244;
                              v223 = (((unint64_t)v245 + 63) >> 3) & 0x3FFFFFF8;
                              while (v223)
                              {
                                v224 = *(_QWORD *)(v244 + v223 - 8);
                                v225 = *(_QWORD *)(v235 - 8 + v223);
                                v223 -= 8;
                                v149 = v224 > v225;
                                if (v224 != v225)
                                {
LABEL_242:
                                  v150 = v149;
                                  v151 = v150 ^ 1;
                                  goto LABEL_246;
                                }
                              }
                              goto LABEL_396;
                            }
                            v143 = v244;
LABEL_238:
                            v144 = v143 < v235;
                          }
                          if (v243 >= 0x41 && v242)
                            MEMORY[0x1CAA32F9C](v242, 0x1000C8000313F17);
                          if (v241 >= 0x41 && v240)
                            MEMORY[0x1CAA32F9C](v240, 0x1000C8000313F17);
                          if (!v144)
                            goto LABEL_250;
LABEL_199:
                          v24 = 0;
LABEL_276:
                          v73 = v226;
                          goto LABEL_277;
                        }
                      }
                    }
                  }
                  else if ((*((_BYTE *)v134 + 17) & 2) != 0 && (*(_BYTE *)(v125 + 17) & 2) != 0)
                  {
                    goto LABEL_280;
                  }
                }
                v136 = (llvm::Type *)*v127;
                if ((*(_DWORD *)(*v127 + 8) & 0xFE) == 0x12)
                  v136 = (llvm::Type *)**((_QWORD **)v136 + 2);
                v137 = llvm::Type::getPrimitiveSizeInBits(v136);
                if ((v133 & 1) == 0)
                  goto LABEL_230;
LABEL_250:
                v152 = *(_QWORD *)(a1 + 32);
                v153 = *(_QWORD *)(v152 + 104);
                v154 = *(_DWORD *)(v152 + 120);
                if (v154)
                {
                  v155 = v154 - 1;
                  v156 = (v154 - 1) & ((v127 >> 4) ^ (v127 >> 9));
                  v157 = v153 + 48 * v156;
                  v158 = *(_QWORD **)(v157 + 24);
                  if (v158 == v127)
                  {
LABEL_257:
                    if (v157 == v153 + 48 * v154 || (v161 = *(_QWORD *)(v157 + 40)) == 0)
                    {
                      v161 = llvm::ScalarEvolution::createSCEVIter(*(llvm::ScalarEvolution **)(a1 + 32), (unint64_t)v127);
                      v152 = *(_QWORD *)(a1 + 32);
                      v153 = *(_QWORD *)(v152 + 104);
                      v154 = *(_DWORD *)(v152 + 120);
                    }
                    if (v154)
                    {
                      v162 = (v154 - 1) & ((v125 >> 4) ^ (v125 >> 9));
                      v163 = v153 + 48 * v162;
                      v164 = *(_QWORD *)(v163 + 24);
                      if (v164 == v125)
                        goto LABEL_267;
                      v165 = 1;
                      while (v164 != -4096)
                      {
                        v166 = v162 + v165++;
                        v162 = v166 & (v154 - 1);
                        v163 = v153 + 48 * v162;
                        v164 = *(_QWORD *)(v163 + 24);
                        if (v164 == v125)
                          goto LABEL_267;
                      }
                    }
                    v163 = v153 + 48 * v154;
LABEL_267:
                    if (v163 == v153 + 48 * v154 || (v167 = *(_QWORD *)(v163 + 40)) == 0)
                    {
                      v167 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v152, v125);
                      v152 = *(_QWORD *)(a1 + 32);
                    }
                    llvm::APInt::trunc((llvm::APInt *)&v235, v137, (llvm::APInt *)&v244);
                    v169 = llvm::ScalarEvolution::getConstant((llvm::ConstantInt ****)v152, (const llvm::APInt *)&v244, v168);
                    if (v245 >= 0x41 && v244)
                      MEMORY[0x1CAA32F9C](v244, 0x1000C8000313F17);
                    v170 = *(_QWORD *)(a1 + 32);
                    v244 = (unint64_t)&v246;
                    v246 = v161;
                    v247 = v169;
                    v245 = 0x200000002;
                    v171 = llvm::ScalarEvolution::getAddExpr(v170, (uint64_t)&v244, 0, 0);
                    if ((uint64_t *)v244 != &v246)
                      free((void *)v244);
                    v24 = v171 == v167;
                    goto LABEL_276;
                  }
                  v159 = 1;
                  while (v158 != (_QWORD *)-4096)
                  {
                    v160 = v156 + v159++;
                    v156 = v160 & v155;
                    v157 = v153 + 48 * (v160 & v155);
                    v158 = *(_QWORD **)(v157 + 24);
                    if (v158 == v127)
                      goto LABEL_257;
                  }
                }
                v157 = v153 + 48 * v154;
                goto LABEL_257;
              }
LABEL_277:
              if (v236 < 0x41)
                goto LABEL_131;
              v109 = v235;
              if (!v235)
                goto LABEL_131;
LABEL_166:
              MEMORY[0x1CAA32F9C](v109, 0x1000C8000313F17);
              goto LABEL_131;
            }
          }
        }
      }
    }
LABEL_130:
    v24 = 0;
    goto LABEL_131;
  }
  v24 = 0;
  if (a5 != 3 && v77 == 85 && v78 == 85)
  {
    if (*(_QWORD *)(v14 - 96) == *(_QWORD *)(v16 - 96))
    {
      v103 = (a5 + 1);
      v104 = *(_QWORD *)(v14 - 64);
      v105 = *(_QWORD *)(v16 - 64);
      LODWORD(v245) = v75;
      if (v75 > 0x40)
      {
        v106 = (((unint64_t)v75 + 63) >> 3) & 0x3FFFFFF8;
        v244 = operator new[]();
        memcpy((void *)v244, v227, v106);
      }
      else
      {
        v244 = (unint64_t)v76;
      }
      if (sub_1C6062B2C(a1, v104, v105, &v244, v103))
      {
        v107 = *(_QWORD *)(v14 - 32);
        v108 = *(_QWORD *)(v16 - 32);
        v241 = v228;
        if (v228 > 0x40)
        {
          v240 = operator new[]();
          memcpy((void *)v240, v227, (((unint64_t)v228 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v240 = (uint64_t)v227;
        }
        v24 = sub_1C6062B2C(a1, v107, v108, &v240, v103);
        if (v241 >= 0x41 && v240)
          MEMORY[0x1CAA32F9C](v240, 0x1000C8000313F17);
      }
      else
      {
        v24 = 0;
      }
      if (v245 < 0x41)
        goto LABEL_131;
      v109 = v244;
      if (!v244)
        goto LABEL_131;
      goto LABEL_166;
    }
    goto LABEL_130;
  }
LABEL_131:
  if (v228 >= 0x41 && v227)
    MEMORY[0x1CAA32F9C](v227, 0x1000C8000313F17);
LABEL_134:
  if (v230 >= 0x41 && v229)
    MEMORY[0x1CAA32F9C](v229, 0x1000C8000313F17);
  if (v73 >= 0x41 && v31)
    goto LABEL_139;
LABEL_140:
  if (v232 >= 0x41 && v231)
    MEMORY[0x1CAA32F9C](v231, 0x1000C8000313F17);
  if (v234 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  return v24;
}

_QWORD *sub_1C60641B0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  llvm::Function *Function;
  llvm::Value *PersonalityFn;
  const llvm::Value *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  int v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t ***v38;
  uint64_t v39;
  int v40;
  uint64_t *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t ***v47;
  BOOL v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  int v59;
  BOOL v60;
  unsigned int v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t **v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  int v75;
  BOOL v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t *v86;
  int v87;
  uint64_t *v88;
  uint64_t v89;
  char v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  void *v103;
  void *v104;
  __int128 *v105;
  int v107;
  __int128 v109;
  __int128 v110;
  _OWORD v111[4];
  __int128 v112[3];
  char v113;
  void *v114;
  uint64_t v115;
  _BYTE v116[128];
  uint64_t *v117;
  uint64_t v118;
  _QWORD v119[18];

  v119[16] = *MEMORY[0x1E0C80C00];
  v117 = v119;
  v118 = 0x1000000000;
  v114 = v116;
  v115 = 0x1000000000;
  v5 = *(unsigned __int8 *)(*a2 + 16);
  v6 = sub_1C6064B3C(a2, a3);
  v107 = a3;
  if (v6 == v7)
  {
    LODWORD(v35) = 0;
  }
  else
  {
    v8 = v6;
    v9 = v7;
    do
    {
      if (v8)
        v10 = v8 - 24;
      else
        v10 = 0;
      v11 = *(unsigned __int8 *)(v10 + 16);
      if ((v11 & 0xFE) == 0x3C)
      {
        if (a3)
        {
          v12 = 8 * a3;
          v13 = a2;
          while (*v13 != v10)
          {
            ++v13;
            v12 -= 8;
            if (!v12)
            {
              v13 = &a2[a3];
              break;
            }
          }
        }
        else
        {
          v13 = a2;
        }
        if (a3 != v13 - a2)
        {
          v17 = v115;
          v18 = &v114;
          if (v115 >= (unint64_t)HIDWORD(v115))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, (uint64_t)v116, v115 + 1, 8);
            v17 = v115;
          }
          goto LABEL_48;
        }
      }
      if (v11 == 29 || v11 == 35)
        break;
      if (v11 == 80)
      {
        Function = (llvm::Function *)llvm::Instruction::getFunction((llvm::Instruction *)v10);
        PersonalityFn = (llvm::Value *)llvm::Function::getPersonalityFn(Function);
        if (llvm::classifyEHPersonality(PersonalityFn, v24) != 10)
          break;
      }
      else if ((llvm::Instruction::mayThrow((llvm::Instruction *)v10) & 1) != 0
             || !llvm::Instruction::willReturn((llvm::Instruction *)v10))
      {
        break;
      }
      v14 = *(unsigned __int8 *)(v10 + 16);
      v15 = (v14 - 33);
      if (v15 <= 0x37)
      {
        if (((1 << (v14 - 33)) & 0x8000000000041) != 0)
        {
          v19 = *(_QWORD *)(v10 + 64);
          if (!v19 || (*(_BYTE *)(v19 + 20) & 4) == 0 && (*(_BYTE *)(v19 + 17) & 0x10) == 0)
          {
            LODWORD(v109) = 7;
            if (sub_1C53E4BBC(v10, (__int32 *)&v109, 1uLL))
            {
              v25 = *(_QWORD *)(v10 - 32);
              if (!v25
                || *(_BYTE *)(v25 + 16)
                || *(_QWORD *)(v25 + 24) != *(_QWORD *)(v10 + 72)
                || *(_DWORD *)(v25 + 36) != 7)
              {
                goto LABEL_46;
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v10, 66) & 1) == 0
              && !llvm::CallBase::hasFnAttrOnCalledFunction(v10, 44))
            {
              goto LABEL_46;
            }
          }
          goto LABEL_36;
        }
        if (((1 << (v14 - 33)) & 0x808001C8000010) != 0)
          goto LABEL_46;
        if (v15 == 28)
        {
          if ((*(_WORD *)(v10 + 18) & 0x301) != 0)
            goto LABEL_46;
LABEL_36:
          v14 = *(unsigned __int8 *)(v10 + 16);
        }
      }
      v16 = (v14 - 33);
      if (v16 > 0x37)
        goto LABEL_49;
      if (((1 << v16) & 0x8000000000041) != 0)
      {
        v20 = *(_QWORD *)(v10 + 64);
        if (v20 && (*(_BYTE *)(v20 + 17) & 0x30) != 0)
          goto LABEL_49;
        v21 = *(_DWORD *)(v10 + 20);
        if (v21 < 0
          && (v26 = v10 - 32 * (v21 & 0x7FFFFFF), v29 = *(_QWORD *)(v26 - 8), v27 = v26 - 8, (v28 = v29) != 0))
        {
          v30 = -v28;
          while (1)
          {
            v31 = *(_DWORD *)(*(_QWORD *)(v27 + v30) + 8);
            v32 = v31 > 7;
            v33 = (1 << v31) & 0x83;
            if (v32 || v33 == 0)
              break;
            v30 += 16;
            if (!v30)
              goto LABEL_40;
          }
        }
        else
        {
LABEL_40:
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v10, 45) & 1) != 0
            || (llvm::CallBase::hasFnAttrOnCalledFunction(v10, 44) & 1) != 0)
          {
            goto LABEL_49;
          }
        }
        goto LABEL_46;
      }
      if (v16 == 27)
      {
        if ((*(_WORD *)(v10 + 18) & 0x301) == 0)
          goto LABEL_49;
LABEL_46:
        v17 = v118;
        v18 = (void **)&v117;
        if (v118 >= (unint64_t)HIDWORD(v118))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, (uint64_t)v119, v118 + 1, 8);
          v17 = v118;
        }
LABEL_48:
        *((_QWORD *)*v18 + v17) = v10;
        ++*((_DWORD *)v18 + 2);
        goto LABEL_49;
      }
      if (((1 << v16) & 0x808001D0000010) != 0)
        goto LABEL_46;
LABEL_49:
      v8 = *(_QWORD *)(v8 + 8);
    }
    while (v8 != v9);
    v35 = v115;
    if ((_DWORD)v115)
    {
      v36 = 0;
      v37 = 0;
      while (1)
      {
        v38 = (uint64_t ***)*((_QWORD *)v114 + v36);
        if (v37)
        {
          v39 = *(_QWORD *)(v37 + 40);
          v40 = *(__int16 *)(v39 + 18);
          if ((v40 & 0x80000000) == 0)
          {
            v95 = *(_QWORD *)(v39 + 48);
            if (v95 != v39 + 40)
            {
              v96 = 0;
              do
              {
                v97 = v95 - 24;
                if (!v95)
                  v97 = 0;
                *(_DWORD *)(v97 + 56) = v96++;
                v95 = *(_QWORD *)(v95 + 8);
              }
              while (v95 != v39 + 40);
            }
            *(_WORD *)(v39 + 18) = v40 | 0x8000;
          }
          if (*(_DWORD *)(v37 + 56) < *((_DWORD *)v38 + 14))
            break;
        }
        if ((_DWORD)v118)
        {
          v41 = v117;
          v42 = (char *)&v117[v118];
          while (2)
          {
            v43 = *v41;
            if (v37)
            {
              v44 = *(_QWORD *)(v37 + 40);
              v45 = *(__int16 *)(v44 + 18);
              if ((v45 & 0x80000000) == 0)
              {
                v80 = *(_QWORD *)(v44 + 48);
                if (v80 != v44 + 40)
                {
                  v81 = 0;
                  do
                  {
                    v82 = v80 - 24;
                    if (!v80)
                      v82 = 0;
                    *(_DWORD *)(v82 + 56) = v81++;
                    v80 = *(_QWORD *)(v80 + 8);
                  }
                  while (v80 != v44 + 40);
                }
                *(_WORD *)(v44 + 18) = v45 | 0x8000;
              }
              if (*(_DWORD *)(v37 + 56) < *(_DWORD *)(v43 + 56))
                goto LABEL_162;
            }
            if (*(_BYTE *)(v43 + 16) == 60)
              v46 = v43;
            else
              v46 = 0;
            if (*((_BYTE *)v38 + 16) == 60)
              v47 = v38;
            else
              v47 = 0;
            if (v46)
              v48 = v47 == 0;
            else
              v48 = 1;
            if (!v48)
              goto LABEL_150;
            if (v5 != 60)
            {
              v49 = *(_QWORD *)(v43 + 40);
              v50 = *(__int16 *)(v49 + 18);
              if ((v50 & 0x80000000) == 0)
              {
                v83 = *(_QWORD *)(v49 + 48);
                if (v83 != v49 + 40)
                {
                  v84 = 0;
                  do
                  {
                    v85 = v83 - 24;
                    if (!v83)
                      v85 = 0;
                    *(_DWORD *)(v85 + 56) = v84++;
                    v83 = *(_QWORD *)(v83 + 8);
                  }
                  while (v83 != v49 + 40);
                }
                *(_WORD *)(v49 + 18) = v50 | 0x8000;
              }
              if (*(_DWORD *)(v43 + 56) < *((_DWORD *)v38 + 14))
                goto LABEL_150;
              if (!v46 || (*(_BYTE *)(v46 + 23) & 0x20) == 0)
                goto LABEL_146;
              v51 = ***(_QWORD ***)v46;
              *(_QWORD *)&v109 = v46;
              v52 = *(_DWORD *)(v51 + 2496);
              if (!v52)
              {
                v91 = 0;
                goto LABEL_155;
              }
              v53 = *(_QWORD *)(v51 + 2480);
              v54 = v52 - 1;
              v55 = v54 & ((v46 >> 4) ^ (v46 >> 9));
              v56 = (_QWORD *)(v53 + 40 * v55);
              v57 = *v56;
              if (*v56 != v46)
              {
                v58 = 0;
                v59 = 1;
                while (v57 != -4096)
                {
                  if (v58)
                    v60 = 0;
                  else
                    v60 = v57 == -8192;
                  if (v60)
                    v58 = v56;
                  v61 = v55 + v59++;
                  v55 = v61 & v54;
                  v56 = (_QWORD *)(v53 + 40 * v55);
                  v57 = *v56;
                  if (*v56 == v46)
                    goto LABEL_103;
                }
                if (v58)
                  v91 = v58;
                else
                  v91 = v56;
LABEL_155:
                v56 = sub_1C541AB24(v51 + 2480, (uint64_t)&v109, (uint64_t *)&v109, v91);
                v92 = v109;
                v56[4] = 0;
                v56[3] = 0;
                *v56 = v92;
                v56[1] = v56 + 3;
                v56[2] = 0x100000000;
              }
LABEL_103:
              v62 = *((unsigned int *)v56 + 4);
              if (!(_DWORD)v62)
                goto LABEL_146;
              v63 = (_QWORD *)(v56[1] + 8);
              v64 = 16 * v62;
              while (*((_DWORD *)v63 - 2) != 6)
              {
                v63 += 2;
                v64 -= 16;
                if (!v64)
                  goto LABEL_146;
              }
LABEL_145:
              if (!*v63)
                goto LABEL_146;
LABEL_150:
              if (++v41 == (uint64_t *)v42)
                goto LABEL_162;
              continue;
            }
            break;
          }
          v65 = v38[5];
          v66 = *((__int16 *)v65 + 9);
          if ((v66 & 0x80000000) == 0)
          {
            v86 = v65[6];
            if (v86 != (uint64_t *)(v65 + 5))
            {
              v87 = 0;
              do
              {
                v88 = v86 - 3;
                if (!v86)
                  v88 = 0;
                *((_DWORD *)v88 + 14) = v87++;
                v86 = (uint64_t *)v86[1];
              }
              while (v86 != (uint64_t *)(v65 + 5));
            }
            *((_WORD *)v65 + 9) = v66 | 0x8000;
          }
          if (*((_DWORD *)v38 + 14) < *(_DWORD *)(v43 + 56))
            goto LABEL_150;
          if (!v47 || (*((_BYTE *)v47 + 23) & 0x20) == 0)
          {
LABEL_146:
            v89 = *(_QWORD *)(a1 + 8);
            llvm::MemoryLocation::getOrNone(v38, (uint64_t)&v109);
            v112[0] = v109;
            v112[1] = v110;
            v112[2] = v111[0];
            v113 = 1;
            v90 = sub_1C4D90C64(v89, v43, v112);
            if (v5 == 60)
            {
              if ((v90 & 2) != 0)
                goto LABEL_163;
            }
            else if ((v90 & 3) != 0)
            {
              goto LABEL_165;
            }
            goto LABEL_150;
          }
          v67 = ***v47;
          *(_QWORD *)&v109 = v47;
          v68 = *(_DWORD *)(v67 + 2496);
          if (v68)
          {
            v69 = *(_QWORD *)(v67 + 2480);
            v70 = v68 - 1;
            v71 = v70 & ((v47 >> 4) ^ (v47 >> 9));
            v72 = (_QWORD *)(v69 + 40 * v71);
            v73 = *v72;
            if ((uint64_t ***)*v72 != v47)
            {
              v74 = 0;
              v75 = 1;
              while (v73 != -4096)
              {
                if (v74)
                  v76 = 0;
                else
                  v76 = v73 == -8192;
                if (v76)
                  v74 = v72;
                v77 = v71 + v75++;
                v71 = v77 & v70;
                v72 = (_QWORD *)(v69 + 40 * v71);
                v73 = *v72;
                if ((uint64_t ***)*v72 == v47)
                  goto LABEL_122;
              }
              if (v74)
                v93 = v74;
              else
                v93 = v72;
LABEL_159:
              v72 = sub_1C541AB24(v67 + 2480, (uint64_t)&v109, (uint64_t *)&v109, v93);
              v94 = v109;
              v72[4] = 0;
              v72[3] = 0;
              *v72 = v94;
              v72[1] = v72 + 3;
              v72[2] = 0x100000000;
            }
LABEL_122:
            v78 = *((unsigned int *)v72 + 4);
            if (!(_DWORD)v78)
              goto LABEL_146;
            v63 = (_QWORD *)(v72[1] + 8);
            v79 = 16 * v78;
            while (*((_DWORD *)v63 - 2) != 6)
            {
              v63 += 2;
              v79 -= 16;
              if (!v79)
                goto LABEL_146;
            }
            goto LABEL_145;
          }
          v93 = 0;
          goto LABEL_159;
        }
LABEL_162:
        v43 = v37;
LABEL_163:
        if (v5 == 60 && v43)
          break;
LABEL_165:
        ++v36;
        v37 = v43;
        if (v36 == v35)
          goto LABEL_175;
      }
      LODWORD(v35) = v36;
    }
  }
LABEL_175:
  v98 = (uint64_t *)v114;
  *(_QWORD *)&v109 = v111;
  *((_QWORD *)&v109 + 1) = v111;
  *(_QWORD *)&v110 = 8;
  DWORD2(v110) = 0;
  if ((_DWORD)v35)
  {
    v99 = 8 * v35;
    do
    {
      v100 = *v98++;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v109, v100);
      v99 -= 8;
    }
    while (v99);
  }
  v101 = 0;
  if (v107)
  {
    do
    {
      v102 = sub_1C477672C((uint64_t)&v109, a2[v101]);
      v103 = (void *)*((_QWORD *)&v109 + 1);
      v104 = (void *)v109;
      v105 = (__int128 *)((char *)&v110 + 4);
      if (*((_QWORD *)&v109 + 1) != (_QWORD)v109)
        v105 = &v110;
      if (v102 == (_QWORD *)(*((_QWORD *)&v109 + 1) + 8 * *(unsigned int *)v105))
        break;
      ++v101;
    }
    while (v107 != v101);
  }
  else
  {
    v103 = (void *)*((_QWORD *)&v109 + 1);
    v104 = (void *)v109;
  }
  if (v103 != v104)
    free(v103);
  if (v114 != v116)
    free(v114);
  if (v117 != v119)
    free(v117);
  return a2;
}

uint64_t sub_1C6064AB8(_QWORD ***a1, unsigned int a2, uint64_t a3, unsigned __int8 a4)
{
  unsigned int v4;
  char v6;

  if (!((1 << a4) % (unint64_t)a2))
    return 0;
  v6 = 0;
  v4 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, char *))(**a1[5] + 600))(*a1[5], *(*a1)[5], 8 * a2, a3, a4, &v6) ^ 1;
  if (v6)
    return v4;
  else
    return 1;
}

uint64_t sub_1C6064B3C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = *a1;
  result = *a1 + 24;
  v5 = *(_QWORD *)(v3 + 40);
  v6 = v5 + 40;
  v7 = *(_QWORD *)(v5 + 48);
  if (v7 != v6)
  {
    v8 = 0;
    do
    {
      v9 = v7 - 24;
      if (!v7)
        v9 = 0;
      if (a2)
      {
        v10 = 8 * a2;
        v11 = a1;
        while (*v11 != v9)
        {
          ++v11;
          v10 -= 8;
          if (!v10)
          {
            v11 = &a1[a2];
            break;
          }
        }
      }
      else
      {
        v11 = a1;
      }
      if (a2 != v11 - a1)
      {
        if (!v8)
          result = v9 + 24;
        if (a2 == v8 + 1)
          return result;
        ++v8;
      }
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7 != v6);
  }
  return result;
}

void sub_1C6064BE8(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD ****v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;
  unsigned __int8 **v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[9];

  v16[8] = *MEMORY[0x1E0C80C00];
  v3 = 8 * a3;
  v14 = v16;
  v15 = 0x800000000;
  if ((unint64_t)(8 * a3) >= 0x41)
  {
    v12 = a2;
    v13 = a1;
    v10 = 8 * a3;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, (uint64_t)v16, (8 * a3) >> 3, 8);
    v3 = v10;
    a2 = v12;
    a1 = v13;
    v4 = v15;
    v6 = (_QWORD ****)v14;
    v5 = v15;
    if (a3)
    {
LABEL_3:
      v7 = &v6[v4];
      v8 = v3;
      do
      {
        v9 = *a2++;
        *v7++ = v9;
        v8 -= 8;
      }
      while (v8);
      v6 = (_QWORD ****)v14;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = (_QWORD ****)v16;
    if (a3)
      goto LABEL_3;
  }
  LODWORD(v15) = v5 + (v3 >> 3);
  llvm::propagateMetadata(a1, v6, v15);
  if (v14 != v16)
    free(v14);
}

void sub_1C6064CE4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t ****v9;
  uint64_t v10;
  uint64_t ***v11;
  uint64_t **v12;
  uint64_t **v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[17];

  v16[16] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = 0x1000000000;
  if (a2)
  {
    LODWORD(v3) = 0;
    v4 = 8 * a2;
    do
    {
      v5 = *a1;
      if (*a1)
        v6 = *(unsigned __int8 *)(*a1 + 16) - 62 >= 0xFFFFFFFE;
      else
        v6 = 0;
      if (v6)
        v7 = *(_QWORD *)(v5 - 32);
      else
        v7 = 0;
      if (v3 >= HIDWORD(v15))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, (uint64_t)v16, v3 + 1, 8);
        LODWORD(v3) = v15;
      }
      *((_QWORD *)v14 + v3) = v5;
      v3 = (v15 + 1);
      LODWORD(v15) = v15 + 1;
      if (*(_BYTE *)(v7 + 16) == 62 && v7 != 0)
      {
        if (v3 >= HIDWORD(v15))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, (uint64_t)v16, v3 + 1, 8);
          LODWORD(v3) = v15;
        }
        *((_QWORD *)v14 + v3) = v7;
        LODWORD(v3) = v15 + 1;
        LODWORD(v15) = v15 + 1;
      }
      ++a1;
      v4 -= 8;
    }
    while (v4);
    v9 = (uint64_t ****)v14;
    if ((_DWORD)v3)
    {
      v10 = 8 * v3;
      do
      {
        v11 = *v9;
        if (!(*v9)[1])
        {
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v11[5] + 5), *v9);
          v12 = v11[3];
          v13 = v11[4];
          *v13 = (uint64_t *)v12;
          v12[1] = (uint64_t *)v13;
          v11[3] = 0;
          v11[4] = 0;
          llvm::Value::deleteValue((llvm::Value *)v11);
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
      v9 = (uint64_t ****)v14;
    }
    if (v9 != v16)
      free(v9);
  }
}

BOOL llvm::LoopVectorizeHints::Hint::validate(llvm::LoopVectorizeHints::Hint *this, unsigned int a2)
{
  _BOOL8 result;
  _BOOL4 v3;
  BOOL v4;

  switch(*((_DWORD *)this + 3))
  {
    case 0:
      v3 = (a2 & (a2 - 1)) == 0;
      if (!a2)
        v3 = 0;
      v4 = a2 >= 0x41;
      goto LABEL_10;
    case 1:
      v3 = (a2 & (a2 - 1)) == 0;
      if (!a2)
        v3 = 0;
      v4 = a2 >= 0x11;
LABEL_10:
      result = !v4 && v3;
      break;
    case 2:
    case 3:
    case 4:
    case 5:
      result = a2 < 2;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void llvm::LoopVectorizeHints::setAlreadyVectorized(llvm::LoopVectorizeHints *this)
{
  uint64_t *v2;
  const llvm::APInt *v3;
  llvm::ValueHandleBase *v4;
  llvm::Value *v5;
  uint64_t Impl;
  uint64_t LoopID;
  void **v8;
  void *v9;
  void **v10;
  void *v11;
  llvm::MDNode *PostTransformationMetadata;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  __int16 v25;
  _QWORD v26[5];

  v26[4] = *MEMORY[0x1E0C80C00];
  v2 = ****(uint64_t *****)(*((_QWORD *)this + 13) + 32);
  v22 = (const char *)llvm::MDString::get(v2, "llvm.loop.isvectorized", 0x16uLL);
  LODWORD(v14) = 32;
  v13 = 1;
  v4 = llvm::ConstantInt::get((llvm::ConstantInt *)v2, (llvm::LLVMContext *)&v13, v3);
  v23 = (uint64_t)llvm::ValueAsMetadata::get(v4, v5);
  Impl = llvm::MDTuple::getImpl(v2, &v22, 2, 0, 1);
  if (v14 >= 0x41 && v13)
    MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
  LoopID = llvm::Loop::getLoopID(*((llvm::Loop **)this + 13));
  v25 = 773;
  v22 = "llvm.loop.";
  v23 = 10;
  v24 = "vectorize.";
  llvm::Twine::str((llvm::Twine *)&v22, v19);
  v8 = (void **)v19[0];
  if (v20 >= 0)
    v8 = v19;
  v9 = (void *)(v20 & 0x7F);
  if (v20 < 0)
    v9 = v19[1];
  v26[0] = v8;
  v26[1] = v9;
  v16 = 773;
  v13 = (uint64_t)"llvm.loop.";
  v14 = 10;
  v15 = "interleave.";
  llvm::Twine::str((llvm::Twine *)&v13, __p);
  v10 = (void **)__p[0];
  if (v18 >= 0)
    v10 = __p;
  v11 = (void *)(v18 & 0x7F);
  if (v18 < 0)
    v11 = __p[1];
  v26[2] = v10;
  v26[3] = v11;
  v21 = Impl;
  PostTransformationMetadata = llvm::makePostTransformationMetadata(v2, LoopID, (uint64_t)v26, 2, &v21, 1);
  if (v18 < 0)
    operator delete(__p[0]);
  if (v20 < 0)
    operator delete(v19[0]);
  llvm::Loop::setLoopID(*((llvm::Loop **)this + 13), PostTransformationMetadata);
  *((_DWORD *)this + 14) = 1;
}

void llvm::LoopVectorizeHints::emitRemarkWithHints(llvm::LoopVectorizeHints *this)
{
  llvm::OptimizationRemarkEmitter *v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  const llvm::Loop *v17;
  const llvm::Loop *v18;
  unsigned int v19;
  char *v20;
  unint64_t v21;
  void **v22;
  std::string v23;
  void *v24;
  char v25;
  void *__dst[2];
  char v27;
  void *v28;
  char v29;
  const void *v30[2];
  uint64_t (**v31)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  const char *v37;
  const char *v38;
  uint64_t v39;
  char v40;
  char v41;
  void *v42;
  uint64_t v43;
  _BYTE v44[260];
  int v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void *__p;
  int v51;
  int v52;
  const char *v53;
  const char *v54;
  uint64_t v55;
  char v56;
  char v57;
  void *v58;
  uint64_t v59;
  _BYTE v60[260];
  int v61;
  uint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v2 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)this + 14);
  v3 = ****(_QWORD ****)v2;
  if (*(_QWORD *)(v3 + 128)
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v3 + 72) + 48))(*(_QWORD *)(v3 + 72)))
  {
    if (*((_DWORD *)this + 10))
    {
      llvm::Loop::getStartLoc(*((llvm::Loop **)this + 13), &v47);
      if (v47)
      {
        v7 = *((_QWORD *)v47 - *((unsigned int *)v47 + 2));
        if (*(_BYTE *)v7 != 15)
          v7 = *(_QWORD *)(v7 - 8 * *(unsigned int *)(v7 + 8));
        v8 = *((_DWORD *)v47 + 1);
        v9 = *((unsigned __int16 *)v47 + 1);
      }
      else
      {
        v7 = 0;
        v8 = 0;
        v9 = 0;
      }
      v15 = **(_QWORD **)(*((_QWORD *)this + 13) + 32);
      v16 = *(_QWORD *)(v15 + 56);
      LODWORD(v32) = 10;
      BYTE4(v32) = 2;
      v33 = v16;
      v34 = v7;
      v35 = v8;
      v36 = v9;
      v37 = "loop-vectorize";
      v38 = "MissedDetails";
      v39 = 13;
      v40 = 0;
      v41 = 0;
      v42 = v44;
      v43 = 0x400000000;
      v44[256] = 0;
      v45 = -1;
      v46 = v15;
      v31 = &off_1E814E538;
      if (v47)
        llvm::MetadataTracking::untrack((uint64_t)&v47, (unsigned __int8 *)v47);
      v47 = "loop not vectorized";
      v48 = 19;
      sub_1C53B17B4((uint64_t)&v42, (const void **)&v47);
      if (*((_DWORD *)this + 10) == 1)
      {
        v47 = " (Force=";
        v48 = 8;
        sub_1C53B17B4((uint64_t)&v42, (const void **)&v47);
        HIBYTE(v49) = 5;
        strcpy((char *)&v47, "Force");
        HIBYTE(v53) = 4;
        strcpy((char *)&__p, "true");
        v55 = 0;
        v54 = 0;
        sub_1C47E3888((uint64_t)&v31, (uint64_t)&v47);
        if (SHIBYTE(v53) < 0)
          operator delete(__p);
        if (SHIBYTE(v49) < 0)
          operator delete(v47);
        if (*((_DWORD *)this + 2))
        {
          __dst[0] = ", Vector Width=";
          __dst[1] = (void *)15;
          sub_1C53B17B4((uint64_t)&v42, (const void **)__dst);
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument((char *)__dst, "VectorWidth", 0xBuLL, *((unsigned int *)this + 2) | ((unint64_t)(*((_DWORD *)this + 22) == 1) << 32));
          sub_1C47E3888((uint64_t)&v31, (uint64_t)__dst);
          if (v29 < 0)
            operator delete(v28);
          if (v27 < 0)
            operator delete(__dst[0]);
        }
        if (*((_DWORD *)this + 6) || (llvm::hasUnrollTransformation(*((llvm **)this + 13), v17) & 2) != 0)
        {
          v23.__r_.__value_.__r.__words[0] = (std::string::size_type)", Interleave Count=";
          v23.__r_.__value_.__l.__size_ = 19;
          sub_1C53B17B4((uint64_t)&v42, (const void **)&v23.__r_.__value_.__l.__data_);
          v19 = *((_DWORD *)this + 6);
          if (!v19)
            v19 = (llvm::hasUnrollTransformation(*((llvm **)this + 13), v18) >> 1) & 1;
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v23, "InterleaveCount", 0xFuLL, v19);
          sub_1C47E3888((uint64_t)&v31, (uint64_t)&v23);
          if (v25 < 0)
            operator delete(v24);
          if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v23.__r_.__value_.__l.__data_);
        }
        v30[0] = ")";
        v30[1] = (const void *)1;
        sub_1C53B17B4((uint64_t)&v42, v30);
      }
    }
    else
    {
      llvm::Loop::getStartLoc(*((llvm::Loop **)this + 13), __dst);
      v4 = (int)__dst[0];
      if (__dst[0])
      {
        v5 = (_QWORD *)*((_QWORD *)__dst[0] - *((unsigned int *)__dst[0] + 2));
        if (*(_BYTE *)v5 != 15)
          v5 = (_QWORD *)v5[-*((unsigned int *)v5 + 2)];
        v6 = *((_DWORD *)__dst[0] + 1);
        v4 = *((unsigned __int16 *)__dst[0] + 1);
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
      v10 = **(_QWORD **)(*((_QWORD *)this + 13) + 32);
      v11 = *(_QWORD *)(v10 + 56);
      LODWORD(v48) = 10;
      BYTE4(v48) = 2;
      v49 = v11;
      __p = v5;
      v51 = v6;
      v52 = v4;
      v53 = "loop-vectorize";
      v54 = "MissedExplicitlyDisabled";
      v55 = 24;
      v56 = 0;
      v57 = 0;
      v58 = v60;
      v59 = 0x400000000;
      v60[256] = 0;
      v61 = -1;
      v62 = v10;
      v47 = &off_1E814E538;
      v31 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))"loop not vectorized: vectorization "
                                                                                     "is explicitly disabled";
      v32 = 57;
      sub_1C53B17B4((uint64_t)&v58, (const void **)&v31);
      sub_1C61998EC((uint64_t)&v31, (uint64_t)&v47);
      v31 = &off_1E814E538;
      v47 = &off_1E814E790;
      v12 = (char *)v58;
      if ((_DWORD)v59)
      {
        v13 = (unint64_t)v59 << 6;
        do
        {
          v14 = (void **)&v12[v13];
          if (v12[v13 - 17] < 0)
            operator delete(*(v14 - 5));
          if (*((char *)v14 - 41) < 0)
            operator delete(*(v14 - 8));
          v13 -= 64;
        }
        while (v13);
        v12 = (char *)v58;
      }
      if (v12 != v60)
        free(v12);
      if (__dst[0])
        llvm::MetadataTracking::untrack((uint64_t)__dst, (unsigned __int8 *)__dst[0]);
    }
    llvm::OptimizationRemarkEmitter::emit(v2, (llvm::DiagnosticInfoOptimizationBase *)&v31);
    v31 = &off_1E814E790;
    v20 = (char *)v42;
    if ((_DWORD)v43)
    {
      v21 = (unint64_t)v43 << 6;
      do
      {
        v22 = (void **)&v20[v21];
        if (v20[v21 - 17] < 0)
          operator delete(*(v22 - 5));
        if (*((char *)v22 - 41) < 0)
          operator delete(*(v22 - 8));
        v21 -= 64;
      }
      while (v21);
      v20 = (char *)v42;
    }
    if (v20 != v44)
      free(v20);
  }
}

size_t llvm::LoopVectorizeHints::setHint(size_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  size_t v4;
  uint64_t v6;
  const void *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x1E0C80C00];
  v4 = a3 - 10;
  if (a3 >= 0xA && *(_QWORD *)a2 == 0x6F6F6C2E6D766C6CLL && *(_WORD *)(a2 + 8) == 11888 && *(_BYTE *)a4 == 1)
  {
    v6 = *(_QWORD *)(a4 + 128);
    if (*(_BYTE *)(v6 + 16) == 16)
    {
      v8 = (const void *)(a2 + 10);
      v9 = (_QWORD *)(v6 + 24);
      if (*(_DWORD *)(v6 + 32) >= 0x41u)
        v9 = (_QWORD *)*v9;
      v10 = 0;
      v11 = *(_DWORD *)v9;
      v13[0] = result;
      v13[1] = result + 16;
      v13[2] = result + 32;
      v13[3] = result + 48;
      v13[4] = result + 64;
      v13[5] = result + 80;
      do
      {
        v12 = v13[v10];
        if (*(_QWORD *)v12)
        {
          result = strlen(*(const char **)v12);
          if (v4 == result)
          {
            if (a3 < 0xB || (result = memcmp(v8, *(const void **)v12, v4), !(_DWORD)result))
            {
LABEL_20:
              result = llvm::LoopVectorizeHints::Hint::validate((llvm::LoopVectorizeHints::Hint *)v12, v11);
              if ((_DWORD)result)
                *(_DWORD *)(v12 + 8) = v11;
              return result;
            }
          }
        }
        else if (a3 < 0xB)
        {
          goto LABEL_20;
        }
        ++v10;
      }
      while (v10 != 6);
    }
  }
  return result;
}

uint64_t llvm::LoopVectorizationLegality::canVectorizeOuterLoop(llvm::LoopVectorizationLegality *this)
{
  int v2;
  llvm::Loop *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  char v28;
  char v29;

  v2 = sub_1C550930C(****((_QWORD ****)this + 8), (uint64_t)"loop-vectorize", 14);
  v3 = *(llvm::Loop **)this;
  v4 = *(_QWORD *)(*(_QWORD *)this + 32);
  v5 = *(_QWORD *)(*(_QWORD *)this + 40);
  v6 = 1;
  if (v5 != v4)
  {
    while (1)
    {
      v7 = *(_QWORD *)(*(_QWORD *)v4 + 40);
      if (v7 == *(_QWORD *)v4 + 40
        || (v7 ? (v8 = v7 - 24) : (v8 = 0),
            (v9 = *(unsigned __int8 *)(v8 + 16) - 40, v9 >= 0xFFFFFFF5) ? (v10 = v8) : (v10 = 0),
            !v7 || (*(_BYTE *)(v10 + 16) == 30 ? (v11 = v9 > 0xFFFFFFF4) : (v11 = 0), !v11)))
      {
        llvm::reportVectorizationFailure((uint64_t)"Unsupported basic block terminator", 34, "loop control flow is not understood by vectorizer", 49, (uint64_t)"CFGNotUnderstood", 16, *((llvm::OptimizationRemarkEmitter **)this + 8), *(const llvm::Loop **)this, 0);
        goto LABEL_33;
      }
      if (!byte_1ED838AD8
        && (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) == 3
        && !llvm::Loop::isLoopInvariant(*(_QWORD *)this, *(_QWORD *)(v10 - 96)))
      {
        v12 = (uint64_t *)*((_QWORD *)this + 1);
        v13 = *((_DWORD *)v12 + 4);
        if (!v13)
        {
          llvm::reportVectorizationFailure((uint64_t)"Unsupported conditional branch", 30, "loop control flow is not understood by vectorizer", 49, (uint64_t)"CFGNotUnderstood", 16, *((llvm::OptimizationRemarkEmitter **)this + 8), *(const llvm::Loop **)this, 0);
          v6 = 0;
          v28 = 0;
          if (!v2)
            return v28 & 1;
          goto LABEL_34;
        }
        v14 = *(_QWORD *)(v10 - 32);
        v15 = *v12;
        v16 = v13 - 1;
        v17 = ((v14 >> 4) ^ (v14 >> 9)) & v16;
        v18 = *(_QWORD *)(v15 + 16 * v17);
        if (v14 == v18)
        {
LABEL_23:
          v21 = *(_QWORD *)(v15 + 16 * v17 + 8);
          if (v21 && **(_QWORD **)(v21 + 32) == v14)
            goto LABEL_34;
        }
        else
        {
          v19 = 1;
          while (v18 != -4096)
          {
            v20 = v17 + v19++;
            v17 = v20 & v16;
            v18 = *(_QWORD *)(v15 + 16 * v17);
            if (v14 == v18)
              goto LABEL_23;
          }
        }
        v22 = *(_QWORD *)(v10 - 64);
        v23 = ((v22 >> 4) ^ (v22 >> 9)) & v16;
        v24 = *(_QWORD *)(v15 + 16 * v23);
        if (v22 != v24)
        {
          v25 = 1;
          while (v24 != -4096)
          {
            v26 = v23 + v25++;
            v23 = v26 & v16;
            v24 = *(_QWORD *)(v15 + 16 * v23);
            if (v22 == v24)
              goto LABEL_29;
          }
LABEL_31:
          llvm::reportVectorizationFailure((uint64_t)"Unsupported conditional branch", 30, "loop control flow is not understood by vectorizer", 49, (uint64_t)"CFGNotUnderstood", 16, *((llvm::OptimizationRemarkEmitter **)this + 8), *(const llvm::Loop **)this, 0);
LABEL_33:
          v6 = 0;
          v28 = 0;
          if ((v2 & 1) == 0)
            return v28 & 1;
          goto LABEL_34;
        }
LABEL_29:
        v27 = *(_QWORD *)(v15 + 16 * v23 + 8);
        if (!v27 || **(_QWORD **)(v27 + 32) != v22)
          goto LABEL_31;
      }
LABEL_34:
      v4 += 8;
      if (v4 == v5)
      {
        v3 = *(llvm::Loop **)this;
        break;
      }
    }
  }
  if ((sub_1C6065AA4(v3, (uint64_t)v3) & 1) != 0
    || (llvm::reportVectorizationFailure((uint64_t)"Outer loop contains divergent loops", 35, "loop control flow is not understood by vectorizer", 49, (uint64_t)"CFGNotUnderstood", 16, *((llvm::OptimizationRemarkEmitter **)this + 8), *(const llvm::Loop **)this, 0), v6 = 0, v28 = 0, v2))
  {
    v29 = llvm::LoopVectorizationLegality::setupOuterLoopInductions(this);
    v28 = v6;
    if ((v29 & 1) == 0)
    {
      llvm::reportVectorizationFailure((uint64_t)"Unsupported outer loop Phi(s)", 29, "Unsupported outer loop Phi(s)", 29, (uint64_t)"UnsupportedPhi", 14, *((llvm::OptimizationRemarkEmitter **)this + 8), *(const llvm::Loop **)this, 0);
      v28 = 0;
    }
  }
  return v28 & 1;
}

uint64_t sub_1C6065AA4(llvm::Loop *a1, uint64_t a2)
{
  uint64_t CanonicalInductionVariable;
  uint64_t v5;
  uint64_t LoopLatch;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;

  if (a1 == (llvm::Loop *)a2)
  {
LABEL_36:
    v24 = *((_QWORD *)a1 + 1);
    v25 = *((_QWORD *)a1 + 2);
    if (v24 == v25)
      return 1;
    v26 = v24 + 8;
    do
    {
      v27 = sub_1C6065AA4(*(_QWORD *)(v26 - 8), a2);
      if ((_DWORD)v27)
        v28 = v26 == v25;
      else
        v28 = 1;
      v26 += 8;
    }
    while (!v28);
    return v27;
  }
  CanonicalInductionVariable = llvm::Loop::getCanonicalInductionVariable(a1);
  if (!CanonicalInductionVariable)
    return 0;
  v5 = CanonicalInductionVariable;
  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)a1);
  v7 = *(_QWORD *)(LoopLatch + 40);
  if (v7 == LoopLatch + 40)
    return 0;
  v8 = 0;
  v9 = v7 - 24;
  if (!v7)
    v9 = 0;
  v10 = *(unsigned __int8 *)(v9 + 16) - 40;
  if (v10 < 0xFFFFFFF5)
    v9 = 0;
  if (v7)
  {
    if (*(_BYTE *)(v9 + 16) == 30 && v10 >= 0xFFFFFFF5)
    {
      if ((*(_DWORD *)(v9 + 20) & 0x7FFFFFF) != 1)
      {
        v12 = *(_QWORD *)(v9 - 96);
        v13 = *(unsigned __int8 *)(v12 + 16);
        v14 = v12 && v13 >= 0x1C;
        if (v14 && v13 - 83 >= 0xFFFFFFFE)
        {
          v16 = *(_DWORD *)(v5 + 20);
          v17 = v16 & 0x7FFFFFF;
          if ((v16 & 0x7FFFFFF) != 0)
          {
            v18 = 0;
            while (1)
            {
              v19 = v5 - 32 * v17;
              if ((v16 & 0x40000000) != 0)
                v19 = *(_QWORD *)(v5 - 8);
              if (*(_QWORD *)(v19 + 32 * *(unsigned int *)(v5 + 60) + 8 * v18) == LoopLatch)
                break;
              if (v17 == ++v18)
                goto LABEL_29;
            }
          }
          else
          {
LABEL_29:
            LODWORD(v18) = -1;
          }
          v20 = *(_QWORD *)(v12 - 64);
          v21 = (v16 & 0x40000000) != 0 ? *(_QWORD *)(v5 - 8) : v5 - 32 * v17;
          v22 = *(_QWORD *)(v12 - 32);
          v23 = *(_QWORD *)(v21 + 32 * v18);
          if (v20 == v23 && llvm::Loop::isLoopInvariant(a2, v22))
            goto LABEL_36;
          if (v22 == v23 && llvm::Loop::isLoopInvariant(a2, v20))
            goto LABEL_36;
        }
      }
      return 0;
    }
  }
  return v8;
}

uint64_t llvm::LoopVectorizationLegality::setupOuterLoopInductions(llvm::LoopVectorizationLegality *this)
{
  uint64_t v2;
  llvm::InductionDescriptor *v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  int32x2_t ****v7;
  int32x2_t *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int32x2_t *****v13;
  int32x2_t ****v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int32x2_t ****v20;
  int32x2_t *v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int32x2_t *****v26;
  int32x2_t ****v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t *v31;
  int32x2_t ****v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _QWORD v39[3];

  v39[2] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(**(_QWORD **)(*(_QWORD *)this + 32) + 40) == **(_QWORD **)(*(_QWORD *)this + 32) + 40)
    return 1;
  v2 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)this + 32) + 48);
  v3 = (llvm::InductionDescriptor *)(v2 - 24);
  if (v2)
    v4 = v2 - 24;
  else
    v4 = 0;
  result = 1;
  if (v2 && *(_BYTE *)(v4 + 16) == 83)
  {
    while (1)
    {
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v35 = 0;
      v36 = 0;
      v34 = 0;
      v30 = 6;
      v37 = v39;
      v38 = 0x200000000;
      if (!llvm::InductionDescriptor::isInductionPHI(v3, *(llvm::PHINode **)this, *((const llvm::Loop ***)this + 2), (llvm::PredicatedScalarEvolution *)&v30, 0)|| v33 != 1)
      {
        break;
      }
      llvm::LoopVectorizationLegality::addInductionPhi((uint64_t *)this, (uint64_t)v3, &v30, (llvm::LoopVectorizationLegality *)((char *)this + 392));
      if (v37 != v39)
        free(v37);
      if (v32 && v32 != (int32x2_t ****)-8192 && v32 != (int32x2_t ****)-4096)
      {
        v6 = v30 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF8) = v31;
        if (v31)
        {
          *v31 = *v31 & 7 | v6;
        }
        else
        {
          v7 = v32;
          v8 = ***v32;
          v9 = (unint64_t)v8[303];
          if (v9 <= v6)
          {
            v10 = v8[305].u32[0];
            if (v9 + 16 * v10 > v6)
            {
              v11 = v10 - 1;
              LODWORD(v12) = v11 & ((v32 >> 4) ^ (v32 >> 9));
              v13 = (int32x2_t *****)(v9 + 16 * v12);
              v14 = *v13;
              if (v32 == *v13)
              {
LABEL_22:
                *v13 = (int32x2_t ****)-8192;
                v8[304] = vadd_s32(v8[304], (int32x2_t)0x1FFFFFFFFLL);
                v7 = v32;
              }
              else
              {
                v15 = 1;
                while (v14 != (int32x2_t ****)-4096)
                {
                  v16 = v12 + v15++;
                  v12 = v16 & v11;
                  v14 = *(int32x2_t *****)(v9 + 16 * v12);
                  if (v32 == v14)
                  {
                    v13 = (int32x2_t *****)(v9 + 16 * v12);
                    goto LABEL_22;
                  }
                }
              }
              *((_BYTE *)v7 + 17) &= ~1u;
            }
          }
        }
      }
      v17 = *((_QWORD *)v3 + 4);
      v3 = (llvm::InductionDescriptor *)(v17 - 24);
      if (v17)
        v18 = v17 - 24;
      else
        v18 = 0;
      result = 1;
      if (!v17 || *(_BYTE *)(v18 + 16) != 83)
        return result;
    }
    if (v37 != v39)
      free(v37);
    if (v32 && v32 != (int32x2_t ****)-8192 && v32 != (int32x2_t ****)-4096)
    {
      v19 = v30 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF8) = v31;
      if (v31)
      {
        *v31 = *v31 & 7 | v19;
      }
      else
      {
        v20 = v32;
        v21 = ***v32;
        v22 = (unint64_t)v21[303];
        if (v22 <= v19)
        {
          v23 = v21[305].u32[0];
          if (v22 + 16 * v23 > v19)
          {
            v24 = v23 - 1;
            LODWORD(v25) = v24 & ((v32 >> 4) ^ (v32 >> 9));
            v26 = (int32x2_t *****)(v22 + 16 * v25);
            v27 = *v26;
            if (v32 == *v26)
            {
LABEL_44:
              *v26 = (int32x2_t ****)-8192;
              v21[304] = vadd_s32(v21[304], (int32x2_t)0x1FFFFFFFFLL);
              v20 = v32;
            }
            else
            {
              v28 = 1;
              while (v27 != (int32x2_t ****)-4096)
              {
                v29 = v25 + v28++;
                v25 = v29 & v24;
                v27 = *(int32x2_t *****)(v22 + 16 * v25);
                if (v32 == v27)
                {
                  v26 = (int32x2_t *****)(v22 + 16 * v25);
                  goto LABEL_44;
                }
              }
            }
            *((_BYTE *)v20 + 17) &= ~1u;
          }
        }
      }
    }
    return 0;
  }
  return result;
}

_QWORD *llvm::LoopVectorizationLegality::addInductionPhi(uint64_t *a1, uint64_t a2, uint64_t *a3, llvm::SmallPtrSetImplBase *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  __int128 v17;
  void **v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Type ***v22;
  llvm::DataLayout *v23;
  llvm::Type ***v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  llvm::Type *v29;
  unsigned int PrimitiveSizeInBits;
  llvm::Type *v31;
  uint64_t v32;
  _QWORD *result;
  uint64_t LoopLatch;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  llvm::APInt *v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t v45;
  int32x2_t *v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  int v54;
  unsigned __int8 *v55;
  uint64_t v56;

  v56 = a2;
  v8 = sub_1C63D08A8((uint64_t)(a1 + 16), &v56);
  v9 = v8;
  v10 = *(_QWORD *)(v8 + 16);
  v11 = a3[2];
  if (v10 != v11)
  {
    v12 = v10 == -4096 || v10 == 0;
    if (!v12 && v10 != -8192)
    {
      v43 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v43 = *(_QWORD *)(v8 + 8);
      v44 = *(unint64_t **)(v8 + 8);
      if (v44)
      {
        *v44 = *v44 & 7 | v43;
      }
      else
      {
        v45 = *(_QWORD *)(v8 + 16);
        v46 = ***(int32x2_t ****)v45;
        v47 = (unint64_t)v46[303];
        if (v47 <= v43)
        {
          v48 = v46[305].u32[0];
          if (v47 + 16 * v48 > v43)
          {
            v49 = v48 - 1;
            LODWORD(v50) = v49 & ((v45 >> 4) ^ (v45 >> 9));
            v51 = (uint64_t *)(v47 + 16 * v50);
            v52 = *v51;
            if (v45 == *v51)
            {
LABEL_60:
              *v51 = -8192;
              v46[304] = vadd_s32(v46[304], (int32x2_t)0x1FFFFFFFFLL);
              v45 = *(_QWORD *)(v8 + 16);
            }
            else
            {
              v53 = 1;
              while (v52 != -4096)
              {
                v54 = v50 + v53++;
                v50 = v54 & v49;
                v52 = *(_QWORD *)(v47 + 16 * v50);
                if (v45 == v52)
                {
                  v51 = (uint64_t *)(v47 + 16 * v50);
                  goto LABEL_60;
                }
              }
            }
            *(_BYTE *)(v45 + 17) &= ~1u;
          }
        }
      }
      v11 = a3[2];
    }
    *(_QWORD *)(v8 + 16) = v11;
    if (v11 != -4096 && v11 != -8192 && v11 != 0)
    {
      v14 = *a3;
      v15 = (_QWORD *)(*a3 & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(v8 + 8) = *v15;
      *v15 = v8;
      *(_QWORD *)v8 = v14 & 0xFFFFFFFFFFFFFFF8 | *(_QWORD *)v8 & 7;
      v16 = *(uint64_t **)(v8 + 8);
      if (v16)
        *v16 = *v16 & 7 | (v8 + 8);
    }
  }
  v17 = *(_OWORD *)(a3 + 3);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a3 + 5);
  *(_OWORD *)(v8 + 24) = v17;
  if ((uint64_t *)v8 != a3)
  {
    v18 = (void **)(v8 + 56);
    v19 = *((unsigned int *)a3 + 16);
    v20 = *(unsigned int *)(v8 + 64);
    if (v20 >= v19)
    {
      if ((_DWORD)v19)
        memmove(*v18, (const void *)a3[7], 8 * v19);
      goto LABEL_21;
    }
    if (*(_DWORD *)(v8 + 68) < v19)
    {
      *(_DWORD *)(v8 + 64) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 56, v8 + 72, v19, 8);
    }
    else if ((_DWORD)v20)
    {
      memmove(*v18, (const void *)a3[7], 8 * v20);
LABEL_19:
      v21 = *((unsigned int *)a3 + 16);
      if (v20 != v21)
        memcpy((char *)*v18 + 8 * v20, (const void *)(a3[7] + 8 * v20), 8 * v21 - 8 * v20);
LABEL_21:
      *(_DWORD *)(v9 + 64) = v19;
      goto LABEL_22;
    }
    v20 = 0;
    goto LABEL_19;
  }
LABEL_22:
  if (*((_DWORD *)a3 + 16))
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 22), *(_QWORD *)a3[7]);
  v22 = *(llvm::Type ****)a2;
  if (*(unsigned __int8 *)(*(_QWORD *)a2 + 8) >= 7u)
  {
    v23 = (llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40) + 272);
    v24 = (llvm::Type ***)a1[48];
    sub_1C60663E8(v23, *(llvm::Type ****)a2);
    v26 = v25;
    if (v24)
    {
      sub_1C60663E8(v23, v24);
      v28 = v27;
      v29 = (*(_DWORD *)(v26 + 8) & 0xFE) == 0x12 ? **(llvm::Type ***)(v26 + 16) : (llvm::Type *)v26;
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v29);
      v31 = (*(_DWORD *)(v28 + 8) & 0xFE) == 0x12 ? **(llvm::Type ***)(v28 + 16) : (llvm::Type *)v28;
      if (PrimitiveSizeInBits <= llvm::Type::getPrimitiveSizeInBits(v31))
        v26 = v28;
    }
    a1[48] = v26;
  }
  if (*((_DWORD *)a3 + 6) == 1)
  {
    v32 = a3[4];
    if (!*(_WORD *)(v32 + 24))
    {
      v40 = *(_QWORD *)(v32 + 32);
      if (v40)
      {
        v41 = (llvm::APInt *)(v40 + 24);
        v42 = *(_DWORD *)(v40 + 32);
        if (v42 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase(v41) != v42 - 1)
            goto LABEL_35;
        }
        else if (*(_QWORD *)v41 != 1)
        {
          goto LABEL_35;
        }
        v55 = (unsigned __int8 *)a3[2];
        if (v55[16] <= 0x14u
          && llvm::Constant::isNullValue((llvm::Constant *)v55)
          && (!a1[9] || v22 == (llvm::Type ***)a1[48]))
        {
          a1[9] = a2;
        }
      }
    }
  }
LABEL_35:
  result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[2] + 104) + 8))(*(_QWORD *)(a1[2] + 104));
  if ((_DWORD)result)
  {
    sub_1C4774094(a4, a2);
    LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*a1);
    v35 = *(_DWORD *)(a2 + 20);
    v36 = v35 & 0x7FFFFFF;
    if ((v35 & 0x7FFFFFF) != 0)
    {
      v37 = 0;
      while (1)
      {
        v38 = a2 - 32 * v36;
        if ((v35 & 0x40000000) != 0)
          v38 = *(_QWORD *)(a2 - 8);
        if (*(_QWORD *)(v38 + 32 * *(unsigned int *)(a2 + 60) + 8 * v37) == LoopLatch)
          break;
        if (v36 == ++v37)
          goto LABEL_42;
      }
    }
    else
    {
LABEL_42:
      LODWORD(v37) = -1;
    }
    if ((v35 & 0x40000000) != 0)
      v39 = *(_QWORD *)(a2 - 8);
    else
      v39 = a2 - 32 * v36;
    return sub_1C4774094(a4, *(_QWORD *)(v39 + 32 * v37));
  }
  return result;
}

void sub_1C60663E8(llvm::DataLayout *a1, llvm::Type ***a2)
{
  int v2;
  llvm::Type *v3;

  v2 = *((unsigned __int8 *)a2 + 8);
  if (v2 == 15)
  {
    llvm::DataLayout::getIntPtrType(a1, (llvm::Type *)a2);
  }
  else
  {
    v3 = (llvm::Type *)a2;
    if ((v2 & 0xFE) == 0x12)
      v3 = *a2[2];
    llvm::Type::getPrimitiveSizeInBits(v3);
  }
}

uint64_t llvm::LoopVectorizationLegality::canVectorizeInstrs(llvm::LoopVectorizationLegality *this)
{
  _QWORD *v2;
  llvm::SmallPtrSetImplBase *v3;
  uint64_t v4;
  uint64_t v5;
  llvm::FixedVectorType **v6;
  int v7;
  llvm::FixedVectorType **v8;
  unsigned int v9;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  unsigned int v15;
  char v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  void **v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  __int128 v32;
  __int128 v33;
  uint64_t ***v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t ****v39;
  uint64_t ***v40;
  int v41;
  int v42;
  unint64_t **v43;
  uint64_t *v44;
  llvm::InductionDescriptor *v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  int32x2_t ****v49;
  int32x2_t *v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  int32x2_t *****v55;
  int32x2_t ****v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  int32x2_t *v62;
  unint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t ***v71;
  char *v72;
  size_t v73;
  size_t v74;
  uint64_t *v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  llvm::ScalarEvolution *v85;
  llvm *v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  const llvm::SCEV *SCEV;
  unsigned int v97;
  BOOL v99;
  int v100;
  llvm::FixedVectorType **v101;
  unsigned __int8 *v102;
  unsigned int v103;
  BOOL v104;
  int v105;
  BOOL v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  unsigned int v111;
  _QWORD *v112;
  _QWORD ***v113;
  _QWORD *v114;
  int v115;
  BOOL v116;
  unsigned int v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  unsigned __int16 *v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  unsigned int v126;
  unsigned __int16 **v127;
  unsigned __int16 *v128;
  unsigned __int16 **v129;
  int v130;
  BOOL v131;
  unsigned int v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  BOOL v136;
  double v137;
  uint64_t v138;
  double v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  char *v144;
  llvm::FixedVectorType *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  void *v150;
  unsigned __int16 **v151;
  unsigned __int16 *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t LoopLatch;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t *v161;
  unint64_t *v162;
  unint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  uint64_t ***v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t ****v178;
  uint64_t ***v179;
  int v180;
  int v181;
  llvm::OptimizationRemarkEmitter *v182;
  const llvm::Loop *v183;
  const char *v184;
  const char *v185;
  const char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t ***v190;
  char *v191;
  size_t v192;
  size_t v193;
  _DWORD *v194;
  uint64_t *v195;
  _QWORD *v196;
  llvm::SmallPtrSetImplBase *v197;
  int32x2_t *v198;
  llvm::SmallPtrSetImplBase *v199;
  uint64_t v200;
  uint64_t *v201;
  unint64_t **v202;
  uint64_t *v203;
  _QWORD *v204;
  _DWORD *v205;
  uint64_t *v206;
  _QWORD *v207;
  char *v208;
  llvm::SmallPtrSetImplBase *v209;
  uint64_t v210;
  _BOOL4 v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  llvm::InductionDescriptor *v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD v221[3];
  int v222;
  _DWORD v223[396];
  uint64_t v224;
  unint64_t *v225;
  int32x2_t ****v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  _QWORD v232[4];

  v232[2] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(*(_QWORD *)this + 32);
  v207 = *(_QWORD **)(*(_QWORD *)this + 40);
  if (v207 != v2)
  {
    v3 = (llvm::LoopVectorizationLegality *)((char *)this + 392);
    v210 = *v2;
    v199 = (llvm::SmallPtrSetImplBase *)v221;
    v205 = v223;
    v206 = &v217;
    v202 = &v225;
    v203 = &v219;
    v204 = v232;
    v197 = (llvm::LoopVectorizationLegality *)((char *)this + 240);
    v198 = (int32x2_t *)((char *)this + 336);
    v200 = (uint64_t)this + 80;
    v201 = &v228;
    v208 = (char *)&v218;
    v209 = (llvm::LoopVectorizationLegality *)((char *)this + 392);
    while (1)
    {
      v4 = *v2 + 40;
      v212 = *v2;
      v213 = v4;
      v5 = *(_QWORD *)(v212 + 48);
      if (v5 != v4)
        break;
LABEL_240:
      if (++v2 == v207)
        goto LABEL_241;
    }
    while (1)
    {
      if (v5)
        v6 = (llvm::FixedVectorType **)(v5 - 24);
      else
        v6 = 0;
      v7 = *((unsigned __int8 *)v6 + 16);
      if (v7 == 83)
        v8 = v6;
      else
        v8 = 0;
      v215 = (llvm::InductionDescriptor *)v8;
      if (!v5 || v7 != 83)
      {
        if (v7 == 84)
          v12 = (uint64_t)v6;
        else
          v12 = 0;
        v13 = v7 != 84 || v5 == 0;
        v211 = v13;
        if (!v13)
        {
          if (!llvm::getVectorIntrinsicIDForCall(v12, *((uint64_t **)this + 4)) && !sub_1C4D99D08(v12))
          {
            v14 = *(_QWORD *)(v12 - 32);
            if (!v14 || *(_BYTE *)(v14 + 16) || *(_QWORD *)(v14 + 24) != *(_QWORD *)(v12 + 72))
              goto LABEL_282;
            if (!*((_QWORD *)this + 4))
            {
              LODWORD(v216) = 0;
              goto LABEL_297;
            }
            v216 = v208;
            v217 = 0x800000000;
            sub_1C4EA1A3C((char **)v12, (uint64_t)&v216);
            v15 = v217;
            if ((_DWORD)v217)
            {
              v16 = 1;
              v17 = (char *)v216;
              goto LABEL_37;
            }
            v34 = *(uint64_t ****)(v12 - 32);
            if (!v34 || *((_BYTE *)v34 + 16) || v34[3] != *(uint64_t ***)(v12 + 72))
              v34 = 0;
            if ((*((_BYTE *)v34 + 23) & 0x10) != 0)
            {
              v35 = ***v34;
              v36 = *(_QWORD *)(v35 + 152);
              v37 = *(unsigned int *)(v35 + 168);
              if (!(_DWORD)v37)
                goto LABEL_115;
              LODWORD(v38) = (v37 - 1) & ((v34 >> 4) ^ (v34 >> 9));
              v39 = (uint64_t ****)(v36 + 16 * v38);
              v40 = *v39;
              if (*v39 != v34)
              {
                v41 = 1;
                while (v40 != (uint64_t ***)-4096)
                {
                  v42 = v38 + v41++;
                  v38 = v42 & (v37 - 1);
                  v40 = *(uint64_t ****)(v36 + 16 * v38);
                  if (v40 == v34)
                  {
                    v39 = (uint64_t ****)(v36 + 16 * v38);
                    goto LABEL_116;
                  }
                }
LABEL_115:
                v39 = (uint64_t ****)(v36 + 16 * v37);
              }
LABEL_116:
              v71 = v39[1];
              v74 = (size_t)*v71;
              v72 = (char *)(v71 + 2);
              v73 = v74;
            }
            else
            {
              v73 = 0;
              v72 = &byte_1C871356D;
            }
            v75 = (uint64_t *)*((_QWORD *)this + 4);
            v76 = *v75;
            if (llvm::TargetLibraryInfoImpl::isFunctionVectorizable(*v75, v72, v73))
            {
              v196 = v2;
              v224 = 0;
              v215 = 0;
              llvm::TargetLibraryInfoImpl::getWidestVF(v76, v72, v73, &v224, &v215);
              v214 = 2;
              v77 = v224;
              v195 = v75;
              if (v224 >= 2)
              {
                v78 = *v75;
                v79 = 2;
                v16 = 1;
                do
                {
                  llvm::TargetLibraryInfoImpl::getVectorizedFunction(v78, v72, v73, (int *)&v214);
                  v16 &= v80 == 0;
                  v79 *= 2;
                  LODWORD(v214) = v79;
                }
                while (v79 <= v77);
              }
              else
              {
                v16 = 1;
              }
              v214 = 0x100000001;
              if (HIDWORD(v215) == 1)
              {
                v81 = v215;
                if ((_DWORD)v215)
                {
                  v82 = *v195;
                  v83 = 1;
                  do
                  {
                    llvm::TargetLibraryInfoImpl::getVectorizedFunction(v82, v72, v73, (int *)&v214);
                    v16 &= v84 == 0;
                    v83 *= 2;
                    LODWORD(v214) = v83;
                  }
                  while (v83 <= v81);
                }
              }
              v15 = v217;
              v17 = (char *)v216;
              v2 = v196;
              if ((_DWORD)v217)
              {
LABEL_37:
                v18 = v2;
                v19 = 208 * v15;
                do
                {
                  v20 = (void **)&v17[v19];
                  if (v17[v19 - 9] < 0)
                    operator delete(*(v20 - 4));
                  if (*((char *)v20 - 33) < 0)
                    operator delete(*(void **)&v17[v19 - 56]);
                  v21 = *(char **)&v17[v19 - 200];
                  if (&v17[v19 - 184] != v21)
                    free(v21);
                  v19 -= 208;
                }
                while (v19);
                v17 = (char *)v216;
                v2 = v18;
              }
            }
            else
            {
              v16 = 0;
              v17 = (char *)v216;
            }
            if (v17 != v208)
              free(v17);
            if ((v16 & 1) == 0)
            {
LABEL_282:
              v172 = (_QWORD *)*((_QWORD *)this + 4);
              LODWORD(v216) = 0;
              if (!v172)
                goto LABEL_297;
              v173 = *(uint64_t ****)(v12 - 32);
              if (!v173
                || *((_BYTE *)v173 + 16)
                || v173[3] != *(uint64_t ***)(v12 + 72)
                || *(unsigned __int8 *)(*(_QWORD *)v12 + 8) > 6u)
              {
                goto LABEL_297;
              }
              if ((*((_BYTE *)v173 + 23) & 0x10) != 0)
              {
                v174 = ***v173;
                v175 = *(_QWORD *)(v174 + 152);
                v176 = *(unsigned int *)(v174 + 168);
                if (!(_DWORD)v176)
                  goto LABEL_301;
                LODWORD(v177) = (v176 - 1) & ((v173 >> 4) ^ (v173 >> 9));
                v178 = (uint64_t ****)(v175 + 16 * v177);
                v179 = *v178;
                if (*v178 != v173)
                {
                  v180 = 1;
                  while (v179 != (uint64_t ***)-4096)
                  {
                    v181 = v177 + v180++;
                    v177 = v181 & (v176 - 1);
                    v179 = *(uint64_t ****)(v175 + 16 * v177);
                    if (v179 == v173)
                    {
                      v178 = (uint64_t ****)(v175 + 16 * v177);
                      goto LABEL_302;
                    }
                  }
LABEL_301:
                  v178 = (uint64_t ****)(v175 + 16 * v176);
                }
LABEL_302:
                v190 = v178[1];
                v193 = (size_t)*v190;
                v191 = (char *)(v190 + 2);
                v192 = v193;
              }
              else
              {
                v192 = 0;
                v191 = &byte_1C871356D;
              }
              if (llvm::TargetLibraryInfoImpl::getLibFunc(*v172, v191, v192, &v216)
                && (sub_1C632B1A8(v172, (int)v216) & 1) != 0)
              {
                v185 = "library call cannot be vectorized. Try compiling with -fno-math-errno, -ffast-math, or similar flags";
                v188 = 100;
              }
              else
              {
LABEL_297:
                v185 = "call instruction cannot be vectorized";
                v188 = 37;
              }
              v182 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)this + 8);
              v183 = *(const llvm::Loop **)this;
              v194 = (_DWORD *)v12;
              v184 = "Found a non-intrinsic callsite";
              v186 = "CantVectorizeLibcall";
              v187 = 30;
              goto LABEL_299;
            }
          }
          v85 = *(llvm::ScalarEvolution **)(*((_QWORD *)this + 2) + 88);
          v86 = llvm::getVectorIntrinsicIDForCall(v12, *((uint64_t **)this + 4));
          v87 = *(unsigned __int8 *)(v12 + 16);
          if (v87 == 84)
          {
            v88 = 0;
          }
          else if (v87 == 39)
          {
            v88 = (*(_DWORD *)(v12 + 80) + 1);
          }
          else
          {
            v88 = 2;
          }
          v89 = *(_DWORD *)(v12 + 20);
          if (v89 < 0
            && (v153 = v12 - 32 * (v89 & 0x7FFFFFF), v154 = *(_QWORD *)(v153 - 8), (v154 & 0xFFFFFFFF0) != 0))
          {
            v91 = -(uint64_t)(v89 & 0x7FFFFFF);
            v90 = (*(_DWORD *)(v153 - 12) - *(_DWORD *)(v153 - v154));
          }
          else
          {
            v90 = 0;
            v91 = -(uint64_t)(v89 & 0x7FFFFFF);
          }
          v92 = -32 * v88 - 32 * v90 - 32 * v91 - 32;
          if ((v92 & 0x1FFFFFFFE0) != 0)
          {
            v93 = 0;
            v94 = (v92 >> 5);
            v95 = v12;
            while (1)
            {
              if (llvm::hasVectorInstrinsicScalarOpd(v86, v93))
              {
                SCEV = (const llvm::SCEV *)llvm::PredicatedScalarEvolution::getSCEV(*((int8x16_t **)this + 2), *(llvm::Value **)(v95 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF)));
                if (llvm::ScalarEvolution::getLoopDisposition(v85, SCEV, *(const llvm::Loop **)this) != 1)
                  break;
              }
              ++v93;
              v95 += 32;
              if (v94 == v93)
                goto LABEL_140;
            }
            v182 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)this + 8);
            v183 = *(const llvm::Loop **)this;
            v194 = (_DWORD *)v12;
            v184 = "Found unvectorizable intrinsic";
            v185 = "intrinsic instruction cannot be vectorized";
            v186 = "CantVectorizeIntrinsic";
            v187 = 30;
            v188 = 42;
            v189 = 22;
LABEL_245:
            llvm::reportVectorizationFailure((uint64_t)v184, v187, v185, v188, (uint64_t)v186, v189, v182, v183, (uint64_t)v194);
            return 0;
          }
        }
LABEL_140:
        v97 = *((unsigned __int8 *)*v6 + 8);
        v99 = v97 <= 0x14 && ((1 << v97) & 0x10A07F) != 0 || v97 == 7;
        if (!v99 || (v100 = *((unsigned __int8 *)v6 + 16), v100 == 89))
        {
          v182 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)this + 8);
          v183 = *(const llvm::Loop **)this;
          v194 = v6;
          v184 = "Found unvectorizable type";
          v185 = "instruction return type cannot be vectorized";
          v186 = "CantVectorizeInstructionReturnType";
          v187 = 25;
          v188 = 44;
          v189 = 34;
          goto LABEL_245;
        }
        if (v100 == 61)
          v101 = v6;
        else
          v101 = 0;
        if (v5 && v100 == 61)
        {
          v102 = *(unsigned __int8 **)*(v101 - 8);
          v103 = v102[8];
          v104 = v103 > 0x14;
          v105 = (1 << v103) & 0x10A07F;
          v106 = v104 || v105 == 0;
          v3 = v209;
          if (v106)
          {
            v182 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)this + 8);
            v183 = *(const llvm::Loop **)this;
            v194 = v101;
            v184 = "Store instruction cannot be vectorized";
            v185 = "store instruction cannot be vectorized";
            v186 = "CantVectorizeStore";
            v187 = 38;
            v188 = 38;
            v189 = 18;
            goto LABEL_245;
          }
          if ((*((_BYTE *)v101 + 23) & 0x20) != 0)
          {
            v107 = **(_QWORD **)*v101;
            v216 = v101;
            v108 = *(_DWORD *)(v107 + 2496);
            if (!v108)
            {
              v149 = 0;
              goto LABEL_224;
            }
            v109 = *(_QWORD *)(v107 + 2480);
            v110 = v108 - 1;
            v111 = v110 & ((v101 >> 4) ^ (v101 >> 9));
            v112 = (_QWORD *)(v109 + 40 * v111);
            v113 = (_QWORD ***)*v112;
            if ((llvm::FixedVectorType **)*v112 != v101)
            {
              v114 = 0;
              v115 = 1;
              while (v113 != (_QWORD ***)-4096)
              {
                if (v114)
                  v116 = 0;
                else
                  v116 = v113 == (_QWORD ***)-8192;
                if (v116)
                  v114 = v112;
                v117 = v111 + v115++;
                v111 = v117 & v110;
                v112 = (_QWORD *)(v109 + 40 * v111);
                v113 = (_QWORD ***)*v112;
                if ((llvm::FixedVectorType **)*v112 == v101)
                  goto LABEL_169;
              }
              if (v114)
                v149 = v114;
              else
                v149 = v112;
LABEL_224:
              v112 = sub_1C541AB24(v107 + 2480, (uint64_t)&v216, (uint64_t *)&v216, v149);
              v150 = v216;
              v112[4] = 0;
              v112[3] = 0;
              *v112 = v150;
              v112[1] = v112 + 3;
              v112[2] = 0x100000000;
            }
LABEL_169:
            v118 = *((unsigned int *)v112 + 4);
            if ((_DWORD)v118)
            {
              v119 = (_QWORD *)(v112[1] + 8);
              v120 = 16 * v118;
              while (*((_DWORD *)v119 - 2) != 9)
              {
                v119 += 2;
                v120 -= 16;
                if (!v120)
                  goto LABEL_206;
              }
              if (*v119)
              {
                v137 = llvm::FixedVectorType::get((llvm::FixedVectorType *)v102, (llvm::Type *)2);
                if (((*(uint64_t (**)(_QWORD, uint64_t, unint64_t, double))(***((_QWORD ***)this + 3)
                                                                                           + 336))(**((_QWORD **)this + 3), v138, ((unint64_t)*((unsigned __int16 *)v101 + 9) >> 1) & 0x3F, v137) & 1) == 0)
                {
                  v182 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)this + 8);
                  v183 = *(const llvm::Loop **)this;
                  v194 = v101;
                  v184 = "nontemporal store instruction cannot be vectorized";
                  v186 = "CantVectorizeNontemporalStore";
                  v187 = 50;
                  v185 = "nontemporal store instruction cannot be vectorized";
                  v188 = 50;
                  v189 = 29;
                  goto LABEL_245;
                }
              }
            }
          }
          goto LABEL_206;
        }
        if (v100 == 60)
          v121 = (unsigned __int16 *)v6;
        else
          v121 = 0;
        v3 = v209;
        if (!v5 || v100 != 60)
        {
          if (v97 <= 6)
          {
            v136 = v211;
            if ((v100 - 59) >= 0xFFFFFFEE)
              v136 = 0;
            if (!v136 && *((unsigned __int8 *)v6 + 17) <= 0xFDu)
              *(_BYTE *)(*((_QWORD *)this + 58) + 96) = 1;
          }
          goto LABEL_206;
        }
        if ((*((_BYTE *)v121 + 23) & 0x20) == 0)
        {
LABEL_206:
          v141 = *(_QWORD *)this;
          v142 = sub_1C477672C((uint64_t)v3, (uint64_t)v6);
          v143 = *((_QWORD *)this + 50);
          if (v143 == *((_QWORD *)this + 49))
            v144 = (char *)this + 412;
          else
            v144 = (char *)this + 408;
          if (v142 != (_QWORD *)(v143 + 8 * *(unsigned int *)v144))
            goto LABEL_210;
          v145 = v6[1];
          if (!v145)
            goto LABEL_210;
          while (1)
          {
            v146 = sub_1C477672C(v141 + 56, *(_QWORD *)(*((_QWORD *)v145 + 3) + 40));
            v147 = *(_QWORD *)(v141 + 64);
            v148 = v147 == *(_QWORD *)(v141 + 56) ? 76 : 72;
            if (v146 == (_QWORD *)(v147 + 8 * *(unsigned int *)(v141 + v148)))
              break;
            v145 = (llvm::FixedVectorType *)*((_QWORD *)v145 + 1);
            if (!v145)
              goto LABEL_210;
          }
          if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 104) + 8))(*(_QWORD *)(*((_QWORD *)this + 2) + 104)))
          {
            v182 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)this + 8);
            v183 = *(const llvm::Loop **)this;
            v194 = v6;
            v184 = "Value cannot be used outside the loop";
            v185 = "value cannot be used outside the loop";
            v186 = "ValueUsedOutsideLoop";
            v187 = 37;
            v188 = 37;
LABEL_299:
            v189 = 20;
            goto LABEL_245;
          }
LABEL_21:
          sub_1C4774094(v3, (uint64_t)v6);
          goto LABEL_210;
        }
        v122 = ***(_QWORD ***)v121;
        v216 = v121;
        v123 = *(_DWORD *)(v122 + 2496);
        if (v123)
        {
          v124 = *(_QWORD *)(v122 + 2480);
          v125 = v123 - 1;
          v126 = v125 & ((v121 >> 4) ^ (v121 >> 9));
          v127 = (unsigned __int16 **)(v124 + 40 * v126);
          v128 = *v127;
          if (*v127 != v121)
          {
            v129 = 0;
            v130 = 1;
            while (v128 != (unsigned __int16 *)-4096)
            {
              if (v129)
                v131 = 0;
              else
                v131 = v128 == (unsigned __int16 *)-8192;
              if (v131)
                v129 = v127;
              v132 = v126 + v130++;
              v126 = v132 & v125;
              v127 = (unsigned __int16 **)(v124 + 40 * v126);
              v128 = *v127;
              if (*v127 == v121)
                goto LABEL_190;
            }
            if (v129)
              v151 = v129;
            else
              v151 = v127;
LABEL_228:
            v127 = (unsigned __int16 **)sub_1C541AB24(v122 + 2480, (uint64_t)&v216, (uint64_t *)&v216, v151);
            v152 = (unsigned __int16 *)v216;
            v127[4] = 0;
            v127[3] = 0;
            *v127 = v152;
            v127[1] = (unsigned __int16 *)(v127 + 3);
            v127[2] = (unsigned __int16 *)0x100000000;
          }
LABEL_190:
          v133 = *((unsigned int *)v127 + 4);
          if ((_DWORD)v133)
          {
            v134 = v127[1] + 4;
            v135 = 16 * v133;
            while (*((_DWORD *)v134 - 2) != 9)
            {
              v134 += 2;
              v135 -= 16;
              if (!v135)
                goto LABEL_206;
            }
            if (*v134)
            {
              v139 = llvm::FixedVectorType::get(*v6, (llvm::Type *)2);
              if (((*(uint64_t (**)(_QWORD, uint64_t, unint64_t, double))(***((_QWORD ***)this + 3)
                                                                                         + 344))(**((_QWORD **)this + 3), v140, ((unint64_t)v121[9] >> 1) & 0x3F, v139) & 1) == 0)
              {
                v182 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)this + 8);
                v183 = *(const llvm::Loop **)this;
                v194 = v121;
                v184 = "nontemporal load instruction cannot be vectorized";
                v186 = "CantVectorizeNontemporalLoad";
                v187 = 49;
                v185 = "nontemporal load instruction cannot be vectorized";
                v188 = 49;
                v189 = 28;
                goto LABEL_245;
              }
            }
          }
          goto LABEL_206;
        }
        v151 = 0;
        goto LABEL_228;
      }
      v9 = *((unsigned __int8 *)*v8 + 8);
      if (v9 >= 7 && v9 != 13 && v9 != 15)
      {
        v182 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)this + 8);
        v183 = *(const llvm::Loop **)this;
        v194 = 0;
        v184 = "Found a non-int non-pointer PHI";
        v185 = "loop control flow is not understood by vectorizer";
        v186 = "CFGNotUnderstood";
        v187 = 31;
LABEL_281:
        v188 = 49;
        v189 = 16;
        goto LABEL_245;
      }
      if (v212 != v210)
        goto LABEL_21;
      if ((*((_DWORD *)v8 + 5) & 0x7FFFFFF) != 2)
      {
        v182 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)this + 8);
        v183 = *(const llvm::Loop **)this;
        v194 = v8;
        v184 = "Found an invalid PHI";
        v185 = "loop control flow is not understood by vectorizer";
        v186 = "CFGNotUnderstood";
        v187 = 20;
        goto LABEL_281;
      }
      v22 = v206;
      *(_OWORD *)v206 = 0u;
      *((_OWORD *)v22 + 1) = 0u;
      *((_OWORD *)v22 + 2) = 0u;
      *((_WORD *)v22 + 24) = 0;
      v216 = (void *)6;
      v221[0] = v205;
      v221[1] = v205;
      v221[2] = 8;
      v222 = 0;
      if (llvm::RecurrenceDescriptor::isReductionPHI((uint64_t)v8, *(_QWORD *)this, &v216, *((llvm::DemandedBits **)this + 59), *((void **)this + 60), *((_QWORD *)this + 5)))
      {
        if (v220)
        {
          v23 = *((_QWORD *)this + 57);
          if (!*(_QWORD *)(v23 + 8))
            *(_QWORD *)(v23 + 8) = v220;
        }
        sub_1C4774094(v3, v219);
        v24 = sub_1C63D09E8(v200, (uint64_t *)&v215);
        v25 = v24;
        v26 = *(_QWORD *)(v24 + 16);
        v27 = v218;
        if (v26 != v218)
        {
          if (v26 != -4096 && v26 && v26 != -8192)
          {
            v59 = *(_QWORD *)v24 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v59 = *(_QWORD *)(v24 + 8);
            v60 = *(unint64_t **)(v24 + 8);
            if (v60)
            {
              *v60 = *v60 & 7 | v59;
            }
            else
            {
              v61 = *(_QWORD *)(v24 + 16);
              v62 = ***(int32x2_t ****)v61;
              v63 = (unint64_t)v62[303];
              if (v63 <= v59)
              {
                v64 = v62[305].u32[0];
                if (v63 + 16 * v64 > v59)
                {
                  v65 = v64 - 1;
                  LODWORD(v66) = v65 & ((v61 >> 4) ^ (v61 >> 9));
                  v67 = (uint64_t *)(v63 + 16 * v66);
                  v68 = *v67;
                  if (v61 == *v67)
                  {
LABEL_113:
                    *v67 = -8192;
                    v62[304] = vadd_s32(v62[304], (int32x2_t)0x1FFFFFFFFLL);
                    v61 = *(_QWORD *)(v24 + 16);
                  }
                  else
                  {
                    v69 = 1;
                    while (v68 != -4096)
                    {
                      v70 = v66 + v69++;
                      v66 = v70 & v65;
                      v68 = *(_QWORD *)(v63 + 16 * v66);
                      if (v61 == v68)
                      {
                        v67 = (uint64_t *)(v63 + 16 * v66);
                        goto LABEL_113;
                      }
                    }
                  }
                  *(_BYTE *)(v61 + 17) &= ~1u;
                }
              }
            }
            v27 = v218;
          }
          *(_QWORD *)(v24 + 16) = v27;
          if (v27 != -4096 && v27 != -8192 && v27 != 0)
          {
            v29 = (unint64_t)v216;
            v30 = (_QWORD *)((unint64_t)v216 & 0xFFFFFFFFFFFFFFF8);
            *(_QWORD *)(v24 + 8) = *(_QWORD *)((unint64_t)v216 & 0xFFFFFFFFFFFFFFF8);
            *v30 = v24;
            *(_QWORD *)v24 = v29 & 0xFFFFFFFFFFFFFFF8 | *(_QWORD *)v24 & 7;
            v31 = *(uint64_t **)(v24 + 8);
            if (v31)
              *v31 = *v31 & 7 | (v24 + 8);
          }
        }
        v32 = *(_OWORD *)v203;
        v33 = *((_OWORD *)v203 + 1);
        *(_WORD *)(v24 + 56) = *((_WORD *)v203 + 16);
        *(_OWORD *)(v24 + 40) = v33;
        *(_OWORD *)(v24 + 24) = v32;
        if (&v216 != (void **)v24)
          llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)(v24 + 64), v199);
        *(_DWORD *)(v25 + 160) = v223[16];
        sub_1C6194908((llvm::ValueHandleBase *)&v216);
        goto LABEL_210;
      }
      v43 = v202;
      *v202 = 0;
      v43[1] = 0;
      *((_DWORD *)v43 + 4) = 0;
      v44 = v201;
      v201[1] = 0;
      v44[2] = 0;
      *v44 = 0;
      v224 = 6;
      v230 = v204;
      v231 = 0x200000000;
      v45 = v215;
      if (llvm::InductionDescriptor::isInductionPHI(v215, *(llvm::PHINode **)this, *((const llvm::Loop ***)this + 2), (llvm::PredicatedScalarEvolution *)&v224, 0))
      {
        llvm::LoopVectorizationLegality::addInductionPhi((uint64_t *)this, (uint64_t)v45, &v224, v3);
        if (v227 == 3)
        {
          if (v229)
          {
            if ((*(_BYTE *)(v229 + 17) & 2) == 0)
            {
              v46 = *((_QWORD *)this + 57);
              if (!*(_QWORD *)(v46 + 8))
                *(_QWORD *)(v46 + 8) = v229;
            }
          }
        }
        goto LABEL_84;
      }
      if (llvm::RecurrenceDescriptor::isFixedOrderRecurrence((uint64_t)v45, *(_QWORD *)this, v198, *((llvm::DominatorTree **)this + 5)))break;
      if (llvm::InductionDescriptor::isInductionPHI(v45, *(llvm::PHINode **)this, *((const llvm::Loop ***)this + 2), (llvm::PredicatedScalarEvolution *)&v224, (llvm::InductionDescriptor *)1))
      {
        llvm::LoopVectorizationLegality::addInductionPhi((uint64_t *)this, (uint64_t)v45, &v224, v3);
        goto LABEL_84;
      }
      llvm::reportVectorizationFailure((uint64_t)"Found an unidentified PHI", 25, "value that could not be identified as reduction is used outside the loop", 72, (uint64_t)"NonReductionValueUsedOutsideLoop", 32, *((llvm::OptimizationRemarkEmitter **)this + 8), *(const llvm::Loop **)this, (uint64_t)v45);
      v47 = 0;
LABEL_85:
      if (v230 != v204)
        free(v230);
      if (v226 && v226 != (int32x2_t ****)-8192 && v226 != (int32x2_t ****)-4096)
      {
        v48 = v224 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v224 & 0xFFFFFFFFFFFFFFF8) = v225;
        if (v225)
        {
          *v225 = *v225 & 7 | v48;
        }
        else
        {
          v49 = v226;
          v50 = ***v226;
          v51 = (unint64_t)v50[303];
          if (v51 <= v48)
          {
            v52 = v50[305].u32[0];
            if (v51 + 16 * v52 > v48)
            {
              v53 = v52 - 1;
              LODWORD(v54) = v53 & ((v226 >> 4) ^ (v226 >> 9));
              v55 = (int32x2_t *****)(v51 + 16 * v54);
              v56 = *v55;
              if (v226 == *v55)
              {
LABEL_98:
                *v55 = (int32x2_t ****)-8192;
                v50[304] = vadd_s32(v50[304], (int32x2_t)0x1FFFFFFFFLL);
                v49 = v226;
              }
              else
              {
                v57 = 1;
                while (v56 != (int32x2_t ****)-4096)
                {
                  v58 = v54 + v57++;
                  v54 = v58 & v53;
                  v56 = *(int32x2_t *****)(v51 + 16 * v54);
                  if (v226 == v56)
                  {
                    v55 = (int32x2_t *****)(v51 + 16 * v54);
                    goto LABEL_98;
                  }
                }
              }
              *((_BYTE *)v49 + 17) &= ~1u;
            }
          }
        }
      }
      sub_1C6194908((llvm::ValueHandleBase *)&v216);
      if (!v47)
        return 0;
LABEL_210:
      v5 = *(_QWORD *)(v5 + 8);
      if (v5 == v213)
        goto LABEL_240;
    }
    sub_1C4774094(v3, (uint64_t)v45);
    sub_1C4774094(v197, (uint64_t)v45);
LABEL_84:
    v47 = 1;
    goto LABEL_85;
  }
LABEL_241:
  if (*((_QWORD *)this + 9))
  {
    v183 = *(const llvm::Loop **)this;
  }
  else
  {
    if (*((_QWORD *)this + 19) == *((_QWORD *)this + 20))
    {
      v182 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)this + 8);
      v183 = *(const llvm::Loop **)this;
      v194 = 0;
      v184 = "Did not find one integer induction var";
      v185 = "loop induction variable could not be identified";
      v186 = "NoInductionVariable";
      v187 = 38;
      v188 = 47;
      v189 = 19;
      goto LABEL_245;
    }
    v183 = *(const llvm::Loop **)this;
    if (!*((_QWORD *)this + 48))
    {
      v182 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)this + 8);
      v194 = 0;
      v184 = "Did not find one integer induction var";
      v185 = "integer loop induction variable could not be identified";
      v186 = "NoIntegerInductionVariable";
      v187 = 38;
      v188 = 55;
      v189 = 26;
      goto LABEL_245;
    }
  }
  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v183);
  v157 = *((_QWORD *)this + 31);
  if (v157 == *((_QWORD *)this + 30))
    v158 = (char *)this + 260;
  else
    v158 = (char *)this + 256;
  v159 = *(unsigned int *)v158;
  if ((_DWORD)v159)
  {
    v160 = 8 * v159;
    v161 = (unint64_t *)*((_QWORD *)this + 31);
    while (*v161 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v161;
      v160 -= 8;
      if (!v160)
        goto LABEL_275;
    }
  }
  else
  {
    v161 = (unint64_t *)*((_QWORD *)this + 31);
  }
  v162 = (unint64_t *)(v157 + 8 * v159);
  if (v161 != v162)
  {
    v163 = *v161;
LABEL_260:
    v216 = 0;
    v164 = *(_DWORD *)(v163 + 20);
    v165 = v164 & 0x7FFFFFF;
    if ((v164 & 0x7FFFFFF) != 0)
    {
      v166 = 0;
      while (1)
      {
        v167 = v163 - 32 * v165;
        if ((v164 & 0x40000000) != 0)
          v167 = *(_QWORD *)(v163 - 8);
        if (*(_QWORD *)(v167 + 32 * *(unsigned int *)(v163 + 60) + 8 * v166) == LoopLatch)
          break;
        if (v165 == ++v166)
          goto LABEL_266;
      }
    }
    else
    {
LABEL_266:
      LODWORD(v166) = -1;
    }
    if ((v164 & 0x40000000) != 0)
      v168 = *(_QWORD *)(v163 - 8);
    else
      v168 = v163 - 32 * v165;
    v216 = *(void **)(v168 + 32 * v166);
    if (*((_QWORD *)this + 46) != sub_1C619495C((uint64_t)this + 336, (uint64_t *)&v216))
      return 0;
    v169 = v161 + 1;
    while (v169 != v162)
    {
      v170 = *v169++;
      v163 = v170;
      if (v170 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v161 = v169 - 1;
        goto LABEL_260;
      }
    }
  }
LABEL_275:
  v171 = (_QWORD *)*((_QWORD *)this + 9);
  if (v171)
  {
    if (*((_QWORD *)this + 48) != *v171)
      *((_QWORD *)this + 9) = 0;
  }
  return 1;
}

BOOL llvm::LoopVectorizationLegality::canVectorizeFPMath(llvm::LoopVectorizationLegality *this, int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  _BOOL4 v7;
  _BOOL8 result;
  unsigned int OptionalBoolLoopAttribute;
  uint64_t v10;
  uint64_t i;
  char v12;
  unint64_t v13;
  int32x2_t ****v14;
  int32x2_t *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int32x2_t *****v20;
  int32x2_t ****v21;
  int v22;
  int v23;
  unint64_t v24;
  int32x2_t ****v25;
  int32x2_t *v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int32x2_t *****v31;
  int32x2_t ****v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  BOOL v39;
  char v40;
  uint64_t v41;
  unint64_t *v42;
  int32x2_t ****v43;
  int v44;
  uint64_t v45;
  void *v46;
  _QWORD v47[3];

  v47[2] = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(*((_QWORD *)this + 57) + 8))
    return 1;
  if (!byte_1ED838650)
  {
    result = 0;
    goto LABEL_14;
  }
  v4 = *((_QWORD *)this + 58);
  v5 = *(_DWORD *)(v4 + 8);
  v6 = *(_DWORD *)(v4 + 40);
  if (v6 != -1)
    goto LABEL_4;
  OptionalBoolLoopAttribute = (unsigned __int16)llvm::getOptionalBoolLoopAttribute(*(llvm::Loop **)(v4 + 104), "llvm.loop.disable_nonforced", 0x1BuLL);
  if (OptionalBoolLoopAttribute <= 0x100)
    LOBYTE(OptionalBoolLoopAttribute) = 0;
  if (!(_BYTE)OptionalBoolLoopAttribute)
  {
    v6 = *(_DWORD *)(v4 + 40);
LABEL_4:
    v7 = v6 == 1;
    goto LABEL_10;
  }
  v7 = 0;
LABEL_10:
  result = v5 > 1 || v7;
  if (result)
    return result;
LABEL_14:
  if (!a2)
    return result;
  v10 = *((_QWORD *)this + 19);
  for (i = *((_QWORD *)this + 20); v10 != i; v10 += 96)
  {
    sub_1C63117B4((uint64_t)&v41, v10 + 8);
    if (v44 == 3 && v45)
    {
      v12 = *(_BYTE *)(v45 + 17);
      if (v46 != v47)
      {
        v40 = *(_BYTE *)(v45 + 17);
        free(v46);
        v12 = v40;
      }
      if (v43 && v43 != (int32x2_t ****)-8192 && v43 != (int32x2_t ****)-4096)
      {
        v13 = v41 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF8) = v42;
        if (v42)
        {
          *v42 = *v42 & 7 | v13;
        }
        else
        {
          v14 = v43;
          v15 = ***v43;
          v16 = (unint64_t)v15[303];
          if (v16 <= v13)
          {
            v17 = v15[305].u32[0];
            if (v16 + 16 * v17 > v13)
            {
              v18 = v17 - 1;
              LODWORD(v19) = v18 & ((v43 >> 4) ^ (v43 >> 9));
              v20 = (int32x2_t *****)(v16 + 16 * v19);
              v21 = *v20;
              if (v43 == *v20)
              {
LABEL_31:
                *v20 = (int32x2_t ****)-8192;
                v15[304] = vadd_s32(v15[304], (int32x2_t)0x1FFFFFFFFLL);
                v14 = v43;
              }
              else
              {
                v22 = 1;
                while (v21 != (int32x2_t ****)-4096)
                {
                  v23 = v19 + v22++;
                  v19 = v23 & v18;
                  v21 = *(int32x2_t *****)(v16 + 16 * v19);
                  if (v43 == v21)
                  {
                    v20 = (int32x2_t *****)(v16 + 16 * v19);
                    goto LABEL_31;
                  }
                }
              }
              *((_BYTE *)v14 + 17) &= ~1u;
            }
          }
        }
      }
      if ((v12 & 2) == 0)
        return 0;
    }
    else
    {
      if (v46 != v47)
        free(v46);
      if (v43 && v43 != (int32x2_t ****)-8192 && v43 != (int32x2_t ****)-4096)
      {
        v24 = v41 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF8) = v42;
        if (v42)
        {
          *v42 = *v42 & 7 | v24;
        }
        else
        {
          v25 = v43;
          v26 = ***v43;
          v27 = (unint64_t)v26[303];
          if (v27 <= v24)
          {
            v28 = v26[305].u32[0];
            if (v27 + 16 * v28 > v24)
            {
              v29 = v28 - 1;
              LODWORD(v30) = v29 & ((v43 >> 4) ^ (v43 >> 9));
              v31 = (int32x2_t *****)(v27 + 16 * v30);
              v32 = *v31;
              if (v43 == *v31)
              {
LABEL_46:
                *v31 = (int32x2_t ****)-8192;
                v26[304] = vadd_s32(v26[304], (int32x2_t)0x1FFFFFFFFLL);
                v25 = v43;
              }
              else
              {
                v33 = 1;
                while (v32 != (int32x2_t ****)-4096)
                {
                  v34 = v30 + v33++;
                  v30 = v34 & v29;
                  v32 = *(int32x2_t *****)(v27 + 16 * v30);
                  if (v43 == v32)
                  {
                    v31 = (int32x2_t *****)(v27 + 16 * v30);
                    goto LABEL_46;
                  }
                }
              }
              *((_BYTE *)v25 + 17) &= ~1u;
            }
          }
        }
      }
    }
  }
  v36 = *((_QWORD *)this + 13);
  v35 = *((_QWORD *)this + 14);
  if (v36 == v35)
    return 1;
  v37 = v36 + 176;
  do
  {
    if (*(_QWORD *)(v37 - 128))
      v38 = *(_BYTE *)(v37 - 111) == 0;
    else
      v38 = 0;
    result = !v38;
    v39 = !result || v37 == v35;
    v37 += 176;
  }
  while (!v39);
  return result;
}

BOOL llvm::LoopVectorizationLegality::isCastedInductionVariable(llvm::LoopVectorizationLegality *this, const llvm::Value *a2)
{
  _BOOL8 result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  result = 0;
  if (a2 && *((unsigned __int8 *)a2 + 16) >= 0x1Cu)
  {
    v4 = sub_1C477672C((uint64_t)this + 176, (uint64_t)a2);
    v5 = *((_QWORD *)this + 23);
    v6 = 192;
    if (v5 == *((_QWORD *)this + 22))
      v6 = 196;
    return v4 != (_QWORD *)(v5 + 8 * *(unsigned int *)((char *)this + v6));
  }
  return result;
}

BOOL llvm::LoopVectorizationLegality::isInductionVariable(llvm::LoopVectorizationLegality *this, const llvm::Value *a2)
{
  _BOOL8 result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  if (llvm::LoopVectorizationLegality::isInductionPhi(this, a2))
    return 1;
  result = 0;
  if (a2 && *((unsigned __int8 *)a2 + 16) >= 0x1Cu)
  {
    v5 = sub_1C477672C((uint64_t)this + 176, (uint64_t)a2);
    v6 = *((_QWORD *)this + 23);
    v7 = 192;
    if (v6 == *((_QWORD *)this + 22))
      v7 = 196;
    return v5 != (_QWORD *)(v6 + 8 * *(unsigned int *)((char *)this + v7));
  }
  return result;
}

uint64_t llvm::LoopVectorizationLegality::blockCanBePredicated(uint64_t a1, uint64_t a2, _QWORD *a3, llvm::SmallPtrSetImplBase *a4, llvm::SmallPtrSetImplBase *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t i;
  uint64_t v14;
  BOOL v15;
  char v16;
  uint64_t v17;
  llvm::SmallPtrSetImplBase *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  int v45;
  _BYTE v46[32];

  v5 = a2 + 40;
  v6 = *(_QWORD *)(a2 + 48);
  if (v6 != a2 + 40)
  {
    while (1)
    {
      if (v6)
        v9 = v6 - 24;
      else
        v9 = 0;
      v10 = *(_DWORD *)(v9 + 20);
      if ((v10 & 0x40000000) != 0)
      {
        v12 = *(uint64_t **)(v9 - 8);
        v11 = v10 & 0x7FFFFFF;
        if (v11)
        {
LABEL_9:
          for (i = 32 * v11; i; i -= 32)
          {
            v14 = *v12;
            if (*v12)
              v15 = *(unsigned __int8 *)(*v12 + 16) > 0x14u;
            else
              v15 = 1;
            if (!v15)
            {
              v42 = v46;
              v43 = v46;
              v44 = 4;
              v45 = 0;
              v16 = sub_1C53774DC(v14, (llvm::SmallPtrSetImplBase *)&v42);
              if (v43 == v42)
              {
                if ((v16 & 1) != 0)
                  return 0;
              }
              else
              {
                free(v43);
                if ((v16 & 1) != 0)
                  return 0;
              }
            }
            v12 += 4;
          }
        }
      }
      else
      {
        v11 = v10 & 0x7FFFFFF;
        v12 = (uint64_t *)(v9 - 32 * v11);
        if (v11)
          goto LABEL_9;
      }
      if (v6)
      {
        if (*(_BYTE *)(v9 + 16) == 84)
        {
          v17 = *(_QWORD *)(v9 - 32);
          if (v17)
          {
            if (!*(_BYTE *)(v17 + 16) && *(_QWORD *)(v17 + 24) == *(_QWORD *)(v9 + 72) && *(_DWORD *)(v17 + 36) == 7)
            {
              v18 = a5;
              goto LABEL_66;
            }
          }
        }
      }
      if (!sub_1C5790664(v9))
        break;
LABEL_55:
      v6 = *(_QWORD *)(v6 + 8);
      if (v6 == v5)
        return 1;
    }
    v19 = *(unsigned __int8 *)(v9 + 16);
    v20 = (v19 - 33);
    if (v20 <= 0x37)
    {
      if (((1 << (v19 - 33)) & 0x8000000000041) != 0)
      {
        v21 = *(_QWORD *)(v9 + 64);
        if (v21 && ((*(_BYTE *)(v21 + 20) & 4) != 0 || (*(_BYTE *)(v21 + 17) & 0x10) != 0))
          goto LABEL_49;
        LODWORD(v42) = 7;
        if ((!sub_1C53E4BBC(v9, (__int32 *)&v42, 1uLL)
           || (v32 = *(_QWORD *)(v9 - 32)) != 0
           && !*(_BYTE *)(v32 + 16)
           && *(_QWORD *)(v32 + 24) == *(_QWORD *)(v9 + 72)
           && *(_DWORD *)(v32 + 36) == 7)
          && ((llvm::CallBase::hasFnAttrOnCalledFunction(v9, 66) & 1) != 0
           || (llvm::CallBase::hasFnAttrOnCalledFunction(v9, 44) & 1) != 0))
        {
          goto LABEL_49;
        }
        goto LABEL_40;
      }
      if (((1 << (v19 - 33)) & 0x808001C8000010) != 0)
        goto LABEL_40;
      if (v20 == 28)
      {
        if ((*(_WORD *)(v9 + 18) & 0x301) == 0)
        {
LABEL_49:
          v19 = *(unsigned __int8 *)(v9 + 16);
          goto LABEL_50;
        }
LABEL_40:
        result = 0;
        v23 = *(unsigned __int8 *)(v9 + 16);
        if (v23 == 60)
          v24 = v9;
        else
          v24 = 0;
        if (!v6 || v23 != 60)
          return result;
        v25 = sub_1C477672C((uint64_t)a3, *(_QWORD *)(v24 - 32));
        v26 = a3[1];
        if (v26 == *a3)
          v27 = (unsigned int *)a3 + 5;
        else
          v27 = (unsigned int *)(a3 + 2);
        if (v25 == (_QWORD *)(v26 + 8 * *v27))
        {
          v18 = a4;
          v31 = v24;
          goto LABEL_70;
        }
        goto LABEL_49;
      }
    }
LABEL_50:
    v28 = (v19 - 33);
    if (v28 <= 0x37)
    {
      if (((1 << (v19 - 33)) & 0x8000000000041) != 0)
      {
        v29 = *(_QWORD *)(v9 + 64);
        if (!v29 || (*(_BYTE *)(v29 + 17) & 0x30) == 0)
        {
          v30 = *(_DWORD *)(v9 + 20);
          if (v30 < 0)
          {
            v33 = v9 - 32 * (v30 & 0x7FFFFFF);
            v36 = *(_QWORD *)(v33 - 8);
            v34 = v33 - 8;
            v35 = v36;
            if (v36)
            {
              v37 = -v35;
              while (1)
              {
                v38 = *(_DWORD *)(*(_QWORD *)(v34 + v37) + 8);
                v15 = v38 > 7;
                v39 = (1 << v38) & 0x83;
                if (v15 || v39 == 0)
                  break;
                v37 += 16;
                if (!v37)
                  goto LABEL_60;
              }
LABEL_63:
              result = 0;
              if (!v6 || v19 != 61)
                return result;
              v18 = a4;
LABEL_66:
              v31 = v9;
LABEL_70:
              sub_1C4774094(v18, v31);
              goto LABEL_55;
            }
          }
LABEL_60:
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v9, 45) & 1) == 0
            && (llvm::CallBase::hasFnAttrOnCalledFunction(v9, 44) & 1) == 0)
          {
            v19 = *(unsigned __int8 *)(v9 + 16);
            goto LABEL_63;
          }
        }
      }
      else if (v28 == 27)
      {
        if ((*(_WORD *)(v9 + 18) & 0x301) != 0)
          return 0;
      }
      else if (((1 << (v19 - 33)) & 0x808001D0000010) != 0)
      {
        goto LABEL_63;
      }
    }
    if ((llvm::Instruction::mayThrow((llvm::Instruction *)v9) & 1) != 0)
      return 0;
    goto LABEL_55;
  }
  return 1;
}

uint64_t llvm::LoopVectorizationLegality::canVectorizeWithIfConvert(llvm::OptimizationRemarkEmitter **this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t LoopLatch;
  llvm::DominatorTree *v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Loop *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t j;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t k;
  uint64_t v33;
  BOOL v34;
  char v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  int v44;
  _BYTE v45[64];
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  int v49;
  _BYTE v50[40];

  if (!byte_1ED82A4A0)
  {
    llvm::reportVectorizationFailure((uint64_t)"If-conversion is disabled", 25, "if-conversion is disabled", 25, (uint64_t)"IfConversionDisabled", 20, this[8], *this, 0);
    return 0;
  }
  v41 = v45;
  v42 = v45;
  v43 = 8;
  v44 = 0;
  v2 = (uint64_t *)*((_QWORD *)*this + 4);
  v3 = (uint64_t *)*((_QWORD *)*this + 5);
  if (v3 == v2)
    goto LABEL_63;
  do
  {
    v4 = *v2;
    v5 = (uint64_t)this[5];
    LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)*this);
    if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v5, v4, LoopLatch))
    {
      v8 = v4 + 40;
      for (i = *(_QWORD *)(v4 + 48); i != v8; i = *(_QWORD *)(i + 8))
      {
        if (i && *(unsigned __int8 *)(i - 8) - 62 >= 0xFFFFFFFE)
        {
          v10 = *(_QWORD *)(i - 56);
          if (v10)
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v41, v10);
        }
      }
    }
    else
    {
      v11 = v4 + 40;
      v12 = *(_QWORD *)(v4 + 48);
      if (v12 != v4 + 40)
      {
        v13 = (llvm::Loop *)*((_QWORD *)this[2] + 11);
        do
        {
          v14 = v12 - 24;
          if (!v12)
            v14 = 0;
          v15 = *(unsigned __int8 *)(v14 + 16);
          if (v15 == 60)
            v16 = v14;
          else
            v16 = 0;
          if (v12)
          {
            if (v15 == 60 && (*(_DWORD *)(*(_QWORD *)v16 + 8) & 0xFE) != 0x12 && (*(_WORD *)(v16 + 18) & 0x301) == 0)
            {
              v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 56) + 112);
              if (!v17 || (*(_BYTE *)(v17 + 18) & 0x4C) == 0)
              {
                if (llvm::isDereferenceableAndAlignedInLoop((llvm *)v16, *this, v13, this[5], v7))
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v41, *(_QWORD *)(v16 - 32));
              }
            }
          }
          v12 = *(_QWORD *)(v12 + 8);
        }
        while (v12 != v11);
      }
    }
    ++v2;
  }
  while (v2 != v3);
  v18 = (uint64_t *)*((_QWORD *)*this + 4);
  v19 = (uint64_t *)*((_QWORD *)*this + 5);
  if (v19 == v18)
  {
LABEL_63:
    v36 = 1;
    goto LABEL_73;
  }
  v40 = *v18;
  while (1)
  {
    v20 = *v18;
    v21 = (_QWORD *)(*v18 + 40);
    if (*v21)
      v22 = *v21 - 24;
    else
      v22 = 0;
    if (*(unsigned __int8 *)(v22 + 16) - 29 >= 0xB)
      v22 = 0;
    if (*(_BYTE *)(v22 + 16) != 30)
    {
      llvm::reportVectorizationFailure((uint64_t)"Loop contains a switch statement", 32, "loop contains a switch statement", 32, (uint64_t)"LoopContainsSwitch", 18, this[8], *this, v22);
      goto LABEL_72;
    }
    v23 = (uint64_t)this[5];
    v24 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)*this);
    v25 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v23, v20, v24);
    if (v25)
    {
      if (v20 != v40 && (_QWORD *)*v21 != v21)
      {
        for (j = *(_QWORD *)(v20 + 48); ; j = *(_QWORD *)(v27 + 32))
        {
          v27 = j - 24;
          v28 = j ? j - 24 : 0;
          if (!j || *(_BYTE *)(v28 + 16) != 83)
            break;
          v29 = *(_DWORD *)(j - 4);
          if ((v29 & 0x40000000) != 0)
          {
            v31 = *(uint64_t **)(j - 32);
            v30 = v29 & 0x7FFFFFF;
            if (v30)
            {
LABEL_49:
              for (k = 32 * v30; k; k -= 32)
              {
                v33 = *v31;
                if (*v31)
                  v34 = *(unsigned __int8 *)(*v31 + 16) > 0x14u;
                else
                  v34 = 1;
                if (!v34)
                {
                  v46 = v50;
                  v47 = v50;
                  v48 = 4;
                  v49 = 0;
                  v35 = sub_1C53774DC(v33, (llvm::SmallPtrSetImplBase *)&v46);
                  if (v47 == v46)
                  {
                    if ((v35 & 1) != 0)
                      goto LABEL_64;
                  }
                  else
                  {
                    free(v47);
                    if ((v35 & 1) != 0)
                      goto LABEL_64;
                  }
                }
                v31 += 4;
              }
            }
          }
          else
          {
            v30 = v29 & 0x7FFFFFF;
            v31 = (uint64_t *)(v27 - 32 * v30);
            if (v30)
              goto LABEL_49;
          }
        }
      }
      goto LABEL_62;
    }
    if ((llvm::LoopVectorizationLegality::blockCanBePredicated(v25, v20, &v41, (llvm::SmallPtrSetImplBase *)(this + 61), (llvm::SmallPtrSetImplBase *)(this + 73)) & 1) == 0)break;
LABEL_62:
    if (++v18 == v19)
      goto LABEL_63;
  }
LABEL_64:
  v37 = (_QWORD *)*v21;
  if ((_QWORD *)*v21 == v21)
  {
    v38 = 0;
  }
  else
  {
    if (v37)
      v38 = (uint64_t)(v37 - 3);
    else
      v38 = 0;
    if (*(unsigned __int8 *)(v38 + 16) - 29 >= 0xB)
      v38 = 0;
  }
  llvm::reportVectorizationFailure((uint64_t)"Control flow cannot be substituted for a select", 47, "control flow cannot be substituted for a select", 47, (uint64_t)"NoCFGForSelect", 14, this[8], *this, v38);
LABEL_72:
  v36 = 0;
LABEL_73:
  if (v42 != v41)
    free(v42);
  return v36;
}

uint64_t llvm::LoopVectorizationLegality::canVectorizeLoopCFG(llvm::LoopVectorizationLegality *this, llvm::Loop *a2)
{
  int v4;
  uint64_t LoopPredecessor;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  int NumBackEdges;

  v4 = sub_1C550930C(****((_QWORD ****)this + 8), (uint64_t)"loop-vectorize", 14);
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)a2);
  if (!LoopPredecessor)
    goto LABEL_8;
  v6 = *(_QWORD *)(LoopPredecessor + 40);
  if (v6 == LoopPredecessor + 40)
    goto LABEL_8;
  if (v6)
    v7 = v6 - 24;
  else
    v7 = 0;
  if (*(_BYTE *)(v7 + 16) != 30)
  {
    switch(*(_BYTE *)(v7 + 16))
    {
      case 0x1E:
        __break(1u);
        goto LABEL_17;
      case 0x1F:
        v10 = (*(_DWORD *)(v7 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
LABEL_17:
        v10 = (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x27:
        v10 = *(_DWORD *)(v7 + 80) + 1;
        break;
      default:
        goto LABEL_8;
    }
    if (v10 == 1)
      goto LABEL_13;
LABEL_8:
    llvm::reportVectorizationFailure((uint64_t)"Loop doesn't have a legal pre-header", 36, "loop control flow is not understood by vectorizer", 49, (uint64_t)"CFGNotUnderstood", 16, *((llvm::OptimizationRemarkEmitter **)this + 8), *(const llvm::Loop **)this, 0);
    v8 = 0;
    result = 0;
    if (!v4)
      return result;
    goto LABEL_14;
  }
  if ((*(_DWORD *)(v7 + 20) & 0x7FFFFFF) == 3)
    goto LABEL_8;
LABEL_13:
  v8 = 1;
LABEL_14:
  NumBackEdges = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getNumBackEdges((uint64_t)a2);
  result = v8;
  if (NumBackEdges != 1)
  {
    llvm::reportVectorizationFailure((uint64_t)"The loop must have a single backedge", 36, "loop control flow is not understood by vectorizer", 49, (uint64_t)"CFGNotUnderstood", 16, *((llvm::OptimizationRemarkEmitter **)this + 8), *(const llvm::Loop **)this, 0);
    return 0;
  }
  return result;
}

uint64_t llvm::LoopVectorizationLegality::canVectorizeLoopNestCFG(llvm::LoopVectorizationLegality *this, llvm::Loop ***a2, BOOL a3)
{
  int v6;
  uint64_t canVectorizeLoopCFG;
  uint64_t v8;
  llvm::Loop **v9;
  llvm::Loop **v10;
  int canVectorizeLoopNestCFG;

  v6 = sub_1C550930C(****((_QWORD ****)this + 8), (uint64_t)"loop-vectorize", 14);
  canVectorizeLoopCFG = llvm::LoopVectorizationLegality::canVectorizeLoopCFG(this, (llvm::Loop *)a2);
  if ((canVectorizeLoopCFG & 1) != 0 || (v8 = 0, v6))
  {
    v10 = a2[1];
    v9 = a2[2];
    v8 = canVectorizeLoopCFG;
    while (v10 != v9)
    {
      canVectorizeLoopNestCFG = llvm::LoopVectorizationLegality::canVectorizeLoopNestCFG(this, *v10, a3);
      if ((canVectorizeLoopNestCFG | v6) != 1)
        return 0;
      v8 = canVectorizeLoopNestCFG & v8;
      ++v10;
    }
  }
  return v8;
}

uint64_t llvm::LoopVectorizationLegality::canVectorize(llvm::LoopVectorizationLegality *this, BOOL a2)
{
  int v4;
  uint64_t canVectorizeLoopNestCFG;
  int canVectorizeWithIfConvert;
  int canVectorizeInstrs;
  int v9;
  int canVectorizeMemory;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int OptionalBoolLoopAttribute;

  v4 = sub_1C550930C(****((_QWORD ****)this + 8), (uint64_t)"loop-vectorize", 14);
  canVectorizeLoopNestCFG = llvm::LoopVectorizationLegality::canVectorizeLoopNestCFG(this, *(llvm::Loop ****)this, a2);
  if ((canVectorizeLoopNestCFG & 1) == 0 && !v4)
    return 0;
  if (*(_QWORD *)(*(_QWORD *)this + 8) == *(_QWORD *)(*(_QWORD *)this + 16))
  {
    if (((*(_QWORD *)(*(_QWORD *)this + 40) - *(_QWORD *)(*(_QWORD *)this + 32)) & 0x7FFFFFFF8) != 8)
    {
      canVectorizeWithIfConvert = llvm::LoopVectorizationLegality::canVectorizeWithIfConvert((llvm::OptimizationRemarkEmitter **)this);
      if ((canVectorizeWithIfConvert | v4) != 1)
        return 0;
      LODWORD(canVectorizeLoopNestCFG) = canVectorizeLoopNestCFG & canVectorizeWithIfConvert;
    }
    canVectorizeInstrs = llvm::LoopVectorizationLegality::canVectorizeInstrs(this);
    if ((canVectorizeInstrs | v4) != 1)
      return 0;
    v9 = canVectorizeInstrs;
    canVectorizeMemory = llvm::LoopVectorizationLegality::canVectorizeMemory(this);
    if ((canVectorizeMemory | v4) != 1)
      return 0;
    canVectorizeLoopNestCFG = canVectorizeLoopNestCFG & v9 & canVectorizeMemory;
    v11 = dword_1ED838710;
    v12 = *((_QWORD *)this + 58);
    v13 = *(_DWORD *)(v12 + 40);
    if (v13 == -1)
    {
      OptionalBoolLoopAttribute = (unsigned __int16)llvm::getOptionalBoolLoopAttribute(*(llvm::Loop **)(v12 + 104), "llvm.loop.disable_nonforced", 0x1BuLL);
      if (OptionalBoolLoopAttribute <= 0x100)
        LOBYTE(OptionalBoolLoopAttribute) = 0;
      if ((_BYTE)OptionalBoolLoopAttribute)
        goto LABEL_20;
      v13 = *(_DWORD *)(v12 + 40);
    }
    if (v13 == 1)
      v11 = dword_1ED8387D0;
LABEL_20:
    if ((***(unsigned int (****)(_QWORD))(*((_QWORD *)this + 2) + 104))(*(_QWORD *)(*((_QWORD *)this + 2)
                                                                                                + 104)) <= v11)
      return canVectorizeLoopNestCFG;
    llvm::reportVectorizationFailure((uint64_t)"Too many SCEV checks needed", 27, "Too many SCEV assumptions need to be made and checked at runtime", 64, (uint64_t)"TooManySCEVRunTimeChecks", 24, *((llvm::OptimizationRemarkEmitter **)this + 8), *(const llvm::Loop **)this, 0);
    return 0;
  }
  if ((llvm::LoopVectorizationLegality::canVectorizeOuterLoop(this) & 1) == 0)
  {
    llvm::reportVectorizationFailure((uint64_t)"Unsupported outer loop", 22, "unsupported outer loop", 22, (uint64_t)"UnsupportedOuterLoop", 20, *((llvm::OptimizationRemarkEmitter **)this + 8), *(const llvm::Loop **)this, 0);
    return 0;
  }
  return canVectorizeLoopNestCFG;
}

uint64_t llvm::LoopVectorizationLegality::prepareToFoldTailByMasking(llvm::LoopVectorizationLegality *this)
{
  llvm::LoopVectorizationLegality *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char *v36;
  llvm::SmallPtrSetImplBase *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  _BYTE v46[64];
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  _BYTE v51[64];
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  int v55;
  _BYTE v56[64];
  char *v57;
  char *v58;
  uint64_t v59;
  int v60;
  _BYTE v61[64];

  v1 = this;
  v57 = v61;
  v58 = v61;
  v59 = 8;
  v60 = 0;
  v2 = *((_QWORD *)this + 13);
  v3 = *((_QWORD *)this + 14);
  while (v2 != v3)
  {
    this = (llvm::LoopVectorizationLegality *)sub_1C4774094((llvm::SmallPtrSetImplBase *)&v57, *(_QWORD *)(v2 + 32));
    v2 += 176;
  }
  v4 = *((_QWORD *)v1 + 50);
  v5 = 408;
  if (v4 == *((_QWORD *)v1 + 49))
    v5 = 412;
  v6 = *(unsigned int *)((char *)v1 + v5);
  if ((_DWORD)v6)
  {
    v7 = 8 * v6;
    v8 = (uint64_t *)*((_QWORD *)v1 + 50);
    while ((unint64_t)*v8 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v8;
      v7 -= 8;
      if (!v7)
        goto LABEL_28;
    }
  }
  else
  {
    v8 = (uint64_t *)*((_QWORD *)v1 + 50);
  }
  v9 = (_QWORD *)(v4 + 8 * v6);
  if (v8 != v9)
  {
    v10 = *v8;
LABEL_14:
    this = (llvm::LoopVectorizationLegality *)sub_1C477672C((uint64_t)&v57, v10);
    if (v58 == v57)
      v11 = (uint64_t *)((char *)&v59 + 4);
    else
      v11 = &v59;
    if (this == (llvm::LoopVectorizationLegality *)&v58[8 * *(unsigned int *)v11])
    {
      while (1)
      {
        v10 = *(_QWORD *)(v10 + 8);
        if (!v10)
          break;
        v12 = *(_QWORD *)v1;
        this = (llvm::LoopVectorizationLegality *)sub_1C477672C(*(_QWORD *)v1 + 56, *(_QWORD *)(*(_QWORD *)(v10 + 24) + 40));
        v13 = *(_QWORD *)(v12 + 64);
        if (v13 == *(_QWORD *)(v12 + 56))
          v14 = 76;
        else
          v14 = 72;
        if (this == (llvm::LoopVectorizationLegality *)(v13 + 8 * *(unsigned int *)(v12 + v14)))
        {
          v35 = 0;
          goto LABEL_71;
        }
      }
    }
    v15 = (unint64_t *)(v8 + 1);
    while (v15 != v9)
    {
      v16 = *v15++;
      v10 = v16;
      if (v16 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v8 = (uint64_t *)(v15 - 1);
        goto LABEL_14;
      }
    }
  }
LABEL_28:
  v52 = v56;
  v53 = v56;
  v54 = 8;
  v55 = 0;
  v17 = (uint64_t *)v51;
  v47 = (uint64_t *)v51;
  v48 = (uint64_t *)v51;
  v49 = 8;
  v50 = 0;
  v42 = (uint64_t *)v46;
  v43 = (uint64_t *)v46;
  v44 = 8;
  v45 = 0;
  v18 = *(uint64_t **)(*(_QWORD *)v1 + 32);
  v19 = *(_QWORD *)(*(_QWORD *)v1 + 40) - (_QWORD)v18;
  if (v19)
  {
    v20 = 8 * (v19 >> 3);
    while (1)
    {
      this = (llvm::LoopVectorizationLegality *)llvm::LoopVectorizationLegality::blockCanBePredicated((uint64_t)this, *v18, &v52, (llvm::SmallPtrSetImplBase *)&v47, (llvm::SmallPtrSetImplBase *)&v42);
      if ((this & 1) == 0)
        break;
      ++v18;
      v20 -= 8;
      if (!v20)
      {
        v17 = v47;
        v21 = v48;
        v23 = v49;
        v22 = HIDWORD(v49);
        goto LABEL_34;
      }
    }
    v35 = 0;
  }
  else
  {
    v22 = 0;
    v23 = 8;
    v21 = (uint64_t *)v51;
LABEL_34:
    if (v21 == v17)
      v24 = v22;
    else
      v24 = v23;
    v25 = v21;
    if ((_DWORD)v24)
    {
      v26 = 8 * v24;
      v25 = v21;
      while ((unint64_t)*v25 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v25;
        v26 -= 8;
        if (!v26)
          goto LABEL_48;
      }
    }
    v27 = &v21[v24];
    if (v25 != v27)
    {
      v28 = *v25;
LABEL_44:
      sub_1C4774094((llvm::LoopVectorizationLegality *)((char *)v1 + 488), v28);
      v29 = (unint64_t *)(v25 + 1);
      while (v29 != (unint64_t *)v27)
      {
        v30 = *v29++;
        v28 = v30;
        if (v30 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v25 = (uint64_t *)(v29 - 1);
          goto LABEL_44;
        }
      }
    }
LABEL_48:
    if (v43 == v42)
      v31 = (uint64_t *)((char *)&v44 + 4);
    else
      v31 = &v44;
    v32 = *(unsigned int *)v31;
    if ((_DWORD)v32)
    {
      v33 = 8 * v32;
      v34 = v43;
      while ((unint64_t)*v34 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v34;
        v33 -= 8;
        if (!v33)
          goto LABEL_64;
      }
    }
    else
    {
      v34 = v43;
    }
    v36 = (char *)&v43[v32];
    if (v34 != (uint64_t *)v36)
    {
      v37 = (llvm::LoopVectorizationLegality *)((char *)v1 + 584);
      v38 = *v34;
LABEL_60:
      sub_1C4774094(v37, v38);
      v39 = (unint64_t *)(v34 + 1);
      while (v39 != (unint64_t *)v36)
      {
        v40 = *v39++;
        v38 = v40;
        if (v40 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v34 = (uint64_t *)(v39 - 1);
          goto LABEL_60;
        }
      }
    }
LABEL_64:
    v35 = 1;
  }
  if (v43 != v42)
    free(v43);
  if (v48 != v47)
    free(v48);
  if (v53 != v52)
    free(v53);
LABEL_71:
  if (v58 != v57)
    free(v58);
  return v35;
}

uint64_t sub_1C60689B8(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void sub_1C60689CC(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    v2 = a1;
    v3 = a1 + 40 * a2;
    do
    {
      sub_1C63D1368(*(unsigned __int8 **)v2, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
      v2 += 40;
    }
    while (v2 != v3);
  }
}

unint64_t sub_1C6068A10(unint64_t a1)
{
  unint64_t v3;
  unint64_t v5;

  if (qword_1ED82A590 >= HIDWORD(qword_1ED82A590))
  {
    v3 = qword_1ED82A590 + 1;
    if (qword_1ED82A588 <= a1 && qword_1ED82A588 + 48 * (unint64_t)qword_1ED82A590 > a1)
    {
      v5 = a1 - qword_1ED82A588;
      sub_1C63D141C(v3);
      return qword_1ED82A588 + v5;
    }
    else
    {
      sub_1C63D141C(v3);
    }
  }
  return a1;
}

void sub_1C6068A84(void **a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  int32x2_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  int32x2_t *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  int v32;
  char *v33;
  int32x2_t v34;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a1) >> 5);
    v8 = v7 + 1;
    if (v7 + 1 > 0x2AAAAAAAAAAAAAALL)
      abort();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)*a1) >> 5);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x155555555555555)
      v10 = 0x2AAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x2AAAAAAAAAAAAAALL)
        sub_1C4764EE4();
      v11 = (char *)operator new(96 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[96 * v7];
    v13 = &v11[96 * v10];
    *(_QWORD *)v12 = *a2;
    v6 = v12 + 96;
    sub_1C6311700((uint64_t)(v12 + 8), (uint64_t)(a2 + 1));
    v15 = (char *)*a1;
    v14 = (char *)a1[1];
    if (v14 == *a1)
    {
      *a1 = v12;
      a1[1] = v6;
      a1[2] = v13;
    }
    else
    {
      do
      {
        v16 = *((_QWORD *)v14 - 12);
        v14 -= 96;
        *((_QWORD *)v12 - 12) = v16;
        v12 -= 96;
        sub_1C6311700((uint64_t)(v12 + 8), (uint64_t)(v14 + 8));
      }
      while (v14 != v15);
      v14 = (char *)*a1;
      v17 = (char *)a1[1];
      *a1 = v12;
      a1[1] = v6;
      a1[2] = v13;
      if (v17 != v14)
      {
        v18 = (int32x2_t)0x1FFFFFFFFLL;
        do
        {
          v19 = (char *)*((_QWORD *)v17 - 4);
          if (v19 != v17 - 16)
          {
            v33 = v17;
            v34 = v18;
            free(v19);
            v18 = v34;
            v17 = v33;
          }
          v20 = *((_QWORD *)v17 - 9);
          if (v20 && v20 != -8192 && v20 != -4096)
          {
            v21 = *((_QWORD *)v17 - 11) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v21 = *((_QWORD *)v17 - 10);
            v22 = (unint64_t *)*((_QWORD *)v17 - 10);
            if (v22)
            {
              *v22 = *v22 & 7 | v21;
            }
            else
            {
              v23 = *((_QWORD *)v17 - 9);
              v24 = ***(int32x2_t ****)v23;
              v25 = (unint64_t)v24[303];
              if (v25 <= v21)
              {
                v26 = v24[305].u32[0];
                if (v25 + 16 * v26 > v21)
                {
                  v27 = v26 - 1;
                  LODWORD(v28) = v27 & ((v23 >> 4) ^ (v23 >> 9));
                  v29 = (uint64_t *)(v25 + 16 * v28);
                  v30 = *v29;
                  if (v23 == *v29)
                  {
LABEL_30:
                    *v29 = -8192;
                    v24[304] = vadd_s32(v24[304], v18);
                    v23 = *((_QWORD *)v17 - 9);
                  }
                  else
                  {
                    v31 = 1;
                    while (v30 != -4096)
                    {
                      v32 = v28 + v31++;
                      v28 = v32 & v27;
                      v30 = *(_QWORD *)(v25 + 16 * v28);
                      if (v23 == v30)
                      {
                        v29 = (uint64_t *)(v25 + 16 * v28);
                        goto LABEL_30;
                      }
                    }
                  }
                  *(_BYTE *)(v23 + 17) &= ~1u;
                }
              }
            }
          }
          v17 -= 96;
        }
        while (v17 != v14);
      }
    }
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v5 = *a2;
    v6 = v5 + 12;
    sub_1C6311700((uint64_t)(v5 + 1), (uint64_t)(a2 + 1));
  }
  a1[1] = v6;
}

void sub_1C6068CF8(void **a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *v5 = *a2;
    v6 = v5 + 22;
    sub_1C63D14E8((uint64_t)(v5 + 1), (uint64_t)(a2 + 1));
    goto LABEL_19;
  }
  v7 = 0x2E8BA2E8BA2E8BA3 * (((char *)v5 - (_BYTE *)*a1) >> 4);
  v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) > 0x1745D1745D1745DLL)
    abort();
  v9 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v4 - (_QWORD)*a1) >> 4);
  if (2 * v9 > v8)
    v8 = 2 * v9;
  if (v9 >= 0xBA2E8BA2E8BA2ELL)
    v10 = 0x1745D1745D1745DLL;
  else
    v10 = v8;
  if (v10)
  {
    if (v10 > 0x1745D1745D1745DLL)
      sub_1C4764EE4();
    v11 = (char *)operator new(176 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[176 * v7];
  v13 = &v11[176 * v10];
  *(_QWORD *)v12 = *a2;
  v6 = v12 + 176;
  sub_1C63D14E8((uint64_t)(v12 + 8), (uint64_t)(a2 + 1));
  v15 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v12;
    a1[1] = v6;
    a1[2] = v13;
    if (!v14)
      goto LABEL_19;
    goto LABEL_18;
  }
  do
  {
    v16 = *((_QWORD *)v14 - 22);
    v14 -= 176;
    *((_QWORD *)v12 - 22) = v16;
    v12 -= 176;
    sub_1C63D14E8((uint64_t)(v12 + 8), (uint64_t)(v14 + 8));
  }
  while (v14 != v15);
  v14 = (char *)*a1;
  v17 = (char *)a1[1];
  *a1 = v12;
  a1[1] = v6;
  a1[2] = v13;
  if (v17 != v14)
  {
    do
    {
      v18 = v17 - 176;
      sub_1C6194908((llvm::ValueHandleBase *)(v17 - 168));
      v17 = v18;
    }
    while (v18 != v14);
  }
  if (v14)
LABEL_18:
    operator delete(v14);
LABEL_19:
  a1[1] = v6;
}

__n128 sub_1C6068E7C(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  _BYTE *v9;
  __int128 v10;
  __n128 result;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v12 = v4 + 1;
    v13 = v5 + (v4 << 6);
    if (v5 <= (unint64_t)a2 && v13 > (unint64_t)a2)
    {
      v15 = (uint64_t)a2 - v5;
      sub_1C61999BC(a1, v12);
      v5 = *(_QWORD *)a1;
      a2 = (__int128 *)(*(_QWORD *)a1 + v15);
    }
    else
    {
      sub_1C61999BC(a1, v12);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(unsigned int *)(a1 + 8);
  v7 = v5 + (v6 << 6);
  if (*((char *)a2 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)v7, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
  }
  v9 = (_BYTE *)(v5 + (v6 << 6) + 24);
  if (*((char *)a2 + 47) < 0)
  {
    sub_1C47EBC30(v9, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v10 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v5 + (v6 << 6) + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v9 = v10;
  }
  result = (__n128)a2[3];
  *(__n128 *)(v5 + (v6 << 6) + 48) = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C6068F64()
{
  __int128 v1;
  int v2;
  int v3;
  int *v4;
  __n128 v5;
  _QWORD v6[2];
  int v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  int v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  int v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  LOBYTE(v3) = 1;
  *(_QWORD *)&v1 = &v3;
  LODWORD(v4) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable if-conversion during vectorization.";
  v5.n128_u64[1] = 42;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED82A420, "enable-if-conversion", (_BYTE **)&v1, &v4, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED82A420, &dword_1C475E000);
  LOBYTE(v3) = 1;
  *(_QWORD *)&v1 = &v3;
  LODWORD(v4) = 1;
  v5.n128_u64[0] = (unint64_t)"Allow enabling loop hints to reorder FP operations during vectorization.";
  v5.n128_u64[1] = 72;
  sub_1C498EDF8((llvm::cl::Option *)&llvm::HintsAllowReordering, "hints-allow-reordering", (_BYTE **)&v1, &v4, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::HintsAllowReordering, &dword_1C475E000);
  v3 = 1;
  LODWORD(v4) = 16;
  *(_QWORD *)&v1 = &v4;
  v5.n128_u64[0] = (unint64_t)"The maximum number of SCEV checks allowed.";
  v5.n128_u64[1] = 42;
  sub_1C4DB1928((uint64_t)&unk_1ED838690, "vectorize-scev-check-threshold", (int **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED838690, &dword_1C475E000);
  v3 = 1;
  LODWORD(v4) = 128;
  *(_QWORD *)&v1 = &v4;
  v5.n128_u64[0] = (unint64_t)"The maximum number of SCEV checks allowed with a vectorize(enable) pragma";
  v5.n128_u64[1] = 73;
  sub_1C4DB1928((uint64_t)&unk_1ED838750, "pragma-vectorize-scev-check-threshold", (int **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED838750, &dword_1C475E000);
  v2 = 1;
  v3 = -1;
  *(_QWORD *)&v1 = "Control whether the compiler can use scalable vectors to vectorize a loop";
  *((_QWORD *)&v1 + 1) = 73;
  v4 = &v3;
  v5.n128_u64[0] = (unint64_t)v6;
  v6[0] = "off";
  v6[1] = 3;
  v7 = 0;
  v8 = "Scalable vectorization is disabled.";
  v9 = 35;
  v10 = "preferred";
  v11 = 9;
  v12 = 1;
  v13 = "Scalable vectorization is available and favored when the cost is inconclusive.";
  v14 = 78;
  v15 = "on";
  v16 = 2;
  v17 = 1;
  v18 = "Scalable vectorization is available and favored when the cost is inconclusive.";
  v19 = 78;
  v5.n128_u64[1] = 0x400000003;
  sub_1C63D11C0(&v4, &v2, &v1, (uint64_t)&v5);
  if ((_QWORD *)v5.n128_u64[0] != v6)
    free((void *)v5.n128_u64[0]);
  return __cxa_atexit((void (*)(void *))sub_1C63D0070, &qword_1ED82A4E0, &dword_1C475E000);
}

unsigned __int8 *llvm::InnerLoopVectorizer::setDebugLocFromInst(unsigned __int8 *result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  char v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;

  if (a4)
    v4 = a3;
  else
    v4 = (uint64_t)(result + 104);
  if (!a2 || *(unsigned __int8 *)(a2 + 16) < 0x1Cu)
  {
    v12 = *(_QWORD *)v4;
    v13 = *(unsigned int *)(v4 + 8);
    if ((_DWORD)v13)
    {
      v16 = 0;
      v14 = v12 + 16 * v13;
      v17 = 16 * v13;
      v18 = 16 * v13 - 16;
      while (*(_DWORD *)(v12 + v16))
      {
        v16 += 16;
        if (v17 == v16)
          goto LABEL_17;
      }
      v14 = v12 + v16;
      if (v18 != v16)
      {
        v19 = (_QWORD *)(v14 + 24);
        v20 = v17 - v16 - 16;
        do
        {
          v21 = *((_DWORD *)v19 - 2);
          if (v21)
          {
            *(_DWORD *)v14 = v21;
            *(_QWORD *)(v14 + 8) = *v19;
            v14 += 16;
          }
          v19 += 2;
          v20 -= 16;
        }
        while (v20);
      }
    }
    else
    {
      v14 = *(_QWORD *)v4;
    }
LABEL_17:
    *(_DWORD *)(v4 + 8) = (unint64_t)(v14 - v12) >> 4;
    return result;
  }
  v6 = *(unsigned __int8 **)(a2 + 48);
  if (!v6)
  {
    v15 = 0;
    v22 = 0;
    goto LABEL_20;
  }
  v7 = result;
  if (!llvm::Function::isDebugInfoForProfiling(*(llvm::Function **)(*(_QWORD *)(a2 + 40) + 56))
    || sub_1C4D99D08(a2)
    || byte_1ED830650)
  {
    v22 = v6;
    llvm::MetadataTracking::track((uint64_t)&v22, v6, 2);
    v15 = (uint64_t)v22;
LABEL_20:
    result = (unsigned __int8 *)sub_1C4774EF4(v4, 0, v15);
    v10 = v22;
    if (!v22)
      return result;
    v11 = &v22;
    return (unsigned __int8 *)llvm::MetadataTracking::untrack((uint64_t)v11, v10);
  }
  result = (unsigned __int8 *)sub_1C5F2E3BC((uint64_t)v6, *((_DWORD *)v7 + 22) * *((_DWORD *)v7 + 24));
  if (v8)
  {
    v9 = (uint64_t)result;
    v23 = result;
    if (result)
    {
      llvm::MetadataTracking::track((uint64_t)&v23, result, 2);
      v9 = (uint64_t)v23;
    }
    result = (unsigned __int8 *)sub_1C4774EF4(v4, 0, v9);
    v10 = v23;
    if (v23)
    {
      v11 = &v23;
      return (unsigned __int8 *)llvm::MetadataTracking::untrack((uint64_t)v11, v10);
    }
  }
  return result;
}

llvm::Value **llvm::createStepForVF(uint64_t *a1, llvm::ConstantInt *this, unint64_t a3, uint64_t a4)
{
  llvm::Value **v6;
  _BYTE v8[32];
  __int16 v9;

  v6 = llvm::ConstantInt::get(this, a3 * a4, 0);
  if (HIDWORD(a3) == 1)
  {
    v9 = 257;
    return (llvm::Value **)llvm::IRBuilderBase::CreateVScale(a1, (uint64_t)v6, (uint64_t)v8);
  }
  return v6;
}

llvm::Value **llvm::getRuntimeVF(uint64_t *a1, llvm::ConstantInt *this, unint64_t a3)
{
  llvm::Value **v5;
  _BYTE v7[32];
  __int16 v8;

  v5 = llvm::ConstantInt::get(this, a3, 0);
  if (HIDWORD(a3) == 1)
  {
    v8 = 257;
    return (llvm::Value **)llvm::IRBuilderBase::CreateVScale(a1, (uint64_t)v5, (uint64_t)v7);
  }
  return v5;
}

uint64_t sub_1C606946C@<X0>(llvm::Loop *this@<X3>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t result;
  unsigned __int8 *v13;
  unsigned __int8 **v14;
  unsigned __int8 *v15;
  uint64_t v16;
  char v17;
  int v18;
  int v19;
  uint64_t v20;
  unsigned __int8 *v21;

  v11 = **((_QWORD **)this + 4);
  result = llvm::Loop::getStartLoc(this, &v21);
  if (a5)
  {
    v15 = *(unsigned __int8 **)(a5 + 48);
    v14 = (unsigned __int8 **)(a5 + 48);
    v13 = v15;
    v11 = (uint64_t)*(v14 - 1);
    if (v14 != &v21)
    {
      if (v13)
      {
        if (v21)
        {
          result = llvm::MetadataTracking::untrack((uint64_t)&v21, v21);
          v13 = *v14;
          v21 = v13;
          if (!v13)
            goto LABEL_12;
        }
        else
        {
          v21 = v13;
        }
        result = llvm::MetadataTracking::track((uint64_t)&v21, v13, 2);
      }
    }
  }
  v13 = v21;
  if (!v21)
  {
LABEL_12:
    v16 = 0;
    v18 = 0;
    v19 = 0;
    v17 = 1;
    goto LABEL_13;
  }
  v16 = *(_QWORD *)&v21[-8 * *((unsigned int *)v21 + 2)];
  if (*(_BYTE *)v16 != 15)
    v16 = *(_QWORD *)(v16 - 8 * *(unsigned int *)(v16 + 8));
  v17 = 0;
  v18 = *((_DWORD *)v21 + 1);
  v19 = *((unsigned __int16 *)v21 + 1);
LABEL_13:
  v20 = *(_QWORD *)(v11 + 56);
  *(_DWORD *)(a6 + 8) = 11;
  *(_BYTE *)(a6 + 12) = 2;
  *(_QWORD *)(a6 + 16) = v20;
  *(_QWORD *)(a6 + 24) = v16;
  *(_DWORD *)(a6 + 32) = v18;
  *(_DWORD *)(a6 + 36) = v19;
  *(_QWORD *)(a6 + 40) = a2;
  *(_QWORD *)(a6 + 48) = a3;
  *(_QWORD *)(a6 + 56) = a4;
  *(_BYTE *)(a6 + 64) = 0;
  *(_BYTE *)(a6 + 72) = 0;
  *(_QWORD *)(a6 + 80) = a6 + 96;
  *(_QWORD *)(a6 + 88) = 0x400000000;
  *(_BYTE *)(a6 + 352) = 0;
  *(_DWORD *)(a6 + 356) = -1;
  *(_QWORD *)(a6 + 360) = v11;
  *(_QWORD *)a6 = &off_1E814E570;
  if ((v17 & 1) == 0)
    return llvm::MetadataTracking::untrack((uint64_t)&v21, v13);
  return result;
}

void llvm::InnerLoopVectorizer::addNewMetadata(llvm::InnerLoopVectorizer *this, llvm::Instruction *a2, const llvm::Instruction *a3)
{
  llvm::LoopVersioning *v3;

  v3 = (llvm::LoopVersioning *)*((_QWORD *)this + 10);
  if (v3)
  {
    if ((*((_BYTE *)a3 + 16) & 0xFE) == 0x3C)
      llvm::LoopVersioning::annotateInstWithNoAlias(v3, a2, a3);
  }
}

void llvm::InnerLoopVectorizer::collectPoisonGeneratingRecipes(uint64_t a1, uint64_t a2)
{
  llvm::DominatorTree *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  BOOL v32;
  int v33;
  uint64_t v35;
  unint64_t v36;
  llvm::Operator *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  llvm::SmallPtrSetImplBase *v43;
  void *v44[12];
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48[12];
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52[16];
  void *v53;
  void *v54[16];
  void *v55;
  void *v56[15];
  void *v57;
  _BYTE *v58;
  void *v59;
  uint64_t v60;
  int v61;
  _BYTE v62[128];
  _QWORD *v63;
  unsigned int v64;
  unsigned int v65;
  _QWORD v66[18];

  v66[16] = *MEMORY[0x1E0C80C00];
  v58 = v62;
  v59 = v62;
  v60 = 16;
  v61 = 0;
  v52[0] = **(void ***)(a2 + 320);
  sub_1C63D199C((uint64_t *)v52, v56);
  sub_1C63D1A20((llvm::SmallPtrSetImplBase *)v56, v52);
  sub_1C63D9EF0((uint64_t)v48, (llvm::SmallPtrSetImplBase *)v52);
  sub_1C63D9EF0((uint64_t)v44, (llvm::SmallPtrSetImplBase *)v54);
  v43 = (llvm::SmallPtrSetImplBase *)(a2 + 328);
LABEL_2:
  if (v50 - v49 != v46 - v45)
  {
LABEL_20:
    v11 = *(_QWORD *)(v50 - 32);
    v12 = v11 + 200;
    for (i = *(_QWORD *)(v11 + 208); ; i = *(_QWORD *)(i + 8))
    {
      if (i == v12)
      {
        sub_1C608A1E8(v48);
        goto LABEL_2;
      }
      if (i)
        v14 = i - 24;
      else
        v14 = 0;
      v15 = *(unsigned __int8 *)(v14 + 8);
      if (v15 == 10)
        v16 = v14;
      else
        v16 = 0;
      if (i && v15 == 10)
      {
        v17 = *(_QWORD *)(v16 + 16);
        v18 = v17 & 0xFFFFFFFFFFFFFFF8;
        if ((v17 & 4) != 0)
          v18 = **(_QWORD **)v18;
        v19 = *(_QWORD *)(**(_QWORD **)(v16 + 48) + 48);
        if (v19)
        {
          v20 = *(_QWORD *)(v18 + 40);
          v21 = !*(_BYTE *)(v16 + 160) || v20 == 0;
          if (!v21
            && llvm::LoopAccessInfo::blockNeedsPredication(*(llvm::LoopAccessInfo **)(v20 + 40), **(llvm::BasicBlock ***)(a1 + 392), *(llvm::Loop **)(*(_QWORD *)(a1 + 392) + 40), v4))
          {
            goto LABEL_51;
          }
        }
      }
      else
      {
        if (v15 == 3)
          v22 = v14;
        else
          v22 = 0;
        if (i)
        {
          if (v15 == 3)
          {
            v19 = *(_QWORD *)(**(_QWORD **)(v22 + 48) + 48);
            if (v19)
            {
              v23 = *(_QWORD *)(v22 + 96);
              v24 = *(_DWORD *)(v23 + 16);
              if (v24 >= 1)
              {
                v25 = 0;
                v26 = 0;
                do
                {
                  LODWORD(v63) = v25 + *(_DWORD *)(v23 + 32);
                  v27 = sub_1C4FA9B60((uint64_t *)(v23 + 8), &v63);
                  if (v27)
                    v26 |= llvm::LoopAccessInfo::blockNeedsPredication(*(llvm::LoopAccessInfo **)(v27 + 40), **(llvm::BasicBlock ***)(a1 + 392), *(llvm::Loop **)(*(_QWORD *)(a1 + 392) + 40), v4);
                  ++v25;
                }
                while (v24 != v25);
                if ((v26 & 1) != 0)
                {
LABEL_51:
                  v63 = v66;
                  v65 = 16;
                  v28 = 1;
                  v66[0] = v19;
                  do
                  {
                    v29 = v63[v28 - 1];
                    v64 = v28 - 1;
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v58, v29);
                    if (v30)
                    {
                      v31 = *(unsigned __int8 *)(v29 + 8);
                      v32 = v31 > 0xE;
                      v33 = (1 << v31) & 0x4448;
                      if (v32 || v33 == 0)
                      {
                        v35 = *(_QWORD *)(v29 + 16);
                        v36 = v35 & 0xFFFFFFFFFFFFFFF8;
                        if ((v35 & 4) != 0)
                          v36 = **(_QWORD **)v36;
                        v37 = *(llvm::Operator **)(v36 + 40);
                        if (v37 && llvm::Operator::hasPoisonGeneratingFlags(v37))
                          sub_1C4774094(v43, v29);
                        v38 = *(unsigned int *)(v29 + 56);
                        if ((_DWORD)v38)
                        {
                          v39 = *(_QWORD *)(v29 + 48);
                          v40 = 8 * v38;
                          do
                          {
                            v41 = *(_QWORD *)(*(_QWORD *)v39 + 48);
                            if (v41)
                            {
                              v42 = v64;
                              if (v64 >= (unint64_t)v65)
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, (uint64_t)v66, v64 + 1, 8);
                                v42 = v64;
                              }
                              v63[v42] = v41;
                              ++v64;
                            }
                            v39 += 8;
                            v40 -= 8;
                          }
                          while (v40);
                        }
                      }
                    }
                    v28 = v64;
                  }
                  while (v64);
                  if (v63 != v66)
                    free(v63);
                  continue;
                }
              }
            }
          }
        }
      }
    }
  }
  if (v49 != v50)
  {
    v5 = v45 + 16;
    v6 = v49 + 16;
    do
    {
      v7 = v6 - 16;
      if (*(_QWORD *)(v6 - 16) != *(_QWORD *)(v5 - 16))
        goto LABEL_20;
      v8 = *(unsigned __int8 *)(v5 + 8);
      if (*(_BYTE *)(v6 + 8))
        v9 = v8 == 0;
      else
        v9 = 1;
      if (v9)
      {
        if ((*(_BYTE *)(v6 + 8) == 0) == (v8 != 0))
          goto LABEL_20;
      }
      else if (*(_QWORD *)(v6 - 8) != *(_QWORD *)(v5 - 8) || *(_QWORD *)v6 != *(_QWORD *)v5)
      {
        goto LABEL_20;
      }
      v5 += 32;
      v6 += 32;
    }
    while (v7 + 32 != v50);
  }
  sub_1C63D9B78(&v47);
  sub_1C63D9B78(v44);
  sub_1C63D9B78(&v51);
  sub_1C63D9B78(v48);
  sub_1C63D9B78(&v55);
  sub_1C63D9B78(v54);
  sub_1C63D9B78(&v53);
  sub_1C63D9B78(v52);
  sub_1C63D9B78(&v57);
  sub_1C63D9B78(v56);
  if (v59 != v58)
    free(v59);
}

void llvm::InnerLoopVectorizer::addMetadata(llvm::InnerLoopVectorizer *a1, unsigned __int8 ***a2, uint64_t a3, llvm::Instruction *a4)
{
  uint64_t v7;
  BOOL v8;

  if (a3)
  {
    v7 = 8 * a3;
    do
    {
      if (*a2)
        v8 = *((unsigned __int8 *)*a2 + 16) >= 0x1Cu;
      else
        v8 = 0;
      if (v8)
        llvm::InnerLoopVectorizer::addMetadata(a1, *a2, a4);
      ++a2;
      v7 -= 8;
    }
    while (v7);
  }
}

uint64_t llvm::InnerLoopVectorizer::getReductionResumeValue(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(sub_1C63D1B18(a1 + 552, a2) + 8);
}

unsigned __int8 *llvm::VPTransformState::get(llvm::VPTransformState *this, llvm::VPValue *a2, unsigned int a3)
{
  uint64_t *v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  _BOOL4 v10;
  unsigned int v11;
  unsigned __int8 *v12;
  uint64_t ***v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  int v27;
  uint64_t **v28;
  llvm::Type *v29;
  llvm::PoisonValue *v30;
  llvm::Type *v31;
  _QWORD *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v37;
  char v38;
  llvm::VPValue *v39;
  llvm::VPValue *v40;

  v39 = a2;
  v40 = a2;
  v6 = (uint64_t *)((char *)this + 32);
  v37 = 0;
  if (sub_1C635A4E4((uint64_t *)this + 4, &v40, &v37)
    && v37 != *((_QWORD *)this + 4) + 40 * *((unsigned int *)this + 12)
    && *(_DWORD *)(v37 + 16) > a3
    && *(_QWORD *)(*(_QWORD *)(v37 + 8) + 8 * a3))
  {
    return *(unsigned __int8 **)(sub_1C63DC4EC(v6, &v39)[1] + 8 * a3);
  }
  if (!sub_1C6083630((uint64_t)this, (uint64_t)a2, a3, 0))
  {
    v7 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 39) + 24))(*((_QWORD *)this + 39), *((_QWORD *)a2 + 5));
LABEL_13:
    sub_1C63D1D2C((uint64_t)this, a2, (uint64_t)v7, a3);
    return v7;
  }
  v37 = a3;
  v38 = 0;
  v7 = llvm::VPTransformState::get((uint64_t)this, (uint64_t)a2, (unsigned int *)&v37);
  if (*((_DWORD *)this + 1) != 1 && *(_DWORD *)this == 1)
    goto LABEL_13;
  if (a2 && *((_BYTE *)a2 + 8) == 4 && *((_BYTE *)a2 + 56))
  {
    v9 = 0;
    v8 = 1;
  }
  else
  {
    v8 = 0;
    v9 = (*(_DWORD *)this - 1);
  }
  v10 = sub_1C6083630((uint64_t)this, (uint64_t)a2, a3 | (unint64_t)(v9 << 32), 0);
  if (v10)
    v11 = v9;
  else
    v11 = 0;
  v37 = __PAIR64__(v11, a3);
  v38 = 0;
  v12 = llvm::VPTransformState::get((uint64_t)this, (uint64_t)a2, (unsigned int *)&v37);
  v13 = (uint64_t ***)v12;
  v14 = *((_QWORD *)this + 34);
  if (v12[16] == 83)
  {
    v15 = *((_QWORD *)v12 + 5);
    v16 = v15 + 40;
    for (i = *(_QWORD *)(v15 + 48); i != v16; i = *(_QWORD *)(i + 8))
    {
      v18 = i - 24;
      if (i)
        v19 = i - 24;
      else
        v19 = 0;
      if (*(_BYTE *)(v19 + 16) != 83)
        goto LABEL_29;
    }
    v18 = 0;
LABEL_29:
    v20 = v18 + 24;
    if (!v18)
      v20 = 0;
  }
  else
  {
    v20 = *((_QWORD *)v12 + 4);
  }
  v21 = 0;
  v22 = !v10;
  v24 = *(_QWORD *)(v14 + 48);
  v23 = *(_QWORD *)(v14 + 56);
  if (v20)
    v25 = v20 - 24;
  else
    v25 = 0;
  *(_QWORD *)(v14 + 48) = *(_QWORD *)(v25 + 40);
  *(_QWORD *)(v14 + 56) = v25 + 24;
  v26 = *(unsigned __int8 **)(v25 + 48);
  v37 = (unint64_t)v26;
  if (v26)
  {
    llvm::MetadataTracking::track((uint64_t)&v37, v26, 2);
    v21 = (unsigned __int8 *)v37;
  }
  v27 = v8 | v22;
  sub_1C4774EF4(v14, 0, (uint64_t)v21);
  if (v37)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v37, (unsigned __int8 *)v37);
    if (v27)
      goto LABEL_38;
LABEL_40:
    v28 = *v13;
    v29 = *(llvm::Type **)this;
    if (HIDWORD(*(_QWORD *)this) == 1)
      llvm::ScalableVectorType::get(v28, v29);
    else
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v28, v29);
    v32 = llvm::PoisonValue::get(v30, v31);
    sub_1C63D1D2C((uint64_t)this, a2, (uint64_t)v32, a3);
    if (*(_DWORD *)this)
    {
      v33 = 0;
      do
      {
        v34 = *((_QWORD *)this + 39);
        v37 = __PAIR64__(v33, a3);
        v38 = 0;
        llvm::InnerLoopVectorizer::packScalarIntoVectorValue(v34, a2, (unsigned int *)&v37, (uint64_t *)this);
        ++v33;
      }
      while (v33 < *(_DWORD *)this);
    }
    v7 = (unsigned __int8 *)llvm::VPTransformState::get(this, a2, a3);
    goto LABEL_46;
  }
  if (!v27)
    goto LABEL_40;
LABEL_38:
  v7 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, unsigned __int8 *))(**((_QWORD **)this + 39) + 24))(*((_QWORD *)this + 39), v7);
  sub_1C63D1D2C((uint64_t)this, a2, (uint64_t)v7, a3);
LABEL_46:
  v35 = *((_QWORD *)this + 34);
  if (v24)
  {
    sub_1C4D8AE2C(v35, v24, v23);
  }
  else
  {
    *(_QWORD *)(v35 + 48) = 0;
    *(_QWORD *)(v35 + 56) = 0;
  }
  return v7;
}

void llvm::InnerLoopVectorizer::vectorizeInterleaveGroup(int *a1, unsigned int *a2, uint64_t a3, uint64_t a4, llvm::VPTransformState *a5, unint64_t a6, uint64_t a7, uint64_t a8, llvm::VPValue *a9)
{
  uint64_t v13;
  uint64_t ***v14;
  uint64_t **v15;
  void *v16;
  unint64_t v17;
  llvm::Type *v18;
  llvm::PointerType *v19;
  llvm::PointerType *v20;
  unsigned int v21;
  unsigned int v22;
  llvm::VPTransformState *v23;
  unsigned __int8 *v24;
  llvm::Value *v25;
  const llvm::APInt *v26;
  int v27;
  uint64_t v28;
  llvm::ConstantInt *v29;
  unint64_t v30;
  unint64_t v31;
  llvm::ValueHandleBase *v32;
  uint64_t ***v33;
  unsigned __int8 *v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  llvm::Type *v40;
  uint64_t v41;
  unint64_t BitMaskForGaps;
  unint64_t v43;
  _BOOL4 v44;
  uint64_t *v45;
  uint64_t v46;
  __int16 v47;
  unsigned __int8 **MaskedLoad;
  unsigned __int8 **v49;
  uint64_t v50;
  _QWORD *v51;
  unsigned __int8 *v52;
  llvm::Type *v53;
  _QWORD *v54;
  uint64_t *v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t ***v59;
  llvm::Type *v60;
  unint64_t v61;
  llvm::PoisonValue **v62;
  void *v63;
  uint64_t v64;
  _QWORD *v65;
  llvm::Value *BitOrPointerCast;
  uint64_t **v67;
  llvm::Type *v68;
  llvm::Type **v69;
  llvm::Type *v70;
  llvm::PoisonValue *v71;
  llvm::PoisonValue *v72;
  llvm::IRBuilderBase *v73;
  unint64_t v74;
  unsigned int v75;
  _BYTE *v76;
  void *i;
  llvm::Type *v78;
  void **VectorReverse;
  void **v80;
  uint64_t v81;
  llvm::PoisonValue **v82;
  uint64_t v83;
  llvm::Type *v84;
  _QWORD *v85;
  uint64_t *v86;
  unsigned __int8 **MaskedStore;
  _QWORD *v88;
  unsigned __int8 *v89;
  llvm::Type *v90;
  _QWORD *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  llvm::UndefValue *v96;
  llvm::DataLayout *v97;
  __int32 **v98;
  uint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  unsigned int v103;
  uint64_t *v105;
  llvm::IRBuilderBase *v106;
  llvm::GetElementPtrInst *v107;
  llvm::FixedVectorType *v108;
  llvm::FixedVectorType *v109;
  int *v110;
  void *v111;
  uint64_t v112;
  _BYTE v113[16];
  __int16 v114;
  void *v115;
  uint64_t v116;
  _BYTE v117[16];
  __int16 v118;
  void *v119;
  unsigned int v120;
  _BYTE v121[16];
  __int16 v122;
  _QWORD *v123;
  uint64_t v124;
  _QWORD v125[4];

  v125[2] = *MEMORY[0x1E0C80C00];
  v13 = *((_QWORD *)a2 + 5);
  if (!v13 || (v14 = (uint64_t ***)*((_QWORD *)a2 + 5), *(_BYTE *)(v13 + 16) != 60))
    v14 = *(uint64_t ****)(v13 - 64);
  v97 = *(llvm::DataLayout **)(*(_QWORD *)(*(_QWORD *)(v13 + 40) + 56) + 40);
  v15 = *v14;
  v16 = (void *)*a2;
  v17 = *((_QWORD *)a1 + 11);
  v18 = (llvm::Type *)((_DWORD)v16 * v17);
  v107 = (llvm::GetElementPtrInst *)*v14;
  if (HIDWORD(v17) == 1)
    llvm::ScalableVectorType::get(v15, v18);
  else
    llvm::FixedVectorType::get((llvm::FixedVectorType *)v15, v18);
  v20 = v19;
  v123 = v125;
  v124 = 0x200000000;
  v21 = sub_1C4FA892C((uint64_t)a2, v13);
  if (*((_BYTE *)a2 + 4))
    v21 += (a1[22] - 1) * *a2;
  v110 = a1;
  if (a1[24])
  {
    v22 = 0;
    v105 = (uint64_t *)(a1 + 26);
    v101 = -v21;
    do
    {
      v119 = (void *)v22;
      LOBYTE(v120) = 0;
      v23 = a5;
      v24 = llvm::VPTransformState::get((uint64_t)a5, a6, (unsigned int *)&v119);
      llvm::InnerLoopVectorizer::setDebugLocFromInst((unsigned __int8 *)a1, (uint64_t)v24, 0, 0);
      v25 = llvm::Value::stripPointerCasts((llvm::Value *)v24);
      v27 = 0;
      if (v25 && *((_BYTE *)v25 + 16) == 62)
        v27 = (*((unsigned __int8 *)v25 + 17) >> 1) & 1;
      v28 = **((_QWORD **)a1 + 21);
      v29 = *(llvm::ConstantInt **)(v28 + 1960);
      v30 = *(unsigned int *)(v28 + 1968);
      v120 = v30 >> 8;
      if (v30 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v119, v101, 0);
      }
      else
      {
        if (v30 <= 0xFF)
          v31 = 0;
        else
          v31 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v30);
        v119 = (void *)(v31 & v101);
      }
      v32 = llvm::ConstantInt::get(v29, (llvm::LLVMContext *)&v119, v26);
      if (v120 >= 0x41 && v119)
        MEMORY[0x1CAA32F9C](v119, 0x1000C8000313F17);
      v122 = 257;
      v33 = sub_1C4867B70(v105, v107, (uint64_t *)v24, (uint64_t)v32, (uint64_t)&v119);
      v34 = (unsigned __int8 *)v33;
      if (v27)
        v35 = 2;
      else
        v35 = 0;
      *((_BYTE *)v33 + 17) = *((_BYTE *)v33 + 17) & 0xFD | v35;
      v36 = *((_DWORD *)*v33 + 2);
      if ((v36 & 0xFE) == 0x12)
        v36 = *(_DWORD *)(*(*v33)[2] + 8);
      v37 = llvm::PointerType::get(v20, (llvm::Type *)(v36 >> 8));
      v122 = 257;
      v38 = sub_1C4773E38(v105, 49, v34, v37, (uint64_t)&v119);
      v39 = v124;
      a5 = v23;
      a1 = v110;
      if (v124 >= (unint64_t)HIDWORD(v124))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v123, (uint64_t)v125, v124 + 1, 8);
        v39 = v124;
      }
      v123[v39] = v38;
      LODWORD(v124) = v124 + 1;
      ++v22;
    }
    while (v22 < v110[24]);
  }
  v98 = (__int32 **)((char *)v97 + 272);
  llvm::InnerLoopVectorizer::setDebugLocFromInst((unsigned __int8 *)a1, v13, 0, 0);
  v96 = (llvm::UndefValue *)llvm::PoisonValue::get(v20, v40);
  LODWORD(v119) = *a2 + a2[8] - 1;
  v41 = sub_1C4FA9B60((uint64_t *)a2 + 1, &v119);
  BitMaskForGaps = 0;
  if (!v41)
  {
    if (*(_DWORD *)(*((_QWORD *)a1 + 50) + 120))
      BitMaskForGaps = (unint64_t)llvm::createBitMaskForGaps((uint64_t)(a1 + 26), a1[22], a2);
    else
      BitMaskForGaps = 0;
  }
  v102 = BitMaskForGaps;
  if (*(_BYTE *)(v13 + 16) == 60)
  {
    v111 = v113;
    v112 = 0x200000000;
    if (a1[24])
    {
      v43 = 0;
      v44 = ((unint64_t)a9 | BitMaskForGaps) != 0;
      v45 = (uint64_t *)(a1 + 26);
      do
      {
        if (v44)
        {
          v51 = (_QWORD *)v102;
          if (a9)
          {
            v52 = llvm::VPTransformState::get(a5, a9, v43);
            llvm::createReplicatedMask(v16, v110[22], (uint64_t)&v119);
            v92 = v120;
            v93 = v119;
            v115 = "interleaved.mask";
            v118 = 259;
            v54 = llvm::PoisonValue::get(*(llvm::PoisonValue **)v52, v53);
            v51 = (_QWORD *)sub_1C486AD20((uint64_t)v45, (uint64_t)v52, (uint64_t)v54, v93, v92, (uint64_t)&v115);
            if (v119 != v121)
              free(v119);
            if (v102)
            {
              v122 = 257;
              v51 = sub_1C4773860((uint64_t)v45, 28, v51, v102, (uint64_t)&v119, 0);
            }
          }
          v55 = (uint64_t *)v123[v43];
          v56 = *((_BYTE *)a2 + 5);
          v119 = "wide.masked.vec";
          v122 = 259;
          MaskedLoad = (unsigned __int8 **)llvm::IRBuilderBase::CreateMaskedLoad((uint64_t)v45, v20, v55, v56, (uint64_t)v51, v96, (uint64_t)&v119);
        }
        else
        {
          v46 = v123[v43];
          v47 = *((unsigned __int8 *)a2 + 5) | 0x100;
          v119 = "wide.vec";
          v122 = 259;
          MaskedLoad = (unsigned __int8 **)sub_1C506D920(v45, (uint64_t)v20, v46, v47, 0, (uint64_t)&v119);
        }
        v49 = MaskedLoad;
        llvm::InterleaveGroup<llvm::Instruction>::addMetadata((uint64_t)a2, MaskedLoad);
        v50 = v112;
        if (v112 >= (unint64_t)HIDWORD(v112))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v111, (uint64_t)v113, v112 + 1, 8);
          v50 = v112;
        }
        *((_QWORD *)v111 + v50) = v49;
        LODWORD(v112) = v112 + 1;
        ++v43;
        a1 = v110;
      }
      while (v43 < v110[24]);
    }
    if ((_DWORD)v16)
    {
      v57 = 0;
      v103 = 0;
      v106 = (llvm::IRBuilderBase *)(a1 + 26);
      do
      {
        LODWORD(v119) = a2[8] + v57;
        v58 = sub_1C4FA9B60((uint64_t *)a2 + 1, &v119);
        if (v58)
        {
          v59 = (uint64_t ***)v58;
          llvm::createStrideMask((void *)v57, (int)v16, a1[22], (uint64_t)&v119);
          if (a1[24])
          {
            v61 = 0;
            do
            {
              v62 = (llvm::PoisonValue **)*((_QWORD *)v111 + v61);
              v63 = v119;
              v64 = v120;
              v115 = "strided.vec";
              v118 = 259;
              v65 = llvm::PoisonValue::get(*v62, v60);
              BitOrPointerCast = (llvm::Value *)sub_1C486AD20((uint64_t)v106, (uint64_t)v62, (uint64_t)v65, v63, v64, (uint64_t)&v115);
              v67 = *v59;
              if (*v59 != (uint64_t **)v107)
              {
                v68 = (llvm::Type *)*((_QWORD *)v110 + 11);
                if ((unint64_t)v68 >> 32 == 1)
                  llvm::ScalableVectorType::get(v67, v68);
                else
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v67, v68);
                BitOrPointerCast = (llvm::Value *)llvm::InnerLoopVectorizer::createBitOrPointerCast((llvm::InnerLoopVectorizer *)v110, BitOrPointerCast, v69, v98);
              }
              if (*((_BYTE *)a2 + 4))
              {
                v115 = "reverse";
                v118 = 259;
                BitOrPointerCast = (llvm::Value *)llvm::IRBuilderBase::CreateVectorReverse(v106, (void **)BitOrPointerCast, (const llvm::Twine *)&v115);
              }
              sub_1C63D1D2C((uint64_t)a5, *(void **)(a3 + 8 * v103), (uint64_t)BitOrPointerCast, v61++);
              a1 = v110;
            }
            while (v61 < v110[24]);
          }
          if (v119 != v121)
            free(v119);
          ++v103;
        }
        v57 = (v57 + 1);
      }
      while ((_DWORD)v57 != (_DWORD)v16);
    }
    if (v111 != v113)
      free(v111);
    goto LABEL_70;
  }
  v70 = (llvm::Type *)*((_QWORD *)a1 + 11);
  if ((unint64_t)v70 >> 32 == 1)
    llvm::ScalableVectorType::get((uint64_t **)v107, v70);
  else
    llvm::FixedVectorType::get(v107, v70);
  v72 = v71;
  v73 = (llvm::IRBuilderBase *)(a1 + 26);
  v95 = (uint64_t)llvm::createBitMaskForGaps((uint64_t)(a1 + 26), a1[22], a2);
  if (!a1[24])
    goto LABEL_70;
  v74 = 0;
  v100 = (uint64_t *)v73;
  do
  {
    v115 = v117;
    v116 = 0x400000000;
    if (!(_DWORD)v16)
    {
      v75 = 0;
      v76 = v117;
      goto LABEL_91;
    }
    for (i = 0; i != v16; i = (char *)i + 1)
    {
      LODWORD(v119) = (_DWORD)i + a2[8];
      if (!sub_1C4FA9B60((uint64_t *)a2 + 1, &v119))
      {
        v80 = (void **)llvm::PoisonValue::get(v72, v78);
        goto LABEL_86;
      }
      VectorReverse = (void **)llvm::VPTransformState::get(a5, *(llvm::VPValue **)(a7 + 8 * (_QWORD)i), v74);
      if (*((_BYTE *)a2 + 4))
      {
        v119 = "reverse";
        v122 = 259;
        VectorReverse = (void **)llvm::IRBuilderBase::CreateVectorReverse(v73, VectorReverse, (const llvm::Twine *)&v119);
      }
      if (*VectorReverse != v72)
      {
        v80 = (void **)llvm::InnerLoopVectorizer::createBitOrPointerCast((llvm::InnerLoopVectorizer *)v110, (llvm::Value *)VectorReverse, (llvm::Type **)v72, v98);
LABEL_86:
        VectorReverse = v80;
      }
      v81 = v116;
      if (v116 >= (unint64_t)HIDWORD(v116))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, (uint64_t)v117, v116 + 1, 8);
        v81 = v116;
      }
      *((_QWORD *)v115 + v81) = VectorReverse;
      v75 = v116 + 1;
      LODWORD(v116) = v116 + 1;
    }
    v76 = v115;
LABEL_91:
    v82 = (llvm::PoisonValue **)llvm::concatenateVectors((uint64_t)v73, v76, v75);
    llvm::createInterleaveMask((void *)v110[22], (int)v16, (uint64_t)&v119);
    v108 = (llvm::FixedVectorType *)v119;
    v83 = v120;
    v111 = "interleaved.vec";
    v114 = 259;
    v85 = llvm::PoisonValue::get(*v82, v84);
    v86 = (uint64_t *)sub_1C486AD20((uint64_t)v73, (uint64_t)v82, (uint64_t)v85, v108, v83, (uint64_t)&v111);
    if (v119 != v121)
      free(v119);
    if ((unint64_t)a9 | v95)
    {
      v88 = (_QWORD *)v95;
      v73 = (llvm::IRBuilderBase *)v100;
      if (a9)
      {
        v89 = llvm::VPTransformState::get(a5, a9, v74);
        llvm::createReplicatedMask(v16, v110[22], (uint64_t)&v119);
        v109 = (llvm::FixedVectorType *)v119;
        v94 = v120;
        v111 = "interleaved.mask";
        v114 = 259;
        v91 = llvm::PoisonValue::get(*(llvm::PoisonValue **)v89, v90);
        v88 = (_QWORD *)sub_1C486AD20((uint64_t)v100, (uint64_t)v89, (uint64_t)v91, v109, v94, (uint64_t)&v111);
        if (v119 != v121)
          free(v119);
        if (v95)
        {
          v122 = 257;
          v73 = (llvm::IRBuilderBase *)v100;
          v88 = sub_1C4773860((uint64_t)v100, 28, v88, v95, (uint64_t)&v119, 0);
        }
        else
        {
          v73 = (llvm::IRBuilderBase *)v100;
        }
      }
      MaskedStore = (unsigned __int8 **)llvm::IRBuilderBase::CreateMaskedStore((uint64_t)v73, v86, (uint64_t *)v123[v74], *((_BYTE *)a2 + 5), (uint64_t)v88);
    }
    else
    {
      v73 = (llvm::IRBuilderBase *)v100;
      a6 = a6 & 0xFFFFFFFFFFFF0000 | *((unsigned __int8 *)a2 + 5) | 0x100;
      MaskedStore = (unsigned __int8 **)sub_1C509CCE8(v100, v86, v123[v74], *((unsigned __int8 *)a2 + 5) | 0x100u, 0);
    }
    llvm::InterleaveGroup<llvm::Instruction>::addMetadata((uint64_t)a2, MaskedStore);
    if (v115 != v117)
      free(v115);
    ++v74;
  }
  while (v74 < v110[24]);
LABEL_70:
  if (v123 != v125)
    free(v123);
}

void *llvm::InnerLoopVectorizer::scalarizeInstruction(uint64_t a1, llvm::Instruction *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  void *result;
  BOOL v13;
  int v15;
  uint64_t ***v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Instruction **v22;
  llvm::Instruction *v23;
  int v24;
  int v25;
  llvm::Instruction *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  unsigned __int8 *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  llvm::LoopVersioning *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 **v55;
  int v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  char *v59;
  uint64_t v60;
  const char *v61;
  __int16 v62;
  unsigned __int8 *v63;

  result = (void *)sub_1C5790664((uint64_t)a2);
  if ((_DWORD)result)
  {
    v13 = !*(_DWORD *)a4 && *(_DWORD *)(a4 + 4) == 0;
    if (!v13 || *(_BYTE *)(a4 + 8) != 0)
      return result;
  }
  v15 = *(unsigned __int8 *)(*(_QWORD *)a2 + 8);
  llvm::Instruction::clone(a2);
  v17 = (uint64_t)v16;
  if (v15 != 7)
  {
    if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    {
      v28 = 0;
      v27 = &byte_1C871356D;
      goto LABEL_20;
    }
    v18 = ***(_QWORD ***)a2;
    v19 = *(_QWORD *)(v18 + 152);
    v20 = *(unsigned int *)(v18 + 168);
    if ((_DWORD)v20)
    {
      LODWORD(v21) = (v20 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v22 = (llvm::Instruction **)(v19 + 16 * v21);
      v23 = *v22;
      if (*v22 == a2)
      {
LABEL_19:
        v26 = v22[1];
        v29 = *(_QWORD *)v26;
        v27 = (char *)v26 + 16;
        v28 = v29;
LABEL_20:
        v62 = 773;
        v59 = v27;
        v60 = v28;
        v61 = ".cloned";
        llvm::Value::setName(v16, (uint64_t)&v59);
        goto LABEL_21;
      }
      v24 = 1;
      while (v23 != (llvm::Instruction *)-4096)
      {
        v25 = v21 + v24++;
        v21 = v25 & (v20 - 1);
        v23 = *(llvm::Instruction **)(v19 + 16 * v21);
        if (v23 == a2)
        {
          v22 = (llvm::Instruction **)(v19 + 16 * v21);
          goto LABEL_19;
        }
      }
    }
    v22 = (llvm::Instruction **)(v19 + 16 * v20);
    goto LABEL_19;
  }
LABEL_21:
  v30 = sub_1C477672C(a6 + 328, a3);
  v31 = *(_QWORD *)(a6 + 336);
  if (v31 == *(_QWORD *)(a6 + 328))
    v32 = (unsigned int *)(a6 + 348);
  else
    v32 = (unsigned int *)(a6 + 344);
  if (v30 != (_QWORD *)(v31 + 8 * *v32))
    llvm::Instruction::dropPoisonGeneratingFlags((llvm::Instruction *)v17);
  if (*((_QWORD *)a2 + 6))
    llvm::InnerLoopVectorizer::setDebugLocFromInst((unsigned __int8 *)a1, (uint64_t)a2, 0, 0);
  v33 = *(unsigned int *)(a3 + 56);
  if ((_DWORD)v33)
  {
    v34 = 0;
    v35 = *(uint64_t **)(a3 + 48);
    v36 = 32 * v33;
    do
    {
      v59 = *(char **)a4;
      LODWORD(v60) = *(_DWORD *)(a4 + 8);
      v37 = *v35;
      if (*v35)
        v38 = *(_BYTE *)(*v35 + 8) == 4;
      else
        v38 = 0;
      if (v38 && *(_BYTE *)(v37 + 56))
      {
        LOBYTE(v60) = 0;
        HIDWORD(v59) = 0;
      }
      v39 = llvm::VPTransformState::get(a6, v37, (unsigned int *)&v59);
      v40 = *(_DWORD *)(v17 + 20);
      if ((v40 & 0x40000000) != 0)
        v41 = *(_QWORD *)(v17 - 8);
      else
        v41 = v17 - 32 * (v40 & 0x7FFFFFF);
      v42 = v41 + v34;
      if (*(_QWORD *)(v41 + v34))
      {
        **(_QWORD **)(v42 + 16) = *(_QWORD *)(v42 + 8);
        v43 = *(_QWORD *)(v42 + 8);
        if (v43)
          *(_QWORD *)(v43 + 16) = *(_QWORD *)(v42 + 16);
      }
      *(_QWORD *)v42 = v39;
      if (v39)
      {
        v46 = *((_QWORD *)v39 + 1);
        v44 = v39 + 8;
        v45 = v46;
        v47 = v41 + v34;
        *(_QWORD *)(v47 + 8) = v46;
        if (v46)
          *(_QWORD *)(v45 + 16) = v47 + 8;
        *(_QWORD *)(v47 + 16) = v44;
        *v44 = v42;
      }
      ++v35;
      v34 += 32;
    }
    while (v36 != v34);
  }
  v48 = *(llvm::LoopVersioning **)(a1 + 80);
  if (v48 && (*((_BYTE *)a2 + 16) & 0xFE) == 0x3C)
    llvm::LoopVersioning::annotateInstWithNoAlias(v48, (llvm::Instruction *)v17, a2);
  v49 = *(uint64_t **)(a6 + 272);
  v62 = 257;
  (*(void (**)(uint64_t, uint64_t, char **, uint64_t, uint64_t))(*(_QWORD *)v49[10] + 16))(v49[10], v17, &v59, v49[6], v49[7]);
  v50 = *((unsigned int *)v49 + 2);
  if ((_DWORD)v50)
  {
    v53 = *v49;
    v54 = *v49 + 16 * v50;
    v55 = (unsigned __int8 **)(v17 + 48);
    do
    {
      v56 = *(_DWORD *)v53;
      v57 = *(unsigned __int8 **)(v53 + 8);
      if (v57)
      {
        if (!v56)
        {
          v63 = *(unsigned __int8 **)(v53 + 8);
          llvm::MetadataTracking::track((uint64_t)&v63, v57, 2);
LABEL_75:
          if (&v63 == v55)
          {
            if (v63)
              llvm::MetadataTracking::untrack((uint64_t)&v63, v63);
          }
          else
          {
            if (*v55)
              llvm::MetadataTracking::untrack(v17 + 48, *v55);
            v58 = v63;
            *v55 = v63;
            if (v58)
              llvm::MetadataTracking::retrack((uint64_t)&v63, v58, v17 + 48);
          }
          goto LABEL_72;
        }
      }
      else
      {
        if (!*v55 && (*(_BYTE *)(v17 + 23) & 0x20) == 0)
          goto LABEL_72;
        if (!v56)
        {
          v63 = 0;
          goto LABEL_75;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v17, v56, (llvm::MDNode *)v57);
LABEL_72:
      v53 += 16;
    }
    while (v53 != v54);
  }
  if (a3)
    v51 = a3 + 96;
  else
    v51 = 0;
  sub_1C606AC70((_DWORD *)a6, v51, v17, a4);
  result = (void *)sub_1C4D9F8B4(v17);
  if ((_DWORD)result && v17)
    result = llvm::AssumptionCache::registerAssumption(*(char ***)(a1 + 64), v17);
  if (a5)
  {
    v52 = *(unsigned int *)(a1 + 336);
    if (v52 >= *(_DWORD *)(a1 + 340))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 328, a1 + 344, v52 + 1, 8);
      LODWORD(v52) = *(_DWORD *)(a1 + 336);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 328) + 8 * v52) = v17;
    ++*(_DWORD *)(a1 + 336);
  }
  return result;
}

void sub_1C606AC70(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int i;
  _QWORD v15[3];
  char *v16[2];
  uint64_t v17;
  uint64_t v18;
  char *v19[2];
  _QWORD v20[13];

  v20[12] = *MEMORY[0x1E0C80C00];
  v16[0] = (char *)&v17;
  v16[1] = (char *)0x200000000;
  v18 = a2;
  v19[0] = (char *)v20;
  v19[1] = (char *)0x200000000;
  sub_1C63D9F64((uint64_t)v15, (uint64_t)(a1 + 14), &v18, (uint64_t)v19);
  sub_1C618F3AC(v19);
  sub_1C618F3AC(v16);
  v7 = v15[0];
  v8 = (_QWORD *)(v15[0] + 8);
  v9 = *(_DWORD *)(v15[0] + 16);
  v10 = *(_DWORD *)a4;
  while (v9 <= v10)
  {
    if (v9 >= *(_DWORD *)(v7 + 20))
    {
      sub_1C63DA320((uint64_t)v8);
      v9 = *(_DWORD *)(v7 + 16);
      v10 = *(_DWORD *)a4;
    }
    else
    {
      v13 = (_QWORD *)(*(_QWORD *)(v7 + 8) + 48 * v9);
      *v13 = v13 + 2;
      v13[1] = 0x400000000;
      v9 = *(_DWORD *)(v7 + 16) + 1;
      *(_DWORD *)(v7 + 16) = v9;
    }
  }
  v11 = *v8 + 48 * v10;
  if (*(_BYTE *)(a4 + 8) == 1)
    v12 = *(_DWORD *)(a4 + 4) + *a1;
  else
    v12 = *(_DWORD *)(a4 + 4);
  for (i = *(_DWORD *)(v11 + 8); i <= v12; *(_DWORD *)(v11 + 8) = i)
  {
    if (i >= *(_DWORD *)(v11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v11 + 16, i + 1, 8);
      i = *(_DWORD *)(v11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v11 + 8 * i) = 0;
    i = *(_DWORD *)(v11 + 8) + 1;
  }
  *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = a3;
}

uint64_t sub_1C606AE3C(uint64_t *a1, llvm::BasicBlock *a2, llvm::BasicBlock *this)
{
  uint64_t v3;
  llvm::APInt *v7;
  unsigned int v8;
  uint64_t SinglePredecessor;
  llvm::BasicBlock *v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  llvm::BasicBlock *v17;
  int v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  llvm::Value *v32;
  _DWORD *v33;
  uint64_t v34;
  llvm::Value *v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t *v39;

  v3 = a1[1];
  if (!v3)
    return 0;
  if (*(_BYTE *)(v3 + 16) == 16)
  {
    v7 = (llvm::APInt *)(v3 + 24);
    v8 = *(_DWORD *)(v3 + 32);
    if (v8 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v7) != v8)
        goto LABEL_5;
    }
    else if (*(_QWORD *)v7)
    {
      goto LABEL_5;
    }
    return 0;
  }
LABEL_5:
  SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(this);
  v10 = (llvm::BasicBlock *)*a1;
  v11 = operator new(0x60uLL);
  v11[13] = v11[13] & 0x38000000 | 1;
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = v11 + 8;
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v11 + 8), this, v10);
  v12 = a1[5];
  v13 = *(_DWORD *)(v12 + 16);
  if (v13)
  {
    v14 = *(_QWORD *)v12;
    v15 = v13 - 1;
    v16 = (v13 - 1) & ((this >> 4) ^ (this >> 9));
    v17 = *(llvm::BasicBlock **)(*(_QWORD *)v12 + 16 * v16);
    if (v17 == this)
    {
LABEL_10:
      v20 = *(_QWORD **)(v14 + 16 * v16 + 8);
      if (v20)
        llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v20, *a1, v12);
    }
    else
    {
      v18 = 1;
      while (v17 != (llvm::BasicBlock *)-4096)
      {
        v19 = v16 + v18++;
        v16 = v19 & v15;
        v17 = *(llvm::BasicBlock **)(v14 + 16 * v16);
        if (v17 == this)
          goto LABEL_10;
      }
    }
  }
  v21 = *(_QWORD *)(*a1 + 40);
  if (v21 == *a1 + 40)
  {
    v23 = 0;
  }
  else
  {
    if (v21)
      v22 = v21 - 24;
    else
      v22 = 0;
    if (*(unsigned __int8 *)(v22 + 16) - 29 >= 0xB)
      v23 = 0;
    else
      v23 = v22;
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v23 + 40) + 40, (uint64_t ***)v23);
  v24 = *(_QWORD *)(v23 + 24);
  v25 = *(_QWORD **)(v23 + 32);
  *v25 = v24;
  *(_QWORD *)(v24 + 8) = v25;
  *(_QWORD *)(v23 + 24) = 0;
  *(_QWORD *)(v23 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)v23);
  sub_1C4FCEAA0(*((_QWORD *)this + 7) + 72, (uint64_t *)this + 3, *(_QWORD *)(*a1 + 56) + 72, (uint64_t *)(*a1 + 24));
  v26 = *(_QWORD *)(SinglePredecessor + 40);
  if (v26 == SinglePredecessor + 40)
  {
    v28 = 0;
  }
  else
  {
    if (v26)
      v27 = v26 - 24;
    else
      v27 = 0;
    if (*(unsigned __int8 *)(v27 + 16) - 29 >= 0xB)
      v28 = 0;
    else
      v28 = v27;
  }
  llvm::Instruction::replaceSuccessorWith(v28, this, (llvm::BasicBlock *)*a1);
  llvm::DominatorTreeBase<llvm::BasicBlock,false>::addNewBlock(a1[4], *a1, SinglePredecessor);
  llvm::DominatorTreeBase<llvm::BasicBlock,false>::changeImmediateDominator(a1[4], (uint64_t)this, *a1);
  v29 = *(_QWORD *)(*a1 + 40);
  if (v29 == *a1 + 40)
  {
    v31 = 0;
  }
  else
  {
    if (v29)
      v30 = v29 - 24;
    else
      v30 = 0;
    if (*(unsigned __int8 *)(v30 + 16) - 29 >= 0xB)
      v31 = 0;
    else
      v31 = v30;
  }
  v32 = (llvm::Value *)a1[1];
  v33 = operator new(0xA0uLL);
  v34 = 0;
  v35 = (llvm::Value *)(v33 + 24);
  v33[29] = v33[29] & 0x38000000 | 3;
  do
  {
    v36 = &v33[v34];
    *v36 = 0;
    v36[1] = 0;
    v36[2] = 0;
    v36[3] = v35;
    v34 += 8;
  }
  while (v34 != 24);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v33 + 24), a2, this, v32, 0);
  v37 = (uint64_t *)(v31 + 24);
  if (!v31)
    v37 = 0;
  v39 = v37;
  llvm::ReplaceInstWithInst(*(_QWORD *)(v31 + 40) + 40, &v39, v35);
  a1[1] = 0;
  return *a1;
}

uint64_t llvm::InnerLoopVectorizer::emitMemRuntimeChecks(llvm::InnerLoopVectorizer *this, llvm::BasicBlock *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  llvm::OptimizationRemarkEmitter *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::LoopVersioning *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  void **v23;
  char *v24;
  unint64_t v25;
  void **v26;
  _QWORD *v27;
  unsigned __int8 *v28;
  const void *v29[10];
  void *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t (**v33)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  char v43;
  char v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[260];
  int v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (byte_1ED838B98)
    return 0;
  v5 = sub_1C63D2884(*((_QWORD *)this + 68), a2, *((llvm::BasicBlock **)this + 30));
  v2 = v5;
  if (v5)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 112);
    if (v6 && ((*(_BYTE *)(v6 + 17) & 4) != 0 || *(char *)(v6 + 13) < 0) || *((_BYTE *)this + 536))
    {
      v7 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)this + 9);
      v8 = ****(_QWORD ****)v7;
      if (*(_QWORD *)(v8 + 128)
        || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v8 + 72) + 48))(*(_QWORD *)(v8 + 72)))
      {
        llvm::Loop::getStartLoc(*((llvm::Loop **)this + 1), &v28);
        v16 = (int)v28;
        if (v28)
        {
          v17 = *(_QWORD *)&v28[-8 * *((unsigned int *)v28 + 2)];
          if (*(_BYTE *)v17 != 15)
            v17 = *(_QWORD *)(v17 - 8 * *(unsigned int *)(v17 + 8));
          v18 = *((_DWORD *)v28 + 1);
          v16 = *((unsigned __int16 *)v28 + 1);
        }
        else
        {
          v17 = 0;
          v18 = 0;
        }
        v19 = **(_QWORD **)(*((_QWORD *)this + 1) + 32);
        v20 = *(_QWORD *)(v19 + 56);
        v34 = 11;
        v35 = 2;
        v36 = v20;
        v37 = v17;
        v38 = v18;
        v39 = v16;
        v40 = "loop-vectorize";
        v41 = "VectorizationCodeSize";
        v42 = 21;
        v43 = 0;
        v44 = 0;
        v45 = v47;
        v46 = 0x400000000;
        v47[256] = 0;
        v48 = -1;
        v49 = v19;
        v33 = &off_1E814E570;
        v29[0] = "Code-size may be reduced by not forcing vectorization, or by source-code modifications eliminating the "
                 "need for runtime checks (e.g., adding 'restrict').";
        v29[1] = (const void *)153;
        sub_1C53B17B4((uint64_t)&v45, v29);
        sub_1C61998EC((uint64_t)v29, (uint64_t)&v33);
        v29[0] = &off_1E814E570;
        v33 = &off_1E814E790;
        v21 = (char *)v45;
        if ((_DWORD)v46)
        {
          v22 = (unint64_t)v46 << 6;
          do
          {
            v23 = (void **)&v21[v22];
            if (v21[v22 - 17] < 0)
              operator delete(*(v23 - 5));
            if (*((char *)v23 - 41) < 0)
              operator delete(*(v23 - 8));
            v22 -= 64;
          }
          while (v22);
          v21 = (char *)v45;
        }
        if (v21 != v47)
          free(v21);
        if (v28)
          llvm::MetadataTracking::untrack((uint64_t)&v28, v28);
        llvm::OptimizationRemarkEmitter::emit(v7, (llvm::DiagnosticInfoOptimizationBase *)v29);
        v29[0] = &off_1E814E790;
        v24 = (char *)v30;
        if (v31)
        {
          v25 = (unint64_t)v31 << 6;
          do
          {
            v26 = (void **)&v24[v25];
            if (v24[v25 - 17] < 0)
              operator delete(*(v26 - 5));
            if (*((char *)v26 - 41) < 0)
              operator delete(*(v26 - 8));
            v25 -= 64;
          }
          while (v25);
          v24 = (char *)v30;
        }
        if (v24 != (char *)&v32)
          free(v24);
      }
    }
    v9 = *((unsigned int *)this + 72);
    if (v9 >= *((_DWORD *)this + 73))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 280, (uint64_t)this + 296, v9 + 1, 8);
      LODWORD(v9) = *((_DWORD *)this + 72);
    }
    *(_QWORD *)(*((_QWORD *)this + 35) + 8 * v9) = v2;
    ++*((_DWORD *)this + 72);
    *((_BYTE *)this + 408) = 1;
    v10 = *(_QWORD *)(*((_QWORD *)this + 49) + 56);
    v11 = *(_QWORD *)(v10 + 8);
    if (!*(_BYTE *)(v11 + 360))
    {
      v12 = *(_QWORD *)(*((_QWORD *)this + 2) + 88);
      v13 = operator new();
      v14 = (llvm::LoopVersioning *)llvm::LoopVersioning::LoopVersioning(v13, v10, *(_BYTE **)(v11 + 280), *(unsigned int *)(v11 + 288), *((_QWORD *)this + 1), *((_QWORD *)this + 3), *((_QWORD *)this + 4), v12);
      v15 = (_QWORD *)*((_QWORD *)this + 10);
      *((_QWORD *)this + 10) = v14;
      if (v15)
      {
        v27 = sub_1C631A498(v15);
        MEMORY[0x1CAA32FC0](v27, 0x10E2C401419FA32);
        v14 = (llvm::LoopVersioning *)*((_QWORD *)this + 10);
      }
      llvm::LoopVersioning::prepareNoAliasMetadata(v14);
    }
  }
  return v2;
}

uint64_t sub_1C606B494(uint64_t a1, uint64_t ***a2)
{
  _BYTE v4[768];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (!a1 || *(_WORD *)(a1 + 24) != 14)
  {
    sub_1C50D02DC((uint64_t)v4, a2, (uint64_t)((*a2)[5] + 34), (uint64_t)"induction", 1);
    __asm { BR              X11 }
  }
  return *(_QWORD *)(a1 - 8);
}

void sub_1C606B5A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __asm { BR              X10 }
}

uint64_t sub_1C606B5EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  llvm::APInt *v5;
  uint64_t v6;
  llvm::APInt *v7;
  unsigned int v8;
  llvm::APInt *v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  _WORD v21[20];
  _BYTE v22[32];
  __int16 v23;

  if (*(_BYTE *)(v3 + 16) == 16)
  {
    v4 = *(_DWORD *)(v3 + 32);
    if (v4)
    {
      v5 = (llvm::APInt *)(v3 + 24);
      if (v4 > 0x40)
      {
        if (llvm::APInt::countTrailingOnesSlowCase(v5) != v4)
          goto LABEL_5;
      }
      else if (*(_QWORD *)v5 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v4)
      {
        goto LABEL_5;
      }
    }
    v23 = 257;
    return sub_1C47733F8(v0, v1, v2, (uint64_t)v22, 0, 0);
  }
LABEL_5:
  v6 = sub_1C6088150(&v20, v2, v3);
  if (!v1 || *(_BYTE *)(v1 + 16) != 16)
    goto LABEL_11;
  v7 = (llvm::APInt *)(v1 + 24);
  v8 = *(_DWORD *)(v1 + 32);
  if (v8 <= 0x40)
  {
    if (!*(_QWORD *)v7)
      return v6;
LABEL_11:
    if (v6 && *(_BYTE *)(v6 + 16) == 16)
    {
      v9 = (llvm::APInt *)(v6 + 24);
      v10 = *(_DWORD *)(v6 + 32);
      if (v10 <= 0x40)
      {
        if (*(_QWORD *)v9)
          goto LABEL_15;
        return v1;
      }
      if (llvm::APInt::countLeadingZerosSlowCase(v9) == v10)
        return v1;
    }
LABEL_15:
    v21[16] = 257;
    v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v0 + 72) + 16))(*(_QWORD *)(v0 + 72), v1, v6, 0, 0);
    if (!v11)
    {
      v23 = 257;
      v12 = (char *)operator new(0x80uLL);
      *((_QWORD *)v12 + 8) = *(_QWORD *)v1;
      v13 = (uint64_t)(v12 + 64);
      *((_QWORD *)v12 + 3) = v12 + 64;
      *((_QWORD *)v12 + 6) = 0;
      *((_QWORD *)v12 + 7) = v12 + 64;
      *((_QWORD *)v12 + 9) = 0;
      *((_QWORD *)v12 + 10) = 0x200000029;
      *(_OWORD *)(v12 + 88) = 0u;
      *(_OWORD *)(v12 + 104) = 0u;
      *((_DWORD *)v12 + 30) = 0;
      *(_QWORD *)v12 = v1;
      v16 = *(_QWORD *)(v1 + 8);
      v15 = (_QWORD *)(v1 + 8);
      v14 = v16;
      *((_QWORD *)v12 + 1) = v16;
      if (v16)
        *(_QWORD *)(v14 + 16) = v12 + 8;
      *((_QWORD *)v12 + 2) = v15;
      *v15 = v12;
      v17 = (_QWORD *)(v6 + 8);
      v18 = *(_QWORD *)(v6 + 8);
      *((_QWORD *)v12 + 5) = v18;
      *((_QWORD *)v12 + 4) = v6;
      if (v18)
        *(_QWORD *)(v18 + 16) = v12 + 40;
      *((_QWORD *)v12 + 6) = v17;
      *v17 = v12 + 32;
      llvm::Value::setName((uint64_t ***)v12 + 8, (uint64_t)v22);
      return sub_1C4773754((uint64_t *)v0, v13, (uint64_t)v21);
    }
    return v11;
  }
  if (llvm::APInt::countLeadingZerosSlowCase(v7) != v8)
    goto LABEL_11;
  return v6;
}

uint64_t llvm::InnerLoopVectorizer::fixupIVUsers(llvm::InnerLoopVectorizer *this, llvm::PHINode *a2, const llvm::InductionDescriptor *a3, llvm::ConstantInt **a4, llvm::Value *a5, llvm::BasicBlock *a6, llvm::BasicBlock *a7)
{
  uint64_t LoopLatch;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t i;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  llvm::Value **v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  unsigned int *v41;
  int v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  unsigned int *v46;
  uint64_t *v47;
  uint64_t v50[4];
  __int16 v51;
  uint64_t *v52;
  uint64_t v53;
  unsigned int v54;
  void *v55[12];
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v52 = 0;
  v53 = 0;
  v54 = 0;
  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*((_QWORD *)this + 1));
  v13 = *((_DWORD *)a2 + 5);
  v14 = v13 & 0x7FFFFFF;
  if ((v13 & 0x7FFFFFF) != 0)
  {
    v15 = 0;
    while (1)
    {
      v16 = (char *)a2 - 32 * v14;
      if ((v13 & 0x40000000) != 0)
        v16 = (char *)*((_QWORD *)a2 - 1);
      if (*(_QWORD *)&v16[32 * *((unsigned int *)a2 + 15) + 8 * v15] == LoopLatch)
        break;
      if (v14 == ++v15)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    LODWORD(v15) = -1;
  }
  if ((v13 & 0x40000000) != 0)
    v17 = (char *)*((_QWORD *)a2 - 1);
  else
    v17 = (char *)a2 - 32 * v14;
  for (i = *(_QWORD *)(*(_QWORD *)&v17[32 * v15] + 8); i; i = *(_QWORD *)(i + 8))
  {
    v19 = *(uint64_t **)(i + 24);
    v20 = *((_QWORD *)this + 1);
    v21 = sub_1C477672C(v20 + 56, v19[5]);
    v22 = *(_QWORD *)(v20 + 64);
    if (v22 == *(_QWORD *)(v20 + 56))
      v23 = 76;
    else
      v23 = 72;
    if (v21 == (_QWORD *)(v22 + 8 * *(unsigned int *)(v20 + v23)))
    {
      v55[0] = v19;
      sub_1C4EAD954((uint64_t *)&v52, v55)[1] = a5;
    }
  }
  v24 = *((_QWORD *)a2 + 1);
  if (v24)
  {
    v25 = (_QWORD *)((char *)a6 + 40);
    do
    {
      v26 = *((_QWORD *)this + 1);
      v27 = sub_1C477672C(v26 + 56, *(_QWORD *)(*(_QWORD *)(v24 + 24) + 40));
      v28 = *(_QWORD *)(v26 + 64);
      if (v28 == *(_QWORD *)(v26 + 56))
        v29 = 76;
      else
        v29 = 72;
      if (v27 == (_QWORD *)(v28 + 8 * *(unsigned int *)(v26 + v29)))
      {
        v30 = (_QWORD *)*v25;
        if ((_QWORD *)*v25 == v25)
        {
          v32 = 0;
        }
        else
        {
          if (v30)
            v31 = (uint64_t)(v30 - 3);
          else
            v31 = 0;
          if (*(unsigned __int8 *)(v31 + 16) - 29 >= 0xB)
            v32 = 0;
          else
            v32 = v31;
        }
        sub_1C4773D54((uint64_t)v55, v32, 0, 0, 0);
        v33 = *((_QWORD *)a3 + 5);
        if (v33 && sub_1C4774A9C(v33))
        {
          v34 = *(unsigned __int8 *)(*((_QWORD *)a3 + 5) + 17) >> 1;
          if (v34 == 127)
            v34 = -1;
          v56 = v34;
        }
        v35 = llvm::ConstantInt::get(*a4, 1, 0);
        v51 = 257;
        sub_1C47733F8((uint64_t)v55, (uint64_t)a4, (uint64_t)v35, (uint64_t)v50, 0, 0);
        __asm { BR              X11 }
      }
      v24 = *(_QWORD *)(v24 + 8);
    }
    while (v24);
  }
  v36 = (uint64_t)v52;
  v37 = &v52[2 * v54];
  if ((_DWORD)v53)
  {
    if (v54)
    {
      v38 = 16 * v54;
      v39 = v52;
      while ((*v39 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v39 += 2;
        v38 -= 16;
        if (!v38)
          goto LABEL_43;
      }
    }
    else
    {
      v39 = v52;
    }
  }
  else
  {
LABEL_43:
    v39 = &v52[2 * v54];
  }
  v40 = &v52[2 * v54];
  if (v39 != v40)
  {
    do
    {
      v41 = (unsigned int *)*v39;
      v42 = *(_DWORD *)(*v39 + 20);
      v43 = v42 & 0x7FFFFFF;
      if ((v42 & 0x7FFFFFF) != 0)
      {
        v44 = &v41[-8 * v43];
        v45 = 8 * v41[15];
        while (1)
        {
          v46 = v44;
          if ((v42 & 0x40000000) != 0)
            v46 = (unsigned int *)*((_QWORD *)v41 - 1);
          if (*(llvm::BasicBlock **)&v46[v45] == a6)
            break;
          v45 += 2;
          if (!--v43)
            goto LABEL_52;
        }
      }
      else
      {
LABEL_52:
        sub_1C477667C((llvm::PHINode *)v41, v39[1], (uint64_t)a6);
      }
      v47 = v39 + 2;
      v39 = v37;
      if (v47 != v37)
      {
        v39 = v47;
        while ((*v39 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v39 += 2;
          if (v39 == v37)
          {
            v39 = v37;
            break;
          }
        }
      }
    }
    while (v39 != v40);
    v36 = (uint64_t)v52;
  }
  return MEMORY[0x1CAA32FB4](v36, 8);
}

uint64_t sub_1C606BD64(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_DWORD *)(a1 + 20);
  v3 = v2 & 0x7FFFFFF;
  if ((v2 & 0x7FFFFFF) != 0)
  {
    v4 = 0;
    while (1)
    {
      v5 = a1 - 32 * v3;
      if ((v2 & 0x40000000) != 0)
        v5 = *(_QWORD *)(a1 - 8);
      if (*(_QWORD *)(v5 + 32 * *(unsigned int *)(a1 + 60) + 8 * v4) == a2)
        break;
      if (v3 == ++v4)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    LODWORD(v4) = -1;
  }
  if ((v2 & 0x40000000) != 0)
    v6 = *(_QWORD *)(a1 - 8);
  else
    v6 = a1 - 32 * v3;
  return *(_QWORD *)(v6 + 32 * v4);
}

int64_t llvm::LoopVectorizationCostModel::getVectorCallCost(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _BYTE *v10;
  int v11;
  uint64_t v12;
  uint64_t **v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t ***v28;
  uint64_t v29;
  uint64_t **v30;
  int v31;
  uint64_t **v33;
  uint64_t **v34;
  uint64_t v35;
  unint64_t ScalarizationOverhead;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void **v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  _BOOL4 v50;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  _QWORD *v55;
  int v56[2];
  _BYTE *v57;
  int64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  _BYTE v62[1664];
  uint64_t v63;
  void *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _BYTE v68[32];
  _QWORD *v69;
  uint64_t v70;
  _QWORD v71[6];

  v57 = a4;
  v71[4] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a2 - 32);
  if (!v7 || *(_BYTE *)(v7 + 16) || *(_QWORD *)(v7 + 24) != *(_QWORD *)(a2 + 72))
    v7 = 0;
  v8 = *(_QWORD *)a2;
  v9 = v71;
  v69 = v71;
  v70 = 0x400000000;
  v10 = v68;
  v66 = v68;
  v67 = 0x400000000;
  v11 = *(_DWORD *)(a2 + 20);
  v12 = v11 & 0x7FFFFFF;
  v13 = (uint64_t **)(a2 - 32 * v12);
  v14 = *(unsigned __int8 *)(a2 + 16);
  if (v14 == 84)
  {
    v15 = 0;
  }
  else if (v14 == 39)
  {
    v15 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    v15 = 2;
  }
  if (v11 < 0 && (v52 = (uint64_t)*(v13 - 1), (v52 & 0xFFFFFFFF0) != 0))
    v16 = (*((_DWORD *)v13 - 3) - *(_DWORD *)((char *)v13 - v52));
  else
    v16 = 0;
  if (v13 == (uint64_t **)(a2 - 32 * v15 - 32 * v16 - 32))
  {
    v18 = 0;
    v21 = v68;
  }
  else
  {
    v17 = v8;
    v18 = 0;
    v19 = 32 * v12 - 32 * v15 - 32 * v16 - 32;
    do
    {
      v20 = **v13;
      if (v18 >= HIDWORD(v67))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, (uint64_t)v68, v18 + 1, 8);
        v18 = v67;
      }
      v66[v18] = v20;
      v18 = v67 + 1;
      LODWORD(v67) = v67 + 1;
      v13 += 4;
      v19 -= 32;
    }
    while (v19);
    v21 = v66;
    v8 = v17;
  }
  v22 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _BYTE *, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 616) + 960))(**(_QWORD **)(a1 + 616), v7, v8, v21, v18, 0);
  v24 = v23;
  v25 = a3 & 0xFFFFFFFF00000000;
  if ((a3 & 0xFFFFFFFF00000000) == 0x100000000 || a3 != 1)
  {
    v26 = *(unsigned __int8 *)(v8 + 8);
    v54 = v68;
    v55 = v71;
    *(_QWORD *)v56 = a1;
    if (v26 == 7 || v26 == 9)
    {
      v53 = v8;
    }
    else
    {
      if (v25 == 0x100000000)
        llvm::ScalableVectorType::get((uint64_t **)v8, (llvm::Type *)a3);
      else
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v8, (llvm::Type *)a3);
      v53 = v27;
    }
    if ((_DWORD)v67)
    {
      v28 = (uint64_t ***)v66;
      v29 = 8 * v67;
      do
      {
        v30 = *v28;
        v31 = *((unsigned __int8 *)*v28 + 8);
        if (v31 != 7 && v31 != 9)
        {
          v33 = *v28;
          if (v25 == 0x100000000)
            llvm::ScalableVectorType::get(v33, (llvm::Type *)a3);
          else
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v33, (llvm::Type *)a3);
          v30 = v34;
        }
        v35 = v70;
        if (v70 >= (unint64_t)HIDWORD(v70))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, (uint64_t)v55, v70 + 1, 8);
          v35 = v70;
        }
        v69[v35] = v30;
        LODWORD(v70) = v70 + 1;
        ++v28;
        v29 -= 8;
      }
      while (v29);
    }
    ScalarizationOverhead = llvm::LoopVectorizationCostModel::getScalarizationOverhead(*(uint64_t *)v56, (uint64_t *)a2, (llvm::Type *)a3);
    v38 = v37;
    v63 = a3;
    LODWORD(v64) = 0;
    v58 = v22;
    v59 = v24;
    sub_1C4848B64((uint64_t)&v58, (uint64_t)&v63);
    if (__OFADD__(v58, ScalarizationOverhead))
      v22 = ((uint64_t)(v58 + ScalarizationOverhead) >> 63) ^ 0x8000000000000000;
    else
      v22 = v58 + ScalarizationOverhead;
    if (v38 == 1)
      v39 = 1;
    else
      v39 = v59;
    *v57 = 1;
    sub_1C606C764(a2, a3, 0, &v63);
    v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40);
    v59 = a2;
    v60 = v62;
    v61 = 0x800000000;
    sub_1C4EA1A3C((char **)a2, (uint64_t)&v60);
    v40 = sub_1C606C9D8((uint64_t)&v58, (uint64_t)&v63);
    v41 = (char *)v60;
    if ((_DWORD)v61)
    {
      v42 = 208 * v61;
      do
      {
        v43 = (void **)&v41[v42];
        if (v41[v42 - 9] < 0)
          operator delete(*(v43 - 4));
        if (*((char *)v43 - 33) < 0)
          operator delete(*(void **)&v41[v42 - 56]);
        v44 = *(char **)&v41[v42 - 200];
        if (&v41[v42 - 184] != v44)
          free(v44);
        v42 -= 208;
      }
      while (v42);
      v41 = (char *)v60;
    }
    v10 = v54;
    v9 = v55;
    if (v41 != v62)
      free(v41);
    v45 = *(_QWORD *)v56;
    v46 = v53;
    if (!*(_QWORD *)(*(_QWORD *)v56 + 624))
      goto LABEL_68;
    v47 = *(_QWORD *)(a2 + 64);
    if (!v47 || (*(_BYTE *)(v47 + 14) & 0x10) == 0)
    {
      if (!llvm::CallBase::hasFnAttrOnCalledFunction(a2, 20))
        goto LABEL_63;
      v47 = *(_QWORD *)(a2 + 64);
      if (!v47)
        goto LABEL_62;
    }
    if ((*(_BYTE *)(v47 + 12) & 0x10) == 0)
    {
LABEL_62:
      if (((llvm::CallBase::hasFnAttrOnCalledFunction(a2, 4) ^ 1) & 1) != 0)
      {
LABEL_68:
        if (v64 != &v65)
          free(v64);
        goto LABEL_70;
      }
    }
LABEL_63:
    if (v40)
    {
      v48 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD *, _QWORD, _QWORD))(***(_QWORD ***)(v45 + 616)
                                                                                         + 960))(**(_QWORD **)(v45 + 616), 0, v46, v69, v70, 0);
      v50 = v48 < v22;
      if (v39 != v49)
        v50 = v39 > v49;
      if (v50)
      {
        *v57 = 0;
        v22 = v48;
      }
    }
    goto LABEL_68;
  }
LABEL_70:
  if (v66 != (_QWORD *)v10)
    free(v66);
  if (v69 != v9)
    free(v69);
  return v22;
}

unint64_t llvm::LoopVectorizationCostModel::getScalarizationOverhead(uint64_t a1, uint64_t *a2, llvm::Type *a3)
{
  unint64_t v3;
  uint64_t v7;
  int v8;
  _QWORD *v11;
  void *v12;
  int v13;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  llvm::FixedVectorType ***v23;
  uint64_t v24;
  llvm::FixedVectorType *v25;
  llvm::FixedVectorType *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  llvm::Type *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  llvm::Type *v41;
  void *v42;
  uint64_t v43;
  _BYTE v44[32];
  void *v45;
  uint64_t v46;
  _QWORD v47[8];

  v47[6] = *MEMORY[0x1E0C80C00];
  if ((unint64_t)a3 >> 32 == 1)
    return 0;
  if ((_DWORD)a3 == 1)
    return 0;
  v7 = *a2;
  v8 = *(unsigned __int8 *)(*a2 + 8);
  if (v8 != 7 && v8 != 9 && (_DWORD)a3 != 1)
  {
    llvm::FixedVectorType::get((llvm::FixedVectorType *)*a2, a3);
    v7 = v15;
    v8 = *(unsigned __int8 *)(v15 + 8);
  }
  if (v8 == 7
    || *((_BYTE *)a2 + 16) == 60
    && ((*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 616) + 544))(**(_QWORD **)(a1 + 616)) & 1) != 0)
  {
    v3 = 0;
  }
  else
  {
    v11 = *(_QWORD **)(a1 + 616);
    LODWORD(v46) = (_DWORD)a3;
    if (a3 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v45, -1, 1);
    }
    else
    {
      v12 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)a3);
      if (!(_DWORD)a3)
        v12 = 0;
      v45 = v12;
    }
    v3 = (*(uint64_t (**)(_QWORD, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)*v11 + 528))(*v11, v7, &v45, 1, 0);
    if (v46 >= 0x41 && v45)
      MEMORY[0x1CAA32F9C](v45, 0x1000C8000313F17);
  }
  v13 = *((unsigned __int8 *)a2 + 16);
  if (v13 == 60)
  {
    if (!(*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 616) + 432))(**(_QWORD **)(a1 + 616)))
      return v3;
    v13 = *((unsigned __int8 *)a2 + 16);
  }
  if (v13 == 61)
  {
    if (((*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 616) + 544))(**(_QWORD **)(a1 + 616)) & 1) != 0)
      return v3;
    v13 = *((unsigned __int8 *)a2 + 16);
  }
  v16 = *((_DWORD *)a2 + 5);
  if (v13 == 84)
  {
    v17 = &a2[-4 * (v16 & 0x7FFFFFF)];
    if (v16 < 0 && (v32 = *(v17 - 1), (v32 & 0xFFFFFFFF0) != 0))
      v18 = (*((_DWORD *)v17 - 3) - *(_DWORD *)((char *)v17 - v32));
    else
      v18 = 0;
    v19 = (uint64_t)&a2[-4 * v18 - 4];
  }
  else
  {
    if ((v16 & 0x40000000) != 0)
    {
      v17 = (uint64_t *)*(a2 - 1);
      v20 = v16 & 0x7FFFFFF;
    }
    else
    {
      v20 = v16 & 0x7FFFFFF;
      v17 = &a2[-4 * v20];
    }
    v19 = (uint64_t)&v17[4 * v20];
  }
  v45 = v47;
  v46 = 0x600000000;
  v21 = v17;
  v22 = v17;
  if (v17 != (uint64_t *)v19)
  {
    v22 = v17;
    while (!sub_1C6076878(a1, *v22, (unint64_t)a3))
    {
      v22 += 4;
      if (v22 == (uint64_t *)v19)
      {
        v21 = (uint64_t *)v19;
        v22 = (uint64_t *)v19;
        goto LABEL_45;
      }
    }
    v21 = (uint64_t *)v19;
  }
LABEL_45:
  v41 = a3;
  v42 = v44;
  v43 = 0x400000000;
  v38 = v22;
  v39 = v19;
  v40 = a1;
  v34 = v21;
  v35 = v21;
  v36 = a1;
  v37 = a3;
  sub_1C63DADD4((uint64_t)&v42, &v38, &v34);
  v23 = (llvm::FixedVectorType ***)v42;
  if ((_DWORD)v43)
  {
    v33 = v3;
    v24 = 8 * v43;
    do
    {
      v25 = **v23;
      if (a3 != 1
        && ((*((_DWORD *)v25 + 2) & 0xFD) == 0xD || *((_DWORD *)v25 + 2) <= 6u))
      {
        llvm::FixedVectorType::get(**v23, a3);
        v25 = v27;
      }
      v28 = v46;
      if (v46 >= (unint64_t)HIDWORD(v46))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, (uint64_t)v47, v46 + 1, 8);
        v28 = v46;
      }
      *((_QWORD *)v45 + v28) = v25;
      LODWORD(v46) = v46 + 1;
      ++v23;
      v24 -= 8;
    }
    while (v24);
    v23 = (llvm::FixedVectorType ***)v42;
    v3 = v33;
  }
  if (v23 != (llvm::FixedVectorType ***)v44)
    free(v23);
  v29 = *(_QWORD **)(a1 + 616);
  if (v17 == (uint64_t *)v19)
  {
    v30 = v17;
  }
  else
  {
    while (!sub_1C6076878(a1, *v17, (unint64_t)a3))
    {
      v17 += 4;
      if (v17 == (uint64_t *)v19)
      {
        v30 = (uint64_t *)v19;
        v17 = (uint64_t *)v19;
        goto LABEL_65;
      }
    }
    v30 = (uint64_t *)v19;
  }
LABEL_65:
  v41 = a3;
  v42 = v44;
  v43 = 0x400000000;
  v38 = v17;
  v39 = v19;
  v40 = a1;
  v34 = v30;
  v35 = v30;
  v36 = a1;
  v37 = a3;
  sub_1C63DADD4((uint64_t)&v42, &v38, &v34);
  v31 = (*(uint64_t (**)(_QWORD, void *, _QWORD, void *, _QWORD))(*(_QWORD *)*v29 + 536))(*v29, v42, v43, v45, v46);
  if (__OFADD__(v3, v31))
    v3 = ((uint64_t)(v3 + v31) >> 63) ^ 0x8000000000000000;
  else
    v3 += v31;
  if (v42 != v44)
    free(v42);
  if (v45 != v47)
    free(v45);
  return v3;
}

void sub_1C606C764(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _QWORD v27[17];

  v8 = 0;
  v9 = 0;
  v27[16] = *MEMORY[0x1E0C80C00];
  v25 = v27;
  v26 = 0x800000000;
  v10 = a1 - 32;
  v11 = a1 - 8;
  while (1)
  {
    v12 = *(unsigned __int8 *)(a1 + 16);
    if (v12 == 84)
      v13 = 0;
    else
      v13 = v12 == 39 ? (*(_DWORD *)(a1 + 80) + 1) : 2;
    v14 = *(_DWORD *)(a1 + 20);
    if (v14 < 0 && (*(_QWORD *)(v11 - 32 * (v14 & 0x7FFFFFF)) & 0xFFFFFFFF0) != 0)
    {
      v16 = -(uint64_t)(v14 & 0x7FFFFFF);
      v15 = *(_DWORD *)(a1 - 32 * (v14 & 0x7FFFFFF) - 12)
          - *(_DWORD *)(a1 - 32 * (v14 & 0x7FFFFFF) - *(_QWORD *)(a1 - 32 * (v14 & 0x7FFFFFF) - 8));
    }
    else
    {
      v15 = 0;
      v16 = -(uint64_t)(v14 & 0x7FFFFFF);
    }
    v17 = v10 - 32 * v13 + 32 * -v15;
    v18 = a1 + 32 * v16;
    if (v9 >= ((unint64_t)(v17 - v18) >> 5))
      break;
    if (v8 >= HIDWORD(v26))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, (uint64_t)v27, v8 + 1, 16);
      v8 = v26;
    }
    v19 = (unint64_t *)((char *)v25 + 16 * v8);
    *v19 = v9;
    v19[1] = 0;
    v8 = v26 + 1;
    LODWORD(v26) = v26 + 1;
    ++v9;
  }
  if ((a3 & 1) != 0)
  {
    if (v12 == 84)
    {
      v20 = 0;
    }
    else if (v12 == 39)
    {
      v20 = (*(_DWORD *)(a1 + 80) + 1);
    }
    else
    {
      v20 = 2;
    }
    if (v14 < 0 && (v24 = *(_QWORD *)(v18 - 8), (v24 & 0xFFFFFFFF0) != 0))
      v21 = *(_DWORD *)(v18 - 12) - *(_DWORD *)(v18 - v24);
    else
      v21 = 0;
    v22 = ((-32 * v20 + 32 * (unint64_t)-v21 - 32 * v16 - 32) >> 5) | 0xA00000000;
    if (v8 >= HIDWORD(v26))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, (uint64_t)v27, v8 + 1, 16);
      v8 = v26;
    }
    v23 = (uint64_t *)((char *)v25 + 16 * v8);
    *v23 = v22;
    v23[1] = 0;
    v8 = v26 + 1;
    LODWORD(v26) = v26 + 1;
  }
  *a4 = a2;
  a4[1] = a4 + 3;
  a4[2] = 0x800000000;
  if (v8)
    sub_1C619EBD0((uint64_t)(a4 + 1), (uint64_t)&v25);
  if (v25 != v27)
    free(v25);
}

uint64_t sub_1C606C9D8(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t result;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned __int8 *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  int v21;
  _QWORD v22[17];

  v22[16] = *MEMORY[0x1E0C80C00];
  sub_1C606C764(*(_QWORD *)(a1 + 8), 1, 0, &v19);
  v4 = 0;
  v5 = (uint64_t *)(a2 + 8);
  if (*(_DWORD *)a2 == (_DWORD)v19)
  {
    if (*(_DWORD *)(a2 + 4) != HIDWORD(v19) || (v6 = *(unsigned int *)(a2 + 16), (_DWORD)v6 != v21))
    {
LABEL_12:
      v4 = 0;
      goto LABEL_13;
    }
    if ((_DWORD)v6)
    {
      v7 = *v5;
      v8 = *v5 + 16 * v6;
      v9 = v20;
      v4 = 1;
      while (*(_DWORD *)v7 == *v9
           && *(_DWORD *)(v7 + 4) == v9[1]
           && *(_DWORD *)(v7 + 8) == v9[2]
           && *(unsigned __int8 *)(v7 + 12) == *((unsigned __int8 *)v9 + 12))
      {
        v7 += 16;
        v9 += 4;
        if (v7 == v8)
          goto LABEL_13;
      }
      goto LABEL_12;
    }
    v4 = 1;
  }
LABEL_13:
  if (v20 != v22)
    free(v20);
  if (v4)
  {
    v10 = *(_QWORD *)(a1 + 8);
    result = *(_QWORD *)(v10 - 32);
    if (result && !*(_BYTE *)(result + 16) && *(_QWORD *)(result + 24) == *(_QWORD *)(v10 + 72))
      return result;
    return 0;
  }
  v12 = *(_DWORD *)(a1 + 24);
  if (!v12)
    return 0;
  v13 = 0;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = 208 * v12;
  while (*(_DWORD *)(v14 + v13) != *(_DWORD *)a2
       || *(_DWORD *)(v14 + v13 + 4) != *(_DWORD *)(a2 + 4)
       || !sub_1C63DA3B8((uint64_t *)(v14 + v13 + 8), (uint64_t *)(a2 + 8)))
  {
    v13 += 208;
    if (v15 == v13)
      return 0;
  }
  v16 = *(_BYTE *)(v14 + v13 + 199);
  if (v16 >= 0)
    v17 = (unsigned __int8 *)(v14 + v13 + 176);
  else
    v17 = *(unsigned __int8 **)(v14 + v13 + 176);
  if (v16 >= 0)
    v18 = v16 & 0x7F;
  else
    v18 = *(_QWORD *)(v14 + v13 + 184);
  result = sub_1C4FB7E80(*(uint64_t **)(*(_QWORD *)a1 + 112), v17, v18);
  if (result && *(_BYTE *)(result + 16))
    return 0;
  return result;
}

uint64_t llvm::LoopVectorizationCostModel::getVectorIntrinsicCost(uint64_t a1, uint64_t a2, llvm::Type *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  char v10;
  uint64_t **v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char *v26;
  uint64_t ***v27;
  uint64_t v28;
  uint64_t **v29;
  uint64_t **v31;
  uint64_t **v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  _BYTE v39[24];
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *__src;
  uint64_t v45;
  _BYTE v46[48];
  uint64_t *v47;
  uint64_t v48;
  _QWORD v49[8];

  v5 = a1;
  v49[6] = *MEMORY[0x1E0C80C00];
  v6 = llvm::getVectorIntrinsicIDForCall(a2, *(uint64_t **)(a1 + 624));
  v7 = *(_QWORD *)a2;
  v8 = (unint64_t)a3 & 0xFFFFFFFF00000000;
  v9 = ((unint64_t)a3 & 0xFFFFFFFF00000000) != 0x100000000 && (_DWORD)a3 == 1;
  v10 = v9;
  if (!v9 && ((*(_DWORD *)(v7 + 8) & 0xFD) == 0xD || *(_DWORD *)(v7 + 8) <= 6u))
  {
    v12 = *(uint64_t ***)a2;
    if (v8 == 0x100000000)
      llvm::ScalableVectorType::get(v12, a3);
    else
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v12, a3);
    v7 = v13;
  }
  if (sub_1C4774A9C(a2))
  {
    if ((unint64_t)*(unsigned __int8 *)(a2 + 17) >> 1 == 127)
      LODWORD(v14) = -1;
    else
      v14 = (unint64_t)*(unsigned __int8 *)(a2 + 17) >> 1;
  }
  else
  {
    LODWORD(v14) = 0;
  }
  v15 = *(_DWORD *)(a2 + 20);
  v16 = (char *)(a2 - 32 * (v15 & 0x7FFFFFF));
  v17 = *(unsigned __int8 *)(a2 + 16);
  if (v17 == 84)
  {
    v18 = 0;
  }
  else if (v17 == 39)
  {
    v18 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    v18 = 2;
  }
  if (v15 < 0 && (v35 = *((_QWORD *)v16 - 1), (v35 & 0xFFFFFFFF0) != 0))
    v19 = (*((_DWORD *)v16 - 3) - *(_DWORD *)&v16[-v35]);
  else
    v19 = 0;
  v47 = v49;
  v48 = 0x600000000;
  sub_1C6320FEC((unsigned int *)&v47, v16, (char *)(a2 - 32 * v18 - 32 * v19 - 32));
  v20 = *(_QWORD *)(a2 - 32);
  v21 = *(_QWORD *)(v20 + 24);
  __src = v46;
  v45 = 0x600000000;
  v22 = *(unsigned int *)(v21 + 12);
  if ((_DWORD)v22 == 1)
  {
    v23 = 0;
    v24 = v47;
    v25 = v48;
    v26 = v46;
  }
  else
  {
    v36 = v7;
    v37 = v6;
    v38 = v5;
    LODWORD(v23) = 0;
    v27 = (uint64_t ***)(*(_QWORD *)(v21 + 16) + 8);
    v28 = 8 * v22 - 8;
    do
    {
      v29 = *v27;
      if ((v10 & 1) == 0 && (((_DWORD)v29[1] & 0xFD) == 0xD || *((_DWORD *)v29 + 2) <= 6u))
      {
        v31 = *v27;
        if (v8 == 0x100000000)
          llvm::ScalableVectorType::get(v31, a3);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v31, a3);
        v29 = v32;
        LODWORD(v23) = v45;
      }
      if (v23 >= HIDWORD(v45))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v46, v23 + 1, 8);
        LODWORD(v23) = v45;
      }
      *((_QWORD *)__src + v23) = v29;
      v23 = (v45 + 1);
      LODWORD(v45) = v45 + 1;
      ++v27;
      v28 -= 8;
    }
    while (v28);
    v26 = (char *)__src;
    v20 = *(_QWORD *)(a2 - 32);
    v24 = v47;
    v25 = v48;
    if (!v20)
    {
      v5 = v38;
      v6 = v37;
      v7 = v36;
      goto LABEL_48;
    }
    v5 = v38;
    v6 = v37;
    v7 = v36;
    if (*(_BYTE *)(v20 + 16))
      goto LABEL_47;
  }
  if (*(_QWORD *)(v20 + 24) != *(_QWORD *)(a2 + 72))
  {
LABEL_47:
    v20 = 0;
    goto LABEL_48;
  }
  if ((*(_BYTE *)(v20 + 33) & 0x20) != 0)
    v20 = a2;
  else
    v20 = 0;
LABEL_48:
  llvm::IntrinsicCostAttributes::IntrinsicCostAttributes((uint64_t)v39, v6, v7, v24, v25, v26, v23, v14, v20, 0, 1);
  v33 = (*(uint64_t (**)(_QWORD, _BYTE *, _QWORD))(***(_QWORD ***)(v5 + 616) + 952))(**(_QWORD **)(v5 + 616), v39, 0);
  if (v42 != &v43)
    free(v42);
  if (v40 != &v41)
    free(v40);
  if (__src != v46)
    free(__src);
  if (v47 != v49)
    free(v47);
  return v33;
}

void llvm::InnerLoopVectorizer::truncateToMinimalBitwidths(llvm::InnerLoopVectorizer *this, llvm::VPTransformState *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  llvm::VPValue *v7;
  unint64_t i;
  unsigned __int8 *v9;
  char *v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  unint64_t v15;
  llvm::Type *v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v19;
  llvm::Type *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  llvm::Type *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  void *v26;
  uint64_t v27;
  uint64_t Select;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned __int8 *v44;
  llvm::Type *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unsigned __int8 *v51;
  llvm::Type *v52;
  uint64_t v53;
  unsigned __int8 *v54;
  _QWORD *v55;
  unsigned __int8 *v56;
  uint64_t v57;
  unsigned __int8 *v58;
  uint64_t v59;
  _QWORD *v60;
  int v61;
  uint64_t v62;
  _DWORD *v63;
  int v64;
  uint64_t v65;
  void **v66;
  void **j;
  uint64_t v68;
  llvm::VPValue *v69;
  unint64_t v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  int v76;
  _QWORD *v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned int v80;
  __int16 v81;
  uint64_t v82;
  _DWORD *v83;
  uint64_t v84;
  uint64_t *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  int v89;
  _BYTE v90[32];
  _QWORD v91[4];
  __int16 v92;
  llvm::VPValue *v93;
  void *v94[2];
  _QWORD v95[17];

  v95[15] = *MEMORY[0x1E0C80C00];
  v86 = v90;
  v87 = v90;
  v88 = 4;
  v89 = 0;
  v2 = *((_QWORD *)this + 50);
  v3 = *(_QWORD *)(v2 + 32);
  v84 = *(_QWORD *)(v2 + 40);
  if (v3 == v84)
    goto LABEL_120;
  v85 = (uint64_t *)((char *)a2 + 32);
  do
  {
    v6 = *((_QWORD *)a2 + 40);
    v94[0] = *(void **)v3;
    v7 = (llvm::VPValue *)sub_1C61B6040((uint64_t *)(v6 + 184), v94)[1];
    if (*((_QWORD *)a2 + 4) + 40 * *((unsigned int *)a2 + 12) != sub_1C6088290((uint64_t)v85, (uint64_t)v7)
      && *((_DWORD *)this + 24))
    {
      for (i = 0; i < *((unsigned int *)this + 24); ++i)
      {
        v9 = llvm::VPTransformState::get(a2, v7, i);
        v10 = (char *)sub_1C477672C((uint64_t)&v86, (uint64_t)v9);
        if (v87 == v86)
          v11 = (uint64_t *)((char *)&v88 + 4);
        else
          v11 = &v88;
        if (v10 != &v87[8 * *(unsigned int *)v11] || !*((_QWORD *)v9 + 1) || v9[16] < 0x1Cu)
          continue;
        v12 = *(_QWORD **)v9;
        v13 = **(_QWORD ***)v9;
        v14 = *(_DWORD *)(v3 + 8);
        LODWORD(v94[0]) = v14;
        if (v14 <= 63)
        {
          if (v14 <= 31)
          {
            switch(v14)
            {
              case 16:
                v15 = *v13 + 1936;
                goto LABEL_22;
              case 8:
                v15 = *v13 + 1912;
                goto LABEL_22;
              case 1:
                v15 = *v13 + 1888;
                goto LABEL_22;
            }
          }
          else if (v14 == 32)
          {
            v15 = *v13 + 1960;
            goto LABEL_22;
          }
        }
        else
        {
          if (v14 == 64)
          {
            v15 = *v13 + 1984;
            goto LABEL_22;
          }
          if (v14 == 128)
          {
            v15 = *v13 + 2008;
            goto LABEL_22;
          }
        }
        v63 = sub_1C5270984(*v13 + 2168, v94);
        v15 = *((_QWORD *)v63 + 1);
        if (!v15)
        {
          v83 = v63;
          v15 = sub_1C484358C(*v13 + 2040, 24, 3);
          v64 = (int)v94[0];
          *(_QWORD *)v15 = v13;
          *(_QWORD *)(v15 + 16) = 0;
          *(_DWORD *)(v15 + 8) = (v64 << 8) | 0xD;
          *(_DWORD *)(v15 + 12) = 0;
          *((_QWORD *)v83 + 1) = v15;
        }
LABEL_22:
        v16 = (llvm::Type *)*((unsigned int *)v12 + 8);
        if (*((_BYTE *)v12 + 8) == 19)
          llvm::ScalableVectorType::get((uint64_t **)v15, v16);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v15, v16);
        v18 = (uint64_t)v17;
        if (v17 != v12)
        {
          sub_1C4773D54((uint64_t)v94, (uint64_t)v9, 0, 0, 0);
          v19 = v9[16];
          if (v19 >= 0x1C && v19 - 41 <= 0x11)
          {
            v80 = v19 - 28;
            v29 = (unsigned __int8 *)*((_QWORD *)v9 - 8);
            if (!v29 || v29[16] != 67 || (v30 = (unsigned __int8 *)*((_QWORD *)v29 - 4), *(_QWORD *)v30 != v18))
            {
              v92 = 257;
              v30 = sub_1C4773690((uint64_t *)v94, v29, v18, (uint64_t)v91);
            }
            v31 = (unsigned __int8 *)*((_QWORD *)v9 - 4);
            if (!v31 || v31[16] != 67 || (v32 = (unsigned __int8 *)*((_QWORD *)v31 - 4), *(_QWORD *)v32 != v18))
            {
              v92 = 257;
              v32 = sub_1C4773690((uint64_t *)v94, v31, v18, (uint64_t)v91);
            }
            v92 = 257;
            v33 = sub_1C4773860((uint64_t)v94, v80, v30, (uint64_t)v32, (uint64_t)v91, 0);
            llvm::Instruction::copyIRFlags((uint64_t)v33, (uint64_t)v9, 0);
            goto LABEL_92;
          }
          if (v19 == 85)
          {
            v82 = *((_QWORD *)v9 - 12);
            v38 = (unsigned __int8 *)*((_QWORD *)v9 - 8);
            if (!v38 || v38[16] != 67 || (v39 = (uint64_t *)*((_QWORD *)v38 - 4), *v39 != v18))
            {
              v92 = 257;
              v39 = (uint64_t *)sub_1C4773690((uint64_t *)v94, v38, v18, (uint64_t)v91);
            }
            v40 = (unsigned __int8 *)*((_QWORD *)v9 - 4);
            if (!v40 || v40[16] != 67 || (v41 = (unsigned __int8 *)*((_QWORD *)v40 - 4), *(_QWORD *)v41 != v18))
            {
              v92 = 257;
              v41 = sub_1C4773690((uint64_t *)v94, v40, v18, (uint64_t)v91);
            }
            v92 = 257;
            Select = (uint64_t)llvm::IRBuilderBase::CreateSelect((uint64_t *)v94, v82, v39, (uint64_t)v41, (uint64_t)v91, 0);
            goto LABEL_91;
          }
          if (v19 == 81)
          {
            v81 = *((_WORD *)v9 + 9);
            v34 = (unsigned __int8 *)*((_QWORD *)v9 - 8);
            if (!v34 || v34[16] != 67 || (v35 = (unsigned __int8 *)*((_QWORD *)v34 - 4), *(_QWORD *)v35 != v18))
            {
              v92 = 257;
              v35 = sub_1C4773690((uint64_t *)v94, v34, v18, (uint64_t)v91);
            }
            v36 = (unsigned __int8 *)*((_QWORD *)v9 - 4);
            if (!v36 || v36[16] != 67 || (v37 = (unsigned __int8 *)*((_QWORD *)v36 - 4), *(_QWORD *)v37 != v18))
            {
              v92 = 257;
              v37 = sub_1C4773690((uint64_t *)v94, v36, v18, (uint64_t)v91);
            }
            v92 = 257;
            Select = sub_1C4774B48((uint64_t)v94, v81 & 0x3F, (uint64_t)v35, (uint64_t)v37, (uint64_t)v91);
            goto LABEL_91;
          }
          if (v19 < 0x1C || v19 - 66 > 0xC)
          {
            switch(v19)
            {
              case 'Y':
                v51 = (unsigned __int8 *)*((_QWORD *)v9 - 8);
                v52 = (llvm::Type *)*(unsigned int *)(*(_QWORD *)v51 + 32);
                if (*(_BYTE *)(*(_QWORD *)v51 + 8) == 19)
                  llvm::ScalableVectorType::get((uint64_t **)v15, v52);
                else
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v15, v52);
                v92 = 257;
                v54 = sub_1C4773690((uint64_t *)v94, v51, v53, (uint64_t)v91);
                v55 = *(_QWORD **)v9;
                v92 = 257;
                Select = (uint64_t)sub_1C4772EE0((uint64_t *)v94, (uint64_t)v54, (uint64_t)v55, (uint64_t)v91);
                break;
              case 'Z':
                v44 = (unsigned __int8 *)*((_QWORD *)v9 - 12);
                v45 = (llvm::Type *)*(unsigned int *)(*(_QWORD *)v44 + 32);
                if (*(_BYTE *)(*(_QWORD *)v44 + 8) == 19)
                  llvm::ScalableVectorType::get((uint64_t **)v15, v45);
                else
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v15, v45);
                v92 = 257;
                v47 = sub_1C4773690((uint64_t *)v94, v44, v46, (uint64_t)v91);
                v48 = (unsigned __int8 *)*((_QWORD *)v9 - 8);
                v92 = 257;
                v49 = sub_1C4773690((uint64_t *)v94, v48, v15, (uint64_t)v91);
                v50 = *((_QWORD *)v9 - 4);
                v92 = 257;
                Select = (uint64_t)sub_1C4773154((uint64_t *)v94, (uint64_t)v47, (uint64_t)v49, v50, (uint64_t)v91);
                break;
              case '[':
                v78 = (unsigned __int8 *)*((_QWORD *)v9 - 8);
                v20 = (llvm::Type *)*(unsigned int *)(*(_QWORD *)v78 + 32);
                if (*(_BYTE *)(*(_QWORD *)v78 + 8) == 19)
                  llvm::ScalableVectorType::get((uint64_t **)v15, v20);
                else
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v15, v20);
                v92 = 257;
                v79 = sub_1C4773690((uint64_t *)v94, v78, v21, (uint64_t)v91);
                v22 = (unsigned __int8 *)*((_QWORD *)v9 - 4);
                v23 = (llvm::Type *)*(unsigned int *)(*(_QWORD *)v22 + 32);
                if (*(_BYTE *)(*(_QWORD *)v22 + 8) == 19)
                  llvm::ScalableVectorType::get((uint64_t **)v15, v23);
                else
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v15, v23);
                v92 = 257;
                v25 = sub_1C4773690((uint64_t *)v94, v22, v24, (uint64_t)v91);
                v26 = (void *)*((_QWORD *)v9 + 8);
                v27 = *((unsigned int *)v9 + 18);
                v92 = 257;
                Select = sub_1C486AD20((uint64_t)v94, (uint64_t)v79, (uint64_t)v25, v26, v27, (uint64_t)v91);
                break;
              default:
LABEL_95:
                if (v94[0] != v95)
                  free(v94[0]);
                continue;
            }
LABEL_91:
            v33 = (unsigned __int8 *)Select;
LABEL_92:
            llvm::Value::takeName((llvm::Value *)v33, (llvm::Value *)v9);
            v92 = 257;
            v58 = sub_1C4773690((uint64_t *)v94, v33, (uint64_t)v12, (uint64_t)v91);
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v9, (llvm::Value *)v58, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v9 + 5) + 40, (uint64_t ***)v9);
            v59 = *((_QWORD *)v9 + 3);
            v60 = (_QWORD *)*((_QWORD *)v9 + 4);
            *v60 = v59;
            *(_QWORD *)(v59 + 8) = v60;
            *((_QWORD *)v9 + 3) = 0;
            *((_QWORD *)v9 + 4) = 0;
            llvm::Value::deleteValue((llvm::Value *)v9);
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v86, (uint64_t)v9);
            v93 = v7;
            v91[0] = 0;
            v61 = sub_1C635A4E4(v85, &v93, v91);
            v62 = v91[0];
            if (!v61)
              v62 = *((_QWORD *)a2 + 4) + 40 * *((unsigned int *)a2 + 12);
            *(_QWORD *)(*(_QWORD *)(v62 + 8) + 8 * i) = v58;
            goto LABEL_95;
          }
          if (v19 == 66)
          {
            v42 = (unsigned __int8 *)*((_QWORD *)v9 - 4);
            if (v42)
            {
              if (v42[16] == 67)
              {
                v33 = (unsigned __int8 *)*((_QWORD *)v42 - 4);
                if (*(_QWORD *)v33 == v18)
                  goto LABEL_92;
              }
            }
            v92 = 257;
            v43 = v18;
          }
          else
          {
            if (v19 != 67)
            {
              v56 = (unsigned __int8 *)*((_QWORD *)v9 - 4);
              if (*(_DWORD *)(v12[3] + 8) >> 8 >= *(_DWORD *)(*(_QWORD *)(v18 + 24) + 8) >> 8)
                v57 = v18;
              else
                v57 = (uint64_t)v12;
              v92 = 257;
              Select = (uint64_t)sub_1C4773B94((uint64_t *)v94, v56, v57, (uint64_t)v91);
              goto LABEL_91;
            }
            v42 = (unsigned __int8 *)*((_QWORD *)v9 - 4);
            if (*(_DWORD *)(v12[3] + 8) >> 8 >= *(_DWORD *)(*(_QWORD *)(v18 + 24) + 8) >> 8)
              v43 = v18;
            else
              v43 = (uint64_t)v12;
            v92 = 257;
          }
          Select = (uint64_t)sub_1C4773690((uint64_t *)v94, v42, v43, (uint64_t)v91);
          goto LABEL_91;
        }
      }
    }
    v3 += 16;
  }
  while (v3 != v84);
  v65 = *((_QWORD *)this + 50);
  v66 = *(void ***)(v65 + 32);
  for (j = *(void ***)(v65 + 40); v66 != j; v66 += 2)
  {
    v68 = *((_QWORD *)a2 + 40);
    v94[0] = *v66;
    v69 = (llvm::VPValue *)sub_1C61B6040((uint64_t *)(v68 + 184), v94)[1];
    if (*((_QWORD *)a2 + 4) + 40 * *((unsigned int *)a2 + 12) != sub_1C6088290((uint64_t)v85, (uint64_t)v69)
      && *((_DWORD *)this + 24))
    {
      v70 = 0;
      do
      {
        v71 = llvm::VPTransformState::get(a2, v69, v70);
        if (v71)
        {
          v72 = v71;
          if (v71[16] == 67 && !*((_QWORD *)v71 + 1))
          {
            v73 = *((_QWORD *)v71 - 4);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v71 + 5) + 40, (uint64_t ***)v71);
            v74 = *((_QWORD *)v72 + 3);
            v75 = (_QWORD *)*((_QWORD *)v72 + 4);
            *v75 = v74;
            *(_QWORD *)(v74 + 8) = v75;
            *((_QWORD *)v72 + 3) = 0;
            *((_QWORD *)v72 + 4) = 0;
            llvm::Value::deleteValue((llvm::Value *)v72);
            v91[0] = v69;
            v94[0] = 0;
            v76 = sub_1C635A4E4(v85, v91, v94);
            v77 = v94[0];
            if (!v76)
              v77 = (_QWORD *)(*((_QWORD *)a2 + 4) + 40 * *((unsigned int *)a2 + 12));
            *(_QWORD *)(v77[1] + 8 * v70) = v73;
          }
        }
        ++v70;
      }
      while (v70 < *((unsigned int *)this + 24));
    }
  }
LABEL_120:
  if (v87 != v86)
    free(v87);
}

unint64_t llvm::InnerLoopVectorizer::fixVectorizedLoop(llvm::InnerLoopVectorizer *this, llvm::VPTransformState *a2, uint64_t *a3)
{
  llvm::InnerLoopVectorizer *v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *i;
  uint64_t v23;
  llvm::Instruction **v24;
  uint64_t v25;
  llvm::Instruction *v26;
  uint64_t v27;
  uint64_t j;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  llvm *v42;
  int v43;
  int v44;
  llvm::Loop *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  BOOL v49;
  int v50;
  void **v52;
  int v53;
  int v54;
  int v55;
  int k;
  int v57;
  const llvm::Instruction **v58;
  const llvm::Instruction *v59;
  llvm::Value *v60;
  uint64_t v61;
  _QWORD *v62;
  char v63;
  const llvm::Instruction **v64;
  int v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  llvm::PHINode *v80;
  unint64_t result;
  uint64_t v82;
  uint64_t v83;
  llvm::BasicBlock **v84;
  int v85;
  uint64_t VectorTripCount;
  _QWORD *v87;
  llvm::ConstantInt **v88;
  llvm::BasicBlock ***v89;
  llvm::InnerLoopVectorizer *v90;
  uint64_t v91;
  uint64_t v92;
  const llvm::Instruction **v93;
  const llvm::Instruction **v94;
  uint64_t v95;
  void **v96;
  unsigned int v97[14];
  uint64_t v98[10];

  v5 = this;
  v98[8] = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)this + 22);
  if (*((_DWORD *)this + 23) != 1)
  {
    if (v6 < 2)
      goto LABEL_6;
    goto LABEL_5;
  }
  if (v6)
LABEL_5:
    llvm::InnerLoopVectorizer::truncateToMinimalBitwidths(this, a2);
LABEL_6:
  if (*((_DWORD *)v5 + 112))
    llvm::InnerLoopVectorizer::fixNonInductionPHIs((uint64_t)v5, a2);
  llvm::InnerLoopVectorizer::fixCrossIterationPHIs((uint64_t)v5, a2);
  llvm::ScalarEvolution::forgetLoop(*(int32x2_t **)(*((_QWORD *)v5 + 2) + 88), *((const llvm::Loop **)v5 + 1));
  v7 = *a3;
  if (!*a3 || *(_BYTE *)(v7 + 8) != 1)
  {
    if (*(_DWORD *)(v7 + 80) != 1)
    {
      v7 = 0;
      goto LABEL_18;
    }
    v7 = **(_QWORD **)(v7 + 72);
    if (*(_BYTE *)(v7 + 8) != 1)
      goto LABEL_18;
  }
  do
  {
    v7 = *(_QWORD *)(v7 + 208);
    if (v7)
      v8 = *(_BYTE *)(v7 + 8) == 1;
    else
      v8 = 0;
  }
  while (v8);
LABEL_18:
  v91 = v7;
  v9 = (uint64_t *)*((_QWORD *)v5 + 3);
  v10 = sub_1C6281BA0((_DWORD *)a2 + 26, &v91);
  v11 = *((_DWORD *)v9 + 4);
  if (v11)
  {
    v12 = v10[1];
    v13 = *v9;
    v14 = v11 - 1;
    v15 = ((v12 >> 4) ^ (v12 >> 9)) & (v11 - 1);
    v16 = *(_QWORD *)(*v9 + 16 * v15);
    if (v12 == v16)
    {
LABEL_23:
      v19 = *(_QWORD *)(v13 + 16 * v15 + 8);
      goto LABEL_25;
    }
    v17 = 1;
    while (v16 != -4096)
    {
      v18 = v15 + v17++;
      v15 = v18 & v14;
      v16 = *(_QWORD *)(v13 + 16 * v15);
      if (v12 == v16)
        goto LABEL_23;
    }
  }
  v19 = 0;
LABEL_25:
  v89 = (llvm::BasicBlock ***)v19;
  v90 = v5;
  if (!sub_1C63D2468(*((_QWORD *)v5 + 50), *((_QWORD *)v5 + 11)))
  {
    v20 = *((_QWORD *)v5 + 49);
    v21 = *(uint64_t **)(v20 + 152);
    for (i = *(uint64_t **)(v20 + 160); v21 != i; v21 += 12)
    {
      v80 = (llvm::PHINode *)*v21;
      result = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(v19);
      if (!result)
        goto LABEL_113;
      v82 = *(_QWORD *)(result + 40);
      if (v82 == result + 40)
        goto LABEL_113;
      if (v82)
        v83 = v82 - 24;
      else
        v83 = 0;
      if (*(_BYTE *)(v83 + 16) != 30)
      {
        v84 = 0;
        switch(*(_BYTE *)(v83 + 16))
        {
          case 0x1D:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
            goto LABEL_118;
          case 0x1E:
            __break(1u);
            return result;
          case 0x1F:
            v85 = (*(_DWORD *)(v83 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_116;
          case 0x20:
            v85 = (*(_DWORD *)(v83 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_116;
          case 0x27:
            v85 = *(_DWORD *)(v83 + 80) + 1;
LABEL_116:
            if (v85 == 1)
              goto LABEL_117;
            goto LABEL_113;
          default:
            goto LABEL_113;
        }
      }
      if ((*(_DWORD *)(v83 + 20) & 0x7FFFFFF) == 3)
LABEL_113:
        v84 = 0;
      else
LABEL_117:
        v84 = (llvm::BasicBlock **)result;
LABEL_118:
      VectorTripCount = llvm::InnerLoopVectorizer::getOrCreateVectorTripCount(v90, v84);
      v87 = sub_1C6180A54((uint64_t)v90 + 416, v21);
      v88 = (llvm::ConstantInt **)VectorTripCount;
      v19 = (uint64_t)v89;
      llvm::InnerLoopVectorizer::fixupIVUsers(v90, v80, (const llvm::InductionDescriptor *)(v21 + 1), v88, (llvm::Value *)v87[1], *((llvm::BasicBlock **)v90 + 32), *v89[4]);
    }
    v5 = v90;
    llvm::InnerLoopVectorizer::fixLCSSAPHIs((uint64_t)v90, a2);
  }
  v23 = *((unsigned int *)v5 + 84);
  if ((_DWORD)v23)
  {
    v24 = (llvm::Instruction **)*((_QWORD *)v5 + 41);
    v25 = 8 * v23;
    do
    {
      v26 = *v24++;
      llvm::InnerLoopVectorizer::sinkScalarOperands(v5, v26);
      v25 -= 8;
    }
    while (v25);
  }
  v27 = **(_QWORD **)(v19 + 32);
  v95 = 1;
  for (j = 8; j != 72; j += 16)
    *(uint64_t *)((char *)&v95 + j) = -4096;
  v29 = v27 + 40;
  v30 = *(_QWORD *)(v27 + 48);
  if (v30 == v27 + 40)
    goto LABEL_34;
  do
  {
    v46 = v30 - 24;
    v8 = v30 == 0;
    v30 = *(_QWORD *)(v30 + 8);
    if (v8)
      v47 = 0;
    else
      v47 = v46;
    v48 = *(unsigned __int8 *)(v47 + 16) - 62;
    v49 = v48 > 0x1D;
    v50 = (1 << v48) & 0x38000001;
    if (v49 || v50 == 0)
      continue;
    if ((v95 & 1) != 0)
      v52 = (void **)&v96;
    else
      v52 = v96;
    if ((v95 & 1) != 0)
      v53 = 4;
    else
      v53 = v97[0];
    if (!v53)
      goto LABEL_76;
    v54 = sub_1C60882E0(v47);
    v55 = v53 - 1;
    for (k = 1; ; ++k)
    {
      v57 = v54 & v55;
      v58 = (const llvm::Instruction **)&v52[2 * (v54 & v55)];
      v59 = *v58;
      if (*v58 != (const llvm::Instruction *)-8192
        && v47 != -8192
        && v47 != -4096
        && v59 != (const llvm::Instruction *)-4096)
      {
        break;
      }
      if (v59 == (const llvm::Instruction *)v47)
        goto LABEL_74;
LABEL_69:
      if (v59 == (const llvm::Instruction *)-4096)
        goto LABEL_76;
      v54 = v57 + k;
    }
    if (!llvm::Instruction::isIdenticalToWhenDefined((llvm::Instruction *)v47, *v58)
      || (*((unsigned __int8 *)v59 + 17) ^ *(unsigned __int8 *)(v47 + 17)) >= 2)
    {
      v59 = *v58;
      goto LABEL_69;
    }
LABEL_74:
    v60 = v58[1];
    if (v60)
    {
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v47, v60, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v47 + 40) + 40, (uint64_t ***)v47);
      v61 = *(_QWORD *)(v47 + 24);
      v62 = *(_QWORD **)(v47 + 32);
      *v62 = v61;
      *(_QWORD *)(v61 + 8) = v62;
      *(_QWORD *)(v47 + 24) = 0;
      *(_QWORD *)(v47 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v47);
      continue;
    }
LABEL_76:
    v92 = v47;
    v93 = 0;
    v63 = sub_1C6088434((uint64_t)&v95, &v92, &v93);
    v64 = v93;
    if ((v63 & 1) == 0)
    {
      v94 = v93;
      v65 = v95;
      v66 = v97[0];
      v67 = v95 >> 1;
      v68 = v95 & 1;
      if ((v95 & 1) != 0)
        v69 = 4;
      else
        v69 = v97[0];
      if (4 * v67 + 4 >= 3 * v69)
      {
        v69 *= 2;
      }
      else if (v69 + ~v67 - HIDWORD(v95) > v69 >> 3)
      {
        goto LABEL_82;
      }
      if (v69 >= 5)
      {
        v70 = (v69 - 1) | ((unint64_t)(v69 - 1) >> 1);
        v71 = v70 | (v70 >> 2) | ((v70 | (v70 >> 2)) >> 4);
        v72 = ((v71 | (v71 >> 8)) >> 16) | v71 | (v71 >> 8);
        if ((v72 + 1) > 0x40)
          v69 = v72 + 1;
        else
          v69 = 64;
      }
      if ((v95 & 1) != 0)
      {
        v74 = 0;
        v75 = v98;
        do
        {
          v76 = *(uint64_t *)((char *)&v95 + v74 * 4 + 8);
          if ((v76 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v77 = *(_QWORD *)&v97[v74];
            *v75 = v76;
            v75[1] = v77;
            v75 += 2;
          }
          v74 += 4;
        }
        while (v74 != 16);
        if (v69 > 4)
        {
          LODWORD(v95) = v95 & 0xFFFFFFFE;
          v78 = v69;
          v96 = (void **)operator new(16 * v69, (std::align_val_t)8uLL);
          *(_QWORD *)v97 = v78;
        }
        sub_1C6088558((uint64_t)&v95, v98, v75);
      }
      else
      {
        v73 = (uint64_t *)v96;
        if (v69 > 4)
        {
          v79 = v69;
          v96 = (void **)operator new(16 * v69, (std::align_val_t)8uLL);
          *(_QWORD *)v97 = v79;
        }
        else
        {
          LODWORD(v95) = v95 | 1;
        }
        sub_1C6088558((uint64_t)&v95, v73, &v73[2 * v66]);
        MEMORY[0x1CAA32FB4](v73, 8);
      }
      sub_1C6088434((uint64_t)&v95, &v92, &v94);
      v65 = v95;
      v64 = v94;
      v68 = v95 & 1;
LABEL_82:
      LODWORD(v95) = ((v65 & 0xFFFFFFFE) + 2) | v68;
      if (*v64 != (const llvm::Instruction *)-4096)
        --HIDWORD(v95);
      *v64 = (const llvm::Instruction *)v47;
      v64[1] = 0;
    }
    v64[1] = (const llvm::Instruction *)v47;
  }
  while (v30 != v29);
LABEL_34:
  if ((v95 & 1) == 0)
    MEMORY[0x1CAA32FB4](v96, 8);
  v31 = (uint64_t *)*((_QWORD *)v90 + 3);
  v32 = *((_DWORD *)v31 + 4);
  if (!v32)
  {
    v42 = 0;
    goto LABEL_123;
  }
  v33 = *((_QWORD *)v90 + 34);
  v34 = *v31;
  v35 = v32 - 1;
  v36 = ((v33 >> 4) ^ (v33 >> 9)) & (v32 - 1);
  v37 = *(_QWORD *)(v34 + 16 * v36);
  v38 = v36;
  if (v33 == v37)
  {
LABEL_41:
    v42 = *(llvm **)(v34 + 16 * v38 + 8);
  }
  else
  {
    v39 = 1;
    v40 = *(_QWORD *)(v34 + 16 * (((v33 >> 4) ^ (v33 >> 9)) & v35));
    LODWORD(v38) = ((v33 >> 4) ^ (v33 >> 9)) & v35;
    while (v40 != -4096)
    {
      v41 = v38 + v39++;
      v38 = v41 & v35;
      v40 = *(_QWORD *)(v34 + 16 * v38);
      if (v33 == v40)
        goto LABEL_41;
    }
    v42 = 0;
  }
  if (v33 == v37)
  {
LABEL_47:
    v45 = *(llvm::Loop **)(v34 + 16 * v36 + 8);
  }
  else
  {
    v43 = 1;
    while (v37 != -4096)
    {
      v44 = v36 + v43++;
      v36 = v44 & v35;
      v37 = *(_QWORD *)(v34 + 16 * v36);
      if (v33 == v37)
        goto LABEL_47;
    }
LABEL_123:
    v45 = 0;
  }
  return llvm::setProfileInfoAfterUnrolling(v42, (llvm::Loop *)v89, v45, (*((_DWORD *)v90 + 24) * *((_DWORD *)v90 + 22)));
}

uint64_t llvm::InnerLoopVectorizer::fixCrossIterationPHIs(uint64_t this, llvm::VPTransformState *a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v3 = this;
  v4 = **((_QWORD **)a2 + 40);
  if (v4)
    v5 = *(_BYTE *)(v4 + 8) == 1;
  else
    v5 = 0;
  if (!v5)
  {
    if (*(_DWORD *)(v4 + 80) != 1)
    {
      v4 = 0;
      goto LABEL_13;
    }
    v4 = **(_QWORD **)(v4 + 72);
    if (*(_BYTE *)(v4 + 8) != 1)
      goto LABEL_13;
  }
  do
  {
    v4 = *(_QWORD *)(v4 + 200);
    if (v4)
      v6 = *(_BYTE *)(v4 + 8) == 1;
    else
      v6 = 0;
  }
  while (v6);
LABEL_13:
  v7 = v4 + 200;
  v8 = *(_QWORD *)(v4 + 208);
  if (v8 != v4 + 200)
  {
    v9 = *(_QWORD *)(v4 + 208);
    while (1)
    {
      v10 = v9 - 24;
      if (!v9)
        v10 = 0;
      if (*(unsigned __int8 *)(v10 + 8) - 13 > 7)
        break;
      v9 = *(_QWORD *)(v9 + 8);
      if (v9 == v7)
      {
        v9 = v7;
        break;
      }
    }
    while (v8 != v9)
    {
      if (v8)
        v11 = v8 - 24;
      else
        v11 = 0;
      v12 = *(unsigned __int8 *)(v11 + 8);
      if (v8 && v12 == 20)
      {
        this = llvm::InnerLoopVectorizer::fixReduction(v3, (_QWORD *)v11, (uint64_t)a2);
      }
      else if (v8)
      {
        if (v12 == 15)
          this = llvm::InnerLoopVectorizer::fixFixedOrderRecurrence(v3, v11, a2);
      }
      v8 = *(_QWORD *)(v8 + 8);
    }
  }
  return this;
}

uint64_t llvm::InnerLoopVectorizer::fixLCSSAPHIs(uint64_t this, llvm::VPTransformState *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[12];

  if (*(_QWORD *)(*(_QWORD *)(this + 264) + 40) != *(_QWORD *)(this + 264) + 40)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(this + 264) + 48);
    v3 = v2 - 24;
    v4 = v2 ? v2 - 24 : 0;
    if (v2 && *(_BYTE *)(v4 + 16) == 83)
    {
      v6 = this;
      v7 = this + 104;
      do
      {
        v8 = *(_DWORD *)(v3 + 20);
        v9 = v8 & 0x7FFFFFF;
        if ((v8 & 0x7FFFFFF) != 0)
        {
          v10 = 32 * *(unsigned int *)(v3 + 60);
          v11 = v8 & 0x7FFFFFF;
          while (1)
          {
            v12 = v3 - 32 * v9;
            if ((v8 & 0x40000000) != 0)
              v12 = *(_QWORD *)(v3 - 8);
            if (*(_QWORD *)(v12 + v10) == *(_QWORD *)(v6 + 256))
              break;
            v10 += 8;
            if (!--v11)
              goto LABEL_14;
          }
        }
        else
        {
LABEL_14:
          if ((v8 & 0x40000000) != 0)
            v13 = *(unsigned __int8 ***)(v3 - 8);
          else
            v13 = (unsigned __int8 **)(v3 - 32 * v9);
          v14 = *v13;
          if ((*v13)[16] < 0x1Cu || sub_1C63D3774(*(_QWORD *)(v6 + 400), (uint64_t)v14, *(_QWORD *)(v6 + 88)))
            v15 = 0;
          else
            v15 = (*(_DWORD *)(v6 + 88) - 1) | ((unint64_t)(*(_DWORD *)(v6 + 92) == 1) << 32);
          v16 = 0;
          v17 = *(_QWORD *)(*(_QWORD *)(v6 + 256) + 40);
          if (v17)
            v18 = v17 - 24;
          else
            v18 = 0;
          if (*(unsigned __int8 *)(v18 + 16) - 29 >= 0xB)
            v18 = 0;
          *(_QWORD *)(v6 + 152) = *(_QWORD *)(v18 + 40);
          *(_QWORD *)(v6 + 160) = v18 + 24;
          v19 = *(unsigned __int8 **)(v18 + 48);
          *(_QWORD *)v24 = v19;
          if (v19)
          {
            llvm::MetadataTracking::track((uint64_t)v24, v19, 2);
            v16 = *(_QWORD *)v24;
          }
          sub_1C4774EF4(v7, 0, v16);
          if (*(_QWORD *)v24)
            llvm::MetadataTracking::untrack((uint64_t)v24, *(unsigned __int8 **)v24);
          if (!llvm::Loop::isLoopInvariant(*(_QWORD *)(v6 + 8), (uint64_t)v14))
          {
            v22 = *((_QWORD *)a2 + 40);
            *(_QWORD *)v24 = v14;
            v23 = sub_1C61B6040((uint64_t *)(v22 + 184), v24)[1];
            *(_DWORD *)v24 = *(_DWORD *)(v6 + 96) - 1;
            *(_QWORD *)&v24[4] = v15;
            v14 = llvm::VPTransformState::get((uint64_t)a2, v23, (unsigned int *)v24);
          }
          this = sub_1C477667C((llvm::PHINode *)v3, (uint64_t)v14, *(_QWORD *)(v6 + 256));
        }
        v20 = *(_QWORD *)(v3 + 32);
        v3 = v20 - 24;
        if (v20)
          v21 = v20 - 24;
        else
          v21 = 0;
      }
      while (v20 && *(_BYTE *)(v21 + 16) == 83);
    }
  }
  return this;
}

uint64_t llvm::InnerLoopVectorizer::sinkScalarOperands(llvm::InnerLoopVectorizer *this, llvm::Instruction *a2)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  unsigned int v40;
  BOOL v41;
  uint64_t v42;
  llvm::Instruction *v44;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  _QWORD v57[2];
  int v58;
  void *__p;
  _QWORD *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  _QWORD v64[9];

  v64[8] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)a2 + 5);
  v3 = (uint64_t *)*((_QWORD *)this + 3);
  v4 = *((_DWORD *)v3 + 4);
  if (!v4)
  {
LABEL_7:
    v11 = 0;
    goto LABEL_8;
  }
  v5 = *v3;
  v6 = v4 - 1;
  v7 = ((v2 >> 4) ^ (v2 >> 9)) & (v4 - 1);
  v8 = *(_QWORD *)(v5 + 16 * v7);
  if (v2 != v8)
  {
    v9 = 1;
    while (v8 != -4096)
    {
      v10 = v7 + v9++;
      v7 = v10 & v6;
      v8 = *(_QWORD *)(v5 + 16 * v7);
      if (v2 == v8)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v11 = *(_QWORD *)(v5 + 16 * v7 + 8);
LABEL_8:
  v12 = *((_DWORD *)a2 + 5);
  if ((v12 & 0x40000000) != 0)
  {
    v14 = (uint64_t *)*((_QWORD *)a2 - 1);
    v13 = v12 & 0x7FFFFFF;
  }
  else
  {
    v13 = v12 & 0x7FFFFFF;
    v14 = (uint64_t *)((char *)a2 - 32 * v13);
  }
  v57[0] = 0;
  v57[1] = 0;
  v58 = 0;
  v60 = 0;
  v61 = 0;
  __p = 0;
  sub_1C631F56C((uint64_t)v57, v14, &v14[4 * v13]);
  v62 = v64;
  v15 = v2 + 40;
  v63 = 0x800000000;
  do
  {
    sub_1C63D3830((uint64_t)v57, (uint64_t *)v62, (uint64_t *)v62 + v63);
    LODWORD(v63) = 0;
    v16 = __p;
    v17 = v60;
    if (__p == v60)
      break;
    v18 = 0;
    do
    {
      v19 = *(v17 - 1);
      sub_1C52CDB34((uint64_t)v57);
      v20 = *(unsigned __int8 *)(v19 + 16);
      if (v20 == 83 || v20 < 0x1C || v19 == 0)
        goto LABEL_45;
      v23 = sub_1C477672C(v11 + 56, *(_QWORD *)(v19 + 40));
      v24 = *(_QWORD *)(v11 + 64);
      v25 = v24 == *(_QWORD *)(v11 + 56) ? 76 : 72;
      if (v23 == (_QWORD *)(v24 + 8 * *(unsigned int *)(v11 + v25)))
        goto LABEL_45;
      v26 = *(unsigned __int8 *)(v19 + 16) - 33;
      if (v26 > 0x37)
        goto LABEL_29;
      if (((1 << (*(_BYTE *)(v19 + 16) - 33)) & 0x808001D0000010) != 0)
        goto LABEL_45;
      if (((1 << (*(_BYTE *)(v19 + 16) - 33)) & 0x8000000000041) == 0)
      {
        if (v26 == 27 && (*(_WORD *)(v19 + 18) & 0x301) != 0)
          goto LABEL_45;
LABEL_29:
        if ((llvm::Instruction::mayThrow((llvm::Instruction *)v19) & 1) == 0
          && llvm::Instruction::willReturn((llvm::Instruction *)v19))
        {
          if (*(_QWORD *)(v19 + 40) == v2)
          {
            v37 = *(_DWORD *)(v19 + 20);
            if ((v37 & 0x40000000) != 0)
            {
              v39 = *(uint64_t **)(v19 - 8);
              v38 = v37 & 0x7FFFFFF;
            }
            else
            {
              v38 = v37 & 0x7FFFFFF;
              v39 = (uint64_t *)(v19 - 32 * v38);
            }
            sub_1C631F56C((uint64_t)v57, v39, &v39[4 * v38]);
          }
          else
          {
            v27 = *(_QWORD *)(v19 + 8);
            if (v27)
            {
              while (1)
              {
                v28 = *(_QWORD *)(v27 + 24);
                v29 = (_QWORD *)(v28 + 40);
                if (v28 && *(_BYTE *)(v28 + 16) == 83)
                {
                  v30 = *(_DWORD *)(v28 + 20);
                  if ((v30 & 0x40000000) != 0)
                    v31 = *(_QWORD *)(v28 - 8);
                  else
                    v31 = v28 - 32 * (v30 & 0x7FFFFFF);
                  v29 = (_QWORD *)(v31
                                 + 32 * *(unsigned int *)(v28 + 60)
                                 + 8 * ((unint64_t)(v27 - v31) >> 5));
                }
                if (*v29 != v2)
                  break;
                v27 = *(_QWORD *)(v27 + 8);
                if (!v27)
                  goto LABEL_55;
              }
              v32 = v63;
              if (v63 >= (unint64_t)HIDWORD(v63))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v63 + 1, 8);
                v32 = v63;
              }
              *((_QWORD *)v62 + v32) = v19;
              LODWORD(v63) = v63 + 1;
            }
            else
            {
LABEL_55:
              v35 = v2 + 40;
              if (*(_QWORD *)(v2 + 48) != v15)
              {
                v35 = *(_QWORD *)(v2 + 48);
                while (1)
                {
                  v36 = v35 - 24;
                  if (!v35)
                    v36 = 0;
                  if (*(_BYTE *)(v36 + 16) != 83)
                    break;
                  v35 = *(_QWORD *)(v35 + 8);
                  if (v35 == v15)
                  {
                    v35 = v2 + 40;
                    goto LABEL_71;
                  }
                }
                v40 = *(unsigned __int8 *)(v35 - 8) - 38;
                v41 = v40 > 0x38;
                v42 = (1 << v40) & 0x100060000000001;
                if (!v41 && v42 != 0)
                  v35 = *(_QWORD *)(v35 + 8);
              }
LABEL_71:
              if (v35)
                v44 = (llvm::Instruction *)(v35 - 24);
              else
                v44 = 0;
              llvm::Instruction::moveBefore((llvm::Instruction *)v19, v44);
              v45 = *(_DWORD *)(v19 + 20);
              if ((v45 & 0x40000000) != 0)
              {
                v47 = *(uint64_t **)(v19 - 8);
                v46 = v45 & 0x7FFFFFF;
              }
              else
              {
                v46 = v45 & 0x7FFFFFF;
                v47 = (uint64_t *)(v19 - 32 * v46);
              }
              sub_1C631F56C((uint64_t)v57, v47, &v47[4 * v46]);
              v18 = 1;
            }
          }
        }
        goto LABEL_45;
      }
      v33 = *(_QWORD *)(v19 + 64);
      if (v33 && (*(_BYTE *)(v33 + 17) & 0x30) != 0)
        goto LABEL_29;
      v34 = *(_DWORD *)(v19 + 20);
      if ((v34 & 0x80000000) == 0
        || (v48 = v19 - 32 * (v34 & 0x7FFFFFF), v51 = *(_QWORD *)(v48 - 8), v49 = v48 - 8, (v50 = v51) == 0))
      {
LABEL_50:
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v19, 45) & 1) == 0
          && !llvm::CallBase::hasFnAttrOnCalledFunction(v19, 44))
        {
          goto LABEL_45;
        }
        goto LABEL_29;
      }
      v52 = -v50;
      while (1)
      {
        v53 = *(_DWORD *)(*(_QWORD *)(v49 + v52) + 8);
        v41 = v53 > 7;
        v54 = (1 << v53) & 0x83;
        if (v41 || v54 == 0)
          break;
        v52 += 16;
        if (!v52)
          goto LABEL_50;
      }
LABEL_45:
      v16 = __p;
      v17 = v60;
    }
    while (__p != v60);
  }
  while ((v18 & 1) != 0);
  if (v62 != v64)
  {
    free(v62);
    v16 = __p;
  }
  if (v16)
  {
    v60 = v16;
    operator delete(v16);
  }
  return MEMORY[0x1CAA32FB4](v57[0], 8);
}

uint64_t llvm::InnerLoopVectorizer::fixReduction(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t ***v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  llvm::VPValue *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned __int8 *v32;
  uint64_t *v33;
  uint64_t Opcode;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t **v39;
  llvm::Type *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  uint64_t *v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  llvm::User *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t j;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  unsigned __int8 *v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unint64_t v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  uint64_t v70;
  int v71;
  unsigned __int8 *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned __int8 *v81;
  uint64_t *SelectCmpOp;
  unsigned int v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  llvm::Value *v95;
  char *v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  BOOL v103;
  unsigned __int8 *v105;
  uint64_t v106;
  llvm::VPValue **v107;
  uint64_t LoopLatch;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  unint64_t v114;
  uint64_t ***v115;
  int32x2_t *v116;
  unint64_t v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t ****v121;
  uint64_t ***v122;
  int v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  BOOL v140;
  uint64_t k;
  llvm::PHINode *v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  llvm::ValueSymbolTable *v154;
  char v155;
  char v156;
  char v157;
  uint64_t *v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  unsigned int v165;
  llvm::VPValue *v166;
  uint64_t v167;
  unsigned __int8 *v169[2];
  char v170;
  __int16 v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t *v174;
  uint64_t ***v175;
  llvm::VPValue *v176;
  llvm::VPValue *v177;
  uint64_t v178;
  _QWORD v179[4];

  v179[2] = *MEMORY[0x1E0C80C00];
  v5 = (uint64_t *)a2[17];
  v6 = a2[19];
  v165 = *(_DWORD *)(v6 + 32);
  v173 = 6;
  v174 = 0;
  v7 = *(uint64_t ****)(v6 + 16);
  v175 = v7;
  if (v7 != (uint64_t ***)-8192)
  {
    v8 = v7 == (uint64_t ***)-4096 || v7 == 0;
    if (!v8)
    {
      v9 = *(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8;
      v174 = *(unint64_t **)v9;
      *(_QWORD *)v9 = &v173;
      v173 = v9 | 6;
      if (v174)
        *v174 = *v174 & 7 | (unint64_t)&v174;
      v7 = v175;
    }
  }
  v10 = *(_QWORD *)(v6 + 24);
  llvm::InnerLoopVectorizer::setDebugLocFromInst((unsigned __int8 *)a1, (uint64_t)v7, 0, 0);
  v11 = *(llvm::VPValue **)(a2[6] + 8);
  v163 = *(_QWORD *)llvm::VPTransformState::get((llvm::VPTransformState *)a3, v11, 0);
  llvm::InnerLoopVectorizer::clearReductionWrapFlags(a1, v6, (llvm::VPTransformState *)a3);
  v12 = (uint64_t *)(a1 + 104);
  v13 = *(_QWORD *)(a1 + 256);
  v14 = v13 + 40;
  for (i = *(_QWORD *)(v13 + 48); i != v14; i = *(_QWORD *)(i + 8))
  {
    v16 = i - 24;
    if (!i)
      v16 = 0;
    if (*(_BYTE *)(v16 + 16) != 83)
    {
      v17 = *(unsigned __int8 *)(i - 8) - 38;
      v18 = v17 > 0x38;
      v19 = (1 << v17) & 0x100060000000001;
      if (v18 || v19 == 0)
        v14 = i;
      else
        v14 = *(_QWORD *)(i + 8);
      break;
    }
  }
  v21 = 0;
  if (v14)
    v22 = v14 - 24;
  else
    v22 = 0;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(v22 + 40);
  *(_QWORD *)(a1 + 160) = v22 + 24;
  v23 = *(unsigned __int8 **)(v22 + 48);
  v169[0] = v23;
  if (v23)
  {
    llvm::MetadataTracking::track((uint64_t)v169, v23, 2);
    v21 = v169[0];
  }
  sub_1C4774EF4(a1 + 104, 0, (uint64_t)v21);
  if (v169[0])
    llvm::MetadataTracking::untrack((uint64_t)v169, v169[0]);
  llvm::InnerLoopVectorizer::setDebugLocFromInst((unsigned __int8 *)a1, v10, 0, 0);
  v24 = 0;
  v162 = *v5;
  v25 = *(_QWORD *)(a2[11] + 40);
  if (v25)
  {
    if (*(_BYTE *)(v25 + 216))
    {
      v24 = *(_QWORD *)(v25 + 40);
      if (!v24)
        goto LABEL_36;
    }
    else
    {
      v24 = *(_QWORD *)(a2[11] + 40);
    }
    if (*(_BYTE *)(v24 + 8) == 1)
    {
      do
      {
        v24 = *(_QWORD *)(v24 + 208);
        if (v24)
          v26 = *(_BYTE *)(v24 + 8) == 1;
        else
          v26 = 0;
      }
      while (v26);
    }
  }
LABEL_36:
  v158 = v5;
  v159 = a2;
  v172 = v24;
  v27 = a3;
  v160 = sub_1C6281BA0((_DWORD *)(a3 + 104), &v172)[1];
  if (*(_BYTE *)(*(_QWORD *)(a1 + 400) + 124) && !*((_BYTE *)v159 + 160) && *(_DWORD *)(a1 + 96))
  {
    v28 = 0;
    do
    {
      v29 = *((_QWORD *)llvm::VPTransformState::get((llvm::VPTransformState *)v27, v11, v28) + 1);
      if (v29)
      {
        v30 = 0;
        do
        {
          if (*(_BYTE *)(*(_QWORD *)(v29 + 24) + 16) == 85)
            v30 = *(_QWORD *)(v29 + 24);
          v29 = *(_QWORD *)(v29 + 8);
        }
        while (v29);
      }
      else
      {
        v30 = 0;
      }
      v177 = v11;
      v169[0] = 0;
      v31 = sub_1C635A4E4((uint64_t *)(a3 + 32), &v177, v169);
      v32 = v169[0];
      if (!v31)
        v32 = (unsigned __int8 *)(*(_QWORD *)(v27 + 32) + 40 * *(unsigned int *)(v27 + 48));
      *(_QWORD *)(*((_QWORD *)v32 + 1) + 8 * v28) = v30;
      if (byte_1EF8F60D8
        || (v33 = *(uint64_t **)(a1 + 56),
            Opcode = llvm::RecurrenceDescriptor::getOpcode(*(_DWORD *)(v6 + 32)),
            v35 = *v33,
            v27 = a3,
            (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v35 + 1144))(v35, Opcode, v162, 0)))
      {
        v36 = llvm::VPTransformState::get((llvm::VPTransformState *)v27, (llvm::VPValue *)(v159 + 12), v28);
        sub_1C5276870((uint64_t)v36, v160, v30);
      }
      ++v28;
    }
    while (v28 < *(unsigned int *)(a1 + 96));
  }
  v37 = *(_DWORD *)(a1 + 88);
  v166 = (llvm::VPValue *)v6;
  v167 = a1;
  if (*(_DWORD *)(a1 + 92) == 1)
  {
    v38 = v159;
    if (!v37)
      goto LABEL_104;
  }
  else
  {
    v38 = v159;
    if (v37 < 2)
      goto LABEL_104;
  }
  v39 = *(uint64_t ***)(v6 + 48);
  if ((uint64_t **)v162 != v39)
  {
    v40 = *(llvm::Type **)(a1 + 88);
    if ((unint64_t)v40 >> 32 == 1)
      llvm::ScalableVectorType::get(v39, v40);
    else
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v39, v40);
    v42 = v41;
    v43 = 0;
    v44 = *(_QWORD *)(v160 + 40);
    if (v44)
      v45 = v44 - 24;
    else
      v45 = 0;
    if (*(unsigned __int8 *)(v45 + 16) - 29 >= 0xB)
      v45 = 0;
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(v45 + 40);
    *(_QWORD *)(a1 + 160) = v45 + 24;
    v46 = *(unsigned __int8 **)(v45 + 48);
    v169[0] = v46;
    if (v46)
    {
      llvm::MetadataTracking::track((uint64_t)v169, v46, 2);
      v43 = v169[0];
    }
    sub_1C4774EF4(a1 + 104, 0, (uint64_t)v43);
    if (v169[0])
      llvm::MetadataTracking::untrack((uint64_t)v169, v169[0]);
    v47 = *(unsigned int *)(a1 + 96);
    v177 = (llvm::VPValue *)v179;
    v178 = 0x200000000;
    sub_1C4848C0C((unsigned int *)&v177, v47, 0);
    if (*(_DWORD *)(a1 + 96))
    {
      v48 = 0;
      do
      {
        v49 = llvm::VPTransformState::get((llvm::VPTransformState *)v27, v11, v48);
        *((_QWORD *)v177 + v48) = v49;
        v50 = (unsigned __int8 *)*((_QWORD *)v177 + v48);
        v171 = 257;
        v51 = sub_1C4773E38((uint64_t *)(a1 + 104), 38, v50, v42, (uint64_t)v169);
        if (*(_BYTE *)(v6 + 56))
        {
          v171 = 257;
          v52 = (uint64_t *)(a1 + 104);
          v53 = 40;
        }
        else
        {
          v171 = 257;
          v52 = (uint64_t *)(a1 + 104);
          v53 = 39;
        }
        v54 = sub_1C4773E38(v52, v53, v51, v163, (uint64_t)v169);
        v55 = *(_QWORD *)(*((_QWORD *)v177 + v48) + 8);
        while (v55)
        {
          v56 = *(llvm::User **)(v55 + 24);
          v55 = *(_QWORD *)(v55 + 8);
          if (v56 != (llvm::User *)v51)
          {
            llvm::User::replaceUsesOfWith(v56, *((llvm::Value **)v177 + v48), (llvm::Value *)v54);
            *((_QWORD *)v177 + v48) = v54;
          }
        }
        ++v48;
        v27 = a3;
      }
      while (v48 < *(unsigned int *)(a1 + 96));
    }
    v57 = *(_QWORD *)(a1 + 256);
    v58 = v57 + 40;
    for (j = *(_QWORD *)(v57 + 48); j != v58; j = *(_QWORD *)(j + 8))
    {
      v60 = j - 24;
      if (!j)
        v60 = 0;
      if (*(_BYTE *)(v60 + 16) != 83)
      {
        v61 = *(unsigned __int8 *)(j - 8) - 38;
        v18 = v61 > 0x38;
        v62 = (1 << v61) & 0x100060000000001;
        if (v18 || v62 == 0)
          v58 = j;
        else
          v58 = *(_QWORD *)(j + 8);
        break;
      }
    }
    v64 = 0;
    if (v58)
      v65 = v58 - 24;
    else
      v65 = 0;
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(v65 + 40);
    *(_QWORD *)(a1 + 160) = v65 + 24;
    v66 = *(unsigned __int8 **)(v65 + 48);
    v169[0] = v66;
    if (v66)
    {
      llvm::MetadataTracking::track((uint64_t)v169, v66, 2);
      v64 = v169[0];
    }
    sub_1C4774EF4(a1 + 104, 0, (uint64_t)v64);
    if (v169[0])
      llvm::MetadataTracking::untrack((uint64_t)v169, v169[0]);
    if (*(_DWORD *)(a1 + 96))
    {
      v67 = 0;
      do
      {
        v68 = (unsigned __int8 *)*((_QWORD *)v177 + v67);
        v171 = 257;
        v69 = sub_1C4773E38(v12, 38, v68, v42, (uint64_t)v169);
        *((_QWORD *)v177 + v67) = v69;
        v70 = *((_QWORD *)v177 + v67);
        v176 = v11;
        v169[0] = 0;
        v71 = sub_1C635A4E4((uint64_t *)(a3 + 32), &v176, v169);
        v72 = v169[0];
        if (!v71)
          v72 = (unsigned __int8 *)(*(_QWORD *)(a3 + 32) + 40 * *(unsigned int *)(a3 + 48));
        *(_QWORD *)(*((_QWORD *)v72 + 1) + 8 * v67++) = v70;
      }
      while (v67 < *(unsigned int *)(a1 + 96));
    }
    if (v177 != (llvm::VPValue *)v179)
      free(v177);
    v27 = a3;
    v38 = v159;
  }
LABEL_104:
  v73 = (uint64_t *)llvm::VPTransformState::get((llvm::VPTransformState *)v27, v11, 0);
  v74 = llvm::RecurrenceDescriptor::getOpcode(v165);
  v75 = *(_QWORD *)(a1 + 256);
  v76 = *(_QWORD *)(v75 + 40);
  if (v76 == v75 + 40)
  {
    v77 = 0;
  }
  else
  {
    if (v76)
      v78 = v76 - 24;
    else
      v78 = 0;
    if (*(unsigned __int8 *)(v78 + 16) - 29 >= 0xB)
      v77 = 0;
    else
      v77 = v78;
  }
  v79 = (uint64_t)v158;
  llvm::InnerLoopVectorizer::setDebugLocFromInst((unsigned __int8 *)a1, v77, 0, 0);
  if (*((_BYTE *)v38 + 161))
  {
    v73 = (uint64_t *)llvm::VPTransformState::get((llvm::VPTransformState *)v27, v11, *(_DWORD *)(a1 + 96) - 1);
  }
  else
  {
    v164 = *(_DWORD *)(a1 + 200);
    v161 = *(_QWORD *)(a1 + 192);
    v156 = *(_BYTE *)(a1 + 205);
    v157 = *(_BYTE *)(a1 + 204);
    v155 = *(_BYTE *)(a1 + 206);
    *(_DWORD *)(a1 + 200) = *((_DWORD *)v166 + 9);
    if (*(_DWORD *)(a1 + 96) >= 2u)
    {
      v80 = 1;
      do
      {
        v81 = llvm::VPTransformState::get((llvm::VPTransformState *)a3, v11, v80);
        if ((v74 - 55) > 0xFFFFFFFD)
        {
          if (v165 - 15 > 1)
            llvm::createMinMaxOp((uint64_t)v12, v165);
          else
            SelectCmpOp = (uint64_t *)llvm::createSelectCmpOp(v12, v175, v165, v73, (uint64_t)v81);
        }
        else
        {
          v169[0] = "bin.rdx";
          v171 = 259;
          SelectCmpOp = (uint64_t *)sub_1C4773860((uint64_t)v12, v74, v81, (uint64_t)v73, (uint64_t)v169, 0);
        }
        v73 = SelectCmpOp;
        ++v80;
      }
      while (v80 < *(_DWORD *)(a1 + 96));
    }
    *(_DWORD *)(a1 + 200) = v164;
    v38 = v159;
    *(_QWORD *)(a1 + 192) = v161;
    *(_BYTE *)(a1 + 204) = v157;
    *(_BYTE *)(a1 + 205) = v156;
    *(_BYTE *)(a1 + 206) = v155;
    v79 = (uint64_t)v158;
  }
  v83 = *(_DWORD *)(a1 + 88);
  if (*(_DWORD *)(a1 + 92) == 1)
  {
    if (!v83)
      goto LABEL_134;
  }
  else if (v83 < 2)
  {
    goto LABEL_134;
  }
  if (!*((_BYTE *)v38 + 160))
  {
    llvm::createTargetReduction((uint64_t)v12, *(_QWORD *)(a1 + 56), (uint64_t)v166, (uint64_t)v73, (uint64_t *)v79);
    v73 = v84;
    if (v162 != *((_QWORD *)v166 + 6))
    {
      if (*((_BYTE *)v166 + 56))
      {
        v171 = 257;
        v85 = (uint64_t *)(a1 + 104);
        v86 = 40;
      }
      else
      {
        v171 = 257;
        v85 = (uint64_t *)(a1 + 104);
        v86 = 39;
      }
      v73 = (uint64_t *)sub_1C4773E38(v85, v86, (unsigned __int8 *)v73, v162, (uint64_t)v169);
    }
  }
LABEL_134:
  v87 = 0;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v38[6] + 40) + 16) == 83)
    v88 = *(_QWORD *)(*(_QWORD *)v38[6] + 40);
  else
    v88 = 0;
  v169[0] = "bc.merge.rdx";
  v171 = 259;
  v89 = *(_QWORD *)(a1 + 248);
  v90 = *(_QWORD *)(v89 + 40);
  if (v90 != v89 + 40)
  {
    v91 = v90 - 24;
    if (v90)
      v92 = v90 - 24;
    else
      v92 = 0;
    if (*(unsigned __int8 *)(v92 + 16) - 29 >= 0xB)
      v87 = 0;
    else
      v87 = v91;
  }
  v93 = operator new(0x48uLL);
  v94 = v93;
  v93[1] = v162;
  v95 = (llvm::Value *)(v93 + 1);
  *v93 = 0;
  v93[2] = 0;
  v93[3] = 0x4000000000000053;
  *((_OWORD *)v93 + 2) = 0u;
  v96 = (char *)(v93 + 4);
  *((_OWORD *)v93 + 3) = 0u;
  *((_DWORD *)v93 + 16) = 0;
  if (v87)
  {
    v150 = *(_QWORD *)(v87 + 40);
    v151 = (uint64_t *)(v87 + 24);
    v93[6] = v150;
    *(_WORD *)(v150 + 18) &= ~0x8000u;
    if ((*((_BYTE *)v93 + 31) & 0x10) != 0)
    {
      v153 = *(_QWORD *)(v150 + 56);
      if (v153)
      {
        v154 = *(llvm::ValueSymbolTable **)(v153 + 104);
        if (v154)
          llvm::ValueSymbolTable::reinsertValue(v154, v95);
      }
    }
    v152 = *v151;
    v94[4] = *v151;
    v94[5] = v151;
    *(_QWORD *)(v152 + 8) = v96;
    *v151 = (uint64_t)v96;
  }
  *((_DWORD *)v94 + 17) = 2;
  llvm::Value::setName((uint64_t ***)v95, (uint64_t)v169);
  v97 = *((unsigned int *)v94 + 17);
  v98 = operator new(40 * v97);
  *v94 = v98;
  if ((_DWORD)v97)
  {
    v99 = &v98[4 * v97];
    do
    {
      *v98 = 0;
      v98[1] = 0;
      v98[2] = 0;
      v98[3] = v95;
      v98 += 4;
    }
    while (v98 != v99);
  }
  v100 = *(_QWORD *)(*(_QWORD *)(v167 + 248) + 8);
  if (v100)
  {
    while (1)
    {
      v101 = *(_QWORD *)(v100 + 24);
      v102 = *(unsigned __int8 *)(v101 + 16);
      v103 = v101 && v102 >= 0x1C;
      if (v103 && v102 - 29 < 0xB)
        break;
      v100 = *(_QWORD *)(v100 + 8);
      if (!v100)
        goto LABEL_158;
    }
LABEL_183:
    v125 = *(_QWORD *)(v101 + 40);
    v126 = (uint64_t)v73;
    if (v125 != *(_QWORD *)(v167 + 256))
    {
      v127 = (uint64_t *)&v175;
      if (v88)
      {
        v128 = *(_DWORD *)(v88 + 20);
        if ((v128 & 0x40000000) != 0)
        {
          v130 = *(_QWORD *)(v88 - 8);
          v129 = v128 & 0x7FFFFFF;
        }
        else
        {
          v129 = v128 & 0x7FFFFFF;
          v130 = v88 - 32 * v129;
        }
        v131 = *(unsigned int *)(v88 + 60);
        v132 = (_QWORD *)(v130 + 32 * v131);
        if (v129)
        {
          v133 = 8 * v129;
          v134 = v132;
          while (*v134 != v125)
          {
            ++v134;
            v133 -= 8;
            if (!v133)
            {
              v134 = &v132[v129];
              break;
            }
          }
        }
        else
        {
          v134 = v132;
        }
        v8 = v129 == v134 - v132;
        v127 = (uint64_t *)&v175;
        if (!v8)
        {
          if ((_DWORD)v129)
          {
            v135 = 0;
            v136 = 32 * v131;
            while (1)
            {
              v137 = v88 - 32 * v129;
              if ((v128 & 0x40000000) != 0)
                v137 = *(_QWORD *)(v88 - 8);
              if (*(_QWORD *)(v137 + v136 + 8 * v135) == v125)
                break;
              if (v129 == ++v135)
                goto LABEL_201;
            }
          }
          else
          {
LABEL_201:
            LODWORD(v135) = -1;
          }
          if ((v128 & 0x40000000) != 0)
            v138 = *(_QWORD *)(v88 - 8);
          else
            v138 = v88 - 32 * v129;
          v127 = (uint64_t *)(v138 + 32 * v135);
        }
      }
      v126 = *v127;
    }
    sub_1C477667C(v95, v126, v125);
    while (1)
    {
      v100 = *(_QWORD *)(v100 + 8);
      if (!v100)
        break;
      v101 = *(_QWORD *)(v100 + 24);
      v139 = *(unsigned __int8 *)(v101 + 16);
      if (v101)
        v140 = v139 >= 0x1C;
      else
        v140 = 0;
      if (v140 && v139 - 29 < 0xB)
        goto LABEL_183;
    }
  }
LABEL_158:
  v177 = v166;
  LODWORD(v178) = 0;
  sub_1C6281EE8((uint64_t)v169, v167 + 552, (uint64_t *)&v177, &v178);
  if (v170)
  {
    v105 = v169[0];
    v106 = *(unsigned int *)(v167 + 632);
    if (v106 >= *(_DWORD *)(v167 + 636))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v167 + 624, v167 + 640, v106 + 1, 16);
      LODWORD(v106) = *(_DWORD *)(v167 + 632);
    }
    v107 = (llvm::VPValue **)(*(_QWORD *)(v167 + 624) + 16 * v106);
    *v107 = v166;
    v107[1] = v95;
    LODWORD(v107) = *(_DWORD *)(v167 + 632);
    *(_DWORD *)(v167 + 632) = (_DWORD)v107 + 1;
    *((_DWORD *)v105 + 2) = (_DWORD)v107;
  }
  if (!sub_1C63D2468(*(_QWORD *)(v167 + 400), *(_QWORD *)(v167 + 88))
    && *(_QWORD *)(*(_QWORD *)(v167 + 264) + 40) != *(_QWORD *)(v167 + 264) + 40)
  {
    for (k = *(_QWORD *)(*(_QWORD *)(v167 + 264) + 48); ; k = *((_QWORD *)v143 + 4))
    {
      v143 = (llvm::PHINode *)(k - 24);
      if (k)
        v144 = k - 24;
      else
        v144 = 0;
      if (!k || *(_BYTE *)(v144 + 16) != 83)
        break;
      v145 = *(_DWORD *)(k - 4);
      if ((v145 & 0x40000000) != 0)
      {
        v147 = *(char **)(k - 32);
        v146 = v145 & 0x7FFFFFF;
        if (!v146)
        {
LABEL_231:
          v149 = v147;
          goto LABEL_232;
        }
      }
      else
      {
        v146 = v145 & 0x7FFFFFF;
        v147 = (char *)v143 - 32 * v146;
        if (!v146)
          goto LABEL_231;
      }
      v148 = 32 * v146;
      v149 = v147;
      while (*(_QWORD *)v149 != v10)
      {
        v149 += 32;
        v148 -= 32;
        if (!v148)
        {
          v149 = &v147[32 * v146];
          break;
        }
      }
LABEL_232:
      if (v146 != (v149 - v147) >> 5)
        sub_1C477667C(v143, (uint64_t)v73, *(_QWORD *)(v167 + 256));
    }
  }
  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*(_QWORD *)(v167 + 8));
  v109 = *(_DWORD *)(v79 + 20);
  v110 = v109 & 0x7FFFFFF;
  if ((v109 & 0x7FFFFFF) != 0)
  {
    v111 = 0;
    while (1)
    {
      v112 = v79 - 32 * v110;
      if ((v109 & 0x40000000) != 0)
        v112 = *(_QWORD *)(v79 - 8);
      if (*(_QWORD *)(v112 + 32 * *(unsigned int *)(v79 + 60) + 8 * v111) == LoopLatch)
        break;
      if (v110 == ++v111)
        goto LABEL_169;
    }
  }
  else
  {
LABEL_169:
    LODWORD(v111) = -1;
  }
  sub_1C6125834(v79, v111 == 0, (uint64_t)v95);
  result = sub_1C6125834(v79, v111, v10);
  if (v175 != (uint64_t ***)-8192 && v175 != (uint64_t ***)-4096 && v175)
  {
    v114 = v173 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v173 & 0xFFFFFFFFFFFFFFF8) = v174;
    if (v174)
    {
      *v174 = *v174 & 7 | v114;
    }
    else
    {
      v115 = v175;
      v116 = (int32x2_t *)***v175;
      v117 = (unint64_t)v116[303];
      if (v117 <= v114)
      {
        v118 = v116[305].u32[0];
        if (v117 + 16 * v118 > v114)
        {
          v119 = v118 - 1;
          LODWORD(v120) = v119 & ((v175 >> 4) ^ (v175 >> 9));
          v121 = (uint64_t ****)(v117 + 16 * v120);
          v122 = *v121;
          if (v175 == *v121)
          {
LABEL_181:
            *v121 = (uint64_t ***)-8192;
            v116[304] = vadd_s32(v116[304], (int32x2_t)0x1FFFFFFFFLL);
            v115 = v175;
          }
          else
          {
            v123 = 1;
            while (v122 != (uint64_t ***)-4096)
            {
              v124 = v120 + v123++;
              v120 = v124 & v119;
              v122 = *(uint64_t ****)(v117 + 16 * v120);
              if (v175 == v122)
              {
                v121 = (uint64_t ****)(v117 + 16 * v120);
                goto LABEL_181;
              }
            }
          }
          *((_BYTE *)v115 + 17) &= ~1u;
        }
      }
    }
  }
  return result;
}

uint64_t llvm::InnerLoopVectorizer::fixFixedOrderRecurrence(uint64_t a1, uint64_t a2, llvm::VPTransformState *this)
{
  llvm::VPValue *v6;
  unsigned __int8 *v7;
  const llvm::APInt *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  llvm::ConstantInt *v12;
  unsigned int v13;
  char v14;
  llvm::ValueHandleBase *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  llvm::Value **RuntimeVF;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  const llvm::APInt *v27;
  llvm::Value **v28;
  llvm::ConstantInt *v29;
  unsigned int v30;
  char v31;
  llvm::ValueHandleBase *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t ***v38;
  uint64_t **v39;
  llvm::PHINode *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  BOOL v51;
  uint64_t result;
  uint64_t i;
  llvm::PHINode *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t ****v59;
  uint64_t v60;
  uint64_t ****v61;
  char *v62;
  unsigned int v63;
  __int16 v64;

  v6 = *(llvm::VPValue **)(*(_QWORD *)(a2 + 48) + 8);
  v7 = llvm::VPTransformState::get(this, v6, *(_DWORD *)(a1 + 96) - 1);
  v9 = (uint64_t)v7;
  v10 = **(_QWORD **)(a1 + 168);
  v11 = *(_DWORD *)(a1 + 88);
  if (*(_DWORD *)(a1 + 92) == 1)
  {
    if (v11)
      goto LABEL_3;
LABEL_22:
    v22 = v7;
    goto LABEL_23;
  }
  if (v11 < 2)
    goto LABEL_22;
LABEL_3:
  v12 = *(llvm::ConstantInt **)(v10 + 1960);
  v13 = *(_DWORD *)(v10 + 1968);
  v63 = v13 >> 8;
  if (v13 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v62, 1, 0);
  }
  else
  {
    if (v13 <= 0xFF)
      v14 = 0;
    else
      v14 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v13);
    v62 = (char *)(v14 & 1);
  }
  v15 = llvm::ConstantInt::get(v12, (llvm::LLVMContext *)&v62, v8);
  if (v63 >= 0x41 && v62)
    MEMORY[0x1CAA32F9C](v62, 0x1000C8000313F17);
  v16 = 0;
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 256) + 40);
  if (v17)
    v18 = v17 - 24;
  else
    v18 = 0;
  if (*(unsigned __int8 *)(v18 + 16) - 29 >= 0xB)
    v18 = 0;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(v18 + 40);
  *(_QWORD *)(a1 + 160) = v18 + 24;
  v19 = *(unsigned __int8 **)(v18 + 48);
  v62 = (char *)v19;
  if (v19)
  {
    llvm::MetadataTracking::track((uint64_t)&v62, v19, 2);
    v16 = (unsigned __int8 *)v62;
  }
  sub_1C4774EF4(a1 + 104, 0, (uint64_t)v16);
  if (v62)
    llvm::MetadataTracking::untrack((uint64_t)&v62, (unsigned __int8 *)v62);
  RuntimeVF = llvm::getRuntimeVF((uint64_t *)(a1 + 104), (llvm::ConstantInt *)(v10 + 1960), *(_QWORD *)(a1 + 88));
  v64 = 257;
  v21 = sub_1C47733F8(a1 + 104, (uint64_t)RuntimeVF, (uint64_t)v15, (uint64_t)&v62, 0, 0);
  v62 = "vector.recur.extract";
  v64 = 259;
  v22 = sub_1C4772EE0((uint64_t *)(a1 + 104), v9, v21, (uint64_t)&v62);
  v23 = *(_DWORD *)(a1 + 88);
  if (*(_DWORD *)(a1 + 92) == 1)
  {
    if (v23)
      goto LABEL_27;
  }
  else if (v23 >= 2)
  {
LABEL_27:
    v28 = llvm::getRuntimeVF((uint64_t *)(a1 + 104), (llvm::ConstantInt *)(v10 + 1960), *(_QWORD *)(a1 + 88));
    v29 = *(llvm::ConstantInt **)(v10 + 1960);
    v30 = *(_DWORD *)(v10 + 1968);
    v63 = v30 >> 8;
    if (v30 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v62, 2, 0);
    }
    else
    {
      if (v30 <= 0xFF)
        v31 = 0;
      else
        v31 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v30);
      v62 = (char *)(v31 & 2);
    }
    v32 = llvm::ConstantInt::get(v29, (llvm::LLVMContext *)&v62, v27);
    if (v63 >= 0x41 && v62)
      MEMORY[0x1CAA32F9C](v62, 0x1000C8000313F17);
    v64 = 257;
    v33 = sub_1C47733F8(a1 + 104, (uint64_t)v28, (uint64_t)v32, (uint64_t)&v62, 0, 0);
    v62 = "vector.recur.extract.for.phi";
    v64 = 259;
    v25 = sub_1C4772EE0((uint64_t *)(a1 + 104), v9, v33, (uint64_t)&v62);
    goto LABEL_34;
  }
LABEL_23:
  v24 = *(_DWORD *)(a1 + 96);
  if (v24 < 2)
  {
    v26 = 0;
    goto LABEL_35;
  }
  v25 = llvm::VPTransformState::get(this, v6, v24 - 2);
LABEL_34:
  v26 = (uint64_t)v25;
LABEL_35:
  v34 = 0;
  v35 = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 48);
  if (v35)
    v36 = v35 - 24;
  else
    v36 = 0;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(v36 + 40);
  *(_QWORD *)(a1 + 160) = v36 + 24;
  v37 = *(unsigned __int8 **)(v36 + 48);
  v62 = (char *)v37;
  if (v37)
  {
    llvm::MetadataTracking::track((uint64_t)&v62, v37, 2);
    v34 = (unsigned __int8 *)v62;
  }
  sub_1C4774EF4(a1 + 104, 0, (uint64_t)v34);
  if (v62)
    llvm::MetadataTracking::untrack((uint64_t)&v62, (unsigned __int8 *)v62);
  v38 = *(uint64_t ****)(a2 + 136);
  v39 = *v38;
  v62 = "scalar.recur.init";
  v64 = 259;
  v40 = (llvm::PHINode *)sub_1C4867E94(a1 + 104, (uint64_t)v39, 2, (uint64_t)&v62);
  v41 = *(_QWORD *)(a1 + 248);
  v42 = *(_QWORD *)(v41 + 8);
  if (v42)
  {
    v43 = *(_QWORD *)(**(_QWORD **)(a2 + 48) + 40);
    while (1)
    {
      v44 = *(_QWORD *)(v42 + 24);
      v45 = *(unsigned __int8 *)(v44 + 16);
      v46 = v44 && v45 >= 0x1C;
      if (v46 && v45 - 29 < 0xB)
        break;
      v42 = *(_QWORD *)(v42 + 8);
      if (!v42)
        goto LABEL_68;
    }
LABEL_54:
    v48 = *(_QWORD *)(v44 + 40);
    if (v48 == *(_QWORD *)(a1 + 256))
      v49 = (uint64_t)v22;
    else
      v49 = v43;
    sub_1C477667C(v40, v49, v48);
    while (1)
    {
      v42 = *(_QWORD *)(v42 + 8);
      if (!v42)
        break;
      v44 = *(_QWORD *)(v42 + 24);
      v50 = *(unsigned __int8 *)(v44 + 16);
      if (v44)
        v51 = v50 >= 0x1C;
      else
        v51 = 0;
      if (v51 && v50 - 29 < 0xB)
        goto LABEL_54;
    }
    v41 = *(_QWORD *)(a1 + 248);
  }
LABEL_68:
  sub_1C5276870((uint64_t)v38, v41, (uint64_t)v40);
  v62 = "scalar.recur";
  v64 = 259;
  llvm::Value::setName(v38, (uint64_t)&v62);
  result = sub_1C63D2468(*(_QWORD *)(a1 + 400), *(_QWORD *)(a1 + 88));
  if ((result & 1) == 0 && *(_QWORD *)(*(_QWORD *)(a1 + 264) + 40) != *(_QWORD *)(a1 + 264) + 40)
  {
    for (i = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 48); ; i = *((_QWORD *)v55 + 4))
    {
      v55 = (llvm::PHINode *)(i - 24);
      if (i)
        v56 = i - 24;
      else
        v56 = 0;
      if (!i || *(_BYTE *)(v56 + 16) != 83)
        return result;
      v57 = *(_DWORD *)(i - 4);
      if ((v57 & 0x40000000) != 0)
      {
        v59 = *(uint64_t *****)(i - 32);
        v58 = v57 & 0x7FFFFFF;
        if (!v58)
        {
LABEL_84:
          v61 = v59;
          goto LABEL_85;
        }
      }
      else
      {
        v58 = v57 & 0x7FFFFFF;
        v59 = (uint64_t ****)((char *)v55 - 32 * v58);
        if (!v58)
          goto LABEL_84;
      }
      v60 = 32 * v58;
      v61 = v59;
      while (*v61 != v38)
      {
        v61 += 4;
        v60 -= 32;
        if (!v60)
        {
          v61 = &v59[4 * v58];
          break;
        }
      }
LABEL_85:
      if (v58 != ((char *)v61 - (char *)v59) >> 5)
        result = sub_1C477667C(v55, v26, *(_QWORD *)(a1 + 256));
    }
  }
  return result;
}

uint64_t llvm::InnerLoopVectorizer::useOrderedReductions(uint64_t a1, uint64_t a2)
{
  return (*(_BYTE *)(a2 + 57) != 0) & ~llvm::LoopVectorizeHints::allowReordering(*(llvm::LoopVectorizeHints **)(*(_QWORD *)(a1 + 400) + 664));
}

void llvm::LoopVectorizationCostModel::collectLoopScalars(uint64_t a1, unint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t *v14;
  llvm::SmallPtrSetImplBase *v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t LoopLatch;
  _DWORD *v20;
  uint64_t *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  unint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  int j;
  uint64_t v56;
  int v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t *v62;
  uint64_t k;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  _OWORD *v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  llvm::SmallPtrSetImplBase *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  _OWORD *v99;
  int v100;
  unsigned int v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  _OWORD *v113;
  int v114;
  unsigned int v115;
  uint64_t v116;
  int v117;
  unsigned int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  _QWORD v122[5];
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  int v129;
  _BYTE v130[64];
  unint64_t v131;
  uint64_t v132;
  uint64_t v133[2];
  char v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  void *v140;
  uint64_t v141;
  _BYTE v142[64];
  uint64_t v143;
  _OWORD v144[4];
  uint64_t *v145;
  uint64_t v146;
  _QWORD v147[10];

  v147[8] = *MEMORY[0x1E0C80C00];
  v131 = a2;
  if (HIDWORD(a2) != 1)
  {
    v143 = 1;
    v144[0] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v144[1] = v144[0];
    v144[2] = v144[0];
    v144[3] = v144[0];
    v145 = v147;
    v146 = 0x800000000;
    v135 = 1;
    v136 = v144[0];
    v137 = v144[0];
    v138 = v144[0];
    v139 = v144[0];
    v140 = v142;
    v141 = 0x800000000;
    v126 = v130;
    v127 = v130;
    v128 = 8;
    v129 = 0;
    LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*(_QWORD *)(a1 + 584));
    v124 = a1;
    v125 = (uint64_t *)&v131;
    v122[4] = &v126;
    v123 = a1;
    v122[0] = &v123;
    v122[1] = &v143;
    v122[2] = &v124;
    v122[3] = &v135;
    v20 = sub_1C63DCD94(a1 + 152, (int *)&v131);
    v21 = (uint64_t *)*((_QWORD *)v20 + 2);
    if (v21 == *((uint64_t **)v20 + 1))
      v22 = v20 + 7;
    else
      v22 = v20 + 6;
    v23 = *v22;
    v24 = &v21[v23];
    if ((_DWORD)v23)
    {
      v25 = 8 * v23;
      do
      {
        if ((unint64_t)*v21 < 0xFFFFFFFFFFFFFFFELL)
          goto LABEL_30;
        ++v21;
        v25 -= 8;
      }
      while (v25);
      v21 = v24;
    }
LABEL_30:
    v26 = sub_1C63DCD94(a1 + 152, (int *)&v131);
    v27 = *((_QWORD *)v26 + 2);
    if (v27 == *((_QWORD *)v26 + 1))
      v28 = v26 + 7;
    else
      v28 = v26 + 6;
    v29 = (uint64_t *)(v27 + 8 * *v28);
    while (v21 != v29)
    {
      v132 = *v21;
      sub_1C63DCFA4((uint64_t)v133, (uint64_t)&v143, &v132);
      if (v134)
      {
        v47 = *v21;
        v48 = v146;
        if (v146 >= (unint64_t)HIDWORD(v146))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, (uint64_t)v147, v146 + 1, 8);
          v48 = v146;
        }
        v145[v48] = v47;
        LODWORD(v146) = v146 + 1;
      }
      v49 = (unint64_t *)(v21 + 1);
      while (v49 != (unint64_t *)v24)
      {
        v50 = *v49++;
        if (v50 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v21 = (uint64_t *)(v49 - 1);
          goto LABEL_75;
        }
      }
      v21 = v24;
LABEL_75:
      ;
    }
    v30 = *(_QWORD *)(a1 + 584);
    v31 = *(_QWORD *)(v30 + 32);
    v32 = *(_QWORD *)(v30 + 40);
    if (v32 == v31)
      goto LABEL_49;
    do
    {
      v33 = *(_QWORD *)v31 + 40;
      for (i = *(_QWORD *)(*(_QWORD *)v31 + 48); i != v33; i = *(_QWORD *)(i + 8))
      {
        if (i)
          v35 = i - 24;
        else
          v35 = 0;
        v36 = *(unsigned __int8 *)(v35 + 16);
        if (i && v36 == 60)
        {
          v37 = -1;
LABEL_46:
          sub_1C60704D8((uint64_t)v122, v35, *(_QWORD *)(v35 + 32 * v37));
          continue;
        }
        if (i && v36 == 61)
        {
          sub_1C60704D8((uint64_t)v122, v35, *(_QWORD *)(v35 - 32));
          v37 = -2;
          goto LABEL_46;
        }
      }
      v31 += 8;
    }
    while (v31 != v32);
LABEL_49:
    if ((_DWORD)v141)
    {
      v38 = (uint64_t *)v140;
      v39 = 8 * v141;
      do
      {
        v133[0] = *v38;
        v40 = (char *)sub_1C477672C((uint64_t)&v126, v133[0]);
        if (v127 == v126)
          v41 = (uint64_t *)((char *)&v128 + 4);
        else
          v41 = &v128;
        if (v40 == &v127[8 * *(unsigned int *)v41])
          sub_1C4E7C77C((uint64_t)&v143, v133);
        ++v38;
        v39 -= 8;
      }
      while (v39);
    }
    v133[0] = 0;
    if (sub_1C63DA57C(*(_QWORD *)(a1 + 200), *(_DWORD *)(a1 + 216), v131, SHIDWORD(v131), v133)
      && v133[0] != *(_QWORD *)(a1 + 200) + 72 * *(unsigned int *)(a1 + 216))
    {
      v42 = *(_QWORD *)(v133[0] + 16);
      v43 = 24;
      if (v42 == *(_QWORD *)(v133[0] + 8))
        v43 = 28;
      v44 = *(unsigned int *)(v133[0] + v43);
      if ((_DWORD)v44)
      {
        v45 = 8 * v44;
        v46 = *(uint64_t **)(v133[0] + 16);
        while ((unint64_t)*v46 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v46;
          v45 -= 8;
          if (!v45)
            goto LABEL_83;
        }
      }
      else
      {
        v46 = *(uint64_t **)(v133[0] + 16);
      }
      v51 = (_QWORD *)(v42 + 8 * v44);
      if (v46 != v51)
      {
        while (1)
        {
          v133[0] = 0;
          v53 = *v46;
          v52 = (unint64_t *)(v46 + 1);
          v133[0] = v53;
          sub_1C4E7C77C((uint64_t)&v143, v133);
          do
          {
            if (v52 == v51)
              goto LABEL_83;
            v54 = *v52++;
          }
          while (v54 > 0xFFFFFFFFFFFFFFFDLL);
          v46 = (uint64_t *)(v52 - 1);
        }
      }
    }
LABEL_83:
    if ((_DWORD)v146)
    {
      for (j = 0; (_DWORD)v146 != j; ++j)
      {
        v56 = v145[j];
        v57 = *(_DWORD *)(v56 + 20);
        if ((v57 & 0x40000000) != 0)
          v58 = *(uint64_t **)(v56 - 8);
        else
          v58 = (uint64_t *)(v56 - 32 * (v57 & 0x7FFFFFF));
        v59 = *v58;
        v60 = *(unsigned __int8 *)(*v58 + 16);
        if ((v60 == 62 || v60 == 77 && *(_BYTE *)(*(_QWORD *)v59 + 8) == 15)
          && !llvm::Loop::isLoopInvariant(*(_QWORD *)(v123 + 584), v59))
        {
          v133[0] = 0;
          v61 = *(_DWORD *)(v56 + 20);
          if ((v61 & 0x40000000) != 0)
            v62 = *(uint64_t **)(v56 - 8);
          else
            v62 = (uint64_t *)(v56 - 32 * (v61 & 0x7FFFFFF));
          v133[0] = *v62;
          for (k = *(_QWORD *)(v133[0] + 8); k; k = *(_QWORD *)(k + 8))
          {
            v64 = *(_QWORD *)(k + 24);
            v65 = *(_QWORD *)(a1 + 584);
            v66 = sub_1C477672C(v65 + 56, *(_QWORD *)(v64 + 40));
            v67 = *(_QWORD *)(v65 + 64);
            if (v67 == *(_QWORD *)(v65 + 56))
              v68 = 76;
            else
              v68 = 72;
            if (v66 != (_QWORD *)(v67 + 8 * *(unsigned int *)(v65 + v68)))
            {
              if ((v143 & 1) != 0)
              {
                v69 = 8;
                v70 = v144;
              }
              else
              {
                v69 = DWORD2(v144[0]);
                if (!DWORD2(v144[0]))
                  goto LABEL_109;
                v70 = *(_OWORD **)&v144[0];
              }
              v71 = v69 - 1;
              v72 = v71 & ((v64 >> 4) ^ (v64 >> 9));
              v73 = *((_QWORD *)v70 + v72);
              if (v64 != v73)
              {
                v74 = 1;
                while (v73 != -4096)
                {
                  v75 = v72 + v74++;
                  v72 = v75 & v71;
                  v73 = *((_QWORD *)v70 + v72);
                  if (v64 == v73)
                    goto LABEL_115;
                }
LABEL_109:
                if ((*(_BYTE *)(v64 + 16) & 0xFE) != 0x3C)
                  goto LABEL_117;
                v76 = v133[0];
                v77 = sub_1C63D46C0(v124, v64, *v125);
                if (*(_BYTE *)(v64 + 16) == 61 && *(_QWORD *)(v64 - 64) == v76)
                {
                  if (v77 != 5)
                    goto LABEL_117;
                }
                else if (v77 == 4)
                {
                  goto LABEL_117;
                }
              }
            }
LABEL_115:
            ;
          }
          sub_1C4E7C77C((uint64_t)&v143, v133);
        }
LABEL_117:
        ;
      }
    }
    v78 = *(_QWORD *)(a1 + 608);
    v79 = *(_QWORD *)(v78 + 152);
    v121 = *(_QWORD *)(v78 + 160);
    if (v79 == v121)
      goto LABEL_119;
LABEL_133:
    v85 = *(_QWORD *)v79;
    v133[0] = 0;
    v86 = *(_DWORD *)(v85 + 20);
    v87 = v86 & 0x7FFFFFF;
    if ((v86 & 0x7FFFFFF) != 0)
    {
      v88 = 0;
      while (1)
      {
        v89 = v85 - 32 * v87;
        if ((v86 & 0x40000000) != 0)
          v89 = *(_QWORD *)(v85 - 8);
        if (*(_QWORD *)(v89 + 32 * *(unsigned int *)(v85 + 60) + 8 * v88) == LoopLatch)
          break;
        if (v87 == ++v88)
          goto LABEL_139;
      }
    }
    else
    {
LABEL_139:
      LODWORD(v88) = -1;
    }
    if ((v86 & 0x40000000) != 0)
      v90 = *(_QWORD *)(v85 - 8);
    else
      v90 = v85 - 32 * v87;
    v91 = *(_QWORD *)(v90 + 32 * v88);
    v133[0] = v91;
    if (v85 == *(_QWORD *)(*(_QWORD *)(a1 + 608) + 72) && *(_BYTE *)(a1 + 124))
      goto LABEL_196;
    v92 = *(_QWORD *)(v85 + 8);
    if (!v92)
      goto LABEL_170;
    while (1)
    {
      v93 = *(_QWORD *)(v92 + 24);
      if (v133[0] != v93)
      {
        v94 = *(_QWORD *)(a1 + 584);
        v95 = sub_1C477672C(v94 + 56, *(_QWORD *)(v93 + 40));
        v96 = *(_QWORD *)(v94 + 64);
        v97 = v96 == *(_QWORD *)(v94 + 56) ? 76 : 72;
        if (v95 != (_QWORD *)(v96 + 8 * *(unsigned int *)(v94 + v97)))
        {
          if ((v143 & 1) != 0)
          {
            v98 = 8;
            v99 = v144;
          }
          else
          {
            v98 = DWORD2(v144[0]);
            if (!DWORD2(v144[0]))
              goto LABEL_158;
            v99 = *(_OWORD **)&v144[0];
          }
          v100 = v98 - 1;
          v101 = v100 & ((v93 >> 4) ^ (v93 >> 9));
          v102 = *((_QWORD *)v99 + v101);
          if (v93 != v102)
          {
            v103 = 1;
            while (v102 != -4096)
            {
              v104 = v101 + v103++;
              v101 = v104 & v100;
              v102 = *((_QWORD *)v99 + v101);
              if (v93 == v102)
                goto LABEL_164;
            }
LABEL_158:
            if (*(_DWORD *)(v79 + 32) != 2 || (*(_BYTE *)(v93 + 16) & 0xFE) != 0x3C || *(_QWORD *)(v93 - 32) != v85)
              goto LABEL_196;
            v105 = sub_1C63D46C0(v124, v93, *v125);
            if (*(_BYTE *)(v93 + 16) == 61 && *(_QWORD *)(v93 - 64) == v85)
            {
              if (v105 != 5)
                goto LABEL_196;
            }
            else if (v105 == 4)
            {
              goto LABEL_196;
            }
          }
        }
      }
LABEL_164:
      v92 = *(_QWORD *)(v92 + 8);
      if (!v92)
      {
        v91 = v133[0];
LABEL_170:
        v106 = *(_QWORD *)(v91 + 8);
        if (v106)
        {
          while (2)
          {
            v107 = *(_QWORD *)(v106 + 24);
            if (v85 != v107)
            {
              v108 = *(_QWORD *)(a1 + 584);
              v109 = sub_1C477672C(v108 + 56, *(_QWORD *)(v107 + 40));
              v110 = *(_QWORD *)(v108 + 64);
              v111 = v110 == *(_QWORD *)(v108 + 56) ? 76 : 72;
              if (v109 != (_QWORD *)(v110 + 8 * *(unsigned int *)(v108 + v111)))
              {
                if ((v143 & 1) != 0)
                {
                  v112 = 8;
                  v113 = v144;
                  goto LABEL_178;
                }
                v112 = DWORD2(v144[0]);
                if (DWORD2(v144[0]))
                {
                  v113 = *(_OWORD **)&v144[0];
LABEL_178:
                  v114 = v112 - 1;
                  v115 = v114 & ((v107 >> 4) ^ (v107 >> 9));
                  v116 = *((_QWORD *)v113 + v115);
                  if (v107 != v116)
                  {
                    v117 = 1;
                    while (v116 != -4096)
                    {
                      v118 = v115 + v117++;
                      v115 = v118 & v114;
                      v116 = *((_QWORD *)v113 + v115);
                      if (v107 == v116)
                        goto LABEL_191;
                    }
                    goto LABEL_185;
                  }
                }
                else
                {
LABEL_185:
                  if (*(_DWORD *)(v79 + 32) != 2)
                    goto LABEL_196;
                  if ((*(_BYTE *)(v107 + 16) & 0xFE) != 0x3C)
                    goto LABEL_196;
                  v119 = v133[0];
                  if (*(_QWORD *)(v107 - 32) != v133[0])
                    goto LABEL_196;
                  v120 = sub_1C63D46C0(v124, v107, *v125);
                  if (*(_BYTE *)(v107 + 16) == 61 && *(_QWORD *)(v107 - 64) == v119)
                  {
                    if (v120 != 5)
                      goto LABEL_196;
                  }
                  else if (v120 == 4)
                  {
                    goto LABEL_196;
                  }
                }
              }
            }
LABEL_191:
            v106 = *(_QWORD *)(v106 + 8);
            if (!v106)
              break;
            continue;
          }
        }
        v132 = v85;
        sub_1C4E7C77C((uint64_t)&v143, &v132);
        sub_1C4E7C77C((uint64_t)&v143, v133);
LABEL_196:
        v79 += 96;
        if (v79 == v121)
        {
LABEL_119:
          v80 = sub_1C63DCD94(a1 + 176, (int *)&v131);
          if ((_DWORD)v146)
          {
            v81 = (llvm::SmallPtrSetImplBase *)(v80 + 2);
            v82 = v145;
            v83 = 8 * v146;
            do
            {
              v84 = *v82++;
              sub_1C4774094(v81, v84);
              v83 -= 8;
            }
            while (v83);
          }
          if (v127 != v126)
            free(v127);
          if (v140 != v142)
            free(v140);
          if ((v135 & 1) == 0)
            MEMORY[0x1CAA32FB4](v136, 8);
          if (v145 != v147)
            free(v145);
          if ((v143 & 1) == 0)
            MEMORY[0x1CAA32FB4](*(_QWORD *)&v144[0], 8);
          return;
        }
        goto LABEL_133;
      }
    }
  }
  v3 = sub_1C63DCD94(a1 + 176, (int *)&v131);
  v4 = a1 + 152;
  v5 = sub_1C63DCD94(v4, (int *)&v131);
  v6 = (uint64_t *)*((_QWORD *)v5 + 2);
  if (v6 == *((uint64_t **)v5 + 1))
    v7 = v5 + 7;
  else
    v7 = v5 + 6;
  v8 = *v7;
  v9 = &v6[v8];
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    while ((unint64_t)*v6 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v6;
      v10 -= 8;
      if (!v10)
      {
        v6 = v9;
        break;
      }
    }
  }
  v11 = sub_1C63DCD94(v4, (int *)&v131);
  v12 = *((_QWORD *)v11 + 2);
  if (v12 == *((_QWORD *)v11 + 1))
    v13 = v11 + 7;
  else
    v13 = v11 + 6;
  v14 = (uint64_t *)(v12 + 8 * *v13);
  if (v6 != v14)
  {
    v15 = (llvm::SmallPtrSetImplBase *)(v3 + 2);
    do
    {
      v17 = *v6;
      v16 = (unint64_t *)(v6 + 1);
      sub_1C4774094(v15, v17);
      while (v16 != (unint64_t *)v9)
      {
        v18 = *v16++;
        if (v18 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v6 = (uint64_t *)(v16 - 1);
          goto LABEL_20;
        }
      }
      v6 = v9;
LABEL_20:
      ;
    }
    while (v6 != v14);
  }
}

uint64_t sub_1C60704D8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v5 = result;
  v6 = *(unsigned __int8 *)(a3 + 16);
  if (v6 != 62 && (v6 != 77 || *(_BYTE *)(*(_QWORD *)a3 + 8) != 15))
    return result;
  result = llvm::Loop::isLoopInvariant(*(_QWORD *)(**(_QWORD **)result + 584), a3);
  if ((result & 1) != 0)
    return result;
  v17 = a3;
  v7 = *(_QWORD *)(v5 + 8);
  v8 = v7 + 8;
  if ((*(_BYTE *)v7 & 1) != 0)
  {
    v9 = 8;
LABEL_7:
    v10 = v9 - 1;
    v11 = v10 & ((a3 >> 4) ^ (a3 >> 9));
    v12 = *(_QWORD *)(v8 + 8 * v11);
    if (v12 == a3)
      return result;
    v13 = 1;
    while (v12 != -4096)
    {
      v14 = v11 + v13++;
      v11 = v14 & v10;
      v12 = *(_QWORD *)(v8 + 8 * v11);
      if (v12 == a3)
        return result;
    }
    goto LABEL_14;
  }
  v9 = *(_DWORD *)(v7 + 16);
  if (v9)
  {
    v8 = *(_QWORD *)(v7 + 8);
    goto LABEL_7;
  }
LABEL_14:
  v15 = sub_1C63D46C0(**(_QWORD **)(v5 + 16), a2, **(_QWORD **)(*(_QWORD *)(v5 + 16) + 8));
  if (a2 && *(_BYTE *)(a2 + 16) == 61 && *(_QWORD *)(a2 - 64) == a3)
  {
    if (v15 != 5)
      return (uint64_t)sub_1C4774094(*(llvm::SmallPtrSetImplBase **)(v5 + 32), a3);
  }
  else if (v15 == 4)
  {
    return (uint64_t)sub_1C4774094(*(llvm::SmallPtrSetImplBase **)(v5 + 32), a3);
  }
  v16 = *(_QWORD *)(a3 + 8);
  if (v16)
  {
    while ((*(_BYTE *)(*(_QWORD *)(v16 + 24) + 16) & 0xFE) == 0x3C)
    {
      v16 = *(_QWORD *)(v16 + 8);
      if (!v16)
        return sub_1C4E7C77C(*(_QWORD *)(v5 + 24), &v17);
    }
    return (uint64_t)sub_1C4774094(*(llvm::SmallPtrSetImplBase **)(v5 + 32), a3);
  }
  return sub_1C4E7C77C(*(_QWORD *)(v5 + 24), &v17);
}

uint64_t llvm::LoopVectorizationCostModel::isScalarWithPredication(uint64_t a1, uint64_t a2, llvm::Type *a3, llvm::DominatorTree *a4)
{
  uint64_t result;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  llvm::APInt *v17;
  unsigned int v18;
  int v20;
  llvm::Value *v21;
  uint64_t ***v22;
  uint64_t **v23;
  _BOOL4 v25;
  unint64_t v26;
  int isConsecutivePtr;
  unsigned int (*v28)(void);

  if (*(_BYTE *)(a1 + 124)
    || (result = llvm::LoopAccessInfo::blockNeedsPredication(*(llvm::LoopAccessInfo **)(a2 + 40), **(llvm::BasicBlock ***)(a1 + 608), *(llvm::Loop **)(*(_QWORD *)(a1 + 608) + 40), a4), (_DWORD)result))
  {
    result = 0;
    v8 = *(unsigned __int8 *)(a2 + 16);
    if (v8 <= 0x3D)
    {
      if (((1 << v8) & 0xD800000000000) != 0)
      {
        v9 = *(_DWORD *)(a2 + 20);
        if ((v9 & 0x40000000) != 0)
          v10 = *(_QWORD *)(a2 - 8);
        else
          v10 = a2 - 32 * (v9 & 0x7FFFFFF);
        v15 = *(_QWORD *)(v10 + 32);
        if (v15)
          v16 = *(_BYTE *)(v15 + 16) == 16;
        else
          v16 = 0;
        if (!v16)
          return 1;
        v17 = (llvm::APInt *)(v15 + 24);
        v18 = *(_DWORD *)(v15 + 32);
        if (v18 > 0x40)
          return llvm::APInt::countLeadingZerosSlowCase(v17) == v18;
        else
          return *(_QWORD *)v17 == 0;
      }
      if (((1 << v8) & 0x3000000000000000) == 0)
        return result;
      v11 = *(_QWORD *)(a1 + 608);
      v12 = sub_1C477672C(v11 + 488, a2);
      v13 = *(_QWORD *)(v11 + 496);
      v14 = 504;
      if (v13 == *(_QWORD *)(v11 + 488))
        v14 = 508;
      if (v12 == (_QWORD *)(v13 + 8 * *(unsigned int *)(v11 + v14)))
        return 0;
      v20 = *(unsigned __int8 *)(a2 + 16);
      if (v20 == 60)
      {
        v21 = *(llvm::Value **)(a2 - 32);
        v22 = (uint64_t ***)a2;
      }
      else
      {
        if (v20 == 61)
          v21 = *(llvm::Value **)(a2 - 32);
        else
          v21 = 0;
        v22 = *(uint64_t ****)(a2 - 64);
      }
      v23 = *v22;
      v25 = ((unint64_t)a3 & 0xFFFFFFFF00000000) == 0x100000000 && (_DWORD)a3 != 0;
      if (a3 > 1 || v25)
      {
        if (((unint64_t)a3 & 0xFFFFFFFF00000000) == 0x100000000)
          llvm::ScalableVectorType::get(v23, a3);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v23, a3);
        v20 = *(unsigned __int8 *)(a2 + 16);
      }
      v26 = ((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1) & 0x3F;
      isConsecutivePtr = llvm::LoopVectorizationLegality::isConsecutivePtr(*(llvm::LoopVectorizationLegality **)(a1 + 608), (llvm::Type *)v23, v21);
      if (v20 == 60)
      {
        if (isConsecutivePtr
          && ((*(uint64_t (**)(_QWORD, uint64_t **, unint64_t))(***(_QWORD ***)(a1 + 616) + 328))(**(_QWORD **)(a1 + 616), v23, v26) & 1) != 0)
        {
          return 0;
        }
        v28 = *(unsigned int (**)(void))(***(_QWORD ***)(a1 + 616) + 368);
      }
      else
      {
        if (isConsecutivePtr
          && ((*(uint64_t (**)(_QWORD, uint64_t **, unint64_t))(***(_QWORD ***)(a1 + 616) + 320))(**(_QWORD **)(a1 + 616), v23, v26) & 1) != 0)
        {
          return 0;
        }
        v28 = *(unsigned int (**)(void))(***(_QWORD ***)(a1 + 616) + 360);
      }
      return v28() ^ 1;
    }
  }
  return result;
}

uint64_t llvm::LoopVectorizationCostModel::interleavedAccessCanBeWidened(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v16;
  _BOOL4 v17;
  llvm::DominatorTree *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  int v31;
  _BOOL4 v32;
  _BOOL4 v33;
  uint64_t (*v34)(void);
  uint64_t v35;
  uint64_t v36;

  v4 = (uint64_t *)(*(_QWORD *)(a1 + 672) + 48);
  v35 = 0;
  v36 = a2;
  v5 = 0;
  if (sub_1C61252B8(v4, &v36, &v35))
    v5 = *(uint64_t **)(v35 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40) + 272;
  if (!a2 || (v7 = (uint64_t *)a2, *(_BYTE *)(a2 + 16) != 60))
    v7 = *(uint64_t **)(a2 - 64);
  v8 = *v7;
  v9 = sub_1C53E2F94(v6, *v7);
  v11 = v10;
  sub_1C4768AD0(v6, v8);
  if (v9 != v13 || v11 != v12)
    return 0;
  v16 = *(_DWORD *)v5;
  v17 = sub_1C4DEB33C(v6, v8);
  if (v16)
  {
    v19 = v17;
    v20 = 0;
    do
    {
      LODWORD(v36) = v20 + *((_DWORD *)v5 + 8);
      v21 = sub_1C4FA9B60(v5 + 1, &v36);
      if (v21)
      {
        if (*(_BYTE *)(v21 + 16) != 60)
          v21 = *(_QWORD *)(v21 - 64);
        v22 = *(_QWORD *)v21;
        v23 = sub_1C4DEB33C(v6, *(_QWORD *)v21);
        if (v19 != v23)
          return 0;
        if ((v23 & v19) == 1)
        {
          v24 = *(_DWORD *)(v8 + 8);
          if ((v24 & 0xFE) == 0x12)
            v24 = *(_DWORD *)(**(_QWORD **)(v8 + 16) + 8);
          v25 = *(_DWORD *)(v22 + 8);
          if ((v25 & 0xFE) == 0x12)
            v25 = *(_DWORD *)(**(_QWORD **)(v22 + 16) + 8);
          if ((v25 ^ v24) > 0xFF)
            return 0;
        }
      }
    }
    while (v16 != ++v20);
  }
  if (*(_BYTE *)(a1 + 124)
    || llvm::LoopAccessInfo::blockNeedsPredication(*(llvm::LoopAccessInfo **)(a2 + 40), **(llvm::BasicBlock ***)(a1 + 608), *(llvm::Loop **)(*(_QWORD *)(a1 + 608) + 40), v18))
  {
    v26 = *(_QWORD *)(a1 + 608);
    v27 = sub_1C477672C(v26 + 488, a2);
    v28 = *(_QWORD *)(v26 + 496);
    v29 = 504;
    if (v28 == *(_QWORD *)(v26 + 488))
      v29 = 508;
    v30 = v27 != (_QWORD *)(v28 + 8 * *(unsigned int *)(v26 + v29));
  }
  else
  {
    v30 = 0;
  }
  v31 = *(unsigned __int8 *)(a2 + 16);
  if (v31 == 60)
  {
    LODWORD(v36) = *(_DWORD *)v5 + *((_DWORD *)v5 + 8) - 1;
    if (sub_1C4FA9B60(v5 + 1, &v36))
      v32 = 0;
    else
      v32 = *(_DWORD *)(a1 + 120) != 0;
    v31 = *(unsigned __int8 *)(a2 + 16);
  }
  else
  {
    v32 = 0;
  }
  v33 = v31 == 61 && *((_DWORD *)v5 + 4) < *(_DWORD *)v5;
  if (!v30 && !v32 && !v33)
    return 1;
  if (*((_BYTE *)v5 + 4))
    return 0;
  if (a2 && v31 == 60 || v31 == 60)
    v34 = *(uint64_t (**)(void))(***(_QWORD ***)(a1 + 616) + 328);
  else
    v34 = *(uint64_t (**)(void))(***(_QWORD ***)(a1 + 616) + 320);
  return v34();
}

uint64_t llvm::LoopVectorizationCostModel::memoryInstructionCanBeWidened(uint64_t a1, uint64_t a2, llvm::Type *a3)
{
  int v6;
  llvm::Value *v7;
  llvm::Type **v8;
  llvm::Type *v9;
  uint64_t result;
  llvm::DominatorTree *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;

  v6 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v6 == 60)
  {
    v7 = *(llvm::Value **)(a2 - 32);
    v8 = (llvm::Type **)a2;
  }
  else
  {
    v7 = 0;
    if (a2 && v6 == 61)
      v7 = *(llvm::Value **)(a2 - 32);
    v8 = *(llvm::Type ***)(a2 - 64);
  }
  v9 = *v8;
  result = llvm::LoopVectorizationLegality::isConsecutivePtr(*(llvm::LoopVectorizationLegality **)(a1 + 608), *v8, v7);
  if ((_DWORD)result)
  {
    if ((llvm::LoopVectorizationCostModel::isScalarWithPredication(a1, a2, a3, v11) & 1) != 0)
    {
      return 0;
    }
    else
    {
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40) + 272;
      v13 = sub_1C53E2F94(v12, (uint64_t)v9);
      v15 = v14;
      sub_1C4768AD0(v12, (uint64_t)v9);
      return v13 == v17 && v15 == v16;
    }
  }
  return result;
}

_QWORD *llvm::LoopVectorizationCostModel::collectLoopUniforms(uint64_t a1, llvm::Type *a2)
{
  uint64_t v4;
  _DWORD *v5;
  void *v6;
  uint64_t LoopLatch;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  llvm::DominatorTree *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int hasLoopInvariantOperands;
  uint64_t v35;
  _QWORD *v36;
  llvm::DominatorTree *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  llvm::DominatorTree *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  llvm::DominatorTree *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t *v52;
  uint64_t *v53;
  llvm::Type *v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  _QWORD *v68;
  llvm::DominatorTree *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t j;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  _QWORD *v98;
  llvm::DominatorTree *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  _DWORD *v105;
  uint64_t *v106;
  uint64_t *v107;
  llvm::SmallPtrSetImplBase *v108;
  uint64_t v109;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t k;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  uint64_t m;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  uint64_t v136;
  _QWORD *v137;
  llvm::DominatorTree *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  llvm::DominatorTree *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v148;
  int v149;
  unsigned int v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  llvm::Type *v154;
  llvm::Type *v155;
  _QWORD v156[2];
  int v157;
  void *__p;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161[2];
  int v162;
  uint64_t *v163;
  uint64_t *v164;
  uint64_t v165;
  llvm::Type *v166;
  uint64_t v167;
  uint64_t v168;

  v166 = a2;
  v4 = a1 + 152;
  v5 = sub_1C63DCD94(a1 + 152, (int *)&v166);
  v6 = (void *)*((_QWORD *)v5 + 2);
  if (v6 == *((void **)v5 + 1))
    goto LABEL_2;
  v146 = v5[6];
  if (v146 < 0x21 || 4 * (v5[7] - v5[8]) >= v146)
  {
    memset(v6, 255, 8 * v146);
LABEL_2:
    v5[7] = 0;
    v5[8] = 0;
    goto LABEL_3;
  }
  free(v6);
  v148 = v5[7] - v5[8];
  v149 = 1 << (33 - __clz(v148 - 1));
  v5[7] = 0;
  v5[8] = 0;
  if (v148 <= 0x10)
    v150 = 32;
  else
    v150 = v149;
  v5[6] = v150;
  v151 = malloc_type_malloc(8 * v150, 0x4065EBACuLL);
  if (!v151)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *((_QWORD *)v5 + 2) = v151;
  memset(v151, 255, 8 * v5[6]);
LABEL_3:
  v161[0] = 0;
  v161[1] = 0;
  v162 = 0;
  v164 = 0;
  v165 = 0;
  v163 = 0;
  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*(_QWORD *)(a1 + 584));
  v8 = 0;
  v9 = *(_QWORD *)(LoopLatch + 40);
  if (v9 != LoopLatch + 40)
  {
    v8 = v9 - 24;
    if (!v9)
      v8 = 0;
    if (*(unsigned __int8 *)(v8 + 16) - 29 >= 0xB)
      v8 = 0;
  }
  v10 = *(_DWORD *)(v8 + 20);
  v152 = v4;
  if ((v10 & 0x40000000) != 0)
    v11 = *(uint64_t **)(v8 - 8);
  else
    v11 = (uint64_t *)(v8 - 32 * (v10 & 0x7FFFFFF));
  v12 = *v11;
  if (*v11 && *(unsigned __int8 *)(v12 + 16) >= 0x1Cu)
  {
    v13 = *(_QWORD *)(a1 + 584);
    v14 = sub_1C477672C(v13 + 56, *(_QWORD *)(v12 + 40));
    v15 = *(_QWORD *)(v13 + 64);
    v16 = 72;
    if (v15 == *(_QWORD *)(v13 + 56))
      v16 = 76;
    if (v14 != (_QWORD *)(v15 + 8 * *(unsigned int *)(v13 + v16)))
    {
      v17 = *(_QWORD *)(v12 + 8);
      if (v17)
      {
        if (!*(_QWORD *)(v17 + 8))
        {
          v156[0] = v12;
          if (*(unsigned __int8 *)(v12 + 16) >= 0x1Cu)
          {
            v18 = *(_QWORD *)(a1 + 584);
            v19 = sub_1C477672C(v18 + 56, *(_QWORD *)(v12 + 40));
            v21 = *(_QWORD *)(v18 + 64);
            v22 = 72;
            if (v21 == *(_QWORD *)(v18 + 56))
              v22 = 76;
            if (v19 != (_QWORD *)(v21 + 8 * *(unsigned int *)(v18 + v22))
              && (llvm::LoopVectorizationCostModel::isScalarWithPredication(a1, v12, a2, v20) & 1) == 0)
            {
              sub_1C509CEFC(v161, v156);
            }
          }
        }
      }
    }
  }
  v153 = LoopLatch;
  v156[0] = 0;
  v156[1] = 0;
  v157 = 0;
  v159 = 0;
  v160 = 0;
  __p = 0;
  v23 = *(_QWORD *)(a1 + 584);
  v24 = *(_QWORD *)(v23 + 32);
  v25 = *(_QWORD *)(v23 + 40);
  if (v25 == v24)
    goto LABEL_119;
  do
  {
    v26 = *(_QWORD *)v24 + 40;
    for (i = *(_QWORD *)(*(_QWORD *)v24 + 48); i != v26; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v28 = i - 24;
      else
        v28 = 0;
      v29 = *(unsigned __int8 *)(v28 + 16);
      if (v29 == 84)
      {
        v30 = *(_QWORD *)(v28 - 32);
        if (!v30
          || *(_BYTE *)(v30 + 16)
          || *(_QWORD *)(v30 + 24) != *(_QWORD *)(v28 + 72)
          || (*(_BYTE *)(v30 + 33) & 0x20) == 0)
        {
          continue;
        }
        v31 = *(_DWORD *)(*(_QWORD *)(i - 56) + 36);
        if (((v31 - 126) > 0x2A || ((1 << (v31 - 126)) & 0x60000000001) == 0)
          && v31 != 272
          && v31 != 7)
        {
          continue;
        }
        hasLoopInvariantOperands = llvm::Loop::hasLoopInvariantOperands(*(_QWORD *)(a1 + 584), v28);
        v29 = *(unsigned __int8 *)(v28 + 16);
        if (hasLoopInvariantOperands)
        {
          v168 = v28;
          if (i && v29 >= 0x1C)
          {
            v35 = *(_QWORD *)(a1 + 584);
            v36 = sub_1C477672C(v35 + 56, *(_QWORD *)(v28 + 40));
            v38 = *(_QWORD *)(v35 + 64);
            v39 = v38 == *(_QWORD *)(v35 + 56) ? 76 : 72;
            if (v36 != (_QWORD *)(v38 + 8 * *(unsigned int *)(v35 + v39))
              && (llvm::LoopVectorizationCostModel::isScalarWithPredication(a1, v28, v166, v37) & 1) == 0)
            {
              sub_1C509CEFC(v161, &v168);
            }
          }
          v29 = *(unsigned __int8 *)(v28 + 16);
        }
      }
      if (i && v29 == 92)
      {
        v168 = v28;
        v40 = *(_QWORD *)(a1 + 584);
        v41 = sub_1C477672C(v40 + 56, *(_QWORD *)(v28 + 40));
        v43 = *(_QWORD *)(v40 + 64);
        if (v43 == *(_QWORD *)(v40 + 56))
          v44 = 76;
        else
          v44 = 72;
        if (v41 != (_QWORD *)(v43 + 8 * *(unsigned int *)(v40 + v44))
          && (llvm::LoopVectorizationCostModel::isScalarWithPredication(a1, v28, v166, v42) & 1) == 0)
        {
          sub_1C509CEFC(v161, &v168);
        }
      }
      else
      {
        v167 = 0;
        if (i && v29 == 60)
        {
          v167 = *(_QWORD *)(v28 - 32);
          if (!v167)
            continue;
          if (sub_1C63D3F1C(*(_QWORD *)(a1 + 608), v28))
          {
            v168 = v28;
            if (*(unsigned __int8 *)(v28 + 16) >= 0x1Cu)
            {
              v45 = *(_QWORD *)(a1 + 584);
              v46 = sub_1C477672C(v45 + 56, *(_QWORD *)(v28 + 40));
              v48 = *(_QWORD *)(v45 + 64);
              v49 = v48 == *(_QWORD *)(v45 + 56) ? 76 : 72;
              if (v46 != (_QWORD *)(v48 + 8 * *(unsigned int *)(v45 + v49))
                && (llvm::LoopVectorizationCostModel::isScalarWithPredication(a1, v28, v166, v47) & 1) == 0)
              {
                sub_1C509CEFC(v161, &v168);
              }
            }
          }
        }
        else
        {
          if (!i)
            continue;
          if (v29 != 61)
            continue;
          v167 = *(_QWORD *)(v28 - 32);
          if (!v167)
            continue;
        }
        v50 = sub_1C63D46C0(a1, v28, (uint64_t)v166);
        v51 = v50;
        if (*(_BYTE *)(v28 + 16) != 60)
        {
          if ((v50 - 1) > 2)
            continue;
LABEL_80:
          sub_1C4D954B8(v156, &v167);
          continue;
        }
        if (sub_1C63D3F1C(*(_QWORD *)(a1 + 608), v28) || (v51 - 1) < 3)
          goto LABEL_80;
      }
    }
    v24 += 8;
  }
  while (v24 != v25);
  v52 = (uint64_t *)__p;
  v53 = v159;
  if (__p != v159)
  {
    v54 = v166;
    do
    {
      v55 = *v52;
      if (*v52)
        v56 = *(unsigned __int8 *)(*v52 + 16) >= 0x1Cu;
      else
        v56 = 0;
      if (v56)
      {
        v57 = *(_QWORD *)(a1 + 584);
        v58 = sub_1C477672C(v57 + 56, *(_QWORD *)(v55 + 40));
        v59 = *(_QWORD *)(v57 + 64);
        v60 = v59 == *(_QWORD *)(v57 + 56) ? 76 : 72;
        if (v58 != (_QWORD *)(v59 + 8 * *(unsigned int *)(v57 + v60)))
        {
          v61 = *(_QWORD *)(v55 + 8);
          if (v61)
          {
            while (1)
            {
              v62 = *(_QWORD *)(v61 + 24);
              v63 = v62 && *(unsigned __int8 *)(v62 + 16) - 62 >= 0xFFFFFFFE;
              v64 = v63 ? *(_QWORD *)(v62 - 32) : 0;
              if (v64 != v55)
                break;
              v65 = sub_1C63D46C0(a1, *(_QWORD *)(v61 + 24), (uint64_t)v54);
              v66 = v65;
              if (*(_BYTE *)(v62 + 16) == 60)
              {
                if (!sub_1C63D3F1C(*(_QWORD *)(a1 + 608), v62) && (v66 - 1) >= 3)
                  break;
              }
              else if ((v65 - 1) > 2)
              {
                break;
              }
              v61 = *(_QWORD *)(v61 + 8);
              if (!v61)
                goto LABEL_111;
            }
          }
          else
          {
LABEL_111:
            v168 = v55;
            if (*(unsigned __int8 *)(v55 + 16) >= 0x1Cu)
            {
              v67 = *(_QWORD *)(a1 + 584);
              v68 = sub_1C477672C(v67 + 56, *(_QWORD *)(v55 + 40));
              v70 = *(_QWORD *)(v67 + 64);
              v71 = v70 == *(_QWORD *)(v67 + 56) ? 76 : 72;
              if (v68 != (_QWORD *)(v70 + 8 * *(unsigned int *)(v67 + v71))
                && (llvm::LoopVectorizationCostModel::isScalarWithPredication(a1, v55, v54, v69) & 1) == 0)
              {
                sub_1C509CEFC(v161, &v168);
              }
            }
          }
        }
      }
      ++v52;
    }
    while (v52 != v53);
  }
LABEL_119:
  v73 = v163;
  v72 = v164;
  if (v164 != v163)
  {
    v74 = 0;
    v75 = 0;
    v154 = v166;
    do
    {
      v76 = v73[v74];
      v77 = *(_DWORD *)(v76 + 20);
      if ((v77 & 0x40000000) != 0)
      {
        v79 = *(uint64_t **)(v76 - 8);
        v78 = v77 & 0x7FFFFFF;
        if (v78)
        {
LABEL_125:
          v80 = &v79[4 * v78];
          do
          {
            v81 = *v79;
            if (*v79)
              v82 = *(unsigned __int8 *)(*v79 + 16) >= 0x1Cu;
            else
              v82 = 0;
            if (v82)
            {
              v83 = *(_QWORD *)(a1 + 584);
              v84 = sub_1C477672C(v83 + 56, *(_QWORD *)(v81 + 40));
              v85 = *(_QWORD *)(v83 + 64);
              v86 = v85 == *(_QWORD *)(v83 + 56) ? 76 : 72;
              if (v84 != (_QWORD *)(v85 + 8 * *(unsigned int *)(v83 + v86)))
              {
                if (*(_BYTE *)(v81 + 16) != 83)
                  goto LABEL_139;
                v87 = *(_QWORD *)(a1 + 608);
                v88 = sub_1C477672C(v87 + 240, v81);
                v89 = *(_QWORD *)(v87 + 248);
                v90 = 256;
                if (v89 == *(_QWORD *)(v87 + 240))
                  v90 = 260;
                if (v88 == (_QWORD *)(v89 + 8 * *(unsigned int *)(v87 + v90)))
                {
LABEL_139:
                  for (j = *(_QWORD *)(v81 + 8); j; j = *(_QWORD *)(j + 8))
                  {
                    v92 = *(_QWORD *)(j + 24);
                    v167 = 0;
                    v168 = v92;
                    if ((sub_1C61DB414(v161, &v168, &v167) & 1) == 0)
                    {
                      if (v92)
                        v93 = *(unsigned __int8 *)(v92 + 16) - 62 >= 0xFFFFFFFE;
                      else
                        v93 = 0;
                      if (v93)
                        v94 = *(_QWORD *)(v92 - 32);
                      else
                        v94 = 0;
                      if (v94 != v81)
                        goto LABEL_162;
                      v95 = sub_1C63D46C0(a1, v92, (uint64_t)v154);
                      v96 = v95;
                      if (*(_BYTE *)(v92 + 16) == 60)
                      {
                        if (!sub_1C63D3F1C(*(_QWORD *)(a1 + 608), v92) && (v96 - 1) >= 3)
                          goto LABEL_162;
                      }
                      else if ((v95 - 1) > 2)
                      {
                        goto LABEL_162;
                      }
                    }
                  }
                  v168 = v81;
                  if (*(unsigned __int8 *)(v81 + 16) >= 0x1Cu)
                  {
                    v97 = *(_QWORD *)(a1 + 584);
                    v98 = sub_1C477672C(v97 + 56, *(_QWORD *)(v81 + 40));
                    v100 = *(_QWORD *)(v97 + 64);
                    v101 = v100 == *(_QWORD *)(v97 + 56) ? 76 : 72;
                    if (v98 != (_QWORD *)(v100 + 8 * *(unsigned int *)(v97 + v101))
                      && (llvm::LoopVectorizationCostModel::isScalarWithPredication(a1, v81, v154, v99) & 1) == 0)
                    {
                      sub_1C509CEFC(v161, &v168);
                    }
                  }
                }
              }
            }
LABEL_162:
            v79 += 4;
          }
          while (v79 != v80);
          v73 = v163;
          v72 = v164;
        }
      }
      else
      {
        v78 = v77 & 0x7FFFFFF;
        v79 = (uint64_t *)(v76 - 32 * v78);
        if (v78)
          goto LABEL_125;
      }
      v74 = ++v75;
    }
    while (v75 != v72 - v73);
  }
  v102 = *(_QWORD *)(a1 + 608);
  v103 = *(uint64_t **)(v102 + 152);
  v104 = *(uint64_t **)(v102 + 160);
  if (v103 != v104)
  {
    v155 = v166;
    do
    {
      v111 = *v103;
      v112 = *(_DWORD *)(*v103 + 20);
      v113 = v112 & 0x7FFFFFF;
      if ((v112 & 0x7FFFFFF) != 0)
      {
        v114 = 0;
        while (1)
        {
          v115 = v111 - 32 * v113;
          if ((v112 & 0x40000000) != 0)
            v115 = *(_QWORD *)(v111 - 8);
          if (*(_QWORD *)(v115 + 32 * *(unsigned int *)(v111 + 60) + 8 * v114) == v153)
            break;
          if (v113 == ++v114)
            goto LABEL_179;
        }
      }
      else
      {
LABEL_179:
        LODWORD(v114) = -1;
      }
      if ((v112 & 0x40000000) != 0)
        v116 = *(_QWORD *)(v111 - 8);
      else
        v116 = v111 - 32 * v113;
      v117 = *(_QWORD *)(v116 + 32 * v114);
      for (k = *(_QWORD *)(v111 + 8); k; k = *(_QWORD *)(k + 8))
      {
        v119 = *(_QWORD *)(k + 24);
        if (v117 != v119)
        {
          v120 = *(_QWORD *)(a1 + 584);
          v121 = sub_1C477672C(v120 + 56, *(_QWORD *)(v119 + 40));
          v122 = *(_QWORD *)(v120 + 64);
          v123 = v122 == *(_QWORD *)(v120 + 56) ? 76 : 72;
          if (v121 != (_QWORD *)(v122 + 8 * *(unsigned int *)(v120 + v123)))
          {
            v167 = 0;
            v168 = v119;
            if ((sub_1C61DB414(v161, &v168, &v167) & 1) == 0)
            {
              if (*(unsigned __int8 *)(v119 + 16) - 62 >= 0xFFFFFFFE)
                v124 = *(_QWORD *)(v119 - 32);
              else
                v124 = 0;
              if (v124 != v111)
                goto LABEL_236;
              v125 = sub_1C63D46C0(a1, v119, (uint64_t)v155);
              v126 = v125;
              if (*(_BYTE *)(v119 + 16) == 60)
              {
                if (!sub_1C63D3F1C(*(_QWORD *)(a1 + 608), v119) && (v126 - 1) >= 3)
                  goto LABEL_236;
              }
              else if ((v125 - 1) > 2)
              {
                goto LABEL_236;
              }
            }
          }
        }
      }
      for (m = *(_QWORD *)(v117 + 8); m; m = *(_QWORD *)(m + 8))
      {
        v128 = *(_QWORD *)(m + 24);
        if (v111 != v128)
        {
          v129 = *(_QWORD *)(a1 + 584);
          v130 = sub_1C477672C(v129 + 56, *(_QWORD *)(v128 + 40));
          v131 = *(_QWORD *)(v129 + 64);
          v132 = v131 == *(_QWORD *)(v129 + 56) ? 76 : 72;
          if (v130 != (_QWORD *)(v131 + 8 * *(unsigned int *)(v129 + v132)))
          {
            v167 = 0;
            v168 = v128;
            if ((sub_1C61DB414(v161, &v168, &v167) & 1) == 0)
            {
              if (*(unsigned __int8 *)(v128 + 16) - 62 >= 0xFFFFFFFE)
                v133 = *(_QWORD *)(v128 - 32);
              else
                v133 = 0;
              if (v133 != v117)
                goto LABEL_236;
              v134 = sub_1C63D46C0(a1, v128, (uint64_t)v155);
              v135 = v134;
              if (*(_BYTE *)(v128 + 16) == 60)
              {
                if (!sub_1C63D3F1C(*(_QWORD *)(a1 + 608), v128) && (v135 - 1) >= 3)
                  goto LABEL_236;
              }
              else if ((v134 - 1) > 2)
              {
                goto LABEL_236;
              }
            }
          }
        }
      }
      v168 = v111;
      if (v111 && *(unsigned __int8 *)(v111 + 16) >= 0x1Cu)
      {
        v136 = *(_QWORD *)(a1 + 584);
        v137 = sub_1C477672C(v136 + 56, *(_QWORD *)(v111 + 40));
        v139 = *(_QWORD *)(v136 + 64);
        v140 = v139 == *(_QWORD *)(v136 + 56) ? 76 : 72;
        if (v137 != (_QWORD *)(v139 + 8 * *(unsigned int *)(v136 + v140))
          && (llvm::LoopVectorizationCostModel::isScalarWithPredication(a1, v111, v155, v138) & 1) == 0)
        {
          sub_1C509CEFC(v161, &v168);
        }
      }
      v168 = v117;
      if (v117 && *(unsigned __int8 *)(v117 + 16) >= 0x1Cu)
      {
        v141 = *(_QWORD *)(a1 + 584);
        v142 = sub_1C477672C(v141 + 56, *(_QWORD *)(v117 + 40));
        v144 = *(_QWORD *)(v141 + 64);
        v145 = v144 == *(_QWORD *)(v141 + 56) ? 76 : 72;
        if (v142 != (_QWORD *)(v144 + 8 * *(unsigned int *)(v141 + v145))
          && (llvm::LoopVectorizationCostModel::isScalarWithPredication(a1, v117, v155, v143) & 1) == 0)
        {
          sub_1C509CEFC(v161, &v168);
        }
      }
LABEL_236:
      v103 += 12;
    }
    while (v103 != v104);
  }
  v105 = sub_1C63DCD94(v152, (int *)&v166);
  v106 = v163;
  v107 = v164;
  if (v163 != v164)
  {
    v108 = (llvm::SmallPtrSetImplBase *)(v105 + 2);
    do
    {
      v109 = *v106++;
      sub_1C4774094(v108, v109);
    }
    while (v106 != v107);
  }
  if (__p)
  {
    v159 = (uint64_t *)__p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v156[0], 8);
  return sub_1C6176BF8(v161);
}

unint64_t llvm::LoopVectorizationCostModel::computeFeasibleMaxVF(uint64_t a1, unsigned __int32 a2, unint64_t a3, int a4)
{
  void *v8;
  unint64_t SmallestAndWidestTypes;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t MaxLegalScalableVF;
  unint64_t v14;
  unsigned int v15;
  char v16;
  char v17;
  llvm::OptimizationRemarkEmitter *v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  llvm::OptimizationRemarkEmitter *v24;
  uint64_t v25;
  unint64_t MaximizedVFForTarget;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  void **v37;
  char *v38;
  unint64_t v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  void **v46;
  char *v47;
  unint64_t v48;
  void **v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  void **v58;
  unint64_t v59;
  void **v60;
  uint64_t v61;
  unint64_t v62;
  void *v63[2];
  char v64;
  void *__p;
  char v66;
  unsigned __int8 *v67;
  void *__dst[2];
  char v69;
  void *v70;
  char v71;
  const char *v72;
  uint64_t v73;
  void *v74;
  unsigned int v75;
  _BYTE v76[41];
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  const char *v80;
  const char *v81;
  uint64_t v82;
  char v83;
  char v84;
  void *v85;
  uint64_t v86;
  _BYTE v87[256];
  char v88;
  int v89;
  uint64_t v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  llvm::computeMinimumValueSizes(*(_QWORD *)(*(_QWORD *)(a1 + 584) + 32), (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 584) + 40) - *(_QWORD *)(*(_QWORD *)(a1 + 584) + 32)) >> 3, *(llvm::DemandedBits **)(a1 + 632), *(_QWORD **)(a1 + 616), &v77);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
  *(_QWORD *)(a1 + 8) = v77;
  *(_QWORD *)&v77 = 0;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v77 + 1);
  *((_QWORD *)&v77 + 1) = 0;
  *(_DWORD *)(a1 + 24) = v78;
  LODWORD(v78) = 0;
  v8 = *(void **)(a1 + 32);
  if (v8)
  {
    *(_QWORD *)(a1 + 40) = v8;
    operator delete(v8);
  }
  *(_OWORD *)(a1 + 32) = v79;
  *(_QWORD *)(a1 + 48) = v80;
  v80 = 0;
  v79 = 0uLL;
  sub_1C6176BF8(&v77);
  SmallestAndWidestTypes = llvm::LoopVectorizationCostModel::getSmallestAndWidestTypes((llvm::LoopVectorizationCostModel *)a1);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 608) + 56) + 16) + 200);
  v11 = 1 << ~__clz(v10 / HIDWORD(SmallestAndWidestTypes));
  if (HIDWORD(SmallestAndWidestTypes) <= v10)
    v12 = v11;
  else
    v12 = 0;
  v62 = v12;
  MaxLegalScalableVF = llvm::LoopVectorizationCostModel::getMaxLegalScalableVF((llvm::LoopVectorizationCostModel *)a1, v12);
  v61 = MaxLegalScalableVF;
  if (!(_DWORD)a3)
    goto LABEL_27;
  v14 = a3 & 0xFFFFFFFF00000000;
  if ((a3 & 0xFFFFFFFF00000000) == 0x100000000)
    v15 = MaxLegalScalableVF;
  else
    v15 = v12;
  if (a3 <= v15)
  {
    if (v14 == 0x100000000)
      return a3;
    else
      return a3;
  }
  if (v14 == 0x100000000)
  {
    v16 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 616) + 1176))(**(_QWORD **)(a1 + 616));
    if (byte_1ED82B238)
      v17 = 1;
    else
      v17 = v16;
    v18 = *(llvm::OptimizationRemarkEmitter **)(a1 + 648);
    v19 = ****(_QWORD ****)v18;
    if (*(_QWORD *)(v19 + 128))
    {
      if ((v17 & 1) != 0)
        goto LABEL_18;
    }
    else
    {
      v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v19 + 72) + 48))(*(_QWORD *)(v19 + 72));
      if ((v17 & 1) != 0)
      {
        if (v20)
        {
LABEL_18:
          llvm::Loop::getStartLoc(*(llvm::Loop **)(a1 + 584), v63);
          v21 = v63[0];
          if (v63[0])
          {
            v22 = *((_QWORD *)v63[0] - *((unsigned int *)v63[0] + 2));
            if (*(_BYTE *)v22 != 15)
              v22 = *(_QWORD *)(v22 - 8 * *(unsigned int *)(v22 + 8));
            v23 = *((_DWORD *)v63[0] + 1);
            v21 = *((unsigned __int16 *)v63[0] + 1);
          }
          else
          {
            v22 = 0;
            v23 = 0;
          }
          v41 = **(_QWORD **)(*(_QWORD *)(a1 + 584) + 32);
          v42 = *(_QWORD *)(v41 + 56);
          DWORD2(v77) = 11;
          BYTE12(v77) = 2;
          v78 = v42;
          *(_QWORD *)&v79 = v22;
          *((_QWORD *)&v79 + 1) = __PAIR64__(v21, v23);
          v80 = "loop-vectorize";
          v81 = "VectorizationFactor";
          v82 = 19;
          v83 = 0;
          v84 = 0;
          v85 = v87;
          v86 = 0x400000000;
          v88 = 0;
          v89 = -1;
          v90 = v41;
          *(_QWORD *)&v77 = &off_1E814E570;
          v72 = "User-specified vectorization factor ";
          v73 = 36;
          sub_1C53B17B4((uint64_t)&v85, (const void **)&v72);
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument((char *)__dst, "UserVectorizationFactor", 0x17uLL, a3);
          v43 = sub_1C47E3888((uint64_t)&v77, (uint64_t)__dst);
          v72 = " is unsafe. Ignoring the hint to let the compiler pick a more suitable value.";
          v73 = 77;
          sub_1C53B17B4(v43 + 80, (const void **)&v72);
          sub_1C61998EC((uint64_t)&v72, v43);
          v72 = (const char *)&off_1E814E570;
          if (v71 < 0)
            operator delete(v70);
          if (v69 < 0)
            operator delete(__dst[0]);
          *(_QWORD *)&v77 = &off_1E814E790;
          v44 = (char *)v85;
          if ((_DWORD)v86)
          {
            v45 = (unint64_t)v86 << 6;
            do
            {
              v46 = (void **)&v44[v45];
              if (v44[v45 - 17] < 0)
                operator delete(*(v46 - 5));
              if (*((char *)v46 - 41) < 0)
                operator delete(*(v46 - 8));
              v45 -= 64;
            }
            while (v45);
            v44 = (char *)v85;
          }
          if (v44 != v87)
            free(v44);
          if (v63[0])
            llvm::MetadataTracking::untrack((uint64_t)v63, (unsigned __int8 *)v63[0]);
          llvm::OptimizationRemarkEmitter::emit(v18, (llvm::DiagnosticInfoOptimizationBase *)&v72);
          v72 = (const char *)&off_1E814E790;
          v47 = (char *)v74;
          if (!v75)
            goto LABEL_124;
          v48 = (unint64_t)v75 << 6;
          do
          {
            v49 = (void **)&v47[v48];
            if (v47[v48 - 17] < 0)
              operator delete(*(v49 - 5));
            if (*((char *)v49 - 41) < 0)
              operator delete(*(v49 - 8));
            v48 -= 64;
          }
          while (v48);
LABEL_123:
          v47 = (char *)v74;
LABEL_124:
          if (v47 != v76)
            free(v47);
        }
LABEL_27:
        MaximizedVFForTarget = llvm::LoopVectorizationCostModel::getMaximizedVFForTarget(a1, a2, SmallestAndWidestTypes, HIDWORD(SmallestAndWidestTypes), &v62, a4);
        if ((_DWORD)MaximizedVFForTarget)
          v12 = MaximizedVFForTarget;
        else
          v12 = 1;
        llvm::LoopVectorizationCostModel::getMaximizedVFForTarget(a1, a2, SmallestAndWidestTypes, HIDWORD(SmallestAndWidestTypes), &v61, a4);
        return v12;
      }
      if (!v20)
        goto LABEL_27;
    }
    llvm::Loop::getStartLoc(*(llvm::Loop **)(a1 + 584), v63);
    v50 = v63[0];
    if (v63[0])
    {
      v51 = *((_QWORD *)v63[0] - *((unsigned int *)v63[0] + 2));
      if (*(_BYTE *)v51 != 15)
        v51 = *(_QWORD *)(v51 - 8 * *(unsigned int *)(v51 + 8));
      v52 = *((_DWORD *)v63[0] + 1);
      v50 = *((unsigned __int16 *)v63[0] + 1);
    }
    else
    {
      v51 = 0;
      v52 = 0;
    }
    v53 = **(_QWORD **)(*(_QWORD *)(a1 + 584) + 32);
    v54 = *(_QWORD *)(v53 + 56);
    DWORD2(v77) = 11;
    BYTE12(v77) = 2;
    v78 = v54;
    *(_QWORD *)&v79 = v51;
    *((_QWORD *)&v79 + 1) = __PAIR64__(v50, v52);
    v80 = "loop-vectorize";
    v81 = "VectorizationFactor";
    v82 = 19;
    v83 = 0;
    v84 = 0;
    v85 = v87;
    v86 = 0x400000000;
    v88 = 0;
    v89 = -1;
    v90 = v53;
    *(_QWORD *)&v77 = &off_1E814E570;
    v72 = "User-specified vectorization factor ";
    v73 = 36;
    sub_1C53B17B4((uint64_t)&v85, (const void **)&v72);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument((char *)__dst, "UserVectorizationFactor", 0x17uLL, a3);
    v55 = sub_1C47E3888((uint64_t)&v77, (uint64_t)__dst);
    v72 = " is ignored because the target does not support scalable vectors. The compiler will pick a more suitable value.";
    v73 = 111;
    sub_1C53B17B4(v55 + 80, (const void **)&v72);
    sub_1C61998EC((uint64_t)&v72, v55);
    v72 = (const char *)&off_1E814E570;
    if (v71 < 0)
      operator delete(v70);
    if (v69 < 0)
      operator delete(__dst[0]);
    *(_QWORD *)&v77 = &off_1E814E790;
    v56 = (char *)v85;
    if ((_DWORD)v86)
    {
      v57 = (unint64_t)v86 << 6;
      do
      {
        v58 = (void **)&v56[v57];
        if (v56[v57 - 17] < 0)
          operator delete(*(v58 - 5));
        if (*((char *)v58 - 41) < 0)
          operator delete(*(v58 - 8));
        v57 -= 64;
      }
      while (v57);
      v56 = (char *)v85;
    }
    if (v56 != v87)
      free(v56);
    if (v63[0])
      llvm::MetadataTracking::untrack((uint64_t)v63, (unsigned __int8 *)v63[0]);
    llvm::OptimizationRemarkEmitter::emit(v18, (llvm::DiagnosticInfoOptimizationBase *)&v72);
    v72 = (const char *)&off_1E814E790;
    v47 = (char *)v74;
    if (!v75)
      goto LABEL_124;
    v59 = (unint64_t)v75 << 6;
    do
    {
      v60 = (void **)&v47[v59];
      if (v47[v59 - 17] < 0)
        operator delete(*(v60 - 5));
      if (*((char *)v60 - 41) < 0)
        operator delete(*(v60 - 8));
      v59 -= 64;
    }
    while (v59);
    goto LABEL_123;
  }
  v24 = *(llvm::OptimizationRemarkEmitter **)(a1 + 648);
  v25 = ****(_QWORD ****)v24;
  if (*(_QWORD *)(v25 + 128)
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v25 + 72) + 48))(*(_QWORD *)(v25 + 72)))
  {
    llvm::Loop::getStartLoc(*(llvm::Loop **)(a1 + 584), &v67);
    v28 = v67;
    if (v67)
    {
      v29 = *(_QWORD *)&v67[-8 * *((unsigned int *)v67 + 2)];
      if (*(_BYTE *)v29 != 15)
        v29 = *(_QWORD *)(v29 - 8 * *(unsigned int *)(v29 + 8));
      v30 = *((_DWORD *)v67 + 1);
      v28 = *((unsigned __int16 *)v67 + 1);
    }
    else
    {
      v29 = 0;
      v30 = 0;
    }
    v31 = **(_QWORD **)(*(_QWORD *)(a1 + 584) + 32);
    v32 = *(_QWORD *)(v31 + 56);
    DWORD2(v77) = 11;
    BYTE12(v77) = 2;
    v78 = v32;
    *(_QWORD *)&v79 = v29;
    *((_QWORD *)&v79 + 1) = __PAIR64__(v28, v30);
    v80 = "loop-vectorize";
    v81 = "VectorizationFactor";
    v82 = 19;
    v83 = 0;
    v84 = 0;
    v85 = v87;
    v86 = 0x400000000;
    v88 = 0;
    v89 = -1;
    v90 = v31;
    *(_QWORD *)&v77 = &off_1E814E570;
    v72 = "User-specified vectorization factor ";
    v73 = 36;
    sub_1C53B17B4((uint64_t)&v85, (const void **)&v72);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument((char *)__dst, "UserVectorizationFactor", 0x17uLL, a3);
    v33 = sub_1C47E3888((uint64_t)&v77, (uint64_t)__dst);
    v72 = " is unsafe, clamping to maximum safe vectorization factor ";
    v73 = 58;
    sub_1C53B17B4(v33 + 80, (const void **)&v72);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument((char *)v63, "VectorizationFactor", 0x13uLL, v12);
    v34 = sub_1C47E3888(v33, (uint64_t)v63);
    sub_1C61998EC((uint64_t)&v72, v34);
    v72 = (const char *)&off_1E814E570;
    if (v66 < 0)
      operator delete(__p);
    if (v64 < 0)
      operator delete(v63[0]);
    if (v71 < 0)
      operator delete(v70);
    if (v69 < 0)
      operator delete(__dst[0]);
    *(_QWORD *)&v77 = &off_1E814E790;
    v35 = (char *)v85;
    if ((_DWORD)v86)
    {
      v36 = (unint64_t)v86 << 6;
      do
      {
        v37 = (void **)&v35[v36];
        if (v35[v36 - 17] < 0)
          operator delete(*(v37 - 5));
        if (*((char *)v37 - 41) < 0)
          operator delete(*(v37 - 8));
        v36 -= 64;
      }
      while (v36);
      v35 = (char *)v85;
    }
    if (v35 != v87)
      free(v35);
    if (v67)
      llvm::MetadataTracking::untrack((uint64_t)&v67, v67);
    llvm::OptimizationRemarkEmitter::emit(v24, (llvm::DiagnosticInfoOptimizationBase *)&v72);
    v72 = (const char *)&off_1E814E790;
    v38 = (char *)v74;
    if (v75)
    {
      v39 = (unint64_t)v75 << 6;
      do
      {
        v40 = (void **)&v38[v39];
        if (v38[v39 - 17] < 0)
          operator delete(*(v40 - 5));
        if (*((char *)v40 - 41) < 0)
          operator delete(*(v40 - 8));
        v39 -= 64;
      }
      while (v39);
      v38 = (char *)v74;
    }
    if (v38 != v76)
      free(v38);
  }
  return v12;
}

uint64_t llvm::LoopVectorizationCostModel::getSmallestAndWidestTypes(llvm::LoopVectorizationCostModel *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int PrimitiveSizeInBits;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *i;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t *v21;
  unint64_t v22;

  if (*((_DWORD *)this + 255) != *((_DWORD *)this + 256)
    || (v1 = *((_QWORD *)this + 76), v2 = *(_QWORD *)(v1 + 104), v3 = *(_QWORD *)(v1 + 112), v2 == v3))
  {
    v10 = *((_QWORD *)this + 126);
    v11 = 1016;
    if (v10 == *((_QWORD *)this + 125))
      v11 = 1020;
    v12 = *(unsigned int *)((char *)this + v11);
    if ((_DWORD)v12)
    {
      v13 = 8 * v12;
      v4 = 0xFFFFFFFFLL;
      for (i = (uint64_t *)*((_QWORD *)this + 126); (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; ++i)
      {
        v13 -= 8;
        if (!v13)
        {
          v5 = 8;
          return v4 | (v5 << 32);
        }
      }
    }
    else
    {
      i = (uint64_t *)*((_QWORD *)this + 126);
    }
    v15 = (_QWORD *)(v10 + 8 * v12);
    if (i == v15)
    {
      v5 = 8;
      v4 = 0xFFFFFFFFLL;
    }
    else
    {
      v16 = *(_QWORD *)(*((_QWORD *)this + 82) + 40) + 272;
      v17 = *i;
      LODWORD(v5) = 8;
      LODWORD(v4) = -1;
LABEL_24:
      v18 = v17;
      if ((*(_DWORD *)(v17 + 8) & 0xFE) == 0x12)
        v18 = **(_QWORD **)(v17 + 16);
      sub_1C4768AD0(v16, v18);
      if (v4 >= v19)
        v4 = v19;
      else
        v4 = v4;
      if ((*(_DWORD *)(v17 + 8) & 0xFE) == 0x12)
        v17 = **(_QWORD **)(v17 + 16);
      sub_1C4768AD0(v16, v17);
      if (v5 <= v20)
        v5 = v20;
      else
        v5 = v5;
      v21 = (unint64_t *)(i + 1);
      while (v21 != v15)
      {
        v22 = *v21++;
        v17 = v22;
        if (v22 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          i = (uint64_t *)(v21 - 1);
          goto LABEL_24;
        }
      }
    }
  }
  else
  {
    v4 = 0xFFFFFFFFLL;
    LODWORD(v5) = -1;
    do
    {
      v6 = *(_QWORD *)(v2 + 56);
      if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
        v6 = **(_QWORD **)(v6 + 16);
      v7 = *(_DWORD *)(v2 + 168);
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v6);
      if (PrimitiveSizeInBits >= v7)
        v9 = v7;
      else
        v9 = PrimitiveSizeInBits;
      if (v9 >= v5)
        v5 = v5;
      else
        v5 = v9;
      v2 += 176;
    }
    while (v2 != v3);
  }
  return v4 | (v5 << 32);
}

unint64_t llvm::LoopVectorizationCostModel::getMaximizedVFForTarget(uint64_t a1, unsigned __int32 a2, uint64_t a3, unsigned int a4, _DWORD *a5, int a6)
{
  int v12;
  uint64_t v13;
  unint64_t v14;
  int8x8_t v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  uint8x8_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm::Type *v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  unint64_t v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  _QWORD *v47;
  BOOL v48;
  unsigned int v49;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int *v57;
  char v58;
  _DWORD *v59;
  unint64_t v60;
  BOOL v61;
  uint64_t *v63;
  uint64_t v64;
  char *v65;
  _DWORD *v66;
  llvm::FixedVectorType *v67;
  uint64_t v68;
  _DWORD *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  _DWORD *v74;
  uint64_t v75;
  void *v76;
  unsigned int v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD v81[10];

  v81[8] = *MEMORY[0x1E0C80C00];
  v12 = a5[1];
  if (v12 == 1)
    v13 = 2;
  else
    v13 = 1;
  v14 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 616) + 696))(**(_QWORD **)(a1 + 616), v13);
  v16 = v14;
  v18 = v17;
  if (v12 != 1 || a5[1] == 1)
  {
    v20 = 1 << ~__clz(v14 / a4);
    if (v14 >= a4)
      v20 = v20;
    else
      v20 = 0;
    v21 = v20 < *a5;
    v22 = ((unint64_t)(v12 == 1) << 32) | v20;
    if (v21)
      v23 = v22;
    else
      v23 = *(_QWORD *)a5;
    if (!(_DWORD)v23)
      goto LABEL_25;
  }
  else
  {
    v23 = *(_QWORD *)a5;
    if (!*(_QWORD *)a5)
    {
LABEL_25:
      v27 = 0;
      LODWORD(v23) = 1;
      return v23 | (v27 << 32);
    }
  }
  if (a2 - 1 >= v23
    || a6 && (v15.i32[0] = a2, v24 = (uint8x8_t)vcnt_s8(v15), v24.i16[0] = vaddlv_u8(v24), v24.i32[0] > 1u))
  {
    v25 = 0;
    v26 = v23 & 0xFFFFFFFF00000000;
    if (a3 <= 0x20 && a3 < a4 && v26 != 0x100000000)
    {
      if (*(_DWORD *)(*(_QWORD *)(a1 + 664) + 88))
      {
        v25 = 0;
      }
      else
      {
        v28 = ****(_QWORD ****)(*(_QWORD *)(a1 + 584) + 32);
        LODWORD(v76) = a3;
        switch((_DWORD)a3)
        {
          case 0x20:
            llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(_QWORD *)v28 + 1960), (llvm::Type *)v23);
            v75 = v30;
            v31 = *(_QWORD *)v28 + 1960;
            break;
          case 0x10:
            llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(_QWORD *)v28 + 1936), (llvm::Type *)v23);
            v75 = v32;
            v31 = *(_QWORD *)v28 + 1936;
            break;
          case 8:
            llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(_QWORD *)v28 + 1912), (llvm::Type *)v23);
            v75 = v71;
            v31 = *(_QWORD *)v28 + 1912;
            break;
          case 1:
            llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(_QWORD *)v28 + 1888), (llvm::Type *)v23);
            v75 = v72;
            v31 = *(_QWORD *)v28 + 1888;
            break;
          default:
            v66 = sub_1C5270984(*(_QWORD *)v28 + 2168, &v76);
            v67 = (llvm::FixedVectorType *)*((_QWORD *)v66 + 1);
            if (!v67)
            {
              v67 = (llvm::FixedVectorType *)sub_1C484358C(*(_QWORD *)v28 + 2040, 24, 3);
              v73 = (int)v76;
              *(_QWORD *)v67 = v28;
              *((_QWORD *)v67 + 2) = 0;
              *((_QWORD *)v67 + 1) = (v73 << 8) | 0xDu;
              *((_QWORD *)v66 + 1) = v67;
            }
            llvm::FixedVectorType::get(v67, (llvm::Type *)v23);
            v75 = v68;
            LODWORD(v76) = a3;
            v69 = sub_1C5270984(*(_QWORD *)v28 + 2168, &v76);
            v31 = *((_QWORD *)v69 + 1);
            if (!v31)
            {
              v74 = v69;
              v31 = sub_1C484358C(*(_QWORD *)v28 + 2040, 24, 3);
              v70 = (int)v76;
              *(_QWORD *)v31 = v28;
              *(_QWORD *)(v31 + 16) = 0;
              *(_DWORD *)(v31 + 8) = (v70 << 8) | 0xD;
              *(_DWORD *)(v31 + 12) = 0;
              *((_QWORD *)v74 + 1) = v31;
            }
            break;
        }
        if (v18 == 1)
        v33 = 1 << ~__clz(v16 / a3);
        if (v16 >= a3)
          v34 = (llvm::Type *)v33;
        else
          v34 = 0;
        v35 = llvm::FixedVectorType::get((llvm::FixedVectorType *)v31, v34);
        v37 = v36;
        v38 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, double))(***(_QWORD ***)(a1 + 616) + 888))(**(_QWORD **)(a1 + 616), 32, v75, 0, 0, 0, 0, v35);
        v40 = v39;
        v25 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 616)
                                                                                                  + 888))(**(_QWORD **)(a1 + 616), 32, v37, 0, 0, 0, 0) < v38;
        if (v41 != v40)
          v25 = v41 < v40;
      }
    }
    v27 = HIDWORD(v23);
    if (byte_1ED82AB78
      || v25
      || !word_1ED82AB00
      && (*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 616) + 728))(**(_QWORD **)(a1 + 616)))
    {
      if (v12 != 1 || a5[1] == 1)
      {
        v44 = 1 << ~__clz(v16 / a3);
        if (v16 >= a3)
          v44 = v44;
        else
          v44 = 0;
        v45 = v44 < *a5;
        v46 = ((unint64_t)(v12 == 1) << 32) | v44;
        if (v45)
          v43 = v46;
        else
          v43 = *(_QWORD *)a5;
      }
      else
      {
        v43 = *(_QWORD *)a5;
      }
      v47 = v81;
      v79 = v81;
      v80 = 0x800000000;
      v48 = HIDWORD(v43) != 1 && v26 == 0x100000000;
      v49 = 2 * v23;
      if (v48 || v49 > v43)
      {
        v51 = 0;
      }
      else
      {
        LODWORD(v51) = 0;
        do
        {
          if (v51 >= HIDWORD(v80))
          {
            v52 = v47;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, (uint64_t)v47, v51 + 1, 8);
            v47 = v52;
            LODWORD(v51) = v80;
          }
          v79[v51] = v26 | v49;
          v51 = (v80 + 1);
          LODWORD(v80) = v80 + 1;
          v49 *= 2;
        }
        while (v49 <= v43);
        v47 = v79;
      }
      llvm::LoopVectorizationCostModel::calculateRegisterUsage(a1, (uint64_t)v47, (_QWORD *)v51, (uint64_t)&v76);
      LODWORD(v53) = v77;
      while (1)
      {
        v53 = (v53 - 1);
        if ((int)v53 < 0)
          break;
        v54 = (char *)v76 + 176 * v53;
        v55 = *((unsigned int *)v54 + 34);
        if ((_DWORD)v55)
        {
          v56 = (unsigned int *)*((_QWORD *)v54 + 16);
          v57 = &v56[2 * v55];
          v58 = 1;
          do
          {
            v58 &= v56[1] <= (*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 616) + 672))(**(_QWORD **)(a1 + 616), *v56);
            v56 += 2;
          }
          while (v56 != v57);
          if ((v58 & 1) == 0)
            continue;
        }
        v59 = &v79[v53];
        LODWORD(v23) = *v59;
        v27 = v59[1];
        break;
      }
      v60 = (*(uint64_t (**)(_QWORD, uint64_t, BOOL))(***(_QWORD ***)(a1 + 616) + 736))(**(_QWORD **)(a1 + 616), a3, v12 == 1);
      if ((_DWORD)v60)
      {
        v61 = HIDWORD(v60) != 1 && (_DWORD)v27 == 1;
        if (!v61 && v23 < v60)
        {
          LODWORD(v23) = v60;
          v27 = HIDWORD(v60);
        }
      }
      sub_1C63DA638((unsigned int *)(a1 + 560));
      sub_1C63DA690((_DWORD *)(a1 + 152));
      sub_1C63DA690((_DWORD *)(a1 + 176));
      v63 = (uint64_t *)v76;
      if (v77)
      {
        v64 = 176 * v77;
        v65 = (char *)v76 - 176;
        do
        {
          sub_1C63DA924((uint64_t)&v65[v64]);
          v64 -= 176;
        }
        while (v64);
        v63 = (uint64_t *)v76;
      }
      if (v63 != &v78)
        free(v63);
      if (v79 != v81)
        free(v79);
    }
  }
  else
  {
    v27 = 0;
    v23 = 1 << ~__clz(a2);
  }
  return v23 | (v27 << 32);
}

unint64_t llvm::LoopVectorizationCostModel::computeMaxVF(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t SmallConstantTripCount;
  uint64_t v7;
  unsigned __int32 v8;
  int v9;
  uint64_t ExitingBlock;
  unint64_t v11;
  unint64_t v12;
  int v13;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  llvm::OptimizationRemarkEmitter *v20;
  const llvm::Loop *v21;

  if (**(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 608) + 56) + 8))
  {
    v4 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 616) + 88))(**(_QWORD **)(a1 + 616));
    if ((_DWORD)v4)
    {
      llvm::reportVectorizationFailure(v4, v5, "runtime pointer checks needed. Not enabled for divergent target", 63, (uint64_t)"CantVersionLoopWithDivergentTarget", 34, *(llvm::OptimizationRemarkEmitter **)(a1 + 648), *(const llvm::Loop **)(a1 + 584), 0);
      return 0;
    }
  }
  SmallConstantTripCount = llvm::ScalarEvolution::getSmallConstantTripCount(*(llvm::ScalarEvolution **)(*(_QWORD *)(a1 + 592) + 88), *(const llvm::Loop **)(a1 + 584));
  if ((_DWORD)SmallConstantTripCount == 1)
  {
    llvm::reportVectorizationFailure(SmallConstantTripCount, v7, "loop trip count is one, irrelevant for vectorization", 52, (uint64_t)"SingleIterationLoop", 19, *(llvm::OptimizationRemarkEmitter **)(a1 + 648), *(const llvm::Loop **)(a1 + 584), 0);
    return 0;
  }
  v8 = SmallConstantTripCount;
  v9 = *(_DWORD *)(a1 + 120);
  if (!v9)
    return llvm::LoopVectorizationCostModel::computeFeasibleMaxVF(a1, v8, a2, 0);
  if ((v9 - 1) < 2
    && (llvm::LoopVectorizationCostModel::runtimeChecksRequired((llvm::LoopVectorizationCostModel *)a1, v7) & 1) != 0)
  {
    return 0;
  }
  ExitingBlock = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock(*(_QWORD **)(a1 + 584));
  if (ExitingBlock != llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*(_QWORD *)(a1 + 584)))
  {
    if (*(_DWORD *)(a1 + 120) != 3)
      return 0;
    *(_DWORD *)(a1 + 120) = 0;
    return llvm::LoopVectorizationCostModel::computeFeasibleMaxVF(a1, v8, a2, 0);
  }
  if (word_1ED82AC80)
  {
    if (byte_1ED82ACF8)
      goto LABEL_14;
    goto LABEL_13;
  }
  if (((*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 616) + 576))(**(_QWORD **)(a1 + 616)) & 1) == 0)
LABEL_13:
    llvm::InterleavedAccessInfo::invalidateGroupsRequiringScalarEpilogue(*(_QWORD *)(a1 + 672));
LABEL_14:
  v12 = llvm::LoopVectorizationCostModel::computeFeasibleMaxVF(a1, v8, a2, 1);
  v11 = v12;
  if (HIDWORD(v12) != 1 || v12 == 0)
  {
    if ((v12 & 0xFFFFFFFE) != 0 && !v13)
    {
LABEL_23:
      v15 = (char *)&loc_1C6072AE4
          + 4
          * byte_1C8677B44[*(unsigned __int16 *)(llvm::PredicatedScalarEvolution::getBackedgeTakenCount(*(int8x16_t **)(a1 + 592))
                                               + 24)];
      __asm { BR              X11 }
    }
  }
  else if (!v13)
  {
    goto LABEL_23;
  }
  v16 = llvm::LoopVectorizationLegality::prepareToFoldTailByMasking(*(llvm::LoopVectorizationLegality **)(a1 + 608));
  if ((_DWORD)v16)
  {
    *(_BYTE *)(a1 + 124) = 1;
  }
  else
  {
    v18 = *(_DWORD *)(a1 + 120);
    if (v18 == 4)
      return 0;
    if (v18 != 3)
    {
      v20 = *(llvm::OptimizationRemarkEmitter **)(a1 + 648);
      v21 = *(const llvm::Loop **)(a1 + 584);
      if (v8)
        llvm::reportVectorizationFailure(v16, v17, "cannot optimize for size and vectorize at the same time. Enable vectorization of this loop with '#pragma clang loop vectorize(enable)' when compiling with -Os/-Oz", 162, (uint64_t)"NoTailLoopWithOptForSize", 24, v20, v21, 0);
      else
        llvm::reportVectorizationFailure(v16, v17, "unable to calculate the loop count due to complex control flow", 62, (uint64_t)"UnknownLoopCountComplexCFG", 26, v20, v21, 0);
      return 0;
    }
    *(_DWORD *)(a1 + 120) = 0;
  }
  return v11;
}

uint64_t llvm::LoopVectorizationCostModel::calculateRegisterUsage@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *v7;
  uint64_t i;
  uint64_t j;
  int *v10;
  unsigned int v11;
  int *v12;
  llvm::BasicBlock *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  llvm::SmallPtrSetImplBase *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int *v37;
  int *v38;
  _DWORD *v39;
  _DWORD *v40;
  uint64_t v41;
  unint64_t v42;
  int *v43;
  uint64_t v44;
  uint64_t k;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t m;
  _QWORD *v49;
  _QWORD *v50;
  unsigned int v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t *v57;
  char *v58;
  uint64_t *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t n;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t *v70;
  _QWORD *v71;
  uint64_t v72;
  char *v73;
  _DWORD *v74;
  int v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t *v82;
  uint64_t ***v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  char *v89;
  _DWORD *v90;
  int v91;
  char *v92;
  uint64_t **v93;
  unint64_t v94;
  unsigned int v95;
  int v96;
  int v97;
  BOOL v98;
  uint64_t v99;
  __n128 v100;
  int v101;
  int v102;
  BOOL v103;
  uint64_t v104;
  __n128 v105;
  int v106;
  int v107;
  unsigned int *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v119;
  uint64_t ii;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t ***v127;
  int v128;
  uint64_t **v129;
  unsigned int v130;
  int v131;
  BOOL v132;
  llvm::Type *v133;
  uint64_t v134;
  __n128 v135;
  int v136;
  int v137;
  unsigned int v138;
  BOOL v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  int *v144;
  int v145;
  unint64_t *v146;
  unint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  unsigned int v153;
  _QWORD *v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  unsigned int v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int v164;
  char *v165;
  char *v166;
  uint64_t v167;
  int v168;
  _BYTE v169[64];
  char *v170;
  char *v171;
  uint64_t v172;
  int v173;
  _BYTE v174[64];
  int *v175;
  uint64_t v176;
  unsigned int v177;
  char v178[8];
  uint64_t v179;
  void *__p;
  int *v181;
  __int128 v182;
  _BYTE v183[24];
  void *v184;
  uint64_t v185;
  _BYTE v186[40];
  __int128 v187;
  _QWORD v188[3];
  _QWORD *v189;
  __int128 v190;
  _QWORD v191[3];
  _QWORD v192[7];
  _QWORD v193[72];
  void *v194[2];
  uint64_t v195;
  int v196;
  uint64_t v197;
  uint64_t *v198;
  void *v199;
  uint64_t v200;
  _BYTE v201[512];
  _QWORD v202[5];
  _QWORD v203[2];
  uint64_t v204;
  _QWORD v205[5];
  _QWORD v206[2];
  _QWORD v207[7];

  v7 = &v182;
  v207[4] = *MEMORY[0x1E0C80C00];
  sub_1C4DFE414((uint64_t)v178, *(_QWORD *)(a1 + 584));
  llvm::LoopBlocksDFS::perform((llvm::LoopBlocksDFS *)v178, *(llvm::LoopInfo **)(a1 + 600));
  v202[0] = 1;
  for (i = 1; i != 5; ++i)
    LODWORD(v202[i]) = -1;
  v203[0] = &v204;
  v203[1] = 0x400000000;
  v205[0] = 1;
  for (j = 12; j != 16; ++j)
    LODWORD(v202[j]) = -1;
  v206[0] = v207;
  v206[1] = 0x400000000;
  v199 = v201;
  v200 = 0x4000000000;
  v175 = 0;
  v176 = 0;
  v177 = 0;
  v170 = v174;
  v171 = v174;
  v172 = 8;
  v173 = 0;
  v165 = v169;
  v166 = v169;
  v167 = 8;
  v168 = 0;
  v10 = v181;
  v158 = (char *)__p;
  v154 = (_QWORD *)a4;
  v151 = a3;
  if (v181 == __p)
  {
    v11 = 0;
    v12 = 0;
    v162 = 0;
    v163 = 0;
    v164 = 0;
    goto LABEL_69;
  }
  a3 = v188;
  v7 = (__int128 *)v183;
  a4 = 76;
  do
  {
    v13 = (llvm::BasicBlock *)*((_QWORD *)v10 - 1);
    v10 -= 2;
    llvm::BasicBlock::instructionsWithoutDebug(v13, 1, (uint64_t)&v187);
    *(_OWORD *)v194 = v187;
    if (v189)
    {
      if (v189 == v188)
      {
        v198 = &v195;
        (*(void (**)(_QWORD *))(v188[0] + 24))(v188);
      }
      else
      {
        v198 = (uint64_t *)(*(uint64_t (**)(void))(*v189 + 16))();
      }
    }
    else
    {
      v198 = 0;
    }
    v182 = v190;
    if (v192[0])
    {
      if ((_QWORD *)v192[0] == v191)
      {
        v184 = v183;
        (*(void (**)(_QWORD *, _BYTE *))(v191[0] + 24))(v191, v183);
      }
      else
      {
        v184 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v192[0] + 16))();
      }
    }
    else
    {
      v184 = 0;
    }
LABEL_18:
    v14 = (char *)v194[0];
    while (v14 != (char *)v182)
    {
      if (v14)
        v15 = v14 - 24;
      else
        v15 = 0;
      v16 = v200;
      if (v200 >= (unint64_t)HIDWORD(v200))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, (uint64_t)v201, v200 + 1, 8);
        v16 = v200;
      }
      *((_QWORD *)v199 + v16) = v15;
      LODWORD(v200) = v200 + 1;
      v17 = *((_DWORD *)v15 + 5);
      if ((v17 & 0x40000000) != 0)
      {
        v19 = (uint64_t *)*((_QWORD *)v15 - 1);
        v18 = v17 & 0x7FFFFFF;
        if (!v18)
          goto LABEL_41;
      }
      else
      {
        v18 = v17 & 0x7FFFFFF;
        v19 = (uint64_t *)&v15[-32 * v18];
        if (!v18)
          goto LABEL_41;
      }
      v20 = 32 * v18;
      do
      {
        v21 = *v19;
        if (*(unsigned __int8 *)(*v19 + 16) <= 0x1Bu)
          v21 = 0;
        v162 = v21;
        if (v21)
        {
          v22 = *(_QWORD *)(a1 + 584);
          v23 = sub_1C477672C(v22 + 56, *(_QWORD *)(v21 + 40));
          v24 = *(_QWORD *)(v22 + 64);
          if (v24 == *(_QWORD *)(v22 + 56))
            v25 = 76;
          else
            v25 = 72;
          if (v23 == (_QWORD *)(v24 + 8 * *(unsigned int *)(v22 + v25)))
          {
            v27 = v162;
            v28 = (llvm::SmallPtrSetImplBase *)&v165;
          }
          else
          {
            v26 = v200;
            *((_DWORD *)sub_1C5B7B680(&v175, &v162) + 2) = v26;
            v27 = v162;
            v28 = (llvm::SmallPtrSetImplBase *)&v170;
          }
          sub_1C4774094(v28, v27);
        }
        v19 += 4;
        v20 -= 32;
      }
      while (v20);
LABEL_41:
      while (1)
      {
        v14 = (char *)*((_QWORD *)v194[0] + 1);
        v194[0] = v14;
        if (v14 == v194[1])
          break;
        if (!v198)
        {
          sub_1C485C2F0();
          goto LABEL_288;
        }
        if ((*(unsigned int (**)(void))(*v198 + 48))())
          goto LABEL_18;
      }
    }
    v29 = v184;
    if (v184 == v183)
    {
      v29 = v183;
      v30 = 4;
    }
    else
    {
      if (!v184)
        goto LABEL_50;
      v30 = 5;
    }
    (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_50:
    v31 = v198;
    if (v198 == &v195)
    {
      v31 = &v195;
      v32 = 4;
    }
    else
    {
      if (!v198)
        goto LABEL_55;
      v32 = 5;
    }
    (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_55:
    v33 = (_QWORD *)v192[0];
    if ((_QWORD *)v192[0] == v191)
    {
      v33 = v191;
      v34 = 4;
LABEL_57:
      (*(void (**)(void))(*v33 + 8 * v34))();
      goto LABEL_58;
    }
    if (v192[0])
    {
      v34 = 5;
      goto LABEL_57;
    }
LABEL_58:
    v35 = v189;
    if (v189 == v188)
    {
      v35 = v188;
      v36 = 4;
LABEL_60:
      (*(void (**)(void))(*v35 + 8 * v36))();
      continue;
    }
    if (v189)
    {
      v36 = 5;
      goto LABEL_60;
    }
  }
  while (v10 != (int *)v158);
  v162 = 0;
  v163 = 0;
  v164 = 0;
  v12 = v175;
  v11 = v177;
  if ((_DWORD)v176)
  {
    v10 = &v175[4 * v177];
    a4 = (uint64_t)v154;
    a3 = v151;
    v7 = &v182;
    if (v177)
    {
      v149 = 0;
      while ((*(_QWORD *)&v175[v149] | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v149 += 4;
        if (4 * v177 == v149)
        {
          v37 = &v175[4 * v177];
          goto LABEL_70;
        }
      }
LABEL_288:
      v37 = &v12[v149];
    }
    else
    {
      v37 = v175;
    }
  }
  else
  {
    a4 = (uint64_t)v154;
    a3 = v151;
    v7 = &v182;
LABEL_69:
    v37 = &v12[4 * v11];
    v10 = v37;
  }
LABEL_70:
  v38 = &v12[4 * v11];
LABEL_71:
  while (v37 != v38)
  {
    v39 = sub_1C63DD0C0((uint64_t)&v162, v37 + 2);
    v40 = v39;
    v41 = *(_QWORD *)v37;
    v42 = v39[4];
    if (v42 >= v39[5])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v39 + 2), (uint64_t)(v39 + 6), v42 + 1, 8);
      v42 = v40[4];
    }
    *(_QWORD *)(*((_QWORD *)v40 + 1) + 8 * v42) = v41;
    ++v40[4];
    v43 = v37 + 4;
    v37 = v10;
    if (v43 != v10)
    {
      v37 = v43;
      while ((*(_QWORD *)v37 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v37 += 4;
        if (v37 == v10)
        {
          v37 = v10;
          goto LABEL_71;
        }
      }
    }
  }
  v194[0] = &v197;
  v194[1] = &v197;
  v195 = 8;
  v196 = 0;
  v193[3] = 0;
  *(__int128 *)((char *)v7 + 248) = 0u;
  *(__int128 *)((char *)v7 + 232) = 0u;
  *(__int128 *)((char *)v7 + 216) = 0u;
  *(__int128 *)((char *)v7 + 200) = 0u;
  *(__int128 *)((char *)v7 + 184) = 0u;
  *(__int128 *)((char *)v7 + 168) = 0u;
  *(__int128 *)((char *)v7 + 152) = 0u;
  *(__int128 *)((char *)v7 + 136) = 0u;
  *(__int128 *)((char *)v7 + 120) = 0u;
  *(__int128 *)((char *)v7 + 104) = 0u;
  v44 = 1;
  *(_QWORD *)&v187 = 1;
  do
  {
    LODWORD(v188[v44 - 2]) = -1;
    ++v44;
  }
  while (v44 != 5);
  v189 = (_QWORD *)&v190 + 1;
  *(_QWORD *)&v190 = 0x400000000;
  v192[0] = 1;
  for (k = 12; k != 16; ++k)
    LODWORD(v188[k - 2]) = -1;
  v192[5] = v193;
  v192[6] = 0x400000000;
  *(_QWORD *)a4 = a4 + 16;
  *(_QWORD *)(a4 + 8) = 0x800000000;
  if ((unint64_t)a3 < 9)
  {
    if (a3)
    {
      v46 = (_QWORD *)(a4 + 104);
      v47 = a3;
      do
      {
        sub_1C63DA7BC(v46 - 11, &v187);
        sub_1C63DA7BC(v46, v192);
        v46 += 22;
        v47 = (_QWORD *)((char *)v47 - 1);
      }
      while (v47);
    }
    *(_DWORD *)(a4 + 8) = (_DWORD)a3;
  }
  else
  {
    sub_1C63DD2DC(a4, (unint64_t)a3, &v187);
  }
  sub_1C63DA924((uint64_t)&v187);
  *(__int128 *)((char *)v7 + 72) = 0u;
  *(__int128 *)((char *)v7 + 56) = 0u;
  *(__int128 *)((char *)v7 + 40) = 0u;
  *(__int128 *)((char *)v7 + 24) = 0u;
  *(__int128 *)((char *)v7 + 8) = 0u;
  *(_QWORD *)&v182 = 1;
  for (m = 8; m != 40; m += 8)
    *(_DWORD *)&v183[m - 16] = -1;
  v184 = v186;
  v185 = 0x400000000;
  v49 = v188;
  *(_QWORD *)&v187 = v188;
  *((_QWORD *)&v187 + 1) = 0x800000000;
  if ((unint64_t)a3 < 9)
  {
    if (a3)
    {
      v50 = a3;
      do
      {
        v49 = sub_1C63DA7BC(v49, &v182) + 11;
        v50 = (_QWORD *)((char *)v50 - 1);
      }
      while (v50);
    }
    DWORD2(v187) = (_DWORD)a3;
  }
  else
  {
    sub_1C63DD3AC((uint64_t)&v187, (unint64_t)a3, &v182);
  }
  if (v184 != v186)
    free(v184);
  if ((v182 & 1) == 0)
    MEMORY[0x1CAA32FB4](*((_QWORD *)&v182 + 1), 4);
  v152 = *(_QWORD **)(a1 + 616);
  v161 = 0;
  v153 = v200;
  if ((_DWORD)v200)
  {
    v51 = 0;
    while (1)
    {
      v155 = v51;
      v156 = *((_QWORD *)v199 + v51);
      v52 = sub_1C63DD0C0((uint64_t)&v162, (int *)&v161);
      v53 = v52[4];
      if ((_DWORD)v53)
      {
        v54 = (uint64_t *)*((_QWORD *)v52 + 1);
        v55 = 8 * v53;
        do
        {
          v56 = sub_1C477672C((uint64_t)v194, *v54);
          if (v194[1] == v194[0])
            v57 = (uint64_t *)((char *)&v195 + 4);
          else
            v57 = &v195;
          if (v56 != (_QWORD *)((char *)v194[1] + 8 * *(unsigned int *)v57))
          {
            *v56 = -2;
            ++v196;
          }
          ++v54;
          v55 -= 8;
        }
        while (v55);
      }
      v58 = (char *)sub_1C477672C((uint64_t)&v170, v156);
      if (v171 == v170)
        v59 = (uint64_t *)((char *)&v172 + 4);
      else
        v59 = &v172;
      if (v58 == &v171[8 * *(unsigned int *)v59])
        goto LABEL_120;
      v60 = sub_1C477672C(a1 + 680, v156);
      v61 = *(_QWORD *)(a1 + 688);
      v62 = 696;
      if (v61 == *(_QWORD *)(a1 + 680))
        v62 = 700;
      if (v60 != (_QWORD *)(v61 + 8 * *(unsigned int *)(a1 + v62)))
        goto LABEL_120;
      if ((_DWORD)v151)
        break;
LABEL_119:
      sub_1C4774094((llvm::SmallPtrSetImplBase *)v194, v156);
LABEL_120:
      v51 = v155 + 1;
      v161 = v155 + 1;
      if (v155 + 1 >= v153)
      {
        LODWORD(a3) = (_DWORD)v151;
        goto LABEL_211;
      }
    }
    v63 = 0;
    while (2)
    {
      *(_QWORD *)&v182 = 1;
      for (n = 8; n != 40; n += 8)
        *(_DWORD *)&v183[n - 16] = -1;
      v184 = v186;
      v185 = 0x400000000;
      v65 = a2 + 8 * v63;
      if (*(_DWORD *)(v65 + 4) != 1 && *(_DWORD *)v65 == 1)
      {
        if (v194[1] == v194[0])
          v66 = (uint64_t *)((char *)&v195 + 4);
        else
          v66 = &v195;
        v67 = *(unsigned int *)v66;
        if ((_DWORD)v67)
        {
          v68 = 8 * v67;
          v69 = (unint64_t *)v194[1];
          while (*v69 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v69;
            v68 -= 8;
            if (!v68)
              goto LABEL_195;
          }
        }
        else
        {
          v69 = (unint64_t *)v194[1];
        }
        v70 = (unint64_t *)((char *)v194[1] + 8 * v67);
        if (v69 != v70)
        {
          v71 = (_QWORD *)*v69;
LABEL_138:
          v160 = 0;
          v160 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 616) + 680))(**(_QWORD **)(a1 + 616), 0, *v71);
          v72 = sub_1C63D42E4((uint64_t)&v182, &v160);
          v73 = (char *)v184 + 8 * v185;
          v74 = (_DWORD *)sub_1C63D4340((uint64_t)&v182, &v160);
          if ((char *)v72 == v73)
            v75 = 1;
          else
            v75 = *v74 + 1;
          *v74 = v75;
          v76 = v69 + 1;
          while (v76 != v70)
          {
            v77 = *v76++;
            v71 = (_QWORD *)v77;
            if (v77 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v69 = v76 - 1;
              goto LABEL_138;
            }
          }
        }
        goto LABEL_195;
      }
      sub_1C63D43F0(a1, *(_QWORD *)v65);
      if (v194[1] == v194[0])
        v78 = (uint64_t *)((char *)&v195 + 4);
      else
        v78 = &v195;
      v79 = *(unsigned int *)v78;
      if ((_DWORD)v79)
      {
        v80 = 8 * v79;
        v81 = (unint64_t *)v194[1];
        while (*v81 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v81;
          v80 -= 8;
          if (!v80)
            goto LABEL_195;
        }
      }
      else
      {
        v81 = (unint64_t *)v194[1];
      }
      v82 = (unint64_t *)((char *)v194[1] + 8 * v79);
      if (v81 != v82)
      {
        v83 = (uint64_t ***)*v81;
LABEL_156:
        v84 = sub_1C477672C(a1 + 840, (uint64_t)v83);
        v85 = *(_QWORD *)(a1 + 848);
        v86 = 856;
        if (v85 == *(_QWORD *)(a1 + 840))
          v86 = 860;
        if (v84 == (_QWORD *)(v85 + 8 * *(unsigned int *)(a1 + v86)))
        {
          if (sub_1C63D4494(a1, (uint64_t)v83, *(_QWORD *)v65))
          {
            v160 = 0;
            v160 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t **))(***(_QWORD ***)(a1 + 616) + 680))(**(_QWORD **)(a1 + 616), 0, *v83);
            v150 = sub_1C63D42E4((uint64_t)&v182, &v160);
            v89 = (char *)v184 + 8 * v185;
            v90 = (_DWORD *)sub_1C63D4340((uint64_t)&v182, &v160);
            if ((char *)v150 == v89)
              v91 = 1;
            else
              v91 = *v90 + 1;
          }
          else
          {
            v160 = 0;
            v160 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t **))(***(_QWORD ***)(a1 + 616) + 680))(**(_QWORD **)(a1 + 616), 1, *v83);
            v92 = (char *)sub_1C63D42E4((uint64_t)&v182, &v160);
            v93 = *v83;
            v94 = *(_QWORD *)v65;
            v95 = *((unsigned __int8 *)*v83 + 8);
            if (v92 == (char *)v184 + 8 * v185)
            {
              if (v95 == 12 || (v95 <= 0x14 ? (v98 = ((1 << v95) & 0x10A07F) == 0) : (v98 = 1), v98))
              {
                v96 = 0;
              }
              else
              {
                if (HIDWORD(v94) == 1)
                  v100.n128_f64[0] = llvm::ScalableVectorType::get(v93, (llvm::Type *)v94);
                else
                  v100.n128_f64[0] = llvm::FixedVectorType::get((llvm::FixedVectorType *)v93, (llvm::Type *)v94);
                v101 = (*(uint64_t (**)(_QWORD, uint64_t, __n128))(*(_QWORD *)*v152 + 488))(*v152, v99, v100);
                if (v102)
                  v96 = 0;
                else
                  v96 = v101;
              }
              *(_DWORD *)sub_1C63D4340((uint64_t)&v182, &v160) = v96;
              goto LABEL_159;
            }
            if (v95 == 12 || (v95 <= 0x14 ? (v103 = ((1 << v95) & 0x10A07F) == 0) : (v103 = 1), v103))
            {
              v97 = 0;
            }
            else
            {
              if (HIDWORD(v94) == 1)
                v105.n128_f64[0] = llvm::ScalableVectorType::get(v93, (llvm::Type *)v94);
              else
                v105.n128_f64[0] = llvm::FixedVectorType::get((llvm::FixedVectorType *)v93, (llvm::Type *)v94);
              v106 = (*(uint64_t (**)(_QWORD, uint64_t, __n128))(*(_QWORD *)*v152 + 488))(*v152, v104, v105);
              if (v107)
                v97 = 0;
              else
                v97 = v106;
            }
            v90 = (_DWORD *)sub_1C63D4340((uint64_t)&v182, &v160);
            v91 = *v90 + v97;
          }
          *v90 = v91;
        }
LABEL_159:
        v87 = v81 + 1;
        while (v87 != v82)
        {
          v88 = *v87++;
          v83 = (uint64_t ***)v88;
          if (v88 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v81 = v87 - 1;
            goto LABEL_156;
          }
        }
      }
LABEL_195:
      v108 = (unsigned int *)v184;
      if ((_DWORD)v185)
      {
        v109 = 8 * v185;
        do
        {
          v110 = sub_1C63D42E4(v187 + 88 * v63, v108);
          v111 = v187 + 88 * v63;
          if (v110 == *(_QWORD *)(v111 + 40) + 8 * *(unsigned int *)(v111 + 48))
          {
            v112 = v108[1];
          }
          else
          {
            v113 = *(_DWORD *)sub_1C63D4340(v111, v108);
            if (v113 <= v108[1])
              v112 = v108[1];
            else
              v112 = v113;
            v111 = v187 + 88 * v63;
          }
          *(_DWORD *)sub_1C63D4340(v111, v108) = v112;
          v108 += 2;
          v109 -= 8;
        }
        while (v109);
        v108 = (unsigned int *)v184;
      }
      if (v108 != (unsigned int *)v186)
        free(v108);
      if ((v182 & 1) == 0)
        MEMORY[0x1CAA32FB4](*((_QWORD *)&v182 + 1), 4);
      if (++v63 == a3)
        goto LABEL_119;
      continue;
    }
  }
LABEL_211:
  if ((_DWORD)a3)
  {
    v119 = 0;
    v157 = a3;
    do
    {
      *(_QWORD *)&v182 = 1;
      for (ii = 8; ii != 40; ii += 8)
        *(_DWORD *)&v183[ii - 16] = -1;
      v184 = v186;
      v185 = 0x400000000;
      if (v166 == v165)
        v121 = (uint64_t *)((char *)&v167 + 4);
      else
        v121 = &v167;
      v122 = *(unsigned int *)v121;
      if ((_DWORD)v122)
      {
        v123 = 8 * v122;
        v124 = v166;
        while (*(_QWORD *)v124 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v124 += 8;
          v123 -= 8;
          if (!v123)
            goto LABEL_273;
        }
      }
      else
      {
        v124 = v166;
      }
      v125 = &v166[8 * v122];
      if (v124 != v125)
      {
        v126 = a2 + 8 * v119;
        v127 = *(uint64_t ****)v124;
LABEL_243:
        if (*(_DWORD *)(v126 + 4) == 1 || *(_DWORD *)v126 != 1)
        {
          v129 = *v127;
          v130 = *((unsigned __int8 *)*v127 + 8);
          if (v130 == 12
            || ((v140 = v130 > 0x14, v131 = (1 << v130) & 0x10A07F, !v140) ? (v132 = v131 == 0) : (v132 = 1), v132))
          {
            v128 = 0;
          }
          else
          {
            v133 = *(llvm::Type **)v126;
            if (HIDWORD(*(_QWORD *)v126) == 1)
              v135.n128_f64[0] = llvm::ScalableVectorType::get(v129, v133);
            else
              v135.n128_f64[0] = llvm::FixedVectorType::get((llvm::FixedVectorType *)v129, v133);
            v136 = (*(uint64_t (**)(_QWORD, uint64_t, __n128))(*(_QWORD *)*v152 + 488))(*v152, v134, v135);
            if (v137)
              v128 = 0;
            else
              v128 = v136;
          }
        }
        else
        {
          v128 = 1;
        }
        v161 = 0;
        v138 = *(_DWORD *)v126;
        v140 = *(_DWORD *)(v126 + 4) == 1 && v138 != 0 || v138 > 1;
        v141 = v140;
        v161 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t **))(***(_QWORD ***)(a1 + 616) + 680))(**(_QWORD **)(a1 + 616), v141, *v127);
        v142 = sub_1C63D42E4((uint64_t)&v182, &v161);
        v143 = (char *)v184 + 8 * v185;
        v144 = (int *)sub_1C63D4340((uint64_t)&v182, &v161);
        v145 = *v144;
        if ((char *)v142 == v143)
          v145 = 0;
        *v144 = v145 + v128;
        v146 = (unint64_t *)(v124 + 8);
        while (v146 != (unint64_t *)v125)
        {
          v147 = *v146++;
          v127 = (uint64_t ***)v147;
          if (v147 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v124 = (char *)(v146 - 1);
            goto LABEL_243;
          }
        }
      }
LABEL_273:
      sub_1C63DA844((uint64_t)v202, &v182);
      sub_1C6088838((uint64_t)v203, (uint64_t)&v184);
      v148 = (_QWORD *)(v187 + 88 * v119);
      if (v148 != v205)
        sub_1C63DA844((uint64_t)v205, (_DWORD *)(v187 + 88 * v119));
      sub_1C6088838((uint64_t)v206, (uint64_t)(v148 + 5));
      sub_1C63D4550(*v154 + 176 * v119, v202);
      if (v184 != v186)
        free(v184);
      if ((v182 & 1) == 0)
        MEMORY[0x1CAA32FB4](*((_QWORD *)&v182 + 1), 4);
      ++v119;
    }
    while (v119 != v157);
  }
  sub_1C63DD488((char **)&v187);
  if (v194[1] != v194[0])
    free(v194[1]);
  v114 = v162;
  if (v164)
  {
    v115 = 40 * v164;
    v116 = (_QWORD *)(v162 + 24);
    do
    {
      if (*((_DWORD *)v116 - 6) <= 0xFFFFFFFD)
      {
        v117 = (_QWORD *)*(v116 - 2);
        if (v116 != v117)
          free(v117);
      }
      v116 += 5;
      v115 -= 40;
    }
    while (v115);
  }
  MEMORY[0x1CAA32FB4](v114, 8);
  if (v166 != v165)
    free(v166);
  if (v171 != v170)
    free(v171);
  MEMORY[0x1CAA32FB4](v175, 8);
  if (v199 != v201)
    free(v199);
  sub_1C63DA924((uint64_t)v202);
  if (__p)
  {
    v181 = (int *)__p;
    operator delete(__p);
  }
  return MEMORY[0x1CAA32FB4](v179, 8);
}

unint64_t llvm::LoopVectorizationCostModel::getVScaleForTuning(llvm::LoopVectorizationCostModel *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AttributeAtIndex;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t result;
  __int128 v11;
  uint64_t v13;

  v2 = *((_QWORD *)this + 82);
  v5 = *(_QWORD *)(v2 + 112);
  v3 = (uint64_t *)(v2 + 112);
  v4 = v5;
  if (!v5 || (*(_BYTE *)(v4 + 22) & 1) == 0)
    return (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 77) + 720))(**((_QWORD **)this + 77));
  AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex(v3, -1, 80);
  v9 = *(_QWORD *)(AttributeAtIndex + 16);
  v7 = HIDWORD(v9);
  v8 = v9 & 0xFFFFFF00;
  LODWORD(v9) = v9;
  if (!*(_QWORD *)(AttributeAtIndex + 16))
    LODWORD(v9) = 0;
  LODWORD(v13) = v7;
  HIDWORD(v13) = v9 | v8;
  *((_QWORD *)&v11 + 1) = *(_QWORD *)(AttributeAtIndex + 16) != 0;
  *(_QWORD *)&v11 = v13;
  result = v11 >> 32;
  if (!HIDWORD(result) || (_DWORD)v7 != (_DWORD)result)
    return (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 77) + 720))(**((_QWORD **)this + 77));
  return result;
}

BOOL llvm::LoopVectorizationCostModel::isMoreProfitable(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  __int128 v6;
  unsigned int SmallConstantMaxTripCount;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _BOOL4 v13;
  BOOL v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t VScaleForTuning;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  _BOOL4 v25;
  uint64_t v26;
  int v27;
  uint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v6 = *(_OWORD *)(a2 + 2);
  v33 = *(_OWORD *)(a3 + 2);
  v34 = v6;
  SmallConstantMaxTripCount = llvm::ScalarEvolution::getSmallConstantMaxTripCount(*(const llvm::Loop ***)(*(_QWORD *)(a1 + 592) + 88), *(const llvm::Loop **)(a1 + 584));
  v8 = a2[1] == 1 || a3[1] == 1;
  if (!v8 && *(_BYTE *)(a1 + 124) && SmallConstantMaxTripCount)
  {
    v9 = *a2;
    v10 = SmallConstantMaxTripCount - 1;
    v31 = (v10 + v9) / v9;
    v32 = 0;
    v35 = v34;
    sub_1C4848B64((uint64_t)&v35, (uint64_t)&v31);
    v11 = v35;
    v12 = DWORD2(v35);
    v31 = (v10 + (unint64_t)*a3) / *a3;
    v32 = 0;
    v35 = v33;
    sub_1C4848B64((uint64_t)&v35, (uint64_t)&v31);
    v13 = v11 < (uint64_t)v35;
    v14 = v12 == DWORD2(v35);
    v15 = v12 < SDWORD2(v35);
    goto LABEL_20;
  }
  v16 = *a2;
  v17 = *a3;
  VScaleForTuning = llvm::LoopVectorizationCostModel::getVScaleForTuning((llvm::LoopVectorizationCostModel *)a1);
  v19 = a2[1];
  v20 = a3[1];
  if ((VScaleForTuning & 0xFF00000000) != 0)
  {
    if (v19 == 1)
      v21 = VScaleForTuning;
    else
      v21 = 1;
    v16 *= v21;
    if (v20 == 1)
      v22 = VScaleForTuning;
    else
      v22 = 1;
    v17 *= v22;
  }
  if (v19 != 1 || v20 == 1)
  {
    v31 = v17;
    v32 = 0;
    v35 = v34;
    sub_1C4848B64((uint64_t)&v35, (uint64_t)&v31);
    v26 = v35;
    v27 = DWORD2(v35);
    v29 = v16;
    v30 = 0;
    v35 = v33;
    sub_1C4848B64((uint64_t)&v35, (uint64_t)&v29);
    v13 = v26 < (uint64_t)v35;
    v14 = v27 == DWORD2(v35);
    v15 = v27 < SDWORD2(v35);
LABEL_20:
    v25 = v15;
    goto LABEL_23;
  }
  v31 = *a3;
  v32 = 0;
  v35 = v34;
  sub_1C4848B64((uint64_t)&v35, (uint64_t)&v31);
  v23 = v35;
  v24 = DWORD2(v35);
  v29 = v16;
  v30 = 0;
  v35 = v33;
  sub_1C4848B64((uint64_t)&v35, (uint64_t)&v29);
  v13 = (uint64_t)v35 >= v23;
  v14 = DWORD2(v35) == v24;
  v25 = SDWORD2(v35) >= v24;
LABEL_23:
  if (v14)
    return v13;
  else
    return v25;
}

void llvm::LoopVectorizationCostModel::selectVectorizationFactor(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t OptionalBoolLoopAttribute;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  __int128 v25;
  char *v26;
  char *v27;
  unint64_t v28;
  BOOL v29;
  _BYTE *v30;
  int v31;
  unint64_t *v32;
  unint64_t *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t **v40;
  uint64_t **v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t **v44;
  uint64_t v45;
  uint64_t **v46;
  uint64_t **v47;
  BOOL v48;
  uint64_t **v49;
  char *v50;
  uint64_t v51;
  char *v53;
  const char *OpcodeName;
  size_t v55;
  size_t v56;
  const char *v57;
  size_t v58;
  _DWORD *v59;
  const char *v60;
  size_t v61;
  char *v62;
  uint64_t ***v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t ****v68;
  uint64_t ***v69;
  int v70;
  int v71;
  uint64_t ***v72;
  size_t v73;
  size_t v74;
  uint64_t v75;
  const void *v76;
  const void *v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  char *v84;
  char *v85;
  char *v86;
  char v87;
  uint64_t v88;
  int v89;
  void **p_p;
  void *__p;
  const void *v92;
  uint64_t v93;
  _BYTE v94[24];
  _BYTE v95[24];
  uint64_t **v96;
  uint64_t v97;
  _QWORD v98[8];

  v98[6] = *MEMORY[0x1E0C80C00];
  OptionalBoolLoopAttribute = llvm::LoopVectorizationCostModel::expectedCost(a1, 1uLL, 0, (uint64_t)&v83);
  *(_QWORD *)v95 = 1;
  *(_OWORD *)&v95[8] = v83;
  *(_OWORD *)a3 = *(_OWORD *)v95;
  v81 = a3;
  v82 = a1;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)&v95[16];
  v8 = *(_QWORD *)(a1 + 664);
  v9 = *(_DWORD *)(v8 + 40);
  if (v9 == -1)
  {
    OptionalBoolLoopAttribute = llvm::getOptionalBoolLoopAttribute(*(llvm::Loop **)(v8 + 104), "llvm.loop.disable_nonforced", 0x1BuLL);
    v12 = OptionalBoolLoopAttribute;
    if ((unsigned __int16)OptionalBoolLoopAttribute <= 0x100u)
      v12 = 0;
    if (v12)
      goto LABEL_11;
    v9 = *(_DWORD *)(v8 + 40);
  }
  if (v9 == 1)
  {
    v10 = *(_QWORD *)(a2 + 160);
    if (!v10)
      v10 = *(unsigned int *)(a2 + 8);
    if (v10 >= 2)
    {
      *(_QWORD *)(a3 + 8) = 0x7FFFFFFFFFFFFFFFLL;
      *(_DWORD *)(a3 + 16) = 0;
    }
    v11 = 1;
    goto LABEL_12;
  }
LABEL_11:
  v11 = 0;
LABEL_12:
  v96 = (uint64_t **)v98;
  v13 = *(_QWORD *)(a2 + 160);
  if (v13)
    v14 = *(char **)(a2 + 144);
  else
    v14 = *(char **)a2;
  v15 = *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 8);
  v16 = (char *)(a2 + 152);
  v97 = 0x300000000;
  v17 = (unint64_t *)(a1 + 1160);
  v18 = a1 + 1176;
  while (v13)
  {
    if (v14 == v16)
      goto LABEL_44;
LABEL_20:
    if (v13)
      v19 = v14 + 28;
    else
      v19 = v14;
    if (*((_DWORD *)v19 + 1) != 1 && *(_DWORD *)v19 == 1)
      goto LABEL_32;
    OptionalBoolLoopAttribute = llvm::LoopVectorizationCostModel::expectedCost(v82, *(_QWORD *)v19, (uint64_t)&v96, (uint64_t)&v83);
    *(_QWORD *)v94 = *(_QWORD *)v19;
    *(_OWORD *)&v94[8] = v83;
    if ((((_BYTE)v84 == 0) & ~v11) != 0)
      goto LABEL_32;
    v20 = v82;
    if (llvm::LoopVectorizationCostModel::isMoreProfitable(v82, (unsigned int *)v94, (unsigned int *)v95))
    {
      v21 = *(unsigned int *)(v82 + 1168);
      v22 = *(_QWORD *)(v82 + 1160);
      if (v21 < *(_DWORD *)(v82 + 1172))
        goto LABEL_28;
      v28 = v21 + 1;
      v29 = v22 + 24 * v21 > (unint64_t)v94;
      if (v22 <= (unint64_t)v94 && v29)
      {
        v30 = &v94[-v22];
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v17, v18, v28, 24);
        v22 = *v17;
        v23 = &v30[*v17];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v17, v18, v28, 24);
        v22 = *v17;
LABEL_28:
        v23 = v94;
      }
      v20 = v82;
      v24 = v22 + 24 * *(unsigned int *)(v82 + 1168);
      v25 = *(_OWORD *)v23;
      *(_QWORD *)(v24 + 16) = *((_QWORD *)v23 + 2);
      *(_OWORD *)v24 = v25;
      ++*(_DWORD *)(v82 + 1168);
    }
    OptionalBoolLoopAttribute = llvm::LoopVectorizationCostModel::isMoreProfitable(v20, (unsigned int *)v94, (unsigned int *)v81);
    if ((_DWORD)OptionalBoolLoopAttribute)
    {
      *(_OWORD *)v81 = *(_OWORD *)v94;
      *(_QWORD *)(v81 + 16) = *(_QWORD *)&v94[16];
    }
LABEL_32:
    if (v13)
    {
      v26 = (char *)*((_QWORD *)v14 + 1);
      v27 = v14;
      if (v26)
      {
        do
        {
          v14 = v26;
          v26 = *(char **)v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v14 = (char *)*((_QWORD *)v27 + 2);
          v48 = *(_QWORD *)v14 == (_QWORD)v27;
          v27 = v14;
        }
        while (!v48);
      }
    }
    else
    {
      v14 += 8;
    }
  }
  if (v14 != (char *)v15)
    goto LABEL_20;
LABEL_44:
  if ((_DWORD)v97)
  {
    v31 = 0;
    *(_QWORD *)&v94[8] = 0;
    *(_QWORD *)&v94[16] = 0;
    *(_QWORD *)v94 = &v94[8];
    v32 = (unint64_t *)v96;
    v33 = (unint64_t *)&v96[2 * v97];
    while (1)
    {
      *((_DWORD *)sub_1C5031104((uint64_t **)v94, *v32, (uint64_t **)v32) + 10) = v31++;
LABEL_60:
      v32 += 2;
      if (v32 == v33)
        break;
      v34 = *(_QWORD **)&v94[8];
      if (*(_QWORD *)&v94[8])
      {
        v35 = *v32;
        do
        {
          v36 = v34[4];
          if (v35 >= v36)
          {
            if (v36 >= v35)
              goto LABEL_60;
            ++v34;
          }
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
    }
    *(_QWORD *)&v83 = v94;
    v37 = 126 - 2 * __clz(v97);
    if ((_DWORD)v97)
      v38 = v37;
    else
      v38 = 0;
    sub_1C608A37C(v96, (unint64_t)&v96[2 * v97], (uint64_t ***)&v83, v38, 1);
    v39 = 0;
    v40 = 0;
    v41 = v96;
    v42 = v97;
    while (1)
    {
      if (v39)
        v43 = v39;
      else
        v43 = v42 != 0;
      if (v39)
        v44 = v40;
      else
        v44 = v41;
      v45 = 16 * v43;
      if (v42 == v43)
      {
        if (!v42)
          break;
        v46 = v41;
        v47 = v44;
        while (*v47 == *v46)
        {
          v48 = *((_DWORD *)v47 + 2) == *((_DWORD *)v46 + 2) && *((_DWORD *)v47 + 3) == *((_DWORD *)v46 + 3);
          if (!v48)
            break;
          v47 += 2;
          v46 += 2;
          if (v47 == &v44[2 * v42])
            goto LABEL_89;
        }
      }
      if (v41[2 * v43] != *v44)
        break;
      if (v42 >= v43 + 1)
        v39 = v43 + 1;
      else
        v39 = v42;
      v49 = v41;
LABEL_87:
      v40 = v41;
      v41 = v49;
      if (!v42)
      {
        sub_1C6143384(*(_QWORD **)&v94[8]);
        goto LABEL_45;
      }
    }
LABEL_89:
    v79 = v42 - v43;
    v80 = (uint64_t)*v44;
    __p = 0;
    v92 = 0;
    v93 = 0;
    DWORD2(v83) = 0;
    v87 = 0;
    v88 = 0;
    *(_QWORD *)&v83 = &unk_1E81A7208;
    p_p = &__p;
    v89 = 0;
    v85 = 0;
    v86 = 0;
    v84 = 0;
    llvm::raw_ostream::write((llvm::raw_ostream *)&v83, "Instruction with invalid costs prevented vectorization at VF=(", 0x3EuLL);
    if (v43)
    {
      v59 = (_DWORD *)v44 + 3;
      do
      {
        v60 = ", ";
        if (*(v59 - 1) == *((_DWORD *)v44 + 2))
        {
          if (*v59 == *((_DWORD *)v44 + 3))
            v60 = "";
          else
            v60 = ", ";
        }
        v61 = strlen(v60);
        if (v61 <= v85 - v86)
        {
          if (v61)
          {
            memcpy(v86, v60, v61);
            v86 += v61;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v83, v60, v61);
        }
        if (*v59 == 1)
        {
          v62 = v86;
          if ((unint64_t)(v85 - v86) > 8)
          {
            v86[8] = 32;
            *(_QWORD *)v62 = *(_QWORD *)"vscale x ";
            v86 += 9;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v83, "vscale x ", 9uLL);
          }
        }
        sub_1C5E21910((llvm::raw_ostream *)&v83, *(v59 - 1), 0, 0, 0);
        v59 += 4;
        v45 -= 16;
      }
      while (v45);
    }
    if ((unint64_t)(v85 - v86) > 1)
    {
      *(_WORD *)v86 = 14889;
      v50 = v86 + 2;
      v86 += 2;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v83, "):", 2uLL);
      v50 = v86;
    }
    v51 = v80;
    if (*(_BYTE *)(v80 + 16) != 84 || v80 == 0)
    {
      if (v85 == v50)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v83, " ", 1uLL);
        v51 = v80;
        v53 = v86;
      }
      else
      {
        *v50 = 32;
        v53 = ++v86;
      }
      OpcodeName = llvm::Instruction::getOpcodeName((llvm::Instruction *)(*(unsigned __int8 *)(v51 + 16)
                                                                        - 28));
      v55 = strlen(OpcodeName);
      v56 = v55;
      if (v55 > v85 - v53)
      {
        v57 = OpcodeName;
        v58 = v55;
LABEL_132:
        llvm::raw_ostream::write((llvm::raw_ostream *)&v83, v57, v58);
LABEL_133:
        v75 = v86 - v84;
        if (v86 != v84)
        {
          v86 = v84;
          llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v83, v84, v75);
        }
        if (v93 >= 0)
          v76 = &__p;
        else
          v76 = __p;
        if (v93 >= 0)
          v77 = (const void *)(HIBYTE(v93) & 0x7F);
        else
          v77 = v92;
        llvm::reportVectorizationInfo(v76, v77, (uint64_t)"InvalidCost", 11, *(llvm::OptimizationRemarkEmitter **)(v82 + 648), *(const llvm::Loop **)(v82 + 584), v80);
        *(_QWORD *)&v83 = off_1E81A6E70;
        if (v89 == 1 && v84)
          MEMORY[0x1CAA32F9C](v84, 0x1000C8077774924);
        if (SHIBYTE(v93) < 0)
          operator delete(__p);
        v39 = 0;
        v49 = &v41[2 * v43];
        v42 = v79;
        v41 = 0;
        goto LABEL_87;
      }
      if (!v55)
        goto LABEL_133;
      memcpy(v53, OpcodeName, v55);
      v78 = &v86[v56];
LABEL_147:
      v86 = v78;
      goto LABEL_133;
    }
    if ((unint64_t)(v85 - v50) > 8)
    {
      v50[8] = 32;
      *(_QWORD *)v50 = *(_QWORD *)" call to ";
      v86 += 9;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v83, " call to ", 9uLL);
      v51 = v80;
    }
    v63 = *(uint64_t ****)(v51 - 32);
    if (!v63 || *((_BYTE *)v63 + 16) || v63[3] != *(uint64_t ***)(v51 + 72))
      v63 = 0;
    if ((*((_BYTE *)v63 + 23) & 0x10) == 0)
      goto LABEL_133;
    v64 = ***v63;
    v65 = *(_QWORD *)(v64 + 152);
    v66 = *(unsigned int *)(v64 + 168);
    if ((_DWORD)v66)
    {
      LODWORD(v67) = (v66 - 1) & ((v63 >> 4) ^ (v63 >> 9));
      v68 = (uint64_t ****)(v65 + 16 * v67);
      v69 = *v68;
      if (*v68 == v63)
      {
LABEL_130:
        v72 = v68[1];
        v74 = (size_t)*v72;
        v57 = (const char *)(v72 + 2);
        v73 = v74;
        if (v74 > v85 - v86)
        {
          v58 = v73;
          goto LABEL_132;
        }
        if (!v73)
          goto LABEL_133;
        memcpy(v86, v57, v73);
        v78 = &v86[v73];
        goto LABEL_147;
      }
      v70 = 1;
      while (v69 != (uint64_t ***)-4096)
      {
        v71 = v67 + v70++;
        v67 = v71 & (v66 - 1);
        v69 = *(uint64_t ****)(v65 + 16 * v67);
        if (v69 == v63)
        {
          v68 = (uint64_t ****)(v65 + 16 * v67);
          goto LABEL_130;
        }
      }
    }
    v68 = (uint64_t ****)(v65 + 16 * v66);
    goto LABEL_130;
  }
LABEL_45:
  if (!byte_1EF8F5DD8 && *(_DWORD *)v82)
  {
    llvm::reportVectorizationFailure(OptionalBoolLoopAttribute, v7, "store that is conditionally executed prevents vectorization", 59, (uint64_t)"ConditionalStore", 16, *(llvm::OptimizationRemarkEmitter **)(v82 + 648), *(const llvm::Loop **)(v82 + 584), 0);
    *(_OWORD *)v81 = *(_OWORD *)v95;
    *(_QWORD *)(v81 + 16) = *(_QWORD *)&v95[16];
  }
  if (v96 != v98)
    free(v96);
}

uint64_t llvm::LoopVectorizationCostModel::expectedCost@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  llvm::BasicBlock **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::DominatorTree *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  llvm::BasicBlock **v35;
  llvm::BasicBlock *v36;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42;
  unint64_t v43;
  __int128 v44;
  _BYTE v45[24];
  _BYTE *v46;
  __int128 v47;
  _BYTE v48[24];
  _BYTE *v49;
  __int128 v50;
  _QWORD v51[3];
  _QWORD *v52;
  __int128 v53;
  _QWORD v54[3];
  _QWORD *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v43 = a2;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 0;
  v4 = *(_QWORD *)(result + 584);
  v5 = *(llvm::BasicBlock ***)(v4 + 32);
  v35 = *(llvm::BasicBlock ***)(v4 + 40);
  if (v35 != v5)
  {
    v6 = result;
    v7 = result + 680;
    v39 = result + 840;
    do
    {
      v36 = *v5;
      llvm::BasicBlock::instructionsWithoutDebug(*v5, 1, (uint64_t)&v50);
      v47 = v50;
      if (v52)
      {
        if (v52 == v51)
        {
          v49 = v48;
          (*(void (**)(_QWORD *))(v51[0] + 24))(v51);
        }
        else
        {
          v49 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v52 + 16))(v52);
        }
      }
      else
      {
        v49 = 0;
      }
      v44 = v53;
      if (v55)
      {
        if (v55 == v54)
        {
          v46 = v45;
          (*(void (**)(_QWORD *))(v54[0] + 24))(v54);
        }
        else
        {
          v46 = (_BYTE *)(*(uint64_t (**)(_QWORD *, _BYTE *))(*v55 + 16))(v55, v45);
        }
      }
      else
      {
        v46 = 0;
      }
      v9 = v47;
      if ((_QWORD)v47 == (_QWORD)v44)
      {
        v12 = 0;
        v11 = 0;
        v10 = 0;
      }
      else
      {
        v10 = 0;
        v11 = 0;
        v12 = 0;
        do
        {
          if (v9)
            v13 = v9 - 24;
          else
            v13 = 0;
          v14 = sub_1C477672C(v7, v13);
          v15 = *(_QWORD *)(v6 + 688);
          if (v15 == *(_QWORD *)(v6 + 680))
            v16 = 700;
          else
            v16 = 696;
          if (v14 == (_QWORD *)(v15 + 8 * *(unsigned int *)(v6 + v16)))
          {
            v17 = (_DWORD)v43 && HIDWORD(v43) == 1;
            if (!v17 && v43 < 2)
              goto LABEL_33;
            v19 = sub_1C477672C(v39, v13);
            v20 = *(_QWORD *)(v6 + 848);
            v21 = 856;
            if (v20 == *(_QWORD *)(v6 + 840))
              v21 = 860;
            if (v19 == (_QWORD *)(v20 + 8 * *(unsigned int *)(v6 + v21)))
            {
LABEL_33:
              llvm::LoopVectorizationCostModel::getInstructionCost(v6, v13, v43, (uint64_t)&v40);
              v22 = v41;
              if (v41 || !word_1ED82B100)
              {
                if (a3 && v41)
                  sub_1C63D45B0(a3, v13, (uint64_t *)&v43);
                if (v22 == 1)
                  v11 = 1;
                v23 = v40;
              }
              else
              {
                v23 = dword_1ED82B178;
              }
              v24 = __OFADD__(v10, v23);
              v25 = v10 + v23;
              if (v24)
                v10 = (v25 >> 63) ^ 0x8000000000000000;
              else
                v10 = v25;
              v12 |= v42;
            }
          }
          while (1)
          {
            v9 = *(_QWORD *)(v47 + 8);
            *(_QWORD *)&v47 = v9;
            if (v9 == *((_QWORD *)&v47 + 1))
              break;
            if (!v49)
              sub_1C485C2F0();
            if ((*(unsigned int (**)(void))(*(_QWORD *)v49 + 48))())
            {
              v9 = v47;
              break;
            }
          }
        }
        while (v9 != (_QWORD)v44);
      }
      v26 = v46;
      if (v46 == v45)
      {
        v26 = v45;
        v27 = 4;
      }
      else
      {
        if (!v46)
          goto LABEL_58;
        v27 = 5;
      }
      (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_58:
      v28 = v49;
      if (v49 == v48)
      {
        v28 = v48;
        v29 = 4;
      }
      else
      {
        if (!v49)
          goto LABEL_63;
        v29 = 5;
      }
      (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_63:
      v30 = v55;
      if (v55 == v54)
      {
        v30 = v54;
        v31 = 4;
LABEL_65:
        (*(void (**)(void))(*v30 + 8 * v31))();
        goto LABEL_66;
      }
      if (v55)
      {
        v31 = 5;
        goto LABEL_65;
      }
LABEL_66:
      result = (uint64_t)v52;
      if (v52 == v51)
      {
        result = (uint64_t)v51;
        v32 = 4;
LABEL_68:
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v32))();
        goto LABEL_69;
      }
      if (v52)
      {
        v32 = 5;
        goto LABEL_68;
      }
LABEL_69:
      if (HIDWORD(v43) != 1 && (_DWORD)v43 == 1)
      {
        result = llvm::LoopAccessInfo::blockNeedsPredication(v36, **(llvm::BasicBlock ***)(v6 + 608), *(llvm::Loop **)(*(_QWORD *)(v6 + 608) + 40), v8);
        if ((_DWORD)result)
        {
          if (v10 >= 0)
            v33 = v10;
          else
            v33 = v10 + 1;
          v10 = v33 >> 1;
        }
      }
      if (v11 == 1)
        *(_DWORD *)(a4 + 8) = 1;
      v34 = *(_QWORD *)a4 + v10;
      if (__OFADD__(*(_QWORD *)a4, v10))
        v34 = (v34 >> 63) ^ 0x8000000000000000;
      *(_QWORD *)a4 = v34;
      *(_BYTE *)(a4 + 16) |= v12;
      ++v5;
    }
    while (v5 != v35);
  }
  return result;
}

BOOL llvm::LoopVectorizationCostModel::isCandidateForEpilogueVectorization(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t LoopLatch;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t i;
  _QWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  _BOOL8 result;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t ExitingBlock;

  if (*(_QWORD *)(**(_QWORD **)(a2 + 32) + 40) != **(_QWORD **)(a2 + 32) + 40)
  {
    v6 = *(_QWORD *)(**(_QWORD **)(a2 + 32) + 48);
    v7 = v6 - 24;
    v8 = v6 ? v6 - 24 : 0;
    if (v6 && *(_BYTE *)(v8 + 16) == 83)
    {
      do
      {
        v9 = *(_QWORD *)(a1 + 608);
        v10 = sub_1C477672C(v9 + 240, v7);
        v11 = *(_QWORD *)(v9 + 248);
        v12 = v11 == *(_QWORD *)(v9 + 240) ? 260 : 256;
        if (v10 != (_QWORD *)(v11 + 8 * *(unsigned int *)(v9 + v12)))
          return 0;
        v13 = *(_QWORD *)(v7 + 32);
        v7 = v13 - 24;
        if (v13)
          v14 = v13 - 24;
        else
          v14 = 0;
      }
      while (v13 && *(_BYTE *)(v14 + 16) == 83);
    }
  }
  v15 = *(_QWORD *)(a1 + 608);
  v16 = *(uint64_t **)(v15 + 152);
  v17 = *(uint64_t **)(v15 + 160);
  if (v16 != v17)
  {
    while (1)
    {
      v18 = *v16;
      LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(a2);
      v20 = *(_DWORD *)(v18 + 20);
      v21 = v20 & 0x7FFFFFF;
      if ((v20 & 0x7FFFFFF) != 0)
      {
        v22 = 0;
        while (1)
        {
          v23 = v18 - 32 * v21;
          if ((v20 & 0x40000000) != 0)
            v23 = *(_QWORD *)(v18 - 8);
          if (*(_QWORD *)(v23 + 32 * *(unsigned int *)(v18 + 60) + 8 * v22) == LoopLatch)
            break;
          if (v21 == ++v22)
            goto LABEL_23;
        }
      }
      else
      {
LABEL_23:
        LODWORD(v22) = -1;
      }
      v24 = (v20 & 0x40000000) != 0 ? *(_QWORD *)(v18 - 8) : v18 - 32 * v21;
      v25 = *(_QWORD *)(*(_QWORD *)(v24 + 32 * v22) + 8);
      if (v25)
        break;
LABEL_32:
      for (i = *(_QWORD *)(*v16 + 8); i; i = *(_QWORD *)(i + 8))
      {
        v30 = sub_1C477672C(a2 + 56, *(_QWORD *)(*(_QWORD *)(i + 24) + 40));
        v31 = *(_QWORD *)(a2 + 64);
        v32 = (unsigned int *)(v31 == *(_QWORD *)(a2 + 56) ? a2 + 76 : a2 + 72);
        if (v30 == (_QWORD *)(v31 + 8 * *v32))
          return 0;
      }
      v16 += 12;
      if (v16 == v17)
      {
        v34 = *(_QWORD *)(a1 + 608);
        v35 = *(uint64_t **)(v34 + 152);
        v36 = *(uint64_t **)(v34 + 160);
        while (v35 != v36)
        {
          if (!sub_1C63D4494(a1, *v35, a3))
          {
            result = sub_1C60785A4(a1, *v35, a3);
            if (!result)
              return result;
          }
          v35 += 12;
        }
        goto LABEL_46;
      }
    }
    while (1)
    {
      v26 = sub_1C477672C(a2 + 56, *(_QWORD *)(*(_QWORD *)(v25 + 24) + 40));
      v27 = *(_QWORD *)(a2 + 64);
      v28 = (unsigned int *)(v27 == *(_QWORD *)(a2 + 56) ? a2 + 76 : a2 + 72);
      if (v26 == (_QWORD *)(v27 + 8 * *v28))
        return 0;
      v25 = *(_QWORD *)(v25 + 8);
      if (!v25)
        goto LABEL_32;
    }
  }
LABEL_46:
  ExitingBlock = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock((_QWORD *)a2);
  return ExitingBlock == llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(a2);
}

BOOL llvm::LoopVectorizationCostModel::isEpilogueVectorizationProfitable(uint64_t a1, unsigned int a2)
{
  return (*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 616) + 816))(**(_QWORD **)(a1 + 616)) > 1
      && dword_1ED82A938 <= a2;
}

uint64_t llvm::LoopVectorizationCostModel::selectEpilogueVectorizationFactor@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  int v15;
  unsigned int v16;
  __int128 *v17;
  int v18;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  __int128 *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v30 = 0;
  v29 = 1uLL;
  if (!byte_1ED82A7B8)
    goto LABEL_46;
  v5 = result;
  if (*(_DWORD *)(result + 120))
    goto LABEL_46;
  result = llvm::LoopVectorizationCostModel::isCandidateForEpilogueVectorization(result, *(_QWORD *)(result + 584), a2);
  if ((result & 1) == 0)
    goto LABEL_46;
  v8 = dword_1ED82A878;
  if (dword_1ED82A878 < 2)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v5 + 584) + 32) + 56) + 112);
    if (v12 && ((*(_BYTE *)(v12 + 17) & 4) != 0 || *(char *)(v12 + 13) < 0))
      goto LABEL_46;
    result = (*(uint64_t (**)(_QWORD, unint64_t))(***(_QWORD ***)(v5 + 616) + 816))(**(_QWORD **)(v5 + 616), a2);
    if (result < 2 || dword_1ED82A938 > a2)
      goto LABEL_46;
    v14 = a2 & 0xFFFFFFFF00000000;
    v27 = a2;
    if ((a2 & 0xFFFFFFFF00000000) == 0x100000000)
    {
      result = llvm::LoopVectorizationCostModel::getVScaleForTuning((llvm::LoopVectorizationCostModel *)v5);
      if ((result & 0xFF00000000) != 0)
        v15 = result;
      else
        v15 = 1;
      v27 = v15 * a2;
    }
    v16 = *(_DWORD *)(v5 + 1168);
    if (!v16)
      goto LABEL_46;
    v17 = *(__int128 **)(v5 + 1160);
    v28 = (__int128 *)((char *)v17 + 24 * v16);
    while (1)
    {
      v18 = *((_DWORD *)v17 + 1);
      if (v14 != 0x100000000 || v18 == 1)
      {
        if (v14 != 0x100000000 && v18 == 1)
          goto LABEL_43;
        v20 = *(_DWORD *)v17;
      }
      else
      {
        v20 = *(_DWORD *)v17;
        if (*(_DWORD *)v17 < v27)
          goto LABEL_34;
      }
      if (v20 < a2)
      {
LABEL_34:
        v21 = DWORD1(v29) != 1 && (_DWORD)v29 == 1;
        if (v21
          || (result = llvm::LoopVectorizationCostModel::isMoreProfitable(v5, (unsigned int *)v17, (unsigned int *)&v29),
              (_DWORD)result))
        {
          v22 = *(unsigned int *)(a3 + 96);
          if ((_DWORD)v22)
          {
            v23 = *(_QWORD **)(a3 + 88);
            v24 = 8 * v22;
            v25 = *(_DWORD *)v17;
            v26 = *((_DWORD *)v17 + 1);
            while (1)
            {
              result = sub_1C63DAF00(*v23 + 8, v25, v26, &v31);
              if ((_DWORD)result)
                break;
              ++v23;
              v24 -= 8;
              if (!v24)
                goto LABEL_43;
            }
            v29 = *v17;
            v30 = *((_QWORD *)v17 + 2);
          }
        }
      }
LABEL_43:
      v17 = (__int128 *)((char *)v17 + 24);
      if (v17 == v28)
        goto LABEL_46;
    }
  }
  v9 = *(unsigned int *)(a3 + 96);
  if (!(_DWORD)v9)
  {
LABEL_46:
    *(_OWORD *)a4 = v29;
    *(_QWORD *)(a4 + 16) = v30;
    return result;
  }
  v10 = *(_QWORD **)(a3 + 88);
  v11 = 8 * v9;
  while (1)
  {
    result = sub_1C63DAF00(*v10 + 8, v8, 0, &v31);
    if ((_DWORD)result)
      break;
    ++v10;
    v11 -= 8;
    if (!v11)
      goto LABEL_46;
  }
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = v8;
  return result;
}

_QWORD *llvm::LoopVectorizationCostModel::collectElementTypesForWidening(llvm::LoopVectorizationCostModel *this)
{
  _QWORD *result;
  uint64_t v3;
  llvm::BasicBlock **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t Opcode;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v31;
  int v32;
  unsigned int v33;
  void *v34;
  llvm::BasicBlock **v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  _BYTE v39[24];
  _BYTE *v40;
  __int128 v41;
  _BYTE v42[24];
  _BYTE *v43;
  __int128 v44;
  _QWORD v45[3];
  _QWORD *v46;
  __int128 v47;
  _QWORD v48[3];
  _QWORD *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  result = (_QWORD *)*((_QWORD *)this + 126);
  if (result != *((_QWORD **)this + 125))
  {
    v29 = *((unsigned int *)this + 254);
    if (v29 >= 0x21 && 4 * (*((_DWORD *)this + 255) - *((_DWORD *)this + 256)) < v29)
      goto LABEL_79;
    result = memset(result, 255, 8 * v29);
  }
  *(_QWORD *)((char *)this + 1020) = 0;
LABEL_3:
  v3 = *((_QWORD *)this + 73);
  v4 = *(llvm::BasicBlock ***)(v3 + 32);
  v35 = *(llvm::BasicBlock ***)(v3 + 40);
  while (v4 != v35)
  {
    llvm::BasicBlock::instructionsWithoutDebug(*v4, 1, (uint64_t)&v44);
    v41 = v44;
    if (v46)
    {
      if (v46 == v45)
      {
        v43 = v42;
        (*(void (**)(_QWORD *, _BYTE *))(v45[0] + 24))(v45, v42);
      }
      else
      {
        v43 = (_BYTE *)(*(uint64_t (**)(void))(*v46 + 16))();
      }
    }
    else
    {
      v43 = 0;
    }
    v38 = v47;
    if (v49)
    {
      if (v49 == v48)
      {
        v40 = v39;
        (*(void (**)(_QWORD *))(v48[0] + 24))(v48);
      }
      else
      {
        v40 = (_BYTE *)(*(uint64_t (**)(void))(*v49 + 16))();
      }
    }
    else
    {
      v40 = 0;
    }
LABEL_14:
    v5 = v41;
LABEL_15:
    if (v5 != (_QWORD)v38)
    {
      if (v5)
        v6 = v5 - 24;
      else
        v6 = 0;
      v7 = *(_QWORD *)v6;
      v8 = sub_1C477672C((uint64_t)this + 680, v6);
      v9 = *((_QWORD *)this + 86);
      if (v9 == *((_QWORD *)this + 85))
        v10 = 700;
      else
        v10 = 696;
      if (v8 == (_QWORD *)(v9 + 8 * *(unsigned int *)((char *)this + v10)))
      {
        v11 = *(unsigned __int8 *)(v6 + 16);
        if ((v11 - 60) <= 0x17 && ((1 << (v11 - 60)) & 0x800003) != 0)
        {
          if (v11 == 83)
            v13 = v6;
          else
            v13 = 0;
          if (v5 && v11 == 83)
          {
            v14 = *((_QWORD *)this + 76);
            v36 = 0;
            v37 = v13;
            if (sub_1C61252B8((uint64_t *)(v14 + 80), &v37, &v36))
            {
              v15 = v36;
              v16 = *(_QWORD *)(v14 + 80);
              v17 = *(unsigned int *)(v14 + 96);
            }
            else
            {
              v16 = *(_QWORD *)(v14 + 80);
              v17 = *(unsigned int *)(v14 + 96);
              v15 = v16 + 16 * v17;
            }
            if (v15 == v16 + 16 * v17)
              goto LABEL_36;
            v18 = sub_1C63D426C(*((_QWORD *)this + 76) + 80, v13);
            if (byte_1EF8F5F58)
              goto LABEL_36;
            v19 = v18;
            if (!llvm::LoopVectorizeHints::allowReordering(*((llvm::LoopVectorizeHints **)this + 83)))
            {
              if (*(_BYTE *)(v19 + 65))
                goto LABEL_36;
            }
            v20 = (_QWORD *)*((_QWORD *)this + 77);
            Opcode = llvm::RecurrenceDescriptor::getOpcode(*(_DWORD *)(v19 + 40));
            if (((*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)*v20 + 1136))(*v20, Opcode, *(_QWORD *)(v19 + 56), 0) & 1) != 0)goto LABEL_36;
            v7 = *(_QWORD *)(v19 + 56);
            v11 = *(unsigned __int8 *)(v6 + 16);
LABEL_33:
            if (v11 == 61)
              v7 = **(_QWORD **)(v6 - 64);
          }
          else if (v5)
          {
            goto LABEL_33;
          }
          sub_1C4774094((llvm::LoopVectorizationCostModel *)((char *)this + 1000), v7);
          goto LABEL_36;
        }
      }
      while (1)
      {
LABEL_36:
        v5 = *(_QWORD *)(v41 + 8);
        *(_QWORD *)&v41 = v5;
        if (v5 == *((_QWORD *)&v41 + 1))
          goto LABEL_15;
        if (!v43)
          break;
        if ((*(unsigned int (**)(void))(*(_QWORD *)v43 + 48))())
          goto LABEL_14;
      }
      sub_1C485C2F0();
LABEL_79:
      free(result);
      v31 = *((_DWORD *)this + 255) - *((_DWORD *)this + 256);
      v32 = 1 << (33 - __clz(v31 - 1));
      if (v31 <= 0x10)
        v33 = 32;
      else
        v33 = v32;
      *((_DWORD *)this + 254) = v33;
      *(_QWORD *)((char *)this + 1020) = 0;
      v34 = malloc_type_malloc(8 * v33, 0x4065EBACuLL);
      if (!v34)
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      *((_QWORD *)this + 126) = v34;
      result = memset(v34, 255, 8 * *((unsigned int *)this + 254));
      goto LABEL_3;
    }
    v22 = v40;
    if (v40 == v39)
    {
      v22 = v39;
      v23 = 4;
    }
    else
    {
      if (!v40)
        goto LABEL_54;
      v23 = 5;
    }
    (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_54:
    v24 = v43;
    if (v43 == v42)
    {
      v24 = v42;
      v25 = 4;
    }
    else
    {
      if (!v43)
        goto LABEL_59;
      v25 = 5;
    }
    (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_59:
    v26 = v49;
    if (v49 == v48)
    {
      v26 = v48;
      v27 = 4;
LABEL_61:
      (*(void (**)(void))(*v26 + 8 * v27))();
      goto LABEL_62;
    }
    if (v49)
    {
      v27 = 5;
      goto LABEL_61;
    }
LABEL_62:
    result = v46;
    if (v46 == v45)
    {
      result = v45;
      v28 = 4;
    }
    else
    {
      if (!v46)
        goto LABEL_65;
      v28 = 5;
    }
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v28))();
LABEL_65:
    ++v4;
  }
  return result;
}

uint64_t llvm::LoopVectorizationCostModel::selectInterleaveCount(uint64_t a1, unint64_t a2, unsigned int a3)
{
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  unsigned int *v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  int v25;
  _BOOL4 v27;
  int v28;
  unsigned __int16 *v29;
  int v30;
  int *v31;
  int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  llvm::DominatorTree *v44;
  unsigned __int16 *v45;
  int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  llvm::LoopAccessInfo **v54;
  uint64_t v55;
  BOOL v56;
  BOOL v57;
  uint64_t v58;
  llvm::LoopAccessInfo *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  _QWORD *v74;
  BOOL v75;
  BOOL v76;
  unsigned int v78;
  _BOOL4 v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  _BOOL4 v83;
  unint64_t v84;
  void *v85;
  unsigned int v86;
  uint64_t v87;
  _QWORD v88[6];
  unsigned int v89;
  uint64_t v90[5];
  unsigned int *v91;
  unsigned int v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 120) || *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 608) + 56) + 40) != -1)
    return 1;
  v6 = HIDWORD(a2);
  v7 = sub_1C6075CE0(*(llvm::ScalarEvolution **)(*(_QWORD *)(a1 + 592) + 88), *(const llvm::Loop **)(a1 + 584));
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 608);
  v10 = *(_QWORD *)(v9 + 104);
  v11 = *(_QWORD *)(v9 + 112);
  v12 = v7 & 0xFF00000000;
  v13 = (v7 & 0xFF00000000) != 0 && dword_1ED82ADB8 > v7;
  if (!v13 || (v14 = 1, byte_1ED82B538) && v10 != v11 && (_DWORD)v6 != 1 && (_DWORD)a2 == 1)
  {
    if (a3
      || (llvm::LoopVectorizationCostModel::expectedCost(a1, a2, 0, (uint64_t)&v85), v14 = 1, !v86)
      && (a3 = v85) != 0)
    {
      v79 = v10 != v11;
      v81 = v10;
      v84 = a2;
      llvm::LoopVectorizationCostModel::calculateRegisterUsage(a1, (uint64_t)&v84, (_QWORD *)1, (uint64_t)&v85);
      v15 = v85;
      sub_1C63DA7BC(v88, v85);
      sub_1C63DA7BC(v90, v15 + 22);
      v16 = (uint64_t *)v85;
      if (v86)
      {
        v17 = 176 * v86;
        v18 = (char *)v85 - 176;
        do
        {
          sub_1C63DA924((uint64_t)&v18[v17]);
          v17 -= 176;
        }
        while (v17);
        v16 = (uint64_t *)v85;
      }
      v80 = v12;
      if (v16 != &v87)
        free(v16);
      v82 = v6;
      if (v92)
      {
        v21 = v91;
        v22 = 8 * v92;
        v23 = (int *)(v91 + 1);
        v24 = v22;
        do
        {
          v25 = *v23;
          if (*v23 <= 1)
            v25 = 1;
          *v23 = v25;
          v23 += 2;
          v24 -= 8;
        }
        while (v24);
        v27 = (_DWORD)v6 != 1 && (_DWORD)a2 == 1;
        v83 = v27;
        v19 = -1;
        do
        {
          v28 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 616) + 672))(**(_QWORD **)(a1 + 616), *v21);
          v29 = (unsigned __int16 *)&unk_1ED82AEC0;
          if (v83)
            v29 = (unsigned __int16 *)&unk_1ED82AE00;
          v30 = *v29;
          v31 = (int *)&unk_1ED82AE78;
          if (!v83)
            v31 = (int *)&unk_1ED82AF38;
          v32 = *v31;
          if (v30)
            v33 = v32;
          else
            v33 = v28;
          v34 = v21[1];
          v35 = sub_1C63D42E4((uint64_t)v88, v21);
          if (v35 == v88[5] + 8 * v89)
            v36 = 0;
          else
            v36 = *(_DWORD *)sub_1C63D4340((uint64_t)v88, v21);
          v37 = v33 - v36;
          v38 = 1 << ~__clz(v37 / v34);
          if (v34 > v37)
            LODWORD(v38) = 0;
          v39 = v37 - 1;
          v40 = v34 - 1;
          if (v34 - 1 <= 1)
            v40 = 1;
          v41 = 1 << ~__clz(v39 / v40);
          if (v40 <= v39)
            v42 = v41;
          else
            v42 = 0;
          if (!byte_1ED82B6B8)
            v42 = v38;
          if (v42 < v19)
            v19 = v42;
          v21 += 2;
          v22 -= 8;
        }
        while (v22);
      }
      else
      {
        v19 = -1;
      }
      v43 = (*(uint64_t (**)(_QWORD, unint64_t))(***(_QWORD ***)(a1 + 616) + 816))(**(_QWORD **)(a1 + 616), a2);
      v45 = (unsigned __int16 *)&unk_1ED82B040;
      if (v82 != 1 && (_DWORD)a2 == 1)
        v45 = (unsigned __int16 *)&unk_1ED82AF80;
      v46 = *v45;
      v47 = (unsigned int *)&unk_1ED82B0B8;
      if (v82 != 1 && (_DWORD)a2 == 1)
        v47 = (unsigned int *)&unk_1ED82AFF8;
      v48 = *v47;
      if (!v46)
        v48 = v43;
      v49 = v8 / a2;
      if (v48 < v8 / a2)
        v49 = v48;
      if (v49 <= 1)
        v49 = 1;
      if (v80)
        v48 = v49;
      if (v19 <= 1)
        v50 = 1;
      else
        v50 = v19;
      if (v19 <= v48)
        v51 = v50;
      else
        v51 = v48;
      v52 = v82 == 1 || a2 >= 2;
      if (!v52 || (v14 = v51, v81 == v11))
      {
        if (v82 != 1 && (_DWORD)a2 == 1)
        {
          v53 = *(_QWORD *)(a1 + 584);
          v54 = *(llvm::LoopAccessInfo ***)(v53 + 32);
          v55 = *(_QWORD *)(v53 + 40) - (_QWORD)v54;
          if (v55)
          {
            v58 = 8 * (v55 >> 3) - 8;
            do
            {
              v59 = *v54++;
              v56 = llvm::LoopAccessInfo::blockNeedsPredication(v59, **(llvm::BasicBlock ***)(a1 + 608), *(llvm::Loop **)(*(_QWORD *)(a1 + 608) + 40), v44);
              if (v56)
                break;
              v60 = v58;
              v58 -= 8;
            }
            while (v60);
          }
          else
          {
            v56 = 0;
          }
          v57 = **(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 608) + 56) + 8) != 0;
        }
        else
        {
          v56 = 0;
          v57 = 0;
        }
        v61 = (*(uint64_t (**)(_QWORD, _BOOL4))(***(_QWORD ***)(a1 + 616) + 552))(**(_QWORD **)(a1 + 616), v79);
        if (v56 || v57 || a3 >= dword_1ED82B2F8)
        {
          if (v61)
            v14 = v51;
          else
            v14 = 1;
        }
        else
        {
          v62 = 1 << ~__clz(dword_1ED82B2F8 / a3);
          if (v51 >= v62)
            v62 = v62;
          else
            v62 = v51;
          v63 = *(_QWORD **)(a1 + 608);
          v64 = v63[7];
          v65 = *(_DWORD *)(v64 + 32);
          if (*(_DWORD *)(v64 + 36) <= 1u)
            v66 = 1;
          else
            v66 = *(_DWORD *)(v64 + 36);
          v67 = v51 / v66;
          if (v65 <= 1)
            v68 = 1;
          else
            v68 = v65;
          v69 = v51 / v68;
          if (v81 != v11)
          {
            v70 = v63[13];
            v71 = v63[14];
            if (v70 != v71)
            {
              v72 = v70;
              while ((*(_DWORD *)(v72 + 40) - 15) >= 2)
              {
                v72 += 176;
                if (v72 == v71)
                  goto LABEL_107;
              }
LABEL_117:
              v14 = 1;
              goto LABEL_116;
            }
LABEL_107:
            v73 = 0;
            v74 = *(_QWORD **)(a1 + 584);
            do
            {
              v74 = (_QWORD *)*v74;
              ++v73;
            }
            while (v74);
            if (v73 >= 2)
            {
              while (v70 != v71)
              {
                if (*(_BYTE *)(v70 + 65))
                  goto LABEL_117;
                v70 += 176;
              }
              if (dword_1EF8F5E98 >= v62)
                v62 = v62;
              else
                v62 = dword_1EF8F5E98;
              if (dword_1EF8F5E98 < v67)
                v67 = dword_1EF8F5E98;
              if (dword_1EF8F5E98 < v69)
                v69 = dword_1EF8F5E98;
            }
          }
          if (v67 <= v69)
            v14 = v69;
          else
            v14 = v67;
          if (byte_1ED82B478)
            v75 = v14 > v62;
          else
            v75 = 0;
          if (!v75)
          {
            if (byte_1ED82B538)
              v76 = v82 == 1;
            else
              v76 = 1;
            if (!v76 && (_DWORD)a2 == 1)
            {
              v78 = v51 >> 1;
              if (v51 >> 1 <= v62)
                v78 = v62;
              if (((v61 ^ 1) & 1) != 0)
                v14 = v62;
              else
                v14 = v78;
            }
            else
            {
              v14 = v62;
            }
          }
        }
      }
LABEL_116:
      sub_1C63DA924((uint64_t)v88);
    }
  }
  return v14;
}

unint64_t sub_1C6075CE0(llvm::ScalarEvolution *a1, const llvm::Loop *a2)
{
  unint64_t LoopEstimatedTripCount;
  unsigned int *v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;

  LODWORD(LoopEstimatedTripCount) = llvm::ScalarEvolution::getSmallConstantTripCount(a1, a2);
  if ((_DWORD)LoopEstimatedTripCount)
  {
    v6 = 0;
    v7 = LoopEstimatedTripCount >> 8;
    LOBYTE(v8) = 1;
  }
  else
  {
    if (byte_1ED82B3B8)
    {
      LoopEstimatedTripCount = llvm::getLoopEstimatedTripCount(a2, 0, v5);
      v7 = LoopEstimatedTripCount >> 8;
      v6 = LoopEstimatedTripCount >> 40;
      if ((LoopEstimatedTripCount & 0xFF00000000) != 0)
      {
        v8 = HIDWORD(LoopEstimatedTripCount);
        return (v6 << 40) | ((unint64_t)v8 << 32) | LoopEstimatedTripCount | (v7 << 8);
      }
    }
    else
    {
      v7 = 0;
      v6 = 0;
    }
    LODWORD(LoopEstimatedTripCount) = llvm::ScalarEvolution::getSmallConstantMaxTripCount((const llvm::Loop **)a1, a2);
    LOBYTE(v8) = (_DWORD)LoopEstimatedTripCount != 0;
    if ((_DWORD)LoopEstimatedTripCount)
      v7 = LoopEstimatedTripCount >> 8;
  }
  return (v6 << 40) | ((unint64_t)v8 << 32) | LoopEstimatedTripCount | (v7 << 8);
}

BOOL llvm::LoopVectorizationCostModel::useEmulatedMaskMemRefHack(_DWORD *a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 == 60)
    return 1;
  if (v2 == 61)
    return *a1 > dword_1ED82B5F8;
  return 0;
}

uint64_t llvm::LoopVectorizationCostModel::collectInstsToScalarize(uint64_t result, llvm::Type *a2)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::DominatorTree *v8;
  uint64_t v9;
  llvm::LoopAccessInfo **v10;
  llvm::LoopAccessInfo *v11;
  _QWORD *i;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::LoopAccessInfo **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  llvm::Type *v28;
  _QWORD v29[3];

  v28 = a2;
  v3 = (unint64_t)a2 >> 32 != 1 && (_DWORD)a2 == 1;
  if ((_DWORD)a2 && !v3)
  {
    v4 = result;
    v6 = result + 128;
    v5 = *(_QWORD *)(result + 128);
    v29[0] = 0;
    result = sub_1C63DAD20(v5, *(_DWORD *)(v6 + 16), (int)a2, SHIDWORD(a2), v29);
    if (!(_DWORD)result || v29[0] == *(_QWORD *)v6 + 32 * *(unsigned int *)(v6 + 16))
    {
      result = (uint64_t)sub_1C63DD518(v6, (int *)&v28);
      v9 = *(_QWORD *)(v4 + 584);
      v10 = *(llvm::LoopAccessInfo ***)(v9 + 32);
      v23 = *(llvm::LoopAccessInfo ***)(v9 + 40);
      if (v23 != v10)
      {
        v24 = result + 8;
        do
        {
          v11 = *v10;
          if (*(_BYTE *)(v4 + 124)
            || (result = llvm::LoopAccessInfo::blockNeedsPredication(*v10, **(llvm::BasicBlock ***)(v4 + 608), *(llvm::Loop **)(*(_QWORD *)(v4 + 608) + 40), v8), (_DWORD)result))
          {
            for (i = (_QWORD *)*((_QWORD *)v11 + 6); i != (_QWORD *)((char *)v11 + 40); i = (_QWORD *)i[1])
            {
              if (i)
                v13 = (uint64_t)(i - 3);
              else
                v13 = 0;
              v14 = (unint64_t)v28;
              result = llvm::LoopVectorizationCostModel::isScalarWithPredication(v4, v13, v28, v8);
              if ((_DWORD)result)
              {
                v15 = 0;
                v25 = 0;
                v26 = 0;
                v27 = 0;
                if (HIDWORD(v14) != 1)
                {
                  v16 = *(unsigned __int8 *)(v13 + 16);
                  if (v16 == 60 || v16 == 61 && *(_DWORD *)v4 > dword_1ED82B5F8)
                  {
                    v15 = 0;
                  }
                  else
                  {
                    v17 = llvm::LoopVectorizationCostModel::computePredInstDiscount(v4, v13, (uint64_t)&v25, v14);
                    v15 = v25;
                    if ((v17 & 0x80000000) == 0)
                    {
                      v18 = v25 + 24 * v27;
                      if ((_DWORD)v26)
                      {
                        if (v27)
                        {
                          v19 = 24 * v27;
                          v20 = v25;
                          while ((*(_QWORD *)v20 | 0x1000) == 0xFFFFFFFFFFFFF000)
                          {
                            v20 += 24;
                            v19 -= 24;
                            if (!v19)
                              goto LABEL_36;
                          }
                        }
                        else
                        {
                          v20 = v25;
                        }
                      }
                      else
                      {
LABEL_36:
                        v20 = v25 + 24 * v27;
                      }
                      v21 = v25 + 24 * v27;
LABEL_39:
                      while (v20 != v21)
                      {
                        sub_1C6225784((uint64_t)v29, v24, (uint64_t *)v20, (_OWORD *)(v20 + 8));
                        v22 = v20 + 24;
                        v20 = v18;
                        if (v22 != v18)
                        {
                          v20 = v22;
                          while ((*(_QWORD *)v20 | 0x1000) == 0xFFFFFFFFFFFFF000)
                          {
                            v20 += 24;
                            if (v20 == v18)
                            {
                              v20 = v18;
                              goto LABEL_39;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                sub_1C4774094((llvm::SmallPtrSetImplBase *)(v4 + 56), (uint64_t)v11);
                result = MEMORY[0x1CAA32FB4](v15, 8);
              }
            }
          }
          ++v10;
        }
        while (v10 != v23);
      }
    }
  }
  return result;
}

uint64_t llvm::LoopVectorizationCostModel::computePredInstDiscount(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v12;
  unsigned int v13;
  _DWORD *v14;
  BOOL v15;
  int64_t v16;
  int v17;
  llvm::DominatorTree *v18;
  int v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  int64_t v34;
  BOOL v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  llvm::DominatorTree *v50;
  int v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t **v57;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  BOOL v66;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  unsigned int v75;
  unsigned int v76;
  _QWORD v77[10];

  v7 = 0;
  v8 = 0;
  v77[8] = *MEMORY[0x1E0C80C00];
  v9 = v77;
  v74 = v77;
  v76 = 8;
  v77[0] = a2;
  v10 = a4;
  v65 = a4 & 0xFFFFFFFF00000000;
  v12 = (a4 & 0xFFFFFFFF00000000) != 0x100000000 && a4 == 1;
  v66 = v12;
  v68 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a4;
  v13 = 1;
  do
  {
    v14 = (_DWORD *)*((_QWORD *)v74 + v13 - 1);
    v75 = v13 - 1;
    v71 = v14;
    v69 = 0;
    if (sub_1C617A1AC(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), (uint64_t)v14, &v69))
      v15 = v69 == *(_QWORD *)a3 + 24 * *(unsigned int *)(a3 + 16);
    else
      v15 = 1;
    if (!v15)
      goto LABEL_12;
    v64 = (uint64_t)v9;
    v63 = v7;
    llvm::LoopVectorizationCostModel::getInstructionCost(a1, (uint64_t)v14, a4, (uint64_t)&v69);
    v59 = v69;
    v60 = v70;
    llvm::LoopVectorizationCostModel::getInstructionCost(a1, (uint64_t)v14, 1uLL, (uint64_t)&v69);
    v72 = v10;
    LODWORD(v73) = 0;
    sub_1C4848B64((uint64_t)&v72, (uint64_t)&v69);
    v16 = v72;
    v17 = v73;
    if (llvm::LoopVectorizationCostModel::isScalarWithPredication(a1, (uint64_t)v14, (llvm::Type *)a4, v18))
    {
      v19 = *(unsigned __int8 *)(*(_QWORD *)v14 + 8);
      if (v19 != 7)
      {
        v20 = *(_QWORD **)(a1 + 616);
        if (v19 != 9 && !v66)
        {
          v57 = *(uint64_t ***)v14;
          if (v65 == 0x100000000)
            llvm::ScalableVectorType::get(v57, (llvm::Type *)a4);
          else
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v57, (llvm::Type *)a4);
        }
        v70 = a4;
        if (a4 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v69, -1, 1);
        }
        else
        {
          v21 = v68;
          if (!(_DWORD)a4)
            v21 = 0;
          v69 = v21;
        }
        v22 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v20 + 528))(*v20);
        v24 = v23;
        if (__OFADD__(v16, v22))
          v25 = ((v16 + v22) >> 63) ^ 0x8000000000000000;
        else
          v25 = v16 + v22;
        if (v70 >= 0x41 && v69)
          MEMORY[0x1CAA32F9C](v69, 0x1000C8000313F17);
        v72 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 616) + 856))(**(_QWORD **)(a1 + 616), 55, 0, 0);
        v73 = v26;
        v69 = v10;
        v70 = 0;
        sub_1C4848B64((uint64_t)&v69, (uint64_t)&v72);
        if (v24 == 1 || v70 == 1)
          v17 = 1;
        if (__OFADD__(v25, v69))
          v16 = ((uint64_t)(v25 + v69) >> 63) ^ 0x8000000000000000;
        else
          v16 = v25 + v69;
      }
    }
    v28 = v14[5];
    if ((v28 & 0x40000000) != 0)
    {
      v30 = (uint64_t *)*((_QWORD *)v14 - 1);
      v29 = v28 & 0x7FFFFFF;
    }
    else
    {
      v29 = v28 & 0x7FFFFFF;
      v30 = (uint64_t *)&v14[-8 * v29];
    }
    v61 = v10;
    v62 = v8;
    if (v29)
    {
      v38 = &v30[4 * v29];
      do
      {
        v39 = *v30;
        if (*v30)
          v40 = *(unsigned __int8 *)(*v30 + 16) >= 0x1Cu;
        else
          v40 = 0;
        if (v40)
        {
          v41 = *(_QWORD *)(v39 + 8);
          if (!v41
            || *(_QWORD *)(v41 + 8)
            || *(_QWORD *)(a2 + 40) != *(_QWORD *)(v39 + 40)
            || sub_1C63D4494(a1, *v30, a4)
            || (llvm::LoopVectorizationCostModel::isScalarWithPredication(a1, v39, (llvm::Type *)a4, v50) & 1) != 0)
          {
            goto LABEL_64;
          }
          v51 = *(_DWORD *)(v39 + 20);
          if ((v51 & 0x40000000) != 0)
          {
            v53 = *(uint64_t **)(v39 - 8);
            v52 = v51 & 0x7FFFFFF;
            if (v52)
            {
LABEL_94:
              v54 = 32 * v52;
              while (1)
              {
                v55 = *v53 && *(unsigned __int8 *)(*v53 + 16) >= 0x1Cu;
                if (v55 && sub_1C63D3774(a1, *v53, a4))
                  break;
                v53 += 4;
                v54 -= 32;
                if (!v54)
                  goto LABEL_103;
              }
LABEL_64:
              if (sub_1C6076878(a1, v39, a4))
              {
                v42 = *(_QWORD **)(a1 + 616);
                v43 = *(_QWORD *)v39;
                v44 = *(unsigned __int8 *)(v43 + 8);
                v45 = v44 == 7 || v44 == 9;
                if (!v45 && !v66)
                {
                  if (v65 == 0x100000000)
                    llvm::ScalableVectorType::get((uint64_t **)v43, (llvm::Type *)a4);
                  else
                    llvm::FixedVectorType::get((llvm::FixedVectorType *)v43, (llvm::Type *)a4);
                  v43 = v49;
                }
                v70 = a4;
                if (a4 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v69, -1, 1);
                }
                else
                {
                  v46 = v68;
                  if (!(_DWORD)a4)
                    v46 = 0;
                  v69 = v46;
                }
                v47 = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t *, _QWORD, uint64_t))(*(_QWORD *)*v42 + 528))(*v42, v43, &v69, 0, 1);
                if (v48 == 1)
                  v17 = 1;
                if (__OFADD__(v16, v47))
                  v16 = ((v16 + v47) >> 63) ^ 0x8000000000000000;
                else
                  v16 += v47;
                if (v70 >= 0x41 && v69)
                  MEMORY[0x1CAA32F9C](v69, 0x1000C8000313F17);
              }
              goto LABEL_82;
            }
          }
          else
          {
            v52 = v51 & 0x7FFFFFF;
            v53 = (uint64_t *)(v39 - 32 * v52);
            if (v52)
              goto LABEL_94;
          }
LABEL_103:
          v56 = v75;
          if (v75 >= (unint64_t)v76)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v64, v75 + 1, 8);
            v56 = v75;
          }
          *((_QWORD *)v74 + v56) = v39;
          ++v75;
        }
LABEL_82:
        v30 += 4;
      }
      while (v30 != v38);
    }
    if (v16 >= 0)
      v31 = v16;
    else
      v31 = v16 + 1;
    v32 = v31 >> 1;
    v33 = __OFSUB__(v59, v31 >> 1);
    v34 = v59 - (v31 >> 1);
    if (v33)
      v34 = (v34 >> 63) ^ 0x8000000000000000;
    v35 = v60 == 1 || v17 == 1;
    v7 = v63;
    if (v35)
      v7 = 1;
    v33 = __OFADD__(v62, v34);
    v36 = v62 + v34;
    if (v33)
      v8 = (v36 >> 63) ^ 0x8000000000000000;
    else
      v8 = v36;
    v37 = sub_1C617A140(a3, (uint64_t *)&v71);
    v37[1] = v32;
    *((_DWORD *)v37 + 4) = v17;
    v9 = (_QWORD *)v64;
    v10 = v61;
LABEL_12:
    v13 = v75;
  }
  while (v75);
  if (v74 != v9)
    free(v74);
  if (v7)
    return 0;
  else
    return v8;
}

void llvm::LoopVectorizationCostModel::getInstructionCost(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4;
  unint64_t *v5;
  unint64_t v8;
  _BOOL4 v11;
  _DWORD *v12;
  uint64_t v13;
  char *v14;
  const void *v15;
  const void *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  char *v21;
  unsigned int *v22;
  char *InstructionCost;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  char *v34;
  char *v35;
  unsigned int v36;
  _DWORD v37[3];
  _BYTE v38[32];
  unint64_t *v39;
  uint64_t v40;
  __int128 v41;

  v4 = a3;
  v5 = (unint64_t *)a2;
  v39 = (unint64_t *)a2;
  v40 = a3;
  if (sub_1C63D3774(a1, a2, a3))
  {
    LODWORD(v8) = 0;
    v4 = 1;
    v40 = 1;
  }
  else
  {
    v8 = HIDWORD(v4);
  }
  v11 = (_DWORD)v8 == 1 && (_DWORD)v4 != 0 || v4 > 1;
  if (v11 && sub_1C60785A4(a1, (uint64_t)v5, v4))
  {
    v12 = sub_1C63DD518(a1 + 128, (int *)&v40);
    *(_OWORD *)a4 = *(_OWORD *)(sub_1C617A140((uint64_t)(v12 + 2), (uint64_t *)&v39) + 1);
    *(_BYTE *)(a4 + 16) = 0;
    return;
  }
  v34 = 0;
  if ((sub_1C63DA57C(*(_QWORD *)(a1 + 200), *(_DWORD *)(a1 + 216), v4, v8, &v34) & 1) != 0)
  {
    v13 = (uint64_t)v34;
    if (!v11)
      goto LABEL_36;
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 200) + 72 * *(unsigned int *)(a1 + 216);
    if (!v11)
    {
LABEL_36:
      v34 = 0;
      InstructionCost = llvm::LoopVectorizationCostModel::getInstructionCost(a1, v5, v4, (uint64_t *)&v34);
      v25 = v24;
      v26 = v40;
      if ((_DWORD)v40)
        v27 = HIDWORD(v40) == 1;
      else
        v27 = 0;
      if ((v27 || v40 >= 2) && (*((_DWORD *)v34 + 2) & 0xFE) == 0x12)
      {
        v28 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 616) + 968))(**(_QWORD **)(a1 + 616));
        if (v28)
        {
          v29 = v28 < v26;
        }
        else
        {
          InstructionCost = 0;
          v29 = 0;
          v25 = v25 & 0xFFFFFFFF00000000 | 1;
        }
      }
      else
      {
        v29 = 0;
      }
      *(_QWORD *)a4 = InstructionCost;
      *(_QWORD *)(a4 + 8) = v25;
      *(_BYTE *)(a4 + 16) = v29;
      return;
    }
  }
  if (v13 == *(_QWORD *)(a1 + 200) + 72 * *(unsigned int *)(a1 + 216))
    goto LABEL_36;
  v14 = v38;
  v34 = v38;
  v15 = *(const void **)(v13 + 16);
  if (v15 == *(const void **)(v13 + 8))
  {
    v35 = v38;
    v16 = v15;
  }
  else
  {
    v30 = *(unsigned int *)(v13 + 24);
    v14 = (char *)malloc_type_malloc(8 * v30, 0x4065EBACuLL);
    if (!v14 && ((_DWORD)v30 || (v14 = (char *)malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v35 = v14;
    v16 = *(const void **)(v13 + 8);
    v15 = *(const void **)(v13 + 16);
  }
  v18 = *(_DWORD *)(v13 + 24);
  v17 = *(_DWORD *)(v13 + 28);
  v36 = v18;
  if (v15 == v16)
    v19 = v17;
  else
    v19 = v18;
  if (v19)
  {
    memmove(v14, v15, 8 * v19);
    v17 = *(_DWORD *)(v13 + 28);
    v5 = v39;
  }
  v20 = *(_DWORD *)(v13 + 32);
  v37[0] = v17;
  v37[1] = v20;
  v21 = (char *)sub_1C477672C((uint64_t)&v34, (uint64_t)v5);
  v22 = &v36;
  if (v35 == v34)
    v22 = v37;
  if (v21 == &v35[8 * *v22])
  {
    if (v35 != v34)
      free(v35);
    v4 = v40;
    goto LABEL_36;
  }
  llvm::LoopVectorizationCostModel::getInstructionCost(&v33, a1, v5, 1);
  v31 = v40;
  v32 = 0;
  v41 = v33;
  sub_1C4848B64((uint64_t)&v41, (uint64_t)&v31);
  *(_OWORD *)a4 = v41;
  *(_BYTE *)(a4 + 16) = 0;
  if (v35 != v34)
    free(v35);
}

BOOL sub_1C6076878(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _BOOL8 result;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;

  result = 0;
  v6 = HIDWORD(a3);
  if (*(unsigned __int8 *)(a2 + 16) <= 0x1Bu)
    v7 = 0;
  else
    v7 = a2;
  v8 = (_DWORD)a3 != 1 || v6 == 1;
  if (v8 && v7)
  {
    v9 = *(_QWORD *)(a1 + 584);
    v10 = sub_1C477672C(v9 + 56, *(_QWORD *)(v7 + 40));
    v11 = *(_QWORD *)(v9 + 64);
    v12 = 72;
    if (v11 == *(_QWORD *)(v9 + 56))
      v12 = 76;
    if (v10 == (_QWORD *)(v11 + 8 * *(unsigned int *)(v9 + v12))
      || llvm::Loop::isLoopInvariant(*(_QWORD *)(a1 + 584), v7))
    {
      return 0;
    }
    else
    {
      v16 = 0;
      if (sub_1C63DA57C(*(_QWORD *)(a1 + 176), *(_DWORD *)(a1 + 192), a3, v6, &v16))
      {
        v13 = v16;
        v14 = *(_QWORD *)(a1 + 176);
        v15 = *(_DWORD *)(a1 + 192);
      }
      else
      {
        v14 = *(_QWORD *)(a1 + 176);
        v15 = *(_DWORD *)(a1 + 192);
        v13 = v14 + 72 * v15;
      }
      return v13 == v14 + 72 * v15 || !sub_1C63D4494(a1, v7, a3);
    }
  }
  return result;
}

uint64_t llvm::LoopVectorizationCostModel::getMemInstScalarizationCost(uint64_t a1, uint64_t a2, llvm::Type *a3)
{
  int64_t v3;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  llvm::PredicatedScalarEvolution *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v22;
  int v23;
  uint64_t v24;
  llvm::LoopVectorizationLegality *v25;
  const llvm::Loop *v26;
  uint64_t v27;
  uint64_t v28;
  const llvm::Value *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  const llvm::Value *v34;
  int v35;
  unsigned int v36;
  const llvm::SCEV *SCEVIter;
  uint64_t SCEV;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t ScalarizationOverhead;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  llvm::PredicatedScalarEvolution *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;

  if ((unint64_t)a3 >> 32 == 1)
    return 0;
  v7 = a1;
  v8 = *(unsigned __int8 *)(a2 + 16);
  if (!a2 || (v9 = (uint64_t *)a2, v8 != 60))
    v9 = *(uint64_t **)(a2 - 64);
  v10 = *(llvm::PredicatedScalarEvolution **)(a1 + 592);
  v11 = *(_QWORD *)(a2 - 32);
  v12 = *(_DWORD *)(*(_QWORD *)v11 + 8);
  if ((v12 & 0xFE) == 0x12)
    v12 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v11 + 16) + 8);
  v13 = *v9;
  v14 = *((_QWORD *)v10 + 11);
  if ((v8 - 62) < 0xFFFFFFFE || a2 == 0)
    v16 = 0;
  else
    v16 = *(uint64_t **)(a2 - 32);
  v17 = *v16;
  v18 = a3;
  v19 = *(unsigned __int8 *)(*v16 + 8);
  if (v19 != 7 && v19 != 9 && a3 != 1)
  {
    llvm::FixedVectorType::get((llvm::FixedVectorType *)*v16, a3);
    v17 = v56;
    v10 = *(llvm::PredicatedScalarEvolution **)(v7 + 592);
  }
  v22 = v12 >> 8;
  if (*((_BYTE *)v16 + 16) != 62)
  {
    SCEV = 0;
    goto LABEL_42;
  }
  v59 = v13;
  v60 = v10;
  v57 = v17;
  v58 = v14;
  v61 = v7;
  v23 = *((_DWORD *)v16 + 5);
  v24 = v23 & 0x7FFFFFF;
  if ((v23 & 0x7FFFFFFu) < 2)
  {
LABEL_39:
    SCEV = llvm::PredicatedScalarEvolution::getSCEV((int8x16_t *)v60, (llvm::Value *)v16);
    goto LABEL_40;
  }
  v25 = *(llvm::LoopVectorizationLegality **)(v7 + 608);
  v26 = *(const llvm::Loop **)(v61 + 584);
  v27 = 1;
  v28 = *((_QWORD *)v10 + 11);
  while (1)
  {
    v29 = (const llvm::Value *)v16[4 * v27 + -4 * (*((_DWORD *)v16 + 5) & 0x7FFFFFF)];
    v30 = *(_QWORD *)(v28 + 104);
    v31 = *(_DWORD *)(v28 + 120);
    if (!v31)
      goto LABEL_32;
    v32 = ((v29 >> 4) ^ (v29 >> 9)) & (v31 - 1);
    v33 = v30 + 48 * v32;
    v34 = *(const llvm::Value **)(v33 + 24);
    if (v34 != v29)
    {
      v35 = 1;
      while (v34 != (const llvm::Value *)-4096)
      {
        v36 = v32 + v35++;
        v32 = v36 & (v31 - 1);
        v33 = v30 + 48 * v32;
        v34 = *(const llvm::Value **)(v33 + 24);
        if (v34 == v29)
          goto LABEL_33;
      }
LABEL_32:
      v33 = v30 + 48 * v31;
    }
LABEL_33:
    if (v33 == v30 + 48 * v31 || (SCEVIter = *(const llvm::SCEV **)(v33 + 40)) == 0)
      SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v28, v16[4 * v27 + -4 * (*((_DWORD *)v16 + 5) & 0x7FFFFFF)]);
    if (llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)v28, SCEVIter, v26) != 1
      && !llvm::LoopVectorizationLegality::isInductionVariable(v25, v29))
    {
      break;
    }
    if (++v27 == v24)
      goto LABEL_39;
  }
  SCEV = 0;
LABEL_40:
  v7 = v61;
  v18 = a3;
  v13 = v59;
  v22 = v12 >> 8;
  v17 = v57;
  v14 = v58;
LABEL_42:
  v62 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(***(_QWORD ***)(v7 + 616) + 976))(**(_QWORD **)(v7 + 616), v17, v14, SCEV);
  v63 = v39;
  v64 = v18;
  LODWORD(v65) = 0;
  sub_1C4848B64((uint64_t)&v64, (uint64_t)&v62);
  v40 = v64;
  v41 = v13;
  if ((*(_DWORD *)(v13 + 8) & 0xFE) == 0x12)
    v41 = **(_QWORD **)(v13 + 16);
  v62 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, unint64_t, uint64_t, _QWORD, _QWORD))(***(_QWORD ***)(v7 + 616) + 888))(**(_QWORD **)(v7 + 616), *(unsigned __int8 *)(a2 + 16) - 28, v41, ((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1) & 0x3F, v22, 0, 0);
  v63 = v42;
  v64 = v18;
  LODWORD(v65) = 0;
  sub_1C4848B64((uint64_t)&v64, (uint64_t)&v62);
  if (__OFADD__(v40, v64))
    v43 = ((uint64_t)(v40 + v64) >> 63) ^ 0x8000000000000000;
  else
    v43 = v40 + v64;
  ScalarizationOverhead = llvm::LoopVectorizationCostModel::getScalarizationOverhead(v7, (uint64_t *)a2, a3);
  if (__OFADD__(v43, ScalarizationOverhead))
    v3 = ((uint64_t)(v43 + ScalarizationOverhead) >> 63) ^ 0x8000000000000000;
  else
    v3 = v43 + ScalarizationOverhead;
  if (sub_1C63D45E8(v7, a2, a3, 0))
  {
    if (v3 >= 0)
      v45 = v3;
    else
      v45 = v3 + 1;
    v46 = v45 >> 1;
    v47.n128_f64[0] = llvm::FixedVectorType::get((llvm::FixedVectorType *)(**(_QWORD **)v13 + 1888), a3);
    v49 = v48;
    v50 = *(_QWORD **)(v7 + 616);
    LODWORD(v65) = (_DWORD)a3;
    if (a3 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v64, -1, 1);
    }
    else
    {
      v51 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a3;
      if (!(_DWORD)a3)
        v51 = 0;
      v64 = v51;
    }
    v52 = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t *, _QWORD, uint64_t, __n128))(*(_QWORD *)*v50
                                                                                                  + 528))(*v50, v49, &v64, 0, 1, v47);
    if (__OFADD__(v46, v52))
      v53 = ((v46 + v52) >> 63) ^ 0x8000000000000000;
    else
      v53 = v46 + v52;
    if (v65 >= 0x41 && v64)
      MEMORY[0x1CAA32F9C](v64, 0x1000C8000313F17);
    v54 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(***(_QWORD ***)(v7 + 616) + 856))(**(_QWORD **)(v7 + 616), 2, 0, 0);
    if (__OFADD__(v53, v54))
      v3 = ((uint64_t)(v53 + v54) >> 63) ^ 0x8000000000000000;
    else
      v3 = v53 + v54;
    v55 = *(unsigned __int8 *)(a2 + 16);
    if (v55 == 60 || v55 == 61 && *(_DWORD *)v7 > dword_1ED82B5F8)
      return 3000000;
  }
  return v3;
}

unint64_t llvm::LoopVectorizationCostModel::getConsecutiveMemOpCost(uint64_t a1, uint64_t a2, llvm::Type *a3)
{
  int v5;
  uint64_t ***v6;
  uint64_t **v7;
  int v8;
  uint64_t **v10;
  llvm::Value *v11;
  int isConsecutivePtr;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t **v24;

  v5 = *(unsigned __int8 *)(a2 + 16);
  if (!a2 || (v6 = (uint64_t ***)a2, v5 != 60))
    v6 = *(uint64_t ****)(a2 - 64);
  v7 = *v6;
  v8 = *((unsigned __int8 *)*v6 + 8);
  if (v8 == 7 || v8 == 9)
  {
    v10 = v7;
  }
  else if (((unint64_t)a3 & 0xFFFFFFFF00000000) == 0x100000000 || (v10 = v7, a3 != 1))
  {
    if (((unint64_t)a3 & 0xFFFFFFFF00000000) == 0x100000000)
      llvm::ScalableVectorType::get(v7, a3);
    else
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v7, a3);
    v10 = v24;
    v5 = *(unsigned __int8 *)(a2 + 16);
  }
  if (a2 && v5 == 60)
  {
    v11 = *(llvm::Value **)(a2 - 32);
  }
  else if (v5 != 61 || a2 == 0)
  {
    v11 = 0;
  }
  else
  {
    v11 = *(llvm::Value **)(a2 - 32);
  }
  isConsecutivePtr = llvm::LoopVectorizationLegality::isConsecutivePtr(*(llvm::LoopVectorizationLegality **)(a1 + 608), (llvm::Type *)v7, v11);
  v14 = *(_QWORD *)(a1 + 608);
  v15 = sub_1C477672C(v14 + 488, a2);
  v16 = *(_QWORD *)(v14 + 496);
  v17 = 504;
  if (v16 == *(_QWORD *)(v14 + 488))
    v17 = 508;
  v18 = (_QWORD *)(v16 + 8 * *(unsigned int *)(v14 + v17));
  v19 = ***(_QWORD ***)(a1 + 616);
  if (v15 == v18)
    v20 = (*(uint64_t (**)(void))(v19 + 888))();
  else
    v20 = (*(uint64_t (**)(void))(v19 + 904))();
  v21 = v20;
  if (isConsecutivePtr < 0)
  {
    v22 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t **, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 616)
                                                                                                 + 832))(**(_QWORD **)(a1 + 616), 1, v10, 0, 0, 0, 0);
    if (__OFADD__(v21, v22))
      return ((v21 + v22) >> 63) ^ 0x8000000000000000;
    else
      v21 += v22;
  }
  return v21;
}

unint64_t llvm::LoopVectorizationCostModel::getUniformMemOpCost(uint64_t a1, uint64_t a2, llvm::Type *a3)
{
  int v3;
  int v6;
  uint64_t ***v7;
  uint64_t **v8;
  int v9;
  uint64_t **v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  BOOL isUniform;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t **v28;

  v3 = (int)a3;
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (!a2 || (v7 = (uint64_t ***)a2, v6 != 60))
    v7 = *(uint64_t ****)(a2 - 64);
  v8 = *v7;
  v9 = *((unsigned __int8 *)*v7 + 8);
  if (v9 == 7 || v9 == 9)
  {
    v11 = v8;
  }
  else if (((unint64_t)a3 & 0xFFFFFFFF00000000) == 0x100000000 || (v11 = v8, a3 != 1))
  {
    if (((unint64_t)a3 & 0xFFFFFFFF00000000) == 0x100000000)
      llvm::ScalableVectorType::get(v8, a3);
    else
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v8, a3);
    v11 = v28;
    v6 = *(unsigned __int8 *)(a2 + 16);
  }
  v12 = __clz(1 << ((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1));
  v13 = **(_QWORD **)(a2 - 32);
  v14 = *(_DWORD *)(v13 + 8);
  if ((v14 & 0xFE) == 0x12)
    v14 = *(_DWORD *)(**(_QWORD **)(v13 + 16) + 8);
  v15 = v12 ^ 0x3Fu;
  v16 = v14 >> 8;
  if (v6 == 60)
  {
    v17 = (*(uint64_t (**)(_QWORD, uint64_t **, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 616) + 976))(**(_QWORD **)(a1 + 616), v8, 0, 0);
    v18 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t **, uint64_t, uint64_t, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 616) + 888))(**(_QWORD **)(a1 + 616), 32, v8, v15, v16, 0, 0);
    if (__OFADD__(v17, v18))
      v19 = ((v17 + v18) >> 63) ^ 0x8000000000000000;
    else
      v19 = v17 + v18;
    v20 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t **, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 616)
                                                                                                + 832))(**(_QWORD **)(a1 + 616), 0, v11, 0, 0, 0, 0);
    v21 = __OFADD__(v19, v20);
    v22 = v19 + v20;
  }
  else
  {
    isUniform = llvm::LoopAccessInfo::isUniform(*(const llvm::Loop ***)(*(_QWORD *)(a1 + 608) + 56), *(llvm::Value **)(a2 - 64));
    v24 = (*(uint64_t (**)(_QWORD, uint64_t **, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 616) + 976))(**(_QWORD **)(a1 + 616), v8, 0, 0);
    v25 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t **, uint64_t, uint64_t, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 616) + 888))(**(_QWORD **)(a1 + 616), 33, v8, v15, v16, 0, 0);
    if (__OFADD__(v24, v25))
      v26 = ((v24 + v25) >> 63) ^ 0x8000000000000000;
    else
      v26 = v24 + v25;
    if (isUniform)
      v27 = 0;
    else
      v27 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t **, _QWORD))(***(_QWORD ***)(a1 + 616) + 872))(**(_QWORD **)(a1 + 616), 61, v11, (v3 - 1));
    v21 = __OFADD__(v26, v27);
    v22 = v26 + v27;
  }
  if (v21)
    return (v22 >> 63) ^ 0x8000000000000000;
  else
    return v22;
}

unint64_t llvm::LoopVectorizationCostModel::getGatherScatterCost(uint64_t a1, uint64_t a2, llvm::Type *a3)
{
  int v5;
  uint64_t ***v6;
  uint64_t **v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t **v21;

  v5 = *(unsigned __int8 *)(a2 + 16);
  if (!a2 || (v6 = (uint64_t ***)a2, v5 != 60))
    v6 = *(uint64_t ****)(a2 - 64);
  v7 = *v6;
  v8 = *((unsigned __int8 *)*v6 + 8);
  v9 = v8 == 7 || v8 == 9;
  if (!v9 && (((unint64_t)a3 & 0xFFFFFFFF00000000) == 0x100000000 || a3 != 1))
  {
    if (((unint64_t)a3 & 0xFFFFFFFF00000000) == 0x100000000)
      llvm::ScalableVectorType::get(v7, a3);
    else
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v7, a3);
    v7 = v21;
    v5 = *(unsigned __int8 *)(a2 + 16);
  }
  v10 = 0;
  if (a2 && (v5 - 62) >= 0xFFFFFFFE)
    v10 = *(_QWORD *)(a2 - 32);
  v11 = ((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1) & 0x3F;
  v12 = (*(uint64_t (**)(_QWORD, uint64_t **, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 616) + 976))(**(_QWORD **)(a1 + 616), v7, 0, 0);
  v13 = *(_QWORD **)(a1 + 616);
  v14 = *(unsigned __int8 *)(a2 + 16) - 28;
  v15 = *(_QWORD *)(a1 + 608);
  v16 = sub_1C477672C(v15 + 488, a2);
  v17 = *(_QWORD *)(v15 + 496);
  v18 = 504;
  if (v17 == *(_QWORD *)(v15 + 488))
    v18 = 508;
  v19 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t **, uint64_t, BOOL, unint64_t, _QWORD, uint64_t))(*(_QWORD *)*v13 + 912))(*v13, v14, v7, v10, v16 != (_QWORD *)(v17 + 8 * *(unsigned int *)(v15 + v18)), v11, 0, a2);
  if (__OFADD__(v12, v19))
    return ((v12 + v19) >> 63) ^ 0x8000000000000000;
  else
    return v12 + v19;
}

unint64_t llvm::LoopVectorizationCostModel::getInterleaveGroupCost(uint64_t a1, _BYTE *a2, llvm::Type *a3)
{
  unint64_t v3;
  int v5;
  llvm::FixedVectorType **v8;
  llvm::FixedVectorType *v9;
  int v10;
  BOOL v12;
  llvm::FixedVectorType *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t v19;
  int i;
  uint64_t v21;
  int v22;
  BOOL v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  llvm::FixedVectorType *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD v40[2];
  uint64_t v41;
  int v42;
  void *v43;
  uint64_t v44;
  _QWORD v45[3];

  v45[2] = *MEMORY[0x1E0C80C00];
  if ((unint64_t)a3 >> 32 == 1)
    return 0;
  v5 = (int)a3;
  if (!a2 || (v8 = (llvm::FixedVectorType **)a2, a2[16] != 60))
    v8 = (llvm::FixedVectorType **)*((_QWORD *)a2 - 8);
  v9 = *v8;
  v10 = *((unsigned __int8 *)*v8 + 8);
  v12 = v10 == 7 || v10 == 9 || (_DWORD)a3 == 1;
  v13 = v9;
  if (!v12)
    llvm::FixedVectorType::get(v9, a3);
  v36 = v13;
  v14 = **((_QWORD **)a2 - 4);
  v15 = *(_DWORD *)(v14 + 8);
  if ((v15 & 0xFE) == 0x12)
    v15 = *(_DWORD *)(**(_QWORD **)(v14 + 16) + 8);
  v16 = (uint64_t *)(*(_QWORD *)(a1 + 672) + 48);
  v43 = a2;
  v41 = 0;
  v17 = 0;
  if (sub_1C61252B8(v16, &v43, &v41))
    v17 = *(uint64_t **)(v41 + 8);
  v39 = v15 >> 8;
  v18 = *(_DWORD *)v17;
  llvm::FixedVectorType::get(v9, (llvm::Type *)(*(_DWORD *)v17 * v5));
  v38 = v19;
  v43 = v45;
  v44 = 0x400000000;
  if (v18)
  {
    for (i = 0; i != v18; ++i)
    {
      LODWORD(v41) = i + *((_DWORD *)v17 + 8);
      if (sub_1C4FA9B60(v17 + 1, &v41))
      {
        v21 = v44;
        if (v44 >= (unint64_t)HIDWORD(v44))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, (uint64_t)v45, v44 + 1, 4);
          v21 = v44;
        }
        *((_DWORD *)v43 + v21) = i;
        LODWORD(v44) = v44 + 1;
      }
    }
  }
  LODWORD(v41) = *(_DWORD *)v17 + *((_DWORD *)v17 + 8) - 1;
  if (sub_1C4FA9B60(v17 + 1, &v41) || !*(_DWORD *)(a1 + 120))
  {
    v22 = a2[16];
    v37 = *(_DWORD *)v17;
    if (v22 == 61)
    {
      v23 = *((_DWORD *)v17 + 4) < *(_DWORD *)v17;
      v22 = 61;
    }
    else
    {
      v23 = 0;
    }
  }
  else
  {
    v22 = a2[16];
    v37 = *(_DWORD *)v17;
    v23 = 1;
  }
  v24 = *(_QWORD **)(a1 + 616);
  v25 = (v22 - 28);
  v26 = v43;
  v27 = v44;
  v28 = *((unsigned __int8 *)v17 + 5);
  v29 = *(_QWORD *)(a1 + 608);
  v30 = sub_1C477672C(v29 + 488, (uint64_t)a2);
  v31 = *(_QWORD *)(v29 + 496);
  v32 = 504;
  if (v31 == *(_QWORD *)(v29 + 488))
    v32 = 508;
  BYTE5(v35) = v23;
  LODWORD(v35) = 0;
  BYTE4(v35) = v30 != (_QWORD *)(v31 + 8 * *(unsigned int *)(v29 + v32));
  v3 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, void *, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)*v24 + 920))(*v24, v25, v38, v37, v26, v27, v28, v39, v35);
  if (*((_BYTE *)v17 + 4))
  {
    v33 = *((unsigned int *)v17 + 4);
    v40[0] = (*(uint64_t (**)(_QWORD, uint64_t, llvm::FixedVectorType *, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 616) + 832))(**(_QWORD **)(a1 + 616), 1, v36, 0, 0, 0, 0);
    v40[1] = v34;
    v41 = v33;
    v42 = 0;
    sub_1C4848B64((uint64_t)&v41, (uint64_t)v40);
    if (__OFADD__(v3, v41))
      v3 = ((uint64_t)(v3 + v41) >> 63) ^ 0x8000000000000000;
    else
      v3 += v41;
  }
  if (v43 != v45)
    free(v43);
  return v3;
}

void llvm::LoopVectorizationCostModel::getReductionPatternCost(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t Opcode;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t ****v37;
  uint64_t **v38;
  llvm::Type *v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v51;
  unsigned int v52;
  uint64_t *v54;
  uint64_t v56;
  int v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  uint64_t v63;
  uint64_t *v64;
  BOOL v66;
  BOOL v67;
  int v68;
  uint64_t **v69;
  uint64_t v70;
  int v71;
  _QWORD **v72;
  BOOL isLoopInvariant;
  int v75;
  uint64_t ****v76;
  unsigned int v77;
  BOOL v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  int v83;
  uint64_t ****v84;
  uint64_t *v85;
  BOOL v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t **v91;
  llvm::Type *v92;
  uint64_t v93;
  __n128 v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  int v100;
  int64_t v101;
  int v102;
  _BOOL4 v103;
  _BOOL4 v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  int v110;
  int64_t v111;
  int v112;
  _BOOL4 v113;
  _BOOL4 v114;
  int v115;
  llvm::FixedVectorType ***v116;
  int v117;
  uint64_t ****v118;
  uint64_t **v119;
  uint64_t **v120;
  llvm::Type *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  llvm::Type *v125;
  uint64_t v126;
  __n128 v127;
  int v128;
  _QWORD *v129;
  llvm::Type *v130;
  uint64_t v131;
  __n128 v132;
  int v133;
  int v134;
  int v135;
  int v136;
  _QWORD *v138;
  uint64_t v139;
  int v140;
  uint64_t ****v141;
  uint64_t v142;
  int v143;
  uint64_t **v144;
  llvm::Type *v145;
  uint64_t v146;
  __n128 v147;
  int v148;
  int64_t v149;
  unint64_t v150;
  BOOL v151;
  int64_t v152;
  int64_t v153;
  int v156;
  _BOOL4 v157;
  uint64_t **v158;
  llvm::Type *v159;
  uint64_t v160;
  uint64_t **v161;
  llvm::Type *v162;
  uint64_t v163;
  __n128 v164;
  uint64_t v165;
  uint64_t v166;
  llvm::FixedVectorType *v167;
  int v168;
  uint64_t v169;
  int v170;
  int v171;
  uint64_t v172;
  int v173;
  int64_t v174;
  int v175;
  int64_t v176;
  int64_t v177;
  int64_t v178;
  _BOOL4 v181;
  _BOOL4 v182;
  char v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  unsigned int v189;
  int v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t **v195;
  llvm::FixedVectorType *v196;
  llvm::FixedVectorType *v197;
  llvm::FixedVectorType *v198;
  int v199;
  llvm::FixedVectorType *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  llvm::FixedVectorType *v209;
  llvm::FixedVectorType *v210;

  if (!*(_DWORD *)(a1 + 304) || HIDWORD(a3) != 1 && a3 == 1 || (*(_DWORD *)(a4 + 8) & 0xFE) != 0x12)
    goto LABEL_27;
  v208 = a2;
  if (a2)
  {
    v11 = *(unsigned __int8 *)(a2 + 16);
    if (v11 > 0x1B)
      v12 = v11 - 28;
    else
      v12 = *(unsigned __int16 *)(a2 + 18);
    if (v12 == 39 || (v13 = a2, v12 == 40))
    {
      v14 = *(_QWORD *)(a2 + 8);
      if (!v14)
        goto LABEL_27;
      v15 = *(_QWORD *)(v14 + 8);
      if (v15)
      {
        v16 = *(_QWORD *)(a2 + 8);
        while (*(_QWORD *)(v15 + 24) == *(_QWORD *)(v16 + 24))
        {
          v16 = *(_QWORD *)(v16 + 8);
          v15 = *(_QWORD *)(v15 + 8);
          if (!v15)
            goto LABEL_17;
        }
        goto LABEL_27;
      }
LABEL_17:
      v13 = *(_QWORD *)(v14 + 24);
      v208 = v13;
    }
  }
  else
  {
    v13 = 0;
  }
  v17 = *(unsigned __int8 *)(v13 + 16);
  if (v17 == 45 || v17 == 5 && *(_WORD *)(v13 + 18) == 17)
  {
    v18 = *(_QWORD *)(v13 + 8);
    v19 = *(_QWORD *)(v18 + 24);
    if (*(_BYTE *)(v19 + 16) == 41)
    {
      v20 = *(_QWORD *)(v18 + 8);
      if (v20)
      {
        while (*(_QWORD *)(v20 + 24) == *(_QWORD *)(v18 + 24))
        {
          v18 = *(_QWORD *)(v18 + 8);
          v20 = *(_QWORD *)(v20 + 8);
          if (!v20)
            goto LABEL_25;
        }
        goto LABEL_27;
      }
LABEL_25:
      v208 = v19;
      v13 = v19;
    }
  }
  v209 = 0;
  if ((sub_1C6144BDC(*(_QWORD *)(a1 + 536), *(_DWORD *)(a1 + 552), v13, &v209) & 1) == 0)
  {
LABEL_27:
    *(_BYTE *)a6 = 0;
    *(_BYTE *)(a6 + 16) = 0;
    return;
  }
  v21 = sub_1C61B6040((uint64_t *)(a1 + 536), &v208)[1];
  v207 = v21;
  v22 = *(unsigned __int8 *)(v21 + 16);
  v23 = v21;
  while (v22 != 83)
  {
    v23 = sub_1C61B6040((uint64_t *)(a1 + 536), &v207)[1];
    v207 = v23;
    v22 = *(unsigned __int8 *)(v23 + 16);
  }
  v24 = sub_1C63D426C(*(_QWORD *)(a1 + 608) + 80, v23);
  v25 = *(_QWORD **)(a1 + 616);
  Opcode = llvm::RecurrenceDescriptor::getOpcode(*(_DWORD *)(v24 + 40));
  v27 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v25 + 928))(*v25, Opcode, a4, *(unsigned int *)(v24 + 44) | 0x100000000, a5);
  v29 = v28;
  if (*(_DWORD *)(v24 + 40) == 14)
  {
    v30 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 616) + 824))(**(_QWORD **)(a1 + 616), 18, a4, a5, 0, 0, 0, 0, 0, 0, 0);
    if (v31 == 1)
      v29 = v29 & 0xFFFFFFFF00000000 | 1;
    if (__OFADD__(v27, v30))
      v27 = ((uint64_t)(v27 + v30) >> 63) ^ 0x8000000000000000;
    else
      v27 += v30;
  }
  if (!llvm::LoopVectorizeHints::allowReordering(*(llvm::LoopVectorizeHints **)(a1 + 664)) && *(_BYTE *)(v24 + 65))
    goto LABEL_275;
  v32 = *(_DWORD *)(v208 + 20);
  if ((v32 & 0x40000000) != 0)
    v33 = *(uint64_t **)(v208 - 8);
  else
    v33 = (uint64_t *)(v208 - 32 * (v32 & 0x7FFFFFF));
  v34 = v33[4];
  if (v34 == v21)
    v34 = *v33;
  if (*(unsigned __int8 *)(v34 + 16) <= 0x1Bu)
    v35 = 0;
  else
    v35 = v34;
  v36 = *(_DWORD *)(a2 + 20);
  if ((v36 & 0x40000000) != 0)
    v37 = *(uint64_t *****)(a2 - 8);
  else
    v37 = (uint64_t ****)(a2 - 32 * (v36 & 0x7FFFFFF));
  v38 = **v37;
  v39 = (llvm::Type *)*(unsigned int *)(a4 + 32);
  if (*(_BYTE *)(a4 + 8) == 19)
    llvm::ScalableVectorType::get(v38, v39);
  else
    llvm::FixedVectorType::get((llvm::FixedVectorType *)v38, v39);
  v204 = v40;
  if (!v35)
    goto LABEL_273;
  v41 = *(unsigned __int8 *)(v35 + 16);
  v42 = v41 - 28;
  v43 = v41 - 28;
  if (v41 <= 0x1B)
    v43 = *(unsigned __int16 *)(v35 + 18);
  if (v43 == 39)
  {
    v44 = *(_DWORD *)(v35 + 20);
    if ((v44 & 0x40000000) != 0)
      v45 = *(_QWORD *)(v35 - 8);
    else
      v45 = v35 - 32 * (v44 & 0x7FFFFFF);
    v46 = *(_QWORD *)v45;
    v47 = *(unsigned __int8 *)(*(_QWORD *)v45 + 16);
    if (v47 == 5)
    {
      if (*(_WORD *)(v46 + 18) == 17)
      {
        v54 = (uint64_t *)(v46 - 32 * (*(_DWORD *)(v46 + 20) & 0x7FFFFFF));
        v48 = *v54;
        v49 = *(unsigned __int8 *)(*v54 + 16);
        if (*v54 && v49 >= 0x1C)
        {
          v56 = v54[4];
          v52 = *(unsigned __int8 *)(v56 + 16);
          v201 = v56;
          if (v56 && v52 > 0x1B)
            goto LABEL_108;
        }
      }
    }
    else if (v47 == 45)
    {
      v48 = *(_QWORD *)(v46 - 64);
      v49 = *(unsigned __int8 *)(v48 + 16);
      if (v48 && v49 >= 0x1C)
      {
        v51 = *(_QWORD *)(v46 - 32);
        v52 = *(unsigned __int8 *)(v51 + 16);
        v201 = v51;
        if (v51 && v52 >= 0x1C)
          goto LABEL_108;
      }
    }
  }
  if (v41 <= 0x1B)
    v42 = *(unsigned __int16 *)(v35 + 18);
  if (v42 != 40)
    goto LABEL_130;
  v58 = *(_DWORD *)(v35 + 20);
  if ((v58 & 0x40000000) != 0)
    v59 = *(uint64_t **)(v35 - 8);
  else
    v59 = (uint64_t *)(v35 - 32 * (v58 & 0x7FFFFFF));
  v60 = *v59;
  v61 = *(unsigned __int8 *)(v60 + 16);
  if (v61 == 5)
  {
    if (*(_WORD *)(v60 + 18) != 17)
      goto LABEL_130;
    v64 = (uint64_t *)(v60 - 32 * (*(_DWORD *)(v60 + 20) & 0x7FFFFFF));
    v48 = *v64;
    v49 = *(unsigned __int8 *)(*v64 + 16);
    if (!*v64 || v49 < 0x1C)
      goto LABEL_130;
    v63 = v64[4];
  }
  else
  {
    if (v61 != 45)
      goto LABEL_130;
    v48 = *(_QWORD *)(v60 - 64);
    v49 = *(unsigned __int8 *)(v48 + 16);
    if (!v48 || v49 < 0x1C)
      goto LABEL_130;
    v63 = *(_QWORD *)(v60 - 32);
  }
  v52 = *(unsigned __int8 *)(v63 + 16);
  v201 = v63;
  if (v63)
    v66 = v52 >= 0x1C;
  else
    v66 = 0;
  if (!v66)
    goto LABEL_130;
LABEL_108:
  v67 = v49 - 67 <= 1 && v49 == v52;
  if (v67)
  {
    v68 = *(_DWORD *)(v48 + 20);
    v69 = (v68 & 0x40000000) != 0 ? *(uint64_t ***)(v48 - 8) : (uint64_t **)(v48 - 32 * (v68 & 0x7FFFFFF));
    v70 = **v69;
    v71 = *(_DWORD *)(v201 + 20);
    v72 = (v71 & 0x40000000) != 0 ? *(_QWORD ***)(v201 - 8) : (_QWORD **)(v201 - 32 * (v71 & 0x7FFFFFF));
    if (v70 == **v72)
    {
      if (llvm::Loop::isLoopInvariant(*(_QWORD *)(a1 + 584), v48))
      {
        v41 = *(unsigned __int8 *)(v35 + 16);
      }
      else
      {
        isLoopInvariant = llvm::Loop::isLoopInvariant(*(_QWORD *)(a1 + 584), v201);
        v41 = *(unsigned __int8 *)(v35 + 16);
        if (!isLoopInvariant)
        {
          v199 = *(unsigned __int8 *)(v48 + 16);
          if (v199 == v41 || v48 == v201)
          {
            v75 = *(_DWORD *)(v48 + 20);
            if ((v75 & 0x40000000) != 0)
              v76 = *(uint64_t *****)(v48 - 8);
            else
              v76 = (uint64_t ****)(v48 - 32 * (v75 & 0x7FFFFFF));
            v158 = **v76;
            v159 = (llvm::Type *)*(unsigned int *)(v204 + 32);
            if (*(_BYTE *)(v204 + 8) == 19)
              llvm::ScalableVectorType::get(v158, v159);
            else
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v158, v159);
            v203 = v160;
            v161 = *(uint64_t ***)v48;
            v162 = (llvm::Type *)*(unsigned int *)(v204 + 32);
            if (*(_BYTE *)(v204 + 8) == 19)
              v164.n128_f64[0] = llvm::ScalableVectorType::get(v161, v162);
            else
              v164.n128_f64[0] = llvm::FixedVectorType::get((llvm::FixedVectorType *)v161, v162);
            v165 = v163;
            v166 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __n128))(***(_QWORD ***)(a1 + 616) + 840))(**(_QWORD **)(a1 + 616), *(unsigned __int8 *)(v48 + 16) - 28, v163, v203, 0, a5, v48, v164);
            v196 = v167;
            v198 = (llvm::FixedVectorType *)v166;
            v192 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 616) + 824))(**(_QWORD **)(a1 + 616), 17, v165, a5, 0, 0, 0, 0, 0, 0, 0);
            v194 = v168;
            v169 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 616) + 840))(**(_QWORD **)(a1 + 616), *(unsigned __int8 *)(v35 + 16) - 28, v204, v165, 0, a5, v35);
            v171 = v170;
            v172 = (*(uint64_t (**)(_QWORD, uint64_t, BOOL, _QWORD, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 616)
                                                                                              + 944))(**(_QWORD **)(a1 + 616), 1, v199 == 67, *(_QWORD *)(v24 + 56), v203, a5);
            if (!v173)
            {
              v174 = v172;
              v205 = 2;
              v206 = 0;
              v209 = v198;
              v210 = v196;
              sub_1C4848B64((uint64_t)&v209, (uint64_t)&v205);
              v175 = (int)v210;
              v176 = (int64_t)v209 + v192;
              if (__OFADD__(v209, v192))
                v176 = (v176 >> 63) ^ 0x8000000000000000;
              v151 = __OFADD__(v176, v169);
              v177 = v176 + v169;
              if (v151)
                v177 = (v177 >> 63) ^ 0x8000000000000000;
              v151 = __OFADD__(v177, v27);
              v178 = v177 + v27;
              if (v151)
                v178 = (v178 >> 63) ^ 0x8000000000000000;
              if (v194 == 1 || v171 == 1 || (_DWORD)v29 == 1)
                v175 = 1;
              v181 = v174 < v178;
              v67 = v175 == 0;
              v182 = v175 > 0;
              if (!v67)
                v181 = v182;
              if (v181)
              {
                if (v208 == a2)
                  v105 = v174;
                else
                  v105 = 0;
                goto LABEL_180;
              }
            }
            goto LABEL_273;
          }
        }
      }
    }
  }
LABEL_130:
  if (v41 > 0x1B)
    v77 = v41 - 28;
  else
    v77 = *(unsigned __int16 *)(v35 + 18);
  if (v77 == 39 || v77 == 40)
  {
    v78 = llvm::Loop::isLoopInvariant(*(_QWORD *)(a1 + 584), v35);
    v41 = *(unsigned __int8 *)(v35 + 16);
    if (!v78)
    {
      v83 = *(_DWORD *)(v35 + 20);
      if ((v83 & 0x40000000) != 0)
        v84 = *(uint64_t *****)(v35 - 8);
      else
        v84 = (uint64_t ****)(v35 - 32 * (v83 & 0x7FFFFFF));
      v91 = **v84;
      v92 = (llvm::Type *)*(unsigned int *)(v204 + 32);
      if (*(_BYTE *)(v204 + 8) == 19)
        v94.n128_f64[0] = llvm::ScalableVectorType::get(v91, v92);
      else
        v94.n128_f64[0] = llvm::FixedVectorType::get((llvm::FixedVectorType *)v91, v92);
      v95 = v93;
      v96 = (*(uint64_t (**)(_QWORD, _QWORD, BOOL, _QWORD, uint64_t, uint64_t, __n128))(***(_QWORD ***)(a1 + 616)
                                                                                              + 944))(**(_QWORD **)(a1 + 616), 0, v41 == 67, *(_QWORD *)(v24 + 56), v93, a5, v94);
      v98 = v97;
      v99 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 616)
                                                                                                  + 840))(**(_QWORD **)(a1 + 616), *(unsigned __int8 *)(v35 + 16) - 28, v204, v95, 0, a5, v35);
      if (v98)
        goto LABEL_273;
      v101 = v27 + v99;
      if (__OFADD__(v27, v99))
        v101 = ((uint64_t)(v27 + v99) >> 63) ^ 0x8000000000000000;
      if (v100 == 1)
        v102 = 1;
      else
        v102 = v29;
      v103 = v96 < v101;
      v67 = v102 == 0;
      v104 = v102 > 0;
      if (!v67)
        v103 = v104;
      goto LABEL_176;
    }
  }
  if (v41 == 5)
  {
    if (*(_WORD *)(v35 + 18) != 17)
      goto LABEL_273;
    v85 = (uint64_t *)(v35 - 32 * (*(_DWORD *)(v35 + 20) & 0x7FFFFFF));
    v79 = *v85;
    v80 = *(unsigned __int8 *)(*v85 + 16);
    if (!*v85 || v80 < 0x1C)
      goto LABEL_273;
    v81 = v85[4];
    v82 = *(unsigned __int8 *)(v81 + 16);
    if (!v81 || v82 < 0x1C)
      goto LABEL_273;
  }
  else
  {
    if (v41 != 45)
      goto LABEL_273;
    v79 = *(_QWORD *)(v35 - 64);
    if (!v79)
      goto LABEL_273;
    v80 = *(unsigned __int8 *)(v79 + 16);
    if (v80 < 0x1C)
      goto LABEL_273;
    v81 = *(_QWORD *)(v35 - 32);
    if (!v81)
      goto LABEL_273;
    v82 = *(unsigned __int8 *)(v81 + 16);
    if (v82 < 0x1C)
      goto LABEL_273;
  }
  v202 = v79;
  v88 = v80 != v82 || v80 - 67 > 1;
  if (!v88
    && !llvm::Loop::isLoopInvariant(*(_QWORD *)(a1 + 584), v79)
    && !llvm::Loop::isLoopInvariant(*(_QWORD *)(a1 + 584), v81))
  {
    v115 = *(_DWORD *)(v202 + 20);
    if ((v115 & 0x40000000) != 0)
      v116 = *(llvm::FixedVectorType ****)(v202 - 8);
    else
      v116 = (llvm::FixedVectorType ***)(v202 - 32 * (v115 & 0x7FFFFFF));
    v200 = **v116;
    v117 = *(_DWORD *)(v81 + 20);
    if ((v117 & 0x40000000) != 0)
      v118 = *(uint64_t *****)(v81 - 8);
    else
      v118 = (uint64_t ****)(v81 - 32 * (v117 & 0x7FFFFFF));
    v191 = *(unsigned __int8 *)(v202 + 16);
    v119 = **v118;
    if (*((_DWORD *)v200 + 2) >> 8 >= *((_DWORD *)v119 + 2) >> 8)
      v120 = (uint64_t **)v200;
    else
      v120 = **v118;
    v195 = v119;
    v197 = (llvm::FixedVectorType *)v120;
    v121 = (llvm::Type *)*(unsigned int *)(v204 + 32);
    if (*(_BYTE *)(v204 + 8) == 19)
      llvm::ScalableVectorType::get(v120, v121);
    else
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v120, v121);
    v193 = v122;
    v123 = *(_QWORD **)(a1 + 616);
    v124 = *(unsigned __int8 *)(v202 + 16) - 28;
    v125 = (llvm::Type *)*(unsigned int *)(v204 + 32);
    if (*(_BYTE *)(v204 + 8) == 19)
      v127.n128_f64[0] = llvm::ScalableVectorType::get((uint64_t **)v200, v125);
    else
      v127.n128_f64[0] = llvm::FixedVectorType::get(v200, v125);
    v187 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __n128))(*(_QWORD *)*v123 + 840))(*v123, v124, v204, v126, 0, a5, v202, v127);
    v188 = v128;
    v129 = *(_QWORD **)(a1 + 616);
    v189 = *(unsigned __int8 *)(v81 + 16) - 28;
    v130 = (llvm::Type *)*(unsigned int *)(v204 + 32);
    if (*(_BYTE *)(v204 + 8) == 19)
      v132.n128_f64[0] = llvm::ScalableVectorType::get(v195, v130);
    else
      v132.n128_f64[0] = llvm::FixedVectorType::get((llvm::FixedVectorType *)v195, v130);
    v186 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __n128))(*(_QWORD *)*v129 + 840))(*v129, v189, v204, v131, 0, a5, v81, v132);
    v190 = v133;
    v184 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 616) + 824))(**(_QWORD **)(a1 + 616), 17, v204, a5, 0, 0, 0, 0, 0, 0, 0);
    v185 = v134;
    v96 = (*(uint64_t (**)(_QWORD, uint64_t, BOOL, _QWORD, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 616) + 944))(**(_QWORD **)(a1 + 616), 1, v191 == 67, *(_QWORD *)(v24 + 56), v193, a5);
    v136 = v135;
    if (v200 == v197 && v195 == (uint64_t **)v197)
    {
      v142 = 0;
      v143 = 0;
    }
    else
    {
      if (v200 != v197)
        v81 = v202;
      v138 = *(_QWORD **)(a1 + 616);
      v139 = *(unsigned __int8 *)(v81 + 16) - 28;
      v140 = *(_DWORD *)(v81 + 20);
      if ((v140 & 0x40000000) != 0)
        v141 = *(uint64_t *****)(v81 - 8);
      else
        v141 = (uint64_t ****)(v81 - 32 * (v140 & 0x7FFFFFF));
      v144 = **v141;
      v145 = (llvm::Type *)*(unsigned int *)(v204 + 32);
      if (*(_BYTE *)(v204 + 8) == 19)
        v147.n128_f64[0] = llvm::ScalableVectorType::get(v144, v145);
      else
        v147.n128_f64[0] = llvm::FixedVectorType::get((llvm::FixedVectorType *)v144, v145);
      v142 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __n128))(*(_QWORD *)*v138 + 840))(*v138, v139, v193, v146, 0, a5, v81, v147);
    }
    if (v136)
      goto LABEL_273;
    v148 = v143 == 1;
    v149 = v96 + v142;
    if (__OFADD__(v96, v142))
      v149 = ((v96 + v142) >> 63) ^ 0x8000000000000000;
    v150 = v187 + v186;
    if (__OFADD__(v187, v186))
      v150 = ((v187 + v186) >> 63) ^ 0x8000000000000000;
    v151 = __OFADD__(v150, v184);
    v152 = v150 + v184;
    if (v151)
      v152 = (v152 >> 63) ^ 0x8000000000000000;
    v151 = __OFADD__(v152, v27);
    v153 = v152 + v27;
    if (v151)
      v153 = (v153 >> 63) ^ 0x8000000000000000;
    if (v190 == 1 || v185 == 1 || (_DWORD)v29 == 1)
      v156 = 1;
    else
      v156 = v188;
    v157 = v149 < v153;
    v67 = v156 == v148;
    v103 = v156 > v148;
    if (v67)
      v103 = v157;
LABEL_176:
    if (!v103)
      goto LABEL_273;
    if (v208 == a2)
      v105 = v96;
    else
      v105 = 0;
LABEL_180:
    *(_QWORD *)a6 = v105;
    *(_DWORD *)(a6 + 8) = 0;
LABEL_276:
    v183 = 1;
    goto LABEL_277;
  }
  v89 = *(unsigned __int8 *)(a2 + 16);
  if (v89 > 0x1B)
  {
    v90 = v89 - 28;
    if (!a2)
      goto LABEL_183;
  }
  else
  {
    v90 = *(unsigned __int16 *)(a2 + 18);
    if (!a2)
      goto LABEL_183;
  }
  if (v90 == 39)
    goto LABEL_273;
LABEL_183:
  if (!a2 || v90 != 40)
  {
    v106 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 616) + 824))(**(_QWORD **)(a1 + 616), 17, v204, a5, 0, 0, 0, 0, 0, 0, 0);
    v108 = v107;
    v109 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 616)
                                                                                         + 944))(**(_QWORD **)(a1 + 616), 1, 1, *(_QWORD *)(v24 + 56), v204, a5);
    if (!v110)
    {
      v111 = v106 + v27;
      if (__OFADD__(v106, v27))
        v111 = ((uint64_t)(v106 + v27) >> 63) ^ 0x8000000000000000;
      v112 = (_DWORD)v29 == 1 ? 1 : v108;
      v113 = v109 < v111;
      v67 = v112 == 0;
      v114 = v112 > 0;
      if (!v67)
        v113 = v114;
      if (v113)
      {
        if (v208 == a2)
          v105 = v109;
        else
          v105 = 0;
        goto LABEL_180;
      }
    }
  }
LABEL_273:
  if (v208 == a2)
  {
LABEL_275:
    *(_QWORD *)a6 = v27;
    *(_QWORD *)(a6 + 8) = v29;
    goto LABEL_276;
  }
  v183 = 0;
  *(_BYTE *)a6 = 0;
LABEL_277:
  *(_BYTE *)(a6 + 16) = v183;
}

unint64_t llvm::LoopVectorizationCostModel::getMemoryInstructionCost(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  if (HIDWORD(a3) != 1 && a3 == 1)
  {
    if (!a2 || (v6 = (uint64_t *)a2, *(_BYTE *)(a2 + 16) != 60))
      v6 = *(uint64_t **)(a2 - 64);
    v7 = ((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1) & 0x3F;
    v8 = *v6;
    v9 = **(_QWORD **)(a2 - 32);
    v10 = *(_DWORD *)(v9 + 8);
    if ((v10 & 0xFE) == 0x12)
      v10 = *(_DWORD *)(**(_QWORD **)(v9 + 16) + 8);
    v11 = v10 >> 8;
    v12 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 616) + 976))(**(_QWORD **)(a1 + 616), v8, 0, 0);
    v13 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, unint64_t, uint64_t, _QWORD, uint64_t))(***(_QWORD ***)(a1 + 616) + 888))(**(_QWORD **)(a1 + 616), *(unsigned __int8 *)(a2 + 16) - 28, v8, v7, v11, 0, a2);
    if (__OFADD__(v12, v13))
      return ((v12 + v13) >> 63) ^ 0x8000000000000000;
    else
      return v12 + v13;
  }
  else
  {
    v15[0] = a2;
    v15[1] = a3;
    return *(_QWORD *)(sub_1C63DA99C(a1 + 560, (uint64_t)v15) + 24);
  }
}

BOOL sub_1C60785A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  if (byte_1ED838B98)
    return 0;
  v10 = 0;
  if (sub_1C63DAD20(*(_QWORD *)(a1 + 128), *(_DWORD *)(a1 + 144), a3, SHIDWORD(a3), &v10))
    v6 = v10;
  else
    v6 = *(_QWORD *)(a1 + 128) + 32 * *(unsigned int *)(a1 + 144);
  v10 = 0;
  if (sub_1C617A1AC(*(_QWORD *)(v6 + 8), *(_DWORD *)(v6 + 24), a2, &v10))
  {
    v7 = v10;
    v8 = *(_QWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 24);
  }
  else
  {
    v8 = *(_QWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 24);
    v7 = v8 + 24 * v9;
  }
  return v8 + 24 * v9 != v7;
}

char *llvm::LoopVectorizationCostModel::getInstructionCost(uint64_t a1, unint64_t *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  unint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  llvm::DominatorTree *v13;
  unint64_t v14;
  int v15;
  BOOL v16;
  uint64_t *v17;
  int v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  int v24;
  int v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  char *v53;
  unint64_t ScalarizationOverhead;
  int64_t v55;
  _BOOL4 v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t **v60;
  int v61;
  BOOL v62;
  _QWORD *v63;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t (*v70)(void);
  BOOL v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t **v78;
  uint64_t v79;
  __n128 v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  _QWORD *v86;
  int v87;
  void **v88;
  unint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  unsigned int v96;
  uint64_t (*v97)(void);
  uint64_t *v98;
  int v99;
  int v100;
  uint64_t VectorIntrinsicCost;
  int v102;
  _BOOL4 v103;
  const llvm::SCEV *SCEVIter;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  double v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  int8x8_t **v116;
  uint64_t *v117;
  int v118;
  uint64_t **v119;
  int8x8_t *v120;
  uint64_t OperandInfo;
  int v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  void *v126;
  _QWORD *v127;
  uint64_t v128;
  int v129;
  uint64_t v131;
  uint64_t v132;
  uint64_t **v133;
  int v134;
  BOOL v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  BOOL v139;
  _BOOL4 v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  int v144;
  _DWORD *v145;
  _DWORD *v146;
  int v147;
  int v148;
  uint64_t *v149;
  unsigned int v150;
  uint64_t v151;
  int v152;
  char *v153;
  uint64_t v154;
  unint64_t v155;
  void *v156;
  _QWORD *v157;
  uint64_t v158;
  int v159;
  BOOL v160;
  unsigned __int8 *v161;
  int8x8_t *v162;
  int8x8_t *v163;
  unint64_t v164;
  uint64_t **v165;
  uint64_t v166;
  uint64_t **v167;
  uint64_t v168;
  int v170;
  int v171;
  int v172;
  int8x8_t **v173;
  unsigned __int8 *v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t **v179;
  uint64_t *v180;
  int v181;
  _DWORD *v182;
  _DWORD *v183;
  int v184;
  uint64_t v185;
  uint64_t *v186;
  char v187[2];
  uint64_t v188;
  int v189;
  unint64_t v190;
  uint64_t v191;
  int v192[2];
  void *v193;
  uint64_t v194;
  _QWORD v195[5];

  v6 = (uint64_t)a2;
  v195[4] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v192 = a2;
  v8 = *a2;
  if (!sub_1C63D4830(a1, (uint64_t)a2, a3))
    goto LABEL_11;
  v9 = *(uint64_t **)v8;
  v10 = *(_DWORD *)sub_1C6194570(a1 + 8, (uint64_t *)v192);
  LODWORD(v193) = v10;
  if (v10 <= 63)
  {
    if (v10 <= 31)
    {
      switch(v10)
      {
        case 16:
          v8 = *v9 + 1936;
          goto LABEL_10;
        case 8:
          v8 = *v9 + 1912;
          goto LABEL_10;
        case 1:
          v8 = *v9 + 1888;
          goto LABEL_10;
      }
    }
    else if (v10 == 32)
    {
      v8 = *v9 + 1960;
      goto LABEL_10;
    }
LABEL_225:
    v145 = sub_1C5270984(*v9 + 2168, &v193);
    v8 = *((_QWORD *)v145 + 1);
    if (!v8)
    {
      v146 = v145;
      v8 = sub_1C484358C(*v9 + 2040, 24, 3);
      v147 = (int)v193;
      *(_QWORD *)v8 = v9;
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)(v8 + 8) = (v147 << 8) | 0xDu;
      *((_QWORD *)v146 + 1) = v8;
    }
    goto LABEL_10;
  }
  if (v10 != 64)
  {
    if (v10 == 128)
    {
      v8 = *v9 + 2008;
      goto LABEL_10;
    }
    goto LABEL_225;
  }
  v8 = *v9 + 1984;
LABEL_10:
  v6 = *(_QWORD *)v192;
LABEL_11:
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 592) + 88);
  v12 = sub_1C63D4494(a1, v6, a3);
  v14 = v8;
  if (!v12)
  {
    v15 = *(unsigned __int8 *)(v8 + 8);
    v16 = v15 == 7 || v15 == 9;
    v14 = v8;
    if (!v16)
    {
      if ((a3 & 0xFFFFFFFF00000000) == 0x100000000 || (v14 = v8, a3 != 1))
      {
        if ((a3 & 0xFFFFFFFF00000000) == 0x100000000)
          llvm::ScalableVectorType::get((uint64_t **)v8, (llvm::Type *)a3);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v8, (llvm::Type *)a3);
        v14 = v27;
      }
    }
  }
  v185 = a3;
  v186 = a4;
  *a4 = v14;
  v17 = *(uint64_t **)v192;
  v18 = *(unsigned __int8 *)(*(_QWORD *)v192 + 16);
  v19 = 0;
  v20 = HIDWORD(a3);
  switch(*(_BYTE *)(*(_QWORD *)v192 + 16))
  {
    case 0x1E:
      if ((_DWORD)a3)
        v71 = HIDWORD(a3) == 1;
      else
        v71 = 0;
      if (!v71 && a3 < 2 || (*(_DWORD *)(*(_QWORD *)v192 + 20) & 0x7FFFFFF) != 3)
        goto LABEL_284;
      v72 = sub_1C477672C(a1 + 56, *(_QWORD *)(*(_QWORD *)v192 - 32));
      v73 = *(_QWORD *)(a1 + 64);
      v74 = 72;
      if (v73 == *(_QWORD *)(a1 + 56))
        v74 = 76;
      if (v72 != (_QWORD *)(v73 + 8 * *(unsigned int *)(a1 + v74)))
        goto LABEL_116;
      v75 = sub_1C477672C(a1 + 56, *(v17 - 8));
      v76 = *(_QWORD *)(a1 + 64);
      v77 = 72;
      if (v76 == *(_QWORD *)(a1 + 56))
        v77 = 76;
      if (v75 == (_QWORD *)(v76 + 8 * *(unsigned int *)(a1 + v77)))
      {
        v17 = *(uint64_t **)v192;
LABEL_284:
        v168 = v17[5];
        if (v168 == llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*(_QWORD *)(a1 + 584))
          || (v19 = 0, HIDWORD(a3) != 1) && (_DWORD)a3 == 1)
        {
          v70 = *(uint64_t (**)(void))(***(_QWORD ***)(a1 + 616) + 856);
          return (char *)v70();
        }
      }
      else
      {
LABEL_116:
        if (HIDWORD(a3) == 1)
          return 0;
        v78 = (uint64_t **)(**(_QWORD **)v8 + 1888);
        if (v20 == 1)
          v80.n128_f64[0] = llvm::ScalableVectorType::get(v78, (llvm::Type *)a3);
        else
          v80.n128_f64[0] = llvm::FixedVectorType::get((llvm::FixedVectorType *)v78, (llvm::Type *)a3);
        v81 = v79;
        v82 = *(_QWORD **)(a1 + 616);
        LODWORD(v191) = a3;
        if (a3 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v190, -1, 1);
        else
          v190 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a3;
        v83 = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t *, _QWORD, uint64_t, __n128))(*(_QWORD *)*v82 + 528))(*v82, v81, &v190, 0, 1, v80);
        v84 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 616) + 856))(**(_QWORD **)(a1 + 616), 2, 0, 0);
        v188 = v185;
        v189 = 0;
        v193 = v84;
        v194 = v85;
        sub_1C4848B64((uint64_t)&v193, (uint64_t)&v188);
        if (__OFADD__(v83, v193))
          v19 = (char *)((((uint64_t)v193 + v83) >> 63) ^ 0x8000000000000000);
        else
          v19 = (char *)v193 + v83;
        if (v191 >= 0x41 && v190)
          MEMORY[0x1CAA32F9C](v190, 0x1000C8000313F17);
      }
      return v19;
    case 0x28:
      v86 = *(_QWORD **)(a1 + 616);
      v87 = *(_DWORD *)(*(_QWORD *)v192 + 20);
      if ((v87 & 0x40000000) != 0)
        v88 = *(void ***)(*(_QWORD *)v192 - 8);
      else
        v88 = (void **)(*(_QWORD *)v192 - 32 * (v87 & 0x7FFFFFF));
      v193 = *v88;
      return (char *)(*(uint64_t (**)(_QWORD, _QWORD, unint64_t))(*(_QWORD *)*v86 + 824))(*v86, (v18 - 28), v14);
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x31:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
      goto LABEL_18;
    case 0x2F:
    case 0x30:
    case 0x32:
    case 0x33:
      if ((_DWORD)a3)
        v35 = HIDWORD(a3) == 1;
      else
        v35 = 0;
      if (!v35 && a3 < 2)
        goto LABEL_46;
      if ((llvm::LoopVectorizationCostModel::isScalarWithPredication(a1, *(uint64_t *)v192, (llvm::Type *)a3, v13) & 1) != 0)
      {
        v190 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 616) + 856))(**(_QWORD **)(a1 + 616), 55, 0, 0);
        v191 = v50;
        v193 = (void *)a3;
        LODWORD(v194) = 0;
        sub_1C4848B64((uint64_t)&v193, (uint64_t)&v190);
        v51 = v193;
        v190 = (*(uint64_t (**)(_QWORD, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 616) + 824))(**(_QWORD **)(a1 + 616), *(unsigned __int8 *)(*(_QWORD *)v192 + 16) - 28, v8, 0, 0, 0, 0, 0, 0, 0, 0);
        v191 = v52;
        v193 = (void *)a3;
        LODWORD(v194) = 0;
        sub_1C4848B64((uint64_t)&v193, (uint64_t)&v190);
        if (__OFADD__(v51, v193))
          v53 = (char *)((((uint64_t)v193 + (uint64_t)v51) >> 63) ^ 0x8000000000000000);
        else
          v53 = (char *)v193 + (_QWORD)v51;
        ScalarizationOverhead = llvm::LoopVectorizationCostModel::getScalarizationOverhead(a1, *(uint64_t **)v192, (llvm::Type *)a3);
        v55 = (int64_t)&v53[ScalarizationOverhead];
        if (__OFADD__(v53, ScalarizationOverhead))
          v55 = ((uint64_t)&v53[ScalarizationOverhead] >> 63) ^ 0x8000000000000000;
        return (char *)(v55 / 2);
      }
      v17 = *(uint64_t **)v192;
      v18 = *(unsigned __int8 *)(*(_QWORD *)v192 + 16);
LABEL_18:
      if (v18 == 45)
      {
        v21 = *(_QWORD *)(a1 + 608);
        v22 = *((_DWORD *)v17 + 5);
        if ((v22 & 0x40000000) != 0)
          v23 = (uint64_t *)*(v17 - 1);
        else
          v23 = &v17[-4 * (v22 & 0x7FFFFFF)];
        v38 = *(_QWORD *)(v21 + 56);
        v39 = sub_1C477672C(v38 + 88, *v23);
        v40 = *(_QWORD *)(v38 + 96);
        v41 = 104;
        if (v40 == *(_QWORD *)(v38 + 88))
          v41 = 108;
        v42 = (_QWORD *)(v40 + 8 * *(unsigned int *)(v38 + v41));
        a4 = v186;
        if (v39 != v42)
          return 0;
        v43 = *((_DWORD *)v17 + 5);
        if ((v43 & 0x40000000) != 0)
          v44 = (uint64_t *)*(v17 - 1);
        else
          v44 = &v17[-4 * (v43 & 0x7FFFFFF)];
        v65 = *(_QWORD *)(v21 + 56);
        v66 = sub_1C477672C(v65 + 88, v44[4]);
        v67 = *(_QWORD *)(v65 + 96);
        v68 = 104;
        if (v67 == *(_QWORD *)(v65 + 88))
          v68 = 108;
        if (v66 != (_QWORD *)(v67 + 8 * *(unsigned int *)(v65 + v68)))
          return 0;
        v17 = *(uint64_t **)v192;
      }
LABEL_46:
      llvm::LoopVectorizationCostModel::getReductionPatternCost(a1, (uint64_t)v17, a3, *a4, 0, (uint64_t)&v193);
      if (LOBYTE(v195[0]))
        return (char *)v193;
      v36 = *(_DWORD *)(*(_QWORD *)v192 + 20);
      if ((v36 & 0x40000000) != 0)
        v37 = *(_QWORD *)(*(_QWORD *)v192 - 8);
      else
        v37 = *(_QWORD *)v192 - 32 * (v36 & 0x7FFFFFF);
      v120 = *(int8x8_t **)(v37 + 32);
      LODWORD(v190) = 0;
      OperandInfo = llvm::TargetTransformInfo::getOperandInfo(v120, (const llvm::Value *)&v190);
      if (!(_DWORD)OperandInfo)
        OperandInfo = llvm::LoopAccessInfo::isUniform(*(const llvm::Loop ***)(*(_QWORD *)(a1 + 608) + 56), (llvm::Value *)v120);
      v122 = *(_DWORD *)(*(_QWORD *)v192 + 20);
      if ((v122 & 0x40000000) != 0)
      {
        v124 = *(char **)(*(_QWORD *)v192 - 8);
        v123 = v122 & 0x7FFFFFF;
      }
      else
      {
        v123 = v122 & 0x7FFFFFF;
        v124 = (char *)(*(_QWORD *)v192 - 32 * v123);
      }
      v193 = v195;
      v194 = 0x400000000;
      sub_1C6320FEC((unsigned int *)&v193, v124, &v124[32 * v123]);
      v125 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, void *, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 616) + 824))(**(_QWORD **)(a1 + 616), *(unsigned __int8 *)(*(_QWORD *)v192 + 16) - 28, *a4, 0, 0, OperandInfo, 0, v190, v193, v194, *(_QWORD *)v192);
      goto LABEL_189;
    case 0x3B:
      if (HIDWORD(a3) != 1)
        return (char *)(*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(***(_QWORD ***)(a1 + 616) + 824))(**(_QWORD **)(a1 + 616), 17, v14);
      return 0;
    case 0x3C:
    case 0x3D:
      v57 = v20 == 1 && (_DWORD)a3 != 0;
      if (a3 > 1 || v57)
      {
        if (sub_1C63D46C0(a1, *(uint64_t *)v192, a3) == 5)
        {
          v20 = 0;
          v58 = 1;
        }
        else
        {
          v58 = a3;
        }
        v17 = *(uint64_t **)v192;
        v18 = *(unsigned __int8 *)(*(_QWORD *)v192 + 16);
      }
      else
      {
        v58 = a3;
      }
      v59 = v17;
      if (v18 != 60)
        v59 = (uint64_t *)*(v17 - 8);
      v60 = (uint64_t **)*v59;
      v61 = *(unsigned __int8 *)(*v59 + 8);
      v62 = v61 == 7 || v61 == 9;
      if (v62 || v20 != 1 && v58 == 1)
      {
        v63 = a4;
      }
      else
      {
        if (v20 == 1)
          llvm::ScalableVectorType::get(v60, (llvm::Type *)v58);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v60, (llvm::Type *)v58);
        v63 = a4;
        v17 = *(uint64_t **)v192;
      }
      *v63 = v60;
      return (char *)llvm::LoopVectorizationCostModel::getMemoryInstructionCost(a1, (uint64_t)v17, a3);
    case 0x3E:
      return v19;
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
      if ((v18 - 66) <= 8)
      {
        v24 = 1 << (v18 - 66);
        if ((v24 & 0x106) != 0)
        {
          v25 = *(_DWORD *)(*(_QWORD *)v192 + 20);
          if ((v25 & 0x40000000) != 0)
            v26 = *(uint64_t **)(*(_QWORD *)v192 - 8);
          else
            v26 = (uint64_t *)(*(_QWORD *)v192 - 32 * (v25 & 0x7FFFFFF));
          v45 = *v26;
          if (*v26 && *(_BYTE *)(v45 + 16) == 60 && (HIDWORD(a3) == 1 || (_DWORD)a3 != 1))
          {
            v46 = *(_QWORD *)(a1 + 584);
            v47 = sub_1C477672C(v46 + 56, *(_QWORD *)(v45 + 40));
            v48 = *(_QWORD *)(v46 + 64);
            v49 = 72;
            if (v48 == *(_QWORD *)(v46 + 56))
              v49 = 76;
            if (v47 != (_QWORD *)(v48 + 8 * *(unsigned int *)(v46 + v49)))
            {
              v153 = (char *)&loc_1C6078E08 + 4 * word_1C8677BE0[sub_1C63D46C0(a1, v45, a3) - 1];
              __asm { BR              X10 }
            }
          }
        }
        else if ((v24 & 0x81) != 0)
        {
          v28 = *(_QWORD *)(*(_QWORD *)v192 + 8);
          if (v28)
          {
            if (!*(_QWORD *)(v28 + 8))
            {
              v29 = *(_QWORD *)(v28 + 24);
              if (v29)
              {
                if (*(_BYTE *)(v29 + 16) == 61 && (HIDWORD(a3) == 1 || (_DWORD)a3 != 1))
                {
                  v30 = *(_QWORD *)(a1 + 584);
                  v31 = sub_1C477672C(v30 + 56, *(_QWORD *)(v29 + 40));
                  v32 = *(_QWORD *)(v30 + 64);
                  v33 = 72;
                  if (v32 == *(_QWORD *)(v30 + 56))
                    v33 = 76;
                  if (v31 != (_QWORD *)(v32 + 8 * *(unsigned int *)(v30 + v33)))
                  {
                    v34 = (char *)&loc_1C6078E08 + 4 * word_1C8677BEA[sub_1C63D46C0(a1, v29, a3) - 1];
                    __asm { BR              X10 }
                  }
                }
              }
            }
          }
        }
      }
      goto LABEL_137;
    case 0x4D:
      if (*(_BYTE *)(**(_QWORD **)v192 + 8) == 15)
        return 0;
LABEL_137:
      if (sub_1C607A414(a1, *(_BYTE **)v192, (llvm::Type *)a3))
      {
        v97 = *(uint64_t (**)(void))(***(_QWORD ***)(a1 + 616) + 840);
        return (char *)v97();
      }
      llvm::LoopVectorizationCostModel::getReductionPatternCost(a1, *(uint64_t *)v192, a3, *a4, 0, (uint64_t)&v193);
      if (LOBYTE(v195[0]))
        return (char *)v193;
      v117 = *(uint64_t **)v192;
      v118 = *(_DWORD *)(*(_QWORD *)v192 + 20);
      if ((v118 & 0x40000000) != 0)
        v119 = *(uint64_t ***)(*(_QWORD *)v192 - 8);
      else
        v119 = (uint64_t **)(*(_QWORD *)v192 - 32 * (v118 & 0x7FFFFFF));
      v137 = **v119;
      if ((*(_DWORD *)(*a4 + 8) & 0xFE) == 0x12)
      {
        v138 = *(unsigned __int8 *)(v137 + 8);
        v139 = v138 == 7 || v138 == 9;
        if (!v139 && ((a3 & 0xFFFFFFFF00000000) == 0x100000000 || a3 != 1))
        {
          if ((a3 & 0xFFFFFFFF00000000) == 0x100000000)
            llvm::ScalableVectorType::get((uint64_t **)v137, (llvm::Type *)a3);
          else
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v137, (llvm::Type *)a3);
          v117 = *(uint64_t **)v192;
        }
      }
      v140 = sub_1C63D4830(a1, (uint64_t)v117, a3);
      v141 = *a4;
      if (!v140)
        goto LABEL_244;
      if (v18 == 66)
      {
        v142 = *(_DWORD *)(*(_QWORD *)(v141 + 24) + 8) >> 8;
        v143 = **(_QWORD **)v192;
        v144 = *(unsigned __int8 *)(**(_QWORD **)v192 + 8);
        if (v144 != 7 && v144 != 9 && ((a3 & 0xFFFFFFFF00000000) == 0x100000000 || a3 != 1))
        {
          if ((a3 & 0xFFFFFFFF00000000) == 0x100000000)
            llvm::ScalableVectorType::get((uint64_t **)v143, (llvm::Type *)a3);
          else
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v143, (llvm::Type *)a3);
          v142 = *(_DWORD *)(*(_QWORD *)(v141 + 24) + 8) >> 8;
        }
        if (v142 < *(_DWORD *)(*(_QWORD *)(v143 + 24) + 8) >> 8)
          v141 = v143;
      }
      else
      {
        if ((v18 - 67) > 1)
          goto LABEL_244;
        v150 = *(_DWORD *)(*(_QWORD *)(v141 + 24) + 8) >> 8;
        v151 = **(_QWORD **)v192;
        v152 = *(unsigned __int8 *)(**(_QWORD **)v192 + 8);
        if (v152 != 7 && v152 != 9 && ((a3 & 0xFFFFFFFF00000000) == 0x100000000 || a3 != 1))
        {
          if ((a3 & 0xFFFFFFFF00000000) == 0x100000000)
            llvm::ScalableVectorType::get((uint64_t **)v151, (llvm::Type *)a3);
          else
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v151, (llvm::Type *)a3);
          v150 = *(_DWORD *)(*(_QWORD *)(v141 + 24) + 8) >> 8;
        }
        if (v150 > *(_DWORD *)(*(_QWORD *)(v151 + 24) + 8) >> 8)
          v141 = v151;
      }
      *a4 = v141;
LABEL_244:
      v97 = *(uint64_t (**)(void))(***(_QWORD ***)(a1 + 616) + 840);
      return (char *)v97();
    case 0x51:
    case 0x52:
      v148 = *(_DWORD *)(*(_QWORD *)v192 + 20);
      if ((v148 & 0x40000000) != 0)
        v149 = *(uint64_t **)(*(_QWORD *)v192 - 8);
      else
        v149 = (uint64_t *)(*(_QWORD *)v192 - 32 * (v148 & 0x7FFFFFF));
      v154 = *v149;
      v155 = *(_QWORD *)v154;
      if (*(unsigned __int8 *)(v154 + 16) <= 0x1Bu)
        v156 = 0;
      else
        v156 = (void *)v154;
      v193 = v156;
      if (!sub_1C63D4830(a1, (uint64_t)v156, a3))
        goto LABEL_251;
      v180 = *(uint64_t **)v155;
      v181 = *(_DWORD *)sub_1C6194570(a1 + 8, (uint64_t *)&v193);
      LODWORD(v190) = v181;
      if (v181 <= 63)
      {
        if (v181 <= 31)
        {
          switch(v181)
          {
            case 16:
              v155 = *v180 + 1936;
              goto LABEL_251;
            case 8:
              v155 = *v180 + 1912;
              goto LABEL_251;
            case 1:
              v155 = *v180 + 1888;
              goto LABEL_251;
          }
        }
        else if (v181 == 32)
        {
          v155 = *v180 + 1960;
          goto LABEL_251;
        }
      }
      else
      {
        if (v181 == 64)
        {
          v155 = *v180 + 1984;
LABEL_251:
          v158 = a3;
          v157 = a4;
          goto LABEL_252;
        }
        if (v181 == 128)
        {
          v155 = *v180 + 2008;
          goto LABEL_251;
        }
      }
      v182 = sub_1C5270984(*v180 + 2168, &v190);
      v155 = *((_QWORD *)v182 + 1);
      v158 = a3;
      v157 = a4;
      if (!v155)
      {
        v183 = v182;
        v155 = sub_1C484358C(*v180 + 2040, 24, 3);
        v184 = v190;
        *(_QWORD *)v155 = v180;
        *(_QWORD *)(v155 + 16) = 0;
        *(_QWORD *)(v155 + 8) = (v184 << 8) | 0xDu;
        *((_QWORD *)v183 + 1) = v155;
      }
LABEL_252:
      v159 = *(unsigned __int8 *)(v155 + 8);
      v160 = v159 == 7 || v159 == 9;
      if (!v160 && ((a3 & 0xFFFFFFFF00000000) == 0x100000000 || v158 != 1))
      {
        if ((a3 & 0xFFFFFFFF00000000) == 0x100000000)
          llvm::ScalableVectorType::get((uint64_t **)v155, (llvm::Type *)a3);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v155, (llvm::Type *)a3);
        v155 = v164;
      }
      *v157 = v155;
      v97 = *(uint64_t (**)(void))(***(_QWORD ***)(a1 + 616) + 864);
      return (char *)v97();
    case 0x53:
      if ((_DWORD)a3)
        v69 = HIDWORD(a3) == 1;
      else
        v69 = 0;
      if (!v69 && a3 < 2)
        goto LABEL_99;
      v105 = *(_QWORD *)(a1 + 608);
      v106 = sub_1C477672C(v105 + 240, *(uint64_t *)v192);
      v107 = *(_QWORD *)(v105 + 248);
      v108 = 256;
      if (v107 == *(_QWORD *)(v105 + 240))
        v108 = 260;
      if (v106 != (_QWORD *)(v107 + 8 * *(unsigned int *)(v105 + v108)))
      {
        v109 = *(_QWORD **)(a1 + 616);
        v110 = *a4;
        v111 = llvm::FixedVectorType::get((llvm::FixedVectorType *)v8, (llvm::Type *)1);
        return (char *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, double))(*(_QWORD *)*v109 + 832))(*v109, 5, v110, 0, 0, (a3 - 1), v112, v111);
      }
      if (v17[5] == **(_QWORD **)(*(_QWORD *)(a1 + 584) + 32))
      {
LABEL_99:
        v70 = *(uint64_t (**)(void))(***(_QWORD ***)(a1 + 616) + 856);
        return (char *)v70();
      }
      v126 = (void *)((*((_DWORD *)v17 + 5) & 0x7FFFFFFu) - 1);
      v127 = *(_QWORD **)(a1 + 616);
      v128 = *v17;
      v129 = *(unsigned __int8 *)(*v17 + 8);
      if (v129 == 7 || v129 == 9)
      {
        v131 = a3;
      }
      else
      {
        v131 = a3;
        if ((a3 & 0xFFFFFFFF00000000) == 0x100000000 || a3 != 1)
        {
          v165 = (uint64_t **)*v17;
          if ((a3 & 0xFFFFFFFF00000000) == 0x100000000)
            llvm::ScalableVectorType::get(v165, (llvm::Type *)a3);
          else
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v165, (llvm::Type *)a3);
          v128 = v166;
        }
      }
      v132 = **(_QWORD **)*v17;
      v133 = (uint64_t **)(v132 + 1888);
      v134 = *(unsigned __int8 *)(v132 + 1896);
      v135 = v134 == 7 || v134 == 9;
      if (!v135 && ((a3 & 0xFFFFFFFF00000000) == 0x100000000 || v131 != 1))
      {
        if ((a3 & 0xFFFFFFFF00000000) == 0x100000000)
          llvm::ScalableVectorType::get(v133, (llvm::Type *)a3);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v133, (llvm::Type *)a3);
        v133 = v167;
      }
      v190 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t **, uint64_t, _QWORD, _QWORD))(*(_QWORD *)*v127 + 864))(*v127, 57, v128, v133, 42, 0, 0);
      v191 = v136;
      v193 = v126;
      LODWORD(v194) = 0;
      sub_1C4848B64((uint64_t)&v193, (uint64_t)&v190);
      return (char *)v193;
    case 0x54:
      if (sub_1C4E3A59C(*(uint64_t *)v192))
      {
        llvm::LoopVectorizationCostModel::getReductionPatternCost(a1, *(uint64_t *)v192, a3, *a4, 0, (uint64_t)&v193);
        if (LOBYTE(v195[0]))
          return (char *)v193;
      }
      v98 = *(uint64_t **)v192;
      v19 = (char *)llvm::LoopVectorizationCostModel::getVectorCallCost(a1, *(uint64_t *)v192, a3, &v193);
      v100 = v99;
      if (llvm::getVectorIntrinsicIDForCall((uint64_t)v98, *(uint64_t **)(a1 + 624)))
      {
        VectorIntrinsicCost = llvm::LoopVectorizationCostModel::getVectorIntrinsicCost(a1, (uint64_t)v98, (llvm::Type *)a3);
        v103 = VectorIntrinsicCost < (uint64_t)v19;
        if (v102 != v100)
          v103 = v102 < v100;
        if (v103)
          return (char *)VectorIntrinsicCost;
      }
      return v19;
    case 0x55:
      v89 = *(_QWORD *)(*(_QWORD *)v192 - 96);
      v90 = *(_QWORD *)(v11 + 104);
      v91 = *(_DWORD *)(v11 + 120);
      if (!v91)
        goto LABEL_151;
      v92 = ((v89 >> 4) ^ (v89 >> 9)) & (v91 - 1);
      v93 = v90 + 48 * v92;
      v94 = *(_QWORD *)(v93 + 24);
      if (v94 == v89)
        goto LABEL_152;
      v95 = 1;
      while (v94 != -4096)
      {
        v96 = v92 + v95++;
        v92 = v96 & (v91 - 1);
        v93 = v90 + 48 * v92;
        v94 = *(_QWORD *)(v93 + 24);
        if (v94 == v89)
          goto LABEL_152;
      }
LABEL_151:
      v93 = v90 + 48 * v91;
LABEL_152:
      if (v93 == v90 + 48 * v91 || (SCEVIter = *(const llvm::SCEV **)(v93 + 40)) == 0)
        SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v11, v89);
      if (llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)v11, SCEVIter, *(const llvm::Loop **)(a1 + 584)) == 1)goto LABEL_318;
      if (!*(_QWORD *)v192)
        goto LABEL_316;
      v113 = *(_DWORD *)(**(_QWORD **)v192 + 8);
      if ((v113 & 0xFE) == 0x12)
        v113 = *(_DWORD *)(**(_QWORD **)(**(_QWORD **)v192 + 16) + 8);
      if (v113 != 269)
        goto LABEL_295;
      v114 = *(unsigned __int8 *)(*(_QWORD *)v192 + 16);
      if (v114 == 85)
      {
        v161 = *(unsigned __int8 **)(*(_QWORD *)v192 - 32);
        if (!v161)
          goto LABEL_295;
        if (v161[16] > 0x14u)
          goto LABEL_295;
        v162 = *(int8x8_t **)(*(_QWORD *)v192 - 64);
        v163 = *(int8x8_t **)(*(_QWORD *)v192 - 96);
        if (!llvm::Constant::isNullValue((llvm::Constant *)v161) || !v163)
          goto LABEL_295;
      }
      else
      {
        if (v114 != 56)
          goto LABEL_295;
        v115 = *(_DWORD *)(*(_QWORD *)v192 + 20);
        v116 = (v115 & 0x40000000) != 0
             ? *(int8x8_t ***)(*(_QWORD *)v192 - 8)
             : (int8x8_t **)(*(_QWORD *)v192 - 32 * (v115 & 0x7FFFFFF));
        v163 = *v116;
        if (!*v116)
          goto LABEL_295;
        v162 = v116[4];
      }
      if (v162)
        goto LABEL_312;
LABEL_295:
      if (!*(_QWORD *)v192)
        goto LABEL_316;
      v170 = *(_DWORD *)(**(_QWORD **)v192 + 8);
      if ((v170 & 0xFE) == 0x12)
        v170 = *(_DWORD *)(**(_QWORD **)(**(_QWORD **)v192 + 16) + 8);
      if (v170 != 269)
        goto LABEL_316;
      v171 = *(unsigned __int8 *)(*(_QWORD *)v192 + 16);
      if (v171 == 85)
      {
        v174 = *(unsigned __int8 **)(*(_QWORD *)v192 - 64);
        if (!v174)
          goto LABEL_316;
        if (v174[16] > 0x14u)
          goto LABEL_316;
        v162 = *(int8x8_t **)(*(_QWORD *)v192 - 32);
        v163 = *(int8x8_t **)(*(_QWORD *)v192 - 96);
        if (!llvm::Constant::isOneValue((llvm::Constant *)v174) || !v163)
          goto LABEL_316;
      }
      else
      {
        if (v171 != 57)
          goto LABEL_316;
        v172 = *(_DWORD *)(*(_QWORD *)v192 + 20);
        v173 = (v172 & 0x40000000) != 0
             ? *(int8x8_t ***)(*(_QWORD *)v192 - 8)
             : (int8x8_t **)(*(_QWORD *)v192 - 32 * (v172 & 0x7FFFFFF));
        v163 = *v173;
        if (!*v173)
          goto LABEL_316;
        v162 = v173[4];
      }
      if (v162)
      {
LABEL_312:
        LODWORD(v190) = 0;
        LODWORD(v188) = 0;
        v175 = llvm::TargetTransformInfo::getOperandInfo(v163, (const llvm::Value *)&v190);
        v176 = llvm::TargetTransformInfo::getOperandInfo(v162, (const llvm::Value *)&v188);
        v193 = v195;
        v195[0] = v163;
        v195[1] = v162;
        v194 = 0x200000002;
        v177 = *(_QWORD **)(a1 + 616);
        if (sub_1C57BE7B8((uint64_t)v187, *(unsigned __int8 **)v192))
          v178 = 29;
        else
          v178 = 28;
        v125 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, void *, _QWORD, _QWORD))(*(_QWORD *)*v177 + 824))(*v177, v178, *v186, 0, v175, v176, v190, v188, v193, v194, *(_QWORD *)v192);
LABEL_189:
        v19 = (char *)v125;
        if (v193 != v195)
          free(v193);
        return v19;
      }
LABEL_316:
      v179 = *(uint64_t ***)*(v17 - 12);
      if (v20 == 1)
        llvm::ScalableVectorType::get(v179, (llvm::Type *)a3);
      else
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v179, (llvm::Type *)a3);
LABEL_318:
      v97 = *(uint64_t (**)(void))(***(_QWORD ***)(a1 + 616) + 864);
      return (char *)v97();
    case 0x5C:
      return (char *)sub_1C4DE9CE4(*(_QWORD **)(a1 + 616), *(uint64_t *)v192);
    default:
      return (char *)(*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(***(_QWORD ***)(a1 + 616) + 824))(**(_QWORD **)(a1 + 616), 17, v14);
  }
}

void llvm::LoopVectorizationCostModel::setCostBasedWideningDecision(uint64_t a1, llvm::Type *a2, uint64_t a3, llvm::DominatorTree *a4)
{
  BOOL v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  _BYTE *v11;
  int v12;
  llvm::Type *v13;
  BOOL v14;
  unint64_t GatherScatterCost;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t ConsecutiveMemOpCost;
  int v20;
  int v21;
  int v22;
  llvm::Type *v23;
  unint64_t UniformMemOpCost;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  llvm::Value *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  llvm::Type *v37;
  unint64_t v38;
  llvm::Type *v39;
  llvm::Type *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t MemInstScalarizationCost;
  llvm::Type *v46;
  _BOOL4 v47;
  uint64_t v48;
  BOOL v49;
  int v50;
  unint64_t v51;
  _BOOL4 v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t j;
  uint64_t v59;
  uint64_t k;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  BOOL v75;
  char v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  unint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  llvm::Type *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  _DWORD *v94;
  uint64_t *v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int64_t InterleaveGroupCost;
  int v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t MemoryInstructionCost;
  uint64_t v112;
  llvm::Type *v113;
  llvm::Type *v114;
  uint64_t v115;
  int v116;
  _BYTE v117[64];
  llvm::Type *v118;
  uint64_t v119;
  llvm::Type *v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD v123[6];

  v123[4] = *MEMORY[0x1E0C80C00];
  v118 = a2;
  v4 = (unint64_t)a2 >> 32 != 1 && a2 == 1;
  if (v4)
    return;
  *(_DWORD *)a1 = 0;
  v6 = *(_QWORD *)(a1 + 584);
  v7 = *(_QWORD *)(v6 + 32);
  v8 = *(_QWORD *)(v6 + 40);
  if (v8 == v7)
    goto LABEL_72;
  v109 = a1 + 560;
  v104 = *(_QWORD *)(v6 + 40);
  do
  {
    v9 = *(_QWORD *)v7 + 40;
    for (i = *(_QWORD *)(*(_QWORD *)v7 + 48); i != v9; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v11 = (_BYTE *)(i - 24);
      else
        v11 = 0;
      v12 = v11[16];
      if (i && v12 == 60)
      {
        if (!*((_QWORD *)v11 - 4))
          continue;
      }
      else
      {
        if (!i || v12 != 61 || !*((_QWORD *)v11 - 4))
          continue;
        if (llvm::LoopVectorizationCostModel::isScalarWithPredication(a1, (uint64_t)v11, v118, a4))
          ++*(_DWORD *)a1;
      }
      if (sub_1C63D3F1C(*(_QWORD *)(a1 + 608), (uint64_t)v11))
      {
        v13 = v118;
        v14 = v11[16] == 61 && HIDWORD(v118) == 1;
        if (v14 && sub_1C607A34C(a1, (uint64_t)v11, v118))
        {
          GatherScatterCost = llvm::LoopVectorizationCostModel::getGatherScatterCost(a1, (uint64_t)v11, v13);
          v17 = v16;
          v113 = (llvm::Type *)v11;
          v114 = v118;
          v18 = sub_1C63DA99C(v109, (uint64_t)&v113);
          *(_DWORD *)(v18 + 16) = 4;
          *(_QWORD *)(v18 + 24) = GatherScatterCost;
          *(_DWORD *)(v18 + 32) = v17;
        }
        else
        {
          UniformMemOpCost = llvm::LoopVectorizationCostModel::getUniformMemOpCost(a1, (uint64_t)v11, v13);
          v26 = v25;
          v113 = (llvm::Type *)v11;
          v114 = v13;
          v27 = sub_1C63DA99C(v109, (uint64_t)&v113);
          *(_DWORD *)(v27 + 16) = 5;
          *(_QWORD *)(v27 + 24) = UniformMemOpCost;
          *(_DWORD *)(v27 + 32) = v26;
        }
        continue;
      }
      if (llvm::LoopVectorizationCostModel::memoryInstructionCanBeWidened(a1, (uint64_t)v11, v118))
      {
        ConsecutiveMemOpCost = llvm::LoopVectorizationCostModel::getConsecutiveMemOpCost(a1, (uint64_t)v11, v118);
        v21 = v20;
        v22 = v11[16];
        if (v22 == 60)
        {
          v23 = *(llvm::Type **)v11;
          goto LABEL_37;
        }
        v32 = 0;
        v23 = (llvm::Type *)**((_QWORD **)v11 - 8);
        if (v22 == 61)
LABEL_37:
          v32 = (llvm::Value *)*((_QWORD *)v11 - 4);
        if (llvm::LoopVectorizationLegality::isConsecutivePtr(*(llvm::LoopVectorizationLegality **)(a1 + 608), v23, v32) == 1)v33 = 1;
        else
          v33 = 2;
        v113 = (llvm::Type *)v11;
        v114 = v118;
        v34 = sub_1C63DA99C(v109, (uint64_t)&v113);
        *(_DWORD *)(v34 + 16) = v33;
        *(_QWORD *)(v34 + 24) = ConsecutiveMemOpCost;
        *(_DWORD *)(v34 + 32) = v21;
        continue;
      }
      v28 = *(_QWORD *)(a1 + 672);
      v113 = (llvm::Type *)v11;
      v121 = 0;
      if (sub_1C61252B8((uint64_t *)(v28 + 48), &v113, &v121))
      {
        v29 = v121;
        v30 = *(_QWORD *)(v28 + 48);
        v31 = *(unsigned int *)(v28 + 64);
      }
      else
      {
        v30 = *(_QWORD *)(v28 + 48);
        v31 = *(unsigned int *)(v28 + 64);
        v29 = (void *)(v30 + 16 * v31);
      }
      if (v29 == (void *)(v30 + 16 * v31))
      {
        InterleaveGroupCost = 0;
        v35 = 1;
        v36 = 1;
        goto LABEL_45;
      }
      v42 = (uint64_t *)(*(_QWORD *)(a1 + 672) + 48);
      v113 = (llvm::Type *)v11;
      v121 = 0;
      v43 = 0;
      if (sub_1C61252B8(v42, &v113, &v121))
        v43 = v121[1];
      if (!sub_1C63D46C0(a1, (uint64_t)v11, (uint64_t)v118))
      {
        v36 = *(unsigned int *)(v43 + 16);
        if (llvm::LoopVectorizationCostModel::interleavedAccessCanBeWidened(a1, (uint64_t)v11))
        {
          InterleaveGroupCost = llvm::LoopVectorizationCostModel::getInterleaveGroupCost(a1, v11, v118);
          v35 = v44;
        }
        else
        {
          InterleaveGroupCost = 0;
          v35 = 1;
        }
LABEL_45:
        v37 = v118;
        if (sub_1C607A34C(a1, (uint64_t)v11, v118))
        {
          v38 = llvm::LoopVectorizationCostModel::getGatherScatterCost(a1, (uint64_t)v11, v37);
          v121 = (_QWORD *)v36;
          LODWORD(v122) = 0;
          v113 = (llvm::Type *)v38;
          v114 = v39;
          sub_1C4848B64((uint64_t)&v113, (uint64_t)&v121);
          v40 = v113;
          v41 = v114;
          v37 = v118;
        }
        else
        {
          v40 = 0;
          v41 = 1;
        }
        MemInstScalarizationCost = llvm::LoopVectorizationCostModel::getMemInstScalarizationCost(a1, (uint64_t)v11, v37);
        v121 = (_QWORD *)v36;
        LODWORD(v122) = 0;
        v113 = (llvm::Type *)MemInstScalarizationCost;
        v114 = v46;
        sub_1C4848B64((uint64_t)&v113, (uint64_t)&v121);
        v47 = (int)v35 <= (int)v41;
        v48 = InterleaveGroupCost;
        if (v35 == v41)
          v47 = (uint64_t)v40 >= InterleaveGroupCost;
        if (!v47)
          goto LABEL_60;
        v49 = (int)v35 < (int)v114;
        if (v35 == v114)
          v49 = InterleaveGroupCost < (uint64_t)v113;
        if (v49)
        {
          v50 = 3;
          v51 = v108;
        }
        else
        {
LABEL_60:
          v52 = (int)v114 > (int)v41;
          if (v114 == v41)
            v52 = (uint64_t)v40 < (uint64_t)v113;
          v4 = v52;
          v51 = v108;
          if (v4)
          {
            v50 = 4;
            v48 = (uint64_t)v40;
            v35 = v41;
          }
          else
          {
            v50 = 5;
            v48 = (uint64_t)v113;
            v35 = v114;
          }
        }
        v108 = v35 | v51 & 0xFFFFFFFF00000000;
        v53 = (uint64_t *)(*(_QWORD *)(a1 + 672) + 48);
        v113 = (llvm::Type *)v11;
        v121 = 0;
        if ((sub_1C61252B8(v53, &v113, &v121) & 1) != 0 && (v54 = v121[1]) != 0)
        {
          sub_1C63D4754(a1, v54, (uint64_t)v118, v50, v48, v108);
        }
        else
        {
          v113 = (llvm::Type *)v11;
          v114 = v118;
          v55 = sub_1C63DA99C(v109, (uint64_t)&v113);
          *(_DWORD *)(v55 + 16) = v50;
          *(_QWORD *)(v55 + 24) = v48;
          *(_DWORD *)(v55 + 32) = v35;
        }
        v8 = v104;
        continue;
      }
    }
    v7 += 8;
  }
  while (v7 != v8);
LABEL_72:
  if (((*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 616) + 432))(**(_QWORD **)(a1 + 616)) & 1) != 0)
    return;
  v113 = (llvm::Type *)v117;
  v114 = (llvm::Type *)v117;
  v115 = 8;
  v116 = 0;
  v56 = *(_QWORD *)(a1 + 584);
  v57 = *(_QWORD *)(v56 + 32);
  for (j = *(_QWORD *)(v56 + 40); v57 != j; v57 += 8)
  {
    v59 = *(_QWORD *)v57 + 40;
    for (k = *(_QWORD *)(*(_QWORD *)v57 + 48); k != v59; k = *(_QWORD *)(k + 8))
    {
      if (k)
        v61 = k - 24;
      else
        v61 = 0;
      if (k)
      {
        if (*(unsigned __int8 *)(v61 + 16) - 62 >= 0xFFFFFFFE)
        {
          v62 = *(_QWORD *)(v61 - 32);
          if (v62)
          {
            if (*(unsigned __int8 *)(v62 + 16) >= 0x1Cu)
            {
              v63 = *(_QWORD *)(a1 + 584);
              v64 = sub_1C477672C(v63 + 56, *(_QWORD *)(v62 + 40));
              v65 = *(_QWORD *)(v63 + 64);
              v66 = v65 == *(_QWORD *)(v63 + 56) ? 76 : 72;
              if (v64 != (_QWORD *)(v65 + 8 * *(unsigned int *)(v63 + v66))
                && sub_1C63D46C0(a1, v61, (uint64_t)v118) != 4)
              {
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v113, v62);
              }
            }
          }
        }
      }
    }
  }
  v121 = v123;
  v122 = 0x400000000;
  sub_1C6319E40((unsigned int *)&v121, &v113);
  v67 = v122;
  while ((_DWORD)v122)
  {
LABEL_93:
    v68 = v121[--v67];
    LODWORD(v122) = v67;
    v69 = *(_DWORD *)(v68 + 20);
    if ((v69 & 0x40000000) != 0)
    {
      v71 = *(uint64_t **)(v68 - 8);
      v70 = v69 & 0x7FFFFFF;
      if (!v70)
      {
LABEL_95:
        if (!v67)
          break;
        goto LABEL_93;
      }
    }
    else
    {
      v70 = v69 & 0x7FFFFFF;
      v71 = (uint64_t *)(v68 - 32 * v70);
      if (!v70)
        goto LABEL_95;
    }
    v72 = 32 * v70;
    do
    {
      v73 = *v71;
      v74 = *(unsigned __int8 *)(*v71 + 16);
      if (*v71)
        v75 = v74 >= 0x1C;
      else
        v75 = 0;
      if (v75 && v74 != 83 && *(_QWORD *)(v73 + 40) == *(_QWORD *)(v68 + 40))
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v113, *v71);
        if (v77)
        {
          v78 = v122;
          if (v122 >= (unint64_t)HIDWORD(v122))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, (uint64_t)v123, v122 + 1, 8);
            v78 = v122;
          }
          v121[v78] = v73;
          LODWORD(v122) = v122 + 1;
        }
      }
      v71 += 4;
      v72 -= 32;
    }
    while (v72);
    v67 = v122;
  }
  if (v114 == v113)
    v79 = (uint64_t *)((char *)&v115 + 4);
  else
    v79 = &v115;
  v80 = *(unsigned int *)v79;
  if ((_DWORD)v80)
  {
    v81 = 8 * v80;
    v82 = (uint64_t *)v114;
    while ((unint64_t)*v82 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v82;
      v81 -= 8;
      if (!v81)
        goto LABEL_141;
    }
  }
  else
  {
    v82 = (uint64_t *)v114;
  }
  v83 = (unint64_t *)((char *)v114 + 8 * v80);
  if (v82 != (uint64_t *)v83)
  {
    v84 = a1 + 200;
    v85 = a1 + 560;
    v86 = v118;
    v87 = v118;
    v88 = *v82;
    v110 = v118;
LABEL_126:
    if (*(_BYTE *)(v88 + 16) == 60)
    {
      if (sub_1C63D46C0(a1, v88, (uint64_t)v86) - 1 > 1)
      {
        v92 = v85;
        v95 = (uint64_t *)(*(_QWORD *)(a1 + 672) + 48);
        v119 = v88;
        MemoryInstructionCost = 0;
        if ((sub_1C61252B8(v95, &v119, &MemoryInstructionCost) & 1) != 0)
        {
          v96 = *(_QWORD *)(MemoryInstructionCost + 8);
          if (v96)
          {
            if (*(_DWORD *)v96)
            {
              v97 = 0;
              do
              {
                LODWORD(v119) = v97 + *(_DWORD *)(v96 + 32);
                v98 = sub_1C4FA9B60((uint64_t *)(v96 + 8), &v119);
                if (v98)
                {
                  v99 = v98;
                  MemoryInstructionCost = llvm::LoopVectorizationCostModel::getMemoryInstructionCost(a1, v98, 1uLL);
                  v112 = v100;
                  v119 = v110;
                  LODWORD(v120) = 0;
                  sub_1C4848B64((uint64_t)&v119, (uint64_t)&MemoryInstructionCost);
                  v105 = v119;
                  v107 = (int)v120;
                  v119 = v99;
                  v120 = v86;
                  v101 = sub_1C63DA99C(v92, (uint64_t)&v119);
                  *(_DWORD *)(v101 + 16) = 5;
                  *(_QWORD *)(v101 + 24) = v105;
                  *(_DWORD *)(v101 + 32) = v107;
                }
                ++v97;
              }
              while (v97 < *(_DWORD *)v96);
            }
          }
        }
      }
      else
      {
        MemoryInstructionCost = llvm::LoopVectorizationCostModel::getMemoryInstructionCost(a1, v88, 1uLL);
        v112 = v89;
        v119 = v87;
        LODWORD(v120) = 0;
        sub_1C4848B64((uint64_t)&v119, (uint64_t)&MemoryInstructionCost);
        v90 = v119;
        v91 = (int)v120;
        v119 = v88;
        v120 = v86;
        v92 = v85;
        v93 = sub_1C63DA99C(v85, (uint64_t)&v119);
        *(_DWORD *)(v93 + 16) = 5;
        *(_QWORD *)(v93 + 24) = v90;
        *(_DWORD *)(v93 + 32) = v91;
      }
    }
    else
    {
      v92 = v85;
      v94 = sub_1C63DCD94(v84, (int *)&v118);
      sub_1C4774094((llvm::SmallPtrSetImplBase *)(v94 + 2), v88);
    }
    v102 = (unint64_t *)(v82 + 1);
    while (v102 != v83)
    {
      v103 = *v102++;
      v88 = v103;
      if (v103 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v82 = (uint64_t *)(v102 - 1);
        v85 = v92;
        v84 = a1 + 200;
        v87 = v110;
        goto LABEL_126;
      }
    }
  }
LABEL_141:
  if (v121 != v123)
    free(v121);
  if (v114 != v113)
    free(v114);
}

uint64_t sub_1C607A34C(uint64_t a1, uint64_t a2, llvm::Type *a3)
{
  int v3;
  uint64_t ***v5;
  uint64_t **v6;
  _BOOL4 v8;
  uint64_t v9;

  v3 = *(unsigned __int8 *)(a2 + 16);
  if ((v3 & 0xFE) != 0x3C)
    return 0;
  v5 = (uint64_t ***)a2;
  if (v3 != 60)
    v5 = *(uint64_t ****)(a2 - 64);
  v6 = *v5;
  v8 = ((unint64_t)a3 & 0xFFFFFFFF00000000) == 0x100000000 && (_DWORD)a3 != 0;
  if (a3 > 1 || v8)
  {
    if (((unint64_t)a3 & 0xFFFFFFFF00000000) == 0x100000000)
      llvm::ScalableVectorType::get(v6, a3);
    else
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v6, a3);
  }
  v9 = 360;
  if (v3 == 60)
    v9 = 368;
  return (*(uint64_t (**)(void))(***(_QWORD ***)(a1 + 616) + v9))();
}

BOOL sub_1C607A414(uint64_t a1, _BYTE *a2, llvm::Type *a3)
{
  uint64_t v6;
  int v7;
  BOOL v8;
  int v9;
  BOOL v10;
  const llvm::Value *v11;
  llvm::LoopVectorizationLegality *v12;
  uint64_t **v14;
  uint64_t v15;
  uint64_t **v16;

  if (!a2 || a2[16] != 66)
    return 0;
  v6 = **((_QWORD **)a2 - 4);
  v7 = *(unsigned __int8 *)(v6 + 8);
  v8 = v7 == 7 || v7 == 9;
  if (!v8 && (((unint64_t)a3 & 0xFFFFFFFF00000000) == 0x100000000 || a3 != 1))
  {
    v14 = (uint64_t **)**((_QWORD **)a2 - 4);
    if (((unint64_t)a3 & 0xFFFFFFFF00000000) == 0x100000000)
      llvm::ScalableVectorType::get(v14, a3);
    else
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v14, a3);
    v6 = v15;
  }
  v9 = *(unsigned __int8 *)(*(_QWORD *)a2 + 8);
  v10 = v9 == 7 || v9 == 9;
  if (!v10 && (((unint64_t)a3 & 0xFFFFFFFF00000000) == 0x100000000 || a3 != 1))
  {
    v16 = *(uint64_t ***)a2;
    if (((unint64_t)a3 & 0xFFFFFFFF00000000) == 0x100000000)
      llvm::ScalableVectorType::get(v16, a3);
    else
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v16, a3);
  }
  v11 = (const llvm::Value *)*((_QWORD *)a2 - 4);
  v12 = *(llvm::LoopVectorizationLegality **)(a1 + 608);
  if (v11 != *((const llvm::Value **)v12 + 9))
  {
    if (((*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 616) + 456))(**(_QWORD **)(a1 + 616), v6) & 1) != 0)
      return 0;
    v12 = *(llvm::LoopVectorizationLegality **)(a1 + 608);
  }
  return llvm::LoopVectorizationLegality::isInductionPhi(v12, v11);
}

void llvm::initializeLoopVectorizePass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED838A50);
  if (v2 != -1)
  {
    v5[0] = sub_1C607A5A8;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED838A50, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C607A5A8(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  llvm::PassRegistry *v5;
  llvm::PassRegistry *v6;
  llvm::PassRegistry *v7;
  llvm::PassRegistry *v8;
  llvm::PassRegistry *v9;
  llvm::PassRegistry *v10;
  llvm::PassRegistry *v11;
  uint64_t v12;

  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeBasicAAWrapperPassPass(a1, v2);
  llvm::initializeAAResultsWrapperPassPass(a1, v3);
  llvm::initializeGlobalsAAWrapperPassPass(a1, v4);
  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeBlockFrequencyInfoWrapperPassPass(a1, v5);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v6);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopAccessLegacyAnalysisPass(a1, v7);
  llvm::initializeDemandedBitsWrapperPassPass(a1, v8);
  llvm::initializeOptimizationRemarkEmitterWrapperPassPass(a1, v9);
  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, v10);
  llvm::initializeInjectTLIMappingsLegacyPass(a1, v11);
  v12 = operator new();
  *(_QWORD *)v12 = "Loop Vectorization";
  *(_QWORD *)(v12 + 8) = 18;
  *(_QWORD *)(v12 + 16) = "loop-vectorize";
  *(_QWORD *)(v12 + 24) = 14;
  *(_QWORD *)(v12 + 32) = &unk_1EF8F5D50;
  *(_WORD *)(v12 + 40) = 0;
  *(_BYTE *)(v12 + 42) = 0;
  *(_QWORD *)(v12 + 48) = 0;
  *(_QWORD *)(v12 + 56) = 0;
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = sub_1C60889EC;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v12, 1);
  return v12;
}

uint64_t sub_1C607A6A4(uint64_t a1, char a2, char a3)
{
  unint64_t v7;
  unint64_t v9;
  _QWORD *v10;
  _QWORD v11[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F5D50;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81ACE30;
  if (!byte_1ED838890)
    a2 = 1;
  *(_BYTE *)(a1 + 32) = a2;
  if (!byte_1ED838950)
    a3 = 1;
  *(_BYTE *)(a1 + 33) = a3;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v9 = qword_1ED830BC0[0];
  v7 = atomic_load(&qword_1ED838A50);
  if (v7 != -1)
  {
    v11[0] = sub_1C607A5A8;
    v11[1] = &v9;
    v10 = v11;
    std::__call_once(&qword_1ED838A50, &v10, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

BOOL llvm::LoopVectorizationCostModel::isConsecutiveLoadOrStore(llvm::LoopVectorizationLegality **this, llvm::Instruction *a2)
{
  int v2;
  llvm::Value *v3;
  uint64_t v4;

  v2 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v2 == 60)
  {
    v3 = (llvm::Value *)*((_QWORD *)a2 - 4);
    if (v3)
      return llvm::LoopVectorizationLegality::isConsecutivePtr(this[76], *(llvm::Type **)a2, v3) != 0;
    return 0;
  }
  v4 = 0;
  if (a2 && v2 == 61)
  {
    v3 = (llvm::Value *)*((_QWORD *)a2 - 4);
    if (v3)
    {
      a2 = (llvm::Instruction *)*((_QWORD *)a2 - 8);
      return llvm::LoopVectorizationLegality::isConsecutivePtr(this[76], *(llvm::Type **)a2, v3) != 0;
    }
    return 0;
  }
  return v4;
}

void llvm::LoopVectorizationCostModel::collectInLoopReductions(llvm::LoopVectorizationCostModel *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t Opcode;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *__src;
  unsigned int v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 76);
  v2 = *(_QWORD *)(v1 + 104);
  v3 = *(_QWORD *)(v1 + 112);
  if (v2 != v3)
  {
    v5 = (char *)this + 224;
    v6 = (uint64_t *)((char *)this + 536);
    while (1)
    {
      v7 = *(_QWORD **)v2;
      v19 = v7;
      if (*(_QWORD *)(v2 + 56) != *v7)
        goto LABEL_4;
      Opcode = llvm::RecurrenceDescriptor::getOpcode(*(_DWORD *)(v2 + 40));
      if (!byte_1EF8F5F58)
      {
        v9 = Opcode;
        if ((llvm::LoopVectorizeHints::allowReordering(*((llvm::LoopVectorizeHints **)this + 83))
           || !*(_BYTE *)(v2 + 65))
          && !(*(unsigned int (**)(_QWORD, uint64_t, _QWORD, _QWORD))(***((_QWORD ***)this + 77) + 1136))(**((_QWORD **)this + 77), v9, *v7, 0))
        {
          goto LABEL_4;
        }
      }
      llvm::RecurrenceDescriptor::getReductionOpChain(v2 + 8);
      if (v21)
        break;
LABEL_8:
      if (__src != v22)
        free(__src);
LABEL_4:
      v2 += 176;
      if (v2 == v3)
        return;
    }
    v10 = sub_1C63D4A20((uint64_t)v5, (uint64_t *)&v19);
    if ((void **)v10 == &__src)
    {
LABEL_22:
      if (v21)
      {
        v15 = (uint64_t)v19;
        v14 = (uint64_t *)__src;
        v16 = 8 * v21;
        do
        {
          v18 = 0;
          v17 = *v14++;
          v18 = v17;
          sub_1C61B6040(v6, &v18)[1] = v15;
          v15 = v18;
          v16 -= 8;
        }
        while (v16);
      }
      goto LABEL_8;
    }
    v11 = v10;
    v12 = v21;
    v13 = *(unsigned int *)(v10 + 8);
    if (v13 >= v21)
    {
      if (v21)
        memmove(*(void **)v10, __src, 8 * v21);
      goto LABEL_21;
    }
    if (*(_DWORD *)(v10 + 12) < v21)
    {
      *(_DWORD *)(v10 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v10, v10 + 16, v12, 8);
    }
    else if ((_DWORD)v13)
    {
      memmove(*(void **)v10, __src, 8 * v13);
LABEL_19:
      if (v13 != v21)
        memcpy((void *)(*(_QWORD *)v11 + 8 * v13), (char *)__src + 8 * v13, 8 * v21 - 8 * v13);
LABEL_21:
      *(_DWORD *)(v11 + 8) = v12;
      goto LABEL_22;
    }
    v13 = 0;
    goto LABEL_19;
  }
}

void llvm::LoopVectorizationPlanner::plan(uint64_t a1@<X0>, llvm::Type *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  llvm::DominatorTree *v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  unsigned int v23;
  char *v24;
  char *v25;
  BOOL v27;
  BOOL v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  llvm::OptimizationRemarkEmitter *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  void **v41;
  char *v42;
  unint64_t v43;
  void **v44;
  __int128 v45;
  uint64_t v46;
  unsigned __int8 *v47;
  void *v48;
  uint64_t v49;
  _BYTE v50[128];
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  const void *v54[10];
  void *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  const char *v65;
  const char *v66;
  uint64_t v67;
  char v68;
  char v69;
  void *v70;
  uint64_t v71;
  _BYTE v72[260];
  int v73;
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v8 = llvm::LoopVectorizationCostModel::computeMaxVF(*(_QWORD *)(a1 + 40), (unint64_t)a2);
  v9 = v6;
  if ((_DWORD)v8)
    v10 = 0;
  else
    v10 = v6 == 0;
  if (v10)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    return;
  }
  v11 = v6;
  v12 = *(_QWORD *)(a1 + 40);
  if (!*(_BYTE *)(v12 + 124)
    && !llvm::LoopAccessInfo::blockNeedsPredication(**(llvm::LoopAccessInfo ***)(*(_QWORD *)a1 + 32), **(llvm::BasicBlock ***)(v12 + 608), *(llvm::Loop **)(*(_QWORD *)(v12 + 608) + 40), v7))
  {
    goto LABEL_16;
  }
  if (!word_1ED82AC80)
  {
    if (((*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 24) + 576))(**(_QWORD **)(a1 + 24)) & 1) != 0)
      goto LABEL_16;
LABEL_14:
    if (sub_1C607B090(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 672)))
    {
      v13 = *(_DWORD **)(a1 + 40);
      sub_1C63DA638(v13 + 140);
      sub_1C63DA690(v13 + 38);
      sub_1C63DA690(v13 + 44);
    }
    goto LABEL_16;
  }
  if (!byte_1ED82ACF8)
    goto LABEL_14;
LABEL_16:
  if (HIDWORD(a2) == 1)
    v14 = v11;
  else
    v14 = v8;
  if ((HIDWORD(v14) == 1 || HIDWORD(a2) != 1) && (int)a2 - 1 < v14)
  {
    v29 = *(_QWORD *)(a1 + 40);
    sub_1C63D43F0(v29, (unint64_t)a2);
    llvm::LoopVectorizationCostModel::collectInstsToScalarize(v29, a2);
    llvm::LoopVectorizationCostModel::expectedCost(v29, (unint64_t)a2, 0, (uint64_t)&v58);
    if (!v59)
    {
      llvm::LoopVectorizationCostModel::collectInLoopReductions(*(llvm::LoopVectorizationCostModel **)(a1 + 40));
      llvm::LoopVectorizationPlanner::buildVPlansWithVPRecipes((uint64_t *)a1, (unint64_t)a2, (uint64_t)a2);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = a2;
      *(_BYTE *)(a3 + 24) = 1;
      return;
    }
    llvm::reportVectorizationInfo("UserVF ignored because of invalid costs.", (const void *)0x28, (uint64_t)"InvalidCost", 11, *(llvm::OptimizationRemarkEmitter **)(a1 + 80), *(const llvm::Loop **)a1, 0);
  }
  v48 = v50;
  v49 = 0x1000000000;
  v52 = 0;
  v53 = 0;
  v51 = (char *)&v52;
  v58 = 1;
  if ((_DWORD)v8)
  {
    v17 = 1;
    do
    {
      sub_1C607B4F8(&v48, (uint64_t)&v58);
      v17 *= 2;
      LODWORD(v58) = v17;
    }
    while (v17 <= v8);
  }
  v58 = 0x100000001;
  if ((v11 & 0xFFFFFFFF00000000) == 0x100000000 && (_DWORD)v11)
  {
    v18 = 1;
    do
    {
      sub_1C607B4F8(&v48, (uint64_t)&v58);
      v18 *= 2;
      LODWORD(v58) = v18;
    }
    while (v18 <= v11);
  }
  v19 = v53;
  if (v53)
    v20 = v51;
  else
    v20 = (char *)v48;
  v21 = (char *)v48 + 8 * v49;
  while (!v19)
  {
    if (v20 == v21)
      goto LABEL_58;
LABEL_42:
    if (v19)
      v22 = v20 + 28;
    else
      v22 = v20;
    sub_1C63D43F0(*(_QWORD *)(a1 + 40), *(_QWORD *)v22);
    v23 = *(_DWORD *)v22;
    if (*((_DWORD *)v22 + 1) == 1)
    {
      if (!v23)
        goto LABEL_50;
LABEL_49:
      llvm::LoopVectorizationCostModel::collectInstsToScalarize(*(_QWORD *)(a1 + 40), *(llvm::Type **)v22);
      goto LABEL_50;
    }
    if (v23 >= 2)
      goto LABEL_49;
LABEL_50:
    if (v19)
    {
      v24 = (char *)*((_QWORD *)v20 + 1);
      v25 = v20;
      if (v24)
      {
        do
        {
          v20 = v24;
          v24 = *(char **)v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v20 = (char *)*((_QWORD *)v25 + 2);
          v10 = *(_QWORD *)v20 == (_QWORD)v25;
          v25 = v20;
        }
        while (!v10);
      }
    }
    else
    {
      v20 += 8;
    }
  }
  if (v20 != (char *)&v52)
    goto LABEL_42;
LABEL_58:
  llvm::LoopVectorizationCostModel::collectInLoopReductions(*(llvm::LoopVectorizationCostModel **)(a1 + 40));
  llvm::LoopVectorizationPlanner::buildVPlansWithVPRecipes((uint64_t *)a1, 1uLL, v8);
  llvm::LoopVectorizationPlanner::buildVPlansWithVPRecipes((uint64_t *)a1, 0x100000001uLL, v11);
  v27 = (v8 & 0xFFFFFFFF00000000) == 0x100000000 && (_DWORD)v8 != 0;
  if (v8 > 1
    || v27
    || (v9 ? (v28 = (v11 & 0xFFFFFFFF00000000) == 0x100000000) : (v28 = 0), v28 || (v11 & 0xFFFFFFFE) != 0))
  {
    llvm::LoopVectorizationCostModel::selectVectorizationFactor(*(_QWORD *)(a1 + 40), (uint64_t)&v48, (uint64_t)&v45);
    if (v45 >= 2
      && (v30 = **(_DWORD **)(a1 + 72)) != 0
      && ((v31 = dword_1ED82AAB8, v30 > llvm::VectorizerParams::RuntimeMemoryCheckThreshold)
       && !llvm::LoopVectorizeHints::allowReordering(*(llvm::LoopVectorizeHints **)(a1 + 64))
       || v30 > v31))
    {
      v32 = *(llvm::OptimizationRemarkEmitter **)(a1 + 80);
      v33 = ****(_QWORD ****)v32;
      if (*(_QWORD *)(v33 + 128)
        || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v33 + 72) + 48))(*(_QWORD *)(v33 + 72)))
      {
        llvm::Loop::getStartLoc(*(llvm::Loop **)a1, &v47);
        v34 = (int)v47;
        if (v47)
        {
          v35 = *(_QWORD *)&v47[-8 * *((unsigned int *)v47 + 2)];
          if (*(_BYTE *)v35 != 15)
            v35 = *(_QWORD *)(v35 - 8 * *(unsigned int *)(v35 + 8));
          v36 = *((_DWORD *)v47 + 1);
          v34 = *((unsigned __int16 *)v47 + 1);
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v37 = **(_QWORD **)(*(_QWORD *)a1 + 32);
        v38 = *(_QWORD *)(v37 + 56);
        v59 = 13;
        v60 = 2;
        v61 = v38;
        v62 = v35;
        v63 = v36;
        v64 = v34;
        v65 = "loop-vectorize";
        v66 = "CantReorderMemOps";
        v67 = 17;
        v68 = 0;
        v69 = 0;
        v70 = v72;
        v71 = 0x400000000;
        v72[256] = 0;
        v73 = -1;
        v74 = v37;
        v58 = (uint64_t)&unk_1E814E838;
        v54[0] = "loop not vectorized: cannot prove it is safe to reorder memory operations";
        v54[1] = (const void *)73;
        sub_1C53B17B4((uint64_t)&v70, v54);
        sub_1C61998EC((uint64_t)v54, (uint64_t)&v58);
        v54[0] = &unk_1E814E838;
        v58 = (uint64_t)&off_1E814E790;
        v39 = (char *)v70;
        if ((_DWORD)v71)
        {
          v40 = (unint64_t)v71 << 6;
          do
          {
            v41 = (void **)&v39[v40];
            if (v39[v40 - 17] < 0)
              operator delete(*(v41 - 5));
            if (*((char *)v41 - 41) < 0)
              operator delete(*(v41 - 8));
            v40 -= 64;
          }
          while (v40);
          v39 = (char *)v70;
        }
        if (v39 != v72)
          free(v39);
        if (v47)
          llvm::MetadataTracking::untrack((uint64_t)&v47, v47);
        llvm::OptimizationRemarkEmitter::emit(v32, (llvm::DiagnosticInfoOptimizationBase *)v54);
        v54[0] = &off_1E814E790;
        v42 = (char *)v55;
        if (v56)
        {
          v43 = (unint64_t)v56 << 6;
          do
          {
            v44 = (void **)&v42[v43];
            if (v42[v43 - 17] < 0)
              operator delete(*(v44 - 5));
            if (*((char *)v44 - 41) < 0)
              operator delete(*(v44 - 8));
            v43 -= 64;
          }
          while (v43);
          v42 = (char *)v55;
        }
        if (v42 != (char *)&v57)
          free(v42);
      }
      llvm::LoopVectorizeHints::emitRemarkWithHints(*(llvm::LoopVectorizeHints **)(a1 + 64));
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 1;
    }
    else
    {
      *(_OWORD *)a3 = v45;
      *(_QWORD *)(a3 + 16) = v46;
    }
    *(_BYTE *)(a3 + 24) = 1;
  }
  else
  {
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 1;
    *(_BYTE *)(a3 + 24) = 1;
  }
  sub_1C6143384(v52);
  if (v48 != v50)
    free(v48);
}

BOOL sub_1C607B090(uint64_t a1)
{
  int v1;
  int v2;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v17;
  int v18;
  unsigned int v19;
  void *v20;

  v1 = *(_DWORD *)(a1 + 92);
  v2 = *(_DWORD *)(a1 + 96);
  if (v1 != v2)
  {
    sub_1C61446F0((unsigned int *)(a1 + 48));
    v6 = *(char **)(a1 + 72);
    v5 = *(char **)(a1 + 80);
    v7 = 88;
    if (v5 == v6)
      v7 = 92;
    v8 = *(unsigned int *)(a1 + v7);
    v9 = *(unint64_t **)(a1 + 80);
    if ((_DWORD)v8)
    {
      v10 = 0;
      while (*(_QWORD *)&v5[v10] >= 0xFFFFFFFFFFFFFFFELL)
      {
        v10 += 8;
        if (8 * v8 == v10)
          goto LABEL_20;
      }
      v9 = (unint64_t *)&v5[v10];
    }
    v11 = (unint64_t *)&v5[8 * v8];
    if (v9 != v11)
    {
      v12 = *v9;
      if (*v9)
      {
LABEL_13:
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v12 + 8), 8);
        MEMORY[0x1CAA32FC0](v12, 0x1020C40BF128421);
      }
LABEL_14:
      v13 = v9 + 1;
      while (v13 != v11)
      {
        v14 = *v13++;
        v12 = v14;
        if (v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v9 = v13 - 1;
          if (v12)
            goto LABEL_13;
          goto LABEL_14;
        }
      }
      v6 = *(char **)(a1 + 72);
      v5 = *(char **)(a1 + 80);
    }
LABEL_20:
    if (v5 != v6)
    {
      v15 = *(unsigned int *)(a1 + 88);
      if (v15 >= 0x21 && 4 * (*(_DWORD *)(a1 + 92) - *(_DWORD *)(a1 + 96)) < v15)
      {
        free(v5);
        v17 = *(_DWORD *)(a1 + 92) - *(_DWORD *)(a1 + 96);
        v18 = 1 << (33 - __clz(v17 - 1));
        *(_DWORD *)(a1 + 92) = 0;
        *(_DWORD *)(a1 + 96) = 0;
        if (v17 <= 0x10)
          v19 = 32;
        else
          v19 = v18;
        *(_DWORD *)(a1 + 88) = v19;
        v20 = malloc_type_malloc(8 * v19, 0x4065EBACuLL);
        if (!v20)
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        *(_QWORD *)(a1 + 80) = v20;
        memset(v20, 255, 8 * *(unsigned int *)(a1 + 88));
        goto LABEL_22;
      }
      memset(v5, 255, 8 * v15);
    }
    *(_DWORD *)(a1 + 92) = 0;
    *(_DWORD *)(a1 + 96) = 0;
LABEL_22:
    *(_BYTE *)(a1 + 40) = 0;
  }
  return v1 != v2;
}

void llvm::LoopVectorizationPlanner::buildVPlansWithVPRecipes(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  int32x2_t *v6;
  int32x2_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  char *v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  int32x2_t v25;
  int32x2_t i;
  uint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  _BYTE v45[32];

  v41 = (uint64_t *)v45;
  v42 = (uint64_t *)v45;
  v43 = 4;
  v44 = 0;
  llvm::LoopVectorizationPlanner::collectTriviallyDeadInstructions(a1, &v41);
  v6 = (int32x2_t *)a1[4];
  v7 = v6[74];
  v8 = 150;
  if (*(_QWORD *)&v7 == *(_QWORD *)&v6[73])
    v8 = 151;
  v9 = v6->u32[v8];
  if ((_DWORD)v9)
  {
    v10 = 8 * v9;
    v11 = (uint64_t *)v6[74];
    while ((unint64_t)*v11 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v11;
      v10 -= 8;
      if (!v10)
        goto LABEL_16;
    }
  }
  else
  {
    v11 = (uint64_t *)v6[74];
  }
  v12 = (_QWORD *)(*(_QWORD *)&v7 + 8 * v9);
  if (v11 != v12)
  {
    v13 = *v11;
LABEL_11:
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v41, v13);
    v14 = (unint64_t *)(v11 + 1);
    while (v14 != v12)
    {
      v15 = *v14++;
      v13 = v15;
      if (v15 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v11 = (uint64_t *)(v14 - 1);
        goto LABEL_11;
      }
    }
    v6 = (int32x2_t *)a1[4];
  }
LABEL_16:
  v16 = (uint64_t)&v6[42];
  if (v42 == v41)
    v17 = (uint64_t *)((char *)&v43 + 4);
  else
    v17 = &v43;
  v18 = *(unsigned int *)v17;
  if ((_DWORD)v18)
  {
    v19 = 8 * v18;
    v20 = v42;
    while ((unint64_t)*v20 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v20;
      v19 -= 8;
      if (!v19)
        goto LABEL_33;
    }
  }
  else
  {
    v20 = v42;
  }
  v21 = (char *)&v42[v18];
  if (v20 != (uint64_t *)v21)
  {
LABEL_26:
    v39 = 0;
    v39 = *v20;
    v22 = (_QWORD *)sub_1C619495C((uint64_t)&v6[42], (uint64_t *)&v39);
    if (*(_QWORD **)&v6[46] != v22)
      sub_1C4E3D224(v6 + 42, v22);
    v23 = (unint64_t *)(v20 + 1);
    while (v23 != (unint64_t *)v21)
    {
      v24 = *v23++;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v20 = (uint64_t *)(v23 - 1);
        goto LABEL_26;
      }
    }
    v6 = (int32x2_t *)a1[4];
  }
LABEL_33:
  v25 = v6[45];
  for (i = v6[46]; *(_QWORD *)&v25 != *(_QWORD *)&i; *(_QWORD *)&v25 += 16)
  {
    v27 = *(_QWORD *)(*(_QWORD *)&v25 + 8);
    while (1)
    {
      v28 = (char *)sub_1C477672C((uint64_t)&v41, v27);
      v29 = v42 == v41 ? (uint64_t *)((char *)&v43 + 4) : &v43;
      if (v28 == (char *)&v42[*(unsigned int *)v29])
        break;
      if (*(_QWORD *)(*(_QWORD *)(v27 + 40) + 48) == v27 + 24)
      {
        v27 = 0;
      }
      else
      {
        v30 = *(_QWORD *)(v27 + 24);
        if (v30)
          v27 = v30 - 24;
        else
          v27 = 0;
      }
    }
    *(_QWORD *)(*(_QWORD *)&v25 + 8) = v27;
  }
  v31 = a3 & 0xFFFFFFFF00000000;
  if ((a3 & 0xFFFFFFFF00000000) == 0x100000000 || HIDWORD(a2) != 1)
  {
    v33 = (a3 + 1);
    if (v33 > a2)
    {
      do
      {
        v39 = a2;
        v40 = v31 | v33;
        llvm::LoopVectorizationPlanner::buildVPlanWithVPRecipes(a1, (unint64_t)&v39, (uint64_t)&v41, v16, &v38);
        sub_1C607C498((uint64_t)(a1 + 11), (char *)&v38);
        v34 = v38;
        v38 = 0;
        if (v34)
        {
          v35 = sub_1C608C6F8(v34);
          MEMORY[0x1CAA32FC0](v35, 0x10B2C40C74BA152);
        }
        a2 = v40;
      }
      while ((v31 == 0x100000000 || HIDWORD(v40) != 1) && v33 > v40);
    }
  }
  if (v42 != v41)
    free(v42);
}

_QWORD *sub_1C607B4F8(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;

  v3 = result;
  if (result[20])
  {
    v9 = (uint64_t)(result + 18);
    v10 = *(_DWORD *)a2;
    v11 = *(_DWORD *)(a2 + 4);
    return (_QWORD *)sub_1C63DD740(v9, v10, v11, (uint64_t *)a2);
  }
  v4 = *result;
  v5 = *((unsigned int *)result + 2);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = (_DWORD *)(v4 + 4);
    while (*(v7 - 1) != *(_DWORD *)a2 || *v7 != *(_DWORD *)(a2 + 4))
    {
      v7 += 2;
      v6 -= 8;
      if (!v6)
        goto LABEL_7;
    }
    if (v6)
      return result;
LABEL_7:
    if (v5 <= 0xF)
      goto LABEL_8;
    do
    {
      sub_1C63DD740((uint64_t)(v3 + 18), *(_DWORD *)(*v3 + 8 * v5 - 8), *(_DWORD *)(*v3 + 8 * v5 - 4), (uint64_t *)(*v3 + 8 * v5 - 8));
      LODWORD(v5) = *((_DWORD *)v3 + 2) - 1;
      *((_DWORD *)v3 + 2) = v5;
    }
    while ((_DWORD)v5);
    v10 = *(_DWORD *)a2;
    v11 = *(_DWORD *)(a2 + 4);
    v9 = (uint64_t)(v3 + 18);
    return (_QWORD *)sub_1C63DD740(v9, v10, v11, (uint64_t *)a2);
  }
LABEL_8:
  v8 = *(_QWORD *)a2;
  if (v5 >= *((_DWORD *)result + 3))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 2), v5 + 1, 8);
    v4 = *v3;
    v5 = *((unsigned int *)v3 + 2);
  }
  *(_QWORD *)(v4 + 8 * v5) = v8;
  ++*((_DWORD *)v3 + 2);
  return result;
}

uint64_t llvm::LoopVectorizationPlanner::getBestPlanFor(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(unsigned int *)(result + 96);
  if ((_DWORD)v2)
  {
    v3 = a2;
    v4 = *(_QWORD *)(result + 88);
    v5 = HIDWORD(a2);
    v6 = 8 * v2;
    while (1)
    {
      result = sub_1C63DAF00(*(_QWORD *)v4 + 8, v3, v5, &v7);
      if ((_DWORD)result)
        break;
      v4 += 8;
      v6 -= 8;
      if (!v6)
        return result;
    }
    return *(_QWORD *)v4;
  }
  return result;
}

void sub_1C607B678(llvm::Loop *a1)
{
  uint64_t LoopID;
  uint64_t v3;
  unsigned int *v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v17;
  uint64_t Impl;
  unsigned int v19;
  llvm::MDNode *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[5];

  v26[4] = *MEMORY[0x1E0C80C00];
  v24 = v26;
  v26[0] = 0;
  v25 = 0x400000001;
  LoopID = llvm::Loop::getLoopID(a1);
  if (!LoopID)
    goto LABEL_22;
  v4 = (unsigned int *)(LoopID + 8);
  v3 = *(unsigned int *)(LoopID + 8);
  if (v3 < 2)
    goto LABEL_22;
  v5 = 0;
  v6 = v3 - 1;
  v7 = LoopID + 8;
  do
  {
    v8 = *(unsigned __int8 **)(v7 - 8 * *v4);
    if (*v8 - 4 <= 0x1E)
    {
      v9 = *(_QWORD *)&v8[-8 * *((unsigned int *)v8 + 2)];
      if (*(_BYTE *)v9 || (v10 = *(_QWORD **)(v9 + 8), *v10 < 0x18uLL))
      {
        v5 = 0;
      }
      else
      {
        v12 = v10[3];
        v13 = v10[4];
        v14 = v10[5];
        v5 = v12 == 0x6F6F6C2E6D766C6CLL && v13 == 0x6C6C6F726E752E70 && v14 == 0x656C62617369642ELL;
      }
    }
    v11 = v25;
    if (v25 >= (unint64_t)HIDWORD(v25))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, (uint64_t)v26, v25 + 1, 8);
      v11 = v25;
    }
    *((_QWORD *)v24 + v11) = v8;
    LODWORD(v25) = v25 + 1;
    v7 += 8;
    --v6;
  }
  while (v6);
  if (!v5)
  {
LABEL_22:
    v17 = (uint64_t *)****((_QWORD ****)a1 + 4);
    v21 = &v23;
    v22 = 0x100000001;
    v23 = llvm::MDString::get(v17, "llvm.loop.unroll.runtime.disable", 0x20uLL);
    Impl = llvm::MDTuple::getImpl(v17, &v23, 1, 0, 1);
    v19 = v25;
    if (v25 >= HIDWORD(v25))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, (uint64_t)v26, v25 + 1, 8);
      v19 = v25;
    }
    *((_QWORD *)v24 + v19) = Impl;
    LODWORD(v25) = v25 + 1;
    v20 = (llvm::MDNode *)llvm::MDTuple::getImpl(v17, v24, v25, 0, 1);
    llvm::MDNode::replaceOperandWith(v20, 0, v20);
    llvm::Loop::setLoopID(a1, v20);
    if (v21 != &v23)
      free(v21);
  }
  if (v24 != v26)
    free(v24);
}

void llvm::LoopVectorizationPlanner::printPlans(llvm::LoopVectorizationPlanner *this, llvm::raw_ostream *a2)
{
  uint64_t v2;
  llvm::VPlan **v4;
  uint64_t v5;
  llvm::VPlan *v6;

  v2 = *((unsigned int *)this + 24);
  if ((_DWORD)v2)
  {
    v4 = (llvm::VPlan **)*((_QWORD *)this + 11);
    v5 = 8 * v2;
    do
    {
      v6 = *v4;
      if (byte_1ED838A10)
        llvm::VPlan::printDOT(v6, a2);
      else
        llvm::VPlan::print((llvm::VPValue **)v6, a2);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
}

void llvm::LoopVectorizationPlanner::collectTriviallyDeadInstructions(uint64_t *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t LoopLatch;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int *v37;
  void *v38;
  uint64_t v39;
  _QWORD v40[7];

  v40[6] = *MEMORY[0x1E0C80C00];
  v38 = v40;
  v39 = 0x600000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks((_QWORD *)*a1, (uint64_t)&v38);
  if ((_DWORD)v39)
  {
    v4 = (char *)v38;
    v5 = (char *)v38 + 8 * v39;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)v4 + 40);
      if (v6 == *(_QWORD *)v4 + 40)
      {
        v7 = 0;
      }
      else
      {
        if (v6)
          v7 = v6 - 24;
        else
          v7 = 0;
        if (*(unsigned __int8 *)(v7 + 16) - 29 >= 0xB)
          v7 = 0;
      }
      v8 = *(_DWORD *)(v7 + 20);
      if ((v8 & 0x40000000) != 0)
        v9 = *(uint64_t **)(v7 - 8);
      else
        v9 = (uint64_t *)(v7 - 32 * (v8 & 0x7FFFFFF));
      v10 = *v9;
      v11 = *(unsigned __int8 *)(*v9 + 16);
      if (v10)
        v12 = v11 >= 0x1C;
      else
        v12 = 0;
      if (!v12)
        goto LABEL_21;
      v13 = *(_QWORD *)(v10 + 8);
      if (!v13)
        goto LABEL_21;
      if (*(_QWORD *)(v13 + 8))
        goto LABEL_21;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)a2, v10);
      if (!v14)
        goto LABEL_21;
      v15 = *(_DWORD *)(v10 + 20);
      if ((v15 & 0x40000000) != 0)
      {
        v17 = *(uint64_t **)(v10 - 8);
        v16 = v15 & 0x7FFFFFF;
        if (v16)
        {
LABEL_28:
          v18 = 32 * v16;
          do
          {
            v19 = *v17;
            if (*(_BYTE *)(*v17 + 16) == 66)
            {
              v20 = *(_QWORD *)(v19 + 8);
              if (v20)
              {
                if (!*(_QWORD *)(v20 + 8))
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)a2, v19);
              }
            }
            v17 += 4;
            v18 -= 32;
          }
          while (v18);
        }
      }
      else
      {
        v16 = v15 & 0x7FFFFFF;
        v17 = (uint64_t *)(v10 - 32 * v16);
        if (v16)
          goto LABEL_28;
      }
LABEL_21:
      v4 += 8;
    }
    while (v4 != v5);
  }
  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*a1);
  v22 = a1[4];
  v23 = *(uint64_t **)(v22 + 152);
  v24 = *(uint64_t **)(v22 + 160);
  if (v23 != v24)
  {
    v25 = LoopLatch;
    do
    {
      v26 = *v23;
      v27 = *(_DWORD *)(*v23 + 20);
      v28 = v27 & 0x7FFFFFF;
      if ((v27 & 0x7FFFFFF) != 0)
      {
        v29 = 0;
        while (1)
        {
          v30 = v26 - 32 * v28;
          if ((v27 & 0x40000000) != 0)
            v30 = *(_QWORD *)(v26 - 8);
          if (*(_QWORD *)(v30 + 32 * *(unsigned int *)(v26 + 60) + 8 * v29) == v25)
            break;
          if (v28 == ++v29)
            goto LABEL_43;
        }
      }
      else
      {
LABEL_43:
        LODWORD(v29) = -1;
      }
      if ((v27 & 0x40000000) != 0)
        v31 = *(_QWORD *)(v26 - 8);
      else
        v31 = v26 - 32 * v28;
      v32 = *(_QWORD *)(v31 + 32 * v29);
      if (!*(_BYTE *)(a1[5] + 124) || v32 != *(_QWORD *)(a1[4] + 72))
      {
        v33 = *(_QWORD *)(v32 + 8);
        if (v33)
        {
          while (1)
          {
            v34 = *(_QWORD *)(v33 + 24);
            if (v26 != v34)
            {
              v35 = sub_1C477672C((uint64_t)a2, v34);
              v36 = a2[1];
              v37 = v36 == *a2 ? (unsigned int *)((char *)a2 + 20) : (unsigned int *)(a2 + 2);
              if (v35 == (_QWORD *)(v36 + 8 * *v37))
                break;
            }
            v33 = *(_QWORD *)(v33 + 8);
            if (!v33)
              goto LABEL_55;
          }
        }
        else
        {
LABEL_55:
          sub_1C4774094((llvm::SmallPtrSetImplBase *)a2, v32);
        }
      }
      v23 += 12;
    }
    while (v23 != v24);
  }
  if (v38 != v40)
    free(v38);
}

uint64_t llvm::EpilogueVectorizerEpilogueLoop::createEpilogueVectorizedLoopSkeleton(llvm::EpilogueVectorizerEpilogueLoop *this)
{
  uint64_t v2;
  llvm *v3;
  _QWORD *v4;
  llvm::BasicBlock *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  llvm::DomTreeUpdater *v8;
  llvm::User *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::User *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::User *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  llvm::User *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t SinglePredecessor;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  _DWORD *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  _DWORD *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t i;
  llvm::Instruction *v71;
  uint64_t v72;
  llvm::ConstantInt *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t j;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  llvm::Value *v81;
  char *v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  llvm::Value **v86;
  llvm::MDNode *v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  llvm::ValueSymbolTable *v94;
  const char *v95;
  __int16 v96;
  void *v97;
  uint64_t v98;
  _BYTE v99[16];
  __int16 v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  llvm::Loop::getLoopID(*((llvm::Loop **)this + 1));
  llvm::InnerLoopVectorizer::createVectorLoopSkeleton((uint64_t)this, (uint64_t)"vec.epilog.", 11);
  v2 = *((_QWORD *)this + 30);
  v97 = "vec.epilog.iter.check";
  v100 = 259;
  llvm::Value::setName((uint64_t ***)v2, (uint64_t)&v97);
  v3 = (llvm *)*((_QWORD *)this + 30);
  v4 = (_QWORD *)*((_QWORD *)v3 + 5);
  if (v4 == (_QWORD *)((char *)v3 + 40))
  {
    v5 = 0;
  }
  else
  {
    if (v4)
      v6 = (unsigned __int8 *)(v4 - 3);
    else
      v6 = 0;
    if (v6[16] - 29 >= 0xB)
      v5 = 0;
    else
      v5 = (llvm::BasicBlock *)v6;
  }
  v8 = (llvm::DomTreeUpdater *)*((_QWORD *)this + 3);
  v7 = *((_QWORD *)this + 4);
  v97 = "vec.epilog.ph";
  v100 = 259;
  *((_QWORD *)this + 30) = sub_1C5EBD70C(v3, v5, 0, v7, v8, 0, (llvm::Twine *)&v97, 0);
  llvm::EpilogueVectorizerEpilogueLoop::emitMinimumVectorEpilogueIterCountCheck(this, *((llvm::BasicBlock **)this + 31), (llvm::BasicBlock *)v2);
  v9 = 0;
  v10 = *(_QWORD *)(*((_QWORD *)this + 88) + 24);
  v11 = *(_QWORD *)(v10 + 40);
  if (v11 != v10 + 40)
  {
    if (v11)
      v12 = (unsigned __int8 *)(v11 - 24);
    else
      v12 = 0;
    if (v12[16] - 29 >= 0xB)
      v9 = 0;
    else
      v9 = (llvm::User *)v12;
  }
  llvm::User::replaceUsesOfWith(v9, (llvm::Value *)v2, *((llvm::Value **)this + 30));
  llvm::DominatorTreeBase<llvm::BasicBlock,false>::changeImmediateDominator(*((_QWORD *)this + 4), *((_QWORD *)this + 30), *(_QWORD *)(*((_QWORD *)this + 88) + 24));
  v13 = *(_QWORD *)(*((_QWORD *)this + 88) + 32);
  v14 = *(_QWORD *)(v13 + 40);
  if (v14 == v13 + 40)
  {
    v15 = 0;
  }
  else
  {
    if (v14)
      v16 = (unsigned __int8 *)(v14 - 24);
    else
      v16 = 0;
    if (v16[16] - 29 >= 0xB)
      v15 = 0;
    else
      v15 = (llvm::User *)v16;
  }
  llvm::User::replaceUsesOfWith(v15, (llvm::Value *)v2, *((llvm::Value **)this + 31));
  v17 = *((_QWORD *)this + 88);
  v18 = *(_QWORD *)(v17 + 40);
  if (v18)
  {
    v19 = *(_QWORD *)(v18 + 40);
    if (v19 == v18 + 40)
    {
      v20 = 0;
    }
    else
    {
      if (v19)
        v21 = (unsigned __int8 *)(v19 - 24);
      else
        v21 = 0;
      if (v21[16] - 29 >= 0xB)
        v20 = 0;
      else
        v20 = (llvm::User *)v21;
    }
    llvm::User::replaceUsesOfWith(v20, (llvm::Value *)v2, *((llvm::Value **)this + 31));
    v17 = *((_QWORD *)this + 88);
  }
  v22 = *(_QWORD *)(v17 + 48);
  if (v22)
  {
    v23 = *(_QWORD *)(v22 + 40);
    if (v23 == v22 + 40)
    {
      v24 = 0;
    }
    else
    {
      v25 = (unsigned __int8 *)(v23 - 24);
      if (!v23)
        v25 = 0;
      if (v25[16] - 29 >= 0xB)
        v24 = 0;
      else
        v24 = (llvm::User *)v25;
    }
    llvm::User::replaceUsesOfWith(v24, (llvm::Value *)v2, *((llvm::Value **)this + 31));
  }
  v26 = *((_QWORD *)this + 4);
  SinglePredecessor = llvm::BasicBlock::getSinglePredecessor((llvm::BasicBlock *)v2);
  llvm::DominatorTreeBase<llvm::BasicBlock,false>::changeImmediateDominator(v26, v2, SinglePredecessor);
  llvm::DominatorTreeBase<llvm::BasicBlock,false>::changeImmediateDominator(*((_QWORD *)this + 4), *((_QWORD *)this + 31), *(_QWORD *)(*((_QWORD *)this + 88) + 32));
  if (!sub_1C63D2468(*((_QWORD *)this + 50), *(_QWORD *)(*((_QWORD *)this + 88) + 12)))
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::changeImmediateDominator(*((_QWORD *)this + 4), *((_QWORD *)this + 33), *(_QWORD *)(*((_QWORD *)this + 88) + 32));
  v28 = (_QWORD *)*((_QWORD *)this + 88);
  v29 = v28[5];
  if (v29)
  {
    v30 = *((unsigned int *)this + 72);
    if (v30 >= *((_DWORD *)this + 73))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 280, (uint64_t)this + 296, v30 + 1, 8);
      LODWORD(v30) = *((_DWORD *)this + 72);
    }
    *(_QWORD *)(*((_QWORD *)this + 35) + 8 * v30) = v29;
    ++*((_DWORD *)this + 72);
    v28 = (_QWORD *)*((_QWORD *)this + 88);
  }
  v31 = v28[6];
  if (v31)
  {
    v33 = *((unsigned int *)this + 72);
    if (v33 >= *((_DWORD *)this + 73))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 280, (uint64_t)this + 296, v33 + 1, 8);
      LODWORD(v33) = *((_DWORD *)this + 72);
    }
    *(_QWORD *)(*((_QWORD *)this + 35) + 8 * v33) = v31;
    v32 = *((_DWORD *)this + 72) + 1;
    *((_DWORD *)this + 72) = v32;
    v28 = (_QWORD *)*((_QWORD *)this + 88);
  }
  else
  {
    v32 = *((_DWORD *)this + 72);
  }
  v34 = v28[4];
  if (v32 >= *((_DWORD *)this + 73))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 280, (uint64_t)this + 296, v32 + 1, 8);
    v32 = *((_DWORD *)this + 72);
  }
  *(_QWORD *)(*((_QWORD *)this + 35) + 8 * v32) = v34;
  ++*((_DWORD *)this + 72);
  v97 = v99;
  v98 = 0x400000000;
  if (*(_QWORD *)(v2 + 40) != v2 + 40)
  {
    v35 = *(_QWORD *)(v2 + 48);
    v36 = v35 - 24;
    v37 = v35 ? v35 - 24 : 0;
    if (v35 && *(_BYTE *)(v37 + 16) == 83)
    {
      v38 = 0;
      do
      {
        if (v38 >= HIDWORD(v98))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, (uint64_t)v99, v38 + 1, 8);
          v38 = v98;
        }
        *((_QWORD *)v97 + v38) = v36;
        v38 = v98 + 1;
        LODWORD(v98) = v98 + 1;
        v39 = *(_QWORD *)(v36 + 32);
        v36 = v39 - 24;
        if (v39)
          v40 = v39 - 24;
        else
          v40 = 0;
      }
      while (v39 && *(_BYTE *)(v40 + 16) == 83);
      if (v38)
      {
        v41 = (char *)v97;
        v42 = (char *)v97 + 8 * v38;
        do
        {
          v43 = *(_DWORD **)v41;
          v44 = llvm::BasicBlock::getSinglePredecessor((llvm::BasicBlock *)v2);
          v45 = v43[5];
          v46 = v45 & 0x7FFFFFF;
          if ((v45 & 0x7FFFFFF) == 0)
            goto LABEL_87;
          v47 = 0;
          v48 = 8 * v46;
          do
          {
            v49 = v43[5];
            if ((v49 & 0x40000000) != 0)
              v50 = (_DWORD *)*((_QWORD *)v43 - 1);
            else
              v50 = &v43[-8 * (v49 & 0x7FFFFFF)];
            v51 = v43[15];
            if (*(_QWORD *)&v50[8 * v51 + v47 / 4] == v44)
              *(_QWORD *)&v50[8 * v51 + v47 / 4] = v2;
            v47 += 8;
          }
          while (v48 != v47);
          v52 = v43[5];
          v53 = v52 & 0x7FFFFFF;
          if ((v52 & 0x7FFFFFF) != 0)
          {
            v54 = 0;
            v55 = 8 * v51;
            while (1)
            {
              v56 = &v43[-8 * v53];
              if ((v52 & 0x40000000) != 0)
                v56 = (_DWORD *)*((_QWORD *)v43 - 1);
              if (*(_QWORD *)&v56[2 * v54 + v55] == *(_QWORD *)(*((_QWORD *)this + 88) + 32))
                break;
              if (v53 == ++v54)
                goto LABEL_87;
            }
          }
          else
          {
LABEL_87:
            LODWORD(v54) = -1;
          }
          llvm::PHINode::removeIncomingValue((llvm::PHINode *)v43, v54, 1);
          v57 = *((_QWORD *)this + 88);
          v58 = *(_QWORD *)(v57 + 40);
          if (v58)
          {
            v59 = v43[5];
            v60 = v59 & 0x7FFFFFF;
            if ((v59 & 0x7FFFFFF) != 0)
            {
              v61 = 0;
              while (1)
              {
                v62 = &v43[-8 * v60];
                if ((v59 & 0x40000000) != 0)
                  v62 = (_DWORD *)*((_QWORD *)v43 - 1);
                if (*(_QWORD *)&v62[8 * v43[15] + 2 * v61] == v58)
                  break;
                if (v60 == ++v61)
                  goto LABEL_95;
              }
            }
            else
            {
LABEL_95:
              LODWORD(v61) = -1;
            }
            llvm::PHINode::removeIncomingValue((llvm::PHINode *)v43, v61, 1);
            v57 = *((_QWORD *)this + 88);
          }
          v63 = *(_QWORD *)(v57 + 48);
          if (v63)
          {
            v64 = v43[5];
            v65 = v64 & 0x7FFFFFF;
            if ((v64 & 0x7FFFFFF) != 0)
            {
              v66 = 0;
              while (1)
              {
                v67 = &v43[-8 * v65];
                if ((v64 & 0x40000000) != 0)
                  v67 = (_DWORD *)*((_QWORD *)v43 - 1);
                if (*(_QWORD *)&v67[8 * v43[15] + 2 * v66] == v63)
                  break;
                if (v65 == ++v66)
                  goto LABEL_104;
              }
            }
            else
            {
LABEL_104:
              LODWORD(v66) = -1;
            }
            llvm::PHINode::removeIncomingValue((llvm::PHINode *)v43, v66, 1);
          }
          v68 = *((_QWORD *)this + 30);
          v69 = v68 + 40;
          for (i = *(_QWORD *)(v68 + 48); i != v69; i = *(_QWORD *)(i + 8))
          {
            v71 = (llvm::Instruction *)(i - 24);
            if (i)
              v72 = i - 24;
            else
              v72 = 0;
            if (*(_BYTE *)(v72 + 16) != 83)
              goto LABEL_114;
          }
          v71 = 0;
LABEL_114:
          llvm::Instruction::moveBefore((llvm::Instruction *)v43, v71);
          v41 += 8;
        }
        while (v41 != v42);
      }
    }
  }
  v73 = *(llvm::ConstantInt **)(*((_QWORD *)this + 49) + 384);
  v95 = "vec.epilog.resume.val";
  v96 = 259;
  v74 = *((_QWORD *)this + 30);
  v75 = v74 + 40;
  for (j = *(_QWORD *)(v74 + 48); j != v75; j = *(_QWORD *)(j + 8))
  {
    v77 = j - 24;
    if (j)
      v78 = j - 24;
    else
      v78 = 0;
    if (*(_BYTE *)(v78 + 16) != 83)
      goto LABEL_123;
  }
  v77 = 0;
LABEL_123:
  v79 = operator new(0x48uLL);
  v80 = v79;
  v79[1] = v73;
  v81 = (llvm::Value *)(v79 + 1);
  *v79 = 0;
  v79[2] = 0;
  v79[3] = 0x4000000000000053;
  *((_OWORD *)v79 + 2) = 0u;
  v82 = (char *)(v79 + 4);
  *((_OWORD *)v79 + 3) = 0u;
  *((_DWORD *)v79 + 16) = 0;
  if (v77)
  {
    v90 = *(_QWORD *)(v77 + 40);
    v91 = (uint64_t *)(v77 + 24);
    v79[6] = v90;
    *(_WORD *)(v90 + 18) &= ~0x8000u;
    if ((*((_BYTE *)v79 + 31) & 0x10) != 0)
    {
      v93 = *(_QWORD *)(v90 + 56);
      if (v93)
      {
        v94 = *(llvm::ValueSymbolTable **)(v93 + 104);
        if (v94)
          llvm::ValueSymbolTable::reinsertValue(v94, v81);
      }
    }
    v92 = *v91;
    v80[4] = *v91;
    v80[5] = v91;
    *(_QWORD *)(v92 + 8) = v82;
    *v91 = (uint64_t)v82;
  }
  *((_DWORD *)v80 + 17) = 2;
  llvm::Value::setName((uint64_t ***)v81, (uint64_t)&v95);
  v83 = *((unsigned int *)v80 + 17);
  v84 = operator new(40 * v83);
  *v80 = v84;
  if ((_DWORD)v83)
  {
    v85 = &v84[4 * v83];
    do
    {
      *v84 = 0;
      v84[1] = 0;
      v84[2] = 0;
      v84[3] = v81;
      v84 += 4;
    }
    while (v84 != v85);
  }
  sub_1C477667C(v81, *(_QWORD *)(*((_QWORD *)this + 88) + 64), v2);
  v86 = llvm::ConstantInt::get(v73, 0, 0);
  sub_1C477667C(v81, (uint64_t)v86, *(_QWORD *)(*((_QWORD *)this + 88) + 24));
  llvm::InnerLoopVectorizer::createInductionResumeValues((uint64_t)this, (llvm::BasicBlock *)v2, *(llvm::CastInst **)(*((_QWORD *)this + 88) + 64));
  v88 = llvm::InnerLoopVectorizer::completeLoopSkeleton(this, v87);
  if (v97 != v99)
    free(v97);
  return v88;
}

void llvm::LoopVectorizationPlanner::getDecisionAndClampRange(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;

  v13 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v5 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(_QWORD *)v3 + 48))(v3, &v13);
    v6 = *(_QWORD *)a2;
    v7 = *(_QWORD *)a2 & 0xFFFFFFFF00000000;
    while (1)
    {
      v8 = *(_DWORD *)(a2 + 12) != 1 && v7 == 0x100000000;
      v6 = (2 * v6);
      if (v8 || v6 >= *(_DWORD *)(a2 + 8))
        break;
      v13 = v7 | v6;
      v10 = *(_QWORD *)(a1 + 24);
      if (!v10)
        goto LABEL_14;
      if (v5 != (*(unsigned int (**)(uint64_t, unint64_t *))(*(_QWORD *)v10 + 48))(v10, &v13))
      {
        *(_QWORD *)(a2 + 8) = v7 | v6;
        return;
      }
    }
  }
  else
  {
LABEL_14:
    sub_1C485C2F0();
    sub_1C607C498(v11, v12);
  }
}

void sub_1C607C498(uint64_t a1, char *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v11;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v8 = v4 + 1;
    v9 = v5 + 8 * v4;
    if (v5 <= (unint64_t)a2 && v9 > (unint64_t)a2)
    {
      v11 = &a2[-v5];
      sub_1C63DDAB0(a1, v8);
      v5 = *(_QWORD *)a1;
      a2 = &v11[*(_QWORD *)a1];
    }
    else
    {
      sub_1C63DDAB0(a1, v8);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(v5 + 8 * v6) = v7;
  *(_DWORD *)(a1 + 8) = v6 + 1;
}

void llvm::LoopVectorizationPlanner::buildVPlan(__int128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::VPlan *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  BOOL v11;
  const llvm::Loop *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  llvm::ConstantInt *v26;
  unsigned __int8 *v27;
  __int128 *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34[8];
  __int128 v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[2];
  int v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v6 = (llvm::VPlan *)operator new();
  v7 = sub_1C608D1FC((uint64_t)v6, 0);
  *a3 = v7;
  v35 = *a1;
  v36 = v7;
  v37 = &v39;
  v38 = 0x100000000;
  v45 = 0;
  v40[0] = 0;
  v40[1] = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  llvm::VPlanHCFGBuilder::buildHierarchicalCFG((const llvm::VPRegionBlock ***)&v35);
  v8 = *a2;
  v9 = *a2 & 0xFFFFFFFF00000000;
  v10 = *((_DWORD *)a2 + 3) != 1 && v9 == 0x100000000;
  if (!v10 && *((_DWORD *)a2 + 2) > v8)
  {
    do
    {
      v29 = (uint64_t *)(v9 | v8);
      sub_1C63DBD00((uint64_t)v6 + 8, (int *)&v29);
      v11 = *((_DWORD *)a2 + 3) != 1 && v9 == 0x100000000;
      LODWORD(v8) = 2 * v8;
    }
    while (!v11 && v8 < *((_DWORD *)a2 + 2));
  }
  if (byte_1ED838AD8)
  {
    llvm::VPlanPredicator::VPlanPredicator((llvm::VPlanPredicator *)&v29, v6);
    llvm::VPlanPredicator::predicate((llvm::VPlanPredicator *)&v29);
    sub_1C4DC4E38(v34);
    v21 = (uint64_t *)v31;
    v22 = &v33;
  }
  else
  {
    v29 = &v33;
    v30 = &v33;
    v31 = 1;
    v32 = 0;
    v13 = *(const llvm::Loop **)a1;
    v28 = a1;
    llvm::VPlanTransforms::VPInstructionsToVPRecipes(v13, a3, (uint64_t (*)(uint64_t, void (**)(llvm::VPValue *__hidden)))sub_1C608D7A8, (uint64_t)&v28, &v29, *(_QWORD *)(*((_QWORD *)a1 + 7) + 88));
    v14 = *(_QWORD *)*a3;
    if (!v14 || (v15 = *(unsigned __int8 *)(v14 + 8), v15 != 1))
    {
      v14 = **(_QWORD **)(v14 + 72);
      v15 = *(unsigned __int8 *)(v14 + 8) == 1;
    }
    v16 = v14;
    v17 = v14;
    if (v15)
    {
      v16 = v14;
      do
      {
        v16 = *(_QWORD *)(v16 + 200);
        if (v16)
          v18 = *(_BYTE *)(v16 + 8) == 1;
        else
          v18 = 0;
      }
      while (v18);
      v17 = v14;
      do
      {
        v17 = *(_QWORD *)(v17 + 208);
        if (v17)
          v19 = *(_BYTE *)(v17 + 8) == 1;
        else
          v19 = 0;
      }
      while (v19);
    }
    if (*(_DWORD *)(v17 + 56) == 1)
      v20 = **(_QWORD **)(v17 + 48);
    else
      v20 = 0;
    if (*(_DWORD *)(v16 + 80) == 1)
      v23 = **(_QWORD **)(v16 + 72);
    else
      v23 = 0;
    *(_QWORD *)(v16 + 40) = *(_QWORD *)(v14 + 40);
    sub_1C63D62F0(v16, v23);
    sub_1C63D64B0((_DWORD *)v16, v14);
    v24 = (_QWORD *)*a3;
    *v24 = v16;
    *(_QWORD *)(v16 + 192) = v24;
    sub_1C63D62F0(v20, v23);
    sub_1C63D62F0(v20, v17);
    *(_QWORD *)(v14 + 200) = v23;
    *(_QWORD *)(v23 + 40) = v14;
    *(_QWORD *)(v14 + 208) = v20;
    *(_QWORD *)(v20 + 40) = v14;
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v25 = (uint64_t *)*a3;
    v26 = *(llvm::ConstantInt **)(*((_QWORD *)a1 + 4) + 384);
    v27 = 0;
    sub_1C6080358(v25, v26, &v27, 1, 1);
    v22 = v29;
    v21 = v30;
  }
  if (v21 != v22)
    free(v21);
  sub_1C4DC4E38(v40);
  if (v37 != &v39)
    free(v37);
}

_QWORD *llvm::VPRecipeBuilder::createBlockInMask(uint64_t a1, llvm::LoopAccessInfo *a2, uint64_t *a3)
{
  uint64_t v6;
  llvm::DominatorTree *v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  BOOL v20;
  uint64_t EdgeMask;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *i;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  char v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  __int128 v49;
  unsigned __int8 *v50;
  llvm::LoopAccessInfo *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v51 = a2;
  v52 = 0;
  v6 = a1 + 72;
  if (sub_1C6144BDC(*(_QWORD *)(a1 + 72), *(_DWORD *)(a1 + 88), (uint64_t)a2, &v52))
    v8 = v52 == *(_QWORD *)v6 + 16 * *(unsigned int *)(v6 + 16);
  else
    v8 = 1;
  if (!v8)
    return *(_QWORD **)(v52 + 8);
  if (**(llvm::LoopAccessInfo ***)(*(_QWORD *)a1 + 32) != a2)
  {
    v15 = *((_QWORD *)a2 + 1);
    if (v15)
    {
      while (1)
      {
        v16 = *(_QWORD *)(v15 + 24);
        v17 = *(unsigned __int8 *)(v16 + 16);
        v18 = v16 && v17 >= 0x1C;
        if (v18 && v17 - 29 < 0xB)
          break;
        v15 = *(_QWORD *)(v15 + 8);
        if (!v15)
          goto LABEL_26;
      }
      EdgeMask = llvm::VPRecipeBuilder::createEdgeMask((uint64_t *)a1, *(_QWORD *)(v16 + 40), (uint64_t)a2, a3);
      if (!EdgeMask)
        goto LABEL_36;
      v43 = EdgeMask;
      v9 = 0;
LABEL_61:
      if (v9)
      {
        v44 = *(uint64_t **)(a1 + 40);
        v50 = 0;
        v9 = sub_1C63D5B58(v44, (uint64_t)v9, v43, &v50);
        if (v50)
          llvm::MetadataTracking::untrack((uint64_t)&v50, v50);
      }
      else
      {
        v9 = (_QWORD *)v43;
      }
      while (1)
      {
        v15 = *(_QWORD *)(v15 + 8);
        if (!v15)
          break;
        v45 = *(_QWORD *)(v15 + 24);
        v46 = *(unsigned __int8 *)(v45 + 16);
        if (v45)
          v47 = v46 >= 0x1C;
        else
          v47 = 0;
        if (v47 && v46 - 29 <= 0xA)
        {
          v43 = llvm::VPRecipeBuilder::createEdgeMask((uint64_t *)a1, *(_QWORD *)(v45 + 40), (uint64_t)v51, a3);
          if (v43)
            goto LABEL_61;
          goto LABEL_36;
        }
      }
    }
    else
    {
LABEL_26:
      v9 = 0;
    }
    sub_1C6180A54(v6, (uint64_t *)&v51)[1] = v9;
    return v9;
  }
  v11 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v11 + 124)
    && !llvm::LoopAccessInfo::blockNeedsPredication(a2, **(llvm::BasicBlock ***)(v11 + 608), *(llvm::Loop **)(*(_QWORD *)(v11 + 608) + 40), v7))
  {
LABEL_36:
    v9 = 0;
    sub_1C6180A54(v6, (uint64_t *)&v51)[1] = 0;
    return v9;
  }
  v12 = *(_QWORD *)*a3;
  if (v12)
    v13 = *(_BYTE *)(v12 + 8) == 1;
  else
    v13 = 0;
  if (v13)
  {
    v14 = 1;
LABEL_29:
    if (v14)
    {
      do
      {
        v12 = *(_QWORD *)(v12 + 200);
        if (v12)
          v20 = *(_BYTE *)(v12 + 8) == 1;
        else
          v20 = 0;
      }
      while (v20);
    }
    goto LABEL_38;
  }
  if (*(_DWORD *)(v12 + 80) == 1)
  {
    v12 = **(_QWORD **)(v12 + 72);
    v14 = *(unsigned __int8 *)(v12 + 8) == 1;
    goto LABEL_29;
  }
  v12 = 0;
LABEL_38:
  v22 = (uint64_t *)(v12 + 200);
  v23 = (uint64_t *)(v12 + 200);
  if (*(_QWORD *)(v12 + 208) != v12 + 200)
  {
    v23 = *(uint64_t **)(v12 + 208);
    while (1)
    {
      v24 = v23 - 3;
      if (!v23)
        v24 = 0;
      if (*((unsigned __int8 *)v24 + 8) - 13 > 7)
        break;
      v23 = (uint64_t *)v23[1];
      if (v23 == v22)
      {
        v23 = (uint64_t *)(v12 + 200);
        break;
      }
    }
  }
  v25 = operator new();
  v26 = sub_1C607CC58((uint64_t *)*a3);
  v27 = v26 + 96;
  if (!v26)
    v27 = 0;
  v52 = v27;
  sub_1C6089380(v25, 8, &v52, 1);
  *(_QWORD *)v25 = &unk_1E81ADB48;
  *(_QWORD *)(v25 + 40) = &unk_1E81ADB88;
  *(_QWORD *)(v25 + 96) = &off_1E81ADA28;
  v28 = v25 + 96;
  *(_BYTE *)(v25 + 104) = 7;
  *(_QWORD *)(v25 + 112) = v25 + 128;
  *(_QWORD *)(v25 + 120) = 0x100000000;
  *(_QWORD *)(v25 + 136) = 0;
  *(_QWORD *)(v25 + 144) = v25;
  sub_1C619116C(v25 + 16, v25 + 96);
  *(_QWORD *)v25 = &unk_1E81ADB48;
  *(_QWORD *)(v25 + 40) = &unk_1E81ADB88;
  *(_QWORD *)(v25 + 96) = &unk_1E81ADBA8;
  for (i = *(uint64_t **)(v12 + 208); i != v22; i = (uint64_t *)i[1])
  {
    v30 = i - 3;
    if (!i)
      v30 = 0;
    if (*((unsigned __int8 *)v30 + 8) - 13 > 7)
    {
      v22 = i;
      break;
    }
  }
  v31 = *v22;
  *(_QWORD *)(v25 + 24) = *v22;
  v32 = v25 + 24;
  *(_QWORD *)(v32 + 64) = v12;
  *(_QWORD *)(v32 + 8) = v22;
  *(_QWORD *)(v31 + 8) = v32;
  *v22 = v32;
  v33 = *(__int128 **)(a1 + 40);
  v49 = *v33;
  *(_QWORD *)v33 = v12;
  *((_QWORD *)v33 + 1) = v23;
  v34 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 616);
  v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 216))(v34);
  v36 = *a3;
  if (v35)
  {
    sub_1C63D59C4(v36);
    v37 = *(uint64_t **)(a1 + 40);
    v52 = v28;
    v53 = v38;
    v39 = v37;
    v40 = 74;
  }
  else
  {
    sub_1C63D5AEC(v36);
    v41 = *(uint64_t **)(a1 + 40);
    v52 = v28;
    v53 = v42;
    v39 = v41;
    v40 = 71;
  }
  v9 = sub_1C63D5A30(v39, v40, &v52, 2, 0);
  sub_1C6180A54(v6, (uint64_t *)&v51)[1] = v9;
  if ((_QWORD)v49)
  {
    *v33 = v49;
  }
  else
  {
    *(_QWORD *)v33 = 0;
    *((_QWORD *)v33 + 1) = 0;
  }
  return v9;
}

uint64_t sub_1C607CC58(uint64_t *a1)
{
  uint64_t v1;
  BOOL v2;
  BOOL v3;
  uint64_t v4;

  v1 = *a1;
  if (*a1)
    v2 = *(_BYTE *)(*a1 + 8) == 1;
  else
    v2 = 0;
  if (v2)
    goto LABEL_7;
  if (*(_DWORD *)(v1 + 80) == 1)
  {
    v1 = **(_QWORD **)(v1 + 72);
    if (*(_BYTE *)(v1 + 8) == 1)
    {
      do
      {
LABEL_7:
        v1 = *(_QWORD *)(v1 + 200);
        if (v1)
          v3 = *(_BYTE *)(v1 + 8) == 1;
        else
          v3 = 0;
      }
      while (v3);
    }
  }
  else
  {
    v1 = 0;
  }
  if (*(_QWORD *)(v1 + 200) == v1 + 200)
    v1 = **(_QWORD **)(v1 + 72);
  v4 = *(_QWORD *)(v1 + 208);
  if (v4)
    return v4 - 24;
  else
    return 0;
}

uint64_t llvm::VPRecipeBuilder::tryToWidenMemory(uint64_t a1, uint64_t a2, int8x16_t *a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  int v10;
  int v11;
  void (**v12)(void);
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *BlockInMask;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  BOOL v26;
  _DWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  int8x16_t v30;
  uint64_t *v31;
  int8x16_t *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v29 = a2;
  v30.i64[0] = (uint64_t)&off_1E81AD038;
  v30.i64[1] = a1;
  v31 = &v29;
  v32 = &v30;
  llvm::LoopVectorizationPlanner::getDecisionAndClampRange((uint64_t)&v30, (uint64_t)a5);
  v11 = v10;
  if (v32 == &v30)
  {
    v12 = (void (**)(void))(v30.i64[0] + 32);
  }
  else
  {
    if (!v32)
      goto LABEL_6;
    v12 = (void (**)(void))(v32->i64[0] + 40);
  }
  (*v12)();
LABEL_6:
  if (!v11)
    return 0;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = sub_1C477672C(v15 + 488, v29);
  v17 = *(_QWORD *)(v15 + 496);
  v18 = 504;
  if (v17 == *(_QWORD *)(v15 + 488))
    v18 = 508;
  if (v16 == (_QWORD *)(v17 + 8 * *(unsigned int *)(v15 + v18)))
    BlockInMask = 0;
  else
    BlockInMask = llvm::VPRecipeBuilder::createBlockInMask(a1, *(llvm::LoopAccessInfo **)(v29 + 40), a6);
  v20 = sub_1C63D46C0(*(_QWORD *)(a1 + 24), v29, *a5);
  v21 = v20 - 1;
  v22 = v29;
  v23 = *(unsigned __int8 *)(v29 + 16);
  v24 = operator new();
  v13 = v24;
  if (v22 && v23 == 60)
  {
    v25 = v21 < 2;
    v26 = v20 == 2;
    v30.i64[0] = a3->i64[0];
    sub_1C6089380(v24, 10, v30.i64, 1);
    *(_QWORD *)v13 = &off_1E81AD2F8;
    *(_QWORD *)(v13 + 40) = &unk_1E81AD338;
    v27 = (_DWORD *)(v13 + 40);
    *(_QWORD *)(v13 + 96) = &off_1E81ADA28;
    v28 = (_QWORD *)(v13 + 96);
    *(_BYTE *)(v13 + 104) = 2;
    *(_QWORD *)(v13 + 112) = v13 + 128;
    *(_QWORD *)(v13 + 120) = 0x100000000;
    *(_QWORD *)(v13 + 136) = v22;
    *(_QWORD *)(v13 + 144) = v13;
    sub_1C619116C(v13 + 16, v13 + 96);
    *(_QWORD *)v13 = &off_1E81AD2F8;
    *(_QWORD *)(v13 + 40) = &unk_1E81AD338;
  }
  else
  {
    v25 = v21 < 2;
    v26 = v20 == 2;
    v30 = vextq_s8(*a3, *a3, 8uLL);
    sub_1C6089380(v24, 10, v30.i64, 2);
    *(_QWORD *)v13 = &off_1E81AD2F8;
    *(_QWORD *)(v13 + 40) = &unk_1E81AD338;
    v27 = (_DWORD *)(v13 + 40);
    *(_QWORD *)(v13 + 96) = &off_1E81ADA28;
    v28 = (_QWORD *)(v13 + 96);
    *(_BYTE *)(v13 + 104) = 2;
    *(_QWORD *)(v13 + 112) = v13 + 128;
    *(_QWORD *)(v13 + 120) = 0x100000000;
    *(_QWORD *)(v13 + 136) = v22;
    *(_QWORD *)(v13 + 144) = v13;
    sub_1C619116C(v13 + 16, v13 + 96);
    *(_QWORD *)v13 = &off_1E81AD2F8;
    *(_QWORD *)(v13 + 40) = &unk_1E81AD338;
  }
  *v28 = &unk_1E81AD358;
  *(_QWORD *)(v13 + 152) = v22;
  *(_BYTE *)(v13 + 160) = v25;
  *(_BYTE *)(v13 + 161) = v26;
  if (BlockInMask)
    sub_1C63D6200(v27, (uint64_t)BlockInMask);
  return v13;
}

uint64_t sub_1C607CFB0(uint64_t a1, uint64_t a2, uint64_t (**a3)(), uint64_t a4, uint64_t a5, llvm::vputils *a6, const llvm::SCEV *a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v15;
  char v16;
  llvm::ScalarEvolution *v17;
  char v18;
  char v19;
  uint64_t (***v20)();
  void (**v21)(uint64_t (***)());
  uint64_t VPValueForSCEVExpr;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (**v31)();
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v29 = a5;
  v30 = a2;
  v15 = (uint64_t *)operator new(0x20uLL);
  *v15 = (uint64_t)&off_1E81ACF18;
  v15[1] = (uint64_t)&v29;
  v15[2] = (uint64_t)&v30;
  v15[3] = a8;
  v34 = v15;
  llvm::LoopVectorizationPlanner::getDecisionAndClampRange((uint64_t)&v31, a9);
  v28 = v16;
  (*(void (**)(uint64_t *))(*v15 + 40))(v15);
  v31 = &off_1E81ACF60;
  v32 = &v29;
  v33 = &v30;
  v34 = (uint64_t *)&v31;
  llvm::LoopVectorizationPlanner::getDecisionAndClampRange((uint64_t)&v31, a9);
  v19 = v18;
  v20 = (uint64_t (***)())v34;
  if (v34 == (uint64_t *)&v31)
  {
    v21 = (void (**)(uint64_t (***)()))(v31 + 4);
    v20 = &v31;
LABEL_5:
    (*v21)(v20);
    goto LABEL_6;
  }
  if (v34)
  {
    v21 = (void (**)(uint64_t (***)()))(*v34 + 40);
    goto LABEL_5;
  }
LABEL_6:
  VPValueForSCEVExpr = llvm::vputils::getOrCreateVPValueForSCEVExpr(a6, *(llvm::VPlan **)(a4 + 32), a7, v17);
  v23 = v30;
  v24 = *(unsigned __int8 *)(v30 + 16);
  v25 = operator new();
  v26 = v25;
  if (v23 && v24 == 66)
  {
    v31 = a3;
    v32 = (uint64_t *)VPValueForSCEVExpr;
    sub_1C6089380(v25, 17, (uint64_t *)&v31, 2);
  }
  else
  {
    v31 = a3;
    v32 = (uint64_t *)VPValueForSCEVExpr;
    sub_1C6089380(v25, 17, (uint64_t *)&v31, 2);
    v23 = a1;
  }
  *(_QWORD *)v26 = &off_1E81AD278;
  *(_QWORD *)(v26 + 40) = &unk_1E81AD2B8;
  *(_QWORD *)(v26 + 96) = &off_1E81ADA28;
  *(_BYTE *)(v26 + 104) = 0;
  *(_QWORD *)(v26 + 112) = v26 + 128;
  *(_QWORD *)(v26 + 120) = 0x100000000;
  *(_QWORD *)(v26 + 136) = v23;
  *(_QWORD *)(v26 + 144) = v26;
  sub_1C619116C(v26 + 16, v26 + 96);
  *(_QWORD *)v26 = &off_1E81AD278;
  *(_QWORD *)(v26 + 40) = &unk_1E81AD2B8;
  *(_QWORD *)(v26 + 96) = &unk_1E81AD2D8;
  *(_QWORD *)(v26 + 152) = a1;
  *(_QWORD *)(v26 + 160) = a4;
  *(_BYTE *)(v26 + 168) = v28;
  *(_BYTE *)(v26 + 169) = v19 ^ 1;
  return v26;
}

_QWORD *llvm::VPRecipeBuilder::tryToWidenCall(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  char v10;
  char v11;
  void (**v12)(void);
  _QWORD *v13;
  int v14;
  int v18;
  int v19;
  void (**v20)(void);
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (**v32)();
  uint64_t *v33;
  uint64_t v34;
  uint64_t (***v35)();
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v31 = a2;
  v32 = &off_1E81AD080;
  v33 = (uint64_t *)a1;
  v34 = a2;
  v35 = &v32;
  llvm::LoopVectorizationPlanner::getDecisionAndClampRange((uint64_t)&v32, a5);
  v11 = v10;
  if (v35 == &v32)
  {
    v12 = (void (**)(void))(v32 + 4);
  }
  else
  {
    if (!v35)
      goto LABEL_6;
    v12 = (void (**)(void))(*v35 + 5);
  }
  (*v12)();
LABEL_6:
  if ((v11 & 1) != 0)
    return 0;
  v14 = llvm::getVectorIntrinsicIDForCall(a2, *(uint64_t **)(a1 + 8));
  v13 = 0;
  if (v14 > 243)
  {
    if (v14 == 244 || v14 == 272)
      return v13;
  }
  else if ((v14 - 126) <= 0x2A && ((1 << (v14 - 126)) & 0x60000000001) != 0
         || v14 == 7)
  {
    return v13;
  }
  v32 = &off_1E81AD0C8;
  v33 = &v31;
  v34 = a1;
  v35 = &v32;
  llvm::LoopVectorizationPlanner::getDecisionAndClampRange((uint64_t)&v32, a5);
  v19 = v18;
  if (v35 == &v32)
  {
    v20 = (void (**)(void))(v32 + 4);
    goto LABEL_24;
  }
  if (v35)
  {
    v20 = (void (**)(void))(*v35 + 5);
LABEL_24:
    (*v20)();
  }
  if (!v19)
    return 0;
  v21 = *(unsigned __int8 *)(v31 + 16);
  if (v21 == 84)
  {
    v22 = 0;
  }
  else if (v21 == 39)
  {
    v22 = (*(_DWORD *)(v31 + 80) + 1);
  }
  else
  {
    v22 = 2;
  }
  v23 = 0;
  v24 = *(_DWORD *)(v31 + 20);
  v25 = -(uint64_t)(v24 & 0x7FFFFFF);
  if (v24 < 0)
  {
    v29 = v31 - 32 * (v24 & 0x7FFFFFF);
    v30 = *(_QWORD *)(v29 - 8);
    if ((v30 & 0xFFFFFFFF0) != 0)
      v23 = *(_DWORD *)(v29 - 12) - *(_DWORD *)(v29 - v30);
    else
      v23 = 0;
  }
  if (a4 >= ((-32 * v22 + 32 * (unint64_t)-v23 - 32 * v25 - 32) >> 5))
    a4 = ((-32 * v22 + 32 * (unint64_t)-v23 - 32 * v25 - 32) >> 5);
  v13 = (_QWORD *)operator new();
  v26 = v31;
  v27 = sub_1C608CE88((uint64_t)v13, 7, a3, &a3[a4]);
  *(_QWORD *)v27 = &off_1E81AD4C0;
  *(_QWORD *)(v27 + 40) = &unk_1E81AD500;
  *(_QWORD *)(v27 + 96) = &off_1E81ADA28;
  v28 = (_QWORD *)(v27 + 96);
  *(_BYTE *)(v27 + 104) = 6;
  *(_QWORD *)(v27 + 112) = v27 + 128;
  *(_QWORD *)(v27 + 120) = 0x100000000;
  *(_QWORD *)(v27 + 136) = v26;
  *(_QWORD *)(v27 + 144) = v27;
  sub_1C619116C(v27 + 16, v27 + 96);
  *v13 = &off_1E81AD4C0;
  v13[5] = &unk_1E81AD500;
  *v28 = &unk_1E81AD520;
  return v13;
}

_QWORD *llvm::VPRecipeBuilder::tryToWiden(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(unsigned __int8 *)(a2 + 16) - 40;
  v5 = v4 > 0x2D;
  v6 = (1 << v4) & 0x263FFC07FFFFLL;
  if (v5 || v6 == 0)
    return 0;
  v11 = (_QWORD *)operator new();
  v12 = sub_1C608CE88((uint64_t)v11, 11, a3, &a3[a4]);
  *(_QWORD *)v12 = &off_1E81AD5C0;
  *(_QWORD *)(v12 + 40) = &unk_1E81AD600;
  *(_QWORD *)(v12 + 96) = &off_1E81ADA28;
  v13 = (_QWORD *)(v12 + 96);
  *(_BYTE *)(v12 + 104) = 5;
  *(_QWORD *)(v12 + 112) = v12 + 128;
  *(_QWORD *)(v12 + 120) = 0x100000000;
  *(_QWORD *)(v12 + 136) = a2;
  *(_QWORD *)(v12 + 144) = v12;
  sub_1C619116C(v12 + 16, v12 + 96);
  *v11 = &off_1E81AD5C0;
  v11[5] = &unk_1E81AD600;
  *v13 = &unk_1E81AD620;
  return v11;
}

uint64_t llvm::VPRecipeBuilder::handleReplication(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  char v9;
  char v10;
  _QWORD *v11;
  void (**v12)(_QWORD *);
  _QWORD *v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t ReplicateRegion;
  _QWORD *v34;
  char v35;
  uint64_t v36;
  _QWORD v37[3];
  _QWORD *v38;
  __int16 v39;
  _QWORD v40[11];

  v40[10] = *MEMORY[0x1E0C80C00];
  v36 = a2;
  v37[0] = &off_1E81AD158;
  v37[1] = a1;
  v37[2] = &v36;
  v38 = v37;
  llvm::LoopVectorizationPlanner::getDecisionAndClampRange((uint64_t)v37, a3);
  v10 = v9;
  v11 = v38;
  if (v38 == v37)
  {
    v12 = (void (**)(_QWORD *))(v37[0] + 32);
    v11 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_6;
    v12 = (void (**)(_QWORD *))(*v38 + 40);
  }
  (*v12)(v11);
LABEL_6:
  v35 = v10;
  v13 = operator new(0x20uLL);
  *v13 = &off_1E81AD1A0;
  v13[1] = a1;
  v13[2] = &v36;
  v13[3] = &v35;
  v38 = v13;
  llvm::LoopVectorizationPlanner::getDecisionAndClampRange((uint64_t)v37, a3);
  v15 = v14;
  (*(void (**)(_QWORD *))(*v13 + 40))(v13);
  if (!v35 && *(_DWORD *)(a3 + 4) == 1 && *(_BYTE *)(v36 + 16) == 84)
  {
    v16 = *(_QWORD *)(v36 - 32);
    if (v16)
    {
      if (!*(_BYTE *)(v16 + 16) && *(_QWORD *)(v16 + 24) == *(_QWORD *)(v36 + 72) && (*(_BYTE *)(v16 + 33) & 0x20) != 0)
      {
        v17 = *(_DWORD *)(v16 + 36);
        if ((v17 - 167) < 2 || v17 == 7)
          v35 = 1;
      }
    }
  }
  v19 = operator new();
  v20 = v36;
  v21 = *(_DWORD *)(v36 + 20);
  if ((v21 & 0x40000000) != 0)
  {
    v23 = *(_QWORD *)(v36 - 8);
    v22 = v21 & 0x7FFFFFF;
  }
  else
  {
    v22 = v21 & 0x7FFFFFF;
    v23 = v36 - 32 * v22;
  }
  sub_1C607D890(*a5, v23, v23 + 32 * v22, v40);
  sub_1C63DDB90(v19, v20, v40, v35, v15);
  sub_1C63DB9C0(v40);
  sub_1C63D6298(a1, v36, v19);
  v24 = *a5;
  v37[0] = v36;
  sub_1C61B6040((uint64_t *)(v24 + 184), v37)[1] = v19 + 96;
  v25 = *(unsigned int *)(v19 + 56);
  if ((_DWORD)v25)
  {
    v26 = *(_QWORD *)(v19 + 48);
    v27 = 8 * v25;
    do
    {
      v28 = *(_QWORD *)(*(_QWORD *)v26 + 48);
      if (v28 && *(_BYTE *)(v28 + 8) == 19)
        *(_BYTE *)(*(_QWORD *)(**(_QWORD **)(v28 + 48) + 48) + 154) = 0;
      v26 += 8;
      v27 -= 8;
    }
    while (v27);
  }
  if ((v15 & 1) != 0)
  {
    if (*(_DWORD *)(a4 + 80) == 1)
      v32 = **(_QWORD **)(a4 + 72);
    else
      v32 = 0;
    sub_1C63D62F0(a4, v32);
    ReplicateRegion = llvm::VPRecipeBuilder::createReplicateRegion(a1, v36, v19, a5);
    sub_1C63D63A8(ReplicateRegion, a4);
    a4 = operator new();
    v39 = 257;
    v34 = sub_1C6089974((_QWORD *)a4, (llvm::Twine *)v37, 0);
    sub_1C63D63A8((uint64_t)v34, ReplicateRegion);
    sub_1C63D64B0((_DWORD *)a4, v32);
  }
  else
  {
    v29 = *(_QWORD *)(a4 + 200);
    *(_QWORD *)(v19 + 24) = v29;
    v30 = v19 + 24;
    *(_QWORD *)(v30 + 64) = a4;
    *(_QWORD *)(v30 + 8) = a4 + 200;
    *(_QWORD *)(v29 + 8) = v30;
    *(_QWORD *)(a4 + 200) = v30;
  }
  return a4;
}

uint64_t sub_1C607D890@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  void (**v4)(void);
  uint64_t result;
  uint64_t (**v6)(void);
  uint64_t v7[2];
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7[0] = a2;
  v7[1] = a3;
  v10[0] = &off_1E81AD378;
  v10[1] = a1;
  v11 = v10;
  v9 = v8;
  v8[0] = &off_1E81AD378;
  v8[1] = a1;
  sub_1C63DB42C(v7, v8, a4);
  if (v9 == v8)
  {
    v4 = (void (**)(void))(v8[0] + 32);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v4 = (void (**)(void))(*v9 + 40);
  }
  (*v4)();
LABEL_6:
  result = (uint64_t)v11;
  if (v11 == v10)
  {
    v6 = (uint64_t (**)(void))(v10[0] + 32);
  }
  else
  {
    if (!v11)
      return result;
    v6 = (uint64_t (**)(void))(*v11 + 40);
  }
  return (*v6)();
}

uint64_t llvm::VPRecipeBuilder::createReplicateRegion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *BlockInMask;
  const char *OpcodeName;
  __int16 v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20[2];
  const char *v21;
  __int16 v22;
  void *__p[2];
  char v24;
  uint64_t v25;

  BlockInMask = llvm::VPRecipeBuilder::createBlockInMask(a1, *(llvm::LoopAccessInfo **)(a2 + 40), a4);
  OpcodeName = llvm::Instruction::getOpcodeName((llvm::Instruction *)(*(unsigned __int8 *)(a2 + 16) - 28));
  if (*OpcodeName)
  {
    v20[0] = (uint64_t)"pred.";
    v21 = OpcodeName;
    v9 = 771;
  }
  else
  {
    v20[0] = (uint64_t)"pred.";
    v9 = 259;
  }
  v22 = v9;
  llvm::Twine::str((llvm::Twine *)v20, __p);
  v10 = operator new();
  *(_QWORD *)(v10 + 40) = &unk_1E81ACB88;
  *(_BYTE *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 48) = v10 + 64;
  *(_QWORD *)(v10 + 56) = 0x200000000;
  *(_DWORD *)(v10 + 80) = 0;
  *(_QWORD *)(v10 + 88) = 0;
  *(_QWORD *)v10 = &off_1E81ACB48;
  if (BlockInMask)
    sub_1C63D6200((_DWORD *)(v10 + 40), (uint64_t)BlockInMask);
  v11 = (_QWORD *)operator new();
  v20[0] = (uint64_t)__p;
  v21 = ".entry";
  v22 = 772;
  sub_1C6089974(v11, (llvm::Twine *)v20, v10);
  if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 7)
  {
    v12 = 0;
  }
  else
  {
    v12 = operator new();
    v20[0] = sub_1C63D5810(*a4, a2);
    sub_1C6089380(v12, 19, v20, 1);
    *(_QWORD *)v12 = &off_1E81ACBA8;
    *(_QWORD *)(v12 + 40) = &unk_1E81ACBE8;
    *(_QWORD *)(v12 + 96) = &off_1E81ADA28;
    *(_BYTE *)(v12 + 104) = 16;
    *(_QWORD *)(v12 + 112) = v12 + 128;
    *(_QWORD *)(v12 + 120) = 0x100000000;
    *(_QWORD *)(v12 + 136) = 0;
    *(_QWORD *)(v12 + 144) = v12;
    sub_1C619116C(v12 + 16, v12 + 96);
    *(_QWORD *)v12 = &off_1E81ACBA8;
    *(_QWORD *)(v12 + 40) = &unk_1E81ACBE8;
    *(_QWORD *)(v12 + 96) = &unk_1E81ACC08;
    v13 = *a4;
    v25 = a2;
    v20[0] = 0;
    if (sub_1C61252B8((uint64_t *)(v13 + 184), &v25, v20))
    {
      *(_QWORD *)v20[0] = -8192;
      *(int32x2_t *)(v13 + 192) = vadd_s32(*(int32x2_t *)(v13 + 192), (int32x2_t)0x1FFFFFFFFLL);
    }
    v14 = *a4;
    v20[0] = a2;
    sub_1C61B6040((uint64_t *)(v14 + 184), v20)[1] = v12 + 96;
  }
  v15 = (_QWORD *)operator new();
  v20[0] = (uint64_t)__p;
  v21 = ".continue";
  v22 = 772;
  sub_1C6089974(v15, (llvm::Twine *)v20, v12);
  v16 = (_QWORD *)operator new();
  v20[0] = (uint64_t)__p;
  v21 = ".if";
  v22 = 772;
  sub_1C6089974(v16, (llvm::Twine *)v20, a3);
  v17 = operator new();
  v18 = sub_1C60899F8(v17, 1, (__int128 *)__p);
  *(_QWORD *)v18 = &off_1E81ADC00;
  *(_QWORD *)(v18 + 200) = v11;
  *(_QWORD *)(v18 + 208) = v15;
  *(_BYTE *)(v18 + 216) = 1;
  v11[5] = v18;
  v15[5] = v18;
  sub_1C63D6548((uint64_t)v16, (uint64_t)v15, (uint64_t)BlockInMask, (uint64_t)v11);
  sub_1C63D64B0(v16, (uint64_t)v15);
  if (v24 < 0)
    operator delete(__p[0]);
  return v17;
}

uint64_t llvm::VPRecipeBuilder::tryToCreateWidenRecipe(uint64_t a1, uint64_t a2, int8x16_t *a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  int v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t shouldWiden;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  _BOOL4 isLoopInvariant;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD ***v40;
  int32x2_t *v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD ***v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int8x16_t *v55;
  llvm::ScalarEvolution *v56;
  const llvm::SCEV *SCEV;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t LoopLatch;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  _QWORD ***v81;
  void *v82;
  _QWORD v83[3];

  v83[2] = *MEMORY[0x1E0C80C00];
  v12 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v12 == 84)
  {
    v13 = (uint64_t)llvm::VPRecipeBuilder::tryToWidenCall(a1, a2, a3->i64, a4, (uint64_t)a5);
    return v13 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if ((v12 & 0xFE) == 0x3C)
  {
    v13 = llvm::VPRecipeBuilder::tryToWidenMemory(a1, a2, a3, a4, a5, a6);
    return v13 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (a2 && v12 == 83)
  {
    if (*(_QWORD *)(a2 + 40) == **(_QWORD **)(*(_QWORD *)a1 + 32))
    {
      v79 = a2;
      sub_1C6180A54(a1 + 96, &v79)[1] = 0;
      v13 = llvm::VPRecipeBuilder::tryToOptimizeInductionPHI(a1, (llvm::PHINode *)a2, (uint64_t (***)())a3, a4, (llvm::vputils *)*a6, (uint64_t)a5);
      if (v13)
        return v13 & 0xFFFFFFFFFFFFFFFBLL;
      v15 = *(_QWORD *)(a1 + 16);
      v78 = 0;
      v79 = a2;
      if (sub_1C61252B8((uint64_t *)(v15 + 80), &v79, &v78))
      {
        v16 = v78;
        v17 = *(_QWORD *)(v15 + 80);
        v18 = *(unsigned int *)(v15 + 96);
      }
      else
      {
        v17 = *(_QWORD *)(v15 + 80);
        v18 = *(unsigned int *)(v15 + 96);
        v16 = v17 + 16 * v18;
      }
      if (v16 != v17 + 16 * v18)
        goto LABEL_49;
      v33 = *(_QWORD *)(a1 + 16);
      v34 = sub_1C477672C(v33 + 240, a2);
      v35 = *(_QWORD *)(v33 + 248);
      v36 = 256;
      if (v35 == *(_QWORD *)(v33 + 240))
        v36 = 260;
      if (v34 == (_QWORD *)(v35 + 8 * *(unsigned int *)(v33 + v36)))
      {
        sub_1C63D65F4((uint64_t)&v79, *(_QWORD *)(a1 + 16) + 128, a2);
        v37 = sub_1C63D5810(*a6, (uint64_t)v81);
        v38 = operator new();
        sub_1C63DBBB0(v38, a2, v37);
        if (v82 != v83)
          free(v82);
        if (v81 && v81 != (_QWORD ***)-8192 && v81 != (_QWORD ***)-4096)
        {
          v39 = v79 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v79 & 0xFFFFFFFFFFFFFFF8) = v80;
          if (v80)
          {
            *v80 = *v80 & 7 | v39;
          }
          else
          {
            v40 = v81;
            v41 = (int32x2_t *)***v81;
            v42 = (unint64_t)v41[303];
            if (v42 <= v39)
            {
              v43 = v41[305].u32[0];
              if (v42 + 16 * v43 > v39)
              {
                v44 = v43 - 1;
                LODWORD(v45) = v44 & ((v81 >> 4) ^ (v81 >> 9));
                v46 = (_QWORD *)(v42 + 16 * v45);
                v47 = (_QWORD ***)*v46;
                if (v81 == (_QWORD ***)*v46)
                {
LABEL_47:
                  *v46 = -8192;
                  v41[304] = vadd_s32(v41[304], (int32x2_t)0x1FFFFFFFFLL);
                  v40 = v81;
                }
                else
                {
                  v48 = 1;
                  while (v47 != (_QWORD ***)-4096)
                  {
                    v49 = v45 + v48++;
                    v45 = v49 & v44;
                    v47 = *(_QWORD ****)(v42 + 16 * v45);
                    if (v81 == v47)
                    {
                      v46 = (_QWORD *)(v42 + 16 * v45);
                      goto LABEL_47;
                    }
                  }
                }
                *((_BYTE *)v40 + 17) &= ~1u;
              }
            }
          }
        }
      }
      else
      {
LABEL_49:
        v50 = a3->i64[0];
        v51 = *(_QWORD *)(a1 + 16);
        v78 = 0;
        v79 = a2;
        if (sub_1C61252B8((uint64_t *)(v51 + 80), &v79, &v78))
        {
          v52 = v78;
          v53 = *(_QWORD *)(v51 + 80);
          v54 = *(unsigned int *)(v51 + 96);
        }
        else
        {
          v53 = *(_QWORD *)(v51 + 80);
          v54 = *(unsigned int *)(v51 + 96);
          v52 = v53 + 16 * v54;
        }
        if (v52 == v53 + 16 * v54)
        {
          v38 = operator new();
          *(_BYTE *)(v38 + 8) = 15;
          *(_QWORD *)(v38 + 24) = 0;
          *(_QWORD *)(v38 + 32) = 0;
          *(_QWORD *)(v38 + 16) = 0;
          *(_QWORD *)(v38 + 48) = v38 + 64;
          *(_QWORD *)(v38 + 56) = 0x200000000;
          *(_DWORD *)(v38 + 80) = 0;
          *(_QWORD *)(v38 + 88) = 0;
          *(_QWORD *)v38 = &unk_1E81AD7B8;
          *(_QWORD *)(v38 + 40) = &unk_1E81AD7F8;
          *(_QWORD *)(v38 + 96) = &off_1E81ADA28;
          *(_BYTE *)(v38 + 104) = 12;
          *(_QWORD *)(v38 + 112) = v38 + 128;
          *(_QWORD *)(v38 + 120) = 0x100000000;
          *(_QWORD *)(v38 + 136) = a2;
          *(_QWORD *)(v38 + 144) = v38;
          sub_1C619116C(v38 + 16, v38 + 96);
          *(_QWORD *)v38 = &unk_1E81AD7B8;
          *(_QWORD *)(v38 + 40) = &unk_1E81AD7F8;
          *(_QWORD *)(v38 + 96) = &unk_1E81AD818;
          sub_1C63D6200((_DWORD *)(v38 + 40), v50);
          *(_QWORD *)v38 = &unk_1E81ADCB8;
          *(_QWORD *)(v38 + 40) = &unk_1E81ADCF8;
          *(_QWORD *)(v38 + 96) = &unk_1E81ADD18;
        }
        else
        {
          v61 = sub_1C63D426C(*(_QWORD *)(a1 + 16) + 80, a2);
          v38 = operator new();
          v62 = *(_QWORD *)(a1 + 24);
          v63 = sub_1C63DB3D0(v62 + 224, a2);
          v77 = v50;
          if ((*(_BYTE *)(v62 + 224) & 1) != 0)
          {
            v64 = v62 + 232;
            v65 = 4;
          }
          else
          {
            v64 = *(_QWORD *)(v62 + 232);
            v65 = *(unsigned int *)(v62 + 240);
          }
          v76 = v64 + 16 * v65 != v63;
          v66 = (*(_BYTE *)(v61 + 65) != 0) & ~llvm::LoopVectorizeHints::allowReordering(*(llvm::LoopVectorizeHints **)(*(_QWORD *)(a1 + 24) + 664));
          *(_BYTE *)(v38 + 8) = 20;
          *(_QWORD *)(v38 + 24) = 0;
          *(_QWORD *)(v38 + 32) = 0;
          *(_QWORD *)(v38 + 16) = 0;
          *(_QWORD *)(v38 + 48) = v38 + 64;
          *(_QWORD *)(v38 + 56) = 0x200000000;
          *(_DWORD *)(v38 + 80) = 0;
          *(_QWORD *)(v38 + 88) = 0;
          *(_QWORD *)v38 = &unk_1E81AD7B8;
          *(_QWORD *)(v38 + 40) = &unk_1E81AD7F8;
          *(_QWORD *)(v38 + 96) = &off_1E81ADA28;
          *(_BYTE *)(v38 + 104) = 17;
          *(_QWORD *)(v38 + 112) = v38 + 128;
          *(_QWORD *)(v38 + 120) = 0x100000000;
          *(_QWORD *)(v38 + 136) = a2;
          *(_QWORD *)(v38 + 144) = v38;
          sub_1C619116C(v38 + 16, v38 + 96);
          *(_QWORD *)v38 = &unk_1E81AD7B8;
          *(_QWORD *)(v38 + 40) = &unk_1E81AD7F8;
          *(_QWORD *)(v38 + 96) = &unk_1E81AD818;
          sub_1C63D6200((_DWORD *)(v38 + 40), v77);
          *(_QWORD *)v38 = &unk_1E81ADC38;
          *(_QWORD *)(v38 + 40) = &unk_1E81ADC78;
          *(_QWORD *)(v38 + 96) = &unk_1E81ADC98;
          *(_QWORD *)(v38 + 152) = v61 + 8;
          *(_BYTE *)(v38 + 160) = v76;
          *(_BYTE *)(v38 + 161) = v66;
        }
        LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*(_QWORD *)a1);
        v68 = *(_DWORD *)(a2 + 20);
        v69 = v68 & 0x7FFFFFF;
        if ((v68 & 0x7FFFFFF) != 0)
        {
          v70 = 0;
          while (1)
          {
            v71 = a2 - 32 * v69;
            if ((v68 & 0x40000000) != 0)
              v71 = *(_QWORD *)(a2 - 8);
            if (*(_QWORD *)(v71 + 32 * *(unsigned int *)(a2 + 60) + 8 * v70) == LoopLatch)
              break;
            if (v69 == ++v70)
              goto LABEL_65;
          }
        }
        else
        {
LABEL_65:
          LODWORD(v70) = -1;
        }
        if ((v68 & 0x40000000) != 0)
          v72 = *(_QWORD *)(a2 - 8);
        else
          v72 = a2 - 32 * v69;
        v73 = *(_QWORD *)(v72 + 32 * v70);
        v79 = 0;
        if (sub_1C6144BDC(*(_QWORD *)(a1 + 96), *(_DWORD *)(a1 + 112), v73, &v79))
          v74 = v79 == *(_QWORD *)(a1 + 96) + 16 * *(unsigned int *)(a1 + 112);
        else
          v74 = 1;
        if (v74)
        {
          v79 = v73;
          sub_1C6180A54(a1 + 96, &v79)[1] = 0;
        }
        v75 = *(unsigned int *)(a1 + 128);
        if (v75 >= *(_DWORD *)(a1 + 132))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 120, a1 + 136, v75 + 1, 8);
          LODWORD(v75) = *(_DWORD *)(a1 + 128);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v75) = v38;
        ++*(_DWORD *)(a1 + 128);
      }
      return v38 & 0xFFFFFFFFFFFFFFFBLL;
    }
    else
    {
      return llvm::VPRecipeBuilder::tryToBlend((uint64_t *)a1, a2, a3->i64, a4, a6);
    }
  }
  else
  {
    if (v12 == 66)
    {
      v13 = llvm::VPRecipeBuilder::tryToOptimizeInductionTruncate(a1, a2, (uint64_t)a3, a4, (uint64_t)a5, (llvm::vputils *)*a6);
      if (v13)
        return v13 & 0xFFFFFFFFFFFFFFFBLL;
    }
    shouldWiden = llvm::VPRecipeBuilder::shouldWiden(a1, a2, (uint64_t)a5);
    if ((_DWORD)shouldWiden)
    {
      v20 = *(unsigned __int8 *)(a2 + 16);
      if (a2 && v20 == 62)
      {
        v21 = operator new();
        v22 = *(_QWORD *)a1;
        v23 = sub_1C608CE88(v21, 9, a3->i64, &a3->i64[a4]);
        *(_QWORD *)v23 = &off_1E81AD440;
        *(_QWORD *)(v23 + 40) = &unk_1E81AD480;
        *(_QWORD *)(v23 + 96) = &off_1E81ADA28;
        v24 = (_QWORD *)(v23 + 96);
        *(_BYTE *)(v23 + 104) = 8;
        *(_QWORD *)(v23 + 112) = v23 + 128;
        *(_QWORD *)(v23 + 120) = 0x100000000;
        *(_QWORD *)(v23 + 136) = a2;
        *(_QWORD *)(v23 + 144) = v23;
        sub_1C619116C(v23 + 16, v23 + 96);
        *(_QWORD *)v21 = &off_1E81AD440;
        *(_QWORD *)(v21 + 40) = &unk_1E81AD480;
        *v24 = &unk_1E81AD4A0;
        *(_QWORD *)(v21 + 160) = 1;
        v25 = *(_DWORD *)(a2 + 20);
        v26 = v25 & 0x7FFFFFF;
        v27 = (v25 & 0x7FFFFFFu) - 1;
        if (v27 > 0x39)
        {
          v28 = operator new();
          *(_QWORD *)v28 = v28 + 16;
          *(_QWORD *)(v28 + 8) = 0x600000000;
          sub_1C4765AA4((char *)v28, (unint64_t)(v26 + 62) >> 6, 0);
          *(_DWORD *)(v28 + 64) = v27;
          LODWORD(v26) = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
        }
        else
        {
          v28 = (v27 << 58) | 1;
        }
        *(_QWORD *)(v21 + 160) = v28;
        *(_BYTE *)(v21 + 152) = llvm::Loop::isLoopInvariant(v22, *(_QWORD *)(a2 - 32 * v26));
        v29 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
        if (a2 - 32 * v29 + 32 != a2)
        {
          v30 = 0;
          v31 = 32 - 32 * v29;
          do
          {
            isLoopInvariant = llvm::Loop::isLoopInvariant(v22, *(_QWORD *)(a2 + v31));
            v79 = v21 + 160;
            v80 = (unint64_t *)v30;
            sub_1C496F7C8((uint64_t)&v79, isLoopInvariant);
            ++v30;
            v31 += 32;
          }
          while (v31);
        }
        return v21 & 0xFFFFFFFFFFFFFFFBLL;
      }
      else
      {
        if (!a2 || v20 != 85)
        {
          v13 = (uint64_t)llvm::VPRecipeBuilder::tryToWiden(shouldWiden, a2, a3->i64, a4);
          return v13 & 0xFFFFFFFFFFFFFFFBLL;
        }
        v55 = *(int8x16_t **)(a1 + 32);
        v56 = (llvm::ScalarEvolution *)v55[5].i64[1];
        SCEV = (const llvm::SCEV *)llvm::PredicatedScalarEvolution::getSCEV(v55, *(llvm::Value **)(a2 - 96));
        LOBYTE(v56) = llvm::ScalarEvolution::getLoopDisposition(v56, SCEV, *(const llvm::Loop **)a1) == 1;
        v58 = operator new();
        v59 = sub_1C608CE88(v58, 12, a3->i64, &a3->i64[a4]);
        *(_QWORD *)v59 = &off_1E81AD540;
        *(_QWORD *)(v59 + 40) = &unk_1E81AD580;
        *(_QWORD *)(v59 + 96) = &off_1E81ADA28;
        v60 = (_QWORD *)(v59 + 96);
        *(_BYTE *)(v59 + 104) = 9;
        *(_QWORD *)(v59 + 112) = v59 + 128;
        *(_QWORD *)(v59 + 120) = 0x100000000;
        *(_QWORD *)(v59 + 136) = a2;
        *(_QWORD *)(v59 + 144) = v59;
        sub_1C619116C(v59 + 16, v59 + 96);
        *(_QWORD *)v58 = &off_1E81AD540;
        *(_QWORD *)(v58 + 40) = &unk_1E81AD580;
        *v60 = &unk_1E81AD5A0;
        *(_BYTE *)(v58 + 152) = (_BYTE)v56;
        return v58 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    else
    {
      return 0;
    }
  }
}

void llvm::LoopVectorizationPlanner::buildVPlanWithVPRecipes(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  int v36;
  void (**v37)(void);
  unsigned int v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  llvm::ConstantInt *v54;
  unsigned __int8 *v55;
  uint64_t v56;
  unsigned __int8 *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  llvm::ConstantInt *v63;
  _QWORD *v64;
  uint64_t v65;
  llvm::VPlan *v66;
  _QWORD *v67;
  _QWORD *i;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *j;
  uint64_t *v76;
  _DWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  _DWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t *v85;
  uint64_t v86;
  _DWORD *v87;
  uint64_t v88;
  uint64_t *v89;
  llvm::VPlan *v90;
  uint64_t *v91;
  char *v92;
  char *v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  llvm::ScalarEvolution *v101;
  llvm::ScalarEvolution *v102;
  uint64_t v103;
  int v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  llvm::BasicBlock *v109;
  char *v110;
  llvm::BasicBlock *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  llvm::BasicBlock **v116;
  llvm::BasicBlock *v117;
  int v118;
  int v119;
  llvm::BasicBlock *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  unsigned int *v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t LoopPredecessor;
  uint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  unsigned int v148;
  int v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t WidenRecipe;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  llvm::BasicBlock **v164;
  llvm::BasicBlock *v165;
  int v166;
  int v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  void **v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t **v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  char **v189;
  uint64_t v190;
  _QWORD *v191;
  _QWORD *v192;
  BOOL v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  BOOL v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t k;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  _QWORD *v216;
  llvm::VPValue *v217;
  char *v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  __int128 **v223;
  uint64_t *v224;
  int v225;
  uint64_t v226;
  unsigned int v227;
  __int128 *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t *v235;
  unint64_t v236;
  unsigned int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  unsigned int v242;
  uint64_t v243;
  __int128 *v244;
  uint64_t v245;
  uint64_t v246;
  _QWORD *v247;
  uint64_t v248;
  llvm::VPValue *v249;
  _QWORD *v250;
  _QWORD *v251;
  uint64_t v252;
  llvm::VPlan *v253;
  llvm::VPlan *v254;
  llvm::VPlan *v255;
  char *v256;
  char *v257;
  unsigned int v259;
  unint64_t v260;
  char *v261;
  BOOL v262;
  char *v264;
  char *v265;
  void **v266;
  uint64_t *v268;
  _QWORD *v269;
  uint64_t v270;
  _QWORD *v271;
  _QWORD *v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unsigned int v276;
  uint64_t v277;
  uint64_t v278;
  llvm::BasicBlock *v279;
  int32x2_t *v280;
  uint64_t *v281;
  uint64_t *v282;
  char v283[8];
  uint64_t v284;
  void *v285;
  _QWORD *v286;
  unsigned __int8 *v287;
  unint64_t *v288;
  unint64_t *v289;
  uint64_t v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  _BYTE v294[24];
  _BYTE *v295;
  __int128 *v296;
  _BYTE v297[24];
  _BYTE *v298;
  void *v299[2];
  const char *v300;
  __int16 v301;
  __int128 *v302;
  _QWORD v303[3];
  _QWORD *v304;
  uint64_t v305;
  _QWORD v306[3];
  _QWORD *v307;
  void *v308;
  uint64_t v309;
  uint64_t v310;
  __int128 v311;
  _QWORD v312[3];
  _QWORD *v313;
  __int128 v314;
  _QWORD v315[3];
  _QWORD *v316;
  __int128 __p;
  char *v318;
  __int128 *p_p;
  char *v320;
  char **v321;
  __int128 v322;
  _QWORD v323[3];
  _QWORD *v324;
  void *v325;
  uint64_t v326;
  _BYTE v327[48];
  _QWORD v328[8];
  int v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  _QWORD v333[2];
  int v334;
  _QWORD *v335;
  uint64_t v336;
  _QWORD v337[7];

  v337[4] = *MEMORY[0x1E0C80C00];
  v288 = (unint64_t *)&v292;
  v289 = (unint64_t *)&v292;
  v290 = 1;
  v291 = 0;
  v9 = a1[2];
  v11 = a1[4];
  v10 = a1[5];
  v12 = a1[7];
  v13 = a1 + 17;
  v328[0] = *a1;
  v328[1] = v9;
  v328[2] = v11;
  v328[3] = v10;
  v328[4] = v12;
  v328[5] = a1 + 17;
  v328[7] = 0;
  v328[6] = 0;
  v329 = 0;
  v331 = 0;
  v330 = 0;
  v332 = 0;
  v334 = 0;
  v333[0] = 0;
  v333[1] = 0;
  v335 = v337;
  v336 = 0x400000000;
  v14 = *(_QWORD **)(a4 + 24);
  v15 = *(_QWORD **)(a4 + 32);
  if (v14 != v15)
  {
    do
    {
      *(_QWORD *)&__p = *v14;
      sub_1C6180A54((uint64_t)v333, (uint64_t *)&__p)[1] = 0;
      *(_QWORD *)&__p = v14[1];
      sub_1C6180A54((uint64_t)v333, (uint64_t *)&__p)[1] = 0;
      v14 += 2;
    }
    while (v14 != v15);
    v10 = a1[5];
  }
  v268 = v13;
  v281 = a5;
  v274 = (uint64_t)a1;
  v16 = *(_DWORD *)(v10 + 304);
  if (v16)
  {
    v17 = *(_QWORD *)(v10 + 296);
    v18 = v17 + 56 * v16;
    do
    {
      v19 = *(_QWORD *)v17;
      v20 = *(_DWORD *)(sub_1C63D426C(*(_QWORD *)(v274 + 32) + 80, *(_QWORD *)v17) + 40);
      *(_QWORD *)&__p = v19;
      sub_1C6180A54((uint64_t)v333, (uint64_t *)&__p)[1] = 0;
      v21 = *(unsigned int *)(v17 + 16);
      if ((_DWORD)v21)
      {
        v22 = *(uint64_t **)(v17 + 8);
        v23 = 8 * v21;
        do
        {
          *(_QWORD *)&__p = *v22;
          sub_1C6180A54((uint64_t)v333, (uint64_t *)&__p)[1] = 0;
          if (v20 <= 0xD && ((1 << v20) & 0x33C0) != 0)
          {
            v24 = *v22;
            v25 = *(_DWORD *)(*v22 + 20);
            if ((v25 & 0x40000000) != 0)
              v26 = *(_QWORD **)(v24 - 8);
            else
              v26 = (_QWORD *)(v24 - 32 * (v25 & 0x7FFFFFF));
            *(_QWORD *)&__p = *v26;
            sub_1C6180A54((uint64_t)v333, (uint64_t *)&__p)[1] = 0;
          }
          ++v22;
          v23 -= 8;
        }
        while (v23);
      }
      v17 += 56;
    }
    while (v17 != v18);
  }
  v27 = *(_QWORD *)(v274 + 48);
  v28 = *(uint64_t **)(v27 + 80);
  v29 = 88;
  if (v28 == *(uint64_t **)(v27 + 72))
    v29 = 92;
  v30 = *(unsigned int *)(v27 + v29);
  if ((_DWORD)v30)
  {
    v31 = 8 * v30;
    v32 = v28;
    while ((unint64_t)*v32 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v32;
      v31 -= 8;
      if (!v31)
        goto LABEL_41;
    }
  }
  else
  {
    v32 = v28;
  }
  v33 = &v28[v30];
  if (v32 != v33)
  {
    v34 = *v32;
LABEL_26:
    *(_QWORD *)&__p = &off_1E81AD1E8;
    *((_QWORD *)&__p + 1) = v34;
    v318 = (char *)v274;
    p_p = &__p;
    llvm::LoopVectorizationPlanner::getDecisionAndClampRange((uint64_t)&__p, a2);
    v36 = v35;
    if (p_p == &__p)
    {
      v37 = (void (**)(void))(__p + 32);
    }
    else
    {
      if (!p_p)
      {
LABEL_31:
        if (v36)
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v288, v34);
          if (*(_DWORD *)v34)
          {
            v38 = 0;
            do
            {
              LODWORD(__p) = v38 + *(_DWORD *)(v34 + 32);
              v39 = sub_1C4FA9B60((uint64_t *)(v34 + 8), &__p);
              if (v39)
              {
                *(_QWORD *)&__p = v39;
                sub_1C6180A54((uint64_t)v333, (uint64_t *)&__p)[1] = 0;
              }
              ++v38;
            }
            while (v38 < *(_DWORD *)v34);
          }
        }
        v40 = (unint64_t *)(v32 + 1);
        while (v40 != (unint64_t *)v33)
        {
          v41 = *v40++;
          v34 = v41;
          if (v41 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v32 = (uint64_t *)(v40 - 1);
            goto LABEL_26;
          }
        }
        goto LABEL_41;
      }
      v37 = (void (**)(void))(*(_QWORD *)p_p + 40);
    }
    (*v37)();
    goto LABEL_31;
  }
LABEL_41:
  v42 = (_QWORD *)operator new();
  *(_QWORD *)&__p = "vector.ph";
  LOWORD(v320) = 259;
  sub_1C6089974(v42, (llvm::Twine *)&__p, 0);
  v43 = (uint64_t *)operator new();
  *v281 = sub_1C608D1FC((uint64_t)v43, (uint64_t)v42);
  v44 = (_QWORD *)operator new();
  *(_QWORD *)&__p = "vector.body";
  LOWORD(v320) = 259;
  sub_1C6089974(v44, (llvm::Twine *)&__p, 0);
  v45 = (_QWORD *)operator new();
  *(_QWORD *)&__p = "vector.latch";
  LOWORD(v320) = 259;
  v46 = sub_1C6089974(v45, (llvm::Twine *)&__p, 0);
  sub_1C63D63A8((uint64_t)v46, (uint64_t)v44);
  v47 = operator new();
  HIBYTE(v318) = 11;
  strcpy((char *)&__p, "vector loop");
  v48 = sub_1C60899F8(v47, 1, &__p);
  *(_QWORD *)v48 = &off_1E81ADC00;
  *(_QWORD *)(v48 + 200) = v44;
  *(_QWORD *)(v48 + 208) = v45;
  *(_BYTE *)(v48 + 216) = 0;
  v44[5] = v48;
  v270 = v48;
  v45[5] = v48;
  if (SHIBYTE(v318) < 0)
    operator delete((void *)__p);
  sub_1C63D63A8(v270, (uint64_t)v42);
  v49 = (_QWORD *)operator new();
  *(_QWORD *)&__p = "middle.block";
  LOWORD(v320) = 259;
  v50 = sub_1C6089974(v49, (llvm::Twine *)&__p, 0);
  sub_1C63D63A8((uint64_t)v50, v270);
  v51 = (uint64_t *)v274;
  v52 = *(_QWORD *)(v274 + 32);
  v53 = *(_QWORD *)(v52 + 72);
  if (!v53)
  {
    v54 = *(llvm::ConstantInt **)(v52 + 384);
    v287 = 0;
    sub_1C6080358(v43, v54, &v287, *(_BYTE *)(*(_QWORD *)(v274 + 40) + 124) == 0, 0);
    v55 = v287;
    v56 = (uint64_t)&v311;
    if (!v287)
      goto LABEL_63;
    goto LABEL_62;
  }
  v57 = *(unsigned __int8 **)(v53 + 48);
  if (!v57)
  {
    v58 = *(_DWORD *)(v53 + 20);
    if ((v58 & 0x40000000) != 0)
    {
      v60 = *(_QWORD *)(v53 - 8);
      v59 = v58 & 0x7FFFFFF;
    }
    else
    {
      v59 = v58 & 0x7FFFFFF;
      v60 = v53 - 32 * v59;
    }
    v56 = (uint64_t)&v311;
    if (!v59)
    {
LABEL_59:
      v63 = *(llvm::ConstantInt **)(v52 + 384);
      v287 = 0;
      goto LABEL_61;
    }
    v61 = 32 * v59;
    while (1)
    {
      if (*(_QWORD *)v60 && *(unsigned __int8 *)(*(_QWORD *)v60 + 16) >= 0x1Cu)
      {
        v57 = *(unsigned __int8 **)(*(_QWORD *)v60 + 48);
        if (v57)
          break;
      }
      v60 += 32;
      v61 -= 32;
      if (!v61)
        goto LABEL_59;
    }
  }
  v63 = *(llvm::ConstantInt **)(v52 + 384);
  v287 = v57;
  llvm::MetadataTracking::track((uint64_t)&v287, v57, 2);
  v56 = (uint64_t)&v311;
LABEL_61:
  sub_1C6080358(v43, v63, &v287, *(_BYTE *)(*(_QWORD *)(v274 + 40) + 124) == 0, 0);
  v55 = v287;
  if (v287)
LABEL_62:
    llvm::MetadataTracking::untrack((uint64_t)&v287, v55);
LABEL_63:
  sub_1C4DFE414((uint64_t)v283, *(_QWORD *)v274);
  llvm::LoopBlocksDFS::perform((llvm::LoopBlocksDFS *)v283, *(llvm::LoopInfo **)(v274 + 8));
  v325 = v327;
  v326 = 0x600000000;
  v64 = v286;
  v65 = (uint64_t)v44;
  v271 = v285;
  v273 = a2;
  if (v286 == v285)
    goto LABEL_64;
  v106 = v315;
  v107 = &v310;
  v108 = (uint64_t)v44;
  v269 = v44 + 25;
  do
  {
    v111 = (llvm::BasicBlock *)*(v64 - 1);
    v110 = (char *)(v64 - 1);
    v109 = v111;
    v279 = v111;
    if ((_QWORD *)v108 != v44)
    {
      if ((*((_BYTE *)v109 + 23) & 0x10) == 0)
      {
        v121 = 0;
        v122 = &byte_1C871356D;
        goto LABEL_121;
      }
      v112 = ***(_QWORD ***)v109;
      v113 = *(_QWORD *)(v112 + 152);
      v114 = *(unsigned int *)(v112 + 168);
      if ((_DWORD)v114)
      {
        LODWORD(v115) = (v114 - 1) & ((v109 >> 4) ^ (v109 >> 9));
        v116 = (llvm::BasicBlock **)(v113 + 16 * v115);
        v117 = *v116;
        if (*v116 == v109)
        {
LABEL_120:
          v120 = v116[1];
          v123 = *(_QWORD *)v120;
          v122 = (char *)v120 + 16;
          v121 = v123;
LABEL_121:
          LOWORD(v320) = 261;
          *(_QWORD *)&__p = v122;
          *((_QWORD *)&__p + 1) = v121;
          sub_1C60805FC(v108, (llvm::Twine *)&__p);
          v109 = v279;
          goto LABEL_122;
        }
        v118 = 1;
        while (v117 != (llvm::BasicBlock *)-4096)
        {
          v119 = v115 + v118++;
          v115 = v119 & (v114 - 1);
          v117 = *(llvm::BasicBlock **)(v113 + 16 * v115);
          if (v117 == v279)
          {
            v116 = (llvm::BasicBlock **)(v113 + 16 * v115);
            goto LABEL_120;
          }
        }
      }
      v116 = (llvm::BasicBlock **)(v113 + 16 * v114);
      goto LABEL_120;
    }
LABEL_122:
    v51[17] = v108;
    v51[18] = v108 + 200;
    llvm::BasicBlock::instructionsWithoutDebug(v109, 1, (uint64_t)&__p);
    v314 = __p;
    if (v321)
    {
      if (v321 == &v318)
      {
        v316 = v315;
        (*((void (**)(char **))v318 + 3))(&v318);
      }
      else
      {
        v316 = (_QWORD *)(*((uint64_t (**)(void))*v321 + 2))();
      }
    }
    else
    {
      v316 = 0;
    }
    v311 = v322;
    v272 = v110;
    if (v324)
    {
      if (v324 == v323)
      {
        v313 = v312;
        (*(void (**)(_QWORD *))(v323[0] + 24))(v323);
      }
      else
      {
        v313 = (_QWORD *)(*(uint64_t (**)(void))(*v324 + 16))();
      }
    }
    else
    {
      v313 = 0;
    }
    v124 = v314;
    if ((_QWORD)v314 == (_QWORD)v311)
      goto LABEL_133;
    v276 = 0;
    do
    {
      if (v124)
        v127 = v124 - 24;
      else
        v127 = 0;
      if (*(_BYTE *)(v127 + 16) == 30)
        goto LABEL_144;
      v128 = sub_1C477672C(a3, v127);
      v129 = *(_QWORD *)(a3 + 8);
      v130 = (unsigned int *)(v129 == *(_QWORD *)a3 ? a3 + 20 : a3 + 16);
      if (v128 != (_QWORD *)(v129 + 8 * *v130))
        goto LABEL_144;
      v106 = v107;
      v308 = v107;
      v309 = 0x400000000;
      v131 = *(unsigned __int8 *)(v127 + 16);
      if (v131 == 83)
        v132 = v127;
      else
        v132 = 0;
      if (!v124 || v131 != 83 || *(_QWORD *)(v132 + 40) != **(_QWORD **)(*v51 + 32))
      {
        v140 = *(_DWORD *)(v127 + 20);
        if ((v140 & 0x40000000) != 0)
        {
          v142 = *(_QWORD *)(v127 - 8);
          v141 = v140 & 0x7FFFFFF;
        }
        else
        {
          v141 = v140 & 0x7FFFFFF;
          v142 = v127 - 32 * v141;
        }
        v143 = v281;
        sub_1C607D890(*v281, v142, v142 + 32 * v141, &v302);
        v296 = v302;
        if (v304)
        {
          if (v304 == v303)
          {
            v298 = v297;
            (*(void (**)(_QWORD *))(v303[0] + 24))(v303);
          }
          else
          {
            v298 = (_BYTE *)(*(uint64_t (**)(void))(*v304 + 16))();
          }
        }
        else
        {
          v298 = 0;
        }
        v293 = v305;
        if (v307)
        {
          if (v307 == v306)
          {
            v295 = v294;
            (*(void (**)(_QWORD *, _BYTE *))(v306[0] + 24))(v306, v294);
          }
          else
          {
            v295 = (_BYTE *)(*(uint64_t (**)(void))(*v307 + 16))();
          }
        }
        else
        {
          v295 = 0;
        }
        sub_1C63DE000(v299, (uint64_t *)&v296, &v293);
        sub_1C614D378((uint64_t)&v308, (uint64_t)v299);
        if (v299[0] != &v300)
          free(v299[0]);
        v144 = v295;
        if (v295 == v294)
        {
          v144 = v294;
          v145 = 4;
        }
        else
        {
          if (!v295)
            goto LABEL_183;
          v145 = 5;
        }
        (*(void (**)(void))(*v144 + 8 * v145))();
LABEL_183:
        v146 = v298;
        if (v298 == v297)
        {
          v146 = v297;
          v147 = 4;
        }
        else
        {
          if (!v298)
          {
LABEL_188:
            sub_1C63DB9C0(&v302);
            v148 = v309;
            goto LABEL_205;
          }
          v147 = 5;
        }
        (*(void (**)(void))(*v146 + 8 * v147))();
        goto LABEL_188;
      }
      v133 = *v281;
      LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(*v51);
      if (!LoopPredecessor)
        goto LABEL_162;
      v135 = *(_QWORD *)(LoopPredecessor + 40);
      if (v135 == LoopPredecessor + 40)
        goto LABEL_162;
      v136 = v135 - 24;
      if (!v135)
        v136 = 0;
      v137 = *(unsigned __int8 *)(v136 + 16);
      v138 = v137 - 29;
      if (v137 != 30)
      {
        v139 = 0;
        switch(v138)
        {
          case 0:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
            goto LABEL_193;
          case 1:
            __break(1u);
            return;
          case 2:
            v149 = (*(_DWORD *)(v136 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_191;
          case 3:
            v149 = (*(_DWORD *)(v136 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_191;
          case 10:
            v149 = *(_DWORD *)(v136 + 80) + 1;
LABEL_191:
            if (v149 == 1)
              goto LABEL_192;
            goto LABEL_162;
          default:
            goto LABEL_162;
        }
      }
      if ((*(_DWORD *)(v136 + 20) & 0x7FFFFFF) == 3)
LABEL_162:
        v139 = 0;
      else
LABEL_192:
        v139 = LoopPredecessor;
LABEL_193:
      v150 = *(_DWORD *)(v132 + 20);
      v151 = v150 & 0x7FFFFFF;
      if ((v150 & 0x7FFFFFF) != 0)
      {
        v152 = 0;
        while (1)
        {
          v153 = v132 - 32 * v151;
          if ((v150 & 0x40000000) != 0)
            v153 = *(_QWORD *)(v132 - 8);
          if (*(_QWORD *)(v153 + 32 * *(unsigned int *)(v132 + 60) + 8 * v152) == v139)
            break;
          if (v151 == ++v152)
            goto LABEL_199;
        }
      }
      else
      {
LABEL_199:
        LODWORD(v152) = -1;
      }
      if ((v150 & 0x40000000) != 0)
        v154 = *(_QWORD *)(v132 - 8);
      else
        v154 = v132 - 32 * v151;
      v155 = sub_1C63D5810(v133, *(_QWORD *)(v154 + 32 * v152));
      v156 = v309;
      v143 = v281;
      if (v309 >= (unint64_t)HIDWORD(v309))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v308, (uint64_t)v106, v309 + 1, 8);
        v156 = v309;
      }
      *((_QWORD *)v308 + v156) = v155;
      v148 = v309 + 1;
      LODWORD(v309) = v309 + 1;
LABEL_205:
      WidenRecipe = llvm::VPRecipeBuilder::tryToCreateWidenRecipe((uint64_t)v328, v127, (int8x16_t *)v308, v148, (uint64_t *)a2, v143);
      if (WidenRecipe >= 8)
      {
        v168 = WidenRecipe & 0xFFFFFFFFFFFFFFF8;
        if ((WidenRecipe & 4) != 0)
        {
          v174 = *v143;
          v302 = (__int128 *)v127;
          sub_1C61B6040((uint64_t *)(v174 + 184), &v302)[1] = v168;
          v175 = *(_QWORD *)(v168 + 48);
          if (v175)
            sub_1C63D6298((uint64_t)v328, v127, v175);
          v56 = (uint64_t)&v311;
          goto LABEL_225;
        }
        v170 = (uint64_t *)(v168 + 16);
        v169 = *(_QWORD *)(v168 + 16);
        if (v169 >= 8)
        {
          if ((v169 & 4) == 0)
          {
            v171 = v168 + 24;
            goto LABEL_230;
          }
          v176 = (uint64_t **)(v169 & 0xFFFFFFFFFFFFFFF8);
          v177 = *(unsigned int *)((v169 & 0xFFFFFFFFFFFFFFF8) + 8);
          if ((_DWORD)v177)
          {
            v170 = *v176;
            v171 = (uint64_t)&(*v176)[v177];
LABEL_230:
            v178 = (uint64_t *)(*v281 + 184);
            do
            {
              v179 = *v170++;
              v302 = *(__int128 **)(v179 + 40);
              sub_1C61B6040(v178, &v302)[1] = v179;
            }
            while (v170 != (uint64_t *)v171);
          }
        }
        a2 = v273;
        v51 = (uint64_t *)v274;
        v107 = v106;
        if (*(_BYTE *)(v168 + 8) == 17)
        {
          v180 = v44 + 25;
          if ((_QWORD *)v44[26] != v269)
          {
            v180 = (_QWORD *)v44[26];
            while (1)
            {
              v181 = v180 - 3;
              if (!v180)
                v181 = 0;
              if (*((unsigned __int8 *)v181 + 8) - 13 > 7)
                break;
              v180 = (_QWORD *)v180[1];
              if (v180 == v269)
              {
                v180 = v44 + 25;
                break;
              }
            }
          }
          if ((_QWORD *)(v108 + 200) != v180)
          {
            v182 = v326;
            if (v326 >= (unint64_t)HIDWORD(v326))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v325, (uint64_t)v327, v326 + 1, 8);
              v182 = v326;
            }
            *((_QWORD *)v325 + v182) = v168;
            LODWORD(v326) = v326 + 1;
          }
        }
        sub_1C63D6298((uint64_t)v328, v127, v168);
        v183 = *(_QWORD *)(v108 + 200);
        *(_QWORD *)(v168 + 24) = v183;
        v184 = v168 + 24;
        *(_QWORD *)(v184 + 64) = v108;
        *(_QWORD *)(v184 + 8) = v108 + 200;
        *(_QWORD *)(v183 + 8) = v184;
        *(_QWORD *)(v108 + 200) = v184;
        v56 = (uint64_t)&v311;
        goto LABEL_226;
      }
      v158 = llvm::VPRecipeBuilder::handleReplication((uint64_t)v328, v127, a2, v108, v143);
      if (v158 != v108)
      {
        v127 = v158;
        v107 = v106;
        if ((*((_DWORD *)v279 + 5) & 0x10000000) == 0)
        {
          LOWORD(v304) = 257;
LABEL_221:
          sub_1C60805FC(v158, (llvm::Twine *)&v302);
          v108 = v127;
          goto LABEL_226;
        }
        v159 = ***(_QWORD ***)v279;
        v160 = *(_QWORD *)(v159 + 152);
        v161 = *(unsigned int *)(v159 + 168);
        v162 = v275;
        if ((_DWORD)v161)
        {
          LODWORD(v163) = (v161 - 1) & ((v279 >> 4) ^ (v279 >> 9));
          v164 = (llvm::BasicBlock **)(v160 + 16 * v163);
          v165 = *v164;
          if (*v164 == v279)
          {
LABEL_220:
            v172 = (void **)v164[1];
            v173 = *v172;
            v301 = 773;
            v299[0] = v172 + 2;
            v299[1] = v173;
            v300 = ".";
            v302 = (__int128 *)v299;
            v275 = v275 & 0xFFFFFFFF00000000 | v276;
            v303[1] = v162 & 0xFFFFFFFF00000000 | v276;
            LOWORD(v304) = 2050;
            ++v276;
            goto LABEL_221;
          }
          v166 = 1;
          while (v165 != (llvm::BasicBlock *)-4096)
          {
            v167 = v163 + v166++;
            v163 = v167 & (v161 - 1);
            v165 = *(llvm::BasicBlock **)(v160 + 16 * v163);
            if (v165 == v279)
            {
              v164 = (llvm::BasicBlock **)(v160 + 16 * v163);
              goto LABEL_220;
            }
          }
        }
        v164 = (llvm::BasicBlock **)(v160 + 16 * v161);
        goto LABEL_220;
      }
LABEL_225:
      v107 = v106;
LABEL_226:
      if (v308 != v107)
        free(v308);
      do
      {
LABEL_144:
        v124 = *(_QWORD *)(v314 + 8);
        *(_QWORD *)&v314 = v124;
        if (v124 == *((_QWORD *)&v314 + 1))
          goto LABEL_148;
        if (!v316)
        {
          sub_1C485C2F0();
LABEL_423:
          qmemcpy(v256, "Initial VPlan for VF={", 22);
          v320 += 22;
          goto LABEL_382;
        }
      }
      while (!(*(unsigned int (**)(void))(*v316 + 48))());
      v124 = v314;
LABEL_148:
      ;
    }
    while (v124 != (_QWORD)v311);
LABEL_133:
    v125 = v313;
    if (v313 == v312)
    {
      v125 = v312;
      v126 = 4;
      v64 = v272;
      v106 = v315;
      goto LABEL_250;
    }
    v64 = v272;
    v106 = v315;
    if (v313)
    {
      v126 = 5;
LABEL_250:
      (*(void (**)(void))(*v125 + 8 * v126))();
    }
    v185 = v316;
    if (v316 == v315)
    {
      v185 = v315;
      v186 = 4;
      goto LABEL_255;
    }
    if (v316)
    {
      v186 = 5;
LABEL_255:
      (*(void (**)(void))(*v185 + 8 * v186))();
    }
    v187 = v324;
    if (v324 == v323)
    {
      v187 = v323;
      v188 = 4;
      goto LABEL_258;
    }
    if (v324)
    {
      v188 = 5;
LABEL_258:
      (*(void (**)(void))(*v187 + 8 * v188))();
    }
    v189 = v321;
    if (v321 == &v318)
    {
      v189 = &v318;
      v190 = 4;
      goto LABEL_261;
    }
    if (v321)
    {
      v190 = 5;
LABEL_261:
      (*(void (**)(void))&(*v189)[8 * v190])();
    }
    v191 = (_QWORD *)operator new();
    LOWORD(v320) = 257;
    v192 = sub_1C6089974(v191, (llvm::Twine *)&__p, 0);
    sub_1C63D63A8((uint64_t)v192, v108);
    v65 = 0;
    if (*(_DWORD *)(v108 + 80) == 1)
      v65 = **(_QWORD **)(v108 + 72);
    v108 = v65;
  }
  while (v64 != v271);
LABEL_64:
  *(_QWORD *)&__p = "vector.body";
  LOWORD(v320) = 259;
  sub_1C60805FC((uint64_t)v44, (llvm::Twine *)&__p);
  sub_1C63D66B4(v65);
  llvm::VPRecipeBuilder::fixHeaderPhis((llvm::VPRecipeBuilder *)v328);
  v67 = *(_QWORD **)(a4 + 24);
  for (i = *(_QWORD **)(a4 + 32); v67 != i; v67 += 2)
  {
    *(_QWORD *)&__p = *v67;
    v69 = (uint64_t *)sub_1C6180A54((uint64_t)v333, (uint64_t *)&__p)[1];
    *(_QWORD *)&__p = v67[1];
    v70 = (uint64_t *)sub_1C6180A54((uint64_t)v333, (uint64_t *)&__p)[1];
    v71 = *(_QWORD *)(v70[11] + 40);
    if (!v71 || !*(_BYTE *)(v71 + 216))
      v71 = 0;
    v72 = *(_QWORD *)(v69[11] + 40);
    if (v72 && *(_BYTE *)(v72 + 216))
    {
      if (*(_DWORD *)(v72 + 56) == 1)
        v77 = **(_DWORD ***)(v72 + 48);
      else
        v77 = 0;
      if (*(_DWORD *)(v72 + 80) == 1)
        v78 = **(_QWORD **)(v72 + 72);
      else
        v78 = 0;
      sub_1C63D62F0((uint64_t)v77, v72);
      sub_1C63D62F0(v72, v78);
      sub_1C63D64B0(v77, v78);
      if (v71)
      {
        if (*(_DWORD *)(v71 + 80) == 1)
          v82 = **(_QWORD **)(v71 + 72);
        else
          v82 = 0;
        sub_1C63D62F0(v71, v82);
        sub_1C63D64B0((_DWORD *)v71, v72);
        v87 = (_DWORD *)v72;
        v88 = v82;
      }
      else
      {
        v79 = llvm::VPBasicBlock::splitAt(v70[11], v70[4]);
        v80 = v79;
        if (*((_DWORD *)v79 + 14) == 1)
          v81 = *(_DWORD **)v79[6];
        else
          v81 = 0;
        sub_1C63D62F0((uint64_t)v81, (uint64_t)v79);
        sub_1C63D64B0(v81, v72);
        v87 = (_DWORD *)v72;
        v88 = (uint64_t)v80;
      }
      sub_1C63D64B0(v87, v88);
    }
    else if (v71)
    {
      v73 = **(_QWORD **)(v71 + 72);
      v74 = (uint64_t *)(v73 + 200);
      for (j = *(uint64_t **)(v73 + 208); j != v74; j = (uint64_t *)j[1])
      {
        v76 = j - 3;
        if (!j)
          v76 = 0;
        if (*((unsigned __int8 *)v76 + 8) - 13 > 7)
        {
          v74 = j;
          break;
        }
      }
      v83 = v69[3];
      v84 = (_QWORD *)v69[4];
      v85 = v69 + 3;
      *v84 = v83;
      *(_QWORD *)(v83 + 8) = v84;
      *v85 = 0;
      v85[1] = 0;
      v85[8] = v73;
      v86 = *v74;
      *v85 = *v74;
      v85[1] = (uint64_t)v74;
      *(_QWORD *)(v86 + 8) = v85;
      *v74 = (uint64_t)v85;
    }
    else
    {
      llvm::VPRecipeBase::moveAfter((llvm::VPRecipeBase *)v69, (llvm::VPRecipeBase *)v70);
    }
  }
  v89 = (uint64_t *)*v281;
  llvm::VPlanTransforms::removeRedundantCanonicalIVs((llvm::VPlanTransforms *)*v281, v66);
  llvm::VPlanTransforms::removeRedundantInductionCasts(v89, v90);
  v91 = (uint64_t *)v274;
  if ((_DWORD)v326)
  {
    v92 = (char *)v325;
    v93 = (char *)v325 + 8 * v326;
    v94 = v44 + 25;
    do
    {
      v95 = v44 + 25;
      if ((uint64_t *)v44[26] != v94)
      {
        v95 = (uint64_t *)v44[26];
        while (1)
        {
          v96 = v95 - 3;
          if (!v95)
            v96 = 0;
          if (*((unsigned __int8 *)v96 + 8) - 13 > 7)
            break;
          v95 = (uint64_t *)v95[1];
          if (v95 == v94)
          {
            v95 = v44 + 25;
            break;
          }
        }
      }
      v97 = *(_QWORD **)v92;
      v92 += 8;
      v98 = v97[3];
      v99 = (_QWORD *)v97[4];
      *v99 = v98;
      *(_QWORD *)(v98 + 8) = v99;
      v97[3] = 0;
      v97[4] = 0;
      v97[11] = v44;
      v100 = *v95;
      v97[3] = *v95;
      v97[4] = v95;
      *(_QWORD *)(v100 + 8) = v97 + 3;
      *v95 = (uint64_t)(v97 + 3);
    }
    while (v92 != v93);
  }
  llvm::LoopVectorizationPlanner::adjustRecipesForReductions(v274, *(_QWORD *)(v270 + 208), v281, (uint64_t)v328, *(_QWORD *)a2);
  v103 = *v89;
  if (*v89 && (v104 = *(unsigned __int8 *)(v103 + 8), v104 == 1))
  {
    v105 = v268;
LABEL_273:
    if (v104 == 1)
    {
      do
      {
        v103 = *(_QWORD *)(v103 + 200);
        if (v103)
          v193 = *(_BYTE *)(v103 + 8) == 1;
        else
          v193 = 0;
      }
      while (v193);
    }
  }
  else
  {
    v105 = v268;
    if (*(_DWORD *)(v103 + 80) == 1)
    {
      v103 = **(_QWORD **)(v103 + 72);
      v104 = *(unsigned __int8 *)(v103 + 8);
      goto LABEL_273;
    }
    v103 = 0;
  }
  v194 = v103 + 200;
  v195 = *(_QWORD *)(v103 + 208);
  if (v195 != v103 + 200)
  {
    v200 = *(_QWORD *)(v103 + 208);
    while (1)
    {
      v201 = v200 - 24;
      if (!v200)
        v201 = 0;
      if (*(unsigned __int8 *)(v201 + 8) - 13 > 7)
        break;
      v200 = *(_QWORD *)(v200 + 8);
      if (v200 == v194)
      {
        v200 = v194;
        goto LABEL_295;
      }
    }
    while (1)
    {
LABEL_295:
      if (v195 == v200)
        goto LABEL_281;
      v202 = v195 - 24;
      if (!v195)
        v202 = 0;
      v203 = *(unsigned __int8 *)(v202 + 8);
      if (v203 != 15)
        v202 = 0;
      if (v195 && v203 == 15)
        break;
LABEL_302:
      v195 = *(_QWORD *)(v195 + 8);
    }
    v204 = v202 + 48;
    do
    {
      v205 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v204 + 8) + 48);
      v206 = *(unsigned __int8 *)(v205 + 8);
      v204 = v205 + 48;
      if (v205)
        v207 = v206 == 15;
      else
        v207 = 0;
    }
    while (v207);
    v208 = *(_QWORD *)(v205 + 88);
    v209 = *(_QWORD *)(v208 + 40);
    if (v209 && *(_BYTE *)(v209 + 216))
    {
      if (*(_DWORD *)(v209 + 80) == 1)
        v208 = **(_QWORD **)(v209 + 72);
      else
        v208 = 0;
    }
    else if ((v206 - 13) > 7)
    {
      v210 = *(_QWORD *)(v205 + 32);
LABEL_322:
      *(_QWORD *)(v274 + 136) = v208;
      *(_QWORD *)(v274 + 144) = v210;
      v213 = v202 + 96;
      v214 = *(_QWORD *)(*(_QWORD *)(v202 + 48) + 8);
      *(_QWORD *)&__p = v213;
      *((_QWORD *)&__p + 1) = v214;
      v215 = sub_1C63D5A30(v105, 69, (uint64_t *)&__p, 2, 0);
      if (v215)
        v216 = v215 - 12;
      else
        v216 = 0;
      if (v215)
        v217 = (llvm::VPValue *)(v216 + 12);
      else
        v217 = 0;
      llvm::VPValue::replaceAllUsesWith(v213, v217);
      sub_1C63D6858((uint64_t)(v216 + 5), 0, v213);
      a2 = v273;
      goto LABEL_302;
    }
    v210 = v208 + 200;
    for (k = *(_QWORD *)(v208 + 208); k != v210; k = *(_QWORD *)(k + 8))
    {
      v212 = k - 24;
      if (!k)
        v212 = 0;
      if (*(unsigned __int8 *)(v212 + 8) - 13 > 7)
      {
        v210 = k;
        goto LABEL_322;
      }
    }
    goto LABEL_322;
  }
LABEL_281:
  if (v289 == v288)
    v196 = (uint64_t *)((char *)&v290 + 4);
  else
    v196 = &v290;
  v197 = *(unsigned int *)v196;
  if ((_DWORD)v197)
  {
    v198 = 8 * v197;
    v199 = v289;
    while (*v199 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v199;
      v198 -= 8;
      if (!v198)
      {
        a3 = *v281;
        goto LABEL_380;
      }
    }
  }
  else
  {
    v199 = v289;
  }
  v218 = (char *)&v289[v197];
  a3 = *v281;
  if (v199 != (unint64_t *)v218)
  {
    v282 = (uint64_t *)(a3 + 184);
    v219 = *v199;
    v280 = (int32x2_t *)a3;
LABEL_332:
    *(_QWORD *)&__p = *(_QWORD *)(v219 + 40);
    v220 = sub_1C6180A54((uint64_t)v333, (uint64_t *)&__p)[1];
    *(_QWORD *)&__p = &v318;
    *((_QWORD *)&__p + 1) = 0x400000000;
    if (*(_DWORD *)v219)
    {
      v227 = 0;
      do
      {
        LODWORD(v302) = v227 + *(_DWORD *)(v219 + 32);
        v228 = (__int128 *)sub_1C4FA9B60((uint64_t *)(v219 + 8), &v302);
        if (v228 && *((_BYTE *)v228 + 16) == 61)
        {
          v302 = v228;
          v229 = *(_QWORD *)(*(_QWORD *)(sub_1C6180A54((uint64_t)v333, (uint64_t *)&v302)[1] + 48) + 8);
          v230 = DWORD2(__p);
          if (DWORD2(__p) >= (unint64_t)HIDWORD(__p))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, (uint64_t)&v318, DWORD2(__p) + 1, 8);
            v230 = DWORD2(__p);
          }
          *(_QWORD *)(__p + 8 * v230) = v229;
          ++DWORD2(__p);
        }
        ++v227;
      }
      while (v227 < *(_DWORD *)v219);
    }
    v221 = operator new();
    v222 = v221;
    v223 = *(__int128 ***)(v220 + 48);
    v224 = (uint64_t *)__p;
    v225 = *(_DWORD *)(v220 + 56);
    v278 = DWORD2(__p);
    if (*(_BYTE *)(*(_QWORD *)(v220 + 152) + 16) == 61)
    {
      if (v225 == 3)
      {
        v226 = 2;
        goto LABEL_346;
      }
LABEL_347:
      v277 = 0;
    }
    else
    {
      if (v225 != 2)
        goto LABEL_347;
      v226 = 1;
LABEL_346:
      v277 = (uint64_t)v223[v226];
    }
    v302 = *v223;
    sub_1C6089380(v221, 3, (uint64_t *)&v302, 1);
    *(_QWORD *)v222 = &off_1E81ACA68;
    *(_QWORD *)(v222 + 40) = &unk_1E81ACAA8;
    *(_QWORD *)(v222 + 96) = v219;
    *(_BYTE *)(v222 + 104) = 0;
    if (*(_DWORD *)v219)
    {
      v237 = 0;
      do
      {
        LODWORD(v302) = v237 + *(_DWORD *)(v219 + 32);
        v238 = sub_1C4FA9B60((uint64_t *)(v219 + 8), &v302);
        if (v238)
        {
          v239 = v238;
          if (*(_BYTE *)(*(_QWORD *)v238 + 8) != 7)
          {
            v240 = operator new();
            *(_QWORD *)v240 = &off_1E81ADA28;
            *(_BYTE *)(v240 + 8) = 0;
            *(_QWORD *)(v240 + 16) = v240 + 32;
            *(_QWORD *)(v240 + 24) = 0x100000000;
            *(_QWORD *)(v240 + 40) = v239;
            *(_QWORD *)(v240 + 48) = v222;
            sub_1C619116C(v222 + 16, v240);
          }
        }
        ++v237;
      }
      while (v237 < *(_DWORD *)v219);
    }
    if ((_DWORD)v278)
    {
      v231 = 8 * v278;
      do
      {
        v232 = *v224++;
        sub_1C63D6200((_DWORD *)(v222 + 40), v232);
        v231 -= 8;
      }
      while (v231);
    }
    if (v277)
    {
      *(_BYTE *)(v222 + 104) = 1;
      sub_1C63D6200((_DWORD *)(v222 + 40), v277);
    }
    v233 = *(_QWORD *)(v220 + 24);
    v234 = *(_QWORD *)(v220 + 88);
    *(_QWORD *)(v222 + 24) = v233;
    *(_QWORD *)(v222 + 88) = v234;
    *(_QWORD *)(v222 + 32) = v220 + 24;
    *(_QWORD *)(v233 + 8) = v222 + 24;
    *(_QWORD *)(v220 + 24) = v222 + 24;
    v91 = (uint64_t *)v274;
    if (*(_DWORD *)v219)
    {
      v241 = 0;
      v242 = 0;
      do
      {
        LODWORD(v302) = v241 + *(_DWORD *)(v219 + 32);
        v243 = sub_1C4FA9B60((uint64_t *)(v219 + 8), &v302);
        if (v243)
        {
          v244 = (__int128 *)v243;
          if (*(_BYTE *)(*(_QWORD *)v243 + 8) != 7)
          {
            v302 = (__int128 *)v243;
            v245 = sub_1C61B6040(v282, &v302)[1];
            *(_QWORD *)&v314 = v244;
            v302 = 0;
            if (sub_1C61252B8(v282, &v314, &v302))
            {
              *(_QWORD *)v302 = -8192;
              v280[24] = vadd_s32(v280[24], (int32x2_t)0x1FFFFFFFFLL);
            }
            v246 = *(_QWORD *)(v222 + 16);
            v247 = (_QWORD *)(v246 & 0xFFFFFFFFFFFFFFF8);
            if ((v246 & 4) != 0)
              v247 = *(_QWORD **)(*v247 + 8 * v242);
            v302 = v244;
            sub_1C61B6040(v282, &v302)[1] = v247;
            v248 = *(_QWORD *)(v222 + 16);
            v249 = (llvm::VPValue *)(v248 & 0xFFFFFFFFFFFFFFF8);
            if ((v248 & 4) != 0)
              v249 = *(llvm::VPValue **)(*(_QWORD *)v249 + 8 * v242);
            llvm::VPValue::replaceAllUsesWith(v245, v249);
            ++v242;
            v91 = (uint64_t *)v274;
          }
          v302 = v244;
          v250 = (_QWORD *)sub_1C6180A54((uint64_t)v333, (uint64_t *)&v302)[1];
          v252 = v250[3];
          v251 = (_QWORD *)v250[4];
          *v251 = v252;
          *(_QWORD *)(v252 + 8) = v251;
          v250[3] = 0;
          v250[4] = 0;
          (*(void (**)(_QWORD *))(*v250 + 8))(v250);
        }
        ++v241;
      }
      while (v241 < *(_DWORD *)v219);
    }
    if ((char **)__p != &v318)
      free((void *)__p);
    v235 = v199 + 1;
    a2 = v273;
    a3 = (uint64_t)v280;
    while (v235 != (unint64_t *)v218)
    {
      v236 = *v235++;
      v219 = v236;
      if (v236 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v199 = v235 - 1;
        goto LABEL_332;
      }
    }
  }
LABEL_380:
  *(_BYTE *)(a3 + 496) = 0;
  llvm::VPlanTransforms::optimizeInductions((llvm::VPlanTransforms *)a3, *(llvm::VPlan **)(v91[7] + 88), v101, v102);
  llvm::VPlanTransforms::sinkScalarOperands((void **)a3, v253);
  llvm::VPlanTransforms::mergeReplicateRegions((llvm::VPlanTransforms *)a3, v254);
  llvm::VPlanTransforms::removeDeadRecipes(a3, *v91);
  llvm::VPlanTransforms::removeRedundantExpandSCEVRecipes((llvm::VPlanTransforms *)a3, v255);
  v311 = 0uLL;
  v312[0] = 0;
  DWORD2(__p) = 0;
  LOBYTE(v321) = 0;
  *(_QWORD *)&v322 = 0;
  *(_QWORD *)&__p = &unk_1E81A7208;
  v323[0] = &v311;
  DWORD2(v322) = 0;
  v320 = 0;
  v318 = 0;
  p_p = 0;
  v56 = *(_QWORD *)a2;
  v106 = (uint64_t *)HIDWORD(*(_QWORD *)a2);
  a2 = *(_QWORD *)a2;
  v127 = a3 + 8;
  v302 = (__int128 *)v56;
  sub_1C63DBD00(a3 + 8, (int *)&v302);
  v256 = v320;
  if ((unint64_t)((char *)p_p - v320) > 0x15)
    goto LABEL_423;
  llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "Initial VPlan for VF={", 0x16uLL);
LABEL_382:
  if ((_DWORD)v106 == 1)
  {
    v257 = v320;
    if ((unint64_t)((char *)p_p - v320) > 8)
    {
      v320[8] = 32;
      *(_QWORD *)v257 = *(_QWORD *)"vscale x ";
      v320 += 9;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "vscale x ", 9uLL);
    }
  }
  sub_1C5E21910((llvm::raw_ostream *)&__p, a2, 0, 0, 0);
  if (*(_DWORD *)(v273 + 12) == 1 || (_DWORD)v106 != 1)
  {
    v259 = 2 * v56;
    if ((2 * v56) < *(_DWORD *)(v273 + 8))
    {
      do
      {
        v260 = v259;
        v302 = (__int128 *)(v56 & 0xFFFFFFFF00000000 | v259);
        sub_1C63DBD00(v127, (int *)&v302);
        if (p_p == (__int128 *)v320)
          llvm::raw_ostream::write((llvm::raw_ostream *)&__p, ",", 1uLL);
        else
          *v320++ = 44;
        if ((_DWORD)v106 == 1)
        {
          v261 = v320;
          if ((unint64_t)((char *)p_p - v320) > 8)
          {
            v320[8] = 32;
            *(_QWORD *)v261 = *(_QWORD *)"vscale x ";
            v320 += 9;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "vscale x ", 9uLL);
          }
        }
        sub_1C5E21910((llvm::raw_ostream *)&__p, v260, 0, 0, 0);
        v262 = *(_DWORD *)(v273 + 12) != 1 && (_DWORD)v106 == 1;
        v259 = 2 * v260;
      }
      while (!v262 && v259 < *(_DWORD *)(v273 + 8));
    }
  }
  v264 = v320;
  if ((unint64_t)((char *)p_p - v320) > 6)
  {
    *(_DWORD *)(v320 + 3) = 826097222;
    *(_DWORD *)v264 = 1179987069;
    v265 = v320 + 7;
    v320 += 7;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "},UF>=1", 7uLL);
    v265 = v320;
  }
  if (v265 != v318)
  {
    v320 = v318;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&__p, v318, v265 - v318);
  }
  LOWORD(v304) = 260;
  v302 = &v311;
  llvm::Twine::str((llvm::Twine *)&v302, &v314);
  v266 = (void **)(a3 + 64);
  if (*(char *)(a3 + 87) < 0)
    operator delete(*v266);
  *(_OWORD *)v266 = v314;
  *(_QWORD *)(a3 + 80) = v315[0];
  sub_1C63D66B4(*(_QWORD *)(v270 + 208));
  *(_QWORD *)&__p = off_1E81A6E70;
  if (DWORD2(v322) == 1 && v318)
    MEMORY[0x1CAA32F9C](v318, 0x1000C8077774924);
  if (SHIBYTE(v312[0]) < 0)
    operator delete((void *)v311);
  if (v325 != v327)
    free(v325);
  if (v285)
  {
    v286 = v285;
    operator delete(v285);
  }
  MEMORY[0x1CAA32FB4](v284, 8);
  sub_1C63DBFC0(v328);
  if (v289 != v288)
    free(v289);
}

uint64_t sub_1C6080358(uint64_t *a1, llvm::ConstantInt *this, unsigned __int8 **a3, int a4, int a5)
{
  llvm::Value **v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned __int8 *v21;
  _DWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35[3];

  v35[2] = *MEMORY[0x1E0C80C00];
  v9 = llvm::ConstantInt::get(this, 0, 0);
  v10 = sub_1C63D5810((uint64_t)a1, (uint64_t)v9);
  v11 = (_QWORD *)operator new();
  v12 = *a3;
  v34 = v12;
  if (v12)
    llvm::MetadataTracking::track((uint64_t)&v34, v12, 2);
  sub_1C63DBCA4((uint64_t)v11, v10, &v34);
  if (v34)
    llvm::MetadataTracking::untrack((uint64_t)&v34, v34);
  v13 = *a1;
  if (*a1 && *(_BYTE *)(v13 + 8) == 1)
  {
    v14 = 1;
  }
  else
  {
    v13 = **(_QWORD **)(v13 + 72);
    v14 = *(unsigned __int8 *)(v13 + 8) == 1;
  }
  v15 = v13;
  if (v14)
  {
    v15 = v13;
    do
    {
      v15 = *(_QWORD *)(v15 + 200);
      if (v15)
        v16 = *(_BYTE *)(v15 + 8) == 1;
      else
        v16 = 0;
    }
    while (v16);
  }
  v17 = *(uint64_t **)(v15 + 208);
  v18 = *v17;
  v11[3] = *v17;
  v11[11] = v15;
  v11[4] = v17;
  *(_QWORD *)(v18 + 8) = v11 + 3;
  *v17 = (uint64_t)(v11 + 3);
  v19 = operator new();
  if (a4)
    v20 = 76;
  else
    v20 = 75;
  v35[0] = (uint64_t)(v11 + 12);
  v21 = *a3;
  v33 = v21;
  if (v21)
    llvm::MetadataTracking::track((uint64_t)&v33, v21, 2);
  sub_1C63D68EC(v19, v20, v35, 1, &v33);
  if (v33)
    llvm::MetadataTracking::untrack((uint64_t)&v33, v33);
  v22 = v11 + 5;
  v23 = v19 + 96;
  sub_1C63D6200(v22, v19 + 96);
  if (*(_BYTE *)(v13 + 8) == 1)
  {
    do
    {
      v13 = *(_QWORD *)(v13 + 208);
      if (v13)
        v24 = *(_BYTE *)(v13 + 8) == 1;
      else
        v24 = 0;
    }
    while (v24);
  }
  if (a5)
    sub_1C63E3464((_DWORD *)(v13 + 96), 0);
  v25 = *(_QWORD *)(v13 + 200);
  *(_QWORD *)(v19 + 24) = v25;
  v26 = v19 + 24;
  *(_QWORD *)(v26 + 64) = v13;
  *(_QWORD *)(v26 + 8) = v13 + 200;
  *(_QWORD *)(v25 + 8) = v26;
  *(_QWORD *)(v13 + 200) = v26;
  v27 = operator new();
  v35[0] = v23;
  v35[1] = (uint64_t)(a1 + 16);
  v28 = *a3;
  v32 = v28;
  if (v28)
    llvm::MetadataTracking::track((uint64_t)&v32, v28, 2);
  result = sub_1C63D68EC(v27, 77, v35, 2, &v32);
  if (v32)
    result = llvm::MetadataTracking::untrack((uint64_t)&v32, v32);
  v30 = *(_QWORD *)(v13 + 200);
  *(_QWORD *)(v27 + 24) = v30;
  v31 = v27 + 24;
  *(_QWORD *)(v31 + 64) = v13;
  *(_QWORD *)(v31 + 8) = v13 + 200;
  *(_QWORD *)(v30 + 8) = v31;
  *(_QWORD *)(v13 + 200) = v31;
  return result;
}

double sub_1C60805FC(uint64_t a1, llvm::Twine *this)
{
  void **v3;
  double result;
  __int128 v5;
  uint64_t v6;

  llvm::Twine::str(this, &v5);
  v3 = (void **)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*v3);
  result = *(double *)&v5;
  *(_OWORD *)v3 = v5;
  *(_QWORD *)(a1 + 32) = v6;
  return result;
}

uint64_t llvm::LoopVectorizationPlanner::adjustRecipesForReductions(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  _BOOL4 v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  llvm::DominatorTree *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *BlockInMask;
  uint64_t v31;
  int v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  llvm::VPValue *v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD **v52;
  _QWORD *v53;
  uint64_t v54;
  int v55;
  _QWORD **v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  _BOOL4 v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t *v82;
  unsigned __int8 *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;

  v5 = a4;
  v88 = *MEMORY[0x1E0C80C00];
  v82 = (uint64_t *)result;
  v6 = *(_QWORD *)(result + 40);
  v7 = *(_DWORD *)(v6 + 304);
  if (v7)
  {
    v8 = a3;
    v72 = a2;
    v9 = *(_QWORD *)(v6 + 296);
    v74 = v9 + 56 * v7;
    v11 = HIDWORD(a5) != 1 && (_DWORD)a5 == 1;
    v73 = v11;
    v77 = a4 + 96;
    do
    {
      v12 = *(_QWORD **)v9;
      result = sub_1C63D426C(v82[4] + 80, *(_QWORD *)v9);
      v79 = result;
      if (!v73
        || (result = llvm::LoopVectorizeHints::allowReordering(*(llvm::LoopVectorizeHints **)(v82[5] + 664)),
            (result & 1) == 0)
        && *(_BYTE *)(v79 + 65))
      {
        v13 = *(unsigned int *)(v9 + 16);
        if ((_DWORD)v13)
        {
          v76 = v9;
          v14 = *(_QWORD **)(v9 + 8);
          v15 = 8 * v13;
          do
          {
            v16 = v12;
            v12 = (_QWORD *)*v14;
            v85 = (_QWORD *)*v14;
            v17 = (_QWORD *)sub_1C6180A54(v77, (uint64_t *)&v85)[1];
            v18 = *(_DWORD *)(v79 + 40);
            v19 = *v8;
            v85 = v16;
            v20 = sub_1C61B6040((uint64_t *)(v19 + 184), &v85);
            v22 = v18 - 6 < 4 || (v18 & 0xFFFFFFFE) == 12;
            v23 = *((_DWORD *)v12 + 5);
            v81 = v15;
            if ((v23 & 0x40000000) != 0)
              v24 = (_QWORD *)*(v12 - 1);
            else
              v24 = &v12[-4 * (v23 & 0x7FFFFFF)];
            v25 = (_QWORD *)v20[1];
            if ((_QWORD *)v24[4 * v22] == v16)
              ++v22;
            v26 = *v8;
            v85 = (_QWORD *)v24[4 * v22];
            v28 = (_QWORD *)sub_1C61B6040((uint64_t *)(v26 + 184), &v85)[1];
            v29 = v82[5];
            if (*(_BYTE *)(v29 + 124)
              || llvm::LoopAccessInfo::blockNeedsPredication((llvm::LoopAccessInfo *)v12[5], **(llvm::BasicBlock ***)(v29 + 608), *(llvm::Loop **)(*(_QWORD *)(v29 + 608) + 40), v27))
            {
              BlockInMask = llvm::VPRecipeBuilder::createBlockInMask(a4, (llvm::LoopAccessInfo *)v12[5], v8);
            }
            else
            {
              BlockInMask = 0;
            }
            v80 = v18;
            if (v18 == 14)
            {
              v31 = operator new();
              v85 = v28;
              v32 = *((_DWORD *)v12 + 5);
              if ((v32 & 0x40000000) != 0)
                v33 = (_QWORD *)*(v12 - 1);
              else
                v33 = &v12[-4 * (v32 & 0x7FFFFFF)];
              v35 = *v8;
              v84 = (_QWORD *)v33[4];
              v86 = (_QWORD *)sub_1C61B6040((uint64_t *)(v35 + 184), &v84)[1];
              v83 = 0;
              sub_1C63D68EC(v31, 18, (uint64_t *)&v85, 2, &v83);
              if (v83)
                llvm::MetadataTracking::untrack((uint64_t)&v83, v83);
              v34 = (uint64_t)BlockInMask;
              v36 = *((unsigned __int8 *)v12 + 17) >> 1;
              if (v36 == 127)
                v36 = -1;
              v37 = v17[3];
              *(_QWORD *)(v31 + 24) = v37;
              v38 = v31 + 24;
              *(_DWORD *)(v38 + 132) = v36;
              *(_QWORD *)(v38 + 64) = v17[11];
              *(_QWORD *)(v38 + 8) = v17 + 3;
              *(_QWORD *)(v37 + 8) = v38;
              v17[3] = v38;
              v28 = (_QWORD *)(v38 + 72);
            }
            else
            {
              v34 = (uint64_t)BlockInMask;
            }
            v39 = (_QWORD *)operator new();
            v40 = v82[3];
            v85 = v25;
            v86 = v28;
            v41 = sub_1C6089380((uint64_t)v39, 4, (uint64_t *)&v85, 2);
            *(_QWORD *)v41 = &off_1E81ACAC8;
            *(_QWORD *)(v41 + 40) = &unk_1E81ACB08;
            v42 = (_DWORD *)(v41 + 40);
            *(_QWORD *)(v41 + 96) = &off_1E81ADA28;
            v43 = (llvm::VPValue *)(v41 + 96);
            *(_BYTE *)(v41 + 104) = 3;
            *(_QWORD *)(v41 + 112) = v41 + 128;
            *(_QWORD *)(v41 + 120) = 0x100000000;
            v39[17] = v12;
            v39[18] = v39;
            sub_1C619116C(v41 + 16, v41 + 96);
            *v39 = &off_1E81ACAC8;
            *(_QWORD *)v42 = &unk_1E81ACB08;
            *(_QWORD *)v43 = &unk_1E81ACB28;
            v39[19] = v79 + 8;
            v39[20] = v40;
            if (v34)
              sub_1C63D6200(v42, v34);
            v44 = v17[2];
            v45 = (_QWORD **)(v44 & 0xFFFFFFFFFFFFFFF8);
            v8 = a3;
            if ((v44 & 4) != 0)
              v45 = (_QWORD **)**v45;
            llvm::VPValue::replaceAllUsesWith((uint64_t)v45, v43);
            v46 = (_QWORD *)*a3;
            v84 = v12;
            v85 = 0;
            if (sub_1C61252B8(v46 + 23, &v84, &v85))
            {
              *v85 = -8192;
              v46[24] = vadd_s32((int32x2_t)v46[24], (int32x2_t)0x1FFFFFFFFLL);
            }
            v47 = *a3;
            v85 = v12;
            sub_1C61B6040((uint64_t *)(v47 + 184), &v85)[1] = v43;
            v48 = v17[3];
            v49 = v17[11];
            v39[3] = v48;
            v50 = v39 + 3;
            v50[8] = v49;
            v50[1] = v17 + 3;
            *(_QWORD *)(v48 + 8) = v50;
            v17[3] = v50;
            v51 = v17[2];
            v52 = (_QWORD **)(v51 & 0xFFFFFFFFFFFFFFF8);
            if ((v51 & 4) != 0)
              v52 = (_QWORD **)**v52;
            llvm::VPValue::replaceAllUsesWith((uint64_t)v52, v43);
            v54 = v17[3];
            v53 = (_QWORD *)v17[4];
            *v53 = v54;
            *(_QWORD *)(v54 + 8) = v53;
            v17[3] = 0;
            v17[4] = 0;
            result = (*(uint64_t (**)(_QWORD *))(*v17 + 8))(v17);
            v9 = v76;
            if (v80 <= 0xD && ((1 << v80) & 0x33C0) != 0)
            {
              v55 = *((_DWORD *)v12 + 5);
              if ((v55 & 0x40000000) != 0)
                v56 = (_QWORD **)*(v12 - 1);
              else
                v56 = (_QWORD **)&v12[-4 * (v55 & 0x7FFFFFF)];
              v85 = *v56;
              v57 = (_QWORD *)sub_1C6180A54(v77, (uint64_t *)&v85)[1];
              v59 = v57[3];
              v58 = (_QWORD *)v57[4];
              *v58 = v59;
              *(_QWORD *)(v59 + 8) = v58;
              v57[3] = 0;
              v57[4] = 0;
              result = (*(uint64_t (**)(_QWORD *))(*v57 + 8))(v57);
            }
            ++v14;
            v15 = v81 - 8;
          }
          while (v81 != 8);
        }
      }
      v9 += 56;
    }
    while (v9 != v74);
    v6 = v82[5];
    v5 = a4;
    a2 = v72;
  }
  if (!*(_BYTE *)(v6 + 124))
    return result;
  v82[17] = a2;
  v82[18] = *(_QWORD *)(a2 + 208);
  v60 = *(_QWORD *)*a3;
  if (v60)
    v61 = *(_BYTE *)(v60 + 8) == 1;
  else
    v61 = 0;
  if (!v61)
  {
    if (*(_DWORD *)(v60 + 80) != 1)
    {
      v60 = 0;
      goto LABEL_70;
    }
    v60 = **(_QWORD **)(v60 + 72);
    if (*(_BYTE *)(v60 + 8) != 1)
      goto LABEL_70;
  }
  do
  {
    v60 = *(_QWORD *)(v60 + 200);
    if (v60)
      v62 = *(_BYTE *)(v60 + 8) == 1;
    else
      v62 = 0;
  }
  while (v62);
LABEL_70:
  v63 = v60 + 200;
  v64 = *(_QWORD *)(v60 + 208);
  if (v64 != v60 + 200)
  {
    v65 = *(_QWORD *)(v60 + 208);
    while (1)
    {
      v66 = v65 - 24;
      if (!v65)
        v66 = 0;
      if (*(unsigned __int8 *)(v66 + 8) - 13 > 7)
        break;
      v65 = *(_QWORD *)(v65 + 8);
      if (v65 == v63)
      {
        v65 = v63;
        break;
      }
    }
    while (v64 != v65)
    {
      v67 = v64 - 24;
      if (!v64)
        v67 = 0;
      v68 = *(unsigned __int8 *)(v67 + 8);
      if (v68 == 20)
        v69 = v67;
      else
        v69 = 0;
      if (v64 && v68 == 20 && !*(_BYTE *)(v69 + 160))
      {
        v70 = llvm::VPRecipeBuilder::createBlockInMask(v5, **(llvm::LoopAccessInfo ***)(*v82 + 32), a3);
        v71 = *(_QWORD **)(*(_QWORD *)(v69 + 48) + 8);
        v85 = v70;
        v86 = v71;
        v87 = v69 + 96;
        result = (uint64_t)sub_1C63D5A30(v82 + 17, 57, (uint64_t *)&v85, 3, 0);
      }
      v64 = *(_QWORD *)(v64 + 8);
    }
  }
  return result;
}

void llvm::VPWidenSelectRecipe::execute(llvm::VPWidenSelectRecipe *this, unsigned __int8 **a2)
{
  uint64_t v4;
  unint64_t v5;
  llvm::Instruction *v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned __int8 *v9;
  uint64_t *v10;
  unsigned __int8 *v11;
  uint64_t *v12;
  llvm::Value *Select;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int16 v18;

  v4 = *((_QWORD *)this + 2);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) != 0)
    v5 = **(_QWORD **)v5;
  v6 = *(llvm::Instruction **)(v5 + 40);
  llvm::InnerLoopVectorizer::setDebugLocFromInst(a2[39], (uint64_t)v6, 0, 0);
  v7 = 0;
  if (*((_BYTE *)this + 152))
  {
    v15 = **((_QWORD **)this + 6);
    v16 = 0;
    v17 = 0;
    v7 = llvm::VPTransformState::get((uint64_t)a2, v15, (unsigned int *)&v16);
  }
  if (*((_DWORD *)a2 + 2))
  {
    v8 = 0;
    do
    {
      v9 = v7;
      if (!v7)
        v9 = llvm::VPTransformState::get((llvm::VPTransformState *)a2, **((llvm::VPValue ***)this + 6), v8);
      v10 = (uint64_t *)llvm::VPTransformState::get((llvm::VPTransformState *)a2, *(llvm::VPValue **)(*((_QWORD *)this + 6) + 8), v8);
      v11 = llvm::VPTransformState::get((llvm::VPTransformState *)a2, *(llvm::VPValue **)(*((_QWORD *)this + 6) + 16), v8);
      v12 = (uint64_t *)a2[34];
      v18 = 257;
      Select = llvm::IRBuilderBase::CreateSelect(v12, (uint64_t)v9, v10, (uint64_t)v11, (uint64_t)&v16, 0);
      sub_1C63D1D2C((uint64_t)a2, (char *)this + 96, (uint64_t)Select, v8);
      if (Select)
        v14 = *((unsigned __int8 *)Select + 16) >= 0x1Cu;
      else
        v14 = 0;
      if (v14)
        llvm::InnerLoopVectorizer::addMetadata((llvm::InnerLoopVectorizer *)a2[39], (unsigned __int8 **)Select, v6);
      ++v8;
    }
    while (v8 < *((_DWORD *)a2 + 2));
  }
}

void llvm::VPWidenRecipe::execute(llvm::VPWidenRecipe *this, llvm::VPTransformState *a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  llvm::VPValue **v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *NAryOp;
  unsigned __int8 *v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t v19;
  llvm::VPTransformState *v20;
  BOOL v21;
  uint64_t v22;
  llvm::Type *v24;
  uint64_t **v25;
  uint64_t v26;
  unsigned int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  BOOL v31;
  unsigned int v32;
  uint64_t *v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t FCmpHelper;
  __int16 v40;
  BOOL v41;
  char v42;
  __int16 v43;
  _BYTE v44[32];
  __int16 v45;
  void *v46;
  uint64_t v47;
  _QWORD v48[3];

  v48[2] = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 96;
  v3 = *((_QWORD *)this + 17);
  v4 = *((_QWORD *)a2 + 34);
  v5 = *(unsigned __int8 *)(v3 + 16);
  if (((1 << (v5 - 40)) & 0x7FFFF) != 0)
  {
    llvm::InnerLoopVectorizer::setDebugLocFromInst(*((unsigned __int8 **)a2 + 39), v3, 0, 0);
    if (*((_DWORD *)a2 + 2))
    {
      v8 = 0;
      do
      {
        v46 = v48;
        v47 = 0x200000000;
        v9 = *((unsigned int *)this + 14);
        if ((_DWORD)v9)
        {
          v11 = (llvm::VPValue **)*((_QWORD *)this + 6);
          v12 = 8 * v9;
          do
          {
            v13 = llvm::VPTransformState::get(a2, *v11, v8);
            v9 = v47;
            if (v47 >= (unint64_t)HIDWORD(v47))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, (uint64_t)v48, v47 + 1, 8);
              v9 = v47;
            }
            *((_QWORD *)v46 + v9) = v13;
            LODWORD(v9) = v47 + 1;
            LODWORD(v47) = v47 + 1;
            ++v11;
            v12 -= 8;
          }
          while (v12);
          v10 = (uint64_t *)v46;
        }
        else
        {
          v10 = v48;
        }
        v14 = *(unsigned __int8 *)(v3 + 16) - 28;
        v45 = 257;
        NAryOp = llvm::IRBuilderBase::CreateNAryOp((uint64_t *)v4, v14, v10, v9, (uint64_t)v44, 0);
        v16 = NAryOp;
        if (NAryOp)
          v17 = NAryOp[16] >= 0x1Cu;
        else
          v17 = 0;
        if (v17)
        {
          llvm::Instruction::copyIRFlags((uint64_t)NAryOp, v3, 1);
          v18 = sub_1C477672C((uint64_t)a2 + 328, (uint64_t)this);
          v19 = *((_QWORD *)a2 + 42);
          v20 = v19 == *((_QWORD *)a2 + 41)
              ? (llvm::VPTransformState *)((char *)a2 + 348)
              : (llvm::VPTransformState *)((char *)a2 + 344);
          if (v18 != (_QWORD *)(v19 + 8 * *(unsigned int *)v20))
            llvm::Instruction::dropPoisonGeneratingFlags((llvm::Instruction *)v16);
        }
        sub_1C63D1D2C((uint64_t)a2, v2, (uint64_t)v16, v8);
        if (v16)
          v21 = v16[16] >= 0x1Cu;
        else
          v21 = 0;
        if (v21)
          llvm::InnerLoopVectorizer::addMetadata(*((llvm::InnerLoopVectorizer **)a2 + 39), (unsigned __int8 **)v16, (llvm::Instruction *)v3);
        if (v46 != v48)
          free(v46);
        ++v8;
      }
      while (v8 < *((_DWORD *)a2 + 2));
    }
  }
  else if (((1 << (v5 - 40)) & 0x3FFC000000) != 0)
  {
    llvm::InnerLoopVectorizer::setDebugLocFromInst(*((unsigned __int8 **)a2 + 39), v3, 0, 0);
    v22 = *(_QWORD *)v3;
    if (*((_DWORD *)a2 + 1) == 1 || *(_DWORD *)a2 != 1)
    {
      v24 = *(llvm::Type **)a2;
      v25 = *(uint64_t ***)v3;
      if (HIDWORD(*(_QWORD *)a2) == 1)
        llvm::ScalableVectorType::get(v25, v24);
      else
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v25, v24);
      v22 = v26;
    }
    if (*((_DWORD *)a2 + 2))
    {
      v27 = 0;
      do
      {
        v28 = llvm::VPTransformState::get(a2, **((llvm::VPValue ***)this + 6), v27);
        v29 = *(unsigned __int8 *)(v3 + 16) - 28;
        v45 = 257;
        v30 = sub_1C4773E38((uint64_t *)v4, v29, v28, v22, (uint64_t)v44);
        sub_1C63D1D2C((uint64_t)a2, v2, (uint64_t)v30, v27);
        if (v30)
          v31 = v30[16] >= 0x1Cu;
        else
          v31 = 0;
        if (v31)
          llvm::InnerLoopVectorizer::addMetadata(*((llvm::InnerLoopVectorizer **)a2 + 39), (unsigned __int8 **)v30, (llvm::Instruction *)v3);
        ++v27;
      }
      while (v27 < *((_DWORD *)a2 + 2));
    }
  }
  else
  {
    llvm::InnerLoopVectorizer::setDebugLocFromInst(*((unsigned __int8 **)a2 + 39), v3, 0, 0);
    if (*((_DWORD *)a2 + 2))
    {
      v32 = 0;
      do
      {
        v33 = (uint64_t *)llvm::VPTransformState::get(a2, **((llvm::VPValue ***)this + 6), v32);
        v34 = llvm::VPTransformState::get(a2, *(llvm::VPValue **)(*((_QWORD *)this + 6) + 8), v32);
        if (v5 == 82)
        {
          v35 = *(_DWORD *)(v4 + 96);
          v36 = *(_QWORD *)(v4 + 88);
          v42 = *(_BYTE *)(v4 + 102);
          v43 = *(_WORD *)(v4 + 100);
          v37 = *(unsigned __int8 *)(v3 + 17) >> 1;
          if (v37 == 127)
            v37 = -1;
          *(_DWORD *)(v4 + 96) = v37;
          v38 = *(_WORD *)(v3 + 18) & 0x3F;
          v45 = 257;
          FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper(v4, v38, v33, (uint64_t)v34, (uint64_t)v44, 0, 0);
          *(_DWORD *)(v4 + 96) = v35;
          *(_QWORD *)(v4 + 88) = v36;
          *(_WORD *)(v4 + 100) = v43;
          *(_BYTE *)(v4 + 102) = v42;
        }
        else
        {
          v40 = *(_WORD *)(v3 + 18) & 0x3F;
          v45 = 257;
          FCmpHelper = sub_1C4774B48(v4, v40, (uint64_t)v33, (uint64_t)v34, (uint64_t)v44);
        }
        sub_1C63D1D2C((uint64_t)a2, v2, FCmpHelper, v32);
        if (FCmpHelper)
          v41 = *(unsigned __int8 *)(FCmpHelper + 16) >= 0x1Cu;
        else
          v41 = 0;
        if (v41)
          llvm::InnerLoopVectorizer::addMetadata(*((llvm::InnerLoopVectorizer **)a2 + 39), (unsigned __int8 **)FCmpHelper, (llvm::Instruction *)v3);
        ++v32;
      }
      while (v32 < *((_DWORD *)a2 + 2));
    }
  }
}

void llvm::VPWidenGEPRecipe::execute(llvm::VPWidenGEPRecipe *this, llvm::VPTransformState *a2)
{
  uint64_t v4;
  unint64_t v5;
  llvm::Instruction *v6;
  BOOL v7;
  BOOL v8;
  uint64_t *v9;
  unsigned __int8 **v10;
  unsigned __int8 **v11;
  uint64_t v12;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  llvm::Type *v16;
  uint64_t VectorSplat;
  BOOL v18;
  unsigned int v19;
  llvm::VPValue *v20;
  unsigned __int8 *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t i;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  llvm::VPValue *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned int v32;
  llvm::Value *v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  llvm::GetElementPtrInst *v38;
  uint64_t v39;
  uint64_t *v40;
  llvm::GetElementPtrInst *v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 **v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  llvm::Instruction *v50;
  char v51[32];
  __int16 v52;
  unsigned __int8 *v53;
  char v54;
  __int16 v55;
  void *v56;
  uint64_t v57;
  _BYTE v58[16];
  __int16 v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 2);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) != 0)
    v5 = **(_QWORD **)v5;
  v6 = *(llvm::Instruction **)(v5 + 40);
  if (*(_DWORD *)a2)
    v7 = *((_DWORD *)a2 + 1) == 1;
  else
    v7 = 0;
  v8 = v7 || *(_DWORD *)a2 >= 2u;
  if (!v8 || !*((_BYTE *)this + 152) || !sub_1C54F8768((unint64_t *)this + 20))
  {
    if (!*((_DWORD *)a2 + 2))
      return;
    v19 = 0;
    v50 = v6;
    while (1)
    {
      v20 = (llvm::VPValue *)**((_QWORD **)this + 6);
      if (*((_BYTE *)this + 152))
      {
        LOBYTE(v57) = 0;
        v56 = 0;
        v21 = llvm::VPTransformState::get((uint64_t)a2, (uint64_t)v20, (unsigned int *)&v56);
      }
      else
      {
        v21 = llvm::VPTransformState::get(a2, v20, v19);
      }
      v22 = (uint64_t *)v21;
      v56 = v58;
      v57 = 0x400000000;
      v23 = *((unsigned int *)this + 14);
      if (v23 < 2)
      {
        v32 = 0;
      }
      else
      {
        for (i = 1; i != v23; ++i)
        {
          v25 = i - 1;
          v26 = *((_QWORD *)this + 20);
          if ((v26 & 1) != 0)
            v27 = (1 << v25) & (v26 >> 1) & ~(-1 << (v26 >> 58));
          else
            v27 = *(_QWORD *)(*(_QWORD *)v26 + 8 * (v25 >> 6)) & (1 << v25);
          v28 = *(llvm::VPValue **)(*((_QWORD *)this + 6) + 8 * i);
          if (v27)
          {
            v54 = 0;
            v53 = 0;
            v29 = llvm::VPTransformState::get((uint64_t)a2, (uint64_t)v28, (unsigned int *)&v53);
          }
          else
          {
            v29 = llvm::VPTransformState::get(a2, v28, v19);
          }
          v30 = v29;
          v31 = v57;
          if (v57 >= (unint64_t)HIDWORD(v57))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, (uint64_t)v58, v57 + 1, 8);
            v31 = v57;
          }
          *((_QWORD *)v56 + v31) = v30;
          v32 = v57 + 1;
          LODWORD(v57) = v57 + 1;
        }
      }
      if ((*((_BYTE *)v50 + 17) & 2) == 0)
        break;
      v34 = sub_1C477672C((uint64_t)a2 + 328, (uint64_t)this);
      v35 = *((_QWORD *)a2 + 42);
      if (v35 == *((_QWORD *)a2 + 41))
        v36 = (char *)a2 + 348;
      else
        v36 = (char *)a2 + 344;
      v33 = (llvm::Value *)v56;
      v32 = v57;
      if (v34 != (_QWORD *)(v35 + 8 * *(unsigned int *)v36))
        goto LABEL_48;
      v37 = (uint64_t *)*((_QWORD *)a2 + 34);
      v38 = (llvm::GetElementPtrInst *)*((_QWORD *)v50 + 8);
      v55 = 257;
      v39 = sub_1C53901A0(v37, v38, v22, (llvm::Value *)v56, v57, (uint64_t)&v53);
LABEL_49:
      v42 = v39;
      sub_1C63D1D2C((uint64_t)a2, (char *)this + 96, v39, v19);
      if (v42)
        v43 = *(unsigned __int8 *)(v42 + 16) >= 0x1Cu;
      else
        v43 = 0;
      if (v43)
        llvm::InnerLoopVectorizer::addMetadata(*((llvm::InnerLoopVectorizer **)a2 + 39), (unsigned __int8 **)v42, v50);
      if (v56 != v58)
        free(v56);
      if (++v19 >= *((_DWORD *)a2 + 2))
        return;
    }
    v33 = (llvm::Value *)v56;
LABEL_48:
    v40 = (uint64_t *)*((_QWORD *)a2 + 34);
    v41 = (llvm::GetElementPtrInst *)*((_QWORD *)v50 + 8);
    v52 = 257;
    v39 = sub_1C509D7B0(v40, v41, v22, v33, v32, (uint64_t)v51);
    goto LABEL_49;
  }
  v9 = (uint64_t *)*((_QWORD *)a2 + 34);
  llvm::Instruction::clone(v6);
  v11 = v10;
  v59 = 257;
  (*(void (**)(uint64_t, unsigned __int8 **, void **, uint64_t, uint64_t))(*(_QWORD *)v9[10] + 16))(v9[10], v10, &v56, v9[6], v9[7]);
  v12 = *((unsigned int *)v9 + 2);
  if ((_DWORD)v12)
  {
    v44 = *v9;
    v45 = v44 + 16 * v12;
    v46 = v11 + 6;
    do
    {
      v47 = *(_DWORD *)v44;
      v48 = *(unsigned __int8 **)(v44 + 8);
      if (v48)
      {
        if (!v47)
        {
          v53 = *(unsigned __int8 **)(v44 + 8);
          llvm::MetadataTracking::track((uint64_t)&v53, v48, 2);
LABEL_69:
          if (&v53 == v46)
          {
            if (v53)
              llvm::MetadataTracking::untrack((uint64_t)&v53, v53);
          }
          else
          {
            if (*v46)
              llvm::MetadataTracking::untrack((uint64_t)(v11 + 6), *v46);
            v49 = v53;
            *v46 = v53;
            if (v49)
              llvm::MetadataTracking::retrack((uint64_t)&v53, v49, (uint64_t)(v11 + 6));
          }
          goto LABEL_66;
        }
      }
      else
      {
        if (!*v46 && (*((_BYTE *)v11 + 23) & 0x20) == 0)
          goto LABEL_66;
        if (!v47)
        {
          v53 = 0;
          goto LABEL_69;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v11, v47, (llvm::MDNode *)v48);
LABEL_66:
      v44 += 16;
    }
    while (v44 != v45);
  }
  if (*((_DWORD *)a2 + 2))
  {
    v13 = 0;
    v14 = (char *)this + 96;
    do
    {
      v15 = *((_QWORD *)a2 + 34);
      v16 = *(llvm::Type **)a2;
      v59 = 257;
      VectorSplat = llvm::IRBuilderBase::CreateVectorSplat(v15, v16, (uint64_t ***)v11, (uint64_t)&v56);
      sub_1C63D1D2C((uint64_t)a2, v14, VectorSplat, v13);
      if (VectorSplat)
        v18 = *(unsigned __int8 *)(VectorSplat + 16) >= 0x1Cu;
      else
        v18 = 0;
      if (v18)
        llvm::InnerLoopVectorizer::addMetadata(*((llvm::InnerLoopVectorizer **)a2 + 39), (unsigned __int8 **)VectorSplat, v6);
      ++v13;
    }
    while (v13 < *((_DWORD *)a2 + 2));
  }
}

uint64_t llvm::VPWidenIntOrFpInductionRecipe::execute(llvm::VPWidenIntOrFpInductionRecipe *this, llvm::VPTransformState *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t PreheaderBBFor;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  llvm::Type *v18;
  uint64_t v19;
  llvm::ConstantInt *v20;
  uint64_t ***v21;
  llvm::Type *v22;
  uint64_t VectorSplat;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  llvm::ConstantInt ***v33;
  _QWORD *v34;
  llvm::Type *v35;
  int PrimitiveSizeInBits;
  unint64_t v37;
  llvm::ConstantInt ***v38;
  uint64_t *StepVector;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t **v49;
  uint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  char *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t **v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  llvm::Type ***v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  void *RuntimeVF;
  unsigned __int8 *v76;
  llvm::Type *v77;
  uint64_t Splat;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  unsigned int v84;
  BOOL v85;
  uint64_t v86;
  _QWORD *v88;
  _QWORD *v89;
  llvm::Value *v90;
  char *v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  unsigned __int8 *v95;
  unsigned __int8 *v96;
  unsigned __int8 **v97;
  unsigned __int8 *v98;
  unsigned __int8 *v99;
  unsigned __int8 **v100;
  unsigned int v101;
  unsigned __int8 *v102;
  unsigned __int8 **v103;
  unsigned __int8 *v104;
  uint64_t result;
  uint64_t v106;
  uint64_t v107;
  _DWORD *v108;
  int v109;
  uint64_t v110;
  llvm::ValueSymbolTable *v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  llvm::VPWidenIntOrFpInductionRecipe *v117;
  uint64_t ***v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  char v123;
  char v124;
  uint64_t v125;
  int v126;
  llvm::Type *v127;
  uint64_t v128;
  unsigned __int8 *v129;
  unsigned int v130;
  uint64_t v131;
  unsigned __int8 *v132;
  unsigned __int8 *v133;
  _QWORD v134[4];
  __int16 v135;
  _QWORD v136[4];
  __int16 v137;
  char *v138;
  uint64_t v139;
  _BYTE v140[16];
  __int16 v141;
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 20);
  v5 = *((_QWORD *)this + 2);
  v6 = v5 & 0xFFFFFFFFFFFFFFF8;
  if ((v5 & 4) != 0)
    v6 = **(_QWORD **)v6;
  v7 = *(_QWORD *)(v6 + 40);
  if (!v7 || *(_BYTE *)(v7 + 16) != 66)
    v7 = *((_QWORD *)this + 19);
  v8 = *(unsigned __int8 **)(**((_QWORD **)this + 6) + 40);
  v9 = *((_QWORD *)a2 + 34);
  v126 = *(_DWORD *)(v9 + 96);
  v125 = *(_QWORD *)(v9 + 88);
  v123 = *(_BYTE *)(v9 + 101);
  v124 = *(_BYTE *)(v9 + 100);
  v122 = *(_BYTE *)(v9 + 102);
  v10 = *(_QWORD *)(v4 + 40);
  if (v10 && sub_1C4774A9C(v10))
  {
    v11 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 40) + 17) >> 1;
    if (v11 == 127)
      v11 = -1;
    *(_DWORD *)(v9 + 96) = v11;
  }
  v12 = *(_QWORD *)(*((_QWORD *)this + 6) + 8);
  LOBYTE(v139) = 0;
  v138 = 0;
  v129 = llvm::VPTransformState::get((uint64_t)a2, v12, (unsigned int *)&v138);
  v120 = *(_QWORD *)(v9 + 48);
  v116 = *(_QWORD *)(v9 + 56);
  PreheaderBBFor = llvm::VPTransformState::CFGState::getPreheaderBBFor((llvm::VPTransformState *)((char *)a2 + 80), this);
  v14 = 0;
  v121 = PreheaderBBFor;
  v15 = *(_QWORD *)(PreheaderBBFor + 40);
  if (v15)
    v16 = v15 - 24;
  else
    v16 = 0;
  if (*(unsigned __int8 *)(v16 + 16) - 29 >= 0xB)
    v16 = 0;
  *(_QWORD *)(v9 + 48) = *(_QWORD *)(v16 + 40);
  *(_QWORD *)(v9 + 56) = v16 + 24;
  v17 = *(char **)(v16 + 48);
  v138 = v17;
  if (v17)
  {
    llvm::MetadataTracking::track((uint64_t)&v138, (unsigned __int8 *)v17, 2);
    v14 = v138;
  }
  sub_1C4774EF4(v9, 0, (uint64_t)v14);
  v18 = (llvm::Type *)v138;
  if (v138)
    llvm::MetadataTracking::untrack((uint64_t)&v138, (unsigned __int8 *)v138);
  v117 = this;
  if (*(_BYTE *)(v7 + 16) == 66)
  {
    v19 = *(_QWORD *)v7;
    v141 = 257;
    v129 = sub_1C4773E38((uint64_t *)v9, 38, v129, v19, (uint64_t)&v138);
    v141 = 257;
    v8 = sub_1C4773E38((uint64_t *)v9, 38, v8, v19, (uint64_t)&v138);
  }
  v20 = *(llvm::ConstantInt **)v8;
  if (*(_BYTE *)(*(_QWORD *)v8 + 8) == 13)
    v21 = (uint64_t ***)llvm::ConstantInt::get(v20, 0, (const llvm::APInt *)1);
  else
    v21 = (uint64_t ***)llvm::ConstantFP::get((llvm::ConstantFP **)v20, v18, 0.0);
  v118 = v21;
  v22 = *(llvm::Type **)a2;
  v141 = 257;
  VectorSplat = llvm::IRBuilderBase::CreateVectorSplat(v9, v22, (uint64_t ***)v8, (uint64_t)&v138);
  v24 = (_QWORD *)VectorSplat;
  v25 = *(_QWORD *)(v4 + 40);
  v131 = v7;
  v115 = v4;
  if (v25)
    v26 = *(unsigned __int8 *)(v25 + 16) - 28;
  else
    v26 = 31;
  v114 = v26;
  v27 = *((_QWORD *)a2 + 34);
  v28 = *(_QWORD *)VectorSplat;
  v29 = *(unsigned int *)(*(_QWORD *)VectorSplat + 32);
  v30 = *(_DWORD *)(*(_QWORD *)VectorSplat + 8);
  v31 = *(_QWORD *)VectorSplat;
  if ((*(_DWORD *)(*(_QWORD *)VectorSplat + 8) & 0xFE) == 0x12)
    v31 = **(_QWORD **)(v28 + 16);
  v127 = (llvm::Type *)(v29 | ((unint64_t)(v30 == 19) << 32));
  v138 = v140;
  v139 = 0x800000000;
  v32 = *(unsigned __int8 *)(v31 + 8);
  v33 = (llvm::ConstantInt ***)v28;
  if (v32 <= 6)
  {
    v34 = *(_QWORD **)v31;
    v35 = (llvm::Type *)v31;
    if ((v32 & 0xFE) == 0x12)
      v35 = **(llvm::Type ***)(v31 + 16);
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v35);
    LODWORD(v136[0]) = PrimitiveSizeInBits;
    if (PrimitiveSizeInBits <= 63)
    {
      if (PrimitiveSizeInBits <= 31)
      {
        switch(PrimitiveSizeInBits)
        {
          case 16:
            v37 = *v34 + 1936;
            goto LABEL_41;
          case 8:
            v37 = *v34 + 1912;
            goto LABEL_41;
          case 1:
            v37 = *v34 + 1888;
            goto LABEL_41;
        }
      }
      else if (PrimitiveSizeInBits == 32)
      {
        v37 = *v34 + 1960;
        goto LABEL_41;
      }
    }
    else
    {
      if (PrimitiveSizeInBits == 64)
      {
        v37 = *v34 + 1984;
LABEL_41:
        if (v30 == 19)
          llvm::ScalableVectorType::get((uint64_t **)v37, (llvm::Type *)v29);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v37, (llvm::Type *)v29);
        v33 = v38;
        goto LABEL_44;
      }
      if (PrimitiveSizeInBits == 128)
      {
        v37 = *v34 + 2008;
        goto LABEL_41;
      }
    }
    v108 = sub_1C5270984(*v34 + 2168, v136);
    v37 = *((_QWORD *)v108 + 1);
    if (!v37)
    {
      v37 = sub_1C484358C(*v34 + 2040, 24, 3);
      v109 = v136[0];
      *(_QWORD *)v37 = v34;
      *(_QWORD *)(v37 + 16) = 0;
      *(_QWORD *)(v37 + 8) = (v109 << 8) | 0xDu;
      *((_QWORD *)v108 + 1) = v37;
    }
    goto LABEL_41;
  }
LABEL_44:
  v137 = 257;
  StepVector = (uint64_t *)llvm::IRBuilderBase::CreateStepVector(v27, v33, (uint64_t)v136);
  v137 = 257;
  v40 = llvm::IRBuilderBase::CreateVectorSplat(v27, v127, v118, (uint64_t)v136);
  if (*(_BYTE *)(v31 + 8) != 13)
  {
    v137 = 257;
    v65 = (uint64_t *)sub_1C5345CE4(v27, StepVector, (uint64_t *)v28, (uint64_t)v136);
    v137 = 257;
    v66 = (uint64_t *)sub_1C534554C(v27, v65, v40, (uint64_t)v136, 0);
    v137 = 257;
    v51 = v129;
    v67 = llvm::IRBuilderBase::CreateVectorSplat(v27, v127, (uint64_t ***)v129, (uint64_t)v136);
    v137 = 257;
    v68 = sub_1C4772428(v27, v66, v67, (uint64_t)v136, 0);
    v136[0] = "induction";
    v137 = 259;
    v64 = (uint64_t)sub_1C4773860(v27, v114, v24, v68, (uint64_t)v136, 0);
LABEL_64:
    v54 = (uint64_t *)v64;
    goto LABEL_65;
  }
  v135 = 257;
  v41 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v27 + 72) + 16))(*(_QWORD *)(v27 + 72), StepVector, v40, 0, 0);
  if (!v41)
  {
    v137 = 257;
    v42 = (char *)operator new(0x80uLL);
    *(_QWORD *)v42 = 0;
    *((_QWORD *)v42 + 2) = 0;
    *((_QWORD *)v42 + 1) = 0;
    *((_QWORD *)v42 + 5) = 0;
    *((_QWORD *)v42 + 6) = 0;
    *((_QWORD *)v42 + 4) = 0;
    v43 = (uint64_t *)(v42 + 32);
    *((_QWORD *)v42 + 8) = *StepVector;
    v44 = (uint64_t)(v42 + 64);
    *((_QWORD *)v42 + 3) = v42 + 64;
    *((_QWORD *)v42 + 7) = v42 + 64;
    *((_QWORD *)v42 + 9) = 0;
    v42[80] = 41;
    v42[81] = 0;
    *((_WORD *)v42 + 41) = 0;
    *((_DWORD *)v42 + 21) = 2;
    *((_DWORD *)v42 + 30) = 0;
    *(_OWORD *)(v42 + 104) = 0u;
    *(_OWORD *)(v42 + 88) = 0u;
    *(_QWORD *)v42 = StepVector;
    v47 = StepVector[1];
    v46 = StepVector + 1;
    v45 = v47;
    *((_QWORD *)v42 + 1) = v47;
    if (v47)
      *(_QWORD *)(v45 + 16) = v42 + 8;
    *((_QWORD *)v42 + 2) = v46;
    *v46 = v42;
    if (*((_QWORD *)v42 + 4))
    {
      **((_QWORD **)v42 + 6) = *((_QWORD *)v42 + 5);
      v112 = *((_QWORD *)v42 + 5);
      if (v112)
        *(_QWORD *)(v112 + 16) = *((_QWORD *)v42 + 6);
    }
    *v43 = v40;
    if (v40)
    {
      v50 = *(_QWORD *)(v40 + 8);
      v49 = (uint64_t **)(v40 + 8);
      v48 = v50;
      *((_QWORD *)v42 + 5) = v50;
      if (v50)
        *(_QWORD *)(v48 + 16) = v42 + 40;
      *((_QWORD *)v42 + 6) = v49;
      *v49 = v43;
    }
    llvm::Value::setName((uint64_t ***)v42 + 8, (uint64_t)v136);
    v41 = sub_1C4773754((uint64_t *)v27, v44, (uint64_t)v134);
  }
  v137 = 257;
  v51 = v129;
  v52 = llvm::IRBuilderBase::CreateVectorSplat(v27, v127, (uint64_t ***)v129, (uint64_t)v136);
  v137 = 257;
  v53 = sub_1C4EC4040(v27, v41, v52, (uint64_t)v136, 0, 0);
  v134[0] = "induction";
  v135 = 259;
  v54 = (uint64_t *)(*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v27 + 72) + 16))(*(_QWORD *)(v27 + 72), v24, v53, 0, 0);
  if (!v54)
  {
    v137 = 257;
    v55 = (char *)operator new(0x80uLL);
    *(_QWORD *)v55 = 0;
    *((_QWORD *)v55 + 2) = 0;
    *((_QWORD *)v55 + 1) = 0;
    *((_QWORD *)v55 + 5) = 0;
    *((_QWORD *)v55 + 6) = 0;
    *((_QWORD *)v55 + 4) = 0;
    v56 = (uint64_t *)(v55 + 32);
    *((_QWORD *)v55 + 8) = *v24;
    v57 = (uint64_t)(v55 + 64);
    *((_QWORD *)v55 + 3) = v55 + 64;
    *((_QWORD *)v55 + 7) = v55 + 64;
    *((_QWORD *)v55 + 9) = 0;
    v55[80] = 41;
    v55[81] = 0;
    *((_WORD *)v55 + 41) = 0;
    *((_DWORD *)v55 + 21) = 2;
    *((_DWORD *)v55 + 30) = 0;
    *(_OWORD *)(v55 + 104) = 0u;
    *(_OWORD *)(v55 + 88) = 0u;
    *(_QWORD *)v55 = v24;
    v60 = v24[1];
    v59 = v24 + 1;
    v58 = v60;
    *((_QWORD *)v55 + 1) = v60;
    if (v60)
      *(_QWORD *)(v58 + 16) = v55 + 8;
    *((_QWORD *)v55 + 2) = v59;
    *v59 = v55;
    if (*((_QWORD *)v55 + 4))
    {
      **((_QWORD **)v55 + 6) = *((_QWORD *)v55 + 5);
      v113 = *((_QWORD *)v55 + 5);
      if (v113)
        *(_QWORD *)(v113 + 16) = *((_QWORD *)v55 + 6);
    }
    *v56 = v53;
    if (v53)
    {
      v63 = *(_QWORD *)(v53 + 8);
      v62 = (uint64_t **)(v53 + 8);
      v61 = v63;
      *((_QWORD *)v55 + 5) = v63;
      if (v63)
        *(_QWORD *)(v61 + 16) = v55 + 40;
      *((_QWORD *)v55 + 6) = v62;
      *v62 = v56;
    }
    llvm::Value::setName((uint64_t ***)v55 + 8, (uint64_t)v136);
    v64 = sub_1C4773754((uint64_t *)v27, v57, (uint64_t)v134);
    goto LABEL_64;
  }
LABEL_65:
  v69 = v131;
  if (v138 != v140)
    free(v138);
  v70 = *(llvm::Type ****)v51;
  v71 = *(unsigned __int8 *)(*(_QWORD *)v51 + 8);
  if (v71 == 13)
  {
    v72 = 17;
    v130 = 13;
  }
  else
  {
    v73 = *(_QWORD *)(v115 + 40);
    if (v73)
      v74 = *(unsigned __int8 *)(v73 + 16) - 28;
    else
      v74 = 31;
    v130 = v74;
    if (v71 <= 6)
    {
      RuntimeVF = sub_1C6082244((uint64_t *)v9, v70, *(_QWORD *)a2);
      v72 = 18;
      goto LABEL_76;
    }
    v72 = 18;
  }
  RuntimeVF = llvm::getRuntimeVF((uint64_t *)v9, (llvm::ConstantInt *)v70, *(_QWORD *)a2);
LABEL_76:
  v141 = 257;
  v76 = sub_1C4773860(v9, v72, v51, (uint64_t)RuntimeVF, (uint64_t)&v138, 0);
  v77 = *(llvm::Type **)a2;
  if (v76[16] > 0x14u)
  {
    v141 = 257;
    Splat = llvm::IRBuilderBase::CreateVectorSplat(v9, v77, (uint64_t ***)v76, (uint64_t)&v138);
  }
  else
  {
    Splat = (uint64_t)llvm::ConstantVector::getSplat(*(llvm::Type **)a2, (uint64_t)v76, (llvm::Constant *)v76);
  }
  v128 = Splat;
  if (v120)
  {
    sub_1C4D8AE2C(v9, v120, v116);
  }
  else
  {
    *(_QWORD *)(v9 + 48) = 0;
    *(_QWORD *)(v9 + 56) = 0;
  }
  v79 = *v54;
  v138 = "vec.ind";
  v141 = 259;
  v80 = *((_QWORD *)a2 + 11);
  v81 = (uint64_t *)(v80 + 40);
  v82 = *(uint64_t **)(v80 + 48);
  v119 = (uint64_t)v54;
  if (v82 != v81)
  {
    while (1)
    {
      v83 = v82 - 3;
      if (!v82)
        v83 = 0;
      if (*((_BYTE *)v83 + 16) != 83)
        break;
      v82 = (uint64_t *)v82[1];
      if (v82 == v81)
        goto LABEL_93;
    }
    v84 = *((unsigned __int8 *)v82 - 8) - 38;
    v85 = v84 > 0x38;
    v86 = (1 << v84) & 0x100060000000001;
    if (v85 || v86 == 0)
      v81 = v82;
    else
      v81 = (uint64_t *)v82[1];
  }
LABEL_93:
  v88 = operator new(0x48uLL);
  v89 = v88;
  v88[1] = v79;
  v90 = (llvm::Value *)(v88 + 1);
  *v88 = 0;
  v88[2] = 0;
  v88[3] = 0x4000000000000053;
  *((_OWORD *)v88 + 2) = 0u;
  v91 = (char *)(v88 + 4);
  *((_OWORD *)v88 + 3) = 0u;
  *((_DWORD *)v88 + 16) = 0;
  if (v81)
  {
    v106 = v81[2];
    v88[6] = v106;
    *(_WORD *)(v106 + 18) &= ~0x8000u;
    if ((*((_BYTE *)v88 + 31) & 0x10) != 0)
    {
      v110 = *(_QWORD *)(v106 + 56);
      if (v110)
      {
        v111 = *(llvm::ValueSymbolTable **)(v110 + 104);
        if (v111)
          llvm::ValueSymbolTable::reinsertValue(v111, v90);
      }
    }
    v107 = *v81;
    v89[4] = *v81;
    v89[5] = v81;
    *(_QWORD *)(v107 + 8) = v91;
    *v81 = (uint64_t)v91;
  }
  *((_DWORD *)v89 + 17) = 2;
  llvm::Value::setName((uint64_t ***)v90, (uint64_t)&v138);
  v92 = *((unsigned int *)v89 + 17);
  v93 = operator new(40 * v92);
  *v89 = v93;
  if ((_DWORD)v92)
  {
    v94 = &v93[4 * v92];
    do
    {
      *v93 = 0;
      v93[1] = 0;
      v93[2] = 0;
      v93[3] = v90;
      v93 += 4;
    }
    while (v93 != v94);
  }
  v95 = *(unsigned __int8 **)(v131 + 48);
  v133 = v95;
  if (v95)
    llvm::MetadataTracking::track((uint64_t)&v133, v95, 2);
  v98 = (unsigned __int8 *)v89[7];
  v97 = (unsigned __int8 **)(v89 + 7);
  v96 = v98;
  if (v98)
    llvm::MetadataTracking::untrack((uint64_t)v97, v96);
  v99 = v133;
  *v97 = v133;
  if (v99)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v133, v99, (uint64_t)v97);
    v133 = 0;
  }
  v100 = (unsigned __int8 **)v90;
  if (*((_DWORD *)a2 + 2))
  {
    v101 = 0;
    v100 = (unsigned __int8 **)v90;
    do
    {
      sub_1C63D1D2C((uint64_t)a2, (char *)v117 + 96, (uint64_t)v100, v101);
      if (*(_BYTE *)(v69 + 16) == 66)
        llvm::InnerLoopVectorizer::addMetadata(*((llvm::InnerLoopVectorizer **)a2 + 39), v100, (llvm::Instruction *)v69);
      v138 = "step.add";
      v141 = 259;
      v100 = (unsigned __int8 **)sub_1C4773860(v9, v130, v100, v128, (uint64_t)&v138, 0);
      v102 = *(unsigned __int8 **)(v69 + 48);
      v132 = v102;
      if (v102)
        llvm::MetadataTracking::track((uint64_t)&v132, v102, 2);
      v103 = v100 + 6;
      if (&v132 == v100 + 6)
      {
        if (v132)
          llvm::MetadataTracking::untrack((uint64_t)&v132, v132);
      }
      else
      {
        if (*v103)
          llvm::MetadataTracking::untrack((uint64_t)(v100 + 6), *v103);
        v104 = v132;
        *v103 = v132;
        if (v104)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v132, v104, (uint64_t)(v100 + 6));
          v132 = 0;
        }
      }
      ++v101;
      v69 = v131;
    }
    while (v101 < *((_DWORD *)a2 + 2));
  }
  v138 = "vec.ind.next";
  v141 = 259;
  llvm::Value::setName((uint64_t ***)v100, (uint64_t)&v138);
  sub_1C477667C(v90, v119, v121);
  result = sub_1C477667C(v90, (uint64_t)v100, v121);
  *(_DWORD *)(v9 + 96) = v126;
  *(_QWORD *)(v9 + 88) = v125;
  *(_BYTE *)(v9 + 100) = v124;
  *(_BYTE *)(v9 + 101) = v123;
  *(_BYTE *)(v9 + 102) = v122;
  return result;
}

unsigned __int8 *sub_1C6082244(uint64_t *a1, llvm::Type ***this, unint64_t a3)
{
  llvm::Type **v6;
  llvm::Type *v7;
  int PrimitiveSizeInBits;
  llvm::ConstantInt *v9;
  uint64_t *RuntimeVF;
  _DWORD *v12;
  _DWORD *v13;
  int v14;
  _DWORD v15[8];
  __int16 v16;

  v6 = *this;
  v7 = (llvm::Type *)this;
  if (((_DWORD)this[1] & 0xFE) == 0x12)
    v7 = *this[2];
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v7);
  v15[0] = PrimitiveSizeInBits;
  if (PrimitiveSizeInBits <= 63)
  {
    if (PrimitiveSizeInBits <= 31)
    {
      switch(PrimitiveSizeInBits)
      {
        case 16:
          v9 = (llvm::Type *)((char *)*v6 + 1936);
          goto LABEL_11;
        case 8:
          v9 = (llvm::Type *)((char *)*v6 + 1912);
          goto LABEL_11;
        case 1:
          v9 = (llvm::Type *)((char *)*v6 + 1888);
          goto LABEL_11;
      }
    }
    else if (PrimitiveSizeInBits == 32)
    {
      v9 = (llvm::Type *)((char *)*v6 + 1960);
      goto LABEL_11;
    }
  }
  else
  {
    if (PrimitiveSizeInBits == 64)
    {
      v9 = (llvm::Type *)((char *)*v6 + 1984);
      goto LABEL_11;
    }
    if (PrimitiveSizeInBits == 128)
    {
      v9 = (llvm::Type *)((char *)*v6 + 2008);
      goto LABEL_11;
    }
  }
  v12 = sub_1C5270984((uint64_t)*v6 + 2168, v15);
  v9 = (llvm::ConstantInt *)*((_QWORD *)v12 + 1);
  if (!v9)
  {
    v13 = v12;
    v9 = (llvm::ConstantInt *)sub_1C484358C((uint64_t)*v6 + 2040, 24, 3);
    v14 = v15[0];
    *(_QWORD *)v9 = v6;
    *((_QWORD *)v9 + 2) = 0;
    *((_QWORD *)v9 + 1) = (v14 << 8) | 0xDu;
    *((_QWORD *)v13 + 1) = v9;
  }
LABEL_11:
  RuntimeVF = (uint64_t *)llvm::getRuntimeVF(a1, v9, a3);
  v16 = 257;
  return sub_1C5345CE4((uint64_t)a1, RuntimeVF, (uint64_t *)this, (uint64_t)v15);
}

void llvm::VPScalarIVStepsRecipe::execute(llvm::VPScalarIVStepsRecipe *this, llvm::VPTransformState *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *Plan;
  uint64_t v20;
  llvm::VPValue *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unsigned __int8 *v26;
  uint64_t ***v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  BOOL v32;
  unsigned int v33;
  _QWORD *v34;
  llvm::ConstantInt *v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  llvm::Value **RuntimeVF;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t **v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t *v68;
  llvm::Type *v69;
  int PrimitiveSizeInBits;
  uint64_t v71;
  llvm::VPTransformState *v72;
  char v73;
  llvm::Type *v74;
  uint64_t *v75;
  llvm::Type *v76;
  llvm::ConstantInt ***v77;
  llvm::Type *v78;
  llvm::Type *v79;
  unint64_t v80;
  llvm::Type *v81;
  uint64_t ***StepForVF;
  char v83;
  uint64_t i;
  void *v85;
  unsigned __int8 *v86;
  unsigned __int8 *v87;
  unsigned __int8 *v88;
  llvm::Type *v89;
  _QWORD *v90;
  uint64_t *v91;
  char *v92;
  unsigned __int8 **v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  unsigned __int8 **v97;
  uint64_t v98;
  unsigned __int8 *v99;
  unsigned __int8 *v100;
  uint64_t v101;
  _DWORD *v102;
  _DWORD *v103;
  uint64_t **v104;
  int v105;
  uint64_t *v106;
  unsigned __int8 ***v107;
  _QWORD *v108;
  uint64_t VectorSplat;
  unsigned __int8 *StepVector;
  char v111;
  char v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t **v116;
  int v117;
  char v118;
  uint64_t v119;
  unsigned __int8 *v120;
  llvm::VPTransformState *v121;
  const char *v122;
  __int16 v123;
  _BYTE v124[32];
  __int16 v125;
  const char *v126;
  char v127;
  __int16 v128;

  v4 = *((_QWORD *)a2 + 34);
  v5 = *(_DWORD *)(v4 + 96);
  v6 = *(_QWORD *)(v4 + 88);
  v7 = *(_BYTE *)(v4 + 100);
  v8 = *(_BYTE *)(v4 + 101);
  v9 = *(_BYTE *)(v4 + 102);
  v10 = *(_QWORD *)(*((_QWORD *)this + 21) + 40);
  if (v10 && sub_1C4774A9C(v10))
  {
    v11 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 21) + 40) + 17) >> 1;
    if (v11 == 127)
      v11 = -1;
    *(_DWORD *)(*((_QWORD *)a2 + 34) + 96) = v11;
  }
  v12 = *(_QWORD *)(*((_QWORD *)this + 6) + 16);
  v127 = 0;
  v126 = 0;
  v13 = llvm::VPTransformState::get((uint64_t)a2, v12, (unsigned int *)&v126);
  v14 = **((_QWORD **)this + 6);
  v15 = v14 == 0;
  if (v14)
    v16 = v14 - 96;
  else
    v16 = 0;
  v17 = v16 + 96;
  if (v15)
    v18 = 0;
  else
    v18 = v17;
  v127 = 0;
  v126 = 0;
  v120 = llvm::VPTransformState::get((uint64_t)a2, v18, (unsigned int *)&v126);
  Plan = (uint64_t *)llvm::VPBlockBase::getPlan(*((llvm::VPBlockBase **)this + 11));
  v20 = sub_1C607CC58(Plan);
  if (v20)
    v21 = (llvm::VPValue *)(v20 + 96);
  else
    v21 = 0;
  v121 = a2;
  v22 = llvm::VPTransformState::get(a2, v21, 0);
  if (llvm::VPScalarIVStepsRecipe::isCanonical(this))
  {
    v23 = *((_QWORD *)this + 19);
    if (*(_QWORD *)v22 == v23)
    {
      v24 = (uint64_t)v121;
      goto LABEL_23;
    }
  }
  else
  {
    v23 = *((_QWORD *)this + 19);
  }
  v24 = (uint64_t)v121;
  v25 = (uint64_t *)*((_QWORD *)v121 + 34);
  if (*(_BYTE *)(v23 + 8) == 13)
  {
    v128 = 257;
    v26 = sub_1C4773B94(v25, v120, v23, (uint64_t)&v126);
  }
  else
  {
    v128 = 257;
    v26 = sub_1C4773E38(v25, 44, v120, v23, (uint64_t)&v126);
  }
  sub_1C606B5A0(*((_QWORD *)v121 + 34), (uint64_t)v26, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 8) + 40), (uint64_t)v13, *((_QWORD *)this + 21));
  v126 = "offset.idx";
  v128 = 259;
  v120 = (unsigned __int8 *)v27;
  llvm::Value::setName(v27, (uint64_t)&v126);
LABEL_23:
  v28 = *((_QWORD *)this + 20);
  v115 = v4;
  v114 = v6;
  v112 = v8;
  v113 = v7;
  v111 = v9;
  if (v28)
  {
    v29 = *(uint64_t **)(v24 + 272);
    v128 = 257;
    v120 = sub_1C4773E38(v29, 38, v120, v28, (uint64_t)&v126);
    v30 = *(uint64_t **)(v24 + 272);
    v31 = *((_QWORD *)this + 20);
    v128 = 257;
    v13 = sub_1C4773E38(v30, 38, v13, v31, (uint64_t)&v126);
  }
  if (*(_DWORD *)v24)
    v32 = *(_DWORD *)(v24 + 4) == 1;
  else
    v32 = 0;
  v119 = (uint64_t)v13;
  if (!v32 && *(_DWORD *)v24 <= 1u)
  {
    if (*(_DWORD *)(v24 + 8))
    {
      v33 = 0;
      v34 = v120 + 8;
      do
      {
        v35 = *(llvm::ConstantInt **)v13;
        v36 = *(uint64_t **)(v24 + 272);
        v37 = *(_QWORD *)v24 & 0xFFFFFFFF00000000 | (v33 * *(_QWORD *)v24);
        if (*(unsigned __int8 *)(*(_QWORD *)v13 + 8) > 6u)
        {
          RuntimeVF = llvm::getRuntimeVF(v36, v35, v37);
          v44 = *(_QWORD *)(v24 + 272);
          v125 = 257;
          v45 = sub_1C4EC4040(v44, (uint64_t)RuntimeVF, (uint64_t)v13, (uint64_t)v124, 0, 0);
          v122 = "induction";
          v123 = 259;
          v46 = (*(uint64_t (**)(_QWORD, unsigned __int8 *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v44 + 72)
                                                                                              + 16))(*(_QWORD *)(v44 + 72), v120, v45, 0, 0);
          if (!v46)
          {
            v128 = 257;
            v47 = (char *)operator new(0x80uLL);
            *(_QWORD *)v47 = 0;
            *((_QWORD *)v47 + 2) = 0;
            *((_QWORD *)v47 + 1) = 0;
            *((_QWORD *)v47 + 4) = 0;
            v48 = (uint64_t *)(v47 + 32);
            *((_QWORD *)v47 + 5) = 0;
            *((_QWORD *)v47 + 6) = 0;
            *((_QWORD *)v47 + 8) = *(_QWORD *)v120;
            v49 = (uint64_t)(v47 + 64);
            *((_QWORD *)v47 + 3) = v47 + 64;
            *((_QWORD *)v47 + 7) = v47 + 64;
            *((_QWORD *)v47 + 9) = 0;
            v47[80] = 41;
            v47[81] = 0;
            *((_WORD *)v47 + 41) = 0;
            *((_DWORD *)v47 + 21) = 2;
            *((_DWORD *)v47 + 30) = 0;
            *(_OWORD *)(v47 + 104) = 0u;
            *(_OWORD *)(v47 + 88) = 0u;
            *(_QWORD *)v47 = v120;
            v50 = *((_QWORD *)v120 + 1);
            *((_QWORD *)v47 + 1) = v50;
            if (v50)
              *(_QWORD *)(v50 + 16) = v47 + 8;
            *((_QWORD *)v47 + 2) = v34;
            *v34 = v47;
            if (*((_QWORD *)v47 + 4))
            {
              **((_QWORD **)v47 + 6) = *((_QWORD *)v47 + 5);
              v55 = *((_QWORD *)v47 + 5);
              if (v55)
                *(_QWORD *)(v55 + 16) = *((_QWORD *)v47 + 6);
            }
            *v48 = v45;
            if (v45)
            {
              v53 = *(_QWORD *)(v45 + 8);
              v52 = (uint64_t **)(v45 + 8);
              v51 = v53;
              *((_QWORD *)v47 + 5) = v53;
              if (v53)
                *(_QWORD *)(v51 + 16) = v47 + 40;
              *((_QWORD *)v47 + 6) = v52;
              *v52 = v48;
            }
            llvm::Value::setName((uint64_t ***)v47 + 8, (uint64_t)&v126);
            v46 = sub_1C4773754((uint64_t *)v44, v49, (uint64_t)&v122);
            v24 = (uint64_t)v121;
          }
        }
        else
        {
          v38 = (uint64_t *)sub_1C6082244(v36, (llvm::Type ***)v35, v37);
          v39 = *(_QWORD *)(v24 + 272);
          v128 = 257;
          v40 = sub_1C4772428(v39, v38, (uint64_t)v13, (uint64_t)&v126, 0);
          v41 = *(_QWORD *)(*((_QWORD *)this + 21) + 40);
          if (v41)
            v42 = *(unsigned __int8 *)(v41 + 16) - 28;
          else
            v42 = 31;
          v54 = *(_QWORD *)(v24 + 272);
          v128 = 257;
          v46 = (uint64_t)sub_1C4773860(v54, v42, v120, v40, (uint64_t)&v126, 0);
        }
        sub_1C63D1D2C(v24, (char *)this + 96, v46, v33++);
      }
      while (v33 < *(_DWORD *)(v24 + 8));
    }
    goto LABEL_117;
  }
  v56 = *(_QWORD *)v120;
  if ((*(_DWORD *)(*(_QWORD *)v120 + 8) & 0xFE) == 0x12)
  {
    v56 = **(_QWORD **)(v56 + 16);
    v57 = *(unsigned __int8 *)(v56 + 8);
  }
  else
  {
    v57 = *(_DWORD *)(*(_QWORD *)v120 + 8);
  }
  v58 = (char *)this + 96;
  if (v57 == 13)
  {
    v59 = 13;
    v60 = 17;
  }
  else
  {
    v61 = *(_QWORD *)(*((_QWORD *)this + 21) + 40);
    if (v61)
      v59 = *(unsigned __int8 *)(v61 + 16) - 28;
    else
      v59 = 31;
    v60 = 18;
  }
  v62 = *(_QWORD *)(v24 + 272);
  v63 = *((unsigned int *)this + 30);
  if ((_DWORD)v63)
  {
    v64 = (_QWORD *)*((_QWORD *)this + 14);
    v65 = 8 * v63;
    while (1)
    {
      v66 = *v64 ? *v64 - 40 : 0;
      if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v66 + 32))(v66, (char *)this + 96) & 1) == 0)
        break;
      ++v64;
      v65 -= 8;
      if (!v65)
        goto LABEL_66;
    }
    v118 = 0;
    v67 = *(_DWORD *)v121;
  }
  else
  {
LABEL_66:
    v67 = 1;
    v118 = 1;
  }
  v117 = v67;
  v68 = *(uint64_t **)v56;
  v69 = (llvm::Type *)v56;
  if ((*(_DWORD *)(v56 + 8) & 0xFE) == 0x12)
    v69 = **(llvm::Type ***)(v56 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v69);
  LODWORD(v126) = PrimitiveSizeInBits;
  if (PrimitiveSizeInBits <= 63)
  {
    if (PrimitiveSizeInBits <= 31)
    {
      switch(PrimitiveSizeInBits)
      {
        case 16:
          v71 = *v68 + 1936;
          goto LABEL_78;
        case 8:
          v71 = *v68 + 1912;
          goto LABEL_78;
        case 1:
          v71 = *v68 + 1888;
          goto LABEL_78;
      }
    }
    else if (PrimitiveSizeInBits == 32)
    {
      v71 = *v68 + 1960;
      goto LABEL_78;
    }
LABEL_124:
    v102 = sub_1C5270984(*v68 + 2168, &v126);
    v116 = (uint64_t **)*((_QWORD *)v102 + 1);
    if (!v116)
    {
      v103 = v102;
      v104 = (uint64_t **)sub_1C484358C(*v68 + 2040, 24, 3);
      v105 = (int)v126;
      *v104 = v68;
      v104[2] = 0;
      v104[1] = (uint64_t *)((v105 << 8) | 0xDu);
      v116 = v104;
      *((_QWORD *)v103 + 1) = v104;
    }
    goto LABEL_79;
  }
  if (PrimitiveSizeInBits != 64)
  {
    if (PrimitiveSizeInBits == 128)
    {
      v71 = *v68 + 2008;
      goto LABEL_78;
    }
    goto LABEL_124;
  }
  v71 = *v68 + 1984;
LABEL_78:
  v116 = (uint64_t **)v71;
LABEL_79:
  v72 = v121;
  v73 = v118;
  if (*((_DWORD *)v121 + 1) != 1)
    v73 = 1;
  if ((v73 & 1) != 0)
  {
    v108 = 0;
    VectorSplat = 0;
    StepVector = 0;
    v106 = 0;
  }
  else
  {
    v74 = *(llvm::Type **)v121;
    if (HIDWORD(*(_QWORD *)v121) == 1)
      llvm::ScalableVectorType::get((uint64_t **)v56, v74);
    else
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v56, v74);
    v106 = v75;
    v76 = *(llvm::Type **)v121;
    if (HIDWORD(*(_QWORD *)v121) == 1)
      llvm::ScalableVectorType::get(v116, v76);
    else
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v116, v76);
    v128 = 257;
    StepVector = llvm::IRBuilderBase::CreateStepVector(v62, v77, (uint64_t)&v126);
    v78 = *(llvm::Type **)v121;
    v128 = 257;
    VectorSplat = llvm::IRBuilderBase::CreateVectorSplat(v62, v78, (uint64_t ***)v13, (uint64_t)&v126);
    v79 = *(llvm::Type **)v121;
    v128 = 257;
    v108 = (_QWORD *)llvm::IRBuilderBase::CreateVectorSplat(v62, v79, (uint64_t ***)v120, (uint64_t)&v126);
  }
  if (*((_DWORD *)v121 + 2))
  {
    v80 = 0;
    v107 = (unsigned __int8 ***)(StepVector + 8);
    do
    {
      StepForVF = (uint64_t ***)llvm::createStepForVF((uint64_t *)v62, (llvm::ConstantInt *)v116, *(_QWORD *)v72, v80);
      v83 = v118;
      if (*((_DWORD *)v72 + 1) != 1)
        v83 = 1;
      if ((v83 & 1) == 0)
      {
        v89 = *(llvm::Type **)v72;
        v128 = 257;
        v90 = (_QWORD *)llvm::IRBuilderBase::CreateVectorSplat(v62, v89, StepForVF, (uint64_t)&v126);
        v125 = 257;
        v91 = (uint64_t *)(*(uint64_t (**)(_QWORD, _QWORD *, unsigned __int8 *, _QWORD, _QWORD))(**(_QWORD **)(v62 + 72) + 16))(*(_QWORD *)(v62 + 72), v90, StepVector, 0, 0);
        if (!v91)
        {
          v128 = 257;
          v92 = (char *)operator new(0x80uLL);
          *(_QWORD *)v92 = 0;
          *((_QWORD *)v92 + 1) = 0;
          *((_QWORD *)v92 + 2) = 0;
          *((_QWORD *)v92 + 5) = 0;
          *((_QWORD *)v92 + 6) = 0;
          *((_QWORD *)v92 + 4) = 0;
          v93 = (unsigned __int8 **)(v92 + 32);
          *((_QWORD *)v92 + 8) = *v90;
          *((_QWORD *)v92 + 3) = v92 + 64;
          *((_QWORD *)v92 + 7) = v92 + 64;
          *((_QWORD *)v92 + 9) = 0;
          v92[80] = 41;
          v92[81] = 0;
          *((_WORD *)v92 + 41) = 0;
          *((_DWORD *)v92 + 21) = 2;
          *((_DWORD *)v92 + 30) = 0;
          *(_OWORD *)(v92 + 104) = 0u;
          *(_OWORD *)(v92 + 88) = 0u;
          *(_QWORD *)v92 = v90;
          v96 = v90[1];
          v95 = v90 + 1;
          v94 = v96;
          *((_QWORD *)v92 + 1) = v96;
          if (v96)
            *(_QWORD *)(v94 + 16) = v92 + 8;
          *((_QWORD *)v92 + 2) = v95;
          *v95 = v92;
          if (*((_QWORD *)v92 + 4))
          {
            **((_QWORD **)v92 + 6) = *((_QWORD *)v92 + 5);
            v101 = *((_QWORD *)v92 + 5);
            if (v101)
              *(_QWORD *)(v101 + 16) = *((_QWORD *)v92 + 6);
          }
          *v93 = StepVector;
          if (StepVector)
          {
            v97 = *v107;
            *((_QWORD *)v92 + 5) = *v107;
            if (v97)
              v97[2] = (unsigned __int8 *)(v92 + 40);
            *((_QWORD *)v92 + 6) = v107;
            *v107 = v93;
          }
          v98 = (uint64_t)(v92 + 64);
          llvm::Value::setName((uint64_t ***)v92 + 8, (uint64_t)&v126);
          v91 = (uint64_t *)sub_1C4773754((uint64_t *)v62, v98, (uint64_t)v124);
        }
        if (*(unsigned __int8 *)(v56 + 8) <= 6u)
        {
          v128 = 257;
          v91 = (uint64_t *)sub_1C4773B3C(v62, v91, v106, (uint64_t)&v126);
        }
        v128 = 257;
        v99 = sub_1C4773860(v62, v60, v91, VectorSplat, (uint64_t)&v126, 0);
        v128 = 257;
        v100 = sub_1C4773860(v62, v59, v108, (uint64_t)v99, (uint64_t)&v126, 0);
        sub_1C63D1D2C((uint64_t)v121, v58, (uint64_t)v100, v80);
      }
      if (*(unsigned __int8 *)(v56 + 8) <= 6u)
      {
        v128 = 257;
        StepForVF = (uint64_t ***)sub_1C4773B3C(v62, (uint64_t *)StepForVF, (uint64_t *)v56, (uint64_t)&v126);
      }
      if (v117)
      {
        for (i = 0; i != v117; ++i)
        {
          if (*(_BYTE *)(v56 + 8) == 13)
            v85 = llvm::ConstantInt::get((llvm::ConstantInt *)v56, i, (const llvm::APInt *)1);
          else
            v85 = llvm::ConstantFP::get((llvm::ConstantFP **)v56, v81, (double)i);
          v128 = 257;
          v86 = sub_1C4773860(v62, v59, StepForVF, (uint64_t)v85, (uint64_t)&v126, 0);
          v128 = 257;
          v87 = sub_1C4773860(v62, v60, v86, v119, (uint64_t)&v126, 0);
          v128 = 257;
          v88 = sub_1C4773860(v62, v59, v120, (uint64_t)v87, (uint64_t)&v126, 0);
          v126 = (const char *)__PAIR64__(i, v80);
          v127 = 0;
          sub_1C606AC70(v121, (uint64_t)v58, (uint64_t)v88, (uint64_t)&v126);
        }
      }
      ++v80;
      v72 = v121;
    }
    while (v80 < *((unsigned int *)v121 + 2));
  }
LABEL_117:
  *(_DWORD *)(v115 + 96) = v5;
  *(_QWORD *)(v115 + 88) = v114;
  *(_BYTE *)(v115 + 100) = v113;
  *(_BYTE *)(v115 + 101) = v112;
  *(_BYTE *)(v115 + 102) = v111;
}

void llvm::VPInterleaveRecipe::execute(llvm::VPInterleaveRecipe *this, llvm::VPTransformState *a2)
{
  int *v4;
  char *v5;
  unint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  int v11;
  llvm::VPValue *v12;
  int v13;

  v4 = (int *)*((_QWORD *)a2 + 39);
  v5 = (char *)this + 16;
  v6 = *((_QWORD *)this + 2);
  v7 = (unsigned int *)*((_QWORD *)this + 12);
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
    {
      v9 = v6 & 0xFFFFFFFFFFFFFFF8;
      v5 = *(char **)v9;
      v8 = *(unsigned int *)(v9 + 8);
    }
    else
    {
      v8 = 1;
    }
  }
  else
  {
    v5 = 0;
    v8 = 0;
  }
  v10 = (unint64_t *)*((_QWORD *)this + 6);
  v11 = *((_DWORD *)this + 14);
  if (*((_BYTE *)this + 104))
  {
    v12 = (llvm::VPValue *)v10[v11 - 1];
    v13 = -2;
  }
  else
  {
    v12 = 0;
    v13 = -1;
  }
  llvm::InnerLoopVectorizer::vectorizeInterleaveGroup(v4, v7, (uint64_t)v5, v8, a2, *v10, (uint64_t)(v10 + 1), (v13 + v11), v12);
}

uint64_t llvm::VPReductionRecipe::execute(llvm::VPReductionRecipe *this, llvm::VPTransformState *a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int i;
  uint64_t *Select;
  llvm::VPValue *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ***v17;
  uint64_t ***v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t VectorSplat;
  uint64_t *v23;
  unsigned __int8 *FAddReduce;
  BOOL v25;
  uint64_t v26;
  uint64_t Opcode;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  char v34;
  char v35;
  char v36;
  uint64_t v37;
  _BYTE v38[32];
  __int16 v39;

  v4 = llvm::VPTransformState::get(a2, **((llvm::VPValue ***)this + 6), 0);
  v5 = *((_QWORD *)this + 19);
  v6 = *(_DWORD *)(v5 + 32);
  result = llvm::LoopVectorizeHints::allowReordering(*(llvm::LoopVectorizeHints **)(*(_QWORD *)(*((_QWORD *)a2 + 39)
                                                                                              + 400)
                                                                                  + 664));
  if (*(_BYTE *)(v5 + 57))
    v8 = result;
  else
    v8 = 1;
  v9 = *((_QWORD *)a2 + 34);
  v10 = *(unsigned int *)(v9 + 96);
  v37 = *(_QWORD *)(v9 + 88);
  v35 = *(_BYTE *)(v9 + 101);
  v36 = *(_BYTE *)(v9 + 100);
  v34 = *(_BYTE *)(v9 + 102);
  *(_DWORD *)(v9 + 96) = *(_DWORD *)(*((_QWORD *)this + 19) + 36);
  if (*((_DWORD *)a2 + 2))
  {
    for (i = 0; i < *((_DWORD *)a2 + 2); ++i)
    {
      Select = (uint64_t *)llvm::VPTransformState::get(a2, *(llvm::VPValue **)(*((_QWORD *)this + 6) + 8), i);
      if (*((_DWORD *)this + 14) >= 3u)
      {
        v13 = *(llvm::VPValue **)(*((_QWORD *)this + 6) + 16);
        if (v13)
        {
          v33 = llvm::VPTransformState::get(a2, v13, i);
          v14 = v8;
          v15 = v10;
          v16 = *Select;
          llvm::RecurrenceDescriptor::getRecurrenceIdentity(*((_QWORD *)this + 19), v6);
          v18 = v17;
          v19 = *((_QWORD *)a2 + 34);
          v20 = *(unsigned int *)(v16 + 32);
          v21 = *(unsigned __int8 *)(v16 + 8);
          v10 = v15;
          v8 = v14;
          v39 = 257;
          VectorSplat = llvm::IRBuilderBase::CreateVectorSplat(v19, (llvm::Type *)(v20 | ((unint64_t)(v21 == 19) << 32)), v18, (uint64_t)v38);
          v23 = (uint64_t *)*((_QWORD *)a2 + 34);
          v39 = 257;
          Select = (uint64_t *)llvm::IRBuilderBase::CreateSelect(v23, (uint64_t)v33, Select, VectorSplat, (uint64_t)v38, 0);
        }
      }
      if ((v8 & 1) != 0)
      {
        v4 = llvm::VPTransformState::get(a2, **((llvm::VPValue ***)this + 6), i);
        llvm::createTargetReduction(*((_QWORD *)a2 + 34), *((_QWORD *)this + 20), *((_QWORD *)this + 19), (uint64_t)Select, 0);
      }
      else
      {
        if (*(_DWORD *)a2)
          v25 = *((_DWORD *)a2 + 1) == 1;
        else
          v25 = 0;
        v26 = *((_QWORD *)a2 + 34);
        if (v25 || *(_DWORD *)a2 >= 2u)
        {
          FAddReduce = (unsigned __int8 *)llvm::IRBuilderBase::CreateFAddReduce(*((llvm::IRBuilderBase **)a2 + 34), (llvm::Value *)v4, (llvm::Value *)Select);
        }
        else
        {
          Opcode = llvm::RecurrenceDescriptor::getOpcode(v6);
          v39 = 257;
          FAddReduce = sub_1C4773860(v26, Opcode, v4, (uint64_t)Select, (uint64_t)v38, 0);
        }
        v4 = FAddReduce;
      }
      v29 = FAddReduce;
      if (v6 <= 0xD && ((1 << v6) & 0x33C0) != 0)
      {
        llvm::createMinMaxOp(*((_QWORD *)a2 + 34), *(_DWORD *)(*((_QWORD *)this + 19) + 32));
      }
      else
      {
        if (!(_DWORD)v8)
          goto LABEL_25;
        v31 = *((_QWORD *)a2 + 34);
        v32 = llvm::RecurrenceDescriptor::getOpcode(v6);
        v39 = 257;
        v30 = sub_1C4773860(v31, v32, v29, (uint64_t)v4, (uint64_t)v38, 0);
      }
      v29 = v30;
LABEL_25:
      result = (uint64_t)sub_1C63D1D2C((uint64_t)a2, (char *)this + 96, (uint64_t)v29, i);
    }
  }
  *(_DWORD *)(v9 + 96) = v10;
  *(_QWORD *)(v9 + 88) = v37;
  *(_BYTE *)(v9 + 100) = v36;
  *(_BYTE *)(v9 + 101) = v35;
  *(_BYTE *)(v9 + 102) = v34;
  return result;
}

_QWORD *llvm::VPReplicateRecipe::execute(_QWORD *this, llvm::VPTransformState *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t **v8;
  llvm::Type *v9;
  llvm::PoisonValue *v10;
  llvm::Type *v11;
  _QWORD *v12;
  int v13;
  unsigned int v14;
  unsigned int i;
  int j;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  llvm::Instruction *v20;
  _DWORD v21[2];
  char v22;

  v3 = this;
  if (*((_BYTE *)a2 + 24))
  {
    v4 = this[2];
    v5 = v4 & 0xFFFFFFFFFFFFFFF8;
    if ((v4 & 4) != 0)
      v5 = **(_QWORD **)v5;
    this = llvm::InnerLoopVectorizer::scalarizeInstruction(*((_QWORD *)a2 + 39), *(llvm::Instruction **)(v5 + 40), (uint64_t)this, (uint64_t)a2 + 12, *((unsigned __int8 *)this + 153), (uint64_t)a2);
    if (*((_BYTE *)v3 + 154))
    {
      v6 = *(_DWORD *)a2 && *((_DWORD *)a2 + 1) == 1;
      if (v6 || *(_DWORD *)a2 >= 2u)
      {
        if (!*((_DWORD *)a2 + 4) && !*((_BYTE *)a2 + 20))
        {
          v8 = *(uint64_t ***)v3[17];
          v9 = *(llvm::Type **)a2;
          if (HIDWORD(*(_QWORD *)a2) == 1)
            llvm::ScalableVectorType::get(v8, v9);
          else
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v8, v9);
          v12 = llvm::PoisonValue::get(v10, v11);
          sub_1C63D1D2C((uint64_t)a2, v3 + 12, (uint64_t)v12, *((_DWORD *)a2 + 3));
        }
        return llvm::InnerLoopVectorizer::packScalarIntoVectorValue(*((_QWORD *)a2 + 39), (llvm::VPValue *)(v3 + 12), (unsigned int *)a2 + 3, (uint64_t *)a2);
      }
    }
  }
  else
  {
    if (*((_BYTE *)this + 152))
      v13 = 1;
    else
      v13 = *(_DWORD *)a2;
    v14 = *((_DWORD *)a2 + 2);
    if (v14)
    {
      for (i = 0; i < v14; ++i)
      {
        if (v13)
        {
          for (j = 0; j != v13; ++j)
          {
            v17 = v3[2];
            v18 = v17 & 0xFFFFFFFFFFFFFFF8;
            if ((v17 & 4) != 0)
              v18 = **(_QWORD **)v18;
            v19 = *((_QWORD *)a2 + 39);
            v20 = *(llvm::Instruction **)(v18 + 40);
            v21[0] = i;
            v21[1] = j;
            v22 = 0;
            this = llvm::InnerLoopVectorizer::scalarizeInstruction(v19, v20, (uint64_t)v3, (uint64_t)v21, *((unsigned __int8 *)v3 + 153), (uint64_t)a2);
          }
          v14 = *((_DWORD *)a2 + 2);
        }
      }
    }
  }
  return this;
}

uint64_t llvm::VPPredInstPHIRecipe::execute(llvm::VPPredInstPHIRecipe *this, llvm::VPTransformState *a2)
{
  unsigned __int8 *v4;
  llvm::BasicBlock *v5;
  uint64_t SinglePredecessor;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::PHINode *v10;
  llvm::Type *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t result;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _QWORD v26[4];
  __int16 v27;
  char *v28;

  v4 = llvm::VPTransformState::get((uint64_t)a2, **((_QWORD **)this + 6), (unsigned int *)a2 + 3);
  v5 = (llvm::BasicBlock *)*((_QWORD *)v4 + 5);
  SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v5);
  v7 = *((unsigned int *)a2 + 3);
  v28 = (char *)**((_QWORD **)this + 6);
  v26[0] = 0;
  if (sub_1C635A4E4((uint64_t *)a2 + 4, &v28, v26)
    && v26[0] != *((_QWORD *)a2 + 4) + 40 * *((unsigned int *)a2 + 12)
    && *(_DWORD *)(v26[0] + 16) > v7
    && *(_QWORD *)(*(_QWORD *)(v26[0] + 8) + 8 * v7))
  {
    v20 = llvm::VPTransformState::get(a2, **((llvm::VPValue ***)this + 6), v7);
    v21 = *((_QWORD *)a2 + 34);
    v22 = *(_QWORD *)v20;
    v27 = 257;
    v10 = (llvm::PHINode *)sub_1C4867E94(v21, v22, 2, (uint64_t)v26);
    sub_1C477667C(v10, *((_QWORD *)v20 - 12), SinglePredecessor);
    sub_1C477667C(v10, (uint64_t)v20, (uint64_t)v5);
    v28 = (char *)this + 96;
    v26[0] = 0;
    if (sub_1C635A4E4((uint64_t *)a2 + 4, &v28, v26)
      && v26[0] != *((_QWORD *)a2 + 4) + 40 * *((unsigned int *)a2 + 12)
      && *(_DWORD *)(v26[0] + 16) > v7
      && *(_QWORD *)(*(_QWORD *)(v26[0] + 8) + 8 * v7))
    {
      v28 = (char *)this + 96;
      v26[0] = 0;
      v24 = sub_1C635A4E4((uint64_t *)a2 + 4, &v28, v26);
      v25 = v26[0];
      if (!v24)
        v25 = *((_QWORD *)a2 + 4) + 40 * *((unsigned int *)a2 + 12);
      *(_QWORD *)(*(_QWORD *)(v25 + 8) + 8 * v7) = v10;
    }
    else
    {
      sub_1C63D1D2C((uint64_t)a2, (char *)this + 96, (uint64_t)v10, v7);
    }
    v28 = (char *)**((_QWORD **)this + 6);
    v26[0] = 0;
    result = sub_1C635A4E4((uint64_t *)a2 + 4, &v28, v26);
    v23 = v26[0];
    if (!(_DWORD)result)
      v23 = *((_QWORD *)a2 + 4) + 40 * *((unsigned int *)a2 + 12);
    v19 = (_QWORD *)(v23 + 8);
  }
  else
  {
    v8 = **(_QWORD **)(**((_QWORD **)this + 6) + 40);
    v9 = *((_QWORD *)a2 + 34);
    v27 = 257;
    v10 = (llvm::PHINode *)sub_1C4867E94(v9, v8, 2, (uint64_t)v26);
    v12 = llvm::PoisonValue::get(*(llvm::PoisonValue **)v4, v11);
    sub_1C477667C(v10, (uint64_t)v12, SinglePredecessor);
    sub_1C477667C(v10, (uint64_t)v4, (uint64_t)v5);
    if (sub_1C6083630((uint64_t)a2, (uint64_t)this + 96, *(_QWORD *)((char *)a2 + 12), *((_DWORD *)a2 + 5)))
    {
      v28 = (char *)this + 96;
      v26[0] = 0;
      v13 = sub_1C63DA058((uint64_t *)a2 + 7, &v28, v26);
      v14 = v26[0];
      if (!v13)
        v14 = *((_QWORD *)a2 + 7) + 120 * *((unsigned int *)a2 + 18);
      if (*((_BYTE *)a2 + 20) == 1)
        v15 = *(_DWORD *)a2;
      else
        v15 = 0;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 48 * *((unsigned int *)a2 + 3))
                + 8 * (*((_DWORD *)a2 + 4) + v15)) = v10;
    }
    else
    {
      sub_1C606AC70(a2, (uint64_t)this + 96, (uint64_t)v10, (uint64_t)a2 + 12);
    }
    v28 = (char *)**((_QWORD **)this + 6);
    v26[0] = 0;
    result = sub_1C63DA058((uint64_t *)a2 + 7, &v28, v26);
    v17 = v26[0];
    if (!(_DWORD)result)
      v17 = *((_QWORD *)a2 + 7) + 120 * *((unsigned int *)a2 + 18);
    if (*((_BYTE *)a2 + 20) == 1)
      v18 = *(_DWORD *)a2;
    else
      v18 = 0;
    v7 = *((_DWORD *)a2 + 4) + v18;
    v19 = (_QWORD *)(*(_QWORD *)(v17 + 8) + 48 * *((unsigned int *)a2 + 3));
  }
  *(_QWORD *)(*v19 + 8 * v7) = v10;
  return result;
}

BOOL sub_1C6083630(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  int v7;
  _BOOL8 result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v11 = a2;
  v12 = 0;
  v7 = sub_1C63DA058((uint64_t *)(a1 + 56), &v11, &v12);
  result = 0;
  if (v7 && v12 != *(_QWORD *)(a1 + 56) + 120 * *(unsigned int *)(a1 + 72))
  {
    v9 = HIDWORD(a3);
    if (a4 == 1)
      LODWORD(v9) = *(_DWORD *)a1 + HIDWORD(a3);
    if (a3 >= (unint64_t)*(unsigned int *)(v12 + 16))
      return 0;
    v10 = *(_QWORD *)(v12 + 8) + 48 * a3;
    return *(_DWORD *)(v10 + 8) > v9 && *(_QWORD *)(*(_QWORD *)v10 + 8 * v9) != 0;
  }
  return result;
}

void llvm::VPWidenMemoryInstructionRecipe::execute(llvm::VPWidenMemoryInstructionRecipe *this, llvm::VPTransformState *a2)
{
  unsigned __int8 *v4;
  int v5;
  llvm::VPValue *v6;
  llvm::Instruction *v7;
  uint64_t ***v8;
  uint64_t **v9;
  llvm::Type *v10;
  llvm::PoisonValue *v11;
  int v12;
  uint64_t v13;
  llvm::IRBuilderBase *v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t i;
  int v21;
  uint64_t v22;
  llvm::VPValue *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unint64_t v27;
  void **VectorReverse;
  llvm::VPValue *v29;
  _QWORD *v30;
  uint64_t v31;
  llvm::ValueHandleBase *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t *v35;
  uint64_t MaskedStore;
  uint64_t *v37;
  unsigned __int8 **MaskedScatter;
  unint64_t v39;
  uint64_t v40;
  llvm::ValueHandleBase *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  llvm::Type *v44;
  uint64_t *v45;
  llvm::UndefValue *v46;
  uint64_t MaskedLoad;
  uint64_t *v48;
  uint64_t MaskedGather;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  llvm::UndefValue *v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  int v57;
  llvm::Instruction *v58;
  uint64_t v59[7];
  BOOL v60;
  llvm::PoisonValue *v61;
  uint64_t **v62;
  const char *v63;
  char v64;
  __int16 v65;
  void *v66[2];
  _QWORD v67[4];

  v67[2] = *MEMORY[0x1E0C80C00];
  v4 = (unsigned __int8 *)*((_QWORD *)this + 19);
  v5 = v4[16];
  if (v5 == 61)
  {
    v6 = *(llvm::VPValue **)(*((_QWORD *)this + 6) + 8);
    v7 = (llvm::Instruction *)*((_QWORD *)this + 19);
  }
  else
  {
    v6 = 0;
    v7 = 0;
    if (v5 == 60)
    {
      v7 = 0;
      v8 = (uint64_t ***)*((_QWORD *)this + 19);
      goto LABEL_6;
    }
  }
  v8 = (uint64_t ***)*((_QWORD *)v4 - 8);
  v4 = 0;
LABEL_6:
  v9 = *v8;
  v62 = *v8;
  v10 = *(llvm::Type **)a2;
  if (HIDWORD(*(_QWORD *)a2) == 1)
    llvm::ScalableVectorType::get(v9, v10);
  else
    llvm::FixedVectorType::get((llvm::FixedVectorType *)v9, v10);
  v61 = v11;
  v12 = __clz(1 << ((unint64_t)*(unsigned __int16 *)(*((_QWORD *)this + 19) + 18) >> 1));
  v13 = *((unsigned __int8 *)this + 160);
  v14 = (llvm::IRBuilderBase *)*((_QWORD *)a2 + 34);
  v15 = *((unsigned int *)a2 + 2);
  v16 = v67;
  v66[0] = v67;
  v66[1] = (void *)0x200000000;
  sub_1C4848C0C((unsigned int *)v66, v15, 0);
  v17 = *((_DWORD *)this + 14);
  if (*(_BYTE *)(*((_QWORD *)this + 19) + 16) != 61)
  {
    if (v17 == 2)
    {
      v18 = 1;
      goto LABEL_13;
    }
LABEL_25:
    v60 = 0;
    goto LABEL_26;
  }
  if (v17 != 3)
    goto LABEL_25;
  v18 = 2;
LABEL_13:
  v19 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v18);
  v60 = v19 != 0;
  if (v19 && *((_DWORD *)a2 + 2))
  {
    for (i = 0; i < *((unsigned int *)a2 + 2); ++i)
    {
      v21 = *((_DWORD *)this + 14);
      if (*(_BYTE *)(*((_QWORD *)this + 19) + 16) == 61)
      {
        if (v21 != 3)
          goto LABEL_22;
        v22 = 2;
      }
      else
      {
        if (v21 != 2)
        {
LABEL_22:
          v23 = 0;
          goto LABEL_23;
        }
        v22 = 1;
      }
      v23 = *(llvm::VPValue **)(*((_QWORD *)this + 6) + 8 * v22);
LABEL_23:
      v24 = llvm::VPTransformState::get(a2, v23, i);
      *((_QWORD *)v66[0] + i) = v24;
    }
  }
LABEL_26:
  v25 = v12 ^ 0x3Fu;
  v59[0] = (uint64_t)this;
  v59[1] = (uint64_t)v14;
  v59[2] = (uint64_t)a2;
  v59[3] = (uint64_t)&v62;
  v59[4] = (uint64_t)&v60;
  v59[5] = (uint64_t)v66;
  v59[6] = (uint64_t)&v61;
  v26 = (unsigned __int8 *)*((_QWORD *)a2 + 39);
  if (v7)
  {
    llvm::InnerLoopVectorizer::setDebugLocFromInst(v26, (uint64_t)v7, 0, 0);
    if (*((_DWORD *)a2 + 2))
    {
      v27 = 0;
      v58 = v7;
      do
      {
        VectorReverse = (void **)llvm::VPTransformState::get(a2, v6, v27);
        if ((_DWORD)v13)
        {
          if (*((_BYTE *)this + 161))
          {
            v63 = "reverse";
            v65 = 259;
            VectorReverse = (void **)llvm::IRBuilderBase::CreateVectorReverse(v14, VectorReverse, (const llvm::Twine *)&v63);
          }
          v33 = **((_QWORD **)this + 6);
          v64 = 0;
          v63 = 0;
          v34 = llvm::VPTransformState::get((uint64_t)a2, v33, (unsigned int *)&v63);
          v35 = (uint64_t *)sub_1C6083C7C(v59, v27, (llvm::Value *)v34);
          if (v60)
          {
            MaskedStore = llvm::IRBuilderBase::CreateMaskedStore((uint64_t)v14, (uint64_t *)VectorReverse, v35, v25, *((_QWORD *)v66[0] + v27));
          }
          else
          {
            v56 = v56 & 0xFFFFFFFFFFFF0000 | v25 | 0x100;
            MaskedStore = (uint64_t)sub_1C509CCE8((uint64_t *)v14, (uint64_t *)VectorReverse, (uint64_t)v35, (unsigned __int16)v25 | 0x100u, 0);
          }
          MaskedScatter = (unsigned __int8 **)MaskedStore;
        }
        else
        {
          v29 = v6;
          v30 = v16;
          v31 = v13;
          if (v60)
            v32 = (llvm::ValueHandleBase *)*((_QWORD *)v66[0] + v27);
          else
            v32 = 0;
          v37 = (uint64_t *)llvm::VPTransformState::get(a2, **((llvm::VPValue ***)this + 6), v27);
          MaskedScatter = (unsigned __int8 **)llvm::IRBuilderBase::CreateMaskedScatter((uint64_t)v14, (uint64_t *)VectorReverse, v37, v25, v32);
          v13 = v31;
          v16 = v30;
          v6 = v29;
          v7 = v58;
        }
        llvm::InnerLoopVectorizer::addMetadata(*((llvm::InnerLoopVectorizer **)a2 + 39), MaskedScatter, v7);
        ++v27;
      }
      while (v27 < *((unsigned int *)a2 + 2));
    }
  }
  else
  {
    llvm::InnerLoopVectorizer::setDebugLocFromInst(v26, (uint64_t)v4, 0, 0);
    if (*((_DWORD *)a2 + 2))
    {
      v39 = 0;
      v40 = v25 | 0x100;
      v57 = v13;
      do
      {
        if ((_DWORD)v13)
        {
          v42 = **((_QWORD **)this + 6);
          v64 = 0;
          v63 = 0;
          v43 = llvm::VPTransformState::get((uint64_t)a2, v42, (unsigned int *)&v63);
          v45 = (uint64_t *)sub_1C6083C7C(v59, v39, (llvm::Value *)v43);
          v46 = v61;
          if (v60)
          {
            v51 = v40;
            v52 = *((_QWORD *)v66[0] + v39);
            v53 = (llvm::UndefValue *)llvm::PoisonValue::get(v61, v44);
            v63 = "wide.masked.load";
            v65 = 259;
            v54 = v52;
            v40 = v51;
            MaskedLoad = llvm::IRBuilderBase::CreateMaskedLoad((uint64_t)v14, v46, v45, v25, v54, v53, (uint64_t)&v63);
          }
          else
          {
            v63 = "wide.load";
            v65 = 259;
            MaskedLoad = (uint64_t)sub_1C506D920((uint64_t *)v14, (uint64_t)v61, (uint64_t)v45, v40, 0, (uint64_t)&v63);
          }
          MaskedGather = MaskedLoad;
          if (MaskedLoad)
            v55 = *(unsigned __int8 *)(MaskedLoad + 16) >= 0x1Cu;
          else
            v55 = 0;
          LODWORD(v13) = v57;
          if (v55)
            llvm::InnerLoopVectorizer::addMetadata(*((llvm::InnerLoopVectorizer **)a2 + 39), (unsigned __int8 **)MaskedLoad, (llvm::Instruction *)v4);
          v16 = v67;
          if (*((_BYTE *)this + 161))
          {
            v63 = "reverse";
            v65 = 259;
            MaskedGather = llvm::IRBuilderBase::CreateVectorReverse(v14, (void **)MaskedGather, (const llvm::Twine *)&v63);
          }
        }
        else
        {
          if (v60)
            v41 = (llvm::ValueHandleBase *)*((_QWORD *)v66[0] + v39);
          else
            v41 = 0;
          v48 = (uint64_t *)llvm::VPTransformState::get(a2, **((llvm::VPValue ***)this + 6), v39);
          v63 = "wide.masked.gather";
          v65 = 259;
          MaskedGather = llvm::IRBuilderBase::CreateMaskedGather((uint64_t)v14, v61, v48, v25, v41, 0, (uint64_t)&v63);
          if (MaskedGather)
            v50 = *(unsigned __int8 *)(MaskedGather + 16) >= 0x1Cu;
          else
            v50 = 0;
          if (v50)
            llvm::InnerLoopVectorizer::addMetadata(*((llvm::InnerLoopVectorizer **)a2 + 39), (unsigned __int8 **)MaskedGather, (llvm::Instruction *)v4);
        }
        sub_1C63D1D2C((uint64_t)a2, (char *)this + 96, MaskedGather, v39++);
      }
      while (v39 < *((unsigned int *)a2 + 2));
    }
  }
  if (v66[0] != v16)
    free(v66[0]);
}

unsigned __int8 *sub_1C6083C7C(uint64_t *a1, unsigned int a2, llvm::Value *this)
{
  uint64_t v6;
  llvm::Value *v7;
  char v8;
  uint64_t v9;
  llvm::ConstantInt *v10;
  unint64_t v11;
  const llvm::APInt *v12;
  llvm::Value **RuntimeVF;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::ConstantInt *v17;
  unint64_t v18;
  unint64_t v19;
  llvm::ValueHandleBase *v20;
  const llvm::APInt *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::ConstantInt *v25;
  unsigned int v26;
  unint64_t v27;
  llvm::ValueHandleBase *v28;
  uint64_t v29;
  uint64_t *v30;
  llvm::GetElementPtrInst *v31;
  uint64_t ***v32;
  uint64_t *v33;
  llvm::GetElementPtrInst *v34;
  unsigned __int8 *v35;
  void **v36;
  llvm::IRBuilderBase *v37;
  llvm::Value **StepForVF;
  uint64_t *v39;
  llvm::GetElementPtrInst *v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t v43;
  llvm::ConstantInt *v45;
  llvm::ValueHandleBase *v46;
  const char *v47;
  unsigned int v48;
  __int16 v49;

  v6 = *a1;
  v7 = llvm::Value::stripPointerCasts(this);
  v8 = 0;
  if (v7 && *((_BYTE *)v7 + 16) == 62)
    v8 = *((_BYTE *)v7 + 17) & 2;
  v9 = a1[1];
  v10 = (llvm::ConstantInt *)(**(_QWORD **)(v9 + 64) + 1960);
  v11 = *(_QWORD *)a1[2];
  if (*(_BYTE *)(v6 + 161))
  {
    RuntimeVF = llvm::getRuntimeVF((uint64_t *)v9, v10, v11);
    v14 = a1[1];
    v15 = -a2;
    v16 = **(_QWORD **)(v14 + 64);
    v17 = *(llvm::ConstantInt **)(v16 + 1960);
    v18 = *(unsigned int *)(v16 + 1968);
    v48 = v18 >> 8;
    if (v18 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v47, v15, 0);
    }
    else
    {
      if (v18 <= 0xFF)
        v19 = 0;
      else
        v19 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v18);
      v47 = (const char *)(v19 & v15);
    }
    v20 = llvm::ConstantInt::get(v17, (llvm::LLVMContext *)&v47, v12);
    if (v48 >= 0x41 && v47)
      MEMORY[0x1CAA32F9C](v47, 0x1000C8000313F17);
    v49 = 257;
    v22 = sub_1C4EC4040(v14, (uint64_t)v20, (uint64_t)RuntimeVF, (uint64_t)&v47, 0, 0);
    v23 = a1[1];
    v24 = **(_QWORD **)(v23 + 64);
    v25 = *(llvm::ConstantInt **)(v24 + 1960);
    v26 = *(_DWORD *)(v24 + 1968);
    v48 = v26 >> 8;
    if (v26 >> 8 > 0x40)
    {
      v45 = v25;
      llvm::APInt::initSlowCase((llvm::APInt *)&v47, 1, 0);
      v25 = v45;
    }
    else
    {
      if (v26 <= 0xFF)
        LOBYTE(v27) = 0;
      else
        v27 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v26);
      v47 = (const char *)(v27 & 1);
    }
    v28 = llvm::ConstantInt::get(v25, (llvm::LLVMContext *)&v47, v21);
    if (v48 >= 0x41 && v47)
    {
      v46 = v28;
      MEMORY[0x1CAA32F9C](v47, 0x1000C8000313F17);
      v28 = v46;
    }
    v49 = 257;
    v29 = sub_1C47733F8(v23, (uint64_t)v28, (uint64_t)RuntimeVF, (uint64_t)&v47, 0, 0);
    v30 = (uint64_t *)a1[1];
    v31 = *(llvm::GetElementPtrInst **)a1[3];
    v49 = 257;
    v32 = sub_1C4867B70(v30, v31, (uint64_t *)this, v22, (uint64_t)&v47);
    *((_BYTE *)v32 + 17) = *((_BYTE *)v32 + 17) & 0xFD | v8;
    v33 = (uint64_t *)a1[1];
    v34 = *(llvm::GetElementPtrInst **)a1[3];
    v49 = 257;
    v35 = (unsigned __int8 *)sub_1C4867B70(v33, v34, (uint64_t *)v32, v29, (uint64_t)&v47);
    v35[17] = v35[17] & 0xFD | v8;
    if (*(_BYTE *)a1[4])
    {
      v36 = *(void ***)(*(_QWORD *)a1[5] + 8 * a2);
      v37 = (llvm::IRBuilderBase *)a1[1];
      v47 = "reverse";
      v49 = 259;
      *(_QWORD *)(*(_QWORD *)a1[5] + 8 * a2) = llvm::IRBuilderBase::CreateVectorReverse(v37, v36, (const llvm::Twine *)&v47);
    }
  }
  else
  {
    StepForVF = llvm::createStepForVF((uint64_t *)v9, v10, v11, a2);
    v39 = (uint64_t *)a1[1];
    v40 = *(llvm::GetElementPtrInst **)a1[3];
    v49 = 257;
    v35 = (unsigned __int8 *)sub_1C4867B70(v39, v40, (uint64_t *)this, (uint64_t)StepForVF, (uint64_t)&v47);
    v35[17] = v35[17] & 0xFD | v8;
  }
  v41 = *(_DWORD *)(*(_QWORD *)this + 8);
  if ((v41 & 0xFE) == 0x12)
    v41 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)this + 16) + 8);
  v42 = (uint64_t *)a1[1];
  v43 = llvm::PointerType::get(*(llvm::PointerType **)a1[6], (llvm::Type *)(v41 >> 8));
  v49 = 257;
  return sub_1C4773E38(v42, 49, v35, v43, (uint64_t)&v47);
}

_BYTE *llvm::LoopVectorizePass::LoopVectorizePass(_BYTE *result, unsigned int a2)
{
  int v2;

  *result = a2 & 1 | (byte_1ED838890 == 0);
  v2 = (a2 >> 8) & 1;
  if (!byte_1ED838950)
    LOBYTE(v2) = 1;
  result[1] = v2;
  return result;
}

{
  int v2;

  *result = a2 & 1 | (byte_1ED838890 == 0);
  v2 = (a2 >> 8) & 1;
  if (!byte_1ED838950)
    LOBYTE(v2) = 1;
  result[1] = v2;
  return result;
}

uint64_t llvm::LoopVectorizePass::processLoop(llvm::LoopVectorizePass *this, llvm::Loop *a2, uint64_t a3, uint64_t a4)
{
  llvm::OptimizationRemarkEmitter **v4;
  const llvm::Loop *v5;
  uint64_t v6;
  llvm::OptimizationRemarkEmitter **v7;
  llvm::Function *v8;
  uint64_t v9;
  llvm::OptimizationRemarkEmitter *v11;
  llvm::OptimizationRemarkEmitter *v12;
  llvm::OptimizationRemarkEmitter *v13;
  llvm::OptimizationRemarkEmitter *v14;
  llvm::OptimizationRemarkEmitter *v15;
  llvm::OptimizationRemarkEmitter *v16;
  llvm::OptimizationRemarkEmitter *v17;
  llvm::OptimizationRemarkEmitter *v18;
  llvm::OptimizationRemarkEmitter *v19;
  llvm::OptimizationRemarkEmitter *v20;
  int v21;
  int v22;
  uint64_t OptionalBoolLoopAttribute;
  uint64_t v24;
  int v25;
  char v26;
  llvm::OptimizationRemarkEmitter *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t v32;
  llvm::OptimizationRemarkEmitter *v33;
  uint64_t **v34;
  llvm::Function *v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  llvm::OptimizationRemarkEmitter *v51;
  llvm::OptimizationRemarkEmitter *v52;
  _BOOL4 v53;
  int v54;
  llvm::OptimizationRemarkEmitter *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  llvm::OptimizationRemarkEmitter *v60;
  __int128 v61;
  llvm::OptimizationRemarkEmitter *v62;
  llvm::OptimizationRemarkEmitter *v63;
  uint64_t v64;
  const llvm::Loop *v65;
  llvm::OptimizationRemarkEmitter *v66;
  llvm::OptimizationRemarkEmitter *v67;
  llvm::OptimizationRemarkEmitter *v68;
  llvm::OptimizationRemarkEmitter *v69;
  unsigned int v70;
  llvm::Type *v71;
  int v72;
  unint64_t v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  BOOL v77;
  int v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  void **v84;
  char *v85;
  unint64_t v86;
  void **v87;
  int v88;
  const char *v89;
  llvm::OptimizationRemarkEmitter *v90;
  uint64_t v91;
  __int128 v92;
  unsigned int v93;
  uint64_t v94;
  __int32 v95;
  llvm::OptimizationRemarkEmitter *v96;
  uint64_t v97;
  __int128 v98;
  unsigned int v99;
  uint64_t v100;
  __int32 v101;
  llvm::BlockFrequencyInfo *v102;
  uint64_t v103;
  unsigned int v104;
  __int32 v105;
  uint64_t v106;
  uint64_t ***v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  void **v114;
  void *v115;
  char *v116;
  unint64_t v117;
  void **v118;
  int *v119;
  unint64_t v120;
  void **v121;
  llvm::OptimizationRemarkEmitter *v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  __int32 v126;
  uint64_t v127;
  uint64_t v128;
  std::string *v129;
  std::string::size_type size;
  char *v131;
  unint64_t v132;
  void **v133;
  int *v134;
  unint64_t v135;
  void **v136;
  uint64_t v137;
  uint64_t v138;
  void **v139;
  void *v140;
  char *v141;
  unint64_t v142;
  void **v143;
  int *v144;
  unint64_t v145;
  void **v146;
  uint64_t v147;
  uint64_t v148;
  std::string *v149;
  std::string::size_type v150;
  char *v151;
  unint64_t v152;
  void **v153;
  int *v154;
  unint64_t v155;
  void **v156;
  uint64_t ***v157;
  unint64_t v158;
  const char *v159;
  uint64_t v160;
  int v161;
  char v162;
  uint64_t **v163;
  const char *v164;
  llvm::OptimizationRemarkEmitter *v165;
  uint64_t v166;
  llvm::OptimizationRemarkEmitter *v167;
  unint64_t v168;
  uint64_t v169;
  llvm::OptimizationRemarkEmitter *v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  llvm::OptimizationRemarkEmitter *v177;
  uint64_t v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  unint64_t v182;
  BOOL v183;
  uint64_t **v184;
  const char *v185;
  llvm::OptimizationRemarkEmitter *v186;
  uint64_t v187;
  llvm::OptimizationRemarkEmitter *v188;
  unint64_t v189;
  uint64_t v190;
  llvm::OptimizationRemarkEmitter *v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int v198;
  int v199;
  uint64_t **v200;
  const char *v201;
  llvm::OptimizationRemarkEmitter *v202;
  uint64_t v203;
  llvm::OptimizationRemarkEmitter *v204;
  unint64_t v205;
  uint64_t v206;
  llvm::OptimizationRemarkEmitter *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  llvm::ScalarEvolution *v215;
  uint64_t **v216;
  const char *v217;
  llvm::OptimizationRemarkEmitter *v218;
  uint64_t v219;
  llvm::OptimizationRemarkEmitter *v220;
  unint64_t v221;
  uint64_t v222;
  llvm::OptimizationRemarkEmitter *v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  int v228;
  int v229;
  uint64_t v230;
  int8x16_t *v231;
  uint64_t v232;
  char *v233;
  unint64_t v234;
  void **v235;
  uint64_t *v236;
  unint64_t v237;
  void **v238;
  _BOOL4 v239;
  uint64_t v240;
  int v241;
  BOOL v242;
  uint64_t v243;
  BOOL v244;
  int v245;
  BOOL v246;
  uint64_t v247;
  uint64_t v248;
  llvm::OptimizationRemarkEmitter *v249;
  uint64_t v250;
  unsigned int v251;
  unsigned int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int8x16_t *v262;
  uint64_t v263;
  uint64_t v264;
  int *v265;
  unint64_t v266;
  void **v267;
  char *v268;
  unint64_t v269;
  void **v270;
  llvm::OptimizationRemarkEmitter *v271;
  uint64_t v272;
  uint64_t v273;
  unsigned int v274;
  uint64_t v275;
  uint64_t i;
  uint64_t v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t v283;
  char v284;
  char v285;
  uint64_t v286;
  int v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  BOOL v292;
  uint64_t v293;
  uint64_t v294;
  unsigned int v295;
  uint64_t v296;
  uint64_t v297;
  int8x16_t *v298;
  int *v299;
  unint64_t v300;
  void **v301;
  char *v302;
  unint64_t v303;
  void **v304;
  llvm::MDNode *FollowupLoopID;
  char v306;
  _BOOL4 v307;
  llvm::VPlan *v308;
  llvm::OptimizationRemarkEmitter *v309;
  llvm::OptimizationRemarkEmitter *v310;
  uint64_t v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  uint64_t **v315;
  llvm::BlockFrequencyInfo *v316;
  unsigned int *LoopID;
  __int128 v318;
  int v319;
  __int128 v320;
  std::string v321;
  __int128 v322;
  void *v323[2];
  uint64_t v324;
  unint64_t v325;
  unsigned int v326;
  int v327;
  unsigned __int8 v328;
  int8x16_t *v329;
  uint64_t v330;
  llvm::OptimizationRemarkEmitter *v331;
  llvm::OptimizationRemarkEmitter *v332;
  uint64_t v333;
  char v334;
  uint64_t v335;
  uint64_t v336;
  int v337;
  _QWORD *v338;
  _QWORD *v339;
  uint64_t v340;
  int v341;
  _QWORD v342[6];
  int v343;
  _QWORD v344[7];
  unint64_t v345;
  llvm::OptimizationRemarkEmitter *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  int v350;
  __int128 v351;
  _BYTE v352[28];
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  _QWORD *v356;
  _QWORD *v357;
  uint64_t v358;
  int v359;
  _QWORD v360[7];
  int v361;
  _QWORD v362[10];
  int v363;
  __int128 v364;
  __int128 v365;
  _QWORD *v366;
  _QWORD *v367;
  uint64_t v368;
  int v369;
  _QWORD v370[11];
  int v371;
  _QWORD v372[11];
  int v373;
  _QWORD v374[10];
  int v375;
  uint64_t v376;
  int8x16_t v377;
  uint64_t v378[3];
  uint64_t v379[3];
  char v380;
  uint64_t ***v381;
  const llvm::SCEVWrapPredicate *v382;
  char v383[8];
  unsigned int v384;
  unsigned int v385;
  int v386;
  int v387;
  char v388;
  llvm *v389;
  std::string v390;
  void *__p;
  _WORD v392[7];
  char v393;
  char *v394;
  uint64_t v395;
  int8x16_t *v396;
  uint64_t v397;
  int8x16_t *v398;
  uint64_t v399;
  unint64_t v400;
  const char *v401;
  const char *v402;
  uint64_t v403;
  llvm::OptimizationRemarkEmitter *v404;
  llvm::OptimizationRemarkEmitter *v405;
  void *v406;
  uint64_t v407;
  int v408;
  _QWORD v409[2];
  _QWORD v410[4];
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  void **v414;
  _QWORD *v415;
  uint64_t v416;
  int v417;
  __int16 v418;
  char v419;
  uint64_t v420;
  uint64_t v421;
  void *v422;
  _QWORD v423[8];
  _QWORD v424[6];
  _BYTE v425[12];
  int v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  _QWORD *v430;
  const char **v431;
  char v432;
  uint64_t v433;
  uint64_t v434;
  int v435;
  _QWORD *v436;
  uint64_t v437;
  _QWORD v438[10];
  BOOL v439;
  __int128 *v440;
  uint64_t v441;
  _QWORD *v442;
  uint64_t v443;
  _QWORD v444[9];
  uint64_t (**v445)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  std::string::size_type v446;
  int8x16_t *v447;
  uint64_t v448;
  unint64_t v449;
  const char *v450;
  const char *v451;
  uint64_t v452;
  uint64_t v453;
  llvm::OptimizationRemarkEmitter *v454;
  void *v455;
  uint64_t v456;
  int v457;
  _BYTE *v458;
  uint64_t v459;
  _BYTE v460[32];
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  void **v464;
  _QWORD *v465;
  uint64_t v466;
  int v467;
  __int16 v468;
  char v469;
  uint64_t v470;
  uint64_t v471;
  void *v472;
  _QWORD v473[6];
  _BYTE *v474;
  uint64_t v475;
  _BYTE v476[32];
  uint64_t *v477;
  uint64_t v478;
  uint64_t v479;
  char v480;
  int v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  _QWORD *v485;
  const char **v486;
  unsigned __int8 v487;
  uint64_t v488;
  uint64_t v489;
  int v490;
  _BYTE *v491;
  uint64_t v492;
  _BYTE v493[64];
  uint64_t **v494;
  uint64_t v495;
  BOOL shouldOptimizeForSize;
  __int128 *v497;
  uint64_t v498[9];
  _QWORD *v499;
  uint64_t v500;
  _QWORD v501[9];
  _QWORD v502[11];
  char *v503;
  uint64_t v504;
  _QWORD v505[6];
  __int128 v506;
  __int128 v507;
  unint64_t v508;
  const char *v509;
  __int128 v510;
  char v511;
  char v512;
  void *v513;
  uint64_t v514;
  _BYTE v515[256];
  char v516;
  int v517;
  uint64_t v518;
  _BYTE v519[768];
  const char *v520;
  uint64_t v521;
  uint64_t v522;
  int v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  unsigned int *v527;
  unsigned int *v528;
  uint64_t v529;
  void *v530;
  unsigned int v531;
  uint64_t v532;
  int v533;
  char v534;
  uint64_t v535;
  uint64_t v536;
  int v537;
  uint64_t v538;
  uint64_t v539;
  int v540;
  uint64_t v541;
  uint64_t v542;
  int v543;
  uint64_t v544;
  uint64_t v545;
  int v546;
  uint64_t v547;
  _BYTE *v548;
  uint64_t v549;
  _BYTE v550[224];
  __int128 v551;
  int v552;
  __int128 v553;
  int v554;
  uint64_t v555;
  int8x16_t *v556;
  uint64_t v557;
  _QWORD *v558;
  llvm::OptimizationRemarkEmitter *v559;
  __int128 v560;
  uint64_t v561;
  llvm::OptimizationRemarkEmitter *v562;
  llvm::Function *v563;
  char *v564;
  int8x16_t **v565;
  _BYTE *v566;
  _BYTE *v567;
  uint64_t v568;
  int v569;
  _BYTE v570[128];
  _BYTE *v571;
  _BYTE *v572;
  uint64_t v573;
  int v574;
  _BYTE v575[128];
  _BYTE *v576;
  _BYTE *v577;
  uint64_t v578;
  int v579;
  _BYTE v580[128];
  _BYTE *v581;
  uint64_t v582;
  _BYTE v583[192];
  void *v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  int *v589;
  void *v590;
  char *v591;
  uint64_t v592;
  _QWORD v593[33];
  _QWORD *v594;
  uint64_t v595;
  _QWORD v596[7];

  v4 = (llvm::OptimizationRemarkEmitter **)MEMORY[0x1E0C80A78](this, a2, a3, a4);
  v6 = (uint64_t)v5;
  v7 = v4;
  v596[4] = *MEMORY[0x1E0C80C00];
  llvm::LoopVectorizeHints::LoopVectorizeHints((llvm::LoopVectorizeHints *)v383, v5, *(unsigned __int8 *)v4, v4[11], v4[3]);
  v8 = *(llvm::Function **)(**(_QWORD **)(v6 + 32) + 56);
  if (!llvm::LoopVectorizeHints::allowVectorization((llvm::LoopVectorizeHints *)v383, v8, (uint64_t **)v6, *((unsigned __int8 *)v7 + 1)))return 0;
  llvm::PredicatedScalarEvolution::PredicatedScalarEvolution((llvm::PredicatedScalarEvolution *)&v377, v7[1], (llvm::Loop *)v6);
  v375 = 0;
  v376 = 0;
  v12 = v7[2];
  v11 = v7[3];
  v13 = v7[6];
  v14 = v7[7];
  v16 = v7[9];
  v15 = v7[10];
  v18 = v7[4];
  v17 = v7[5];
  v20 = v7[11];
  v19 = v7[12];
  v344[0] = v6;
  v344[1] = v12;
  v344[2] = &v377;
  v344[3] = v11;
  v344[4] = v13;
  v344[5] = v18;
  v344[6] = v15;
  v345 = 0;
  v346 = v20;
  v347 = 0;
  v350 = 0;
  v348 = 0;
  v349 = 0;
  v351 = 0u;
  memset(v352, 0, sizeof(v352));
  v353 = 0;
  v354 = 0;
  v355 = 0;
  v356 = v360;
  v357 = v360;
  v358 = 4;
  v359 = 0;
  v360[4] = v362;
  v360[5] = v362;
  v360[6] = 8;
  v361 = 0;
  v362[9] = 0;
  v362[8] = 0;
  v363 = 0;
  v365 = 0u;
  v364 = 0u;
  v366 = v370;
  v367 = v370;
  v368 = 4;
  v369 = 0;
  v370[4] = &v375;
  v370[5] = v383;
  v370[6] = v14;
  v370[7] = v16;
  v370[8] = v372;
  v370[9] = v372;
  v370[10] = 8;
  v371 = 0;
  v372[8] = v374;
  v372[9] = v374;
  v372[10] = 8;
  v373 = 0;
  v374[8] = v17;
  v374[9] = v19;
  if ((llvm::LoopVectorizationLegality::canVectorize((llvm::LoopVectorizationLegality *)v344, byte_1ED838B98) & 1) == 0)
    goto LABEL_109;
  v21 = sub_1C6086EA0(*((_QWORD *)v8 + 14), v6, (uint64_t)v383, (uint64_t)v7[12], (uint64_t **)v7[5], v7[3], (uint64_t)v7[6], (uint64_t)v7[9], (uint64_t)v7[2], (uint64_t)v381, (uint64_t)v7[4], (uint64_t)v344);
  if (*(_QWORD *)(v6 + 8) == *(_QWORD *)(v6 + 16))
  {
    v22 = v21;
    OptionalBoolLoopAttribute = sub_1C6075CE0(v7[1], (const llvm::Loop *)v6);
    if ((OptionalBoolLoopAttribute & 0xFF00000000) != 0 && dword_1ED82A9F8 > OptionalBoolLoopAttribute)
    {
      v25 = v386;
      if (v386 == -1)
      {
        OptionalBoolLoopAttribute = llvm::getOptionalBoolLoopAttribute(v389, "llvm.loop.disable_nonforced", 0x1BuLL);
        v26 = OptionalBoolLoopAttribute;
        if ((unsigned __int16)OptionalBoolLoopAttribute <= 0x100u)
          v26 = 0;
        if (v26)
        {
          v22 = 2;
          goto LABEL_33;
        }
        v25 = v386;
      }
      if (v25 != 1)
        v22 = 2;
    }
LABEL_33:
    v44 = *((_QWORD *)v8 + 14);
    if (v44 && (*(_BYTE *)(v44 + 15) & 4) != 0)
    {
      llvm::reportVectorizationFailure(OptionalBoolLoopAttribute, v24, "loop not vectorized due to NoImplicitFloat attribute", 52, (uint64_t)"NoImplicitFloat", 15, v7[11], (const llvm::Loop *)v6, 0);
      goto LABEL_109;
    }
    v45 = v386;
    if (v386 == -1)
    {
      v46 = (unsigned __int16)llvm::getOptionalBoolLoopAttribute(v389, "llvm.loop.disable_nonforced", 0x1BuLL);
      if (v46 <= 0x100)
        LOBYTE(v46) = 0;
      if ((_BYTE)v46)
      {
LABEL_41:
        if (v388)
        {
          v47 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v7[3] + 592))(*(_QWORD *)v7[3]);
          if ((_DWORD)v47)
          {
            llvm::reportVectorizationFailure(v47, v48, "loop not vectorized due to unsafe FP support.", 45, (uint64_t)"UnsafeFP", 8, v7[11], (const llvm::Loop *)v6, 0);
LABEL_109:
            llvm::LoopVectorizeHints::emitRemarkWithHints((llvm::LoopVectorizeHints *)v383);
            goto LABEL_110;
          }
        }
LABEL_44:
        if (word_1EF8F5FA0)
          v49 = byte_1EF8F6018 != 0;
        else
          v49 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v7[3] + 408))(*(_QWORD *)v7[3]);
        if (!llvm::LoopVectorizationLegality::canVectorizeFPMath((llvm::LoopVectorizationLegality *)v344, v49))
        {
          v55 = v7[11];
          v56 = ****(_QWORD ****)v55;
          if (*(_QWORD *)(v56 + 128)
            || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v56 + 72) + 48))(*(_QWORD *)(v56 + 72)))
          {
            v57 = *(_QWORD *)(v376 + 48);
            if (v57)
            {
              v58 = *(_QWORD *)(v57 - 8 * *(unsigned int *)(v57 + 8));
              if (*(_BYTE *)v58 != 15)
                v58 = *(_QWORD *)(v58 - 8 * *(unsigned int *)(v58 + 8));
              v59 = *(_DWORD *)(v57 + 4);
              LODWORD(v57) = *(unsigned __int16 *)(v57 + 2);
            }
            else
            {
              v58 = 0;
              v59 = 0;
            }
            v80 = *(_QWORD *)(v376 + 40);
            v81 = *(_QWORD *)(v80 + 56);
            DWORD2(v506) = 12;
            BYTE12(v506) = 2;
            *(_QWORD *)&v507 = v81;
            *((_QWORD *)&v507 + 1) = v58;
            v508 = __PAIR64__(v57, v59);
            v509 = "loop-vectorize";
            *(_QWORD *)&v510 = "CantReorderFPOps";
            *((_QWORD *)&v510 + 1) = 16;
            v511 = 0;
            v512 = 0;
            v513 = v515;
            v514 = 0x400000000;
            v516 = 0;
            v517 = -1;
            v518 = v80;
            *(_QWORD *)&v506 = &unk_1E814E800;
            v520 = "loop not vectorized: cannot prove it is safe to reorder floating-point operations";
            v521 = 81;
            sub_1C53B17B4((uint64_t)&v513, (const void **)&v520);
            sub_1C61998EC((uint64_t)&v520, (uint64_t)&v506);
            v520 = (const char *)&unk_1E814E800;
            *(_QWORD *)&v506 = &off_1E814E790;
            v82 = (char *)v513;
            if ((_DWORD)v514)
            {
              v83 = (unint64_t)v514 << 6;
              do
              {
                v84 = (void **)&v82[v83];
                if (v82[v83 - 17] < 0)
                  operator delete(*(v84 - 5));
                if (*((char *)v84 - 41) < 0)
                  operator delete(*(v84 - 8));
                v83 -= 64;
              }
              while (v83);
              v82 = (char *)v513;
            }
            if (v82 != v515)
              free(v82);
            llvm::OptimizationRemarkEmitter::emit(v55, (llvm::DiagnosticInfoOptimizationBase *)&v520);
            v520 = (const char *)&off_1E814E790;
            v85 = (char *)v530;
            if (v531)
            {
              v86 = (unint64_t)v531 << 6;
              do
              {
                v87 = (void **)&v85[v86];
                if (v85[v86 - 17] < 0)
                  operator delete(*(v87 - 5));
                if (*((char *)v87 - 41) < 0)
                  operator delete(*(v87 - 8));
                v86 -= 64;
              }
              while (v86);
              v85 = (char *)v530;
            }
            if (v85 != (char *)&v532)
              free(v85);
          }
          goto LABEL_109;
        }
        v50 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v7[3] + 568))(*(_QWORD *)v7[3]);
        v51 = v7[4];
        v52 = v7[2];
        v329 = &v377;
        v330 = v6;
        v331 = v51;
        v332 = v52;
        v333 = v345;
        v334 = 0;
        v335 = 0;
        v336 = 0;
        v337 = 0;
        v338 = v342;
        v339 = v342;
        v340 = 4;
        v341 = 0;
        v342[4] = 0;
        v342[5] = 0;
        v53 = byte_1ED82AC38 != 0;
        if (!word_1ED82ABC0)
          v53 = v50;
        v343 = 0;
        if (v53)
        {
          if (word_1ED82AC80)
            v54 = byte_1ED82ACF8 != 0;
          else
            v54 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v7[3] + 576))(*(_QWORD *)v7[3]);
          llvm::InterleavedAccessInfo::analyzeInterleaving((llvm::InterleavedAccessInfo *)&v329, v54);
          v52 = v7[2];
        }
        v60 = v7[3];
        v61 = *((_OWORD *)v7 + 3);
        v62 = v7[9];
        v63 = v7[11];
        LODWORD(v520) = 0;
        v522 = 0;
        v521 = 0;
        v523 = 0;
        v524 = 0;
        v525 = 0;
        v526 = 0;
        v527 = &v531;
        v528 = &v531;
        v529 = 4;
        LODWORD(v530) = 0;
        v533 = v22;
        v534 = 0;
        v537 = 0;
        v535 = 0;
        v536 = 0;
        v539 = 0;
        v538 = 0;
        v540 = 0;
        v543 = 0;
        v541 = 0;
        v542 = 0;
        v546 = 0;
        v544 = 0;
        v545 = 0;
        v64 = 29;
        v547 = 1;
        do
        {
          (&v520)[v64] = (const char *)-4096;
          v64 += 2;
        }
        while (v64 != 37);
        v548 = v550;
        v549 = 0x400000000;
        v551 = 0u;
        v552 = 0;
        v553 = 0u;
        v554 = 0;
        v555 = v6;
        v556 = &v377;
        v557 = (uint64_t)v52;
        v558 = v344;
        v559 = v60;
        v560 = v61;
        v561 = (uint64_t)v62;
        v562 = v63;
        v563 = v8;
        v564 = v383;
        v565 = &v329;
        v566 = v570;
        v567 = v570;
        v568 = 16;
        v569 = 0;
        v571 = v575;
        v572 = v575;
        v573 = 16;
        v574 = 0;
        v576 = v580;
        v577 = v580;
        v578 = 16;
        v579 = 0;
        v581 = v583;
        v582 = 0x800000000;
        llvm::LoopVectorizationCostModel::collectValuesToIgnore((llvm::LoopVectorizationCostModel *)&v520);
        llvm::LoopVectorizationCostModel::collectElementTypesForWidening((llvm::LoopVectorizationCostModel *)&v520);
        v66 = v7[6];
        v67 = v7[2];
        v68 = v7[3];
        v69 = v7[11];
        v502[0] = v6;
        v502[1] = v67;
        v502[2] = v66;
        v502[3] = v68;
        v502[4] = v344;
        v502[5] = &v520;
        v502[6] = &v329;
        v502[7] = &v377;
        v502[8] = v383;
        v502[9] = &v375;
        v502[10] = v69;
        v503 = (char *)v505;
        v504 = 0x400000000;
        v70 = v385;
        v71 = (llvm::Type *)(v384 | ((unint64_t)(v387 == 1) << 32));
        v505[5] = 0;
        v505[4] = 0;
        if (!v385)
          v70 = (llvm::hasUnrollTransformation(v389, v65) >> 1) & 1;
        llvm::LoopVectorizationPlanner::plan((uint64_t)v502, v71, (uint64_t)&v325);
        v72 = v328;
        if (v328)
        {
          v75 = v325;
          v73 = HIDWORD(v325);
          if (v327)
            v76 = 0;
          else
            v76 = v326;
          v74 = llvm::LoopVectorizationCostModel::selectInterleaveCount((uint64_t)&v520, v325, v76);
        }
        else
        {
          v73 = 0;
          v74 = 1;
          v75 = 1;
        }
        v324 = 0;
        v322 = 0u;
        *(_OWORD *)v323 = 0u;
        v77 = (_DWORD)v73 != 1 && v75 == 1;
        v321.__r_.__value_.__r.__words[2] = 0;
        v78 = v77;
        v319 = v78;
        v320 = 0uLL;
        *(_OWORD *)&v321.__r_.__value_.__l.__data_ = 0uLL;
        if (v77)
        {
          *(_QWORD *)&v322 = "VectorizationNotBeneficial";
          *((_QWORD *)&v322 + 1) = 26;
          MEMORY[0x1CAA32ABC](v323, "the cost-model indicates that vectorization is not beneficial");
        }
        if (v70 < 2 || v72)
        {
          if (v70 <= 1 && v74 == 1)
          {
            *(_QWORD *)&v320 = "InterleavingNotBeneficial";
            *((_QWORD *)&v320 + 1) = 25;
            MEMORY[0x1CAA32ABC](&v321, "the cost-model indicates that interleaving is not beneficial");
            if (v70 == 1)
            {
              *(_QWORD *)&v320 = "InterleavingNotBeneficialAndDisabled";
              *((_QWORD *)&v320 + 1) = 36;
              std::string::append(&v321, " and is explicitly disabled or interleave count is set to 1");
            }
            goto LABEL_118;
          }
          v88 = 1;
          if (v70 != 1 || v74 < 2)
          {
LABEL_119:
            if (v70)
              v74 = v70;
            v89 = llvm::LoopVectorizeHints::vectorizeAnalysisPassName((llvm::LoopVectorizeHints *)v383);
            v9 = v88 | v319 ^ 1u;
            if (((v88 | v319 ^ 1) & 1) == 0)
            {
              v96 = v7[11];
              v97 = ****(_QWORD ****)v96;
              if (*(_QWORD *)(v97 + 128)
                || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v97 + 72) + 48))(*(_QWORD *)(v97 + 72)))
              {
                v98 = v322;
                llvm::Loop::getStartLoc((llvm::Loop *)v6, &v396);
                v99 = v396;
                if (v396)
                {
                  v100 = v396->i64[-v396->u32[2]];
                  if (*(_BYTE *)v100 != 15)
                    v100 = *(_QWORD *)(v100 - 8 * *(unsigned int *)(v100 + 8));
                  v101 = v396->i32[1];
                  v99 = v396->u16[1];
                }
                else
                {
                  v100 = 0;
                  v101 = 0;
                }
                v112 = **(_QWORD **)(v6 + 32);
                v113 = *(_QWORD *)(v112 + 56);
                DWORD2(v506) = 10;
                BYTE12(v506) = 2;
                *(_QWORD *)&v507 = v113;
                *((_QWORD *)&v507 + 1) = v100;
                v508 = __PAIR64__(v99, v101);
                v509 = v89;
                v510 = v98;
                v511 = 0;
                v512 = 0;
                v513 = v515;
                v514 = 0x400000000;
                v516 = 0;
                v517 = -1;
                v518 = v112;
                *(_QWORD *)&v506 = &off_1E814E538;
                v114 = (void **)v323[0];
                if (v324 >= 0)
                  v114 = v323;
                v115 = (void *)(HIBYTE(v324) & 0x7F);
                if (v324 < 0)
                  v115 = v323[1];
                v445 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v114;
                v446 = (std::string::size_type)v115;
                sub_1C53B17B4((uint64_t)&v513, (const void **)&v445);
                sub_1C61998EC((uint64_t)&v445, (uint64_t)&v506);
                v445 = &off_1E814E538;
                *(_QWORD *)&v506 = &off_1E814E790;
                v116 = (char *)v513;
                if ((_DWORD)v514)
                {
                  v117 = (unint64_t)v514 << 6;
                  do
                  {
                    v118 = (void **)&v116[v117];
                    if (v116[v117 - 17] < 0)
                      operator delete(*(v118 - 5));
                    if (*((char *)v118 - 41) < 0)
                      operator delete(*(v118 - 8));
                    v117 -= 64;
                  }
                  while (v117);
                  v116 = (char *)v513;
                }
                if (v116 != v515)
                  free(v116);
                if (v396)
                  llvm::MetadataTracking::untrack((uint64_t)&v396, (unsigned __int8 *)v396);
                llvm::OptimizationRemarkEmitter::emit(v96, (llvm::DiagnosticInfoOptimizationBase *)&v445);
                v445 = &off_1E814E790;
                v119 = (int *)v455;
                if ((_DWORD)v456)
                {
                  v120 = (unint64_t)v456 << 6;
                  do
                  {
                    v121 = (void **)((char *)v119 + v120);
                    if (*((char *)v119 + v120 - 17) < 0)
                      operator delete(*(v121 - 5));
                    if (*((char *)v121 - 41) < 0)
                      operator delete(*(v121 - 8));
                    v120 -= 64;
                  }
                  while (v120);
                  v119 = (int *)v455;
                }
                if (v119 != &v457)
                  free(v119);
              }
              v122 = v7[11];
              v123 = ****(_QWORD ****)v122;
              if (*(_QWORD *)(v123 + 128)
                || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v123 + 72) + 48))(*(_QWORD *)(v123 + 72)))
              {
                llvm::Loop::getStartLoc((llvm::Loop *)v6, &v396);
                v124 = v396;
                if (v396)
                {
                  v125 = v396->i64[-v396->u32[2]];
                  if (*(_BYTE *)v125 != 15)
                    v125 = *(_QWORD *)(v125 - 8 * *(unsigned int *)(v125 + 8));
                  v126 = v396->i32[1];
                  v124 = v396->u16[1];
                }
                else
                {
                  v125 = 0;
                  v126 = 0;
                }
                v127 = **(_QWORD **)(v6 + 32);
                v128 = *(_QWORD *)(v127 + 56);
                DWORD2(v506) = 10;
                BYTE12(v506) = 2;
                *(_QWORD *)&v507 = v128;
                *((_QWORD *)&v507 + 1) = v125;
                v508 = __PAIR64__(v124, v126);
                v509 = "loop-vectorize";
                v510 = v320;
                v511 = 0;
                v512 = 0;
                v513 = v515;
                v514 = 0x400000000;
                v516 = 0;
                v517 = -1;
                v518 = v127;
                *(_QWORD *)&v506 = &off_1E814E538;
                v129 = (std::string *)v321.__r_.__value_.__r.__words[0];
                if ((v321.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v129 = &v321;
                size = *((_BYTE *)&v321.__r_.__value_.__s + 23) & 0x7F;
                if ((v321.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  size = v321.__r_.__value_.__l.__size_;
                v445 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v129;
                v446 = size;
                sub_1C53B17B4((uint64_t)&v513, (const void **)&v445);
                sub_1C61998EC((uint64_t)&v445, (uint64_t)&v506);
                v445 = &off_1E814E538;
                *(_QWORD *)&v506 = &off_1E814E790;
                v131 = (char *)v513;
                if ((_DWORD)v514)
                {
                  v132 = (unint64_t)v514 << 6;
                  do
                  {
                    v133 = (void **)&v131[v132];
                    if (v131[v132 - 17] < 0)
                      operator delete(*(v133 - 5));
                    if (*((char *)v133 - 41) < 0)
                      operator delete(*(v133 - 8));
                    v132 -= 64;
                  }
                  while (v132);
                  v131 = (char *)v513;
                }
                if (v131 != v515)
                  free(v131);
                if (v396)
                  llvm::MetadataTracking::untrack((uint64_t)&v396, (unsigned __int8 *)v396);
                llvm::OptimizationRemarkEmitter::emit(v122, (llvm::DiagnosticInfoOptimizationBase *)&v445);
                v445 = &off_1E814E790;
                v134 = (int *)v455;
                if ((_DWORD)v456)
                {
                  v135 = (unint64_t)v456 << 6;
                  do
                  {
                    v136 = (void **)((char *)v134 + v135);
                    if (*((char *)v134 + v135 - 17) < 0)
                      operator delete(*(v136 - 5));
                    if (*((char *)v136 - 41) < 0)
                      operator delete(*(v136 - 8));
                    v135 -= 64;
                  }
                  while (v135);
                  v134 = (int *)v455;
                }
                if (v134 != &v457)
                  free(v134);
              }
              goto LABEL_492;
            }
            if ((v319 & v88) == 1)
            {
              v90 = v7[11];
              v91 = ****(_QWORD ****)v90;
              if (*(_QWORD *)(v91 + 128)
                || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v91 + 72) + 48))(*(_QWORD *)(v91 + 72)))
              {
                v310 = v90;
                v312 = v74;
                v92 = v322;
                llvm::Loop::getStartLoc((llvm::Loop *)v6, &v396);
                v93 = v396;
                if (v396)
                {
                  v94 = v396->i64[-v396->u32[2]];
                  if (*(_BYTE *)v94 != 15)
                    v94 = *(_QWORD *)(v94 - 8 * *(unsigned int *)(v94 + 8));
                  v95 = v396->i32[1];
                  v93 = v396->u16[1];
                }
                else
                {
                  v94 = 0;
                  v95 = 0;
                }
                v137 = **(_QWORD **)(v6 + 32);
                v138 = *(_QWORD *)(v137 + 56);
                DWORD2(v506) = 11;
                BYTE12(v506) = 2;
                *(_QWORD *)&v507 = v138;
                *((_QWORD *)&v507 + 1) = v94;
                v508 = __PAIR64__(v93, v95);
                v509 = v89;
                v510 = v92;
                v511 = 0;
                v512 = 0;
                v513 = v515;
                v514 = 0x400000000;
                v516 = 0;
                v517 = -1;
                v518 = v137;
                *(_QWORD *)&v506 = &off_1E814E570;
                v139 = (void **)v323[0];
                if (v324 >= 0)
                  v139 = v323;
                v140 = (void *)(HIBYTE(v324) & 0x7F);
                if (v324 < 0)
                  v140 = v323[1];
                v445 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v139;
                v446 = (std::string::size_type)v140;
                sub_1C53B17B4((uint64_t)&v513, (const void **)&v445);
                sub_1C61998EC((uint64_t)&v445, (uint64_t)&v506);
                v445 = &off_1E814E570;
                *(_QWORD *)&v506 = &off_1E814E790;
                v141 = (char *)v513;
                if ((_DWORD)v514)
                {
                  v142 = (unint64_t)v514 << 6;
                  do
                  {
                    v143 = (void **)&v141[v142];
                    if (v141[v142 - 17] < 0)
                      operator delete(*(v143 - 5));
                    if (*((char *)v143 - 41) < 0)
                      operator delete(*(v143 - 8));
                    v142 -= 64;
                  }
                  while (v142);
                  v141 = (char *)v513;
                }
                if (v141 != v515)
                  free(v141);
                v74 = v312;
                if (v396)
                  llvm::MetadataTracking::untrack((uint64_t)&v396, (unsigned __int8 *)v396);
                llvm::OptimizationRemarkEmitter::emit(v310, (llvm::DiagnosticInfoOptimizationBase *)&v445);
                v445 = &off_1E814E790;
                v144 = (int *)v455;
                if ((_DWORD)v456)
                {
                  v145 = (unint64_t)v456 << 6;
                  do
                  {
                    v146 = (void **)((char *)v144 + v145);
                    if (*((char *)v144 + v145 - 17) < 0)
                      operator delete(*(v146 - 5));
                    if (*((char *)v146 - 41) < 0)
                      operator delete(*(v146 - 8));
                    v145 -= 64;
                  }
                  while (v145);
                  v144 = (int *)v455;
                  v74 = v312;
                }
                if (v144 != &v457)
                  free(v144);
              }
            }
            else if (((v319 | v88) & 1) == 0)
            {
              v102 = v7[11];
              v103 = ****(_QWORD ****)v102;
              if (*(_QWORD *)(v103 + 128)
                || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v103 + 72) + 48))(*(_QWORD *)(v103 + 72)))
              {
                v313 = v74;
                llvm::Loop::getStartLoc((llvm::Loop *)v6, &v396);
                v104 = v396;
                v316 = v102;
                if (v396)
                {
                  v106 = v396->i64[-v396->u32[2]];
                  if (*(_BYTE *)v106 != 15)
                    v106 = *(_QWORD *)(v106 - 8 * *(unsigned int *)(v106 + 8));
                  v105 = v396->i32[1];
                  v104 = v396->u16[1];
                }
                else
                {
                  v105 = 0;
                  v106 = 0;
                }
                v147 = **(_QWORD **)(v6 + 32);
                v148 = *(_QWORD *)(v147 + 56);
                DWORD2(v506) = 11;
                BYTE12(v506) = 2;
                *(_QWORD *)&v507 = v148;
                *((_QWORD *)&v507 + 1) = v106;
                v508 = __PAIR64__(v104, v105);
                v509 = "loop-vectorize";
                v510 = v320;
                v511 = 0;
                v512 = 0;
                v513 = v515;
                v514 = 0x400000000;
                v516 = 0;
                v517 = -1;
                v518 = v147;
                *(_QWORD *)&v506 = &off_1E814E570;
                v149 = (std::string *)v321.__r_.__value_.__r.__words[0];
                if ((v321.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v149 = &v321;
                v150 = *((_BYTE *)&v321.__r_.__value_.__s + 23) & 0x7F;
                if ((v321.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v150 = v321.__r_.__value_.__l.__size_;
                v445 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v149;
                v446 = v150;
                sub_1C53B17B4((uint64_t)&v513, (const void **)&v445);
                sub_1C61998EC((uint64_t)&v445, (uint64_t)&v506);
                v445 = &off_1E814E570;
                *(_QWORD *)&v506 = &off_1E814E790;
                v151 = (char *)v513;
                if ((_DWORD)v514)
                {
                  v152 = (unint64_t)v514 << 6;
                  do
                  {
                    v153 = (void **)&v151[v152];
                    if (v151[v152 - 17] < 0)
                      operator delete(*(v153 - 5));
                    if (*((char *)v153 - 41) < 0)
                      operator delete(*(v153 - 8));
                    v152 -= 64;
                  }
                  while (v152);
                  v151 = (char *)v513;
                }
                if (v151 != v515)
                  free(v151);
                if (v396)
                  llvm::MetadataTracking::untrack((uint64_t)&v396, (unsigned __int8 *)v396);
                llvm::OptimizationRemarkEmitter::emit(v316, (llvm::DiagnosticInfoOptimizationBase *)&v445);
                v445 = &off_1E814E790;
                v154 = (int *)v455;
                if ((_DWORD)v456)
                {
                  v155 = (unint64_t)v456 << 6;
                  do
                  {
                    v156 = (void **)((char *)v154 + v155);
                    if (*((char *)v154 + v155 - 17) < 0)
                      operator delete(*(v156 - 5));
                    if (*((char *)v156 - 41) < 0)
                      operator delete(*(v156 - 8));
                    v155 -= 64;
                  }
                  while (v155);
                  v154 = (int *)v455;
                }
                if (v154 != &v457)
                  free(v154);
                v74 = v313;
              }
            }
            LoopID = (unsigned int *)llvm::Loop::getLoopID((llvm::Loop *)v6);
            v157 = v381;
            v158 = (unint64_t)v7[4];
            v159 = (const char *)v7[2];
            v160 = *((_QWORD *)v8 + 5) + 272;
            v506 = 0u;
            v507 = 0u;
            v508 = v158;
            v509 = v159;
            sub_1C50D02DC((uint64_t)&v510, v381, v160, (uint64_t)"scev.check", 1);
            sub_1C50D02DC((uint64_t)v519, v157, v160, (uint64_t)"scev.check", 1);
            v161 = v319;
            if (v74 < 2)
              v162 = v319;
            else
              v162 = 0;
            if ((v162 & 1) == 0)
            {
              sub_1C63D75FC((uint64_t)&v506, v6, v345, v382, v75 | (v73 << 32), v74);
              v161 = v319;
            }
            if (v161)
            {
              v163 = (uint64_t **)v7[5];
              v164 = (const char *)v7[6];
              v165 = v7[2];
              v166 = (uint64_t)v7[3];
              v167 = v7[9];
              v168 = (unint64_t)v7[4];
              v170 = v7[11];
              v169 = (uint64_t)v7[12];
              v445 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))&off_1E81ACC28;
              v446 = v6;
              v447 = &v377;
              v448 = (uint64_t)v165;
              v449 = v168;
              v451 = v164;
              v452 = v166;
              v453 = (uint64_t)v167;
              v454 = v170;
              v455 = 0;
              v456 = 1;
              v171 = v74;
              v457 = v74;
              v172 = ***v381;
              v458 = v460;
              v459 = 0x200000000;
              v463 = v172;
              v464 = &v472;
              v465 = v473;
              v466 = 0;
              v467 = 0;
              v468 = 512;
              v469 = 7;
              v461 = 0;
              v462 = 0;
              v470 = 0;
              v471 = 0;
              v472 = &unk_1E8167888;
              v473[0] = &unk_1E8167A08;
              v474 = v476;
              v475 = 0x400000000;
              v477 = &v479;
              v478 = 0x400000000;
              v483 = 0;
              v484 = 0;
              v485 = v344;
              v486 = &v520;
              v487 = 0;
              v489 = 0;
              v488 = 0;
              v490 = 0;
              v491 = v493;
              v492 = 0x800000000;
              v494 = v163;
              v495 = v169;
              v497 = &v506;
              v173 = 70;
              v498[0] = 1;
              do
              {
                (&v445)[v173] = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))-4096;
                v173 += 2;
              }
              while (v173 != 78);
              v499 = v501;
              v500 = 0x400000000;
              shouldOptimizeForSize = llvm::shouldOptimizeForSize(**(llvm::BasicBlock ***)(v6 + 32), v169, v163);
              v445 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))&off_1E81ACC68;
              v174 = v503;
              v175 = 8 * v504;
              do
              {
                v176 = *(_QWORD *)v174;
                v174 += 8;
                v175 -= 8;
              }
              while (!sub_1C63DAF00(v176 + 8, 1, v73, &v396));
              llvm::LoopVectorizationPlanner::executePlan((uint64_t)v502, (v73 << 32) | 1, v171, *((llvm::VPlan **)v174 - 1), (llvm::InnerLoopVectorizer *)&v445, (uint64_t)v7[4]);
              v177 = v7[11];
              v178 = ****(_QWORD ****)v177;
              if (*(_QWORD *)(v178 + 128)
                || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v178 + 72) + 48))(*(_QWORD *)(v178 + 72)))
              {
                llvm::Loop::getStartLoc((llvm::Loop *)v6, &v594);
                v179 = v594;
                if (v594)
                {
                  v181 = v594[-*((unsigned int *)v594 + 2)];
                  if (*(_BYTE *)v181 != 15)
                    v181 = *(_QWORD *)(v181 - 8 * *(unsigned int *)(v181 + 8));
                  v180 = *((_DWORD *)v594 + 1);
                  v179 = *((unsigned __int16 *)v594 + 1);
                }
                else
                {
                  v180 = 0;
                  v181 = 0;
                }
                v230 = **(_QWORD **)(v6 + 32);
                v231 = *(int8x16_t **)(v230 + 56);
                LODWORD(v397) = 9;
                BYTE4(v397) = 2;
                v398 = v231;
                v399 = v181;
                v400 = __PAIR64__(v179, v180);
                v401 = "loop-vectorize";
                v402 = "Interleaved";
                v403 = 11;
                LOBYTE(v404) = 0;
                LOBYTE(v405) = 0;
                v406 = &v408;
                v407 = 0x400000000;
                v425[8] = 0;
                v426 = -1;
                v427 = v230;
                v396 = (int8x16_t *)&off_1E814E500;
                v584 = "interleaved loop (interleaved count: ";
                *(_QWORD *)&v585 = 37;
                sub_1C53B17B4((uint64_t)&v406, (const void **)&v584);
                llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v390, "InterleaveCount", 0xFuLL, v171);
                v232 = sub_1C47E3888((uint64_t)&v396, (uint64_t)&v390);
                v584 = ")";
                *(_QWORD *)&v585 = 1;
                sub_1C53B17B4(v232 + 80, (const void **)&v584);
                sub_1C61998EC((uint64_t)&v584, v232);
                v584 = &off_1E814E500;
                if (v393 < 0)
                  operator delete(__p);
                if (SHIBYTE(v390.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v390.__r_.__value_.__l.__data_);
                v396 = (int8x16_t *)&off_1E814E790;
                v233 = (char *)v406;
                if ((_DWORD)v407)
                {
                  v234 = (unint64_t)v407 << 6;
                  do
                  {
                    v235 = (void **)&v233[v234];
                    if (v233[v234 - 17] < 0)
                      operator delete(*(v235 - 5));
                    if (*((char *)v235 - 41) < 0)
                      operator delete(*(v235 - 8));
                    v234 -= 64;
                  }
                  while (v234);
                  v233 = (char *)v406;
                }
                if (v233 != (char *)&v408)
                  free(v233);
                if (v594)
                  llvm::MetadataTracking::untrack((uint64_t)&v594, (unsigned __int8 *)v594);
                llvm::OptimizationRemarkEmitter::emit(v177, (llvm::DiagnosticInfoOptimizationBase *)&v584);
                v584 = &off_1E814E790;
                v236 = (uint64_t *)v590;
                if ((_DWORD)v591)
                {
                  v237 = (unint64_t)v591 << 6;
                  do
                  {
                    v238 = (void **)((char *)v236 + v237);
                    if (*((char *)v236 + v237 - 17) < 0)
                      operator delete(*(v238 - 5));
                    if (*((char *)v238 - 41) < 0)
                      operator delete(*(v238 - 8));
                    v237 -= 64;
                  }
                  while (v237);
                  v236 = (uint64_t *)v590;
                }
                if (v236 != &v592)
                  free(v236);
              }
              sub_1C63DC050((uint64_t)&v445);
              v239 = 0;
LABEL_410:
              if (sub_1C550930C(***(_QWORD ***)v7[11], (uint64_t)"loop-vectorize", 14))
              {
                v271 = v7[11];
                v594 = v596;
                v595 = 0x400000000;
                v272 = *(_QWORD *)(v6 + 32);
                v273 = *(_QWORD *)(v6 + 40);
                if (v273 == v272)
                {
                  v274 = 0;
                }
                else
                {
                  v274 = 0;
                  do
                  {
                    v275 = *(_QWORD *)v272 + 40;
                    for (i = *(_QWORD *)(*(_QWORD *)v272 + 48); i != v275; i = *(_QWORD *)(i + 8))
                    {
                      v277 = i - 24;
                      if (!i)
                        v277 = 0;
                      v278 = *(unsigned __int8 *)(v277 + 16);
                      if (v278 == 61)
                        v279 = v277;
                      else
                        v279 = 0;
                      if (i && v278 == 61 && *(_BYTE *)(**(_QWORD **)(v279 - 64) + 8) == 2)
                      {
                        if (v274 >= HIDWORD(v595))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v594, (uint64_t)v596, v274 + 1, 8);
                          v274 = v595;
                        }
                        v594[v274] = v279;
                        v274 = v595 + 1;
                        LODWORD(v595) = v595 + 1;
                      }
                    }
                    v272 += 8;
                  }
                  while (v272 != v273);
                }
                v584 = (char *)&v586 + 8;
                *(_QWORD *)&v585 = (char *)&v586 + 8;
                *((_QWORD *)&v585 + 1) = 4;
                LODWORD(v586) = 0;
                v390.__r_.__value_.__r.__words[0] = (std::string::size_type)v392;
                v390.__r_.__value_.__l.__size_ = (std::string::size_type)v392;
                v390.__r_.__value_.__r.__words[2] = 4;
                LODWORD(__p) = 0;
                if (v274)
                {
                  v307 = v239;
                  do
                  {
                    v280 = v594[v274 - 1];
                    LODWORD(v595) = v274 - 1;
                    v281 = sub_1C477672C(v6 + 56, *(_QWORD *)(v280 + 40));
                    v282 = *(_QWORD *)(v6 + 64);
                    if (v282 == *(_QWORD *)(v6 + 56))
                      v283 = 76;
                    else
                      v283 = 72;
                    if (v281 != (_QWORD *)(v282 + 8 * *(unsigned int *)(v6 + v283)))
                    {
                      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v584, v280);
                      if (v284)
                      {
                        if (*(_BYTE *)(v280 + 16) == 74)
                        {
                          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v390, v280);
                          if (v285)
                          {
                            v286 = ****(_QWORD ****)v271;
                            if (*(_QWORD *)(v286 + 128)
                              || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v286 + 72) + 48))(*(_QWORD *)(v286 + 72)))
                            {
                              v294 = *(_QWORD *)(v280 + 48);
                              if (v294)
                              {
                                v296 = *(_QWORD *)(v294 - 8 * *(unsigned int *)(v294 + 8));
                                if (*(_BYTE *)v296 != 15)
                                  v296 = *(_QWORD *)(v296 - 8 * *(unsigned int *)(v296 + 8));
                                v295 = *(_DWORD *)(v294 + 4);
                                LODWORD(v294) = *(unsigned __int16 *)(v294 + 2);
                              }
                              else
                              {
                                v295 = 0;
                                v296 = 0;
                              }
                              v297 = **(_QWORD **)(v6 + 32);
                              v298 = *(int8x16_t **)(v297 + 56);
                              LODWORD(v446) = 11;
                              BYTE4(v446) = 2;
                              v447 = v298;
                              v448 = v296;
                              v449 = __PAIR64__(v294, v295);
                              v450 = "loop-vectorize";
                              v451 = "VectorMixedPrecision";
                              v452 = 20;
                              LOBYTE(v453) = 0;
                              LOBYTE(v454) = 0;
                              v455 = &v457;
                              v456 = 0x400000000;
                              v480 = 0;
                              v481 = -1;
                              v482 = v297;
                              v445 = &off_1E814E570;
                              v394 = "floating point conversion changes vector width. ";
                              v395 = 48;
                              sub_1C53B17B4((uint64_t)&v455, (const void **)&v394);
                              v394 = "Mixed floating point precision requires an up/down ";
                              v395 = 51;
                              sub_1C53B17B4((uint64_t)&v455, (const void **)&v394);
                              v394 = "cast that will negatively impact performance.";
                              v395 = 45;
                              sub_1C53B17B4((uint64_t)&v455, (const void **)&v394);
                              sub_1C61998EC((uint64_t)&v396, (uint64_t)&v445);
                              v396 = (int8x16_t *)&off_1E814E570;
                              v445 = &off_1E814E790;
                              v299 = (int *)v455;
                              if ((_DWORD)v456)
                              {
                                v300 = (unint64_t)v456 << 6;
                                do
                                {
                                  v301 = (void **)((char *)v299 + v300);
                                  if (*((char *)v299 + v300 - 17) < 0)
                                    operator delete(*(v301 - 5));
                                  if (*((char *)v301 - 41) < 0)
                                    operator delete(*(v301 - 8));
                                  v300 -= 64;
                                }
                                while (v300);
                                v299 = (int *)v455;
                              }
                              if (v299 != &v457)
                                free(v299);
                              llvm::OptimizationRemarkEmitter::emit(v271, (llvm::DiagnosticInfoOptimizationBase *)&v396);
                              v396 = (int8x16_t *)&off_1E814E790;
                              v302 = (char *)v406;
                              if ((_DWORD)v407)
                              {
                                v303 = (unint64_t)v407 << 6;
                                do
                                {
                                  v304 = (void **)&v302[v303];
                                  if (v302[v303 - 17] < 0)
                                    operator delete(*(v304 - 5));
                                  if (*((char *)v304 - 41) < 0)
                                    operator delete(*(v304 - 8));
                                  v303 -= 64;
                                }
                                while (v303);
                                v302 = (char *)v406;
                              }
                              if (v302 != (char *)&v408)
                                free(v302);
                            }
                          }
                        }
                        v287 = *(_DWORD *)(v280 + 20);
                        if ((v287 & 0x40000000) != 0)
                        {
                          v289 = *(_QWORD *)(v280 - 8);
                          v288 = v287 & 0x7FFFFFF;
                        }
                        else
                        {
                          v288 = v287 & 0x7FFFFFF;
                          v289 = v280 - 32 * v288;
                        }
                        if (v288)
                        {
                          v290 = 32 * v288;
                          do
                          {
                            v291 = *(_QWORD *)v289;
                            if (*(_QWORD *)v289)
                              v292 = *(unsigned __int8 *)(*(_QWORD *)v289 + 16) >= 0x1Cu;
                            else
                              v292 = 0;
                            if (v292)
                            {
                              v293 = v595;
                              if (v595 >= (unint64_t)HIDWORD(v595))
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v594, (uint64_t)v596, v595 + 1, 8);
                                v293 = v595;
                              }
                              v594[v293] = v291;
                              LODWORD(v595) = v595 + 1;
                            }
                            v289 += 32;
                            v290 -= 32;
                          }
                          while (v290);
                        }
                      }
                    }
                    v274 = v595;
                  }
                  while ((_DWORD)v595);
                  v239 = v307;
                  if (v390.__r_.__value_.__l.__size_ != v390.__r_.__value_.__r.__words[0])
                    free((void *)v390.__r_.__value_.__l.__size_);
                }
                if ((void *)v585 != v584)
                  free((void *)v585);
                if (v594 != v596)
                  free(v594);
              }
              sub_1C6089C3C((uint64_t)&v506);
              v506 = xmmword_1E81AC938;
              v507 = *(_OWORD *)&off_1E81AC948;
              FollowupLoopID = llvm::makeFollowupLoopID(LoopID, (uint64_t)&v506, 2, "", 0);
              if (v306)
              {
                llvm::Loop::setLoopID((llvm::Loop *)v6, FollowupLoopID);
              }
              else
              {
                if (v239)
                  sub_1C607B678((llvm::Loop *)v6);
                llvm::LoopVectorizeHints::setAlreadyVectorized((llvm::LoopVectorizeHints *)v383);
              }
LABEL_492:
              if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v321.__r_.__value_.__l.__data_);
              if (SHIBYTE(v324) < 0)
                operator delete(v323[0]);
              sub_1C63DC12C(&v503);
              sub_1C63DC1A8((uint64_t)&v520);
              v111 = (uint64_t *)&v329;
LABEL_497:
              sub_1C63DC324((uint64_t)v111);
              goto LABEL_111;
            }
            v182 = v75 | (v73 << 32);
            llvm::LoopVectorizationCostModel::selectEpilogueVectorizationFactor((uint64_t)&v520, v182, (uint64_t)v502, (uint64_t)&v594);
            if ((_DWORD)v594)
              v183 = HIDWORD(v594) == 1;
            else
              v183 = 0;
            if (!v183 && v594 < 2)
            {
              v184 = (uint64_t **)v7[5];
              v185 = (const char *)v7[6];
              v186 = v7[2];
              v187 = (uint64_t)v7[3];
              v188 = v7[9];
              v189 = (unint64_t)v7[4];
              v191 = v7[11];
              v190 = (uint64_t)v7[12];
              v445 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))&off_1E81ACC28;
              v446 = v6;
              v447 = &v377;
              v448 = (uint64_t)v186;
              v449 = v189;
              v451 = v185;
              v452 = v187;
              v453 = (uint64_t)v188;
              v454 = v191;
              v455 = 0;
              v456 = v75 | (v73 << 32);
              v192 = v74;
              v457 = v74;
              v193 = ***v381;
              v458 = v460;
              v459 = 0x200000000;
              v463 = v193;
              v464 = &v472;
              v465 = v473;
              v466 = 0;
              v467 = 0;
              v468 = 512;
              v469 = 7;
              v461 = 0;
              v462 = 0;
              v470 = 0;
              v471 = 0;
              v472 = &unk_1E8167888;
              v473[0] = &unk_1E8167A08;
              v474 = v476;
              v475 = 0x400000000;
              v477 = &v479;
              v478 = 0x400000000;
              v483 = 0;
              v484 = 0;
              v485 = v344;
              v486 = &v520;
              v487 = 0;
              v489 = 0;
              v488 = 0;
              v490 = 0;
              v491 = v493;
              v492 = 0x800000000;
              v494 = v184;
              v495 = v190;
              v497 = &v506;
              v194 = 70;
              v498[0] = 1;
              do
              {
                (&v445)[v194] = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))-4096;
                v194 += 2;
              }
              while (v194 != 78);
              v499 = v501;
              v500 = 0x400000000;
              shouldOptimizeForSize = llvm::shouldOptimizeForSize(**(llvm::BasicBlock ***)(v6 + 32), v190, v184);
              v195 = v503;
              v196 = 8 * v504;
              do
              {
                v197 = *(_QWORD *)v195;
                v195 += 8;
                v196 -= 8;
              }
              while (!sub_1C63DAF00(v197 + 8, v75, v73, &v396));
              v198 = v192;
              llvm::LoopVectorizationPlanner::executePlan((uint64_t)v502, v75 | (v73 << 32), v192, *((llvm::VPlan **)v195 - 1), (llvm::InnerLoopVectorizer *)&v445, (uint64_t)v7[4]);
              v199 = v487;
              sub_1C63DC050((uint64_t)&v445);
LABEL_356:
              v239 = v199 == 0;
              v249 = v7[11];
              v250 = ****(_QWORD ****)v249;
              if (*(_QWORD *)(v250 + 128)
                || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v250 + 72) + 48))(*(_QWORD *)(v250 + 72)))
              {
                llvm::Loop::getStartLoc((llvm::Loop *)v6, &v394);
                v251 = v394;
                if (v394)
                {
                  v253 = *(_QWORD *)&v394[-8 * *((unsigned int *)v394 + 2)];
                  if (*(_BYTE *)v253 != 15)
                    v253 = *(_QWORD *)(v253 - 8 * *(unsigned int *)(v253 + 8));
                  v252 = *((_DWORD *)v394 + 1);
                  v251 = *((unsigned __int16 *)v394 + 1);
                }
                else
                {
                  v252 = 0;
                  v253 = 0;
                }
                v261 = **(_QWORD **)(v6 + 32);
                v262 = *(int8x16_t **)(v261 + 56);
                LODWORD(v446) = 9;
                BYTE4(v446) = 2;
                v447 = v262;
                v448 = v253;
                v449 = __PAIR64__(v251, v252);
                v450 = "loop-vectorize";
                v451 = "Vectorized";
                v452 = 10;
                LOBYTE(v453) = 0;
                LOBYTE(v454) = 0;
                v455 = &v457;
                v456 = 0x400000000;
                v480 = 0;
                v481 = -1;
                v482 = v261;
                v445 = &off_1E814E500;
                v396 = (int8x16_t *)"vectorized loop (vectorization width: ";
                v397 = 38;
                sub_1C53B17B4((uint64_t)&v455, (const void **)&v396);
                llvm::DiagnosticInfoOptimizationBase::Argument::Argument((char *)&v584, "VectorizationFactor", 0x13uLL, v182);
                v263 = sub_1C47E3888((uint64_t)&v445, (uint64_t)&v584);
                v396 = (int8x16_t *)", interleaved count: ";
                v397 = 21;
                sub_1C53B17B4(v263 + 80, (const void **)&v396);
                llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v390, "InterleaveCount", 0xFuLL, v198);
                v264 = sub_1C47E3888(v263, (uint64_t)&v390);
                v396 = (int8x16_t *)")";
                v397 = 1;
                sub_1C53B17B4(v264 + 80, (const void **)&v396);
                sub_1C61998EC((uint64_t)&v396, v264);
                v396 = (int8x16_t *)&off_1E814E500;
                if (v393 < 0)
                  operator delete(__p);
                if (SHIBYTE(v390.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v390.__r_.__value_.__l.__data_);
                if (SBYTE7(v587) < 0)
                  operator delete((void *)v586);
                if (SHIBYTE(v585) < 0)
                  operator delete(v584);
                v445 = &off_1E814E790;
                v265 = (int *)v455;
                if ((_DWORD)v456)
                {
                  v266 = (unint64_t)v456 << 6;
                  do
                  {
                    v267 = (void **)((char *)v265 + v266);
                    if (*((char *)v265 + v266 - 17) < 0)
                      operator delete(*(v267 - 5));
                    if (*((char *)v267 - 41) < 0)
                      operator delete(*(v267 - 8));
                    v266 -= 64;
                  }
                  while (v266);
                  v265 = (int *)v455;
                }
                if (v265 != &v457)
                  free(v265);
                if (v394)
                  llvm::MetadataTracking::untrack((uint64_t)&v394, (unsigned __int8 *)v394);
                llvm::OptimizationRemarkEmitter::emit(v249, (llvm::DiagnosticInfoOptimizationBase *)&v396);
                v396 = (int8x16_t *)&off_1E814E790;
                v268 = (char *)v406;
                if ((_DWORD)v407)
                {
                  v269 = (unint64_t)v407 << 6;
                  do
                  {
                    v270 = (void **)&v268[v269];
                    if (v268[v269 - 17] < 0)
                      operator delete(*(v270 - 5));
                    if (*((char *)v270 - 41) < 0)
                      operator delete(*(v270 - 8));
                    v269 -= 64;
                  }
                  while (v269);
                  v268 = (char *)v406;
                }
                if (v268 != (char *)&v408)
                  free(v268);
              }
              goto LABEL_410;
            }
            v584 = (void *)(v75 | (v73 << 32));
            *(_QWORD *)((char *)&v585 + 4) = v594;
            LODWORD(v585) = v74;
            HIDWORD(v585) = 1;
            v586 = 0u;
            v587 = 0u;
            v588 = 0u;
            v200 = (uint64_t **)v7[5];
            v201 = (const char *)v7[6];
            v202 = v7[2];
            v203 = (uint64_t)v7[3];
            v204 = v7[9];
            v205 = (unint64_t)v7[4];
            v207 = v7[11];
            v206 = (uint64_t)v7[12];
            v445 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))&off_1E81ACC28;
            v446 = v6;
            v447 = &v377;
            v448 = (uint64_t)v202;
            v449 = v205;
            v451 = v201;
            v452 = v203;
            v453 = (uint64_t)v204;
            v454 = v207;
            v455 = 0;
            v456 = (uint64_t)v584;
            v314 = v74;
            v457 = v74;
            v208 = ***v381;
            v458 = v460;
            v459 = 0x200000000;
            v463 = v208;
            v464 = &v472;
            v465 = v473;
            v466 = 0;
            v467 = 0;
            v468 = 512;
            v469 = 7;
            v461 = 0;
            v462 = 0;
            v470 = 0;
            v471 = 0;
            v472 = &unk_1E8167888;
            v473[0] = &unk_1E8167A08;
            v474 = v476;
            v475 = 0x400000000;
            v477 = &v479;
            v478 = 0x400000000;
            v483 = 0;
            v484 = 0;
            v485 = v344;
            v486 = &v520;
            v487 = 0;
            v489 = 0;
            v488 = 0;
            v490 = 0;
            v491 = v493;
            v492 = 0x800000000;
            v494 = v200;
            v495 = v206;
            v497 = &v506;
            v209 = 70;
            v498[0] = 1;
            do
            {
              (&v445)[v209] = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))-4096;
              v209 += 2;
            }
            while (v209 != 78);
            v499 = v501;
            v500 = 0x400000000;
            shouldOptimizeForSize = llvm::shouldOptimizeForSize(**(llvm::BasicBlock ***)(v6 + 32), v206, v200);
            v501[8] = &v584;
            v445 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))&off_1E81ACCA8;
            v210 = v584;
            v211 = HIDWORD(v584);
            v212 = v503;
            v213 = 8 * v504;
            do
            {
              v214 = *(_QWORD *)v212;
              v212 += 8;
              v213 -= 8;
            }
            while (!sub_1C63DAF00(v214 + 8, v210, v211, &v396));
            llvm::LoopVectorizationPlanner::executePlan((uint64_t)v502, (uint64_t)v584, v585, *((llvm::VPlan **)v212 - 1), (llvm::InnerLoopVectorizer *)&v445, (uint64_t)v7[4]);
            llvm::simplifyLoop((llvm *)v6, v7[4], (unint64_t **)v7[2], (int32x2_t *)v7[1], v7[9], 0, 0);
            llvm::formLCSSARecursively((llvm *)v6, v7[4], v7[2], v7[1], v215);
            v584 = *(void **)((char *)&v585 + 4);
            LODWORD(v585) = HIDWORD(v585);
            v216 = (uint64_t **)v7[5];
            v217 = (const char *)v7[6];
            v218 = v7[2];
            v219 = (uint64_t)v7[3];
            v220 = v7[9];
            v221 = (unint64_t)v7[4];
            v223 = v7[11];
            v222 = (uint64_t)v7[12];
            v396 = (int8x16_t *)&off_1E81ACC28;
            v397 = v6;
            v398 = &v377;
            v399 = (uint64_t)v218;
            v400 = v221;
            v402 = v217;
            v403 = v219;
            v404 = v220;
            v405 = v223;
            v406 = 0;
            v407 = *(_QWORD *)((char *)&v585 + 4);
            v408 = HIDWORD(v585);
            v224 = ***v381;
            v409[0] = v410;
            v409[1] = 0x200000000;
            v413 = v224;
            v414 = &v422;
            v415 = v423;
            v416 = 0;
            v417 = 0;
            v418 = 512;
            v419 = 7;
            v411 = 0;
            v412 = 0;
            v420 = 0;
            v421 = 0;
            v422 = &unk_1E8167888;
            v423[0] = &unk_1E8167A08;
            v423[6] = v424;
            v423[7] = 0x400000000;
            v424[4] = v425;
            v424[5] = 0x400000000;
            v428 = 0;
            v429 = 0;
            v430 = v344;
            v431 = &v520;
            v432 = 0;
            v434 = 0;
            v433 = 0;
            v435 = 0;
            v436 = v438;
            v437 = 0x800000000;
            v438[8] = v216;
            v438[9] = v222;
            v440 = &v506;
            v225 = 70;
            v441 = 1;
            do
            {
              (&v396)[v225] = (int8x16_t *)-4096;
              v225 += 2;
            }
            while (v225 != 78);
            v442 = v444;
            v443 = 0x400000000;
            v439 = llvm::shouldOptimizeForSize(**(llvm::BasicBlock ***)(v6 + 32), v222, v216);
            v444[8] = &v584;
            v396 = (int8x16_t *)&off_1E81ACCF0;
            v428 = v588;
            if ((_DWORD)v504)
            {
              v226 = v503;
              v227 = 8 * v504;
              v228 = DWORD1(v585);
              v229 = DWORD2(v585);
              while (!sub_1C63DAF00(*(_QWORD *)v226 + 8, v228, v229, &v390))
              {
                v226 += 8;
                v227 -= 8;
                if (!v227)
                  goto LABEL_329;
              }
              v210 = *(_QWORD *)v226;
            }
LABEL_329:
            v240 = *(_QWORD *)v210;
            if (!*(_QWORD *)v210 || (v241 = *(unsigned __int8 *)(v240 + 8), v241 != 1))
            {
              if (*(_DWORD *)(v240 + 80) != 1)
              {
                v240 = 0;
                goto LABEL_340;
              }
              v240 = **(_QWORD **)(v240 + 72);
              v241 = *(unsigned __int8 *)(v240 + 8);
            }
            if (v241 == 1)
            {
              do
              {
                v240 = *(_QWORD *)(v240 + 200);
                if (v240)
                  v242 = *(_BYTE *)(v240 + 8) == 1;
                else
                  v242 = 0;
              }
              while (v242);
            }
LABEL_340:
            v390.__r_.__value_.__r.__words[0] = (std::string::size_type)"vec.epilog.vector.body";
            v392[0] = 259;
            sub_1C60805FC(v240, (llvm::Twine *)&v390);
            v243 = *(_QWORD *)v210;
            if (*(_QWORD *)v210)
              v244 = *(_BYTE *)(*(_QWORD *)v210 + 8) == 1;
            else
              v244 = 0;
            if (v244)
            {
              v245 = 1;
            }
            else
            {
              if (*(_DWORD *)(v243 + 80) != 1)
              {
                v243 = 0;
LABEL_354:
                v247 = v243 + 200;
                v248 = *(_QWORD *)(v243 + 208);
                if (v248 != v243 + 200)
                {
                  v254 = *(_QWORD *)(v243 + 208);
                  while (1)
                  {
                    v255 = v254 - 24;
                    if (!v254)
                      v255 = 0;
                    if (*(unsigned __int8 *)(v255 + 8) - 13 > 7)
                      break;
                    v254 = *(_QWORD *)(v254 + 8);
                    if (v254 == v247)
                    {
                      v254 = v247;
                      break;
                    }
                  }
                  while (v248 != v254)
                  {
                    v256 = v248 - 24;
                    if (!v248)
                      v256 = 0;
                    v257 = *(unsigned __int8 *)(v256 + 8);
                    if (v257 == 20)
                      v258 = v256;
                    else
                      v258 = 0;
                    if (v248)
                    {
                      if (v257 == 20)
                      {
                        v259 = *(_QWORD *)(sub_1C63D1B18((uint64_t)v498, *(_QWORD *)(v258 + 152)) + 8);
                        if (v259)
                        {
                          v260 = sub_1C63D7A5C(v210, v259);
                          sub_1C63D6858(v258 + 40, 0, v260);
                        }
                      }
                    }
                    v248 = *(_QWORD *)(v248 + 8);
                  }
                }
                llvm::LoopVectorizationPlanner::executePlan((uint64_t)v502, *(uint64_t *)((char *)&v585 + 4), SHIDWORD(v585), (llvm::VPlan *)v210, (llvm::InnerLoopVectorizer *)&v396, (uint64_t)v7[4]);
                v199 = v487;
                sub_1C63DC050((uint64_t)&v396);
                sub_1C63DC050((uint64_t)&v445);
                v198 = v314;
                goto LABEL_356;
              }
              v243 = **(_QWORD **)(v243 + 72);
              v245 = *(unsigned __int8 *)(v243 + 8);
            }
            if (v245 == 1)
            {
              do
              {
                v243 = *(_QWORD *)(v243 + 200);
                if (v243)
                  v246 = *(_BYTE *)(v243 + 8) == 1;
                else
                  v246 = 0;
              }
              while (v246);
            }
            goto LABEL_354;
          }
          *(_QWORD *)&v320 = "InterleavingBeneficialButDisabled";
          *((_QWORD *)&v320 + 1) = 33;
          v79 = "the cost-model indicates that interleaving is beneficial but is explicitly disabled or interleave count is set to 1";
        }
        else
        {
          *(_QWORD *)&v320 = "InterleavingAvoided";
          *((_QWORD *)&v320 + 1) = 19;
          v79 = "Ignoring UserIC, because interleaving was avoided up front";
        }
        MEMORY[0x1CAA32ABC](&v321, v79);
LABEL_118:
        v88 = 0;
        goto LABEL_119;
      }
      v45 = v386;
    }
    if (v45 == 1)
      goto LABEL_44;
    goto LABEL_41;
  }
  v28 = (uint64_t)v7[2];
  v27 = v7[3];
  v318 = *((_OWORD *)v7 + 3);
  v29 = (uint64_t)v7[9];
  v31 = (uint64_t)v7[4];
  v30 = (uint64_t **)v7[5];
  v33 = v7[11];
  v32 = (uint64_t)v7[12];
  if (*(_WORD *)(llvm::PredicatedScalarEvolution::getBackedgeTakenCount(&v377) + 24) != 15)
  {
    v34 = v30;
    v35 = *(llvm::Function **)(**(_QWORD **)(v6 + 32) + 56);
    v396 = &v377;
    v397 = v6;
    v398 = (int8x16_t *)v31;
    v399 = v28;
    v400 = v345;
    LOBYTE(v401) = 0;
    LODWORD(v404) = 0;
    v403 = 0;
    v402 = 0;
    v405 = (llvm::OptimizationRemarkEmitter *)v409;
    v406 = v409;
    v407 = 4;
    v408 = 0;
    v410[3] = 0;
    v410[2] = 0;
    LODWORD(v411) = 0;
    v315 = v34;
    v36 = sub_1C6086EA0(*((_QWORD *)v35 + 14), v6, (uint64_t)v383, v32, v34, v27, v318, v29, v28, (uint64_t)v381, v31, (uint64_t)v344);
    LODWORD(v520) = 0;
    v522 = 0;
    v521 = 0;
    v523 = 0;
    v524 = 0;
    v525 = 0;
    v526 = 0;
    v527 = &v531;
    v528 = &v531;
    v529 = 4;
    LODWORD(v530) = 0;
    v533 = v36;
    v534 = 0;
    v536 = 0;
    v535 = 0;
    v537 = 0;
    v539 = 0;
    v538 = 0;
    v540 = 0;
    v542 = 0;
    v541 = 0;
    v543 = 0;
    v546 = 0;
    v544 = 0;
    v545 = 0;
    v37 = 29;
    v547 = 1;
    do
    {
      (&v520)[v37] = (const char *)-4096;
      v37 += 2;
    }
    while (v37 != 37);
    v548 = v550;
    v549 = 0x400000000;
    v551 = 0u;
    v552 = 0;
    v553 = 0u;
    v554 = 0;
    v555 = v6;
    v556 = &v377;
    v557 = v28;
    v558 = v344;
    v559 = v27;
    v560 = v318;
    v561 = v29;
    v562 = v33;
    v563 = v35;
    v564 = v383;
    v565 = &v396;
    v566 = v570;
    v567 = v570;
    v568 = 16;
    v569 = 0;
    v571 = v575;
    v572 = v575;
    v573 = 16;
    v574 = 0;
    v576 = v580;
    v577 = v580;
    v578 = 16;
    v579 = 0;
    v581 = v583;
    v582 = 0x800000000;
    v584 = (void *)v6;
    *(_QWORD *)&v585 = v28;
    *((_QWORD *)&v585 + 1) = v318;
    *(_QWORD *)&v586 = v27;
    *((_QWORD *)&v586 + 1) = v344;
    *(_QWORD *)&v587 = &v520;
    *((_QWORD *)&v587 + 1) = &v396;
    *(_QWORD *)&v588 = &v377;
    *((_QWORD *)&v588 + 1) = v383;
    v589 = &v375;
    v590 = v33;
    v591 = (char *)v593;
    v592 = 0x400000000;
    v38 = v384 | ((unint64_t)(v387 == 1) << 32);
    v593[5] = 0;
    v593[4] = 0;
    llvm::LoopVectorizationCostModel::collectElementTypesForWidening((llvm::LoopVectorizationCostModel *)&v520);
    llvm::LoopVectorizationPlanner::planInVPlanNativePath((__int128 *)&v584, v38, (uint64_t *)&v329);
    v9 = 0;
    if (!(byte_1EF8F6198 | byte_1ED838AD8))
    {
      if (v329 != (int8x16_t *)1)
        goto LABEL_27;
      v39 = v330 > 0;
      if ((_DWORD)v331)
        v39 = (int)v331 > 0;
      if (v39)
        goto LABEL_27;
      v40 = (int)v331 >= 0;
      if (!(_DWORD)v331)
        v40 = v330 >= 0;
      if (v40)
      {
        v9 = 0;
      }
      else
      {
LABEL_27:
        v309 = (llvm::OptimizationRemarkEmitter *)v32;
        v311 = v31;
        v41 = (uint64_t)v329;
        if ((_DWORD)v592)
        {
          v42 = v591;
          v43 = 8 * v592;
          while (!sub_1C63DAF00(*(_QWORD *)v42 + 8, v41, SHIDWORD(v41), &v506))
          {
            v42 += 8;
            v43 -= 8;
            if (!v43)
              goto LABEL_137;
          }
          v308 = *(llvm::VPlan **)v42;
        }
LABEL_137:
        v107 = v381;
        v108 = *((_QWORD *)v35 + 5) + 272;
        v506 = 0u;
        v507 = 0u;
        v508 = v311;
        v509 = (const char *)v28;
        sub_1C50D02DC((uint64_t)&v510, v381, v108, (uint64_t)"scev.check", 1);
        sub_1C50D02DC((uint64_t)v519, v107, v108, (uint64_t)"scev.check", 1);
        v445 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))&off_1E81ACC28;
        v446 = v6;
        v447 = &v377;
        v448 = v28;
        v449 = v311;
        v451 = (const char *)v318;
        v452 = (uint64_t)v27;
        v453 = v29;
        v454 = v33;
        v455 = 0;
        v456 = v41;
        v457 = 1;
        v109 = ***v381;
        v458 = v460;
        v459 = 0x200000000;
        v463 = v109;
        v464 = &v472;
        v465 = v473;
        v466 = 0;
        v467 = 0;
        v468 = 512;
        v469 = 7;
        v461 = 0;
        v462 = 0;
        v471 = 0;
        v470 = 0;
        v472 = &unk_1E8167888;
        v473[0] = &unk_1E8167A08;
        v474 = v476;
        v475 = 0x400000000;
        v477 = &v479;
        v478 = 0x400000000;
        v483 = 0;
        v484 = 0;
        v485 = v344;
        v486 = &v520;
        v487 = 0;
        v490 = 0;
        v488 = 0;
        v489 = 0;
        v491 = v493;
        v492 = 0x800000000;
        v494 = v315;
        v495 = (uint64_t)v309;
        v497 = &v506;
        v110 = 70;
        v498[0] = 1;
        do
        {
          (&v445)[v110] = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))-4096;
          v110 += 2;
        }
        while (v110 != 78);
        v499 = v501;
        v500 = 0x400000000;
        shouldOptimizeForSize = llvm::shouldOptimizeForSize(**(llvm::BasicBlock ***)(v6 + 32), (uint64_t)v309, v315);
        v9 = 1;
        llvm::LoopVectorizationPlanner::executePlan((uint64_t)&v584, v41, 1, v308, (llvm::InnerLoopVectorizer *)&v445, v311);
        sub_1C63DC050((uint64_t)&v445);
        sub_1C6089C3C((uint64_t)&v506);
        llvm::LoopVectorizeHints::setAlreadyVectorized((llvm::LoopVectorizeHints *)v383);
      }
    }
    sub_1C63DC12C(&v591);
    sub_1C63DC1A8((uint64_t)&v520);
    v111 = (uint64_t *)&v396;
    goto LABEL_497;
  }
LABEL_110:
  v9 = 0;
LABEL_111:
  sub_1C63DC378(v344);
  sub_1C4EA4224((uint64_t *)&v382);
  if (v380)
  {
    sub_1C4E43068((uint64_t)v379);
    MEMORY[0x1CAA32FB4](v379[0], 8);
    v380 = 0;
  }
  sub_1C4EA427C(v378);
  MEMORY[0x1CAA32FB4](v378[0], 8);
  MEMORY[0x1CAA32FB4](v377.i64[0], 8);
  return v9;
}

uint64_t sub_1C6086EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **this, _QWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v17;
  int v19;
  unsigned int OptionalBoolLoopAttribute;

  if (a1 && ((*(_BYTE *)(a1 + 17) & 4) != 0 || *(char *)(a1 + 13) < 0))
    return 1;
  if (llvm::shouldOptimizeForSize(**(llvm::BasicBlock ***)(a2 + 32), a4, this))
  {
    v17 = *(_DWORD *)(a3 + 40);
    if (v17 == -1)
    {
      OptionalBoolLoopAttribute = (unsigned __int16)llvm::getOptionalBoolLoopAttribute(*(llvm::Loop **)(a3 + 104), "llvm.loop.disable_nonforced", 0x1BuLL);
      if (OptionalBoolLoopAttribute <= 0x100)
        LOBYTE(OptionalBoolLoopAttribute) = 0;
      if ((_BYTE)OptionalBoolLoopAttribute)
        return 1;
      v17 = *(_DWORD *)(a3 + 40);
    }
    if (v17 == 1)
      goto LABEL_7;
    return 1;
  }
LABEL_7:
  if (word_1EF8F61E0 && dword_1EF8F6258 < 3)
    return dword_1C8677CA0[dword_1EF8F6258];
  v19 = *(_DWORD *)(a3 + 72);
  if (v19 == 1)
    return 3;
  if (!v19)
    return 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)*a6 + 208))(*a6, a2, a9, a10, a8, a7, a11, *(_QWORD *)(a12 + 56)))
  {
    return 3;
  }
  return 0;
}

void sub_1C6086FDC(uint64_t a1, llvm::LoopInfo *a2, llvm::OptimizationRemarkEmitter *a3, uint64_t a4)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int OptionalBoolLoopAttribute;
  const llvm::Loop *v15;
  _BYTE v16[8];
  uint64_t v17;
  int v18;
  void *__p;
  void *v20;
  llvm *v21;

  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a1 + 16) && byte_1EF8F6198 == 0)
  {
    if (!byte_1ED838B98)
      goto LABEL_10;
    llvm::LoopVectorizeHints::LoopVectorizeHints((llvm::LoopVectorizeHints *)v16, (const llvm::Loop *)a1, 1, a3, 0);
    if ((_DWORD)v20 == -1)
    {
      OptionalBoolLoopAttribute = (unsigned __int16)llvm::getOptionalBoolLoopAttribute(v21, "llvm.loop.disable_nonforced", 0x1BuLL);
      if (OptionalBoolLoopAttribute <= 0x100)
        LOBYTE(OptionalBoolLoopAttribute) = 0;
      if (!(_BYTE)OptionalBoolLoopAttribute && (_DWORD)v20 == -1)
        goto LABEL_10;
    }
    if (!llvm::LoopVectorizeHints::allowVectorization((llvm::LoopVectorizeHints *)v16, *(llvm::Function **)(**(_QWORD **)(a1 + 32) + 56), (uint64_t **)a1, 1))goto LABEL_10;
    if (v18 != 1)
    {
      if (v18)
      {
        llvm::LoopVectorizeHints::emitRemarkWithHints((llvm::LoopVectorizeHints *)v16);
LABEL_10:
        v10 = *(uint64_t **)(a1 + 8);
        v9 = *(uint64_t **)(a1 + 16);
        while (v10 != v9)
        {
          v11 = *v10++;
          sub_1C6086FDC(v11, a2, a3, a4);
        }
        return;
      }
      llvm::hasUnrollTransformation(v21, v15);
    }
  }
  sub_1C4DFE414((uint64_t)v16, a1);
  llvm::LoopBlocksDFS::perform((llvm::LoopBlocksDFS *)v16, a2);
  if ((sub_1C4F7C2CC((uint64_t)v16, (uint64_t *)a2) & 1) != 0)
  {
    if (__p)
    {
      v20 = __p;
      operator delete(__p);
    }
    MEMORY[0x1CAA32FB4](v17, 8);
    goto LABEL_10;
  }
  v12 = *(unsigned int *)(a4 + 8);
  if (v12 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a4 + 8 * v12) = a1;
  ++*(_DWORD *)(a4 + 8);
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v17, 8);
}

uint64_t llvm::LoopVectorizePass::run@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t ResultImpl;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  uint64_t result;
  uint64_t (**v20)(void);
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v7 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::ScalarEvolutionAnalysis::Key, a2) + 8;
  v8 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::LoopAnalysis::Key, a2) + 8;
  v26 = (_QWORD *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::TargetIRAnalysis::Key, a2) + 8);
  v9 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::DominatorTreeAnalysis::Key, a2) + 8;
  v27 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::BlockFrequencyAnalysis::Key, a2) + 8;
  v23 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::TargetLibraryAnalysis::Key, a2) + 8;
  v10 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::AAManager::Key, a2) + 8;
  v11 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::AssumptionAnalysis::Key, a2) + 8;
  v25 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::DemandedBitsAnalysis::Key, a2) + 8;
  v24 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::OptimizationRemarkEmitterAnalysis::Key, a2) + 8;
  v12 = *(_QWORD *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>,llvm::Function>::Key, a2)+ 8);
  v13 = operator new(0x48uLL);
  *v13 = &off_1E81AD230;
  v13[1] = v10;
  v13[2] = v11;
  v13[3] = v9;
  v13[4] = v8;
  v13[5] = v7;
  v13[6] = v23;
  v13[7] = v26;
  v13[8] = v12;
  v30 = v13;
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::Function>::Key, a2);
  v15 = sub_1C4E60FE0((uint64_t *)(ResultImpl + 8), *(_QWORD *)(a2 + 40));
  *(_QWORD *)&v22 = v11;
  *((_QWORD *)&v22 + 1) = v29;
  *(_QWORD *)&v21 = v25;
  *((_QWORD *)&v21 + 1) = v10;
  v17 = llvm::LoopVectorizePass::runImpl(a1, v16, v7, v8, v26, v9, v27, v23, v21, v22, v24, v15);
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  if ((v17 & 1) != 0)
  {
    v18 = v17;
    if (!byte_1ED838B98)
    {
      sub_1C4DDB144(a4, (uint64_t)&llvm::LoopAnalysis::Key);
      sub_1C4DDB144(a4, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
    }
    if (v18 >= 0x100u)
    {
      llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::ShouldRunExtraVectorPasses::Key, a2);
      sub_1C4DDB144(a4, (uint64_t)&llvm::ShouldRunExtraVectorPasses::Key);
    }
    else
    {
      sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::CFGAnalyses::SetKey);
    }
  }
  else
  {
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  result = (uint64_t)v30;
  if (v30 == v29)
  {
    v20 = (uint64_t (**)(void))(v29[0] + 32);
  }
  else
  {
    if (!v30)
      return result;
    v20 = (uint64_t (**)(void))(*v30 + 40);
  }
  return (*v20)();
}

uint64_t sub_1C60874A8(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

char *sub_1C60874BC(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  if (a4)
  {
    if (a4 >> 59)
      abort();
    v7 = result;
    result = (char *)operator new(32 * a4);
    *v7 = result;
    v7[2] = &result[32 * a4];
    if (a2 != a3)
    {
      v8 = 0;
      do
      {
        v9 = &result[v8];
        v10 = a2 + v8;
        *(_QWORD *)v9 = *(_QWORD *)(a2 + v8);
        v9[8] = 0;
        v9[24] = 0;
        if (*(_BYTE *)(a2 + v8 + 24))
        {
          v11 = *(_QWORD *)(v10 + 16);
          *((_QWORD *)v9 + 1) = *(_QWORD *)(v10 + 8);
          *((_QWORD *)v9 + 2) = v11;
          v9[24] = 1;
        }
        v8 += 32;
      }
      while (v10 + 32 != a3);
      result += v8;
    }
    v7[1] = result;
  }
  return result;
}

uint64_t sub_1C6087564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  const void *v7;
  const void *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  void *v13;
  const void *v14;
  _BYTE *v15;
  int v16;
  int v17;
  void *v18;
  const void *v19;
  const void *v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  int v39;
  _BYTE v40[64];
  __int128 v41;
  uint64_t v42;

  v6 = v40;
  v36 = v40;
  v7 = *(const void **)(a2 + 8);
  if (v7 == *(const void **)a2)
  {
    v37 = v40;
    v8 = v7;
  }
  else
  {
    v34 = *(unsigned int *)(a2 + 16);
    v6 = malloc_type_malloc(8 * v34, 0x4065EBACuLL);
    if (!v6)
    {
      if ((_DWORD)v34)
        goto LABEL_50;
      v6 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v6)
        goto LABEL_50;
    }
    v37 = v6;
    v8 = *(const void **)a2;
    v7 = *(const void **)(a2 + 8);
  }
  v10 = *(_DWORD *)(a2 + 16);
  v9 = *(_DWORD *)(a2 + 20);
  LODWORD(v38) = v10;
  if (v7 == v8)
    v11 = v9;
  else
    v11 = v10;
  if (v11)
  {
    memmove(v6, v7, 8 * v11);
    v9 = *(_DWORD *)(a2 + 20);
  }
  v12 = *(_DWORD *)(a2 + 24);
  HIDWORD(v38) = v9;
  v39 = v12;
  v42 = 0;
  v41 = 0uLL;
  sub_1C60874BC((char *)&v41, *(_QWORD *)(a2 + 96), *(_QWORD *)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 5);
  v13 = (void *)(a1 + 32);
  *(_QWORD *)a1 = a1 + 32;
  v15 = v36;
  v14 = v37;
  if (v37 == v36)
  {
    *(_QWORD *)(a1 + 8) = v13;
    v16 = HIDWORD(v38);
    if (HIDWORD(v38))
      memmove(v13, v14, 8 * HIDWORD(v38));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v37;
    v37 = v15;
    v16 = HIDWORD(v38);
  }
  v17 = v39;
  *(_DWORD *)(a1 + 16) = v38;
  *(_DWORD *)(a1 + 20) = v16;
  *(_DWORD *)(a1 + 24) = v17;
  v38 = 8;
  v39 = 0;
  *(_OWORD *)(a1 + 96) = v41;
  *(_QWORD *)(a1 + 112) = v42;
  v42 = 0;
  v41 = 0uLL;
  sub_1C63D9B78((void **)&v36);
  v18 = (void *)(a1 + 160);
  *(_QWORD *)(a1 + 128) = a1 + 160;
  v19 = *(const void **)(a3 + 8);
  if (v19 != *(const void **)a3)
  {
    v35 = *(unsigned int *)(a3 + 16);
    v18 = malloc_type_malloc(8 * v35, 0x4065EBACuLL);
    if (v18 || !(_DWORD)v35 && (v18 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      *(_QWORD *)(a1 + 136) = v18;
      v19 = *(const void **)a3;
      goto LABEL_13;
    }
LABEL_50:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  *(_QWORD *)(a1 + 136) = v18;
LABEL_13:
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a3 + 16);
  v20 = *(const void **)(a3 + 8);
  v21 = *(_DWORD *)(a3 + 20);
  if (v20 == v19)
    v22 = *(_DWORD *)(a3 + 20);
  else
    v22 = *(_DWORD *)(a3 + 16);
  if (v22)
  {
    memmove(v18, v20, 8 * v22);
    v21 = *(_DWORD *)(a3 + 20);
  }
  v23 = *(_DWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 148) = v21;
  *(_DWORD *)(a1 + 152) = v23;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  sub_1C60874BC((char *)(a1 + 224), *(_QWORD *)(a3 + 96), *(_QWORD *)(a3 + 104), (uint64_t)(*(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96)) >> 5);
  while (1)
  {
    v25 = *(_QWORD *)(a1 + 96);
    v24 = *(_QWORD *)(a1 + 104);
    v26 = *(_QWORD *)(a1 + 224);
    if (v24 - v25 == *(_QWORD *)(a1 + 232) - v26)
    {
      if (v25 == v24)
        return a1;
      v27 = v26 + 16;
      for (i = v25 + 16; ; i += 32)
      {
        v29 = i - 16;
        if (*(_QWORD *)(i - 16) != *(_QWORD *)(v27 - 16))
          break;
        v30 = *(unsigned __int8 *)(v27 + 8);
        if (*(_BYTE *)(i + 8))
          v31 = v30 == 0;
        else
          v31 = 1;
        if (v31)
        {
          if ((*(_BYTE *)(i + 8) == 0) == (v30 != 0))
            break;
        }
        else if (*(_QWORD *)(i - 8) != *(_QWORD *)(v27 - 8) || *(_QWORD *)i != *(_QWORD *)v27)
        {
          break;
        }
        v27 += 32;
        if (v29 + 32 == v24)
          return a1;
      }
    }
    if (!*(_BYTE *)(*(_QWORD *)(v24 - 32) + 8))
      return a1;
    sub_1C6087824((void **)a1);
  }
}

void **sub_1C6087824(void **this)
{
  llvm::SmallPtrSetImplBase *v1;
  void **v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v1 = (llvm::SmallPtrSetImplBase *)this;
  v2 = this + 12;
  v3 = this[13];
  do
  {
    v4 = *(v3 - 4);
    if (!*((_BYTE *)v3 - 8))
    {
      *(v3 - 3) = v4;
      *(v3 - 2) = 0;
      *((_BYTE *)v3 - 8) = 1;
    }
    while (1)
    {
      if (v4)
      {
        v5 = v4;
        while (!*(_DWORD *)(v5 + 80))
        {
          v5 = *(_QWORD *)(v5 + 40);
          if (!v5)
          {
            v5 = v4;
            break;
          }
        }
      }
      else
      {
        v5 = 0;
      }
      v6 = *(v3 - 3);
      v7 = *(v3 - 2);
      if (v6 == v4)
      {
        v8 = *(_BYTE *)(v4 + 8) != 1 || v4 == 0;
        v9 = *(unsigned int *)(v5 + 80);
        if (!v8)
          v9 = (v9 + 1);
        if (v7 == v9)
          break;
      }
      *(v3 - 2) = v7 + 1;
      if (v6)
        v10 = *(_BYTE *)(v6 + 8) == 1;
      else
        v10 = 0;
      if (!v10)
        goto LABEL_25;
      if ((_DWORD)v7)
      {
        LODWORD(v7) = v7 - 1;
LABEL_25:
        while (!*(_DWORD *)(v6 + 80))
          v6 = *(_QWORD *)(v6 + 40);
        v11 = (uint64_t *)(*(_QWORD *)(v6 + 72) + 8 * v7);
        goto LABEL_27;
      }
      v11 = (uint64_t *)(v6 + 200);
LABEL_27:
      v12 = *v11;
      this = (void **)sub_1C4774094(v1, *v11);
      if (v13)
      {
        v16 = v12;
        v17 = 0;
        v18 = 0;
        v15 = *((_QWORD *)v1 + 13);
        if (v15 >= *((_QWORD *)v1 + 14))
        {
          this = (void **)sub_1C60879F8(v2, (uint64_t)&v16);
        }
        else
        {
          *(_QWORD *)v15 = v12;
          *(_BYTE *)(v15 + 8) = 0;
          this = (void **)(v15 + 32);
          *(_BYTE *)(v15 + 24) = 0;
        }
        *((_QWORD *)v1 + 13) = this;
        return this;
      }
    }
    v14 = *((_QWORD *)v1 + 13);
    if (*(_BYTE *)(v14 - 8))
      *(_BYTE *)(v14 - 8) = 0;
    v3 = (_QWORD *)(v14 - 32);
    *((_QWORD *)v1 + 13) = v14 - 32;
  }
  while (*((_QWORD *)v1 + 12) != v14 - 32);
  return this;
}

char *sub_1C6087994(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  char *result;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= *(_QWORD *)(a1 + 16))
  {
    result = sub_1C60879F8((void **)a1, a2);
  }
  else
  {
    *(_QWORD *)v3 = *(_QWORD *)a2;
    *(_BYTE *)(v3 + 8) = 0;
    *(_BYTE *)(v3 + 24) = 0;
    if (*(_BYTE *)(a2 + 24))
    {
      v4 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(v3 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(v3 + 16) = v4;
      *(_BYTE *)(v3 + 24) = 1;
    }
    result = (char *)(v3 + 32);
  }
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

char *sub_1C60879F8(void **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = (v2 - (_BYTE *)*a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    abort();
  v8 = (_BYTE *)a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 59)
      sub_1C4764EE4();
    v10 = (char *)operator new(32 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[32 * v4];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  v11[8] = 0;
  v11[24] = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    v12 = *(_QWORD *)(a2 + 16);
    *((_QWORD *)v11 + 1) = *(_QWORD *)(a2 + 8);
    *((_QWORD *)v11 + 2) = v12;
    v11[24] = 1;
  }
  v13 = &v10[32 * v9];
  v14 = v11 + 32;
  if (v2 == v3)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    v15 = 0;
    do
    {
      v16 = &v11[v15];
      v17 = &v2[v15];
      *((_QWORD *)v16 - 4) = *(_QWORD *)&v2[v15 - 32];
      *(v16 - 24) = 0;
      *(v16 - 8) = 0;
      if (v2[v15 - 8])
      {
        v19 = *((_QWORD *)v17 - 3);
        v18 = *((_QWORD *)v17 - 2);
        *((_QWORD *)v16 - 3) = v19;
        *((_QWORD *)v16 - 2) = v18;
        *(v16 - 8) = 1;
      }
      v15 -= 32;
    }
    while (&v2[v15] != v3);
    v2 = (char *)*a1;
    v20 = (char *)a1[1];
    *a1 = &v11[v15];
    a1[1] = v14;
    a1[2] = v13;
    while (v20 != v2)
    {
      if (*(v20 - 8))
        *(v20 - 8) = 0;
      v20 -= 32;
    }
  }
  if (v2)
    operator delete(v2);
  return v14;
}

_QWORD *sub_1C6087B58(uint64_t a1, int a2)
{
  int v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(120 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63DA1A8((char **)a1, (uint64_t)v4, (uint64_t)&v4[120 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 120 * v10;
    do
    {
      *result = -4096;
      result += 15;
      v11 -= 120;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C6087C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  const void **v11;
  const void *v12;
  uint64_t v13;
  void **v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  const void **v27;
  const void *v28;
  uint64_t v29;
  void **v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  const void *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v70;
  int v75;
  int v76;

  v2 = a1;
  if (a1 != a2)
  {
    v3 = (_QWORD *)a2;
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v5 = *(unsigned int *)(a2 + 8);
      v6 = *(unsigned int *)(a1 + 8);
      if (v6 < v5)
      {
        v75 = *(_DWORD *)(a2 + 8);
        if (*(_DWORD *)(a1 + 12) < v5)
        {
          if ((_DWORD)v6)
          {
            v48 = *(char **)a1;
            v49 = 48 * v6;
            do
            {
              v50 = *(char **)&v48[v49 - 48];
              if (&v48[v49 - 32] != v50)
                free(v50);
              v49 -= 48;
            }
            while (v49);
          }
          *(_DWORD *)(v2 + 8) = 0;
          sub_1C6213CB4(v2, v5);
        }
        else if ((_DWORD)v6)
        {
          v7 = 0;
          v8 = *(char **)a1;
          v70 = *(unsigned int *)(a1 + 8);
          v9 = 48 * v6;
          v10 = *(char **)a2;
          while (v4 == v8)
          {
LABEL_17:
            v10 += 48;
            v7 += 48;
            if (v9 == v7)
            {
              v3 = (_QWORD *)a2;
              v2 = a1;
              LODWORD(v5) = v75;
              v40 = v70;
              goto LABEL_66;
            }
          }
          v11 = (const void **)&v4[v7];
          v13 = (uint64_t)&v4[v7 + 16];
          v12 = *(const void **)&v4[v7];
          if ((const void *)v13 != v12)
          {
            v20 = &v8[v7];
            v21 = *(char **)&v8[v7];
            if (&v8[v7 + 16] != v21)
            {
              free(v21);
              v12 = *v11;
            }
            *(_QWORD *)v20 = v12;
            v15 = v10 + 8;
            v22 = &v4[v7];
            *((_QWORD *)v20 + 1) = *(_QWORD *)&v4[v7 + 8];
            *(_QWORD *)v22 = v13;
            *((_DWORD *)v22 + 3) = 0;
            goto LABEL_16;
          }
          v14 = (void **)&v8[v7];
          v15 = &v4[v7 + 8];
          v16 = *(unsigned int *)v15;
          v17 = &v8[v7];
          v18 = *(unsigned int *)&v8[v7 + 8];
          if (v18 >= v16)
          {
            if ((_DWORD)v16)
              memmove(*v14, v12, 8 * v16);
            goto LABEL_15;
          }
          if (*((_DWORD *)v17 + 3) < v16)
          {
            *((_DWORD *)v17 + 2) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v8[v7], (uint64_t)&v8[v7 + 16], v16, 8);
            v14 = (void **)&v8[v7];
          }
          else if ((_DWORD)v18)
          {
            memmove(*v14, v12, 8 * v18);
            v14 = (void **)&v8[v7];
LABEL_13:
            v19 = *(unsigned int *)v15;
            if (v18 != v19)
              memcpy((char *)*v14 + 8 * v18, (char *)*v11 + 8 * v18, (_BYTE *)*v11 + 8 * v19 - ((_BYTE *)*v11 + 8 * v18));
LABEL_15:
            *((_DWORD *)v17 + 2) = v16;
LABEL_16:
            *(_DWORD *)v15 = 0;
            goto LABEL_17;
          }
          v18 = 0;
          goto LABEL_13;
        }
        v40 = 0;
LABEL_66:
        v51 = *v3;
        v52 = *((unsigned int *)v3 + 2);
        if (v40 != v52)
        {
          v53 = v3;
          v54 = *(_QWORD *)v2;
          v55 = 48 * v40;
          v56 = 48 * v52;
          while (1)
          {
            v57 = v54 + v55;
            v58 = (void *)(v54 + v55 + 16);
            *(_QWORD *)v57 = v58;
            *(_QWORD *)(v57 + 8) = 0x400000000;
            if (v51 == v54)
              goto LABEL_76;
            v59 = v51 + v55;
            v60 = *(unsigned int *)(v51 + v55 + 8);
            if (!*(_DWORD *)(v51 + v55 + 8))
              goto LABEL_76;
            v61 = v51 + v55;
            v63 = v51 + v55 + 16;
            v62 = *(const void **)(v51 + v55);
            if ((const void *)v63 != v62)
            {
              *(_QWORD *)v57 = v62;
              v65 = *(_DWORD *)(v61 + 12);
              *(_DWORD *)(v57 + 8) = v60;
              *(_DWORD *)(v57 + 12) = v65;
              *(_QWORD *)v61 = v63;
              *(_DWORD *)(v61 + 12) = 0;
              goto LABEL_75;
            }
            if (v60 >= 5)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v54 + v55, v54 + v55 + 16, *(unsigned int *)(v51 + v55 + 8), 8);
              v64 = *(unsigned int *)(v59 + 8);
              if (!(_DWORD)v64)
                goto LABEL_74;
              v62 = *(const void **)v59;
              v58 = *(void **)v57;
            }
            else
            {
              v64 = *(unsigned int *)(v51 + v55 + 8);
            }
            memcpy(v58, v62, 8 * v64);
LABEL_74:
            *(_DWORD *)(v57 + 8) = v60;
LABEL_75:
            *(_DWORD *)(v59 + 8) = 0;
LABEL_76:
            v54 += 48;
            v51 += 48;
            v56 -= 48;
            if (v55 == v56)
            {
              v3 = v53;
              v51 = *v53;
              LODWORD(v5) = v75;
              break;
            }
          }
        }
        *(_DWORD *)(v2 + 8) = v5;
        v66 = *((unsigned int *)v3 + 2);
        if ((_DWORD)v66)
        {
          v67 = 48 * v66;
          do
          {
            v68 = *(void **)(v51 + v67 - 48);
            if ((void *)(v51 + v67 - 32) != v68)
              free(v68);
            v67 -= 48;
          }
          while (v67);
        }
        goto LABEL_86;
      }
      v23 = *(char **)a1;
      if (!(_DWORD)v5)
      {
        v39 = *(char **)a1;
LABEL_48:
        v41 = &v23[48 * v6];
        while (v41 != v39)
        {
          v43 = (char *)*((_QWORD *)v41 - 6);
          v41 -= 48;
          v42 = v43;
          if (v41 + 16 != v43)
            free(v42);
        }
        *(_DWORD *)(v2 + 8) = v5;
        v44 = *((unsigned int *)v3 + 2);
        if ((_DWORD)v44)
        {
          v45 = *v3;
          v46 = 48 * v44;
          do
          {
            v47 = *(void **)(v45 + v46 - 48);
            if ((void *)(v45 + v46 - 32) != v47)
              free(v47);
            v46 -= 48;
          }
          while (v46);
        }
LABEL_86:
        *((_DWORD *)v3 + 2) = 0;
        return v2;
      }
      v24 = 0;
      v76 = *(_DWORD *)(a2 + 8);
      v25 = 48 * v5;
      v26 = *(char **)a2;
      while (v4 == v23)
      {
LABEL_38:
        v26 += 48;
        v24 += 48;
        if (v25 == v24)
        {
          v3 = (_QWORD *)a2;
          v2 = a1;
          LODWORD(v6) = *(_DWORD *)(a1 + 8);
          v39 = &v23[v24];
          v23 = *(char **)a1;
          LODWORD(v5) = v76;
          goto LABEL_48;
        }
      }
      v27 = (const void **)&v4[v24];
      v29 = (uint64_t)&v4[v24 + 16];
      v28 = *(const void **)&v4[v24];
      if ((const void *)v29 != v28)
      {
        v36 = &v23[v24];
        v37 = *(char **)&v23[v24];
        if (&v23[v24 + 16] != v37)
        {
          free(v37);
          v28 = *v27;
        }
        *(_QWORD *)v36 = v28;
        v32 = v26 + 8;
        v38 = &v4[v24];
        *((_QWORD *)v36 + 1) = *(_QWORD *)&v4[v24 + 8];
        *(_QWORD *)v38 = v29;
        *((_DWORD *)v38 + 3) = 0;
        goto LABEL_37;
      }
      v30 = (void **)&v23[v24];
      v32 = &v4[v24 + 8];
      v31 = *(unsigned int *)v32;
      v33 = &v23[v24];
      v34 = *(unsigned int *)&v23[v24 + 8];
      if (v34 >= v31)
      {
        if ((_DWORD)v31)
          memmove(*v30, v28, 8 * v31);
        goto LABEL_36;
      }
      if (*((_DWORD *)v33 + 3) < v31)
      {
        *((_DWORD *)v33 + 2) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23[v24], (uint64_t)&v23[v24 + 16], v31, 8);
        v30 = (void **)&v23[v24];
      }
      else if ((_DWORD)v34)
      {
        memmove(*v30, v28, 8 * v34);
        v30 = (void **)&v23[v24];
LABEL_34:
        v35 = *(unsigned int *)v32;
        if (v34 != v35)
          memcpy((char *)*v30 + 8 * v34, (char *)*v27 + 8 * v34, (_BYTE *)*v27 + 8 * v35 - ((_BYTE *)*v27 + 8 * v34));
LABEL_36:
        *((_DWORD *)v33 + 2) = v31;
LABEL_37:
        *(_DWORD *)v32 = 0;
        goto LABEL_38;
      }
      v34 = 0;
      goto LABEL_34;
    }
    sub_1C63DA294((char **)a1, (char **)a2);
  }
  return v2;
}

uint64_t sub_1C6088150(uint64_t *a1, uint64_t a2, uint64_t VectorSplat)
{
  llvm::APInt *v6;
  unsigned int v7;
  llvm::APInt *v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  llvm::Type *v12;
  uint64_t v13;
  _BYTE v15[32];
  __int16 v16;

  if (a2 && *(_BYTE *)(a2 + 16) == 16)
  {
    v6 = (llvm::APInt *)(a2 + 24);
    v7 = *(_DWORD *)(a2 + 32);
    if (v7 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v6) == v7 - 1)
        return VectorSplat;
    }
    else if (*(_QWORD *)v6 == 1)
    {
      return VectorSplat;
    }
  }
  if (VectorSplat && *(_BYTE *)(VectorSplat + 16) == 16)
  {
    v8 = (llvm::APInt *)(VectorSplat + 24);
    v9 = *(_DWORD *)(VectorSplat + 32);
    if (v9 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v8) != v9 - 1)
        goto LABEL_11;
    }
    else if (*(_QWORD *)v8 != 1)
    {
      goto LABEL_11;
    }
    return a2;
  }
LABEL_11:
  if (*(_QWORD *)a2)
    v10 = (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18;
  else
    v10 = 0;
  if (v10 && (*(_DWORD *)(*(_QWORD *)VectorSplat + 8) & 0xFE) != 0x12)
  {
    v11 = *a1;
    v12 = (llvm::Type *)(*(unsigned int *)(*(_QWORD *)a2 + 32) | ((unint64_t)(*(_DWORD *)(*(_QWORD *)a2 + 8) == 19) << 32));
    v16 = 257;
    VectorSplat = llvm::IRBuilderBase::CreateVectorSplat(v11, v12, (uint64_t ***)VectorSplat, (uint64_t)v15);
  }
  v13 = *a1;
  v16 = 257;
  return sub_1C4EC4040(v13, a2, VectorSplat, (uint64_t)v15, 0, 0);
}

uint64_t sub_1C6088290(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = 0;
  v5 = a2;
  if (sub_1C635A4E4((uint64_t *)a1, &v5, &v4))
    return v4;
  else
    return *(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 16);
}

uint64_t sub_1C60882E0(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t *v3;
  int v4;
  unint64_t v5;
  unsigned __int8 v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 & 0x40000000) != 0)
  {
    v3 = *(uint64_t **)(a1 - 8);
    v2 = v1 & 0x7FFFFFF;
  }
  else
  {
    v2 = v1 & 0x7FFFFFF;
    v3 = (uint64_t *)(a1 - 32 * v2);
  }
  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = sub_1C63DA438(v3, &v3[4 * v2]);
  v6 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v7 = &unk_1ED7EA000;
  if ((v6 & 1) == 0)
  {
    v14 = v5;
    v11 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v7 = &unk_1ED7EA000;
    v12 = v11;
    v5 = v14;
    if (v12)
    {
      v13 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v13 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v13;
      __cxa_guard_release(&qword_1ED7EAC88);
      v7 = (_QWORD *)&unk_1ED7EA000;
      v5 = v14;
    }
  }
  LODWORD(v15) = v4 - 28;
  HIDWORD(v15) = v5;
  v8 = 0x9DDFEA08EB382D69 * (v15 ^ v7[400] ^ __ROR8__(v5 + 12, 12));
  v9 = __ROR8__(v5 + 12, 12) ^ (v8 >> 47);
  return (-348639895
        * ((((0x9DDFEA08EB382D69 * (v9 ^ v8)) >> 32) >> 15) ^ (-348639895
                                                                             * (v9 ^ v8)))) ^ v5;
}

uint64_t sub_1C6088434(uint64_t a1, uint64_t *a2, const llvm::Instruction ***a3)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  const llvm::Instruction **v8;
  int v9;
  int i;
  unsigned int v11;
  const llvm::Instruction **v12;
  uint64_t v13;
  const llvm::Instruction *v14;
  BOOL v15;
  uint64_t result;

  v5 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v6 = 4;
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 16);
    if (!v6)
    {
      v12 = 0;
      result = 0;
      goto LABEL_27;
    }
    v5 = *(_QWORD *)(a1 + 8);
  }
  v7 = sub_1C60882E0(*a2);
  v8 = 0;
  v9 = v6 - 1;
  for (i = 1; ; ++i)
  {
    v11 = v7 & v9;
    v12 = (const llvm::Instruction **)(v5 + 16 * (v7 & v9));
    v13 = *a2;
    v14 = *v12;
    if (*v12 == (const llvm::Instruction *)-8192
      || v13 == -8192
      || v13 == -4096
      || v14 == (const llvm::Instruction *)-4096)
    {
      if ((const llvm::Instruction *)v13 == v14)
        goto LABEL_22;
    }
    else
    {
      if (llvm::Instruction::isIdenticalToWhenDefined((llvm::Instruction *)*a2, *v12)
        && (*((unsigned __int8 *)v14 + 17) ^ *(unsigned __int8 *)(v13 + 17)) < 2)
      {
LABEL_22:
        result = 1;
        goto LABEL_27;
      }
      v14 = *v12;
    }
    if (v14 == (const llvm::Instruction *)-4096)
      break;
    if (v8)
      v15 = 0;
    else
      v15 = v14 == (const llvm::Instruction *)-8192;
    if (v15)
      v8 = (const llvm::Instruction **)(v5 + 16 * v11);
    v7 = v11 + i;
  }
  result = 0;
  if (v8)
    v12 = v8;
LABEL_27:
  *a3 = v12;
  return result;
}

uint64_t sub_1C6088558(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  const llvm::Instruction **v10;
  const llvm::Instruction **v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C6088434((uint64_t)v5, a2, &v11);
      v10 = v11;
      *v11 = (const llvm::Instruction *)*a2;
      v10[1] = (const llvm::Instruction *)a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

unsigned int *sub_1C608861C(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(_OWORD **)result;
      v7 = 40 * v2;
      do
      {
        *v6 = xmmword_1C86510A0;
        v6 = (_OWORD *)((char *)v6 + 40);
        v7 -= 40;
      }
      while (v7);
    }
  }
  else
  {
    result = (unsigned int *)MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    if (v5)
    {
      v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      v1[4] = v9;
      result = (unsigned int *)operator new(40 * v9, (std::align_val_t)8uLL);
      *(_QWORD *)v1 = result;
      *((_QWORD *)v1 + 1) = 0;
      v10 = v1[4];
      if ((_DWORD)v10)
      {
        v11 = 40 * v10;
        do
        {
          *(_OWORD *)result = xmmword_1C86510A0;
          result += 10;
          v11 -= 40;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *((_QWORD *)v1 + 1) = 0;
      v1[4] = 0;
    }
  }
  return result;
}

void sub_1C608872C(_DWORD *a1)
{
  int v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a1[2];
  sub_1C63DA744(a1);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if ((_DWORD)v4 == a1[4])
  {
    *((_QWORD *)a1 + 1) = 0;
    if ((_DWORD)v4)
    {
      v5 = *(_QWORD **)a1;
      v6 = 72 * v4;
      do
      {
        *v5 = 0x1FFFFFFFFLL;
        v5 += 9;
        v6 -= 72;
      }
      while (v6);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    if ((_DWORD)v4)
    {
      v7 = (4 * (int)v4 / 3u + 1) | ((unint64_t)(4 * (int)v4 / 3u + 1) >> 1);
      v8 = v7 | (v7 >> 2) | ((v7 | (v7 >> 2)) >> 4);
      LODWORD(v8) = (((v8 | (v8 >> 8)) >> 16) | v8 | (v8 >> 8)) + 1;
      a1[4] = v8;
      v9 = operator new(72 * v8, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v9;
      *((_QWORD *)a1 + 1) = 0;
      v10 = a1[4];
      if ((_DWORD)v10)
      {
        v11 = 72 * v10;
        do
        {
          *v9 = 0x1FFFFFFFFLL;
          v9 += 9;
          v11 -= 72;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *((_QWORD *)a1 + 1) = 0;
      a1[4] = 0;
    }
  }
}

uint64_t sub_1C6088838(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v7 = *(uint64_t **)a2;
        v8 = *(_QWORD **)a1;
        v9 = 8 * v4;
        do
        {
          v10 = *v7++;
          *v8++ = v10;
          v9 -= 8;
        }
        while (v9);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) >= v4)
      {
        if ((_DWORD)v5)
        {
          v11 = *(uint64_t **)a2;
          v12 = *(_QWORD **)a1;
          v13 = 8 * v5;
          do
          {
            v14 = *v11++;
            *v12++ = v14;
            v13 -= 8;
          }
          while (v13);
        }
        else
        {
          v5 = 0;
        }
        v6 = v4;
      }
      else
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4, 8);
        v5 = 0;
        v6 = *(unsigned int *)(a2 + 8);
      }
      if (v5 != v6)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v5), (const void *)(*(_QWORD *)a2 + 8 * v5), *(_QWORD *)a2 + 8 * v6 - (*(_QWORD *)a2 + 8 * v5));
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

_OWORD *sub_1C6088924(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63DAC2C(a1, v4, v4 + 40 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 40 * v10;
    do
    {
      *result = xmmword_1C86510A0;
      result = (_OWORD *)((char *)result + 40);
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C60889EC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C607A6A4(v0, 0, 0);
}

void sub_1C6088A20(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C6088A44(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::BlockFrequencyInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::LoopAccessLegacyAnalysis::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::DemandedBitsWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::OptimizationRemarkEmitterWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::InjectTLIMappingsLegacy::ID);
  if (!byte_1ED838B98)
  {
    sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::LoopInfoWrapperPass::ID);
    sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  }
  sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::BasicAAWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)llvm::ProfileSummaryInfoWrapperPass::ID);
}

uint64_t sub_1C6088BAC(llvm::FunctionPass *a1, llvm::Function *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  char **v8;
  char *v9;
  uint64_t v10;
  char **v11;
  char *v12;
  uint64_t v13;
  char **v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char **v21;
  char *v22;
  uint64_t v23;
  void **v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t AnalysisPass;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  void **v32;
  unint64_t v33;
  uint64_t v34;
  char **v35;
  char *v36;
  uint64_t v37;
  char **v38;
  char *v39;
  llvm::AssumptionCacheTracker *v40;
  uint64_t AssumptionCache;
  void **v42;
  void *v43;
  void **v44;
  void *v45;
  uint64_t v46;
  void **v47;
  void *v48;
  uint64_t v49;
  char **v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  void (**v54)(void);
  void *v55;
  void **v56;
  unsigned int v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63[2];
  int v64;
  uint64_t v65[2];
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t (**v70)();
  void *__src;
  unsigned int v72;
  _QWORD v73[2];
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) == 0)
  {
    v8 = (char **)**((_QWORD **)a1 + 1);
    do
    {
      v9 = *v8;
      v8 += 2;
    }
    while (v9 != llvm::ScalarEvolutionWrapperPass::ID);
    v10 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), llvm::ScalarEvolutionWrapperPass::ID)+ 32);
    v11 = (char **)**((_QWORD **)a1 + 1);
    do
    {
      v12 = *v11;
      v11 += 2;
    }
    while (v12 != llvm::LoopInfoWrapperPass::ID);
    v13 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), llvm::LoopInfoWrapperPass::ID);
    v14 = (char **)**((_QWORD **)a1 + 1);
    do
    {
      v15 = *v14;
      v14 += 2;
    }
    while (v15 != llvm::TargetTransformInfoWrapperPass::ID);
    v16 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v14 - 1) + 96))(*(v14 - 1), llvm::TargetTransformInfoWrapperPass::ID);
    v70 = 0;
    __src = 0;
    v72 = 0;
    v73[0] = 0;
    v73[1] = 0;
    v74 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v17 = *(_QWORD *)(v16 + 56);
    if (v17)
    {
      v2 = v73;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, llvm::Function *))(*(_QWORD *)v17 + 48))(v63, v17, a2);
      v3 = (uint64_t *)(v16 + 64);
      v18 = v63[0];
      if (!*(_BYTE *)(v16 + 72))
      {
        *(_QWORD *)(v16 + 64) = v63[0];
        *(_BYTE *)(v16 + 72) = 1;
        goto LABEL_14;
      }
      v63[0] = 0;
      v19 = *v3;
      *v3 = v18;
      if (!v19 || ((*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19), v20 = v63[0], v63[0] = 0, !v20))
      {
LABEL_14:
        MEMORY[0x1CAA32FB4](0, 8);
        sub_1C4D8B440(v2);
        sub_1C4D8B52C((uint64_t *)&v70);
        v21 = (char **)**((_QWORD **)a1 + 1);
        do
        {
          v22 = *v21;
          v21 += 2;
        }
        while (v22 != llvm::DominatorTreeWrapperPass::ID);
        v62 = v10;
        v23 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v21 - 1) + 96))(*(v21 - 1), llvm::DominatorTreeWrapperPass::ID);
        v24 = (void **)**((_QWORD **)a1 + 1);
        do
        {
          v25 = *v24;
          v24 += 2;
        }
        while (v25 != &llvm::BlockFrequencyInfoWrapperPass::ID);
        v26 = v13 + 32;
        v61 = v23 + 32;
        v27 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v24 - 1) + 96))(*(v24 - 1), &llvm::BlockFrequencyInfoWrapperPass::ID)+ 32;
        AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)a1 + 1) + 24), llvm::TargetLibraryInfoWrapperPass::ID, 1);
        if (!AnalysisPass
          || (v29 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, llvm::TargetLibraryInfoWrapperPass::ID)) == 0)
        {
          v30 = 0;
          goto LABEL_38;
        }
        v31 = v29;
        v63[0] = 0;
        v63[1] = 0;
        v64 = 0;
        v65[0] = 0;
        v65[1] = 0;
        v66 = 0;
        v67 = 0;
        v68 = 0;
        v69 = 0;
        llvm::TargetLibraryAnalysis::run(v29 + 32, (uint64_t)a2, (uint64_t)&v70);
        *(_QWORD *)(v31 + 240) = v70;
        v30 = (uint64_t *)(v31 + 240);
        if (*(_BYTE *)(v31 + 320))
        {
          if (v30 == (uint64_t *)&v70)
          {
LABEL_34:
            *(_DWORD *)(v31 + 312) = v78;
LABEL_35:
            if (__src != v73)
              free(__src);
            MEMORY[0x1CAA32FB4](0, 8);
            sub_1C4D8B440(v65);
            sub_1C4D8B52C(v63);
LABEL_38:
            v35 = (char **)**((_QWORD **)a1 + 1);
            do
            {
              v36 = *v35;
              v35 += 2;
            }
            while (v36 != llvm::AAResultsWrapperPass::ID);
            v37 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v35 - 1) + 96))(*(v35 - 1), llvm::AAResultsWrapperPass::ID)+ 32);
            v38 = (char **)**((_QWORD **)a1 + 1);
            do
            {
              v39 = *v38;
              v38 += 2;
            }
            while (v39 != llvm::AssumptionCacheTracker::ID);
            v40 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v38 - 1)
                                                                                            + 96))(*(v38 - 1), llvm::AssumptionCacheTracker::ID);
            AssumptionCache = llvm::AssumptionCacheTracker::getAssumptionCache(v40, a2);
            v42 = (void **)**((_QWORD **)a1 + 1);
            do
            {
              v43 = *v42;
              v42 += 2;
            }
            while (v43 != &llvm::LoopAccessLegacyAnalysis::ID);
            v63[0] = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v42 - 1) + 96))(*(v42 - 1), &llvm::LoopAccessLegacyAnalysis::ID);
            v44 = (void **)**((_QWORD **)a1 + 1);
            do
            {
              v45 = *v44;
              v44 += 2;
            }
            while (v45 != &llvm::DemandedBitsWrapperPass::ID);
            v46 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v44 - 1) + 96))(*(v44 - 1), &llvm::DemandedBitsWrapperPass::ID);
            v47 = (void **)**((_QWORD **)a1 + 1);
            do
            {
              v48 = *v47;
              v47 += 2;
            }
            while (v48 != &llvm::OptimizationRemarkEmitterWrapperPass::ID);
            v49 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v47 - 1) + 96))(*(v47 - 1), &llvm::OptimizationRemarkEmitterWrapperPass::ID)+ 32);
            v50 = (char **)**((_QWORD **)a1 + 1);
            do
            {
              v51 = *v50;
              v50 += 2;
            }
            while (v51 != llvm::ProfileSummaryInfoWrapperPass::ID);
            v52 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v50 - 1) + 96))(*(v50 - 1), llvm::ProfileSummaryInfoWrapperPass::ID)+ 32);
            v70 = &off_1E81ACED0;
            __src = v63;
            v73[0] = &v70;
            *(_QWORD *)&v60 = AssumptionCache;
            *((_QWORD *)&v60 + 1) = &v70;
            *(_QWORD *)&v59 = v46 + 32;
            *((_QWORD *)&v59 + 1) = v37;
            v6 = llvm::LoopVectorizePass::runImpl((uint64_t)a1 + 32, v53, v62, v26, v3, v61, v27, (uint64_t)v30, v59, v60, v49, v52) & 1;
            if ((uint64_t (***)())v73[0] == &v70)
            {
              v54 = (void (**)(void))(v70 + 4);
            }
            else
            {
              if (!v73[0])
                return v6;
              v54 = (void (**)(void))(*(_QWORD *)v73[0] + 40);
            }
            (*v54)();
            return v6;
          }
          v32 = (void **)(v31 + 248);
          v33 = v72;
          v34 = *(unsigned int *)(v31 + 256);
          if (v34 >= v72)
          {
            if (v72)
              memmove(*v32, __src, 8 * v72);
            goto LABEL_33;
          }
          if (*(_DWORD *)(v31 + 260) < v72)
          {
            *(_DWORD *)(v31 + 256) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v31 + 248, v31 + 264, v33, 8);
          }
          else if ((_DWORD)v34)
          {
            memmove(*v32, __src, 8 * v34);
            goto LABEL_31;
          }
          v34 = 0;
LABEL_31:
          if (v34 != v72)
            memcpy((char *)*v32 + 8 * v34, (char *)__src + 8 * v34, 8 * v72 - 8 * v34);
LABEL_33:
          *(_DWORD *)(v31 + 256) = v33;
          goto LABEL_34;
        }
        v55 = (void *)(v31 + 264);
        *(_QWORD *)(v31 + 248) = v31 + 264;
        v56 = (void **)(v31 + 248);
        *(_QWORD *)(v31 + 256) = 0x600000000;
        v57 = v72;
        if (!v72 || v56 == &__src)
        {
LABEL_64:
          *(_DWORD *)(v31 + 312) = v78;
          *(_BYTE *)(v31 + 320) = 1;
          goto LABEL_35;
        }
        if (v72 >= 7)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v31 + 248, v31 + 264, v72, 8);
          v58 = v72;
          if (!v72)
          {
LABEL_63:
            *(_DWORD *)(v31 + 256) = v57;
            goto LABEL_64;
          }
          v55 = *v56;
        }
        else
        {
          v58 = v72;
        }
        memcpy(v55, __src, 8 * v58);
        goto LABEL_63;
      }
    }
    else
    {
      sub_1C485C2F0();
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    goto LABEL_14;
  }
  return 0;
}

void sub_1C60891D4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C60891E8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E81ACED0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C608921C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E81ACED0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C6089238(uint64_t a1, llvm::Loop *a2)
{
  return llvm::LoopAccessLegacyAnalysis::getInfo(**(llvm::LoopAccessLegacyAnalysis ***)(a1 + 8), a2);
}

uint64_t *sub_1C6089244(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char **v5;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = 120 * v2;
    v5 = (char **)(v3 + 8);
    do
    {
      if (((unint64_t)*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        v5 = sub_1C618F3AC(v5);
      v5 += 15;
      v4 -= 120;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

uint64_t sub_1C60892B0(uint64_t a1, char a2, uint64_t *a3, uint64_t a4, unsigned __int8 **a5)
{
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 *v10;

  v8 = sub_1C6089380(a1, 2, a3, a4);
  *(_QWORD *)v8 = &off_1E81ADAC8;
  *(_QWORD *)(v8 + 40) = &unk_1E81ADB08;
  *(_QWORD *)(v8 + 96) = &off_1E81ADA28;
  v9 = (_QWORD *)(v8 + 96);
  *(_BYTE *)(v8 + 104) = 1;
  *(_QWORD *)(v8 + 112) = v8 + 128;
  *(_QWORD *)(v8 + 120) = 0x100000000;
  *(_QWORD *)(v8 + 136) = 0;
  *(_QWORD *)(v8 + 144) = v8;
  sub_1C619116C(v8 + 16, v8 + 96);
  *(_QWORD *)a1 = &off_1E81ADAC8;
  *(_QWORD *)(a1 + 40) = &unk_1E81ADB08;
  *v9 = &unk_1E81ADB28;
  *(_BYTE *)(a1 + 152) = a2;
  *(_DWORD *)(a1 + 156) = 0;
  v10 = *a5;
  *(_QWORD *)(a1 + 160) = *a5;
  if (v10)
    llvm::MetadataTracking::track(a1 + 160, v10, 2);
  return a1;
}

uint64_t sub_1C6089380(uint64_t a1, char a2, uint64_t *a3, uint64_t a4)
{
  _DWORD *v5;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = &unk_1E81AD898;
  *(_BYTE *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = &unk_1E81AD718;
  v5 = (_DWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = a1 + 64;
  *(_QWORD *)(a1 + 56) = 0x200000000;
  *(_DWORD *)(a1 + 80) = 0;
  if (a4)
  {
    v7 = 8 * a4;
    do
    {
      v8 = *a3++;
      sub_1C63D6200(v5, v8);
      v7 -= 8;
    }
    while (v7);
  }
  *(_QWORD *)a1 = &unk_1E81AD838;
  *(_QWORD *)(a1 + 40) = &unk_1E81AD878;
  *(_QWORD *)(a1 + 88) = 0;
  return a1;
}

uint64_t sub_1C608942C(uint64_t *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 8 * v5;
    result = v4 + 8 * v5;
    while (*a3 || *(_QWORD *)(v4 + v6) != a2)
    {
      v6 += 8;
      if (v7 == v6)
        goto LABEL_10;
    }
    *a3 = 1;
    result = v4 + v6;
    if (v7 - 8 != v6)
    {
      v9 = result + 8;
      v10 = v7 - v6 - 16;
      memmove((void *)result, (const void *)(result + 8), v7 - v6 - 8);
      result = v9 + v10;
      v4 = *a1;
    }
  }
  else
  {
    result = *a1;
  }
LABEL_10:
  *((_DWORD *)a1 + 2) = (unint64_t)(result - v4) >> 3;
  return result;
}

void sub_1C60894DC()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C60894F0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E81ACF18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C6089530(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E81ACF18;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C6089558(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a2;
  v4 = *(uint64_t **)(a1 + 8);
  v5 = **(_QWORD **)(a1 + 16);
  if (sub_1C63D4494(*v4, v5, *a2) || sub_1C60785A4(*v4, v5, v3))
    return 1;
  v7 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8);
  if (v7)
  {
    v8 = *(uint64_t **)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 24);
    while (1)
    {
      v10 = *(_QWORD *)(v7 + 24);
      v11 = sub_1C477672C(v9 + 56, *(_QWORD *)(v10 + 40));
      v12 = *(_QWORD *)(v9 + 64);
      v13 = v12 == *(_QWORD *)(v9 + 56) ? 76 : 72;
      if (v11 != (_QWORD *)(v12 + 8 * *(unsigned int *)(v9 + v13))
        && (sub_1C63D4494(*v8, v10, v3) || sub_1C60785A4(*v8, v10, v3)))
      {
        break;
      }
      v7 = *(_QWORD *)(v7 + 8);
      if (!v7)
        return 0;
    }
    return 1;
  }
  return 0;
}

void sub_1C6089658()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C608966C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E81ACF60;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C60896A4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E81ACF60;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C60896C4(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = *a2;
  v3 = *(uint64_t **)(a1 + 8);
  v4 = **(_QWORD **)(a1 + 16);
  return sub_1C63D4494(*v3, v4, *a2) || sub_1C60785A4(*v3, v4, v2);
}

uint64_t sub_1C6089724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;

  *(_BYTE *)(a1 + 8) = 18;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 64;
  *(_QWORD *)(a1 + 56) = 0x200000000;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)a1 = &unk_1E81AD7B8;
  *(_QWORD *)(a1 + 40) = &unk_1E81AD7F8;
  v9 = (_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 96) = &off_1E81ADA28;
  *(_BYTE *)(a1 + 104) = 15;
  *(_QWORD *)(a1 + 112) = a1 + 128;
  *(_QWORD *)(a1 + 120) = 0x100000000;
  *(_QWORD *)(a1 + 136) = a2;
  *(_QWORD *)(a1 + 144) = a1;
  sub_1C619116C(a1 + 16, a1 + 96);
  *(_QWORD *)a1 = &off_1E81AC968;
  *v9 = &unk_1E81AC9A8;
  *(_QWORD *)(a1 + 96) = &unk_1E81AC9C8;
  *(_QWORD *)(a1 + 152) = a4;
  *(_QWORD *)(a1 + 160) = a5;
  sub_1C63D6200((_DWORD *)(a1 + 40), a3);
  return a1;
}

uint64_t sub_1C6089810(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 8) = 14;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = &unk_1E81AD7F8;
  *(_QWORD *)(a1 + 48) = a1 + 64;
  *(_QWORD *)(a1 + 56) = 0x200000000;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)a1 = &unk_1E81AD7B8;
  *(_QWORD *)(a1 + 96) = &off_1E81ADA28;
  *(_BYTE *)(a1 + 104) = 11;
  *(_QWORD *)(a1 + 112) = a1 + 128;
  *(_QWORD *)(a1 + 120) = 0x100000000;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = a1;
  sub_1C619116C(a1 + 16, a1 + 96);
  *(_QWORD *)a1 = &unk_1E81AD7B8;
  *(_QWORD *)(a1 + 40) = &unk_1E81AD7F8;
  *(_QWORD *)(a1 + 96) = &unk_1E81AD818;
  if (a2)
    sub_1C63D6200((_DWORD *)(a1 + 40), a2);
  return a1;
}

void sub_1C60898F8()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C608990C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E81ACFA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C6089944(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E81ACFA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C6089964(uint64_t a1, llvm::Type **a2)
{
  return sub_1C607A414(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *(_BYTE **)(a1 + 16), *a2);
}

_QWORD *sub_1C6089974(_QWORD *a1, llvm::Twine *this, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  void *__p[2];
  char v9;

  llvm::Twine::str(this, __p);
  sub_1C60899F8((uint64_t)a1, 0, (__int128 *)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  *a1 = &off_1E81ADBC8;
  v5 = a1 + 25;
  a1[25] = a1 + 25;
  a1[26] = a1 + 25;
  if (a3)
  {
    *(_QWORD *)(a3 + 24) = v5;
    v6 = a3 + 24;
    *(_QWORD *)(v6 + 64) = a1;
    *(_QWORD *)(v6 + 8) = v5;
    a1[25] = v6;
    a1[26] = v6;
  }
  return a1;
}

uint64_t sub_1C60899F8(uint64_t a1, char a2, __int128 *a3)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E81AD6C0;
  *(_BYTE *)(a1 + 8) = a2;
  v4 = a1 + 16;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)v4, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v4 = v5;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 64;
  *(_QWORD *)(a1 + 56) = 0x100000000;
  *(_QWORD *)(a1 + 72) = a1 + 88;
  *(_QWORD *)(a1 + 80) = 0x100000000;
  *(_QWORD *)(a1 + 112) = 0x200000000;
  *(_DWORD *)(a1 + 136) = 1;
  *(_QWORD *)(a1 + 96) = &unk_1E81AD6F8;
  *(_QWORD *)(a1 + 104) = a1 + 120;
  *(_QWORD *)(a1 + 160) = 0x200000000;
  *(_DWORD *)(a1 + 184) = 1;
  *(_QWORD *)(a1 + 144) = &unk_1E81AD6F8;
  *(_QWORD *)(a1 + 152) = a1 + 168;
  *(_QWORD *)(a1 + 192) = 0;
  return a1;
}

void sub_1C6089AB0(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  char v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v16;
  uint64_t v17;
  int v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a2 >= 3)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(int **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 2)
    {
      v17 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)4uLL);
      *(_QWORD *)(a1 + 16) = v17;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C63DBEFC(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v18;
  v10 = 1;
  v11 = a1 + 8;
  do
  {
    v12 = v8;
    v13 = *(_DWORD *)(v11 + 4);
    if ((*(_DWORD *)v11 != -1 || v13 != 1) && (*(_DWORD *)v11 != -2 || v13 != 0))
    {
      *(_QWORD *)v9 = *(_QWORD *)v11;
      v9 += 2;
    }
    v11 = a1 + 8 + 8 * v10;
    v8 = 1;
    v10 = 2;
  }
  while ((v12 & 1) == 0);
  if (a2 > 2)
  {
    *(_DWORD *)a1 &= ~1u;
    v16 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)4uLL);
    *(_QWORD *)(a1 + 16) = v16;
  }
  sub_1C63DBEFC(a1, v18, v9);
}

uint64_t sub_1C6089C3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t ***v6;
  uint64_t ***v7;
  int32x2_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t *v11;
  unsigned int *v13;
  char v14;
  unsigned int *v15;
  BOOL v16;

  v2 = a1 + 48;
  v15 = (unsigned int *)(a1 + 48);
  v3 = a1 + 816;
  v13 = (unsigned int *)(a1 + 816);
  v14 = 0;
  v16 = *(_QWORD *)(a1 + 8) == 0;
  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(_QWORD *)(a1 + 16);
    v7 = *(uint64_t ****)(v4 + 40);
    v5 = (uint64_t **)(v4 + 40);
    v6 = v7;
    if (v7 != (uint64_t ***)v5)
    {
      v8 = *(int32x2_t **)(a1 + 816);
      do
      {
        v9 = *v6;
        if ((sub_1C5BA2178(v3, (uint64_t)(v6 - 3)) & 1) == 0)
        {
          llvm::ScalarEvolution::forgetValue(v8, (llvm::Value *)(v6 - 3));
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v6[2] + 5), v6 - 3);
          v10 = *v6;
          v11 = (uint64_t *)v6[1];
          *v11 = (uint64_t)*v6;
          v10[1] = v11;
          *v6 = 0;
          v6[1] = 0;
          llvm::Value::deleteValue((llvm::Value *)(v6 - 3));
        }
        v6 = (uint64_t ***)v9;
      }
      while (v9 != v5);
    }
  }
  else
  {
    v14 = 1;
  }
  llvm::SCEVExpanderCleaner::cleanup(&v13);
  llvm::SCEVExpanderCleaner::cleanup(&v15);
  if (*(_QWORD *)(a1 + 8))
    llvm::BasicBlock::eraseFromParent(*(llvm::BasicBlock **)a1);
  if (*(_QWORD *)(a1 + 24))
    llvm::BasicBlock::eraseFromParent(*(llvm::BasicBlock **)(a1 + 16));
  llvm::SCEVExpanderCleaner::cleanup(&v13);
  llvm::SCEVExpanderCleaner::cleanup(&v15);
  sub_1C50D05E0(v3);
  sub_1C50D05E0(v2);
  return a1;
}

void sub_1C6089D74(void ***a1)
{
  void **v1;
  char *v2;
  char *v3;
  void *v4;
  int32x2_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  int32x2_t *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  char *v20;
  void **v21;
  char *v22;
  int32x2_t v23;
  void ***v24;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v3 = (char *)v1[1];
    v4 = **a1;
    if (v3 != v2)
    {
      v5 = (int32x2_t)0x1FFFFFFFFLL;
      do
      {
        v6 = (char *)*((_QWORD *)v3 - 4);
        if (v6 != v3 - 16)
        {
          v24 = a1;
          v20 = v2;
          v21 = v1;
          v22 = v3;
          v23 = v5;
          free(v6);
          v5 = v23;
          v1 = v21;
          v3 = v22;
          v2 = v20;
          a1 = v24;
        }
        v7 = *((_QWORD *)v3 - 9);
        if (v7 && v7 != -8192 && v7 != -4096)
        {
          v8 = *((_QWORD *)v3 - 11) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v8 = *((_QWORD *)v3 - 10);
          v9 = (unint64_t *)*((_QWORD *)v3 - 10);
          if (v9)
          {
            *v9 = *v9 & 7 | v8;
          }
          else
          {
            v10 = *((_QWORD *)v3 - 9);
            v11 = ***(int32x2_t ****)v10;
            v12 = (unint64_t)v11[303];
            if (v12 <= v8)
            {
              v13 = v11[305].u32[0];
              if (v12 + 16 * v13 > v8)
              {
                v14 = v13 - 1;
                LODWORD(v15) = v14 & ((v10 >> 4) ^ (v10 >> 9));
                v16 = (uint64_t *)(v12 + 16 * v15);
                v17 = *v16;
                if (v10 == *v16)
                {
LABEL_17:
                  *v16 = -8192;
                  v11[304] = vadd_s32(v11[304], v5);
                  v10 = *((_QWORD *)v3 - 9);
                }
                else
                {
                  v18 = 1;
                  while (v17 != -4096)
                  {
                    v19 = v15 + v18++;
                    v15 = v19 & v14;
                    v17 = *(_QWORD *)(v12 + 16 * v15);
                    if (v10 == v17)
                    {
                      v16 = (uint64_t *)(v12 + 16 * v15);
                      goto LABEL_17;
                    }
                  }
                }
                *(_BYTE *)(v10 + 17) &= ~1u;
              }
            }
          }
        }
        v3 -= 96;
      }
      while (v3 != v2);
      v4 = **a1;
    }
    v1[1] = v2;
    operator delete(v4);
  }
}

void sub_1C6089EF8(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 176;
        sub_1C6194908((llvm::ValueHandleBase *)(v4 - 168));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_1C6089F6C(_QWORD *a1)
{
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD **v5;
  unint64_t v6;
  _QWORD *v7;

  *a1 = &unk_1E81AD898;
  v3 = a1 + 2;
  v2 = a1[2];
  if ((v2 & 4) != 0)
  {
    v6 = v2 & 0xFFFFFFFFFFFFFFF8;
    v5 = *(_QWORD ***)v6;
    v4 = *(_QWORD *)v6 + 8 * *(unsigned int *)(v6 + 8);
  }
  else
  {
    v4 = (uint64_t)&v3[v2 > 7];
    v5 = (_QWORD **)(a1 + 2);
  }
  while (v5 != (_QWORD **)v4)
  {
    v7 = *v5++;
    v7[6] = 0;
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  }
  sub_1C619127C(v3);
  return a1;
}

_QWORD *sub_1C6089FFC(_QWORD *a1)
{
  uint64_t v2;
  llvm::VPValue *v3;
  _QWORD *v4;

  *a1 = &off_1E81AD738;
  a1[5] = &unk_1E81AD778;
  v2 = (uint64_t)(a1 + 5);
  a1[12] = &unk_1E81AD798;
  v3 = (llvm::VPValue *)(a1 + 12);
  v4 = (_QWORD *)a1[19];
  if (v4 != a1 + 21)
    free(v4);
  llvm::VPValue::~VPValue(v3);
  sub_1C63DB2AC(v2);
  return sub_1C6089F6C(a1);
}

_QWORD *sub_1C608A06C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63DC608(a1, v4, v4 + 40 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 40 * v10;
    do
    {
      *result = -4096;
      result += 5;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

void sub_1C608A130(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    v2 = a1;
    v3 = a1 + 40 * a2;
    do
    {
      sub_1C63DC980(*(unsigned __int8 **)v2, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
      v2 += 40;
    }
    while (v2 != v3);
  }
}

unint64_t sub_1C608A174(unint64_t a1)
{
  unint64_t v3;
  unint64_t v5;

  if (qword_1EF8F6288 >= HIDWORD(qword_1EF8F6288))
  {
    v3 = qword_1EF8F6288 + 1;
    if (qword_1EF8F6280 <= a1 && qword_1EF8F6280 + 48 * (unint64_t)qword_1EF8F6288 > a1)
    {
      v5 = a1 - qword_1EF8F6280;
      sub_1C63DCA34(v3);
      return qword_1EF8F6280 + v5;
    }
    else
    {
      sub_1C63DCA34(v3);
    }
  }
  return a1;
}

void **sub_1C608A1E8(void **a1)
{
  void **i;
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *j;
  _BYTE *v7;
  int v8;
  BOOL v9;

  for (i = a1; ; a1 = i)
  {
    sub_1C6087824(a1);
    v3 = i[12];
    v2 = i[13];
    v4 = i[28];
    if (v2 - v3 == (_BYTE *)i[29] - v4)
    {
      if (v3 == v2)
        return i;
      v5 = v4 + 16;
      for (j = v3 + 16; ; j += 32)
      {
        v7 = j - 16;
        if (*((_QWORD *)j - 2) != *((_QWORD *)v5 - 2))
          break;
        v8 = v5[8];
        if (j[8])
          v9 = v8 == 0;
        else
          v9 = 1;
        if (v9)
        {
          if ((j[8] == 0) == (v8 != 0))
            break;
        }
        else if (*((_QWORD *)j - 1) != *((_QWORD *)v5 - 1) || *(_QWORD *)j != *(_QWORD *)v5)
        {
          break;
        }
        v5 += 32;
        if (v7 + 32 == v2)
          return i;
      }
    }
    if (!*(_BYTE *)(*((_QWORD *)v2 - 4) + 8))
      break;
  }
  return i;
}

_QWORD *sub_1C608A2B8(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(72 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63DCEC8(a1, v4, v4 + 72 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 72 * v10;
    do
    {
      *result = 0x1FFFFFFFFLL;
      result += 9;
      v11 -= 72;
    }
    while (v11);
  }
  return result;
}

uint64_t **sub_1C608A37C(uint64_t **result, unint64_t a2, uint64_t ***a3, uint64_t a4, char a5)
{
  uint64_t **v8;
  unint64_t k;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t n;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  BOOL v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  BOOL v38;
  unsigned int v40;
  unint64_t v41;
  int v42;
  int v43;
  BOOL v45;
  unsigned int v47;
  int v48;
  int v49;
  BOOL v52;
  unsigned int v53;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  unint64_t v60;
  int v61;
  int v62;
  BOOL v64;
  unsigned int v66;
  unsigned int v67;
  unint64_t v68;
  int v69;
  int v70;
  BOOL v72;
  BOOL v74;
  unsigned int v75;
  int v76;
  int v77;
  BOOL v78;
  unsigned int v80;
  int v81;
  unsigned int v82;
  int v83;
  int v84;
  BOOL v85;
  unsigned int v87;
  unint64_t m;
  int v89;
  unsigned int v90;
  int v91;
  int v92;
  BOOL v93;
  unsigned int v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  int v100;
  unint64_t v101;
  int v102;
  BOOL v103;
  unsigned int v105;
  unsigned int v106;
  int v107;
  unint64_t v108;
  int v109;
  BOOL v110;
  int v112;
  int v113;
  int v114;
  BOOL v116;
  uint64_t **v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  BOOL v126;
  unsigned int v128;
  uint64_t v129;
  _OWORD *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t *v134;
  int v135;
  int v136;
  BOOL v137;
  BOOL v138;
  unsigned int v140;
  unint64_t *v141;
  unint64_t v142;
  int64_t v143;
  int64_t v144;
  int64_t v145;
  uint64_t v146;
  unint64_t *v147;
  int v148;
  unint64_t *v149;
  int v150;
  int v151;
  BOOL v152;
  BOOL v153;
  unsigned int v154;
  BOOL v155;
  unsigned int v156;
  unint64_t *v157;
  int v158;
  int v159;
  unint64_t *v160;
  int v161;
  BOOL v162;
  BOOL v163;
  unsigned int v165;
  unint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  unint64_t *v170;
  int v171;
  int v172;
  BOOL v173;
  BOOL v174;
  unsigned int v175;
  BOOL v176;
  unsigned int v177;
  int v178;
  unint64_t v179;
  int v180;
  BOOL v182;
  unsigned int v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  unint64_t *v193;
  int v194;
  int v195;
  BOOL v196;
  BOOL v197;
  unsigned int v198;
  BOOL v199;
  unsigned int v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t *v204;
  int v205;
  int v206;
  int v207;
  BOOL v209;
  unsigned int v211;
  unint64_t *v212;
  unint64_t *v213;
  unint64_t v214;
  int v215;
  unint64_t v216;
  int v217;
  BOOL v219;
  unsigned int v221;
  BOOL v222;
  unsigned int v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t **v226;
  uint64_t **i;
  uint64_t v228;
  int v229;
  int v230;
  int v231;
  BOOL v233;
  unsigned int v235;
  uint64_t **j;
  uint64_t *v237;
  unint64_t v238;
  int v239;
  int v240;
  BOOL v241;
  unsigned int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t *v252;
  __int128 v253;

  v8 = result;
LABEL_2:
  v248 = a2 - 16;
  v250 = a2;
  v243 = a2 - 48;
  v244 = a2 - 32;
  k = (unint64_t)v8;
  while (2)
  {
    v10 = k;
    v11 = a2 - k;
    v12 = (uint64_t)(a2 - k) >> 4;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v112 = *((_DWORD *)sub_1C5031104(*a3, *(_QWORD *)(a2 - 16), (uint64_t **)(a2 - 16)) + 10);
        result = sub_1C5031104(*a3, *(_QWORD *)v10, (uint64_t **)v10);
        if (v112 == *((_DWORD *)result + 10))
        {
          v113 = *(_DWORD *)(a2 - 4);
          v114 = *(_DWORD *)(v10 + 12);
          if (v113 == 1 || v114 != 1)
          {
            v116 = v114 != 1 && v113 == 1;
            if (v116 || *(_DWORD *)(a2 - 8) >= *(_DWORD *)(v10 + 8))
              return result;
          }
        }
        else
        {
          v223 = *((_DWORD *)sub_1C5031104(*a3, *(_QWORD *)(a2 - 16), (uint64_t **)(a2 - 16)) + 10);
          result = sub_1C5031104(*a3, *(_QWORD *)v10, (uint64_t **)v10);
          if (v223 >= *((_DWORD *)result + 10))
            return result;
        }
        v224 = *(_QWORD *)v10;
        *(_QWORD *)v10 = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v224;
        v225 = *(_QWORD *)(v10 + 8);
        *(_QWORD *)(v10 + 8) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v225;
        return result;
      case 3uLL:
        return sub_1C608BBB8(v10, v10 + 16, v248, a3);
      case 4uLL:
        return sub_1C608C298(v10, v10 + 16, v10 + 32, v248, a3);
      case 5uLL:
        return sub_1C608B890(v10, v10 + 16, v10 + 32, v10 + 48, v248, a3);
      default:
        v252 = (unint64_t *)v10;
        if (v11 <= 383)
        {
          if ((a5 & 1) == 0)
          {
            if (v10 == a2)
              return result;
            v226 = (uint64_t **)(v10 + 16);
            if (v10 + 16 == a2)
              return result;
            for (i = (uint64_t **)(v10 + 24); ; i += 2)
            {
              v228 = v10;
              v10 = (uint64_t)v226;
              v229 = *((_DWORD *)sub_1C5031104(*a3, *(_QWORD *)(v228 + 16), v226) + 10);
              result = sub_1C5031104(*a3, *(_QWORD *)v228, (uint64_t **)v228);
              if (v229 == *((_DWORD *)result + 10))
                break;
              v235 = *((_DWORD *)sub_1C5031104(*a3, *(_QWORD *)v10, (uint64_t **)v10) + 10);
              result = sub_1C5031104(*a3, *(_QWORD *)v228, (uint64_t **)v228);
              if (v235 < *((_DWORD *)result + 10))
                goto LABEL_413;
LABEL_426:
              v226 = (uint64_t **)(v10 + 16);
              if (v10 + 16 == a2)
                return result;
            }
            v230 = *(_DWORD *)(v10 + 12);
            v231 = *(_DWORD *)(v228 + 12);
            if (v230 == 1 || v231 != 1)
            {
              v233 = v231 != 1 && v230 == 1;
              if (v233 || *(_DWORD *)(v10 + 8) >= *(_DWORD *)(v228 + 8))
                goto LABEL_426;
            }
LABEL_413:
            v253 = *(_OWORD *)v10;
            for (j = i; ; j -= 2)
            {
              v237 = *(j - 2);
              *(j - 1) = *(j - 3);
              *j = v237;
              v238 = v253;
              v239 = *((_DWORD *)sub_1C5031104(*a3, v253, (uint64_t **)&v253) + 10);
              result = sub_1C5031104(*a3, (unint64_t)*(j - 5), j - 5);
              if (v239 == *((_DWORD *)result + 10))
              {
                v240 = *((_DWORD *)j - 7);
                if (HIDWORD(v253) == 1 || v240 != 1)
                {
                  v241 = v240 != 1 && HIDWORD(v253) == 1;
                  if (v241 || DWORD2(v253) >= *((_DWORD *)j - 8))
                  {
LABEL_425:
                    *(j - 3) = (uint64_t *)v238;
                    *(j - 2) = (uint64_t *)*((_QWORD *)&v253 + 1);
                    goto LABEL_426;
                  }
                }
              }
              else
              {
                v242 = *((_DWORD *)sub_1C5031104(*a3, v238, (uint64_t **)&v253) + 10);
                result = sub_1C5031104(*a3, (unint64_t)*(j - 5), j - 5);
                if (v242 >= *((_DWORD *)result + 10))
                  goto LABEL_425;
              }
            }
          }
          if (v10 == a2)
            return result;
          v118 = (uint64_t **)(v10 + 16);
          if (v10 + 16 == a2)
            return result;
          v119 = 0;
          v120 = v10;
LABEL_222:
          v121 = v120;
          v120 = (uint64_t)v118;
          v122 = *((_DWORD *)sub_1C5031104(*a3, *(_QWORD *)(v121 + 16), v118) + 10);
          result = sub_1C5031104(*a3, *(_QWORD *)v121, (uint64_t **)v121);
          if (v122 == *((_DWORD *)result + 10))
          {
            v123 = *(_DWORD *)(v120 + 12);
            v124 = *(_DWORD *)(v121 + 12);
            if (v123 == 1 || v124 != 1)
            {
              v126 = v124 != 1 && v123 == 1;
              if (v126 || *(_DWORD *)(v120 + 8) >= *(_DWORD *)(v121 + 8))
                goto LABEL_258;
            }
          }
          else
          {
            v128 = *((_DWORD *)sub_1C5031104(*a3, *(_QWORD *)v120, (uint64_t **)v120) + 10);
            result = sub_1C5031104(*a3, *(_QWORD *)v121, (uint64_t **)v121);
            if (v128 >= *((_DWORD *)result + 10))
              goto LABEL_258;
          }
          v253 = *(_OWORD *)v120;
          v129 = *(_QWORD *)(v121 + 8);
          *(_QWORD *)(v121 + 16) = *(_QWORD *)v121;
          *(_QWORD *)(v120 + 8) = v129;
          v130 = (_OWORD *)v10;
          if (v121 == v10)
            goto LABEL_257;
          v131 = v119;
          while (1)
          {
            v132 = v10 + v131;
            v133 = v253;
            v134 = (unint64_t *)(v132 - 16);
            v135 = *((_DWORD *)sub_1C5031104(*a3, v253, (uint64_t **)&v253) + 10);
            result = sub_1C5031104(*a3, *(_QWORD *)(v132 - 16), (uint64_t **)(v132 - 16));
            if (v135 == *((_DWORD *)result + 10))
            {
              v136 = *(_DWORD *)(v132 - 4);
              v137 = HIDWORD(v253) != 1 && v136 == 1;
              a2 = v250;
              v10 = (uint64_t)v252;
              if (!v137)
              {
                v138 = v136 != 1 && HIDWORD(v253) == 1;
                if (v138 || DWORD2(v253) >= *(_DWORD *)((char *)v252 + v131 - 8))
                {
                  v130 = (_OWORD *)v121;
                  goto LABEL_257;
                }
              }
            }
            else
            {
              v140 = *((_DWORD *)sub_1C5031104(*a3, v133, (uint64_t **)&v253) + 10);
              result = sub_1C5031104(*a3, *v134, (uint64_t **)(v132 - 16));
              a2 = v250;
              v10 = (uint64_t)v252;
              if (v140 >= *((_DWORD *)result + 10))
              {
                v130 = (_OWORD *)((char *)v252 + v131);
LABEL_257:
                *v130 = v253;
LABEL_258:
                v118 = (uint64_t **)(v120 + 16);
                v119 += 16;
                if (v120 + 16 == a2)
                  return result;
                goto LABEL_222;
              }
            }
            v121 -= 16;
            v141 = (unint64_t *)(v10 + v131);
            v142 = *(_QWORD *)(v10 + v131 - 8);
            *v141 = *v134;
            v141[1] = v142;
            v131 -= 16;
            if (!v131)
            {
              v130 = (_OWORD *)v10;
              goto LABEL_257;
            }
          }
        }
        n = v248;
        if (!a4)
        {
          if (v10 == a2)
            return result;
          v143 = (v12 - 2) >> 1;
          v144 = v143;
          while (2)
          {
            v145 = v144;
            if (v143 < v144)
              goto LABEL_297;
            v146 = (2 * v144) | 1;
            v147 = &v252[2 * v146];
            if (2 * v144 + 2 < (uint64_t)v12)
            {
              v148 = *((_DWORD *)sub_1C5031104(*a3, *v147, (uint64_t **)&v252[2 * v146]) + 10);
              if (v148 == *((_DWORD *)sub_1C5031104(*a3, v147[2], (uint64_t **)v147 + 2) + 10))
              {
                v149 = &v252[2 * v146];
                v150 = *((_DWORD *)v149 + 3);
                v151 = *((_DWORD *)v147 + 7);
                v152 = v150 != 1 && v151 == 1;
                if (v152
                  || (v151 != 1 ? (v153 = v150 == 1) : (v153 = 0),
                      (v154 = *((_DWORD *)v149 + 2), !v153) ? (v155 = v154 >= *((_DWORD *)v147 + 6)) : (v155 = 1),
                      !v155))
                {
LABEL_279:
                  v147 += 2;
                  v146 = 2 * v145 + 2;
                }
              }
              else
              {
                v156 = *((_DWORD *)sub_1C5031104(*a3, *v147, (uint64_t **)v147) + 10);
                if (v156 < *((_DWORD *)sub_1C5031104(*a3, v147[2], (uint64_t **)v147 + 2) + 10))
                  goto LABEL_279;
              }
            }
            v157 = &v252[2 * v145];
            v158 = *((_DWORD *)sub_1C5031104(*a3, *v147, (uint64_t **)v147) + 10);
            result = sub_1C5031104(*a3, *v157, (uint64_t **)v157);
            if (v158 == *((_DWORD *)result + 10))
            {
              v159 = *((_DWORD *)v147 + 3);
              v160 = &v252[2 * v145];
              v161 = *((_DWORD *)v160 + 3);
              v162 = v159 != 1 && v161 == 1;
              v143 = (v12 - 2) >> 1;
              if (v162)
                goto LABEL_297;
              v163 = v161 != 1 && v159 == 1;
              if (!v163 && *((_DWORD *)v147 + 2) < *((_DWORD *)v160 + 2))
                goto LABEL_297;
LABEL_294:
              v253 = *(_OWORD *)v157;
              *v157 = *v147;
              v252[2 * v145 + 1] = v147[1];
              if (v143 < v146)
              {
LABEL_295:
                v166 = v147;
LABEL_296:
                *(_OWORD *)v166 = v253;
                goto LABEL_297;
              }
              while (2)
              {
                v167 = 2 * v146;
                v146 = (2 * v146) | 1;
                v166 = &v252[2 * v146];
                v168 = v167 + 2;
                if (v167 + 2 < (uint64_t)v12)
                {
                  v169 = *((_DWORD *)sub_1C5031104(*a3, *v166, (uint64_t **)&v252[2 * v146]) + 10);
                  if (v169 == *((_DWORD *)sub_1C5031104(*a3, v166[2], (uint64_t **)v166 + 2) + 10))
                  {
                    v170 = &v252[2 * v146];
                    v171 = *((_DWORD *)v170 + 3);
                    v172 = *((_DWORD *)v166 + 7);
                    v173 = v171 != 1 && v172 == 1;
                    if (v173
                      || (v172 != 1 ? (v174 = v171 == 1) : (v174 = 0),
                          (v175 = *((_DWORD *)v170 + 2), !v174) ? (v176 = v175 >= *((_DWORD *)v166 + 6)) : (v176 = 1),
                          !v176))
                    {
LABEL_315:
                      v166 += 2;
                      v146 = v168;
                    }
                  }
                  else
                  {
                    v177 = *((_DWORD *)sub_1C5031104(*a3, *v166, (uint64_t **)v166) + 10);
                    if (v177 < *((_DWORD *)sub_1C5031104(*a3, v166[2], (uint64_t **)v166 + 2) + 10))
                      goto LABEL_315;
                  }
                }
                v178 = *((_DWORD *)sub_1C5031104(*a3, *v166, (uint64_t **)v166) + 10);
                v179 = v253;
                result = sub_1C5031104(*a3, v253, (uint64_t **)&v253);
                if (v178 == *((_DWORD *)result + 10))
                {
                  v180 = *((_DWORD *)v166 + 3);
                  if (v180 != 1 && HIDWORD(v253) == 1)
                    goto LABEL_295;
                  v182 = HIDWORD(v253) != 1 && v180 == 1;
                  if (!v182 && *((_DWORD *)v166 + 2) < DWORD2(v253))
                    goto LABEL_295;
                }
                else
                {
                  v184 = *((_DWORD *)sub_1C5031104(*a3, *v166, (uint64_t **)v166) + 10);
                  result = sub_1C5031104(*a3, v179, (uint64_t **)&v253);
                  if (v184 < *((_DWORD *)result + 10))
                    goto LABEL_295;
                }
                *v147 = *v166;
                v147[1] = v166[1];
                v147 = v166;
                if (v143 < v146)
                  goto LABEL_296;
                continue;
              }
            }
            v165 = *((_DWORD *)sub_1C5031104(*a3, *v147, (uint64_t **)v147) + 10);
            result = sub_1C5031104(*a3, *v157, (uint64_t **)v157);
            v143 = (v12 - 2) >> 1;
            if (v165 >= *((_DWORD *)result + 10))
              goto LABEL_294;
LABEL_297:
            v144 = v145 - 1;
            if (v145)
              continue;
            break;
          }
          v186 = v250;
          v185 = v252;
          while (2)
          {
            v251 = v186;
            v187 = 0;
            v247 = v185[1];
            v249 = *v185;
LABEL_333:
            v188 = v185;
            v189 = v187 + 1;
            v185 += 2 * v187 + 2;
            v190 = 2 * v187;
            v187 = (2 * v187) | 1;
            v191 = v190 + 2;
            if (v190 + 2 < (uint64_t)v12)
            {
              v192 = *((_DWORD *)sub_1C5031104(*a3, *v185, (uint64_t **)v185) + 10);
              result = sub_1C5031104(*a3, v185[2], (uint64_t **)v185 + 2);
              if (v192 == *((_DWORD *)result + 10))
              {
                v193 = &v188[2 * v189];
                v194 = *((_DWORD *)v193 + 3);
                v195 = *((_DWORD *)v185 + 7);
                v196 = v194 != 1 && v195 == 1;
                if (v196
                  || (v195 != 1 ? (v197 = v194 == 1) : (v197 = 0),
                      (v198 = *((_DWORD *)v193 + 2), !v197) ? (v199 = v198 >= *((_DWORD *)v185 + 6)) : (v199 = 1),
                      !v199))
                {
LABEL_349:
                  v185 += 2;
                  v187 = v191;
                }
              }
              else
              {
                v200 = *((_DWORD *)sub_1C5031104(*a3, *v185, (uint64_t **)v185) + 10);
                result = sub_1C5031104(*a3, v185[2], (uint64_t **)v185 + 2);
                if (v200 < *((_DWORD *)result + 10))
                  goto LABEL_349;
              }
            }
            *v188 = *v185;
            v188[1] = v185[1];
            if (v187 > (uint64_t)((v12 - 2) >> 1))
            {
              v186 = v251 - 16;
              if (v185 == (unint64_t *)(v251 - 16))
              {
                *v185 = v249;
                v185[1] = v247;
                goto LABEL_390;
              }
              *v185 = *(_QWORD *)(v251 - 16);
              v185[1] = *(_QWORD *)(v251 - 8);
              *(_QWORD *)(v251 - 16) = v249;
              *(_QWORD *)(v251 - 8) = v247;
              v201 = (char *)v185 - (char *)v252 + 16;
              if (v201 >= 17)
              {
                v202 = ((unint64_t)v201 >> 4) - 2;
                v203 = v202 >> 1;
                v204 = &v252[2 * (v202 >> 1)];
                v205 = *((_DWORD *)sub_1C5031104(*a3, *v204, (uint64_t **)v204) + 10);
                result = sub_1C5031104(*a3, *v185, (uint64_t **)v185);
                if (v205 == *((_DWORD *)result + 10))
                {
                  v206 = *((_DWORD *)v204 + 3);
                  v207 = *((_DWORD *)v185 + 3);
                  if (v206 == 1 || v207 != 1)
                  {
                    v209 = v207 != 1 && v206 == 1;
                    if (v209 || LODWORD(v252[2 * v203 + 1]) >= *((_DWORD *)v185 + 2))
                      goto LABEL_390;
                  }
                }
                else
                {
                  v211 = *((_DWORD *)sub_1C5031104(*a3, *v204, (uint64_t **)v204) + 10);
                  result = sub_1C5031104(*a3, *v185, (uint64_t **)v185);
                  if (v211 >= *((_DWORD *)result + 10))
                    goto LABEL_390;
                }
                v253 = *(_OWORD *)v185;
                *v185 = *v204;
                v185[1] = v252[2 * v203 + 1];
                if (v202 < 2)
                  goto LABEL_389;
                v212 = v252;
                while (1)
                {
                  v213 = v204;
                  v214 = v203 - 1;
                  v203 = (v203 - 1) >> 1;
                  v204 = &v212[2 * v203];
                  v215 = *((_DWORD *)sub_1C5031104(*a3, *v204, (uint64_t **)v204) + 10);
                  v216 = v253;
                  result = sub_1C5031104(*a3, v253, (uint64_t **)&v253);
                  if (v215 == *((_DWORD *)result + 10))
                  {
                    v217 = *((_DWORD *)v204 + 3);
                    if (v217 == 1 || HIDWORD(v253) != 1)
                    {
                      v219 = HIDWORD(v253) != 1 && v217 == 1;
                      if (v219 || LODWORD(v252[2 * v203 + 1]) >= DWORD2(v253))
                      {
LABEL_388:
                        v204 = v213;
LABEL_389:
                        *(_OWORD *)v204 = v253;
                        break;
                      }
                    }
                  }
                  else
                  {
                    v221 = *((_DWORD *)sub_1C5031104(*a3, *v204, (uint64_t **)v204) + 10);
                    result = sub_1C5031104(*a3, v216, (uint64_t **)&v253);
                    if (v221 >= *((_DWORD *)result + 10))
                      goto LABEL_388;
                  }
                  *v213 = *v204;
                  v212 = v252;
                  v213[1] = v252[2 * v203 + 1];
                  if (v214 < 2)
                    goto LABEL_389;
                }
              }
LABEL_390:
              v222 = (uint64_t)v12-- <= 2;
              v185 = v252;
              if (v222)
                return result;
              continue;
            }
            goto LABEL_333;
          }
        }
        v14 = (unint64_t *)(v10 + 16 * (v12 >> 1));
        if ((unint64_t)v11 < 0x801)
        {
          sub_1C608BBB8(v10 + 16 * (v12 >> 1), v10, v248, a3);
        }
        else
        {
          sub_1C608BBB8(v10, v10 + 16 * (v12 >> 1), v248, a3);
          sub_1C608BBB8(v10 + 16, (uint64_t)(v14 - 2), v244, a3);
          sub_1C608BBB8(v10 + 32, v10 + 16 + 16 * (v12 >> 1), v243, a3);
          n = v248;
          sub_1C608BBB8((uint64_t)(v14 - 2), v10 + 16 * (v12 >> 1), v10 + 16 + 16 * (v12 >> 1), a3);
          v15 = *(_QWORD *)v10;
          v16 = *(_QWORD *)(v10 + 8);
          v17 = v14[1];
          *(_QWORD *)v10 = *v14;
          *(_QWORD *)(v10 + 8) = v17;
          *v14 = v15;
          v14[1] = v16;
        }
        v18 = a4 - 1;
        if ((a5 & 1) == 0)
        {
          v19 = *((_DWORD *)sub_1C5031104(*a3, *(_QWORD *)(v10 - 16), (uint64_t **)(v10 - 16)) + 10);
          if (v19 == *((_DWORD *)sub_1C5031104(*a3, *(_QWORD *)v10, (uint64_t **)v10) + 10))
          {
            v20 = *(_DWORD *)(v10 - 4);
            v21 = *(_DWORD *)(v10 + 12);
            if (v20 != 1 && v21 == 1)
              goto LABEL_28;
            v22 = v21 != 1 && v20 == 1;
            if (!v22 && *(_DWORD *)(v10 - 8) < *(_DWORD *)(v10 + 8))
              goto LABEL_28;
          }
          else
          {
            v30 = *((_DWORD *)sub_1C5031104(*a3, *(_QWORD *)(v10 - 16), (uint64_t **)(v10 - 16)) + 10);
            if (v30 < *((_DWORD *)sub_1C5031104(*a3, *(_QWORD *)v10, (uint64_t **)v10) + 10))
              goto LABEL_28;
          }
          v23 = v18;
          v253 = *(_OWORD *)v10;
          v24 = v253;
          v25 = *((_DWORD *)sub_1C5031104(*a3, v253, (uint64_t **)&v253) + 10);
          result = sub_1C5031104(*a3, *(_QWORD *)n, (uint64_t **)n);
          if (v25 == *((_DWORD *)result + 10))
          {
            v26 = *(_DWORD *)(v250 - 4);
            v28 = DWORD2(v253);
            v27 = HIDWORD(v253);
            if (HIDWORD(v253) != 1 && v26 == 1)
              goto LABEL_121;
            v29 = v26 != 1 && HIDWORD(v253) == 1;
            if (!v29 && DWORD2(v253) < *(_DWORD *)(v250 - 8))
              goto LABEL_121;
          }
          else
          {
            v75 = *((_DWORD *)sub_1C5031104(*a3, v24, (uint64_t **)&v253) + 10);
            result = sub_1C5031104(*a3, *(_QWORD *)n, (uint64_t **)n);
            if (v75 < *((_DWORD *)result + 10))
            {
              v28 = DWORD2(v253);
              v27 = HIDWORD(v253);
LABEL_121:
              for (k = v10 + 16; ; k += 16)
              {
                v76 = *((_DWORD *)sub_1C5031104(*a3, v24, (uint64_t **)&v253) + 10);
                result = sub_1C5031104(*a3, *(_QWORD *)k, (uint64_t **)k);
                if (v76 == *((_DWORD *)result + 10))
                {
                  v77 = *(_DWORD *)(k + 12);
                  if (v27 != 1 && v77 == 1)
                    goto LABEL_150;
                  v78 = v77 != 1 && v27 == 1;
                  if (!v78 && v28 < *(_DWORD *)(k + 8))
                    goto LABEL_150;
                }
                else
                {
                  v80 = *((_DWORD *)sub_1C5031104(*a3, v24, (uint64_t **)&v253) + 10);
                  result = sub_1C5031104(*a3, *(_QWORD *)k, (uint64_t **)k);
                  if (v80 < *((_DWORD *)result + 10))
                    goto LABEL_150;
                }
              }
            }
          }
          k = v10 + 16;
          if (v10 + 16 < v250)
          {
            v82 = DWORD2(v253);
            v81 = HIDWORD(v253);
            do
            {
              v83 = *((_DWORD *)sub_1C5031104(*a3, v24, (uint64_t **)&v253) + 10);
              result = sub_1C5031104(*a3, *(_QWORD *)k, (uint64_t **)k);
              if (v83 == *((_DWORD *)result + 10))
              {
                v84 = *(_DWORD *)(k + 12);
                if (v81 != 1 && v84 == 1)
                  break;
                v85 = v84 != 1 && v81 == 1;
                if (!v85 && v82 < *(_DWORD *)(k + 8))
                  break;
              }
              else
              {
                v87 = *((_DWORD *)sub_1C5031104(*a3, v24, (uint64_t **)&v253) + 10);
                result = sub_1C5031104(*a3, *(_QWORD *)k, (uint64_t **)k);
                if (v87 < *((_DWORD *)result + 10))
                  break;
              }
              k += 16;
            }
            while (k < v250);
          }
LABEL_150:
          m = v250;
          if (k < v250)
          {
            v90 = DWORD2(v253);
            v89 = HIDWORD(v253);
            for (m = n; ; m -= 16)
            {
              v91 = *((_DWORD *)sub_1C5031104(*a3, v24, (uint64_t **)&v253) + 10);
              result = sub_1C5031104(*a3, *(_QWORD *)m, (uint64_t **)m);
              if (v91 == *((_DWORD *)result + 10))
              {
                v92 = *(_DWORD *)(m + 12);
                if (v89 == 1 || v92 != 1)
                {
                  v93 = v92 != 1 && v89 == 1;
                  if (v93 || v90 >= *(_DWORD *)(m + 8))
                    break;
                }
              }
              else
              {
                v95 = *((_DWORD *)sub_1C5031104(*a3, v24, (uint64_t **)&v253) + 10);
                result = sub_1C5031104(*a3, *(_QWORD *)m, (uint64_t **)m);
                if (v95 >= *((_DWORD *)result + 10))
                  break;
              }
            }
          }
          a4 = v23;
LABEL_167:
          while (k < m)
          {
            v96 = *(_QWORD *)k;
            *(_QWORD *)k = *(_QWORD *)m;
            *(_QWORD *)m = v96;
            v97 = *(_QWORD *)(k + 8);
            *(_QWORD *)(k + 8) = *(_QWORD *)(m + 8);
            *(_QWORD *)(m + 8) = v97;
            v24 = v253;
            v99 = DWORD2(v253);
            v98 = HIDWORD(v253);
            do
            {
              while (1)
              {
                v100 = *((_DWORD *)sub_1C5031104(*a3, v24, (uint64_t **)&v253) + 10);
                v101 = *(_QWORD *)(k + 16);
                k += 16;
                if (v100 == *((_DWORD *)sub_1C5031104(*a3, v101, (uint64_t **)k) + 10))
                  break;
                v105 = *((_DWORD *)sub_1C5031104(*a3, v24, (uint64_t **)&v253) + 10);
                if (v105 < *((_DWORD *)sub_1C5031104(*a3, *(_QWORD *)k, (uint64_t **)k) + 10))
                  goto LABEL_183;
              }
              v102 = *(_DWORD *)(k + 12);
              if (v98 != 1 && v102 == 1)
                break;
              v103 = v102 != 1 && v98 == 1;
            }
            while (v103 || v99 >= *(_DWORD *)(k + 8));
            while (1)
            {
LABEL_183:
              while (1)
              {
                v107 = *((_DWORD *)sub_1C5031104(*a3, v24, (uint64_t **)&v253) + 10);
                v108 = *(_QWORD *)(m - 16);
                m -= 16;
                result = sub_1C5031104(*a3, v108, (uint64_t **)m);
                if (v107 == *((_DWORD *)result + 10))
                  break;
                v106 = *((_DWORD *)sub_1C5031104(*a3, v24, (uint64_t **)&v253) + 10);
                result = sub_1C5031104(*a3, *(_QWORD *)m, (uint64_t **)m);
                if (v106 >= *((_DWORD *)result + 10))
                  goto LABEL_167;
              }
              v109 = *(_DWORD *)(m + 12);
              if (v98 == 1 || v109 != 1)
              {
                v110 = v109 != 1 && v98 == 1;
                if (v110 || v99 >= *(_DWORD *)(m + 8))
                  break;
              }
            }
          }
          if (k - 16 != v10)
          {
            *(_QWORD *)v10 = *(_QWORD *)(k - 16);
            *(_QWORD *)(v10 + 8) = *(_QWORD *)(k - 8);
            v24 = v253;
          }
          a5 = 0;
          *(_QWORD *)(k - 16) = v24;
          *(_QWORD *)(k - 8) = *((_QWORD *)&v253 + 1);
          a2 = v250;
          continue;
        }
LABEL_28:
        v246 = v18;
        v31 = 0;
        v253 = *(_OWORD *)v10;
        v32 = v253;
        v33 = DWORD2(v253);
        v34 = HIDWORD(v253);
        while (1)
        {
          v35 = *((_DWORD *)sub_1C5031104(*a3, *(_QWORD *)(v10 + v31 + 16), (uint64_t **)(v10 + v31 + 16)) + 10);
          if (v35 == *((_DWORD *)sub_1C5031104(*a3, v32, (uint64_t **)&v253) + 10))
            break;
          v40 = *((_DWORD *)sub_1C5031104(*a3, *(_QWORD *)(v10 + v31 + 16), (uint64_t **)(v10 + v31 + 16)) + 10);
          if (v40 >= *((_DWORD *)sub_1C5031104(*a3, v32, (uint64_t **)&v253) + 10))
            goto LABEL_45;
LABEL_44:
          v31 += 16;
        }
        v36 = *(_DWORD *)(v10 + v31 + 28);
        if (v36 != 1 && v34 == 1)
          goto LABEL_44;
        v38 = v34 != 1 && v36 == 1;
        if (!v38 && *(_DWORD *)(v10 + v31 + 24) < v33)
          goto LABEL_44;
LABEL_45:
        v41 = v10 + v31 + 16;
        if (v31)
        {
          while (1)
          {
            v42 = *((_DWORD *)sub_1C5031104(*a3, *(_QWORD *)n, (uint64_t **)n) + 10);
            if (v42 == *((_DWORD *)sub_1C5031104(*a3, v32, (uint64_t **)&v253) + 10))
            {
              v43 = *(_DWORD *)(n + 12);
              if (v43 != 1 && v34 == 1)
                goto LABEL_80;
              v45 = v34 != 1 && v43 == 1;
              if (!v45 && *(_DWORD *)(n + 8) < v33)
                goto LABEL_80;
            }
            else
            {
              v47 = *((_DWORD *)sub_1C5031104(*a3, *(_QWORD *)n, (uint64_t **)n) + 10);
              if (v47 < *((_DWORD *)sub_1C5031104(*a3, v32, (uint64_t **)&v253) + 10))
                goto LABEL_80;
            }
            n -= 16;
          }
        }
        n = v250;
        if (v41 < v250)
        {
          for (n = v248; ; n -= 16)
          {
            v48 = *((_DWORD *)sub_1C5031104(*a3, *(_QWORD *)n, (uint64_t **)n) + 10);
            if (v48 == *((_DWORD *)sub_1C5031104(*a3, v32, (uint64_t **)&v253) + 10))
            {
              v49 = *(_DWORD *)(n + 12);
              if (v49 != 1 && v34 == 1)
                break;
              v52 = v34 != 1 && v49 == 1 || *(_DWORD *)(n + 8) >= v33;
            }
            else
            {
              v53 = *((_DWORD *)sub_1C5031104(*a3, *(_QWORD *)n, (uint64_t **)n) + 10);
              v52 = v53 >= *((_DWORD *)sub_1C5031104(*a3, v32, (uint64_t **)&v253) + 10);
            }
            if (!v52 || v41 >= n)
              break;
          }
        }
LABEL_80:
        k = v41;
        if (v41 < n)
        {
          v55 = n;
          do
          {
            v56 = *(_QWORD *)k;
            *(_QWORD *)k = *(_QWORD *)v55;
            *(_QWORD *)v55 = v56;
            v57 = *(_QWORD *)(k + 8);
            *(_QWORD *)(k + 8) = *(_QWORD *)(v55 + 8);
            *(_QWORD *)(v55 + 8) = v57;
            v32 = v253;
            v58 = DWORD2(v253);
            v59 = HIDWORD(v253);
            while (1)
            {
              while (1)
              {
                v60 = *(_QWORD *)(k + 16);
                k += 16;
                v61 = *((_DWORD *)sub_1C5031104(*a3, v60, (uint64_t **)k) + 10);
                if (v61 == *((_DWORD *)sub_1C5031104(*a3, v32, (uint64_t **)&v253) + 10))
                  break;
                v66 = *((_DWORD *)sub_1C5031104(*a3, *(_QWORD *)k, (uint64_t **)k) + 10);
                if (v66 >= *((_DWORD *)sub_1C5031104(*a3, v32, (uint64_t **)&v253) + 10))
                  goto LABEL_100;
              }
              v62 = *(_DWORD *)(k + 12);
              if (v62 == 1 || v59 != 1)
              {
                v64 = v59 != 1 && v62 == 1;
                if (v64 || *(_DWORD *)(k + 8) >= v58)
                  break;
              }
            }
            do
            {
LABEL_100:
              while (1)
              {
                v68 = *(_QWORD *)(v55 - 16);
                v55 -= 16;
                v69 = *((_DWORD *)sub_1C5031104(*a3, v68, (uint64_t **)v55) + 10);
                if (v69 == *((_DWORD *)sub_1C5031104(*a3, v32, (uint64_t **)&v253) + 10))
                  break;
                v67 = *((_DWORD *)sub_1C5031104(*a3, *(_QWORD *)v55, (uint64_t **)v55) + 10);
                if (v67 < *((_DWORD *)sub_1C5031104(*a3, v32, (uint64_t **)&v253) + 10))
                  goto LABEL_112;
              }
              v70 = *(_DWORD *)(v55 + 12);
              if (v70 != 1 && v59 == 1)
                break;
              v72 = v59 != 1 && v70 == 1;
            }
            while (v72 || *(_DWORD *)(v55 + 8) >= v58);
LABEL_112:
            ;
          }
          while (k < v55);
        }
        v8 = (uint64_t **)v252;
        if ((unint64_t *)(k - 16) != v252)
        {
          *v252 = *(_QWORD *)(k - 16);
          v252[1] = *(_QWORD *)(k - 8);
          v32 = v253;
        }
        *(_QWORD *)(k - 16) = v32;
        *(_QWORD *)(k - 8) = *((_QWORD *)&v253 + 1);
        a2 = v250;
        a4 = v246;
        if (v41 < n)
        {
LABEL_118:
          result = (uint64_t **)sub_1C608A37C(v252, k - 16, a3, v246, a5 & 1);
          a5 = 0;
          continue;
        }
        v74 = sub_1C608BEF4((uint64_t)v252, k - 16, a3);
        result = (uint64_t **)sub_1C608BEF4(k, v250, a3);
        if (!(_DWORD)result)
        {
          if (v74)
            continue;
          goto LABEL_118;
        }
        a2 = k - 16;
        if (!v74)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t **sub_1C608B890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t ***a6)
{
  int v12;
  uint64_t **result;
  int v14;
  int v15;
  BOOL v17;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;

  sub_1C608C298(a1, a2, a3, a4, a6);
  v12 = *((_DWORD *)sub_1C5031104(*a6, *(_QWORD *)a5, (uint64_t **)a5) + 10);
  result = sub_1C5031104(*a6, *(_QWORD *)a4, (uint64_t **)a4);
  if (v12 != *((_DWORD *)result + 10))
  {
    v19 = *((_DWORD *)sub_1C5031104(*a6, *(_QWORD *)a5, (uint64_t **)a5) + 10);
    result = sub_1C5031104(*a6, *(_QWORD *)a4, (uint64_t **)a4);
    if (v19 >= *((_DWORD *)result + 10))
      return result;
LABEL_16:
    v20 = *(_QWORD *)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v20;
    v21 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = *(_QWORD *)(a5 + 8);
    *(_QWORD *)(a5 + 8) = v21;
    v22 = *((_DWORD *)sub_1C5031104(*a6, *(_QWORD *)a4, (uint64_t **)a4) + 10);
    result = sub_1C5031104(*a6, *(_QWORD *)a3, (uint64_t **)a3);
    if (v22 == *((_DWORD *)result + 10))
    {
      v23 = *(_DWORD *)(a4 + 12);
      v24 = *(_DWORD *)(a3 + 12);
      if (v23 == 1 || v24 != 1)
      {
        v25 = v24 != 1 && v23 == 1;
        if (v25 || *(_DWORD *)(a4 + 8) >= *(_DWORD *)(a3 + 8))
          return result;
      }
    }
    else
    {
      v26 = *((_DWORD *)sub_1C5031104(*a6, *(_QWORD *)a4, (uint64_t **)a4) + 10);
      result = sub_1C5031104(*a6, *(_QWORD *)a3, (uint64_t **)a3);
      if (v26 >= *((_DWORD *)result + 10))
        return result;
    }
    v27 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v27;
    v28 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v28;
    v29 = *((_DWORD *)sub_1C5031104(*a6, *(_QWORD *)a3, (uint64_t **)a3) + 10);
    result = sub_1C5031104(*a6, *(_QWORD *)a2, (uint64_t **)a2);
    if (v29 == *((_DWORD *)result + 10))
    {
      v30 = *(_DWORD *)(a3 + 12);
      v31 = *(_DWORD *)(a2 + 12);
      if (v30 == 1 || v31 != 1)
      {
        v32 = v31 != 1 && v30 == 1;
        if (v32 || *(_DWORD *)(a3 + 8) >= *(_DWORD *)(a2 + 8))
          return result;
      }
    }
    else
    {
      v33 = *((_DWORD *)sub_1C5031104(*a6, *(_QWORD *)a3, (uint64_t **)a3) + 10);
      result = sub_1C5031104(*a6, *(_QWORD *)a2, (uint64_t **)a2);
      if (v33 >= *((_DWORD *)result + 10))
        return result;
    }
    v34 = *(_QWORD *)a2;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v34;
    v35 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v35;
    v36 = *((_DWORD *)sub_1C5031104(*a6, *(_QWORD *)a2, (uint64_t **)a2) + 10);
    result = sub_1C5031104(*a6, *(_QWORD *)a1, (uint64_t **)a1);
    if (v36 == *((_DWORD *)result + 10))
    {
      v37 = *(_DWORD *)(a2 + 12);
      v38 = *(_DWORD *)(a1 + 12);
      if (v37 == 1 || v38 != 1)
      {
        v39 = v38 != 1 && v37 == 1;
        if (v39 || *(_DWORD *)(a2 + 8) >= *(_DWORD *)(a1 + 8))
          return result;
      }
    }
    else
    {
      v40 = *((_DWORD *)sub_1C5031104(*a6, *(_QWORD *)a2, (uint64_t **)a2) + 10);
      result = sub_1C5031104(*a6, *(_QWORD *)a1, (uint64_t **)a1);
      if (v40 >= *((_DWORD *)result + 10))
        return result;
    }
    v41 = *(_QWORD *)a1;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v41;
    v42 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v42;
    return result;
  }
  v14 = *(_DWORD *)(a5 + 12);
  v15 = *(_DWORD *)(a4 + 12);
  if (v14 != 1 && v15 == 1)
    goto LABEL_16;
  v17 = v15 != 1 && v14 == 1;
  if (!v17 && *(_DWORD *)(a5 + 8) < *(_DWORD *)(a4 + 8))
    goto LABEL_16;
  return result;
}

uint64_t **sub_1C608BBB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t ***a4)
{
  int v8;
  int v9;
  int v10;
  BOOL v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t **result;
  int v18;
  int v19;
  unint64_t v20;
  uint64_t *v21;
  unsigned int v22;
  BOOL v23;
  int v25;
  unint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  int v29;
  int v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;

  v8 = *((_DWORD *)sub_1C5031104(*a4, *(_QWORD *)a2, (uint64_t **)a2) + 10);
  if (v8 == *((_DWORD *)sub_1C5031104(*a4, *(_QWORD *)a1, (uint64_t **)a1) + 10))
  {
    v9 = *(_DWORD *)(a2 + 12);
    v10 = *(_DWORD *)(a1 + 12);
    if (v9 != 1 && v10 == 1)
    {
      v15 = 1;
      goto LABEL_17;
    }
    v13 = v9 == 1 && v10 != 1 || *(_DWORD *)(a2 + 8) >= *(_DWORD *)(a1 + 8);
  }
  else
  {
    v14 = *((_DWORD *)sub_1C5031104(*a4, *(_QWORD *)a2, (uint64_t **)a2) + 10);
    v13 = v14 >= *((_DWORD *)sub_1C5031104(*a4, *(_QWORD *)a1, (uint64_t **)a1) + 10);
  }
  v15 = !v13;
LABEL_17:
  v16 = *((_DWORD *)sub_1C5031104(*a4, *(_QWORD *)a3, (uint64_t **)a3) + 10);
  result = sub_1C5031104(*a4, *(_QWORD *)a2, (uint64_t **)a2);
  if (v16 == *((_DWORD *)result + 10))
  {
    v18 = *(_DWORD *)(a3 + 12);
    v19 = *(_DWORD *)(a2 + 12);
    if (v18 != 1 && v19 == 1)
    {
      if (v15)
      {
        v21 = (uint64_t *)(a1 + 8);
        v20 = *(_QWORD *)a1;
LABEL_34:
        *(_QWORD *)a1 = *(_QWORD *)a3;
LABEL_58:
        *(_QWORD *)a3 = v20;
        v28 = (_DWORD *)(a3 + 8);
        goto LABEL_59;
      }
LABEL_36:
      v26 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v26;
      v28 = (_DWORD *)(a2 + 8);
      v27 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v27;
      v29 = *((_DWORD *)sub_1C5031104(*a4, *(_QWORD *)a2, (uint64_t **)a2) + 10);
      result = sub_1C5031104(*a4, *(_QWORD *)a1, (uint64_t **)a1);
      if (v29 == *((_DWORD *)result + 10))
      {
        v30 = *(_DWORD *)(a2 + 12);
        v31 = *(_DWORD *)(a1 + 12);
        if (v30 == 1 || v31 != 1)
        {
          v32 = v31 != 1 && v30 == 1;
          if (v32 || *v28 >= *(_DWORD *)(a1 + 8))
            return result;
        }
      }
      else
      {
        v39 = *((_DWORD *)sub_1C5031104(*a4, *(_QWORD *)a2, (uint64_t **)a2) + 10);
        result = sub_1C5031104(*a4, *(_QWORD *)a1, (uint64_t **)a1);
        if (v39 >= *((_DWORD *)result + 10))
          return result;
      }
      v40 = *(_QWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)a2 = v40;
      v21 = (uint64_t *)(a1 + 8);
LABEL_59:
      v42 = *v21;
      *v21 = *(_QWORD *)v28;
      *(_QWORD *)v28 = v42;
      return result;
    }
    v23 = v18 == 1 && v19 != 1 || *(_DWORD *)(a3 + 8) >= *(_DWORD *)(a2 + 8);
  }
  else
  {
    v22 = *((_DWORD *)sub_1C5031104(*a4, *(_QWORD *)a3, (uint64_t **)a3) + 10);
    result = sub_1C5031104(*a4, *(_QWORD *)a2, (uint64_t **)a2);
    v23 = v22 >= *((_DWORD *)result + 10);
  }
  v25 = !v23;
  if ((v15 & 1) == 0)
  {
    if (!v25)
      return result;
    goto LABEL_36;
  }
  v21 = (uint64_t *)(a1 + 8);
  v20 = *(_QWORD *)a1;
  if (v25)
    goto LABEL_34;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v21 = (uint64_t *)(a2 + 8);
  v33 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = v20;
  v34 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v33;
  *(_QWORD *)(a2 + 8) = v34;
  v35 = *((_DWORD *)sub_1C5031104(*a4, *(_QWORD *)a3, (uint64_t **)a3) + 10);
  result = sub_1C5031104(*a4, *(_QWORD *)a2, (uint64_t **)a2);
  if (v35 != *((_DWORD *)result + 10))
  {
    v41 = *((_DWORD *)sub_1C5031104(*a4, *(_QWORD *)a3, (uint64_t **)a3) + 10);
    result = sub_1C5031104(*a4, *(_QWORD *)a2, (uint64_t **)a2);
    if (v41 >= *((_DWORD *)result + 10))
      return result;
    goto LABEL_57;
  }
  v36 = *(_DWORD *)(a3 + 12);
  v37 = *(_DWORD *)(a2 + 12);
  if (v36 != 1 && v37 == 1 || (v37 != 1 ? (v38 = v36 == 1) : (v38 = 0), !v38 && *(_DWORD *)(a3 + 8) < *(_DWORD *)v21))
  {
LABEL_57:
    v20 = *(_QWORD *)a2;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    goto LABEL_58;
  }
  return result;
}

BOOL sub_1C608BEF4(uint64_t a1, uint64_t a2, uint64_t ***a3)
{
  uint64_t v4;
  uint64_t v6;
  _BOOL8 result;
  unint64_t *v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  BOOL v22;
  unsigned int v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  BOOL v32;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  __int128 v40;

  v4 = a2;
  v6 = (a2 - a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = (unint64_t *)(a2 - 16);
      v9 = *((_DWORD *)sub_1C5031104(*a3, *(_QWORD *)(a2 - 16), (uint64_t **)(a2 - 16)) + 10);
      if (v9 != *((_DWORD *)sub_1C5031104(*a3, *(_QWORD *)a1, (uint64_t **)a1) + 10))
      {
        v35 = *((_DWORD *)sub_1C5031104(*a3, *v8, (uint64_t **)(v4 - 16)) + 10);
        if (v35 >= *((_DWORD *)sub_1C5031104(*a3, *(_QWORD *)a1, (uint64_t **)a1) + 10))
          return 1;
        goto LABEL_58;
      }
      v10 = *(_DWORD *)(v4 - 4);
      v11 = *(_DWORD *)(a1 + 12);
      v12 = v10 != 1 && v11 == 1;
      if (v12
        || (v11 != 1 ? (v13 = v10 == 1) : (v13 = 0), (result = 1, !v13) && *(_DWORD *)(v4 - 8) < *(_DWORD *)(a1 + 8)))
      {
LABEL_58:
        v36 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(v4 - 16);
        *(_QWORD *)(v4 - 16) = v36;
        v37 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(v4 - 8);
        *(_QWORD *)(v4 - 8) = v37;
        return 1;
      }
      return result;
    case 3:
      sub_1C608BBB8(a1, a1 + 16, a2 - 16, a3);
      return 1;
    case 4:
      sub_1C608C298(a1, a1 + 16, a1 + 32, a2 - 16, a3);
      return 1;
    case 5:
      sub_1C608B890(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16, a3);
      return 1;
    default:
      v14 = a1 + 32;
      sub_1C608BBB8(a1, a1 + 16, a1 + 32, a3);
      v15 = a1 + 48;
      if (a1 + 48 == v4)
        return 1;
      v16 = 0;
      v17 = 0;
      v38 = v4;
      break;
  }
LABEL_15:
  v18 = *((_DWORD *)sub_1C5031104(*a3, *(_QWORD *)v15, (uint64_t **)v15) + 10);
  if (v18 == *((_DWORD *)sub_1C5031104(*a3, *(_QWORD *)v14, (uint64_t **)v14) + 10))
  {
    v19 = *(_DWORD *)(v15 + 12);
    v20 = *(_DWORD *)(v14 + 12);
    if (v19 == 1 || v20 != 1)
    {
      v22 = v20 != 1 && v19 == 1;
      if (v22 || *(_DWORD *)(v15 + 8) >= *(_DWORD *)(v14 + 8))
        goto LABEL_52;
    }
  }
  else
  {
    v24 = *((_DWORD *)sub_1C5031104(*a3, *(_QWORD *)v15, (uint64_t **)v15) + 10);
    if (v24 >= *((_DWORD *)sub_1C5031104(*a3, *(_QWORD *)v14, (uint64_t **)v14) + 10))
      goto LABEL_52;
  }
  v40 = *(_OWORD *)v15;
  *(_QWORD *)v15 = *(_QWORD *)v14;
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
  v25 = (_OWORD *)a1;
  if (v14 == a1)
    goto LABEL_51;
  v39 = v17;
  v26 = v16;
  while (1)
  {
    v27 = a1 + v26;
    v28 = v40;
    v29 = *((_DWORD *)sub_1C5031104(*a3, v40, (uint64_t **)&v40) + 10);
    if (v29 == *((_DWORD *)sub_1C5031104(*a3, *(_QWORD *)(v27 + 16), (uint64_t **)(v27 + 16)) + 10))
    {
      v30 = *(_DWORD *)(v27 + 28);
      if (HIDWORD(v40) == 1 || v30 != 1)
      {
        v32 = v30 != 1 && HIDWORD(v40) == 1;
        if (v32 || DWORD2(v40) >= *(_DWORD *)(a1 + v26 + 24))
        {
          v25 = (_OWORD *)v14;
          goto LABEL_50;
        }
      }
    }
    else
    {
      v34 = *((_DWORD *)sub_1C5031104(*a3, v28, (uint64_t **)&v40) + 10);
      if (v34 >= *((_DWORD *)sub_1C5031104(*a3, *(_QWORD *)(v27 + 16), (uint64_t **)(v27 + 16)) + 10))
      {
        v25 = (_OWORD *)(a1 + v26 + 32);
LABEL_50:
        v4 = v38;
        v17 = v39;
LABEL_51:
        *v25 = v40;
        if (++v17 == 8)
          return v15 + 16 == v4;
LABEL_52:
        v14 = v15;
        v16 += 16;
        v15 += 16;
        if (v15 == v4)
          return 1;
        goto LABEL_15;
      }
    }
    v14 -= 16;
    *(_QWORD *)(v27 + 32) = *(_QWORD *)(v27 + 16);
    *(_QWORD *)(a1 + v26 + 40) = *(_QWORD *)(a1 + v26 + 24);
    v26 -= 16;
    if (v26 == -32)
    {
      v25 = (_OWORD *)a1;
      goto LABEL_50;
    }
  }
}

uint64_t **sub_1C608C298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t ***a5)
{
  int v10;
  uint64_t **result;
  int v12;
  int v13;
  BOOL v15;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;

  sub_1C608BBB8(a1, a2, a3, a5);
  v10 = *((_DWORD *)sub_1C5031104(*a5, *(_QWORD *)a4, (uint64_t **)a4) + 10);
  result = sub_1C5031104(*a5, *(_QWORD *)a3, (uint64_t **)a3);
  if (v10 != *((_DWORD *)result + 10))
  {
    v17 = *((_DWORD *)sub_1C5031104(*a5, *(_QWORD *)a4, (uint64_t **)a4) + 10);
    result = sub_1C5031104(*a5, *(_QWORD *)a3, (uint64_t **)a3);
    if (v17 >= *((_DWORD *)result + 10))
      return result;
LABEL_16:
    v18 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v18;
    v19 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v19;
    v20 = *((_DWORD *)sub_1C5031104(*a5, *(_QWORD *)a3, (uint64_t **)a3) + 10);
    result = sub_1C5031104(*a5, *(_QWORD *)a2, (uint64_t **)a2);
    if (v20 == *((_DWORD *)result + 10))
    {
      v21 = *(_DWORD *)(a3 + 12);
      v22 = *(_DWORD *)(a2 + 12);
      if (v21 == 1 || v22 != 1)
      {
        v23 = v22 != 1 && v21 == 1;
        if (v23 || *(_DWORD *)(a3 + 8) >= *(_DWORD *)(a2 + 8))
          return result;
      }
    }
    else
    {
      v24 = *((_DWORD *)sub_1C5031104(*a5, *(_QWORD *)a3, (uint64_t **)a3) + 10);
      result = sub_1C5031104(*a5, *(_QWORD *)a2, (uint64_t **)a2);
      if (v24 >= *((_DWORD *)result + 10))
        return result;
    }
    v25 = *(_QWORD *)a2;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v25;
    v26 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v26;
    v27 = *((_DWORD *)sub_1C5031104(*a5, *(_QWORD *)a2, (uint64_t **)a2) + 10);
    result = sub_1C5031104(*a5, *(_QWORD *)a1, (uint64_t **)a1);
    if (v27 == *((_DWORD *)result + 10))
    {
      v28 = *(_DWORD *)(a2 + 12);
      v29 = *(_DWORD *)(a1 + 12);
      if (v28 == 1 || v29 != 1)
      {
        v30 = v29 != 1 && v28 == 1;
        if (v30 || *(_DWORD *)(a2 + 8) >= *(_DWORD *)(a1 + 8))
          return result;
      }
    }
    else
    {
      v31 = *((_DWORD *)sub_1C5031104(*a5, *(_QWORD *)a2, (uint64_t **)a2) + 10);
      result = sub_1C5031104(*a5, *(_QWORD *)a1, (uint64_t **)a1);
      if (v31 >= *((_DWORD *)result + 10))
        return result;
    }
    v32 = *(_QWORD *)a1;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v32;
    v33 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v33;
    return result;
  }
  v12 = *(_DWORD *)(a4 + 12);
  v13 = *(_DWORD *)(a3 + 12);
  if (v12 != 1 && v13 == 1)
    goto LABEL_16;
  v15 = v13 != 1 && v12 == 1;
  if (!v15 && *(_DWORD *)(a4 + 8) < *(_DWORD *)(a3 + 8))
    goto LABEL_16;
  return result;
}

_DWORD *sub_1C608C4FC(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63DD1EC(a1, v4, v4 + 40 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 40 * v10;
    do
    {
      *result = -1;
      result += 10;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C608C5C0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63DD63C(a1, v4, &v4[4 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = 0x1FFFFFFFFLL;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

uint64_t *sub_1C608C678(uint64_t a1, _QWORD *a2, unsigned int a3, int a4)
{
  uint64_t *result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  BOOL v9;
  unsigned int v10;
  BOOL v12;

  v6 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v5 = v6;
  if (v6)
  {
    do
    {
      while (1)
      {
        v7 = v5;
        v8 = *((_DWORD *)v5 + 8);
        if (a4 == 1 || v8 != 1)
        {
          v9 = v8 != 1 && a4 == 1;
          v10 = *((_DWORD *)v7 + 7);
          if (v9 || v10 <= a3)
            break;
        }
        v5 = (uint64_t *)*v7;
        result = v7;
        if (!*v7)
          goto LABEL_25;
      }
      if (a4 != 1 || v8 == 1)
      {
        v12 = v8 != 1 || a4 == 1;
        if (!v12 || v10 >= a3)
          break;
      }
      result = v7 + 1;
      v5 = (uint64_t *)v7[1];
    }
    while (v5);
  }
  else
  {
    v7 = result;
  }
LABEL_25:
  *a2 = v7;
  return result;
}

uint64_t sub_1C608C6F8(uint64_t a1)
{
  _BYTE *v2;
  const void *v3;
  void *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  const void *v8;
  void *v9;
  unsigned int v10;
  llvm::VPBlockBase *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  unsigned int v33;
  unsigned int v34;
  _BYTE *v35;
  _BYTE v36[64];
  char *v37;
  char *v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  _BYTE v45[64];
  void *__p;
  char *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  void *v54;
  _BYTE *v55;
  void *v56;
  void *v57;
  unsigned int v58;
  unsigned int v59;
  void *v60;
  _BYTE *v61;
  void (**v62)(llvm::VPValue *__hidden);
  char v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD v66[4];

  v66[3] = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)a1)
    goto LABEL_49;
  v62 = &off_1E81ADA28;
  v63 = 0;
  v64 = v66;
  v65 = 0x100000000;
  v66[1] = 0;
  v66[2] = 0;
  sub_1C63DD7E8((uint64_t *)a1, &v49);
  v2 = v45;
  v40 = v45;
  v3 = v50;
  if (v50 == v49)
  {
    v41 = v45;
    v4 = v50;
  }
  else
  {
    v33 = v51;
    v2 = malloc_type_malloc(8 * v51, 0x4065EBACuLL);
    if (!v2)
    {
      if (v33)
        goto LABEL_92;
      v2 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v2)
        goto LABEL_92;
    }
    v41 = v2;
    v4 = v49;
    v3 = v50;
  }
  v5 = v52;
  v42 = v51;
  if (v3 == v4)
    v6 = v52;
  else
    v6 = v51;
  if (v6)
  {
    memmove(v2, v3, 8 * v6);
    v5 = v52;
  }
  v43 = v5;
  v44 = v53;
  v47 = 0;
  v48 = 0;
  __p = 0;
  sub_1C4D6CDA0(&__p, v54, v55, 0xAAAAAAAAAAAAAAABLL * ((v55 - (_BYTE *)v54) >> 3));
  v7 = v36;
  v8 = v57;
  if (v57 != v56)
  {
    v34 = v58;
    v7 = malloc_type_malloc(8 * v58, 0x4065EBACuLL);
    if (v7 || !v34 && (v7 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v35 = v7;
      v9 = v56;
      v8 = v57;
      goto LABEL_11;
    }
LABEL_92:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v35 = v36;
  v9 = v57;
LABEL_11:
  if (v8 == v9)
    v10 = v59;
  else
    v10 = v58;
  if (v10)
    memmove(v7, v8, 8 * v10);
  v38 = 0;
  v39 = 0;
  v37 = 0;
  sub_1C4D6CDA0(&v37, v60, v61, 0xAAAAAAAAAAAAAAABLL * ((v61 - (_BYTE *)v60) >> 3));
  while (1)
  {
    if (v47 - (_BYTE *)__p != v38 - v37)
      goto LABEL_31;
    if (__p == v47)
      break;
    v12 = v37 + 8;
    v13 = (char *)__p + 8;
    while (1)
    {
      v14 = v13 - 8;
      if (*((_QWORD *)v13 - 1) != *((_QWORD *)v12 - 1))
        break;
      v15 = v12[8];
      if (v13[8])
        v16 = v15 == 0;
      else
        v16 = 1;
      if (v16)
      {
        if ((v13[8] == 0) == (v15 != 0))
          break;
      }
      else if (*(_QWORD *)v13 != *(_QWORD *)v12)
      {
        break;
      }
      v12 += 24;
      v13 += 24;
      if (v14 + 24 == v47)
        goto LABEL_32;
    }
LABEL_31:
    (*(void (**)(_QWORD, void (***)(llvm::VPValue *__hidden)))(**((_QWORD **)v47 - 3) + 24))(*((_QWORD *)v47 - 3), &v62);
    sub_1C63DD89C((char *)&v40);
  }
LABEL_32:
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  if (v35 != v36)
    free(v35);
  if (__p)
  {
    v47 = (char *)__p;
    operator delete(__p);
  }
  if (v41 != v40)
    free(v41);
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  if (v57 != v56)
    free(v57);
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
  if (v50 != v49)
    free(v50);
  llvm::VPBlockBase::deleteCFG(*(llvm::VPBlockBase **)a1, v11);
  llvm::VPValue::~VPValue((llvm::VPValue *)&v62);
LABEL_49:
  v17 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v17)
  {
    v18 = *(_QWORD **)(a1 + 208);
    v19 = 8 * v17;
    do
    {
      if (*v18)
        (*(void (**)(_QWORD))(*(_QWORD *)*v18 + 8))(*v18);
      ++v18;
      v19 -= 8;
    }
    while (v19);
  }
  v20 = *(_QWORD *)(a1 + 112);
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *(_QWORD *)(a1 + 120);
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *(_QWORD *)(a1 + 88);
  v23 = *(unsigned int *)(a1 + 104);
  v24 = (_QWORD *)(v22 + 16 * v23);
  if (*(_DWORD *)(a1 + 96))
  {
    if ((_DWORD)v23)
    {
      v26 = 16 * v23;
      v25 = *(_QWORD **)(a1 + 88);
      while ((*v25 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v25 += 2;
        v26 -= 16;
        if (!v26)
          goto LABEL_64;
      }
    }
    else
    {
      v25 = *(_QWORD **)(a1 + 88);
    }
  }
  else
  {
LABEL_64:
    v25 = (_QWORD *)(v22 + 16 * v23);
  }
  v27 = (_QWORD *)(v22 + 16 * v23);
LABEL_66:
  while (v25 != v27)
  {
    v28 = v25[1];
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v29 = v25 + 2;
    v25 = v24;
    if (v29 != v24)
    {
      v25 = v29;
      while ((*v25 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v25 += 2;
        if (v25 == v24)
        {
          v25 = v24;
          goto LABEL_66;
        }
      }
    }
  }
  sub_1C63DD988((_QWORD *)(a1 + 352));
  v30 = *(void **)(a1 + 208);
  if (v30 != (void *)(a1 + 224))
    free(v30);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 184), 8);
  llvm::VPValue::~VPValue((llvm::VPValue *)(a1 + 128));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 88), 8);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v31 = *(void **)(a1 + 32);
  if (v31 != (void *)(a1 + 48))
    free(v31);
  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 16), 4);
  return a1;
}

void sub_1C608CBCC()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C608CBE0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E81AD038;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C608CC18(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E81AD038;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C608CC38(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  uint64_t v6;
  int v7;
  int v8;
  _BOOL4 v9;

  v2 = *a2;
  if (HIDWORD(*a2) != 1 && *a2 == 1)
    return 0;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = sub_1C63D46C0(*(_QWORD *)(v6 + 24), **(_QWORD **)(a1 + 16), v2);
  if (v7 == 3)
    return 1;
  v8 = v7;
  if (sub_1C63D4494(*(_QWORD *)(v6 + 24), **(_QWORD **)(a1 + 16), v2))
    return 0;
  v9 = !sub_1C60785A4(*(_QWORD *)(v6 + 24), **(_QWORD **)(a1 + 16), v2);
  return v8 != 5 && v9;
}

void sub_1C608CCE0()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C608CCF4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E81AD080;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C608CD2C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E81AD080;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C608CD4C(uint64_t a1, llvm::Type **a2, uint64_t a3, llvm::DominatorTree *a4)
{
  return llvm::LoopVectorizationCostModel::isScalarWithPredication(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *(_QWORD *)(a1 + 16), *a2, a4);
}

void sub_1C608CD60()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C608CD74(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E81AD0C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C608CDAC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E81AD0C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C608CDCC(uint64_t a1, llvm::Type **a2)
{
  llvm::Type *v3;
  uint64_t v4;
  unsigned int v5;
  int64_t v6;
  int v7;
  int v8;
  uint64_t VectorIntrinsicCost;
  int v10;
  _BOOL4 v11;
  char v13;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = llvm::getVectorIntrinsicIDForCall(**(_QWORD **)(a1 + 8), *(uint64_t **)(v4 + 8));
  v13 = 0;
  v6 = llvm::LoopVectorizationCostModel::getVectorCallCost(*(_QWORD *)(v4 + 24), **(_QWORD **)(a1 + 8), (uint64_t)v3, &v13);
  v8 = v7;
  if (v5)
  {
    VectorIntrinsicCost = llvm::LoopVectorizationCostModel::getVectorIntrinsicCost(*(_QWORD *)(v4 + 24), **(_QWORD **)(a1 + 8), v3);
  }
  else
  {
    v10 = 0;
    VectorIntrinsicCost = 0;
  }
  v11 = v6 >= VectorIntrinsicCost;
  if (v10 != v8)
    v11 = v10 <= v8;
  if (!v5)
    v11 = 0;
  return !v13 || v11;
}

uint64_t sub_1C608CE88(uint64_t a1, char a2, uint64_t *a3, uint64_t *a4)
{
  _DWORD *v5;
  uint64_t *v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = &unk_1E81AD898;
  *(_BYTE *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = &unk_1E81AD718;
  v5 = (_DWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = a1 + 64;
  *(_QWORD *)(a1 + 56) = 0x200000000;
  *(_DWORD *)(a1 + 80) = 0;
  if (a3 != a4)
  {
    v7 = a3;
    do
    {
      v8 = *v7++;
      sub_1C63D6200(v5, v8);
    }
    while (v7 != a4);
  }
  *(_QWORD *)a1 = &unk_1E81AD838;
  *(_QWORD *)(a1 + 40) = &unk_1E81AD878;
  *(_QWORD *)(a1 + 88) = 0;
  return a1;
}

void sub_1C608CF3C()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C608CF50(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E81AD110;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C608CF88(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E81AD110;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C608CFA8(uint64_t a1, unint64_t *a2)
{
  llvm::Type *v3;
  uint64_t v4;
  llvm::DominatorTree *v5;

  v3 = (llvm::Type *)*a2;
  v4 = *(_QWORD *)(a1 + 8);
  if (sub_1C63D4494(*(_QWORD *)(v4 + 24), *(_QWORD *)(a1 + 16), *a2)
    || sub_1C60785A4(*(_QWORD *)(v4 + 24), *(_QWORD *)(a1 + 16), (uint64_t)v3))
  {
    return 1;
  }
  else
  {
    return llvm::LoopVectorizationCostModel::isScalarWithPredication(*(_QWORD *)(v4 + 24), *(_QWORD *)(a1 + 16), v3, v5);
  }
}

void sub_1C608D01C()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C608D030(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E81AD158;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C608D068(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E81AD158;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C608D088(uint64_t a1, unint64_t *a2)
{
  return sub_1C63D3774(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), **(_QWORD **)(a1 + 16), *a2);
}

void sub_1C608D0A0()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C608D0B4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E81AD1A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C608D0F4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E81AD1A0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C608D11C(uint64_t a1, llvm::Type **a2)
{
  return sub_1C63D45E8(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), **(_QWORD **)(a1 + 16), *a2, (llvm::DominatorTree *)**(unsigned __int8 **)(a1 + 24));
}

void sub_1C608D140()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C608D154(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E81AD1E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C608D18C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E81AD1E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C608D1AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _BOOL4 v4;

  v2 = *a2;
  v4 = HIDWORD(*a2) == 1 && (_DWORD)v2 != 0;
  return (v2 > 1 || v4)
      && sub_1C63D46C0(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40), v2) == 3;
}

uint64_t sub_1C608D1FC(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 1;
  memset_pattern16((void *)(a1 + 16), &unk_1C8677CB0, 0x10uLL);
  *(_QWORD *)(a1 + 32) = a1 + 48;
  *(_QWORD *)(a1 + 40) = 0x200000000;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 92) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = &off_1E81ADA28;
  *(_BYTE *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = a1 + 160;
  *(_QWORD *)(a1 + 152) = 0x100000000;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = a1 + 224;
  *(_QWORD *)(a1 + 216) = 0x1000000000;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = a1 + 432;
  *(_QWORD *)(a1 + 424) = 0x400000000;
  *(_QWORD *)(a1 + 464) = a1 + 480;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 1;
  *(_BYTE *)(a1 + 496) = 1;
  if (a2)
    *(_QWORD *)(a2 + 192) = a1;
  return a1;
}

uint64_t sub_1C608D2F4(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v15 = *a1;
  v4 = v16;
  v5 = (uint64_t *)a1[4];
  if (v5)
  {
    if (v5 == a1 + 1)
    {
      v17 = v16;
      (*(void (**)(uint64_t *, _BYTE *))(*v5 + 24))(v5, v16);
    }
    else
    {
      v17 = (_BYTE *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
    }
  }
  else
  {
    v17 = 0;
  }
  v6 = *a2;
  v12 = *a2;
  v7 = (uint64_t *)a2[4];
  if (v7)
  {
    if (v7 == a2 + 1)
    {
      v14 = v13;
      (*(void (**)(uint64_t *, _QWORD *))(*v7 + 24))(v7, v13);
      v8 = v14;
    }
    else
    {
      v8 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      v14 = v8;
    }
    v6 = v12;
    v9 = v15;
    if (v8 == v13)
    {
      (*(void (**)(_QWORD *))(v13[0] + 32))(v13);
    }
    else if (v8)
    {
      (*(void (**)(_QWORD *))(*v8 + 40))(v8);
    }
  }
  else
  {
    v14 = 0;
    v9 = v15;
  }
  if (v17 == v16)
  {
    v10 = 4;
    goto LABEL_19;
  }
  if (v17)
  {
    v10 = 5;
    v4 = v17;
LABEL_19:
    (*(void (**)(_QWORD *))(*v4 + 8 * v10))(v4);
  }
  return (v6 - v9) >> 5;
}

uint64_t sub_1C608D468(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  _QWORD *v22;
  _QWORD v23[3];
  _QWORD *v24;
  _QWORD *v25;
  _BYTE v26[24];
  _BYTE *v27;
  _QWORD *v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD *v31;
  _BYTE v32[24];
  _BYTE *v33;
  uint64_t *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v22 = (_QWORD *)*a1;
  v6 = v23;
  v7 = (_QWORD *)a1[4];
  if (v7)
  {
    if (v7 == a1 + 1)
    {
      v24 = v23;
      (*(void (**)(_QWORD *, _QWORD *))(*v7 + 24))(v7, v23);
    }
    else
    {
      v24 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
    }
  }
  else
  {
    v24 = 0;
  }
  v19 = (_QWORD *)*a2;
  v8 = v20;
  result = a2[4];
  if (result)
  {
    if ((_QWORD *)result == a2 + 1)
    {
      v21 = v20;
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 24))(result, v20);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      v21 = (_QWORD *)result;
    }
  }
  else
  {
    v21 = 0;
  }
  v28 = v22;
  v10 = v29;
  if (v24)
  {
    if (v24 == v23)
    {
      v30 = v29;
      result = (*(uint64_t (**)(_QWORD *, _QWORD *))(v23[0] + 24))(v23, v29);
    }
    else
    {
      v30 = v24;
      v24 = 0;
    }
  }
  else
  {
    v30 = 0;
  }
  v11 = v19;
  v25 = v19;
  v12 = v26;
  if (v21)
  {
    if (v21 == v20)
    {
      v27 = v26;
      result = (*(uint64_t (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v26);
      v11 = v25;
    }
    else
    {
      v27 = v21;
      v21 = 0;
    }
  }
  else
  {
    v27 = 0;
  }
  if (v28 != v11)
  {
    v11 = v28;
    do
    {
      v31 = (_QWORD *)*v11;
      if (!v30)
        sub_1C485C2F0();
      result = (*(uint64_t (**)(_QWORD *, _QWORD **))(*v30 + 48))(v30, &v31);
      *a3++ = result;
      v11 = v28 + 4;
      v28 = v11;
    }
    while (v11 != v25);
  }
  v31 = v11;
  v13 = v32;
  if (v30)
  {
    if (v30 == v29)
    {
      v33 = v32;
      result = (*(uint64_t (**)(_QWORD *, _BYTE *))(v29[0] + 24))(v29, v32);
    }
    else
    {
      v33 = v30;
      v30 = 0;
    }
  }
  else
  {
    v33 = 0;
  }
  v34 = a3;
  if (v27 == v26)
  {
    v14 = 4;
  }
  else
  {
    if (!v27)
      goto LABEL_35;
    v14 = 5;
    v12 = v27;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v12 + 8 * v14))(v12);
LABEL_35:
  if (v30 == v29)
  {
    v15 = 4;
  }
  else
  {
    if (!v30)
      goto LABEL_40;
    v15 = 5;
    v10 = v30;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v10 + 8 * v15))(v10);
LABEL_40:
  if (v33 == v32)
  {
    v16 = 4;
  }
  else
  {
    if (!v33)
      goto LABEL_45;
    v16 = 5;
    v13 = v33;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v13 + 8 * v16))(v13);
LABEL_45:
  if (v21 == v20)
  {
    v17 = 4;
  }
  else
  {
    if (!v21)
      goto LABEL_50;
    v17 = 5;
    v8 = v21;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v8 + 8 * v17))(v8);
LABEL_50:
  if (v24 == v23)
  {
    v18 = 4;
  }
  else
  {
    if (!v24)
      return result;
    v18 = 5;
    v6 = v24;
  }
  return (*(uint64_t (**)(_QWORD *))(*v6 + 8 * v18))(v6);
}

uint64_t sub_1C608D7A8(uint64_t a1, llvm::PHINode *a2)
{
  return llvm::LoopVectorizationLegality::getIntOrFpInductionDescriptor(*(llvm::LoopVectorizationLegality **)(*(_QWORD *)a1 + 32), a2);
}

void sub_1C608D7B8()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C608D7CC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_1E81AD230;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_1C608D81C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E81AD230;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C608D854(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_OWORD *)(a1 + 24);
  v6[0] = *(_OWORD *)(a1 + 8);
  v6[1] = v2;
  v6[2] = *(_OWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 64);
  v7 = v4;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  return llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::getResultImpl(v3, &llvm::LoopAccessAnalysis::Key, a2, (uint64_t)v6)+ 8;
}

uint64_t sub_1C608D8A4()
{
  __int128 v1;
  int v2;
  int *v3;
  int v4;
  __n128 v5;
  _QWORD v6[2];
  int v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  int v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  int v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  LOBYTE(v4) = 1;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable vectorization of epilogue loops.";
  v5.n128_u64[1] = 39;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED82A738, "enable-epilogue-vectorization", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED82A738, &dword_1C475E000);
  LODWORD(v3) = 1;
  *(_QWORD *)&v1 = &v3;
  v4 = 1;
  v5.n128_u64[0] = (unint64_t)"When epilogue vectorization is enabled, and a value greater than 1 is specified, fo"
                                     "rces the given VF for all applicable epilogue loops.";
  v5.n128_u64[1] = 135;
  sub_1C4DB1928((uint64_t)&unk_1ED82A7F8, "epilogue-vectorization-force-VF", (int **)&v1, &v4, &v5);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED82A7F8, &dword_1C475E000);
  LODWORD(v3) = 16;
  *(_QWORD *)&v1 = &v3;
  v4 = 1;
  v5.n128_u64[0] = (unint64_t)"Only loops with vectorization factor equal to or larger than the specified value ar"
                                     "e considered for epilogue vectorization.";
  v5.n128_u64[1] = 123;
  sub_1C4DB1928((uint64_t)&unk_1ED82A8B8, "epilogue-vectorization-minimum-VF", (int **)&v1, &v4, &v5);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED82A8B8, &dword_1C475E000);
  LODWORD(v3) = 16;
  *(_QWORD *)&v1 = &v3;
  v4 = 1;
  v5.n128_u64[0] = (unint64_t)"Loops with a constant trip count that is smaller than this value are vectorized onl"
                                     "y if no scalar iteration overheads are incurred.";
  v5.n128_u64[1] = 131;
  sub_1C4DB1928((uint64_t)&unk_1ED82A978, "vectorizer-min-trip-count", (int **)&v1, &v4, &v5);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED82A978, &dword_1C475E000);
  LODWORD(v3) = 128;
  *(_QWORD *)&v1 = &v3;
  v4 = 1;
  v5.n128_u64[0] = (unint64_t)"The maximum allowed number of runtime memory checks with a vectorize(enable) pragma.";
  v5.n128_u64[1] = 84;
  sub_1C63DC6FC((int **)&v1, &v4, (__int128 *)&v5);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED82AA38, &dword_1C475E000);
  v4 = 0;
  v3 = &v4;
  v2 = 1;
  *(_QWORD *)&v1 = "Tail-folding and predication preferences over creating a scalar epilogue loop.";
  *((_QWORD *)&v1 + 1) = 78;
  v5.n128_u64[0] = (unint64_t)v6;
  v6[0] = "scalar-epilogue";
  v6[1] = 15;
  v7 = 0;
  v8 = "Don't tail-predicate loops, create scalar epilogue";
  v9 = 50;
  v10 = "predicate-else-scalar-epilogue";
  v11 = 30;
  v12 = 1;
  v13 = "prefer tail-folding, create scalar epilogue if tail folding fails.";
  v14 = 66;
  v15 = "predicate-dont-vectorize";
  v16 = 24;
  v17 = 2;
  v18 = "prefers tail-folding, don't attempt vectorization if tail-folding fails.";
  v19 = 72;
  v5.n128_u64[1] = 0x400000003;
  sub_1C63DC7D8(&v3, &v2, &v1, (uint64_t)&v5);
  if ((_QWORD *)v5.n128_u64[0] != v6)
    free((void *)v5.n128_u64[0]);
  __cxa_atexit((void (*)(void *))sub_1C63D1728, &qword_1EF8F61D8, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Maximize bandwidth when selecting vectorization factor which will be determined by "
                                     "the smallest type in loop.";
  v5.n128_u64[1] = 109;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED82AAF8, "vectorizer-maximize-bandwidth", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED82AAF8, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable vectorization on interleaved memory accesses in a loop";
  v5.n128_u64[1] = 61;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED82ABB8, "enable-interleaved-mem-accesses", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED82ABB8, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable vectorization on masked interleaved memory accesses in a loop";
  v5.n128_u64[1] = 68;
  sub_1C498EDF8((llvm::cl::Option *)&algn_1ED82AC39[63], "enable-masked-interleaved-mem-accesses", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &algn_1ED82AC39[63], &dword_1C475E000);
  LODWORD(v3) = 128;
  *(_QWORD *)&v1 = &v3;
  v4 = 1;
  v5.n128_u64[0] = (unint64_t)"We don't interleave loops with a estimated constant trip count below this number";
  v5.n128_u64[1] = 80;
  sub_1C4DB1928((uint64_t)&unk_1ED82AD38, "tiny-trip-count-interleave-threshold", (int **)&v1, &v4, &v5);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED82AD38, &dword_1C475E000);
  LODWORD(v3) = 0;
  *(_QWORD *)&v1 = &v3;
  v4 = 1;
  v5.n128_u64[0] = (unint64_t)"A flag that overrides the target's number of scalar registers.";
  v5.n128_u64[1] = 62;
  sub_1C4DB1928((uint64_t)&algn_1ED82ADBC[60], "force-target-num-scalar-regs", (int **)&v1, &v4, &v5);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &algn_1ED82ADBC[60], &dword_1C475E000);
  LODWORD(v3) = 0;
  *(_QWORD *)&v1 = &v3;
  v4 = 1;
  v5.n128_u64[0] = (unint64_t)"A flag that overrides the target's number of vector registers.";
  v5.n128_u64[1] = 62;
  sub_1C4DB1928((uint64_t)&unk_1ED82AEB8, "force-target-num-vector-regs", (int **)&v1, &v4, &v5);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED82AEB8, &dword_1C475E000);
  LODWORD(v3) = 0;
  *(_QWORD *)&v1 = &v3;
  v4 = 1;
  v5.n128_u64[0] = (unint64_t)"A flag that overrides the target's max interleave factor for scalar loops.";
  v5.n128_u64[1] = 74;
  sub_1C4DB1928((uint64_t)&unk_1ED82AF78, "force-target-max-scalar-interleave", (int **)&v1, &v4, &v5);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED82AF78, &dword_1C475E000);
  LODWORD(v3) = 0;
  *(_QWORD *)&v1 = &v3;
  v4 = 1;
  v5.n128_u64[0] = (unint64_t)"A flag that overrides the target's max interleave factor for vectorized loops.";
  v5.n128_u64[1] = 78;
  sub_1C4DB1928((uint64_t)&unk_1ED82B038, "force-target-max-vector-interleave", (int **)&v1, &v4, &v5);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED82B038, &dword_1C475E000);
  LODWORD(v3) = 0;
  *(_QWORD *)&v1 = &v3;
  v4 = 1;
  v5.n128_u64[0] = (unint64_t)"A flag that overrides the target's expected cost for an instruction to a single con"
                                     "stant value. Mostly useful for getting consistent testing.";
  v5.n128_u64[1] = 141;
  sub_1C4DB1928((uint64_t)&unk_1ED82B0F8, "force-target-instruction-cost", (int **)&v1, &v4, &v5);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED82B0F8, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Pretend that scalable vectors are supported, even if the target does not support th"
                                     "em. This flag should only be used for testing.";
  v5.n128_u64[1] = 129;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED82B1B8, "force-target-supports-scalable-vectors", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED82B1B8, &dword_1C475E000);
  LODWORD(v3) = 20;
  *(_QWORD *)&v1 = &v3;
  v4 = 1;
  v5.n128_u64[0] = (unint64_t)"The cost of a loop that is considered 'small' by the interleaver.";
  v5.n128_u64[1] = 65;
  sub_1C63DCB00((int **)&v1, &v4, (__int128 *)&v5);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED82B278, &dword_1C475E000);
  LOBYTE(v4) = 1;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable the use of the block frequency analysis to access PGO heuristics minimizing "
                                     "code growth in cold regions and being more aggressive in hot regions.";
  v5.n128_u64[1] = 152;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED82B338, "loop-vectorize-with-block-frequency", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED82B338, &dword_1C475E000);
  LOBYTE(v4) = 1;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable runtime interleaving until load/store ports are saturated";
  v5.n128_u64[1] = 64;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED82B3F8, "enable-loadstore-runtime-interleave", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED82B3F8, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable interleaving for loops with small iteration counts that contain scalar reduc"
                                     "tions to expose ILP.";
  v5.n128_u64[1] = 103;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED82B4B8, "interleave-small-loop-scalar-reduction", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED82B4B8, &dword_1C475E000);
  LODWORD(v3) = 1;
  *(_QWORD *)&v1 = &v3;
  v4 = 1;
  v5.n128_u64[0] = (unint64_t)"Max number of stores to be predicated behind an if.";
  v5.n128_u64[1] = 51;
  sub_1C4DB1928((uint64_t)&unk_1ED82B578, "vectorize-num-stores-pred", (int **)&v1, &v4, &v5);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED82B578, &dword_1C475E000);
  LOBYTE(v4) = 1;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Count the induction variable only once when interleaving";
  v5.n128_u64[1] = 56;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED82B638, "enable-ind-var-reg-heur", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED82B638, &dword_1C475E000);
  LOBYTE(v4) = 1;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable if predication of stores during vectorization.";
  v5.n128_u64[1] = 53;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1EF8F5D58, "enable-cond-stores-vec", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F5D58, &dword_1C475E000);
  LODWORD(v3) = 2;
  *(_QWORD *)&v1 = &v3;
  v4 = 1;
  v5.n128_u64[0] = (unint64_t)"The maximum interleave count to use when interleaving a scalar reduction in a nested loop.";
  v5.n128_u64[1] = 90;
  sub_1C4DB1928((uint64_t)&unk_1EF8F5E18, "max-nested-scalar-reduction-interleave", (int **)&v1, &v4, &v5);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1EF8F5E18, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Prefer in-loop vector reductions, overriding the targets preference.";
  v5.n128_u64[1] = 68;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1EF8F5ED8, "prefer-inloop-reductions", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F5ED8, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable the vectorisation of loops with in-order (strict) FP reductions";
  v5.n128_u64[1] = 70;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1EF8F5F98, "force-ordered-reductions", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F5F98, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Prefer predicating a reduction operation over an after loop select.";
  v5.n128_u64[1] = 67;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1EF8F6058, "prefer-predicated-reduction-select", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F6058, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable VPlan-native vectorization path with support for outer loop vectorization.";
  v5.n128_u64[1] = 81;
  sub_1C498EDF8((llvm::cl::Option *)&EnableVPlanNativePath, "enable-vplan-native-path", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &EnableVPlanNativePath, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable VPlan-native vectorization path predicator with support for outer loop vectorization.";
  v5.n128_u64[1] = 92;
  sub_1C498EDF8((llvm::cl::Option *)&EnableVPlanPredication, "enable-vplan-predication", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &EnableVPlanPredication, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Build VPlan for every supported loop nest in the function and bail out right after "
                                     "the build (stress test the VPlan H-CFG construction in the VPlan-native vectorization path).";
  v5.n128_u64[1] = 175;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1EF8F6118, "vplan-build-stress-test", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F6118, &dword_1C475E000);
  LOBYTE(v4) = 1;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable loop interleaving in Loop vectorization passes";
  v5.n128_u64[1] = 53;
  sub_1C498EDF8((llvm::cl::Option *)&llvm::EnableLoopInterleaving, "interleave-loops", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::EnableLoopInterleaving, &dword_1C475E000);
  LOBYTE(v4) = 1;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Run the Loop vectorization passes";
  v5.n128_u64[1] = 33;
  sub_1C498EDF8((llvm::cl::Option *)&llvm::EnableLoopVectorization, "vectorize-loops", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::EnableLoopVectorization, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Use dot format instead of plain text when dumping VPlans";
  v5.n128_u64[1] = 56;
  sub_1C498EDF8((llvm::cl::Option *)&PrintVPlansInDotFormat, "vplan-print-in-dot-format", (_BYTE **)&v1, &v3, &v5);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &PrintVPlansInDotFormat, &dword_1C475E000);
}

void llvm::slpvectorizer::BoUpSLP::~BoUpSLP(llvm::slpvectorizer::BoUpSLP *this)
{
  int v2;
  uint64_t ****v3;
  uint64_t v4;
  uint64_t ****v5;
  int v6;
  uint64_t ****v7;
  uint64_t v8;
  uint64_t ****v9;
  uint64_t ***v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t ***v22;
  uint64_t v23;
  _QWORD **v24;
  uint64_t v25;
  uint64_t ****v26;
  uint64_t ****v27;
  uint64_t ****v28;
  uint64_t v29;
  uint64_t ****v30;
  uint64_t ***v31;
  uint64_t ****v32;
  uint64_t **v33;
  uint64_t **v34;
  uint64_t *v35;
  _QWORD *v36;
  void (**v37)(_QWORD *);
  char *v38;
  void *v39;
  char *v40;
  char *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[3];
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  _QWORD v50[7];

  v50[6] = *MEMORY[0x1E0C80C00];
  v48 = (char *)v50;
  v49 = 0x200000000;
  v2 = *((_DWORD *)this + 264);
  v3 = (uint64_t ****)*((_QWORD *)this + 131);
  v4 = *((unsigned int *)this + 266);
  v5 = &v3[v4];
  v6 = *((_DWORD *)this + 266);
  v7 = v5;
  if (v2)
  {
    if ((_DWORD)v4)
    {
      v8 = 8 * v4;
      v7 = (uint64_t ****)*((_QWORD *)this + 131);
      while (((unint64_t)*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v7;
        v8 -= 8;
        if (!v8)
        {
          v6 = *((_DWORD *)this + 266);
          v7 = &v3[v4];
          goto LABEL_9;
        }
      }
      v6 = *((_DWORD *)this + 266);
    }
    else
    {
      v6 = 0;
      v7 = (uint64_t ****)*((_QWORD *)this + 131);
    }
  }
LABEL_9:
  v9 = &v3[v6];
  if (v7 == v9)
    goto LABEL_48;
  do
  {
    v10 = *v7;
    v11 = *((_DWORD *)*v7 + 5);
    if ((v11 & 0x40000000) != 0)
    {
      v13 = (uint64_t *)*(v10 - 1);
      v12 = v11 & 0x7FFFFFF;
    }
    else
    {
      v12 = v11 & 0x7FFFFFF;
      v13 = (uint64_t *)&v10[-4 * v12];
    }
    v14 = &v13[4 * v12];
    if (v12)
    {
      do
      {
        v43 = 0;
        v15 = *v13;
        if (*(unsigned __int8 *)(*v13 + 16) <= 0x1Bu)
          v15 = 0;
        v43 = v15;
        if (v15)
        {
          v44 = 0;
          v45 = v15;
          if ((sub_1C61DB414((uint64_t *)this + 131, &v45, &v44) & 1) == 0)
          {
            v16 = *(_QWORD *)(v43 + 8);
            if (v16)
            {
              v17 = *(_QWORD *)(v16 + 8);
              if (v17)
              {
                while (*(_QWORD *)(v17 + 24) == *(_QWORD *)(v16 + 24))
                {
                  v16 = *(_QWORD *)(v16 + 8);
                  v17 = *(_QWORD *)(v17 + 8);
                  if (!v17)
                    goto LABEL_24;
                }
              }
              else
              {
LABEL_24:
                if (llvm::wouldInstructionBeTriviallyDead(v43, *((uint64_t **)this + 243)))
                {
                  v18 = v49;
                  if (v49 >= HIDWORD(v49))
                  {
                    sub_1C578EDF4((unsigned int *)&v48, &v43);
                  }
                  else
                  {
                    v19 = v43;
                    v20 = &v48[24 * v49];
                    *(_QWORD *)v20 = 6;
                    *((_QWORD *)v20 + 1) = 0;
                    *((_QWORD *)v20 + 2) = v19;
                    if (v19 != -8192 && v19 != -4096 && v19)
                    {
                      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v20);
                      v18 = v49;
                    }
                    LODWORD(v49) = v18 + 1;
                  }
                }
              }
            }
          }
        }
        v13 += 4;
      }
      while (v13 != v14);
      v11 = *((_DWORD *)v10 + 5);
    }
    if ((v11 & 0x40000000) != 0)
    {
      v22 = (uint64_t ***)*(v10 - 1);
      v21 = v11 & 0x7FFFFFF;
      if (!v21)
        goto LABEL_39;
    }
    else
    {
      v21 = v11 & 0x7FFFFFF;
      v22 = &v10[-4 * v21];
      if (!v21)
        goto LABEL_39;
    }
    v23 = 32 * v21;
    v24 = v22 + 2;
    do
    {
      if (*(v24 - 2))
      {
        **v24 = *(v24 - 1);
        v25 = (uint64_t)*(v24 - 1);
        if (v25)
          *(_QWORD *)(v25 + 16) = *v24;
      }
      *(v24 - 2) = 0;
      v24 += 4;
      v23 -= 32;
    }
    while (v23);
LABEL_39:
    v26 = v7 + 1;
    v7 = v5;
    if (v26 != v5)
    {
      v7 = v26;
      while (((unint64_t)*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v7 == v5)
        {
          v7 = v5;
          break;
        }
      }
    }
  }
  while (v7 != v9);
  v2 = *((_DWORD *)this + 264);
  v3 = (uint64_t ****)*((_QWORD *)this + 131);
  v4 = *((unsigned int *)this + 266);
LABEL_48:
  v27 = &v3[v4];
  if (v2)
  {
    if ((_DWORD)v4)
    {
      v29 = 8 * v4;
      v28 = v3;
      while (((unint64_t)*v28 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v28;
        v29 -= 8;
        if (!v29)
          goto LABEL_54;
      }
    }
    else
    {
      v28 = v3;
    }
  }
  else
  {
LABEL_54:
    v28 = &v3[v4];
  }
  v30 = &v3[v4];
LABEL_56:
  while (v28 != v30)
  {
    v32 = v28 + 1;
    v31 = *v28;
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)((*v28)[5] + 5), *v28);
    v33 = v31[3];
    v34 = v31[4];
    *v34 = (uint64_t *)v33;
    v33[1] = (uint64_t *)v34;
    v31[3] = 0;
    v31[4] = 0;
    llvm::Value::deleteValue((llvm::Value *)v31);
    v28 = v27;
    if (v32 != v27)
    {
      v28 = v32;
      while (((unint64_t)*v28 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v28 == v27)
        {
          v28 = v27;
          goto LABEL_56;
        }
      }
    }
  }
  v35 = (uint64_t *)*((_QWORD *)this + 243);
  v47 = 0;
  llvm::RecursivelyDeleteTriviallyDeadInstructions((unsigned int *)&v48, v35, 0, (uint64_t)v46);
  v36 = v47;
  if (v47 == v46)
  {
    v37 = (void (**)(_QWORD *))(v46[0] + 32);
    v36 = v46;
    goto LABEL_66;
  }
  if (v47)
  {
    v37 = (void (**)(_QWORD *))(*v47 + 40);
LABEL_66:
    (*v37)(v36);
  }
  sub_1C56E89BC(&v48);
  sub_1C6176BF8((_QWORD *)this + 268);
  v38 = (char *)*((_QWORD *)this + 251);
  if (v38 != (char *)this + 2024)
    free(v38);
  sub_1C63E0848((_QWORD *)this + 232);
  sub_1C5408A20((_QWORD *)this + 226);
  sub_1C6176BF8((_QWORD *)this + 220);
  v39 = (void *)*((_QWORD *)this + 185);
  if (v39 != *((void **)this + 184))
    free(v39);
  v40 = (char *)*((_QWORD *)this + 134);
  if (v40 != (char *)this + 1088)
    free(v40);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 131), 8);
  if ((*((_BYTE *)this + 912) & 1) == 0)
    MEMORY[0x1CAA32FB4](*((_QWORD *)this + 115), 8);
  v41 = (char *)*((_QWORD *)this + 95);
  if (v41 != (char *)this + 776)
    free(v41);
  if ((*((_BYTE *)this + 416) & 1) == 0)
    MEMORY[0x1CAA32FB4](*((_QWORD *)this + 53), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 48), 8);
  v42 = (void *)*((_QWORD *)this + 29);
  if (v42 != *((void **)this + 28))
    free(v42);
  if ((*((_BYTE *)this + 152) & 1) == 0)
    MEMORY[0x1CAA32FB4](*((_QWORD *)this + 20), 8);
  if ((*((_BYTE *)this + 80) & 1) == 0)
    MEMORY[0x1CAA32FB4](*((_QWORD *)this + 11), 8);
  sub_1C63E2510((char **)this);
}

void llvm::slpvectorizer::BoUpSLP::findReusedOrderedScalars(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int8x8_t *v30;
  uint64_t v31;
  int8x8_t v32;
  uint8x8_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char v39;
  unsigned int v40;
  _DWORD *v41;
  char v42;
  unint64_t v43;
  void *v44;
  int v45;
  _QWORD *v46;
  unsigned int v47;
  int v48;
  void **v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[48];
  void *v54;
  uint64_t v55;
  _QWORD v56[4];

  v56[2] = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned int *)(a2 + 8);
  v54 = v56;
  v55 = 0x400000000;
  sub_1C4893E04((char *)&v54, v6, v6);
  v51 = v53;
  v52 = 0xC00000000;
  if (v6 >= 0x3A)
  {
    v7 = operator new();
    *(_QWORD *)v7 = v7 + 16;
    *(_QWORD *)(v7 + 8) = 0x600000000;
    sub_1C4765AA4((char *)v7, (v6 + 63) >> 6, 0);
    *(_DWORD *)(v7 + 64) = v6;
    v49 = (void **)v7;
  }
  else
  {
    v7 = (v6 << 58) | 1;
    v49 = (void **)v7;
    if (!(_DWORD)v6)
      goto LABEL_49;
  }
  v8 = 0;
  v9 = 0;
  v10 = a1 + 80;
  do
  {
    v11 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v8);
    v12 = *(unsigned __int8 *)(v11 + 16) - 60;
    v13 = v12 > 0x20;
    v14 = (1 << v12) & 0x120000001;
    if (!v13 && v14 != 0)
    {
      v50 = 0;
      v16 = sub_1C61B5A68(v10, v11, &v50);
      if ((v16 & 1) != 0)
      {
        v17 = *(_QWORD *)(v50 + 8);
        if (v17)
        {
          if (v9)
          {
            if (v9 != v17)
              goto LABEL_73;
          }
          else
          {
            v9 = *(_QWORD *)(v50 + 8);
          }
          v18 = *(char **)v9;
          v19 = *(unsigned int *)(v9 + 8);
          if ((_DWORD)v19)
          {
            v20 = 8 * v19;
            v21 = *(char **)v9;
            v22 = &v18[8 * v19];
            while (*(_QWORD *)v21 != v11)
            {
              v21 += 8;
              v20 -= 8;
              if (!v20)
              {
                v21 = v22;
                break;
              }
            }
          }
          else
          {
            v21 = *(char **)v9;
          }
          v23 = v21 - v18;
          v24 = v23 >> 3;
          if (v6 <= (v23 >> 3))
          {
LABEL_73:
            v39 = 0;
            *(_BYTE *)a3 = 0;
            goto LABEL_68;
          }
          v25 = (v23 >> 3);
          v26 = v54;
          v27 = *((unsigned int *)v54 + v24);
          if ((_DWORD)v27 != (_DWORD)v6)
          {
            if (v8 != v25)
              goto LABEL_9;
            if ((v7 & 1) != 0)
            {
              v7 = ((2 * ~((1 << v27) | (-1 << (v7 >> 58)))) | 0xFC00000000000000) & v7 | 1;
              v49 = (void **)v7;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)v7 + ((v27 >> 3) & 0x1FFFFFF8)) &= ~(1 << v27);
            }
          }
          v26[v25] = v8;
          if ((v7 & 1) != 0)
          {
            v7 = v7 & 0xFC00000000000000 | (2
                                            * (((v7 >> 1) & ~(-1 << (v7 >> 58)) | (1 << v8)) & ~(-1 << (v7 >> 58)))) | 1;
            v49 = (void **)v7;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v7 + 8 * (v8 >> 6)) |= 1 << v8;
          }
        }
      }
    }
LABEL_9:
    ++v8;
  }
  while (v8 != v6);
  if (!v9)
    goto LABEL_49;
  if ((v7 & 1) != 0)
  {
    v34 = (uint8x8_t)vcnt_s8((int8x8_t)((v7 >> 1) & ~(-1 << (v7 >> 58))));
    v34.i16[0] = vaddlv_u8(v34);
    v29 = v34.i32[0];
    goto LABEL_39;
  }
  v28 = *(unsigned int *)(v7 + 8);
  if (!(_DWORD)v28)
    goto LABEL_40;
  v29 = 0;
  v30 = *(int8x8_t **)v7;
  v31 = 8 * v28;
  do
  {
    v32 = *v30++;
    v33 = (uint8x8_t)vcnt_s8(v32);
    v33.i16[0] = vaddlv_u8(v33);
    v29 += v33.i32[0];
    v31 -= 8;
  }
  while (v31);
LABEL_39:
  if (v29 <= 1)
  {
LABEL_40:
    if (*(_DWORD *)(v9 + 8) != 2)
    {
LABEL_49:
      v39 = 0;
      *(_BYTE *)a3 = 0;
      goto LABEL_68;
    }
  }
  v35 = 0;
  v36 = v54;
  while (1)
  {
    v37 = *((unsigned int *)v54 + v35);
    if ((_DWORD)v37 != (_DWORD)v6 && v35 != v37)
      break;
    if (v6 == ++v35)
    {
      LODWORD(v55) = 0;
      *(_QWORD *)a3 = a3 + 16;
      *(_QWORD *)(a3 + 8) = 0x400000000;
LABEL_67:
      v39 = 1;
      goto LABEL_68;
    }
  }
  v40 = 0;
  v41 = v54;
  do
  {
    v42 = v40;
    v43 = (v7 >> 1) & ~(-1 << (v7 >> 58));
    if ((v7 & 1) == 0)
    {
      v42 = v40 & 0x3F;
      v43 = *(_QWORD *)(*(_QWORD *)v7 + 8 * (v40 >> 6));
    }
    if (((v43 >> v42) & 1) != 0)
    {
      ++v40;
    }
    else
    {
      if (*v41 == (_DWORD)v6)
        *v41 = v40++;
      ++v41;
    }
  }
  while (v40 < v6);
  v44 = (void *)(a3 + 16);
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x400000000;
  v45 = v55;
  v39 = 1;
  if ((_DWORD)v55 && &v54 != (void **)a3)
  {
    if (v36 == v56)
    {
      if (v55 < 5)
      {
        v46 = v56;
        v47 = v55;
        goto LABEL_64;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v55, 4);
      v47 = v55;
      if ((_DWORD)v55)
      {
        v46 = v54;
        v44 = *(void **)a3;
LABEL_64:
        memcpy(v44, v46, 4 * v47);
      }
      *(_DWORD *)(a3 + 8) = v45;
    }
    else
    {
      *(_QWORD *)a3 = v36;
      v48 = HIDWORD(v55);
      *(_DWORD *)(a3 + 8) = v45;
      *(_DWORD *)(a3 + 12) = v48;
      v54 = v56;
      HIDWORD(v55) = 0;
    }
    LODWORD(v55) = 0;
    goto LABEL_67;
  }
LABEL_68:
  *(_BYTE *)(a3 + 32) = v39;
  sub_1C4914448(&v49);
  if (v51 != v53)
    free(v51);
  if (v54 != v56)
    free(v54);
}

void llvm::slpvectorizer::BoUpSLP::getReorderingData(llvm::slpvectorizer::BoUpSLP *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v6;
  int v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  void *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD **v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  void *v31;
  _QWORD *v32;
  unsigned int v33;
  int v34;
  void *v35;
  uint64_t v36;
  _QWORD v37[3];

  v37[2] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 104))
    goto LABEL_2;
  v8 = *(_DWORD *)(a2 + 88);
  if (v8 != 2)
  {
    if (v8)
      goto LABEL_2;
    v9 = *(_QWORD *)(a2 + 384);
    v10 = *(unsigned __int8 *)(v9 + 16);
    v11 = (v10 - 60) > 0x20 || ((1 << (v10 - 60)) & 0x120000001) == 0;
    if (v11 && (!a3 || v10 != 90 && v10 != 61) || v9 != *(_QWORD *)(a2 + 392))
      goto LABEL_2;
    v12 = (void *)(a5 + 16);
    *(_QWORD *)a5 = a5 + 16;
    *(_QWORD *)(a5 + 8) = 0x400000000;
    v13 = *(_DWORD *)(a2 + 136);
    if (!v13 || a2 + 128 == a5)
    {
LABEL_18:
      v6 = 1;
      goto LABEL_3;
    }
    if (v13 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, *(unsigned int *)(a2 + 136), 4);
      v14 = *(_DWORD *)(a2 + 136);
      if (!v14)
        goto LABEL_17;
      v12 = *(void **)a5;
    }
    else
    {
      v14 = *(_DWORD *)(a2 + 136);
    }
    memcpy(v12, *(const void **)(a2 + 128), 4 * v14);
LABEL_17:
    *(_DWORD *)(a5 + 8) = v13;
    goto LABEL_18;
  }
  v16 = *(_QWORD *)(a2 + 384);
  if (v16)
  {
    if (*(_BYTE *)(v16 + 16) == 89 && v16 == *(_QWORD *)(a2 + 392))
    {
      v20 = *(uint64_t **)a2;
      v18 = *(unsigned int *)(a2 + 8);
LABEL_34:
      if ((_DWORD)v18)
      {
        v24 = 0;
        while (1)
        {
          v25 = v20[v24];
          if (v25)
          {
            if (*(_BYTE *)(v25 + 16) == 89 && *(_BYTE *)(**(_QWORD **)(v25 - 64) + 8) != 18)
              goto LABEL_66;
          }
          if (v18 == ++v24)
          {
            if ((int)v18 < 2)
              break;
            v26 = (_QWORD **)(v20 + 1);
            v27 = v18 - 1;
            while (**v26 == *(_QWORD *)*v20)
            {
              ++v26;
              if (!--v27)
                goto LABEL_44;
            }
            goto LABEL_66;
          }
        }
      }
LABEL_44:
      v35 = v37;
      v36 = 0x400000000;
      v28 = llvm::slpvectorizer::BoUpSLP::canReuseExtract(a1, v20, v18, a4, (uint64_t *)&v35);
      if ((_DWORD)v36)
        v29 = 1;
      else
        v29 = v28;
      if (v29 != 1)
      {
LABEL_63:
        if (v35 != v37)
          free(v35);
        if ((v29 & 1) != 0)
          return;
        goto LABEL_66;
      }
      if (!(_DWORD)v36)
      {
        *(_QWORD *)a5 = a5 + 16;
        *(_QWORD *)(a5 + 8) = 0x400000000;
        goto LABEL_62;
      }
      sub_1C608F2D4((uint64_t *)&v35);
      v30 = v36;
      v31 = (void *)(a5 + 16);
      *(_QWORD *)a5 = a5 + 16;
      *(_QWORD *)(a5 + 8) = 0x400000000;
      if (!(_DWORD)v30 || &v35 == (void **)a5)
        goto LABEL_62;
      if (v35 != v37)
      {
        *(_QWORD *)a5 = v35;
        v34 = HIDWORD(v36);
        *(_DWORD *)(a5 + 8) = v30;
        *(_DWORD *)(a5 + 12) = v34;
        v35 = v37;
        HIDWORD(v36) = 0;
        goto LABEL_56;
      }
      if (v30 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v30, 4);
        v33 = v36;
        if (!(_DWORD)v36)
          goto LABEL_55;
        v32 = v35;
        v31 = *(void **)a5;
      }
      else
      {
        v32 = v37;
        v33 = v30;
      }
      memcpy(v31, v32, 4 * v33);
LABEL_55:
      *(_DWORD *)(a5 + 8) = v30;
LABEL_56:
      LODWORD(v36) = 0;
LABEL_62:
      *(_BYTE *)(a5 + 32) = 1;
      goto LABEL_63;
    }
  }
  v18 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v18)
  {
    v19 = 0;
    v20 = *(uint64_t **)a2;
    v21 = 8 * v18;
    while (1)
    {
      v22 = *(unsigned __int8 *)(v20[v19 / 8] + 16);
      if ((v22 - 11) >= 2 && v22 != 89)
        break;
      v19 += 8;
      if (v21 == v19)
      {
        v23 = 0;
        while (*(_BYTE *)(v20[v23 / 8] + 16) != 89)
        {
          v23 += 8;
          if (v21 == v23)
            goto LABEL_66;
        }
        goto LABEL_34;
      }
    }
  }
LABEL_66:
  llvm::slpvectorizer::BoUpSLP::findReusedOrderedScalars((uint64_t)a1, a2, a5);
  if (!*(_BYTE *)(a5 + 32))
  {
LABEL_2:
    v6 = 0;
    *(_BYTE *)a5 = 0;
LABEL_3:
    *(_BYTE *)(a5 + 32) = v6;
  }
}

uint64_t llvm::slpvectorizer::BoUpSLP::canReuseExtract(llvm::slpvectorizer::BoUpSLP *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;

  if (a3)
  {
    v8 = 8 * a3;
    v9 = a2;
    while (1)
    {
      v10 = *(unsigned __int8 *)(*v9 + 16);
      if (v10 == 89 || v10 == 92)
        break;
      ++v9;
      v8 -= 8;
      if (!v8)
      {
        v9 = &a2[a3];
        break;
      }
    }
  }
  else
  {
    v9 = a2;
  }
  v11 = *v9;
  v12 = *(_DWORD *)(v11 + 20);
  if ((v12 & 0x40000000) != 0)
    v13 = *(uint64_t **)(v11 - 8);
  else
    v13 = (uint64_t *)(v11 - 32 * (v12 & 0x7FFFFFF));
  v14 = *v13;
  *((_DWORD *)a5 + 2) = 0;
  if (*(_BYTE *)(v11 + 16) == 92)
  {
    result = llvm::slpvectorizer::BoUpSLP::canMapToVector(a1, *(llvm::Type **)v14, (const llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 40) + 56) + 40) + 272));
    if (!(_DWORD)result)
      return result;
    if (*(_BYTE *)(v14 + 16) != 60 || (*(_WORD *)(v14 + 18) & 0x381) != 0)
      return 0;
    v16 = *(_QWORD *)(v14 + 8);
    if ((_DWORD)a3)
    {
      v17 = a3;
      do
      {
        if (!v16)
          return 0;
        v16 = *(_QWORD *)(v16 + 8);
        --v17;
      }
      while (v17);
    }
    if (v16)
      return 0;
  }
  else
  {
    LODWORD(result) = *(_DWORD *)(*(_QWORD *)v14 + 32);
  }
  if (a3 != result)
    return 0;
  sub_1C4893E04((char *)a5, a3, a3);
  if ((_DWORD)a3)
  {
    v18 = 0;
    v19 = *a5;
    v20 = 1;
    while (1)
    {
      v21 = a2[v18];
      v22 = *(unsigned __int8 *)(v21 + 16);
      if (v21)
        v23 = v22 >= 0x1C;
      else
        v23 = 0;
      if (!v23)
        goto LABEL_40;
      v24 = *(_DWORD *)(v21 + 20);
      if ((v24 & 0x40000000) != 0)
        v25 = *(_QWORD **)(v21 - 8);
      else
        v25 = (_QWORD *)(v21 - 32 * (v24 & 0x7FFFFFF));
      if (*v25 != v14)
      {
LABEL_47:
        result = 0;
        goto LABEL_50;
      }
      if (v22 == 89 && *(unsigned __int8 *)(*(_QWORD *)(v21 - 32) + 16) - 11 < 2)
        goto LABEL_40;
      v26 = sub_1C6097834(v21);
      if (!HIDWORD(v26))
        goto LABEL_47;
      if (v18 == v26)
      {
        if (*(_DWORD *)(v19 + 4 * v18) != (_DWORD)a3)
          goto LABEL_47;
        *(_DWORD *)(v19 + 4 * v18) = v18;
LABEL_40:
        if (a3 == ++v18)
        {
          if ((v20 & 1) != 0)
            break;
          return 0;
        }
      }
      else
      {
        if (v26 >= a3)
          goto LABEL_47;
        v27 = v26;
        if (*(_DWORD *)(v19 + 4 * v26) != (_DWORD)a3)
          goto LABEL_47;
        v20 = 0;
        result = 0;
        *(_DWORD *)(v19 + 4 * v27) = v18;
        if (a3 - 1 == v18++)
          return result;
      }
    }
  }
  result = 1;
LABEL_50:
  *((_DWORD *)a5 + 2) = 0;
  return result;
}

void ***sub_1C608F2D4(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  void **v17;
  void **v18;

  v2 = *((unsigned int *)a1 + 2);
  if (v2 >= 0x3A)
  {
    v4 = operator new();
    sub_1C496F858(v4, v2, 1);
    v3 = operator new();
    *(_QWORD *)v3 = v3 + 16;
    *(_QWORD *)(v3 + 8) = 0x600000000;
    sub_1C4765AA4((char *)v3, (v2 + 63) >> 6, 0);
    *(_DWORD *)(v3 + 64) = v2;
    v17 = (void **)v3;
    v18 = (void **)v4;
  }
  else
  {
    v3 = (v2 << 58) | 1;
    v4 = v3 | (2 * ~(-1 << v2));
    v17 = (void **)v3;
    v18 = (void **)v4;
    if (!(_DWORD)v2)
      goto LABEL_12;
  }
  v5 = 0;
  v6 = *a1;
  do
  {
    v7 = *(unsigned int *)(v6 + 4 * v5);
    if (v7 >= v2)
    {
      if ((v3 & 1) != 0)
      {
        v3 = v3 & 0xFC00000000000000 | (2 * (((v3 >> 1) & ~(-1 << (v3 >> 58)) | (1 << v5)) & ~(-1 << (v3 >> 58)))) | 1;
        v17 = (void **)v3;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)v3 + 8 * (v5 >> 6)) |= 1 << v5;
      }
    }
    else if ((v4 & 1) != 0)
    {
      v4 = ((2 * ~((1 << v7) | (-1 << (v4 >> 58)))) | 0xFC00000000000000) & v4 | 1;
      v18 = (void **)v4;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)v4 + ((v7 >> 3) & 0x1FFFFFF8)) &= ~(1 << v7);
    }
    ++v5;
  }
  while (v2 != v5);
LABEL_12:
  if ((v3 & 1) != 0)
  {
    if (((v3 >> 1) & ~(-1 << (v3 >> 58))) == 0)
      goto LABEL_31;
  }
  else
  {
    v8 = *(unsigned int *)(v3 + 8);
    if (!(_DWORD)v8)
      goto LABEL_31;
    v9 = *(_QWORD **)v3;
    v10 = 8 * v8;
    while (!*v9)
    {
      ++v9;
      v10 -= 8;
      if (!v10)
        goto LABEL_31;
    }
  }
  if ((v4 & 1) == 0)
  {
    v11 = sub_1C476B7EC(v4);
    if ((v3 & 1) != 0)
      goto LABEL_21;
LABEL_27:
    v15 = sub_1C476B7EC(v3);
    goto LABEL_30;
  }
  v14 = __clz(__rbit64((v4 >> 1) & ~(-1 << (v4 >> 58))));
  if (((v4 >> 1) & ~(-1 << (v4 >> 58))) != 0)
    v11 = v14;
  else
    v11 = -1;
  if ((v3 & 1) == 0)
    goto LABEL_27;
LABEL_21:
  v12 = (v3 >> 1) & ~(-1 << (v3 >> 58));
  if (v12)
  {
    v13 = __clz(__rbit64(v12));
    do
    {
      *(_DWORD *)(*a1 + 4 * v13) = v11;
      v11 = sub_1C49143F4((unint64_t *)&v18, v11);
      v15 = sub_1C49143F4((unint64_t *)&v17, v13);
LABEL_30:
      v13 = v15;
    }
    while ((v15 & 0x80000000) == 0);
  }
LABEL_31:
  sub_1C4914448(&v17);
  return sub_1C4914448(&v18);
}

uint64_t *llvm::slpvectorizer::BoUpSLP::reorderTopToBottom(uint64_t **this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  _DWORD *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  char *v25;
  void **v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  int v32;
  _BYTE *v33;
  uint64_t v34;
  char *v35;
  _BYTE *v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  char *v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int *v45;
  _DWORD *v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  int v51;
  _BYTE *v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  BOOL v76;
  uint64_t v77;
  BOOL v78;
  llvm::Type *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  llvm::Type *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v100;
  void **v101[2];
  unsigned int v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106[2];
  unsigned int v107;
  uint64_t v108[2];
  unsigned int v109;
  void *v110;
  uint64_t v111;
  _BYTE v112[16];
  int v113;
  void *v114;
  unint64_t v115;
  _BYTE v116[16];
  int v117;
  void *__src;
  uint64_t v119;
  _BYTE v120[16];
  char *v121;
  unint64_t v122;
  _DWORD v123[12];
  void **v124;
  void **v125;
  uint64_t v126;
  int v127;
  _BYTE v128[32];
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v108[0] = 0;
  v108[1] = 0;
  v109 = 0;
  v106[0] = 0;
  v106[1] = 0;
  v107 = 0;
  v4 = *this;
  v5 = *((unsigned int *)this + 2);
  if ((_DWORD)v5)
  {
    v7 = &v4[v5];
    do
    {
      llvm::slpvectorizer::BoUpSLP::getReorderingData((llvm::slpvectorizer::BoUpSLP *)this, *v4, 1, a4, (uint64_t)&v124);
      if (v128[0])
      {
        v8 = dword_1ED82BD78;
        if (*v4)
          v9 = dword_1ED82BD78 == 0;
        else
          v9 = 1;
        if (!v9)
        {
          v10 = *v4;
          while (*(_DWORD *)(v10 + 176) == 1)
          {
            v10 = **(_QWORD **)(v10 + 168);
            if (!*(_DWORD *)(v10 + 88) && *(_QWORD *)(v10 + 384) != *(_QWORD *)(v10 + 392) && *(_DWORD *)(v10 + 200))
              goto LABEL_16;
            if (!--v8)
              break;
          }
        }
        LODWORD(v114) = *(_DWORD *)(*v4 + 8);
        v11 = sub_1C63E268C((uint64_t)v108, (int *)&v114);
        v121 = (char *)*v4;
        sub_1C518D044((_QWORD *)v11 + 1, (uint64_t *)&v121);
        if (*(_DWORD *)(*v4 + 88))
        {
          v114 = (void *)*v4;
          sub_1C63E25FC((uint64_t)&v121, (uint64_t)v106, (uint64_t *)&v114, (uint64_t)&v124);
        }
LABEL_16:
        if (v128[0] && v124 != (void **)&v126)
          free(v124);
      }
      ++v4;
    }
    while (v4 != v7);
    v4 = *this;
  }
  v12 = *(_DWORD *)(*v4 + 8);
  if (v12 >= 2)
  {
    v13 = v108[0];
    v100 = v108[0];
    do
    {
      if (v109)
      {
        v14 = (v109 - 1) & (37 * v12);
        v15 = v13 + 56 * v14;
        v16 = *(_DWORD *)v15;
        if (v12 == *(_DWORD *)v15)
          goto LABEL_30;
        v17 = 1;
        while (v16 != -1)
        {
          v18 = v14 + v17++;
          v14 = v18 & (v109 - 1);
          v15 = v13 + 56 * v14;
          v16 = *(_DWORD *)v15;
          if (v12 == *(_DWORD *)v15)
            goto LABEL_30;
        }
      }
      v15 = v13 + 56 * v109;
LABEL_30:
      if (v15 != v13 + 56 * v109)
      {
        v19 = *(uint64_t **)(v15 + 32);
        v20 = *(uint64_t **)(v15 + 40);
        v101[0] = 0;
        v101[1] = 0;
        v102 = 0;
        v104 = 0;
        v105 = 0;
        v103 = 0;
        v124 = (void **)v128;
        v125 = (void **)v128;
        v126 = 4;
        v127 = 0;
        if (v20 == v19)
          goto LABEL_162;
        while (2)
        {
          v58 = *v19;
          if (*(_DWORD *)(*v19 + 104))
            goto LABEL_100;
          v21 = *(_DWORD *)(v58 + 88);
          if (v21 == 2)
          {
            v121 = 0;
            v22 = v106[0];
            v23 = v107;
            v24 = sub_1C61DBB84(v106[0], v107, v58, &v121);
            v25 = v121;
            if (!v24)
              v25 = (char *)(v22 + 40 * v23);
            v26 = (void **)(v25 + 8);
            if (*(_DWORD *)(v58 + 88))
            {
LABEL_46:
              v114 = v116;
              v115 = 0x400000000;
              v30 = *((unsigned int *)v26 + 2);
              if ((_DWORD)v30)
                v31 = &v114 != v26;
              else
                v31 = 0;
              if (!v31)
              {
                v32 = 0;
                v117 = 0;
                v121 = (char *)v123;
                v122 = 0x400000000;
LABEL_58:
                v123[4] = v32;
                v38 = sub_1C63DE7A0((uint64_t)v101, (uint64_t)&v121);
                ++*(_DWORD *)(v38 + 32);
                if (v121 != (char *)v123)
                  free(v121);
                v39 = v114;
                if (v114 == v116)
                  goto LABEL_100;
LABEL_61:
                free(v39);
LABEL_100:
                if (++v19 == v20)
                {
                  if (v103 != v104)
                  {
                    v59 = *v103;
                    v60 = *((unsigned int *)v103 + 2);
                    v61 = v103 + 5;
                    if (v103 + 5 == v104)
                    {
LABEL_112:
                      if (v60)
                      {
                        v121 = (char *)v123;
                        v122 = 0xC00000000;
                        if (v60 >= 0xDuLL)
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, (uint64_t)v123, v60, 4);
                          v64 = v122;
                          v65 = v121;
                        }
                        else
                        {
                          v64 = 0;
                          v65 = (char *)v123;
                        }
                        memset(&v65[4 * v64], 255, 4 * v60);
                        LODWORD(v122) = v122 + v60;
                        v66 = 0;
                        do
                        {
                          *(_DWORD *)&v65[4 * *(unsigned int *)(v59 + 4 * v66)] = v66;
                          ++v66;
                        }
                        while (v60 != v66);
                        v114 = v116;
                        v115 = 0xC00000000;
                        sub_1C4893E04((char *)&v114, v60, -1);
                        v67 = 0;
                        v68 = (char *)v114;
                        do
                        {
                          v69 = *(_DWORD *)(v59 + v67);
                          if (v69 >= v60)
                            v69 = -1;
                          *(_DWORD *)&v68[v67] = v69;
                          v67 += 4;
                        }
                        while (4 * v60 != v67);
                        v70 = *((unsigned int *)this + 2);
                        if ((_DWORD)v70)
                        {
                          v71 = *this;
                          v72 = (uint64_t)&(*this)[v70];
                          do
                          {
                            v73 = *v71;
                            if (*(_DWORD *)(*v71 + 8) == v12)
                            {
                              if (*(_DWORD *)(v73 + 88)
                                || ((v74 = *(_QWORD *)(v73 + 384),
                                     v75 = *(unsigned __int8 *)(v74 + 16) - 60,
                                     v76 = v75 > 0x20,
                                     v77 = (1 << v75) & 0x160000003,
                                     !v76)
                                  ? (v78 = v77 == 0)
                                  : (v78 = 1),
                                    v78 || v74 != *(_QWORD *)(v73 + 392)))
                              {
                                v79 = (llvm::Type *)v121;
                                v80 = *(unsigned int *)(v73 + 216);
                                if ((_DWORD)v80)
                                {
                                  v81 = *(_QWORD *)(v73 + 208);
                                  v82 = 80 * v80;
                                  do
                                  {
                                    sub_1C6090290(v81, v79);
                                    v81 += 80;
                                    v82 -= 80;
                                  }
                                  while (v82);
                                  v73 = *v71;
                                  v79 = (llvm::Type *)v121;
                                }
                                sub_1C6090290(v73, v79);
                              }
                              else
                              {
                                sub_1C60900D8((uint64_t *)(v73 + 128), (int *)v121, v122);
                                v88 = *v71;
                                v89 = *(unsigned __int8 *)(*(_QWORD *)(*v71 + 384) + 16);
                                if (v89 == 90 || v89 == 61)
                                {
                                  v90 = *(unsigned int *)(v88 + 216);
                                  if ((_DWORD)v90)
                                  {
                                    v91 = (llvm::Type *)v121;
                                    v92 = *(_QWORD *)(v88 + 208);
                                    v93 = 80 * v90;
                                    do
                                    {
                                      sub_1C6090290(v92, v91);
                                      v92 += 80;
                                      v93 -= 80;
                                    }
                                    while (v93);
                                  }
                                }
                              }
                              if (*(_DWORD *)(*v71 + 104))
                              {
                                __src = v120;
                                v119 = 0x400000000;
                                sub_1C60900D8((uint64_t *)&__src, (int *)v114, v115);
                                v110 = v112;
                                v83 = (unsigned int *)__src;
                                v84 = v119;
                                v111 = 0xC00000000;
                                if ((_DWORD)v119)
                                {
                                  if (v119 >= 0xD)
                                  {
                                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v110, (uint64_t)v112, v119, 4);
                                    v85 = v111;
                                    v86 = v110;
                                  }
                                  else
                                  {
                                    v85 = 0;
                                    v86 = v112;
                                  }
                                  memset(&v86[4 * v85], 255, 4 * v84);
                                  v87 = 0;
                                  LODWORD(v111) = v111 + v84;
                                  do
                                  {
                                    *(_DWORD *)&v86[4 * v83[v87]] = v87;
                                    ++v87;
                                  }
                                  while (v84 != v87);
                                }
                                sub_1C60904B8(&v110, *(int **)(*v71 + 96), *(unsigned int *)(*v71 + 104));
                                sub_1C6090610((_DWORD *)(*v71 + 96), (uint64_t)&v110);
                                if (v110 != v112)
                                  free(v110);
                                if (__src != v120)
                                  free(__src);
                              }
                            }
                            else if (*(_DWORD *)(v73 + 104) == v12)
                            {
                              sub_1C6090004(v73 + 96, (int *)v121);
                            }
                            ++v71;
                          }
                          while (v71 != (uint64_t *)v72);
                          v68 = (char *)v114;
                        }
                        if (v68 != v116)
                          free(v68);
                        if (v121 != (char *)v123)
                          free(v121);
                      }
                      goto LABEL_162;
                    }
                    v62 = *((_DWORD *)v103 + 8);
                    while (2)
                    {
                      v63 = *((_DWORD *)v61 + 8);
                      if (v62 < v63)
                      {
                        v60 = *((unsigned int *)v61 + 2);
                        goto LABEL_106;
                      }
                      if (v62 == v63 && !*((_DWORD *)v61 + 2))
                      {
                        v60 = 0;
LABEL_106:
                        v59 = *v61;
                        v62 = *((_DWORD *)v61 + 8);
                      }
                      v61 += 5;
                      if (v61 == v104)
                        goto LABEL_112;
                      continue;
                    }
                  }
LABEL_162:
                  if (v125 != v124)
                    free(v125);
                  v124 = (void **)&v103;
                  sub_1C5AAD3E4(&v124);
                  sub_1C60AB620(v101[0], v102);
                  MEMORY[0x1CAA32FB4](v101[0], 8);
                  v13 = v100;
                  goto LABEL_165;
                }
                continue;
              }
              v33 = v116;
              v34 = *((unsigned int *)v26 + 2);
              if (v30 >= 5)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, (uint64_t)v116, *((unsigned int *)v26 + 2), 4);
                v34 = *((unsigned int *)v26 + 2);
                if ((_DWORD)v34)
                {
                  v33 = v114;
                  goto LABEL_52;
                }
              }
              else
              {
LABEL_52:
                memcpy(v33, *v26, 4 * v34);
              }
              LODWORD(v115) = v30;
              v117 = 0;
              v35 = (char *)v123;
              v121 = (char *)v123;
              v122 = 0x400000000;
              if (v114 == v116)
              {
                v36 = v116;
                v37 = v30;
                if (v30 < 5)
                  goto LABEL_55;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, (uint64_t)v123, v30, 4);
                v37 = v115;
                if ((_DWORD)v115)
                {
                  v36 = v114;
                  v35 = v121;
LABEL_55:
                  memcpy(v35, v36, 4 * v37);
                }
                LODWORD(v122) = v30;
                v32 = v117;
              }
              else
              {
                v32 = 0;
                v121 = (char *)v114;
                v122 = __PAIR64__(HIDWORD(v115), v30);
                v114 = v116;
                HIDWORD(v115) = 0;
              }
              LODWORD(v115) = 0;
              goto LABEL_58;
            }
          }
          else
          {
            v26 = (void **)(v58 + 128);
            if (v21)
              goto LABEL_46;
          }
          break;
        }
        v27 = *(_QWORD *)(v58 + 384);
        if (v27)
          v28 = v27 == *(_QWORD *)(v58 + 392);
        else
          v28 = 0;
        if (!v28)
          goto LABEL_46;
        if (*(_BYTE *)(v27 + 16) != 61)
          goto LABEL_46;
        v29 = *((unsigned int *)v26 + 2);
        if (!(_DWORD)v29)
          goto LABEL_46;
        v40 = (char *)v123;
        v121 = (char *)v123;
        v41 = (unsigned int *)*v26;
        v122 = 0xC00000000;
        if (v29 >= 0xD)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, (uint64_t)v123, v29, 4);
          v42 = v122;
          v40 = v121;
        }
        else
        {
          v42 = 0;
        }
        memset(&v40[4 * v42], 255, 4 * v29);
        v43 = 0;
        LODWORD(v122) = v122 + v29;
        do
        {
          *(_DWORD *)&v40[4 * v41[v43]] = v43;
          ++v43;
        }
        while (v29 != v43);
        v44 = *((unsigned int *)v26 + 2);
        __src = v120;
        v119 = 0x400000000;
        sub_1C4893E04((char *)&__src, v44, v44);
        if ((_DWORD)v122)
        {
          v45 = (int *)v121;
          v46 = __src;
          v47 = 4 * v122;
          do
          {
            v49 = *v45++;
            v48 = v49;
            if (v49 == -1)
              v48 = v44;
            *v46++ = v48;
            v47 -= 4;
          }
          while (v47);
        }
        sub_1C608F2D4((uint64_t *)&__src);
        v110 = v112;
        v111 = 0x400000000;
        v50 = v119;
        if (!(_DWORD)v119)
        {
          v51 = 0;
          v113 = 0;
          v114 = v116;
          v115 = 0x400000000;
          goto LABEL_81;
        }
        v52 = v112;
        v53 = v119;
        if (v119 >= 5uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v110, (uint64_t)v112, v119, 4);
          v53 = v119;
          if ((_DWORD)v119)
          {
            v52 = v110;
            goto LABEL_75;
          }
        }
        else
        {
LABEL_75:
          memcpy(v52, __src, 4 * v53);
        }
        LODWORD(v111) = v50;
        v113 = 0;
        v114 = v116;
        v115 = 0x400000000;
        if (v110 == v112)
        {
          v54 = v116;
          v55 = v112;
          v56 = v50;
          if (v50 < 5)
            goto LABEL_78;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, (uint64_t)v116, v50, 4);
          v56 = v111;
          if ((_DWORD)v111)
          {
            v55 = v110;
            v54 = v114;
LABEL_78:
            memcpy(v54, v55, 4 * v56);
          }
          LODWORD(v115) = v50;
          v51 = v113;
        }
        else
        {
          v51 = 0;
          v114 = v110;
          v115 = __PAIR64__(HIDWORD(v111), v50);
          v110 = v112;
          HIDWORD(v111) = 0;
        }
        LODWORD(v111) = 0;
LABEL_81:
        v117 = v51;
        v57 = sub_1C63DE7A0((uint64_t)v101, (uint64_t)&v114);
        ++*(_DWORD *)(v57 + 32);
        if (v114 != v116)
          free(v114);
        if (v110 != v112)
          free(v110);
        if (__src != v120)
          free(__src);
        v39 = v121;
        if (v121 == (char *)v123)
          goto LABEL_100;
        goto LABEL_61;
      }
LABEL_165:
      v76 = v12 > 3;
      v12 >>= 1;
    }
    while (v76);
  }
  v94 = v106[0];
  if (v107)
  {
    v95 = 40 * v107;
    v96 = v106[0] + 24;
    do
    {
      if ((*(_QWORD *)(v96 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v97 = *(void **)(v96 - 16);
        if ((void *)v96 != v97)
          free(v97);
      }
      v96 += 40;
      v95 -= 40;
    }
    while (v95);
  }
  MEMORY[0x1CAA32FB4](v94, 8);
  return sub_1C63E2594(v108);
}

void sub_1C6090004(uint64_t a1, int *a2)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[7];

  v14[6] = *MEMORY[0x1E0C80C00];
  v4 = *(_BYTE **)a1;
  v5 = (_BYTE *)(*(_QWORD *)a1 + 4 * *(unsigned int *)(a1 + 8));
  v12 = v14;
  v13 = 0xC00000000;
  sub_1C617D6D0((unsigned int *)&v12, v4, v5);
  sub_1C6090610(&v12, a1);
  v6 = v13;
  v7 = v12;
  if ((_DWORD)v13)
  {
    v8 = *(_BYTE **)a1;
    v9 = v12;
    do
    {
      v11 = *a2++;
      v10 = v11;
      if ((_DWORD)v11 != -1)
        *(_DWORD *)&v8[4 * v10] = *v9;
      ++v9;
      --v6;
    }
    while (v6);
  }
  if (v7 != v14)
    free(v7);
}

void sub_1C60900D8(uint64_t *a1, int *a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  _QWORD v21[7];

  v21[6] = *MEMORY[0x1E0C80C00];
  v19 = (int *)v21;
  v20 = 0xC00000000;
  v6 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v6)
  {
    v7 = *a1;
    if (v6 >= 0xD)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, (uint64_t)v21, v6, 4);
      v8 = v20;
      v9 = v19;
    }
    else
    {
      v8 = 0;
      v9 = (int *)v21;
    }
    memset(&v9[v8], 255, 4 * v6);
    v10 = 0;
    LODWORD(v20) = v20 + v6;
    do
    {
      v9[*(unsigned int *)(v7 + 4 * v10)] = v10;
      ++v10;
    }
    while (v6 != v10);
  }
  else
  {
    sub_1C49F6D78((uint64_t)&v19, a3);
    if ((_DWORD)v20)
    {
      v11 = 0;
      v12 = v19;
      v13 = 4 * v20;
      do
      {
        v12[v11] = v11;
        ++v11;
        v13 -= 4;
      }
      while (v13);
    }
  }
  sub_1C6090004((uint64_t)&v19, a2);
  v14 = v19;
  if (sub_1C53EC390(v19, v20, v20))
  {
    *((_DWORD *)a1 + 2) = 0;
  }
  else
  {
    sub_1C4893E04((char *)a1, a3, a3);
    if ((_DWORD)a3)
    {
      v15 = 0;
      v16 = v19;
      v17 = *a1;
      do
      {
        v18 = v16[v15];
        if ((_DWORD)v18 != -1)
          *(_DWORD *)(v17 + 4 * v18) = v15;
        ++v15;
      }
      while (a3 != v15);
    }
    sub_1C608F2D4(a1);
    v14 = v19;
  }
  if (v14 != (int *)v21)
    free(v14);
}

void sub_1C6090290(uint64_t a1, llvm::Type *a2)
{
  unint64_t v4;
  llvm::UndefValue *v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  llvm::UndefValue ***v13;
  llvm::UndefValue **v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[7];

  v22[6] = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a1 + 8);
  v5 = llvm::UndefValue::get(***(llvm::UndefValue ****)a1, a2);
  v20 = v22;
  v21 = 0x600000000;
  sub_1C4848C0C((unsigned int *)&v20, v4, (uint64_t)v5);
  if (&v20 != (void **)a1)
  {
    v6 = v20;
    if (v20 == v22 || *(_QWORD *)a1 == a1 + 16)
    {
      v8 = *(unsigned int *)(a1 + 8);
      if (HIDWORD(v21) < v8)
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, (uint64_t)v22, v8, 8);
      v9 = v21;
      if (*(_DWORD *)(a1 + 12) < v21)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v21, 8);
        v9 = v21;
      }
      v10 = *(unsigned int *)(a1 + 8);
      if (v9 >= v10)
        v11 = v10;
      else
        v11 = v9;
      if ((_DWORD)v11)
      {
        for (i = 0; i != v11; ++i)
        {
          v13 = *(llvm::UndefValue ****)a1;
          v14 = *(llvm::UndefValue ***)((char *)v20 + i * 8);
          *(_QWORD *)((char *)v20 + i * 8) = *(_QWORD *)(*(_QWORD *)a1 + i * 8);
          v13[i] = v14;
        }
      }
      if (v10 < v9)
      {
        v15 = v9 - v10;
        memcpy((void *)(*(_QWORD *)a1 + 8 * v10), (char *)v20 + 8 * v11, 8 * v9 - 8 * v11);
        *(_DWORD *)(a1 + 8) += v15;
        LODWORD(v21) = v11;
        goto LABEL_20;
      }
      if (v10 > v9)
      {
        v16 = v10 - v9;
        memcpy((char *)v20 + 8 * v9, (const void *)(*(_QWORD *)a1 + 8 * v11), *(_QWORD *)a1 + 8 * v10 - (*(_QWORD *)a1 + 8 * v11));
        v17 = v21;
        *(_DWORD *)(a1 + 8) = v11;
        LODWORD(v21) = v17 + v16;
        LODWORD(v11) = v17 + v16;
        goto LABEL_20;
      }
    }
    else
    {
      v20 = *(void **)a1;
      *(_QWORD *)a1 = v6;
      v7 = v21;
      v21 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v7;
    }
  }
  LODWORD(v11) = v21;
LABEL_20:
  if ((_DWORD)v11)
  {
    v18 = 0;
    do
    {
      v19 = *((int *)a2 + v18);
      if ((_DWORD)v19 != -1)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = *((_QWORD *)v20 + v18);
      ++v18;
    }
    while (v11 != v18);
  }
  if (v20 != v22)
    free(v20);
}

void sub_1C60904B8(_DWORD *a1, int *__src, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v13;
  size_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17[2];
  _QWORD v18[7];

  v18[6] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (a1[2])
    {
      v17[0] = v18;
      v17[1] = (void *)0xC00000000;
      sub_1C4893E04((char *)v17, a3, -1);
      v6 = a1[2];
      if (a3 < v6)
        LODWORD(v6) = a3;
      if ((int)a3 >= 1)
      {
        v7 = *(_QWORD *)a1;
        v8 = (int *)v17[0];
        v9 = a3;
        do
        {
          v11 = *__src++;
          v10 = v11;
          if (v11 < (int)v6 && v10 != -1)
          {
            v13 = *(_DWORD *)(v7 + 4 * v10);
            if (v13 < (int)v6)
              *v8 = v13;
          }
          ++v8;
          --v9;
        }
        while (v9);
      }
      sub_1C6090610(a1, (uint64_t)v17);
      if (v17[0] != v18)
        free(v17[0]);
    }
    else
    {
      v14 = 4 * a3;
      v15 = (uint64_t)(4 * a3) >> 2;
      if (v15 > a1[3])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v15, 4);
        v16 = a1[2];
      }
      else
      {
        v16 = 0;
      }
      memcpy((void *)(*(_QWORD *)a1 + 4 * v16), __src, v14);
      a1[2] += v14 >> 2;
    }
  }
}

_DWORD *sub_1C6090610(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int *v11;
  int *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;

  if (result != (_DWORD *)a2)
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    if (*(_DWORD **)result == result + 4 || *(_QWORD *)a2 == a2 + 16)
    {
      v7 = *(unsigned int *)(a2 + 8);
      if (result[3] < v7)
        result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v7, 4);
      v8 = v3[2];
      if (*(_DWORD *)(a2 + 12) < v8)
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v8, 4);
        LODWORD(v8) = v3[2];
      }
      v9 = *(_DWORD *)(a2 + 8);
      if (v8 >= v9)
        v10 = v9;
      else
        v10 = v8;
      if ((_DWORD)v10)
      {
        v11 = *(int **)v3;
        v12 = *(int **)a2;
        v13 = v10;
        do
        {
          v14 = *v11;
          *v11++ = *v12;
          *v12++ = v14;
          --v13;
        }
        while (v13);
        LODWORD(v8) = v3[2];
        v9 = *(_DWORD *)(a2 + 8);
      }
      v15 = v8 - v9;
      if (v8 <= v9)
      {
        v16 = v9 - v8;
        if (v9 > v8)
        {
          if ((_DWORD)v10 != v9)
          {
            result = memcpy((void *)(*(_QWORD *)v3 + 4 * v8), (const void *)(*(_QWORD *)a2 + 4 * v10), *(_QWORD *)a2 + 4 * v9 - (*(_QWORD *)a2 + 4 * v10));
            LODWORD(v8) = v3[2];
          }
          v3[2] = v16 + v8;
          *(_DWORD *)(a2 + 8) = v10;
        }
      }
      else
      {
        if ((_DWORD)v10 != (_DWORD)v8)
        {
          result = memcpy((void *)(*(_QWORD *)a2 + 4 * v9), (const void *)(*(_QWORD *)v3 + 4 * v10), *(_QWORD *)v3 + 4 * v8 - (*(_QWORD *)v3 + 4 * v10));
          v9 = *(_DWORD *)(a2 + 8);
        }
        *(_DWORD *)(a2 + 8) = v15 + v9;
        v3[2] = v10;
      }
    }
    else
    {
      *(_QWORD *)result = *(_QWORD *)a2;
      *(_QWORD *)a2 = v4;
      v5 = result[2];
      result[2] = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v5;
      v6 = result[3];
      result[3] = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 12) = v6;
    }
  }
  return result;
}

uint64_t llvm::slpvectorizer::BoUpSLP::canReorderOperands(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v41;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;

  v6 = *(unsigned int *)(a2 + 216);
  if (!(_DWORD)v6)
    return 1;
  v7 = a5;
  v8 = a3;
  v9 = a2;
  v10 = 0;
  v39 = a6 + 16;
  v45 = a1 + 80;
  v43 = 8 * a5;
  v41 = *(unsigned int *)(a2 + 216);
  while (1)
  {
    v11 = *(unsigned int *)(v8 + 8);
    if ((_DWORD)v11)
    {
      v12 = 16 * v11;
      v13 = *(_QWORD *)v8 + 8;
      while (v10 != *(_DWORD *)(v13 - 8) || *(_DWORD *)(*(_QWORD *)v13 + 88))
      {
        v13 += 16;
        v12 -= 16;
        if (!v12)
          goto LABEL_8;
      }
      goto LABEL_23;
    }
LABEL_8:
    v14 = *(_QWORD *)(v9 + 208) + 80 * v10;
    v15 = *(unsigned int *)(v14 + 8);
    if ((_DWORD)v15)
    {
      v16 = *(uint64_t **)v14;
      v17 = 8 * v15;
      v18 = *(uint64_t **)v14;
      while (1)
      {
        v19 = *v18;
        v46 = 0;
        if ((sub_1C61B5A68(v45, v19, &v46) & 1) != 0)
        {
          v20 = *(_QWORD *)(v46 + 8);
          if (v20)
            break;
        }
        ++v18;
        v17 -= 8;
        if (!v17)
          goto LABEL_13;
      }
      if (sub_1C63DEE0C(*(_QWORD *)(v46 + 8), v16, v15))
        break;
    }
LABEL_13:
    if (v7)
    {
      v21 = v7;
      v22 = 0;
      v23 = 0;
      v24 = v9;
      v25 = *(_QWORD *)(v9 + 208) + 80 * v10;
      v26 = *(uint64_t **)v25;
      v27 = *(unsigned int *)(v25 + 8);
      v28 = v43;
      v29 = a4;
      do
      {
        v31 = *v29++;
        v30 = v31;
        v32 = sub_1C63DEE0C(v31, v26, v27);
        if (v32)
          v23 = v30;
        v22 += v32;
        v28 -= 8;
      }
      while (v28);
      if (v22 > 1)
        return 0;
      v7 = v21;
      v9 = v24;
      v6 = v41;
      v8 = a3;
      if (v23)
      {
        v33 = a6;
        v34 = *(unsigned int *)(a6 + 8);
        if (v34 >= *(unsigned int *)(a6 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a6, v39, v34 + 1, 8);
          v33 = a6;
          v34 = *(unsigned int *)(a6 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v33 + 8 * v34) = v23;
        ++*(_DWORD *)(v33 + 8);
      }
    }
LABEL_23:
    if (++v10 == v6)
      return 1;
  }
  v35 = *(unsigned int *)(v20 + 176);
  if (!(_DWORD)v35)
  {
LABEL_30:
    sub_1C6221558(v8, v10, v20);
    goto LABEL_23;
  }
  v36 = *(_QWORD **)(v20 + 168);
  v37 = 16 * v35;
  while (*v36 == v9)
  {
    v36 += 2;
    v37 -= 16;
    if (!v37)
      goto LABEL_30;
  }
  return 0;
}

_QWORD *llvm::slpvectorizer::BoUpSLP::reorderBottomToTop(void ***this, int a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  void **v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  char *v51;
  void **v52;
  _BYTE *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  unint64_t v61;
  unint64_t v62;
  BOOL v63;
  int v64;
  _BYTE *v65;
  uint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  BOOL v92;
  unsigned int *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  int *v97;
  _DWORD *v98;
  uint64_t v99;
  int v100;
  int v101;
  _BYTE *v102;
  unint64_t v103;
  int v104;
  uint64_t v105;
  _BYTE *v106;
  _BYTE *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  unsigned int *v113;
  unint64_t v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  int *v121;
  uint64_t v122;
  int v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  void **v127;
  uint64_t *v128;
  char v129;
  _DWORD **v130;
  uint64_t v131;
  _DWORD *v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  BOOL v137;
  uint64_t v138;
  llvm::Type *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  llvm::Type *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  int v152;
  unsigned int v153;
  void *v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  int v159;
  uint64_t v160;
  _BYTE *v162;
  _BYTE *v163;
  uint64_t v164;
  int v165;
  _BYTE v166[32];
  void **v167[2];
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD v172[2];
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _BYTE *v177;
  _BYTE *v178;
  uint64_t v179;
  int v180;
  _BYTE v181[32];
  uint64_t v182[2];
  unsigned int v183;
  _QWORD v184[2];
  int v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t v188;
  void *v189;
  unint64_t v190;
  _BYTE v191[16];
  int v192;
  void *v193;
  uint64_t v194;
  _BYTE v195[16];
  int v196;
  void *__src;
  uint64_t v198;
  _BYTE v199[16];
  void *v200;
  unint64_t v201;
  _BYTE v202[16];
  int v203;
  void *v204;
  void *__b;
  uint64_t v206;
  int v207;
  _BYTE v208[32];
  void *v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  char v213;
  void *v214;
  uint64_t v215;
  _BYTE v216[48];
  uint64_t *v217;
  uint64_t v218;
  _QWORD v219[8];

  v4 = a2;
  v219[6] = *MEMORY[0x1E0C80C00];
  v184[0] = 0;
  v184[1] = 0;
  v185 = 0;
  v187 = 0;
  v188 = 0;
  v186 = 0;
  v182[0] = 0;
  v182[1] = 0;
  v183 = 0;
  v217 = v219;
  v218 = 0x600000000;
  v6 = *((unsigned int *)this + 2);
  if (!(_DWORD)v6)
  {
    v177 = v181;
    v178 = v181;
    v179 = 4;
    v180 = 0;
    goto LABEL_16;
  }
  v7 = *this;
  v8 = 8 * v6;
  do
  {
    v9 = (uint64_t)*v7;
    if (*((_DWORD *)*v7 + 22))
    {
      v10 = v218;
      if (v218 >= (unint64_t)HIDWORD(v218))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v217, (uint64_t)v219, v218 + 1, 8);
        v10 = v218;
      }
      v217[v10] = v9;
      LODWORD(v218) = v218 + 1;
      v9 = (uint64_t)*v7;
    }
    llvm::slpvectorizer::BoUpSLP::getReorderingData((llvm::slpvectorizer::BoUpSLP *)this, v9, 0, a4, (uint64_t)&v209);
    v4 = a2;
    if (v213)
    {
      v177 = *v7;
      sub_1C518D044(v184, (uint64_t *)&v177);
      if (*((_DWORD *)*v7 + 22))
      {
        v214 = *v7;
        sub_1C63E25FC((uint64_t)&v177, (uint64_t)v182, (uint64_t *)&v214, (uint64_t)&v209);
      }
      if (v213 && v209 != &v211)
        free(v209);
    }
    ++v7;
    v8 -= 8;
  }
  while (v8);
  v11 = v186;
  v12 = v187;
  v177 = v181;
  v178 = v181;
  v179 = 4;
  v180 = 0;
  while (v186 != v187)
  {
    v172[0] = 0;
    v172[1] = 0;
    v173 = 0;
    v175 = 0;
    v176 = 0;
    v174 = 0;
    v214 = v216;
    v215 = 0x600000000;
    do
    {
      v19 = *v11;
      v20 = *(_DWORD *)(*v11 + 88);
      if (v20)
      {
        if (v20 != 2 || !v183)
          goto LABEL_56;
        v21 = (v183 - 1) & ((v19 >> 4) ^ (v19 >> 9));
        v22 = *(_QWORD *)(v182[0] + 40 * v21);
        if (v19 != v22)
        {
          v34 = 1;
          while (v22 != -4096)
          {
            v35 = v21 + v34++;
            v21 = v35 & (v183 - 1);
            v22 = *(_QWORD *)(v182[0] + 40 * v21);
            if (v19 == v22)
              goto LABEL_36;
          }
LABEL_56:
          v36 = v215;
          if (v215 >= (unint64_t)HIDWORD(v215))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, (uint64_t)v216, v215 + 1, 8);
            v36 = v215;
          }
          *((_QWORD *)v214 + v36) = v19;
          LODWORD(v215) = v215 + 1;
          goto LABEL_59;
        }
      }
LABEL_36:
      v23 = *(unsigned int *)(v19 + 176);
      if (!(_DWORD)v23 || *(_DWORD *)(v19 + 104))
        goto LABEL_56;
      v24 = *(_QWORD **)(v19 + 168);
      v25 = 16 * v23;
      v26 = 16;
      while (v25 != v26)
      {
        v27 = v24[(unint64_t)v26 / 8];
        v26 += 16;
        if (v27 != *v24)
          goto LABEL_56;
      }
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v177, *v11);
      if (!v28)
        goto LABEL_56;
      v29 = *(unsigned int *)(v19 + 176);
      if ((_DWORD)v29)
      {
        v30 = *(_QWORD *)(v19 + 168);
        v31 = v30 + 16 * v29;
        do
        {
          v32 = *(void **)v30;
          v33 = sub_1C63DE918((uint64_t)v172, *(_QWORD *)v30);
          if (v175 == v33)
          {
            v204 = &v206;
            __b = (void *)0x300000000;
            v209 = v32;
            v210 = &v212;
            v211 = 0x300000000;
            v33 = sub_1C63DE988((uint64_t)v172, (uint64_t *)&v209);
            if (v210 != &v212)
              free(v210);
            if (v204 != &v206)
              free(v204);
          }
          sub_1C6221558(v33 + 8, *(_DWORD *)(v30 + 8), v19);
          v30 += 16;
        }
        while (v30 != v31);
      }
LABEL_59:
      ++v11;
    }
    while (v11 != v12);
    if ((_DWORD)v215)
    {
      v37 = (void **)v214;
      v38 = 8 * v215;
      do
      {
        v39 = *v37++;
        v209 = v39;
        sub_1C63DEB48((uint64_t)v184, (uint64_t *)&v209);
        v38 -= 8;
      }
      while (v38);
    }
    v41 = v174;
    v40 = v175;
    v160 = v175;
    if (v174 != v175)
    {
      while (1)
      {
        v209 = &v211;
        v210 = (void *)0x600000000;
        if ((llvm::slpvectorizer::BoUpSLP::canReorderOperands((uint64_t)this, *(_QWORD *)v41, v41 + 8, v217, v218, (uint64_t)&v209) & 1) == 0)
        {
          v110 = *(unsigned int *)(v41 + 16);
          if ((_DWORD)v110)
          {
            v111 = 16 * v110;
            v112 = (uint64_t *)(*(_QWORD *)(v41 + 8) + 8);
            do
            {
              sub_1C63DEB48((uint64_t)v184, v112);
              v112 += 2;
              v111 -= 16;
            }
            while (v111);
          }
          goto LABEL_273;
        }
        v167[0] = 0;
        v167[1] = 0;
        v168 = 0;
        v170 = 0;
        v171 = 0;
        v169 = 0;
        v204 = v208;
        __b = v208;
        v206 = 4;
        v207 = 0;
        v162 = v166;
        v163 = v166;
        v164 = 4;
        v165 = 0;
        v42 = *(unsigned int *)(v41 + 16);
        if ((_DWORD)v42)
          break;
LABEL_268:
        if (v163 != v162)
          free(v163);
        if (__b != v204)
          free(__b);
        v204 = &v169;
        sub_1C5AAD3E4((void ***)&v204);
        sub_1C60AB620(v167[0], v168);
        MEMORY[0x1CAA32FB4](v167[0], 8);
LABEL_273:
        if (v209 != &v211)
          free(v209);
        v41 += 72;
        if (v41 == v40)
          goto LABEL_64;
      }
      v43 = *(_QWORD *)(v41 + 8);
      v44 = v43 + 16 * v42;
      v45 = a2;
      while (2)
      {
        v46 = *(_QWORD *)(v43 + 8);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v204, v46);
        if (!v47 || *(_DWORD *)(v46 + 104) || v45 && (void *)v46 == **this)
        {
LABEL_75:
          v43 += 16;
          if (v43 != v44)
            continue;
          if (v169 == v170)
          {
            v145 = *(unsigned int *)(v41 + 16);
            v40 = v160;
            if ((_DWORD)v145)
            {
              v146 = 16 * v145;
              v147 = (uint64_t *)(*(_QWORD *)(v41 + 8) + 8);
              do
              {
                sub_1C63DEB48((uint64_t)v184, v147);
                v147 += 2;
                v146 -= 16;
              }
              while (v146);
            }
            goto LABEL_268;
          }
          v113 = *(unsigned int **)v169;
          v114 = *(unsigned int *)(v169 + 8);
          v115 = v169 + 40;
          if (v169 + 40 != v170)
          {
            v116 = *(_DWORD *)(v169 + 32);
            do
            {
              v117 = *(_DWORD *)(v115 + 32);
              if (v116 >= v117)
              {
                if (v116 != v117 || *(_DWORD *)(v115 + 8))
                  goto LABEL_208;
                v114 = 0;
              }
              else
              {
                v114 = *(unsigned int *)(v115 + 8);
              }
              v113 = *(unsigned int **)v115;
              v116 = *(_DWORD *)(v115 + 32);
LABEL_208:
              v115 += 40;
            }
            while (v115 != v170);
          }
          if (!v114)
          {
            v148 = *(unsigned int *)(v41 + 16);
            v40 = v160;
            if ((_DWORD)v148)
            {
              v149 = 16 * v148;
              v150 = (uint64_t *)(*(_QWORD *)(v41 + 8) + 8);
              do
              {
                sub_1C63DEB48((uint64_t)v184, v150);
                v150 += 2;
                v149 -= 16;
              }
              while (v149);
            }
            goto LABEL_268;
          }
          if (__b == v204)
          {
LABEL_213:
            v207 = 0;
            HIDWORD(v206) = 0;
          }
          else
          {
            if (v206 < 0x21 || 4 * (HIDWORD(v206) - v207) >= v206)
            {
              memset(__b, 255, 8 * v206);
              goto LABEL_213;
            }
            free(__b);
            v152 = 1 << (33 - __clz(HIDWORD(v206) - v207 - 1));
            v92 = (HIDWORD(v206) - v207) > 0x10;
            v207 = 0;
            if (v92)
              v153 = v152;
            else
              v153 = 32;
            v206 = v153;
            v154 = malloc_type_malloc(8 * v153, 0x4065EBACuLL);
            if (!v154)
              llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
            __b = v154;
            memset(v154, 255, 8 * v206);
          }
          v200 = v202;
          v201 = 0xC00000000;
          if (v114 >= 0xDuLL)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v200, (uint64_t)v202, v114, 4);
            v118 = v201;
            v119 = v200;
          }
          else
          {
            v118 = 0;
            v119 = v202;
          }
          memset(&v119[4 * v118], 255, 4 * v114);
          LODWORD(v201) = v201 + v114;
          v120 = 0;
          do
          {
            *(_DWORD *)&v119[4 * v113[v120]] = v120;
            ++v120;
          }
          while (v114 != v120);
          v189 = v191;
          v190 = 0xC00000000;
          sub_1C4893E04((char *)&v189, v114, -1);
          v121 = (int *)v189;
          v122 = 4 * v114;
          do
          {
            v124 = *v113++;
            v123 = v124;
            if (v124 >= v114)
              v123 = -1;
            *v121++ = v123;
            v122 -= 4;
          }
          while (v122);
          v125 = *(unsigned int *)(v41 + 16);
          if ((_DWORD)v125)
          {
            v126 = 16 * v125;
            v127 = (void **)(*(_QWORD *)(v41 + 8) + 8);
            do
            {
              v193 = *v127;
              v128 = (uint64_t *)v193;
              sub_1C63DEB48((uint64_t)v184, (uint64_t *)&v193);
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v204, (uint64_t)v128);
              if (v129)
              {
                if (v114 == *((_DWORD *)v128 + 26))
                {
                  sub_1C6090004((uint64_t)(v128 + 12), (int *)v200);
                }
                else if (!*((_DWORD *)v128 + 22))
                {
                  sub_1C60900D8(v128 + 16, (int *)v200, v201);
                }
              }
              v127 += 2;
              v126 -= 16;
            }
            while (v126);
          }
          if ((_DWORD)v210)
          {
            v130 = (_DWORD **)v209;
            v131 = 8 * v210;
            do
            {
              v132 = *v130;
              v193 = v132;
              if (v132[26])
              {
                sub_1C6090004((uint64_t)(v132 + 24), (int *)v200);
              }
              else
              {
                sub_1C6090290((uint64_t)v132, (llvm::Type *)v200);
                sub_1C63DEB48((uint64_t)v184, (uint64_t *)&v193);
              }
              ++v130;
              v131 -= 8;
            }
            while (v131);
          }
          v133 = *(_QWORD *)v41;
          if (*(_DWORD *)(*(_QWORD *)v41 + 88)
            || ((v134 = *(_QWORD *)(v133 + 384),
                 v135 = *(unsigned __int8 *)(v134 + 16) - 60,
                 v92 = v135 > 0x20,
                 v136 = (1 << v135) & 0x120000001,
                 !v92)
              ? (v137 = v136 == 0)
              : (v137 = 1),
                v137 || v134 != *(_QWORD *)(v133 + 392)))
          {
            v138 = *(unsigned int *)(v133 + 216);
            if ((_DWORD)v138)
            {
              v139 = (llvm::Type *)v200;
              v140 = *(_QWORD *)(v133 + 208);
              v141 = 80 * v138;
              do
              {
                sub_1C6090290(v140, v139);
                v140 += 80;
                v141 -= 80;
              }
              while (v141);
              v133 = *(_QWORD *)v41;
            }
          }
          v142 = *(_QWORD *)(v133 + 384);
          v143 = *(unsigned __int8 *)(v142 + 16);
          if (v143 == 61 || v143 == 90)
          {
            v144 = (llvm::Type *)v200;
            if (v142 == *(_QWORD *)(v133 + 392))
            {
              sub_1C60900D8((uint64_t *)(v133 + 128), (int *)v200, v201);
LABEL_263:
              if (v189 != v191)
                free(v189);
              if (v200 != v202)
                free(v200);
              v40 = v160;
              goto LABEL_268;
            }
          }
          else
          {
            v144 = (llvm::Type *)v200;
          }
          sub_1C6090290(v133, v144);
          sub_1C60900D8((uint64_t *)(*(_QWORD *)v41 + 128), (int *)v189, v190);
          v151 = *(_QWORD *)v41;
          if (!*(_DWORD *)(*(_QWORD *)v41 + 104)
            && *(_DWORD *)(v151 + 136)
            && *(_QWORD *)(v151 + 384) == *(_QWORD *)(v151 + 392))
          {
            sub_1C518D044(v184, (uint64_t *)v41);
          }
          goto LABEL_263;
        }
        break;
      }
      if (*(_DWORD *)(v46 + 88) == 2)
      {
        v200 = 0;
        v48 = v182[0];
        v49 = v183;
        v50 = sub_1C61DBB84(v182[0], v183, v46, &v200);
        v51 = (char *)v200;
        if (!v50)
          v51 = (char *)(v48 + 40 * v49);
        v52 = (void **)(v51 + 8);
      }
      else
      {
        v52 = (void **)(v46 + 128);
      }
      v53 = v202;
      v54 = *(unsigned int *)(v41 + 16);
      if ((_DWORD)v54)
      {
        v55 = 0;
        v56 = 16 * v54;
        v57 = (uint64_t *)(*(_QWORD *)(v41 + 8) + 8);
        do
        {
          v58 = *v57;
          v57 += 2;
          if (v58 == v46)
            ++v55;
          v56 -= 16;
        }
        while (v56);
      }
      else
      {
        v55 = 0;
      }
      if (*(_DWORD *)(v46 + 88)
        || ((v59 = *(_QWORD *)(v46 + 384)) != 0 ? (v60 = v59 == *(_QWORD *)(v46 + 392)) : (v60 = 0),
            !v60 || *(_BYTE *)(v59 + 16) != 61 || (v61 = *((unsigned int *)v52 + 2), !(_DWORD)v61)))
      {
        v189 = v191;
        v190 = 0x400000000;
        v62 = *((unsigned int *)v52 + 2);
        if ((_DWORD)v62)
          v63 = &v189 != v52;
        else
          v63 = 0;
        if (!v63)
        {
          v64 = 0;
          v192 = 0;
          v200 = v202;
          v201 = 0x400000000;
          goto LABEL_108;
        }
        v65 = v191;
        v66 = *((unsigned int *)v52 + 2);
        if (v62 >= 5)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v189, (uint64_t)v191, *((unsigned int *)v52 + 2), 4);
          v66 = *((unsigned int *)v52 + 2);
          if ((_DWORD)v66)
          {
            v65 = v189;
            goto LABEL_102;
          }
        }
        else
        {
LABEL_102:
          memcpy(v65, *v52, 4 * v66);
        }
        LODWORD(v190) = v62;
        v192 = 0;
        v200 = v202;
        v201 = 0x400000000;
        v67 = v191;
        if (v189 == v191)
        {
          v68 = v202;
          v69 = v62;
          if (v62 < 5)
            goto LABEL_105;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v200, (uint64_t)v202, v62, 4);
          v69 = v190;
          if ((_DWORD)v190)
          {
            v67 = v189;
            v68 = v200;
LABEL_105:
            memcpy(v68, v67, 4 * v69);
          }
          LODWORD(v201) = v62;
          v64 = v192;
        }
        else
        {
          v64 = 0;
          v200 = v189;
          v201 = __PAIR64__(HIDWORD(v190), v62);
          v189 = v191;
          HIDWORD(v190) = 0;
        }
        LODWORD(v190) = 0;
LABEL_108:
        v45 = a2;
        v203 = v64;
        v70 = sub_1C63DE7A0((uint64_t)v167, (uint64_t)&v200);
        *(_DWORD *)(v70 + 32) += v55;
        if (v200 != v202)
          free(v200);
        if (v189 != v191)
          free(v189);
LABEL_112:
        v193 = v195;
        v194 = 0x400000000;
        v189 = v191;
        v190 = 0x400000000;
        v192 = 0;
        v200 = v202;
        v201 = 0x400000000;
        v203 = 0;
        v71 = sub_1C63DE7A0((uint64_t)v167, (uint64_t)&v200);
        if (v200 != v202)
          free(v200);
        if (v189 != v191)
          free(v189);
        if (v193 != v195)
          free(v193);
        v72 = *(unsigned int *)(v46 + 176);
        if (!(_DWORD)v72)
          goto LABEL_75;
        v73 = *(uint64_t **)(v46 + 168);
        v74 = &v73[2 * v72];
        v75 = v182[0];
        v158 = (void *)(v182[0] + 40 * v183);
        v159 = v183;
        while (2)
        {
          v76 = *v73;
          v189 = (void *)v76;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v162, v76);
          if (v77)
          {
            if (!*(_DWORD *)(v76 + 136) && !*(_DWORD *)(v76 + 104))
            {
              v78 = *(_DWORD *)(v76 + 88);
              if ((v78 || *(_QWORD *)(v76 + 384) == *(_QWORD *)(v76 + 392)) && (!v45 || *(_DWORD *)(v76 + 200)))
              {
                if (v78 != 2
                  || (v200 = 0, sub_1C61DBB84(v75, v159, v76, &v200))
                  && v200 != v158
                  && !*((_DWORD *)v200 + 4))
                {
                  v156 = v71;
                  v157 = v75;
                  v79 = sub_1C63DEA2C((uint64_t)v172, (uint64_t *)&v189);
                  v80 = *(unsigned int *)(v79 + 8);
                  if ((_DWORD)v80)
                  {
                    v81 = 0;
                    v82 = *(_QWORD *)v79;
                    v83 = *(_QWORD *)v79 + 16 * v80;
                    while (1)
                    {
                      v84 = *(_QWORD *)(v82 + 8);
                      if (!*(_DWORD *)(v84 + 136) && !*(_DWORD *)(v84 + 104))
                      {
                        v90 = *(_DWORD *)(v84 + 88);
                        if ((v90 || *(_QWORD *)(v84 + 384) == *(_QWORD *)(v84 + 392))
                          && (!a2 || *(_DWORD *)(v84 + 200)))
                        {
                          if (v90 != 2)
                            goto LABEL_143;
                          v200 = 0;
                          v155 = v80;
                          v91 = sub_1C61DBB84(v157, v159, v84, &v200);
                          v80 = v155;
                          if (v91)
                          {
                            if (v200 != v158 && !*((_DWORD *)v200 + 4))
                              goto LABEL_143;
                          }
                        }
                      }
                      v85 = *(_QWORD *)(v82 + 8);
                      v86 = *(unsigned int *)(v85 + 176);
                      if ((_DWORD)v86)
                        break;
LABEL_138:
                      v89 = 1;
LABEL_144:
                      v81 += v89;
                      v82 += 16;
                      if (v82 == v83)
                        goto LABEL_156;
                    }
                    v87 = *(_QWORD **)(v85 + 168);
                    v88 = 16 * v86;
                    while (*v87 == v76)
                    {
                      v87 += 2;
                      v88 -= 16;
                      if (!v88)
                        goto LABEL_138;
                    }
LABEL_143:
                    v89 = 0;
                    goto LABEL_144;
                  }
                  v81 = 0;
LABEL_156:
                  v92 = v81 > v80 >> 1;
                  v45 = a2;
                  v71 = v156;
                  v75 = v157;
                  if (!v92)
                    ++*(_DWORD *)(v156 + 32);
                }
              }
            }
          }
          v73 += 2;
          if (v73 == v74)
            goto LABEL_75;
          continue;
        }
      }
      v200 = v202;
      v93 = (unsigned int *)*v52;
      v201 = 0xC00000000;
      if (v61 >= 0xD)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v200, (uint64_t)v202, v61, 4);
        v94 = v201;
        v53 = v200;
      }
      else
      {
        v94 = 0;
      }
      memset(&v53[4 * v94], 255, 4 * v61);
      v95 = 0;
      LODWORD(v201) = v201 + v61;
      do
      {
        *(_DWORD *)&v53[4 * v93[v95]] = v95;
        ++v95;
      }
      while (v61 != v95);
      v96 = *((unsigned int *)v52 + 2);
      __src = v199;
      v198 = 0x400000000;
      sub_1C4893E04((char *)&__src, v96, v96);
      if ((_DWORD)v201)
      {
        v97 = (int *)v200;
        v98 = __src;
        v99 = 4 * v201;
        do
        {
          v101 = *v97++;
          v100 = v101;
          if (v101 == -1)
            v100 = v96;
          *v98++ = v100;
          v99 -= 4;
        }
        while (v99);
      }
      sub_1C608F2D4((uint64_t *)&__src);
      v102 = v195;
      v193 = v195;
      v194 = 0x400000000;
      v103 = v198;
      if (!(_DWORD)v198)
      {
        v104 = 0;
        v196 = 0;
        v189 = v191;
        v190 = 0x400000000;
        v45 = a2;
LABEL_177:
        v192 = v104;
        v109 = sub_1C63DE7A0((uint64_t)v167, (uint64_t)&v189);
        *(_DWORD *)(v109 + 32) += v55;
        if (v189 != v191)
          free(v189);
        if (v193 != v195)
          free(v193);
        if (__src != v199)
          free(__src);
        if (v200 != v202)
          free(v200);
        goto LABEL_112;
      }
      v105 = v198;
      if (v198 >= 5uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v193, (uint64_t)v195, v198, 4);
        v105 = v198;
        if ((_DWORD)v198)
        {
          v102 = v193;
          goto LABEL_171;
        }
      }
      else
      {
LABEL_171:
        memcpy(v102, __src, 4 * v105);
      }
      LODWORD(v194) = v103;
      v196 = 0;
      v106 = v191;
      v189 = v191;
      v190 = 0x400000000;
      v107 = v195;
      if (v193 == v195)
      {
        v108 = v103;
        if (v103 < 5)
          goto LABEL_174;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v189, (uint64_t)v191, v103, 4);
        v108 = v194;
        if ((_DWORD)v194)
        {
          v107 = v193;
          v106 = v189;
LABEL_174:
          memcpy(v106, v107, 4 * v108);
        }
        LODWORD(v190) = v103;
        v104 = v196;
      }
      else
      {
        v104 = 0;
        v189 = v193;
        v190 = __PAIR64__(HIDWORD(v194), v103);
        v193 = v195;
        HIDWORD(v194) = 0;
      }
      LODWORD(v194) = 0;
      v45 = a2;
      goto LABEL_177;
    }
LABEL_64:
    v4 = a2;
    if (v214 != v216)
      free(v214);
    sub_1C63E0968((uint64_t)v172);
    v11 = v186;
    v12 = v187;
  }
LABEL_16:
  if (v4)
  {
    v13 = **this;
    if (v13[34])
    {
      if (!v13[26])
        v13[34] = 0;
    }
  }
  if (v178 != v177)
    free(v178);
  if (v217 != v219)
    free(v217);
  v14 = v182[0];
  if (v183)
  {
    v15 = 40 * v183;
    v16 = v182[0] + 24;
    do
    {
      if ((*(_QWORD *)(v16 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v17 = *(void **)(v16 - 16);
        if ((void *)v16 != v17)
          free(v17);
      }
      v16 += 40;
      v15 -= 40;
    }
    while (v15);
  }
  MEMORY[0x1CAA32FB4](v14, 8);
  return sub_1C6176BF8(v184);
}

unint64_t llvm::slpvectorizer::BoUpSLP::buildExternalUses(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  int v41;
  uint64_t v42;

  v38 = result;
  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v4 = *(uint64_t **)result;
    v39 = *(_QWORD *)result + 8 * v2;
    v5 = (uint64_t *)(result + 1048);
    v36 = result + 80;
    v37 = result + 1072;
    while (1)
    {
      v6 = *v4;
      if (*(_DWORD *)(*v4 + 88) != 2)
      {
        v7 = *(unsigned int *)(v6 + 8);
        if ((_DWORD)v7)
          break;
      }
LABEL_49:
      if (++v4 == (uint64_t *)v39)
        return result;
    }
    v8 = 0;
    while (1)
    {
      v9 = *(_QWORD *)(*(_QWORD *)v6 + 8 * v8);
      v10 = sub_1C63DEC00(v6, v9);
      result = sub_1C63DEC9C(a2, v9);
      if (*(_QWORD *)(a2 + 32) != result)
        result = sub_1C63DED14(v37, v9, v10);
      v11 = *(_QWORD *)(v9 + 8);
      if (v11)
        break;
LABEL_48:
      if (++v8 == v7)
        goto LABEL_49;
    }
    while (1)
    {
      v12 = *(_QWORD *)(v11 + 24);
      if (v12 && *(unsigned __int8 *)(v12 + 16) >= 0x1Cu)
      {
        v40[0] = *(_QWORD *)(v11 + 24);
        v42 = 0;
        result = sub_1C61DB414(v5, v40, &v42);
        if ((result & 1) == 0)
        {
          v40[0] = 0;
          result = sub_1C61B5A68(v36, v12, v40);
          if ((result & 1) == 0 || (v14 = *(_QWORD *)(v40[0] + 8)) == 0)
          {
LABEL_25:
            v17 = *(_QWORD *)(v38 + 1904);
            v18 = *(_QWORD *)(v38 + 1912);
            if (v18)
            {
              v19 = 8 * v18;
              v20 = *(_QWORD **)(v38 + 1904);
              while (*v20 != v12)
              {
                ++v20;
                v19 -= 8;
                if (!v19)
                {
                  v20 = (_QWORD *)(v17 + 8 * v18);
                  break;
                }
              }
            }
            else
            {
              v20 = *(_QWORD **)(v38 + 1904);
            }
            if (v18 == ((uint64_t)v20 - v17) >> 3)
            {
              v40[0] = v9;
              v40[1] = v12;
              v41 = v10;
              result = sub_1C4DC1E54(v37, (unint64_t)v40);
              v21 = *(_QWORD *)(v38 + 1072) + 24 * *(unsigned int *)(v38 + 1080);
              v22 = *(_OWORD *)result;
              *(_QWORD *)(v21 + 16) = *(_QWORD *)(result + 16);
              *(_OWORD *)v21 = v22;
              ++*(_DWORD *)(v38 + 1080);
            }
            goto LABEL_13;
          }
          if (**(_QWORD **)v14 == v12 && *(_DWORD *)(v14 + 88) != 1)
            break;
        }
      }
LABEL_13:
      v11 = *(_QWORD *)(v11 + 8);
      if (!v11)
        goto LABEL_48;
    }
    v15 = *(unsigned __int8 *)(v12 + 16);
    if (v15 != 60)
    {
      if (v15 == 84)
      {
        result = (unint64_t)llvm::getVectorIntrinsicIDForCall(v12, *(uint64_t **)(v38 + 1944));
        v33 = result;
        v23 = *(unsigned __int8 *)(v12 + 16);
        if (v23 == 84)
        {
          v24 = 0;
        }
        else if (v23 == 39)
        {
          v24 = (*(_DWORD *)(v12 + 80) + 1);
        }
        else
        {
          v24 = 2;
        }
        v25 = *(_DWORD *)(v12 + 20);
        if (v25 < 0 && (v30 = v12 - 32 * (v25 & 0x7FFFFFF), v31 = *(_QWORD *)(v30 - 8), (v31 & 0xFFFFFFFF0) != 0))
        {
          v27 = -(uint64_t)(v25 & 0x7FFFFFF);
          v26 = *(_DWORD *)(v30 - 12) - *(_DWORD *)(v30 - v31);
        }
        else
        {
          v26 = 0;
          v27 = -(uint64_t)(v25 & 0x7FFFFFF);
        }
        v28 = (uint64_t *)(v12 + 32 * v27);
        v32 = (v12 - 32 * v24 + 32 * (unint64_t)-v26 - (unint64_t)v28 - 32) >> 5;
        if (!(_DWORD)v32)
          goto LABEL_13;
        v29 = 0;
        while (1)
        {
          v35 = v28;
          v34 = v29;
          result = llvm::hasVectorInstrinsicScalarOpd((llvm *)v33, v29);
          if ((result & 1) != 0)
            break;
          v29 = v34 + 1;
          v28 = v35 + 4;
          if ((_DWORD)v32 == v34 + 1)
            goto LABEL_13;
        }
        v16 = *v35;
        goto LABEL_24;
      }
      if (v15 != 61)
        goto LABEL_13;
    }
    v16 = *(_QWORD *)(v12 - 32);
LABEL_24:
    if (v16 == v9)
      goto LABEL_25;
    goto LABEL_13;
  }
  return result;
}

void llvm::slpvectorizer::BoUpSLP::buildTree(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD **v10;
  uint64_t v11;
  uint64_t v12[2];

  sub_1C63DED9C(a1);
  *(_QWORD *)(a1 + 1904) = a4;
  *(_QWORD *)(a1 + 1912) = a5;
  if ((int)a3 < 2)
  {
LABEL_5:
    v12[0] = 0;
    v12[1] = 0xFFFFFFFFLL;
    llvm::slpvectorizer::BoUpSLP::buildTree_rec(a1, a2, a3, 0, v12);
  }
  else
  {
    v10 = (_QWORD **)(a2 + 1);
    v11 = a3 - 1;
    while (**v10 == *(_QWORD *)*a2)
    {
      ++v10;
      if (!--v11)
        goto LABEL_5;
    }
  }
}

void llvm::slpvectorizer::BoUpSLP::buildTree_rec(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, uint64_t *a5)
{
  uint64_t *v8;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  const llvm::Instruction *v53;
  int v54;
  uint64_t **v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  int v64;
  _QWORD **v65;
  int v66;
  BOOL v67;
  int v68;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  llvm **v82;
  llvm *v83;
  unsigned int v84;
  BOOL v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  int v89;
  char *v91;
  uint64_t v92;
  const llvm::Instruction *v93;
  uint64_t v94;
  const llvm::Instruction *v95;
  char *v96;
  _QWORD *v97;
  _BOOL4 v98;
  llvm *v100;
  llvm *v101;
  int v102;
  int v103;
  uint64_t v104;
  BOOL v105;
  const llvm::Instruction *v106;
  uint64_t v107;
  BOOL v108;
  uint64_t v109;
  unsigned int v110;
  BOOL v111;
  int v112;
  unsigned int v113;
  int v114;
  uint64_t v115;
  llvm *v117;
  uint64_t v118;
  BOOL v119;
  const llvm::Instruction *v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  int v127;
  uint64_t v128;
  int v129;
  uint64_t ScheduleDataChunks;
  int v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  llvm **v135;
  llvm *v136;
  BOOL v137;
  void *v138;
  uint64_t **v139;
  int v140;
  llvm::Instruction *v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  BOOL v157;
  uint64_t *v158;
  int v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  int v165;
  llvm::Instruction *v166;
  uint64_t v167;
  void **v168;
  uint64_t v169;
  int v170;
  uint64_t **v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  __int16 v176;
  unsigned int v177;
  int v178;
  char *v180;
  uint64_t v181;
  void **v182;
  char *v183;
  int v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  llvm::Instruction *v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  uint64_t **v196;
  int v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  void **v213;
  char *v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  _QWORD *v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  BOOL v238;
  uint64_t v239;
  int v240;
  char *v241;
  llvm *v242;
  int v243;
  int v244;
  int v245;
  uint64_t v246;
  void **v248;
  int v249;
  char *v250;
  uint64_t v251;
  unint64_t v252;
  unsigned int v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  uint64_t *v258;
  unint64_t v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  void **v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t *v268;
  int v269;
  BOOL v270;
  void *v271;
  __int16 v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unsigned int v287;
  BOOL v288;
  BOOL v289;
  uint64_t v290;
  int v291;
  uint64_t v292;
  void *v293;
  uint64_t v294;
  int v295;
  char *v296;
  llvm::Type *v297;
  unsigned int v298;
  uint64_t *v299;
  unint64_t v300;
  _QWORD *v301;
  unint64_t v302;
  uint64_t *v303;
  uint64_t v304;
  int v305;
  char *v306;
  uint64_t v307;
  int v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  int v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unsigned int v324;
  uint64_t *v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  uint64_t v329;
  uint64_t v330;
  void *v331;
  void **v332;
  unint64_t v333;
  unint64_t v334;
  char *v335;
  int v336;
  char v337;
  char *v338;
  BOOL v339;
  uint64_t v340;
  uint64_t v341;
  int *v342;
  unint64_t v343;
  int64_t v344;
  char *v345;
  char *v346;
  uint64_t v347;
  int v348;
  int v349;
  unint64_t v350;
  uint64_t v351;
  unint64_t v352;
  int *v353;
  int v354;
  char *v355;
  uint64_t v356;
  llvm::Type **v357;
  uint64_t v358;
  uint64_t *v359;
  _QWORD *v360;
  uint64_t v361;
  uint64_t v362;
  int v363;
  __int16 v364;
  uint64_t v365;
  BOOL v366;
  uint64_t v367;
  uint64_t *v368;
  uint64_t *v369;
  uint64_t v370;
  int v371;
  uint64_t v372;
  uint64_t *v373;
  uint64_t v374;
  unsigned int v375;
  uint64_t v376;
  uint64_t v377;
  char v378;
  char v379;
  unsigned int v380;
  uint64_t *v381;
  void **v382;
  uint64_t v383;
  uint64_t v384;
  int v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t i;
  _BYTE *v390;
  int v391;
  unsigned int v392;
  char *v393;
  char *v394;
  unint64_t v395;
  char *v396;
  char *v397;
  int v398;
  int v399;
  int v400;
  int v401;
  char *v402;
  __int16 v403;
  int v404;
  uint64_t *v405;
  int v406;
  uint64_t *v407;
  llvm::Type **v408;
  llvm::Type **v409;
  uint64_t v410;
  unsigned int v411;
  uint64_t v412;
  int v413;
  uint64_t v414;
  int v415;
  uint64_t v416;
  unint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unsigned int v421;
  uint64_t *v422;
  uint64_t v423;
  uint64_t v424;
  void *v425;
  int v426;
  llvm *v427;
  uint64_t v428;
  uint64_t v429;
  int v430;
  BOOL v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  int PointersDiff;
  void *v437;
  char v438;
  void **v439;
  char v440;
  int v441;
  char *v442;
  uint64_t **v443;
  uint64_t *v444;
  uint64_t v445;
  unsigned int *v446;
  uint64_t v447;
  unint64_t v448;
  unint64_t v449;
  uint64_t v450;
  llvm::Type ***v451;
  uint64_t *v452;
  uint64_t **v453;
  uint64_t v454;
  llvm::Type ***v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  int v463;
  uint64_t v464;
  _DWORD *v465;
  _QWORD *v466;
  unsigned int v467;
  unsigned int v468;
  char *v469;
  uint64_t IntegerCast;
  unint64_t v471;
  uint64_t **v472;
  unint64_t v473;
  uint64_t **v474;
  char *v475;
  uint64_t v476;
  char *v477;
  uint64_t v478;
  BOOL __src;
  void *__srca[2];
  uint64_t v481[2];
  char *v482;
  uint64_t v483;
  char v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t **v488;
  int v489[2];
  llvm *PrimitiveSizeInBits;
  int v491[2];
  int v492;
  llvm::Instruction *v493[2];
  uint64_t v494;
  int v495;
  uint64_t v496;
  unsigned __int8 *v497;
  unsigned __int8 *v498;
  unsigned __int8 *v499;
  uint64_t v500[5];
  int v501[2];
  int v502[2];
  void *v503;
  uint64_t v504;
  void *v505;
  uint64_t v506;
  _BYTE v507[1664];
  void *v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  _BYTE *v512;
  uint64_t v513;
  _BYTE v514[64];
  void *v515;
  uint64_t v516;
  _BYTE v517[16];
  void *v518;
  uint64_t v519;
  _BYTE v520[56];
  void *v521[2];
  _BYTE v522[48];
  _QWORD *v523;
  uint64_t v524;
  _QWORD v525[8];

  v8 = a2;
  v525[6] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v501 = a2;
  *(_QWORD *)v502 = a3;
  v523 = v525;
  v524 = 0xC00000000;
  v521[0] = v522;
  v521[1] = (void *)0x600000000;
  v500[0] = (uint64_t)v501;
  v500[1] = (uint64_t)&v523;
  v500[2] = (uint64_t)v521;
  v500[3] = (uint64_t)a5;
  v500[4] = a1;
  sub_1C6095230((uint64_t)&v497, a2, a3);
  if (dword_1ED82BD78 == a4)
    goto LABEL_2;
  v13 = v498;
  if (v498)
  {
    v14 = v497;
    if (v498[16] == 89 && *(_BYTE *)(**((_QWORD **)v497 - 8) + 8) == 19)
      goto LABEL_2;
  }
  else
  {
    v14 = v497;
  }
  v15 = v14[16];
  if ((*(_DWORD *)(*(_QWORD *)v14 + 8) & 0xFE) != 0x12)
  {
    if (v15 != 61 || (*(_DWORD *)(**((_QWORD **)v14 - 8) + 8) & 0xFE) != 0x12)
      goto LABEL_22;
LABEL_15:
    *(_OWORD *)__srca = 0u;
    *(_OWORD *)v481 = 0u;
    v12 = a1;
    v10 = v8;
    v11 = a3;
    goto LABEL_16;
  }
  if (v15 != 90)
    goto LABEL_15;
LABEL_22:
  v493[0] = (llvm::Instruction *)v14;
  v492 = a4;
  if (!a3)
    goto LABEL_2;
  v16 = 8 * a3;
  v17 = 8 * a3;
  v18 = v8;
  while (1)
  {
    v19 = *(unsigned __int8 *)(*v18 + 16);
    v20 = v19 == 5 || (v19 - 4) >= 0x11;
    if (v20)
      break;
    ++v18;
    v17 -= 8;
    if (!v17)
      goto LABEL_2;
  }
  v21 = 0;
  v22 = 8 * a3;
  v23 = v8;
  do
  {
    if (*(unsigned __int8 *)(*v23 + 16) - 11 >= 2)
    {
      if (v21)
      {
        if (*v23 != v21)
          goto LABEL_38;
      }
      else
      {
        v21 = *v23;
      }
    }
    ++v23;
    v22 -= 8;
  }
  while (v22);
  if (v21)
  {
LABEL_2:
    if (sub_1C6095708(v500, (uint64_t)&v497))
      goto LABEL_3;
    goto LABEL_17;
  }
LABEL_38:
  v24 = sub_1C60959BC(v8, a3);
  if (!v13 || !v24)
    goto LABEL_2;
  v25 = v13[16];
  if ((v25 - 89) > 3 || v25 == 91)
  {
    if (v25 != 28)
      goto LABEL_47;
    goto LABEL_2;
  }
  v26 = 8 * a3;
  v27 = v8;
  do
  {
    if (!sub_1C6095A80(*v27))
      goto LABEL_2;
    ++v27;
    v26 -= 8;
  }
  while (v26);
  do
  {
LABEL_47:
    v28 = sub_1C477672C(a1 + 1472, *v8);
    v29 = *(_QWORD *)(a1 + 1480);
    if (v29 == *(_QWORD *)(a1 + 1472))
      v30 = 1492;
    else
      v30 = 1488;
    if (v28 != (_QWORD *)(v29 + 8 * *(unsigned int *)(a1 + v30)))
      goto LABEL_91;
    ++v8;
    v16 -= 8;
  }
  while (v16);
  v503 = 0;
  if ((sub_1C61B5A68(a1 + 80, (uint64_t)v493[0], &v503) & 1) != 0)
  {
    v31 = *((_QWORD *)v503 + 1);
    if (v31)
    {
      if (sub_1C63DEE0C(*((_QWORD *)v503 + 1), *(uint64_t **)v501, *(unint64_t *)v502))
      {
        *(_OWORD *)v493 = *(_OWORD *)a5;
        v56 = *(unsigned int *)(v31 + 176);
        if (v56 >= *(_DWORD *)(v31 + 180))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v31 + 168, v31 + 184, v56 + 1, 16);
          LODWORD(v56) = *(_DWORD *)(v31 + 176);
        }
        *(_OWORD *)(*(_QWORD *)(v31 + 168) + 16 * v56) = *(_OWORD *)v493;
        ++*(_DWORD *)(v31 + 176);
        goto LABEL_17;
      }
      goto LABEL_2;
    }
  }
  if (*(_QWORD *)v502)
  {
    v32 = *(uint64_t **)v501;
    v33 = 8 * *(_QWORD *)v502;
    do
    {
      v34 = *v32;
      if (*v32)
        v35 = *(unsigned __int8 *)(*v32 + 16) >= 0x1Cu;
      else
        v35 = 0;
      if (v35)
      {
        v503 = 0;
        if ((sub_1C61B5A68(a1 + 80, v34, &v503) & 1) != 0)
        {
          if (*((_QWORD *)v503 + 1))
            goto LABEL_2;
        }
      }
      ++v32;
      v33 -= 8;
    }
    while (v33);
    if (*(_QWORD *)v502)
    {
      v36 = *(uint64_t **)v501;
      v37 = *(_QWORD *)(a1 + 1904);
      v38 = *(_QWORD *)(a1 + 1912);
      do
      {
        if (v38)
        {
          v39 = 8 * v38;
          v40 = *(_QWORD **)(a1 + 1904);
          while (*v40 != *v36)
          {
            ++v40;
            v39 -= 8;
            if (!v39)
            {
              v40 = (_QWORD *)(v37 + 8 * v38);
              break;
            }
          }
        }
        else
        {
          v40 = *(_QWORD **)(a1 + 1904);
        }
        if (v38 != ((uint64_t)v40 - v37) >> 3)
          goto LABEL_2;
        ++v36;
      }
      while (v36 != (uint64_t *)(*(_QWORD *)v501 + 8 * *(_QWORD *)v502));
    }
  }
  v41 = *((_QWORD *)v493[0] + 5);
  v496 = v41;
  if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(*(_QWORD *)(a1 + 1960), v41))
  {
LABEL_91:
    v10 = *(uint64_t **)v501;
    v11 = *(_QWORD *)v502;
    *(_OWORD *)__srca = 0u;
    *(_OWORD *)v481 = 0u;
    goto LABEL_4;
  }
  if (!sub_1C6095708(v500, (uint64_t)&v497))
    goto LABEL_17;
  v42 = (uint64_t *)sub_1C63DEF88(a1 + 1856, &v496);
  v44 = *v42;
  if (!*v42)
  {
    v45 = v42;
    v46 = operator new();
    v44 = v46;
    *(_QWORD *)v46 = v41;
    *(_QWORD *)(v46 + 8) = 0;
    *(_QWORD *)(v46 + 16) = 0;
    *(_QWORD *)(v46 + 24) = 0;
    v47 = -1;
    v48 = v41 + 40;
    do
    {
      v48 = *(_QWORD *)(v48 + 8);
      ++v47;
    }
    while (v48 != v41 + 40);
    *(_DWORD *)(v46 + 32) = v47;
    *(_DWORD *)(v46 + 36) = v47;
    *(_QWORD *)(v46 + 40) = 0;
    *(_QWORD *)(v46 + 48) = 0;
    *(_DWORD *)(v46 + 56) = 0;
    *(_QWORD *)(v46 + 64) = 0;
    *(_QWORD *)(v46 + 72) = 0;
    *(_DWORD *)(v46 + 80) = 0;
    *(_QWORD *)(v46 + 88) = 0;
    *(_QWORD *)(v46 + 96) = 0;
    *(_DWORD *)(v46 + 104) = 0;
    *(_OWORD *)(v46 + 112) = 0u;
    *(_OWORD *)(v46 + 128) = 0u;
    *(_OWORD *)(v46 + 144) = 0u;
    *(_OWORD *)(v46 + 153) = 0u;
    v49 = dword_1ED82BBF8;
    *(_DWORD *)(v46 + 172) = 0;
    *(_DWORD *)(v46 + 176) = v49;
    *(_DWORD *)(v46 + 180) = 1;
    v50 = (_QWORD *)*v45;
    *v45 = v46;
    if (v50)
    {
      sub_1C6176BF8(v50 + 11);
      sub_1C60AFFDC(v50 + 8);
      MEMORY[0x1CAA32FB4](v50[5], 8);
      v503 = v50 + 1;
      sub_1C60B0060((void ***)&v503);
      MEMORY[0x1CAA32FC0](v50, 0x10A0C4010E67334);
      v44 = *v45;
    }
  }
  if (*((_BYTE *)v493[0] + 16) == 83
    || (v51 = *(uint64_t **)v501, v52 = *(_QWORD *)v502, sub_1C6095A80((uint64_t)v493[0]))
    || (sub_1C609E1BC((llvm **)v51, v52) & 1) != 0)
  {
    *(_QWORD *)v491 = 0;
    goto LABEL_86;
  }
  *(_QWORD *)v489 = *(_QWORD *)(v44 + 144);
  if (!v52)
  {
    LODWORD(PrimitiveSizeInBits) = 0;
    goto LABEL_269;
  }
  v82 = (llvm **)v51;
  PrimitiveSizeInBits = (llvm *)(v44 + 64);
  *(_QWORD *)v491 = &v51[v52];
  while (1)
  {
    v83 = *v82;
    if (sub_1C60AC688(*v82, v53) && (sub_1C609E234((uint64_t)v83) & 1) != 0)
      goto LABEL_131;
    v84 = *((unsigned __int8 *)v83 + 16);
    if (v83)
      v85 = v84 >= 0x1C;
    else
      v85 = 0;
    if (!v85)
    {
      v86 = (uint64_t)v497;
      if (v83 == (llvm *)v497)
        goto LABEL_156;
LABEL_151:
      v503 = 0;
      if (sub_1C61B57BC(*(_QWORD *)(v44 + 64), *(_DWORD *)(v44 + 80), (uint64_t)v83, &v503))
      {
        if (v503 != (void *)(*(_QWORD *)(v44 + 64) + 80 * *(unsigned int *)(v44 + 80)))
        {
          v91 = (char *)v503 + 8;
          v503 = 0;
          if ((sub_1C61B5A68((uint64_t)v91, v86, &v503) & 1) != 0)
          {
            v92 = *((_QWORD *)v503 + 1);
            if (v92)
            {
              if (*(_DWORD *)(v92 + 144) == *(_DWORD *)(v44 + 180))
                goto LABEL_131;
            }
          }
        }
      }
      goto LABEL_156;
    }
    v87 = (int)v498;
    if (v498)
      v87 = v498[16] - 28;
    v88 = v84 - 28;
    if (v87 != v88)
    {
      v89 = (int)v499;
      if (v499)
        v89 = v499[16] - 28;
      v86 = (uint64_t)v497;
      if (v89 != v88 && v83 != (llvm *)v497)
        goto LABEL_151;
    }
    if (sub_1C63DFCC0(v44, (uint64_t)v83))
      goto LABEL_131;
LABEL_156:
    if (*((unsigned __int8 *)v83 + 16) <= 0x1Bu)
      v83 = 0;
    if (sub_1C63DFCC0(v44, (uint64_t)v83))
    {
      ScheduleDataChunks = llvm::slpvectorizer::BoUpSLP::BlockScheduling::allocateScheduleDataChunks((llvm::slpvectorizer::BoUpSLP::BlockScheduling *)v44);
      *(_QWORD *)ScheduleDataChunks = v83;
      v131 = *(_DWORD *)(v44 + 180);
      v132 = (uint64_t)v497;
      *(_BYTE *)(ScheduleDataChunks + 160) = 0;
      *(_QWORD *)(ScheduleDataChunks + 24) = ScheduleDataChunks;
      *(_QWORD *)(ScheduleDataChunks + 32) = 0;
      *(_QWORD *)(ScheduleDataChunks + 40) = 0;
      *(_DWORD *)(ScheduleDataChunks + 144) = v131;
      *(_QWORD *)(ScheduleDataChunks + 152) = -1;
      *(_DWORD *)(ScheduleDataChunks + 56) = 0;
      *(_DWORD *)(ScheduleDataChunks + 104) = 0;
      *(_QWORD *)(ScheduleDataChunks + 8) = v132;
      *(_QWORD *)(ScheduleDataChunks + 16) = 0;
      goto LABEL_235;
    }
    v93 = *(const llvm::Instruction **)(v44 + 136);
    if (v93)
      break;
    v104 = *((_QWORD *)v83 + 4);
    if (v104)
      v105 = v104 == *((_QWORD *)v83 + 5) + 40;
    else
      v105 = 1;
    if (v105)
      v106 = 0;
    else
      v106 = (const llvm::Instruction *)(v104 - 24);
    llvm::slpvectorizer::BoUpSLP::BlockScheduling::initScheduleData(v44, v83, v106, 0, 0);
    *(_QWORD *)(v44 + 136) = v83;
    v107 = *((_QWORD *)v83 + 4);
    if (v107)
      v108 = v107 == *((_QWORD *)v83 + 5) + 40;
    else
      v108 = 1;
    if (v108)
      v109 = 0;
    else
      v109 = v107 - 24;
    *(_QWORD *)(v44 + 144) = v109;
    v110 = *((unsigned __int8 *)v83 + 16);
    if (v83)
      v111 = v110 >= 0x1C;
    else
      v111 = 0;
    if (!v111)
      goto LABEL_231;
    v112 = (int)v498;
    if (v498)
      v112 = v498[16] - 28;
    v113 = v110 - 28;
    if (v112 == v113)
      goto LABEL_131;
    v114 = (int)v499;
    if (v499)
      v114 = v499[16] - 28;
    v115 = (uint64_t)v497;
    if (v114 == v113 || v497 == (unsigned __int8 *)v83)
      goto LABEL_131;
LABEL_232:
    if (sub_1C63DFCC0(v44, (uint64_t)v83))
    {
      v128 = llvm::slpvectorizer::BoUpSLP::BlockScheduling::allocateScheduleDataChunks((llvm::slpvectorizer::BoUpSLP::BlockScheduling *)v44);
      *(_QWORD *)v128 = v83;
      v129 = *(_DWORD *)(v44 + 180);
      *(_BYTE *)(v128 + 160) = 0;
      *(_QWORD *)(v128 + 24) = v128;
      *(_QWORD *)(v128 + 32) = 0;
      *(_QWORD *)(v128 + 40) = 0;
      *(_DWORD *)(v128 + 144) = v129;
      *(_QWORD *)(v128 + 152) = -1;
      *(_DWORD *)(v128 + 56) = 0;
      *(_DWORD *)(v128 + 104) = 0;
      *(_QWORD *)(v128 + 8) = v115;
      *(_QWORD *)(v128 + 16) = 0;
      ScheduleDataChunks = v128;
LABEL_235:
      v503 = v83;
      v133 = sub_1C61B5730((uint64_t)PrimitiveSizeInBits, (uint64_t *)&v503);
      sub_1C61B5A08((_DWORD *)v133 + 2, (uint64_t *)&v497)[1] = ScheduleDataChunks;
    }
LABEL_131:
    if (++v82 == *(llvm ***)v491)
    {
      LODWORD(PrimitiveSizeInBits) = 0;
      *(_QWORD *)v491 = v44 + 88;
      v134 = 8 * v52;
      v135 = (llvm **)v51;
      do
      {
        v136 = *v135;
        if (!sub_1C60AC688(*v135, v53) || (sub_1C609E234((uint64_t)v136) & 1) == 0)
        {
          if (v136)
            v137 = *((unsigned __int8 *)v136 + 16) >= 0x1Cu;
          else
            v137 = 0;
          if (v137)
            v138 = (void *)sub_1C63DFCC0(v44, (uint64_t)v136);
          else
            v138 = 0;
          v503 = v138;
          sub_1C63DEB48(*(uint64_t *)v491, (uint64_t *)&v503);
          LODWORD(PrimitiveSizeInBits) = (*((_BYTE *)v503 + 160) != 0) | PrimitiveSizeInBits;
        }
        ++v135;
        v134 -= 8;
      }
      while (v134);
LABEL_269:
      *(_QWORD *)v491 = llvm::slpvectorizer::BoUpSLP::BlockScheduling::buildBundle(v44, (const llvm::Instruction *)v51, v52);
      v154 = *(_QWORD *)(v44 + 144);
      if (v154 != *(_QWORD *)v489)
      {
        v155 = *(_QWORD *)(v44 + 136);
        if (v155 != v154)
        {
          do
          {
            sub_1C60A4238(v44, v155, (void (*)(uint64_t, uint64_t))sub_1C60ACA58, (uint64_t)&v503);
            v156 = *(_QWORD *)(v155 + 32);
            if (v156)
              v157 = v156 == *(_QWORD *)(v155 + 40) + 40;
            else
              v157 = 1;
            if (v157)
              v155 = 0;
            else
              v155 = v156 - 24;
          }
          while (v155 != *(_QWORD *)(v44 + 144));
        }
        LODWORD(PrimitiveSizeInBits) = 1;
      }
      if (*(_QWORD *)v491)
        llvm::slpvectorizer::BoUpSLP::BlockScheduling::calculateDependencies(v44, *(uint64_t *)v491, 1, a1);
      if ((PrimitiveSizeInBits & 1) != 0)
      {
        llvm::slpvectorizer::BoUpSLP::BlockScheduling::resetSchedule((llvm::slpvectorizer::BoUpSLP::BlockScheduling *)v44);
        sub_1C63E1934(v44, v44 + 88);
      }
      if (((*(_QWORD *)v491 == 0) & PrimitiveSizeInBits) != 0)
        goto LABEL_292;
LABEL_286:
      if (*(_QWORD *)v491)
      {
        v159 = 0;
        v160 = *(_QWORD *)v491;
        do
        {
          v161 = *(_DWORD *)(v160 + 156);
          if (v161 == -1)
            goto LABEL_292;
          v159 += v161;
          v160 = *(_QWORD *)(v160 + 32);
        }
        while (v160);
        if (!v159 && !*(_BYTE *)(*(_QWORD *)v491 + 160))
          goto LABEL_294;
LABEL_292:
        while (1)
        {
          v162 = *(_QWORD *)(v44 + 120);
          if (*(_QWORD *)(v44 + 112) == v162)
            break;
          v158 = *(uint64_t **)(v162 - 8);
          sub_1C60ACA6C(v44 + 88);
          sub_1C60AC818(v44, v158, (_QWORD *)(v44 + 88));
          if (((*(_QWORD *)v491 == 0) & PrimitiveSizeInBits) == 0)
            goto LABEL_286;
        }
        if (*(_QWORD *)v491)
        {
LABEL_294:
          v163 = 0;
          v164 = *(_QWORD *)v491;
          do
          {
            v165 = *(_DWORD *)(v164 + 156);
            if (v165 == -1)
              goto LABEL_299;
            v163 += v165;
            v164 = *(_QWORD *)(v164 + 32);
          }
          while (v164);
          if (v163)
            goto LABEL_299;
        }
      }
      if (!*(_BYTE *)(*(_QWORD *)v491 + 160))
      {
        v13 = v498;
LABEL_86:
        PrimitiveSizeInBits = (llvm *)v499;
        if (v499 == v13)
        {
          if (v13)
          {
            switch(v13[16])
            {
              case '(':
              case ')':
              case '*':
              case '+':
              case ',':
              case '-':
              case '.':
              case '/':
              case '0':
              case '1':
              case '2':
              case '3':
              case '4':
              case '5':
              case '6':
              case '7':
              case '8':
              case '9':
              case ':':
              case 'U':
                *(_QWORD *)v491 = sub_1C6096018(a1, *(llvm::UndefValue ****)v501, *(unint64_t *)v502, 0, *(uint64_t *)v491, 1, (uint64_t)&v497, a5, v523, v524, 0, 0);
                if (*((unsigned __int8 *)v493[0] + 16) - 41 <= 0x11
                  && llvm::Instruction::isCommutative(v493[0]))
                {
                  v503 = &v505;
                  v504 = 0x800000000;
                  v508 = &v510;
                  v509 = 0x800000000;
                  llvm::slpvectorizer::BoUpSLP::reorderInputsAccordingToOpcode(*(uint64_t **)v501, *(uint64_t *)v502, (uint64_t)&v503, (uint64_t)&v508, *(_QWORD *)(a1 + 1984), *(_QWORD *)(a1 + 1928), a1);
                  sub_1C63DF06C(*(uint64_t *)v491, 0, v503, v504);
                  sub_1C63DF06C(*(uint64_t *)v491, 1u, v508, v509);
                  v518 = *(void **)v491;
                  LODWORD(v519) = 0;
                  llvm::slpvectorizer::BoUpSLP::buildTree_rec(a1, v503, v504, (v492 + 1), &v518);
                  v518 = *(void **)v491;
                  LODWORD(v519) = 1;
                  llvm::slpvectorizer::BoUpSLP::buildTree_rec(a1, v508, v509, (v492 + 1), &v518);
                  if (v508 != &v510)
                    free(v508);
                  v168 = (void **)v503;
                  if (v503 != &v505)
                    goto LABEL_761;
                }
                else
                {
                  sub_1C63DF158(*(uint64_t ***)v491);
                  v320 = *((_DWORD *)v493[0] + 5);
                  v321 = v320 & 0x7FFFFFF;
                  if ((v320 & 0x7FFFFFF) != 0)
                  {
                    v322 = 0;
                    v323 = (v492 + 1);
                    do
                    {
                      v503 = &v505;
                      v504 = 0x800000000;
                      if (*(_QWORD *)v502)
                      {
                        v324 = 0;
                        v325 = *(uint64_t **)v501;
                        v326 = 8 * *(_QWORD *)v502;
                        do
                        {
                          v327 = *v325;
                          v328 = *(_DWORD *)(*v325 + 20);
                          if ((v328 & 0x40000000) != 0)
                            v329 = *(_QWORD *)(v327 - 8);
                          else
                            v329 = v327 - 32 * (v328 & 0x7FFFFFF);
                          v330 = *(_QWORD *)(v329 + 32 * v322);
                          if (v324 >= HIDWORD(v504))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v503, (uint64_t)&v505, v324 + 1, 8);
                            v324 = v504;
                          }
                          *((_QWORD *)v503 + v324) = v330;
                          v324 = v504 + 1;
                          LODWORD(v504) = v504 + 1;
                          ++v325;
                          v326 -= 8;
                        }
                        while (v326);
                        v331 = v503;
                      }
                      else
                      {
                        v324 = 0;
                        v331 = &v505;
                      }
                      v508 = *(void **)v491;
                      LODWORD(v509) = v322;
                      llvm::slpvectorizer::BoUpSLP::buildTree_rec(a1, v331, v324, v323, &v508);
                      if (v503 != &v505)
                        free(v503);
                      ++v322;
                    }
                    while (v322 != v321);
                  }
                }
                goto LABEL_17;
              case '<':
                v248 = &v505;
                v503 = &v505;
                v504 = 0x600000000;
                v508 = &v510;
                v509 = 0x400000000;
                v249 = sub_1C6095DD0(*(uint64_t **)v501, *(unint64_t *)v502, (uint64_t)v493[0], *(_QWORD *)(a1 + 1936), *(llvm::Value **)(a1 + 1984), *(const llvm::DataLayout **)(a1 + 1928), (unsigned int **)&v508, (uint64_t)&v503);
                if (v249)
                {
                  if (v249 == 2)
                  {
                    v443 = (uint64_t **)sub_1C6096018(a1, *(llvm::UndefValue ****)v501, *(unint64_t *)v502, 1, *(uint64_t *)v491, 1, (uint64_t)&v497, a5, v523, v524, 0, 0);
                    sub_1C63DF158(v443);
                    v518 = v443;
                    LODWORD(v519) = 0;
                    llvm::slpvectorizer::BoUpSLP::buildTree_rec(a1, v503, v504, (v492 + 1), &v518);
                  }
                  else if (v249 == 1)
                  {
                    if ((_DWORD)v509)
                    {
                      sub_1C608F2D4((uint64_t *)&v508);
                      v252 = *(_QWORD *)v502;
                      v253 = v524;
                      v250 = (char *)v508;
                      v251 = v509;
                    }
                    else
                    {
                      v250 = 0;
                      v251 = 0;
                      v252 = *(_QWORD *)v502;
                      v253 = v524;
                    }
                    v453 = (uint64_t **)sub_1C6096018(a1, *(llvm::UndefValue ****)v501, v252, 0, *(uint64_t *)v491, 1, (uint64_t)&v497, a5, v523, v253, v250, v251);
                    sub_1C63DF158(v453);
                  }
                }
                else
                {
                  llvm::slpvectorizer::BoUpSLP::BlockScheduling::cancelScheduling(v44, *(llvm ***)v501, *(uint64_t *)v502, (uint64_t)v493[0]);
                  sub_1C6096018(a1, *(llvm::UndefValue ****)v501, *(unint64_t *)v502, 2, 0, 0, (uint64_t)&v497, a5, v523, v524, 0, 0);
                }
                if (v508 != &v510)
                  free(v508);
                v168 = (void **)v503;
                goto LABEL_760;
              case '=':
                v242 = (llvm *)**((_QWORD **)v493[0] - 8);
                sub_1C4768AD0(*(_QWORD *)(a1 + 1984), (uint64_t)v242);
                v244 = v243;
                if (v246 != sub_1C53E2F94(*(_QWORD *)(a1 + 1984), (uint64_t)v242) || v244 != v245)
                  goto LABEL_455;
                v248 = (void **)&v510;
                v508 = &v510;
                v509 = 0x400000000;
                sub_1C4848C0C((unsigned int *)&v508, *(unint64_t *)v502, 0);
                v503 = &v505;
                v504 = 0x800000000;
                sub_1C4848C0C((unsigned int *)&v503, *(unint64_t *)v502, 0);
                v357 = (llvm::Type **)v508;
                v358 = *(_QWORD *)v502;
                if (!*(_QWORD *)v502)
                  goto LABEL_693;
                v359 = *(uint64_t **)v501;
                v360 = v503;
                v361 = 8 * *(_QWORD *)v502;
                do
                {
                  v362 = *v359;
                  v363 = *(unsigned __int8 *)(*v359 + 16);
                  if (v363 == 60 || v363 == 61)
                  {
                    v364 = *(_WORD *)(v362 + 18);
                    if ((v364 & 0x380) != 0 || (v364 & 1) != 0)
                      goto LABEL_617;
                  }
                  else if ((v363 - 63) < 3 || (*(_WORD *)(v362 + 18) & 1) != 0)
                  {
LABEL_617:
                    llvm::slpvectorizer::BoUpSLP::BlockScheduling::cancelScheduling(v44, *(llvm ***)v501, v358, (uint64_t)v493[0]);
                    sub_1C6096018(a1, *(llvm::UndefValue ****)v501, *(unint64_t *)v502, 2, 0, 0, (uint64_t)&v497, a5, v523, v524, 0, 0);
                    goto LABEL_757;
                  }
                  *v357++ = *(llvm::Type **)(v362 - 32);
                  *v360++ = *(_QWORD *)(v362 - 64);
                  ++v359;
                  v361 -= 8;
                }
                while (v361);
                v357 = (llvm::Type **)v508;
LABEL_693:
                v518 = v520;
                v519 = 0x400000000;
                if ((llvm::sortPtrAccesses(v357, v509, v242, *(llvm::Value **)(a1 + 1984), *(const llvm::DataLayout **)(a1 + 1928), (uint64_t)&v518) & 1) == 0)
                {
                  v410 = *(_QWORD *)v502;
LABEL_754:
                  llvm::slpvectorizer::BoUpSLP::BlockScheduling::cancelScheduling(v44, *(llvm ***)v501, v410, (uint64_t)v493[0]);
                  sub_1C6096018(a1, *(llvm::UndefValue ****)v501, *(unint64_t *)v502, 2, 0, 0, (uint64_t)&v497, a5, v523, v524, 0, 0);
                  goto LABEL_755;
                }
                if ((_DWORD)v519)
                {
                  v408 = (llvm::Type **)((char *)v508 + 8 * *(unsigned int *)v518);
                  v409 = (llvm::Type **)((char *)v508 + 8 * *((unsigned int *)v518 + v519 - 1));
                }
                else
                {
                  v408 = (llvm::Type **)v508;
                  v409 = (llvm::Type **)((char *)v508 + 8 * v509 - 8);
                }
                PointersDiff = llvm::getPointersDiff(v242, *v408, v242, *v409, *(llvm::Value **)(a1 + 1984), *(const llvm::DataLayout **)(a1 + 1928), 0, 1, __src);
                v410 = *(_QWORD *)v502;
                if (*(_QWORD *)v502 - 1 != PointersDiff)
                  goto LABEL_754;
                if ((_DWORD)v519)
                {
                  sub_1C608F2D4((uint64_t *)&v518);
                  v472 = (uint64_t **)sub_1C6096018(a1, *(llvm::UndefValue ****)v501, *(unint64_t *)v502, 0, *(uint64_t *)v491, 1, (uint64_t)&v497, a5, v523, v524, (char *)v518, v519);
                }
                else
                {
                  v472 = (uint64_t **)sub_1C6096018(a1, *(llvm::UndefValue ****)v501, *(unint64_t *)v502, 0, *(uint64_t *)v491, 1, (uint64_t)&v497, a5, v523, v524, 0, 0);
                }
                v474 = v472;
                sub_1C63DF158(v472);
                v515 = v474;
                LODWORD(v516) = 0;
                llvm::slpvectorizer::BoUpSLP::buildTree_rec(a1, v503, v504, (v492 + 1), &v515);
LABEL_755:
                if (v518 != v520)
                  free(v518);
LABEL_757:
                if (v503 != &v505)
                  free(v503);
                v168 = (void **)v508;
LABEL_760:
                if (v168 == v248)
                  goto LABEL_17;
                goto LABEL_761;
              case '>':
                v228 = *(uint64_t **)v501;
                v227 = *(_QWORD *)v502;
                v229 = 8 * *(_QWORD *)v502;
                if (!*(_QWORD *)v502)
                  goto LABEL_449;
                v230 = 8 * *(_QWORD *)v502;
                v231 = *(uint64_t **)v501;
                while ((*(_DWORD *)(*v231 + 20) & 0x7FFFFFF) == 2)
                {
                  ++v231;
                  v230 -= 8;
                  if (!v230)
                  {
                    if (*((_BYTE *)v493[0] + 16) != 62 || v493[0] == 0)
                      v233 = 24;
                    else
                      v233 = 64;
                    v234 = *(_QWORD *)((char *)v493[0] + v233);
                    v235 = 8 * *(_QWORD *)v502;
                    v236 = *(uint64_t **)v501;
                    while (1)
                    {
                      v237 = *v236;
                      v238 = *(_BYTE *)(*v236 + 16) != 62 || v237 == 0;
                      v239 = v238 ? 24 : 64;
                      if (v234 != *(_QWORD *)(v237 + v239))
                        goto LABEL_649;
                      ++v236;
                      v235 -= 8;
                      if (!v235)
                      {
LABEL_449:
                        v240 = *((_DWORD *)v493[0] + 5);
                        if ((v240 & 0x40000000) != 0)
                          v241 = (char *)*((_QWORD *)v493[0] - 1);
                        else
                          v241 = (char *)v493[0] - 32 * (v240 & 0x7FFFFFF);
                        if (!*(_QWORD *)v502)
                        {
LABEL_762:
                          v437 = (void *)sub_1C6096018(a1, (llvm::UndefValue ***)v228, v227, 0, *(uint64_t *)v491, 1, (uint64_t)&v497, a5, v523, v524, 0, 0);
                          v438 = 0;
                          v508 = &v510;
                          v509 = 0x800000000;
                          v439 = &v505;
                          v503 = &v505;
                          v504 = 0x200000000;
                          do
                          {
                            v440 = v438;
                            *v439 = v439 + 2;
                            v439[1] = (void *)0x800000000;
                            if ((_DWORD)v509)
                              sub_1C49EEBE4((uint64_t)v439, (uint64_t)&v508);
                            v439 += 10;
                            v438 = 1;
                          }
                          while ((v440 & 1) == 0);
                          LODWORD(v504) = 2;
                          if (v508 != &v510)
                            free(v508);
                          if (*(_QWORD *)v502)
                          {
                            v444 = *(uint64_t **)v501;
                            v445 = 8 * *(_QWORD *)v502;
                            do
                            {
                              v446 = (unsigned int *)v503;
                              v447 = *(_QWORD *)(*v444 - 32 * (*(_DWORD *)(*v444 + 20) & 0x7FFFFFF));
                              v448 = *((unsigned int *)v503 + 2);
                              if (v448 >= *((unsigned int *)v503 + 3))
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v503, (uint64_t)v503 + 16, v448 + 1, 8);
                                v448 = v446[2];
                              }
                              *(_QWORD *)(*(_QWORD *)v446 + 8 * v448) = v447;
                              ++v446[2];
                              ++v444;
                              v445 -= 8;
                            }
                            while (v445);
                          }
                          sub_1C63DF06C((uint64_t)v437, 0, *(const void **)v503, *((unsigned int *)v503 + 2));
                          v441 = *((_DWORD *)v493[0] + 5);
                          if ((v441 & 0x40000000) != 0)
                            v442 = (char *)*((_QWORD *)v493[0] - 1);
                          else
                            v442 = (char *)v493[0] - 32 * (v441 & 0x7FFFFFF);
                          v449 = *(_QWORD *)v502;
                          if (*(_QWORD *)v502)
                          {
                            v450 = 0;
                            v451 = (llvm::Type ***)**((_QWORD **)v442 + 4);
                            v452 = *(uint64_t **)v501;
                            while (**(llvm::Type *****)(*(_QWORD *)(*(_QWORD *)v501 + v450)
                                                       - 32
                                                       * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v501 + v450) + 20) & 0x7FFFFFF)
                                                       + 32) == v451)
                            {
                              v450 += 8;
                              if (8 * *(_QWORD *)v502 == v450)
                                goto LABEL_788;
                            }
                            v454 = **((_QWORD **)v493[0] - 4 * (v441 & 0x7FFFFFF));
                            if ((*(_DWORD *)(v454 + 8) & 0xFE) == 0x12)
                              v454 = **(_QWORD **)(v454 + 16);
                            llvm::DataLayout::getIndexType(*(llvm::DataLayout **)(a1 + 1984), (llvm::Type *)v454);
                            v451 = v455;
                            v452 = *(uint64_t **)v501;
                            v449 = *(_QWORD *)v502;
LABEL_788:
                            if (v449)
                            {
                              v461 = 8 * v449;
                              do
                              {
                                v462 = *v452;
                                v463 = *(_DWORD *)(*v452 + 20);
                                if ((v463 & 0x40000000) != 0)
                                  v464 = *(_QWORD *)(v462 - 8);
                                else
                                  v464 = v462 - 32 * (v463 & 0x7FFFFFF);
                                v465 = *(_DWORD **)(v464 + 32);
                                v466 = v465 + 6;
                                v467 = v465[8];
                                v468 = v467 - 1;
                                if (v467 >= 0x41)
                                  v466 = (_QWORD *)(*v466 + 8 * (v468 >> 6));
                                v469 = (char *)v503 + 80 * v504;
                                IntegerCast = llvm::ConstantExpr::getIntegerCast((llvm::ConstantExpr *)v465, v451, (llvm::Type *)((*v466 >> v468) & 1));
                                v471 = *((unsigned int *)v469 - 18);
                                if (v471 >= *((unsigned int *)v469 - 17))
                                {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v469 - 80), (uint64_t)(v469 - 64), v471 + 1, 8);
                                  v471 = *((unsigned int *)v469 - 18);
                                }
                                *(_QWORD *)(*((_QWORD *)v469 - 10) + 8 * v471) = IntegerCast;
                                ++*((_DWORD *)v469 - 18);
                                ++v452;
                                v461 -= 8;
                              }
                              while (v461);
                            }
                          }
                          sub_1C63DF06C((uint64_t)v437, 1u, *((const void **)v503 + 10 * v504 - 10), *((unsigned int *)v503 + 20 * v504 - 18));
                          v456 = v504;
                          if ((_DWORD)v504)
                          {
                            v457 = 0;
                            v458 = 0;
                            do
                            {
                              v459 = *(_QWORD *)((char *)v503 + v457);
                              v460 = *(unsigned int *)((char *)v503 + v457 + 8);
                              v508 = v437;
                              LODWORD(v509) = v458;
                              llvm::slpvectorizer::BoUpSLP::buildTree_rec(a1, v459, v460, (v492 + 1), &v508);
                              ++v458;
                              v457 += 80;
                            }
                            while (v456 != v458);
                          }
                          goto LABEL_792;
                        }
                        *(_QWORD *)v489 = **((_QWORD **)v241 + 4);
                        v369 = *(uint64_t **)v501;
                        while (1)
                        {
                          v370 = *v369;
                          v371 = *(_DWORD *)(*v369 + 20);
                          v372 = (v371 & 0x40000000) != 0 ? *(_QWORD *)(v370 - 8) : v370 - 32 * (v371 & 0x7FFFFFF);
                          v373 = *(uint64_t **)(v372 + 32);
                          if (*((_BYTE *)v373 + 16) != 16)
                            goto LABEL_649;
                          v374 = *v373;
                          if (*v373 != *(_QWORD *)v489)
                          {
                            if ((*(_DWORD *)(v374 + 8) & 0xFE) == 0x12)
                              v374 = **(_QWORD **)(v374 + 16);
                            PrimitiveSizeInBits = (llvm *)llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v374);
                            v375 = *(_DWORD *)(*(_QWORD *)v370 + 8);
                            if ((v375 & 0xFE) == 0x12)
                              v375 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v370 + 16) + 8);
                            if (*(_DWORD *)(llvm::DataLayout::getPointerAlignElem(*(llvm::DataLayout **)(a1 + 1984), v375 >> 8)+ 12) < PrimitiveSizeInBits)goto LABEL_649;
                          }
                          ++v369;
                          v229 -= 8;
                          if (!v229)
                            goto LABEL_762;
                        }
                      }
                    }
                  }
                }
LABEL_649:
                v167 = v44;
                v57 = v228;
                v58 = v227;
                goto LABEL_457;
              case 'B':
              case 'C':
              case 'D':
              case 'E':
              case 'F':
              case 'G':
              case 'H':
              case 'I':
              case 'J':
              case 'K':
              case 'L':
              case 'M':
                v54 = *((_DWORD *)v493[0] + 5);
                if ((v54 & 0x40000000) != 0)
                  v55 = (uint64_t **)*((_QWORD *)v493[0] - 1);
                else
                  v55 = (uint64_t **)((char *)v493[0] - 32 * (v54 & 0x7FFFFFF));
                v57 = *(uint64_t **)v501;
                v58 = *(_QWORD *)v502;
                if (!*(_QWORD *)v502)
                  goto LABEL_111;
                v59 = *v55;
                v60 = 8 * *(_QWORD *)v502;
                v61 = *v59;
                v62 = *(uint64_t **)v501;
                while (1)
                {
                  v63 = *v62;
                  v64 = *(_DWORD *)(*v62 + 20);
                  v65 = (v64 & 0x40000000) != 0 ? *(_QWORD ***)(v63 - 8) : (_QWORD **)(v63 - 32 * (v64 & 0x7FFFFFF));
                  if (**v65 != v61)
                    goto LABEL_456;
                  v66 = *(_DWORD *)(v61 + 8);
                  v67 = v66 > 0x14u || ((1 << v66) & 0x10A07F) == 0;
                  v68 = v66 & 0xFD;
                  if (v67 || v68 == 4)
                    goto LABEL_456;
                  ++v62;
                  v60 -= 8;
                  if (!v60)
                  {
LABEL_111:
                    *(_QWORD *)v491 = sub_1C6096018(a1, *(llvm::UndefValue ****)v501, *(unint64_t *)v502, 0, *(uint64_t *)v491, 1, (uint64_t)&v497, a5, v523, v524, 0, 0);
                    sub_1C63DF158(*(uint64_t ***)v491);
                    v70 = *((_DWORD *)v493[0] + 5);
                    v71 = v70 & 0x7FFFFFF;
                    if ((v70 & 0x7FFFFFF) != 0)
                    {
                      v72 = 0;
                      v73 = (v492 + 1);
                      do
                      {
                        v503 = &v505;
                        v504 = 0x800000000;
                        if (*(_QWORD *)v502)
                        {
                          v74 = 0;
                          v75 = *(uint64_t **)v501;
                          v76 = 8 * *(_QWORD *)v502;
                          do
                          {
                            v77 = *v75;
                            v78 = *(_DWORD *)(*v75 + 20);
                            if ((v78 & 0x40000000) != 0)
                              v79 = *(_QWORD *)(v77 - 8);
                            else
                              v79 = v77 - 32 * (v78 & 0x7FFFFFF);
                            v80 = *(_QWORD *)(v79 + 32 * v72);
                            if (v74 >= HIDWORD(v504))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v503, (uint64_t)&v505, v74 + 1, 8);
                              v74 = v504;
                            }
                            *((_QWORD *)v503 + v74) = v80;
                            v74 = v504 + 1;
                            LODWORD(v504) = v504 + 1;
                            ++v75;
                            v76 -= 8;
                          }
                          while (v76);
                          v81 = v503;
                        }
                        else
                        {
                          v74 = 0;
                          v81 = &v505;
                        }
                        v508 = *(void **)v491;
                        LODWORD(v509) = v72;
                        llvm::slpvectorizer::BoUpSLP::buildTree_rec(a1, v81, v74, v73, &v508);
                        if (v503 != &v505)
                          free(v503);
                        ++v72;
                      }
                      while (v72 != v71);
                    }
                    goto LABEL_17;
                  }
                }
              case 'Q':
              case 'R':
                v169 = *((_WORD *)v493[0] + 9) & 0x3F;
                v170 = *((_DWORD *)v493[0] + 5);
                if ((v170 & 0x40000000) != 0)
                  v171 = (uint64_t **)*((_QWORD *)v493[0] - 1);
                else
                  v171 = (uint64_t **)((char *)v493[0] - 32 * (v170 & 0x7FFFFFF));
                v57 = *(uint64_t **)v501;
                v58 = *(_QWORD *)v502;
                if (!*(_QWORD *)v502)
                  goto LABEL_490;
                v266 = **v171;
                v267 = 8 * *(_QWORD *)v502;
                v268 = *(uint64_t **)v501;
                do
                {
                  v269 = *(_WORD *)(*v268 + 18) & 0x3F;
                  v270 = v269 == (_DWORD)v169 || dword_1C8677EB8[v169] == v269;
                  if (!v270 || **(_QWORD **)(*v268 - 64) != v266)
                    goto LABEL_456;
                  ++v268;
                  v267 -= 8;
                }
                while (v267);
LABEL_490:
                v271 = (void *)sub_1C6096018(a1, *(llvm::UndefValue ****)v501, *(unint64_t *)v502, 0, *(uint64_t *)v491, 1, (uint64_t)&v497, a5, v523, v524, 0, 0);
                *(_QWORD *)v491 = &v505;
                v503 = &v505;
                v504 = 0x800000000;
                v508 = &v510;
                v509 = 0x800000000;
                v272 = *((_WORD *)v493[0] + 9);
                if (v493[0] && *((_BYTE *)v493[0] + 16) == 81)
                {
                  v273 = *(_QWORD *)v502;
                  if ((v272 & 0x3E) != 0x20)
                  {
                    if (*(_QWORD *)v502)
                      goto LABEL_494;
                    goto LABEL_701;
                  }
                }
                else
                {
                  v411 = v272 & 0x3F;
                  if (v411 > 0xF || ((1 << v411) & 0xC3C3) == 0)
                  {
                    v273 = *(_QWORD *)v502;
                    if (*(_QWORD *)v502)
                    {
LABEL_494:
                      v274 = *(uint64_t **)v501;
                      v275 = 8 * v273;
                      do
                      {
                        v276 = *(_WORD *)(*v274 + 18) & 0x3F;
                        if (v276 == (_DWORD)v169)
                          v277 = *(_QWORD *)(*v274 - 32);
                        else
                          v277 = *(_QWORD *)(*v274 - 64);
                        if (v276 == (_DWORD)v169)
                          v278 = *(_QWORD *)(*v274 - 64);
                        else
                          v278 = *(_QWORD *)(*v274 - 32);
                        v279 = v504;
                        if (v504 >= (unint64_t)HIDWORD(v504))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v503, *(uint64_t *)v491, v504 + 1, 8);
                          v279 = v504;
                        }
                        *((_QWORD *)v503 + v279) = v278;
                        LODWORD(v504) = v504 + 1;
                        v280 = v509;
                        if (v509 >= (unint64_t)HIDWORD(v509))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v508, (uint64_t)&v510, v509 + 1, 8);
                          v280 = v509;
                        }
                        *((_QWORD *)v508 + v280) = v277;
                        LODWORD(v509) = v509 + 1;
                        ++v274;
                        v275 -= 8;
                      }
                      while (v275);
                    }
LABEL_701:
                    sub_1C63DF06C((uint64_t)v271, 0, v503, v504);
                    sub_1C63DF06C((uint64_t)v271, 1u, v508, v509);
                    v518 = v271;
                    LODWORD(v519) = 0;
                    llvm::slpvectorizer::BoUpSLP::buildTree_rec(a1, v503, v504, (v492 + 1), &v518);
                    v518 = v271;
                    LODWORD(v519) = 1;
                    llvm::slpvectorizer::BoUpSLP::buildTree_rec(a1, v508, v509, (v492 + 1), &v518);
                    if (v508 != &v510)
                      free(v508);
                    v168 = (void **)v503;
                    v332 = *(void ***)v491;
                    goto LABEL_672;
                  }
                  v273 = *(_QWORD *)v502;
                }
                llvm::slpvectorizer::BoUpSLP::reorderInputsAccordingToOpcode(*(uint64_t **)v501, v273, (uint64_t)&v503, (uint64_t)&v508, *(_QWORD *)(a1 + 1984), *(_QWORD *)(a1 + 1928), a1);
                goto LABEL_701;
              case 'S':
                v57 = *(uint64_t **)v501;
                v58 = *(_QWORD *)v502;
                if (!*(_QWORD *)v502)
                  goto LABEL_524;
                v281 = *(uint64_t **)v501;
                while (1)
                {
                  v282 = *v281;
                  v283 = *(_DWORD *)(*v281 + 20);
                  if ((v283 & 0x40000000) != 0)
                  {
                    v285 = *(_QWORD *)(v282 - 8);
                    v284 = v283 & 0x7FFFFFF;
                  }
                  else
                  {
                    v284 = v283 & 0x7FFFFFF;
                    v285 = v282 - 32 * v284;
                  }
                  if (v284)
                    break;
LABEL_523:
                  if (++v281 == (uint64_t *)(*(_QWORD *)v501 + 8 * *(_QWORD *)v502))
                  {
LABEL_524:
                    v290 = sub_1C6096018(a1, *(llvm::UndefValue ****)v501, *(unint64_t *)v502, 0, *(uint64_t *)v491, 1, (uint64_t)&v497, a5, v523, v524, 0, 0);
                    v503 = &v505;
                    v504 = 0x200000000;
                    v291 = *((_DWORD *)v493[0] + 5);
                    v292 = v291 & 0x7FFFFFF;
                    if ((v291 & 0x7FFFFFF) != 0)
                    {
                      v293 = (void *)v290;
                      v294 = 0;
                      do
                      {
                        v295 = *((_DWORD *)v493[0] + 5);
                        if ((v295 & 0x40000000) != 0)
                          v296 = (char *)*((_QWORD *)v493[0] - 1);
                        else
                          v296 = (char *)v493[0] - 32 * (v295 & 0x7FFFFFF);
                        if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(*(_QWORD *)(a1 + 1960), *(_QWORD *)&v296[32 * *((unsigned int *)v493[0] + 15) + 8 * v294]))
                        {
                          v508 = &v510;
                          v509 = 0x800000000;
                          if (*(_QWORD *)v502)
                          {
                            v298 = 0;
                            v303 = *(uint64_t **)v501;
                            v304 = *(_QWORD *)v501 + 8 * *(_QWORD *)v502;
                            do
                            {
                              v305 = *((_DWORD *)v493[0] + 5);
                              if ((v305 & 0x40000000) != 0)
                                v306 = (char *)*((_QWORD *)v493[0] - 1);
                              else
                                v306 = (char *)v493[0] - 32 * (v305 & 0x7FFFFFF);
                              v307 = *v303;
                              v308 = *(_DWORD *)(*v303 + 20);
                              v309 = v308 & 0x7FFFFFF;
                              if ((v308 & 0x7FFFFFF) != 0)
                              {
                                v310 = 0;
                                v311 = *(_QWORD *)&v306[32 * *((unsigned int *)v493[0] + 15) + 8 * v294];
                                while (1)
                                {
                                  v312 = v307 - 32 * v309;
                                  if ((v308 & 0x40000000) != 0)
                                    v312 = *(_QWORD *)(v307 - 8);
                                  if (*(_QWORD *)(v312 + 32 * *(unsigned int *)(v307 + 60) + 8 * v310) == v311)
                                    break;
                                  if (v309 == ++v310)
                                    goto LABEL_543;
                                }
                              }
                              else
                              {
LABEL_543:
                                LODWORD(v310) = -1;
                              }
                              if ((v308 & 0x40000000) != 0)
                                v313 = *(_QWORD *)(v307 - 8);
                              else
                                v313 = v307 - 32 * v309;
                              v314 = *(_QWORD *)(v313 + 32 * v310);
                              if (v298 >= HIDWORD(v509))
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v508, (uint64_t)&v510, v298 + 1, 8);
                                v298 = v509;
                              }
                              *((_QWORD *)v508 + v298) = v314;
                              v298 = v509 + 1;
                              LODWORD(v509) = v509 + 1;
                              ++v303;
                            }
                            while (v303 != (uint64_t *)v304);
                            v299 = (uint64_t *)v508;
                          }
                          else
                          {
                            v298 = 0;
                            v299 = &v510;
                          }
                          v302 = v298;
                        }
                        else
                        {
                          v300 = *(_QWORD *)v502;
                          v301 = llvm::PoisonValue::get(*(llvm::PoisonValue **)v493[0], v297);
                          v508 = &v510;
                          v509 = 0x800000000;
                          sub_1C4848C0C((unsigned int *)&v508, v300, (uint64_t)v301);
                          v299 = (uint64_t *)v508;
                          v302 = v509;
                        }
                        sub_1C63DF06C((uint64_t)v293, v294, v299, v302);
                        sub_1C63DF0F8((uint64_t)&v503, (unint64_t)&v508);
                        if (v508 != &v510)
                          free(v508);
                        ++v294;
                      }
                      while (v294 != v292);
                      v315 = v504;
                      if ((_DWORD)v504)
                      {
                        v316 = 0;
                        v317 = 0;
                        do
                        {
                          v318 = *(_QWORD *)((char *)v503 + v316);
                          v319 = *(unsigned int *)((char *)v503 + v316 + 8);
                          v508 = v293;
                          LODWORD(v509) = v317;
                          llvm::slpvectorizer::BoUpSLP::buildTree_rec(a1, v318, v319, (v492 + 1), &v508);
                          ++v317;
                          v316 += 80;
                        }
                        while (v315 != v317);
                      }
                    }
LABEL_792:
                    sub_1C618A4D0((char **)&v503);
                    goto LABEL_17;
                  }
                }
                v286 = 32 * v284;
                while (1)
                {
                  v287 = *(unsigned __int8 *)(*(_QWORD *)v285 + 16);
                  v288 = *(_QWORD *)v285 && v287 >= 0x1C;
                  v289 = !v288 || v287 - 29 > 0xA;
                  if (!v289)
                    goto LABEL_456;
                  v285 += 32;
                  v286 -= 32;
                  if (!v286)
                    goto LABEL_523;
                }
              case 'T':
                LODWORD(PrimitiveSizeInBits) = llvm::getVectorIntrinsicIDForCall((uint64_t)v493[0], *(uint64_t **)(a1 + 1944));
                sub_1C606C764((uint64_t)v493[0], v502[0], 0, &v508);
                v503 = *(void **)(*(_QWORD *)(*((_QWORD *)v493[0] + 5) + 56) + 40);
                v504 = (uint64_t)v493[0];
                v505 = v507;
                v506 = 0x800000000;
                sub_1C4EA1A3C((char **)v493[0], (uint64_t)&v505);
                v488 = (uint64_t **)sub_1C606C9D8((uint64_t)&v503, (uint64_t)&v508);
                v180 = (char *)v505;
                if ((_DWORD)v506)
                {
                  v181 = 208 * v506;
                  do
                  {
                    v182 = (void **)&v180[v181];
                    if (v180[v181 - 9] < 0)
                      operator delete(*(v182 - 4));
                    if (*((char *)v182 - 33) < 0)
                      operator delete(*(void **)&v180[v181 - 56]);
                    v183 = *(char **)&v180[v181 - 200];
                    if (&v180[v181 - 184] != v183)
                      free(v183);
                    v181 -= 208;
                  }
                  while (v181);
                  v180 = (char *)v505;
                }
                if (v180 != v507)
                  free(v180);
                if (!v488 && (llvm::isTriviallyVectorizable((llvm *)PrimitiveSizeInBits) & 1) == 0)
                {
                  llvm::slpvectorizer::BoUpSLP::BlockScheduling::cancelScheduling(v44, *(llvm ***)v501, *(uint64_t *)v502, (uint64_t)v493[0]);
                  sub_1C6096018(a1, *(llvm::UndefValue ****)v501, *(unint64_t *)v502, 2, 0, 0, (uint64_t)&v497, a5, v523, v524, 0, 0);
                  goto LABEL_578;
                }
                v487 = *((_QWORD *)v493[0] - 4);
                if (!v487 || *(_BYTE *)(v487 + 16) || *(_QWORD *)(v487 + 24) != *((_QWORD *)v493[0] + 9))
                  v487 = 0;
                v184 = *((unsigned __int8 *)v493[0] + 16);
                if (v184 == 84)
                {
                  v185 = 0;
                }
                else if (v184 == 39)
                {
                  v185 = (*((_DWORD *)v493[0] + 20) + 1);
                }
                else
                {
                  v185 = 2;
                }
                v186 = *((_DWORD *)v493[0] + 5);
                if (v186 < 0
                  && (v475 = (char *)v493[0] - 32 * (v186 & 0x7FFFFFF),
                      v476 = *((_QWORD *)v475 - 1),
                      (v476 & 0xFFFFFFFF0) != 0))
                {
                  v188 = -(uint64_t)(v186 & 0x7FFFFFF);
                  v187 = (*((_DWORD *)v475 - 3) - *(_DWORD *)&v475[-v476]);
                }
                else
                {
                  v187 = 0;
                  v188 = -(uint64_t)(v186 & 0x7FFFFFF);
                }
                v189 = -32 * v185 - 32 * v187 - 32 * v188 - 32;
                v518 = v520;
                v519 = 0x400000000;
                v190 = (v189 >> 5);
                sub_1C4848C0C((unsigned int *)&v518, v190, 0);
                v485 = v189 & 0x1FFFFFFFE0;
                if ((v189 & 0x1FFFFFFFE0) != 0)
                {
                  v191 = 0;
                  v192 = v493[0];
                  do
                  {
                    if (llvm::hasVectorInstrinsicScalarOpd((llvm *)PrimitiveSizeInBits, v191))
                      *((_QWORD *)v518 + v191) = *((_QWORD *)v192 - 4 * (*((_DWORD *)v493[0] + 5) & 0x7FFFFFF));
                    ++v191;
                    v192 = (llvm::Instruction *)((char *)v192 + 32);
                  }
                  while (v190 != v191);
                }
                *(_QWORD *)v489 = *(_QWORD *)v501;
                if (*(_QWORD *)v502)
                {
                  v483 = *(_QWORD *)v489 + 8 * *(_QWORD *)v502;
                  v482 = (char *)v493[0] - 8;
                  while (1)
                  {
                    v193 = **(_QWORD **)v489;
                    if (!**(_QWORD **)v489 || *(_BYTE *)(v193 + 16) != 84)
                      goto LABEL_575;
                    v194 = *(_QWORD *)(v193 - 32);
                    if (!v194 || *(_BYTE *)(v194 + 16) || *(_QWORD *)(v194 + 24) != *(_QWORD *)(v193 + 72))
                      v194 = 0;
                    if (v194 != v487)
                      goto LABEL_575;
                    v195 = llvm::getVectorIntrinsicIDForCall(**(_QWORD **)v489, *(uint64_t **)(a1 + 1944));
                    if (v195 != (_DWORD)PrimitiveSizeInBits)
                      goto LABEL_575;
                    if (v488)
                      break;
                    v197 = *((_DWORD *)v493[0] + 5);
                    if (v197 < 0)
                      v198 = *(_QWORD *)&v482[-32 * (v197 & 0x7FFFFFF)] >> 4;
                    else
                      LODWORD(v198) = 0;
                    v199 = *(_DWORD *)(v193 + 20);
                    if (v199 < 0)
                      v200 = *(_QWORD *)(v193 - 32 * (v199 & 0x7FFFFFF) - 8) >> 4;
                    else
                      LODWORD(v200) = 0;
                    if ((_DWORD)v198 != (_DWORD)v200)
                      goto LABEL_575;
                    if (v197 < 0)
                    {
                      v202 = &v482[-32 * (v197 & 0x7FFFFFF)];
                      v201 = &v202[-*(_QWORD *)v202];
                      if ((v199 & 0x80000000) == 0)
                      {
LABEL_373:
                        v203 = 0;
                        goto LABEL_406;
                      }
                    }
                    else
                    {
                      v201 = 0;
                      v202 = 0;
                      if ((v199 & 0x80000000) == 0)
                        goto LABEL_373;
                    }
                    v203 = v193 - 32 * (v199 & 0x7FFFFFF) - 8 - *(_QWORD *)(v193 - 32 * (v199 & 0x7FFFFFF) - 8);
LABEL_406:
                    while (v201 != v202)
                    {
                      if (*(_QWORD *)v201 != *(_QWORD *)v203
                        || *((_DWORD *)v201 + 2) != *(_DWORD *)(v203 + 8)
                        || *((_DWORD *)v201 + 3) != *(_DWORD *)(v203 + 12))
                      {
                        goto LABEL_575;
                      }
                      v201 += 16;
                      v203 += 16;
                    }
LABEL_407:
                    if (v485)
                    {
                      v215 = 0;
                      v216 = v518;
                      v217 = v193;
                      while (!llvm::hasVectorInstrinsicScalarOpd((llvm *)PrimitiveSizeInBits, v215)
                           || v216[v215] == *(_QWORD *)(v217 - 32 * (*(_DWORD *)(v193 + 20) & 0x7FFFFFF)))
                      {
                        ++v215;
                        v217 += 32;
                        if (v190 == v215)
                          goto LABEL_412;
                      }
LABEL_575:
                      llvm::slpvectorizer::BoUpSLP::BlockScheduling::cancelScheduling(v44, *(llvm ***)v501, *(uint64_t *)v502, (uint64_t)v493[0]);
                      sub_1C6096018(a1, *(llvm::UndefValue ****)v501, *(unint64_t *)v502, 2, 0, 0, (uint64_t)&v497, a5, v523, v524, 0, 0);
                      goto LABEL_576;
                    }
LABEL_412:
                    v218 = *((_DWORD *)v493[0] + 5);
                    if (v218 < 0)
                    {
                      v219 = v218 & 0x7FFFFFF;
                      if ((*(_QWORD *)&v482[-32 * v219] & 0xFFFFFFFF0) != 0)
                      {
                        v220 = (char *)v493[0] - 32 * v219;
                        v221 = *(unsigned int *)&v220[-*((_QWORD *)v220 - 1)];
                        v222 = *((unsigned int *)v220 - 3);
                        if ((_DWORD)v221 != (_DWORD)v222)
                        {
                          v223 = v193 - 32 * (*(_DWORD *)(v193 + 20) & 0x7FFFFFF);
                          v224 = &v220[32 * v221];
                          v225 = (_QWORD *)(v223 + 32 * *(unsigned int *)(v223 - *(_QWORD *)(v223 - 8)));
                          v226 = 32 * v222 - 32 * v221;
                          while (*(_QWORD *)v224 == *v225)
                          {
                            v224 += 32;
                            v225 += 4;
                            v226 -= 32;
                            if (!v226)
                              goto LABEL_413;
                          }
                          goto LABEL_575;
                        }
                      }
                    }
LABEL_413:
                    *(_QWORD *)v489 += 8;
                    if (*(_QWORD *)v489 == v483)
                    {
                      v473 = *(_QWORD *)v502;
                      *(_QWORD *)v489 = *(_QWORD *)v501;
                      goto LABEL_708;
                    }
                  }
                  v503 = *(void **)(*(_QWORD *)(*(_QWORD *)(v193 + 40) + 56) + 40);
                  v504 = v193;
                  v505 = v507;
                  v506 = 0x800000000;
                  sub_1C4EA1A3C((char **)v193, (uint64_t)&v505);
                  v196 = (uint64_t **)sub_1C606C9D8((uint64_t)&v503, (uint64_t)&v508);
                  if (v488 != v196)
                    goto LABEL_365;
                  v204 = *((_DWORD *)v493[0] + 5);
                  if (v204 < 0)
                    v205 = *(_QWORD *)&v482[-32 * (v204 & 0x7FFFFFF)] >> 4;
                  else
                    LODWORD(v205) = 0;
                  v206 = *(_DWORD *)(v193 + 20);
                  if (v206 < 0)
                    v207 = *(_QWORD *)(v193 - 32 * (v206 & 0x7FFFFFF) - 8) >> 4;
                  else
                    LODWORD(v207) = 0;
                  if ((_DWORD)v205 != (_DWORD)v207)
                    goto LABEL_365;
                  if (v204 < 0)
                  {
                    v209 = &v482[-32 * (v204 & 0x7FFFFFF)];
                    v208 = &v209[-*(_QWORD *)v209];
                    if ((v206 & 0x80000000) == 0)
                      goto LABEL_381;
                  }
                  else
                  {
                    v208 = 0;
                    v209 = 0;
                    if ((v206 & 0x80000000) == 0)
                    {
LABEL_381:
                      v210 = 0;
LABEL_382:
                      if (v208 == v209)
                      {
                        v484 = 0;
LABEL_384:
                        v211 = (char *)v505;
                        if ((_DWORD)v506)
                        {
                          v212 = 208 * v506;
                          do
                          {
                            v213 = (void **)&v211[v212];
                            if (v211[v212 - 9] < 0)
                              operator delete(*(v213 - 4));
                            if (*((char *)v213 - 33) < 0)
                              operator delete(*(void **)&v211[v212 - 56]);
                            v214 = *(char **)&v211[v212 - 200];
                            if (&v211[v212 - 184] != v214)
                              free(v214);
                            v212 -= 208;
                          }
                          while (v212);
                          v211 = (char *)v505;
                        }
                        if (v211 != v507)
                          free(v211);
                        if ((v484 & 1) != 0)
                          goto LABEL_575;
                        goto LABEL_407;
                      }
                      while (*(_QWORD *)v208 == *(_QWORD *)v210
                           && *((_DWORD *)v208 + 2) == *(_DWORD *)(v210 + 8)
                           && *((_DWORD *)v208 + 3) == *(_DWORD *)(v210 + 12))
                      {
                        v484 = 0;
                        v208 += 16;
                        v210 += 16;
                        if (v208 == v209)
                          goto LABEL_384;
                      }
LABEL_365:
                      v484 = 1;
                      goto LABEL_384;
                    }
                  }
                  v210 = v193 - 32 * (v206 & 0x7FFFFFF) - 8 - *(_QWORD *)(v193 - 32 * (v206 & 0x7FFFFFF) - 8);
                  goto LABEL_382;
                }
                v473 = 0;
LABEL_708:
                *(_QWORD *)v491 = sub_1C6096018(a1, *(llvm::UndefValue ****)v489, v473, 0, *(uint64_t *)v491, 1, (uint64_t)&v497, a5, v523, v524, 0, 0);
                sub_1C63DF158(*(uint64_t ***)v491);
                v412 = 0;
                v413 = *((unsigned __int8 *)v493[0] + 16);
                if (v413 != 84)
                {
                  if (v413 == 39)
                    v412 = (*((_DWORD *)v493[0] + 20) + 1);
                  else
                    v412 = 2;
                }
                v414 = 0;
                v415 = *((_DWORD *)v493[0] + 5);
                v416 = -(uint64_t)(v415 & 0x7FFFFFF);
                if (v415 < 0)
                {
                  v477 = (char *)v493[0] - 32 * (v415 & 0x7FFFFFF);
                  v478 = *((_QWORD *)v477 - 1);
                  if ((v478 & 0xFFFFFFFF0) != 0)
                    v414 = (*((_DWORD *)v477 - 3) - *(_DWORD *)&v477[-v478]);
                  else
                    v414 = 0;
                }
                v417 = -32 * v412 - 32 * v414 - 32 * v416 - 32;
                if ((v417 & 0x1FFFFFFFE0) != 0)
                {
                  v418 = 0;
                  v419 = (v492 + 1);
                  v420 = (v417 >> 5);
                  do
                  {
                    if (!llvm::hasVectorInstrinsicScalarOpd((llvm *)PrimitiveSizeInBits, v418))
                    {
                      v503 = &v505;
                      v504 = 0x800000000;
                      if (*(_QWORD *)v502)
                      {
                        v421 = 0;
                        v422 = *(uint64_t **)v501;
                        v423 = 8 * *(_QWORD *)v502;
                        do
                        {
                          v424 = *(_QWORD *)(*v422 - 32 * (*(_DWORD *)(*v422 + 20) & 0x7FFFFFF) + 32 * v418);
                          if (v421 >= HIDWORD(v504))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v503, (uint64_t)&v505, v421 + 1, 8);
                            v421 = v504;
                          }
                          *((_QWORD *)v503 + v421) = v424;
                          v421 = v504 + 1;
                          LODWORD(v504) = v504 + 1;
                          ++v422;
                          v423 -= 8;
                        }
                        while (v423);
                        v425 = v503;
                      }
                      else
                      {
                        v421 = 0;
                        v425 = &v505;
                      }
                      v515 = *(void **)v491;
                      LODWORD(v516) = v418;
                      llvm::slpvectorizer::BoUpSLP::buildTree_rec(a1, v425, v421, v419, &v515);
                      if (v503 != &v505)
                        free(v503);
                    }
                    ++v418;
                  }
                  while (v418 != v420);
                }
LABEL_576:
                if (v518 != v520)
                  free(v518);
LABEL_578:
                v168 = (void **)v509;
                v332 = (void **)&v511;
                goto LABEL_672;
              case 'Y':
              case '\\':
                v508 = &v510;
                v509 = 0x400000000;
                if (llvm::slpvectorizer::BoUpSLP::canReuseExtract((llvm::slpvectorizer::BoUpSLP *)a1, *(uint64_t **)v501, *(uint64_t *)v502, v43, (uint64_t *)&v508))
                {
                  sub_1C6096018(a1, *(llvm::UndefValue ****)v501, *(unint64_t *)v502, 0, *(uint64_t *)v491, 1, (uint64_t)&v497, a5, v523, v524, 0, 0);
                }
                else
                {
                  if (!(_DWORD)v509)
                  {
                    sub_1C6096018(a1, *(llvm::UndefValue ****)v501, *(unint64_t *)v502, 2, 0, 0, (uint64_t)&v497, a5, v523, v524, 0, 0);
                    llvm::slpvectorizer::BoUpSLP::BlockScheduling::cancelScheduling(v44, *(llvm ***)v501, *(uint64_t *)v502, (uint64_t)v493[0]);
                    goto LABEL_303;
                  }
                  sub_1C608F2D4((uint64_t *)&v508);
                  sub_1C6096018(a1, *(llvm::UndefValue ****)v501, *(unint64_t *)v502, 0, *(uint64_t *)v491, 1, (uint64_t)&v497, a5, v523, v524, (char *)v508, v509);
                }
                v503 = &v505;
                v504 = 0x800000000;
                v406 = *((_DWORD *)v493[0] + 5);
                if ((v406 & 0x40000000) != 0)
                  v407 = (uint64_t *)*((_QWORD *)v493[0] - 1);
                else
                  v407 = (uint64_t *)((char *)v493[0] - 32 * (v406 & 0x7FFFFFF));
                sub_1C4848C0C((unsigned int *)&v503, *(unint64_t *)v502, *v407);
                sub_1C63DF06C(*(_QWORD *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 8) - 8), 0, v503, v504);
                if (v503 != &v505)
                  free(v503);
LABEL_303:
                v168 = (void **)v508;
                if (v508 == &v510)
                  goto LABEL_17;
                goto LABEL_761;
              case 'Z':
                v503 = v507;
                v504 = (uint64_t)v507;
                v505 = (void *)16;
                LODWORD(v506) = 0;
                if (!*(_QWORD *)v502)
                  goto LABEL_584;
                v254 = *(uint64_t **)v501;
                v255 = 8 * *(_QWORD *)v502;
                do
                {
                  v256 = *v254;
                  v257 = *(_DWORD *)(*v254 + 20);
                  if ((v257 & 0x40000000) != 0)
                    v258 = *(uint64_t **)(v256 - 8);
                  else
                    v258 = (uint64_t *)(v256 - 32 * (v257 & 0x7FFFFFF));
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v503, *v258);
                  ++v254;
                  v255 -= 8;
                }
                while (v255);
                if (*(_QWORD *)v502)
                {
                  v259 = 0;
                  v260 = *(uint64_t **)v501;
                  v261 = 8 * *(_QWORD *)v502;
                  do
                  {
                    v262 = *v260++;
                    v263 = sub_1C477672C((uint64_t)&v503, v262);
                    if ((void *)v504 == v503)
                      v264 = (void **)((char *)&v505 + 4);
                    else
                      v264 = &v505;
                    if (v263 == (_QWORD *)(v504 + 8 * *(unsigned int *)v264))
                      ++v259;
                    v261 -= 8;
                  }
                  while (v261);
                  v265 = v502[0];
                  if (v259 > 1)
                  {
                    sub_1C6096018(a1, *(llvm::UndefValue ****)v501, *(unint64_t *)v502, 2, 0, 0, (uint64_t)&v497, a5, 0, 0, 0, 0);
                    llvm::slpvectorizer::BoUpSLP::BlockScheduling::cancelScheduling(v44, *(llvm ***)v501, *(uint64_t *)v502, (uint64_t)v493[0]);
                    goto LABEL_671;
                  }
                  v493[0] = (llvm::Instruction *)v520;
                  v518 = v520;
                  v519 = 0x600000000;
                  LODWORD(v508) = 0;
                  if (v502[0] < 1)
                  {
                    v333 = *(_QWORD *)v502;
                  }
                  else
                  {
                    v391 = 0;
                    do
                    {
                      v392 = sub_1C6095CBC(*(_QWORD *)(*(_QWORD *)v501 + 8 * v391), 0);
                      sub_1C61DFF7C((uint64_t)&v518, v392, (unsigned int *)&v508);
                      if (v519 >= 2)
                      {
                        v393 = (char *)v518;
                        v394 = (char *)v518 + 8 * v519;
                        v395 = ((unint64_t)v519 - 2) >> 1;
                        v396 = (char *)v518 + 8 * v395;
                        v398 = *((_DWORD *)v394 - 2);
                        v397 = v394 - 8;
                        v399 = *(_DWORD *)v396;
                        if (*(_DWORD *)v396 > v398)
                        {
                          v400 = *(_DWORD *)v397;
                          v401 = *((_DWORD *)v397 + 1);
                          do
                          {
                            v402 = v397;
                            v397 = v396;
                            *(_DWORD *)v402 = v399;
                            *((_DWORD *)v402 + 1) = *((_DWORD *)v396 + 1);
                            if (!v395)
                              break;
                            v395 = (v395 - 1) >> 1;
                            v396 = &v393[8 * v395];
                            v399 = *(_DWORD *)v396;
                          }
                          while (*(_DWORD *)v396 > v400);
                          *(_DWORD *)v397 = v400;
                          *((_DWORD *)v397 + 1) = v401;
                          v391 = (int)v508;
                        }
                      }
                      LODWORD(v508) = ++v391;
                    }
                    while (v391 < v265);
                    v333 = *(_QWORD *)v502;
                    v265 = v502[0];
                  }
                }
                else
                {
LABEL_584:
                  v265 = 0;
                  v333 = 0;
                  v493[0] = (llvm::Instruction *)v520;
                  v518 = v520;
                  v519 = 0x600000000;
                }
                PrimitiveSizeInBits = (llvm *)v517;
                v515 = v517;
                v516 = 0x400000000;
                sub_1C4893E04((char *)&v515, v333, v265);
                v334 = *(_QWORD *)v502;
                v335 = (char *)v515;
                if (v502[0] < 1)
                  goto LABEL_606;
                v336 = 0;
                v337 = 1;
                v338 = (char *)v518;
                break;
              default:
                goto LABEL_455;
            }
            while (1)
            {
              *(_DWORD *)&v335[4 * *((int *)v338 + 1)] = v336;
              v339 = *((_DWORD *)v338 + 1) == v336;
              v340 = v519;
              if (v519 >= 2)
              {
                v341 = 0;
                v342 = (int *)&v338[8 * v519];
                v343 = *(_QWORD *)v338;
                v344 = ((unint64_t)v519 - 2) >> 1;
                v345 = v338;
                do
                {
                  v346 = &v345[8 * v341 + 8];
                  v347 = (2 * v341) | 1;
                  v341 = 2 * v341 + 2;
                  if (v341 >= v340)
                  {
                    v348 = *(_DWORD *)v346;
                    v341 = v347;
                  }
                  else
                  {
                    v348 = *(_DWORD *)v346;
                    v349 = *((_DWORD *)v346 + 2);
                    if (*(_DWORD *)v346 >= v349)
                      v348 = *((_DWORD *)v346 + 2);
                    if (*(_DWORD *)v346 <= v349)
                      v341 = v347;
                    else
                      v346 += 8;
                  }
                  *(_DWORD *)v345 = v348;
                  *((_DWORD *)v345 + 1) = *((_DWORD *)v346 + 1);
                  v345 = v346;
                }
                while (v341 <= v344);
                v350 = HIDWORD(v343);
                if (v346 != (char *)(v342 - 2))
                {
                  *(_DWORD *)v346 = *(v342 - 2);
                  *((_DWORD *)v346 + 1) = *(v342 - 1);
                  *((_QWORD *)v342 - 1) = v343;
                  v351 = v346 - v338 + 8;
                  if (v351 < 9)
                    goto LABEL_604;
                  v352 = (((unint64_t)v351 >> 3) - 2) >> 1;
                  v353 = (int *)&v338[8 * v352];
                  v354 = *v353;
                  if (*v353 <= *(_DWORD *)v346)
                    goto LABEL_604;
                  LODWORD(v343) = *(_DWORD *)v346;
                  LODWORD(v350) = *((_DWORD *)v346 + 1);
                  do
                  {
                    v355 = v346;
                    v346 = (char *)v353;
                    *(_DWORD *)v355 = v354;
                    *((_DWORD *)v355 + 1) = v353[1];
                    if (!v352)
                      break;
                    v352 = (v352 - 1) >> 1;
                    v353 = (int *)&v338[8 * v352];
                    v354 = *v353;
                  }
                  while (*v353 > (int)v343);
                }
                *(_DWORD *)v346 = v343;
                *((_DWORD *)v346 + 1) = v350;
              }
LABEL_604:
              v337 &= v339;
              LODWORD(v519) = v340 - 1;
              if (++v336 == (_DWORD)v334)
              {
                if ((v337 & 1) != 0)
                {
LABEL_606:
                  v356 = 0;
                  LODWORD(v516) = 0;
                }
                else
                {
                  v356 = v516;
                }
                v376 = sub_1C6096018(a1, *(llvm::UndefValue ****)v501, v334, 0, *(uint64_t *)v491, 1, (uint64_t)&v497, a5, 0, 0, v335, v356);
                v377 = 0;
                v508 = &v510;
                v509 = 0x800000000;
                v512 = v514;
                v513 = 0x800000000;
                v378 = 1;
                do
                {
                  v379 = v378;
                  if (*(_QWORD *)v502)
                  {
                    v381 = *(uint64_t **)v501;
                    v382 = &v508 + 10 * v377;
                    *(_QWORD *)v491 = v382 + 2;
                    v383 = 8 * *(_QWORD *)v502;
                    do
                    {
                      v384 = *v381;
                      v385 = *(_DWORD *)(*v381 + 20);
                      if ((v385 & 0x40000000) != 0)
                        v386 = *(_QWORD *)(v384 - 8);
                      else
                        v386 = v384 - 32 * (v385 & 0x7FFFFFF);
                      v387 = *(_QWORD *)(v386 + 32 * v377);
                      v388 = *((unsigned int *)v382 + 2);
                      if (v388 >= *((unsigned int *)v382 + 3))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(&v508 + 10 * v377), *(uint64_t *)v491, v388 + 1, 8);
                        v388 = *((unsigned int *)v382 + 2);
                      }
                      *((_QWORD *)*v382 + v388) = v387;
                      v380 = *((_DWORD *)v382 + 2) + 1;
                      *((_DWORD *)v382 + 2) = v380;
                      ++v381;
                      v383 -= 8;
                    }
                    while (v383);
                  }
                  else
                  {
                    v380 = *((_DWORD *)&v508 + 20 * v377 + 2);
                  }
                  sub_1C63DF06C(v376, v377, *(&v508 + 10 * v377), v380);
                  v378 = 0;
                  v377 = 1;
                }
                while ((v379 & 1) != 0);
                v494 = v376;
                v495 = 1;
                llvm::slpvectorizer::BoUpSLP::buildTree_rec(a1, v512, v513, (v492 + 1), &v494);
                for (i = 0; i != -20; i -= 10)
                {
                  v390 = (&v512)[i];
                  if (&v514[i * 8] != v390)
                    free(v390);
                }
                if (v515 != PrimitiveSizeInBits)
                  free(v515);
                if (v518 != v493[0])
                  free(v518);
LABEL_671:
                v332 = (void **)v503;
                v168 = (void **)v504;
                goto LABEL_672;
              }
            }
          }
LABEL_455:
          v57 = *(uint64_t **)v501;
          v58 = *(_QWORD *)v502;
LABEL_456:
          v167 = v44;
LABEL_457:
          v166 = v493[0];
LABEL_458:
          llvm::slpvectorizer::BoUpSLP::BlockScheduling::cancelScheduling(v167, (llvm **)v57, v58, (uint64_t)v166);
          goto LABEL_3;
        }
        v139 = (uint64_t **)sub_1C6096018(a1, *(llvm::UndefValue ****)v501, *(unint64_t *)v502, 0, *(uint64_t *)v491, 1, (uint64_t)&v497, a5, v523, v524, 0, 0);
        v140 = *((unsigned __int8 *)v493[0] + 16);
        if ((v140 - 81) >= 2)
          v141 = 0;
        else
          v141 = v493[0];
        v488 = v139;
        *(_QWORD *)v489 = v141;
        if ((v140 - 41) >= 0x12 && !*(_QWORD *)v489)
        {
          sub_1C63DF158(v488);
          v142 = *((_DWORD *)v493[0] + 5);
          v143 = v142 & 0x7FFFFFF;
          if ((v142 & 0x7FFFFFF) != 0)
          {
            v144 = 0;
            v145 = (v492 + 1);
            do
            {
              v503 = &v505;
              v504 = 0x800000000;
              if (*(_QWORD *)v502)
              {
                v146 = 0;
                v147 = *(uint64_t **)v501;
                v148 = 8 * *(_QWORD *)v502;
                do
                {
                  v149 = *v147;
                  v150 = *(_DWORD *)(*v147 + 20);
                  if ((v150 & 0x40000000) != 0)
                    v151 = *(_QWORD *)(v149 - 8);
                  else
                    v151 = v149 - 32 * (v150 & 0x7FFFFFF);
                  v152 = *(_QWORD *)(v151 + 32 * v144);
                  if (v146 >= HIDWORD(v504))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v503, (uint64_t)&v505, v146 + 1, 8);
                    v146 = v504;
                  }
                  *((_QWORD *)v503 + v146) = v152;
                  v146 = v504 + 1;
                  LODWORD(v504) = v504 + 1;
                  ++v147;
                  v148 -= 8;
                }
                while (v148);
                v153 = v503;
              }
              else
              {
                v146 = 0;
                v153 = &v505;
              }
              v508 = v488;
              LODWORD(v509) = v144;
              llvm::slpvectorizer::BoUpSLP::buildTree_rec(a1, v153, v146, v145, &v508);
              if (v503 != &v505)
                free(v503);
              ++v144;
            }
            while (v144 != v143);
          }
          goto LABEL_17;
        }
        v503 = &v505;
        v504 = 0x800000000;
        v508 = &v510;
        v509 = 0x800000000;
        if (*(_QWORD *)v489)
        {
          v172 = *(uint64_t **)v501;
          if (*(_QWORD *)v502)
          {
            v173 = 8 * *(_QWORD *)v502;
            v174 = 8 * *(_QWORD *)v502;
            v175 = *(uint64_t **)v501;
            while (1)
            {
              v176 = *(_WORD *)(*v175 + 18);
              if (*v175 && *(_BYTE *)(*v175 + 16) == 81)
              {
                if ((v176 & 0x3E) != 0x20)
                  break;
                goto LABEL_319;
              }
              v177 = v176 & 0x3F;
              v289 = v177 > 0xF;
              v178 = (1 << v177) & 0xC3C3;
              if (v289 || v178 == 0)
                break;
LABEL_319:
              ++v175;
              v174 -= 8;
              if (!v174)
                goto LABEL_580;
            }
            v403 = *(_WORD *)(*(_QWORD *)v489 + 18);
            *(_QWORD *)v491 = *((_WORD *)PrimitiveSizeInBits + 9) & 0x3F;
            v404 = *((_DWORD *)v493[0] + 5);
            if ((v404 & 0x40000000) != 0)
              v405 = (uint64_t *)*((_QWORD *)v493[0] - 1);
            else
              v405 = (uint64_t *)((char *)v493[0] - 32 * (v404 & 0x7FFFFFF));
            v426 = v403 & 0x3F;
            LODWORD(v493[0]) = dword_1C8677EB8[*(_QWORD *)v491];
            v486 = v405[4];
            v487 = *v405;
            while (1)
            {
              v427 = (llvm *)*v172;
              v428 = *(_QWORD *)(*v172 - 64);
              v429 = *(_QWORD *)(*v172 - 32);
              v430 = *(_WORD *)(*v172 + 18) & 0x3F;
              if (LODWORD(v493[0]) != v426)
              {
                v432 = v426 == v430 || v491[0] == v430;
                goto LABEL_738;
              }
              if (*(llvm **)v489 != v427 && PrimitiveSizeInBits != v427)
              {
                if (v426 == v430 && !sub_1C60975A4(v487, v486, *(_QWORD *)(*v172 - 64), *(_QWORD *)(*v172 - 32)))
                {
                  v433 = v428;
                  v428 = v429;
                  goto LABEL_745;
                }
                if (v491[0] == v430)
                {
                  v432 = !sub_1C60975A4(v487, v486, v428, v429);
LABEL_738:
                  if (v432)
                    v433 = v429;
                  else
                    v433 = v428;
                  if (!v432)
                    v428 = v429;
                  goto LABEL_745;
                }
              }
              v433 = v429;
LABEL_745:
              v434 = v504;
              if (v504 >= (unint64_t)HIDWORD(v504))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v503, (uint64_t)&v505, v504 + 1, 8);
                v434 = v504;
              }
              *((_QWORD *)v503 + v434) = v428;
              LODWORD(v504) = v504 + 1;
              v435 = v509;
              if (v509 >= (unint64_t)HIDWORD(v509))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v508, (uint64_t)&v510, v509 + 1, 8);
                v435 = v509;
              }
              *((_QWORD *)v508 + v435) = v433;
              LODWORD(v509) = v509 + 1;
              ++v172;
              v173 -= 8;
              if (!v173)
                goto LABEL_581;
            }
          }
        }
        else
        {
          v172 = *(uint64_t **)v501;
        }
LABEL_580:
        llvm::slpvectorizer::BoUpSLP::reorderInputsAccordingToOpcode(v172, *(uint64_t *)v502, (uint64_t)&v503, (uint64_t)&v508, *(_QWORD *)(a1 + 1984), *(_QWORD *)(a1 + 1928), a1);
LABEL_581:
        sub_1C63DF06C((uint64_t)v488, 0, v503, v504);
        sub_1C63DF06C((uint64_t)v488, 1u, v508, v509);
        v518 = v488;
        LODWORD(v519) = 0;
        llvm::slpvectorizer::BoUpSLP::buildTree_rec(a1, v503, v504, (v492 + 1), &v518);
        v518 = v488;
        LODWORD(v519) = 1;
        llvm::slpvectorizer::BoUpSLP::buildTree_rec(a1, v508, v509, (v492 + 1), &v518);
        if (v508 != &v510)
          free(v508);
        v168 = (void **)v503;
        v332 = &v505;
LABEL_672:
        if (v168 == v332)
          goto LABEL_17;
LABEL_761:
        free(v168);
        goto LABEL_17;
      }
LABEL_299:
      v166 = (llvm::Instruction *)v497;
      v167 = v44;
      v57 = v51;
      v58 = v52;
      goto LABEL_458;
    }
  }
  v94 = *(_QWORD *)v44 + 40;
  v95 = *(const llvm::Instruction **)(v44 + 144);
  v96 = (char *)v95 + 24;
  v97 = (_QWORD *)*((_QWORD *)v93 + 3);
  v98 = v97 != (_QWORD *)v94;
  if (v97 == (_QWORD *)v94 || v96 == (char *)v94)
  {
LABEL_202:
    if (v96 == (char *)v94 || v98 && (v97 ? (v117 = (llvm *)(v97 - 3)) : (v117 = 0), v117 == v83))
    {
      llvm::slpvectorizer::BoUpSLP::BlockScheduling::initScheduleData(v44, v83, v93, 0, *(_QWORD *)(v44 + 152));
      *(_QWORD *)(v44 + 136) = v83;
      if (!v83)
        goto LABEL_231;
    }
    else
    {
      v118 = *((_QWORD *)v83 + 4);
      if (v118)
        v119 = v118 == *((_QWORD *)v83 + 5) + 40;
      else
        v119 = 1;
      if (v119)
        v120 = 0;
      else
        v120 = (const llvm::Instruction *)(v118 - 24);
      llvm::slpvectorizer::BoUpSLP::BlockScheduling::initScheduleData(v44, v95, v120, *(_QWORD *)(v44 + 160), 0);
      v121 = *((_QWORD *)v83 + 4);
      if (v121)
        v122 = v121 == *((_QWORD *)v83 + 5) + 40;
      else
        v122 = 1;
      if (v122)
        v123 = 0;
      else
        v123 = v121 - 24;
      *(_QWORD *)(v44 + 144) = v123;
      if (!v83)
        goto LABEL_231;
    }
    v124 = *((unsigned __int8 *)v83 + 16);
    v20 = v124 >= 0x1C;
    v125 = v124 - 28;
    if (v20)
    {
      v126 = (int)v498;
      if (v498)
        v126 = v498[16] - 28;
      if (v126 == v125)
        goto LABEL_131;
      v127 = (int)v499;
      if (v499)
        v127 = v499[16] - 28;
      if (v127 == v125)
        goto LABEL_131;
    }
LABEL_231:
    v115 = (uint64_t)v497;
    if (v497 == (unsigned __int8 *)v83)
      goto LABEL_131;
    goto LABEL_232;
  }
  while (1)
  {
    v100 = (llvm *)(v97 - 3);
    if (!v97)
      v100 = 0;
    if (v100 == v83)
      goto LABEL_201;
    v101 = (llvm *)(v96 - 24);
    if (!v96)
      v101 = 0;
    if (v101 == v83)
    {
LABEL_201:
      v98 = 1;
      goto LABEL_202;
    }
    v102 = *(_DWORD *)(v44 + 172);
    v103 = *(_DWORD *)(v44 + 176);
    *(_DWORD *)(v44 + 172) = v102 + 1;
    if (v102 >= v103)
      break;
    v96 = (char *)*((_QWORD *)v96 + 1);
    v97 = (_QWORD *)*v97;
    v98 = v97 != (_QWORD *)v94;
    if (v97 == (_QWORD *)v94 || v96 == (char *)v94)
      goto LABEL_202;
  }
  if (v95 != *(const llvm::Instruction **)v489)
  {
    if (v93 != v95)
    {
      do
      {
        sub_1C60A4238(v44, (uint64_t)v93, (void (*)(uint64_t, uint64_t))sub_1C60ACA58, (uint64_t)&v503);
        v365 = *((_QWORD *)v93 + 4);
        if (v365)
          v366 = v365 == *((_QWORD *)v93 + 5) + 40;
        else
          v366 = 1;
        if (v366)
          v93 = 0;
        else
          v93 = (const llvm::Instruction *)(v365 - 24);
      }
      while (v93 != *(const llvm::Instruction **)(v44 + 144));
    }
    llvm::slpvectorizer::BoUpSLP::BlockScheduling::resetSchedule((llvm::slpvectorizer::BoUpSLP::BlockScheduling *)v44);
    sub_1C63E1934(v44, v44 + 88);
    while (1)
    {
      v367 = *(_QWORD *)(v44 + 120);
      if (*(_QWORD *)(v44 + 112) == v367)
        break;
      v368 = *(uint64_t **)(v367 - 8);
      sub_1C60ACA6C(v44 + 88);
      sub_1C60AC818(v44, v368, (_QWORD *)(v44 + 88));
    }
  }
LABEL_3:
  v10 = *(uint64_t **)v501;
  v11 = *(_QWORD *)v502;
  *(_OWORD *)v481 = 0uLL;
  __srca[0] = v523;
  __srca[1] = (void *)v524;
LABEL_4:
  v12 = a1;
LABEL_16:
  sub_1C6096018(v12, (llvm::UndefValue ***)v10, v11, 2, 0, 0, (uint64_t)&v497, a5, __srca[0], (uint64_t)__srca[1], (char *)v481[0], v481[1]);
LABEL_17:
  if (v521[0] != v522)
    free(v521[0]);
  if (v523 != v525)
    free(v523);
}

uint64_t sub_1C6095230(uint64_t result, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BOOL4 v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _DWORD *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  BOOL v24;
  BOOL v25;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  int v30;
  _QWORD **v31;
  uint64_t v32;
  int v33;
  _QWORD **v34;
  int v35;
  _QWORD **v36;
  int v38;
  _QWORD **v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  _DWORD *v55;
  int v56;
  BOOL v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BOOL4 v62;
  _BOOL4 v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  _QWORD *v74;
  uint64_t v75;

  v4 = (_QWORD *)result;
  if (!a3)
  {
LABEL_5:
    v6 = *a2;
    v7 = *(unsigned __int8 *)(*a2 + 16);
    v8 = v7 - 66 < 0xD && v7 > 0x1B;
    v9 = v7 - 41 < 0x12 && v7 > 0x1B;
    v10 = v7 - 81 < 2 && v7 > 0x1B;
    if ((_DWORD)v10 == 1)
      v11 = *(_WORD *)(v6 + 18) & 0x3F;
    else
      v11 = 42;
    v12 = *a2;
    if ((int)a3 < 1)
    {
LABEL_109:
      *v4 = v12;
      v4[1] = v12;
      v4[2] = v6;
      return result;
    }
    v13 = 0;
    v14 = 0;
    v15 = v7 - 28;
    v16 = a3;
    v17 = v7 - 28;
    v18 = &unk_1C8677EB8;
    while (1)
    {
      v19 = a2[v13];
      v20 = *(unsigned __int8 *)(v19 + 16);
      v21 = v20 - 28;
      if (v9)
      {
        v22 = v20 < 0x1C || v20 - 41 > 0x11;
        if (!v22)
          break;
      }
      if (v8 && v20 >= 0x1C && v20 - 66 <= 0xC)
      {
        v29 = *a2;
        v30 = *(_DWORD *)(*a2 + 20);
        if ((v30 & 0x40000000) != 0)
          v31 = *(_QWORD ***)(v29 - 8);
        else
          v31 = (_QWORD **)(v29 - 32 * (v30 & 0x7FFFFFF));
        v35 = *(_DWORD *)(v19 + 20);
        if ((v35 & 0x40000000) != 0)
          v36 = *(_QWORD ***)(v19 - 8);
        else
          v36 = (_QWORD **)(v19 - 32 * (v35 & 0x7FFFFFF));
        if (**v31 != **v36)
          goto LABEL_108;
        if (v20 == v7 || v21 == v17)
          goto LABEL_70;
        if ((_DWORD)v15 != v17)
          goto LABEL_108;
LABEL_69:
        v14 = v13;
        v17 = v21;
        goto LABEL_70;
      }
      if (!(_DWORD)v10 || (v20 >= 0x1C ? (v24 = v20 - 81 > 1) : (v24 = 1), v24))
      {
        v25 = v20 == v7 || v21 == v17;
        if (!v25)
          goto LABEL_108;
        goto LABEL_70;
      }
      v32 = *a2;
      v33 = *(_DWORD *)(*a2 + 20);
      if ((v33 & 0x40000000) != 0)
        v34 = *(_QWORD ***)(v32 - 8);
      else
        v34 = (_QWORD **)(v32 - 32 * (v33 & 0x7FFFFFF));
      v38 = *(_DWORD *)(v19 + 20);
      if ((v38 & 0x40000000) != 0)
        v39 = *(_QWORD ***)(v19 - 8);
      else
        v39 = (_QWORD **)(v19 - 32 * (v38 & 0x7FFFFFF));
      if (**v34 != **v39)
        goto LABEL_108;
      if ((v33 & 0x40000000) != 0)
        v40 = *(uint64_t **)(v32 - 8);
      else
        v40 = (uint64_t *)(v32 - 32 * (v33 & 0x7FFFFFF));
      v41 = *(_WORD *)(v19 + 18) & 0x3F;
      v42 = v18[v41];
      if (v20 != v7)
      {
LABEL_95:
        if (v14 || (_DWORD)v11 == (_DWORD)v41)
        {
          if ((_DWORD)v11 != (_DWORD)v41)
          {
            v56 = *(_WORD *)(a2[v14] + 18) & 0x3F;
            v57 = (_DWORD)v11 == v42 || v56 == (_DWORD)v41;
            if (!v57 && v42 != v56)
              goto LABEL_108;
          }
        }
        else
        {
          v14 = v13;
        }
        goto LABEL_70;
      }
      v74 = v4;
      v75 = v14;
      v43 = *v40;
      v73 = v18[v41];
      if ((_DWORD)v11 == (_DWORD)v41)
      {
        v62 = v8;
        v66 = v16;
        v69 = a3;
        v44 = v10;
        v45 = v11;
        v46 = v15;
        v47 = v18;
        v60 = *v40;
        result = sub_1C60975A4(v43);
        v43 = v60;
        v42 = v73;
        v14 = v75;
        v18 = v47;
        v16 = v66;
        a3 = v69;
        v15 = v46;
        v11 = v45;
        v10 = v44;
        v8 = v62;
        if ((result & 1) != 0)
          goto LABEL_91;
      }
      v64 = v15;
      v65 = v11;
      if ((_DWORD)v11 == v42)
      {
        v70 = v10;
        v48 = a3;
        result = sub_1C60975A4(v43);
        a3 = v48;
        if ((_DWORD)v48 == 2)
        {
          v4 = v74;
          v14 = v75;
          v10 = v70;
          v15 = v64;
          v11 = v65;
          v18 = &unk_1C8677EB8;
          goto LABEL_70;
        }
        v10 = v70;
        v15 = v64;
        v11 = v65;
        v18 = &unk_1C8677EB8;
        v14 = v75;
        if ((result & 1) != 0)
        {
LABEL_91:
          v4 = v74;
          goto LABEL_70;
        }
      }
      else if ((_DWORD)a3 == 2 && (_DWORD)v11 == (_DWORD)v41)
      {
        goto LABEL_91;
      }
      v49 = a2[v14];
      v50 = *(_WORD *)(v49 + 18) & 0x3F;
      v51 = *(_QWORD *)(v49 - 64);
      if (v50 == (_DWORD)v41)
      {
        v63 = v8;
        v67 = v16;
        v71 = a3;
        v52 = v10;
        v53 = v18;
        v61 = *(_QWORD *)(v49 - 64);
        result = sub_1C60975A4(v61);
        v51 = v61;
        v14 = v75;
        v18 = v53;
        v16 = v67;
        a3 = v71;
        v15 = v64;
        v11 = v65;
        v10 = v52;
        v8 = v63;
        if ((result & 1) != 0)
          goto LABEL_91;
      }
      v42 = v73;
      v25 = v73 == v50;
      v4 = v74;
      if (!v25)
        goto LABEL_95;
      v68 = v16;
      v72 = a3;
      v54 = v10;
      v55 = v18;
      result = sub_1C60975A4(v51);
      v42 = v73;
      v14 = v75;
      v18 = v55;
      v16 = v68;
      a3 = v72;
      v15 = v64;
      v11 = v65;
      v10 = v54;
      if ((result & 1) == 0)
        goto LABEL_95;
LABEL_70:
      if (v16 == ++v13)
      {
        v12 = *a2;
        v6 = a2[v14];
        goto LABEL_109;
      }
    }
    if (v20 == v7 || v21 == v17)
      goto LABEL_70;
    if ((_DWORD)v15 != v17)
      goto LABEL_108;
    v22 = v20 > 0x33;
    v27 = (1 << v20) & 0xD800000000000;
    v28 = v22 || v27 == 0;
    if (!v28 || v7 <= 0x33 && ((1 << v7) & 0xD800000000000) != 0)
      goto LABEL_108;
    goto LABEL_69;
  }
  v5 = 0;
  while (*(unsigned __int8 *)(a2[v5] + 16) > 0x1Bu)
  {
    if (a3 == ++v5)
      goto LABEL_5;
  }
LABEL_108:
  v59 = *a2;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = v59;
  return result;
}

uint64_t sub_1C6095708(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::UndefValue ***v7;
  uint64_t v8;
  int v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v30;
  uint64_t v31;
  char v32;
  llvm::UndefValue **v33;
  uint64_t v34;
  uint64_t v35;
  int v36;

  v4 = a1[4];
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 8);
  if (v6)
  {
    v7 = *(llvm::UndefValue ****)v5;
    v8 = 8 * v6;
    while (1)
    {
      v33 = *v7;
      v9 = *((unsigned __int8 *)v33 + 16);
      if (v9 == 5 || (v9 - 4) > 0x10)
      {
        v30 = *(unsigned int *)(a1[2] + 8);
        sub_1C63DFA78((uint64_t)&v31, (uint64_t)&v34, (uint64_t *)&v33, &v30);
        v17 = (_DWORD *)a1[1];
        v18 = v17[2];
        if (v18 >= v17[3])
        {
          sub_1C6272EB8(v17, *(_DWORD *)(v31 + 8));
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)v17 + 4 * v18) = *(_DWORD *)(v31 + 8);
          ++v17[2];
        }
        if (!v32)
          goto LABEL_16;
        v14 = a1[2];
        v15 = *(unsigned int *)(v14 + 8);
        if (v15 >= *(_DWORD *)(v14 + 12))
        {
          v19 = (uint64_t)v33;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1[2], v14 + 16, v15 + 1, 8);
          *(_QWORD *)(*(_QWORD *)v14 + 8 * *(unsigned int *)(v14 + 8)) = v19;
          LODWORD(v15) = *(_DWORD *)(v14 + 8);
          goto LABEL_14;
        }
      }
      else
      {
        if ((v9 - 11) >= 2)
          v11 = *(_DWORD *)(a1[2] + 8);
        else
          v11 = -1;
        v12 = a1[1];
        v13 = *(unsigned int *)(v12 + 8);
        if (v13 >= *(_DWORD *)(v12 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1[1], v12 + 16, v13 + 1, 4);
          *(_DWORD *)(*(_QWORD *)v12 + 4 * *(unsigned int *)(v12 + 8)) = v11;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)v12 + 4 * v13) = v11;
        }
        ++*(_DWORD *)(v12 + 8);
        v14 = a1[2];
        v15 = *(unsigned int *)(v14 + 8);
        if (v15 >= *(_DWORD *)(v14 + 12))
        {
          v20 = (uint64_t)v33;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1[2], v14 + 16, v15 + 1, 8);
          *(_QWORD *)(*(_QWORD *)v14 + 8 * *(unsigned int *)(v14 + 8)) = v20;
          v16 = *(_DWORD *)(v14 + 8) + 1;
          goto LABEL_15;
        }
      }
      *(_QWORD *)(*(_QWORD *)v14 + 8 * v15) = v33;
LABEL_14:
      v16 = v15 + 1;
LABEL_15:
      *(_DWORD *)(v14 + 8) = v16;
LABEL_16:
      ++v7;
      v8 -= 8;
      if (!v8)
      {
        v5 = *a1;
        v21 = *(_QWORD *)(*a1 + 8);
        goto LABEL_27;
      }
    }
  }
  v21 = 0;
LABEL_27:
  v22 = a1[2];
  v23 = *(unsigned int *)(v22 + 8);
  if (v21 == v23)
  {
    *(_DWORD *)(a1[1] + 8) = 0;
  }
  else
  {
    if (v23 < 2)
      goto LABEL_42;
    if ((_DWORD)v35 == 1)
    {
      v25 = *(_QWORD *)v22;
      v26 = 8 * v23;
      while (1)
      {
        v27 = *(unsigned __int8 *)(*(_QWORD *)v25 + 16);
        if ((v27 - 11) >= 2 && v27 != 5 && (v27 - 21) > 0xFFFFFFEE)
          break;
        v25 += 8;
        v26 -= 8;
        if (!v26)
          goto LABEL_42;
      }
    }
    if ((v23 & ((_DWORD)v23 - 1)) != 0)
    {
LABEL_42:
      sub_1C6096018(v4, *(llvm::UndefValue ****)v5, v21, 2, 0, 0, a2, (uint64_t *)a1[3], 0, 0, 0, 0);
      v24 = 0;
      goto LABEL_43;
    }
    *(_QWORD *)v5 = *(_QWORD *)v22;
    *(_QWORD *)(v5 + 8) = v23;
  }
  v24 = 1;
LABEL_43:
  MEMORY[0x1CAA32FB4](v34, 8);
  return v24;
}

uint64_t sub_1C60959BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t result;
  int v5;
  uint64_t v7;
  uint64_t *i;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;

  v2 = *a1;
  if (*a1)
    v3 = *(unsigned __int8 *)(*a1 + 16) >= 0x1Cu;
  else
    v3 = 0;
  if (!v3)
    return 0;
  v5 = a2;
  if (a2)
  {
    v7 = 8 * a2;
    for (i = a1; sub_1C6095A80(*i); ++i)
    {
      v7 -= 8;
      if (!v7)
        return 1;
    }
    if (v5 >= 2)
    {
      v9 = a1 + 1;
      v10 = v5 - 1;
      result = 1;
      while (1)
      {
        v11 = *v9 && *(unsigned __int8 *)(*v9 + 16) >= 0x1Cu;
        if (!v11 || *(_QWORD *)(v2 + 40) != *(_QWORD *)(*v9 + 40))
          break;
        ++v9;
        if (!--v10)
          return result;
      }
      return 0;
    }
  }
  return 1;
}

BOOL sub_1C6095A80(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 - 89 >= 2 && v1 - 11 >= 2 && v1 != 92)
    return 0;
  v2 = 1;
  if (v1 < 0x1C || v1 == 92)
    return v2;
  v3 = *(_DWORD *)(a1 + 20);
  v4 = (v3 & 0x40000000) != 0 ? *(_QWORD *)(a1 - 8) : a1 - 32 * (v3 & 0x7FFFFFF);
  if (*(_BYTE *)(**(_QWORD **)v4 + 8) != 18)
    return 0;
  if (v1 == 89)
  {
    if ((v3 & 0x40000000) != 0)
      v5 = *(_QWORD *)(a1 - 8);
    else
      v5 = a1 - 32 * (v3 & 0x7FFFFFF);
    v7 = *(_QWORD *)(v5 + 32);
  }
  else
  {
    if ((v3 & 0x40000000) != 0)
      v6 = *(_QWORD *)(a1 - 8);
    else
      v6 = a1 - 32 * (v3 & 0x7FFFFFF);
    v7 = *(_QWORD *)(v6 + 64);
  }
  v8 = *(unsigned __int8 *)(v7 + 16);
  return v8 != 5 && (v8 - 4) < 0x11;
}

void llvm::slpvectorizer::BoUpSLP::BlockScheduling::cancelScheduling(uint64_t a1, llvm **a2, uint64_t a3, uint64_t a4)
{
  llvm *v4;
  const llvm::Instruction *v8;
  const llvm::Instruction *v9;
  uint64_t v10;
  llvm **v11;
  llvm *v12;
  BOOL v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  if (*(_BYTE *)(a4 + 16) == 83)
    return;
  v4 = (llvm *)a4;
  if (sub_1C6095A80(a4) || (sub_1C609E1BC(a2, a3) & 1) != 0)
    return;
  if (sub_1C60AC688(v4, v8) && sub_1C609E234((uint64_t)v4))
  {
    if (a3)
    {
      v10 = 8 * a3;
      v11 = &a2[a3];
      while (1)
      {
        v12 = *a2;
        if (!sub_1C60AC688(*a2, v9) || !sub_1C609E234((uint64_t)v12))
          break;
        ++a2;
        v10 -= 8;
        if (!v10)
        {
          a2 = v11;
          break;
        }
      }
    }
    v4 = *a2;
  }
  if (v4)
    v13 = *((unsigned __int8 *)v4 + 16) > 0x1Bu;
  else
    v13 = 0;
  if (v13)
  {
    v19 = sub_1C63DFCC0(a1, (uint64_t)v4);
    v14 = v19;
    v24 = v19;
    if (v19)
    {
      v20 = 0;
      v21 = v19;
      while (1)
      {
        v22 = *(_DWORD *)(v21 + 156);
        if (v22 == -1)
          goto LABEL_20;
        v20 += v22;
        v21 = *(_QWORD *)(v21 + 32);
        if (!v21)
        {
          if (v20)
            goto LABEL_20;
          break;
        }
      }
    }
  }
  else
  {
    v14 = 0;
    v24 = 0;
  }
  if (!*(_BYTE *)(v14 + 160))
    sub_1C63DEB48(a1 + 88, &v24);
LABEL_20:
  v23 = v14;
  v15 = (_QWORD *)(a1 + 88);
  do
  {
    v16 = 0;
    v17 = v14;
    v14 = *(_QWORD *)(v14 + 32);
    *(_QWORD *)(v17 + 24) = v17;
    *(_QWORD *)(v17 + 32) = 0;
    *(_QWORD *)(v17 + 16) = 0;
    while (1)
    {
      v18 = *(_DWORD *)(v17 + 156);
      if (v18 == -1)
        break;
      v16 += v18;
      v17 = *(_QWORD *)(v17 + 32);
      if (!v17)
      {
        if (!v16)
          sub_1C518D044(v15, &v23);
        break;
      }
    }
    v23 = v14;
  }
  while (v14);
}

uint64_t sub_1C6095CBC(uint64_t a1, int a2)
{
  uint64_t v3;
  BOOL v4;
  _QWORD **v5;
  unint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  BOOL v16;
  int v17;
  unsigned int v18;
  uint64_t v19;

  if (!a1 || *(_BYTE *)(a1 + 16) != 90)
  {
    v9 = *(unsigned int *)(a1 + 72);
    if ((_DWORD)v9)
    {
      v10 = *(unsigned int **)(a1 + 64);
      v11 = 4 * v9;
      while (1)
      {
        v12 = *(_QWORD *)a1;
        v13 = *v10;
        v14 = *(unsigned __int8 *)(*(_QWORD *)a1 + 8);
        if (*(_QWORD *)a1)
          v15 = v14 == 16;
        else
          v15 = 0;
        if (v15)
        {
          v17 = *(_DWORD *)(v12 + 12);
          a1 = *(_QWORD *)(v12 + 16) + 8 * v13;
        }
        else
        {
          if (v12)
            v16 = v14 == 17;
          else
            v16 = 0;
          if (!v16)
            goto LABEL_30;
          v17 = *(_DWORD *)(v12 + 32);
          a1 = v12 + 24;
        }
        a2 = v13 + v17 * a2;
        ++v10;
        v11 -= 4;
        if (!v11)
          goto LABEL_29;
      }
    }
    goto LABEL_29;
  }
  v3 = *(_QWORD *)(a1 - 32);
  if (v3)
    v4 = *(_BYTE *)(v3 + 16) == 16;
  else
    v4 = 0;
  if (!v4)
    goto LABEL_30;
  v5 = (_QWORD **)(v3 + 24);
  v6 = *(unsigned int *)(*(_QWORD *)a1 + 32);
  v7 = *(_DWORD *)(v3 + 32);
  if (v7 >= 0x41)
  {
    if (v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v3 + 24)) >= 0x41)
    {
LABEL_30:
      v19 = 0;
      LOBYTE(a2) = 0;
      v18 = 0;
      return v19 | v18 | a2;
    }
    v8 = (_QWORD *)**v5;
  }
  else
  {
    v8 = *v5;
  }
  if ((unint64_t)v8 >= v6)
    goto LABEL_30;
  a2 = (_DWORD)v8 + v6 * a2;
LABEL_29:
  v18 = a2 & 0xFFFFFF00;
  v19 = 0x100000000;
  return v19 | v18 | a2;
}

uint64_t sub_1C6095DD0(uint64_t *a1, unint64_t a2, uint64_t a3, BOOL a4, llvm::Value *a5, const llvm::DataLayout *a6, unsigned int **a7, uint64_t a8)
{
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  llvm::Type **v23;
  uint64_t v24;
  uint64_t *v25;
  llvm *v26;
  uint64_t v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  llvm::Type **v31;
  llvm::Type **v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int v37;
  double v38;
  uint64_t v39;
  BOOL v40;
  BOOL v41[8];

  v15 = *(_QWORD *)a3;
  sub_1C4768AD0((uint64_t)a5, *(_QWORD *)a3);
  v17 = v16;
  if (v19 != sub_1C53E2F94((uint64_t)a5, v15) || v17 != v18)
    return 0;
  v40 = a4;
  *(_DWORD *)(a8 + 8) = 0;
  sub_1C6154790(a8, a2);
  v23 = *(llvm::Type ***)a8;
  if (a2)
  {
    v24 = 8 * a2;
    v25 = a1;
    v26 = (llvm *)v15;
    do
    {
      v27 = *v25;
      v28 = *(unsigned __int8 *)(*v25 + 16);
      if (v28 == 60 || v28 == 61)
      {
        v29 = *(_WORD *)(v27 + 18);
        if ((v29 & 0x380) != 0 || (v29 & 1) != 0)
          return 0;
      }
      else if ((v28 - 63) < 3 || (*(_WORD *)(v27 + 18) & 1) != 0)
      {
        return 0;
      }
      *v23++ = *(llvm::Type **)(v27 - 32);
      ++v25;
      v24 -= 8;
    }
    while (v24);
    v23 = *(llvm::Type ***)a8;
  }
  else
  {
    v26 = (llvm *)v15;
  }
  *((_DWORD *)a7 + 2) = 0;
  if (!llvm::sortPtrAccesses(v23, *(unsigned int *)(a8 + 8), v26, a5, a6, (uint64_t)a7))
    return 0;
  v30 = *((unsigned int *)a7 + 2);
  if ((_DWORD)v30)
  {
    v31 = (llvm::Type **)(*(_QWORD *)a8 + 8 * **a7);
    v32 = (llvm::Type **)(*(_QWORD *)a8 + 8 * (*a7)[v30 - 1]);
  }
  else
  {
    v31 = *(llvm::Type ***)a8;
    v32 = (llvm::Type **)(*(_QWORD *)a8 + 8 * *(unsigned int *)(a8 + 8) - 8);
  }
  v21 = 1;
  if (a2 - 1 != llvm::getPointersDiff(v26, *v31, v26, *v32, a5, a6, 0, 1, v40))
  {
    v33 = __clz(1 << ((unint64_t)*(unsigned __int16 *)(a3 + 18) >> 1)) ^ 0x3F;
    if (a2)
    {
      v34 = 8 * a2;
      v35 = *(_QWORD **)v41;
      do
      {
        v36 = *a1++;
        v37 = __clz(1 << ((unint64_t)*(unsigned __int16 *)(v36 + 18) >> 1)) ^ 0x3F;
        if (v37 >= v33)
          v33 = v33;
        else
          v33 = v37;
        v34 -= 8;
      }
      while (v34);
    }
    else
    {
      v35 = *(_QWORD **)v41;
    }
    v38 = llvm::FixedVectorType::get(v26, (llvm::Type *)a2);
    if (((*(uint64_t (**)(_QWORD, uint64_t, _QWORD, double))(*(_QWORD *)*v35 + 368))(*v35, v39, v33, v38) & 1) != 0)
      return 2;
    return 0;
  }
  return v21;
}

uint64_t sub_1C6096018(uint64_t a1, llvm::UndefValue ***a2, unint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, uint64_t *a8, void *__src, uint64_t a10, char *a11, uint64_t a12)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  llvm::Type *v30;
  uint64_t v31;
  llvm::UndefValue **v32;
  unint64_t v33;
  llvm::UndefValue *v34;
  size_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  llvm::UndefValue **v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  const llvm::Instruction *v46;
  llvm::UndefValue **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v53;
  unint64_t v54;
  BOOL v55;
  char *v56;
  uint64_t *v57;
  uint64_t v58;
  __int128 v59;

  v19 = operator new();
  *(_QWORD *)v19 = v19 + 16;
  *(_QWORD *)(v19 + 8) = 0x800000000;
  *(_QWORD *)(v19 + 80) = 0;
  *(_QWORD *)(v19 + 96) = v19 + 112;
  *(_QWORD *)(v19 + 104) = 0x400000000;
  *(_QWORD *)(v19 + 128) = v19 + 144;
  *(_QWORD *)(v19 + 136) = 0x400000000;
  *(_QWORD *)(v19 + 160) = a1;
  *(_QWORD *)(v19 + 168) = v19 + 184;
  *(_QWORD *)(v19 + 176) = 0x100000000;
  *(_DWORD *)(v19 + 200) = -1;
  *(_QWORD *)(v19 + 208) = v19 + 224;
  *(_QWORD *)(v19 + 216) = 0x200000000;
  *(_QWORD *)(v19 + 384) = 0;
  *(_QWORD *)(v19 + 392) = 0;
  v57 = a8;
  v58 = v19;
  v20 = *(unsigned int *)(a1 + 8);
  v21 = &v58;
  v22 = *(_QWORD *)a1;
  if (v20 >= *(_DWORD *)(a1 + 12))
  {
    v54 = v20 + 1;
    v55 = v22 + 8 * v20 > (unint64_t)&v58;
    if (v22 <= (unint64_t)&v58 && v55)
    {
      v56 = (char *)&v58 - v22;
      sub_1C63E0D84(a1, v54);
      v22 = *(_QWORD *)a1;
      v21 = (uint64_t *)&v56[*(_QWORD *)a1];
    }
    else
    {
      sub_1C63E0D84(a1, v54);
      v22 = *(_QWORD *)a1;
      v21 = &v58;
    }
  }
  v23 = *(unsigned int *)(a1 + 8);
  v24 = *v21;
  *v21 = 0;
  *(_QWORD *)(v22 + 8 * v23) = v24;
  v25 = v23 + 1;
  *(_DWORD *)(a1 + 8) = v23 + 1;
  v26 = v58;
  v58 = 0;
  if (v26)
  {
    v53 = sub_1C63E0A94(v26);
    MEMORY[0x1CAA32FC0](v53, 0x10A0C40379F6086);
    v25 = *(_DWORD *)(a1 + 8);
  }
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v25 - 8);
  *(_DWORD *)(v27 + 200) = v25 - 1;
  *(_DWORD *)(v27 + 88) = a4;
  v28 = *(unsigned int *)(v27 + 104);
  v29 = v28 + ((4 * a10) >> 2);
  if (v29 <= *(unsigned int *)(v27 + 108))
  {
    if (!a10)
      goto LABEL_7;
    goto LABEL_6;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(v27 + 96, v27 + 112, v29, 4);
  LODWORD(v28) = *(_DWORD *)(v27 + 104);
  if (a10)
  {
LABEL_6:
    memcpy((void *)(*(_QWORD *)(v27 + 96) + 4 * v28), __src, 4 * a10);
    LODWORD(v28) = *(_DWORD *)(v27 + 104);
  }
LABEL_7:
  *(_DWORD *)(v27 + 104) = v28 + ((unint64_t)(4 * a10) >> 2);
  if (a12)
  {
    sub_1C4848C0C((unsigned int *)v27, a3, 0);
    v31 = 0;
    v32 = *(llvm::UndefValue ***)v27;
    do
    {
      v33 = *(unsigned int *)&a11[v31];
      if (a3 <= v33)
        v34 = llvm::UndefValue::get(**a2, v30);
      else
        v34 = (llvm::UndefValue *)a2[v33];
      *v32++ = v34;
      v31 += 4;
    }
    while (4 * a12 != v31);
    sub_1C6095230((uint64_t)&v58, *(uint64_t **)v27, *(unsigned int *)(v27 + 8));
    *(_OWORD *)(v27 + 384) = v59;
    v35 = 4 * a12;
    v36 = *(unsigned int *)(v27 + 136);
    v37 = v36 + ((4 * a12) >> 2);
    v38 = v57;
    if (v37 > *(unsigned int *)(v27 + 140))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v27 + 128, v27 + 144, v37, 4);
      v36 = *(unsigned int *)(v27 + 136);
    }
    memcpy((void *)(*(_QWORD *)(v27 + 128) + 4 * v36), a11, v35);
    *(_DWORD *)(v27 + 136) += v35 >> 2;
  }
  else
  {
    *(_DWORD *)(v27 + 8) = 0;
    sub_1C4FA6FB8((unsigned int *)v27, a2, &a2[a3]);
    *(_OWORD *)(v27 + 384) = *(_OWORD *)(a7 + 8);
    v38 = v57;
  }
  if (*(_DWORD *)(v27 + 88) == 2)
  {
    if (a3)
    {
      v39 = 8 * a3;
      do
      {
        v40 = *a2++;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 224), (uint64_t)v40);
        v39 -= 8;
      }
      while (v39);
    }
  }
  else if (a3)
  {
    v41 = (_DWORD *)(a1 + 80);
    v42 = 8 * a3;
    v43 = 8 * a3;
    v44 = (uint64_t *)a2;
    do
    {
      v45 = *v44++;
      v58 = v45;
      sub_1C61B5A08(v41, &v58)[1] = v27;
      v43 -= 8;
    }
    while (v43);
    if (a5)
    {
      do
      {
        v47 = *a2;
        if (!sub_1C60AC688((llvm *)*a2, v46) || (sub_1C609E234((uint64_t)v47) & 1) == 0)
        {
          *(_QWORD *)(a5 + 16) = v27;
          a5 = *(_QWORD *)(a5 + 32);
        }
        ++a2;
        v42 -= 8;
      }
      while (v42);
    }
  }
  v48 = *v38;
  if (*v38)
  {
    v49 = v38[1];
    v50 = *(unsigned int *)(v27 + 176);
    if (v50 >= *(_DWORD *)(v27 + 180))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v27 + 168, v27 + 184, v50 + 1, 16);
      LODWORD(v50) = *(_DWORD *)(v27 + 176);
    }
    v51 = (_QWORD *)(*(_QWORD *)(v27 + 168) + 16 * v50);
    *v51 = v48;
    v51[1] = v49;
    ++*(_DWORD *)(v27 + 176);
  }
  return v27;
}

uint64_t *llvm::slpvectorizer::BoUpSLP::reorderInputsAccordingToOpcode(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t i;
  unint64_t v8;
  char *v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  unsigned __int8 *v26;
  int v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  unsigned __int8 v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int *v58;
  int v59;
  unsigned int v60;
  BOOL v61;
  _DWORD *v62;
  _DWORD *v63;
  uint64_t v64;
  _DWORD *v65;
  _DWORD *v66;
  int v67;
  int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  int v92;
  BOOL v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  _QWORD *v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  _BYTE *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  int v114;
  char v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  unsigned int v121;
  char *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  BOOL v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  __int16 v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t *v150;
  char v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  char v172;
  unint64_t v173;
  BOOL v174;
  uint64_t v175;
  unint64_t v176;
  int v177;
  int v178;
  unsigned int v179;
  unsigned int v180;
  int v181;
  unsigned int v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _BYTE *v191;
  uint64_t v192;
  int v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD v198[6];
  char *v199;
  uint64_t v200;
  _QWORD v201[27];
  _QWORD v202[13];
  __int128 v203;
  _QWORD v204[2];
  uint64_t *v205;
  int v206;
  int v207;
  uint64_t v208;
  unint64_t v209;
  int v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;

  v213 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return result;
  v199 = (char *)v201;
  v200 = 0x400000000;
  v201[24] = a5;
  v201[25] = a6;
  v201[26] = a7;
  v202[0] = 1;
  for (i = 240; i != 336; i += 12)
    *(char **)((char *)&v199 + i) = (char *)-1;
  sub_1C63E0E6C(&v199, result, a2);
  v8 = v200;
  v9 = v199;
  v177 = *((_DWORD *)v199 + 2);
  v205 = &v208;
  v207 = 2;
  if (v200 >= 3)
  {
    v206 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v205, (uint64_t)&v208, v200, 4);
    v10 = v205;
    v9 = v199;
LABEL_7:
    bzero(v10, 4 * v8);
    goto LABEL_8;
  }
  v10 = &v208;
  if ((_DWORD)v200)
    goto LABEL_7;
LABEL_8:
  v11 = 0;
  v206 = v8;
  LODWORD(v196) = 0;
  v194 = 0;
  v195 = 0;
  v198[0] = 0;
  v198[1] = 0;
  v197 = 0;
  v12 = *((unsigned int *)v9 + 2);
  v176 = v8;
  if ((int)v12 < 1)
    goto LABEL_83;
  v13 = 0;
  v14 = (_QWORD *)&unk_1ED7EA000;
  v15 = 0xFFFFFFFFLL;
  do
  {
    v16 = v12 - 1;
    if (!(_DWORD)v200)
      goto LABEL_45;
    v180 = v15;
    v182 = v13;
    v186 = v12;
    v188 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    LODWORD(v21) = 0;
    v184 = v12 - 1;
    v22 = (v12 - 1);
    v178 = v200;
    v23 = 48 * v200;
    LOBYTE(v24) = 1;
    v25 = 8;
    v190 = v23;
    do
    {
      v26 = (unsigned __int8 *)(*(_QWORD *)&v199[v17] + 16 * v22);
      v27 = v26[8];
      v28 = *(_QWORD *)v26;
      if (*(_QWORD *)v26)
        v29 = *(unsigned __int8 *)(*(_QWORD *)v26 + 16) >= 0x1Cu;
      else
        v29 = 0;
      if (v29)
      {
        LODWORD(v192) = v26[8];
        v30 = v22;
        if (!v18)
          goto LABEL_21;
        v211 = v18;
        v212 = v28;
        v31 = v19;
        v32 = v18;
        v33 = v24;
        sub_1C6095230((uint64_t)&v203, (uint64_t *)&v211, 2);
        LOBYTE(v24) = v33;
        v18 = v32;
        LODWORD(v19) = v31;
        v14 = &unk_1ED7EA000;
        if (!*((_QWORD *)&v203 + 1))
          goto LABEL_21;
        if (*(_BYTE *)(*((_QWORD *)&v203 + 1) + 16) != 28 && *(_QWORD *)(v28 + 40) == v188)
        {
          v19 = (v31 + 1);
        }
        else
        {
LABEL_21:
          if ((_DWORD)v19)
          {
            v19 = (v19 - 1);
          }
          else
          {
            v188 = *(_QWORD *)(v28 + 40);
            v19 = 1;
            v18 = v28;
          }
        }
        v22 = v30;
        v23 = v190;
        v27 = v192;
      }
      v34 = *(unsigned __int8 *)(*(_QWORD *)v26 + 16);
      v35 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
      if ((v35 & 1) == 0)
      {
        v42 = v19;
        v43 = v22;
        v44 = v23;
        v173 = v18;
        v45 = v24;
        LODWORD(v192) = v27;
        v46 = __cxa_guard_acquire(&qword_1ED7EAC88);
        v27 = v192;
        LOBYTE(v24) = v45;
        v18 = v173;
        v23 = v44;
        v22 = v43;
        v19 = v42;
        v14 = &unk_1ED7EA000;
        if (v46)
        {
          v47 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override)
            v47 = 0xFF51AFD7ED558CCDLL;
          qword_1ED7EAC80 = v47;
          __cxa_guard_release(&qword_1ED7EAC88);
          v27 = v192;
          LOBYTE(v24) = v45;
          v18 = v173;
          v23 = v44;
          v22 = v43;
          v19 = v42;
          v14 = (_QWORD *)&unk_1ED7EA000;
        }
      }
      v36 = v14[400];
      DWORD2(v203) = 0;
      *(_QWORD *)&v203 = 0;
      v37 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
      if ((v37 & 1) == 0)
      {
        v192 = v19;
        v48 = v22;
        v49 = v18;
        v174 = v24;
        v50 = v27;
        v51 = __cxa_guard_acquire(&qword_1ED7EAC88);
        v27 = v50;
        LOBYTE(v24) = v174;
        v18 = v49;
        v23 = v190;
        v19 = v192;
        v22 = v48;
        v14 = &unk_1ED7EA000;
        if (v51)
        {
          v52 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override)
            v52 = 0xFF51AFD7ED558CCDLL;
          qword_1ED7EAC80 = v52;
          __cxa_guard_release(&qword_1ED7EAC88);
          v27 = v50;
          LOBYTE(v24) = v174;
          v18 = v49;
          v23 = v190;
          v19 = v192;
          v22 = v48;
          v14 = (_QWORD *)&unk_1ED7EA000;
        }
      }
      v38 = 0x9DDFEA08EB382D69 * (v36 + ((v25 * (v34 + 1)) & 0x7FFFFFFF8));
      v39 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v38 ^ (v38 >> 47))) ^ ((0x9DDFEA08EB382D69 * (v38 ^ (v38 >> 47))) >> 47));
      v40 = v14[400];
      LODWORD(v203) = v21;
      *(_QWORD *)((char *)&v203 + 4) = v39;
      v24 = v24 && *(unsigned __int8 *)(*(_QWORD *)v26 + 16) - 11 < 2;
      v20 += v27;
      v41 = __ROR8__(v39 + 12, 12);
      v21 = (0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69
             * (v41 ^ ((0x9DDFEA08EB382D69 * (v40 ^ (unint64_t)v203 ^ v41)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                             * (v40 ^ v203 ^ v41)))) ^ ((0x9DDFEA08EB382D69 * (v41 ^ ((0x9DDFEA08EB382D69 * (v40 ^ (unint64_t)v203 ^ v41)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ (unint64_t)v203 ^ v41)))) >> 47))) ^ v39;
      v25 += 8;
      v17 += 48;
    }
    while (v23 != v17);
    v53 = v20 <= v178 - v20 ? v178 - v20 : v20;
    v16 = v184;
    v12 = v186;
    v13 = v182;
    v15 = v180;
    if (!v24)
    {
      v54 = v21;
      v55 = v53 | (v19 << 32);
    }
    else
    {
LABEL_45:
      v54 = 0;
      v55 = 0xFFFFFFFFLL;
    }
    v209 = v55;
    v210 = v54;
    v56 = HIDWORD(v55);
    if (v15 <= v55)
    {
      v8 = v176;
      if ((_DWORD)v15 != (_DWORD)v55)
        goto LABEL_56;
      if (v13 > HIDWORD(v55))
      {
        v62 = (_DWORD *)sub_1C63E1280((uint64_t)&v194, &v210);
        v14 = (_QWORD *)&unk_1ED7EA000;
        *v62 = 1;
        v62[1] = v16;
        goto LABEL_57;
      }
      if ((_DWORD)v13 != HIDWORD(v55))
      {
LABEL_56:
        v56 = v13;
LABEL_57:
        v55 = v15;
        goto LABEL_58;
      }
      if ((_DWORD)v196)
      {
        LODWORD(v57) = (v196 - 1) & (37 * v54);
        v58 = (int *)((char *)v194 + 8 * v57);
        v59 = *v58;
        if (*v58 == v54)
        {
LABEL_53:
          if ((char *)v194 + 8 * v196 == (char *)v58 || (v60 = v58[1], v197 + 12 * v60 == v198[0]))
          {
            v66 = (_DWORD *)sub_1C63E1280((uint64_t)&v194, &v210);
            v14 = (_QWORD *)&unk_1ED7EA000;
            *v66 = 1;
            v66[1] = v16;
          }
          else
          {
            ++*(_DWORD *)(v197 + 12 * v60 + 4);
          }
          goto LABEL_56;
        }
        v67 = 1;
        while (v59 != -1)
        {
          v68 = v57 + v67++;
          v57 = v68 & (v196 - 1);
          v59 = *((_DWORD *)v194 + 2 * v57);
          if (v59 == v54)
          {
            v58 = (int *)((char *)v194 + 8 * v57);
            goto LABEL_53;
          }
        }
      }
      v58 = (int *)((char *)v194 + 8 * v196);
      goto LABEL_53;
    }
    v8 = v176;
    if (v195)
    {
      if (v196 <= 4 * (int)v195 || v196 < 0x41)
      {
        if ((_DWORD)v196)
        {
          v63 = v194;
          v64 = 8 * v196;
          do
          {
            *v63 = -1;
            v63 += 2;
            v64 -= 8;
          }
          while (v64);
        }
        v195 = 0;
      }
      else
      {
        sub_1C476BF54(&v194);
      }
    }
    v198[0] = v197;
    v65 = (_DWORD *)sub_1C63E1280((uint64_t)&v194, &v210);
    *v65 = 1;
    v65[1] = v16;
    v14 = (_QWORD *)&unk_1ED7EA000;
LABEL_58:
    v15 = v55;
    v13 = v56;
    v61 = v12 <= 1;
    v12 = v16;
  }
  while (!v61);
  v69 = v198[0];
  if (v198[0] == v197)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    v70 = -1;
    do
    {
      v71 = v69 - 12;
      if (*(_DWORD *)(v69 - 8) < v70)
      {
        v11 = *(_DWORD *)(v69 - 4);
        v70 = *(_DWORD *)(v69 - 8);
      }
      v69 -= 12;
    }
    while (v71 != v197);
  }
LABEL_83:
  sub_1C6150A04(&v194);
  v179 = v11;
  v175 = 16 * v11;
  if ((_DWORD)v8)
  {
    v72 = 0;
    v73 = v199;
    v74 = v205;
    do
    {
      v75 = *(_QWORD *)&v73[48 * v72];
      v76 = *(_QWORD *)(v75 + 16 * v11);
      v77 = *(unsigned __int8 *)(v76 + 16);
      if (v77 == 60)
      {
        *((_DWORD *)v74 + v72) = 0;
        goto LABEL_107;
      }
      if (v77 < 0x1C)
      {
        if (v77 <= 0x14)
        {
          *((_DWORD *)v74 + v72) = 2;
          goto LABEL_107;
        }
        if (v77 != 21)
        {
          *((_DWORD *)v74 + v72) = 4;
          goto LABEL_107;
        }
      }
      else
      {
        v78 = *((unsigned int *)v73 + 2);
        if ((_DWORD)v78)
        {
          v79 = 0;
          v80 = *(unsigned __int8 *)(v75 + 16 * v11 + 8);
          v81 = v200;
          do
          {
            if (v79 != v11)
            {
              if (!(_DWORD)v81)
              {
LABEL_103:
                *((_DWORD *)v74 + v72) = 1;
                goto LABEL_107;
              }
              v82 = v73;
              v83 = v81;
              while (1)
              {
                v84 = *(_QWORD *)v82 + 16 * v79;
                if (*(unsigned __int8 *)(v84 + 8) == v80 && !*(_BYTE *)(v84 + 9) && *(_QWORD *)v84 == v76)
                  break;
                v82 += 48;
                if (!--v83)
                  goto LABEL_103;
              }
              *(_BYTE *)(v84 + 9) = 1;
            }
            ++v79;
          }
          while (v79 != v78);
        }
      }
      *((_DWORD *)v74 + v72) = 3;
LABEL_107:
      ++v72;
    }
    while (v72 != v8);
  }
  v172 = 1;
LABEL_109:
  v194 = v198;
  v195 = (uint64_t)v198;
  v196 = 4;
  LODWORD(v197) = 0;
  v85 = v199;
  v86 = *((unsigned int *)v199 + 2);
  if ((_DWORD)v86)
  {
    v87 = *(uint64_t **)v199;
    v88 = 16 * v86;
    do
    {
      v89 = *v87;
      v87 += 2;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v194, v89);
      v88 -= 16;
    }
    while (v88);
    v91 = v194;
    v90 = (_QWORD *)v195;
    v92 = HIDWORD(v196);
    v85 = v199;
  }
  else
  {
    v92 = 0;
    v91 = v198;
    v90 = v198;
  }
  if ((_DWORD)v200 == 1)
  {
LABEL_115:
    v93 = ((v92 - (_DWORD)v197) | 2) != 2 && ((v92 - (_DWORD)v197) & (v92 - (_DWORD)v197 - 1)) == 0;
  }
  else
  {
    v94 = &v85[48 * v200];
    v95 = v85 + 48;
    while (1)
    {
      v96 = v85;
      v85 = v95;
      v97 = *((unsigned int *)v96 + 14);
      if ((_DWORD)v97)
        break;
LABEL_125:
      v95 = v85 + 48;
      if (v85 + 48 == v94)
        goto LABEL_115;
    }
    v98 = (uint64_t *)*((_QWORD *)v96 + 6);
    v99 = 16 * v97;
    while (1)
    {
      v100 = sub_1C477672C((uint64_t)&v194, *v98);
      v91 = v194;
      v90 = (_QWORD *)v195;
      v101 = v196;
      v92 = HIDWORD(v196);
      if ((void *)v195 == v194)
        v101 = HIDWORD(v196);
      if (v100 == (_QWORD *)(v195 + 8 * v101))
        break;
      v98 += 2;
      v99 -= 16;
      if (!v99)
        goto LABEL_125;
    }
    v93 = 0;
  }
  if (v90 != v91)
    free(v90);
  if (!v93)
  {
    v102 = v200;
    if ((_DWORD)v200)
    {
      v103 = 0;
      v104 = v199;
      v105 = *((unsigned int *)v199 + 2);
      do
      {
        if ((_DWORD)v105)
        {
          v106 = (_BYTE *)(*(_QWORD *)&v104[48 * v103] + 9);
          v107 = v105;
          do
          {
            *v106 = 0;
            v106 += 16;
            --v107;
          }
          while (v107);
        }
        ++v103;
      }
      while (v103 != v102);
    }
    *(_QWORD *)&v203 = v204;
    *((_QWORD *)&v203 + 1) = 0x200000000;
    v194 = &v196;
    v195 = 0x100000000;
    if (v8 > 1)
    {
      sub_1C63E135C((uint64_t)&v194, v8, (uint64_t)&v203);
      if ((_QWORD *)v203 != v204)
        free((void *)v203);
LABEL_140:
      v108 = 0;
      v109 = 0;
      v110 = v8;
      do
      {
        v111 = (char *)v194 + v108;
        v112 = *(_QWORD *)(*(_QWORD *)&v199[v109] + v175);
        v113 = *(unsigned int *)((char *)v194 + v108 + 8);
        if (v113 >= *(unsigned int *)((char *)v194 + v108 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v194 + v108, (uint64_t)(v111 + 16), v113 + 1, 8);
          v113 = *((unsigned int *)v111 + 2);
        }
        *(_QWORD *)(*(_QWORD *)v111 + 8 * v113) = v112;
        ++*((_DWORD *)v111 + 2);
        v109 += 48;
        v108 += 32;
        --v110;
      }
      while (v110);
    }
    else if ((_DWORD)v8)
    {
      v196 = (uint64_t)v198;
      v197 = 0x200000000;
      LODWORD(v195) = v8;
      goto LABEL_140;
    }
    if (v177 == 1)
    {
      LOBYTE(v114) = 0;
      goto LABEL_192;
    }
    v114 = 0;
    v181 = 1;
LABEL_147:
    v115 = 0;
    v116 = 0;
    v209 = 0xFFFFFFFF00000001;
    while (1)
    {
      v117 = v115;
      if ((_DWORD)v8)
      {
        LODWORD(v192) = *((_DWORD *)&v209 + v116);
        v118 = v179 + (_DWORD)v192 * v181;
        if ((v118 & 0x80000000) == 0 && (int)v118 < v177)
          break;
      }
LABEL_190:
      v115 = 1;
      v116 = 1;
      if ((v117 & 1) != 0)
      {
        if (++v181 == v177)
        {
LABEL_192:
          v148 = (uint64_t *)v194;
          if ((_DWORD)v195)
          {
            v149 = 4 * v195;
            do
            {
              v150 = (uint64_t *)v148[v149 - 4];
              if (&v148[v149 - 2] != v150)
                free(v150);
              v149 -= 4;
            }
            while (v149 * 8);
            v148 = (uint64_t *)v194;
          }
          if (v148 != &v196)
            free(v148);
          v151 = v172 & v114;
          v172 = 0;
          if ((v151 & 1) == 0)
            goto LABEL_204;
          goto LABEL_109;
        }
        goto LABEL_147;
      }
    }
    v119 = 0;
    v185 = (v118 - v192);
    v187 = v115;
    while (2)
    {
      v120 = v205;
      v121 = *((_DWORD *)v205 + v119);
      if (v121 == 4)
      {
LABEL_153:
        *((_DWORD *)v120 + v119) = 4;
        v114 = 1;
      }
      else
      {
        v183 = v114;
        v126 = (char *)v194 + 32 * v119;
        v189 = *((unsigned int *)v126 + 2);
        v191 = *(_BYTE **)v126;
        v127 = *(_QWORD *)&v199[48 * v119];
        v128 = *(_QWORD *)(v127 + 16 * v185);
        v129 = v200;
        v130 = *(unsigned __int8 *)(v127 + 16 * v118 + 8);
        v211 = __PAIR64__(v118, v119);
        v193 = 0;
        sub_1C63E1444((uint64_t)&v203, (uint64_t)v202, (int *)&v211, &v193);
        v131 = *(unsigned int *)(v203 + 8);
        LOBYTE(v211) = (v121 & 0xFFFFFFFE) == 2;
        if (!(_DWORD)v129)
          goto LABEL_189;
        v132 = 0;
        v133 = 0;
        v134 = 0;
        do
        {
          v135 = *(_QWORD *)&v199[v132] + 16 * v118;
          if (*(_BYTE *)(v135 + 9))
            v136 = 0;
          else
            v136 = *(unsigned __int8 *)(v135 + 8) == v130;
          if (v136)
          {
            v137 = *(_QWORD *)v135;
            if (v121 == 3)
            {
              if (v137 == v128)
              {
                if ((v134 & 0xFF00000000) != 0)
                  v134 = v134 & 0xFFFFFFFF00000000 | v133;
                else
                  v134 = v133 | 0x100000000;
              }
            }
            else if (v121 <= 2)
            {
              v138 = (int)v192 <= 0 ? v137 : v128;
              v139 = (int)v192 <= 0 ? v128 : v137;
              v140 = v131;
              v141 = sub_1C63E151C((uint64_t *)&v199, v138, v139, v191, v189, v118, v119, v133, &v211);
              v131 = v140;
              if ((int)v141 > (int)v140)
              {
                v142 = v141;
                v143 = v134 & 0xFFFFFFFF00000000;
                if ((v134 & 0xFF00000000) == 0)
                  v143 = 0x100000000;
                v134 = v143 | v133;
                *(_QWORD *)&v203 = __PAIR64__(v118, v119);
                sub_1C63E1884(v202, (int *)&v203)[2] = v141;
                v131 = v142;
              }
            }
          }
          ++v133;
          v132 += 48;
        }
        while (v129 != v133);
        v8 = v176;
        if ((v134 & 0xFF00000000) == 0)
        {
LABEL_189:
          v120 = v205;
          v117 = v187;
          goto LABEL_153;
        }
        v144 = v199;
        v145 = *(_QWORD *)&v199[48 * v134] + 16 * v118;
        *(_BYTE *)(v145 + 9) = v211;
        v146 = *(_QWORD *)&v144[48 * v119] + 16 * v118;
        v203 = *(_OWORD *)v146;
        v147 = *(_WORD *)(v145 + 8);
        *(_QWORD *)v146 = *(_QWORD *)v145;
        *(_WORD *)(v146 + 8) = v147;
        *(_QWORD *)v145 = v203;
        *(_WORD *)(v145 + 8) = WORD4(v203);
        v114 = v183;
        v117 = v187;
      }
      v122 = (char *)v194 + 32 * v119;
      if (*((_DWORD *)v122 + 2) != 2)
      {
        v123 = (unint64_t *)(*(_QWORD *)&v199[48 * v119] + 16 * v118);
        v211 = **(_QWORD **)v122;
        v212 = *v123;
        sub_1C6095230((uint64_t)&v203, (uint64_t *)&v211, 2);
        if (*((_QWORD *)&v203 + 1))
        {
          if (*(_BYTE *)(*((_QWORD *)&v203 + 1) + 16) != 28 && v204[0] != *((_QWORD *)&v203 + 1))
          {
            v124 = *v123;
            v125 = *((unsigned int *)v122 + 2);
            if (v125 >= *((unsigned int *)v122 + 3))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v122, (uint64_t)(v122 + 16), v125 + 1, 8);
              v125 = *((unsigned int *)v122 + 2);
            }
            *(_QWORD *)(*(_QWORD *)v122 + 8 * v125) = v124;
            ++*((_DWORD *)v122 + 2);
          }
        }
      }
      if (++v119 == v8)
        goto LABEL_190;
      continue;
    }
  }
LABEL_204:
  if (v205 != &v208)
    free(v205);
  v152 = *((unsigned int *)v199 + 2);
  v194 = &v196;
  v195 = 0x800000000;
  sub_1C4848C0C((unsigned int *)&v194, v152, 0);
  v153 = *((unsigned int *)v199 + 2);
  if ((_DWORD)v153)
  {
    v154 = 0;
    v155 = 0;
    v156 = 16 * v153;
    do
    {
      *(_QWORD *)((char *)v194 + v154) = *(_QWORD *)(*(_QWORD *)v199 + v155);
      v155 += 16;
      v154 += 8;
    }
    while (v156 != v155);
  }
  v157 = (uint64_t *)v194;
  v158 = a3;
  if (&v194 != (void **)a3)
  {
    if (v194 == &v196)
    {
      v159 = v195;
      v160 = *(unsigned int *)(a3 + 8);
      if (v160 >= v195)
      {
        if ((_DWORD)v195)
          memmove(*(void **)a3, &v196, 8 * v195);
        *(_DWORD *)(a3 + 8) = v159;
      }
      else
      {
        if (*(_DWORD *)(a3 + 12) < v195)
        {
          *(_DWORD *)(a3 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v159, 8);
          v158 = a3;
LABEL_214:
          v160 = 0;
        }
        else
        {
          if (!(_DWORD)v160)
            goto LABEL_214;
          memmove(*(void **)a3, &v196, 8 * v160);
          v158 = a3;
        }
        if (v160 != v195)
        {
          memcpy((void *)(*(_QWORD *)v158 + 8 * v160), (char *)v194 + 8 * v160, 8 * v195 - 8 * v160);
          v158 = a3;
        }
        *(_DWORD *)(v158 + 8) = v159;
      }
    }
    else
    {
      if (*(_QWORD *)a3 != a3 + 16)
      {
        free(*(void **)a3);
        v158 = a3;
        v157 = (uint64_t *)v194;
      }
      *(_QWORD *)v158 = v157;
      *(_QWORD *)(v158 + 8) = v195;
      v194 = &v196;
      HIDWORD(v195) = 0;
    }
    LODWORD(v195) = 0;
    v157 = (uint64_t *)v194;
  }
  if (v157 != &v196)
    free(v157);
  v161 = *((unsigned int *)v199 + 14);
  v194 = &v196;
  v195 = 0x800000000;
  sub_1C4848C0C((unsigned int *)&v194, v161, 0);
  v162 = *((unsigned int *)v199 + 2);
  if ((_DWORD)v162)
  {
    v163 = 0;
    v164 = 0;
    v165 = 16 * v162;
    do
    {
      *(_QWORD *)((char *)v194 + v163) = *(_QWORD *)(*((_QWORD *)v199 + 6) + v164);
      v164 += 16;
      v163 += 8;
    }
    while (v165 != v164);
  }
  v166 = (uint64_t *)v194;
  v167 = a4;
  if (&v194 != (void **)a4)
  {
    if (v194 == &v196)
    {
      v168 = v195;
      v169 = *(unsigned int *)(a4 + 8);
      if (v169 >= v195)
      {
        if ((_DWORD)v195)
          memmove(*(void **)a4, &v196, 8 * v195);
        *(_DWORD *)(a4 + 8) = v168;
      }
      else
      {
        if (*(_DWORD *)(a4 + 12) < v195)
        {
          *(_DWORD *)(a4 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v168, 8);
          v167 = a4;
LABEL_229:
          v169 = 0;
        }
        else
        {
          if (!(_DWORD)v169)
            goto LABEL_229;
          memmove(*(void **)a4, &v196, 8 * v169);
          v167 = a4;
        }
        if (v169 != v195)
        {
          memcpy((void *)(*(_QWORD *)v167 + 8 * v169), (char *)v194 + 8 * v169, 8 * v195 - 8 * v169);
          v167 = a4;
        }
        *(_DWORD *)(v167 + 8) = v168;
      }
    }
    else
    {
      if (*(_QWORD *)a4 != a4 + 16)
      {
        free(*(void **)a4);
        v167 = a4;
        v166 = (uint64_t *)v194;
      }
      *(_QWORD *)v167 = v166;
      *(_QWORD *)(v167 + 8) = v195;
      v194 = &v196;
      HIDWORD(v195) = 0;
    }
    LODWORD(v195) = 0;
    v166 = (uint64_t *)v194;
  }
  if (v166 != &v196)
    free(v166);
  if ((v202[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v202[1], 4);
  return (uint64_t *)sub_1C618F3AC(&v199);
}

BOOL sub_1C60975A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  int v8;
  unsigned int v10;
  int v12;
  BOOL v14;
  _BYTE v16[8];
  uint64_t v17;
  _BYTE v18[8];
  uint64_t v19;
  uint64_t v20[2];
  uint64_t v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 *)(a1 + 16);
  if (v6 != 5 && v6 - 4 <= 0x10)
  {
    v8 = *(unsigned __int8 *)(a3 + 16);
    if (v8 != 5 && (v8 - 4) < 0x11)
      return 1;
  }
  v10 = *(unsigned __int8 *)(a2 + 16);
  if (v10 != 5 && v10 - 4 <= 0x10)
  {
    v12 = *(unsigned __int8 *)(a4 + 16);
    if (v12 != 5 && (v12 - 4) < 0x11)
      return 1;
  }
  if (v6 <= 0x1B)
  {
    v14 = v10 > 0x1B || *(unsigned __int8 *)(a3 + 16) > 0x1Bu;
    if (!v14 && *(unsigned __int8 *)(a4 + 16) < 0x1Cu)
      return 1;
  }
  v21[0] = a1;
  v21[1] = a3;
  sub_1C6095230((uint64_t)v18, v21, 2);
  if (v19)
  {
    if (*(_BYTE *)(v19 + 16) != 28)
      return 1;
  }
  v20[0] = a2;
  v20[1] = a4;
  sub_1C6095230((uint64_t)v16, v20, 2);
  return v17 && *(_BYTE *)(v17 + 16) != 28;
}

uint64_t llvm::slpvectorizer::BoUpSLP::canMapToVector(llvm::slpvectorizer::BoUpSLP *this, llvm::Type *a2, const llvm::DataLayout *a3)
{
  uint64_t v6;
  llvm::Type *v7;
  int v8;
  llvm::Type **v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  unint64_t v16;
  const char *v18;
  uint64_t v19;
  unint64_t v20;

  v6 = 1;
  v7 = a2;
  while (1)
  {
    v8 = *((_DWORD *)v7 + 2);
    if ((v8 & 0xFC | 2) != 0x12)
      break;
    if (*((_DWORD *)v7 + 2) == 16)
    {
      v9 = (llvm::Type **)*((_QWORD *)v7 + 2);
      v10 = *((unsigned int *)v7 + 3);
      if ((_DWORD)v10)
      {
        v11 = 0;
        while (v9[v11] == *v9)
        {
          if (v10 == ++v11)
            goto LABEL_10;
        }
        return 0;
      }
    }
    else
    {
      LODWORD(v10) = *((_DWORD *)v7 + 8);
      v9 = (llvm::Type **)((char *)v7 + 24);
    }
LABEL_10:
    v7 = *v9;
    v6 = (v10 * v6);
  }
  v12 = *((_DWORD *)v7 + 2) > 0x14u || ((1 << v8) & 0x10A07F) == 0;
  if (v12 || (v8 & 0xFD) == 4)
    return 0;
  llvm::FixedVectorType::get(v7, (llvm::Type *)v6);
  sub_1C4768AD0((uint64_t)a3, v13);
  v16 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  if ((_DWORD)v14 == 1)
  if (v16 < *((unsigned int *)this + 501) || v16 > *((unsigned int *)this + 500))
    return 0;
  sub_1C4768AD0((uint64_t)a3, (uint64_t)a2);
  v20 = (v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  if ((_DWORD)v18 == 1)
  if (v16 == v20)
    return v6;
  else
    return 0;
}

uint64_t sub_1C6097834(uint64_t a1)
{
  int v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  unsigned int v8;

  if (*(_BYTE *)(a1 + 16) == 89)
  {
    v1 = *(_DWORD *)(a1 + 20);
    if ((v1 & 0x40000000) != 0)
      v2 = *(_QWORD *)(a1 - 8);
    else
      v2 = a1 - 32 * (v1 & 0x7FFFFFF);
    v4 = *(_QWORD *)(v2 + 32);
    if (v4)
      v5 = *(_BYTE *)(v4 + 16) == 16;
    else
      v5 = 0;
    if (!v5)
      goto LABEL_11;
    v3 = (_QWORD *)(v4 + 24);
    if (*(_DWORD *)(v4 + 32) >= 0x41u)
      v3 = (_QWORD *)*v3;
LABEL_14:
    v6 = *(_DWORD *)v3;
    v8 = v6 & 0xFFFFFF00;
    v7 = 0x100000000;
    return v7 | v8 | v6;
  }
  if (*(_DWORD *)(a1 + 72) == 1)
  {
    v3 = *(_QWORD **)(a1 + 64);
    goto LABEL_14;
  }
LABEL_11:
  LOBYTE(v6) = 0;
  v7 = 0;
  v8 = 0;
  return v7 | v8 | v6;
}

uint64_t llvm::slpvectorizer::BoUpSLP::getEntryCost(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,llvm::Type *a24,int a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,int a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62)
{
  uint64_t v64;
  uint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  unsigned int v69;
  BOOL v70;
  int v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  int v80;
  int v81;
  llvm::Type *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  int v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int *v101;
  void *v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  BOOL v110;
  unint64_t v111;
  int v113;
  uint64_t v114;
  uint64_t *v115;
  unsigned int v116;
  unint64_t v117;
  int v119;
  int v120;
  unint64_t v121;
  unsigned int v122;
  unint64_t v123;
  uint64_t v125;
  int v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  BOOL v142;
  unint64_t i;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  __int32 v147;
  int8x8_t *v148;
  uint64_t v149;
  int8x8_t v150;
  uint8x8_t v151;
  uint8x8_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  unint64_t v158;
  const void **v159;
  uint64_t v160;
  uint64_t v161;
  __int32 v162;
  int8x8_t *v163;
  uint64_t v164;
  int8x8_t v165;
  uint8x8_t v166;
  uint8x8_t v167;
  _QWORD *v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  llvm::FixedVectorType ***v186;
  unint64_t isGatherShuffledEntry;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  _QWORD **v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  _QWORD *v199;
  int v200;
  llvm::FixedVectorType *v201;
  llvm::FixedVectorType *v202;
  uint64_t v203;
  int v204;
  llvm::FixedVectorType ***v205;
  llvm::FixedVectorType *v206;
  uint64_t v207;
  uint64_t v208;
  __n128 v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  unint64_t v215;
  int v216;
  uint64_t v217;
  int v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  int v224;
  unint64_t v225;
  uint64_t v226;
  int v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  int *v234;
  unint64_t v235;
  uint64_t v236;
  int v237;
  void *v238;
  unint64_t v239;
  BOOL v241;
  int64_t v242;
  int *v243;
  int v245;
  unsigned int v246;
  unint64_t v247;
  uint64_t v248;
  unsigned int v249;
  unsigned int v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  int v258;
  int64_t v259;
  unsigned int v260;
  uint64_t *v261;
  char v262;
  llvm::Type *v263;
  unsigned int v264;
  unsigned int v265;
  uint64_t v266;
  unsigned int v267;
  uint64_t v268;
  double v269;
  uint64_t v270;
  uint64_t v271;
  int v272;
  int v273;
  unint64_t v274;
  uint64_t v275;
  int v276;
  unint64_t v277;
  const char *v278;
  int v279;
  int v280;
  unsigned int v281;
  unsigned int v282;
  llvm::Type *v283;
  unsigned int v284;
  int v285;
  int v286;
  char *v287;
  unsigned int v288;
  unint64_t v289;
  uint64_t v290;
  unsigned int v291;
  uint64_t *v292;
  _QWORD *v293;
  uint64_t *v294;
  _QWORD *v295;
  uint64_t *v296;
  char *v297;
  int v298;
  int v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  _DWORD *v303;
  int v304;
  unsigned int v305;
  int v306;
  _BOOL4 v307;
  unsigned int v308;
  int v309;
  unint64_t v310;
  _QWORD *v311;
  uint64_t *v312;
  int v313;
  unint64_t GatherCost;
  int v315;
  uint64_t *v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t *v319;
  unint64_t *v320;
  int v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  unsigned int v325;
  uint64_t v326;
  int v327;
  unint64_t *v328;
  llvm::Type *v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  __n128 v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  unsigned int v337;
  void *v338;
  int v339;
  char *v340;
  void *v341;
  int v343;
  char *v344;
  _BOOL4 v345;
  llvm::Type *v346;
  uint64_t v347;
  int v348;
  unint64_t v349;
  BOOL v350;
  uint64_t v351;
  int64_t v352;
  uint64_t v353;
  unsigned int v354;
  uint64_t v355;
  int v356;
  int v357;
  int v358;
  unsigned int v359;
  uint64_t v360;
  uint64_t v361;
  _QWORD *v362;
  int v363;
  unsigned int v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  llvm::FixedVectorType *v370;
  uint64_t v371;
  uint64_t v372;
  int v373;
  uint64_t v374;
  unint64_t v375;
  llvm::Type *v376;
  llvm::Type *v377;
  unint64_t v378;
  _DWORD *v379;
  unsigned int v380;
  _BOOL4 v381;
  uint64_t v382;
  uint64_t v383;
  _QWORD v384[2];
  int v385;
  uint64_t *v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  __int128 v392;
  void *v393[2];
  _BYTE v394[16];
  void *v395;
  uint64_t v396;
  _BYTE v397[48];
  void *__dst;
  uint64_t v399;
  uint64_t v400;
  void *v401;
  void *v402[5];
  void *v403[2];
  uint64_t v404;
  int *v405;
  uint64_t v406;
  _QWORD v407[8];

  v64 = (uint64_t)a2;
  v407[6] = *MEMORY[0x1E0C80C00];
  v66 = *a2;
  v67 = *((unsigned int *)a2 + 2);
  v68 = **a2;
  v69 = *(unsigned __int8 *)(v68 + 16);
  if (v69 == 61
    || (v69 > 0x1B ? (v70 = v69 - 81 >= 2) : (v70 = 1),
        v70 ? (v71 = 0) : (v71 = 1),
        v69 != 90 ? (v72 = v71 == 0) : (v72 = 0),
        !v72))
  {
    v68 = *(_QWORD *)(v68 - 64);
  }
  v370 = *(llvm::FixedVectorType **)v68;
  v376 = (llvm::Type *)v67;
  llvm::FixedVectorType::get(*(llvm::FixedVectorType **)v68, (llvm::Type *)v67);
  v74 = v73;
  v75 = *(_QWORD *)(a1 + 2144);
  v76 = *(unsigned int *)(a1 + 2160);
  if ((_DWORD)v76)
  {
    LODWORD(v77) = ((*v66 >> 4) ^ (*v66 >> 9)) & (v76 - 1);
    v78 = (uint64_t *)(v75 + 16 * v77);
    v79 = *v78;
    if (*v66 == *v78)
      goto LABEL_20;
    v80 = 1;
    while (v79 != -4096)
    {
      v81 = v77 + v80++;
      v77 = v81 & (v76 - 1);
      v79 = *(_QWORD *)(v75 + 16 * v77);
      if (*v66 == v79)
      {
        v78 = (uint64_t *)(v75 + 16 * v77);
        goto LABEL_20;
      }
    }
  }
  v78 = (uint64_t *)(v75 + 16 * v76);
LABEL_20:
  if (v78 == (uint64_t *)(v75 + 16 * v76))
    goto LABEL_21;
  v199 = ***(_QWORD ****)(a1 + 1920);
  v200 = *(_DWORD *)sub_1C63DF334(a1 + 2144, v66);
  LODWORD(__dst) = v200;
  if (v200 <= 63)
  {
    if (v200 <= 31)
    {
      switch(v200)
      {
        case 16:
          v201 = (llvm::FixedVectorType *)(*v199 + 1936);
          goto LABEL_264;
        case 8:
          v201 = (llvm::FixedVectorType *)(*v199 + 1912);
          goto LABEL_264;
        case 1:
          v201 = (llvm::FixedVectorType *)(*v199 + 1888);
          goto LABEL_264;
      }
    }
    else if (v200 == 32)
    {
      v201 = (llvm::FixedVectorType *)(*v199 + 1960);
      goto LABEL_264;
    }
LABEL_351:
    v303 = sub_1C5270984(*v199 + 2168, &__dst);
    v201 = (llvm::FixedVectorType *)*((_QWORD *)v303 + 1);
    if (!v201)
    {
      v201 = (llvm::FixedVectorType *)sub_1C484358C(*v199 + 2040, 24, 3);
      v304 = (int)__dst;
      *(_QWORD *)v201 = v199;
      *((_QWORD *)v201 + 2) = 0;
      *((_QWORD *)v201 + 1) = (v304 << 8) | 0xDu;
      *((_QWORD *)v303 + 1) = v201;
    }
    goto LABEL_264;
  }
  if (v200 != 64)
  {
    if (v200 == 128)
    {
      v201 = (llvm::FixedVectorType *)(*v199 + 2008);
      goto LABEL_264;
    }
    goto LABEL_351;
  }
  v201 = (llvm::FixedVectorType *)(*v199 + 1984);
LABEL_264:
  llvm::FixedVectorType::get(v201, (llvm::Type *)v67);
  v74 = v254;
LABEL_21:
  v82 = (llvm::Type *)*(unsigned int *)(v64 + 104);
  if (!(_DWORD)v82)
    v82 = (llvm::Type *)*(unsigned int *)(v64 + 8);
  llvm::FixedVectorType::get(*(llvm::FixedVectorType **)(v74 + 24), v82);
  v374 = v83;
  v84 = *(_DWORD *)(v64 + 104);
  v85 = *(_QWORD *)(a1 + 1936);
  v384[0] = a1;
  v384[1] = v85;
  v385 = 0;
  v386 = v66;
  v387 = v67;
  v388 = v74;
  v389 = a3;
  v390 = a4;
  v391 = v64;
  v383 = v64;
  if (*(_DWORD *)(v64 + 88) != 2)
  {
    v393[0] = 0;
    LODWORD(v393[1]) = 0;
    v405 = (int *)v407;
    v406 = 0xC00000000;
    v90 = *(unsigned int *)(v64 + 136);
    if ((_DWORD)v90)
    {
      __dst = &v400;
      v399 = 0xC00000000;
      v91 = *(_QWORD *)(v64 + 384);
      if (v91 && *(_BYTE *)(v91 + 16) == 61)
      {
        sub_1C49F6D78((uint64_t)&__dst, v90);
        v92 = *(unsigned int *)(v64 + 136);
        v93 = (int *)__dst;
        if ((_DWORD)v92)
        {
          memmove(__dst, *(const void **)(v64 + 128), 4 * v92);
          v93 = (int *)__dst;
        }
      }
      else
      {
        v94 = v84;
        v95 = v67;
        v96 = v74;
        v97 = *(_QWORD *)(v64 + 128);
        if (v90 >= 0xD)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)&v400, v90, 4);
          v98 = v399;
          v93 = (int *)__dst;
        }
        else
        {
          v98 = 0;
          v93 = (int *)&v400;
        }
        memset(&v93[v98], 255, 4 * v90);
        v99 = 0;
        LODWORD(v399) = v399 + v90;
        do
        {
          v93[*(unsigned int *)(v97 + 4 * v99)] = v99;
          ++v99;
        }
        while (v90 != v99);
        v74 = v96;
        v67 = v95;
        v84 = v94;
      }
      sub_1C60904B8(&v405, v93, v399);
      if (__dst != &v400)
        free(__dst);
    }
    if (v84)
      sub_1C60904B8(&v405, *(int **)(v64 + 96), *(unsigned int *)(v64 + 104));
    v100 = v406;
    if ((_DWORD)v406)
    {
      v101 = v405;
      if ((sub_1C53EC390(v405, v406, v406) & 1) != 0)
      {
        LODWORD(v100) = 0;
      }
      else
      {
        v102 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, int *, uint64_t, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 1936) + 832))(**(_QWORD **)(a1 + 1936), 7, v374, v101, v100, 0, 0);
        LODWORD(v100) = v103;
        v393[0] = v102;
        LODWORD(v393[1]) = v103;
      }
    }
    v372 = *(_QWORD *)(v64 + 384);
    if (v372 == *(_QWORD *)(v64 + 392))
      __asm { BR              X10 }
    v365 = v74;
    v104 = 8 * v67;
    if (v84)
    {
      v105 = *(unsigned int *)(v64 + 104);
      if ((_DWORD)v105)
      {
        v106 = *(unsigned int **)(v64 + 96);
        v107 = 4 * v105;
        do
        {
          v108 = v66[*v106];
          v109 = *(unsigned __int8 *)(v108 + 16) - 29;
          v110 = v109 > 0x3F;
          v111 = (1 << v109) & 0xF1F3FFE3BFFFF807;
          if (v110 || v111 == 0)
            v113 = 0;
          else
            sub_1C4DE9CE4(*(_QWORD **)(a1 + 1936), v108);
          if (v113 == 1)
            LODWORD(v100) = 1;
          ++v106;
          v107 -= 4;
        }
        while (v107);
      }
      if ((_DWORD)v376)
      {
        v114 = v104;
        v115 = v66;
        do
        {
          v116 = *(unsigned __int8 *)(*v115 + 16) - 29;
          v110 = v116 > 0x3F;
          v117 = (1 << v116) & 0xF1F3FFE3BFFFF807;
          if (v110 || v117 == 0)
            v119 = 0;
          else
            sub_1C4DE9CE4(*(_QWORD **)(a1 + 1936), *v115);
          if (v119 == 1)
            LODWORD(v100) = 1;
          ++v115;
          v114 -= 8;
        }
        while (v114);
      }
      LODWORD(v393[1]) = v100;
      v64 = v383;
    }
    if ((_DWORD)v376)
    {
      v120 = 0;
      v121 = 0;
      do
      {
        v122 = *(unsigned __int8 *)(*v66 + 16) - 29;
        v110 = v122 > 0x3F;
        v123 = (1 << v122) & 0xF1F3FFE3BFFFF807;
        if (v110 || v123 == 0)
        {
          v126 = 0;
          v125 = -1;
        }
        else
        {
          v125 = sub_1C4DE9CE4(*(_QWORD **)(a1 + 1936), *v66);
        }
        if (v126 == 1)
          v120 = 1;
        if (__OFADD__(v121, v125))
          v121 = ((uint64_t)(v121 + v125) >> 63) ^ 0x8000000000000000;
        else
          v121 += v125;
        ++v66;
        v104 -= 8;
      }
      while (v104);
    }
    else
    {
      v121 = 0;
      v120 = 0;
    }
    v127 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v127)
    {
      v128 = *(_QWORD **)a1;
      v129 = *(_QWORD *)a1 + 8 * v127;
      v378 = v121;
      v355 = v129;
      v360 = a1;
      v357 = v120;
      do
      {
        v130 = *v128;
        if (*v128 == v64)
          break;
        v132 = *(_QWORD *)(v130 + 384);
        v131 = *(_QWORD *)(v130 + 392);
        if (v132 != v131)
        {
          v133 = v132 ? *(unsigned __int8 *)(v132 + 16) - 28 : 0;
          v134 = *(_QWORD *)(v64 + 384);
          v135 = v134 ? *(unsigned __int8 *)(v134 + 16) - 28 : 0;
          if (v133 == v135)
          {
            if (v131)
              v136 = *(unsigned __int8 *)(v131 + 16) - 28;
            else
              v136 = 0;
            v137 = *(_QWORD *)(v64 + 392);
            if (v137)
              LODWORD(v137) = *(unsigned __int8 *)(v137 + 16) - 28;
            if (v136 == (_DWORD)v137)
              goto LABEL_124;
          }
          if (v132)
            LODWORD(v132) = *(unsigned __int8 *)(v132 + 16) - 28;
          v138 = *(_QWORD *)(v64 + 392);
          if (v138)
            LODWORD(v138) = *(unsigned __int8 *)(v138 + 16) - 28;
          if ((_DWORD)v132 == (_DWORD)v138)
          {
            if (v131)
              LODWORD(v131) = *(unsigned __int8 *)(v131 + 16) - 28;
            if (v134)
              LODWORD(v134) = *(unsigned __int8 *)(v134 + 16) - 28;
            if ((_DWORD)v131 == (_DWORD)v134)
            {
LABEL_124:
              v139 = *(unsigned int *)(v64 + 216);
              if ((_DWORD)v139 == *(_DWORD *)(v130 + 216))
              {
                if (v139 > 0x39)
                {
                  v168 = v128;
                  v140 = operator new();
                  *(_QWORD *)v140 = v140 + 16;
                  *(_QWORD *)(v140 + 8) = 0x600000000;
                  sub_1C4765AA4((char *)v140, (v139 + 63) >> 6, 0);
                  v128 = v168;
                  *(_DWORD *)(v140 + 64) = v139;
                  LODWORD(v139) = *(_DWORD *)(v130 + 216);
                }
                else
                {
                  v140 = (v139 << 58) | 1;
                }
                __dst = (void *)v140;
                if (!(_DWORD)v139)
                {
                  sub_1C4914448((void ***)&__dst);
                  v225 = 0;
                  v224 = 0;
                  a1 = v360;
LABEL_236:
                  __dst = &v400;
                  v399 = 0xC00000000;
                  v230 = *(_QWORD *)v64;
                  v231 = *(_DWORD *)(v64 + 8);
                  v232 = *(_QWORD *)(v64 + 128);
                  v233 = *(unsigned int *)(v64 + 136);
                  v234 = *(int **)(v64 + 96);
                  v235 = *(unsigned int *)(v64 + 104);
                  v403[0] = (void *)v64;
                  sub_1C609C104(v230, v231, v232, v233, v234, v235, (unsigned int (*)(uint64_t, uint64_t))sub_1C60B013C, (uint64_t)v403, (char *)&__dst, 0, 0);
                  v236 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, void *, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 1936) + 832))(**(_QWORD **)(a1 + 1936), 2, v374, __dst, v399, 0, 0);
                  LODWORD(v393[1]) = v237;
                  v238 = v393[1];
                  v239 = v236 + v225;
                  if (__OFADD__(v236, v225))
                    v239 = ((uint64_t)(v236 + v225) >> 63) ^ 0x8000000000000000;
                  if (v224 == 1 || v120 == 1)
                    v238 = (void *)((unint64_t)v393[1] & 0xFFFFFFFF00000000 | 1);
                  v241 = __OFSUB__(v239, v121);
                  v242 = v239 - v121;
                  if (v241)
                    v242 = (v242 >> 63) ^ 0x8000000000000000;
                  *(_QWORD *)&v392 = v242;
                  *((_QWORD *)&v392 + 1) = v238;
                  if (__dst != &v400)
                    free(__dst);
                  v243 = v405;
                  if (v405 == (int *)v407)
                    return v392;
LABEL_248:
                  free(v243);
                  return v392;
                }
                v362 = v128;
                v141 = 0;
                v142 = 0;
                for (i = v139; i != v141; v142 = v141 >= i)
                {
                  v144 = v140 >> 1;
                  v145 = v140 >> 58;
                  if ((v140 & 1) != 0)
                  {
                    v152 = (uint8x8_t)vcnt_s8((int8x8_t)(v144 & ~(-1 << v145)));
                    v152.i16[0] = vaddlv_u8(v152);
                    v147 = v152.i32[0];
                  }
                  else
                  {
                    v146 = *(unsigned int *)(v140 + 8);
                    if ((_DWORD)v146)
                    {
                      v147 = 0;
                      v148 = *(int8x8_t **)v140;
                      v149 = 8 * v146;
                      do
                      {
                        v150 = *v148++;
                        v151 = (uint8x8_t)vcnt_s8(v150);
                        v151.i16[0] = vaddlv_u8(v151);
                        v147 += v151.i32[0];
                        v149 -= 8;
                      }
                      while (v149);
                    }
                    else
                    {
                      v147 = 0;
                    }
                  }
                  v153 = 0;
                  v382 = ~(-1 << v145);
                  v154 = v144 & v382;
                  v155 = *(_QWORD *)(v64 + 208) + 80 * v141;
                  v156 = 8;
                  while (1)
                  {
                    v157 = v153;
                    v158 = v154;
                    if ((v140 & 1) == 0)
                    {
                      v157 = v153 & 0x3F;
                      v158 = *(_QWORD *)(*(_QWORD *)v140 + 8 * (v153 >> 6));
                    }
                    if (((v158 >> v157) & 1) == 0)
                    {
                      v159 = (const void **)(*(_QWORD *)(v130 + 208) + v156);
                      v160 = *(unsigned int *)v159;
                      if ((_DWORD)v160 == *(_DWORD *)(v155 + 8) && !memcmp(*(v159 - 1), *(const void **)v155, 8 * v160))
                        break;
                    }
                    ++v153;
                    v156 += 80;
                    if (i == v153)
                      goto LABEL_143;
                  }
                  if ((v140 & 1) != 0)
                  {
                    v140 = v140 & 0xFC00000000000000 | (2 * (((1 << v153) | v154) & v382)) | 1;
                    __dst = (void *)v140;
                  }
                  else
                  {
                    *(_QWORD *)(*(_QWORD *)v140 + 8 * (v153 >> 6)) |= 1 << v153;
                  }
LABEL_143:
                  v64 = v383;
                  v121 = v378;
                  if ((v140 & 1) != 0)
                  {
                    v167 = (uint8x8_t)vcnt_s8((int8x8_t)((v140 >> 1) & ~(-1 << (v140 >> 58))));
                    v167.i16[0] = vaddlv_u8(v167);
                    v162 = v167.i32[0];
                  }
                  else
                  {
                    v161 = *(unsigned int *)(v140 + 8);
                    if ((_DWORD)v161)
                    {
                      v162 = 0;
                      v163 = *(int8x8_t **)v140;
                      v164 = 8 * v161;
                      do
                      {
                        v165 = *v163++;
                        v166 = (uint8x8_t)vcnt_s8(v165);
                        v166.i16[0] = vaddlv_u8(v166);
                        v162 += v166.i32[0];
                        v164 -= 8;
                      }
                      while (v164);
                    }
                    else
                    {
                      v162 = 0;
                    }
                  }
                  if (v147 == v162)
                    break;
                  ++v141;
                }
                sub_1C4914448((void ***)&__dst);
                a1 = v360;
                v128 = v362;
                v120 = v357;
                v129 = v355;
                if (v142)
                {
                  v225 = 0;
                  v224 = 0;
                  goto LABEL_236;
                }
              }
            }
          }
        }
        ++v128;
      }
      while (v128 != (_QWORD *)v129);
    }
    v169 = *(_QWORD *)(v64 + 384);
    if (v169)
    {
      v170 = *(unsigned __int8 *)(v169 + 16);
      v171 = v365;
      if ((v170 - 41) <= 0x11)
      {
        v172 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 1936) + 824))(**(_QWORD **)(a1 + 1936), (v170 - 28), v365, 0, 0, 0, 0, 0, 0, 0, 0);
        v173 = v64;
        v175 = v174;
        v176 = *(_QWORD *)(v173 + 392);
        if (v176)
          v177 = *(unsigned __int8 *)(v176 + 16) - 28;
        else
          v177 = 0;
        v228 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 1936) + 824))(**(_QWORD **)(a1 + 1936), v177, v365, 0, 0, 0, 0, 0, 0, 0, 0);
        if (v229 == 1)
          v224 = 1;
        else
          v224 = v175;
        if (__OFADD__(v172, v228))
          v225 = ((v172 + v228) >> 63) ^ 0x8000000000000000;
        else
          v225 = v172 + v228;
        v64 = v383;
        goto LABEL_236;
      }
      if (v372)
      {
        v178 = v372;
        if (*(unsigned __int8 *)(v372 + 16) - 83 >= 0xFFFFFFFE)
        {
          v179 = (v170 - 28);
          goto LABEL_170;
        }
      }
    }
    else
    {
      v171 = v365;
      v178 = v372;
      if (v372 && *(unsigned __int8 *)(v372 + 16) - 83 >= 0xFFFFFFFE)
      {
        v179 = 0;
LABEL_170:
        v180 = (*(uint64_t (**)(_QWORD, uint64_t, llvm::FixedVectorType *, uint64_t, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 1936) + 864))(**(_QWORD **)(a1 + 1936), v179, v370, **(_QWORD **)(a1 + 2072) + 1888, *(_WORD *)(v178 + 18) & 0x3F, 0);
        v182 = v181;
        v183 = *(_QWORD *)(v383 + 384);
        if (v183)
          v184 = *(unsigned __int8 *)(v183 + 16) - 28;
        else
          v184 = 0;
        v226 = (*(uint64_t (**)(_QWORD, uint64_t, llvm::FixedVectorType *, uint64_t, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 1936) + 864))(**(_QWORD **)(a1 + 1936), v184, v370, **(_QWORD **)(a1 + 2072) + 1888, *(_WORD *)(*(_QWORD *)(v383 + 392) + 18) & 0x3F, 0);
        if (v227 == 1)
          v224 = 1;
        else
          v224 = v182;
        v64 = v383;
        if (__OFADD__(v180, v226))
          v225 = ((v180 + v226) >> 63) ^ 0x8000000000000000;
        else
          v225 = v180 + v226;
        goto LABEL_236;
      }
    }
    v185 = *(_DWORD *)(v169 + 20);
    if ((v185 & 0x40000000) != 0)
      v186 = *(llvm::FixedVectorType ****)(v169 - 8);
    else
      v186 = (llvm::FixedVectorType ***)(v169 - 32 * (v185 & 0x7FFFFFF));
    v202 = **v186;
    v203 = *(_QWORD *)(v64 + 392);
    v204 = *(_DWORD *)(v203 + 20);
    if ((v204 & 0x40000000) != 0)
      v205 = *(llvm::FixedVectorType ****)(v203 - 8);
    else
      v205 = (llvm::FixedVectorType ***)(v203 - 32 * (v204 & 0x7FFFFFF));
    v206 = **v205;
    llvm::FixedVectorType::get(v202, v376);
    v208 = v207;
    v209.n128_f64[0] = llvm::FixedVectorType::get(v206, v376);
    v211 = v210;
    v212 = *(_QWORD *)(v383 + 384);
    v213 = v120;
    if (v212)
      v214 = *(unsigned __int8 *)(v212 + 16) - 28;
    else
      v214 = 0;
    v217 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, __n128))(***(_QWORD ***)(a1 + 1936) + 840))(**(_QWORD **)(a1 + 1936), v214, v171, v208, 0, 0, 0, v209);
    v219 = v218;
    v220 = *(_QWORD *)(v383 + 392);
    if (v220)
      v221 = *(unsigned __int8 *)(v220 + 16) - 28;
    else
      v221 = 0;
    v222 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 1936)
                                                                                                + 840))(**(_QWORD **)(a1 + 1936), v221, v171, v211, 0, 0, 0);
    if (v223 == 1)
      v224 = 1;
    else
      v224 = v219;
    if (__OFADD__(v217, v222))
      v225 = ((v217 + v222) >> 63) ^ 0x8000000000000000;
    else
      v225 = v217 + v222;
    v64 = v383;
    v120 = v213;
    goto LABEL_236;
  }
  if (!(_DWORD)v67)
  {
LABEL_31:
    *(_QWORD *)&v392 = 0;
    DWORD2(v392) = 0;
    return v392;
  }
  v86 = 0;
  v87 = 8 * v67;
  while (1)
  {
    v88 = *(unsigned __int8 *)(v66[v86 / 8] + 16);
    if (v88 == 5 || (v88 - 4) >= 0x11)
      break;
    v86 += 8;
    if (v87 == v86)
      goto LABEL_31;
  }
  if (*(_BYTE *)(*v66 + 16) == 90)
    return xmmword_1C64632D0;
  v405 = (int *)v407;
  v406 = 0xC00000000;
  v403[0] = &v404;
  v403[1] = (void *)0x600000000;
  isGatherShuffledEntry = llvm::slpvectorizer::BoUpSLP::isGatherShuffledEntry(a1, v64, (char *)&v405, (uint64_t)v403);
  if (HIDWORD(isGatherShuffledEntry))
  {
    v215 = isGatherShuffledEntry;
    *(_QWORD *)&v392 = 0;
    DWORD2(v392) = 0;
    if (sub_1C53EC390(v405, v406, v406))
    {
      if (v84)
      {
        *(_QWORD *)&v392 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 1936) + 832))(**(_QWORD **)(a1 + 1936), 7, v374, *(_QWORD *)(v64 + 96), *(unsigned int *)(v64 + 104), 0, 0);
        DWORD2(v392) = v216;
      }
    }
    else
    {
      sub_1C60904B8(&v405, *(int **)(v64 + 96), *(unsigned int *)(v64 + 104));
      *(_QWORD *)&v392 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t, int *, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 1936) + 832))(**(_QWORD **)(a1 + 1936), v215, v374, v405, v406, 0, 0);
      DWORD2(v392) = v245;
    }
    goto LABEL_275;
  }
  v188 = *(_QWORD *)(v64 + 384);
  if (!v188 || *(_BYTE *)(v188 + 16) != 89)
  {
    v189 = *(unsigned int *)(v64 + 8);
    if ((_DWORD)v189)
    {
      v190 = *(_QWORD *)v64;
      v191 = 8 * v189;
      while (1)
      {
        v192 = *(unsigned __int8 *)(*(_QWORD *)v190 + 16);
        if ((v192 - 11) >= 2 && v192 != 89)
          break;
        v190 += 8;
        v191 -= 8;
        if (!v191)
          goto LABEL_182;
      }
LABEL_189:
      v196 = 0;
      v197 = v66;
      do
      {
        if (*(unsigned __int8 *)(*v197 + 16) - 11 >= 2)
        {
          if (v196)
          {
            if (*v197 != v196)
              goto LABEL_254;
          }
          else
          {
            v196 = *v197;
          }
        }
        ++v197;
        v87 -= 8;
      }
      while (v87);
      if (v196)
      {
        *(_QWORD *)&v392 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 1936) + 832))(**(_QWORD **)(a1 + 1936), 0, v74, 0, 0, 0, 0);
        *((_QWORD *)&v392 + 1) = v198;
        goto LABEL_275;
      }
LABEL_254:
      if (v84)
      {
        v368 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 1936) + 832))(**(_QWORD **)(a1 + 1936), 7, v374, *(_QWORD *)(v64 + 96), *(unsigned int *)(v64 + 104), 0, 0);
        v371 = v246;
      }
      else
      {
        v368 = 0;
        v371 = 0;
      }
      if (v67 >= 3)
      {
        v255 = *(_QWORD *)(v64 + 384);
        if (v255)
        {
          if (*(_BYTE *)(v255 + 16) == 60 && v255 == *(_QWORD *)(v64 + 392))
          {
            __dst = v402;
            v399 = (uint64_t)v402;
            v400 = 16;
            LODWORD(v401) = 0;
            sub_1C4768AD0(*(_QWORD *)(a1 + 1984), *(_QWORD *)v255);
            v280 = v279;
            if ((_DWORD)v278 == 1)
            v364 = 0;
            v359 = 0;
            v281 = 0;
            v282 = *(_DWORD *)(a1 + 2004) / (2 * v280);
            if (v282 <= 2)
              v282 = 2;
            v354 = v282;
            v367 = v74;
            while (1)
            {
              v283 = (llvm::Type *)(v376 >> 1);
              v376 = v283;
              if (v283 < v354)
              {
                v285 = HIDWORD(v400);
                v286 = (int)v401;
                goto LABEL_355;
              }
              v284 = v281 + (_DWORD)v283;
              v380 = v281;
              if (v281 + v283 <= v67)
              {
                v287 = (char *)v283 - 1;
                v353 = 8 * v283;
                v288 = v281;
                do
                {
                  v289 = v67;
                  v290 = a1;
                  v291 = v288;
                  v288 = v284;
                  v292 = &v66[v291];
                  v293 = sub_1C477672C((uint64_t)&__dst, *v292);
                  if ((void *)v399 == __dst)
                    v294 = (uint64_t *)((char *)&v400 + 4);
                  else
                    v294 = &v400;
                  if (v293 == (_QWORD *)(v399 + 8 * *(unsigned int *)v294)
                    && ((v295 = sub_1C477672C((uint64_t)&__dst, v292[(_QWORD)v287]), (void *)v399 != __dst)
                      ? (v296 = &v400)
                      : (v296 = (uint64_t *)((char *)&v400 + 4)),
                        v295 == (_QWORD *)(v399 + 8 * *(unsigned int *)v296)))
                  {
                    v297 = v287;
                    if (sub_1C60959BC(&v66[v291], (uint64_t)v376))
                    {
                      v395 = v397;
                      v396 = 0x600000000;
                      v393[0] = v394;
                      v393[1] = (void *)0x400000000;
                      v298 = sub_1C6095DD0(&v66[v291], (unint64_t)v376, *v292, *(_QWORD *)(a1 + 1936), *(llvm::Value **)(a1 + 1984), *(const llvm::DataLayout **)(a1 + 1928), (unsigned int **)v393, (uint64_t)&v395);
                      if ((v298 - 1) <= 1)
                      {
                        v299 = v298 != 1;
                        v356 = v298 == 1;
                        v300 = v353;
                        do
                        {
                          v301 = *v292++;
                          sub_1C4774094((llvm::SmallPtrSetImplBase *)&__dst, v301);
                          v300 -= 8;
                        }
                        while (v300);
                        v364 += v299;
                        v359 += v356;
                        if (v291 == v380)
                          v302 = (int)v376;
                        else
                          v302 = 0;
                        v380 += v302;
                        a1 = v290;
                      }
                      v67 = v289;
                      v287 = v297;
                      if (v393[0] != v394)
                        free(v393[0]);
                      if (v395 != v397)
                        free(v395);
                    }
                    else
                    {
                      v67 = v289;
                    }
                  }
                  else
                  {
                    v67 = v289;
                  }
                  v284 = v288 + (_DWORD)v376;
                }
                while (v288 + v376 <= v67);
              }
              v285 = HIDWORD(v400);
              v286 = (int)v401;
              v281 = v380;
              if (v67 <= v380)
                break;
              v74 = v367;
              if (HIDWORD(v400) != (_DWORD)v401)
                goto LABEL_355;
            }
            v74 = v367;
LABEL_355:
            if (v285 != v286)
            {
              v305 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 1936) + 968))(**(_QWORD **)(a1 + 1936), v74);
              v306 = v67;
              if (v305)
                v307 = v67 / v376 > v305;
              else
                v307 = 1;
              v381 = v307;
              v308 = 0;
              v309 = 0;
              v310 = 0;
              do
              {
                v311 = sub_1C477672C((uint64_t)&__dst, v66[v308]);
                if ((void *)v399 == __dst)
                  v312 = (uint64_t *)((char *)&v400 + 4);
                else
                  v312 = &v400;
                if (v311 == (_QWORD *)(v399 + 8 * *(unsigned int *)v312))
                {
                  v313 = (int)v376;
                  GatherCost = llvm::slpvectorizer::BoUpSLP::getGatherCost(a1, (llvm::FixedVectorType ***)&v66[v308], v376);
                  if (v315 == 1)
                    v309 = 1;
                  if (__OFADD__(v310, GatherCost))
                    v310 = ((uint64_t)(v310 + GatherCost) >> 63) ^ 0x8000000000000000;
                  else
                    v310 += GatherCost;
                }
                else
                {
                  v313 = (int)v376;
                }
                v308 += v313;
              }
              while (v308 < v67);
              if ((void *)v399 == __dst)
                v316 = (uint64_t *)((char *)&v400 + 4);
              else
                v316 = &v400;
              v317 = *(unsigned int *)v316;
              if ((_DWORD)v317)
              {
                v318 = 8 * v317;
                v319 = (unint64_t *)v399;
                while (*v319 >= 0xFFFFFFFFFFFFFFFELL)
                {
                  ++v319;
                  v318 -= 8;
                  if (!v318)
                    goto LABEL_395;
                }
              }
              else
              {
                v319 = (unint64_t *)v399;
              }
              v320 = (unint64_t *)(v399 + 8 * v317);
              if (v319 == v320)
              {
LABEL_395:
                v375 = 0;
                v373 = 0;
                v329 = v376;
              }
              else
              {
                v321 = 0;
                v322 = 0;
                v323 = *v319;
LABEL_384:
                v324 = **(_QWORD **)(v323 - 32);
                v325 = *(_DWORD *)(v324 + 8);
                if ((v325 & 0xFE) == 0x12)
                  v325 = *(_DWORD *)(**(_QWORD **)(v324 + 16) + 8);
                v326 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, unint64_t, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 1936) + 888))(**(_QWORD **)(a1 + 1936), 32, *(_QWORD *)v323, ((unint64_t)*(unsigned __int16 *)(v323 + 18) >> 1) & 0x3F, v325 >> 8, 0);
                if (v327 == 1)
                  v321 = 1;
                if (__OFADD__(v322, v326))
                  v322 = ((uint64_t)(v322 + v326) >> 63) ^ 0x8000000000000000;
                else
                  v322 += v326;
                v328 = v319 + 1;
                v329 = v376;
                while (v328 != v320)
                {
                  v330 = *v328++;
                  v323 = v330;
                  if (v330 <= 0xFFFFFFFFFFFFFFFDLL)
                  {
                    v319 = v328 - 1;
                    goto LABEL_384;
                  }
                }
                v373 = v321;
                v375 = v322;
              }
              v331 = *(_QWORD *)(v383 + 384);
              v333.n128_f64[0] = llvm::FixedVectorType::get(*(llvm::FixedVectorType **)v331, v329);
              v334 = v332;
              v335 = ((unint64_t)*(unsigned __int16 *)(v331 + 18) >> 1) & 0x3F;
              v336 = **(_QWORD **)(v331 - 32);
              v337 = *(_DWORD *)(v336 + 8);
              if ((v337 & 0xFE) == 0x12)
                v337 = *(_DWORD *)(**(_QWORD **)(v336 + 16) + 8);
              v393[0] = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, unint64_t, _QWORD, _QWORD, uint64_t, __n128))(***(_QWORD ***)(a1 + 1936) + 888))(**(_QWORD **)(a1 + 1936), 32, v332, ((unint64_t)*(unsigned __int16 *)(v331 + 18) >> 1) & 0x3F, v337 >> 8, 0, v331, v333);
              v393[1] = v338;
              v395 = (void *)v359;
              LODWORD(v396) = 0;
              sub_1C4848B64((uint64_t)&v395, (uint64_t)v393);
              v339 = v396;
              if (__OFADD__(v310, v395))
                v340 = (char *)(((uint64_t)((uint64_t)v395 + v310) >> 63) ^ 0x8000000000000000);
              else
                v340 = (char *)v395 + v310;
              v393[0] = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, unint64_t, _QWORD, uint64_t))(***(_QWORD ***)(a1 + 1936) + 912))(**(_QWORD **)(a1 + 1936), 32, v334, *(_QWORD *)(v331 - 32), 0, v335, 0, v331);
              v393[1] = v341;
              v395 = (void *)v364;
              LODWORD(v396) = 0;
              sub_1C4848B64((uint64_t)&v395, (uint64_t)v393);
              if (v339 == 1 || (_DWORD)v396 == 1)
                v343 = 1;
              else
                v343 = v309;
              if (__OFADD__(v340, v395))
                v344 = (char *)((((uint64_t)v395 + (uint64_t)v340) >> 63) ^ 0x8000000000000000);
              else
                v344 = (char *)v395 + (_QWORD)v340;
              v345 = v381;
              if ((int)v376 >= v306)
                v345 = 0;
              if (v345)
              {
                v346 = v376;
                do
                {
                  v347 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, llvm::Type *, uint64_t))(***(_QWORD ***)(a1 + 1936) + 832))(**(_QWORD **)(a1 + 1936), 4, v367, 0, 0, v346, v334);
                  if (v348 == 1)
                    v343 = 1;
                  if (__OFADD__(v344, v347))
                    v344 = (char *)(((uint64_t)&v344[v347] >> 63) ^ 0x8000000000000000);
                  else
                    v344 += v347;
                  v346 = (llvm::Type *)((_DWORD)v346 + (_DWORD)v376);
                }
                while ((int)v346 < v306);
              }
              v349 = (unint64_t)&v344[v368];
              if (__OFADD__(v368, v344))
                v349 = ((uint64_t)&v344[v368] >> 63) ^ 0x8000000000000000;
              v350 = v343 == 1 || v373 == 1;
              v351 = v371;
              if (v350)
                v351 = 1;
              v241 = __OFSUB__(v349, v375);
              v352 = v349 - v375;
              if (v241)
                v352 = (v352 >> 63) ^ 0x8000000000000000;
              *(_QWORD *)&v392 = v352;
              *((_QWORD *)&v392 + 1) = v351;
              if ((void *)v399 != __dst)
                free((void *)v399);
              goto LABEL_275;
            }
            if ((void *)v399 != __dst)
              free((void *)v399);
          }
        }
      }
      v256 = llvm::slpvectorizer::BoUpSLP::getGatherCost(a1, (llvm::FixedVectorType ***)v66, (llvm::Type *)v67);
      v257 = v371;
      if (v258 == 1)
        v257 = 1;
      v259 = v368 + v256;
      if (__OFADD__(v368, v256))
        v259 = (v259 >> 63) ^ 0x8000000000000000;
      *(_QWORD *)&v392 = v259;
      *((_QWORD *)&v392 + 1) = v257;
      goto LABEL_275;
    }
  }
LABEL_182:
  if ((int)v67 >= 2)
  {
    v193 = (_QWORD **)(v66 + 1);
    v194 = v67 - 1;
    while (**v193 == *(_QWORD *)*v66)
    {
      ++v193;
      if (!--v194)
        goto LABEL_186;
    }
    goto LABEL_189;
  }
LABEL_186:
  __dst = &v400;
  v399 = 0xC00000000;
  v195 = sub_1C609B328((uint64_t)v66, v67, (char *)&__dst);
  if (!HIDWORD(v195))
  {
    if (__dst != &v400)
      free(__dst);
    goto LABEL_189;
  }
  v247 = v195;
  v248 = v399;
  v377 = *(llvm::Type **)(a1 + 1936);
  v379 = __dst;
  v249 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)v377 + 968))(*(_QWORD *)v377, v74);
  if ((_DWORD)v247 != 7 || !v249 || (v250 = *(_DWORD *)(v74 + 32), v250 < v249))
  {
    v251 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t, _DWORD *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v377 + 832))(*(_QWORD *)v377, v247, v74, v379, v248, 0, 0);
    v253 = v252 & 0xFFFFFFFF00000000;
    goto LABEL_302;
  }
  v358 = v67;
  v361 = a1;
  v363 = 0;
  v366 = v74;
  v369 = 0;
  v260 = 1;
  v261 = v66;
  v262 = 1;
  v263 = (llvm::Type *)(v250 / v249);
  do
  {
    if (*(unsigned __int8 *)(*v261 + 16) - 11 >= 2)
    {
      v264 = v260 - 1;
      if (v379[v260 - 1] != -1)
      {
        v265 = v264 % v263;
        if (!(v264 % v263))
        {
          v262 = 1;
          goto LABEL_300;
        }
        v266 = v260 - 2;
        v267 = sub_1C6097834(*v261);
        v268 = v66[v266];
        if (*(unsigned __int8 *)(v268 + 16) - 11 < 2 || v379[v266] == -1)
        {
          if ((v262 & 1) == 0)
            goto LABEL_287;
        }
        else if (sub_1C6097834(v268) + 1 != v267
               || (v262 & (v267 % v263 == v265)) == 0)
        {
LABEL_287:
          if (!(v260 % v263) || v358 == v260)
          {
            v269 = llvm::FixedVectorType::get(*(llvm::FixedVectorType **)(v366 + 24), v263);
            v271 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, double))(**(_QWORD **)v377 + 832))(*(_QWORD *)v377, 7, v270, 0, 0, 0, 0, v269);
            v262 = 0;
            if (v272 == 1)
              v273 = 1;
            else
              v273 = v363;
            v363 = v273;
            v274 = v369 + v271;
            if (__OFADD__(v369, v271))
              v274 = ((uint64_t)(v369 + v271) >> 63) ^ 0x8000000000000000;
            v369 = v274;
          }
          else
          {
            v262 = 0;
          }
          goto LABEL_299;
        }
        v262 = 1;
LABEL_299:
        a1 = v361;
      }
    }
LABEL_300:
    ++v261;
    ++v260;
    v87 -= 8;
  }
  while (v87);
  v253 = 0;
  v64 = v383;
  v251 = v369;
  LODWORD(v252) = v363;
LABEL_302:
  *(_QWORD *)&v392 = v251;
  *((_QWORD *)&v392 + 1) = v253 | v252;
  sub_1C609B528((uint64_t)v384, (int64_t *)&v392);
  if (v84)
  {
    v275 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 1936)
                                                                                               + 832))(**(_QWORD **)(a1 + 1936), 7, v374, *(_QWORD *)(v64 + 96), *(unsigned int *)(v64 + 104), 0, 0);
    if (v276 == 1)
      DWORD2(v392) = 1;
    v277 = v392 + v275;
    if (__OFADD__((_QWORD)v392, v275))
      v277 = (((uint64_t)v392 + v275) >> 63) ^ 0x8000000000000000;
    *(_QWORD *)&v392 = v277;
  }
  if (__dst != &v400)
    free(__dst);
LABEL_275:
  if (v403[0] != &v404)
    free(v403[0]);
  v243 = v405;
  if (v405 != (int *)v407)
    goto LABEL_248;
  return v392;
}

uint64_t llvm::slpvectorizer::BoUpSLP::isGatherShuffledEntry(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  const llvm::SmallPtrSetImplBase *v24;
  BOOL v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  _BYTE *v29;
  uint64_t *v30;
  unsigned int v31;
  int v32;
  uint64_t *v33;
  char *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unsigned int *v46;
  uint64_t *v47;
  uint64_t *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t *v66;
  uint64_t *v67;
  unint64_t v68;
  int v69;
  unsigned int v70;
  uint64_t *v71;
  int v72;
  uint64_t *v73;
  int v74;
  BOOL v75;
  unsigned int v76;
  uint64_t *v77;
  unint64_t *v78;
  unint64_t v79;
  int v80;
  unsigned int v81;
  int v82;
  uint64_t *v83;
  int v84;
  BOOL v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  int v89;
  int v90;
  BOOL v91;
  unsigned int v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t *v99;
  unsigned int v100;
  unint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t *v104;
  int v105;
  unint64_t *v106;
  unint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  char v156[28];
  int v157;
  _QWORD *v158;
  _BYTE *v159;
  int v160;
  unsigned int v161;
  int v162;
  _BYTE v163[32];
  uint64_t *v164;
  uint64_t *v165;
  uint64_t v166;
  int v167;
  _BYTE v168[32];
  uint64_t v169;
  _QWORD v170[2];
  int v171;
  uint64_t v172[2];
  unsigned int v173;
  char *v174;
  uint64_t v175;
  _QWORD v176[10];

  v5 = a2;
  v176[8] = *MEMORY[0x1E0C80C00];
  sub_1C4893E04(a3, *(unsigned int *)(a2 + 8), -1);
  *(_DWORD *)(a4 + 8) = 0;
  v172[0] = 0;
  v172[1] = 0;
  v173 = 0;
  v7 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v7)
  {
    v8 = *(uint64_t **)a1;
    v9 = *(_QWORD *)a1 + 8 * v7;
    do
    {
      v10 = *v8;
      if (*v8 == v5)
        break;
      if (*(_DWORD *)(v10 + 88) == 2)
      {
        v11 = *(unsigned int *)(v10 + 8);
        if ((_DWORD)v11)
        {
          v12 = *(uint64_t ***)v10;
          v13 = 8 * v11;
          do
          {
            v14 = *v12++;
            v164 = v14;
            sub_1C63DF4E4((uint64_t)&v174, (uint64_t)v172, (uint64_t *)&v164);
            sub_1C4774094((llvm::SmallPtrSetImplBase *)(v174 + 8), *v8);
            v13 -= 8;
          }
          while (v13);
        }
      }
      ++v8;
    }
    while (v8 != (uint64_t *)v9);
  }
  v15 = (char *)v176;
  v174 = (char *)v176;
  v175 = 0x100000000;
  v170[0] = 0;
  v170[1] = 0;
  v171 = 0;
  v16 = *(unsigned int *)(v5 + 8);
  v153 = a4;
  if (!(_DWORD)v16)
  {
LABEL_99:
    v164 = 0;
    v165 = 0;
    LODWORD(v166) = 0;
    v62 = *((_QWORD *)v15 + 1);
    v63 = 16;
    if (v62 == *(_QWORD *)v15)
      v63 = 20;
    v64 = *(unsigned int *)&v15[v63];
    if ((_DWORD)v64)
    {
      v93 = 8 * v64;
      v65 = (unint64_t *)*((_QWORD *)v15 + 1);
      while (*v65 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v65;
        v93 -= 8;
        if (!v93)
          goto LABEL_160;
      }
    }
    else
    {
      v65 = (unint64_t *)*((_QWORD *)v15 + 1);
    }
    v66 = (unint64_t *)(v62 + 8 * v64);
    if (v65 == v66)
    {
LABEL_160:
      v67 = 0;
      goto LABEL_162;
    }
    v67 = 0;
    v68 = *v65;
LABEL_105:
    v69 = *(_DWORD *)(v68 + 104);
    if (!v69)
      v69 = *(_DWORD *)(v68 + 8);
    if ((_DWORD)v166)
    {
      v70 = (v166 - 1) & (37 * v69);
      v71 = &v67[2 * v70];
      v72 = *(_DWORD *)v71;
      if (v69 == *(_DWORD *)v71)
        goto LABEL_124;
      v73 = 0;
      v74 = 1;
      while (v72 != 0x7FFFFFFF)
      {
        if (v73)
          v75 = 0;
        else
          v75 = v72 == 0x80000000;
        if (v75)
          v73 = v71;
        v76 = v70 + v74++;
        v70 = v76 & (v166 - 1);
        v71 = &v67[2 * v70];
        v72 = *(_DWORD *)v71;
        if (v69 == *(_DWORD *)v71)
          goto LABEL_124;
      }
      if (v73)
        v77 = v73;
      else
        v77 = v71;
    }
    else
    {
      v77 = 0;
    }
    if (4 * (int)v165 + 4 >= (3 * v166))
    {
      sub_1C4FA99D8((uint64_t *)&v164, 2 * v166);
      v67 = v164;
      if ((_DWORD)v166)
      {
        v80 = v166 - 1;
        v81 = (v166 - 1) & (37 * v69);
        v77 = &v164[2 * v81];
        v82 = *(_DWORD *)v77;
        if (v69 == *(_DWORD *)v77)
          goto LABEL_121;
        v83 = 0;
        v84 = 1;
        while (v82 != 0x7FFFFFFF)
        {
          if (v83)
            v85 = 0;
          else
            v85 = v82 == 0x80000000;
          if (v85)
            v83 = v77;
          v86 = v81 + v84++;
          v81 = v86 & v80;
          v77 = &v164[2 * (v86 & v80)];
          v82 = *(_DWORD *)v77;
          if (v69 == *(_DWORD *)v77)
            goto LABEL_121;
        }
LABEL_154:
        if (v83)
          v77 = v83;
        goto LABEL_121;
      }
    }
    else
    {
      if ((int)v166 + ~(_DWORD)v165 - HIDWORD(v165) > v166 >> 3)
      {
LABEL_121:
        LODWORD(v165) = (_DWORD)v165 + 1;
        if (*(_DWORD *)v77 != 0x7FFFFFFF)
          --HIDWORD(v165);
        *(_DWORD *)v77 = v69;
        v77[1] = v68;
LABEL_124:
        v78 = v65 + 1;
        while (v78 != v66)
        {
          v79 = *v78++;
          v68 = v79;
          if (v79 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v65 = v78 - 1;
            goto LABEL_105;
          }
        }
        v15 = v174;
        LODWORD(v16) = v175;
LABEL_162:
        v94 = &v15[64 * (unint64_t)v16];
        v95 = *((_QWORD *)v94 - 7);
        v96 = -48;
        if (v95 == *((_QWORD *)v94 - 8))
          v96 = -44;
        v97 = *(unsigned int *)&v94[v96];
        if ((_DWORD)v97)
        {
          v110 = 8 * v97;
          v98 = (unint64_t *)*((_QWORD *)v94 - 7);
          while (*v98 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v98;
            v110 -= 8;
            if (!v110)
              goto LABEL_185;
          }
        }
        else
        {
          v98 = (unint64_t *)*((_QWORD *)v94 - 7);
        }
        v99 = (unint64_t *)(v95 + 8 * v97);
        if (v98 == v99)
          goto LABEL_185;
        v100 = v166 - 1;
        v101 = *v98;
LABEL_168:
        v102 = *(_DWORD *)(v101 + 104);
        if (v102)
        {
          if (!(_DWORD)v166)
          {
LABEL_174:
            v106 = v98 + 1;
            while (v106 != v99)
            {
              v107 = *v106++;
              v101 = v107;
              if (v107 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                v98 = v106 - 1;
                goto LABEL_168;
              }
            }
LABEL_185:
            v111 = 0;
            v112 = *(_DWORD *)(a4 + 8);
LABEL_186:
            MEMORY[0x1CAA32FB4](v67, 8);
            if (v112)
              goto LABEL_216;
LABEL_187:
            v113 = 0;
            v114 = 0;
            goto LABEL_239;
          }
        }
        else
        {
          v102 = *(_DWORD *)(v101 + 8);
          if (!(_DWORD)v166)
            goto LABEL_174;
        }
        LODWORD(v103) = v100 & (37 * v102);
        v104 = &v67[2 * v103];
        v105 = *(_DWORD *)v104;
        if (*(_DWORD *)v104 == v102)
        {
LABEL_173:
          if (&v67[2 * v166] != v104)
          {
            v111 = *(_DWORD *)v104;
            v145 = v104[1];
            v146 = *(unsigned int *)(a4 + 8);
            if (v146 >= *(_DWORD *)(a4 + 12))
            {
              v149 = v67;
              llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v146 + 1, 8);
              v67 = v149;
              LODWORD(v146) = *(_DWORD *)(a4 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a4 + 8 * v146) = v145;
            v147 = *(_DWORD *)(a4 + 12);
            v148 = (*(_DWORD *)(a4 + 8) + 1);
            *(_DWORD *)(a4 + 8) = v148;
            if (v148 >= v147)
            {
              v150 = v67;
              llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v148 + 1, 8);
              v67 = v150;
              LODWORD(v148) = *(_DWORD *)(a4 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a4 + 8 * v148) = v101;
            v112 = *(_DWORD *)(a4 + 8) + 1;
            *(_DWORD *)(a4 + 8) = v112;
            goto LABEL_186;
          }
        }
        else
        {
          v108 = 1;
          while (v105 != 0x7FFFFFFF)
          {
            v109 = v103 + v108++;
            v103 = v109 & v100;
            v105 = v67[2 * v103];
            if (v105 == v102)
            {
              v104 = &v67[2 * v103];
              goto LABEL_173;
            }
          }
        }
        goto LABEL_174;
      }
      sub_1C4FA99D8((uint64_t *)&v164, v166);
      v67 = v164;
      if ((_DWORD)v166)
      {
        v87 = v166 - 1;
        v88 = (v166 - 1) & (37 * v69);
        v77 = &v164[2 * v88];
        v89 = *(_DWORD *)v77;
        if (v69 == *(_DWORD *)v77)
          goto LABEL_121;
        v83 = 0;
        v90 = 1;
        while (v89 != 0x7FFFFFFF)
        {
          if (v83)
            v91 = 0;
          else
            v91 = v89 == 0x80000000;
          if (v91)
            v83 = v77;
          v92 = v88 + v90++;
          v88 = v92 & v87;
          v77 = &v164[2 * (v92 & v87)];
          v89 = *(_DWORD *)v77;
          if (v69 == *(_DWORD *)v77)
            goto LABEL_121;
        }
        goto LABEL_154;
      }
    }
    v77 = 0;
    goto LABEL_121;
  }
  v151 = v5;
  v17 = *(uint64_t **)v5;
  v18 = *(_QWORD *)v5 + 8 * v16;
  v19 = a1 + 80;
  v154 = a1 + 80;
  do
  {
    v20 = *v17;
    v169 = v20;
    if (*(unsigned __int8 *)(v20 + 16) - 11 <= 1)
      goto LABEL_12;
    v164 = (uint64_t *)v168;
    v165 = (uint64_t *)v168;
    v166 = 4;
    v167 = 0;
    if (v173)
    {
      v21 = (v173 - 1) & ((v20 >> 4) ^ (v20 >> 9));
      v22 = (uint64_t *)(v172[0] + 72 * v21);
      v23 = *v22;
      if (*v22 == v20)
      {
LABEL_16:
        v24 = (const llvm::SmallPtrSetImplBase *)(v22 + 1);
        v25 = v22 == (uint64_t *)(v172[0] + 72 * v173) || v24 == (const llvm::SmallPtrSetImplBase *)&v164;
        if (!v25)
          llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)&v164, v24);
      }
      else
      {
        v52 = 1;
        while (v23 != -4096)
        {
          v53 = v21 + v52++;
          v21 = v53 & (v173 - 1);
          v22 = (uint64_t *)(v172[0] + 72 * v21);
          v23 = *v22;
          if (*v22 == v20)
            goto LABEL_16;
        }
      }
    }
    v158 = 0;
    if ((sub_1C61B5A68(v19, v20, &v158) & 1) != 0)
    {
      v26 = v158[1];
      if (v26)
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v164, v26);
    }
    v27 = HIDWORD(v166);
    if (HIDWORD(v166) == v167)
      goto LABEL_73;
    if (!(_DWORD)v175)
    {
      sub_1C609DC04((uint64_t)&v174, (unint64_t)&v164);
      goto LABEL_67;
    }
    v158 = v163;
    v28 = v165;
    if (v165 == v164)
    {
      v159 = v163;
      v29 = v163;
      v30 = v165;
    }
    else
    {
      v51 = v166;
      v29 = malloc_type_malloc(8 * v166, 0x4065EBACuLL);
      if (!v29)
      {
        if (v51 || (v29 = malloc_type_malloc(1uLL, 0x4065EBACuLL), v19 = v154, !v29))
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      }
      v159 = v29;
      v30 = v164;
      v28 = v165;
      v27 = HIDWORD(v166);
    }
    v160 = v166;
    if (v28 == v30)
      v31 = v27;
    else
      v31 = v166;
    if (v31)
    {
      memmove(v29, v28, 8 * v31);
      v27 = HIDWORD(v166);
    }
    v161 = v27;
    v162 = v167;
    if (!(_DWORD)v175)
    {
LABEL_78:
      sub_1C609DC04((uint64_t)&v174, (unint64_t)&v158);
      v157 = v175 - 1;
LABEL_79:
      sub_1C6144658((uint64_t)v156, (uint64_t)v170, &v169, &v157);
      if (v159 != (_BYTE *)v158)
        free(v159);
LABEL_67:
      v50 = 1;
      goto LABEL_74;
    }
    v32 = 0;
    v33 = (uint64_t *)v174;
    v34 = &v174[64 * (unint64_t)v175];
    while (1)
    {
      v35 = HIDWORD(v166);
      v36 = v165 == v164 ? HIDWORD(v166) : v166;
      if ((_DWORD)v36)
      {
        v37 = 8 * v36;
        v38 = v165;
        while ((unint64_t)*v38 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v38;
          v37 -= 8;
          if (!v37)
            goto LABEL_63;
        }
      }
      else
      {
        v38 = v165;
      }
      v39 = &v165[v36];
      if (v38 != v39)
      {
        do
        {
          v42 = *v38;
          v41 = (unint64_t *)(v38 + 1);
          v40 = v42;
          while (v41 != (unint64_t *)v39)
          {
            v43 = *v41++;
            if (v43 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v38 = (uint64_t *)(v41 - 1);
              goto LABEL_50;
            }
          }
          v38 = v39;
LABEL_50:
          v44 = sub_1C477672C((uint64_t)v33, v40);
          v45 = v33[1];
          if (v45 == *v33)
            v46 = (unsigned int *)v33 + 5;
          else
            v46 = (unsigned int *)(v33 + 2);
          if (v44 == (_QWORD *)(v45 + 8 * *v46))
          {
            v47 = sub_1C477672C((uint64_t)&v164, v40);
            v48 = v165 == v164 ? (uint64_t *)((char *)&v166 + 4) : &v166;
            if (v47 != &v165[*(unsigned int *)v48])
            {
              *v47 = -2;
              ++v167;
            }
          }
          v35 = HIDWORD(v166);
          if (v165 == v164)
            v49 = HIDWORD(v166);
          else
            v49 = v166;
        }
        while (v38 != &v165[v49]);
      }
LABEL_63:
      if (v35 != v167)
        break;
      llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)&v164, (const llvm::SmallPtrSetImplBase *)&v158);
      ++v32;
      v33 += 8;
      if (v33 == (uint64_t *)v34)
      {
        v157 = v32;
        goto LABEL_69;
      }
    }
    v157 = v32;
    llvm::SmallPtrSetImplBase::swap(v33, &v164);
LABEL_69:
    v19 = v154;
    if ((_DWORD)v175 != v32)
      goto LABEL_79;
    if (v32 != 2)
      goto LABEL_78;
    if (v159 != (_BYTE *)v158)
      free(v159);
LABEL_73:
    v50 = 0;
LABEL_74:
    if (v165 != v164)
      free(v165);
    if (!v50)
      goto LABEL_187;
LABEL_12:
    ++v17;
  }
  while (v17 != (uint64_t *)v18);
  LODWORD(v16) = v175;
  v15 = v174;
  if ((_DWORD)v175 != 1)
  {
    v5 = v151;
    goto LABEL_99;
  }
  v55 = *(uint64_t **)v174;
  v54 = (uint64_t *)*((_QWORD *)v174 + 1);
  v56 = v174 + 20;
  if (v54 != *(uint64_t **)v174)
    v56 = v174 + 16;
  v57 = *(unsigned int *)v56;
  v58 = &v54[v57];
  v59 = (uint64_t *)*((_QWORD *)v174 + 1);
  v5 = v151;
  if ((_DWORD)v57)
  {
    v60 = 0;
    v61 = 8 * v57;
    while ((unint64_t)v54[v60 / 8] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v60 += 8;
      if (v61 == v60)
        goto LABEL_197;
    }
    v59 = &v54[v60 / 8];
  }
  if (v59 != v58)
  {
    if (!sub_1C63DEE0C(*v59, *(uint64_t **)v151, *(unsigned int *)(v151 + 8)))
    {
      while (++v59 != v58)
      {
        if ((unint64_t)*v59 < 0xFFFFFFFFFFFFFFFELL
          && sub_1C63DEE0C(*v59, *(uint64_t **)v151, *(unsigned int *)(v151 + 8)))
        {
          goto LABEL_196;
        }
      }
      v59 = v58;
    }
LABEL_196:
    v15 = v174;
    v55 = *(uint64_t **)v174;
    v54 = (uint64_t *)*((_QWORD *)v174 + 1);
    v58 = v59;
  }
LABEL_197:
  v25 = v54 == v55;
  v115 = 16;
  if (v25)
    v115 = 20;
  v116 = *(unsigned int *)&v15[v115];
  v117 = &v54[v116];
  if (v58 == v117)
  {
    if ((_DWORD)v116)
    {
      while ((unint64_t)*v54 >= 0xFFFFFFFFFFFFFFFELL)
      {
        if (++v54 == v58)
        {
          v54 = v58;
          break;
        }
      }
    }
    v118 = *v54;
    v119 = *(unsigned int *)(a4 + 8);
    if (v119 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v119 + 1, 8);
      LODWORD(v119) = *(_DWORD *)(a4 + 8);
    }
    v113 = 0;
    v114 = 0;
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v119) = v118;
    ++*(_DWORD *)(a4 + 8);
LABEL_214:
    if (v58 == v117)
    {
      v111 = 0;
LABEL_216:
      v126 = *(unsigned int *)(v5 + 8);
      if ((int)v126 >= 1)
      {
        v127 = 0;
        v128 = *(uint64_t **)v5;
        v129 = v170[0];
        v130 = v171;
        v155 = v171 - 1;
        v131 = *(_QWORD *)a4;
        v132 = *(_QWORD *)a3;
        while (2)
        {
          v133 = v128[v127];
          if (*(unsigned __int8 *)(v133 + 16) - 11 < 2)
            goto LABEL_219;
          if (v130)
          {
            v135 = v155 & ((v133 >> 4) ^ (v133 >> 9));
            v136 = *(_QWORD *)(v129 + 16 * v135);
            if (v133 != v136)
            {
              v138 = 1;
              while (v136 != -4096)
              {
                v139 = v135 + v138++;
                v135 = v139 & v155;
                v136 = *(_QWORD *)(v129 + 16 * v135);
                if (v133 == v136)
                  goto LABEL_224;
              }
              goto LABEL_222;
            }
LABEL_224:
            v134 = *(_DWORD *)(v129 + 16 * v135 + 8);
          }
          else
          {
LABEL_222:
            v134 = 0;
          }
          v137 = sub_1C63DEC00(*(_QWORD *)(v131 + 8 * v134), v133) + v134 * v111;
          *(_DWORD *)(v132 + 4 * v127) = v137;
          if (v137 >= 2 * (int)v126)
            goto LABEL_187;
LABEL_219:
          if (++v127 == v126)
            break;
          continue;
        }
      }
      v140 = *(_DWORD *)(v153 + 8);
      v141 = 0x100000000;
      v142 = 6;
      if (v140 != 2)
      {
        v141 = 0;
        v142 = 0;
      }
      if (v140 == 1)
        v113 = 0x100000000;
      else
        v113 = v141;
      if (v140 == 1)
        v114 = 7;
      else
        v114 = v142;
    }
  }
  else
  {
    v120 = *v58;
    v121 = *(unsigned int *)(a4 + 8);
    if (v121 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v121 + 1, 8);
      LODWORD(v121) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v121) = v120;
    ++*(_DWORD *)(a4 + 8);
    v122 = *((unsigned int *)a3 + 2);
    if ((_DWORD)v122)
    {
      v123 = 0;
      v124 = *(_QWORD *)a3;
      v125 = 4 * v122;
      v114 = 7;
      do
      {
        *(_DWORD *)(v124 + 4 * v123) = v123;
        ++v123;
        v125 -= 4;
      }
      while (v125);
      v113 = 0x100000000;
      goto LABEL_214;
    }
    v113 = 0x100000000;
    v114 = 7;
  }
LABEL_239:
  MEMORY[0x1CAA32FB4](v170[0], 8);
  sub_1C61F7FEC(&v174);
  v143 = v172[0];
  sub_1C62254EC(v172[0], v173);
  MEMORY[0x1CAA32FB4](v143, 8);
  return v113 & 0x100000000 | v114;
}

uint64_t sub_1C609B328(uint64_t a1, unint64_t a2, char *a3)
{
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD **v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  int v25;

  if (!a2)
  {
    v6 = 0;
    v8 = 0;
    return v8 | v6;
  }
  v4 = a2;
  v6 = 8 * a2;
  v7 = a1;
  while (*(_BYTE *)(*(_QWORD *)v7 + 16) != 89)
  {
    v7 += 8;
    v6 -= 8;
    if (!v6)
      goto LABEL_9;
  }
  v9 = **(_QWORD **)(*(_QWORD *)v7 - 64);
  if (*(_BYTE *)(v9 + 8) != 19)
  {
    v11 = *(unsigned int *)(v9 + 32);
    sub_1C4893E04(a3, a2, -1);
    v12 = v4;
    if (!v4)
      goto LABEL_41;
    v13 = 0;
    v25 = 0;
    v14 = 0;
    v15 = 0;
    while (1)
    {
      v16 = *(_QWORD *)(a1 + 8 * v13);
      if (*(unsigned __int8 *)(v16 + 16) - 11 >= 2)
      {
        v17 = *(_QWORD *)(v16 - 64);
        if (*(_BYTE *)(*(_QWORD *)v17 + 8) == 19)
          break;
        if ((sub_1C609BB98(*(unsigned __int8 **)(v16 - 64)) & 1) == 0)
        {
          if (*(_DWORD *)(*(_QWORD *)v17 + 32) != (_DWORD)v11)
            break;
          v18 = *(_QWORD *)(v16 - 32);
          v19 = *(unsigned __int8 *)(v18 + 16);
          if ((v19 - 11) >= 2)
          {
            if (v19 != 16)
              break;
            v20 = (_QWORD **)(v18 + 24);
            v21 = *(_DWORD *)(v18 + 32);
            if (v21 < 0x41)
            {
              v22 = *v20;
              goto LABEL_23;
            }
            if (v21 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v18 + 24)) < 0x41)
            {
              v22 = (_QWORD *)**v20;
LABEL_23:
              if ((unint64_t)v22 < v11)
              {
                v23 = *(_QWORD *)a3;
                *(_DWORD *)(*(_QWORD *)a3 + 4 * v13) = (_DWORD)v22;
                if (!v15 || v15 == v17)
                {
                  v15 = v17;
                  v17 = v14;
                }
                else
                {
                  if (v14 && v14 != v17)
                    break;
                  *(_DWORD *)(v23 + 4 * v13) = v11 + (_DWORD)v22;
                }
                if (v25 == 2)
                {
                  v24 = 2;
                }
                else if (v13 == v22)
                {
                  v24 = 1;
                }
                else
                {
                  v24 = 2;
                }
                v25 = v24;
                v14 = v17;
              }
            }
          }
        }
      }
      if (v12 == ++v13)
      {
        v8 = 2;
        if (v25 != 1)
          v8 = 6;
        if (v14)
        {
          v6 = 0x100000000;
          return v8 | v6;
        }
LABEL_41:
        v6 = 0x100000000;
        v8 = 7;
        return v8 | v6;
      }
    }
  }
  v6 = 0;
LABEL_9:
  v8 = 0;
  return v8 | v6;
}

uint64_t sub_1C609B528(uint64_t a1, int64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t CastContextHint;
  uint64_t v24;
  int v25;
  BOOL v26;
  int64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t **v31;
  uint64_t **v32;
  uint64_t v33;
  uint64_t **v34;
  uint64_t **v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  int64_t v43;
  uint64_t **v44;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  _QWORD v49[3];
  int v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  int v54;
  _BYTE v55[32];
  uint64_t **v56;
  uint64_t v57;
  unsigned int v58;

  v4 = *(_QWORD *)a1;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v51 = v55;
  v52 = v55;
  v53 = 4;
  v54 = 0;
  v5 = *(_QWORD *)(a1 + 32);
  if (!v5)
  {
    v31 = 0;
    goto LABEL_43;
  }
  v6 = *(uint64_t ***)(a1 + 24);
  v7 = &v6[v5];
  do
  {
    v8 = *v6;
    if (*((unsigned __int8 *)*v6 + 16) - 11 >= 2)
    {
      v49[0] = 0;
      v9 = 0;
      if (sub_1C61B5A68(v4 + 80, (uint64_t)v8, v49))
        v9 = *(_QWORD *)(v49[0] + 8);
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v51, (uint64_t)v8);
      if (v10
        && llvm::slpvectorizer::BoUpSLP::areAllUsersVectorized(v4, (uint64_t)v8, *(_QWORD **)(a1 + 48), *(_QWORD *)(a1 + 56))&& (!v9 || v9 == *(_QWORD *)(a1 + 64)))
      {
        v11 = sub_1C6097834((uint64_t)v8);
        if (HIDWORD(v11))
        {
          v12 = v11;
          v50 = v11;
          v13 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 8) + 968))(**(_QWORD **)(a1 + 8), *(_QWORD *)(a1 + 40));
          if (v13 != (*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 8) + 968))(**(_QWORD **)(a1 + 8), *(_QWORD *)*(v8 - 8)))
          {
            v48 = *(v8 - 8);
            sub_1C6144658((uint64_t)v49, (uint64_t)&v56, &v48, &v50);
            v30 = *(_DWORD *)(v49[0] + 8);
            if ((int)v12 < v30)
              v30 = v12;
            *(_DWORD *)(v49[0] + 8) = v30;
          }
          v14 = v8[1];
          if (v14)
          {
            if (!*(_QWORD *)(v14 + 8))
            {
              v15 = *(_QWORD *)(v14 + 24);
              v16 = *(unsigned __int8 *)(v15 + 16);
              if ((v16 - 67) <= 1)
              {
                v17 = *(_QWORD *)(v15 + 8);
                if (!v17)
                {
LABEL_20:
                  v18 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t))(***(_QWORD ***)(a1 + 8) + 848))(**(_QWORD **)(a1 + 8), (v16 - 28), *(_QWORD *)v15, *(_QWORD *)*(v8 - 8), v12);
                  if (v19 == 1)
                    *((_DWORD *)a2 + 2) = 1;
                  v20 = *a2 - v18;
                  if (__OFSUB__(*a2, v18))
                    v20 = (v20 >> 63) ^ 0x8000000000000000;
                  *a2 = v20;
                  v21 = *(_QWORD **)(a1 + 8);
                  v47 = *(unsigned __int8 *)(v15 + 16) - 28;
                  v46 = *(_QWORD *)v15;
                  v22 = *v8;
                  CastContextHint = llvm::TargetTransformInfo::getCastContextHint(v15);
                  v24 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)*v21 + 840))(*v21, v47, v46, v22, CastContextHint, *(unsigned int *)(a1 + 16), v15);
                  if (v25 == 1)
                    *((_DWORD *)a2 + 2) = 1;
                  v26 = __OFADD__(*a2, v24);
                  v27 = *a2 + v24;
LABEL_30:
                  if (v26)
                    v27 = (v27 >> 63) ^ 0x8000000000000000;
                  *a2 = v27;
                  goto LABEL_4;
                }
                while (*(_BYTE *)(*(_QWORD *)(v17 + 24) + 16) == 62)
                {
                  v17 = *(_QWORD *)(v17 + 8);
                  if (!v17)
                    goto LABEL_20;
                }
              }
            }
          }
          v28 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, unint64_t))(***(_QWORD ***)(a1 + 8) + 872))(**(_QWORD **)(a1 + 8), 61, *(_QWORD *)*(v8 - 8), v12);
          if (v29 == 1)
            *((_DWORD *)a2 + 2) = 1;
          v26 = __OFSUB__(*a2, v28);
          v27 = *a2 - v28;
          goto LABEL_30;
        }
      }
    }
LABEL_4:
    ++v6;
  }
  while (v6 != v7);
  v31 = v56;
  LODWORD(v5) = v58;
  if (!(_DWORD)v57)
  {
LABEL_43:
    v34 = &v31[2 * v5];
    v32 = v34;
    goto LABEL_44;
  }
  v32 = &v56[2 * v58];
  if (v58)
  {
    v33 = 0;
    while (((unint64_t)v56[v33] | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v33 += 2;
      if (2 * v58 == v33)
      {
        v34 = &v56[2 * v58];
        goto LABEL_44;
      }
    }
    v34 = &v56[v33];
  }
  else
  {
    v34 = v56;
  }
LABEL_44:
  v35 = &v31[2 * v5];
  while (v34 != v35)
  {
    v36 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 32);
    if (*((_DWORD *)v34 + 2) % v36)
    {
      v37 = **v34;
      v38 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 8) + 968))(**(_QWORD **)(a1 + 8), v37);
      if (v38 <= (*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 8) + 968))(**(_QWORD **)(a1 + 8), *(_QWORD *)(a1 + 40)))
      {
        v41 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 8) + 832))(**(_QWORD **)(a1 + 8), 4);
      }
      else
      {
        v39 = *((_DWORD *)v34 + 2) / v36 * v36;
        v40 = *(_DWORD *)(v37 + 32);
        if (v39 + v36 > v40)
          llvm::FixedVectorType::get(*(llvm::FixedVectorType **)(*(_QWORD *)(a1 + 40) + 24), (llvm::Type *)(v40 - v39));
        v41 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 8) + 832))(**(_QWORD **)(a1 + 8), 5);
      }
      if (v42 == 1)
        *((_DWORD *)a2 + 2) = 1;
      v43 = *a2 + v41;
      if (__OFADD__(*a2, v41))
        v43 = (v43 >> 63) ^ 0x8000000000000000;
      *a2 = v43;
    }
    v44 = v34 + 2;
    v34 = v32;
    if (v44 != v32)
    {
      v34 = v44;
      while (((unint64_t)*v34 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v34 += 2;
        if (v34 == v32)
        {
          v34 = v32;
          break;
        }
      }
    }
  }
  if (v52 != v51)
    free(v52);
  return MEMORY[0x1CAA32FB4](v31, 8);
}

unint64_t llvm::slpvectorizer::BoUpSLP::getGatherCost(uint64_t a1, llvm::FixedVectorType ***a2, llvm::Type *a3)
{
  unsigned int v3;
  llvm::FixedVectorType **v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char v10;
  unsigned int v11;
  llvm::FixedVectorType ***v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t GatherCost;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  _BYTE v24[31];

  v3 = a3;
  v6 = *a2;
  if (*((_BYTE *)*a2 + 16) == 61)
    v6 = (llvm::FixedVectorType **)*(v6 - 8);
  llvm::FixedVectorType::get(*v6, a3);
  v8 = v7;
  v23 = v3;
  if (v3 >= 0x41)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v22, 0, 0);
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v9 = v23;
  }
  else
  {
    v22 = 0;
    v19 = 0;
    v20 = 0;
    v9 = v3;
    v21 = 0;
    if (!v3)
    {
      v10 = 0;
      goto LABEL_22;
    }
  }
  v10 = 0;
  v11 = v3 - 1;
  v12 = &a2[v11];
  do
  {
    v13 = *((unsigned __int8 *)*v12 + 16);
    if (v13 == 5 || (v13 - 4) > 0x10)
    {
      sub_1C4D95920((uint64_t)&v19, v12, (uint64_t)v24);
      if (!v24[16])
      {
        v15 = 1 << v11;
        if (v9 > 0x40)
          *(_QWORD *)(v22 + 8 * (v11 >> 6)) |= v15;
        else
          v22 |= v15;
        v10 = 1;
      }
    }
    else
    {
      v16 = 1 << v11;
      if (v9 > 0x40)
        *(_QWORD *)(v22 + 8 * (v11 >> 6)) |= v16;
      else
        v22 |= v16;
    }
    --v11;
    --v12;
  }
  while (v11 != -1);
LABEL_22:
  GatherCost = llvm::slpvectorizer::BoUpSLP::getGatherCost(a1, v8, (uint64_t)&v22, v10 & 1);
  MEMORY[0x1CAA32FB4](v19, 8);
  if (v9 >= 0x41 && v22)
    MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
  return GatherCost;
}

uint64_t sub_1C609BB98(unsigned __int8 *a1)
{
  unsigned int v1;
  uint64_t result;
  uint64_t v4;
  int v5;
  llvm::Type *v6;
  llvm::UndefValue *AggregateElement;
  char v8;

  v1 = a1[16];
  if (v1 - 11 < 2)
    return 1;
  if (v1 > 0x14)
    return 0;
  result = sub_1C5375B0C((llvm::Constant *)a1, (uint64_t (*)(uint64_t, llvm::UndefValue *))sub_1C5381FE4, (uint64_t)&v8);
  if ((_DWORD)result)
  {
    result = 0;
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      if (*(_BYTE *)(v4 + 8) == 18)
      {
        v5 = *(_DWORD *)(v4 + 32);
        if (!v5)
          return 1;
        v6 = 0;
        while (1)
        {
          AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)a1, v6);
          if (AggregateElement)
          {
            if (*((unsigned __int8 *)AggregateElement + 16) - 11 > 1)
              break;
          }
          v6 = (llvm::Type *)((_DWORD)v6 + 1);
          result = 1;
          if (v5 == (_DWORD)v6)
            return result;
        }
        return 0;
      }
    }
  }
  return result;
}

void sub_1C609BC54(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  int v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  llvm::FixedVectorType ***v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void **v36;
  char *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  int v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD v48[2];
  void *v49;
  uint64_t v50;
  _BYTE v51[1664];
  uint64_t v52;
  void *v53;
  uint64_t v54;
  _BYTE v55[24];
  void *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  _BYTE v62[48];
  char *v63;
  uint64_t v64;
  _QWORD v65[6];

  v65[4] = *MEMORY[0x1E0C80C00];
  v9 = llvm::getVectorIntrinsicIDForCall(a2, a5);
  v10 = v65;
  v63 = (char *)v65;
  v64 = 0x400000000;
  v11 = *(_DWORD *)(a2 + 20);
  v12 = v11 & 0x7FFFFFF;
  v13 = (llvm::FixedVectorType ***)(a2 - 32 * v12);
  v14 = *(unsigned __int8 *)(a2 + 16);
  v47 = v65;
  if (v14 != 84)
  {
    if (v14 == 39)
      v15 = (*(_DWORD *)(a2 + 80) + 1);
    else
      v15 = 2;
    v10 = v47;
    if ((v11 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_67:
    v44 = (uint64_t)*(v13 - 1);
    if ((v44 & 0xFFFFFFFF0) != 0)
      v16 = (*((_DWORD *)v13 - 3) - *(_DWORD *)((char *)v13 - v44));
    else
      v16 = 0;
    v10 = v47;
    goto LABEL_4;
  }
  v15 = 0;
  if (v11 < 0)
    goto LABEL_67;
LABEL_3:
  v16 = 0;
LABEL_4:
  if (v13 != (llvm::FixedVectorType ***)(a2 - 32 * v15 - 32 * v16 - 32))
  {
    v18 = 32 * v12 - 32 * v15 - 32 * v16 - 32;
    do
    {
      llvm::FixedVectorType::get(**v13, (llvm::Type *)*(unsigned int *)(a3 + 32));
      v20 = v19;
      v21 = v64;
      if (v64 >= (unint64_t)HIDWORD(v64))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, (uint64_t)v10, v64 + 1, 8);
        v21 = v64;
      }
      *(_QWORD *)&v63[8 * v21] = v20;
      LODWORD(v64) = v64 + 1;
      v13 += 4;
      v18 -= 32;
    }
    while (v18);
  }
  if (sub_1C4774A9C(a2))
  {
    if ((unint64_t)*(unsigned __int8 *)(a2 + 17) >> 1 == 127)
      LODWORD(v17) = -1;
    else
      v17 = (unint64_t)*(unsigned __int8 *)(a2 + 17) >> 1;
  }
  else
  {
    LODWORD(v17) = 0;
  }
  v22 = *(_DWORD *)(a2 + 20);
  v23 = (char *)(a2 - 32 * (v22 & 0x7FFFFFF));
  v24 = *(unsigned __int8 *)(a2 + 16);
  if (v24 == 84)
  {
    v25 = 0;
  }
  else if (v24 == 39)
  {
    v25 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    v25 = 2;
  }
  if (v22 < 0 && (v43 = *((_QWORD *)v23 - 1), (v43 & 0xFFFFFFFF0) != 0))
    v26 = (*((_DWORD *)v23 - 3) - *(_DWORD *)&v23[-v43]);
  else
    v26 = 0;
  v60 = (uint64_t *)v62;
  v61 = 0x600000000;
  sub_1C6320FEC((unsigned int *)&v60, v23, (char *)(a2 - 32 * v25 - 32 * v26 - 32));
  v27 = *(_QWORD *)(a2 - 32);
  if (v27)
  {
    if (*(_BYTE *)(v27 + 16) || *(_QWORD *)(v27 + 24) != *(_QWORD *)(a2 + 72))
    {
      v27 = 0;
    }
    else if ((*(_BYTE *)(v27 + 33) & 0x20) != 0)
    {
      v27 = a2;
    }
    else
    {
      v27 = 0;
    }
  }
  llvm::IntrinsicCostAttributes::IntrinsicCostAttributes((uint64_t)v55, v9, a3, v60, v61, v63, v64, v17, v27, 0, 1);
  v28 = (*(uint64_t (**)(_QWORD, _BYTE *, _QWORD))(*(_QWORD *)*a4 + 952))(*a4, v55, 0);
  v30 = v29;
  sub_1C606C764(a2, *(unsigned int *)(a3 + 32), 0, &v52);
  v48[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40);
  v48[1] = a2;
  v49 = v51;
  v50 = 0x800000000;
  sub_1C4EA1A3C((char **)a2, (uint64_t)&v49);
  v31 = sub_1C606C9D8((uint64_t)v48, (uint64_t)&v52);
  v32 = v31;
  v33 = (char *)v49;
  if ((_DWORD)v50)
  {
    v45 = v31;
    v46 = a1;
    v34 = a4;
    v35 = 208 * v50;
    do
    {
      v36 = (void **)&v33[v35];
      if (v33[v35 - 9] < 0)
        operator delete(*(v36 - 4));
      if (*((char *)v36 - 33) < 0)
        operator delete(*(void **)&v33[v35 - 56]);
      v37 = *(char **)&v33[v35 - 200];
      if (&v33[v35 - 184] != v37)
        free(v37);
      v35 -= 208;
    }
    while (v35);
    v33 = (char *)v49;
    a4 = v34;
    v32 = v45;
    a1 = v46;
  }
  if (v33 != v51)
    free(v33);
  v38 = *(_QWORD *)(a2 + 64);
  if (v38 && (*(_BYTE *)(v38 + 14) & 0x10) != 0)
    goto LABEL_42;
  if (!llvm::CallBase::hasFnAttrOnCalledFunction(a2, 20))
    goto LABEL_44;
  v38 = *(_QWORD *)(a2 + 64);
  if (v38)
  {
LABEL_42:
    if ((*(_BYTE *)(v38 + 12) & 0x10) == 0)
      goto LABEL_43;
LABEL_44:
    v39 = 0;
    goto LABEL_45;
  }
LABEL_43:
  v39 = llvm::CallBase::hasFnAttrOnCalledFunction(a2, 4) ^ 1;
LABEL_45:
  v40 = v28;
  v41 = v30;
  if ((v39 & 1) == 0)
  {
    v40 = v28;
    v41 = v30;
    if (v32)
      v40 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, char *, _QWORD, _QWORD))(*(_QWORD *)*a4 + 960))(*a4, 0, a3, v63, v64, 0);
  }
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v30;
  *(_QWORD *)(a1 + 16) = v40;
  *(_DWORD *)(a1 + 24) = v41;
  *(_DWORD *)(a1 + 28) = HIDWORD(v30);
  if (v53 != &v54)
    free(v53);
  v42 = (char *)v47;
  if (v58 != &v59)
    free(v58);
  if (v56 != &v57)
    free(v56);
  if (v60 != (uint64_t *)v62)
    free(v60);
  if (v63 != v42)
    free(v63);
}

void sub_1C609C104(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int *a5, unint64_t a6, unsigned int (*a7)(uint64_t, uint64_t), uint64_t a8, char *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t i;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v32[2];
  _BYTE v33[48];
  void *v34;
  uint64_t v35;
  _QWORD v36[8];

  v36[6] = *MEMORY[0x1E0C80C00];
  v16 = a2;
  sub_1C4893E04(a9, a2, -1);
  v34 = v36;
  v35 = 0xC00000000;
  if (a4 && (_DWORD)a4)
  {
    if (a4 >= 0xDuLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, (uint64_t)v36, a4, 4);
      v17 = v35;
      v18 = v34;
    }
    else
    {
      v17 = 0;
      v18 = v36;
    }
    memset((char *)v18 + 4 * v17, 255, 4 * a4);
    LODWORD(v35) = v35 + a4;
    if ((_DWORD)a4)
    {
      v19 = 0;
      do
      {
        *((_DWORD *)v18 + *(unsigned int *)(a3 + 4 * v19)) = v19;
        ++v19;
      }
      while (a4 != v19);
    }
  }
  if (a2)
  {
    for (i = 0; v16 != i; ++i)
    {
      if (a4)
        v21 = *((_DWORD *)v34 + i);
      else
        v21 = i;
      v22 = *(_QWORD *)(a1 + 8 * v21);
      if (a7(a8, v22))
      {
        *(_DWORD *)(*(_QWORD *)a9 + 4 * i) = v21 + a2;
        if (a11)
        {
          v23 = *(unsigned int *)(a11 + 8);
          if (v23 < *(unsigned int *)(a11 + 12))
          {
            v24 = a11;
LABEL_22:
            *(_QWORD *)(*(_QWORD *)v24 + 8 * v23) = v22;
            ++*(_DWORD *)(v24 + 8);
            continue;
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, a11 + 16, v23 + 1, 8);
          v24 = a11;
          goto LABEL_27;
        }
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)a9 + 4 * i) = v21;
        if (a10)
        {
          v23 = *(unsigned int *)(a10 + 8);
          if (v23 < *(unsigned int *)(a10 + 12))
          {
            v24 = a10;
            goto LABEL_22;
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v23 + 1, 8);
          v24 = a10;
LABEL_27:
          v23 = *(unsigned int *)(v24 + 8);
          goto LABEL_22;
        }
      }
    }
  }
  if (a6)
  {
    v32[0] = v33;
    v32[1] = (void *)0xC00000000;
    sub_1C4893E04((char *)v32, a6, -1);
    v25 = v32[0];
    v26 = *(_QWORD *)a9;
    v27 = 4 * a6;
    do
    {
      v28 = *a5;
      if ((_DWORD)v28 != -1)
        LODWORD(v28) = *(_DWORD *)(v26 + 4 * v28);
      *v25++ = v28;
      ++a5;
      v27 -= 4;
    }
    while (v27);
    sub_1C6090610(a9, (uint64_t)v32);
    if (v32[0] != v33)
      free(v32[0]);
  }
  if (v34 != v36)
    free(v34);
}

BOOL llvm::slpvectorizer::BoUpSLP::isFullyVectorizableTinyTree(uint64_t **this, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;

  v3 = *((_DWORD *)this + 2);
  if (v3 == 1)
  {
    v4 = **this;
    if (!*(_DWORD *)(v4 + 88))
      return 1;
    if (a2 && sub_1C609C504((uint64_t)this, **this, *(_DWORD *)(v4 + 8)))
    {
      v5 = **this;
      v6 = *(_DWORD *)(v5 + 104);
      if (!v6)
        v6 = *(_DWORD *)(v5 + 8);
      if (v6 > 2)
        return 1;
    }
    v3 = *((_DWORD *)this + 2);
  }
  if (v3 != 2)
    return 0;
  v8 = *this;
  v9 = **this;
  v10 = *(_DWORD *)(v9 + 88);
  if (!v10)
  {
    if (sub_1C609C504((uint64_t)this, v8[1], *(_DWORD *)(v9 + 8)))
      return 1;
    v8 = *this;
    v10 = *(_DWORD *)(**this + 88);
  }
  if (v10 == 2)
    return 0;
  v11 = *(_DWORD *)(v8[1] + 88);
  return v10 == 1 || v11 != 2;
}

BOOL sub_1C609C504(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  void *v28[2];
  _QWORD v29[7];

  v29[6] = *MEMORY[0x1E0C80C00];
  v28[0] = v29;
  v28[1] = (void *)0xC00000000;
  if (*(_DWORD *)(a2 + 88) == 2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    if (!(_DWORD)v4)
    {
LABEL_16:
      v19 = 1;
      goto LABEL_40;
    }
    v7 = *(uint64_t **)a2;
    v8 = a1 + 1472;
    v9 = 8 * v4;
    while (1)
    {
      v10 = sub_1C477672C(v8, *v7);
      v11 = *(_QWORD *)(a1 + 1480);
      v12 = v11 == *(_QWORD *)(a1 + 1472) ? 1492 : 1488;
      if (v10 != (_QWORD *)(v11 + 8 * *(unsigned int *)(a1 + v12)))
        break;
      ++v7;
      v9 -= 8;
      if (!v9)
      {
        v13 = *(unsigned int *)(a2 + 8);
        if (!(_DWORD)v13)
          goto LABEL_16;
        v14 = 8 * v13;
        v15 = 8 * v13;
        v16 = *(uint64_t **)a2;
        while (1)
        {
          v17 = *(unsigned __int8 *)(*v16 + 16);
          if (v17 == 5 || (v17 - 4) >= 0x11)
            break;
          ++v16;
          v15 -= 8;
          if (!v15)
            goto LABEL_16;
        }
        v20 = 0;
        v21 = 8 * v13;
        v22 = *(uint64_t **)a2;
        do
        {
          if (*(unsigned __int8 *)(*v22 + 16) - 11 >= 2)
          {
            if (v20)
            {
              if (*v22 != v20)
              {
                if (v13 < a3)
                  goto LABEL_16;
                goto LABEL_28;
              }
            }
            else
            {
              v20 = *v22;
            }
          }
          ++v22;
          v21 -= 8;
        }
        while (v21);
        v19 = 1;
        if (v13 < a3 || v20)
          goto LABEL_40;
LABEL_28:
        v23 = *(_QWORD *)(a2 + 384);
        if (v23 && *(_BYTE *)(v23 + 16) == 89)
        {
LABEL_34:
          if ((unint64_t)sub_1C609B328(*(_QWORD *)a2, v13, (char *)v28) >> 32)
            goto LABEL_16;
        }
        else
        {
          v24 = *(_QWORD *)a2;
          while (1)
          {
            v25 = *(unsigned __int8 *)(*(_QWORD *)v24 + 16);
            if ((v25 - 11) >= 2 && v25 != 89)
              break;
            v24 += 8;
            v14 -= 8;
            if (!v14)
              goto LABEL_34;
          }
        }
        if (*(_DWORD *)(a2 + 88) == 2)
        {
          v26 = *(_QWORD *)(a2 + 384);
          if (v26)
          {
            if (*(_BYTE *)(v26 + 16) == 60)
            {
              v19 = v26 == *(_QWORD *)(a2 + 392);
              goto LABEL_40;
            }
          }
        }
        break;
      }
    }
  }
  v19 = 0;
LABEL_40:
  if (v28[0] != v29)
    free(v28[0]);
  return v19;
}

uint64_t llvm::slpvectorizer::BoUpSLP::isLoadCombineReductionCandidate(uint64_t a1, int a2)
{
  if (a2 == 3)
    return sub_1C609C760(****(_QWORD ****)a1, *(_DWORD *)(**(_QWORD **)a1 + 8), *(_QWORD **)(a1 + 1936), 0);
  else
    return 0;
}

uint64_t sub_1C609C760(uint64_t a1, int a2, _QWORD *a3, int a4)
{
  int v8;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  _DWORD *v17;
  _DWORD *v18;
  int v19;
  _QWORD *v20;
  _BYTE *v21;
  _QWORD v22[2];
  llvm::APInt *v23;

  v23 = 0;
  v9 = (_BYTE *)(a1 + 16);
  v8 = *(unsigned __int8 *)(a1 + 16);
  if (v8 != 5)
  {
    v10 = 0;
    v11 = a1;
    while (1)
    {
      if (v8 != 57)
      {
        v22[0] = &v23;
        v22[1] = 0;
        v12 = *v9;
        if (v12 == 5)
        {
          if (*(_WORD *)(v11 + 18) != 25
            || !sub_1C4D8A004((uint64_t)v22, *(llvm::Constant **)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF) + 32)))
          {
            goto LABEL_13;
          }
        }
        else if (v12 != 53 || (sub_1C4D89F84((uint64_t)v22, *(unsigned __int8 **)(v11 - 32)) & 1) == 0)
        {
          goto LABEL_13;
        }
        if (llvm::APInt::urem((uint64_t **)v23, 8uLL))
          goto LABEL_13;
      }
      v11 = *(_QWORD *)(v11 - 64);
      v10 |= *v9 == 57;
      v9 = (_BYTE *)(v11 + 16);
      v8 = *(unsigned __int8 *)(v11 + 16);
      if (v8 == 5)
        goto LABEL_13;
    }
  }
  v10 = 0;
  v11 = a1;
LABEL_13:
  v21 = 0;
  if (v11 == a1)
    return 0;
  if ((a4 & (v10 ^ 1) & 1) != 0)
    return 0;
  v20 = &v21;
  if (!sub_1C4B0378C(&v20, v11) || v21[16] != 60)
    return 0;
  v13 = (*(_DWORD *)(*(_QWORD *)v21 + 8) >> 8) * a2;
  v14 = **(_QWORD ***)a1;
  LODWORD(v20) = v13;
  if (v13 <= 63)
  {
    if (v13 <= 31)
    {
      switch(v13)
      {
        case 16:
          v15 = (_QWORD *)(*v14 + 1936);
          return (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*a3 + 480))(*a3, v15);
        case 8:
          v15 = (_QWORD *)(*v14 + 1912);
          return (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*a3 + 480))(*a3, v15);
        case 1:
          v15 = (_QWORD *)(*v14 + 1888);
          return (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*a3 + 480))(*a3, v15);
      }
    }
    else if (v13 == 32)
    {
      v15 = (_QWORD *)(*v14 + 1960);
      return (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*a3 + 480))(*a3, v15);
    }
LABEL_33:
    v17 = sub_1C5270984(*v14 + 2168, &v20);
    v15 = (_QWORD *)*((_QWORD *)v17 + 1);
    if (!v15)
    {
      v18 = v17;
      v15 = (_QWORD *)sub_1C484358C(*v14 + 2040, 24, 3);
      v19 = (int)v20;
      *v15 = v14;
      v15[2] = 0;
      v15[1] = (v19 << 8) | 0xDu;
      *((_QWORD *)v18 + 1) = v15;
    }
    return (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*a3 + 480))(*a3, v15);
  }
  if (v13 != 64)
  {
    if (v13 == 128)
    {
      v15 = (_QWORD *)(*v14 + 2008);
      return (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*a3 + 480))(*a3, v15);
    }
    goto LABEL_33;
  }
  v15 = (_QWORD *)(*v14 + 1984);
  return (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*a3 + 480))(*a3, v15);
}

uint64_t llvm::slpvectorizer::BoUpSLP::isLoadCombineCandidate(uint64_t ****this)
{
  uint64_t **v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t result;

  v1 = **this;
  v2 = *((unsigned int *)v1 + 2);
  if (!(_DWORD)v2)
    return 1;
  v4 = *v1;
  v5 = 8 * v2;
  while (1)
  {
    v6 = *v4;
    if (*(_BYTE *)(*v4 + 16) != 61)
      break;
    v7 = *(_DWORD *)(v6 + 20);
    if ((v7 & 0x40000000) != 0)
      v8 = *(uint64_t **)(v6 - 8);
    else
      v8 = (uint64_t *)(v6 - 32 * (v7 & 0x7FFFFFF));
    result = *v8;
    if (!*v8)
      return result;
    if ((sub_1C609C760(result, v2, this[242], 1) & 1) == 0)
      break;
    ++v4;
    v5 -= 8;
    if (!v5)
      return 1;
  }
  return 0;
}

uint64_t llvm::slpvectorizer::BoUpSLP::getSpillCost(llvm::slpvectorizer::BoUpSLP *this)
{
  uint64_t ***v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unsigned int v25;
  uint64_t v26;
  BOOL v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  char *v33;
  unint64_t v34;
  llvm::FixedVectorType *v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t *v41;
  unint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  int v45;
  int64_t v46;
  int64_t v47;
  unsigned int v49;
  llvm::slpvectorizer::BoUpSLP *v50;
  int64_t v51;
  int v52;
  _QWORD v53[2];
  unint64_t *v54;
  unint64_t *v55;
  uint64_t v56;
  int v57;
  _BYTE v58[32];
  uint64_t v59;
  int v60;
  void *v61;
  uint64_t v62;
  _BYTE v63[32];
  void *v64;
  uint64_t v65;
  _QWORD v66[18];

  v66[16] = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t ****)this;
  v49 = *(_DWORD *)(**(_QWORD **)this + 8);
  v54 = (unint64_t *)v58;
  v55 = (unint64_t *)v58;
  v56 = 4;
  v57 = 0;
  v64 = v66;
  v65 = 0x1000000000;
  v3 = *((unsigned int *)this + 2);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 8 * v3;
    do
    {
      v6 = ***v2;
      if (v6)
        v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
      else
        v7 = 0;
      if (v7)
      {
        if (v4 >= HIDWORD(v65))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, (uint64_t)v66, v4 + 1, 8);
          v4 = v65;
        }
        *((_QWORD *)v64 + v4) = v6;
        v4 = v65 + 1;
        LODWORD(v65) = v65 + 1;
      }
      ++v2;
      v5 -= 8;
    }
    while (v5);
    v8 = (uint64_t *)v64;
    v9 = (uint64_t *)((char *)v64 + 8 * v4);
    v61 = this;
    if (v4)
    {
      v10 = 126 - 2 * __clz(v4);
      goto LABEL_16;
    }
  }
  else
  {
    v61 = this;
    v9 = v66;
    v8 = v66;
  }
  v10 = 0;
LABEL_16:
  sub_1C60B01FC(v8, v9, (uint64_t)&v61, v10, 1);
  v11 = (uint64_t *)v64;
  if ((_DWORD)v65)
  {
    v12 = 0;
    v52 = 0;
    v50 = this;
    v51 = 0;
    v13 = (char *)this + 80;
    v14 = (uint64_t *)((char *)v64 + 8 * v65);
    while (1)
    {
      v15 = v12;
      v12 = *v11;
      if (v15)
        break;
LABEL_82:
      if (++v11 == v14)
      {
        v11 = (uint64_t *)v64;
        v47 = v51;
        goto LABEL_85;
      }
    }
    v16 = (char *)sub_1C477672C((uint64_t)&v54, v15);
    if (v55 == v54)
      v17 = (uint64_t *)((char *)&v56 + 4);
    else
      v17 = &v56;
    if (v16 != (char *)&v55[*(unsigned int *)v17])
    {
      *(_QWORD *)v16 = -2;
      ++v57;
    }
    v18 = *(_DWORD *)(v15 + 20);
    if ((v18 & 0x40000000) != 0)
    {
      v20 = *(uint64_t **)(v15 - 8);
      v19 = v18 & 0x7FFFFFF;
      if (!v19)
        goto LABEL_35;
    }
    else
    {
      v19 = v18 & 0x7FFFFFF;
      v20 = (uint64_t *)(v15 - 32 * v19);
      if (!v19)
        goto LABEL_35;
    }
    v21 = 32 * v19;
    do
    {
      v22 = *v20;
      if (*(unsigned __int8 *)(*v20 + 16) >= 0x1Cu)
      {
        v61 = 0;
        if ((sub_1C61B5A68((uint64_t)v13, v22, &v61) & 1) != 0)
        {
          if (*((_QWORD *)v61 + 1))
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v54, *v20);
        }
      }
      v20 += 4;
      v21 -= 32;
    }
    while (v21);
LABEL_35:
    v23 = *(_QWORD **)(v12 + 24);
    v24 = (_QWORD *)(v15 + 24);
    if (v23 != (_QWORD *)(v15 + 24))
    {
      v25 = 0;
      do
      {
        while (v24 == (_QWORD *)(*(_QWORD *)(v15 + 40) + 40))
        {
          v24 = *(_QWORD **)(*(_QWORD *)(v12 + 40) + 40);
          if (v23 == v24)
            goto LABEL_50;
        }
        if (v24)
          v26 = (uint64_t)(v24 - 3);
        else
          v26 = 0;
        if (*(_BYTE *)(v26 + 16) == 84)
        {
          v27 = sub_1C4D99D08(v26);
          v28 = v26 == v15 ? v25 : v25 + 1;
          if (!v27)
            v25 = v28;
        }
        v24 = (_QWORD *)*v24;
      }
      while (v23 != v24);
LABEL_50:
      if (v25)
      {
        v61 = v63;
        v62 = 0x400000000;
        if (v55 == v54)
          v29 = (uint64_t *)((char *)&v56 + 4);
        else
          v29 = &v56;
        v30 = *(unsigned int *)v29;
        if ((_DWORD)v30)
        {
          v31 = 8 * v30;
          v32 = v55;
          while (*v32 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v32;
            v31 -= 8;
            if (!v31)
              goto LABEL_74;
          }
        }
        else
        {
          v32 = v55;
        }
        v33 = (char *)&v55[v30];
        if (v32 == (unint64_t *)v33)
        {
LABEL_74:
          v40 = 0;
          v43 = v63;
        }
        else
        {
          v34 = *v32;
LABEL_62:
          v35 = *(llvm::FixedVectorType **)v34;
          if (*(_QWORD *)v34)
            v36 = *(_BYTE *)(*(_QWORD *)v34 + 8) == 18;
          else
            v36 = 0;
          if (v36)
            v35 = (llvm::FixedVectorType *)*((_QWORD *)v35 + 3);
          llvm::FixedVectorType::get(v35, (llvm::Type *)v49);
          v38 = v37;
          v39 = v62;
          if (v62 >= (unint64_t)HIDWORD(v62))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, (uint64_t)v63, v62 + 1, 8);
            v39 = v62;
          }
          *((_QWORD *)v61 + v39) = v38;
          v40 = v62 + 1;
          LODWORD(v62) = v62 + 1;
          v41 = v32 + 1;
          while (v41 != (unint64_t *)v33)
          {
            v42 = *v41++;
            v34 = v42;
            if (v42 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v32 = v41 - 1;
              goto LABEL_62;
            }
          }
          v43 = v61;
        }
        v53[0] = (*(uint64_t (**)(_QWORD, _BYTE *, _QWORD))(***((_QWORD ***)v50 + 242) + 984))(**((_QWORD **)v50 + 242), v43, v40);
        v53[1] = v44;
        v59 = v25;
        v60 = 0;
        sub_1C4848B64((uint64_t)&v59, (uint64_t)v53);
        v45 = v52;
        if (v60 == 1)
          v45 = 1;
        v52 = v45;
        v46 = v51 + v59;
        if (__OFADD__(v51, v59))
          v46 = (v46 >> 63) ^ 0x8000000000000000;
        v51 = v46;
        if (v61 != v63)
          free(v61);
      }
    }
    goto LABEL_82;
  }
  v47 = 0;
LABEL_85:
  if (v11 != v66)
    free(v11);
  if (v55 != v54)
    free(v55);
  return v47;
}

unint64_t llvm::slpvectorizer::BoUpSLP::getTreeCost(void *****a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8)
{
  uint64_t v9;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t EntryCost;
  unsigned int v16;
  int v17;
  unint64_t v18;
  llvm::FixedVectorType ***v19;
  llvm::FixedVectorType ***v20;
  uint64_t v21;
  char v22;
  void ****v23;
  void ****v24;
  uint64_t v25;
  llvm::FixedVectorType *v26;
  llvm::FixedVectorType **v27;
  llvm::FixedVectorType *v28;
  unint64_t v29;
  uint64_t v30;
  __n128 v31;
  void ***v32;
  void ****v33;
  uint64_t v34;
  llvm::Type *v35;
  uint64_t v36;
  void **v37;
  void ***v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  _BYTE *v43;
  llvm::FixedVectorType **v44;
  llvm::FixedVectorType *v45;
  llvm::FixedVectorType *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  _QWORD *v54;
  int v55;
  llvm::FixedVectorType *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  _DWORD *v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t SpillCost;
  unint64_t v73;
  BOOL v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  _DWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  unsigned int v84;
  char *v85;
  uint64_t v86;
  char *v87;
  unsigned int v88;
  unsigned int v89;
  BOOL v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __n128 v94;
  uint64_t v95;
  uint64_t v96;
  _DWORD *v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _DWORD *v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  llvm::APInt *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  unint64_t v119;
  char *v120;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  llvm::Type *v138;
  llvm::Type *v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  llvm::Type *v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148[16];
  void *__dst;
  uint64_t v150;
  uint64_t v151[6];
  llvm::APInt *v152;
  uint64_t v153;
  uint64_t v154[6];
  void *v155;
  uint64_t v156;
  _BYTE v157[48];
  _BYTE *v158;
  uint64_t v159;
  _BYTE v160[64];
  _DWORD *v161;
  uint64_t v162;
  _QWORD v163[8];

  v163[6] = *MEMORY[0x1E0C80C00];
  HIDWORD(v137) = *((_DWORD *)**a1 + 2);
  v9 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v9)
  {
    v12 = 0;
    v13 = 0;
    v14 = 8 * v9;
    do
    {
      EntryCost = llvm::slpvectorizer::BoUpSLP::getEntryCost((uint64_t)a1, (uint64_t **)(*a1)[v12 / 8], a2, a3, a5, a6, a7, a8, v122, v123, v124, v125, v127, v129, v131, v133, v134, v135, v136,
                    v137,
                    (uint64_t)v138,
                    v140,
                    v142,
                    v143,
                    (int)v144,
                    (uint64_t)v145,
                    v146,
                    v147,
                    v148[0],
                    v148[1],
                    v148[2],
                    v148[3],
                    v148[4],
                    v148[5],
                    v148[6],
                    v148[7],
                    v148[8],
                    v148[9],
                    v148[10],
                    v148[11],
                    v148[12],
                    v148[13],
                    v148[14],
                    v148[15],
                    (uint64_t)__dst,
                    v150,
                    v151[0],
                    v151[1],
                    v151[2],
                    v151[3],
                    v151[4],
                    v151[5],
                    (uint64_t)v152,
                    v153,
                    v154[0],
                    v154[1],
                    v154[2],
                    v154[3],
                    v154[4],
                    v154[5],
                    (uint64_t)v155,
                    (void *)v156);
      if (__OFADD__(v13, EntryCost))
        v13 = ((uint64_t)(v13 + EntryCost) >> 63) ^ 0x8000000000000000;
      else
        v13 += EntryCost;
      v12 += 8;
    }
    while (v14 != v12);
  }
  else
  {
    v13 = 0;
  }
  v144 = v148;
  v145 = v148;
  v146 = 16;
  LODWORD(v147) = 0;
  v161 = v163;
  v162 = 0xC00000000;
  v158 = v160;
  v159 = 0x100000000;
  v155 = v157;
  v156 = 0x600000000;
  v152 = (llvm::APInt *)v154;
  v153 = 0x300000000;
  v16 = *((_DWORD *)a1 + 270);
  if (v16)
  {
    v17 = 0;
    v18 = 0;
    v19 = (llvm::FixedVectorType ***)a1[134];
    v20 = &v19[3 * v16];
    v130 = (uint64_t)(a1 + 10);
    v132 = (uint64_t)(a1 + 268);
    while (1)
    {
      v21 = (uint64_t)v19[1];
      if (!v21 || *(_BYTE *)(v21 + 16) != 90)
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v144, (uint64_t)*v19);
        if (!v22)
          goto LABEL_41;
        v21 = (uint64_t)v19[1];
      }
      v23 = (void ****)sub_1C477672C((uint64_t)(a1 + 184), v21);
      v24 = a1[185];
      if (v24 == a1[184])
        v25 = 1492;
      else
        v25 = 1488;
      if (v23 == &v24[*(unsigned int *)((char *)a1 + v25)])
      {
        v26 = **v19;
        if (*((_BYTE *)v26 + 8) != 18 && *((_BYTE *)*v19 + 16) != 89)
        {
          v139 = (llvm::Type *)v18;
          v141 = v17;
          v27 = v19[1];
          if (!v27
            || *((_BYTE *)v27 + 16) != 90
            || (v28 = *v27) == 0
            || *((_BYTE *)v28 + 8) != 18
            || (v29 = sub_1C6095CBC((uint64_t)v19[1], 0), !HIDWORD(v29)))
          {
            v31.n128_f64[0] = llvm::FixedVectorType::get(v26, (llvm::Type *)HIDWORD(v137));
            v32 = (void ***)****a1;
            __dst = v32;
            v33 = a1[268];
            v34 = *((unsigned int *)a1 + 540);
            v17 = v141;
            v35 = v139;
            if (!(_DWORD)v34)
              goto LABEL_33;
            LODWORD(v36) = ((v32 >> 4) ^ (v32 >> 9)) & (v34 - 1);
            v37 = (void **)&v33[2 * v36];
            v38 = (void ***)*v37;
            if (v32 != *v37)
            {
              v39 = 1;
              while (v38 != (void ***)-4096)
              {
                v40 = v36 + v39++;
                v36 = v40 & (v34 - 1);
                v38 = v33[2 * v36];
                if (v32 == v38)
                {
                  v37 = (void **)&v33[2 * v36];
                  goto LABEL_34;
                }
              }
LABEL_33:
              v37 = (void **)&v33[2 * v34];
            }
LABEL_34:
            if (v37 == (void **)&v33[2 * v34])
            {
              v41 = ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD, __n128))(**a1[242])[109])(*a1[242], 61, v30, *((unsigned int *)v19 + 4), v31);
LABEL_36:
              if (v42 == 1)
                v17 = 1;
              if (__OFADD__(v35, v41))
                v18 = (((uint64_t)v35 + v41) >> 63) ^ 0x8000000000000000;
              else
                v18 = (unint64_t)v35 + v41;
              goto LABEL_41;
            }
            v54 = **a1[240];
            v55 = *(_DWORD *)sub_1C63DF334(v132, (uint64_t *)&__dst);
            LODWORD(v142) = v55;
            if (v55 <= 63)
            {
              if (v55 <= 31)
              {
                switch(v55)
                {
                  case 16:
                    v56 = (llvm::FixedVectorType *)(*v54 + 1936);
                    goto LABEL_94;
                  case 8:
                    v56 = (llvm::FixedVectorType *)(*v54 + 1912);
                    goto LABEL_94;
                  case 1:
                    v56 = (llvm::FixedVectorType *)(*v54 + 1888);
                    goto LABEL_94;
                }
              }
              else if (v55 == 32)
              {
                v56 = (llvm::FixedVectorType *)(*v54 + 1960);
                goto LABEL_94;
              }
            }
            else
            {
              if (v55 == 64)
              {
                v56 = (llvm::FixedVectorType *)(*v54 + 1984);
LABEL_94:
                if (*(_BYTE *)(sub_1C63DF334(v132, (uint64_t *)&__dst) + 8))
                  v61 = 40;
                else
                  v61 = 39;
                v62 = llvm::FixedVectorType::get(v56, (llvm::Type *)HIDWORD(v137));
                v41 = ((uint64_t (*)(_QWORD, uint64_t, llvm::FixedVectorType *, uint64_t, _QWORD, double))(**a1[242])[106])(*a1[242], v61, **v19, v63, *((unsigned int *)v19 + 4), v62);
                v17 = v141;
                v35 = v139;
                goto LABEL_36;
              }
              if (v55 == 128)
              {
                v56 = (llvm::FixedVectorType *)(*v54 + 2008);
                goto LABEL_94;
              }
            }
            v65 = sub_1C5270984(*v54 + 2168, &v142);
            v56 = (llvm::FixedVectorType *)*((_QWORD *)v65 + 1);
            if (!v56)
            {
              v66 = v65;
              v56 = (llvm::FixedVectorType *)sub_1C484358C(*v54 + 2040, 24, 3);
              v67 = v142;
              *(_QWORD *)v56 = v54;
              *((_QWORD *)v56 + 2) = 0;
              *((_QWORD *)v56 + 1) = (v67 << 8) | 0xDu;
              *((_QWORD *)v66 + 1) = v56;
            }
            goto LABEL_94;
          }
          if ((_DWORD)v156)
          {
            v43 = v155;
            while (1)
            {
              v44 = *(llvm::FixedVectorType ***)v43;
              if (v27[5] == *(llvm::FixedVectorType **)(*(_QWORD *)v43 + 40) && v28 == *v44)
              {
                v45 = v27[1];
                if (v45)
                {
                  if (!*((_QWORD *)v45 + 1))
                    break;
                }
                v46 = v44[1];
                if (v46)
                {
                  if (!*((_QWORD *)v46 + 1))
                    break;
                }
              }
LABEL_47:
              v43 += 8;
              if (v43 == (char *)v155 + 8 * v156)
                goto LABEL_84;
            }
            v47 = (unint64_t)v27;
            v48 = *(_QWORD *)v43;
            while (2)
            {
              if ((llvm::FixedVectorType **)v48 == v27 || (llvm::FixedVectorType **)v47 == v44)
              {
                v51 = (v43 - (_BYTE *)v155) >> 3;
                v17 = v141;
                v18 = (unint64_t)v139;
                goto LABEL_75;
              }
              if (v47)
              {
                if ((llvm::FixedVectorType **)v47 != v27)
                {
                  v49 = *(_QWORD *)(v47 + 8);
                  if (!v49 || *(_QWORD *)(v49 + 8))
                  {
                    v47 = 0;
                    goto LABEL_61;
                  }
                }
                v47 = *(_QWORD *)(v47 - 96);
                if (*(_BYTE *)(v47 + 16) != 90)
                  v47 = 0;
                if (v48)
                {
LABEL_66:
                  if ((llvm::FixedVectorType **)v48 == v44
                    || (v50 = *(_QWORD *)(v48 + 8)) != 0 && !*(_QWORD *)(v50 + 8))
                  {
                    v48 = *(_QWORD *)(v48 - 96);
                    if (*(_BYTE *)(v48 + 16) != 90)
                      v48 = 0;
                  }
                  else
                  {
                    v48 = 0;
                  }
                }
              }
              else
              {
LABEL_61:
                if (v48)
                  goto LABEL_66;
              }
              if (!(v47 | v48))
                goto LABEL_47;
              continue;
            }
          }
LABEL_84:
          v57 = *((_DWORD *)v28 + 8);
          v58 = v162;
          v128 = v29;
          if (v162 >= (unint64_t)HIDWORD(v162))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, (uint64_t)v163, v162 + 1, 4);
            v58 = v162;
          }
          v161[v58] = v57;
          LODWORD(v162) = v162 + 1;
          sub_1C63DF478((uint64_t)&v158, &v161[v162 - 1]);
          if (*((_BYTE *)v27 + 16) == 90)
          {
            v59 = (uint64_t)v27;
            v17 = v141;
            while (1)
            {
              __dst = 0;
              if ((sub_1C61B5A68(v130, v59, &__dst) & 1) != 0)
              {
                v60 = *((_QWORD *)__dst + 1);
                if (v60)
                  break;
              }
              v59 = *(_QWORD *)(v59 - 96);
              if (*(_BYTE *)(v59 + 16) != 90)
                goto LABEL_99;
            }
            v68 = v59;
            v126 = *((_QWORD *)__dst + 1);
            do
            {
              v69 = sub_1C63DEC00(v60, v68);
              *(_DWORD *)(*(_QWORD *)&v158[64 * (unint64_t)v159 - 64] + 4 * v69) = v69;
              v68 = *(_QWORD *)(v68 - 96);
              __dst = 0;
              v70 = sub_1C61B5A68(v130, v68, &__dst);
              v71 = 0;
              if (v70)
                v71 = *((_QWORD *)__dst + 1);
              v60 = v126;
            }
            while (v126 == v71);
            v27 = (llvm::FixedVectorType **)v59;
          }
          else
          {
            v17 = v141;
          }
LABEL_99:
          v64 = v156;
          if (v156 >= (unint64_t)HIDWORD(v156))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v155, (uint64_t)v157, v156 + 1, 8);
            v64 = v156;
          }
          *((_QWORD *)v155 + v64) = v27;
          LODWORD(v156) = v156 + 1;
          LODWORD(v150) = v161[v162 - 1];
          if (v150 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&__dst, 0, 0);
          else
            __dst = 0;
          v18 = (unint64_t)v139;
          sub_1C4DF5F58((uint64_t)&v152, (unint64_t)&__dst);
          if (v150 >= 0x41 && __dst)
            MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
          LODWORD(v51) = v156 - 1;
          LODWORD(v29) = v128;
LABEL_75:
          *(_DWORD *)(*(_QWORD *)&v158[64 * (uint64_t)(int)v51] + 4 * v29) = *((_DWORD *)v19 + 4);
          v52 = (char *)v152 + 16 * (int)v51;
          v53 = 1 << v29;
          if (*((_DWORD *)v52 + 2) > 0x40u)
            *(_QWORD *)(*(_QWORD *)v52 + 8 * (v29 >> 6)) |= v53;
          else
            *(_QWORD *)v52 |= v53;
        }
      }
LABEL_41:
      v19 += 3;
      if (v19 == v20)
        goto LABEL_122;
    }
  }
  v18 = 0;
LABEL_122:
  SpillCost = llvm::slpvectorizer::BoUpSLP::getSpillCost((llvm::slpvectorizer::BoUpSLP *)a1);
  v73 = SpillCost + v18;
  if (__OFADD__(SpillCost, v18))
    v73 = ((uint64_t)(SpillCost + v18) >> 63) ^ 0x8000000000000000;
  v74 = __OFADD__(v13, v73);
  v75 = v13 + v73;
  if (v74)
    v76 = (v75 >> 63) ^ 0x8000000000000000;
  else
    v76 = v75;
  if ((_DWORD)v156)
  {
    if ((_DWORD)v156 == 1)
    {
      v77 = *((unsigned int *)v158 + 2);
      v78 = *(int **)v158;
      if ((_DWORD)v77)
      {
        v79 = 4 * v77;
        v80 = *(_DWORD **)v158;
        while (*v80 < 2 * (int)v77)
        {
          ++v80;
          v79 -= 4;
          if (!v79)
            goto LABEL_133;
        }
      }
      else
      {
LABEL_133:
        if ((sub_1C53EC390(*(int **)v158, *((unsigned int *)v158 + 2), *((_DWORD *)v158 + 2)) & 1) == 0)
        {
          v81 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD, int *, uint64_t, _QWORD, _QWORD))(**a1[242])[104])(*a1[242], 7, **(_QWORD **)v155, v78, v77, 0, 0);
          if (__OFADD__(v76, v81))
            v76 = ((uint64_t)(v76 + v81) >> 63) ^ 0x8000000000000000;
          else
            v76 += v81;
        }
      }
      v82 = ((uint64_t (*)(_QWORD, _QWORD, llvm::APInt *, uint64_t, _QWORD))(**a1[242])[66])(*a1[242], **(_QWORD **)v155, v152, 1, 0);
      if (__OFSUB__(v76, v82))
        v76 = ((uint64_t)(v76 - v82) >> 63) ^ 0x8000000000000000;
      else
        v76 -= v82;
    }
    else
    {
      v83 = v161;
      if (v162 >= 2)
      {
        v85 = (char *)(v161 + 1);
        v84 = *v161;
        v86 = 4 * v162 - 4;
        v87 = (char *)(v161 + 1);
        do
        {
          v89 = *(_DWORD *)v87;
          v87 += 4;
          v88 = v89;
          v90 = v84 >= v89;
          if (v84 <= v89)
            v84 = v88;
          if (!v90)
            v83 = (unsigned int *)v85;
          v85 = v87;
          v86 -= 4;
        }
        while (v86);
      }
      v91 = *v83;
      __dst = v151;
      v150 = 0xC00000000;
      sub_1C4893E04((char *)&__dst, v91, -1);
      v92 = *((unsigned int *)v158 + 2);
      if ((_DWORD)v92)
        memmove(__dst, *(const void **)v158, 4 * v92);
      if (*((_DWORD *)v152 + 2) < v91)
        llvm::APInt::zext(v152, v91, (uint64_t)&v142);
      else
        sub_1C5DD14E0((uint64_t)&v142, (uint64_t)v152);
      v94.n128_f64[0] = llvm::FixedVectorType::get(*(llvm::FixedVectorType **)(**(_QWORD **)v155 + 24), (llvm::Type *)v91);
      v95 = v93;
      v96 = *((unsigned int *)v158 + 18);
      v97 = __dst;
      if ((int)v96 >= 1)
      {
        v98 = 0;
        v99 = *((_QWORD *)v158 + 8);
        do
        {
          v100 = *(_DWORD *)(v99 + 4 * v98);
          if (v100 != -1)
          {
            v97[v98] = v100 + v91;
            v101 = 1 << v98;
            if (v143 > 0x40)
              *(_QWORD *)(v142 + 8 * (v98 >> 6)) |= v101;
            else
              v142 |= v101;
          }
          ++v98;
        }
        while (v96 != v98);
      }
      v102 = ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _DWORD *, _QWORD, _QWORD, _QWORD, __n128))(**a1[242])[104])(*a1[242], 6, v93, v97, v150, 0, 0, v94);
      if (__OFADD__(v76, v102))
        v103 = ((uint64_t)(v76 + v102) >> 63) ^ 0x8000000000000000;
      else
        v103 = v76 + v102;
      v104 = ((uint64_t (*)(_QWORD, uint64_t, uint64_t *, uint64_t, _QWORD))(**a1[242])[66])(*a1[242], v95, &v142, 1, 0);
      if (__OFSUB__(v103, v104))
        v76 = ((uint64_t)(v103 - v104) >> 63) ^ 0x8000000000000000;
      else
        v76 = v103 - v104;
      v105 = v156;
      if ((int)v156 >= 3)
      {
        v106 = 2;
        do
        {
          v107 = *(unsigned int *)&v158[64 * v106 + 8];
          v108 = __dst;
          if ((_DWORD)v107)
          {
            v109 = 0;
            v110 = *(_QWORD *)&v158[64 * v106];
            do
            {
              v111 = *(_DWORD *)(v110 + 4 * v109);
              if (v111 == -1)
              {
                if (v108[v109] != -1)
                  v108[v109] = v109;
              }
              else
              {
                v108[v109] = v111 + v91;
              }
              ++v109;
            }
            while (v107 != v109);
          }
          if (v107 < v91)
          {
            do
            {
              if (v108[v107] != -1)
                v108[v107] = v107;
              ++v107;
            }
            while (v91 != v107);
          }
          v112 = ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _DWORD *, _QWORD, _QWORD, _QWORD))(**a1[242])[104])(*a1[242], 6, v95, v108, v150, 0, 0);
          if (__OFADD__(v76, v112))
            v113 = ((uint64_t)(v76 + v112) >> 63) ^ 0x8000000000000000;
          else
            v113 = v76 + v112;
          v114 = ((uint64_t (*)(_QWORD, _QWORD, char *, uint64_t, _QWORD))(**a1[242])[66])(*a1[242], **((_QWORD **)v155 + v106), (char *)v152 + 16 * v106, 1, 0);
          if (__OFSUB__(v113, v114))
            v76 = ((uint64_t)(v113 - v114) >> 63) ^ 0x8000000000000000;
          else
            v76 = v113 - v114;
          ++v106;
        }
        while (v106 != v105);
      }
      if (v143 >= 0x41 && v142)
        MEMORY[0x1CAA32F9C](v142, 0x1000C8000313F17);
      if (__dst != v151)
        free(__dst);
    }
  }
  v115 = v152;
  if ((_DWORD)v153)
  {
    v116 = 16 * v153;
    do
    {
      if (*(_DWORD *)((char *)v115 + v116 - 8) >= 0x41u)
      {
        v117 = *(_QWORD *)((char *)v115 + v116 - 16);
        if (v117)
          MEMORY[0x1CAA32F9C](v117, 0x1000C8000313F17);
      }
      v116 -= 16;
    }
    while (v116);
    v115 = v152;
  }
  if (v115 != (llvm::APInt *)v154)
    free(v115);
  if (v155 != v157)
    free(v155);
  v118 = v158;
  if ((_DWORD)v159)
  {
    v119 = (unint64_t)v159 << 6;
    do
    {
      v120 = *(char **)&v118[v119 - 64];
      if (&v118[v119 - 48] != v120)
        free(v120);
      v119 -= 64;
    }
    while (v119);
    v118 = v158;
  }
  if (v118 != v160)
    free(v118);
  if (v161 != (_DWORD *)v163)
    free(v161);
  if (v145 != v144)
    free(v145);
  return v76;
}

void *sub_1C609DC04(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *result;
  const void *v8;
  const void *v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v14 = v4 + 1;
    v15 = v5 + (v4 << 6);
    if (v5 <= a2 && v15 > a2)
    {
      v17 = a2 - v5;
      sub_1C63AF6D4(a1, v14);
      v5 = *(_QWORD *)a1;
      a2 = *(_QWORD *)a1 + v17;
    }
    else
    {
      sub_1C63AF6D4(a1, v14);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = v5 + ((unint64_t)*(unsigned int *)(a1 + 8) << 6);
  result = (void *)(v6 + 32);
  *(_QWORD *)v6 = v6 + 32;
  v8 = *(const void **)(a2 + 8);
  if (v8 == *(const void **)a2)
  {
    *(_QWORD *)(v6 + 8) = result;
  }
  else
  {
    v13 = *(unsigned int *)(a2 + 16);
    result = malloc_type_malloc(8 * v13, 0x4065EBACuLL);
    if (!result && ((_DWORD)v13 || (result = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    *(_QWORD *)(v6 + 8) = result;
    v8 = *(const void **)a2;
  }
  *(_DWORD *)(v6 + 16) = *(_DWORD *)(a2 + 16);
  v9 = *(const void **)(a2 + 8);
  v10 = *(_DWORD *)(a2 + 20);
  if (v9 == v8)
    v11 = *(_DWORD *)(a2 + 20);
  else
    v11 = *(_DWORD *)(a2 + 16);
  if (v11)
  {
    result = memmove(result, v9, 8 * v11);
    v10 = *(_DWORD *)(a2 + 20);
  }
  v12 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(v6 + 20) = v10;
  *(_DWORD *)(v6 + 24) = v12;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t llvm::slpvectorizer::BoUpSLP::setInsertPointAfterBundle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm *v7;
  llvm **v8;
  uint64_t v9;
  uint64_t v10;
  llvm **v11;
  uint64_t v12;
  llvm *v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  llvm **v28;
  uint64_t v29;
  llvm *v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t result;
  unsigned __int8 *v41;
  unsigned __int8 **v42;
  uint64_t v43;
  llvm *v44;
  llvm **v45;
  uint64_t v46;
  llvm *v47;
  BOOL v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  llvm *v54;
  unsigned int v55;
  uint64_t v56;
  BOOL v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  const llvm::Instruction *v61;
  llvm **v62;
  uint64_t v63;
  uint64_t v64;
  llvm **v65;
  llvm *v66;
  uint64_t *v67;
  llvm **v69;
  uint64_t v70;
  unsigned __int8 *v71;
  uint64_t v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  uint64_t v75;

  v4 = *(_QWORD *)(a2 + 384);
  v5 = *(_QWORD *)(v4 + 40);
  v75 = v5;
  if (*(_DWORD *)(a2 + 88) != 2 && sub_1C609E1BC(*(llvm ***)a2, *(unsigned int *)(a2 + 8)))
  {
    v6 = *(unsigned int *)(a2 + 8);
    v7 = (llvm *)v4;
    if ((_DWORD)v6)
    {
      v8 = *(llvm ***)a2;
      v9 = 8 * v6;
      while ((sub_1C609E234((uint64_t)*v8) & 1) != 0)
      {
        ++v8;
        v9 -= 8;
        if (!v9)
        {
          v10 = *(unsigned int *)(a2 + 8);
          v7 = (llvm *)v4;
          if ((_DWORD)v10)
          {
            v11 = *(llvm ***)a2;
            v12 = *(_QWORD *)a2 + 8 * v10;
            v7 = (llvm *)v4;
            do
            {
              v13 = *v11;
              if (*v11)
                v14 = *((unsigned __int8 *)*v11 + 16) >= 0x1Cu;
              else
                v14 = 0;
              if (v14)
              {
                v15 = *((_QWORD *)v7 + 5);
                v16 = *(__int16 *)(v15 + 18);
                if ((v16 & 0x80000000) == 0)
                {
                  v17 = *(_QWORD *)(v15 + 48);
                  if (v17 != v15 + 40)
                  {
                    v18 = 0;
                    do
                    {
                      v19 = v17 - 24;
                      if (!v17)
                        v19 = 0;
                      *(_DWORD *)(v19 + 56) = v18++;
                      v17 = *(_QWORD *)(v17 + 8);
                    }
                    while (v17 != v15 + 40);
                  }
                  *(_WORD *)(v15 + 18) = v16 | 0x8000;
                }
                if (*((_DWORD *)v7 + 14) < *((_DWORD *)v13 + 14))
                  v7 = v13;
              }
              ++v11;
            }
            while (v11 != (llvm **)v12);
          }
          goto LABEL_49;
        }
      }
      v27 = *(unsigned int *)(a2 + 8);
      v7 = (llvm *)v4;
      if ((_DWORD)v27)
      {
        v28 = *(llvm ***)a2;
        v29 = *(_QWORD *)a2 + 8 * v27;
        v7 = (llvm *)v4;
        do
        {
          v30 = *v28;
          if (*v28)
            v31 = *((unsigned __int8 *)*v28 + 16) >= 0x1Cu;
          else
            v31 = 0;
          if (v31)
          {
            v32 = *((_QWORD *)v30 + 5);
            v33 = *(__int16 *)(v32 + 18);
            if ((v33 & 0x80000000) == 0)
            {
              v34 = *(_QWORD *)(v32 + 48);
              if (v34 != v32 + 40)
              {
                v35 = 0;
                do
                {
                  v36 = v34 - 24;
                  if (!v34)
                    v36 = 0;
                  *(_DWORD *)(v36 + 56) = v35++;
                  v34 = *(_QWORD *)(v34 + 8);
                }
                while (v34 != v32 + 40);
              }
              *(_WORD *)(v32 + 18) = v33 | 0x8000;
            }
            if (*((_DWORD *)v30 + 14) < *((_DWORD *)v7 + 14))
              v7 = v30;
          }
          ++v28;
        }
        while (v28 != (llvm **)v29);
      }
    }
LABEL_49:
    v37 = a1 + 2008;
    sub_1C4D8AE2C(v37, v5, (uint64_t)v7 + 24);
    v38 = *(unsigned __int8 **)(v4 + 48);
    v74 = v38;
    if (v38)
    {
      llvm::MetadataTracking::track((uint64_t)&v74, v38, 2);
      v39 = (uint64_t)v74;
    }
    else
    {
      v39 = 0;
    }
    result = sub_1C4774EF4(v37, 0, v39);
    v41 = v74;
    if (v74)
    {
      v42 = &v74;
      return llvm::MetadataTracking::untrack((uint64_t)v42, v41);
    }
    return result;
  }
  v20 = *(_QWORD *)(a1 + 1856);
  v21 = *(unsigned int *)(a1 + 1872);
  if (!(_DWORD)v21)
    goto LABEL_54;
  LODWORD(v22) = (v21 - 1) & ((v5 >> 4) ^ (v5 >> 9));
  v23 = (uint64_t *)(v20 + 16 * v22);
  v24 = *v23;
  if (v5 != *v23)
  {
    v25 = 1;
    while (v24 != -4096)
    {
      v26 = v22 + v25++;
      v22 = v26 & (v21 - 1);
      v24 = *(_QWORD *)(v20 + 16 * v22);
      if (v5 == v24)
      {
        v23 = (uint64_t *)(v20 + 16 * v22);
        goto LABEL_55;
      }
    }
LABEL_54:
    v23 = (uint64_t *)(v20 + 16 * v21);
  }
LABEL_55:
  if (v23 == (uint64_t *)(v20 + 16 * v21))
    goto LABEL_56;
  v54 = *(llvm **)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 8) - 8);
  v55 = *((unsigned __int8 *)v54 + 16);
  v56 = *(_QWORD *)(a2 + 384);
  if (v54)
    v57 = v55 >= 0x1C;
  else
    v57 = 0;
  if (!v57)
    goto LABEL_86;
  v58 = v55 - 28;
  v59 = v56 ? *(unsigned __int8 *)(v56 + 16) - 28 : 0;
  if (v59 != v58)
  {
    v60 = *(_QWORD *)(a2 + 392);
    if (v60)
      LODWORD(v60) = *(unsigned __int8 *)(v60 + 16) - 28;
    if ((_DWORD)v60 != v58)
LABEL_86:
      v54 = *(llvm **)(a2 + 384);
  }
  if (sub_1C60AC688(v54, (const llvm::Instruction *)a2) && sub_1C609E234((uint64_t)v54))
  {
    v62 = *(llvm ***)a2;
    v63 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v63)
    {
      v64 = 8 * v63;
      v65 = &v62[v63];
      while (1)
      {
        v66 = *v62;
        if (!sub_1C60AC688(*v62, v61) || !sub_1C609E234((uint64_t)v66))
          break;
        ++v62;
        v64 -= 8;
        if (!v64)
        {
          v62 = v65;
          break;
        }
      }
    }
    v54 = *v62;
  }
  v67 = (uint64_t *)sub_1C63DEF88(a1 + 1856, &v75);
  if (!v54 || *((unsigned __int8 *)v54 + 16) < 0x1Cu)
    goto LABEL_56;
  v69 = (llvm **)sub_1C63DFCC0(*v67, (uint64_t)v54);
  if (!v69 || !v69[4] && v69[3] == (llvm *)v69 && !v69[2])
    goto LABEL_56;
  v44 = 0;
  do
  {
    if (v69[1] == *v69)
      v44 = *v69;
    v69 = (llvm **)v69[4];
  }
  while (v69);
  if (!v44)
  {
LABEL_56:
    v43 = *(unsigned int *)(a2 + 8);
    v44 = (llvm *)v4;
    if ((_DWORD)v43)
    {
      v45 = *(llvm ***)a2;
      v46 = *(_QWORD *)a2 + 8 * v43;
      v44 = (llvm *)v4;
      do
      {
        v47 = *v45;
        if (*v45)
          v48 = *((unsigned __int8 *)*v45 + 16) >= 0x1Cu;
        else
          v48 = 0;
        if (v48)
        {
          v49 = *((_QWORD *)v44 + 5);
          v50 = *(__int16 *)(v49 + 18);
          if ((v50 & 0x80000000) == 0)
          {
            v51 = *(_QWORD *)(v49 + 48);
            if (v51 != v49 + 40)
            {
              v52 = 0;
              do
              {
                v53 = v51 - 24;
                if (!v51)
                  v53 = 0;
                *(_DWORD *)(v53 + 56) = v52++;
                v51 = *(_QWORD *)(v51 + 8);
              }
              while (v51 != v49 + 40);
            }
            *(_WORD *)(v49 + 18) = v50 | 0x8000;
          }
          if (*((_DWORD *)v44 + 14) < *((_DWORD *)v47 + 14))
            v44 = v47;
        }
        ++v45;
      }
      while (v45 != (llvm **)v46);
    }
  }
  v70 = a1 + 2008;
  sub_1C4D8AE2C(v70, v5, *((_QWORD *)v44 + 4));
  v71 = *(unsigned __int8 **)(v4 + 48);
  v73 = v71;
  if (v71)
  {
    llvm::MetadataTracking::track((uint64_t)&v73, v71, 2);
    v72 = (uint64_t)v73;
  }
  else
  {
    v72 = 0;
  }
  result = sub_1C4774EF4(v70, 0, v72);
  v41 = v73;
  if (v73)
  {
    v42 = &v73;
    return llvm::MetadataTracking::untrack((uint64_t)v42, v41);
  }
  return result;
}

uint64_t sub_1C609E1BC(llvm **a1, uint64_t a2)
{
  llvm **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *i;
  const llvm::Instruction *v6;
  uint64_t result;
  uint64_t v8;
  llvm *v9;
  BOOL v10;

  if (!a2)
    return 0;
  v2 = a1;
  v3 = 8 * a2;
  v4 = 8 * a2;
  for (i = (uint64_t *)a1; (sub_1C609E234(*i) & 1) != 0; ++i)
  {
    v4 -= 8;
    if (!v4)
      return 1;
  }
  v8 = v3 - 8;
  do
  {
    v9 = *v2++;
    result = sub_1C60AC688(v9, v6);
    if ((_DWORD)result)
      v10 = v8 == 0;
    else
      v10 = 1;
    v8 -= 8;
  }
  while (!v10);
  return result;
}

uint64_t sub_1C609E234(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  int v26;
  __int32 v28;

  result = 1;
  if (!a1)
    return result;
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 < 0x1C)
    return result;
  v4 = v3 - 33;
  if (v4 > 0x37)
    goto LABEL_7;
  if (((1 << (v3 - 33)) & 0x8000000000041) != 0)
  {
    v15 = *(_QWORD *)(a1 + 64);
    if (!v15 || (*(_BYTE *)(v15 + 20) & 4) == 0 && (*(_BYTE *)(v15 + 17) & 0x10) == 0)
    {
      v28 = 7;
      if (sub_1C53E4BBC(a1, &v28, 1uLL))
      {
        v18 = *(_QWORD *)(a1 - 32);
        if (!v18 || *(_BYTE *)(v18 + 16) || *(_QWORD *)(v18 + 24) != *(_QWORD *)(a1 + 72) || *(_DWORD *)(v18 + 36) != 7)
          return 0;
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(a1, 66) & 1) == 0)
      {
        result = llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44);
        if (!(_DWORD)result)
          return result;
      }
    }
    goto LABEL_33;
  }
  if (((1 << (v3 - 33)) & 0x808001C8000010) != 0)
    return 0;
  if (v4 == 28)
  {
    if ((*(_WORD *)(a1 + 18) & 0x301) != 0)
      return 0;
LABEL_33:
    v3 = *(unsigned __int8 *)(a1 + 16);
  }
LABEL_7:
  v5 = v3 - 33;
  if (v5 > 0x37)
  {
LABEL_11:
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6)
      return 1;
    v7 = -7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      v9 = v7;
      if (!v7)
        break;
      v8 = *(_QWORD *)(v8 + 8);
      ++v7;
    }
    while (v8);
    if (v9)
    {
      while (1)
      {
        v10 = *(_QWORD *)(v6 + 24);
        v11 = *(unsigned __int8 *)(v10 + 16);
        if (v10 && v11 >= 0x1C)
        {
          v13 = *(_QWORD *)(v10 + 40);
          if (v11 != 83 && v13 == *(_QWORD *)(a1 + 40))
            break;
        }
        v6 = *(_QWORD *)(v6 + 8);
        if (!v6)
          return 1;
      }
    }
    return 0;
  }
  if (((1 << v5) & 0x8000000000041) == 0)
  {
    if (v5 == 27)
    {
      if ((*(_WORD *)(a1 + 18) & 0x301) == 0)
        goto LABEL_11;
    }
    else if (((1 << v5) & 0x808001D0000010) == 0)
    {
      goto LABEL_11;
    }
    return 0;
  }
  v16 = *(_QWORD *)(a1 + 64);
  if (v16 && (*(_BYTE *)(v16 + 17) & 0x30) != 0)
    goto LABEL_11;
  v17 = *(_DWORD *)(a1 + 20);
  if (v17 < 0)
  {
    v19 = a1 - 32 * (v17 & 0x7FFFFFF);
    v22 = *(_QWORD *)(v19 - 8);
    v20 = v19 - 8;
    v21 = v22;
    if (v22)
    {
      v23 = -v21;
      do
      {
        v24 = *(_DWORD *)(*(_QWORD *)(v20 + v23) + 8);
        v25 = v24 > 7;
        v26 = (1 << v24) & 0x83;
        if (v25 || v26 == 0)
          return 0;
        v23 += 16;
      }
      while (v23);
    }
  }
  if ((llvm::CallBase::hasFnAttrOnCalledFunction(a1, 45) & 1) != 0)
    goto LABEL_11;
  result = llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44);
  if ((_DWORD)result)
    goto LABEL_11;
  return result;
}

uint64_t llvm::slpvectorizer::BoUpSLP::gather(uint64_t a1, llvm::FixedVectorType ***a2, llvm::Type *a3)
{
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  llvm::BasicBlock *v18;
  llvm::BasicBlock *v19;
  BOOL v20;
  _BOOL4 v21;
  char v23;
  uint64_t SinglePredecessor;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  llvm::FixedVectorType **v28;
  llvm::PoisonValue *v29;
  llvm::Type *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD **v34;
  _QWORD **v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _DWORD *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  int v42;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  void *v54;
  uint64_t v55;
  _BYTE v56[16];
  _QWORD **v57;
  _QWORD *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  _BYTE v62[64];
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  _QWORD v67[6];

  v67[4] = *MEMORY[0x1E0C80C00];
  v59 = 0;
  v60 = v62;
  v61 = 0x400000000;
  v54 = v56;
  v55 = 0x400000000;
  v57 = &v58;
  v58 = 0;
  v6 = *(uint64_t **)(a1 + 1952);
  v7 = *((_DWORD *)v6 + 4);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 2056);
    v9 = *v6;
    v10 = v7 - 1;
    v11 = ((v8 >> 4) ^ (v8 >> 9)) & (v7 - 1);
    v12 = *(_QWORD *)(v9 + 16 * v11);
    if (v8 == v12)
    {
LABEL_6:
      v52 = *(_QWORD *)(v9 + 16 * v11 + 8);
      goto LABEL_8;
    }
    v13 = 1;
    while (v12 != -4096)
    {
      v14 = v11 + v13++;
      v11 = v14 & v10;
      v12 = *(_QWORD *)(v9 + 16 * v11);
      if (v8 == v12)
        goto LABEL_6;
    }
  }
  v52 = 0;
LABEL_8:
  v53 = 0;
  if ((int)a3 >= 1)
  {
    v15 = 0;
    v51 = a1 + 80;
    do
    {
      v16 = (uint64_t)a2[v15];
      if (v16)
        v17 = *(unsigned __int8 *)(v16 + 16) >= 0x1Cu;
      else
        v17 = 0;
      if (v17)
      {
        v18 = *(llvm::BasicBlock **)(v16 + 40);
        v19 = *(llvm::BasicBlock **)(a1 + 2056);
        v63 = v67;
        v64 = (uint64_t)v67;
        v65 = 4;
        v66 = 0;
        v20 = v19 != 0;
        v21 = v19 == v18;
        if (v19 != v18 && v19 != 0)
        {
          while (1)
          {
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v63, (uint64_t)v19);
            if (!v23)
              break;
            SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v19);
            v20 = SinglePredecessor != 0;
            v21 = SinglePredecessor == (_QWORD)v18;
            if ((llvm::BasicBlock *)SinglePredecessor != v18)
            {
              v19 = (llvm::BasicBlock *)SinglePredecessor;
              if (SinglePredecessor)
                continue;
            }
            goto LABEL_24;
          }
          v21 = 0;
LABEL_24:
          if ((uint64_t *)v64 != v63)
            free((void *)v64);
        }
        if (v21 && v20)
          goto LABEL_28;
        v63 = 0;
        if ((sub_1C61B5A68(v51, v16, &v63) & 1) != 0)
        {
          if (v63[1])
            goto LABEL_28;
        }
        if (v52)
        {
          v25 = sub_1C477672C(v52 + 56, *(_QWORD *)(v16 + 40));
          v26 = *(_QWORD *)(v52 + 64);
          v27 = 72;
          if (v26 == *(_QWORD *)(v52 + 56))
            v27 = 76;
          if (v25 != (_QWORD *)(v26 + 8 * *(unsigned int *)(v52 + v27)))
          {
LABEL_28:
            if ((sub_1C609E93C((uint64_t)&v54, (int *)&v53) & 0x100000000) != 0)
              sub_1C621E53C((uint64_t)&v60, v16, v53);
          }
        }
      }
      v15 = v53 + 1;
      v53 = v15;
    }
    while (v15 < (int)a3);
  }
  v28 = *a2;
  if (*((_BYTE *)*a2 + 16) == 61)
    v28 = (llvm::FixedVectorType **)*(v28 - 8);
  llvm::FixedVectorType::get(*v28, a3);
  v31 = (uint64_t)llvm::PoisonValue::get(v29, v30);
  v63 = &v65;
  v64 = 0xC00000000;
  if ((int)a3 >= 1)
  {
    v32 = 0;
    while (1)
    {
      if (v59)
      {
        v33 = v58;
        v34 = &v58;
        if (v58)
        {
          do
          {
            v35 = v34;
            v36 = v33;
            v37 = *((int *)v33 + 7);
            v38 = v33 + 1;
            if (v32 <= v37)
            {
              v38 = v36;
              v34 = (_QWORD **)v36;
            }
            v33 = (_QWORD *)*v38;
          }
          while (v33);
          if (v34 != &v58)
          {
            if (v32 <= v37)
              v35 = (_QWORD **)v36;
            if (v32 >= *((int *)v35 + 7))
              goto LABEL_67;
          }
        }
      }
      else if ((_DWORD)v55)
      {
        v39 = v54;
        v40 = 4 * v55;
        while (v32 != *v39)
        {
          ++v39;
          v40 -= 4;
          if (!v40)
            goto LABEL_59;
        }
        if (v40)
          goto LABEL_67;
      }
LABEL_59:
      v41 = (unsigned __int8 *)a2[v32];
      v42 = v41[16];
      if (v42 == 5 || (v42 - 4) >= 0x11)
      {
        v44 = v64;
        if (v64 >= (unint64_t)HIDWORD(v64))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, (uint64_t)&v65, v64 + 1, 4);
          v44 = v64;
        }
        *((_DWORD *)v63 + v44) = v32;
        LODWORD(v64) = v64 + 1;
      }
      else
      {
        v31 = sub_1C609EA50(a1, v31, (const llvm::APInt *)v41, v32);
      }
LABEL_67:
      if (++v32 == a3)
      {
        if ((_DWORD)v64)
        {
          v45 = v63;
          v46 = 4 * v64;
          do
          {
            v47 = *(int *)v45;
            v45 = (uint64_t *)((char *)v45 + 4);
            v31 = sub_1C609EA50(a1, v31, (const llvm::APInt *)a2[v47], v47);
            v46 -= 4;
          }
          while (v46);
        }
        break;
      }
    }
  }
  if ((_DWORD)v61)
  {
    v48 = (char *)v60;
    v49 = (char *)v60 + 16 * v61;
    do
    {
      v31 = sub_1C609EA50(a1, v31, *(const llvm::APInt **)v48, *((_DWORD *)v48 + 2));
      v48 += 16;
    }
    while (v48 != v49);
  }
  if (v63 != &v65)
    free(v63);
  sub_1C61247C0((uint64_t)&v57, v58);
  if (v54 != v56)
    free(v54);
  if (v60 != v62)
    free(v60);
  return v31;
}

unint64_t sub_1C609E93C(uint64_t a1, int *a2)
{
  unsigned __int8 v4;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  int *v11;

  if (*(_QWORD *)(a1 + 48))
  {
    sub_1C49915F0((uint64_t **)(a1 + 32), a2, a2);
    return ((unint64_t)v4 << 32) | 1;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = *(unsigned int *)(a1 + 8);
    v8 = *a2;
    if (!(_DWORD)v7)
      goto LABEL_11;
    v9 = 4 * v7;
    v10 = *(_DWORD **)a1;
    while (*v10 != v8)
    {
      ++v10;
      v9 -= 4;
      if (!v9)
        goto LABEL_10;
    }
    if (v9)
      return 1;
LABEL_10:
    if (v7 > 3)
    {
      do
      {
        v11 = (int *)(*(_QWORD *)a1 + 4 * v7 - 4);
        sub_1C49915F0((uint64_t **)(a1 + 32), v11, v11);
        LODWORD(v7) = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v7;
      }
      while ((_DWORD)v7);
      sub_1C49915F0((uint64_t **)(a1 + 32), a2, a2);
    }
    else
    {
LABEL_11:
      if (v7 >= *(_DWORD *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v7 + 1, 4);
        v6 = *(_DWORD **)a1;
        v7 = *(unsigned int *)(a1 + 8);
      }
      v6[v7] = v8;
      ++*(_DWORD *)(a1 + 8);
    }
    return 0x100000001;
  }
}

uint64_t sub_1C609EA50(uint64_t a1, uint64_t a2, const llvm::APInt *a3, unsigned int a4)
{
  uint64_t *v7;
  uint64_t v8;
  llvm::ConstantInt *v9;
  unint64_t v10;
  int v11;
  llvm::ValueHandleBase *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  llvm::ConstantInt *v18;
  llvm::ValueHandleBase *v19;
  unsigned __int8 *v20;
  unsigned int v21;
  __int16 v22;

  v7 = (uint64_t *)(a1 + 2008);
  v8 = **(_QWORD **)(a1 + 2072);
  v9 = *(llvm::ConstantInt **)(v8 + 1960);
  v10 = *(unsigned int *)(v8 + 1968);
  v21 = v10 >> 8;
  if (v10 >> 8 > 0x40)
  {
    v18 = v9;
    llvm::APInt::initSlowCase((llvm::APInt *)&v20, a4, 0);
    v9 = v18;
  }
  else
  {
    if (v10 <= 0xFF)
      v11 = 0;
    else
      v11 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v10);
    v20 = (unsigned __int8 *)(v11 & a4);
  }
  v12 = llvm::ConstantInt::get(v9, (llvm::LLVMContext *)&v20, a3);
  if (v21 >= 0x41 && v20)
  {
    v19 = v12;
    MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
    v12 = v19;
  }
  v22 = 257;
  v13 = sub_1C4773154(v7, a2, (uint64_t)a3, (uint64_t)v12, (uint64_t)&v20);
  v14 = (uint64_t)v13;
  if (v13)
  {
    if (v13[16] == 90)
    {
      v20 = v13;
      sub_1C509CEFC((_QWORD *)(a1 + 1760), &v20);
      v20 = *(unsigned __int8 **)(v14 + 40);
      sub_1C5ACED14(a1 + 1808, &v20);
      v20 = 0;
      if ((sub_1C61B5A68(a1 + 80, (uint64_t)a3, &v20) & 1) != 0)
      {
        v16 = *((_QWORD *)v20 + 1);
        if (v16)
        {
          v17 = sub_1C63DEC00(v16, (uint64_t)a3);
          sub_1C63DFB10(a1 + 1072, (uint64_t)a3, v14, v17);
        }
      }
    }
  }
  return v14;
}

llvm::PoisonValue **llvm::slpvectorizer::BoUpSLP::vectorizeTree(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  llvm::PoisonValue **v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  llvm::FixedVectorType **v18;
  uint64_t v19;
  __int128 v20;
  unsigned __int8 *v21;
  void *__src;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  int v32;
  char v33;
  void *v34[2];
  _QWORD v35[6];

  v35[4] = *MEMORY[0x1E0C80C00];
  v4 = a1 + 2008;
  v19 = a1 + 2008;
  v20 = *(_OWORD *)(a1 + 2056);
  llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)(a1 + 2008), &v21);
  v5 = *(llvm::PoisonValue ***)(a2 + 80);
  if (!v5)
  {
    v6 = *(_DWORD *)(a2 + 104);
    v7 = v6;
    if (!v6)
      v7 = *(_DWORD *)(a2 + 8);
    v31 = v4;
    v32 = v7;
    v33 = 0;
    v34[0] = v35;
    v34[1] = (void *)0x400000000;
    v35[2] = a1 + 1760;
    v35[3] = a1 + 1808;
    v8 = *(_QWORD *)(a2 + 384);
    if (*(_DWORD *)(a2 + 88) != 2)
    {
      v9 = *(unsigned __int8 *)(v8 + 16);
      if (v8 == *(_QWORD *)(a2 + 392))
        v10 = v9 - 28;
      else
        v10 = 63;
      if (v9 == 90 || (v18 = *(llvm::FixedVectorType ***)(a2 + 384), v9 == 61))
        v18 = *(llvm::FixedVectorType ***)(v8 - 64);
      llvm::FixedVectorType::get(*v18, (llvm::Type *)*(unsigned int *)(a2 + 8));
      __asm { BR              X10 }
    }
    if (v8)
      llvm::slpvectorizer::BoUpSLP::setInsertPointAfterBundle(a1, a2);
    __src = &v24;
    v23 = 0xC00000000;
    v25 = &v27;
    v26 = (void *)0x600000000;
    if ((unint64_t)llvm::slpvectorizer::BoUpSLP::isGatherShuffledEntry(a1, a2, (char *)&__src, (uint64_t)&v25) >> 32)
    {
      v11 = *(_QWORD *)(*(_QWORD *)v25 + 80);
      v12 = *(_QWORD *)(*((_QWORD *)v25 + v26 - 1) + 80);
      v30 = 257;
      v13 = sub_1C486AD20(v4, v11, v12, __src, v23, (uint64_t)&v29);
      v5 = (llvm::PoisonValue **)v13;
      if (*(unsigned __int8 *)(v13 + 16) <= 0x1Bu)
        v14 = 0;
      else
        v14 = v13;
      v29 = v14;
      if (v14)
      {
        sub_1C509CEFC((_QWORD *)(a1 + 1760), &v29);
        v28 = *(void **)(v29 + 40);
        sub_1C5ACED14(a1 + 1808, &v28);
      }
    }
    else
    {
      v5 = (llvm::PoisonValue **)llvm::slpvectorizer::BoUpSLP::gather(a1, *(llvm::FixedVectorType ****)a2, (llvm::Type *)*(unsigned int *)(a2 + 8));
    }
    if (v6)
    {
      sub_1C60904B8(v34, *(int **)(a2 + 96), *(unsigned int *)(a2 + 104));
      v5 = sub_1C60A12D8((uint64_t)&v31, v5);
    }
    *(_QWORD *)(a2 + 80) = v5;
    if (v25 != &v27)
      free(v25);
    if (__src != &v24)
      free(__src);
    if (v34[0] != v35)
      free(v34[0]);
  }
  v15 = v19;
  if ((_QWORD)v20)
  {
    sub_1C4D8AE2C(v19, v20, *((uint64_t *)&v20 + 1));
    v15 = v19;
  }
  else
  {
    *(_QWORD *)(v19 + 48) = 0;
    *(_QWORD *)(v19 + 56) = 0;
  }
  __src = v21;
  if (v21)
  {
    llvm::MetadataTracking::track((uint64_t)&__src, v21, 2);
    v16 = __src;
  }
  else
  {
    v16 = 0;
  }
  sub_1C4774EF4(v15, 0, (uint64_t)v16);
  if (__src)
    llvm::MetadataTracking::untrack((uint64_t)&__src, (unsigned __int8 *)__src);
  if (v21)
    llvm::MetadataTracking::untrack((uint64_t)&v21, v21);
  return v5;
}

llvm::PoisonValue **llvm::slpvectorizer::BoUpSLP::createBuildVector(uint64_t a1, llvm::Type *a2, unint64_t a3)
{
  llvm::FixedVectorType ***v3;
  unint64_t v5;
  llvm::PoisonValue **v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40[2];
  _QWORD v41[4];
  void *v42;
  uint64_t v43;
  _BYTE v44[48];
  int *v45;
  uint64_t v46;
  _QWORD v47[8];

  v3 = (llvm::FixedVectorType ***)a2;
  v47[6] = *MEMORY[0x1E0C80C00];
  v45 = (int *)v47;
  v46 = 0xC00000000;
  v42 = v44;
  v43 = 0x600000000;
  if (a3 < 3)
  {
    v5 = a3;
    goto LABEL_3;
  }
  v38 = 0;
  v39 = 0;
  v8 = 8 * a3;
  LODWORD(v40[0]) = 0;
  while (v8)
  {
    v9 = *(unsigned __int8 *)(*(_QWORD *)((char *)a2 + v8 - 8) + 16) - 13;
    v8 -= 8;
    if (v9 <= 0xFFFFFFFD)
    {
      v10 = (uint64_t)a2 + v8 + 8;
      goto LABEL_17;
    }
  }
  v10 = (uint64_t)a2;
LABEL_17:
  v11 = v10 - (_QWORD)a2;
  v12 = (v11 >> 3);
  if ((v11 >> 3))
  {
    v14 = (v12 - 1) | ((unint64_t)(v12 - 1) >> 1) | (((v12 - 1) | ((unint64_t)(v12 - 1) >> 1)) >> 2);
    v15 = v14 | (v14 >> 4) | ((v14 | (v14 >> 4)) >> 8);
    v13 = ((v15 >> 16) | v15) + 1;
  }
  else
  {
    v13 = 0;
  }
  if (a3 <= v13)
    v16 = v13;
  else
    v16 = a3;
  if (!(_DWORD)v16)
    goto LABEL_24;
  v33 = v12;
  v17 = 0;
  v18 = 8 * v16;
  v19 = (uint64_t *)a2;
  do
  {
    v37 = *v19;
    v20 = *(unsigned __int8 *)(v37 + 16);
    if ((v20 - 11) > 1)
    {
      if (v20 == 5 || (v20 - 4) > 0x10)
      {
        v34 = v43;
        sub_1C63DFA78((uint64_t)&v35, (uint64_t)&v38, &v37, &v34);
        if (v46 >= HIDWORD(v46))
        {
          sub_1C6272EB8(&v45, *(_DWORD *)(v35 + 8));
        }
        else
        {
          v45[v46] = *(_DWORD *)(v35 + 8);
          LODWORD(v46) = v46 + 1;
        }
        if (v36)
        {
          v25 = v43;
          if (v43 >= HIDWORD(v43))
          {
            v27 = v37;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, (uint64_t)v44, v43 + 1, 8);
            *((_QWORD *)v42 + v43) = v27;
            v25 = v43;
          }
          else
          {
            *((_QWORD *)v42 + v43) = v37;
          }
          LODWORD(v43) = v25 + 1;
          ++v17;
        }
      }
      else
      {
        v22 = v43;
        if (v46 >= HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, (uint64_t)v47, v46 + 1, 4);
          v45[v46] = v22;
        }
        else
        {
          v45[v46] = v43;
        }
        LODWORD(v46) = v46 + 1;
        v23 = v43;
        if (v43 >= HIDWORD(v43))
        {
          v26 = v37;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, (uint64_t)v44, v43 + 1, 8);
          *((_QWORD *)v42 + v43) = v26;
          v24 = v43 + 1;
        }
        else
        {
          *((_QWORD *)v42 + v43) = v37;
          v24 = v23 + 1;
        }
        LODWORD(v43) = v24;
      }
    }
    else if (v46 >= HIDWORD(v46))
    {
      sub_1C63E2C6C(&v45);
    }
    else
    {
      v45[v46] = -1;
      LODWORD(v46) = v46 + 1;
    }
    ++v19;
    v18 -= 8;
  }
  while (v18);
  if (v17 == 1 && (_DWORD)v43 == 1)
  {
    v28 = v46;
    v29 = v46;
    v30 = v46;
    if (v16 > HIDWORD(v46))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, (uint64_t)v47, v16, 4);
      v29 = v46;
      v30 = v46;
    }
    if ((_DWORD)v16 != (_DWORD)v28)
    {
      memset(&v45[v29], 255, 4 * (v16 - v28));
      v30 = v46;
    }
    LODWORD(v46) = v16 - v28 + v30;
    goto LABEL_60;
  }
  v12 = v33;
  if (v43 >= (int)v16 - 1 || v43 <= 1)
  {
LABEL_24:
    LODWORD(v46) = 0;
    LODWORD(v43) = 0;
    sub_1C4FA6FB8((unsigned int *)&v42, v3, &v3[v12]);
  }
LABEL_60:
  v31 = v16 - v43;
  v32 = llvm::PoisonValue::get(**v3, a2);
  sub_1C510F7B8((unsigned int *)&v42, v31, (uint64_t)v32);
  v3 = (llvm::FixedVectorType ***)v42;
  v5 = v43;
  MEMORY[0x1CAA32FB4](v38, 8);
  LODWORD(a3) = v16;
LABEL_3:
  v38 = a1 + 2008;
  LODWORD(v39) = a3;
  BYTE4(v39) = 0;
  v40[0] = v41;
  v40[1] = (void *)0x400000000;
  v41[2] = a1 + 1760;
  v41[3] = a1 + 1808;
  v6 = (llvm::PoisonValue **)llvm::slpvectorizer::BoUpSLP::gather(a1, v3, (llvm::Type *)v5);
  if ((_DWORD)v46)
  {
    sub_1C60904B8(v40, v45, v46);
    v6 = sub_1C60A12D8((uint64_t)&v38, v6);
  }
  if (v40[0] != v41)
    free(v40[0]);
  if (v42 != v44)
    free(v42);
  if (v45 != (int *)v47)
    free(v45);
  return v6;
}

llvm::PoisonValue **sub_1C60A12D8(uint64_t a1, llvm::PoisonValue **a2)
{
  llvm::PoisonValue **v2;
  int v4;
  unint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  llvm::Type *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD v20[4];
  __int16 v21;
  void *__src;
  uint64_t v23;
  _QWORD v24[3];

  v2 = a2;
  v24[2] = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 12) = 1;
  v4 = *((_DWORD *)*a2 + 8);
  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5 != v4 || *(_DWORD *)(a1 + 24))
  {
    __src = v24;
    v23 = 0x400000000;
    sub_1C4893E04((char *)&__src, v5, -1);
    v6 = (int *)__src;
    if ((_DWORD)v23)
    {
      v7 = 0;
      v8 = 4 * v23;
      do
      {
        v6[v7] = v7;
        ++v7;
        v8 -= 4;
      }
      while (v8);
      v9 = v23;
    }
    else
    {
      v9 = 0;
    }
    sub_1C60904B8((_DWORD *)(a1 + 16), v6, v9);
    v11 = *(void **)(a1 + 16);
    v12 = *(unsigned int *)(a1 + 24);
    if (*(_DWORD *)(a1 + 8) != v4
      || (sub_1C53EC390(*(int **)(a1 + 16), *(unsigned int *)(a1 + 24), *(_DWORD *)(a1 + 24)) & 1) == 0)
    {
      v13 = *(_QWORD *)a1;
      v20[0] = "shuffle";
      v21 = 259;
      v14 = llvm::PoisonValue::get(*v2, v10);
      v15 = sub_1C486AD20(v13, (uint64_t)v2, (uint64_t)v14, v11, v12, (uint64_t)v20);
      v2 = (llvm::PoisonValue **)v15;
      v16 = *(unsigned __int8 *)(v15 + 16) <= 0x1Bu ? 0 : v15;
      v20[0] = v16;
      if (v16)
      {
        sub_1C509CEFC(*(_QWORD **)(a1 + 48), v20);
        v17 = *(_QWORD *)(a1 + 56);
        v19 = *(_QWORD *)(v20[0] + 40);
        sub_1C5ACED14(v17, &v19);
      }
    }
    if (__src != v24)
      free(__src);
  }
  return v2;
}

void sub_1C60A1470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v3 = a3;
    v11 = v13;
    v12 = 0x400000000;
    v6 = a3;
    if ((_DWORD)a3)
    {
      if (a3 >= 5uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v11, (uint64_t)v13, a3, 4);
        v7 = v12;
        v8 = (int *)v11;
      }
      else
      {
        v7 = 0;
        v8 = (int *)v13;
      }
      memset(&v8[v7], 255, 4 * v6);
      v9 = v12 + v3;
      LODWORD(v12) = v12 + v3;
      if (v3)
      {
        v10 = 0;
        do
        {
          v8[*(unsigned int *)(a2 + 4 * v10)] = v10;
          ++v10;
        }
        while (v6 != v10);
        v9 = v12;
      }
    }
    else
    {
      v9 = 0;
      v8 = (int *)v13;
    }
    sub_1C60904B8((_DWORD *)(a1 + 16), v8, v9);
    if (v11 != v13)
      free(v11);
  }
}

_QWORD *llvm::slpvectorizer::BoUpSLP::vectorizeTree(llvm::slpvectorizer::BoUpSLP *this)
{
  _QWORD *v1;
  int32x2_t v3[2];
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[0] = 0;
  v3[1] = 0;
  v4 = 0;
  v6 = 0;
  v7 = 0;
  v5 = 0;
  v1 = llvm::slpvectorizer::BoUpSLP::vectorizeTree((uint64_t *)this, v3);
  sub_1C63E18F0((uint64_t)v3);
  return v1;
}

_QWORD *llvm::slpvectorizer::BoUpSLP::vectorizeTree(uint64_t *a1, int32x2_t *a2)
{
  _QWORD ***v4;
  _QWORD ***v5;
  uint64_t **v6;
  _QWORD **v7;
  _QWORD **v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t **v11;
  llvm::PoisonValue **v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD ***v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD **v20;
  int v21;
  int v22;
  unsigned int v23;
  llvm::Value **v24;
  llvm::Value **v25;
  llvm::Value *v26;
  uint64_t v27;
  uint64_t v28;
  const llvm::APInt *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::ConstantInt *v33;
  unint64_t v34;
  unint64_t v35;
  llvm::ValueHandleBase *v36;
  BOOL v38;
  llvm::Value *v39;
  _QWORD **v40;
  _QWORD **v41;
  _QWORD *v42;
  _QWORD *v43;
  llvm::Value *v44;
  unsigned __int8 *v45;
  _QWORD **v46;
  llvm::Value *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  llvm::Value *v58;
  uint64_t v59;
  uint64_t v60;
  llvm::Value *v61;
  unsigned __int8 *v62;
  int v63;
  uint64_t v64;
  llvm::Value *v65;
  llvm::Value *v66;
  llvm::Value *v67;
  _QWORD **v68;
  _QWORD **v69;
  _QWORD *v70;
  _QWORD *v71;
  llvm::Value *v72;
  unsigned int *v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  __int32 v77;
  int32x2_t v78;
  __int32 v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  int v83;
  int v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  void **v88;
  unint64_t v89;
  _DWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v113;
  llvm::PoisonValue *v115;
  llvm::PoisonValue *v116;
  llvm::PoisonValue **i;
  llvm::PoisonValue **v118;
  uint64_t **v119;
  unsigned int v120;
  BOOL v121;
  uint64_t v122;
  char *v124;
  uint64_t **v125;
  llvm::Type *v126;
  _QWORD *v127;
  int v128;
  llvm::FixedVectorType *v129;
  uint64_t v130;
  unsigned __int8 *v131;
  _DWORD *v132;
  int v133;
  _QWORD *v134;
  int32x2_t *v135;
  uint64_t v136;
  uint64_t v137;
  llvm::ValueHandleBase *v138;
  llvm::Value *v139;
  uint64_t **v140;
  uint64_t *v141;
  llvm::ValueHandleBase **v142;
  uint64_t *v143;
  __int16 v144;
  uint64_t v145;
  llvm::Value *v146;

  v4 = (_QWORD ***)a1[235];
  v5 = (_QWORD ***)a1[236];
  while (v4 != v5)
  {
    llvm::slpvectorizer::BoUpSLP::scheduleBlock((llvm::slpvectorizer::BoUpSLP *)a1, (llvm::Instruction **)v4[1]);
    v4 += 2;
  }
  v6 = 0;
  v7 = *(_QWORD ***)(a1[240] + 80);
  if (v7)
    v8 = v7 - 3;
  else
    v8 = 0;
  v9 = v8[6];
  if (v9)
    v10 = v9 - 3;
  else
    v10 = 0;
  a1[257] = v10[5];
  a1[258] = (uint64_t)(v10 + 3);
  v11 = (uint64_t **)v10[6];
  v140 = v11;
  if (v11)
  {
    llvm::MetadataTracking::track((uint64_t)&v140, (unsigned __int8 *)v11, 2);
    v6 = v140;
  }
  sub_1C4774EF4((uint64_t)(a1 + 251), 0, (uint64_t)v6);
  if (v140)
    llvm::MetadataTracking::untrack((uint64_t)&v140, (unsigned __int8 *)v140);
  v12 = llvm::slpvectorizer::BoUpSLP::vectorizeTree((uint64_t)a1, *(_QWORD *)*a1);
  v13 = (unsigned __int8 *)v12;
  v14 = *a1;
  v15 = ***(_QWORD ***)*a1;
  v145 = v15;
  v16 = (_QWORD ***)a1[268];
  v17 = *((unsigned int *)a1 + 540);
  if ((_DWORD)v17)
  {
    LODWORD(v18) = ((v15 >> 4) ^ (v15 >> 9)) & (v17 - 1);
    v19 = &v16[2 * v18];
    v20 = (_QWORD **)*v19;
    if (v15 == *v19)
      goto LABEL_21;
    v21 = 1;
    while (v20 != (_QWORD **)-4096)
    {
      v22 = v18 + v21++;
      v18 = v22 & (v17 - 1);
      v20 = v16[2 * v18];
      if ((_QWORD **)v15 == v20)
      {
        v19 = &v16[2 * v18];
        goto LABEL_21;
      }
    }
  }
  v19 = &v16[2 * v17];
LABEL_21:
  if (v19 != &v16[2 * v17])
  {
    v113 = *((unsigned __int8 *)v12 + 16);
    if (v113 >= 0x1C && v12 != 0)
    {
      if (v113 == 83)
      {
        v115 = v12[5];
        v116 = (llvm::PoisonValue *)((char *)v115 + 40);
        for (i = (llvm::PoisonValue **)*((_QWORD *)v115 + 6);
              i != (llvm::PoisonValue **)v116;
              i = (llvm::PoisonValue **)i[1])
        {
          v118 = i - 3;
          if (!i)
            v118 = 0;
          if (*((_BYTE *)v118 + 16) != 83)
          {
            v120 = *((unsigned __int8 *)i - 8) - 38;
            v121 = v120 > 0x38;
            v122 = (1 << v120) & 0x100060000000001;
            if (v121 || v122 == 0)
              v116 = (llvm::PoisonValue *)i;
            else
              v116 = i[1];
            break;
          }
        }
        v119 = 0;
      }
      else
      {
        v119 = 0;
        v116 = v12[4];
      }
      if (v116)
        v124 = (char *)v116 - 24;
      else
        v124 = 0;
      a1[257] = *((_QWORD *)v124 + 5);
      a1[258] = (uint64_t)(v124 + 24);
      v125 = (uint64_t **)*((_QWORD *)v124 + 6);
      v140 = v125;
      if (v125)
      {
        llvm::MetadataTracking::track((uint64_t)&v140, (unsigned __int8 *)v125, 2);
        v119 = v140;
      }
      sub_1C4774EF4((uint64_t)(a1 + 251), 0, (uint64_t)v119);
      if (v140)
        llvm::MetadataTracking::untrack((uint64_t)&v140, (unsigned __int8 *)v140);
    }
    v126 = (llvm::Type *)*(unsigned int *)(*(_QWORD *)*a1 + 8);
    v127 = **(_QWORD ***)a1[240];
    v128 = *(_DWORD *)sub_1C63DF334((uint64_t)(a1 + 268), &v145);
    LODWORD(v140) = v128;
    if (v128 <= 63)
    {
      if (v128 <= 31)
      {
        switch(v128)
        {
          case 16:
            v129 = (llvm::FixedVectorType *)(*v127 + 1936);
            goto LABEL_204;
          case 8:
            v129 = (llvm::FixedVectorType *)(*v127 + 1912);
            goto LABEL_204;
          case 1:
            v129 = (llvm::FixedVectorType *)(*v127 + 1888);
            goto LABEL_204;
        }
      }
      else if (v128 == 32)
      {
        v129 = (llvm::FixedVectorType *)(*v127 + 1960);
        goto LABEL_204;
      }
    }
    else
    {
      if (v128 == 64)
      {
        v129 = (llvm::FixedVectorType *)(*v127 + 1984);
LABEL_204:
        llvm::FixedVectorType::get(v129, v126);
        v144 = 257;
        v131 = sub_1C4773E38(a1 + 251, 38, v13, v130, (uint64_t)&v140);
        v14 = *a1;
        *(_QWORD *)(*(_QWORD *)*a1 + 80) = v131;
        goto LABEL_22;
      }
      if (v128 == 128)
      {
        v129 = (llvm::FixedVectorType *)(*v127 + 2008);
        goto LABEL_204;
      }
    }
    v132 = sub_1C5270984(*v127 + 2168, &v140);
    v129 = (llvm::FixedVectorType *)*((_QWORD *)v132 + 1);
    if (!v129)
    {
      v129 = (llvm::FixedVectorType *)sub_1C484358C(*v127 + 2040, 24, 3);
      v133 = (int)v140;
      *(_QWORD *)v129 = v127;
      *((_QWORD *)v129 + 2) = 0;
      *((_QWORD *)v129 + 1) = (v133 << 8) | 0xDu;
      *((_QWORD *)v132 + 1) = v129;
    }
    goto LABEL_204;
  }
LABEL_22:
  v23 = *((_DWORD *)a1 + 270);
  if (!v23)
    goto LABEL_163;
  v24 = (llvm::Value **)a1[134];
  v25 = &v24[3 * v23];
  v135 = a2;
  v136 = (uint64_t)(a1 + 226);
  do
  {
    v26 = *v24;
    v27 = (uint64_t)v24[1];
    v139 = *v24;
    if (v27)
    {
      v28 = *((_QWORD *)v26 + 1);
      if (!v28)
        goto LABEL_28;
      while (*(_QWORD *)(v28 + 24) != v27)
      {
        v28 = *(_QWORD *)(v28 + 8);
        if (!v28)
          goto LABEL_28;
      }
    }
    v140 = 0;
    sub_1C61B5A68((uint64_t)(a1 + 10), (uint64_t)v26, &v140);
    v30 = v140[1][10];
    v138 = 0;
    v31 = *((unsigned int *)v24 + 4);
    v32 = *(_QWORD *)a1[259];
    v33 = *(llvm::ConstantInt **)(v32 + 1960);
    v34 = *(unsigned int *)(v32 + 1968);
    LODWORD(v141) = v34 >> 8;
    if (v34 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v140, v31, 0);
    }
    else
    {
      if (v34 <= 0xFF)
        v35 = 0;
      else
        v35 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v34);
      v140 = (uint64_t **)(v35 & v31);
    }
    v36 = llvm::ConstantInt::get(v33, (llvm::LLVMContext *)&v140, v29);
    if (v141 >= 0x41 && v140)
      MEMORY[0x1CAA32F9C](v140, 0x1000C8000313F17);
    v138 = v36;
    v140 = (uint64_t **)&v139;
    v141 = a1;
    v142 = &v138;
    v143 = &v145;
    v38 = *(unsigned __int8 *)(v30 + 16) < 0x1Cu || v30 == 0;
    if (v27)
    {
      if (v38)
      {
        v39 = 0;
        v40 = *(_QWORD ***)(a1[240] + 80);
        if (v40)
          v41 = v40 - 3;
        else
          v41 = 0;
        v42 = v41[6];
        if (v42)
          v43 = v42 - 3;
        else
          v43 = 0;
        a1[257] = v43[5];
        a1[258] = (uint64_t)(v43 + 3);
        v44 = (llvm::Value *)v43[6];
        v146 = v44;
        if (v44)
        {
          llvm::MetadataTracking::track((uint64_t)&v146, (unsigned __int8 *)v44, 2);
          v39 = v146;
        }
        sub_1C4774EF4((uint64_t)(a1 + 251), 0, (uint64_t)v39);
        if (v146)
          llvm::MetadataTracking::untrack((uint64_t)&v146, (unsigned __int8 *)v146);
        v45 = sub_1C60A258C(&v140, (unsigned __int8 *)v30);
        v46 = *(_QWORD ***)(a1[240] + 80);
        if (v46)
          v47 = (llvm::Value *)(v46 - 3);
        else
          v47 = 0;
      }
      else
      {
        if (*(_BYTE *)(v27 + 16) == 83)
        {
          v48 = *(_DWORD *)(v27 + 20);
          v49 = v48 & 0x7FFFFFF;
          if ((v48 & 0x7FFFFFF) != 0)
          {
            v50 = 0;
            v51 = 0;
            do
            {
              v52 = *(_DWORD *)(v27 + 20);
              if ((v52 & 0x40000000) != 0)
                v53 = *(_QWORD *)(v27 - 8);
              else
                v53 = v27 - 32 * (v52 & 0x7FFFFFF);
              if (*(llvm::Value **)(v53 + v50) == v139)
              {
                v54 = *(unsigned int *)(v27 + 60);
                v55 = *(_QWORD *)(*(_QWORD *)(v53 + 32 * v54 + 8 * v51) + 40);
                if (v55)
                  v56 = v55 - 24;
                else
                  v56 = 0;
                if (*(unsigned __int8 *)(v56 + 16) - 29 >= 0xB)
                  v56 = 0;
                if (*(_BYTE *)(v56 + 16) == 38)
                {
                  sub_1C4D8AE2C((uint64_t)(a1 + 251), *(_QWORD *)(v30 + 40), *(_QWORD *)(v30 + 32));
                }
                else
                {
                  if ((v52 & 0x40000000) != 0)
                    v57 = *(_QWORD *)(v27 - 8);
                  else
                    v57 = v27 - 32 * (v52 & 0x7FFFFFF);
                  v58 = 0;
                  v59 = *(_QWORD *)(*(_QWORD *)(v57 + 32 * v54 + 8 * v51) + 40);
                  if (v59)
                    v60 = v59 - 24;
                  else
                    v60 = 0;
                  if (*(unsigned __int8 *)(v60 + 16) - 29 >= 0xB)
                    v60 = 0;
                  a1[257] = *(_QWORD *)(v60 + 40);
                  a1[258] = v60 + 24;
                  v61 = *(llvm::Value **)(v60 + 48);
                  v146 = v61;
                  if (v61)
                  {
                    llvm::MetadataTracking::track((uint64_t)&v146, (unsigned __int8 *)v61, 2);
                    v58 = v146;
                  }
                  sub_1C4774EF4((uint64_t)(a1 + 251), 0, (uint64_t)v58);
                  if (v146)
                    llvm::MetadataTracking::untrack((uint64_t)&v146, (unsigned __int8 *)v146);
                }
                v62 = sub_1C60A258C(&v140, (unsigned __int8 *)v30);
                v63 = *(_DWORD *)(v27 + 20);
                if ((v63 & 0x40000000) != 0)
                  v64 = *(_QWORD *)(v27 - 8);
                else
                  v64 = v27 - 32 * (v63 & 0x7FFFFFF);
                v146 = *(llvm::Value **)(v64 + 32 * *(unsigned int *)(v27 + 60) + 8 * v51);
                sub_1C5ACED14(v136, &v146);
                sub_1C6125834(v27, v51, (uint64_t)v62);
              }
              ++v51;
              v50 += 32;
            }
            while (v49 != v51);
          }
          goto LABEL_28;
        }
        a1[257] = *(_QWORD *)(v27 + 40);
        a1[258] = v27 + 24;
        v65 = *(llvm::Value **)(v27 + 48);
        v146 = v65;
        if (v65)
        {
          llvm::MetadataTracking::track((uint64_t)&v146, (unsigned __int8 *)v65, 2);
          v66 = v146;
        }
        else
        {
          v66 = 0;
        }
        sub_1C4774EF4((uint64_t)(a1 + 251), 0, (uint64_t)v66);
        if (v146)
          llvm::MetadataTracking::untrack((uint64_t)&v146, (unsigned __int8 *)v146);
        v45 = sub_1C60A258C(&v140, (unsigned __int8 *)v30);
        v47 = *(llvm::Value **)(v27 + 40);
      }
      v146 = v47;
      sub_1C5ACED14(v136, &v146);
      llvm::User::replaceUsesOfWith((llvm::User *)v27, v139, (llvm::Value *)v45);
      goto LABEL_28;
    }
    if (v38)
    {
      v67 = 0;
      v68 = *(_QWORD ***)(a1[240] + 80);
      if (v68)
        v69 = v68 - 3;
      else
        v69 = 0;
      v70 = v69[6];
      if (v70)
        v71 = v70 - 3;
      else
        v71 = 0;
      a1[257] = v71[5];
      a1[258] = (uint64_t)(v71 + 3);
      v72 = (llvm::Value *)v71[6];
      v146 = v72;
      if (v72)
      {
        llvm::MetadataTracking::track((uint64_t)&v146, (unsigned __int8 *)v72, 2);
        v67 = v146;
      }
      sub_1C4774EF4((uint64_t)(a1 + 251), 0, (uint64_t)v67);
      if (v146)
        llvm::MetadataTracking::untrack((uint64_t)&v146, (unsigned __int8 *)v146);
    }
    else
    {
      sub_1C4D8AE2C((uint64_t)(a1 + 251), *(_QWORD *)(v30 + 40), *(_QWORD *)(v30 + 32));
    }
    v146 = (llvm::Value *)sub_1C60A258C(&v140, (unsigned __int8 *)v30);
    v137 = *((_QWORD *)v139 + 5);
    sub_1C5ACED14(v136, &v137);
    v73 = (unsigned int *)sub_1C63DFB40((uint64_t)v135, (uint64_t *)&v146);
    v74 = sub_1C63DFC58((uint64_t)v135, (uint64_t)v139);
    sub_1C486AF08(v73, *(_BYTE **)(v74 + 8), (_BYTE *)(*(_QWORD *)(v74 + 8) + 8 * *(unsigned int *)(v74 + 16)));
    v75 = (_QWORD *)sub_1C63DFC58((uint64_t)v135, (uint64_t)v139);
    v76 = (_QWORD *)v135[4];
    if (v76 == v75)
      goto LABEL_159;
    v77 = v135[2].i32[0];
    if (v77)
    {
      v78 = *v135;
      v79 = v77 - 1;
      LODWORD(v80) = ((*v75 >> 4) ^ (*v75 >> 9)) & (v77 - 1);
      v81 = (uint64_t *)(*(_QWORD *)v135 + 16 * v80);
      v82 = *v81;
      if (*v75 == *v81)
      {
LABEL_114:
        *v81 = -8192;
        v135[1] = vadd_s32(v135[1], (int32x2_t)0x1FFFFFFFFLL);
        v76 = (_QWORD *)v135[4];
      }
      else
      {
        v83 = 1;
        while (v82 != -4096)
        {
          v84 = v80 + v83++;
          v80 = v84 & v79;
          v82 = *(_QWORD *)(*(_QWORD *)&v78 + 16 * v80);
          if (*v75 == v82)
          {
            v81 = (uint64_t *)(*(_QWORD *)&v78 + 16 * v80);
            goto LABEL_114;
          }
        }
      }
    }
    v85 = v75 + 5;
    v134 = v75;
    if (v75 + 5 == v76)
    {
      v94 = v75;
      goto LABEL_135;
    }
    v86 = v75;
    do
    {
      v87 = (_QWORD *)v85[1];
      *(v85 - 5) = *v85;
      if (v85 + 3 == v87)
      {
        v88 = (void **)(v85 - 4);
        v90 = v85 + 2;
        v89 = *((unsigned int *)v85 + 4);
        v91 = *((unsigned int *)v85 - 6);
        if (v91 >= v89)
        {
          if ((_DWORD)v89)
            memmove(*v88, v87, 8 * v89);
          goto LABEL_124;
        }
        if (*((_DWORD *)v85 - 5) < v89)
        {
          *((_DWORD *)v85 - 6) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v88, (uint64_t)(v85 - 2), v89, 8);
        }
        else if ((_DWORD)v91)
        {
          memmove(*v88, v87, 8 * v91);
LABEL_122:
          v92 = *v90;
          if (v91 != v92)
            memcpy((void *)(*(v85 - 4) + 8 * v91), (const void *)(v85[1] + 8 * v91), 8 * v92 - 8 * v91);
LABEL_124:
          *((_DWORD *)v85 - 6) = v89;
          goto LABEL_125;
        }
        v91 = 0;
        goto LABEL_122;
      }
      v93 = (_QWORD *)*(v85 - 4);
      if (v85 - 2 != v93)
      {
        free(v93);
        v87 = (_QWORD *)v85[1];
      }
      *(v85 - 4) = v87;
      v90 = v86 + 7;
      *(v85 - 3) = v85[2];
      v85[1] = v85 + 3;
      *((_DWORD *)v85 + 5) = 0;
LABEL_125:
      *v90 = 0;
      v86 += 5;
      v85 += 5;
    }
    while (v85 != v76);
    v76 = (_QWORD *)v135[4];
    v94 = v85 - 5;
LABEL_135:
    if (v76 != v94)
    {
      v95 = v76 - 2;
      do
      {
        v96 = (_QWORD *)*(v95 - 2);
        if (v95 != v96)
          free(v96);
        v97 = v95 - 3;
        v95 -= 5;
      }
      while (v97 != v94);
    }
    v135[4] = (int32x2_t)v94;
    if (v94 != v134)
    {
      v98 = v135[2].u32[0];
      v99 = *(_QWORD *)v135 + 16 * v98;
      if (v135[1].i32[0])
      {
        if (v135[2].i32[0])
        {
          v100 = 16 * v98;
          v101 = (uint64_t)*v135;
          while ((*(_QWORD *)v101 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v101 += 16;
            v100 -= 16;
            if (!v100)
              goto LABEL_146;
          }
        }
        else
        {
          v101 = (uint64_t)*v135;
        }
      }
      else
      {
LABEL_146:
        v101 = *(_QWORD *)v135 + 16 * v98;
      }
      v102 = *(_QWORD *)v135 + 16 * v98;
      if (v101 != v102)
      {
        v103 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v134 - *(_QWORD *)&v135[3]) >> 3);
        do
        {
          v104 = *(unsigned int *)(v101 + 8);
          if (v103 < v104)
            *(_DWORD *)(v101 + 8) = v104 - 1;
          v105 = v101 + 16;
          v101 = v99;
          if (v105 != v99)
          {
            v101 = v105;
            while ((*(_QWORD *)v101 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v101 += 16;
              if (v101 == v99)
              {
                v101 = v99;
                break;
              }
            }
          }
        }
        while (v101 != v102);
      }
    }
LABEL_159:
    llvm::Value::doRAUW(v139, v146, (llvm::Value *)1);
LABEL_28:
    v24 += 3;
  }
  while (v24 != v25);
  v14 = *a1;
LABEL_163:
  v106 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v106)
  {
    v107 = v14 + 8 * v106;
    do
    {
      v108 = *(_QWORD *)v14;
      if (*(_DWORD *)(*(_QWORD *)v14 + 88) != 2)
      {
        v109 = *(unsigned int *)(v108 + 8);
        if ((_DWORD)v109)
        {
          v110 = 0;
          v111 = 8 * v109;
          do
          {
            v146 = *(llvm::Value **)(*(_QWORD *)v108 + v110);
            sub_1C61DB390((uint64_t)(a1 + 131), &v146, (uint64_t)&v140);
            v110 += 8;
          }
          while (v111 != v110);
        }
      }
      v14 += 8;
    }
    while (v14 != v107);
  }
  a1[257] = 0;
  a1[258] = 0;
  sub_1C5B12F9C(a1 + 19);
  return *(_QWORD **)(*(_QWORD *)*a1 + 80);
}

void llvm::slpvectorizer::BoUpSLP::scheduleBlock(llvm::slpvectorizer::BoUpSLP *this, llvm::Instruction **a2)
{
  llvm::Instruction *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  uint64_t i;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t *j;
  llvm::Instruction *v16;
  uint64_t v17;
  BOOL v18;
  llvm::Instruction *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  _QWORD v55[3];
  int v56;
  uint64_t **v57;
  uint64_t *v58;
  uint64_t v59;

  if (a2[17])
  {
    llvm::slpvectorizer::BoUpSLP::BlockScheduling::resetSchedule((llvm::slpvectorizer::BoUpSLP::BlockScheduling *)a2);
    v58 = 0;
    v59 = 0;
    v57 = &v58;
    v56 = 0;
    v4 = a2[17];
    if (v4 != a2[18])
    {
      do
      {
        v55[0] = this;
        v55[1] = &v56;
        v55[2] = a2;
        sub_1C60A4238((uint64_t)a2, (uint64_t)v4, (void (*)(uint64_t, uint64_t))sub_1C60B516C, (uint64_t)v55);
        v5 = *((_QWORD *)v4 + 4);
        if (v5)
          v6 = v5 == *((_QWORD *)v4 + 5) + 40;
        else
          v6 = 1;
        if (v6)
          v4 = 0;
        else
          v4 = (llvm::Instruction *)(v5 - 24);
      }
      while (v4 != a2[18]);
      if (a2[17] != v4)
      {
        v4 = a2[17];
        do
        {
          v55[0] = &v57;
          sub_1C60A4238((uint64_t)a2, (uint64_t)v4, (void (*)(uint64_t, uint64_t))sub_1C60B5204, (uint64_t)v55);
          v7 = *((_QWORD *)v4 + 4);
          if (v7)
            v8 = v7 == *((_QWORD *)v4 + 5) + 40;
          else
            v8 = 1;
          if (v8)
            v4 = 0;
          else
            v4 = (llvm::Instruction *)(v7 - 24);
        }
        while (v4 != a2[18]);
      }
    }
    for (i = v59; v59; i = v59)
    {
      v10 = (uint64_t *)v57;
      v11 = v57[1];
      v12 = (uint64_t)v57;
      if (v11)
      {
        do
        {
          v13 = (uint64_t **)v11;
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v13 = *(uint64_t ***)(v12 + 16);
          v6 = *v13 == (uint64_t *)v12;
          v12 = (uint64_t)v13;
        }
        while (!v6);
      }
      v14 = v57[4];
      v57 = v13;
      v59 = i - 1;
      sub_1C485B6E0(v58, v10);
      operator delete(v10);
      for (j = v14; j; v4 = v16)
      {
        v16 = (llvm::Instruction *)*j;
        v17 = *(_QWORD *)(*j + 32);
        if (v17)
          v18 = v17 == *(_QWORD *)(*j + 40) + 40;
        else
          v18 = 1;
        if (v18)
          v19 = 0;
        else
          v19 = (llvm::Instruction *)(v17 - 24);
        if (v19 != v4)
          llvm::Instruction::moveBefore((llvm::Instruction *)*j, v4);
        j = (uint64_t *)j[4];
      }
      *((_BYTE *)v14 + 160) = 1;
      do
      {
        v20 = *v14;
        if (*v14 != v14[1])
          goto LABEL_85;
        v21 = v14[2];
        if (v21)
        {
          v22 = *(_QWORD **)v21;
          v23 = *(unsigned int *)(v21 + 8);
          if ((_DWORD)v23)
          {
            v24 = 8 * v23;
            v25 = *(_QWORD **)v21;
            v26 = &v22[v23];
            while (*v25 != v20)
            {
              ++v25;
              v24 -= 8;
              if (!v24)
              {
                v25 = v26;
                break;
              }
            }
          }
          else
          {
            v25 = *(_QWORD **)v21;
          }
          v30 = *(unsigned int *)(v21 + 216);
          if ((_DWORD)v30)
          {
            v31 = 0;
            v32 = (int)(v25 - v22);
            v33 = 80 * v30;
            do
            {
              v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 208) + v31) + 8 * v32);
              if (v34)
                v35 = *(unsigned __int8 *)(v34 + 16) >= 0x1Cu;
              else
                v35 = 0;
              if (v35)
              {
                v55[0] = &v57;
                sub_1C60A4238((uint64_t)a2, v34, (void (*)(uint64_t, uint64_t))sub_1C60B5314, (uint64_t)v55);
              }
              v31 += 80;
            }
            while (v33 != v31);
          }
          goto LABEL_66;
        }
        v27 = *(_DWORD *)(v20 + 20);
        if ((v27 & 0x40000000) != 0)
        {
          v29 = *(uint64_t **)(v20 - 8);
          v28 = v27 & 0x7FFFFFF;
          if (v28)
          {
LABEL_58:
            v36 = 32 * v28;
            do
            {
              v37 = *v29;
              if (*v29)
                v38 = *(unsigned __int8 *)(*v29 + 16) >= 0x1Cu;
              else
                v38 = 0;
              if (v38)
              {
                v55[0] = &v57;
                sub_1C60A4238((uint64_t)a2, v37, (void (*)(uint64_t, uint64_t))sub_1C60B5314, (uint64_t)v55);
              }
              v29 += 4;
              v36 -= 32;
            }
            while (v36);
          }
        }
        else
        {
          v28 = v27 & 0x7FFFFFF;
          v29 = (uint64_t *)(v20 - 32 * v28);
          if (v28)
            goto LABEL_58;
        }
LABEL_66:
        v39 = *((unsigned int *)v14 + 14);
        if ((_DWORD)v39)
        {
          v40 = v14[6];
          v41 = v40 + 8 * v39;
          do
          {
            v42 = *(_QWORD *)v40;
            if (*(_DWORD *)(*(_QWORD *)v40 + 152) != -1)
            {
              --*(_DWORD *)(v42 + 156);
              v43 = *(_QWORD *)(v42 + 24);
              if (v43)
              {
                v44 = 0;
                v45 = v43;
                while (1)
                {
                  v46 = *(_DWORD *)(v45 + 156);
                  if (v46 == -1)
                    break;
                  v44 += v46;
                  v45 = *(_QWORD *)(v45 + 32);
                  if (!v45)
                  {
                    if (v44)
                      break;
                    goto LABEL_74;
                  }
                }
              }
              else
              {
LABEL_74:
                sub_1C60B5254((uint64_t *)&v57, v43);
              }
            }
            v40 += 8;
          }
          while (v40 != v41);
        }
        v47 = *((unsigned int *)v14 + 26);
        if ((_DWORD)v47)
        {
          v48 = v14[12];
          v49 = v48 + 8 * v47;
          do
          {
            v50 = *(_QWORD *)v48;
            *(_DWORD *)(v50 + 156) = *(_DWORD *)(*(_QWORD *)v48 + 156) - 1;
            v51 = *(_QWORD *)(v50 + 24);
            if (v51)
            {
              v52 = 0;
              v53 = v51;
              while (1)
              {
                v54 = *(_DWORD *)(v53 + 156);
                if (v54 == -1)
                  break;
                v52 += v54;
                v53 = *(_QWORD *)(v53 + 32);
                if (!v53)
                {
                  if (v52)
                    break;
                  goto LABEL_83;
                }
              }
            }
            else
            {
LABEL_83:
              sub_1C60B5254((uint64_t *)&v57, v51);
            }
            v48 += 8;
          }
          while (v48 != v49);
        }
LABEL_85:
        v14 = (uint64_t *)v14[4];
      }
      while (v14);
    }
    a2[17] = 0;
    sub_1C49F3440(v58);
  }
}

unsigned __int8 *sub_1C60A258C(uint64_t ***a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  uint64_t *v3;
  uint64_t **v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _BYTE v20[32];
  __int16 v21;

  v2 = a2;
  v3 = **a1;
  if (*v3 == *(_QWORD *)a2)
    return v2;
  v5 = a1[1];
  if (*((_BYTE *)v3 + 16) == 89)
  {
    a2 = (unsigned __int8 *)*(v3 - 8);
    v6 = *(v3 - 4);
  }
  else
  {
    v6 = (uint64_t)*a1[2];
  }
  v21 = 257;
  v2 = sub_1C4772EE0((uint64_t *)v5 + 251, (uint64_t)a2, v6, (uint64_t)v20);
  v7 = (uint64_t *)a1[3];
  v8 = v5[268];
  v9 = *((unsigned int *)v5 + 540);
  if ((_DWORD)v9)
  {
    LODWORD(v10) = ((*v7 >> 4) ^ (*v7 >> 9)) & (v9 - 1);
    v11 = &v8[2 * v10];
    v12 = *v11;
    if (*v7 == *v11)
      goto LABEL_12;
    v13 = 1;
    while (v12 != -4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v12 = v8[2 * v10];
      if (*v7 == v12)
      {
        v11 = &v8[2 * v10];
        goto LABEL_12;
      }
    }
  }
  v11 = &v8[2 * v9];
LABEL_12:
  if (v11 != &v8[2 * v9])
  {
    v16 = sub_1C63DF334((uint64_t)(v5 + 268), v7);
    v17 = ***a1;
    if (*(_BYTE *)(v16 + 8))
    {
      v21 = 257;
      v18 = (uint64_t *)(v5 + 251);
      v19 = 40;
    }
    else
    {
      v21 = 257;
      v18 = (uint64_t *)(v5 + 251);
      v19 = 39;
    }
    return sub_1C4773E38(v18, v19, v2, v17, (uint64_t)v20);
  }
  return v2;
}

void llvm::slpvectorizer::BoUpSLP::optimizeGatherSequence(llvm::slpvectorizer::BoUpSLP *this)
{
  void **v2;
  void **v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::Value **v25;
  uint64_t v26;
  llvm::Value *v27;
  int v28;
  int v29;
  BOOL v30;
  llvm::Value *v31;
  llvm::Value *v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  _QWORD *LoopPredecessor;
  _QWORD *v55;
  _QWORD *v56;
  int v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  llvm::Instruction *v66;
  unsigned __int8 *v67;
  int v68;
  uint64_t *v69;
  uint64_t *v70;
  char *v71;
  char *v72;
  char v73;
  uint64_t *v74;
  llvm::Value *v75;
  _QWORD v76[3];
  void *__src;
  uint64_t v78;
  _BYTE v79[48];
  void *v80;
  uint64_t v81;
  _BYTE v82[128];
  uint64_t *v83;
  uint64_t v84;
  _QWORD v85[10];

  v85[8] = *MEMORY[0x1E0C80C00];
  v2 = (void **)*((_QWORD *)this + 223);
  v3 = (void **)*((_QWORD *)this + 224);
  if (v2 != v3)
  {
    v42 = (uint64_t *)((char *)this + 1048);
    v72 = (char *)this + 1808;
    v74 = (uint64_t *)((char *)this + 1048);
    while (1)
    {
      v43 = *v2;
      v80 = *v2;
      v83 = 0;
      if ((sub_1C61DB414(v42, &v80, &v83) & 1) == 0)
      {
        v44 = (uint64_t *)*((_QWORD *)this + 244);
        v45 = *((_DWORD *)v44 + 4);
        if (v45)
        {
          v46 = v43[5];
          v47 = *v44;
          v48 = v45 - 1;
          v49 = ((v46 >> 4) ^ (v46 >> 9)) & (v45 - 1);
          v50 = *(_QWORD *)(v47 + 16 * v49);
          if (v46 != v50)
          {
            v51 = 1;
            while (v50 != -4096)
            {
              v52 = v49 + v51++;
              v49 = v52 & v48;
              v50 = *(_QWORD *)(v47 + 16 * v49);
              if (v46 == v50)
                goto LABEL_92;
            }
            goto LABEL_85;
          }
LABEL_92:
          v53 = *(_QWORD *)(v47 + 16 * v49 + 8);
          if (v53)
            break;
        }
      }
LABEL_85:
      if (++v2 == v3)
        goto LABEL_2;
    }
    v80 = 0;
    LoopPredecessor = (_QWORD *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(v53);
    if (!LoopPredecessor)
      goto LABEL_125;
    v55 = (_QWORD *)LoopPredecessor[5];
    if (v55 == LoopPredecessor + 5)
      goto LABEL_125;
    if (v55)
      v56 = v55 - 3;
    else
      v56 = 0;
    if (*((_BYTE *)v56 + 16) != 30)
    {
      switch(*((_BYTE *)v56 + 16))
      {
        case 0x1E:
          __break(1u);
          return;
        case 0x1F:
          v68 = (*((_DWORD *)v56 + 5) >> 1) & 0x3FFFFFF;
          goto LABEL_128;
        case 0x20:
          v68 = (*((_DWORD *)v56 + 5) & 0x7FFFFFF) - 1;
          goto LABEL_128;
        case 0x27:
          v68 = *((_DWORD *)v56 + 20) + 1;
LABEL_128:
          if (v68 != 1)
            goto LABEL_125;
          goto LABEL_100;
        default:
          goto LABEL_125;
      }
    }
    if ((*((_DWORD *)v56 + 5) & 0x7FFFFFF) == 3)
    {
LABEL_125:
      v42 = v74;
      goto LABEL_85;
    }
LABEL_100:
    v80 = LoopPredecessor;
    v57 = *((_DWORD *)v43 + 5);
    if ((v57 & 0x40000000) != 0)
    {
      v59 = (char *)*(v43 - 1);
      v58 = v57 & 0x7FFFFFF;
      if (!v58)
      {
LABEL_116:
        v65 = (_QWORD *)LoopPredecessor[5];
        if (v65 == LoopPredecessor + 5)
        {
          v66 = 0;
        }
        else
        {
          if (v65)
            v67 = (unsigned __int8 *)(v65 - 3);
          else
            v67 = 0;
          if (v67[16] - 29 >= 0xB)
            v66 = 0;
          else
            v66 = (llvm::Instruction *)v67;
        }
        llvm::Instruction::moveBefore((llvm::Instruction *)v43, v66);
        sub_1C5ACED14((uint64_t)v72, &v80);
        goto LABEL_125;
      }
    }
    else
    {
      v58 = v57 & 0x7FFFFFF;
      v59 = (char *)&v43[-4 * v58];
      if (!v58)
        goto LABEL_116;
    }
    v60 = 32 * v58;
    while (1)
    {
      if (*(_QWORD *)v59 && *(unsigned __int8 *)(*(_QWORD *)v59 + 16) >= 0x1Cu)
      {
        v62 = sub_1C477672C(v53 + 56, *(_QWORD *)(*(_QWORD *)v59 + 40));
        v63 = *(_QWORD *)(v53 + 64);
        v64 = v63 == *(_QWORD *)(v53 + 56) ? 76 : 72;
        if (v62 != (_QWORD *)(v63 + 8 * *(unsigned int *)(v53 + v64)))
          goto LABEL_125;
      }
      v59 += 32;
      v60 -= 32;
      if (!v60)
      {
        LoopPredecessor = v80;
        goto LABEL_116;
      }
    }
  }
LABEL_2:
  v83 = v85;
  v84 = 0x800000000;
  v4 = (char *)*((_QWORD *)this + 230);
  v5 = (char *)*((_QWORD *)this + 229);
  if ((unint64_t)(v4 - v5) >= 0x41)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, (uint64_t)v85, (v4 - v5) >> 3, 8);
    v5 = (char *)*((_QWORD *)this + 229);
    v4 = (char *)*((_QWORD *)this + 230);
  }
  v69 = (uint64_t *)((char *)this + 1760);
  while (v5 != v4)
  {
    v6 = *((_QWORD *)this + 245);
    v7 = *(_QWORD *)(v6 + 24);
    v8 = *(unsigned int *)(v6 + 40);
    if (!(_DWORD)v8)
      goto LABEL_12;
    LODWORD(v9) = ((*(_QWORD *)v5 >> 4) ^ (*(_QWORD *)v5 >> 9)) & (v8 - 1);
    v10 = (uint64_t *)(v7 + 16 * v9);
    v11 = *v10;
    if (*(_QWORD *)v5 != *v10)
    {
      v12 = 1;
      while (v11 != -4096)
      {
        v13 = v9 + v12++;
        v9 = v13 & (v8 - 1);
        v11 = *(_QWORD *)(v7 + 16 * v9);
        if (*(_QWORD *)v5 == v11)
        {
          v10 = (uint64_t *)(v7 + 16 * v9);
          goto LABEL_13;
        }
      }
LABEL_12:
      v10 = (uint64_t *)(v7 + 16 * v8);
    }
LABEL_13:
    if (v10 != (uint64_t *)(v7 + 16 * v8))
    {
      v14 = v10[1];
      if (v14)
      {
        v15 = v84;
        if (v84 >= (unint64_t)HIDWORD(v84))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, (uint64_t)v85, v84 + 1, 8);
          v15 = v84;
        }
        v83[v15] = v14;
        LODWORD(v84) = v84 + 1;
      }
    }
    v5 += 8;
  }
  v16 = 126 - 2 * __clz(v84);
  if ((_DWORD)v84)
    v17 = v16;
  else
    v17 = 0;
  sub_1C60B4810(v83, &v83[v84], v17, 1);
  v80 = v82;
  v81 = 0x1000000000;
  if ((_DWORD)v84)
  {
    v18 = v83;
    v70 = &v83[v84];
    v19 = (uint64_t *)((char *)this + 1048);
    v71 = (char *)this + 1048;
    while (1)
    {
      v20 = *(_QWORD *)*v18;
      v21 = v20 + 40;
      v22 = *(_QWORD *)(v20 + 48);
      if (v22 != v20 + 40)
        break;
LABEL_77:
      if (++v18 == v70)
        goto LABEL_78;
    }
    while (1)
    {
      v23 = *(_QWORD *)(v22 + 8);
      if (v22)
        v24 = v22 - 24;
      else
        v24 = 0;
      __src = (void *)v24;
      v76[0] = 0;
      if ((sub_1C61DB414(v19, &__src, v76) & 1) != 0)
        goto LABEL_70;
      if (*(unsigned __int8 *)(v24 + 16) - 89 >= 3)
      {
        __src = (void *)v24;
        v76[0] = 0;
        if (sub_1C61DB414(v69, &__src, v76))
        {
          v39 = v76[0];
          v40 = *((_QWORD *)this + 220);
          v41 = *((unsigned int *)this + 444);
        }
        else
        {
          v40 = *((_QWORD *)this + 220);
          v41 = *((unsigned int *)this + 444);
          v39 = v40 + 8 * v41;
        }
        if (v39 == v40 + 8 * v41)
          goto LABEL_70;
      }
      if ((_DWORD)v81)
        break;
      v38 = 0;
LABEL_67:
      if (v38 >= HIDWORD(v81))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, (uint64_t)v82, v38 + 1, 8);
        v38 = v81;
      }
      *((_QWORD *)v80 + v38) = v24;
      LODWORD(v81) = v81 + 1;
LABEL_70:
      v22 = v23;
      if (v23 == v21)
        goto LABEL_77;
    }
    v73 = 0;
    v25 = (llvm::Value **)v80;
    v26 = 8 * v81 - 8;
    while (2)
    {
      __src = v79;
      v78 = 0xC00000000;
      if (sub_1C60A2E64((uint64_t)this, (llvm::Instruction *)v24, *v25, (uint64_t)&__src)
        && llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*((_QWORD *)this + 245), *((_QWORD *)*v25 + 5), *(_QWORD *)(v24 + 40)))
      {
        v73 = 1;
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v24, *v25, (llvm::Value *)1);
        v75 = (llvm::Value *)v24;
        sub_1C61DB390((uint64_t)v71, &v75, (uint64_t)v76);
        v31 = *v25;
        if (!*v25)
          goto LABEL_63;
        v28 = 1;
        if (*((_BYTE *)v31 + 16) == 91)
        {
          if ((_DWORD)v78)
            llvm::ShuffleVectorInst::setShuffleMask((uint64_t)v31, __src, v78, v30);
          v73 = 1;
        }
      }
      else
      {
        if (*(_BYTE *)(v24 + 16) != 91)
          goto LABEL_36;
        v27 = *v25;
        if (*((_BYTE *)*v25 + 16) != 91)
          goto LABEL_36;
        v75 = 0;
        v76[0] = v27;
        if (sub_1C61DB414(v69, v76, &v75))
        {
          v32 = v75;
          v33 = *((_QWORD *)this + 220);
          v34 = *((unsigned int *)this + 444);
        }
        else
        {
          v33 = *((_QWORD *)this + 220);
          v34 = *((unsigned int *)this + 444);
          v32 = (llvm::Value *)(v33 + 8 * v34);
        }
        if (v32 != (llvm::Value *)(v33 + 8 * v34)
          && sub_1C60A2E64((uint64_t)this, *v25, (llvm::Instruction *)v24, (uint64_t)&__src)
          && llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*((_QWORD *)this + 245), *(_QWORD *)(v24 + 40), *((_QWORD *)*v25 + 5)))
        {
          llvm::Instruction::moveAfter((llvm::Instruction *)v24, *v25);
          llvm::Value::doRAUW(*v25, (llvm::Value *)v24, (llvm::Value *)1);
          v75 = *v25;
          sub_1C61DB390((uint64_t)v71, &v75, (uint64_t)v76);
          v36 = *(unsigned __int8 *)(v24 + 16);
          if (v36 == 91)
            v37 = v24;
          else
            v37 = 0;
          if (v22 && v36 == 91 && (_DWORD)v78)
            llvm::ShuffleVectorInst::setShuffleMask(v37, __src, v78, v35);
          *v25 = (llvm::Value *)v24;
          v73 = 1;
LABEL_63:
          v28 = 1;
        }
        else
        {
LABEL_36:
          v28 = 0;
        }
      }
      if (__src != v79)
        free(__src);
      ++v25;
      if (v26)
        v29 = v28;
      else
        v29 = 1;
      v26 -= 8;
      if (v29 == 1)
      {
        v19 = (uint64_t *)((char *)this + 1048);
        if ((v73 & 1) == 0)
        {
          v38 = v81;
          goto LABEL_67;
        }
        goto LABEL_70;
      }
      continue;
    }
  }
LABEL_78:
  sub_1C4DFC0E4((_DWORD *)this + 452);
  *((_QWORD *)this + 230) = *((_QWORD *)this + 229);
  sub_1C619D588(v69);
  *((_QWORD *)this + 224) = *((_QWORD *)this + 223);
  if (v80 != v82)
    free(v80);
  if (v83 != v85)
    free(v83);
}

uint64_t sub_1C60A2E64(uint64_t a1, llvm::Instruction *this, llvm::Instruction *a3, uint64_t a4)
{
  uint64_t result;
  int v7;
  int v8;
  llvm::Instruction *v9;
  llvm::Instruction *v10;
  uint64_t v13;
  char v14;
  char v15;
  const void *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int *v23;
  int *v24;
  int v25;
  int v26;
  int v27;
  BOOL v28;
  int v30;
  _QWORD *v31;
  double v32;
  uint64_t v33;
  const void *v34;

  if (*(_QWORD *)this != *(_QWORD *)a3)
    return 0;
  v7 = *((unsigned __int8 *)this + 16);
  v8 = *((unsigned __int8 *)a3 + 16);
  if (v8 == 91)
    v9 = a3;
  else
    v9 = 0;
  if (v7 == 91)
    v10 = this;
  else
    v10 = 0;
  if (v7 == 91 && v8 == 91)
  {
    if (llvm::Instruction::isIdenticalToWhenDefined(v10, v9)
      && (*((unsigned __int8 *)v9 + 17) ^ *((unsigned __int8 *)v10 + 17)) < 2)
    {
      return 1;
    }
    v13 = 0;
    v14 = 1;
    do
    {
      v15 = v14;
      if (*((_QWORD *)v10 + 4 * v13 - 8) != *((_QWORD *)v9 + 4 * v13 - 8))
        return 0;
      v14 = 0;
      v13 = 1;
    }
    while ((v15 & 1) != 0);
    v16 = (const void *)*((_QWORD *)v9 + 8);
    v17 = *((unsigned int *)v9 + 18);
    *(_DWORD *)(a4 + 8) = 0;
    if (v17 > *(_DWORD *)(a4 + 12))
    {
      v34 = v16;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v17, 4);
      v16 = v34;
      v18 = *(unsigned int *)(a4 + 8);
    }
    else
    {
      if (!(_DWORD)v17)
      {
        v19 = 0;
LABEL_24:
        v20 = (v19 + v17);
        *(_DWORD *)(a4 + 8) = v20;
        v21 = *((unsigned int *)v10 + 18);
        if ((int)v20 < 1)
        {
          v22 = 0;
LABEL_42:
          if (v21 - (unint64_t)v22 >= 2)
          {
            v30 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 1936) + 968))(**(_QWORD **)(a1 + 1936), *(_QWORD *)v10);
            v31 = *(_QWORD **)(a1 + 1936);
            v32 = llvm::FixedVectorType::get(*(llvm::FixedVectorType **)(*(_QWORD *)v10 + 24), (llvm::Type *)(v21 - v22));
            return v30 == (*(unsigned int (**)(_QWORD, uint64_t, double))(*(_QWORD *)*v31 + 968))(*v31, v33, v32);
          }
        }
        else
        {
          v22 = 0;
          v23 = (int *)*((_QWORD *)v10 + 8);
          v24 = *(int **)a4;
          while (1)
          {
            v26 = *v23++;
            v25 = v26;
            if (v26 == -1)
              ++v22;
            else
              v22 = 0;
            v27 = *v24;
            v28 = *v24 == -1 || v25 == -1;
            if (!v28 && v27 != v25)
              break;
            if (v27 == -1)
              *v24 = v25;
            ++v24;
            if (!--v20)
              goto LABEL_42;
          }
        }
        return 0;
      }
      v18 = 0;
    }
    memcpy((void *)(*(_QWORD *)a4 + 4 * v18), v16, 4 * v17);
    v19 = *(_DWORD *)(a4 + 8);
    goto LABEL_24;
  }
  result = llvm::Instruction::isIdenticalToWhenDefined(this, a3);
  if ((_DWORD)result)
    return (*((unsigned __int8 *)a3 + 17) ^ *((unsigned __int8 *)this + 17)) < 2;
  return result;
}

uint64_t llvm::slpvectorizer::BoUpSLP::BlockScheduling::buildBundle(uint64_t a1, const llvm::Instruction *a2, uint64_t a3)
{
  llvm **v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;

  if (!a3)
    return 0;
  v3 = (llvm **)a2;
  v5 = 0;
  v6 = 0;
  v7 = 8 * a3;
  do
  {
    v8 = *v3;
    if (!sub_1C60AC688(*v3, a2) || (sub_1C609E234((uint64_t)v8) & 1) == 0)
    {
      if (v8)
        v9 = *((unsigned __int8 *)v8 + 16) >= 0x1Cu;
      else
        v9 = 0;
      if (v9)
        v10 = sub_1C63DFCC0(a1, (uint64_t)v8);
      else
        v10 = 0;
      v11 = v10;
      if (v6)
      {
        *(_QWORD *)(v6 + 32) = v10;
        v11 = v5;
      }
      *(_QWORD *)(v10 + 24) = v11;
      v5 = v11;
      v6 = v10;
    }
    ++v3;
    v7 -= 8;
  }
  while (v7);
  return v5;
}

uint64_t llvm::slpvectorizer::BoUpSLP::BlockScheduling::allocateScheduleDataChunks(llvm::slpvectorizer::BoUpSLP::BlockScheduling *this)
{
  int v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *((_DWORD *)this + 9);
  v3 = *((int *)this + 8);
  if (v2 >= (int)v3)
  {
    is_mul_ok(v3, 0xA8uLL);
    v5 = (_QWORD *)operator new[]();
    *v5 = 168;
    v5[1] = v3;
    v6 = v5 + 2;
    if ((_DWORD)v3)
    {
      v7 = v5 + 2;
      do
      {
        v7[20] = 0;
        *((_OWORD *)v7 + 8) = 0uLL;
        *((_OWORD *)v7 + 9) = 0uLL;
        *((_OWORD *)v7 + 5) = 0uLL;
        *((_OWORD *)v7 + 6) = 0uLL;
        *((_OWORD *)v7 + 2) = 0uLL;
        *((_OWORD *)v7 + 3) = 0uLL;
        *(_OWORD *)v7 = 0uLL;
        *((_OWORD *)v7 + 1) = 0uLL;
        *((_OWORD *)v7 + 7) = 0uLL;
        *((_OWORD *)v7 + 4) = 0uLL;
        v7[6] = v7 + 8;
        *((_DWORD *)v7 + 15) = 4;
        v7[12] = v7 + 14;
        *((_DWORD *)v7 + 27) = 4;
        v7[19] = -1;
        v7 += 21;
      }
      while (v7 != &v6[21 * (int)v3]);
    }
    v9 = (_QWORD *)*((_QWORD *)this + 2);
    v8 = *((_QWORD *)this + 3);
    if ((unint64_t)v9 >= v8)
    {
      v11 = (_QWORD *)*((_QWORD *)this + 1);
      v12 = v9 - v11;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61)
        abort();
      v14 = v8 - (_QWORD)v11;
      if (v14 >> 2 > v13)
        v13 = v14 >> 2;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        if (v15 >> 61)
          sub_1C4764EE4();
        v16 = (char *)operator new(8 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = &v16[8 * v12];
      v18 = &v16[8 * v15];
      *(_QWORD *)v17 = v6;
      v4 = v17 + 8;
      if (v9 == v11)
      {
        *((_QWORD *)this + 1) = v17;
        *((_QWORD *)this + 2) = v4;
        *((_QWORD *)this + 3) = v18;
      }
      else
      {
        do
        {
          v19 = *--v9;
          *v9 = 0;
          *((_QWORD *)v17 - 1) = v19;
          v17 -= 8;
        }
        while (v9 != v11);
        v9 = (_QWORD *)*((_QWORD *)this + 1);
        v20 = (_QWORD *)*((_QWORD *)this + 2);
        *((_QWORD *)this + 1) = v17;
        *((_QWORD *)this + 2) = v4;
        *((_QWORD *)this + 3) = v18;
        while (v20 != v9)
        {
          v22 = *--v20;
          v21 = v22;
          *v20 = 0;
          if (v22)
            sub_1C60B50E0(v21);
        }
      }
      if (v9)
        operator delete(v9);
      v2 = 0;
      *((_QWORD *)this + 2) = v4;
    }
    else
    {
      v2 = 0;
      *v9 = v6;
      v10 = v9 + 1;
      *((_QWORD *)this + 2) = v10;
      v4 = v10;
    }
  }
  else
  {
    v4 = (_QWORD *)*((_QWORD *)this + 2);
  }
  *((_DWORD *)this + 9) = v2 + 1;
  return *(v4 - 1) + 168 * v2;
}

uint64_t llvm::slpvectorizer::BoUpSLP::BlockScheduling::initScheduleData(uint64_t result, const llvm::Instruction *a2, const llvm::Instruction *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t ScheduleDataChunks;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  int v30;
  uint64_t v32;
  uint64_t v33;

  v7 = result;
  v32 = (uint64_t)a2;
  if (a2 != a3)
  {
    v9 = (uint64_t)a2;
    do
    {
      if (sub_1C60AC688((llvm *)v9, a2))
      {
        result = sub_1C609E234(v9);
        if ((result & 1) != 0)
          goto LABEL_5;
      }
      v33 = 0;
      result = sub_1C6144BDC(*(_QWORD *)(v7 + 40), *(_DWORD *)(v7 + 56), v9, &v33);
      if ((result & 1) == 0 || (ScheduleDataChunks = *(_QWORD *)(v33 + 8)) == 0)
      {
        ScheduleDataChunks = llvm::slpvectorizer::BoUpSLP::BlockScheduling::allocateScheduleDataChunks((llvm::slpvectorizer::BoUpSLP::BlockScheduling *)v7);
        result = (uint64_t)sub_1C6180A54(v7 + 40, &v32);
        *(_QWORD *)(result + 8) = ScheduleDataChunks;
        *(_QWORD *)ScheduleDataChunks = v9;
      }
      v13 = *(_DWORD *)(v7 + 180);
      *(_BYTE *)(ScheduleDataChunks + 160) = 0;
      *(_QWORD *)(ScheduleDataChunks + 32) = 0;
      *(_QWORD *)(ScheduleDataChunks + 40) = 0;
      *(_QWORD *)(ScheduleDataChunks + 16) = 0;
      *(_QWORD *)(ScheduleDataChunks + 24) = ScheduleDataChunks;
      *(_DWORD *)(ScheduleDataChunks + 144) = v13;
      *(_QWORD *)(ScheduleDataChunks + 152) = -1;
      *(_DWORD *)(ScheduleDataChunks + 56) = 0;
      *(_DWORD *)(ScheduleDataChunks + 104) = 0;
      *(_QWORD *)(ScheduleDataChunks + 8) = v9;
      v14 = *(unsigned __int8 *)(v9 + 16);
      v15 = (v14 - 33);
      if (v15 <= 0x37)
      {
        if (((1 << (v14 - 33)) & 0x8000000000041) != 0)
        {
          v17 = *(_QWORD *)(v9 + 64);
          if (!v17 || (*(_BYTE *)(v17 + 20) & 4) == 0 && (*(_BYTE *)(v17 + 17) & 0x10) == 0)
          {
            LODWORD(v33) = 7;
            result = sub_1C53E4BBC(v9, (__int32 *)&v33, 1uLL);
            if ((result & 1) != 0)
            {
              v22 = *(_QWORD *)(v9 - 32);
              if (!v22
                || *(_BYTE *)(v22 + 16)
                || *(_QWORD *)(v22 + 24) != *(_QWORD *)(v9 + 72)
                || *(_DWORD *)(v22 + 36) != 7)
              {
                goto LABEL_41;
              }
            }
            result = llvm::CallBase::hasFnAttrOnCalledFunction(v9, 66);
            if ((result & 1) == 0)
            {
              result = llvm::CallBase::hasFnAttrOnCalledFunction(v9, 44);
              if (!(_DWORD)result)
                goto LABEL_41;
            }
          }
          goto LABEL_30;
        }
        if (((1 << (v14 - 33)) & 0x808001C8000010) != 0)
          goto LABEL_42;
        if (v15 == 28)
        {
          if ((*(_WORD *)(v9 + 18) & 0x301) != 0)
            goto LABEL_41;
LABEL_30:
          v14 = *(unsigned __int8 *)(v9 + 16);
        }
      }
      v16 = (v14 - 33);
      if (v16 <= 0x37)
      {
        if (((1 << v16) & 0x8000000000041) != 0)
        {
          v18 = *(_QWORD *)(v9 + 64);
          if (!v18 || (*(_BYTE *)(v18 + 17) & 0x30) == 0)
          {
            v19 = *(_DWORD *)(v9 + 20);
            if (v19 < 0)
            {
              v23 = v9 - 32 * (v19 & 0x7FFFFFF);
              v26 = *(_QWORD *)(v23 - 8);
              v24 = v23 - 8;
              v25 = v26;
              if (v26)
              {
                v27 = -v25;
                while (1)
                {
                  v28 = *(_DWORD *)(*(_QWORD *)(v24 + v27) + 8);
                  v29 = v28 > 7;
                  v30 = (1 << v28) & 0x83;
                  if (v29 || v30 == 0)
                    break;
                  v27 += 16;
                  if (!v27)
                    goto LABEL_35;
                }
LABEL_41:
                v14 = *(unsigned __int8 *)(v9 + 16);
LABEL_42:
                if (v14 == 84)
                {
                  v20 = *(_QWORD *)(v9 - 32);
                  if (v20)
                  {
                    if (!*(_BYTE *)(v20 + 16)
                      && *(_QWORD *)(v20 + 24) == *(_QWORD *)(v9 + 72)
                      && (*(_BYTE *)(v20 + 33) & 0x20) != 0)
                    {
                      v21 = *(_DWORD *)(v20 + 36);
                      if (v21 == 244 || v21 == 272)
                      {
LABEL_55:
                        if (!*(_BYTE *)(v20 + 16)
                          && *(_QWORD *)(v20 + 24) == *(_QWORD *)(v9 + 72)
                          && (*(_DWORD *)(v20 + 36) - 287) <= 1)
                        {
                          *(_BYTE *)(v7 + 168) = 1;
                        }
                        goto LABEL_5;
                      }
                    }
                  }
                }
                if (a4)
                  *(_QWORD *)(a4 + 40) = ScheduleDataChunks;
                else
                  *(_QWORD *)(v7 + 152) = ScheduleDataChunks;
                a4 = ScheduleDataChunks;
                goto LABEL_53;
              }
            }
LABEL_35:
            result = llvm::CallBase::hasFnAttrOnCalledFunction(v9, 45);
            if ((result & 1) == 0)
            {
              result = llvm::CallBase::hasFnAttrOnCalledFunction(v9, 44);
              if (!(_DWORD)result)
                goto LABEL_41;
            }
          }
        }
        else if (v16 == 27)
        {
          if ((*(_WORD *)(v9 + 18) & 0x301) != 0)
            goto LABEL_41;
        }
        else if (((1 << v16) & 0x808001D0000010) != 0)
        {
          goto LABEL_41;
        }
      }
      v14 = *(unsigned __int8 *)(v9 + 16);
LABEL_53:
      if (v14 == 84)
      {
        v20 = *(_QWORD *)(v9 - 32);
        if (v20)
          goto LABEL_55;
      }
LABEL_5:
      v10 = *(_QWORD *)(v9 + 32);
      if (v10)
        v11 = v10 == *(_QWORD *)(v9 + 40) + 40;
      else
        v11 = 1;
      if (v11)
        v9 = 0;
      else
        v9 = v10 - 24;
      v32 = v9;
    }
    while ((const llvm::Instruction *)v9 != a3);
  }
  if (a5)
  {
    if (a4)
      *(_QWORD *)(a4 + 40) = a5;
  }
  else
  {
    *(_QWORD *)(v7 + 160) = a4;
  }
  return result;
}

void llvm::slpvectorizer::BoUpSLP::BlockScheduling::calculateDependencies(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  _OWORD *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Instruction *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t **v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  _OWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  int v75;
  int v76;
  uint64_t v77;
  llvm::APInt *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  BOOL v86;
  int v87;
  llvm::Value *PersonalityFn;
  const llvm::Value *v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  llvm::Value *v104;
  const llvm::Value *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  int v112;
  int v114;
  uint64_t v115;
  int v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v121;
  __int128 v122;
  _OWORD v123[2];
  uint64_t v124;
  __int128 v125[3];
  char v126;
  uint64_t v127[2];
  _QWORD *v128;
  unsigned int v129;
  unsigned int v130;
  _QWORD v131[12];

  v131[10] = *MEMORY[0x1E0C80C00];
  v128 = v131;
  v130 = 10;
  v5 = v123;
  v131[0] = a2;
  v121 = a4 + 384;
  v117 = (_QWORD *)(a1 + 88);
  v118 = a4 + 416;
  v6 = 1;
  do
  {
    v7 = v128[v6 - 1];
    v129 = v6 - 1;
    v124 = v7;
    while (v7)
    {
      if (*(_DWORD *)(v7 + 152) != -1)
        goto LABEL_4;
      *(_QWORD *)(v7 + 152) = 0;
      v8 = *(_QWORD *)(v7 + 8);
      if (v8 == *(_QWORD *)v7)
      {
        for (i = *(_QWORD *)(v8 + 8); i; i = *(_QWORD *)(i + 8))
        {
          v10 = sub_1C63DFCC0(a1, *(_QWORD *)(i + 24));
          if (v10)
          {
            ++*(_DWORD *)(v7 + 152);
            v11 = *(_QWORD *)(v10 + 24);
            if (!*(_BYTE *)(v11 + 160))
              ++*(_DWORD *)(v7 + 156);
            if (*(_DWORD *)(v11 + 152) == -1)
            {
              v12 = v129;
              if (v129 >= (unint64_t)v130)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v128, (uint64_t)v131, v129 + 1, 8);
                v12 = v129;
              }
              v128[v12] = v11;
              ++v129;
            }
          }
        }
      }
      else
      {
        v13 = sub_1C63DFCC0(a1, *(_QWORD *)v7);
        if (v13)
        {
          ++*(_DWORD *)(v7 + 152);
          v14 = *(_QWORD *)(v13 + 24);
          if (!*(_BYTE *)(v14 + 160))
            ++*(_DWORD *)(v7 + 156);
          if (*(_DWORD *)(v14 + 152) == -1)
          {
            v15 = v129;
            if (v129 >= (unint64_t)v130)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v128, (uint64_t)v131, v129 + 1, 8);
              v15 = v129;
            }
            v128[v15] = v14;
            ++v129;
          }
        }
      }
      v16 = *(llvm::Instruction **)v7;
      v17 = *(unsigned __int8 *)(*(_QWORD *)v7 + 16);
      if (v17 != 29 && v17 != 35)
      {
        if (v17 == 80)
        {
          PersonalityFn = (llvm::Value *)llvm::Function::getPersonalityFn(*(llvm::Function **)(*((_QWORD *)v16 + 5)
                                                                                             + 56));
          if (llvm::classifyEHPersonality(PersonalityFn, v90) == 10)
            goto LABEL_29;
        }
        else if ((llvm::Instruction::mayThrow(*(llvm::Instruction **)v7) & 1) == 0
               && (llvm::Instruction::willReturn(v16) & 1) != 0)
        {
          goto LABEL_29;
        }
      }
      v91 = *(_QWORD *)(*(_QWORD *)v7 + 32);
      v92 = v91 - 24;
      if (v91)
        v93 = v91 == *(_QWORD *)(*(_QWORD *)v7 + 40) + 40;
      else
        v93 = 1;
      while (1)
      {
        v94 = v93 ? 0 : v92;
        if (v94 == *(_QWORD *)(a1 + 144))
          break;
        v95 = *(_QWORD *)(*(_QWORD *)a1 + 48);
        if (v95)
          v96 = (unint64_t *)(v95 - 24);
        else
          v96 = 0;
        if ((llvm::isSafeToSpeculativelyExecute(v94, v96, 0, 0) & 1) == 0)
        {
          v98 = sub_1C63DFCC0(a1, v94);
          v99 = v98;
          v100 = *(unsigned int *)(v98 + 104);
          if (v100 >= *(unsigned int *)(v98 + 108))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v98 + 96, v98 + 112, v100 + 1, 8);
            v100 = *(unsigned int *)(v99 + 104);
          }
          *(_QWORD *)(*(_QWORD *)(v99 + 96) + 8 * v100) = v7;
          ++*(_DWORD *)(v99 + 104);
          ++*(_DWORD *)(v7 + 152);
          v101 = *(_QWORD *)(v99 + 24);
          if (!*(_BYTE *)(v101 + 160))
            ++*(_DWORD *)(v7 + 156);
          if (*(_DWORD *)(v101 + 152) == -1)
          {
            v102 = v129;
            if (v129 >= (unint64_t)v130)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v128, (uint64_t)v131, v129 + 1, 8);
              v102 = v129;
            }
            v128[v102] = v101;
            ++v129;
          }
          v103 = *(unsigned __int8 *)(v94 + 16);
          if (v103 == 29 || v103 == 35)
            break;
          if (v103 == 80)
          {
            v104 = (llvm::Value *)llvm::Function::getPersonalityFn(*(llvm::Function **)(*(_QWORD *)(v94 + 40) + 56));
            if (llvm::classifyEHPersonality(v104, v105) != 10)
              break;
          }
          else if ((llvm::Instruction::mayThrow((llvm::Instruction *)v94) & 1) != 0
                 || !llvm::Instruction::willReturn((llvm::Instruction *)v94))
          {
            break;
          }
        }
        v97 = *(_QWORD *)(v94 + 32);
        v92 = v97 - 24;
        if (v97)
          v93 = v97 == *(_QWORD *)(v94 + 40) + 40;
        else
          v93 = 1;
      }
LABEL_29:
      if (!*(_BYTE *)(a1 + 168))
        goto LABEL_96;
      v18 = *(_QWORD *)v7;
      v19 = *(unsigned __int8 *)(*(_QWORD *)v7 + 16);
      if (*(_QWORD *)v7 && v19 == 84)
      {
        v20 = *(_QWORD *)(v18 - 32);
        if (!v20
          || *(_BYTE *)(v20 + 16)
          || *(_QWORD *)(v20 + 24) != *(_QWORD *)(v18 + 72)
          || (*(_DWORD *)(v20 + 36) - 287) > 1)
        {
          goto LABEL_96;
        }
        v22 = v18 + 32;
        v21 = *(_QWORD *)(v18 + 32);
        v23 = *(_QWORD *)(v22 + 8) + 40;
        v24 = !v21 || v21 == v23;
        v25 = v24 ? 0 : v21 - 24;
        if (v25 == *(_QWORD *)(a1 + 144))
          goto LABEL_96;
        do
        {
          v26 = *(unsigned __int8 *)(v25 + 16);
          if (v25 && v26 == 84)
          {
            v27 = *(_QWORD *)(v25 - 32);
            if (v27
              && !*(_BYTE *)(v27 + 16)
              && *(_QWORD *)(v27 + 24) == *(_QWORD *)(v25 + 72)
              && (*(_DWORD *)(v27 + 36) - 287) < 2)
            {
              break;
            }
          }
          else if (v26 == 59)
          {
            v30 = sub_1C63DFCC0(a1, v25);
            v31 = v30;
            v32 = *(unsigned int *)(v30 + 104);
            if (v32 >= *(unsigned int *)(v30 + 108))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v30 + 96, v30 + 112, v32 + 1, 8);
              v32 = *(unsigned int *)(v31 + 104);
            }
            *(_QWORD *)(*(_QWORD *)(v31 + 96) + 8 * v32) = v7;
            ++*(_DWORD *)(v31 + 104);
            ++*(_DWORD *)(v7 + 152);
            v33 = *(_QWORD *)(v31 + 24);
            if (!*(_BYTE *)(v33 + 160))
              ++*(_DWORD *)(v7 + 156);
            if (*(_DWORD *)(v33 + 152) == -1)
            {
              v34 = v129;
              if (v129 >= (unint64_t)v130)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v128, (uint64_t)v131, v129 + 1, 8);
                v34 = v129;
              }
              v128[v34] = v33;
              ++v129;
            }
          }
          v28 = *(_QWORD *)(v25 + 32);
          if (v28)
            v29 = v28 == *(_QWORD *)(v25 + 40) + 40;
          else
            v29 = 1;
          if (v29)
            v25 = 0;
          else
            v25 = v28 - 24;
        }
        while (v25 != *(_QWORD *)(a1 + 144));
        v18 = *(_QWORD *)v7;
        v19 = *(unsigned __int8 *)(*(_QWORD *)v7 + 16);
      }
      if (v19 == 59)
      {
        v36 = v18 + 32;
        v35 = *(_QWORD *)(v18 + 32);
        v37 = *(_QWORD *)(v36 + 8) + 40;
        if (v35)
          v38 = v35 == v37;
        else
          v38 = 1;
        if (v38)
          v39 = 0;
        else
          v39 = v35 - 24;
        while (v39 != *(_QWORD *)(a1 + 144))
        {
          if (v39)
          {
            if (*(_BYTE *)(v39 + 16) == 84)
            {
              v40 = *(_QWORD *)(v39 - 32);
              if (v40)
              {
                if (!*(_BYTE *)(v40 + 16)
                  && *(_QWORD *)(v40 + 24) == *(_QWORD *)(v39 + 72)
                  && (*(_DWORD *)(v40 + 36) - 287) <= 1)
                {
                  v43 = sub_1C63DFCC0(a1, v39);
                  v44 = v43;
                  v45 = *(unsigned int *)(v43 + 104);
                  if (v45 >= *(unsigned int *)(v43 + 108))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod(v43 + 96, v43 + 112, v45 + 1, 8);
                    v45 = *(unsigned int *)(v44 + 104);
                  }
                  *(_QWORD *)(*(_QWORD *)(v44 + 96) + 8 * v45) = v7;
                  ++*(_DWORD *)(v44 + 104);
                  ++*(_DWORD *)(v7 + 152);
                  v46 = *(_QWORD *)(v44 + 24);
                  if (!*(_BYTE *)(v46 + 160))
                    ++*(_DWORD *)(v7 + 156);
                  if (*(_DWORD *)(v46 + 152) == -1)
                  {
                    v47 = v129;
                    if (v129 >= (unint64_t)v130)
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v128, (uint64_t)v131, v129 + 1, 8);
                      v47 = v129;
                    }
                    v128[v47] = v46;
                    ++v129;
                  }
                  break;
                }
              }
            }
          }
          v41 = *(_QWORD *)(v39 + 32);
          if (v41)
            v42 = v41 == *(_QWORD *)(v39 + 40) + 40;
          else
            v42 = 1;
          if (v42)
            v39 = 0;
          else
            v39 = v41 - 24;
        }
      }
LABEL_96:
      v48 = *(uint64_t **)(v7 + 40);
      if (v48)
      {
        v49 = *(_QWORD *)v7;
        v50 = *(unsigned __int8 *)(*(_QWORD *)v7 + 16);
        if (*(_QWORD *)v7 && v50 == 61)
        {
          v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v49 + 40) + 56) + 40) + 272;
          v52 = *(_QWORD *)(v49 - 32);
          v53 = **(uint64_t ****)(v49 - 64);
          goto LABEL_103;
        }
        if (v49 && v50 == 60)
        {
          v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v49 + 40) + 56) + 40) + 272;
          v52 = *(_QWORD *)(v49 - 32);
          v53 = *(uint64_t ***)v49;
LABEL_103:
          sub_1C4768AD0(v51, (uint64_t)v53);
          if (v55 == 1)
            v56 = -2;
          else
            v56 = (unint64_t)(v54 + 7) >> 3;
          llvm::Instruction::getAAMetadata((uint64_t ***)v49, v5);
          *(_QWORD *)&v122 = v52;
          *((_QWORD *)&v122 + 1) = v56;
        }
        else
        {
          *(_QWORD *)&v122 = 0;
          *((_QWORD *)&v122 + 1) = -1;
          *v5 = 0u;
          v5[1] = 0u;
        }
        v57 = 0;
        v58 = *(_QWORD *)v7;
        v59 = *(unsigned __int8 *)(*(_QWORD *)v7 + 16) - 33;
        if (v59 <= 0x37)
        {
          if (((1 << (*(_BYTE *)(*(_QWORD *)v7 + 16) - 33)) & 0x8000000000041) == 0)
          {
            if (v59 == 27)
              v57 = (*(_WORD *)(v58 + 18) & 0x301) != 0;
            else
              v57 = ((1 << (*(_BYTE *)(*(_QWORD *)v7 + 16) - 33)) & 0x808001D0000010) != 0;
            goto LABEL_118;
          }
          v60 = *(_QWORD *)(v58 + 64);
          if (!v60 || (*(_BYTE *)(v60 + 17) & 0x30) == 0)
          {
            v61 = *(_DWORD *)(v58 + 20);
            if (v61 < 0)
            {
              v106 = v58 - 32 * (v61 & 0x7FFFFFF);
              v109 = *(_QWORD *)(v106 - 8);
              v107 = v106 - 8;
              v108 = v109;
              if (v109)
              {
                v110 = -v108;
                while (1)
                {
                  v111 = *(_DWORD *)(*(_QWORD *)(v107 + v110) + 8);
                  v86 = v111 > 7;
                  v112 = (1 << v111) & 0x83;
                  if (v86 || v112 == 0)
                    break;
                  v110 += 16;
                  if (!v110)
                    goto LABEL_115;
                }
                v57 = 1;
                goto LABEL_118;
              }
            }
LABEL_115:
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(*(_QWORD *)v7, 45) & 1) == 0)
            {
              v57 = llvm::CallBase::hasFnAttrOnCalledFunction(v58, 44) ^ 1;
              goto LABEL_118;
            }
          }
          v57 = 0;
        }
LABEL_118:
        v62 = 0;
        v63 = 1;
        while (2)
        {
          if (v63 > 0x9F)
            goto LABEL_122;
          if ((v57 & 1) != 0)
            goto LABEL_121;
          v67 = *v48;
          v68 = *(unsigned __int8 *)(*v48 + 16) - 33;
          if (v68 > 0x37)
            goto LABEL_132;
          if (((1 << (*(_BYTE *)(*v48 + 16) - 33)) & 0x8000000000041) == 0)
          {
            if (v68 == 27)
            {
              if ((*(_WORD *)(v67 + 18) & 0x301) != 0)
                goto LABEL_121;
            }
            else if (((1 << (*(_BYTE *)(*v48 + 16) - 33)) & 0x808001D0000010) != 0)
            {
              goto LABEL_121;
            }
LABEL_132:
            ++v63;
            v48 = (uint64_t *)v48[5];
            if (!v48)
              goto LABEL_4;
            continue;
          }
          break;
        }
        v69 = *(_QWORD *)(v67 + 64);
        if (v69 && (*(_BYTE *)(v69 + 17) & 0x30) != 0)
          goto LABEL_132;
        v70 = *(_DWORD *)(v67 + 20);
        if (v70 < 0
          && (v80 = v67 - 32 * (v70 & 0x7FFFFFF), v83 = *(_QWORD *)(v80 - 8), v81 = v80 - 8, (v82 = v83) != 0))
        {
          v84 = -v82;
          while (1)
          {
            v85 = *(_DWORD *)(*(_QWORD *)(v81 + v84) + 8);
            v86 = v85 > 7;
            v87 = (1 << v85) & 0x83;
            if (v86 || v87 == 0)
              break;
            v84 += 16;
            if (!v84)
              goto LABEL_142;
          }
        }
        else
        {
LABEL_142:
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(*v48, 45) & 1) != 0
            || (llvm::CallBase::hasFnAttrOnCalledFunction(v67, 44) & 1) != 0)
          {
            goto LABEL_132;
          }
        }
LABEL_121:
        if (v62 > 9)
        {
LABEL_122:
          v64 = *((unsigned int *)v48 + 14);
          if (v64 >= *((unsigned int *)v48 + 15))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v48 + 6), (uint64_t)(v48 + 8), v64 + 1, 8);
            v64 = *((unsigned int *)v48 + 14);
          }
          *(_QWORD *)(v48[6] + 8 * v64) = v7;
          ++*((_DWORD *)v48 + 14);
          ++*(_DWORD *)(v7 + 152);
          v65 = v48[3];
          if (!*(_BYTE *)(v65 + 160))
            ++*(_DWORD *)(v7 + 156);
          if (*(_DWORD *)(v65 + 152) == -1)
          {
            v66 = v129;
            if (v129 >= (unint64_t)v130)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v128, (uint64_t)v131, v129 + 1, 8);
              v66 = v129;
            }
            v128[v66] = v65;
            ++v129;
          }
          if (v63 > 0x13F)
            goto LABEL_4;
          ++v62;
          goto LABEL_132;
        }
        v71 = v5;
        v72 = *v48;
        v127[0] = v49;
        v127[1] = v72;
        v73 = sub_1C63E1A9C(v121, v127);
        v74 = v73;
        if (*((_BYTE *)v73 + 17))
        {
          v75 = *((unsigned __int8 *)v73 + 16);
          goto LABEL_166;
        }
        if ((_QWORD)v122)
        {
          v76 = *(unsigned __int8 *)(v49 + 16);
          if (v49 && v76 == 60 || v49 && v76 == 61)
          {
            if ((*(_WORD *)(v49 + 18) & 0x381) != 0)
              goto LABEL_155;
LABEL_162:
            v125[0] = v122;
            v125[1] = v123[0];
            v125[2] = v123[1];
            v126 = 1;
            v75 = (llvm::AAResults::getModRefInfo(*(_QWORD *)(a4 + 408), v72, v125, v118) & 3) != 0;
          }
          else
          {
            if (!sub_1C4DE85D0(v49))
              goto LABEL_162;
            v77 = *(_QWORD *)(v49 + 96 - 32 * (*(_DWORD *)(v49 + 20) & 0x7FFFFFF));
            v78 = (llvm::APInt *)(v77 + 24);
            v79 = *(_DWORD *)(v77 + 32);
            if (v79 > 0x40)
            {
              if (llvm::APInt::countLeadingZerosSlowCase(v78) == v79)
                goto LABEL_162;
            }
            else if (!*(_QWORD *)v78)
            {
              goto LABEL_162;
            }
LABEL_155:
            v75 = 1;
          }
          if (*((_BYTE *)v74 + 17))
          {
            *((_BYTE *)v74 + 16) = v75;
            goto LABEL_166;
          }
        }
        else
        {
          v75 = 1;
        }
        *((_BYTE *)v74 + 16) = v75;
        *((_BYTE *)v74 + 17) = 1;
LABEL_166:
        v5 = v71;
        if (!v75)
          goto LABEL_132;
        goto LABEL_122;
      }
LABEL_4:
      v7 = *(_QWORD *)(v7 + 32);
    }
    if ((a3 & 1) != 0)
    {
      if (v124)
      {
        v114 = 0;
        v115 = v124;
        while (1)
        {
          v116 = *(_DWORD *)(v115 + 156);
          if (v116 == -1)
            break;
          v114 += v116;
          v115 = *(_QWORD *)(v115 + 32);
          if (!v115)
          {
            if (v114)
              break;
            goto LABEL_223;
          }
        }
      }
      else
      {
LABEL_223:
        if (!*(_BYTE *)(v124 + 160))
          sub_1C518D044(v117, &v124);
      }
    }
    v6 = v129;
  }
  while (v129);
  if (v128 != v131)
    free(v128);
}

uint64_t sub_1C60A4238(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  if (a2)
  {
    if (*(unsigned __int8 *)(a2 + 16) >= 0x1Cu)
    {
      v8 = sub_1C63DFCC0(a1, a2);
      if (v8)
        a3(a4, v8);
    }
  }
  v18 = 0;
  result = sub_1C61B57BC(*(_QWORD *)(a1 + 64), *(_DWORD *)(a1 + 80), a2, &v18);
  v10 = v18;
  if ((_DWORD)result)
    v11 = v18 == *(_QWORD *)(a1 + 64) + 80 * *(unsigned int *)(a1 + 80);
  else
    v11 = 1;
  if (!v11)
  {
    result = (uint64_t)sub_1C63B7F64((int *)(v18 + 8));
    v13 = (_QWORD *)result;
    v14 = v12;
    if ((*(_BYTE *)(v10 + 8) & 1) != 0)
    {
      v15 = v10 + 16;
      v16 = 4;
    }
    else
    {
      v15 = *(_QWORD *)(v10 + 16);
      v16 = *(unsigned int *)(v10 + 24);
    }
    v17 = (_QWORD *)(v15 + 16 * v16);
    if (v17 != (_QWORD *)result)
    {
      do
      {
        if (*(_DWORD *)(v13[1] + 144) == *(_DWORD *)(a1 + 180))
          result = ((uint64_t (*)(uint64_t))a3)(a4);
        while (1)
        {
          v13 += 2;
          if (v13 == v14)
            break;
          if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_21;
        }
        v13 = v14;
LABEL_21:
        ;
      }
      while (v13 != v17);
    }
  }
  return result;
}

uint64_t llvm::slpvectorizer::BoUpSLP::getVectorElementSize(llvm::slpvectorizer::BoUpSLP *this, llvm::Value *a2)
{
  llvm::Value *v2;
  int v4;
  unsigned __int8 *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v19;
  char v21;
  const char *v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unsigned int v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  unsigned int v38;
  const char *v39;
  unsigned int v40;
  unsigned int v41;
  BOOL v42;
  BOOL v43;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  int v57;
  _BYTE v58[128];
  void *v59;
  uint64_t v60;
  _QWORD v61[34];

  v2 = a2;
  v61[32] = *MEMORY[0x1E0C80C00];
  v5 = (unsigned __int8 *)a2 + 16;
  v4 = *((unsigned __int8 *)a2 + 16);
  v6 = a2 == 0;
  if (a2 && v4 == 61)
  {
LABEL_3:
    v7 = *((_QWORD *)v2 - 8);
    v8 = *((_QWORD *)this + 248);
    if (v7 && *(_BYTE *)(v7 + 16) == 66)
    {
      sub_1C4768AD0(v8, **(_QWORD **)(v7 - 32));
      v11 = v10;
      if ((_DWORD)v9 != 1)
        return v11;
    }
    else
    {
      sub_1C4768AD0(v8, *(_QWORD *)v7);
      v11 = v17;
      if ((_DWORD)v9 != 1)
        return v11;
    }
    return v11;
  }
  if (a2 && v4 == 90)
  {
    do
    {
      v2 = (llvm::Value *)*((_QWORD *)v2 - 8);
      v12 = *((unsigned __int8 *)v2 + 16);
      v6 = v2 == 0;
      if (v2 && v12 == 61)
        goto LABEL_3;
    }
    while (v2 && v12 == 90);
    v5 = (unsigned __int8 *)v2 + 16;
  }
  v13 = (_DWORD *)((char *)this + 152);
  v14 = sub_1C63DFDBC((uint64_t)this + 152, (uint64_t)v2);
  if ((*((_BYTE *)this + 152) & 1) != 0)
  {
    v15 = (char *)this + 160;
    v16 = 4;
  }
  else
  {
    v15 = (char *)*((_QWORD *)this + 20);
    v16 = *((unsigned int *)this + 42);
  }
  if (&v15[16 * v16] != (char *)v14)
    return *(unsigned int *)(v14 + 8);
  v59 = v61;
  v60 = 0x1000000000;
  v54 = v58;
  v55 = v58;
  v56 = 16;
  v57 = 0;
  if (*v5 < 0x1Cu)
    goto LABEL_23;
  v53 = *((_QWORD *)v2 + 5);
  sub_1C61B1608((uint64_t)&v59, (uint64_t)v2, &v53);
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v54, (uint64_t)v2);
  v34 = v60;
  if (!(_DWORD)v60)
    goto LABEL_23;
  v11 = 0;
  while (1)
  {
    v35 = (char *)v59 + 16 * v34;
    v37 = (uint64_t *)*((_QWORD *)v35 - 2);
    v36 = *((_QWORD *)v35 - 1);
    LODWORD(v60) = v34 - 1;
    if ((*(_DWORD *)(*v37 + 8) & 0xFE) == 0x12)
      goto LABEL_95;
    v38 = *((unsigned __int8 *)v37 + 16);
    if (v38 > 0x58)
      break;
    if (v38 == 60)
      goto LABEL_61;
    if (v38 != 83)
      goto LABEL_66;
LABEL_78:
    v45 = *((_DWORD *)v37 + 5);
    if ((v45 & 0x40000000) != 0)
    {
      v47 = (uint64_t *)*(v37 - 1);
      v46 = v45 & 0x7FFFFFF;
    }
    else
    {
      v46 = v45 & 0x7FFFFFF;
      v47 = &v37[-4 * v46];
    }
    if (v46)
    {
      v48 = 32 * v46;
      while (1)
      {
        v49 = *v47;
        if (*v47)
          v50 = *(unsigned __int8 *)(*v47 + 16) >= 0x1Cu;
        else
          v50 = 0;
        if (!v50)
          goto LABEL_91;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v54, *v47);
        if (!v51)
          goto LABEL_91;
        v52 = *(_QWORD *)(v49 + 40);
        if (*((_BYTE *)v37 + 16) == 83)
          goto LABEL_94;
        if (v52 == v36)
          break;
LABEL_91:
        v47 += 4;
        v48 -= 32;
        if (!v48)
        {
          v13 = (_DWORD *)((char *)this + 152);
          goto LABEL_95;
        }
      }
      v52 = v36;
LABEL_94:
      v53 = v52;
      sub_1C61B1608((uint64_t)&v59, v49, &v53);
      goto LABEL_91;
    }
    v13 = (_DWORD *)((char *)this + 152);
LABEL_95:
    v34 = v60;
    if (!(_DWORD)v60)
      goto LABEL_98;
  }
  if (v38 == 92 || v38 == 89)
  {
LABEL_61:
    sub_1C4768AD0(*((_QWORD *)this + 248), *v37);
    v41 = v40;
    if ((_DWORD)v39 == 1)
    if (v11 <= v41)
      v11 = v41;
    else
      v11 = v11;
    goto LABEL_95;
  }
LABEL_66:
  if (v38 == 40 || v38 == 85)
    goto LABEL_78;
  v42 = v38 != 62 && v38 - 66 >= 0xD;
  v43 = v42 && v38 - 81 >= 2;
  if (!v43 || v38 - 41 <= 0x11)
    goto LABEL_78;
LABEL_98:
  if (!(_DWORD)v11)
  {
LABEL_23:
    v19 = *v5;
    v21 = v19 < 0x1C || v19 - 83 < 0xFFFFFFFE || v6;
    if ((v21 & 1) == 0)
      v2 = (llvm::Value *)*((_QWORD *)v2 - 8);
    sub_1C4768AD0(*((_QWORD *)this + 248), *(_QWORD *)v2);
    v11 = v23;
    if ((_DWORD)v22 == 1)
  }
  v25 = v54;
  v24 = v55;
  v26 = &v56;
  if (v55 == v54)
    v26 = (uint64_t *)((char *)&v56 + 4);
  v27 = *(unsigned int *)v26;
  v28 = (uint64_t *)v55;
  if ((_DWORD)v27)
  {
    v29 = 0;
    while (*(_QWORD *)&v55[v29] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v29 += 8;
      if (8 * v27 == v29)
        goto LABEL_48;
    }
    v28 = (uint64_t *)&v55[v29];
  }
  v30 = &v55[8 * v27];
  if (v28 != v30)
  {
    v31 = *v28;
LABEL_43:
    v53 = v31;
    *((_DWORD *)sub_1C63E2D94(v13, &v53) + 2) = v11;
    v32 = (unint64_t *)(v28 + 1);
    while (v32 != v30)
    {
      v33 = *v32++;
      v31 = v33;
      if (v33 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v28 = (uint64_t *)(v32 - 1);
        goto LABEL_43;
      }
    }
    v25 = v54;
    v24 = v55;
  }
LABEL_48:
  if (v24 != v25)
    free(v24);
  if (v59 != v61)
    free(v59);
  return v11;
}

void llvm::slpvectorizer::BoUpSLP::computeMinimumValueSizes(llvm::slpvectorizer::BoUpSLP *this)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t ***v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unsigned int *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int64_t v33;
  unint64_t v35;
  int v36;
  int8x8_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t v52;
  _BOOL4 v53;
  BOOL v54;
  char *v55;
  uint64_t v56;
  unsigned int v57;
  llvm::Constant *v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  const char *v64;
  int v65;
  int v66;
  uint8x8_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  void *v91;
  uint64_t v92;
  _BYTE v93[32];
  void *v94;
  uint64_t v95;
  _QWORD v96[34];

  v96[32] = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 270))
  {
    v2 = **(uint64_t ****)this;
    v3 = *(_QWORD *)**v2;
    if (v3 && *(_BYTE *)(v3 + 8) == 13)
    {
      sub_1C63E2DF4((llvm::SmallPtrSetImplBase *)&v76, *v2, &(*v2)[*((unsigned int *)v2 + 2)]);
      v5 = *((unsigned int *)this + 270);
      if ((_DWORD)v5)
      {
        v6 = (uint64_t *)*((_QWORD *)this + 134);
        v7 = 24 * v5;
        while (1)
        {
          v8 = (char *)sub_1C477672C((uint64_t)&v76, *v6);
          v9 = v79;
          v10 = v77 == v76 ? v79 : v78;
          if (v8 == &v77[8 * v10])
            goto LABEL_115;
          *(_QWORD *)v8 = -2;
          v11 = ++v80;
          v6 += 3;
          v7 -= 24;
          if (!v7)
            goto LABEL_16;
        }
      }
      v9 = v79;
      v11 = v80;
LABEL_16:
      if (v9 != v11)
        goto LABEL_115;
      v12 = *((unsigned int *)this + 2);
      if ((_DWORD)v12)
      {
        v13 = *(uint64_t ****)this;
        v14 = *(_QWORD *)this + 8 * v12;
        do
        {
          v15 = *((unsigned int *)*v13 + 2);
          if ((_DWORD)v15)
          {
            v16 = **v13;
            v17 = 8 * v15;
            do
            {
              v18 = *v16++;
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v76, v18);
              v17 -= 8;
            }
            while (v17);
          }
          ++v13;
        }
        while (v13 != (uint64_t ***)v14);
      }
      v19 = *((unsigned int *)v2 + 2);
      if ((_DWORD)v19)
      {
        v20 = *v2;
        v21 = 8 * v19;
        do
        {
          v22 = *(_QWORD *)(*v20 + 8);
          if (!v22 || *(_QWORD *)(v22 + 8))
            goto LABEL_115;
          v23 = (char *)sub_1C477672C((uint64_t)&v76, *(_QWORD *)(v22 + 24));
          v24 = (unsigned int *)(v77 == v76 ? &v79 : &v78);
          if (v23 != &v77[8 * *v24])
            goto LABEL_115;
          ++v20;
          v21 -= 8;
        }
        while (v21);
      }
      v94 = v96;
      v95 = 0x2000000000;
      v91 = v93;
      v92 = 0x400000000;
      v25 = *v2;
      v26 = *((unsigned int *)v2 + 2);
      if ((_DWORD)v26)
      {
        v27 = 8 * v26;
        while ((sub_1C60A4DB0(*v25, &v76, (uint64_t)&v94, (uint64_t)&v91) & 1) != 0)
        {
          ++v25;
          v27 -= 8;
          if (!v27)
          {
            v25 = *v2;
            v28 = *((unsigned int *)v2 + 2);
            if (!(_DWORD)v28)
              goto LABEL_53;
            v29 = &v25[v28];
            v30 = 8;
            do
            {
              llvm::DemandedBits::getDemandedBits(*((llvm::DemandedBits **)this + 247), (llvm::Instruction *)*v25, (llvm::APInt *)&v85);
              if (v86 > 0x40)
              {
                v32 = 0;
                v33 = ((unint64_t)v86 + 63) >> 6;
                do
                {
                  if (v33-- < 1)
                    break;
                  v35 = *(_QWORD *)(v85 + 8 * v33);
                  v32 += __clz(v35);
                }
                while (!v35);
                v36 = v86 | 0xFFFFFFC0;
                if ((v86 & 0x3F) == 0)
                  v36 = 0;
                if ((int)v86 - v32 - v36 > v30)
                  v30 = v86 - v32 - v36;
                if (v85)
                  MEMORY[0x1CAA32F9C](v85, 0x1000C8000313F17);
              }
              else
              {
                v31 = 64 - __clz(v85);
                if (v31 > v30)
                  v30 = v31;
              }
              ++v25;
            }
            while (v25 != v29);
            v25 = *v2;
            goto LABEL_54;
          }
        }
        goto LABEL_111;
      }
LABEL_53:
      v30 = 8;
LABEL_54:
      v37 = (int8x8_t)v30;
      sub_1C4768AD0(*((_QWORD *)this + 248), *(_QWORD *)*v25);
      v40 = v39;
      if ((_DWORD)v38 == 1)
      if (v40 == v30)
      {
        v41 = *((unsigned int *)v2 + 2);
        if (!(_DWORD)v41)
        {
          v53 = 0;
LABEL_85:
          if ((_DWORD)v95)
          {
            v55 = (char *)v94;
            v56 = 8 * v95;
            v57 = 8;
            do
            {
              v58 = *(llvm::Constant **)v55;
              if (*(_QWORD *)v55)
                v59 = *(unsigned __int8 *)(*(_QWORD *)v55 + 16) >= 0x1Cu;
              else
                v59 = 0;
              if (!v59 || (v60 = *(_QWORD *)v55, !*((_QWORD *)v58 + 5)))
                v60 = 0;
              v61 = *((_QWORD *)this + 246);
              v62 = *((_QWORD *)this + 245);
              v85 = *((_QWORD *)this + 248);
              v86 = v61;
              v87 = v60;
              v88 = v62;
              v89 = 0;
              v90 = 1;
              v63 = sub_1C4F85990(v58, 0, (uint64_t)&v85);
              sub_1C4768AD0(*((_QWORD *)this + 248), *(_QWORD *)v58);
              v66 = v65;
              if ((_DWORD)v64 == 1)
              if (v66 - v63 > v57)
                v57 = v66 - v63;
              v55 += 8;
              v56 -= 8;
            }
            while (v56);
          }
          else
          {
            v57 = 8;
          }
          v37 = (int8x8_t)(v57 + v53);
          v30 = v37.i32[0];
          goto LABEL_102;
        }
        v42 = *v2;
        v43 = 8 * v41;
        v44 = v43;
        v45 = *v2;
        while (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v45 + 8) + 24) + 16) == 62)
        {
          ++v45;
          v44 -= 8;
          if (!v44)
          {
            v46 = v43 - 8;
            do
            {
              v47 = *v42;
              if (*v42)
                v48 = *(unsigned __int8 *)(*v42 + 16) >= 0x1Cu;
              else
                v48 = 0;
              if (!v48 || (v49 = *v42, !*(_QWORD *)(v47 + 40)))
                v49 = 0;
              v85 = *((_QWORD *)this + 248);
              v86 = 0;
              v87 = v49;
              v88 = 0;
              v89 = 0;
              v90 = 1;
              sub_1C4F83784(v47, 0, (uint64_t *)&v85, &v81);
              v50 = v82;
              v51 = (uint64_t *)(v81 + 8 * ((v82 - 1) >> 6));
              if (v82 < 0x41)
                v51 = &v81;
              v52 = (1 << (v82 - 1)) & *v51;
              v53 = v52 == 0;
              if (v84 >= 0x41 && v83)
              {
                MEMORY[0x1CAA32F9C](v83, 0x1000C8000313F17);
                v50 = v82;
              }
              if (v50 >= 0x41 && v81)
                MEMORY[0x1CAA32F9C](v81, 0x1000C8000313F17);
              ++v42;
              if (v52)
                v54 = v46 == 0;
              else
                v54 = 1;
              v46 -= 8;
            }
            while (!v54);
            goto LABEL_85;
          }
        }
      }
      LOBYTE(v53) = 0;
LABEL_102:
      if (!v30 || (v67 = (uint8x8_t)vcnt_s8(v37), v67.i16[0] = vaddlv_u8(v67), v67.u32[0] >= 2uLL))
      {
        v68 = *(_QWORD *)&v37 | (*(_QWORD *)&v37 >> 1) | ((*(_QWORD *)&v37 | (*(_QWORD *)&v37 >> 1)) >> 2);
        v69 = v68 | (v68 >> 4) | ((v68 | (v68 >> 4)) >> 8);
        v30 = ((v69 >> 16) | v69) + 1;
      }
      if (v30 < *(_DWORD *)(v3 + 8) >> 8)
      {
        while ((_DWORD)v92)
        {
          v70 = *((_QWORD *)v91 + v92 - 1);
          LODWORD(v92) = v92 - 1;
          sub_1C60A4DB0(v70, &v76, (uint64_t)&v94, (uint64_t)&v91);
        }
        if ((_DWORD)v95)
        {
          v71 = (unint64_t *)v94;
          v72 = (char *)this + 2144;
          v73 = 8 * v95;
          do
          {
            v74 = *v71++;
            v85 = v74;
            v75 = sub_1C63DF334((uint64_t)v72, (uint64_t *)&v85);
            *(_QWORD *)v75 = v30;
            *(_BYTE *)(v75 + 8) = v53;
            v73 -= 8;
          }
          while (v73);
        }
      }
LABEL_111:
      if (v91 != v93)
        free(v91);
      if (v94 != v96)
        free(v94);
LABEL_115:
      if (v77 != v76)
        free(v77);
    }
  }
}

uint64_t sub_1C60A4DB0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  int v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = *(unsigned __int8 *)(a1 + 16);
  if (v6 <= 0x14)
    goto LABEL_2;
  if (v6 < 0x1C)
    return 0;
  v9 = *(_QWORD *)(a1 + 8);
  if (!v9 || *(_QWORD *)(v9 + 8))
    return 0;
  v12 = sub_1C477672C((uint64_t)a2, a1);
  v13 = a2[1];
  v14 = v13 == *a2 ? (unsigned int *)((char *)a2 + 20) : (unsigned int *)(a2 + 2);
  if (v12 == (_QWORD *)(v13 + 8 * *v14))
    return 0;
  result = 0;
  v15 = *(unsigned __int8 *)(a1 + 16);
  if (v15 > 0x41)
  {
    if (*(unsigned __int8 *)(a1 + 16) > 0x52u)
    {
      if (v15 == 83)
      {
        v26 = *(_DWORD *)(a1 + 20);
        if ((v26 & 0x40000000) != 0)
        {
          v28 = *(_QWORD **)(a1 - 8);
          v27 = v26 & 0x7FFFFFF;
        }
        else
        {
          v27 = v26 & 0x7FFFFFF;
          v28 = (_QWORD *)(a1 - 32 * v27);
        }
        if (!v27)
          goto LABEL_2;
        v31 = 32 * v27;
        while ((sub_1C60A4DB0(*v28, a2, a3, a4) & 1) != 0)
        {
          v28 += 4;
          v31 -= 32;
          if (!v31)
            goto LABEL_2;
        }
        return 0;
      }
      if (v15 != 85)
        return result;
      result = sub_1C60A4DB0(*(_QWORD *)(a1 - 64), a2, a3, a4);
      if (!(_DWORD)result)
        return result;
      v22 = *(_QWORD *)(a1 - 32);
      goto LABEL_37;
    }
    if (v15 - 67 >= 2)
    {
      if (v15 != 66)
        return result;
      v23 = *(_DWORD *)(a1 + 20);
      if ((v23 & 0x40000000) != 0)
        v24 = *(uint64_t **)(a1 - 8);
      else
        v24 = (uint64_t *)(a1 - 32 * (v23 & 0x7FFFFFF));
      v29 = *v24;
      v30 = *(unsigned int *)(a4 + 8);
      if (v30 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v30 + 1, 8);
        LODWORD(v30) = *(_DWORD *)(a4 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v30) = v29;
      ++*(_DWORD *)(a4 + 8);
      goto LABEL_2;
    }
    v16 = *(_DWORD *)(a1 + 20);
    if ((v16 & 0x40000000) != 0)
      v17 = *(_QWORD *)(a1 - 8);
    else
      v17 = a1 - 32 * (v16 & 0x7FFFFFF);
    v25 = *(unsigned __int8 *)(*(_QWORD *)v17 + 16);
    if (v25 != 89 && v25 != 90)
    {
LABEL_2:
      v7 = *(_DWORD *)(a3 + 8);
      if (v7 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v7 + 1, 8);
        v7 = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v7) = a1;
      ++*(_DWORD *)(a3 + 8);
      return 1;
    }
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 16) > 0x37u)
  {
    if (v15 - 56 >= 3)
      return result;
  }
  else if (v15 != 41 && v15 != 43 && v15 != 45)
  {
    return result;
  }
  v18 = *(_DWORD *)(a1 + 20);
  if ((v18 & 0x40000000) != 0)
    v19 = *(_QWORD **)(a1 - 8);
  else
    v19 = (_QWORD *)(a1 - 32 * (v18 & 0x7FFFFFF));
  result = sub_1C60A4DB0(*v19, a2, a3, a4);
  if ((_DWORD)result)
  {
    v20 = *(_DWORD *)(a1 + 20);
    if ((v20 & 0x40000000) != 0)
      v21 = *(_QWORD *)(a1 - 8);
    else
      v21 = a1 - 32 * (v20 & 0x7FFFFFF);
    v22 = *(_QWORD *)(v21 + 32);
LABEL_37:
    if ((sub_1C60A4DB0(v22, a2, a3, a4) & 1) != 0)
      goto LABEL_2;
    return 0;
  }
  return result;
}

_QWORD *llvm::SLPVectorizerPass::run@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t CachedResultImpl;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ResultImpl;
  char v16;
  uint64_t v18;

  v18 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::ScalarEvolutionAnalysis::Key, (uint64_t)a2) + 8;
  v7 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::TargetIRAnalysis::Key, (uint64_t)a2) + 8;
  CachedResultImpl = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(a3, (uint64_t)&llvm::TargetLibraryAnalysis::Key, (uint64_t)a2);
  if (CachedResultImpl)
    v9 = CachedResultImpl + 8;
  else
    v9 = 0;
  v10 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::AAManager::Key, (uint64_t)a2) + 8;
  v11 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::LoopAnalysis::Key, (uint64_t)a2) + 8;
  v12 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::DominatorTreeAnalysis::Key, (uint64_t)a2) + 8;
  v13 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::AssumptionAnalysis::Key, (uint64_t)a2) + 8;
  v14 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::DemandedBitsAnalysis::Key, (uint64_t)a2) + 8;
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::OptimizationRemarkEmitterAnalysis::Key, (uint64_t)a2);
  v16 = llvm::SLPVectorizerPass::runImpl(a1, a2, v18, v7, v9, v10, v11, v12, v13, v14, ResultImpl + 8);
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  if ((v16 & 1) != 0)
    return sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::CFGAnalyses::SetKey);
  else
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

uint64_t llvm::SLPVectorizerPass::runImpl(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v11;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  void *v21;
  void *v22;
  unsigned int v23;
  unsigned int v24;
  _BYTE *v25;
  void *v26;
  void *v27;
  unsigned int v28;
  _DWORD *v29;
  _DWORD *v30;
  llvm::BasicBlock *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  llvm::BasicBlock *v38;
  unsigned int v39;
  unsigned int v40;
  _BYTE *v41;
  _BYTE v42[64];
  void *v43;
  uint64_t v44;
  _BYTE v45[192];
  __int128 v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  _BYTE v50[64];
  void *v51;
  uint64_t v52;
  _BYTE v53[192];
  void *v54;
  void *__src;
  unsigned int v56;
  unsigned int v57;
  int v58;
  void *v59;
  int v60;
  uint64_t v61;
  void *v62;
  void *v63;
  unsigned int v64;
  unsigned int v65;
  void *v66;
  int v67;
  uint64_t v68;
  _BYTE v69[2192];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  if (!byte_1ED838C58)
    goto LABEL_2;
  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 24) = a6;
  *(_QWORD *)(a1 + 32) = a7;
  *(_QWORD *)(a1 + 40) = a8;
  *(_QWORD *)(a1 + 48) = a9;
  *(_QWORD *)(a1 + 56) = a10;
  *(_QWORD *)(a1 + 64) = a2[5] + 272;
  sub_1C631AD60(a1 + 72);
  sub_1C631AD60(a1 + 120);
  v15 = *(_QWORD **)(a1 + 8);
  v16 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v15 + 680))(*v15, 1, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*v15 + 672))(*v15, v16)
    || (v17 = a2[14]) != 0 && (*(_BYTE *)(v17 + 15) & 4) != 0)
  {
LABEL_2:
    LOBYTE(v11) = 0;
    return v11 & 1;
  }
  sub_1C63E1C9C((uint64_t)v69, (uint64_t)a2, *(uint64_t ****)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(llvm::AssumptionCache **)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), a11);
  llvm::DominatorTreeBase<llvm::BasicBlock,false>::updateDFSNumbers(*(_QWORD *)(a1 + 40));
  v18 = a2[10];
  if (v18)
    v19 = v18 - 24;
  else
    v19 = 0;
  *(_QWORD *)&v46 = v19;
  sub_1C4EB7378((uint64_t *)&v46, (uint64_t)&v54);
  v20 = v50;
  *(_QWORD *)&v46 = v50;
  v21 = __src;
  if (__src == v54)
  {
    *((_QWORD *)&v46 + 1) = v50;
    v22 = __src;
  }
  else
  {
    v39 = v56;
    v20 = malloc_type_malloc(8 * v56, 0x4065EBACuLL);
    if (!v20)
    {
      if (v39)
        goto LABEL_73;
      v20 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v20)
        goto LABEL_73;
    }
    *((_QWORD *)&v46 + 1) = v20;
    v22 = v54;
    v21 = __src;
  }
  v23 = v57;
  v47 = v56;
  if (v21 == v22)
    v24 = v57;
  else
    v24 = v56;
  if (v24)
  {
    memmove(v20, v21, 8 * v24);
    v23 = v57;
  }
  v48 = v23;
  v49 = v58;
  v51 = v53;
  v52 = 0x800000000;
  if (v60)
    sub_1C4DB22B8((uint64_t)&v51, (uint64_t *)&v59);
  v25 = v42;
  v26 = v63;
  if (v63 != v62)
  {
    v40 = v64;
    v25 = malloc_type_malloc(8 * v64, 0x4065EBACuLL);
    if (v25 || !v40 && (v25 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v41 = v25;
      v27 = v62;
      v26 = v63;
      goto LABEL_21;
    }
LABEL_73:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v41 = v42;
  v27 = v63;
LABEL_21:
  if (v26 == v27)
    v28 = v65;
  else
    v28 = v64;
  if (v28)
    memmove(v25, v26, 8 * v28);
  v43 = v45;
  v44 = 0x800000000;
  if (v67)
    sub_1C4DB22B8((uint64_t)&v43, (uint64_t *)&v66);
  v11 = 0;
  while (1)
  {
    if ((_DWORD)v52 != (_DWORD)v44)
      goto LABEL_39;
    if (!(_DWORD)v52)
      break;
    v29 = v43;
    v30 = v51;
    while (*(_QWORD *)v30 == *(_QWORD *)v29 && v30[4] == v29[4])
    {
      v30 += 6;
      v29 += 6;
      if (v30 == (_DWORD *)((char *)v51 + 24 * v52))
        goto LABEL_45;
    }
LABEL_39:
    v32 = (llvm::BasicBlock *)*((_QWORD *)v51 + 3 * v52 - 3);
    llvm::SLPVectorizerPass::collectSeedInstructions((llvm::SLPVectorizerPass *)a1, v32);
    if (*(_QWORD *)(a1 + 96) != *(_QWORD *)(a1 + 104))
      v11 |= llvm::SLPVectorizerPass::vectorizeStoreChains((llvm::SLPVectorizerPass *)a1, (llvm::slpvectorizer::BoUpSLP *)v69);
    v11 |= llvm::SLPVectorizerPass::vectorizeChainsInBlock((llvm::TargetTransformInfo **)a1, v32, (llvm::slpvectorizer::BoUpSLP *)v69, v33, v34, v35, v36, v37);
    if (*(_QWORD *)(a1 + 144) != *(_QWORD *)(a1 + 152))
      v11 |= llvm::SLPVectorizerPass::vectorizeGEPIndices((llvm::SLPVectorizerPass *)a1, v38, (llvm::slpvectorizer::BoUpSLP *)v69);
    LODWORD(v52) = v52 - 1;
    if ((_DWORD)v52)
      sub_1C4EB7588(&v46);
  }
LABEL_45:
  if (v43 != v45)
    free(v43);
  if (v41 != v42)
    free(v41);
  if (v51 != v53)
    free(v51);
  if (*((_QWORD *)&v46 + 1) != (_QWORD)v46)
    free(*((void **)&v46 + 1));
  if (v66 != &v68)
    free(v66);
  if (v63 != v62)
    free(v63);
  if (v59 != &v61)
    free(v59);
  if (__src != v54)
    free(__src);
  if ((v11 & 1) != 0)
    llvm::slpvectorizer::BoUpSLP::optimizeGatherSequence((llvm::slpvectorizer::BoUpSLP *)v69);
  llvm::slpvectorizer::BoUpSLP::~BoUpSLP((llvm::slpvectorizer::BoUpSLP *)v69);
  return v11 & 1;
}

void llvm::SLPVectorizerPass::collectSeedInstructions(llvm::SLPVectorizerPass *this, llvm::BasicBlock *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned __int8 *v20;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  llvm *UnderlyingObject;

  v4 = (char *)this + 72;
  sub_1C631AD60((uint64_t)this + 72);
  v5 = (char *)this + 120;
  sub_1C631AD60((uint64_t)v5);
  v6 = (char *)a2 + 40;
  v7 = *((_QWORD *)a2 + 6);
  if ((char *)v7 != v6)
  {
    while (1)
    {
      v8 = v7 ? v7 - 24 : 0;
      v9 = *(unsigned __int8 *)(v8 + 16);
      v10 = v9 == 61 ? v8 : 0;
      if (!v7 || v9 != 61)
        break;
      v11 = *(unsigned __int8 *)(v10 + 16);
      if (v11 == 60 || v11 == 61)
      {
        v12 = *(_WORD *)(v10 + 18);
        if ((v12 & 0x380) == 0 && (v12 & 1) == 0)
          goto LABEL_13;
      }
      else if ((v11 - 63) >= 3 && (*(_WORD *)(v10 + 18) & 1) == 0)
      {
LABEL_13:
        v13 = *(_DWORD *)(**(_QWORD **)(v10 - 64) + 8);
        v14 = v13 > 0x14u || ((1 << v13) & 0x10A07F) == 0;
        v15 = v13 & 0xFD;
        if (v14 || v15 == 4)
          goto LABEL_40;
        UnderlyingObject = llvm::getUnderlyingObject(*(llvm **)(v10 - 32), (const llvm::Value *)6);
        v17 = sub_1C631ADB4((uint64_t)v4, (uint64_t *)&UnderlyingObject);
        goto LABEL_37;
      }
LABEL_40:
      v7 = *(_QWORD *)(v7 + 8);
      if ((char *)v7 == v6)
        return;
    }
    if (v9 == 62)
      v10 = v8;
    else
      v10 = 0;
    if (!v7)
      goto LABEL_40;
    if (v9 != 62)
      goto LABEL_40;
    v18 = *(_DWORD *)(v10 + 20) & 0x7FFFFFF;
    if ((v18 - 3) < 0xFFFFFFFE)
      goto LABEL_40;
    v19 = (uint64_t *)(v10 - 32 * v18);
    v20 = (unsigned __int8 *)v19[4];
    if (v20[16] < 0x15u)
      goto LABEL_40;
    v21 = *(_DWORD *)(*(_QWORD *)v20 + 8);
    v22 = v21 > 0x14u || ((1 << v21) & 0x10A07F) == 0;
    v23 = v21 & 0xFD;
    v24 = v22 || v23 == 4;
    if (v24 || (*(_DWORD *)(*(_QWORD *)v10 + 8) & 0xFE) == 0x12)
      goto LABEL_40;
    UnderlyingObject = (llvm *)*v19;
    v17 = sub_1C63E009C((uint64_t)v5, (uint64_t *)&UnderlyingObject);
LABEL_37:
    v25 = *(unsigned int *)(v17 + 8);
    if (v25 >= *(unsigned int *)(v17 + 12))
    {
      v26 = v17;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v17, v17 + 16, v25 + 1, 8);
      v17 = v26;
      v25 = *(unsigned int *)(v26 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v17 + 8 * v25) = v10;
    ++*(_DWORD *)(v17 + 8);
    goto LABEL_40;
  }
}

uint64_t llvm::SLPVectorizerPass::vectorizeChainsInBlock(llvm::TargetTransformInfo **this, llvm::BasicBlock *a2, llvm::slpvectorizer::BoUpSLP *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  llvm::slpvectorizer::BoUpSLP *v8;
  llvm::BasicBlock *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  unsigned __int8 *v16;
  char *v17;
  uint64_t *v18;
  int v19;
  BOOL v20;
  int v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  char *v27;
  _DWORD *v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  char v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  char v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  llvm::TargetTransformInfo **v44;
  uint64_t *v45;
  uint64_t v46;
  _OWORD *v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  llvm::TargetTransformInfo *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  _OWORD *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  llvm::BasicBlock *v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t LoopLatch;
  int v74;
  uint64_t *v75;
  int v76;
  uint64_t *v77;
  int v78;
  uint64_t v79;
  llvm::Value **v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  llvm::Value *v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  int v99;
  BOOL v100;
  unsigned int v101;
  char *v102;
  uint64_t *v104;
  uint64_t *v105;
  unsigned int v106;
  _OWORD *v107;
  uint64_t *v108;
  unsigned int v109;
  llvm::slpvectorizer::BoUpSLP *v112;
  _QWORD *v113;
  _QWORD v114[2];
  _QWORD v115[2];
  unsigned int v116;
  char *v117;
  char *v118;
  uint64_t v119;
  int v120;
  _BYTE v121[128];
  uint64_t v122;
  uint64_t v123[3];
  void *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  _BYTE v128[48];
  uint64_t v129;
  _OWORD v130[2];
  uint64_t *v131;
  unsigned int v132;
  unsigned int v133;
  _QWORD v134[6];

  v8 = a3;
  v9 = a2;
  v10 = 0;
  v134[4] = *MEMORY[0x1E0C80C00];
  v131 = v134;
  v133 = 4;
  v117 = v121;
  v118 = v121;
  v119 = 16;
  v120 = 0;
  v115[0] = 0;
  v115[1] = 0;
  v116 = 0;
  v11 = (char *)a2 + 40;
  v108 = (uint64_t *)((char *)a3 + 1048);
  v112 = a3;
  v114[0] = this;
  v114[1] = v115;
  v113 = v115;
  do
  {
    v12 = v10;
    v132 = 0;
    v13 = *((_QWORD *)v9 + 6);
    if ((char *)v13 == v11)
      goto LABEL_55;
    do
    {
      v14 = (unsigned __int8 *)(v13 - 24);
      if (!v13)
        v14 = 0;
      v15 = v14[16];
      if (v15 == 83)
        v16 = v14;
      else
        v16 = 0;
      if (!v13 || v15 != 83)
        break;
      v17 = (char *)sub_1C477672C((uint64_t)&v117, (uint64_t)v16);
      if (v118 == v117)
        v18 = (uint64_t *)((char *)&v119 + 4);
      else
        v18 = &v119;
      if (v17 == &v118[8 * *(unsigned int *)v18])
      {
        v124 = v16;
        v129 = 0;
        if ((sub_1C61DB414(v108, &v124, &v129) & 1) == 0)
        {
          v19 = *(_DWORD *)(*(_QWORD *)v16 + 8);
          v20 = v19 > 0x14u || ((1 << v19) & 0x10A07F) == 0;
          v21 = v19 & 0xFD;
          if (!v20 && v21 != 4)
          {
            v23 = v132;
            if (v132 >= (unint64_t)v133)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v131, (uint64_t)v134, v132 + 1, 8);
              v23 = v132;
            }
            v131[v23] = (uint64_t)v16;
            ++v132;
          }
        }
      }
      v13 = *(_QWORD *)(v13 + 8);
    }
    while ((char *)v13 != v11);
    if (!v132)
      goto LABEL_55;
    v24 = v131;
    v25 = &v131[v132];
    do
    {
      v26 = *v24;
      v123[0] = *v24;
      sub_1C63E0780((uint64_t)&v124, (uint64_t)v115, v123);
      v27 = (char *)v124;
      v28 = (char *)v124 + 16;
      if (*((_DWORD *)v124 + 4))
        goto LABEL_54;
      v129 = (uint64_t)v130 + 8;
      *(_QWORD *)&v130[0] = 0x400000000;
      sub_1C4848C0C((unsigned int *)&v129, 1uLL, v26);
      v124 = v128;
      v125 = (uint64_t)v128;
      v126 = 4;
      v127 = 0;
      v29 = v130[0];
      if (!LODWORD(v130[0]))
        goto LABEL_52;
      v104 = v25;
      v106 = v12;
      v30 = v27 + 8;
      do
      {
        v31 = *(_QWORD *)(v129 + 8 * v29 - 8);
        LODWORD(v130[0]) = v29 - 1;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v124, v31);
        if (!v32)
          goto LABEL_49;
        v33 = *(_DWORD *)(v31 + 20);
        if ((v33 & 0x40000000) != 0)
        {
          v35 = *(uint64_t **)(v31 - 8);
          v34 = v33 & 0x7FFFFFF;
          if (!v34)
            goto LABEL_49;
        }
        else
        {
          v34 = v33 & 0x7FFFFFF;
          v35 = (uint64_t *)(v31 - 32 * v34);
          if (!v34)
            goto LABEL_49;
        }
        v36 = 32 * v34;
        do
        {
          v37 = *v35;
          if (*v35 && *(_BYTE *)(v37 + 16) == 83)
          {
            v38 = LODWORD(v130[0]);
            if (LODWORD(v130[0]) >= (unint64_t)DWORD1(v130[0]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, (uint64_t)v130 + 8, LODWORD(v130[0]) + 1, 8);
              v38 = LODWORD(v130[0]);
            }
            *(_QWORD *)(v129 + 8 * v38) = v37;
            LODWORD(v38) = v130[0];
            v39 = v130;
          }
          else
          {
            v38 = *((unsigned int *)v27 + 4);
            if (v38 >= *((_DWORD *)v27 + 5))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v27 + 8), (uint64_t)(v27 + 24), v38 + 1, 8);
              *(_QWORD *)(*v30 + 8 * *v28) = v37;
              LODWORD(v38) = *v28;
            }
            else
            {
              *(_QWORD *)(*v30 + 8 * v38) = v37;
            }
            v39 = v28;
          }
          *v39 = v38 + 1;
          v35 += 4;
          v36 -= 32;
        }
        while (v36);
LABEL_49:
        v29 = v130[0];
      }
      while (LODWORD(v130[0]));
      v12 = v106;
      v8 = a3;
      v25 = v104;
      if ((void *)v125 != v124)
        free((void *)v125);
LABEL_52:
      if ((_OWORD *)v129 != (_OWORD *)((char *)v130 + 8))
        free((void *)v129);
LABEL_54:
      ++v24;
    }
    while (v24 != v25);
LABEL_55:
    v124 = this;
    v125 = (uint64_t)v8;
    v40 = sub_1C60AB09C((uint64_t)&v131, (unsigned int (*)(uint64_t, _QWORD))sub_1C60B62C8, (uint64_t)&v112, sub_1C60B6304, (uint64_t)v114, (uint64_t (*)(uint64_t, _QWORD, _QWORD))sub_1C60B65C8, (uint64_t)&v113, a8, (uint64_t (*)(uint64_t, void *))sub_1C60B6720, (uint64_t)&v124);
    if (v132)
    {
      v41 = v131;
      v42 = 8 * v132;
      do
      {
        v43 = *v41++;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v117, v43);
        v42 -= 8;
      }
      while (v42);
    }
    v10 = 1;
    v9 = a2;
  }
  while ((v40 & 1) != 0);
  v44 = this;
  if (v118 == v117)
    goto LABEL_60;
  if (v119 >= 0x21 && 4 * (HIDWORD(v119) - v120) < v119)
  {
    free(v118);
    v99 = 1 << (33 - __clz(HIDWORD(v119) - v120 - 1));
    v100 = (HIDWORD(v119) - v120) > 0x10;
    HIDWORD(v119) = 0;
    v120 = 0;
    if (v100)
      v101 = v99;
    else
      v101 = 32;
    LODWORD(v119) = v101;
    v102 = (char *)malloc_type_malloc(8 * v101, 0x4065EBACuLL);
    if (!v102)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v118 = v102;
    memset(v102, 255, 8 * v119);
  }
  else
  {
    memset(v118, 255, 8 * v119);
LABEL_60:
    HIDWORD(v119) = 0;
    v120 = 0;
  }
  v45 = &v126;
  v124 = &v126;
  v125 = 0x800000000;
  v129 = 1;
  v130[0] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v130[1] = v130[0];
  v46 = *((_QWORD *)a2 + 6);
  if ((char *)v46 != v11)
  {
    v47 = v130;
    v48 = (a2 >> 4) ^ (a2 >> 9);
    while (2)
    {
      if (v46)
        v49 = v46 - 24;
      else
        v49 = 0;
      if (*(_BYTE *)(*(_QWORD *)v49 + 8) == 19)
        goto LABEL_67;
      v122 = 0;
      v123[0] = v49;
      if ((sub_1C61DB414(v108, v123, &v122) & 1) != 0)
        goto LABEL_67;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v117, v49);
      if (!v50)
      {
        if (!*(_QWORD *)(v49 + 8))
        {
          v58 = sub_1C63E2F0C((uint64_t)&v129, v49);
          v59 = (v129 & 1) != 0 ? v47 : *(_OWORD **)&v130[0];
          v60 = (v129 & 1) != 0 ? 4 : DWORD2(v130[0]);
          if ((_OWORD *)((char *)v59 + 8 * v60) != (_OWORD *)v58
            && llvm::SLPVectorizerPass::vectorizeSimpleInstructions(v44, (unsigned int *)&v124, v9, (uint64_t *)a3, *(unsigned __int8 *)(v49 + 16) - 29 < 0xB))
          {
            v46 = *((_QWORD *)v9 + 6);
            v12 = 1;
          }
        }
        goto LABEL_67;
      }
      if (sub_1C4D99D08(v49))
        goto LABEL_67;
      v51 = *(unsigned __int8 *)(v49 + 16);
      if (v51 == 83)
        v52 = v49;
      else
        v52 = 0;
      if (!v46 || v51 != 83)
      {
        if (!*(_QWORD *)(v49 + 8) && (*(_BYTE *)(*(_QWORD *)v49 + 8) == 7 || v51 == 84 || v51 == 33))
        {
          v122 = v49;
          sub_1C63E2F6C((uint64_t)v123, (uint64_t)&v129, &v122);
          v105 = v45;
          v107 = v47;
          v109 = v48;
          if (byte_1ED82B8F8 || *(_BYTE *)(v49 + 16) != 61)
          {
            v78 = *(_DWORD *)(v49 + 20);
            if ((v78 & 0x40000000) != 0)
            {
              v80 = *(llvm::Value ***)(v49 - 8);
              v79 = v78 & 0x7FFFFFF;
            }
            else
            {
              v79 = v78 & 0x7FFFFFF;
              v80 = (llvm::Value **)(v49 - 32 * v79);
            }
            v76 = 0;
            if (v79)
            {
              v91 = 32 * v79;
              v77 = (uint64_t *)a3;
              v9 = a2;
              v44 = this;
              do
              {
                v92 = *v80;
                v80 += 4;
                v76 |= llvm::SLPVectorizerPass::vectorizeRootInstruction((llvm::SLPVectorizerPass *)this, 0, v92, a2, a3, this[1]);
                v91 -= 32;
              }
              while (v91);
            }
            else
            {
              v77 = (uint64_t *)a3;
              v9 = a2;
              v44 = this;
            }
          }
          else
          {
            LOBYTE(v76) = 0;
            v77 = (uint64_t *)a3;
          }
          v93 = llvm::SLPVectorizerPass::vectorizeSimpleInstructions(v44, (unsigned int *)&v124, v9, v77, *(unsigned __int8 *)(v49 + 16) - 29 < 0xB);
          if ((v76 & 1) != 0 || (v93 & 1) != 0)
          {
            v9 = a2;
            v44 = this;
            v46 = *((_QWORD *)a2 + 6);
            v12 = 1;
            v45 = v105;
            goto LABEL_147;
          }
          v51 = *(unsigned __int8 *)(v49 + 16);
          v9 = a2;
          v44 = this;
          v45 = v105;
          v47 = v107;
          v48 = v109;
        }
        if ((v51 - 81) < 2 || v51 == 93 || v51 == 90)
        {
          v61 = v125;
          if (v125 >= (unint64_t)HIDWORD(v125))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v124, (uint64_t)v45, v125 + 1, 8);
            v61 = v125;
          }
          *((_QWORD *)v124 + v61) = v49;
          LODWORD(v125) = v125 + 1;
        }
LABEL_67:
        v46 = *(_QWORD *)(v46 + 8);
        if ((char *)v46 == v11)
          goto LABEL_157;
        continue;
      }
      break;
    }
    v109 = v48;
    v107 = v47;
    v53 = *(_DWORD *)(v52 + 20);
    v54 = v53 & 0x7FFFFFF;
    if (v54 != 2)
      goto LABEL_135;
    v55 = v44[4];
    v56 = (uint64_t)v44[5];
    if ((v53 & 0x40000000) != 0)
      v57 = *(uint64_t **)(v52 - 8);
    else
      v57 = (uint64_t *)(v52 - 64);
    v62 = *(unsigned int *)(v52 + 60);
    if ((llvm::BasicBlock *)v57[4 * v62] == v9)
    {
      v63 = v12;
    }
    else
    {
      v63 = v12;
      if ((llvm::BasicBlock *)v57[4 * v62 + 1] != v9)
      {
        v64 = 0;
        goto LABEL_109;
      }
      v57 += 4;
    }
    v64 = *v57;
    if (*v57
      && *(unsigned __int8 *)(v64 + 16) >= 0x1Cu
      && llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)v44[5], *(_QWORD *)(v52 + 40), *(_QWORD *)(v64 + 40)))
    {
      goto LABEL_132;
    }
LABEL_109:
    v65 = *((_DWORD *)v55 + 4);
    if (!v65)
      goto LABEL_131;
    v66 = *(_QWORD *)v55;
    v67 = v65 - 1;
    v68 = (v65 - 1) & v109;
    v69 = *(llvm::BasicBlock **)(*(_QWORD *)v55 + 16 * v68);
    if (v69 != v9)
    {
      v70 = 1;
      while (v69 != (llvm::BasicBlock *)-4096)
      {
        v71 = v68 + v70++;
        v68 = v71 & v67;
        v69 = *(llvm::BasicBlock **)(v66 + 16 * v68);
        if (v69 == v9)
          goto LABEL_114;
      }
LABEL_131:
      v64 = 0;
LABEL_132:
      if ((llvm::SLPVectorizerPass::vectorizeRootInstruction((llvm::SLPVectorizerPass *)v44, (llvm::PHINode *)v52, (llvm::Value *)v64, v9, a3, v44[1]) & 1) != 0)
      {
        v46 = *((_QWORD *)v9 + 6);
        v12 = 1;
        goto LABEL_147;
      }
      v54 = *(_DWORD *)(v52 + 20) & 0x7FFFFFF;
      v12 = v63;
LABEL_135:
      if (v54)
      {
        v82 = 0;
        v83 = 0;
        v84 = 32 * v54;
        do
        {
          v85 = *(_DWORD *)(v52 + 20);
          if ((v85 & 0x40000000) != 0)
          {
            v87 = *(_QWORD *)(v52 - 8);
            v86 = *(unsigned int *)(v52 + 60);
          }
          else
          {
            v86 = *(unsigned int *)(v52 + 60);
            v87 = v52 - 32 * (v85 & 0x7FFFFFF);
          }
          v88 = *(_QWORD *)(v87 + 32 * v86 + v82);
          if ((llvm::BasicBlock *)v88 != v9
            && llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry((uint64_t)v44[5], v88))
          {
            v89 = *(_DWORD *)(v52 + 20);
            if ((v89 & 0x40000000) != 0)
              v90 = *(_QWORD *)(v52 - 8);
            else
              v90 = v52 - 32 * (v89 & 0x7FFFFFF);
            v12 = v12 | llvm::SLPVectorizerPass::vectorizeRootInstruction((llvm::SLPVectorizerPass *)v44, 0, *(llvm::Value **)(v90 + v83), *(llvm::BasicBlock **)(v90+ 32 * *(unsigned int *)(v52 + 60)+ v82), a3, v44[1]);
          }
          v83 += 32;
          v82 += 8;
        }
        while (v84 != v83);
      }
LABEL_147:
      v47 = v107;
      v48 = v109;
      goto LABEL_67;
    }
LABEL_114:
    v72 = *(_QWORD *)(v66 + 16 * v68 + 8);
    if (!v72)
      goto LABEL_131;
    LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(v72);
    if (!LoopLatch)
      goto LABEL_131;
    v74 = *(_DWORD *)(v52 + 20);
    if ((v74 & 0x40000000) != 0)
      v75 = *(uint64_t **)(v52 - 8);
    else
      v75 = (uint64_t *)(v52 - 32 * (v74 & 0x7FFFFFF));
    v81 = *(unsigned int *)(v52 + 60);
    if (v75[4 * v81] == LoopLatch)
    {
LABEL_127:
      v64 = *v75;
    }
    else if (v75[4 * v81 + 1] == LoopLatch)
    {
      v75 += 4;
      goto LABEL_127;
    }
    if (!v64
      || *(unsigned __int8 *)(v64 + 16) < 0x1Cu
      || !llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v56, *(_QWORD *)(v52 + 40), *(_QWORD *)(v64 + 40)))
    {
      goto LABEL_131;
    }
    goto LABEL_132;
  }
LABEL_157:
  if ((v129 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)&v130[0], 8);
  if (v124 != v45)
    free(v124);
  v94 = v115[0];
  if (v116)
  {
    v95 = 56 * v116;
    v96 = v115[0] + 24;
    do
    {
      if ((*(_QWORD *)(v96 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v97 = *(void **)(v96 - 16);
        if ((void *)v96 != v97)
          free(v97);
      }
      v96 += 56;
      v95 -= 56;
    }
    while (v95);
    v94 = v115[0];
  }
  MEMORY[0x1CAA32FB4](v94, 8);
  if (v118 != v117)
    free(v118);
  if (v131 != v134)
    free(v131);
  return v12 & 1;
}

uint64_t llvm::SLPVectorizerPass::vectorizeGEPIndices(llvm::SLPVectorizerPass *this, llvm::BasicBlock *a2, llvm::slpvectorizer::BoUpSLP *a3)
{
  uint64_t v3;
  uint64_t v4;
  llvm::slpvectorizer::BoUpSLP *v5;
  unsigned int v6;
  unsigned int VectorElementSize;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  _DWORD *v28;
  int v29;
  unsigned int v30;
  uint64_t SCEVIter;
  uint64_t v32;
  _DWORD *v33;
  llvm::ScalarEvolution *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  _DWORD *v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  _QWORD *v47;
  unsigned int v48;
  uint64_t *v49;
  uint64_t *v50;
  unsigned int v51;
  uint64_t v52;
  char v53;
  uint64_t v55;
  unsigned int v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v66[2];
  int v67;
  void *__p;
  _QWORD *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  _QWORD v73[18];

  v73[16] = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 18);
  v4 = *((_QWORD *)this + 19);
  if (v3 != v4)
  {
    v5 = a3;
    v59 = 0;
    v55 = *((_QWORD *)this + 19);
    while (1)
    {
      if (*(_DWORD *)(v3 + 16) >= 2u)
      {
        v6 = *((_DWORD *)v5 + 500);
        VectorElementSize = llvm::slpvectorizer::BoUpSLP::getVectorElementSize(v5, *(llvm::Value **)(**(_QWORD **)(v3 + 8)- 32 * (*(_DWORD *)(**(_QWORD **)(v3 + 8) + 20) & 0x7FFFFFF)+ 32));
        if (v6 >= VectorElementSize)
        {
          v8 = *(_DWORD *)(v3 + 16);
          if (v8)
            break;
        }
      }
LABEL_78:
      v3 += 88;
      if (v3 == v4)
        return v59 & 1;
    }
    v9 = 0;
    v62 = *(_DWORD *)(v3 + 16);
    v10 = v6 / VectorElementSize;
    v58 = v3;
    v57 = v62;
    v60 = v10;
LABEL_7:
    if (v10 >= v8 - v9)
      v11 = v8 - v9;
    else
      v11 = v10;
    v61 = v9;
    v12 = (uint64_t *)(*(_QWORD *)(v3 + 8) + 8 * v9);
    v66[0] = 0;
    v66[1] = 0;
    v67 = 0;
    v69 = 0;
    v70 = 0;
    __p = 0;
    sub_1C63D3830((uint64_t)v66, v12, &v12[v11]);
    v14 = __p;
    v13 = v69;
    v71 = v5;
    v72 = (uint64_t)v66;
    if (__p != v69)
    {
      while (1)
      {
        v15 = v14 + 1;
        if (sub_1C60B6730(&v71, v14))
          break;
        ++v14;
        if (v15 == v13)
        {
          v14 = v13;
          goto LABEL_18;
        }
      }
      while (v15 != v13)
      {
        if ((sub_1C60B6730(&v71, v15) & 1) == 0)
          *v14++ = *v15;
        ++v15;
      }
    }
LABEL_18:
    if (v14 != v69)
      v69 = v14;
    if ((int)v11 < 1)
      goto LABEL_67;
    v16 = 0;
    if (v62 >= v60)
      v17 = v60;
    else
      v17 = v62;
    if (v17 <= 1)
      v18 = 1;
    else
      v18 = v17;
    v63 = v11 - 1;
    v64 = v18;
    v19 = 1;
    while (1)
    {
      v14 = v69;
      if ((unint64_t)((char *)v69 - (_BYTE *)__p) <= 8)
        goto LABEL_66;
      if (v67)
      {
        v20 = (_DWORD *)v12[v16];
        v21 = (v20 >> 4) ^ (v20 >> 9);
        v22 = v21 & (v67 - 1);
        v23 = *(_DWORD **)(v66[0] + 8 * v22);
        if (v20 == v23)
        {
LABEL_31:
          v24 = *(_QWORD *)(*(_QWORD *)this + 104);
          v25 = *(_DWORD *)(*(_QWORD *)this + 120);
          if (!v25)
            goto LABEL_37;
          v26 = (v25 - 1) & v21;
          v27 = v24 + 48 * v26;
          v28 = *(_DWORD **)(v27 + 24);
          if (v28 != v20)
          {
            v29 = 1;
            while (v28 != (_DWORD *)-4096)
            {
              v30 = v26 + v29++;
              v26 = v30 & (v25 - 1);
              v27 = v24 + 48 * v26;
              v28 = *(_DWORD **)(v27 + 24);
              if (v28 == v20)
                goto LABEL_38;
            }
LABEL_37:
            v27 = v24 + 48 * v25;
          }
LABEL_38:
          if (v27 == v24 + 48 * v25 || (SCEVIter = *(_QWORD *)(v27 + 40)) == 0)
            SCEVIter = llvm::ScalarEvolution::createSCEVIter(*(llvm::ScalarEvolution **)this, v12[v16]);
          if (v16 < v63)
          {
            v32 = v19;
            while (1)
            {
              if ((unint64_t)((char *)v69 - (_BYTE *)__p) < 9)
                goto LABEL_64;
              v33 = (_DWORD *)v12[v32];
              v34 = *(llvm::ScalarEvolution **)this;
              v35 = *(_QWORD *)(*(_QWORD *)this + 104);
              v36 = *(_DWORD *)(*(_QWORD *)this + 120);
              if (!v36)
                goto LABEL_50;
              v37 = v36 - 1;
              v38 = (v36 - 1) & ((v33 >> 4) ^ (v33 >> 9));
              v39 = v35 + 48 * v38;
              v40 = *(_DWORD **)(v39 + 24);
              if (v40 != v33)
                break;
LABEL_51:
              if (v39 == v35 + 48 * v36 || (v43 = *(_QWORD *)(v39 + 40)) == 0)
              {
                v43 = llvm::ScalarEvolution::createSCEVIter(v34, v12[v32]);
                v34 = *(llvm::ScalarEvolution **)this;
              }
              llvm::ScalarEvolution::getMinusSCEV((uint64_t)v34, SCEVIter, v43);
              if (!*(_WORD *)(v44 + 24))
              {
                v71 = v20;
                sub_1C6324178((uint64_t)v66, &v71);
LABEL_59:
                v71 = v33;
                sub_1C6324178((uint64_t)v66, &v71);
                goto LABEL_56;
              }
              if (*(_QWORD *)&v20[-8 * (v20[5] & 0x7FFFFFF) + 8] == *(_QWORD *)&v33[-8 * (v33[5] & 0x7FFFFFF) + 8])
                goto LABEL_59;
LABEL_56:
              if (++v32 == v17)
                goto LABEL_64;
            }
            v41 = 1;
            while (v40 != (_DWORD *)-4096)
            {
              v42 = v38 + v41++;
              v38 = v42 & v37;
              v39 = v35 + 48 * (v42 & v37);
              v40 = *(_DWORD **)(v39 + 24);
              if (v40 == v33)
                goto LABEL_51;
            }
LABEL_50:
            v39 = v35 + 48 * v36;
            goto LABEL_51;
          }
          goto LABEL_64;
        }
        v45 = 1;
        while (v23 != (_DWORD *)-4096)
        {
          v46 = v22 + v45++;
          v22 = v46 & (v67 - 1);
          v23 = *(_DWORD **)(v66[0] + 8 * v22);
          if (v20 == v23)
            goto LABEL_31;
        }
      }
LABEL_64:
      ++v16;
      ++v19;
      if (v16 == v64)
      {
        v14 = v69;
LABEL_66:
        v4 = v55;
        v5 = a3;
        v3 = v58;
        v8 = v57;
LABEL_67:
        v47 = __p;
        if ((unint64_t)((char *)v14 - (_BYTE *)__p) >= 0x10)
        {
          v71 = v73;
          v72 = 0x1000000000;
          sub_1C4848C0C((unsigned int *)&v71, ((char *)v14 - (_BYTE *)__p) >> 3, 0);
          v49 = (uint64_t *)__p;
          v50 = v69;
          v10 = v60;
          if (__p != v69)
          {
            v51 = 0;
            do
            {
              v52 = *v49++;
              *((_QWORD *)v71 + v51++) = *(_QWORD *)(v52 - 32 * (*(_DWORD *)(v52 + 20) & 0x7FFFFFF) + 32);
            }
            while (v49 != v50);
          }
          v53 = llvm::SLPVectorizerPass::tryToVectorizeList((uint64_t)this, (uint64_t *)v71, v72, v5, 0);
          if (v71 != v73)
            free(v71);
          v59 |= v53;
          v47 = __p;
          v48 = v61;
        }
        else
        {
          v10 = v60;
          v48 = v61;
        }
        if (v47)
        {
          v69 = v47;
          operator delete(v47);
        }
        MEMORY[0x1CAA32FB4](v66[0], 8);
        v9 = v48 + v10;
        v62 -= v10;
        if (v9 >= v8)
          goto LABEL_78;
        goto LABEL_7;
      }
    }
  }
  v59 = 0;
  return v59 & 1;
}

uint64_t llvm::SLPVectorizerPass::vectorizeStoreChain(int a1, llvm::Value **a2, uint64_t a3, llvm::slpvectorizer::BoUpSLP *this)
{
  __int32 VectorElementSize;
  int8x8_t v8;
  int8x8_t v9;
  uint64_t result;
  unsigned __int32 v12;
  unsigned int v13;
  uint8x8_t v14;
  BOOL isTreeTinyAndNotFullyVectorizable;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int64_t TreeCost;
  _BOOL4 v29;
  llvm::OptimizationRemarkEmitter *v30;
  llvm::Value *v31;
  uint64_t v32;
  const llvm::DebugLoc *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  llvm::DiagnosticInfoOptimizationBase *v38;
  char *v39;
  unint64_t v40;
  void **v41;
  std::string v42;
  void *__p;
  char v44;
  void *v45[2];
  char v46;
  void *v47;
  char v48;
  const char *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  const char *v54;
  uint64_t v55;
  char v56;
  char v57;
  void *v58;
  uint64_t v59;
  _BYTE v60[260];
  int v61;
  uint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  VectorElementSize = llvm::slpvectorizer::BoUpSLP::getVectorElementSize(this, *a2);
  v8.i32[0] = VectorElementSize;
  v9 = vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8((uint8x8_t)v9);
  if (v9.i32[0] != 1 || (_DWORD)a3 == 0)
    return 0;
  v12 = VectorElementSize;
  result = 0;
  if (a3 < 2)
    return result;
  v13 = *((_DWORD *)this + 501) / v12;
  v9.i32[0] = a3;
  v14 = (uint8x8_t)vcnt_s8(v9);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.i32[0] > 1u || v13 > a3)
    return result;
  llvm::slpvectorizer::BoUpSLP::buildTree((uint64_t)this, (uint64_t *)a2, a3, 0, 0);
  isTreeTinyAndNotFullyVectorizable = llvm::slpvectorizer::BoUpSLP::isTreeTinyAndNotFullyVectorizable(this, 0);
  result = 0;
  if (isTreeTinyAndNotFullyVectorizable)
    return result;
  if ((llvm::slpvectorizer::BoUpSLP::isLoadCombineCandidate((uint64_t ****)this) & 1) != 0)
    return 0;
  llvm::slpvectorizer::BoUpSLP::reorderTopToBottom((uint64_t **)this, v17, v18, v19);
  llvm::slpvectorizer::BoUpSLP::reorderBottomToTop((void ***)this, 0, v20, v21);
  v52 = 0u;
  v53 = 0u;
  v51 = 0u;
  llvm::slpvectorizer::BoUpSLP::buildExternalUses((unint64_t)this, (uint64_t)&v51);
  sub_1C63E18F0((uint64_t)&v51);
  llvm::slpvectorizer::BoUpSLP::computeMinimumValueSizes(this);
  TreeCost = llvm::slpvectorizer::BoUpSLP::getTreeCost((void *****)this, 0, 0, v22, v23, v24, v25, v26);
  result = 0;
  v29 = TreeCost < -(uint64_t)dword_1ED82B778;
  if ((_DWORD)v27)
    v29 = (int)v27 < 0;
  if (v29)
  {
    v30 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)this + 249);
    v31 = *a2;
    v32 = *(_QWORD *)(*((_QWORD *)*a2 + 5) + 56);
    v33 = (llvm::Value *)((char *)*a2 + 48);
    v34 = TreeCost;
    v35 = v27;
    llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v52 + 8, v33);
    v36 = *((_QWORD *)v31 + 5);
    DWORD2(v51) = 9;
    BYTE12(v51) = 2;
    *(_QWORD *)&v52 = v32;
    *((_QWORD *)&v53 + 1) = "slp-vectorizer";
    v54 = "StoresVectorized";
    v55 = 16;
    v56 = 0;
    v57 = 0;
    v58 = v60;
    v59 = 0x400000000;
    v60[256] = 0;
    v61 = -1;
    v62 = v36;
    v49 = "Stores SLP vectorized with cost ";
    v50 = 32;
    *(_QWORD *)&v51 = &off_1E814E500;
    sub_1C53B17B4((uint64_t)&v58, (const void **)&v49);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v45, "Cost", 4uLL, v34, v35);
    v37 = sub_1C47E3888((uint64_t)&v51, (uint64_t)v45);
    v49 = " and with tree size ";
    v50 = 20;
    sub_1C53B17B4(v37 + 80, (const void **)&v49);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v42, "TreeSize", 8uLL, *((_DWORD *)this + 2));
    v38 = (llvm::DiagnosticInfoOptimizationBase *)sub_1C47E3888(v37, (uint64_t)&v42);
    llvm::OptimizationRemarkEmitter::emit(v30, v38);
    if (v44 < 0)
      operator delete(__p);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    if (v48 < 0)
      operator delete(v47);
    if (v46 < 0)
      operator delete(v45[0]);
    *(_QWORD *)&v51 = &off_1E814E790;
    v39 = (char *)v58;
    if ((_DWORD)v59)
    {
      v40 = (unint64_t)v59 << 6;
      do
      {
        v41 = (void **)&v39[v40];
        if (v39[v40 - 17] < 0)
          operator delete(*(v41 - 5));
        if (*((char *)v41 - 41) < 0)
          operator delete(*(v41 - 8));
        v40 -= 64;
      }
      while (v40);
      v39 = (char *)v58;
    }
    if (v39 != v60)
      free(v39);
    v51 = 0uLL;
    LODWORD(v52) = 0;
    v53 = 0uLL;
    *((_QWORD *)&v52 + 1) = 0;
    llvm::slpvectorizer::BoUpSLP::vectorizeTree((uint64_t *)this, (int32x2_t *)&v51);
    sub_1C63E18F0((uint64_t)&v51);
    return 1;
  }
  return result;
}

uint64_t llvm::SLPVectorizerPass::vectorizeStores(uint64_t a1, uint64_t a2, uint64_t a3, llvm::slpvectorizer::BoUpSLP *a4)
{
  uint64_t v5;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _DWORD *v18;
  const void **v19;
  const void **v20;
  void *v21;
  unint64_t v22;
  uint64_t v24;
  signed int v25;
  int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t VectorElementSize;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  char *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t *v50;
  char *v51;
  uint64_t *v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  BOOL v58;
  char *v59;
  uint64_t *v60;
  int v61;
  unsigned int v62;
  int v63;
  _BYTE *v64;
  uint64_t v65;
  char *v66;
  unint64_t v68;
  int v69;
  int v70;
  unsigned int v71;
  char v72;
  llvm::slpvectorizer::BoUpSLP *v73;
  void **v74;
  _QWORD v75[4];
  int v76;
  void **v77;
  void **v78;
  int v79;
  unint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  int v84;
  _BYTE v85[128];
  _QWORD v86[2];
  void *v87;
  uint64_t v88;
  _BYTE v89[64];
  void *v90;
  uint64_t v91;
  _BYTE v92[32];
  uint64_t *v93;
  int v94;
  int v95;
  _QWORD v96[18];

  v5 = a3;
  v96[16] = *MEMORY[0x1E0C80C00];
  v86[0] = a2;
  v86[1] = a3;
  v81 = v85;
  v82 = v85;
  v83 = 16;
  v84 = 0;
  if (a3 > 0x39)
  {
    v7 = operator new();
    *(_QWORD *)v7 = v7 + 16;
    *(_QWORD *)(v7 + 8) = 0x600000000;
    sub_1C4765AA4((char *)v7, (v5 + 63) >> 6, 0);
    *(_DWORD *)(v7 + 64) = v5;
  }
  else
  {
    v7 = (a3 << 58) | 1;
  }
  v80 = v7;
  v8 = dword_1ED82BB38;
  v9 = v5 << 32;
  v10 = (int)v5;
  v11 = v5 | 0x7FFFFFFF00000000;
  v93 = v96;
  v95 = 16;
  if ((unint64_t)(v5 << 32) < 0x1000000001)
  {
    if (v9)
    {
      v14 = v96;
      v15 = (int)v5;
      do
      {
        *v14++ = v11;
        --v15;
      }
      while (v15);
    }
  }
  else
  {
    v94 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, (uint64_t)v96, (int)v5, 8);
    v12 = v93;
    v13 = (int)v5;
    do
    {
      *v12++ = v11;
      --v13;
    }
    while (v13);
  }
  v94 = v5;
  if (v5 > 0x39)
  {
    v16 = operator new();
    *(_QWORD *)v16 = v16 + 16;
    *(_QWORD *)(v16 + 8) = 0x600000000;
    sub_1C4765AA4((char *)v16, (v5 + 63) >> 6, 0);
    *(_DWORD *)(v16 + 64) = v5;
  }
  else
  {
    v16 = (v5 << 58) | 1;
  }
  v87 = (void *)v16;
  v90 = v92;
  v91 = 0x400000000;
  if (v9 >= 0x400000001)
  {
    sub_1C63E2E58((uint64_t)&v90, (int)v5, &v87);
  }
  else
  {
    if (v9)
    {
      v17 = v92;
      while (1)
      {
        *v17 = 1;
        v18 = v87;
        if ((v87 & 1) == 0)
          break;
LABEL_16:
        *v17++ = v18;
        if (!--v10)
          goto LABEL_29;
      }
      v19 = (const void **)operator new();
      v18 = v19;
      v20 = (const void **)v87;
      v21 = v19 + 2;
      *v19 = v19 + 2;
      v19[1] = (const void *)0x600000000;
      v22 = *((unsigned int *)v20 + 2);
      if (v19 == v20 || v22 == 0)
      {
LABEL_28:
        v18[16] = *((_DWORD *)v20 + 16);
        goto LABEL_16;
      }
      if (v22 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v19, (uint64_t)(v19 + 2), *((unsigned int *)v20 + 2), 8);
        v24 = *((unsigned int *)v20 + 2);
        if (!(_DWORD)v24)
        {
LABEL_27:
          v18[2] = v22;
          goto LABEL_28;
        }
        v21 = *(void **)v18;
      }
      else
      {
        v24 = *((unsigned int *)v20 + 2);
      }
      memcpy(v21, *v20, 8 * v24);
      goto LABEL_27;
    }
LABEL_29:
    LODWORD(v91) = v5;
  }
  sub_1C4914448((void ***)&v87);
  v79 = 0;
  v75[0] = a1;
  v75[1] = v86;
  v75[2] = &v80;
  v75[3] = &v79;
  v76 = v8;
  v77 = &v90;
  v78 = (void **)&v93;
  if ((int)v5 >= 1)
  {
    v25 = v5;
    do
    {
      v26 = v25--;
      if ((int)v5 - v25 <= v26)
        v27 = v26;
      else
        v27 = v5 - v25;
      v79 = 0;
      if (v27 >= 2)
      {
        v28 = 1;
        do
        {
          if (v26 > v28 && (sub_1C60A7524((uint64_t)v75, v25 - v28, v25) & 1) != 0)
            break;
          if (v28 + v25 < (int)v5 && (sub_1C60A7524((uint64_t)v75, v28 + v25, v25) & 1) != 0)
            break;
          ++v28;
        }
        while (v28 < (int)v27);
      }
    }
    while (v26 > 1);
  }
  if (v5 > 0x39)
  {
    v29 = operator new();
    *(_QWORD *)v29 = v29 + 16;
    *(_QWORD *)(v29 + 8) = 0x600000000;
    sub_1C4765AA4((char *)v29, (v5 + 63) >> 6, 0);
    *(_DWORD *)(v29 + 64) = v5;
  }
  else
  {
    v29 = (v5 << 58) | 1;
  }
  v74 = (void **)v29;
  if ((int)v5 >= 1)
  {
    v68 = v29;
    v72 = 0;
    v30 = v5;
    v69 = v5;
    v73 = a4;
    while (1)
    {
      LODWORD(v31) = v30 - 1;
      if (LODWORD(v93[v30 - 1]) != (_DWORD)v5)
      {
        if ((v80 & 1) != 0)
        {
          if (((1 << v31) & (v80 >> 1) & ~(-1 << (v80 >> 58))) == 0)
          {
LABEL_52:
            v87 = v89;
            v88 = 0x800000000;
            v70 = v30;
            while ((_DWORD)v31 != (_DWORD)v5)
            {
              v38 = (char *)sub_1C477672C((uint64_t)&v81, *(_QWORD *)(v86[0] + 8 * (int)v31));
              v39 = v82 == v81 ? (uint64_t *)((char *)&v83 + 4) : &v83;
              if (v38 != &v82[8 * *(unsigned int *)v39])
                break;
              v40 = (int)v31;
              v41 = *(_QWORD *)(v86[0] + 8 * (int)v31);
              v42 = v88;
              if (v88 >= (unint64_t)HIDWORD(v88))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, (uint64_t)v89, v88 + 1, 8);
                v42 = v88;
              }
              *((_QWORD *)v87 + v42) = v41;
              LODWORD(v88) = v88 + 1;
              if ((v80 & 1) != 0)
                v80 = v80 & 0xFC00000000000000 | (2
                                                  * (((v80 >> 1) & ~(-1 << (v80 >> 58)) | (1 << v40)) & ~(-1 << (v80 >> 58)))) | 1;
              else
                *(_QWORD *)(*(_QWORD *)v80 + 8 * (v40 >> 6)) |= 1 << v40;
              v43 = (unsigned int *)&v93[v40];
              v31 = *v43;
              if (v43[1] != 1)
              {
                if ((_DWORD)v31 == (_DWORD)v5)
                  break;
                if ((v80 & 1) != 0)
                {
                  if (((1 << v31) & (v80 >> 1) & ~(-1 << (v80 >> 58))) == 0)
                    break;
                }
                else if ((*(_QWORD *)(*(_QWORD *)v80 + ((v31 >> 3) & 0x1FFFFFF8)) & (1 << v31)) == 0)
                {
                  break;
                }
                if ((v68 & 1) != 0)
                {
                  if (((v68 >> 1) & ~(-1 << (v68 >> 58)) & (1 << v40)) != 0)
                    break;
                }
                else if ((*(_QWORD *)(*(_QWORD *)v68 + 8 * (v40 >> 6)) & (1 << v40)) != 0)
                {
                  break;
                }
                v59 = (char *)sub_1C477672C((uint64_t)&v81, *(_QWORD *)(v86[0] + 8 * (int)v31));
                if (v82 == v81)
                  v60 = (uint64_t *)((char *)&v83 + 4);
                else
                  v60 = &v83;
                if (v59 == &v82[8 * *(unsigned int *)v60])
                {
                  if ((v68 & 1) != 0)
                  {
                    v68 = v68 & 0xFC00000000000000 | (2
                                                      * (((1 << v40) | (v68 >> 1) & ~(-1 << (v68 >> 58))) & ~(-1 << (v68 >> 58)))) | 1;
                    v74 = (void **)v68;
                  }
                  else
                  {
                    *(_QWORD *)(*(_QWORD *)v68 + 8 * (v40 >> 6)) |= 1 << v40;
                  }
                  v61 = v70;
                  v62 = v93[v40];
                  if ((v80 & 1) != 0)
                    v80 = ((2 * ~((-1 << (v80 >> 58)) | (1 << v62))) | 0xFC00000000000000) & v80 | 1;
                  else
                    *(_QWORD *)(*(_QWORD *)v80 + 8 * (v62 >> 6)) &= ~(1 << v62);
                  v63 = v62 + 2;
                  if (v70 <= v63)
                    v61 = v63;
                  v70 = v61;
                }
                break;
              }
            }
            v32 = *((_DWORD *)a4 + 500);
            VectorElementSize = llvm::slpvectorizer::BoUpSLP::getVectorElementSize(a4, *(llvm::Value **)v87);
            v34 = 1 << ~__clz(v32 / VectorElementSize);
            if (VectorElementSize <= v32)
              v35 = v34;
            else
              v35 = 0;
            if (*((_DWORD *)a4 + 501) / VectorElementSize <= 2)
              v36 = 2;
            else
              v36 = *((_DWORD *)a4 + 501) / VectorElementSize;
            if (word_1ED82BA00)
              v37 = dword_1ED82BA78;
            else
              v37 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(***((_QWORD ***)a4 + 242) + 744))(**((_QWORD **)a4 + 242), VectorElementSize, 33);
            if (v37)
              v44 = v37;
            else
              v44 = -1;
            if (v35 >= v44)
              v45 = v44;
            else
              v45 = v35;
            if (v45 >= v36)
            {
              v46 = 0;
              v47 = v88;
              v71 = v36;
              do
              {
                v48 = v46 + v45;
                if (v46 + v45 <= v47)
                {
                  v49 = v46;
                  do
                  {
                    v50 = (uint64_t *)((char *)v87 + 8 * v46);
                    v51 = (char *)sub_1C477672C((uint64_t)&v81, *v50);
                    if (v82 == v81)
                      v52 = (uint64_t *)((char *)&v83 + 4);
                    else
                      v52 = &v83;
                    if (v51 == &v82[8 * *(unsigned int *)v52]
                      && ((v53 = (char *)sub_1C477672C((uint64_t)&v81, v50[v45 - 1]), v82 != v81)
                        ? (v54 = &v83)
                        : (v54 = (uint64_t *)((char *)&v83 + 4)),
                          v53 == &v82[8 * *(unsigned int *)v54]
                       && llvm::SLPVectorizerPass::vectorizeStoreChain((int)v53, (llvm::Value **)v50, v45, v73)))
                    {
                      v55 = 8 * v45;
                      do
                      {
                        v56 = *v50++;
                        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v81, v56);
                        v55 -= 8;
                      }
                      while (v55);
                      if ((_DWORD)v46 == (_DWORD)v49)
                        v57 = v45;
                      else
                        v57 = 0;
                      v49 = v57 + v49;
                      v72 = 1;
                    }
                    else
                    {
                      v48 = v46 + 1;
                    }
                    LODWORD(v46) = v48;
                    v48 += v45;
                  }
                  while (v48 <= v47);
                  v47 = v88;
                  v46 = v49;
                  v36 = v71;
                }
                if (v47 <= v46)
                  break;
                v45 >>= 1;
              }
              while (v45 >= v36);
            }
            if (v87 != v89)
              free(v87);
            v30 = v70;
            LODWORD(v31) = v70 - 1;
            a4 = v73;
            LODWORD(v5) = v69;
          }
        }
        else if ((*(_QWORD *)(*(_QWORD *)v80 + 8 * (v31 >> 6)) & (1 << v31)) == 0)
        {
          goto LABEL_52;
        }
      }
      v58 = v30 <= 1;
      v30 = v31;
      if (v58)
        goto LABEL_133;
    }
  }
  v72 = 0;
LABEL_133:
  sub_1C4914448(&v74);
  v64 = v90;
  if ((_DWORD)v91)
  {
    v65 = 8 * v91;
    v66 = (char *)v90 - 8;
    do
    {
      sub_1C4914448((void ***)&v66[v65]);
      v65 -= 8;
    }
    while (v65);
    v64 = v90;
  }
  if (v64 != v92)
    free(v64);
  if (v93 != v96)
    free(v93);
  sub_1C4914448((void ***)&v80);
  if (v82 != v81)
    free(v82);
  return v72 & 1;
}

uint64_t sub_1C60A7524(uint64_t a1, signed int a2, signed int a3)
{
  _DWORD *v3;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  const llvm::DataLayout **v12;
  uint64_t v13;
  unint64_t PointersDiff;
  signed int v15;
  uint64_t v17;
  signed int *v18;
  int v19;
  signed int *v20;
  BOOL v21;

  v3 = *(_DWORD **)(a1 + 24);
  if (*v3 >= *(_DWORD *)(a1 + 32))
    return 1;
  v7 = **(_QWORD **)(a1 + 40);
  v8 = *(_QWORD *)(v7 + 8 * a3);
  if ((v8 & 1) != 0)
  {
    if (((1 << a2) & (v8 >> 1) & ~(-1 << (v8 >> 58))) != 0)
    {
LABEL_4:
      v9 = **(_QWORD **)(a1 + 48);
      if (*(_DWORD *)(v9 + 8 * a2 + 4) == 1)
        return *(_DWORD *)(v9 + 8 * a2) == a3;
      return 0;
    }
  }
  else if ((*(_QWORD *)(*(_QWORD *)v8 + 8 * (a2 >> 6)) & (1 << a2)) != 0)
  {
    goto LABEL_4;
  }
  v12 = *(const llvm::DataLayout ***)a1;
  ++*v3;
  sub_1C496F8DC((unint64_t *)(v7 + 8 * a3), a2);
  sub_1C496F8DC((unint64_t *)(**(_QWORD **)(a1 + 40) + 8 * a2), a3);
  v13 = **(_QWORD **)(a1 + 8);
  PointersDiff = llvm::getPointersDiff(**(llvm ***)(*(_QWORD *)(v13 + 8 * a2) - 64), *(llvm::Type **)(*(_QWORD *)(v13 + 8 * a2) - 32), **(llvm::Value ***)(*(_QWORD *)(v13 + 8 * a3) - 64), *(llvm::Type **)(*(_QWORD *)(v13 + 8 * a3) - 32), v12[8], *v12, (llvm::ScalarEvolution *)1, 1, v21);
  v15 = PointersDiff;
  if ((PointersDiff & 0xFF00000000) == 0 || (_DWORD)PointersDiff == 0)
    return 0;
  v17 = **(_QWORD **)(a1 + 48);
  if ((PointersDiff & 0x80000000) == 0)
  {
    if (*(_DWORD *)(v17 + 8 * a2 + 4) > (int)PointersDiff)
    {
      sub_1C496F8DC(*(unint64_t **)(a1 + 16), a3);
      v18 = (signed int *)(**(_QWORD **)(a1 + 48) + 8 * a2);
      *v18 = a3;
      v18[1] = v15;
      return v15 == 1;
    }
    return 0;
  }
  result = 0;
  v19 = -v15;
  if (*(_DWORD *)(v17 + 8 * a3 + 4) > v19)
  {
    sub_1C496F8DC(*(unint64_t **)(a1 + 16), a2);
    result = 0;
    v20 = (signed int *)(**(_QWORD **)(a1 + 48) + 8 * a3);
    *v20 = a2;
    v20[1] = v19;
  }
  return result;
}

uint64_t llvm::SLPVectorizerPass::tryToVectorizePair(llvm::SLPVectorizerPass *this, llvm::Value *a2, llvm::Value *a3, llvm::slpvectorizer::BoUpSLP *a4)
{
  uint64_t v4;
  uint64_t v6[3];

  v4 = 0;
  v6[2] = *MEMORY[0x1E0C80C00];
  if (a2 && a3)
  {
    if (*((_BYTE *)a2 + 16) == 90 || *((_BYTE *)a3 + 16) == 90)
    {
      return 0;
    }
    else
    {
      v6[0] = (uint64_t)a2;
      v6[1] = (uint64_t)a3;
      return llvm::SLPVectorizerPass::tryToVectorizeList((uint64_t)this, v6, 2uLL, a4, 0);
    }
  }
  return v4;
}

uint64_t llvm::SLPVectorizerPass::tryToVectorizeList(uint64_t a1, uint64_t *a2, unint64_t a3, llvm::slpvectorizer::BoUpSLP *a4, char a5)
{
  uint64_t *v7;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  llvm::Value *v12;
  _BYTE *v13;
  llvm::Type *v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t VectorElementSize;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  llvm::OptimizationRemarkEmitter *v24;
  uint64_t v25;
  int32x2_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  int v30;
  size_t v31;
  size_t v32;
  void *p_p;
  char *v34;
  void *v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  void **v39;
  char *v40;
  unint64_t v41;
  void **v42;
  unsigned int v43;
  llvm::OptimizationRemarkEmitter *v44;
  uint64_t v45;
  int32x2_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  void **v50;
  unint64_t v51;
  void **v52;
  llvm::FixedVectorType **v53;
  unsigned int v54;
  llvm::FixedVectorType *v55;
  uint64_t *v56;
  llvm::Type *v57;
  double v58;
  uint64_t v59;
  int v60;
  int8x8_t v61;
  unsigned int v62;
  uint64_t v63;
  BOOL v64;
  BOOL v65;
  char v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int64_t TreeCost;
  uint64_t v83;
  _BOOL4 v84;
  void **v85;
  int v86;
  _BOOL4 v87;
  uint64_t v88;
  uint64_t v89;
  int32x2_t v90;
  uint64_t v91;
  uint64_t v92;
  llvm::DiagnosticInfoOptimizationBase *v93;
  char *v94;
  unint64_t v95;
  void **v96;
  llvm::OptimizationRemarkEmitter *v97;
  uint64_t v98;
  int32x2_t v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  void **v103;
  unint64_t v104;
  void **v105;
  llvm::OptimizationRemarkEmitter *v106;
  uint64_t v107;
  int32x2_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  void **v114;
  unint64_t v115;
  void **v116;
  llvm::Value *v117;
  char v118;
  char v119;
  uint64_t v120;
  llvm::FixedVectorType *v121;
  uint64_t v122;
  unsigned int v123;
  llvm::OptimizationRemarkEmitter *v124;
  llvm::slpvectorizer::BoUpSLP *v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v129;
  std::string v130;
  void *v131;
  char v132;
  void *v133[2];
  char v134;
  void *v135;
  char v136;
  llvm::Value *v137;
  uint64_t v138;
  void *__p;
  uint64_t v140;
  char v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  char v147;
  char v148;
  uint64_t v149;
  int v150;
  void **v151;
  void *v152[2];
  uint64_t v153;
  void *v154;
  char v155;
  _OWORD v156[5];
  void *v157;
  unsigned int v158;
  uint64_t v159;
  int32x2_t v160[6];
  const char *v161;
  uint64_t v162;
  char v163;
  char v164;
  void *v165;
  uint64_t v166;
  _BYTE v167[256];
  char v168;
  int v169;
  uint64_t v170;
  uint64_t v171;

  v171 = *MEMORY[0x1E0C80C00];
  if (a3 < 2)
    return 0;
  v7 = a2;
  sub_1C6095230((uint64_t)&v137, a2, a3);
  v9 = v138;
  if (!v138 || *(_BYTE *)(v138 + 16) == 28)
    return 0;
  v11 = 0;
  v12 = v137;
  do
  {
    v13 = (_BYTE *)v7[v11];
    if (v13[16] != 90)
    {
      v14 = *(llvm::Type **)v13;
      v15 = *(_DWORD *)(*(_QWORD *)v13 + 8);
      v16 = v15 > 0x14u || ((1 << v15) & 0x10A07F) == 0;
      v17 = v15 & 0xFD;
      if (v16 || v17 == 4)
      {
        v24 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)a4 + 249);
        v25 = ****(_QWORD ****)v24;
        if (*(_QWORD *)(v25 + 128)
          || (result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v25 + 72) + 48))(*(_QWORD *)(v25 + 72)),
              (_DWORD)result))
        {
          v152[0] = 0;
          v152[1] = 0;
          v153 = 0;
          LODWORD(v143) = 0;
          v147 = 0;
          v149 = 0;
          v142 = &unk_1E81A7208;
          v151 = v152;
          v150 = 0;
          v145 = 0;
          v146 = 0;
          v144 = 0;
          llvm::Type::print(v14, (llvm::raw_ostream *)&v142, 0, 0);
          v26 = *(int32x2_t *)(*((_QWORD *)v12 + 5) + 56);
          llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v160[3], (llvm::Value *)((char *)v12 + 48));
          v27 = *((_QWORD *)v12 + 5);
          v160[1].i32[0] = 10;
          v160[1].i8[4] = 2;
          v160[2] = v26;
          v160[5] = (int32x2_t)"slp-vectorizer";
          v161 = "UnsupportedType";
          v162 = 15;
          v163 = 0;
          v164 = 0;
          v165 = v167;
          v166 = 0x400000000;
          v168 = 0;
          v169 = -1;
          v170 = v27;
          v160[0] = (int32x2_t)&off_1E814E538;
          *(_QWORD *)&v156[0] = "Cannot SLP vectorize list: type ";
          *((_QWORD *)&v156[0] + 1) = 32;
          sub_1C53B17B4((uint64_t)&v165, (const void **)v156);
          v28 = (char *)v151;
          v29 = *((_BYTE *)v151 + 23);
          v30 = v29;
          v31 = v29 & 0x7F;
          if (v30 >= 0)
            v32 = v31;
          else
            v32 = (size_t)v151[1];
          sub_1C484371C((uint64_t)&__p, v32 + 29);
          if (v141 >= 0)
            p_p = &__p;
          else
            p_p = __p;
          if (v32)
          {
            if (v28[23] >= 0)
              v34 = v28;
            else
              v34 = *(char **)v28;
            memmove(p_p, v34, v32);
          }
          strcpy((char *)p_p + v32, " is unsupported by vectorizer");
          v35 = __p;
          if (v141 >= 0)
            v35 = &__p;
          v36 = v141 & 0x7F;
          if (v141 < 0)
            v36 = v140;
          *(_QWORD *)&v156[0] = v35;
          *((_QWORD *)&v156[0] + 1) = v36;
          sub_1C53B17B4((uint64_t)&v165, (const void **)v156);
          sub_1C61998EC((uint64_t)v156, (uint64_t)v160);
          *(_QWORD *)&v156[0] = &off_1E814E538;
          if (v141 < 0)
            operator delete(__p);
          v160[0] = (int32x2_t)&off_1E814E790;
          v37 = (char *)v165;
          if ((_DWORD)v166)
          {
            v38 = (unint64_t)v166 << 6;
            do
            {
              v39 = (void **)&v37[v38];
              if (v37[v38 - 17] < 0)
                operator delete(*(v39 - 5));
              if (*((char *)v39 - 41) < 0)
                operator delete(*(v39 - 8));
              v38 -= 64;
            }
            while (v38);
            v37 = (char *)v165;
          }
          if (v37 != v167)
            free(v37);
          v142 = off_1E81A6E70;
          if (v150 == 1 && v144)
            MEMORY[0x1CAA32F9C](v144, 0x1000C8077774924);
          if (SHIBYTE(v153) < 0)
            operator delete(v152[0]);
          llvm::OptimizationRemarkEmitter::emit(v24, (llvm::DiagnosticInfoOptimizationBase *)v156);
          *(_QWORD *)&v156[0] = &off_1E814E790;
          v40 = (char *)v157;
          if (v158)
          {
            v41 = (unint64_t)v158 << 6;
            do
            {
              v42 = (void **)&v40[v41];
              if (v40[v41 - 17] < 0)
                operator delete(*(v42 - 5));
              if (*((char *)v42 - 41) < 0)
                operator delete(*(v42 - 8));
              v41 -= 64;
            }
            while (v41);
            v40 = (char *)v157;
          }
          goto LABEL_210;
        }
        return result;
      }
    }
    ++v11;
  }
  while (a3 != v11);
  VectorElementSize = llvm::slpvectorizer::BoUpSLP::getVectorElementSize(a4, v137);
  if (*((_DWORD *)a4 + 501) / VectorElementSize <= 2)
    v20 = 2;
  else
    v20 = *((_DWORD *)a4 + 501) / VectorElementSize;
  v21 = 1 << (__clz(a3) ^ 0x3Fu);
  v127 = v20;
  if (v20 <= v21)
    v22 = v21;
  else
    v22 = v20;
  if (word_1ED82BA00)
    v23 = dword_1ED82BA78;
  else
    v23 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(***((_QWORD ***)a4 + 242) + 744))(**((_QWORD **)a4 + 242), VectorElementSize, *(unsigned __int8 *)(v9 + 16) - 28);
  if (v23)
    v43 = v23;
  else
    v43 = -1;
  if (v22 < v43)
    v43 = v22;
  v126 = v43;
  if (v43 <= 1)
  {
    v44 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)a4 + 249);
    v45 = ****(_QWORD ****)v44;
    if (*(_QWORD *)(v45 + 128)
      || (result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v45 + 72) + 48))(*(_QWORD *)(v45 + 72)),
          (_DWORD)result))
    {
      v46 = *(int32x2_t *)(*((_QWORD *)v12 + 5) + 56);
      llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v160[3], (llvm::Value *)((char *)v12 + 48));
      v47 = *((_QWORD *)v12 + 5);
      v160[1].i32[0] = 10;
      v160[1].i8[4] = 2;
      v160[2] = v46;
      v160[5] = (int32x2_t)"slp-vectorizer";
      v161 = "SmallVF";
      v162 = 7;
      v163 = 0;
      v164 = 0;
      v165 = v167;
      v166 = 0x400000000;
      v168 = 0;
      v169 = -1;
      v170 = v47;
      v160[0] = (int32x2_t)&off_1E814E538;
      *(_QWORD *)&v156[0] = "Cannot SLP vectorize list: vectorization factor ";
      *((_QWORD *)&v156[0] + 1) = 48;
      sub_1C53B17B4((uint64_t)&v165, (const void **)v156);
      *(_QWORD *)&v156[0] = "less than 2 is not supported";
      *((_QWORD *)&v156[0] + 1) = 28;
      sub_1C53B17B4((uint64_t)&v165, (const void **)v156);
      sub_1C61998EC((uint64_t)v156, (uint64_t)v160);
      *(_QWORD *)&v156[0] = &off_1E814E538;
      v160[0] = (int32x2_t)&off_1E814E790;
      v48 = (char *)v165;
      if ((_DWORD)v166)
      {
        v49 = (unint64_t)v166 << 6;
        do
        {
          v50 = (void **)&v48[v49];
          if (v48[v49 - 17] < 0)
            operator delete(*(v50 - 5));
          if (*((char *)v50 - 41) < 0)
            operator delete(*(v50 - 8));
          v49 -= 64;
        }
        while (v49);
        v48 = (char *)v165;
      }
      if (v48 != v167)
        free(v48);
      llvm::OptimizationRemarkEmitter::emit(v44, (llvm::DiagnosticInfoOptimizationBase *)v156);
      *(_QWORD *)&v156[0] = &off_1E814E790;
      v40 = (char *)v157;
      if (v158)
      {
        v51 = (unint64_t)v158 << 6;
        do
        {
          v52 = (void **)&v40[v51];
          if (v40[v51 - 17] < 0)
            operator delete(*(v52 - 5));
          if (*((char *)v52 - 41) < 0)
            operator delete(*(v52 - 8));
          v51 -= 64;
        }
        while (v51);
        goto LABEL_209;
      }
      goto LABEL_210;
    }
    return result;
  }
  __p = (void *)dword_1ED82B778;
  LODWORD(v140) = 0;
  v53 = (llvm::FixedVectorType **)*v7;
  if (*(_BYTE *)(*v7 + 16) == 90)
    v53 = (llvm::FixedVectorType **)*(v53 - 8);
  if (a3 < 2 || v126 < v127)
    goto LABEL_162;
  v118 = 0;
  v119 = 0;
  v54 = 0;
  v55 = *v53;
  v125 = a4;
  v56 = (uint64_t *)((char *)a4 + 1048);
  v117 = v12;
  v57 = (llvm::Type *)v126;
  v121 = *v53;
  v122 = a1;
  do
  {
    v58 = llvm::FixedVectorType::get(v55, v57);
    v60 = (*(uint64_t (**)(_QWORD, uint64_t, double))(***(_QWORD ***)(a1 + 8) + 968))(**(_QWORD **)(a1 + 8), v59, v58);
    v129 = v57 >> 1;
    if (v54 < a3 && v60 != (_DWORD)v57)
    {
      v123 = v54;
      while (1)
      {
        v62 = v54 + (_DWORD)v57;
        if (v54 + v57 <= a3)
          v63 = v57;
        else
          v63 = a3 - v54;
        v61.i32[0] = v63;
        v61 = vcnt_s8(v61);
        v61.i16[0] = vaddlv_u8((uint8x8_t)v61);
        if (v61.i32[0] == 1)
        {
          v64 = (_DWORD)v57 == v127;
          v65 = v57 > v127;
          v66 = a5;
          if (v63 >= v126)
            v66 = 0;
          if (v63 > v129)
            v65 = 0;
          if (v63 >= 2)
            v64 = 0;
          if ((v66 & 1) != 0 || v65 || v64)
          {
LABEL_156:
            v57 = (llvm::Type *)v129;
            v55 = v121;
            a1 = v122;
            v54 = v123;
            goto LABEL_157;
          }
          v67 = v7;
          v68 = &v7[v54];
          if ((_DWORD)v63)
          {
            v69 = 8 * v63;
            v70 = &v7[v54];
            while (1)
            {
              if (*v70 && *(unsigned __int8 *)(*v70 + 16) >= 0x1Cu)
              {
                v160[0] = (int32x2_t)*v70;
                *(_QWORD *)&v156[0] = 0;
                if ((sub_1C61DB414(v56, v160, v156) & 1) != 0)
                  break;
              }
              ++v70;
              v69 -= 8;
              if (!v69)
                goto LABEL_123;
            }
          }
          else
          {
LABEL_123:
            llvm::slpvectorizer::BoUpSLP::buildTree((uint64_t)v125, v68, v63, 0, 0);
            if (!llvm::slpvectorizer::BoUpSLP::isTreeTinyAndNotFullyVectorizable(v125, 0))
            {
              llvm::slpvectorizer::BoUpSLP::reorderTopToBottom((uint64_t **)v125, v72, v73, v74);
              llvm::slpvectorizer::BoUpSLP::reorderBottomToTop((void ***)v125, *(unsigned __int8 *)(*v68 + 16) != 90, v75, v76);
              memset(v160, 0, sizeof(v160));
              llvm::slpvectorizer::BoUpSLP::buildExternalUses((unint64_t)v125, (uint64_t)v160);
              sub_1C63E18F0((uint64_t)v160);
              llvm::slpvectorizer::BoUpSLP::computeMinimumValueSizes(v125);
              TreeCost = llvm::slpvectorizer::BoUpSLP::getTreeCost((void *****)v125, 0, 0, v77, v78, v79, v80, v81);
              v142 = (void *)TreeCost;
              v143 = v83;
              v84 = (int)v140 > (int)v83;
              if ((_DWORD)v140 == (_DWORD)v83)
                v84 = TreeCost < (uint64_t)__p;
              v16 = !v84;
              v85 = &__p;
              if (!v16)
                v85 = &v142;
              v86 = *((_DWORD *)v85 + 2);
              __p = *v85;
              LODWORD(v140) = v86;
              v87 = TreeCost < -(uint64_t)dword_1ED82B778;
              if ((_DWORD)v83)
                v87 = (int)v83 < 0;
              if (v87)
              {
                v88 = TreeCost;
                v124 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)v125 + 249);
                v89 = *v68;
                v90 = *(int32x2_t *)(*(_QWORD *)(*v68 + 40) + 56);
                v120 = v83;
                llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)v156, (const llvm::DebugLoc *)(v89 + 48));
                v91 = *(_QWORD *)(v89 + 40);
                v160[1].i32[0] = 9;
                v160[1].i8[4] = 2;
                *(_OWORD *)v160[3].i8 = v156[0];
                v160[2] = v90;
                v160[5] = (int32x2_t)"slp-vectorizer";
                v161 = "VectorizedList";
                v162 = 14;
                v163 = 0;
                v164 = 0;
                v165 = v167;
                v166 = 0x400000000;
                v168 = 0;
                v169 = -1;
                v170 = v91;
                v160[0] = (int32x2_t)&off_1E814E500;
                *(_QWORD *)&v156[0] = "SLP vectorized with cost ";
                *((_QWORD *)&v156[0] + 1) = 25;
                sub_1C53B17B4((uint64_t)&v165, (const void **)v156);
                llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v133, "Cost", 4uLL, v88, v120);
                v92 = sub_1C47E3888((uint64_t)v160, (uint64_t)v133);
                *(_QWORD *)&v156[0] = " and with tree size ";
                *((_QWORD *)&v156[0] + 1) = 20;
                sub_1C53B17B4(v92 + 80, (const void **)v156);
                llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v130, "TreeSize", 8uLL, *((_DWORD *)v125 + 2));
                v93 = (llvm::DiagnosticInfoOptimizationBase *)sub_1C47E3888(v92, (uint64_t)&v130);
                llvm::OptimizationRemarkEmitter::emit(v124, v93);
                if (v132 < 0)
                  operator delete(v131);
                v7 = v67;
                if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v130.__r_.__value_.__l.__data_);
                if (v136 < 0)
                  operator delete(v135);
                if (v134 < 0)
                  operator delete(v133[0]);
                v160[0] = (int32x2_t)&off_1E814E790;
                v94 = (char *)v165;
                if ((_DWORD)v166)
                {
                  v95 = (unint64_t)v166 << 6;
                  do
                  {
                    v96 = (void **)&v94[v95];
                    if (v94[v95 - 17] < 0)
                      operator delete(*(v96 - 5));
                    if (*((char *)v96 - 41) < 0)
                      operator delete(*(v96 - 8));
                    v95 -= 64;
                  }
                  while (v95);
                  v94 = (char *)v165;
                }
                if (v94 != v167)
                  free(v94);
                memset(v160, 0, 20);
                memset(&v160[3], 0, 24);
                llvm::slpvectorizer::BoUpSLP::vectorizeTree((uint64_t *)v125, v160);
                sub_1C63E18F0((uint64_t)v160);
                v54 += (_DWORD)v57 - 1;
                v118 = 1;
                v123 = v62;
              }
              else
              {
                v7 = v67;
              }
              v119 = 1;
              goto LABEL_125;
            }
          }
          v7 = v67;
        }
LABEL_125:
        if (++v54 >= a3)
          goto LABEL_156;
      }
    }
    v57 = (llvm::Type *)v129;
LABEL_157:
    ;
  }
  while (v54 + 1 < a3 && v57 >= v127);
  if (!(v118 & 1 | ((v119 & 1) == 0)))
  {
    v106 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)v125 + 249);
    v107 = ****(_QWORD ****)v106;
    if (!*(_QWORD *)(v107 + 128))
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v107 + 72) + 48))(*(_QWORD *)(v107 + 72));
      if (!(_DWORD)result)
        return result;
    }
    v108 = *(int32x2_t *)(*((_QWORD *)v117 + 5) + 56);
    llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v160[3], (llvm::Value *)((char *)v117 + 48));
    v109 = *((_QWORD *)v117 + 5);
    v160[1].i32[0] = 10;
    v160[1].i8[4] = 2;
    v160[2] = v108;
    v160[5] = (int32x2_t)"slp-vectorizer";
    v161 = "NotBeneficial";
    v162 = 13;
    v163 = 0;
    v164 = 0;
    v165 = v167;
    v166 = 0x400000000;
    v168 = 0;
    v169 = -1;
    v170 = v109;
    v160[0] = (int32x2_t)&off_1E814E538;
    *(_QWORD *)&v156[0] = "List vectorization was possible but not beneficial with cost ";
    *((_QWORD *)&v156[0] + 1) = 61;
    sub_1C53B17B4((uint64_t)&v165, (const void **)v156);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&v142, "Cost", 4uLL, (uint64_t)__p, v140);
    v110 = sub_1C47E3888((uint64_t)v160, (uint64_t)&v142);
    *(_QWORD *)&v156[0] = " >= ";
    *((_QWORD *)&v156[0] + 1) = 4;
    sub_1C53B17B4(v110 + 80, (const void **)v156);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(v152, "Treshold", 8uLL, -dword_1ED82B778);
    v111 = sub_1C47E3888(v110, (uint64_t)v152);
    sub_1C61998EC((uint64_t)v156, v111);
    *(_QWORD *)&v156[0] = &off_1E814E538;
    if (v155 < 0)
      operator delete(v154);
    if (SHIBYTE(v153) < 0)
      operator delete(v152[0]);
    if (v148 < 0)
      operator delete(v145);
    if (SHIBYTE(v144) < 0)
      operator delete(v142);
    v160[0] = (int32x2_t)&off_1E814E790;
    v112 = (char *)v165;
    if ((_DWORD)v166)
    {
      v113 = (unint64_t)v166 << 6;
      do
      {
        v114 = (void **)&v112[v113];
        if (v112[v113 - 17] < 0)
          operator delete(*(v114 - 5));
        if (*((char *)v114 - 41) < 0)
          operator delete(*(v114 - 8));
        v113 -= 64;
      }
      while (v113);
      v112 = (char *)v165;
    }
    if (v112 != v167)
      free(v112);
    llvm::OptimizationRemarkEmitter::emit(v106, (llvm::DiagnosticInfoOptimizationBase *)v156);
    *(_QWORD *)&v156[0] = &off_1E814E790;
    v40 = (char *)v157;
    if (v158)
    {
      v115 = (unint64_t)v158 << 6;
      do
      {
        v116 = (void **)&v40[v115];
        if (v40[v115 - 17] < 0)
          operator delete(*(v116 - 5));
        if (*((char *)v116 - 41) < 0)
          operator delete(*(v116 - 8));
        v115 -= 64;
      }
      while (v115);
LABEL_209:
      v40 = (char *)v157;
    }
LABEL_210:
    if (v40 != (char *)&v159)
      free(v40);
    return 0;
  }
  v12 = v117;
  a4 = v125;
  if ((v118 & 1) != 0)
    return 1;
LABEL_162:
  v97 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)a4 + 249);
  v98 = ****(_QWORD ****)v97;
  if (*(_QWORD *)(v98 + 128)
    || (result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v98 + 72) + 48))(*(_QWORD *)(v98 + 72)),
        (_DWORD)result))
  {
    v99 = *(int32x2_t *)(*((_QWORD *)v12 + 5) + 56);
    llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v160[3], (llvm::Value *)((char *)v12 + 48));
    v100 = *((_QWORD *)v12 + 5);
    v160[1].i32[0] = 10;
    v160[1].i8[4] = 2;
    v160[2] = v99;
    v160[5] = (int32x2_t)"slp-vectorizer";
    v161 = "NotPossible";
    v162 = 11;
    v163 = 0;
    v164 = 0;
    v165 = v167;
    v166 = 0x400000000;
    v168 = 0;
    v169 = -1;
    v170 = v100;
    v160[0] = (int32x2_t)&off_1E814E538;
    *(_QWORD *)&v156[0] = "Cannot SLP vectorize list: vectorization was impossible";
    *((_QWORD *)&v156[0] + 1) = 55;
    sub_1C53B17B4((uint64_t)&v165, (const void **)v156);
    *(_QWORD *)&v156[0] = " with available vectorization factors";
    *((_QWORD *)&v156[0] + 1) = 37;
    sub_1C53B17B4((uint64_t)&v165, (const void **)v156);
    sub_1C61998EC((uint64_t)v156, (uint64_t)v160);
    *(_QWORD *)&v156[0] = &off_1E814E538;
    v160[0] = (int32x2_t)&off_1E814E790;
    v101 = (char *)v165;
    if ((_DWORD)v166)
    {
      v102 = (unint64_t)v166 << 6;
      do
      {
        v103 = (void **)&v101[v102];
        if (v101[v102 - 17] < 0)
          operator delete(*(v103 - 5));
        if (*((char *)v103 - 41) < 0)
          operator delete(*(v103 - 8));
        v102 -= 64;
      }
      while (v102);
      v101 = (char *)v165;
    }
    if (v101 != v167)
      free(v101);
    llvm::OptimizationRemarkEmitter::emit(v97, (llvm::DiagnosticInfoOptimizationBase *)v156);
    *(_QWORD *)&v156[0] = &off_1E814E790;
    v40 = (char *)v157;
    if (v158)
    {
      v104 = (unint64_t)v158 << 6;
      do
      {
        v105 = (void **)&v40[v104];
        if (v40[v104 - 17] < 0)
          operator delete(*(v105 - 5));
        if (*((char *)v105 - 41) < 0)
          operator delete(*(v105 - 8));
        v104 -= 64;
      }
      while (v104);
      goto LABEL_209;
    }
    goto LABEL_210;
  }
  return result;
}

uint64_t llvm::SLPVectorizerPass::tryToVectorize(llvm::SLPVectorizerPass *this, llvm::Instruction *a2, llvm::slpvectorizer::BoUpSLP *a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v9;
  llvm::Instruction *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  BOOL v29;
  BOOL v30;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v37;
  BOOL v38;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v3 = *((unsigned __int8 *)a2 + 16);
  v4 = v3 - 41;
  v5 = v3 - 81;
  if (v4 >= 0x12 && v5 > 1)
    return 0;
  v9 = *((_DWORD *)a2 + 5);
  v10 = (v9 & 0x40000000) != 0
      ? (llvm::Instruction *)*((_QWORD *)a2 - 1)
      : (llvm::Instruction *)((char *)a2 - 32 * (v9 & 0x7FFFFFF));
  v11 = *(unsigned __int8 *)(*(_QWORD *)v10 + 16) <= 0x1Bu ? 0 : *(_QWORD *)v10;
  v12 = *((_QWORD *)v10 + 4);
  v13 = *(unsigned __int8 *)(v12 + 16) <= 0x1Bu ? 0 : v12;
  if (!v11 || v13 == 0)
    return 0;
  v15 = *((_QWORD *)a2 + 5);
  if (*(_QWORD *)(v11 + 40) != v15 || *(_QWORD *)(v13 + 40) != v15)
    return 0;
  v16 = *(unsigned __int8 *)(v11 + 16);
  if (v16 != 90 && *(_BYTE *)(v13 + 16) != 90)
  {
    v42 = v11;
    v43 = v13;
    if ((llvm::SLPVectorizerPass::tryToVectorizeList((uint64_t)this, &v42, 2uLL, a3, 0) & 1) != 0)
      return 1;
    v16 = *(unsigned __int8 *)(v11 + 16);
  }
  v18 = v16 - 59;
  if ((v16 - 59) >= 0xFFFFFFEE)
    v19 = v11;
  else
    v19 = 0;
  v20 = *(unsigned __int8 *)(v13 + 16) - 59;
  if (v20 >= 0xFFFFFFEE)
    v21 = v13;
  else
    v21 = 0;
  if (v20 < 0xFFFFFFEE)
    goto LABEL_35;
  v22 = *(_QWORD *)(v13 + 8);
  if (!v22 || *(_QWORD *)(v22 + 8))
    goto LABEL_35;
  v33 = *(_QWORD *)(v13 - 64);
  v34 = *(unsigned __int8 *)(v33 + 16);
  v35 = *(unsigned __int8 *)(*(_QWORD *)(v13 - 32) + 16);
  if (v35 - 41 < 0x12 && v35 > 0x1B)
    v37 = *(_QWORD *)(v13 - 32);
  else
    v37 = 0;
  if (v33)
    v38 = v34 >= 0x1C;
  else
    v38 = 0;
  if (v38
    && v34 - 59 >= 0xFFFFFFEE
    && *(_QWORD *)(v33 + 40) == v15
    && v18 >= 0xFFFFFFEE
    && v34 != 90
    && *(_BYTE *)(v19 + 16) != 90)
  {
    v42 = v19;
    v43 = v33;
    if ((llvm::SLPVectorizerPass::tryToVectorizeList((uint64_t)this, &v42, 2uLL, a3, 0) & 1) != 0)
      return 1;
  }
  if (v37 && (*(_QWORD *)(v37 + 40) == v15 ? (v41 = v18 >= 0xFFFFFFEE) : (v41 = 0), v41))
  {
    if (*(_BYTE *)(v19 + 16) != 90 && *(_BYTE *)(v37 + 16) != 90)
    {
      v42 = v19;
      v43 = v37;
      if ((llvm::SLPVectorizerPass::tryToVectorizeList((uint64_t)this, &v42, 2uLL, a3, 0) & 1) != 0)
        return 1;
    }
  }
  else
  {
LABEL_35:
    if (v18 < 0xFFFFFFEE)
      return 0;
  }
  v23 = *(_QWORD *)(v19 + 8);
  if (v23 && !*(_QWORD *)(v23 + 8))
  {
    v24 = *(_QWORD *)(v19 - 64);
    v25 = *(unsigned __int8 *)(v24 + 16);
    v26 = *(unsigned __int8 *)(*(_QWORD *)(v19 - 32) + 16);
    v27 = v26 - 41 < 0x12 && v26 > 0x1B;
    v28 = v27 ? *(_QWORD *)(v19 - 32) : 0;
    v29 = v24 && v25 >= 0x1C;
    v30 = v29 && v25 - 59 >= 0xFFFFFFEE;
    if (v30 && v20 >= 0xFFFFFFEE && v25 != 90 && *(_QWORD *)(v24 + 40) == v15 && *(_BYTE *)(v21 + 16) != 90)
    {
      v42 = v24;
      v43 = v21;
      if ((llvm::SLPVectorizerPass::tryToVectorizeList((uint64_t)this, &v42, 2uLL, a3, 0) & 1) != 0)
        return 1;
    }
    if (v28)
    {
      if (v20 >= 0xFFFFFFEE && *(_QWORD *)(v28 + 40) == v15 && *(_BYTE *)(v28 + 16) != 90 && *(_BYTE *)(v21 + 16) != 90)
      {
        v42 = v28;
        v43 = v21;
        if ((llvm::SLPVectorizerPass::tryToVectorizeList((uint64_t)this, &v42, 2uLL, a3, 0) & 1) != 0)
          return 1;
      }
    }
  }
  return 0;
}

uint64_t llvm::SLPVectorizerPass::vectorizeRootInstruction(llvm::SLPVectorizerPass *this, llvm::PHINode *a2, llvm::Value *a3, llvm::BasicBlock *a4, llvm::slpvectorizer::BoUpSLP *a5, llvm::TargetTransformInfo *a6)
{
  unsigned int v7;
  BOOL v10;
  int v11;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  llvm::PHINode *v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  int v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  int32x2_t ****v34;
  int32x2_t *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int32x2_t *****v40;
  int32x2_t ****v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  uint64_t v50;
  llvm::PHINode *v51;
  unsigned int v52;
  llvm::PHINode *v53;
  _BOOL4 v54;
  int v55;
  uint64_t v56;
  _BOOL4 v57;
  int v58;
  uint64_t v59;
  _BOOL4 v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  _BOOL4 v66;
  int v67;
  unsigned int v68;
  uint64_t v71;
  _BOOL4 v72;
  uint64_t v73;
  char **v74;
  unint64_t v75;
  unsigned int v76;
  int v77;
  char v78;
  unint64_t v79;
  llvm::ValueAsMetadata *v80;
  int32x2_t *v81;
  unint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  llvm::ValueAsMetadata **v86;
  llvm::ValueAsMetadata *v87;
  int v88;
  int v89;
  char v90;
  char *v91;
  char *v92;
  void *v93;
  uint64_t v94;
  int v95;
  void *v96;
  unsigned int v97;
  _DWORD *v98;
  int v99;
  char *v100;
  uint64_t v101;
  int v102;
  char *v103;
  uint64_t *v104;
  uint64_t v105;
  unsigned int v106;
  BOOL v107;
  uint64_t v108;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  BOOL v115;
  uint64_t v117;
  _QWORD *v118;
  _BOOL4 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v131;
  int v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  int v139;
  int v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _BOOL4 v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  _BOOL4 v162;
  BOOL v163;
  int v164;
  char *v165;
  char *i;
  uint64_t v167;
  char *v168;
  int v169;
  uint64_t v170;
  uint64_t j;
  char *v172;
  unint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unsigned int v180;
  BOOL v181;
  _DWORD *v183;
  unint64_t v184;
  const std::nothrow_t *v185;
  uint64_t *v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned __int8 *v195;
  BOOL v196;
  uint64_t v197;
  int v198;
  int v199;
  int v200;
  int v201;
  unint64_t TreeCost;
  unint64_t v203;
  llvm::FixedVectorType *v204;
  _DWORD *v205;
  _DWORD *v206;
  uint64_t Opcode;
  uint64_t v208;
  int v209;
  int v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  __n128 v214;
  llvm::TargetTransformInfo *v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  void *v224;
  BOOL v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  double v229;
  llvm::TargetTransformInfo *v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  int v234;
  uint64_t v235;
  int v236;
  void *v237;
  int v238;
  unint64_t v239;
  BOOL v240;
  uint64_t v241;
  BOOL v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  llvm::OptimizationRemarkEmitter *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  unint64_t v255;
  void **v256;
  char *v257;
  unint64_t v258;
  void **v259;
  unsigned __int8 *v260;
  llvm::Value *v261;
  llvm::ValueAsMetadata *v262;
  unsigned int v263;
  uint64_t v264;
  void *v265;
  void *v266;
  char *v267;
  llvm::Value *v268;
  char *v269;
  char *v270;
  unsigned __int8 **v271;
  int v272;
  unsigned __int8 *v273;
  unsigned __int8 *v274;
  unsigned __int8 *v275;
  char *v276;
  uint64_t v277;
  unsigned __int8 *v278;
  unsigned int v279;
  unint64_t v281;
  llvm::ValueAsMetadata *v282;
  int32x2_t *v283;
  unint64_t v284;
  uint64_t v285;
  unsigned int v286;
  uint64_t v287;
  llvm::ValueAsMetadata **v288;
  llvm::ValueAsMetadata *v289;
  int v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  unint64_t v298;
  void **v299;
  char *v300;
  unint64_t v301;
  void **v302;
  int v303;
  uint64_t v304;
  uint64_t v305;
  void *v306;
  void *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  _BYTE *v313;
  unsigned __int8 *v314;
  uint64_t v315;
  unsigned int v316;
  _BYTE *v317;
  char *v318;
  uint64_t v321;
  llvm::Type *v322;
  llvm::UndefValue ***v323;
  uint64_t v324;
  llvm::UndefValue **v325;
  llvm::UndefValue *v326;
  uint64_t *v327;
  uint64_t v328;
  char *v329;
  llvm::Instruction *v330;
  BOOL v331;
  void **v332;
  void **v333;
  unint64_t v334;
  unint64_t v335;
  uint64_t v336;
  void *v337;
  int v338;
  uint64_t v339;
  uint64_t v340;
  int v341;
  uint64_t v342;
  int v343;
  uint64_t *v344;
  uint64_t v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t v348;
  unsigned int v349;
  int v350;
  char *v351;
  int v352;
  uint64_t v353;
  llvm::SLPVectorizerPass *v355;
  char *v356;
  llvm::slpvectorizer::BoUpSLP *v357;
  llvm::PHINode *v358;
  uint64_t v359;
  uint64_t v360;
  int v361;
  _BYTE *v362;
  _BYTE *v363;
  uint64_t v364;
  int v365;
  _BYTE v366[64];
  void *v367[2];
  __int128 v368;
  __int128 v369;
  unsigned __int8 *v370;
  int32x2_t v371[2];
  int v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  std::string v376;
  void *__p;
  char v378;
  void *v379[2];
  char v380;
  void *v381;
  char v382;
  char *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  int32x2_t ****v388;
  uint64_t v389;
  uint64_t *v390;
  void *v391;
  uint64_t v392;
  _BYTE v393[256];
  uint64_t v394;
  int32x2_t v395;
  unsigned int v396;
  char *v397;
  char *v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t *v401;
  llvm::ValueAsMetadata *v402;
  unsigned int v403;
  int v404;
  void *v405;
  uint64_t v406;
  uint64_t v407;
  __int128 v408;
  const char *v409;
  const char *v410;
  uint64_t v411;
  char v412;
  char v413;
  void *v414;
  uint64_t v415;
  _BYTE v416[256];
  char v417;
  int v418;
  uint64_t v419;
  void *v420;
  uint64_t v421;
  _BYTE v422[128];
  void *v423;
  unsigned int v424;
  uint64_t v425;
  uint64_t v426;
  char *v427;
  uint64_t v428;
  unsigned int v429;
  void *v430;
  uint64_t v431;
  _WORD v432[32];
  void *v433;
  unsigned int v434;
  _QWORD v435[37];

  v435[34] = *MEMORY[0x1E0C80C00];
  if (!a3)
    goto LABEL_11;
  v7 = *((unsigned __int8 *)a3 + 16);
  if (v7 < 0x1C)
    goto LABEL_11;
  if (v7 - 41 >= 0x12)
    a2 = 0;
  if (!byte_1ED82B838 || (v7 != 83 ? (v10 = *((_QWORD *)a3 + 5) == (_QWORD)a4) : (v10 = 0), !v10))
  {
LABEL_11:
    LOBYTE(v11) = 0;
    return v11 & 1;
  }
  v368 = 0u;
  v369 = 0u;
  *(_OWORD *)v367 = 0u;
  sub_1C60ACBA4((uint64_t)v367);
  LOBYTE(v11) = 0;
  v15 = *((_QWORD *)&v369 + 1);
  v16 = *(_QWORD *)((char *)v367[1] + ((((_QWORD)v369 + *((_QWORD *)&v369 + 1)) >> 5) & 0x7FFFFFFFFFFFFF8))
      + 16 * (v369 + BYTE8(v369));
  *(_QWORD *)v16 = a3;
  *(_DWORD *)(v16 + 8) = 0;
  v362 = v366;
  v363 = v366;
  v364 = 8;
  v365 = 0;
  v383 = (char *)&v385;
  v384 = 0x200000000;
  v49 = __CFADD__(v15, 1);
  v17 = v15 + 1;
  *((_QWORD *)&v369 + 1) = v17;
  if (!v49)
  {
    v358 = a2;
    v11 = 0;
    v18 = (char *)a5 + 1048;
    v356 = (char *)a5 + 1048;
    v357 = a5;
    v355 = this;
    while (1)
    {
      v19 = *(_QWORD *)((char *)v367[1] + (((unint64_t)v369 >> 5) & 0x7FFFFFFFFFFFFF8))
          + 16 * v369;
      v20 = *(_QWORD *)v19;
      v361 = *(_DWORD *)(v19 + 8);
      *(_QWORD *)&v369 = v369 + 1;
      *((_QWORD *)&v369 + 1) = v17 - 1;
      if ((unint64_t)v369 >= 0x200)
      {
        operator delete(*(void **)v367[1]);
        v367[1] = (char *)v367[1] + 8;
        *(_QWORD *)&v369 = v369 - 256;
      }
      v386 = v20;
      v405 = 0;
      if ((sub_1C61DB414((uint64_t *)v18, &v386, &v405) & 1) != 0)
        goto LABEL_181;
      v359 = 0;
      v360 = 0;
      if (v20)
        v21 = *(unsigned __int8 *)(v20 + 16) - 41 > 0x11;
      else
        v21 = 1;
      if (!v21 && *(_QWORD *)(v20 - 64) && (v360 = *(_QWORD *)(v20 - 64), *(_QWORD *)(v20 - 32)))
      {
        v359 = *(_QWORD *)(v20 - 32);
      }
      else
      {
        LODWORD(v386) = 193;
        v387 = 0;
        v388 = (int32x2_t ****)&v360;
        v389 = 1;
        v390 = &v359;
        if (!sub_1C57A1C20((uint64_t)&v386, v20))
        {
          LODWORD(v386) = 202;
          v387 = 0;
          v388 = (int32x2_t ****)&v360;
          v389 = 1;
          v390 = &v359;
          if (!sub_1C57A1C20((uint64_t)&v386, v20))
          {
            LODWORD(v386) = 274;
            v387 = 0;
            v388 = (int32x2_t ****)&v360;
            v389 = 1;
            v390 = &v359;
            if (!sub_1C57A1C20((uint64_t)&v386, v20))
            {
              LODWORD(v386) = 275;
              v387 = 0;
              v388 = (int32x2_t ****)&v360;
              v389 = 1;
              v390 = &v359;
              if (!sub_1C57A1C20((uint64_t)&v386, v20))
              {
                LODWORD(v386) = 305;
                v387 = 0;
                v388 = (int32x2_t ****)&v360;
                v389 = 1;
                v390 = &v359;
                if (!sub_1C57A1C20((uint64_t)&v386, v20))
                {
                  LODWORD(v386) = 306;
                  v387 = 0;
                  v388 = (int32x2_t ****)&v360;
                  v389 = 1;
                  v390 = &v359;
                  if (!sub_1C57A1C20((uint64_t)&v386, v20) && *(_BYTE *)(v20 + 16) != 85)
                    goto LABEL_31;
                }
              }
            }
          }
        }
      }
      v386 = (uint64_t)&v388;
      v387 = 0x200000000;
      v391 = v393;
      v392 = 0x2000000000;
      v394 = 0;
      v395 = 0;
      v396 = 0;
      v398 = 0;
      v399 = 0;
      v397 = 0;
      v400 = 6;
      v401 = 0;
      v402 = 0;
      v404 = -1;
      v50 = sub_1C60ACE34(v20);
      v403 = v50;
      if (v358)
      {
        if ((_DWORD)v50)
        {
          v54 = sub_1C60AD368(v20);
          v55 = *(_DWORD *)(v20 + 20);
          if ((v55 & 0x40000000) != 0)
            v56 = *(_QWORD *)(v20 - 8);
          else
            v56 = v20 - 32 * (v55 & 0x7FFFFFF);
          v53 = *(llvm::PHINode **)(v56 + 32 * v54);
          v52 = v403;
        }
        else
        {
          v52 = 0;
          v53 = 0;
        }
        if (v53 == v358)
        {
          if (!v52)
            goto LABEL_155;
          v57 = sub_1C60AD368(v20);
          v58 = *(_DWORD *)(v20 + 20);
          if ((v58 & 0x40000000) != 0)
            v59 = *(_QWORD *)(v20 - 8);
          else
            v59 = v20 - 32 * (v58 & 0x7FFFFFF);
          v63 = 32;
          if (v57)
            v63 = 64;
LABEL_108:
          v18 = *(char **)(v59 + v63);
          if (v18)
            v64 = v18[16] >= 0x1Cu;
          else
            v64 = 0;
          if (!v64)
            goto LABEL_155;
          v50 = sub_1C60ACE34((uint64_t)v18);
          v51 = 0;
          v403 = v50;
          goto LABEL_123;
        }
        if (v52)
        {
          v60 = sub_1C60AD368(v20);
          v61 = *(_DWORD *)(v20 + 20);
          if ((v61 & 0x40000000) != 0)
            v62 = *(_QWORD *)(v20 - 8);
          else
            v62 = v20 - 32 * (v61 & 0x7FFFFFF);
          v65 = 32;
          if (v60)
            v65 = 64;
          v50 = v403;
          if (*(llvm::PHINode **)(v62 + v65) == v358)
          {
            if (!v403)
              goto LABEL_155;
            v66 = sub_1C60AD368(v20);
            v67 = *(_DWORD *)(v20 + 20);
            if ((v67 & 0x40000000) != 0)
              v59 = *(_QWORD *)(v20 - 8);
            else
              v59 = v20 - 32 * (v67 & 0x7FFFFFF);
            v63 = 32 * v66;
            goto LABEL_108;
          }
        }
        else
        {
          v50 = 0;
        }
        v51 = v358;
      }
      else
      {
        v51 = 0;
      }
      v18 = (char *)v20;
LABEL_123:
      if (!sub_1C60AD1E4(v50, (unsigned __int8 *)v18))
        goto LABEL_155;
      v68 = *(unsigned __int8 *)(*(_QWORD *)v18 + 8);
      if (v68 > 0x14 || ((1 << v68) & 0x10A07F) == 0)
        goto LABEL_155;
      if ((v68 & 0xFFFFFFFD) == 4 || v68 == 15)
        goto LABEL_155;
      if (v18[16] == 85)
      {
        v71 = *(_QWORD *)(*((_QWORD *)v18 - 12) + 8);
        if (!v71 || *(_QWORD *)(v71 + 8))
          goto LABEL_155;
      }
      if (v402 != (llvm::ValueAsMetadata *)v18)
      {
        if (v402 && v402 != (llvm::ValueAsMetadata *)-8192 && v402 != (llvm::ValueAsMetadata *)-4096)
        {
          v281 = v400 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v400 & 0xFFFFFFFFFFFFFFF8) = v401;
          if (v401)
          {
            *v401 = *v401 & 7 | v281;
          }
          else
          {
            v282 = v402;
            v283 = ***(int32x2_t ****)v402;
            v284 = (unint64_t)v283[303];
            if (v284 <= v281)
            {
              v285 = v283[305].u32[0];
              if (v284 + 16 * v285 > v281)
              {
                v286 = v285 - 1;
                LODWORD(v287) = v286 & ((v402 >> 4) ^ (v402 >> 9));
                v288 = (llvm::ValueAsMetadata **)(v284 + 16 * v287);
                v289 = *v288;
                if (v402 == *v288)
                {
LABEL_482:
                  *v288 = (llvm::ValueAsMetadata *)-8192;
                  v283[304] = vadd_s32(v283[304], (int32x2_t)0x1FFFFFFFFLL);
                  v282 = v402;
                }
                else
                {
                  v290 = 1;
                  while (v289 != (llvm::ValueAsMetadata *)-4096)
                  {
                    v291 = v287 + v290++;
                    v287 = v291 & v286;
                    v289 = *(llvm::ValueAsMetadata **)(v284 + 16 * v287);
                    if (v402 == v289)
                    {
                      v288 = (llvm::ValueAsMetadata **)(v284 + 16 * v287);
                      goto LABEL_482;
                    }
                  }
                }
                *((_BYTE *)v282 + 17) &= ~1u;
              }
            }
          }
        }
        v402 = (llvm::ValueAsMetadata *)v18;
        if (v18 != (char *)-8192 && v18 != (char *)-4096 && v18)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v400);
      }
      v405 = &v407;
      v406 = 0x2000000000;
      v72 = sub_1C60AD368((uint64_t)v18);
      v73 = v406;
      if (v406 >= (unint64_t)HIDWORD(v406))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v405, (uint64_t)&v407, v406 + 1, 16);
        v73 = v406;
      }
      v74 = (char **)((char *)v405 + 16 * v73);
      *v74 = v18;
      v74[1] = (char *)v72;
      LODWORD(v406) = v406 + 1;
      if (sub_1C60AD368((uint64_t)v18))
      {
        v430 = v432;
        v431 = 0x1000000000;
        v75 = 2;
      }
      else
      {
        v430 = v432;
        v431 = 0x1000000000;
        v75 = 1;
      }
      sub_1C60AD3A8((uint64_t)&v386, v75, (uint64_t)&v430);
      if (v430 != v432)
        free(v430);
      v76 = v406;
      if (!(_DWORD)v406)
      {
LABEL_149:
        v77 = 1;
        goto LABEL_150;
      }
      v350 = 0;
      while (1)
      {
        while (1)
        {
          v430 = 0;
          v92 = (char *)v405 + 16 * v76;
          v430 = (void *)*((_QWORD *)v92 - 2);
          v93 = v430;
          v94 = *((unsigned int *)v92 - 2);
          *((_DWORD *)v92 - 2) = v94 + 1;
          v95 = sub_1C60ACE34((uint64_t)v93);
          v96 = v430;
          if (v95 != v403)
          {
            v101 = v392;
            if (v392 >= (unint64_t)HIDWORD(v392))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v391, (uint64_t)v393, v392 + 1, 8);
              v101 = v392;
            }
            *((_QWORD *)v391 + v101) = v96;
            LODWORD(v392) = v392 + 1;
            goto LABEL_198;
          }
          v97 = sub_1C60AD368((uint64_t)v430) ? 3 : 2;
          if (v94 >= v97)
            break;
          v98 = v430;
          if (sub_1C60ACE34((uint64_t)v430) == 3 && (_DWORD)v94 == 1 && *((_BYTE *)v98 + 16) == 85)
          {
            v99 = v98[5];
            if ((v99 & 0x40000000) != 0)
              v100 = (char *)*((_QWORD *)v98 - 1);
            else
              v100 = (char *)&v98[-8 * (v99 & 0x7FFFFFF)];
            v104 = (uint64_t *)(v100 + 64);
          }
          else
          {
            v102 = v98[5];
            if ((v102 & 0x40000000) != 0)
              v103 = (char *)*((_QWORD *)v98 - 1);
            else
              v103 = (char *)&v98[-8 * (v102 & 0x7FFFFFF)];
            v104 = (uint64_t *)&v103[32 * v94];
          }
          v105 = *v104;
          v106 = *(unsigned __int8 *)(*v104 + 16);
          if (v105)
            v107 = v106 >= 0x1C;
          else
            v107 = 0;
          if (!v107)
            goto LABEL_229;
          v108 = sub_1C60ACE34(v105);
          if ((llvm::PHINode *)v105 == v51 || v105 == (_QWORD)v18)
            goto LABEL_229;
          v110 = v108;
          v111 = v403;
          v112 = *((_QWORD *)v18 + 5);
          if (sub_1C60AD368(v105)
            || (sub_1C57BE738((uint64_t)&v420, (unsigned __int8 *)v105)
             || (v113 = sub_1C57BE7B8((uint64_t)&v423, (unsigned __int8 *)v105), v114 = v105, v113))
            && (v114 = v105, *(_BYTE *)(v105 + 16) == 85))
          {
            v114 = *(_QWORD *)(v105 - 96);
            v115 = *(_QWORD *)(v105 + 40) != v112 || v114 == 0;
            if (v115 || *(unsigned __int8 *)(v114 + 16) < 0x1Cu)
              goto LABEL_229;
          }
          if (*(_QWORD *)(v114 + 40) != v112)
            goto LABEL_229;
          if (!sub_1C60AD368((uint64_t)v18))
          {
            v129 = *(_QWORD *)(v105 + 8);
            if (!v129)
              goto LABEL_229;
            goto LABEL_247;
          }
          v126 = *(_QWORD *)(v105 + 8);
          if (!v126)
            goto LABEL_229;
          v127 = *(_QWORD *)(v126 + 8);
          if (!v127)
            goto LABEL_229;
          v128 = *(_QWORD *)(v127 + 8);
          if (*(_BYTE *)(v105 + 16) == 85)
          {
            if (v128)
              goto LABEL_229;
            v129 = *(_QWORD *)(*(_QWORD *)(v105 - 96) + 8);
            if (!v129)
              goto LABEL_229;
LABEL_247:
            v128 = *(_QWORD *)(v129 + 8);
          }
          if (!v128)
          {
            if (v350)
            {
              if (v350 != *(unsigned __int8 *)(v105 + 16) - 28 && (_DWORD)v110 != v111)
                goto LABEL_229;
              if ((_DWORD)v110 != v111)
                goto LABEL_289;
            }
            else if ((_DWORD)v110 != v111)
            {
              v350 = *(unsigned __int8 *)(v105 + 16) - 28;
LABEL_289:
              v149 = sub_1C60AD368(v105);
              v150 = v406;
              if (v406 >= (unint64_t)HIDWORD(v406))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v405, (uint64_t)&v407, v406 + 1, 16);
                v150 = v406;
              }
              v151 = (uint64_t *)((char *)v405 + 16 * v150);
              *v151 = v105;
              v151[1] = v149;
              v76 = v406 + 1;
              goto LABEL_199;
            }
            if ((sub_1C60AD1E4(v110, (unsigned __int8 *)v105) & 1) != 0)
              goto LABEL_289;
          }
LABEL_229:
          sub_1C60AD2A8((uint64_t)&v386, (uint64_t)v405 + 16 * v406 - 16, v105);
          v76 = v406;
          if (!(_DWORD)v406)
            goto LABEL_149;
        }
        v117 = sub_1C619495C((uint64_t)&v394, (uint64_t *)&v430);
        if (v398 != (char *)v117 && !*(_QWORD *)(v117 + 8))
          break;
        v118 = v430;
        v119 = sub_1C60AD368((uint64_t)v430);
        v120 = v386;
        if (v119)
        {
          v121 = *(v118 - 12);
          v122 = *(unsigned int *)(v386 + 8);
          if (v122 >= *(_DWORD *)(v386 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v386, v386 + 16, v122 + 1, 8);
            *(_QWORD *)(*(_QWORD *)v120 + 8 * *(unsigned int *)(v120 + 8)) = v121;
            LODWORD(v122) = *(_DWORD *)(v120 + 8);
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v386 + 8 * v122) = v121;
          }
          *(_DWORD *)(v120 + 8) = v122 + 1;
          v123 = v386;
          v124 = *(unsigned int *)(v386 + 152);
          if (v124 >= *(_DWORD *)(v386 + 156))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v386 + 144, v386 + 160, v124 + 1, 8);
            *(_QWORD *)(*(_QWORD *)(v123 + 144) + 8 * *(unsigned int *)(v123 + 152)) = v118;
            v125 = *(_DWORD *)(v123 + 152) + 1;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v386 + 144) + 8 * v124) = v118;
            v125 = v124 + 1;
          }
          *(_DWORD *)(v123 + 152) = v125;
        }
        else
        {
          v131 = *(unsigned int *)(v386 + 8);
          if (v131 >= *(_DWORD *)(v386 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v386, v386 + 16, v131 + 1, 8);
            *(_QWORD *)(*(_QWORD *)v120 + 8 * *(unsigned int *)(v120 + 8)) = v118;
            v132 = *(_DWORD *)(v120 + 8) + 1;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v386 + 8 * v131) = v118;
            v132 = v131 + 1;
          }
          *(_DWORD *)(v120 + 8) = v132;
        }
LABEL_198:
        v76 = v406 - 1;
LABEL_199:
        LODWORD(v406) = v76;
        if (!v76)
          goto LABEL_149;
      }
      if (v406 > 1)
      {
        sub_1C60AD2A8((uint64_t)&v386, (uint64_t)v405 + 16 * v406 - 32, (uint64_t)v430);
        v133 = (char *)sub_1C619495C((uint64_t)&v394, (uint64_t *)&v430);
        v134 = v398;
        if (v398 != v133)
        {
          v135 = v396;
          if (v396)
          {
            LODWORD(v136) = ((*(_QWORD *)v133 >> 4) ^ (*(_QWORD *)v133 >> 9)) & (v396 - 1);
            v137 = (uint64_t *)(v394 + 16 * v136);
            v138 = *v137;
            if (*(_QWORD *)v133 == *v137)
            {
LABEL_271:
              *v137 = -8192;
              v395 = vadd_s32(v395, (int32x2_t)0x1FFFFFFFFLL);
              v134 = v398;
            }
            else
            {
              v139 = 1;
              while (v138 != -4096)
              {
                v140 = v136 + v139++;
                v136 = v140 & (v396 - 1);
                v138 = *(_QWORD *)(v394 + 16 * v136);
                if (*(_QWORD *)v133 == v138)
                {
                  v137 = (uint64_t *)(v394 + 16 * v136);
                  goto LABEL_271;
                }
              }
            }
          }
          v141 = v133 + 16;
          if (v133 + 16 == v134)
          {
            v398 = v133;
          }
          else
          {
            v142 = 0;
            v143 = (v133 - v397) >> 4;
            do
            {
              v144 = &v141[v142];
              *((_OWORD *)v144 - 1) = *(_OWORD *)&v141[v142];
              v142 += 2;
            }
            while (v144 + 2 != (_QWORD *)v134);
            v398 = &v133[v142 * 8];
            if (v142 * 8)
            {
              v145 = v394 + 16 * v135;
              if (v395.i32[0])
                v146 = 0;
              else
                v146 = v135;
              if (v395.i32[0])
                v147 = v394;
              else
                v147 = v394 + 16 * v135;
              if ((_DWORD)v135 && v395.i32[0])
              {
                v148 = 16 * v135;
                v147 = v394;
                while ((*(_QWORD *)v147 | 0x1000) == 0xFFFFFFFFFFFFF000)
                {
                  v147 += 16;
                  v148 -= 16;
                  if (!v148)
                  {
                    v146 = v135;
                    v147 = v394 + 16 * v135;
                    goto LABEL_294;
                  }
                }
                v146 = v135;
              }
LABEL_294:
              v152 = v394 + 16 * v146;
LABEL_295:
              while (v147 != v152)
              {
                v153 = *(unsigned int *)(v147 + 8);
                if (v143 < v153)
                  *(_DWORD *)(v147 + 8) = v153 - 1;
                v154 = v147 + 16;
                v147 = v145;
                if (v154 != v145)
                {
                  v147 = v154;
                  while ((*(_QWORD *)v147 | 0x1000) == 0xFFFFFFFFFFFFF000)
                  {
                    v147 += 16;
                    if (v147 == v145)
                    {
                      v147 = v145;
                      goto LABEL_295;
                    }
                  }
                }
              }
            }
          }
        }
        goto LABEL_198;
      }
      v77 = 0;
LABEL_150:
      if (v405 != &v407)
        free(v405);
      if (!v77)
      {
LABEL_155:
        v78 = 0;
        goto LABEL_156;
      }
      if (v392 < 4)
      {
        v18 = 0;
        goto LABEL_557;
      }
      v348 = v392;
      if ((_DWORD)v387)
      {
        v156 = v386;
        v157 = (char *)(v386 + 144 * v387);
        v155 = -1;
        do
        {
          v158 = *(unsigned int *)(v156 + 8);
          if ((_DWORD)v158)
          {
            v159 = *(uint64_t **)v156;
            v160 = 8 * v158;
            do
            {
              v161 = *v159;
              v162 = sub_1C4774A9C(*v159);
              if (v161)
                v163 = !v162;
              else
                v163 = 1;
              if (!v163)
              {
                v164 = *(unsigned __int8 *)(v161 + 17) >> 1;
                if (v164 == 127)
                  v164 = -1;
                v155 &= v164;
              }
              ++v159;
              v160 -= 8;
            }
            while (v160);
          }
          v156 += 144;
        }
        while ((char *)v156 != v157);
      }
      else
      {
        v155 = -1;
      }
      sub_1C4773D54((uint64_t)&v423, (uint64_t)v402, 0, 0, 0);
      v429 = v155;
      v371[0] = 0;
      v371[1] = 0;
      v372 = 0;
      v374 = 0;
      v375 = 0;
      v373 = 0;
      v165 = v397;
      for (i = v398; v165 != i; v165 += 16)
      {
        v175 = sub_1C63DFB40((uint64_t)v371, (uint64_t *)v165 + 1);
        v176 = v175;
        v177 = *(_QWORD *)v165;
        v178 = *(unsigned int *)(v175 + 8);
        if (v178 >= *(unsigned int *)(v175 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v175, v175 + 16, v178 + 1, 8);
          v178 = *(unsigned int *)(v176 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v176 + 8 * v178) = v177;
        ++*(_DWORD *)(v176 + 8);
      }
      v405 = v402;
      sub_1C63DFB40((uint64_t)v371, (uint64_t *)&v405);
      v420 = v422;
      v421 = 0x1000000000;
      if ((_DWORD)v387)
      {
        v167 = v386;
        v168 = (char *)(v386 + 144 * v387);
        do
        {
          sub_1C486AF08((unsigned int *)&v420, *(_BYTE **)v167, (_BYTE *)(*(_QWORD *)v167 + 8 * *(unsigned int *)(v167 + 8)));
          v167 += 144;
        }
        while ((char *)v167 != v168);
      }
      v169 = v348;
      v170 = 1 << (__clz(v348) ^ 0x3Fu);
      if (v348 > v170)
      {
        v405 = (void *)1;
        for (j = 8; j != 40; j += 8)
          *(_DWORD *)((char *)&v405 + j) = -1;
        v172 = (char *)v391;
        if (!(_DWORD)v392)
        {
          v173 = 0;
          v430 = &v405;
          v174 = (char *)v391;
          goto LABEL_350;
        }
        v179 = 8 * v392;
        do
        {
          v180 = *(unsigned __int8 *)(*(_QWORD *)v172 + 16);
          if (*(_QWORD *)v172)
            v181 = v180 >= 0x1C;
          else
            v181 = 0;
          if (v181 && v180 - 83 >= 0xFFFFFFFE)
          {
            LODWORD(v430) = *(_WORD *)(*(_QWORD *)v172 + 18) & 0x3F;
            v183 = sub_1C63E20A8(&v405, &v430);
            ++v183[1];
          }
          v172 += 8;
          v179 -= 8;
        }
        while (v179);
        v174 = (char *)v391;
        v173 = v392;
        v172 = (char *)v391 + 8 * v392;
        v430 = &v405;
        if (v392 < 0x81)
        {
LABEL_350:
          sub_1C60AD5B0(v174, v172, (_DWORD **)&v430, v173, 0, 0);
        }
        else
        {
          v351 = (char *)v391;
          v184 = v392;
          v185 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
          while (1)
          {
            v186 = (uint64_t *)operator new(8 * v184, v185);
            if (v186)
              break;
            v21 = v184 > 1;
            v184 >>= 1;
            if (!v21)
            {
              v169 = v348;
              v174 = v351;
              goto LABEL_350;
            }
          }
          v327 = v186;
          sub_1C60AD5B0(v351, v172, (_DWORD **)&v430, v173, v186, v184);
          operator delete(v327);
          v169 = v348;
        }
        if ((v405 & 1) == 0)
          MEMORY[0x1CAA32FB4](v406, 4);
      }
      v18 = 0;
      if (v170 >= 3)
      {
        v343 = v169 + 1;
        if (v169 + 1 != (_DWORD)v170)
        {
          v18 = 0;
          v187 = v155;
          v188 = 0;
          v342 = v187 | 0x100000000;
          while (1)
          {
            v189 = (uint64_t *)((char *)v391 + 8 * v188);
            llvm::slpvectorizer::BoUpSLP::buildTree((uint64_t)v357, v189, v170, (uint64_t)v420, v421);
            if (llvm::slpvectorizer::BoUpSLP::isTreeTinyAndNotFullyVectorizable(v357, 1))
              goto LABEL_516;
            v344 = v189;
            if (v403 == 3
              && (sub_1C609C760(****(_QWORD ****)v357, *(_DWORD *)(**(_QWORD **)v357 + 8), *((_QWORD **)v357 + 242), 0) & 1) != 0)
            {
              goto LABEL_516;
            }
            llvm::slpvectorizer::BoUpSLP::reorderTopToBottom((uint64_t **)v357, v190, v191, v192);
            llvm::slpvectorizer::BoUpSLP::reorderBottomToTop((void ***)v357, 1, v193, v194);
            llvm::slpvectorizer::BoUpSLP::buildExternalUses((unint64_t)v357, (uint64_t)v371);
            v195 = (unsigned __int8 *)v402;
            if (*((_BYTE *)v402 + 16) == 85)
            {
              v196 = sub_1C57BE738((uint64_t)&v405, (unsigned __int8 *)v402) || sub_1C57BE7B8((uint64_t)&v430, v195);
              if ((_DWORD)v170 != (_DWORD)v348 && v196)
                goto LABEL_516;
            }
            v349 = v188;
            llvm::slpvectorizer::BoUpSLP::computeMinimumValueSizes(v357);
            TreeCost = llvm::slpvectorizer::BoUpSLP::getTreeCost((void *****)v357, (uint64_t)v391 + 8 * v188, v170, v197, v198, v199, v200, v201);
            v346 = v203;
            v347 = TreeCost;
            v345 = v188;
            v204 = (llvm::FixedVectorType *)**((_QWORD **)v391 + v188);
            llvm::FixedVectorType::get(v204, (llvm::Type *)v170);
            v206 = v205;
            v430 = 0;
            LODWORD(v431) = 0;
            v352 = v170;
            if (((1 << v403) & 0xC3E) != 0)
            {
              Opcode = llvm::RecurrenceDescriptor::getOpcode(v403);
              v208 = (*(uint64_t (**)(_QWORD, uint64_t, _DWORD *, uint64_t, _QWORD))(**(_QWORD **)a6 + 928))(*(_QWORD *)a6, Opcode, v206, v342, 0);
              v210 = v209;
              v430 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, llvm::FixedVectorType *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)a6 + 824))(*(_QWORD *)a6, Opcode, v204, 0, 0, 0, 0, 0, 0, 0, 0);
            }
            else
            {
              if (((1 << v403) & 0x3C0) != 0)
              {
                sub_1C4774CC4(v204);
                v213 = v212;
                v214.n128_f64[0] = sub_1C4774CC4(v206);
                v215 = a6;
                v340 = (*(uint64_t (**)(_QWORD, _DWORD *, uint64_t, BOOL, _QWORD, __n128))(**(_QWORD **)a6
                                                                                                  + 936))(*(_QWORD *)a6, v206, v216, (v403 & 0xFFFFFFFE) == 8, 0, v214);
                v210 = v217;
                v218 = dword_1C8677E78[v403 - 6];
                v219 = (*(uint64_t (**)(_QWORD, uint64_t, llvm::FixedVectorType *, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v215 + 864))(*(_QWORD *)v215, 53, v204, v213, v218, 0, 0);
                v338 = v220;
                v221 = v218;
                v208 = v340;
                v222 = (*(uint64_t (**)(_QWORD, uint64_t, llvm::FixedVectorType *, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v215 + 864))(*(_QWORD *)v215, 57, v204, v213, v221, 0, 0);
                v224 = (void *)(v219 + v222);
                if (__OFADD__(v219, v222))
                  v224 = (void *)(((v219 + v222) >> 63) ^ 0x8000000000000000);
                v430 = v224;
                v225 = v223 == 1;
                v226 = v338;
              }
              else
              {
                sub_1C4774CC4(v204);
                v228 = v227;
                v229 = sub_1C4774CC4(v206);
                v230 = a6;
                v208 = (*(uint64_t (**)(_QWORD, _DWORD *, uint64_t, _QWORD, _QWORD, double))(**(_QWORD **)a6 + 936))(*(_QWORD *)a6, v206, v231, 0, 0, v229);
                v210 = v232;
                v233 = dword_1C8677E78[v403 - 6];
                v339 = (*(uint64_t (**)(_QWORD, uint64_t, llvm::FixedVectorType *, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v230 + 864))(*(_QWORD *)v230, 54, v204, v228, v233, 0, 0);
                v341 = v234;
                v235 = (*(uint64_t (**)(_QWORD, uint64_t, llvm::FixedVectorType *, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v230 + 864))(*(_QWORD *)v230, 57, v204, v228, v233, 0, 0);
                v237 = (void *)(v339 + v235);
                if (__OFADD__(v339, v235))
                  v237 = (void *)(((v339 + v235) >> 63) ^ 0x8000000000000000);
                v430 = v237;
                v225 = v236 == 1;
                v226 = v341;
              }
              v211 = v225 ? 1 : v226;
            }
            LODWORD(v431) = v211;
            v238 = v352;
            v405 = (void *)(v352 - 1);
            LODWORD(v406) = 0;
            sub_1C4848B64((uint64_t)&v430, (uint64_t)&v405);
            v239 = v208 - (_QWORD)v430;
            if (__OFSUB__(v208, v430))
              v239 = ((v208 - (uint64_t)v430) >> 63) ^ 0x8000000000000000;
            v240 = v210 == 1 || (_DWORD)v431 == 1;
            v241 = v240 ? v346 & 0xFFFFFFFF00000000 | 1 : v346;
            v242 = __OFADD__(v347, v239);
            v243 = v347 + v239;
            v244 = ((uint64_t)(v347 + v239) >> 63) ^ 0x8000000000000000;
            v245 = v242 ? v244 : v243;
            if ((_DWORD)v241)
              break;
            v246 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)v357 + 249);
            v247 = ****(_QWORD ****)v246;
            v248 = *(_QWORD *)(v247 + 128);
            if (v245 >= -(uint64_t)dword_1ED82B778)
            {
              if (v248
                || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v247 + 72) + 48))(*(_QWORD *)(v247 + 72)))
              {
                v292 = *v344;
                v293 = *(_QWORD *)(*(_QWORD *)(*v344 + 40) + 56);
                llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)v379, (const llvm::DebugLoc *)(*v344 + 48));
                v294 = *(_QWORD *)(v292 + 40);
                LODWORD(v406) = 10;
                BYTE4(v406) = 2;
                v408 = *(_OWORD *)v379;
                v407 = v293;
                v409 = "slp-vectorizer";
                v410 = "HorSLPNotBeneficial";
                v411 = 19;
                v412 = 0;
                v413 = 0;
                v414 = v416;
                v415 = 0x400000000;
                v417 = 0;
                v418 = -1;
                v419 = v294;
                v405 = &off_1E814E538;
                v379[0] = "Vectorizing horizontal reduction is possible";
                v379[1] = (void *)44;
                sub_1C53B17B4((uint64_t)&v414, (const void **)v379);
                v379[0] = "but not beneficial with cost ";
                v379[1] = (void *)29;
                sub_1C53B17B4((uint64_t)&v414, (const void **)v379);
                llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v379, "Cost", 4uLL, v245, v241);
                v295 = sub_1C47E3888((uint64_t)&v405, (uint64_t)v379);
                v376.__r_.__value_.__r.__words[0] = (std::string::size_type)" and threshold ";
                v376.__r_.__value_.__l.__size_ = 15;
                sub_1C53B17B4(v295 + 80, (const void **)&v376.__r_.__value_.__l.__data_);
                llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v376, "Threshold", 9uLL, -dword_1ED82B778);
                v296 = sub_1C47E3888(v295, (uint64_t)&v376);
                sub_1C61998EC((uint64_t)&v430, v296);
                v430 = &off_1E814E538;
                if (v378 < 0)
                  operator delete(__p);
                if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v376.__r_.__value_.__l.__data_);
                if (v382 < 0)
                  operator delete(v381);
                if (v380 < 0)
                  operator delete(v379[0]);
                v405 = &off_1E814E790;
                v297 = (char *)v414;
                if ((_DWORD)v415)
                {
                  v298 = (unint64_t)v415 << 6;
                  do
                  {
                    v299 = (void **)&v297[v298];
                    if (v297[v298 - 17] < 0)
                      operator delete(*(v299 - 5));
                    if (*((char *)v299 - 41) < 0)
                      operator delete(*(v299 - 8));
                    v298 -= 64;
                  }
                  while (v298);
                  v297 = (char *)v414;
                }
                if (v297 != v416)
                  free(v297);
                llvm::OptimizationRemarkEmitter::emit(v246, (llvm::DiagnosticInfoOptimizationBase *)&v430);
                v430 = &off_1E814E790;
                v300 = (char *)v433;
                if (v434)
                {
                  v301 = (unint64_t)v434 << 6;
                  do
                  {
                    v302 = (void **)&v300[v301];
                    if (v300[v301 - 17] < 0)
                      operator delete(*(v302 - 5));
                    if (*((char *)v302 - 41) < 0)
                      operator delete(*(v302 - 8));
                    v301 -= 64;
                  }
                  while (v301);
                  v300 = (char *)v433;
                }
                if (v300 != (char *)v435)
                  free(v300);
              }
              v188 = v349;
LABEL_516:
              if (v18)
              {
                if (v188 < v348)
                {
                  v303 = v348 - v188;
                  v304 = 8 * v188;
                  do
                  {
                    v305 = *(_QWORD *)((char *)v391 + v304);
                    v306 = *(void **)(v305 + 48);
                    v379[0] = v306;
                    if (v306)
                    {
                      llvm::MetadataTracking::track((uint64_t)v379, (unsigned __int8 *)v306, 2);
                      v307 = v379[0];
                    }
                    else
                    {
                      v307 = 0;
                    }
                    sub_1C4774EF4((uint64_t)&v423, 0, (uint64_t)v307);
                    if (v379[0])
                      llvm::MetadataTracking::untrack((uint64_t)v379, (unsigned __int8 *)v379[0]);
                    WORD4(v408) = 257;
                    v18 = (char *)sub_1C60AD4E0((uint64_t)&v423, v403, (uint64_t)v18, v305, (uint64_t)&v405, (uint64_t ***)&v386);
                    v304 += 8;
                    --v303;
                  }
                  while (v303);
                }
                v308 = v373;
                v309 = v374;
                v353 = v374;
                while (v308 != v309)
                {
                  v310 = *(unsigned int *)(v308 + 16);
                  if ((_DWORD)v310)
                  {
                    v311 = *(_QWORD *)(v308 + 8);
                    v312 = 8 * v310;
                    do
                    {
                      v313 = *(_BYTE **)v311;
                      v314 = *(unsigned __int8 **)(*(_QWORD *)v311 + 48);
                      v376.__r_.__value_.__r.__words[0] = (std::string::size_type)v314;
                      if (v314)
                      {
                        llvm::MetadataTracking::track((uint64_t)&v376, v314, 2);
                        v315 = v376.__r_.__value_.__r.__words[0];
                      }
                      else
                      {
                        v315 = 0;
                      }
                      sub_1C4774EF4((uint64_t)&v423, 0, v315);
                      if (v376.__r_.__value_.__r.__words[0])
                        llvm::MetadataTracking::untrack((uint64_t)&v376, (unsigned __int8 *)v376.__r_.__value_.__l.__data_);
                      v316 = v403;
                      v405 = "op.extra";
                      WORD4(v408) = 259;
                      if (v313[16] == 85)
                        v317 = v313;
                      else
                        v317 = 0;
                      sub_1C60AE404((uint64_t)&v423, v403);
                      v18 = v318;
                      if (v316 - 6 <= 3 && v317 != 0 && v318[16] == 85 && v318 != 0)
                      {
                        v321 = *((_QWORD *)v318 - 12);
                        v430 = (void *)*((_QWORD *)v317 - 12);
                        llvm::propagateIRFlags(v321, (uint64_t *)&v430, 1, 0);
                      }
                      v430 = v313;
                      llvm::propagateIRFlags((uint64_t)v18, (uint64_t *)&v430, 1, 0);
                      v311 += 8;
                      v312 -= 8;
                    }
                    while (v312);
                  }
                  v308 += 40;
                  v309 = v353;
                }
                llvm::Value::doRAUW(v402, (llvm::Value *)v18, (llvm::Value *)1);
                if ((_DWORD)v421)
                {
                  v323 = (llvm::UndefValue ***)v420;
                  v324 = 8 * v421;
                  do
                  {
                    v325 = *v323;
                    if ((*v323)[1])
                    {
                      v326 = llvm::UndefValue::get(*v325, v322);
                      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v325, v326, (llvm::Value *)1);
                    }
                    v430 = v325;
                    sub_1C61DB390((uint64_t)v356, &v430, (uint64_t)&v405);
                    ++v323;
                    v324 -= 8;
                  }
                  while (v324);
                }
              }
              goto LABEL_553;
            }
            if (v248
              || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v247 + 72) + 48))(*(_QWORD *)(v247 + 72)))
            {
              v249 = *v344;
              v250 = *(_QWORD *)(*(_QWORD *)(*v344 + 40) + 56);
              llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)v379, (const llvm::DebugLoc *)(*v344 + 48));
              v251 = *(_QWORD *)(v249 + 40);
              LODWORD(v406) = 9;
              BYTE4(v406) = 2;
              v408 = *(_OWORD *)v379;
              v407 = v250;
              v409 = "slp-vectorizer";
              v410 = "VectorizedHorizontalReduction";
              v411 = 29;
              v412 = 0;
              v413 = 0;
              v414 = v416;
              v415 = 0x400000000;
              v417 = 0;
              v418 = -1;
              v419 = v251;
              v405 = &off_1E814E500;
              v379[0] = "Vectorized horizontal reduction with cost ";
              v379[1] = (void *)42;
              sub_1C53B17B4((uint64_t)&v414, (const void **)v379);
              llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v379, "Cost", 4uLL, v245, v241);
              v252 = sub_1C47E3888((uint64_t)&v405, (uint64_t)v379);
              v376.__r_.__value_.__r.__words[0] = (std::string::size_type)" and with tree size ";
              v376.__r_.__value_.__l.__size_ = 20;
              sub_1C53B17B4(v252 + 80, (const void **)&v376.__r_.__value_.__l.__data_);
              llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v376, "TreeSize", 8uLL, *((_DWORD *)v357 + 2));
              v253 = sub_1C47E3888(v252, (uint64_t)&v376);
              sub_1C61998EC((uint64_t)&v430, v253);
              v430 = &off_1E814E500;
              if (v378 < 0)
                operator delete(__p);
              if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v376.__r_.__value_.__l.__data_);
              if (v382 < 0)
                operator delete(v381);
              if (v380 < 0)
                operator delete(v379[0]);
              v405 = &off_1E814E790;
              v254 = (char *)v414;
              if ((_DWORD)v415)
              {
                v255 = (unint64_t)v415 << 6;
                do
                {
                  v256 = (void **)&v254[v255];
                  if (v254[v255 - 17] < 0)
                    operator delete(*(v256 - 5));
                  if (*((char *)v256 - 41) < 0)
                    operator delete(*(v256 - 8));
                  v255 -= 64;
                }
                while (v255);
                v254 = (char *)v414;
              }
              if (v254 != v416)
                free(v254);
              llvm::OptimizationRemarkEmitter::emit(v246, (llvm::DiagnosticInfoOptimizationBase *)&v430);
              v430 = &off_1E814E790;
              v257 = (char *)v433;
              if (v434)
              {
                v258 = (unint64_t)v434 << 6;
                do
                {
                  v259 = (void **)&v257[v258];
                  if (v257[v258 - 17] < 0)
                    operator delete(*(v259 - 5));
                  if (*((char *)v259 - 41) < 0)
                    operator delete(*(v259 - 8));
                  v258 -= 64;
                }
                while (v258);
                v257 = (char *)v433;
              }
              if (v257 != (char *)v435)
                free(v257);
            }
            v260 = *(unsigned __int8 **)(*((_QWORD *)v391 + v345) + 48);
            v376.__r_.__value_.__r.__words[0] = (std::string::size_type)v260;
            if (v260)
              llvm::MetadataTracking::track((uint64_t)&v376, v260, 2);
            v261 = (llvm::Value *)llvm::slpvectorizer::BoUpSLP::vectorizeTree((uint64_t *)v357, v371);
            v262 = v402;
            v263 = v349;
            if (sub_1C60AD368((uint64_t)v402))
            {
              v264 = *((_QWORD *)v262 - 12);
              v426 = *(_QWORD *)(v264 + 40);
              v427 = (char *)(v264 + 24);
              v265 = *(void **)(v264 + 48);
            }
            else
            {
              v426 = *((_QWORD *)v262 + 5);
              v427 = (char *)v262 + 24;
              v265 = (void *)*((_QWORD *)v262 + 6);
            }
            v405 = v265;
            if (v265)
            {
              llvm::MetadataTracking::track((uint64_t)&v405, (unsigned __int8 *)v265, 2);
              v266 = v405;
            }
            else
            {
              v266 = 0;
            }
            sub_1C4774EF4((uint64_t)&v423, 0, (uint64_t)v266);
            if (v405)
              llvm::MetadataTracking::untrack((uint64_t)&v405, (unsigned __int8 *)v405);
            if (*((_BYTE *)v262 + 16) == 85)
            {
              if (!sub_1C57BE738((uint64_t)&v405, (unsigned __int8 *)v262)
                && !sub_1C57BE7B8((uint64_t)&v430, (unsigned __int8 *)v262))
              {
                v268 = v261;
                goto LABEL_451;
              }
              v432[8] = 257;
              v267 = (char *)operator new(0x60uLL);
              *((_DWORD *)v267 + 13) = *((_DWORD *)v267 + 13) & 0x38000000 | 1;
              v268 = (llvm::Value *)(v267 + 32);
              *(_QWORD *)v267 = 0;
              *((_QWORD *)v267 + 1) = 0;
              *((_QWORD *)v267 + 2) = 0;
              *((_QWORD *)v267 + 3) = v267 + 32;
              WORD4(v408) = 257;
              llvm::FreezeInst::FreezeInst((uint64_t)(v267 + 32), v261, (uint64_t)&v405, 0);
              (*(void (**)(uint64_t, char *, void **, uint64_t, char *))(*(_QWORD *)v428 + 16))(v428, v267 + 32, &v430, v426, v427);
              if (!v424)
              {
LABEL_433:
                v263 = v349;
LABEL_451:
                v238 = v352;
                goto LABEL_452;
              }
              v269 = (char *)v423;
              v270 = (char *)v423 + 16 * v424;
              v271 = (unsigned __int8 **)(v267 + 80);
              while (2)
              {
                v272 = *(_DWORD *)v269;
                v273 = (unsigned __int8 *)*((_QWORD *)v269 + 1);
                if (v273)
                {
                  if (v272)
                    goto LABEL_442;
                  v379[0] = *((void **)v269 + 1);
                  llvm::MetadataTracking::track((uint64_t)v379, v273, 2);
                  v274 = *v271;
LABEL_446:
                  if (v274)
                    llvm::MetadataTracking::untrack((uint64_t)(v267 + 80), v274);
                  v275 = (unsigned __int8 *)v379[0];
                  *v271 = (unsigned __int8 *)v379[0];
                  if (v275)
                    llvm::MetadataTracking::retrack((uint64_t)v379, v275, (uint64_t)(v267 + 80));
                }
                else
                {
                  v274 = *v271;
                  if (*v271 || (v267[55] & 0x20) != 0)
                  {
                    if (!v272)
                    {
                      v379[0] = 0;
                      goto LABEL_446;
                    }
LABEL_442:
                    llvm::Value::setMetadata(v268, *(_DWORD *)v269, (llvm::MDNode *)v273);
                  }
                }
                v269 += 16;
                if (v269 == v270)
                  goto LABEL_433;
                continue;
              }
            }
            v268 = v261;
LABEL_452:
            llvm::createSimpleTargetReduction((uint64_t)&v423, (uint64_t)a6, (uint64_t)v268, v403);
            v277 = (uint64_t)v276;
            if (v18)
            {
              v370 = (unsigned __int8 *)v376.__r_.__value_.__r.__words[0];
              if (v376.__r_.__value_.__r.__words[0])
              {
                llvm::MetadataTracking::track((uint64_t)&v370, (unsigned __int8 *)v376.__r_.__value_.__l.__data_, 2);
                v278 = v370;
              }
              else
              {
                v278 = 0;
              }
              sub_1C4774EF4((uint64_t)&v423, 0, (uint64_t)v278);
              if (v370)
                llvm::MetadataTracking::untrack((uint64_t)&v370, v370);
              v405 = "op.rdx";
              WORD4(v408) = 259;
              v18 = (char *)sub_1C60AD4E0((uint64_t)&v423, v403, (uint64_t)v18, v277, (uint64_t)&v405, (uint64_t ***)&v386);
            }
            else
            {
              v18 = v276;
            }
            v188 = v263 + v238;
            v170 = 1 << ~__clz(v348 - v188);
            if ((_DWORD)v348 == v188)
              v279 = 0;
            else
              v279 = v170;
            if (v376.__r_.__value_.__r.__words[0])
              llvm::MetadataTracking::untrack((uint64_t)&v376, (unsigned __int8 *)v376.__r_.__value_.__l.__data_);
            if (v279 < 3 || v188 >= v343 - v279)
              goto LABEL_516;
          }
          v18 = 0;
        }
      }
LABEL_553:
      if (v420 != v422)
        free(v420);
      sub_1C63E18F0((uint64_t)v371);
      if (v423 != &v425)
        free(v423);
LABEL_557:
      v78 = 1;
LABEL_156:
      if (v402 != (llvm::ValueAsMetadata *)-8192 && v402 != (llvm::ValueAsMetadata *)-4096 && v402)
      {
        v79 = v400 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v400 & 0xFFFFFFFFFFFFFFF8) = v401;
        if (v401)
        {
          *v401 = *v401 & 7 | v79;
        }
        else
        {
          v80 = v402;
          v81 = ***(int32x2_t ****)v402;
          v82 = (unint64_t)v81[303];
          if (v82 <= v79)
          {
            v83 = v81[305].u32[0];
            if (v82 + 16 * v83 > v79)
            {
              v84 = v83 - 1;
              LODWORD(v85) = v84 & ((v402 >> 4) ^ (v402 >> 9));
              v86 = (llvm::ValueAsMetadata **)(v82 + 16 * v85);
              v87 = *v86;
              if (v402 == *v86)
              {
LABEL_167:
                *v86 = (llvm::ValueAsMetadata *)-8192;
                v81[304] = vadd_s32(v81[304], (int32x2_t)0x1FFFFFFFFLL);
                v80 = v402;
              }
              else
              {
                v88 = 1;
                while (v87 != (llvm::ValueAsMetadata *)-4096)
                {
                  v89 = v85 + v88++;
                  v85 = v89 & v84;
                  v87 = *(llvm::ValueAsMetadata **)(v82 + 16 * v85);
                  if (v402 == v87)
                  {
                    v86 = (llvm::ValueAsMetadata **)(v82 + 16 * v85);
                    goto LABEL_167;
                  }
                }
              }
              *((_BYTE *)v80 + 17) &= ~1u;
            }
          }
        }
      }
      sub_1C6176BF8(&v394);
      if (v391 != v393)
        free(v391);
      sub_1C627AFCC((char **)&v386);
      v90 = v78 ^ 1;
      if (!v18)
        v90 = 1;
      if ((v90 & 1) != 0)
      {
LABEL_31:
        if (!v358)
        {
          a5 = v357;
          this = v355;
LABEL_41:
          v18 = v356;
LABEL_42:
          if (*(unsigned __int8 *)(v20 + 16) - 81 >= 2)
          {
            v386 = 6;
            v387 = 0;
            v388 = (int32x2_t ****)v20;
            if (v20 != -8192 && v20 != -4096 && v20)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v386);
            v26 = (_QWORD *)sub_1C5087E70((unsigned int *)&v383, (unint64_t)&v386, 1);
            v27 = v384;
            v28 = &v383[24 * v384];
            *(_QWORD *)v28 = 6;
            *((_QWORD *)v28 + 1) = 0;
            v29 = (unint64_t)(v28 + 8);
            v30 = v26[2];
            *((_QWORD *)v28 + 2) = v30;
            if (v30 != -8192 && v30 != -4096)
            {
              if (v30)
              {
                v31 = *v26 & 0xFFFFFFFFFFFFFFF8;
                *((_QWORD *)v28 + 1) = *(_QWORD *)v31;
                *(_QWORD *)v31 = v28;
                *(_QWORD *)v28 = v31 | 6;
                v32 = (uint64_t *)*((_QWORD *)v28 + 1);
                if (v32)
                  *v32 = *v32 & 7 | v29;
              }
            }
            LODWORD(v384) = v27 + 1;
            if (v388 != (int32x2_t ****)-8192 && v388 != (int32x2_t ****)-4096 && v388)
            {
              v33 = v386 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)(v386 & 0xFFFFFFFFFFFFFFF8) = v387;
              if (v387)
              {
                *(_QWORD *)v387 = *(_QWORD *)v387 & 7 | v33;
              }
              else
              {
                v34 = v388;
                v35 = ***v388;
                v36 = (unint64_t)v35[303];
                if (v36 <= v33)
                {
                  v37 = v35[305].u32[0];
                  if (v36 + 16 * v37 > v33)
                  {
                    v38 = v37 - 1;
                    LODWORD(v39) = v38 & ((v388 >> 4) ^ (v388 >> 9));
                    v40 = (int32x2_t *****)(v36 + 16 * v39);
                    v41 = *v40;
                    if (v388 == *v40)
                    {
LABEL_66:
                      *v40 = (int32x2_t ****)-8192;
                      v35[304] = vadd_s32(v35[304], (int32x2_t)0x1FFFFFFFFLL);
                      v34 = v388;
                    }
                    else
                    {
                      v42 = 1;
                      while (v41 != (int32x2_t ****)-4096)
                      {
                        v43 = v39 + v42++;
                        v39 = v43 & v38;
                        v41 = *(int32x2_t *****)(v36 + 16 * v39);
                        if (v388 == v41)
                        {
                          v40 = (int32x2_t *****)(v36 + 16 * v39);
                          goto LABEL_66;
                        }
                      }
                    }
                    *((_BYTE *)v34 + 17) &= ~1u;
                  }
                }
              }
            }
          }
LABEL_43:
          if (++v361 < dword_1ED82BD78)
          {
            v23 = *(_DWORD *)(v20 + 20);
            if ((v23 & 0x40000000) != 0)
            {
              v25 = *(uint64_t **)(v20 - 8);
              v24 = v23 & 0x7FFFFFF;
            }
            else
            {
              v24 = v23 & 0x7FFFFFF;
              v25 = (uint64_t *)(v20 - 32 * v24);
            }
            if (v24)
            {
              v44 = 32 * v24;
              do
              {
                v45 = *v25;
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v362, *v25);
                if (v46)
                {
                  v47 = *(unsigned __int8 *)(v45 + 16) <= 0x1Bu ? 0 : v45;
                  v430 = (void *)v47;
                  if (v47)
                  {
                    v48 = *(unsigned __int8 *)(v47 + 16);
                    v49 = v48 != 83 && (v48 - 81) >= 2;
                    if (v49)
                    {
                      v386 = v47;
                      v405 = 0;
                      if ((sub_1C61DB414((uint64_t *)v18, &v386, &v405) & 1) == 0
                        && *(llvm::BasicBlock **)(v47 + 40) == a4)
                      {
                        sub_1C60AE744(v367, &v430, &v361);
                      }
                    }
                  }
                }
                v25 += 4;
                v44 -= 32;
              }
              while (v44);
            }
          }
          goto LABEL_180;
        }
        a5 = v357;
        this = v355;
        if (!v360)
          goto LABEL_41;
        v18 = v356;
        if (!v359)
          goto LABEL_42;
        if (*(unsigned __int8 *)(v360 + 16) <= 0x1Bu)
          v22 = 0;
        else
          v22 = (llvm::PHINode *)v360;
        if (v22 == v358)
        {
          v20 = v359;
          if (*(unsigned __int8 *)(v359 + 16) > 0x1Bu)
            goto LABEL_42;
        }
        else
        {
          v20 = v360;
          if (v22)
            goto LABEL_42;
        }
        goto LABEL_180;
      }
      if (v18[16] <= 0x1Bu)
        v91 = 0;
      else
        v91 = v18;
      v386 = (uint64_t)v91;
      if (!v91)
      {
        v11 = 1;
        v18 = v356;
        a5 = v357;
        this = v355;
        goto LABEL_43;
      }
      sub_1C60AE744(v367, &v386, &v361);
      v11 = 1;
      v18 = v356;
      a5 = v357;
      this = v355;
LABEL_180:
      v358 = 0;
LABEL_181:
      v17 = *((_QWORD *)&v369 + 1);
      if (!*((_QWORD *)&v369 + 1))
      {
        if ((_DWORD)v384)
        {
          v328 = 24 * v384;
          v329 = v383 + 16;
          do
          {
            v330 = *(llvm::Instruction **)v329;
            if (*(_QWORD *)v329)
              v331 = *(unsigned __int8 *)(*(_QWORD *)v329 + 16) >= 0x1Cu;
            else
              v331 = 0;
            if (v331)
            {
              v386 = *(_QWORD *)v329;
              v405 = 0;
              if ((sub_1C61DB414((uint64_t *)v18, &v386, &v405) & 1) == 0)
                v11 |= llvm::SLPVectorizerPass::tryToVectorize(this, v330, a5);
            }
            v329 += 24;
            v328 -= 24;
          }
          while (v328);
        }
        break;
      }
    }
  }
  sub_1C56E89BC(&v383);
  if (v363 != v362)
    free(v363);
  v332 = (void **)v367[1];
  v333 = (void **)v368;
  *((_QWORD *)&v369 + 1) = 0;
  v334 = v368 - (unint64_t)v367[1];
  if ((unint64_t)v368 - (unint64_t)v367[1] >= 0x11)
  {
    do
    {
      operator delete(*v332);
      v333 = (void **)v368;
      v332 = (void **)((char *)v367[1] + 8);
      v367[1] = v332;
      v334 = v368 - (_QWORD)v332;
    }
    while ((_QWORD)v368 - (_QWORD)v332 > 0x10uLL);
  }
  v335 = v334 >> 3;
  if (v335 == 1)
  {
    v336 = 128;
  }
  else
  {
    if (v335 != 2)
      goto LABEL_580;
    v336 = 256;
  }
  *(_QWORD *)&v369 = v336;
LABEL_580:
  if (v332 != v333)
  {
    do
    {
      v337 = *v332++;
      operator delete(v337);
    }
    while (v332 != v333);
    if ((void *)v368 != v367[1])
      *(_QWORD *)&v368 = v368 + (((unint64_t)v367[1] - v368 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v367[0])
    operator delete(v367[0]);
  return v11 & 1;
}

BOOL sub_1C60AAE5C(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  int v16;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v35;

  if (a1 && a1[16] == 90)
  {
    v6 = *(_DWORD *)(*(_QWORD *)a1 + 32);
    goto LABEL_31;
  }
  v6 = 1;
  v7 = a1;
  while (1)
  {
    v8 = *(_QWORD *)v7;
    v9 = *(_DWORD *)(*(_QWORD *)v7 + 8);
    if (!v8 || v9 != 16)
      break;
    v7 = *(_BYTE **)(v8 + 16);
    v12 = *(unsigned int *)(v8 + 12);
    if ((_DWORD)v12)
    {
      v13 = 0;
      while (*(_QWORD *)&v7[v13] == *(_QWORD *)v7)
      {
        v13 += 8;
        if (8 * v12 == v13)
          goto LABEL_18;
      }
      return 0;
    }
LABEL_18:
    v6 *= (_DWORD)v12;
  }
  if (v8)
    v11 = v9 == 17;
  else
    v11 = 0;
  if (v11)
  {
    LODWORD(v12) = *(_DWORD *)(v8 + 32);
    v7 = (_BYTE *)(v8 + 24);
    goto LABEL_18;
  }
  if (v8)
    v14 = v9 == 18;
  else
    v14 = 0;
  if (!v14)
  {
    if ((v9 & 0xFE) == 0x12)
      goto LABEL_31;
    v15 = v9 > 0x15u;
    v16 = (1 << v9) & 0x20AC7F;
    if (!v15 && v16 != 0)
      goto LABEL_31;
    return 0;
  }
  v6 *= *(_DWORD *)(v8 + 32);
LABEL_31:
  v19 = v6;
  sub_1C6154790(a2, v6);
  sub_1C6154790(a3, v19);
  sub_1C60AE7DC((uint64_t)a1, (_QWORD *)a2, (_QWORD *)a3, 0);
  v20 = *(char **)a2;
  v21 = *(unsigned int *)(a2 + 8);
  v22 = *(char **)a2;
  if ((_DWORD)v21)
  {
    v23 = 8 * v21;
    v22 = *(char **)a2;
    while (*(_QWORD *)v22)
    {
      v22 += 8;
      v23 -= 8;
      if (!v23)
      {
        v22 = (char *)(*(_QWORD *)a2 + 8 * v21);
        break;
      }
    }
  }
  v24 = (v22 - v20) >> 3;
  v25 = v22 + 8;
  if (v24 != v21 && v25 != (_QWORD *)(*(_QWORD *)a2 + 8 * v21))
  {
    v27 = 8 * v21 - 8 * v24 - 8;
    do
    {
      if (*v25)
      {
        *(_QWORD *)v22 = *v25;
        v22 += 8;
      }
      ++v25;
      v27 -= 8;
    }
    while (v27);
    v20 = *(char **)a2;
  }
  *(_DWORD *)(a2 + 8) = (unint64_t)(v22 - v20) >> 3;
  v28 = *(char **)a3;
  v29 = *(unsigned int *)(a3 + 8);
  v30 = *(char **)a3;
  if ((_DWORD)v29)
  {
    v31 = 8 * v29;
    v30 = *(char **)a3;
    while (*(_QWORD *)v30)
    {
      v30 += 8;
      v31 -= 8;
      if (!v31)
      {
        v30 = (char *)(*(_QWORD *)a3 + 8 * v29);
        break;
      }
    }
  }
  v32 = (v30 - v28) >> 3;
  v33 = v30 + 8;
  if (v32 != v29 && v33 != (_QWORD *)(*(_QWORD *)a3 + 8 * v29))
  {
    v35 = 8 * v29 - 8 * v32 - 8;
    do
    {
      if (*v33)
      {
        *(_QWORD *)v30 = *v33;
        v30 += 8;
      }
      ++v33;
      v35 -= 8;
    }
    while (v35);
    v28 = *(char **)a3;
  }
  *(_DWORD *)(a3 + 8) = (unint64_t)(v30 - v28) >> 3;
  return *(_DWORD *)(a2 + 8) > 1u;
}

uint64_t sub_1C60AB09C(uint64_t a1, unsigned int (*a2)(uint64_t, _QWORD), uint64_t a3, void *a4, uint64_t a5, uint64_t (*a6)(uint64_t, _QWORD, _QWORD), uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, void *), uint64_t a10)
{
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  const std::nothrow_t *v16;
  unint64_t v17;
  uint64_t *v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  int v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  void *v37;
  uint64_t v38;
  _QWORD v39[7];

  v39[6] = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)a1;
  v14 = *(unsigned int *)(a1 + 8);
  v15 = (uint64_t *)(*(_QWORD *)a1 + 8 * v14);
  v37 = a4;
  v38 = a5;
  if (v14 < 0x81)
  {
LABEL_5:
    sub_1C60B55E4(v13, v15, (uint64_t)&v37, v14, 0, 0);
  }
  else
  {
    v16 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v17 = v14;
    while (1)
    {
      v18 = (uint64_t *)operator new(8 * v17, v16);
      if (v18)
        break;
      v19 = v17 > 1;
      v17 >>= 1;
      if (!v19)
        goto LABEL_5;
    }
    v20 = v18;
    sub_1C60B55E4(v13, v15, (uint64_t)&v37, v14, v18, v17);
    operator delete(v20);
  }
  v37 = v39;
  v38 = 0x600000000;
  v21 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v21)
  {
    v22 = 0;
    v23 = *(char **)a1;
    v24 = *(_QWORD *)a1 + 8 * v21;
    do
    {
      v25 = v23;
      while (1)
      {
        v26 = a6(a7, *(_QWORD *)v23, *(_QWORD *)v25);
        v27 = v26;
        if (!v26)
          break;
        v23 += 8;
        if (v23 == (char *)v24)
        {
          v23 = (char *)v24;
          break;
        }
      }
      v28 = v23 - v25;
      v29 = (unint64_t)(v23 - v25) >> 3;
      if (v29 < 2
        || (v30 = 1,
            (((uint64_t (*)(uint64_t, char *, _QWORD, uint64_t))a9)(a10, v25, (v28 >> 3), 1) & 1) == 0))
      {
        if (a2(a3, *(_QWORD *)v25) > v29 && (!(_DWORD)v38 || **(_QWORD **)v37 == **(_QWORD **)v25))
          sub_1C486AF08((unsigned int *)&v37, v25, &v25[v28 & 0x7FFFFFFF8]);
        v30 = v22;
      }
      if (v38 >= 2 && ((v27 & 1) != 0 || **(_QWORD **)v23 != **(_QWORD **)v25))
      {
        if ((a9(a10, v37) & 1) != 0)
        {
          v30 = 1;
        }
        else if ((_DWORD)v38)
        {
          v31 = (char *)v37;
          v32 = (char *)v37 + 8 * v38;
          do
          {
            v33 = v31;
            while (a6(a7, *(_QWORD *)v31, *(_QWORD *)v33))
            {
              v31 += 8;
              if (v31 == v32)
              {
                v31 = v32;
                break;
              }
            }
            if (((v31 - v33) & 0x7FFFFFFF0) != 0)
              v30 = ((unsigned int (*)(uint64_t, char *, _QWORD, _QWORD))a9)(a10, v33, ((unint64_t)(v31 - v33) >> 3), 0) | v30;
          }
          while (v31 != v32);
        }
        LODWORD(v38) = 0;
      }
      v22 = v30;
    }
    while (v23 != (char *)v24);
    if (v37 != v39)
      free(v37);
  }
  else
  {
    LOBYTE(v22) = 0;
  }
  return v22 & 1;
}

void llvm::initializeSLPVectorizerPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED838C98);
  if (v2 != -1)
  {
    v5[0] = sub_1C60AB3C8;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED838C98, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C60AB3C8(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  llvm::PassRegistry *v5;
  llvm::PassRegistry *v6;
  llvm::PassRegistry *v7;
  uint64_t v8;

  llvm::initializeAAResultsWrapperPassPass(a1, a2);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v3);
  llvm::initializeLoopSimplifyPass(a1, v4);
  llvm::initializeDemandedBitsWrapperPassPass(a1, v5);
  llvm::initializeOptimizationRemarkEmitterWrapperPassPass(a1, v6);
  llvm::initializeInjectTLIMappingsLegacyPass(a1, v7);
  v8 = operator new();
  *(_QWORD *)v8 = "SLP Vectorizer";
  *(_QWORD *)(v8 + 8) = 14;
  *(_QWORD *)(v8 + 16) = "slp-vectorizer";
  *(_QWORD *)(v8 + 24) = 14;
  *(_QWORD *)(v8 + 32) = &unk_1EF8F6430;
  *(_WORD *)(v8 + 40) = 0;
  *(_BYTE *)(v8 + 42) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = sub_1C60AE8D0;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v8, 1);
  return v8;
}

uint64_t sub_1C60AB490(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F6430;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81AD8C0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 108) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED838C98);
  if (v3 != -1)
  {
    v7[0] = sub_1C60AB3C8;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED838C98, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C60AB57C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  void **v6;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; i -= 16)
  {
    v5 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v5)
    {
      sub_1C6176BF8((_QWORD *)(v5 + 88));
      sub_1C60AFFDC((uint64_t *)(v5 + 64));
      MEMORY[0x1CAA32FB4](*(_QWORD *)(v5 + 40), 8);
      v6 = (void **)(v5 + 8);
      sub_1C60B0060(&v6);
      result = MEMORY[0x1CAA32FC0](v5, 0x10A0C4010E67334);
    }
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

void sub_1C60AB620(void **a1, unsigned int a2)
{
  void **v2;
  void **v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v2 = a1;
    v7 = -2;
    v3 = &a1[5 * a2];
    do
    {
      v6 = *v2;
      v5 = v2 + 2;
      v4 = v6;
      if (v6 != v5)
        free(v4);
      v2 = (void **)(v5 + 3);
    }
    while (v2 != v3);
  }
}

void sub_1C60AB6F8(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (char *)*((_QWORD *)v4 - 8);
        if (v4 - 48 != v6)
          free(v6);
        v4 -= 72;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned int *sub_1C60AB774(uint64_t a1)
{
  unsigned int *result;
  int v3;

  result = sub_1C6189548((unsigned int *)(a1 + 88));
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = 0;
  v3 = *(_DWORD *)(a1 + 176) - *(_DWORD *)(a1 + 172);
  if (v3 <= 16)
    v3 = 16;
  *(_DWORD *)(a1 + 172) = 0;
  *(_DWORD *)(a1 + 176) = v3;
  ++*(_DWORD *)(a1 + 180);
  return result;
}

_QWORD *sub_1C60AB7D4(_QWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 - 28 >= 3)
    v4 = 1 << (33 - v3);
  else
    v4 = 64;
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 5)
  {
    v6 = result + 1;
    *result = 1;
    v7 = result + 9;
    goto LABEL_14;
  }
  if ((v2 & 1) != 0)
    return sub_1C63E0B0C(v1, v5);
  if (v5 != *((_DWORD *)result + 4))
  {
    MEMORY[0x1CAA32FB4](result[1], 8);
    return sub_1C63E0B0C(v1, v5);
  }
  *result = 0;
  if (!v5)
    return result;
  v6 = (_QWORD *)result[1];
  v7 = &v6[2 * v5];
  do
  {
LABEL_14:
    *v6 = -4096;
    v6 += 2;
  }
  while (v6 != v7);
  return result;
}

BOOL sub_1C60AB898(uint64_t *a1, uint64_t a2, void *__s2, uint64_t a4, int *a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a6 != a2 && a4 == a2)
    return memcmp(a1, __s2, 8 * a2) == 0;
  if (a6 != a2)
    return 0;
  if (a2)
  {
    v7 = 8 * a2;
    do
    {
      v8 = *a1;
      v9 = *a5;
      if ((_DWORD)v9 == -1)
      {
        if (*(unsigned __int8 *)(v8 + 16) - 11 > 1)
          return 0;
      }
      else if (*((_QWORD *)__s2 + v9) != v8)
      {
        return 0;
      }
      ++a1;
      ++a5;
      v7 -= 8;
    }
    while (v7);
  }
  return 1;
}

uint64_t sub_1C60AB930(uint64_t a1)
{
  int v1;
  __int16 v2;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && (v1 - 83) >= 0xFFFFFFFE)
  {
    v2 = *(_WORD *)(a1 + 18);
    if (v1 == 81)
    {
      return (v2 & 0x3E) == 32;
    }
    else if ((v2 & 0x3Fu) >= 0x10)
    {
      return 0;
    }
    else
    {
      return (0xC3C3u >> (v2 & 0x3F)) & 1;
    }
  }
  else if ((v1 - 41) > 0x11)
  {
    return 0;
  }
  else
  {
    return llvm::Instruction::isCommutative((llvm::Instruction *)a1);
  }
}

char *sub_1C60AB994(char **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;

  v3 = *a1;
  v2 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v2 - *a1) >> 2);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1555555555555555)
    abort();
  if (0x5555555555555556 * ((a1[2] - v3) >> 2) > v5)
    v5 = 0x5555555555555556 * ((a1[2] - v3) >> 2);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 2) >= 0xAAAAAAAAAAAAAAALL)
    v8 = 0x1555555555555555;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x1555555555555555)
      sub_1C4764EE4();
    v9 = (char *)operator new(12 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[12 * v4];
  *(_QWORD *)v10 = *(_QWORD *)a2;
  *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
  v11 = v10 + 12;
  if (v2 != v3)
  {
    do
    {
      v12 = *(_QWORD *)(v2 - 12);
      v2 -= 12;
      v13 = *((_DWORD *)v2 + 2);
      *(_QWORD *)(v10 - 12) = v12;
      v10 -= 12;
      *((_DWORD *)v10 + 2) = v13;
    }
    while (v2 != v3);
    v2 = *a1;
  }
  *a1 = v10;
  a1[1] = v11;
  a1[2] = &v9[12 * v8];
  if (v2)
    operator delete(v2);
  return v11;
}

uint64_t sub_1C60ABAA0(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int *v6;
  int v7;
  uint64_t v8;
  int *v9;
  int v10;
  int v11;
  uint64_t v14;
  uint64_t v16;
  int v17[24];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(int **)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 8)
    {
      v16 = a2;
      *(_QWORD *)(a1 + 8) = operator new(12 * a2, (std::align_val_t)4uLL);
      *(_QWORD *)(a1 + 16) = v16;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C63E17A4(a1, v6, &v6[3 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v17;
  do
  {
    v10 = *(_DWORD *)(a1 + v8 + 8);
    v11 = *(_DWORD *)(a1 + v8 + 12);
    if ((v10 != -1 || v11 != -1) && (v10 != -2 || v11 != -2))
    {
      *(_QWORD *)v9 = *(_QWORD *)(a1 + v8 + 8);
      v9[2] = *(_DWORD *)(a1 + v8 + 16);
      v9 += 3;
    }
    v8 += 12;
  }
  while (v8 != 96);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v14 = a2;
    *(_QWORD *)(a1 + 8) = operator new(12 * a2, (std::align_val_t)4uLL);
    *(_QWORD *)(a1 + 16) = v14;
  }
  return sub_1C63E17A4(a1, v17, v9);
}

uint64_t sub_1C60ABC44(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, _BYTE *a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  BOOL v20;
  int v22;
  uint64_t v23;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  unint64_t PointersDiff;
  int v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  _QWORD *v55;
  int v56;
  _QWORD *v57;
  int v58;
  uint64_t v59;
  _QWORD *v60;
  int v61;
  int v62;
  BOOL v63;
  BOOL v64;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  unsigned int v74;
  int v75;
  char v76;
  int v77;
  _QWORD *i;
  unsigned int v79;
  _DWORD *v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  _QWORD *v87;
  BOOL v88;
  uint64_t v89;
  unsigned int v90;
  char v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int8 *v96;
  void *v97;
  uint64_t v98;
  _QWORD v99[2];
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;

  v12 = a3;
  v13 = a2;
  v103 = *MEMORY[0x1E0C80C00];
  v15 = *(unsigned int *)(*(_QWORD *)a1 + 8);
  v16 = *(unsigned __int8 *)(a2 + 16);
  if (a2 == a3)
  {
    if (v16 != 60)
      goto LABEL_95;
    v26 = **(_QWORD **)(*(_QWORD *)(a1 + 224) + 1936);
    if (!(*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v26 + 352))(v26, *(_QWORD *)a2, v15))
      goto LABEL_95;
    v27 = *(_QWORD *)(v13 + 8);
    if (v27)
    {
      v28 = *(_QWORD *)(v13 + 8);
      do
      {
        v28 = *(_QWORD *)(v28 + 8);
        LODWORD(v15) = v15 - 1;
      }
      while (v28);
      if ((_DWORD)v15)
      {
        v29 = -7;
        v30 = *(_QWORD *)(v13 + 8);
        do
        {
          v31 = v29;
          if (!v29)
            break;
          v30 = *(_QWORD *)(v30 + 8);
          ++v29;
        }
        while (v30);
        if (!v31)
          goto LABEL_95;
        v32 = -7;
        v33 = *(_QWORD *)(v13 + 8);
        do
        {
          v34 = v32;
          if (!v32)
            break;
          v33 = *(_QWORD *)(v33 + 8);
          ++v32;
        }
        while (v33);
        if (!v34)
          goto LABEL_95;
LABEL_80:
        v97 = a4;
        v98 = a5;
        v99[0] = a1;
        if (!sub_1C60AC5E8(v27, 0, (uint64_t *)&v97))
          goto LABEL_95;
        v52 = *(_QWORD *)(v13 + 8);
        v97 = a4;
        v98 = a5;
        v99[0] = a1;
        if (!sub_1C60AC5E8(v52, 0, (uint64_t *)&v97))
          goto LABEL_95;
      }
    }
    else if ((_DWORD)v15)
    {
      goto LABEL_80;
    }
    v23 = 3;
    goto LABEL_115;
  }
  if (v16 == 60)
    v17 = a2;
  else
    v17 = 0;
  v18 = *(unsigned __int8 *)(a3 + 16);
  if (v18 == 60)
    v19 = a3;
  else
    v19 = 0;
  if (v17)
    v20 = v19 == 0;
  else
    v20 = 1;
  if (!v20)
  {
    if (*(_QWORD *)(v17 + 40) == *(_QWORD *)(v19 + 40))
    {
      PointersDiff = llvm::getPointersDiff(*(llvm **)v17, *(llvm::Type **)(v17 - 32), *(llvm::Value **)v19, *(llvm::Type **)(v19 - 32), *(llvm::Value **)(a1 + 208), *(const llvm::DataLayout **)(a1 + 216), (llvm::ScalarEvolution *)1, 1, v88);
      if ((PointersDiff & 0xFF00000000) != 0 && (_DWORD)PointersDiff != 0)
      {
        if ((PointersDiff & 0x80000000) == 0)
          v37 = PointersDiff;
        else
          v37 = -(int)PointersDiff;
        if ((int)v15 >= 0)
          v38 = v15;
        else
          v38 = v15 + 1;
        if (v37 <= v38 >> 1)
        {
          v39 = (int)PointersDiff <= 0;
          goto LABEL_49;
        }
        goto LABEL_95;
      }
    }
LABEL_96:
    v23 = 0;
    goto LABEL_115;
  }
  if (v16 <= 0x14 && v18 < 0x15)
  {
LABEL_114:
    v23 = 2;
    goto LABEL_115;
  }
  v95 = 0;
  v96 = 0;
  v97 = &v96;
  v98 = (uint64_t)&v95;
  if (!sub_1C57E8E8C((_QWORD **)&v97, a2))
  {
    if (*(unsigned __int8 *)(v13 + 16) <= 0x1Bu)
      v40 = 0;
    else
      v40 = v13;
    v41 = *(unsigned __int8 *)(v12 + 16);
    if (v41 <= 0x1B)
      v42 = 0;
    else
      v42 = v12;
    if (!v40 || !v42)
    {
LABEL_75:
      v23 = v41 - 11 < 2;
      goto LABEL_115;
    }
    if (*(_QWORD *)(v40 + 40) != *(_QWORD *)(v42 + 40))
      goto LABEL_96;
    v43 = a10;
    v97 = v99;
    v98 = 0x400000000;
    sub_1C4FA6FB8((unsigned int *)&v97, a9, &a9[8 * a10]);
    v44 = v98;
    if (v98 >= HIDWORD(v98))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, (uint64_t)v99, v98 + 1, 8);
      v44 = v98;
    }
    *((_QWORD *)v97 + v44) = v40;
    v45 = (v98 + 1);
    LODWORD(v98) = v45;
    if (v45 >= HIDWORD(v98))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, (uint64_t)v99, v45 + 1, 8);
      LODWORD(v45) = v98;
    }
    *((_QWORD *)v97 + v45) = v42;
    LODWORD(v98) = v98 + 1;
    v46 = v98;
    v47 = v97;
    sub_1C6095230((uint64_t)&v92, (uint64_t *)v97, v98);
    if (v93)
    {
      if (*(_BYTE *)(v93 + 16) != 28)
      {
        v48 = *(_DWORD *)(v93 + 20);
        if ((v48 & 0x7FFFFFFu) < 3 || a10 || v94 == v93)
        {
          if (!(_DWORD)v46)
          {
LABEL_104:
            v49 = 0;
            if (v94 == v93)
              v43 = 2;
            else
              v43 = 1;
            goto LABEL_71;
          }
          v59 = 8 * v46;
          v60 = v47;
          while (((*(_DWORD *)(*v60 + 20) ^ v48) & 0x7FFFFFF) == 0)
          {
            ++v60;
            v59 -= 8;
            if (!v59)
              goto LABEL_104;
          }
        }
      }
    }
    v49 = 1;
LABEL_71:
    if (v47 != v99)
      free(v47);
    v23 = v43;
    if (!v49)
      goto LABEL_115;
    v41 = *(unsigned __int8 *)(v12 + 16);
    goto LABEL_75;
  }
  v22 = *(unsigned __int8 *)(v12 + 16);
  if ((v22 - 11) >= 2)
  {
    if (v22 != 89)
      goto LABEL_96;
    v50 = *(_DWORD *)(v12 + 20);
    v51 = (v50 & 0x40000000) != 0 ? *(_QWORD *)(v12 - 8) : v12 - 32 * (v50 & 0x7FFFFFF);
    v53 = *(unsigned __int8 **)v51;
    if (!*(_QWORD *)v51)
      goto LABEL_96;
    v54 = *(_QWORD *)(v51 + 32);
    if (!v54 || *(_BYTE *)(v54 + 16) != 16)
    {
      if (sub_1C4E7B480(v54))
        v23 = 4;
      else
        v23 = 0;
      goto LABEL_115;
    }
    if (!sub_1C609BB98(v53) || *(_QWORD *)v53 != *(_QWORD *)v96)
    {
      if (v53 == v96)
      {
        v55 = (_QWORD *)(v95 + 24);
        if (*(_DWORD *)(v95 + 32) >= 0x41u)
          v55 = (_QWORD *)*v55;
        v56 = *(_DWORD *)v55;
        v57 = (_QWORD *)(v54 + 24);
        if (*(_DWORD *)(v54 + 32) >= 0x41u)
          v57 = (_QWORD *)*v57;
        v58 = *(_DWORD *)v57 - v56;
        if (v58)
        {
          if (v58 >= 0)
            v61 = v58;
          else
            v61 = -v58;
          if ((int)v15 >= 0)
            v62 = v15;
          else
            v62 = v15 + 1;
          if (v61 <= v62 >> 1)
          {
            v39 = v58 <= 0;
LABEL_49:
            if (v39)
              v23 = 3;
            else
              v23 = 4;
            goto LABEL_115;
          }
          goto LABEL_114;
        }
      }
LABEL_95:
      v23 = 1;
      goto LABEL_115;
    }
  }
  v23 = 4;
LABEL_115:
  if (*(unsigned __int8 *)(v13 + 16) <= 0x1Bu)
    v13 = 0;
  if (*(unsigned __int8 *)(v12 + 16) <= 0x1Bu)
    v12 = 0;
  if (a6 == (_DWORD)a7)
    return v23;
  v63 = !v13 || v12 == 0;
  v64 = v63 || v13 == v12;
  if (v64 || (_DWORD)v23 == 0)
    return v23;
  v67 = *(unsigned __int8 *)(v13 + 16);
  if (v67 == 60 && *(_BYTE *)(v12 + 16) == 60)
    return v23;
  v68 = *(_DWORD *)(v13 + 20);
  v69 = v68 & 0x7FFFFFF;
  if ((v68 & 0x7FFFFFFu) >= 3 && (*(_DWORD *)(v12 + 20) & 0x7FFFFFFu) > 2)
    return v23;
  if (v67 == 89 && *(_BYTE *)(v12 + 16) == 89)
    return v23;
  v97 = v99;
  v98 = 0x400000000;
  v101 = 0;
  v102 = 0;
  v100 = &v101;
  if (!(_DWORD)v69)
  {
    v87 = 0;
    goto LABEL_182;
  }
  v90 = v23;
  v70 = 0;
  v71 = (a6 + 1);
  v89 = v68 & 0x7FFFFFF;
  do
  {
    v92 = 0;
    v72 = sub_1C60AB930(v12);
    if ((int)v70 + 1 < (*(_DWORD *)(v12 + 20) & 0x7FFFFFFu))
      v73 = v70 + 1;
    else
      v73 = *(_DWORD *)(v12 + 20) & 0x7FFFFFF;
    if (v72)
      v74 = 0;
    else
      v74 = v70;
    if (v72)
      v75 = *(_DWORD *)(v12 + 20) & 0x7FFFFFF;
    else
      v75 = v73;
    if (v74 == v75)
      goto LABEL_179;
    v76 = 0;
    v77 = 0;
LABEL_151:
    v91 = v76;
    do
    {
      if (v102)
      {
        for (i = v101; i; i = (_QWORD *)*i)
        {
          v79 = *((_DWORD *)i + 7);
          if (v74 >= v79)
          {
            if (v79 >= v74)
              goto LABEL_172;
            ++i;
          }
        }
      }
      else if ((_DWORD)v98)
      {
        v80 = v97;
        v81 = 4 * v98;
        while (*v80 != v74)
        {
          ++v80;
          v81 -= 4;
          if (!v81)
            goto LABEL_165;
        }
        if (v81)
          goto LABEL_172;
      }
LABEL_165:
      v82 = *(_DWORD *)(v13 + 20);
      if ((v82 & 0x40000000) != 0)
        v83 = *(_QWORD *)(v13 - 8);
      else
        v83 = v13 - 32 * (v82 & 0x7FFFFFF);
      v84 = *(_DWORD *)(v12 + 20);
      if ((v84 & 0x40000000) != 0)
        v85 = *(_QWORD *)(v12 - 8);
      else
        v85 = v12 - 32 * (v84 & 0x7FFFFFF);
      v86 = sub_1C60ABC44(a1, *(_QWORD *)(v83 + 32 * v70), *(_QWORD *)(v85 + 32 * v74), v13, v12, v71, a7);
      if (v86 > (v77 & ~(v77 >> 31)))
      {
        v77 = v86;
        v92 = v74++;
        v76 = 1;
        if (v74 != v75)
          goto LABEL_151;
        goto LABEL_177;
      }
LABEL_172:
      ++v74;
    }
    while (v74 != v75);
    if ((v91 & 1) == 0)
      goto LABEL_178;
LABEL_177:
    sub_1C4854E58((uint64_t)&v97, &v92);
    v90 += v77;
LABEL_178:
    v69 = v89;
LABEL_179:
    ++v70;
  }
  while (v70 != v69);
  v87 = v101;
  v23 = v90;
LABEL_182:
  sub_1C47655E8((uint64_t)&v100, v87);
  if (v97 != v99)
    free(v97);
  return v23;
}

uint64_t sub_1C60AC340(uint64_t *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  int v20;
  _QWORD *v21;
  uint64_t *v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  int v35;
  _BYTE v36[32];

  v4 = *a1;
  v5 = *(_QWORD *)(*(_QWORD *)(*a1 + 48 * a4) + 16 * a2);
  if (*(unsigned __int8 *)(v5 + 16) < 0x1Cu)
    return 0;
  v6 = 16 * a2;
  if (v5 == *(_QWORD *)(*(_QWORD *)(v4 + 48 * a3) + v6))
    return 0;
  v9 = v36;
  v32 = v36;
  v33 = v36;
  v34 = 4;
  v35 = 0;
  v10 = *(unsigned int *)(v4 + 8);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 16 * v10;
    v14 = v36;
    do
    {
      if (v6 != v11)
      {
        v15 = *(_QWORD *)(*(_QWORD *)(*a1 + 48 * a3) + v11);
        if (*(unsigned __int8 *)(v15 + 16) < 0x1Cu)
          goto LABEL_25;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v32, v15);
        v9 = v32;
        v14 = v33;
        v12 = HIDWORD(v34);
      }
      v11 += 16;
    }
    while (v13 != v11);
    v16 = v12 - v35;
  }
  else
  {
    v16 = 0;
  }
  v18 = sub_1C477672C((uint64_t)&v32, v5);
  if (v33 == v32)
    v19 = (uint64_t *)((char *)&v34 + 4);
  else
    v19 = &v34;
  if (v18 == (_QWORD *)&v33[8 * *(unsigned int *)v19])
    v20 = v16 + 1;
  else
    v20 = v16;
  v21 = sub_1C477672C((uint64_t)&v32, *(_QWORD *)(*(_QWORD *)(*a1 + 48 * a3) + v6));
  v9 = v32;
  v14 = v33;
  if (v33 == v32)
    v22 = (uint64_t *)((char *)&v34 + 4);
  else
    v22 = &v34;
  if (v21 == (_QWORD *)&v33[8 * *(unsigned int *)v22])
    v23 = v16 + 1;
  else
    v23 = v16;
  if (v20 == v23)
  {
LABEL_25:
    v17 = 0;
  }
  else
  {
    v24 = v23;
    if (v23)
    {
      v25 = (v23 - 1) | ((unint64_t)(v23 - 1) >> 1) | (((v23 - 1) | ((unint64_t)(v23 - 1) >> 1)) >> 2);
      v26 = v25 | (v25 >> 4) | ((v25 | (v25 >> 4)) >> 8);
      v27 = (v26 | (v26 >> 16) | ((v26 | (v26 >> 16)) >> 32)) + 1;
    }
    else
    {
      LODWORD(v27) = 0;
    }
    if (v20)
    {
      v28 = (v20 - 1) | ((unint64_t)(v20 - 1) >> 1) | (((v20 - 1) | ((unint64_t)(v20 - 1) >> 1)) >> 2);
      v29 = v28 | (v28 >> 4) | ((v28 | (v28 >> 4)) >> 8);
      v30 = ~(v29 | (v29 >> 16) | ((v29 | (v29 >> 16)) >> 32));
    }
    else
    {
      LODWORD(v30) = 0;
    }
    v17 = (v20 - v24 + v27 + v30);
  }
  if (v14 != v9)
    free(v14);
  return v17;
}

uint64_t sub_1C60AC548(_QWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v9;

  v5 = 16 * a2;
  v6 = *(_QWORD *)(*(_QWORD *)(*a1 + 48 * a4) + v5);
  v7 = *(_QWORD *)(*(_QWORD *)(*a1 + 48 * a3) + v5);
  if (sub_1C6095A80(v6) && sub_1C6095A80(v7))
    return 1;
  if (v6)
    v9 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
  else
    v9 = 0;
  if (v9 && *(unsigned __int8 *)(v7 + 16) >= 0x1Cu)
    return llvm::slpvectorizer::BoUpSLP::areAllUsersVectorized(a1[28], v6, 0, 0);
  else
    return 0;
}

uint64_t sub_1C60AC5E8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[9];

  if (a1 == a2)
    return 1;
  v14[7] = v3;
  v14[8] = v4;
  v6 = a1;
  v7 = *a3;
  v8 = a3[1];
  v9 = a3[2];
  while (1)
  {
    v10 = *(_QWORD *)(v6 + 24);
    if (v7 != v10 && v8 != v10)
    {
      v12 = *(_QWORD *)(v9 + 224) + 80;
      v14[0] = 0;
      result = sub_1C61B5A68(v12, v10, v14);
      if (!(_DWORD)result)
        return result;
      if (!*(_QWORD *)(v14[0] + 8))
        break;
    }
    v6 = *(_QWORD *)(v6 + 8);
    if (v6 == a2)
      return 1;
  }
  return 0;
}

uint64_t sub_1C60AC688(llvm *this, const llvm::Instruction *a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  BOOL v11;

  result = 1;
  if (this && *((unsigned __int8 *)this + 16) >= 0x1Cu)
  {
    if ((llvm::mayHaveNonDefUseDependency(this, a2) & 1) != 0)
      return 0;
    v4 = *((_DWORD *)this + 5);
    if ((v4 & 0x40000000) != 0)
    {
      v6 = (char *)*((_QWORD *)this - 1);
      v5 = v4 & 0x7FFFFFF;
      if (!v5)
        return 1;
    }
    else
    {
      v5 = v4 & 0x7FFFFFF;
      v6 = (char *)this - 32 * v5;
      if (!v5)
        return 1;
    }
    v7 = 32 * v5;
    while (1)
    {
      v8 = *(_QWORD *)v6;
      v9 = *(unsigned __int8 *)(*(_QWORD *)v6 + 16);
      v10 = v9 == 83 || v8 == 0;
      v11 = !v10 && v9 >= 0x1C;
      if (v11 && *(_QWORD *)(v8 + 40) == *((_QWORD *)this + 5))
        break;
      v6 += 32;
      v7 -= 32;
      if (!v7)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1C60AC72C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD v9[2];
  int v10;

  v9[0] = a2;
  v9[1] = a3;
  v10 = a4;
  v5 = sub_1C4DC1E54(a1, (unint64_t)v9);
  v6 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8);
  v7 = *(_OWORD *)v5;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v5 + 16);
  *(_OWORD *)v6 = v7;
  LODWORD(v6) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v6;
  return *(_QWORD *)a1 + 24 * v6 - 24;
}

void sub_1C60AC798(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  char *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 16;
      do
      {
        v7 = (char *)*((_QWORD *)v6 - 2);
        if (v6 != v7)
          free(v7);
        v8 = v6 - 24;
        v6 -= 40;
      }
      while (v8 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C60AC818(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  _QWORD *v41;

  v4 = a2;
  *((_BYTE *)a2 + 160) = 1;
  do
  {
    v6 = *v4;
    if (*v4 != v4[1])
      goto LABEL_51;
    v7 = v4[2];
    if (v7)
    {
      v8 = *(_QWORD **)v7;
      v9 = *(unsigned int *)(v7 + 8);
      if ((_DWORD)v9)
      {
        v10 = 8 * v9;
        v11 = *(_QWORD **)v7;
        v12 = &v8[v9];
        while (*v11 != v6)
        {
          ++v11;
          v10 -= 8;
          if (!v10)
          {
            v11 = v12;
            break;
          }
        }
      }
      else
      {
        v11 = *(_QWORD **)v7;
      }
      v16 = *(unsigned int *)(v7 + 216);
      if ((_DWORD)v16)
      {
        v17 = 0;
        v18 = (int)(v11 - v8);
        v19 = 80 * v16;
        do
        {
          v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 208) + v17) + 8 * v18);
          if (v20)
            v21 = *(unsigned __int8 *)(v20 + 16) >= 0x1Cu;
          else
            v21 = 0;
          if (v21)
          {
            v41 = a3;
            sub_1C60A4238(a1, v20, (void (*)(uint64_t, uint64_t))sub_1C63E1A28, (uint64_t)&v41);
          }
          v17 += 80;
        }
        while (v19 != v17);
      }
      goto LABEL_32;
    }
    v13 = *(_DWORD *)(v6 + 20);
    if ((v13 & 0x40000000) != 0)
    {
      v15 = *(uint64_t **)(v6 - 8);
      v14 = v13 & 0x7FFFFFF;
      if (v14)
      {
LABEL_24:
        v22 = 32 * v14;
        do
        {
          v23 = *v15;
          if (*v15)
            v24 = *(unsigned __int8 *)(*v15 + 16) >= 0x1Cu;
          else
            v24 = 0;
          if (v24)
          {
            v41 = a3;
            sub_1C60A4238(a1, v23, (void (*)(uint64_t, uint64_t))sub_1C63E1A28, (uint64_t)&v41);
          }
          v15 += 4;
          v22 -= 32;
        }
        while (v22);
      }
    }
    else
    {
      v14 = v13 & 0x7FFFFFF;
      v15 = (uint64_t *)(v6 - 32 * v14);
      if (v14)
        goto LABEL_24;
    }
LABEL_32:
    v25 = *((unsigned int *)v4 + 14);
    if ((_DWORD)v25)
    {
      v26 = (uint64_t *)v4[6];
      v27 = &v26[v25];
      do
      {
        v28 = *v26;
        if (*(_DWORD *)(*v26 + 152) != -1)
        {
          --*(_DWORD *)(v28 + 156);
          v29 = *(_QWORD *)(v28 + 24);
          if (v29)
          {
            v30 = 0;
            v31 = v29;
            while (1)
            {
              v32 = *(_DWORD *)(v31 + 156);
              if (v32 == -1)
                break;
              v30 += v32;
              v31 = *(_QWORD *)(v31 + 32);
              if (!v31)
              {
                if (v30)
                  break;
                goto LABEL_40;
              }
            }
          }
          else
          {
LABEL_40:
            v41 = (_QWORD *)v29;
            sub_1C518D044(a3, (uint64_t *)&v41);
          }
        }
        ++v26;
      }
      while (v26 != v27);
    }
    v33 = *((unsigned int *)v4 + 26);
    if ((_DWORD)v33)
    {
      v34 = (uint64_t *)v4[12];
      v35 = &v34[v33];
      do
      {
        v36 = *v34;
        *(_DWORD *)(v36 + 156) = *(_DWORD *)(*v34 + 156) - 1;
        v37 = *(_QWORD *)(v36 + 24);
        if (v37)
        {
          v38 = 0;
          v39 = v37;
          while (1)
          {
            v40 = *(_DWORD *)(v39 + 156);
            if (v40 == -1)
              break;
            v38 += v40;
            v39 = *(_QWORD *)(v39 + 32);
            if (!v39)
            {
              if (v38)
                break;
              goto LABEL_49;
            }
          }
        }
        else
        {
LABEL_49:
          v41 = (_QWORD *)v37;
          sub_1C518D044(a3, (uint64_t *)&v41);
        }
        ++v34;
      }
      while (v34 != v35);
    }
LABEL_51:
    v4 = (uint64_t *)v4[4];
  }
  while (v4);
}

double sub_1C60ACA58(uint64_t a1, uint64_t a2)
{
  double result;

  result = NAN;
  *(_QWORD *)(a2 + 152) = -1;
  *(_DWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 104) = 0;
  return result;
}

uint64_t sub_1C60ACA6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;

  v2 = *(_QWORD *)(a1 + 32);
  v4 = 0;
  result = sub_1C61B75F0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)(v2 - 8), &v4);
  if ((_DWORD)result)
  {
    *v4 = -8192;
    *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  *(_QWORD *)(a1 + 32) -= 8;
  return result;
}

_OWORD *sub_1C60ACADC(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63E1BC4(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *result = v12;
      result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

void sub_1C60ACBA4(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *i;
  char *v40;
  __int128 v41;
  void *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v5 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
    {
LABEL_20:
      *(_QWORD *)v6 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v18 = 1;
      else
        v18 = (v6 - v10) >> 2;
      if (!(v18 >> 61))
      {
        v19 = (char *)operator new(8 * v18);
        v20 = &v19[8 * (v18 >> 2)];
        v21 = &v19[8 * v18];
        v23 = v6 - v7;
        v22 = v6 == v7;
        v6 = v20;
        if (!v22)
        {
          v6 = &v20[v23 & 0xFFFFFFFFFFFFFFF8];
          v24 = 8 * (v23 >> 3);
          v25 = &v19[8 * (v18 >> 2)];
          do
          {
            v26 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v25 = v26;
            v25 += 8;
            v24 -= 8;
          }
          while (v24);
        }
        goto LABEL_18;
      }
LABEL_44:
      sub_1C4764EE4();
    }
LABEL_5:
    v12 = v11 >> 3;
    if (v12 >= -1)
      v13 = v12 + 1;
    else
      v13 = v12 + 2;
    v14 = -(v13 >> 1);
    v15 = v13 >> 1;
    v16 = &v7[-8 * v15];
    v17 = v6 - v7;
    if (v17)
    {
      memmove(&v7[-8 * v15], v7, v17);
      v7 = *(char **)(a1 + 8);
    }
    v6 = &v16[v17];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = v6;
    goto LABEL_20;
  }
  v27 = *(_QWORD *)(a1 + 16);
  v28 = v27 - *(_QWORD *)(a1 + 8);
  v29 = *(_QWORD *)(a1 + 24);
  v30 = v29 - *(_QWORD *)a1;
  if (v28 < v30)
  {
    if (v29 != v27)
    {
      *(_QWORD *)&v43 = operator new(0x1000uLL);
      sub_1C61351F0(a1, &v43);
      return;
    }
    *(_QWORD *)&v43 = operator new(0x1000uLL);
    sub_1C6135314((void **)a1, &v43);
    v31 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v32 = *v31;
    v7 = (char *)(v31 + 1);
    v8 = v32;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
      goto LABEL_20;
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v33 = 1;
      else
        v33 = (v6 - v10) >> 2;
      if (!(v33 >> 61))
      {
        v19 = (char *)operator new(8 * v33);
        v20 = &v19[8 * (v33 >> 2)];
        v21 = &v19[8 * v33];
        v34 = v6 - v7;
        v22 = v6 == v7;
        v6 = v20;
        if (!v22)
        {
          v6 = &v20[v34 & 0xFFFFFFFFFFFFFFF8];
          v35 = 8 * (v34 >> 3);
          v36 = &v19[8 * (v33 >> 2)];
          do
          {
            v37 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v36 = v37;
            v36 += 8;
            v35 -= 8;
          }
          while (v35);
        }
LABEL_18:
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = v20;
        *(_QWORD *)(a1 + 16) = v6;
        *(_QWORD *)(a1 + 24) = v21;
        if (v10)
        {
          operator delete(v10);
          v6 = *(char **)(a1 + 16);
        }
        goto LABEL_20;
      }
      goto LABEL_44;
    }
    goto LABEL_5;
  }
  if (v29 == *(_QWORD *)a1)
    v38 = 1;
  else
    v38 = v30 >> 2;
  v45 = a1 + 24;
  if (v38 >> 61)
    goto LABEL_44;
  *(_QWORD *)&v43 = operator new(8 * v38);
  *((_QWORD *)&v43 + 1) = v43 + v28;
  *(_QWORD *)&v44 = v43 + v28;
  *((_QWORD *)&v44 + 1) = v43 + 8 * v38;
  v42 = operator new(0x1000uLL);
  sub_1C61351F0((uint64_t)&v43, &v42);
  for (i = *(_QWORD **)(a1 + 16); i != *(_QWORD **)(a1 + 8); sub_1C6135314((void **)&v43, i))
    --i;
  v40 = *(char **)a1;
  v41 = v44;
  *(_OWORD *)a1 = v43;
  *(_OWORD *)(a1 + 16) = v41;
  if (v40)
    operator delete(v40);
}

uint64_t sub_1C60ACE34(uint64_t a1)
{
  unsigned int v2;
  int v3;
  uint64_t result;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  const llvm::Instruction *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  llvm::Instruction *v15;
  llvm::Instruction *v16;
  int v17;
  uint64_t v18;
  const llvm::Instruction *v19;
  __int16 v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  llvm::Instruction *v25;
  __int128 v26;
  llvm::Instruction **v27;
  llvm::Instruction *v28;
  llvm::Instruction *v29;
  int v30;

  v2 = *(unsigned __int8 *)(a1 + 16);
  if (v2 <= 0x2C)
  {
    if (v2 != 5)
    {
      if (v2 != 41)
        goto LABEL_13;
      return 1;
    }
    v3 = *(unsigned __int16 *)(a1 + 18);
    if (v3 == 13)
      return 1;
    if (v3 == 17)
      return 2;
    if (v3 != 28)
      goto LABEL_13;
    return 4;
  }
  if (v2 == 45)
    return 2;
  if (v2 == 56)
    return 4;
LABEL_13:
  if (sub_1C57BE738((uint64_t)&v26, (unsigned __int8 *)a1))
    return 4;
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (v5 == 57 || v5 == 5 && *(_WORD *)(a1 + 18) == 29 || sub_1C57BE7B8((uint64_t)&v26, (unsigned __int8 *)a1))
    return 3;
  v6 = *(unsigned __int8 *)(a1 + 16);
  if (v6 > 0x2D)
  {
    if (v6 != 46)
    {
      if (v6 != 58)
        goto LABEL_27;
      return 5;
    }
    return 11;
  }
  if (v6 != 5)
  {
    if (v6 != 42)
    {
LABEL_27:
      LODWORD(v26) = 193;
      *(_QWORD *)((char *)&v26 + 4) = 0;
      if (v6 == 84)
      {
        v7 = *(_QWORD *)(a1 - 32);
        if (v7)
        {
          if (!*(_BYTE *)(v7 + 16) && *(_QWORD *)(v7 + 24) == *(_QWORD *)(a1 + 72))
          {
            if (*(_DWORD *)(v7 + 36) == (_DWORD)v26)
              return 13;
            if (*(_DWORD *)(v7 + 36) == 202)
              return 12;
          }
        }
      }
      goto LABEL_41;
    }
    return 10;
  }
  v8 = *(unsigned __int16 *)(a1 + 18);
  switch(v8)
  {
    case 14:
      return 10;
    case 18:
      return 11;
    case 30:
      return 5;
  }
LABEL_41:
  if (sub_1C4E3D684((uint64_t)&v26, a1))
    return 7;
  if (sub_1C4E3D740((uint64_t)&v26, a1))
    return 6;
  if (sub_1C4E3D5C8((uint64_t)&v26, a1))
    return 9;
  if (sub_1C4E3D50C((uint64_t)&v26, a1))
    return 8;
  if (*(_BYTE *)(a1 + 16) != 85)
    return 0;
  v30 = 0;
  v28 = 0;
  v29 = 0;
  v9 = *(unsigned __int8 **)(a1 - 64);
  v10 = *(const llvm::Instruction **)(a1 - 32);
  v11 = *(_QWORD *)(a1 - 96);
  if (!v11)
    goto LABEL_63;
  v12 = *(unsigned __int8 *)(v11 + 16);
  if (v12 < 0x1C || v12 - 83 < 0xFFFFFFFE)
    goto LABEL_63;
  v13 = *(unsigned __int8 **)(v11 - 64);
  if (v9 == v13)
  {
    v18 = *(_QWORD *)(v11 - 32);
    if (v18)
    {
      if (*(unsigned __int8 *)(v18 + 16) >= 0x1Cu)
      {
        v24 = *(unsigned __int8 **)(v11 - 32);
        v28 = (llvm::Instruction *)v24;
        v19 = v10;
        if (*((_BYTE *)v10 + 16) != 89)
          return 0;
        v20 = *(_WORD *)(v11 + 18);
        result = llvm::Instruction::isIdenticalToWhenDefined((llvm::Instruction *)v24, v10);
        if ((_DWORD)result)
        {
          v21 = *((unsigned __int8 *)v19 + 17) ^ v24[17];
          goto LABEL_73;
        }
        return result;
      }
    }
  }
  if (!v13
    || v13[16] < 0x1Cu
    || (v29 = *(llvm::Instruction **)(v11 - 64), v10 != *(const llvm::Instruction **)(v11 - 32)))
  {
LABEL_63:
    if (v9[16] == 89)
    {
      v23 = (unsigned __int8 *)v10;
      if (*((_BYTE *)v10 + 16) == 89)
      {
        v14 = v9;
        *(_QWORD *)&v26 = &v30;
        *((_QWORD *)&v26 + 1) = &v29;
        v27 = &v28;
        if (sub_1C581FA54((uint64_t)&v26, v11))
        {
          v15 = v29;
          if (llvm::Instruction::isIdenticalToWhenDefined(v29, (const llvm::Instruction *)v14))
          {
            if ((v14[17] ^ *((unsigned __int8 *)v15 + 17)) <= 1)
            {
              v16 = v28;
              if ((llvm::Instruction::isIdenticalToWhenDefined(v28, (const llvm::Instruction *)v23) & 1) != 0
                && (v23[17] ^ *((unsigned __int8 *)v16 + 17)) <= 1)
              {
                v17 = v30;
                goto LABEL_75;
              }
            }
          }
        }
      }
    }
    return 0;
  }
  v25 = (llvm::Instruction *)v9;
  if (v9[16] != 89)
    return 0;
  v20 = *(_WORD *)(v11 + 18);
  result = llvm::Instruction::isIdenticalToWhenDefined((llvm::Instruction *)v13, (const llvm::Instruction *)v9);
  if ((_DWORD)result)
  {
    v21 = *((unsigned __int8 *)v25 + 17) ^ v13[17];
LABEL_73:
    if (v21 < 2)
    {
      v17 = v20 & 0x3F;
LABEL_75:
      v22 = v17 - 34;
      if (v22 <= 7)
        return dword_1C8677E98[v22];
      return 0;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1C60AD1E4(uint64_t result, unsigned __int8 *a2)
{
  int v2;
  unsigned int v4;
  _BYTE v5[2];
  _BYTE v6[2];

  if ((_DWORD)result)
  {
    v2 = result;
    if ((result - 6) < 4 || sub_1C57BE738((uint64_t)v6, a2) || sub_1C57BE7B8((uint64_t)v5, a2))
    {
      return 1;
    }
    else if ((v2 & 0xFFFFFFFE) == 0xC)
    {
      return (a2[17] >> 2) & 1;
    }
    else
    {
      result = 1;
      switch(a2[16])
      {
        case ')':
        case '-':
          return result;
        case '*':
        case '.':
          v4 = a2[17];
          if ((v4 & 2) != 0)
            result = (v4 >> 4) & 1;
          else
            result = 0;
          break;
        case '+':
        case ',':
          goto LABEL_14;
        default:
          if (a2[16] - 56 >= 3)
LABEL_14:
            result = 0;
          break;
      }
    }
  }
  return result;
}

_QWORD *sub_1C60AD2A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t *v14;
  _QWORD *result;

  v6 = a1 + 576;
  v7 = *(_QWORD *)(a1 + 576);
  v8 = *(unsigned int *)(a1 + 592);
  if ((_DWORD)v8)
  {
    LODWORD(v9) = ((*(_QWORD *)a2 >> 4) ^ (*(_QWORD *)a2 >> 9)) & (v8 - 1);
    v10 = (uint64_t *)(v7 + 16 * v9);
    v11 = *v10;
    if (*(_QWORD *)a2 == *v10)
      goto LABEL_8;
    v12 = 1;
    while (v11 != -4096)
    {
      v13 = v9 + v12++;
      v9 = v13 & (v8 - 1);
      v11 = *(_QWORD *)(v7 + 16 * v9);
      if (*(_QWORD *)a2 == v11)
      {
        v10 = (uint64_t *)(v7 + 16 * v9);
        goto LABEL_8;
      }
    }
  }
  v10 = (uint64_t *)(v7 + 16 * v8);
LABEL_8:
  v14 = (uint64_t *)(v7 + 16 * v8);
  result = (_QWORD *)sub_1C6194570(v6, (uint64_t *)a2);
  if (v10 != v14)
  {
    a3 = 0;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 652);
  }
  *result = a3;
  return result;
}

BOOL sub_1C60AD368(uint64_t a1)
{
  _BOOL8 result;
  int v3;

  result = sub_1C63E2060(a1);
  if (result)
  {
    v3 = sub_1C60ACE34(a1);
    return (v3 - 6) < 4 || (v3 & 0xE) == 12;
  }
  return result;
}

void sub_1C60AD3A8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;

  if (*(unsigned int *)(a1 + 12) < a2)
  {
    sub_1C63E1F70(a1, a2, a3);
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= a2)
      v7 = a2;
    else
      v7 = *(unsigned int *)(a1 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)a1;
      do
      {
        sub_1C49EEBE4(v8, a3);
        v8 += 144;
        --v7;
      }
      while (v7);
      v6 = *(unsigned int *)(a1 + 8);
    }
    if (v6 >= a2)
    {
      if (v6 > a2)
      {
        v12 = 9 * v6;
        v13 = (void **)(*(_QWORD *)a1 + 16 * v12 - 144);
        v14 = 144 * a2 - 16 * v12;
        do
        {
          if (v13 + 2 != *v13)
            free(*v13);
          v13 -= 18;
          v14 += 144;
        }
        while (v14);
      }
    }
    else
    {
      v9 = (_QWORD *)(*(_QWORD *)a1 + 144 * v6);
      v10 = ~v6 + a2;
      do
      {
        v11 = v10;
        *v9 = v9 + 2;
        v9[1] = 0x1000000000;
        if (*(_DWORD *)(a3 + 8))
          sub_1C49EEBE4((uint64_t)v9, a3);
        v10 = 0;
        v9 += 18;
      }
      while (v11);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

uint64_t sub_1C60AD4E0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t ***a6)
{
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;

  sub_1C60AE404(a1, a2);
  v9 = v8;
  if ((a2 - 6) > 3 || (*(_BYTE *)(v8 + 16) == 85 ? (v10 = v8 == 0) : (v10 = 1), v10))
  {
    v11 = **a6;
    v12 = *((unsigned int *)*a6 + 2);
  }
  else
  {
    llvm::propagateIRFlags(*(_QWORD *)(v8 - 96), **a6, *((unsigned int *)*a6 + 2), 0);
    v11 = (*a6)[18];
    v12 = *((unsigned int *)*a6 + 38);
  }
  llvm::propagateIRFlags(v9, v11, v12, 0);
  return v9;
}

char *sub_1C60AD5B0(char *result, char *a2, _DWORD **a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  char *v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v13;
  unsigned int v14;
  int v16;
  _DWORD *v17;
  unsigned int v18;
  _DWORD *v19;
  uint64_t v20;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  int v34;
  _DWORD *v35;
  unsigned int v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unsigned int v42;
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  int v48;
  _DWORD *v49;
  unsigned int v50;
  _DWORD *v51;
  char *v52;
  char *v54;
  unint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t *v58;
  char *v59;
  uint64_t *v60;
  uint64_t v61;
  unsigned int v62;
  BOOL v63;
  unsigned int v65;
  BOOL v66;
  int v68;
  _DWORD *v69;
  unsigned int v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;

  if (a4 < 2)
    return result;
  v8 = result;
  if (a4 == 2)
  {
    v9 = *((_QWORD *)a2 - 1);
    v10 = *(unsigned __int8 *)(v9 + 16);
    if (v9)
      v11 = v10 >= 0x1C;
    else
      v11 = 0;
    if (v11 && v10 - 83 >= 0xFFFFFFFE)
    {
      v13 = *(_QWORD *)result;
      if (*(_QWORD *)result)
      {
        v14 = *(unsigned __int8 *)(v13 + 16);
        if (v14 >= 0x1C && v14 - 83 >= 0xFFFFFFFE)
        {
          v16 = *(_WORD *)(v13 + 18) & 0x3F;
          v17 = *a3;
          v76 = *(_WORD *)(v9 + 18) & 0x3F;
          v18 = sub_1C63E20A8(v17, &v76)[1];
          v19 = *a3;
          v75 = v16;
          result = (char *)sub_1C63E20A8(v19, &v75);
          if (v18 > *((_DWORD *)result + 1))
          {
            v20 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *((_QWORD *)a2 - 1);
            *((_QWORD *)a2 - 1) = v20;
          }
        }
      }
    }
    return result;
  }
  if ((uint64_t)a4 > 128)
  {
    v54 = (char *)a5;
    v55 = a4 >> 1;
    v56 = (uint64_t *)&result[8 * (a4 >> 1)];
    v57 = a4 >> 1;
    if ((uint64_t)a4 > a6)
    {
      sub_1C60AD5B0(result, v56, a3, v57, a5, a6);
      sub_1C60AD5B0(&v8[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v54, a6);
      return sub_1C60ADD80(v8, &v8[8 * (a4 >> 1)], a2, a3, a4 >> 1, a4 - (a4 >> 1), v54, a6);
    }
    sub_1C60AD9AC((uint64_t *)result, v56, a3, v57, a5);
    v58 = (uint64_t *)&v54[8 * v55];
    result = (char *)sub_1C60AD9AC((uint64_t *)&v8[8 * (a4 >> 1)], (uint64_t *)a2, a3, a4 - (a4 >> 1), v58);
    v59 = &v54[8 * a4];
    v60 = v58;
    while (1)
    {
      if (v60 == (uint64_t *)v59)
      {
        if (v54 != (char *)v58)
        {
          v73 = 0;
          do
          {
            *(_QWORD *)&v8[v73] = *(_QWORD *)&v54[v73];
            v73 += 8;
          }
          while (&v54[v73] != (char *)v58);
        }
        return result;
      }
      v61 = *(_QWORD *)v54;
      v62 = *(unsigned __int8 *)(*v60 + 16);
      if (*v60)
        v63 = v62 >= 0x1C;
      else
        v63 = 0;
      if (v63 && v62 - 83 >= 0xFFFFFFFE)
      {
        v65 = *(unsigned __int8 *)(v61 + 16);
        v66 = v61 && v65 >= 0x1C;
        if (v66 && v65 - 83 >= 0xFFFFFFFE)
        {
          v68 = *(_WORD *)(v61 + 18) & 0x3F;
          v69 = *a3;
          v76 = *(_WORD *)(*v60 + 18) & 0x3F;
          v70 = sub_1C63E20A8(v69, &v76)[1];
          v71 = *a3;
          v75 = v68;
          result = (char *)sub_1C63E20A8(v71, &v75);
          if (v70 > *((_DWORD *)result + 1))
          {
            v72 = *v60++;
            *(_QWORD *)v8 = v72;
            goto LABEL_82;
          }
          v61 = *(_QWORD *)v54;
        }
      }
      *(_QWORD *)v8 = v61;
      v54 += 8;
LABEL_82:
      v8 += 8;
      if (v54 == (char *)v58)
      {
        if (v60 != (uint64_t *)v59)
        {
          v74 = 0;
          do
          {
            *(_QWORD *)&v8[v74 * 8] = v60[v74];
            ++v74;
          }
          while (&v60[v74] != (uint64_t *)v59);
        }
        return result;
      }
    }
  }
  if (result != a2)
  {
    v22 = result + 8;
    if (result + 8 != a2)
    {
      v23 = 0;
      v24 = result;
      do
      {
        v25 = v24;
        v24 = v22;
        v26 = *((_QWORD *)v25 + 1);
        v27 = *(unsigned __int8 *)(v26 + 16);
        if (v26)
          v28 = v27 >= 0x1C;
        else
          v28 = 0;
        if (v28 && v27 - 83 >= 0xFFFFFFFE)
        {
          v30 = *(_QWORD *)v25;
          v31 = *(unsigned __int8 *)(v30 + 16);
          v32 = v30 && v31 >= 0x1C;
          if (v32 && v31 - 83 >= 0xFFFFFFFE)
          {
            v34 = *(_WORD *)(v30 + 18) & 0x3F;
            v35 = *a3;
            v76 = *(_WORD *)(v26 + 18) & 0x3F;
            v36 = sub_1C63E20A8(v35, &v76)[1];
            v37 = *a3;
            v75 = v34;
            result = (char *)sub_1C63E20A8(v37, &v75);
            if (v36 > *((_DWORD *)result + 1))
            {
              v38 = *(_QWORD *)v24;
              v39 = v23;
              while (1)
              {
                v40 = v39;
                v41 = &v8[v39];
                *((_QWORD *)v41 + 1) = *(_QWORD *)v41;
                if (!v40)
                  break;
                if (v38)
                {
                  v42 = *(unsigned __int8 *)(v38 + 16);
                  if (v42 >= 0x1C && v42 - 83 >= 0xFFFFFFFE)
                  {
                    v44 = *((_QWORD *)v41 - 1);
                    v45 = *(unsigned __int8 *)(v44 + 16);
                    v46 = v44 && v45 >= 0x1C;
                    if (v46 && v45 - 83 >= 0xFFFFFFFE)
                    {
                      v48 = *(_WORD *)(v44 + 18) & 0x3F;
                      v49 = *a3;
                      v76 = *(_WORD *)(v38 + 18) & 0x3F;
                      v50 = sub_1C63E20A8(v49, &v76)[1];
                      v51 = *a3;
                      v75 = v48;
                      result = (char *)sub_1C63E20A8(v51, &v75);
                      v39 = v40 - 8;
                      if (v50 > *((_DWORD *)result + 1))
                        continue;
                    }
                  }
                }
                v52 = &v8[v40];
                goto LABEL_60;
              }
              v52 = v8;
LABEL_60:
              *(_QWORD *)v52 = v38;
            }
          }
        }
        v22 = v24 + 8;
        v23 += 8;
      }
      while (v24 + 8 != a2);
    }
  }
  return result;
}

uint64_t *sub_1C60AD9AC(uint64_t *result, uint64_t *a2, _DWORD **a3, unint64_t a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v27;
  BOOL v28;
  int v30;
  _DWORD *v31;
  unsigned int v32;
  _DWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  unsigned int v36;
  BOOL v37;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  _DWORD *v43;
  unsigned int v44;
  _DWORD *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  unsigned int v49;
  BOOL v50;
  unsigned int v52;
  BOOL v53;
  int v55;
  _DWORD *v56;
  unsigned int v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  _DWORD *v63;
  unsigned int v64;
  _DWORD *v65;
  unsigned int v66;
  BOOL v67;
  uint64_t *v68;
  int v69;
  int v70;
  int v71;

  if (!a4)
    return result;
  v5 = a5;
  v7 = result;
  if (a4 == 1)
  {
LABEL_16:
    *v5 = *v7;
    return result;
  }
  if (a4 == 2)
  {
    v11 = a2 - 1;
    v10 = *(a2 - 1);
    v12 = *result;
    if (v10)
    {
      v13 = *(unsigned __int8 *)(v10 + 16);
      v14 = v13 >= 0x1C && v13 - 83 >= 0xFFFFFFFE;
      if (v14 && v12)
      {
        v15 = *(unsigned __int8 *)(v12 + 16);
        if (v15 >= 0x1C && v15 - 83 >= 0xFFFFFFFE)
        {
          v62 = *(_WORD *)(v12 + 18) & 0x3F;
          v63 = *a3;
          v71 = *(_WORD *)(v10 + 18) & 0x3F;
          v64 = sub_1C63E20A8(v63, &v71)[1];
          v65 = *a3;
          v70 = v62;
          result = (uint64_t *)sub_1C63E20A8(v65, &v70);
          v66 = *((_DWORD *)result + 1);
          v67 = v64 > v66;
          if (v64 <= v66)
            v68 = v7;
          else
            v68 = v11;
          if (v67)
            v11 = v7;
          v12 = *v68;
        }
      }
    }
    *v5++ = v12;
    v7 = v11;
    goto LABEL_16;
  }
  if ((uint64_t)a4 <= 8)
  {
    if (result == a2)
      return result;
    v17 = result + 1;
    *a5 = *result;
    if (result + 1 == a2)
      return result;
    v18 = 0;
    v19 = a5;
    v20 = a5;
    while (1)
    {
      v22 = *v20++;
      v21 = v22;
      v23 = *v17;
      v24 = *(unsigned __int8 *)(*v17 + 16);
      if (*v17)
        v25 = v24 >= 0x1C;
      else
        v25 = 0;
      if (v25 && v24 - 83 >= 0xFFFFFFFE)
      {
        v27 = *(unsigned __int8 *)(v21 + 16);
        v28 = v21 && v27 >= 0x1C;
        if (v28 && v27 - 83 >= 0xFFFFFFFE)
        {
          v30 = *(_WORD *)(v21 + 18) & 0x3F;
          v31 = *a3;
          v71 = *(_WORD *)(v23 + 18) & 0x3F;
          v32 = sub_1C63E20A8(v31, &v71)[1];
          v33 = *a3;
          v70 = v30;
          result = (uint64_t *)sub_1C63E20A8(v33, &v70);
          if (v32 > *((_DWORD *)result + 1))
          {
            v19[1] = *v19;
            v34 = v5;
            if (v19 != v5)
            {
              v35 = v18;
              while (1)
              {
                v36 = *(unsigned __int8 *)(*v17 + 16);
                v37 = *v17 && v36 >= 0x1C;
                if (!v37 || v36 - 83 < 0xFFFFFFFE)
                  break;
                v39 = *(uint64_t *)((char *)v5 + v35 - 8);
                v40 = *(unsigned __int8 *)(v39 + 16);
                if (v39)
                  v41 = v40 >= 0x1C;
                else
                  v41 = 0;
                if (!v41 || v40 - 83 < 0xFFFFFFFE)
                {
                  v34 = (uint64_t *)((char *)v5 + v35);
                  goto LABEL_63;
                }
                v69 = *(_WORD *)(v39 + 18) & 0x3F;
                v43 = *a3;
                v71 = *(_WORD *)(*v17 + 18) & 0x3F;
                v44 = sub_1C63E20A8(v43, &v71)[1];
                v45 = *a3;
                v70 = v69;
                result = (uint64_t *)sub_1C63E20A8(v45, &v70);
                if (v44 <= *((_DWORD *)result + 1))
                  break;
                --v19;
                *(uint64_t *)((char *)v5 + v35) = *(uint64_t *)((char *)v5 + v35 - 8);
                v35 -= 8;
                if (!v35)
                {
                  v34 = v5;
                  goto LABEL_63;
                }
              }
              v34 = v19;
            }
LABEL_63:
            *v34 = *v17;
            goto LABEL_38;
          }
          v23 = *v17;
        }
      }
      *v20 = v23;
LABEL_38:
      ++v17;
      v18 += 8;
      v19 = v20;
      if (v17 == a2)
        return result;
    }
  }
  v46 = &result[a4 >> 1];
  sub_1C60AD5B0(result, v46, a3, a4 >> 1, a5, a4 >> 1);
  result = (uint64_t *)sub_1C60AD5B0(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
  v47 = &v7[a4 >> 1];
  while (v47 != a2)
  {
    v48 = *v7;
    v49 = *(unsigned __int8 *)(*v47 + 16);
    if (*v47)
      v50 = v49 >= 0x1C;
    else
      v50 = 0;
    if (v50 && v49 - 83 >= 0xFFFFFFFE)
    {
      v52 = *(unsigned __int8 *)(v48 + 16);
      v53 = v48 && v52 >= 0x1C;
      if (v53 && v52 - 83 >= 0xFFFFFFFE)
      {
        v55 = *(_WORD *)(v48 + 18) & 0x3F;
        v56 = *a3;
        v71 = *(_WORD *)(*v47 + 18) & 0x3F;
        v57 = sub_1C63E20A8(v56, &v71)[1];
        v58 = *a3;
        v70 = v55;
        result = (uint64_t *)sub_1C63E20A8(v58, &v70);
        if (v57 > *((_DWORD *)result + 1))
        {
          v59 = *v47++;
          *v5 = v59;
          goto LABEL_83;
        }
        v48 = *v7;
      }
    }
    *v5 = v48;
    ++v7;
LABEL_83:
    ++v5;
    if (v7 == v46)
    {
      if (v47 != a2)
      {
        v61 = 0;
        do
        {
          v5[v61] = v47[v61];
          ++v61;
        }
        while (&v47[v61] != a2);
      }
      return result;
    }
  }
  if (v7 != v46)
  {
    v60 = 0;
    do
    {
      v5[v60] = v7[v60];
      ++v60;
    }
    while (&v7[v60] != v46);
  }
  return result;
}

char *sub_1C60ADD80(char *result, char *a2, char *a3, _DWORD **a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v10;
  char *v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v19;
  BOOL v20;
  int v22;
  _DWORD *v23;
  unsigned int v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  char *v32;
  unsigned int v33;
  BOOL v34;
  unsigned int v36;
  BOOL v37;
  _DWORD *v39;
  char *v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  BOOL v53;
  unsigned int v55;
  BOOL v56;
  _DWORD *v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  unsigned int v77;
  BOOL v78;
  uint64_t v80;
  unsigned int v81;
  int v83;
  _DWORD *v84;
  unsigned int v85;
  _DWORD *v86;
  unsigned int v87;
  BOOL v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  unsigned int v93;
  BOOL v94;
  unsigned int v96;
  BOOL v97;
  int v99;
  _DWORD *v100;
  unsigned int v101;
  _DWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  int v109;
  _DWORD *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *__src;
  char *v118;
  int v119;
  int v120;

  if (!a6)
    return result;
  v10 = a6;
  v15 = result;
  while (a5 > a8 && v10 > a8)
  {
    if (!a5)
      return result;
    while (1)
    {
      v16 = *(unsigned __int8 *)(*(_QWORD *)a2 + 16);
      v17 = *(_QWORD *)a2 && v16 >= 0x1C;
      if (v17 && v16 - 83 >= 0xFFFFFFFE)
      {
        v19 = *(unsigned __int8 *)(*(_QWORD *)v15 + 16);
        v20 = *(_QWORD *)v15 && v19 >= 0x1C;
        if (v20 && v19 - 83 >= 0xFFFFFFFE)
        {
          v22 = *(_WORD *)(*(_QWORD *)v15 + 18) & 0x3F;
          v23 = *a4;
          v120 = *(_WORD *)(*(_QWORD *)a2 + 18) & 0x3F;
          v24 = sub_1C63E20A8(v23, &v120)[1];
          v25 = *a4;
          v119 = v22;
          result = (char *)sub_1C63E20A8(v25, &v119);
          if (v24 > *((_DWORD *)result + 1))
            break;
        }
      }
      v15 += 8;
      if (!--a5)
        return result;
    }
    v118 = a3;
    if (a5 >= v10)
    {
      if (a5 == 1)
      {
        v105 = *(_QWORD *)v15;
        *(_QWORD *)v15 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v105;
        return result;
      }
      if (a5 >= 0)
        v47 = a5;
      else
        v47 = a5 + 1;
      v28 = a3;
      v29 = v47 >> 1;
      v30 = &v15[8 * (v47 >> 1)];
      if (v28 == a2)
      {
        v27 = 0;
LABEL_87:
        v44 = v30;
        goto LABEL_90;
      }
      __src = a7;
      v27 = 0;
      v110 = *a4;
      v48 = (v28 - a2) >> 3;
      do
      {
        v49 = v27 + (v48 >> 1);
        v50 = *(_QWORD *)&a2[8 * v49];
        v51 = v48 >> 1;
        v52 = *(unsigned __int8 *)(v50 + 16);
        if (v50)
          v53 = v52 >= 0x1C;
        else
          v53 = 0;
        if (v53 && v52 - 83 >= 0xFFFFFFFE)
        {
          v55 = *(unsigned __int8 *)(*(_QWORD *)v30 + 16);
          v56 = *(_QWORD *)v30 && v55 >= 0x1C;
          if (v56 && v55 - 83 >= 0xFFFFFFFE)
          {
            v108 = *(_WORD *)(*(_QWORD *)v30 + 18) & 0x3F;
            v120 = *(_WORD *)(v50 + 18) & 0x3F;
            v112 = v27;
            v115 = v30;
            v106 = sub_1C63E20A8(v110, &v120)[1];
            v119 = v108;
            v58 = sub_1C63E20A8(v110, &v119);
            v27 = v112;
            v30 = v115;
            if (v106 > v58[1])
            {
              v51 = v48 + ~v51;
              v27 = v49 + 1;
            }
          }
        }
        v48 = v51;
      }
      while (v51);
    }
    else
    {
      if (v10 >= 0)
        v26 = v10;
      else
        v26 = v10 + 1;
      v27 = v26 >> 1;
      v28 = &a2[8 * (v26 >> 1)];
      v29 = (a2 - v15) >> 3;
      if (a2 == v15)
      {
        v10 -= v27;
        goto LABEL_85;
      }
      __src = a7;
      v30 = v15;
      do
      {
        while (1)
        {
          v31 = v29 >> 1;
          v32 = &v30[8 * (v29 >> 1)];
          v33 = *(unsigned __int8 *)(*(_QWORD *)v28 + 16);
          v34 = *(_QWORD *)v28 && v33 >= 0x1C;
          if (v34 && v33 - 83 >= 0xFFFFFFFE)
          {
            v36 = *(unsigned __int8 *)(*(_QWORD *)v32 + 16);
            v37 = *(_QWORD *)v32 && v36 >= 0x1C;
            if (v37 && v36 - 83 > 0xFFFFFFFD)
              break;
          }
          v30 = v32 + 8;
          v29 += ~v31;
          if (!v29)
            goto LABEL_51;
        }
        v109 = *(_WORD *)(*(_QWORD *)v32 + 18) & 0x3F;
        v39 = *a4;
        v120 = *(_WORD *)(*(_QWORD *)v28 + 18) & 0x3F;
        v111 = v27;
        v113 = v30;
        v40 = v28;
        v107 = sub_1C63E20A8(v39, &v120)[1];
        v41 = *a4;
        v119 = v109;
        v42 = sub_1C63E20A8(v41, &v119);
        v28 = v40;
        v27 = v111;
        v30 = v113;
        if (v107 > v42[1])
        {
          v29 >>= 1;
        }
        else
        {
          v30 = v32 + 8;
          v29 += ~v31;
        }
      }
      while (v29);
LABEL_51:
      v29 = (v30 - v15) >> 3;
    }
    v28 = &a2[8 * v27];
    v10 -= v27;
    a7 = __src;
    if (v30 != a2)
    {
      if (v27)
      {
        if (v30 + 8 == a2)
        {
          v116 = *(_QWORD *)v30;
          v59 = v30;
          v60 = v30;
          v61 = a2;
          v62 = v27;
          v63 = v28;
          memmove(v59, v61, 8 * v27);
          v28 = v63;
          v27 = v62;
          v30 = v60;
          v44 = &v60[8 * v62];
          *(_QWORD *)v44 = v116;
        }
        else if (v27 == 1)
        {
          v43 = *((_QWORD *)v28 - 1);
          v44 = v30 + 8;
          if (v28 - 8 != v30)
          {
            v45 = v30;
            v46 = v28;
            v114 = *((_QWORD *)v28 - 1);
            memmove(v30 + 8, v30, v28 - 8 - v30);
            v43 = v114;
            v28 = v46;
            v30 = v45;
          }
          *(_QWORD *)v30 = v43;
          v27 = 1;
        }
        else
        {
          v64 = v30;
          v65 = v30;
          v66 = a2;
          v67 = v27;
          v68 = &a2[8 * v27];
          v69 = (char *)sub_1C4E85DF0(v64, v66, v68);
          v28 = v68;
          v27 = v67;
          v30 = v65;
          v44 = v69;
        }
        goto LABEL_90;
      }
      goto LABEL_87;
    }
LABEL_85:
    v30 = a2;
    v44 = v28;
LABEL_90:
    a5 -= v29;
    if ((uint64_t)(v27 + v29) >= a5 + v10)
    {
      v70 = v30;
      v71 = v27;
      result = (char *)sub_1C60ADD80(v44, v28, v118, a4, a5, v10, a7, a8);
      v10 = v71;
      a5 = v29;
      a3 = v44;
    }
    else
    {
      v70 = v28;
      result = (char *)sub_1C60ADD80(v15, v30, v44, a4, v29, v27, a7, a8);
      v15 = v44;
      a3 = v118;
    }
    a2 = v70;
    if (!v10)
      return result;
  }
  if (a5 <= v10)
  {
    if (v15 == a2)
      return result;
    v90 = 0;
    do
    {
      *(_QWORD *)&a7[v90] = *(_QWORD *)&v15[v90];
      v90 += 8;
    }
    while (&v15[v90] != a2);
    if (!v90)
      return result;
    v91 = a7;
    while (1)
    {
      if (a2 == a3)
        return (char *)memmove(v15, v91, a7 - v91 + v90);
      v92 = *(_QWORD *)v91;
      v93 = *(unsigned __int8 *)(*(_QWORD *)a2 + 16);
      if (*(_QWORD *)a2)
        v94 = v93 >= 0x1C;
      else
        v94 = 0;
      if (v94 && v93 - 83 >= 0xFFFFFFFE)
      {
        v96 = *(unsigned __int8 *)(v92 + 16);
        v97 = v92 && v96 >= 0x1C;
        if (v97 && v96 - 83 >= 0xFFFFFFFE)
        {
          v99 = *(_WORD *)(v92 + 18) & 0x3F;
          v100 = *a4;
          v120 = *(_WORD *)(*(_QWORD *)a2 + 18) & 0x3F;
          v101 = sub_1C63E20A8(v100, &v120)[1];
          v102 = *a4;
          v119 = v99;
          result = (char *)sub_1C63E20A8(v102, &v119);
          if (v101 > *((_DWORD *)result + 1))
          {
            v103 = *(_QWORD *)a2;
            a2 += 8;
            *(_QWORD *)v15 = v103;
            goto LABEL_145;
          }
          v92 = *(_QWORD *)v91;
        }
      }
      *(_QWORD *)v15 = v92;
      v91 += 8;
LABEL_145:
      v15 += 8;
      if (&a7[v90] == v91)
        return result;
    }
  }
  if (a2 != a3)
  {
    v72 = 0;
    do
    {
      *(_QWORD *)&a7[v72] = *(_QWORD *)&a2[v72];
      v72 += 8;
    }
    while (&a2[v72] != a3);
    if (v72)
    {
      v73 = &a7[v72];
      v74 = a3 - 8;
      while (a2 != v15)
      {
        v76 = v73 - 8;
        v75 = *((_QWORD *)v73 - 1);
        v77 = *(unsigned __int8 *)(v75 + 16);
        if (v75)
          v78 = v77 >= 0x1C;
        else
          v78 = 0;
        if (v78 && v77 - 83 >= 0xFFFFFFFE)
        {
          v80 = *((_QWORD *)a2 - 1);
          if (v80)
          {
            v81 = *(unsigned __int8 *)(v80 + 16);
            if (v81 >= 0x1C && v81 - 83 >= 0xFFFFFFFE)
            {
              v83 = *(_WORD *)(v80 + 18) & 0x3F;
              v84 = *a4;
              v120 = *(_WORD *)(v75 + 18) & 0x3F;
              v85 = sub_1C63E20A8(v84, &v120)[1];
              v86 = *a4;
              v119 = v83;
              result = (char *)sub_1C63E20A8(v86, &v119);
              v87 = *((_DWORD *)result + 1);
              v88 = v85 > v87;
              if (v85 <= v87)
                v89 = v73;
              else
                v89 = a2;
              if (v88)
              {
                a2 -= 8;
                v76 = v73;
              }
              v75 = *((_QWORD *)v89 - 1);
            }
          }
        }
        *(_QWORD *)v74 = v75;
        v74 -= 8;
        v73 = v76;
        if (v76 == a7)
          return result;
      }
      if (v73 != a7)
      {
        v104 = 0;
        do
        {
          *(_QWORD *)&v74[v104] = *(_QWORD *)&v73[v104 - 8];
          v104 -= 8;
        }
        while (&v73[v104] != a7);
      }
    }
  }
  return result;
}

void sub_1C60AE404(uint64_t a1, int a2)
{
  llvm::RecurrenceDescriptor::getOpcode(a2);
  __asm { BR              X10 }
}

unsigned __int8 *sub_1C60AE460()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return sub_1C4773860(v2, v4, v1, v0, v3, 0);
}

unsigned __int8 *sub_1C60AE494()
{
  uint64_t v0;
  _DWORD **v1;
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  const llvm::APInt *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  llvm::ConstantInt *v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  unsigned int v16;

  if (!v4)
    return sub_1C60AE460();
  v5 = (uint64_t)*v1;
  sub_1C4774CC4(*v1);
  if (v5 != v7)
    return sub_1C60AE460();
  v9 = v2[8];
  v10 = *(_QWORD *)v9;
  v11 = *(uint64_t **)(*(_QWORD *)v9 + 1560);
  if (!v11)
  {
    v12 = *(llvm::ConstantInt **)(v10 + 1888);
    v13 = *(_DWORD *)(v10 + 1896);
    v16 = v13 >> 8;
    if (v13 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v15, 1, 0);
    }
    else
    {
      if (v13 <= 0xFF)
        v14 = 0;
      else
        v14 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v13);
      v15 = v14 & 1;
    }
    v11 = (uint64_t *)llvm::ConstantInt::get(v12, (llvm::LLVMContext *)&v15, v6);
    if (v16 >= 0x41)
    {
      if (v15)
        MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
    }
    *(_QWORD *)(v10 + 1560) = v11;
  }
  return (unsigned __int8 *)llvm::IRBuilderBase::CreateSelect(v2, (uint64_t)v1, v11, v0, v3, 0);
}

void sub_1C60AE744(_QWORD *a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v6 = a1[2];
  v7 = a1[1];
  if (v6 == v7)
    v8 = 0;
  else
    v8 = 32 * (v6 - v7) - 1;
  v9 = a1[5];
  v10 = v9 + a1[4];
  if (v8 == v10)
  {
    sub_1C60ACBA4((uint64_t)a1);
    v7 = a1[1];
    v9 = a1[5];
    v10 = a1[4] + v9;
  }
  v11 = *(_QWORD *)(v7 + ((v10 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v10;
  *(_QWORD *)v11 = *a2;
  *(_DWORD *)(v11 + 8) = *a3;
  a1[5] = v9 + 1;
}

unint64_t sub_1C60AE7DC(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  unsigned int v16;
  uint64_t v17;

  do
  {
    v8 = *(_DWORD *)(a1 + 20);
    if ((v8 & 0x40000000) != 0)
      v9 = *(_QWORD *)(a1 - 8);
    else
      v9 = a1 - 32 * (v8 & 0x7FFFFFF);
    v10 = *(_QWORD *)(v9 + 32);
    result = sub_1C6095CBC(a1, a4);
    if (!HIDWORD(result))
      break;
    v12 = *(unsigned __int8 *)(v10 + 16);
    if (v12 == 93 || v12 == 90)
    {
      result = sub_1C60AE7DC(v10, a2, a3, result);
    }
    else
    {
      v13 = 8 * result;
      *(_QWORD *)(*a2 + v13) = v10;
      *(_QWORD *)(*a3 + v13) = a1;
    }
    v14 = *(_DWORD *)(a1 + 20);
    v15 = (v14 & 0x40000000) != 0 ? *(uint64_t **)(a1 - 8) : (uint64_t *)(a1 - 32 * (v14 & 0x7FFFFFF));
    a1 = *v15;
    if (!*v15)
      break;
    v16 = *(unsigned __int8 *)(a1 + 16);
    if (v16 < 0x1C || v16 != 93 && v16 != 90)
      break;
    v17 = *(_QWORD *)(a1 + 8);
    if (!v17)
      break;
  }
  while (!*(_QWORD *)(v17 + 8));
  return result;
}

uint64_t sub_1C60AE8D0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C60AB490(v0);
}

void sub_1C60AE8F8(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E81AD8C0;
  sub_1C62EA8E4((uint64_t)a1 + 152);
  sub_1C62EA8E4((uint64_t)a1 + 104);
  llvm::Pass::~Pass(a1);
}

void sub_1C60AE930(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E81AD8C0;
  sub_1C62EA8E4((uint64_t)a1 + 152);
  sub_1C62EA8E4((uint64_t)a1 + 104);
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C60AE97C()
{
  return 0;
}

void sub_1C60AE984(uint64_t a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::DemandedBitsWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::OptimizationRemarkEmitterWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::InjectTLIMappingsLegacy::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C60AEAB8(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char **v7;
  char *v8;
  uint64_t v9;
  char **v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AnalysisPass;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  void **v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char **v25;
  char *v26;
  uint64_t v27;
  char **v28;
  char *v29;
  uint64_t v30;
  char **v31;
  char *v32;
  uint64_t v33;
  char **v34;
  char *v35;
  llvm::AssumptionCacheTracker *v36;
  uint64_t AssumptionCache;
  void **v38;
  void *v39;
  uint64_t v40;
  void **v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void **v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50[2];
  int v51;
  uint64_t v52[2];
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  void *__src;
  unsigned int v59;
  _QWORD v60[2];
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0)
    return 0;
  v7 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != llvm::ScalarEvolutionWrapperPass::ID);
  v9 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v10 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != llvm::TargetTransformInfoWrapperPass::ID);
  v12 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v57 = 0;
  __src = 0;
  v59 = 0;
  v60[0] = 0;
  v60[1] = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v13 = *(_QWORD *)(v12 + 56);
  if (!v13)
  {
    sub_1C485C2F0();
    goto LABEL_56;
  }
  v3 = v60;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, const llvm::Function *))(*(_QWORD *)v13 + 48))(v50, v13, a2);
  v2 = (uint64_t *)(v12 + 64);
  v14 = v50[0];
  if (!*(_BYTE *)(v12 + 72))
  {
    *(_QWORD *)(v12 + 64) = v50[0];
    *(_BYTE *)(v12 + 72) = 1;
    goto LABEL_11;
  }
  v50[0] = 0;
  v15 = *v2;
  *v2 = v14;
  if (v15)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = v50[0];
    v50[0] = 0;
    if (v16)
LABEL_56:
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
LABEL_11:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v3);
  sub_1C4D8B52C(&v57);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)a1 + 1) + 24), llvm::TargetLibraryInfoWrapperPass::ID, 1);
  if (AnalysisPass)
  {
    v18 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, llvm::TargetLibraryInfoWrapperPass::ID);
    if (v18)
    {
      v19 = v18;
      v50[0] = 0;
      v50[1] = 0;
      v51 = 0;
      v52[0] = 0;
      v52[1] = 0;
      v53 = 0;
      v54 = 0;
      v55 = 0;
      v56 = 0;
      llvm::TargetLibraryAnalysis::run(v18 + 32, (uint64_t)a2, (uint64_t)&v57);
      *(_QWORD *)(v19 + 240) = v57;
      v20 = (uint64_t *)(v19 + 240);
      if (*(_BYTE *)(v19 + 320))
      {
        if (v20 == &v57)
        {
LABEL_27:
          *(_DWORD *)(v19 + 312) = v65;
LABEL_28:
          if (__src != v60)
            free(__src);
          MEMORY[0x1CAA32FB4](0, 8);
          sub_1C4D8B440(v52);
          sub_1C4D8B52C(v50);
          goto LABEL_31;
        }
        v21 = (void **)(v19 + 248);
        v22 = v59;
        v23 = *(unsigned int *)(v19 + 256);
        if (v23 >= v59)
        {
          if (v59)
            memmove(*v21, __src, 8 * v59);
          goto LABEL_26;
        }
        if (*(_DWORD *)(v19 + 260) < v59)
        {
          *(_DWORD *)(v19 + 256) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v19 + 248, v19 + 264, v22, 8);
        }
        else if ((_DWORD)v23)
        {
          v49 = *(unsigned int *)(v19 + 256);
          memmove(*v21, __src, 8 * v23);
          v24 = v49;
          goto LABEL_24;
        }
        v24 = 0;
LABEL_24:
        if (v24 != v59)
          memcpy((char *)*v21 + 8 * v24, (char *)__src + 8 * v24, 8 * v59 - 8 * v24);
LABEL_26:
        *(_DWORD *)(v19 + 256) = v22;
        goto LABEL_27;
      }
      v45 = (void *)(v19 + 264);
      *(_QWORD *)(v19 + 248) = v19 + 264;
      v46 = (void **)(v19 + 248);
      *(_QWORD *)(v19 + 256) = 0x600000000;
      v47 = v59;
      if (!v59 || v46 == &__src)
      {
LABEL_54:
        *(_DWORD *)(v19 + 312) = v65;
        *(_BYTE *)(v19 + 320) = 1;
        goto LABEL_28;
      }
      if (v59 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v19 + 248, v19 + 264, v59, 8);
        v48 = v59;
        if (!v59)
        {
LABEL_53:
          *(_DWORD *)(v19 + 256) = v47;
          goto LABEL_54;
        }
        v45 = *v46;
      }
      else
      {
        v48 = v59;
      }
      memcpy(v45, __src, 8 * v48);
      goto LABEL_53;
    }
  }
  v20 = 0;
LABEL_31:
  v25 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v26 = *v25;
    v25 += 2;
  }
  while (v26 != llvm::AAResultsWrapperPass::ID);
  v27 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v25 - 1) + 96))(*(v25 - 1), llvm::AAResultsWrapperPass::ID)+ 32);
  v28 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v29 = *v28;
    v28 += 2;
  }
  while (v29 != llvm::LoopInfoWrapperPass::ID);
  v30 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v28 - 1) + 96))(*(v28 - 1), llvm::LoopInfoWrapperPass::ID);
  v31 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v32 = *v31;
    v31 += 2;
  }
  while (v32 != llvm::DominatorTreeWrapperPass::ID);
  v33 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v31 - 1) + 96))(*(v31 - 1), llvm::DominatorTreeWrapperPass::ID);
  v34 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v35 = *v34;
    v34 += 2;
  }
  while (v35 != llvm::AssumptionCacheTracker::ID);
  v36 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v34 - 1) + 96))(*(v34 - 1), llvm::AssumptionCacheTracker::ID);
  AssumptionCache = llvm::AssumptionCacheTracker::getAssumptionCache(v36, a2);
  v38 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v39 = *v38;
    v38 += 2;
  }
  while (v39 != &llvm::DemandedBitsWrapperPass::ID);
  v40 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v38 - 1) + 96))(*(v38 - 1), &llvm::DemandedBitsWrapperPass::ID);
  v41 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v42 = *v41;
    v41 += 2;
  }
  while (v42 != &llvm::OptimizationRemarkEmitterWrapperPass::ID);
  v43 = v40 + 32;
  v44 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v41 - 1) + 96))(*(v41 - 1), &llvm::OptimizationRemarkEmitterWrapperPass::ID);
  return llvm::SLPVectorizerPass::runImpl((uint64_t)a1 + 32, a2, v9, (uint64_t)v2, (uint64_t)v20, v27, v30 + 32, v33 + 32, AssumptionCache, v43, *(_QWORD *)(v44 + 32));
}

__n128 sub_1C60AEFE4(int **a1, _WORD *a2, __n128 *a3)
{
  int *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED82B6F8, "slp-threshold", 0xDuLL);
  v6 = *a1;
  dword_1ED82B778 = **a1;
  byte_1ED82B78C = 1;
  dword_1ED82B788 = *v6;
  word_1ED82B702 = (32 * (*a2 & 3)) | word_1ED82B702 & 0xFF9F;
  result = *a3;
  xmmword_1ED82B718 = (__int128)*a3;
  return result;
}

__n128 sub_1C60AF068(int **a1, _WORD *a2, __n128 *a3)
{
  int *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED82BAB8, "slp-max-store-lookup", 0x14uLL);
  v6 = *a1;
  dword_1ED82BB38 = **a1;
  byte_1ED82BB4C = 1;
  dword_1ED82BB48 = *v6;
  word_1ED82BAC2 = (32 * (*a2 & 3)) | word_1ED82BAC2 & 0xFF9F;
  result = *a3;
  xmmword_1ED82BAD8 = (__int128)*a3;
  return result;
}

__n128 sub_1C60AF0EC(int **a1, _WORD *a2, __n128 *a3)
{
  int *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED82BB78, "slp-schedule-budget", 0x13uLL);
  v6 = *a1;
  dword_1ED82BBF8 = **a1;
  byte_1ED82BC0C = 1;
  dword_1ED82BC08 = *v6;
  word_1ED82BB82 = (32 * (*a2 & 3)) | word_1ED82BB82 & 0xFF9F;
  result = *a3;
  xmmword_1ED82BB98 = (__int128)*a3;
  return result;
}

__n128 sub_1C60AF170(int **a1, _WORD *a2, __n128 *a3)
{
  int *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED82BE78, "slp-max-look-ahead-depth", 0x18uLL);
  v6 = *a1;
  dword_1ED82BEF8 = **a1;
  byte_1ED82BF0C = 1;
  dword_1ED82BF08 = *v6;
  word_1ED82BE82 = (32 * (*a2 & 3)) | word_1ED82BE82 & 0xFF9F;
  result = *a3;
  xmmword_1ED82BE98 = (__int128)*a3;
  return result;
}

_DWORD *sub_1C60AF1F4(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(56 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63E2850((_QWORD *)a1, v4, v4 + 56 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 56 * v10;
    do
    {
      *result = -1;
      result += 14;
      v11 -= 56;
    }
    while (v11);
  }
  return result;
}

void sub_1C60AF2B8(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  void *v6;
  unsigned int v7;
  const void *v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  void *v18;
  unsigned int v19;
  const void *v21;
  unsigned int v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  void *__p;
  char *v29;
  char *v30;
  char *v31;
  uint64_t *v32;

  v4 = a1[2];
  v5 = a1[1];
  if (v5 < v4)
  {
    v6 = (void *)(v5 + 16);
    *(_QWORD *)v5 = v5 + 16;
    *(_QWORD *)(v5 + 8) = 0x400000000;
    v7 = *(_DWORD *)(a2 + 8);
    if (v5 == a2 || v7 == 0)
      goto LABEL_12;
    v9 = (const void *)(a2 + 16);
    if (*(_QWORD *)a2 != a2 + 16)
    {
      *(_QWORD *)v5 = *(_QWORD *)a2;
      *(_DWORD *)(v5 + 8) = v7;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a2 + 12);
      *(_QWORD *)a2 = v9;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_11;
    }
    if (v7 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, v5 + 16, *(unsigned int *)(a2 + 8), 4);
      v10 = *(_DWORD *)(a2 + 8);
      if (!v10)
        goto LABEL_10;
      v9 = *(const void **)a2;
      v6 = *(void **)v5;
    }
    else
    {
      v10 = *(_DWORD *)(a2 + 8);
    }
    memcpy(v6, v9, 4 * v10);
LABEL_10:
    *(_DWORD *)(v5 + 8) = v7;
LABEL_11:
    *(_DWORD *)(a2 + 8) = 0;
LABEL_12:
    *(_DWORD *)(v5 + 32) = *(_DWORD *)(a2 + 32);
    v11 = v5 + 40;
    goto LABEL_13;
  }
  v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
  if (v12 + 1 > 0x666666666666666)
    abort();
  v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - *a1) >> 3);
  v14 = 2 * v13;
  if (2 * v13 <= v12 + 1)
    v14 = v12 + 1;
  if (v13 >= 0x333333333333333)
    v15 = 0x666666666666666;
  else
    v15 = v14;
  v32 = a1 + 2;
  if (v15)
  {
    if (v15 > 0x666666666666666)
      sub_1C4764EE4();
    v16 = (char *)operator new(40 * v15);
  }
  else
  {
    v16 = 0;
  }
  v17 = &v16[40 * v12];
  __p = v16;
  v29 = v17;
  v31 = &v16[40 * v15];
  v18 = v17 + 16;
  *(_QWORD *)v17 = v17 + 16;
  *((_QWORD *)v17 + 1) = 0x400000000;
  v19 = *(_DWORD *)(a2 + 8);
  if (v17 != (char *)a2 && v19 != 0)
  {
    v21 = *(const void **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      *(_QWORD *)v17 = v21;
      v27 = *(_DWORD *)(a2 + 12);
      *((_DWORD *)v17 + 2) = v19;
      *((_DWORD *)v17 + 3) = v27;
      *(_QWORD *)a2 = a2 + 16;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_34;
    }
    if (v19 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v16[40 * v12], (uint64_t)(v17 + 16), *(unsigned int *)(a2 + 8), 4);
      v22 = *(_DWORD *)(a2 + 8);
      if (!v22)
        goto LABEL_33;
      v21 = *(const void **)a2;
      v18 = *(void **)v17;
    }
    else
    {
      v22 = *(_DWORD *)(a2 + 8);
    }
    memcpy(v18, v21, 4 * v22);
LABEL_33:
    *((_DWORD *)v17 + 2) = v19;
LABEL_34:
    *(_DWORD *)(a2 + 8) = 0;
  }
  *(_DWORD *)&v16[40 * v12 + 32] = *(_DWORD *)(a2 + 32);
  v30 = v17 + 40;
  sub_1C63E2A1C(a1, &__p);
  v11 = a1[1];
  v23 = v29;
  v24 = v30;
  while (v24 != v23)
  {
    v26 = (char *)*((_QWORD *)v24 - 5);
    v24 -= 40;
    v25 = v26;
    if (v24 + 16 != v26)
      free(v25);
  }
  if (__p)
    operator delete(__p);
LABEL_13:
  a1[1] = v11;
}

uint64_t sub_1C60AF534(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v6;
  uint64_t v7;
  int i;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v17;
  const void *v18;
  uint64_t v20;
  int v21[4];
  void *__s2;
  uint64_t v23;
  _DWORD v24[4];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    __s2 = v24;
    v24[0] = -2;
    v23 = 0x400000001;
    v21[0] = -3;
    v20 = 0;
    v17 = a2 - 1;
    v6 = (a2 - 1) & sub_1C4F5AB38(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
    v7 = *(unsigned int *)(a3 + 8);
    v18 = *(const void **)a3;
    for (i = 1; ; ++i)
    {
      v9 = a1;
      v10 = a1 + 40 * v6;
      v11 = *(_DWORD *)(v10 + 8);
      if ((_DWORD)v7 == v11 && !memcmp(v18, *(const void **)v10, 4 * v7))
      {
        v15 = 1;
        goto LABEL_17;
      }
      if (v11 == 1 && !memcmp(*(const void **)v10, v24, 4uLL))
        break;
      v12 = v11 == 1 && memcmp(*(const void **)v10, v21, 4uLL) == 0;
      a1 = v9;
      v13 = v20;
      if (v12 && v20 == 0)
        v13 = v10;
      v20 = v13;
      v14 = v6 + i;
      v6 = v14 & v17;
    }
    v15 = 0;
    if (v20)
      v10 = v20;
LABEL_17:
    *a4 = v10;
  }
  else
  {
    v15 = 0;
    *a4 = 0;
  }
  return v15;
}

uint64_t sub_1C60AF738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  _QWORD v8[2];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_8;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_8:
    sub_1C60AF848(a1, v6);
    v8[0] = 0;
    sub_1C60AF534(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, v8);
    a3 = v8[0];
  }
  ++*(_DWORD *)(a1 + 8);
  v8[0] = &v9;
  v9 = -2;
  v8[1] = 0x400000001;
  if (*(_DWORD *)(a3 + 8) != 1 || **(_DWORD **)a3 != v9)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_1C60AF848(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _DWORD v22[4];
  void *__s2;
  uint64_t v24;
  _DWORD v25[4];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = operator new(40 * v8, (std::align_val_t)8uLL);
  if (v4)
  {
    sub_1C63E0890(a1);
    __s2 = v25;
    v25[0] = -2;
    v24 = 0x400000001;
    v20 = v22;
    v22[0] = -3;
    v21 = 0x400000001;
    if (!(_DWORD)v3)
      goto LABEL_36;
    v9 = 40 * v3;
    v10 = v4;
    while (1)
    {
      v11 = *(unsigned int *)(v10 + 8);
      if ((_DWORD)v11 == (_DWORD)v24)
      {
        v12 = *(void **)v10;
        if (!memcmp(*(const void **)v10, __s2, 4 * v11))
          goto LABEL_23;
      }
      if ((_DWORD)v11 == (_DWORD)v21)
      {
        v12 = *(void **)v10;
        if (!memcmp(*(const void **)v10, v20, 4 * v11))
          goto LABEL_23;
      }
      v19 = 0;
      sub_1C60AF534(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v10, &v19);
      v13 = v19;
      v12 = *(void **)v10;
      if (v10 != v19)
        break;
LABEL_22:
      *(_DWORD *)(v13 + 32) = *(_DWORD *)(v10 + 32);
      ++*(_DWORD *)(a1 + 8);
LABEL_23:
      if ((void *)(v10 + 16) != v12)
        free(v12);
      v10 += 40;
      v9 -= 40;
      if (!v9)
      {
        if (v20 != v22)
          free(v20);
LABEL_36:
        if (__s2 != v25)
          free(__s2);
        JUMPOUT(0x1CAA32FB4);
      }
    }
    if ((void *)(v10 + 16) != v12)
    {
      if (*(_QWORD *)v19 != v19 + 16)
      {
        free(*(void **)v19);
        v12 = *(void **)v10;
      }
      *(_QWORD *)v13 = v12;
      *(_QWORD *)(v13 + 8) = *(_QWORD *)(v10 + 8);
      *(_QWORD *)v10 = v10 + 16;
      *(_DWORD *)(v10 + 12) = 0;
      goto LABEL_21;
    }
    v14 = *(unsigned int *)(v10 + 8);
    v15 = *(unsigned int *)(v19 + 8);
    if (v15 >= v14)
    {
      if ((_DWORD)v14)
        memmove(*(void **)v19, *(const void **)v10, 4 * v14);
      goto LABEL_20;
    }
    if (*(_DWORD *)(v19 + 12) < v14)
    {
      *(_DWORD *)(v19 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v13 + 16, v14, 4);
    }
    else if ((_DWORD)v15)
    {
      v18 = *(unsigned int *)(v19 + 8);
      memmove(*(void **)v19, *(const void **)v10, 4 * v15);
      v16 = v18;
LABEL_18:
      v17 = *(unsigned int *)(v10 + 8);
      if (v16 != v17)
        memcpy((void *)(*(_QWORD *)v13 + 4 * v16), (const void *)(*(_QWORD *)v10 + 4 * v16), *(_QWORD *)v10 + 4 * v17 - (*(_QWORD *)v10 + 4 * v16));
LABEL_20:
      *(_DWORD *)(v13 + 8) = v14;
LABEL_21:
      *(_DWORD *)(v10 + 8) = 0;
      v12 = *(void **)v10;
      goto LABEL_22;
    }
    v16 = 0;
    goto LABEL_18;
  }
  sub_1C63E0890(a1);
}

void sub_1C60AFB50(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *i;
  char *v16;
  void *__p;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;

  v4 = a1[2];
  v5 = (_QWORD *)a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = 0x8E38E38E38E38E39 * (((uint64_t)v5 - *a1) >> 3);
    if (v7 + 1 > 0x38E38E38E38E38ELL)
      abort();
    v8 = 0x8E38E38E38E38E39 * ((uint64_t)(v4 - *a1) >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= v7 + 1)
      v9 = v7 + 1;
    if (v8 >= 0x1C71C71C71C71C7)
      v10 = 0x38E38E38E38E38ELL;
    else
      v10 = v9;
    v21 = a1 + 2;
    if (v10 > 0x38E38E38E38E38ELL)
      sub_1C4764EE4();
    v11 = 9 * v10;
    v12 = (char *)operator new(72 * v10);
    v13 = &v12[72 * v7];
    __p = v12;
    v18 = v13;
    v20 = &v12[8 * v11];
    *(_QWORD *)v13 = *(_QWORD *)a2;
    *((_QWORD *)v13 + 1) = v13 + 24;
    *((_QWORD *)v13 + 2) = 0x300000000;
    if (*(_DWORD *)(a2 + 16))
      sub_1C60AFCEC((uint64_t)(v13 + 8), (uint64_t *)(a2 + 8));
    v19 = v13 + 72;
    sub_1C63E2AF4(a1, &__p);
    v6 = (_QWORD *)a1[1];
    v14 = v18;
    for (i = v19; i != v14; i -= 72)
    {
      v16 = (char *)*((_QWORD *)i - 8);
      if (i - 48 != v16)
        free(v16);
    }
    if (__p)
      operator delete(__p);
  }
  else
  {
    *v5 = *(_QWORD *)a2;
    v5[1] = v5 + 3;
    v5[2] = 0x300000000;
    if (*(_DWORD *)(a2 + 16))
      sub_1C60AFCEC((uint64_t)(v5 + 1), (uint64_t *)(a2 + 8));
    v6 = v5 + 9;
  }
  a1[1] = (uint64_t)v6;
}

uint64_t sub_1C60AFCEC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;

  if ((uint64_t *)a1 != a2)
  {
    v5 = a2 + 2;
    v4 = *a2;
    if ((uint64_t *)*a2 == a2 + 2)
    {
      v7 = a2 + 1;
      v8 = *((unsigned int *)a2 + 2);
      v9 = *(unsigned int *)(a1 + 8);
      if (v9 >= v8)
      {
        if ((_DWORD)v8)
        {
          v11 = v4 + 16 * v8;
          v12 = *(_QWORD **)a1;
          do
          {
            *(_DWORD *)v12 = *(_DWORD *)v4;
            v12[1] = *(_QWORD *)(v4 + 8);
            v4 += 16;
            v12 += 2;
          }
          while (v4 != v11);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) >= v8)
        {
          if ((_DWORD)v9)
          {
            v13 = v4 + 16 * v9;
            v14 = *(_QWORD **)a1;
            do
            {
              *(_DWORD *)v14 = *(_DWORD *)v4;
              v14[1] = *(_QWORD *)(v4 + 8);
              v4 += 16;
              v14 += 2;
            }
            while (v4 != v13);
          }
          else
          {
            v9 = 0;
          }
          v10 = v8;
        }
        else
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 16);
          v9 = 0;
          v10 = *v7;
        }
        if (v9 != v10)
          memcpy((void *)(*(_QWORD *)a1 + 16 * v9), (const void *)(*a2 + 16 * v9), *a2 + 16 * v10 - (*a2 + 16 * v9));
      }
      *(_DWORD *)(a1 + 8) = v8;
    }
    else
    {
      v6 = *(_QWORD **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = (uint64_t)v5;
      *((_DWORD *)a2 + 3) = 0;
    }
    *v7 = 0;
  }
  return a1;
}

char *sub_1C60AFE3C(char **a1, __int128 *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void **v20;

  v2 = (a1[1] - *a1) >> 4;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60)
    abort();
  v5 = a1[2] - *a1;
  if (v5 >> 3 > v3)
    v3 = v5 >> 3;
  if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  else
    v6 = v3;
  if (v6 >> 60)
    sub_1C4764EE4();
  v8 = (char *)operator new(16 * v6);
  v9 = &v8[16 * v2];
  v10 = &v8[16 * v6];
  v11 = *a2;
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)v9 = v11;
  v12 = v9 + 16;
  v13 = *a1;
  v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v15 = *((_QWORD *)v14 - 2);
      v14 -= 16;
      *((_QWORD *)v9 - 2) = v15;
      v9 -= 16;
      v16 = *((_QWORD *)v14 + 1);
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v9 + 1) = v16;
    }
    while (v14 != v13);
    v14 = *a1;
    v17 = a1[1];
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
    while (v17 != v14)
    {
      v18 = *((_QWORD *)v17 - 1);
      *((_QWORD *)v17 - 1) = 0;
      if (v18)
      {
        sub_1C6176BF8((_QWORD *)(v18 + 88));
        sub_1C60AFFDC((uint64_t *)(v18 + 64));
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v18 + 40), 8);
        v20 = (void **)(v18 + 8);
        sub_1C60B0060(&v20);
        MEMORY[0x1CAA32FC0](v18, 0x10A0C4010E67334);
      }
      v17 -= 16;
    }
  }
  if (v14)
    operator delete(v14);
  return v12;
}

uint64_t sub_1C60AFF88(uint64_t a1)
{
  void **v3;

  sub_1C6176BF8((_QWORD *)(a1 + 88));
  sub_1C60AFFDC((uint64_t *)(a1 + 64));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 40), 8);
  v3 = (void **)(a1 + 8);
  sub_1C60B0060(&v3);
  return a1;
}

uint64_t *sub_1C60AFFDC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = (_QWORD *)(v3 + 16);
    v5 = 80 * v2;
    do
    {
      if ((*(v4 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000 && (*(_BYTE *)(v4 - 1) & 1) == 0)
        MEMORY[0x1CAA32FB4](*v4, 8);
      v4 += 10;
      v5 -= 80;
    }
    while (v5);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

void sub_1C60B0060(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          sub_1C60B50E0(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unint64_t sub_1C60B00D4(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 80 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_1C63E0C68(a1, v5);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_1C63E0C68(a1, v5);
    }
  }
  return a2;
}

uint64_t sub_1C60B013C(uint64_t a1, uint64_t a2)
{
  return sub_1C60B0150(a2, *(_QWORD *)(*(_QWORD *)a1 + 384), *(_QWORD *)(*(_QWORD *)a1 + 392));
}

uint64_t sub_1C60B0150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v7;

  if (a2 && *(unsigned __int8 *)(a2 + 16) - 83 >= 0xFFFFFFFE)
  {
    v3 = *(_WORD *)(a3 + 18) & 0x3F;
    v4 = dword_1C8677EB8[v3];
    if (v4 == (*(_WORD *)(a2 + 18) & 0x3F))
    {
      if (a3 == a1)
        return 1;
      if (a1 == a2)
        return 0;
      return !sub_1C60975A4(*(_QWORD *)(a2 - 64), *(_QWORD *)(a2 - 32), *(_QWORD *)(a1 - 64), *(_QWORD *)(a1 - 32));
    }
    v7 = *(_WORD *)(a1 + 18) & 0x3F;
    return (_DWORD)v3 == v7 || v4 == v7;
  }
  else
  {
    return *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a3 + 16);
  }
}

uint64_t *sub_1C60B01FC(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t *v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t *v111;
  unsigned int v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  int v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  int v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  unsigned int v152;
  unsigned int v153;
  int v154;
  uint64_t *v155;
  BOOL v156;
  int v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  int v161;
  int v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  int v171;
  uint64_t v172;
  unsigned int v173;
  unsigned int v174;
  int v175;
  unsigned int v176;
  unsigned int v177;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  int v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  int v192;
  int v193;
  uint64_t v194;
  unsigned int v195;
  int v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  unsigned int v200;
  unsigned int v201;
  uint64_t *v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  int v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  int v215;
  int v216;
  uint64_t v217;
  unsigned int v218;
  int v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  uint64_t **v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  uint64_t *v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t *v230;
  int v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t *v237;
  uint64_t v238;
  int v239;
  int v240;
  uint64_t v241;
  unsigned int v242;
  unsigned int v243;
  int v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unsigned int v253;
  unsigned int v254;
  uint64_t *v255;
  uint64_t *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t *v259;
  int v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  int v268;
  int v269;
  uint64_t v270;
  unsigned int v271;
  unsigned int v272;
  int v273;
  uint64_t v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  uint64_t v279;
  uint64_t *v280;
  uint64_t v281;
  uint64_t *v282;
  int v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t *v289;
  uint64_t v290;
  int v291;
  int v292;
  uint64_t v293;
  unsigned int v294;
  unsigned int v295;
  int v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t *v307;
  uint64_t v308;
  int v309;
  int v310;
  uint64_t *v311;
  uint64_t *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t *v320;
  uint64_t v321;
  int v322;
  int v323;
  uint64_t *v324;
  BOOL v326;
  uint64_t v327;
  uint64_t *v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  int v337;
  int v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t *v343;
  uint64_t v344;
  int v345;
  int v346;
  uint64_t v347;
  int v348;
  uint64_t *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t *v355;
  uint64_t v356;
  int v357;
  int v358;
  uint64_t v359;
  uint64_t *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t *v364;
  uint64_t v365;
  int v366;
  int v367;
  uint64_t v368;
  int v369;
  uint64_t v370;
  int v371;
  uint64_t v372;
  int v373;
  int64_t v374;
  int64_t v375;
  int64_t v376;
  uint64_t v377;
  uint64_t *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t *v386;
  uint64_t v387;
  int v388;
  int v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t *v396;
  uint64_t v397;
  int v398;
  int v399;
  uint64_t v400;
  _DWORD *v401;
  _DWORD *v402;
  int v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t *v408;
  uint64_t v409;
  int v410;
  int v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t *v415;
  uint64_t v416;
  int v417;
  int v418;
  uint64_t v419;
  uint64_t v420;
  int v421;
  uint64_t *v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t *v431;
  uint64_t v432;
  int v433;
  int v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t *v440;
  uint64_t v441;
  int v442;
  int v443;
  uint64_t v444;
  _DWORD *v445;
  _DWORD *v446;
  int v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t *v451;
  uint64_t v452;
  int v453;
  int v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t **v458;
  uint64_t *v459;
  int v460;
  int v461;
  uint64_t v462;
  uint64_t *v463;
  int v464;
  uint64_t *v465;
  int v466;
  uint64_t *v467;
  uint64_t v468;
  int v469;
  uint64_t v470;
  int v471;
  uint64_t *v472;
  uint64_t v473;
  int v474;
  uint64_t v475;
  unint64_t v476;
  unint64_t v477;
  uint64_t *v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t *v485;
  uint64_t v486;
  int v487;
  int v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t *v491;
  uint64_t v492;
  int v493;
  int v494;
  uint64_t v495;
  int v496;
  uint64_t *v497;
  int v498;
  uint64_t *v499;
  int v500;
  uint64_t *v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t *v504;
  uint64_t *v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t *v514;
  uint64_t v515;
  int v516;
  int v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t *v522;
  uint64_t v523;
  int v524;
  int v525;
  uint64_t v526;
  _DWORD *v527;
  _DWORD *v528;
  int v529;
  uint64_t v530;
  int v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t *v541;
  uint64_t v542;
  int v543;
  int v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t *v548;
  uint64_t v549;
  int v550;
  int v551;
  uint64_t v552;
  int v553;
  uint64_t v555;
  uint64_t *v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t *v563;
  uint64_t v564;
  int v565;
  int v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  int v572;
  int v573;
  uint64_t v574;
  int v575;
  uint64_t *v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t *v582;
  uint64_t v583;
  int v584;
  int v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  int v590;
  int v591;
  uint64_t v592;
  int v593;
  uint64_t v594;
  int v595;
  uint64_t v596;
  uint64_t v597;
  int v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t *v603;
  uint64_t v604;
  int v605;
  int v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t *v610;
  uint64_t v611;
  int v612;
  int v613;
  uint64_t v614;
  int v615;
  uint64_t v616;
  int v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t *v625;
  uint64_t v626;
  int v627;
  int v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t *v632;
  uint64_t v633;
  int v634;
  int v635;
  uint64_t v636;
  int v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t *v644;
  uint64_t v645;
  int v646;
  int v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t *v651;
  uint64_t v652;
  int v653;
  int v654;
  uint64_t v655;
  int v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t *v663;
  uint64_t v664;
  int v665;
  int v666;
  uint64_t v667;
  int v668;
  uint64_t v669;
  uint64_t v670;
  int v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t *v676;
  uint64_t v677;
  int v678;
  int v679;
  uint64_t v680;
  int v681;
  uint64_t v682;
  int v683;
  uint64_t v684;
  uint64_t v685;
  int v686;
  uint64_t v687;
  uint64_t v688;
  int v689;
  uint64_t v690;

  v9 = result;
LABEL_2:
  v10 = a2 - 1;
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = a2 - v11;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v300 = *(a2 - 1);
        v301 = *v11;
        v302 = *(_QWORD *)(*(_QWORD *)a3 + 1960);
        v303 = *(_QWORD *)(v302 + 24);
        v304 = *(unsigned int *)(v302 + 40);
        if (!(_DWORD)v304)
          goto LABEL_815;
        v305 = *(_QWORD *)(v300 + 40);
        LODWORD(v306) = ((v305 >> 4) ^ (v305 >> 9)) & (v304 - 1);
        v307 = (uint64_t *)(v303 + 16 * v306);
        v308 = *v307;
        if (v305 == *v307)
          goto LABEL_816;
        v309 = 1;
        while (v308 != -4096)
        {
          v310 = v306 + v309++;
          v306 = v310 & (v304 - 1);
          v308 = *(_QWORD *)(v303 + 16 * v306);
          if (v305 == v308)
          {
            v307 = (uint64_t *)(v303 + 16 * v306);
            goto LABEL_816;
          }
        }
LABEL_815:
        v307 = (uint64_t *)(v303 + 16 * v304);
LABEL_816:
        if (v307 == (uint64_t *)(v303 + 16 * v304))
          v600 = 0;
        else
          v600 = v307[1];
        v601 = *(_QWORD *)(v301 + 40);
        if (!(_DWORD)v304)
          goto LABEL_835;
        LODWORD(v602) = ((v601 >> 4) ^ (v601 >> 9)) & (v304 - 1);
        v603 = (uint64_t *)(v303 + 16 * v602);
        v604 = *v603;
        if (v601 != *v603)
        {
          v605 = 1;
          while (v604 != -4096)
          {
            v606 = v602 + v605++;
            v602 = v606 & (v304 - 1);
            v604 = *(_QWORD *)(v303 + 16 * v602);
            if (v601 == v604)
            {
              v603 = (uint64_t *)(v303 + 16 * v602);
              goto LABEL_836;
            }
          }
LABEL_835:
          v603 = (uint64_t *)(v303 + 16 * v304);
        }
LABEL_836:
        if (v603 == (uint64_t *)(v303 + 16 * v304))
          v614 = 0;
        else
          v614 = v603[1];
        if (v600 == v614)
        {
          v615 = *(__int16 *)(v601 + 18);
          if ((v615 & 0x80000000) == 0)
          {
            v667 = *(_QWORD *)(v601 + 48);
            if (v667 != v601 + 40)
            {
              v668 = 0;
              do
              {
                v669 = v667 - 24;
                if (!v667)
                  v669 = 0;
                *(_DWORD *)(v669 + 56) = v668++;
                v667 = *(_QWORD *)(v667 + 8);
              }
              while (v667 != v601 + 40);
            }
            *(_WORD *)(v601 + 18) = v615 | 0x8000;
          }
          if (*(_DWORD *)(v301 + 56) >= *(_DWORD *)(v300 + 56))
            return result;
        }
        else if (*(_DWORD *)(v600 + 72) >= *(_DWORD *)(v614 + 72))
        {
          return result;
        }
        *v11 = v300;
        *(a2 - 1) = v301;
        return result;
      case 3:
        return sub_1C60B2DE8(v11, v11 + 1, a2 - 1, a3);
      case 4:
        return sub_1C60B40A4(v11, v11 + 1, v11 + 2, a2 - 1, a3);
      case 5:
        v311 = v11 + 2;
        v312 = v11 + 3;
        result = sub_1C60B40A4(v11, v11 + 1, v11 + 2, v11 + 3, a3);
        v313 = *(a2 - 1);
        v314 = v11[3];
        v315 = *(_QWORD *)(*(_QWORD *)a3 + 1960);
        v316 = *(_QWORD *)(v315 + 24);
        v317 = *(unsigned int *)(v315 + 40);
        if (!(_DWORD)v317)
          goto LABEL_825;
        v318 = *(_QWORD *)(v313 + 40);
        LODWORD(v319) = ((v318 >> 4) ^ (v318 >> 9)) & (v317 - 1);
        v320 = (uint64_t *)(v316 + 16 * v319);
        v321 = *v320;
        if (v318 == *v320)
          goto LABEL_826;
        v322 = 1;
        while (v321 != -4096)
        {
          v323 = v319 + v322++;
          v319 = v323 & (v317 - 1);
          v321 = *(_QWORD *)(v316 + 16 * v319);
          if (v318 == v321)
          {
            v320 = (uint64_t *)(v316 + 16 * v319);
            goto LABEL_826;
          }
        }
LABEL_825:
        v320 = (uint64_t *)(v316 + 16 * v317);
LABEL_826:
        if (v320 == (uint64_t *)(v316 + 16 * v317))
          v607 = 0;
        else
          v607 = v320[1];
        v608 = *(_QWORD *)(v314 + 40);
        if (!(_DWORD)v317)
          goto LABEL_845;
        LODWORD(v609) = ((v608 >> 4) ^ (v608 >> 9)) & (v317 - 1);
        v610 = (uint64_t *)(v316 + 16 * v609);
        v611 = *v610;
        if (v608 != *v610)
        {
          v612 = 1;
          while (v611 != -4096)
          {
            v613 = v609 + v612++;
            v609 = v613 & (v317 - 1);
            v611 = *(_QWORD *)(v316 + 16 * v609);
            if (v608 == v611)
            {
              v610 = (uint64_t *)(v316 + 16 * v609);
              goto LABEL_846;
            }
          }
LABEL_845:
          v610 = (uint64_t *)(v316 + 16 * v317);
        }
LABEL_846:
        if (v610 == (uint64_t *)(v316 + 16 * v317))
          v616 = 0;
        else
          v616 = v610[1];
        if (v607 == v616)
        {
          v617 = *(__int16 *)(v608 + 18);
          if ((v617 & 0x80000000) == 0)
          {
            v670 = *(_QWORD *)(v608 + 48);
            if (v670 != v608 + 40)
            {
              v671 = 0;
              do
              {
                v672 = v670 - 24;
                if (!v670)
                  v672 = 0;
                *(_DWORD *)(v672 + 56) = v671++;
                v670 = *(_QWORD *)(v670 + 8);
              }
              while (v670 != v608 + 40);
            }
            *(_WORD *)(v608 + 18) = v617 | 0x8000;
          }
          if (*(_DWORD *)(v314 + 56) >= *(_DWORD *)(v313 + 56))
            return result;
        }
        else if (*(_DWORD *)(v607 + 72) >= *(_DWORD *)(v616 + 72))
        {
          return result;
        }
        *v312 = v313;
        *(a2 - 1) = v314;
        v618 = *v312;
        v619 = *v311;
        v620 = *(_QWORD *)(*(_QWORD *)a3 + 1960);
        v621 = *(_QWORD *)(v620 + 24);
        v622 = *(unsigned int *)(v620 + 40);
        if (!(_DWORD)v622)
          goto LABEL_860;
        v623 = *(_QWORD *)(v618 + 40);
        LODWORD(v624) = ((v623 >> 4) ^ (v623 >> 9)) & (v622 - 1);
        v625 = (uint64_t *)(v621 + 16 * v624);
        v626 = *v625;
        if (v623 != *v625)
        {
          v627 = 1;
          while (v626 != -4096)
          {
            v628 = v624 + v627++;
            v624 = v628 & (v622 - 1);
            v626 = *(_QWORD *)(v621 + 16 * v624);
            if (v623 == v626)
            {
              v625 = (uint64_t *)(v621 + 16 * v624);
              goto LABEL_861;
            }
          }
LABEL_860:
          v625 = (uint64_t *)(v621 + 16 * v622);
        }
LABEL_861:
        if (v625 == (uint64_t *)(v621 + 16 * v622))
          v629 = 0;
        else
          v629 = v625[1];
        v630 = *(_QWORD *)(v619 + 40);
        if (!(_DWORD)v622)
          goto LABEL_870;
        LODWORD(v631) = ((v630 >> 4) ^ (v630 >> 9)) & (v622 - 1);
        v632 = (uint64_t *)(v621 + 16 * v631);
        v633 = *v632;
        if (v630 != *v632)
        {
          v634 = 1;
          while (v633 != -4096)
          {
            v635 = v631 + v634++;
            v631 = v635 & (v622 - 1);
            v633 = *(_QWORD *)(v621 + 16 * v631);
            if (v630 == v633)
            {
              v632 = (uint64_t *)(v621 + 16 * v631);
              goto LABEL_871;
            }
          }
LABEL_870:
          v632 = (uint64_t *)(v621 + 16 * v622);
        }
LABEL_871:
        if (v632 == (uint64_t *)(v621 + 16 * v622))
          v636 = 0;
        else
          v636 = v632[1];
        if (v629 == v636)
        {
          v637 = *(__int16 *)(v630 + 18);
          if ((v637 & 0x80000000) == 0)
          {
            v682 = *(_QWORD *)(v630 + 48);
            if (v682 != v630 + 40)
            {
              v683 = 0;
              do
              {
                v684 = v682 - 24;
                if (!v682)
                  v684 = 0;
                *(_DWORD *)(v684 + 56) = v683++;
                v682 = *(_QWORD *)(v682 + 8);
              }
              while (v682 != v630 + 40);
            }
            *(_WORD *)(v630 + 18) = v637 | 0x8000;
          }
          if (*(_DWORD *)(v619 + 56) >= *(_DWORD *)(v618 + 56))
            return result;
        }
        else if (*(_DWORD *)(v629 + 72) >= *(_DWORD *)(v636 + 72))
        {
          return result;
        }
        *v311 = v618;
        *v312 = v619;
        v638 = v11[1];
        v639 = *(_QWORD *)(*(_QWORD *)a3 + 1960);
        v640 = *(_QWORD *)(v639 + 24);
        v641 = *(unsigned int *)(v639 + 40);
        if (!(_DWORD)v641)
          goto LABEL_885;
        v642 = *(_QWORD *)(v618 + 40);
        LODWORD(v643) = ((v642 >> 4) ^ (v642 >> 9)) & (v641 - 1);
        v644 = (uint64_t *)(v640 + 16 * v643);
        v645 = *v644;
        if (v642 != *v644)
        {
          v646 = 1;
          while (v645 != -4096)
          {
            v647 = v643 + v646++;
            v643 = v647 & (v641 - 1);
            v645 = *(_QWORD *)(v640 + 16 * v643);
            if (v642 == v645)
            {
              v644 = (uint64_t *)(v640 + 16 * v643);
              goto LABEL_886;
            }
          }
LABEL_885:
          v644 = (uint64_t *)(v640 + 16 * v641);
        }
LABEL_886:
        if (v644 == (uint64_t *)(v640 + 16 * v641))
          v648 = 0;
        else
          v648 = v644[1];
        v649 = *(_QWORD *)(v638 + 40);
        if (!(_DWORD)v641)
          goto LABEL_895;
        LODWORD(v650) = ((v649 >> 4) ^ (v649 >> 9)) & (v641 - 1);
        v651 = (uint64_t *)(v640 + 16 * v650);
        v652 = *v651;
        if (v649 != *v651)
        {
          v653 = 1;
          while (v652 != -4096)
          {
            v654 = v650 + v653++;
            v650 = v654 & (v641 - 1);
            v652 = *(_QWORD *)(v640 + 16 * v650);
            if (v649 == v652)
            {
              v651 = (uint64_t *)(v640 + 16 * v650);
              goto LABEL_896;
            }
          }
LABEL_895:
          v651 = (uint64_t *)(v640 + 16 * v641);
        }
LABEL_896:
        if (v651 == (uint64_t *)(v640 + 16 * v641))
          v655 = 0;
        else
          v655 = v651[1];
        if (v648 == v655)
        {
          v656 = *(__int16 *)(v649 + 18);
          if ((v656 & 0x80000000) == 0)
          {
            v685 = *(_QWORD *)(v649 + 48);
            if (v685 != v649 + 40)
            {
              v686 = 0;
              do
              {
                v687 = v685 - 24;
                if (!v685)
                  v687 = 0;
                *(_DWORD *)(v687 + 56) = v686++;
                v685 = *(_QWORD *)(v685 + 8);
              }
              while (v685 != v649 + 40);
            }
            *(_WORD *)(v649 + 18) = v656 | 0x8000;
          }
          if (*(_DWORD *)(v638 + 56) >= *(_DWORD *)(v618 + 56))
            return result;
        }
        else if (*(_DWORD *)(v648 + 72) >= *(_DWORD *)(v655 + 72))
        {
          return result;
        }
        v11[1] = v618;
        v11[2] = v638;
        v657 = *v11;
        v658 = *(_QWORD *)(*(_QWORD *)a3 + 1960);
        v659 = *(_QWORD *)(v658 + 24);
        v660 = *(unsigned int *)(v658 + 40);
        if (!(_DWORD)v660)
          goto LABEL_922;
        v661 = *(_QWORD *)(v618 + 40);
        LODWORD(v662) = ((v661 >> 4) ^ (v661 >> 9)) & (v660 - 1);
        v663 = (uint64_t *)(v659 + 16 * v662);
        v664 = *v663;
        if (v661 != *v663)
        {
          v665 = 1;
          while (v664 != -4096)
          {
            v666 = v662 + v665++;
            v662 = v666 & (v660 - 1);
            v664 = *(_QWORD *)(v659 + 16 * v662);
            if (v661 == v664)
            {
              v663 = (uint64_t *)(v659 + 16 * v662);
              goto LABEL_923;
            }
          }
LABEL_922:
          v663 = (uint64_t *)(v659 + 16 * v660);
        }
LABEL_923:
        if (v663 == (uint64_t *)(v659 + 16 * v660))
          v673 = 0;
        else
          v673 = v663[1];
        v674 = *(_QWORD *)(v657 + 40);
        if (!(_DWORD)v660)
          goto LABEL_932;
        LODWORD(v675) = ((v674 >> 4) ^ (v674 >> 9)) & (v660 - 1);
        v676 = (uint64_t *)(v659 + 16 * v675);
        v677 = *v676;
        if (v674 != *v676)
        {
          v678 = 1;
          while (v677 != -4096)
          {
            v679 = v675 + v678++;
            v675 = v679 & (v660 - 1);
            v677 = *(_QWORD *)(v659 + 16 * v675);
            if (v674 == v677)
            {
              v676 = (uint64_t *)(v659 + 16 * v675);
              goto LABEL_933;
            }
          }
LABEL_932:
          v676 = (uint64_t *)(v659 + 16 * v660);
        }
LABEL_933:
        if (v676 == (uint64_t *)(v659 + 16 * v660))
          v680 = 0;
        else
          v680 = v676[1];
        if (v673 == v680)
        {
          v681 = *(__int16 *)(v674 + 18);
          if ((v681 & 0x80000000) == 0)
          {
            v688 = *(_QWORD *)(v674 + 48);
            if (v688 != v674 + 40)
            {
              v689 = 0;
              do
              {
                v690 = v688 - 24;
                if (!v688)
                  v690 = 0;
                *(_DWORD *)(v690 + 56) = v689++;
                v688 = *(_QWORD *)(v688 + 8);
              }
              while (v688 != v674 + 40);
            }
            *(_WORD *)(v674 + 18) = v681 | 0x8000;
          }
          if (*(_DWORD *)(v657 + 56) >= *(_DWORD *)(v618 + 56))
            return result;
        }
        else if (*(_DWORD *)(v673 + 72) >= *(_DWORD *)(v680 + 72))
        {
          return result;
        }
        *v11 = v618;
        v11[1] = v657;
        return result;
      default:
        if (v12 <= 191)
        {
          v324 = v11 + 1;
          v326 = v11 == a2 || v324 == a2;
          if ((a5 & 1) != 0)
          {
            if (v326)
              return result;
            v327 = *(_QWORD *)a3;
            v328 = v11;
            while (1)
            {
              v329 = v328;
              v328 = v324;
              v330 = v329[1];
              v331 = *(_QWORD *)(v327 + 1960);
              v332 = *(_QWORD *)(v331 + 24);
              v333 = *(unsigned int *)(v331 + 40);
              if ((_DWORD)v333)
              {
                v334 = *(_QWORD *)(v330 + 40);
                LODWORD(v335) = ((v334 >> 4) ^ (v334 >> 9)) & (v333 - 1);
                result = (uint64_t *)(v332 + 16 * v335);
                v336 = *result;
                if (v334 != *result)
                {
                  v337 = 1;
                  do
                  {
                    if (v336 == -4096)
                      goto LABEL_428;
                    v338 = v335 + v337++;
                    v335 = v338 & (v333 - 1);
                    v336 = *(_QWORD *)(v332 + 16 * v335);
                  }
                  while (v334 != v336);
                  result = (uint64_t *)(v332 + 16 * v335);
                }
              }
              else
              {
LABEL_428:
                result = (uint64_t *)(v332 + 16 * v333);
              }
              if (result == (uint64_t *)(v332 + 16 * v333))
                v339 = 0;
              else
                v339 = result[1];
              v340 = *v329;
              v341 = *(_QWORD *)(*v329 + 40);
              if ((_DWORD)v333)
              {
                result = (uint64_t *)(v333 - 1);
                LODWORD(v342) = ((v341 >> 4) ^ (v341 >> 9)) & result;
                v343 = (uint64_t *)(v332 + 16 * v342);
                v344 = *v343;
                if (v341 != *v343)
                {
                  v345 = 1;
                  do
                  {
                    if (v344 == -4096)
                      goto LABEL_438;
                    v346 = v342 + v345++;
                    v342 = v346 & result;
                    v344 = *(_QWORD *)(v332 + 16 * v342);
                  }
                  while (v341 != v344);
                  v343 = (uint64_t *)(v332 + 16 * v342);
                }
              }
              else
              {
LABEL_438:
                v343 = (uint64_t *)(v332 + 16 * v333);
              }
              if (v343 == (uint64_t *)(v332 + 16 * v333))
                v347 = 0;
              else
                v347 = v343[1];
              if (v339 == v347)
              {
                v348 = *(__int16 *)(v341 + 18);
                if ((v348 & 0x80000000) == 0)
                {
                  v372 = *(_QWORD *)(v341 + 48);
                  if (v372 != v341 + 40)
                  {
                    v373 = 0;
                    do
                    {
                      result = (uint64_t *)(v372 - 24);
                      if (!v372)
                        result = 0;
                      *((_DWORD *)result + 14) = v373++;
                      v372 = *(_QWORD *)(v372 + 8);
                    }
                    while (v372 != v341 + 40);
                  }
                  *(_WORD *)(v341 + 18) = v348 | 0x8000;
                }
                if (*(_DWORD *)(v340 + 56) >= *(_DWORD *)(v330 + 56))
                  goto LABEL_483;
              }
              else if (*(_DWORD *)(v339 + 72) >= *(_DWORD *)(v347 + 72))
              {
                goto LABEL_483;
              }
              v329[1] = v340;
              v349 = v11;
              if (v329 == v11)
                goto LABEL_482;
              while (1)
              {
                v350 = *(_QWORD *)(*(_QWORD *)a3 + 1960);
                v351 = *(_QWORD *)(v350 + 24);
                v352 = *(unsigned int *)(v350 + 40);
                if ((_DWORD)v352)
                {
                  v353 = *(_QWORD *)(v330 + 40);
                  LODWORD(v354) = ((v353 >> 4) ^ (v353 >> 9)) & (v352 - 1);
                  v355 = (uint64_t *)(v351 + 16 * v354);
                  v356 = *v355;
                  if (v353 != *v355)
                  {
                    v357 = 1;
                    do
                    {
                      if (v356 == -4096)
                        goto LABEL_454;
                      v358 = v354 + v357++;
                      v354 = v358 & (v352 - 1);
                      v356 = *(_QWORD *)(v351 + 16 * v354);
                    }
                    while (v353 != v356);
                    v355 = (uint64_t *)(v351 + 16 * v354);
                  }
                }
                else
                {
LABEL_454:
                  v355 = (uint64_t *)(v351 + 16 * v352);
                }
                if (v355 == (uint64_t *)(v351 + 16 * v352))
                  v359 = 0;
                else
                  v359 = v355[1];
                v360 = v329 - 1;
                v361 = *(v329 - 1);
                v362 = *(_QWORD *)(v361 + 40);
                if ((_DWORD)v352)
                {
                  result = (uint64_t *)(v352 - 1);
                  LODWORD(v363) = ((v362 >> 4) ^ (v362 >> 9)) & result;
                  v364 = (uint64_t *)(v351 + 16 * v363);
                  v365 = *v364;
                  if (v362 != *v364)
                  {
                    v366 = 1;
                    do
                    {
                      if (v365 == -4096)
                        goto LABEL_464;
                      v367 = v363 + v366++;
                      v363 = v367 & result;
                      v365 = *(_QWORD *)(v351 + 16 * v363);
                    }
                    while (v362 != v365);
                    v364 = (uint64_t *)(v351 + 16 * v363);
                  }
                }
                else
                {
LABEL_464:
                  v364 = (uint64_t *)(v351 + 16 * v352);
                }
                if (v364 == (uint64_t *)(v351 + 16 * v352))
                  v368 = 0;
                else
                  v368 = v364[1];
                if (v359 != v368)
                {
                  if (*(_DWORD *)(v359 + 72) >= *(_DWORD *)(v368 + 72))
                    break;
                  goto LABEL_473;
                }
                v369 = *(__int16 *)(v362 + 18);
                if ((v369 & 0x80000000) == 0)
                {
                  v370 = *(_QWORD *)(v362 + 48);
                  if (v370 != v362 + 40)
                  {
                    v371 = 0;
                    do
                    {
                      result = (uint64_t *)(v370 - 24);
                      if (!v370)
                        result = 0;
                      *((_DWORD *)result + 14) = v371++;
                      v370 = *(_QWORD *)(v370 + 8);
                    }
                    while (v370 != v362 + 40);
                  }
                  *(_WORD *)(v362 + 18) = v369 | 0x8000;
                }
                if (*(_DWORD *)(v361 + 56) >= *(_DWORD *)(v330 + 56))
                  break;
LABEL_473:
                *v329-- = v361;
                if (v360 == v11)
                {
                  v349 = v11;
                  goto LABEL_482;
                }
              }
              v349 = v329;
LABEL_482:
              *v349 = v330;
              v327 = *(_QWORD *)a3;
LABEL_483:
              v324 = v328 + 1;
              if (v328 + 1 == a2)
                return result;
            }
          }
          if (v326)
            return result;
          v555 = *(_QWORD *)a3;
          while (1)
          {
            v556 = v9;
            v9 = v324;
            v557 = v556[1];
            v558 = *(_QWORD *)(v555 + 1960);
            v559 = *(_QWORD *)(v558 + 24);
            v560 = *(unsigned int *)(v558 + 40);
            if ((_DWORD)v560)
            {
              v561 = *(_QWORD *)(v557 + 40);
              LODWORD(v562) = ((v561 >> 4) ^ (v561 >> 9)) & (v560 - 1);
              v563 = (uint64_t *)(v559 + 16 * v562);
              v564 = *v563;
              if (v561 != *v563)
              {
                v565 = 1;
                do
                {
                  if (v564 == -4096)
                    goto LABEL_754;
                  v566 = v562 + v565++;
                  v562 = v566 & (v560 - 1);
                  v564 = *(_QWORD *)(v559 + 16 * v562);
                }
                while (v561 != v564);
                v563 = (uint64_t *)(v559 + 16 * v562);
              }
            }
            else
            {
LABEL_754:
              v563 = (uint64_t *)(v559 + 16 * v560);
            }
            if (v563 == (uint64_t *)(v559 + 16 * v560))
              v567 = 0;
            else
              v567 = v563[1];
            v568 = *v556;
            v569 = *(_QWORD *)(*v556 + 40);
            if ((_DWORD)v560)
            {
              LODWORD(v570) = ((v569 >> 4) ^ (v569 >> 9)) & (v560 - 1);
              v571 = v559 + 16 * v570;
              result = *(uint64_t **)v571;
              if (v569 != *(_QWORD *)v571)
              {
                v572 = 1;
                do
                {
                  if (result == (uint64_t *)-4096)
                    goto LABEL_764;
                  v573 = v570 + v572++;
                  v570 = v573 & (v560 - 1);
                  result = *(uint64_t **)(v559 + 16 * v570);
                }
                while ((uint64_t *)v569 != result);
                v571 = v559 + 16 * v570;
              }
            }
            else
            {
LABEL_764:
              v571 = v559 + 16 * v560;
            }
            if (v571 == v559 + 16 * v560)
              v574 = 0;
            else
              v574 = *(_QWORD *)(v571 + 8);
            if (v567 == v574)
            {
              v575 = *(__int16 *)(v569 + 18);
              if ((v575 & 0x80000000) == 0)
              {
                v597 = *(_QWORD *)(v569 + 48);
                if (v597 != v569 + 40)
                {
                  v598 = 0;
                  do
                  {
                    v599 = v597 - 24;
                    if (!v597)
                      v599 = 0;
                    *(_DWORD *)(v599 + 56) = v598++;
                    v597 = *(_QWORD *)(v597 + 8);
                  }
                  while (v597 != v569 + 40);
                }
                *(_WORD *)(v569 + 18) = v575 | 0x8000;
              }
              if (*(_DWORD *)(v568 + 56) >= *(_DWORD *)(v557 + 56))
                goto LABEL_807;
            }
            else if (*(_DWORD *)(v567 + 72) >= *(_DWORD *)(v574 + 72))
            {
              goto LABEL_807;
            }
            v576 = v9;
            do
            {
              while (1)
              {
                *v576 = v568;
                v576 = v556;
                v577 = *(_QWORD *)(*(_QWORD *)a3 + 1960);
                v578 = *(_QWORD *)(v577 + 24);
                v579 = *(unsigned int *)(v577 + 40);
                if ((_DWORD)v579)
                {
                  v580 = *(_QWORD *)(v557 + 40);
                  LODWORD(v581) = ((v580 >> 4) ^ (v580 >> 9)) & (v579 - 1);
                  v582 = (uint64_t *)(v578 + 16 * v581);
                  v583 = *v582;
                  if (v580 != *v582)
                  {
                    v584 = 1;
                    do
                    {
                      if (v583 == -4096)
                        goto LABEL_780;
                      v585 = v581 + v584++;
                      v581 = v585 & (v579 - 1);
                      v583 = *(_QWORD *)(v578 + 16 * v581);
                    }
                    while (v580 != v583);
                    v582 = (uint64_t *)(v578 + 16 * v581);
                  }
                }
                else
                {
LABEL_780:
                  v582 = (uint64_t *)(v578 + 16 * v579);
                }
                v556 = v576 - 1;
                v568 = *(v576 - 1);
                v586 = v582 == (uint64_t *)(v578 + 16 * v579) ? 0 : v582[1];
                v587 = *(_QWORD *)(v568 + 40);
                if ((_DWORD)v579)
                {
                  LODWORD(v588) = ((v587 >> 4) ^ (v587 >> 9)) & (v579 - 1);
                  v589 = v578 + 16 * v588;
                  result = *(uint64_t **)v589;
                  if (v587 != *(_QWORD *)v589)
                  {
                    v590 = 1;
                    do
                    {
                      if (result == (uint64_t *)-4096)
                        goto LABEL_790;
                      v591 = v588 + v590++;
                      v588 = v591 & (v579 - 1);
                      result = *(uint64_t **)(v578 + 16 * v588);
                    }
                    while ((uint64_t *)v587 != result);
                    v589 = v578 + 16 * v588;
                  }
                }
                else
                {
LABEL_790:
                  v589 = v578 + 16 * v579;
                }
                v592 = v589 == v578 + 16 * v579 ? 0 : *(_QWORD *)(v589 + 8);
                if (v586 == v592)
                  break;
                if (*(_DWORD *)(v586 + 72) >= *(_DWORD *)(v592 + 72))
                  goto LABEL_806;
              }
              v593 = *(__int16 *)(v587 + 18);
              if ((v593 & 0x80000000) == 0)
              {
                v594 = *(_QWORD *)(v587 + 48);
                if (v594 != v587 + 40)
                {
                  v595 = 0;
                  do
                  {
                    v596 = v594 - 24;
                    if (!v594)
                      v596 = 0;
                    *(_DWORD *)(v596 + 56) = v595++;
                    v594 = *(_QWORD *)(v594 + 8);
                  }
                  while (v594 != v587 + 40);
                }
                *(_WORD *)(v587 + 18) = v593 | 0x8000;
              }
            }
            while (*(_DWORD *)(v568 + 56) < *(_DWORD *)(v557 + 56));
LABEL_806:
            *v576 = v557;
            v555 = *(_QWORD *)a3;
LABEL_807:
            v324 = v9 + 1;
            if (v9 + 1 == a2)
              return result;
          }
        }
        if (!a4)
        {
          if (v11 == a2)
            return result;
          v374 = (unint64_t)(v13 - 2) >> 1;
          v375 = v374;
          while (1)
          {
            v376 = v375;
            if (v374 >= v375)
            {
              v377 = (2 * v375) | 1;
              v378 = &v11[v377];
              v379 = *(_QWORD *)a3;
              if (2 * v376 + 2 >= v13)
              {
                v390 = *(_QWORD *)(v379 + 1960);
                v382 = *(_QWORD *)(v390 + 24);
                LODWORD(v383) = *(_DWORD *)(v390 + 40);
              }
              else
              {
                v380 = *v378;
                v381 = *(_QWORD *)(v379 + 1960);
                v382 = *(_QWORD *)(v381 + 24);
                v383 = *(unsigned int *)(v381 + 40);
                if ((_DWORD)v383)
                {
                  v384 = *(_QWORD *)(v380 + 40);
                  LODWORD(v385) = ((v384 >> 4) ^ (v384 >> 9)) & (v383 - 1);
                  v386 = (uint64_t *)(v382 + 16 * v385);
                  v387 = *v386;
                  if (v384 != *v386)
                  {
                    v388 = 1;
                    do
                    {
                      if (v387 == -4096)
                        goto LABEL_502;
                      v389 = v385 + v388++;
                      v385 = v389 & (v383 - 1);
                      v387 = *(_QWORD *)(v382 + 16 * v385);
                    }
                    while (v384 != v387);
                    v386 = (uint64_t *)(v382 + 16 * v385);
                  }
                }
                else
                {
LABEL_502:
                  v386 = (uint64_t *)(v382 + 16 * v383);
                }
                if (v386 == (uint64_t *)(v382 + 16 * v383))
                  v391 = 0;
                else
                  v391 = v386[1];
                v393 = v378[1];
                ++v378;
                v392 = v393;
                v394 = *(_QWORD *)(v393 + 40);
                if ((_DWORD)v383)
                {
                  LODWORD(v395) = ((v394 >> 4) ^ (v394 >> 9)) & (v383 - 1);
                  v396 = (uint64_t *)(v382 + 16 * v395);
                  v397 = *v396;
                  if (v394 != *v396)
                  {
                    v398 = 1;
                    do
                    {
                      if (v397 == -4096)
                        goto LABEL_512;
                      v399 = v395 + v398++;
                      v395 = v399 & (v383 - 1);
                      v397 = *(_QWORD *)(v382 + 16 * v395);
                    }
                    while (v394 != v397);
                    v396 = (uint64_t *)(v382 + 16 * v395);
                  }
                }
                else
                {
LABEL_512:
                  v396 = (uint64_t *)(v382 + 16 * v383);
                }
                if (v396 == (uint64_t *)(v382 + 16 * v383))
                  v400 = 0;
                else
                  v400 = v396[1];
                if (v391 == v400)
                {
                  v403 = *(__int16 *)(v394 + 18);
                  if ((v403 & 0x80000000) == 0)
                  {
                    v473 = *(_QWORD *)(v394 + 48);
                    if (v473 != v394 + 40)
                    {
                      v474 = 0;
                      do
                      {
                        v475 = v473 - 24;
                        if (!v473)
                          v475 = 0;
                        *(_DWORD *)(v475 + 56) = v474++;
                        v473 = *(_QWORD *)(v473 + 8);
                      }
                      while (v473 != v394 + 40);
                    }
                    *(_WORD *)(v394 + 18) = v403 | 0x8000;
                  }
                  v401 = (_DWORD *)(v392 + 56);
                  v402 = (_DWORD *)(v380 + 56);
                }
                else
                {
                  v401 = (_DWORD *)(v391 + 72);
                  v402 = (_DWORD *)(v400 + 72);
                }
                if (*v401 < *v402)
                  v377 = 2 * v376 + 2;
                else
                  v378 = &v11[v377];
              }
              v404 = *v378;
              v405 = v11[v376];
              if ((_DWORD)v383)
              {
                v406 = *(_QWORD *)(v404 + 40);
                LODWORD(v407) = ((v406 >> 4) ^ (v406 >> 9)) & (v383 - 1);
                v408 = (uint64_t *)(v382 + 16 * v407);
                v409 = *v408;
                if (v406 != *v408)
                {
                  v410 = 1;
                  do
                  {
                    if (v409 == -4096)
                      goto LABEL_623;
                    v411 = v407 + v410++;
                    v407 = v411 & (v383 - 1);
                    v409 = *(_QWORD *)(v382 + 16 * v407);
                  }
                  while (v406 != v409);
                  v408 = (uint64_t *)(v382 + 16 * v407);
                }
                v412 = v383;
              }
              else
              {
LABEL_623:
                v412 = v383;
                v408 = (uint64_t *)(v382 + 16 * v383);
              }
              if (v408 == (uint64_t *)(v382 + 16 * v412))
                result = 0;
              else
                result = (uint64_t *)v408[1];
              v413 = *(_QWORD *)(v405 + 40);
              if ((_DWORD)v383)
              {
                LODWORD(v414) = ((v413 >> 4) ^ (v413 >> 9)) & (v383 - 1);
                v415 = (uint64_t *)(v382 + 16 * v414);
                v416 = *v415;
                if (v413 != *v415)
                {
                  v417 = 1;
                  do
                  {
                    if (v416 == -4096)
                      goto LABEL_624;
                    v418 = v414 + v417++;
                    v414 = v418 & (v383 - 1);
                    v416 = *(_QWORD *)(v382 + 16 * v414);
                  }
                  while (v413 != v416);
                  v415 = (uint64_t *)(v382 + 16 * v414);
                }
                v419 = v383;
              }
              else
              {
LABEL_624:
                v419 = v383;
                v415 = (uint64_t *)(v382 + 16 * v383);
              }
              if (v415 == (uint64_t *)(v382 + 16 * v419))
                v420 = 0;
              else
                v420 = v415[1];
              if (result == (uint64_t *)v420)
              {
                v421 = *(__int16 *)(v413 + 18);
                if ((v421 & 0x80000000) == 0)
                {
                  result = *(uint64_t **)(v413 + 48);
                  if (result != (uint64_t *)(v413 + 40))
                  {
                    v471 = 0;
                    do
                    {
                      v472 = result - 3;
                      if (!result)
                        v472 = 0;
                      *((_DWORD *)v472 + 14) = v471++;
                      result = (uint64_t *)result[1];
                    }
                    while (result != (uint64_t *)(v413 + 40));
                  }
                  *(_WORD *)(v413 + 18) = v421 | 0x8000;
                }
                if (*(_DWORD *)(v405 + 56) >= *(_DWORD *)(v404 + 56))
                {
LABEL_548:
                  v11[v376] = v404;
                  if (v374 >= v377)
                  {
                    while (1)
                    {
                      v423 = (2 * v377) | 1;
                      v422 = &v11[v423];
                      v377 = 2 * v377 + 2;
                      v424 = *(_QWORD *)a3;
                      if (v377 >= v13)
                      {
                        v435 = *(_QWORD *)(v424 + 1960);
                        v427 = *(_QWORD *)(v435 + 24);
                        LODWORD(v428) = *(_DWORD *)(v435 + 40);
                        v377 = v423;
                      }
                      else
                      {
                        v425 = *v422;
                        v426 = *(_QWORD *)(v424 + 1960);
                        v427 = *(_QWORD *)(v426 + 24);
                        v428 = *(unsigned int *)(v426 + 40);
                        if ((_DWORD)v428)
                        {
                          v429 = *(_QWORD *)(v425 + 40);
                          LODWORD(v430) = ((v429 >> 4) ^ (v429 >> 9)) & (v428 - 1);
                          v431 = (uint64_t *)(v427 + 16 * v430);
                          v432 = *v431;
                          if (v429 != *v431)
                          {
                            v433 = 1;
                            do
                            {
                              if (v432 == -4096)
                                goto LABEL_561;
                              v434 = v430 + v433++;
                              v430 = v434 & (v428 - 1);
                              v432 = *(_QWORD *)(v427 + 16 * v430);
                            }
                            while (v429 != v432);
                            v431 = (uint64_t *)(v427 + 16 * v430);
                          }
                        }
                        else
                        {
LABEL_561:
                          v431 = (uint64_t *)(v427 + 16 * v428);
                        }
                        if (v431 == (uint64_t *)(v427 + 16 * v428))
                          v436 = 0;
                        else
                          v436 = v431[1];
                        v437 = v422[1];
                        v438 = *(_QWORD *)(v437 + 40);
                        if ((_DWORD)v428)
                        {
                          LODWORD(v439) = ((v438 >> 4) ^ (v438 >> 9)) & (v428 - 1);
                          v440 = (uint64_t *)(v427 + 16 * v439);
                          v441 = *v440;
                          if (v438 != *v440)
                          {
                            v442 = 1;
                            do
                            {
                              if (v441 == -4096)
                                goto LABEL_571;
                              v443 = v439 + v442++;
                              v439 = v443 & (v428 - 1);
                              v441 = *(_QWORD *)(v427 + 16 * v439);
                            }
                            while (v438 != v441);
                            v440 = (uint64_t *)(v427 + 16 * v439);
                          }
                        }
                        else
                        {
LABEL_571:
                          v440 = (uint64_t *)(v427 + 16 * v428);
                        }
                        if (v440 == (uint64_t *)(v427 + 16 * v428))
                          v444 = 0;
                        else
                          v444 = v440[1];
                        if (v436 == v444)
                        {
                          v447 = *(__int16 *)(v438 + 18);
                          if ((v447 & 0x80000000) == 0)
                          {
                            v468 = *(_QWORD *)(v438 + 48);
                            if (v468 != v438 + 40)
                            {
                              v469 = 0;
                              do
                              {
                                v470 = v468 - 24;
                                if (!v468)
                                  v470 = 0;
                                *(_DWORD *)(v470 + 56) = v469++;
                                v468 = *(_QWORD *)(v468 + 8);
                              }
                              while (v468 != v438 + 40);
                            }
                            *(_WORD *)(v438 + 18) = v447 | 0x8000;
                          }
                          v445 = (_DWORD *)(v437 + 56);
                          v446 = (_DWORD *)(v425 + 56);
                        }
                        else
                        {
                          v445 = (_DWORD *)(v436 + 72);
                          v446 = (_DWORD *)(v444 + 72);
                        }
                        if (*v445 >= *v446)
                          v377 = v423;
                        else
                          ++v422;
                      }
                      v448 = *v422;
                      if ((_DWORD)v428)
                      {
                        v449 = *(_QWORD *)(v448 + 40);
                        LODWORD(v450) = ((v449 >> 4) ^ (v449 >> 9)) & (v428 - 1);
                        v451 = (uint64_t *)(v427 + 16 * v450);
                        v452 = *v451;
                        if (v449 != *v451)
                        {
                          v453 = 1;
                          do
                          {
                            if (v452 == -4096)
                              goto LABEL_609;
                            v454 = v450 + v453++;
                            v450 = v454 & (v428 - 1);
                            v452 = *(_QWORD *)(v427 + 16 * v450);
                          }
                          while (v449 != v452);
                          v451 = (uint64_t *)(v427 + 16 * v450);
                        }
                        v455 = v428;
                      }
                      else
                      {
LABEL_609:
                        v455 = v428;
                        v451 = (uint64_t *)(v427 + 16 * v428);
                      }
                      if (v451 == (uint64_t *)(v427 + 16 * v455))
                        v456 = 0;
                      else
                        v456 = v451[1];
                      result = *(uint64_t **)(v405 + 40);
                      if ((_DWORD)v428)
                      {
                        LODWORD(v457) = ((result >> 4) ^ (result >> 9)) & (v428 - 1);
                        v458 = (uint64_t **)(v427 + 16 * v457);
                        v459 = *v458;
                        if (result != *v458)
                        {
                          v460 = 1;
                          do
                          {
                            if (v459 == (uint64_t *)-4096)
                              goto LABEL_610;
                            v461 = v457 + v460++;
                            v457 = v461 & (v428 - 1);
                            v459 = *(uint64_t **)(v427 + 16 * v457);
                          }
                          while (result != v459);
                          v458 = (uint64_t **)(v427 + 16 * v457);
                        }
                        v462 = v428;
                      }
                      else
                      {
LABEL_610:
                        v462 = v428;
                        v458 = (uint64_t **)(v427 + 16 * v428);
                      }
                      if (v458 == (uint64_t **)(v427 + 16 * v462))
                        v463 = 0;
                      else
                        v463 = v458[1];
                      if ((uint64_t *)v456 == v463)
                      {
                        v464 = *((__int16 *)result + 9);
                        if ((v464 & 0x80000000) == 0)
                        {
                          v465 = (uint64_t *)result[6];
                          if (v465 != result + 5)
                          {
                            v466 = 0;
                            do
                            {
                              v467 = v465 - 3;
                              if (!v465)
                                v467 = 0;
                              *((_DWORD *)v467 + 14) = v466++;
                              v465 = (uint64_t *)v465[1];
                            }
                            while (v465 != result + 5);
                          }
                          *((_WORD *)result + 9) = v464 | 0x8000;
                        }
                        if (*(_DWORD *)(v405 + 56) < *(_DWORD *)(v448 + 56))
                          break;
                      }
                      else if (*(_DWORD *)(v456 + 72) < *((_DWORD *)v463 + 18))
                      {
                        break;
                      }
                      *v378 = v448;
                      v378 = v422;
                      if (v374 < v377)
                        goto LABEL_550;
                    }
                  }
                  v422 = v378;
LABEL_550:
                  *v422 = v405;
                }
              }
              else if (*((_DWORD *)result + 18) >= *(_DWORD *)(v420 + 72))
              {
                goto LABEL_548;
              }
            }
            v375 = v376 - 1;
            if (!v376)
            {
              while (1)
              {
                v502 = 0;
                v503 = *v11;
                v504 = v11;
                do
                {
                  v505 = &v504[v502 + 1];
                  v506 = (2 * v502) | 1;
                  v507 = 2 * v502 + 2;
                  if (v507 < v13)
                  {
                    v508 = *v505;
                    v509 = *(_QWORD *)(*(_QWORD *)a3 + 1960);
                    v510 = *(_QWORD *)(v509 + 24);
                    v511 = *(unsigned int *)(v509 + 40);
                    if ((_DWORD)v511)
                    {
                      v512 = *(_QWORD *)(v508 + 40);
                      LODWORD(v513) = ((v512 >> 4) ^ (v512 >> 9)) & (v511 - 1);
                      v514 = (uint64_t *)(v510 + 16 * v513);
                      v515 = *v514;
                      if (v512 != *v514)
                      {
                        v516 = 1;
                        do
                        {
                          if (v515 == -4096)
                            goto LABEL_684;
                          v517 = v513 + v516++;
                          v513 = v517 & (v511 - 1);
                          v515 = *(_QWORD *)(v510 + 16 * v513);
                        }
                        while (v512 != v515);
                        v514 = (uint64_t *)(v510 + 16 * v513);
                      }
                    }
                    else
                    {
LABEL_684:
                      v514 = (uint64_t *)(v510 + 16 * v511);
                    }
                    if (v514 == (uint64_t *)(v510 + 16 * v511))
                      v518 = 0;
                    else
                      v518 = v514[1];
                    result = v505 + 1;
                    v519 = v505[1];
                    v520 = *(_QWORD *)(v519 + 40);
                    if ((_DWORD)v511)
                    {
                      LODWORD(v521) = ((v520 >> 4) ^ (v520 >> 9)) & (v511 - 1);
                      v522 = (uint64_t *)(v510 + 16 * v521);
                      v523 = *v522;
                      if (v520 != *v522)
                      {
                        v524 = 1;
                        do
                        {
                          if (v523 == -4096)
                            goto LABEL_694;
                          v525 = v521 + v524++;
                          v521 = v525 & (v511 - 1);
                          v523 = *(_QWORD *)(v510 + 16 * v521);
                        }
                        while (v520 != v523);
                        v522 = (uint64_t *)(v510 + 16 * v521);
                      }
                    }
                    else
                    {
LABEL_694:
                      v522 = (uint64_t *)(v510 + 16 * v511);
                    }
                    if (v522 == (uint64_t *)(v510 + 16 * v511))
                      v526 = 0;
                    else
                      v526 = v522[1];
                    if (v518 == v526)
                    {
                      v529 = *(__int16 *)(v520 + 18);
                      if ((v529 & 0x80000000) == 0)
                      {
                        v530 = *(_QWORD *)(v520 + 48);
                        if (v530 != v520 + 40)
                        {
                          v531 = 0;
                          do
                          {
                            v532 = v530 - 24;
                            if (!v530)
                              v532 = 0;
                            *(_DWORD *)(v532 + 56) = v531++;
                            v530 = *(_QWORD *)(v530 + 8);
                          }
                          while (v530 != v520 + 40);
                        }
                        *(_WORD *)(v520 + 18) = v529 | 0x8000;
                      }
                      v527 = (_DWORD *)(v519 + 56);
                      v528 = (_DWORD *)(v508 + 56);
                    }
                    else
                    {
                      v527 = (_DWORD *)(v518 + 72);
                      v528 = (_DWORD *)(v526 + 72);
                    }
                    if (*v527 < *v528)
                    {
                      ++v505;
                      v506 = v507;
                    }
                  }
                  *v504 = *v505;
                  v504 = v505;
                  v502 = v506;
                }
                while (v506 <= (uint64_t)((unint64_t)(v13 - 2) >> 1));
                if (v505 == --a2)
                {
                  *v505 = v503;
                }
                else
                {
                  *v505 = *a2;
                  *a2 = v503;
                  v533 = (char *)v505 - (char *)v11 + 8;
                  if (v533 >= 9)
                  {
                    v534 = ((unint64_t)v533 >> 3) - 2;
                    v477 = v534 >> 1;
                    v497 = &v11[v534 >> 1];
                    v535 = *v497;
                    v536 = *(_QWORD *)(*(_QWORD *)a3 + 1960);
                    v537 = *(_QWORD *)(v536 + 24);
                    v538 = *(unsigned int *)(v536 + 40);
                    if ((_DWORD)v538)
                    {
                      v539 = *(_QWORD *)(v535 + 40);
                      LODWORD(v540) = ((v539 >> 4) ^ (v539 >> 9)) & (v538 - 1);
                      v541 = (uint64_t *)(v537 + 16 * v540);
                      v542 = *v541;
                      if (v539 != *v541)
                      {
                        v543 = 1;
                        do
                        {
                          if (v542 == -4096)
                            goto LABEL_721;
                          v544 = v540 + v543++;
                          v540 = v544 & (v538 - 1);
                          v542 = *(_QWORD *)(v537 + 16 * v540);
                        }
                        while (v539 != v542);
                        v541 = (uint64_t *)(v537 + 16 * v540);
                      }
                    }
                    else
                    {
LABEL_721:
                      v541 = (uint64_t *)(v537 + 16 * v538);
                    }
                    if (v541 == (uint64_t *)(v537 + 16 * v538))
                      result = 0;
                    else
                      result = (uint64_t *)v541[1];
                    v545 = *v505;
                    v546 = *(_QWORD *)(*v505 + 40);
                    if ((_DWORD)v538)
                    {
                      LODWORD(v547) = ((v546 >> 4) ^ (v546 >> 9)) & (v538 - 1);
                      v548 = (uint64_t *)(v537 + 16 * v547);
                      v549 = *v548;
                      if (v546 != *v548)
                      {
                        v550 = 1;
                        do
                        {
                          if (v549 == -4096)
                            goto LABEL_731;
                          v551 = v547 + v550++;
                          v547 = v551 & (v538 - 1);
                          v549 = *(_QWORD *)(v537 + 16 * v547);
                        }
                        while (v546 != v549);
                        v548 = (uint64_t *)(v537 + 16 * v547);
                      }
                    }
                    else
                    {
LABEL_731:
                      v548 = (uint64_t *)(v537 + 16 * v538);
                    }
                    if (v548 == (uint64_t *)(v537 + 16 * v538))
                      v552 = 0;
                    else
                      v552 = v548[1];
                    if (result == (uint64_t *)v552)
                    {
                      v553 = *(__int16 *)(v546 + 18);
                      if ((v553 & 0x80000000) == 0)
                      {
                        result = *(uint64_t **)(v546 + 48);
                        if (result != (uint64_t *)(v546 + 40))
                        {
                          v500 = 0;
                          do
                          {
                            v501 = result - 3;
                            if (!result)
                              v501 = 0;
                            *((_DWORD *)v501 + 14) = v500++;
                            result = (uint64_t *)result[1];
                          }
                          while (result != (uint64_t *)(v546 + 40));
                        }
                        *(_WORD *)(v546 + 18) = v553 | 0x8000;
                      }
                      if (*(_DWORD *)(v545 + 56) >= *(_DWORD *)(v535 + 56))
                        goto LABEL_743;
                    }
                    else if (*((_DWORD *)result + 18) >= *(_DWORD *)(v552 + 72))
                    {
                      goto LABEL_743;
                    }
                    *v505 = v535;
                    if (v534 >= 2)
                    {
                      while (1)
                      {
                        v476 = v477 - 1;
                        v477 = (v477 - 1) >> 1;
                        v478 = &v11[v477];
                        v479 = *v478;
                        v480 = *(_QWORD *)(*(_QWORD *)a3 + 1960);
                        v481 = *(_QWORD *)(v480 + 24);
                        v482 = *(unsigned int *)(v480 + 40);
                        if ((_DWORD)v482)
                        {
                          v483 = *(_QWORD *)(v479 + 40);
                          LODWORD(v484) = ((v483 >> 4) ^ (v483 >> 9)) & (v482 - 1);
                          v485 = (uint64_t *)(v481 + 16 * v484);
                          v486 = *v485;
                          if (v483 != *v485)
                          {
                            v487 = 1;
                            do
                            {
                              if (v486 == -4096)
                                goto LABEL_643;
                              v488 = v484 + v487++;
                              v484 = v488 & (v482 - 1);
                              v486 = *(_QWORD *)(v481 + 16 * v484);
                            }
                            while (v483 != v486);
                            v485 = (uint64_t *)(v481 + 16 * v484);
                          }
                        }
                        else
                        {
LABEL_643:
                          v485 = (uint64_t *)(v481 + 16 * v482);
                        }
                        if (v485 == (uint64_t *)(v481 + 16 * v482))
                          result = 0;
                        else
                          result = (uint64_t *)v485[1];
                        v489 = *(_QWORD *)(v545 + 40);
                        if ((_DWORD)v482)
                        {
                          LODWORD(v490) = ((v489 >> 4) ^ (v489 >> 9)) & (v482 - 1);
                          v491 = (uint64_t *)(v481 + 16 * v490);
                          v492 = *v491;
                          if (v489 != *v491)
                          {
                            v493 = 1;
                            do
                            {
                              if (v492 == -4096)
                                goto LABEL_653;
                              v494 = v490 + v493++;
                              v490 = v494 & (v482 - 1);
                              v492 = *(_QWORD *)(v481 + 16 * v490);
                            }
                            while (v489 != v492);
                            v491 = (uint64_t *)(v481 + 16 * v490);
                          }
                        }
                        else
                        {
LABEL_653:
                          v491 = (uint64_t *)(v481 + 16 * v482);
                        }
                        if (v491 == (uint64_t *)(v481 + 16 * v482))
                          v495 = 0;
                        else
                          v495 = v491[1];
                        if (result == (uint64_t *)v495)
                        {
                          v496 = *(__int16 *)(v489 + 18);
                          if ((v496 & 0x80000000) == 0)
                          {
                            result = *(uint64_t **)(v489 + 48);
                            if (result != (uint64_t *)(v489 + 40))
                            {
                              v498 = 0;
                              do
                              {
                                v499 = result - 3;
                                if (!result)
                                  v499 = 0;
                                *((_DWORD *)v499 + 14) = v498++;
                                result = (uint64_t *)result[1];
                              }
                              while (result != (uint64_t *)(v489 + 40));
                            }
                            *(_WORD *)(v489 + 18) = v496 | 0x8000;
                          }
                          if (*(_DWORD *)(v545 + 56) >= *(_DWORD *)(v479 + 56))
                            break;
                        }
                        else if (*((_DWORD *)result + 18) >= *(_DWORD *)(v495 + 72))
                        {
                          break;
                        }
                        *v497 = v479;
                        v497 = &v11[v477];
                        if (v476 <= 1)
                          goto LABEL_742;
                      }
                    }
                    v478 = v497;
LABEL_742:
                    *v478 = v545;
                  }
                }
LABEL_743:
                if (v13-- <= 2)
                  return result;
              }
            }
          }
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = &v11[(unint64_t)v13 >> 1];
        if ((unint64_t)v12 < 0x401)
        {
          sub_1C60B2DE8(&v9[(unint64_t)v13 >> 1], v9, a2 - 1, a3);
        }
        else
        {
          sub_1C60B2DE8(v9, &v9[(unint64_t)v13 >> 1], a2 - 1, a3);
          sub_1C60B2DE8(v9 + 1, v15 - 1, a2 - 2, a3);
          sub_1C60B2DE8(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
          sub_1C60B2DE8(v15 - 1, v15, &v9[v14 + 1], a3);
          v16 = *v9;
          *v9 = *v15;
          *v15 = v16;
        }
        --a4;
        v17 = *v9;
        v18 = *(_QWORD *)a3;
        if ((a5 & 1) == 0)
        {
          v22 = *(v9 - 1);
          v23 = *(_QWORD *)(v18 + 1960);
          v19 = *(_QWORD *)(v23 + 24);
          v20 = *(unsigned int *)(v23 + 40);
          if ((_DWORD)v20)
          {
            v24 = *(_QWORD *)(v22 + 40);
            LODWORD(v25) = ((v24 >> 4) ^ (v24 >> 9)) & (v20 - 1);
            v26 = (uint64_t *)(v19 + 16 * v25);
            v27 = *v26;
            if (v24 == *v26)
              goto LABEL_18;
            v28 = 1;
            while (v27 != -4096)
            {
              v29 = v25 + v28++;
              v25 = v29 & (v20 - 1);
              v27 = *(_QWORD *)(v19 + 16 * v25);
              if (v24 == v27)
              {
                v26 = (uint64_t *)(v19 + 16 * v25);
                goto LABEL_18;
              }
            }
          }
          v26 = (uint64_t *)(v19 + 16 * v20);
LABEL_18:
          if (v26 == (uint64_t *)(v19 + 16 * v20))
            v30 = 0;
          else
            v30 = v26[1];
          v21 = *(_QWORD *)(v17 + 40);
          v31 = v21 >> 4;
          if ((_DWORD)v20)
          {
            LODWORD(v32) = (v31 ^ (v21 >> 9)) & (v20 - 1);
            result = (uint64_t *)(v19 + 16 * v32);
            v33 = *result;
            if (v21 == *result)
              goto LABEL_28;
            v34 = 1;
            while (v33 != -4096)
            {
              v35 = v32 + v34++;
              v32 = v35 & (v20 - 1);
              v33 = *(_QWORD *)(v19 + 16 * v32);
              if (v21 == v33)
              {
                result = (uint64_t *)(v19 + 16 * v32);
                goto LABEL_28;
              }
            }
          }
          result = (uint64_t *)(v19 + 16 * v20);
LABEL_28:
          if (result == (uint64_t *)(v19 + 16 * v20))
            v36 = 0;
          else
            v36 = result[1];
          if (v30 == v36)
          {
            v157 = *(__int16 *)(v21 + 18);
            if ((v157 & 0x80000000) == 0)
            {
              v163 = *(_QWORD *)(v21 + 48);
              if (v163 != v21 + 40)
              {
                v164 = 0;
                do
                {
                  result = (uint64_t *)(v163 - 24);
                  if (!v163)
                    result = 0;
                  *((_DWORD *)result + 14) = v164++;
                  v163 = *(_QWORD *)(v163 + 8);
                }
                while (v163 != v21 + 40);
              }
              *(_WORD *)(v21 + 18) = v157 | 0x8000;
            }
            if (*(_DWORD *)(v17 + 56) < *(_DWORD *)(v22 + 56))
              goto LABEL_33;
          }
          else if (*(_DWORD *)(v30 + 72) < *(_DWORD *)(v36 + 72))
          {
            goto LABEL_33;
          }
          if ((_DWORD)v20)
          {
            LODWORD(v158) = (v31 ^ (v21 >> 9)) & (v20 - 1);
            v159 = (uint64_t *)(v19 + 16 * v158);
            v160 = *v159;
            if (v21 == *v159)
              goto LABEL_210;
            v161 = 1;
            while (v160 != -4096)
            {
              v162 = v158 + v161++;
              v158 = v162 & (v20 - 1);
              v160 = *(_QWORD *)(v19 + 16 * v158);
              if (v21 == v160)
              {
                v159 = (uint64_t *)(v19 + 16 * v158);
                goto LABEL_210;
              }
            }
          }
          v159 = (uint64_t *)(v19 + 16 * v20);
LABEL_210:
          if (v159 == (uint64_t *)(v19 + 16 * v20))
            v165 = 0;
          else
            v165 = v159[1];
          v166 = *v10;
          v167 = *(_QWORD *)(*v10 + 40);
          if (!(_DWORD)v20)
            goto LABEL_219;
          LODWORD(v168) = ((v167 >> 4) ^ (v167 >> 9)) & (v20 - 1);
          v169 = v19 + 16 * v168;
          result = *(uint64_t **)v169;
          if (v167 != *(_QWORD *)v169)
          {
            v170 = 1;
            while (result != (uint64_t *)-4096)
            {
              v171 = v168 + v170++;
              v168 = v171 & (v20 - 1);
              result = *(uint64_t **)(v19 + 16 * v168);
              if ((uint64_t *)v167 == result)
              {
                v169 = v19 + 16 * v168;
                goto LABEL_220;
              }
            }
LABEL_219:
            v169 = v19 + 16 * v20;
          }
LABEL_220:
          if (v169 == v19 + 16 * v20)
            v172 = 0;
          else
            v172 = *(_QWORD *)(v169 + 8);
          if (v165 == v172)
          {
            v175 = *(__int16 *)(v167 + 18);
            if ((v175 & 0x80000000) == 0)
            {
              v298 = *(_QWORD *)(v167 + 48);
              if (v298 != v167 + 40)
              {
                LODWORD(result) = 0;
                do
                {
                  v299 = v298 - 24;
                  if (!v298)
                    v299 = 0;
                  *(_DWORD *)(v299 + 56) = (_DWORD)result;
                  result = (uint64_t *)((_DWORD)result + 1);
                  v298 = *(_QWORD *)(v298 + 8);
                }
                while (v298 != v167 + 40);
              }
              *(_WORD *)(v167 + 18) = v175 | 0x8000;
            }
            v173 = *(_DWORD *)(v166 + 56);
            v174 = *(_DWORD *)(v17 + 56);
          }
          else
          {
            v173 = *(_DWORD *)(v165 + 72);
            v174 = *(_DWORD *)(v172 + 72);
          }
          if (v173 < v174)
          {
            v176 = v20 - 1;
            v177 = (v31 ^ (v21 >> 9)) & (v20 - 1);
            v178 = (uint64_t *)(v19 + 16 * v177);
            v179 = (uint64_t *)(v19 + 16 * v20);
            v11 = v9;
            while (1)
            {
              v181 = v11[1];
              ++v11;
              v180 = v181;
              if (!(_DWORD)v20)
              {
                v188 = *(_QWORD *)(v180 + 40);
LABEL_249:
                v196 = *(__int16 *)(v188 + 18);
                if ((v196 & 0x80000000) == 0)
                {
                  v197 = *(_QWORD *)(v188 + 48);
                  if (v197 != v188 + 40)
                  {
                    v198 = 0;
                    do
                    {
                      v199 = v197 - 24;
                      if (!v197)
                        v199 = 0;
                      *(_DWORD *)(v199 + 56) = v198++;
                      v197 = *(_QWORD *)(v197 + 8);
                    }
                    while (v197 != v188 + 40);
                  }
                  *(_WORD *)(v188 + 18) = v196 | 0x8000;
                }
                result = (uint64_t *)*(unsigned int *)(v180 + 56);
                v195 = *(_DWORD *)(v17 + 56);
                goto LABEL_251;
              }
              v182 = *v178;
              v183 = (uint64_t *)(v19 + 16 * v177);
              if (v21 == *v178)
              {
LABEL_235:
                if (v183 != v179)
                {
                  v187 = v183[1];
                  goto LABEL_238;
                }
              }
              else
              {
                v184 = 1;
                LODWORD(v185) = (v31 ^ (v21 >> 9)) & v176;
                while (v182 != -4096)
                {
                  v186 = v185 + v184++;
                  v185 = v186 & v176;
                  v182 = *(_QWORD *)(v19 + 16 * v185);
                  if (v21 == v182)
                  {
                    v183 = (uint64_t *)(v19 + 16 * v185);
                    goto LABEL_235;
                  }
                }
              }
              v187 = 0;
LABEL_238:
              v188 = *(_QWORD *)(v180 + 40);
              LODWORD(v189) = ((v188 >> 4) ^ (v188 >> 9)) & v176;
              v190 = (uint64_t *)(v19 + 16 * v189);
              v191 = *v190;
              if (v188 == *v190)
              {
LABEL_243:
                if (v190 != v179)
                {
                  v194 = v190[1];
                  goto LABEL_246;
                }
              }
              else
              {
                v192 = 1;
                while (v191 != -4096)
                {
                  v193 = v189 + v192++;
                  v189 = v193 & v176;
                  v191 = *(_QWORD *)(v19 + 16 * v189);
                  if (v188 == v191)
                  {
                    v190 = (uint64_t *)(v19 + 16 * v189);
                    goto LABEL_243;
                  }
                }
              }
              v194 = 0;
LABEL_246:
              if (v187 == v194)
                goto LABEL_249;
              result = (uint64_t *)*(unsigned int *)(v187 + 72);
              v195 = *(_DWORD *)(v194 + 72);
LABEL_251:
              if (result < v195)
                goto LABEL_292;
            }
          }
          v11 = v9 + 1;
          if (v9 + 1 < a2)
          {
            v200 = v20 - 1;
            v201 = (v31 ^ (v21 >> 9)) & (v20 - 1);
            v202 = (uint64_t *)(v19 + 16 * v201);
            v203 = (uint64_t *)(v19 + 16 * v20);
            while (1)
            {
              v204 = *v11;
              if (!(_DWORD)v20)
              {
                v211 = *(_QWORD *)(v204 + 40);
LABEL_281:
                v219 = *(__int16 *)(v211 + 18);
                if ((v219 & 0x80000000) == 0)
                {
                  v220 = *(_QWORD *)(v211 + 48);
                  if (v220 != v211 + 40)
                  {
                    v221 = 0;
                    do
                    {
                      v222 = v220 - 24;
                      if (!v220)
                        v222 = 0;
                      *(_DWORD *)(v222 + 56) = v221++;
                      v220 = *(_QWORD *)(v220 + 8);
                    }
                    while (v220 != v211 + 40);
                  }
                  *(_WORD *)(v211 + 18) = v219 | 0x8000;
                }
                result = (uint64_t *)*(unsigned int *)(v204 + 56);
                v218 = *(_DWORD *)(v17 + 56);
                goto LABEL_283;
              }
              v205 = *v202;
              v206 = (uint64_t *)(v19 + 16 * v201);
              if (v21 == *v202)
              {
LABEL_267:
                if (v206 != v203)
                {
                  v210 = v206[1];
                  goto LABEL_270;
                }
              }
              else
              {
                v207 = 1;
                LODWORD(v208) = (v31 ^ (v21 >> 9)) & v200;
                while (v205 != -4096)
                {
                  v209 = v208 + v207++;
                  v208 = v209 & v200;
                  v205 = *(_QWORD *)(v19 + 16 * v208);
                  if (v21 == v205)
                  {
                    v206 = (uint64_t *)(v19 + 16 * v208);
                    goto LABEL_267;
                  }
                }
              }
              v210 = 0;
LABEL_270:
              v211 = *(_QWORD *)(v204 + 40);
              LODWORD(v212) = ((v211 >> 4) ^ (v211 >> 9)) & v200;
              v213 = (uint64_t *)(v19 + 16 * v212);
              v214 = *v213;
              if (v211 == *v213)
              {
LABEL_275:
                if (v213 != v203)
                {
                  v217 = v213[1];
                  goto LABEL_278;
                }
              }
              else
              {
                v215 = 1;
                while (v214 != -4096)
                {
                  v216 = v212 + v215++;
                  v212 = v216 & v200;
                  v214 = *(_QWORD *)(v19 + 16 * v212);
                  if (v211 == v214)
                  {
                    v213 = (uint64_t *)(v19 + 16 * v212);
                    goto LABEL_275;
                  }
                }
              }
              v217 = 0;
LABEL_278:
              if (v210 == v217)
                goto LABEL_281;
              result = (uint64_t *)*(unsigned int *)(v210 + 72);
              v218 = *(_DWORD *)(v217 + 72);
LABEL_283:
              if (result >= v218 && ++v11 < a2)
                continue;
              break;
            }
          }
LABEL_292:
          v223 = (uint64_t **)a2;
          if (v11 < a2)
          {
            v224 = v31 ^ (v21 >> 9);
            v225 = v20 - 1;
            v226 = v224 & (v20 - 1);
            v227 = (uint64_t *)(v19 + 16 * v226);
            v228 = (uint64_t *)(v19 + 16 * v20);
            for (result = a2; ; --result)
            {
              v223 = (uint64_t **)(result - 1);
              if (!(_DWORD)v20)
              {
                v235 = *(_QWORD *)(v166 + 40);
                goto LABEL_314;
              }
              v229 = *v227;
              v230 = (uint64_t *)(v19 + 16 * v226);
              if (v21 == *v227)
              {
LABEL_300:
                if (v230 != v228)
                {
                  v234 = v230[1];
                  goto LABEL_303;
                }
              }
              else
              {
                v231 = 1;
                LODWORD(v232) = v226;
                while (v229 != -4096)
                {
                  v233 = v232 + v231++;
                  v232 = v233 & v225;
                  v229 = *(_QWORD *)(v19 + 16 * v232);
                  if (v21 == v229)
                  {
                    v230 = (uint64_t *)(v19 + 16 * v232);
                    goto LABEL_300;
                  }
                }
              }
              v234 = 0;
LABEL_303:
              v235 = *(_QWORD *)(v166 + 40);
              LODWORD(v236) = ((v235 >> 4) ^ (v235 >> 9)) & v225;
              v237 = (uint64_t *)(v19 + 16 * v236);
              v238 = *v237;
              if (v235 == *v237)
              {
LABEL_308:
                if (v237 != v228)
                {
                  v241 = v237[1];
                  goto LABEL_311;
                }
              }
              else
              {
                v239 = 1;
                while (v238 != -4096)
                {
                  v240 = v236 + v239++;
                  v236 = v240 & v225;
                  v238 = *(_QWORD *)(v19 + 16 * v236);
                  if (v235 == v238)
                  {
                    v237 = (uint64_t *)(v19 + 16 * v236);
                    goto LABEL_308;
                  }
                }
              }
              v241 = 0;
LABEL_311:
              if (v234 != v241)
              {
                v242 = *(_DWORD *)(v234 + 72);
                v243 = *(_DWORD *)(v241 + 72);
                goto LABEL_316;
              }
LABEL_314:
              v244 = *(__int16 *)(v235 + 18);
              if ((v244 & 0x80000000) == 0)
              {
                v245 = *(_QWORD *)(v235 + 48);
                if (v245 != v235 + 40)
                {
                  v246 = 0;
                  do
                  {
                    v247 = v245 - 24;
                    if (!v245)
                      v247 = 0;
                    *(_DWORD *)(v247 + 56) = v246++;
                    v245 = *(_QWORD *)(v245 + 8);
                  }
                  while (v245 != v235 + 40);
                }
                *(_WORD *)(v235 + 18) = v244 | 0x8000;
              }
              v242 = *(_DWORD *)(v166 + 56);
              v243 = *(_DWORD *)(v17 + 56);
LABEL_316:
              if (v242 >= v243)
                break;
              v166 = *(result - 2);
            }
          }
          if (v11 >= (uint64_t *)v223)
            goto LABEL_387;
          v248 = *v11;
          result = *v223;
          do
          {
            *v11 = (uint64_t)result;
            *v223 = (uint64_t *)v248;
            v249 = *(_QWORD *)(*(_QWORD *)a3 + 1960);
            v250 = *(_QWORD *)(v17 + 40);
            v251 = *(_QWORD *)(v249 + 24);
            v252 = *(unsigned int *)(v249 + 40);
            v253 = v252 - 1;
            v254 = ((v250 >> 4) ^ (v250 >> 9)) & (v252 - 1);
            v255 = (uint64_t *)(v251 + 16 * v254);
            v256 = (uint64_t *)(v251 + 16 * v252);
            do
            {
              v257 = v11[1];
              ++v11;
              v248 = v257;
              if (!(_DWORD)v252)
              {
                v264 = *(_QWORD *)(v248 + 40);
                goto LABEL_347;
              }
              v258 = *v255;
              v259 = (uint64_t *)(v251 + 16 * v254);
              if (v250 == *v255)
              {
LABEL_333:
                if (v259 != v256)
                {
                  v263 = v259[1];
                  goto LABEL_336;
                }
              }
              else
              {
                v260 = 1;
                LODWORD(v261) = ((v250 >> 4) ^ (v250 >> 9)) & (v252 - 1);
                while (v258 != -4096)
                {
                  v262 = v261 + v260++;
                  v261 = v262 & v253;
                  v258 = *(_QWORD *)(v251 + 16 * v261);
                  if (v250 == v258)
                  {
                    v259 = (uint64_t *)(v251 + 16 * v261);
                    goto LABEL_333;
                  }
                }
              }
              v263 = 0;
LABEL_336:
              v264 = *(_QWORD *)(v248 + 40);
              LODWORD(v265) = ((v264 >> 4) ^ (v264 >> 9)) & v253;
              v266 = (uint64_t *)(v251 + 16 * v265);
              v267 = *v266;
              if (v264 == *v266)
              {
LABEL_341:
                if (v266 != v256)
                {
                  v270 = v266[1];
                  goto LABEL_344;
                }
              }
              else
              {
                v268 = 1;
                while (v267 != -4096)
                {
                  v269 = v265 + v268++;
                  v265 = v269 & v253;
                  v267 = *(_QWORD *)(v251 + 16 * v265);
                  if (v264 == v267)
                  {
                    v266 = (uint64_t *)(v251 + 16 * v265);
                    goto LABEL_341;
                  }
                }
              }
              v270 = 0;
LABEL_344:
              if (v263 != v270)
              {
                v271 = *(_DWORD *)(v263 + 72);
                v272 = *(_DWORD *)(v270 + 72);
                continue;
              }
LABEL_347:
              v273 = *(__int16 *)(v264 + 18);
              if ((v273 & 0x80000000) == 0)
              {
                v274 = *(_QWORD *)(v264 + 48);
                if (v274 != v264 + 40)
                {
                  v275 = 0;
                  do
                  {
                    v276 = v274 - 24;
                    if (!v274)
                      v276 = 0;
                    *(_DWORD *)(v276 + 56) = v275++;
                    v274 = *(_QWORD *)(v274 + 8);
                  }
                  while (v274 != v264 + 40);
                }
                *(_WORD *)(v264 + 18) = v273 | 0x8000;
              }
              v271 = *(_DWORD *)(v248 + 56);
              v272 = *(_DWORD *)(v17 + 56);
            }
            while (v271 >= v272);
            do
            {
              v280 = *--v223;
              result = v280;
              if (!(_DWORD)v252)
              {
                v287 = result[5];
                goto LABEL_383;
              }
              v281 = *v255;
              v282 = (uint64_t *)(v251 + 16 * v254);
              if (v250 == *v255)
              {
LABEL_369:
                if (v282 != v256)
                {
                  v286 = v282[1];
                  goto LABEL_372;
                }
              }
              else
              {
                v283 = 1;
                LODWORD(v284) = ((v250 >> 4) ^ (v250 >> 9)) & (v252 - 1);
                while (v281 != -4096)
                {
                  v285 = v284 + v283++;
                  v284 = v285 & v253;
                  v281 = *(_QWORD *)(v251 + 16 * v284);
                  if (v250 == v281)
                  {
                    v282 = (uint64_t *)(v251 + 16 * v284);
                    goto LABEL_369;
                  }
                }
              }
              v286 = 0;
LABEL_372:
              v287 = result[5];
              LODWORD(v288) = ((v287 >> 4) ^ (v287 >> 9)) & v253;
              v289 = (uint64_t *)(v251 + 16 * v288);
              v290 = *v289;
              if (v287 == *v289)
              {
LABEL_377:
                if (v289 != v256)
                {
                  v293 = v289[1];
                  goto LABEL_380;
                }
              }
              else
              {
                v291 = 1;
                while (v290 != -4096)
                {
                  v292 = v288 + v291++;
                  v288 = v292 & v253;
                  v290 = *(_QWORD *)(v251 + 16 * v288);
                  if (v287 == v290)
                  {
                    v289 = (uint64_t *)(v251 + 16 * v288);
                    goto LABEL_377;
                  }
                }
              }
              v293 = 0;
LABEL_380:
              if (v286 != v293)
              {
                v294 = *(_DWORD *)(v286 + 72);
                v295 = *(_DWORD *)(v293 + 72);
                continue;
              }
LABEL_383:
              v296 = *(__int16 *)(v287 + 18);
              if ((v296 & 0x80000000) == 0)
              {
                v277 = *(_QWORD *)(v287 + 48);
                if (v277 != v287 + 40)
                {
                  v278 = 0;
                  do
                  {
                    v279 = v277 - 24;
                    if (!v277)
                      v279 = 0;
                    *(_DWORD *)(v279 + 56) = v278++;
                    v277 = *(_QWORD *)(v277 + 8);
                  }
                  while (v277 != v287 + 40);
                }
                *(_WORD *)(v287 + 18) = v296 | 0x8000;
              }
              v294 = *((_DWORD *)result + 14);
              v295 = *(_DWORD *)(v17 + 56);
            }
            while (v294 < v295);
          }
          while (v11 < (uint64_t *)v223);
LABEL_387:
          v297 = v11 - 1;
          if (v11 - 1 != v9)
            *v9 = *v297;
          a5 = 0;
          *v297 = v17;
          continue;
        }
        v20 = *(_QWORD *)(v18 + 1960);
        v19 = *(_QWORD *)(v20 + 24);
        LODWORD(v20) = *(_DWORD *)(v20 + 40);
        v21 = *(_QWORD *)(v17 + 40);
LABEL_33:
        v37 = v20 - 1;
        v38 = (uint64_t *)(v19 + 16 * v20);
        v39 = ((v21 >> 4) ^ (v21 >> 9)) & (v20 - 1);
        v40 = (uint64_t *)(v19 + 16 * v39);
        v41 = v21 + 40;
        v42 = v9;
        do
        {
          v43 = v42;
          v45 = v42[1];
          ++v42;
          v44 = v45;
          if (!(_DWORD)v20)
            goto LABEL_53;
          v46 = *(_QWORD *)(v44 + 40);
          LODWORD(v47) = ((v46 >> 4) ^ (v46 >> 9)) & v37;
          v48 = (uint64_t *)(v19 + 16 * v47);
          v49 = *v48;
          if (v46 == *v48)
          {
LABEL_40:
            if (v48 != v38)
            {
              v52 = v48[1];
              goto LABEL_43;
            }
          }
          else
          {
            v50 = 1;
            while (v49 != -4096)
            {
              v51 = v47 + v50++;
              v47 = v51 & v37;
              v49 = *(_QWORD *)(v19 + 16 * v47);
              if (v46 == v49)
              {
                v48 = (uint64_t *)(v19 + 16 * v47);
                goto LABEL_40;
              }
            }
          }
          v52 = 0;
LABEL_43:
          v53 = *v40;
          v54 = (uint64_t *)(v19 + 16 * v39);
          if (v21 == *v40)
          {
LABEL_48:
            if (v54 != v38)
            {
              v58 = v54[1];
              goto LABEL_51;
            }
          }
          else
          {
            v55 = 1;
            LODWORD(v56) = ((v21 >> 4) ^ (v21 >> 9)) & v37;
            while (v53 != -4096)
            {
              v57 = v56 + v55++;
              v56 = v57 & v37;
              v53 = *(_QWORD *)(v19 + 16 * v56);
              if (v21 == v53)
              {
                v54 = (uint64_t *)(v19 + 16 * v56);
                goto LABEL_48;
              }
            }
          }
          v58 = 0;
LABEL_51:
          if (v52 != v58)
          {
            v59 = *(_DWORD *)(v52 + 72);
            v60 = *(_DWORD *)(v58 + 72);
            continue;
          }
LABEL_53:
          v61 = *(__int16 *)(v21 + 18);
          if ((v61 & 0x80000000) == 0)
          {
            v62 = *(_QWORD *)(v21 + 48);
            if (v62 != v41)
            {
              v63 = 0;
              do
              {
                v64 = v62 - 24;
                if (!v62)
                  v64 = 0;
                *(_DWORD *)(v64 + 56) = v63++;
                v62 = *(_QWORD *)(v62 + 8);
              }
              while (v62 != v41);
            }
            *(_WORD *)(v21 + 18) = v61 | 0x8000;
          }
          v59 = *(_DWORD *)(v17 + 56);
          v60 = *(_DWORD *)(v44 + 56);
        }
        while (v59 < v60);
        v65 = a2;
        if (v43 != v9)
        {
          while (2)
          {
            while (1)
            {
              v67 = *--v65;
              v66 = v67;
              if ((_DWORD)v20)
                break;
LABEL_84:
              v81 = *(__int16 *)(v21 + 18);
              if ((v81 & 0x80000000) == 0)
              {
                v82 = *(_QWORD *)(v21 + 48);
                if (v82 != v41)
                {
                  v83 = 0;
                  do
                  {
                    v84 = v82 - 24;
                    if (!v82)
                      v84 = 0;
                    *(_DWORD *)(v84 + 56) = v83++;
                    v82 = *(_QWORD *)(v82 + 8);
                  }
                  while (v82 != v41);
                }
                *(_WORD *)(v21 + 18) = v81 | 0x8000;
              }
              if (*(_DWORD *)(v17 + 56) < *(_DWORD *)(v66 + 56))
                goto LABEL_126;
            }
            v68 = *(_QWORD *)(v66 + 40);
            LODWORD(v69) = ((v68 >> 4) ^ (v68 >> 9)) & v37;
            v70 = (uint64_t *)(v19 + 16 * v69);
            v71 = *v70;
            if (v68 == *v70)
            {
LABEL_70:
              if (v70 == v38)
                goto LABEL_72;
              v74 = v70[1];
            }
            else
            {
              v72 = 1;
              while (v71 != -4096)
              {
                v73 = v69 + v72++;
                v69 = v73 & v37;
                v71 = *(_QWORD *)(v19 + 16 * v69);
                if (v68 == v71)
                {
                  v70 = (uint64_t *)(v19 + 16 * v69);
                  goto LABEL_70;
                }
              }
LABEL_72:
              v74 = 0;
            }
            v75 = *v40;
            v76 = (uint64_t *)(v19 + 16 * v39);
            if (v21 == *v40)
            {
LABEL_78:
              if (v76 == v38)
                goto LABEL_80;
              v80 = v76[1];
            }
            else
            {
              v77 = 1;
              LODWORD(v78) = ((v21 >> 4) ^ (v21 >> 9)) & v37;
              while (v75 != -4096)
              {
                v79 = v78 + v77++;
                v78 = v79 & v37;
                v75 = *(_QWORD *)(v19 + 16 * v78);
                if (v21 == v75)
                {
                  v76 = (uint64_t *)(v19 + 16 * v78);
                  goto LABEL_78;
                }
              }
LABEL_80:
              v80 = 0;
            }
            if (v74 == v80)
              goto LABEL_84;
            if (*(_DWORD *)(v74 + 72) < *(_DWORD *)(v80 + 72))
              goto LABEL_126;
            continue;
          }
        }
        v65 = a2;
        if (v42 < a2)
        {
          v65 = a2;
          while (2)
          {
            while (1)
            {
              v86 = *--v65;
              v85 = v86;
              if ((_DWORD)v20)
                break;
LABEL_116:
              v100 = *(__int16 *)(v21 + 18);
              if ((v100 & 0x80000000) == 0)
              {
                v101 = *(_QWORD *)(v21 + 48);
                if (v101 != v41)
                {
                  v102 = 0;
                  do
                  {
                    v103 = v101 - 24;
                    if (!v101)
                      v103 = 0;
                    *(_DWORD *)(v103 + 56) = v102++;
                    v101 = *(_QWORD *)(v101 + 8);
                  }
                  while (v101 != v41);
                }
                *(_WORD *)(v21 + 18) = v100 | 0x8000;
              }
              if (v42 >= v65 || *(_DWORD *)(v17 + 56) < *(_DWORD *)(v85 + 56))
                goto LABEL_126;
            }
            v87 = *(_QWORD *)(v85 + 40);
            LODWORD(v88) = ((v87 >> 4) ^ (v87 >> 9)) & v37;
            v89 = (uint64_t *)(v19 + 16 * v88);
            v90 = *v89;
            if (v87 == *v89)
            {
LABEL_101:
              if (v89 == v38)
                goto LABEL_103;
              v93 = v89[1];
            }
            else
            {
              v91 = 1;
              while (v90 != -4096)
              {
                v92 = v88 + v91++;
                v88 = v92 & v37;
                v90 = *(_QWORD *)(v19 + 16 * v88);
                if (v87 == v90)
                {
                  v89 = (uint64_t *)(v19 + 16 * v88);
                  goto LABEL_101;
                }
              }
LABEL_103:
              v93 = 0;
            }
            v94 = *v40;
            v95 = (uint64_t *)(v19 + 16 * v39);
            if (v21 == *v40)
            {
LABEL_109:
              if (v95 == v38)
                goto LABEL_111;
              v99 = v95[1];
            }
            else
            {
              v96 = 1;
              LODWORD(v97) = ((v21 >> 4) ^ (v21 >> 9)) & v37;
              while (v94 != -4096)
              {
                v98 = v97 + v96++;
                v97 = v98 & v37;
                v94 = *(_QWORD *)(v19 + 16 * v97);
                if (v21 == v94)
                {
                  v95 = (uint64_t *)(v19 + 16 * v97);
                  goto LABEL_109;
                }
              }
LABEL_111:
              v99 = 0;
            }
            if (v93 == v99)
              goto LABEL_116;
            if (v42 >= v65 || *(_DWORD *)(v93 + 72) < *(_DWORD *)(v99 + 72))
              break;
            continue;
          }
        }
LABEL_126:
        if (v42 >= v65)
        {
          v11 = v42;
          goto LABEL_189;
        }
        v104 = *v65;
        v11 = v42;
        v105 = v65;
        while (2)
        {
          *v11 = v104;
          *v105 = v44;
          v106 = *(_QWORD *)(*(_QWORD *)a3 + 1960);
          v107 = *(_QWORD *)(v106 + 24);
          v108 = *(unsigned int *)(v106 + 40);
          v109 = *(_QWORD *)(v17 + 40);
          v110 = v108 - 1;
          v111 = (uint64_t *)(v107 + 16 * v108);
          v112 = ((v109 >> 4) ^ (v109 >> 9)) & (v108 - 1);
          v113 = (uint64_t *)(v107 + 16 * v112);
          v114 = v109 + 40;
          while (2)
          {
            v115 = v11[1];
            ++v11;
            v44 = v115;
            if (!(_DWORD)v108)
              goto LABEL_148;
            v116 = *(_QWORD *)(v44 + 40);
            LODWORD(v117) = ((v116 >> 4) ^ (v116 >> 9)) & v110;
            v118 = (uint64_t *)(v107 + 16 * v117);
            v119 = *v118;
            if (v116 == *v118)
            {
LABEL_135:
              if (v118 == v111)
                goto LABEL_137;
              v122 = v118[1];
            }
            else
            {
              v120 = 1;
              while (v119 != -4096)
              {
                v121 = v117 + v120++;
                v117 = v121 & v110;
                v119 = *(_QWORD *)(v107 + 16 * v117);
                if (v116 == v119)
                {
                  v118 = (uint64_t *)(v107 + 16 * v117);
                  goto LABEL_135;
                }
              }
LABEL_137:
              v122 = 0;
            }
            v123 = *v113;
            v124 = (uint64_t *)(v107 + 16 * v112);
            if (v109 == *v113)
            {
LABEL_143:
              if (v124 == v111)
                goto LABEL_145;
              v128 = v124[1];
            }
            else
            {
              v125 = 1;
              LODWORD(v126) = ((v109 >> 4) ^ (v109 >> 9)) & (v108 - 1);
              while (v123 != -4096)
              {
                v127 = v126 + v125++;
                v126 = v127 & v110;
                v123 = *(_QWORD *)(v107 + 16 * v126);
                if (v109 == v123)
                {
                  v124 = (uint64_t *)(v107 + 16 * v126);
                  goto LABEL_143;
                }
              }
LABEL_145:
              v128 = 0;
            }
            if (v122 == v128)
            {
LABEL_148:
              v131 = *(__int16 *)(v109 + 18);
              if ((v131 & 0x80000000) == 0)
              {
                v132 = *(_QWORD *)(v109 + 48);
                if (v132 != v114)
                {
                  v133 = 0;
                  do
                  {
                    v134 = v132 - 24;
                    if (!v132)
                      v134 = 0;
                    *(_DWORD *)(v134 + 56) = v133++;
                    v132 = *(_QWORD *)(v132 + 8);
                  }
                  while (v132 != v114);
                }
                *(_WORD *)(v109 + 18) = v131 | 0x8000;
              }
              v129 = *(_DWORD *)(v17 + 56);
              v130 = *(_DWORD *)(v44 + 56);
            }
            else
            {
              v129 = *(_DWORD *)(v122 + 72);
              v130 = *(_DWORD *)(v128 + 72);
            }
            if (v129 < v130)
              continue;
            break;
          }
          while (2)
          {
            v138 = *--v105;
            v104 = v138;
            if (!(_DWORD)v108)
              goto LABEL_183;
            v139 = *(_QWORD *)(v104 + 40);
            LODWORD(v140) = ((v139 >> 4) ^ (v139 >> 9)) & v110;
            v141 = (uint64_t *)(v107 + 16 * v140);
            v142 = *v141;
            if (v139 == *v141)
            {
LABEL_170:
              if (v141 == v111)
                goto LABEL_172;
              v145 = v141[1];
            }
            else
            {
              v143 = 1;
              while (v142 != -4096)
              {
                v144 = v140 + v143++;
                v140 = v144 & v110;
                v142 = *(_QWORD *)(v107 + 16 * v140);
                if (v139 == v142)
                {
                  v141 = (uint64_t *)(v107 + 16 * v140);
                  goto LABEL_170;
                }
              }
LABEL_172:
              v145 = 0;
            }
            v146 = *v113;
            v147 = (uint64_t *)(v107 + 16 * v112);
            if (v109 == *v113)
            {
LABEL_178:
              if (v147 == v111)
                goto LABEL_180;
              v151 = v147[1];
            }
            else
            {
              v148 = 1;
              LODWORD(v149) = ((v109 >> 4) ^ (v109 >> 9)) & (v108 - 1);
              while (v146 != -4096)
              {
                v150 = v149 + v148++;
                v149 = v150 & v110;
                v146 = *(_QWORD *)(v107 + 16 * v149);
                if (v109 == v146)
                {
                  v147 = (uint64_t *)(v107 + 16 * v149);
                  goto LABEL_178;
                }
              }
LABEL_180:
              v151 = 0;
            }
            if (v145 == v151)
            {
LABEL_183:
              v154 = *(__int16 *)(v109 + 18);
              if ((v154 & 0x80000000) == 0)
              {
                v135 = *(_QWORD *)(v109 + 48);
                if (v135 != v114)
                {
                  v136 = 0;
                  do
                  {
                    v137 = v135 - 24;
                    if (!v135)
                      v137 = 0;
                    *(_DWORD *)(v137 + 56) = v136++;
                    v135 = *(_QWORD *)(v135 + 8);
                  }
                  while (v135 != v114);
                }
                *(_WORD *)(v109 + 18) = v154 | 0x8000;
              }
              v152 = *(_DWORD *)(v17 + 56);
              v153 = *(_DWORD *)(v104 + 56);
            }
            else
            {
              v152 = *(_DWORD *)(v145 + 72);
              v153 = *(_DWORD *)(v151 + 72);
            }
            if (v152 >= v153)
              continue;
            break;
          }
          if (v11 < v105)
            continue;
          break;
        }
LABEL_189:
        v155 = v11 - 1;
        if (v11 - 1 != v9)
          *v9 = *v155;
        *v155 = v17;
        if (v42 < v65)
        {
LABEL_194:
          result = (uint64_t *)sub_1C60B01FC(v9, v11 - 1, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v156 = sub_1C60B3510(v9, v11 - 1, a3);
        result = (uint64_t *)sub_1C60B3510(v11, a2, a3);
        if (!(_DWORD)result)
        {
          if (v156)
            continue;
          goto LABEL_194;
        }
        a2 = v11 - 1;
        if (!v156)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1C60B2DE8(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;

  v4 = *a2;
  v5 = *result;
  v6 = *(_QWORD *)(*(_QWORD *)a4 + 1960);
  v7 = *(_QWORD *)(*a2 + 40);
  v8 = *(_QWORD *)(v6 + 24);
  v9 = *(unsigned int *)(v6 + 40);
  v10 = v7 >> 4;
  if ((_DWORD)v9)
  {
    LODWORD(v11) = (v10 ^ (v7 >> 9)) & (v9 - 1);
    v12 = (uint64_t *)(v8 + 16 * v11);
    v13 = *v12;
    if (v7 == *v12)
      goto LABEL_8;
    v14 = 1;
    while (v13 != -4096)
    {
      v15 = v11 + v14++;
      v11 = v15 & (v9 - 1);
      v13 = *(_QWORD *)(v8 + 16 * v11);
      if (v7 == v13)
      {
        v12 = (uint64_t *)(v8 + 16 * v11);
        goto LABEL_8;
      }
    }
  }
  v12 = (uint64_t *)(v8 + 16 * v9);
LABEL_8:
  if (v12 == (uint64_t *)(v8 + 16 * v9))
    v16 = 0;
  else
    v16 = v12[1];
  v17 = *(_QWORD *)(v5 + 40);
  if ((_DWORD)v9)
  {
    LODWORD(v18) = ((v17 >> 4) ^ (v17 >> 9)) & (v9 - 1);
    v19 = (uint64_t *)(v8 + 16 * v18);
    v20 = *v19;
    if (v17 == *v19)
      goto LABEL_18;
    v21 = 1;
    while (v20 != -4096)
    {
      v22 = v18 + v21++;
      v18 = v22 & (v9 - 1);
      v20 = *(_QWORD *)(v8 + 16 * v18);
      if (v17 == v20)
      {
        v19 = (uint64_t *)(v8 + 16 * v18);
        goto LABEL_18;
      }
    }
  }
  v19 = (uint64_t *)(v8 + 16 * v9);
LABEL_18:
  if (v19 == (uint64_t *)(v8 + 16 * v9))
    v23 = 0;
  else
    v23 = v19[1];
  if (v16 == v23)
  {
    v26 = *(__int16 *)(v17 + 18);
    if ((v26 & 0x80000000) == 0)
    {
      v100 = *(_QWORD *)(v17 + 48);
      if (v100 != v17 + 40)
      {
        v101 = 0;
        do
        {
          v102 = v100 - 24;
          if (!v100)
            v102 = 0;
          *(_DWORD *)(v102 + 56) = v101++;
          v100 = *(_QWORD *)(v100 + 8);
        }
        while (v100 != v17 + 40);
      }
      *(_WORD *)(v17 + 18) = v26 | 0x8000;
    }
    v24 = *(_DWORD *)(v5 + 56);
    v25 = *(_DWORD *)(v4 + 56);
  }
  else
  {
    v24 = *(_DWORD *)(v16 + 72);
    v25 = *(_DWORD *)(v23 + 72);
  }
  if (v24 >= v25)
  {
    v34 = *a3;
    if ((_DWORD)v9)
    {
      v35 = *(_QWORD *)(v34 + 40);
      LODWORD(v36) = ((v35 >> 4) ^ (v35 >> 9)) & (v9 - 1);
      v37 = (uint64_t *)(v8 + 16 * v36);
      v38 = *v37;
      if (v35 == *v37)
        goto LABEL_49;
      v39 = 1;
      while (v38 != -4096)
      {
        v40 = v36 + v39++;
        v36 = v40 & (v9 - 1);
        v38 = *(_QWORD *)(v8 + 16 * v36);
        if (v35 == v38)
        {
          v37 = (uint64_t *)(v8 + 16 * v36);
          goto LABEL_49;
        }
      }
    }
    v37 = (uint64_t *)(v8 + 16 * v9);
LABEL_49:
    if (v37 == (uint64_t *)(v8 + 16 * v9))
    {
      v47 = 0;
      if (!(_DWORD)v9)
        goto LABEL_74;
    }
    else
    {
      v47 = v37[1];
      if (!(_DWORD)v9)
        goto LABEL_74;
    }
    LODWORD(v48) = (v10 ^ (v7 >> 9)) & (v9 - 1);
    v49 = (uint64_t *)(v8 + 16 * v48);
    v50 = *v49;
    if (v7 == *v49)
      goto LABEL_75;
    v51 = 1;
    while (v50 != -4096)
    {
      v52 = v48 + v51++;
      v48 = v52 & (v9 - 1);
      v50 = *(_QWORD *)(v8 + 16 * v48);
      if (v7 == v50)
      {
        v49 = (uint64_t *)(v8 + 16 * v48);
        goto LABEL_75;
      }
    }
LABEL_74:
    v49 = (uint64_t *)(v8 + 16 * v9);
LABEL_75:
    if (v49 == (uint64_t *)(v8 + 16 * v9))
      v67 = 0;
    else
      v67 = v49[1];
    if (v47 == v67)
    {
      v70 = *(__int16 *)(v7 + 18);
      if ((v70 & 0x80000000) == 0)
      {
        v106 = *(_QWORD *)(v7 + 48);
        if (v106 != v7 + 40)
        {
          v107 = 0;
          do
          {
            v108 = v106 - 24;
            if (!v106)
              v108 = 0;
            *(_DWORD *)(v108 + 56) = v107++;
            v106 = *(_QWORD *)(v106 + 8);
          }
          while (v106 != v7 + 40);
        }
        *(_WORD *)(v7 + 18) = v70 | 0x8000;
      }
      v68 = *(_DWORD *)(v4 + 56);
      v69 = *(_DWORD *)(v34 + 56);
    }
    else
    {
      v68 = *(_DWORD *)(v47 + 72);
      v69 = *(_DWORD *)(v67 + 72);
    }
    if (v68 >= v69)
      return result;
    *a2 = v34;
    *a3 = v4;
    v71 = *a2;
    v72 = *result;
    v73 = *(_QWORD *)(*(_QWORD *)a4 + 1960);
    v74 = *(_QWORD *)(v73 + 24);
    v75 = *(unsigned int *)(v73 + 40);
    if ((_DWORD)v75)
    {
      v76 = *(_QWORD *)(v71 + 40);
      LODWORD(v77) = ((v76 >> 4) ^ (v76 >> 9)) & (v75 - 1);
      v78 = (uint64_t *)(v74 + 16 * v77);
      v79 = *v78;
      if (v76 == *v78)
        goto LABEL_100;
      v80 = 1;
      while (v79 != -4096)
      {
        v81 = v77 + v80++;
        v77 = v81 & (v75 - 1);
        v79 = *(_QWORD *)(v74 + 16 * v77);
        if (v76 == v79)
        {
          v78 = (uint64_t *)(v74 + 16 * v77);
          goto LABEL_100;
        }
      }
    }
    v78 = (uint64_t *)(v74 + 16 * v75);
LABEL_100:
    if (v78 == (uint64_t *)(v74 + 16 * v75))
      v89 = 0;
    else
      v89 = v78[1];
    v90 = *(_QWORD *)(v72 + 40);
    if ((_DWORD)v75)
    {
      LODWORD(v91) = ((v90 >> 4) ^ (v90 >> 9)) & (v75 - 1);
      v92 = (uint64_t *)(v74 + 16 * v91);
      v93 = *v92;
      if (v90 == *v92)
        goto LABEL_121;
      v94 = 1;
      while (v93 != -4096)
      {
        v95 = v91 + v94++;
        v91 = v95 & (v75 - 1);
        v93 = *(_QWORD *)(v74 + 16 * v91);
        if (v90 == v93)
        {
          v92 = (uint64_t *)(v74 + 16 * v91);
          goto LABEL_121;
        }
      }
    }
    v92 = (uint64_t *)(v74 + 16 * v75);
LABEL_121:
    if (v92 == (uint64_t *)(v74 + 16 * v75))
      v98 = 0;
    else
      v98 = v92[1];
    if (v89 == v98)
    {
      v99 = *(__int16 *)(v90 + 18);
      if ((v99 & 0x80000000) == 0)
      {
        v112 = *(_QWORD *)(v90 + 48);
        if (v112 != v90 + 40)
        {
          v113 = 0;
          do
          {
            v114 = v112 - 24;
            if (!v112)
              v114 = 0;
            *(_DWORD *)(v114 + 56) = v113++;
            v112 = *(_QWORD *)(v112 + 8);
          }
          while (v112 != v90 + 40);
        }
        *(_WORD *)(v90 + 18) = v99 | 0x8000;
      }
      if (*(_DWORD *)(v72 + 56) >= *(_DWORD *)(v71 + 56))
        return result;
    }
    else if (*(_DWORD *)(v89 + 72) >= *(_DWORD *)(v98 + 72))
    {
      return result;
    }
    *result = v71;
    *a2 = v72;
    return result;
  }
  v27 = *a3;
  if ((_DWORD)v9)
  {
    v28 = *(_QWORD *)(v27 + 40);
    LODWORD(v29) = ((v28 >> 4) ^ (v28 >> 9)) & (v9 - 1);
    v30 = (uint64_t *)(v8 + 16 * v29);
    v31 = *v30;
    if (v28 == *v30)
      goto LABEL_39;
    v32 = 1;
    while (v31 != -4096)
    {
      v33 = v29 + v32++;
      v29 = v33 & (v9 - 1);
      v31 = *(_QWORD *)(v8 + 16 * v29);
      if (v28 == v31)
      {
        v30 = (uint64_t *)(v8 + 16 * v29);
        goto LABEL_39;
      }
    }
  }
  v30 = (uint64_t *)(v8 + 16 * v9);
LABEL_39:
  if (v30 == (uint64_t *)(v8 + 16 * v9))
  {
    v41 = 0;
    if (!(_DWORD)v9)
      goto LABEL_58;
  }
  else
  {
    v41 = v30[1];
    if (!(_DWORD)v9)
      goto LABEL_58;
  }
  LODWORD(v42) = (v10 ^ (v7 >> 9)) & (v9 - 1);
  v43 = (uint64_t *)(v8 + 16 * v42);
  v44 = *v43;
  if (v7 == *v43)
    goto LABEL_59;
  v45 = 1;
  while (v44 != -4096)
  {
    v46 = v42 + v45++;
    v42 = v46 & (v9 - 1);
    v44 = *(_QWORD *)(v8 + 16 * v42);
    if (v7 == v44)
    {
      v43 = (uint64_t *)(v8 + 16 * v42);
      goto LABEL_59;
    }
  }
LABEL_58:
  v43 = (uint64_t *)(v8 + 16 * v9);
LABEL_59:
  if (v43 == (uint64_t *)(v8 + 16 * v9))
    v53 = 0;
  else
    v53 = v43[1];
  if (v41 == v53)
  {
    v56 = *(__int16 *)(v7 + 18);
    if ((v56 & 0x80000000) == 0)
    {
      v103 = *(_QWORD *)(v7 + 48);
      if (v103 != v7 + 40)
      {
        v104 = 0;
        do
        {
          v105 = v103 - 24;
          if (!v103)
            v105 = 0;
          *(_DWORD *)(v105 + 56) = v104++;
          v103 = *(_QWORD *)(v103 + 8);
        }
        while (v103 != v7 + 40);
      }
      *(_WORD *)(v7 + 18) = v56 | 0x8000;
    }
    v54 = *(_DWORD *)(v4 + 56);
    v55 = *(_DWORD *)(v27 + 56);
  }
  else
  {
    v54 = *(_DWORD *)(v41 + 72);
    v55 = *(_DWORD *)(v53 + 72);
  }
  if (v54 < v55)
  {
    *result = v27;
LABEL_119:
    *a3 = v5;
    return result;
  }
  *result = v4;
  *a2 = v5;
  v57 = *a3;
  v58 = *(_QWORD *)(*(_QWORD *)a4 + 1960);
  v59 = *(_QWORD *)(v58 + 24);
  v60 = *(unsigned int *)(v58 + 40);
  if ((_DWORD)v60)
  {
    v61 = *(_QWORD *)(v57 + 40);
    LODWORD(v62) = ((v61 >> 4) ^ (v61 >> 9)) & (v60 - 1);
    v63 = (uint64_t *)(v59 + 16 * v62);
    v64 = *v63;
    if (v61 == *v63)
      goto LABEL_90;
    v65 = 1;
    while (v64 != -4096)
    {
      v66 = v62 + v65++;
      v62 = v66 & (v60 - 1);
      v64 = *(_QWORD *)(v59 + 16 * v62);
      if (v61 == v64)
      {
        v63 = (uint64_t *)(v59 + 16 * v62);
        goto LABEL_90;
      }
    }
  }
  v63 = (uint64_t *)(v59 + 16 * v60);
LABEL_90:
  if (v63 == (uint64_t *)(v59 + 16 * v60))
    v82 = 0;
  else
    v82 = v63[1];
  v83 = *(_QWORD *)(v5 + 40);
  if (!(_DWORD)v60)
  {
LABEL_109:
    v85 = (uint64_t *)(v59 + 16 * v60);
    goto LABEL_110;
  }
  LODWORD(v84) = ((v83 >> 4) ^ (v83 >> 9)) & (v60 - 1);
  v85 = (uint64_t *)(v59 + 16 * v84);
  v86 = *v85;
  if (v83 != *v85)
  {
    v87 = 1;
    while (v86 != -4096)
    {
      v88 = v84 + v87++;
      v84 = v88 & (v60 - 1);
      v86 = *(_QWORD *)(v59 + 16 * v84);
      if (v83 == v86)
      {
        v85 = (uint64_t *)(v59 + 16 * v84);
        goto LABEL_110;
      }
    }
    goto LABEL_109;
  }
LABEL_110:
  if (v85 == (uint64_t *)(v59 + 16 * v60))
    v96 = 0;
  else
    v96 = v85[1];
  if (v82 != v96)
  {
    if (*(_DWORD *)(v82 + 72) >= *(_DWORD *)(v96 + 72))
      return result;
LABEL_118:
    *a2 = v57;
    goto LABEL_119;
  }
  v97 = *(__int16 *)(v83 + 18);
  if ((v97 & 0x80000000) == 0)
  {
    v109 = *(_QWORD *)(v83 + 48);
    if (v109 != v83 + 40)
    {
      v110 = 0;
      do
      {
        v111 = v109 - 24;
        if (!v109)
          v111 = 0;
        *(_DWORD *)(v111 + 56) = v110++;
        v109 = *(_QWORD *)(v109 + 8);
      }
      while (v109 != v83 + 40);
    }
    *(_WORD *)(v83 + 18) = v97 | 0x8000;
  }
  if (*(_DWORD *)(v5 + 56) < *(_DWORD *)(v57 + 56))
    goto LABEL_118;
  return result;
}

BOOL sub_1C60B3510(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  int v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  int v135;
  int v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  int v147;
  int v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  int v160;
  int v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      v10 = *(_QWORD *)(*(_QWORD *)a3 + 1960);
      v11 = *(_QWORD *)(v10 + 24);
      v12 = *(unsigned int *)(v10 + 40);
      if (!(_DWORD)v12)
        goto LABEL_88;
      v13 = *(_QWORD *)(v8 + 40);
      LODWORD(v14) = ((v13 >> 4) ^ (v13 >> 9)) & (v12 - 1);
      v15 = (uint64_t *)(v11 + 16 * v14);
      v16 = *v15;
      if (v13 == *v15)
        goto LABEL_89;
      v17 = 1;
      while (v16 != -4096)
      {
        v18 = v14 + v17++;
        v14 = v18 & (v12 - 1);
        v16 = *(_QWORD *)(v11 + 16 * v14);
        if (v13 == v16)
        {
          v15 = (uint64_t *)(v11 + 16 * v14);
          goto LABEL_89;
        }
      }
LABEL_88:
      v15 = (uint64_t *)(v11 + 16 * v12);
LABEL_89:
      if (v15 == (uint64_t *)(v11 + 16 * v12))
        v82 = 0;
      else
        v82 = v15[1];
      v83 = *(_QWORD *)(v9 + 40);
      if (!(_DWORD)v12)
        goto LABEL_108;
      LODWORD(v84) = ((v83 >> 4) ^ (v83 >> 9)) & (v12 - 1);
      v85 = (uint64_t *)(v11 + 16 * v84);
      v86 = *v85;
      if (v83 != *v85)
      {
        v87 = 1;
        while (v86 != -4096)
        {
          v88 = v84 + v87++;
          v84 = v88 & (v12 - 1);
          v86 = *(_QWORD *)(v11 + 16 * v84);
          if (v83 == v86)
          {
            v85 = (uint64_t *)(v11 + 16 * v84);
            goto LABEL_109;
          }
        }
LABEL_108:
        v85 = (uint64_t *)(v11 + 16 * v12);
      }
LABEL_109:
      if (v85 == (uint64_t *)(v11 + 16 * v12))
        v96 = 0;
      else
        v96 = v85[1];
      if (v82 != v96)
      {
        if (*(_DWORD *)(v82 + 72) >= *(_DWORD *)(v96 + 72))
          return 1;
        goto LABEL_117;
      }
      v97 = *(__int16 *)(v83 + 18);
      if ((v97 & 0x80000000) == 0)
      {
        v149 = *(_QWORD *)(v83 + 48);
        if (v149 != v83 + 40)
        {
          v150 = 0;
          do
          {
            v151 = v149 - 24;
            if (!v149)
              v151 = 0;
            *(_DWORD *)(v151 + 56) = v150++;
            v149 = *(_QWORD *)(v149 + 8);
          }
          while (v149 != v83 + 40);
        }
        *(_WORD *)(v83 + 18) = v97 | 0x8000;
      }
      if (*(_DWORD *)(v9 + 56) < *(_DWORD *)(v8 + 56))
      {
LABEL_117:
        *a1 = v8;
        *(a2 - 1) = v9;
        return 1;
      }
      return 1;
    case 3:
      sub_1C60B2DE8(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1C60B40A4(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v69 = a1 + 2;
      v70 = a1 + 3;
      sub_1C60B40A4(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v71 = *(a2 - 1);
      v72 = a1[3];
      v73 = *(_QWORD *)(*(_QWORD *)a3 + 1960);
      v74 = *(_QWORD *)(v73 + 24);
      v75 = *(unsigned int *)(v73 + 40);
      if (!(_DWORD)v75)
        goto LABEL_98;
      v76 = *(_QWORD *)(v71 + 40);
      LODWORD(v77) = ((v76 >> 4) ^ (v76 >> 9)) & (v75 - 1);
      v78 = (uint64_t *)(v74 + 16 * v77);
      v79 = *v78;
      if (v76 == *v78)
        goto LABEL_99;
      v80 = 1;
      while (v79 != -4096)
      {
        v81 = v77 + v80++;
        v77 = v81 & (v75 - 1);
        v79 = *(_QWORD *)(v74 + 16 * v77);
        if (v76 == v79)
        {
          v78 = (uint64_t *)(v74 + 16 * v77);
          goto LABEL_99;
        }
      }
LABEL_98:
      v78 = (uint64_t *)(v74 + 16 * v75);
LABEL_99:
      if (v78 == (uint64_t *)(v74 + 16 * v75))
        v89 = 0;
      else
        v89 = v78[1];
      v90 = *(_QWORD *)(v72 + 40);
      if (!(_DWORD)v75)
        goto LABEL_118;
      LODWORD(v91) = ((v90 >> 4) ^ (v90 >> 9)) & (v75 - 1);
      v92 = (uint64_t *)(v74 + 16 * v91);
      v93 = *v92;
      if (v90 != *v92)
      {
        v94 = 1;
        while (v93 != -4096)
        {
          v95 = v91 + v94++;
          v91 = v95 & (v75 - 1);
          v93 = *(_QWORD *)(v74 + 16 * v91);
          if (v90 == v93)
          {
            v92 = (uint64_t *)(v74 + 16 * v91);
            goto LABEL_119;
          }
        }
LABEL_118:
        v92 = (uint64_t *)(v74 + 16 * v75);
      }
LABEL_119:
      if (v92 == (uint64_t *)(v74 + 16 * v75))
        v98 = 0;
      else
        v98 = v92[1];
      if (v89 == v98)
      {
        v99 = *(__int16 *)(v90 + 18);
        if ((v99 & 0x80000000) == 0)
        {
          v152 = *(_QWORD *)(v90 + 48);
          if (v152 != v90 + 40)
          {
            v153 = 0;
            do
            {
              v154 = v152 - 24;
              if (!v152)
                v154 = 0;
              *(_DWORD *)(v154 + 56) = v153++;
              v152 = *(_QWORD *)(v152 + 8);
            }
            while (v152 != v90 + 40);
          }
          *(_WORD *)(v90 + 18) = v99 | 0x8000;
        }
        if (*(_DWORD *)(v72 + 56) >= *(_DWORD *)(v71 + 56))
          return 1;
      }
      else if (*(_DWORD *)(v89 + 72) >= *(_DWORD *)(v98 + 72))
      {
        return 1;
      }
      *v70 = v71;
      *(a2 - 1) = v72;
      v100 = *v70;
      v101 = *v69;
      v102 = *(_QWORD *)(*(_QWORD *)a3 + 1960);
      v103 = *(_QWORD *)(v102 + 24);
      v104 = *(unsigned int *)(v102 + 40);
      if (!(_DWORD)v104)
        goto LABEL_133;
      v105 = *(_QWORD *)(v100 + 40);
      LODWORD(v106) = ((v105 >> 4) ^ (v105 >> 9)) & (v104 - 1);
      v107 = (uint64_t *)(v103 + 16 * v106);
      v108 = *v107;
      if (v105 != *v107)
      {
        v109 = 1;
        while (v108 != -4096)
        {
          v110 = v106 + v109++;
          v106 = v110 & (v104 - 1);
          v108 = *(_QWORD *)(v103 + 16 * v106);
          if (v105 == v108)
          {
            v107 = (uint64_t *)(v103 + 16 * v106);
            goto LABEL_134;
          }
        }
LABEL_133:
        v107 = (uint64_t *)(v103 + 16 * v104);
      }
LABEL_134:
      if (v107 == (uint64_t *)(v103 + 16 * v104))
        v111 = 0;
      else
        v111 = v107[1];
      v112 = *(_QWORD *)(v101 + 40);
      if (!(_DWORD)v104)
        goto LABEL_143;
      LODWORD(v113) = ((v112 >> 4) ^ (v112 >> 9)) & (v104 - 1);
      v114 = (uint64_t *)(v103 + 16 * v113);
      v115 = *v114;
      if (v112 != *v114)
      {
        v116 = 1;
        while (v115 != -4096)
        {
          v117 = v113 + v116++;
          v113 = v117 & (v104 - 1);
          v115 = *(_QWORD *)(v103 + 16 * v113);
          if (v112 == v115)
          {
            v114 = (uint64_t *)(v103 + 16 * v113);
            goto LABEL_144;
          }
        }
LABEL_143:
        v114 = (uint64_t *)(v103 + 16 * v104);
      }
LABEL_144:
      if (v114 == (uint64_t *)(v103 + 16 * v104))
        v118 = 0;
      else
        v118 = v114[1];
      if (v111 == v118)
      {
        v119 = *(__int16 *)(v112 + 18);
        if ((v119 & 0x80000000) == 0)
        {
          v164 = *(_QWORD *)(v112 + 48);
          if (v164 != v112 + 40)
          {
            v165 = 0;
            do
            {
              v166 = v164 - 24;
              if (!v164)
                v166 = 0;
              *(_DWORD *)(v166 + 56) = v165++;
              v164 = *(_QWORD *)(v164 + 8);
            }
            while (v164 != v112 + 40);
          }
          *(_WORD *)(v112 + 18) = v119 | 0x8000;
        }
        if (*(_DWORD *)(v101 + 56) >= *(_DWORD *)(v100 + 56))
          return 1;
      }
      else if (*(_DWORD *)(v111 + 72) >= *(_DWORD *)(v118 + 72))
      {
        return 1;
      }
      *v69 = v100;
      *v70 = v101;
      v120 = a1[1];
      v121 = *(_QWORD *)(*(_QWORD *)a3 + 1960);
      v122 = *(_QWORD *)(v121 + 24);
      v123 = *(unsigned int *)(v121 + 40);
      if (!(_DWORD)v123)
        goto LABEL_158;
      v124 = *(_QWORD *)(v100 + 40);
      LODWORD(v125) = ((v124 >> 4) ^ (v124 >> 9)) & (v123 - 1);
      v126 = (uint64_t *)(v122 + 16 * v125);
      v127 = *v126;
      if (v124 != *v126)
      {
        v128 = 1;
        while (v127 != -4096)
        {
          v129 = v125 + v128++;
          v125 = v129 & (v123 - 1);
          v127 = *(_QWORD *)(v122 + 16 * v125);
          if (v124 == v127)
          {
            v126 = (uint64_t *)(v122 + 16 * v125);
            goto LABEL_159;
          }
        }
LABEL_158:
        v126 = (uint64_t *)(v122 + 16 * v123);
      }
LABEL_159:
      if (v126 == (uint64_t *)(v122 + 16 * v123))
        v130 = 0;
      else
        v130 = v126[1];
      v131 = *(_QWORD *)(v120 + 40);
      if (!(_DWORD)v123)
        goto LABEL_168;
      LODWORD(v132) = ((v131 >> 4) ^ (v131 >> 9)) & (v123 - 1);
      v133 = (uint64_t *)(v122 + 16 * v132);
      v134 = *v133;
      if (v131 != *v133)
      {
        v135 = 1;
        while (v134 != -4096)
        {
          v136 = v132 + v135++;
          v132 = v136 & (v123 - 1);
          v134 = *(_QWORD *)(v122 + 16 * v132);
          if (v131 == v134)
          {
            v133 = (uint64_t *)(v122 + 16 * v132);
            goto LABEL_169;
          }
        }
LABEL_168:
        v133 = (uint64_t *)(v122 + 16 * v123);
      }
LABEL_169:
      if (v133 == (uint64_t *)(v122 + 16 * v123))
        v137 = 0;
      else
        v137 = v133[1];
      if (v130 == v137)
      {
        v138 = *(__int16 *)(v131 + 18);
        if ((v138 & 0x80000000) == 0)
        {
          v167 = *(_QWORD *)(v131 + 48);
          if (v167 != v131 + 40)
          {
            v168 = 0;
            do
            {
              v169 = v167 - 24;
              if (!v167)
                v169 = 0;
              *(_DWORD *)(v169 + 56) = v168++;
              v167 = *(_QWORD *)(v167 + 8);
            }
            while (v167 != v131 + 40);
          }
          *(_WORD *)(v131 + 18) = v138 | 0x8000;
        }
        if (*(_DWORD *)(v120 + 56) >= *(_DWORD *)(v100 + 56))
          return 1;
      }
      else if (*(_DWORD *)(v130 + 72) >= *(_DWORD *)(v137 + 72))
      {
        return 1;
      }
      a1[1] = v100;
      a1[2] = v120;
      v139 = *a1;
      v140 = *(_QWORD *)(*(_QWORD *)a3 + 1960);
      v141 = *(_QWORD *)(v140 + 24);
      v142 = *(unsigned int *)(v140 + 40);
      if (!(_DWORD)v142)
        goto LABEL_195;
      v143 = *(_QWORD *)(v100 + 40);
      LODWORD(v144) = ((v143 >> 4) ^ (v143 >> 9)) & (v142 - 1);
      v145 = (uint64_t *)(v141 + 16 * v144);
      v146 = *v145;
      if (v143 != *v145)
      {
        v147 = 1;
        while (v146 != -4096)
        {
          v148 = v144 + v147++;
          v144 = v148 & (v142 - 1);
          v146 = *(_QWORD *)(v141 + 16 * v144);
          if (v143 == v146)
          {
            v145 = (uint64_t *)(v141 + 16 * v144);
            goto LABEL_196;
          }
        }
LABEL_195:
        v145 = (uint64_t *)(v141 + 16 * v142);
      }
LABEL_196:
      if (v145 == (uint64_t *)(v141 + 16 * v142))
        v155 = 0;
      else
        v155 = v145[1];
      v156 = *(_QWORD *)(v139 + 40);
      if (!(_DWORD)v142)
        goto LABEL_205;
      LODWORD(v157) = ((v156 >> 4) ^ (v156 >> 9)) & (v142 - 1);
      v158 = (uint64_t *)(v141 + 16 * v157);
      v159 = *v158;
      if (v156 != *v158)
      {
        v160 = 1;
        while (v159 != -4096)
        {
          v161 = v157 + v160++;
          v157 = v161 & (v142 - 1);
          v159 = *(_QWORD *)(v141 + 16 * v157);
          if (v156 == v159)
          {
            v158 = (uint64_t *)(v141 + 16 * v157);
            goto LABEL_206;
          }
        }
LABEL_205:
        v158 = (uint64_t *)(v141 + 16 * v142);
      }
LABEL_206:
      if (v158 == (uint64_t *)(v141 + 16 * v142))
        v162 = 0;
      else
        v162 = v158[1];
      if (v155 != v162)
      {
        if (*(_DWORD *)(v155 + 72) >= *(_DWORD *)(v162 + 72))
          return 1;
        goto LABEL_211;
      }
      v163 = *(__int16 *)(v156 + 18);
      if ((v163 & 0x80000000) == 0)
      {
        v170 = *(_QWORD *)(v156 + 48);
        if (v170 != v156 + 40)
        {
          v171 = 0;
          do
          {
            v172 = v170 - 24;
            if (!v170)
              v172 = 0;
            *(_DWORD *)(v172 + 56) = v171++;
            v170 = *(_QWORD *)(v170 + 8);
          }
          while (v170 != v156 + 40);
        }
        *(_WORD *)(v156 + 18) = v163 | 0x8000;
      }
      if (*(_DWORD *)(v139 + 56) < *(_DWORD *)(v100 + 56))
      {
LABEL_211:
        *a1 = v100;
        a1[1] = v139;
      }
      return 1;
    default:
      v19 = a1 + 2;
      sub_1C60B2DE8(a1, a1 + 1, a1 + 2, a3);
      v20 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v21 = 0;
      while (2)
      {
        v22 = *v20;
        v23 = *(_QWORD *)(*(_QWORD *)a3 + 1960);
        v24 = *(_QWORD *)(v23 + 24);
        v25 = *(unsigned int *)(v23 + 40);
        if (!(_DWORD)v25)
          goto LABEL_16;
        v26 = *(_QWORD *)(v22 + 40);
        LODWORD(v27) = ((v26 >> 4) ^ (v26 >> 9)) & (v25 - 1);
        v28 = (uint64_t *)(v24 + 16 * v27);
        v29 = *v28;
        if (v26 == *v28)
          goto LABEL_17;
        v30 = 1;
        while (v29 != -4096)
        {
          v31 = v27 + v30++;
          v27 = v31 & (v25 - 1);
          v29 = *(_QWORD *)(v24 + 16 * v27);
          if (v26 == v29)
          {
            v28 = (uint64_t *)(v24 + 16 * v27);
            goto LABEL_17;
          }
        }
LABEL_16:
        v28 = (uint64_t *)(v24 + 16 * v25);
LABEL_17:
        if (v28 == (uint64_t *)(v24 + 16 * v25))
          v32 = 0;
        else
          v32 = v28[1];
        v33 = *v19;
        v34 = *(_QWORD *)(*v19 + 40);
        if (!(_DWORD)v25)
          goto LABEL_26;
        LODWORD(v35) = ((v34 >> 4) ^ (v34 >> 9)) & (v25 - 1);
        v36 = (uint64_t *)(v24 + 16 * v35);
        v37 = *v36;
        if (v34 != *v36)
        {
          v38 = 1;
          while (v37 != -4096)
          {
            v39 = v35 + v38++;
            v35 = v39 & (v25 - 1);
            v37 = *(_QWORD *)(v24 + 16 * v35);
            if (v34 == v37)
            {
              v36 = (uint64_t *)(v24 + 16 * v35);
              goto LABEL_27;
            }
          }
LABEL_26:
          v36 = (uint64_t *)(v24 + 16 * v25);
        }
LABEL_27:
        if (v36 == (uint64_t *)(v24 + 16 * v25))
          v40 = 0;
        else
          v40 = v36[1];
        if (v32 == v40)
        {
          v41 = *(__int16 *)(v34 + 18);
          if ((v41 & 0x80000000) == 0)
          {
            v66 = *(_QWORD *)(v34 + 48);
            if (v66 != v34 + 40)
            {
              v67 = 0;
              do
              {
                v68 = v66 - 24;
                if (!v66)
                  v68 = 0;
                *(_DWORD *)(v68 + 56) = v67++;
                v66 = *(_QWORD *)(v66 + 8);
              }
              while (v66 != v34 + 40);
            }
            *(_WORD *)(v34 + 18) = v41 | 0x8000;
          }
          if (*(_DWORD *)(v33 + 56) >= *(_DWORD *)(v22 + 56))
            goto LABEL_71;
        }
        else if (*(_DWORD *)(v32 + 72) >= *(_DWORD *)(v40 + 72))
        {
          goto LABEL_71;
        }
        *v20 = v33;
        v42 = a1;
        if (v19 == a1)
          goto LABEL_70;
        while (2)
        {
          v43 = *(_QWORD *)(*(_QWORD *)a3 + 1960);
          v44 = *(_QWORD *)(v43 + 24);
          v45 = *(unsigned int *)(v43 + 40);
          if (!(_DWORD)v45)
            goto LABEL_42;
          v46 = *(_QWORD *)(v22 + 40);
          LODWORD(v47) = ((v46 >> 4) ^ (v46 >> 9)) & (v45 - 1);
          v48 = (uint64_t *)(v44 + 16 * v47);
          v49 = *v48;
          if (v46 != *v48)
          {
            v50 = 1;
            while (v49 != -4096)
            {
              v51 = v47 + v50++;
              v47 = v51 & (v45 - 1);
              v49 = *(_QWORD *)(v44 + 16 * v47);
              if (v46 == v49)
              {
                v48 = (uint64_t *)(v44 + 16 * v47);
                goto LABEL_43;
              }
            }
LABEL_42:
            v48 = (uint64_t *)(v44 + 16 * v45);
          }
LABEL_43:
          if (v48 == (uint64_t *)(v44 + 16 * v45))
            v52 = 0;
          else
            v52 = v48[1];
          v53 = v19 - 1;
          v54 = *(v19 - 1);
          v55 = *(_QWORD *)(v54 + 40);
          if (!(_DWORD)v45)
            goto LABEL_52;
          LODWORD(v56) = ((v55 >> 4) ^ (v55 >> 9)) & (v45 - 1);
          v57 = (uint64_t *)(v44 + 16 * v56);
          v58 = *v57;
          if (v55 != *v57)
          {
            v59 = 1;
            while (v58 != -4096)
            {
              v60 = v56 + v59++;
              v56 = v60 & (v45 - 1);
              v58 = *(_QWORD *)(v44 + 16 * v56);
              if (v55 == v58)
              {
                v57 = (uint64_t *)(v44 + 16 * v56);
                goto LABEL_53;
              }
            }
LABEL_52:
            v57 = (uint64_t *)(v44 + 16 * v45);
          }
LABEL_53:
          if (v57 == (uint64_t *)(v44 + 16 * v45))
            v61 = 0;
          else
            v61 = v57[1];
          if (v52 != v61)
          {
            if (*(_DWORD *)(v52 + 72) >= *(_DWORD *)(v61 + 72))
              break;
            goto LABEL_61;
          }
          v62 = *(__int16 *)(v55 + 18);
          if ((v62 & 0x80000000) == 0)
          {
            v63 = *(_QWORD *)(v55 + 48);
            if (v63 != v55 + 40)
            {
              v64 = 0;
              do
              {
                v65 = v63 - 24;
                if (!v63)
                  v65 = 0;
                *(_DWORD *)(v65 + 56) = v64++;
                v63 = *(_QWORD *)(v63 + 8);
              }
              while (v63 != v55 + 40);
            }
            *(_WORD *)(v55 + 18) = v62 | 0x8000;
          }
          if (*(_DWORD *)(v54 + 56) < *(_DWORD *)(v22 + 56))
          {
LABEL_61:
            *v19-- = v54;
            if (v53 == a1)
            {
              v42 = a1;
              goto LABEL_70;
            }
            continue;
          }
          break;
        }
        v42 = v19;
LABEL_70:
        *v42 = v22;
        if (++v21 != 8)
        {
LABEL_71:
          v19 = v20++;
          if (v20 == a2)
            return 1;
          continue;
        }
        return v20 + 1 == a2;
      }
  }
}

uint64_t *sub_1C60B40A4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;

  result = sub_1C60B2DE8(a1, a2, a3, a5);
  v11 = *a4;
  v12 = *a3;
  v13 = *(_QWORD *)(*(_QWORD *)a5 + 1960);
  v14 = *(_QWORD *)(v13 + 24);
  v15 = *(unsigned int *)(v13 + 40);
  if ((_DWORD)v15)
  {
    v16 = *(_QWORD *)(v11 + 40);
    LODWORD(v17) = ((v16 >> 4) ^ (v16 >> 9)) & (v15 - 1);
    v18 = (uint64_t *)(v14 + 16 * v17);
    v19 = *v18;
    if (v16 == *v18)
      goto LABEL_8;
    v20 = 1;
    while (v19 != -4096)
    {
      v21 = v17 + v20++;
      v17 = v21 & (v15 - 1);
      v19 = *(_QWORD *)(v14 + 16 * v17);
      if (v16 == v19)
      {
        v18 = (uint64_t *)(v14 + 16 * v17);
        goto LABEL_8;
      }
    }
  }
  v18 = (uint64_t *)(v14 + 16 * v15);
LABEL_8:
  if (v18 == (uint64_t *)(v14 + 16 * v15))
    v22 = 0;
  else
    v22 = v18[1];
  v23 = *(_QWORD *)(v12 + 40);
  if ((_DWORD)v15)
  {
    LODWORD(v24) = ((v23 >> 4) ^ (v23 >> 9)) & (v15 - 1);
    v25 = (uint64_t *)(v14 + 16 * v24);
    v26 = *v25;
    if (v23 == *v25)
      goto LABEL_18;
    v27 = 1;
    while (v26 != -4096)
    {
      v28 = v24 + v27++;
      v24 = v28 & (v15 - 1);
      v26 = *(_QWORD *)(v14 + 16 * v24);
      if (v23 == v26)
      {
        v25 = (uint64_t *)(v14 + 16 * v24);
        goto LABEL_18;
      }
    }
  }
  v25 = (uint64_t *)(v14 + 16 * v15);
LABEL_18:
  if (v25 == (uint64_t *)(v14 + 16 * v15))
    v29 = 0;
  else
    v29 = v25[1];
  if (v22 == v29)
  {
    v30 = *(__int16 *)(v23 + 18);
    if ((v30 & 0x80000000) == 0)
    {
      v71 = *(_QWORD *)(v23 + 48);
      if (v71 != v23 + 40)
      {
        v72 = 0;
        do
        {
          v73 = v71 - 24;
          if (!v71)
            v73 = 0;
          *(_DWORD *)(v73 + 56) = v72++;
          v71 = *(_QWORD *)(v71 + 8);
        }
        while (v71 != v23 + 40);
      }
      *(_WORD *)(v23 + 18) = v30 | 0x8000;
    }
    if (*(_DWORD *)(v12 + 56) >= *(_DWORD *)(v11 + 56))
      return result;
  }
  else if (*(_DWORD *)(v22 + 72) >= *(_DWORD *)(v29 + 72))
  {
    return result;
  }
  *a3 = v11;
  *a4 = v12;
  v31 = *a3;
  v32 = *a2;
  v33 = *(_QWORD *)(*(_QWORD *)a5 + 1960);
  v34 = *(_QWORD *)(v33 + 24);
  v35 = *(unsigned int *)(v33 + 40);
  if ((_DWORD)v35)
  {
    v36 = *(_QWORD *)(v31 + 40);
    LODWORD(v37) = ((v36 >> 4) ^ (v36 >> 9)) & (v35 - 1);
    v38 = (uint64_t *)(v34 + 16 * v37);
    v39 = *v38;
    if (v36 == *v38)
      goto LABEL_33;
    v40 = 1;
    while (v39 != -4096)
    {
      v41 = v37 + v40++;
      v37 = v41 & (v35 - 1);
      v39 = *(_QWORD *)(v34 + 16 * v37);
      if (v36 == v39)
      {
        v38 = (uint64_t *)(v34 + 16 * v37);
        goto LABEL_33;
      }
    }
  }
  v38 = (uint64_t *)(v34 + 16 * v35);
LABEL_33:
  if (v38 == (uint64_t *)(v34 + 16 * v35))
    v42 = 0;
  else
    v42 = v38[1];
  v43 = *(_QWORD *)(v32 + 40);
  if ((_DWORD)v35)
  {
    LODWORD(v44) = ((v43 >> 4) ^ (v43 >> 9)) & (v35 - 1);
    v45 = (uint64_t *)(v34 + 16 * v44);
    v46 = *v45;
    if (v43 == *v45)
      goto LABEL_43;
    v47 = 1;
    while (v46 != -4096)
    {
      v48 = v44 + v47++;
      v44 = v48 & (v35 - 1);
      v46 = *(_QWORD *)(v34 + 16 * v44);
      if (v43 == v46)
      {
        v45 = (uint64_t *)(v34 + 16 * v44);
        goto LABEL_43;
      }
    }
  }
  v45 = (uint64_t *)(v34 + 16 * v35);
LABEL_43:
  if (v45 == (uint64_t *)(v34 + 16 * v35))
    v49 = 0;
  else
    v49 = v45[1];
  if (v42 == v49)
  {
    v50 = *(__int16 *)(v43 + 18);
    if ((v50 & 0x80000000) == 0)
    {
      v74 = *(_QWORD *)(v43 + 48);
      if (v74 != v43 + 40)
      {
        v75 = 0;
        do
        {
          v76 = v74 - 24;
          if (!v74)
            v76 = 0;
          *(_DWORD *)(v76 + 56) = v75++;
          v74 = *(_QWORD *)(v74 + 8);
        }
        while (v74 != v43 + 40);
      }
      *(_WORD *)(v43 + 18) = v50 | 0x8000;
    }
    if (*(_DWORD *)(v32 + 56) >= *(_DWORD *)(v31 + 56))
      return result;
  }
  else if (*(_DWORD *)(v42 + 72) >= *(_DWORD *)(v49 + 72))
  {
    return result;
  }
  *a2 = v31;
  *a3 = v32;
  v51 = *a2;
  v52 = *a1;
  v53 = *(_QWORD *)(*(_QWORD *)a5 + 1960);
  v54 = *(_QWORD *)(v53 + 24);
  v55 = *(unsigned int *)(v53 + 40);
  if ((_DWORD)v55)
  {
    v56 = *(_QWORD *)(v51 + 40);
    LODWORD(v57) = ((v56 >> 4) ^ (v56 >> 9)) & (v55 - 1);
    v58 = (uint64_t *)(v54 + 16 * v57);
    v59 = *v58;
    if (v56 == *v58)
      goto LABEL_58;
    v60 = 1;
    while (v59 != -4096)
    {
      v61 = v57 + v60++;
      v57 = v61 & (v55 - 1);
      v59 = *(_QWORD *)(v54 + 16 * v57);
      if (v56 == v59)
      {
        v58 = (uint64_t *)(v54 + 16 * v57);
        goto LABEL_58;
      }
    }
  }
  v58 = (uint64_t *)(v54 + 16 * v55);
LABEL_58:
  if (v58 == (uint64_t *)(v54 + 16 * v55))
    v62 = 0;
  else
    v62 = v58[1];
  v63 = *(_QWORD *)(v52 + 40);
  if (!(_DWORD)v55)
  {
LABEL_67:
    v65 = (uint64_t *)(v54 + 16 * v55);
    goto LABEL_68;
  }
  LODWORD(v64) = ((v63 >> 4) ^ (v63 >> 9)) & (v55 - 1);
  v65 = (uint64_t *)(v54 + 16 * v64);
  v66 = *v65;
  if (v63 != *v65)
  {
    v67 = 1;
    while (v66 != -4096)
    {
      v68 = v64 + v67++;
      v64 = v68 & (v55 - 1);
      v66 = *(_QWORD *)(v54 + 16 * v64);
      if (v63 == v66)
      {
        v65 = (uint64_t *)(v54 + 16 * v64);
        goto LABEL_68;
      }
    }
    goto LABEL_67;
  }
LABEL_68:
  if (v65 == (uint64_t *)(v54 + 16 * v55))
    v69 = 0;
  else
    v69 = v65[1];
  if (v62 != v69)
  {
    if (*(_DWORD *)(v62 + 72) >= *(_DWORD *)(v69 + 72))
      return result;
    goto LABEL_73;
  }
  v70 = *(__int16 *)(v63 + 18);
  if ((v70 & 0x80000000) == 0)
  {
    v77 = *(_QWORD *)(v63 + 48);
    if (v77 != v63 + 40)
    {
      v78 = 0;
      do
      {
        v79 = v77 - 24;
        if (!v77)
          v79 = 0;
        *(_DWORD *)(v79 + 56) = v78++;
        v77 = *(_QWORD *)(v77 + 8);
      }
      while (v77 != v63 + 40);
    }
    *(_WORD *)(v63 + 18) = v70 | 0x8000;
  }
  if (*(_DWORD *)(v52 + 56) < *(_DWORD *)(v51 + 56))
  {
LABEL_73:
    *a1 = v51;
    *a2 = v52;
  }
  return result;
}

uint64_t sub_1C60B455C(uint64_t a1, uint64_t a2)
{
  return sub_1C60B0150(a2, *(_QWORD *)(*(_QWORD *)a1 + 384), *(_QWORD *)(*(_QWORD *)a1 + 392));
}

void sub_1C60B4570(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  void *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void *v20;
  void **v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  void *__p;
  char *v31;
  char *v32;
  char *v33;
  uint64_t *v34;

  v4 = a1[2];
  v5 = a1[1];
  if (v5 < v4)
  {
    *(_QWORD *)v5 = *(_QWORD *)a2;
    v6 = (void *)(v5 + 24);
    *(_QWORD *)(v5 + 8) = v5 + 24;
    *(_QWORD *)(v5 + 16) = 0x200000000;
    v7 = *(_DWORD *)(a2 + 16);
    if (v7)
      v8 = v5 == a2;
    else
      v8 = 1;
    if (v8)
      goto LABEL_12;
    v9 = *(_QWORD *)(a2 + 8);
    v10 = (const void *)(a2 + 24);
    if (v9 != a2 + 24)
    {
      *(_QWORD *)(v5 + 8) = v9;
      *(_DWORD *)(v5 + 16) = v7;
      *(_DWORD *)(v5 + 20) = *(_DWORD *)(a2 + 20);
      *(_QWORD *)(a2 + 8) = v10;
      *(_DWORD *)(a2 + 20) = 0;
      goto LABEL_11;
    }
    if (v7 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 8, v5 + 24, *(unsigned int *)(a2 + 16), 8);
      v11 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v11)
        goto LABEL_10;
      v10 = *(const void **)(a2 + 8);
      v6 = *(void **)(v5 + 8);
    }
    else
    {
      v11 = *(unsigned int *)(a2 + 16);
    }
    memcpy(v6, v10, 8 * v11);
LABEL_10:
    *(_DWORD *)(v5 + 16) = v7;
LABEL_11:
    *(_DWORD *)(a2 + 16) = 0;
LABEL_12:
    v12 = v5 + 40;
    goto LABEL_13;
  }
  v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
  if (v13 + 1 > 0x666666666666666)
    abort();
  v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - *a1) >> 3);
  v15 = 2 * v14;
  if (2 * v14 <= v13 + 1)
    v15 = v13 + 1;
  if (v14 >= 0x333333333333333)
    v16 = 0x666666666666666;
  else
    v16 = v15;
  v34 = a1 + 2;
  if (v16 > 0x666666666666666)
    sub_1C4764EE4();
  v17 = 5 * v16;
  v18 = (char *)operator new(40 * v16);
  v19 = &v18[40 * v13];
  __p = v18;
  v31 = v19;
  v33 = &v18[8 * v17];
  *(_QWORD *)v19 = *(_QWORD *)a2;
  v20 = v19 + 24;
  *((_QWORD *)v19 + 1) = v19 + 24;
  v21 = (void **)(v19 + 8);
  *((_QWORD *)v19 + 2) = 0x200000000;
  v22 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v22 && v21 != (void **)(a2 + 8))
  {
    v23 = *(void **)(a2 + 8);
    if (v23 != (void *)(a2 + 24))
    {
      *v21 = v23;
      v29 = *(_DWORD *)(a2 + 20);
      *((_DWORD *)v19 + 4) = v22;
      *((_DWORD *)v19 + 5) = v29;
      *(_QWORD *)(a2 + 8) = a2 + 24;
      *(_DWORD *)(a2 + 20) = 0;
      goto LABEL_28;
    }
    if (v22 >= 3)
    {
      *((_DWORD *)v19 + 4) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v19 + 8), (uint64_t)(v19 + 24), v22, 8);
      v24 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v24)
        goto LABEL_27;
      v23 = *(void **)(a2 + 8);
      v20 = *v21;
    }
    else
    {
      v24 = *(unsigned int *)(a2 + 16);
    }
    memcpy(v20, v23, 8 * v24);
LABEL_27:
    *((_DWORD *)v19 + 4) = v22;
LABEL_28:
    *(_DWORD *)(a2 + 16) = 0;
  }
  v32 = v19 + 40;
  sub_1C63E2CC8(a1, &__p);
  v12 = a1[1];
  v25 = v31;
  if (v32 != v31)
  {
    v26 = v32 - 16;
    do
    {
      v27 = (char *)*((_QWORD *)v26 - 2);
      if (v26 != v27)
        free(v27);
      v28 = v26 - 24;
      v26 -= 40;
    }
    while (v28 != v25);
  }
  if (__p)
    operator delete(__p);
LABEL_13:
  a1[1] = v12;
}

uint64_t *sub_1C60B4810(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  BOOL v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t *v86;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v37 = *(a2 - 1);
        v38 = *v8;
        if (*(_DWORD *)(v37 + 72) < *(_DWORD *)(*v8 + 72))
        {
          *v8 = v37;
          *(a2 - 1) = v38;
        }
        return result;
      case 3:
        return sub_1C515A754(v8, v8 + 1, a2 - 1);
      case 4:
        return sub_1C515A94C(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        v39 = v8 + 1;
        v40 = v8 + 2;
        v41 = v8 + 3;
        result = sub_1C515A94C(v8, v8 + 1, v8 + 2, v8 + 3);
        v42 = *(a2 - 1);
        v43 = v8[3];
        if (*(_DWORD *)(v42 + 72) < *(_DWORD *)(v43 + 72))
        {
          *v41 = v42;
          *(a2 - 1) = v43;
          v44 = *v41;
          v45 = *v40;
          v46 = *(_DWORD *)(*v41 + 72);
          if (v46 < *(_DWORD *)(*v40 + 72))
          {
            *v40 = v44;
            *v41 = v45;
            v47 = *v39;
            if (v46 < *(_DWORD *)(*v39 + 72))
            {
              v8[1] = v44;
              v8[2] = v47;
              v48 = *v8;
              if (v46 < *(_DWORD *)(*v8 + 72))
              {
                *v8 = v44;
                v8[1] = v48;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v49 = v8 + 1;
          v51 = v8 == a2 || v49 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v51)
            {
              v52 = 8;
              v53 = v8;
              do
              {
                v55 = *v53;
                v54 = v53[1];
                v53 = v49;
                v56 = *(_DWORD *)(v54 + 72);
                if (v56 < *(_DWORD *)(v55 + 72))
                {
                  v57 = v52;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v57) = v55;
                    v58 = v57 - 8;
                    if (v57 == 8)
                      break;
                    v55 = *(uint64_t *)((char *)v8 + v57 - 16);
                    v57 -= 8;
                    if (v56 >= *(_DWORD *)(v55 + 72))
                    {
                      v59 = (uint64_t *)((char *)v8 + v58);
                      goto LABEL_80;
                    }
                  }
                  v59 = v8;
LABEL_80:
                  *v59 = v54;
                }
                v49 = v53 + 1;
                v52 += 8;
              }
              while (v53 + 1 != a2);
            }
          }
          else if (!v51)
          {
            do
            {
              v89 = *v7;
              v88 = v7[1];
              v7 = v49;
              v90 = *(_DWORD *)(v88 + 72);
              if (v90 < *(_DWORD *)(v89 + 72))
              {
                do
                {
                  *v49 = v89;
                  v89 = *(v49 - 2);
                  --v49;
                }
                while (v90 < *(_DWORD *)(v89 + 72));
                *v49 = v88;
              }
              v49 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v60 = (unint64_t)(v10 - 2) >> 1;
            v61 = v60;
            do
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &v8[v63];
                v65 = *v64;
                if (2 * v62 + 2 < v10 && *(_DWORD *)(v65 + 72) < *(_DWORD *)(v64[1] + 72))
                {
                  v65 = v64[1];
                  ++v64;
                  v63 = 2 * v62 + 2;
                }
                result = &v8[v62];
                v66 = *result;
                v67 = *(_DWORD *)(*result + 72);
                if (*(_DWORD *)(v65 + 72) >= v67)
                {
                  do
                  {
                    v68 = v64;
                    *result = v65;
                    if (v60 < v63)
                      break;
                    v69 = (2 * v63) | 1;
                    v64 = &v8[v69];
                    v70 = 2 * v63 + 2;
                    v65 = *v64;
                    if (v70 < v10 && *(_DWORD *)(v65 + 72) < *(_DWORD *)(v64[1] + 72))
                    {
                      v65 = v64[1];
                      ++v64;
                      v69 = v70;
                    }
                    result = v68;
                    v63 = v69;
                  }
                  while (*(_DWORD *)(v65 + 72) >= v67);
                  *v68 = v66;
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            do
            {
              v71 = 0;
              v72 = *v8;
              v73 = v8;
              do
              {
                v74 = &v73[v71];
                v77 = v74[1];
                v75 = v74 + 1;
                v76 = v77;
                v78 = (2 * v71) | 1;
                v79 = 2 * v71 + 2;
                if (v79 < v10)
                {
                  result = (uint64_t *)*(unsigned int *)(v76 + 72);
                  if (result < *(_DWORD *)(v75[1] + 72))
                  {
                    v76 = v75[1];
                    ++v75;
                    v78 = v79;
                  }
                }
                *v73 = v76;
                v73 = v75;
                v71 = v78;
              }
              while (v78 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v75 == --a2)
              {
                *v75 = v72;
              }
              else
              {
                *v75 = *a2;
                *a2 = v72;
                v80 = (char *)v75 - (char *)v8 + 8;
                if (v80 >= 9)
                {
                  v81 = (((unint64_t)v80 >> 3) - 2) >> 1;
                  v82 = &v8[v81];
                  v83 = *v82;
                  v84 = *v75;
                  v85 = *(_DWORD *)(*v75 + 72);
                  if (*(_DWORD *)(*v82 + 72) < v85)
                  {
                    do
                    {
                      v86 = v82;
                      *v75 = v83;
                      if (!v81)
                        break;
                      v81 = (v81 - 1) >> 1;
                      v82 = &v8[v81];
                      v83 = *v82;
                      v75 = v86;
                    }
                    while (*(_DWORD *)(*v82 + 72) < v85);
                    *v86 = v84;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = sub_1C515A754(&v7[(unint64_t)v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1C515A754(v7, &v7[(unint64_t)v10 >> 1], a2 - 1);
          sub_1C515A754(v7 + 1, v12 - 1, a2 - 2);
          sub_1C515A754(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = sub_1C515A754(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(_DWORD *)(v14 + 72);
          if (*(_DWORD *)(*(v7 - 1) + 72) < v15)
            goto LABEL_12;
          if (v15 >= *(_DWORD *)(*(a2 - 1) + 72))
          {
            v29 = v7 + 1;
            do
            {
              v8 = v29;
              if (v29 >= a2)
                break;
              ++v29;
            }
            while (v15 >= *(_DWORD *)(*v8 + 72));
          }
          else
          {
            v8 = v7;
            do
            {
              v28 = v8[1];
              ++v8;
            }
            while (v15 >= *(_DWORD *)(v28 + 72));
          }
          v30 = a2;
          if (v8 < a2)
          {
            v30 = a2;
            do
              v31 = *--v30;
            while (v15 < *(_DWORD *)(v31 + 72));
          }
          if (v8 < v30)
          {
            v32 = *v8;
            v33 = *v30;
            do
            {
              *v8 = v33;
              *v30 = v32;
              do
              {
                v34 = v8[1];
                ++v8;
                v32 = v34;
              }
              while (v15 >= *(_DWORD *)(v34 + 72));
              do
              {
                v35 = *--v30;
                v33 = v35;
              }
              while (v15 < *(_DWORD *)(v35 + 72));
            }
            while (v8 < v30);
          }
          v36 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v36;
          a4 = 0;
          *v36 = v14;
          continue;
        }
        v15 = *(_DWORD *)(v14 + 72);
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*(_DWORD *)(v17 + 72) < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*(_DWORD *)(v21 + 72) >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*(_DWORD *)(v20 + 72) >= v15);
        }
        if (v18 >= v19)
        {
          v8 = &v7[v16];
        }
        else
        {
          v22 = *v19;
          v8 = &v7[v16];
          v23 = v19;
          do
          {
            *v8 = v22;
            *v23 = v17;
            do
            {
              v24 = v8[1];
              ++v8;
              v17 = v24;
            }
            while (*(_DWORD *)(v24 + 72) < v15);
            do
            {
              v25 = *--v23;
              v22 = v25;
            }
            while (*(_DWORD *)(v25 + 72) >= v15);
          }
          while (v8 < v23);
        }
        v26 = v8 - 1;
        if (v8 - 1 != v7)
          *v7 = *v26;
        *v26 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = (uint64_t *)sub_1C60B4810(v7, v8 - 1, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v27 = sub_1C60B4EF8(v7, v8 - 1);
        result = (uint64_t *)sub_1C60B4EF8(v8, a2);
        if (!(_DWORD)result)
        {
          if (v27)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 1;
        if (!v27)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1C60B4EF8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(_DWORD *)(v6 + 72) < *(_DWORD *)(*a1 + 72))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1C515A754(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C515A94C(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      sub_1C515A94C(a1, a1 + 1, a1 + 2, a1 + 3);
      v21 = *(a2 - 1);
      v22 = a1[3];
      if (*(_DWORD *)(v21 + 72) < *(_DWORD *)(v22 + 72))
      {
        *v20 = v21;
        *(a2 - 1) = v22;
        v23 = *v20;
        v24 = *v19;
        v25 = *(_DWORD *)(*v20 + 72);
        if (v25 < *(_DWORD *)(*v19 + 72))
        {
          *v19 = v23;
          *v20 = v24;
          v26 = *v18;
          if (v25 < *(_DWORD *)(*v18 + 72))
          {
            a1[1] = v23;
            a1[2] = v26;
            v27 = *a1;
            if (v25 < *(_DWORD *)(*a1 + 72))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C515A754(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = *(_DWORD *)(*v9 + 72);
    if (v14 < *(_DWORD *)(*v8 + 72))
    {
      v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_DWORD *)(v13 + 72))
        {
          v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

void sub_1C60B50E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v2 = *(_QWORD *)(a1 - 8);
  if (v2)
  {
    v3 = 168 * v2;
    do
    {
      v4 = a1 + v3;
      v5 = *(void **)(a1 + v3 - 72);
      if ((void *)(a1 + v3 - 56) != v5)
        free(v5);
      v6 = *(void **)(v4 - 120);
      if ((void *)(v4 - 104) != v6)
        free(v6);
      v3 -= 168;
    }
    while (v3);
  }
  JUMPOUT(0x1CAA32F9CLL);
}

void sub_1C60B515C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 0;
  *(_DWORD *)(a2 + 156) = *(_DWORD *)(a2 + 152);
}

void sub_1C60B516C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  sub_1C61B5A68(*a1 + 80, *a2, &v8);
  v5 = (_DWORD *)a1[1];
  v6 = (*v5)++;
  v7 = a2[3];
  *(_DWORD *)(v7 + 148) = v6;
  if ((uint64_t *)v7 == a2 && (a2[4] || a2[2]))
    llvm::slpvectorizer::BoUpSLP::BlockScheduling::calculateDependencies(a1[2], (uint64_t)a2, 0, v4);
}

uint64_t *sub_1C60B5204(uint64_t *result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;

  if (*(_QWORD *)(a2 + 24) == a2 && *(_DWORD *)(a2 + 152) != -1)
  {
    v2 = 0;
    v3 = a2;
    while (1)
    {
      v4 = *(_DWORD *)(v3 + 156);
      if (v4 == -1)
        break;
      v2 += v4;
      v3 = *(_QWORD *)(v3 + 32);
      if (!v3)
      {
        if (!v2 && !*(_BYTE *)(a2 + 160))
          return sub_1C60B5254((uint64_t *)*result, a2);
        return result;
      }
    }
  }
  return result;
}

uint64_t *sub_1C60B5254(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t **v5;
  int v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  v3 = result;
  v5 = (uint64_t **)(result + 1);
  v4 = (uint64_t *)result[1];
  if (v4)
  {
    v6 = *(_DWORD *)(a2 + 148);
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v4;
        v8 = *(_DWORD *)(v4[4] + 148);
        if (v8 >= v6)
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_10;
      }
      if (v6 >= v8)
        break;
      v4 = v7[1];
      if (!v4)
      {
        v5 = v7 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_10:
    v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a2;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *v5 = v9;
    v10 = *(_QWORD *)*v3;
    if (v10)
    {
      *v3 = v10;
      v11 = *v5;
    }
    else
    {
      v11 = v9;
    }
    result = sub_1C4768E74((uint64_t *)v3[1], v11);
    ++v3[2];
  }
  return result;
}

uint64_t *sub_1C60B5314(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;

  if (a2 && *(_DWORD *)(a2 + 152) != -1)
  {
    --*(_DWORD *)(a2 + 156);
    v2 = *(_QWORD *)(a2 + 24);
    if (v2)
    {
      v3 = 0;
      v4 = v2;
      while (1)
      {
        v5 = *(_DWORD *)(v4 + 156);
        if (v5 == -1)
          break;
        v3 += v5;
        v4 = *(_QWORD *)(v4 + 32);
        if (!v4)
        {
          if (!v3)
            return sub_1C60B5254((uint64_t *)*result, v2);
          return result;
        }
      }
    }
    else
    {
      return sub_1C60B5254((uint64_t *)*result, v2);
    }
  }
  return result;
}

_QWORD *sub_1C60B5368(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  unsigned int v9;
  unsigned int v11;

  *a1 = 1;
  v3 = (_QWORD *)*a2;
  if ((*a2 & 1) == 0)
  {
    v6 = (_QWORD *)operator new();
    v3 = v6;
    v7 = (_QWORD *)*a2;
    v8 = v6 + 2;
    *v6 = v6 + 2;
    v6[1] = 0x600000000;
    v9 = *((_DWORD *)v7 + 2);
    if (v6 == v7 || v9 == 0)
      goto LABEL_11;
    if (v9 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v6, (uint64_t)(v6 + 2), *((unsigned int *)v7 + 2), 8);
      v11 = *((_DWORD *)v7 + 2);
      if (!v11)
        goto LABEL_10;
      v8 = (void *)*v3;
    }
    else
    {
      v11 = *((_DWORD *)v7 + 2);
    }
    memcpy(v8, (const void *)*v7, 8 * v11);
LABEL_10:
    *((_DWORD *)v3 + 2) = v9;
LABEL_11:
    *((_DWORD *)v3 + 16) = *((_DWORD *)v7 + 16);
  }
  *a1 = v3;
  return a1;
}

void sub_1C60B543C(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *i;
  char *v16;
  void *__p;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;

  v4 = a1[2];
  v5 = (_QWORD *)a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = 0x2E8BA2E8BA2E8BA3 * (((uint64_t)v5 - *a1) >> 3);
    if ((unint64_t)(v7 + 1) > 0x2E8BA2E8BA2E8BALL)
      abort();
    v8 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v4 - *a1) >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= v7 + 1)
      v9 = v7 + 1;
    if (v8 >= 0x1745D1745D1745DLL)
      v10 = 0x2E8BA2E8BA2E8BALL;
    else
      v10 = v9;
    v21 = a1 + 2;
    if (v10 > 0x2E8BA2E8BA2E8BALL)
      sub_1C4764EE4();
    v11 = 88 * v10;
    v12 = (char *)operator new(88 * v10);
    v13 = &v12[88 * v7];
    __p = v12;
    v18 = v13;
    v20 = &v12[v11];
    *(_QWORD *)v13 = *(_QWORD *)a2;
    *((_QWORD *)v13 + 1) = v13 + 24;
    *((_QWORD *)v13 + 2) = 0x800000000;
    if (*(_DWORD *)(a2 + 16))
      sub_1C614D378((uint64_t)(v13 + 8), a2 + 8);
    v19 = v13 + 88;
    sub_1C631AED4(a1, &__p);
    v6 = (_QWORD *)a1[1];
    v14 = v18;
    for (i = v19; i != v14; i -= 88)
    {
      v16 = (char *)*((_QWORD *)i - 10);
      if (i - 64 != v16)
        free(v16);
    }
    if (__p)
      operator delete(__p);
  }
  else
  {
    *v5 = *(_QWORD *)a2;
    v5[1] = v5 + 3;
    v5[2] = 0x800000000;
    if (*(_DWORD *)(a2 + 16))
      sub_1C614D378((uint64_t)(v5 + 1), a2 + 8);
    v6 = v5 + 11;
  }
  a1[1] = (uint64_t)v6;
}

uint64_t sub_1C60B55E4(uint64_t result, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  char *v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  if (a4 >= 2)
  {
    v8 = (uint64_t *)result;
    if (a4 == 2)
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), *(a2 - 1), *(_QWORD *)result);
      if ((_DWORD)result)
      {
        v9 = *v8;
        *v8 = *(a2 - 1);
        *(a2 - 1) = v9;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v20 = (char *)a5;
      v21 = a4 >> 1;
      v22 = (uint64_t *)(result + 8 * (a4 >> 1));
      v23 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_1C60B582C((uint64_t *)result, v22, a3, v23, a5);
        v24 = (uint64_t *)&v20[8 * v21];
        result = (uint64_t)sub_1C60B582C(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v24);
        v25 = &v20[8 * a4];
        v26 = v24;
        while (v26 != (uint64_t *)v25)
        {
          result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))a3)(*(_QWORD *)(a3 + 8), *v26, *(_QWORD *)v20);
          if ((_DWORD)result)
            v27 = (char *)v26;
          else
            v27 = v20;
          v20 += 8 * (result ^ 1);
          v26 += result;
          *v8++ = *(_QWORD *)v27;
          if (v20 == (char *)v24)
          {
            if (v26 != (uint64_t *)v25)
            {
              v28 = 0;
              do
              {
                v8[v28] = v26[v28];
                ++v28;
              }
              while (&v26[v28] != (uint64_t *)v25);
            }
            return result;
          }
        }
        if (v20 != (char *)v24)
        {
          v29 = 0;
          do
          {
            v8[v29] = *(_QWORD *)&v20[v29 * 8];
            ++v29;
          }
          while (&v20[v29 * 8] != (char *)v24);
        }
      }
      else
      {
        sub_1C60B55E4(result, v22, a3, v23, a5, a6);
        sub_1C60B55E4(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v20, a6);
        return sub_1C60B5A20((uint64_t)v8, (char *)&v8[a4 >> 1], (char *)a2, a3, a4 >> 1, a4 - (a4 >> 1), v20, a6);
      }
    }
    else if ((uint64_t *)result != a2)
    {
      v11 = (uint64_t *)(result + 8);
      if ((uint64_t *)(result + 8) != a2)
      {
        v12 = 0;
        v13 = (uint64_t *)result;
        do
        {
          v15 = *v13;
          v14 = v13[1];
          v13 = v11;
          result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))a3)(*(_QWORD *)(a3 + 8), v14, v15);
          if ((_DWORD)result)
          {
            v16 = *v13;
            v17 = v12;
            while (1)
            {
              *(uint64_t *)((char *)v8 + v17 + 8) = *(uint64_t *)((char *)v8 + v17);
              if (!v17)
                break;
              result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))a3)(*(_QWORD *)(a3 + 8), v16, *(uint64_t *)((char *)v8 + v17 - 8));
              v17 -= 8;
              if ((result & 1) == 0)
              {
                v18 = (uint64_t *)((char *)v8 + v17 + 8);
                goto LABEL_15;
              }
            }
            v18 = v8;
LABEL_15:
            *v18 = v16;
          }
          v11 = v13 + 1;
          v12 += 8;
        }
        while (v13 + 1 != a2);
      }
    }
  }
  return result;
}

uint64_t *sub_1C60B582C(uint64_t *result, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  if (a4)
  {
    v5 = a5;
    v7 = result;
    if (a4 == 1)
    {
LABEL_9:
      *v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      v10 = a2 - 1;
      result = (uint64_t *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 8), *(a2 - 1), *result);
      if ((_DWORD)result)
        v11 = v10;
      else
        v11 = v7;
      *v5++ = *v11;
      if (!(_DWORD)result)
        v7 = v10;
      goto LABEL_9;
    }
    if ((uint64_t)a4 > 8)
    {
      v20 = &result[a4 >> 1];
      sub_1C60B55E4(result, v20, a3, a4 >> 1, a5, a4 >> 1);
      result = (uint64_t *)sub_1C60B55E4(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      v21 = &v7[a4 >> 1];
      while (v21 != a2)
      {
        result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))a3)(*(_QWORD *)(a3 + 8), *v21, *v7);
        if ((_DWORD)result)
          v22 = v21;
        else
          v22 = v7;
        v21 += result;
        v7 += result ^ 1;
        *v5++ = *v22;
        if (v7 == v20)
        {
          if (v21 != a2)
          {
            v23 = 0;
            do
            {
              v5[v23] = v21[v23];
              ++v23;
            }
            while (&v21[v23] != a2);
          }
          return result;
        }
      }
      if (v7 != v20)
      {
        v24 = 0;
        do
        {
          v5[v24] = v7[v24];
          ++v24;
        }
        while (&v7[v24] != v20);
      }
    }
    else if (result != a2)
    {
      v12 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        v13 = 0;
        v14 = a5;
        do
        {
          v15 = v14;
          v16 = *v14++;
          result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))a3)(*(_QWORD *)(a3 + 8), *v12, v16);
          v17 = v14;
          if ((_DWORD)result)
          {
            v15[1] = *v15;
            v17 = v5;
            if (v15 != v5)
            {
              v18 = v13;
              while (1)
              {
                v17 = (uint64_t *)((char *)v5 + v18);
                result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))a3)(*(_QWORD *)(a3 + 8), *v12, *(uint64_t *)((char *)v5 + v18 - 8));
                if (!(_DWORD)result)
                  break;
                *v17 = *(v17 - 1);
                v18 -= 8;
                if (!v18)
                {
                  v17 = v5;
                  break;
                }
              }
            }
          }
          v19 = *v12++;
          *v17 = v19;
          v13 += 8;
        }
        while (v12 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1C60B5A20(uint64_t result, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v10;
  char *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, _QWORD);
  char *v26;
  char *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;

  if (!a6)
    return result;
  v10 = a6;
  v15 = (char *)result;
  while (a5 > a8 && v10 > a8)
  {
    if (!a5)
      return result;
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))a4)(*(_QWORD *)(a4 + 8), *(_QWORD *)a2, *(_QWORD *)v15);
      if ((result & 1) != 0)
        break;
      v15 += 8;
      if (!--a5)
        return result;
    }
    v50 = a8;
    v51 = a7;
    v52 = v10;
    if (a5 >= v10)
    {
      if (a5 == 1)
      {
        v43 = *(_QWORD *)v15;
        *(_QWORD *)v15 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v43;
        return result;
      }
      if (a5 >= 0)
        v23 = a5;
      else
        v23 = a5 + 1;
      v18 = v23 >> 1;
      v22 = a2;
      a2 = &v15[8 * (v23 >> 1)];
      v10 = (a3 - v22) >> 3;
      if (a3 == v22)
      {
        v17 = a3;
      }
      else
      {
        v46 = v22;
        v48 = a3;
        v25 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))a4;
        v24 = *(_QWORD *)(a4 + 8);
        v17 = v22;
        do
        {
          v26 = &v17[8 * ((unint64_t)v10 >> 1)];
          v28 = *(_QWORD *)v26;
          v27 = v26 + 8;
          v29 = v25(v24, v28, *(_QWORD *)a2);
          if (v29)
            v10 += ~((unint64_t)v10 >> 1);
          else
            v10 = (unint64_t)v10 >> 1;
          if (v29)
            v17 = v27;
        }
        while (v10);
        v22 = v46;
        v10 = (v17 - v46) >> 3;
        a3 = v48;
      }
    }
    else
    {
      if (v10 >= 0)
        v16 = v10;
      else
        v16 = v10 + 1;
      v10 = v16 >> 1;
      v17 = &a2[8 * (v16 >> 1)];
      v18 = (a2 - v15) >> 3;
      if (a2 == v15)
      {
        v30 = a4;
        v15 = a2;
LABEL_41:
        v31 = v17;
        goto LABEL_48;
      }
      v45 = a2;
      v47 = a3;
      a2 = v15;
      do
      {
        v19 = (uint64_t *)&a2[8 * (v18 >> 1)];
        v21 = *v19;
        v20 = (char *)(v19 + 1);
        if ((*(unsigned int (**)(_QWORD, _QWORD, uint64_t))a4)(*(_QWORD *)(a4 + 8), *(_QWORD *)v17, v21))
        {
          v18 >>= 1;
        }
        else
        {
          a2 = v20;
          v18 += ~(v18 >> 1);
        }
      }
      while (v18);
      v18 = (a2 - v15) >> 3;
      v22 = v45;
      a3 = v47;
    }
    if (a2 == v22)
    {
      v30 = a4;
      a2 = v22;
      goto LABEL_41;
    }
    if (v22 == v17)
    {
      v30 = a4;
      v17 = v22;
      v31 = a2;
    }
    else
    {
      v30 = a4;
      if (a2 + 8 == v22)
      {
        v49 = a3;
        v32 = *(_QWORD *)a2;
        v33 = v17 - v22;
        memmove(a2, v22, v17 - v22);
        v31 = &a2[v33];
        *(_QWORD *)v31 = v32;
LABEL_47:
        a3 = v49;
        goto LABEL_48;
      }
      if (v22 + 8 == v17)
      {
        v49 = a3;
        v34 = *((_QWORD *)v17 - 1);
        v31 = a2 + 8;
        if (v17 - 8 != a2)
          memmove(a2 + 8, a2, v17 - 8 - a2);
        *(_QWORD *)a2 = v34;
        goto LABEL_47;
      }
      v31 = (char *)sub_1C4E85DF0(a2, v22, v17);
    }
LABEL_48:
    a5 -= v18;
    if ((uint64_t)(v10 + v18) >= v52 - v10 + a5)
    {
      a7 = v51;
      result = sub_1C60B5A20(v31, v17, a3, v30, a5, v52 - v10, v51, v50);
      v17 = a2;
      a5 = v18;
      a8 = v50;
      a3 = v31;
      a4 = v30;
    }
    else
    {
      v35 = v18;
      a8 = v50;
      result = sub_1C60B5A20(v15, a2, v31, v30, v35, v10, v51, v50);
      v15 = v31;
      a4 = v30;
      v10 = v52 - v10;
      a7 = v51;
    }
    a2 = v17;
    if (!v10)
      return result;
  }
  if (a5 <= v10)
  {
    if (v15 != a2)
    {
      v40 = 0;
      do
      {
        *(_QWORD *)&a7[v40] = *(_QWORD *)&v15[v40];
        v40 += 8;
      }
      while (&v15[v40] != a2);
      if (v40)
      {
        v41 = a7;
        while (a2 != a3)
        {
          result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))a4)(*(_QWORD *)(a4 + 8), *(_QWORD *)a2, *(_QWORD *)v41);
          if ((_DWORD)result)
            v42 = a2;
          else
            v42 = v41;
          v41 += 8 * (result ^ 1);
          a2 += 8 * result;
          *(_QWORD *)v15 = *(_QWORD *)v42;
          v15 += 8;
          if (&a7[v40] == v41)
            return result;
        }
        return (uint64_t)memmove(v15, v41, a7 - v41 + v40);
      }
    }
  }
  else if (a2 != a3)
  {
    v36 = 0;
    do
    {
      *(_QWORD *)&a7[v36] = *(_QWORD *)&a2[v36];
      v36 += 8;
    }
    while (&a2[v36] != a3);
    if (v36)
    {
      v37 = &a7[v36];
      v38 = a3 - 8;
      while (a2 != v15)
      {
        result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))a4)(*(_QWORD *)(a4 + 8), *((_QWORD *)v37 - 1), *((_QWORD *)a2 - 1));
        if ((_DWORD)result)
          v39 = a2;
        else
          v39 = v37;
        if ((_DWORD)result)
          a2 -= 8;
        else
          v37 -= 8;
        *(_QWORD *)v38 = *((_QWORD *)v39 - 1);
        v38 -= 8;
        if (v37 == a7)
          return result;
      }
      if (v37 != a7)
      {
        v44 = 0;
        do
        {
          *(_QWORD *)&v38[v44] = *(_QWORD *)&v37[v44 - 8];
          v44 -= 8;
        }
        while (&v37[v44] != a7);
      }
    }
  }
  return result;
}

uint64_t sub_1C60B5E70(llvm::slpvectorizer::BoUpSLP **a1, llvm::Value *a2)
{
  unsigned int v2;

  v2 = *((_DWORD *)*a1 + 500) / llvm::slpvectorizer::BoUpSLP::getVectorElementSize(*a1, a2);
  if (v2 <= 2)
    return 2;
  else
    return v2;
}

uint64_t sub_1C60B5EAC(_QWORD *a1, uint64_t a2, _WORD *a3)
{
  uint64_t *v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  unsigned int v9;
  _WORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  char v26;
  _WORD *v27;
  uint64_t v28;
  uint64_t v29[3];

  v29[2] = *MEMORY[0x1E0C80C00];
  v5 = (uint64_t *)(*a1 + 1048);
  v27 = a3;
  v29[0] = 0;
  if ((sub_1C61DB414(v5, &v27, v29) & 1) != 0)
    return 0;
  v6 = *(_DWORD *)(*(_QWORD *)a3 + 8);
  v7 = v6 > 0x14u || ((1 << v6) & 0x10A07F) == 0;
  if (v7 || (v6 & 0xFD) == 4)
    return 0;
  v8 = a2 - 64;
  v9 = *(unsigned __int8 *)(**(_QWORD **)(a2 - 64) + 8);
  v10 = a3 - 32;
  v11 = *(unsigned __int8 *)(**((_QWORD **)a3 - 8) + 8);
  if (v9 >= v11)
  {
    if (v9 > v11)
      return 0;
    v12 = *(_WORD *)(a2 + 18) & 0x3F;
    v13 = a3[9] & 0x3F;
    v14 = dword_1C8677EB8[v12];
    v15 = dword_1C8677EB8[v13];
    if (v14 >= v12)
      v14 = *(_WORD *)(a2 + 18) & 0x3F;
    if (v15 >= v13)
      v15 = a3[9] & 0x3F;
    if (v14 >= v15)
    {
      if (v14 > v15)
        return 0;
      v17 = *(_QWORD *)(v8 + 32 * (v12 > v13));
      v18 = *(_QWORD *)&v10[16 * (v12 < v13)];
      v19 = *(unsigned __int8 *)(v17 + 16);
      v20 = *(unsigned __int8 *)(v18 + 16);
      if (v19 >= v20)
      {
        v21 = v12 > v13;
        v22 = v12 >= v13;
        v23 = !v21;
        v24 = (uint64_t *)(v8 + 32 * v23);
        v25 = (uint64_t *)&v10[16 * v22];
        v26 = 1;
        while (v19 <= v20)
        {
          if (v19 < 0x1C || v20 < 0x1C)
          {
            if ((v26 & 1) == 0)
              return 0;
          }
          else
          {
            if (*(_QWORD *)(v17 + 40) != *(_QWORD *)(v18 + 40))
              return 0;
            v29[0] = v17;
            v29[1] = v18;
            sub_1C6095230((uint64_t)&v27, v29, 2);
            if (!v28 || (v26 & (*(_BYTE *)(v28 + 16) != 28)) == 0)
              return 0;
          }
          v26 = 0;
          v17 = *v24;
          v18 = *v25;
          v19 = *(unsigned __int8 *)(*v24 + 16);
          v20 = *(unsigned __int8 *)(*v25 + 16);
          result = 1;
          if (v19 < v20)
            return result;
        }
        return 0;
      }
    }
  }
  return 1;
}

uint64_t sub_1C60B60A0(_QWORD *a1, _WORD *a2, _WORD *a3)
{
  uint64_t result;
  uint64_t *v6;
  int v7;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  char i;
  char v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  if (a2 == a3)
    return 1;
  v6 = (uint64_t *)(*a1 + 1048);
  v22 = a3;
  v24[0] = 0;
  if ((sub_1C61DB414(v6, &v22, v24) & 1) == 0)
  {
    v7 = *(_DWORD *)(*(_QWORD *)a3 + 8);
    if (v7 <= 0x14u && ((1 << v7) & 0x10A07F) != 0 && (v7 & 0xFD) != 4)
    {
      v9 = a2 - 32;
      v10 = a3 - 32;
      if (*(unsigned __int8 *)(**((_QWORD **)a3 - 8) + 8) == *(unsigned __int8 *)(**((_QWORD **)a2 - 8) + 8))
      {
        v11 = a2[9] & 0x3F;
        v12 = a3[9] & 0x3F;
        v13 = dword_1C8677EB8[v11];
        v14 = dword_1C8677EB8[v12];
        if (v13 >= v11)
          v13 = v11;
        if (v14 >= v12)
          v14 = v12;
        if (v13 == v14)
        {
          LODWORD(result) = 0;
          for (i = 1; ; i = 0)
          {
            v16 = i;
            v17 = result ^ 1;
            v18 = v11 <= v12 ? result : result ^ 1;
            v19 = *(_QWORD *)&v9[16 * v18];
            if (v11 >= v12)
              v17 = result;
            v20 = *(_QWORD *)&v10[16 * v17];
            v21 = *(unsigned __int8 *)(v19 + 16);
            if (v21 != *(unsigned __int8 *)(v20 + 16))
              break;
            if (v21 >= 0x1C)
            {
              if (*(_QWORD *)(v19 + 40) != *(_QWORD *)(v20 + 40))
                break;
              v24[0] = v19;
              v24[1] = v20;
              sub_1C6095230((uint64_t)&v22, v24, 2);
              if (!v23 || *(_BYTE *)(v23 + 16) == 28)
                break;
            }
            result = 1;
            if ((v16 & 1) == 0)
              return result;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1C60B6260(uint64_t a1, uint64_t *a2, unint64_t a3, char a4)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)a1;
  if (!a3)
    return llvm::SLPVectorizerPass::tryToVectorizeList(v5, a2, a3, *(llvm::slpvectorizer::BoUpSLP **)(a1 + 8), a4);
  v6 = a2;
  while (1)
  {
    v7 = *(_QWORD *)(*v6 + 8);
    if (v7)
      break;
LABEL_7:
    if (++v6 == &a2[a3])
      return llvm::SLPVectorizerPass::tryToVectorizeList(v5, a2, a3, *(llvm::slpvectorizer::BoUpSLP **)(a1 + 8), a4);
  }
  while (1)
  {
    v8 = *(_QWORD *)(v7 + 24);
    if (*(_BYTE *)(v8 + 16) == 85 && *(_QWORD *)(v8 + 40) != *(_QWORD *)(*v6 + 40))
      return 0;
    v7 = *(_QWORD *)(v7 + 8);
    if (!v7)
      goto LABEL_7;
  }
}

uint64_t sub_1C60B62C8(llvm::slpvectorizer::BoUpSLP **a1, llvm::Value *a2)
{
  unsigned int v2;

  v2 = *((_DWORD *)*a1 + 500) / llvm::slpvectorizer::BoUpSLP::getVectorElementSize(*a1, a2);
  if (v2 <= 2)
    return 2;
  else
    return v2;
}

uint64_t sub_1C60B6304(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  BOOL v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[3];

  v49[2] = *MEMORY[0x1E0C80C00];
  v47 = a3;
  v48 = a2;
  v3 = *(unsigned __int8 *)(*(_QWORD *)a2 + 8);
  v4 = *(unsigned __int8 *)(*(_QWORD *)a3 + 8);
  if (v3 < v4)
    return 1;
  if (v3 > v4)
    return 0;
  v7 = *a1;
  v8 = sub_1C61B7348(a1[1], &v48);
  v9 = v8[1];
  v10 = *((unsigned int *)v8 + 4);
  v11 = sub_1C61B7348(a1[1], &v47);
  v12 = *((_DWORD *)v11 + 4);
  if (v10 < v12)
    return 1;
  if (v10 > v12)
    return 0;
  if ((int)v10 < 1)
  {
    v15 = 0;
    v14 = 0;
LABEL_60:
    if (v15)
      v44 = v14 == 0;
    else
      v44 = 1;
    return !v44;
  }
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = v11[1];
  while (1)
  {
    v17 = *(_QWORD *)(v9 + 8 * v13);
    v18 = *(unsigned __int8 *)(v17 + 16);
    if (v18 - 13 > 0xFFFFFFFD || (v19 = *(_QWORD *)(v16 + 8 * v13), v20 = *(unsigned __int8 *)(v19 + 16), v20 - 11 < 2))
    {
      if (!v14)
      {
        v21 = __CFADD__(v18 - 13, 2);
        goto LABEL_14;
      }
      goto LABEL_17;
    }
    v22 = v18 - 28;
    if (v18 >= 0x1C && v20 >= 0x1C)
      break;
    if (v18 <= 0x14 && v20 <= 0x14)
    {
      if (!v14)
      {
        v21 = v18 >= v20;
LABEL_14:
        v15 = !v21;
      }
LABEL_17:
      v14 = 1;
      goto LABEL_18;
    }
    if (v18 < v20)
      return 1;
    if (v18 > v20)
      return 0;
LABEL_18:
    if (++v13 == v10)
      goto LABEL_60;
  }
  v25 = *(_QWORD *)(v7 + 40);
  v26 = *(_QWORD *)(v25 + 24);
  v27 = *(unsigned int *)(v25 + 40);
  if ((_DWORD)v27)
  {
    v28 = *(_QWORD *)(v17 + 40);
    LODWORD(v29) = ((v28 >> 4) ^ (v28 >> 9)) & (v27 - 1);
    v30 = (uint64_t *)(v26 + 16 * v29);
    v31 = *v30;
    if (v28 == *v30)
      goto LABEL_41;
    v32 = 1;
    while (v31 != -4096)
    {
      v33 = v29 + v32++;
      v29 = v33 & (v27 - 1);
      v31 = *(_QWORD *)(v26 + 16 * v29);
      if (v28 == v31)
      {
        v30 = (uint64_t *)(v26 + 16 * v29);
        goto LABEL_41;
      }
    }
  }
  v30 = (uint64_t *)(v26 + 16 * v27);
LABEL_41:
  v34 = (uint64_t *)(v26 + 16 * v27);
  if (v30 == v34)
    v35 = 0;
  else
    v35 = v30[1];
  if ((_DWORD)v27)
  {
    v36 = *(_QWORD *)(v19 + 40);
    v37 = v27 - 1;
    LODWORD(v27) = ((v36 >> 4) ^ (v36 >> 9)) & (v27 - 1);
    v38 = (uint64_t *)(v26 + 16 * v27);
    v39 = *v38;
    if (v36 == *v38)
    {
LABEL_50:
      if (v38 != v34)
      {
        v42 = v38[1];
        goto LABEL_53;
      }
    }
    else
    {
      v40 = 1;
      while (v39 != -4096)
      {
        v41 = v27 + v40++;
        v27 = v41 & v37;
        v39 = *(_QWORD *)(v26 + 16 * v27);
        if (v36 == v39)
        {
          v38 = (uint64_t *)(v26 + 16 * v27);
          goto LABEL_50;
        }
      }
    }
  }
  v42 = 0;
LABEL_53:
  if (!v35)
  {
    v44 = v42 == 0;
    return !v44;
  }
  if (!v42)
    return 0;
  if (v35 == v42)
  {
    v49[0] = *(_QWORD *)(v9 + 8 * v13);
    v49[1] = v19;
    sub_1C6095230((uint64_t)&v45, v49, 2);
    if (!v46 || *(_BYTE *)(v46 + 16) == 28)
    {
      v43 = v22 >= v20 - 28;
      return !v43;
    }
    goto LABEL_18;
  }
  v43 = *(_DWORD *)(v35 + 72) >= *(_DWORD *)(v42 + 72);
  return !v43;
}

uint64_t sub_1C60B65C8(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  _BOOL4 v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  v19 = a3;
  v20 = a2;
  if (a2 != a3)
  {
    if (*a2 != *a3)
      return 0;
    v5 = sub_1C61B7348(*a1, (uint64_t *)&v20);
    v6 = v5[1];
    v7 = *((unsigned int *)v5 + 4);
    v8 = sub_1C61B7348(*a1, (uint64_t *)&v19);
    if ((_DWORD)v7 != *((_DWORD *)v8 + 4))
      return 0;
    if ((int)v7 >= 1)
    {
      v9 = (uint64_t *)v8[1];
      while (1)
      {
        v10 = *(unsigned __int8 *)(*(_QWORD *)v6 + 16);
        if (v10 - 11 >= 2)
        {
          v11 = *v9;
          v12 = *(unsigned __int8 *)(*v9 + 16);
          if (v12 - 11 >= 2)
          {
            if (v10 >= 0x1C && v12 >= 0x1C)
            {
              if (*(_QWORD *)(*(_QWORD *)v6 + 40) != *(_QWORD *)(v11 + 40))
                return 0;
              v21[0] = *(_QWORD *)v6;
              v21[1] = v11;
              sub_1C6095230((uint64_t)&v17, v21, 2);
              if (!v18 || *(_BYTE *)(v18 + 16) == 28)
                return 0;
            }
            else
            {
              v15 = v10 < 0x15 && v12 < 0x15;
              if (v10 != v12 && !v15)
                return 0;
            }
          }
        }
        ++v9;
        v6 += 8;
        result = 1;
        if (!--v7)
          return result;
      }
    }
  }
  return 1;
}

uint64_t sub_1C60B6720(uint64_t a1, uint64_t *a2, unint64_t a3, char a4)
{
  return llvm::SLPVectorizerPass::tryToVectorizeList(*(_QWORD *)a1, a2, a3, *(llvm::slpvectorizer::BoUpSLP **)(a1 + 8), a4);
}

uint64_t sub_1C60B6730(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD *v10;

  v4 = (_QWORD *)*a2;
  v5 = (uint64_t *)(*a1 + 1048);
  v9 = 0;
  v10 = v4;
  v6 = sub_1C61DB414(v5, &v10, &v9);
  if ((_DWORD)v6)
  {
    v7 = a1[1];
    v10 = 0;
    if (sub_1C4D959A4((uint64_t *)v7, a2, &v10))
    {
      *v10 = -8192;
      *(int32x2_t *)(v7 + 8) = vadd_s32(*(int32x2_t *)(v7 + 8), (int32x2_t)0x1FFFFFFFFLL);
    }
  }
  return v6;
}

void sub_1C60B67C4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  const std::nothrow_t *v7;
  unint64_t v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t *v11;

  v6 = ((uint64_t)a2 - a1) >> 3;
  if ((uint64_t)a2 - a1 < 1025)
  {
LABEL_5:
    sub_1C60B6890(a1, a2, a3, v6, 0, 0);
  }
  else
  {
    v7 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v8 = ((uint64_t)a2 - a1) >> 3;
    while (1)
    {
      v9 = (uint64_t *)operator new(8 * v8, v7);
      if (v9)
        break;
      v10 = v8 > 1;
      v8 >>= 1;
      if (!v10)
        goto LABEL_5;
    }
    v11 = v9;
    sub_1C60B6890(a1, a2, a3, v6, v9, v8);
    operator delete(v11);
  }
}

uint64_t sub_1C60B6890(uint64_t result, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  if (a4 >= 2)
  {
    v8 = (uint64_t *)result;
    if (a4 == 2)
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 8), *(a2 - 1), *(_QWORD *)result);
      if ((_DWORD)result)
      {
        v9 = *v8;
        *v8 = *(a2 - 1);
        *(a2 - 1) = v9;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v20 = a5;
      v21 = a4 >> 1;
      v22 = (uint64_t *)(result + 8 * (a4 >> 1));
      v23 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_1C60B6AD8((uint64_t *)result, v22, a3, v23, a5);
        v24 = &v20[v21];
        result = (uint64_t)sub_1C60B6AD8(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v24);
        v25 = &v20[a4];
        v26 = v24;
        while (v26 != v25)
        {
          result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))a3)(*(_QWORD *)(a3 + 8), *v26, *v20);
          if ((_DWORD)result)
            v27 = v26;
          else
            v27 = v20;
          v20 += result ^ 1;
          v26 += result;
          *v8++ = *v27;
          if (v20 == v24)
          {
            if (v26 != v25)
            {
              v28 = 0;
              do
              {
                v8[v28] = v26[v28];
                ++v28;
              }
              while (&v26[v28] != v25);
            }
            return result;
          }
        }
        if (v20 != v24)
        {
          v29 = 0;
          do
          {
            v8[v29] = v20[v29];
            ++v29;
          }
          while (&v20[v29] != v24);
        }
      }
      else
      {
        sub_1C60B6890(result, v22, a3, v23, a5, a6);
        sub_1C60B6890(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v20, a6);
        return sub_1C60B6CCC((uint64_t)v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), v20, a6);
      }
    }
    else if ((uint64_t *)result != a2)
    {
      v11 = (uint64_t *)(result + 8);
      if ((uint64_t *)(result + 8) != a2)
      {
        v12 = 0;
        v13 = (uint64_t *)result;
        do
        {
          v15 = *v13;
          v14 = v13[1];
          v13 = v11;
          result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))a3)(*(_QWORD *)(a3 + 8), v14, v15);
          if ((_DWORD)result)
          {
            v16 = *v13;
            v17 = v12;
            while (1)
            {
              *(uint64_t *)((char *)v8 + v17 + 8) = *(uint64_t *)((char *)v8 + v17);
              if (!v17)
                break;
              result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))a3)(*(_QWORD *)(a3 + 8), v16, *(uint64_t *)((char *)v8 + v17 - 8));
              v17 -= 8;
              if ((result & 1) == 0)
              {
                v18 = (uint64_t *)((char *)v8 + v17 + 8);
                goto LABEL_15;
              }
            }
            v18 = v8;
LABEL_15:
            *v18 = v16;
          }
          v11 = v13 + 1;
          v12 += 8;
        }
        while (v13 + 1 != a2);
      }
    }
  }
  return result;
}

uint64_t *sub_1C60B6AD8(uint64_t *result, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  if (a4)
  {
    v5 = a5;
    v7 = result;
    if (a4 == 1)
    {
LABEL_9:
      *v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      v10 = a2 - 1;
      result = (uint64_t *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 8), *(a2 - 1), *result);
      if ((_DWORD)result)
        v11 = v10;
      else
        v11 = v7;
      *v5++ = *v11;
      if (!(_DWORD)result)
        v7 = v10;
      goto LABEL_9;
    }
    if ((uint64_t)a4 > 8)
    {
      v20 = &result[a4 >> 1];
      sub_1C60B6890(result, v20, a3, a4 >> 1, a5, a4 >> 1);
      result = (uint64_t *)sub_1C60B6890(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      v21 = &v7[a4 >> 1];
      while (v21 != a2)
      {
        result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))a3)(*(_QWORD *)(a3 + 8), *v21, *v7);
        if ((_DWORD)result)
          v22 = v21;
        else
          v22 = v7;
        v21 += result;
        v7 += result ^ 1;
        *v5++ = *v22;
        if (v7 == v20)
        {
          if (v21 != a2)
          {
            v23 = 0;
            do
            {
              v5[v23] = v21[v23];
              ++v23;
            }
            while (&v21[v23] != a2);
          }
          return result;
        }
      }
      if (v7 != v20)
      {
        v24 = 0;
        do
        {
          v5[v24] = v7[v24];
          ++v24;
        }
        while (&v7[v24] != v20);
      }
    }
    else if (result != a2)
    {
      v12 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        v13 = 0;
        v14 = a5;
        do
        {
          v15 = v14;
          v16 = *v14++;
          result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))a3)(*(_QWORD *)(a3 + 8), *v12, v16);
          v17 = v14;
          if ((_DWORD)result)
          {
            v15[1] = *v15;
            v17 = v5;
            if (v15 != v5)
            {
              v18 = v13;
              while (1)
              {
                v17 = (uint64_t *)((char *)v5 + v18);
                result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))a3)(*(_QWORD *)(a3 + 8), *v12, *(uint64_t *)((char *)v5 + v18 - 8));
                if (!(_DWORD)result)
                  break;
                *v17 = *(v17 - 1);
                v18 -= 8;
                if (!v18)
                {
                  v17 = v5;
                  break;
                }
              }
            }
          }
          v19 = *v12++;
          *v17 = v19;
          v13 += 8;
        }
        while (v12 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1C60B6CCC(uint64_t result, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, _QWORD);
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  BOOL v51;
  char v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;

  if (!a6)
    return result;
  v9 = a6;
  v14 = (_QWORD *)result;
  while (a5 > a8 && v9 > a8)
  {
    if (!a5)
      return result;
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))a4)(*(_QWORD *)(a4 + 8), *a2, *v14);
      if ((result & 1) != 0)
        break;
      ++v14;
      if (!--a5)
        return result;
    }
    v74 = a8;
    if (a5 >= v9)
    {
      if (a5 == 1)
      {
        v64 = *v14;
        *v14 = *a2;
        *a2 = v64;
        return result;
      }
      v19 = a3;
      if (a5 >= 0)
        v24 = a5;
      else
        v24 = a5 + 1;
      v18 = v24 >> 1;
      v17 = &v14[v24 >> 1];
      v16 = a3 - a2;
      if (a3 == a2)
      {
        v23 = a2;
        a2 = a3;
        goto LABEL_36;
      }
      v66 = a4;
      v67 = v9;
      v69 = a2;
      v71 = a3;
      v26 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))a4;
      v25 = *(_QWORD *)(a4 + 8);
      do
      {
        v27 = &a2[v16 >> 1];
        v29 = *v27;
        v28 = v27 + 1;
        v30 = v26(v25, v29, *v17);
        if (v30)
          v16 += ~(v16 >> 1);
        else
          v16 >>= 1;
        if (v30)
          a2 = v28;
      }
      while (v16);
      v23 = v69;
      v19 = v71;
      v16 = a2 - v69;
      a4 = v66;
    }
    else
    {
      if (v9 >= 0)
        v15 = v9;
      else
        v15 = v9 + 1;
      v16 = v15 >> 1;
      v17 = a2;
      a2 += v15 >> 1;
      v18 = v17 - v14;
      v19 = a3;
      if (v17 == v14)
      {
        v14 = v17;
        goto LABEL_49;
      }
      v67 = v9;
      v68 = v17;
      v70 = a3;
      v17 = v14;
      do
      {
        v20 = &v17[v18 >> 1];
        v22 = *v20;
        v21 = v20 + 1;
        if ((*(unsigned int (**)(_QWORD, _QWORD, uint64_t))a4)(*(_QWORD *)(a4 + 8), *a2, v22))
        {
          v18 >>= 1;
        }
        else
        {
          v17 = v21;
          v18 += ~(v18 >> 1);
        }
      }
      while (v18);
      v18 = v17 - v14;
      v23 = v68;
      v19 = v70;
    }
    v9 = v67;
LABEL_36:
    if (v17 != v23)
    {
      if (v23 == a2)
      {
        a2 = v23;
        v37 = v17;
      }
      else if (v17 + 1 == v23)
      {
        v72 = v19;
        v38 = a4;
        v39 = *v17;
        v40 = (char *)a2 - (char *)v23;
        memmove(v17, v23, (char *)a2 - (char *)v23);
        v37 = (_QWORD *)((char *)v17 + v40);
        *v37 = v39;
        a4 = v38;
        v19 = v72;
      }
      else if (v23 + 1 == a2)
      {
        v41 = *(a2 - 1);
        v37 = v17 + 1;
        if (a2 - 1 != v17)
        {
          v73 = v19;
          memmove(v17 + 1, v17, (char *)(a2 - 1) - (char *)v17);
          v19 = v73;
        }
        *v17 = v41;
      }
      else
      {
        v31 = v23 - v17;
        if (v31 == a2 - v23)
        {
          v32 = 0;
          do
          {
            v33 = v17[v32];
            v17[v32] = v23[v32];
            v34 = (uint64_t)&v17[v32 + 1];
            v23[v32] = v33;
            v35 = (uint64_t)&v23[++v32];
          }
          while ((_QWORD *)v34 != v23 && v35 != (_QWORD)a2);
          v37 = v23;
        }
        else
        {
          v42 = a2 - v23;
          v43 = v23 - v17;
          do
          {
            v44 = v43;
            v43 = v42;
            v42 = v44 % v42;
          }
          while (v42);
          if (v43)
          {
            v45 = &v17[v43];
            do
            {
              v47 = *--v45;
              v46 = v47;
              v48 = &v45[v31];
              v49 = v45;
              do
              {
                v50 = v49;
                v49 = v48;
                *v50 = *v48;
                v51 = __OFSUB__(v31, a2 - v48);
                v53 = v31 - (a2 - v48);
                v52 = (v53 < 0) ^ v51;
                v48 = &v17[v53];
                if (v52)
                  v48 = &v49[v31];
              }
              while (v48 != v45);
              *v49 = v46;
            }
            while (v45 != v17);
          }
          v37 = &v17[a2 - v23];
        }
      }
      goto LABEL_65;
    }
    v17 = v23;
LABEL_49:
    v37 = a2;
LABEL_65:
    a5 -= v18;
    v9 -= v16;
    if ((uint64_t)(v16 + v18) >= v9 + a5)
    {
      a3 = v37;
      v56 = v37;
      a8 = v74;
      result = sub_1C60B6CCC(v56, a2, v19, a4, a5, v9, a7, v74);
      a2 = v17;
      v9 = v16;
      a5 = v18;
      if (!v16)
        return result;
    }
    else
    {
      a3 = v19;
      v54 = v14;
      v14 = v37;
      v55 = v37;
      a8 = v74;
      result = sub_1C60B6CCC(v54, v17, v55, a4, v18, v16, a7, v74);
      if (!v9)
        return result;
    }
  }
  if (a5 <= v9)
  {
    if (v14 != a2)
    {
      v61 = 0;
      do
      {
        a7[v61] = v14[v61];
        ++v61;
      }
      while (&v14[v61] != a2);
      if (v61 * 8)
      {
        v62 = a7;
        while (a2 != a3)
        {
          result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))a4)(*(_QWORD *)(a4 + 8), *a2, *v62);
          if ((_DWORD)result)
            v63 = a2;
          else
            v63 = v62;
          v62 += result ^ 1;
          a2 += result;
          *v14++ = *v63;
          if (&a7[v61] == v62)
            return result;
        }
        return (uint64_t)memmove(v14, v62, (char *)a7 - (char *)v62 + v61 * 8);
      }
    }
  }
  else if (a2 != a3)
  {
    v57 = 0;
    do
    {
      a7[v57] = a2[v57];
      ++v57;
    }
    while (&a2[v57] != a3);
    if (v57 * 8)
    {
      v58 = &a7[v57];
      v59 = a3 - 1;
      while (a2 != v14)
      {
        result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))a4)(*(_QWORD *)(a4 + 8), *(v58 - 1), *(a2 - 1));
        if ((_DWORD)result)
          v60 = a2;
        else
          v60 = v58;
        if ((_DWORD)result)
          --a2;
        else
          --v58;
        *v59-- = *(v60 - 1);
        if (v58 == a7)
          return result;
      }
      if (v58 != a7)
      {
        v65 = 0;
        do
        {
          v59[v65] = v58[v65 - 1];
          --v65;
        }
        while (&v58[v65] != a7);
      }
    }
  }
  return result;
}

uint64_t sub_1C60B71DC(_QWORD *a1, uint64_t a2)
{
  unsigned int v3;
  const char *v4;
  unsigned int v5;
  unsigned int v7;

  sub_1C4768AD0(*(_QWORD *)(a1[1] + 64), a2);
  if ((_DWORD)v4 == 1)
  {
    v7 = v3;
    v3 = v7;
  }
  v5 = *(_DWORD *)(*a1 + 2004) / v3;
  if (v5 <= 2)
    return 2;
  else
    return v5;
}

uint64_t sub_1C60B7248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[3];

  v34[2] = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int8 *)(**(_QWORD **)(a2 - 32) + 8);
  v4 = *(unsigned __int8 *)(**(_QWORD **)(a3 - 32) + 8);
  if (v3 < v4)
    return 1;
  if (v3 > v4)
    return 0;
  v6 = *(_QWORD *)(a2 - 64);
  v7 = *(unsigned __int8 *)(v6 + 16);
  if (v7 - 11 < 2)
    return 0;
  v8 = *(_QWORD *)(a3 - 64);
  v9 = *(unsigned __int8 *)(v8 + 16);
  if (v9 - 11 < 2)
    return 0;
  v10 = v7 - 28;
  if (v7 < 0x1C || v9 < 0x1C)
  {
    v13 = v7 <= 0x14 && v9 <= 0x14 || v7 >= v9;
    return !v13;
  }
  v14 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v15 = *(_QWORD *)(v14 + 24);
  v16 = *(unsigned int *)(v14 + 40);
  if ((_DWORD)v16)
  {
    v17 = *(_QWORD *)(v6 + 40);
    LODWORD(v18) = ((v17 >> 4) ^ (v17 >> 9)) & (v16 - 1);
    v19 = (uint64_t *)(v15 + 16 * v18);
    v20 = *v19;
    if (v17 == *v19)
      goto LABEL_25;
    v21 = 1;
    while (v20 != -4096)
    {
      v22 = v18 + v21++;
      v18 = v22 & (v16 - 1);
      v20 = *(_QWORD *)(v15 + 16 * v18);
      if (v17 == v20)
      {
        v19 = (uint64_t *)(v15 + 16 * v18);
        goto LABEL_25;
      }
    }
  }
  v19 = (uint64_t *)(v15 + 16 * v16);
LABEL_25:
  v23 = (uint64_t *)(v15 + 16 * v16);
  if (v19 == v23)
    v24 = 0;
  else
    v24 = v19[1];
  if ((_DWORD)v16)
  {
    v25 = *(_QWORD *)(v8 + 40);
    v26 = v16 - 1;
    LODWORD(v16) = ((v25 >> 4) ^ (v25 >> 9)) & (v16 - 1);
    v27 = (uint64_t *)(v15 + 16 * v16);
    v28 = *v27;
    if (v25 == *v27)
    {
LABEL_34:
      if (v27 != v23)
      {
        v31 = v27[1];
        goto LABEL_37;
      }
    }
    else
    {
      v29 = 1;
      while (v28 != -4096)
      {
        v30 = v16 + v29++;
        v16 = v30 & v26;
        v28 = *(_QWORD *)(v15 + 16 * v16);
        if (v25 == v28)
        {
          v27 = (uint64_t *)(v15 + 16 * v16);
          goto LABEL_34;
        }
      }
    }
  }
  v31 = 0;
LABEL_37:
  if (v24 == v31)
  {
    v34[0] = *(_QWORD *)(a2 - 64);
    v34[1] = v8;
    sub_1C6095230((uint64_t)&v32, v34, 2);
    if (v33 && *(_BYTE *)(v33 + 16) != 28)
      return 0;
    v13 = v10 >= v9 - 28;
  }
  else
  {
    v13 = *(_DWORD *)(v24 + 72) >= *(_DWORD *)(v31 + 72);
  }
  return !v13;
}

BOOL sub_1C60B7444(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12[3];

  v12[2] = *MEMORY[0x1E0C80C00];
  if (a1 == a2)
    return 1;
  if (**(_QWORD **)(a1 - 32) != **(_QWORD **)(a2 - 32))
    return 0;
  v3 = *(_QWORD *)(a1 - 64);
  v4 = *(unsigned __int8 *)(v3 + 16);
  if (v4 - 11 < 2)
    return 1;
  v5 = *(_QWORD *)(a2 - 64);
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 - 11 < 2)
    return 1;
  if (v4 < 0x1C || v6 < 0x1C)
    return v4 < 0x15 && v6 < 0x15 || v4 == v6;
  if (*(_QWORD *)(v3 + 40) != *(_QWORD *)(v5 + 40))
    return 0;
  v12[0] = *(_QWORD *)(a1 - 64);
  v12[1] = v5;
  sub_1C6095230((uint64_t)&v10, v12, 2);
  if (!v11)
    return 0;
  return *(_BYTE *)(v11 + 16) != 28;
}

uint64_t sub_1C60B7538()
{
  int v1;
  int v2;
  int *v3;
  __n128 v4;

  LOBYTE(v1) = 1;
  v3 = &v1;
  v2 = 1;
  v4.n128_u64[0] = (unint64_t)"Run the SLP vectorization passes";
  v4.n128_u64[1] = 32;
  sub_1C498EDF8((llvm::cl::Option *)&RunSLPVectorization, "vectorize-slp", (_BYTE **)&v3, &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &RunSLPVectorization, &dword_1C475E000);
  v1 = 1;
  v2 = 0;
  v3 = &v2;
  v4.n128_u64[0] = (unint64_t)"Only vectorize if you gain more than this number ";
  v4.n128_u64[1] = 49;
  sub_1C63E2104(&v3, &v1, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED82B6F8, &dword_1C475E000);
  LOBYTE(v1) = 1;
  v2 = 1;
  v3 = &v1;
  v4.n128_u64[0] = (unint64_t)"Attempt to vectorize horizontal reductions";
  v4.n128_u64[1] = 42;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED82B7B8, "slp-vectorize-hor", (_BYTE **)&v3, &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED82B7B8, &dword_1C475E000);
  LOBYTE(v1) = 0;
  v2 = 1;
  v3 = &v1;
  v4.n128_u64[0] = (unint64_t)"Attempt to vectorize horizontal reductions feeding into a store";
  v4.n128_u64[1] = 63;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED82B878, "slp-vectorize-hor-store", (_BYTE **)&v3, &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED82B878, &dword_1C475E000);
  v1 = 1;
  v2 = 128;
  v3 = &v2;
  v4.n128_u64[0] = (unint64_t)"Attempt to vectorize for this register size in bits";
  v4.n128_u64[1] = 51;
  sub_1C62141BC((llvm::cl::Option *)&unk_1ED82B938, "slp-max-reg-size", &v3, &v1, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1ED82B938, &dword_1C475E000);
  v1 = 1;
  v2 = 0;
  v3 = &v2;
  v4.n128_u64[0] = (unint64_t)"Maximum SLP vectorization factor (0=unlimited)";
  v4.n128_u64[1] = 46;
  sub_1C63E21A0(&v3, &v1, (__int128 *)&v4);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED82B9F8, &dword_1C475E000);
  v1 = 1;
  v2 = 32;
  v3 = &v2;
  v4.n128_u64[0] = (unint64_t)"Maximum depth of the lookup for consecutive stores.";
  v4.n128_u64[1] = 51;
  sub_1C63E227C(&v3, &v1, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED82BAB8, &dword_1C475E000);
  v1 = 1;
  v2 = 100000;
  v3 = &v2;
  v4.n128_u64[0] = (unint64_t)"Limit the size of the SLP scheduling region per block";
  v4.n128_u64[1] = 53;
  sub_1C63E2318(&v3, &v1, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED82BB78, &dword_1C475E000);
  v1 = 1;
  v2 = 128;
  v3 = &v2;
  v4.n128_u64[0] = (unint64_t)"Attempt to vectorize for this register size in bits";
  v4.n128_u64[1] = 51;
  sub_1C62141BC((llvm::cl::Option *)algn_1ED82BC38, "slp-min-reg-size", &v3, &v1, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, algn_1ED82BC38, &dword_1C475E000);
  v1 = 1;
  v2 = 12;
  v3 = &v2;
  v4.n128_u64[0] = (unint64_t)"Limit the recursion depth when building a vectorizable tree";
  v4.n128_u64[1] = 59;
  sub_1C4DB1928((uint64_t)&unk_1ED82BCF8, "slp-recursion-max-depth", &v3, &v1, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED82BCF8, &dword_1C475E000);
  v1 = 1;
  v2 = 3;
  v3 = &v2;
  v4.n128_u64[0] = (unint64_t)"Only vectorize small trees if they are fully vectorizable";
  v4.n128_u64[1] = 57;
  sub_1C4DB1928((uint64_t)&unk_1ED82BDB8, "slp-min-tree-size", &v3, &v1, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED82BDB8, &dword_1C475E000);
  v1 = 1;
  v2 = 2;
  v3 = &v2;
  v4.n128_u64[0] = (unint64_t)"The maximum look-ahead depth for operand reordering scores";
  v4.n128_u64[1] = 58;
  sub_1C63E23B4(&v3, &v1, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED82BE78, &dword_1C475E000);
  LODWORD(v3) = 1;
  v4.n128_u64[0] = (unint64_t)"Display the SLP trees with Graphviz";
  v4.n128_u64[1] = 35;
  sub_1C63E2450(&v3, (__int128 *)&v4);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED82BF38, &dword_1C475E000);
}

void llvm::initializeVectorization(llvm *this, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  llvm::PassRegistry *v5;

  llvm::initializeLoopVectorizePass(this, a2);
  llvm::initializeSLPVectorizerPass(this, v3);
  llvm::initializeLoadStoreVectorizerLegacyPassPass(this, v4);
  llvm::initializeVectorCombineLegacyPassPass(this, v5);
}

void LLVMInitializeVectorization(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  llvm::PassRegistry *v5;

  llvm::initializeLoopVectorizePass(a1, a2);
  llvm::initializeSLPVectorizerPass(a1, v3);
  llvm::initializeLoadStoreVectorizerLegacyPassPass(a1, v4);
  llvm::initializeVectorCombineLegacyPassPass(a1, v5);
}

uint64_t LLVMAddLoopVectorizePass(llvm *a1)
{
  uint64_t LoopVectorizePass;

  LoopVectorizePass = llvm::createLoopVectorizePass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, LoopVectorizePass);
}

uint64_t LLVMAddSLPVectorizePass(llvm *a1)
{
  uint64_t SLPVectorizerPass;

  SLPVectorizerPass = llvm::createSLPVectorizerPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, SLPVectorizerPass);
}

void llvm::initializeVectorCombineLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED838CA0);
  if (v2 != -1)
  {
    v5[0] = sub_1C60B7A38;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED838CA0, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C60B7A38(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeAssumptionCacheTrackerPass(a1);
  llvm::initializeDominatorTreeWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Optimize scalar/vector ops";
  *(_QWORD *)(v2 + 8) = 26;
  *(_QWORD *)(v2 + 16) = "vector-combine";
  *(_QWORD *)(v2 + 24) = 14;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F6438;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C60B7FEC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C60B7AD4(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F6438;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81AD988;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED838CA0);
  if (v3 != -1)
  {
    v7[0] = sub_1C60B7A38;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED838CA0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void llvm::VectorCombinePass::run(char *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ResultImpl;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int64x2_t v15;
  char v16;
  uint64_t **v17;
  void *v18;
  uint64_t v19;
  _OWORD v20[3];
  uint64_t v21;
  void **v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  char v27;
  __int128 v28;
  void *v29;
  _QWORD v30[5];
  char v31;
  void *v32;
  uint64_t v33;
  _BYTE v34[2048];
  __int128 v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _QWORD v41[17];

  v41[16] = *MEMORY[0x1E0C80C00];
  v8 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::AssumptionAnalysis::Key, (uint64_t)a2) + 8;
  v9 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::TargetIRAnalysis::Key, (uint64_t)a2) + 8;
  v10 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::DominatorTreeAnalysis::Key, (uint64_t)a2) + 8;
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::AAManager::Key, (uint64_t)a2);
  v12 = *a1;
  v17 = a2;
  v13 = **a2;
  v18 = v20;
  v19 = 0x200000000;
  v21 = v13;
  v22 = &v29;
  v23 = v30;
  v24 = 0;
  v25 = 0;
  v26 = 512;
  v27 = 7;
  v20[2] = 0u;
  v28 = 0u;
  v29 = &unk_1E8167888;
  v30[0] = &unk_1E8167A08;
  v30[1] = v9;
  v30[2] = v10;
  v30[3] = ResultImpl + 8;
  v30[4] = v8;
  v31 = v12;
  v32 = v34;
  v33 = 0x10000000000;
  v35 = 0u;
  v36 = 0;
  v37 = 1;
  v14 = 285;
  v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&(&v17)[v14] = v15;
    v14 += 2;
  }
  while (v14 != 301);
  v39 = v41;
  v40 = 0x1000000000;
  v16 = sub_1C60B7E08((int32x2_t *)&v17);
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  if ((v16 & 1) != 0)
    sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::CFGAnalyses::SetKey);
  else
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  if (v39 != v41)
    free(v39);
  if ((v37 & 1) == 0)
    MEMORY[0x1CAA32FB4](v38, 8);
  MEMORY[0x1CAA32FB4](v35, 8);
  if (v32 != v34)
    free(v32);
  if (v18 != v20)
    free(v18);
}

uint64_t sub_1C60B7E08(int32x2_t *a1)
{
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ***v10;
  BOOL v11;
  uint64_t ***v12;
  uint64_t v13;
  uint64_t v14;
  __int32 v15;
  int32x2_t v16;
  __int32 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23[2];
  char v24;

  if (byte_1ED82C078)
    return 0;
  v3 = (_QWORD *)a1[18];
  v4 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 680))(*v3, 1, 0);
  result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 672))(*v3, v4);
  if ((_DWORD)result)
  {
    v24 = 0;
    v23[0] = (uint64_t)a1;
    v23[1] = (uint64_t)&v24;
    v5 = *(_QWORD *)a1 + 72;
    for (i = *(_QWORD *)(*(_QWORD *)a1 + 80); i != v5; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v7 = i - 24;
      else
        v7 = 0;
      if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(*(_QWORD *)&a1[19], v7))
      {
        v8 = v7 + 40;
        v9 = *(_QWORD *)(v7 + 48);
        while (v9 != v8)
        {
          v10 = (uint64_t ***)(v9 - 24);
          v11 = v9 == 0;
          v9 = *(_QWORD *)(v9 + 8);
          if (v11)
            v12 = 0;
          else
            v12 = v10;
          if (!sub_1C4D99D08((uint64_t)v12) && !sub_1C509DDB0((uint64_t)v12))
            sub_1C60B8468(v23, v12);
        }
      }
    }
    do
    {
      while (1)
      {
        v13 = a1[24].u32[0];
        if (!(_DWORD)v13)
          break;
        v14 = *(_QWORD *)(*(_QWORD *)&a1[23] + 8 * v13 - 8);
        a1[24].i32[0] = v13 - 1;
        v15 = a1[283].i32[0];
        if (v15)
        {
          v16 = a1[281];
          v17 = v15 - 1;
          LODWORD(v18) = ((v14 >> 4) ^ (v14 >> 9)) & (v15 - 1);
          v19 = (uint64_t *)(*(_QWORD *)&v16 + 16 * v18);
          v20 = *v19;
          if (v14 == *v19)
          {
LABEL_28:
            *v19 = -8192;
            a1[282] = vadd_s32(a1[282], (int32x2_t)0x1FFFFFFFFLL);
          }
          else
          {
            v21 = 1;
            while (v20 != -4096)
            {
              v22 = v18 + v21++;
              v18 = v22 & v17;
              v20 = *(_QWORD *)(*(_QWORD *)&v16 + 16 * v18);
              if (v14 == v20)
              {
                v19 = (uint64_t *)(*(_QWORD *)&v16 + 16 * v18);
                goto LABEL_28;
              }
            }
          }
        }
        if (v14)
        {
          if (*(_QWORD *)(v14 + 8) || !llvm::wouldInstructionBeTriviallyDead(v14, 0))
            sub_1C60B8468(v23, (uint64_t ***)v14);
          else
            sub_1C60BBC24(a1, v14);
        }
      }
    }
    while (a1[302].i32[0]);
    return v24 != 0;
  }
  return result;
}

uint64_t sub_1C60B7FEC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C60B7AD4(v0);
}

void sub_1C60B8018(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C60B803C(uint64_t a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::AAResultsWrapperPass::ID);
  llvm::AnalysisUsage::setPreservesCFG(a2);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)llvm::AAResultsWrapperPass::ID);
  return sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::BasicAAWrapperPass::ID);
}

uint64_t sub_1C60B8104(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  char **v7;
  char *v8;
  llvm::AssumptionCacheTracker *v9;
  uint64_t AssumptionCache;
  char **v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char **v18;
  char *v19;
  uint64_t v20;
  char **v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64x2_t v27;
  uint64_t v29;
  const llvm::Function *v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[2];
  int v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  void **v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  __int16 v42;
  char v43;
  __int128 v44;
  void *v45;
  _QWORD v46[5];
  char v47;
  void *v48;
  uint64_t v49;
  _BYTE v50[2048];
  __int128 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  _QWORD v57[17];

  v57[16] = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0)
    return 0;
  v7 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != llvm::AssumptionCacheTracker::ID);
  v9 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), llvm::AssumptionCacheTracker::ID);
  AssumptionCache = llvm::AssumptionCacheTracker::getAssumptionCache(v9, a2);
  v11 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v12 = *v11;
    v11 += 2;
  }
  while (v12 != llvm::TargetTransformInfoWrapperPass::ID);
  v13 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v30 = 0;
  v31 = 0;
  LODWORD(v32) = 0;
  v33[0] = 0;
  v33[1] = 0;
  v34 = 0;
  v35 = 0;
  *(_QWORD *)&v36 = 0;
  DWORD2(v36) = 0;
  v14 = *(_QWORD *)(v13 + 56);
  if (v14)
  {
    v2 = v33;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, const llvm::Function *))(*(_QWORD *)v14 + 48))(&v29, v14, a2);
    v3 = (uint64_t *)(v13 + 64);
    v15 = v29;
    if (!*(_BYTE *)(v13 + 72))
    {
      *(_QWORD *)(v13 + 64) = v29;
      *(_BYTE *)(v13 + 72) = 1;
      goto LABEL_11;
    }
    v29 = 0;
    v16 = *v3;
    *v3 = v15;
    if (!v16)
      goto LABEL_11;
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v29;
    v29 = 0;
    if (!v17)
      goto LABEL_11;
  }
  else
  {
    sub_1C485C2F0();
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
LABEL_11:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v2);
  sub_1C4D8B52C((uint64_t *)&v30);
  v18 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v19 = *v18;
    v18 += 2;
  }
  while (v19 != llvm::DominatorTreeWrapperPass::ID);
  v20 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v18 - 1) + 96))(*(v18 - 1), llvm::DominatorTreeWrapperPass::ID);
  v21 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v22 = *v21;
    v21 += 2;
  }
  while (v22 != llvm::AAResultsWrapperPass::ID);
  v23 = v20 + 32;
  v24 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v21 - 1) + 96))(*(v21 - 1), llvm::AAResultsWrapperPass::ID)+ 32);
  v30 = a2;
  v25 = **(_QWORD **)a2;
  v31 = v33;
  v32 = 0x200000000;
  v37 = v25;
  v38 = &v45;
  v39 = v46;
  v40 = 0;
  v41 = 0;
  v42 = 512;
  v43 = 7;
  v36 = 0u;
  v44 = 0u;
  v45 = &unk_1E8167888;
  v46[0] = &unk_1E8167A08;
  v46[1] = v3;
  v46[2] = v23;
  v46[3] = v24;
  v46[4] = AssumptionCache;
  v47 = 0;
  v48 = v50;
  v49 = 0x10000000000;
  v51 = 0u;
  v52 = 0;
  v53 = 1;
  v26 = 2280;
  v27 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)((char *)&v30 + v26) = v27;
    v26 += 16;
  }
  while (v26 != 2408);
  v55 = v57;
  v56 = 0x1000000000;
  v6 = sub_1C60B7E08((int32x2_t *)&v30);
  if (v55 != v57)
    free(v55);
  if ((v53 & 1) == 0)
    MEMORY[0x1CAA32FB4](v54, 8);
  MEMORY[0x1CAA32FB4](v51, 8);
  if (v48 != v50)
    free(v48);
  if (v31 != v33)
    free(v31);
  return v6;
}

void sub_1C60B8468(uint64_t *a1, uint64_t ***a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t **v5;
  void *v6;
  uint64_t **v7;
  int v8;
  int v9;
  uint64_t *v10;
  int v11;
  uint64_t **v12;
  uint64_t *v13;
  int v14;
  uint64_t **v15;
  _QWORD *v16;
  uint64_t v17;
  _BOOL4 v18;
  int v19;
  char v20;
  unsigned __int8 *v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  uint64_t ***v34;
  char *v35;
  char v36;
  uint64_t **v37;
  int v38;
  uint64_t *v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  char v54;
  uint64_t v55;
  _BOOL4 v56;
  uint64_t **v57;
  uint64_t *v58;
  int v59;
  uint64_t ****v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t **v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  int v69;
  int v70;
  BOOL v71;
  llvm::PoisonValue **v72;
  uint64_t v73;
  llvm::Type *v74;
  unsigned int v75;
  uint64_t v76;
  __int16 v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  _QWORD *v83;
  int v84;
  uint64_t **v85;
  int v86;
  uint64_t v87;
  _DWORD *v88;
  _DWORD *v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  int v98;
  _BOOL4 v99;
  void *v100;
  uint64_t v101;
  llvm::Type *v102;
  _QWORD *v103;
  llvm::Value *v104;
  uint64_t v105;
  _QWORD *v106;
  double v107;
  uint64_t v108;
  _QWORD *v109;
  int v110;
  double v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int *v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  unint64_t v121;
  _BOOL4 v122;
  char **v123;
  uint64_t v124;
  unsigned int v125;
  int64_t v126;
  uint64_t v127;
  int64_t v128;
  signed int v130;
  unint64_t v131;
  uint64_t v132;
  _BOOL8 v133;
  uint64_t v134;
  _QWORD *v135;
  int v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  _BOOL8 v142;
  _BOOL4 v145;
  BOOL v146;
  uint64_t v147;
  unsigned int v148;
  unint64_t v149;
  int64_t v151;
  int v152;
  uint64_t v153;
  unsigned __int8 *v154;
  BOOL v155;
  uint64_t v156;
  int v157;
  int v158;
  int64_t v159;
  BOOL v160;
  BOOL v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int *v166;
  const llvm::APInt *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  llvm::ConstantInt *v171;
  unsigned int v172;
  unint64_t v173;
  llvm::ValueHandleBase *v174;
  unsigned __int8 *v175;
  unsigned __int8 *v176;
  BOOL v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  unsigned __int8 *v181;
  unsigned __int8 *v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t *v188;
  _DWORD *v189;
  uint64_t **v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  int v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  _QWORD *v199;
  double v200;
  uint64_t v201;
  int v202;
  _QWORD *v203;
  double v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  char *v209;
  unint64_t v210;
  const llvm::APInt *v211;
  char *v212;
  int v213;
  BOOL v214;
  int v215;
  char *v216;
  int64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  char v221;
  _BOOL8 v222;
  void *v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  _BOOL8 v227;
  void *v228;
  int64_t v229;
  int v230;
  _BOOL4 v231;
  _BOOL4 v232;
  llvm *v233;
  uint64_t v234;
  llvm::ConstantInt *v235;
  unsigned int v236;
  unint64_t v237;
  llvm::Constant *v238;
  llvm::Constant *v239;
  uint64_t *ElementInstruction;
  uint64_t v241;
  llvm *v242;
  uint64_t v243;
  llvm::ConstantInt *v244;
  unsigned int v245;
  unint64_t v246;
  llvm::Constant *v247;
  llvm::Constant *v248;
  uint64_t ***v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t ****v255;
  uint64_t ***v256;
  int v257;
  int v258;
  uint64_t ***v259;
  char *v260;
  uint64_t **v261;
  uint64_t **v262;
  llvm::Constant *v263;
  _QWORD ***v265;
  llvm::Constant *v266;
  const llvm::APInt *v267;
  _QWORD **v268;
  uint64_t v269;
  uint64_t FCmp;
  uint64_t v271;
  llvm::ConstantInt *v272;
  unint64_t v273;
  unint64_t v274;
  llvm::ValueHandleBase *v275;
  unsigned __int8 *v276;
  char *v277;
  char v278;
  int v279;
  uint64_t **v280;
  char v281;
  uint64_t *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  int v287;
  int v288;
  uint64_t v289;
  char v291;
  uint64_t v292;
  uint64_t *v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  _QWORD *v297;
  uint64_t v298;
  unsigned int v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t **v302;
  int v303;
  int v304;
  int64_t v305;
  llvm::Type *v306;
  uint64_t *v307;
  uint64_t v308;
  int v309;
  uint64_t **v310;
  _DWORD *v311;
  uint64_t v312;
  uint64_t v313;
  int v314;
  char hasFnAttrOnCalledFunction;
  int v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unsigned int v322;
  BOOL v323;
  int v324;
  uint64_t v326;
  uint64_t v327;
  uint64_t *v328;
  uint64_t *v329;
  uint64_t v330;
  int v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  unsigned int v335;
  uint64_t v336;
  int v337;
  int v338;
  unint64_t v339;
  uint64_t v340;
  int v341;
  BOOL v342;
  uint64_t v343;
  int v344;
  uint64_t v345;
  uint64_t v346;
  unsigned int v347;
  BOOL v348;
  uint64_t *v349;
  llvm::ConstantInt **v350;
  uint64_t v351;
  llvm::Value *v352;
  int v353;
  __int16 v354;
  uint64_t v355;
  uint64_t v356;
  int v357;
  int v358;
  uint64_t v359;
  BOOL v360;
  char v361;
  BOOL v362;
  uint64_t **v363;
  uint64_t ***v364;
  uint64_t **v365;
  void *v366;
  const llvm::APInt *v367;
  uint64_t v368;
  uint64_t v369;
  llvm::ConstantInt *v370;
  llvm::ValueHandleBase *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t ****v378;
  uint64_t ***v379;
  int v380;
  int v381;
  uint64_t ***v382;
  uint64_t **v383;
  char *v384;
  uint64_t **v385;
  char v386;
  char v387;
  char *v388;
  char *v389;
  llvm::Value *v390;
  uint64_t v391;
  _QWORD *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  unsigned __int8 **v397;
  int v398;
  unsigned __int8 *v399;
  unsigned __int8 *v400;
  unsigned __int8 **v401;
  unsigned __int8 **v402;
  unsigned __int8 *v403;
  unsigned __int8 **v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t *v409;
  uint64_t v410;
  uint64_t FCmpHelper;
  uint64_t v412;
  unsigned __int8 *v413;
  uint64_t v414;
  int v415;
  int v416;
  uint64_t v417;
  unsigned int v418;
  unsigned __int8 **v419;
  unsigned __int8 *v420;
  unsigned __int8 **v421;
  int v422;
  BOOL v423;
  unsigned int v424;
  unsigned __int8 **v425;
  _QWORD *v426;
  uint64_t v427;
  int v428;
  unsigned int v429;
  _QWORD *v430;
  uint64_t v431;
  _QWORD *v432;
  int v433;
  BOOL v434;
  unsigned int v435;
  _QWORD *v436;
  _QWORD *v437;
  uint64_t v438;
  uint64_t v439;
  _QWORD *v440;
  uint64_t v441;
  _QWORD *v442;
  uint64_t v443;
  uint64_t v444;
  _QWORD *v445;
  uint64_t v446;
  uint64_t v447;
  unsigned int v448;
  llvm::FixedVectorType *v449;
  const char *v450;
  unint64_t PrimitiveSizeInBits;
  unsigned int v452;
  unint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  int v457;
  unint64_t v458;
  int v459;
  uint64_t v460;
  uint64_t v461;
  llvm::GetElementPtrInst *v462;
  uint64_t *v463;
  uint64_t v464;
  char v465;
  char *v466;
  char *v467;
  uint64_t *v468;
  llvm::Value *v469;
  _QWORD *v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t **v473;
  uint64_t v474;
  uint64_t v475;
  unsigned int v476;
  unsigned int v477;
  char v478;
  llvm::Type *v479;
  uint64_t v480;
  unsigned __int8 *v481;
  uint64_t v482;
  void **v483;
  int v484;
  unsigned __int8 v485;
  unint64_t v486;
  uint64_t v487;
  int v488;
  llvm::Constant *v489;
  uint64_t v490;
  unsigned int v491;
  uint64_t v492;
  int64_t v493;
  int64_t v494;
  int v495;
  int v496;
  unint64_t v497;
  uint64_t v498;
  int v499;
  int v500;
  _BOOL4 v501;
  uint64_t v502;
  unsigned __int8 *v503;
  char *v504;
  char *v505;
  llvm::PoisonValue **v506;
  uint64_t v507;
  _QWORD *v508;
  uint64_t v509;
  llvm::Type *v510;
  void *v511;
  uint64_t v512;
  _QWORD *v513;
  llvm::Value *v514;
  llvm::Constant *v515;
  uint64_t v516;
  uint64_t v517;
  llvm::Constant *v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  int v522;
  uint64_t v523;
  int v524;
  unint64_t v525;
  _QWORD *v526;
  uint64_t v527;
  double v528;
  uint64_t v529;
  void *v530;
  void *v531;
  char *v532;
  uint64_t v533;
  int v534;
  unint64_t v535;
  BOOL v536;
  uint64_t v537;
  int v538;
  uint64_t v539;
  _QWORD *v540;
  uint64_t v541;
  double v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  int v546;
  int v547;
  unint64_t v548;
  uint64_t v549;
  int v550;
  int v551;
  unint64_t v552;
  uint64_t v553;
  int v554;
  int v555;
  unint64_t v556;
  uint64_t v557;
  llvm::Type *v558;
  int64_t v559;
  int v562;
  int v565;
  _BOOL4 v566;
  _BOOL4 v567;
  unint64_t v568;
  llvm::UndefValue *v569;
  uint64_t *v570;
  llvm::FixedVectorType ***v571;
  uint64_t v572;
  uint64_t Impl;
  _QWORD **v574;
  llvm::PoisonValue **v575;
  __int128 *v576;
  void **v577;
  char *v578;
  char *v579;
  llvm::Type **v580;
  int v581;
  unsigned __int8 *v582;
  uint64_t v583;
  int v584;
  unsigned __int8 *v585;
  unsigned __int8 *v586;
  unsigned __int8 *v587;
  llvm::PoisonValue **v588;
  uint64_t v589;
  uint64_t v590;
  const llvm::APInt *v591;
  uint64_t v592;
  llvm::ConstantInt *v593;
  unsigned int v594;
  unint64_t v595;
  llvm::ValueHandleBase *v596;
  unsigned __int8 *v597;
  _QWORD **v598;
  uint64_t v599;
  uint64_t v600;
  _QWORD **v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  unint64_t v608;
  int v609;
  unsigned int v610;
  int v611;
  unsigned int v612;
  int v613;
  int64_t v614;
  char v615;
  unsigned int v616;
  int v617;
  unsigned int v618;
  llvm::Type *v619;
  llvm::Type *v620;
  llvm::Type *v621;
  llvm::Type *v622;
  uint64_t v623;
  unsigned __int8 v624;
  unsigned int v625;
  int v626;
  llvm::PointerType *v627;
  int v628;
  int v629;
  llvm::PointerType *v630;
  llvm::PointerType *v631;
  llvm::PointerType *v632;
  int v633;
  unsigned int v634;
  int v635;
  unint64_t v636;
  unint64_t v637;
  int v638;
  llvm::DataLayout *v639;
  unint64_t v640;
  uint64_t v641;
  int v642;
  uint64_t *v643;
  uint64_t v644;
  uint64_t *v645;
  uint64_t v646;
  unsigned int v647;
  unsigned int v648;
  _QWORD ***v649;
  unsigned __int8 **v650;
  uint64_t *v651;
  uint64_t *v652;
  uint64_t *v653;
  uint64_t *v654;
  uint64_t *v655;
  uint64_t *v656;
  char v657;
  llvm::IRBuilderBase *v658;
  uint64_t v659;
  unsigned int v660[4];
  __int16 v661;
  llvm::Constant *v662;
  unsigned int v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  _QWORD *v668;
  uint64_t v669;
  char *v670;
  unint64_t v671;
  __int16 v672;
  uint64_t v673;
  void *v674[2];
  _BYTE v675[40];
  uint64_t v676;
  uint64_t v677;
  __int128 v678;
  __int128 v679;
  __int128 v680;
  uint64_t v681;

  v4 = a1;
  v681 = *MEMORY[0x1E0C80C00];
  v656 = (uint64_t *)(*a1 + 8);
  v659 = *a1;
  *(_QWORD *)(v659 + 56) = a2[5];
  *(_QWORD *)(v659 + 64) = a2 + 3;
  v649 = a2 + 3;
  v5 = a2[6];
  v674[0] = v5;
  if (v5)
  {
    llvm::MetadataTracking::track((uint64_t)v674, (unsigned __int8 *)v5, 2);
    v6 = v674[0];
  }
  else
  {
    v6 = 0;
  }
  sub_1C4774EF4((uint64_t)v656, 0, (uint64_t)v6);
  if (v674[0])
    llvm::MetadataTracking::untrack((uint64_t)v674, (unsigned __int8 *)v674[0]);
  if (!*(_BYTE *)(v659 + 176))
  {
    v7 = *a2;
    v8 = *((unsigned __int8 *)*a2 + 8);
    v669 = 0;
    if (!v7)
      goto LABEL_24;
    if (v8 != 18)
      goto LABEL_24;
    v674[1] = &v669;
    if (*((_BYTE *)a2 + 16) != 90)
      goto LABEL_24;
    v9 = *((_DWORD *)a2 + 5);
    v10 = (v9 & 0x40000000) != 0 ? (uint64_t *)*(a2 - 1) : (uint64_t *)&a2[-4 * (v9 & 0x7FFFFFF)];
    if (!sub_1C4E7B480(*v10))
      goto LABEL_24;
    v11 = *((_DWORD *)a2 + 5);
    v12 = (v11 & 0x40000000) != 0 ? *(a2 - 1) : (uint64_t **)&a2[-4 * (v11 & 0x7FFFFFF)];
    v13 = v12[4];
    if (!v13)
      goto LABEL_24;
    *(_QWORD *)v674[1] = v13;
    v14 = *((_DWORD *)a2 + 5);
    v15 = (v14 & 0x40000000) != 0 ? *(a2 - 1) : (uint64_t **)&a2[-4 * (v14 & 0x7FFFFFF)];
    if (!sub_1C4D8AC3C((uint64_t)v675, (llvm::Constant *)v15[8]))
      goto LABEL_24;
    v16 = (_QWORD *)v669;
    v17 = *(_QWORD *)(v669 + 8);
    if (!v17 || *(_QWORD *)(v17 + 8))
      goto LABEL_24;
    v668 = 0;
    v674[0] = &v668;
    if (*(_BYTE *)(v669 + 16) == 89)
    {
      v82 = *(_DWORD *)(v669 + 20);
      v83 = (v82 & 0x40000000) != 0 ? *(_QWORD **)(v669 - 8) : (_QWORD *)(v669 - 32 * (v82 & 0x7FFFFFF));
      v135 = (_QWORD *)*v83;
      if (v135)
      {
        v668 = v135;
        v136 = *(_DWORD *)(v669 + 20);
        if ((v136 & 0x40000000) != 0)
          v137 = *(_QWORD *)(v669 - 8);
        else
          v137 = v669 - 32 * (v136 & 0x7FFFFFF);
        if ((sub_1C4D8AC3C((uint64_t)&v674[1], *(llvm::Constant **)(v137 + 32)) & 1) != 0)
        {
          v405 = 1;
          v16 = v668;
LABEL_608:
          LOBYTE(v18) = 0;
          if (!v16 || *((_BYTE *)v16 + 16) != 60)
            goto LABEL_25;
          if ((*((_WORD *)v16 + 9) & 0x381) == 0)
          {
            v406 = v16[1];
            if (v406)
            {
              if (!*(_QWORD *)(v406 + 8))
              {
                v407 = *(_QWORD *)(*(_QWORD *)(v16[5] + 56) + 112);
                if (v407)
                {
                  if (*((_WORD *)v16 + 9) & 0x301 | *(_BYTE *)(v407 + 18) & 0x5C)
                    goto LABEL_24;
                }
                else if ((*((_WORD *)v16 + 9) & 0x301) != 0)
                {
                  goto LABEL_24;
                }
                v446 = a2[5][7][5];
                v645 = (uint64_t *)llvm::Value::stripPointerCasts((llvm::Value *)*(v16 - 4));
                v447 = *(_QWORD *)*(v16 - 4);
                v448 = *(_DWORD *)(v447 + 8);
                if ((v448 & 0xFE) == 0x12)
                  v448 = *(_DWORD *)(**(_QWORD **)(v447 + 16) + 8);
                v449 = *(llvm::FixedVectorType **)v669;
                PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v669);
                if ((_DWORD)v450 == 1)
                v452 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v659 + 144) + 704))(**(_QWORD **)(v659 + 144));
                LOBYTE(v18) = 0;
                if (!PrimitiveSizeInBits || !v452)
                {
LABEL_25:
                  *(_BYTE *)v4[1] |= v18;
                  if (llvm::isSafeToSpeculativelyExecute((uint64_t)a2, 0, 0, 0))
                  {
                    v19 = *((unsigned __int8 *)a2 + 16);
                    if ((v19 - 83) >= 0xFFFFFFFE)
                    {
                      v20 = 0;
                      v21 = (unsigned __int8 *)*(a2 - 8);
                      if (!v21)
                        goto LABEL_42;
                      if (v21[16] < 0x1Cu)
                        goto LABEL_42;
                      v20 = 0;
                      v22 = (uint64_t)*(a2 - 4);
                      if (!v22 || *(unsigned __int8 *)(v22 + 16) < 0x1Cu)
                        goto LABEL_42;
                      v23 = *((_WORD *)a2 + 9) & 0x3F;
LABEL_38:
                      v662 = 0;
                      v668 = 0;
                      v669 = 0;
                      v673 = 0;
                      v674[0] = &v662;
                      v674[1] = &v669;
                      if (!sub_1C60BC230((_QWORD **)v674, (uint64_t)v21))
                        goto LABEL_41;
                      *(_QWORD *)&v678 = &v673;
                      *((_QWORD *)&v678 + 1) = &v668;
                      if (!sub_1C60BC230((_QWORD **)&v678, v22) || *(_QWORD *)v662 != *(_QWORD *)v673)
                        goto LABEL_41;
                      v84 = -1;
                      v667 = 0xFFFFFFFFLL;
                      v85 = a2[1];
                      if (v85)
                      {
                        if (v85[1])
                        {
                          v84 = -1;
                        }
                        else
                        {
                          v439 = (uint64_t)v85[3];
                          v674[1] = &v667;
                          sub_1C63E3054((uint64_t)v674, v439);
                          v84 = v667;
                        }
                      }
                      v642 = v84;
                      v652 = v4;
                      v86 = *((unsigned __int8 *)a2 + 16);
                      v87 = (v86 - 28);
                      v88 = *(_DWORD **)v21;
                      v89 = (_DWORD *)**((_QWORD **)v21 - 8);
                      v618 = v86 - 41;
                      if ((v86 - 41) > 0x11)
                      {
                        v105 = *((_WORD *)a2 + 9) & 0x3F;
                        v106 = *(_QWORD **)(v659 + 144);
                        v107 = sub_1C4774CC4(v88);
                        v627 = (llvm::PointerType *)(*(uint64_t (**)(_QWORD, uint64_t, _DWORD *, uint64_t, uint64_t, _QWORD, _QWORD, double))(*(_QWORD *)*v106 + 864))(*v106, v87, v88, v108, v105, 0, 0, v107);
                        v109 = *(_QWORD **)(v659 + 144);
                        v91 = v110;
                        v111 = sub_1C4774CC4(v89);
                        v93 = (*(uint64_t (**)(_QWORD, uint64_t, _DWORD *, uint64_t, uint64_t, _QWORD, _QWORD, double))(*(_QWORD *)*v109 + 864))(*v109, v87, v89, v112, v105, 0, 0, v111);
                      }
                      else
                      {
                        v627 = (llvm::PointerType *)(*(uint64_t (**)(_QWORD, uint64_t, _DWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v659 + 144) + 824))(**(_QWORD **)(v659 + 144), v87, v88, 0, 0, 0, 0, 0, 0, 0, 0);
                        v91 = v90;
                        v93 = (*(uint64_t (**)(_QWORD, uint64_t, _DWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v659 + 144) + 824))(**(_QWORD **)(v659 + 144), v87, v89, 0, 0, 0, 0, 0, 0, 0, 0);
                      }
                      v635 = v92;
                      v113 = *((_QWORD *)v21 - 4);
                      v114 = (unsigned int *)(v113 + 24);
                      if (*(_DWORD *)(v113 + 32) >= 0x41u)
                        v114 = *(unsigned int **)v114;
                      v115 = *v114;
                      v116 = *(_QWORD *)(v22 - 32);
                      v117 = (unsigned int *)(v116 + 24);
                      if (*(_DWORD *)(v116 + 32) >= 0x41u)
                        v117 = *(unsigned int **)v117;
                      v118 = *v117;
                      *(_QWORD *)&v678 = (*(uint64_t (**)(_QWORD, uint64_t, _DWORD *, uint64_t))(***(_QWORD ***)(v659 + 144) + 872))(**(_QWORD **)(v659 + 144), 61, v89, v115);
                      *((_QWORD *)&v678 + 1) = v119;
                      v120 = (char *)(*(uint64_t (**)(_QWORD, uint64_t, _DWORD *, uint64_t))(***(_QWORD ***)(v659 + 144) + 872))(**(_QWORD **)(v659 + 144), 61, v89, v118);
                      v670 = v120;
                      v671 = v121;
                      v122 = SDWORD2(v678) > (int)v121;
                      if (DWORD2(v678) == (_DWORD)v121)
                        v122 = (uint64_t)v120 < (uint64_t)v678;
                      v32 = !v122;
                      v123 = (char **)&v678;
                      if (!v32)
                        v123 = &v670;
                      *(_OWORD *)v660 = *(_OWORD *)v123;
                      if (*((_QWORD *)v21 - 8) == *(_QWORD *)(v22 - 64) && (_DWORD)v115 == (_DWORD)v118)
                      {
                        v124 = *((_QWORD *)v21 + 1);
                        if (v21 == (unsigned __int8 *)v22)
                        {
                          if (v124)
                          {
                            v124 = *(_QWORD *)(v124 + 8);
                            if (v124)
                              LODWORD(v124) = *(_QWORD *)(v124 + 8) == 0;
                          }
                          v125 = v124 ^ 1;
                        }
                        else
                        {
                          v125 = !v124
                              || *(_QWORD *)(v124 + 8)
                              || (v412 = *(_QWORD *)(v22 + 8)) == 0
                              || *(_QWORD *)(v412 + 8) != 0;
                        }
                        v148 = v660[2];
                        if (__OFADD__(*(_QWORD *)v660, v627))
                          v128 = (((uint64_t)v627 + *(_QWORD *)v660) >> 63) ^ 0x8000000000000000;
                        else
                          v128 = (int64_t)v627 + *(_QWORD *)v660;
                        if (v91 == 1)
                          v130 = 1;
                        else
                          v130 = v660[2];
                        if (__OFADD__(v93, *(_QWORD *)v660))
                          v149 = ((v93 + *(_QWORD *)v660) >> 63) ^ 0x8000000000000000;
                        else
                          v149 = v93 + *(_QWORD *)v660;
                        v674[0] = (void *)v125;
                        LODWORD(v674[1]) = 0;
                        sub_1C4848B64((uint64_t)v674, (uint64_t)v660);
                        v145 = LODWORD(v674[1]) == 1 || v148 == 1;
                        v146 = __OFADD__(v149, v674[0]);
                        v147 = (uint64_t)v674[0] + v149;
                      }
                      else
                      {
                        v126 = (int64_t)&v120[v678];
                        if (__OFADD__((_QWORD)v678, v120))
                          v126 = (v126 >> 63) ^ 0x8000000000000000;
                        v146 = __OFADD__(v126, v627);
                        v127 = (uint64_t)v627 + v126;
                        if (v146)
                          v128 = (v127 >> 63) ^ 0x8000000000000000;
                        else
                          v128 = v127;
                        if ((_DWORD)v121 == 1 || v91 == 1)
                          v130 = 1;
                        else
                          v130 = DWORD2(v678);
                        if (__OFADD__(v93, *(_QWORD *)v660))
                          v131 = ((v93 + *(_QWORD *)v660) >> 63) ^ 0x8000000000000000;
                        else
                          v131 = v93 + *(_QWORD *)v660;
                        v132 = *((_QWORD *)v21 + 1);
                        if (v132)
                          v133 = *(_QWORD *)(v132 + 8) != 0;
                        else
                          v133 = 1;
                        v138 = v660[2];
                        v674[0] = (void *)v133;
                        LODWORD(v674[1]) = 0;
                        sub_1C4848B64((uint64_t)v674, (uint64_t)&v678);
                        v139 = LODWORD(v674[1]);
                        if (__OFADD__(v131, v674[0]))
                          v140 = (char *)(((uint64_t)((uint64_t)v674[0] + v131) >> 63) ^ 0x8000000000000000);
                        else
                          v140 = (char *)v674[0] + v131;
                        v141 = *(_QWORD *)(v22 + 8);
                        if (v141)
                          v142 = *(_QWORD *)(v141 + 8) != 0;
                        else
                          v142 = 1;
                        v674[0] = (void *)v142;
                        LODWORD(v674[1]) = 0;
                        sub_1C4848B64((uint64_t)v674, (uint64_t)&v670);
                        v145 = LODWORD(v674[1]) == 1 || v139 == 1 || v138 == 1;
                        v146 = __OFADD__(v140, v674[0]);
                        v147 = (uint64_t)&v140[(unint64_t)v674[0]];
                      }
                      if (v146)
                        v151 = (v147 >> 63) ^ 0x8000000000000000;
                      else
                        v151 = v147;
                      if (v145)
                        v152 = 1;
                      else
                        v152 = v635;
                      v153 = sub_1C60BC28C(v659, (uint64_t)v21, v22, v642);
                      if (!v153)
                      {
                        v155 = v128 < v151;
                        if (v130 != v152)
                          v155 = v130 < v152;
                        v4 = v652;
                        if (v155)
                          goto LABEL_41;
                        goto LABEL_306;
                      }
                      v154 = (unsigned __int8 *)v153;
                      if (v618 <= 0x11 && byte_1ED82C138)
                      {
LABEL_273:
                        v20 = 0;
                        v4 = v652;
                        goto LABEL_42;
                      }
                      v156 = (*(uint64_t (**)(_QWORD, uint64_t, _DWORD *, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v659 + 144) + 832))(**(_QWORD **)(v659 + 144), 7, v89, 0, 0, 0, 0);
                      v20 = 0;
                      if (v157 == 1)
                        v158 = 1;
                      else
                        v158 = v152;
                      v159 = v151 + v156;
                      if (__OFADD__(v151, v156))
                        v159 = ((v151 + v156) >> 63) ^ 0x8000000000000000;
                      v160 = v128 < v159;
                      v32 = v130 == v158;
                      v161 = v130 < v158;
                      if (v32)
                        v161 = v160;
                      v4 = v652;
                      if (!v161)
                      {
                        v162 = &v669;
                        if (v154 == v21)
                          v162 = (uint64_t *)&v668;
                        v163 = *((_QWORD *)v154 - 8);
                        if (*(unsigned __int8 *)(v163 + 16) < 0x15u)
                          goto LABEL_41;
                        v164 = *v162;
                        v165 = *((_QWORD *)v154 - 4);
                        v166 = (int *)(v165 + 24);
                        if (*(_DWORD *)(v165 + 32) >= 0x41u)
                          v166 = *(int **)v166;
                        v168 = sub_1C60BC3DC((llvm::PoisonValue **)v163, *v166, v164, (uint64_t)v656);
                        v169 = v164;
                        *(_WORD *)&v675[16] = 257;
                        v170 = **(_QWORD **)(v659 + 72);
                        v171 = *(llvm::ConstantInt **)(v170 + 1984);
                        v172 = *(_DWORD *)(v170 + 1992);
                        DWORD2(v678) = v172 >> 8;
                        if (v172 >> 8 > 0x40)
                        {
                          llvm::APInt::initSlowCase((llvm::APInt *)&v678, v169, 0);
                        }
                        else
                        {
                          if (v172 <= 0xFF)
                            v173 = 0;
                          else
                            v173 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v172);
                          *(_QWORD *)&v678 = v173 & v169;
                        }
                        v174 = llvm::ConstantInt::get(v171, (llvm::LLVMContext *)&v678, v167);
                        if (DWORD2(v678) >= 0x41 && (_QWORD)v678)
                          MEMORY[0x1CAA32F9C](v678, 0x1000C8000313F17);
                        v175 = sub_1C4772EE0(v656, v168, (uint64_t)v174, (uint64_t)v674);
                        if (v154 == v21)
                          v176 = v175;
                        else
                          v176 = v21;
                        if (v175)
                          v177 = v154 == v21;
                        else
                          v177 = 1;
                        if (!v177)
                          v22 = (uint64_t)v175;
                        if (!v175)
                          goto LABEL_273;
                        v21 = v176;
                        v4 = v652;
LABEL_306:
                        if (v23 == 42)
                        {
                          v178 = (_QWORD *)*((_QWORD *)v21 - 8);
                          v179 = *(_QWORD *)(v22 - 64);
                          v180 = *((unsigned __int8 *)a2 + 16) - 28;
                          *(_WORD *)&v675[16] = 257;
                          v181 = sub_1C4773860((uint64_t)v656, v180, v178, v179, (uint64_t)v674, 0);
                          v182 = v181;
                          if (v181 && v181[16] >= 0x1Cu)
                            llvm::Instruction::copyIRFlags((uint64_t)v181, (uint64_t)a2, 1);
                          v183 = *((_QWORD *)v21 - 4);
                          *(_WORD *)&v675[16] = 257;
                          v184 = v656;
                          v185 = (uint64_t)v182;
                        }
                        else
                        {
                          v408 = *((_WORD *)a2 + 9) & 0x3F;
                          v409 = (uint64_t *)*((_QWORD *)v21 - 8);
                          v410 = *(_QWORD *)(v22 - 64);
                          *(_WORD *)&v675[16] = 257;
                          if (v408 > 0xF)
                            FCmpHelper = sub_1C4774B48((uint64_t)v656, v408, (uint64_t)v409, v410, (uint64_t)v674);
                          else
                            FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)v656, v408, v409, v410, (uint64_t)v674, 0, 0);
                          v185 = FCmpHelper;
                          v183 = *((_QWORD *)v21 - 4);
                          *(_WORD *)&v675[16] = 257;
                          v184 = v656;
                        }
                        v413 = sub_1C4772EE0(v184, v185, v183, (uint64_t)v674);
                        sub_1C60BBED0(v659, (llvm::ValueAsMetadata *)a2, (llvm::Value *)v413);
                        v414 = v659 + 184;
                        v415 = *(_DWORD *)(v659 + 192);
                        v674[0] = v21;
                        LODWORD(v674[1]) = v415;
                        v416 = *(_DWORD *)(v659 + 2264);
                        if (v416)
                        {
                          v417 = *(_QWORD *)(v659 + 2248);
                          v418 = (v416 - 1) & ((v21 >> 4) ^ (v21 >> 9));
                          v419 = (unsigned __int8 **)(v417 + 16 * v418);
                          v420 = *v419;
                          if (*v419 == v21)
                            goto LABEL_639;
                          v421 = 0;
                          v422 = 1;
                          while (v420 != (unsigned __int8 *)-4096)
                          {
                            if (v421)
                              v423 = 0;
                            else
                              v423 = v420 == (unsigned __int8 *)-8192;
                            if (v423)
                              v421 = v419;
                            v424 = v418 + v422++;
                            v418 = v424 & (v416 - 1);
                            v419 = (unsigned __int8 **)(v417 + 16 * v418);
                            v420 = *v419;
                            if (*v419 == v21)
                              goto LABEL_639;
                          }
                          if (v421)
                            v425 = v421;
                          else
                            v425 = v419;
                        }
                        else
                        {
                          v425 = 0;
                        }
                        v426 = sub_1C4D8D8F4((_DWORD *)(v659 + 2248), (uint64_t)v674, (uint64_t *)v674, v425);
                        *v426 = v674[0];
                        *((_DWORD *)v426 + 2) = v674[1];
                        v427 = *(unsigned int *)(v659 + 192);
                        if (v427 >= *(_DWORD *)(v659 + 196))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod(v414, v659 + 200, v427 + 1, 8);
                          LODWORD(v427) = *(_DWORD *)(v659 + 192);
                        }
                        *(_QWORD *)(*(_QWORD *)(v659 + 184) + 8 * v427) = v21;
                        v415 = *(_DWORD *)(v659 + 192) + 1;
                        *(_DWORD *)(v659 + 192) = v415;
                        v417 = *(_QWORD *)(v659 + 2248);
                        v416 = *(_DWORD *)(v659 + 2264);
LABEL_639:
                        v674[0] = (void *)v22;
                        LODWORD(v674[1]) = v415;
                        if (v416)
                        {
                          v428 = v416 - 1;
                          v429 = (v416 - 1) & ((v22 >> 4) ^ (v22 >> 9));
                          v430 = (_QWORD *)(v417 + 16 * v429);
                          v431 = *v430;
                          if (*v430 == v22)
                          {
LABEL_656:
                            v20 = 1;
                            goto LABEL_42;
                          }
                          v432 = 0;
                          v433 = 1;
                          while (v431 != -4096)
                          {
                            if (v432)
                              v434 = 0;
                            else
                              v434 = v431 == -8192;
                            if (v434)
                              v432 = v430;
                            v435 = v429 + v433++;
                            v429 = v435 & v428;
                            v430 = (_QWORD *)(v417 + 16 * v429);
                            v431 = *v430;
                            if (*v430 == v22)
                              goto LABEL_656;
                          }
                          if (v432)
                            v436 = v432;
                          else
                            v436 = v430;
                        }
                        else
                        {
                          v436 = 0;
                        }
                        v437 = sub_1C4D8D8F4((_DWORD *)(v659 + 2248), (uint64_t)v674, (uint64_t *)v674, v436);
                        *v437 = v674[0];
                        *((_DWORD *)v437 + 2) = v674[1];
                        v438 = *(unsigned int *)(v659 + 192);
                        if (v438 >= *(_DWORD *)(v659 + 196))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod(v414, v659 + 200, v438 + 1, 8);
                          LODWORD(v438) = *(_DWORD *)(v659 + 192);
                        }
                        *(_QWORD *)(*(_QWORD *)(v659 + 184) + 8 * v438) = v22;
                        ++*(_DWORD *)(v659 + 192);
                        goto LABEL_656;
                      }
LABEL_42:
                      *(_BYTE *)v4[1] |= v20;
                      *(_QWORD *)v660 = 0;
                      v670 = 0;
                      v671 = 0;
                      v674[0] = v660;
                      *(_QWORD *)v675 = &v670;
                      v24 = *((unsigned __int8 *)a2 + 16);
                      v348 = v24 >= 0x1C;
                      v25 = v24 - 28;
                      if (!v348)
                        v25 = *((unsigned __int16 *)a2 + 9);
                      if (v25 != 49
                        || ((v26 = *((_DWORD *)a2 + 5), (v26 & 0x40000000) != 0)
                          ? (v27 = (uint64_t *)*(a2 - 1))
                          : (v27 = (uint64_t *)&a2[-4 * (v26 & 0x7FFFFFF)]),
                            (v28 = *v27, (v29 = *(_QWORD *)(*v27 + 8)) == 0)
                         || *(_QWORD *)(v29 + 8)
                         || !sub_1C57907A8((uint64_t)v674, v28)))
                      {
                        LOBYTE(v2) = 0;
LABEL_64:
                        v35 = (char *)v4[1];
                        v36 = *v35 | v2;
                        *v35 = v36;
                        v37 = *a2;
                        if (*((unsigned __int8 *)a2 + 16) - 41 > 0x11 || *((_DWORD *)v37 + 2) != 269)
                        {
                          LOBYTE(v40) = 0;
                          goto LABEL_84;
                        }
                        v38 = *((_DWORD *)a2 + 5);
                        if ((v38 & 0x40000000) != 0)
                          v39 = (uint64_t *)*(a2 - 1);
                        else
                          v39 = (uint64_t *)&a2[-4 * (v38 & 0x7FFFFFF)];
                        v41 = *v39;
                        v2 = v39[4];
                        v662 = 0;
                        v668 = 0;
                        v669 = 0;
                        v666 = 0;
                        v673 = 0;
                        v674[0] = (char *)&v666 + 4;
                        v674[1] = &v662;
                        *(_QWORD *)v675 = &v669;
                        v42 = *(_QWORD *)(v41 + 8);
                        if (!v42)
                          goto LABEL_82;
                        if (*(_QWORD *)(v42 + 8))
                          goto LABEL_82;
                        if (!sub_1C60BC4D8((uint64_t)v674, v41))
                          goto LABEL_82;
                        *(_QWORD *)&v678 = &v666;
                        *((_QWORD *)&v678 + 1) = &v673;
                        *(_QWORD *)&v679 = &v668;
                        v43 = *(_QWORD *)(v2 + 8);
                        if (!v43)
                          goto LABEL_82;
                        if (*(_QWORD *)(v43 + 8))
                          goto LABEL_82;
                        if (!sub_1C60BC4D8((uint64_t)&v678, v2))
                          goto LABEL_82;
                        if (HIDWORD(v666) != (_DWORD)v666)
                          goto LABEL_82;
                        v667 = 0;
                        v664 = 0;
                        v665 = 0;
                        v674[0] = &v667;
                        v674[1] = &v665;
                        v44 = *((_QWORD *)v662 + 1);
                        if (!v44
                          || *(_QWORD *)(v44 + 8)
                          || !sub_1C60BC230((_QWORD **)v674, (uint64_t)v662)
                          || (*(_QWORD *)&v678 = v667, *((_QWORD *)&v678 + 1) = &v664,
                                                       (v45 = *(_QWORD *)(v673 + 8)) == 0)
                          || *(_QWORD *)(v45 + 8))
                        {
LABEL_82:
                          LOBYTE(v40) = 0;
LABEL_83:
                          v35 = (char *)v4[1];
                          v36 = *v35;
                          v37 = *a2;
LABEL_84:
                          v46 = 0;
                          v47 = v36 | v40;
                          *v35 = v47;
                          if (!v37 || *((_BYTE *)v37 + 8) != 18 || *((_BYTE *)a2 + 16) != 91)
                            goto LABEL_90;
                          v48 = (uint64_t)*(a2 - 8);
                          v49 = *(_QWORD *)(v48 + 8);
                          if (v49 && !*(_QWORD *)(v49 + 8))
                          {
                            v46 = 0;
                            v61 = *(unsigned __int8 *)(v48 + 16);
                            if (v61 < 0x1C || v61 - 59 < 0xFFFFFFEE)
                              goto LABEL_90;
                            v62 = (uint64_t)*(a2 - 4);
                            v63 = *(_QWORD *)(v62 + 8);
                            if (v63)
                            {
                              if (!*(_QWORD *)(v63 + 8))
                              {
                                v46 = 0;
                                v64 = *(unsigned __int8 *)(v62 + 16);
                                if (v64 < 0x1C || v64 - 59 < 0xFFFFFFEE)
                                  goto LABEL_90;
                                if (v61 == v64 && *(uint64_t ***)v48 == v37)
                                {
                                  v65 = a2[8];
                                  v66 = *((unsigned int *)a2 + 18);
                                  llvm::createUnaryMask(v65, v66, *((_DWORD *)a2 + 18), (uint64_t)v674);
                                  *(_QWORD *)&v678 = &v679;
                                  *((_QWORD *)&v678 + 1) = 0xC00000000;
                                  if (LODWORD(v674[1]))
                                    sub_1C614C900((uint64_t)&v678, (uint64_t)v674);
                                  v651 = v4;
                                  if (v674[0] != v675)
                                    free(v674[0]);
                                  v67 = *(unsigned __int8 *)(v48 + 16);
                                  v634 = v67 - 28;
                                  v2 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v659 + 144) + 824))(**(_QWORD **)(v659 + 144));
                                  v69 = v68;
                                  v46 = 0;
                                  v71 = v2 < (*(uint64_t (**)(_QWORD, uint64_t, uint64_t **, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v659 + 144) + 832))(**(_QWORD **)(v659 + 144), 7, v37, v678, DWORD2(v678), 0, 0);
                                  if (v69 != v70)
                                    v71 = v69 < v70;
                                  if (v71)
                                    goto LABEL_701;
                                  v72 = *(llvm::PoisonValue ***)(v62 - 64);
                                  v2 = *(_QWORD *)(v62 - 32);
                                  if ((v67 > 0x3A) | (0xFF99FFFFFFFFFFuLL >> v67) & 1 | (*(_QWORD *)(v48 - 64) == (_QWORD)v72) | (*(_QWORD *)(v48 - 32) == v2))
                                    v73 = *(_QWORD *)(v48 - 32);
                                  else
                                    v73 = *(_QWORD *)(v48 - 64);
                                  if ((v67 > 0x3A) | (0xFF99FFFFFFFFFFuLL >> v67) & 1 | (*(_QWORD *)(v48 - 64) == (_QWORD)v72) | (*(_QWORD *)(v48 - 32) == v2))
                                    v74 = *(llvm::Type **)(v48 - 64);
                                  else
                                    v74 = *(llvm::Type **)(v48 - 32);
                                  if (v74 == (llvm::Type *)v72)
                                  {
                                    v623 = DWORD2(v678);
                                    v631 = (llvm::PointerType *)v678;
                                    *(_WORD *)&v675[16] = 257;
                                    v440 = llvm::PoisonValue::get(*v72, v74);
                                    v441 = (uint64_t)v656;
                                    v442 = (_QWORD *)sub_1C486AD20((uint64_t)v656, (uint64_t)v72, (uint64_t)v440, v631, v623, (uint64_t)v674);
                                    *(_WORD *)&v675[16] = 257;
                                    v443 = (uint64_t)v656;
                                    v444 = v73;
                                    v445 = (_QWORD *)v2;
                                  }
                                  else
                                  {
                                    if (v73 != v2)
                                    {
                                      v46 = 0;
LABEL_701:
                                      v4 = v651;
                                      if ((__int128 *)v678 != &v679)
                                        free((void *)v678);
                                      v35 = (char *)v651[1];
                                      v47 = *v35;
                                      goto LABEL_90;
                                    }
                                    *(_WORD *)&v675[16] = 257;
                                    v441 = (uint64_t)v656;
                                    v442 = (_QWORD *)sub_1C486AD20((uint64_t)v656, (uint64_t)v74, (uint64_t)v72, v65, v66, (uint64_t)v674);
                                    v65 = (uint64_t **)v678;
                                    v66 = DWORD2(v678);
                                    *(_WORD *)&v675[16] = 257;
                                    v445 = llvm::PoisonValue::get(*(llvm::PoisonValue **)v2, v479);
                                    v443 = (uint64_t)v656;
                                    v444 = v2;
                                  }
                                  v480 = sub_1C486AD20(v443, v444, (uint64_t)v445, v65, v66, (uint64_t)v674);
                                  *(_WORD *)&v675[16] = 257;
                                  v481 = sub_1C4773860(v441, v634, v442, v480, (uint64_t)v674, 0);
                                  v2 = (uint64_t)v481;
                                  if (v481 && v481[16] >= 0x1Cu)
                                  {
                                    llvm::Instruction::copyIRFlags((uint64_t)v481, v48, 1);
                                    llvm::Instruction::andIRFlags(v2, v62);
                                  }
                                  sub_1C60BBED0(v659, (llvm::ValueAsMetadata *)a2, (llvm::Value *)v2);
                                  v46 = 1;
                                  goto LABEL_701;
                                }
                              }
                            }
                          }
                          v46 = 0;
LABEL_90:
                          *v35 = v47 | v46;
                          goto LABEL_91;
                        }
                        v655 = v4;
                        if ((sub_1C627D000((uint64_t)&v678, v673) & 1) != 0
                          && (v515 = v662, v2 = v673, (v516 = sub_1C60BC28C(v659, (uint64_t)v662, v673, -1)) != 0))
                        {
                          LOBYTE(v40) = 0;
                          v517 = *(_QWORD *)v667;
                          if (*(_QWORD *)v667)
                          {
                            if (*(_BYTE *)(v517 + 8) != 18)
                              goto LABEL_83;
                            v518 = (llvm::Constant *)v516;
                            v519 = HIDWORD(v666);
                            if (HIDWORD(v666) >= 0x10)
                              v520 = 53;
                            else
                              v520 = 54;
                            v647 = v520;
                            v521 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(***(_QWORD ***)(v659 + 144)
                                                                                              + 872))(**(_QWORD **)(v659 + 144), *((unsigned __int8 *)v515 + 16) - 28, v517, v665);
                            v633 = v522;
                            v523 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(***(_QWORD ***)(v659 + 144)
                                                                                              + 872))(**(_QWORD **)(v659 + 144), *(unsigned __int8 *)(v2 + 16) - 28, v517, v664);
                            v626 = v524;
                            if (__OFADD__(v521, v523))
                              v525 = ((v521 + v523) >> 63) ^ 0x8000000000000000;
                            else
                              v525 = v521 + v523;
                            v526 = *(_QWORD **)(v659 + 144);
                            v527 = *(_QWORD *)v662;
                            v528 = sub_1C4774CC4(*(_DWORD **)v662);
                            v530 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, double))(*(_QWORD *)*v526 + 864))(*v526, v520, v527, v529, v519, 0, 0, v528);
                            *(_QWORD *)&v678 = 2;
                            DWORD2(v678) = 0;
                            v674[0] = v530;
                            v674[1] = v531;
                            sub_1C4848B64((uint64_t)v674, (uint64_t)&v678);
                            v617 = (int)v674[1];
                            if (__OFADD__(v525, v674[0]))
                              v532 = (char *)(((uint64_t)((uint64_t)v674[0] + v525) >> 63) ^ 0x8000000000000000);
                            else
                              v532 = (char *)v674[0] + v525;
                            v533 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t **, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v659 + 144) + 824))(**(_QWORD **)(v659 + 144), *((unsigned __int8 *)a2 + 16) - 28, *a2, 0, 0, 0, 0, 0, 0, 0, 0);
                            v535 = (unint64_t)&v532[v533];
                            if (__OFADD__(v532, v533))
                              v535 = ((uint64_t)&v532[v533] >> 63) ^ 0x8000000000000000;
                            v611 = v534;
                            v614 = v535;
                            v536 = v518 == v515;
                            if (v518 == v515)
                              v537 = v664;
                            else
                              v537 = v665;
                            if (v536)
                              v538 = v665;
                            else
                              v538 = v664;
                            sub_1C4774CC4(*(_DWORD **)v667);
                            v2 = v539;
                            v540 = *(_QWORD **)(v659 + 144);
                            v541 = *(_QWORD *)v667;
                            v542 = sub_1C4774CC4(*(_DWORD **)v667);
                            v543 = v647;
                            v648 = v519;
                            v545 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, double))(*(_QWORD *)*v540 + 864))(*v540, v543, v541, v544, v519, 0, 0, v542);
                            v547 = v546;
                            v548 = *(unsigned int *)(v517 + 32);
                            *(_QWORD *)&v678 = &v679;
                            *((_QWORD *)&v678 + 1) = 0x2000000000;
                            sub_1C4893E04((char *)&v678, v548, -1);
                            v609 = v538;
                            *(_DWORD *)(v678 + 4 * (int)v537) = v538;
                            v549 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(***(_QWORD ***)(v659 + 144)
                                                                                       + 832))(**(_QWORD **)(v659 + 144), 7, v2);
                            v551 = v550;
                            if (__OFADD__(v545, v549))
                              v552 = ((v545 + v549) >> 63) ^ 0x8000000000000000;
                            else
                              v552 = v545 + v549;
                            v553 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v659 + 144) + 824))(**(_QWORD **)(v659 + 144), *((unsigned __int8 *)a2 + 16) - 28, v2, 0, 0, 0, 0, 0, 0, 0, 0);
                            v555 = v554;
                            if (__OFADD__(v552, v553))
                              v556 = ((uint64_t)(v552 + v553) >> 63) ^ 0x8000000000000000;
                            else
                              v556 = v552 + v553;
                            v557 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(***(_QWORD ***)(v659 + 144)
                                                                                               + 872))(**(_QWORD **)(v659 + 144), *((unsigned __int8 *)v515 + 16) - 28, v2, v537);
                            v559 = v556 + v557;
                            if (__OFADD__(v556, v557))
                              v559 = ((uint64_t)(v556 + v557) >> 63) ^ 0x8000000000000000;
                            if (v626 == 1 || v617 == 1 || v611 == 1)
                              v562 = 1;
                            else
                              v562 = v633;
                            if (v551 == 1 || v555 == 1 || (_DWORD)v558 == 1)
                              v565 = 1;
                            else
                              v565 = v547;
                            v566 = v614 >= v559;
                            v32 = v562 == v565;
                            v567 = v562 >= v565;
                            if (!v32)
                              v566 = v567;
                            if (v565)
                              v40 = 0;
                            else
                              v40 = v566;
                            if (v40)
                            {
                              v568 = *(unsigned int *)(v517 + 32);
                              v569 = llvm::UndefValue::get(*(llvm::UndefValue **)(v517 + 24), v558);
                              v674[0] = v675;
                              v674[1] = (void *)0x2000000000;
                              sub_1C4848C0C((unsigned int *)v674, v568, (uint64_t)v569);
                              *((_QWORD *)v674[0] + v665) = v669;
                              *((_QWORD *)v674[0] + v664) = v668;
                              v570 = (uint64_t *)v667;
                              v571 = (llvm::FixedVectorType ***)v674[0];
                              v572 = LODWORD(v674[1]);
                              Impl = (uint64_t)llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v674[0], (llvm::Type *)LODWORD(v674[1]));
                              if (!Impl)
                              {
                                llvm::FixedVectorType::get(**v571, (llvm::Type *)v572);
                                Impl = sub_1C537B3A4(**v574 + 1288, (uint64_t)v574, v571, v572);
                              }
                              v672 = 257;
                              if (v648 > 0xF)
                                v575 = (llvm::PoisonValue **)sub_1C4774B48((uint64_t)v656, v648, (uint64_t)v570, Impl, (uint64_t)&v670);
                              else
                                v575 = (llvm::PoisonValue **)llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)v656, v648, v570, Impl, (uint64_t)&v670, 0, 0);
                              v588 = v575;
                              v589 = sub_1C60BC3DC(v575, v609, v537, (uint64_t)v656);
                              v590 = *((unsigned __int8 *)a2 + 16) - 28;
                              v672 = 257;
                              v2 = (uint64_t)sub_1C4773860((uint64_t)v656, v590, v588, v589, (uint64_t)&v670, 0);
                              v672 = 257;
                              v592 = **(_QWORD **)(v659 + 72);
                              v593 = *(llvm::ConstantInt **)(v592 + 1984);
                              v594 = *(_DWORD *)(v592 + 1992);
                              v660[2] = v594 >> 8;
                              if (v594 >> 8 > 0x40)
                              {
                                llvm::APInt::initSlowCase((llvm::APInt *)v660, (int)v537, 0);
                              }
                              else
                              {
                                if (v594 <= 0xFF)
                                  v595 = 0;
                                else
                                  v595 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v594);
                                *(_QWORD *)v660 = v595 & (int)v537;
                              }
                              v596 = llvm::ConstantInt::get(v593, (llvm::LLVMContext *)v660, v591);
                              if (v660[2] >= 0x41 && *(_QWORD *)v660)
                                MEMORY[0x1CAA32F9C](*(_QWORD *)v660, 0x1000C8000313F17);
                              v597 = sub_1C4772EE0(v656, v2, (uint64_t)v596, (uint64_t)&v670);
                              sub_1C60BBED0(v659, (llvm::ValueAsMetadata *)a2, (llvm::Value *)v597);
                              if (v674[0] != v675)
                                free(v674[0]);
                            }
                            if ((__int128 *)v678 != &v679)
                              free((void *)v678);
                          }
                        }
                        else
                        {
                          LOBYTE(v40) = 0;
                        }
                        v4 = v655;
                        goto LABEL_83;
                      }
                      v30 = v4;
                      if (*((_BYTE *)*a2 + 8) == 18)
                        v31 = (uint64_t)*a2;
                      else
                        v31 = 0;
                      if (*(_BYTE *)(**(_QWORD **)v660 + 8) == 18)
                        v2 = **(_QWORD **)v660;
                      else
                        v2 = 0;
                      if (v2)
                        v32 = v31 == 0;
                      else
                        v32 = 1;
                      if (v32
                        || ((v33 = *((_DWORD *)a2 + 5), (v33 & 0x40000000) != 0)
                          ? (v34 = (uint64_t ***)*(a2 - 1))
                          : (v34 = &a2[-4 * (v33 & 0x7FFFFFF)]),
                            **v34 != (uint64_t *)v2))
                      {
                        LOBYTE(v2) = 0;
LABEL_165:
                        v4 = v30;
                        goto LABEL_64;
                      }
                      v80 = *(_DWORD *)(v31 + 32);
                      v81 = *(_DWORD *)(v2 + 32);
                      v674[0] = v675;
                      v674[1] = (void *)0x1000000000;
                      if (v81 <= v80)
                      {
                        llvm::narrowShuffleMaskElts((void *)(v80 / v81), v670, v671, (uint64_t)v674);
                      }
                      else if (!llvm::widenShuffleMaskElts(v81 / v80, v670, v671, (uint64_t)v674))
                      {
                        LOBYTE(v2) = 0;
LABEL_183:
                        if (v674[0] != v675)
                          free(v674[0]);
                        goto LABEL_165;
                      }
                      v94 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, void *, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v659 + 144) + 832))(**(_QWORD **)(v659 + 144), 7, v31, v674[0], LODWORD(v674[1]), 0, 0);
                      v96 = v95;
                      v97 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, char *, unint64_t, _QWORD, _QWORD))(***(_QWORD ***)(v659 + 144) + 832))(**(_QWORD **)(v659 + 144), 7, v2, v670, v671, 0, 0);
                      LOBYTE(v2) = 0;
                      v99 = v97 >= v94;
                      if (v98 != v96)
                        v99 = v98 >= v96;
                      if (!v96 && v99)
                      {
                        LOWORD(v680) = 257;
                        v2 = (uint64_t)sub_1C4773E38(v656, 49, *(unsigned __int8 **)v660, v31, (uint64_t)&v678);
                        v100 = v674[0];
                        v101 = LODWORD(v674[1]);
                        LOWORD(v680) = 257;
                        v103 = llvm::PoisonValue::get(*(llvm::PoisonValue **)v2, v102);
                        v104 = (llvm::Value *)sub_1C486AD20((uint64_t)v656, v2, (uint64_t)v103, v100, v101, (uint64_t)&v678);
                        sub_1C60BBED0(v659, (llvm::ValueAsMetadata *)a2, v104);
                        LOBYTE(v2) = 1;
                      }
                      goto LABEL_183;
                    }
                    if ((v19 - 59) >= 0xFFFFFFEE)
                    {
                      v20 = 0;
                      v21 = (unsigned __int8 *)*(a2 - 8);
                      if (!v21)
                        goto LABEL_42;
                      if (v21[16] < 0x1Cu)
                        goto LABEL_42;
                      v20 = 0;
                      v22 = (uint64_t)*(a2 - 4);
                      if (!v22 || *(unsigned __int8 *)(v22 + 16) < 0x1Cu)
                        goto LABEL_42;
                      v23 = 42;
                      goto LABEL_38;
                    }
                  }
LABEL_41:
                  v20 = 0;
                  goto LABEL_42;
                }
                v453 = v452 / PrimitiveSizeInBits;
                if (!((v452 % PrimitiveSizeInBits) | PrimitiveSizeInBits & 7))
                {
                  llvm::FixedVectorType::get(v449, (llvm::Type *)v453);
                  v624 = __clz(1 << ((unint64_t)*((unsigned __int16 *)v16 + 9) >> 1)) ^ 0x3F;
                  v632 = (llvm::PointerType *)v454;
                  v639 = (llvm::DataLayout *)(v446 + 272);
                  if (llvm::isSafeToLoadUnconditionally(v645, v454, 0, (const llvm::DataLayout *)(v446 + 272), v16, *(unsigned __int8 **)(v659 + 152), 0))
                  {
                    v616 = 0;
                    goto LABEL_717;
                  }
                  LODWORD(v674[1]) = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)v639, *v645);
                  if (LODWORD(v674[1]) > 0x40)
                    llvm::APInt::initSlowCase((llvm::APInt *)v674, 0, 0);
                  else
                    v674[0] = 0;
                  v645 = (uint64_t *)llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)v645, v639, (const void **)v674, 0, 0, 0, v482);
                  if (LODWORD(v674[1]) >= 0x41)
                    v483 = (void **)((char *)v674[0] + 8 * ((LODWORD(v674[1]) - 1) >> 6));
                  else
                    v483 = v674;
                  if ((((unint64_t)*v483 >> (LOBYTE(v674[1]) - 1)) & 1) != 0
                    || llvm::APInt::urem((uint64_t **)v674, PrimitiveSizeInBits >> 3))
                  {
                    v616 = 0;
                  }
                  else
                  {
                    llvm::APInt::udiv((llvm::APInt *)v674, PrimitiveSizeInBits >> 3, (llvm::APInt *)&v678);
                    if (DWORD2(v678) >= 0x41)
                      v576 = (__int128 *)v678;
                    else
                      v576 = &v678;
                    v616 = *(_DWORD *)v576;
                    if (DWORD2(v678) >= 0x41 && (_QWORD)v678)
                      MEMORY[0x1CAA32F9C]();
                    if (v616 < v453
                      && llvm::isSafeToLoadUnconditionally(v645, (uint64_t)v632, 0, v639, v16, *(unsigned __int8 **)(v659 + 152), 0))
                    {
                      v577 = v674;
                      if (LODWORD(v674[1]) >= 0x41)
                        v577 = (void **)v674[0];
                      v484 = 1;
                      v624 = 63
                           - __clz(((unint64_t)*v577 | (1 << v624)) & -(uint64_t)((unint64_t)*v577 | (1 << v624)));
LABEL_713:
                      if (LODWORD(v674[1]) >= 0x41 && v674[0])
                        MEMORY[0x1CAA32F9C](v674[0], 0x1000C8000313F17);
                      if (!v484)
                        goto LABEL_24;
LABEL_717:
                      llvm::Value::getPointerAlignment((llvm::Value *)v645, v639);
                      if (v485 <= v624)
                        v486 = v624;
                      else
                        v486 = v485;
                      v640 = v486;
                      v625 = v448 >> 8;
                      v487 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(***(_QWORD ***)(v659 + 144) + 888))(**(_QWORD **)(v659 + 144), 32, *v16);
                      v613 = v488;
                      v489 = 0;
                      v663 = v453;
                      if (v453 >= 0x41)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v662, 0, 0);
                        if (v663 > 0x40)
                        {
                          *(_QWORD *)v662 |= 1uLL;
                          goto LABEL_722;
                        }
                        v489 = v662;
                      }
                      v662 = (llvm::Constant *)((unint64_t)v489 | 1);
LABEL_722:
                      v490 = (*(uint64_t (**)(_QWORD, llvm::PointerType *, llvm::Constant **, uint64_t, uint64_t))(***(_QWORD ***)(v659 + 144) + 528))(**(_QWORD **)(v659 + 144), v632, &v662, 1, v405);
                      v492 = v491;
                      if (__OFADD__(v487, v490))
                        v493 = ((v487 + v490) >> 63) ^ 0x8000000000000000;
                      else
                        v493 = v487 + v490;
                      v494 = (*(uint64_t (**)(_QWORD, uint64_t, llvm::PointerType *, unint64_t, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v659 + 144) + 888))(**(_QWORD **)(v659 + 144), 32, v632, v640, v625, 0, 0);
                      v496 = v495;
                      v497 = *((unsigned int *)v7 + 8);
                      *(_QWORD *)&v678 = &v679;
                      *((_QWORD *)&v678 + 1) = 0x1000000000;
                      sub_1C4893E04((char *)&v678, v497, -1);
                      *(_DWORD *)v678 = v616;
                      if (v616)
                      {
                        v498 = (*(uint64_t (**)(_QWORD, uint64_t, llvm::PointerType *))(***(_QWORD ***)(v659 + 144)
                                                                                               + 832))(**(_QWORD **)(v659 + 144), 7, v632);
                        if (v499 == 1)
                          v496 = 1;
                        if (__OFADD__(v494, v498))
                          v494 = ((v494 + v498) >> 63) ^ 0x8000000000000000;
                        else
                          v494 += v498;
                      }
                      if (v492 == 1)
                        v500 = 1;
                      else
                        v500 = v613;
                      v32 = v500 == v496;
                      v501 = v500 >= v496;
                      if (v32)
                        v501 = v493 >= v494;
                      if (v496)
                        v18 = 0;
                      else
                        v18 = v501;
                      if (!v18)
                        goto LABEL_747;
                      sub_1C4773D54((uint64_t)v674, (uint64_t)v16, 0, 0, 0);
                      v502 = llvm::PointerType::get(v632, (llvm::Type *)v625);
                      v672 = 257;
                      v503 = sub_1C5699F0C((uint64_t *)v674, v645, v502, (uint64_t)&v670);
                      v661 = 257;
                      v504 = (char *)operator new(0x60uLL);
                      v505 = v504;
                      v506 = (llvm::PoisonValue **)(v504 + 32);
                      *((_QWORD *)v504 + 2) = 0;
                      *((_QWORD *)v504 + 3) = v504 + 32;
                      v672 = 257;
                      *((_QWORD *)v504 + 4) = v632;
                      *((_QWORD *)v504 + 5) = 0;
                      *((_WORD *)v504 + 24) = 60;
                      *((_DWORD *)v504 + 13) = 1;
                      *(_OWORD *)(v504 + 56) = 0u;
                      *(_OWORD *)(v504 + 72) = 0u;
                      *((_DWORD *)v504 + 22) = 0;
                      *(_QWORD *)v504 = v503;
                      *((_QWORD *)v504 + 1) = 0;
                      if (v503)
                      {
                        v509 = *((_QWORD *)v503 + 1);
                        v508 = v503 + 8;
                        v507 = v509;
                        *((_QWORD *)v504 + 1) = v509;
                        if (v509)
                          *(_QWORD *)(v507 + 16) = v504 + 8;
                        *((_QWORD *)v504 + 2) = v508;
                        *v508 = v504;
                      }
                      *((_WORD *)v504 + 25) = 2 * (v640 & 0x3F);
                      v504[92] = 1;
                      llvm::Value::setName((uint64_t ***)v504 + 4, (uint64_t)&v670);
                      (*(void (**)(uint64_t, llvm::PoisonValue **, unsigned int *, _QWORD, uint64_t))(*(_QWORD *)v677 + 16))(v677, v506, v660, *(_QWORD *)&v675[32], v676);
                      if (!LODWORD(v674[1]))
                      {
LABEL_745:
                        v511 = (void *)v678;
                        v512 = DWORD2(v678);
                        v672 = 257;
                        v513 = llvm::PoisonValue::get(*v506, v510);
                        v514 = (llvm::Value *)sub_1C486AD20((uint64_t)v674, (uint64_t)v506, (uint64_t)v513, v511, v512, (uint64_t)&v670);
                        sub_1C60BBED0(v659, (llvm::ValueAsMetadata *)a2, v514);
                        if (v674[0] != v675)
                          free(v674[0]);
LABEL_747:
                        if ((__int128 *)v678 != &v679)
                          free((void *)v678);
                        if (v663 >= 0x41 && v662)
                          MEMORY[0x1CAA32F9C](v662, 0x1000C8000313F17);
                        goto LABEL_25;
                      }
                      v578 = (char *)v674[0];
                      v579 = (char *)v674[0] + 16 * LODWORD(v674[1]);
                      v580 = (llvm::Type **)(v505 + 80);
                      while (1)
                      {
                        v581 = *(_DWORD *)v578;
                        v582 = (unsigned __int8 *)*((_QWORD *)v578 + 1);
                        if (v582)
                        {
                          if (!v581)
                          {
                            v673 = *((_QWORD *)v578 + 1);
                            llvm::MetadataTracking::track((uint64_t)&v673, v582, 2);
                            v510 = *v580;
                            goto LABEL_842;
                          }
                        }
                        else
                        {
                          v510 = *v580;
                          if (!*v580 && (v505[55] & 0x20) == 0)
                            goto LABEL_839;
                          if (!v581)
                          {
                            v673 = 0;
LABEL_842:
                            if (v510)
                              llvm::MetadataTracking::untrack((uint64_t)(v505 + 80), (unsigned __int8 *)v510);
                            v510 = (llvm::Type *)v673;
                            *v580 = (llvm::Type *)v673;
                            if (v510)
                              llvm::MetadataTracking::retrack((uint64_t)&v673, (unsigned __int8 *)v510, (uint64_t)(v505 + 80));
                            goto LABEL_839;
                          }
                        }
                        llvm::Value::setMetadata((llvm::Value *)v506, *(_DWORD *)v578, (llvm::MDNode *)v582);
LABEL_839:
                        v578 += 16;
                        if (v578 == v579)
                          goto LABEL_745;
                      }
                    }
                  }
                  v484 = 0;
                  goto LABEL_713;
                }
              }
            }
          }
LABEL_24:
          LOBYTE(v18) = 0;
          goto LABEL_25;
        }
        v16 = (_QWORD *)v669;
      }
    }
    v405 = 0;
    v668 = v16;
    goto LABEL_608;
  }
LABEL_91:
  v50 = *((unsigned __int8 *)a2 + 16);
  if ((v50 - 41) > 0x11)
  {
    if ((v50 - 83) >= 0xFFFFFFFE)
    {
      v51 = (uint64_t)*(a2 - 8);
      if (v51)
      {
        v52 = (uint64_t)*(a2 - 4);
        if (v52)
        {
          v53 = *((_WORD *)a2 + 9) & 0x3F;
          if (v53 == 42)
            goto LABEL_95;
          v57 = a2[1];
          if (!v57)
          {
LABEL_115:
            v54 = 0;
LABEL_96:
            *(_QWORD *)v660 = 0;
            v662 = 0;
            v668 = 0;
            v669 = 0;
            v667 = 0;
            v673 = 0;
            v674[0] = v660;
            v674[1] = &v673;
            *(_QWORD *)v675 = &v668;
            if ((sub_1C60BC554((_QWORD **)v674, v51) & 1) == 0)
            {
              if (*(unsigned __int8 *)(v51 + 16) > 0x14u)
                goto LABEL_103;
              *(_QWORD *)v660 = v51;
            }
            v674[0] = &v662;
            v674[1] = &v669;
            *(_QWORD *)v675 = &v667;
            if ((sub_1C60BC554((_QWORD **)v674, v52) & 1) != 0)
              goto LABEL_102;
            if (*(unsigned __int8 *)(v52 + 16) <= 0x14u)
            {
              v662 = (llvm::Constant *)v52;
LABEL_102:
              v2 = v673;
              v55 = v669;
              if (!(v673 | v669))
                goto LABEL_103;
              v641 = v673;
              if (v673 && v669)
              {
                if (v668 != (_QWORD *)v667)
                  goto LABEL_103;
                goto LABEL_317;
              }
              if (v673)
              {
                if (v669)
                  goto LABEL_317;
                v75 = *(unsigned __int8 *)(v673 + 16);
                if (v75 <= 0x1B)
                  goto LABEL_317;
                v76 = v75 - 33;
                if (v76 > 0x37)
                  goto LABEL_317;
                if (((1 << v76) & 0x8000000000041) != 0)
                {
                  v134 = *(_QWORD *)(v673 + 64);
                  if (!v134 || (*(_BYTE *)(v134 + 20) & 4) == 0 && (*(_BYTE *)(v134 + 17) & 0x10) == 0)
                  {
                    LODWORD(v674[0]) = 7;
                    if (sub_1C53E4BBC(v673, (__int32 *)v674, 1uLL))
                    {
                      v604 = *(_QWORD *)(v2 - 32);
                      if (!v604)
                        goto LABEL_103;
                      if (*(_BYTE *)(v604 + 16))
                        goto LABEL_103;
                      if (*(_QWORD *)(v604 + 24) != *(_QWORD *)(v641 + 72))
                        goto LABEL_103;
                      v2 = v641;
                      if (*(_DWORD *)(v604 + 36) != 7)
                        goto LABEL_103;
                    }
                    if ((llvm::CallBase::hasFnAttrOnCalledFunction(v2, 66) & 1) == 0
                      && !llvm::CallBase::hasFnAttrOnCalledFunction(v2, 44))
                    {
                      goto LABEL_103;
                    }
                  }
                  goto LABEL_317;
                }
                if (((1 << v76) & 0x808001C8000010) != 0)
                  goto LABEL_103;
                if (v76 == 28)
                {
                  v77 = *(_WORD *)(v673 + 18);
                  goto LABEL_160;
                }
              }
              else
              {
                if (!v669)
                  goto LABEL_317;
                v78 = *(unsigned __int8 *)(v669 + 16);
                if (v78 < 0x1C)
                  goto LABEL_317;
                v79 = v78 - 33;
                if (v79 > 0x37)
                  goto LABEL_317;
                if (((1 << v79) & 0x8000000000041) != 0)
                {
                  v186 = *(_QWORD *)(v669 + 64);
                  if (!v186 || (*(_BYTE *)(v186 + 20) & 4) == 0 && (*(_BYTE *)(v186 + 17) & 0x10) == 0)
                  {
                    LODWORD(v674[0]) = 7;
                    if (sub_1C53E4BBC(v669, (__int32 *)v674, 1uLL))
                    {
                      v605 = *(_QWORD *)(v55 - 32);
                      if (!v605)
                        goto LABEL_103;
                      if (*(_BYTE *)(v605 + 16))
                        goto LABEL_103;
                      if (*(_QWORD *)(v605 + 24) != *(_QWORD *)(v55 + 72))
                        goto LABEL_103;
                      v2 = v641;
                      if (*(_DWORD *)(v605 + 36) != 7)
                        goto LABEL_103;
                    }
                    if ((llvm::CallBase::hasFnAttrOnCalledFunction(v55, 66) & 1) == 0
                      && (llvm::CallBase::hasFnAttrOnCalledFunction(v55, 44) & 1) == 0)
                    {
                      goto LABEL_103;
                    }
                  }
                  goto LABEL_317;
                }
                if (((1 << v79) & 0x808001C8000010) != 0)
                  goto LABEL_103;
                if (v79 == 28)
                {
                  v77 = *(_WORD *)(v669 + 18);
LABEL_160:
                  if ((v77 & 0x301) != 0)
                    goto LABEL_103;
                }
              }
LABEL_317:
              v653 = v4;
              v187 = (unint64_t)v668;
              v608 = v667;
              if (!v2)
                v187 = v667;
              v636 = v187;
              v188 = &v673;
              if (!v2)
                v188 = &v669;
              v189 = *(_DWORD **)*v188;
              v190 = *a2;
              v191 = *((unsigned __int8 *)a2 + 16);
              v192 = (v191 - 28);
              v615 = v54;
              v612 = v53;
              v610 = v191 - 28;
              if ((v54 & 1) != 0)
              {
                v193 = v659;
                v619 = (llvm::Type *)(*(uint64_t (**)(_QWORD, uint64_t, _DWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v659 + 144) + 824))(**(_QWORD **)(v659 + 144), v192, v189, 0, 0, 0, 0, 0, 0, 0, 0);
                v195 = v194;
                v196 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t **, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v193 + 144) + 824))(**(_QWORD **)(v193 + 144), v192, v190, 0, 0, 0, 0, 0, 0, 0, 0);
              }
              else
              {
                v607 = v55;
                v198 = *((_WORD *)a2 + 9) & 0x3F;
                v193 = v659;
                v199 = *(_QWORD **)(v659 + 144);
                v200 = sub_1C4774CC4(v189);
                v619 = (llvm::Type *)(*(uint64_t (**)(_QWORD, uint64_t, _DWORD *, uint64_t, uint64_t, _QWORD, _QWORD, double))(*(_QWORD *)*v199 + 864))(*v199, v192, v189, v201, v198, 0, 0, v200);
                v195 = v202;
                v203 = *(_QWORD **)(v659 + 144);
                v204 = sub_1C4774CC4(v190);
                v205 = v198;
                v55 = v607;
                v196 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t **, uint64_t, uint64_t, _QWORD, _QWORD, double))(*(_QWORD *)*v203 + 864))(*v203, v192, v190, v206, v205, 0, 0, v204);
              }
              v207 = v196;
              v628 = v197;
              v208 = v195;
              v209 = (char *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t **, unint64_t))(***(_QWORD ***)(v193 + 144) + 872))(**(_QWORD **)(v193 + 144), 62, v190, v636);
              if (v641)
                v212 = v209;
              else
                v212 = 0;
              if (v641)
                v213 = v210;
              else
                v213 = 0;
              if ((_DWORD)v210 == 1)
              {
                v208 = 1;
                v214 = v55 == 0;
              }
              else
              {
                v214 = 1;
              }
              v670 = v209;
              v671 = v210;
              if (v214)
                v215 = v213;
              else
                v215 = 1;
              if (v55)
                v216 = v209;
              else
                v216 = 0;
              v146 = __OFADD__(v212, v216);
              v217 = (int64_t)&v216[(_QWORD)v212];
              if (v146)
                v217 = (v217 >> 63) ^ 0x8000000000000000;
              v146 = __OFADD__(v217, v207);
              v218 = v217 + v207;
              if (v146)
                v2 = (v218 >> 63) ^ 0x8000000000000000;
              else
                v2 = v218;
              if (__OFADD__(v619, v209))
                v219 = ((uint64_t)&v209[(_QWORD)v619] >> 63) ^ 0x8000000000000000;
              else
                v219 = (unint64_t)&v209[(_QWORD)v619];
              if (v641)
              {
                v220 = *(_QWORD *)(v51 + 8);
                v221 = v615;
                if (v220)
                  v222 = *(_QWORD *)(v220 + 8) != 0;
                else
                  v222 = 1;
                v674[0] = (void *)v222;
                LODWORD(v674[1]) = 0;
                sub_1C4848B64((uint64_t)v674, (uint64_t)&v670);
                v223 = v674[0];
                if (LODWORD(v674[1]) == 1)
                  v208 = 1;
              }
              else
              {
                v223 = 0;
                v221 = v615;
              }
              v146 = __OFADD__(v219, v223);
              v224 = (uint64_t)v223 + v219;
              if (v146)
                v225 = (v224 >> 63) ^ 0x8000000000000000;
              else
                v225 = v224;
              if (v55)
              {
                v226 = *(_QWORD *)(v52 + 8);
                if (v226)
                  v227 = *(_QWORD *)(v226 + 8) != 0;
                else
                  v227 = 1;
                v674[0] = (void *)v227;
                LODWORD(v674[1]) = 0;
                sub_1C4848B64((uint64_t)v674, (uint64_t)&v670);
                v228 = v674[0];
                if (LODWORD(v674[1]) == 1)
                  v208 = 1;
              }
              else
              {
                v228 = 0;
              }
              v146 = __OFADD__(v225, v228);
              v229 = (int64_t)v228 + v225;
              if (v146)
                v229 = (v229 >> 63) ^ 0x8000000000000000;
              if (v628 == 1)
                v230 = 1;
              else
                v230 = v215;
              v231 = v2 >= v229;
              v32 = v230 == v208;
              v232 = v230 >= v208;
              if (!v32)
                v231 = v232;
              if (v208)
                v56 = 0;
              else
                v56 = v231;
              if (!v56)
                goto LABEL_425;
              if (!v641)
              {
                v233 = *(llvm **)v660;
                v234 = **(_QWORD **)(v659 + 72);
                v235 = *(llvm::ConstantInt **)(v234 + 1984);
                v236 = *(_DWORD *)(v234 + 1992);
                LODWORD(v674[1]) = v236 >> 8;
                if (v236 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)v674, v608, 0);
                }
                else
                {
                  if (v236 <= 0xFF)
                    v237 = 0;
                  else
                    v237 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v236);
                  v674[0] = (void *)(v237 & v608);
                }
                v239 = llvm::ConstantInt::get(v235, (llvm::LLVMContext *)v674, v211);
                if (LODWORD(v674[1]) >= 0x41 && v674[0])
                  MEMORY[0x1CAA32F9C](v674[0], 0x1000C8000313F17);
                ElementInstruction = (uint64_t *)llvm::ConstantFoldExtractElementInstruction(v233, v239, v238);
                if (!ElementInstruction)
                {
                  v598 = *(_QWORD ***)v233;
                  v599 = *(_QWORD *)(*(_QWORD *)v233 + 24);
                  if (v599)
                  {
                    *(_QWORD *)&v678 = v233;
                    *((_QWORD *)&v678 + 1) = v239;
                    v600 = **v598 + 1512;
                    LODWORD(v674[0]) = 61;
                    v674[1] = &v678;
                    *(_QWORD *)v675 = 2;
                    memset(&v675[8], 0, 32);
                    v676 = 0;
                    ElementInstruction = (uint64_t *)sub_1C537D4FC(v600, v599, (unsigned __int8 *)v674);
                  }
                  else
                  {
                    ElementInstruction = 0;
                  }
                  v221 = v615;
                }
                v673 = (uint64_t)ElementInstruction;
              }
              if (v55)
              {
                v241 = v669;
              }
              else
              {
                v242 = v662;
                v243 = **(_QWORD **)(v659 + 72);
                v244 = *(llvm::ConstantInt **)(v243 + 1984);
                v245 = *(_DWORD *)(v243 + 1992);
                LODWORD(v674[1]) = v245 >> 8;
                if (v245 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)v674, v636, 0);
                }
                else
                {
                  if (v245 <= 0xFF)
                    v246 = 0;
                  else
                    v246 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v245);
                  v674[0] = (void *)(v246 & v636);
                }
                v248 = llvm::ConstantInt::get(v244, (llvm::LLVMContext *)v674, v211);
                if (LODWORD(v674[1]) >= 0x41 && v674[0])
                  MEMORY[0x1CAA32F9C](v674[0], 0x1000C8000313F17);
                v241 = (uint64_t)llvm::ConstantFoldExtractElementInstruction(v242, v248, v247);
                if (!v241)
                {
                  v601 = *(_QWORD ***)v242;
                  v602 = *(_QWORD *)(*(_QWORD *)v242 + 24);
                  if (v602)
                  {
                    *(_QWORD *)&v678 = v242;
                    *((_QWORD *)&v678 + 1) = v248;
                    v603 = **v601 + 1512;
                    LODWORD(v674[0]) = 61;
                    v674[1] = &v678;
                    *(_QWORD *)v675 = 2;
                    memset(&v675[8], 0, 32);
                    v676 = 0;
                    v241 = sub_1C537D4FC(v603, v602, (unsigned __int8 *)v674);
                  }
                  else
                  {
                    v241 = 0;
                  }
                  v221 = v615;
                }
                v669 = v241;
              }
              if ((v221 & 1) != 0)
              {
                *(_WORD *)&v675[16] = 257;
                v249 = (uint64_t ***)sub_1C4773860((uint64_t)v656, v610, (_QWORD *)v673, v241, (uint64_t)v674, 0);
              }
              else
              {
                *(_WORD *)&v675[16] = 257;
                if (v612 > 0xF)
                  v249 = (uint64_t ***)sub_1C4774B48((uint64_t)v656, v612, v673, v241, (uint64_t)v674);
                else
                  v249 = (uint64_t ***)llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)v656, v612, (uint64_t *)v673, v241, (uint64_t)v674, 0, 0);
              }
              v250 = (uint64_t)v249;
              if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
              {
                v261 = 0;
                v260 = &byte_1C871356D;
LABEL_406:
                *(_WORD *)&v675[16] = 773;
                v674[0] = v260;
                v674[1] = v261;
                *(_QWORD *)v675 = ".scalar";
                llvm::Value::setName(v249, (uint64_t)v674);
                if (*(unsigned __int8 *)(v250 + 16) >= 0x1Cu && v250 != 0)
                  llvm::Instruction::copyIRFlags(v250, (uint64_t)a2, 1);
                v265 = *(_QWORD ****)v660;
                v266 = v662;
                if ((v221 & 1) != 0)
                {
                  v2 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)v610, *(llvm::Constant **)v660, v662, v263);
                  if (v2)
                  {
LABEL_418:
                    *(_WORD *)&v675[16] = 257;
                    v271 = **(_QWORD **)(v659 + 72);
                    v272 = *(llvm::ConstantInt **)(v271 + 1984);
                    v273 = *(unsigned int *)(v271 + 1992);
                    DWORD2(v678) = v273 >> 8;
                    if (v273 >> 8 > 0x40)
                    {
                      llvm::APInt::initSlowCase((llvm::APInt *)&v678, v636, 0);
                    }
                    else
                    {
                      if (v273 <= 0xFF)
                        v274 = 0;
                      else
                        v274 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v273);
                      *(_QWORD *)&v678 = v274 & v636;
                    }
                    v275 = llvm::ConstantInt::get(v272, (llvm::LLVMContext *)&v678, v267);
                    if (DWORD2(v678) >= 0x41 && (_QWORD)v678)
                      MEMORY[0x1CAA32F9C](v678, 0x1000C8000313F17);
                    v276 = sub_1C4773154(v656, v2, v250, (uint64_t)v275, (uint64_t)v674);
                    sub_1C60BBED0(v659, (llvm::ValueAsMetadata *)a2, (llvm::Value *)v276);
LABEL_425:
                    v4 = v653;
                    goto LABEL_426;
                  }
                  v268 = *v265;
                  if (!*v265)
                  {
                    v2 = 0;
                    goto LABEL_418;
                  }
                  *(_QWORD *)&v678 = v265;
                  *((_QWORD *)&v678 + 1) = v266;
                  v269 = **v268 + 1512;
                  LODWORD(v674[0]) = v610;
                  v674[1] = &v678;
                  *(_QWORD *)v675 = 2;
                  memset(&v675[8], 0, 32);
                  v676 = 0;
                  FCmp = sub_1C537D4FC(v269, (uint64_t)v268, (unsigned __int8 *)v674);
                }
                else if (v612 <= 0xF)
                {
                  FCmp = llvm::ConstantExpr::getFCmp((llvm::ConstantExpr *)v612, *(uint64_t ****)v660, v662, 0);
                }
                else
                {
                  FCmp = (uint64_t)llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)v612, *(unsigned __int8 **)v660, v662, 0);
                }
                v2 = FCmp;
                goto LABEL_418;
              }
              v251 = ***a2;
              v252 = *(_QWORD *)(v251 + 152);
              v253 = *(unsigned int *)(v251 + 168);
              if ((_DWORD)v253)
              {
                LODWORD(v254) = (v253 - 1) & ((a2 >> 4) ^ (a2 >> 9));
                v255 = (uint64_t ****)(v252 + 16 * v254);
                v256 = *v255;
                if (*v255 == a2)
                {
LABEL_405:
                  v259 = v255[1];
                  v262 = *v259;
                  v260 = (char *)(v259 + 2);
                  v261 = v262;
                  goto LABEL_406;
                }
                v257 = 1;
                while (v256 != (uint64_t ***)-4096)
                {
                  v258 = v254 + v257++;
                  v254 = v258 & (v253 - 1);
                  v256 = *(uint64_t ****)(v252 + 16 * v254);
                  if (v256 == a2)
                  {
                    v255 = (uint64_t ****)(v252 + 16 * v254);
                    goto LABEL_405;
                  }
                }
              }
              v255 = (uint64_t ****)(v252 + 16 * v253);
              goto LABEL_405;
            }
LABEL_103:
            LOBYTE(v56) = 0;
LABEL_426:
            v50 = *((unsigned __int8 *)a2 + 16);
            goto LABEL_427;
          }
          while (1)
          {
            v58 = v57[3];
            if (*((_BYTE *)v58 + 16) == 85)
            {
              v59 = *((_DWORD *)v58 + 5);
              v60 = (v59 & 0x40000000) != 0 ? (uint64_t ****)*(v58 - 1) : (uint64_t ****)&v58[-4 * (v59 & 0x7FFFFFF)];
              if (*v60 == a2)
                break;
            }
            v57 = (uint64_t **)v57[1];
            if (!v57)
              goto LABEL_115;
          }
        }
      }
    }
  }
  else
  {
    v51 = (uint64_t)*(a2 - 8);
    if (v51)
    {
      v52 = (uint64_t)*(a2 - 4);
      if (v52)
      {
        v53 = 42;
LABEL_95:
        v54 = 1;
        goto LABEL_96;
      }
    }
  }
  LOBYTE(v56) = 0;
LABEL_427:
  v277 = (char *)v4[1];
  v278 = *v277 | v56;
  *v277 = v278;
  if (v50 != 60)
  {
    v281 = 0;
    goto LABEL_440;
  }
  v279 = *((_DWORD *)a2 + 5);
  v654 = v4;
  if ((v279 & 0x40000000) != 0)
    v280 = *(a2 - 1);
  else
    v280 = (uint64_t **)&a2[-4 * (v279 & 0x7FFFFFF)];
  v282 = *v280;
  if (!*v280 || (*((_WORD *)a2 + 9) & 1) != 0)
    goto LABEL_438;
  v283 = a2[5][7][5] + 272;
  v2 = (uint64_t)*a2;
  sub_1C4768AD0(v283, (uint64_t)*a2);
  v285 = v284;
  v287 = v286;
  v637 = v283;
  sub_1C4768AD0(v283, v2);
  if (v285 != ((v289 + 7) & 0xFFFFFFFFFFFFFFF8) || v287 != (v288 == 1))
    goto LABEL_438;
  v281 = 0;
  if (!*a2)
    goto LABEL_439;
  v643 = (uint64_t *)*a2;
  if (*((_BYTE *)*a2 + 8) != 18)
    goto LABEL_439;
  v298 = (uint64_t)**(a2 - 4);
  v299 = *(_DWORD *)(v298 + 8);
  if ((v299 & 0xFE) == 0x12)
    v299 = *(_DWORD *)(**(_QWORD **)(v298 + 16) + 8);
  v300 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, unint64_t, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v659 + 144) + 888))(**(_QWORD **)(v659 + 144), 32, v643, ((unint64_t)*((unsigned __int16 *)a2 + 9) >> 1) & 0x3F, v299 >> 8, 0, 0);
  v2 = v301;
  v302 = a2[1];
  if (v302)
  {
    v303 = 0;
    v304 = 0;
    v305 = 0;
    v306 = (llvm::Type *)a2;
    while (1)
    {
      v281 = 0;
      v307 = v302[3];
      if (!v307 || *((_BYTE *)v307 + 16) != 89)
        goto LABEL_439;
      if ((uint64_t **)v307[5] != a2[5])
        goto LABEL_438;
      v629 = v304;
      if (!sub_1C4F8BE80((uint64_t ***)*(v307 - 4), *(_QWORD *)(v659 + 168), (uint64_t)a2, *(_QWORD *)(v659 + 152), 0, 1))goto LABEL_438;
      v308 = *((_QWORD *)v306 + 5);
      v309 = *(__int16 *)(v308 + 18);
      if ((v309 & 0x80000000) == 0)
      {
        v343 = *(_QWORD *)(v308 + 48);
        if (v343 != v308 + 40)
        {
          v344 = 0;
          do
          {
            v345 = v343 - 24;
            if (!v343)
              v345 = 0;
            *(_DWORD *)(v345 + 56) = v344++;
            v343 = *(_QWORD *)(v343 + 8);
          }
          while (v343 != v308 + 40);
        }
        *(_WORD *)(v308 + 18) = v309 | 0x8000;
      }
      if (*((_DWORD *)v306 + 14) < *((_DWORD *)v307 + 14))
      {
        v620 = (llvm::Type *)v2;
        v310 = a2[4];
        v311 = &unk_1ED82C000;
        if (v310 != (uint64_t **)(v307 + 3))
        {
          while (v303 != v311[126])
          {
            if (v310)
              v2 = (uint64_t)(v310 - 3);
            else
              v2 = 0;
            v312 = *(unsigned __int8 *)(v2 + 16) - 33;
            if (v312 <= 0x37)
            {
              if (((1 << (*(_BYTE *)(v2 + 16) - 33)) & 0x8000000000041) != 0)
              {
                v313 = *(_QWORD *)(v2 + 64);
                if (!v313 || (*(_BYTE *)(v313 + 17) & 0x30) == 0)
                {
                  v314 = *(_DWORD *)(v2 + 20);
                  if (v314 < 0)
                  {
                    v317 = v2 - 32 * (v314 & 0x7FFFFFF);
                    v320 = *(_QWORD *)(v317 - 8);
                    v318 = v317 - 8;
                    v319 = v320;
                    if (v320)
                    {
                      v321 = -v319;
                      do
                      {
                        v322 = *(_DWORD *)(*(_QWORD *)(v318 + v321) + 8);
                        v323 = v322 > 7;
                        v324 = (1 << v322) & 0x83;
                        if (v323 || v324 == 0)
                          goto LABEL_438;
                        v321 += 16;
                      }
                      while (v321);
                    }
                  }
                  hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction(v2, 45);
                  v311 = (_DWORD *)&unk_1ED82C000;
                  if ((hasFnAttrOnCalledFunction & 1) == 0)
                  {
                    v316 = llvm::CallBase::hasFnAttrOnCalledFunction(v2, 44);
                    v311 = (_DWORD *)&unk_1ED82C000;
                    if (!v316)
                      goto LABEL_438;
                  }
                }
              }
              else if (v312 == 27)
              {
                if ((*(_WORD *)(v2 + 18) & 0x301) != 0)
                  goto LABEL_438;
              }
              else if (((1 << (*(_BYTE *)(v2 + 16) - 33)) & 0x808001D0000010) != 0)
              {
                goto LABEL_438;
              }
            }
            ++v303;
            v310 = (uint64_t **)v310[1];
            if (v310 == (uint64_t **)(v307 + 3))
              goto LABEL_488;
          }
          goto LABEL_438;
        }
LABEL_488:
        v306 = (llvm::Type *)v307;
        v2 = (uint64_t)v620;
      }
      sub_1C60BC5E8((uint64_t)v674, (uint64_t)v643, *(v307 - 4), (llvm::AssumptionCache *)a2, *(_QWORD *)(v659 + 168), *(const llvm::Instruction **)(v659 + 152));
      if (LODWORD(v674[0]) != 1)
        goto LABEL_438;
      v326 = *(v307 - 4);
      v327 = -1;
      if (v326)
      {
        v328 = v643;
        if (*(_BYTE *)(v326 + 16) == 16)
        {
          v329 = (uint64_t *)(v326 + 24);
          if (*(_DWORD *)(v326 + 32) >= 0x41u)
            v329 = (uint64_t *)*v329;
          v327 = *v329;
        }
      }
      else
      {
        v328 = v643;
      }
      v621 = v306;
      v330 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t **, uint64_t))(***(_QWORD ***)(v659 + 144) + 872))(**(_QWORD **)(v659 + 144), 61, *a2, v327);
      if (v331 == 1)
        v332 = 1;
      else
        v332 = v2;
      if (__OFADD__(v300, v330))
        v333 = ((v300 + v330) >> 63) ^ 0x8000000000000000;
      else
        v333 = v300 + v330;
      v334 = (uint64_t)**(a2 - 4);
      v335 = *(_DWORD *)(v334 + 8);
      if ((v335 & 0xFE) == 0x12)
        v335 = *(_DWORD *)(**(_QWORD **)(v334 + 16) + 8);
      v336 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v659 + 144)
                                                                                                 + 888))(**(_QWORD **)(v659 + 144), 32, v328[3], 0, v335 >> 8, 0, 0);
      v338 = v337;
      if (__OFADD__(v305, v336))
        v339 = ((v305 + v336) >> 63) ^ 0x8000000000000000;
      else
        v339 = v305 + v336;
      v340 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(***(_QWORD ***)(v659 + 144) + 976))(**(_QWORD **)(v659 + 144), v328[3], 0, 0);
      v342 = v338 == 1 || v341 == 1;
      v304 = v629;
      if (v342)
        v304 = 1;
      if (__OFADD__(v339, v340))
        v305 = ((uint64_t)(v339 + v340) >> 63) ^ 0x8000000000000000;
      else
        v305 = v339 + v340;
      v302 = (uint64_t **)v302[1];
      v2 = v332;
      v300 = v333;
      v306 = v621;
      if (!v302)
        goto LABEL_548;
    }
  }
  v305 = 0;
  v304 = 0;
LABEL_548:
  v362 = v305 >= v300;
  if (v304 != (_DWORD)v2)
    v362 = v304 >= (int)v2;
  if (v362)
  {
LABEL_438:
    v281 = 0;
  }
  else
  {
    v363 = a2[1];
    if (v363)
    {
      while (1)
      {
        v364 = (uint64_t ***)v363[3];
        *(_QWORD *)(v659 + 56) = v364[5];
        *(_QWORD *)(v659 + 64) = v364 + 3;
        v365 = v364[6];
        v674[0] = v365;
        if (v365)
        {
          llvm::MetadataTracking::track((uint64_t)v674, (unsigned __int8 *)v365, 2);
          v366 = v674[0];
        }
        else
        {
          v366 = 0;
        }
        sub_1C4774EF4((uint64_t)v656, 0, (uint64_t)v366);
        if (v674[0])
          llvm::MetadataTracking::untrack((uint64_t)v674, (unsigned __int8 *)v674[0]);
        v368 = (uint64_t)*(v364 - 4);
        v369 = **(_QWORD **)(v659 + 72);
        v370 = *(llvm::ConstantInt **)(v369 + 1960);
        LODWORD(v674[1]) = *(_DWORD *)(v369 + 1968) >> 8;
        if (LODWORD(v674[1]) > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)v674, 0, 0);
        else
          v674[0] = 0;
        v371 = llvm::ConstantInt::get(v370, (llvm::LLVMContext *)v674, v367);
        if (LODWORD(v674[1]) >= 0x41 && v674[0])
          MEMORY[0x1CAA32F9C](v674[0], 0x1000C8000313F17);
        *(_QWORD *)&v678 = v371;
        *((_QWORD *)&v678 + 1) = v368;
        *(_WORD *)&v675[16] = 257;
        v372 = sub_1C53901A0(v656, (llvm::GetElementPtrInst *)v643, v282, (llvm::Value *)&v678, 2, (uint64_t)v674);
        v373 = v643[3];
        if ((*((_BYTE *)v364 + 23) & 0x10) != 0)
          break;
        v383 = 0;
        v384 = &byte_1C871356D;
LABEL_568:
        LOWORD(v680) = 773;
        *(_QWORD *)&v678 = v384;
        *((_QWORD *)&v678 + 1) = v383;
        *(_QWORD *)&v679 = ".scalar";
        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v659 + 56) + 56) + 40) + 272, v373);
        v387 = v386;
        v388 = (char *)operator new(0x60uLL);
        v389 = v388;
        v390 = (llvm::Value *)(v388 + 32);
        *((_QWORD *)v388 + 2) = 0;
        *((_QWORD *)v388 + 3) = v388 + 32;
        *(_WORD *)&v675[16] = 257;
        *((_QWORD *)v388 + 4) = v373;
        *((_QWORD *)v388 + 5) = 0;
        *((_WORD *)v388 + 24) = 60;
        *((_DWORD *)v388 + 13) = 1;
        *(_OWORD *)(v388 + 56) = 0u;
        *(_OWORD *)(v388 + 72) = 0u;
        *((_DWORD *)v388 + 22) = 0;
        *(_QWORD *)v388 = v372;
        *((_QWORD *)v388 + 1) = 0;
        if (v372)
        {
          v393 = *(_QWORD *)(v372 + 8);
          v392 = (_QWORD *)(v372 + 8);
          v391 = v393;
          *((_QWORD *)v388 + 1) = v393;
          if (v393)
            *(_QWORD *)(v391 + 16) = v388 + 8;
          *((_QWORD *)v388 + 2) = v392;
          *v392 = v388;
        }
        *((_WORD *)v388 + 25) = 2 * (v387 & 0x3F);
        v388[92] = 1;
        llvm::Value::setName((uint64_t ***)v388 + 4, (uint64_t)v674);
        v2 = v659;
        (*(void (**)(_QWORD, llvm::Value *, __int128 *, _QWORD, _QWORD))(**(_QWORD **)(v659 + 88) + 16))(*(_QWORD *)(v659 + 88), v390, &v678, *(_QWORD *)(v659 + 56), *(_QWORD *)(v659 + 64));
        v394 = *(unsigned int *)(v659 + 16);
        if ((_DWORD)v394)
        {
          v395 = *(_QWORD *)(v659 + 8);
          v396 = v395 + 16 * v394;
          v397 = (unsigned __int8 **)(v389 + 80);
          do
          {
            v398 = *(_DWORD *)v395;
            v399 = *(unsigned __int8 **)(v395 + 8);
            if (v399)
            {
              if (!v398)
              {
                v670 = *(char **)(v395 + 8);
                v402 = v397;
                llvm::MetadataTracking::track((uint64_t)&v670, v399, 2);
                v397 = v402;
                v400 = *v402;
                goto LABEL_587;
              }
            }
            else
            {
              v400 = *v397;
              if (!*v397 && (v389[55] & 0x20) == 0)
                goto LABEL_584;
              if (!v398)
              {
                v670 = 0;
LABEL_587:
                if (v400)
                {
                  v404 = v397;
                  llvm::MetadataTracking::untrack((uint64_t)v397, v400);
                  v397 = v404;
                }
                v403 = (unsigned __int8 *)v670;
                *v397 = (unsigned __int8 *)v670;
                if (!v403)
                  goto LABEL_584;
                v401 = v397;
                llvm::MetadataTracking::retrack((uint64_t)&v670, v403, (uint64_t)v397);
                goto LABEL_583;
              }
            }
            v401 = v397;
            llvm::Value::setMetadata(v390, *(_DWORD *)v395, (llvm::MDNode *)v399);
LABEL_583:
            v397 = v401;
LABEL_584:
            v395 += 16;
            v2 = v659;
          }
          while (v395 != v396);
        }
        *((_WORD *)v389 + 25) = *((_WORD *)v389 + 25) & 0xFF81 | (2
                                                                * sub_1C60BCDE8(((unint64_t)*((unsigned __int16 *)a2 + 9) >> 1) & 0x3F, v643[3], v368, v637));
        sub_1C60BBED0(v2, (llvm::ValueAsMetadata *)v364, v390);
        v363 = (uint64_t **)v363[1];
        v281 = 1;
        if (!v363)
          goto LABEL_439;
      }
      v374 = ***v364;
      v375 = *(_QWORD *)(v374 + 152);
      v376 = *(unsigned int *)(v374 + 168);
      if ((_DWORD)v376)
      {
        LODWORD(v377) = (v376 - 1) & ((v364 >> 4) ^ (v364 >> 9));
        v378 = (uint64_t ****)(v375 + 16 * v377);
        v379 = *v378;
        if (*v378 == v364)
        {
LABEL_567:
          v382 = v378[1];
          v385 = *v382;
          v384 = (char *)(v382 + 2);
          v383 = v385;
          goto LABEL_568;
        }
        v380 = 1;
        while (v379 != (uint64_t ***)-4096)
        {
          v381 = v377 + v380++;
          v377 = v381 & (v376 - 1);
          v379 = *(uint64_t ****)(v375 + 16 * v377);
          if (v379 == v364)
          {
            v378 = (uint64_t ****)(v375 + 16 * v377);
            goto LABEL_567;
          }
        }
      }
      v378 = (uint64_t ****)(v375 + 16 * v376);
      goto LABEL_567;
    }
    v281 = 1;
  }
LABEL_439:
  v50 = *((unsigned __int8 *)a2 + 16);
  v4 = v654;
  v277 = (char *)v654[1];
  v278 = *v277;
LABEL_440:
  v291 = v278 | v281;
  *v277 = v291;
  if (v50 == 61)
    v292 = (uint64_t)a2;
  else
    v292 = 0;
  if (v50 != 61)
    goto LABEL_545;
  if ((*((_WORD *)a2 + 9) & 0x381) != 0)
    goto LABEL_545;
  v293 = v4;
  v294 = (uint64_t)*(a2 - 8);
  v295 = *(_QWORD *)v294;
  if (*(_BYTE *)(*(_QWORD *)v294 + 8) != 18 || *(_BYTE *)(v294 + 16) != 90)
    goto LABEL_545;
  v296 = *(_DWORD *)(v294 + 20);
  v297 = (v296 & 0x40000000) != 0 ? *(_QWORD **)(v294 - 8) : (_QWORD *)(v294 - 32 * (v296 & 0x7FFFFFF));
  v346 = *v297;
  v347 = *(unsigned __int8 *)(*v297 + 16);
  v348 = *v297 && v347 >= 0x1C;
  if (!v348 || (v349 = (uint64_t *)v297[4]) == 0 || (v350 = (llvm::ConstantInt **)v297[8]) == 0)
  {
LABEL_545:
    v361 = 0;
    goto LABEL_546;
  }
  if (v347 == 60)
  {
    v351 = a2[5][7][5];
    v352 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v346 - 32));
    v353 = *(unsigned __int8 *)(v346 + 16);
    if (v353 == 60 || v353 == 61)
    {
      v354 = *(_WORD *)(v346 + 18);
      if ((v354 & 0x380) != 0 || (v354 & 1) != 0)
      {
LABEL_543:
        LOBYTE(v2) = 0;
        goto LABEL_544;
      }
    }
    else if ((v353 - 63) < 3 || (*(_WORD *)(v346 + 18) & 1) != 0)
    {
      goto LABEL_543;
    }
    if (*(uint64_t ***)(v346 + 40) != a2[5])
      goto LABEL_543;
    v355 = v351 + 272;
    v630 = *(llvm::PointerType **)v346;
    sub_1C4768AD0(v355, *(_QWORD *)v346);
    v638 = v357;
    v644 = v356;
    v622 = (llvm::Type *)v355;
    sub_1C4768AD0(v355, (uint64_t)v630);
    v360 = v644 == ((v359 + 7) & 0xFFFFFFFFFFFFFFF8) && v638 == (v358 == 1);
    if (!v360 || v352 != llvm::Value::stripPointerCasts((llvm::Value *)*(a2 - 4)))
      goto LABEL_543;
    sub_1C60BC5E8((uint64_t)&v670, v295, (uint64_t)v350, (llvm::AssumptionCache *)v346, *(_QWORD *)(v659 + 168), *(const llvm::Instruction **)(v659 + 152));
    LODWORD(v2) = (_DWORD)v670;
    if (!(_DWORD)v670)
      goto LABEL_544;
    v455 = (uint64_t)*(a2 - 4);
    sub_1C4768AD0(a2[5][7][5] + 272, (uint64_t)**(a2 - 8));
    if (v457 == 1)
      v458 = -2;
    else
      v458 = (unint64_t)(v456 + 7) >> 3;
    llvm::Instruction::getAAMetadata(a2, &v679);
    *(_QWORD *)&v678 = v455;
    *((_QWORD *)&v678 + 1) = v458;
    if ((uint64_t ***)v346 != a2)
    {
      v459 = 0;
      v646 = *(_QWORD *)(v659 + 160);
      v460 = v346 + 24;
      do
      {
        if (v460)
          v461 = v460 - 24;
        else
          v461 = 0;
        *(_OWORD *)v674 = v678;
        *(_OWORD *)v675 = v679;
        *(_OWORD *)&v675[16] = v680;
        v675[32] = 1;
        if ((sub_1C4D90C64(v646, v461, (__int128 *)v674) & 2) != 0)
          goto LABEL_543;
        if (++v459 > dword_1ED82C1F8)
          goto LABEL_543;
        v460 = *(_QWORD *)(v460 + 8);
      }
      while ((_QWORD ***)v460 != v649);
      LODWORD(v2) = (_DWORD)v670;
    }
    if ((_DWORD)v2 == 2)
      sub_1C63E3088((uint64_t)&v670, (llvm::IRBuilderBase *)v656, (uint64_t)v350);
    v462 = (llvm::GetElementPtrInst *)**(a2 - 8);
    v463 = (uint64_t *)*(a2 - 4);
    *(_QWORD *)&v678 = llvm::ConstantInt::get(*v350, 0, 0);
    *((_QWORD *)&v678 + 1) = v350;
    *(_WORD *)&v675[16] = 257;
    v464 = sub_1C53901A0(v656, v462, v463, (llvm::Value *)&v678, 2, (uint64_t)v674);
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v659 + 56) + 56) + 40) + 272, *v349);
    v657 = v465;
    v466 = (char *)operator new(0x80uLL);
    v467 = v466;
    *((_DWORD *)v466 + 21) = *((_DWORD *)v466 + 21) & 0x38000000 | 2;
    *(_QWORD *)v466 = 0;
    *((_QWORD *)v466 + 2) = 0;
    *((_QWORD *)v466 + 1) = 0;
    *((_QWORD *)v466 + 5) = 0;
    *((_QWORD *)v466 + 6) = 0;
    *((_QWORD *)v466 + 4) = 0;
    v468 = (uint64_t *)(v466 + 32);
    *((_QWORD *)v466 + 8) = **(_QWORD **)*v349 + 1576;
    v469 = (llvm::Value *)(v466 + 64);
    *((_QWORD *)v466 + 3) = v466 + 64;
    *((_QWORD *)v466 + 7) = v466 + 64;
    *((_QWORD *)v466 + 9) = 0;
    v466[80] = 61;
    v466[81] = 0;
    *((_WORD *)v466 + 41) = 0;
    *((_DWORD *)v466 + 21) = 2;
    *(_OWORD *)(v466 + 88) = 0u;
    *(_OWORD *)(v466 + 104) = 0u;
    *((_DWORD *)v466 + 30) = 0;
    *(_QWORD *)v466 = v349;
    v470 = v349 + 1;
    v471 = v349[1];
    *((_QWORD *)v466 + 1) = v471;
    if (v471)
      *(_QWORD *)(v471 + 16) = v466 + 8;
    *((_QWORD *)v466 + 2) = v470;
    *v470 = v466;
    if (*((_QWORD *)v466 + 4))
    {
      **((_QWORD **)v466 + 6) = *((_QWORD *)v466 + 5);
      v606 = *((_QWORD *)v466 + 5);
      if (v606)
        *(_QWORD *)(v606 + 16) = *((_QWORD *)v466 + 6);
    }
    *v468 = v464;
    if (v464)
    {
      v474 = *(_QWORD *)(v464 + 8);
      v473 = (uint64_t **)(v464 + 8);
      v472 = v474;
      *((_QWORD *)v466 + 5) = v474;
      if (v474)
        *(_QWORD *)(v472 + 16) = v466 + 40;
      *((_QWORD *)v466 + 6) = v473;
      *v473 = v468;
    }
    *((_WORD *)v466 + 41) = 2 * (v657 & 0x3F);
    v466[124] = 1;
    *(_WORD *)&v675[16] = 257;
    (*(void (**)(_QWORD, llvm::Value *, void **, _QWORD, _QWORD))(**(_QWORD **)(v659 + 88) + 16))(*(_QWORD *)(v659 + 88), v469, v674, *(_QWORD *)(v659 + 56), *(_QWORD *)(v659 + 64));
    v475 = *(unsigned int *)(v659 + 16);
    if (!(_DWORD)v475)
    {
LABEL_692:
      llvm::Instruction::copyMetadata((uint64_t)v469, v292, 0, 0);
      LOBYTE(v2) = 1;
      v476 = __clz(1 << ((unint64_t)*((unsigned __int16 *)a2 + 9) >> 1)) ^ 0x3F;
      v477 = __clz(1 << ((unint64_t)*(unsigned __int16 *)(v346 + 18) >> 1)) ^ 0x3F;
      if (v476 <= v477)
        v478 = v477;
      else
        v478 = v476;
      *((_WORD *)v467 + 41) = *((_WORD *)v467 + 41) & 0xFF81 | (2
                                                              * sub_1C60BCDE8(v478, *v349, (uint64_t)v350, (uint64_t)v622));
      sub_1C60BBED0(v659, (llvm::ValueAsMetadata *)a2, v469);
      sub_1C60BBC24((int32x2_t *)v659, (uint64_t)a2);
      goto LABEL_544;
    }
    v583 = *(_QWORD *)(v659 + 8);
    v658 = (llvm::IRBuilderBase *)(v583 + 16 * v475);
    v650 = (unsigned __int8 **)(v467 + 112);
    while (1)
    {
      v584 = *(_DWORD *)v583;
      v585 = *(unsigned __int8 **)(v583 + 8);
      if (v585)
      {
        if (!v584)
        {
          *(_QWORD *)&v678 = *(_QWORD *)(v583 + 8);
          llvm::MetadataTracking::track((uint64_t)&v678, v585, 2);
          v586 = *v650;
          goto LABEL_857;
        }
      }
      else
      {
        v586 = *v650;
        if (!*v650 && (v467[87] & 0x20) == 0)
          goto LABEL_854;
        if (!v584)
        {
          *(_QWORD *)&v678 = 0;
LABEL_857:
          if (v586)
            llvm::MetadataTracking::untrack((uint64_t)v650, v586);
          v587 = (unsigned __int8 *)v678;
          *v650 = (unsigned __int8 *)v678;
          if (v587)
            llvm::MetadataTracking::retrack((uint64_t)&v678, v587, (uint64_t)v650);
          goto LABEL_854;
        }
      }
      llvm::Value::setMetadata(v469, *(_DWORD *)v583, (llvm::MDNode *)v585);
LABEL_854:
      v583 += 16;
      if ((llvm::IRBuilderBase *)v583 == v658)
        goto LABEL_692;
    }
  }
LABEL_544:
  v361 = (v347 == 60) & v2;
  v277 = (char *)v293[1];
  v291 = *v277;
LABEL_546:
  *v277 = v291 | v361;
}

void sub_1C60BBC24(int32x2_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  __int32 v10;
  __int32 v11;
  int32x2_t v12;
  __int32 v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  int32x2_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  __int32 v38;

  v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0)
  {
    v6 = *(_QWORD *)(a2 - 8);
    v5 = v4 & 0x7FFFFFF;
    if (!v5)
      goto LABEL_31;
    goto LABEL_5;
  }
  v5 = v4 & 0x7FFFFFF;
  v6 = a2 - 32 * v5;
  if (v5)
  {
LABEL_5:
    v7 = v6 + 32 * v5;
    do
    {
      v8 = *(_QWORD *)v6;
      if (*(_QWORD *)v6)
        v9 = *(unsigned __int8 *)(*(_QWORD *)v6 + 16) >= 0x1Cu;
      else
        v9 = 0;
      if (v9)
      {
        v10 = a1[24].i32[0];
        v37 = *(_QWORD *)v6;
        v38 = v10;
        v11 = a1[283].i32[0];
        if (!v11)
        {
          v21 = 0;
LABEL_25:
          v22 = sub_1C4D8D8F4(&a1[281], (uint64_t)&v37, &v37, v21);
          *v22 = v37;
          *((_DWORD *)v22 + 2) = v38;
          v23 = a1[24].u32[0];
          if (v23 >= a1[24].u32[1])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&a1[23], (uint64_t)&a1[25], v23 + 1, 8);
            v23 = a1[24].u32[0];
          }
          *(_QWORD *)(*(_QWORD *)&a1[23] + 8 * v23) = v8;
          ++a1[24].i32[0];
          goto LABEL_28;
        }
        v12 = a1[281];
        v13 = v11 - 1;
        v14 = v13 & ((v8 >> 4) ^ (v8 >> 9));
        v15 = (_QWORD *)(*(_QWORD *)&v12 + 16 * v14);
        v16 = *v15;
        if (*v15 != v8)
        {
          v17 = 0;
          v18 = 1;
          while (v16 != -4096)
          {
            if (v17)
              v19 = 0;
            else
              v19 = v16 == -8192;
            if (v19)
              v17 = v15;
            v20 = v14 + v18++;
            v14 = v20 & v13;
            v15 = (_QWORD *)(*(_QWORD *)&v12 + 16 * v14);
            v16 = *v15;
            if (*v15 == v8)
              goto LABEL_28;
          }
          if (v17)
            v21 = v17;
          else
            v21 = v15;
          goto LABEL_25;
        }
      }
LABEL_28:
      v6 += 32;
    }
    while (v6 != v7);
  }
LABEL_31:
  v37 = a2;
  v24 = a1[281];
  v25 = a1[283].u32[0];
  if ((_DWORD)v25)
  {
    LODWORD(v26) = (v25 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v27 = *(_QWORD *)&v24 + 16 * v26;
    v28 = *(_QWORD *)v27;
    if (*(_QWORD *)v27 == a2)
      goto LABEL_38;
    v29 = 1;
    while (v28 != -4096)
    {
      v30 = v26 + v29++;
      v26 = v30 & (v25 - 1);
      v28 = *(_QWORD *)(*(_QWORD *)&v24 + 16 * v26);
      if (v28 == a2)
      {
        v27 = *(_QWORD *)&v24 + 16 * v26;
        goto LABEL_38;
      }
    }
  }
  v27 = *(_QWORD *)&v24 + 16 * v25;
LABEL_38:
  if (v27 != *(_QWORD *)&v24 + 16 * v25)
  {
    *(_QWORD *)(*(_QWORD *)&a1[23] + 8 * *(unsigned int *)(v27 + 8)) = 0;
    *(_QWORD *)v27 = -8192;
    a1[282] = vadd_s32(a1[282], (int32x2_t)0x1FFFFFFFFLL);
  }
  if (sub_1C4E094A8((uint64_t)&a1[284], &v37))
  {
    v33 = (_QWORD *)a1[301];
    v34 = a1[302].u32[0];
    v35 = &v33[v34];
    if ((_DWORD)v34)
    {
      v36 = 8 * v34;
      while (*v33 != v37)
      {
        ++v33;
        v36 -= 8;
        if (!v36)
        {
          v33 = v35;
          break;
        }
      }
    }
    if (v35 != v33 + 1)
    {
      memmove(v33, v33 + 1, (char *)v35 - (char *)(v33 + 1));
      LODWORD(v34) = a1[302].i32[0];
    }
    a1[302].i32[0] = v34 - 1;
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(a2 + 40) + 40, (uint64_t ***)a2);
  v31 = *(_QWORD *)(a2 + 24);
  v32 = *(_QWORD **)(a2 + 32);
  *v32 = v31;
  *(_QWORD *)(v31 + 8) = v32;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)a2);
}

void sub_1C60BBED0(uint64_t a1, llvm::ValueAsMetadata *this, llvm::Value *a3)
{
  unsigned int v6;
  llvm::Value *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  llvm::Value **v29;
  llvm::Value *v30;
  llvm::Value **v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  llvm::Value **v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  llvm::ValueAsMetadata **v43;
  llvm::ValueAsMetadata *v44;
  llvm::ValueAsMetadata **v45;
  int v46;
  BOOL v47;
  unsigned int v48;
  llvm::ValueAsMetadata **v49;
  _QWORD *v50;
  uint64_t v51;
  llvm::ValueAsMetadata *v52;
  int v53;

  llvm::Value::doRAUW(this, a3, (llvm::Value *)1);
  llvm::Value::takeName(a3, this);
  v6 = *((unsigned __int8 *)a3 + 16);
  if (v6 >= 0x1C)
    v7 = a3;
  else
    v7 = 0;
  if (v6 >= 0x1C)
  {
    v8 = *((_QWORD *)a3 + 1);
    if (v8)
    {
      v9 = *(_DWORD *)(a1 + 192);
      while (1)
      {
        v10 = *(_QWORD *)(v8 + 24);
        v52 = (llvm::ValueAsMetadata *)v10;
        v53 = v9;
        v11 = *(_DWORD *)(a1 + 2264);
        if (!v11)
          break;
        v12 = *(_QWORD *)(a1 + 2248);
        v13 = v11 - 1;
        v14 = v13 & ((v10 >> 4) ^ (v10 >> 9));
        v15 = (_QWORD *)(v12 + 16 * v14);
        v16 = *v15;
        if (*v15 != v10)
        {
          v17 = 0;
          v18 = 1;
          while (v16 != -4096)
          {
            if (v17)
              v19 = 0;
            else
              v19 = v16 == -8192;
            if (v19)
              v17 = v15;
            v20 = v14 + v18++;
            v14 = v20 & v13;
            v15 = (_QWORD *)(v12 + 16 * v14);
            v16 = *v15;
            if (*v15 == v10)
              goto LABEL_24;
          }
          if (v17)
            v21 = v17;
          else
            v21 = v15;
          goto LABEL_21;
        }
LABEL_24:
        v8 = *(_QWORD *)(v8 + 8);
        if (!v8)
          goto LABEL_27;
      }
      v21 = 0;
LABEL_21:
      v22 = sub_1C4D8D8F4((_DWORD *)(a1 + 2248), (uint64_t)&v52, (uint64_t *)&v52, v21);
      *v22 = v52;
      *((_DWORD *)v22 + 2) = v53;
      v23 = *(unsigned int *)(a1 + 192);
      if (v23 >= *(unsigned int *)(a1 + 196))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 184, a1 + 200, v23 + 1, 8);
        v23 = *(unsigned int *)(a1 + 192);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * v23) = v10;
      v9 = *(_DWORD *)(a1 + 192) + 1;
      *(_DWORD *)(a1 + 192) = v9;
      goto LABEL_24;
    }
LABEL_27:
    if (*((unsigned __int8 *)v7 + 16) >= 0x1Cu)
    {
      v24 = *(_DWORD *)(a1 + 192);
      v52 = v7;
      v53 = v24;
      v25 = *(_DWORD *)(a1 + 2264);
      if (v25)
      {
        v26 = *(_QWORD *)(a1 + 2248);
        v27 = v25 - 1;
        v28 = v27 & ((v7 >> 4) ^ (v7 >> 9));
        v29 = (llvm::Value **)(v26 + 16 * v28);
        v30 = *v29;
        if (*v29 == v7)
          goto LABEL_45;
        v31 = 0;
        v32 = 1;
        while (v30 != (llvm::Value *)-4096)
        {
          if (v31)
            v33 = 0;
          else
            v33 = v30 == (llvm::Value *)-8192;
          if (v33)
            v31 = v29;
          v34 = v28 + v32++;
          v28 = v34 & v27;
          v29 = (llvm::Value **)(v26 + 16 * v28);
          v30 = *v29;
          if (*v29 == v7)
            goto LABEL_45;
        }
        if (v31)
          v35 = v31;
        else
          v35 = v29;
      }
      else
      {
        v35 = 0;
      }
      v36 = sub_1C4D8D8F4((_DWORD *)(a1 + 2248), (uint64_t)&v52, (uint64_t *)&v52, v35);
      *v36 = v52;
      *((_DWORD *)v36 + 2) = v53;
      v37 = *(unsigned int *)(a1 + 192);
      if (v37 >= *(_DWORD *)(a1 + 196))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 184, a1 + 200, v37 + 1, 8);
        LODWORD(v37) = *(_DWORD *)(a1 + 192);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * v37) = v7;
      ++*(_DWORD *)(a1 + 192);
    }
  }
LABEL_45:
  if (*((unsigned __int8 *)this + 16) < 0x1Cu)
    return;
  v38 = *(_DWORD *)(a1 + 192);
  v52 = this;
  v53 = v38;
  v39 = *(_DWORD *)(a1 + 2264);
  if (v39)
  {
    v40 = *(_QWORD *)(a1 + 2248);
    v41 = v39 - 1;
    v42 = v41 & ((this >> 4) ^ (this >> 9));
    v43 = (llvm::ValueAsMetadata **)(v40 + 16 * v42);
    v44 = *v43;
    if (*v43 == this)
      return;
    v45 = 0;
    v46 = 1;
    while (v44 != (llvm::ValueAsMetadata *)-4096)
    {
      if (v45)
        v47 = 0;
      else
        v47 = v44 == (llvm::ValueAsMetadata *)-8192;
      if (v47)
        v45 = v43;
      v48 = v42 + v46++;
      v42 = v48 & v41;
      v43 = (llvm::ValueAsMetadata **)(v40 + 16 * v42);
      v44 = *v43;
      if (*v43 == this)
        return;
    }
    if (v45)
      v49 = v45;
    else
      v49 = v43;
  }
  else
  {
    v49 = 0;
  }
  v50 = sub_1C4D8D8F4((_DWORD *)(a1 + 2248), (uint64_t)&v52, (uint64_t *)&v52, v49);
  *v50 = v52;
  *((_DWORD *)v50 + 2) = v53;
  v51 = *(unsigned int *)(a1 + 192);
  if (v51 >= *(_DWORD *)(a1 + 196))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 184, a1 + 200, v51 + 1, 8);
    LODWORD(v51) = *(_DWORD *)(a1 + 192);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * v51) = this;
  ++*(_DWORD *)(a1 + 192);
}

uint64_t sub_1C60BC230(_QWORD **a1, uint64_t a2)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD **v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;

  if (*(_BYTE *)(a2 + 16) != 89)
    return 0;
  v2 = *(_DWORD *)(a2 + 20);
  v3 = (v2 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v2 & 0x7FFFFFF));
  v4 = *v3;
  if (!v4)
    return 0;
  v6 = *a1;
  v5 = a1 + 1;
  *v6 = v4;
  v7 = *(_DWORD *)(a2 + 20);
  if ((v7 & 0x40000000) != 0)
    v8 = *(_QWORD *)(a2 - 8);
  else
    v8 = a2 - 32 * (v7 & 0x7FFFFFF);
  return sub_1C4E7B154(v5, *(_QWORD *)(v8 + 32));
}

uint64_t sub_1C60BC28C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v21;
  BOOL v22;

  v6 = a2;
  v8 = *(_QWORD *)(a2 - 32);
  v9 = (unsigned int *)(v8 + 24);
  if (*(_DWORD *)(v8 + 32) >= 0x41u)
    v9 = *(unsigned int **)v9;
  v10 = *v9;
  v11 = *(_QWORD *)(a3 - 32);
  v12 = (unsigned int *)(v11 + 24);
  if (*(_DWORD *)(v11 + 32) >= 0x41u)
    v12 = *(unsigned int **)v12;
  v13 = *v12;
  if ((_DWORD)v10 == (_DWORD)v13)
    return 0;
  v14 = **(_QWORD **)(a2 - 64);
  v15 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 144) + 872))(**(_QWORD **)(a1 + 144), *(unsigned __int8 *)(a2 + 16) - 28, v14, v10);
  v17 = v16;
  v18 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 144) + 872))(**(_QWORD **)(a1 + 144), *(unsigned __int8 *)(a3 + 16) - 28, v14, v13);
  if (v17 && v19 != 0)
    return 0;
  v21 = v18 < v15;
  if (v19 != v17)
    v21 = v19 < v17;
  if (!v21)
  {
    v22 = v17 < v19;
    if (v19 == v17)
      v22 = v15 < v18;
    if (v22 || (_DWORD)v10 == a4)
    {
      return a3;
    }
    else if ((_DWORD)v13 != a4 && v10 <= v13)
    {
      return a3;
    }
  }
  return v6;
}

uint64_t sub_1C60BC3DC(llvm::PoisonValue **a1, int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  llvm::Type *v11;
  _QWORD *v12;
  uint64_t v13;
  const char *v15;
  __int16 v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[17];

  v19[16] = *MEMORY[0x1E0C80C00];
  v8 = *((unsigned int *)*a1 + 8);
  v17 = v19;
  v18 = 0x2000000000;
  sub_1C4893E04((char *)&v17, v8, -1);
  v9 = v17;
  *((_DWORD *)v17 + a3) = a2;
  v10 = v18;
  v15 = "shift";
  v16 = 259;
  v12 = llvm::PoisonValue::get(*a1, v11);
  v13 = sub_1C486AD20(a4, (uint64_t)a1, (uint64_t)v12, v9, v10, (uint64_t)&v15);
  if (v17 != v19)
    free(v17);
  return v13;
}

uint64_t sub_1C60BC4D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = 0;
  if (a2)
  {
    v3 = *(unsigned __int8 *)(a2 + 16);
    if (v3 >= 0x1C && v3 - 83 >= 0xFFFFFFFE)
    {
      v5 = *(_QWORD *)(a2 - 64);
      if (v5)
        v6 = *(unsigned __int8 *)(v5 + 16) >= 0x1Cu;
      else
        v6 = 0;
      if (v6)
      {
        v2 = 0;
        **(_QWORD **)(a1 + 8) = v5;
        v7 = *(_QWORD *)(a2 - 32);
        if (v7 && *(unsigned __int8 *)(v7 + 16) <= 0x14u)
        {
          **(_QWORD **)(a1 + 16) = v7;
          **(_DWORD **)a1 = *(_WORD *)(a2 + 18) & 0x3F;
          return 1;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return v2;
}

uint64_t sub_1C60BC554(_QWORD **a1, uint64_t a2)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD **v9;
  int v10;
  uint64_t v11;

  if (*(_BYTE *)(a2 + 16) != 90)
    return 0;
  v2 = *(_DWORD *)(a2 + 20);
  v3 = (v2 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v2 & 0x7FFFFFF));
  v4 = *v3;
  if (!v4 || *(unsigned __int8 *)(v4 + 16) > 0x14u)
    return 0;
  **a1 = v4;
  v6 = *(_DWORD *)(a2 + 20);
  v7 = (v6 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v6 & 0x7FFFFFF);
  v8 = *(_QWORD *)(v7 + 32);
  if (!v8)
    return 0;
  *a1[1] = v8;
  v9 = a1 + 2;
  v10 = *(_DWORD *)(a2 + 20);
  if ((v10 & 0x40000000) != 0)
    v11 = *(_QWORD *)(a2 - 8);
  else
    v11 = a2 - 32 * (v10 & 0x7FFFFFF);
  return sub_1C4E7B154(v9, *(_QWORD *)(v11 + 64));
}

uint64_t sub_1C60BC5E8(uint64_t result, uint64_t a2, uint64_t a3, llvm::AssumptionCache *a4, uint64_t a5, const llvm::Instruction *a6)
{
  uint64_t v11;
  llvm::APInt *v12;
  unint64_t v13;
  unsigned int v14;
  llvm::Type *v15;
  unsigned int PrimitiveSizeInBits;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  unint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  _BOOL4 v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  void *v33;
  uint64_t *v34;
  uint64_t v35;
  void *v36;
  size_t v37;
  int v38;
  const void *v39;
  size_t v40;
  int v41;
  const void *v42;
  _BOOL4 v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  llvm::AssumptionCache *v47;
  const llvm::Instruction *v48;
  int v49;
  size_t v50;
  uint64_t v51;
  const void *v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int v55;
  void *v56;
  unsigned int v57;
  void *v58;
  unsigned int v59;
  void *v60;
  unsigned int v61;
  void *__src;
  unsigned int v63;
  void *v64;
  unsigned int v65;
  void *v66;
  unsigned int v67;
  void *v68;
  unsigned int v69;
  const void *v70;
  unsigned int v71;
  const void *v72;
  unsigned int v73;

  v11 = result;
  if (a3 && *(_BYTE *)(a3 + 16) == 16)
  {
    v12 = (llvm::APInt *)(a3 + 24);
    v13 = *(unsigned int *)(a2 + 32);
    v14 = *(_DWORD *)(a3 + 32);
    if (v14 >= 0x41)
    {
      result = llvm::APInt::countLeadingZerosSlowCase(v12);
      if (v14 - result > 0x40)
        goto LABEL_16;
      v12 = *(llvm::APInt **)v12;
    }
    if (*(_QWORD *)v12 < v13)
    {
      *(_DWORD *)v11 = 1;
LABEL_17:
      *(_QWORD *)(v11 + 8) = 0;
      return result;
    }
LABEL_16:
    *(_DWORD *)v11 = 0;
    goto LABEL_17;
  }
  v15 = *(llvm::Type **)a3;
  if ((*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE) == 0x12)
    v15 = (llvm::Type *)**((_QWORD **)v15 + 2);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v15);
  v17 = PrimitiveSizeInBits;
  v73 = PrimitiveSizeInBits;
  if (PrimitiveSizeInBits > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v72, 0, 0);
    v46 = *(unsigned int *)(a2 + 32);
    v71 = v17;
    llvm::APInt::initSlowCase((llvm::APInt *)&v70, v46, 0);
    v53 = v73;
    if (v73 > 0x40)
    {
      v20 = (void *)operator new[]();
      v52 = v72;
      memcpy(v20, v72, ((unint64_t)(v53 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v20 = (void *)v72;
      v52 = v72;
    }
  }
  else
  {
    v72 = 0;
    v18 = *(unsigned int *)(a2 + 32);
    v71 = PrimitiveSizeInBits;
    if (PrimitiveSizeInBits)
      v19 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
    else
      v19 = 0;
    v20 = 0;
    v70 = (const void *)(v19 & v18);
    v52 = 0;
    LODWORD(v53) = PrimitiveSizeInBits;
  }
  v21 = v71;
  if (v71 > 0x40)
  {
    v22 = (void *)operator new[]();
    v51 = (uint64_t)v70;
    memcpy(v22, v70, ((v21 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v22 = (void *)v70;
    v51 = (uint64_t)v70;
  }
  v67 = v53;
  v66 = v20;
  v69 = v21;
  v68 = v22;
  v63 = v17;
  if (v17 <= 0x40)
  {
    if (v17)
      v23 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v17);
    else
      v23 = 0;
    __src = v23;
    v65 = v17;
    goto LABEL_23;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&__src, -1, 1);
  v65 = v63;
  if (v63 <= 0x40)
  {
LABEL_23:
    v24 = __src;
    goto LABEL_24;
  }
  v47 = a4;
  v48 = a6;
  v49 = v21;
  v21 = (((unint64_t)v63 + 63) >> 3) & 0x3FFFFFF8;
  v24 = (void *)operator new[]();
  v50 = v21;
  LODWORD(v21) = v49;
  a6 = v48;
  a4 = v47;
  memcpy(v24, __src, v50);
LABEL_24:
  v64 = v24;
  if (sub_1C4F8BE80((uint64_t ***)a3, a5, 0, 0, 0, 1))
  {
    llvm::computeConstantRange((llvm *)a3, 0, a4, a6, 0, 1, a5, &v58);
    v25 = llvm::ConstantRange::contains((llvm::ConstantRange *)&v66, (const llvm::ConstantRange *)&v58);
    if (v61 >= 0x41 && v60)
      MEMORY[0x1CAA32F9C](v60, 0x1000C8000313F17);
    if (v59 >= 0x41 && v58)
      MEMORY[0x1CAA32F9C](v58, 0x1000C8000313F17);
    *(_DWORD *)v11 = v25;
    *(_QWORD *)(v11 + 8) = 0;
    goto LABEL_69;
  }
  v26 = *(unsigned __int8 *)(a3 + 16);
  if (v26 == 5)
  {
    v30 = *(unsigned __int16 *)(a3 + 18);
    if (v30 != 22)
    {
      if (v30 != 28)
        goto LABEL_47;
      v31 = (uint64_t *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
      v27 = *v31;
      if (*v31)
      {
        v28 = v31[4];
        if (v28)
        {
LABEL_44:
          if (*(_BYTE *)(v28 + 16) != 16)
            goto LABEL_62;
          v32 = *(unsigned int *)(v28 + 32);
          if (v32 > 0x40)
          {
            v37 = ((unint64_t)(v32 + 63) >> 3) & 0x3FFFFFF8;
            v38 = v21;
            v21 = operator new[]();
            memcpy((void *)v21, *(const void **)(v28 + 24), v37);
            v55 = v32;
            v54 = v21;
            v59 = v32;
            v33 = (void *)operator new[]();
            v39 = (const void *)v21;
            LODWORD(v21) = v38;
            memcpy(v33, v39, v37);
          }
          else
          {
            v33 = *(void **)(v28 + 24);
            v55 = v32;
            v54 = (unint64_t)v33;
            v59 = v32;
          }
          v58 = v33;
          llvm::APInt::operator+=((uint64_t)&v58, 1uLL);
          v57 = v59;
          v56 = v58;
          llvm::ConstantRange::binaryAnd((llvm::ConstantRange *)&__src, (const llvm::ConstantRange *)&v54, (uint64_t)&v58);
LABEL_57:
          if (v63 >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          __src = v58;
          v63 = v59;
          v59 = 0;
          if (v65 >= 0x41 && v64)
          {
            MEMORY[0x1CAA32F9C](v64, 0x1000C8000313F17);
            v64 = v60;
            v65 = v61;
            v61 = 0;
            if (v59 >= 0x41 && v58)
              MEMORY[0x1CAA32F9C](v58, 0x1000C8000313F17);
          }
          else
          {
            v64 = v60;
            v65 = v61;
            v61 = 0;
          }
          if (v57 >= 0x41 && v56)
            MEMORY[0x1CAA32F9C](v56, 0x1000C8000313F17);
          if (v55 >= 0x41 && v54)
            MEMORY[0x1CAA32F9C](v54, 0x1000C8000313F17);
          goto LABEL_62;
        }
      }
      goto LABEL_62;
    }
    v34 = (uint64_t *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
    v27 = *v34;
    if (!*v34)
      goto LABEL_62;
    v29 = v34[4];
    if (!v29)
      goto LABEL_62;
LABEL_50:
    if (*(_BYTE *)(v29 + 16) != 16)
      goto LABEL_62;
    v35 = *(unsigned int *)(v29 + 32);
    if (v35 > 0x40)
    {
      v40 = ((unint64_t)(v35 + 63) >> 3) & 0x3FFFFFF8;
      v41 = v21;
      v21 = operator new[]();
      memcpy((void *)v21, *(const void **)(v29 + 24), v40);
      v55 = v35;
      v54 = v21;
      v59 = v35;
      v36 = (void *)operator new[]();
      v42 = (const void *)v21;
      LODWORD(v21) = v41;
      memcpy(v36, v42, v40);
    }
    else
    {
      v36 = *(void **)(v29 + 24);
      v55 = v35;
      v54 = (unint64_t)v36;
      v59 = v35;
    }
    v58 = v36;
    llvm::APInt::operator+=((uint64_t)&v58, 1uLL);
    v57 = v59;
    v56 = v58;
    llvm::ConstantRange::urem((llvm::ConstantRange *)&__src, (const llvm::ConstantRange *)&v54, (uint64_t)&v58);
    goto LABEL_57;
  }
  if (v26 != 50)
  {
    if (v26 == 56)
    {
      v27 = *(_QWORD *)(a3 - 64);
      if (!v27)
        goto LABEL_62;
      v28 = *(_QWORD *)(a3 - 32);
      if (!v28)
        goto LABEL_62;
      goto LABEL_44;
    }
LABEL_47:
    v27 = 0;
    goto LABEL_62;
  }
  v27 = *(_QWORD *)(a3 - 64);
  if (v27)
  {
    v29 = *(_QWORD *)(a3 - 32);
    if (v29)
      goto LABEL_50;
  }
LABEL_62:
  v43 = llvm::ConstantRange::contains((llvm::ConstantRange *)&v66, (const llvm::ConstantRange *)&__src);
  if (v43)
    v44 = 2;
  else
    v44 = 0;
  if (v43)
    v45 = v27;
  else
    v45 = 0;
  *(_DWORD *)v11 = v44;
  *(_QWORD *)(v11 + 8) = v45;
LABEL_69:
  if (v65 >= 0x41 && v64)
    MEMORY[0x1CAA32F9C](v64, 0x1000C8000313F17);
  if (v63 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  if (v69 >= 0x41 && v68)
    MEMORY[0x1CAA32F9C](v68, 0x1000C8000313F17);
  if (v67 >= 0x41 && v66)
    MEMORY[0x1CAA32F9C](v66, 0x1000C8000313F17);
  result = v51;
  if (v21 >= 0x41 && v51)
    result = MEMORY[0x1CAA32F9C](v51, 0x1000C8000313F17);
  if (v53 >= 0x41)
  {
    if (v52)
      return MEMORY[0x1CAA32F9C](v52, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_1C60BCDE8(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *v6;
  const char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;

  if (a3 && *(_BYTE *)(a3 + 16) == 16)
  {
    v5 = (_QWORD *)(a3 + 24);
    if (*(_DWORD *)(a3 + 32) >= 0x41u)
      v5 = (_QWORD *)*v5;
    v6 = (_QWORD *)*v5;
    sub_1C4768AD0(a4, a2);
    v9 = ((unint64_t)(v8 + 7) >> 3) * (_QWORD)v6;
  }
  else
  {
    sub_1C4768AD0(a4, a2);
    v9 = (unint64_t)(v10 + 7) >> 3;
  }
  if ((_DWORD)v7 == 1)
  {
    v12 = v9;
    v9 = v12;
  }
  return 63 - __clz((v9 | (1 << a1)) & -(uint64_t)(v9 | (1 << a1)));
}

uint64_t sub_1C60BCE9C()
{
  __n128 v1;
  int v2;
  int v3;
  int *v4;

  LOBYTE(v2) = 0;
  v4 = &v2;
  v3 = 1;
  v1.n128_u64[0] = (unint64_t)"Disable all vector combine transforms";
  v1.n128_u64[1] = 37;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED82BFF8, "disable-vector-combine", (_BYTE **)&v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED82BFF8, &dword_1C475E000);
  LOBYTE(v2) = 0;
  v4 = &v2;
  v3 = 1;
  v1.n128_u64[0] = (unint64_t)"Disable binop extract to shuffle transforms";
  v1.n128_u64[1] = 43;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED82C0B8, "disable-binop-extract-shuffle", (_BYTE **)&v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED82C0B8, &dword_1C475E000);
  v2 = 1;
  v3 = 30;
  v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Max number of instructions to scan for vector combining.";
  v1.n128_u64[1] = 56;
  sub_1C4DB1928((uint64_t)&unk_1ED82C178, "vector-combine-max-scan-instrs", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED82C178, &dword_1C475E000);
}

uint64_t llvm::VPBlockBase::getPlan(llvm::VPBlockBase *this)
{
  uint64_t v1;
  llvm::VPBlockBase *v2;
  unint64_t v3;
  uint64_t v4;
  llvm::VPBlockBase *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  do
  {
    v2 = this;
    this = (llvm::VPBlockBase *)*((_QWORD *)this + 5);
  }
  while (this);
  v6 = v2;
  v7 = 1;
  v8 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v9 = v8;
  v10 = v8;
  v11 = v8;
  v12 = v14;
  v13 = 0x800000000;
  sub_1C61F66B4((uint64_t)&v7, (uint64_t *)&v6);
  if ((_DWORD)v13)
  {
    v3 = 0;
    do
    {
      v1 = *((_QWORD *)v12 + v3);
      v4 = *(unsigned int *)(v1 + 56);
      if (!(_DWORD)v4)
        break;
      sub_1C61F6608(&v7, *(uint64_t **)(v1 + 48), (uint64_t *)(*(_QWORD *)(v1 + 48) + 8 * v4));
      ++v3;
    }
    while (v3 < v13);
  }
  if (v12 != v14)
    free(v12);
  if ((v7 & 1) == 0)
    MEMORY[0x1CAA32FB4](v8.i64[0], 8);
  return *(_QWORD *)(v1 + 192);
}

{
  uint64_t v1;
  llvm::VPBlockBase *v2;
  unint64_t v3;
  uint64_t v4;
  llvm::VPBlockBase *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  do
  {
    v2 = this;
    this = (llvm::VPBlockBase *)*((_QWORD *)this + 5);
  }
  while (this);
  v6 = v2;
  v7 = 1;
  v8 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v9 = v8;
  v10 = v8;
  v11 = v8;
  v12 = v14;
  v13 = 0x800000000;
  sub_1C63E6670((uint64_t)&v7, (uint64_t *)&v6);
  if ((_DWORD)v13)
  {
    v3 = 0;
    do
    {
      v1 = *((_QWORD *)v12 + v3);
      v4 = *(unsigned int *)(v1 + 56);
      if (!(_DWORD)v4)
        break;
      sub_1C63E66FC(&v7, *(uint64_t **)(v1 + 48), (uint64_t *)(*(_QWORD *)(v1 + 48) + 8 * v4));
      ++v3;
    }
    while (v3 < v13);
  }
  if (v12 != v14)
    free(v12);
  if ((v7 & 1) == 0)
    MEMORY[0x1CAA32FB4](v8.i64[0], 8);
  return *(_QWORD *)(v1 + 192);
}

llvm::raw_ostream *llvm::VPValue::print(llvm::VPValue *this, llvm::raw_ostream *a2, llvm::VPSlotTracker *a3)
{
  uint64_t v4;
  _BYTE v6[32];
  __int16 v7;

  v4 = *((_QWORD *)this + 6);
  if (!v4)
    return llvm::VPValue::printAsOperand(this, a2, a3);
  v7 = 257;
  return (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t, llvm::raw_ostream *, _BYTE *, llvm::VPSlotTracker *))(*(_QWORD *)v4 + 16))(v4, a2, v6, a3);
}

llvm::raw_ostream *llvm::VPValue::printAsOperand(llvm::VPValue *this, llvm::raw_ostream *a2, llvm::VPSlotTracker *a3)
{
  llvm::Value *v4;
  llvm::raw_ostream *result;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  _BYTE *v11;
  _DWORD *v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = (llvm::Value *)*((_QWORD *)this + 5);
  if (v4)
  {
    v10 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v10) > 2)
    {
      *(_BYTE *)(v10 + 2) = 60;
      *(_WORD *)v10 = 29289;
      *((_QWORD *)a2 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(a2, "ir<", 3uLL);
    }
    result = (llvm::raw_ostream *)llvm::Value::printAsOperand(v4, a2, 0, 0);
  }
  else
  {
    v16 = 0;
    result = (llvm::raw_ostream *)sub_1C6144BDC(*(_QWORD *)a3, *((_DWORD *)a3 + 4), (uint64_t)this, &v16);
    if ((_DWORD)result)
      v8 = v16 == *(_QWORD *)a3 + 16 * *((unsigned int *)a3 + 4);
    else
      v8 = 1;
    if (v8 || *(_DWORD *)(v16 + 8) == -1)
    {
      v9 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v9 <= 7uLL)
        return llvm::raw_ostream::write(a2, "<badref>", 8uLL);
      *v9 = 0x3E6665726461623CLL;
      v15 = *((_QWORD *)a2 + 4) + 8;
      goto LABEL_24;
    }
    v12 = (_DWORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v12 > 3uLL)
    {
      *v12 = 624717942;
      *((_QWORD *)a2 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(a2, "vp<%", 4uLL);
    }
    v16 = 0;
    v13 = sub_1C6144BDC(*(_QWORD *)a3, *((_DWORD *)a3 + 4), (uint64_t)this, &v16);
    v14 = 0xFFFFFFFFLL;
    if (v13)
    {
      if (v16 != *(_QWORD *)a3 + 16 * *((unsigned int *)a3 + 4))
        v14 = *(unsigned int *)(v16 + 8);
    }
    result = sub_1C5E21910(a2, v14, 0, 0, 0);
  }
  v11 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) != v11)
  {
    *v11 = 62;
    v15 = *((_QWORD *)a2 + 4) + 1;
LABEL_24:
    *((_QWORD *)a2 + 4) = v15;
    return result;
  }
  return llvm::raw_ostream::write(a2, ">", 1uLL);
}

uint64_t llvm::VPValue::dump(llvm::VPValue *this)
{
  llvm::VPValue *v1;
  uint64_t v2;
  llvm *v3;
  uint64_t v4;
  llvm *v5;
  llvm *v6;
  _BYTE *v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  _BYTE v13[32];
  __int16 v14;

  v1 = this;
  v2 = *((_QWORD *)this + 6);
  if (v2 && (this = *(llvm::VPValue **)(v2 + 88)) != 0)
  {
    this = (llvm::VPValue *)llvm::VPBlockBase::getPlan(this);
    v9 = 0;
    v10 = 0;
    v12 = 0;
    v11 = 0;
    if (this)
      llvm::VPSlotTracker::assignSlots((llvm::VPSlotTracker *)&v9, this);
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v12 = 0;
    v11 = 0;
  }
  v3 = llvm::dbgs(this);
  v4 = *((_QWORD *)v1 + 6);
  if (v4)
  {
    v14 = 257;
    v5 = (llvm *)(*(uint64_t (**)(uint64_t, llvm *, _BYTE *, uint64_t *))(*(_QWORD *)v4 + 16))(v4, v3, v13, &v9);
  }
  else
  {
    v5 = llvm::VPValue::printAsOperand(v1, v3, (llvm::VPSlotTracker *)&v9);
  }
  v6 = llvm::dbgs(v5);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (*((_BYTE **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, "\n", 1uLL);
  }
  else
  {
    *v7 = 10;
    ++*((_QWORD *)v6 + 4);
  }
  return MEMORY[0x1CAA32FB4](v9, 8);
}

uint64_t llvm::VPDef::dump(llvm::VPDef *this)
{
  llvm::VPDef *v1;
  llvm *v2;
  llvm *v3;
  llvm *v4;
  _BYTE *v5;
  _BYTE v7[32];
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v1 = this;
  if (this && (this = (llvm::VPDef *)*((_QWORD *)this + 11)) != 0)
  {
    this = (llvm::VPDef *)llvm::VPBlockBase::getPlan(this);
    v9 = 0;
    v10 = 0;
    v12 = 0;
    v11 = 0;
    if (this)
      llvm::VPSlotTracker::assignSlots((llvm::VPSlotTracker *)&v9, this);
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v12 = 0;
    v11 = 0;
  }
  v2 = llvm::dbgs(this);
  v8 = 257;
  v3 = (llvm *)(*(uint64_t (**)(llvm::VPDef *, llvm *, _BYTE *, uint64_t *))(*(_QWORD *)v1 + 16))(v1, v2, v7, &v9);
  v4 = llvm::dbgs(v3);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, "\n", 1uLL);
  }
  else
  {
    *v5 = 10;
    ++*((_QWORD *)v4 + 4);
  }
  return MEMORY[0x1CAA32FB4](v9, 8);
}

uint64_t llvm::VPBlockBase::getEntryBasicBlock(uint64_t this)
{
  BOOL v1;

  if (this && *(_BYTE *)(this + 8) == 1)
  {
    do
    {
      this = *(_QWORD *)(this + 200);
      if (this)
        v1 = *(_BYTE *)(this + 8) == 1;
      else
        v1 = 0;
    }
    while (v1);
  }
  return this;
}

{
  BOOL v1;

  if (this && *(_BYTE *)(this + 8) == 1)
  {
    do
    {
      this = *(_QWORD *)(this + 200);
      if (this)
        v1 = *(_BYTE *)(this + 8) == 1;
      else
        v1 = 0;
    }
    while (v1);
  }
  return this;
}

uint64_t llvm::VPBlockBase::getExitBasicBlock(uint64_t this)
{
  BOOL v1;

  if (this && *(_BYTE *)(this + 8) == 1)
  {
    do
    {
      this = *(_QWORD *)(this + 208);
      if (this)
        v1 = *(_BYTE *)(this + 8) == 1;
      else
        v1 = 0;
    }
    while (v1);
  }
  return this;
}

{
  BOOL v1;

  if (this && *(_BYTE *)(this + 8) == 1)
  {
    do
    {
      this = *(_QWORD *)(this + 208);
      if (this)
        v1 = *(_BYTE *)(this + 8) == 1;
      else
        v1 = 0;
    }
    while (v1);
  }
  return this;
}

uint64_t llvm::VPBlockBase::getCondBit(llvm::VPBlockBase *this)
{
  if (*((_DWORD *)this + 28) == 1)
    return **((_QWORD **)this + 13);
  else
    return 0;
}

{
  if (*((_DWORD *)this + 28) == 1)
    return **((_QWORD **)this + 13);
  else
    return 0;
}

uint64_t llvm::VPBlockBase::getPredicate(llvm::VPBlockBase *this)
{
  if (*((_DWORD *)this + 40) == 1)
    return **((_QWORD **)this + 19);
  else
    return 0;
}

{
  if (*((_DWORD *)this + 40) == 1)
    return **((_QWORD **)this + 19);
  else
    return 0;
}

uint64_t llvm::VPTransformState::CFGState::getPreheaderBBFor(llvm::VPTransformState::CFGState *this, llvm::VPRecipeBase *a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v6;

  v2 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 40);
  if (v2 && *(_BYTE *)(v2 + 216))
    v2 = *(_QWORD *)(v2 + 40);
  if (*(_DWORD *)(v2 + 56) == 1)
  {
    for (i = **(_QWORD **)(v2 + 48); i && *(_BYTE *)(i + 8) == 1; i = *(_QWORD *)(i + 208))
      ;
  }
  else
  {
    i = 0;
  }
  v6 = i;
  return sub_1C6281BA0((_DWORD *)this + 6, &v6)[1];
}

uint64_t llvm::VPBasicBlock::createEmptyBasicBlock(llvm::VPBasicBlock *this, llvm::VPTransformState::CFGState *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  llvm::VPBasicBlock *v14;
  uint64_t v15;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t i;
  llvm::BasicBlock *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  unsigned __int8 *v33;
  unsigned __int8 **v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned int v37;
  llvm::Instruction *v38;
  llvm::BasicBlock *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  _QWORD v46[4];
  __int16 v47;

  v4 = *((_QWORD *)a2 + 1);
  v5 = *((_QWORD *)a2 + 2);
  v6 = **(_QWORD ***)v4;
  v47 = 260;
  v46[0] = (char *)this + 16;
  v7 = *(_QWORD *)(v4 + 56);
  v8 = operator new();
  *(_QWORD *)v8 = *v6 + 1600;
  *(_QWORD *)(v8 + 8) = 0;
  v9 = (_QWORD *)(v8 + 8);
  v10 = *(_DWORD *)(v8 + 20) & 0xC0000000;
  *(_QWORD *)(v8 + 24) = 0;
  v11 = v8 + 24;
  *(_DWORD *)(v8 + 16) = 22;
  *(_DWORD *)(v8 + 20) = v10;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = v8 + 40;
  *(_QWORD *)(v8 + 48) = v8 + 40;
  *(_QWORD *)(v8 + 56) = 0;
  if (v7)
  {
    if (v5)
      v12 = (uint64_t *)(v5 + 24);
    else
      v12 = (uint64_t *)(v7 + 72);
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v7 + 72, (_QWORD *)v8);
    v13 = *v12;
    *(_QWORD *)(v8 + 24) = *v12;
    *(_QWORD *)(v8 + 32) = v12;
    *(_QWORD *)(v13 + 8) = v11;
    *v12 = v11;
  }
  llvm::Value::setName((uint64_t ***)v8, (uint64_t)v46);
  v14 = this;
  do
  {
    v15 = *((unsigned int *)v14 + 14);
    if ((_DWORD)v15)
    {
      v17 = (uint64_t *)*((_QWORD *)v14 + 6);
      v18 = &v17[v15];
      while (1)
      {
        for (i = *v17; i && *(_BYTE *)(i + 8) == 1; i = *(_QWORD *)(i + 208))
          ;
        v46[0] = i;
        v21 = (llvm::BasicBlock *)sub_1C6281BA0((_DWORD *)a2 + 6, v46)[1];
        if (!v21)
        {
          v25 = v46[0];
          v26 = *((unsigned int *)a2 + 26);
          if (v26 >= *((unsigned int *)a2 + 27))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a2 + 96, (uint64_t)a2 + 112, v26 + 1, 8);
            v26 = *((unsigned int *)a2 + 26);
          }
          *(_QWORD *)(*((_QWORD *)a2 + 12) + 8 * v26) = v25;
          ++*((_DWORD *)a2 + 26);
          goto LABEL_56;
        }
        v22 = (_QWORD *)*((_QWORD *)v21 + 5);
        if (v22 == (_QWORD *)((char *)v21 + 40))
        {
          v24 = 0;
        }
        else
        {
          v23 = v22 ? (uint64_t)(v22 - 3) : 0;
          v24 = *(unsigned __int8 *)(v23 + 16) - 29 >= 0xB ? 0 : v23;
        }
        v27 = *(unsigned __int8 *)(v24 + 16);
        v28 = v27 == 30 ? v24 : 0;
        if (v27 != 35)
          break;
        if (v28)
          goto LABEL_50;
        v29 = *(unsigned __int8 **)(v24 + 48);
        v45 = v29;
        if (v29)
          llvm::MetadataTracking::track((uint64_t)&v45, v29, 2);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v24 + 40) + 40, (uint64_t ***)v24);
        v30 = *(_QWORD *)(v24 + 24);
        v31 = *(_QWORD **)(v24 + 32);
        *v31 = v30;
        *(_QWORD *)(v30 + 8) = v31;
        *(_QWORD *)(v24 + 24) = 0;
        *(_QWORD *)(v24 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v24);
        v32 = (char *)operator new(0x60uLL);
        *((_DWORD *)v32 + 13) = *((_DWORD *)v32 + 13) & 0x38000000 | 1;
        *(_QWORD *)v32 = 0;
        *((_QWORD *)v32 + 1) = 0;
        *((_QWORD *)v32 + 2) = 0;
        *((_QWORD *)v32 + 3) = v32 + 32;
        llvm::BranchInst::BranchInst((llvm::BranchInst *)(v32 + 32), (llvm::BasicBlock *)v8, v21);
        v44 = v45;
        if (v45)
          llvm::MetadataTracking::track((uint64_t)&v44, v45, 2);
        v35 = (unsigned __int8 *)*((_QWORD *)v32 + 10);
        v34 = (unsigned __int8 **)(v32 + 80);
        v33 = v35;
        if (v35)
          llvm::MetadataTracking::untrack((uint64_t)v34, v33);
        v36 = v44;
        *v34 = v44;
        if (v36)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v44, v36, (uint64_t)v34);
          v44 = 0;
        }
        if (v45)
          llvm::MetadataTracking::untrack((uint64_t)&v45, v45);
LABEL_56:
        if (++v17 == v18)
          return v8;
      }
      if (!v28 || (*(_DWORD *)(v28 + 20) & 0x7FFFFFF) == 3)
      {
        if (*(_DWORD *)(i + 80) == 2)
        {
          v37 = **(_QWORD **)(i + 72) != (_QWORD)this;
          v38 = (llvm::Instruction *)v24;
          v39 = (llvm::BasicBlock *)v8;
        }
        else
        {
          v42 = *(_QWORD *)(v46[0] + 40);
          llvm::Instruction::setSuccessor((llvm::Instruction *)v24, 0, (llvm::BasicBlock *)v8);
          if (v42 && *(_BYTE *)(v42 + 8) == 1)
          {
            do
            {
              v42 = *(_QWORD *)(v42 + 200);
              if (v42)
                v43 = *(_BYTE *)(v42 + 8) == 1;
              else
                v43 = 0;
            }
            while (v43);
          }
          v45 = (unsigned __int8 *)v42;
          v39 = (llvm::BasicBlock *)sub_1C6281BA0((_DWORD *)a2 + 6, &v45)[1];
          v38 = (llvm::Instruction *)v24;
          v37 = 1;
        }
        llvm::Instruction::setSuccessor(v38, v37, v39);
        goto LABEL_56;
      }
LABEL_50:
      if (*(_QWORD *)(v28 - 32))
      {
        **(_QWORD **)(v28 - 16) = *(_QWORD *)(v28 - 24);
        v40 = *(_QWORD *)(v28 - 24);
        if (v40)
          *(_QWORD *)(v40 + 16) = *(_QWORD *)(v28 - 16);
      }
      *(_QWORD *)(v28 - 32) = v8;
      v41 = *(_QWORD *)(v8 + 8);
      *(_QWORD *)(v28 - 24) = v41;
      if (v41)
        *(_QWORD *)(v41 + 16) = v28 - 24;
      *(_QWORD *)(v28 - 16) = v9;
      *v9 = v28 - 32;
      goto LABEL_56;
    }
    v14 = (llvm::VPBasicBlock *)*((_QWORD *)v14 + 5);
  }
  while (v14);
  return v8;
}

void llvm::VPBasicBlock::execute(uint64_t **this, llvm::VPTransformState *a2)
{
  int v4;
  _BOOL4 v5;
  llvm::BasicBlock *EmptyBasicBlock;
  uint64_t v7;
  uint64_t Plan;
  uint64_t v9;
  BOOL v10;
  llvm::VPBasicBlock *v11;
  llvm::VPBasicBlock *v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned __int8 **v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t **i;
  uint64_t **v27;
  uint64_t v28;
  unsigned __int8 *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  llvm::Value *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  unsigned __int8 *v40;
  char v41;

  if (*((_BYTE *)a2 + 24))
  {
    v5 = !*((_DWORD *)a2 + 3) && !*((_DWORD *)a2 + 4) && *((_BYTE *)a2 + 20) == 0;
    v4 = !v5;
  }
  else
  {
    v4 = 0;
  }
  v7 = *((_QWORD *)a2 + 10);
  EmptyBasicBlock = (llvm::BasicBlock *)*((_QWORD *)a2 + 11);
  Plan = llvm::VPBlockBase::getPlan((llvm::VPBlockBase *)this);
  v9 = *(_QWORD *)Plan;
  if (*(_QWORD *)Plan)
    v10 = *(_BYTE *)(*(_QWORD *)Plan + 8) == 1;
  else
    v10 = 0;
  if (!v10)
  {
    if (*(_DWORD *)(v9 + 80) == 1)
      v9 = **(_QWORD **)(v9 + 72);
    else
      v9 = 0;
  }
  if (*(_DWORD *)(v9 + 80) == 1)
    v11 = **(llvm::VPBasicBlock ***)(v9 + 72);
  else
    v11 = 0;
  if (v11 == (llvm::VPBasicBlock *)this)
  {
    EmptyBasicBlock = (llvm::BasicBlock *)*((_QWORD *)a2 + 12);
LABEL_53:
    *((_QWORD *)a2 + 11) = EmptyBasicBlock;
    goto LABEL_54;
  }
  if (v7)
  {
    v12 = (llvm::VPBasicBlock *)this;
    while (1)
    {
      v13 = *((_DWORD *)v12 + 14);
      if (v13)
        break;
      v12 = (llvm::VPBasicBlock *)*((_QWORD *)v12 + 5);
      if (!v12)
        goto LABEL_45;
    }
    if (v13 == 1)
    {
      v14 = **((_QWORD **)v12 + 6);
      if (v14)
      {
        v15 = *(unsigned __int8 *)(v14 + 8);
        v16 = v14;
        if (v15 == 1)
        {
          v16 = v14;
          do
          {
            v16 = *(_QWORD *)(v16 + 208);
            if (v16)
              v17 = *(_BYTE *)(v16 + 8) == 1;
            else
              v17 = 0;
          }
          while (v17);
        }
        if (v16 == v7)
        {
          while (1)
          {
            v18 = *(_DWORD *)(v7 + 80);
            if (v18)
              break;
            v7 = *(_QWORD *)(v7 + 40);
            if (!v7)
              goto LABEL_45;
          }
          if (v18 == 1 && **(_QWORD **)(v7 + 72))
          {
            v19 = this[5];
            if (v19 && *((_BYTE *)v19 + 216))
              v19 = (uint64_t *)v19[5];
            if (*(uint64_t **)(v14 + 40) == v19 && (v15 != 1 || *(_BYTE *)(v14 + 216)))
              goto LABEL_54;
          }
        }
      }
    }
LABEL_45:
    if (v4 && !*((_DWORD *)this + 14))
      goto LABEL_54;
    EmptyBasicBlock = (llvm::BasicBlock *)llvm::VPBasicBlock::createEmptyBasicBlock((llvm::VPBasicBlock *)this, (llvm::VPTransformState *)((char *)a2 + 80));
    v20 = *((_QWORD *)a2 + 34);
    *(_QWORD *)(v20 + 48) = EmptyBasicBlock;
    *(_QWORD *)(v20 + 56) = (char *)EmptyBasicBlock + 40;
    v21 = LLVMBuildUnreachable_0(*((_QWORD *)a2 + 34));
    v22 = (_QWORD *)*((_QWORD *)a2 + 61);
    if (v22)
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v22, (uint64_t)EmptyBasicBlock, *((_QWORD *)a2 + 32));
    v23 = *((_QWORD *)a2 + 34);
    *(_QWORD *)(v23 + 48) = v21[5];
    *(_QWORD *)(v23 + 56) = v21 + 3;
    v24 = (uint64_t *)v21[6];
    v40 = (unsigned __int8 *)v24;
    if (v24)
    {
      llvm::MetadataTracking::track((uint64_t)&v40, (unsigned __int8 *)v24, 2);
      v25 = (uint64_t *)v40;
    }
    else
    {
      v25 = 0;
    }
    sub_1C4774EF4(v23, 0, (uint64_t)v25);
    if (v40)
      llvm::MetadataTracking::untrack((uint64_t)&v40, v40);
    goto LABEL_53;
  }
LABEL_54:
  v40 = (unsigned __int8 *)this;
  sub_1C6281BA0((_DWORD *)a2 + 26, &v40)[1] = EmptyBasicBlock;
  *((_QWORD *)a2 + 10) = this;
  for (i = (uint64_t **)this[26]; i != this + 25; i = (uint64_t **)i[1])
  {
    if (i)
      v27 = i - 3;
    else
      v27 = 0;
    ((void (*)(uint64_t **, llvm::VPTransformState *))(*v27)[3])(v27, a2);
  }
  if (byte_1ED838B98)
  {
    if (*((_DWORD *)this + 28) == 1)
    {
      v28 = *this[13];
      if (v28)
      {
        v41 = 0;
        v40 = 0;
        v29 = llvm::VPTransformState::get((uint64_t)a2, v28, (unsigned int *)&v40);
        v30 = (_QWORD *)*((_QWORD *)EmptyBasicBlock + 5);
        if (v30 == (_QWORD *)((char *)EmptyBasicBlock + 40))
        {
          v32 = 0;
        }
        else
        {
          if (v30)
            v31 = v30 - 3;
          else
            v31 = 0;
          if (*((unsigned __int8 *)v31 + 16) - 29 >= 0xB)
            v32 = 0;
          else
            v32 = v31;
        }
        v33 = operator new(0xA0uLL);
        v34 = v33;
        v35 = 0;
        v36 = (llvm::Value *)(v33 + 24);
        v33[29] = v33[29] & 0x38000000 | 3;
        do
        {
          v37 = &v33[v35];
          *v37 = 0;
          v37[1] = 0;
          v37[2] = 0;
          v37[3] = v36;
          v35 += 8;
        }
        while (v35 != 24);
        llvm::BranchInst::BranchInst((llvm::BranchInst *)(v33 + 24), EmptyBasicBlock, 0, (llvm::Value *)v29, 0);
        if (*((_QWORD *)v34 + 8))
        {
          **((_QWORD **)v34 + 10) = *((_QWORD *)v34 + 9);
          v38 = *((_QWORD *)v34 + 9);
          if (v38)
            *(_QWORD *)(v38 + 16) = *((_QWORD *)v34 + 10);
        }
        *((_QWORD *)v34 + 8) = 0;
        v39 = v32 + 3;
        if (!v32)
          v39 = 0;
        v40 = (unsigned __int8 *)v39;
        llvm::ReplaceInstWithInst(v32[5] + 40, (uint64_t **)&v40, v36);
      }
    }
  }
}

uint64_t llvm::VPBasicBlock::dropAllReferences(uint64_t this, llvm::VPValue *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;

  v2 = this + 200;
  v3 = *(_QWORD *)(this + 208);
  if (v3 != this + 200)
  {
    do
    {
      if (v3)
        v5 = v3 - 24;
      else
        v5 = 0;
      v7 = (uint64_t *)(v5 + 16);
      v6 = *(_QWORD *)(v5 + 16);
      if (v6 >= 8)
      {
        if ((v6 & 4) == 0)
        {
          v8 = v5 + 24;
          goto LABEL_10;
        }
        v9 = (uint64_t **)(v6 & 0xFFFFFFFFFFFFFFF8);
        v10 = *(unsigned int *)((v6 & 0xFFFFFFFFFFFFFFF8) + 8);
        if ((_DWORD)v10)
        {
          v7 = *v9;
          v8 = (uint64_t)&(*v9)[v10];
          do
          {
LABEL_10:
            v11 = *v7++;
            this = llvm::VPValue::replaceAllUsesWith(v11, a2);
          }
          while (v7 != (uint64_t *)v8);
        }
      }
      v12 = *(_DWORD *)(v5 + 56);
      if (v12)
      {
        v13 = 0;
        v14 = v5 + 40;
        do
          this = sub_1C63D6858(v14, v13++, (uint64_t)a2);
        while (v12 != v13);
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return this;
}

_QWORD *llvm::VPBasicBlock::splitAt(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  int v11;
  size_t v12;
  size_t v13;
  void **v14;
  const void *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *__p[2];
  char v27;
  void **v28;
  __int16 v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[3];

  v32[2] = *MEMORY[0x1E0C80C00];
  v4 = *(_BYTE **)(a1 + 72);
  v5 = &v4[8 * *(unsigned int *)(a1 + 80)];
  v30 = v32;
  v31 = 0x200000000;
  sub_1C618A450((unsigned int *)&v30, v4, v5);
  if ((_DWORD)v31)
  {
    v6 = (uint64_t *)v30;
    v7 = 8 * v31;
    do
    {
      v8 = *v6++;
      sub_1C63D62F0(a1, v8);
      v7 -= 8;
    }
    while (v7);
  }
  v9 = (_QWORD *)operator new();
  v10 = *(_BYTE *)(a1 + 39);
  v11 = v10;
  v12 = v10 & 0x7F;
  if (v11 >= 0)
    v13 = v12;
  else
    v13 = *(_QWORD *)(a1 + 24);
  sub_1C484371C((uint64_t)__p, v13 + 6);
  if (v27 >= 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if (v13)
  {
    if (*(char *)(a1 + 39) >= 0)
      v15 = (const void *)(a1 + 16);
    else
      v15 = *(const void **)(a1 + 16);
    memmove(v14, v15, v13);
  }
  strcpy((char *)v14 + v13, ".split");
  v29 = 260;
  v28 = __p;
  sub_1C6089974(v9, (llvm::Twine *)&v28, 0);
  if (v27 < 0)
    operator delete(__p[0]);
  sub_1C63D63A8((uint64_t)v9, a1);
  if ((_DWORD)v31)
  {
    v16 = (uint64_t *)v30;
    v17 = 8 * v31;
    do
    {
      v18 = *v16++;
      sub_1C63D64B0(v9, v18);
      v17 -= 8;
    }
    while (v17);
  }
  if (a1 + 200 != a2)
  {
    do
    {
      v19 = a2 - 24;
      v20 = *(_QWORD *)(a2 + 8);
      if (!a2)
        v19 = 0;
      v22 = *(_QWORD *)(v19 + 24);
      v23 = *(_QWORD **)(v19 + 32);
      v21 = (_QWORD *)(v19 + 24);
      *v23 = v22;
      *(_QWORD *)(v22 + 8) = v23;
      *v21 = 0;
      v21[1] = 0;
      v21[8] = v9;
      v24 = v9[25];
      *v21 = v24;
      v21[1] = v9 + 25;
      *(_QWORD *)(v24 + 8) = v21;
      v9[25] = v21;
      a2 = v20;
    }
    while (v20 != a1 + 200);
  }
  if (v30 != v32)
    free(v30);
  return v9;
}

void llvm::VPRegionBlock::dropAllReferences(llvm::VPRegionBlock *this, llvm::VPValue *a2)
{
  _BYTE *v3;
  const void *v4;
  void *v5;
  unsigned int v6;
  unsigned int v7;
  _BYTE *v8;
  const void *v9;
  void *v10;
  unsigned int v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  _BYTE *v19;
  _BYTE v20[64];
  char *v21;
  char *v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  _BYTE v29[64];
  void *__p;
  char *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  void *v38;
  _BYTE *v39;
  void *v40;
  void *v41;
  unsigned int v42;
  unsigned int v43;
  void *v44;
  _BYTE *v45;

  sub_1C63DD7E8((uint64_t *)this + 25, &v33);
  v3 = v29;
  v24 = v29;
  v4 = v34;
  if (v34 == v33)
  {
    v25 = v29;
    v5 = v34;
  }
  else
  {
    v17 = v35;
    v3 = malloc_type_malloc(8 * v35, 0x4065EBACuLL);
    if (!v3)
    {
      if (v17)
        goto LABEL_57;
      v3 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v3)
        goto LABEL_57;
    }
    v25 = v3;
    v5 = v33;
    v4 = v34;
  }
  v6 = v36;
  v26 = v35;
  if (v4 == v5)
    v7 = v36;
  else
    v7 = v35;
  if (v7)
  {
    memmove(v3, v4, 8 * v7);
    v6 = v36;
  }
  v27 = v6;
  v28 = v37;
  v31 = 0;
  v32 = 0;
  __p = 0;
  sub_1C4D6CDA0(&__p, v38, v39, 0xAAAAAAAAAAAAAAABLL * ((v39 - (_BYTE *)v38) >> 3));
  v8 = v20;
  v9 = v41;
  if (v41 != v40)
  {
    v18 = v42;
    v8 = malloc_type_malloc(8 * v42, 0x4065EBACuLL);
    if (v8 || !v18 && (v8 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v19 = v8;
      v10 = v40;
      v9 = v41;
      goto LABEL_10;
    }
LABEL_57:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v19 = v20;
  v10 = v41;
LABEL_10:
  if (v9 == v10)
    v11 = v43;
  else
    v11 = v42;
  if (v11)
    memmove(v8, v9, 8 * v11);
  v22 = 0;
  v23 = 0;
  v21 = 0;
  sub_1C4D6CDA0(&v21, v44, v45, 0xAAAAAAAAAAAAAAABLL * ((v45 - (_BYTE *)v44) >> 3));
  while (1)
  {
    if (v31 - (_BYTE *)__p != v22 - v21)
      goto LABEL_30;
    if (__p == v31)
      break;
    v12 = v21 + 8;
    v13 = (char *)__p + 8;
    while (1)
    {
      v14 = v13 - 8;
      if (*((_QWORD *)v13 - 1) != *((_QWORD *)v12 - 1))
        break;
      v15 = v12[8];
      if (v13[8])
        v16 = v15 == 0;
      else
        v16 = 1;
      if (v16)
      {
        if ((v13[8] == 0) == (v15 != 0))
          break;
      }
      else if (*(_QWORD *)v13 != *(_QWORD *)v12)
      {
        break;
      }
      v12 += 24;
      v13 += 24;
      if (v14 + 24 == v31)
        goto LABEL_31;
    }
LABEL_30:
    (*(void (**)(_QWORD, llvm::VPValue *))(**((_QWORD **)v31 - 3) + 24))(*((_QWORD *)v31 - 3), a2);
    sub_1C63DD89C((char *)&v24);
  }
LABEL_31:
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  if (v19 != v20)
    free(v19);
  if (__p)
  {
    v31 = (char *)__p;
    operator delete(__p);
  }
  if (v25 != v24)
    free(v25);
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  if (v41 != v40)
    free(v41);
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  if (v34 != v33)
    free(v34);
}

void llvm::VPRegionBlock::execute(llvm::VPRegionBlock *this, llvm::VPTransformState *a2)
{
  int v4;
  int j;
  int v6;
  int v7;
  char *k;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *i;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  void *__p;
  char *v55;
  uint64_t v56;

  __p = 0;
  v55 = 0;
  v56 = 0;
  sub_1C63E6C88((char **)&__p, (uint64_t *)this + 25);
  if (!*((_BYTE *)this + 216))
  {
    v11 = *((_QWORD *)a2 + 61);
    v12 = sub_1C484358C(*((_QWORD *)a2 + 32) + 48, 152, 3);
    v13 = 0;
    *(_OWORD *)v12 = 0u;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_OWORD *)(v12 + 48) = 0u;
    *(_OWORD *)(v12 + 64) = 0u;
    *(_OWORD *)(v12 + 80) = 0u;
    *(_OWORD *)(v12 + 96) = 0u;
    *(_OWORD *)(v12 + 112) = 0u;
    *(_OWORD *)(v12 + 128) = 0u;
    *(_QWORD *)(v12 + 144) = 0;
    *(_QWORD *)(v12 + 56) = v12 + 88;
    *(_QWORD *)(v12 + 64) = v12 + 88;
    *(_DWORD *)(v12 + 72) = 8;
    *((_QWORD *)a2 + 61) = v12;
    if (*((_DWORD *)this + 14) == 1)
    {
      v13 = **((_QWORD **)this + 6);
      if (v13)
      {
        if (*(_BYTE *)(v13 + 8) == 1)
        {
          do
          {
            v13 = *(_QWORD *)(v13 + 208);
            if (v13)
              v14 = *(_BYTE *)(v13 + 8) == 1;
            else
              v14 = 0;
          }
          while (v14);
        }
      }
    }
    v53 = v13;
    v15 = sub_1C6281BA0((_DWORD *)a2 + 26, &v53);
    v16 = (uint64_t *)*((_QWORD *)a2 + 32);
    v17 = *((_DWORD *)v16 + 4);
    if (v17)
    {
      v18 = v15[1];
      v19 = *v16;
      v20 = v17 - 1;
      v21 = (v17 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      v22 = *(_QWORD *)(*v16 + 16 * v21);
      if (v18 == v22)
      {
LABEL_30:
        v25 = *(_QWORD **)(v19 + 16 * v21 + 8);
        if (v25)
        {
          v26 = (_QWORD *)*((_QWORD *)a2 + 61);
          *v26 = v25;
          v28 = (_QWORD *)v25[2];
          v27 = v25[3];
          if ((unint64_t)v28 >= v27)
          {
            v40 = (_QWORD *)v25[1];
            v41 = v28 - v40;
            v42 = v41 + 1;
            if ((unint64_t)(v41 + 1) >> 61)
              goto LABEL_71;
            v43 = v27 - (_QWORD)v40;
            if (v43 >> 2 > v42)
              v42 = v43 >> 2;
            if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
              v44 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v44 = v42;
            if (v44)
            {
              if (v44 >> 61)
                goto LABEL_72;
              v45 = (char *)operator new(8 * v44);
            }
            else
            {
              v45 = 0;
            }
            v48 = &v45[8 * v41];
            *(_QWORD *)v48 = v26;
            v29 = v48 + 8;
            if (v28 != v40)
            {
              do
              {
                v49 = *--v28;
                *((_QWORD *)v48 - 1) = v49;
                v48 -= 8;
              }
              while (v28 != v40);
              v28 = (_QWORD *)v25[1];
            }
            v25[1] = v48;
            v25[2] = v29;
            v25[3] = &v45[8 * v44];
            if (v28)
              operator delete(v28);
          }
          else
          {
            *v28 = v26;
            v29 = v28 + 1;
          }
          v25[2] = v29;
LABEL_67:
          v51 = (char *)__p;
          for (i = v55; i != v51; i -= 8)
          {
            v52 = *((_QWORD *)i - 1);
            (*(void (**)(uint64_t, llvm::VPTransformState *))(*(_QWORD *)v52 + 16))(v52, a2);
          }
          *((_QWORD *)a2 + 61) = v11;
          goto LABEL_15;
        }
      }
      else
      {
        v23 = 1;
        while (v22 != -4096)
        {
          v24 = v21 + v23++;
          v21 = v24 & v20;
          v22 = *(_QWORD *)(v19 + 16 * v21);
          if (v18 == v22)
            goto LABEL_30;
        }
      }
    }
    v30 = *((_QWORD *)a2 + 61);
    v32 = (_QWORD *)v16[4];
    v31 = v16[5];
    if ((unint64_t)v32 < v31)
    {
      *v32 = v30;
      v33 = v32 + 1;
LABEL_59:
      v16[4] = (uint64_t)v33;
      goto LABEL_67;
    }
    v34 = (_QWORD *)v16[3];
    v35 = v32 - v34;
    v36 = v35 + 1;
    if (!((unint64_t)(v35 + 1) >> 61))
    {
      v37 = v31 - (_QWORD)v34;
      if (v37 >> 2 > v36)
        v36 = v37 >> 2;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
        v38 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (!v38)
      {
        v39 = 0;
        goto LABEL_54;
      }
      if (!(v38 >> 61))
      {
        v39 = (char *)operator new(8 * v38);
LABEL_54:
        v46 = &v39[8 * v35];
        *(_QWORD *)v46 = v30;
        v33 = v46 + 8;
        if (v32 != v34)
        {
          do
          {
            v47 = *--v32;
            *((_QWORD *)v46 - 1) = v47;
            v46 -= 8;
          }
          while (v32 != v34);
          v32 = (_QWORD *)v16[3];
        }
        v16[3] = (uint64_t)v46;
        v16[4] = (uint64_t)v33;
        v16[5] = (uint64_t)&v39[8 * v38];
        if (v32)
          operator delete(v32);
        goto LABEL_59;
      }
LABEL_72:
      sub_1C4764EE4();
    }
LABEL_71:
    abort();
  }
  if (!*((_BYTE *)a2 + 24))
    *((_BYTE *)a2 + 24) = 1;
  *((_BYTE *)a2 + 20) = 0;
  *(_QWORD *)((char *)a2 + 12) = 0;
  v4 = *((_DWORD *)a2 + 2);
  if (!v4)
    goto LABEL_14;
  for (j = 0; j != v4; ++j)
  {
    *((_DWORD *)a2 + 3) = j;
    v6 = *(_DWORD *)a2;
    if (*(_DWORD *)a2)
    {
      v7 = 0;
      do
      {
        *((_DWORD *)a2 + 4) = v7;
        *((_BYTE *)a2 + 20) = 0;
        v9 = (char *)__p;
        for (k = v55; k != v9; k -= 8)
        {
          v10 = *((_QWORD *)k - 1);
          (*(void (**)(uint64_t, llvm::VPTransformState *))(*(_QWORD *)v10 + 16))(v10, a2);
        }
        ++v7;
      }
      while (v7 != v6);
    }
  }
  if (*((_BYTE *)a2 + 24))
LABEL_14:
    *((_BYTE *)a2 + 24) = 0;
LABEL_15:
  if (__p)
  {
    v55 = (char *)__p;
    operator delete(__p);
  }
}

llvm::raw_ostream *llvm::VPRegionBlock::print(llvm::VPRegionBlock *this, llvm::raw_ostream *a2, const llvm::Twine *a3, llvm::VPSlotTracker *a4)
{
  uint64_t v8;
  const char *v9;
  size_t v10;
  void *v11;
  char v12;
  const char *v13;
  size_t v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  const llvm::Twine *v19;
  _BYTE *v20;
  const void *v21;
  void *v22;
  unsigned int v23;
  unsigned int v24;
  _BYTE *v25;
  const void *v26;
  void *v27;
  unsigned int v28;
  char *v29;
  char *v30;
  char *v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  _WORD *v38;
  unsigned int v40;
  unsigned int v41;
  _BYTE *v42;
  _BYTE v43[64];
  char *v44;
  char *v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  _BYTE v52[64];
  void *__p;
  char *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  void *v61;
  _BYTE *v62;
  void *v63;
  void *v64;
  unsigned int v65;
  unsigned int v66;
  void *v67;
  _BYTE *v68;
  _QWORD v69[4];
  __int16 v70;

  llvm::Twine::printOneChild((uint64_t)this, a2, *(_QWORD *)a3, *((_QWORD *)a3 + 1), *((_BYTE *)a3 + 32));
  llvm::Twine::printOneChild(v8, a2, *((_QWORD *)a3 + 2), *((_QWORD *)a3 + 3), *((_BYTE *)a3 + 33));
  if (*((_BYTE *)this + 216))
    v9 = "<xVFxUF> ";
  else
    v9 = "<x1> ";
  if (*((_BYTE *)this + 216))
    v10 = 9;
  else
    v10 = 5;
  v11 = (void *)*((_QWORD *)a2 + 4);
  if (v10 <= *((_QWORD *)a2 + 3) - (_QWORD)v11)
  {
    memcpy(v11, v9, v10);
    *((_QWORD *)a2 + 4) += v10;
  }
  else
  {
    llvm::raw_ostream::write(a2, v9, v10);
  }
  v12 = *((_BYTE *)this + 39);
  if (v12 >= 0)
    v13 = (char *)this + 16;
  else
    v13 = (const char *)*((_QWORD *)this + 2);
  if (v12 >= 0)
    v14 = v12 & 0x7F;
  else
    v14 = *((_QWORD *)this + 3);
  llvm::raw_ostream::write(a2, v13, v14);
  v15 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v15) > 2)
  {
    *(_BYTE *)(v15 + 2) = 123;
    *(_WORD *)v15 = 8250;
    *((_QWORD *)a2 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(a2, ": {", 3uLL);
  }
  v16 = *((unsigned __int8 *)a3 + 32);
  if (v16 == 1)
  {
    v69[0] = "  ";
    v17 = 259;
    goto LABEL_21;
  }
  if (!*((_BYTE *)a3 + 32))
  {
    v17 = 256;
LABEL_21:
    v70 = v17;
    goto LABEL_26;
  }
  v18 = *((_QWORD *)a3 + 1);
  if (*((_BYTE *)a3 + 33) == 1)
  {
    v19 = *(const llvm::Twine **)a3;
  }
  else
  {
    LOBYTE(v16) = 2;
    v19 = a3;
  }
  v69[0] = v19;
  v69[1] = v18;
  v69[2] = "  ";
  LOBYTE(v70) = v16;
  HIBYTE(v70) = 3;
LABEL_26:
  sub_1C63DD7E8((uint64_t *)this + 25, &v56);
  v20 = v52;
  v47 = v52;
  v21 = v57;
  if (v57 == v56)
  {
    v48 = v52;
    v22 = v57;
  }
  else
  {
    v40 = v58;
    v20 = malloc_type_malloc(8 * v58, 0x4065EBACuLL);
    if (!v20)
    {
      if (v40)
        goto LABEL_90;
      v20 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v20)
        goto LABEL_90;
    }
    v48 = v20;
    v22 = v56;
    v21 = v57;
  }
  v23 = v59;
  v49 = v58;
  if (v21 == v22)
    v24 = v59;
  else
    v24 = v58;
  if (v24)
  {
    memmove(v20, v21, 8 * v24);
    v23 = v59;
  }
  v50 = v23;
  v51 = v60;
  v54 = 0;
  v55 = 0;
  __p = 0;
  sub_1C4D6CDA0(&__p, v61, v62, 0xAAAAAAAAAAAAAAABLL * ((v62 - (_BYTE *)v61) >> 3));
  v25 = v43;
  v26 = v64;
  if (v64 != v63)
  {
    v41 = v65;
    v25 = malloc_type_malloc(8 * v65, 0x4065EBACuLL);
    if (v25 || !v41 && (v25 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v42 = v25;
      v27 = v63;
      v26 = v64;
      goto LABEL_35;
    }
LABEL_90:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v42 = v43;
  v27 = v64;
LABEL_35:
  if (v26 == v27)
    v28 = v66;
  else
    v28 = v65;
  if (v28)
    memmove(v25, v26, 8 * v28);
  v45 = 0;
  v46 = 0;
  v44 = 0;
  sub_1C4D6CDA0(&v44, v67, v68, 0xAAAAAAAAAAAAAAABLL * ((v68 - (_BYTE *)v67) >> 3));
  while (1)
  {
    if (v54 - (_BYTE *)__p != v45 - v44)
      goto LABEL_55;
    if (__p == v54)
      break;
    v29 = v44 + 8;
    v30 = (char *)__p + 8;
    while (1)
    {
      v31 = v30 - 8;
      if (*((_QWORD *)v30 - 1) != *((_QWORD *)v29 - 1))
        break;
      v32 = v29[8];
      if (v30[8])
        v33 = v32 == 0;
      else
        v33 = 1;
      if (v33)
      {
        if ((v30[8] == 0) == (v32 != 0))
          break;
      }
      else if (*(_QWORD *)v30 != *(_QWORD *)v29)
      {
        break;
      }
      v29 += 24;
      v30 += 24;
      if (v31 + 24 == v54)
        goto LABEL_59;
    }
LABEL_55:
    v34 = *((_QWORD *)v54 - 3);
    v35 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v35 >= *((_QWORD *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 10);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v35 + 1;
      *v35 = 10;
    }
    (*(void (**)(uint64_t, llvm::raw_ostream *, _QWORD *, llvm::VPSlotTracker *))(*(_QWORD *)v34 + 32))(v34, a2, v69, a4);
    sub_1C63DD89C((char *)&v47);
  }
LABEL_59:
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  if (v42 != v43)
    free(v42);
  if (__p)
  {
    v54 = (char *)__p;
    operator delete(__p);
  }
  if (v48 != v47)
    free(v48);
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  if (v64 != v63)
    free(v64);
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
  v36 = (uint64_t)v57;
  if (v57 != v56)
    free(v57);
  llvm::Twine::printOneChild(v36, a2, *(_QWORD *)a3, *((_QWORD *)a3 + 1), *((_BYTE *)a3 + 32));
  llvm::Twine::printOneChild(v37, a2, *((_QWORD *)a3 + 2), *((_QWORD *)a3 + 3), *((_BYTE *)a3 + 33));
  v38 = (_WORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v38 > 1uLL)
  {
    *v38 = 2685;
    *((_QWORD *)a2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a2, "}\n", 2uLL);
  }
  return llvm::VPBlockBase::printSuccessors(this, a2, a3);
}

uint64_t llvm::VPRecipeBase::insertBefore(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a3;
  *(_QWORD *)(a1 + 24) = *a3;
  result = a1 + 24;
  *(_QWORD *)(result + 64) = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(v3 + 8) = result;
  *a3 = result;
  return result;
}

uint64_t llvm::VPRecipeBase::insertAfter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 88);
  if (*(_QWORD *)(v2 + 200) == v2 + 200)
    v3 = (uint64_t **)(v2 + 208);
  else
    v3 = (uint64_t **)(a2 + 32);
  v4 = *v3;
  v5 = *v4;
  *(_QWORD *)(a1 + 24) = *v4;
  result = a1 + 24;
  *(_QWORD *)(result + 64) = v2;
  *(_QWORD *)(result + 8) = v4;
  *(_QWORD *)(v5 + 8) = result;
  *v4 = result;
  return result;
}

_QWORD *llvm::VPRecipeBase::removeFromParent(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = this[3];
  v2 = (_QWORD *)this[4];
  *v2 = v1;
  *(_QWORD *)(v1 + 8) = v2;
  this[11] = 0;
  this[3] = 0;
  this[4] = 0;
  return this;
}

void llvm::VPInstruction::generateInstruction(llvm::VPInstruction *this, llvm::VPTransformState *a2, unsigned int a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t **v11;
  llvm::Type *v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  llvm::Value *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  unsigned __int8 *v20;
  llvm::Value **StepForVF;
  llvm::Value *VectorSplice;
  uint64_t Intrinsic;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  void **v35;
  unsigned __int8 *v36;
  llvm::VPTransformState *v37;
  char *v38;
  unsigned __int8 *v39;
  llvm::BasicBlock *v40;
  llvm::BasicBlock *v41;
  char *v42;
  uint64_t v43;
  unsigned __int8 **v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unsigned __int8 *v52;
  const char *v53;
  char v54;
  __int16 v55;
  uint64_t v56[2];
  uint64_t v57[3];

  v57[2] = *MEMORY[0x1E0C80C00];
  v8 = *((_QWORD *)a2 + 34);
  v9 = (unsigned __int8 *)*((_QWORD *)this + 20);
  v52 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track((uint64_t)&v52, v9, 2);
    v10 = v52;
  }
  else
  {
    v10 = 0;
  }
  v11 = (uint64_t **)sub_1C4774EF4(v8, 0, (uint64_t)v10);
  v12 = (llvm::Type *)v52;
  if (v52)
    v11 = (uint64_t **)llvm::MetadataTracking::untrack((uint64_t)&v52, v52);
  v13 = *((unsigned __int8 *)this + 152);
  if ((v13 - 13) <= 0x11)
  {
    v24 = llvm::VPTransformState::get(a2, **((llvm::VPValue ***)this + 6), a3);
    v25 = llvm::VPTransformState::get(a2, *(llvm::VPValue **)(*((_QWORD *)this + 6) + 8), a3);
    v26 = *((unsigned __int8 *)this + 152);
    v55 = 257;
    Intrinsic = (uint64_t)sub_1C4773860(v8, v26, v24, (uint64_t)v25, (uint64_t)&v53, 0);
  }
  else
  {
    if (v13 == 77)
    {
      if (!a3)
      {
        v14 = llvm::VPTransformState::get(a2, **((llvm::VPValue ***)this + 6), 0);
        v15 = llvm::VPTransformState::get(a2, *(llvm::VPValue **)(*((_QWORD *)this + 6) + 8), 0);
        v55 = 257;
        v16 = (llvm::Value *)sub_1C4774B48(v8, 32, (uint64_t)v14, (uint64_t)v15, (uint64_t)&v53);
        v17 = *(_QWORD *)llvm::VPBlockBase::getPlan(*((llvm::VPBlockBase **)this + 11));
        if (!v17 || *(_BYTE *)(v17 + 8) != 1)
          v17 = **(_QWORD **)(v17 + 72);
        do
        {
          v17 = *(_QWORD *)(v17 + 200);
          if (v17)
            v18 = *(_BYTE *)(v17 + 8) == 1;
          else
            v18 = 0;
        }
        while (v18);
        v57[0] = v17;
        if (*(_QWORD *)(v17 + 200) == v17 + 200)
        {
          if (*(_DWORD *)(v17 + 80) == 1)
            v19 = **(_QWORD **)(v17 + 72);
          else
            v19 = 0;
          v57[0] = v19;
        }
        v40 = (llvm::BasicBlock *)*((_QWORD *)a2 + 12);
        v41 = (llvm::BasicBlock *)sub_1C6281BA0((_DWORD *)a2 + 26, v57)[1];
        v42 = (char *)operator new(0xA0uLL);
        v43 = 0;
        v44 = (unsigned __int8 **)(v42 + 96);
        *((_DWORD *)v42 + 29) = *((_DWORD *)v42 + 29) & 0x38000000 | 3;
        do
        {
          v45 = &v42[v43];
          *(_QWORD *)v45 = 0;
          *((_QWORD *)v45 + 1) = 0;
          *((_QWORD *)v45 + 2) = 0;
          *((_QWORD *)v45 + 3) = v44;
          v43 += 32;
        }
        while (v43 != 96);
        llvm::BranchInst::BranchInst((llvm::BranchInst *)(v42 + 96), v40, v41, v16, 0);
        v55 = 257;
        sub_1C4867F8C((uint64_t *)v8, v44, (uint64_t)&v53);
        v46 = *(_QWORD *)(v8 + 48);
        v47 = *(_QWORD *)(v46 + 40);
        if (v47 == v46 + 40)
        {
          v49 = 0;
        }
        else
        {
          if (v47)
            v48 = v47 - 24;
          else
            v48 = 0;
          if (*(unsigned __int8 *)(v48 + 16) - 29 >= 0xB)
            v49 = 0;
          else
            v49 = v48;
        }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v49 + 40) + 40, (uint64_t ***)v49);
        v50 = *(_QWORD *)(v49 + 24);
        v51 = *(_QWORD **)(v49 + 32);
        *v51 = v50;
        *(_QWORD *)(v50 + 8) = v51;
        *(_QWORD *)(v49 + 24) = 0;
        *(_QWORD *)(v49 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v49);
      }
      return;
    }
    switch(*((_BYTE *)this + 152))
    {
      case 'E':
        v34 = llvm::VPTransformState::get(a2, **((llvm::VPValue ***)this + 6), 0);
        if (a3)
          v34 = llvm::VPTransformState::get(a2, *(llvm::VPValue **)(*((_QWORD *)this + 6) + 8), a3 - 1);
        v35 = (void **)v34;
        if ((*(_DWORD *)(*(_QWORD *)v34 + 8) & 0xFE) == 0x12)
        {
          v36 = llvm::VPTransformState::get(a2, *(llvm::VPValue **)(*((_QWORD *)this + 6) + 8), a3);
          v55 = 257;
          VectorSplice = llvm::IRBuilderBase::CreateVectorSplice(v8, v35, (uint64_t)v36, -1, (uint64_t)&v53);
          v37 = a2;
          v38 = (char *)this + 96;
        }
        else
        {
          v38 = (char *)this + 96;
          v37 = a2;
          VectorSplice = (llvm::Value *)v35;
        }
        goto LABEL_37;
      case 'F':
        v39 = llvm::VPTransformState::get(a2, **((llvm::VPValue ***)this + 6), a3);
        v55 = 257;
        Intrinsic = sub_1C506EAA0(v8, (uint64_t)v39, (uint64_t)&v53);
        break;
      case 'G':
        v29 = llvm::VPTransformState::get(a2, **((llvm::VPValue ***)this + 6), a3);
        v30 = llvm::VPTransformState::get(a2, *(llvm::VPValue **)(*((_QWORD *)this + 6) + 8), a3);
        v55 = 257;
        Intrinsic = sub_1C4774B48(v8, 37, (uint64_t)v29, (uint64_t)v30, (uint64_t)&v53);
        break;
      case 'H':
      case 'I':
        __break(1u);
        goto LABEL_54;
      case 'J':
        v27 = **((_QWORD **)this + 6);
        v53 = (const char *)a3;
        v54 = 0;
        v3 = llvm::VPTransformState::get((uint64_t)a2, v27, (unsigned int *)&v53);
        v4 = llvm::VPTransformState::get(a2, *(llvm::VPValue **)(*((_QWORD *)this + 6) + 8), a3);
        v11 = (uint64_t **)(**(_QWORD **)(v8 + 64) + 1888);
        v12 = *(llvm::Type **)a2;
        if (HIDWORD(*(_QWORD *)a2) == 1)
LABEL_54:
          llvm::ScalableVectorType::get(v11, v12);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v11, v12);
        v57[0] = v28;
        v57[1] = *(_QWORD *)v4;
        v56[0] = (uint64_t)v3;
        v56[1] = (uint64_t)v4;
        v53 = "active.lane.mask";
        v55 = 259;
        Intrinsic = llvm::IRBuilderBase::CreateIntrinsic((uint64_t *)v8, 153, v57, 2, v56, 2, 0, (uint64_t)&v53);
        break;
      case 'K':
      case 'L':
        if (a3)
        {
          Intrinsic = (uint64_t)llvm::VPTransformState::get(a2, (llvm::VPInstruction *)((char *)this + 96), 0);
        }
        else
        {
          v20 = llvm::VPTransformState::get(a2, **((llvm::VPValue ***)this + 6), 0);
          StepForVF = llvm::createStepForVF((uint64_t *)v8, *(llvm::ConstantInt **)v20, *(_QWORD *)a2, *((unsigned int *)a2 + 2));
          v53 = "index.next";
          v55 = 259;
          VectorSplice = (llvm::Value *)(*(uint64_t (**)(_QWORD, unsigned __int8 *, llvm::Value **, BOOL, _QWORD))(**(_QWORD **)(v8 + 72) + 16))(*(_QWORD *)(v8 + 72), v20, StepForVF, v13 == 76, 0);
          if (VectorSplice)
            goto LABEL_36;
          Intrinsic = sub_1C4774D04((uint64_t *)v8, 13, v20, (uint64_t)StepForVF, (uint64_t)&v53, v13 == 76, 0);
        }
        break;
      default:
        v31 = llvm::VPTransformState::get(a2, **((llvm::VPValue ***)this + 6), a3);
        v32 = (uint64_t *)llvm::VPTransformState::get(a2, *(llvm::VPValue **)(*((_QWORD *)this + 6) + 8), a3);
        v33 = llvm::VPTransformState::get(a2, *(llvm::VPValue **)(*((_QWORD *)this + 6) + 16), a3);
        v55 = 257;
        Intrinsic = (uint64_t)llvm::IRBuilderBase::CreateSelect((uint64_t *)v8, (uint64_t)v31, v32, (uint64_t)v33, (uint64_t)&v53, 0);
        break;
    }
  }
  VectorSplice = (llvm::Value *)Intrinsic;
LABEL_36:
  v38 = (char *)this + 96;
  v37 = a2;
LABEL_37:
  sub_1C63D1D2C((uint64_t)v37, v38, (uint64_t)VectorSplice, a3);
}

void llvm::VPlan::execute(llvm::VPlan *this, llvm::VPTransformState *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t SingleSuccessor;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  _BYTE *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned int v22;
  _BYTE *v23;
  const void *v24;
  void *v25;
  unsigned int v26;
  char *v27;
  char *v28;
  char *v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  unsigned __int8 **v33;
  unsigned __int8 **v34;
  uint64_t v35;
  uint64_t v36;
  llvm::Instruction *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t i;
  _QWORD *v46;
  uint64_t v47;
  BOOL v48;
  llvm::BasicBlock *v49;
  uint64_t v50;
  BOOL v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  llvm::VPValue *v61;
  unsigned __int8 *v62;
  uint64_t v63;
  _QWORD *v64;
  llvm::VPValue *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  llvm::VPValue *v69;
  unsigned __int8 *v70;
  unsigned int v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  int v74;
  unsigned __int8 *v75;
  int v76;
  unsigned __int8 *v77;
  llvm::Instruction *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  llvm::Instruction *v83;
  llvm::DominatorTree *v84;
  llvm::BasicBlock *v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE v90[64];
  char *v91;
  char *v92;
  uint64_t v93;
  _BYTE *v94;
  _BYTE *v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  _BYTE v99[64];
  void *__p;
  char *v101;
  uint64_t v102;
  unsigned __int8 *v103;
  unsigned __int8 *v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  void *v108;
  _BYTE *v109;
  void *v110;
  void *v111;
  unsigned int v112;
  unsigned int v113;
  void *v114;
  _BYTE *v115;

  v4 = *((_QWORD *)this + 23);
  v5 = *((unsigned int *)this + 50);
  v6 = (uint64_t *)(v4 + 16 * v5);
  if (*((_DWORD *)this + 48))
  {
    if ((_DWORD)v5)
    {
      v8 = 16 * v5;
      v7 = (uint64_t *)*((_QWORD *)this + 23);
      while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v7 += 2;
        v8 -= 16;
        if (!v8)
          goto LABEL_7;
      }
    }
    else
    {
      v7 = (uint64_t *)*((_QWORD *)this + 23);
    }
  }
  else
  {
LABEL_7:
    v7 = (uint64_t *)(v4 + 16 * v5);
  }
  v9 = (uint64_t *)(v4 + 16 * v5);
  while (v7 != v9)
  {
    v10 = v7 + 2;
    v11 = *v7;
    sub_1C6180A54((uint64_t)a2 + 280, v7 + 1)[1] = v11;
    v7 = v6;
    if (v10 != v6)
    {
      v7 = v10;
      while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v7 += 2;
        if (v7 == v6)
        {
          v7 = v6;
          break;
        }
      }
    }
  }
  *((_QWORD *)a2 + 10) = 0;
  SingleSuccessor = llvm::BasicBlock::getSingleSuccessor(*((llvm::BasicBlock **)a2 + 11));
  v13 = 0;
  *((_QWORD *)a2 + 12) = SingleSuccessor;
  v14 = *((_QWORD *)a2 + 34);
  v88 = *((_QWORD *)a2 + 11);
  v15 = *(_QWORD *)(v88 + 40);
  if (v15)
    v16 = v15 - 24;
  else
    v16 = 0;
  if (*(unsigned __int8 *)(v16 + 16) - 29 >= 0xB)
    v16 = 0;
  *(_QWORD *)(v14 + 48) = *(_QWORD *)(v16 + 40);
  *(_QWORD *)(v14 + 56) = v16 + 24;
  v17 = *(unsigned __int8 **)(v16 + 48);
  v103 = v17;
  if (v17)
  {
    llvm::MetadataTracking::track((uint64_t)&v103, v17, 2);
    v13 = v103;
  }
  sub_1C4774EF4(v14, 0, (uint64_t)v13);
  if (v103)
    llvm::MetadataTracking::untrack((uint64_t)&v103, v103);
  sub_1C63DD7E8((uint64_t *)this, &v103);
  v18 = v99;
  v94 = v99;
  v19 = v104;
  if (v104 == v103)
  {
    v95 = v99;
    v20 = v104;
  }
  else
  {
    v86 = v105;
    v18 = malloc_type_malloc(8 * v105, 0x4065EBACuLL);
    if (!v18)
    {
      if (v86)
        goto LABEL_184;
      v18 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v18)
        goto LABEL_184;
    }
    v95 = v18;
    v20 = v103;
    v19 = v104;
  }
  v21 = v106;
  v96 = v105;
  if (v19 == v20)
    v22 = v106;
  else
    v22 = v105;
  if (v22)
  {
    memmove(v18, v19, 8 * v22);
    v21 = v106;
  }
  v97 = v21;
  v98 = v107;
  v101 = 0;
  v102 = 0;
  __p = 0;
  sub_1C4D6CDA0(&__p, v108, v109, 0xAAAAAAAAAAAAAAABLL * ((v109 - (_BYTE *)v108) >> 3));
  v23 = v90;
  v24 = v111;
  if (v111 != v110)
  {
    v87 = v112;
    v23 = malloc_type_malloc(8 * v112, 0x4065EBACuLL);
    if (v23 || !v87 && (v23 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v89 = v23;
      v25 = v110;
      v24 = v111;
      goto LABEL_33;
    }
LABEL_184:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v89 = v90;
  v25 = v111;
LABEL_33:
  if (v24 == v25)
    v26 = v113;
  else
    v26 = v112;
  if (v26)
    memmove(v23, v24, 8 * v26);
  v92 = 0;
  v93 = 0;
  v91 = 0;
  sub_1C4D6CDA0(&v91, v114, v115, 0xAAAAAAAAAAAAAAABLL * ((v115 - (_BYTE *)v114) >> 3));
  while (1)
  {
    if (v101 - (_BYTE *)__p != v92 - v91)
      goto LABEL_53;
    if (__p == v101)
      break;
    v27 = v91 + 8;
    v28 = (char *)__p + 8;
    while (1)
    {
      v29 = v28 - 8;
      if (*((_QWORD *)v28 - 1) != *((_QWORD *)v27 - 1))
        break;
      v30 = v27[8];
      if (v28[8])
        v31 = v30 == 0;
      else
        v31 = 1;
      if (v31)
      {
        if ((v28[8] == 0) == (v30 != 0))
          break;
      }
      else if (*(_QWORD *)v28 != *(_QWORD *)v27)
      {
        break;
      }
      v27 += 24;
      v28 += 24;
      if (v29 + 24 == v101)
        goto LABEL_54;
    }
LABEL_53:
    (*(void (**)(_QWORD, llvm::VPTransformState *))(**((_QWORD **)v101 - 3) + 16))(*((_QWORD *)v101 - 3), a2);
    sub_1C63DD89C((char *)&v94);
  }
LABEL_54:
  if (v91)
  {
    v92 = v91;
    operator delete(v91);
  }
  if (v89 != v90)
    free(v89);
  if (__p)
  {
    v101 = (char *)__p;
    operator delete(__p);
  }
  if (v95 != v94)
    free(v95);
  if (v114)
  {
    v115 = v114;
    operator delete(v114);
  }
  if (v111 != v110)
    free(v111);
  if (v108)
  {
    v109 = v108;
    operator delete(v108);
  }
  if (v104 != v103)
    free(v104);
  v32 = *((unsigned int *)a2 + 46);
  if ((_DWORD)v32)
  {
    v33 = (unsigned __int8 **)*((_QWORD *)a2 + 22);
    v34 = &v33[v32];
    do
    {
      v103 = *v33;
      v35 = sub_1C6281BA0((_DWORD *)a2 + 26, &v103)[1];
      v36 = *(_QWORD *)(v35 + 40);
      if (v36 == v35 + 40)
      {
        v37 = 0;
      }
      else
      {
        if (v36)
          v38 = (unsigned __int8 *)(v36 - 24);
        else
          v38 = 0;
        if (v38[16] - 29 >= 0xB)
          v37 = 0;
        else
          v37 = (llvm::Instruction *)v38;
      }
      v39 = v103;
      while (1)
      {
        v40 = *((unsigned int *)v39 + 20);
        if ((_DWORD)v40)
          break;
        v39 = (unsigned __int8 *)*((_QWORD *)v39 + 5);
        if (!v39)
          goto LABEL_92;
      }
      v41 = 0;
      v42 = (uint64_t *)*((_QWORD *)v39 + 9);
      v43 = &v42[v40];
      do
      {
        for (i = *v42; i && *(_BYTE *)(i + 8) == 1; i = *(_QWORD *)(i + 200))
          ;
        v94 = (_BYTE *)i;
        v46 = sub_1C6281BA0((_DWORD *)a2 + 26, &v94);
        llvm::Instruction::setSuccessor(v37, v41++, (llvm::BasicBlock *)v46[1]);
        ++v42;
      }
      while (v42 != v43);
LABEL_92:
      ++v33;
    }
    while (v33 != v34);
  }
  v47 = *(_QWORD *)this;
  if (*(_QWORD *)this && *(_BYTE *)(v47 + 8) == 1)
  {
    do
    {
LABEL_97:
      v47 = *(_QWORD *)(v47 + 208);
      if (v47)
        v48 = *(_BYTE *)(v47 + 8) == 1;
      else
        v48 = 0;
    }
    while (v48);
  }
  else if (*(_DWORD *)(v47 + 80) == 1)
  {
    v47 = **(_QWORD **)(v47 + 72);
    if (*(_BYTE *)(v47 + 8) == 1)
      goto LABEL_97;
  }
  else
  {
    v47 = 0;
  }
  v103 = (unsigned __int8 *)v47;
  v49 = (llvm::BasicBlock *)sub_1C6281BA0((_DWORD *)a2 + 26, &v103)[1];
  v50 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v51 = *(_BYTE *)(*(_QWORD *)this + 8) == 1;
  else
    v51 = 0;
  if (v51)
  {
    do
    {
LABEL_109:
      v50 = *(_QWORD *)(v50 + 200);
      if (v50)
        v52 = *(_BYTE *)(v50 + 8) == 1;
      else
        v52 = 0;
    }
    while (v52);
  }
  else if (*(_DWORD *)(v50 + 80) == 1)
  {
    v50 = **(_QWORD **)(v50 + 72);
    if (*(_BYTE *)(v50 + 8) == 1)
      goto LABEL_109;
  }
  else
  {
    v50 = 0;
  }
  v94 = (_BYTE *)v50;
  v53 = v50 + 200;
  v54 = *(_QWORD *)(v50 + 208);
  if (v54 != v50 + 200)
  {
    v55 = *(_QWORD *)(v50 + 208);
    while (1)
    {
      v56 = v55 - 24;
      if (!v55)
        v56 = 0;
      if (*(unsigned __int8 *)(v56 + 8) - 13 > 7)
        break;
      v55 = *(_QWORD *)(v55 + 8);
      if (v55 == v53)
      {
        v55 = v53;
        break;
      }
    }
    while (v54 != v55)
    {
      if (v54)
        v57 = v54 - 24;
      else
        v57 = 0;
      v58 = 1;
      v59 = 1;
      switch(*(_BYTE *)(v57 + 8))
      {
        case 0xE:
        case 0xF:
          goto LABEL_144;
        case 0x10:
          goto LABEL_170;
        case 0x11:
          v60 = *(_QWORD *)(v57 + 16);
          v61 = (llvm::VPValue *)(v60 & 0xFFFFFFFFFFFFFFF8);
          if ((v60 & 4) != 0)
            v61 = **(llvm::VPValue ***)v61;
          v62 = llvm::VPTransformState::get(a2, v61, 0);
          goto LABEL_152;
        case 0x12:
          v63 = *(unsigned int *)(v57 + 120);
          if (!(_DWORD)v63)
            goto LABEL_170;
          v64 = *(_QWORD **)(v57 + 112);
          if (v54)
            v65 = (llvm::VPValue *)(v57 + 96);
          else
            v65 = 0;
          v66 = 8 * v63;
          break;
        default:
          if (*(_BYTE *)(v57 + 161))
          {
            v58 = 1;
            v59 = 1;
          }
          else
          {
            v58 = *((_DWORD *)a2 + 2);
            if (!v58)
              goto LABEL_170;
            v59 = 0;
          }
LABEL_144:
          v68 = 0;
          if (v54)
            v69 = (llvm::VPValue *)(v57 + 96);
          else
            v69 = 0;
          do
          {
            v70 = llvm::VPTransformState::get(a2, v69, v68);
            v71 = v68;
            if (v59)
              v71 = *((_DWORD *)a2 + 2) - 1;
            v72 = llvm::VPTransformState::get(a2, *(llvm::VPValue **)(*(_QWORD *)(v57 + 48) + 8), v71);
            sub_1C477667C((llvm::PHINode *)v70, (uint64_t)v72, (uint64_t)v49);
            ++v68;
          }
          while (v58 != v68);
          goto LABEL_170;
      }
      while (1)
      {
        v67 = *v64 ? *v64 - 40 : 0;
        if (((*(uint64_t (**)(uint64_t, llvm::VPValue *))(*(_QWORD *)v67 + 40))(v67, v65) & 1) == 0)
          break;
        ++v64;
        v66 -= 8;
        if (!v66)
          goto LABEL_170;
      }
      v73 = llvm::VPTransformState::get(a2, v65, 0);
      v62 = *(unsigned __int8 **)&v73[-32 * (*((_DWORD *)v73 + 5) & 0x7FFFFFF)];
LABEL_152:
      v74 = *((_DWORD *)v62 + 5);
      if ((v74 & 0x40000000) != 0)
        v75 = (unsigned __int8 *)*((_QWORD *)v62 - 1);
      else
        v75 = &v62[-32 * (v74 & 0x7FFFFFF)];
      *(_QWORD *)&v75[32 * *((unsigned int *)v62 + 15) + 8] = v49;
      v76 = *((_DWORD *)v62 + 5);
      if ((v76 & 0x40000000) != 0)
        v77 = (unsigned __int8 *)*((_QWORD *)v62 - 1);
      else
        v77 = &v62[-32 * (v76 & 0x7FFFFFF)];
      v78 = (llvm::Instruction *)*((_QWORD *)v77 + 4);
      v79 = *((_QWORD *)v49 + 5);
      if (v79)
        v80 = v79 - 24;
      else
        v80 = 0;
      if (*(unsigned __int8 *)(v80 + 16) - 29 >= 0xB)
        v81 = 0;
      else
        v81 = v80;
      if (*(_QWORD *)(*(_QWORD *)(v81 + 40) + 48) == v81 + 24)
      {
        v83 = 0;
      }
      else
      {
        v82 = *(_QWORD *)(v81 + 24);
        if (v82)
          v83 = (llvm::Instruction *)(v82 - 24);
        else
          v83 = 0;
      }
      llvm::Instruction::moveBefore(v78, v83);
LABEL_170:
      v54 = *(_QWORD *)(v54 + 8);
    }
  }
  if (!byte_1ED838B98)
  {
    v84 = (llvm::DominatorTree *)sub_1C6281BA0((_DWORD *)a2 + 26, &v94)[1];
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::addNewBlock(*((_QWORD *)a2 + 33), (uint64_t)v84, v88);
    llvm::VPlan::updateDominatorTree(*((llvm::VPlan **)a2 + 33), v84, v49, *((llvm::BasicBlock **)a2 + 12), v85);
  }
}

uint64_t llvm::VPlan::print(llvm::VPValue **this, llvm::raw_ostream *a2)
{
  _DWORD *v4;
  char v5;
  const char *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  llvm::VPValue *v11;
  uint64_t v12;
  void *v13;
  _BYTE *v14;
  const void *v15;
  void *v16;
  unsigned int v17;
  unsigned int v18;
  _BYTE *v19;
  const void *v20;
  void *v21;
  unsigned int v22;
  unsigned int v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  _BYTE *v30;
  _WORD *v31;
  unsigned int v33;
  unsigned int v34;
  char v35[32];
  __int16 v36;
  _BYTE *v37;
  _BYTE *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  _BYTE v42[64];
  char *v43;
  char *v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  _BYTE v51[64];
  void *__p;
  char *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  void *v60;
  _BYTE *v61;
  void *v62;
  void *v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  void *v67;
  _BYTE *v68;
  _QWORD v69[2];
  int v70;
  int v71;

  v69[0] = 0;
  v69[1] = 0;
  v71 = 0;
  v70 = 0;
  if (this)
    llvm::VPSlotTracker::assignSlots((llvm::VPSlotTracker *)v69, (const llvm::VPlan *)this);
  v4 = (_DWORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v4 > 6uLL)
  {
    *(_DWORD *)((char *)v4 + 3) = 656436833;
    *v4 = 1634488406;
    *((_QWORD *)a2 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(a2, "VPlan '", 7uLL);
  }
  v5 = *((_BYTE *)this + 87);
  if (v5 >= 0)
    v6 = (const char *)(this + 8);
  else
    v6 = (const char *)this[8];
  if (v5 >= 0)
    v7 = v5 & 0x7F;
  else
    v7 = (size_t)this[9];
  llvm::raw_ostream::write(a2, v6, v7);
  v8 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v8) > 2)
  {
    *(_BYTE *)(v8 + 2) = 123;
    *(_WORD *)v8 = 8231;
    *((_QWORD *)a2 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(a2, "' {", 3uLL);
  }
  if (*((_DWORD *)this + 38))
  {
    v9 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v9) > 8)
    {
      *(_BYTE *)(v9 + 8) = 32;
      *(_QWORD *)v9 = *(_QWORD *)"\nLive-in ";
      *((_QWORD *)a2 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(a2, "\nLive-in ", 9uLL);
    }
    llvm::VPValue::printAsOperand((llvm::VPValue *)(this + 16), a2, (llvm::VPSlotTracker *)v69);
    v10 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v10 > 0x14uLL)
    {
      qmemcpy(v10, " = vector-trip-count\n", 21);
      *((_QWORD *)a2 + 4) += 21;
    }
    else
    {
      llvm::raw_ostream::write(a2, " = vector-trip-count\n", 0x15uLL);
    }
  }
  v11 = this[15];
  if (v11 && *((_DWORD *)v11 + 6))
  {
    v12 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v12) > 8)
    {
      *(_BYTE *)(v12 + 8) = 32;
      *(_QWORD *)v12 = *(_QWORD *)"\nLive-in ";
      *((_QWORD *)a2 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(a2, "\nLive-in ", 9uLL);
    }
    llvm::VPValue::printAsOperand(this[15], a2, (llvm::VPSlotTracker *)v69);
    v13 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v13 > 0x17uLL)
    {
      qmemcpy(v13, " = backedge-taken count\n", 24);
      *((_QWORD *)a2 + 4) += 24;
    }
    else
    {
      llvm::raw_ostream::write(a2, " = backedge-taken count\n", 0x18uLL);
    }
  }
  sub_1C63E443C(&v55, (uint64_t)*this);
  v14 = v51;
  v46 = v51;
  v15 = v56;
  if (v56 == v55)
  {
    v47 = v51;
    v16 = v56;
  }
  else
  {
    v33 = v57;
    v14 = malloc_type_malloc(8 * v57, 0x4065EBACuLL);
    if (!v14)
    {
      if (v33)
        goto LABEL_92;
      v14 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v14)
        goto LABEL_92;
    }
    v47 = v14;
    v16 = v55;
    v15 = v56;
  }
  v17 = v58;
  v48 = v57;
  if (v15 == v16)
    v18 = v58;
  else
    v18 = v57;
  if (v18)
  {
    memmove(v14, v15, 8 * v18);
    v17 = v58;
  }
  v49 = v17;
  v50 = v59;
  v53 = 0;
  v54 = 0;
  __p = 0;
  sub_1C4D6CDA0(&__p, v60, v61, 0xAAAAAAAAAAAAAAABLL * ((v61 - (_BYTE *)v60) >> 3));
  v19 = v42;
  v37 = v42;
  v20 = v63;
  if (v63 != v62)
  {
    v34 = v64;
    v19 = malloc_type_malloc(8 * v64, 0x4065EBACuLL);
    if (v19 || !v34 && (v19 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v38 = v19;
      v21 = v62;
      v20 = v63;
      goto LABEL_33;
    }
LABEL_92:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v38 = v42;
  v21 = v63;
LABEL_33:
  v22 = v65;
  v39 = v64;
  if (v20 == v21)
    v23 = v65;
  else
    v23 = v64;
  if (v23)
  {
    memmove(v19, v20, 8 * v23);
    v22 = v65;
  }
  v40 = v22;
  v41 = v66;
  v44 = 0;
  v45 = 0;
  v43 = 0;
  sub_1C4D6CDA0(&v43, v67, v68, 0xAAAAAAAAAAAAAAABLL * ((v68 - (_BYTE *)v67) >> 3));
  while (1)
  {
    if (v53 - (_BYTE *)__p != v44 - v43)
      goto LABEL_53;
    if (__p == v53)
      break;
    v24 = v43 + 8;
    v25 = (char *)__p + 8;
    while (1)
    {
      v26 = v25 - 8;
      if (*((_QWORD *)v25 - 1) != *((_QWORD *)v24 - 1))
        break;
      v27 = v24[8];
      if (v25[8])
        v28 = v27 == 0;
      else
        v28 = 1;
      if (v28)
      {
        if ((v25[8] == 0) == (v27 != 0))
          break;
      }
      else if (*(_QWORD *)v25 != *(_QWORD *)v24)
      {
        break;
      }
      v24 += 24;
      v25 += 24;
      if (v26 + 24 == v53)
        goto LABEL_57;
    }
LABEL_53:
    v29 = *((_QWORD *)v53 - 3);
    v30 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v30 >= *((_QWORD *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 10);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v30 + 1;
      *v30 = 10;
    }
    v36 = 257;
    (*(void (**)(uint64_t, llvm::raw_ostream *, char *, _QWORD *))(*(_QWORD *)v29 + 32))(v29, a2, v35, v69);
    sub_1C63DD89C((char *)&v46);
  }
LABEL_57:
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  if (v38 != v37)
    free(v38);
  if (__p)
  {
    v53 = (char *)__p;
    operator delete(__p);
  }
  if (v47 != v46)
    free(v47);
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  if (v63 != v62)
    free(v63);
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  if (v56 != v55)
    free(v56);
  v31 = (_WORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v31 > 1uLL)
  {
    *v31 = 2685;
    *((_QWORD *)a2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a2, "}\n", 2uLL);
  }
  return MEMORY[0x1CAA32FB4](v69[0], 8);
}

void llvm::VPlan::printDOT(llvm::VPlan *this, llvm::raw_ostream *a2)
{
  uint64_t i;
  _QWORD v3[3];
  void *__p;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  int v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3[0] = a2;
  v3[1] = this;
  v3[2] = 0x200000000;
  v5 = 0;
  v6 = 0;
  __p = 0;
  v7 = 0;
  v8 = 1;
  for (i = 8; i != 16; i += 2)
    v3[i] = -4096;
  v12 = 0;
  v10[0] = 0;
  v10[1] = 0;
  v11 = 0;
  llvm::VPSlotTracker::assignSlots((llvm::VPSlotTracker *)v10, this);
  llvm::VPlanPrinter::dump((llvm::VPlanPrinter *)v3);
  MEMORY[0x1CAA32FB4](v10[0], 8);
  if ((v8 & 1) == 0)
    MEMORY[0x1CAA32FB4](v9, 8);
  if (SHIBYTE(v6) < 0)
    operator delete(__p);
}

llvm::raw_ostream *llvm::VPlanPrinter::dump(llvm::VPlanPrinter *this)
{
  llvm::raw_ostream *v2;
  _OWORD *v3;
  llvm::raw_ostream *v4;
  void *v5;
  uint64_t v6;
  llvm::raw_ostream *v7;
  _WORD *v8;
  std::string *p_p;
  size_t size;
  llvm::raw_ostream *v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  void *v16;
  llvm::raw_ostream *v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  void *v20;
  llvm::raw_ostream *v21;
  void *v22;
  llvm::raw_ostream *v23;
  void *v24;
  _BYTE *v25;
  const void *v26;
  std::string::size_type v27;
  int v28;
  unsigned int v29;
  _BYTE *v30;
  const void *v31;
  void *v32;
  unsigned int v33;
  char *v34;
  char *v35;
  char *v36;
  int v37;
  BOOL v38;
  llvm::raw_ostream *result;
  _WORD *v40;
  int v41;
  unsigned int v42;
  _BYTE *v43;
  _BYTE v44[64];
  char *v45;
  char *v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  int v50;
  int v51;
  int v52;
  _BYTE v53[64];
  void *v54;
  const llvm::VPBlockBase **v55;
  uint64_t v56;
  std::string __p;
  int v58;
  __int16 v59;
  void *v60;
  _BYTE *v61;
  void *v62;
  void *v63;
  unsigned int v64;
  unsigned int v65;
  void *v66;
  _BYTE *v67;

  *((_DWORD *)this + 4) = 1;
  sub_1C60C09A8((uint64_t)this, 0);
  v2 = *(llvm::raw_ostream **)this;
  v3 = *(_OWORD **)(*(_QWORD *)this + 32);
  if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v3 > 0xFuLL)
  {
    *v3 = *(_OWORD *)"digraph VPlan {\n";
    *((_QWORD *)v2 + 4) += 16;
  }
  else
  {
    llvm::raw_ostream::write(v2, "digraph VPlan {\n", 0x10uLL);
  }
  v4 = *(llvm::raw_ostream **)this;
  v5 = *(void **)(*(_QWORD *)this + 32);
  if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v5 > 0x38uLL)
  {
    qmemcpy(v5, "graph [labelloc=t, fontsize=30; label=\"Vectorization Plan", 57);
    *((_QWORD *)v4 + 4) += 57;
  }
  else
  {
    llvm::raw_ostream::write(v4, "graph [labelloc=t, fontsize=30; label=\"Vectorization Plan", 0x39uLL);
  }
  v6 = *((_QWORD *)this + 1);
  if (*(char *)(v6 + 87) < 0)
  {
    if (!*(_QWORD *)(v6 + 72))
      goto LABEL_20;
  }
  else if (!*(_BYTE *)(v6 + 87))
  {
    goto LABEL_20;
  }
  v7 = *(llvm::raw_ostream **)this;
  v8 = *(_WORD **)(*(_QWORD *)this + 32);
  if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v8 > 1uLL)
  {
    *v8 = 28252;
    *((_QWORD *)v7 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)this, "\\n", 2uLL);
  }
  llvm::DOT::EscapeString((char *)(*((_QWORD *)this + 1) + 64), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(v7, (const char *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = *((_QWORD *)this + 1);
LABEL_20:
  if (*(_QWORD *)(v6 + 120))
  {
    v11 = *(llvm::raw_ostream **)this;
    v12 = *(_QWORD *)(*(_QWORD *)this + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v12) > 9)
    {
      *(_WORD *)(v12 + 8) = 28252;
      *(_QWORD *)v12 = *(_QWORD *)", where:\\n";
      *((_QWORD *)v11 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v11, ", where:\\n", 0xAuLL);
    }
    v13 = *(llvm::raw_ostream **)this;
    v14 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 120) + 48);
    if (v14)
    {
      v59 = 257;
      (*(void (**)(uint64_t, llvm::raw_ostream *, std::string *, char *))(*(_QWORD *)v14 + 16))(v14, v13, &__p, (char *)this + 128);
    }
    else
    {
      llvm::VPValue::printAsOperand(*(llvm::VPValue **)(*((_QWORD *)this + 1) + 120), v13, (llvm::VPlanPrinter *)((char *)this + 128));
    }
    v15 = *(llvm::raw_ostream **)this;
    v16 = *(void **)(*(_QWORD *)this + 32);
    if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v16 > 0x15uLL)
    {
      qmemcpy(v16, " := BackedgeTakenCount", 22);
      *((_QWORD *)v15 + 4) += 22;
    }
    else
    {
      llvm::raw_ostream::write(v15, " := BackedgeTakenCount", 0x16uLL);
    }
  }
  v17 = *(llvm::raw_ostream **)this;
  v18 = *(_QWORD *)(*(_QWORD *)this + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v18) > 2)
  {
    *(_BYTE *)(v18 + 2) = 10;
    *(_WORD *)v18 = 23842;
    *((_QWORD *)v17 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v17, "\"]\n", 3uLL);
  }
  v19 = *(llvm::raw_ostream **)this;
  v20 = *(void **)(*(_QWORD *)this + 32);
  if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v20 > 0x30uLL)
  {
    qmemcpy(v20, "node [shape=rect, fontname=Courier, fontsize=30]\n", 49);
    *((_QWORD *)v19 + 4) += 49;
  }
  else
  {
    llvm::raw_ostream::write(v19, "node [shape=rect, fontname=Courier, fontsize=30]\n", 0x31uLL);
  }
  v21 = *(llvm::raw_ostream **)this;
  v22 = *(void **)(*(_QWORD *)this + 32);
  if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v22 > 0x24uLL)
  {
    qmemcpy(v22, "edge [fontname=Courier, fontsize=30]\n", 37);
    *((_QWORD *)v21 + 4) += 37;
  }
  else
  {
    llvm::raw_ostream::write(v21, "edge [fontname=Courier, fontsize=30]\n", 0x25uLL);
  }
  v23 = *(llvm::raw_ostream **)this;
  v24 = *(void **)(*(_QWORD *)this + 32);
  if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v24 > 0xDuLL)
  {
    qmemcpy(v24, "compound=true\n", 14);
    *((_QWORD *)v23 + 4) += 14;
  }
  else
  {
    llvm::raw_ostream::write(v23, "compound=true\n", 0xEuLL);
  }
  sub_1C63E443C(&__p, **((_QWORD **)this + 1));
  v25 = v53;
  v48 = v53;
  v26 = (const void *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
  {
    v49 = v53;
    v27 = __p.__r_.__value_.__l.__size_;
  }
  else
  {
    v41 = __p.__r_.__value_.__r.__words[2];
    v25 = malloc_type_malloc(8 * LODWORD(__p.__r_.__value_.__r.__words[2]), 0x4065EBACuLL);
    if (!v25)
    {
      if (v41)
        goto LABEL_103;
      v25 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v25)
        goto LABEL_103;
    }
    v49 = v25;
    v26 = (const void *)__p.__r_.__value_.__l.__size_;
    v27 = __p.__r_.__value_.__r.__words[0];
  }
  v28 = HIDWORD(__p.__r_.__value_.__r.__words[2]);
  v50 = __p.__r_.__value_.__r.__words[2];
  if (v26 == (const void *)v27)
    v29 = HIDWORD(__p.__r_.__value_.__r.__words[2]);
  else
    v29 = __p.__r_.__value_.__r.__words[2];
  if (v29)
  {
    memmove(v25, v26, 8 * v29);
    v28 = HIDWORD(__p.__r_.__value_.__r.__words[2]);
  }
  v51 = v28;
  v52 = v58;
  v55 = 0;
  v56 = 0;
  v54 = 0;
  sub_1C4D6CDA0(&v54, v60, v61, 0xAAAAAAAAAAAAAAABLL * ((v61 - (_BYTE *)v60) >> 3));
  v30 = v44;
  v31 = v63;
  if (v63 != v62)
  {
    v42 = v64;
    v30 = malloc_type_malloc(8 * v64, 0x4065EBACuLL);
    if (v30 || !v42 && (v30 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v43 = v30;
      v32 = v62;
      v31 = v63;
      goto LABEL_45;
    }
LABEL_103:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v43 = v44;
  v32 = v63;
LABEL_45:
  if (v31 == v32)
    v33 = v65;
  else
    v33 = v64;
  if (v33)
    memmove(v30, v31, 8 * v33);
  v46 = 0;
  v47 = 0;
  v45 = 0;
  sub_1C4D6CDA0(&v45, v66, v67, 0xAAAAAAAAAAAAAAABLL * ((v67 - (_BYTE *)v66) >> 3));
  while (1)
  {
    if ((char *)v55 - (_BYTE *)v54 != v46 - v45)
      goto LABEL_65;
    if (v54 == v55)
      break;
    v34 = v45 + 8;
    v35 = (char *)v54 + 8;
    while (1)
    {
      v36 = v35 - 8;
      if (*((_QWORD *)v35 - 1) != *((_QWORD *)v34 - 1))
        break;
      v37 = v34[8];
      if (v35[8])
        v38 = v37 == 0;
      else
        v38 = 1;
      if (v38)
      {
        if ((v35[8] == 0) == (v37 != 0))
          break;
      }
      else if (*(_QWORD *)v35 != *(_QWORD *)v34)
      {
        break;
      }
      v34 += 24;
      v35 += 24;
      if (v36 + 24 == (char *)v55)
        goto LABEL_66;
    }
LABEL_65:
    llvm::VPlanPrinter::dumpBlock(this, *(v55 - 3));
    sub_1C63DD89C((char *)&v48);
  }
LABEL_66:
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  if (v43 != v44)
    free(v43);
  if (v54)
  {
    v55 = (const llvm::VPBlockBase **)v54;
    operator delete(v54);
  }
  if (v49 != v48)
    free(v49);
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
  if (v63 != v62)
    free(v63);
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    free((void *)__p.__r_.__value_.__l.__size_);
  result = *(llvm::raw_ostream **)this;
  v40 = *(_WORD **)(*(_QWORD *)this + 32);
  if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v40 <= 1uLL)
    return llvm::raw_ostream::write(result, "}\n", 2uLL);
  *v40 = 2685;
  *((_QWORD *)result + 4) += 2;
  return result;
}

uint64_t llvm::VPlanPrinter::getOrCreateName@<X0>(uint64_t this@<X0>, const llvm::VPBlockBase *a2@<X1>, uint64_t a3@<X8>)
{
  const char *v4;
  char v5;
  char v6;

  if (*((char *)a2 + 39) < 0)
  {
    if (*((_QWORD *)a2 + 3))
      goto LABEL_3;
LABEL_6:
    this = sub_1C63E4590(this, (uint64_t)a2);
    *(_QWORD *)(a3 + 16) = this;
    v5 = 8;
    v6 = 3;
    v4 = "VPB";
    goto LABEL_4;
  }
  if (!*((_BYTE *)a2 + 39))
    goto LABEL_6;
LABEL_3:
  v4 = (char *)a2 + 16;
  v5 = 1;
  v6 = 4;
LABEL_4:
  *(_QWORD *)a3 = v4;
  *(_BYTE *)(a3 + 32) = v6;
  *(_BYTE *)(a3 + 33) = v5;
  return this;
}

double sub_1C60C09A8(uint64_t a1, int a2)
{
  int v3;
  int v4;
  size_t v5;
  __int128 *p_b;
  uint64_t v7;
  void **v8;
  double result;
  __int128 __b;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 20);
  v4 = *(_DWORD *)(a1 + 16) + a2;
  *(_DWORD *)(a1 + 16) = v4;
  v5 = (v3 * v4);
  if (v5 >= 0x17)
  {
    if ((v5 | 7) == 0x17)
      v7 = (v5 & 0xFFFFFFF8) + 8;
    else
      v7 = v5 | 7;
    p_b = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__b + 1) = v5;
    v11 = v7 - 0x7FFFFFFFFFFFFFFFLL;
    *(_QWORD *)&__b = p_b;
    goto LABEL_8;
  }
  HIBYTE(v11) = v3 * v4;
  p_b = &__b;
  if ((_DWORD)v5)
LABEL_8:
    memset(p_b, 32, v5);
  *((_BYTE *)p_b + v5) = 0;
  v8 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v8);
  result = *(double *)&__b;
  *(_OWORD *)v8 = __b;
  *(_QWORD *)(a1 + 40) = v11;
  return result;
}

void llvm::VPlanPrinter::dumpBlock(llvm::VPlanPrinter *this, const llvm::VPBlockBase *a2)
{
  if (!a2 || *((_BYTE *)a2 + 8))
  {
    if (*((_BYTE *)a2 + 8) != 1)
      a2 = 0;
    llvm::VPlanPrinter::dumpRegion(this, a2);
  }
  else
  {
    llvm::VPlanPrinter::dumpBasicBlock(this, a2);
  }
}

void llvm::VPlanPrinter::dumpBasicBlock(llvm::VPlanPrinter *this, const llvm::VPBasicBlock *a2)
{
  llvm::raw_ostream *v4;
  const char *v5;
  char v6;
  int v7;
  const char *v8;
  size_t v9;
  size_t v10;
  uint64_t *UID;
  uint64_t v12;
  uint64_t v13;
  double v14;
  void **v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  const void **v19;
  uint64_t v20;
  char *v21;
  const void *v22;
  size_t v23;
  char v24;
  BOOL v25;
  const char *v26;
  size_t v27;
  size_t v28;
  llvm::raw_ostream *v29;
  _WORD *v30;
  __int128 v31;
  void *v32;
  uint64_t v33;
  _WORD v34[12];
  void (**v35)(llvm::raw_ostream *__hidden);
  size_t v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  int v42;
  void **v43;
  void **v44;
  unint64_t v45;
  uint64_t v46;

  v4 = *(llvm::raw_ostream **)this;
  v5 = (char *)this + 24;
  v6 = *((_BYTE *)this + 47);
  v7 = v6;
  if (v6 >= 0)
    v8 = (char *)this + 24;
  else
    v8 = (const char *)*((_QWORD *)this + 3);
  v9 = v6 & 0x7F;
  if (v7 >= 0)
    v10 = v9;
  else
    v10 = *((_QWORD *)this + 4);
  llvm::raw_ostream::write(*(llvm::raw_ostream **)this, v8, v10);
  UID = llvm::VPlanPrinter::getUID(this, a2, (uint64_t)&v35);
  llvm::Twine::printOneChild((uint64_t)UID, v4, (uint64_t)v35, v36, v39);
  llvm::Twine::printOneChild(v12, v4, v37, v38, SBYTE1(v39));
  v13 = *((_QWORD *)v4 + 4);
  if ((unint64_t)(*((_QWORD *)v4 + 3) - v13) > 9)
  {
    *(_WORD *)(v13 + 8) = 2621;
    *(_QWORD *)v13 = *(_QWORD *)" [label =\n";
    *((_QWORD *)v4 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(v4, " [label =\n", 0xAuLL);
  }
  v14 = sub_1C60C09A8((uint64_t)this, 1);
  v44 = 0;
  v45 = 0;
  v46 = 0;
  LODWORD(v36) = 0;
  v40 = 0;
  v41 = 0;
  v35 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v43 = (void **)&v44;
  v42 = 0;
  v38 = 0;
  v39 = 0;
  v37 = 0;
  v34[8] = 257;
  (*(void (**)(const llvm::VPBasicBlock *, void (***)(llvm::raw_ostream *__hidden), void **, char *, double))(*(_QWORD *)a2 + 32))(a2, &v35, &v32, (char *)this + 128, v14);
  v32 = v34;
  v33 = 0;
  v15 = v44;
  if (v46 >= 0)
    v15 = (void **)&v44;
  v16 = HIBYTE(v46) & 0x7F;
  if (v46 < 0)
    v16 = v45;
  v17 = v16;
  do
  {
    v18 = v17;
    if (!v17)
      break;
    --v17;
  }
  while (*((_BYTE *)v15 + v18 - 1) == 10);
  if (v18 < v16)
    v16 = v18;
  *(_QWORD *)&v31 = v15;
  *((_QWORD *)&v31 + 1) = v16;
  llvm::StringRef::split(&v31, (uint64_t)&v32, "\n", 1uLL, -1, 1);
  v19 = (const void **)v32;
  v20 = v33;
  v21 = (char *)v32 + 16 * v33 - 16;
  if (v32 != v21)
  {
    do
    {
      v22 = *v19;
      v23 = (size_t)v19[1];
      v19 += 2;
      sub_1C60C1790((uint64_t)this, v22, v23, " +\n", 3uLL);
    }
    while (v19 != (const void **)v21);
    v19 = (const void **)v32;
    v20 = v33;
  }
  sub_1C60C1790((uint64_t)this, v19[2 * v20 - 2], (size_t)v19[2 * v20 - 1], "\n", 1uLL);
  sub_1C60C09A8((uint64_t)this, -1);
  v24 = *((_BYTE *)this + 47);
  v25 = v24 < 0;
  if (v24 >= 0)
    v26 = v5;
  else
    v26 = (const char *)*((_QWORD *)this + 3);
  v27 = v24 & 0x7F;
  if (v25)
    v28 = *((_QWORD *)this + 4);
  else
    v28 = v27;
  v29 = llvm::raw_ostream::write(*(llvm::raw_ostream **)this, v26, v28);
  v30 = (_WORD *)*((_QWORD *)v29 + 4);
  if (*((_QWORD *)v29 + 3) - (_QWORD)v30 > 1uLL)
  {
    *v30 = 2653;
    *((_QWORD *)v29 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v29, "]\n", 2uLL);
  }
  llvm::VPlanPrinter::dumpEdges(this, a2);
  if (v32 != v34)
    free(v32);
  v35 = off_1E81A6E70;
  if (v42 == 1 && v37)
    MEMORY[0x1CAA32F9C](v37, 0x1000C8077774924);
  if (SHIBYTE(v46) < 0)
    operator delete(v44);
}

llvm::VPlanPrinter *llvm::VPlanPrinter::dumpRegion(llvm::VPlanPrinter *this, const llvm::VPRegionBlock *a2)
{
  llvm::raw_ostream *v4;
  const char *v5;
  char v6;
  int v7;
  const char *v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t *UID;
  uint64_t v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  char v16;
  BOOL v17;
  const char *v18;
  size_t v19;
  size_t v20;
  uint64_t v21;
  char v22;
  BOOL v23;
  const char *v24;
  size_t v25;
  size_t v26;
  _DWORD *v27;
  const char *v28;
  size_t v29;
  std::string *v30;
  size_t size;
  std::string *p_p;
  size_t v33;
  _WORD *v34;
  _BYTE *v35;
  const void *v36;
  std::string::size_type v37;
  int v38;
  unsigned int v39;
  _BYTE *v40;
  const void *v41;
  void *v42;
  unsigned int v43;
  unsigned int v44;
  char *v45;
  char *v46;
  char *v47;
  int v48;
  BOOL v49;
  char v50;
  BOOL v51;
  const char *v52;
  size_t v53;
  size_t v54;
  llvm::raw_ostream *v55;
  _WORD *v56;
  int v58;
  unsigned int v59;
  std::string __p;
  int v61;
  _BYTE v62[64];
  char *v63;
  char *v64;
  uint64_t v65;
  _BYTE *__dst;
  _BYTE *v67;
  int v68;
  int v69;
  int v70;
  _BYTE v71[64];
  void *v72;
  const llvm::VPBlockBase **v73;
  uint64_t v74;
  std::string v75;
  size_t v76;
  char v77;
  char v78;
  void *v79;
  _BYTE *v80;
  void *v81;
  void *v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  void *v86;
  _BYTE *v87;

  v4 = *(llvm::raw_ostream **)this;
  v5 = (char *)this + 24;
  v6 = *((_BYTE *)this + 47);
  v7 = v6;
  if (v6 >= 0)
    v8 = (char *)this + 24;
  else
    v8 = (const char *)*((_QWORD *)this + 3);
  v9 = v6 & 0x7F;
  if (v7 >= 0)
    v10 = v9;
  else
    v10 = *((_QWORD *)this + 4);
  llvm::raw_ostream::write(*(llvm::raw_ostream **)this, v8, v10);
  v11 = *((_QWORD *)v4 + 4);
  if ((unint64_t)(*((_QWORD *)v4 + 3) - v11) > 8)
  {
    *(_BYTE *)(v11 + 8) = 32;
    *(_QWORD *)v11 = *(_QWORD *)"subgraph ";
    *((_QWORD *)v4 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v4, "subgraph ", 9uLL);
  }
  UID = llvm::VPlanPrinter::getUID(this, a2, (uint64_t)&v75);
  llvm::Twine::printOneChild((uint64_t)UID, v4, (uint64_t)v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_, v77);
  llvm::Twine::printOneChild(v13, v4, v75.__r_.__value_.__r.__words[2], v76, v78);
  v14 = *((_QWORD *)v4 + 4);
  if ((unint64_t)(*((_QWORD *)v4 + 3) - v14) > 2)
  {
    *(_BYTE *)(v14 + 2) = 10;
    *(_WORD *)v14 = 31520;
    *((_QWORD *)v4 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v4, " {\n", 3uLL);
  }
  sub_1C60C09A8((uint64_t)this, 1);
  v15 = *(llvm::raw_ostream **)this;
  v16 = *((_BYTE *)this + 47);
  v17 = v16 < 0;
  if (v16 >= 0)
    v18 = v5;
  else
    v18 = (const char *)*((_QWORD *)this + 3);
  v19 = v16 & 0x7F;
  if (v17)
    v20 = *((_QWORD *)this + 4);
  else
    v20 = v19;
  llvm::raw_ostream::write(*(llvm::raw_ostream **)this, v18, v20);
  v21 = *((_QWORD *)v15 + 4);
  if ((unint64_t)(*((_QWORD *)v15 + 3) - v21) > 0x10)
  {
    *(_BYTE *)(v21 + 16) = 10;
    *(_OWORD *)v21 = *(_OWORD *)"fontname=Courier\n";
    *((_QWORD *)v15 + 4) += 17;
  }
  else
  {
    llvm::raw_ostream::write(v15, "fontname=Courier\n", 0x11uLL);
  }
  v22 = *((_BYTE *)this + 47);
  v23 = v22 < 0;
  if (v22 >= 0)
    v24 = v5;
  else
    v24 = (const char *)*((_QWORD *)this + 3);
  v25 = v22 & 0x7F;
  if (v23)
    v26 = *((_QWORD *)this + 4);
  else
    v26 = v25;
  llvm::raw_ostream::write(v15, v24, v26);
  v27 = (_DWORD *)*((_QWORD *)v15 + 4);
  if (*((_QWORD *)v15 + 3) - (_QWORD)v27 > 6uLL)
  {
    *(_DWORD *)((char *)v27 + 3) = 574450789;
    *v27 = 1700946284;
    *((_QWORD *)v15 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v15, "label=\"", 7uLL);
  }
  if (*((_BYTE *)a2 + 216))
    v28 = "<xVFxUF> ";
  else
    v28 = "<x1> ";
  if (*((_BYTE *)a2 + 216))
    v29 = 9;
  else
    v29 = 5;
  HIBYTE(v69) = v29;
  memcpy(&__dst, v28, v29);
  *((_BYTE *)&__dst + v29) = 0;
  llvm::DOT::EscapeString((char *)&__dst, &v75);
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = &v75;
  else
    v30 = (std::string *)v75.__r_.__value_.__r.__words[0];
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v75.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v75.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(v15, (const char *)v30, size);
  llvm::DOT::EscapeString((char *)a2 + 16, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    v33 = __p.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(v15, (const char *)p_p, v33);
  v34 = (_WORD *)*((_QWORD *)v15 + 4);
  if (*((_QWORD *)v15 + 3) - (_QWORD)v34 > 1uLL)
  {
    *v34 = 2594;
    *((_QWORD *)v15 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v15, "\"\n", 2uLL);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  if (SHIBYTE(v69) < 0)
    operator delete(__dst);
  sub_1C63E443C(&v75, *((_QWORD *)a2 + 25));
  v35 = v71;
  __dst = v71;
  v36 = (const void *)v75.__r_.__value_.__l.__size_;
  if (v75.__r_.__value_.__l.__size_ == v75.__r_.__value_.__r.__words[0])
  {
    v67 = v71;
    v37 = v75.__r_.__value_.__l.__size_;
  }
  else
  {
    v58 = v75.__r_.__value_.__r.__words[2];
    v35 = malloc_type_malloc(8 * LODWORD(v75.__r_.__value_.__r.__words[2]), 0x4065EBACuLL);
    if (!v35)
    {
      if (v58)
        goto LABEL_123;
      v35 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v35)
        goto LABEL_123;
    }
    v67 = v35;
    v36 = (const void *)v75.__r_.__value_.__l.__size_;
    v37 = v75.__r_.__value_.__r.__words[0];
  }
  v38 = HIDWORD(v75.__r_.__value_.__r.__words[2]);
  v68 = v75.__r_.__value_.__r.__words[2];
  if (v36 == (const void *)v37)
    v39 = HIDWORD(v75.__r_.__value_.__r.__words[2]);
  else
    v39 = v75.__r_.__value_.__r.__words[2];
  if (v39)
  {
    memmove(v35, v36, 8 * v39);
    v38 = HIDWORD(v75.__r_.__value_.__r.__words[2]);
  }
  v69 = v38;
  v70 = v76;
  v73 = 0;
  v74 = 0;
  v72 = 0;
  sub_1C4D6CDA0(&v72, v79, v80, 0xAAAAAAAAAAAAAAABLL * ((v80 - (_BYTE *)v79) >> 3));
  v40 = v62;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
  v41 = v82;
  if (v82 != v81)
  {
    v59 = v83;
    v40 = malloc_type_malloc(8 * v83, 0x4065EBACuLL);
    if (v40 || !v59 && (v40 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v40;
      v42 = v81;
      v41 = v82;
      goto LABEL_62;
    }
LABEL_123:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v62;
  v42 = v82;
LABEL_62:
  v43 = v84;
  LODWORD(__p.__r_.__value_.__r.__words[2]) = v83;
  if (v41 == v42)
    v44 = v84;
  else
    v44 = v83;
  if (v44)
  {
    memmove(v40, v41, 8 * v44);
    v43 = v84;
  }
  HIDWORD(__p.__r_.__value_.__r.__words[2]) = v43;
  v61 = v85;
  v64 = 0;
  v65 = 0;
  v63 = 0;
  sub_1C4D6CDA0(&v63, v86, v87, 0xAAAAAAAAAAAAAAABLL * ((v87 - (_BYTE *)v86) >> 3));
  while (1)
  {
    if ((char *)v73 - (_BYTE *)v72 != v64 - v63)
      goto LABEL_82;
    if (v72 == v73)
      break;
    v45 = v63 + 8;
    v46 = (char *)v72 + 8;
    while (1)
    {
      v47 = v46 - 8;
      if (*((_QWORD *)v46 - 1) != *((_QWORD *)v45 - 1))
        break;
      v48 = v45[8];
      if (v46[8])
        v49 = v48 == 0;
      else
        v49 = 1;
      if (v49)
      {
        if ((v46[8] == 0) == (v48 != 0))
          break;
      }
      else if (*(_QWORD *)v46 != *(_QWORD *)v45)
      {
        break;
      }
      v45 += 24;
      v46 += 24;
      if (v47 + 24 == (char *)v73)
        goto LABEL_83;
    }
LABEL_82:
    llvm::VPlanPrinter::dumpBlock(this, *(v73 - 3));
    sub_1C63DD89C((char *)&__dst);
  }
LABEL_83:
  if (v63)
  {
    v64 = v63;
    operator delete(v63);
  }
  if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    free((void *)__p.__r_.__value_.__l.__size_);
  if (v72)
  {
    v73 = (const llvm::VPBlockBase **)v72;
    operator delete(v72);
  }
  if (v67 != __dst)
    free(v67);
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v82 != v81)
    free(v82);
  if (v79)
  {
    v80 = v79;
    operator delete(v79);
  }
  if (v75.__r_.__value_.__l.__size_ != v75.__r_.__value_.__r.__words[0])
    free((void *)v75.__r_.__value_.__l.__size_);
  sub_1C60C09A8((uint64_t)this, -1);
  v50 = *((_BYTE *)this + 47);
  v51 = v50 < 0;
  if (v50 >= 0)
    v52 = v5;
  else
    v52 = (const char *)*((_QWORD *)this + 3);
  v53 = v50 & 0x7F;
  if (v51)
    v54 = *((_QWORD *)this + 4);
  else
    v54 = v53;
  v55 = llvm::raw_ostream::write(*(llvm::raw_ostream **)this, v52, v54);
  v56 = (_WORD *)*((_QWORD *)v55 + 4);
  if (*((_QWORD *)v55 + 3) - (_QWORD)v56 > 1uLL)
  {
    *v56 = 2685;
    *((_QWORD *)v55 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v55, "}\n", 2uLL);
  }
  return llvm::VPlanPrinter::dumpEdges(this, a2);
}

