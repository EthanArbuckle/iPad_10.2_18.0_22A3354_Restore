void sub_1C5C06068(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5C0608C(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
}

uint64_t sub_1C5C060DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  char **v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char **v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  void **v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unsigned int v27;
  uint64_t v28;
  void **v30;
  llvm::MemorySSAUpdater *v33;
  uint64_t v34[2];
  int v35;
  uint64_t v36[2];
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  void *__src;
  unsigned int v43;
  uint64_t v44[2];
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v2 = a2 + 24;
  v3 = *(_QWORD *)(a2 + 32);
  if (v3 == a2 + 24)
    return 0;
  v4 = a1;
  v5 = 0;
  do
  {
    if (v3)
      v6 = v3 - 56;
    else
      v6 = 0;
    if (v3 && *(_BYTE *)(v6 + 16) == 3)
    {
      if ((*(_DWORD *)(v6 + 20) & 0x7FFFFFF) == 0)
        goto LABEL_41;
    }
    else if (!*(_BYTE *)(v6 + 16) && *(_QWORD *)(v6 + 72) == v6 + 72 && (*(_BYTE *)(v6 + 34) & 0x80) == 0)
    {
      goto LABEL_41;
    }
    if (*(_QWORD *)(v6 + 72) == v6 + 72 || !sub_1C5BFF5FC((llvm::Function *)v6))
      goto LABEL_41;
    v7 = **(char ****)(v4 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
    }
    while (v8 != llvm::TargetTransformInfoWrapperPass::ID);
    v9 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), llvm::TargetTransformInfoWrapperPass::ID);
    v41 = 0;
    __src = 0;
    v43 = 0;
    v44[0] = 0;
    v44[1] = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v10 = *(_QWORD *)(v9 + 56);
    if (!v10)
    {
      sub_1C485C2F0();
      return sub_1C5C06564();
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v10 + 48))(v34, v10, v6);
    v11 = (uint64_t *)(v9 + 64);
    v12 = v34[0];
    v33 = (llvm::MemorySSAUpdater *)(v9 + 64);
    if (*(_BYTE *)(v9 + 72))
    {
      v34[0] = 0;
      v13 = *v11;
      *v11 = v12;
      if (v13)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        v14 = v34[0];
        v34[0] = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      }
    }
    else
    {
      *(_QWORD *)(v9 + 64) = v34[0];
      *(_BYTE *)(v9 + 72) = 1;
    }
    MEMORY[0x1CAA32FB4](0, 8);
    sub_1C4D8B440(v44);
    sub_1C4D8B52C(&v41);
    v15 = **(char ****)(v4 + 8);
    do
    {
      v16 = *v15;
      v15 += 2;
    }
    while (v16 != llvm::TargetLibraryInfoWrapperPass::ID);
    v17 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v15 - 1) + 96))(*(v15 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
    v34[0] = 0;
    v34[1] = 0;
    v35 = 0;
    v36[0] = 0;
    v36[1] = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    llvm::TargetLibraryAnalysis::run(v17 + 32, v6, (uint64_t)&v41);
    *(_QWORD *)(v17 + 240) = v41;
    v18 = (uint64_t *)(v17 + 240);
    v19 = (void **)(v17 + 248);
    if (!*(_BYTE *)(v17 + 320))
    {
      v30 = (void **)(v17 + 248);
      v26 = (void *)(v17 + 264);
      *(_QWORD *)(v17 + 248) = v17 + 264;
      *(_QWORD *)(v17 + 256) = 0x600000000;
      v27 = v43;
      if (!v43 || v30 == &__src)
        goto LABEL_52;
      if (v43 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v30, v17 + 264, v43, 8);
        v28 = v43;
        if (!v43)
        {
LABEL_51:
          *(_DWORD *)(v17 + 256) = v27;
LABEL_52:
          *(_DWORD *)(v17 + 312) = v49;
          *(_BYTE *)(v17 + 320) = 1;
          v4 = a1;
          goto LABEL_38;
        }
        v26 = *v30;
      }
      else
      {
        v28 = v43;
      }
      memcpy(v26, __src, 8 * v28);
      goto LABEL_51;
    }
    if (v18 != &v41)
    {
      v20 = v5;
      v21 = v2;
      v22 = v43;
      v23 = *(unsigned int *)(v17 + 256);
      if (v23 >= v43)
      {
        if (v43)
          memmove(*v19, __src, 8 * v43);
        goto LABEL_36;
      }
      if (*(_DWORD *)(v17 + 260) < v43)
      {
        *(_DWORD *)(v17 + 256) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v17 + 248, v17 + 264, v22, 8);
        v19 = (void **)(v17 + 248);
      }
      else if ((_DWORD)v23)
      {
        memmove(*v19, __src, 8 * v23);
        v19 = (void **)(v17 + 248);
        goto LABEL_34;
      }
      v23 = 0;
LABEL_34:
      if (v23 != v43)
        memcpy((char *)*v19 + 8 * v23, (char *)__src + 8 * v23, 8 * v43 - 8 * v23);
LABEL_36:
      *(_DWORD *)(v17 + 256) = v22;
      v2 = v21;
      v5 = v20;
      v4 = a1;
    }
    *(_DWORD *)(v17 + 312) = v49;
LABEL_38:
    if (__src != v44)
      free(__src);
    MEMORY[0x1CAA32FB4](v38, 8);
    sub_1C4D8B440(v36);
    sub_1C4D8B52C(v34);
    v24 = (*(uint64_t (**)(_QWORD, uint64_t, char *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v4 + 8) + 24) + 32))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 24), v4, llvm::DominatorTreeWrapperPass::ID, v6);
    v25 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v24 + 96))(v24, llvm::DominatorTreeWrapperPass::ID);
    v5 |= llvm::RewriteStatepointsForGC::runOnFunction(v25, (llvm *)v6, v25 + 32, v33, v18);
LABEL_41:
    v3 = *(_QWORD *)(v3 + 8);
  }
  while (v3 != v2);
  if ((v5 & 1) == 0)
    return 0;
  sub_1C5C00258(a2);
  return 1;
}

uint64_t sub_1C5C06564()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5C009F4(v0);
}

llvm::ConstantAggregateZero **sub_1C5C0658C(llvm::ConstantAggregateZero **a1, void **a2)
{
  llvm::ConstantAggregateZero **v4;
  unsigned int i;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  void (**v11)(void);
  uint64_t v12;
  void ***v13;
  void ***v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  llvm::ConstantAggregateZero **v36;
  uint64_t *v37;
  void **v38;
  char v39;
  void **v40;
  void *v41;
  _QWORD *v42;
  char *v43;
  void *v44;
  int v45;
  uint64_t v46;
  char *v49;
  uint64_t *v50;
  char *v51;
  _QWORD *v52;
  uint64_t ***v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t v56;
  unsigned __int8 *Impl;
  char *v58;
  char *v59;
  uint64_t *v61;
  char *v62;
  llvm::Instruction *v63;
  uint64_t v64;
  llvm::Value *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  size_t v69;
  unsigned __int8 *v70;
  char *v71;
  uint64_t v72;
  llvm::ValueSymbolTable *v73;
  uint64_t *v74;
  char *v75;
  uint64_t v76;
  int v77;
  llvm::ConstantAggregateZero **v82;
  llvm::ConstantAggregateZero ***v83;
  uint64_t v84;
  llvm::ConstantAggregateZero ****v85;
  llvm::ConstantAggregateZero *v86;
  llvm::ConstantAggregateZero *v87;
  uint64_t v88;
  llvm::Type *v89;
  _QWORD *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  char *v95;
  llvm::ConstantAggregateZero **v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  void **v101;
  int v102;
  uint64_t v103;
  void *v104;
  int v105;
  int v106;
  uint64_t v107;
  llvm::ConstantAggregateZero **v108;
  unsigned int v109;
  void **v110;
  void *v111;
  void **v112;
  int v113;
  BOOL v114;
  unsigned int v115;
  void **v116;
  void **v117;
  void *v118;
  void **v119;
  int v120;
  BOOL v121;
  int v122;
  void **v123;
  void **v124;
  llvm::ConstantAggregateZero **v125;
  llvm::ConstantAggregateZero ***v126;
  uint64_t v127;
  llvm::ConstantAggregateZero ****v128;
  llvm::ConstantAggregateZero *v129;
  llvm::ConstantAggregateZero *v130;
  llvm::ConstantAggregateZero ***v131;
  uint64_t v132;
  llvm::ConstantAggregateZero ****v133;
  uint64_t v134;
  uint64_t v135;
  llvm::ConstantAggregateZero **v136;
  llvm::ConstantAggregateZero ***v137;
  uint64_t v138;
  llvm::ConstantAggregateZero ****v139;
  llvm::ConstantAggregateZero *v140;
  llvm::ConstantAggregateZero *v141;
  llvm::ConstantAggregateZero **v142;
  uint64_t v143;
  llvm::ConstantAggregateZero *v144;
  llvm::ConstantAggregateZero *v145;
  void ***v146;
  void ***v147;
  void **v148;
  int v149;
  unsigned int v150;
  llvm::ConstantAggregateZero **v151;
  void **p_dst;
  uint64_t *v153;
  int v154;
  uint64_t v155;
  __int16 v156;
  void *__dst;
  uint64_t *v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  int32x2_t v162;
  unsigned int v163;
  void *__p;
  uint64_t *v165;
  uint64_t v166;
  llvm::ConstantAggregateZero **v167;
  void *v168;
  int v169;
  char v170[24];
  _QWORD *v171;
  _QWORD v172[3];
  _QWORD *v173;
  char v174[24];
  _QWORD *v175;
  void *v176;
  uint64_t v177;
  _QWORD v178[18];

  v178[16] = *MEMORY[0x1E0C80C00];
  v4 = sub_1C5C07514(a1, (uint64_t)a2);
  v167 = v4;
  if (sub_1C5C0758C((uint64_t)v4) && ((*((_DWORD *)*v4 + 2) & 0xFE) != 18) != ((*((_DWORD *)*a1 + 2) & 0xFE) == 18))
    return v4;
  v161 = 0;
  v162 = 0;
  v163 = 0;
  v165 = 0;
  v166 = 0;
  __p = 0;
  v176 = v178;
  v178[0] = v4;
  v177 = 0x1000000001;
  p_dst = (void **)v4;
  v153 = (uint64_t *)v4;
  v151 = v4;
  v154 = 0;
  v155 = 0;
  sub_1C5C075F4(&v161, (uint64_t)&p_dst);
  for (i = v177; (_DWORD)v177; i = v177)
  {
    v6 = *((_QWORD *)v176 + i - 1);
    LODWORD(v177) = i - 1;
    v7 = operator new(0x20uLL);
    *v7 = &off_1E8197400;
    v7[1] = a2;
    v7[2] = &v161;
    v7[3] = &v176;
    v175 = v7;
    sub_1C5C07748(v6, (uint64_t)v174);
    (*(void (**)(_QWORD *))(*v7 + 40))(v7);
  }
  if (v176 != v178)
    free(v176);
  v176 = v178;
  HIDWORD(v177) = 6;
  do
  {
    LODWORD(v177) = 0;
    v8 = (uint64_t *)__p;
    v9 = v165;
    if (__p == v165)
      break;
    do
    {
      v10 = *v8;
      p_dst = a2;
      v153 = &v161;
      LOBYTE(__dst) = 1;
      v172[0] = &off_1E8197448;
      v172[1] = &__dst;
      v172[2] = &p_dst;
      v173 = v172;
      sub_1C5C07748(v10, (uint64_t)v172);
      if (v173 == v172)
      {
        v11 = (void (**)(void))(v172[0] + 32);
      }
      else
      {
        if (!v173)
          goto LABEL_14;
        v11 = (void (**)(void))(*v173 + 40);
      }
      (*v11)();
LABEL_14:
      if ((_BYTE)__dst)
      {
        v12 = v177;
        if (v177 >= (unint64_t)HIDWORD(v177))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, (uint64_t)v178, v177 + 1, 8);
          v12 = v177;
        }
        *((_QWORD *)v176 + v12) = v10;
        LODWORD(v177) = v177 + 1;
      }
      v8 += 4;
    }
    while (v8 != v9);
    if (!(_DWORD)v177)
      break;
    v13 = (void ***)v176;
    v14 = (void ***)((char *)v176 + 8 * v177);
    do
    {
      p_dst = 0;
      p_dst = *v13;
      v15 = (uint64_t *)sub_1C5C07EA8(&v161, (uint64_t)p_dst);
      v16 = v165;
      if (v165 != v15)
      {
        v17 = v163;
        if (v163)
        {
          LODWORD(v18) = ((*v15 >> 4) ^ (*v15 >> 9)) & (v163 - 1);
          v19 = (uint64_t *)(v161 + 16 * v18);
          v20 = *v19;
          if (*v15 == *v19)
          {
LABEL_24:
            *v19 = -8192;
            v162 = vadd_s32(v162, (int32x2_t)0x1FFFFFFFFLL);
            v16 = v165;
          }
          else
          {
            v33 = 1;
            while (v20 != -4096)
            {
              v34 = v18 + v33++;
              v18 = v34 & (v163 - 1);
              v20 = *(_QWORD *)(v161 + 16 * v18);
              if (*v15 == v20)
              {
                v19 = (uint64_t *)(v161 + 16 * v18);
                goto LABEL_24;
              }
            }
          }
        }
        v21 = v15 + 4;
        if (v15 + 4 == v16)
        {
          v165 = v15;
        }
        else
        {
          v22 = 0;
          v23 = ((char *)v15 - (_BYTE *)__p) >> 5;
          do
          {
            v24 = &v21[v22];
            *((_OWORD *)v24 - 2) = *(_OWORD *)&v21[v22];
            *((_DWORD *)v24 - 4) = v21[v22 + 2];
            *(v24 - 1) = v21[v22 + 3];
            v22 += 4;
          }
          while (v24 + 4 != v16);
          v165 = &v15[v22];
          if (v22 * 8)
          {
            v26 = v161 + 16 * v17;
            if (v162.i32[0])
              v27 = 0;
            else
              v27 = v17;
            if (v162.i32[0])
              v28 = v161;
            else
              v28 = v161 + 16 * v17;
            if ((_DWORD)v17 && v162.i32[0])
            {
              v29 = 16 * v17;
              v28 = v161;
              while ((*(_QWORD *)v28 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v28 += 16;
                v29 -= 16;
                if (!v29)
                {
                  v27 = v17;
                  v28 = v161 + 16 * v17;
                  goto LABEL_45;
                }
              }
              v27 = v17;
            }
LABEL_45:
            v30 = v161 + 16 * v27;
LABEL_46:
            while (v28 != v30)
            {
              v31 = *(unsigned int *)(v28 + 8);
              if (v23 < v31)
                *(_DWORD *)(v28 + 8) = v31 - 1;
              v32 = v28 + 16;
              v28 = v26;
              if (v32 != v26)
              {
                v28 = v32;
                while ((*(_QWORD *)v28 | 0x1000) == 0xFFFFFFFFFFFFF000)
                {
                  v28 += 16;
                  if (v28 == v26)
                  {
                    v28 = v26;
                    goto LABEL_46;
                  }
                }
              }
            }
          }
        }
      }
      v25 = p_dst;
      *(_QWORD *)sub_1C62A8A44((uint64_t)a2, (uint64_t *)&p_dst) = v25;
      ++v13;
    }
    while (v13 != v14);
  }
  while ((_DWORD)v177);
  if (!v163)
  {
    v4 = v151;
    goto LABEL_86;
  }
  v4 = v151;
  v35 = (v163 - 1) & ((v151 >> 4) ^ (v151 >> 9));
  v36 = *(llvm::ConstantAggregateZero ***)(v161 + 16 * v35);
  if (v151 == v36)
  {
LABEL_61:
    if (v35 == v163)
      goto LABEL_86;
    v160 = &v161;
    v37 = (uint64_t *)__p;
    do
    {
      v38 = (void **)v165;
      if (v37 == v165)
        goto LABEL_111;
      v39 = 0;
      v40 = (void **)v37;
      do
      {
        __dst = *v40;
        v41 = __dst;
        LODWORD(v158) = 0;
        v159 = 0;
        v42 = operator new(0x20uLL);
        *v42 = &off_1E8197490;
        v42[1] = a2;
        v42[2] = &v160;
        v42[3] = &__dst;
        v171 = v42;
        sub_1C5C07748((uint64_t)v41, (uint64_t)v170);
        (*(void (**)(_QWORD *))(*v42 + 40))(v42);
        v168 = v41;
        v169 = 0;
        sub_1C6245320((uint64_t)&v161, (uint64_t *)&v168, &v169, (uint64_t)&p_dst);
        v37 = (uint64_t *)__p;
        v43 = (char *)__p + 32 * *((unsigned int *)p_dst + 2);
        v44 = (void *)*((_QWORD *)v43 + 1);
        v45 = *((_DWORD *)v43 + 4);
        v46 = *((_QWORD *)v43 + 3);
        if (v44 != __dst || v46 != v159 || v45 != (_DWORD)v158)
        {
          v168 = v41;
          v169 = 0;
          sub_1C6245320((uint64_t)&v161, (uint64_t *)&v168, &v169, (uint64_t)&p_dst);
          v37 = (uint64_t *)__p;
          v49 = (char *)__p + 32 * *((unsigned int *)p_dst + 2);
          *((_QWORD *)v49 + 1) = __dst;
          *((_DWORD *)v49 + 4) = (_DWORD)v158;
          *((_QWORD *)v49 + 3) = v159;
          v39 = 1;
        }
        v40 += 4;
      }
      while (v40 != v38);
    }
    while ((v39 & 1) != 0);
    v50 = v165;
    if (v37 == v165)
      goto LABEL_111;
    v51 = (char *)v37;
    do
    {
      if (*((_DWORD *)v51 + 4) == 1)
      {
        v52 = (_QWORD *)*((_QWORD *)v51 + 3);
        if ((*(_DWORD *)(*v52 + 8) & 0xFE) == 0x12)
        {
          v53 = *(uint64_t ****)v51;
          if (*(_BYTE *)(*(_QWORD *)v51 + 16) == 89)
          {
            v54 = (uint64_t)*(v53 - 4);
            p_dst = (void **)"base_ee";
            v156 = 259;
            v55 = operator new(0x80uLL);
            v55[21] = v55[21] & 0x38000000 | 2;
            v56 = (uint64_t)(v55 + 16);
            *(_QWORD *)v55 = 0;
            *((_QWORD *)v55 + 1) = 0;
            *((_QWORD *)v55 + 2) = 0;
            *((_QWORD *)v55 + 3) = v55 + 16;
            *((_QWORD *)v55 + 4) = 0;
            *((_QWORD *)v55 + 5) = 0;
            *((_QWORD *)v55 + 6) = 0;
            *((_QWORD *)v55 + 7) = v55 + 16;
            llvm::ExtractElementInst::ExtractElementInst((uint64_t)(v55 + 16), v52, v54, (uint64_t)&p_dst, (uint64_t)v53);
            Impl = (unsigned __int8 *)llvm::MDTuple::getImpl(**v53, 0, 0, 0, 1);
            llvm::Instruction::setMetadata(v56, "is_base_value", 0xDuLL, Impl);
            __dst = v53;
            LODWORD(v158) = 0;
            sub_1C6245320((uint64_t)&v161, (uint64_t *)&__dst, &v158, (uint64_t)&p_dst);
            v37 = (uint64_t *)__p;
            v58 = (char *)__p + 32 * *((unsigned int *)p_dst + 2);
            *((_QWORD *)v58 + 1) = v53;
            *((_DWORD *)v58 + 4) = 1;
            *((_QWORD *)v58 + 3) = v56;
          }
          else if (((_DWORD)(*v53)[1] & 0xFE) != 0x12)
          {
            __dst = *(void **)v51;
            LODWORD(v158) = 0;
            sub_1C6245320((uint64_t)&v161, (uint64_t *)&__dst, &v158, (uint64_t)&p_dst);
            v37 = (uint64_t *)__p;
            v59 = (char *)__p + 32 * *((unsigned int *)p_dst + 2);
            *((_QWORD *)v59 + 1) = v53;
            *((_DWORD *)v59 + 4) = 2;
            *((_QWORD *)v59 + 3) = 0;
          }
        }
      }
      v51 += 32;
    }
    while (v51 != (char *)v50);
    v61 = v165;
    if (v37 == v165)
      goto LABEL_111;
    v62 = (char *)v37;
    do
    {
      if (*((_DWORD *)v62 + 4) == 2)
      {
        v63 = *(llvm::Instruction **)v62;
        llvm::Instruction::clone(*(llvm::Instruction **)v62);
        v65 = (llvm::Value *)v64;
        v66 = *((_QWORD *)v63 + 5);
        *(_QWORD *)(v64 + 40) = v66;
        *(_WORD *)(v66 + 18) &= ~0x8000u;
        if ((*(_BYTE *)(v64 + 23) & 0x10) != 0)
        {
          v72 = *(_QWORD *)(v66 + 56);
          if (v72)
          {
            v73 = *(llvm::ValueSymbolTable **)(v72 + 104);
            if (v73)
              llvm::ValueSymbolTable::reinsertValue(v73, v65);
          }
        }
        v67 = *((_QWORD *)v63 + 3);
        *((_QWORD *)v65 + 3) = v67;
        *((_QWORD *)v65 + 4) = (char *)v63 + 24;
        *(_QWORD *)(v67 + 8) = (char *)v65 + 24;
        *((_QWORD *)v63 + 3) = (char *)v65 + 24;
        v68 = "base_phi";
        v69 = 8;
        switch(*((_BYTE *)v63 + 16))
        {
          case 'S':
            goto LABEL_104;
          case 'U':
            v68 = "base_select";
            v69 = 11;
            goto LABEL_104;
          case 'Y':
            v68 = "base_ee";
            goto LABEL_103;
          case 'Z':
            v68 = "base_ie";
            goto LABEL_103;
          default:
            v68 = "base_sv";
LABEL_103:
            v69 = 7;
LABEL_104:
            sub_1C5C073CC(&__dst, (uint64_t ***)v63, (uint64_t)".base", 5, v68, v69);
            v156 = 260;
            p_dst = &__dst;
            llvm::Value::setName((uint64_t ***)v65, (uint64_t)&p_dst);
            if (SHIBYTE(v159) < 0)
              operator delete(__dst);
            v70 = (unsigned __int8 *)llvm::MDTuple::getImpl(**(uint64_t ***)v63, 0, 0, 0, 1);
            llvm::Instruction::setMetadata((uint64_t)v65, "is_base_value", 0xDuLL, v70);
            __dst = v63;
            LODWORD(v158) = 0;
            sub_1C6245320((uint64_t)&v161, (uint64_t *)&__dst, &v158, (uint64_t)&p_dst);
            v37 = (uint64_t *)__p;
            v71 = (char *)__p + 32 * *((unsigned int *)p_dst + 2);
            *((_QWORD *)v71 + 1) = v63;
            *((_DWORD *)v71 + 4) = 2;
            *((_QWORD *)v71 + 3) = v65;
            break;
        }
      }
      v62 += 32;
    }
    while (v62 != (char *)v61);
    v74 = v165;
    __dst = a2;
    v158 = &v161;
    if (v37 == v165)
    {
LABEL_111:
      v4 = *(llvm::ConstantAggregateZero ***)sub_1C62A8A44((uint64_t)a2, (uint64_t *)&v167);
      goto LABEL_86;
    }
    while (2)
    {
      if (*((_DWORD *)v37 + 4) != 2)
        goto LABEL_230;
      v75 = (char *)*v37;
      v76 = v37[3];
      v77 = *(unsigned __int8 *)(v76 + 16);
      if (v77 == 83 && v76 != 0)
      {
        v91 = *((_DWORD *)v75 + 5);
        p_dst = 0;
        v153 = 0;
        v154 = 0;
        v92 = v91 & 0x7FFFFFF;
        if ((v91 & 0x7FFFFFF) != 0)
        {
          v93 = 0;
          while (1)
          {
            v94 = *((_DWORD *)v75 + 5);
            if ((v94 & 0x40000000) != 0)
            {
              v96 = *(llvm::ConstantAggregateZero ***)(*((_QWORD *)v75 - 1) + 32 * v93);
              v168 = 0;
              v95 = (char *)*((_QWORD *)v75 - 1);
            }
            else
            {
              v95 = &v75[-32 * (v94 & 0x7FFFFFF)];
              v96 = *(llvm::ConstantAggregateZero ***)&v95[32 * v93];
              v168 = 0;
            }
            v97 = *(_QWORD *)&v95[32 * *((unsigned int *)v75 + 15) + 8 * v93];
            v168 = (void *)v97;
            v98 = v154;
            if (v154)
            {
              v101 = p_dst;
              v102 = v154 - 1;
              v103 = ((v97 >> 4) ^ (v97 >> 9)) & (v154 - 1);
              v104 = p_dst[2 * v103];
              if ((void *)v97 == v104)
                goto LABEL_180;
              v105 = 1;
              while (v104 != (void *)-4096)
              {
                v106 = v103 + v105++;
                LODWORD(v103) = v106 & v102;
                v104 = p_dst[2 * v103];
                if ((void *)v97 == v104)
                  goto LABEL_178;
              }
            }
            v99 = *(_QWORD *)(v97 + 40);
            if (v99 == v97 + 40)
            {
              v100 = 0;
            }
            else
            {
              if (v99)
                v107 = v99 - 24;
              else
                v107 = 0;
              if (*(unsigned __int8 *)(v107 + 16) - 29 >= 0xB)
                v100 = 0;
              else
                v100 = v107;
            }
            v108 = sub_1C5C078C0((uint64_t *)&__dst, v96, v100);
            v98 = v154;
            if (v154)
            {
              v101 = p_dst;
              v109 = ((v168 >> 4) ^ (v168 >> 9)) & (v154 - 1);
              v110 = &p_dst[2 * v109];
              v111 = *v110;
              if (v168 == *v110)
                goto LABEL_177;
              v112 = 0;
              v113 = 1;
              while (v111 != (void *)-4096)
              {
                if (v112)
                  v114 = 0;
                else
                  v114 = v111 == (void *)-8192;
                if (v114)
                  v112 = v110;
                v115 = v109 + v113++;
                v109 = v115 & (v154 - 1);
                v110 = &p_dst[2 * v109];
                v111 = *v110;
                if (v168 == *v110)
                  goto LABEL_177;
              }
              if (v112)
                v116 = v112;
              else
                v116 = v110;
            }
            else
            {
              v116 = 0;
            }
            v110 = (void **)sub_1C4ECCA58((uint64_t)&p_dst, (uint64_t)&v168, (uint64_t *)&v168, v116);
            *v110 = v168;
            v110[1] = 0;
            v101 = p_dst;
            v98 = v154;
LABEL_177:
            v110[1] = v108;
LABEL_178:
            if (!v98)
            {
              v123 = 0;
LABEL_193:
              v117 = (void **)sub_1C4ECCA58((uint64_t)&p_dst, (uint64_t)&v168, (uint64_t *)&v168, v123);
              *v117 = v168;
              v117[1] = 0;
              goto LABEL_194;
            }
            v97 = (uint64_t)v168;
            v102 = v98 - 1;
            v103 = ((v168 >> 4) ^ (v168 >> 9)) & (v98 - 1);
LABEL_180:
            v117 = &v101[2 * v103];
            v118 = *v117;
            if ((void *)v97 != *v117)
            {
              v119 = 0;
              v120 = 1;
              while (v118 != (void *)-4096)
              {
                if (v119)
                  v121 = 0;
                else
                  v121 = v118 == (void *)-8192;
                if (v121)
                  v119 = v117;
                v122 = v103 + v120++;
                LODWORD(v103) = v122 & v102;
                v117 = &v101[2 * v103];
                v118 = *v117;
                if ((void *)v97 == *v117)
                  goto LABEL_194;
              }
              if (v119)
                v123 = v119;
              else
                v123 = v117;
              goto LABEL_193;
            }
LABEL_194:
            sub_1C6125834(v76, v93++, (uint64_t)v117[1]);
            if (v93 == v92)
            {
              v124 = p_dst;
              goto LABEL_214;
            }
          }
        }
        v124 = 0;
LABEL_214:
        MEMORY[0x1CAA32FB4](v124, 8);
LABEL_230:
        v37 += 4;
        if (v37 == v74)
        {
          v146 = (void ***)__p;
          v147 = (void ***)v165;
          while (v146 != v147)
          {
            v148 = v146[3];
            p_dst = *v146;
            *(_QWORD *)sub_1C62A8A44((uint64_t)a2, (uint64_t *)&p_dst) = v148;
            v146 += 4;
          }
          goto LABEL_111;
        }
        continue;
      }
      break;
    }
    if (v77 == 85 && v76 != 0)
    {
      v125 = sub_1C5C078C0((uint64_t *)&__dst, *((llvm::ConstantAggregateZero ***)v75 - 8), v37[3]);
      v126 = (llvm::ConstantAggregateZero ***)(v76 - 64);
      if (*(_QWORD *)(v76 - 64))
      {
        **(_QWORD **)(v76 - 48) = *(_QWORD *)(v76 - 56);
        v127 = *(_QWORD *)(v76 - 56);
        if (v127)
          *(_QWORD *)(v127 + 16) = *(_QWORD *)(v76 - 48);
      }
      *v126 = v125;
      if (v125)
      {
        v130 = v125[1];
        v128 = (llvm::ConstantAggregateZero ****)(v125 + 1);
        v129 = v130;
        *(_QWORD *)(v76 - 56) = v130;
        if (v130)
          *((_QWORD *)v129 + 2) = v76 - 56;
        *(_QWORD *)(v76 - 48) = v128;
        *v128 = v126;
      }
      goto LABEL_205;
    }
    if (v77 != 89 || v76 == 0)
    {
      if (v77 == 90 && v76 != 0)
      {
        v136 = sub_1C5C078C0((uint64_t *)&__dst, *((llvm::ConstantAggregateZero ***)v75 - 12), v37[3]);
        v137 = (llvm::ConstantAggregateZero ***)(v76 - 96);
        if (*(_QWORD *)(v76 - 96))
        {
          **(_QWORD **)(v76 - 80) = *(_QWORD *)(v76 - 88);
          v138 = *(_QWORD *)(v76 - 88);
          if (v138)
            *(_QWORD *)(v138 + 16) = *(_QWORD *)(v76 - 80);
        }
        *v137 = v136;
        if (v136)
        {
          v141 = v136[1];
          v139 = (llvm::ConstantAggregateZero ****)(v136 + 1);
          v140 = v141;
          *(_QWORD *)(v76 - 88) = v141;
          if (v141)
            *((_QWORD *)v140 + 2) = v76 - 88;
          *(_QWORD *)(v76 - 80) = v139;
          *v139 = v137;
        }
        goto LABEL_222;
      }
      v82 = sub_1C5C078C0((uint64_t *)&__dst, *((llvm::ConstantAggregateZero ***)v75 - 8), v37[3]);
      v83 = (llvm::ConstantAggregateZero ***)(v76 - 64);
      if (*(_QWORD *)(v76 - 64))
      {
        **(_QWORD **)(v76 - 48) = *(_QWORD *)(v76 - 56);
        v84 = *(_QWORD *)(v76 - 56);
        if (v84)
          *(_QWORD *)(v84 + 16) = *(_QWORD *)(v76 - 48);
      }
      *v83 = v82;
      if (v82)
      {
        v87 = v82[1];
        v85 = (llvm::ConstantAggregateZero ****)(v82 + 1);
        v86 = v87;
        *(_QWORD *)(v76 - 56) = v87;
        if (v87)
          *((_QWORD *)v86 + 2) = v76 - 56;
        *(_QWORD *)(v76 - 48) = v85;
        *v85 = v83;
      }
      v88 = *(unsigned int *)(**((_QWORD **)v75 - 8) + 32);
      if ((_DWORD)v88 == *((_DWORD *)v75 + 18)
        && (llvm::ShuffleVectorInst::isZeroEltSplatMask(*((int **)v75 + 8), v88) & 1) != 0)
      {
        v90 = llvm::UndefValue::get(**((llvm::UndefValue ***)v75 - 4), v89);
      }
      else
      {
LABEL_205:
        v90 = sub_1C5C078C0((uint64_t *)&__dst, *((llvm::ConstantAggregateZero ***)v75 - 4), v76);
      }
      v131 = (llvm::ConstantAggregateZero ***)(v76 - 32);
      if (*(_QWORD *)(v76 - 32))
      {
        **(_QWORD **)(v76 - 16) = *(_QWORD *)(v76 - 24);
        v132 = *(_QWORD *)(v76 - 24);
        if (v132)
          *(_QWORD *)(v132 + 16) = *(_QWORD *)(v76 - 16);
      }
      *v131 = (llvm::ConstantAggregateZero **)v90;
      if (!v90)
        goto LABEL_230;
      v135 = v90[1];
      v133 = (llvm::ConstantAggregateZero ****)(v90 + 1);
      v134 = v135;
      *(_QWORD *)(v76 - 24) = v135;
      if (v135)
        *(_QWORD *)(v134 + 16) = v76 - 24;
      *(_QWORD *)(v76 - 16) = v133;
    }
    else
    {
LABEL_222:
      v142 = sub_1C5C078C0((uint64_t *)&__dst, *((llvm::ConstantAggregateZero ***)v75 - 8), v76);
      v131 = (llvm::ConstantAggregateZero ***)(v76 - 64);
      if (*(_QWORD *)(v76 - 64))
      {
        **(_QWORD **)(v76 - 48) = *(_QWORD *)(v76 - 56);
        v143 = *(_QWORD *)(v76 - 56);
        if (v143)
          *(_QWORD *)(v143 + 16) = *(_QWORD *)(v76 - 48);
      }
      *v131 = v142;
      if (!v142)
        goto LABEL_230;
      v145 = v142[1];
      v133 = (llvm::ConstantAggregateZero ****)(v142 + 1);
      v144 = v145;
      *(_QWORD *)(v76 - 56) = v145;
      if (v145)
        *((_QWORD *)v144 + 2) = v76 - 56;
      *(_QWORD *)(v76 - 48) = v133;
    }
    *v133 = v131;
    goto LABEL_230;
  }
  v149 = 1;
  while (v36 != (llvm::ConstantAggregateZero **)-4096)
  {
    v150 = v35 + v149++;
    v35 = v150 & (v163 - 1);
    v36 = *(llvm::ConstantAggregateZero ***)(v161 + 16 * v35);
    if (v151 == v36)
      goto LABEL_61;
  }
LABEL_86:
  if (v176 != v178)
    free(v176);
  if (__p)
  {
    v165 = (uint64_t *)__p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v161, 8);
  return v4;
}

void sub_1C5C073CC(_QWORD *__dst, uint64_t ***a2, uint64_t a3, uint64_t a4, void *__src, size_t __len)
{
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ****v13;
  uint64_t ***v14;
  int v15;
  int v16;
  size_t v17;
  size_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD v22[4];
  __int16 v23;

  v6 = __dst;
  if ((*((_DWORD *)a2 + 5) & 0x10000000) == 0)
  {
    if (!__src)
    {
      *__dst = 0;
      __dst[1] = 0;
      __dst[2] = 0;
      return;
    }
    if (__len >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (__len >= 0x17)
    {
      v17 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17)
        v17 = __len | 7;
      v18 = v17 + 1;
      v19 = operator new(v17 + 1);
      v6[1] = __len;
      v6[2] = v18 | 0x8000000000000000;
      *v6 = v19;
      v6 = v19;
    }
    else
    {
      *((_BYTE *)__dst + 23) = __len;
      if (!__len)
        goto LABEL_18;
    }
    memmove(v6, __src, __len);
LABEL_18:
    *((_BYTE *)v6 + __len) = 0;
    return;
  }
  v9 = ***a2;
  v10 = *(_QWORD *)(v9 + 152);
  v11 = *(unsigned int *)(v9 + 168);
  if (!(_DWORD)v11)
    goto LABEL_19;
  LODWORD(v12) = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v13 = (uint64_t ****)(v10 + 16 * v12);
  v14 = *v13;
  if (*v13 != a2)
  {
    v15 = 1;
    while (v14 != (uint64_t ***)-4096)
    {
      v16 = v12 + v15++;
      v12 = v16 & (v11 - 1);
      v14 = *(uint64_t ****)(v10 + 16 * v12);
      if (v14 == a2)
      {
        v13 = (uint64_t ****)(v10 + 16 * v12);
        goto LABEL_20;
      }
    }
LABEL_19:
    v13 = (uint64_t ****)(v10 + 16 * v11);
  }
LABEL_20:
  v20 = (uint64_t *)v13[1];
  v21 = *v20;
  v22[0] = v20 + 2;
  v22[1] = v21;
  v22[2] = a3;
  v22[3] = a4;
  v23 = 1285;
  llvm::Twine::str((llvm::Twine *)v22, __dst);
}

llvm::ConstantAggregateZero **sub_1C5C07514(llvm::ConstantAggregateZero **a1, uint64_t a2)
{
  llvm::ConstantAggregateZero ***v3;
  llvm::Type *v4;
  llvm::ConstantAggregateZero **v5;
  llvm::ConstantAggregateZero ***v6;
  uint64_t v7;
  llvm::ConstantAggregateZero **v9;

  v9 = a1;
  v3 = (llvm::ConstantAggregateZero ***)sub_1C62A8A44(a2, (uint64_t *)&v9);
  v5 = *v3;
  if (!*v3)
  {
    v6 = v3;
    v5 = sub_1C5C07A1C(v9, v4);
    *v6 = v5;
  }
  v7 = sub_1C6323FC8(a2, (uint64_t)v5);
  if (*(_QWORD *)(a2 + 32) != v7)
    return *(llvm::ConstantAggregateZero ***)(v7 + 8);
  return v5;
}

BOOL sub_1C5C0758C(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  BOOL v3;
  int v4;

  v1 = 1;
  v2 = *(unsigned __int8 *)(a1 + 16) - 83;
  v3 = v2 > 8;
  v4 = (1 << v2) & 0x1C5;
  if (!v3 && v4 != 0)
    return (*(_QWORD *)(a1 + 48) || (*(_BYTE *)(a1 + 23) & 0x20) != 0)
        && llvm::Instruction::getMetadataImpl((uint64_t ***)a1, "is_base_value", 0xDuLL);
  return v1;
}

uint64_t sub_1C5C075F4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  __int128 v7;
  _OWORD *v8;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int v22;

  v21 = *(_QWORD *)a2;
  v22 = 0;
  sub_1C6245320((uint64_t)a1, &v21, &v22, (uint64_t)&v19);
  if (!v20)
    return 0;
  v4 = v19;
  v6 = (char *)a1[4];
  v5 = a1[5];
  if ((unint64_t)v6 >= v5)
  {
    v10 = (char *)a1[3];
    v11 = (v6 - v10) >> 5;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 59)
      abort();
    v13 = v5 - (_QWORD)v10;
    if (v13 >> 4 > v12)
      v12 = v13 >> 4;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
      v14 = 0x7FFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 59)
        sub_1C4764EE4();
      v15 = (char *)operator new(32 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[32 * v11];
    v17 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v16 = *(_OWORD *)a2;
    *((_OWORD *)v16 + 1) = v17;
    v8 = v16 + 32;
    if (v6 != v10)
    {
      do
      {
        v18 = *((_OWORD *)v6 - 1);
        *((_OWORD *)v16 - 2) = *((_OWORD *)v6 - 2);
        *((_OWORD *)v16 - 1) = v18;
        v16 -= 32;
        v6 -= 32;
      }
      while (v6 != v10);
      v6 = (char *)a1[3];
    }
    a1[3] = v16;
    a1[4] = v8;
    a1[5] = &v15[32 * v14];
    if (v6)
      operator delete(v6);
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v6 = *(_OWORD *)a2;
    *((_OWORD *)v6 + 1) = v7;
    v8 = v6 + 32;
  }
  a1[4] = v8;
  *(_DWORD *)(v4 + 8) = (((unint64_t)v8 - a1[3]) >> 5) - 1;
  return 1;
}

uint64_t sub_1C5C07748(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = result;
  v4 = *(unsigned __int8 *)(result + 16);
  if (!result || v4 != 83)
  {
    if (result && v4 == 85)
    {
      v16 = *(_QWORD *)(result - 64);
      v8 = *(_QWORD *)(a2 + 24);
      if (!v8)
        goto LABEL_32;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 48))(v8, &v16);
      goto LABEL_10;
    }
    if (!result || v4 != 89)
    {
      if (!result || v4 != 90)
      {
        if (v4 != 91)
          v3 = 0;
        v16 = *(_QWORD *)(v3 - 64);
        v14 = *(_QWORD *)(a2 + 24);
        if (!v14)
          goto LABEL_32;
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 48))(v14, &v16);
        v15 = *(unsigned int *)(**(_QWORD **)(v3 - 64) + 32);
        if ((_DWORD)v15 == *(_DWORD *)(v3 + 72))
        {
          result = llvm::ShuffleVectorInst::isZeroEltSplatMask(*(int **)(v3 + 64), v15);
          if ((result & 1) != 0)
            return result;
        }
LABEL_10:
        v9 = *(_QWORD *)(v3 - 32);
        goto LABEL_23;
      }
      v16 = *(_QWORD *)(result - 96);
      v12 = *(_QWORD *)(a2 + 24);
      if (!v12)
        goto LABEL_32;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 48))(v12, &v16);
    }
    v9 = *(_QWORD *)(v3 - 64);
LABEL_23:
    v16 = v9;
    v13 = *(_QWORD *)(a2 + 24);
    if (v13)
      return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 48))(v13, &v16);
LABEL_32:
    sub_1C485C2F0();
    return sub_1C5C078C0();
  }
  v5 = *(_DWORD *)(result + 20);
  if ((v5 & 0x40000000) == 0)
  {
    v6 = v5 & 0x7FFFFFF;
    v7 = (uint64_t *)(result - 32 * v6);
    if (!v6)
      return result;
    goto LABEL_12;
  }
  v7 = *(uint64_t **)(result - 8);
  v6 = v5 & 0x7FFFFFF;
  if (v6)
  {
LABEL_12:
    v10 = 32 * v6;
    while (1)
    {
      v16 = *v7;
      v11 = *(_QWORD *)(a2 + 24);
      if (!v11)
        break;
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v16);
      v7 += 4;
      v10 -= 32;
      if (!v10)
        return result;
    }
    goto LABEL_32;
  }
  return result;
}

llvm::ConstantAggregateZero **sub_1C5C078C0(uint64_t *a1, llvm::ConstantAggregateZero **a2, uint64_t a3)
{
  llvm::ConstantAggregateZero **v6;
  llvm::ConstantAggregateZero **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::ConstantAggregateZero ***v12;
  llvm::ConstantAggregateZero **v13;
  int v14;
  int v15;
  _DWORD *v16;
  char *v17;
  llvm::ConstantAggregateZero *v18;
  _QWORD v20[4];
  __int16 v21;
  llvm::ConstantAggregateZero **v22;
  int v23;

  v6 = sub_1C5C07514(a2, *a1);
  v7 = v6;
  v8 = a1[1];
  v9 = *(_QWORD *)v8;
  v10 = *(unsigned int *)(v8 + 16);
  if ((_DWORD)v10)
  {
    LODWORD(v11) = ((v6 >> 4) ^ (v6 >> 9)) & (v10 - 1);
    v12 = (llvm::ConstantAggregateZero ***)(v9 + 16 * v11);
    v13 = *v12;
    if (v6 == *v12)
      goto LABEL_8;
    v14 = 1;
    while (v13 != (llvm::ConstantAggregateZero **)-4096)
    {
      v15 = v11 + v14++;
      v11 = v15 & (v10 - 1);
      v13 = *(llvm::ConstantAggregateZero ***)(v9 + 16 * v11);
      if (v6 == v13)
      {
        v12 = (llvm::ConstantAggregateZero ***)(v9 + 16 * v11);
        goto LABEL_8;
      }
    }
  }
  v12 = (llvm::ConstantAggregateZero ***)(v9 + 16 * v10);
LABEL_8:
  if (v12 == (llvm::ConstantAggregateZero ***)(v9 + 16 * v10))
  {
    if (!a3)
      return v7;
  }
  else
  {
    v22 = v6;
    v23 = 0;
    sub_1C6245320(v8, (uint64_t *)&v22, &v23, (uint64_t)v20);
    v7 = *(llvm::ConstantAggregateZero ***)(*(_QWORD *)(v8 + 24) + 32 * *(unsigned int *)(v20[0] + 8) + 24);
    if (!a3)
      return v7;
  }
  if (*v7 != *a2)
  {
    v16 = operator new(0x60uLL);
    v17 = (char *)(v16 + 8);
    v16[13] = v16[13] & 0x38000000 | 1;
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = 0;
    *((_QWORD *)v16 + 3) = v16 + 8;
    v18 = *a2;
    v20[0] = "cast";
    v21 = 259;
    llvm::BitCastInst::BitCastInst((uint64_t)(v16 + 8), (uint64_t)v7, (uint64_t)v18, (uint64_t)v20, a3);
    return (llvm::ConstantAggregateZero **)v17;
  }
  return v7;
}

llvm::ConstantAggregateZero **sub_1C5C07A1C(llvm::ConstantAggregateZero **a1, llvm::Type *a2)
{
  llvm::ConstantAggregateZero **v2;
  llvm::ConstantAggregateZero *v3;
  unsigned int v4;
  llvm::Value *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = a1;
  v3 = *a1;
  v4 = *((unsigned __int8 *)v2 + 16);
  if ((*((_DWORD *)v3 + 2) & 0xFE) == 0x12)
  {
    if (v4 == 21)
      return v2;
    if (v4 <= 0x14)
      return (llvm::ConstantAggregateZero **)llvm::ConstantAggregateZero::get(v3, a2);
    if (*((unsigned __int8 *)v2 + 16) > 0x4Cu)
    {
      if (*((unsigned __int8 *)v2 + 16) > 0x59u || v4 != 77)
        return v2;
      v5 = *(v2 - 4);
      return (llvm::ConstantAggregateZero **)sub_1C5C07A1C(v5);
    }
    if (v4 != 62)
      return v2;
LABEL_30:
    v5 = v2[-4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF)];
    return (llvm::ConstantAggregateZero **)sub_1C5C07A1C(v5);
  }
  if (v4 == 21)
    return v2;
  if (v4 <= 0x14)
    return (llvm::ConstantAggregateZero **)llvm::ConstantPointerNull::get(v3, a2);
  if (v4 == 76)
    return v2;
  if (v4 >= 0x1C && v4 - 79 >= 0xFFFFFFF3)
  {
    v5 = llvm::Value::stripPointerCasts((llvm::Value *)v2);
    return (llvm::ConstantAggregateZero **)sub_1C5C07A1C(v5);
  }
  v6 = v4 - 33;
  if (v6 > 0x3B)
    goto LABEL_34;
  if (((1 << (v4 - 33)) & 0x800000088000001) != 0)
    return v2;
  if (v6 == 29)
    goto LABEL_30;
  if (v6 == 51)
  {
    v8 = (uint64_t)*(v2 - 4);
    if (v8
      && !*(_BYTE *)(v8 + 16)
      && *(llvm::ConstantAggregateZero **)(v8 + 24) == v2[9]
      && (*(_BYTE *)(v8 + 33) & 0x20) != 0
      && *(_DWORD *)(v8 + 36) == 120)
    {
      goto LABEL_30;
    }
  }
  else
  {
LABEL_34:
    if (v4 >= 0x1C && (v2[6] || (*((_BYTE *)v2 + 23) & 0x20) != 0))
      llvm::Instruction::getMetadataImpl((uint64_t ***)v2, "is_base_value", 0xDuLL);
  }
  return v2;
}

void sub_1C5C07C10()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5C07C24(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E8197400;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C5C07C64(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8197400;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C5C07C8C(uint64_t *a1, llvm::ConstantAggregateZero ***a2)
{
  llvm::ConstantAggregateZero **v3;
  llvm::ConstantAggregateZero **v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  int v10;
  uint64_t v11;

  v3 = *a2;
  v4 = sub_1C5C07514(*a2, a1[1]);
  result = sub_1C5C0758C((uint64_t)v4);
  if (!(_DWORD)result || ((*((_DWORD *)*v4 + 2) & 0xFE) != 18) == ((*((_DWORD *)*v3 + 2) & 0xFE) == 18))
  {
    v6 = (_QWORD *)a1[2];
    v9[0] = v4;
    v9[1] = v4;
    v10 = 0;
    v11 = 0;
    result = sub_1C5C075F4(v6, (uint64_t)v9);
    if ((result & 1) != 0)
    {
      v7 = a1[3];
      v8 = *(unsigned int *)(v7 + 8);
      if (v8 >= *(_DWORD *)(v7 + 12))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v7, v7 + 16, v8 + 1, 8);
        LODWORD(v8) = *(_DWORD *)(v7 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v7 + 8 * v8) = v4;
      ++*(_DWORD *)(v7 + 8);
    }
  }
  return result;
}

void sub_1C5C07D64()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5C07D78(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E8197448;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C5C07DB0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8197448;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

llvm::Value *sub_1C5C07DD0(llvm::Value *result, llvm::ConstantAggregateZero ***a2)
{
  llvm::Value *v2;
  char v3;
  llvm::ConstantAggregateZero **v4;
  uint64_t *v5;
  llvm::ConstantAggregateZero **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::ConstantAggregateZero ***v11;
  llvm::ConstantAggregateZero **v12;
  int v13;
  int v14;

  v2 = result;
  v3 = **((_BYTE **)result + 1);
  if (v3)
  {
    v4 = *a2;
    v5 = (uint64_t *)*((_QWORD *)result + 2);
    v6 = sub_1C5C07514(*a2, *v5);
    result = llvm::Value::stripPointerCasts((llvm::Value *)v4);
    if (result != (llvm::Value *)v6)
    {
      v3 = 0;
      goto LABEL_12;
    }
    v7 = v5[1];
    v8 = *(_QWORD *)v7;
    v9 = *(unsigned int *)(v7 + 16);
    if ((_DWORD)v9)
    {
      LODWORD(v10) = (v9 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      v11 = (llvm::ConstantAggregateZero ***)(v8 + 16 * v10);
      v12 = *v11;
      if (v6 == *v11)
      {
LABEL_11:
        v3 = v11 == (llvm::ConstantAggregateZero ***)(v8 + 16 * v9);
        goto LABEL_12;
      }
      v13 = 1;
      while (v12 != (llvm::ConstantAggregateZero **)-4096)
      {
        v14 = v10 + v13++;
        v10 = v14 & (v9 - 1);
        v12 = *(llvm::ConstantAggregateZero ***)(v8 + 16 * v10);
        if (v6 == v12)
        {
          v11 = (llvm::ConstantAggregateZero ***)(v8 + 16 * v10);
          goto LABEL_11;
        }
      }
    }
    v11 = (llvm::ConstantAggregateZero ***)(v8 + 16 * v9);
    goto LABEL_11;
  }
LABEL_12:
  **((_BYTE **)v2 + 1) = v3;
  return result;
}

uint64_t sub_1C5C07EA8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_8;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3))
    return a1[4];
  else
    return a1[3] + 32 * *((unsigned int *)v5 + 2);
}

void sub_1C5C07F30()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5C07F44(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E8197490;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C5C07F84(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8197490;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C5C07FAC(uint64_t a1, llvm::ConstantAggregateZero ***a2)
{
  llvm::ConstantAggregateZero **v3;
  uint64_t *v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  int v8;

  v3 = sub_1C5C07514(*a2, *(_QWORD *)(a1 + 8));
  v4 = **(uint64_t ***)(a1 + 16);
  result = sub_1C5C07EA8(v4, (uint64_t)v3);
  if (v4[4] == result)
  {
    v6 = 1;
  }
  else
  {
    v6 = *(_DWORD *)(result + 16);
    v3 = *(llvm::ConstantAggregateZero ***)(result + 24);
  }
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_DWORD *)(v7 + 8);
  if (v8 != 2)
  {
    if (!v8)
    {
      *(_DWORD *)(v7 + 8) = v6;
      *(_QWORD *)(v7 + 16) = v3;
      return result;
    }
    if (v6)
    {
      if (v6 != 2)
      {
        if (*(llvm::ConstantAggregateZero ***)(v7 + 16) == v3)
          return result;
        v6 = 2;
      }
      *(_DWORD *)(v7 + 8) = v6;
      *(_QWORD *)(v7 + 16) = 0;
    }
  }
  return result;
}

BOOL sub_1C5C08054(llvm::BasicBlock *a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v4;
  llvm::MemoryDependenceResults *v5;
  uint64_t v7;

  v4 = (uint64_t **)a1;
  v7 = a2;
  if (!llvm::BasicBlock::getUniquePredecessor(a1))
    v4 = (uint64_t **)sub_1C5EBE3AC(v4, &v7, 1, "", 0, a3, 0, 0, 0);
  return llvm::FoldSingleEntryPHINodes((llvm *)v4, 0, v5);
}

void sub_1C5C080C4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  llvm::PointerType *v9;
  uint64_t v10;
  uint64_t **inserted;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t ***v23;
  uint64_t **v24;
  uint64_t v25;
  uint64_t *v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  unsigned int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *i;
  uint64_t *v41;
  unsigned int v42;
  uint64_t v43;
  _QWORD *v45;
  unsigned int v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  llvm::ValueSymbolTable *v56;
  uint64_t v57;
  llvm::ValueSymbolTable *v58;
  uint64_t v59;
  llvm::ValueSymbolTable *v60;
  uint64_t *v61;
  uint64_t v62;
  _BYTE v63[32];
  __int16 v64;

  if (a3)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) + 40);
    v9 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(**(_QWORD **)v8 + 1576), 0, 0, 1);
    inserted = (uint64_t **)llvm::Module::getOrInsertFunction(v8, "__tmp_use", 9uLL, v9, 0);
    v12 = v10;
    if (*(_BYTE *)(a1 + 16) == 84)
    {
      v64 = 257;
      v13 = *(uint64_t **)(a1 + 32);
      v14 = (a3 + 1);
      v15 = operator new(32 * v14 + 80);
      v16 = &v15[4 * v14];
      *((_DWORD *)v16 + 5) = *((_DWORD *)v16 + 5) & 0x38000000 | v14 & 0x7FFFFFF;
      if ((_DWORD)a3 == -1)
      {
        v17 = 0;
      }
      else
      {
        do
        {
          *v15 = 0;
          v15[1] = 0;
          v15[2] = 0;
          v15[3] = v16;
          v15 += 4;
        }
        while (v15 != v16);
        v17 = *((_DWORD *)v16 + 5) & 0xC0000000;
      }
      *v16 = *inserted[2];
      v16[1] = 0;
      *((_BYTE *)v16 + 16) = 84;
      *((_BYTE *)v16 + 17) = 0;
      *((_WORD *)v16 + 9) = 0;
      *((_DWORD *)v16 + 5) = v17 | v14 & 0x7FFFFFF;
      *(_OWORD *)(v16 + 3) = 0u;
      v22 = v16 + 3;
      *(_OWORD *)(v16 + 5) = 0u;
      *((_DWORD *)v16 + 14) = 0;
      if (v13)
      {
        v49 = v13[2];
        v16[5] = v49;
        *(_WORD *)(v49 + 18) &= ~0x8000u;
        if ((*((_BYTE *)v16 + 23) & 0x10) != 0)
        {
          v55 = *(_QWORD *)(v49 + 56);
          if (v55)
          {
            v56 = *(llvm::ValueSymbolTable **)(v55 + 104);
            if (v56)
              llvm::ValueSymbolTable::reinsertValue(v56, (llvm::Value *)v16);
          }
        }
        v50 = *v13;
        v16[3] = *v13;
        v16[4] = v13;
        *(_QWORD *)(v50 + 8) = v22;
        *v13 = (uint64_t)v22;
      }
      v16[8] = 0;
      v23 = (uint64_t ***)v16;
      v24 = inserted;
      v25 = v12;
      v26 = a2;
    }
    else
    {
      v64 = 257;
      v18 = *(_QWORD *)(a1 - 96);
      v19 = (uint64_t *)(v18 + 40);
      v20 = *(uint64_t **)(v18 + 48);
      v61 = a2;
      v62 = v10;
      if (v20 != v19)
      {
        while (1)
        {
          v21 = v20 - 3;
          if (!v20)
            v21 = 0;
          if (*((_BYTE *)v21 + 16) != 83)
            break;
          v20 = (uint64_t *)v20[1];
          if (v20 == v19)
            goto LABEL_21;
        }
        v27 = *((unsigned __int8 *)v20 - 8) - 38;
        v28 = v27 > 0x38;
        v29 = (1 << v27) & 0x100060000000001;
        if (v28 || v29 == 0)
          v19 = v20;
        else
          v19 = (uint64_t *)v20[1];
      }
LABEL_21:
      v31 = (a3 + 1);
      v32 = operator new(32 * v31 + 80);
      v33 = &v32[4 * v31];
      v34 = v31 & 0x7FFFFFF;
      *((_DWORD *)v33 + 5) = *((_DWORD *)v33 + 5) & 0x38000000 | v31 & 0x7FFFFFF;
      if ((_DWORD)a3 == -1)
      {
        v35 = 0;
      }
      else
      {
        do
        {
          *v32 = 0;
          v32[1] = 0;
          v32[2] = 0;
          v32[3] = v33;
          v32 += 4;
        }
        while (v32 != v33);
        v35 = *((_DWORD *)v33 + 5) & 0xC0000000;
      }
      *v33 = *inserted[2];
      v33[1] = 0;
      *((_BYTE *)v33 + 16) = 84;
      *((_BYTE *)v33 + 17) = 0;
      *((_WORD *)v33 + 9) = 0;
      *((_DWORD *)v33 + 5) = v35 | v34;
      *(_OWORD *)(v33 + 3) = 0u;
      v36 = v33 + 3;
      *(_OWORD *)(v33 + 5) = 0u;
      *((_DWORD *)v33 + 14) = 0;
      if (v19)
      {
        v51 = v19[2];
        v33[5] = v51;
        *(_WORD *)(v51 + 18) &= ~0x8000u;
        if ((*((_BYTE *)v33 + 23) & 0x10) != 0)
        {
          v57 = *(_QWORD *)(v51 + 56);
          if (v57)
          {
            v58 = *(llvm::ValueSymbolTable **)(v57 + 104);
            if (v58)
              llvm::ValueSymbolTable::reinsertValue(v58, (llvm::Value *)v33);
          }
        }
        v52 = *v19;
        v33[3] = *v19;
        v33[4] = v19;
        *(_QWORD *)(v52 + 8) = v36;
        *v19 = (uint64_t)v36;
      }
      v33[8] = 0;
      llvm::CallInst::init((uint64_t ***)v33, inserted, v62, v61, a3, 0, 0, (uint64_t)v63);
      v37 = *(unsigned int *)(a4 + 8);
      if (v37 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v37 + 1, 8);
        LODWORD(v37) = *(_DWORD *)(a4 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v37) = v33;
      ++*(_DWORD *)(a4 + 8);
      v64 = 257;
      v38 = *(_QWORD *)(a1 - 64);
      v39 = (uint64_t *)(v38 + 40);
      for (i = *(uint64_t **)(v38 + 48); i != v39; i = (uint64_t *)i[1])
      {
        v41 = i - 3;
        if (!i)
          v41 = 0;
        if (*((_BYTE *)v41 + 16) != 83)
        {
          v42 = *((unsigned __int8 *)i - 8) - 38;
          v28 = v42 > 0x38;
          v43 = (1 << v42) & 0x100060000000001;
          if (v28 || v43 == 0)
            v39 = i;
          else
            v39 = (uint64_t *)i[1];
          break;
        }
      }
      v45 = operator new(32 * (a3 + 1) + 80);
      v16 = &v45[4 * v31];
      *((_DWORD *)v16 + 5) = *((_DWORD *)v16 + 5) & 0x38000000 | v34;
      if ((_DWORD)a3 == -1)
      {
        v46 = 0;
      }
      else
      {
        do
        {
          *v45 = 0;
          v45[1] = 0;
          v45[2] = 0;
          v45[3] = v16;
          v45 += 4;
        }
        while (v45 != v16);
        v46 = *((_DWORD *)v16 + 5) & 0xC0000000;
      }
      *v16 = *inserted[2];
      v16[1] = 0;
      *((_BYTE *)v16 + 16) = 84;
      *((_BYTE *)v16 + 17) = 0;
      *((_WORD *)v16 + 9) = 0;
      *((_DWORD *)v16 + 5) = v46 | v34;
      *(_OWORD *)(v16 + 3) = 0u;
      v47 = v16 + 3;
      *(_OWORD *)(v16 + 5) = 0u;
      *((_DWORD *)v16 + 14) = 0;
      if (v39)
      {
        v53 = v39[2];
        v16[5] = v53;
        *(_WORD *)(v53 + 18) &= ~0x8000u;
        if ((*((_BYTE *)v16 + 23) & 0x10) != 0)
        {
          v59 = *(_QWORD *)(v53 + 56);
          if (v59)
          {
            v60 = *(llvm::ValueSymbolTable **)(v59 + 104);
            if (v60)
              llvm::ValueSymbolTable::reinsertValue(v60, (llvm::Value *)v16);
          }
        }
        v54 = *v39;
        v16[3] = *v39;
        v16[4] = v39;
        *(_QWORD *)(v54 + 8) = v47;
        *v39 = (uint64_t)v47;
      }
      v16[8] = 0;
      v23 = (uint64_t ***)v16;
      v24 = inserted;
      v25 = v62;
      v26 = v61;
    }
    llvm::CallInst::init(v23, v24, v25, v26, a3, 0, 0, (uint64_t)v63);
    v48 = *(unsigned int *)(a4 + 8);
    if (v48 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v48 + 1, 8);
      LODWORD(v48) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v48) = v16;
    ++*(_DWORD *)(a4 + 8);
  }
}

uint64_t *sub_1C5C085DC(uint64_t *a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t v5;

  result = (uint64_t *)MEMORY[0x1CAA32FB4](*a1, 8);
  v5 = *(unsigned int *)(a2 + 16);
  *((_DWORD *)a1 + 4) = v5;
  if ((_DWORD)v5)
  {
    *a1 = (uint64_t)operator new(16 * v5, (std::align_val_t)8uLL);
    return sub_1C632402C(a1, (_QWORD *)a2);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  return result;
}

void sub_1C5C0863C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int64x2_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  unsigned int j;
  uint64_t Successor;
  uint64_t v27;
  uint64_t k;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t m;
  uint64_t v49;
  unsigned int v50;
  BOOL v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  int64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  const void *v70;
  int64_t v71;
  char *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t n;
  uint64_t v84;
  unsigned int v85;
  BOOL v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92[2];
  int v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  unsigned __int8 *v98;
  uint64_t v99;
  int v100;
  __int128 v101;
  char *v102;
  _QWORD v103[33];
  void *v104;
  uint64_t v105;
  _QWORD v106[34];

  v106[32] = *MEMORY[0x1E0C80C00];
  v103[0] = 1;
  v2 = 1;
  v3 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v103[v2] = v3;
    v2 += 2;
  }
  while (v2 != 33);
  v104 = v106;
  v105 = 0x2000000000;
  v4 = *(_QWORD *)(a1 + 80);
  v88 = a1 + 72;
  if (v4 != a1 + 72)
  {
    v5 = a2 + 144;
    v6 = a2 + 96;
    v89 = a2 + 144;
    v90 = a2 + 48;
    do
    {
      if (v4)
        v7 = (_QWORD *)(v4 - 24);
      else
        v7 = 0;
      v8 = v7 + 5;
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v102 = 0;
      v101 = 0uLL;
      for (i = (_QWORD *)v7[6]; i != v8; i = (_QWORD *)i[1])
      {
        v10 = (uint64_t)(i - 3);
        if (!i)
          v10 = 0;
        if (!*(_QWORD *)v10 || *(_DWORD *)(*(_QWORD *)v10 + 8) != 271)
        {
          if ((*(_DWORD *)(*(_QWORD *)v10 + 8) & 0xFE) != 0x12)
            continue;
          v11 = *(_QWORD *)(*(_QWORD *)v10 + 24);
          if (!v11 || *(_DWORD *)(v11 + 8) != 271)
            continue;
        }
        v92[0] = v10;
        sub_1C4D954B8(&v98, v92);
      }
      v92[0] = (uint64_t)v7;
      v12 = sub_1C6324094(a2, v92);
      MEMORY[0x1CAA32FB4](*(_QWORD *)v12, 8);
      v13 = 0;
      *(_QWORD *)v12 = 0;
      *(_QWORD *)(v12 + 8) = 0;
      *(_DWORD *)(v12 + 16) = 0;
      *(_QWORD *)v12 = v98;
      *(_QWORD *)(v12 + 8) = v99;
      v98 = 0;
      v99 = 0;
      *(_DWORD *)(v12 + 16) = v100;
      v100 = 0;
      v14 = *(void **)(v12 + 24);
      if (v14)
      {
        *(_QWORD *)(v12 + 32) = v14;
        operator delete(v14);
        *(_QWORD *)(v12 + 24) = 0;
        *(_QWORD *)(v12 + 32) = 0;
        *(_QWORD *)(v12 + 40) = 0;
        v13 = v98;
      }
      *(_OWORD *)(v12 + 24) = v101;
      *(_QWORD *)(v12 + 40) = v102;
      v101 = 0uLL;
      v102 = 0;
      MEMORY[0x1CAA32FB4](v13, 8);
      v98 = (unsigned __int8 *)v7;
      v15 = sub_1C6324094(v90, (uint64_t *)&v98);
      sub_1C619D588((_DWORD *)v15);
      *(_QWORD *)(v15 + 32) = *(_QWORD *)(v15 + 24);
      v16 = v7[5];
      v98 = (unsigned __int8 *)v7;
      v17 = (_QWORD *)sub_1C6324094(v90, (uint64_t *)&v98);
      sub_1C5C08F58(v16, v7 + 5, v17);
      v98 = (unsigned __int8 *)v7;
      v18 = sub_1C6324094(v5, (uint64_t *)&v98);
      MEMORY[0x1CAA32FB4](*(_QWORD *)v18, 8);
      v19 = *(void **)(v18 + 24);
      *(_QWORD *)v18 = 0;
      *(_QWORD *)(v18 + 8) = 0;
      *(_DWORD *)(v18 + 16) = 0;
      if (v19)
      {
        *(_QWORD *)(v18 + 32) = v19;
        operator delete(v19);
      }
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0;
      *(_QWORD *)(v18 + 40) = 0;
      MEMORY[0x1CAA32FB4](0, 8);
      v92[0] = (uint64_t)v7;
      v20 = sub_1C6324094(v5, v92);
      v21 = (_QWORD *)v7[5];
      if (v21 != v8)
      {
        if (v21)
          v22 = v21 - 3;
        else
          v22 = 0;
        v23 = (_QWORD *)v20;
        if (*((_BYTE *)v22 + 16) != 30)
        {
          v24 = 2;
          switch(*((_BYTE *)v22 + 16))
          {
            case 0x1E:
LABEL_147:
              __break(1u);
              return;
            case 0x1F:
              v24 = (*((_DWORD *)v22 + 5) >> 1) & 0x3FFFFFF;
              goto LABEL_77;
            case 0x20:
            case 0x26:
              v24 = (*((_DWORD *)v22 + 5) & 0x7FFFFFF) - 1;
              goto LABEL_77;
            case 0x21:
              goto LABEL_31;
            case 0x24:
              v24 = *((_WORD *)v22 + 9) & 1;
              goto LABEL_77;
            case 0x25:
              v24 = 1;
              goto LABEL_31;
            case 0x27:
              v24 = *((_DWORD *)v22 + 20) + 1;
LABEL_77:
              if (!v24)
                goto LABEL_55;
              goto LABEL_31;
            default:
              goto LABEL_55;
          }
        }
        if ((*((_DWORD *)v22 + 5) & 0x7FFFFFF) == 3)
          v24 = 2;
        else
          v24 = 1;
LABEL_31:
        for (j = 0; j != v24; ++j)
        {
          Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v22, j);
          v27 = Successor + 40;
          for (k = *(_QWORD *)(Successor + 48); k != v27; k = *(_QWORD *)(k + 8))
          {
            v29 = k - 24;
            if (!k || *(_BYTE *)(k - 8) != 83)
              break;
            v98 = 0;
            v30 = *(_DWORD *)(k - 4);
            v31 = v30 & 0x7FFFFFF;
            if ((v30 & 0x7FFFFFF) != 0)
            {
              v32 = 0;
              while (1)
              {
                v33 = v29 - 32 * v31;
                if ((v30 & 0x40000000) != 0)
                  v33 = *(_QWORD *)(k - 32);
                if (*(_QWORD **)(v33 + 32 * *(unsigned int *)(k + 36) + 8 * v32) == v7)
                  break;
                if (v31 == ++v32)
                  goto LABEL_42;
              }
            }
            else
            {
LABEL_42:
              LODWORD(v32) = -1;
            }
            if ((v30 & 0x40000000) != 0)
              v34 = *(_QWORD *)(k - 32);
            else
              v34 = v29 - 32 * v31;
            v35 = *(unsigned __int8 **)(v34 + 32 * v32);
            v98 = v35;
            if (!*(_QWORD *)v35 || *(_DWORD *)(*(_QWORD *)v35 + 8) != 271)
            {
              if ((*(_DWORD *)(*(_QWORD *)v35 + 8) & 0xFE) != 0x12)
                continue;
              v36 = *(_QWORD *)(*(_QWORD *)v35 + 24);
              if (!v36 || *(_DWORD *)(v36 + 8) != 271)
                continue;
            }
            if (v35[16] >= 0x15u)
              sub_1C4D954B8(v23, &v98);
          }
        }
      }
LABEL_55:
      v98 = (unsigned __int8 *)v7;
      v37 = sub_1C6324094(v90, (uint64_t *)&v98);
      v92[0] = (uint64_t)v7;
      v38 = sub_1C6324094(v6, v92);
      sub_1C629C76C(v38, v37);
      v98 = (unsigned __int8 *)v7;
      v39 = (_QWORD *)sub_1C6324094(v6, (uint64_t *)&v98);
      v92[0] = (uint64_t)v7;
      v5 = v89;
      v40 = sub_1C6324094(v89, v92);
      v42 = *(_QWORD **)(v40 + 24);
      v41 = *(_QWORD **)(v40 + 32);
      while (v42 != v41)
        sub_1C4D954B8(v39, v42++);
      v98 = (unsigned __int8 *)v7;
      v43 = sub_1C6324094(v6, (uint64_t *)&v98);
      v92[0] = (uint64_t)v7;
      v44 = sub_1C6324094(a2, v92);
      v46 = *(_QWORD **)(v44 + 24);
      v45 = *(_QWORD **)(v44 + 32);
      while (v46 != v45)
        sub_1C6324178(v43, v46++);
      v98 = (unsigned __int8 *)v7;
      v47 = sub_1C6324094(v6, (uint64_t *)&v98);
      if (*(_QWORD *)(v47 + 24) != *(_QWORD *)(v47 + 32))
      {
        for (m = v7[1]; m; m = *(_QWORD *)(m + 8))
        {
          v49 = *(_QWORD *)(m + 24);
          v50 = *(unsigned __int8 *)(v49 + 16);
          if (v49)
            v51 = v50 >= 0x1C;
          else
            v51 = 0;
          if (v51 && v50 - 29 < 0xB)
            break;
        }
        sub_1C5C0905C(v103, m);
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != v88);
    v53 = v105;
    if ((_DWORD)v105)
    {
      while (1)
      {
        v54 = *((_QWORD *)v104 + v53 - 1);
        v98 = 0;
        if (sub_1C63242E8((uint64_t)v103, v54, &v98))
        {
          *(_QWORD *)v98 = -8192;
          LODWORD(v103[0]) -= 2;
          ++HIDWORD(v103[0]);
        }
        LODWORD(v105) = v105 - 1;
        v97 = v54;
        v55 = sub_1C6324094(v5, &v97);
        v98 = 0;
        v99 = 0;
        v100 = 0;
        sub_1C4DFE328((uint64_t)&v98, v55);
        v101 = 0uLL;
        v102 = 0;
        v57 = *(_BYTE **)(v55 + 24);
        v56 = *(_BYTE **)(v55 + 32);
        v58 = v56 - v57;
        if (v56 == v57)
        {
          v59 = 0;
          v60 = 0;
        }
        else
        {
          if (v58 < 0)
            goto LABEL_146;
          v59 = (char *)operator new(v56 - v57);
          *(_QWORD *)&v101 = v59;
          *((_QWORD *)&v101 + 1) = v59;
          v60 = &v59[8 * (v58 >> 3)];
          v102 = v60;
          memmove(v59, v57, v58);
          *((_QWORD *)&v101 + 1) = v60;
        }
        v61 = *(_QWORD *)(v54 + 40);
        if (v61 == v54 + 40)
          goto LABEL_104;
        if (v61)
          v62 = v61 - 24;
        else
          v62 = 0;
        if (*(_BYTE *)(v62 + 16) != 30)
        {
          v63 = 2;
          switch(*(_BYTE *)(v62 + 16))
          {
            case 0x1E:
              goto LABEL_147;
            case 0x1F:
              v63 = (*(_DWORD *)(v62 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_110;
            case 0x20:
            case 0x26:
              v63 = (*(_DWORD *)(v62 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_110;
            case 0x21:
              goto LABEL_98;
            case 0x24:
              v63 = *(_WORD *)(v62 + 18) & 1;
              goto LABEL_110;
            case 0x25:
              v63 = 1;
              goto LABEL_98;
            case 0x27:
              v63 = *(_DWORD *)(v62 + 80) + 1;
LABEL_110:
              if (!v63)
                goto LABEL_104;
              goto LABEL_98;
            default:
              goto LABEL_104;
          }
        }
        v63 = (*(_DWORD *)(v62 + 20) & 0x7FFFFFF) == 3 ? 2 : 1;
LABEL_98:
        v64 = 0;
        v65 = v60 - v59;
        do
        {
          v92[0] = llvm::Instruction::getSuccessor((llvm::Instruction *)v62, v64);
          v66 = sub_1C6324094(v6, v92);
          v67 = *(_QWORD **)(v66 + 24);
          v68 = *(_QWORD **)(v66 + 32);
          while (v67 != v68)
            sub_1C4D954B8(&v98, v67++);
          ++v64;
        }
        while (v63 != v64);
        v59 = (char *)v101;
        if (v65 == *((_QWORD *)&v101 + 1) - (_QWORD)v101)
          goto LABEL_104;
        v69 = sub_1C6324094(v89, &v97);
        sub_1C629C76C(v69, (uint64_t)&v98);
        v92[0] = 0;
        v92[1] = 0;
        v93 = 0;
        sub_1C4DFE328((uint64_t)v92, (uint64_t)&v98);
        v94 = 0;
        v95 = 0;
        v96 = 0;
        v70 = (const void *)v101;
        v71 = *((_QWORD *)&v101 + 1) - v101;
        if (*((_QWORD *)&v101 + 1) != (_QWORD)v101)
        {
          if (v71 < 0)
LABEL_146:
            abort();
          v94 = (char *)operator new(*((_QWORD *)&v101 + 1) - v101);
          v95 = v94;
          v72 = &v94[8 * (v71 >> 3)];
          v96 = v72;
          memmove(v94, v70, v71);
          v95 = v72;
        }
        v73 = sub_1C6324094(v90, &v97);
        v75 = *(_QWORD **)(v73 + 24);
        v74 = *(_QWORD **)(v73 + 32);
        while (v75 != v74)
          sub_1C4D954B8(v92, v75++);
        v76 = sub_1C6324094(a2, &v97);
        v78 = *(_QWORD **)(v76 + 24);
        v77 = *(_QWORD **)(v76 + 32);
        while (v78 != v77)
          sub_1C6324178((uint64_t)v92, v78++);
        v79 = sub_1C6324094(v6, &v97);
        v80 = *(_QWORD *)(v79 + 32) - *(_QWORD *)(v79 + 24);
        v81 = v94;
        if (v80 != v95 - v94)
          break;
        if (v94)
          goto LABEL_123;
LABEL_124:
        MEMORY[0x1CAA32FB4](v92[0], 8);
        v59 = (char *)v101;
LABEL_104:
        if (v59)
        {
          *((_QWORD *)&v101 + 1) = v59;
          operator delete(v59);
        }
        MEMORY[0x1CAA32FB4](v98, 8);
        v53 = v105;
        v5 = v89;
        if (!(_DWORD)v105)
          goto LABEL_141;
      }
      v82 = sub_1C6324094(v6, &v97);
      sub_1C629C76C(v82, (uint64_t)v92);
      for (n = *(_QWORD *)(v54 + 8); n; n = *(_QWORD *)(n + 8))
      {
        v84 = *(_QWORD *)(n + 24);
        v85 = *(unsigned __int8 *)(v84 + 16);
        if (v84)
          v86 = v85 >= 0x1C;
        else
          v86 = 0;
        if (v86 && v85 - 29 < 0xB)
          break;
      }
      sub_1C5C0905C(v103, n);
      v81 = v94;
      if (!v94)
        goto LABEL_124;
LABEL_123:
      v95 = v81;
      operator delete(v81);
      goto LABEL_124;
    }
  }
LABEL_141:
  if (v104 != v106)
    free(v104);
  if ((v103[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v103[1], 8);
}

uint64_t sub_1C5C08F58(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  unsigned __int8 **v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  _QWORD v15[9];

  if ((_QWORD *)result != a2)
  {
    v15[7] = v3;
    v15[8] = v4;
    v7 = (_QWORD *)result;
    do
    {
      if (v7)
        v8 = v7 - 3;
      else
        v8 = 0;
      v15[0] = v8;
      result = sub_1C6324178((uint64_t)a3, v15);
      if (*((_BYTE *)v8 + 16) != 83)
      {
        v9 = *((_DWORD *)v8 + 5);
        if ((v9 & 0x40000000) != 0)
        {
          v11 = (unsigned __int8 **)*(v8 - 1);
          v10 = v9 & 0x7FFFFFF;
          if (v10)
          {
LABEL_11:
            v12 = 32 * v10;
            do
            {
              v15[0] = 0;
              v13 = *v11;
              v15[0] = v13;
              if ((*(_QWORD *)v13 && *(_DWORD *)(*(_QWORD *)v13 + 8) == 271
                 || (*(_DWORD *)(*(_QWORD *)v13 + 8) & 0xFE) == 0x12
                 && (v14 = *(_QWORD *)(*(_QWORD *)v13 + 24)) != 0
                 && *(_DWORD *)(v14 + 8) == 271)
                && v13[16] >= 0x15u)
              {
                result = sub_1C4D954B8(a3, v15);
              }
              v11 += 4;
              v12 -= 32;
            }
            while (v12);
          }
        }
        else
        {
          v10 = v9 & 0x7FFFFFF;
          v11 = (unsigned __int8 **)&v8[-4 * v10];
          if (v10)
            goto LABEL_11;
        }
      }
      v7 = (_QWORD *)*v7;
    }
    while (v7 != a2);
  }
  return result;
}

void *sub_1C5C0905C(void *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v12;
  _BYTE v13[24];

  if (a2)
  {
    v2 = a2;
    v3 = (uint64_t)result;
    v4 = (uint64_t)result + 264;
    v5 = (uint64_t)result + 280;
    v6 = *(_QWORD *)(a2 + 24);
LABEL_3:
    v12 = *(_QWORD *)(v6 + 40);
    result = sub_1C632422C((uint64_t)v13, v3, &v12);
    if (v13[16])
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 40);
      v8 = *(unsigned int *)(v3 + 272);
      if (v8 >= *(unsigned int *)(v3 + 276))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(v4, v5, v8 + 1, 8);
        v8 = *(unsigned int *)(v3 + 272);
      }
      *(_QWORD *)(*(_QWORD *)(v3 + 264) + 8 * v8) = v7;
      ++*(_DWORD *)(v3 + 272);
    }
    while (1)
    {
      v2 = *(_QWORD *)(v2 + 8);
      if (!v2)
        break;
      v6 = *(_QWORD *)(v2 + 24);
      v9 = *(unsigned __int8 *)(v6 + 16);
      if (v6)
        v10 = v9 >= 0x1C;
      else
        v10 = 0;
      if (v10 && v9 - 29 < 0xB)
        goto LABEL_3;
    }
  }
  return result;
}

void sub_1C5C09134(void **a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  char *v18;
  void *v19;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *v5 = *a2;
    v6 = v5 + 7;
    sub_1C6182CAC((uint64_t)(v5 + 1), (uint64_t)(a2 + 1));
    goto LABEL_21;
  }
  v7 = 0x6DB6DB6DB6DB6DB7 * (((char *)v5 - (_BYTE *)*a1) >> 3);
  v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) > 0x492492492492492)
    abort();
  v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - (_QWORD)*a1) >> 3);
  if (2 * v9 > v8)
    v8 = 2 * v9;
  if (v9 >= 0x249249249249249)
    v10 = 0x492492492492492;
  else
    v10 = v8;
  if (v10)
  {
    if (v10 > 0x492492492492492)
      sub_1C4764EE4();
    v11 = (char *)operator new(56 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[56 * v7];
  v13 = &v11[56 * v10];
  *(_QWORD *)v12 = *a2;
  v6 = v12 + 56;
  sub_1C6182CAC((uint64_t)(v12 + 8), (uint64_t)(a2 + 1));
  v15 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v12;
    a1[1] = v6;
    a1[2] = v13;
    if (!v14)
      goto LABEL_21;
    goto LABEL_20;
  }
  do
  {
    v16 = *((_QWORD *)v14 - 7);
    v14 -= 56;
    *((_QWORD *)v12 - 7) = v16;
    v12 -= 56;
    v17 = sub_1C6182CAC((uint64_t)(v12 + 8), (uint64_t)(v14 + 8));
  }
  while (v14 != v15);
  v14 = (char *)*a1;
  v18 = (char *)a1[1];
  *a1 = v12;
  a1[1] = v6;
  for (a1[2] = v13; v18 != v14; v18 -= 56)
  {
    v19 = (void *)*((_QWORD *)v18 - 3);
    if (v19)
    {
      *((_QWORD *)v18 - 2) = v19;
      operator delete(v19);
    }
    MEMORY[0x1CAA32FB4](*((_QWORD *)v18 - 6), 8, v17);
  }
  if (v14)
LABEL_20:
    operator delete(v14);
LABEL_21:
  a1[1] = v6;
}

uint64_t sub_1C5C092CC(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[33];

  v14[32] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x21)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x20)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C6324450(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 264; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C6324450(a1, v14, v8);
}

uint64_t sub_1C5C09440(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD v25[2];
  int v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _QWORD v31[2];
  char v32;

  v5 = *(_QWORD *)(a1 + 40);
  v30 = v5;
  v6 = sub_1C6324094(a2 + 144, &v30);
  v25[0] = 0;
  v25[1] = 0;
  v26 = 0;
  sub_1C4DFE328((uint64_t)v25, v6);
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v8 = *(_BYTE **)(v6 + 24);
  v7 = *(_BYTE **)(v6 + 32);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0)
LABEL_29:
      abort();
    v27 = (char *)operator new(v7 - v8);
    v28 = v27;
    v10 = &v27[8 * (v9 >> 3)];
    v29 = v10;
    memmove(v27, v8, v9);
    v28 = v10;
  }
  sub_1C5C08F58(*(_QWORD *)(v5 + 40), *(_QWORD **)(a1 + 24), v25);
  v31[0] = a1;
  sub_1C6324178((uint64_t)v25, v31);
  v11 = v27;
  v12 = v28;
  if (v27 != v28)
  {
    do
    {
      sub_1C4D95920((uint64_t)a3, v11, (uint64_t)v31);
      if (v32)
      {
        v14 = (_QWORD *)a3[4];
        v13 = a3[5];
        if ((unint64_t)v14 >= v13)
        {
          v16 = (_QWORD *)a3[3];
          v17 = v14 - v16;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 61)
            goto LABEL_29;
          v19 = v13 - (_QWORD)v16;
          if (v19 >> 2 > v18)
            v18 = v19 >> 2;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
            v20 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            if (v20 >> 61)
              sub_1C4764EE4();
            v21 = (char *)operator new(8 * v20);
          }
          else
          {
            v21 = 0;
          }
          v22 = &v21[8 * v17];
          *(_QWORD *)v22 = *(_QWORD *)v11;
          v15 = v22 + 8;
          if (v14 != v16)
          {
            do
            {
              v23 = *--v14;
              *((_QWORD *)v22 - 1) = v23;
              v22 -= 8;
            }
            while (v14 != v16);
            v14 = (_QWORD *)a3[3];
          }
          a3[3] = v22;
          a3[4] = v15;
          a3[5] = &v21[8 * v20];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *v14 = *(_QWORD *)v11;
          v15 = v14 + 1;
        }
        a3[4] = v15;
      }
      v11 += 8;
    }
    while (v11 != v12);
    v11 = v27;
  }
  if (v11)
  {
    v28 = v11;
    operator delete(v11);
  }
  return MEMORY[0x1CAA32FB4](v25[0], 8);
}

void sub_1C5C09628(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 3);
        if (v6)
        {
          *((_QWORD *)v4 - 2) = v6;
          operator delete(v6);
        }
        MEMORY[0x1CAA32FB4](*((_QWORD *)v4 - 6), 8);
        v4 -= 56;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL sub_1C5C096BC(uint64_t *a1, _QWORD *a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v7;

  v7 = (_QWORD *)*a2;
  v4 = *(unsigned __int8 *)(*(_QWORD *)sub_1C62A8A44(*a1, (uint64_t *)&v7) + 16);
  if (v4 <= 0x14)
  {
    v5 = a1[1];
    v7 = 0;
    if (sub_1C4D959A4((uint64_t *)v5, a2, &v7))
    {
      *v7 = -8192;
      *(int32x2_t *)(v5 + 8) = vadd_s32(*(int32x2_t *)(v5 + 8), (int32x2_t)0x1FFFFFFFFLL);
    }
  }
  return v4 < 0x15;
}

uint64_t sub_1C5C09754(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[17];

  v14[16] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C6324768(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C6324768(a1, v14, v9);
}

unsigned __int8 *sub_1C5C098CC(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v4;
  int v5;
  unsigned __int8 *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  int v28;
  _DWORD *v29;
  int v30;
  _DWORD v31[8];
  __int16 v32;

  v4 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  if ((v4 & 0xFE) == 0x12)
    v4 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
  v5 = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(*(llvm::DataLayout **)a1, v4 >> 8) + 4);
  v6 = *(unsigned __int8 **)(sub_1C63248EC(*(_QWORD *)(a1 + 8), (uint64_t)a2) + 8);
  v7 = *(uint64_t **)(a1 + 16);
  v8 = *(_QWORD **)(a1 + 24);
  v31[0] = v5;
  if (v5 <= 63)
  {
    if (v5 <= 31)
    {
      switch(v5)
      {
        case 16:
          v16 = *v8 + 1936;
          v32 = 257;
          v10 = sub_1C4773E38(v7, 47, v6, v16, (uint64_t)v31);
          v11 = *(uint64_t **)(a1 + 16);
          v13 = (_QWORD *)(**(_QWORD **)(a1 + 24) + 1936);
          goto LABEL_11;
        case 8:
          v21 = *v8 + 1912;
          v32 = 257;
          v10 = sub_1C4773E38(v7, 47, v6, v21, (uint64_t)v31);
          v11 = *(uint64_t **)(a1 + 16);
          v13 = (_QWORD *)(**(_QWORD **)(a1 + 24) + 1912);
          goto LABEL_11;
        case 1:
          v22 = *v8 + 1888;
          v32 = 257;
          v10 = sub_1C4773E38(v7, 47, v6, v22, (uint64_t)v31);
          v11 = *(uint64_t **)(a1 + 16);
          v13 = (_QWORD *)(**(_QWORD **)(a1 + 24) + 1888);
          goto LABEL_11;
      }
    }
    else if (v5 == 32)
    {
      v14 = *v8 + 1960;
      v32 = 257;
      v10 = sub_1C4773E38(v7, 47, v6, v14, (uint64_t)v31);
      v11 = *(uint64_t **)(a1 + 16);
      v15 = *(_QWORD **)(a1 + 24);
      v31[0] = 32;
      v13 = (_QWORD *)(*v15 + 1960);
      goto LABEL_11;
    }
  }
  else
  {
    if (v5 == 64)
    {
      v9 = *v8 + 1984;
      v32 = 257;
      v10 = sub_1C4773E38(v7, 47, v6, v9, (uint64_t)v31);
      v11 = *(uint64_t **)(a1 + 16);
      v12 = *(_QWORD **)(a1 + 24);
      v31[0] = 64;
      v13 = (_QWORD *)(*v12 + 1984);
      goto LABEL_11;
    }
    if (v5 == 128)
    {
      v20 = *v8 + 2008;
      v32 = 257;
      v10 = sub_1C4773E38(v7, 47, v6, v20, (uint64_t)v31);
      v11 = *(uint64_t **)(a1 + 16);
      v13 = (_QWORD *)(**(_QWORD **)(a1 + 24) + 2008);
      goto LABEL_11;
    }
  }
  v23 = sub_1C5270984(*v8 + 2168, v31);
  v24 = (_QWORD *)*((_QWORD *)v23 + 1);
  if (!v24)
  {
    v29 = v23;
    v24 = (_QWORD *)sub_1C484358C(*v8 + 2040, 24, 3);
    v30 = v31[0];
    *v24 = v8;
    v24[2] = 0;
    v24[1] = (v30 << 8) | 0xDu;
    *((_QWORD *)v29 + 1) = v24;
  }
  v32 = 257;
  v10 = sub_1C4773E38(v7, 47, v6, (uint64_t)v24, (uint64_t)v31);
  v11 = *(uint64_t **)(a1 + 16);
  v25 = *(_QWORD **)(a1 + 24);
  v31[0] = v5;
  v26 = sub_1C5270984(*v25 + 2168, v31);
  v13 = (_QWORD *)*((_QWORD *)v26 + 1);
  if (!v13)
  {
    v27 = v26;
    v13 = (_QWORD *)sub_1C484358C(*v25 + 2040, 24, 3);
    v28 = v31[0];
    *v13 = v25;
    v13[2] = 0;
    v13[1] = (v28 << 8) | 0xDu;
    *((_QWORD *)v27 + 1) = v13;
  }
LABEL_11:
  v32 = 257;
  v17 = sub_1C4773E38(v11, 47, a2, (uint64_t)v13, (uint64_t)v31);
  v18 = *(_QWORD *)(a1 + 16);
  v32 = 257;
  sub_1C47733F8(v18, (uint64_t)v17, (uint64_t)v10, (uint64_t)v31, 0, 0);
  return v6;
}

uint64_t sub_1C5C09C38(llvm::LLVMContext *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  llvm::LLVMContext *v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[9];

  v3 = a3;
  v20[8] = *MEMORY[0x1E0C80C00];
  v16 = a3;
  if (a2)
  {
    if (*(_DWORD *)(a2 + 8))
    {
      v6 = *(_QWORD *)(a2 + 40);
      v17 = a1;
      v18 = v20;
      v19 = 0x800000000;
      if (v6)
      {
        v7 = (char *)(v6 + 48);
        v8 = (char *)(v6 + 48 + 8 * *(unsigned int *)(v6 + 8));
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v17 = a1;
      v18 = v20;
      v19 = 0x800000000;
    }
    sub_1C53321EC((unsigned int *)&v18, (uint64_t)v20, v7, v8);
    for (i = 0; i != 8; ++i)
      llvm::AttrBuilder::removeAttribute((uint64_t)&v17, dword_1C866A8FC[i]);
    if (*(_DWORD *)(a2 + 8))
    {
      v10 = *(_QWORD *)(a2 + 40);
      if (v10)
      {
        v11 = *(unsigned int *)(v10 + 8);
        if ((_DWORD)v11)
        {
          v12 = (uint64_t *)(v10 + 48);
          v13 = 8 * v11;
          do
          {
            v14 = *v12;
            if (llvm::isStatepointDirectiveAttr(*v12))
              sub_1C6324960((uint64_t)&v17, v14);
            ++v12;
            v13 -= 8;
          }
          while (v13);
        }
      }
    }
    v3 = llvm::AttributeList::addAttributesAtIndex((llvm::AttributeList *)&v16, a1, -1, (const llvm::AttrBuilder *)&v17);
    if (v18 != v20)
      free(v18);
  }
  return v3;
}

uint64_t sub_1C5C09DB8(uint64_t result, unint64_t a2, const llvm::APInt *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  llvm::ConstantInt *v16;
  unsigned int v17;
  unint64_t v18;
  const llvm::APInt *v19;
  llvm::ValueHandleBase *v20;
  uint64_t v21;
  llvm::ConstantInt *v22;
  unsigned int v23;
  unint64_t v24;
  llvm::ValueHandleBase *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  llvm::FixedVectorType *v29;
  uint64_t Declaration;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t **v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  char *v38;
  uint64_t v39;
  uint64_t *v40;
  void *__p[2];
  char v43;
  uint64_t v44;
  _QWORD v45[2];
  int v46;
  void **v47;
  unsigned int v48;
  __int16 v49;
  uint64_t v50[5];

  v50[3] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v9 = (char *)result;
    v10 = 0;
    v11 = 0;
    v38 = (char *)(result + 8 * a2);
    v39 = 8 * a2;
    v40 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a5 + 40) + 56) + 40);
    v45[0] = 0;
    v45[1] = 0;
    v46 = 0;
    while (1)
    {
      v12 = v39;
      v13 = v9;
      while (*(_QWORD *)v13 != *((_QWORD *)a3 + v10))
      {
        v13 += 8;
        v12 -= 8;
        if (!v12)
        {
          v13 = v38;
          break;
        }
      }
      v14 = **(_QWORD **)(a6 + 64);
      v15 = ((unint64_t)(v13 - v9) >> 3);
      v16 = *(llvm::ConstantInt **)(v14 + 1960);
      v17 = *(_DWORD *)(v14 + 1968);
      v48 = v17 >> 8;
      if (v17 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v47, v15, 0);
      }
      else
      {
        if (v17 <= 0xFF)
          v18 = 0;
        else
          v18 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v17);
        v47 = (void **)(v18 & v15);
      }
      v20 = llvm::ConstantInt::get(v16, (llvm::LLVMContext *)&v47, a3);
      if (v48 >= 0x41 && v47)
        MEMORY[0x1CAA32F9C](v47, 0x1000C8000313F17);
      v21 = **(_QWORD **)(a6 + 64);
      v22 = *(llvm::ConstantInt **)(v21 + 1960);
      v23 = *(_DWORD *)(v21 + 1968);
      v48 = v23 >> 8;
      if (v23 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v47, v10, 0);
      }
      else
      {
        if (v23 <= 0xFF)
          v24 = 0;
        else
          v24 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v23);
        v47 = (void **)(v24 & v10);
      }
      v25 = llvm::ConstantInt::get(v22, (llvm::LLVMContext *)&v47, v19);
      if (v48 >= 0x41 && v47)
        MEMORY[0x1CAA32F9C](v47, 0x1000C8000313F17);
      v26 = **(_QWORD **)&v9[8 * v10];
      v44 = v26;
      if (!v46)
        goto LABEL_19;
      v31 = ((v26 >> 4) ^ (v26 >> 9)) & (v46 - 1);
      v32 = *(_QWORD *)(v45[0] + 16 * v31);
      if (v26 != v32)
        break;
LABEL_27:
      v33 = sub_1C6180A54((uint64_t)v45, &v44)[1];
      if (v33)
        v34 = *(uint64_t ***)(v33 + 24);
      else
        v34 = 0;
      v50[0] = a5;
      v50[1] = (uint64_t)v20;
      v50[2] = (uint64_t)v25;
      sub_1C5C073CC(__p, *(uint64_t ****)&v9[8 * v10], (uint64_t)".relocated", 10, "", 0);
      v49 = 260;
      v47 = __p;
      v35 = sub_1C4774778((uint64_t *)a6, v34, v33, v50, 3, (uint64_t)&v47, 0);
      if (v43 < 0)
        operator delete(__p[0]);
      *(_WORD *)(v35 + 18) = *(_WORD *)(v35 + 18) & 0xF003 | 0x24;
      v10 = ++v11;
      if (a2 <= v11)
        return MEMORY[0x1CAA32FB4](v45[0], 8);
    }
    v36 = 1;
    while (v32 != -4096)
    {
      v37 = v31 + v36++;
      v31 = v37 & (v46 - 1);
      v32 = *(_QWORD *)(v45[0] + 16 * v31);
      if (v26 == v32)
        goto LABEL_27;
    }
LABEL_19:
    v27 = *(_DWORD *)(v26 + 8);
    v28 = v26;
    if ((v27 & 0xFE) == 0x12)
    {
      v28 = **(_QWORD **)(v26 + 16);
      v27 = *(_DWORD *)(v28 + 8);
    }
    if ((v27 & 0xFE) == 0x12)
      v27 = *(_DWORD *)(**(_QWORD **)(v28 + 16) + 8);
    v29 = (llvm::FixedVectorType *)llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)*v40 + 1912), (llvm::Type *)(v27 >> 8));
    if ((*(_DWORD *)(v26 + 8) & 0xFE) == 0x12)
      llvm::FixedVectorType::get(v29, (llvm::Type *)*(unsigned int *)(v26 + 32));
    v47 = (void **)v29;
    Declaration = llvm::Intrinsic::getDeclaration(v40, 122, (uint64_t *)&v47, 1);
    sub_1C6180A54((uint64_t)v45, &v44)[1] = Declaration;
    goto LABEL_27;
  }
  return result;
}

void sub_1C5C0A180(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  llvm::GCRelocateInst *v6;
  _BOOL4 v7;
  BOOL v8;
  llvm::Value *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  _DWORD *v15;
  uint64_t v16;
  BOOL v17;
  llvm::Instruction *v18;
  void *__p[2];
  char v20;
  void **v21;
  __int16 v22;
  uint64_t DerivedPtr;
  void *v24[2];
  _QWORD v25[17];

  v25[15] = *MEMORY[0x1E0C80C00];
  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *(llvm::GCRelocateInst **)(v5 + 24);
      v7 = sub_1C4E9AE24((uint64_t)v6);
      if (v6)
        v8 = !v7;
      else
        v8 = 1;
      if (!v8)
      {
        DerivedPtr = 0;
        DerivedPtr = llvm::GCRelocateInst::getDerivedPtr(v6);
        v9 = (llvm::Value *)sub_1C4E58FC4(a3, &DerivedPtr)[1];
        v10 = *((_QWORD *)v6 + 4);
        if (v10)
          v11 = v10 == *((_QWORD *)v6 + 5) + 40;
        else
          v11 = 1;
        if (v11)
          v12 = 0;
        else
          v12 = v10 - 24;
        sub_1C4773D54((uint64_t)v24, v12, 0, 0, 0);
        v13 = *((_QWORD *)v9 + 8);
        sub_1C5C073CC(__p, (uint64_t ***)v6, (uint64_t)".casted", 7, "", 0);
        v22 = 260;
        v21 = __p;
        v14 = sub_1C4773E38((uint64_t *)v24, 49, (unsigned __int8 *)v6, v13, (uint64_t)&v21);
        if (v20 < 0)
          operator delete(__p[0]);
        v15 = operator new(0x80uLL);
        v15[21] = v15[21] & 0x38000000 | 2;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
        *((_QWORD *)v15 + 2) = 0;
        *((_QWORD *)v15 + 3) = v15 + 16;
        *((_QWORD *)v15 + 4) = 0;
        *((_QWORD *)v15 + 5) = 0;
        *((_QWORD *)v15 + 6) = 0;
        *((_QWORD *)v15 + 7) = v15 + 16;
        v16 = *((_QWORD *)v14 + 4);
        if (v16)
          v17 = v16 == *((_QWORD *)v14 + 5) + 40;
        else
          v17 = 1;
        if (v17)
          v18 = 0;
        else
          v18 = (llvm::Instruction *)(v16 - 24);
        llvm::StoreInst::StoreInst((llvm::StoreInst *)(v15 + 16), (llvm::Value *)v14, v9, 0, v18);
        if (v24[0] != v25)
          free(v24[0]);
      }
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != a2);
  }
}

uint64_t sub_1C5C0A350()
{
  int v1;
  int *v2;
  int v3;

  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C617ACEC((uint64_t)&qword_1ED822710[1], "spp-print-liveset", &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED822710[1], &dword_1C475E000);
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C617ACEC((uint64_t)&unk_1ED8227D8, "spp-print-liveset-size", &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8227D8, &dword_1C475E000);
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C617ACEC((uint64_t)&unk_1ED822898, "spp-print-base-pointers", &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED822898, &dword_1C475E000);
  v3 = 1;
  v1 = 6;
  v2 = &v1;
  sub_1C6324A80(&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED822958, &dword_1C475E000);
  v2 = (int *)&byte_1ED822708;
  v3 = 1;
  sub_1C6324B50((_BYTE **)&v2, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4EB22A8, &qword_1ED822A18, &dword_1C475E000);
  v3 = 1;
  LOBYTE(v1) = 1;
  v2 = &v1;
  sub_1C6324C58(&v3, (char **)&v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED822AD8, &dword_1C475E000);
}

_QWORD *llvm::SCCPPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t ResultImpl;
  char v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 40) + 272;
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetLibraryAnalysis::Key, a1);
  v7 = sub_1C5C0A5A8(a1, v5, ResultImpl + 8);
  v8 = a3 + 80;
  if ((v7 & 1) != 0)
  {
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)(a3 + 88) = 0;
    *(_OWORD *)(a3 + 72) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)(a3 + 16) = 2;
    *(_QWORD *)(a3 + 48) = v8;
    *(_QWORD *)(a3 + 56) = v8;
    *(_DWORD *)(a3 + 64) = 2;
    return sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::CFGAnalyses::SetKey);
  }
  else
  {
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)(a3 + 16) = 2;
    *(_DWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 48) = v8;
    *(_QWORD *)(a3 + 56) = v8;
    *(_QWORD *)(a3 + 64) = 2;
    *(_DWORD *)(a3 + 72) = 0;
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
}

uint64_t sub_1C5C0A5A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  void (**v5)(_QWORD *);
  uint64_t v6;
  llvm::BasicBlock *v7;
  uint64_t v8;
  const llvm::Function *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  llvm *v16;
  llvm::SCCPInstVisitor *v17;
  _QWORD *v18;
  llvm::BasicBlock *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  int v26;
  _BYTE v27[256];
  llvm::SCCPInstVisitor *v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v29[0] = &off_1E81974D8;
  v29[1] = a3;
  v30 = v29;
  llvm::SCCPSolver::SCCPSolver((uint64_t *)&v28, a2, v29, **(_QWORD **)a1);
  v4 = v30;
  if (v30 == v29)
  {
    v5 = (void (**)(_QWORD *))(v29[0] + 32);
    v4 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_6;
    v5 = (void (**)(_QWORD *))(*v30 + 40);
  }
  (*v5)(v4);
LABEL_6:
  v6 = *(_QWORD *)(a1 + 80);
  if (v6)
    v7 = (llvm::BasicBlock *)(v6 - 24);
  else
    v7 = 0;
  llvm::SCCPInstVisitor::markBlockExecutable(v28, v7);
  if ((*(_WORD *)(a1 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)a1);
    v10 = *(_QWORD *)(a1 + 88);
    if ((*(_WORD *)(a1 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)a1);
      v11 = *(_QWORD *)(a1 + 88);
      goto LABEL_12;
    }
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 88);
  }
  v11 = v10;
LABEL_12:
  v12 = v11 + 40 * *(_QWORD *)(a1 + 96);
  while (v10 != v12)
  {
    sub_1C5F70CDC((_BOOL8)v28, v10);
    v10 += 40;
  }
  do
    llvm::SCCPInstVisitor::solve(v28, v8, v9);
  while ((llvm::SCCPInstVisitor::resolvedUndefsIn(v28, (llvm::Function *)a1) & 1) != 0);
  v23 = v27;
  v24 = v27;
  v25 = 32;
  v26 = 0;
  v13 = a1 + 72;
  v14 = *(_QWORD *)(a1 + 80);
  if (v14 == a1 + 72)
  {
    LOBYTE(v15) = 0;
  }
  else
  {
    v15 = 0;
    do
    {
      if (v14)
        v16 = (llvm *)(v14 - 24);
      else
        v16 = 0;
      v17 = v28;
      v18 = sub_1C477672C((uint64_t)v28 + 40, (uint64_t)v16);
      v20 = *((_QWORD *)v17 + 6);
      if (v20 == *((_QWORD *)v17 + 5))
        v21 = 60;
      else
        v21 = 56;
      if (v18 == (_QWORD *)(v20 + 8 * *(unsigned int *)((char *)v17 + v21)))
      {
        llvm::removeAllNonTerminatorAndEHPadInstructions(v16, v19);
        v15 = 1;
      }
      else
      {
        v15 |= sub_1C5C0CBD8((uint64_t *)&v28, (uint64_t)v16, &v23);
      }
      v14 = *(_QWORD *)(v14 + 8);
    }
    while (v14 != v13);
    if (v24 != v23)
      free(v24);
  }
  llvm::SCCPSolver::~SCCPSolver((llvm::SCCPSolver *)&v28);
  return v15 & 1;
}

uint64_t sub_1C5C0A7B8(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetLibraryInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Sparse Conditional Constant Propagation";
  *(_QWORD *)(v2 + 8) = 39;
  *(_QWORD *)(v2 + 16) = "sccp";
  *(_QWORD *)(v2 + 24) = 4;
  *(_QWORD *)(v2 + 32) = &unk_1ED822B98;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5C0D0C0;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5C0A84C(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED822B98;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8197520;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED822BA0);
  if (v3 != -1)
  {
    v7[0] = sub_1C5C0A7B8;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED822BA0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t llvm::runIPSCCP(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(llvm::PredicateInfo **__return_ptr, uint64_t, uint64_t);
  void (*v9)(llvm::PredicateInfo **__return_ptr, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  const llvm::Function *v15;
  void (**v16)(void);
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  llvm::Function *v20;
  llvm::PredicateInfo *v21;
  llvm::Function *v22;
  uint64_t v23;
  llvm::BasicBlock *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *i;
  llvm *v29;
  llvm::GlobalVariable *v30;
  uint64_t v31;
  char v32;
  llvm::Function *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  llvm::SCCPInstVisitor *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  char v46;
  uint64_t j;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  void *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t k;
  uint64_t v64;
  llvm::SCCPInstVisitor *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  llvm::MemorySSAUpdater *v72;
  char *v73;
  char *v74;
  uint64_t m;
  llvm *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  llvm::SCCPInstVisitor *v80;
  _QWORD *v81;
  llvm::MemorySSAUpdater *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t n;
  llvm *v89;
  uint64_t v90;
  uint64_t ii;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  int v96;
  int v97;
  int v98;
  char v99;
  int v100;
  int v101;
  llvm::BasicBlock *Successor;
  const llvm::SwitchInst *v103;
  _QWORD *v104;
  unsigned __int8 *v105;
  llvm::SwitchInstProfUpdateWrapper *v106;
  llvm::BasicBlock **v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  llvm::BasicBlock *v111;
  _QWORD *v112;
  int v113;
  char v114;
  unsigned int jj;
  llvm::BasicBlock *v116;
  llvm::BasicBlock *v117;
  uint64_t v118;
  _QWORD *v119;
  llvm::SwitchInstProfUpdateWrapper *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  llvm::SwitchInstProfUpdateWrapper *v125;
  char *v126;
  uint64_t *v127;
  int v128;
  char *v129;
  llvm::BasicBlock *v130;
  uint64_t v131;
  _QWORD *v132;
  int v133;
  _DWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  llvm::BasicBlock **v137;
  uint64_t v138;
  uint64_t kk;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  llvm::SCCPInstVisitor *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  const void **v152;
  const void **v153;
  unsigned int v154;
  void *v155;
  uint64_t v156;
  BOOL v157;
  char v158;
  __int16 v159;
  int v160;
  unsigned int v161;
  void *v162;
  uint64_t v163;
  BOOL v164;
  char v165;
  uint64_t v166;
  uint64_t ***v167;
  unsigned int v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v172;
  const llvm::APInt *v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  int v177;
  unsigned int v178;
  uint64_t ****v179;
  uint64_t ***v180;
  uint64_t ****v181;
  int v182;
  BOOL v183;
  unsigned int v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  llvm::ConstantInt *v188;
  llvm::ValueHandleBase *v189;
  llvm::Value *v190;
  const llvm::APInt *v191;
  llvm::ValueHandleBase *v192;
  llvm::Value *v193;
  llvm::MDNode *Impl;
  uint64_t ****v195;
  uint64_t ***v196;
  llvm::Type *v197;
  void *v198;
  void *v199;
  __int8 *v200;
  uint64_t v201;
  unint64_t *v202;
  uint64_t v203;
  unint64_t *v204;
  llvm::Function *v205;
  unint64_t *v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  llvm::UndefValue *v211;
  llvm::Function **v212;
  llvm::Function **v213;
  llvm::Function *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t mm;
  uint64_t nn;
  uint64_t v219;
  int v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t *v233;
  uint64_t *v234;
  uint64_t *v235;
  uint64_t *v236;
  uint64_t v237;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  llvm::Value *v246;
  int v247;
  unsigned int v248;
  void *v249;
  uint64_t v250;
  unsigned int v251;
  void *v252;
  uint64_t v253;
  BOOL v254;
  int v255;
  _QWORD *v256;
  void *v257;
  _QWORD *v258;
  uint64_t v259;
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  llvm::Function *v264;
  _BYTE *v265;
  int v266;
  char v267;
  void *v268;
  _BYTE *v269;
  uint64_t v270;
  int v271;
  _BYTE v272[53];
  llvm::PredicateInfo *v273[3];
  llvm::SCCPInstVisitor *v274;
  llvm::BasicBlock **v275;
  llvm::BasicBlock **v276;
  uint64_t v277;
  int v278;
  _BYTE v279[64];
  void *v280[2];
  _QWORD **v281;
  _QWORD *v282[37];
  void *v283;
  uint64_t v284;
  void *__s2;
  int64x2_t v286;
  _OWORD v287[3];
  void *v288;
  uint64_t v289;
  _BYTE v290[4024];
  _QWORD v291[3];
  _QWORD *v292;
  llvm::SwitchInstProfUpdateWrapper *v293;
  uint64_t v294;
  unsigned int v295;
  char v296;
  char v297;
  void *v298;
  uint64_t v299;
  _QWORD v300[19];

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v7 = v6;
  v9 = (void (*)(llvm::PredicateInfo **__return_ptr, uint64_t, uint64_t))v8;
  v11 = v10;
  v12 = (uint64_t *)v4;
  v300[16] = *MEMORY[0x1E0C80C00];
  v13 = (_QWORD *)v5[3];
  if (v13)
  {
    if (v13 == v5)
    {
      v292 = v291;
      (*(void (**)(_QWORD *, _QWORD *))(*v5 + 24))(v5, v291);
    }
    else
    {
      v292 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 16))(v13);
    }
  }
  else
  {
    v292 = 0;
  }
  llvm::SCCPSolver::SCCPSolver((uint64_t *)&v274, v11, v291, *v12);
  if (v292 == v291)
  {
    v16 = (void (**)(void))(v291[0] + 32);
    goto LABEL_10;
  }
  if (v292)
  {
    v16 = (void (**)(void))(*v292 + 40);
LABEL_10:
    (*v16)();
  }
  v17 = v12 + 3;
  v18 = (uint64_t *)v12[4];
  if (v18 != v12 + 3)
  {
    do
    {
      if (v18)
        v19 = (uint64_t)(v18 - 7);
      else
        v19 = 0;
      if (v18 && *(_BYTE *)(v19 + 16) == 3)
      {
        if ((*(_DWORD *)(v19 + 20) & 0x7FFFFFF) == 0)
          goto LABEL_28;
      }
      else if (!*(_BYTE *)(v19 + 16) && *(_QWORD *)(v19 + 72) == v19 + 72 && (*(_BYTE *)(v19 + 34) & 0x80) == 0)
      {
        goto LABEL_28;
      }
      v9(v273, v7, v19);
      llvm::SCCPSolver::addAnalysis((uint64_t *)&v274, v19, (uint64_t)v273);
      v21 = v273[0];
      v273[0] = 0;
      if (v21)
      {
        llvm::PredicateInfo::~PredicateInfo(v21);
        MEMORY[0x1CAA32FC0]();
      }
      if (llvm::canTrackReturnsInterprocedurally((llvm *)v19, v20))
        sub_1C5F7BED4((uint64_t)v274, v19);
      if (!llvm::canTrackArgumentsInterprocedurally((llvm *)v19, v22))
      {
        v23 = *(_QWORD *)(v19 + 80);
        if (v23)
          v24 = (llvm::BasicBlock *)(v23 - 24);
        else
          v24 = 0;
        llvm::SCCPInstVisitor::markBlockExecutable(v274, v24);
        if ((*(_WORD *)(v19 + 18) & 1) == 0)
        {
          v25 = *(_QWORD *)(v19 + 88);
          goto LABEL_35;
        }
        llvm::Function::BuildLazyArguments((llvm::Function *)v19);
        v25 = *(_QWORD *)(v19 + 88);
        if ((*(_WORD *)(v19 + 18) & 1) != 0)
        {
          llvm::Function::BuildLazyArguments((llvm::Function *)v19);
          v26 = *(_QWORD *)(v19 + 88);
        }
        else
        {
LABEL_35:
          v26 = v25;
        }
        v27 = v26 + 40 * *(_QWORD *)(v19 + 96);
        while (v25 != v27)
        {
          sub_1C5F70CDC((_BOOL8)v274, v25);
          v25 += 40;
        }
        goto LABEL_28;
      }
      sub_1C4774094((llvm::SCCPInstVisitor *)((char *)v274 + 624), v19);
LABEL_28:
      v18 = (uint64_t *)v18[1];
    }
    while (v18 != v17);
  }
  for (i = (uint64_t *)v12[2]; i != v12 + 1; i = (uint64_t *)i[1])
  {
    if (i)
      v29 = (llvm *)(i - 7);
    else
      v29 = 0;
    llvm::Constant::removeDeadConstantUsers((uint64_t)v29);
    if (llvm::canTrackGlobalVariableInterprocedurally(v29, v30))
      sub_1C5F7BE40(v274, (uint64_t)v29);
  }
  v262 = (uint64_t)(v12 + 1);
  do
  {
    llvm::SCCPInstVisitor::solve(v274, v14, v15);
    v31 = v12[4];
    if ((uint64_t *)v31 == v17)
      goto LABEL_297;
    v32 = 0;
    do
    {
      if (v31)
        v33 = (llvm::Function *)(v31 - 56);
      else
        v33 = 0;
      if (llvm::SCCPInstVisitor::resolvedUndefsIn(v274, v33))
        v32 = 1;
      v31 = *(_QWORD *)(v31 + 8);
    }
    while ((uint64_t *)v31 != v17);
  }
  while ((v32 & 1) != 0);
  v34 = v12[4];
  if ((uint64_t *)v34 == v17)
  {
LABEL_297:
    LOBYTE(v35) = 0;
    goto LABEL_298;
  }
  v35 = 0;
  v265 = v279;
  v261 = v12 + 3;
  do
  {
    if (v34)
      v36 = v34 - 56;
    else
      v36 = 0;
    if (v34 && *(_BYTE *)(v36 + 16) == 3)
    {
      if ((*(_DWORD *)(v36 + 20) & 0x7FFFFFF) == 0)
        goto LABEL_295;
    }
    else if (!*(_BYTE *)(v36 + 16) && *(_QWORD *)(v36 + 72) == v36 + 72 && (*(_BYTE *)(v36 + 34) & 0x80) == 0)
    {
      goto LABEL_295;
    }
    __s2 = &v286.u64[1];
    v286.i64[0] = 0x20000000000;
    v37 = *(_QWORD *)(v36 + 80);
    if (v37)
      v38 = v37 - 24;
    else
      v38 = 0;
    v39 = v274;
    v40 = sub_1C477672C((uint64_t)v274 + 40, v38);
    v41 = *((_QWORD *)v39 + 6);
    if (v41 == *((_QWORD *)v39 + 5))
      v42 = 60;
    else
      v42 = 56;
    v264 = (llvm::Function *)v36;
    v263 = v34;
    if (v40 != (_QWORD *)(v41 + 8 * *(unsigned int *)((char *)v39 + v42)))
    {
      if ((*(_WORD *)(v36 + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)v36);
        v43 = *(uint64_t **)(v36 + 88);
        if ((*(_WORD *)(v36 + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)v36);
        v44 = *(uint64_t **)(v36 + 88);
      }
      else
      {
        v43 = *(uint64_t **)(v36 + 88);
        v44 = v43;
      }
      v45 = &v44[5 * *(_QWORD *)(v36 + 96)];
      if (v43 == v45)
        goto LABEL_108;
      v46 = 0;
      do
      {
        if (v43[1] && sub_1C5C0C31C((uint64_t *)&v274, v43))
          v46 |= *(_BYTE *)(*v43 + 8) == 15;
        v43 += 5;
      }
      while (v43 != v45);
      if ((v46 & 1) == 0)
      {
LABEL_108:
        v61 = 0;
      }
      else
      {
        v282[0] = 0;
        v282[1] = 0;
        v281 = v282;
        *(_OWORD *)v280 = xmmword_1C866A940;
        llvm::Function::removeFnAttrs(v36, (uint64_t)v280);
        for (j = *(_QWORD *)(v36 + 8); j; j = *(_QWORD *)(j + 8))
        {
          v48 = *(_QWORD *)(j + 24);
          v49 = *(unsigned __int8 *)(v48 + 16);
          if (v49 >= 0x1C)
          {
            v50 = v49 - 33;
            v51 = v50 > 0x33;
            v52 = (1 << v50) & 0x8000000000041;
            if (!v51 && v52 != 0)
            {
              v54 = *(_QWORD *)(v48 - 32);
              if (!v54 || *(_BYTE *)(v54 + 16) || *(_QWORD *)(v54 + 24) != *(_QWORD *)(v48 + 72))
                v54 = 0;
              if (v54 == v36)
              {
                v56 = (uint64_t *)(v48 + 64);
                v55 = *(_QWORD *)(v48 + 64);
                if (v55 && *(_DWORD *)(v55 + 8))
                  v57 = *(void **)(v55 + 40);
                else
                  v57 = 0;
                v58 = **(uint64_t ***)v48;
                v268 = v57;
                v59 = llvm::AttributeSet::removeAttributes((uint64_t *)&v268, v58, (uint64_t)v280);
                if (v57 == (void *)v59)
                  v60 = *v56;
                else
                  v60 = llvm::AttributeList::setAttributesAtIndex(v56, v58, -1, v59);
                *v56 = v60;
                v36 = (uint64_t)v264;
              }
            }
          }
        }
        sub_1C5010E9C((uint64_t)&v281, v282[0]);
        v61 = 1;
      }
      v35 |= v61;
    }
    v268 = v272;
    v269 = v272;
    v270 = 32;
    v271 = 0;
    v62 = v36 + 72;
    for (k = *(_QWORD *)(v36 + 80); k != v62; k = *(_QWORD *)(k + 8))
    {
      if (k)
        v64 = k - 24;
      else
        v64 = 0;
      v65 = v274;
      v66 = sub_1C477672C((uint64_t)v274 + 40, v64);
      v67 = *((_QWORD *)v65 + 6);
      if (v67 == *((_QWORD *)v65 + 5))
        v68 = 60;
      else
        v68 = 56;
      if (v66 == (_QWORD *)(v67 + 8 * *(unsigned int *)((char *)v65 + v68)))
      {
        v69 = k == 0;
        v70 = *((_QWORD *)v264 + 10);
        if (v70)
          v69 = v70 - 24 == v64;
        if (!v69)
        {
          v71 = v286.u32[0];
          if (v286.u32[0] >= (unint64_t)v286.u32[1])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)&v286.i64[1], v286.u32[0] + 1, 8);
            v71 = v286.u32[0];
          }
          *((_QWORD *)__s2 + v71) = v64;
          ++v286.i32[0];
        }
        v35 = 1;
      }
      else
      {
        v35 |= sub_1C5C0CBD8((uint64_t *)&v274, v64, &v268);
      }
    }
    sub_1C5F7BD98((uint64_t)v274, (uint64_t)v264, (uint64_t)v280);
    if (v286.i32[0])
    {
      v73 = (char *)__s2;
      v74 = (char *)__s2 + 8 * v286.u32[0];
      do
      {
        for (m = *(_QWORD *)(*(_QWORD *)v73 + 48); m != *(_QWORD *)v73 + 40; m = *(_QWORD *)(m + 8))
        {
          v76 = (llvm *)(m - 24);
          if (m)
            v77 = m - 24;
          else
            v77 = 0;
          if (*(_BYTE *)(v77 + 16) != 83)
            goto LABEL_139;
        }
        v76 = 0;
LABEL_139:
        llvm::changeToUnreachable(v76, 0, (uint64_t)v280, 0, v72);
        v73 += 8;
      }
      while (v73 != v74);
    }
    v78 = *((_QWORD *)v264 + 10);
    if (v78)
      v79 = v78 - 24;
    else
      v79 = 0;
    v80 = v274;
    v81 = sub_1C477672C((uint64_t)v274 + 40, v79);
    v83 = *((_QWORD *)v80 + 6);
    if (v83 == *((_QWORD *)v80 + 5))
      v84 = 60;
    else
      v84 = 56;
    if (v81 == (_QWORD *)(v83 + 8 * *(unsigned int *)((char *)v80 + v84)))
    {
      v85 = *((_QWORD *)v264 + 10);
      v86 = v85 - 24;
      if (!v85)
        v86 = 0;
      v87 = v86 + 40;
      for (n = *(_QWORD *)(v86 + 48); n != v87; n = *(_QWORD *)(n + 8))
      {
        v89 = (llvm *)(n - 24);
        if (n)
          v90 = n - 24;
        else
          v90 = 0;
        if (*(_BYTE *)(v90 + 16) != 83)
          goto LABEL_160;
      }
      v89 = 0;
LABEL_160:
      llvm::changeToUnreachable(v89, 0, (uint64_t)v280, 0, v82);
    }
    for (ii = *((_QWORD *)v264 + 10); ii != v62; ii = *(_QWORD *)(ii + 8))
    {
      if (ii)
        v92 = (_QWORD *)(ii - 24);
      else
        v92 = 0;
      v275 = (llvm::BasicBlock **)v279;
      v276 = (llvm::BasicBlock **)v279;
      v277 = 8;
      v278 = 0;
      v94 = v92 + 5;
      v93 = (_QWORD *)v92[5];
      if (v93 == v92 + 5)
        goto LABEL_245;
      if (v93)
        v95 = v93 - 3;
      else
        v95 = 0;
      v96 = *((unsigned __int8 *)v95 + 16);
      v97 = v96 - 29;
      if (v96 == 30)
      {
        if ((*((_DWORD *)v95 + 5) & 0x7FFFFFF) == 3)
          v98 = 2;
        else
          v98 = 1;
      }
      else
      {
        v98 = 2;
        v133 = 0;
        switch(v97)
        {
          case 0:
          case 5:
          case 6:
            goto LABEL_250;
          case 1:
LABEL_489:
            __break(1u);
            goto LABEL_490;
          case 2:
            v98 = (*((_DWORD *)v95 + 5) >> 1) & 0x3FFFFFF;
            break;
          case 3:
          case 9:
            v98 = (*((_DWORD *)v95 + 5) & 0x7FFFFFF) - 1;
            break;
          case 4:
            goto LABEL_174;
          case 7:
            v98 = *((_WORD *)v95 + 9) & 1;
            break;
          case 8:
            v98 = 1;
            goto LABEL_174;
          case 10:
            v98 = *((_DWORD *)v95 + 20) + 1;
            break;
          default:
            goto LABEL_245;
        }
        if (!v98)
        {
LABEL_245:
          v133 = 0;
          goto LABEL_250;
        }
      }
LABEL_174:
      v99 = 0;
      v100 = 0;
      v101 = -v98;
LABEL_175:
      ++v100;
      do
      {
        Successor = (llvm::BasicBlock *)llvm::Instruction::getSuccessor((llvm::Instruction *)v95, v100 - 1);
        if (!llvm::SCCPSolver::isEdgeFeasible((llvm::SCCPSolver *)&v274, (llvm::BasicBlock *)v92, Successor))
        {
          v99 = 1;
          if (v101 + v100)
            goto LABEL_175;
          goto LABEL_182;
        }
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v275, (uint64_t)Successor);
        ++v100;
      }
      while (v101 + v100 != 1);
      if ((v99 & 1) == 0)
        goto LABEL_245;
LABEL_182:
      v104 = (_QWORD *)*v94;
      if ((_QWORD *)*v94 == v94)
      {
        v106 = 0;
      }
      else
      {
        v105 = (unsigned __int8 *)(v104 - 3);
        if (!v104)
          v105 = 0;
        if (v105[16] - 29 >= 0xB)
          v106 = 0;
        else
          v106 = (llvm::SwitchInstProfUpdateWrapper *)v105;
      }
      v266 = v35;
      if (HIDWORD(v277) - v278 != 1)
      {
        v293 = v106;
        LOBYTE(v294) = 0;
        v296 = 0;
        v297 = 0;
        llvm::SwitchInstProfUpdateWrapper::init(&v293, v103);
        v298 = v300;
        v299 = 0x800000000;
        v120 = v293;
        if ((*((_DWORD *)v293 + 5) & 0x7FFFFFE) != 2)
        {
          v121 = 0;
          do
          {
            if ((_DWORD)v121 == -2)
              v122 = 1;
            else
              v122 = (2 * v121 + 3);
            v123 = v121 + 1;
            while (1)
            {
              v124 = *((_DWORD *)v120 + 5);
              v125 = (v124 & 0x40000000) != 0
                   ? (llvm::SwitchInstProfUpdateWrapper *)*((_QWORD *)v120 - 1)
                   : (llvm::SwitchInstProfUpdateWrapper *)((char *)v120 - 32 * (v124 & 0x7FFFFFF));
              v126 = (char *)sub_1C477672C((uint64_t)&v275, *((_QWORD *)v125 + 4 * v122));
              v127 = v276 == v275 ? (uint64_t *)((char *)&v277 + 4) : &v277;
              if (v126 != (char *)&v276[*(unsigned int *)v127])
                break;
              v128 = *((_DWORD *)v120 + 5);
              if ((v128 & 0x40000000) != 0)
                v129 = (char *)*((_QWORD *)v120 - 1);
              else
                v129 = (char *)v120 - 32 * (v128 & 0x7FFFFFF);
              v130 = *(llvm::BasicBlock **)&v129[32 * v122];
              llvm::BasicBlock::removePredecessor(v130, (llvm::BasicBlock *)v92, 0);
              v131 = v299;
              if (v299 >= (unint64_t)HIDWORD(v299))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v298, (uint64_t)v300, v299 + 1, 16);
                v131 = v299;
              }
              v132 = (char *)v298 + 16 * v131;
              *v132 = v92;
              v132[1] = (unint64_t)v130 | 4;
              LODWORD(v299) = v299 + 1;
              if (v296)
              {
                v297 = 1;
                *(_DWORD *)(v294 + 4 * (v121 + 1)) = *(_DWORD *)(v294 + 4 * v295-- - 4);
              }
              llvm::SwitchInst::removeCase((uint64_t)v293, (uint64_t)v120, v121);
              if (v121 == ((*((_DWORD *)v293 + 5) >> 1) & 0x3FFFFFF) - 1)
                goto LABEL_216;
            }
            ++v121;
          }
          while (v123 != ((*((_DWORD *)v293 + 5) >> 1) & 0x3FFFFFF) - 1);
        }
LABEL_216:
        llvm::DomTreeUpdater::applyUpdatesPermissive(v280, (uint64_t *)v298, v299);
        if (v298 != v300)
          free(v298);
        sub_1C5AE380C((uint64_t)&v293);
        goto LABEL_249;
      }
      v107 = v276;
      if (v276 == v275)
        v108 = HIDWORD(v277);
      else
        v108 = v277;
      if ((_DWORD)v108)
      {
        v109 = 8 * v108;
        v110 = (char *)&v276[v108];
        while ((unint64_t)*v107 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v107;
          v109 -= 8;
          if (!v109)
          {
            v107 = (llvm::BasicBlock **)v110;
            break;
          }
        }
      }
      v111 = *v107;
      v298 = v300;
      v299 = 0x800000000;
      if (v104 != v94)
      {
        if (v104)
          v112 = v104 - 3;
        else
          v112 = 0;
        if (*((_BYTE *)v112 + 16) == 30)
        {
          if ((*((_DWORD *)v112 + 5) & 0x7FFFFFF) == 3)
            v113 = 2;
          else
            v113 = 1;
        }
        else
        {
          v113 = 2;
          switch(*((_BYTE *)v112 + 16))
          {
            case 0x1E:
              goto LABEL_489;
            case 0x1F:
              v113 = (*((_DWORD *)v112 + 5) >> 1) & 0x3FFFFFF;
              break;
            case 0x20:
            case 0x26:
              v113 = (*((_DWORD *)v112 + 5) & 0x7FFFFFF) - 1;
              break;
            case 0x21:
              goto LABEL_206;
            case 0x24:
              v113 = *((_WORD *)v112 + 9) & 1;
              break;
            case 0x25:
              v113 = 1;
              goto LABEL_206;
            case 0x27:
              v113 = *((_DWORD *)v112 + 20) + 1;
              break;
            default:
              goto LABEL_247;
          }
          if (!v113)
            goto LABEL_247;
        }
LABEL_206:
        v114 = 0;
        for (jj = 0; jj != v113; ++jj)
        {
          v116 = (llvm::BasicBlock *)llvm::Instruction::getSuccessor((llvm::Instruction *)v112, jj);
          v117 = v116;
          if (v116 != v111 || (v114 & 1) != 0)
          {
            llvm::BasicBlock::removePredecessor(v116, (llvm::BasicBlock *)v92, 0);
            v118 = v299;
            if (v299 >= (unint64_t)HIDWORD(v299))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v298, (uint64_t)v300, v299 + 1, 16);
              v118 = v299;
            }
            v119 = (char *)v298 + 16 * v118;
            *v119 = v92;
            v119[1] = (unint64_t)v117 | 4;
            LODWORD(v299) = v299 + 1;
          }
          else
          {
            v114 = 1;
          }
        }
      }
LABEL_247:
      v134 = operator new(0x60uLL);
      v134[13] = v134[13] & 0x38000000 | 1;
      *(_QWORD *)v134 = 0;
      *((_QWORD *)v134 + 1) = 0;
      *((_QWORD *)v134 + 2) = 0;
      *((_QWORD *)v134 + 3) = v134 + 8;
      llvm::BranchInst::BranchInst((llvm::BranchInst *)(v134 + 8), v111, (llvm::BasicBlock *)v92);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v106 + 5) + 40, (uint64_t ***)v106);
      v135 = *((_QWORD *)v106 + 3);
      v136 = (_QWORD *)*((_QWORD *)v106 + 4);
      *v136 = v135;
      *(_QWORD *)(v135 + 8) = v136;
      *((_QWORD *)v106 + 3) = 0;
      *((_QWORD *)v106 + 4) = 0;
      llvm::Value::deleteValue(v106);
      llvm::DomTreeUpdater::applyUpdatesPermissive(v280, (uint64_t *)v298, v299);
      if (v298 != v300)
        free(v298);
LABEL_249:
      v133 = 1;
      v35 = v266;
LABEL_250:
      if (v276 != v275)
        free(v276);
      v35 |= v133;
    }
    v17 = v261;
    if (v286.i32[0])
    {
      v137 = (llvm::BasicBlock **)__s2;
      v138 = 8 * v286.u32[0];
      do
      {
        if ((*((_WORD *)*v137 + 9) & 0x7FFF) == 0)
          llvm::DomTreeUpdater::deleteBB((llvm::DomTreeUpdater *)v280, *v137);
        ++v137;
        v138 -= 8;
      }
      while (v138);
    }
    for (kk = *((_QWORD *)v264 + 10); kk != v62; kk = *(_QWORD *)(kk + 8))
    {
      v140 = kk - 24;
      if (!kk)
        v140 = 0;
      v141 = v140 + 40;
      v142 = *(_QWORD *)(v140 + 48);
      if (v142 != v140 + 40)
      {
        do
        {
          v143 = *(_QWORD *)(v142 + 8);
          if (v142)
            v144 = v142 - 24;
          else
            v144 = 0;
          if (sub_1C5F7AD64((uint64_t)v274, v144))
          {
            if (*(_BYTE *)(v144 + 16) == 84)
            {
              v145 = *(_QWORD *)(v144 - 32);
              if (v145)
              {
                if (!*(_BYTE *)(v145 + 16)
                  && *(_QWORD *)(v145 + 24) == *(_QWORD *)(v144 + 72)
                  && (*(_BYTE *)(v145 + 33) & 0x20) != 0
                  && *(_DWORD *)(*(_QWORD *)(v142 - 56) + 36) == 281)
                {
                  llvm::Value::doRAUW((llvm::ValueAsMetadata *)v144, *(llvm::Value **)(v142 - 24 - 32 * (*(_DWORD *)(v142 - 4) & 0x7FFFFFF)), (llvm::Value *)1);
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v144 + 40) + 40, (uint64_t ***)v144);
                  v146 = *(_QWORD *)(v144 + 24);
                  v147 = *(_QWORD **)(v144 + 32);
                  *v147 = v146;
                  *(_QWORD *)(v146 + 8) = v147;
                  *(_QWORD *)(v144 + 24) = 0;
                  *(_QWORD *)(v144 + 32) = 0;
                  llvm::Value::deleteValue((llvm::Value *)v144);
                }
              }
            }
          }
          v142 = v143;
        }
        while (v143 != v141);
      }
    }
    llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)v280);
    v298 = &v284;
    sub_1C50B10F0((void ***)&v298);
    if (v283 != v282[36])
      free(v283);
    v34 = v263;
    if (v280[0] != &v281)
      free(v280[0]);
    if (v269 != v268)
      free(v269);
    if (__s2 != &v286.u64[1])
      free(__s2);
LABEL_295:
    v34 = *(_QWORD *)(v34 + 8);
  }
  while ((uint64_t *)v34 != v17);
LABEL_298:
  v265 = &v281;
  v280[0] = &v281;
  v280[1] = (void *)0x800000000;
  v148 = v274;
  v149 = *((_QWORD *)v274 + 29);
  v150 = *((_QWORD *)v274 + 30);
  v267 = v35;
  if (v149 == v150)
    goto LABEL_379;
  while (2)
  {
    v151 = *(_QWORD *)v149;
    if ((*(_WORD *)(v149 + 8) & 0xFE) == 4)
    {
      v152 = (const void **)(v149 + 16);
      v286.i32[0] = *(_DWORD *)(v149 + 24);
      if (v286.i32[0] > 0x40u)
      {
        __s2 = (void *)operator new[]();
        memcpy(__s2, *v152, (((unint64_t)v286.u32[0] + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        __s2 = (void *)*v152;
      }
      v153 = (const void **)(v149 + 32);
      llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
      v154 = v286.i32[0];
      v155 = __s2;
      v286.i32[0] = 0;
      v156 = *(unsigned int *)(v149 + 40);
      if (v156 > 0x40)
        v157 = memcmp(*v153, __s2, ((unint64_t)(v156 + 63) >> 3) & 0x3FFFFFF8) == 0;
      else
        v157 = *v153 == __s2;
      v158 = v157;
      if (v154 >= 0x41)
      {
        if (v155)
        {
          MEMORY[0x1CAA32F9C](v155, 0x1000C8000313F17);
          if (v286.i32[0] >= 0x41u)
          {
            if (__s2)
              MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
          }
        }
      }
      if ((v158 & 1) == 0)
      {
        if (*(_BYTE *)(v149 + 8) == 5)
          goto LABEL_365;
        v166 = *(_QWORD *)(v151 + 8);
        if (!v166)
          goto LABEL_365;
        while (1)
        {
          v167 = *(uint64_t ****)(v166 + 24);
          v168 = *((unsigned __int8 *)v167 + 16);
          if (v168 < 0x1C)
            goto LABEL_356;
          v169 = v168 - 33;
          v51 = v169 > 0x33;
          v170 = (1 << v169) & 0x8000000000041;
          if (v51 || v170 == 0)
            goto LABEL_356;
          v172 = (uint64_t)*(v167 - 4);
          if (!v172 || *(_BYTE *)(v172 + 16) || *(uint64_t ***)(v172 + 24) != v167[9])
            v172 = 0;
          if (v172 != v151
            || !sub_1C4F8BE80(*(uint64_t ****)(v166 + 24), 0, *(_QWORD *)(v166 + 24), 0, 0, 0))
          {
            goto LABEL_356;
          }
          if ((*((_BYTE *)v167 + 23) & 0x20) != 0)
            break;
LABEL_352:
          v188 = (llvm::ConstantInt *)**v167[5];
          v286.i64[0] = 0;
          __s2 = 0;
          v189 = llvm::ConstantInt::get(v188, (llvm::LLVMContext *)(v149 + 16), v173);
          __s2 = llvm::ValueAsMetadata::get(v189, v190);
          v192 = llvm::ConstantInt::get(v188, (llvm::LLVMContext *)(v149 + 32), v191);
          v286.i64[0] = (uint64_t)llvm::ValueAsMetadata::get(v192, v193);
          Impl = (llvm::MDNode *)llvm::MDTuple::getImpl((uint64_t *)v188, &__s2, 2, 0, 1);
          if (Impl || v167[6] || (*((_BYTE *)v167 + 23) & 0x20) != 0)
            llvm::Value::setMetadata((llvm::Value *)v167, 4, Impl);
LABEL_356:
          v166 = *(_QWORD *)(v166 + 8);
          if (!v166)
            goto LABEL_365;
        }
        v174 = ***v167;
        __s2 = v167;
        v175 = *(_DWORD *)(v174 + 2496);
        if (v175)
        {
          v176 = *(_QWORD *)(v174 + 2480);
          v177 = v175 - 1;
          v178 = v177 & ((v167 >> 4) ^ (v167 >> 9));
          v179 = (uint64_t ****)(v176 + 40 * v178);
          v180 = *v179;
          if (*v179 == v167)
          {
LABEL_348:
            v185 = *((unsigned int *)v179 + 4);
            if ((_DWORD)v185)
            {
              v186 = v179[1] + 1;
              v187 = 16 * v185;
              while (*((_DWORD *)v186 - 2) != 4)
              {
                v186 += 2;
                v187 -= 16;
                if (!v187)
                  goto LABEL_352;
              }
              if (*v186)
                goto LABEL_356;
            }
            goto LABEL_352;
          }
          v181 = 0;
          v182 = 1;
          while (v180 != (uint64_t ***)-4096)
          {
            if (v181)
              v183 = 0;
            else
              v183 = v180 == (uint64_t ***)-8192;
            if (v183)
              v181 = v179;
            v184 = v178 + v182++;
            v178 = v184 & v177;
            v179 = (uint64_t ****)(v176 + 40 * v178);
            v180 = *v179;
            if (*v179 == v167)
              goto LABEL_348;
          }
          if (v181)
            v195 = v181;
          else
            v195 = v179;
        }
        else
        {
          v195 = 0;
        }
        v179 = (uint64_t ****)sub_1C541AB24(v174 + 2480, (uint64_t)&__s2, (uint64_t *)&__s2, v195);
        v196 = (uint64_t ***)__s2;
        v179[4] = 0;
        v179[3] = 0;
        *v179 = v196;
        v179[1] = (uint64_t ***)(v179 + 3);
        v179[2] = (uint64_t ***)0x100000000;
        goto LABEL_348;
      }
    }
    if (*(_BYTE *)(**(_QWORD **)(*(_QWORD *)(v151 + 24) + 16) + 8) != 7)
    {
      v159 = *(_WORD *)(v149 + 8);
      if (v159 == 2)
        goto LABEL_323;
      v160 = v159 & 0xFE;
      if (v160 != 4)
        goto LABEL_322;
      v286.i32[0] = *(_DWORD *)(v149 + 24);
      if (v286.i32[0] > 0x40u)
      {
        __s2 = (void *)operator new[]();
        memcpy(__s2, *(const void **)(v149 + 16), (((unint64_t)v286.u32[0] + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        __s2 = *(void **)(v149 + 16);
      }
      llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
      v161 = v286.i32[0];
      v162 = __s2;
      v286.i32[0] = 0;
      v163 = *(unsigned int *)(v149 + 40);
      if (v163 > 0x40)
        v164 = memcmp(*(const void **)(v149 + 32), __s2, ((unint64_t)(v163 + 63) >> 3) & 0x3FFFFFF8) == 0;
      else
        v164 = *(_QWORD *)(v149 + 32) == (_QWORD)__s2;
      v165 = v164;
      if (v161 >= 0x41)
      {
        if (v162)
        {
          MEMORY[0x1CAA32F9C](v162, 0x1000C8000313F17);
          if (v286.i32[0] >= 0x41u)
          {
            if (__s2)
              MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
          }
        }
      }
      if ((v165 & 1) != 0)
        goto LABEL_323;
      v160 = *(_WORD *)(v149 + 8) & 0xFE;
LABEL_322:
      if (!v160)
LABEL_323:
        sub_1C5C0CEDC(v151, (uint64_t)v280, (uint64_t *)&v274);
    }
LABEL_365:
    v149 += 48;
    LOBYTE(v35) = v267;
    if (v149 != v150)
      continue;
    break;
  }
  v148 = v274;
LABEL_379:
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&__s2, (const void **)v287 + 1, (llvm::SCCPInstVisitor *)((char *)v148 + 304));
  v198 = (void *)v286.i64[0];
  v199 = __s2;
  v200 = &v286.i8[12];
  if ((void *)v286.i64[0] != __s2)
    v200 = &v286.i8[8];
  v201 = *(unsigned int *)v200;
  v202 = (unint64_t *)v286.i64[0];
  if ((_DWORD)v201)
  {
    v203 = 0;
    while (*(_QWORD *)(v286.i64[0] + v203) >= 0xFFFFFFFFFFFFFFFELL)
    {
      v203 += 8;
      if (8 * v201 == v203)
        goto LABEL_396;
    }
    v202 = (unint64_t *)(v286.i64[0] + v203);
  }
  v204 = (unint64_t *)(v286.i64[0] + 8 * v201);
  if (v202 != v204)
  {
    v205 = (llvm::Function *)*v202;
LABEL_389:
    if (llvm::SCCPInstVisitor::isStructLatticeConstant(v274, v205, **(llvm::StructType ***)(*((_QWORD *)v205 + 3) + 16)))sub_1C5C0CEDC((uint64_t)v205, (uint64_t)v280, (uint64_t *)&v274);
    v206 = v202 + 1;
    while (v206 != v204)
    {
      v207 = *v206++;
      v205 = (llvm::Function *)v207;
      if (v207 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v202 = v206 - 1;
        goto LABEL_389;
      }
    }
    v198 = (void *)v286.i64[0];
    v199 = __s2;
  }
LABEL_396:
  if (v198 != v199)
    free(v198);
  __s2 = (void *)1;
  v286 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v287[0] = v286;
  v287[1] = v286;
  v287[2] = v286;
  v288 = v290;
  v289 = 0x800000000;
  if (LODWORD(v280[1]))
  {
    v208 = 0;
    v209 = 8 * LODWORD(v280[1]);
    do
    {
      v268 = 0;
      v268 = *(void **)(*(_QWORD *)(*(_QWORD *)((char *)v280[0] + v208) + 40) + 56);
      v210 = *(_QWORD *)((char *)v280[0] + v208);
      v211 = llvm::UndefValue::get(**(llvm::UndefValue ***)(*((_QWORD *)v268 + 3) + 16), v197);
      LLVMSetArgOperand_0(v210, 0, (uint64_t)v211);
      sub_1C567A2A0((uint64_t)&__s2, (uint64_t *)&v268);
      v208 += 8;
    }
    while (v209 != v208);
    if ((_DWORD)v289)
    {
      v212 = (llvm::Function **)v288;
      v213 = (llvm::Function **)((char *)v288 + 8 * v289);
      do
      {
        v214 = *v212;
        if ((*((_WORD *)*v212 + 9) & 1) != 0)
        {
          llvm::Function::BuildLazyArguments(*v212);
          v215 = *((_QWORD *)v214 + 11);
          if ((*((_WORD *)v214 + 9) & 1) != 0)
          {
            llvm::Function::BuildLazyArguments(v214);
            v216 = *((_QWORD *)v214 + 11);
            goto LABEL_406;
          }
        }
        else
        {
          v215 = *((_QWORD *)v214 + 11);
        }
        v216 = v215;
LABEL_406:
        for (mm = v216 + 40 * *((_QWORD *)v214 + 12); v215 != mm; v215 += 40)
          *((_QWORD *)v214 + 14) = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)v214 + 14, **(uint64_t ***)v214, *(_DWORD *)(v215 + 32) + 1, 46);
        for (nn = *((_QWORD *)v214 + 1); nn; nn = *(_QWORD *)(nn + 8))
        {
          v219 = *(_QWORD *)(nn + 24);
          v220 = *(unsigned __int8 *)(v219 + 16);
          if (v220 != 4)
          {
            if (v220 == 84)
            {
              v221 = 0;
            }
            else
            {
              v221 = v220 == 33 ? 2 : (*(_DWORD *)(v219 + 80) + 1);
              LOBYTE(v35) = v267;
            }
            v222 = *(_DWORD *)(v219 + 20);
            v223 = v222 & 0x7FFFFFF;
            v224 = v219 - 32 * v223;
            if (v222 < 0)
            {
              v228 = *(_QWORD *)(v224 - 8);
              v225 = (v228 & 0xFFFFFFFF0) != 0
                   ? (*(_DWORD *)(v224 - 12) - *(_DWORD *)(v224 - v228))
                   : 0;
              LOBYTE(v35) = v267;
            }
            else
            {
              v225 = 0;
            }
            if (v224 != v219 - 32 * v221 - 32 * v225 - 32)
            {
              v226 = (32 * v225 + 32 * v221) ^ 0xFFFFFFFFFFFFFFE0;
              v227 = -32 * v223;
              do
              {
                *(_QWORD *)(v219 + 64) = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(v219 + 64), **(uint64_t ***)v219, ((v227+ 32 * (unint64_t)(*(_DWORD *)(v219 + 20) & 0x7FFFFFF)) >> 5)+ 1, 46);
                v227 += 32;
              }
              while (v226 != v227);
            }
          }
        }
        ++v212;
      }
      while (v212 != v213);
    }
  }
  v229 = *((_QWORD *)v274 + 23);
  v230 = *((unsigned int *)v274 + 50);
  v231 = (uint64_t *)(v229 + 48 * v230);
  if (*((_DWORD *)v274 + 48))
  {
    if ((_DWORD)v230)
    {
      v232 = 48 * v230;
      v233 = (uint64_t *)*((_QWORD *)v274 + 23);
      while ((*v233 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v233 += 6;
        v232 -= 48;
        if (!v232)
          goto LABEL_436;
      }
    }
    else
    {
      v233 = (uint64_t *)*((_QWORD *)v274 + 23);
    }
  }
  else
  {
LABEL_436:
    v233 = (uint64_t *)(v229 + 48 * v230);
  }
  v234 = (uint64_t *)(v229 + 48 * v230);
  while (v233 != v234)
  {
    v235 = v233;
    v236 = v233 + 6;
    v233 = v231;
    if (v236 != v231)
    {
      while ((*v236 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v236 += 6;
        if (v236 == v231)
        {
          v233 = v231;
          goto LABEL_445;
        }
      }
      v233 = v236;
    }
LABEL_445:
    v237 = *v235;
    if ((v235[1] & 0xFE) != 0 && *((_WORD *)v235 + 4) != 2)
    {
      if ((v235[1] & 0xFE) != 4)
        continue;
      LODWORD(v269) = *((_DWORD *)v235 + 6);
      if (v269 > 0x40)
      {
        v268 = (void *)operator new[]();
        memcpy(v268, (const void *)v235[2], (((unint64_t)v269 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v268 = (void *)v235[2];
      }
      llvm::APInt::operator+=((uint64_t)&v268, 1uLL);
      v251 = v269;
      v252 = v268;
      LODWORD(v269) = 0;
      v253 = *((unsigned int *)v235 + 10);
      if (v253 > 0x40)
        v254 = memcmp((const void *)v235[4], v268, ((unint64_t)(v253 + 63) >> 3) & 0x3FFFFFF8) == 0;
      else
        v254 = v235[4] == (_QWORD)v268;
      v255 = v254;
      if (v251 >= 0x41)
      {
        if (v252)
        {
          MEMORY[0x1CAA32F9C](v252, 0x1000C8000313F17);
          if (v269 >= 0x41)
          {
            if (v268)
              MEMORY[0x1CAA32F9C](v268, 0x1000C8000313F17);
          }
        }
      }
      if (!v255)
        continue;
    }
    v239 = *(_QWORD *)(v237 + 8);
    if (v239)
    {
      do
      {
        v240 = *(_QWORD *)(v239 + 24);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v240 + 40) + 40, (uint64_t ***)v240);
        v241 = *(_QWORD *)(v240 + 24);
        v242 = *(_QWORD **)(v240 + 32);
        *v242 = v241;
        *(_QWORD *)(v241 + 8) = v242;
        *(_QWORD *)(v240 + 24) = 0;
        *(_QWORD *)(v240 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v240);
        v239 = *(_QWORD *)(v237 + 8);
      }
      while (v239);
      LOBYTE(v35) = 1;
    }
    llvm::SymbolTableListTraits<llvm::GlobalVariable>::removeNodeFromList(v262, (uint64_t ***)v237);
    v243 = *(_QWORD *)(v237 + 56);
    v244 = *(_QWORD **)(v237 + 64);
    *v244 = v243;
    *(_QWORD *)(v243 + 8) = v244;
    *(_QWORD *)(v237 + 56) = 0;
    *(_QWORD *)(v237 + 64) = 0;
    llvm::GlobalVariable::dropAllReferences((llvm::GlobalVariable *)v237);
    v245 = *(_QWORD *)(v237 + 48);
    if (v245)
      llvm::Comdat::removeUser(v245, v237);
    *(_QWORD *)(v237 + 48) = 0;
    llvm::Constant::removeDeadConstantUsers(v237);
    llvm::Value::~Value((llvm::Value *)v237, v246);
    v247 = *(_DWORD *)(v237 + 20);
    v248 = v247 & 0xF8000000 | 1;
    *(_DWORD *)(v237 + 20) = v248;
    if ((v247 & 0x40000000) != 0)
    {
      v258 = *(_QWORD **)(v237 - 8);
      v257 = (void *)(v237 - 8);
      v256 = v258;
      if (*v258)
      {
        *(_QWORD *)v256[2] = v256[1];
        v259 = v256[1];
        if (v259)
          *(_QWORD *)(v259 + 16) = v256[2];
      }
      operator delete(v256);
      v249 = v257;
    }
    else
    {
      v249 = (void *)(v237 - 32);
      if (*(_QWORD *)(v237 - 32))
      {
        **(_QWORD **)(v237 - 16) = *(_QWORD *)(v237 - 24);
        v250 = *(_QWORD *)(v237 - 24);
        if (v250)
          *(_QWORD *)(v250 + 16) = *(_QWORD *)(v237 - 16);
      }
      if ((v248 & 0x80000000) != 0)
        v249 = (void *)(v237 - 40 - *(_QWORD *)(v237 - 40));
    }
    operator delete(v249);
  }
  if (v288 != v290)
    free(v288);
  if ((__s2 & 1) == 0)
LABEL_490:
    MEMORY[0x1CAA32FB4](v286.i64[0], 8);
  if (v280[0] != v265)
    free(v280[0]);
  llvm::SCCPSolver::~SCCPSolver((llvm::SCCPSolver *)&v274);
  return v35 & 1;
}

uint64_t sub_1C5C0C31C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  llvm::Type *v4;
  const void **v5;
  const void **v6;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  BOOL v11;
  _BOOL4 v12;
  uint64_t *v13;
  llvm::Type *v14;
  uint64_t *v15;
  __int16 v16;
  __int16 *v17;
  int v18;
  llvm::ValueHandleBase *v20;
  uint64_t v21;
  uint64_t v22;
  llvm::ValueHandleBase **v23;
  llvm::ValueHandleBase **v24;
  llvm::ValueHandleBase **v25;
  char *v26;
  char *v27;
  char v28;
  int v29;
  char *v30;
  const void **v31;
  char *v32;
  const void **v33;
  llvm::ValueHandleBase *Constant;
  unsigned int v35;
  void *v36;
  BOOL v37;
  int v38;
  llvm::ValueHandleBase *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  llvm::ValueHandleBase **v44;
  llvm::ValueHandleBase **v45;
  llvm::ValueHandleBase *v46;
  uint64_t v47;
  void *v48;
  unsigned int v49;
  void *v50;
  uint64_t v51;
  BOOL v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  void *v56;
  uint64_t v57;
  BOOL v58;
  int v59;
  llvm::UndefValue *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  size_t v65;
  size_t v66;
  uint64_t v67;
  llvm::ConstantAggregateZero *v68;
  void *v69[3];
  void *v70;
  unsigned int v71;
  void *__s2;
  void *__src;
  unsigned int v74;
  void *__s1;
  unsigned int v76;
  uint64_t v77;

  v2 = (uint64_t)a2;
  v77 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*a2 + 8) == 16)
  {
    sub_1C5F7C23C(*a1, a2, v69);
    v5 = (const void **)v69[0];
    v6 = (const void **)v69[1];
    while (v5 != v6)
    {
      if ((*(_WORD *)v5 & 0xFE) != 0 && *(_WORD *)v5 != 2)
      {
        if ((*(_WORD *)v5 & 0xFE) != 4)
          goto LABEL_101;
        LODWORD(__src) = *((_DWORD *)v5 + 4);
        if (__src > 0x40)
        {
          __s2 = (void *)operator new[]();
          memcpy(__s2, v5[1], (((unint64_t)__src + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          __s2 = (void *)v5[1];
        }
        llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
        v8 = __src;
        v9 = __s2;
        LODWORD(__src) = 0;
        v10 = *((unsigned int *)v5 + 8);
        v11 = v10 > 0x40
            ? memcmp(v5[3], __s2, ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8) == 0
            : v5[3] == __s2;
        v12 = v11;
        if (v8 >= 0x41)
        {
          if (v9)
          {
            MEMORY[0x1CAA32F9C](v9, 0x1000C8000313F17);
            if (__src >= 0x41)
            {
              if (__s2)
                MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
            }
          }
        }
        if (!v12)
        {
LABEL_101:
          __s2 = v69;
          sub_1C5C0D3D0((void ***)&__s2);
          return 0;
        }
      }
      v5 += 5;
    }
    v67 = v2;
    v68 = *(llvm::ConstantAggregateZero **)v2;
    v21 = *(unsigned int *)(*(_QWORD *)v2 + 12);
    if ((_DWORD)v21)
    {
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = 0;
      do
      {
        v26 = (char *)v69[0];
        v27 = (char *)v69[0] + 40 * v22;
        v28 = *v27;
        LOWORD(__s2) = *v27;
        v29 = *v27;
        if ((v29 - 4) < 2)
        {
          v30 = (char *)v69[0] + 40 * v22;
          v31 = (const void **)(v30 + 8);
          v74 = *((_DWORD *)v30 + 4);
          if (v74 > 0x40)
          {
            __src = (void *)operator new[]();
            memcpy(__src, *v31, (((unint64_t)v74 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            __src = (void *)*v31;
          }
          v32 = &v26[40 * v22];
          v33 = (const void **)(v32 + 24);
          v76 = *((_DWORD *)v32 + 8);
          if (v76 > 0x40)
          {
            __s1 = (void *)operator new[]();
            memcpy(__s1, *v33, (((unint64_t)v76 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            __s1 = (void *)*v33;
          }
          v28 = (char)__s2;
          LOWORD(__s2) = __s2 | (v27[1] << 8);
        }
        else if ((v29 - 2) < 2)
        {
          __src = (void *)*((_QWORD *)v69[0] + 5 * v22 + 1);
        }
        if (v28 == 2)
          goto LABEL_43;
        if ((v28 & 0xFE) != 4)
          goto LABEL_54;
        v71 = v74;
        if (v74 > 0x40)
        {
          v70 = (void *)operator new[]();
          memcpy(v70, __src, (((unint64_t)v71 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v70 = __src;
        }
        llvm::APInt::operator+=((uint64_t)&v70, 1uLL);
        v35 = v71;
        v36 = v70;
        v71 = 0;
        if (v76 > 0x40)
          v37 = memcmp(__s1, v70, (((unint64_t)v76 + 63) >> 3) & 0x3FFFFFF8) == 0;
        else
          v37 = __s1 == v70;
        v38 = v37;
        if (v35 >= 0x41)
        {
          if (v36)
          {
            MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
            if (v71 >= 0x41)
            {
              if (v70)
                MEMORY[0x1CAA32F9C](v70, 0x1000C8000313F17);
            }
          }
        }
        if (v38)
LABEL_43:
          Constant = llvm::SCCPInstVisitor::getConstant(*a1, (uint64_t)&__s2);
        else
LABEL_54:
          Constant = llvm::UndefValue::get(*(llvm::UndefValue **)(*((_QWORD *)v68 + 2) + 8 * v22), v4);
        v39 = Constant;
        if (v25 >= v23)
        {
          v40 = v25 - v24;
          v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 61)
            abort();
          if (((char *)v23 - (char *)v24) >> 2 > v41)
            v41 = ((char *)v23 - (char *)v24) >> 2;
          if ((unint64_t)((char *)v23 - (char *)v24) >= 0x7FFFFFFFFFFFFFF8)
            v42 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v42 = v41;
          if (v42)
          {
            if (v42 >> 61)
              sub_1C4764EE4();
            v43 = (char *)operator new(8 * v42);
          }
          else
          {
            v43 = 0;
          }
          v44 = (llvm::ValueHandleBase **)&v43[8 * v40];
          *v44 = v39;
          v45 = v44 + 1;
          while (v25 != v24)
          {
            v46 = *--v25;
            *--v44 = v46;
          }
          v23 = (llvm::ValueHandleBase **)&v43[8 * v42];
          if (v24)
            operator delete(v24);
          v24 = v44;
          v25 = v45;
        }
        else
        {
          *v25++ = Constant;
        }
        if ((__s2 & 0xFE) == 4)
        {
          if (v76 >= 0x41 && __s1)
            MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
          if (v74 >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        }
        ++v22;
      }
      while (v22 != v21);
    }
    else
    {
      v25 = 0;
      v24 = 0;
    }
    v60 = llvm::ConstantStruct::get(v68, (llvm::Type *)v24, v25 - v24);
    if (v24)
      operator delete(v24);
    __s2 = v69;
    sub_1C5C0D3D0((void ***)&__s2);
    v2 = v67;
  }
  else
  {
    v13 = sub_1C5F7EFFC((uint64_t *)(*a1 + 136), (uint64_t)a2);
    v15 = v13;
    v17 = (__int16 *)(v13 + 1);
    v16 = *((_WORD *)v13 + 4);
    v18 = v16;
    if ((v16 & 0xFE) != 0 && v16 != 2)
    {
      if ((v16 & 0xFE) != 4)
        return 0;
      v47 = *((unsigned int *)v13 + 6);
      LODWORD(__src) = v47;
      if (v47 > 0x40)
      {
        v65 = ((unint64_t)(v47 + 63) >> 3) & 0x3FFFFFF8;
        v48 = (void *)operator new[]();
        memcpy(v48, (const void *)v15[2], v65);
      }
      else
      {
        v48 = (void *)v13[2];
      }
      __s2 = v48;
      llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
      v49 = __src;
      v50 = __s2;
      LODWORD(__src) = 0;
      v51 = *((unsigned int *)v15 + 10);
      if (v51 > 0x40)
        v52 = memcmp((const void *)v15[4], __s2, ((unint64_t)(v51 + 63) >> 3) & 0x3FFFFFF8) == 0;
      else
        v52 = v15[4] == (_QWORD)__s2;
      v53 = v52;
      if (v49 >= 0x41)
      {
        if (v50)
        {
          MEMORY[0x1CAA32F9C](v50, 0x1000C8000313F17);
          if (__src >= 0x41)
          {
            if (__s2)
              MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
          }
        }
      }
      if (!v53)
        return 0;
      v16 = *v17;
      v18 = *v17;
    }
    if (v18 == 2)
      goto LABEL_31;
    if ((v16 & 0xFE) != 4)
      goto LABEL_112;
    v54 = *((unsigned int *)v15 + 6);
    LODWORD(__src) = v54;
    if (v54 > 0x40)
    {
      v66 = ((unint64_t)(v54 + 63) >> 3) & 0x3FFFFFF8;
      __s2 = (void *)operator new[]();
      memcpy(__s2, (const void *)v15[2], v66);
    }
    else
    {
      __s2 = (void *)v15[2];
    }
    llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
    v55 = __src;
    v56 = __s2;
    LODWORD(__src) = 0;
    v57 = *((unsigned int *)v15 + 10);
    if (v57 > 0x40)
      v58 = memcmp((const void *)v15[4], __s2, ((unint64_t)(v57 + 63) >> 3) & 0x3FFFFFF8) == 0;
    else
      v58 = v15[4] == (_QWORD)__s2;
    v59 = v58;
    if (v55 >= 0x41)
    {
      if (v56)
      {
        MEMORY[0x1CAA32F9C](v56, 0x1000C8000313F17);
        if (__src >= 0x41)
        {
          if (__s2)
            MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
        }
      }
    }
    if (v59)
LABEL_31:
      v20 = llvm::SCCPInstVisitor::getConstant(*a1, (uint64_t)v17);
    else
LABEL_112:
      v20 = llvm::UndefValue::get(*(llvm::UndefValue **)v2, v14);
    v60 = v20;
  }
  v61 = *(unsigned __int8 *)(v2 + 16);
  if (v61 < 0x1C
    || v61 - 33 > 0x33
    || ((1 << (v61 - 33)) & 0x8000000000041) == 0
    || (v61 != 84
     || (*(_WORD *)(v2 + 18) & 3) != 2
     || llvm::Instruction::isSafeToRemove((llvm::Instruction *)v2))
    && (sub_1C5062CEC(v2, 6, (uint64_t)&__s2), !(_BYTE)__s1))
  {
    v63 = 1;
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v2, v60, (llvm::Value *)1);
    return v63;
  }
  v62 = *(_QWORD *)(v2 - 32);
  if (v62 && !*(_BYTE *)(v62 + 16) && *(_QWORD *)(v62 + 24) == *(_QWORD *)(v2 + 72))
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(*a1 + 464), v62);
  return 0;
}

uint64_t sub_1C5C0CBD8(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t *v18;
  uint64_t *v19;
  int v20;
  unsigned int v21;
  void *v22;
  uint64_t v23;
  BOOL v24;
  _BOOL4 v25;
  _DWORD *v26;
  llvm::Value *v27;
  uint64_t v28;
  int32x2_t *v29;
  int v30;
  unsigned int v32;
  void *v33;
  _BOOL4 v34;
  void *__s2;
  unsigned int v36;
  __int16 v37;

  v3 = a2 + 40;
  v4 = *(_QWORD *)(a2 + 48);
  if (v4 != a2 + 40)
  {
    v7 = 0;
    while (1)
    {
      v8 = v4 - 24;
      v24 = v4 == 0;
      v4 = *(_QWORD *)(v4 + 8);
      if (v24)
        v9 = 0;
      else
        v9 = v8;
      if (*(_BYTE *)(*(_QWORD *)v9 + 8) == 7)
        goto LABEL_20;
      if (!sub_1C5C0C31C(a1, (uint64_t *)v9))
        break;
      if ((llvm::Instruction::isSafeToRemove((llvm::Instruction *)v9) & 1) != 0)
        goto LABEL_9;
LABEL_10:
      v7 = 1;
LABEL_20:
      if (v4 == v3)
        return v7 & 1;
    }
    if (*(_BYTE *)(v9 + 16) != 68)
      goto LABEL_20;
    v12 = *(_DWORD *)(v9 + 20);
    v13 = (v12 & 0x40000000) != 0 ? *(uint64_t **)(v9 - 8) : (uint64_t *)(v9 - 32 * (v12 & 0x7FFFFFF));
    v14 = *v13;
    if (*(unsigned __int8 *)(*v13 + 16) < 0x15u)
      goto LABEL_20;
    v15 = sub_1C477672C((uint64_t)a3, v14);
    v16 = a3[1];
    v17 = v16 == *a3 ? (unsigned int *)((char *)a3 + 20) : (unsigned int *)(a3 + 2);
    if (v15 != (_QWORD *)(v16 + 8 * *v17))
      goto LABEL_20;
    v18 = sub_1C5F7EFFC((uint64_t *)(*a1 + 136), v14);
    v19 = v18;
    v20 = *((unsigned __int8 *)v18 + 8);
    if (v20 != 4)
    {
      if (v20 != 5)
        goto LABEL_20;
      v36 = *((_DWORD *)v18 + 6);
      if (v36 > 0x40)
      {
        __s2 = (void *)operator new[]();
        memcpy(__s2, (const void *)v19[2], (((unint64_t)v36 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        __s2 = (void *)v18[2];
      }
      llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
      v21 = v36;
      v22 = __s2;
      v36 = 0;
      v23 = *((unsigned int *)v19 + 10);
      if (v23 > 0x40)
      {
        v33 = __s2;
        v32 = v21;
        v30 = memcmp((const void *)v19[4], __s2, ((unint64_t)(v23 + 63) >> 3) & 0x3FFFFFF8);
        v21 = v32;
        v22 = v33;
        v24 = v30 == 0;
      }
      else
      {
        v24 = v19[4] == (_QWORD)__s2;
      }
      v25 = v24;
      if (v21 >= 0x41)
      {
        if (v22)
        {
          v34 = v25;
          MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
          v25 = v34;
          if (v36 >= 0x41)
          {
            if (__s2)
            {
              MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
              v25 = v34;
            }
          }
        }
      }
      if (!v25)
        goto LABEL_20;
    }
    if (!llvm::ConstantRange::isAllNonNegative((llvm::ConstantRange *)(v19 + 2)))
      goto LABEL_20;
    v26 = operator new(0x60uLL);
    v27 = (llvm::Value *)(v26 + 8);
    v26[13] = v26[13] & 0x38000000 | 1;
    *(_QWORD *)v26 = 0;
    *((_QWORD *)v26 + 1) = 0;
    *((_QWORD *)v26 + 2) = 0;
    *((_QWORD *)v26 + 3) = v26 + 8;
    v28 = *(_QWORD *)v9;
    v37 = 257;
    llvm::ZExtInst::ZExtInst((uint64_t)(v26 + 8), v14, v28, (uint64_t)&__s2, v9);
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)v27);
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v9, v27, (llvm::Value *)1);
    v29 = (int32x2_t *)*a1;
    __s2 = (void *)v9;
    sub_1C5F7EF30(v29 + 17, &__s2);
LABEL_9:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v9 + 40) + 40, (uint64_t ***)v9);
    v10 = *(_QWORD *)(v9 + 24);
    v11 = *(_QWORD **)(v9 + 32);
    *v11 = v10;
    *(_QWORD *)(v10 + 8) = v11;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v9);
    goto LABEL_10;
  }
  v7 = 0;
  return v7 & 1;
}

void *sub_1C5C0CEDC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  void *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  llvm::BasicBlock *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;

  v6 = *a3;
  result = sub_1C477672C(*a3 + 624, a1);
  v8 = *(_QWORD *)(v6 + 632);
  v9 = 640;
  if (v8 == *(_QWORD *)(v6 + 624))
    v9 = 644;
  if (result != (void *)(v8 + 8 * *(unsigned int *)(v6 + v9)))
  {
    v10 = *a3;
    result = sub_1C477672C(v10 + 464, a1);
    v11 = *(_QWORD *)(v10 + 472);
    v12 = 480;
    if (v11 == *(_QWORD *)(v10 + 464))
      v12 = 484;
    if (result == (void *)(v11 + 8 * *(unsigned int *)(v10 + v12)))
    {
      for (i = *(_QWORD *)(a1 + 80); i != a1 + 72; i = *(_QWORD *)(i + 8))
      {
        if (i)
          v14 = (llvm::BasicBlock *)(i - 24);
        else
          v14 = 0;
        result = (void *)llvm::BasicBlock::getTerminatingMustTailCall(v14);
        if (result)
          break;
        v15 = (_QWORD *)*((_QWORD *)v14 + 5);
        if (v15 != (_QWORD *)((char *)v14 + 40))
        {
          v16 = v15 ? (uint64_t)(v15 - 3) : 0;
          v17 = *(unsigned __int8 *)(v16 + 16) - 40;
          v18 = v17 >= 0xFFFFFFF5 ? v16 : 0;
          if (v15)
          {
            v19 = *(_BYTE *)(v18 + 16) == 29 && v17 >= 0xFFFFFFF5;
            if (v19
              && *(unsigned __int8 *)(*(_QWORD *)(v18 - 32 * (*(_DWORD *)(v18 + 20) & 0x7FFFFFF)) + 16)
               - 11 >= 2)
            {
              v20 = *(unsigned int *)(a2 + 8);
              if (v20 >= *(unsigned int *)(a2 + 12))
              {
                result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v20 + 1, 8);
                v20 = *(unsigned int *)(a2 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a2 + 8 * v20) = v18;
              ++*(_DWORD *)(a2 + 8);
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1C5C0D054()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5C0D068(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E81974D8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5C0D09C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E81974D8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C5C0D0B8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_1C5C0D0C0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5C0A84C(v0);
}

void sub_1C5C0D0EC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5C0D110(uint64_t a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C5C0D154(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  char **v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void **v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16[2];
  int v17;
  uint64_t v18[2];
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  void *__src;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0)
    return 0;
  v5 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != llvm::TargetLibraryInfoWrapperPass::ID);
  v7 = *((_QWORD *)a2 + 5) + 272;
  v8 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  llvm::TargetLibraryAnalysis::run(v8 + 32, (uint64_t)a2, (uint64_t)&v23);
  *(_QWORD *)(v8 + 240) = v23;
  if (!*(_BYTE *)(v8 + 320))
  {
    v12 = (void *)(v8 + 264);
    *(_QWORD *)(v8 + 248) = v8 + 264;
    v13 = (void **)(v8 + 248);
    *(_QWORD *)(v8 + 256) = 0x600000000;
    v14 = v25;
    if (!v25 || v13 == &__src)
      goto LABEL_31;
    if (v25 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 248, v8 + 264, v25, 8);
      v15 = v25;
      if (!v25)
      {
LABEL_30:
        *(_DWORD *)(v8 + 256) = v14;
LABEL_31:
        *(_DWORD *)(v8 + 312) = v27;
        *(_BYTE *)(v8 + 320) = 1;
        goto LABEL_19;
      }
      v12 = *v13;
    }
    else
    {
      v15 = v25;
    }
    memcpy(v12, __src, 8 * v15);
    goto LABEL_30;
  }
  if ((uint64_t *)(v8 + 240) != &v23)
  {
    v9 = (void **)(v8 + 248);
    v10 = v25;
    v11 = *(unsigned int *)(v8 + 256);
    if (v11 >= v25)
    {
      if (v25)
        memmove(*v9, __src, 8 * v25);
      goto LABEL_17;
    }
    if (*(_DWORD *)(v8 + 260) < v25)
    {
      *(_DWORD *)(v8 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 248, v8 + 264, v10, 8);
    }
    else if ((_DWORD)v11)
    {
      memmove(*v9, __src, 8 * v11);
      goto LABEL_15;
    }
    v11 = 0;
LABEL_15:
    if (v11 != v25)
      memcpy((char *)*v9 + 8 * v11, (char *)__src + 8 * v11, 8 * v25 - 8 * v11);
LABEL_17:
    *(_DWORD *)(v8 + 256) = v10;
  }
  *(_DWORD *)(v8 + 312) = v27;
LABEL_19:
  if (__src != &v26)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v18);
  sub_1C4D8B52C(v16);
  return sub_1C5C0A5A8((uint64_t)a2, v7, v8 + 240);
}

void sub_1C5C0D3D0(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v7 = *((_WORD *)v6 - 20);
        v6 -= 40;
        if ((v7 & 0xFE) == 4)
        {
          if (*((_DWORD *)v4 - 2) >= 0x41u)
          {
            v8 = *((_QWORD *)v4 - 2);
            if (v8)
              MEMORY[0x1CAA32F9C](v8, 0x1000C8000313F17);
          }
          if (*((_DWORD *)v4 - 6) >= 0x41u)
          {
            v9 = *((_QWORD *)v4 - 4);
            if (v9)
              MEMORY[0x1CAA32F9C](v9, 0x1000C8000313F17);
          }
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C5C0D4B4(uint64_t a1, __int128 *a2, __int128 *a3)
{
  unsigned int v6;
  __int128 v7;
  unsigned int v8;
  __int128 *v9;
  __int128 v10;
  unsigned int v11;
  __int128 *v12;
  __int128 v13;
  void *v14;
  int v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  _BYTE *v19;
  int v20;
  _BYTE *v21;
  unsigned int v22;
  _BYTE *v23;
  unsigned int v24;
  unsigned int v25;
  _BYTE *v26;
  unsigned int v27;
  _BYTE *v28;
  __int128 v29;
  __int128 v30;
  void *v31;
  unint64_t v32;
  _BYTE v33[32];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void *__dst;
  unint64_t v38;
  _BYTE v39[32];
  __int128 v40;
  uint64_t v41;

  v6 = 0;
  v41 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v35 = *a2;
  v36 = v7;
  __dst = v39;
  v38 = 0x400000000;
  if (&v35 != a2)
  {
    v8 = *((_DWORD *)a2 + 10);
    if (v8)
    {
      v9 = (__int128 *)*((_QWORD *)a2 + 4);
      if (v9 != a2 + 3)
      {
        __dst = (void *)*((_QWORD *)a2 + 4);
        v38 = __PAIR64__(*((_DWORD *)a2 + 11), v8);
        *((_QWORD *)a2 + 4) = a2 + 3;
        *((_DWORD *)a2 + 11) = 0;
LABEL_5:
        *((_DWORD *)a2 + 10) = 0;
        v6 = v8;
        goto LABEL_6;
      }
      v21 = v39;
      v22 = *((_DWORD *)a2 + 10);
      if (v8 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v39, *((unsigned int *)a2 + 10), 8);
        v22 = *((_DWORD *)a2 + 10);
        if (!v22)
        {
LABEL_31:
          LODWORD(v38) = v8;
          goto LABEL_5;
        }
        v9 = (__int128 *)*((_QWORD *)a2 + 4);
        v21 = __dst;
      }
      memcpy(v21, v9, 8 * v22);
      goto LABEL_31;
    }
  }
LABEL_6:
  v40 = a2[5];
  v10 = a3[1];
  v29 = *a3;
  v30 = v10;
  v31 = v33;
  v32 = 0x400000000;
  if (&v29 == a3)
  {
    v11 = 0;
    goto LABEL_11;
  }
  v11 = *((_DWORD *)a3 + 10);
  if (v11)
  {
    v12 = (__int128 *)*((_QWORD *)a3 + 4);
    if (v12 != a3 + 3)
    {
      v31 = (void *)*((_QWORD *)a3 + 4);
      v32 = __PAIR64__(*((_DWORD *)a3 + 11), v11);
      *((_QWORD *)a3 + 4) = a3 + 3;
      *((_DWORD *)a3 + 11) = 0;
LABEL_10:
      *((_DWORD *)a3 + 10) = 0;
      goto LABEL_11;
    }
    v23 = v33;
    v24 = *((_DWORD *)a3 + 10);
    if (v11 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, (uint64_t)v33, *((unsigned int *)a3 + 10), 8);
      v24 = *((_DWORD *)a3 + 10);
      if (!v24)
      {
LABEL_36:
        LODWORD(v32) = v11;
        v6 = v38;
        goto LABEL_10;
      }
      v12 = (__int128 *)*((_QWORD *)a3 + 4);
      v23 = v31;
    }
    memcpy(v23, v12, 8 * v24);
    goto LABEL_36;
  }
LABEL_11:
  v34 = a3[5];
  v13 = v36;
  *(_OWORD *)a1 = v35;
  *(_OWORD *)(a1 + 16) = v13;
  v14 = (void *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = a1 + 48;
  *(_QWORD *)(a1 + 40) = 0x400000000;
  if (&v35 != (__int128 *)a1 && v6)
  {
    if (__dst != v39)
    {
      *(_QWORD *)(a1 + 32) = __dst;
      v15 = HIDWORD(v38);
      *(_DWORD *)(a1 + 40) = v6;
      *(_DWORD *)(a1 + 44) = v15;
      __dst = v39;
      HIDWORD(v38) = 0;
LABEL_15:
      LODWORD(v38) = 0;
      goto LABEL_16;
    }
    if (v6 < 5)
    {
      v26 = v39;
      v25 = v6;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 32, a1 + 48, v6, 8);
      v25 = v38;
      if (!(_DWORD)v38)
      {
LABEL_45:
        *(_DWORD *)(a1 + 40) = v6;
        v11 = v32;
        goto LABEL_15;
      }
      v26 = __dst;
      v14 = *(void **)(a1 + 32);
    }
    memcpy(v14, v26, 8 * v25);
    goto LABEL_45;
  }
LABEL_16:
  v16 = (void *)(a1 + 144);
  *(_QWORD *)(a1 + 128) = a1 + 144;
  v17 = v29;
  v18 = v30;
  *(_OWORD *)(a1 + 80) = v40;
  *(_OWORD *)(a1 + 96) = v17;
  *(_OWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 136) = 0x400000000;
  v19 = v31;
  if ((__int128 *)(a1 + 96) != &v29 && v11)
  {
    if (v31 != v33)
    {
      *(_QWORD *)(a1 + 128) = v31;
      v20 = HIDWORD(v32);
      *(_DWORD *)(a1 + 136) = v11;
      *(_DWORD *)(a1 + 140) = v20;
      v31 = v33;
      HIDWORD(v32) = 0;
      v19 = v33;
LABEL_20:
      LODWORD(v32) = 0;
      goto LABEL_21;
    }
    if (v11 < 5)
    {
      v28 = v33;
      v27 = v11;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 128, a1 + 144, v11, 8);
      v27 = v32;
      if (!(_DWORD)v32)
      {
LABEL_48:
        *(_DWORD *)(a1 + 136) = v11;
        v19 = v31;
        goto LABEL_20;
      }
      v28 = v31;
      v16 = *(void **)(a1 + 128);
    }
    memcpy(v16, v28, 8 * v27);
    goto LABEL_48;
  }
LABEL_21:
  *(_OWORD *)(a1 + 176) = v34;
  if (v19 != v33)
    free(v19);
  if (__dst != v39)
    free(__dst);
}

void sub_1C5C0D804(uint64_t a1, llvm::raw_ostream *this, unint64_t *a3)
{
  _WORD *v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  llvm::raw_ostream *v13;
  int v14;
  unint64_t v15;
  size_t v16;
  _BYTE *v17;
  const char *v18;
  _WORD *v19;
  uint64_t v20;
  _BYTE *v21;

  v6 = (_WORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v6 > 1uLL)
  {
    *v6 = 8224;
    v7 = (_BYTE *)(*((_QWORD *)this + 4) + 2);
    *((_QWORD *)this + 4) = v7;
  }
  else
  {
    llvm::raw_ostream::write(this, "  ", 2uLL);
    v7 = (_BYTE *)*((_QWORD *)this + 4);
  }
  if (*((_BYTE **)this + 3) == v7)
  {
    llvm::raw_ostream::write(this, "[", 1uLL);
  }
  else
  {
    *v7 = 91;
    ++*((_QWORD *)this + 4);
  }
  sub_1C5E21910(this, *a3, 0, 0, 0);
  v8 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v8)
  {
    llvm::raw_ostream::write(this, ",", 1uLL);
  }
  else
  {
    *v8 = 44;
    ++*((_QWORD *)this + 4);
  }
  sub_1C5E21910(this, a3[1], 0, 0, 0);
  v9 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v9)
  {
    llvm::raw_ostream::write(this, ")", 1uLL);
    v10 = (_QWORD *)*((_QWORD *)this + 4);
  }
  else
  {
    *v9 = 41;
    v10 = (_QWORD *)(*((_QWORD *)this + 4) + 1);
    *((_QWORD *)this + 4) = v10;
  }
  if (*((_QWORD *)this + 3) - (_QWORD)v10 > 7uLL)
  {
    *v10 = 0x23206563696C7320;
    *((_QWORD *)this + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(this, " slice #", 8uLL);
  }
  v11 = (uint64_t)a3 - *(_QWORD *)(a1 + 16);
  v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 3);
  if (v11 < -23)
  {
    v12 = 0x5555555555555555 * (v11 >> 3);
    v13 = this;
    v14 = 1;
  }
  else
  {
    v13 = this;
    v14 = 0;
  }
  sub_1C5E21910(v13, v12, 0, 0, v14);
  v15 = a3[2];
  v16 = ((uint64_t)(v15 << 61) >> 63) & 0xD;
  v17 = (_BYTE *)*((_QWORD *)this + 4);
  if (v16 <= *((_QWORD *)this + 3) - (_QWORD)v17)
  {
    if ((v15 & 4) != 0)
    {
      qmemcpy(v17, " (splittable)", 13);
      v17 = (_BYTE *)(*((_QWORD *)this + 4) + 13);
      *((_QWORD *)this + 4) = v17;
    }
  }
  else
  {
    if ((v15 & 4) != 0)
      v18 = " (splittable)";
    else
      v18 = "";
    llvm::raw_ostream::write(this, v18, v16);
    v17 = (_BYTE *)*((_QWORD *)this + 4);
  }
  if (*((_BYTE **)this + 3) == v17)
  {
    llvm::raw_ostream::write(this, "\n", 1uLL);
    v19 = (_WORD *)*((_QWORD *)this + 4);
  }
  else
  {
    *v17 = 10;
    v19 = (_WORD *)(*((_QWORD *)this + 4) + 1);
    *((_QWORD *)this + 4) = v19;
  }
  if (*((_QWORD *)this + 3) - (_QWORD)v19 > 1uLL)
  {
    *v19 = 8224;
    v20 = *((_QWORD *)this + 4) + 2;
    *((_QWORD *)this + 4) = v20;
  }
  else
  {
    llvm::raw_ostream::write(this, "  ", 2uLL);
    v20 = *((_QWORD *)this + 4);
  }
  if ((unint64_t)(*((_QWORD *)this + 3) - v20) > 0xA)
  {
    *(_DWORD *)(v20 + 7) = 540703074;
    *(_QWORD *)v20 = *(_QWORD *)"  used by: ";
    *((_QWORD *)this + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(this, "  used by: ", 0xBuLL);
  }
  llvm::Value::print(*(llvm::Value **)((a3[2] & 0xFFFFFFFFFFFFFFF8) + 24), this, 0);
  v21 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v21)
  {
    llvm::raw_ostream::write(this, "\n", 1uLL);
  }
  else
  {
    *v21 = 10;
    ++*((_QWORD *)this + 4);
  }
}

void sub_1C5C0DB74(llvm *a1, unint64_t *a2)
{
  llvm *v4;

  v4 = llvm::dbgs(a1);
  sub_1C5C0D804((uint64_t)a1, v4, a2);
}

BOOL llvm::SROAPass::presplitLoadsAndStores(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t v5;
  unsigned int v6;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  int v12;
  unsigned int v13;
  _BYTE *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  char v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  char *v35;
  char *v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unsigned int v53;
  _QWORD *v54;
  char *v55;
  unint64_t v56;
  char *v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t *v73;
  uint64_t v74;
  _QWORD *v75;
  unsigned int v76;
  uint64_t v77;
  _QWORD *v78;
  const void *v79;
  size_t v80;
  const void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t *v86;
  uint64_t v87;
  _QWORD *v88;
  unsigned int v89;
  uint64_t v90;
  _QWORD *v91;
  const void *v92;
  size_t v93;
  const void *v94;
  char *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  char *v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  char *v111;
  uint64_t *v112;
  uint64_t v113;
  char *v114;
  uint64_t *v115;
  _BOOL8 v116;
  char v117;
  _QWORD *v118;
  uint64_t v119;
  _BOOL8 v120;
  uint64_t v121;
  _QWORD *v122;
  void *v123;
  llvm::Value **v125;
  uint64_t v126;
  unint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t **v130;
  const llvm::APInt *v131;
  const llvm::APInt *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  _QWORD *v140;
  int v141;
  llvm::PointerType *v142;
  uint64_t v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  _QWORD *v149;
  unsigned __int8 *v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  unsigned int v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  const llvm::APInt **v160;
  const llvm::APInt *v161;
  int v162;
  int v163;
  const llvm::APInt *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  unsigned __int8 *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  int v176;
  int v177;
  _QWORD *v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  unsigned __int8 *v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int v190;
  unsigned int v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  const llvm::APInt **v197;
  const llvm::APInt *v198;
  int v199;
  int v200;
  const llvm::APInt *v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  unsigned __int8 *v205;
  unint64_t v206;
  char *v207;
  char *v208;
  unsigned __int8 **v209;
  llvm::Value *v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  unsigned __int8 ***v215;
  uint64_t v216;
  int v217;
  char *v218;
  uint64_t *v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unsigned __int8 **v223;
  int v224;
  unsigned __int8 *v225;
  unsigned __int8 *v226;
  uint64_t v227;
  unsigned __int8 **v228;
  unsigned __int8 *v229;
  uint64_t v230;
  uint64_t v231;
  unsigned __int8 **v232;
  int v233;
  unsigned __int8 *v234;
  unsigned __int8 *v235;
  unsigned __int8 *v236;
  _DWORD *v237;
  _DWORD *v238;
  unsigned __int32 v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  __n128 *v244;
  uint64_t v245;
  _QWORD *v246;
  unsigned int v247;
  unint64_t *v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t *v252;
  unint64_t v253;
  int32x2_t ****v254;
  int32x2_t *v255;
  unint64_t v256;
  uint64_t v257;
  unsigned int v258;
  uint64_t v259;
  int32x2_t *****v260;
  int32x2_t ****v261;
  int v262;
  int v263;
  _QWORD *v264;
  unsigned int v265;
  unint64_t *v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v270;
  uint64_t *v271;
  unint64_t v272;
  int32x2_t ****v273;
  int32x2_t *v274;
  unint64_t v275;
  uint64_t v276;
  unsigned int v277;
  uint64_t v278;
  int32x2_t *****v279;
  int32x2_t ****v280;
  int v281;
  int v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  char *v286;
  unint64_t *v287;
  uint64_t v288;
  const llvm::APInt *v289;
  unsigned __int8 *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  _QWORD **v294;
  uint64_t *v295;
  uint64_t v296;
  _QWORD *v297;
  int v298;
  llvm::PointerType *v299;
  uint64_t v300;
  unsigned int v301;
  unsigned int v302;
  uint64_t v303;
  unsigned int v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  const llvm::APInt **v310;
  const llvm::APInt *v311;
  int v312;
  int v313;
  const llvm::APInt *v314;
  uint64_t v315;
  char *v316;
  uint64_t v317;
  unsigned __int8 *v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  int v326;
  int v327;
  _QWORD *v328;
  uint64_t v329;
  char *v330;
  uint64_t v331;
  char *v332;
  char *v333;
  llvm::Value *v334;
  uint64_t v335;
  _QWORD *v336;
  uint64_t v337;
  llvm::Value **v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  char *v342;
  llvm::Value **v343;
  llvm::Value **v344;
  llvm::Value *v345;
  int v346;
  llvm::Value *v347;
  uint64_t *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unsigned __int8 **v352;
  int v353;
  unsigned __int8 *v354;
  unsigned __int8 *v355;
  unsigned __int8 *v356;
  _DWORD *v357;
  _DWORD *v358;
  llvm::PointerType *v359;
  unsigned __int32 v360;
  unint64_t v361;
  uint64_t v362;
  char v363;
  uint64_t v364;
  const llvm::APInt *v365;
  unsigned __int8 *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unsigned int v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unsigned int v375;
  unsigned int v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  const llvm::APInt **v382;
  const llvm::APInt *v383;
  int v384;
  int v385;
  const llvm::APInt *v386;
  uint64_t v387;
  char *v388;
  uint64_t v389;
  unsigned __int8 *v390;
  unint64_t v391;
  char *v392;
  char *v393;
  unsigned __int8 **v394;
  llvm::Value *v395;
  uint64_t v396;
  _QWORD *v397;
  uint64_t v398;
  uint64_t v399;
  unsigned __int8 ***v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  unsigned __int8 **v404;
  int v405;
  unsigned __int8 *v406;
  unsigned __int8 *v407;
  unsigned __int8 *v408;
  uint64_t v409;
  uint64_t v410;
  __n128 *v411;
  uint64_t v412;
  uint64_t v413;
  _QWORD *v414;
  unsigned int v415;
  unint64_t *v416;
  unint64_t v417;
  unint64_t v418;
  unint64_t v419;
  uint64_t *v420;
  unint64_t v421;
  int32x2_t ****v422;
  int32x2_t *v423;
  unint64_t v424;
  uint64_t v425;
  unsigned int v426;
  uint64_t v427;
  int32x2_t *****v428;
  int32x2_t ****v429;
  int v430;
  int v431;
  _QWORD *v432;
  unsigned int v433;
  unint64_t *v434;
  unint64_t v435;
  unint64_t v436;
  unint64_t v437;
  uint64_t *v438;
  unint64_t v439;
  int32x2_t ****v440;
  int32x2_t *v441;
  unint64_t v442;
  uint64_t v443;
  unsigned int v444;
  uint64_t v445;
  int32x2_t *****v446;
  int32x2_t ****v447;
  int v448;
  int v449;
  uint64_t v450;
  char *v451;
  uint64_t v452;
  uint64_t v453;
  _QWORD *v454;
  uint64_t v455;
  __int128 v456;
  unint64_t v457;
  const void *v458;
  uint64_t v459;
  unint64_t v460;
  int v461;
  uint64_t v462;
  char *v463;
  uint64_t v464;
  unsigned int v465;
  char *v466;
  uint64_t v467;
  char *v468;
  uint64_t v469;
  char *v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  const std::nothrow_t *v474;
  _QWORD *v475;
  BOOL v476;
  void *v477;
  uint64_t *v478;
  uint64_t *v479;
  uint64_t *v480;
  uint64_t v481;
  _QWORD *v482;
  unsigned int *v483;
  uint64_t *v484;
  _QWORD *v485;
  unsigned int *v486;
  uint64_t v487;
  char *v488;
  char **v489;
  unsigned int *v491;
  unint64_t *v492;
  unsigned __int8 **v493;
  unsigned __int8 **v494;
  unsigned __int8 **v495;
  unsigned int v496;
  unsigned int v497;
  char *v498;
  uint64_t v499;
  unint64_t *v500;
  const llvm::APInt *v501;
  llvm::Value **v502;
  llvm::Value **v503;
  uint64_t v504;
  unsigned int *v505;
  unint64_t v506;
  uint64_t v507;
  unint64_t v508;
  unint64_t v509;
  char v510;
  uint64_t v511;
  unint64_t v512;
  _QWORD **v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t **v516;
  llvm::Value **v517;
  uint64_t *v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t **v521;
  uint64_t v523;
  uint64_t v524;
  unint64_t v525;
  unint64_t v526;
  llvm::DataLayout *v527;
  unint64_t v528;
  unsigned int v529;
  unint64_t v530;
  unsigned int v531;
  unint64_t v532;
  unsigned int v533;
  unsigned __int8 *v534;
  uint64_t v535;
  __int16 v536;
  char *v537;
  uint64_t v538;
  const char *v539;
  __int16 v540;
  unint64_t v541;
  unsigned int v542;
  char *v543;
  char *v544;
  uint64_t v545;
  int v546;
  _BYTE v547[64];
  unsigned __int8 *v548;
  uint64_t v549;
  uint64_t v550;
  unsigned int v551;
  void *v552[2];
  __int128 v553;
  void *v554;
  uint64_t v555;
  _BYTE v556[32];
  __int128 v557;
  __int128 v558;
  __int128 v559;
  void *__src;
  unsigned int v561;
  uint64_t v562;
  uint64_t v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  void *v567;
  void *__p;
  _BYTE v569[32];
  __int128 v570;
  uint64_t v571;
  _QWORD *v572;
  unsigned int v573;
  void *v574;
  uint64_t v575;
  _BYTE v576[32];
  void *v577;
  uint64_t v578;
  _BYTE v579[32];
  __int128 v580;
  __int128 v581;
  _BYTE *v582;
  uint64_t v583;
  _BYTE v584[32];
  __int128 v585;
  __n128 v586;
  int32x2_t ****v587;
  llvm::Value **v588;
  __int16 v589;
  uint64_t v590;

  v590 = *MEMORY[0x1E0C80C00];
  v577 = v579;
  v578 = 0x400000000;
  v574 = v576;
  v575 = 0x400000000;
  v571 = 1;
  for (i = 8; i != 328; i += 40)
    *(uint64_t *)((char *)&v571 + i) = -4096;
  v543 = v547;
  v544 = v547;
  v545 = 8;
  v546 = 0;
  v5 = *(_QWORD *)(a3 + 16);
  v489 = (char **)(a3 + 16);
  v6 = *(_DWORD *)(a3 + 24);
  v552[1] = 0;
  v552[0] = 0;
  *(_QWORD *)&v553 = v5;
  *((_QWORD *)&v553 + 1) = v5;
  v554 = v556;
  v555 = 0x400000000;
  v557 = v5 + 24 * (unint64_t)v6;
  if (v6)
  {
    sub_1C5C1B604(v552);
    v5 = *(_QWORD *)(a3 + 16);
    v8 = *(_DWORD *)(a3 + 24);
  }
  else
  {
    v8 = 0;
  }
  v580 = 0uLL;
  *(_QWORD *)&v581 = v5 + 24 * v8;
  *((_QWORD *)&v581 + 1) = v581;
  v582 = v584;
  v583 = 0x400000000;
  v585 = (unint64_t)v581;
  sub_1C5C0D4B4((uint64_t)&v558, (__int128 *)v552, &v580);
  if (v582 != v584)
    free(v582);
  if (v554 != v556)
    free(v554);
  *(_OWORD *)v552 = v558;
  v553 = v559;
  v554 = v556;
  v555 = 0x400000000;
  v9 = v561;
  if (v561)
  {
    if (v561 < 5)
    {
      v11 = v556;
      v10 = v561;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v554, (uint64_t)v556, v561, 8);
      v10 = v561;
      if (!v561)
      {
LABEL_15:
        LODWORD(v555) = v9;
        goto LABEL_16;
      }
      v11 = v554;
    }
    memcpy(v11, __src, 8 * v10);
    goto LABEL_15;
  }
LABEL_16:
  v504 = a1;
  v557 = v564;
  v580 = v565;
  v581 = v566;
  v582 = v584;
  v583 = 0x400000000;
  v12 = (int)__p;
  if ((_DWORD)__p)
  {
    if (__p < 5)
    {
      v14 = v584;
      v13 = __p;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v582, (uint64_t)v584, __p, 8);
      v13 = __p;
      if (!(_DWORD)__p)
      {
LABEL_22:
        LODWORD(v583) = v12;
        goto LABEL_23;
      }
      v14 = v582;
    }
    memcpy(v14, v567, 8 * v13);
    goto LABEL_22;
  }
LABEL_23:
  v585 = v570;
  while (1)
  {
    v15 = (_QWORD *)v553;
    if ((_QWORD)v553 == (_QWORD)v581 && ((_DWORD)v555 == 0) == ((_DWORD)v583 == 0))
      break;
    v16 = (_QWORD *)*((_QWORD *)&v553 + 1);
    while (v15 != v16)
    {
      v17 = v15[2];
      v18 = v17 & 0xFFFFFFFFFFFFFFF8;
      v19 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 24);
      v549 = v19;
      if ((v17 & 4) != 0 && (void *)v15[1] > v552[1])
      {
        v20 = *(unsigned __int8 *)(v19 + 16);
        if (v20 == 60 && v19 != 0)
        {
          v27 = *(_QWORD *)(v19 + 8);
          if (v27)
          {
            while (1)
            {
              v28 = *(_QWORD *)(v27 + 24);
              if (!v28 || *(_BYTE *)(v28 + 16) != 61 || (*(_WORD *)(v28 + 18) & 0x381) != 0)
                break;
              v27 = *(_QWORD *)(v27 + 8);
              if (!v27)
                goto LABEL_56;
            }
LABEL_43:
            v26 = v19;
LABEL_44:
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v543, v26);
            goto LABEL_45;
          }
LABEL_56:
          v29 = v578;
          v30 = &v577;
          if (v578 >= (unint64_t)HIDWORD(v578))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v577, (uint64_t)v579, v578 + 1, 8);
            v29 = v578;
          }
LABEL_58:
          *((_QWORD *)*v30 + v29) = v19;
          ++*((_DWORD *)v30 + 2);
          v586.n128_u64[0] = 0;
          v31 = sub_1C5C23224((uint64_t)&v571, v19, &v586);
          v32 = (_QWORD *)v586.n128_u64[0];
          if ((v31 & 1) != 0)
          {
            v35 = *(char **)(v586.n128_u64[0] + 24);
            v33 = *(_QWORD *)(v586.n128_u64[0] + 32);
            v34 = (_QWORD *)(v586.n128_u64[0] + 24);
            *(_QWORD *)(v586.n128_u64[0] + 8) = v15;
            v36 = (char *)v552[1] - *v15;
            if ((unint64_t)v35 < v33)
            {
              *(_QWORD *)v35 = v36;
              v37 = v35 + 8;
              *v34 = v37;
              v38 = v37;
LABEL_85:
              *v34 = v38;
              goto LABEL_45;
            }
            v39 = (char *)v32[2];
          }
          else
          {
            v32 = sub_1C5C232D4((uint64_t)&v571, &v549, v586.n128_u64[0]);
            v39 = 0;
            v35 = 0;
            v33 = 0;
            v32[1] = v15;
            v32[2] = 0;
            v32[3] = 0;
            v34 = v32 + 3;
            v32[4] = 0;
            *v32 = v19;
            v36 = (char *)v552[1] - *v15;
          }
          v41 = (v35 - v39) >> 3;
          v42 = v41 + 1;
          if ((unint64_t)(v41 + 1) >> 61)
            goto LABEL_699;
          v43 = v33 - (_QWORD)v39;
          if (v43 >> 2 > v42)
            v42 = v43 >> 2;
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
            v44 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v44 = v42;
          if (v44)
          {
            if (v44 >> 61)
              goto LABEL_700;
            v45 = (char *)operator new(8 * v44);
          }
          else
          {
            v45 = 0;
          }
          v46 = &v45[8 * v41];
          *(_QWORD *)v46 = v36;
          v38 = v46 + 8;
          while (v35 != v39)
          {
            v47 = *((_QWORD *)v35 - 1);
            v35 -= 8;
            *((_QWORD *)v46 - 1) = v47;
            v46 -= 8;
          }
          v32[2] = v46;
          *v34 = v38;
          v32[4] = &v45[8 * v44];
          if (v39)
            operator delete(v39);
          goto LABEL_85;
        }
        if (v20 == 61 && v19 != 0)
        {
          v23 = *(_DWORD *)(v19 + 20);
          v24 = (v23 & 0x40000000) != 0 ? *(_QWORD *)(v19 - 8) : v19 - 32 * (v23 & 0x7FFFFFF);
          if (v24 + 32 == v18)
          {
            v40 = *(_QWORD *)(v19 - 64);
            if (v40)
            {
              if (*(_BYTE *)(v40 + 16) == 60 && (*(_WORD *)(v40 + 18) & 0x381) == 0)
              {
                v29 = v575;
                v30 = &v574;
                if (v575 >= (unint64_t)HIDWORD(v575))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v574, (uint64_t)v576, v575 + 1, 8);
                  v29 = v575;
                }
                goto LABEL_58;
              }
            }
          }
        }
      }
      else
      {
        v25 = *(unsigned __int8 *)(v19 + 16);
        if (v19 && v25 == 60)
          goto LABEL_43;
        if (v19)
        {
          if (v25 == 61)
          {
            v26 = *(_QWORD *)(v19 - 64);
            if (v26)
            {
              if (*(_BYTE *)(v26 + 16) == 60)
                goto LABEL_44;
            }
          }
        }
      }
LABEL_45:
      v15 += 3;
    }
    if ((_DWORD)v555)
    {
      v48 = (char *)v554;
      v49 = (char *)v554 + 8 * v555;
      do
      {
        v50 = *(_QWORD *)v48;
        v51 = sub_1C5C108A8((uint64_t)&v571, *(_QWORD *)((*(_QWORD *)(*(_QWORD *)v48 + 16) & 0xFFFFFFFFFFFFFFF8) + 24));
        v52 = &v572;
        if ((v571 & 1) == 0)
          v52 = v572;
        v53 = v573;
        if ((v571 & 1) != 0)
          v53 = 8;
        if (&v52[5 * v53] != (_QWORD *)v51 && (void *)*(_QWORD *)(v50 + 8) > v552[1])
        {
          v54 = (_QWORD *)v51;
          v55 = (char *)v552[1] - **(_QWORD **)(v51 + 8);
          v57 = *(char **)(v51 + 24);
          v56 = *(_QWORD *)(v51 + 32);
          if ((unint64_t)v57 >= v56)
          {
            v59 = *(char **)(v51 + 16);
            v60 = (v57 - v59) >> 3;
            v61 = v60 + 1;
            if ((unint64_t)(v60 + 1) >> 61)
              goto LABEL_699;
            v62 = v56 - (_QWORD)v59;
            if (v62 >> 2 > v61)
              v61 = v62 >> 2;
            if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
              v63 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v63 = v61;
            if (v63)
            {
              if (v63 >> 61)
                goto LABEL_700;
              v64 = (char *)operator new(8 * v63);
            }
            else
            {
              v64 = 0;
            }
            v65 = &v64[8 * v60];
            *(_QWORD *)v65 = v55;
            v58 = v65 + 8;
            while (v57 != v59)
            {
              v66 = *((_QWORD *)v57 - 1);
              v57 -= 8;
              *((_QWORD *)v65 - 1) = v66;
              v65 -= 8;
            }
            v54[2] = v65;
            v54[3] = v58;
            v54[4] = &v64[8 * v63];
            if (v59)
              operator delete(v59);
          }
          else
          {
            *(_QWORD *)v57 = v55;
            v58 = v57 + 8;
          }
          v54[3] = v58;
        }
        v48 += 8;
      }
      while (v48 != v49);
    }
    sub_1C5C1B604(v552);
  }
  if (v582 != v584)
    free(v582);
  if (v554 != v556)
    free(v554);
  if (v567 != v569)
    free(v567);
  if (__src != &v562)
    free(__src);
  v67 = (char *)v574;
  if (!(_DWORD)v575)
    goto LABEL_154;
  v68 = (char *)v574 + 8 * v575;
  v69 = 8 * v575 - 8;
  do
  {
    v70 = *(_QWORD *)v67;
    v71 = *(_QWORD *)(*(_QWORD *)v67 - 64);
    v72 = (char *)sub_1C477672C((uint64_t)&v543, v71);
    v73 = v544 == v543 ? (uint64_t *)((char *)&v545 + 4) : &v545;
    if (v72 != &v544[8 * *(unsigned int *)v73])
      break;
    v74 = sub_1C5C108A8((uint64_t)&v571, v71);
    v75 = &v572;
    if ((v571 & 1) != 0)
    {
      v76 = 8;
    }
    else
    {
      v75 = v572;
      v76 = v573;
    }
    if (&v75[5 * v76] != (_QWORD *)v74)
    {
      v77 = v74;
      *(_QWORD *)&v558 = v70;
      v78 = sub_1C5C109EC((uint64_t)&v571, (uint64_t *)&v558);
      v79 = *(const void **)(v77 + 16);
      v80 = *(_QWORD *)(v77 + 24) - (_QWORD)v79;
      v81 = (const void *)v78[1];
      if (v80 != v78[2] - (_QWORD)v81 || memcmp(v79, v81, v80))
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v543, v71);
        break;
      }
    }
    v67 += 8;
    v69 -= 8;
  }
  while (v67 != v68);
  if (v67 + 8 == v68)
  {
LABEL_154:
    v68 = v67;
  }
  else
  {
    v82 = 8;
    v68 = v67;
    do
    {
      v83 = *(_QWORD *)&v67[v82];
      v84 = *(_QWORD *)(v83 - 64);
      v85 = (char *)sub_1C477672C((uint64_t)&v543, v84);
      if (v544 == v543)
        v86 = (uint64_t *)((char *)&v545 + 4);
      else
        v86 = &v545;
      if (v85 == &v544[8 * *(unsigned int *)v86])
      {
        v87 = sub_1C5C108A8((uint64_t)&v571, v84);
        v88 = &v572;
        if ((v571 & 1) != 0)
        {
          v89 = 8;
        }
        else
        {
          v88 = v572;
          v89 = v573;
        }
        if (&v88[5 * v89] == (_QWORD *)v87
          || (v90 = v87,
              *(_QWORD *)&v558 = v83,
              v91 = sub_1C5C109EC((uint64_t)&v571, (uint64_t *)&v558),
              v92 = *(const void **)(v90 + 16),
              v93 = *(_QWORD *)(v90 + 24) - (_QWORD)v92,
              v94 = (const void *)v91[1],
              v93 == v91[2] - (_QWORD)v94)
          && !memcmp(v92, v94, v93))
        {
          *(_QWORD *)v68 = *(_QWORD *)&v67[v82];
          v68 += 8;
        }
        else
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v543, v84);
        }
      }
      v82 += 8;
      v69 -= 8;
    }
    while (v69);
  }
  v95 = (char *)v574;
  v96 = (unint64_t)(v68 - (_BYTE *)v574) >> 3;
  LODWORD(v575) = v96;
  if (!(_DWORD)v96)
    goto LABEL_172;
  v97 = (char *)v574 + 8 * v96;
  v98 = 8 * ((unint64_t)(v68 - (_BYTE *)v574) >> 3) - 8;
  v99 = (char *)v574;
  do
  {
    v100 = *(_QWORD *)v99;
    v99 += 8;
    v101 = (char *)sub_1C477672C((uint64_t)&v543, *(_QWORD *)(v100 - 64));
    v102 = v544 == v543 ? (uint64_t *)((char *)&v545 + 4) : &v545;
    if (v101 != &v544[8 * *(unsigned int *)v102])
      break;
    v98 -= 8;
    v95 = v99;
  }
  while (v99 != v97);
  if (v99 == v97)
  {
LABEL_172:
    v97 = v95;
  }
  else
  {
    v103 = 8;
    v97 = v95;
    do
    {
      v104 = (char *)sub_1C477672C((uint64_t)&v543, *(_QWORD *)(*(_QWORD *)&v95[v103] - 64));
      if (v544 == v543)
        v105 = (uint64_t *)((char *)&v545 + 4);
      else
        v105 = &v545;
      if (v104 == &v544[8 * *(unsigned int *)v105])
      {
        *(_QWORD *)v97 = *(_QWORD *)&v95[v103];
        v97 += 8;
      }
      v103 += 8;
      v98 -= 8;
    }
    while (v98);
  }
  LODWORD(v575) = (unint64_t)(v97 - (_BYTE *)v574) >> 3;
  v106 = (uint64_t *)v577;
  if (!(_DWORD)v578)
    goto LABEL_190;
  v107 = (uint64_t *)((char *)v577 + 8 * v578);
  v108 = 8 * v578 - 8;
  v109 = (uint64_t *)v577;
  do
  {
    v110 = *v109++;
    v111 = (char *)sub_1C477672C((uint64_t)&v543, v110);
    v112 = v544 == v543 ? (uint64_t *)((char *)&v545 + 4) : &v545;
    if (v111 != &v544[8 * *(unsigned int *)v112])
      break;
    v108 -= 8;
    v106 = v109;
  }
  while (v109 != v107);
  if (v109 == v107)
  {
LABEL_190:
    v107 = v106;
  }
  else
  {
    v113 = 1;
    v107 = v106;
    do
    {
      v114 = (char *)sub_1C477672C((uint64_t)&v543, v106[v113]);
      if (v544 == v543)
        v115 = (uint64_t *)((char *)&v545 + 4);
      else
        v115 = &v545;
      if (v114 == &v544[8 * *(unsigned int *)v115])
        *v107++ = v106[v113];
      ++v113;
      v108 -= 8;
    }
    while (v108);
  }
  LODWORD(v578) = (unint64_t)((char *)v107 - (_BYTE *)v577) >> 3;
  v116 = (v578 | v575) != 0;
  if (v578 | v575)
  {
    sub_1C5C10908((uint64_t)&v558, (uint64_t **)a2);
    v552[0] = &v553;
    v552[1] = (void *)0x400000000;
    *(_QWORD *)&v580 = &v582;
    *((_QWORD *)&v580 + 1) = &v582;
    *(_QWORD *)&v581 = 4;
    DWORD2(v581) = 0;
    v549 = 1;
    v550 = -4096;
    v527 = (llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40) + 272);
    v125 = 0;
    if (!(_DWORD)v578)
    {
      v126 = v504;
      goto LABEL_214;
    }
    v517 = 0;
    v287 = (unint64_t *)v577;
    v498 = (char *)v577 + 8 * v578;
    v505 = (unsigned int *)(v504 + 192);
    while (1)
    {
      v500 = v287;
      v586.n128_u64[0] = *v287;
      v519 = v586.n128_u64[0];
      v521 = (uint64_t **)sub_1C5C109EC((uint64_t)&v571, (uint64_t *)&v586);
      v288 = (*v521)[1];
      v514 = **v521;
      v289 = *(const llvm::APInt **)(v519 - 32);
      v562 = *(_QWORD *)(v519 + 40);
      v563 = v519 + 24;
      v290 = *(unsigned __int8 **)(v519 + 48);
      v586.n128_u64[0] = (unint64_t)v290;
      if (v290)
      {
        llvm::MetadataTracking::track((uint64_t)&v586, v290, 2);
        v291 = v586.n128_u64[0];
      }
      else
      {
        v291 = 0;
      }
      sub_1C4774EF4((uint64_t)&v558, 0, v291);
      if (v586.n128_u64[0])
        llvm::MetadataTracking::untrack((uint64_t)&v586, (unsigned __int8 *)v586.n128_u64[0]);
      v292 = 0;
      v293 = 0;
      v294 = (_QWORD **)v519;
      v295 = v521[1];
      v509 = (unint64_t)((char *)v521[2] - (char *)v295) >> 3;
      v296 = *v295;
      v507 = (v288 - v514);
      v526 = (unint64_t)v125;
      while (1)
      {
        v297 = (_QWORD *)**v294;
        v298 = 8 * v296;
        v586.n128_u32[0] = 8 * v296;
        v524 = v296;
        if (8 * (int)v296 <= 63)
        {
          switch(v298)
          {
            case 32:
              v299 = (llvm::PointerType *)(*v297 + 1960);
              goto LABEL_430;
            case 16:
              v299 = (llvm::PointerType *)(*v297 + 1936);
              goto LABEL_430;
            case 8:
              v299 = (llvm::PointerType *)(*v297 + 1912);
              goto LABEL_430;
          }
        }
        else
        {
          if (v298 == 64)
          {
            v299 = (llvm::PointerType *)(*v297 + 1984);
            goto LABEL_430;
          }
          if (v298 == 128)
          {
            v299 = (llvm::PointerType *)(*v297 + 2008);
            goto LABEL_430;
          }
        }
        v357 = sub_1C5270984(*v297 + 2168, &v586);
        v294 = (_QWORD **)v519;
        v299 = (llvm::PointerType *)*((_QWORD *)v357 + 1);
        if (!v299)
        {
          v358 = v357;
          v359 = (llvm::PointerType *)sub_1C484358C(*v297 + 2040, 24, 3);
          v294 = (_QWORD **)v519;
          v299 = v359;
          v360 = v586.n128_u32[0];
          *(_QWORD *)v359 = v297;
          *((_QWORD *)v359 + 2) = 0;
          *((_QWORD *)v359 + 1) = (v360 << 8) | 0xD;
          *((_QWORD *)v358 + 1) = v359;
        }
LABEL_430:
        v300 = **(v294 - 4);
        v301 = *(_DWORD *)(v300 + 8);
        if ((v301 & 0xFE) == 0x12)
          v301 = *(_DWORD *)(**(_QWORD **)(v300 + 16) + 8);
        v302 = v301 >> 8;
        v303 = llvm::PointerType::get(v299, (llvm::Type *)(v301 >> 8));
        v304 = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(v527, v302) + 12);
        v542 = v304;
        if (v304 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v541, v293, 0);
        }
        else
        {
          if (v304)
            v305 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v304;
          else
            v305 = 0;
          v541 = v305 & v293;
        }
        if ((*((_BYTE *)v289 + 23) & 0x10) != 0)
        {
          v306 = ***(_QWORD ***)v289;
          v307 = *(_QWORD *)(v306 + 152);
          v308 = *(unsigned int *)(v306 + 168);
          if (!(_DWORD)v308)
            goto LABEL_443;
          LODWORD(v309) = (v308 - 1) & ((v289 >> 4) ^ (v289 >> 9));
          v310 = (const llvm::APInt **)(v307 + 16 * v309);
          v311 = *v310;
          if (*v310 != v289)
          {
            v312 = 1;
            while (v311 != (const llvm::APInt *)-4096)
            {
              v313 = v309 + v312++;
              v309 = v313 & (v308 - 1);
              v311 = *(const llvm::APInt **)(v307 + 16 * v309);
              if (v311 == v289)
              {
                v310 = (const llvm::APInt **)(v307 + 16 * v309);
                goto LABEL_444;
              }
            }
LABEL_443:
            v310 = (const llvm::APInt **)(v307 + 16 * v308);
          }
LABEL_444:
          v314 = v310[1];
          v317 = *(_QWORD *)v314;
          v316 = (char *)v314 + 16;
          v315 = v317;
          goto LABEL_445;
        }
        v315 = 0;
        v316 = &byte_1C871356D;
LABEL_445:
        v540 = 773;
        v537 = v316;
        v538 = v315;
        v539 = ".";
        v318 = sub_1C5C10A54((uint64_t)&v558, v527, v289, (void **)&v541, v303, (uint64_t)&v537);
        v319 = *(unsigned __int16 *)(v519 + 18);
        if ((*(_BYTE *)(v519 + 23) & 0x10) != 0)
        {
          v320 = ***(_QWORD ***)v519;
          v321 = *(_QWORD *)(v320 + 152);
          v322 = *(unsigned int *)(v320 + 168);
          if (!(_DWORD)v322)
            goto LABEL_452;
          LODWORD(v323) = (v322 - 1) & ((v519 >> 4) ^ (v519 >> 9));
          v324 = (uint64_t *)(v321 + 16 * v323);
          v325 = *v324;
          if (*v324 != v519)
          {
            v326 = 1;
            while (v325 != -4096)
            {
              v327 = v323 + v326++;
              v323 = v327 & (v322 - 1);
              v325 = *(_QWORD *)(v321 + 16 * v323);
              if (v325 == v519)
              {
                v324 = (uint64_t *)(v321 + 16 * v323);
                goto LABEL_453;
              }
            }
LABEL_452:
            v324 = (uint64_t *)(v321 + 16 * v322);
          }
LABEL_453:
          v328 = (_QWORD *)v324[1];
          v331 = *v328;
          v330 = (char *)(v328 + 2);
          v329 = v331;
          goto LABEL_454;
        }
        v329 = 0;
        v330 = &byte_1C871356D;
LABEL_454:
        v536 = 261;
        v534 = (unsigned __int8 *)v330;
        v535 = v329;
        v332 = (char *)operator new(0x60uLL);
        v333 = v332;
        v334 = (llvm::Value *)(v332 + 32);
        *((_QWORD *)v332 + 2) = 0;
        *((_QWORD *)v332 + 3) = v332 + 32;
        v589 = 257;
        *((_QWORD *)v332 + 4) = v299;
        *((_QWORD *)v332 + 5) = 0;
        *((_WORD *)v332 + 24) = 60;
        *((_DWORD *)v332 + 13) = 1;
        *(_OWORD *)(v332 + 56) = 0u;
        *(_OWORD *)(v332 + 72) = 0u;
        *((_DWORD *)v332 + 22) = 0;
        *(_QWORD *)v332 = v318;
        *((_QWORD *)v332 + 1) = 0;
        if (v318)
        {
          v337 = *((_QWORD *)v318 + 1);
          v336 = v318 + 8;
          v335 = v337;
          *((_QWORD *)v332 + 1) = v337;
          if (v337)
            *(_QWORD *)(v335 + 16) = v332 + 8;
          *((_QWORD *)v332 + 2) = v336;
          *v336 = v332;
        }
        *((_WORD *)v332 + 25) = (126
                               - 2
                               * __clz(((1 << (v319 >> 1)) | v293) & -((1 << (v319 >> 1)) | v293))) & 0x7E;
        v332[92] = 1;
        llvm::Value::setName((uint64_t ***)v332 + 4, (uint64_t)&v586);
        (*(void (**)(_QWORD, llvm::Value *, unsigned __int8 **, uint64_t, uint64_t))(*(_QWORD *)v564 + 16))(v564, v334, &v534, v562, v563);
        if (DWORD2(v558))
        {
          v350 = v558;
          v351 = v558 + 16 * DWORD2(v558);
          v352 = (unsigned __int8 **)(v333 + 80);
          do
          {
            v353 = *(_DWORD *)v350;
            v354 = *(unsigned __int8 **)(v350 + 8);
            if (v354)
            {
              if (!v353)
              {
                v548 = *(unsigned __int8 **)(v350 + 8);
                llvm::MetadataTracking::track((uint64_t)&v548, v354, 2);
                v355 = *v352;
                if (!*v352)
                {
LABEL_499:
                  v356 = v548;
                  *v352 = v548;
                  if (v356)
                    llvm::MetadataTracking::retrack((uint64_t)&v548, v356, (uint64_t)(v333 + 80));
                  goto LABEL_496;
                }
LABEL_493:
                llvm::MetadataTracking::untrack((uint64_t)(v333 + 80), v355);
                goto LABEL_499;
              }
            }
            else
            {
              v355 = *v352;
              if (!*v352 && (v333[55] & 0x20) == 0)
                goto LABEL_496;
              if (!v353)
              {
                v548 = 0;
                if (!v355)
                  goto LABEL_499;
                goto LABEL_493;
              }
            }
            llvm::Value::setMetadata(v334, *(_DWORD *)v350, (llvm::MDNode *)v354);
LABEL_496:
            v350 += 16;
          }
          while (v350 != v351);
        }
        if (v542 >= 0x41 && v541)
          MEMORY[0x1CAA32F9C](v541, 0x1000C8000313F17);
        v586.n128_u64[0] = 0x190000000ALL;
        llvm::Instruction::copyMetadata((uint64_t)v334, v519, (int *)&v586, 2);
        if (v125 >= v517)
        {
          v338 = (llvm::Value **)v526;
          v339 = (uint64_t)((uint64_t)v125 - v526) >> 3;
          v340 = v339 + 1;
          if ((unint64_t)(v339 + 1) >> 61)
LABEL_699:
            abort();
          if ((uint64_t)((uint64_t)v517 - v526) >> 2 > v340)
            v340 = (uint64_t)((uint64_t)v517 - v526) >> 2;
          v341 = (unint64_t)v517 - v526 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v340;
          if (v341)
          {
            if (v341 >> 61)
LABEL_700:
              sub_1C4764EE4();
            v342 = (char *)operator new(8 * v341);
            v338 = (llvm::Value **)v526;
          }
          else
          {
            v342 = 0;
          }
          v343 = (llvm::Value **)&v342[8 * v339];
          *v343 = v334;
          v344 = v343 + 1;
          if (v125 != v338)
          {
            do
            {
              v345 = *--v125;
              *--v343 = v345;
            }
            while (v125 != v338);
            v125 = v338;
          }
          v526 = (unint64_t)v343;
          v517 = (llvm::Value **)&v342[8 * v341];
          if (v125)
            operator delete(v125);
          v125 = v344;
        }
        else
        {
          *v125++ = v334;
        }
        v346 = *((_DWORD *)v333 + 13);
        v347 = (v346 & 0x40000000) != 0
             ? (llvm::Value *)*((_QWORD *)v333 + 3)
             : (llvm::Value *)((char *)v334 - 32 * (v346 & 0x7FFFFFF));
        v586.n128_u64[0] = v293 + v514;
        v586.n128_u64[1] = v293 + v514 + v524;
        v587 = (int32x2_t ****)((unint64_t)v347 & 0xFFFFFFFFFFFFFFFBLL);
        sub_1C4AB8FDC((uint64_t)v552, &v586);
        if (v292 == (v509 & ~((int)v509 >> 31)))
          break;
        v348 = v521[1];
        v349 = v507;
        v294 = (_QWORD **)v519;
        if ((int)v292 + 1 < (int)v509)
          v349 = v348[v292 + 1];
        v293 = v348[v292];
        v296 = v349 - v293;
        ++v292;
      }
      v361 = v519;
      v362 = *(_QWORD *)(v519 + 8);
      if (!v362)
      {
        v125 = (llvm::Value **)v526;
        v126 = v504;
        goto LABEL_616;
      }
      v363 = 0;
      v512 = ((unint64_t)v125 - v526) >> 3;
      v126 = v504;
      v503 = v125;
      while (1)
      {
        v510 = v363;
LABEL_514:
        v364 = *(_QWORD *)(v362 + 24);
        if (!(_DWORD)v575 || (sub_1C5C23224((uint64_t)&v571, *(_QWORD *)(v362 + 24), &v586) & 1) == 0)
          break;
        v362 = *(_QWORD *)(v362 + 8);
        v363 = 1;
        v361 = v519;
        if (!v362)
          goto LABEL_642;
      }
      v515 = v362;
      v365 = *(const llvm::APInt **)(v364 - 32);
      v562 = *(_QWORD *)(v364 + 40);
      v563 = v364 + 24;
      v366 = *(unsigned __int8 **)(v364 + 48);
      v586.n128_u64[0] = (unint64_t)v366;
      if (v366)
      {
        llvm::MetadataTracking::track((uint64_t)&v586, v366, 2);
        v367 = v586.n128_u64[0];
      }
      else
      {
        v367 = 0;
      }
      sub_1C4774EF4((uint64_t)&v558, 0, v367);
      if (v586.n128_u64[0])
        llvm::MetadataTracking::untrack((uint64_t)&v586, (unsigned __int8 *)v586.n128_u64[0]);
      if ((int)v512 >= 1)
      {
        v368 = 0;
        while (1)
        {
          if (v368)
            v369 = v521[1][v368 - 1];
          else
            v369 = 0;
          v370 = **(_QWORD **)(v364 - 32);
          v371 = *(_DWORD *)(v370 + 8);
          if ((v371 & 0xFE) == 0x12)
            v371 = *(_DWORD *)(**(_QWORD **)(v370 + 16) + 8);
          v372 = *(_QWORD *)(v526 + 8 * v368);
          v373 = llvm::PointerType::get(*(llvm::PointerType **)v372, (llvm::Type *)(v371 >> 8));
          v374 = **(_QWORD **)(v364 - 32);
          v375 = *(_DWORD *)(v374 + 8);
          if ((v375 & 0xFE) == 0x12)
            v375 = *(_DWORD *)(**(_QWORD **)(v374 + 16) + 8);
          v376 = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(v527, v375 >> 8) + 12);
          v533 = v376;
          if (v376 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v532, v369, 0);
          }
          else
          {
            v377 = v376 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v376 : 0;
            v532 = v377 & v369;
          }
          if ((*((_BYTE *)v365 + 23) & 0x10) != 0)
            break;
          v387 = 0;
          v388 = &byte_1C871356D;
LABEL_542:
          v540 = 773;
          v537 = v388;
          v538 = v387;
          v539 = ".";
          v390 = sub_1C5C10A54((uint64_t)&v558, v527, v365, (void **)&v532, v373, (uint64_t)&v537);
          v391 = *(unsigned __int16 *)(v364 + 18);
          v392 = (char *)operator new(0x80uLL);
          v393 = v392;
          *((_DWORD *)v392 + 21) = *((_DWORD *)v392 + 21) & 0x38000000 | 2;
          *(_QWORD *)v392 = 0;
          *((_QWORD *)v392 + 2) = 0;
          *((_QWORD *)v392 + 1) = 0;
          *((_QWORD *)v392 + 5) = 0;
          *((_QWORD *)v392 + 6) = 0;
          *((_QWORD *)v392 + 4) = 0;
          v394 = (unsigned __int8 **)(v392 + 32);
          *((_QWORD *)v392 + 8) = ***(_QWORD ***)v372 + 1576;
          v395 = (llvm::Value *)(v392 + 64);
          *((_QWORD *)v392 + 3) = v392 + 64;
          *((_QWORD *)v392 + 7) = v392 + 64;
          *((_QWORD *)v392 + 9) = 0;
          v392[80] = 61;
          v392[81] = 0;
          *((_WORD *)v392 + 41) = 0;
          *((_DWORD *)v392 + 21) = 2;
          *(_OWORD *)(v392 + 88) = 0u;
          *(_OWORD *)(v392 + 104) = 0u;
          *((_DWORD *)v392 + 30) = 0;
          *(_QWORD *)v392 = v372;
          v398 = *(_QWORD *)(v372 + 8);
          v397 = (_QWORD *)(v372 + 8);
          v396 = v398;
          *((_QWORD *)v392 + 1) = v398;
          if (v398)
            *(_QWORD *)(v396 + 16) = v392 + 8;
          *((_QWORD *)v392 + 2) = v397;
          *v397 = v392;
          if (*((_QWORD *)v392 + 4))
          {
            **((_QWORD **)v392 + 6) = *((_QWORD *)v392 + 5);
            v409 = *((_QWORD *)v392 + 5);
            if (v409)
              *(_QWORD *)(v409 + 16) = *((_QWORD *)v392 + 6);
          }
          *v394 = v390;
          if (v390)
          {
            v401 = *((_QWORD *)v390 + 1);
            v400 = (unsigned __int8 ***)(v390 + 8);
            v399 = v401;
            *((_QWORD *)v392 + 5) = v401;
            if (v401)
              *(_QWORD *)(v399 + 16) = v392 + 40;
            *((_QWORD *)v392 + 6) = v400;
            *v400 = v394;
          }
          *((_WORD *)v392 + 41) = (126
                                 - 2
                                 * __clz(((1 << (v391 >> 1)) | v369) & -((1 << (v391 >> 1)) | v369))) & 0x7E;
          v392[124] = 1;
          v589 = 257;
          (*(void (**)(_QWORD, llvm::Value *, __n128 *, uint64_t, uint64_t))(*(_QWORD *)v564 + 16))(v564, v395, &v586, v562, v563);
          if (DWORD2(v558))
          {
            v402 = v558;
            v403 = v558 + 16 * DWORD2(v558);
            v404 = (unsigned __int8 **)(v393 + 112);
            do
            {
              v405 = *(_DWORD *)v402;
              v406 = *(unsigned __int8 **)(v402 + 8);
              if (v406)
              {
                if (!v405)
                {
                  v534 = *(unsigned __int8 **)(v402 + 8);
                  llvm::MetadataTracking::track((uint64_t)&v534, v406, 2);
                  v407 = *v404;
                  if (!*v404)
                  {
LABEL_568:
                    v408 = v534;
                    *v404 = v534;
                    if (v408)
                      llvm::MetadataTracking::retrack((uint64_t)&v534, v408, (uint64_t)(v393 + 112));
                    goto LABEL_565;
                  }
LABEL_562:
                  llvm::MetadataTracking::untrack((uint64_t)(v393 + 112), v407);
                  goto LABEL_568;
                }
              }
              else
              {
                v407 = *v404;
                if (!*v404 && (v393[87] & 0x20) == 0)
                  goto LABEL_565;
                if (!v405)
                {
                  v534 = 0;
                  if (!v407)
                    goto LABEL_568;
                  goto LABEL_562;
                }
              }
              llvm::Value::setMetadata(v395, *(_DWORD *)v402, (llvm::MDNode *)v406);
LABEL_565:
              v402 += 16;
            }
            while (v402 != v403);
          }
          if (v533 >= 0x41 && v532)
            MEMORY[0x1CAA32F9C](v532, 0x1000C8000313F17);
          v586.n128_u64[0] = 0x190000000ALL;
          llvm::Instruction::copyMetadata((uint64_t)v395, v364, (int *)&v586, 2);
          if (++v368 == v512)
            goto LABEL_574;
        }
        v378 = ***(_QWORD ***)v365;
        v379 = *(_QWORD *)(v378 + 152);
        v380 = *(unsigned int *)(v378 + 168);
        if ((_DWORD)v380)
        {
          LODWORD(v381) = (v380 - 1) & ((v365 >> 4) ^ (v365 >> 9));
          v382 = (const llvm::APInt **)(v379 + 16 * v381);
          v383 = *v382;
          if (*v382 == v365)
          {
LABEL_541:
            v386 = v382[1];
            v389 = *(_QWORD *)v386;
            v388 = (char *)v386 + 16;
            v387 = v389;
            goto LABEL_542;
          }
          v384 = 1;
          while (v383 != (const llvm::APInt *)-4096)
          {
            v385 = v381 + v384++;
            v381 = v385 & (v380 - 1);
            v383 = *(const llvm::APInt **)(v379 + 16 * v381);
            if (v383 == v365)
            {
              v382 = (const llvm::APInt **)(v379 + 16 * v381);
              goto LABEL_541;
            }
          }
        }
        v382 = (const llvm::APInt **)(v379 + 16 * v380);
        goto LABEL_541;
      }
LABEL_574:
      if (*((_BYTE *)v365 + 16) == 59)
        v410 = (uint64_t)v365;
      else
        v410 = 0;
      v586.n128_u64[0] = v410;
      if (v410)
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v580, v410);
        v411 = &v586;
LABEL_584:
        sub_1C5C118DC(v504 + 24, (uint64_t *)v411);
        goto LABEL_585;
      }
      v537 = 0;
      v412 = llvm::Value::stripInBoundsOffsets((uint64_t)v365, (void (*)(uint64_t, uint64_t))nullsub_615, (uint64_t)&v534);
      if (*(_BYTE *)(v412 + 16) == 59)
        v413 = v412;
      else
        v413 = 0;
      v537 = (char *)v413;
      if (v413)
      {
        v411 = (__n128 *)&v537;
        goto LABEL_584;
      }
LABEL_585:
      v125 = v503;
      v126 = v504;
      v586 = (__n128)4uLL;
      v587 = (int32x2_t ****)v364;
      if (v364 != -8192 && v364 != -4096 && v364)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v586);
      v414 = (_QWORD *)sub_1C4EE497C(v505, (unint64_t)&v586, 1);
      v415 = *(_DWORD *)(v504 + 200);
      v416 = (unint64_t *)(*(_QWORD *)(v504 + 192) + 24 * v415);
      *v416 = 4;
      v416[1] = 0;
      v417 = (unint64_t)(v416 + 1);
      v418 = v414[2];
      v416[2] = v418;
      if (v418 != -8192 && v418 != -4096)
      {
        if (v418)
        {
          v419 = *v414 & 0xFFFFFFFFFFFFFFF8;
          v416[1] = *(_QWORD *)v419;
          *(_QWORD *)v419 = v416;
          *v416 = v419 | 4;
          v420 = (uint64_t *)v416[1];
          if (v420)
            *v420 = *v420 & 7 | v417;
        }
      }
      *(_DWORD *)(v504 + 200) = v415 + 1;
      v361 = v519;
      if (v587 != (int32x2_t ****)-8192 && v587 != (int32x2_t ****)-4096 && v587)
      {
        v421 = v586.n128_u64[0] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v586.n128_u64[0] & 0xFFFFFFFFFFFFFFF8) = v586.n128_u64[1];
        if (v586.n128_u64[1])
        {
          *(_QWORD *)v586.n128_u64[1] = *(_QWORD *)v586.n128_u64[1] & 7 | v421;
        }
        else
        {
          v422 = v587;
          v423 = ***v587;
          v424 = (unint64_t)v423[303];
          if (v424 <= v421)
          {
            v425 = v423[305].u32[0];
            if (v424 + 16 * v425 > v421)
            {
              v426 = v425 - 1;
              LODWORD(v427) = v426 & ((v587 >> 4) ^ (v587 >> 9));
              v428 = (int32x2_t *****)(v424 + 16 * v427);
              v429 = *v428;
              if (v587 == *v428)
              {
LABEL_605:
                *v428 = (int32x2_t ****)-8192;
                v423[304] = vadd_s32(v423[304], (int32x2_t)0x1FFFFFFFFLL);
                v422 = v587;
              }
              else
              {
                v430 = 1;
                while (v429 != (int32x2_t ****)-4096)
                {
                  v431 = v427 + v430++;
                  v427 = v431 & v426;
                  v429 = *(int32x2_t *****)(v424 + 16 * v427);
                  if (v587 == v429)
                  {
                    v428 = (int32x2_t *****)(v424 + 16 * v427);
                    goto LABEL_605;
                  }
                }
              }
              *((_BYTE *)v422 + 17) &= ~1u;
            }
          }
        }
      }
      v362 = *(_QWORD *)(v515 + 8);
      if (v362)
        goto LABEL_514;
      if ((v510 & 1) == 0)
      {
        v125 = (llvm::Value **)v526;
        goto LABEL_616;
      }
LABEL_642:
      v586.n128_u64[0] = v361;
      v586.n128_u64[1] = v526;
      v587 = (int32x2_t ****)v125;
      v588 = v517;
      sub_1C63254FC((uint64_t)&v537, (uint64_t)&v549, (uint64_t *)&v586, (uint64_t)&v586.n128_i64[1]);
      if (v586.n128_u64[1])
        operator delete((void *)v586.n128_u64[1]);
      v517 = 0;
      v125 = 0;
      v361 = v519;
LABEL_616:
      v586 = (__n128)4uLL;
      v587 = (int32x2_t ****)v361;
      if (v361 != -8192 && v361 != -4096 && v361)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v586);
      v432 = (_QWORD *)sub_1C4EE497C(v505, (unint64_t)&v586, 1);
      v433 = *(_DWORD *)(v126 + 200);
      v434 = (unint64_t *)(*(_QWORD *)(v126 + 192) + 24 * v433);
      *v434 = 4;
      v434[1] = 0;
      v435 = (unint64_t)(v434 + 1);
      v436 = v432[2];
      v434[2] = v436;
      if (v436 != -8192 && v436 != -4096)
      {
        if (v436)
        {
          v437 = *v432 & 0xFFFFFFFFFFFFFFF8;
          v434[1] = *(_QWORD *)v437;
          *(_QWORD *)v437 = v434;
          *v434 = v437 | 4;
          v438 = (uint64_t *)v434[1];
          if (v438)
            *v438 = *v438 & 7 | v435;
        }
      }
      *(_DWORD *)(v126 + 200) = v433 + 1;
      if (v587 != (int32x2_t ****)-8192 && v587 != (int32x2_t ****)-4096 && v587)
      {
        v439 = v586.n128_u64[0] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v586.n128_u64[0] & 0xFFFFFFFFFFFFFFF8) = v586.n128_u64[1];
        if (v586.n128_u64[1])
        {
          *(_QWORD *)v586.n128_u64[1] = *(_QWORD *)v586.n128_u64[1] & 7 | v439;
        }
        else
        {
          v440 = v587;
          v441 = ***v587;
          v442 = (unint64_t)v441[303];
          if (v442 <= v439)
          {
            v443 = v441[305].u32[0];
            if (v442 + 16 * v443 > v439)
            {
              v444 = v443 - 1;
              LODWORD(v445) = v444 & ((v587 >> 4) ^ (v587 >> 9));
              v446 = (int32x2_t *****)(v442 + 16 * v445);
              v447 = *v446;
              if (v587 == *v446)
              {
LABEL_636:
                *v446 = (int32x2_t ****)-8192;
                v441[304] = vadd_s32(v441[304], (int32x2_t)0x1FFFFFFFFLL);
                v440 = v587;
              }
              else
              {
                v448 = 1;
                while (v447 != (int32x2_t ****)-4096)
                {
                  v449 = v445 + v448++;
                  v445 = v449 & v444;
                  v447 = *(int32x2_t *****)(v442 + 16 * v445);
                  if (v587 == v447)
                  {
                    v446 = (int32x2_t *****)(v442 + 16 * v445);
                    goto LABEL_636;
                  }
                }
              }
              *((_BYTE *)v440 + 17) &= ~1u;
            }
          }
        }
      }
      (*v521)[2] &= 7uLL;
      v287 = v500 + 1;
      if (v500 + 1 == (unint64_t *)v498)
      {
LABEL_214:
        v502 = v125;
        if (!(_DWORD)v575)
        {
LABEL_415:
          v283 = a3;
          v284 = *(char **)(a3 + 16);
          v285 = *(unsigned int *)(a3 + 24);
          if ((_DWORD)v285)
          {
            v450 = 0;
            v451 = &v284[24 * v285];
            v452 = 24 * v285;
            v453 = 24 * v285 - 24;
            while (1)
            {
              v286 = &v284[v450];
              if (*(_QWORD *)&v284[v450 + 16] <= 7uLL)
                break;
              v450 += 24;
              if (v452 == v450)
              {
                v286 = v451;
                goto LABEL_655;
              }
            }
            if (v453 != v450)
            {
              v454 = v286 + 40;
              v455 = v452 - v450 - 24;
              do
              {
                if (*v454 >= 8uLL)
                {
                  v456 = *((_OWORD *)v454 - 1);
                  *((_QWORD *)v286 + 2) = *v454;
                  *(_OWORD *)v286 = v456;
                  v286 += 24;
                }
                v454 += 3;
                v455 -= 24;
              }
              while (v455);
              v284 = *v489;
            }
LABEL_655:
            v283 = a3;
          }
          else
          {
            v286 = *(char **)(a3 + 16);
          }
          v457 = 0xAAAAAAAAAAAAAAABLL * ((v286 - v284) >> 3);
          *(_DWORD *)(v283 + 24) = v457;
          v458 = v552[0];
          v459 = LODWORD(v552[1]);
          v460 = LODWORD(v552[1]) + (unint64_t)v457;
          v461 = v457;
          if (v460 > *(unsigned int *)(v283 + 28))
          {
            v462 = v283;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v489, v283 + 32, v460, 24);
            v283 = v462;
            v461 = *(_DWORD *)(v462 + 24);
            v284 = *(char **)(v462 + 16);
          }
          if ((_DWORD)v459)
          {
            v463 = &v284[24 * v461];
            v464 = v283;
            memcpy(v463, v458, 24 * v459);
            v283 = v464;
            v461 = *(_DWORD *)(v464 + 24);
            v284 = *(char **)(v464 + 16);
          }
          v465 = v461 + v459;
          *(_DWORD *)(v283 + 24) = v465;
          v466 = &v284[24 * (int)v457];
          v467 = 24 * v465 - 24 * (int)v457;
          if (v467 >= 48)
          {
            v468 = &v284[24 * (int)v457];
            v469 = v283;
            qsort(v468, v467 / 0x18uLL, 0x18uLL, (int (__cdecl *)(const void *, const void *))sub_1C5C1B928);
            v284 = *(char **)(v469 + 16);
            v465 = *(_DWORD *)(v469 + 24);
          }
          v470 = &v284[24 * v465];
          v471 = (v470 - v466) >> 3;
          v472 = 0xAAAAAAAAAAAAAAABLL * v471;
          if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * v471) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v466 - v284) >> 3)))
            v473 = 0xAAAAAAAAAAAAAAABLL * ((v466 - v284) >> 3);
          else
            v473 = 0xAAAAAAAAAAAAAAABLL * v471;
          if (v473 < 1)
          {
LABEL_669:
            sub_1C5C1B990(v284, v466, v470, 0xAAAAAAAAAAAAAAABLL * ((v466 - v284) >> 3), v472, 0, 0);
          }
          else
          {
            v474 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
            while (1)
            {
              v475 = operator new(24 * v473, v474);
              if (v475)
                break;
              v476 = (unint64_t)v473 >= 2;
              v473 = (unint64_t)v473 >> 1;
              if (!v476)
                goto LABEL_669;
            }
            v477 = v475;
            sub_1C5C1B990(v284, v466, v470, 0xAAAAAAAAAAAAAAABLL * ((v466 - v284) >> 3), v472, v475, v473);
            operator delete(v477);
          }
          v478 = *(uint64_t **)(v504 + 568);
          v479 = *(uint64_t **)(v504 + 576);
          if (v478 != v479)
          {
            v480 = *(uint64_t **)(v504 + 568);
            while (1)
            {
              v481 = *v480++;
              v482 = sub_1C477672C((uint64_t)&v580, v481);
              v483 = *((_QWORD *)&v580 + 1) == (_QWORD)v580
                   ? (unsigned int *)((char *)&v581 + 4)
                   : (unsigned int *)&v581;
              if (v482 != (_QWORD *)(*((_QWORD *)&v580 + 1) + 8 * *v483))
                break;
              v478 = v480;
              if (v480 == v479)
              {
                v478 = v479;
                goto LABEL_687;
              }
            }
            if (v480 != v479)
            {
              v484 = v478 + 1;
              do
              {
                v485 = sub_1C477672C((uint64_t)&v580, *v484);
                if (*((_QWORD *)&v580 + 1) == (_QWORD)v580)
                  v486 = (unsigned int *)&v581 + 1;
                else
                  v486 = (unsigned int *)&v581;
                if (v485 == (_QWORD *)(*((_QWORD *)&v580 + 1) + 8 * *v486))
                  *v478++ = *v484;
                ++v484;
              }
              while (v484 != v479);
            }
          }
LABEL_687:
          if (v478 != *(uint64_t **)(v504 + 576))
            *(_QWORD *)(v504 + 576) = v478;
          if (v502)
            operator delete(v502);
          sub_1C6325444((uint64_t)&v549);
          v116 = 1;
          if (*((_QWORD *)&v580 + 1) != (_QWORD)v580)
            free(*((void **)&v580 + 1));
          if (v552[0] != &v553)
            free(v552[0]);
          if ((v569[15] & 0x80000000) != 0)
            operator delete(__p);
          if ((__int128 *)v558 != &v559)
            free((void *)v558);
          break;
        }
        v127 = (unint64_t *)v574;
        v488 = (char *)v574 + 8 * v575;
        v487 = v126 + 24;
        v491 = (unsigned int *)(v126 + 192);
LABEL_216:
        v492 = v127;
        v129 = *(_QWORD *)(*v127 - 64);
        v513 = *(_QWORD ***)v129;
        v508 = (unint64_t)*(unsigned int *)(*(_QWORD *)v129 + 8) >> 11;
        v586.n128_u64[0] = *v127;
        v128 = v586.n128_u64[0];
        v130 = (uint64_t **)sub_1C5C109EC((uint64_t)&v571, (uint64_t *)&v586);
        v511 = **v130;
        v131 = *(const llvm::APInt **)(v129 - 32);
        v132 = *(const llvm::APInt **)(v128 - 32);
        v133 = sub_1C6324EEC((uint64_t)&v549, v129);
        v134 = 0;
        v135 = 0;
        v136 = &v550;
        if ((v549 & 1) != 0)
        {
          v137 = 1;
        }
        else
        {
          v136 = (uint64_t *)v550;
          v137 = v551;
        }
        v518 = &v136[4 * v137];
        v520 = v133;
        v138 = (unint64_t *)v130[1];
        v516 = v130;
        v506 = (unint64_t)((char *)v130[2] - (char *)v138) >> 3;
        v139 = *v138;
        v497 = (v131 >> 4) ^ (v131 >> 9);
        v499 = v129 + 24;
        v501 = v131;
        v523 = v129;
        v496 = (v129 >> 4) ^ (v129 >> 9);
        while (2)
        {
          v140 = *v513;
          v141 = 8 * v139;
          v586.n128_u32[0] = 8 * v139;
          v525 = v139;
          if (8 * (int)v139 <= 63)
          {
            if (v141 == 32)
            {
              v142 = (llvm::PointerType *)(*v140 + 1960);
              goto LABEL_227;
            }
            if (v141 == 16)
            {
              v142 = (llvm::PointerType *)(*v140 + 1936);
              goto LABEL_227;
            }
            if (v141 != 8)
              goto LABEL_344;
            v142 = (llvm::PointerType *)(*v140 + 1912);
          }
          else
          {
            if (v141 == 64)
            {
              v142 = (llvm::PointerType *)(*v140 + 1984);
              goto LABEL_227;
            }
            if (v141 == 128)
            {
              v142 = (llvm::PointerType *)(*v140 + 2008);
              goto LABEL_227;
            }
LABEL_344:
            v237 = sub_1C5270984(*v140 + 2168, &v586);
            v142 = (llvm::PointerType *)*((_QWORD *)v237 + 1);
            if (!v142)
            {
              v238 = v237;
              v142 = (llvm::PointerType *)sub_1C484358C(*v140 + 2040, 24, 3);
              v239 = v586.n128_u32[0];
              *(_QWORD *)v142 = v140;
              *((_QWORD *)v142 + 2) = 0;
              *((_QWORD *)v142 + 1) = (v239 << 8) | 0xD;
              *((_QWORD *)v238 + 1) = v142;
            }
          }
LABEL_227:
          v143 = **(_QWORD **)(v523 - 32);
          v144 = *(_DWORD *)(v143 + 8);
          if ((v144 & 0xFE) == 0x12)
            v144 = *(_DWORD *)(**(_QWORD **)(v143 + 16) + 8);
          v145 = llvm::PointerType::get(v142, (llvm::Type *)(v144 >> 8));
          v146 = **(_QWORD **)(v128 - 32);
          v147 = *(_DWORD *)(v146 + 8);
          if ((v147 & 0xFE) == 0x12)
            v147 = *(_DWORD *)(**(_QWORD **)(v146 + 16) + 8);
          v148 = llvm::PointerType::get(v142, (llvm::Type *)(v147 >> 8));
          if (v518 != (uint64_t *)v520)
          {
            v149 = *(_QWORD **)(*(_QWORD *)(v520 + 8) + 8 * v134);
            goto LABEL_270;
          }
          v562 = *(_QWORD *)(v523 + 40);
          v563 = v499;
          v150 = *(unsigned __int8 **)(v523 + 48);
          v586.n128_u64[0] = (unint64_t)v150;
          if (v150)
          {
            llvm::MetadataTracking::track((uint64_t)&v586, v150, 2);
            v151 = v586.n128_u64[0];
          }
          else
          {
            v151 = 0;
          }
          sub_1C4774EF4((uint64_t)&v558, 0, v151);
          if (v586.n128_u64[0])
            llvm::MetadataTracking::untrack((uint64_t)&v586, (unsigned __int8 *)v586.n128_u64[0]);
          v152 = **(_QWORD **)(v523 - 32);
          v153 = *(_DWORD *)(v152 + 8);
          if ((v153 & 0xFE) == 0x12)
            v153 = *(_DWORD *)(**(_QWORD **)(v152 + 16) + 8);
          v154 = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(v527, v153 >> 8) + 12);
          v531 = v154;
          if (v154 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v530, v135, 0);
          }
          else
          {
            if (v154)
              v155 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v154;
            else
              v155 = 0;
            v530 = v155 & v135;
          }
          if ((*((_BYTE *)v501 + 23) & 0x10) != 0)
          {
            v156 = ***(_QWORD ***)v501;
            v157 = *(_QWORD *)(v156 + 152);
            v158 = *(unsigned int *)(v156 + 168);
            if (!(_DWORD)v158)
              goto LABEL_250;
            LODWORD(v159) = (v158 - 1) & v497;
            v160 = (const llvm::APInt **)(v157 + 16 * v159);
            v161 = *v160;
            if (*v160 != v501)
            {
              v162 = 1;
              while (v161 != (const llvm::APInt *)-4096)
              {
                v163 = v159 + v162++;
                v159 = v163 & (v158 - 1);
                v161 = *(const llvm::APInt **)(v157 + 16 * v159);
                if (v161 == v501)
                {
                  v160 = (const llvm::APInt **)(v157 + 16 * v159);
                  goto LABEL_251;
                }
              }
LABEL_250:
              v160 = (const llvm::APInt **)(v157 + 16 * v158);
            }
LABEL_251:
            v164 = v160[1];
            v167 = *(_QWORD *)v164;
            v166 = (char *)v164 + 16;
            v165 = v167;
          }
          else
          {
            v165 = 0;
            v166 = &byte_1C871356D;
          }
          v540 = 773;
          v537 = v166;
          v538 = v165;
          v539 = ".";
          v168 = sub_1C5C10A54((uint64_t)&v558, v527, v501, (void **)&v530, v145, (uint64_t)&v537);
          v169 = *(unsigned __int16 *)(v523 + 18);
          if ((*(_BYTE *)(v523 + 23) & 0x10) != 0)
          {
            v170 = ***(_QWORD ***)v523;
            v171 = *(_QWORD *)(v170 + 152);
            v172 = *(unsigned int *)(v170 + 168);
            if (!(_DWORD)v172)
              goto LABEL_259;
            LODWORD(v173) = (v172 - 1) & v496;
            v174 = (uint64_t *)(v171 + 16 * v173);
            v175 = *v174;
            if (*v174 != v523)
            {
              v176 = 1;
              while (v175 != -4096)
              {
                v177 = v173 + v176++;
                v173 = v177 & (v172 - 1);
                v175 = *(_QWORD *)(v171 + 16 * v173);
                if (v175 == v523)
                {
                  v174 = (uint64_t *)(v171 + 16 * v173);
                  goto LABEL_260;
                }
              }
LABEL_259:
              v174 = (uint64_t *)(v171 + 16 * v172);
            }
LABEL_260:
            v178 = (_QWORD *)v174[1];
            v181 = *v178;
            v180 = (char *)(v178 + 2);
            v179 = v181;
          }
          else
          {
            v179 = 0;
            v180 = &byte_1C871356D;
          }
          v536 = 261;
          v534 = (unsigned __int8 *)v180;
          v535 = v179;
          v182 = (char *)operator new(0x60uLL);
          v183 = v182;
          v149 = v182 + 32;
          *((_QWORD *)v182 + 2) = 0;
          *((_QWORD *)v182 + 3) = v182 + 32;
          v589 = 257;
          *((_QWORD *)v182 + 4) = v142;
          *((_QWORD *)v182 + 5) = 0;
          *((_WORD *)v182 + 24) = 60;
          *((_DWORD *)v182 + 13) = 1;
          *(_OWORD *)(v182 + 56) = 0u;
          *(_OWORD *)(v182 + 72) = 0u;
          *((_DWORD *)v182 + 22) = 0;
          *(_QWORD *)v182 = v168;
          *((_QWORD *)v182 + 1) = 0;
          if (v168)
          {
            v186 = *((_QWORD *)v168 + 1);
            v185 = v168 + 8;
            v184 = v186;
            *((_QWORD *)v182 + 1) = v186;
            if (v186)
              *(_QWORD *)(v184 + 16) = v182 + 8;
            *((_QWORD *)v182 + 2) = v185;
            *v185 = v182;
          }
          *((_WORD *)v182 + 25) = (126
                                 - 2
                                 * __clz(((1 << (v169 >> 1)) | v135) & -((1 << (v169 >> 1)) | v135))) & 0x7E;
          v182[92] = 1;
          llvm::Value::setName((uint64_t ***)v182 + 4, (uint64_t)&v586);
          (*(void (**)(_QWORD, _QWORD *, unsigned __int8 **, uint64_t, uint64_t))(*(_QWORD *)v564 + 16))(v564, v149, &v534, v562, v563);
          if (!DWORD2(v558))
          {
LABEL_266:
            if (v531 >= 0x41 && v530)
              MEMORY[0x1CAA32F9C](v530, 0x1000C8000313F17);
            v586.n128_u64[0] = 0x190000000ALL;
            llvm::Instruction::copyMetadata((uint64_t)v149, v523, (int *)&v586, 2);
LABEL_270:
            v562 = *(_QWORD *)(v128 + 40);
            v563 = v128 + 24;
            v187 = *(unsigned __int8 **)(v128 + 48);
            v586.n128_u64[0] = (unint64_t)v187;
            if (v187)
            {
              llvm::MetadataTracking::track((uint64_t)&v586, v187, 2);
              v188 = v586.n128_u64[0];
            }
            else
            {
              v188 = 0;
            }
            sub_1C4774EF4((uint64_t)&v558, 0, v188);
            if (v586.n128_u64[0])
              llvm::MetadataTracking::untrack((uint64_t)&v586, (unsigned __int8 *)v586.n128_u64[0]);
            v189 = **(_QWORD **)(v128 - 32);
            v190 = *(_DWORD *)(v189 + 8);
            if ((v190 & 0xFE) == 0x12)
              v190 = *(_DWORD *)(**(_QWORD **)(v189 + 16) + 8);
            v191 = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(v527, v190 >> 8) + 12);
            v529 = v191;
            if (v191 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v528, v135, 0);
            }
            else
            {
              if (v191)
                v192 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v191;
              else
                v192 = 0;
              v528 = v192 & v135;
            }
            if ((*((_BYTE *)v132 + 23) & 0x10) != 0)
            {
              v193 = ***(_QWORD ***)v132;
              v194 = *(_QWORD *)(v193 + 152);
              v195 = *(unsigned int *)(v193 + 168);
              if (!(_DWORD)v195)
                goto LABEL_287;
              LODWORD(v196) = (v195 - 1) & ((v132 >> 4) ^ (v132 >> 9));
              v197 = (const llvm::APInt **)(v194 + 16 * v196);
              v198 = *v197;
              if (*v197 != v132)
              {
                v199 = 1;
                while (v198 != (const llvm::APInt *)-4096)
                {
                  v200 = v196 + v199++;
                  v196 = v200 & (v195 - 1);
                  v198 = *(const llvm::APInt **)(v194 + 16 * v196);
                  if (v198 == v132)
                  {
                    v197 = (const llvm::APInt **)(v194 + 16 * v196);
                    goto LABEL_288;
                  }
                }
LABEL_287:
                v197 = (const llvm::APInt **)(v194 + 16 * v195);
              }
LABEL_288:
              v201 = v197[1];
              v204 = *(_QWORD *)v201;
              v203 = (char *)v201 + 16;
              v202 = v204;
            }
            else
            {
              v202 = 0;
              v203 = &byte_1C871356D;
            }
            v540 = 773;
            v537 = v203;
            v538 = v202;
            v539 = ".";
            v205 = sub_1C5C10A54((uint64_t)&v558, v527, v132, (void **)&v528, v148, (uint64_t)&v537);
            v206 = *(unsigned __int16 *)(v128 + 18);
            v207 = (char *)operator new(0x80uLL);
            v208 = v207;
            *((_DWORD *)v207 + 21) = *((_DWORD *)v207 + 21) & 0x38000000 | 2;
            *(_QWORD *)v207 = 0;
            *((_QWORD *)v207 + 2) = 0;
            *((_QWORD *)v207 + 1) = 0;
            *((_QWORD *)v207 + 5) = 0;
            *((_QWORD *)v207 + 6) = 0;
            *((_QWORD *)v207 + 4) = 0;
            v209 = (unsigned __int8 **)(v207 + 32);
            *((_QWORD *)v207 + 8) = **(_QWORD **)*v149 + 1576;
            v210 = (llvm::Value *)(v207 + 64);
            *((_QWORD *)v207 + 3) = v207 + 64;
            *((_QWORD *)v207 + 7) = v207 + 64;
            *((_QWORD *)v207 + 9) = 0;
            v207[80] = 61;
            v207[81] = 0;
            *((_WORD *)v207 + 41) = 0;
            *((_DWORD *)v207 + 21) = 2;
            *(_OWORD *)(v207 + 88) = 0u;
            *(_OWORD *)(v207 + 104) = 0u;
            *((_DWORD *)v207 + 30) = 0;
            *(_QWORD *)v207 = v149;
            v213 = v149[1];
            v212 = v149 + 1;
            v211 = v213;
            *((_QWORD *)v207 + 1) = v213;
            if (v213)
              *(_QWORD *)(v211 + 16) = v207 + 8;
            *((_QWORD *)v207 + 2) = v212;
            *v212 = v207;
            if (*((_QWORD *)v207 + 4))
            {
              **((_QWORD **)v207 + 6) = *((_QWORD *)v207 + 5);
              v240 = *((_QWORD *)v207 + 5);
              if (v240)
                *(_QWORD *)(v240 + 16) = *((_QWORD *)v207 + 6);
            }
            *v209 = v205;
            if (v205)
            {
              v216 = *((_QWORD *)v205 + 1);
              v215 = (unsigned __int8 ***)(v205 + 8);
              v214 = v216;
              *((_QWORD *)v207 + 5) = v216;
              if (v216)
                *(_QWORD *)(v214 + 16) = v207 + 40;
              *((_QWORD *)v207 + 6) = v215;
              *v215 = v209;
            }
            *((_WORD *)v207 + 41) = (126
                                   - 2
                                   * __clz(((1 << (v206 >> 1)) | v135) & -((1 << (v206 >> 1)) | v135))) & 0x7E;
            v207[124] = 1;
            v589 = 257;
            (*(void (**)(_QWORD, llvm::Value *, __n128 *, uint64_t, uint64_t))(*(_QWORD *)v564 + 16))(v564, v210, &v586, v562, v563);
            if (!DWORD2(v558))
            {
LABEL_297:
              if (v529 >= 0x41 && v528)
                MEMORY[0x1CAA32F9C](v528, 0x1000C8000313F17);
              v586.n128_u64[0] = 0x190000000ALL;
              llvm::Instruction::copyMetadata((uint64_t)v210, v128, (int *)&v586, 2);
              v217 = *((_DWORD *)v208 + 21);
              if ((v217 & 0x40000000) != 0)
                v218 = (char *)*((_QWORD *)v208 + 7);
              else
                v218 = (char *)v210 - 32 * (v217 & 0x7FFFFFF);
              v586.n128_u64[0] = v135 + v511;
              v586.n128_u64[1] = v135 + v511 + v525;
              v587 = (int32x2_t ****)((unint64_t)(v218 + 32) & 0xFFFFFFFFFFFFFFFBLL);
              sub_1C4AB8FDC((uint64_t)v552, &v586);
              if (v134 != (v506 & ~((int)v506 >> 31)))
              {
                v219 = v516[1];
                v220 = v508;
                if ((int)v134 + 1 < (int)v506)
                  v220 = v219[v134 + 1];
                v135 = v219[v134];
                v139 = v220 - v135;
                ++v134;
                continue;
              }
              if (v518 == (uint64_t *)v520)
              {
                if (*((_BYTE *)v501 + 16) == 59)
                  v241 = (uint64_t)v501;
                else
                  v241 = 0;
                v586.n128_u64[0] = v241;
                if (v241)
                {
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v580, v241);
                  v244 = &v586;
LABEL_363:
                  sub_1C5C118DC(v487, (uint64_t *)v244);
                }
                else
                {
                  v537 = 0;
                  v242 = llvm::Value::stripInBoundsOffsets((uint64_t)v501, (void (*)(uint64_t, uint64_t))nullsub_615, (uint64_t)&v534);
                  if (*(_BYTE *)(v242 + 16) == 59)
                    v243 = v242;
                  else
                    v243 = 0;
                  v537 = (char *)v243;
                  if (v243)
                  {
                    v244 = (__n128 *)&v537;
                    goto LABEL_363;
                  }
                }
              }
              v245 = *(_QWORD *)(v523 + 8);
              if (v245 && !*(_QWORD *)(v245 + 8))
              {
                v586 = (__n128)4uLL;
                v587 = (int32x2_t ****)v523;
                if (v523 != -8192 && v523 != -4096 && v523)
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v586);
                v246 = (_QWORD *)sub_1C4EE497C(v491, (unint64_t)&v586, 1);
                v247 = *(_DWORD *)(v504 + 200);
                v248 = (unint64_t *)(*(_QWORD *)(v504 + 192) + 24 * v247);
                *v248 = 4;
                v248[1] = 0;
                v249 = (unint64_t)(v248 + 1);
                v250 = v246[2];
                v248[2] = v250;
                if (v250 != -8192 && v250 != -4096)
                {
                  if (v250)
                  {
                    v251 = *v246 & 0xFFFFFFFFFFFFFFF8;
                    v248[1] = *(_QWORD *)v251;
                    *(_QWORD *)v251 = v248;
                    *v248 = v251 | 4;
                    v252 = (uint64_t *)v248[1];
                    if (v252)
                      *v252 = *v252 & 7 | v249;
                  }
                }
                *(_DWORD *)(v504 + 200) = v247 + 1;
                if (v587 != (int32x2_t ****)-8192 && v587 != (int32x2_t ****)-4096 && v587)
                {
                  v253 = v586.n128_u64[0] & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)(v586.n128_u64[0] & 0xFFFFFFFFFFFFFFF8) = v586.n128_u64[1];
                  if (v586.n128_u64[1])
                  {
                    *(_QWORD *)v586.n128_u64[1] = *(_QWORD *)v586.n128_u64[1] & 7 | v253;
                  }
                  else
                  {
                    v254 = v587;
                    v255 = ***v587;
                    v256 = (unint64_t)v255[303];
                    if (v256 <= v253)
                    {
                      v257 = v255[305].u32[0];
                      if (v256 + 16 * v257 > v253)
                      {
                        v258 = v257 - 1;
                        LODWORD(v259) = v258 & ((v587 >> 4) ^ (v587 >> 9));
                        v260 = (int32x2_t *****)(v256 + 16 * v259);
                        v261 = *v260;
                        if (v587 == *v260)
                        {
LABEL_386:
                          *v260 = (int32x2_t ****)-8192;
                          v255[304] = vadd_s32(v255[304], (int32x2_t)0x1FFFFFFFFLL);
                          v254 = v587;
                        }
                        else
                        {
                          v262 = 1;
                          while (v261 != (int32x2_t ****)-4096)
                          {
                            v263 = v259 + v262++;
                            v259 = v263 & v258;
                            v261 = *(int32x2_t *****)(v256 + 16 * v259);
                            if (v587 == v261)
                            {
                              v260 = (int32x2_t *****)(v256 + 16 * v259);
                              goto LABEL_386;
                            }
                          }
                        }
                        *((_BYTE *)v254 + 17) &= ~1u;
                      }
                    }
                  }
                }
              }
              v586 = (__n128)4uLL;
              v587 = (int32x2_t ****)v128;
              if (v128 != -8192 && v128 != -4096 && v128)
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v586);
              v264 = (_QWORD *)sub_1C4EE497C(v491, (unint64_t)&v586, 1);
              v265 = *(_DWORD *)(v504 + 200);
              v266 = (unint64_t *)(*(_QWORD *)(v504 + 192) + 24 * v265);
              *v266 = 4;
              v266[1] = 0;
              v267 = (unint64_t)(v266 + 1);
              v268 = v264[2];
              v266[2] = v268;
              if (v268 != -8192 && v268 != -4096 && v268 != 0)
              {
                v270 = *v264 & 0xFFFFFFFFFFFFFFF8;
                v266[1] = *(_QWORD *)v270;
                *(_QWORD *)v270 = v266;
                *v266 = v270 | 4;
                v271 = (uint64_t *)v266[1];
                if (v271)
                  *v271 = *v271 & 7 | v267;
              }
              *(_DWORD *)(v504 + 200) = v265 + 1;
              if (v587 != (int32x2_t ****)-8192 && v587 != (int32x2_t ****)-4096 && v587)
              {
                v272 = v586.n128_u64[0] & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)(v586.n128_u64[0] & 0xFFFFFFFFFFFFFFF8) = v586.n128_u64[1];
                if (v586.n128_u64[1])
                {
                  *(_QWORD *)v586.n128_u64[1] = *(_QWORD *)v586.n128_u64[1] & 7 | v272;
                }
                else
                {
                  v273 = v587;
                  v274 = ***v587;
                  v275 = (unint64_t)v274[303];
                  if (v275 <= v272)
                  {
                    v276 = v274[305].u32[0];
                    if (v275 + 16 * v276 > v272)
                    {
                      v277 = v276 - 1;
                      LODWORD(v278) = v277 & ((v587 >> 4) ^ (v587 >> 9));
                      v279 = (int32x2_t *****)(v275 + 16 * v278);
                      v280 = *v279;
                      if (v587 == *v279)
                      {
LABEL_411:
                        *v279 = (int32x2_t ****)-8192;
                        v274[304] = vadd_s32(v274[304], (int32x2_t)0x1FFFFFFFFLL);
                        v273 = v587;
                      }
                      else
                      {
                        v281 = 1;
                        while (v280 != (int32x2_t ****)-4096)
                        {
                          v282 = v278 + v281++;
                          v278 = v282 & v277;
                          v280 = *(int32x2_t *****)(v275 + 16 * v278);
                          if (v587 == v280)
                          {
                            v279 = (int32x2_t *****)(v275 + 16 * v278);
                            goto LABEL_411;
                          }
                        }
                      }
                      *((_BYTE *)v273 + 17) &= ~1u;
                    }
                  }
                }
              }
              (*v516)[2] &= 7uLL;
              v127 = v492 + 1;
              if (v492 + 1 == (unint64_t *)v488)
                goto LABEL_415;
              goto LABEL_216;
            }
            v230 = v558;
            v231 = v558 + 16 * DWORD2(v558);
            v232 = (unsigned __int8 **)(v208 + 112);
            while (2)
            {
              v233 = *(_DWORD *)v230;
              v234 = *(unsigned __int8 **)(v230 + 8);
              if (v234)
              {
                if (v233)
                  goto LABEL_334;
                v534 = *(unsigned __int8 **)(v230 + 8);
                llvm::MetadataTracking::track((uint64_t)&v534, v234, 2);
                v235 = *v232;
                if (*v232)
LABEL_332:
                  llvm::MetadataTracking::untrack((uint64_t)(v208 + 112), v235);
LABEL_338:
                v236 = v534;
                *v232 = v534;
                if (v236)
                  llvm::MetadataTracking::retrack((uint64_t)&v534, v236, (uint64_t)(v208 + 112));
              }
              else
              {
                v235 = *v232;
                if (*v232 || (v208[87] & 0x20) != 0)
                {
                  if (!v233)
                  {
                    v534 = 0;
                    if (v235)
                      goto LABEL_332;
                    goto LABEL_338;
                  }
LABEL_334:
                  llvm::Value::setMetadata(v210, *(_DWORD *)v230, (llvm::MDNode *)v234);
                }
              }
              v230 += 16;
              if (v230 == v231)
                goto LABEL_297;
              continue;
            }
          }
          break;
        }
        v221 = v558;
        v222 = v558 + 16 * DWORD2(v558);
        v223 = (unsigned __int8 **)(v183 + 80);
        while (2)
        {
          v224 = *(_DWORD *)v221;
          v225 = *(unsigned __int8 **)(v221 + 8);
          if (v225)
          {
            if (v224)
              goto LABEL_317;
            v548 = *(unsigned __int8 **)(v221 + 8);
            v494 = v223;
            llvm::MetadataTracking::track((uint64_t)&v548, v225, 2);
            v223 = v494;
            v226 = *v494;
            if (*v494)
            {
LABEL_315:
              v493 = v223;
              llvm::MetadataTracking::untrack((uint64_t)v223, v226);
              v223 = v493;
            }
LABEL_321:
            v229 = v548;
            *v223 = v548;
            if (v229)
            {
              v495 = v223;
              llvm::MetadataTracking::retrack((uint64_t)&v548, v229, (uint64_t)v223);
              v223 = v495;
            }
          }
          else
          {
            v226 = *v223;
            if (*v223 || (v183[55] & 0x20) != 0)
            {
              if (!v224)
              {
                v548 = 0;
                if (v226)
                  goto LABEL_315;
                goto LABEL_321;
              }
LABEL_317:
              v227 = v222;
              v228 = v223;
              llvm::Value::setMetadata((llvm::Value *)v149, *(_DWORD *)v221, (llvm::MDNode *)v225);
              v223 = v228;
              v222 = v227;
            }
          }
          v221 += 16;
          if (v221 == v222)
            goto LABEL_266;
          continue;
        }
      }
    }
  }
  if (v544 != v543)
    free(v544);
  v117 = v571;
  if (v571 & 1 | v573)
  {
    v118 = v572;
    if ((v571 & 1) != 0)
    {
      v118 = &v572;
      v119 = 8;
    }
    else
    {
      v119 = v573;
    }
    if ((_DWORD)v119)
    {
      v120 = v116;
      v121 = 40 * v119;
      v122 = v118 + 3;
      do
      {
        if ((*(v122 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v123 = (void *)*(v122 - 1);
          if (v123)
          {
            *v122 = v123;
            operator delete(v123);
          }
        }
        v122 += 5;
        v121 -= 40;
      }
      while (v121);
      v117 = v571;
      v116 = v120;
    }
  }
  if ((v117 & 1) == 0)
    MEMORY[0x1CAA32FB4](v572, 8);
  if (v574 != v576)
    free(v574);
  if (v577 != v579)
    free(v577);
  return v116;
}

uint64_t sub_1C5C108A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v6 = 0;
  if ((sub_1C5C23224(a1, a2, &v6) & 1) != 0)
    return v6;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = a1 + 8;
    v5 = 8;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_DWORD *)(a1 + 16);
  }
  return v4 + 40 * v5;
}

uint64_t sub_1C5C10908(uint64_t a1, uint64_t **a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v7;

  v3 = 0;
  v4 = **a2;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x200000000;
  *(_QWORD *)(a1 + 120) = &unk_1E8167888;
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 72) = a1 + 120;
  *(_QWORD *)(a1 + 128) = off_1E81975C0;
  *(_QWORD *)(a1 + 80) = a1 + 128;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 100) = 512;
  *(_BYTE *)(a1 + 102) = 7;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 48) = a2[5];
  *(_QWORD *)(a1 + 56) = a2 + 3;
  v5 = (unsigned __int8 *)a2[6];
  v7 = v5;
  if (v5)
  {
    llvm::MetadataTracking::track((uint64_t)&v7, v5, 2);
    v3 = v7;
  }
  sub_1C4774EF4(a1, 0, (uint64_t)v3);
  if (v7)
    llvm::MetadataTracking::untrack((uint64_t)&v7, v7);
  return a1;
}

_QWORD *sub_1C5C109EC(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C5C23224(a1, *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C5C232D4(a1, a2, v7);
    *v5 = *a2;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 1) = 0u;
  }
  return v5 + 1;
}

unsigned __int8 *sub_1C5C10A54(uint64_t a1, llvm::DataLayout *a2, const llvm::APInt *a3, void **this, uint64_t a5, uint64_t a6)
{
  uint64_t ***v8;
  BOOL v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t *v20;
  int v21;
  char v22;
  uint64_t v23;
  unint64_t *v24;
  const char *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BOOL4 v30;
  uint64_t v31;
  const llvm::APInt *v32;
  unsigned __int8 *v33;
  unsigned int v34;
  _QWORD *v35;
  int v36;
  int64_t v37;
  BOOL v38;
  unint64_t v39;
  unsigned int v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  uint64_t *v49;
  llvm::Module *v50;
  char v51;
  llvm::LLVMContext *v52;
  uint64_t v53;
  llvm::ValueHandleBase *v54;
  uint64_t v55;
  llvm::Type *v56;
  int IndexTypeSizeInBits;
  int v58;
  int v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  llvm::ConstantInt *v63;
  unsigned int v64;
  unint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  int v68;
  llvm::Value *v69;
  llvm::APInt *v70;
  unsigned int v71;
  llvm::GetElementPtrInst *v73;
  int v74;
  char v75;
  uint64_t v76;
  const char *v77;
  unsigned int v78;
  uint64_t v79;
  int v80;
  __int16 v81;
  unsigned int v82;
  void **v83;
  llvm::ConstantInt *v84;
  llvm::GetElementPtrInst *v85;
  llvm::ValueHandleBase *v86;
  int v87;
  __int16 v88;
  uint64_t v89;
  const char *v90;
  int v91;
  __int16 v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  const char *v96;
  unsigned int v97;
  void *v98;
  void **p_dst;
  int v100;
  int64_t v101;
  unint64_t v102;
  unsigned int v103;
  llvm::ConstantInt *v104;
  llvm::GetElementPtrInst *v105;
  llvm::ValueHandleBase *v106;
  int v107;
  uint64_t v108;
  const char *v109;
  int v110;
  __int16 v111;
  uint64_t v112;
  const char *v113;
  _DWORD *v115;
  uint64_t v116;
  uint64_t *v118;
  uint64_t v119;
  uint64_t ***v120;
  llvm::Type *v121;
  _QWORD *v122;
  unsigned int v123;
  void *__dst;
  unsigned int v125;
  _BYTE *v126;
  _BYTE *v127;
  uint64_t v128;
  int v129;
  _BYTE v130[32];
  llvm::Type *v131;
  __int128 v132;
  const char *v133;
  char v134;
  char v135;
  llvm::Value *v136;
  uint64_t v137;
  _BYTE v138[32];
  const char *v139;
  uint64_t v140;
  __int128 v141;
  __int16 v142;
  int v143;
  __int16 v144;
  uint64_t v145;

  v8 = (uint64_t ***)a3;
  v145 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a3)
    v11 = *(_BYTE *)(*(_QWORD *)a3 + 8) == 15;
  else
    v11 = 0;
  if (v11 && !*(_QWORD *)(*(_QWORD *)a3 + 24))
  {
    v82 = *((_DWORD *)this + 2);
    v83 = this;
    if (v82 >= 0x41)
    {
      if (v82 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) > 0x40)
        goto LABEL_186;
      v83 = (void **)*this;
    }
    if (!*v83)
      goto LABEL_196;
LABEL_186:
    v84 = *(llvm::ConstantInt **)(a1 + 64);
    v85 = (llvm::GetElementPtrInst *)(*(_QWORD *)v84 + 1912);
    v86 = llvm::ConstantInt::get(v84, (llvm::LLVMContext *)this, a3);
    v87 = *(unsigned __int8 *)(a6 + 32);
    if (v87 == 1)
    {
      v139 = "sroa_idx";
      v88 = 259;
    }
    else
    {
      if (*(_BYTE *)(a6 + 32))
      {
        v89 = *(_QWORD *)(a6 + 8);
        if (*(_BYTE *)(a6 + 33) == 1)
        {
          v90 = *(const char **)a6;
        }
        else
        {
          LOBYTE(v87) = 2;
          v90 = (const char *)a6;
        }
        v139 = v90;
        v140 = v89;
        *(_QWORD *)&v141 = "sroa_idx";
        LOBYTE(v142) = v87;
        HIBYTE(v142) = 3;
        goto LABEL_195;
      }
      v88 = 256;
    }
    v142 = v88;
LABEL_195:
    v8 = sub_1C5098FF4((uint64_t *)a1, v85, (uint64_t *)v8, (uint64_t)v86, (uint64_t)&v139);
LABEL_196:
    v91 = *(unsigned __int8 *)(a6 + 32);
    if (v91 == 1)
    {
      v139 = "sroa_cast";
      v92 = 259;
    }
    else
    {
      if (*(_BYTE *)(a6 + 32))
      {
        v93 = *(_QWORD *)(a6 + 8);
        if (*(_BYTE *)(a6 + 33) == 1)
        {
          v94 = *(const char **)a6;
        }
        else
        {
          LOBYTE(v91) = 2;
          v94 = (const char *)a6;
        }
        v139 = v94;
        v140 = v93;
        *(_QWORD *)&v141 = "sroa_cast";
        LOBYTE(v142) = v91;
        HIBYTE(v142) = 3;
        return sub_1C5699F0C((uint64_t *)a1, (uint64_t *)v8, a5, (uint64_t)&v139);
      }
      v92 = 256;
    }
    v142 = v92;
    return sub_1C5699F0C((uint64_t *)a1, (uint64_t *)v8, a5, (uint64_t)&v139);
  }
  v126 = v130;
  v127 = v130;
  v128 = 4;
  v129 = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v126, (uint64_t)a3);
  v136 = (llvm::Value *)v138;
  v137 = 0x400000000;
  v125 = *((_DWORD *)this + 2);
  if (v125 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&__dst, 0, 0);
  else
    __dst = 0;
  v116 = a5;
  v121 = **(llvm::Type ***)(a5 + 16);
  v12 = 0;
  v120 = 0;
  v13 = 0;
  v119 = llvm::PointerType::get(v121, (llvm::Type *)(*((_DWORD *)*v8 + 2) >> 8));
  while (2)
  {
    v15 = v12;
    do
    {
      v16 = *((unsigned __int8 *)v8 + 16);
      if (v16 != 62 && (v16 != 5 || *((_WORD *)v8 + 9) != 34))
        break;
      LODWORD(v140) = *((_DWORD *)this + 2);
      if (v140 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v139, 0, 0);
      else
        v139 = 0;
      if (llvm::GEPOperator::accumulateConstantOffset((uint64_t)v8, a2, (uint64_t)&v139, 0, v14))
      {
        v17 = *((unsigned int *)this + 2);
        if (v17 >= 0x41)
        {
          v23 = 0;
          v24 = (unint64_t *)*this;
          v25 = v139;
          v26 = (unint64_t)(v17 + 63) >> 6;
          v27 = v26;
          do
          {
            v28 = *(_QWORD *)v25;
            v25 += 8;
            v29 = v28 + *v24;
            v30 = v29 + 1 <= *v24;
            if (v23)
            {
              ++v29;
              v23 = v30;
            }
            else
            {
              v23 = v29 < *v24;
            }
            *v24++ = v29;
            --v27;
          }
          while (v27);
          *((_QWORD *)*this + (v26 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
        }
        else
        {
          if ((_DWORD)v17)
            v18 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
          else
            v18 = 0;
          *this = (void *)(v18 & (unint64_t)&v139[(_QWORD)*this]);
        }
        v19 = *((_DWORD *)v8 + 5);
        if ((v19 & 0x40000000) != 0)
          v20 = (uint64_t *)*(v8 - 1);
        else
          v20 = (uint64_t *)&v8[-4 * (v19 & 0x7FFFFFF)];
        v8 = (uint64_t ***)*v20;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v126, *v20);
        if (v22)
          v21 = 0;
        else
          v21 = 5;
      }
      else
      {
        v21 = 5;
      }
      if (v140 >= 0x41 && v139)
        MEMORY[0x1CAA32F9C](v139, 0x1000C8000313F17);
    }
    while (!v21);
    LODWORD(v137) = 0;
    v123 = *((_DWORD *)this + 2);
    if (v123 > 0x40)
    {
      v122 = (_QWORD *)operator new[]();
      memcpy(v122, *this, (((unint64_t)v123 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v122 = *this;
    }
    v31 = (uint64_t)*v8;
    if (v31 == llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(a1 + 64) + 1912), (llvm::Type *)(*((_DWORD *)*v8 + 2) >> 8))&& *((_DWORD *)v121 + 2) == 2061)
    {
LABEL_46:
      v12 = 0;
      goto LABEL_68;
    }
    v33 = **(unsigned __int8 ***)(v31 + 16);
    v131 = (llvm::Type *)v33;
    v34 = v33[8];
    if (v34 > 0x11)
      goto LABEL_153;
    if (((1 << v34) & 0xAC7F) == 0)
    {
      if (((1 << v34) & 0x30000) != 0)
      {
LABEL_143:
        v12 = 0;
        if (!llvm::Type::isSizedDerivedType((uint64_t)v33, 0))
          goto LABEL_68;
        goto LABEL_49;
      }
LABEL_153:
      if ((v34 & 0xFE) != 0x12 && v34 != 21)
        goto LABEL_46;
      goto LABEL_143;
    }
LABEL_49:
    llvm::DataLayout::getGEPIndicesForOffset(a2, &v131, (llvm::APInt *)&v122, &v139);
    v35 = v122;
    if (v123 >= 0x41)
    {
      v36 = 0;
      v37 = ((unint64_t)v123 + 63) >> 6;
      do
      {
        v38 = v37-- < 1;
        if (v38)
          break;
        v39 = v122[v37];
        v36 += __clz(v39);
      }
      while (!v39);
      v40 = v123 | 0xFFFFFFC0;
      if ((v123 & 0x3F) == 0)
        v40 = 0;
      if (v123 - v36 - v40 > 0x40)
      {
LABEL_58:
        v12 = 0;
        goto LABEL_59;
      }
      v35 = (_QWORD *)*v122;
    }
    if (v35)
      goto LABEL_58;
    if ((_DWORD)v140)
    {
      v52 = (llvm::LLVMContext *)v139;
      v53 = 16 * v140;
      do
      {
        v54 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 64), v52, v32);
        v55 = v137;
        if (v137 >= (unint64_t)HIDWORD(v137))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v136, (uint64_t)v138, v137 + 1, 8);
          v55 = v137;
        }
        *((_QWORD *)v136 + v55) = v54;
        LODWORD(v137) = v137 + 1;
        v52 = (llvm::LLVMContext *)((char *)v52 + 16);
        v53 -= 16;
      }
      while (v53);
    }
    v118 = v13;
    v56 = v131;
    if (v131 == v121)
    {
      LODWORD(v65) = v137;
      goto LABEL_148;
    }
    IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)a2, (uint64_t)*v8);
    v58 = 0;
    while (1)
    {
      v59 = *((unsigned __int8 *)v56 + 8);
      if (v59 == 17)
      {
        v56 = (llvm::Type *)*((_QWORD *)v56 + 3);
        v60 = *(_QWORD **)(a1 + 64);
        LODWORD(v132) = IndexTypeSizeInBits;
        if (IndexTypeSizeInBits <= 63)
        {
          if (IndexTypeSizeInBits <= 31)
          {
            switch(IndexTypeSizeInBits)
            {
              case 16:
                v61 = *v60 + 1936;
                goto LABEL_123;
              case 8:
                v61 = *v60 + 1912;
                goto LABEL_123;
              case 1:
                v61 = *v60 + 1888;
                goto LABEL_123;
            }
          }
          else if (IndexTypeSizeInBits == 32)
          {
            v61 = *v60 + 1960;
            goto LABEL_123;
          }
        }
        else
        {
          if (IndexTypeSizeInBits == 64)
          {
            v61 = *v60 + 1984;
LABEL_123:
            v63 = *(llvm::ConstantInt **)v61;
            v64 = *(_DWORD *)(v61 + 8);
            goto LABEL_124;
          }
          if (IndexTypeSizeInBits == 128)
          {
            v61 = *v60 + 2008;
            goto LABEL_123;
          }
        }
        v67 = sub_1C5270984(*v60 + 2168, &v132);
        v61 = *((_QWORD *)v67 + 1);
        if (!v61)
        {
          v115 = v67;
          v61 = sub_1C484358C(*v60 + 2040, 24, 3);
          v68 = v132;
          *(_QWORD *)v61 = v60;
          *(_QWORD *)(v61 + 16) = 0;
          *(_DWORD *)(v61 + 8) = (v68 << 8) | 0xD;
          *(_DWORD *)(v61 + 12) = 0;
          *((_QWORD *)v115 + 1) = v61;
        }
        goto LABEL_123;
      }
      if (v59 == 15)
        goto LABEL_146;
      if ((v59 & 0xFE) != 0x12)
        break;
      v56 = (llvm::Type *)*((_QWORD *)v56 + 3);
LABEL_117:
      v62 = **(_QWORD **)(a1 + 64);
      v63 = *(llvm::ConstantInt **)(v62 + 1960);
      v64 = *(_DWORD *)(v62 + 1968);
LABEL_124:
      DWORD2(v132) = v64 >> 8;
      if (v64 >> 8 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v132, 0, 0);
      else
        *(_QWORD *)&v132 = 0;
      v65 = (unint64_t)llvm::ConstantInt::get(v63, (llvm::LLVMContext *)&v132, v32);
      if (DWORD2(v132) >= 0x41 && (_QWORD)v132)
        MEMORY[0x1CAA32F9C](v132, 0x1000C8000313F17);
      v66 = v137;
      if (v137 >= (unint64_t)HIDWORD(v137))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v136, (uint64_t)v138, v137 + 1, 8);
        v66 = v137;
      }
      *((_QWORD *)v136 + v66) = v65;
      LODWORD(v65) = v137 + 1;
      LODWORD(v137) = v137 + 1;
      ++v58;
      if (v56 == v121)
        goto LABEL_148;
    }
    if (v59 == 16 && *((_DWORD *)v56 + 3))
    {
      v56 = (llvm::Type *)**((_QWORD **)v56 + 2);
      goto LABEL_117;
    }
LABEL_146:
    LODWORD(v65) = v137;
    if (v56 != v121)
    {
      v65 = (8 * v137 + 8 * (unint64_t)-v58) >> 3;
      LODWORD(v137) = v65;
    }
LABEL_148:
    v13 = v118;
    v12 = (uint64_t *)v8;
    if ((_DWORD)v65)
    {
      v69 = v136;
      if ((_DWORD)v65 == 1)
      {
        v70 = (llvm::APInt *)(*(_QWORD *)v136 + 24);
        v71 = *(_DWORD *)(*(_QWORD *)v136 + 32);
        if (v71 > 0x40)
        {
          v12 = (uint64_t *)v8;
          v11 = llvm::APInt::countLeadingZerosSlowCase(v70) == v71;
          v13 = v118;
          if (v11)
            goto LABEL_59;
        }
        else
        {
          v12 = (uint64_t *)v8;
          v13 = v118;
          if (!*(_QWORD *)v70)
            goto LABEL_59;
        }
      }
      v73 = (llvm::GetElementPtrInst *)*(*v8)[2];
      v74 = *(unsigned __int8 *)(a6 + 32);
      if (*(_BYTE *)(a6 + 32))
      {
        if (v74 == 1)
        {
          *(_QWORD *)&v132 = "sroa_idx";
          v75 = 1;
          LOBYTE(v74) = 3;
        }
        else
        {
          v76 = *(_QWORD *)(a6 + 8);
          if (*(_BYTE *)(a6 + 33) == 1)
          {
            v77 = *(const char **)a6;
          }
          else
          {
            LOBYTE(v74) = 2;
            v77 = (const char *)a6;
          }
          *(_QWORD *)&v132 = v77;
          *((_QWORD *)&v132 + 1) = v76;
          v133 = "sroa_idx";
          v75 = 3;
        }
      }
      else
      {
        v75 = 1;
      }
      v134 = v74;
      v135 = v75;
      v12 = (uint64_t *)sub_1C53901A0((uint64_t *)a1, v73, (uint64_t *)v8, v69, v65, (uint64_t)&v132);
    }
LABEL_59:
    v41 = (char *)v139;
    if ((_DWORD)v140)
    {
      v42 = 16 * v140;
      do
      {
        if (*(_DWORD *)&v41[v42 - 8] >= 0x41u)
        {
          v43 = *(_QWORD *)&v41[v42 - 16];
          if (v43)
            MEMORY[0x1CAA32F9C](v43, 0x1000C8000313F17);
        }
        v42 -= 16;
      }
      while (v42);
      v41 = (char *)v139;
    }
    if (v41 != (char *)&v141)
      free(v41);
LABEL_68:
    if (v123 >= 0x41 && v122)
      MEMORY[0x1CAA32F9C](v122, 0x1000C8000313F17);
    if (!v12)
    {
      v12 = v15;
      goto LABEL_79;
    }
    if (v15 && v15 != (uint64_t *)v120 && *((unsigned __int8 *)v15 + 16) >= 0x1Cu)
    {
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v15[5] + 40, (uint64_t ***)v15);
      v44 = v15[3];
      v45 = (uint64_t *)v15[4];
      *v45 = v44;
      *(_QWORD *)(v44 + 8) = v45;
      v15[3] = 0;
      v15[4] = 0;
      llvm::Value::deleteValue((llvm::Value *)v15);
    }
    v120 = v8;
    if (*v12 != v119)
    {
LABEL_79:
      if (*((_DWORD *)*v8 + 2) != 2061)
        goto LABEL_85;
      if (v125 > 0x40 || (v46 = *((_DWORD *)this + 2), v46 > 0x40))
      {
        v13 = (uint64_t *)v8;
        if (&__dst == this)
        {
LABEL_85:
          v47 = *((unsigned __int8 *)v8 + 16);
          if (v47 > 0x1B)
          {
            if (v47 != 77)
              goto LABEL_175;
LABEL_91:
            v48 = *((_DWORD *)v8 + 5);
            if ((v48 & 0x40000000) != 0)
              v49 = (uint64_t *)*(v8 - 1);
            else
              v49 = (uint64_t *)&v8[-4 * (v48 & 0x7FFFFFF)];
LABEL_98:
            v8 = (uint64_t ***)*v49;
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v126, *v49);
            if (!v51)
              goto LABEL_175;
            continue;
          }
          if (v47 != 1)
          {
            if (v47 != 5 || *((_WORD *)v8 + 9) != 49)
              goto LABEL_175;
            goto LABEL_91;
          }
          if (((_DWORD)v8[4] & 0xFu) - 5 < 4 || ((1 << ((_DWORD)v8[4] & 0xF)) & 0x614) == 0)
          {
            v50 = (llvm::Module *)v8[5];
            if (!v50 || !llvm::Module::getSemanticInterposition(v50) || (*((_BYTE *)v8 + 33) & 0x40) != 0)
            {
              v49 = (uint64_t *)(v8 - 4);
              goto LABEL_98;
            }
          }
LABEL_175:
          if (v12)
            break;
          if (v13)
            goto LABEL_216;
          v78 = *(_DWORD *)(v119 + 8);
          if ((v78 & 0xFE) == 0x12)
            v78 = *(_DWORD *)(**(_QWORD **)(v119 + 16) + 8);
          v79 = llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(a1 + 64) + 1912), (llvm::Type *)(v78 >> 8));
          v80 = *(unsigned __int8 *)(a6 + 32);
          if (v80 == 1)
          {
            v139 = "sroa_raw_cast";
            v81 = 259;
          }
          else
          {
            if (*(_BYTE *)(a6 + 32))
            {
              v95 = *(_QWORD *)(a6 + 8);
              if (*(_BYTE *)(a6 + 33) == 1)
              {
                v96 = *(const char **)a6;
              }
              else
              {
                LOBYTE(v80) = 2;
                v96 = (const char *)a6;
              }
              v139 = v96;
              v140 = v95;
              *(_QWORD *)&v141 = "sroa_raw_cast";
              LOBYTE(v142) = v80;
              HIBYTE(v142) = 3;
LABEL_212:
              v13 = (uint64_t *)sub_1C4773E38((uint64_t *)a1, 49, (unsigned __int8 *)v8, v79, (uint64_t)&v139);
              if (v125 <= 0x40)
              {
                v97 = *((_DWORD *)this + 2);
                if (v97 <= 0x40)
                {
                  v98 = *this;
                  __dst = *this;
                  v125 = v97;
                  goto LABEL_225;
                }
              }
              if (&__dst != this)
              {
                llvm::APInt::reallocate((uint64_t)&__dst, *((_DWORD *)this + 2));
                if (v125 <= 0x40)
                {
                  __dst = *this;
                  goto LABEL_217;
                }
                memcpy(__dst, *this, (((unint64_t)v125 + 63) >> 3) & 0x3FFFFFF8);
              }
LABEL_216:
              if (v125 >= 0x41)
              {
                v100 = 0;
                v101 = ((unint64_t)v125 + 63) >> 6;
                p_dst = (void **)__dst;
                do
                {
                  v38 = v101-- < 1;
                  if (v38)
                    break;
                  v102 = *((_QWORD *)__dst + v101);
                  v100 += __clz(v102);
                }
                while (!v102);
                v103 = v125 | 0xFFFFFFC0;
                if ((v125 & 0x3F) == 0)
                  v103 = 0;
                if (v125 - v100 - v103 > 0x40)
                  goto LABEL_226;
                goto LABEL_224;
              }
LABEL_217:
              p_dst = &__dst;
LABEL_224:
              v98 = *p_dst;
LABEL_225:
              if (!v98)
              {
LABEL_235:
                v12 = v13;
                break;
              }
LABEL_226:
              v104 = *(llvm::ConstantInt **)(a1 + 64);
              v105 = (llvm::GetElementPtrInst *)(*(_QWORD *)v104 + 1912);
              v106 = llvm::ConstantInt::get(v104, (llvm::LLVMContext *)&__dst, v32);
              v107 = *(unsigned __int8 *)(a6 + 32);
              if (v107 == 1)
              {
                v139 = "sroa_raw_idx";
                v141 = v132;
                v142 = 259;
                v143 = (int)v131;
                v144 = WORD2(v131);
              }
              else if (*(_BYTE *)(a6 + 32))
              {
                v108 = *(_QWORD *)(a6 + 8);
                if (*(_BYTE *)(a6 + 33) == 1)
                {
                  v109 = *(const char **)a6;
                }
                else
                {
                  LOBYTE(v107) = 2;
                  v109 = (const char *)a6;
                }
                v139 = v109;
                v140 = v108;
                *(_QWORD *)&v141 = "sroa_raw_idx";
                LOBYTE(v142) = v107;
                HIBYTE(v142) = 3;
              }
              else
              {
                v142 = 256;
              }
              v13 = (uint64_t *)sub_1C5098FF4((uint64_t *)a1, v105, v13, (uint64_t)v106, (uint64_t)&v139);
              goto LABEL_235;
            }
            v81 = 256;
          }
          v142 = v81;
          goto LABEL_212;
        }
        llvm::APInt::reallocate((uint64_t)&__dst, *((_DWORD *)this + 2));
        if (v125 <= 0x40)
          __dst = *this;
        else
          memcpy(__dst, *this, (((unint64_t)v125 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        __dst = *this;
        v125 = v46;
      }
      v13 = (uint64_t *)v8;
      goto LABEL_85;
    }
    break;
  }
  if (*v12 != v116)
  {
    v110 = *(unsigned __int8 *)(a6 + 32);
    if (v110 == 1)
    {
      v139 = "sroa_cast";
      v111 = 259;
LABEL_241:
      v142 = v111;
    }
    else
    {
      if (!*(_BYTE *)(a6 + 32))
      {
        v111 = 256;
        goto LABEL_241;
      }
      v112 = *(_QWORD *)(a6 + 8);
      if (*(_BYTE *)(a6 + 33) == 1)
      {
        v113 = *(const char **)a6;
      }
      else
      {
        LOBYTE(v110) = 2;
        v113 = (const char *)a6;
      }
      v139 = v113;
      v140 = v112;
      *(_QWORD *)&v141 = "sroa_cast";
      LOBYTE(v142) = v110;
      HIBYTE(v142) = 3;
    }
    v12 = (uint64_t *)sub_1C5699F0C((uint64_t *)a1, v12, v116, (uint64_t)&v139);
  }
  if (v125 >= 0x41 && __dst)
    MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
  if (v136 != (llvm::Value *)v138)
    free(v136);
  if (v127 != v126)
    free(v127);
  return (unsigned __int8 *)v12;
}

void *sub_1C5C118DC(uint64_t a1, uint64_t *a2)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[31];

  result = sub_1C4E59188(a1, a2, (uint64_t)v7);
  if (v7[16])
  {
    v5 = *a2;
    v6 = *(unsigned int *)(a1 + 32);
    if (v6 >= *(_DWORD *)(a1 + 36))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, a1 + 40, v6 + 1, 8);
      LODWORD(v6) = *(_DWORD *)(a1 + 32);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 32);
  }
  return result;
}

uint64_t llvm::SROAPass::rewritePartition(int32x2_t *a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v5;
  llvm::DataLayout *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  int v35;
  llvm::StructLayout *StructLayout;
  unint64_t v37;
  llvm::StructLayout *v38;
  char *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  BOOL v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  llvm::Type *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  _QWORD *v68;
  int v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  __int128 *v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  unint64_t *v84;
  unint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t **v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  _QWORD *v96;
  _QWORD *v97;
  unsigned int v98;
  uint64_t v99;
  int v100;
  unsigned __int8 *v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  unint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD **v118;
  uint64_t v119;
  uint64_t *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  llvm::PointerType *v139;
  unint64_t v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  char v144;
  unsigned __int8 v145;
  unsigned __int8 v146;
  char *v147;
  unsigned __int8 v148;
  llvm::Type *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  int v156;
  int v157;
  _QWORD *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  unsigned __int8 *v162;
  unsigned __int8 *v163;
  unsigned __int8 **v164;
  unsigned __int8 *v165;
  unsigned __int8 *v166;
  unsigned __int32 v167;
  uint64_t **v168;
  unint64_t v169;
  _QWORD *v170;
  int v171;
  _QWORD *v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t **v177;
  uint64_t v178;
  int v179;
  unint64_t *v180;
  unint64_t *v181;
  unint64_t *v182;
  uint64_t **v183;
  uint64_t *v184;
  uint64_t v185;
  unsigned int IndexTypeSizeInBits;
  uint64_t v187;
  char v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int v200;
  int v201;
  uint64_t v203;
  unsigned int v204;
  int v205;
  int64_t v206;
  unint64_t v207;
  unsigned int v208;
  unint64_t v209;
  size_t v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  llvm::Value *v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int v231;
  int v232;
  char *v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t *v239;
  const llvm::DataLayout *v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  unint64_t v244;
  int32x2_t *v245;
  uint64_t **v246;
  uint64_t v247;
  llvm::Value **v248;
  llvm::Value **v249;
  uint64_t v250;
  unsigned int v251;
  BOOL v252;
  _QWORD *v254;
  unsigned __int32 v255;
  unint64_t *v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t *v260;
  unint64_t v261;
  int32x2_t ****v262;
  int32x2_t *v263;
  unint64_t v264;
  uint64_t v265;
  unsigned int v266;
  uint64_t v267;
  int32x2_t *****v268;
  int32x2_t ****v269;
  int v270;
  int v271;
  BOOL v272;
  void **v274;
  void **v275;
  unsigned int v276;
  uint64_t v277;
  uint64_t v278;
  unsigned int v280;
  int32x2_t *v281;
  uint64_t ***v282;
  unint64_t v283;
  _QWORD *v284;
  void **v285;
  uint64_t v286;
  void *v287;
  void **v288;
  uint64_t v289;
  void *v290;
  int64x2_t *v291;
  void **v292;
  unsigned int v293;
  _QWORD *v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  unint64_t v298;
  char *v299;
  uint64_t v300;
  char *v301;
  uint64_t v302;
  _DWORD *v303;
  int v304;
  _DWORD *v305;
  _DWORD *v306;
  int v307;
  _DWORD *v308;
  _DWORD *v309;
  int v310;
  unsigned __int32 v311;
  uint64_t v315;
  uint64_t v316;
  uint64_t **v317;
  unint64_t v318;
  uint64_t v319;
  const llvm::DataLayout *v321;
  llvm::DataLayout *v322;
  unsigned __int8 v323;
  void *__src;
  unint64_t *v325;
  int32x2_t ****v326;
  unsigned __int8 *v327;
  uint64_t **v328;
  void *v329;
  unsigned int v330;
  void *v331;
  uint64_t v332;
  _QWORD v333[2];
  uint64_t v334;
  __int128 v335;
  unint64_t v336;
  _QWORD *v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  __int128 v341;
  _BYTE v342[26];
  uint64_t v343;
  uint64_t v344;
  uint64_t *v345;
  unint64_t *v346;
  void *v347;
  uint64_t v348;
  _QWORD v349[10];
  int v350;
  __int16 v351;
  char v352;
  uint64_t v353;
  uint64_t v354;
  void *v355;
  uint64_t (**v356)();
  void *__p;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  _OWORD v361[4];
  void *v362;
  uint64_t v363;
  _BYTE v364[64];
  uint64_t v365;
  int64x2_t v366;
  int64x2_t v367;
  int64x2_t v368;
  int64x2_t v369;
  void *v370;
  uint64_t v371;
  _QWORD v372[10];

  v5 = a2;
  v372[8] = *MEMORY[0x1E0C80C00];
  v315 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40);
  v6 = (llvm::DataLayout *)(v315 + 272);
  v8 = (_QWORD *)*((_QWORD *)a4 + 2);
  v7 = (_QWORD *)*((_QWORD *)a4 + 3);
  v9 = *((_QWORD *)a4 + 1);
  v322 = (llvm::DataLayout *)(v315 + 272);
  if (v8 == v7)
  {
    v316 = 0;
    goto LABEL_35;
  }
  v10 = 0;
  v316 = 0;
  v11 = 1;
  v12 = (_QWORD *)*((_QWORD *)a4 + 2);
  do
  {
    v13 = *(_QWORD *)((v12[2] & 0xFFFFFFFFFFFFFFF8) + 24);
    v14 = *(unsigned __int8 *)(v13 + 16);
    if ((v14 != 84
       || (v15 = *(_QWORD *)(v13 - 32)) == 0
       || *(_BYTE *)(v15 + 16)
       || *(_QWORD *)(v15 + 24) != *(_QWORD *)(v13 + 72)
       || (*(_BYTE *)(v15 + 33) & 0x20) == 0)
      && *v12 == *v8
      && v12[1] == v9)
    {
      if (v14 != 60)
      {
        if (v14 != 61)
          goto LABEL_29;
        v13 = *(_QWORD *)(v13 - 64);
      }
      v16 = *(_QWORD *)v13;
      if (!v16)
      {
LABEL_29:
        v11 = 0;
        goto LABEL_30;
      }
      v17 = *(unsigned int *)(v16 + 8);
      if (*(_DWORD *)(v16 + 8) == 13)
      {
        if ((v17 & 0x700) != 0 || v9 - *v12 < v17 >> 11)
          goto LABEL_30;
        if (!v316 || v17 >> 8 > *(_DWORD *)(v316 + 8) >> 8)
          v316 = v16;
      }
      if (v10)
        v18 = v10 == v16;
      else
        v18 = 1;
      v19 = v18;
      if (v18)
        v10 = v16;
      v11 &= v19;
    }
LABEL_30:
    v12 += 3;
  }
  while (v12 != v7);
  if ((v11 & (v10 != 0)) == 0)
  {
LABEL_35:
    v23 = *(_QWORD *)a4;
    v24 = v9 - *(_QWORD *)a4;
    goto LABEL_36;
  }
  sub_1C4768AD0((uint64_t)v6, v10);
  v21 = (unint64_t)(v20 + 7) >> 3;
  llvm::DataLayout::getAlignment((uint64_t)v6, v10);
  v23 = *(_QWORD *)a4;
  v24 = *((_QWORD *)a4 + 1) - *(_QWORD *)a4;
  if ((((1 << v22) + v21 - 1) & -(1 << v22)) >= v24)
    goto LABEL_75;
  v6 = (llvm::DataLayout *)(v315 + 272);
LABEL_36:
  v25 = *(_QWORD *)(v5 + 64);
  v318 = v24;
  while (1)
  {
    while (1)
    {
      if (!v23)
      {
        sub_1C4768AD0((uint64_t)v6, v25);
        v27 = (unint64_t)(v26 + 7) >> 3;
        llvm::DataLayout::getAlignment((uint64_t)v6, v25);
        if ((((1 << v28) + v27 - 1) & -(1 << v28)) == v24)
        {
          v10 = sub_1C5C1C11C(v6, v25);
          goto LABEL_69;
        }
      }
      sub_1C4768AD0((uint64_t)v6, v25);
      v30 = (unint64_t)(v29 + 7) >> 3;
      llvm::DataLayout::getAlignment((uint64_t)v6, v25);
      if ((((1 << v31) + v30 - 1) & -(1 << v31)) < v23)
        goto LABEL_68;
      sub_1C4768AD0((uint64_t)v6, v25);
      v33 = (unint64_t)(v32 + 7) >> 3;
      llvm::DataLayout::getAlignment((uint64_t)v6, v25);
      if (v33 + ~(-1 << v34) - v23 - ((v33 + ~(-1 << v34)) & ~(-1 << v34)) < v24)
        goto LABEL_68;
      v35 = *(_DWORD *)(v25 + 8);
      if (v35 == 17 || (v35 & 0xFE) == 0x12)
        break;
      if (v35 != 16)
        goto LABEL_68;
      StructLayout = llvm::DataLayout::getStructLayout(v6, (llvm::StructType *)v25);
      if (*(_QWORD *)StructLayout <= v23)
        goto LABEL_68;
      v37 = v23 + v24;
      if (v23 + v24 > *(_QWORD *)StructLayout)
      {
        v10 = 0;
        goto LABEL_94;
      }
      v38 = StructLayout;
      v39 = (char *)StructLayout + 16;
      v40 = (char *)StructLayout + 16;
      v41 = *((_DWORD *)StructLayout + 3) & 0x7FFFFFFF;
      if ((_DWORD)v41)
      {
        v40 = (char *)StructLayout + 16;
        do
        {
          v42 = v41 >> 1;
          v43 = (unint64_t *)&v40[8 * (v41 >> 1)];
          v45 = *v43;
          v44 = (char *)(v43 + 1);
          v41 += ~(v41 >> 1);
          if (v45 > v23)
            v41 = v42;
          else
            v40 = v44;
        }
        while (v41);
      }
      v46 = v40 - v39 - 8;
      v47 = *(_QWORD *)&v39[8 * (v46 >> 3)];
      v48 = v23 - v47;
      v49 = *(_QWORD *)(*(_QWORD *)(v25 + 16) + 8 * (v46 >> 3));
      v50 = sub_1C4E3D148((uint64_t)v322, v49);
      if (v23 - v47 >= v50)
      {
        v10 = 0;
        v5 = a2;
LABEL_94:
        v57 = a4;
        v6 = (llvm::DataLayout *)(v315 + 272);
        goto LABEL_70;
      }
      v51 = v23 != v47 || v50 > v318;
      if (!v51)
      {
        v57 = a4;
        if (v50 == v318)
        {
          v6 = (llvm::DataLayout *)(v315 + 272);
          v10 = sub_1C5C1C11C(v322, v49);
          v5 = a2;
          goto LABEL_70;
        }
        if (v37 >= *(_QWORD *)v38)
        {
          v300 = *(unsigned int *)(v25 + 12);
          v5 = a2;
        }
        else
        {
          v71 = v39;
          v72 = *((_DWORD *)v38 + 3) & 0x7FFFFFFF;
          if ((_DWORD)v72)
          {
            v71 = v39;
            do
            {
              v73 = v72 >> 1;
              v74 = (unint64_t *)&v71[8 * (v72 >> 1)];
              v76 = *v74;
              v75 = (char *)(v74 + 1);
              v72 += ~(v72 >> 1);
              if (v76 > v37)
                v72 = v73;
              else
                v71 = v75;
            }
            while (v72);
          }
          v77 = v71 - v39 - 8;
          if ((v46 >> 3) == (v77 >> 3))
          {
            v10 = 0;
            v5 = a2;
LABEL_516:
            v6 = (llvm::DataLayout *)(v315 + 272);
            goto LABEL_70;
          }
          v5 = a2;
          if (*(_QWORD *)&v39[8 * (v77 >> 3)] != v37)
          {
            v10 = 0;
            goto LABEL_516;
          }
          v300 = (v77 >> 3);
        }
        v6 = (llvm::DataLayout *)(v315 + 272);
        v10 = llvm::StructType::get(*(uint64_t **)v25, *(_QWORD *)(v25 + 16) + 8 * (v46 >> 3), v300 - (v46 >> 3), (*(_DWORD *)(v25 + 8) >> 9) & 1);
        if (*(_QWORD *)llvm::DataLayout::getStructLayout(v322, (llvm::StructType *)v10) != v318)
          v10 = 0;
        goto LABEL_70;
      }
      v25 = v49;
      v23 -= v47;
      v51 = v48 + v318 > v50;
      v5 = a2;
      v6 = (llvm::DataLayout *)(v315 + 272);
      v24 = v318;
      if (v51)
        goto LABEL_68;
    }
    if (v35 == 17)
      v52 = *(_QWORD *)(v25 + 32);
    else
      v52 = *(unsigned int *)(v25 + 32);
    v25 = *(_QWORD *)(v25 + 24);
    sub_1C4768AD0((uint64_t)v6, v25);
    v54 = (unint64_t)(v53 + 7) >> 3;
    llvm::DataLayout::getAlignment((uint64_t)v6, v25);
    v56 = ((1 << v55) + v54 - 1) & -(1 << v55);
    if (v23 / v56 >= v52)
    {
LABEL_68:
      v10 = 0;
LABEL_69:
      v57 = a4;
      goto LABEL_70;
    }
    if (v56 <= v24 && v23 == v56 * (v23 / v56))
      break;
    v23 %= v56;
    if (v23 + v24 > v56)
      goto LABEL_68;
  }
  v57 = a4;
  if (v56 == v24)
  {
    v70 = sub_1C5C1C11C(v6, v25);
  }
  else
  {
    if (v24 / v56 * v56 != v24)
    {
      v10 = 0;
      goto LABEL_70;
    }
    llvm::ArrayType::get((llvm::ArrayType *)v25, (llvm::Type *)(v24 / v56));
  }
  v10 = v70;
LABEL_70:
  if (v10 || !v316)
  {
    if (v10)
      goto LABEL_75;
    v60 = 0;
  }
  else
  {
    v10 = v316;
    sub_1C4768AD0((uint64_t)v6, v316);
    v59 = (unint64_t)(v58 + 7) >> 3;
    llvm::DataLayout::getAlignment((uint64_t)v6, v316);
    v60 = 0;
    if ((((1 << v61) + v59 - 1) & -(1 << v61)) < v57[1] - *v57)
      goto LABEL_79;
LABEL_75:
    if (*(_BYTE *)(v10 + 8) != 17)
      goto LABEL_112;
    v60 = v10;
    if (*(_BYTE *)(**(_QWORD **)(v10 + 16) + 8) != 13)
      goto LABEL_112;
  }
LABEL_79:
  v62 = (llvm::Type *)(*((_QWORD *)a4 + 1) - *(_QWORD *)a4);
  v63 = *(_QWORD *)(v315 + 304);
  v64 = *(char **)(v315 + 312);
  v65 = &v64[v63];
  if ((unint64_t)(8 * (_QWORD)v62) <= 0xFF)
  {
    v66 = (char *)memchr(*(void **)(v315 + 304), (char)(8 * (_BYTE)v62), *(_QWORD *)(v315 + 312));
    if (v66)
      v65 = v66;
  }
  if (&v65[-v63] == v64)
  {
    v10 = v60;
    if (!v60)
    {
      llvm::ArrayType::get((llvm::ArrayType *)(**(_QWORD **)a1 + 1912), v62);
      v10 = v67;
    }
  }
  else
  {
    v68 = (_QWORD *)*a1;
    v69 = 8 * (_DWORD)v62;
    LODWORD(v331) = 8 * (_DWORD)v62;
    if (8 * (int)v62 <= 63)
    {
      switch(v69)
      {
        case 32:
          v10 = *v68 + 1960;
          goto LABEL_112;
        case 16:
          v10 = *v68 + 1936;
          goto LABEL_112;
        case 8:
          v10 = *v68 + 1912;
          goto LABEL_112;
      }
    }
    else
    {
      if (v69 == 64)
      {
        v10 = *v68 + 1984;
        goto LABEL_112;
      }
      if (v69 == 128)
      {
        v10 = *v68 + 2008;
        goto LABEL_112;
      }
    }
    v305 = sub_1C5270984(*v68 + 2168, &v331);
    v10 = *((_QWORD *)v305 + 1);
    if (!v10)
    {
      v306 = v305;
      v10 = sub_1C484358C(*v68 + 2040, 24, 3);
      v307 = (int)v331;
      *(_QWORD *)v10 = v68;
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 8) = (v307 << 8) | 0xDu;
      *((_QWORD *)v306 + 1) = v10;
    }
  }
LABEL_112:
  sub_1C4768AD0((uint64_t)v322, v10);
  v79 = a4;
  if (v78 <= 0x800000)
  {
    v80 = v78;
    sub_1C4768AD0((uint64_t)v322, v10);
    if (v80 == ((v81 + 7) & 0xFFFFFFFFFFFFFFF8))
    {
      v82 = *(_QWORD **)v10;
      LODWORD(v331) = v80;
      if ((int)v80 > 63)
      {
        if ((_DWORD)v80 == 64)
        {
          v83 = (_QWORD *)(*v82 + 1984);
          goto LABEL_122;
        }
        if ((_DWORD)v80 == 128)
        {
          v83 = (_QWORD *)(*v82 + 2008);
          goto LABEL_122;
        }
LABEL_521:
        v308 = sub_1C5270984(*v82 + 2168, &v331);
        v83 = (_QWORD *)*((_QWORD *)v308 + 1);
        if (!v83)
        {
          v309 = v308;
          v83 = (_QWORD *)sub_1C484358C(*v82 + 2040, 24, 3);
          v310 = (int)v331;
          *v83 = v82;
          v83[2] = 0;
          v83[1] = (v310 << 8) | 0xDu;
          *((_QWORD *)v309 + 1) = v83;
        }
        goto LABEL_122;
      }
      if ((int)v80 > 31)
      {
        if ((_DWORD)v80 == 32)
        {
          v83 = (_QWORD *)(*v82 + 1960);
          goto LABEL_122;
        }
        goto LABEL_521;
      }
      switch((_DWORD)v80)
      {
        case 0x10:
          v83 = (_QWORD *)(*v82 + 1936);
          break;
        case 8:
          v83 = (_QWORD *)(*v82 + 1912);
          break;
        case 1:
          v83 = (_QWORD *)(*v82 + 1888);
          break;
        default:
          goto LABEL_521;
      }
LABEL_122:
      if (sub_1C5C1C2C0((uint64_t)v322, v10, (uint64_t)v83)
        && sub_1C5C1C2C0((uint64_t)v322, (uint64_t)v83, v10))
      {
        v85 = (unint64_t *)*((_QWORD *)a4 + 2);
        v84 = (unint64_t *)*((_QWORD *)a4 + 3);
        if (v85 == v84)
        {
          v87 = *(_QWORD *)(v315 + 304);
          v88 = *(char **)(v315 + 312);
          v89 = &v88[v87];
          if (v80 <= 0xFF)
          {
            v90 = (char *)memchr(*(void **)(v315 + 304), (char)v80, *(_QWORD *)(v315 + 312));
            if (v90)
              v89 = v90;
          }
          LOBYTE(v331) = &v89[-v87] != v88;
          v86 = v315 + 272;
LABEL_133:
          v91 = *((unsigned int *)a4 + 10);
          if ((_DWORD)v91)
          {
            v92 = (unint64_t **)*((_QWORD *)a4 + 4);
            v93 = 8 * v91;
            while ((sub_1C5C1C518(*v92, *(_QWORD *)a4, v10, v86, &v331) & 1) != 0)
            {
              ++v92;
              v93 -= 8;
              if (!v93)
                goto LABEL_137;
            }
          }
          else
          {
LABEL_137:
            if ((_BYTE)v331)
            {
              v94 = 0;
              v95 = 1;
              goto LABEL_212;
            }
          }
        }
        else
        {
          LOBYTE(v331) = 0;
          v86 = v315 + 272;
          while ((sub_1C5C1C518(v85, *(_QWORD *)a4, v10, (uint64_t)v322, &v331) & 1) != 0)
          {
            v85 += 3;
            if (v85 == v84)
              goto LABEL_133;
          }
        }
      }
    }
  }
  v331 = v333;
  v332 = 0x400000000;
  v96 = (_QWORD *)*((_QWORD *)a4 + 2);
  v97 = (_QWORD *)*((_QWORD *)a4 + 3);
  if (v96 == v97)
  {
    v94 = 0;
    goto LABEL_209;
  }
  v319 = v10;
  v98 = 0;
  v99 = 0;
  v100 = 1;
  while (2)
  {
    if (*v96 == *(_QWORD *)a4 && v96[1] == *((_QWORD *)a4 + 1))
    {
      v101 = *(unsigned __int8 **)((v96[2] & 0xFFFFFFFFFFFFFFF8) + 24);
      v102 = v101[16];
      if (v101 && v102 == 60)
        goto LABEL_148;
      if (v101 && v102 == 61)
      {
        v101 = (unsigned __int8 *)*((_QWORD *)v101 - 8);
LABEL_148:
        v103 = *(_QWORD *)v101;
        v104 = *(_DWORD *)(*(_QWORD *)v101 + 8) & 0xFE;
        if (v103 && v104 == 18)
        {
          if (v98)
          {
            v106 = *(_QWORD *)v331;
            sub_1C4768AD0((uint64_t)v322, v103);
            v108 = v107;
            sub_1C4768AD0((uint64_t)v322, v106);
            if (v108 != v109)
            {
              v98 = 0;
              LODWORD(v332) = 0;
              v10 = v319;
              goto LABEL_164;
            }
            v110 = v332;
            v10 = v319;
          }
          else
          {
            v110 = 0;
          }
          if (v110 >= HIDWORD(v332))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v331, (uint64_t)v333, v110 + 1, 8);
            v110 = v332;
          }
          *((_QWORD *)v331 + v110) = v103;
          v98 = v332 + 1;
          LODWORD(v332) = v332 + 1;
          if (v99)
          {
            if (v99 != *(_QWORD *)(v103 + 24))
              v100 = 0;
          }
          else
          {
            v99 = *(_QWORD *)(v103 + 24);
          }
        }
      }
    }
LABEL_164:
    v96 += 3;
    if (v96 != v97)
      continue;
    break;
  }
  if (!v98)
  {
LABEL_208:
    v94 = 0;
    goto LABEL_209;
  }
  if (!v100)
  {
    v120 = (uint64_t *)v331;
    v121 = (char *)v331 + 8 * v98;
    v122 = 8 * v98 - 8;
    v123 = (char *)v331;
    v124 = (char *)v331;
    while (1)
    {
      v125 = *(_QWORD *)v124;
      v124 += 8;
      if (*(_BYTE *)(*(_QWORD *)(v125 + 24) + 8) != 13)
        break;
      v122 -= 8;
      v123 = v124;
      if (v124 == v121)
        goto LABEL_194;
    }
    if (v124 == v121)
    {
      v121 = v123;
    }
    else
    {
      v126 = 8;
      v121 = v123;
      do
      {
        v127 = *(_QWORD *)&v123[v126];
        if (*(_BYTE *)(*(_QWORD *)(v127 + 24) + 8) == 13)
        {
          *(_QWORD *)v121 = v127;
          v121 += 8;
        }
        v126 += 8;
        v122 -= 8;
      }
      while (v122);
      v120 = (uint64_t *)v331;
    }
LABEL_194:
    v128 = v121 - (char *)v120;
    v129 = (unint64_t)(v121 - (char *)v120) >> 3;
    LODWORD(v332) = v129;
    if ((_DWORD)v129)
    {
      sub_1C5C1C7C8(v120, &v120[v129], 126 - 2 * __clz((v128 >> 3)), 1);
      v111 = (char *)v331;
      v130 = (char *)v331 + 8 * v332;
      v131 = (char *)v331;
      if ((_DWORD)v332)
      {
        v131 = (char *)v331 - 8;
        v132 = 8 * v332 - 8;
        while (v132)
        {
          v133 = *((_QWORD *)v131 + 1);
          v134 = *((_QWORD *)v131 + 2);
          v131 += 8;
          v132 -= 8;
          if (*(_DWORD *)(v133 + 32) < *(_DWORD *)(v134 + 32))
            goto LABEL_199;
        }
      }
      else
      {
LABEL_199:
        if (v131 != v130)
        {
          v135 = v131 + 16;
          if (v131 + 16 != v130)
          {
            v136 = *(_QWORD *)v131;
            do
            {
              v137 = *(_QWORD *)v135;
              if (*(_DWORD *)(v136 + 32) >= *(_DWORD *)(*(_QWORD *)v135 + 32))
              {
                *((_QWORD *)v131 + 1) = v137;
                v131 += 8;
                v136 = v137;
              }
              v135 += 8;
            }
            while (v135 != v130);
          }
          v130 = v131 + 8;
        }
      }
      v138 = v130 - v111;
      LODWORD(v332) = v138 >> 3;
      if ((_DWORD)v332)
      {
        v112 = &v111[v138 & 0x7FFFFFFF8];
        goto LABEL_170;
      }
    }
    goto LABEL_208;
  }
  if (v98 != 1)
    LODWORD(v332) = 1;
  v111 = (char *)v331;
  v112 = (char *)v331 + 8;
  do
  {
LABEL_170:
    v94 = *(_QWORD *)v111;
    sub_1C4768AD0((uint64_t)v322, *(_QWORD *)(*(_QWORD *)v111 + 24));
    if ((v113 & 7) == 0)
    {
      v114 = v113 >> 3;
      v116 = (_QWORD *)*((_QWORD *)a4 + 2);
      v115 = (_QWORD *)*((_QWORD *)a4 + 3);
      while (v116 != v115)
      {
        if ((sub_1C5C1D1B4((uint64_t *)a4, v116, v94, v114, (uint64_t)v322) & 1) == 0)
          goto LABEL_171;
        v116 += 3;
      }
      v117 = *((unsigned int *)a4 + 10);
      if (!(_DWORD)v117)
        goto LABEL_181;
      v118 = (_QWORD **)*((_QWORD *)a4 + 4);
      v119 = 8 * v117;
      while ((sub_1C5C1D1B4((uint64_t *)a4, *v118, v94, v114, (uint64_t)v322) & 1) != 0)
      {
        ++v118;
        v119 -= 8;
        if (!v119)
          goto LABEL_181;
      }
    }
LABEL_171:
    v111 += 8;
  }
  while (v111 != v112);
  v94 = 0;
LABEL_181:
  v5 = a2;
LABEL_209:
  if (v331 != v333)
    free(v331);
  v95 = 0;
LABEL_212:
  if (v94)
    v139 = (llvm::PointerType *)v94;
  else
    v139 = (llvm::PointerType *)v10;
  v328 = 0;
  v140 = *(_QWORD *)a4;
  if (v139 == *(llvm::PointerType **)(v5 + 64) && !v140)
  {
    v328 = (uint64_t **)v5;
    v141 = a3;
    v142 = (void *)(v315 + 272);
    goto LABEL_235;
  }
  v143 = (1 << *(_WORD *)(v5 + 18)) | v140;
  v144 = __clz(v143 & -v143);
  llvm::DataLayout::getAlignment((uint64_t)v322, (uint64_t)v139);
  v146 = v145;
  v147 = (char *)operator new(0x68uLL);
  *((_DWORD *)v147 + 13) = *((_DWORD *)v147 + 13) & 0x38000000 | 1;
  *(_QWORD *)v147 = 0;
  *((_QWORD *)v147 + 1) = 0;
  *((_QWORD *)v147 + 2) = 0;
  *((_QWORD *)v147 + 3) = v147 + 32;
  v148 = 63 - v144;
  v149 = (llvm::Type *)(*(_DWORD *)(*(_QWORD *)v5 + 8) >> 8);
  if ((63 - v144) <= v146)
    llvm::DataLayout::getAlignment((uint64_t)v322, (uint64_t)v139);
  v141 = a3;
  if ((*(_BYTE *)(v5 + 23) & 0x10) != 0)
  {
    v150 = ***(_QWORD ***)v5;
    v151 = *(_QWORD *)(v150 + 152);
    v152 = *(unsigned int *)(v150 + 168);
    v79 = a4;
    if (!(_DWORD)v152)
      goto LABEL_227;
    LODWORD(v153) = (v152 - 1) & ((v5 >> 4) ^ (v5 >> 9));
    v154 = (uint64_t *)(v151 + 16 * v153);
    v155 = *v154;
    if (*v154 != v5)
    {
      v156 = 1;
      while (v155 != -4096)
      {
        v157 = v153 + v156++;
        v153 = v157 & (v152 - 1);
        v155 = *(_QWORD *)(v151 + 16 * v153);
        if (v155 == v5)
        {
          v154 = (uint64_t *)(v151 + 16 * v153);
          goto LABEL_228;
        }
      }
LABEL_227:
      v154 = (uint64_t *)(v151 + 16 * v152);
    }
LABEL_228:
    v158 = (_QWORD *)v154[1];
    v161 = *v158;
    v159 = (char *)(v158 + 2);
    v160 = v161;
  }
  else
  {
    v160 = 0;
    v159 = &byte_1C871356D;
    v79 = a4;
  }
  v367.i16[4] = 773;
  v365 = (uint64_t)v159;
  v366.i64[0] = v160;
  v366.i64[1] = (uint64_t)".sroa.";
  v360 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v79 + 2) - *(_QWORD *)(a3 + 16)) >> 3);
  v331 = &v365;
  v333[0] = &v360;
  LOWORD(v334) = 2818;
  llvm::AllocaInst::AllocaInst((uint64_t)(v147 + 32), v139, v149, 0, v148, (uint64_t)&v331, v5);
  v162 = *(unsigned __int8 **)(v5 + 48);
  v327 = v162;
  v328 = (uint64_t **)(v147 + 32);
  if (v162)
    llvm::MetadataTracking::track((uint64_t)&v327, v162, 2);
  v165 = (unsigned __int8 *)*((_QWORD *)v147 + 10);
  v164 = (unsigned __int8 **)(v147 + 80);
  v163 = v165;
  v142 = (void *)(v315 + 272);
  if (v165)
    llvm::MetadataTracking::untrack((uint64_t)v164, v163);
  v166 = v327;
  *v164 = v327;
  if (v166)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v327, v166, (uint64_t)v164);
    v327 = 0;
  }
LABEL_235:
  v167 = a1[54].u32[0];
  v365 = 1;
  v366 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v367 = v366;
  v368 = v366;
  v369 = v366;
  v370 = v372;
  v371 = 0x800000000;
  v360 = 1;
  v361[0] = v366;
  v361[1] = v366;
  v361[2] = v366;
  v361[3] = v366;
  v362 = v364;
  v363 = 0x800000000;
  v168 = v328;
  v331 = v142;
  v332 = v141;
  v333[0] = a1;
  v333[1] = v5;
  v334 = (uint64_t)v328;
  v335 = *v79;
  v169 = (unint64_t)v328[8];
  v336 = v169;
  if (!v95)
  {
    v172 = 0;
    goto LABEL_240;
  }
  v170 = (_QWORD *)**v328;
  sub_1C4768AD0((uint64_t)v142, v169);
  LODWORD(__src) = v171;
  if (v171 <= 63)
  {
    if (v171 > 31)
    {
      if (v171 == 32)
      {
        v172 = (_QWORD *)(*v170 + 1960);
        goto LABEL_240;
      }
      goto LABEL_511;
    }
    switch(v171)
    {
      case 16:
        v172 = (_QWORD *)(*v170 + 1936);
        break;
      case 8:
        v172 = (_QWORD *)(*v170 + 1912);
        break;
      case 1:
        v172 = (_QWORD *)(*v170 + 1888);
        break;
      default:
        goto LABEL_511;
    }
  }
  else
  {
    if (v171 == 64)
    {
      v172 = (_QWORD *)(*v170 + 1984);
      goto LABEL_240;
    }
    if (v171 == 128)
    {
      v172 = (_QWORD *)(*v170 + 2008);
      goto LABEL_240;
    }
LABEL_511:
    v303 = sub_1C5270984(*v170 + 2168, &__src);
    v172 = (_QWORD *)*((_QWORD *)v303 + 1);
    if (!v172)
    {
      v172 = (_QWORD *)sub_1C484358C(*v170 + 2040, 24, 3);
      v304 = (int)__src;
      *v172 = v170;
      v172[2] = 0;
      v172[1] = (v304 << 8) | 0xDu;
      *((_QWORD *)v303 + 1) = v172;
    }
  }
LABEL_240:
  v337 = v172;
  v338 = v94;
  if (v94)
  {
    v339 = *(_QWORD *)(v94 + 24);
    sub_1C4768AD0((uint64_t)v142, v339);
    v174 = v173 >> 3;
  }
  else
  {
    v174 = 0;
    v339 = 0;
  }
  v311 = v167;
  v341 = 0u;
  memset(v342, 0, sizeof(v342));
  v340 = v174;
  v343 = 0;
  v344 = 0;
  v345 = &v365;
  v346 = &v360;
  v175 = **v168;
  v347 = v349;
  v348 = 0x200000000;
  v349[6] = v175;
  v349[7] = &v355;
  v349[8] = &v356;
  v349[9] = 0;
  v350 = 0;
  v351 = 512;
  v352 = 7;
  v349[4] = 0;
  v349[5] = 0;
  v353 = 0;
  v354 = 0;
  v355 = &unk_1E8167888;
  v356 = off_1E81975C0;
  v358 = 0;
  v359 = 0;
  __p = 0;
  v176 = *((unsigned int *)v79 + 10);
  if ((_DWORD)v176)
  {
    v177 = (unint64_t **)*((_QWORD *)v79 + 4);
    v178 = 8 * v176;
    v179 = 1;
    do
    {
      v180 = *v177++;
      v179 &= sub_1C5C13730((uint64_t)&v331, v180);
      v178 -= 8;
    }
    while (v178);
  }
  else
  {
    v179 = 1;
  }
  v182 = (unint64_t *)*((_QWORD *)v79 + 2);
  v181 = (unint64_t *)*((_QWORD *)v79 + 3);
  while (v182 != v181)
  {
    v179 &= sub_1C5C13730((uint64_t)&v331, v182);
    v182 += 3;
  }
  if ((_DWORD)v371)
  {
    v183 = (uint64_t **)v370;
    v317 = (uint64_t **)((char *)v370 + 8 * v371);
    while (2)
    {
      v184 = *v183;
      v185 = (*v183)[5];
      v321 = (const llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(v185 + 56) + 40) + 272);
      IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)v321, **v183);
      LODWORD(v325) = IndexTypeSizeInBits;
      if (IndexTypeSizeInBits > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
      else
        __src = 0;
      v187 = v184[1];
      if (!v187)
        goto LABEL_356;
      v323 = 0;
      while (2)
      {
        v188 = 0;
        v189 = *(_QWORD *)(v187 + 24);
        if (!v189 || *(_BYTE *)(v189 + 16) != 60)
          goto LABEL_357;
        if ((*(_WORD *)(v189 + 18) & 0x381) != 0 || *(_QWORD *)(v189 + 40) != v185)
          goto LABEL_356;
        if (v184 != (uint64_t *)v189)
        {
          v190 = (uint64_t)v184;
          v191 = v184 + 3;
          do
          {
            v192 = *(unsigned __int8 *)(v190 + 16) - 33;
            if (v192 <= 0x37)
            {
              if (((1 << (*(_BYTE *)(v190 + 16) - 33)) & 0x8000000000041) != 0)
              {
                v193 = *(_QWORD *)(v190 + 64);
                if (!v193 || (*(_BYTE *)(v193 + 17) & 0x30) == 0)
                {
                  v194 = *(_DWORD *)(v190 + 20);
                  if (v194 < 0)
                  {
                    v195 = v190 - 32 * (v194 & 0x7FFFFFF);
                    v198 = *(_QWORD *)(v195 - 8);
                    v196 = v195 - 8;
                    v197 = v198;
                    if (v198)
                    {
                      v199 = -v197;
                      do
                      {
                        v200 = *(_DWORD *)(*(_QWORD *)(v196 + v199) + 8);
                        v51 = v200 > 7;
                        v201 = (1 << v200) & 0x83;
                        if (v51 || v201 == 0)
                          goto LABEL_356;
                        v199 += 16;
                      }
                      while (v199);
                    }
                  }
                  if ((llvm::CallBase::hasFnAttrOnCalledFunction(v190, 45) & 1) == 0
                    && !llvm::CallBase::hasFnAttrOnCalledFunction(v190, 44))
                  {
                    goto LABEL_356;
                  }
                }
              }
              else if (v192 == 27)
              {
                if ((*(_WORD *)(v190 + 18) & 0x301) != 0)
                  goto LABEL_356;
              }
              else if (((1 << (*(_BYTE *)(v190 + 16) - 33)) & 0x808001D0000010) != 0)
              {
                goto LABEL_356;
              }
            }
            v191 = (uint64_t *)v191[1];
            if (v191)
              v190 = (uint64_t)(v191 - 3);
            else
              v190 = 0;
          }
          while (v190 != v189);
        }
        sub_1C4768AD0((uint64_t)v321, *(_QWORD *)v189);
        v169 = (unint64_t)(v203 + 7) >> 3;
        v204 = __clz(1 << ((unint64_t)*(unsigned __int16 *)(v189 + 18) >> 1)) ^ 0x3F;
        if (v323 > v204)
          LOBYTE(v204) = v323;
        v323 = v204;
        if (v325 >= 0x41)
        {
          v205 = 0;
          v206 = ((unint64_t)v325 + 63) >> 6;
          do
          {
            v51 = v206-- < 1;
            if (v51)
              break;
            v207 = *((_QWORD *)__src + v206);
            v205 += __clz(v207);
          }
          while (!v207);
          v208 = v325 | 0xFFFFFFC0;
          if ((v325 & 0x3F) == 0)
            v208 = 0;
          if ((_DWORD)v325 - v205 - v208 >= 0x41 || *(_QWORD *)__src >= v169)
          {
            v330 = v325;
            v210 = (((unint64_t)v325 + 63) >> 3) & 0x3FFFFFF8;
            v329 = (void *)operator new[]();
            memcpy(v329, __src, v210);
            goto LABEL_305;
          }
        }
        else if ((unint64_t)__src >= v169)
        {
          v330 = v325;
          v329 = __src;
          goto LABEL_305;
        }
        v330 = IndexTypeSizeInBits;
        if (IndexTypeSizeInBits > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v329, v169, 0);
        }
        else
        {
          v209 = 0xFFFFFFFFFFFFFFFFLL >> -(char)IndexTypeSizeInBits;
          if (!IndexTypeSizeInBits)
            v209 = 0;
          v329 = (void *)(v209 & v169);
        }
LABEL_305:
        if (v325 >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        __src = v329;
        LODWORD(v325) = v330;
        v187 = *(_QWORD *)(v187 + 8);
        if (v187)
          continue;
        break;
      }
      v211 = *((_DWORD *)v184 + 5);
      v212 = v211 & 0x7FFFFFF;
      if ((v211 & 0x7FFFFFF) == 0)
      {
        v188 = 1;
        goto LABEL_357;
      }
      v213 = 0;
LABEL_313:
      v214 = *((_DWORD *)v184 + 5);
      if ((v214 & 0x40000000) != 0)
        v215 = (uint64_t *)*(v184 - 1);
      else
        v215 = &v184[-4 * (v214 & 0x7FFFFFF)];
      v216 = v215[4 * *((unsigned int *)v184 + 15) + v213];
      v217 = *(_QWORD *)(v216 + 40);
      if (v217 == v216 + 40)
      {
        v219 = 0;
        if ((v214 & 0x40000000) == 0)
          goto LABEL_324;
      }
      else
      {
        if (v217)
          v218 = v217 - 24;
        else
          v218 = 0;
        if (*(unsigned __int8 *)(v218 + 16) - 29 >= 0xB)
          v219 = 0;
        else
          v219 = v218;
        if ((v214 & 0x40000000) == 0)
        {
LABEL_324:
          v220 = &v184[-4 * (v214 & 0x7FFFFFF)];
LABEL_327:
          v221 = (llvm::Value *)v220[4 * v213];
          if ((llvm::Value *)v219 == v221)
            goto LABEL_356;
          v222 = *(unsigned __int8 *)(v219 + 16) - 33;
          if (v222 <= 0x37)
          {
            if (((1 << (*(_BYTE *)(v219 + 16) - 33)) & 0x808001D0000010) != 0)
              goto LABEL_356;
            if (((1 << (*(_BYTE *)(v219 + 16) - 33)) & 0x8000000000041) != 0)
            {
              v224 = *(_QWORD *)(v219 + 64);
              if (!v224 || (*(_BYTE *)(v224 + 17) & 0x30) == 0)
              {
                v225 = *(_DWORD *)(v219 + 20);
                if (v225 < 0)
                {
                  v226 = v219 - 32 * (v225 & 0x7FFFFFF);
                  v229 = *(_QWORD *)(v226 - 8);
                  v227 = v226 - 8;
                  v228 = v229;
                  if (v229)
                  {
                    v230 = -v228;
                    while (1)
                    {
                      v231 = *(_DWORD *)(*(_QWORD *)(v227 + v230) + 8);
                      v51 = v231 > 7;
                      v232 = (1 << v231) & 0x83;
                      if (v51 || v232 == 0)
                        break;
                      v230 += 16;
                      if (!v230)
                        goto LABEL_343;
                    }
LABEL_356:
                    v188 = 0;
LABEL_357:
                    if (v325 >= 0x41 && __src)
                      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
                    if ((v188 & 1) != 0)
                    {
                      if (++v183 == v317)
                        goto LABEL_365;
                      continue;
                    }
LABEL_418:
                    v272 = v365 <= 1 && HIDWORD(v365) == 0;
                    v245 = a1;
                    v246 = (uint64_t **)a2;
                    if (!v272)
                    {
                      if ((v365 & 1) != 0)
                      {
                        v291 = &v366;
                        v292 = &v370;
                        goto LABEL_469;
                      }
                      if (((2 * (_DWORD)v365) & 0xFFFFFFFC) >= v366.i32[2] || v366.i32[2] < 0x41u)
                      {
                        if (v366.i32[2])
                        {
                          v291 = (int64x2_t *)v366.i64[0];
                          v292 = (void **)(v366.i64[0] + 8 * v366.u32[2]);
                          v245 = a1;
                          v246 = (uint64_t **)a2;
                          do
                          {
LABEL_469:
                            v291->i64[0] = -4096;
                            v291 = (int64x2_t *)((char *)v291 + 8);
                          }
                          while (v291 != (int64x2_t *)v292);
                          v293 = v365 & 1;
                        }
                        else
                        {
                          v293 = 0;
                          v245 = a1;
                          v246 = (uint64_t **)a2;
                        }
                        v365 = v293;
                      }
                      else
                      {
                        sub_1C61F8D34(&v365);
                        v245 = a1;
                        v246 = (uint64_t **)a2;
                      }
                    }
                    LODWORD(v371) = 0;
                    if (v360 > 1 || HIDWORD(v360) != 0)
                    {
                      if ((v360 & 1) != 0)
                      {
                        v274 = (void **)v361;
                        v275 = &v362;
                        goto LABEL_429;
                      }
                      if (((2 * (_DWORD)v360) & 0xFFFFFFFC) >= DWORD2(v361[0]) || DWORD2(v361[0]) < 0x41)
                      {
                        if (DWORD2(v361[0]))
                        {
                          v274 = *(void ***)&v361[0];
                          v275 = (void **)(*(_QWORD *)&v361[0] + 8 * DWORD2(v361[0]));
                          v245 = a1;
                          v246 = (uint64_t **)a2;
                          do
LABEL_429:
                            *v274++ = (void *)-4096;
                          while (v274 != v275);
                          v276 = v360 & 1;
                        }
                        else
                        {
                          v276 = 0;
                          v245 = a1;
                          v246 = (uint64_t **)a2;
                        }
                        v360 = v276;
                      }
                      else
                      {
                        sub_1C61F8D34(&v360);
                        v245 = a1;
                        v246 = (uint64_t **)a2;
                      }
                    }
                    LODWORD(v363) = 0;
LABEL_433:
                    while (v245[54].i32[0] > v311)
                      sub_1C5C16408(v245 + 50);
                    if (v328 != v246)
                    {
                      v277 = (uint64_t)&v245[3];
                      goto LABEL_437;
                    }
                    v278 = 0;
                    goto LABEL_440;
                  }
                }
LABEL_343:
                if ((llvm::CallBase::hasFnAttrOnCalledFunction(v219, 45) & 1) == 0
                  && !llvm::CallBase::hasFnAttrOnCalledFunction(v219, 44))
                {
                  goto LABEL_356;
                }
              }
            }
            else if (v222 == 27 && (*(_WORD *)(v219 + 18) & 0x301) != 0)
            {
              goto LABEL_356;
            }
          }
          if ((llvm::Instruction::mayThrow((llvm::Instruction *)v219) & 1) != 0
            || !llvm::Instruction::willReturn((llvm::Instruction *)v219))
          {
            goto LABEL_356;
          }
          v223 = *(unsigned __int8 *)(v219 + 16);
          if (v223 != 30)
            __asm { BR              X9 }
          if ((*(_DWORD *)(v219 + 20) & 0x7FFFFFF) == 3
            && !llvm::isSafeToLoadUnconditionally(v221, v323, (llvm::APInt *)&__src, v321, (unint64_t *)v219, 0, 0))
          {
            goto LABEL_356;
          }
          ++v213;
          v188 = 1;
          if (v213 == v212)
            goto LABEL_357;
          goto LABEL_313;
        }
      }
      break;
    }
    v220 = (uint64_t *)*(v184 - 1);
    goto LABEL_327;
  }
LABEL_365:
  if ((_DWORD)v363)
  {
    v234 = (char *)v362;
    v235 = (char *)v362 + 8 * v363;
    do
    {
      v236 = *(_QWORD *)v234;
      v237 = *(_QWORD *)(*(_QWORD *)v234 + 8);
      if (v237)
      {
        v238 = *(uint64_t **)(v236 - 64);
        v239 = *(uint64_t **)(v236 - 32);
        v240 = (const llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v236 + 40) + 56) + 40) + 272);
        do
        {
          v241 = *(_QWORD *)(v237 + 24);
          v242 = *(unsigned __int8 *)(v241 + 16);
          if (v241 && v242 == 77)
          {
            v243 = *(_QWORD *)(v241 + 8);
            if (!v243 || *(_QWORD *)(v243 + 8))
              goto LABEL_418;
            v241 = *(_QWORD *)(v243 + 24);
            v242 = *(unsigned __int8 *)(v241 + 16);
          }
          else if (!v241)
          {
            goto LABEL_418;
          }
          if (v242 != 60)
            goto LABEL_418;
          v244 = *(unsigned __int16 *)(v241 + 18);
          if ((v244 & 0x381) != 0
            || !llvm::isSafeToLoadUnconditionally(v238, *(_QWORD *)v241, (v244 >> 1) & 0x3F, v240, (unint64_t *)v241, 0, 0)|| !llvm::isSafeToLoadUnconditionally(v239, *(_QWORD *)v241, ((unint64_t)*(unsigned __int16 *)(v241 + 18) >> 1) & 0x3F, v240, (unint64_t *)v241, 0, 0))
          {
            goto LABEL_418;
          }
          v237 = *(_QWORD *)(v237 + 8);
        }
        while (v237);
      }
      v234 += 8;
    }
    while (v234 != v235);
  }
  v245 = a1;
  v246 = (uint64_t **)a2;
  if (!v179)
    goto LABEL_433;
  v247 = *(unsigned int *)(a3 + 312);
  if ((_DWORD)v247)
  {
    v248 = *(llvm::Value ***)(a3 + 304);
    v249 = &v248[v247];
    do
    {
      v250 = *(_QWORD *)*v248;
      v251 = *(unsigned __int8 *)(v250 + 16);
      llvm::Value::dropDroppableUse(*v248, (llvm::Use *)v169);
      if (v250)
        v252 = v251 >= 0x1C;
      else
        v252 = 0;
      if (v252 && !*(_QWORD *)(v250 + 8) && llvm::wouldInstructionBeTriviallyDead(v250, 0))
      {
        __src = (void *)4;
        v325 = 0;
        v326 = (int32x2_t ****)v250;
        if (v250 != -8192 && v250 != -4096 && v250 != 0)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&__src);
        v254 = (_QWORD *)sub_1C4EE497C((unsigned int *)&a1[24], (unint64_t)&__src, 1);
        v255 = a1[25].u32[0];
        v256 = (unint64_t *)(*(_QWORD *)&a1[24] + 24 * v255);
        *v256 = 4;
        v256[1] = 0;
        v257 = (unint64_t)(v256 + 1);
        v258 = v254[2];
        v256[2] = v258;
        if (v258 != -8192 && v258 != -4096)
        {
          if (v258)
          {
            v259 = *v254 & 0xFFFFFFFFFFFFFFF8;
            v256[1] = *(_QWORD *)v259;
            *(_QWORD *)v259 = v256;
            *v256 = v259 | 4;
            v260 = (uint64_t *)v256[1];
            if (v260)
              *v260 = *v260 & 7 | v257;
          }
        }
        a1[25].i32[0] = v255 + 1;
        if (v326 != (int32x2_t ****)-8192 && v326 != (int32x2_t ****)-4096 && v326)
        {
          v261 = (unint64_t)__src & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)((unint64_t)__src & 0xFFFFFFFFFFFFFFF8) = v325;
          if (v325)
          {
            *v325 = *v325 & 7 | v261;
          }
          else
          {
            v262 = v326;
            v263 = ***v326;
            v264 = (unint64_t)v263[303];
            if (v264 <= v261)
            {
              v265 = v263[305].u32[0];
              if (v264 + 16 * v265 > v261)
              {
                v266 = v265 - 1;
                LODWORD(v267) = v266 & ((v326 >> 4) ^ (v326 >> 9));
                v268 = (int32x2_t *****)(v264 + 16 * v267);
                v269 = *v268;
                if (v326 == *v268)
                {
LABEL_415:
                  *v268 = (int32x2_t ****)-8192;
                  v263[304] = vadd_s32(v263[304], (int32x2_t)0x1FFFFFFFFLL);
                  v262 = v326;
                }
                else
                {
                  v270 = 1;
                  while (v269 != (int32x2_t ****)-4096)
                  {
                    v271 = v267 + v270++;
                    v267 = v271 & v266;
                    v269 = *(int32x2_t *****)(v264 + 16 * v267);
                    if (v326 == v269)
                    {
                      v268 = (int32x2_t *****)(v264 + 16 * v267);
                      goto LABEL_415;
                    }
                  }
                }
                *((_BYTE *)v262 + 17) &= ~1u;
              }
            }
          }
        }
      }
      ++v248;
    }
    while (v248 != v249);
  }
  v280 = v363;
  if (v371 | v363)
  {
    if ((_DWORD)v371)
    {
      v285 = (void **)v370;
      v286 = 8 * v371;
      do
      {
        v287 = *v285++;
        __src = v287;
        sub_1C6324F48((uint64_t)&a1[74], (uint64_t *)&__src);
        v286 -= 8;
      }
      while (v286);
      v280 = v363;
    }
    if (v280)
    {
      v288 = (void **)v362;
      v289 = 8 * v280;
      do
      {
        v290 = *v288++;
        __src = v290;
        sub_1C6324FC4((uint64_t)&a1[81], (uint64_t *)&__src);
        v289 -= 8;
      }
      while (v289);
    }
    v277 = (uint64_t)&a1[3];
LABEL_437:
    sub_1C5C118DC(v277, (uint64_t *)&v328);
  }
  else
  {
    v281 = a1;
    v282 = (uint64_t ***)a1[72];
    v283 = (unint64_t)a1[73];
    if ((unint64_t)v282 >= v283)
    {
      v294 = (_QWORD *)a1[71];
      v295 = v282 - (uint64_t ***)v294;
      v296 = v295 + 1;
      if ((unint64_t)(v295 + 1) >> 61)
        abort();
      v297 = v283 - (_QWORD)v294;
      if (v297 >> 2 > v296)
        v296 = v297 >> 2;
      if ((unint64_t)v297 >= 0x7FFFFFFFFFFFFFF8)
        v298 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v298 = v296;
      if (v298)
      {
        if (v298 >> 61)
          sub_1C4764EE4();
        v299 = (char *)operator new(8 * v298);
      }
      else
      {
        v299 = 0;
      }
      v301 = &v299[8 * v295];
      *(_QWORD *)v301 = v328;
      v284 = v301 + 8;
      if (v282 == v294)
      {
        v281 = a1;
      }
      else
      {
        do
        {
          v302 = (uint64_t)*--v282;
          *((_QWORD *)v301 - 1) = v302;
          v301 -= 8;
        }
        while (v282 != v294);
        v281 = a1;
        v282 = (uint64_t ***)a1[71];
      }
      v281[71] = (int32x2_t)v301;
      v281[72] = (int32x2_t)v284;
      v281[73] = (int32x2_t)&v299[8 * v298];
      if (v282)
        operator delete(v282);
    }
    else
    {
      *v282 = v328;
      v284 = v282 + 1;
    }
    v281[72] = (int32x2_t)v284;
  }
  v278 = (uint64_t)v328;
LABEL_440:
  if (SHIBYTE(v359) < 0)
    operator delete(__p);
  if (v347 != v349)
    free(v347);
  if (v362 != v364)
    free(v362);
  if ((v360 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)&v361[0], 8);
  if (v370 != v372)
    free(v370);
  if ((v365 & 1) == 0)
    MEMORY[0x1CAA32FB4](v366.i64[0], 8);
  return v278;
}

uint64_t sub_1C5C13730(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  llvm::DataLayout *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t ***v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ****v22;
  uint64_t ***v23;
  int v24;
  int v25;
  uint64_t ***v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  char v30;
  void **v31;
  uint64_t ***v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int v44;
  _QWORD *v45;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  llvm::Type *v51;
  _QWORD *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  __int16 v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  llvm::PoisonValue **v63;
  unsigned __int8 *v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int16 v71;
  unsigned __int8 *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  int v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  __int16 v81;
  __int16 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t ****v87;
  uint64_t ***v88;
  int v89;
  int v90;
  _BYTE *v91;
  unint64_t v92;
  uint64_t v93;
  llvm::MDNode *v94;
  llvm::AAMDNodes *v95;
  llvm::MDNode *v96;
  llvm::MDNode *v97;
  llvm::Type *v98;
  llvm::Value *v99;
  const llvm::APInt *v100;
  uint64_t v101;
  _QWORD *v102;
  unsigned int v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  uint64_t v111;
  int32x2_t *v112;
  unint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  int v119;
  int v120;
  uint64_t v121;
  llvm::MDNode *v122;
  llvm::AAMDNodes *v123;
  llvm::MDNode *v124;
  llvm::MDNode *v125;
  uint64_t v126;
  uint64_t *v127;
  llvm::Value *v128;
  const llvm::APInt *v129;
  uint64_t v130;
  _QWORD *v131;
  unsigned int v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  llvm::ConstantInt *v146;
  unsigned int v147;
  llvm::Type *v148;
  unsigned int v149;
  unsigned int v150;
  llvm::Value **v151;
  uint64_t *v152;
  unsigned __int8 *v153;
  __int16 v154;
  __int16 v155;
  uint64_t *v156;
  llvm::MDNode *v157;
  uint64_t v158;
  llvm::Type *v159;
  unint64_t v160;
  unint64_t v161;
  llvm::Type *v162;
  llvm::Type *v163;
  uint64_t v164;
  uint64_t v165;
  __int16 v166;
  llvm::Type *v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  llvm::Value *v172;
  const llvm::APInt *v173;
  llvm::MDNode *v174;
  llvm::MDNode *v175;
  llvm::MDNode *v176;
  llvm::MDNode *v177;
  __int16 v178;
  char v179;
  int v180;
  uint64_t v181;
  _QWORD *v182;
  unsigned int v183;
  unint64_t *v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t *v188;
  unint64_t v189;
  uint64_t v190;
  int32x2_t *v191;
  unint64_t v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  int v198;
  int v199;
  uint64_t v200;
  unsigned __int8 *v201;
  uint64_t v202;
  unint64_t v203;
  __int16 v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t ****v209;
  uint64_t ***v210;
  int v211;
  int v212;
  uint64_t v213;
  uint64_t ***v214;
  unsigned __int8 *v215;
  uint64_t **v216;
  uint64_t **v217;
  const llvm::APInt *v218;
  llvm::MDNode *v219;
  llvm::MDNode *v220;
  llvm::MDNode *v221;
  llvm::MDNode *v222;
  __int16 v223;
  char v224;
  unsigned __int8 *v225;
  unsigned __int8 *v226;
  uint64_t **v227;
  uint64_t **v228;
  unsigned __int8 *v229;
  char *v230;
  uint64_t ***v231;
  uint64_t **v232;
  llvm::PoisonValue *v233;
  llvm::Type *v234;
  _QWORD *v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  _BYTE *v239;
  unint64_t v240;
  llvm::ConstantInt **v241;
  uint64_t v242;
  _QWORD *v243;
  unsigned int v244;
  unint64_t *v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v249;
  uint64_t *v250;
  unint64_t v251;
  uint64_t v252;
  int32x2_t *v253;
  unint64_t v254;
  uint64_t v255;
  unsigned int v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  int v260;
  int v261;
  uint64_t v262;
  _QWORD *v263;
  unsigned int v264;
  unint64_t *v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t *v269;
  unint64_t v270;
  uint64_t v271;
  int32x2_t *v272;
  unint64_t v273;
  uint64_t v274;
  unsigned int v275;
  uint64_t v276;
  uint64_t *v277;
  uint64_t v278;
  int v279;
  int v280;
  unsigned __int8 *v281;
  unsigned __int8 **v282;
  uint64_t v283;
  uint64_t v284;
  unsigned __int8 ***v285;
  uint64_t v286;
  unsigned __int8 **v287;
  uint64_t v288;
  uint64_t v289;
  unsigned __int8 ***v290;
  _QWORD **v291;
  _QWORD **v292;
  uint64_t v293;
  int v294;
  unsigned int v295;
  _QWORD *v296;
  uint64_t v297;
  BOOL v298;
  llvm::MDNode *v299;
  unsigned __int8 *v300;
  uint64_t v301;
  uint64_t v302;
  unsigned __int8 **v303;
  uint64_t ***v304;
  _QWORD *v305;
  uint64_t **v306;
  uint64_t v307;
  unsigned __int8 ***v308;
  _QWORD **v309;
  _QWORD **v310;
  uint64_t ***v311;
  uint64_t v312;
  _BYTE *v313;
  uint64_t **v314;
  uint64_t ***v315;
  unsigned __int8 *v316;
  uint64_t **v317;
  uint64_t **v318;
  const llvm::APInt *v319;
  llvm::LoadInst *v320;
  llvm::MDNode *v321;
  llvm::MDNode *v322;
  llvm::MDNode *v323;
  llvm::MDNode *v324;
  __int16 v325;
  char v326;
  int v327;
  uint64_t v328;
  int v329;
  uint64_t v330;
  int v331;
  unsigned int v332;
  uint64_t ****v333;
  uint64_t ***v334;
  uint64_t ****v335;
  int v336;
  BOOL v337;
  unsigned int v338;
  uint64_t v339;
  const llvm::LoadInst **v340;
  uint64_t v341;
  _DWORD *v342;
  _DWORD *v343;
  int v344;
  _DWORD *v345;
  _DWORD *v346;
  int v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t i;
  uint64_t v352;
  uint64_t v353;
  BOOL v354;
  unsigned __int8 *v355;
  uint64_t v356;
  llvm::Value **v357;
  unsigned __int8 *v358;
  unsigned __int8 *v359;
  _QWORD *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  unint64_t v365;
  unint64_t v366;
  llvm::Type *v367;
  unsigned __int8 *v368;
  unint64_t v369;
  unsigned __int8 *v370;
  uint64_t ***VectorSplat;
  uint64_t v372;
  uint64_t v373;
  __int16 v374;
  llvm::Type *v375;
  unsigned __int8 *v376;
  unsigned __int8 *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  __int16 v381;
  unsigned __int8 *v382;
  unsigned __int8 *v383;
  unint64_t v384;
  _BYTE *v385;
  llvm::DataLayout *v386;
  llvm::DataLayout *v387;
  uint64_t ***v388;
  uint64_t *v389;
  uint64_t v390;
  __int16 v391;
  uint64_t **v392;
  llvm::APInt *v393;
  unsigned int v394;
  BOOL v395;
  __int16 v396;
  llvm::Value *v397;
  const llvm::APInt *v398;
  llvm::MDNode *v399;
  llvm::MDNode *v400;
  llvm::MDNode *v401;
  llvm::MDNode *v402;
  uint64_t **v403;
  llvm::APInt *v404;
  unsigned int v405;
  uint64_t **v406;
  llvm::Type **v407;
  unsigned int v408;
  uint64_t v409;
  uint64_t v410;
  unint64_t v411;
  char *v412;
  size_t v413;
  char *v414;
  char *v415;
  uint64_t *v416;
  unsigned __int8 *v417;
  uint64_t ***v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t **v422;
  llvm::APInt *v423;
  unsigned int v424;
  BOOL v425;
  _DWORD *v426;
  _DWORD *v427;
  int v428;
  int v429;
  const llvm::APInt *v430;
  llvm::Value *MemSet;
  llvm::MDNode *v432;
  llvm::MDNode *v433;
  llvm::MDNode *v434;
  llvm::MDNode *v435;
  uint64_t ****v436;
  uint64_t v437;
  unsigned int v438;
  BOOL v439;
  uint64_t v440;
  uint64_t v442;
  unsigned __int8 *v443;
  unsigned __int8 *v444;
  unsigned __int8 *v445;
  int v446;
  uint64_t v447;
  uint64_t ***v448;
  uint64_t v449;
  unsigned __int8 ***v450;
  unsigned __int8 ***v451;
  uint64_t v452;
  unsigned __int8 **v453;
  unsigned __int8 **v454;
  uint64_t v455;
  int v456;
  unsigned int v457;
  unsigned __int8 *v458;
  uint64_t v459;
  unsigned __int8 *v460;
  unsigned __int8 *v461;
  unsigned __int8 *v462;
  unint64_t v463;
  llvm::Type *v464;
  uint64_t v465;
  uint64_t v466;
  __int16 v467;
  unsigned __int8 *v468;
  unsigned __int8 *v469;
  unint64_t v470;
  _BYTE *v471;
  unsigned __int8 *v472;
  uint64_t v473;
  uint64_t v474;
  unsigned int v475;
  unsigned __int8 *v476[4];
  __int16 v477;
  unsigned __int8 *v478;
  llvm::AAMDNodes *v479;
  llvm::MDNode *v480;
  llvm::MDNode *v481;
  __int16 v482;
  unsigned __int8 *v483;
  __int128 v484;
  uint64_t v485;
  uint64_t v486;
  __int128 v487;
  unsigned __int8 *v488;
  __int16 v489;
  uint64_t v490;

  v490 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  *(_QWORD *)(a1 + 96) = *a2;
  v4 = a1 + 96;
  v5 = a2[1];
  *(_QWORD *)(a1 + 104) = v5;
  v6 = a2[2];
  *(_BYTE *)(a1 + 136) = (v6 & 4) != 0;
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = v3 < v7;
  if (v3 <= v7)
    v3 = *(_QWORD *)(a1 + 40);
  v10 = v5 > v8 || v9;
  *(_BYTE *)(a1 + 137) = v10;
  if (v8 < v5)
    v5 = v8;
  *(_QWORD *)(a1 + 112) = v3;
  *(_QWORD *)(a1 + 120) = v5;
  *(_QWORD *)(a1 + 128) = v5 - v3;
  *(_QWORD *)(a1 + 144) = v6 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  v11 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 24);
  v12 = (llvm::DataLayout *)(a1 + 176);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(v11 + 40);
  *(_QWORD *)(a1 + 232) = v11 + 24;
  v13 = *(unsigned __int8 **)(v11 + 48);
  v486 = (uint64_t)v13;
  if (v13)
  {
    llvm::MetadataTracking::track((uint64_t)&v486, v13, 2);
    v14 = (unsigned __int8 *)v486;
  }
  else
  {
    v14 = 0;
  }
  sub_1C4774EF4(v4 + 80, 0, (uint64_t)v14);
  if (v486)
    llvm::MetadataTracking::untrack((uint64_t)&v486, (unsigned __int8 *)v486);
  v15 = *(unsigned __int8 **)(v11 + 48);
  v483 = v15;
  if (v15)
  {
    llvm::MetadataTracking::track((uint64_t)&v483, v15, 2);
    v16 = v483;
  }
  else
  {
    v16 = 0;
  }
  sub_1C4774EF4(v4 + 80, 0, (uint64_t)v16);
  if (v483)
    llvm::MetadataTracking::untrack((uint64_t)&v483, v483);
  v17 = *(uint64_t ****)(a1 + 32);
  if ((*((_BYTE *)v17 + 23) & 0x10) != 0)
  {
    v18 = ***v17;
    v19 = *(_QWORD *)(v18 + 152);
    v20 = *(unsigned int *)(v18 + 168);
    if ((_DWORD)v20)
    {
      LODWORD(v21) = (v20 - 1) & ((v17 >> 4) ^ (v17 >> 9));
      v22 = (uint64_t ****)(v19 + 16 * v21);
      v23 = *v22;
      if (*v22 == v17)
      {
LABEL_25:
        v26 = v22[1];
        v29 = (unsigned __int8 *)*v26;
        v27 = (unsigned __int8 *)(v26 + 2);
        v28 = v29;
        goto LABEL_26;
      }
      v24 = 1;
      while (v23 != (uint64_t ***)-4096)
      {
        v25 = v21 + v24++;
        v21 = v25 & (v20 - 1);
        v23 = *(uint64_t ****)(v19 + 16 * v21);
        if (v23 == v17)
        {
          v22 = (uint64_t ****)(v19 + 16 * v21);
          goto LABEL_25;
        }
      }
    }
    v22 = (uint64_t ****)(v19 + 16 * v20);
    goto LABEL_25;
  }
  v28 = 0;
  v27 = (unsigned __int8 *)&byte_1C871356D;
LABEL_26:
  v476[0] = v27;
  v476[1] = v28;
  v476[2] = ".";
  v477 = 773;
  v478 = (unsigned __int8 *)v476;
  v480 = (llvm::MDNode *)v4;
  v482 = 3074;
  v486 = (uint64_t)&v478;
  *((_QWORD *)&v487 + 1) = ".";
  v489 = 770;
  llvm::Twine::str((llvm::Twine *)&v486, &v484);
  v31 = (void **)(a1 + 312);
  if (*(char *)(a1 + 335) < 0)
    operator delete(*v31);
  *(_OWORD *)v31 = v484;
  *(_QWORD *)(a1 + 328) = v485;
  v32 = *(uint64_t ****)(*(_QWORD *)(a1 + 144) + 24);
  v33 = *((unsigned __int8 *)v32 + 16);
  if (v33 <= 0x52)
  {
    if (v33 == 61)
    {
      v36 = (uint64_t)*(v32 - 4);
      llvm::Instruction::getAAMetadata(*(uint64_t ****)(*(_QWORD *)(a1 + 144) + 24), &v478);
      v37 = (unsigned __int8 *)*(v32 - 8);
      v38 = *(_QWORD *)v37;
      if (*(_BYTE *)(*(_QWORD *)v37 + 8) == 15)
      {
        v486 = 0;
        v39 = llvm::Value::stripInBoundsOffsets((uint64_t)v37, (void (*)(uint64_t, uint64_t))nullsub_615, (uint64_t)v476);
        if (*(_BYTE *)(v39 + 16) == 59)
          v40 = (unsigned __int8 *)v39;
        else
          v40 = 0;
        v486 = (uint64_t)v40;
        if (v40)
          sub_1C5C118DC(*(_QWORD *)(a1 + 16) + 400, &v486);
        v38 = *(_QWORD *)v37;
      }
      v41 = *(_QWORD *)(a1 + 128);
      sub_1C4768AD0(*(_QWORD *)a1, v38);
      if (v41 >= (unint64_t)(v42 + 7) >> 3)
      {
LABEL_94:
        v93 = *(_QWORD *)(a1 + 72);
        if (v93)
        {
          v94 = (llvm::MDNode *)v478;
          v95 = v479;
          v97 = v480;
          v96 = v481;
          v98 = *(llvm::Type **)v37;
          if (*(_QWORD *)v37 != v93)
          {
            v158 = *(_QWORD *)(a1 + 40);
            v159 = *(llvm::Type **)(a1 + 80);
            v160 = *(_QWORD *)(a1 + 88);
            v161 = (*(_QWORD *)(a1 + 112) - v158) / v160;
            v162 = (llvm::Type *)(((*(_QWORD *)(a1 + 120) - v158) / v160) - v161);
            if ((_DWORD)v162 != 1)
            {
              llvm::FixedVectorType::get(*(llvm::FixedVectorType **)(a1 + 80), v162);
              v159 = v163;
              v98 = *(llvm::Type **)v37;
            }
            if (v98 != v159)
              v37 = sub_1C5C1D6BC(*(llvm::DataLayout **)a1, v12, v37, v159);
            v164 = *(_QWORD *)(a1 + 32);
            v165 = *(_QWORD *)(v164 + 64);
            v166 = *(_WORD *)(v164 + 18) & 0x3F | 0x100;
            v486 = (uint64_t)"load";
            v489 = 259;
            v167 = sub_1C506D920((uint64_t *)v12, v165, v164, v166, 0, (uint64_t)&v486);
            v486 = (uint64_t)"vec";
            v489 = 259;
            v37 = sub_1C5C1E2F8((uint64_t)v12, v167, (const llvm::APInt *)v37, v161, (uint64_t)&v486);
          }
          v99 = sub_1C509CCE8((uint64_t *)v12, (uint64_t *)v37, *(_QWORD *)(a1 + 32), *(_WORD *)(*(_QWORD *)(a1 + 32) + 18) & 0x3F | 0x100u, 0);
          v486 = 0x190000000ALL;
          llvm::Instruction::copyMetadata((uint64_t)v99, (uint64_t)v32, (int *)&v486, 2);
          if (v94)
          {
            if (!v95)
            {
              v157 = 0;
              goto LABEL_163;
            }
          }
          else if (!v95)
          {
            if (!((unint64_t)v97 | (unint64_t)v96))
              goto LABEL_99;
            v157 = 0;
LABEL_494:
            if (!*((_QWORD *)v99 + 6) && (*((_BYTE *)v99 + 23) & 0x20) == 0)
              goto LABEL_164;
            goto LABEL_163;
          }
          v157 = llvm::AAMDNodes::shiftTBAAStruct(v95, (llvm::MDNode *)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 96)), v100);
          if (!v94)
            goto LABEL_494;
LABEL_163:
          llvm::Value::setMetadata(v99, 1, v94);
LABEL_164:
          if (v157 || *((_QWORD *)v99 + 6) || (*((_BYTE *)v99 + 23) & 0x20) != 0)
            llvm::Value::setMetadata(v99, 5, v157);
          if (v97 || *((_QWORD *)v99 + 6) || (*((_BYTE *)v99 + 23) & 0x20) != 0)
            llvm::Value::setMetadata(v99, 7, v97);
          if (v96 || *((_QWORD *)v99 + 6) || (*((_BYTE *)v99 + 23) & 0x20) != 0)
            llvm::Value::setMetadata(v99, 8, v96);
LABEL_99:
          v101 = *(_QWORD *)(a1 + 16);
          v486 = 4;
          *(_QWORD *)&v487 = 0;
          *((_QWORD *)&v487 + 1) = v32;
          if (v32 != (uint64_t ***)-8192 && v32 != (uint64_t ***)-4096 && v32)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v486);
          v102 = (_QWORD *)sub_1C4EE497C((unsigned int *)(v101 + 192), (unint64_t)&v486, 1);
          v103 = *(_DWORD *)(v101 + 200);
          v104 = (unint64_t *)(*(_QWORD *)(v101 + 192) + 24 * v103);
          *v104 = 4;
          v104[1] = 0;
          v105 = (unint64_t)(v104 + 1);
          v106 = v102[2];
          v104[2] = v106;
          if (v106 != -8192 && v106 != -4096)
          {
            if (v106)
            {
              v107 = *v102 & 0xFFFFFFFFFFFFFFF8;
              v104[1] = *(_QWORD *)v107;
              *(_QWORD *)v107 = v104;
              *v104 = v107 | 4;
              v108 = (uint64_t *)v104[1];
              if (v108)
                *v108 = *v108 & 7 | v105;
            }
          }
          *(_DWORD *)(v101 + 200) = v103 + 1;
          if (*((_QWORD *)&v487 + 1) == -8192 || *((_QWORD *)&v487 + 1) == -4096 || !*((_QWORD *)&v487 + 1))
            goto LABEL_55;
          v109 = v486 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v486 & 0xFFFFFFFFFFFFFFF8) = v487;
          v110 = (unint64_t *)v487;
          if (!(_QWORD)v487)
          {
            v111 = *((_QWORD *)&v487 + 1);
            v112 = (int32x2_t *)****((_QWORD ****)&v487 + 1);
            v113 = (unint64_t)v112[303];
            if (v113 > v109)
              goto LABEL_55;
            v114 = v112[305].u32[0];
            if (v113 + 16 * v114 <= v109)
              goto LABEL_55;
            v115 = v114 - 1;
            LODWORD(v116) = v115 & ((DWORD2(v487) >> 4) ^ (DWORD2(v487) >> 9));
            v117 = (uint64_t *)(v113 + 16 * v116);
            v118 = *v117;
            if (*((_QWORD *)&v487 + 1) != *v117)
            {
              v119 = 1;
              while (v118 != -4096)
              {
                v120 = v116 + v119++;
                v116 = v120 & v115;
                v118 = *(_QWORD *)(v113 + 16 * v116);
                if (*((_QWORD *)&v487 + 1) == v118)
                  goto LABEL_118;
              }
              goto LABEL_120;
            }
LABEL_119:
            *v117 = -8192;
            v112[304] = vadd_s32(v112[304], (int32x2_t)0x1FFFFFFFFLL);
            v111 = *((_QWORD *)&v487 + 1);
LABEL_120:
            *(_BYTE *)(v111 + 17) &= ~1u;
            goto LABEL_55;
          }
          goto LABEL_160;
        }
        v121 = *(_QWORD *)v37;
        if (*(_QWORD *)(a1 + 64) && *(_BYTE *)(v121 + 8) == 13)
        {
          v122 = (llvm::MDNode *)v478;
          v123 = v479;
          v125 = v480;
          v124 = v481;
          sub_1C4768AD0(*(_QWORD *)a1, v121);
          if (v126 != (unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 64) + 8) >> 8)
          {
            v465 = *(_QWORD *)(a1 + 32);
            v466 = *(_QWORD *)(v465 + 64);
            v467 = *(_WORD *)(v465 + 18) & 0x3F | 0x100;
            v486 = (uint64_t)"oldload";
            v489 = 259;
            v468 = (unsigned __int8 *)sub_1C506D920((uint64_t *)v12, v466, v465, v467, 0, (uint64_t)&v486);
            v469 = sub_1C5C1D6BC(*(llvm::DataLayout **)a1, v12, v468, *(llvm::Type **)(a1 + 64));
            v470 = *(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 40);
            v471 = *(_BYTE **)a1;
            v472 = (unsigned __int8 *)*(v32 - 8);
            v486 = (uint64_t)"insert";
            v489 = 259;
            v37 = (unsigned __int8 *)sub_1C5C1D8EC(v471, (uint64_t *)v12, (llvm::ConstantInt ***)v469, v472, v470, (uint64_t)&v486);
          }
          v127 = (uint64_t *)sub_1C5C1D6BC(*(llvm::DataLayout **)a1, v12, v37, *(llvm::Type **)(a1 + 56));
          v128 = sub_1C509CCE8((uint64_t *)v12, v127, *(_QWORD *)(a1 + 32), *(_WORD *)(*(_QWORD *)(a1 + 32) + 18) & 0x3F | 0x100u, 0);
          v486 = 0x190000000ALL;
          llvm::Instruction::copyMetadata((uint64_t)v128, (uint64_t)v32, (int *)&v486, 2);
          if (v122)
          {
            if (!v123)
            {
              v299 = 0;
              goto LABEL_382;
            }
          }
          else if (!v123)
          {
            if (!((unint64_t)v125 | (unint64_t)v124))
              goto LABEL_128;
            v299 = 0;
LABEL_633:
            if (!*((_QWORD *)v128 + 6) && (*((_BYTE *)v128 + 23) & 0x20) == 0)
              goto LABEL_383;
            goto LABEL_382;
          }
          v299 = llvm::AAMDNodes::shiftTBAAStruct(v123, (llvm::MDNode *)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 96)), v129);
          if (!v122)
            goto LABEL_633;
LABEL_382:
          llvm::Value::setMetadata(v128, 1, v122);
LABEL_383:
          if (v299 || *((_QWORD *)v128 + 6) || (*((_BYTE *)v128 + 23) & 0x20) != 0)
            llvm::Value::setMetadata(v128, 5, v299);
          if (v125 || *((_QWORD *)v128 + 6) || (*((_BYTE *)v128 + 23) & 0x20) != 0)
            llvm::Value::setMetadata(v128, 7, v125);
          if (v124 || *((_QWORD *)v128 + 6) || (*((_BYTE *)v128 + 23) & 0x20) != 0)
            llvm::Value::setMetadata(v128, 8, v124);
LABEL_128:
          v130 = *(_QWORD *)(a1 + 16);
          v486 = 4;
          *(_QWORD *)&v487 = 0;
          *((_QWORD *)&v487 + 1) = v32;
          if (v32 != (uint64_t ***)-8192 && v32 != (uint64_t ***)-4096 && v32)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v486);
          v131 = (_QWORD *)sub_1C4EE497C((unsigned int *)(v130 + 192), (unint64_t)&v486, 1);
          v132 = *(_DWORD *)(v130 + 200);
          v133 = (unint64_t *)(*(_QWORD *)(v130 + 192) + 24 * v132);
          *v133 = 4;
          v133[1] = 0;
          v134 = (unint64_t)(v133 + 1);
          v135 = v131[2];
          v133[2] = v135;
          if (v135 != -8192 && v135 != -4096)
          {
            if (v135)
            {
              v136 = *v131 & 0xFFFFFFFFFFFFFFF8;
              v133[1] = *(_QWORD *)v136;
              *(_QWORD *)v136 = v133;
              *v133 = v136 | 4;
              v137 = (uint64_t *)v133[1];
              if (v137)
                *v137 = *v137 & 7 | v134;
            }
          }
          *(_DWORD *)(v130 + 200) = v132 + 1;
          if (*((_QWORD *)&v487 + 1) == -8192 || *((_QWORD *)&v487 + 1) == -4096 || !*((_QWORD *)&v487 + 1))
            goto LABEL_55;
          v109 = v486 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v486 & 0xFFFFFFFFFFFFFFF8) = v487;
          v110 = (unint64_t *)v487;
          if (!(_QWORD)v487)
          {
            v111 = *((_QWORD *)&v487 + 1);
            v112 = (int32x2_t *)****((_QWORD ****)&v487 + 1);
            v113 = (unint64_t)v112[303];
            if (v113 > v109)
              goto LABEL_55;
            v138 = v112[305].u32[0];
            if (v113 + 16 * v138 <= v109)
              goto LABEL_55;
            v139 = v138 - 1;
            LODWORD(v116) = v139 & ((DWORD2(v487) >> 4) ^ (DWORD2(v487) >> 9));
            v117 = (uint64_t *)(v113 + 16 * v116);
            v140 = *v117;
            if (*((_QWORD *)&v487 + 1) != *v117)
            {
              v141 = 1;
              while (v140 != -4096)
              {
                v142 = v116 + v141++;
                v116 = v142 & v139;
                v140 = *(_QWORD *)(v113 + 16 * v116);
                if (*((_QWORD *)&v487 + 1) == v140)
                {
LABEL_118:
                  v117 = (uint64_t *)(v113 + 16 * v116);
                  goto LABEL_119;
                }
              }
              goto LABEL_120;
            }
            goto LABEL_119;
          }
LABEL_160:
          *v110 = *v110 & 7 | v109;
          goto LABEL_55;
        }
        sub_1C4768AD0(*(_QWORD *)a1, v121);
        if (*(_QWORD *)(a1 + 112) == *(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 120) == *(_QWORD *)(a1 + 48))
        {
          v144 = v143;
          v145 = *(_QWORD *)(a1 + 128);
          if (sub_1C5C1C2C0(*(_QWORD *)a1, *(_QWORD *)v37, *(_QWORD *)(a1 + 56)))
          {
            v146 = *(llvm::ConstantInt **)v37;
            v147 = *(_DWORD *)(*(_QWORD *)v37 + 8);
            v148 = *(llvm::Type **)(a1 + 56);
LABEL_152:
            if (v147 == 13)
            {
              if (v148)
              {
                v149 = *((_DWORD *)v148 + 2);
                if (v149 == 13)
                {
                  v150 = v147 >> 8;
                  if (v150 > v149 >> 8)
                  {
                    if (**(_BYTE **)a1)
                    {
                      v486 = (uint64_t)"endian_shift";
                      v489 = 259;
                      v151 = llvm::ConstantInt::get(v146, v150 - (v149 >> 8), 0);
                      v37 = (unsigned __int8 *)sub_1C506ED1C((uint64_t)v12, (uint64_t)v37, (uint64_t)v151, (uint64_t)&v486, 0);
                    }
                    v486 = (uint64_t)"load.trunc";
                    v489 = 259;
                    v37 = sub_1C4773E38((uint64_t *)v12, 38, v37, (uint64_t)v148, (uint64_t)&v486);
                    v148 = *(llvm::Type **)(a1 + 56);
                  }
                }
              }
            }
            v152 = (uint64_t *)sub_1C5C1D6BC(*(llvm::DataLayout **)a1, v12, v37, v148);
            v153 = *(unsigned __int8 **)(a1 + 32);
            v154 = *((_WORD *)v32 + 9) & 1;
            v155 = *((_WORD *)v153 + 9) & 0x3F | 0x100;
            v156 = (uint64_t *)v12;
            goto LABEL_187;
          }
          if ((unint64_t)(v144 + 7) >> 3 > v145)
          {
            v148 = *(llvm::Type **)(a1 + 56);
            if (*((_BYTE *)v148 + 8) == 13)
            {
              v146 = *(llvm::ConstantInt **)v37;
              v147 = *(_DWORD *)(*(_QWORD *)v37 + 8);
              if (v147 == 13)
                goto LABEL_152;
            }
          }
        }
        v168 = (uint64_t)**(v32 - 4);
        v169 = *(_DWORD *)(v168 + 8);
        if ((v169 & 0xFE) == 0x12)
          v169 = *(_DWORD *)(**(_QWORD **)(v168 + 16) + 8);
        v170 = llvm::PointerType::get(*(llvm::PointerType **)v37, (llvm::Type *)(v169 >> 8));
        v153 = sub_1C5C1D5D8((uint64_t *)a1, (uint64_t)v12, v170);
        v171 = (1 << *(_WORD *)(*(_QWORD *)(a1 + 32) + 18)) | (*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 40));
        v154 = *((_WORD *)v32 + 9) & 1;
        v155 = (63 - __clz(v171 & -v171)) | 0x100;
        v156 = (uint64_t *)v12;
        v152 = (uint64_t *)v37;
LABEL_187:
        v172 = sub_1C509CCE8(v156, v152, (uint64_t)v153, v155, v154);
        v486 = 0x190000000ALL;
        llvm::Instruction::copyMetadata((uint64_t)v172, (uint64_t)v32, (int *)&v486, 2);
        v174 = (llvm::MDNode *)v478;
        v176 = v480;
        v175 = v481;
        if (v478 || v479 || v480 || v481)
        {
          if (v479)
          {
            v177 = llvm::AAMDNodes::shiftTBAAStruct(v479, (llvm::MDNode *)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 96)), v173);
            v176 = v480;
            v175 = v481;
          }
          else
          {
            v177 = 0;
          }
          if (v174 || *((_QWORD *)v172 + 6) || (*((_BYTE *)v172 + 23) & 0x20) != 0)
            llvm::Value::setMetadata(v172, 1, v174);
          if (v177 || *((_QWORD *)v172 + 6) || (*((_BYTE *)v172 + 23) & 0x20) != 0)
            llvm::Value::setMetadata(v172, 5, v177);
          if (v176 || *((_QWORD *)v172 + 6) || (*((_BYTE *)v172 + 23) & 0x20) != 0)
            llvm::Value::setMetadata(v172, 7, v176);
          if (v175 || *((_QWORD *)v172 + 6) || (*((_BYTE *)v172 + 23) & 0x20) != 0)
            llvm::Value::setMetadata(v172, 8, v175);
        }
        v178 = *((_WORD *)v32 + 9);
        if ((v178 & 1) != 0)
        {
          v179 = *((_BYTE *)v32 + 60);
          *((_WORD *)v172 + 9) = *((_WORD *)v172 + 9) & 0xFC7F | v178 & 0x380;
          *((_BYTE *)v172 + 60) = v179;
        }
        v180 = *((unsigned __int8 *)v172 + 16);
        if (v180 == 60 || v180 == 61)
        {
          if ((*((_WORD *)v172 + 9) & 0x380) == 0)
          {
LABEL_213:
            v181 = *(_QWORD *)(a1 + 16);
            v486 = 4;
            *(_QWORD *)&v487 = 0;
            *((_QWORD *)&v487 + 1) = v32;
            if (v32 != (uint64_t ***)-8192 && v32 != (uint64_t ***)-4096 && v32)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v486);
            v182 = (_QWORD *)sub_1C4EE497C((unsigned int *)(v181 + 192), (unint64_t)&v486, 1);
            v183 = *(_DWORD *)(v181 + 200);
            v184 = (unint64_t *)(*(_QWORD *)(v181 + 192) + 24 * v183);
            *v184 = 4;
            v184[1] = 0;
            v185 = (unint64_t)(v184 + 1);
            v186 = v182[2];
            v184[2] = v186;
            if (v186 != -8192 && v186 != -4096)
            {
              if (v186)
              {
                v187 = *v182 & 0xFFFFFFFFFFFFFFF8;
                v184[1] = *(_QWORD *)v187;
                *(_QWORD *)v187 = v184;
                *v184 = v187 | 4;
                v188 = (uint64_t *)v184[1];
                if (v188)
                  *v188 = *v188 & 7 | v185;
              }
            }
            *(_DWORD *)(v181 + 200) = v183 + 1;
            if (*((_QWORD *)&v487 + 1) != -8192 && *((_QWORD *)&v487 + 1) != -4096 && *((_QWORD *)&v487 + 1))
            {
              v189 = v486 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)(v486 & 0xFFFFFFFFFFFFFFF8) = v487;
              if ((_QWORD)v487)
              {
                *(_QWORD *)v487 = *(_QWORD *)v487 & 7 | v189;
              }
              else
              {
                v190 = *((_QWORD *)&v487 + 1);
                v191 = (int32x2_t *)****((_QWORD ****)&v487 + 1);
                v192 = (unint64_t)v191[303];
                if (v192 <= v189)
                {
                  v193 = v191[305].u32[0];
                  if (v192 + 16 * v193 > v189)
                  {
                    v194 = v193 - 1;
                    LODWORD(v195) = v194 & ((DWORD2(v487) >> 4) ^ (DWORD2(v487) >> 9));
                    v196 = (uint64_t *)(v192 + 16 * v195);
                    v197 = *v196;
                    if (*((_QWORD *)&v487 + 1) == *v196)
                    {
LABEL_233:
                      *v196 = -8192;
                      v191[304] = vadd_s32(v191[304], (int32x2_t)0x1FFFFFFFFLL);
                      v190 = *((_QWORD *)&v487 + 1);
                    }
                    else
                    {
                      v198 = 1;
                      while (v197 != -4096)
                      {
                        v199 = v195 + v198++;
                        v195 = v199 & v194;
                        v197 = *(_QWORD *)(v192 + 16 * v195);
                        if (*((_QWORD *)&v487 + 1) == v197)
                        {
                          v196 = (uint64_t *)(v192 + 16 * v195);
                          goto LABEL_233;
                        }
                      }
                    }
                    *(_BYTE *)(v190 + 17) &= ~1u;
                  }
                }
              }
            }
            sub_1C5C1DD04((_QWORD *)a1, v36);
            if (*((_QWORD *)v172 - 4) == *(_QWORD *)(a1 + 32) && **((_QWORD **)v172 - 8) == *(_QWORD *)(a1 + 56))
            {
              v298 = (*((_WORD *)v32 + 9) & 1) == 0;
LABEL_377:
              v30 = v298;
              return v30 & 1;
            }
LABEL_375:
            v30 = 0;
            return v30 & 1;
          }
        }
        else if ((v180 - 63) >= 3)
        {
          goto LABEL_213;
        }
        *((_WORD *)v172 + 9) = *((_WORD *)v172 + 9) & 0xFF81 | (2
                                                              * __clz(1 << ((unint64_t)*((unsigned __int16 *)v32
                                                                                                + 9) >> 1))) ^ 0x7E;
        goto LABEL_213;
      }
      v43 = **v32;
      v44 = 8 * *(_DWORD *)(a1 + 128);
      LODWORD(v486) = v44;
      if (v44 <= 63)
      {
        switch(v44)
        {
          case 32:
            v45 = (_QWORD *)(*v43 + 1960);
            goto LABEL_93;
          case 16:
            v45 = (_QWORD *)(*v43 + 1936);
            goto LABEL_93;
          case 8:
            v45 = (_QWORD *)(*v43 + 1912);
            goto LABEL_93;
        }
      }
      else
      {
        if (v44 == 64)
        {
          v45 = (_QWORD *)(*v43 + 1984);
LABEL_93:
          v91 = *(_BYTE **)a1;
          v92 = *(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 96);
          v486 = (uint64_t)"extract";
          v489 = 259;
          v37 = sub_1C5C1E154(v91, (uint64_t *)v12, (uint64_t *)v37, (uint64_t)v45, v92, (uint64_t)&v486);
          goto LABEL_94;
        }
        if (v44 == 128)
        {
          v45 = (_QWORD *)(*v43 + 2008);
          goto LABEL_93;
        }
      }
      v345 = sub_1C5270984(*v43 + 2168, &v486);
      v45 = (_QWORD *)*((_QWORD *)v345 + 1);
      if (!v45)
      {
        v346 = v345;
        v45 = (_QWORD *)sub_1C484358C(*v43 + 2040, 24, 3);
        v347 = v486;
        *v45 = v43;
        v45[2] = 0;
        v45[1] = (v347 << 8) | 0xDu;
        *((_QWORD *)v346 + 1) = v45;
      }
      goto LABEL_93;
    }
    v47 = (uint64_t)*(v32 - 4);
    llvm::Instruction::getAAMetadata(*(uint64_t ****)(*(_QWORD *)(a1 + 144) + 24), &v478);
    v48 = (uint64_t)**(v32 - 4);
    v49 = *(_DWORD *)(v48 + 8);
    if ((v49 & 0xFE) == 0x12)
      v49 = *(_DWORD *)(**(_QWORD **)(v48 + 16) + 8);
    v50 = v49 >> 8;
    v51 = (llvm::Type *)*v32;
    if (*(_BYTE *)(a1 + 137))
    {
      v52 = *(_QWORD **)v51;
      v53 = 8 * *(_DWORD *)(a1 + 128);
      LODWORD(v486) = v53;
      if (v53 <= 63)
      {
        switch(v53)
        {
          case 32:
            v51 = (llvm::Type *)(*v52 + 1960);
            goto LABEL_71;
          case 16:
            v51 = (llvm::Type *)(*v52 + 1936);
            goto LABEL_71;
          case 8:
            v51 = (llvm::Type *)(*v52 + 1912);
            goto LABEL_71;
        }
      }
      else
      {
        if (v53 == 64)
        {
          v51 = (llvm::Type *)(*v52 + 1984);
          goto LABEL_71;
        }
        if (v53 == 128)
        {
          v51 = (llvm::Type *)(*v52 + 2008);
          goto LABEL_71;
        }
      }
      v342 = sub_1C5270984(*v52 + 2168, &v486);
      v51 = (llvm::Type *)*((_QWORD *)v342 + 1);
      if (!v51)
      {
        v343 = v342;
        v51 = (llvm::Type *)sub_1C484358C(*v52 + 2040, 24, 3);
        v344 = v486;
        *(_QWORD *)v51 = v52;
        *((_QWORD *)v51 + 2) = 0;
        *((_QWORD *)v51 + 1) = (v344 << 8) | 0xDu;
        *((_QWORD *)v343 + 1) = v51;
      }
    }
LABEL_71:
    sub_1C4768AD0(*(_QWORD *)a1, (uint64_t)v51);
    if (*(_QWORD *)(a1 + 72))
    {
      v55 = *(_QWORD *)(a1 + 32);
      v56 = *(_QWORD *)(a1 + 40);
      v57 = *(_QWORD *)(a1 + 88);
      v58 = *(_QWORD *)(a1 + 120) - v56;
      v59 = *(_WORD *)(v55 + 18) & 0x3F | 0x100;
      v60 = (*(_QWORD *)(a1 + 112) - v56) / v57;
      v486 = (uint64_t)"load";
      v61 = *(_QWORD *)(v55 + 64);
      v62 = v58 / v57;
      v489 = 259;
      v63 = (llvm::PoisonValue **)sub_1C506D920((uint64_t *)v12, v61, v55, v59, 0, (uint64_t)&v486);
      v486 = 0x190000000ALL;
      llvm::Instruction::copyMetadata((uint64_t)v63, (uint64_t)v32, (int *)&v486, 2);
      v486 = (uint64_t)"vec";
      v489 = 259;
      v64 = sub_1C5C1DEEC((uint64_t)v12, v63, (const llvm::APInt *)v60, v62, (uint64_t)&v486);
      goto LABEL_73;
    }
    v67 = v54;
    v68 = *(_QWORD *)(a1 + 128);
    if (*(_QWORD *)(a1 + 64) && *((_BYTE *)*v32 + 8) == 13)
    {
      v69 = *(_QWORD *)(a1 + 32);
      v70 = *(_QWORD *)(v69 + 64);
      v71 = *(_WORD *)(v69 + 18) & 0x3F | 0x100;
      v486 = (uint64_t)"load";
      v489 = 259;
      v72 = (unsigned __int8 *)sub_1C506D920((uint64_t *)v12, v70, v69, v71, 0, (uint64_t)&v486);
      v65 = (uint64_t)sub_1C5C1D6BC(*(llvm::DataLayout **)a1, v12, v72, *(llvm::Type **)(a1 + 64));
      v73 = *(_QWORD *)(a1 + 112);
      v74 = *(_QWORD *)(a1 + 40);
      v75 = v73 - v74;
      if (v73 == v74 && *(_QWORD *)(a1 + 120) >= *(_QWORD *)(a1 + 48))
        goto LABEL_409;
      v76 = **v32;
      v77 = 8 * *(_DWORD *)(a1 + 128);
      LODWORD(v486) = v77;
      if (v77 <= 63)
      {
        switch(v77)
        {
          case 32:
            v78 = (_QWORD *)(*v76 + 1960);
            goto LABEL_408;
          case 16:
            v78 = (_QWORD *)(*v76 + 1936);
            goto LABEL_408;
          case 8:
            v78 = (_QWORD *)(*v76 + 1912);
            goto LABEL_408;
        }
      }
      else
      {
        if (v77 == 64)
        {
          v78 = (_QWORD *)(*v76 + 1984);
LABEL_408:
          v313 = *(_BYTE **)a1;
          v486 = (uint64_t)"extract";
          v489 = 259;
          v65 = (uint64_t)sub_1C5C1E154(v313, (uint64_t *)v12, (uint64_t *)v65, (uint64_t)v78, v75, (uint64_t)&v486);
LABEL_409:
          v314 = *v32;
          if (8 * *(_QWORD *)(a1 + 128) >= (unint64_t)*((unsigned int *)*v32 + 2) >> 8)
            goto LABEL_74;
          v489 = 257;
          v64 = sub_1C4773E38((uint64_t *)v12, 39, (unsigned __int8 *)v65, (uint64_t)v314, (uint64_t)&v486);
LABEL_73:
          v65 = (uint64_t)v64;
LABEL_74:
          v66 = 1;
LABEL_276:
          v225 = sub_1C5C1D6BC(*(llvm::DataLayout **)a1, v12, (unsigned __int8 *)v65, v51);
          if (*(_BYTE *)(a1 + 137))
          {
            v226 = 0;
            v227 = v32[4];
            if (v227)
              v228 = v227 - 3;
            else
              v228 = 0;
            *(_QWORD *)(a1 + 224) = v228[5];
            *(_QWORD *)(a1 + 232) = v228 + 3;
            v229 = (unsigned __int8 *)v228[6];
            v486 = (uint64_t)v229;
            if (v229)
            {
              llvm::MetadataTracking::track((uint64_t)&v486, v229, 2);
              v226 = (unsigned __int8 *)v486;
            }
            sub_1C4774EF4((uint64_t)v12, 0, (uint64_t)v226);
            if (v486)
              llvm::MetadataTracking::untrack((uint64_t)&v486, (unsigned __int8 *)v486);
            v230 = (char *)operator new(0x60uLL);
            v231 = (uint64_t ***)(v230 + 32);
            *((_DWORD *)v230 + 13) = *((_DWORD *)v230 + 13) & 0x38000000 | 1;
            *(_QWORD *)v230 = 0;
            *((_QWORD *)v230 + 1) = 0;
            *((_QWORD *)v230 + 2) = 0;
            *((_QWORD *)v230 + 3) = v230 + 32;
            v232 = *v32;
            v233 = (llvm::PoisonValue *)llvm::PointerType::get((llvm::PointerType *)*v32, (llvm::Type *)v50);
            v235 = llvm::PoisonValue::get(v233, v234);
            v489 = 257;
            *((_QWORD *)v230 + 4) = v232;
            *((_QWORD *)v230 + 5) = 0;
            *((_WORD *)v230 + 24) = 60;
            *((_DWORD *)v230 + 13) = *((_DWORD *)v230 + 13) & 0xC0000000 | 1;
            *(_OWORD *)(v230 + 56) = 0u;
            *(_OWORD *)(v230 + 72) = 0u;
            *((_DWORD *)v230 + 22) = 0;
            if (*(_QWORD *)v230)
            {
              **((_QWORD **)v230 + 2) = *((_QWORD *)v230 + 1);
              v473 = *((_QWORD *)v230 + 1);
              if (v473)
                *(_QWORD *)(v473 + 16) = *((_QWORD *)v230 + 2);
            }
            *(_QWORD *)v230 = v235;
            if (v235)
            {
              v238 = v235[1];
              v236 = v235 + 1;
              v237 = v238;
              *((_QWORD *)v230 + 1) = v238;
              if (v238)
                *(_QWORD *)(v237 + 16) = v230 + 8;
              *((_QWORD *)v230 + 2) = v236;
              *v236 = v230;
            }
            *((_WORD *)v230 + 25) = 0;
            v230[92] = 1;
            llvm::Value::setName(v231, (uint64_t)&v486);
            v239 = *(_BYTE **)a1;
            v240 = *(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 96);
            v486 = (uint64_t)"insert";
            v489 = 259;
            v241 = sub_1C5C1D8EC(v239, (uint64_t *)v12, (llvm::ConstantInt ***)v231, v225, v240, (uint64_t)&v486);
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v32, (llvm::Value *)v241, (llvm::Value *)1);
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v231, (llvm::Value *)v32, (llvm::Value *)1);
            llvm::Value::deleteValue((llvm::Value *)v231);
          }
          else
          {
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v32, (llvm::Value *)v225, (llvm::Value *)1);
          }
          v242 = *(_QWORD *)(a1 + 16);
          v486 = 4;
          *(_QWORD *)&v487 = 0;
          *((_QWORD *)&v487 + 1) = v32;
          if (v32 != (uint64_t ***)-8192 && v32 != (uint64_t ***)-4096 && v32)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v486);
          v243 = (_QWORD *)sub_1C4EE497C((unsigned int *)(v242 + 192), (unint64_t)&v486, 1);
          v244 = *(_DWORD *)(v242 + 200);
          v245 = (unint64_t *)(*(_QWORD *)(v242 + 192) + 24 * v244);
          *v245 = 4;
          v245[1] = 0;
          v246 = (unint64_t)(v245 + 1);
          v247 = v243[2];
          v245[2] = v247;
          if (v247 != -8192 && v247 != -4096 && v247 != 0)
          {
            v249 = *v243 & 0xFFFFFFFFFFFFFFF8;
            v245[1] = *(_QWORD *)v249;
            *(_QWORD *)v249 = v245;
            *v245 = v249 | 4;
            v250 = (uint64_t *)v245[1];
            if (v250)
              *v250 = *v250 & 7 | v246;
          }
          *(_DWORD *)(v242 + 200) = v244 + 1;
          if (*((_QWORD *)&v487 + 1) != -8192 && *((_QWORD *)&v487 + 1) != -4096 && *((_QWORD *)&v487 + 1))
          {
            v251 = v486 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v486 & 0xFFFFFFFFFFFFFFF8) = v487;
            if ((_QWORD)v487)
            {
              *(_QWORD *)v487 = *(_QWORD *)v487 & 7 | v251;
            }
            else
            {
              v252 = *((_QWORD *)&v487 + 1);
              v253 = (int32x2_t *)****((_QWORD ****)&v487 + 1);
              v254 = (unint64_t)v253[303];
              if (v254 <= v251)
              {
                v255 = v253[305].u32[0];
                if (v254 + 16 * v255 > v251)
                {
                  v256 = v255 - 1;
                  LODWORD(v257) = v256 & ((DWORD2(v487) >> 4) ^ (DWORD2(v487) >> 9));
                  v258 = (uint64_t *)(v254 + 16 * v257);
                  v259 = *v258;
                  if (*((_QWORD *)&v487 + 1) == *v258)
                  {
LABEL_313:
                    *v258 = -8192;
                    v253[304] = vadd_s32(v253[304], (int32x2_t)0x1FFFFFFFFLL);
                    v252 = *((_QWORD *)&v487 + 1);
                  }
                  else
                  {
                    v260 = 1;
                    while (v259 != -4096)
                    {
                      v261 = v257 + v260++;
                      v257 = v261 & v256;
                      v259 = *(_QWORD *)(v254 + 16 * v257);
                      if (*((_QWORD *)&v487 + 1) == v259)
                      {
                        v258 = (uint64_t *)(v254 + 16 * v257);
                        goto LABEL_313;
                      }
                    }
                  }
                  *(_BYTE *)(v252 + 17) &= ~1u;
                }
              }
            }
          }
          sub_1C5C1DD04((_QWORD *)a1, v47);
          if ((*((_WORD *)v32 + 9) & 1) != 0)
            v30 = 0;
          else
            v30 = v66;
          return v30 & 1;
        }
        if (v77 == 128)
        {
          v78 = (_QWORD *)(*v76 + 2008);
          goto LABEL_408;
        }
      }
      v426 = sub_1C5270984(*v76 + 2168, &v486);
      v78 = (_QWORD *)*((_QWORD *)v426 + 1);
      if (!v78)
      {
        v427 = v426;
        v78 = (_QWORD *)sub_1C484358C(*v76 + 2040, 24, 3);
        v428 = v486;
        *v78 = v76;
        v78[2] = 0;
        v78[1] = (v428 << 8) | 0xDu;
        *((_QWORD *)v427 + 1) = v78;
      }
      goto LABEL_408;
    }
    if (*(_QWORD *)(a1 + 112) != *(_QWORD *)(a1 + 40)
      || *(_QWORD *)(a1 + 120) != *(_QWORD *)(a1 + 48)
      || (sub_1C5C1C2C0(*(_QWORD *)a1, *(_QWORD *)(a1 + 56), (uint64_t)v51) & 1) == 0
      && ((unint64_t)(v67 + 7) >> 3 <= v68
       || *(_BYTE *)(*(_QWORD *)(a1 + 56) + 8) != 13
       || *((_BYTE *)v51 + 8) != 13))
    {
      v200 = llvm::PointerType::get(v51, (llvm::Type *)v50);
      v201 = sub_1C5C1D5D8((uint64_t *)a1, (uint64_t)v12, v200);
      v202 = (1 << *(_WORD *)(*(_QWORD *)(a1 + 32) + 18)) | (*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 40));
      v203 = 63 - __clz(v202 & -v202);
      v204 = *((_WORD *)v32 + 9);
      v475 = v50;
      if ((*((_BYTE *)v32 + 23) & 0x10) == 0)
      {
        v213 = v47;
        v216 = 0;
        v215 = (unsigned __int8 *)&byte_1C871356D;
LABEL_252:
        v489 = 261;
        v486 = (uint64_t)v215;
        *(_QWORD *)&v487 = v216;
        v65 = (uint64_t)sub_1C506D920((uint64_t *)v12, (uint64_t)v51, (uint64_t)v201, v203 | 0x100u, v204 & 1, (uint64_t)&v486);
        v219 = (llvm::MDNode *)v478;
        v221 = v480;
        v220 = v481;
        if (v478 || v479 || v480 || v481)
        {
          if (v479)
          {
            v222 = llvm::AAMDNodes::shiftTBAAStruct(v479, (llvm::MDNode *)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 96)), v218);
            v221 = v480;
            v220 = v481;
          }
          else
          {
            v222 = 0;
          }
          if (v219 || *(_QWORD *)(v65 + 48) || (*(_BYTE *)(v65 + 23) & 0x20) != 0)
            llvm::Value::setMetadata((llvm::Value *)v65, 1, v219);
          if (v222 || *(_QWORD *)(v65 + 48) || (*(_BYTE *)(v65 + 23) & 0x20) != 0)
            llvm::Value::setMetadata((llvm::Value *)v65, 5, v222);
          if (v221 || *(_QWORD *)(v65 + 48) || (*(_BYTE *)(v65 + 23) & 0x20) != 0)
            llvm::Value::setMetadata((llvm::Value *)v65, 7, v221);
          if (v220 || *(_QWORD *)(v65 + 48) || (*(_BYTE *)(v65 + 23) & 0x20) != 0)
            llvm::Value::setMetadata((llvm::Value *)v65, 8, v220);
        }
        v223 = *((_WORD *)v32 + 9);
        if ((v223 & 1) != 0)
        {
          v224 = *((_BYTE *)v32 + 60);
          *(_WORD *)(v65 + 18) = *(_WORD *)(v65 + 18) & 0xFC7F | v223 & 0x380;
          *(_BYTE *)(v65 + 60) = v224;
        }
        v486 = 0x190000000ALL;
        llvm::Instruction::copyMetadata(v65, (uint64_t)v32, (int *)&v486, 2);
        v66 = 0;
        v47 = v213;
        v50 = v475;
        goto LABEL_276;
      }
      v205 = ***v32;
      v206 = *(_QWORD *)(v205 + 152);
      v207 = *(unsigned int *)(v205 + 168);
      if ((_DWORD)v207)
      {
        LODWORD(v208) = (v207 - 1) & ((v32 >> 4) ^ (v32 >> 9));
        v209 = (uint64_t ****)(v206 + 16 * v208);
        v210 = *v209;
        if (*v209 == v32)
        {
LABEL_251:
          v213 = v47;
          v214 = v209[1];
          v217 = *v214;
          v215 = (unsigned __int8 *)(v214 + 2);
          v216 = v217;
          goto LABEL_252;
        }
        v211 = 1;
        while (v210 != (uint64_t ***)-4096)
        {
          v212 = v208 + v211++;
          v208 = v212 & (v207 - 1);
          v210 = *(uint64_t ****)(v206 + 16 * v208);
          if (v210 == v32)
          {
            v209 = (uint64_t ****)(v206 + 16 * v208);
            goto LABEL_251;
          }
        }
      }
      v209 = (uint64_t ****)(v206 + 16 * v207);
      goto LABEL_251;
    }
    v79 = *(_QWORD *)(a1 + 32);
    v80 = *(_QWORD *)(v79 + 64);
    v81 = *(_WORD *)(v79 + 18) & 0x3F;
    v82 = *((_WORD *)v32 + 9);
    v474 = v47;
    if ((*((_BYTE *)v32 + 23) & 0x10) == 0)
    {
      v317 = 0;
      v316 = (unsigned __int8 *)&byte_1C871356D;
      goto LABEL_421;
    }
    v83 = ***v32;
    v84 = *(_QWORD *)(v83 + 152);
    v85 = *(unsigned int *)(v83 + 168);
    if ((_DWORD)v85)
    {
      LODWORD(v86) = (v85 - 1) & ((v32 >> 4) ^ (v32 >> 9));
      v87 = (uint64_t ****)(v84 + 16 * v86);
      v88 = *v87;
      if (*v87 == v32)
      {
LABEL_420:
        v315 = v87[1];
        v318 = *v315;
        v316 = (unsigned __int8 *)(v315 + 2);
        v317 = v318;
LABEL_421:
        v489 = 261;
        v486 = (uint64_t)v316;
        *(_QWORD *)&v487 = v317;
        v65 = (uint64_t)sub_1C506D920((uint64_t *)v12, v80, v79, v81 | 0x100u, v82 & 1, (uint64_t)&v486);
        v321 = (llvm::MDNode *)v478;
        v323 = v480;
        v322 = v481;
        if (v478 || v479 || v480 || v481)
        {
          if (v479)
          {
            v324 = llvm::AAMDNodes::shiftTBAAStruct(v479, (llvm::MDNode *)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 96)), v319);
            v323 = v480;
            v322 = v481;
          }
          else
          {
            v324 = 0;
          }
          if (v321 || *(_QWORD *)(v65 + 48) || (*(_BYTE *)(v65 + 23) & 0x20) != 0)
            llvm::Value::setMetadata((llvm::Value *)v65, 1, v321);
          if (v324 || *(_QWORD *)(v65 + 48) || (*(_BYTE *)(v65 + 23) & 0x20) != 0)
            llvm::Value::setMetadata((llvm::Value *)v65, 5, v324);
          if (v323 || *(_QWORD *)(v65 + 48) || (*(_BYTE *)(v65 + 23) & 0x20) != 0)
            llvm::Value::setMetadata((llvm::Value *)v65, 7, v323);
          if (v322 || *(_QWORD *)(v65 + 48) || (*(_BYTE *)(v65 + 23) & 0x20) != 0)
            llvm::Value::setMetadata((llvm::Value *)v65, 8, v322);
        }
        v325 = *((_WORD *)v32 + 9);
        if ((v325 & 1) != 0)
        {
          v326 = *((_BYTE *)v32 + 60);
          *(_WORD *)(v65 + 18) = *(_WORD *)(v65 + 18) & 0xFC7F | v325 & 0x380;
          *(_BYTE *)(v65 + 60) = v326;
        }
        v327 = *(unsigned __int8 *)(v65 + 16);
        v47 = v474;
        if (v327 == 60 || v327 == 61)
        {
          if ((*(_WORD *)(v65 + 18) & 0x380) == 0)
            goto LABEL_447;
        }
        else if ((v327 - 63) >= 3)
        {
LABEL_447:
          if ((*((_BYTE *)v32 + 23) & 0x20) == 0)
            goto LABEL_480;
          v328 = ***v32;
          v486 = (uint64_t)v32;
          v329 = *(_DWORD *)(v328 + 2496);
          if (v329)
          {
            v330 = *(_QWORD *)(v328 + 2480);
            v331 = v329 - 1;
            v332 = v331 & ((v32 >> 4) ^ (v32 >> 9));
            v333 = (uint64_t ****)(v330 + 40 * v332);
            v334 = *v333;
            if (*v333 == v32)
              goto LABEL_458;
            v335 = 0;
            v336 = 1;
            while (v334 != (uint64_t ***)-4096)
            {
              if (v335)
                v337 = 0;
              else
                v337 = v334 == (uint64_t ***)-8192;
              if (v337)
                v335 = v333;
              v338 = v332 + v336++;
              v332 = v338 & v331;
              v333 = (uint64_t ****)(v330 + 40 * v332);
              v334 = *v333;
              if (*v333 == v32)
                goto LABEL_458;
            }
            if (v335)
              v436 = v335;
            else
              v436 = v333;
          }
          else
          {
            v436 = 0;
          }
          v333 = (uint64_t ****)sub_1C541AB24(v328 + 2480, (uint64_t)&v486, &v486, v436);
          v437 = v486;
          v333[3] = 0;
          v333[4] = 0;
          *v333 = (uint64_t ***)v437;
          v333[1] = (uint64_t ***)(v333 + 3);
          v333[2] = (uint64_t ***)0x100000000;
LABEL_458:
          v339 = *((unsigned int *)v333 + 4);
          if ((_DWORD)v339)
          {
            v340 = (const llvm::LoadInst **)(v333[1] + 1);
            v341 = 16 * v339;
            while (*((_DWORD *)v340 - 2) != 11)
            {
              v340 += 2;
              v341 -= 16;
              if (!v341)
                goto LABEL_480;
            }
            if (*v340)
              llvm::copyNonnullMetadata((llvm::ConstantPointerNull ***)v32, *v340, (unsigned __int8 **)v65, v320);
          }
LABEL_480:
          v353 = *(_QWORD *)(a1 + 56);
          if (v353)
            v354 = *(_DWORD *)(v353 + 8) == 13;
          else
            v354 = 0;
          if (v354)
          {
            v66 = 1;
            if (v51)
            {
              if (*((_DWORD *)v51 + 2) == 13 && *(_DWORD *)(v353 + 8) >> 8 < *((_DWORD *)v51 + 2) >> 8)
              {
                v486 = (uint64_t)"load.ext";
                v489 = 259;
                v355 = sub_1C4773E38((uint64_t *)v12, 39, (unsigned __int8 *)v65, (uint64_t)v51, (uint64_t)&v486);
                v65 = (uint64_t)v355;
                if (**(_BYTE **)a1)
                {
                  v356 = ((*((_DWORD *)v51 + 2) >> 8) - (*(_DWORD *)(v353 + 8) >> 8));
                  v486 = (uint64_t)"endian_shift";
                  v489 = 259;
                  v357 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v355, v356, 0);
                  v65 = sub_1C506E874((uint64_t)v12, v65, (uint64_t)v357, (uint64_t)&v486, 0, 0);
                }
              }
            }
            goto LABEL_276;
          }
          goto LABEL_74;
        }
        *(_WORD *)(v65 + 18) = *(_WORD *)(v65 + 18) & 0xFF81 | (2
                                                              * __clz(1 << ((unint64_t)*((unsigned __int16 *)v32
                                                                                                + 9) >> 1))) ^ 0x7E;
        goto LABEL_447;
      }
      v89 = 1;
      while (v88 != (uint64_t ***)-4096)
      {
        v90 = v86 + v89++;
        v86 = v90 & (v85 - 1);
        v88 = *(uint64_t ****)(v84 + 16 * v86);
        if (v88 == v32)
        {
          v87 = (uint64_t ****)(v84 + 16 * v86);
          goto LABEL_420;
        }
      }
    }
    v87 = (uint64_t ****)(v84 + 16 * v85);
    goto LABEL_420;
  }
  if (v33 != 84)
  {
    if (v33 == 85)
    {
      v281 = sub_1C5C1D5D8((uint64_t *)a1, (uint64_t)v12, **(_QWORD **)(a1 + 152));
      v282 = (unsigned __int8 **)(v32 - 8);
      v283 = (uint64_t)*(v32 - 8);
      if (v283 == *(_QWORD *)(a1 + 152))
      {
        if (v283)
        {
          **(v32 - 6) = (uint64_t *)*(v32 - 7);
          v284 = (uint64_t)*(v32 - 7);
          if (v284)
            *(_QWORD *)(v284 + 16) = *(v32 - 6);
        }
        *v282 = v281;
        if (v281)
        {
          v285 = (unsigned __int8 ***)(v281 + 8);
          v286 = *((_QWORD *)v281 + 1);
          *(v32 - 7) = (uint64_t **)v286;
          if (v286)
            *(_QWORD *)(v286 + 16) = v32 - 7;
          *(v32 - 6) = (uint64_t **)v285;
          *v285 = v282;
        }
      }
      v287 = (unsigned __int8 **)(v32 - 4);
      v288 = (uint64_t)*(v32 - 4);
      if (v288 == *(_QWORD *)(a1 + 152))
      {
        if (v288)
        {
          **(v32 - 2) = (uint64_t *)*(v32 - 3);
          v289 = (uint64_t)*(v32 - 3);
          if (v289)
            *(_QWORD *)(v289 + 16) = *(v32 - 2);
        }
        *v287 = v281;
        if (v281)
        {
          v292 = (_QWORD **)*((_QWORD *)v281 + 1);
          v290 = (unsigned __int8 ***)(v281 + 8);
          v291 = v292;
          *(v32 - 3) = v292;
          if (v292)
            v291[2] = v32 - 3;
          *(v32 - 2) = (uint64_t **)v290;
          *v290 = v287;
        }
      }
      sub_1C5C1DD04((_QWORD *)a1, *(_QWORD *)(a1 + 152));
      sub_1C5C1E83C((_QWORD *)a1, (uint64_t)v32);
      v293 = *(_QWORD *)(a1 + 168);
      v486 = 0;
      if ((sub_1C5C20254(v293, (uint64_t)v32, &v486) & 1) != 0)
        goto LABEL_55;
      v294 = *(_DWORD *)v293 >> 1;
      if ((*(_DWORD *)v293 & 1) != 0)
        v295 = 8;
      else
        v295 = *(_DWORD *)(v293 + 16);
      if (4 * v294 + 4 >= 3 * v295)
      {
        v295 *= 2;
      }
      else if (v295 + ~v294 - *(_DWORD *)(v293 + 4) > v295 >> 3)
      {
LABEL_364:
        v296 = (_QWORD *)v486;
        *(_DWORD *)v293 += 2;
        if (*v296 != -4096)
          --*(_DWORD *)(v293 + 4);
        *v296 = v32;
        v297 = *(unsigned int *)(v293 + 80);
        if (v297 >= *(_DWORD *)(v293 + 84))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v293 + 72, v293 + 88, v297 + 1, 8);
          LODWORD(v297) = *(_DWORD *)(v293 + 80);
        }
        *(_QWORD *)(*(_QWORD *)(v293 + 72) + 8 * v297) = v32;
        ++*(_DWORD *)(v293 + 80);
        goto LABEL_55;
      }
      sub_1C5C202F8(v293, v295);
      v486 = 0;
      sub_1C5C20254(v293, (uint64_t)v32, &v486);
      goto LABEL_364;
    }
    v486 = (uint64_t)v12;
    v487 = *(_OWORD *)(a1 + 224);
    llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)v12, &v488);
    v348 = *(_QWORD *)(a1 + 152);
    if (*(_BYTE *)(v348 + 16) == 83)
    {
      v349 = *(_QWORD *)(v348 + 40);
      v350 = v349 + 40;
      for (i = *(_QWORD *)(v349 + 48); i != v350; i = *(_QWORD *)(i + 8))
      {
        v352 = i - 24;
        if (!i)
          v352 = 0;
        if (*(_BYTE *)(v352 + 16) != 83)
        {
          v438 = *(unsigned __int8 *)(i - 8) - 38;
          v439 = v438 > 0x38;
          v440 = (1 << v438) & 0x100060000000001;
          if (v439 || v440 == 0)
            v350 = i;
          else
            v350 = *(_QWORD *)(i + 8);
          break;
        }
      }
      v359 = 0;
      if (v350)
        v442 = v350 - 24;
      else
        v442 = 0;
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(v442 + 40);
      *(_QWORD *)(a1 + 232) = v442 + 24;
      v358 = *(unsigned __int8 **)(v442 + 48);
      v478 = v358;
      if (!v358)
      {
LABEL_589:
        sub_1C4774EF4((uint64_t)v12, 0, (uint64_t)v359);
        if (v478)
          llvm::MetadataTracking::untrack((uint64_t)&v478, v478);
        v443 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 152) + 48);
        v476[0] = v443;
        if (v443)
        {
          llvm::MetadataTracking::track((uint64_t)v476, v443, 2);
          v444 = v476[0];
        }
        else
        {
          v444 = 0;
        }
        sub_1C4774EF4((uint64_t)v12, 0, (uint64_t)v444);
        if (v476[0])
          llvm::MetadataTracking::untrack((uint64_t)v476, v476[0]);
        v445 = sub_1C5C1D5D8((uint64_t *)a1, (uint64_t)v12, **(_QWORD **)(a1 + 152));
        v446 = *((_DWORD *)v32 + 5);
        if ((v446 & 0x40000000) != 0)
        {
          v448 = (uint64_t ***)*(v32 - 1);
          v447 = v446 & 0x7FFFFFF;
        }
        else
        {
          v447 = v446 & 0x7FFFFFF;
          v448 = &v32[-4 * v447];
        }
        v449 = *(_QWORD *)(a1 + 152);
        if (v447)
        {
          v450 = (unsigned __int8 ***)(v445 + 8);
          v451 = (unsigned __int8 ***)(v448 + 1);
          v452 = 32 * v447;
          do
          {
            v453 = (unsigned __int8 **)(v451 - 1);
            if (*(v451 - 1) == (unsigned __int8 **)v449)
            {
              if (v449)
              {
                *v451[1] = (unsigned __int8 *)*v451;
                if (*v451)
                  (*v451)[2] = (unsigned __int8 *)v451[1];
              }
              *v453 = v445;
              if (v445)
              {
                v454 = *v450;
                *v451 = *v450;
                if (v454)
                  v454[2] = (unsigned __int8 *)v451;
                v451[1] = (unsigned __int8 **)v450;
                *v450 = v453;
              }
            }
            v451 += 4;
            v452 -= 32;
          }
          while (v452);
          v449 = *(_QWORD *)(a1 + 152);
        }
        sub_1C5C1DD04((_QWORD *)a1, v449);
        sub_1C5C1E83C((_QWORD *)a1, (uint64_t)v32);
        v455 = *(_QWORD *)(a1 + 160);
        v478 = 0;
        if ((sub_1C5C1EA38(v455, (uint64_t)v32, &v478) & 1) != 0)
          goto LABEL_621;
        v456 = *(_DWORD *)v455 >> 1;
        if ((*(_DWORD *)v455 & 1) != 0)
          v457 = 8;
        else
          v457 = *(_DWORD *)(v455 + 16);
        if (4 * v456 + 4 >= 3 * v457)
        {
          v457 *= 2;
        }
        else if (v457 + ~v456 - *(_DWORD *)(v455 + 4) > v457 >> 3)
        {
LABEL_616:
          v458 = v478;
          *(_DWORD *)v455 += 2;
          if (*(_QWORD *)v458 != -4096)
            --*(_DWORD *)(v455 + 4);
          *(_QWORD *)v458 = v32;
          v459 = *(unsigned int *)(v455 + 80);
          if (v459 >= *(_DWORD *)(v455 + 84))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v455 + 72, v455 + 88, v459 + 1, 8);
            LODWORD(v459) = *(_DWORD *)(v455 + 80);
          }
          *(_QWORD *)(*(_QWORD *)(v455 + 72) + 8 * v459) = v32;
          ++*(_DWORD *)(v455 + 80);
LABEL_621:
          v460 = (unsigned __int8 *)v486;
          if ((_QWORD)v487)
          {
            sub_1C4D8AE2C(v486, v487, *((uint64_t *)&v487 + 1));
            v460 = (unsigned __int8 *)v486;
          }
          else
          {
            *(_QWORD *)(v486 + 48) = 0;
            *((_QWORD *)v460 + 7) = 0;
          }
          v478 = v488;
          if (v488)
          {
            llvm::MetadataTracking::track((uint64_t)&v478, v488, 2);
            v461 = v478;
          }
          else
          {
            v461 = 0;
          }
          sub_1C4774EF4((uint64_t)v460, 0, (uint64_t)v461);
          if (v478)
            llvm::MetadataTracking::untrack((uint64_t)&v478, v478);
          if (v488)
            llvm::MetadataTracking::untrack((uint64_t)&v488, v488);
          goto LABEL_55;
        }
        sub_1C5C1EAE4(v455, v457);
        v478 = 0;
        sub_1C5C1EA38(v455, (uint64_t)v32, &v478);
        goto LABEL_616;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(v348 + 40);
      *(_QWORD *)(a1 + 232) = v348 + 24;
      v358 = *(unsigned __int8 **)(v348 + 48);
      v478 = v358;
      if (!v358)
      {
        v359 = 0;
        goto LABEL_589;
      }
    }
    llvm::MetadataTracking::track((uint64_t)&v478, v358, 2);
    v359 = v478;
    goto LABEL_589;
  }
  v34 = (uint64_t)*(v32 - 4);
  if (v34 && !*(_BYTE *)(v34 + 16) && *(uint64_t ***)(v34 + 24) == v32[9])
  {
    v35 = *(_DWORD *)(v34 + 36);
    if (v35 <= 196)
    {
      if (v35 <= 57)
      {
        if (!v35)
          return v30 & 1;
        goto LABEL_54;
      }
      if (v35 != 194)
      {
LABEL_54:
        sub_1C5C1EC4C(a1, *(int32x2_t *****)(*(_QWORD *)(a1 + 144) + 24));
LABEL_55:
        v30 = 1;
        return v30 & 1;
      }
      goto LABEL_52;
    }
    if (v35 > 312)
      goto LABEL_54;
    if (v35 != 199)
    {
      if (v35 != 197)
        goto LABEL_54;
LABEL_52:
      v30 = sub_1C5C1EF70(a1, *(llvm::Instruction **)(*(_QWORD *)(a1 + 144) + 24));
      return v30 & 1;
    }
    llvm::Instruction::getAAMetadata(*(uint64_t ****)(*(_QWORD *)(a1 + 144) + 24), &v478);
    if (*((_BYTE *)v32[-4 * (*((_DWORD *)v32 + 5) & 0x7FFFFFF) + 8] + 16) != 16)
    {
      v300 = sub_1C5C1D5D8((uint64_t *)a1, (uint64_t)v12, **(_QWORD **)(a1 + 152));
      v301 = *((_DWORD *)v32 + 5) & 0x7FFFFFF;
      v302 = -v301;
      v303 = (unsigned __int8 **)&v32[-4 * v301];
      if (*v303)
      {
        v304 = &v32[4 * v302];
        v306 = v304[2];
        v305 = v304 + 2;
        *v306 = (uint64_t *)*(v305 - 1);
        v307 = *(v305 - 1);
        if (v307)
          *(_QWORD *)(v307 + 16) = *v305;
      }
      *v303 = v300;
      if (v300)
      {
        v310 = (_QWORD **)*((_QWORD *)v300 + 1);
        v308 = (unsigned __int8 ***)(v300 + 8);
        v309 = v310;
        v311 = &v32[4 * v302];
        v311[1] = v310;
        if (v310)
          v309[2] = v311 + 1;
        v311[2] = (uint64_t **)v308;
        *v308 = v303;
      }
      v312 = (1 << *(_WORD *)(*(_QWORD *)(a1 + 32) + 18)) | (*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 40));
      sub_1C509D0D0((uint64_t)v32, 63 - __clz(v312 & -v312));
      sub_1C5C1DD04((_QWORD *)a1, *(_QWORD *)(a1 + 152));
      goto LABEL_375;
    }
    v262 = *(_QWORD *)(a1 + 16);
    v486 = 4;
    *(_QWORD *)&v487 = 0;
    *((_QWORD *)&v487 + 1) = v32;
    if (v32 != (uint64_t ***)-8192 && v32 != (uint64_t ***)-4096 && v32)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v486);
    v263 = (_QWORD *)sub_1C4EE497C((unsigned int *)(v262 + 192), (unint64_t)&v486, 1);
    v264 = *(_DWORD *)(v262 + 200);
    v265 = (unint64_t *)(*(_QWORD *)(v262 + 192) + 24 * v264);
    *v265 = 4;
    v265[1] = 0;
    v266 = (unint64_t)(v265 + 1);
    v267 = v263[2];
    v265[2] = v267;
    if (v267 != -8192 && v267 != -4096)
    {
      if (v267)
      {
        v268 = *v263 & 0xFFFFFFFFFFFFFFF8;
        v265[1] = *(_QWORD *)v268;
        *(_QWORD *)v268 = v265;
        *v265 = v268 | 4;
        v269 = (uint64_t *)v265[1];
        if (v269)
          *v269 = *v269 & 7 | v266;
      }
    }
    *(_DWORD *)(v262 + 200) = v264 + 1;
    if (*((_QWORD *)&v487 + 1) != -8192 && *((_QWORD *)&v487 + 1) != -4096 && *((_QWORD *)&v487 + 1))
    {
      v270 = v486 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v486 & 0xFFFFFFFFFFFFFFF8) = v487;
      if ((_QWORD)v487)
      {
        *(_QWORD *)v487 = *(_QWORD *)v487 & 7 | v270;
      }
      else
      {
        v271 = *((_QWORD *)&v487 + 1);
        v272 = (int32x2_t *)****((_QWORD ****)&v487 + 1);
        v273 = (unint64_t)v272[303];
        if (v273 <= v270)
        {
          v274 = v272[305].u32[0];
          if (v273 + 16 * v274 > v270)
          {
            v275 = v274 - 1;
            LODWORD(v276) = v275 & ((DWORD2(v487) >> 4) ^ (DWORD2(v487) >> 9));
            v277 = (uint64_t *)(v273 + 16 * v276);
            v278 = *v277;
            if (*((_QWORD *)&v487 + 1) == *v277)
            {
LABEL_340:
              *v277 = -8192;
              v272[304] = vadd_s32(v272[304], (int32x2_t)0x1FFFFFFFFLL);
              v271 = *((_QWORD *)&v487 + 1);
            }
            else
            {
              v279 = 1;
              while (v278 != -4096)
              {
                v280 = v276 + v279++;
                v276 = v280 & v275;
                v278 = *(_QWORD *)(v273 + 16 * v276);
                if (*((_QWORD *)&v487 + 1) == v278)
                {
                  v277 = (uint64_t *)(v273 + 16 * v276);
                  goto LABEL_340;
                }
              }
            }
            *(_BYTE *)(v271 + 17) &= ~1u;
          }
        }
      }
    }
    v360 = *(_QWORD **)(a1 + 32);
    v361 = v360[8];
    v362 = v361;
    if ((*(_DWORD *)(v361 + 8) & 0xFE) == 0x12)
      v362 = **(_QWORD **)(v361 + 16);
    if (*(_QWORD *)(a1 + 72))
      goto LABEL_507;
    if (*(_QWORD *)(a1 + 64))
      goto LABEL_511;
    if (*(_QWORD *)(a1 + 96) > *(_QWORD *)(a1 + 40) || *(_QWORD *)(a1 + 104) < *(_QWORD *)(a1 + 48))
      goto LABEL_558;
    v406 = v32[-4 * (*((_DWORD *)v32 + 5) & 0x7FFFFFF) + 8];
    v407 = (llvm::Type **)(v406 + 3);
    v408 = *((_DWORD *)v406 + 8);
    if (v408 >= 0x41)
    {
      if (v408 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v406 + 3)) > 0x40)
      {
LABEL_558:
        v416 = (uint64_t *)llvm::ConstantInt::get((llvm::ConstantInt *)*v32[-4 * (*((_DWORD *)v32 + 5) & 0x7FFFFFF) + 8], *(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112), 0);
        v417 = sub_1C5C1D5D8((uint64_t *)a1, (uint64_t)v12, **(_QWORD **)(a1 + 152));
        v418 = &v32[-4 * (*((_DWORD *)v32 + 5) & 0x7FFFFFF)];
        v419 = (uint64_t)v418[4];
        v420 = (1 << *(_WORD *)(*(_QWORD *)(a1 + 32) + 18)) | (*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 40));
        v421 = 63 - __clz(v420 & -v420);
        v422 = v418[12];
        v423 = (llvm::APInt *)(v422 + 3);
        v424 = *((_DWORD *)v422 + 8);
        if (v424 > 0x40)
          v425 = llvm::APInt::countLeadingZerosSlowCase(v423) == v424;
        else
          v425 = *(_QWORD *)v423 == 0;
        v429 = v425;
        MemSet = llvm::IRBuilderBase::CreateMemSet((uint64_t)v12, (llvm::Value *)v417, v419, v416, v421 | 0x100u, v429 ^ 1u, 0, 0, 0);
        v432 = (llvm::MDNode *)v478;
        v434 = v480;
        v433 = v481;
        if (v478 || v479 || v480 || v481)
        {
          if (v479)
          {
            v435 = llvm::AAMDNodes::shiftTBAAStruct(v479, (llvm::MDNode *)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 96)), v430);
            v434 = v480;
            v433 = v481;
          }
          else
          {
            v435 = 0;
          }
          if (v432 || *((_QWORD *)MemSet + 6) || (*((_BYTE *)MemSet + 23) & 0x20) != 0)
            llvm::Value::setMetadata(MemSet, 1, v432);
          if (v435 || *((_QWORD *)MemSet + 6) || (*((_BYTE *)MemSet + 23) & 0x20) != 0)
            llvm::Value::setMetadata(MemSet, 5, v435);
          if (v434 || *((_QWORD *)MemSet + 6) || (*((_BYTE *)MemSet + 23) & 0x20) != 0)
            llvm::Value::setMetadata(MemSet, 7, v434);
          if (v433 || *((_QWORD *)MemSet + 6) || (*((_BYTE *)MemSet + 23) & 0x20) != 0)
            llvm::Value::setMetadata(MemSet, 8, v433);
        }
        goto LABEL_375;
      }
      v407 = (llvm::Type **)*v407;
    }
    if (!((unint64_t)*v407 >> 32))
    {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)(**(_QWORD **)*v360 + 1912), *v407);
      if (sub_1C5C1C2C0(*(_QWORD *)a1, v409, v361))
      {
        v410 = *(_QWORD *)a1;
        sub_1C4768AD0(*(_QWORD *)a1, v362);
        v412 = *(char **)(v410 + 32);
        v413 = *(_QWORD *)(v410 + 40);
        v414 = &v412[v413];
        if (v411 <= 0xFF)
        {
          v415 = (char *)memchr(v412, (char)v411, v413);
          if (v415)
            v414 = v415;
        }
        if (v414 - v412 != v413)
        {
          if (*(_QWORD *)(a1 + 72))
          {
LABEL_507:
            v363 = *(_QWORD *)(a1 + 40);
            v364 = *(_QWORD *)(a1 + 112) - v363;
            v365 = *(_QWORD *)(a1 + 88);
            v366 = v364 / v365;
            v367 = (llvm::Type *)(((*(_QWORD *)(a1 + 120) - v363) / v365) - (v364 / v365));
            v368 = (unsigned __int8 *)v32[-4 * (*((_DWORD *)v32 + 5) & 0x7FFFFFF) + 4];
            sub_1C4768AD0(*(_QWORD *)a1, *(_QWORD *)(a1 + 80));
            v370 = (unsigned __int8 *)sub_1C5C200A8(a1, v368, v369 >> 3);
            VectorSplat = (uint64_t ***)sub_1C5C1D6BC(*(llvm::DataLayout **)a1, v12, v370, *(llvm::Type **)(a1 + 80));
            if (v367 >= 2)
            {
              v486 = (uint64_t)"vsplat";
              v489 = 259;
              VectorSplat = (uint64_t ***)llvm::IRBuilderBase::CreateVectorSplat((uint64_t)v12, v367, VectorSplat, (uint64_t)&v486);
            }
            v372 = *(_QWORD *)(a1 + 32);
            v373 = *(_QWORD *)(v372 + 64);
            v374 = *(_WORD *)(v372 + 18) & 0x3F | 0x100;
            v486 = (uint64_t)"oldload";
            v489 = 259;
            v375 = sub_1C506D920((uint64_t *)v12, v373, v372, v374, 0, (uint64_t)&v486);
            v486 = (uint64_t)"vec";
            v489 = 259;
            v376 = sub_1C5C1E2F8((uint64_t)v12, v375, (const llvm::APInt *)VectorSplat, v366, (uint64_t)&v486);
            goto LABEL_517;
          }
          if (!*(_QWORD *)(a1 + 64))
          {
            v462 = (unsigned __int8 *)v32[-4 * (*((_DWORD *)v32 + 5) & 0x7FFFFFF) + 4];
            sub_1C4768AD0(*(_QWORD *)a1, v362);
            v388 = (uint64_t ***)sub_1C5C200A8(a1, v462, v463 >> 3);
            if ((*(_DWORD *)(v361 + 8) & 0xFE) == 0x12)
            {
              v464 = (llvm::Type *)*(unsigned int *)(v361 + 32);
              v486 = (uint64_t)"vsplat";
              v489 = 259;
              v388 = (uint64_t ***)llvm::IRBuilderBase::CreateVectorSplat((uint64_t)v12, v464, v388, (uint64_t)&v486);
            }
            v386 = *(llvm::DataLayout **)a1;
            v387 = v12;
            goto LABEL_516;
          }
LABEL_511:
          v377 = (unsigned __int8 *)sub_1C5C200A8(a1, (unsigned __int8 *)v32[-4 * (*((_DWORD *)v32 + 5) & 0x7FFFFFF) + 4], *(_DWORD *)(a1 + 120) - *(_DWORD *)(a1 + 112));
          if (*(_QWORD *)(a1 + 64))
          {
            v378 = *(_QWORD *)(a1 + 96);
            if (v378 != *(_QWORD *)(a1 + 40) || *(_QWORD *)(a1 + 104) != v378)
            {
              v379 = *(_QWORD *)(a1 + 32);
              v380 = *(_QWORD *)(v379 + 64);
              v381 = *(_WORD *)(v379 + 18) & 0x3F | 0x100;
              v486 = (uint64_t)"oldload";
              v489 = 259;
              v382 = (unsigned __int8 *)sub_1C506D920((uint64_t *)v12, v380, v379, v381, 0, (uint64_t)&v486);
              v383 = sub_1C5C1D6BC(*(llvm::DataLayout **)a1, v12, v382, *(llvm::Type **)(a1 + 64));
              v384 = *(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 40);
              v385 = *(_BYTE **)a1;
              v486 = (uint64_t)"insert";
              v489 = 259;
              v377 = (unsigned __int8 *)sub_1C5C1D8EC(v385, (uint64_t *)v12, (llvm::ConstantInt ***)v383, v377, v384, (uint64_t)&v486);
            }
          }
          v386 = *(llvm::DataLayout **)a1;
          v387 = v12;
          v388 = (uint64_t ***)v377;
LABEL_516:
          v376 = sub_1C5C1D6BC(v386, v387, (unsigned __int8 *)v388, (llvm::Type *)v361);
LABEL_517:
          v389 = (uint64_t *)v376;
          v390 = *(_QWORD *)(a1 + 32);
          v391 = *(_WORD *)(v390 + 18) & 0x3F;
          v392 = v32[-4 * (*((_DWORD *)v32 + 5) & 0x7FFFFFF) + 12];
          v393 = (llvm::APInt *)(v392 + 3);
          v394 = *((_DWORD *)v392 + 8);
          if (v394 > 0x40)
            v395 = llvm::APInt::countLeadingZerosSlowCase(v393) == v394;
          else
            v395 = *(_QWORD *)v393 == 0;
          v396 = v395;
          v397 = sub_1C509CCE8((uint64_t *)v12, v389, v390, v391 | 0x100u, v396 ^ 1u);
          v486 = 0x190000000ALL;
          llvm::Instruction::copyMetadata((uint64_t)v397, (uint64_t)v32, (int *)&v486, 2);
          v399 = (llvm::MDNode *)v478;
          v401 = v480;
          v400 = v481;
          if (v478 || v479 || v480 || v481)
          {
            if (v479)
            {
              v402 = llvm::AAMDNodes::shiftTBAAStruct(v479, (llvm::MDNode *)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 96)), v398);
              v401 = v480;
              v400 = v481;
            }
            else
            {
              v402 = 0;
            }
            if (v399 || *((_QWORD *)v397 + 6) || (*((_BYTE *)v397 + 23) & 0x20) != 0)
              llvm::Value::setMetadata(v397, 1, v399);
            if (v402 || *((_QWORD *)v397 + 6) || (*((_BYTE *)v397 + 23) & 0x20) != 0)
              llvm::Value::setMetadata(v397, 5, v402);
            if (v401 || *((_QWORD *)v397 + 6) || (*((_BYTE *)v397 + 23) & 0x20) != 0)
              llvm::Value::setMetadata(v397, 7, v401);
            if (v400 || *((_QWORD *)v397 + 6) || (*((_BYTE *)v397 + 23) & 0x20) != 0)
              llvm::Value::setMetadata(v397, 8, v400);
          }
          v403 = v32[-4 * (*((_DWORD *)v32 + 5) & 0x7FFFFFF) + 12];
          v404 = (llvm::APInt *)(v403 + 3);
          v405 = *((_DWORD *)v403 + 8);
          if (v405 > 0x40)
            v298 = llvm::APInt::countLeadingZerosSlowCase(v404) == v405;
          else
            v298 = *(_QWORD *)v404 == 0;
          goto LABEL_377;
        }
      }
    }
    goto LABEL_558;
  }
  return v30 & 1;
}

int32x2_t *sub_1C5C16408(int32x2_t *result)
{
  uint64_t v1;
  __int32 v2;
  int32x2_t v3;
  uint64_t v4;
  __int32 v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;

  v1 = result[4].u32[0];
  v2 = result[2].i32[0];
  if (v2)
  {
    v3 = *result;
    v4 = *(_QWORD *)(*(_QWORD *)&result[3] + 8 * v1 - 8);
    v5 = v2 - 1;
    LODWORD(v6) = ((v4 >> 4) ^ (v4 >> 9)) & (v2 - 1);
    v7 = (uint64_t *)(*(_QWORD *)result + 8 * v6);
    v8 = *v7;
    if (v4 == *v7)
    {
LABEL_7:
      *v7 = -8192;
      result[1] = vadd_s32(result[1], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v9 = 1;
      while (v8 != -4096)
      {
        v10 = v6 + v9++;
        v6 = v10 & v5;
        v8 = *(_QWORD *)(*(_QWORD *)&v3 + 8 * v6);
        if (v4 == v8)
        {
          v7 = (uint64_t *)(*(_QWORD *)&v3 + 8 * v6);
          goto LABEL_7;
        }
      }
    }
  }
  result[4].i32[0] = v1 - 1;
  return result;
}

BOOL llvm::SROAPass::splitAlloca(int32x2_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int *v14;
  int *v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v31;
  _QWORD *v32;
  _QWORD *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  _BYTE *v40;
  unsigned int v41;
  unsigned int v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  unint64_t v52;
  int64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t **v57;
  unint64_t v58;
  llvm::ValueAsMetadata **v59;
  uint64_t v60;
  llvm::ValueAsMetadata *v61;
  llvm::ValueAsMetadata *v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  const llvm::DIExpression *v71;
  unint64_t SizeInBits;
  char v73;
  unint64_t v74;
  BOOL v75;
  llvm::MDNode *FragmentExpression;
  char v77;
  uint64_t ****v78;
  uint64_t ****v79;
  uint64_t ***v80;
  uint64_t **v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t **v85;
  uint64_t **v86;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  BOOL v93;
  llvm::ValueAsMetadata **v94;
  unint64_t v95;
  _QWORD v96[3];
  _OWORD v97[2];
  void *__src;
  unsigned int v99;
  _OWORD v100[5];
  void *v101;
  unsigned int v102;
  _OWORD v103[19];
  void *v104;
  uint64_t v105;
  _BYTE v106[96];
  int8x16_t v107;
  __int128 v108;
  void *v109;
  uint64_t v110;
  _BYTE v111[32];
  __int128 v112;
  int8x16_t v113;
  __int128 v114;
  _BYTE *v115;
  uint64_t v116;
  _BYTE v117[32];
  __int128 v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a3 + 24))
    return 0;
  v4 = a2;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40) + 272;
  v93 = llvm::SROAPass::presplitLoadsAndStores((uint64_t)a1, a2, a3);
  v7 = *(_QWORD *)(v4 + 64);
  sub_1C4768AD0(v6, v7);
  v9 = (unint64_t)(v8 + 7) >> 3;
  llvm::DataLayout::getAlignment(v6, v7);
  v11 = ((1 << v10) + v9 - 1) & -(1 << v10);
  if (v11 > 0x400)
  {
    v31 = *(_DWORD *)(a3 + 24);
    if (v31)
    {
      v32 = *(_QWORD **)(a3 + 16);
      v33 = &v32[3 * v31];
      v34 = 1;
      do
      {
        while (1)
        {
          v35 = v32[2];
          if ((v35 & 4) == 0 || !*v32 && v32[1] >= v11)
            break;
          if ((*(_BYTE *)(*(_QWORD *)((v35 & 0xFFFFFFFFFFFFFFF8) + 24) + 16) & 0xFE) != 0x3C)
            break;
          v34 = 0;
          v32[2] = v35 & 0xFFFFFFFFFFFFFFFBLL;
          v32 += 3;
          if (v32 == v33)
            goto LABEL_47;
        }
        v32 += 3;
      }
      while (v32 != v33);
      if ((v34 & 1) == 0)
      {
LABEL_47:
        if (v31 >= 2)
        {
          qsort(*(void **)(a3 + 16), v31, 0x18uLL, (int (__cdecl *)(const void *, const void *))sub_1C5C1B928);
          v31 = *(_DWORD *)(a3 + 24);
        }
      }
    }
  }
  else
  {
    if (v11 > 0x38)
    {
      v88 = operator new();
      v12 = sub_1C496F858(v88, (int)v11 + 1, 1);
    }
    else
    {
      v12 = ((unint64_t)(v11 + 1) << 58) | (2 * ~(-1 << (v11 + 1))) | 1;
    }
    *(_QWORD *)&v97[0] = v12;
    v13 = *(unsigned int *)(a3 + 24);
    if ((_DWORD)v13)
    {
      v14 = *(int **)(a3 + 16);
      v15 = v14;
      do
      {
        v16 = *v15;
        v17 = *((_QWORD *)v15 + 1);
        if (v17 >= v11)
          v17 = v11;
        v18 = (v16 + 1);
        if (v17 > v18)
        {
          v19 = v16 + 2;
          do
          {
            if ((v97[0] & 1) != 0)
              *(_QWORD *)&v97[0] = ((2 * ~((-1 << (*(_QWORD *)&v97[0] >> 58)) | (1 << v18))) | 0xFC00000000000000) & *(_QWORD *)&v97[0] | 1;
            else
              *(_QWORD *)(**(_QWORD **)&v97[0] + 8 * ((v19 - 1) >> 6)) &= ~(1 << (v19 - 1));
            LOBYTE(v18) = v19;
            v75 = v17 > v19++;
          }
          while (v75);
        }
        v15 += 6;
      }
      while (v15 != &v14[6 * v13]);
      v20 = *(_QWORD **)&v97[0];
      v21 = *(_QWORD *)&v97[0] >> 1;
      v22 = 3 * v13;
      v23 = ~(-1 << (*(_QWORD *)&v97[0] >> 58));
      v24 = 8 * v22;
      v25 = (unint64_t *)(v14 + 4);
      v26 = 1;
      while (1)
      {
        v27 = *v25;
        if ((*v25 & 4) != 0)
        {
          v28 = *(v25 - 2);
          if (v28 <= v11)
          {
            if ((v20 & 1) != 0)
            {
              if (((1 << v28) & v23 & v21) == 0)
                goto LABEL_28;
            }
            else if ((*(_QWORD *)(*v20 + 8 * (v28 >> 6)) & (1 << v28)) == 0)
            {
              goto LABEL_28;
            }
          }
          v29 = *(v25 - 1);
          if (v29 <= v11)
          {
            if ((v20 & 1) != 0)
            {
              if (((1 << v29) & v23 & v21) == 0)
              {
LABEL_28:
                if ((*(_BYTE *)(*(_QWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 24) + 16) & 0xFE) == 0x3C)
                {
                  v26 = 0;
                  *v25 = v27 & 0xFFFFFFFFFFFFFFFBLL;
                }
              }
            }
            else if ((*(_QWORD *)(*v20 + 8 * (v29 >> 6)) & (1 << v29)) == 0)
            {
              goto LABEL_28;
            }
          }
        }
        v25 += 3;
        v24 -= 24;
        if (!v24)
          goto LABEL_46;
      }
    }
    v26 = 1;
LABEL_46:
    sub_1C4914448((void ***)v97);
    v31 = *(_DWORD *)(a3 + 24);
    if ((v26 & 1) == 0)
      goto LABEL_47;
  }
  v104 = v106;
  v105 = 0x400000000;
  v36 = *(_QWORD *)(a3 + 16);
  v113 = 0uLL;
  *(_QWORD *)&v114 = v36;
  *((_QWORD *)&v114 + 1) = v36;
  v115 = v117;
  v116 = 0x400000000;
  v118 = v36 + 24 * (unint64_t)v31;
  if (v31)
  {
    sub_1C5C1B604(&v113);
    v36 = *(_QWORD *)(a3 + 16);
    v37 = *(_DWORD *)(a3 + 24);
  }
  else
  {
    v37 = 0;
  }
  v107 = 0uLL;
  *(_QWORD *)&v108 = v36 + 24 * v37;
  *((_QWORD *)&v108 + 1) = v108;
  v109 = v111;
  v110 = 0x400000000;
  v112 = (unint64_t)v108;
  sub_1C5C0D4B4((uint64_t)v97, (__int128 *)v113.i8, (__int128 *)v107.i8);
  if (v109 != v111)
    free(v109);
  if (v115 != v117)
    free(v115);
  v113 = (int8x16_t)v97[0];
  v114 = v97[1];
  v115 = v117;
  v116 = 0x400000000;
  v38 = v99;
  if (v99)
  {
    if (v99 < 5)
    {
      v40 = v117;
      v39 = v99;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, (uint64_t)v117, v99, 8);
      v39 = v99;
      if (!v99)
      {
LABEL_61:
        LODWORD(v116) = v38;
        goto LABEL_62;
      }
      v40 = v115;
    }
    memcpy(v40, __src, 8 * v39);
    goto LABEL_61;
  }
LABEL_62:
  v118 = v100[2];
  v107 = (int8x16_t)v100[3];
  v108 = v100[4];
  v109 = v111;
  v110 = 0x400000000;
  v41 = v102;
  if (!v102)
    goto LABEL_69;
  if (v102 < 5)
  {
    v43 = v111;
    v42 = v102;
    goto LABEL_67;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, (uint64_t)v111, v102, 8);
  v42 = v102;
  if (v102)
  {
    v43 = v109;
LABEL_67:
    memcpy(v43, v101, 8 * v42);
  }
  LODWORD(v110) = v41;
LABEL_69:
  v112 = v103[2];
  v92 = v4;
  while ((_QWORD)v114 != (_QWORD)v108 || ((_DWORD)v116 == 0) != ((_DWORD)v110 == 0))
  {
    v44 = llvm::SROAPass::rewritePartition(a1, v4, a3, (__int128 *)v113.i8);
    if (v44)
    {
      v45 = v44;
      if (v44 != v4)
      {
        sub_1C4768AD0(v6, *(_QWORD *)(v44 + 64));
        v47 = 8 * (v113.i64[1] - v113.i64[0]);
        if (v47 >= v46)
          v47 = v46;
        v96[0] = v45;
        v96[1] = 8 * v113.i64[0];
        v96[2] = v47;
        v48 = (char *)v104;
        if (v105 >= HIDWORD(v105))
        {
          v52 = v105 + 1;
          if (v104 <= v96 && (char *)v104 + 24 * v105 > (char *)v96)
          {
            v53 = (char *)v96 - (_BYTE *)v104;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, (uint64_t)v106, v52, 24);
            v48 = (char *)v104;
            v49 = (char *)v104 + v53;
            v4 = v92;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, (uint64_t)v106, v52, 24);
            v49 = (char *)v96;
            v48 = (char *)v104;
          }
        }
        else
        {
          v49 = (char *)v96;
        }
        v50 = &v48[24 * v105];
        v51 = *(_OWORD *)v49;
        *((_QWORD *)v50 + 2) = *((_QWORD *)v49 + 2);
        *(_OWORD *)v50 = v51;
        LODWORD(v105) = v105 + 1;
      }
      v93 = 1;
    }
    sub_1C5C1B604(&v113);
  }
  if (v109 != v111)
    free(v109);
  if (v115 != v117)
    free(v115);
  if (v101 != v103)
    free(v101);
  if (__src != v100)
    free(__src);
  v54 = v96;
  llvm::FindDbgAddrUses(v4, v96);
  if ((v96[0] & 4) != 0)
  {
    v54 = *(_QWORD **)(v96[0] & 0xFFFFFFFFFFFFFFF8);
    v55 = &v54[*(unsigned int *)((v96[0] & 0xFFFFFFFFFFFFFFF8) + 8)];
  }
  else
  {
    v55 = &v96[v96[0] > 7uLL];
  }
  if (v54 != v55)
  {
    v89 = v55;
    v90 = v6;
    while (1)
    {
      v91 = v54;
      v56 = *v54;
      v57 = *(uint64_t ***)(*(_QWORD *)(*v54 - 32 * (*(_DWORD *)(*v54 + 20) & 0x7FFFFFF) + 64) + 24);
      llvm::DIBuilder::DIBuilder((uint64_t)v97, *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v92 + 40) + 56) + 40), 0, 0);
      sub_1C4768AD0(v6, *(_QWORD *)(v92 + 64));
      v95 = v58;
      if ((_DWORD)v105)
        break;
LABEL_141:
      sub_1C50F023C((uint64_t)v97);
      v6 = v90;
      v54 = v91 + 1;
      if (v91 + 1 == v89)
        goto LABEL_142;
    }
    v59 = (llvm::ValueAsMetadata **)v104;
    v94 = (llvm::ValueAsMetadata **)((char *)v104 + 24 * v105);
    v60 = v56 + 32;
    while (1)
    {
      v62 = *v59;
      v61 = v59[1];
      v63 = (unint64_t)v59[2];
      v65 = v57[3];
      v64 = v57[4];
      if (v63 >= v95)
      {
        llvm::DIExpression::getFragmentInfo(v57[3], v57[4], &v113);
        v66 = (uint64_t)v57;
        if (!(_BYTE)v114)
          goto LABEL_126;
      }
      llvm::DIExpression::getFragmentInfo(v65, &v65[v64 - v65], &v113);
      if ((_BYTE)v114)
        v67 = v113.i64[1];
      else
        v67 = 0;
      v68 = (unint64_t)v61 + v67;
      if ((_BYTE)v114)
      {
        v69 = v113.i64[0] + v113.i64[1];
        if (v113.i64[0] + v113.i64[1] - v68 < v63)
          v63 = v69 - v68;
        if (v69 <= v68)
          goto LABEL_123;
      }
      llvm::DIExpression::getFragmentInfo(v65, &v65[v64 - v65], &v107);
      if ((_BYTE)v108)
        v70 = v107.i64[1];
      else
        v70 = 0;
      v71 = (const llvm::DIExpression *)(v68 - v70);
      SizeInBits = llvm::DIVariable::getSizeInBits(*(llvm::DIVariable **)(*(_QWORD *)(v60
                                                                                    - 32
                                                                                    * (*(_DWORD *)(v56 + 20) & 0x7FFFFFF))
                                                                        + 24));
      if (v73)
      {
        if (v63 >= SizeInBits)
          v74 = SizeInBits;
        else
          v74 = v63;
        if (v74)
          v75 = (unint64_t)v71 + v74 > SizeInBits;
        else
          v75 = 1;
        if (v75)
          goto LABEL_123;
        v66 = (uint64_t)v57;
        v75 = SizeInBits > v63;
        LODWORD(v63) = v74;
        if (!v75)
          goto LABEL_126;
      }
      FragmentExpression = llvm::DIExpression::createFragmentExpression((llvm::DIExpression *)v57, v71, v63);
      if (v77)
      {
        v66 = (uint64_t)FragmentExpression;
LABEL_126:
        llvm::FindDbgAddrUses((uint64_t)v62, &v113);
        if ((v113.i8[0] & 4) != 0)
        {
          v78 = *(uint64_t *****)(v113.i64[0] & 0xFFFFFFFFFFFFFFF8);
          v79 = &v78[*(unsigned int *)((v113.i64[0] & 0xFFFFFFFFFFFFFFF8) + 8)];
        }
        else
        {
          v78 = (uint64_t ****)&v113;
          v79 = (uint64_t ****)&v113 + (v113.i64[0] > 7uLL);
        }
        while (v78 != v79)
        {
          v80 = *v78;
          if ((*v78)[-4 * (*((_DWORD *)*v78 + 5) & 0x7FFFFFF) + 4][3] == *(uint64_t **)(*(_QWORD *)(v60
                                                                                                  - 32 * (*(_DWORD *)(v56 + 20) & 0x7FFFFFF))
                                                                                      + 24))
          {
            v81 = v80[6];
            v82 = *((_DWORD *)v81 + 2) == 2 ? *(v81 - 1) : 0;
            v83 = *(_QWORD *)(v56 + 48);
            v84 = *(_DWORD *)(v83 + 8) == 2 ? *(uint64_t **)(v83 - 8) : 0;
            if (v82 == v84)
            {
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v80[5] + 5), *v78);
              v85 = v80[3];
              v86 = v80[4];
              *v86 = (uint64_t *)v85;
              v85[1] = (uint64_t *)v86;
              v80[3] = 0;
              v80[4] = 0;
              llvm::Value::deleteValue((llvm::Value *)v80);
            }
          }
          ++v78;
        }
        sub_1C4DDA878(&v113);
        llvm::DIBuilder::insertDeclare((uint64_t)v97, v62, *(_QWORD *)(*(_QWORD *)(v60 - 32 * (*(_DWORD *)(v56 + 20) & 0x7FFFFFF)) + 24), v66, *(_QWORD *)(v56 + 48), *(_QWORD *)(v92 + 40), v92);
      }
LABEL_123:
      v59 += 3;
      if (v59 == v94)
        goto LABEL_141;
    }
  }
LABEL_142:
  sub_1C4DDA878(v96);
  if (v104 != v106)
    free(v104);
  return v93;
}

_QWORD *llvm::SROAPass::clobberUse(llvm::SROAPass *this, llvm::PoisonValue ***a2)
{
  llvm::PoisonValue **v4;
  _QWORD *result;
  llvm::PoisonValue **v6;
  llvm::PoisonValue **v7;
  llvm::PoisonValue **v8;
  unsigned int v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  int32x2_t ****v16;
  int32x2_t *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int32x2_t *****v22;
  int32x2_t ****v23;
  int v24;
  int v25;
  uint64_t v26;
  unint64_t *v27;
  int32x2_t ****v28;

  v4 = *a2;
  result = llvm::PoisonValue::get(**a2, (llvm::Type *)a2);
  if (*a2)
  {
    *a2[2] = (llvm::PoisonValue *)a2[1];
    v6 = a2[1];
    if (v6)
      v6[2] = (llvm::PoisonValue *)a2[2];
  }
  *a2 = (llvm::PoisonValue **)result;
  if (result)
  {
    v8 = (llvm::PoisonValue **)result[1];
    ++result;
    v7 = v8;
    a2[1] = v8;
    if (v8)
      v7[2] = (llvm::PoisonValue *)(a2 + 1);
    a2[2] = (llvm::PoisonValue **)result;
    *result = a2;
  }
  if (*((unsigned __int8 *)v4 + 16) >= 0x1Cu && !v4[1])
  {
    result = (_QWORD *)llvm::wouldInstructionBeTriviallyDead((uint64_t)v4, 0);
    if ((_DWORD)result)
    {
      v26 = 4;
      v27 = 0;
      v28 = (int32x2_t ****)v4;
      if (v4 != (llvm::PoisonValue **)-8192 && v4 != (llvm::PoisonValue **)-4096 && v4)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v26);
      result = (_QWORD *)sub_1C4EE497C((unsigned int *)this + 48, (unint64_t)&v26, 1);
      v9 = *((_DWORD *)this + 50);
      v10 = (unint64_t *)(*((_QWORD *)this + 24) + 24 * v9);
      *v10 = 4;
      v10[1] = 0;
      v11 = (unint64_t)(v10 + 1);
      v12 = result[2];
      v10[2] = v12;
      if (v12 != -8192 && v12 != -4096)
      {
        if (v12)
        {
          v13 = *result & 0xFFFFFFFFFFFFFFF8;
          v10[1] = *(_QWORD *)v13;
          *(_QWORD *)v13 = v10;
          *v10 = v13 | 4;
          v14 = (uint64_t *)v10[1];
          if (v14)
            *v14 = *v14 & 7 | v11;
        }
      }
      *((_DWORD *)this + 50) = v9 + 1;
      if (v28 != (int32x2_t ****)-8192 && v28 != (int32x2_t ****)-4096 && v28)
      {
        v15 = v26 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF8) = v27;
        if (v27)
        {
          *v27 = *v27 & 7 | v15;
        }
        else
        {
          v16 = v28;
          v17 = ***v28;
          v18 = (unint64_t)v17[303];
          if (v18 <= v15)
          {
            v19 = v17[305].u32[0];
            if (v18 + 16 * v19 > v15)
            {
              v20 = v19 - 1;
              LODWORD(v21) = v20 & ((v28 >> 4) ^ (v28 >> 9));
              v22 = (int32x2_t *****)(v18 + 16 * v21);
              v23 = *v22;
              if (v28 == *v22)
              {
LABEL_32:
                *v22 = (int32x2_t ****)-8192;
                v17[304] = vadd_s32(v17[304], (int32x2_t)0x1FFFFFFFFLL);
                v16 = v28;
              }
              else
              {
                v24 = 1;
                while (v23 != (int32x2_t ****)-4096)
                {
                  v25 = v21 + v24++;
                  v21 = v25 & v20;
                  v23 = *(int32x2_t *****)(v18 + 16 * v21);
                  if (v28 == v23)
                  {
                    v22 = (int32x2_t *****)(v18 + 16 * v21);
                    goto LABEL_32;
                  }
                }
              }
              *((_BYTE *)v16 + 17) &= ~1u;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t llvm::SROAPass::runOnAlloca(llvm::SROAPass *this, llvm::AllocaInst *a2)
{
  uint64_t v3;
  llvm::DataLayout *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  char v11;
  char v12;
  unint64_t v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  BOOL v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  int isSizedDerivedType;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t i;
  uint64_t j;
  __n128 v32;
  uint64_t v33;
  int v34;
  void **v35;
  char *v36;
  unsigned int v37;
  void *v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  void *v42;
  unint64_t v43;
  llvm::SROAPass *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v53;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  const std::nothrow_t *v59;
  unint64_t v60;
  void *v61;
  void *v62;
  llvm::Type *v63;
  int v65;
  llvm::PoisonValue ***v66;
  llvm::PoisonValue ***v67;
  unsigned int *v68;
  llvm::PoisonValue **v69;
  int v70;
  uint64_t v71;
  llvm::PoisonValue ***v72;
  uint64_t v73;
  llvm::Value *v74;
  _QWORD *v75;
  unsigned int v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  int32x2_t *v84;
  unint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  int v91;
  int v92;
  llvm::PoisonValue ****v93;
  uint64_t v94;
  llvm::PoisonValue ***v95;
  uint64_t v96;
  uint64_t ***v97;
  uint64_t *v98;
  llvm::DataLayout *v99;
  llvm::DataLayout *v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t ****v107;
  uint64_t ***v108;
  int v109;
  int v110;
  uint64_t *v111;
  uint64_t v112;
  llvm::DataLayout *v113;
  uint64_t v114;
  llvm::Value *v115;
  __int16 v116;
  uint64_t **v117;
  llvm::ValueAsMetadata *v118;
  uint64_t v119;
  _QWORD *v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  __int16 v124;
  int v125;
  uint64_t ***v126;
  uint64_t v127;
  uint64_t **v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  llvm::DataLayout *v134;
  uint64_t v135;
  uint64_t v136;
  llvm::DataLayout *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t ****v142;
  uint64_t ***v143;
  int v144;
  int v145;
  llvm::Value **v146;
  llvm::Value *v147;
  llvm::Value *v148;
  llvm::Value *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t ****v154;
  uint64_t ***v155;
  int v156;
  int v157;
  llvm::MDNode **v158;
  llvm::MDNode *v159;
  llvm::MDNode *v160;
  llvm::MDNode *v161;
  char *v162;
  char *v163;
  llvm::Value *v164;
  uint64_t *v165;
  _QWORD *v166;
  uint64_t *v167;
  llvm::MDNode *v168;
  unsigned int v169;
  _QWORD *v170;
  uint64_t v171;
  _QWORD *v172;
  int v173;
  BOOL v174;
  unsigned int v175;
  _QWORD *v176;
  char *v177;
  char *v178;
  unsigned __int8 **v179;
  int v180;
  unsigned __int8 *v181;
  unsigned __int8 *v182;
  unsigned __int8 *v183;
  uint64_t **v184;
  uint64_t **v185;
  uint64_t v186;
  llvm::DataLayout *v187;
  llvm::DataLayout *v188;
  llvm::DataLayout *v189;
  uint64_t v190;
  unsigned __int8 *v191;
  unsigned __int8 *v192;
  uint64_t ***v193;
  uint64_t v194;
  llvm::DataLayout *v195;
  llvm::DataLayout *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unsigned __int8 **v201;
  unsigned __int8 *v202;
  int v203;
  int v204;
  uint64_t *v205;
  uint64_t v206;
  llvm::DataLayout *v207;
  uint64_t v208;
  uint64_t **v209;
  unsigned __int8 *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unsigned __int8 **v215;
  unsigned __int8 *v216;
  int v217;
  int v218;
  uint64_t *v219;
  uint64_t v220;
  llvm::DataLayout *v221;
  uint64_t v222;
  uint64_t **v223;
  unsigned __int8 *v224;
  uint64_t **v225;
  unsigned int v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t ****v231;
  uint64_t ***v232;
  int v233;
  int v234;
  llvm::MDNode **v235;
  llvm::MDNode *v236;
  llvm::MDNode *v237;
  llvm::MDNode *v238;
  char v239;
  char v240;
  char *v241;
  char *v242;
  llvm::Value *v243;
  uint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  uint64_t **v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t ****v252;
  uint64_t ***v253;
  int v254;
  int v255;
  llvm::MDNode **v256;
  llvm::MDNode *v257;
  llvm::MDNode *v258;
  llvm::MDNode *v259;
  char v260;
  char v261;
  char *v262;
  char *v263;
  llvm::Value *v264;
  uint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  llvm::MDNode *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t ****v274;
  uint64_t ***v275;
  int v276;
  int v277;
  uint64_t *v278;
  uint64_t v279;
  llvm::DataLayout *v280;
  uint64_t v281;
  llvm::Value *Select;
  uint64_t **v283;
  uint64_t **v284;
  uint64_t v285;
  _QWORD *v286;
  char *v287;
  char *v288;
  unsigned __int8 **v289;
  int v290;
  unsigned __int8 *v291;
  unsigned __int8 *v292;
  unsigned __int8 *v293;
  char *v294;
  char *v295;
  llvm::Value **v296;
  int v297;
  unsigned __int8 *v298;
  llvm::Value *v299;
  llvm::Value **v300;
  llvm::Value **v301;
  unsigned __int8 *v302;
  llvm::Value **v303;
  uint64_t v304;
  _QWORD *v305;
  uint64_t v306;
  _QWORD *v307;
  int v308;
  unsigned int v309;
  unsigned int v310;
  uint64_t v311;
  unsigned __int8 *v312;
  unsigned __int8 *v313;
  unsigned int v314;
  llvm::DataLayout *v315;
  uint64_t **v316;
  llvm::SROAPass *v317;
  llvm::Value *v318[4];
  __int16 v319;
  uint64_t ***v320;
  _QWORD v321[2];
  int v322;
  llvm::MDNode *v323[2];
  llvm::MDNode *v324[2];
  llvm::MDNode *v325[2];
  llvm::MDNode *v326[2];
  __int16 v327;
  unsigned __int8 *v328;
  llvm::Type *v329;
  unint64_t v330;
  void *v331;
  uint64_t v332;
  _WORD v333[96];
  void *v334;
  uint64_t v335;
  _BYTE v336[64];
  void *v337;
  uint64_t v338;
  _BYTE v339[64];
  void *v340;
  uint64_t v341;
  _BYTE v342[64];
  void *v343;
  uint64_t v344;
  _BYTE v345[64];
  _BYTE *v346;
  void *v347;
  uint64_t v348;
  int v349;
  _BYTE v350[64];
  uint64_t v351;
  llvm::DataLayout *v352;
  void **v353;
  void *v354;
  unsigned int v355;
  uint64_t v356;
  uint64_t **v357;
  _QWORD ***v358;
  uint64_t v359;
  void *__p;
  char v361;
  llvm::DataLayout *v362;
  int8x16_t v363;
  void **v364;
  uint64_t v365;
  void *v366;
  _BYTE *v367;
  void *v368;
  uint64_t v369;
  int v370;
  _BYTE v371[64];
  unint64_t v372;
  BOOL v373;
  void *__src;
  unsigned int v375;
  uint64_t v376;
  llvm::Type **v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  _QWORD *v382;
  void *v383;
  uint64_t v384;
  int v385;
  _QWORD v386[6];

  v386[4] = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)a2 + 5);
  if (!*((_QWORD *)a2 + 1))
  {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v3 + 40, (uint64_t ***)a2);
    v20 = *((_QWORD *)a2 + 3);
    v21 = (_QWORD *)*((_QWORD *)a2 + 4);
    *v21 = v20;
    *(_QWORD *)(v20 + 8) = v21;
    *((_QWORD *)a2 + 3) = 0;
    *((_QWORD *)a2 + 4) = 0;
    llvm::Value::deleteValue(a2);
    v19 = 1;
    return v19 & 1;
  }
  v5 = (llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(v3 + 56) + 40) + 272);
  v6 = *((_QWORD *)a2 + 8);
  sub_1C4768AD0((uint64_t)v5, v6);
  v8 = v7;
  v10 = v9 == 1;
  llvm::DataLayout::getAlignment((uint64_t)v5, v6);
  v12 = v11;
  if ((llvm::AllocaInst::isArrayAllocation(a2) & 1) != 0)
    goto LABEL_9;
  v13 = (unint64_t)(v8 + 7) >> 3;
  v14 = v10;
  v15 = ~(-1 << v12);
  v16 = v13 + v15;
  v17 = *(unsigned __int8 *)(v6 + 8);
  if (v17 > 0x11)
    goto LABEL_55;
  if (((1 << v17) & 0xAC7F) != 0)
  {
    v18 = !v14 && v16 > v15;
    if (!v18)
    {
LABEL_9:
      v19 = 0;
      return v19 & 1;
    }
    goto LABEL_19;
  }
  if (((1 << v17) & 0x30000) == 0)
  {
LABEL_55:
    if ((v17 & 0xFE) != 0x12 && v17 != 21)
      goto LABEL_9;
  }
  isSizedDerivedType = llvm::Type::isSizedDerivedType(v6, 0);
  if (v14 || v16 <= v15 || isSizedDerivedType == 0)
    goto LABEL_9;
LABEL_19:
  sub_1C5C10908((uint64_t)&v354, (uint64_t **)a2);
  v343 = v345;
  v344 = 0x800000000;
  v346 = v350;
  v347 = v350;
  v348 = 8;
  v349 = 0;
  v351 = 0;
  v352 = v5;
  v353 = &v354;
  sub_1C5C20460((char *)&v343, *((_QWORD *)a2 + 1));
  v317 = this;
  if ((_DWORD)v344)
  {
    v25 = *((_QWORD *)v343 + v344 - 1);
    LODWORD(v344) = v344 - 1;
    v351 = v25;
    __asm { BR              X11 }
  }
  LOBYTE(v308) = 0;
  v329 = a2;
  v330 = 0;
  v331 = v333;
  v332 = 0x800000000;
  v334 = v336;
  v335 = 0x800000000;
  v337 = v339;
  v338 = 0x800000000;
  v340 = v342;
  v341 = 0x800000000;
  v362 = v5;
  v363 = 0uLL;
  v364 = &v366;
  v365 = 0x800000000;
  v367 = v371;
  v368 = v371;
  v369 = 8;
  v370 = 0;
  v375 = 1;
  __src = 0;
  v26 = *((_QWORD *)a2 + 8);
  sub_1C4768AD0((uint64_t)v5, v26);
  v28 = (unint64_t)(v27 + 7) >> 3;
  llvm::DataLayout::getAlignment((uint64_t)v5, v26);
  v376 = ((1 << v29) + v28 - 1) & -(1 << v29);
  v377 = &v329;
  v378 = 1;
  for (i = 384; i != 448; i += 16)
    *(llvm::DataLayout **)((char *)&v362 + i) = (llvm::DataLayout *)-4096;
  v380 = 1;
  for (j = 456; j != 520; j += 16)
    *(llvm::DataLayout **)((char *)&v362 + j) = (llvm::DataLayout *)-4096;
  v382 = v386;
  v383 = v386;
  v384 = 4;
  v385 = 0;
  v32.n128_f64[0] = llvm::DataLayout::getIndexType(v362, *(llvm::Type **)a2);
  v373 = 1;
  LODWORD(v325[1]) = *(_DWORD *)(v33 + 8) >> 8;
  if (LODWORD(v325[1]) > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)v325, 0, 0);
  else
    v325[0] = 0;
  if (v375 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17, v32);
  __src = v325[0];
  v375 = v325[1];
  v363 = vandq_s8(v363, (int8x16_t)vdupq_n_s64(3uLL));
  llvm::detail::PtrUseVisitorBase::enqueueUsers((char *)&v362, a2);
  v34 = v365;
  if ((_DWORD)v365)
  {
    v35 = v364;
    v36 = (char *)&v364[3 * v365];
    v37 = *((_DWORD *)v36 - 2);
    v39 = *((_QWORD *)v36 - 3);
    v38 = (void *)*((_QWORD *)v36 - 2);
    *((_DWORD *)v36 - 2) = 0;
    v40 = v34 - 1;
    LODWORD(v365) = v40;
    if (LODWORD(v35[3 * v40 + 2]) >= 0x41)
    {
      v42 = v35[3 * v40 + 1];
      if (v42)
        MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
    }
    v41 = v39 & 0xFFFFFFFFFFFFFFF8;
    v372 = v39 & 0xFFFFFFFFFFFFFFF8;
    v373 = (v39 & 4) != 0;
    if ((v39 & 4) != 0)
    {
      if (v375 >= 0x41 && __src)
      {
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        v41 = v372;
      }
      __src = v38;
      v375 = v37;
    }
    __asm { BR              X9 }
  }
  if (((v363.i32[2] | v363.i32[0]) & 4) != 0)
  {
    v43 = v363.i64[0] & 0xFFFFFFFFFFFFFFF8;
    if ((v363.i64[1] & 0xFFFFFFFFFFFFFFF8) != 0)
      v43 = v363.i64[1] & 0xFFFFFFFFFFFFFFF8;
    v330 = v43;
    v44 = v317;
  }
  else
  {
    v45 = v331;
    v44 = v317;
    if ((_DWORD)v332)
    {
      v46 = 0;
      v47 = 24 * v332;
      while (1)
      {
        v48 = (char *)v331 + v46;
        if (*(_QWORD *)((char *)v331 + v46 + 16) <= 7uLL)
          break;
        v46 += 24;
        if (v47 == v46)
        {
          v48 = (char *)v331 + 24 * v332;
          goto LABEL_61;
        }
      }
      if (v47 - 24 != v46)
      {
        v49 = v47 - v46 - 24;
        v50 = (unint64_t *)(v48 + 40);
        v51 = (unint64_t *)(v48 + 40);
        do
        {
          v52 = *v51;
          v51 += 3;
          if (v52 >= 8)
          {
            v53 = *((_OWORD *)v50 - 1);
            *((_QWORD *)v48 + 2) = *v50;
            *(_OWORD *)v48 = v53;
            v48 += 24;
          }
          v50 = v51;
          v49 -= 24;
        }
        while (v49);
        v45 = v331;
      }
    }
    else
    {
      v48 = (char *)v331;
    }
LABEL_61:
    v55 = 0xAAAAAAAAAAAAAAABLL * ((v48 - v45) >> 3);
    LODWORD(v332) = v55;
    v56 = v55;
    v57 = &v45[24 * v55];
    if (v55 < 0x81 || v55 == 0)
    {
LABEL_68:
      sub_1C5C22B10((uint64_t)v45, v57, v56, 0, 0);
    }
    else
    {
      v59 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      v60 = v55;
      while (1)
      {
        v61 = operator new(24 * v60, v59);
        if (v61)
          break;
        v18 = v60 > 1;
        v60 >>= 1;
        if (!v18)
          goto LABEL_68;
      }
      v62 = v61;
      sub_1C5C22B10((uint64_t)v45, v57, v56, (uint64_t)v61, v60);
      operator delete(v62);
    }
  }
  if (v383 != v382)
    free(v383);
  if ((v380 & 1) == 0)
    MEMORY[0x1CAA32FB4](v381, 8);
  if ((v378 & 1) == 0)
    MEMORY[0x1CAA32FB4](v379, 8);
  if (v375 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  if (v368 != v367)
    free(v368);
  sub_1C5C1B88C((char **)&v364);
  if (v330)
    goto LABEL_80;
  v65 = 0;
  if (!(_DWORD)v335)
    goto LABEL_131;
  v66 = (llvm::PoisonValue ***)v334;
  v67 = (llvm::PoisonValue ***)((char *)v334 + 8 * v335);
  v68 = (unsigned int *)((char *)v44 + 192);
  do
  {
    v69 = *v66;
    v70 = *((_DWORD *)*v66 + 5);
    if ((v70 & 0x40000000) != 0)
    {
      v72 = (llvm::PoisonValue ***)*(v69 - 1);
      v71 = v70 & 0x7FFFFFF;
      if (!v71)
        goto LABEL_106;
    }
    else
    {
      v71 = v70 & 0x7FFFFFF;
      v72 = (llvm::PoisonValue ***)&v69[-4 * v71];
      if (!v71)
        goto LABEL_106;
    }
    v73 = 32 * v71;
    do
    {
      llvm::SROAPass::clobberUse(v317, v72);
      v72 += 4;
      v73 -= 32;
    }
    while (v73);
LABEL_106:
    v74 = (llvm::Value *)llvm::PoisonValue::get(*v69, v63);
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v69, v74, (llvm::Value *)1);
    v362 = (llvm::DataLayout *)4;
    v363.i64[0] = 0;
    v363.i64[1] = (uint64_t)v69;
    if (v69 != (llvm::PoisonValue **)-8192 && v69 != (llvm::PoisonValue **)-4096 && v69)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v362);
    v75 = (_QWORD *)sub_1C4EE497C(v68, (unint64_t)&v362, 1);
    v44 = v317;
    v76 = *((_DWORD *)v317 + 50);
    v77 = (unint64_t *)(*((_QWORD *)v317 + 24) + 24 * v76);
    *v77 = 4;
    v77[1] = 0;
    v78 = (unint64_t)(v77 + 1);
    v79 = v75[2];
    v77[2] = v79;
    if (v79 != -8192 && v79 != -4096)
    {
      if (v79)
      {
        v80 = *v75 & 0xFFFFFFFFFFFFFFF8;
        v77[1] = *(_QWORD *)v80;
        *(_QWORD *)v80 = v77;
        *v77 = v80 | 4;
        v81 = (uint64_t *)v77[1];
        if (v81)
          *v81 = *v81 & 7 | v78;
      }
    }
    *((_DWORD *)v317 + 50) = v76 + 1;
    if (v363.i64[1] != -8192 && v363.i64[1] != -4096 && v363.i64[1])
    {
      v82 = (unint64_t)v362 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)((unint64_t)v362 & 0xFFFFFFFFFFFFFFF8) = v363.i64[0];
      if (v363.i64[0])
      {
        *(_QWORD *)v363.i64[0] = *(_QWORD *)v363.i64[0] & 7 | v82;
      }
      else
      {
        v83 = v363.i64[1];
        v84 = ***(int32x2_t ****)v363.i64[1];
        v85 = (unint64_t)v84[303];
        if (v85 <= v82)
        {
          v86 = v84[305].u32[0];
          if (v85 + 16 * v86 > v82)
          {
            v87 = v86 - 1;
            LODWORD(v88) = v87 & (((unsigned __int32)v363.i32[2] >> 4) ^ ((unsigned __int32)v363.i32[2] >> 9));
            v89 = (uint64_t *)(v85 + 16 * v88);
            v90 = *v89;
            if (v363.i64[1] == *v89)
            {
LABEL_126:
              *v89 = -8192;
              v84[304] = vadd_s32(v84[304], (int32x2_t)0x1FFFFFFFFLL);
              v83 = v363.i64[1];
            }
            else
            {
              v91 = 1;
              while (v90 != -4096)
              {
                v92 = v88 + v91++;
                v88 = v92 & v87;
                v90 = *(_QWORD *)(v85 + 16 * v88);
                if (v363.i64[1] == v90)
                {
                  v89 = (uint64_t *)(v85 + 16 * v88);
                  goto LABEL_126;
                }
              }
            }
            *(_BYTE *)(v83 + 17) &= ~1u;
          }
        }
      }
    }
    ++v66;
  }
  while (v66 != v67);
  v65 = 1;
LABEL_131:
  if ((_DWORD)v341)
  {
    v93 = (llvm::PoisonValue ****)v340;
    v94 = 8 * v341;
    do
    {
      v95 = *v93++;
      llvm::SROAPass::clobberUse(v44, v95);
      v94 -= 8;
    }
    while (v94);
    v65 = 1;
  }
  if ((_DWORD)v332)
  {
    v308 = v65 | llvm::SROAPass::splitAlloca((int32x2_t *)v44, (uint64_t)a2, (uint64_t)&v329);
    v96 = *((unsigned int *)v44 + 156);
    if ((_DWORD)v96)
    {
      v311 = (uint64_t)v44 + 592;
      while (1)
      {
        v97 = *(uint64_t ****)(*((_QWORD *)v44 + 77) + 8 * v96 - 8);
        sub_1C63258D0(v311);
        v98 = v97[1][3];
        v316 = (uint64_t **)*v98;
        v357 = v97[5];
        v358 = v97 + 3;
        v99 = (llvm::DataLayout *)v97[6];
        v362 = v99;
        if (v99)
        {
          llvm::MetadataTracking::track((uint64_t)&v362, (unsigned __int8 *)v99, 2);
          v100 = v362;
        }
        else
        {
          v100 = 0;
        }
        sub_1C4774EF4((uint64_t)&v354, 0, (uint64_t)v100);
        if (v362)
          llvm::MetadataTracking::untrack((uint64_t)&v362, (unsigned __int8 *)v362);
        v101 = *((_DWORD *)v97 + 5);
        v102 = v97 >> 4;
        if ((v101 & 0x10000000) == 0)
        {
          v112 = 0;
          v113 = (llvm::DataLayout *)&byte_1C871356D;
          goto LABEL_151;
        }
        v103 = ***v97;
        v104 = *(_QWORD *)(v103 + 152);
        v105 = *(unsigned int *)(v103 + 168);
        if (!(_DWORD)v105)
          goto LABEL_149;
        LODWORD(v106) = (v105 - 1) & (v102 ^ (v97 >> 9));
        v107 = (uint64_t ****)(v104 + 16 * v106);
        v108 = *v107;
        if (*v107 != v97)
          break;
LABEL_150:
        v111 = (uint64_t *)v107[1];
        v114 = *v111;
        v113 = (llvm::DataLayout *)(v111 + 2);
        v112 = v114;
LABEL_151:
        LOWORD(v365) = 773;
        v362 = v113;
        v363.i64[0] = v112;
        v363.i64[1] = (uint64_t)".sroa.speculated";
        v115 = (llvm::Value *)sub_1C4867E94((uint64_t)&v354, (uint64_t)v316, v101 & 0x7FFFFFF, (uint64_t)&v362);
        llvm::Instruction::getAAMetadata((uint64_t ***)v98, v323);
        v116 = *((_WORD *)v98 + 9);
        while (1)
        {
          v117 = v97[1];
          if (!v117)
            break;
          v118 = (llvm::ValueAsMetadata *)v117[3];
          llvm::Value::doRAUW(v118, v115, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v118 + 5) + 40, (uint64_t ***)v118);
          v119 = *((_QWORD *)v118 + 3);
          v120 = (_QWORD *)*((_QWORD *)v118 + 4);
          *v120 = v119;
          *(_QWORD *)(v119 + 8) = v120;
          *((_QWORD *)v118 + 3) = 0;
          *((_QWORD *)v118 + 4) = 0;
          llvm::Value::deleteValue(v118);
        }
        v321[0] = 0;
        v321[1] = 0;
        v322 = 0;
        v121 = *((_DWORD *)v97 + 5);
        v122 = v121 & 0x7FFFFFF;
        if ((v121 & 0x7FFFFFF) != 0)
        {
          v123 = 0;
          v124 = v116 & 0x7E;
          v314 = v102 ^ (v97 >> 9);
          while (1)
          {
            v320 = 0;
            v125 = *((_DWORD *)v97 + 5);
            if ((v125 & 0x40000000) != 0)
            {
              v127 = (uint64_t)(&(*(v97 - 1))[4 * *((unsigned int *)v97 + 15)])[v123];
              v320 = (uint64_t ***)v127;
              v126 = (uint64_t ***)*(v97 - 1);
            }
            else
            {
              v126 = &v97[-4 * (v125 & 0x7FFFFFF)];
              v127 = (uint64_t)(&v126[4 * *((unsigned int *)v97 + 15)])[v123];
              v320 = (uint64_t ***)v127;
            }
            v128 = v126[4 * v123];
            if (!v322)
              goto LABEL_167;
            v129 = (v322 - 1) & ((v127 >> 4) ^ (v127 >> 9));
            v130 = *(_QWORD *)(v321[0] + 16 * v129);
            if (v127 != v130)
              break;
LABEL_161:
            v131 = *(_QWORD *)(v321[0] + 16 * v129 + 8);
            if (!v131)
              goto LABEL_167;
            sub_1C477667C(v115, v131, v127);
LABEL_229:
            if (++v123 == v122)
              goto LABEL_253;
          }
          v132 = 1;
          while (v130 != -4096)
          {
            v133 = v129 + v132++;
            v129 = v133 & (v322 - 1);
            v130 = *(_QWORD *)(v321[0] + 16 * v129);
            if (v127 == v130)
              goto LABEL_161;
          }
LABEL_167:
          v134 = 0;
          v135 = *(_QWORD *)(v127 + 40);
          if (v135)
            v136 = v135 - 24;
          else
            v136 = 0;
          if (*(unsigned __int8 *)(v136 + 16) - 29 >= 0xB)
            v136 = 0;
          v357 = *(uint64_t ***)(v136 + 40);
          v358 = (_QWORD ***)(v136 + 24);
          v137 = *(llvm::DataLayout **)(v136 + 48);
          v362 = v137;
          if (v137)
          {
            llvm::MetadataTracking::track((uint64_t)&v362, (unsigned __int8 *)v137, 2);
            v134 = v362;
          }
          sub_1C4774EF4((uint64_t)&v354, 0, (uint64_t)v134);
          if (v362)
            llvm::MetadataTracking::untrack((uint64_t)&v362, (unsigned __int8 *)v362);
          if ((*((_BYTE *)v97 + 23) & 0x10) != 0)
          {
            v138 = ***v97;
            v139 = *(_QWORD *)(v138 + 152);
            v140 = *(unsigned int *)(v138 + 168);
            if (!(_DWORD)v140)
              goto LABEL_183;
            LODWORD(v141) = (v140 - 1) & v314;
            v142 = (uint64_t ****)(v139 + 16 * v141);
            v143 = *v142;
            if (*v142 != v97)
            {
              v144 = 1;
              while (v143 != (uint64_t ***)-4096)
              {
                v145 = v141 + v144++;
                v141 = v145 & (v140 - 1);
                v143 = *(uint64_t ****)(v139 + 16 * v141);
                if (v143 == v97)
                {
                  v142 = (uint64_t ****)(v139 + 16 * v141);
                  goto LABEL_184;
                }
              }
LABEL_183:
              v142 = (uint64_t ****)(v139 + 16 * v140);
            }
LABEL_184:
            v146 = (llvm::Value **)v142[1];
            v149 = *v146;
            v148 = (llvm::Value *)(v146 + 2);
            v147 = v149;
          }
          else
          {
            v147 = 0;
            v148 = (llvm::Value *)&byte_1C871356D;
          }
          v319 = 773;
          v318[0] = v148;
          v318[1] = v147;
          v318[2] = (llvm::Value *)".sroa.speculate.load.";
          if ((*((_BYTE *)v320 + 23) & 0x10) != 0)
          {
            v150 = ***v320;
            v151 = *(_QWORD *)(v150 + 152);
            v152 = *(unsigned int *)(v150 + 168);
            if (!(_DWORD)v152)
              goto LABEL_192;
            LODWORD(v153) = (v152 - 1) & ((v320 >> 4) ^ (v320 >> 9));
            v154 = (uint64_t ****)(v151 + 16 * v153);
            v155 = *v154;
            if (*v154 != v320)
            {
              v156 = 1;
              while (v155 != (uint64_t ***)-4096)
              {
                v157 = v153 + v156++;
                v153 = v157 & (v152 - 1);
                v155 = *(uint64_t ****)(v151 + 16 * v153);
                if (v155 == v320)
                {
                  v154 = (uint64_t ****)(v151 + 16 * v153);
                  goto LABEL_193;
                }
              }
LABEL_192:
              v154 = (uint64_t ****)(v151 + 16 * v152);
            }
LABEL_193:
            v158 = (llvm::MDNode **)v154[1];
            v161 = *v158;
            v160 = (llvm::MDNode *)(v158 + 2);
            v159 = v161;
          }
          else
          {
            v159 = 0;
            v160 = (llvm::MDNode *)&byte_1C871356D;
          }
          v325[0] = (llvm::MDNode *)v318;
          v326[0] = v160;
          v326[1] = v159;
          v327 = 1282;
          v162 = (char *)operator new(0x60uLL);
          v163 = v162;
          v164 = (llvm::Value *)(v162 + 32);
          *((_QWORD *)v162 + 2) = 0;
          *((_QWORD *)v162 + 3) = v162 + 32;
          LOWORD(v365) = 257;
          *((_QWORD *)v162 + 4) = v316;
          *((_QWORD *)v162 + 5) = 0;
          *((_WORD *)v162 + 24) = 60;
          *((_DWORD *)v162 + 13) = 1;
          *(_OWORD *)(v162 + 56) = 0u;
          *(_OWORD *)(v162 + 72) = 0u;
          *((_DWORD *)v162 + 22) = 0;
          *(_QWORD *)v162 = v128;
          *((_QWORD *)v162 + 1) = 0;
          if (v128)
          {
            v167 = v128[1];
            v166 = v128 + 1;
            v165 = v167;
            *((_QWORD *)v162 + 1) = v167;
            if (v167)
              v165[2] = (uint64_t)(v162 + 8);
            *((_QWORD *)v162 + 2) = v166;
            *v166 = v162;
          }
          *((_WORD *)v162 + 25) = v124;
          v162[92] = 1;
          llvm::Value::setName((uint64_t ***)v162 + 4, (uint64_t)&v362);
          (*(void (**)(uint64_t, llvm::Value *, llvm::MDNode **, uint64_t **, _QWORD ***))(*(_QWORD *)v359
                                                                                                  + 16))(v359, v164, v325, v357, v358);
          if (!v355)
          {
LABEL_199:
            if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)v323), (int32x4_t)vceqzq_s64(*(int64x2_t *)v324))))) & 1) != 0)
            {
              if (v323[0] || *((_QWORD *)v163 + 10) || (v163[55] & 0x20) != 0)
              {
                llvm::Value::setMetadata(v164, 1, v323[0]);
                v168 = v323[1];
                if (v323[1])
                  goto LABEL_204;
              }
              else
              {
                v168 = v323[1];
                if (v323[1])
                  goto LABEL_204;
              }
              if (*((_QWORD *)v163 + 10) || (v163[55] & 0x20) != 0)
LABEL_204:
                llvm::Value::setMetadata(v164, 5, v168);
              if (v324[0] || *((_QWORD *)v163 + 10) || (v163[55] & 0x20) != 0)
                llvm::Value::setMetadata(v164, 7, v324[0]);
              if (v324[1] || *((_QWORD *)v163 + 10) || (v163[55] & 0x20) != 0)
                llvm::Value::setMetadata(v164, 8, v324[1]);
            }
            sub_1C477667C(v115, (uint64_t)v164, (uint64_t)v320);
            if (v322)
            {
              v169 = ((v320 >> 4) ^ (v320 >> 9)) & (v322 - 1);
              v170 = (_QWORD *)(v321[0] + 16 * v169);
              v171 = *v170;
              if (v320 != (uint64_t ***)*v170)
              {
                v172 = 0;
                v173 = 1;
                while (v171 != -4096)
                {
                  if (v172)
                    v174 = 0;
                  else
                    v174 = v171 == -8192;
                  if (v174)
                    v172 = v170;
                  v175 = v169 + v173++;
                  v169 = v175 & (v322 - 1);
                  v170 = (_QWORD *)(v321[0] + 16 * v169);
                  v171 = *v170;
                  if (v320 == (uint64_t ***)*v170)
                    goto LABEL_228;
                }
                if (v172)
                  v176 = v172;
                else
                  v176 = v170;
LABEL_227:
                v170 = sub_1C4ECCA58((uint64_t)v321, (uint64_t)&v320, (uint64_t *)&v320, v176);
                *v170 = v320;
                v170[1] = 0;
              }
LABEL_228:
              v170[1] = v164;
              goto LABEL_229;
            }
            v176 = 0;
            goto LABEL_227;
          }
          v177 = (char *)v354;
          v178 = (char *)v354 + 16 * v355;
          v179 = (unsigned __int8 **)(v163 + 80);
          while (2)
          {
            v180 = *(_DWORD *)v177;
            v181 = (unsigned __int8 *)*((_QWORD *)v177 + 1);
            if (v181)
            {
              if (v180)
                goto LABEL_243;
              v328 = (unsigned __int8 *)*((_QWORD *)v177 + 1);
              llvm::MetadataTracking::track((uint64_t)&v328, v181, 2);
              v182 = *v179;
LABEL_247:
              if (v182)
                llvm::MetadataTracking::untrack((uint64_t)(v163 + 80), v182);
              v183 = v328;
              *v179 = v328;
              if (v183)
                llvm::MetadataTracking::retrack((uint64_t)&v328, v183, (uint64_t)(v163 + 80));
            }
            else
            {
              v182 = *v179;
              if (*v179 || (v163[55] & 0x20) != 0)
              {
                if (!v180)
                {
                  v328 = 0;
                  goto LABEL_247;
                }
LABEL_243:
                llvm::Value::setMetadata(v164, *(_DWORD *)v177, (llvm::MDNode *)v181);
              }
            }
            v177 += 16;
            if (v177 == v178)
              goto LABEL_199;
            continue;
          }
        }
LABEL_253:
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v97[5] + 5), v97);
        v184 = v97[3];
        v185 = v97[4];
        *v185 = (uint64_t *)v184;
        v184[1] = (uint64_t *)v185;
        v97[3] = 0;
        v97[4] = 0;
        llvm::Value::deleteValue((llvm::Value *)v97);
        MEMORY[0x1CAA32FB4](v321[0], 8);
        v44 = v317;
        v96 = *((unsigned int *)v317 + 156);
        if (!(_DWORD)v96)
          goto LABEL_257;
      }
      v109 = 1;
      while (v108 != (uint64_t ***)-4096)
      {
        v110 = v106 + v109++;
        v106 = v110 & (v105 - 1);
        v108 = *(uint64_t ****)(v104 + 16 * v106);
        if (v108 == v97)
        {
          v107 = (uint64_t ****)(v104 + 16 * v106);
          goto LABEL_150;
        }
      }
LABEL_149:
      v107 = (uint64_t ****)(v104 + 16 * v105);
      goto LABEL_150;
    }
LABEL_257:
    v186 = *((unsigned int *)v44 + 170);
    if ((_DWORD)v186)
    {
      v306 = (uint64_t)v44 + 648;
      while (1)
      {
        v187 = *(llvm::DataLayout **)(*((_QWORD *)v44 + 84) + 8 * v186 - 8);
        sub_1C6325940(v306);
        v357 = (uint64_t **)*((_QWORD *)v187 + 5);
        v307 = (_QWORD *)((char *)v187 + 24);
        v358 = (_QWORD ***)((char *)v187 + 24);
        v188 = (llvm::DataLayout *)*((_QWORD *)v187 + 6);
        v362 = v188;
        if (v188)
        {
          llvm::MetadataTracking::track((uint64_t)&v362, (unsigned __int8 *)v188, 2);
          v189 = v362;
        }
        else
        {
          v189 = 0;
        }
        sub_1C4774EF4((uint64_t)&v354, 0, (uint64_t)v189);
        if (v362)
          llvm::MetadataTracking::untrack((uint64_t)&v362, (unsigned __int8 *)v362);
        v190 = *((_QWORD *)v187 + 1);
        if (v190)
          break;
LABEL_408:
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v187 + 5) + 40, (uint64_t ***)v187);
        v304 = *((_QWORD *)v187 + 3);
        v305 = (_QWORD *)*((_QWORD *)v187 + 4);
        *v305 = v304;
        *(_QWORD *)(v304 + 8) = v305;
        *v307 = 0;
        v307[1] = 0;
        llvm::Value::deleteValue(v187);
        v186 = *((unsigned int *)v44 + 170);
        if (!(_DWORD)v186)
          goto LABEL_80;
      }
      v191 = (unsigned __int8 *)*((_QWORD *)v187 - 8);
      v192 = (unsigned __int8 *)*((_QWORD *)v187 - 4);
      v310 = (v191 >> 4) ^ (v191 >> 9);
      v309 = (v192 >> 4) ^ (v192 >> 9);
      v313 = v191;
      v315 = v187;
      v312 = v192;
      while (2)
      {
        v193 = *(uint64_t ****)(v190 + 24);
        if (*((_BYTE *)v193 + 16) == 77)
          v194 = *(_QWORD *)(v190 + 24);
        else
          v194 = 0;
        if (v194)
          v193 = *(uint64_t ****)(*(_QWORD *)(v194 + 8) + 24);
        v357 = v193[5];
        v358 = v193 + 3;
        v195 = (llvm::DataLayout *)v193[6];
        v362 = v195;
        if (v195)
        {
          llvm::MetadataTracking::track((uint64_t)&v362, (unsigned __int8 *)v195, 2);
          v196 = v362;
        }
        else
        {
          v196 = 0;
        }
        sub_1C4774EF4((uint64_t)&v354, 0, (uint64_t)v196);
        if (!v362)
        {
          if (v194)
            goto LABEL_274;
LABEL_295:
          v210 = v191;
          v224 = v192;
LABEL_296:
          v225 = *v193;
          v226 = v193 >> 4;
          if ((*((_BYTE *)v193 + 23) & 0x10) != 0)
          {
            v227 = **v225;
            v228 = *(_QWORD *)(v227 + 152);
            v229 = *(unsigned int *)(v227 + 168);
            if (!(_DWORD)v229)
              goto LABEL_303;
            LODWORD(v230) = (v229 - 1) & (v226 ^ (v193 >> 9));
            v231 = (uint64_t ****)(v228 + 16 * v230);
            v232 = *v231;
            if (*v231 != v193)
            {
              v233 = 1;
              while (v232 != (uint64_t ***)-4096)
              {
                v234 = v230 + v233++;
                v230 = v234 & (v229 - 1);
                v232 = *(uint64_t ****)(v228 + 16 * v230);
                if (v232 == v193)
                {
                  v231 = (uint64_t ****)(v228 + 16 * v230);
                  goto LABEL_304;
                }
              }
LABEL_303:
              v231 = (uint64_t ****)(v228 + 16 * v229);
            }
LABEL_304:
            v235 = (llvm::MDNode **)v231[1];
            v238 = *v235;
            v237 = (llvm::MDNode *)(v235 + 2);
            v236 = v238;
          }
          else
          {
            v236 = 0;
            v237 = (llvm::MDNode *)&byte_1C871356D;
          }
          v327 = 773;
          v325[0] = v237;
          v325[1] = v236;
          v326[0] = (llvm::MDNode *)".sroa.speculate.load.true";
          llvm::DataLayout::getAlignment(v357[7][5] + 272, (uint64_t)v225);
          v240 = v239;
          v241 = (char *)operator new(0x60uLL);
          v242 = v241;
          v243 = (llvm::Value *)(v241 + 32);
          *((_QWORD *)v241 + 2) = 0;
          *((_QWORD *)v241 + 3) = v241 + 32;
          LOWORD(v365) = 257;
          *((_QWORD *)v241 + 4) = v225;
          *((_QWORD *)v241 + 5) = 0;
          *((_WORD *)v241 + 24) = 60;
          *((_DWORD *)v241 + 13) = 1;
          *(_OWORD *)(v241 + 56) = 0u;
          *(_OWORD *)(v241 + 72) = 0u;
          *((_DWORD *)v241 + 22) = 0;
          *(_QWORD *)v241 = v210;
          *((_QWORD *)v241 + 1) = 0;
          if (v210)
          {
            v246 = *((_QWORD *)v210 + 1);
            v245 = v210 + 8;
            v244 = v246;
            *((_QWORD *)v241 + 1) = v246;
            if (v246)
              *(_QWORD *)(v244 + 16) = v241 + 8;
            *((_QWORD *)v241 + 2) = v245;
            *v245 = v241;
          }
          *((_WORD *)v241 + 25) = 2 * (v240 & 0x3F);
          v241[92] = 1;
          llvm::Value::setName((uint64_t ***)v241 + 4, (uint64_t)&v362);
          (*(void (**)(uint64_t, llvm::Value *, llvm::MDNode **, uint64_t **, _QWORD ***))(*(_QWORD *)v359
                                                                                                  + 16))(v359, v243, v325, v357, v358);
          if (!v355)
          {
LABEL_310:
            v247 = *v193;
            if ((*((_BYTE *)v193 + 23) & 0x10) != 0)
            {
              v248 = **v247;
              v249 = *(_QWORD *)(v248 + 152);
              v250 = *(unsigned int *)(v248 + 168);
              if (!(_DWORD)v250)
                goto LABEL_317;
              LODWORD(v251) = (v250 - 1) & (v226 ^ (v193 >> 9));
              v252 = (uint64_t ****)(v249 + 16 * v251);
              v253 = *v252;
              if (*v252 != v193)
              {
                v254 = 1;
                while (v253 != (uint64_t ***)-4096)
                {
                  v255 = v251 + v254++;
                  v251 = v255 & (v250 - 1);
                  v253 = *(uint64_t ****)(v249 + 16 * v251);
                  if (v253 == v193)
                  {
                    v252 = (uint64_t ****)(v249 + 16 * v251);
                    goto LABEL_318;
                  }
                }
LABEL_317:
                v252 = (uint64_t ****)(v249 + 16 * v250);
              }
LABEL_318:
              v256 = (llvm::MDNode **)v252[1];
              v259 = *v256;
              v258 = (llvm::MDNode *)(v256 + 2);
              v257 = v259;
            }
            else
            {
              v257 = 0;
              v258 = (llvm::MDNode *)&byte_1C871356D;
            }
            v327 = 773;
            v325[0] = v258;
            v325[1] = v257;
            v326[0] = (llvm::MDNode *)".sroa.speculate.load.false";
            llvm::DataLayout::getAlignment(v357[7][5] + 272, (uint64_t)v247);
            v261 = v260;
            v262 = (char *)operator new(0x60uLL);
            v263 = v262;
            v264 = (llvm::Value *)(v262 + 32);
            *((_QWORD *)v262 + 2) = 0;
            *((_QWORD *)v262 + 3) = v262 + 32;
            LOWORD(v365) = 257;
            *((_QWORD *)v262 + 4) = v247;
            *((_QWORD *)v262 + 5) = 0;
            *((_WORD *)v262 + 24) = 60;
            *((_DWORD *)v262 + 13) = 1;
            *(_OWORD *)(v262 + 56) = 0u;
            *(_OWORD *)(v262 + 72) = 0u;
            *((_DWORD *)v262 + 22) = 0;
            *(_QWORD *)v262 = v224;
            *((_QWORD *)v262 + 1) = 0;
            if (v224)
            {
              v267 = *((_QWORD *)v224 + 1);
              v266 = v224 + 8;
              v265 = v267;
              *((_QWORD *)v262 + 1) = v267;
              if (v267)
                *(_QWORD *)(v265 + 16) = v262 + 8;
              *((_QWORD *)v262 + 2) = v266;
              *v266 = v262;
            }
            *((_WORD *)v262 + 25) = 2 * (v261 & 0x3F);
            v262[92] = 1;
            llvm::Value::setName((uint64_t ***)v262 + 4, (uint64_t)&v362);
            (*(void (**)(uint64_t, llvm::Value *, llvm::MDNode **, uint64_t **, _QWORD ***))(*(_QWORD *)v359 + 16))(v359, v264, v325, v357, v358);
            if (!v355)
            {
LABEL_324:
              *((_WORD *)v242 + 25) = *((_WORD *)v242 + 25) & 0xFF81 | (2
                                                                      * __clz(1 << ((unint64_t)*((unsigned __int16 *)v193 + 9) >> 1))) ^ 0x7E;
              *((_WORD *)v263 + 25) = *((_WORD *)v263 + 25) & 0xFF81 | (2
                                                                      * __clz(1 << ((unint64_t)*((unsigned __int16 *)v193 + 9) >> 1))) ^ 0x7E;
              llvm::Instruction::getAAMetadata(v193, v325);
              if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)v325), (int32x4_t)vceqzq_s64(*(int64x2_t *)v326))))) & 1) != 0)
              {
                if (v325[0] || *((_QWORD *)v242 + 10) || (v242[55] & 0x20) != 0)
                {
                  llvm::Value::setMetadata(v243, 1, v325[0]);
                  v268 = v325[1];
                  if (v325[1])
                    goto LABEL_329;
                }
                else
                {
                  v268 = v325[1];
                  if (v325[1])
                    goto LABEL_329;
                }
                if (*((_QWORD *)v242 + 10) || (v242[55] & 0x20) != 0)
LABEL_329:
                  llvm::Value::setMetadata(v243, 5, v268);
                if (v326[0] || *((_QWORD *)v242 + 10) || (v242[55] & 0x20) != 0)
                  llvm::Value::setMetadata(v243, 7, v326[0]);
                if (v326[1] || *((_QWORD *)v242 + 10) || (v242[55] & 0x20) != 0)
                  llvm::Value::setMetadata(v243, 8, v326[1]);
                if (v325[0] || *((_QWORD *)v263 + 10) || (v263[55] & 0x20) != 0)
                  llvm::Value::setMetadata(v264, 1, v325[0]);
                if (v325[1] || *((_QWORD *)v263 + 10) || (v263[55] & 0x20) != 0)
                  llvm::Value::setMetadata(v264, 5, v325[1]);
                if (v326[0] || *((_QWORD *)v263 + 10) || (v263[55] & 0x20) != 0)
                  llvm::Value::setMetadata(v264, 7, v326[0]);
                if (v326[1] || *((_QWORD *)v263 + 10) || (v263[55] & 0x20) != 0)
                  llvm::Value::setMetadata(v264, 8, v326[1]);
              }
              v187 = v315;
              v269 = *((_QWORD *)v315 - 12);
              if ((*((_BYTE *)v193 + 23) & 0x10) != 0)
              {
                v270 = ***v193;
                v271 = *(_QWORD *)(v270 + 152);
                v272 = *(unsigned int *)(v270 + 168);
                v192 = v312;
                v191 = v313;
                if (!(_DWORD)v272)
                  goto LABEL_359;
                LODWORD(v273) = (v272 - 1) & (v226 ^ (v193 >> 9));
                v274 = (uint64_t ****)(v271 + 16 * v273);
                v275 = *v274;
                if (*v274 != v193)
                {
                  v276 = 1;
                  while (v275 != (uint64_t ***)-4096)
                  {
                    v277 = v273 + v276++;
                    v273 = v277 & (v272 - 1);
                    v275 = *(uint64_t ****)(v271 + 16 * v273);
                    if (v275 == v193)
                    {
                      v274 = (uint64_t ****)(v271 + 16 * v273);
                      goto LABEL_360;
                    }
                  }
LABEL_359:
                  v274 = (uint64_t ****)(v271 + 16 * v272);
                }
LABEL_360:
                v278 = (uint64_t *)v274[1];
                v281 = *v278;
                v280 = (llvm::DataLayout *)(v278 + 2);
                v279 = v281;
              }
              else
              {
                v279 = 0;
                v280 = (llvm::DataLayout *)&byte_1C871356D;
                v192 = v312;
                v191 = v313;
              }
              LOWORD(v365) = 773;
              v362 = v280;
              v363.i64[0] = v279;
              v363.i64[1] = (uint64_t)".sroa.speculated";
              Select = llvm::IRBuilderBase::CreateSelect((uint64_t *)&v354, v269, (uint64_t *)v243, (uint64_t)v264, (uint64_t)&v362, 0);
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v193, Select, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v193[5] + 5), v193);
              v283 = v193[3];
              v284 = v193[4];
              *v284 = (uint64_t *)v283;
              v283[1] = (uint64_t *)v284;
              v193[3] = 0;
              v193[4] = 0;
              llvm::Value::deleteValue((llvm::Value *)v193);
              if (v194)
              {
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v194 + 40) + 40, (uint64_t ***)v194);
                v285 = *(_QWORD *)(v194 + 24);
                v286 = *(_QWORD **)(v194 + 32);
                *v286 = v285;
                *(_QWORD *)(v285 + 8) = v286;
                *(_QWORD *)(v194 + 24) = 0;
                *(_QWORD *)(v194 + 32) = 0;
                llvm::Value::deleteValue((llvm::Value *)v194);
              }
              v190 = *((_QWORD *)v315 + 1);
              v44 = v317;
              if (!v190)
                goto LABEL_408;
              continue;
            }
            v294 = (char *)v354;
            v295 = (char *)v354 + 16 * v355;
            v296 = (llvm::Value **)(v263 + 80);
            while (2)
            {
              v297 = *(_DWORD *)v294;
              v298 = (unsigned __int8 *)*((_QWORD *)v294 + 1);
              if (v298)
              {
                if (v297)
                  goto LABEL_394;
                v318[0] = *((llvm::Value **)v294 + 1);
                v301 = v296;
                llvm::MetadataTracking::track((uint64_t)v318, v298, 2);
                v296 = v301;
                v299 = *v301;
LABEL_399:
                if (v299)
                {
                  v303 = v296;
                  llvm::MetadataTracking::untrack((uint64_t)v296, (unsigned __int8 *)v299);
                  v296 = v303;
                }
                v302 = (unsigned __int8 *)v318[0];
                *v296 = v318[0];
                if (v302)
                {
                  v300 = v296;
                  llvm::MetadataTracking::retrack((uint64_t)v318, v302, (uint64_t)v296);
                  goto LABEL_395;
                }
              }
              else
              {
                v299 = *v296;
                if (*v296 || (v263[55] & 0x20) != 0)
                {
                  if (!v297)
                  {
                    v318[0] = 0;
                    goto LABEL_399;
                  }
LABEL_394:
                  v300 = v296;
                  llvm::Value::setMetadata(v264, *(_DWORD *)v294, (llvm::MDNode *)v298);
LABEL_395:
                  v296 = v300;
                }
              }
              v294 += 16;
              if (v294 == v295)
                goto LABEL_324;
              continue;
            }
          }
          v287 = (char *)v354;
          v288 = (char *)v354 + 16 * v355;
          v289 = (unsigned __int8 **)(v242 + 80);
          while (2)
          {
            v290 = *(_DWORD *)v287;
            v291 = (unsigned __int8 *)*((_QWORD *)v287 + 1);
            if (v291)
            {
              if (v290)
                goto LABEL_379;
              v318[0] = *((llvm::Value **)v287 + 1);
              llvm::MetadataTracking::track((uint64_t)v318, v291, 2);
              v292 = *v289;
LABEL_383:
              if (v292)
                llvm::MetadataTracking::untrack((uint64_t)(v242 + 80), v292);
              v293 = (unsigned __int8 *)v318[0];
              *v289 = (unsigned __int8 *)v318[0];
              if (v293)
                llvm::MetadataTracking::retrack((uint64_t)v318, v293, (uint64_t)(v242 + 80));
            }
            else
            {
              v292 = *v289;
              if (*v289 || (v242[55] & 0x20) != 0)
              {
                if (!v290)
                {
                  v318[0] = 0;
                  goto LABEL_383;
                }
LABEL_379:
                llvm::Value::setMetadata(v243, *(_DWORD *)v287, (llvm::MDNode *)v291);
              }
            }
            v287 += 16;
            if (v287 == v288)
              goto LABEL_310;
            continue;
          }
        }
        break;
      }
      llvm::MetadataTracking::untrack((uint64_t)&v362, (unsigned __int8 *)v362);
      if (!v194)
        goto LABEL_295;
LABEL_274:
      if ((v191[23] & 0x10) != 0)
      {
        v197 = ***(_QWORD ***)v191;
        v198 = *(_QWORD *)(v197 + 152);
        v199 = *(unsigned int *)(v197 + 168);
        if (!(_DWORD)v199)
          goto LABEL_281;
        LODWORD(v200) = (v199 - 1) & v310;
        v201 = (unsigned __int8 **)(v198 + 16 * v200);
        v202 = *v201;
        if (*v201 != v191)
        {
          v203 = 1;
          while (v202 != (unsigned __int8 *)-4096)
          {
            v204 = v200 + v203++;
            v200 = v204 & (v199 - 1);
            v202 = *(unsigned __int8 **)(v198 + 16 * v200);
            if (v202 == v191)
            {
              v201 = (unsigned __int8 **)(v198 + 16 * v200);
              goto LABEL_282;
            }
          }
LABEL_281:
          v201 = (unsigned __int8 **)(v198 + 16 * v199);
        }
LABEL_282:
        v205 = (uint64_t *)v201[1];
        v208 = *v205;
        v207 = (llvm::DataLayout *)(v205 + 2);
        v206 = v208;
      }
      else
      {
        v206 = 0;
        v207 = (llvm::DataLayout *)&byte_1C871356D;
      }
      v209 = *(uint64_t ***)v194;
      LOWORD(v365) = 773;
      v362 = v207;
      v363.i64[0] = v206;
      v363.i64[1] = (uint64_t)".sroa.cast";
      v210 = sub_1C4773E38((uint64_t *)&v354, 49, v191, (uint64_t)v209, (uint64_t)&v362);
      if ((v192[23] & 0x10) != 0)
      {
        v211 = ***(_QWORD ***)v192;
        v212 = *(_QWORD *)(v211 + 152);
        v213 = *(unsigned int *)(v211 + 168);
        if (!(_DWORD)v213)
          goto LABEL_290;
        LODWORD(v214) = (v213 - 1) & v309;
        v215 = (unsigned __int8 **)(v212 + 16 * v214);
        v216 = *v215;
        if (*v215 != v192)
        {
          v217 = 1;
          while (v216 != (unsigned __int8 *)-4096)
          {
            v218 = v214 + v217++;
            v214 = v218 & (v213 - 1);
            v216 = *(unsigned __int8 **)(v212 + 16 * v214);
            if (v216 == v192)
            {
              v215 = (unsigned __int8 **)(v212 + 16 * v214);
              goto LABEL_291;
            }
          }
LABEL_290:
          v215 = (unsigned __int8 **)(v212 + 16 * v213);
        }
LABEL_291:
        v219 = (uint64_t *)v215[1];
        v222 = *v219;
        v221 = (llvm::DataLayout *)(v219 + 2);
        v220 = v222;
      }
      else
      {
        v220 = 0;
        v221 = (llvm::DataLayout *)&byte_1C871356D;
      }
      v223 = *(uint64_t ***)v194;
      LOWORD(v365) = 773;
      v362 = v221;
      v363.i64[0] = v220;
      v363.i64[1] = (uint64_t)".sroa.cast";
      v224 = sub_1C4773E38((uint64_t *)&v354, 49, v192, (uint64_t)v223, (uint64_t)&v362);
      goto LABEL_296;
    }
  }
  else
  {
    LOBYTE(v308) = v65;
  }
LABEL_80:
  if (v340 != v342)
    free(v340);
  if (v337 != v339)
    free(v337);
  if (v334 != v336)
    free(v334);
  if (v331 != v333)
    free(v331);
  if (v347 != v346)
    free(v347);
  if (v343 != v345)
    free(v343);
  if (v361 < 0)
    operator delete(__p);
  if (v354 != &v356)
    free(v354);
  v19 = v308;
  return v19 & 1;
}

uint64_t llvm::SROAPass::deleteDeadInstructions(uint64_t a1, llvm::SmallPtrSetImplBase *a2)
{
  unsigned int v2;
  char v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  int32x2_t ****v8;
  unint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  int32x2_t *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t v29;
  int32x2_t ****v30;
  int32x2_t *v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int32x2_t *****v36;
  int32x2_t ****v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  llvm::UndefValue *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  _QWORD *v51;
  unsigned int v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  int32x2_t ****v59;
  int32x2_t *v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  int32x2_t *****v65;
  int32x2_t ****v66;
  int v67;
  int v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v73;
  unint64_t *v74;
  int32x2_t ****v75;

  v2 = *(_DWORD *)(a1 + 200);
  if (v2)
  {
    v4 = 0;
    v5 = (unsigned int *)(a1 + 192);
    do
    {
      v6 = *(_QWORD *)v5;
      v7 = *(_QWORD *)v5 + 24 * v2;
      v73 = 4;
      v74 = 0;
      v8 = *(int32x2_t *****)(v7 - 8);
      v75 = v8;
      if (v8 && v8 != (int32x2_t ****)-8192 && v8 != (int32x2_t ****)-4096)
      {
        v9 = *(_QWORD *)(v7 - 24) & 0xFFFFFFFFFFFFFFF8;
        v74 = *(unint64_t **)v9;
        *(_QWORD *)v9 = &v73;
        v73 = v9 | 4;
        if (v74)
          *v74 = *v74 & 7 | (unint64_t)&v74;
        v6 = *(_QWORD *)v5;
      }
      v10 = v2 - 1;
      *(_DWORD *)(a1 + 200) = v10;
      v11 = (_QWORD *)(v6 + 24 * v10);
      v12 = v11[2];
      if (v12 && v12 != -8192 && v12 != -4096)
      {
        v13 = *v11 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v13 = v11[1];
        v14 = (unint64_t *)v11[1];
        if (v14)
        {
          *v14 = *v14 & 7 | v13;
        }
        else
        {
          v15 = v11[2];
          v16 = ***(int32x2_t ****)v15;
          v17 = (unint64_t)v16[303];
          if (v17 <= v13)
          {
            v18 = v16[305].u32[0];
            if (v17 + 16 * v18 > v13)
            {
              v19 = v18 - 1;
              LODWORD(v20) = v19 & ((v15 >> 4) ^ (v15 >> 9));
              v21 = (uint64_t *)(v17 + 16 * v20);
              v22 = *v21;
              if (v15 == *v21)
              {
LABEL_20:
                *v21 = -8192;
                v16[304] = vadd_s32(v16[304], (int32x2_t)0x1FFFFFFFFLL);
                v15 = v11[2];
              }
              else
              {
                v23 = 1;
                while (v22 != -4096)
                {
                  v24 = v20 + v23++;
                  v20 = v24 & v19;
                  v22 = *(_QWORD *)(v17 + 16 * v20);
                  if (v15 == v22)
                  {
                    v21 = (uint64_t *)(v17 + 16 * v20);
                    goto LABEL_20;
                  }
                }
              }
              *(_BYTE *)(v15 + 17) &= ~1u;
            }
          }
        }
      }
      if (v75)
      {
        if (*((unsigned __int8 *)v75 + 16) <= 0x1Bu)
          v25 = 0;
        else
          v25 = (uint64_t)v75;
      }
      else
      {
        v25 = 0;
      }
      if (v75 != (int32x2_t ****)-8192 && v75 != (int32x2_t ****)-4096 && v75 != 0)
      {
        v29 = v73 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v73 & 0xFFFFFFFFFFFFFFF8) = v74;
        if (v74)
        {
          *v74 = *v74 & 7 | v29;
        }
        else
        {
          v30 = v75;
          v31 = ***v75;
          v32 = (unint64_t)v31[303];
          if (v32 <= v29)
          {
            v33 = v31[305].u32[0];
            if (v32 + 16 * v33 > v29)
            {
              v34 = v33 - 1;
              LODWORD(v35) = v34 & ((v75 >> 4) ^ (v75 >> 9));
              v36 = (int32x2_t *****)(v32 + 16 * v35);
              v37 = *v36;
              if (v75 == *v36)
              {
LABEL_46:
                *v36 = (int32x2_t ****)-8192;
                v31[304] = vadd_s32(v31[304], (int32x2_t)0x1FFFFFFFFLL);
                v30 = v75;
              }
              else
              {
                v38 = 1;
                while (v37 != (int32x2_t ****)-4096)
                {
                  v39 = v35 + v38++;
                  v35 = v39 & v34;
                  v37 = *(int32x2_t *****)(v32 + 16 * v35);
                  if (v75 == v37)
                  {
                    v36 = (int32x2_t *****)(v32 + 16 * v35);
                    goto LABEL_46;
                  }
                }
              }
              *((_BYTE *)v30 + 17) &= ~1u;
            }
          }
        }
      }
      if (v25)
      {
        if (*(_BYTE *)(v25 + 16) == 59)
        {
          sub_1C4774094(a2, v25);
          llvm::FindDbgAddrUses(v25, &v73);
          if ((v73 & 4) != 0)
          {
            v27 = *(unint64_t **)(v73 & 0xFFFFFFFFFFFFFFF8);
            v28 = &v27[*(unsigned int *)((v73 & 0xFFFFFFFFFFFFFFF8) + 8)];
          }
          else
          {
            v27 = &v73;
            v28 = &v73 + (v73 > 7);
          }
          while (v27 != v28)
          {
            v40 = *v27++;
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v40 + 40) + 40, (uint64_t ***)v40);
            v41 = *(_QWORD *)(v40 + 24);
            v42 = *(_QWORD **)(v40 + 32);
            *v42 = v41;
            *(_QWORD *)(v41 + 8) = v42;
            *(_QWORD *)(v40 + 24) = 0;
            *(_QWORD *)(v40 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v40);
          }
          sub_1C4DDA878(&v73);
        }
        v43 = llvm::UndefValue::get(*(llvm::UndefValue **)v25, a2);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v25, v43, (llvm::Value *)1);
        v44 = *(_DWORD *)(v25 + 20);
        if ((v44 & 0x40000000) != 0)
        {
          v46 = *(_QWORD *)(v25 - 8);
          v45 = v44 & 0x7FFFFFF;
        }
        else
        {
          v45 = v44 & 0x7FFFFFF;
          v46 = v25 - 32 * v45;
        }
        v47 = v46 + 32 * v45;
        if (v45)
        {
          do
          {
            v48 = *(_QWORD *)v46;
            if (*(_QWORD *)v46)
              v49 = *(unsigned __int8 *)(*(_QWORD *)v46 + 16) >= 0x1Cu;
            else
              v49 = 0;
            if (v49)
            {
              **(_QWORD **)(v46 + 16) = *(_QWORD *)(v46 + 8);
              v50 = *(_QWORD *)(v46 + 8);
              if (v50)
                *(_QWORD *)(v50 + 16) = *(_QWORD *)(v46 + 16);
              *(_QWORD *)v46 = 0;
              if (!*(_QWORD *)(v48 + 8) && llvm::wouldInstructionBeTriviallyDead(v48, 0))
              {
                v73 = 4;
                v74 = 0;
                v75 = (int32x2_t ****)v48;
                if (v48 != -8192 && v48 != -4096 && v48)
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v73);
                v51 = (_QWORD *)sub_1C4EE497C(v5, (unint64_t)&v73, 1);
                v52 = *(_DWORD *)(a1 + 200);
                v53 = (unint64_t *)(*(_QWORD *)(a1 + 192) + 24 * v52);
                *v53 = 4;
                v53[1] = 0;
                v54 = (unint64_t)(v53 + 1);
                v55 = v51[2];
                v53[2] = v55;
                if (v55 != -8192 && v55 != -4096)
                {
                  if (v55)
                  {
                    v56 = *v51 & 0xFFFFFFFFFFFFFFF8;
                    v53[1] = *(_QWORD *)v56;
                    *(_QWORD *)v56 = v53;
                    *v53 = v56 | 4;
                    v57 = (uint64_t *)v53[1];
                    if (v57)
                      *v57 = *v57 & 7 | v54;
                  }
                }
                *(_DWORD *)(a1 + 200) = v52 + 1;
                if (v75 != (int32x2_t ****)-8192 && v75 != (int32x2_t ****)-4096 && v75)
                {
                  v58 = v73 & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)(v73 & 0xFFFFFFFFFFFFFFF8) = v74;
                  if (v74)
                  {
                    *v74 = *v74 & 7 | v58;
                  }
                  else
                  {
                    v59 = v75;
                    v60 = ***v75;
                    v61 = (unint64_t)v60[303];
                    if (v61 <= v58)
                    {
                      v62 = v60[305].u32[0];
                      if (v61 + 16 * v62 > v58)
                      {
                        v63 = v62 - 1;
                        LODWORD(v64) = v63 & ((v75 >> 4) ^ (v75 >> 9));
                        v65 = (int32x2_t *****)(v61 + 16 * v64);
                        v66 = *v65;
                        if (v75 == *v65)
                        {
LABEL_87:
                          *v65 = (int32x2_t ****)-8192;
                          v60[304] = vadd_s32(v60[304], (int32x2_t)0x1FFFFFFFFLL);
                          v59 = v75;
                        }
                        else
                        {
                          v67 = 1;
                          while (v66 != (int32x2_t ****)-4096)
                          {
                            v68 = v64 + v67++;
                            v64 = v68 & v63;
                            v66 = *(int32x2_t *****)(v61 + 16 * v64);
                            if (v75 == v66)
                            {
                              v65 = (int32x2_t *****)(v61 + 16 * v64);
                              goto LABEL_87;
                            }
                          }
                        }
                        *((_BYTE *)v59 + 17) &= ~1u;
                      }
                    }
                  }
                }
              }
            }
            v46 += 32;
          }
          while (v46 != v47);
        }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v25 + 40) + 40, (uint64_t ***)v25);
        v69 = *(_QWORD *)(v25 + 24);
        v70 = *(_QWORD **)(v25 + 32);
        *v70 = v69;
        *(_QWORD *)(v69 + 8) = v70;
        *(_QWORD *)(v25 + 24) = 0;
        *(_QWORD *)(v25 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v25);
        v4 = 1;
      }
      v2 = *(_DWORD *)(a1 + 200);
    }
    while (v2);
  }
  else
  {
    v4 = 0;
  }
  return v4 & 1;
}

BOOL llvm::SROAPass::promoteAllocas(llvm::SROAPass *this, llvm::Function *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 71);
  v3 = *((_QWORD *)this + 72);
  if (v2 != v3)
  {
    llvm::PromoteMemToReg(*((const void **)this + 71), (v3 - v2) >> 3, *((void **)this + 1), *((_QWORD *)this + 2));
    *((_QWORD *)this + 72) = *((_QWORD *)this + 71);
  }
  return v2 != v3;
}

void llvm::SROAPass::runImpl(int32x2_t *this@<X0>, int32x2_t **a2@<X1>, llvm::DominatorTree *a3@<X2>, llvm::AssumptionCache *a4@<X3>, uint64_t a5@<X8>)
{
  int32x2_t *v6;
  int32x2_t *v7;
  int32x2_t v8;
  int32x2_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  const llvm::AllocaInst *v16;
  llvm **v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  llvm **v26;
  llvm *v27;
  int v28;
  int32x2_t *v29;
  uint64_t v30;
  llvm::AllocaInst *v31;
  int v32;
  int v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t *v42;
  int v43;
  BOOL v44;
  unsigned int v45;
  llvm *v46;
  _BOOL4 v47;
  uint64_t v48;
  void *v49;
  __int32 v50;
  unsigned int v51;
  int v52;
  int v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  llvm *v64;
  llvm *v65;
  uint64_t v66;
  int v67;
  _BYTE v68[32];

  *this = **a2;
  this[1] = (int32x2_t)a3;
  this[2] = (int32x2_t)a4;
  v6 = a2[10];
  if (v6)
    v7 = v6 - 3;
  else
    v7 = 0;
  v9 = v7[5];
  v8 = v7[6];
  if (*(_QWORD *)&v8 != *(_QWORD *)&v9)
  {
    v10 = (uint64_t)&a2[5][34];
    do
    {
      v11 = *(_QWORD *)&v8 - 24;
      if (!*(_QWORD *)&v8)
        v11 = 0;
      v12 = *(unsigned __int8 *)(v11 + 16);
      if (v12 != 59)
        v11 = 0;
      v64 = (llvm *)v11;
      if (*(_QWORD *)&v8 && v12 == 59)
      {
        v13 = *(_QWORD *)(v11 + 64);
        sub_1C4768AD0(v10, v13);
        v15 = v14 == 1;
        llvm::DataLayout::getAlignment(v10, v13);
        if (v15 && llvm::isAllocaPromotable(v64, v16))
        {
          v17 = (llvm **)this[72];
          v18 = (unint64_t)this[73];
          if ((unint64_t)v17 >= v18)
          {
            v20 = (_QWORD *)this[71];
            v21 = v17 - (llvm **)v20;
            v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 61)
              abort();
            v23 = v18 - (_QWORD)v20;
            if (v23 >> 2 > v22)
              v22 = v23 >> 2;
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
              v24 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v24 = v22;
            if (v24)
            {
              if (v24 >> 61)
                sub_1C4764EE4();
              v25 = (char *)operator new(8 * v24);
            }
            else
            {
              v25 = 0;
            }
            v26 = (llvm **)&v25[8 * v21];
            *v26 = v64;
            v19 = v26 + 1;
            if (v17 != v20)
            {
              do
              {
                v27 = *--v17;
                *--v26 = v27;
              }
              while (v17 != v20);
              v17 = (llvm **)this[71];
            }
            this[71] = (int32x2_t)v26;
            this[72] = (int32x2_t)v19;
            this[73] = (int32x2_t)&v25[8 * v24];
            if (v17)
              operator delete(v17);
          }
          else
          {
            *v17 = v64;
            v19 = v17 + 1;
          }
          this[72] = (int32x2_t)v19;
        }
        else
        {
          sub_1C5C118DC((uint64_t)&this[3], (uint64_t *)&v64);
        }
      }
      v8 = *(int32x2_t *)(*(_QWORD *)&v8 + 8);
    }
    while (*(_QWORD *)&v8 != *(_QWORD *)&v9);
  }
  v28 = 0;
  v64 = (llvm *)v68;
  v65 = (llvm *)v68;
  v66 = 4;
  v67 = 0;
  v29 = this + 50;
  v30 = this[7].u32[0];
  do
  {
    if (v30)
    {
      do
      {
        v31 = *(llvm::AllocaInst **)(*(_QWORD *)&this[6] + 8 * v30 - 8);
        sub_1C5C16408(this + 3);
        v32 = llvm::SROAPass::runOnAlloca((llvm::SROAPass *)this, v31);
        v33 = llvm::SROAPass::deleteDeadInstructions((uint64_t)this, (llvm::SmallPtrSetImplBase *)&v64);
        if (HIDWORD(v66) != v67)
        {
          sub_1C5C1B42C((uint64_t)&this[3], (uint64_t)&v64);
          sub_1C5C1B42C((uint64_t)&this[50], (uint64_t)&v64);
          v34 = (uint64_t *)this[71];
          v35 = (uint64_t *)this[72];
          if (v34 != v35)
          {
            v36 = (uint64_t *)this[71];
            while (1)
            {
              v37 = *v36++;
              v38 = sub_1C477672C((uint64_t)&v64, v37);
              v39 = v65 == v64 ? (uint64_t *)((char *)&v66 + 4) : &v66;
              if (v38 != (_QWORD *)((char *)v65 + 8 * *(unsigned int *)v39))
                break;
              v34 = v36;
              if (v36 == v35)
              {
                v34 = v35;
                goto LABEL_53;
              }
            }
            if (v36 != v35)
            {
              v40 = v34 + 1;
              do
              {
                v41 = sub_1C477672C((uint64_t)&v64, *v40);
                if (v65 == v64)
                  v42 = (uint64_t *)((char *)&v66 + 4);
                else
                  v42 = &v66;
                if (v41 == (_QWORD *)((char *)v65 + 8 * *(unsigned int *)v42))
                  *v34++ = *v40;
                ++v40;
              }
              while (v40 != v35);
            }
          }
LABEL_53:
          if (v34 != (uint64_t *)this[72])
          {
            a2 = (int32x2_t **)this[72];
            this[72] = (int32x2_t)v34;
          }
          if (v65 != v64)
          {
            if (v66 >= 0x21 && 4 * (HIDWORD(v66) - v67) < v66)
            {
              free(v65);
              v43 = 1 << (33 - __clz(HIDWORD(v66) - v67 - 1));
              v44 = (HIDWORD(v66) - v67) > 0x10;
              HIDWORD(v66) = 0;
              v67 = 0;
              if (v44)
                v45 = v43;
              else
                v45 = 32;
              LODWORD(v66) = v45;
              v46 = (llvm *)malloc_type_malloc(8 * v45, 0x4065EBACuLL);
              if (!v46)
                llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
              v65 = v46;
              memset(v46, 255, 8 * v66);
              goto LABEL_57;
            }
            memset(v65, 255, 8 * v66);
          }
          HIDWORD(v66) = 0;
          v67 = 0;
        }
LABEL_57:
        v28 |= v33 | v32;
        v30 = this[7].u32[0];
      }
      while ((_DWORD)v30);
    }
    v47 = llvm::SROAPass::promoteAllocas((llvm::SROAPass *)this, (llvm::Function *)a2);
    MEMORY[0x1CAA32FB4](*(_QWORD *)&this[3], 8);
    v48 = this[52].u32[0];
    this[5].i32[0] = v48;
    if ((_DWORD)v48)
    {
      v49 = operator new(8 * v48, (std::align_val_t)8uLL);
      this[3] = (int32x2_t)v49;
      this[4] = this[51];
      memcpy(v49, *(const void **)&this[50], 8 * this[5].u32[0]);
    }
    else
    {
      this[3] = 0;
      this[4] = 0;
    }
    sub_1C4B03D34((uint64_t)&this[6], (uint64_t)&this[53]);
    v50 = this[51].i32[0];
    if (v50)
    {
      v51 = this[52].u32[0];
      if (v51 <= 4 * v50 || v51 < 0x41)
        goto LABEL_84;
      v52 = 1 << (33 - __clz(v50 - 1));
      if (v52 <= 64)
        v53 = 64;
      else
        v53 = v52;
    }
    else
    {
      if (!this[51].i32[1])
        goto LABEL_72;
      v51 = this[52].u32[0];
      if (v51 <= 0x40)
      {
LABEL_84:
        if (v51)
        {
          v56 = (_QWORD *)*v29;
          v57 = 8 * v51;
          do
          {
            *v56++ = -4096;
            v57 -= 8;
          }
          while (v57);
        }
        this[51] = 0;
        goto LABEL_72;
      }
      v53 = 0;
    }
    if (v53 == v51)
    {
      this[51] = 0;
      v54 = 8 * v51;
      v55 = (_QWORD *)this[50];
      do
      {
        *v55++ = -4096;
        v54 -= 8;
      }
      while (v54);
    }
    else
    {
      ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32FB4])(*v29, 8);
      if (v53)
      {
        v58 = (4 * v53 / 3u + 1) | ((unint64_t)(4 * v53 / 3u + 1) >> 1);
        v59 = v58 | (v58 >> 2) | ((v58 | (v58 >> 2)) >> 4);
        LODWORD(v59) = (((v59 | (v59 >> 8)) >> 16) | v59 | (v59 >> 8)) + 1;
        this[52].i32[0] = v59;
        v60 = operator new(8 * v59, (std::align_val_t)8uLL);
        this[50] = (int32x2_t)v60;
        this[51] = 0;
        v61 = this[52].u32[0];
        if ((_DWORD)v61)
        {
          v62 = 8 * v61;
          do
          {
            *v60++ = -4096;
            v62 -= 8;
          }
          while (v62);
        }
      }
      else
      {
        *v29 = 0;
        this[51] = 0;
        this[52].i32[0] = 0;
      }
    }
LABEL_72:
    v28 |= v47;
    this[54].i32[0] = 0;
    v30 = this[7].u32[0];
  }
  while ((_DWORD)v30);
  *(_QWORD *)a5 = a5 + 32;
  *(_QWORD *)(a5 + 8) = a5 + 32;
  *(_QWORD *)(a5 + 16) = 2;
  *(_DWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 48) = a5 + 80;
  *(_QWORD *)(a5 + 56) = a5 + 80;
  *(_QWORD *)(a5 + 64) = 2;
  *(_DWORD *)(a5 + 72) = 0;
  if ((v28 & 1) != 0)
    sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a5, (uint64_t)&llvm::CFGAnalyses::SetKey);
  else
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a5, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  if (v65 != v64)
    free(v65);
}

uint64_t sub_1C5C1B42C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9[2];

  v2 = result;
  v3 = *(uint64_t **)(result + 24);
  v4 = *(unsigned int *)(result + 32);
  v9[0] = a2;
  v9[1] = result;
  if ((_DWORD)v4)
  {
    v5 = &v3[v4];
    v6 = 8 * v4 - 8;
    while (1)
    {
      result = sub_1C5C23760(v9, v3);
      v7 = v3 + 1;
      if ((_DWORD)result)
        break;
      v6 -= 8;
      ++v3;
      if (v6 == -8)
      {
        v3 = v5;
        goto LABEL_10;
      }
    }
    for (; v6; v6 -= 8)
    {
      result = sub_1C5C23760(v9, v7);
      if ((result & 1) == 0)
        *v3++ = *v7;
      ++v7;
    }
  }
LABEL_10:
  v8 = *(_QWORD *)(v2 + 24);
  if (v3 != (uint64_t *)(v8 + 8 * *(unsigned int *)(v2 + 32)))
    *(_DWORD *)(v2 + 32) = ((unint64_t)v3 - v8) >> 3;
  return result;
}

void llvm::SROAPass::run(int32x2_t *a1@<X0>, int32x2_t **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  llvm::DominatorTree *v8;
  llvm::AssumptionCache *v9;

  v8 = (llvm::DominatorTree *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::DominatorTreeAnalysis::Key, (uint64_t)a2)+ 8);
  v9 = (llvm::AssumptionCache *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::AssumptionAnalysis::Key, (uint64_t)a2)+ 8);
  llvm::SROAPass::runImpl(a1, a2, v8, v9, a4);
}

uint64_t sub_1C5C1B568(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeAssumptionCacheTrackerPass(a1);
  llvm::initializeDominatorTreeWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Scalar Replacement Of Aggregates";
  *(_QWORD *)(v2 + 8) = 32;
  *(_QWORD *)(v2 + 16) = "sroa";
  *(_QWORD *)(v2 + 24) = 4;
  *(_QWORD *)(v2 + 32) = &unk_1ED822C68;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C632541C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_QWORD *sub_1C5C1B604(_QWORD *result)
{
  uint64_t *v1;
  char **v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t *v25;
  uint64_t *v26;

  v1 = result;
  v2 = (char **)(result + 4);
  v3 = *((unsigned int *)result + 10);
  if ((_DWORD)v3)
  {
    v4 = result[1];
    if (v4 >= result[11])
    {
      LODWORD(v11) = 0;
      *((_DWORD *)result + 10) = 0;
      result[11] = 0;
    }
    else
    {
      v5 = *v2;
      v6 = &(*v2)[8 * v3];
      v7 = 8 * v3 - 8;
      v8 = *v2;
      v9 = *v2;
      while (1)
      {
        v10 = *(_QWORD *)v9;
        v9 += 8;
        if (*(_QWORD *)(v10 + 8) <= v4)
          break;
        v7 -= 8;
        v8 = v9;
        if (v9 == v6)
          goto LABEL_16;
      }
      if (v9 == v6)
      {
        v6 = v8;
      }
      else
      {
        v12 = 8;
        v6 = v8;
        do
        {
          v13 = *(_QWORD *)&v8[v12];
          if (*(_QWORD *)(v13 + 8) > v4)
          {
            *(_QWORD *)v6 = v13;
            v6 += 8;
          }
          v12 += 8;
          v7 -= 8;
        }
        while (v7);
        v5 = *v2;
      }
LABEL_16:
      v11 = (unint64_t)(v6 - v5) >> 3;
      *((_DWORD *)result + 10) = v11;
    }
  }
  else
  {
    LODWORD(v11) = 0;
  }
  v14 = (uint64_t *)result[2];
  v15 = (uint64_t *)result[10];
  if (v14 != v15)
  {
    v16 = (uint64_t *)result[3];
    if (v14 == v16)
    {
      v21 = (uint64_t *)result[2];
      if (!(_DWORD)v11)
        goto LABEL_37;
    }
    else
    {
      v17 = result[2];
      do
      {
        if ((v14[2] & 4) != 0 && v14[1] > (unint64_t)v1[1])
        {
          if (v11 >= *((_DWORD *)v1 + 11))
          {
            result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2, (uint64_t)(v1 + 6), v11 + 1, 8);
            LODWORD(v11) = *((_DWORD *)v1 + 10);
          }
          *(_QWORD *)(v1[4] + 8 * v11) = v17;
          LODWORD(v11) = *((_DWORD *)v1 + 10) + 1;
          *((_DWORD *)v1 + 10) = v11;
          v18 = v14[1];
          if (v18 <= v1[11])
            v18 = v1[11];
          v1[11] = v18;
        }
        v14 += 3;
        v17 += 24;
      }
      while (v14 != v16);
      v14 = (uint64_t *)v1[3];
      v1[2] = (uint64_t)v14;
      v15 = (uint64_t *)v1[10];
      if (v14 == v15)
      {
        v22 = v1[11];
        *v1 = v1[1];
        v1[1] = v22;
        return result;
      }
      if (!(_DWORD)v11)
      {
        v21 = v14;
LABEL_37:
        v23 = v14[1];
        *v1 = *v21;
        v1[1] = v23;
        v24 = v14 + 3;
        v1[3] = (uint64_t)(v14 + 3);
        if ((v14[2] & 4) != 0)
        {
          while (v24 != v15 && *v24 < v23)
          {
            if ((v24[2] & 4) == 0)
            {
              v1[1] = *v24;
              return result;
            }
            if (v23 <= v24[1])
              v23 = v24[1];
            v1[1] = v23;
            v24 += 3;
            v1[3] = (uint64_t)v24;
          }
        }
        else if (v24 != v15)
        {
          v25 = (unint64_t *)(v14 + 4);
          do
          {
            if (*(v25 - 1) >= v23)
              break;
            if ((v25[1] & 4) == 0)
            {
              if (v23 <= *v25)
                v23 = *v25;
              v1[1] = v23;
            }
            v26 = (uint64_t *)(v25 + 2);
            v1[3] = (uint64_t)(v25 + 2);
            v25 += 3;
          }
          while (v26 != v15);
        }
        return result;
      }
      v19 = *v14;
      v20 = v1[1];
      if (*v14 != v20 && (v14[2] & 4) == 0)
      {
        *v1 = v20;
        v1[1] = v19;
        return result;
      }
    }
    v21 = v1 + 1;
    goto LABEL_37;
  }
  return result;
}

char **sub_1C5C1B88C(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v5 = 24 * v3;
    do
    {
      if (*(_DWORD *)&v2[v5 - 8] >= 0x41u)
      {
        v6 = *(_QWORD *)&v2[v5 - 16];
        if (v6)
        {
          v7 = v5;
          v8 = v2;
          MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
          v5 = v7;
          v2 = v8;
        }
      }
      v5 -= 24;
    }
    while (v5);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_1C5C1B928(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  if (*a1 > *a2)
    return 1;
  v3 = a1[2];
  if (((v3 >> 2) & 1) != ((a2[2] >> 2) & 1))
  {
    if ((v3 & 4) != 0)
      return (a2[2] & 4) == 0;
    return 0xFFFFFFFFLL;
  }
  v4 = a1[1];
  v5 = a2[1];
  if (v4 > v5)
    return 0xFFFFFFFFLL;
  return v5 > v4;
}

char *sub_1C5C1B990(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  __int128 v54;
  BOOL v55;
  uint64_t v56;
  char *v57;
  __int128 v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  __int128 v63;
  unint64_t v64;
  BOOL v65;
  char v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  __int128 v79;
  _QWORD *v80;
  char *v81;
  char *v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  unint64_t v86;
  __int128 v87;
  unint64_t v88;
  _QWORD *v89;
  __int128 v90;
  _QWORD *v91;
  __int128 v92;
  unint64_t v93;
  __int128 v94;
  char *v95;
  __int128 v96;
  uint64_t v97;
  char *v98;
  __int128 v99;
  char *v100;
  char *v101;
  char *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  if (!a5)
    return result;
  while (a4 > a7 && a5 > a7)
  {
    if (!a4)
      return result;
    v9 = 0;
    v10 = *(_QWORD *)a2;
    v11 = -a4;
    while (1)
    {
      v12 = *(_QWORD *)&result[v9];
      if (v10 < v12)
        break;
      if (v10 <= v12)
      {
        v13 = *((_QWORD *)a2 + 2);
        if (((v13 >> 2) & 1) == (result[v9 + 16] & 4) >> 2)
        {
          if (*((_QWORD *)a2 + 1) > *(_QWORD *)&result[v9 + 8])
            break;
        }
        else if ((v13 & 4) == 0)
        {
          break;
        }
      }
      v9 += 24;
      if (__CFADD__(v11++, 1))
        return result;
    }
    v15 = -v11;
    v16 = &result[v9];
    if (-v11 >= a5)
    {
      if (v11 == -1)
      {
        v95 = &result[v9];
        v112 = *((_QWORD *)v95 + 2);
        v107 = *(_OWORD *)v95;
        v96 = *(_OWORD *)a2;
        *((_QWORD *)v95 + 2) = *((_QWORD *)a2 + 2);
        *(_OWORD *)v95 = v96;
        *((_QWORD *)a2 + 2) = v112;
        *(_OWORD *)a2 = v107;
        return result;
      }
      if (v11 > 0)
        v15 = 1 - v11;
      v28 = v15 >> 1;
      v19 = &result[24 * (v15 >> 1) + v9];
      v18 = 0;
      if (a3 == a2)
      {
        v37 = a3;
LABEL_52:
        a2 = v19;
        goto LABEL_68;
      }
      v29 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3);
      v30 = *(_QWORD *)v19;
      v31 = &result[24 * v28 + v9];
      v32 = a2;
      while (2)
      {
        v33 = v29 >> 1;
        v34 = v18 + (v29 >> 1);
        v35 = *(_QWORD *)&a2[24 * v34];
        if (v35 >= v30)
        {
          if (v35 <= v30)
          {
            v36 = *(_QWORD *)&v32[24 * v33 + 16];
            if (((v36 >> 2) & 1) == (v31[16] & 4) >> 2)
            {
              if (*(_QWORD *)&v32[24 * v33 + 8] > *((_QWORD *)v31 + 1))
                goto LABEL_36;
            }
            else if ((v36 & 4) == 0)
            {
              goto LABEL_36;
            }
          }
        }
        else
        {
LABEL_36:
          v18 = v34 + 1;
          v33 = v29 + ~v33;
        }
        v32 = &a2[24 * v18];
        v29 = v33;
        if (!v33)
          goto LABEL_43;
        continue;
      }
    }
    if (a5 >= 0)
      v17 = a5;
    else
      v17 = a5 + 1;
    v18 = v17 >> 1;
    v19 = a2;
    if (v16 != a2)
    {
      v20 = 0xAAAAAAAAAAAAAAABLL * ((a2 - result - v9) >> 3);
      v21 = &a2[24 * v18];
      v22 = v21 + 16;
      v25 = *(_QWORD *)v21;
      v23 = v21 + 8;
      v24 = v25;
      v19 = &result[v9];
      do
      {
        v26 = v20 >> 1;
        v27 = &v19[24 * (v20 >> 1)];
        if (v24 >= *(_QWORD *)v27)
        {
          if (v24 > *(_QWORD *)v27)
            goto LABEL_27;
          if (((*v22 >> 2) & 1) != (v19[24 * v26 + 16] & 4) >> 2)
          {
            if ((*v22 & 4) == 0)
              goto LABEL_28;
LABEL_27:
            v19 = v27 + 24;
            v26 = v20 + ~v26;
            goto LABEL_28;
          }
          if (*v23 <= *(_QWORD *)&v19[24 * v26 + 8])
            goto LABEL_27;
        }
LABEL_28:
        v20 = v26;
      }
      while (v26);
    }
    v28 = 0xAAAAAAAAAAAAAAABLL * ((v19 - result - v9) >> 3);
LABEL_43:
    v37 = &a2[24 * v18];
    a5 -= v18;
    if (v19 != a2)
    {
      if (v18)
      {
        if (v19 + 24 == a2)
        {
          v109 = *((_QWORD *)v19 + 2);
          v104 = *(_OWORD *)v19;
          v100 = a3;
          v102 = v16;
          v43 = a2;
          v44 = a6;
          v45 = a7;
          v46 = a5;
          v47 = v28;
          memmove(v19, v43, 24 * v18);
          v28 = v47;
          a5 = v46;
          a3 = v100;
          v16 = v102;
          a7 = v45;
          a6 = v44;
          a2 = &v19[24 * v18];
          *(_OWORD *)a2 = v104;
          *((_QWORD *)a2 + 2) = v109;
        }
        else
        {
          v38 = a5;
          v39 = a3;
          if (v18 == 1)
          {
            a2 = v19 + 24;
            v108 = *((_QWORD *)v37 - 1);
            v103 = *(_OWORD *)(v37 - 24);
            if (v37 - 24 != v19)
            {
              v101 = v16;
              v40 = a6;
              v41 = a7;
              v42 = v28;
              memmove(v19 + 24, v19, v37 - 24 - v19);
              v28 = v42;
              v16 = v101;
              a7 = v41;
              a6 = v40;
            }
            *((_QWORD *)v19 + 2) = v108;
            *(_OWORD *)v19 = v103;
            v18 = 1;
            a3 = v39;
            a5 = v38;
          }
          else
          {
            v48 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v19) >> 3);
            v49 = v18;
            v50 = v48;
            if (v48 == v18)
            {
              v51 = 0;
              do
              {
                v52 = &a2[v51];
                v53 = &v19[v51];
                v110 = *(_QWORD *)&v19[v51 + 16];
                v105 = *(_OWORD *)&v19[v51];
                v54 = *(_OWORD *)&a2[v51];
                *((_QWORD *)v53 + 2) = *(_QWORD *)&a2[v51 + 16];
                *(_OWORD *)v53 = v54;
                *((_QWORD *)v52 + 2) = v110;
                *(_OWORD *)v52 = v105;
                if (&v19[v51 + 24] == a2)
                  break;
                v55 = 24 * v18 - 24 == v51;
                v51 += 24;
              }
              while (!v55);
            }
            else
            {
              do
              {
                v56 = v50;
                v50 = v49;
                v49 = v56 % v49;
              }
              while (v49);
              v57 = &v19[24 * v50];
              do
              {
                v58 = *(_OWORD *)(v57 - 24);
                v59 = *((_QWORD *)v57 - 1);
                v57 -= 24;
                v111 = v59;
                v106 = v58;
                v60 = &v57[8 * ((a2 - v19) >> 3)];
                v61 = v57;
                do
                {
                  v62 = v61;
                  v61 = v60;
                  v63 = *(_OWORD *)v60;
                  *((_QWORD *)v62 + 2) = *((_QWORD *)v60 + 2);
                  *(_OWORD *)v62 = v63;
                  v64 = 0xAAAAAAAAAAAAAAABLL * ((v37 - v60) >> 3);
                  v65 = __OFSUB__(v48, v64);
                  v67 = v48 - v64;
                  v66 = (v67 < 0) ^ v65;
                  v60 = &v19[24 * v67];
                  if (v66)
                    v60 = &v61[8 * ((a2 - v19) >> 3)];
                }
                while (v60 != v57);
                *((_QWORD *)v61 + 2) = v111;
                *(_OWORD *)v61 = v106;
              }
              while (v57 != v19);
              a2 = &v19[24 * v18];
            }
          }
        }
        goto LABEL_68;
      }
      goto LABEL_52;
    }
    v19 = a2;
    a2 += 24 * v18;
LABEL_68:
    a4 = -(v28 + v11);
    if (v18 + v28 >= a5 - v28 - v11)
    {
      v74 = v16;
      v75 = v28;
      v76 = -(v28 + v11);
      v72 = a6;
      v73 = a7;
      sub_1C5C1B990(a2, v37, a3, v76);
      result = v74;
      v37 = v19;
      a5 = v18;
      a4 = v75;
      a3 = a2;
    }
    else
    {
      v68 = v16;
      v69 = v19;
      v70 = a3;
      v71 = a5;
      v72 = a6;
      v73 = a7;
      sub_1C5C1B990(v68, v69, a2, v28);
      a5 = v71;
      a3 = v70;
      result = a2;
    }
    a2 = v37;
    a6 = v72;
    a7 = v73;
    if (!a5)
      return result;
  }
  if (a4 <= a5)
  {
    if (result == a2)
      return result;
    v88 = 0;
    do
    {
      v89 = &a6[v88 / 8];
      v90 = *(_OWORD *)&result[v88];
      v89[2] = *(_QWORD *)&result[v88 + 16];
      *(_OWORD *)v89 = v90;
      v88 += 24;
    }
    while (&result[v88] != a2);
    if (!v88)
      return result;
    v91 = a6;
    while (1)
    {
      if (a2 == a3)
        return (char *)memmove(result, v91, (char *)a6 - (char *)v91 + v88);
      if (*(_QWORD *)a2 >= *v91)
      {
        if (*(_QWORD *)a2 > *v91)
          goto LABEL_103;
        v93 = *((_QWORD *)a2 + 2);
        if (((v93 >> 2) & 1) == (v91[2] & 4) >> 2)
        {
          if (*((_QWORD *)a2 + 1) <= v91[1])
          {
LABEL_103:
            v94 = *(_OWORD *)v91;
            *((_QWORD *)result + 2) = v91[2];
            *(_OWORD *)result = v94;
            v91 += 3;
            goto LABEL_104;
          }
        }
        else if ((v93 & 4) != 0)
        {
          goto LABEL_103;
        }
      }
      v92 = *(_OWORD *)a2;
      *((_QWORD *)result + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)result = v92;
      a2 += 24;
LABEL_104:
      result += 24;
      if (&a6[v88 / 8] == v91)
        return result;
    }
  }
  if (a2 == a3)
    return result;
  v77 = 0;
  do
  {
    v78 = &a6[v77 / 8];
    v79 = *(_OWORD *)&a2[v77];
    v78[2] = *(_QWORD *)&a2[v77 + 16];
    *(_OWORD *)v78 = v79;
    v77 += 24;
  }
  while (&a2[v77] != a3);
  if (!v77)
    return result;
  v80 = &a6[v77 / 8];
  v81 = a3 - 24;
  while (a2 != result)
  {
    v82 = a2 - 24;
    v83 = *((_QWORD *)a2 - 3);
    v84 = *(v80 - 3);
    if (v84 >= v83)
    {
      if (v84 > v83)
        goto LABEL_87;
      v86 = *(v80 - 1);
      if (((v86 >> 2) & 1) != (*(a2 - 8) & 4) >> 2)
      {
        v85 = a2 - 24;
        if ((v86 & 4) == 0)
          goto LABEL_88;
LABEL_87:
        v82 = (char *)(v80 - 3);
        v85 = a2;
        v80 -= 3;
        goto LABEL_88;
      }
      v85 = a2 - 24;
      if (*(v80 - 2) <= *((_QWORD *)a2 - 2))
        goto LABEL_87;
    }
    else
    {
      v85 = a2 - 24;
    }
LABEL_88:
    v87 = *(_OWORD *)v82;
    *((_QWORD *)v81 + 2) = *((_QWORD *)v82 + 2);
    *(_OWORD *)v81 = v87;
    v81 -= 24;
    a2 = v85;
    if (v80 == a6)
      return result;
  }
  if (v80 != a6)
  {
    v97 = 0;
    do
    {
      v98 = &v81[v97 * 8];
      v99 = *(_OWORD *)&v80[v97 - 3];
      *((_QWORD *)v98 + 2) = v80[v97 - 1];
      *(_OWORD *)v98 = v99;
      v97 -= 3;
    }
    while (&v80[v97] != a6);
  }
  return result;
}

uint64_t sub_1C5C1C0EC(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1C5C1C11C(llvm::DataLayout *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t *v16;
  llvm::StructLayout *StructLayout;
  int v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;

  do
  {
    v4 = a2;
    if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
      break;
    v5 = *(_DWORD *)(a2 + 8);
    v6 = v5 > 0x15;
    v7 = (1 << v5) & 0x20AC7F;
    if (!v6 && v7 != 0)
      break;
    sub_1C4768AD0((uint64_t)a1, a2);
    v10 = v9;
    llvm::DataLayout::getAlignment((uint64_t)a1, v4);
    v12 = v11;
    sub_1C4768AD0((uint64_t)a1, v4);
    v14 = v13;
    v15 = *(unsigned __int8 *)(v4 + 8);
    if (v15 == 16)
    {
      StructLayout = llvm::DataLayout::getStructLayout(a1, (llvm::StructType *)v4);
      v18 = *((_DWORD *)StructLayout + 3);
      v19 = v18 & 0x7FFFFFFF;
      if ((v18 & 0x7FFFFFFF) != 0)
      {
        v20 = (char *)StructLayout + 16;
        do
        {
          v21 = v19 >> 1;
          v22 = &v20[8 * (v19 >> 1)];
          v24 = *(_QWORD *)v22;
          v23 = v22 + 8;
          v19 += ~(v19 >> 1);
          if (v24)
            v19 = v21;
          else
            v20 = v23;
        }
        while (v19);
      }
      else
      {
        v20 = (char *)StructLayout + 16;
      }
      v16 = (uint64_t *)(*(_QWORD *)(v4 + 16) + ((v20 - ((char *)StructLayout + 16) - 8) & 0x7FFFFFFF8));
    }
    else
    {
      if (v15 != 17)
        return v4;
      v16 = (uint64_t *)(v4 + 24);
    }
    v25 = ((1 << v12) + ((unint64_t)(v10 + 7) >> 3) - 1) & -(1 << v12);
    a2 = *v16;
    sub_1C4768AD0((uint64_t)a1, *v16);
    v27 = (unint64_t)(v26 + 7) >> 3;
    llvm::DataLayout::getAlignment((uint64_t)a1, a2);
    if (v25 > (((1 << v28) + v27 - 1) & -(1 << v28)))
      break;
    sub_1C4768AD0((uint64_t)a1, a2);
  }
  while (v14 <= v29);
  return v4;
}

uint64_t sub_1C5C1C2C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t result;
  unsigned int v11;
  uint64_t *v12;
  unsigned int v13;
  int v14;
  unsigned __int32 v15;
  __int32 *v17;
  size_t v18;
  __int32 *v19;
  __int32 *v20;
  unsigned __int32 v21;
  __int32 *v22;
  size_t v23;
  __int32 *v24;
  __int32 *v25;
  int PointerSize;

  if (a2 == a3)
    return 1;
  v3 = a3;
  v4 = a2;
  if (*(_BYTE *)(a2 + 8) == 13 && *(_BYTE *)(a3 + 8) == 13)
    return 0;
  sub_1C4768AD0(a1, a3);
  v7 = v6;
  sub_1C4768AD0(a1, v4);
  if (v7 != v8)
    return 0;
  v9 = *(_DWORD *)(v3 + 8);
  if ((v9 & 0xFE) == 0x12
    || (result = 0, *(_DWORD *)(v3 + 8) <= 0x15u) && ((1 << v9) & 0x20AC7F) != 0)
  {
    if ((*(_DWORD *)(v4 + 8) & 0xFE) == 0x12)
    {
      v4 = **(_QWORD **)(v4 + 16);
      goto LABEL_13;
    }
    result = 0;
    v11 = *(_DWORD *)(v4 + 8);
    if (v11 <= 0x15 && ((1 << v11) & 0x20AC7F) != 0)
    {
LABEL_13:
      if ((v9 & 0xFE) == 0x12)
      {
        v12 = *(uint64_t **)(v3 + 16);
        v3 = *v12;
        v9 = *(_DWORD *)(*v12 + 8);
      }
      v13 = *(_DWORD *)(v4 + 8);
      if (v9 == 15)
      {
        v14 = *(_DWORD *)(v4 + 8);
        if (v14 == 15)
        {
          if ((*(_DWORD *)(v4 + 8) & 0xFE) == 0x12)
            v13 = *(_DWORD *)(**(_QWORD **)(v4 + 16) + 8);
          v15 = v13 >> 8;
          if ((v9 & 0xFE) == 0x12)
            v9 = *(_DWORD *)(**(_QWORD **)(v3 + 16) + 8);
          if (v15 == v9 >> 8)
            return 1;
          v17 = *(__int32 **)(a1 + 384);
          v18 = *(unsigned int *)(a1 + 392);
          v19 = wmemchr(v17, v15, v18);
          if (v19)
            v20 = v19;
          else
            v20 = &v17[v18];
          if (v18 == v20 - v17)
          {
            v21 = v9 >> 8;
            v22 = *(__int32 **)(a1 + 384);
            v23 = *(unsigned int *)(a1 + 392);
            v24 = wmemchr(v22, v21, v23);
            v25 = v24 ? v24 : &v22[v23];
            if (v23 == v25 - v22)
            {
              PointerSize = llvm::DataLayout::getPointerSize((llvm::DataLayout *)a1, v15);
              return PointerSize == llvm::DataLayout::getPointerSize((llvm::DataLayout *)a1, v21);
            }
          }
          return 0;
        }
      }
      else
      {
        if (*(_DWORD *)(v4 + 8) == 21)
          return 0;
        if (*(_DWORD *)(v4 + 8) != 15)
          return v9 != 21;
        v14 = *(_DWORD *)(v4 + 8);
      }
      if (v14 == 13)
        return !sub_1C4DEB33C(a1, v3);
      if (!sub_1C4DEB33C(a1, v4))
        return *(_BYTE *)(v3 + 8) == 13;
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C5C1C518(unint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v20;
  unsigned int v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm::APInt *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;

  sub_1C4768AD0(a4, a3);
  v11 = a1[1] - a2;
  if (v11 > (unint64_t)(v10 + 7) >> 3)
    return 0;
  v13 = (unint64_t)(v10 + 7) >> 3;
  v14 = *a1;
  v15 = a1[2] & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)(v15 + 24);
  v17 = *(unsigned __int8 *)(v16 + 16);
  if (v16 && v17 == 60)
  {
    if ((*(_WORD *)(v16 + 18) & 1) != 0)
      return 0;
    sub_1C4768AD0(a4, *(_QWORD *)v16);
    if (v13 < (unint64_t)(v18 + 7) >> 3 || *a1 < a2)
      return 0;
    v20 = *(_QWORD *)v16;
    v21 = *(_DWORD *)(*(_QWORD *)v16 + 8);
    if (v11 == v13 && (*(_DWORD *)(*(_QWORD *)v16 + 8) & 0xFE) != 0x12 && v14 == a2)
    {
      *a5 = 1;
      v21 = *(_DWORD *)(v20 + 8);
    }
    if (v21 == 13)
    {
      v23 = v21 >> 8;
      v24 = a4;
      v25 = v20;
      goto LABEL_38;
    }
    result = 0;
    if (v14 == a2 && v11 == v13)
    {
      result = sub_1C5C1C2C0(a4, a3, v20);
      if ((_DWORD)result)
        return 1;
    }
    return result;
  }
  if (!v16 || v17 != 61)
  {
    if (!sub_1C4DE85D0(*(_QWORD *)(v15 + 24)))
    {
      v36 = *(_QWORD *)(v15 + 24);
      if (*(_BYTE *)(v36 + 16) != 84)
        return 0;
      v37 = *(_QWORD *)(v36 - 32);
      if (!v37
        || *(_BYTE *)(v37 + 16)
        || *(_QWORD *)(v37 + 24) != *(_QWORD *)(v36 + 72)
        || (*(_BYTE *)(v37 + 33) & 0x20) == 0)
      {
        return 0;
      }
      if (llvm::Instruction::isLifetimeStartOrEnd(*(llvm::Instruction **)(v15 + 24)))
        return 1;
      if (sub_1C4D9F8B4(v36))
        return 1;
      result = sub_1C509DDB0(v36);
      if ((_DWORD)result)
        return 1;
      return result;
    }
    v32 = v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF);
    v33 = *(_QWORD *)(v32 + 96);
    v34 = (llvm::APInt *)(v33 + 24);
    v35 = *(_DWORD *)(v33 + 32);
    if (v35 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v34) != v35)
        return 0;
    }
    else if (*(_QWORD *)v34)
    {
      return 0;
    }
    return *(unsigned __int8 *)(*(_QWORD *)(v32 + 64) + 16) <= 0x14u && (a1[2] & 4) != 0;
  }
  if ((*(_WORD *)(v16 + 18) & 1) != 0)
    return 0;
  v26 = **(_QWORD **)(v16 - 64);
  sub_1C4768AD0(a4, v26);
  if (v13 < (unint64_t)(v27 + 7) >> 3 || *a1 < a2)
    return 0;
  v29 = *(_DWORD *)(v26 + 8);
  if (v11 == v13 && (*(_DWORD *)(v26 + 8) & 0xFE) != 0x12 && v14 == a2)
  {
    *a5 = 1;
    v29 = *(_DWORD *)(v26 + 8);
  }
  if (v29 == 13)
  {
    v23 = v29 >> 8;
    v24 = a4;
    v25 = v26;
LABEL_38:
    sub_1C4768AD0(v24, v25);
    return ((v31 + 7) & 0xFFFFFFFFFFFFFFF8) <= v23;
  }
  result = 0;
  if (v14 == a2 && v11 == v13)
    return (sub_1C5C1C2C0(a4, v26, a3) & 1) != 0;
  return result;
}

uint64_t *sub_1C5C1C7C8(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  BOOL v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t *v86;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v37 = *(a2 - 1);
        v38 = *v8;
        if (*(_DWORD *)(v37 + 32) < *(_DWORD *)(*v8 + 32))
        {
          *v8 = v37;
          *(a2 - 1) = v38;
        }
        return result;
      case 3:
        return sub_1C5C1CEB0(v8, v8 + 1, a2 - 1);
      case 4:
        return sub_1C5C1D120(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        v39 = v8 + 1;
        v40 = v8 + 2;
        v41 = v8 + 3;
        result = sub_1C5C1D120(v8, v8 + 1, v8 + 2, v8 + 3);
        v42 = *(a2 - 1);
        v43 = v8[3];
        if (*(_DWORD *)(v42 + 32) < *(_DWORD *)(v43 + 32))
        {
          *v41 = v42;
          *(a2 - 1) = v43;
          v44 = *v41;
          v45 = *v40;
          v46 = *(_DWORD *)(*v41 + 32);
          if (v46 < *(_DWORD *)(*v40 + 32))
          {
            *v40 = v44;
            *v41 = v45;
            v47 = *v39;
            if (v46 < *(_DWORD *)(*v39 + 32))
            {
              v8[1] = v44;
              v8[2] = v47;
              v48 = *v8;
              if (v46 < *(_DWORD *)(*v8 + 32))
              {
                *v8 = v44;
                v8[1] = v48;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v49 = v8 + 1;
          v51 = v8 == a2 || v49 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v51)
            {
              v52 = 8;
              v53 = v8;
              do
              {
                v55 = *v53;
                v54 = v53[1];
                v53 = v49;
                v56 = *(_DWORD *)(v54 + 32);
                if (v56 < *(_DWORD *)(v55 + 32))
                {
                  v57 = v52;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v57) = v55;
                    v58 = v57 - 8;
                    if (v57 == 8)
                      break;
                    v55 = *(uint64_t *)((char *)v8 + v57 - 16);
                    v57 -= 8;
                    if (v56 >= *(_DWORD *)(v55 + 32))
                    {
                      v59 = (uint64_t *)((char *)v8 + v58);
                      goto LABEL_80;
                    }
                  }
                  v59 = v8;
LABEL_80:
                  *v59 = v54;
                }
                v49 = v53 + 1;
                v52 += 8;
              }
              while (v53 + 1 != a2);
            }
          }
          else if (!v51)
          {
            do
            {
              v89 = *v7;
              v88 = v7[1];
              v7 = v49;
              v90 = *(_DWORD *)(v88 + 32);
              if (v90 < *(_DWORD *)(v89 + 32))
              {
                do
                {
                  *v49 = v89;
                  v89 = *(v49 - 2);
                  --v49;
                }
                while (v90 < *(_DWORD *)(v89 + 32));
                *v49 = v88;
              }
              v49 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v60 = (unint64_t)(v10 - 2) >> 1;
            v61 = v60;
            do
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &v8[v63];
                v65 = *v64;
                if (2 * v62 + 2 < v10 && *(_DWORD *)(v65 + 32) < *(_DWORD *)(v64[1] + 32))
                {
                  v65 = v64[1];
                  ++v64;
                  v63 = 2 * v62 + 2;
                }
                result = &v8[v62];
                v66 = *result;
                v67 = *(_DWORD *)(*result + 32);
                if (*(_DWORD *)(v65 + 32) >= v67)
                {
                  do
                  {
                    v68 = v64;
                    *result = v65;
                    if (v60 < v63)
                      break;
                    v69 = (2 * v63) | 1;
                    v64 = &v8[v69];
                    v70 = 2 * v63 + 2;
                    v65 = *v64;
                    if (v70 < v10 && *(_DWORD *)(v65 + 32) < *(_DWORD *)(v64[1] + 32))
                    {
                      v65 = v64[1];
                      ++v64;
                      v69 = v70;
                    }
                    result = v68;
                    v63 = v69;
                  }
                  while (*(_DWORD *)(v65 + 32) >= v67);
                  *v68 = v66;
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            do
            {
              v71 = 0;
              v72 = *v8;
              v73 = v8;
              do
              {
                v74 = &v73[v71];
                v77 = v74[1];
                v75 = v74 + 1;
                v76 = v77;
                v78 = (2 * v71) | 1;
                v79 = 2 * v71 + 2;
                if (v79 < v10)
                {
                  result = (uint64_t *)*(unsigned int *)(v76 + 32);
                  if (result < *(_DWORD *)(v75[1] + 32))
                  {
                    v76 = v75[1];
                    ++v75;
                    v78 = v79;
                  }
                }
                *v73 = v76;
                v73 = v75;
                v71 = v78;
              }
              while (v78 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v75 == --a2)
              {
                *v75 = v72;
              }
              else
              {
                *v75 = *a2;
                *a2 = v72;
                v80 = (char *)v75 - (char *)v8 + 8;
                if (v80 >= 9)
                {
                  v81 = (((unint64_t)v80 >> 3) - 2) >> 1;
                  v82 = &v8[v81];
                  v83 = *v82;
                  v84 = *v75;
                  v85 = *(_DWORD *)(*v75 + 32);
                  if (*(_DWORD *)(*v82 + 32) < v85)
                  {
                    do
                    {
                      v86 = v82;
                      *v75 = v83;
                      if (!v81)
                        break;
                      v81 = (v81 - 1) >> 1;
                      v82 = &v8[v81];
                      v83 = *v82;
                      v75 = v86;
                    }
                    while (*(_DWORD *)(*v82 + 32) < v85);
                    *v86 = v84;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = sub_1C5C1CEB0(&v7[(unint64_t)v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1C5C1CEB0(v7, &v7[(unint64_t)v10 >> 1], a2 - 1);
          sub_1C5C1CEB0(v7 + 1, v12 - 1, a2 - 2);
          sub_1C5C1CEB0(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = sub_1C5C1CEB0(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(_DWORD *)(v14 + 32);
          if (*(_DWORD *)(*(v7 - 1) + 32) < v15)
            goto LABEL_12;
          if (v15 >= *(_DWORD *)(*(a2 - 1) + 32))
          {
            v29 = v7 + 1;
            do
            {
              v8 = v29;
              if (v29 >= a2)
                break;
              ++v29;
            }
            while (v15 >= *(_DWORD *)(*v8 + 32));
          }
          else
          {
            v8 = v7;
            do
            {
              v28 = v8[1];
              ++v8;
            }
            while (v15 >= *(_DWORD *)(v28 + 32));
          }
          v30 = a2;
          if (v8 < a2)
          {
            v30 = a2;
            do
              v31 = *--v30;
            while (v15 < *(_DWORD *)(v31 + 32));
          }
          if (v8 < v30)
          {
            v32 = *v8;
            v33 = *v30;
            do
            {
              *v8 = v33;
              *v30 = v32;
              do
              {
                v34 = v8[1];
                ++v8;
                v32 = v34;
              }
              while (v15 >= *(_DWORD *)(v34 + 32));
              do
              {
                v35 = *--v30;
                v33 = v35;
              }
              while (v15 < *(_DWORD *)(v35 + 32));
            }
            while (v8 < v30);
          }
          v36 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v36;
          a4 = 0;
          *v36 = v14;
          continue;
        }
        v15 = *(_DWORD *)(v14 + 32);
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*(_DWORD *)(v17 + 32) < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*(_DWORD *)(v21 + 32) >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*(_DWORD *)(v20 + 32) >= v15);
        }
        if (v18 >= v19)
        {
          v8 = &v7[v16];
        }
        else
        {
          v22 = *v19;
          v8 = &v7[v16];
          v23 = v19;
          do
          {
            *v8 = v22;
            *v23 = v17;
            do
            {
              v24 = v8[1];
              ++v8;
              v17 = v24;
            }
            while (*(_DWORD *)(v24 + 32) < v15);
            do
            {
              v25 = *--v23;
              v22 = v25;
            }
            while (*(_DWORD *)(v25 + 32) >= v15);
          }
          while (v8 < v23);
        }
        v26 = v8 - 1;
        if (v8 - 1 != v7)
          *v7 = *v26;
        *v26 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = (uint64_t *)sub_1C5C1C7C8(v7, v8 - 1, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v27 = sub_1C5C1CF38(v7, v8 - 1);
        result = (uint64_t *)sub_1C5C1CF38(v8, a2);
        if (!(_DWORD)result)
        {
          if (v27)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 1;
        if (!v27)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1C5C1CEB0(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *result;
  v5 = *(_DWORD *)(*a2 + 32);
  v6 = *(_DWORD *)(*result + 32);
  v7 = *a3;
  v8 = *(_DWORD *)(*a3 + 32);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      v9 = *result;
      if (*(_DWORD *)(*a2 + 32) < *(_DWORD *)(*result + 32))
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *result = v3;
      *a2 = v4;
      if (*(_DWORD *)(*a3 + 32) >= v6)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1C5C1CF38(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(_DWORD *)(v6 + 32) < *(_DWORD *)(*a1 + 32))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1C5C1CEB0(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C5C1D120(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      sub_1C5C1D120(a1, a1 + 1, a1 + 2, a1 + 3);
      v21 = *(a2 - 1);
      v22 = a1[3];
      if (*(_DWORD *)(v21 + 32) < *(_DWORD *)(v22 + 32))
      {
        *v20 = v21;
        *(a2 - 1) = v22;
        v23 = *v20;
        v24 = *v19;
        v25 = *(_DWORD *)(*v20 + 32);
        if (v25 < *(_DWORD *)(*v19 + 32))
        {
          *v19 = v23;
          *v20 = v24;
          v26 = *v18;
          if (v25 < *(_DWORD *)(*v18 + 32))
          {
            a1[1] = v23;
            a1[2] = v26;
            v27 = *a1;
            if (v25 < *(_DWORD *)(*a1 + 32))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C5C1CEB0(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = *(_DWORD *)(*v9 + 32);
    if (v14 < *(_DWORD *)(*v8 + 32))
    {
      v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_DWORD *)(v13 + 32))
        {
          v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t *sub_1C5C1D120(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1C5C1CEB0(a1, a2, a3);
  v9 = *a3;
  if (*(_DWORD *)(*a4 + 32) < *(_DWORD *)(*a3 + 32))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*(_DWORD *)(*a3 + 32) < *(_DWORD *)(*a2 + 32))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*(_DWORD *)(*a2 + 32) < *(_DWORD *)(*a1 + 32))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t sub_1C5C1D1B4(uint64_t *a1, _QWORD *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t result;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  llvm::APInt *v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  int v37;
  int v38;

  v5 = *a1;
  if (*a2 >= (unint64_t)*a1)
    v6 = *a2 - *a1;
  else
    v6 = 0;
  v7 = v6 / a4;
  if (v6 / a4 * a4 != v6)
    return 0;
  v9 = *(unsigned int *)(a3 + 32);
  if (v7 >= v9)
    return 0;
  v10 = a4;
  result = 0;
  v14 = a2[1];
  if (a1[1] < v14)
    v14 = a1[1];
  v15 = v14 - v5;
  v16 = v15 / a4;
  if (v15 / a4 > v9 || v16 * a4 != v15)
    return result;
  v18 = v16 - v7;
  v19 = *(_QWORD *)(a3 + 24);
  if (v16 - v7 != 1)
  {
    llvm::FixedVectorType::get(*(llvm::FixedVectorType **)(a3 + 24), (llvm::Type *)(v16 - v7));
    v19 = v20;
  }
  v21 = *(_QWORD **)a3;
  v22 = 8 * v18 * v10;
  v38 = v22;
  if (v22 > 63)
  {
    if (v22 == 64)
    {
      v23 = (_QWORD *)(*v21 + 1984);
      goto LABEL_19;
    }
    if (v22 == 128)
    {
      v23 = (_QWORD *)(*v21 + 2008);
      goto LABEL_19;
    }
LABEL_58:
    v35 = sub_1C5270984(*v21 + 2168, &v38);
    v23 = (_QWORD *)*((_QWORD *)v35 + 1);
    if (!v23)
    {
      v36 = v35;
      v23 = (_QWORD *)sub_1C484358C(*v21 + 2040, 24, 3);
      v37 = v38;
      *v23 = v21;
      v23[2] = 0;
      v23[1] = (v37 << 8) | 0xDu;
      *((_QWORD *)v36 + 1) = v23;
    }
    goto LABEL_19;
  }
  if (v22 == 32)
  {
    v23 = (_QWORD *)(*v21 + 1960);
    goto LABEL_19;
  }
  if (v22 == 16)
  {
    v23 = (_QWORD *)(*v21 + 1936);
    goto LABEL_19;
  }
  if (v22 != 8)
    goto LABEL_58;
  v23 = (_QWORD *)(*v21 + 1912);
LABEL_19:
  v24 = a2[2] & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_QWORD *)(v24 + 24);
  v26 = sub_1C4DE85D0(v25);
  if (v25 && v26)
  {
    v27 = *(_QWORD *)(v25 - 32 * (*(_DWORD *)(v25 + 20) & 0x7FFFFFF) + 96);
    v28 = (llvm::APInt *)(v27 + 24);
    v29 = *(_DWORD *)(v27 + 32);
    if (v29 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v28) == v29)
        return (a2[2] & 4) != 0;
    }
    else if (!*(_QWORD *)v28)
    {
      return (a2[2] & 4) != 0;
    }
    return 0;
  }
  v30 = *(_QWORD *)(v24 + 24);
  v31 = *(unsigned __int8 *)(v30 + 16);
  if (v31 == 60)
  {
    if ((*(_WORD *)(v30 + 18) & 1) == 0)
    {
      v33 = *(_QWORD *)v30;
      if (*(_BYTE *)(*(_QWORD *)v30 + 8) != 16)
      {
        if ((unint64_t)*a1 > *a2 || (unint64_t)a1[1] < a2[1])
          v33 = (uint64_t)v23;
        if ((sub_1C5C1C2C0(a5, v19, v33) & 1) != 0)
          return 1;
      }
    }
    return 0;
  }
  if (v31 != 61)
  {
    if (v31 == 84)
    {
      v32 = *(_QWORD *)(v30 - 32);
      if (v32)
      {
        if (!*(_BYTE *)(v32 + 16)
          && *(_QWORD *)(v32 + 24) == *(_QWORD *)(v30 + 72)
          && (*(_BYTE *)(v32 + 33) & 0x20) != 0
          && (llvm::Instruction::isLifetimeStartOrEnd(*(llvm::Instruction **)(v24 + 24))
           || sub_1C4D9F8B4(v30)
           || sub_1C509DDB0(v30)))
        {
          return 1;
        }
      }
    }
    return 0;
  }
  if ((*(_WORD *)(v30 + 18) & 1) != 0)
    return 0;
  v34 = **(_QWORD **)(v30 - 64);
  if (*(_BYTE *)(v34 + 8) == 16)
    return 0;
  if ((unint64_t)*a1 > *a2 || (unint64_t)a1[1] < a2[1])
    v34 = (uint64_t)v23;
  result = sub_1C5C1C2C0(a5, v34, v19);
  if ((_DWORD)result)
    return 1;
  return result;
}

void sub_1C5C1D4C4(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5C1D504(uint64_t a1, llvm::Value *a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  unsigned int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::ValueSymbolTable *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v7 = *((unsigned __int8 *)a3 + 32);
  if (v7 > 1)
  {
    v9 = a3[1];
    if (*((_BYTE *)a3 + 33) == 1)
    {
      v10 = (uint64_t *)*a3;
    }
    else
    {
      LOBYTE(v7) = 2;
      v10 = a3;
    }
    *(_QWORD *)&v14 = a1 + 8;
    *(_QWORD *)&v15 = v10;
    *((_QWORD *)&v15 + 1) = v9;
    LOBYTE(v16) = 4;
    BYTE1(v16) = v7;
    if (!a4)
      goto LABEL_10;
  }
  else
  {
    v8 = *((_OWORD *)a3 + 1);
    v14 = *(_OWORD *)a3;
    v15 = v8;
    v16 = a3[4];
    if (!a4)
      goto LABEL_10;
  }
  *((_QWORD *)a2 + 5) = a4;
  *(_WORD *)(a4 + 18) &= ~0x8000u;
  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
  {
    v12 = *(_QWORD *)(a4 + 56);
    if (v12)
    {
      v13 = *(llvm::ValueSymbolTable **)(v12 + 104);
      if (v13)
        llvm::ValueSymbolTable::reinsertValue(v13, a2);
    }
  }
  v11 = *a5;
  *((_QWORD *)a2 + 3) = *a5;
  *((_QWORD *)a2 + 4) = a5;
  *(_QWORD *)(v11 + 8) = (char *)a2 + 24;
  *a5 = (uint64_t)a2 + 24;
LABEL_10:
  llvm::Value::setName((uint64_t ***)a2, (uint64_t)&v14);
}

unsigned __int8 *sub_1C5C1D5D8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  const llvm::APInt *v5;
  uint64_t v6;
  llvm::DataLayout *v7;
  unsigned int IndexTypeSizeInBits;
  unint64_t v9;
  unsigned __int8 *v10;
  _BYTE v12[32];
  __int16 v13;
  unint64_t v14;
  unsigned int v15;

  v5 = (const llvm::APInt *)a1[4];
  v6 = a1[14] - a1[5];
  v7 = (llvm::DataLayout *)*a1;
  IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(*a1, a3);
  v15 = IndexTypeSizeInBits;
  if (IndexTypeSizeInBits > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v14, v6, 0);
  }
  else
  {
    v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)IndexTypeSizeInBits;
    if (!IndexTypeSizeInBits)
      v9 = 0;
    v14 = v9 & v6;
  }
  v13 = 257;
  v10 = sub_1C5C10A54(a2, v7, v5, (void **)&v14, a3, (uint64_t)v12);
  if (v15 >= 0x41 && v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
  return v10;
}

unsigned __int8 *sub_1C5C1D6BC(llvm::DataLayout *a1, llvm::DataLayout *this, unsigned __int8 *a3, llvm::Type *a4)
{
  unsigned __int8 *v4;
  uint64_t v6;
  unsigned int v8;
  int v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  int v23;
  char v24;
  uint64_t v25;
  _BYTE v27[32];
  __int16 v28;
  _BYTE v29[32];
  __int16 v30;

  v4 = a3;
  v6 = *(_QWORD *)a3;
  if (*(llvm::Type **)a3 != a4)
  {
    v8 = *(_DWORD *)(v6 + 8);
    v9 = v8 & 0xFE;
    v10 = v8;
    if (v9 == 18)
      v10 = *(_BYTE *)(**(_QWORD **)(v6 + 16) + 8);
    if (v10 == 13)
    {
      v11 = (*((_DWORD *)a4 + 2) & 0xFE) == 0x12
          ? *(unsigned __int8 *)(**((_QWORD **)a4 + 2) + 8)
          : *((_DWORD *)a4 + 2);
      if (v11 == 15)
      {
        llvm::DataLayout::getIntPtrType(a1, a4);
        v13 = v12;
        v30 = 257;
        v14 = (uint64_t *)this;
        v15 = 49;
LABEL_31:
        a3 = sub_1C4773E38(v14, v15, v4, v13, (uint64_t)v29);
        v28 = 257;
        v19 = v27;
        v20 = (uint64_t *)this;
        v21 = 48;
        return sub_1C4773E38(v20, v21, a3, (uint64_t)a4, (uint64_t)v19);
      }
    }
    v16 = *(_DWORD *)(v6 + 8);
    if (v9 == 18)
      LOBYTE(v16) = *(_BYTE *)(**(_QWORD **)(v6 + 16) + 8);
    if (v16 == 15
      && ((*((_DWORD *)a4 + 2) & 0xFE) != 0x12
        ? (v17 = *((_DWORD *)a4 + 2))
        : (v17 = *(unsigned __int8 *)(**((_QWORD **)a4 + 2) + 8)),
          v17 == 13))
    {
      llvm::DataLayout::getIntPtrType(a1, (llvm::Type *)v6);
      v30 = 257;
      a3 = sub_1C4773E38((uint64_t *)this, 47, v4, v18, (uint64_t)v29);
      v28 = 257;
      v19 = v27;
      v20 = (uint64_t *)this;
      v21 = 49;
    }
    else
    {
      v22 = *(_DWORD *)(v6 + 8);
      if (v9 == 18)
        LOBYTE(v22) = *(_BYTE *)(**(_QWORD **)(v6 + 16) + 8);
      if (v22 == 15)
      {
        v23 = *((_DWORD *)a4 + 2);
        v24 = v23;
        if ((v23 & 0xFE) == 0x12)
          v24 = *(_BYTE *)(**((_QWORD **)a4 + 2) + 8);
        if (v24 == 15)
        {
          if (v9 == 18)
            v8 = *(_DWORD *)(**(_QWORD **)(v6 + 16) + 8);
          if ((v23 & 0xFE) == 0x12)
            v23 = *(_DWORD *)(**((_QWORD **)a4 + 2) + 8);
          if ((v23 ^ v8) >= 0x100)
          {
            llvm::DataLayout::getIntPtrType(a1, (llvm::Type *)v6);
            v13 = v25;
            v30 = 257;
            v14 = (uint64_t *)this;
            v15 = 47;
            goto LABEL_31;
          }
        }
      }
      v30 = 257;
      v19 = v29;
      v20 = (uint64_t *)this;
      v21 = 49;
    }
    return sub_1C4773E38(v20, v21, a3, (uint64_t)a4, (uint64_t)v19);
  }
  return v4;
}

llvm::ConstantInt **sub_1C5C1D8EC(_BYTE *a1, uint64_t *a2, llvm::ConstantInt ***a3, unsigned __int8 *a4, unint64_t a5, uint64_t a6)
{
  llvm::ConstantInt **v8;
  llvm::ConstantInt **v12;
  llvm::IntegerType *v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  void *v25;
  llvm::Value **v26;
  size_t v27;
  const llvm::APInt *v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  void *v35;
  llvm::Value **v36;
  _QWORD *v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  void *v41;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unsigned int v48;
  void *__src;
  uint64_t v50;
  const char *v51;
  __int16 v52;

  v8 = (llvm::ConstantInt **)a4;
  v12 = *a3;
  v13 = *(llvm::IntegerType **)a4;
  if (*(llvm::ConstantInt ***)a4 != *a3)
  {
    v14 = *(unsigned __int8 *)(a6 + 32);
    if (v14 == 1)
    {
      __src = ".ext";
      v15 = 259;
    }
    else
    {
      if (*(_BYTE *)(a6 + 32))
      {
        v16 = *(_QWORD *)(a6 + 8);
        if (*(_BYTE *)(a6 + 33) == 1)
        {
          v17 = *(void **)a6;
        }
        else
        {
          LOBYTE(v14) = 2;
          v17 = (void *)a6;
        }
        __src = v17;
        v50 = v16;
        v51 = ".ext";
        LOBYTE(v52) = v14;
        HIBYTE(v52) = 3;
        goto LABEL_11;
      }
      v15 = 256;
    }
    v52 = v15;
LABEL_11:
    v8 = (llvm::ConstantInt **)sub_1C4773E38(a2, 39, a4, (uint64_t)v12, (uint64_t)&__src);
  }
  if (*a1)
  {
    sub_1C4768AD0((uint64_t)a1, (uint64_t)v12);
    v19 = (unint64_t)(v18 + 7) >> 3;
    sub_1C4768AD0((uint64_t)a1, (uint64_t)v13);
    a5 = v19 - (a5 + ((unint64_t)(v20 + 7) >> 3));
  }
  v21 = 8 * a5;
  if (v21)
  {
    v22 = *(unsigned __int8 *)(a6 + 32);
    if (v22 == 1)
    {
      __src = ".shift";
      v23 = 259;
    }
    else
    {
      if (*(_BYTE *)(a6 + 32))
      {
        v24 = *(_QWORD *)(a6 + 8);
        if (*(_BYTE *)(a6 + 33) == 1)
        {
          v25 = *(void **)a6;
        }
        else
        {
          LOBYTE(v22) = 2;
          v25 = (void *)a6;
        }
        __src = v25;
        v50 = v24;
        v51 = ".shift";
        LOBYTE(v52) = v22;
        HIBYTE(v52) = 3;
        goto LABEL_26;
      }
      v23 = 256;
    }
    v52 = v23;
LABEL_26:
    v26 = llvm::ConstantInt::get(*v8, v21, 0);
    v8 = (llvm::ConstantInt **)sub_1C506E874((uint64_t)a2, (uint64_t)v8, (uint64_t)v26, (uint64_t)&__src, 0, 0);
    goto LABEL_27;
  }
  if (*((_DWORD *)v13 + 2) >> 8 >= *((_DWORD *)v12 + 2) >> 8)
    return v8;
LABEL_27:
  llvm::IntegerType::getMask(v13, (llvm::APInt *)&v43);
  llvm::APInt::zext((llvm::APInt *)&v43, *((_DWORD *)v12 + 2) >> 8, (uint64_t)&__src);
  v46 = v50;
  if (v50 > 0x40)
  {
    v27 = (((unint64_t)v50 + 63) >> 3) & 0x3FFFFFF8;
    v45 = operator new[]();
    memcpy((void *)v45, __src, v27);
  }
  else
  {
    v45 = (unint64_t)__src;
  }
  sub_1C4888094((uint64_t)&v45, v21);
  v29 = v46;
  if (v46 > 0x40)
  {
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v45);
    v29 = v46;
    v31 = v45;
  }
  else
  {
    v30 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v46;
    if (!v46)
      v30 = 0;
    v31 = v30 & ~v45;
    v45 = v31;
  }
  v48 = v29;
  v47 = v31;
  v46 = 0;
  if (v50 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  if (v44 >= 0x41 && v43)
    MEMORY[0x1CAA32F9C](v43, 0x1000C8000313F17);
  v32 = *(unsigned __int8 *)(a6 + 32);
  if (v32 == 1)
  {
    __src = ".mask";
    v33 = 259;
    goto LABEL_44;
  }
  if (!*(_BYTE *)(a6 + 32))
  {
    v33 = 256;
LABEL_44:
    v52 = v33;
    goto LABEL_49;
  }
  v34 = *(_QWORD *)(a6 + 8);
  if (*(_BYTE *)(a6 + 33) == 1)
  {
    v35 = *(void **)a6;
  }
  else
  {
    LOBYTE(v32) = 2;
    v35 = (void *)a6;
  }
  __src = v35;
  v50 = v34;
  v51 = ".mask";
  LOBYTE(v52) = v32;
  HIBYTE(v52) = 3;
LABEL_49:
  v36 = llvm::ConstantInt::get(*a3, (llvm::Type *)&v47, v28);
  v37 = (_QWORD *)sub_1C4D89BCC((uint64_t)a2, a3, (uint64_t)v36, (uint64_t)&__src);
  v38 = *(unsigned __int8 *)(a6 + 32);
  if (v38 == 1)
  {
    __src = ".insert";
    v39 = 259;
  }
  else
  {
    if (*(_BYTE *)(a6 + 32))
    {
      v40 = *(_QWORD *)(a6 + 8);
      if (*(_BYTE *)(a6 + 33) == 1)
      {
        v41 = *(void **)a6;
      }
      else
      {
        LOBYTE(v38) = 2;
        v41 = (void *)a6;
      }
      __src = v41;
      v50 = v40;
      v51 = ".insert";
      LOBYTE(v52) = v38;
      HIBYTE(v52) = 3;
      goto LABEL_58;
    }
    v39 = 256;
  }
  v52 = v39;
LABEL_58:
  v8 = (llvm::ConstantInt **)sub_1C4773594((uint64_t)a2, v37, (uint64_t)v8, (uint64_t)&__src);
  if (v48 >= 0x41 && v47)
    MEMORY[0x1CAA32F9C](v47, 0x1000C8000313F17);
  return v8;
}

_QWORD *sub_1C5C1DD04(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  int32x2_t ****v13;
  int32x2_t *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int32x2_t *****v19;
  int32x2_t ****v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t *v24;
  int32x2_t ****v25;

  if (!*(_QWORD *)(a2 + 8))
  {
    v3 = result;
    result = (_QWORD *)llvm::wouldInstructionBeTriviallyDead(a2, 0);
    if ((_DWORD)result)
    {
      v4 = v3[2];
      v23 = 4;
      v24 = 0;
      v25 = (int32x2_t ****)a2;
      if (a2 != -8192 && a2 != -4096 && a2)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v23);
      result = (_QWORD *)sub_1C4EE497C((unsigned int *)(v4 + 192), (unint64_t)&v23, 1);
      v5 = *(_DWORD *)(v4 + 200);
      v6 = (unint64_t *)(*(_QWORD *)(v4 + 192) + 24 * v5);
      *v6 = 4;
      v6[1] = 0;
      v7 = (unint64_t)(v6 + 1);
      v8 = result[2];
      v6[2] = v8;
      if (v8 != -8192 && v8 != -4096 && v8 != 0)
      {
        v10 = *result & 0xFFFFFFFFFFFFFFF8;
        v6[1] = *(_QWORD *)v10;
        *(_QWORD *)v10 = v6;
        *v6 = v10 | 4;
        v11 = (uint64_t *)v6[1];
        if (v11)
          *v11 = *v11 & 7 | v7;
      }
      *(_DWORD *)(v4 + 200) = v5 + 1;
      if (v25 != (int32x2_t ****)-8192 && v25 != (int32x2_t ****)-4096 && v25)
      {
        v12 = v23 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF8) = v24;
        if (v24)
        {
          *v24 = *v24 & 7 | v12;
        }
        else
        {
          v13 = v25;
          v14 = ***v25;
          v15 = (unint64_t)v14[303];
          if (v15 <= v12)
          {
            v16 = v14[305].u32[0];
            if (v15 + 16 * v16 > v12)
            {
              v17 = v16 - 1;
              LODWORD(v18) = v17 & ((v25 >> 4) ^ (v25 >> 9));
              v19 = (int32x2_t *****)(v15 + 16 * v18);
              v20 = *v19;
              if (v25 == *v19)
              {
LABEL_26:
                *v19 = (int32x2_t ****)-8192;
                v14[304] = vadd_s32(v14[304], (int32x2_t)0x1FFFFFFFFLL);
                v13 = v25;
              }
              else
              {
                v21 = 1;
                while (v20 != (int32x2_t ****)-4096)
                {
                  v22 = v18 + v21++;
                  v18 = v22 & v17;
                  v20 = *(int32x2_t *****)(v15 + 16 * v18);
                  if (v25 == v20)
                  {
                    v19 = (int32x2_t *****)(v15 + 16 * v18);
                    goto LABEL_26;
                  }
                }
              }
              *((_BYTE *)v13 + 17) &= ~1u;
            }
          }
        }
      }
    }
  }
  return result;
}

unsigned __int8 *sub_1C5C1DEEC(uint64_t a1, llvm::PoisonValue **a2, const llvm::APInt *a3, int a4, uint64_t a5)
{
  llvm::PoisonValue **v5;
  uint64_t v8;
  llvm::ConstantInt *v9;
  unint64_t v10;
  int v11;
  llvm::ValueHandleBase *v12;
  int v13;
  __int16 v14;
  llvm::Type *v15;
  void *v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  llvm::ValueHandleBase *v26;
  _QWORD v27[4];
  __int16 v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[2];
  __int16 v32;
  uint64_t v33;

  v5 = a2;
  v33 = *MEMORY[0x1E0C80C00];
  if (a4 - (_DWORD)a3 == *((_DWORD *)*a2 + 8))
    return (unsigned __int8 *)v5;
  if (a4 - (_DWORD)a3 == 1)
  {
    v8 = **(_QWORD **)(a1 + 64);
    v9 = *(llvm::ConstantInt **)(v8 + 1960);
    v10 = *(unsigned int *)(v8 + 1968);
    LODWORD(v30) = v10 >> 8;
    if (v10 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v29, a3, 0);
    }
    else
    {
      if (v10 <= 0xFF)
        v11 = 0;
      else
        v11 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v10);
      v29 = (void *)(v11 & a3);
    }
    v12 = llvm::ConstantInt::get(v9, (llvm::LLVMContext *)&v29, a3);
    if (v30 >= 0x41 && v29)
    {
      v26 = v12;
      MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
      v12 = v26;
    }
    v13 = *(unsigned __int8 *)(a5 + 32);
    if (v13 == 1)
    {
      v29 = ".extract";
      v14 = 259;
    }
    else
    {
      if (*(_BYTE *)(a5 + 32))
      {
        v20 = *(_QWORD *)(a5 + 8);
        if (*(_BYTE *)(a5 + 33) == 1)
        {
          v21 = *(void **)a5;
        }
        else
        {
          LOBYTE(v13) = 2;
          v21 = (void *)a5;
        }
        v29 = v21;
        v30 = v20;
        v31[0] = ".extract";
        LOBYTE(v32) = v13;
        HIBYTE(v32) = 3;
        return sub_1C4772EE0((uint64_t *)a1, (uint64_t)v5, (uint64_t)v12, (uint64_t)&v29);
      }
      v14 = 256;
    }
    v32 = v14;
    return sub_1C4772EE0((uint64_t *)a1, (uint64_t)v5, (uint64_t)v12, (uint64_t)&v29);
  }
  v29 = v31;
  v30 = 0x800000000;
  sub_1C57E87D8((uint64_t)&v29, (int)a3, a4);
  v16 = v29;
  v17 = v30;
  v18 = *(unsigned __int8 *)(a5 + 32);
  if (v18 == 1)
  {
    v27[0] = ".extract";
    v19 = 259;
    goto LABEL_23;
  }
  if (!*(_BYTE *)(a5 + 32))
  {
    v19 = 256;
LABEL_23:
    v28 = v19;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(a5 + 8);
  if (*(_BYTE *)(a5 + 33) == 1)
  {
    v23 = *(void **)a5;
  }
  else
  {
    LOBYTE(v18) = 2;
    v23 = (void *)a5;
  }
  v27[0] = v23;
  v27[1] = v22;
  v27[2] = ".extract";
  LOBYTE(v28) = v18;
  HIBYTE(v28) = 3;
LABEL_28:
  v24 = llvm::PoisonValue::get(*v5, v15);
  v5 = (llvm::PoisonValue **)sub_1C486AD20(a1, (uint64_t)v5, (uint64_t)v24, v16, v17, (uint64_t)v27);
  if (v29 != v31)
    free(v29);
  return (unsigned __int8 *)v5;
}

unsigned __int8 *sub_1C5C1E154(_BYTE *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  llvm::ConstantInt **v9;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  const char *v19;
  llvm::Value **v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  const char *v24;
  const char *v26;
  uint64_t v27;
  const char *v28;
  __int16 v29;

  v9 = (llvm::ConstantInt **)a3;
  v11 = *a3;
  if (*a1)
  {
    sub_1C4768AD0((uint64_t)a1, *a3);
    v14 = (unint64_t)(v13 + 7) >> 3;
    sub_1C4768AD0((uint64_t)a1, a4);
    a5 = v14 - (a5 + ((unint64_t)(v15 + 7) >> 3));
  }
  if (8 * a5)
  {
    v16 = *(unsigned __int8 *)(a6 + 32);
    if (v16 == 1)
    {
      v26 = ".shift";
      v17 = 259;
    }
    else
    {
      if (*(_BYTE *)(a6 + 32))
      {
        v18 = *(_QWORD *)(a6 + 8);
        if (*(_BYTE *)(a6 + 33) == 1)
        {
          v19 = *(const char **)a6;
        }
        else
        {
          LOBYTE(v16) = 2;
          v19 = (const char *)a6;
        }
        v26 = v19;
        v27 = v18;
        v28 = ".shift";
        LOBYTE(v29) = v16;
        HIBYTE(v29) = 3;
        goto LABEL_13;
      }
      v17 = 256;
    }
    v29 = v17;
LABEL_13:
    v20 = llvm::ConstantInt::get(*v9, 8 * a5, 0);
    v9 = (llvm::ConstantInt **)sub_1C506ED1C((uint64_t)a2, (uint64_t)v9, (uint64_t)v20, (uint64_t)&v26, 0);
  }
  if (v11 != a4)
  {
    v21 = *(unsigned __int8 *)(a6 + 32);
    if (v21 == 1)
    {
      v26 = ".trunc";
      v22 = 259;
    }
    else
    {
      if (*(_BYTE *)(a6 + 32))
      {
        v23 = *(_QWORD *)(a6 + 8);
        if (*(_BYTE *)(a6 + 33) == 1)
        {
          v24 = *(const char **)a6;
        }
        else
        {
          LOBYTE(v21) = 2;
          v24 = (const char *)a6;
        }
        v26 = v24;
        v27 = v23;
        v28 = ".trunc";
        LOBYTE(v29) = v21;
        HIBYTE(v29) = 3;
        return sub_1C4773E38(a2, 38, (unsigned __int8 *)v9, a4, (uint64_t)&v26);
      }
      v22 = 256;
    }
    v29 = v22;
    return sub_1C4773E38(a2, 38, (unsigned __int8 *)v9, a4, (uint64_t)&v26);
  }
  return (unsigned __int8 *)v9;
}

unsigned __int8 *sub_1C5C1E2F8(uint64_t a1, llvm::Type *a2, const llvm::APInt *a3, unsigned int a4, uint64_t a5)
{
  llvm::PoisonValue **Select;
  BOOL v10;
  uint64_t v11;
  llvm::ConstantInt *v12;
  unint64_t v13;
  int v14;
  llvm::ValueHandleBase *v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  void *v34;
  _QWORD *v35;
  uint64_t *v36;
  unint64_t v37;
  unsigned int v38;
  _BOOL8 v40;
  uint64_t v41;
  llvm::ConstantInt *v42;
  unint64_t v43;
  unint64_t v44;
  llvm::ValueHandleBase *v45;
  uint64_t v46;
  unint64_t v47;
  llvm::FixedVectorType ***v48;
  uint64_t Impl;
  _QWORD **v50;
  int v51;
  uint64_t v52;
  const char *v53;
  uint64_t *v55;
  const char *v56;
  uint64_t v57;
  const char *v58;
  __int16 v59;
  void *v60;
  uint64_t v61;
  _QWORD v62[2];
  __int16 v63;
  void *v64;
  uint64_t v65;
  _QWORD v66[6];

  Select = (llvm::PoisonValue **)a3;
  v66[4] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a3)
    v10 = (*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE) == 18;
  else
    v10 = 0;
  if (!v10)
  {
    v11 = **(_QWORD **)(a1 + 64);
    v12 = *(llvm::ConstantInt **)(v11 + 1960);
    v13 = *(unsigned int *)(v11 + 1968);
    LODWORD(v61) = v13 >> 8;
    if (v13 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v60, a4, 0);
    }
    else
    {
      if (v13 <= 0xFF)
        v14 = 0;
      else
        v14 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v13);
      v60 = (void *)(v14 & a4);
    }
    v15 = llvm::ConstantInt::get(v12, (llvm::LLVMContext *)&v60, a3);
    if (v61 >= 0x41 && v60)
      MEMORY[0x1CAA32F9C](v60, 0x1000C8000313F17);
    v16 = *(unsigned __int8 *)(a5 + 32);
    if (v16 == 1)
    {
      v60 = ".insert";
      v17 = 259;
    }
    else
    {
      if (*(_BYTE *)(a5 + 32))
      {
        v27 = *(_QWORD *)(a5 + 8);
        if (*(_BYTE *)(a5 + 33) == 1)
        {
          v28 = *(void **)a5;
        }
        else
        {
          LOBYTE(v16) = 2;
          v28 = (void *)a5;
        }
        v60 = v28;
        v61 = v27;
        v62[0] = ".insert";
        LOBYTE(v63) = v16;
        HIBYTE(v63) = 3;
        return sub_1C4773154((uint64_t *)a1, (uint64_t)a2, (uint64_t)Select, (uint64_t)v15, (uint64_t)&v60);
      }
      v17 = 256;
    }
    v63 = v17;
    return sub_1C4773154((uint64_t *)a1, (uint64_t)a2, (uint64_t)Select, (uint64_t)v15, (uint64_t)&v60);
  }
  v18 = *(_QWORD *)a2;
  v19 = *(_DWORD *)(*(_QWORD *)a3 + 32);
  v20 = *(unsigned int *)(*(_QWORD *)a2 + 32);
  if (v19 != (_DWORD)v20)
  {
    v64 = v66;
    v65 = 0x800000000;
    if (v20 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, (uint64_t)v66, v20, 4);
      LODWORD(v20) = *(_DWORD *)(v18 + 32);
    }
    v21 = v19 + a4;
    if ((_DWORD)v20)
    {
      v22 = 0;
      do
      {
        if (v22 < a4 || v22 >= v21)
        {
          v24 = v65;
          v25 = HIDWORD(v65);
          v23 = -1;
        }
        else
        {
          v23 = v22 - a4;
          v24 = v65;
          v25 = HIDWORD(v65);
        }
        if (v24 >= v25)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, (uint64_t)v66, v24 + 1, 4);
          v24 = v65;
        }
        *((_DWORD *)v64 + v24) = v23;
        v26 = v65 + 1;
        LODWORD(v65) = v65 + 1;
        ++v22;
      }
      while (v22 != *(_DWORD *)(v18 + 32));
    }
    else
    {
      v26 = v65;
    }
    v29 = v64;
    v30 = v26;
    v31 = *(unsigned __int8 *)(a5 + 32);
    if (v31 == 1)
    {
      v60 = ".expand";
      v32 = 259;
    }
    else
    {
      if (*(_BYTE *)(a5 + 32))
      {
        v33 = *(_QWORD *)(a5 + 8);
        if (*(_BYTE *)(a5 + 33) == 1)
        {
          v34 = *(void **)a5;
        }
        else
        {
          LOBYTE(v31) = 2;
          v34 = (void *)a5;
        }
        v60 = v34;
        v61 = v33;
        v62[0] = ".expand";
        LOBYTE(v63) = v31;
        HIBYTE(v63) = 3;
        goto LABEL_44;
      }
      v32 = 256;
    }
    v63 = v32;
LABEL_44:
    v35 = llvm::PoisonValue::get(*Select, a2);
    v36 = (uint64_t *)sub_1C486AD20(a1, (uint64_t)Select, (uint64_t)v35, v29, v30, (uint64_t)&v60);
    v60 = v62;
    v61 = 0x800000000;
    v37 = *(unsigned int *)(v18 + 32);
    if (v37 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, (uint64_t)v62, v37, 8);
      v37 = *(unsigned int *)(v18 + 32);
    }
    if ((_DWORD)v37)
    {
      v55 = v36;
      v38 = 0;
      do
      {
        v40 = v38 >= a4 && v38 < v21;
        v41 = **(_QWORD **)(a1 + 64);
        v42 = *(llvm::ConstantInt **)(v41 + 1888);
        v43 = *(unsigned int *)(v41 + 1896);
        LODWORD(v57) = v43 >> 8;
        if (v43 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v56, v40, 0);
        }
        else
        {
          if (v43 <= 0xFF)
            v44 = 0;
          else
            v44 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v43);
          v56 = (const char *)(v44 & v40);
        }
        v45 = llvm::ConstantInt::get(v42, (llvm::LLVMContext *)&v56, (const llvm::APInt *)v37);
        if (v57 >= 0x41 && v56)
          MEMORY[0x1CAA32F9C](v56, 0x1000C8000313F17);
        v46 = v61;
        if (v61 >= (unint64_t)HIDWORD(v61))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, (uint64_t)v62, v61 + 1, 8);
          v46 = v61;
        }
        *((_QWORD *)v60 + v46) = v45;
        v47 = (v61 + 1);
        LODWORD(v61) = v61 + 1;
        ++v38;
      }
      while (v38 != *(_DWORD *)(v18 + 32));
      v36 = v55;
    }
    else
    {
      v47 = v61;
    }
    v48 = (llvm::FixedVectorType ***)v60;
    Impl = (uint64_t)llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v60, (llvm::Type *)v47);
    if (!Impl)
    {
      llvm::FixedVectorType::get(**v48, (llvm::Type *)v47);
      Impl = sub_1C537B3A4(**v50 + 1288, (uint64_t)v50, v48, v47);
    }
    v51 = *(unsigned __int8 *)(a5 + 32);
    if (v51 == 1)
    {
      v56 = "blend";
      v59 = 259;
    }
    else if (*(_BYTE *)(a5 + 32))
    {
      v52 = *(_QWORD *)(a5 + 8);
      if (*(_BYTE *)(a5 + 33) == 1)
      {
        v53 = *(const char **)a5;
      }
      else
      {
        LOBYTE(v51) = 2;
        v53 = (const char *)a5;
      }
      v56 = v53;
      v57 = v52;
      v58 = "blend";
      LOBYTE(v59) = v51;
      HIBYTE(v59) = 3;
    }
    else
    {
      v59 = 256;
    }
    Select = (llvm::PoisonValue **)llvm::IRBuilderBase::CreateSelect((uint64_t *)a1, Impl, v36, (uint64_t)a2, (uint64_t)&v56, 0);
    if (v60 != v62)
      free(v60);
    if (v64 != v66)
      free(v64);
  }
  return (unsigned __int8 *)Select;
}

void sub_1C5C1E83C(_QWORD *a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  int v19;
  _BYTE v20[32];
  void *v21;
  uint64_t v22;
  _QWORD v23[5];

  v23[4] = *MEMORY[0x1E0C80C00];
  v16 = v20;
  v17 = v20;
  v18 = 4;
  v19 = 0;
  v21 = v23;
  v22 = 0x400000000;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v16, a2);
  v4 = v22;
  if (v22 >= HIDWORD(v22))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, (uint64_t)v23, v22 + 1, 8);
    v4 = v22;
  }
  *((_QWORD *)v21 + v4) = a2;
  v5 = v22 + 1;
  do
  {
    v6 = *((_QWORD *)v21 + --v5);
    LODWORD(v22) = v5;
    v7 = *(unsigned __int8 *)(v6 + 16);
    if (v6 && v7 == 60 || v6 && v7 == 61)
    {
      v8 = *(unsigned __int16 *)(v6 + 18);
      v9 = __clz(1 << (v8 >> 1)) ^ 0x3F;
      v10 = (1 << *(_WORD *)(a1[4] + 18)) | (a1[14] - a1[5]);
      v11 = (63 - __clz(v10 & -v10));
      if (v11 < v9)
        LOWORD(v9) = v11;
      *(_WORD *)(v6 + 18) = v8 & 0xFF81 | (2 * v9);
    }
    else
    {
      v12 = *(_QWORD *)(v6 + 8);
      if (v12)
      {
        do
        {
          v13 = *(_QWORD *)(v12 + 24);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v16, v13);
          if (v14)
          {
            v15 = v22;
            if (v22 >= (unint64_t)HIDWORD(v22))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, (uint64_t)v23, v22 + 1, 8);
              v15 = v22;
            }
            *((_QWORD *)v21 + v15) = v13;
            LODWORD(v22) = v22 + 1;
          }
          v12 = *(_QWORD *)(v12 + 8);
        }
        while (v12);
        v5 = v22;
      }
    }
  }
  while (v5);
  if (v21 != v23)
    free(v21);
  if (v17 != v16)
    free(v17);
}

uint64_t sub_1C5C1EA38(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_5;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_5;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

uint64_t sub_1C5C1EAE4(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C63250C8(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 72; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C63250C8(a1, v14, v8);
}

uint64_t sub_1C5C1EC4C(uint64_t a1, int32x2_t ****a2)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  int32x2_t ****v14;
  int32x2_t *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int32x2_t *****v20;
  int32x2_t ****v21;
  int v22;
  int v23;
  uint64_t result;
  const llvm::APInt *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  llvm::ConstantInt *v30;
  unsigned int v31;
  unint64_t v32;
  llvm::ConstantInt *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned __int8 *v37;
  llvm::IRBuilderBase *v38;
  uint64_t v39;
  unint64_t *v40;
  int32x2_t ****v41;

  v4 = *(_QWORD *)(a1 + 16);
  v39 = 4;
  v40 = 0;
  v41 = a2;
  if (a2 != (int32x2_t ****)-8192 && a2 != (int32x2_t ****)-4096 && a2)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v39);
  v5 = (_QWORD *)sub_1C4EE497C((unsigned int *)(v4 + 192), (unint64_t)&v39, 1);
  v6 = *(_DWORD *)(v4 + 200);
  v7 = (unint64_t *)(*(_QWORD *)(v4 + 192) + 24 * v6);
  *v7 = 4;
  v7[1] = 0;
  v8 = (unint64_t)(v7 + 1);
  v9 = v5[2];
  v7[2] = v9;
  if (v9 != -8192 && v9 != -4096 && v9 != 0)
  {
    v11 = *v5 & 0xFFFFFFFFFFFFFFF8;
    v7[1] = *(_QWORD *)v11;
    *(_QWORD *)v11 = v7;
    *v7 = v11 | 4;
    v12 = (uint64_t *)v7[1];
    if (v12)
      *v12 = *v12 & 7 | v8;
  }
  *(_DWORD *)(v4 + 200) = v6 + 1;
  if (v41 != (int32x2_t ****)-8192 && v41 != (int32x2_t ****)-4096 && v41)
  {
    v13 = v39 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF8) = v40;
    if (v40)
    {
      *v40 = *v40 & 7 | v13;
    }
    else
    {
      v14 = v41;
      v15 = ***v41;
      v16 = (unint64_t)v15[303];
      if (v16 <= v13)
      {
        v17 = v15[305].u32[0];
        if (v16 + 16 * v17 > v13)
        {
          v18 = v17 - 1;
          LODWORD(v19) = v18 & ((v41 >> 4) ^ (v41 >> 9));
          v20 = (int32x2_t *****)(v16 + 16 * v19);
          v21 = *v20;
          if (v41 == *v20)
          {
LABEL_23:
            *v20 = (int32x2_t ****)-8192;
            v15[304] = vadd_s32(v15[304], (int32x2_t)0x1FFFFFFFFLL);
            v14 = v41;
          }
          else
          {
            v22 = 1;
            while (v21 != (int32x2_t ****)-4096)
            {
              v23 = v19 + v22++;
              v19 = v23 & v18;
              v21 = *(int32x2_t *****)(v16 + 16 * v19);
              if (v41 == v21)
              {
                v20 = (int32x2_t *****)(v16 + 16 * v19);
                goto LABEL_23;
              }
            }
          }
          *((_BYTE *)v14 + 17) &= ~1u;
        }
      }
    }
  }
  if (sub_1C4D9F8B4((uint64_t)a2))
    return llvm::Value::dropDroppableUsesIn(*(_QWORD *)(a1 + 152), (llvm::User *)a2);
  result = sub_1C509DDB0((uint64_t)a2);
  if ((_DWORD)result)
    return llvm::Value::dropDroppableUsesIn(*(_QWORD *)(a1 + 152), (llvm::User *)a2);
  v26 = *(_QWORD *)(a1 + 112);
  if (v26 == *(_QWORD *)(a1 + 40))
  {
    v27 = *(_QWORD *)(a1 + 120);
    if (v27 == *(_QWORD *)(a1 + 48))
    {
      v28 = (uint64_t)*a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
      v29 = v27 - v26;
      v30 = *(llvm::ConstantInt **)v28;
      v31 = *(_DWORD *)(v28 + 8);
      LODWORD(v40) = v31 >> 8;
      if (v31 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v39, v29, 0);
      }
      else
      {
        if (v31 <= 0xFF)
          v32 = 0;
        else
          v32 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v31);
        v39 = v32 & v29;
      }
      v33 = llvm::ConstantInt::get(v30, (llvm::LLVMContext *)&v39, v25);
      if (v40 >= 0x41 && v39)
        MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
      v34 = **(_QWORD **)(a1 + 152);
      v35 = *(_DWORD *)(v34 + 8);
      if ((v35 & 0xFE) == 0x12)
        v35 = *(_DWORD *)(**(_QWORD **)(v34 + 16) + 8);
      v36 = llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(a1 + 240) + 1912), (llvm::Type *)(v35 >> 8));
      v37 = sub_1C5C1D5D8((uint64_t *)a1, a1 + 176, v36);
      v38 = (llvm::IRBuilderBase *)(a1 + 176);
      if (*((_DWORD *)*(a2 - 4) + 9) == 168)
        return llvm::IRBuilderBase::CreateLifetimeStart(v38, (llvm::Value *)v37, v33);
      else
        return llvm::IRBuilderBase::CreateLifetimeEnd(v38, (llvm::Value *)v37, v33);
    }
  }
  return result;
}

uint64_t sub_1C5C1EF70(uint64_t a1, llvm::Instruction *this)
{
  int v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  const char *v22;
  int32x2_t *v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  const char **v28;
  const char *v29;
  int v30;
  int v31;
  unsigned __int8 *v32;
  uint64_t v33;
  char *v34;
  unsigned __int8 **v35;
  uint64_t v36;
  unsigned __int8 ***v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  const llvm::APInt *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  unsigned int v57;
  llvm::Type *v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  __int16 ParamAlignment;
  void *v63;
  uint64_t *p_src;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 v67;
  llvm::DataLayout *v68;
  unsigned __int8 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BOOL4 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const llvm::APInt **v78;
  const llvm::APInt *v79;
  int v80;
  int v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD **v86;
  _QWORD *v87;
  int v88;
  unint64_t v89;
  const llvm::APInt *v90;
  char *v91;
  unint64_t *v92;
  unint64_t *v93;
  unsigned __int8 *v94;
  unsigned __int8 *v95;
  uint64_t *v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  llvm::Value *v99;
  __int16 v100;
  __int16 v101;
  uint64_t v102;
  llvm::APInt *v103;
  unsigned int v104;
  BOOL v105;
  int v106;
  const llvm::APInt *v107;
  llvm::Value *MemTransferInst;
  llvm::MDNode *v109;
  llvm::MDNode *v110;
  llvm::MDNode *v111;
  llvm::MDNode *v112;
  uint64_t v113;
  llvm::Value **v114;
  char *v115;
  llvm::Value ***v116;
  uint64_t v117;
  llvm::Value ****v118;
  llvm::Value *v119;
  llvm::Value *v120;
  char v121;
  int v122;
  llvm::PointerType *v123;
  llvm::Type *v124;
  llvm::PointerType *v125;
  uint64_t v126;
  llvm::DataLayout *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  const llvm::APInt **v132;
  const llvm::APInt *v133;
  int v134;
  int v135;
  const llvm::APInt *v136;
  char *v137;
  unint64_t *v138;
  unint64_t *v139;
  unsigned __int8 *v140;
  uint64_t v141;
  char *v142;
  __int16 v143;
  char v144;
  char v145;
  unsigned __int8 v146;
  __int16 v147;
  uint64_t v148;
  llvm::APInt *v149;
  unsigned int v150;
  BOOL v151;
  uint64_t v152;
  __int16 v153;
  llvm::PoisonValue **v154;
  unsigned __int8 *v155;
  __int16 v156;
  llvm::Value *v157;
  const llvm::APInt *v158;
  llvm::MDNode *v159;
  llvm::MDNode *v160;
  llvm::MDNode *v161;
  llvm::MDNode *v162;
  uint64_t v163;
  __int16 v164;
  unsigned __int8 *v165;
  uint64_t *v166;
  unint64_t v167;
  _BYTE *v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  __int16 v172;
  llvm::Type *v173;
  unsigned __int8 *v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  __int16 v178;
  unsigned __int8 *v179;
  unsigned __int8 *v180;
  unint64_t v181;
  _BYTE *v182;
  unsigned __int8 *v183;
  uint64_t v184;
  llvm::APInt *v185;
  unsigned int v186;
  BOOL v187;
  __int16 v188;
  llvm::Value *v189;
  const llvm::APInt *v190;
  llvm::MDNode *v191;
  llvm::MDNode *v192;
  llvm::MDNode *v193;
  llvm::MDNode *v194;
  uint64_t v195;
  llvm::APInt *v196;
  unsigned int v197;
  BOOL v198;
  const llvm::APInt *v200;
  int v201;
  _DWORD *v202;
  _DWORD *v203;
  int v204;
  uint64_t v205;
  int v206;
  unsigned __int8 *v207;
  const llvm::APInt *v208;
  unsigned __int8 v209;
  char *v210;
  _DWORD *v211;
  char *v212;
  unsigned __int8 v213;
  void *v214;
  unsigned int v215;
  void *v216;
  unsigned int v217;
  void *__src;
  unsigned int v219;
  llvm::MDNode *v220;
  llvm::AAMDNodes *v221;
  llvm::MDNode *v222;
  llvm::MDNode *v223;
  unint64_t v224;
  unint64_t *v225;
  const char *v226;
  __int16 v227;
  uint64_t v228;

  v228 = *MEMORY[0x1E0C80C00];
  llvm::Instruction::getAAMetadata((uint64_t ***)this, &v220);
  v4 = *((_DWORD *)this + 5);
  if ((v4 & 0x40000000) != 0)
    v5 = (char *)*((_QWORD *)this - 1);
  else
    v5 = (char *)this - 32 * (v4 & 0x7FFFFFF);
  v6 = *(char **)(a1 + 144);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = (1 << *(_WORD *)(v7 + 18)) | (*(_QWORD *)(a1 + 112) - v8);
  v10 = 63 - __clz(v9 & -v9);
  if (!*(_BYTE *)(a1 + 136))
  {
    v32 = sub_1C5C1D5D8((uint64_t *)a1, a1 + 176, **(_QWORD **)(a1 + 152));
    v33 = *((_DWORD *)this + 5) & 0x7FFFFFF;
    v34 = (char *)this - 32 * v33;
    if (v5 == v6)
    {
      v40 = -v33;
      if (*(_QWORD *)v34)
      {
        v41 = (char *)this + 32 * v40;
        v43 = (_QWORD *)*((_QWORD *)v41 + 2);
        v42 = v41 + 16;
        *v43 = *(v42 - 1);
        v44 = *(v42 - 1);
        if (v44)
          *(_QWORD *)(v44 + 16) = *v42;
      }
      *(_QWORD *)v34 = v32;
      if (v32)
      {
        v47 = *((_QWORD *)v32 + 1);
        v45 = v32 + 8;
        v46 = v47;
        v48 = (char *)this + 32 * v40;
        *((_QWORD *)v48 + 1) = v47;
        if (v47)
          *(_QWORD *)(v46 + 16) = v48 + 8;
        *((_QWORD *)v48 + 2) = v45;
        *v45 = v34;
      }
      sub_1C5346BA8((uint64_t)this, v10 | 0x100);
    }
    else
    {
      v35 = (unsigned __int8 **)(v34 + 32);
      if (*((_QWORD *)v34 + 4))
      {
        **((_QWORD **)v34 + 6) = *((_QWORD *)v34 + 5);
        v36 = *((_QWORD *)v34 + 5);
        if (v36)
          *(_QWORD *)(v36 + 16) = *((_QWORD *)v34 + 6);
      }
      *v35 = v32;
      if (v32)
      {
        v39 = *((_QWORD *)v32 + 1);
        v37 = (unsigned __int8 ***)(v32 + 8);
        v38 = v39;
        *((_QWORD *)v34 + 5) = v39;
        if (v39)
          *(_QWORD *)(v38 + 16) = v34 + 40;
        *((_QWORD *)v34 + 6) = v37;
        *v37 = v35;
      }
      sub_1C5346C3C((uint64_t)this, v10 | 0x100);
    }
    sub_1C5C1DD04((_QWORD *)a1, *(_QWORD *)(a1 + 152));
    return 0;
  }
  if (*(_QWORD *)(a1 + 72)
    || *(_QWORD *)(a1 + 64)
    || *(_QWORD *)(a1 + 96) <= v8
    && *(_QWORD *)(a1 + 104) >= *(_QWORD *)(a1 + 48)
    && (v50 = *(_QWORD *)(a1 + 128),
        sub_1C4768AD0(*(_QWORD *)a1, *(_QWORD *)(v7 + 64)),
        v7 = *(_QWORD *)(a1 + 32),
        v50 == (unint64_t)(v51 + 7) >> 3)
    && ((v52 = *(_DWORD *)(*(_QWORD *)(v7 + 64) + 8), (v52 & 0xFE) == 0x12)
     || *(_DWORD *)(*(_QWORD *)(v7 + 64) + 8) < 0x16u && ((0x20AC7Fu >> v52) & 1) != 0))
  {
    v11 = 0;
LABEL_8:
    v12 = *(_QWORD *)(a1 + 16);
    v224 = 4;
    v225 = 0;
    v226 = (const char *)this;
    if (this != (llvm::Instruction *)-8192 && this != (llvm::Instruction *)-4096 && this)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v224);
    v13 = (_QWORD *)sub_1C4EE497C((unsigned int *)(v12 + 192), (unint64_t)&v224, 1);
    v14 = *(_DWORD *)(v12 + 200);
    v15 = (unint64_t *)(*(_QWORD *)(v12 + 192) + 24 * v14);
    *v15 = 4;
    v15[1] = 0;
    v16 = (unint64_t)(v15 + 1);
    v17 = v13[2];
    v15[2] = v17;
    if (v17 != -8192 && v17 != -4096 && v17 != 0)
    {
      v19 = *v13 & 0xFFFFFFFFFFFFFFF8;
      v15[1] = *(_QWORD *)v19;
      *(_QWORD *)v19 = v15;
      *v15 = v19 | 4;
      v20 = (uint64_t *)v15[1];
      if (v20)
        *v20 = *v20 & 7 | v16;
    }
    *(_DWORD *)(v12 + 200) = v14 + 1;
    if (v226 != (const char *)-8192 && v226 != (const char *)-4096 && v226)
    {
      v21 = v224 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v224 & 0xFFFFFFFFFFFFFFF8) = v225;
      if (v225)
      {
        *v225 = *v225 & 7 | v21;
      }
      else
      {
        v22 = v226;
        v23 = ***(int32x2_t ****)v226;
        v24 = (unint64_t)v23[303];
        if (v24 <= v21)
        {
          v25 = v23[305].u32[0];
          if (v24 + 16 * v25 > v21)
          {
            v26 = v25 - 1;
            LODWORD(v27) = v26 & ((v226 >> 4) ^ (v226 >> 9));
            v28 = (const char **)(v24 + 16 * v27);
            v29 = *v28;
            if (v226 == *v28)
            {
LABEL_30:
              *v28 = (const char *)-8192;
              v23[304] = vadd_s32(v23[304], (int32x2_t)0x1FFFFFFFFLL);
              v22 = v226;
            }
            else
            {
              v30 = 1;
              while (v29 != (const char *)-4096)
              {
                v31 = v27 + v30++;
                v27 = v31 & v26;
                v29 = *(const char **)(v24 + 16 * v27);
                if (v226 == v29)
                {
                  v28 = (const char **)(v24 + 16 * v27);
                  goto LABEL_30;
                }
              }
            }
            *((_BYTE *)v22 + 17) &= ~1u;
          }
        }
      }
    }
    v53 = (const llvm::APInt *)*((_QWORD *)this + 4 * (v5 == v6) + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
    v224 = 0;
    v54 = llvm::Value::stripInBoundsOffsets((uint64_t)v53, (void (*)(uint64_t, uint64_t))nullsub_615, (uint64_t)&__src);
    if (*(_BYTE *)(v54 + 16) == 59)
      v55 = (const char *)v54;
    else
      v55 = 0;
    v224 = (unint64_t)v55;
    if (v55)
      sub_1C5C118DC(*(_QWORD *)(a1 + 16) + 24, (uint64_t *)&v224);
    v56 = *(_QWORD *)v53;
    v57 = *(_DWORD *)(*(_QWORD *)v53 + 8);
    if ((v57 & 0xFE) == 0x12)
      v57 = *(_DWORD *)(**(_QWORD **)(v56 + 16) + 8);
    v58 = (llvm::Type *)(v57 >> 8);
    v59 = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(*(llvm::DataLayout **)a1, v57 >> 8) + 12);
    v60 = *(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 96);
    v219 = v59;
    v213 = v10;
    if (v59 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&__src, v60, 0);
    }
    else
    {
      if (v59)
        v61 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v59;
      else
        v61 = 0;
      __src = (void *)(v61 & v60);
    }
    ParamAlignment = llvm::AttributeList::getParamAlignment((llvm::Instruction *)((char *)this + 64), v5 == v6);
    v63 = __src;
    p_src = (uint64_t *)&__src;
    if (v219 >= 0x41)
      p_src = (uint64_t *)__src;
    v65 = *p_src;
    v66 = 1 << ParamAlignment;
    if ((ParamAlignment & 0xFF00) == 0)
      v66 = 1;
    v67 = 63 - __clz((v66 | v65) & -(v66 | v65));
    if (v11)
    {
      v68 = *(llvm::DataLayout **)a1;
      v217 = v219;
      v209 = v67;
      if (v219 > 0x40)
      {
        v216 = (void *)operator new[]();
        memcpy(v216, v63, (((unint64_t)v217 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v216 = __src;
      }
      if ((*((_BYTE *)v53 + 23) & 0x10) == 0)
      {
        v92 = 0;
        v91 = &byte_1C871356D;
        goto LABEL_102;
      }
      v74 = ***(_QWORD ***)v53;
      v75 = *(_QWORD *)(v74 + 152);
      v76 = *(unsigned int *)(v74 + 168);
      if ((_DWORD)v76)
      {
        LODWORD(v77) = (v76 - 1) & ((v53 >> 4) ^ (v53 >> 9));
        v78 = (const llvm::APInt **)(v75 + 16 * v77);
        v79 = *v78;
        if (*v78 == v53)
        {
LABEL_101:
          v90 = v78[1];
          v93 = *(unint64_t **)v90;
          v91 = (char *)v90 + 16;
          v92 = v93;
LABEL_102:
          v227 = 773;
          v224 = (unint64_t)v91;
          v225 = v92;
          v226 = ".";
          v94 = sub_1C5C10A54(a1 + 176, v68, v53, &v216, v56, (uint64_t)&v224);
          if (v217 >= 0x41 && v216)
            MEMORY[0x1CAA32F9C](v216, 0x1000C8000313F17);
          v95 = sub_1C5C1D5D8((uint64_t *)a1, a1 + 176, **(_QWORD **)(a1 + 152));
          v96 = (uint64_t *)llvm::ConstantInt::get(*((llvm::ConstantInt ***)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[8], *(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112), 0);
          if (v5 == v6)
            v97 = v209;
          else
            v97 = v213;
          if (v5 == v6)
            v98 = v213;
          else
            v98 = v209;
          if (v5 == v6)
            v99 = (llvm::Value *)v95;
          else
            v99 = (llvm::Value *)v94;
          if (v5 != v6)
            v94 = v95;
          v100 = v98 | 0x100;
          v101 = v97 | 0x100;
          v102 = ((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[12];
          v103 = (llvm::APInt *)(v102 + 24);
          v104 = *(_DWORD *)(v102 + 32);
          if (v104 > 0x40)
            v105 = llvm::APInt::countLeadingZerosSlowCase(v103) == v104;
          else
            v105 = *(_QWORD *)v103 == 0;
          v106 = v105;
          MemTransferInst = llvm::IRBuilderBase::CreateMemTransferInst(a1 + 176, 194, v99, v100, (llvm::Value *)v94, v101, v96, v106 ^ 1u, 0, 0, 0, 0);
          v109 = v220;
          v111 = v222;
          v110 = v223;
          if (!v220 && !v221 && !v222 && !v223)
            goto LABEL_143;
          if (v221)
          {
            v112 = llvm::AAMDNodes::shiftTBAAStruct(v221, (llvm::MDNode *)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 96)), v107);
            v111 = v222;
            v110 = v223;
            if (!v109)
              goto LABEL_152;
          }
          else
          {
            v112 = 0;
            if (!v220)
            {
LABEL_152:
              if (!*((_QWORD *)MemTransferInst + 6) && (*((_BYTE *)MemTransferInst + 23) & 0x20) == 0)
                goto LABEL_131;
            }
          }
          llvm::Value::setMetadata(MemTransferInst, 1, v109);
LABEL_131:
          if (v112 || *((_QWORD *)MemTransferInst + 6) || (*((_BYTE *)MemTransferInst + 23) & 0x20) != 0)
            llvm::Value::setMetadata(MemTransferInst, 5, v112);
          if (v111 || *((_QWORD *)MemTransferInst + 6) || (*((_BYTE *)MemTransferInst + 23) & 0x20) != 0)
            llvm::Value::setMetadata(MemTransferInst, 7, v111);
          if (v110 || *((_QWORD *)MemTransferInst + 6) || (*((_BYTE *)MemTransferInst + 23) & 0x20) != 0)
            llvm::Value::setMetadata(MemTransferInst, 8, v110);
LABEL_143:
          v49 = 0;
LABEL_272:
          if (v219 >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          return v49;
        }
        v80 = 1;
        while (v79 != (const llvm::APInt *)-4096)
        {
          v81 = v77 + v80++;
          v77 = v81 & (v76 - 1);
          v79 = *(const llvm::APInt **)(v75 + 16 * v77);
          if (v79 == v53)
          {
            v78 = (const llvm::APInt **)(v75 + 16 * v77);
            goto LABEL_101;
          }
        }
      }
      v78 = (const llvm::APInt **)(v75 + 16 * v76);
      goto LABEL_101;
    }
    v69 = v67;
    v70 = *(_QWORD *)(a1 + 40);
    v71 = *(_QWORD *)(a1 + 112);
    v72 = *(_QWORD *)(a1 + 120);
    v73 = v71 == v70 && v72 == *(_QWORD *)(a1 + 48);
    v82 = *(_QWORD *)(a1 + 72);
    if (v82)
    {
      v83 = *(_QWORD *)(a1 + 88);
      v84 = (v71 - v70) / v83;
      v85 = (v72 - v70) / v83;
    }
    else
    {
      v84 = 0;
      LODWORD(v85) = 0;
    }
    v86 = *(_QWORD ***)(a1 + 64);
    v212 = v6;
    if (!v86)
    {
      v89 = 0;
      goto LABEL_158;
    }
    v87 = *v86;
    v88 = 8 * (v72 - v71);
    LODWORD(v224) = v88;
    if (v88 <= 63)
    {
      switch(v88)
      {
        case 32:
          v89 = *v87 + 1960;
          goto LABEL_157;
        case 16:
          v89 = *v87 + 1936;
          goto LABEL_157;
        case 8:
          v89 = *v87 + 1912;
          goto LABEL_157;
      }
    }
    else
    {
      if (v88 == 64)
      {
        v89 = *v87 + 1984;
LABEL_157:
        v82 = *(_QWORD *)(a1 + 72);
LABEL_158:
        if (v82)
          v121 = v73;
        else
          v121 = 1;
        v210 = v5;
        v206 = v85;
        v208 = (const llvm::APInt *)v84;
        v205 = v89;
        if ((v121 & 1) != 0)
        {
          if (*(_QWORD *)(a1 + 64))
            v122 = v73;
          else
            v122 = 1;
          v123 = (llvm::PointerType *)v89;
          if (v122 == 1)
            v123 = *(llvm::PointerType **)(a1 + 56);
        }
        else
        {
          v124 = (llvm::Type *)(v85 - v84);
          v123 = *(llvm::PointerType **)(v82 + 24);
          if ((_DWORD)v124 != 1)
          {
            llvm::FixedVectorType::get(*(llvm::FixedVectorType **)(v82 + 24), v124);
            v123 = v125;
          }
        }
        v126 = llvm::PointerType::get(v123, v58);
        v127 = *(llvm::DataLayout **)a1;
        v215 = v219;
        if (v219 > 0x40)
        {
          v214 = (void *)operator new[]();
          memcpy(v214, __src, (((unint64_t)v215 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v214 = __src;
        }
        if ((*((_BYTE *)v53 + 23) & 0x10) == 0)
        {
          v138 = 0;
          v137 = &byte_1C871356D;
          goto LABEL_181;
        }
        v128 = ***(_QWORD ***)v53;
        v129 = *(_QWORD *)(v128 + 152);
        v130 = *(unsigned int *)(v128 + 168);
        if ((_DWORD)v130)
        {
          LODWORD(v131) = (v130 - 1) & ((v53 >> 4) ^ (v53 >> 9));
          v132 = (const llvm::APInt **)(v129 + 16 * v131);
          v133 = *v132;
          if (*v132 == v53)
          {
LABEL_180:
            v136 = v132[1];
            v139 = *(unint64_t **)v136;
            v137 = (char *)v136 + 16;
            v138 = v139;
LABEL_181:
            v227 = 773;
            v224 = (unint64_t)v137;
            v225 = v138;
            v226 = ".";
            v140 = sub_1C5C10A54(a1 + 176, v127, v53, &v214, v126, (uint64_t)&v224);
            if (v215 >= 0x41 && v214)
              MEMORY[0x1CAA32F9C](v214, 0x1000C8000313F17);
            v141 = *(_QWORD *)(a1 + 32);
            v142 = v210;
            if (v210 != v212)
            {
              v143 = v69 | 0x100;
              if (*(_QWORD *)(a1 + 72))
                v144 = v73;
              else
                v144 = 1;
              if ((v144 & 1) != 0)
              {
                if (*(_QWORD *)(a1 + 64))
                  v145 = v73;
                else
                  v145 = 1;
                if ((v145 & 1) != 0)
                {
                  v207 = v140;
                  v140 = *(unsigned __int8 **)(a1 + 32);
                  v146 = v213;
                  goto LABEL_195;
                }
                v163 = *(_QWORD *)(v141 + 64);
                v164 = *(_WORD *)(v141 + 18) & 0x3F | 0x100;
                v224 = (unint64_t)"load";
                v227 = 259;
                v165 = (unsigned __int8 *)sub_1C506D920((uint64_t *)(a1 + 176), v163, v141, v164, 0, (uint64_t)&v224);
                v166 = (uint64_t *)sub_1C5C1D6BC(*(llvm::DataLayout **)a1, (llvm::DataLayout *)(a1 + 176), v165, *(llvm::Type **)(a1 + 64));
                v167 = *(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 40);
                v168 = *(_BYTE **)a1;
                v224 = (unint64_t)"extract";
                v227 = 259;
                v155 = sub_1C5C1E154(v168, (uint64_t *)(a1 + 176), v166, v205, v167, (uint64_t)&v224);
              }
              else
              {
                v152 = *(_QWORD *)(v141 + 64);
                v153 = *(_WORD *)(v141 + 18) & 0x3F | 0x100;
                v224 = (unint64_t)"load";
                v227 = 259;
                v154 = (llvm::PoisonValue **)sub_1C506D920((uint64_t *)(a1 + 176), v152, v141, v153, 0, (uint64_t)&v224);
                v224 = (unint64_t)"vec";
                v227 = 259;
                v155 = sub_1C5C1DEEC(a1 + 176, v154, v208, v206, (uint64_t)&v224);
              }
              v157 = (llvm::Value *)v155;
              goto LABEL_239;
            }
            v143 = v213 | 0x100;
            v207 = *(unsigned __int8 **)(a1 + 32);
            v146 = v69;
LABEL_195:
            v147 = v146 | 0x100;
            v148 = ((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[12];
            v149 = (llvm::APInt *)(v148 + 24);
            v150 = *(_DWORD *)(v148 + 32);
            if (v150 > 0x40)
              v151 = llvm::APInt::countLeadingZerosSlowCase(v149) == v150;
            else
              v151 = *(_QWORD *)v149 == 0;
            v156 = v151;
            v224 = (unint64_t)"copyload";
            v227 = 259;
            v157 = sub_1C506D920((uint64_t *)(a1 + 176), (uint64_t)v123, (uint64_t)v140, v147, v156 ^ 1u, (uint64_t)&v224);
            v224 = 0x190000000ALL;
            llvm::Instruction::copyMetadata((uint64_t)v157, (uint64_t)this, (int *)&v224, 2);
            v159 = v220;
            v161 = v222;
            v160 = v223;
            if (!v220 && !v221 && !v222 && !v223)
              goto LABEL_225;
            if (v221)
            {
              v162 = llvm::AAMDNodes::shiftTBAAStruct(v221, (llvm::MDNode *)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 96)), v158);
              v161 = v222;
              v160 = v223;
              if (!v159)
                goto LABEL_279;
            }
            else
            {
              v162 = 0;
              if (!v220)
              {
LABEL_279:
                if (!*((_QWORD *)v157 + 6) && (*((_BYTE *)v157 + 23) & 0x20) == 0)
                  goto LABEL_213;
              }
            }
            llvm::Value::setMetadata(v157, 1, v159);
LABEL_213:
            if (v162 || *((_QWORD *)v157 + 6) || (*((_BYTE *)v157 + 23) & 0x20) != 0)
              llvm::Value::setMetadata(v157, 5, v162);
            if (v161 || *((_QWORD *)v157 + 6) || (*((_BYTE *)v157 + 23) & 0x20) != 0)
              llvm::Value::setMetadata(v157, 7, v161);
            v142 = v210;
            if (v160 || *((_QWORD *)v157 + 6) || (*((_BYTE *)v157 + 23) & 0x20) != 0)
              llvm::Value::setMetadata(v157, 8, v160);
LABEL_225:
            if (*(_QWORD *)(a1 + 72))
              v169 = v73;
            else
              v169 = 1;
            if ((v169 & 1) != 0 || v142 != v212)
            {
              if (*(_QWORD *)(a1 + 64))
                v175 = v73;
              else
                v175 = 1;
              if ((v175 & 1) != 0 || v142 != v212)
                goto LABEL_238;
              v176 = *(_QWORD *)(a1 + 32);
              v177 = *(_QWORD *)(v176 + 64);
              v178 = *(_WORD *)(v176 + 18) & 0x3F | 0x100;
              v224 = (unint64_t)"oldload";
              v227 = 259;
              v179 = (unsigned __int8 *)sub_1C506D920((uint64_t *)(a1 + 176), v177, v176, v178, 0, (uint64_t)&v224);
              v180 = sub_1C5C1D6BC(*(llvm::DataLayout **)a1, (llvm::DataLayout *)(a1 + 176), v179, *(llvm::Type **)(a1 + 64));
              v181 = *(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 40);
              v182 = *(_BYTE **)a1;
              v224 = (unint64_t)"insert";
              v227 = 259;
              v183 = (unsigned __int8 *)sub_1C5C1D8EC(v182, (uint64_t *)(a1 + 176), (llvm::ConstantInt ***)v180, (unsigned __int8 *)v157, v181, (uint64_t)&v224);
              v174 = sub_1C5C1D6BC(*(llvm::DataLayout **)a1, (llvm::DataLayout *)(a1 + 176), v183, *(llvm::Type **)(a1 + 56));
            }
            else
            {
              v170 = *(_QWORD *)(a1 + 32);
              v171 = *(_QWORD *)(v170 + 64);
              v172 = *(_WORD *)(v170 + 18) & 0x3F | 0x100;
              v224 = (unint64_t)"oldload";
              v227 = 259;
              v173 = sub_1C506D920((uint64_t *)(a1 + 176), v171, v170, v172, 0, (uint64_t)&v224);
              v224 = (unint64_t)"vec";
              v227 = 259;
              v174 = sub_1C5C1E2F8(a1 + 176, v173, v157, v208, (uint64_t)&v224);
            }
            v157 = (llvm::Value *)v174;
LABEL_238:
            v140 = v207;
LABEL_239:
            v184 = ((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[12];
            v185 = (llvm::APInt *)(v184 + 24);
            v186 = *(_DWORD *)(v184 + 32);
            if (v186 > 0x40)
              v187 = llvm::APInt::countLeadingZerosSlowCase(v185) == v186;
            else
              v187 = *(_QWORD *)v185 == 0;
            v188 = v187;
            v189 = sub_1C509CCE8((uint64_t *)(a1 + 176), (uint64_t *)v157, (uint64_t)v140, v143, v188 ^ 1u);
            v224 = 0x190000000ALL;
            llvm::Instruction::copyMetadata((uint64_t)v189, (uint64_t)this, (int *)&v224, 2);
            v191 = v220;
            v193 = v222;
            v192 = v223;
            if (!v220 && !v221 && !v222 && !v223)
            {
LABEL_266:
              v195 = ((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[12];
              v196 = (llvm::APInt *)(v195 + 24);
              v197 = *(_DWORD *)(v195 + 32);
              if (v197 > 0x40)
                v198 = llvm::APInt::countLeadingZerosSlowCase(v196) == v197;
              else
                v198 = *(_QWORD *)v196 == 0;
              v49 = v198;
              goto LABEL_272;
            }
            if (v221)
            {
              v194 = llvm::AAMDNodes::shiftTBAAStruct(v221, (llvm::MDNode *)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 96)), v190);
              v193 = v222;
              v192 = v223;
              if (!v191)
                goto LABEL_276;
            }
            else
            {
              v194 = 0;
              if (!v220)
              {
LABEL_276:
                if (!*((_QWORD *)v189 + 6) && (*((_BYTE *)v189 + 23) & 0x20) == 0)
                  goto LABEL_254;
              }
            }
            llvm::Value::setMetadata(v189, 1, v191);
LABEL_254:
            if (v194 || *((_QWORD *)v189 + 6) || (*((_BYTE *)v189 + 23) & 0x20) != 0)
              llvm::Value::setMetadata(v189, 5, v194);
            if (v193 || *((_QWORD *)v189 + 6) || (*((_BYTE *)v189 + 23) & 0x20) != 0)
              llvm::Value::setMetadata(v189, 7, v193);
            if (v192 || *((_QWORD *)v189 + 6) || (*((_BYTE *)v189 + 23) & 0x20) != 0)
              llvm::Value::setMetadata(v189, 8, v192);
            goto LABEL_266;
          }
          v134 = 1;
          while (v133 != (const llvm::APInt *)-4096)
          {
            v135 = v131 + v134++;
            v131 = v135 & (v130 - 1);
            v133 = *(const llvm::APInt **)(v129 + 16 * v131);
            if (v133 == v53)
            {
              v132 = (const llvm::APInt **)(v129 + 16 * v131);
              goto LABEL_180;
            }
          }
        }
        v132 = (const llvm::APInt **)(v129 + 16 * v130);
        goto LABEL_180;
      }
      if (v88 == 128)
      {
        v89 = *v87 + 2008;
        goto LABEL_157;
      }
    }
    v200 = (const llvm::APInt *)v84;
    v201 = v85;
    v202 = sub_1C5270984(*v87 + 2168, &v224);
    LODWORD(v85) = v201;
    v84 = (unint64_t)v200;
    v203 = v202;
    v89 = *((_QWORD *)v202 + 1);
    if (!v89)
    {
      v211 = v203;
      v89 = sub_1C484358C(*v87 + 2040, 24, 3);
      LODWORD(v85) = v201;
      v84 = (unint64_t)v200;
      v204 = v224;
      *(_QWORD *)v89 = v87;
      *(_QWORD *)(v89 + 16) = 0;
      *(_DWORD *)(v89 + 8) = (v204 << 8) | 0xD;
      *(_DWORD *)(v89 + 12) = 0;
      *((_QWORD *)v211 + 1) = v89;
    }
    goto LABEL_157;
  }
  if (*(_QWORD *)(a1 + 24) != v7)
  {
    v11 = 1;
    goto LABEL_8;
  }
  v113 = *(_QWORD *)(a1 + 120);
  if (v113 == *(_QWORD *)(a1 + 104))
    return 0;
  v114 = llvm::ConstantInt::get(*((llvm::ConstantInt ***)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[8], v113 - *(_QWORD *)(a1 + 112), 0);
  v115 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
  v116 = (llvm::Value ***)(v115 + 64);
  if (*((_QWORD *)v115 + 8))
  {
    **((_QWORD **)v115 + 10) = *((_QWORD *)v115 + 9);
    v117 = *((_QWORD *)v115 + 9);
    if (v117)
      *(_QWORD *)(v117 + 16) = *((_QWORD *)v115 + 10);
  }
  *v116 = v114;
  if (!v114)
    return 0;
  v120 = v114[1];
  v118 = (llvm::Value ****)(v114 + 1);
  v119 = v120;
  *((_QWORD *)v115 + 9) = v120;
  if (v120)
    *((_QWORD *)v119 + 2) = v115 + 72;
  v49 = 0;
  *((_QWORD *)v115 + 10) = v118;
  *v118 = v116;
  return v49;
}

uint64_t sub_1C5C200A8(uint64_t a1, unsigned __int8 *a2, int a3)
{
  unsigned __int8 *v3;
  _QWORD *v5;
  int v6;
  llvm::Constant *v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  llvm::Type *v10;
  llvm::ConstantExpr *AllOnesValue;
  llvm::Type *v12;
  llvm::ValueHandleBase *v13;
  llvm::UndefValue *v14;
  llvm::Constant *v15;
  llvm::ValueHandleBase *UDiv;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  const char *v21;
  __int16 v22;
  _QWORD v23[4];
  __int16 v24;

  v3 = a2;
  if (a3 != 1)
  {
    v5 = **(_QWORD ***)a2;
    v6 = 8 * a3;
    LODWORD(v23[0]) = 8 * a3;
    if (8 * a3 <= 63)
    {
      switch(v6)
      {
        case 32:
          v7 = (llvm::Constant *)(*v5 + 1960);
          goto LABEL_5;
        case 16:
          v7 = (llvm::Constant *)(*v5 + 1936);
          goto LABEL_5;
        case 8:
          v7 = (llvm::Constant *)(*v5 + 1912);
          goto LABEL_5;
      }
    }
    else
    {
      if (v6 == 64)
      {
        v7 = (llvm::Constant *)(*v5 + 1984);
LABEL_5:
        v8 = (uint64_t *)(a1 + 176);
        v23[0] = "zext";
        v24 = 259;
        v9 = sub_1C4773E38(v8, 39, v3, (uint64_t)v7, (uint64_t)v23);
        AllOnesValue = llvm::Constant::getAllOnesValue(v7, v10);
        v13 = llvm::Constant::getAllOnesValue(*(llvm::Constant **)v3, v12);
        v14 = sub_1C537D3B8((llvm *)0x27, (uint64_t)v13, v7, 0);
        UDiv = llvm::ConstantExpr::getUDiv(AllOnesValue, v14, 0, v15);
        v21 = "isplat";
        v22 = 259;
        return sub_1C4EC4040((uint64_t)v8, (uint64_t)v9, (uint64_t)UDiv, (uint64_t)&v21, 0, 0);
      }
      if (v6 == 128)
      {
        v7 = (llvm::Constant *)(*v5 + 2008);
        goto LABEL_5;
      }
    }
    v18 = sub_1C5270984(*v5 + 2168, v23);
    v7 = (llvm::Constant *)*((_QWORD *)v18 + 1);
    if (!v7)
    {
      v19 = v18;
      v7 = (llvm::Constant *)sub_1C484358C(*v5 + 2040, 24, 3);
      v20 = v23[0];
      *(_QWORD *)v7 = v5;
      *((_QWORD *)v7 + 2) = 0;
      *((_QWORD *)v7 + 1) = (v20 << 8) | 0xDu;
      *((_QWORD *)v19 + 1) = v7;
    }
    goto LABEL_5;
  }
  return (uint64_t)v3;
}

uint64_t sub_1C5C20254(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_17:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_17;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t sub_1C5C202F8(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C6325180(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 72; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C6325180(a1, v14, v8);
}

char *sub_1C5C20460(char *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  llvm::SmallPtrSetImplBase *v4;
  uint64_t v5;
  char v6;
  unint64_t v7;

  if (a2)
  {
    v2 = a2;
    v3 = (uint64_t)result;
    v4 = (llvm::SmallPtrSetImplBase *)(result + 80);
    v5 = (uint64_t)(result + 16);
    do
    {
      result = (char *)sub_1C4774094(v4, *(_QWORD *)(v2 + 24));
      if (v6)
      {
        v7 = *(unsigned int *)(v3 + 8);
        if (v7 >= *(unsigned int *)(v3 + 12))
        {
          result = (char *)llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v5, v7 + 1, 8);
          v7 = *(unsigned int *)(v3 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v3 + 8 * v7) = v2;
        ++*(_DWORD *)(v3 + 8);
      }
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1C5C204F0(uint64_t result, uint64_t a2, const llvm::APInt *a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  llvm::GetElementPtrInst *v12;
  uint64_t *v13;
  llvm::Value *v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  const char *v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  __int16 v24;
  const char *v25;
  const char *v26;
  llvm::Value *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  const llvm::APInt *v31;
  llvm::AAMDNodes *v32;
  llvm::MDNode *v33;
  llvm::MDNode *v34;
  llvm::MDNode *v35;
  llvm::MDNode *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  int v41;
  __int16 v42;
  const char *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  llvm::ConstantInt *v49;
  unint64_t v50;
  unint64_t v51;
  llvm::ValueHandleBase *v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  char v56;
  char v57;
  const char **v58;
  const char *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  llvm::ConstantInt *v65;
  unint64_t v66;
  unint64_t v67;
  llvm::ValueHandleBase *v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  char v72;
  char v73;
  const char **v74;
  const char *v75;
  const char *v76;
  llvm::MDNode **v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  const char *v87;
  const char *v88;
  __int16 v89;
  const char *v90;
  const char *v91;
  const char *v92;
  __int16 v93;

  v7 = result;
  if ((*(_DWORD *)(a2 + 8) & 0xFE) != 0x12)
  {
    v8 = *(_DWORD *)(a2 + 8);
    if (v8 > 0x15)
      return result;
    if (((1 << v8) & 0x20AC7F) == 0)
    {
      if (v8 != 16)
      {
        if (v8 != 17)
          return result;
        v45 = *(unsigned int *)(a2 + 32);
        if (!*(_DWORD *)(a2 + 32))
          return result;
        v46 = 0;
        v82 = result + 24;
        v84 = result + 8;
        v78 = result + 56;
        v80 = result + 40;
        v47 = *(_DWORD *)(result + 16);
        while (1)
        {
          if (v47 >= *(_DWORD *)(v7 + 20))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v84, v82, v47 + 1, 4);
            v47 = *(_DWORD *)(v7 + 16);
          }
          *(_DWORD *)(*(_QWORD *)(v7 + 8) + 4 * v47) = v46;
          ++*(_DWORD *)(v7 + 16);
          v48 = **(_QWORD **)(*(_QWORD *)v7 + 64);
          v49 = *(llvm::ConstantInt **)(v48 + 1960);
          v50 = *(unsigned int *)(v48 + 1968);
          LODWORD(v91) = v50 >> 8;
          if (v50 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v90, v46, 0);
          }
          else
          {
            if (v50 <= 0xFF)
              v51 = 0;
            else
              v51 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v50);
            v90 = (const char *)(v51 & v46);
          }
          v52 = llvm::ConstantInt::get(v49, (llvm::LLVMContext *)&v90, a3);
          if (v91 >= 0x41 && v90)
            MEMORY[0x1CAA32F9C](v90, 0x1000C8000313F17);
          v53 = *(unsigned int *)(v7 + 48);
          if (v53 >= *(unsigned int *)(v7 + 52))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v80, v78, v53 + 1, 8);
            v53 = *(unsigned int *)(v7 + 48);
          }
          *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8 * v53) = v52;
          ++*(_DWORD *)(v7 + 48);
          v54 = *(_QWORD *)(a2 + 24);
          v55 = *(unsigned __int8 *)(a4 + 32);
          if (v55 == 1)
            break;
          if (*(_BYTE *)(a4 + 32))
          {
            v59 = *(const char **)a4;
            v60 = *(const char **)(a4 + 8);
            v56 = 2;
            if (*(_BYTE *)(a4 + 33) != 1)
            {
              LOBYTE(v55) = 2;
              v59 = (const char *)a4;
            }
            v86 = v59;
            v87 = v60;
            v88 = ".";
            LOBYTE(v89) = v55;
            HIBYTE(v89) = 3;
            v58 = &v86;
            goto LABEL_81;
          }
          v56 = 0;
          v89 = 256;
          v57 = 1;
LABEL_82:
          LOBYTE(v93) = v56;
          HIBYTE(v93) = v57;
          result = sub_1C5C204F0(v7, v54, a3, &v90);
          --*(_DWORD *)(v7 + 48);
          v47 = *(_DWORD *)(v7 + 16) - 1;
          *(_DWORD *)(v7 + 16) = v47;
          if (v45 == ++v46)
            return result;
        }
        v86 = ".";
        v89 = 259;
        v56 = 3;
        v58 = (const char **)".";
        v59 = v87;
LABEL_81:
        v90 = (const char *)v58;
        v91 = v59;
        v57 = 8;
        v92 = (const char *)v46;
        goto LABEL_82;
      }
      v61 = *(unsigned int *)(a2 + 12);
      if (!(_DWORD)v61)
        return result;
      v62 = 0;
      v83 = result + 24;
      v85 = result + 8;
      v79 = result + 56;
      v81 = result + 40;
      v63 = *(_DWORD *)(result + 16);
      while (1)
      {
        if (v63 >= *(_DWORD *)(v7 + 20))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v85, v83, v63 + 1, 4);
          v63 = *(_DWORD *)(v7 + 16);
        }
        *(_DWORD *)(*(_QWORD *)(v7 + 8) + 4 * v63) = v62;
        ++*(_DWORD *)(v7 + 16);
        v64 = **(_QWORD **)(*(_QWORD *)v7 + 64);
        v65 = *(llvm::ConstantInt **)(v64 + 1960);
        v66 = *(unsigned int *)(v64 + 1968);
        LODWORD(v91) = v66 >> 8;
        if (v66 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v90, v62, 0);
        }
        else
        {
          if (v66 <= 0xFF)
            v67 = 0;
          else
            v67 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v66);
          v90 = (const char *)(v67 & v62);
        }
        v68 = llvm::ConstantInt::get(v65, (llvm::LLVMContext *)&v90, a3);
        if (v91 >= 0x41 && v90)
          MEMORY[0x1CAA32F9C](v90, 0x1000C8000313F17);
        v69 = *(unsigned int *)(v7 + 48);
        if (v69 >= *(unsigned int *)(v7 + 52))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v81, v79, v69 + 1, 8);
          v69 = *(unsigned int *)(v7 + 48);
        }
        *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8 * v69) = v68;
        ++*(_DWORD *)(v7 + 48);
        v70 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v62);
        v71 = *(unsigned __int8 *)(a4 + 32);
        if (v71 == 1)
          break;
        if (*(_BYTE *)(a4 + 32))
        {
          v75 = *(const char **)a4;
          v76 = *(const char **)(a4 + 8);
          v72 = 2;
          if (*(_BYTE *)(a4 + 33) != 1)
          {
            LOBYTE(v71) = 2;
            v75 = (const char *)a4;
          }
          v86 = v75;
          v87 = v76;
          v88 = ".";
          LOBYTE(v89) = v71;
          HIBYTE(v89) = 3;
          v74 = &v86;
          goto LABEL_109;
        }
        v72 = 0;
        v89 = 256;
        v73 = 1;
LABEL_110:
        LOBYTE(v93) = v72;
        HIBYTE(v93) = v73;
        result = sub_1C5C204F0(v7, v70, a3, &v90);
        --*(_DWORD *)(v7 + 48);
        v63 = *(_DWORD *)(v7 + 16) - 1;
        *(_DWORD *)(v7 + 16) = v63;
        if (v61 == ++v62)
          return result;
      }
      v86 = ".";
      v89 = 259;
      v72 = 3;
      v74 = (const char **)".";
      v75 = v87;
LABEL_109:
      v90 = (const char *)v74;
      v91 = v75;
      v73 = 8;
      v92 = (const char *)v62;
      goto LABEL_110;
    }
  }
  v9 = (1 << *(_BYTE *)(result + 104)) | llvm::DataLayout::getIndexedOffsetInType(*(llvm::DataLayout **)(result + 112), *(_QWORD *)(result + 96), *(llvm::UndefValue ***)(result + 40), *(unsigned int *)(result + 48));
  v10 = 63 - __clz(v9 & -v9);
  v11 = *(uint64_t **)v7;
  v13 = *(uint64_t **)(v7 + 88);
  v12 = *(llvm::GetElementPtrInst **)(v7 + 96);
  v14 = *(llvm::Value **)(v7 + 40);
  v15 = *(unsigned int *)(v7 + 48);
  v16 = *(unsigned __int8 *)(a4 + 32);
  if (v16 == 1)
  {
    v90 = ".gep";
    v17 = 259;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(a4 + 32))
  {
    v17 = 256;
LABEL_8:
    v93 = v17;
    goto LABEL_13;
  }
  v18 = *(const char **)(a4 + 8);
  if (*(_BYTE *)(a4 + 33) == 1)
  {
    v19 = *(const char **)a4;
  }
  else
  {
    LOBYTE(v16) = 2;
    v19 = (const char *)a4;
  }
  v90 = v19;
  v91 = v18;
  v92 = ".gep";
  LOBYTE(v93) = v16;
  HIBYTE(v93) = 3;
LABEL_13:
  v20 = v10;
  v21 = sub_1C53901A0(v11, v12, v13, v14, v15, (uint64_t)&v90);
  v22 = *(uint64_t **)v7;
  v23 = *(unsigned __int8 *)(a4 + 32);
  if (v23 == 1)
  {
    v90 = ".load";
    v24 = 259;
    goto LABEL_17;
  }
  if (!*(_BYTE *)(a4 + 32))
  {
    v24 = 256;
LABEL_17:
    v93 = v24;
    goto LABEL_22;
  }
  v25 = *(const char **)(a4 + 8);
  if (*(_BYTE *)(a4 + 33) == 1)
  {
    v26 = *(const char **)a4;
  }
  else
  {
    LOBYTE(v23) = 2;
    v26 = (const char *)a4;
  }
  v90 = v26;
  v91 = v25;
  v92 = ".load";
  LOBYTE(v93) = v23;
  HIBYTE(v93) = 3;
LABEL_22:
  v27 = sub_1C506D920(v22, a2, v21, v20 | 0x100u, 0, (uint64_t)&v90);
  v28 = **(_QWORD **)(v7 + 88);
  v29 = *(_DWORD *)(v28 + 8);
  if ((v29 & 0xFE) == 0x12)
    v29 = *(_DWORD *)(**(_QWORD **)(v28 + 16) + 8);
  LODWORD(v87) = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(*(llvm::DataLayout **)(v7 + 112), v29 >> 8) + 12);
  if (v87 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v86, 0, 0);
  else
    v86 = 0;
  if ((*(_QWORD *)(v7 + 120) || *(_QWORD *)(v7 + 128) || *(_QWORD *)(v7 + 136) || *(_QWORD *)(v7 + 144))
    && llvm::GEPOperator::accumulateConstantOffset(*(_QWORD *)(v7 + 96), *(llvm::UndefValue ***)(v7 + 40), *(unsigned int *)(v7 + 48), *(llvm::DataLayout **)(v7 + 112), (uint64_t)&v86, 0, v30))
  {
    v33 = *(llvm::MDNode **)(v7 + 120);
    v32 = *(llvm::AAMDNodes **)(v7 + 128);
    if (v32)
    {
      v77 = (llvm::MDNode **)&v86;
      if (v87 >= 0x41)
        v77 = (llvm::MDNode **)v86;
      v34 = llvm::AAMDNodes::shiftTBAAStruct(v32, *v77, v31);
    }
    else
    {
      v34 = 0;
    }
    v36 = *(llvm::MDNode **)(v7 + 136);
    v35 = *(llvm::MDNode **)(v7 + 144);
    if (v33 || *((_QWORD *)v27 + 6) || (*((_BYTE *)v27 + 23) & 0x20) != 0)
      llvm::Value::setMetadata(v27, 1, v33);
    if (v34 || *((_QWORD *)v27 + 6) || (*((_BYTE *)v27 + 23) & 0x20) != 0)
      llvm::Value::setMetadata(v27, 5, v34);
    if (v36 || *((_QWORD *)v27 + 6) || (*((_BYTE *)v27 + 23) & 0x20) != 0)
      llvm::Value::setMetadata(v27, 7, v36);
    if (v35 || *((_QWORD *)v27 + 6) || (*((_BYTE *)v27 + 23) & 0x20) != 0)
      llvm::Value::setMetadata(v27, 8, v35);
  }
  v37 = *(_QWORD *)a3;
  v38 = *(_QWORD *)v7;
  v39 = *(void **)(v7 + 8);
  v40 = *(unsigned int *)(v7 + 16);
  v41 = *(unsigned __int8 *)(a4 + 32);
  if (v41 == 1)
  {
    v90 = ".insert";
    v42 = 259;
  }
  else
  {
    if (*(_BYTE *)(a4 + 32))
    {
      v43 = *(const char **)(a4 + 8);
      if (*(_BYTE *)(a4 + 33) == 1)
      {
        v44 = *(const char **)a4;
      }
      else
      {
        LOBYTE(v41) = 2;
        v44 = (const char *)a4;
      }
      v90 = v44;
      v91 = v43;
      v92 = ".insert";
      LOBYTE(v93) = v41;
      HIBYTE(v93) = 3;
      goto LABEL_56;
    }
    v42 = 256;
  }
  v93 = v42;
LABEL_56:
  result = sub_1C506D788(v38, v37, (uint64_t)v27, v39, v40, (uint64_t)&v90);
  *(_QWORD *)a3 = result;
  if (v87 >= 0x41)
  {
    result = (uint64_t)v86;
    if (v86)
      return MEMORY[0x1CAA32F9C](v86, 0x1000C8000313F17);
  }
  return result;
}

void sub_1C5C20CC0(uint64_t a1, uint64_t a2, const llvm::APInt *a3, uint64_t a4)
{
  unsigned int v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  const char *v16;
  const char *v17;
  __int16 v18;
  uint64_t *v19;
  uint64_t *v20;
  llvm::GetElementPtrInst *v21;
  uint64_t *v22;
  llvm::Value *v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  const char *v27;
  const char *v28;
  uint64_t v29;
  llvm::Value *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  const llvm::APInt *v34;
  llvm::AAMDNodes *v35;
  llvm::MDNode *v36;
  llvm::MDNode *v37;
  llvm::MDNode *v38;
  llvm::MDNode *v39;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  llvm::ConstantInt *v45;
  unint64_t v46;
  unint64_t v47;
  llvm::ValueHandleBase *v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  char v52;
  char v53;
  const char **v54;
  const char *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  llvm::ConstantInt *v61;
  unint64_t v62;
  unint64_t v63;
  llvm::ValueHandleBase *v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  char v68;
  char v69;
  const char **v70;
  const char *v71;
  const char *v72;
  llvm::MDNode **v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  const char *v83;
  const char *v84;
  __int16 v85;
  const char *v86;
  const char *v87;
  const char *v88;
  __int16 v89;

  if ((*(_DWORD *)(a2 + 8) & 0xFE) != 0x12)
  {
    v7 = *(_DWORD *)(a2 + 8);
    if (v7 > 0x15)
      return;
    if (((1 << v7) & 0x20AC7F) == 0)
    {
      if (v7 != 16)
      {
        if (v7 != 17)
          return;
        v41 = *(unsigned int *)(a2 + 32);
        if (!*(_DWORD *)(a2 + 32))
          return;
        v42 = 0;
        v78 = a1 + 24;
        v80 = a1 + 8;
        v74 = a1 + 56;
        v76 = a1 + 40;
        v43 = *(_DWORD *)(a1 + 16);
        while (1)
        {
          if (v43 >= *(_DWORD *)(a1 + 20))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v80, v78, v43 + 1, 4);
            v43 = *(_DWORD *)(a1 + 16);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v43) = v42;
          ++*(_DWORD *)(a1 + 16);
          v44 = **(_QWORD **)(*(_QWORD *)a1 + 64);
          v45 = *(llvm::ConstantInt **)(v44 + 1960);
          v46 = *(unsigned int *)(v44 + 1968);
          LODWORD(v87) = v46 >> 8;
          if (v46 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v86, v42, 0);
          }
          else
          {
            if (v46 <= 0xFF)
              v47 = 0;
            else
              v47 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v46);
            v86 = (const char *)(v47 & v42);
          }
          v48 = llvm::ConstantInt::get(v45, (llvm::LLVMContext *)&v86, a3);
          if (v87 >= 0x41 && v86)
            MEMORY[0x1CAA32F9C](v86, 0x1000C8000313F17);
          v49 = *(unsigned int *)(a1 + 48);
          if (v49 >= *(unsigned int *)(a1 + 52))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v76, v74, v49 + 1, 8);
            v49 = *(unsigned int *)(a1 + 48);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v49) = v48;
          ++*(_DWORD *)(a1 + 48);
          v50 = *(_QWORD *)(a2 + 24);
          v51 = *(unsigned __int8 *)(a4 + 32);
          if (v51 == 1)
            break;
          if (*(_BYTE *)(a4 + 32))
          {
            v55 = *(const char **)a4;
            v56 = *(const char **)(a4 + 8);
            v52 = 2;
            if (*(_BYTE *)(a4 + 33) != 1)
            {
              LOBYTE(v51) = 2;
              v55 = (const char *)a4;
            }
            v82 = v55;
            v83 = v56;
            v84 = ".";
            LOBYTE(v85) = v51;
            HIBYTE(v85) = 3;
            v54 = &v82;
            goto LABEL_72;
          }
          v52 = 0;
          v85 = 256;
          v53 = 1;
LABEL_73:
          LOBYTE(v89) = v52;
          HIBYTE(v89) = v53;
          sub_1C5C20CC0(a1, v50, a3, &v86);
          --*(_DWORD *)(a1 + 48);
          v43 = *(_DWORD *)(a1 + 16) - 1;
          *(_DWORD *)(a1 + 16) = v43;
          if (v41 == ++v42)
            return;
        }
        v82 = ".";
        v85 = 259;
        v52 = 3;
        v54 = (const char **)".";
        v55 = v83;
LABEL_72:
        v86 = (const char *)v54;
        v87 = v55;
        v53 = 8;
        v88 = (const char *)v42;
        goto LABEL_73;
      }
      v57 = *(unsigned int *)(a2 + 12);
      if (!(_DWORD)v57)
        return;
      v58 = 0;
      v79 = a1 + 24;
      v81 = a1 + 8;
      v75 = a1 + 56;
      v77 = a1 + 40;
      v59 = *(_DWORD *)(a1 + 16);
      while (1)
      {
        if (v59 >= *(_DWORD *)(a1 + 20))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v81, v79, v59 + 1, 4);
          v59 = *(_DWORD *)(a1 + 16);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v59) = v58;
        ++*(_DWORD *)(a1 + 16);
        v60 = **(_QWORD **)(*(_QWORD *)a1 + 64);
        v61 = *(llvm::ConstantInt **)(v60 + 1960);
        v62 = *(unsigned int *)(v60 + 1968);
        LODWORD(v87) = v62 >> 8;
        if (v62 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v86, v58, 0);
        }
        else
        {
          if (v62 <= 0xFF)
            v63 = 0;
          else
            v63 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v62);
          v86 = (const char *)(v63 & v58);
        }
        v64 = llvm::ConstantInt::get(v61, (llvm::LLVMContext *)&v86, a3);
        if (v87 >= 0x41 && v86)
          MEMORY[0x1CAA32F9C](v86, 0x1000C8000313F17);
        v65 = *(unsigned int *)(a1 + 48);
        if (v65 >= *(unsigned int *)(a1 + 52))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v77, v75, v65 + 1, 8);
          v65 = *(unsigned int *)(a1 + 48);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v65) = v64;
        ++*(_DWORD *)(a1 + 48);
        v66 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v58);
        v67 = *(unsigned __int8 *)(a4 + 32);
        if (v67 == 1)
          break;
        if (*(_BYTE *)(a4 + 32))
        {
          v71 = *(const char **)a4;
          v72 = *(const char **)(a4 + 8);
          v68 = 2;
          if (*(_BYTE *)(a4 + 33) != 1)
          {
            LOBYTE(v67) = 2;
            v71 = (const char *)a4;
          }
          v82 = v71;
          v83 = v72;
          v84 = ".";
          LOBYTE(v85) = v67;
          HIBYTE(v85) = 3;
          v70 = &v82;
          goto LABEL_100;
        }
        v68 = 0;
        v85 = 256;
        v69 = 1;
LABEL_101:
        LOBYTE(v89) = v68;
        HIBYTE(v89) = v69;
        sub_1C5C20CC0(a1, v66, a3, &v86);
        --*(_DWORD *)(a1 + 48);
        v59 = *(_DWORD *)(a1 + 16) - 1;
        *(_DWORD *)(a1 + 16) = v59;
        if (v57 == ++v58)
          return;
      }
      v82 = ".";
      v85 = 259;
      v68 = 3;
      v70 = (const char **)".";
      v71 = v83;
LABEL_100:
      v86 = (const char *)v70;
      v87 = v71;
      v69 = 8;
      v88 = (const char *)v58;
      goto LABEL_101;
    }
  }
  v8 = (1 << *(_BYTE *)(a1 + 104)) | llvm::DataLayout::getIndexedOffsetInType(*(llvm::DataLayout **)(a1 + 112), *(_QWORD *)(a1 + 96), *(llvm::UndefValue ***)(a1 + 40), *(unsigned int *)(a1 + 48));
  v9 = 63 - __clz(v8 & -v8);
  v10 = *(uint64_t **)a3;
  v11 = *(_QWORD *)a1;
  v12 = *(unsigned int **)(a1 + 8);
  v13 = *(unsigned int *)(a1 + 16);
  v14 = *(unsigned __int8 *)(a4 + 32);
  if (v14 == 1)
  {
    v86 = ".extract";
    v15 = 259;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(a4 + 32))
  {
    v15 = 256;
LABEL_8:
    v89 = v15;
    goto LABEL_13;
  }
  v16 = *(const char **)(a4 + 8);
  if (*(_BYTE *)(a4 + 33) == 1)
  {
    v17 = *(const char **)a4;
  }
  else
  {
    LOBYTE(v14) = 2;
    v17 = (const char *)a4;
  }
  v86 = v17;
  v87 = v16;
  v88 = ".extract";
  LOBYTE(v89) = v14;
  HIBYTE(v89) = 3;
LABEL_13:
  v18 = v9;
  v19 = (uint64_t *)sub_1C506DBC4(v11, v10, v12, v13, (uint64_t)&v86);
  v20 = *(uint64_t **)a1;
  v22 = *(uint64_t **)(a1 + 88);
  v21 = *(llvm::GetElementPtrInst **)(a1 + 96);
  v23 = *(llvm::Value **)(a1 + 40);
  v24 = *(unsigned int *)(a1 + 48);
  v25 = *(unsigned __int8 *)(a4 + 32);
  if (v25 == 1)
  {
    v86 = ".gep";
    v26 = 259;
  }
  else
  {
    if (*(_BYTE *)(a4 + 32))
    {
      v27 = *(const char **)(a4 + 8);
      if (*(_BYTE *)(a4 + 33) == 1)
      {
        v28 = *(const char **)a4;
      }
      else
      {
        LOBYTE(v25) = 2;
        v28 = (const char *)a4;
      }
      v86 = v28;
      v87 = v27;
      v88 = ".gep";
      LOBYTE(v89) = v25;
      HIBYTE(v89) = 3;
      goto LABEL_22;
    }
    v26 = 256;
  }
  v89 = v26;
LABEL_22:
  v29 = sub_1C53901A0(v20, v21, v22, v23, v24, (uint64_t)&v86);
  v30 = sub_1C509CCE8(*(uint64_t **)a1, v19, v29, v18 | 0x100u, 0);
  v31 = **(_QWORD **)(a1 + 88);
  v32 = *(_DWORD *)(v31 + 8);
  if ((v32 & 0xFE) == 0x12)
    v32 = *(_DWORD *)(**(_QWORD **)(v31 + 16) + 8);
  LODWORD(v87) = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(*(llvm::DataLayout **)(a1 + 112), v32 >> 8) + 12);
  if (v87 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v86, 0, 0);
  else
    v86 = 0;
  if ((*(_QWORD *)(a1 + 120) || *(_QWORD *)(a1 + 128) || *(_QWORD *)(a1 + 136) || *(_QWORD *)(a1 + 144))
    && llvm::GEPOperator::accumulateConstantOffset(*(_QWORD *)(a1 + 96), *(llvm::UndefValue ***)(a1 + 40), *(unsigned int *)(a1 + 48), *(llvm::DataLayout **)(a1 + 112), (uint64_t)&v86, 0, v33))
  {
    v36 = *(llvm::MDNode **)(a1 + 120);
    v35 = *(llvm::AAMDNodes **)(a1 + 128);
    if (v35)
    {
      v73 = (llvm::MDNode **)&v86;
      if (v87 >= 0x41)
        v73 = (llvm::MDNode **)v86;
      v37 = llvm::AAMDNodes::shiftTBAAStruct(v35, *v73, v34);
    }
    else
    {
      v37 = 0;
    }
    v39 = *(llvm::MDNode **)(a1 + 136);
    v38 = *(llvm::MDNode **)(a1 + 144);
    if (v36 || *((_QWORD *)v30 + 6) || (*((_BYTE *)v30 + 23) & 0x20) != 0)
      llvm::Value::setMetadata(v30, 1, v36);
    if (v37 || *((_QWORD *)v30 + 6) || (*((_BYTE *)v30 + 23) & 0x20) != 0)
      llvm::Value::setMetadata(v30, 5, v37);
    if (v39 || *((_QWORD *)v30 + 6) || (*((_BYTE *)v30 + 23) & 0x20) != 0)
      llvm::Value::setMetadata(v30, 7, v39);
    if (v38 || *((_QWORD *)v30 + 6) || (*((_BYTE *)v30 + 23) & 0x20) != 0)
      llvm::Value::setMetadata(v30, 8, v38);
  }
  if (v87 >= 0x41)
  {
    if (v86)
      MEMORY[0x1CAA32F9C](v86, 0x1000C8000313F17);
  }
}

const char *sub_1C5C21424()
{
  return "SROA";
}

BOOL sub_1C5C21434(uint64_t a1, const llvm::Function *a2)
{
  char **v4;
  char *v5;
  uint64_t v6;
  char **v7;
  char *v8;
  llvm::DominatorTree *v9;
  llvm::AssumptionCacheTracker *v10;
  llvm::AssumptionCache *AssumptionCache;
  char *v12;
  _BYTE *v13;
  _BOOL8 v14;
  char *v16;
  char *v17;
  _BYTE v18[40];
  void *v19;
  int v20;
  int v21;

  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, a2) & 1) != 0)
    return 0;
  v4 = **(char ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != llvm::DominatorTreeWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::DominatorTreeWrapperPass::ID);
  v7 = **(char ****)(a1 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != llvm::AssumptionCacheTracker::ID);
  v9 = (llvm::DominatorTree *)(v6 + 32);
  v10 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), llvm::AssumptionCacheTracker::ID);
  AssumptionCache = (llvm::AssumptionCache *)llvm::AssumptionCacheTracker::getAssumptionCache(v10, a2);
  llvm::SROAPass::runImpl((int32x2_t *)(a1 + 32), (int32x2_t **)a2, v9, AssumptionCache, (uint64_t)&v16);
  if (v20 == v21)
  {
    v12 = (char *)sub_1C477672C((uint64_t)&v16, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
    if (v17 == v16)
      v13 = &v18[4];
    else
      v13 = v18;
    v14 = v12 == &v17[8 * *(unsigned int *)v13];
  }
  else
  {
    v14 = 1;
  }
  if (v19 != *(void **)&v18[32])
    free(v19);
  if (v17 != v16)
    free(v17);
  return v14;
}

void sub_1C5C2157C(uint64_t *a1, uint64_t a2, uint64_t a3, llvm::APInt *this, unint64_t a5, char a6)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  unint64_t v20;
  unsigned int v21;
  llvm::APInt *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  unint64_t v28;

  v10 = 0;
  if (*(_BYTE *)(a2 + 8) == 13 && (a6 & 1) == 0)
  {
    v12 = *a1;
    sub_1C4768AD0(*a1, a2);
    v14 = v13;
    v16 = v15;
    sub_1C4768AD0(v12, a2);
    if (v16 == (v18 == 1) && v14 == ((v17 + 7) & 0xFFFFFFFFFFFFFFF8))
      v10 = 4;
    else
      v10 = 0;
  }
  if (!a5)
    goto LABEL_19;
  v20 = a1[45];
  v21 = *((_DWORD *)this + 2);
  if (v21 >= 0x41 && v21 - llvm::APInt::countLeadingZerosSlowCase(this) > 0x40)
    goto LABEL_19;
  v22 = *(llvm::APInt **)this;
  if (v21 < 0x41)
    v22 = this;
  v23 = *(_QWORD *)v22;
  if (v20 > v23)
  {
    if (v20 - v23 >= a5)
      v24 = v23 + a5;
    else
      v24 = v20;
    v25 = a1[46] + 16;
    v26 = a1[41];
    v27.n128_u64[0] = v23;
    v27.n128_u64[1] = v24;
    v28 = v26 & 0xFFFFFFFFFFFFFFFBLL | v10;
    sub_1C4AB8FDC(v25, &v27);
  }
  else
  {
LABEL_19:
    sub_1C5C216B0((uint64_t)a1, a3);
  }
}

void *sub_1C5C216B0(uint64_t a1, uint64_t a2)
{
  void *result;
  char v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 520), a2);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 368);
    v7 = *(unsigned int *)(v6 + 232);
    if (v7 >= *(_DWORD *)(v6 + 236))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 224, v6 + 240, v7 + 1, 8);
      LODWORD(v7) = *(_DWORD *)(v6 + 232);
    }
    *(_QWORD *)(*(_QWORD *)(v6 + 224) + 8 * v7) = a2;
    ++*(_DWORD *)(v6 + 232);
  }
  return result;
}

void sub_1C5C21720(llvm::detail::PtrUseVisitorBase *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  llvm::UndefValue *v10;
  llvm::APInt *v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  int v18;
  llvm::UndefValue **v19;
  unsigned int v20;
  unsigned int v21;
  char *v22;
  uint64_t v23;
  llvm::Instruction *v24;
  char *v25;
  int v26;
  uint64_t v27;
  llvm::UndefValue **v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  char v32;
  uint64_t *v33;
  int v34;
  unsigned int v35;
  unint64_t *v36;
  uint64_t v37;
  unsigned __int32 v38;
  _QWORD *v39;
  unsigned __int32 v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  int v51;
  uint64_t j;
  uint64_t v54;
  char v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t **v59;
  unint64_t v60;
  unsigned int v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  int v75;
  _BYTE v76[32];
  __n128 v77;
  _QWORD v78[10];

  v78[8] = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a2 + 8))
  {
    sub_1C5C216B0((uint64_t)this, a2);
    return;
  }
  if (*(_BYTE *)(a2 + 16) == 83)
  {
    v4 = *(_QWORD *)(a2 + 40);
    v5 = v4 + 40;
    for (i = *(_QWORD *)(v4 + 48); ; i = *(_QWORD *)(i + 8))
    {
      if (i == v5)
        goto LABEL_89;
      v7 = i - 24;
      if (!i)
        v7 = 0;
      if (*(_BYTE *)(v7 + 16) != 83)
        break;
    }
    v14 = *(unsigned __int8 *)(i - 8) - 38;
    v15 = v14 > 0x38;
    v16 = (1 << v14) & 0x100060000000001;
    if (!v15 && v16 != 0)
      i = *(_QWORD *)(i + 8);
    if (v5 == i)
    {
LABEL_89:
      v58 = *((_QWORD *)this + 1) & 3 | a2;
      goto LABEL_90;
    }
    v18 = *(_DWORD *)(a2 + 20);
    if ((v18 & 0x40000000) != 0)
    {
      v19 = *(llvm::UndefValue ***)(a2 - 8);
      v20 = v18 & 0x7FFFFFF;
    }
    else
    {
      v20 = v18 & 0x7FFFFFF;
      v19 = (llvm::UndefValue **)(a2 - 32 * (v18 & 0x7FFFFFF));
    }
    v10 = *v19;
    v21 = v20 - 1;
    if (v20 != 1)
    {
      v22 = (char *)(a2 - 32 * v20);
      v23 = 32;
      do
      {
        if ((v18 & 0x40000000) != 0)
          v24 = *(llvm::Instruction **)(*(_QWORD *)(a2 - 8) + v23);
        else
          v24 = *(llvm::Instruction **)&v22[v23];
        if (v24 != v10 && v24 != (llvm::Instruction *)a2)
        {
          if (v10 != (llvm::UndefValue *)a2)
            goto LABEL_51;
          v25 = v22;
          if ((v18 & 0x40000000) != 0)
            v25 = *(char **)(a2 - 8);
          v10 = *(llvm::UndefValue **)&v25[v23];
        }
        v23 += 32;
        --v21;
      }
      while (v21);
    }
    if (v10 == (llvm::UndefValue *)a2)
      v10 = llvm::UndefValue::get(*(llvm::UndefValue **)a2, (llvm::Type *)a2);
  }
  else
  {
    v8 = *(_QWORD *)(a2 - 96);
    if (v8)
      v9 = *(_BYTE *)(v8 + 16) == 16;
    else
      v9 = 0;
    if (v9)
    {
      v11 = (llvm::APInt *)(v8 + 24);
      v12 = *(_DWORD *)(v8 + 32);
      if (v12 > 0x40)
        v13 = llvm::APInt::countLeadingZerosSlowCase(v11) == v12;
      else
        v13 = *(_QWORD *)v11 == 0;
      v26 = v13;
      v9 = v26 == 0;
      v27 = 32;
      if (!v9)
        v27 = 64;
      v10 = *(llvm::UndefValue **)(a2 - 96 + v27);
    }
    else
    {
      v10 = *(llvm::UndefValue **)(a2 - 64);
      if (v10 != *(llvm::UndefValue **)(a2 - 32))
        goto LABEL_51;
    }
  }
  if (v10)
  {
    v28 = (llvm::UndefValue **)*((_QWORD *)this + 41);
    if (v10 == *v28)
    {
      llvm::detail::PtrUseVisitorBase::enqueueUsers((char *)this, (llvm::Instruction *)a2);
    }
    else
    {
      v29 = *((_QWORD *)this + 46);
      v30 = *(unsigned int *)(v29 + 392);
      if (v30 >= *(_DWORD *)(v29 + 396))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v29 + 384, v29 + 400, v30 + 1, 8);
        LODWORD(v30) = *(_DWORD *)(v29 + 392);
      }
      *(_QWORD *)(*(_QWORD *)(v29 + 384) + 8 * v30) = v28;
      ++*(_DWORD *)(v29 + 392);
    }
    return;
  }
LABEL_51:
  if (!*((_BYTE *)this + 336))
    goto LABEL_89;
  v31 = (_DWORD *)((char *)this + 448);
  v77.n128_u64[0] = 0;
  v32 = sub_1C5C21DBC((uint64_t)this + 448, a2, &v77);
  v33 = (uint64_t *)v77.n128_u64[0];
  if ((v32 & 1) != 0)
  {
    v36 = (unint64_t *)(v77.n128_u64[0] + 8);
    if (*(_QWORD *)(v77.n128_u64[0] + 8))
      goto LABEL_99;
    goto LABEL_60;
  }
  v34 = *v31 >> 1;
  if ((*v31 & 1) != 0)
    v35 = 4;
  else
    v35 = *((_DWORD *)this + 116);
  if (4 * v34 + 4 >= 3 * v35)
  {
    v35 *= 2;
    goto LABEL_117;
  }
  if (v35 + ~v34 - *((_DWORD *)this + 113) <= v35 >> 3)
  {
LABEL_117:
    sub_1C5C21E68((uint64_t)this + 448, v35);
    v77.n128_u64[0] = 0;
    sub_1C5C21DBC((uint64_t)this + 448, a2, &v77);
    v33 = (uint64_t *)v77.n128_u64[0];
  }
  *v31 += 2;
  if (*v33 != -4096)
    --*((_DWORD *)this + 113);
  *v33 = a2;
  v33[1] = 0;
  v36 = (unint64_t *)(v33 + 1);
LABEL_60:
  v72 = v76;
  v73 = v76;
  v74 = 4;
  v75 = 0;
  v77.n128_u64[0] = (unint64_t)v78;
  v77.n128_u64[1] = 0x400000000;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v72, a2);
  v37 = **((_QWORD **)this + 41);
  v38 = v77.n128_u32[2];
  if (v77.n128_u32[2] >= v77.n128_u32[3])
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, (uint64_t)v78, v77.n128_u32[2] + 1, 16);
    v38 = v77.n128_u32[2];
  }
  v39 = (_QWORD *)(v77.n128_u64[0] + 16 * v38);
  *v39 = v37;
  v39[1] = a2;
  v40 = v77.n128_u32[2] + 1;
  v41 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40) + 272;
  *v36 = 0;
  do
  {
    v42 = (_QWORD *)v77.n128_u64[0];
    v43 = v77.n128_u64[0] + 16 * v40;
    v44 = *(uint64_t **)(v43 - 16);
    v45 = *(_QWORD *)(v43 - 8);
    v77.n128_u32[2] = v40 - 1;
    v46 = *(unsigned __int8 *)(v45 + 16);
    if (v45)
    {
      v47 = (uint64_t *)v45;
      if (v46 == 60)
        goto LABEL_68;
    }
    if (v45 && v46 == 61)
    {
      v47 = *(uint64_t **)(v45 - 64);
      if (v47 == v44)
        goto LABEL_91;
LABEL_68:
      sub_1C4768AD0(v41, *v47);
      if (*v36 <= (unint64_t)(v48 + 7) >> 3)
        v49 = (unint64_t)(v48 + 7) >> 3;
      else
        v49 = *v36;
      *v36 = v49;
      goto LABEL_72;
    }
    if (v45 && v46 == 62)
    {
      if ((llvm::GetElementPtrInst::hasAllZeroIndices((llvm::GetElementPtrInst *)v45) & 1) == 0)
        goto LABEL_91;
    }
    else
    {
      v50 = v46 - 77;
      v15 = v50 > 8;
      v51 = (1 << v50) & 0x143;
      if (v15 || v51 == 0)
        goto LABEL_91;
    }
    for (j = *(_QWORD *)(v45 + 8); j; j = *(_QWORD *)(j + 8))
    {
      v54 = *(_QWORD *)(j + 24);
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v72, v54);
      if (v55)
      {
        v56 = v77.n128_u32[2];
        if (v77.n128_u32[2] >= (unint64_t)v77.n128_u32[3])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, (uint64_t)v78, v77.n128_u32[2] + 1, 16);
          v56 = v77.n128_u32[2];
        }
        v57 = (_QWORD *)(v77.n128_u64[0] + 16 * v56);
        *v57 = v45;
        v57[1] = v54;
        ++v77.n128_u32[2];
      }
    }
LABEL_72:
    v40 = v77.n128_u32[2];
  }
  while (v77.n128_u32[2]);
  v45 = 0;
  v42 = (_QWORD *)v77.n128_u64[0];
LABEL_91:
  if (v42 != v78)
    free(v42);
  if (v73 != v72)
    free(v73);
  if (!v45)
  {
LABEL_99:
    v59 = (unint64_t **)((char *)this + 344);
    v60 = *((_QWORD *)this + 45);
    v61 = *((_DWORD *)this + 88);
    v62 = (unint64_t *)((char *)this + 344);
    if (v61 >= 0x41)
    {
      if (v61
         - llvm::APInt::countLeadingZerosSlowCase((llvm::detail::PtrUseVisitorBase *)((char *)this + 344)) > 0x40)
      {
LABEL_112:
        v69 = *((_QWORD *)this + 46);
        v70 = *((_QWORD *)this + 41);
        v71 = *(unsigned int *)(v69 + 392);
        if (v71 >= *(_DWORD *)(v69 + 396))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v69 + 384, v69 + 400, v71 + 1, 8);
          LODWORD(v71) = *(_DWORD *)(v69 + 392);
        }
        *(_QWORD *)(*(_QWORD *)(v69 + 384) + 8 * v71) = v70;
        ++*(_DWORD *)(v69 + 392);
        return;
      }
      v62 = *v59;
    }
    if (*v62 < v60)
    {
      v63 = *v36;
      if (!*v36
        || v61 >= 0x41
        && v61
         - llvm::APInt::countLeadingZerosSlowCase((llvm::detail::PtrUseVisitorBase *)((char *)this + 344)) > 0x40)
      {
        goto LABEL_122;
      }
      v64 = *v59;
      if (v61 < 0x41)
        v64 = (unint64_t *)((char *)this + 344);
      v65 = *v64;
      if (v60 > v65)
      {
        if (v60 - v65 >= v63)
          v66 = v65 + v63;
        else
          v66 = v60;
        v67 = *((_QWORD *)this + 46) + 16;
        v68 = *((_QWORD *)this + 41);
        v77.n128_u64[0] = v65;
        v77.n128_u64[1] = v66;
        v78[0] = v68 & 0xFFFFFFFFFFFFFFFBLL;
        sub_1C4AB8FDC(v67, &v77);
      }
      else
      {
LABEL_122:
        sub_1C5C216B0((uint64_t)this, a2);
      }
      return;
    }
    goto LABEL_112;
  }
  v58 = *((_QWORD *)this + 1) & 3 | v45;
LABEL_90:
  *((_QWORD *)this + 1) = v58 | 4;
}

uint64_t sub_1C5C21DBC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_8;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t sub_1C5C21E68(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5C21FE0(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C5C21FE0(a1, v14, v9);
}

uint64_t sub_1C5C21FE0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v13 = 0;
      result = sub_1C5C21DBC((uint64_t)v5, v10, &v13);
      v11 = v13;
      v12 = a2[1];
      *v13 = *a2;
      v11[1] = v12;
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

void sub_1C5C22098(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t **v9;
  unsigned int v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  llvm::APInt *v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;

  if (sub_1C4D9F8B4(a2) || sub_1C509DDB0(a2))
  {
    v4 = *(_QWORD *)(a1 + 368);
    v5 = *(_QWORD *)(a1 + 328);
    v6 = *(unsigned int *)(v4 + 312);
    if (v6 >= *(_DWORD *)(v4 + 316))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 304, v4 + 320, v6 + 1, 8);
      LODWORD(v6) = *(_DWORD *)(v4 + 312);
    }
    *(_QWORD *)(*(_QWORD *)(v4 + 304) + 8 * v6) = v5;
    ++*(_DWORD *)(v4 + 312);
    return;
  }
  if (!*(_BYTE *)(a1 + 336))
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 3 | a2 | 4;
    return;
  }
  if (llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)a2))
  {
    v7 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v8 = *(_QWORD *)(a1 + 360);
    v9 = (unint64_t **)(a1 + 344);
    v10 = *(_DWORD *)(a1 + 352);
    v11 = (unint64_t *)(a1 + 344);
    if (v10 >= 0x41)
    {
      if (v10 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a1 + 344)) > 0x40)
      {
        v12 = -1;
        goto LABEL_19;
      }
      v11 = *v9;
    }
    v12 = *v11;
LABEL_19:
    v13 = v8 - v12;
    v14 = (llvm::APInt *)(v7 + 24);
    v15 = *(_DWORD *)(v7 + 32);
    if (v15 >= 0x41)
    {
      if (v15 - llvm::APInt::countLeadingZerosSlowCase(v14) > 0x40)
      {
        v16 = -1;
LABEL_24:
        if (v16 >= v13)
          v17 = v13;
        else
          v17 = v16;
        if (!v17
          || v10 >= 0x41 && v10 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a1 + 344)) > 0x40)
        {
          goto LABEL_37;
        }
        v18 = *v9;
        if (v10 < 0x41)
          v18 = (unint64_t *)(a1 + 344);
        v19 = *v18;
        if (v8 > v19)
        {
          if (v8 - v19 >= v17)
            v20 = v19 + v17;
          else
            v20 = v8;
          v21 = *(_QWORD *)(a1 + 368) + 16;
          v22 = *(_QWORD *)(a1 + 328);
          v23.n128_u64[0] = v19;
          v23.n128_u64[1] = v20;
          v24 = v22 | 4;
          sub_1C4AB8FDC(v21, &v23);
        }
        else
        {
LABEL_37:
          sub_1C5C216B0(a1, a2);
        }
        return;
      }
      v14 = *(llvm::APInt **)v14;
    }
    v16 = *(_QWORD *)v14;
    goto LABEL_24;
  }
  if (llvm::Instruction::isLaunderOrStripInvariantGroup((llvm::Instruction *)a2))
  {
    llvm::detail::PtrUseVisitorBase::enqueueUsers((char *)a1, (llvm::Instruction *)a2);
  }
  else if ((*(_DWORD *)(*(_QWORD *)(a2 - 32) + 36) - 167) >= 2)
  {
    *(int8x16_t *)(a1 + 8) = vorrq_s8(vandq_s8(*(int8x16_t *)(a1 + 8), (int8x16_t)vdupq_n_s64(3uLL)), vorrq_s8((int8x16_t)vdupq_n_s64(a2), (int8x16_t)vdupq_n_s64(4uLL)));
  }
}

void sub_1C5C222EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  llvm::APInt *v12;
  unsigned int v13;
  int v14;
  _QWORD **v15;
  unint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t *v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unsigned __int32 v24;
  int v25;
  _QWORD *v26;
  int v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  llvm::APInt *v45;
  unsigned int v46;
  _QWORD *v47;
  unint64_t v48;
  llvm::APInt *v49;
  __n128 v50;
  unint64_t v51;
  _QWORD *v52;

  if (*(_BYTE *)(*(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64) + 16) == 16)
    v4 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64);
  else
    v4 = 0;
  if (v4)
  {
    v5 = (_QWORD *)(v4 + 24);
    v6 = *(_DWORD *)(v4 + 32);
    if (v6 >= 0x41)
    {
      if (v6 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v4 + 24)) > 0x40)
        goto LABEL_9;
      v5 = (_QWORD *)*v5;
    }
    if (!*v5)
      goto LABEL_67;
  }
LABEL_9:
  v7 = sub_1C477672C(a1 + 520, a2);
  v8 = *(_QWORD *)(a1 + 528);
  v9 = 536;
  if (v8 == *(_QWORD *)(a1 + 520))
    v9 = 540;
  if (v7 == (_QWORD *)(v8 + 8 * *(unsigned int *)(a1 + v9)))
  {
    if (*(_BYTE *)(a1 + 336))
    {
      v10 = (_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      v11 = v10[12];
      v12 = (llvm::APInt *)(v11 + 24);
      v13 = *(_DWORD *)(v11 + 32);
      if (v13 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v11 + 24)) == v13)
          goto LABEL_19;
      }
      else if (!*(_QWORD *)v12)
      {
        goto LABEL_19;
      }
      v14 = *(_DWORD *)(*(_QWORD *)*v10 + 8) >> 8;
      if (v14 == *(_DWORD *)(*(_QWORD *)a1 + 4) && v14 == *(_DWORD *)(*(_QWORD *)v10[4] + 8) >> 8)
      {
LABEL_19:
        v15 = (_QWORD **)(a1 + 344);
        v16 = *(_QWORD *)(a1 + 360);
        v17 = *(_DWORD *)(a1 + 352);
        if (v17 >= 0x41)
        {
          if (v17 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a1 + 344)) < 0x41)
          {
            v18 = *v15;
            v19 = (_QWORD *)**v15;
            if ((unint64_t)v19 < v16)
            {
LABEL_25:
              v48 = v16;
              v49 = (llvm::APInt *)(a1 + 344);
              v47 = v19;
              if (v4)
              {
                v20 = (unint64_t *)(v4 + 24);
                v21 = *(_DWORD *)(v4 + 32);
                if (v21 >= 0x41)
                {
                  if (v21 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v4 + 24)) > 0x40)
                  {
                    v22 = -1;
                    goto LABEL_32;
                  }
                  v20 = (unint64_t *)*v20;
                }
                v22 = *v20;
              }
              else
              {
                v22 = v16 - (_QWORD)v19;
              }
LABEL_32:
              v23 = *(_QWORD *)(a1 + 328);
              if (*(_QWORD *)v23 != *v10 || *(_QWORD *)v23 != v10[4])
              {
                v24 = *(_DWORD *)(*(_QWORD *)(a1 + 368) + 24);
                v50.n128_u64[0] = a2;
                v50.n128_u32[2] = v24;
                v52 = 0;
                v25 = sub_1C5C2276C(a1 + 376, &v50, &v52);
                if ((v25 & 1) == 0)
                {
                  v26 = sub_1C5C22814((_DWORD *)(a1 + 376), (uint64_t)&v50, &v50, v52);
                  *v26 = v50.n128_u64[0];
                  *((_DWORD *)v26 + 2) = v50.n128_u32[2];
LABEL_36:
                  if (v4)
                    v27 = v25;
                  else
                    v27 = 1;
                  if (v22)
                  {
                    v28 = *(_QWORD *)(a1 + 360);
                    v29 = *(_DWORD *)(a1 + 352);
                    if (v29 < 0x41 || v29 - llvm::APInt::countLeadingZerosSlowCase(v49) <= 0x40)
                    {
                      v30 = *(unint64_t **)v49;
                      if (v29 < 0x41)
                        v30 = (unint64_t *)(a1 + 344);
                      v31 = *v30;
                      if (v28 > v31)
                      {
                        if (v28 - v31 >= v22)
                          v32 = v31 + v22;
                        else
                          v32 = v28;
                        v33 = *(_QWORD *)(a1 + 368) + 16;
                        v34 = *(_QWORD *)(a1 + 328);
                        v50.n128_u64[0] = v31;
                        v50.n128_u64[1] = v32;
                        v35 = 4;
                        if (v27)
                          v35 = 0;
                        v36 = v34 & 0xFFFFFFFFFFFFFFFBLL | v35;
LABEL_50:
                        v51 = v36;
                        sub_1C4AB8FDC(v33, &v50);
                        return;
                      }
                    }
                  }
LABEL_74:
                  sub_1C5C216B0(a1, a2);
                  return;
                }
                v42 = *((_DWORD *)v52 + 2);
                v43 = *(_QWORD *)(*(_QWORD *)(a1 + 368) + 16);
                v44 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 96);
                v45 = (llvm::APInt *)(v44 + 24);
                v46 = *(_DWORD *)(v44 + 32);
                if (v46 > 0x40)
                {
                  if (llvm::APInt::countLeadingZerosSlowCase(v45) == v46)
                    goto LABEL_72;
                }
                else if (!*(_QWORD *)v45)
                {
LABEL_72:
                  if (*(_QWORD **)(v43 + 24 * v42) == v47)
                  {
                    *(_QWORD *)(v43 + 24 * v42 + 16) &= 7uLL;
                    goto LABEL_74;
                  }
                }
                *(_QWORD *)(v43 + 24 * v42 + 16) &= ~4uLL;
                goto LABEL_36;
              }
              if (v13 > 0x40)
              {
                if (llvm::APInt::countLeadingZerosSlowCase(v12) == v13)
                  goto LABEL_67;
              }
              else if (!*(_QWORD *)v12)
              {
                goto LABEL_67;
              }
              if (v22)
              {
                if (v17 >= 0x41)
                {
                  if (v17 - llvm::APInt::countLeadingZerosSlowCase(v49) > 0x40)
                    goto LABEL_67;
                  v18 = (_QWORD *)*v18;
                }
                if (v48 > (unint64_t)v18)
                {
                  v40 = v48;
                  if (v48 - (unint64_t)v18 >= v22)
                    v40 = (unint64_t)v18 + v22;
                  v33 = *(_QWORD *)(a1 + 368) + 16;
                  v50.n128_u64[0] = (unint64_t)v18;
                  v50.n128_u64[1] = v40;
                  v36 = v23 & 0xFFFFFFFFFFFFFFFBLL;
                  goto LABEL_50;
                }
              }
LABEL_67:
              sub_1C5C216B0(a1, a2);
              return;
            }
          }
        }
        else
        {
          v18 = *v15;
          if ((unint64_t)*v15 < v16)
          {
            v19 = *v15;
            goto LABEL_25;
          }
        }
        v37 = sub_1C61B4DA4(a1 + 376, a2);
        if ((*(_BYTE *)(a1 + 376) & 1) != 0)
        {
          v38 = a1 + 384;
          v39 = 4;
        }
        else
        {
          v38 = *(_QWORD *)(a1 + 384);
          v39 = *(unsigned int *)(a1 + 392);
        }
        if (v38 + 16 * v39 != v37)
        {
          v41 = *(_QWORD *)(*(_QWORD *)(a1 + 368) + 16) + 24 * *(unsigned int *)(v37 + 8);
          *(_QWORD *)(v41 + 16) &= 7uLL;
        }
        goto LABEL_67;
      }
    }
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 3 | a2 | 4;
  }
}

uint64_t sub_1C5C2276C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_15:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_15;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C5C22814(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 4;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1C5C228D4((uint64_t)a1, v7);
  v9 = 0;
  sub_1C5C2276C((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_1C5C228D4(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[64];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5C22A4C(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C5C22A4C(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1C5C22A4C(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C5C2276C((uint64_t)v5, (_QWORD *)a2, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

__n128 sub_1C5C22B10(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  __n128 result;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  __n128 *v22;
  __n128 *v23;
  unint64_t v24;
  __n128 *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  __n128 *v31;
  __n128 *v32;
  unint64_t v33;
  unint64_t v34;
  __n128 *v35;
  unint64_t v36;
  __n128 *v37;

  if (a3 < 2)
    return result;
  v6 = a1;
  if (a3 == 2)
  {
    v7 = a2 - 24;
    v8 = *((_QWORD *)a2 - 3);
    if (v8 >= *(_QWORD *)a1)
    {
      if (v8 > *(_QWORD *)a1)
        return result;
      v24 = *((_QWORD *)a2 - 1);
      if (((v24 >> 2) & 1) == (*(_BYTE *)(a1 + 16) & 4) >> 2)
      {
        if (*((_QWORD *)a2 - 2) <= *(_QWORD *)(a1 + 8))
          return result;
      }
      else if ((v24 & 4) != 0)
      {
        return result;
      }
    }
    v9 = *(_QWORD *)(a1 + 16);
    result = *(__n128 *)a1;
    v11 = *((_QWORD *)a2 - 1);
    *(_OWORD *)a1 = *(_OWORD *)v7;
    *(_QWORD *)(a1 + 16) = v11;
    *(__n128 *)v7 = result;
    *((_QWORD *)a2 - 1) = v9;
    return result;
  }
  if ((uint64_t)a3 > 128)
  {
    v26 = (__n128 *)a4;
    v27 = a3 >> 1;
    v28 = (unint64_t *)(a1 + 24 * (a3 >> 1));
    v29 = a3 >> 1;
    if ((uint64_t)a3 > a5)
    {
      sub_1C5C22B10(a1, v28, v29, a4, a5);
      sub_1C5C22B10(v6 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), v26, a5);
      sub_1C5C1B990((char *)v6, (char *)(v6 + 24 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), v26, a5);
      return result;
    }
    sub_1C5C22EAC(a1, v28, v29, a4);
    v30 = (uint64_t)v26 + 24 * v27;
    sub_1C5C22EAC(v6 + 24 * (a3 >> 1), (unint64_t *)a2, a3 - (a3 >> 1), v30);
    v31 = (__n128 *)((char *)v26 + 24 * a3);
    v32 = (__n128 *)v30;
    while (1)
    {
      if (v32 == v31)
      {
        if (v26 != (__n128 *)v30)
        {
          v34 = 0;
          do
          {
            v35 = (__n128 *)(v6 + v34);
            result = *(__n128 *)((char *)v26 + v34);
            v35[1].n128_u64[0] = v26[1].n128_u64[v34 / 8];
            *v35 = result;
            v34 += 24;
          }
          while ((__n128 *)((char *)v26 + v34) != (__n128 *)v30);
        }
        return result;
      }
      if (v32->n128_u64[0] >= v26->n128_u64[0])
      {
        if (v32->n128_u64[0] > v26->n128_u64[0])
          goto LABEL_42;
        v33 = v32[1].n128_u64[0];
        if (((v33 >> 2) & 1) == (v26[1].n128_u8[0] & 4) >> 2)
        {
          if (v32->n128_u64[1] <= v26->n128_u64[1])
          {
LABEL_42:
            result = *v26;
            *(_QWORD *)(v6 + 16) = v26[1].n128_u64[0];
            *(__n128 *)v6 = result;
            v26 = (__n128 *)((char *)v26 + 24);
            goto LABEL_43;
          }
        }
        else if ((v33 & 4) != 0)
        {
          goto LABEL_42;
        }
      }
      result = *v32;
      *(_QWORD *)(v6 + 16) = v32[1].n128_u64[0];
      *(__n128 *)v6 = result;
      v32 = (__n128 *)((char *)v32 + 24);
LABEL_43:
      v6 += 24;
      if (v26 == (__n128 *)v30)
      {
        if (v32 != v31)
        {
          v36 = 0;
          do
          {
            v37 = (__n128 *)(v6 + v36);
            result = *(__n128 *)((char *)v32 + v36);
            v37[1].n128_u64[0] = v32[1].n128_u64[v36 / 8];
            *v37 = result;
            v36 += 24;
          }
          while ((__n128 *)((char *)v32 + v36) != v31);
        }
        return result;
      }
    }
  }
  if ((char *)a1 == a2)
    return result;
  v13 = a1 + 24;
  if ((char *)(a1 + 24) == a2)
    return result;
  v14 = 0;
  v15 = a1;
  do
  {
    v16 = v15;
    v15 = v13;
    v17 = *(_QWORD *)(v16 + 24);
    if (v17 >= *(_QWORD *)v16)
    {
      if (v17 > *(_QWORD *)v16)
        goto LABEL_29;
      v18 = *(_QWORD *)(v16 + 40);
      if (((v18 >> 2) & 1) == (*(_BYTE *)(v16 + 16) & 4) >> 2)
      {
        if (*(_QWORD *)(v16 + 32) <= *(_QWORD *)(v16 + 8))
          goto LABEL_29;
      }
      else if ((v18 & 4) != 0)
      {
        goto LABEL_29;
      }
    }
    else
    {
      v18 = *(_QWORD *)(v16 + 40);
    }
    v19 = *(_QWORD *)(v16 + 32);
    result = *(__n128 *)v16;
    *(_OWORD *)v15 = *(_OWORD *)v16;
    *(_QWORD *)(v15 + 16) = *(_QWORD *)(v16 + 16);
    v20 = (_QWORD *)a1;
    if (v16 == a1)
      goto LABEL_28;
    v21 = v14;
    while (1)
    {
      v22 = (__n128 *)(a1 + v21);
      v23 = (__n128 *)(a1 + v21 - 24);
      if (v17 >= v23->n128_u64[0])
      {
        if (v17 > v23->n128_u64[0])
          break;
        if (((v18 >> 2) & 1) != (*(_BYTE *)(a1 + v21 - 8) & 4) >> 2)
        {
          if ((v18 & 4) != 0)
          {
            v20 = (_QWORD *)(a1 + v21);
            goto LABEL_28;
          }
          goto LABEL_19;
        }
        if (v19 <= *(_QWORD *)(a1 + v21 - 16))
          break;
      }
LABEL_19:
      v16 -= 24;
      result = *v23;
      *v22 = *v23;
      v22[1].n128_u64[0] = *(_QWORD *)(a1 + v21 - 8);
      v21 -= 24;
      if (!v21)
      {
        v20 = (_QWORD *)a1;
        goto LABEL_28;
      }
    }
    v20 = (_QWORD *)v16;
LABEL_28:
    *v20 = v17;
    v20[1] = v19;
    v20[2] = v18;
LABEL_29:
    v13 = v15 + 24;
    v14 += 24;
  }
  while ((char *)(v15 + 24) != a2);
  return result;
}

uint64_t sub_1C5C22EAC(uint64_t result, unint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t *v7;
  __int128 v8;
  __int128 *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  unint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;

  if (!a3)
    return result;
  v4 = a4;
  v7 = (unint64_t *)result;
  if (a3 == 2)
  {
    v9 = (__int128 *)(a2 - 3);
    v10 = *(a2 - 3);
    if (v10 < *(_QWORD *)result)
    {
LABEL_6:
      v11 = *v9;
      *(_QWORD *)(a4 + 16) = *(a2 - 1);
      *(_OWORD *)a4 = v11;
      v12 = *(_OWORD *)result;
      v13 = *(_QWORD *)(result + 16);
LABEL_57:
      *(_QWORD *)(a4 + 40) = v13;
      *(_OWORD *)(a4 + 24) = v12;
      return result;
    }
    if (v10 <= *(_QWORD *)result)
    {
      v30 = *(a2 - 1);
      if (((v30 >> 2) & 1) == (*(_BYTE *)(result + 16) & 4) >> 2)
      {
        if (*(a2 - 2) > *(_QWORD *)(result + 8))
          goto LABEL_6;
      }
      else if ((v30 & 4) == 0)
      {
        goto LABEL_6;
      }
    }
    v42 = *(_OWORD *)result;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a4 = v42;
    v12 = *v9;
    v13 = *(a2 - 1);
    goto LABEL_57;
  }
  if (a3 == 1)
  {
    v8 = *(_OWORD *)result;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a4 = v8;
    return result;
  }
  if ((uint64_t)a3 > 8)
  {
    v31 = (unint64_t *)(result + 24 * (a3 >> 1));
    sub_1C5C22B10(result, v31, a3 >> 1, a4, a3 >> 1);
    result = sub_1C5C22B10(&v7[3 * (a3 >> 1)], a2, a3 - (a3 >> 1), v4 + 24 * (a3 >> 1), a3 - (a3 >> 1));
    v32 = &v7[3 * (a3 >> 1)];
    while (1)
    {
      if (v32 == a2)
      {
        if (v7 != v31)
        {
          v36 = 0;
          do
          {
            v37 = v4 + v36 * 8;
            v38 = *(_OWORD *)&v7[v36];
            *(_QWORD *)(v37 + 16) = v7[v36 + 2];
            *(_OWORD *)v37 = v38;
            v36 += 3;
          }
          while (&v7[v36] != v31);
        }
        return result;
      }
      if (*v32 >= *v7)
      {
        if (*v32 > *v7)
          goto LABEL_39;
        v35 = v32[2];
        if (((v35 >> 2) & 1) == (v7[2] & 4) >> 2)
        {
          if (v32[1] <= v7[1])
          {
LABEL_39:
            v34 = *(_OWORD *)v7;
            *(_QWORD *)(v4 + 16) = v7[2];
            *(_OWORD *)v4 = v34;
            v7 += 3;
            goto LABEL_40;
          }
        }
        else if ((v35 & 4) != 0)
        {
          goto LABEL_39;
        }
      }
      v33 = *(_OWORD *)v32;
      *(_QWORD *)(v4 + 16) = v32[2];
      *(_OWORD *)v4 = v33;
      v32 += 3;
LABEL_40:
      v4 += 24;
      if (v7 == v31)
      {
        if (v32 != a2)
        {
          v39 = 0;
          do
          {
            v40 = v4 + v39 * 8;
            v41 = *(_OWORD *)&v32[v39];
            *(_QWORD *)(v40 + 16) = v32[v39 + 2];
            *(_OWORD *)v40 = v41;
            v39 += 3;
          }
          while (&v32[v39] != a2);
        }
        return result;
      }
    }
  }
  if ((unint64_t *)result != a2)
  {
    v14 = *(_OWORD *)result;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a4 = v14;
    v15 = (unint64_t *)(result + 24);
    if ((unint64_t *)(result + 24) != a2)
    {
      v16 = 0;
      v17 = (_QWORD *)a4;
      do
      {
        v18 = v7;
        v19 = v17;
        v7 = v15;
        v20 = *v17;
        v17 += 3;
        v21 = v18[3];
        v22 = v21 > v20;
        if (v21 < v20)
        {
LABEL_12:
          *(_OWORD *)v17 = *(_OWORD *)v19;
          v17[2] = v19[2];
          v23 = (_QWORD *)a4;
          if (v19 == (_QWORD *)a4)
            goto LABEL_28;
          v24 = v16;
          while (1)
          {
            v25 = a4 + v24;
            v26 = *(_QWORD *)(a4 + v24 - 24);
            if (*v7 >= v26)
            {
              if (*v7 > v26)
                goto LABEL_26;
              v27 = v18[5];
              result = *(_BYTE *)(a4 + v24 - 8) & 4;
              if (((v27 >> 2) & 1) == result >> 2)
              {
                if (v18[4] <= *(_QWORD *)(a4 + v24 - 16))
                {
LABEL_26:
                  v23 = v19;
                  goto LABEL_28;
                }
              }
              else if ((v27 & 4) != 0)
              {
                v23 = (_QWORD *)(a4 + v24);
                goto LABEL_28;
              }
            }
            v19 -= 3;
            *(_OWORD *)v25 = *(_OWORD *)(a4 + v24 - 24);
            *(_QWORD *)(v25 + 16) = *(_QWORD *)(a4 + v24 - 8);
            v24 -= 24;
            if (!v24)
            {
              v23 = (_QWORD *)a4;
              goto LABEL_28;
            }
          }
        }
        v23 = v17;
        if (v22)
          goto LABEL_28;
        v28 = v18[5];
        if (((v28 >> 2) & 1) == (v19[2] & 4) >> 2)
        {
          v23 = v17;
          if (v18[4] > v19[1])
            goto LABEL_12;
        }
        else
        {
          v23 = v17;
          if ((v28 & 4) == 0)
            goto LABEL_12;
        }
LABEL_28:
        v29 = *(_OWORD *)v7;
        v23[2] = v7[2];
        *(_OWORD *)v23 = v29;
        v15 = v7 + 3;
        v16 += 24;
      }
      while (v7 + 3 != a2);
    }
  }
  return result;
}

uint64_t sub_1C5C23224(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 40 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 40 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C5C232D4(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _BYTE v22[320];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v21 = a3;
  v5 = *(_DWORD *)a1;
  v6 = *(_DWORD *)a1 >> 1;
  v7 = *(_DWORD *)a1 & 1;
  if (v7)
    v8 = 8;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v8)
  {
    v8 *= 2;
  }
  else if (v8 + ~v6 - *(_DWORD *)(a1 + 4) > v8 >> 3)
  {
    goto LABEL_6;
  }
  if (v8 >= 9)
  {
    v10 = (v8 - 1) | ((unint64_t)(v8 - 1) >> 1);
    v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
    v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
    if ((v12 + 1) > 0x40)
      v8 = v12 + 1;
    else
      v8 = 64;
  }
  if (v7)
  {
    v15 = 0;
    v16 = v22;
    do
    {
      v17 = a1 + v15;
      v18 = *(_QWORD *)(a1 + v15 + 8);
      if ((v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *v16 = v18;
        v16[1] = *(_QWORD *)(v17 + 16);
        v16[2] = 0;
        v16[3] = 0;
        v16[4] = 0;
        *((_OWORD *)v16 + 1) = *(_OWORD *)(v17 + 24);
        v16[4] = *(_QWORD *)(v17 + 40);
        v16 += 5;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 0;
        *(_QWORD *)(v17 + 40) = 0;
      }
      v15 += 40;
    }
    while (v15 != 320);
    if (v8 > 8)
    {
      *(_DWORD *)a1 &= ~1u;
      v19 = v8;
      *(_QWORD *)(a1 + 8) = operator new(40 * v8, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v19;
    }
    sub_1C5C23500(a1, (uint64_t)v22, (uint64_t)v16);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 8);
    v14 = *(_DWORD *)(a1 + 16);
    if (v8 > 8)
    {
      v20 = v8;
      *(_QWORD *)(a1 + 8) = operator new(40 * v8, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v20;
    }
    else
    {
      *(_DWORD *)a1 = v5 | 1;
    }
    sub_1C5C23500(a1, v13, v13 + 40 * v14);
    MEMORY[0x1CAA32FB4](v13, 8);
  }
  sub_1C5C23224(a1, *a2, &v21);
  v5 = *(_DWORD *)a1;
  a3 = v21;
  v7 = *(_DWORD *)a1 & 1;
LABEL_6:
  *(_DWORD *)a1 = (v5 & 0xFFFFFFFE | v7) + 2;
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a3;
}

void sub_1C5C23500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;

  v6 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(a1 + 8);
    v9 = (_QWORD *)(a1 + 328);
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if (!v7)
      goto LABEL_11;
    v8 = *(_QWORD **)(a1 + 8);
    v9 = &v8[5 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 5;
  }
  while (v8 != v9);
LABEL_11:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v13 = 0;
      sub_1C5C23224(a1, v10, &v13);
      v11 = v13;
      *v13 = *(_QWORD *)a2;
      v11[1] = *(_QWORD *)(a2 + 8);
      v11[2] = 0;
      v11[3] = 0;
      v11[4] = 0;
      *((_OWORD *)v11 + 1) = *(_OWORD *)(a2 + 16);
      v11[4] = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_DWORD *)a1 += 2;
      v12 = *(void **)(a2 + 16);
      if (v12)
      {
        *(_QWORD *)(a2 + 24) = v12;
        operator delete(v12);
      }
    }
    a2 += 40;
  }
}

void sub_1C5C235F0(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 2)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 16);
    if (a2 > 1)
    {
      v11 = a2;
      *(_QWORD *)(a1 + 8) = operator new(32 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v11;
    }
    else
    {
      *(_DWORD *)a1 = v6 | 1;
    }
    sub_1C6325740(a1, v7, v7 + 32 * v8);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = &v12;
  if ((*(_QWORD *)(a1 + 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
  {
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_OWORD *)(a1 + 16);
    v14 = *(_QWORD *)(a1 + 32);
    v9 = &v15;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  if (a2 >= 2)
  {
    *(_DWORD *)a1 = v6 & 0xFFFFFFFE;
    v10 = a2;
    *(_QWORD *)(a1 + 8) = operator new(32 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v10;
  }
  sub_1C6325740(a1, (uint64_t)&v12, (uint64_t)v9);
}

BOOL sub_1C5C23760(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int32x2_t *v9;
  __int32 v10;
  int32x2_t v11;
  __int32 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;

  v4 = (_QWORD *)*a1;
  v5 = sub_1C477672C(*a1, *a2);
  v6 = v4[1];
  v7 = 16;
  if (v6 == *v4)
    v7 = 20;
  v8 = (_QWORD *)(v6 + 8 * *(unsigned int *)((char *)v4 + v7));
  if (v5 != v8)
  {
    v9 = (int32x2_t *)a1[1];
    v10 = v9[2].i32[0];
    if (v10)
    {
      v11 = *v9;
      v12 = v10 - 1;
      LODWORD(v13) = ((*a2 >> 4) ^ (*a2 >> 9)) & (v10 - 1);
      v14 = (uint64_t *)(*(_QWORD *)v9 + 8 * v13);
      v15 = *v14;
      if (*a2 == *v14)
      {
LABEL_10:
        *v14 = -8192;
        v9[1] = vadd_s32(v9[1], (int32x2_t)0x1FFFFFFFFLL);
      }
      else
      {
        v16 = 1;
        while (v15 != -4096)
        {
          v17 = v13 + v16++;
          v13 = v17 & v12;
          v15 = *(_QWORD *)(*(_QWORD *)&v11 + 8 * v13);
          if (*a2 == v15)
          {
            v14 = (uint64_t *)(*(_QWORD *)&v11 + 8 * v13);
            goto LABEL_10;
          }
        }
      }
    }
  }
  return v5 != v8;
}

uint64_t sub_1C5C2383C()
{
  int v1;
  char v2;
  char *v3;

  v2 = 0;
  v3 = &v2;
  v1 = 1;
  sub_1C61BCD3C((uint64_t)&unk_1ED822BA8, "sroa-strict-inbounds", &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED822BA8, &dword_1C475E000);
}

uint64_t LLVMAddLoopSimplifyCFGPass(llvm *a1)
{
  uint64_t LoopSimplifyCFGPass;

  LoopSimplifyCFGPass = llvm::createLoopSimplifyCFGPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, LoopSimplifyCFGPass);
}

uint64_t LLVMAddAggressiveDCEPass(llvm *a1)
{
  uint64_t AggressiveDCEPass;

  AggressiveDCEPass = llvm::createAggressiveDCEPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, AggressiveDCEPass);
}

uint64_t LLVMAddDCEPass(llvm *a1)
{
  uint64_t DeadCodeEliminationPass;

  DeadCodeEliminationPass = llvm::createDeadCodeEliminationPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, DeadCodeEliminationPass);
}

uint64_t LLVMAddBitTrackingDCEPass(llvm *a1)
{
  uint64_t BitTrackingDCEPass;

  BitTrackingDCEPass = llvm::createBitTrackingDCEPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, BitTrackingDCEPass);
}

uint64_t LLVMAddAlignmentFromAssumptionsPass(llvm *a1)
{
  uint64_t AlignmentFromAssumptionsPass;

  AlignmentFromAssumptionsPass = llvm::createAlignmentFromAssumptionsPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, AlignmentFromAssumptionsPass);
}

uint64_t LLVMAddCFGSimplificationPass(uint64_t a1)
{
  uint64_t CFGSimplificationPass;
  uint64_t result;
  uint64_t (**v4)(void);
  _DWORD v5[2];
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5[0] = 1;
  v5[1] = 0x1000000;
  v6 = 16842752;
  v7 = 0;
  v9 = 0;
  CFGSimplificationPass = llvm::createCFGSimplificationPass((uint64_t)v5, v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, CFGSimplificationPass);
  result = (uint64_t)v9;
  if (v9 == v8)
  {
    v4 = (uint64_t (**)(void))(v8[0] + 32);
  }
  else
  {
    if (!v9)
      return result;
    v4 = (uint64_t (**)(void))(*v9 + 40);
  }
  return (*v4)();
}

uint64_t LLVMAddDeadStoreEliminationPass(llvm *a1)
{
  uint64_t DeadStoreEliminationPass;

  DeadStoreEliminationPass = llvm::createDeadStoreEliminationPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, DeadStoreEliminationPass);
}

uint64_t LLVMAddScalarizerPass(llvm *a1)
{
  uint64_t ScalarizerPass;

  ScalarizerPass = llvm::createScalarizerPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, ScalarizerPass);
}

uint64_t LLVMAddGVNPass(uint64_t a1)
{
  uint64_t GVNPass;

  GVNPass = llvm::createGVNPass(0, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, GVNPass);
}

uint64_t LLVMAddNewGVNPass(llvm *a1)
{
  uint64_t NewGVNPass;

  NewGVNPass = llvm::createNewGVNPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, NewGVNPass);
}

uint64_t LLVMAddMergedLoadStoreMotionPass(uint64_t a1)
{
  uint64_t MergedLoadStoreMotionPass;

  MergedLoadStoreMotionPass = llvm::createMergedLoadStoreMotionPass(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, MergedLoadStoreMotionPass);
}

uint64_t LLVMAddIndVarSimplifyPass(llvm *a1)
{
  uint64_t IndVarSimplifyPass;

  IndVarSimplifyPass = llvm::createIndVarSimplifyPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, IndVarSimplifyPass);
}

uint64_t LLVMAddInstructionSimplifyPass(llvm *a1)
{
  uint64_t InstSimplifyLegacyPass;

  InstSimplifyLegacyPass = llvm::createInstSimplifyLegacyPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, InstSimplifyLegacyPass);
}

uint64_t LLVMAddJumpThreadingPass(uint64_t a1)
{
  uint64_t JumpThreadingPass;

  JumpThreadingPass = llvm::createJumpThreadingPass(0, -1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, JumpThreadingPass);
}

uint64_t LLVMAddLoopSinkPass(llvm *a1)
{
  uint64_t LoopSinkPass;

  LoopSinkPass = llvm::createLoopSinkPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, LoopSinkPass);
}

uint64_t LLVMAddLICMPass(llvm *a1)
{
  uint64_t LICMPass;

  LICMPass = llvm::createLICMPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, LICMPass);
}

uint64_t LLVMAddLoopDeletionPass(llvm *a1)
{
  uint64_t LoopDeletionPass;

  LoopDeletionPass = llvm::createLoopDeletionPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, LoopDeletionPass);
}

uint64_t LLVMAddLoopFlattenPass(llvm *a1)
{
  uint64_t LoopFlattenPass;

  LoopFlattenPass = llvm::createLoopFlattenPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, LoopFlattenPass);
}

uint64_t LLVMAddLoopIdiomPass(llvm *a1)
{
  uint64_t LoopIdiomPass;

  LoopIdiomPass = llvm::createLoopIdiomPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, LoopIdiomPass);
}

uint64_t LLVMAddLoopRotatePass(uint64_t a1)
{
  uint64_t LoopRotatePass;

  LoopRotatePass = llvm::createLoopRotatePass((llvm *)0xFFFFFFFFLL, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, LoopRotatePass);
}

uint64_t LLVMAddLoopRerollPass(llvm *a1)
{
  uint64_t LoopRerollPass;

  LoopRerollPass = llvm::createLoopRerollPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, LoopRerollPass);
}

uint64_t LLVMAddLoopUnrollPass(uint64_t a1)
{
  uint64_t LoopUnrollPass;
  int v4;

  LoopUnrollPass = llvm::createLoopUnrollPass((llvm *)2, 0, 0, -1, -1, -1, -1, -1, -1, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, LoopUnrollPass);
}

uint64_t LLVMAddLoopUnrollAndJamPass(uint64_t a1)
{
  uint64_t LoopUnrollAndJamPass;

  LoopUnrollAndJamPass = llvm::createLoopUnrollAndJamPass((llvm *)2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, LoopUnrollAndJamPass);
}

uint64_t LLVMAddLoopUnswitchPass(uint64_t a1)
{
  uint64_t LoopUnswitchPass;

  LoopUnswitchPass = llvm::createLoopUnswitchPass(0, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, LoopUnswitchPass);
}

uint64_t LLVMAddLowerAtomicPass(llvm *a1)
{
  uint64_t LowerAtomicPass;

  LowerAtomicPass = llvm::createLowerAtomicPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, LowerAtomicPass);
}

uint64_t LLVMAddMemCpyOptPass(llvm *a1)
{
  uint64_t MemCpyOptPass;

  MemCpyOptPass = llvm::createMemCpyOptPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, MemCpyOptPass);
}

uint64_t LLVMAddPartiallyInlineLibCallsPass(llvm *a1)
{
  uint64_t PartiallyInlineLibCallsPass;

  PartiallyInlineLibCallsPass = llvm::createPartiallyInlineLibCallsPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, PartiallyInlineLibCallsPass);
}

uint64_t LLVMAddReassociatePass(llvm *a1)
{
  uint64_t ReassociatePass;

  ReassociatePass = llvm::createReassociatePass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, ReassociatePass);
}

uint64_t LLVMAddSCCPPass(llvm *a1)
{
  uint64_t SCCPPass;

  SCCPPass = llvm::createSCCPPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, SCCPPass);
}

uint64_t LLVMAddScalarReplAggregatesPass(llvm *a1)
{
  uint64_t SROAPass;

  SROAPass = llvm::createSROAPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, SROAPass);
}

uint64_t LLVMAddScalarReplAggregatesPassSSA(llvm *a1)
{
  uint64_t SROAPass;

  SROAPass = llvm::createSROAPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, SROAPass);
}

uint64_t LLVMAddScalarReplAggregatesPassWithThreshold(llvm *a1)
{
  uint64_t SROAPass;

  SROAPass = llvm::createSROAPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, SROAPass);
}

uint64_t LLVMAddTailCallEliminationPass(llvm *a1)
{
  uint64_t v2;

  v2 = llvm::createTailCallEliminationPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v2);
}

uint64_t LLVMAddDemoteMemoryToRegisterPass(llvm *a1)
{
  uint64_t DemoteRegisterToMemoryPass;

  DemoteRegisterToMemoryPass = llvm::createDemoteRegisterToMemoryPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, DemoteRegisterToMemoryPass);
}

uint64_t LLVMAddVerifierPass(uint64_t a1)
{
  uint64_t VerifierPass;

  VerifierPass = llvm::createVerifierPass((llvm *)1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, VerifierPass);
}

uint64_t LLVMAddCorrelatedValuePropagationPass(llvm *a1)
{
  uint64_t CorrelatedValuePropagationPass;

  CorrelatedValuePropagationPass = llvm::createCorrelatedValuePropagationPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, CorrelatedValuePropagationPass);
}

uint64_t LLVMAddEarlyCSEPass(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  sub_1C5AF9B7C(v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v2);
}

uint64_t LLVMAddEarlyCSEMemSSAPass(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  sub_1C5AF9AB4(v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v2);
}

uint64_t LLVMAddGVNHoistLegacyPass(llvm *a1)
{
  uint64_t GVNHoistPass;

  GVNHoistPass = llvm::createGVNHoistPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, GVNHoistPass);
}

uint64_t LLVMAddTypeBasedAliasAnalysisPass(llvm *a1)
{
  llvm::TypeBasedAAWrapperPass *TypeBasedAAWrapperPass;

  TypeBasedAAWrapperPass = llvm::createTypeBasedAAWrapperPass(a1);
  return (*(uint64_t (**)(llvm *, llvm::TypeBasedAAWrapperPass *))(*(_QWORD *)a1 + 16))(a1, TypeBasedAAWrapperPass);
}

uint64_t LLVMAddScopedNoAliasAAPass(llvm *a1)
{
  llvm::ScopedNoAliasAAWrapperPass *ScopedNoAliasAAWrapperPass;

  ScopedNoAliasAAWrapperPass = llvm::createScopedNoAliasAAWrapperPass(a1);
  return (*(uint64_t (**)(llvm *, llvm::ScopedNoAliasAAWrapperPass *))(*(_QWORD *)a1 + 16))(a1, ScopedNoAliasAAWrapperPass);
}

uint64_t LLVMAddBasicAliasAnalysisPass(llvm *a1)
{
  llvm::BasicAAWrapperPass *BasicAAWrapperPass;

  BasicAAWrapperPass = llvm::createBasicAAWrapperPass(a1);
  return (*(uint64_t (**)(llvm *, llvm::BasicAAWrapperPass *))(*(_QWORD *)a1 + 16))(a1, BasicAAWrapperPass);
}

uint64_t LLVMAddLowerConstantIntrinsicsPass(llvm *a1)
{
  uint64_t LowerConstantIntrinsicsPass;

  LowerConstantIntrinsicsPass = llvm::createLowerConstantIntrinsicsPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, LowerConstantIntrinsicsPass);
}

uint64_t LLVMAddLowerExpectIntrinsicPass(llvm *a1)
{
  uint64_t LowerExpectIntrinsicPass;

  LowerExpectIntrinsicPass = llvm::createLowerExpectIntrinsicPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, LowerExpectIntrinsicPass);
}

uint64_t LLVMAddUnifyFunctionExitNodesPass(llvm *a1)
{
  llvm::UnifyFunctionExitNodesLegacyPass *UnifyFunctionExitNodesPass;

  UnifyFunctionExitNodesPass = llvm::createUnifyFunctionExitNodesPass(a1);
  return (*(uint64_t (**)(llvm *, llvm::UnifyFunctionExitNodesLegacyPass *))(*(_QWORD *)a1 + 16))(a1, UnifyFunctionExitNodesPass);
}

uint64_t sub_1C5C24244(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeDominatorTreeWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Scalarize vector operations";
  *(_QWORD *)(v2 + 8) = 27;
  *(_QWORD *)(v2 + 16) = "scalarizer";
  *(_QWORD *)(v2 + 24) = 10;
  *(_QWORD *)(v2 + 32) = &unk_1ED822C78;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5C248D8;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5C242D8(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED822C78;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8197688;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED822C80);
  if (v3 != -1)
  {
    v7[0] = sub_1C5C24244;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED822C80, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5C243A0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  llvm::Type *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  llvm::Value *v21;
  unsigned __int8 ***v22;
  unsigned __int8 *v23;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  const llvm::APInt *v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  llvm::ConstantInt *v38;
  unsigned int v39;
  unint64_t v40;
  llvm::ValueHandleBase *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  llvm::Value *v47;
  int v48;
  int v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unsigned int v54;
  llvm::Value *v55;
  llvm::ValueHandleBase *v56;
  void (**v57)(void);
  uint64_t v58;
  void *__p;
  char *v60;
  uint64_t v61;
  _QWORD v62[4];
  __int16 v63;
  _QWORD *v64;
  unsigned int v65;
  unint64_t v66;
  __int16 v67;
  llvm::Value *v68;
  void *v69[2];
  uint64_t v70;
  void **v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  if (a2)
    v4 = a2 - 24;
  else
    v4 = 0;
  __p = 0;
  v60 = 0;
  v61 = 0;
  sub_1C6325ED4((uint64_t)&__p, v4);
  v7 = (char *)__p;
  v6 = v60;
  while (v6 != v7)
  {
    v8 = *((_QWORD *)v6 - 1);
    v6 -= 8;
    v9 = v8 + 40;
    v10 = *(_QWORD *)(v8 + 48);
    while (v10 != v9)
    {
      if (v10)
        v11 = v10 - 24;
      else
        v11 = 0;
      sub_1C5C24AC8(a1, v11);
      v10 = *(_QWORD *)(v10 + 8);
      if (v12)
      {
        if (*(_BYTE *)(*(_QWORD *)v11 + 8) == 7)
        {
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v11 + 40) + 40, (uint64_t ***)v11);
          v13 = *(_QWORD *)(v11 + 24);
          v14 = *(_QWORD **)(v11 + 32);
          *v14 = v13;
          *(_QWORD *)(v13 + 8) = v14;
          *(_QWORD *)(v11 + 24) = 0;
          *(_QWORD *)(v11 + 32) = 0;
          llvm::Value::deleteValue((llvm::Value *)v11);
        }
      }
    }
  }
  v15 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v15)
  {
    v18 = *(_QWORD *)(a1 + 24);
    v19 = v18 + 16 * v15;
    v58 = v19;
    v20 = (unsigned int *)(a1 + 296);
    while (1)
    {
      v21 = *(llvm::Value **)v18;
      v68 = v21;
      if (!*((_QWORD *)v21 + 1))
        goto LABEL_68;
      v22 = *(unsigned __int8 ****)(v18 + 8);
      v23 = (unsigned __int8 *)llvm::PoisonValue::get(*(llvm::PoisonValue **)v21, v5);
      v5 = v68;
      if (*(_QWORD *)v68 && (*(_DWORD *)(*(_QWORD *)v68 + 8) & 0xFE) == 18)
        break;
      v25 = **v22;
      if (v68 != (llvm::Value *)v25)
        goto LABEL_67;
LABEL_74:
      v18 += 16;
      if (v18 == v19)
        goto LABEL_78;
    }
    v25 = v23;
    v26 = *((_QWORD *)v68 + 5);
    v27 = *(unsigned int *)(*(_QWORD *)v68 + 32);
    sub_1C4773D54((uint64_t)v69, (uint64_t)v68, 0, 0, 0);
    if (*((_BYTE *)v68 + 16) == 83)
    {
      v29 = v26 + 40;
      for (i = *(_QWORD *)(v26 + 48); i != v29; i = *(_QWORD *)(i + 8))
      {
        v31 = i - 24;
        if (!i)
          v31 = 0;
        if (*(_BYTE *)(v31 + 16) != 83)
        {
          v32 = *(unsigned __int8 *)(i - 8) - 38;
          v33 = v32 > 0x38;
          v34 = (1 << v32) & 0x100060000000001;
          if (v33 || v34 == 0)
            v29 = i;
          else
            v29 = *(_QWORD *)(i + 8);
          break;
        }
      }
      sub_1C4D8AE2C((uint64_t)v69, v26, v29);
    }
    if (!(_DWORD)v27)
    {
LABEL_64:
      llvm::Value::takeName((llvm::Value *)v25, v68);
      if (v69[0] != &v70)
        free(v69[0]);
      v5 = v68;
      v19 = v58;
      v20 = (unsigned int *)(a1 + 296);
LABEL_67:
      llvm::Value::doRAUW(v5, (llvm::Value *)v25, (llvm::Value *)1);
LABEL_68:
      v54 = *(_DWORD *)(a1 + 304);
      if (v54 >= *(_DWORD *)(a1 + 308))
      {
        sub_1C578EDF4(v20, (uint64_t *)&v68);
      }
      else
      {
        v55 = v68;
        v56 = (llvm::ValueHandleBase *)(*(_QWORD *)v20 + 24 * v54);
        *(_QWORD *)v56 = 6;
        *((_QWORD *)v56 + 1) = 0;
        *((_QWORD *)v56 + 2) = v55;
        if (v55 != (llvm::Value *)-8192 && v55 != (llvm::Value *)-4096 && v55)
        {
          llvm::ValueHandleBase::AddToUseList(v56);
          v54 = *(_DWORD *)(a1 + 304);
        }
        *(_DWORD *)(a1 + 304) = v54 + 1;
      }
      goto LABEL_74;
    }
    v36 = 0;
    while (1)
    {
      v37 = (uint64_t)(*v22)[v36];
      v38 = *(llvm::ConstantInt **)(*(_QWORD *)v72 + 1960);
      v39 = *(_DWORD *)(*(_QWORD *)v72 + 1968);
      v65 = v39 >> 8;
      if (v39 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v64, v36, 0);
      }
      else
      {
        if (v39 <= 0xFF)
          v40 = 0;
        else
          v40 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v39);
        v64 = (_QWORD *)(v40 & v36);
      }
      v41 = llvm::ConstantInt::get(v38, (llvm::LLVMContext *)&v64, v28);
      if (v65 >= 0x41 && v64)
        MEMORY[0x1CAA32F9C](v64, 0x1000C8000313F17);
      if ((*((_BYTE *)v68 + 23) & 0x10) == 0)
      {
        v51 = 0;
        v52 = &byte_1C871356D;
        goto LABEL_58;
      }
      v42 = ***(_QWORD ***)v68;
      v43 = *(_QWORD *)(v42 + 152);
      v44 = *(unsigned int *)(v42 + 168);
      if (!(_DWORD)v44)
        goto LABEL_56;
      LODWORD(v45) = (v44 - 1) & ((v68 >> 4) ^ (v68 >> 9));
      v46 = v43 + 16 * v45;
      v47 = *(llvm::Value **)v46;
      if (*(llvm::Value **)v46 != v68)
        break;
LABEL_57:
      v50 = *(_QWORD **)(v46 + 8);
      v53 = *v50;
      v52 = (char *)(v50 + 2);
      v51 = v53;
LABEL_58:
      v63 = 773;
      v62[0] = v52;
      v62[1] = v51;
      v62[2] = ".upto";
      v2 = v2 & 0xFFFFFFFF00000000 | v36;
      v64 = v62;
      v66 = v2;
      v67 = 2050;
      v25 = sub_1C4773154((uint64_t *)v69, (uint64_t)v25, v37, (uint64_t)v41, (uint64_t)&v64);
      if (++v36 == v27)
        goto LABEL_64;
    }
    v48 = 1;
    while (v47 != (llvm::Value *)-4096)
    {
      v49 = v45 + v48++;
      v45 = v49 & (v44 - 1);
      v47 = *(llvm::Value **)(v43 + 16 * v45);
      if (v47 == v68)
      {
        v46 = v43 + 16 * v45;
        goto LABEL_57;
      }
    }
LABEL_56:
    v46 = v43 + 16 * v44;
    goto LABEL_57;
  }
  if (!*(_QWORD *)(a1 + 16))
  {
    v16 = 0;
    goto LABEL_17;
  }
LABEL_78:
  *(_DWORD *)(a1 + 32) = 0;
  sub_1C61D72D8(*(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v71 = 0;
  llvm::RecursivelyDeleteTriviallyDeadInstructionsPermissive((unsigned int *)(a1 + 296), 0, 0, v69);
  if (v71 == v69)
  {
    v57 = (void (**)(void))((char *)v69[0] + 32);
    goto LABEL_82;
  }
  if (v71)
  {
    v57 = (void (**)(void))((char *)*v71 + 40);
LABEL_82:
    (*v57)();
  }
  v16 = 1;
LABEL_17:
  if (__p)
  {
    v60 = (char *)__p;
    operator delete(__p);
  }
  return v16;
}

uint64_t sub_1C5C24894(uint64_t a1)
{
  void *v2;

  sub_1C6288830((char **)(a1 + 296));
  v2 = *(void **)(a1 + 24);
  if (v2 != (void *)(a1 + 40))
    free(v2);
  sub_1C61D72D8(*(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_1C5C248D8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5C242D8(v0);
}

void sub_1C5C24904(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5C24928(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1C5C24964(llvm::FunctionPass *a1, uint64_t a2)
{
  uint64_t v4;
  int MDKindID;
  char **v7;
  char *v8;
  uint64_t v9;
  _QWORD **v10;
  _QWORD *v11[2];
  void *v12;
  uint64_t v13;
  _BYTE v14[256];
  char *v15[2];
  _DWORD v16[194];
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, (const llvm::Function *)a2) & 1) != 0)
    return 0;
  MDKindID = llvm::LLVMContext::getMDKindID(**(uint64_t ***)(a2 + 40), "llvm.mem.parallel_loop_access", 0x1DuLL);
  v7 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != llvm::DominatorTreeWrapperPass::ID);
  v9 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), llvm::DominatorTreeWrapperPass::ID);
  v10 = v11;
  v11[0] = 0;
  v11[1] = 0;
  v12 = v14;
  v13 = 0x1000000000;
  v15[0] = (char *)v16;
  v15[1] = (char *)0x2000000000;
  v16[192] = MDKindID;
  v17 = v9 + 32;
  v18 = byte_1ED822D08 != 0;
  v19 = byte_1ED822DC8 != 0;
  v4 = sub_1C5C243A0((uint64_t)&v10, *(_QWORD *)(a2 + 80));
  sub_1C6288830(v15);
  if (v12 != v14)
    free(v12);
  sub_1C61D72D8(v11[0]);
  return v4;
}

void sub_1C5C24AC8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

BOOL sub_1C5C24B2C()
{
  unint64_t v0;
  uint64_t v1;

  return sub_1C5C29354(v1, v0);
}

void sub_1C5C270C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char **v5;
  char **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  const void *v11;
  const void *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  _BYTE *v17;
  const void *v18;
  const void *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  _BYTE *v26;
  void *v27;
  void *v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  _BYTE *v32;
  _BYTE *v33;
  unsigned int v34;
  _BYTE *v35;
  _BYTE *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  _BYTE *v40;
  _BYTE *v41;
  unsigned int v42;
  _BYTE *v43;
  _BYTE *v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int v52;
  _DWORD *v53;
  _DWORD *v54;
  char *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  _BYTE *v74;
  _BYTE *v75;
  unsigned int v76;
  unsigned int v77;
  char **v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unsigned int v83;
  int v84;
  _BYTE *v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  _BYTE v89[64];
  void *v90;
  uint64_t v91;
  _BYTE v92[192];
  _BYTE *v93;
  _BYTE *v94;
  uint64_t v95;
  int v96;
  _BYTE v97[64];
  void *v98;
  uint64_t v99;
  _BYTE v100[192];
  _BYTE *v101;
  void *v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  _BYTE v106[64];
  void *v107;
  uint64_t v108;
  _QWORD v109[25];
  _BYTE *v110;
  void *v111;
  unint64_t v112;
  int v113;
  _BYTE v114[64];
  void *v115;
  uint64_t v116;
  _BYTE v117[192];
  _BYTE *v118;
  void *__src;
  unint64_t v120;
  int v121;
  _BYTE v122[64];
  void *v123;
  uint64_t v124;
  _BYTE v125[192];
  _BYTE *v126;
  void *v127;
  unint64_t v128;
  int v129;
  _BYTE v130[64];
  void *v131;
  uint64_t v132;
  _BYTE v133[192];
  _BYTE *v134;
  void *v135;
  unint64_t v136;
  int v137;
  _BYTE v138[64];
  void *v139;
  uint64_t v140;
  _BYTE v141[192];
  _BYTE *v142;
  void *v143;
  unint64_t v144;
  int v145;
  _BYTE v146[64];
  void *v147;
  uint64_t v148;
  _BYTE v149[192];
  _BYTE *v150;
  void *v151;
  unint64_t v152;
  int v153;
  _BYTE v154[64];
  void *v155;
  uint64_t v156;
  _BYTE v157[192];
  _BYTE *v158;
  void *v159;
  unint64_t v160;
  int v161;
  _BYTE v162[64];
  void *v163;
  uint64_t v164;
  _BYTE v165[192];
  _BYTE *v166;
  void *v167;
  int v168;
  int v169;
  int v170;
  _BYTE v171[64];
  void *v172;
  uint64_t v173;
  _BYTE v174[192];
  __int128 v175;
  unint64_t v176;
  int v177;
  _BYTE v178[64];
  void *v179;
  uint64_t v180;
  _BYTE v181[192];
  _BYTE *v182;
  void *v183;
  unint64_t v184;
  int v185;
  _BYTE v186[64];
  void *v187;
  uint64_t v188;
  _BYTE v189[192];
  char **v190;
  _BYTE *v191;
  void *v192;
  unint64_t v193;
  int v194;
  _BYTE v195[64];
  void *v196;
  uint64_t v197;
  _BYTE v198[192];
  _BYTE *v199;
  void *v200;
  uint64_t v201;
  int v202;
  _BYTE v203[64];
  void *v204;
  uint64_t v205;
  _BYTE v206[192];
  _BYTE *v207;
  void *v208;
  unint64_t v209;
  int v210;
  _BYTE v211[64];
  void *v212;
  uint64_t v213;
  _BYTE v214[192];
  _BYTE *v215;
  void *v216;
  unint64_t v217;
  int v218;
  _BYTE v219[64];
  void *v220;
  uint64_t v221;
  _BYTE v222[192];
  _BYTE *v223;
  void *v224;
  unint64_t v225;
  int v226;
  _BYTE v227[64];
  void *v228;
  uint64_t v229;
  _BYTE v230[192];
  _BYTE *v231;
  void *v232;
  unint64_t v233;
  int v234;
  _BYTE v235[64];
  void *v236;
  uint64_t v237;
  _BYTE v238[192];
  _BYTE *v239;
  void *v240;
  unint64_t v241;
  int v242;
  _BYTE v243[64];
  void *v244;
  uint64_t v245;
  _QWORD v246[26];

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v6 = v5;
  v8 = v7;
  v9 = v4;
  v246[24] = *MEMORY[0x1E0C80C00];
  v10 = v97;
  v93 = v97;
  v11 = *(const void **)(v9 + 8);
  if (v11 == *(const void **)v9)
  {
    v94 = v97;
    v12 = v11;
  }
  else
  {
    v80 = *(unsigned int *)(v9 + 16);
    v10 = malloc_type_malloc(8 * v80, 0x4065EBACuLL);
    if (!v10)
    {
      if ((_DWORD)v80)
        goto LABEL_345;
      v10 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v10)
        goto LABEL_345;
    }
    v94 = v10;
    v12 = *(const void **)v9;
    v11 = *(const void **)(v9 + 8);
  }
  v14 = *(_DWORD *)(v9 + 16);
  v13 = *(_DWORD *)(v9 + 20);
  LODWORD(v95) = v14;
  if (v11 == v12)
    v15 = v13;
  else
    v15 = v14;
  if (v15)
  {
    memmove(v10, v11, 8 * v15);
    v13 = *(_DWORD *)(v9 + 20);
  }
  v16 = *(_DWORD *)(v9 + 24);
  HIDWORD(v95) = v13;
  v96 = v16;
  v98 = v100;
  v99 = 0x800000000;
  if (*(_DWORD *)(v9 + 104))
    sub_1C4DB22B8((uint64_t)&v98, (uint64_t *)(v9 + 96));
  v17 = v89;
  v18 = *(const void **)(v8 + 8);
  if (v18 == *(const void **)v8)
  {
    v85 = v89;
    v19 = *(const void **)(v8 + 8);
  }
  else
  {
    v81 = *(unsigned int *)(v8 + 16);
    v17 = malloc_type_malloc(8 * v81, 0x4065EBACuLL);
    if (!v17)
    {
      if ((_DWORD)v81)
        goto LABEL_345;
      v17 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v17)
        goto LABEL_345;
    }
    v85 = v17;
    v19 = *(const void **)v8;
    v18 = *(const void **)(v8 + 8);
  }
  v20 = *(_DWORD *)(v8 + 20);
  v86 = *(_DWORD *)(v8 + 16);
  if (v18 == v19)
    v21 = *(_DWORD *)(v8 + 20);
  else
    v21 = *(_DWORD *)(v8 + 16);
  if (v21)
  {
    memmove(v17, v18, 8 * v21);
    v20 = *(_DWORD *)(v8 + 20);
  }
  v87 = v20;
  v88 = *(_DWORD *)(v8 + 24);
  v90 = v92;
  v91 = 0x800000000;
  if (*(_DWORD *)(v8 + 104))
    sub_1C4DB22B8((uint64_t)&v90, (uint64_t *)(v8 + 96));
  v118 = v122;
  if (v94 == v93)
  {
    __src = v122;
    v22 = HIDWORD(v95);
    if (HIDWORD(v95))
      memmove(v122, v94, 8 * HIDWORD(v95));
  }
  else
  {
    __src = v94;
    v94 = v93;
    v22 = HIDWORD(v95);
  }
  v120 = __PAIR64__(v22, v95);
  v121 = v96;
  v95 = 8;
  v96 = 0;
  v123 = v125;
  v124 = 0x800000000;
  if ((_DWORD)v99)
    sub_1C4DB2150((uint64_t)&v123, (uint64_t *)&v98);
  v110 = v114;
  if (v85 == v89)
  {
    v111 = v114;
    v23 = v87;
    if (v87)
      memmove(v114, v85, 8 * v87);
  }
  else
  {
    v111 = v85;
    v85 = v89;
    v23 = v87;
  }
  v112 = __PAIR64__(v23, v86);
  v113 = v88;
  v115 = v117;
  v116 = 0x800000000;
  if ((_DWORD)v91)
    sub_1C4DB2150((uint64_t)&v115, (uint64_t *)&v90);
  v134 = v138;
  if (__src == v118)
  {
    v135 = v138;
    v24 = HIDWORD(v120);
    if (HIDWORD(v120))
      memmove(v138, __src, 8 * HIDWORD(v120));
  }
  else
  {
    v135 = __src;
    __src = v118;
    v24 = HIDWORD(v120);
  }
  v136 = __PAIR64__(v24, v120);
  v137 = v121;
  v120 = 8;
  v121 = 0;
  v139 = v141;
  v140 = 0x800000000;
  if ((_DWORD)v124)
    sub_1C4DB2150((uint64_t)&v139, (uint64_t *)&v123);
  v126 = v130;
  if (v111 == v110)
  {
    v127 = v130;
    v25 = HIDWORD(v112);
    if (HIDWORD(v112))
      memmove(v130, v111, 8 * HIDWORD(v112));
  }
  else
  {
    v127 = v111;
    v111 = v110;
    v25 = HIDWORD(v112);
  }
  v128 = __PAIR64__(v25, v112);
  v129 = v113;
  v112 = 8;
  v113 = 0;
  v131 = v133;
  v132 = 0x800000000;
  if ((_DWORD)v116)
    sub_1C4DB2150((uint64_t)&v131, (uint64_t *)&v115);
  v26 = v203;
  v199 = v203;
  v27 = v135;
  if (v135 == v134)
  {
    v200 = v203;
    v28 = v135;
  }
  else
  {
    v82 = v136;
    v26 = malloc_type_malloc(8 * v136, 0x4065EBACuLL);
    if (!v26)
    {
      if (v82)
        goto LABEL_345;
      v26 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v26)
        goto LABEL_345;
    }
    v200 = v26;
    v28 = v134;
    v27 = v135;
  }
  v29 = HIDWORD(v136);
  LODWORD(v201) = v136;
  if (v27 == v28)
    v30 = HIDWORD(v136);
  else
    v30 = v136;
  if (v30)
  {
    memmove(v26, v27, 8 * v30);
    v29 = HIDWORD(v136);
  }
  HIDWORD(v201) = v29;
  v202 = v137;
  v204 = v206;
  v205 = 0x800000000;
  if ((_DWORD)v140)
    sub_1C4DB22B8((uint64_t)&v204, (uint64_t *)&v139);
  v191 = v195;
  if (v127 == v126)
  {
    v192 = v195;
    v31 = HIDWORD(v128);
    if (HIDWORD(v128))
      memmove(v195, v127, 8 * HIDWORD(v128));
  }
  else
  {
    v192 = v127;
    v127 = v126;
    v31 = HIDWORD(v128);
  }
  v193 = __PAIR64__(v31, v128);
  v194 = v129;
  v128 = 8;
  v129 = 0;
  v196 = v198;
  v197 = 0x800000000;
  if ((_DWORD)v132)
    sub_1C4DB2150((uint64_t)&v196, (uint64_t *)&v131);
  v32 = v106;
  v101 = v106;
  v33 = v200;
  if (v200 == v199)
  {
    v102 = v106;
    v34 = HIDWORD(v201);
    if (HIDWORD(v201))
      memmove(v106, v200, 8 * HIDWORD(v201));
    v33 = v106;
  }
  else
  {
    v102 = v200;
    v200 = v199;
    v34 = HIDWORD(v201);
  }
  v103 = v201;
  v104 = v34;
  v105 = v202;
  v201 = 8;
  v202 = 0;
  v107 = v109;
  v108 = 0x800000000;
  if ((_DWORD)v205)
  {
    sub_1C4DB2150((uint64_t)&v107, (uint64_t *)&v204);
    v33 = v102;
    v32 = v101;
  }
  v35 = v211;
  v207 = v211;
  if (v33 == v32)
  {
    v208 = v211;
    v36 = v32;
  }
  else
  {
    v83 = v103;
    v35 = malloc_type_malloc(8 * v103, 0x4065EBACuLL);
    if (!v35)
    {
      if (v83)
        goto LABEL_345;
      v35 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v35)
        goto LABEL_345;
    }
    v208 = v35;
    v36 = v101;
    v32 = v102;
  }
  v37 = v104;
  LODWORD(v209) = v103;
  if (v32 == v36)
    v38 = v104;
  else
    v38 = v103;
  if (v38)
  {
    memmove(v35, v32, 8 * v38);
    v37 = v104;
  }
  HIDWORD(v209) = v37;
  v210 = v105;
  v212 = v214;
  v213 = 0x800000000;
  if ((_DWORD)v108)
    sub_1C4DB22B8((uint64_t)&v212, (uint64_t *)&v107);
  v182 = v186;
  if (v208 == v207)
  {
    v183 = v186;
    v39 = HIDWORD(v209);
    if (HIDWORD(v209))
      memmove(v186, v208, 8 * HIDWORD(v209));
  }
  else
  {
    v183 = v208;
    v208 = v207;
    v39 = HIDWORD(v209);
  }
  v184 = __PAIR64__(v39, v209);
  v185 = v210;
  v209 = 8;
  v210 = 0;
  v187 = v189;
  v188 = 0x800000000;
  if ((_DWORD)v213)
    sub_1C4DB2150((uint64_t)&v187, (uint64_t *)&v212);
  if (v212 != v214)
    free(v212);
  if (v208 != v207)
    free(v208);
  v40 = v235;
  v231 = v235;
  v41 = v192;
  if (v192 == v191)
  {
    v232 = v235;
    v42 = HIDWORD(v193);
    if (HIDWORD(v193))
      memmove(v235, v192, 8 * HIDWORD(v193));
    v41 = v235;
  }
  else
  {
    v232 = v192;
    v192 = v191;
    v42 = HIDWORD(v193);
  }
  v233 = __PAIR64__(v42, v193);
  v234 = v194;
  v193 = 8;
  v194 = 0;
  v236 = v238;
  v237 = 0x800000000;
  if ((_DWORD)v197)
  {
    sub_1C4DB2150((uint64_t)&v236, (uint64_t *)&v196);
    v41 = v232;
    v40 = v231;
  }
  v43 = v211;
  v207 = v211;
  if (v41 != v40)
  {
    v84 = v233;
    v43 = malloc_type_malloc(8 * v233, 0x4065EBACuLL);
    if (v43 || !v84 && (v43 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v208 = v43;
      v44 = v231;
      v40 = v232;
      goto LABEL_85;
    }
LABEL_345:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v208 = v211;
  v44 = v40;
LABEL_85:
  v45 = HIDWORD(v233);
  LODWORD(v209) = v233;
  if (v40 == v44)
    v46 = HIDWORD(v233);
  else
    v46 = v233;
  if (v46)
  {
    memmove(v43, v40, 8 * v46);
    v45 = HIDWORD(v233);
  }
  HIDWORD(v209) = v45;
  v210 = v234;
  v212 = v214;
  v213 = 0x800000000;
  if ((_DWORD)v237)
    sub_1C4DB22B8((uint64_t)&v212, (uint64_t *)&v236);
  v239 = v243;
  if (v208 == v207)
  {
    v240 = v243;
    v47 = HIDWORD(v209);
    if (HIDWORD(v209))
      memmove(v243, v208, 8 * HIDWORD(v209));
  }
  else
  {
    v240 = v208;
    v208 = v207;
    v47 = HIDWORD(v209);
  }
  v241 = __PAIR64__(v47, v209);
  v242 = v210;
  v209 = 8;
  v210 = 0;
  v244 = v246;
  v245 = 0x800000000;
  if ((_DWORD)v213)
    sub_1C4DB2150((uint64_t)&v244, (uint64_t *)&v212);
  if (v212 != v214)
    free(v212);
  if (v208 != v207)
    free(v208);
  v207 = v211;
  if (v183 == v182)
  {
    v208 = v211;
    v48 = HIDWORD(v184);
    if (HIDWORD(v184))
      memmove(v211, v183, 8 * HIDWORD(v184));
  }
  else
  {
    v208 = v183;
    v183 = v182;
    v48 = HIDWORD(v184);
  }
  v209 = __PAIR64__(v48, v184);
  v210 = v185;
  v184 = 8;
  v185 = 0;
  v212 = v214;
  v213 = 0x800000000;
  if ((_DWORD)v188)
    sub_1C4DB2150((uint64_t)&v212, (uint64_t *)&v187);
  v215 = v219;
  if (v240 == v239)
  {
    v216 = v219;
    v49 = HIDWORD(v241);
    if (HIDWORD(v241))
      memmove(v219, v240, 8 * HIDWORD(v241));
  }
  else
  {
    v216 = v240;
    v240 = v239;
    v49 = HIDWORD(v241);
  }
  v217 = __PAIR64__(v49, v241);
  v218 = v242;
  v241 = 8;
  v242 = 0;
  v220 = v222;
  v221 = 0x800000000;
  if ((_DWORD)v245)
    sub_1C4DB2150((uint64_t)&v220, (uint64_t *)&v244);
  if (v244 != v246)
    free(v244);
  if (v240 != v239)
    free(v240);
  if (v236 != v238)
    free(v236);
  if (v232 != v231)
    free(v232);
  if (v187 != v189)
    free(v187);
  if (v183 != v182)
    free(v183);
  if (v107 != v109)
    free(v107);
  if (v102 != v101)
    free(v102);
  if (v196 != v198)
    free(v196);
  if (v192 != v191)
    free(v192);
  if (v204 != v206)
    free(v204);
  if (v200 != v199)
    free(v200);
  *(_QWORD *)&v175 = v178;
  if (v208 == v207)
  {
    *((_QWORD *)&v175 + 1) = v178;
    v50 = HIDWORD(v209);
    if (HIDWORD(v209))
      memmove(v178, v208, 8 * HIDWORD(v209));
  }
  else
  {
    *((_QWORD *)&v175 + 1) = v208;
    v208 = v207;
    v50 = HIDWORD(v209);
  }
  v176 = __PAIR64__(v50, v209);
  v177 = v210;
  v209 = 8;
  v210 = 0;
  v179 = v181;
  v180 = 0x800000000;
  if ((_DWORD)v213)
    sub_1C4DB2150((uint64_t)&v179, (uint64_t *)&v212);
  v166 = v171;
  if (v216 == v215)
  {
    v167 = v171;
    v51 = HIDWORD(v217);
    if (HIDWORD(v217))
      memmove(v171, v216, 8 * HIDWORD(v217));
  }
  else
  {
    v167 = v216;
    v216 = v215;
    v51 = HIDWORD(v217);
  }
  v168 = v217;
  v169 = v51;
  v170 = v218;
  v217 = 8;
  v218 = 0;
  v172 = v174;
  v173 = 0x800000000;
  if ((_DWORD)v221)
    sub_1C4DB2150((uint64_t)&v172, (uint64_t *)&v220);
  while (1)
  {
    v52 = v180;
    if ((_DWORD)v180 != (_DWORD)v173)
      goto LABEL_155;
    if (!(_DWORD)v180)
      break;
    v53 = v172;
    v54 = v179;
    while (*(_QWORD *)v54 == *(_QWORD *)v53 && v54[4] == v53[4])
    {
      v54 += 6;
      v53 += 6;
      if (v54 == (_DWORD *)((char *)v179 + 24 * v180))
        goto LABEL_174;
    }
LABEL_155:
    v56 = (char *)v179 + 24 * v180;
    v58 = v6[1];
    v57 = (unint64_t)v6[2];
    if ((unint64_t)v58 >= v57)
    {
      v60 = *v6;
      v61 = (v58 - *v6) >> 3;
      v62 = v61 + 1;
      if ((unint64_t)(v61 + 1) >> 61)
        abort();
      v63 = v57 - (_QWORD)v60;
      if (v63 >> 2 > v62)
        v62 = v63 >> 2;
      if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
        v64 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v64 = v62;
      if (v64)
      {
        if (v64 >> 61)
          sub_1C4764EE4();
        v65 = (char *)operator new(8 * v64);
      }
      else
      {
        v65 = 0;
      }
      v66 = &v65[8 * v61];
      *(_QWORD *)v66 = *((_QWORD *)v56 - 3);
      v59 = v66 + 8;
      if (v58 != v60)
      {
        do
        {
          v67 = *((_QWORD *)v58 - 1);
          v58 -= 8;
          *((_QWORD *)v66 - 1) = v67;
          v66 -= 8;
        }
        while (v58 != v60);
        v58 = *v6;
      }
      *v6 = v66;
      v6[1] = v59;
      v6[2] = &v65[8 * v64];
      if (v58)
      {
        operator delete(v58);
        v52 = v180;
      }
    }
    else
    {
      *(_QWORD *)v58 = *((_QWORD *)v56 - 3);
      v59 = v58 + 8;
    }
    v6[1] = v59;
    LODWORD(v180) = v52 - 1;
    if (v52 != 1)
      sub_1C4EB7588(&v175);
  }
LABEL_174:
  v182 = v186;
  if (*((_QWORD *)&v175 + 1) == (_QWORD)v175)
  {
    v183 = v186;
    v68 = HIDWORD(v176);
    if (HIDWORD(v176))
      memmove(v186, *((const void **)&v175 + 1), 8 * HIDWORD(v176));
  }
  else
  {
    v183 = (void *)*((_QWORD *)&v175 + 1);
    *((_QWORD *)&v175 + 1) = v175;
    v68 = HIDWORD(v176);
  }
  v184 = __PAIR64__(v68, v176);
  v185 = v177;
  v176 = 8;
  v177 = 0;
  v187 = v189;
  v188 = 0x800000000;
  if (v52)
    sub_1C4DB2150((uint64_t)&v187, (uint64_t *)&v179);
  v190 = v6;
  if (v172 != v174)
    free(v172);
  if (v167 != v166)
    free(v167);
  if (v179 != v181)
    free(v179);
  if (*((_QWORD *)&v175 + 1) != (_QWORD)v175)
    free(*((void **)&v175 + 1));
  v150 = v154;
  if (v135 == v134)
  {
    v151 = v154;
    v69 = HIDWORD(v136);
    if (HIDWORD(v136))
      memmove(v154, v135, 8 * HIDWORD(v136));
  }
  else
  {
    v151 = v135;
    v135 = v134;
    v69 = HIDWORD(v136);
  }
  v152 = __PAIR64__(v69, v136);
  v153 = v137;
  v136 = 8;
  v137 = 0;
  v155 = v157;
  v156 = 0x800000000;
  if ((_DWORD)v140)
    sub_1C4DB2150((uint64_t)&v155, (uint64_t *)&v139);
  v142 = v146;
  if (v183 == v182)
  {
    v143 = v146;
    v70 = HIDWORD(v184);
    if (HIDWORD(v184))
      memmove(v146, v183, 8 * HIDWORD(v184));
  }
  else
  {
    v143 = v183;
    v183 = v182;
    v70 = HIDWORD(v184);
  }
  v144 = __PAIR64__(v70, v184);
  v145 = v185;
  v184 = 8;
  v185 = 0;
  v147 = v149;
  v148 = 0x800000000;
  if ((_DWORD)v188)
    sub_1C4DB2150((uint64_t)&v147, (uint64_t *)&v187);
  v231 = v235;
  if (v151 == v150)
  {
    v232 = v235;
    v71 = HIDWORD(v152);
    if (HIDWORD(v152))
      memmove(v235, v151, 8 * HIDWORD(v152));
  }
  else
  {
    v232 = v151;
    v151 = v150;
    v71 = HIDWORD(v152);
  }
  v233 = __PAIR64__(v71, v152);
  v234 = v153;
  v152 = 8;
  v153 = 0;
  v236 = v238;
  v237 = 0x800000000;
  if ((_DWORD)v156)
    sub_1C4DB2150((uint64_t)&v236, (uint64_t *)&v155);
  v223 = v227;
  if (v143 == v142)
  {
    v224 = v227;
    v72 = HIDWORD(v144);
    if (HIDWORD(v144))
      memmove(v227, v143, 8 * HIDWORD(v144));
  }
  else
  {
    v224 = v143;
    v143 = v142;
    v72 = HIDWORD(v144);
  }
  v225 = __PAIR64__(v72, v144);
  v226 = v145;
  v144 = 8;
  v145 = 0;
  v228 = v230;
  v229 = 0x800000000;
  if ((_DWORD)v148)
    sub_1C4DB2150((uint64_t)&v228, (uint64_t *)&v147);
  v101 = v106;
  if (v232 == v231)
  {
    v102 = v106;
    v73 = HIDWORD(v233);
    if (HIDWORD(v233))
      memmove(v106, v232, 8 * HIDWORD(v233));
  }
  else
  {
    v102 = v232;
    v232 = v231;
    v73 = HIDWORD(v233);
  }
  v103 = v233;
  v104 = v73;
  v105 = v234;
  v233 = 8;
  v234 = 0;
  v107 = v109;
  v108 = 0x800000000;
  if ((_DWORD)v237)
    sub_1C4DB2150((uint64_t)&v107, (uint64_t *)&v236);
  v74 = v243;
  v239 = v243;
  v75 = v224;
  if (v224 == v223)
  {
    v240 = v243;
    v76 = HIDWORD(v225);
    if (HIDWORD(v225))
      memmove(v243, v224, 8 * HIDWORD(v225));
    v75 = v243;
  }
  else
  {
    v240 = v224;
    v224 = v223;
    v76 = HIDWORD(v225);
  }
  v241 = __PAIR64__(v76, v225);
  v242 = v226;
  v225 = 8;
  v226 = 0;
  v244 = v246;
  v245 = 0x800000000;
  if ((_DWORD)v229)
  {
    sub_1C4DB2150((uint64_t)&v244, (uint64_t *)&v228);
    v75 = v240;
    v74 = v239;
  }
  v158 = v162;
  if (v75 == v74)
  {
    v159 = v162;
    v77 = HIDWORD(v241);
    if (HIDWORD(v241))
      memmove(v162, v74, 8 * HIDWORD(v241));
  }
  else
  {
    v159 = v75;
    v240 = v74;
    v77 = HIDWORD(v241);
  }
  v160 = __PAIR64__(v77, v241);
  v161 = v242;
  v241 = 8;
  v242 = 0;
  v163 = v165;
  v164 = 0x800000000;
  if ((_DWORD)v245)
    sub_1C4DB2150((uint64_t)&v163, (uint64_t *)&v244);
  if (v244 != v246)
    free(v244);
  if (v240 != v239)
    free(v240);
  if (v107 != v109)
    free(v107);
  if (v102 != v101)
    free(v102);
  if (v228 != v230)
    free(v228);
  if (v224 != v223)
    free(v224);
  if (v236 != v238)
    free(v236);
  if (v232 != v231)
    free(v232);
  v78 = v190;
  v101 = v106;
  if (v159 == v158)
  {
    v102 = v106;
    v79 = HIDWORD(v160);
    if (HIDWORD(v160))
      memmove(v106, v159, 8 * HIDWORD(v160));
  }
  else
  {
    v102 = v159;
    v159 = v158;
    v79 = HIDWORD(v160);
  }
  v103 = v160;
  v104 = v79;
  v105 = v161;
  v160 = 8;
  v161 = 0;
  v107 = v109;
  v108 = 0x800000000;
  if ((_DWORD)v164)
    sub_1C4DB2150((uint64_t)&v107, (uint64_t *)&v163);
  v109[24] = v78;
  if (v163 != v165)
    free(v163);
  if (v159 != v158)
    free(v159);
  if (v147 != v149)
    free(v147);
  if (v143 != v142)
    free(v143);
  if (v155 != v157)
    free(v155);
  if (v151 != v150)
    free(v151);
  if (v187 != v189)
    free(v187);
  if (v183 != v182)
    free(v183);
  if (v220 != v222)
    free(v220);
  if (v216 != v215)
    free(v216);
  if (v212 != v214)
    free(v212);
  if (v208 != v207)
    free(v208);
  if (v131 != v133)
    free(v131);
  if (v127 != v126)
    free(v127);
  if (v139 != v141)
    free(v139);
  if (v135 != v134)
    free(v135);
  if (v115 != v117)
    free(v115);
  if (v111 != v110)
    free(v111);
  if (v123 != v125)
    free(v123);
  if (__src != v118)
    free(__src);
  if (v107 != v109)
    free(v107);
  if (v102 != v101)
    free(v102);
  if (v90 != v92)
    free(v90);
  if (v85 != v89)
    free(v85);
  if (v98 != v100)
    free(v98);
  if (v94 != v93)
    free(v94);
}

uint64_t sub_1C5C2862C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v13[3];

  *(_QWORD *)a1 = a1 + 32;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 112;
  v4 = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0x800000000;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, a2);
  v5 = *(_QWORD *)(a2 + 40);
  if (v5 == a2 + 40 || v5 == 0)
  {
    if (v5 == a2 + 40)
    {
      v7 = 0;
      goto LABEL_8;
    }
    v7 = v5 - 24;
    if (!v5)
      v7 = 0;
    v8 = (unsigned __int8 *)(v7 + 16);
  }
  else
  {
    v7 = v5 - 24;
    v8 = (unsigned __int8 *)(v5 - 8);
  }
  if (*v8 - 29 >= 0xB)
    v7 = 0;
LABEL_8:
  v13[0] = a2;
  v13[1] = v7;
  v13[2] = 0;
  v9 = sub_1C4926708(v4, (unint64_t)v13, 1);
  v10 = *(_QWORD *)(a1 + 96) + 24 * *(unsigned int *)(a1 + 104);
  v11 = *(_OWORD *)v9;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v9 + 16);
  *(_OWORD *)v10 = v11;
  ++*(_DWORD *)(a1 + 104);
  sub_1C4EB7588((__int128 *)a1);
  return a1;
}

uint64_t sub_1C5C28730(uint64_t a1, uint64_t a2, uint64_t a3, llvm::UndefValue *a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  llvm::Type *v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  llvm::UndefValue *v28;

  v6 = (uint64_t *)a4;
  v9 = a1;
  v28 = a4;
  v10 = *((unsigned __int8 *)a4 + 16);
  if (a4 && v10 == 21)
  {
    v11 = *(_QWORD *)(*((_QWORD *)a4 + 3) + 80);
    if (v11)
      v12 = v11 - 24;
    else
      v12 = 0;
    v13 = *(_QWORD *)(v12 + 48);
LABEL_7:
    v14 = (unsigned int *)(sub_1C5C2901C((uint64_t **)a2, (unint64_t)v6, (uint64_t **)&v28) + 5);
    return sub_1C5C28F94(v9, v12, v13, v6, a5, v14);
  }
  if (a4 && v10 >= 0x1C)
  {
    if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(*(_QWORD *)(a2 + 1088), *((_QWORD *)a4 + 5)))
    {
      i = v6[4];
      v12 = v6[5];
      if (i)
        v18 = i - 24;
      else
        v18 = 0;
      v19 = *(_QWORD *)(v18 + 40);
      if (*(_BYTE *)(v18 + 16) == 83)
      {
        v13 = v19 + 40;
        for (i = *(_QWORD *)(v19 + 48); i != v13; i = *(_QWORD *)(i + 8))
        {
          v20 = i - 24;
          if (!i)
            v20 = 0;
          if (*(_BYTE *)(v20 + 16) != 83)
          {
            v24 = *(unsigned __int8 *)(i - 8) - 38;
            v25 = v24 > 0x38;
            v26 = (1 << v24) & 0x100060000000001;
            if (!v25 && v26 != 0)
              i = *(_QWORD *)(i + 8);
            goto LABEL_30;
          }
        }
      }
      else
      {
LABEL_30:
        v13 = v19 + 40;
        if (i != v19 + 40)
          v13 = llvm::skipDebugIntrinsics(i);
      }
      goto LABEL_7;
    }
    v23 = *(_QWORD *)(a3 + 40);
    a4 = llvm::UndefValue::get((llvm::UndefValue *)*v6, v16);
    a1 = v9;
    v21 = v23;
    v22 = a3 + 24;
  }
  else
  {
    v21 = *(_QWORD *)(a3 + 40);
    v22 = a3 + 24;
  }
  return sub_1C5C28F94(a1, v21, v22, (uint64_t *)a4, a5, 0);
}

unsigned __int8 *sub_1C5C288BC(uint64_t a1, unsigned int a2)
{
  unsigned __int8 ***v2;
  unsigned __int8 *v3;
  uint64_t v6;
  const llvm::APInt *v7;
  uint64_t v8;
  llvm::PointerType *v9;
  unsigned __int8 *v10;
  uint64_t ***v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ****v16;
  uint64_t ***v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::ConstantInt *v27;
  unsigned int v28;
  unint64_t v29;
  llvm::ValueHandleBase *v30;
  uint64_t ***v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t ****v36;
  uint64_t ***v37;
  int v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 **v48;
  unsigned __int8 *v49;
  int v50;
  int v51;
  uint64_t ***v52;
  char *v53;
  uint64_t **v54;
  uint64_t **v55;
  unsigned __int8 *v56;
  uint64_t ***v57;
  char *v58;
  uint64_t **v59;
  uint64_t **v60;
  unsigned __int8 *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v66;
  uint64_t **v67;
  const char *v68;
  __int16 v69;
  _QWORD *v70;
  uint64_t v71;
  const char *v72;
  __int16 v73;
  void *v74[2];
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32))
    v2 = *(unsigned __int8 ****)(a1 + 32);
  else
    v2 = (unsigned __int8 ***)(a1 + 40);
  v3 = (*v2)[a2];
  if (v3)
    return v3;
  v6 = a2;
  sub_1C4D8ADA0((uint64_t)v74, *(uint64_t ***)a1, *(_QWORD *)(a1 + 8), 0, 0, 0);
  v8 = *(_QWORD *)(a1 + 24);
  if (!v8)
  {
    v20 = *(_QWORD *)(a1 + 16);
    if (v20 && *(_BYTE *)(v20 + 16) == 90)
    {
      while (1)
      {
        v21 = *(_QWORD *)(v20 - 32);
        if (!v21 || *(_BYTE *)(v21 + 16) != 16)
          break;
        v23 = (_QWORD *)(v21 + 24);
        if (*(_DWORD *)(v21 + 32) >= 0x41u)
          v23 = (_QWORD *)*v23;
        v24 = (_QWORD *)*v23;
        v25 = *v23;
        v26 = *(_QWORD *)(v20 - 96);
        *(_QWORD *)(a1 + 16) = v26;
        if ((_DWORD)v24 == a2)
        {
          (*v2)[v25] = *(unsigned __int8 **)(v20 - 64);
          v6 = v25;
          goto LABEL_65;
        }
        if (!(*v2)[v25])
        {
          (*v2)[v25] = *(unsigned __int8 **)(v20 - 64);
          v26 = *(_QWORD *)(a1 + 16);
        }
        if (v26)
        {
          v20 = v26;
          if (*(_BYTE *)(v26 + 16) == 90)
            continue;
        }
        goto LABEL_31;
      }
    }
    v26 = v20;
LABEL_31:
    v27 = *(llvm::ConstantInt **)(*(_QWORD *)v76 + 1960);
    v28 = *(_DWORD *)(*(_QWORD *)v76 + 1968);
    LODWORD(v71) = v28 >> 8;
    if (v28 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v70, v6, 0);
    }
    else
    {
      if (v28 <= 0xFF)
        v29 = 0;
      else
        v29 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v28);
      v70 = (_QWORD *)(v29 & v6);
    }
    v30 = llvm::ConstantInt::get(v27, (llvm::LLVMContext *)&v70, v7);
    if (v71 >= 0x41 && v70)
      MEMORY[0x1CAA32F9C](v70, 0x1000C8000313F17);
    v31 = *(uint64_t ****)(a1 + 16);
    if ((*((_BYTE *)v31 + 23) & 0x10) == 0)
    {
      v59 = 0;
      v58 = &byte_1C871356D;
      goto LABEL_59;
    }
    v32 = ***v31;
    v33 = *(_QWORD *)(v32 + 152);
    v34 = *(unsigned int *)(v32 + 168);
    if ((_DWORD)v34)
    {
      LODWORD(v35) = (v34 - 1) & ((v31 >> 4) ^ (v31 >> 9));
      v36 = (uint64_t ****)(v33 + 16 * v35);
      v37 = *v36;
      if (*v36 == v31)
      {
LABEL_58:
        v57 = v36[1];
        v60 = *v57;
        v58 = (char *)(v57 + 2);
        v59 = v60;
LABEL_59:
        v69 = 773;
        v66 = v58;
        v67 = v59;
        v68 = ".i";
        v70 = &v66;
        v72 = (const char *)v6;
        v73 = 2050;
        v56 = sub_1C4772EE0((uint64_t *)v74, v26, (uint64_t)v30, (uint64_t)&v70);
        goto LABEL_60;
      }
      v38 = 1;
      while (v37 != (uint64_t ***)-4096)
      {
        v39 = v35 + v38++;
        v35 = v39 & (v34 - 1);
        v37 = *(uint64_t ****)(v33 + 16 * v35);
        if (v37 == v31)
        {
          v36 = (uint64_t ****)(v33 + 16 * v35);
          goto LABEL_58;
        }
      }
    }
    v36 = (uint64_t ****)(v33 + 16 * v34);
    goto LABEL_58;
  }
  v9 = *(llvm::PointerType **)(v8 + 24);
  if (**v2)
  {
    if (a2)
      goto LABEL_8;
    goto LABEL_64;
  }
  v40 = **(_QWORD **)(a1 + 16);
  v41 = *(_DWORD *)(v40 + 8);
  if ((v41 & 0xFE) == 0x12)
    v41 = *(_DWORD *)(**(_QWORD **)(v40 + 16) + 8);
  v42 = llvm::PointerType::get(v9, (llvm::Type *)(v41 >> 8));
  v43 = *(unsigned __int8 **)(a1 + 16);
  if ((v43[23] & 0x10) != 0)
  {
    v44 = ***(_QWORD ***)v43;
    v45 = *(_QWORD *)(v44 + 152);
    v46 = *(unsigned int *)(v44 + 168);
    if ((_DWORD)v46)
    {
      LODWORD(v47) = (v46 - 1) & ((v43 >> 4) ^ (v43 >> 9));
      v48 = (unsigned __int8 **)(v45 + 16 * v47);
      v49 = *v48;
      if (*v48 == v43)
      {
LABEL_62:
        v61 = v48[1];
        v64 = *(_QWORD *)v61;
        v62 = (char *)(v61 + 16);
        v63 = v64;
        goto LABEL_63;
      }
      v50 = 1;
      while (v49 != (unsigned __int8 *)-4096)
      {
        v51 = v47 + v50++;
        v47 = v51 & (v46 - 1);
        v49 = *(unsigned __int8 **)(v45 + 16 * v47);
        if (v49 == v43)
        {
          v48 = (unsigned __int8 **)(v45 + 16 * v47);
          goto LABEL_62;
        }
      }
    }
    v48 = (unsigned __int8 **)(v45 + 16 * v46);
    goto LABEL_62;
  }
  v63 = 0;
  v62 = &byte_1C871356D;
LABEL_63:
  v73 = 773;
  v70 = v62;
  v71 = v63;
  v72 = ".i0";
  **v2 = sub_1C4773E38((uint64_t *)v74, 49, v43, v42, (uint64_t)&v70);
  if (a2)
  {
LABEL_8:
    v10 = **v2;
    v11 = *(uint64_t ****)(a1 + 16);
    if ((*((_BYTE *)v11 + 23) & 0x10) == 0)
    {
      v54 = 0;
      v53 = &byte_1C871356D;
      goto LABEL_55;
    }
    v12 = ***v11;
    v13 = *(_QWORD *)(v12 + 152);
    v14 = *(unsigned int *)(v12 + 168);
    if ((_DWORD)v14)
    {
      LODWORD(v15) = (v14 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      v16 = (uint64_t ****)(v13 + 16 * v15);
      v17 = *v16;
      if (*v16 == v11)
      {
LABEL_54:
        v52 = v16[1];
        v55 = *v52;
        v53 = (char *)(v52 + 2);
        v54 = v55;
LABEL_55:
        v69 = 773;
        v66 = v53;
        v67 = v54;
        v68 = ".i";
        v70 = &v66;
        v72 = (const char *)v6;
        v73 = 2050;
        v56 = (unsigned __int8 *)sub_1C48678B0((uint64_t *)v74, v9, v10, a2, (uint64_t)&v70);
LABEL_60:
        (*v2)[v6] = v56;
        goto LABEL_65;
      }
      v18 = 1;
      while (v17 != (uint64_t ***)-4096)
      {
        v19 = v15 + v18++;
        v15 = v19 & (v14 - 1);
        v17 = *(uint64_t ****)(v13 + 16 * v15);
        if (v17 == v11)
        {
          v16 = (uint64_t ****)(v13 + 16 * v15);
          goto LABEL_54;
        }
      }
    }
    v16 = (uint64_t ****)(v13 + 16 * v14);
    goto LABEL_54;
  }
LABEL_64:
  v6 = 0;
LABEL_65:
  v3 = (*v2)[v6];
  if (v74[0] != &v75)
    free(v74[0]);
  return v3;
}

uint64_t sub_1C5C28D7C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t **v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Value *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  llvm::ValueHandleBase *v22;
  uint64_t result;
  uint64_t v24;
  unint64_t *v25;
  llvm::Value *v26;

  sub_1C5C290F4(a1, a2, (uint64_t)a3);
  v7 = (uint64_t **)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 8);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = v6;
        v9 = v6[4];
        if (v9 <= a2)
          break;
        v6 = (uint64_t *)*v8;
        v7 = (uint64_t **)v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (v9 >= a2)
        break;
      v6 = (uint64_t *)v8[1];
      if (!v6)
      {
        v7 = (uint64_t **)(v8 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
LABEL_9:
    v10 = v8;
    v8 = operator new(0x78uLL);
    v8[4] = a2;
    v8[5] = v8 + 7;
    v8[6] = 0x800000000;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = v10;
    *v7 = v8;
    v11 = **(_QWORD **)a1;
    v12 = v8;
    if (v11)
    {
      *(_QWORD *)a1 = v11;
      v12 = *v7;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 8), v12);
    ++*(_QWORD *)(a1 + 16);
  }
  v13 = v8 + 5;
  v14 = *((unsigned int *)v8 + 12);
  if ((_DWORD)v14)
  {
    v15 = 0;
    v16 = 8 * v14;
    do
    {
      v17 = *(llvm::Value **)(*v13 + v15);
      if (v17)
      {
        v18 = *a3;
        if (v17 != *(llvm::Value **)(*a3 + v15))
        {
          v26 = *(llvm::Value **)(*v13 + v15);
          v19 = *(unsigned __int8 **)(v18 + v15);
          if (v19[16] >= 0x1Cu)
          {
            llvm::Value::takeName((llvm::Value *)v19, v17);
            v17 = v26;
            v19 = *(unsigned __int8 **)(*a3 + v15);
          }
          llvm::Value::doRAUW(v17, (llvm::Value *)v19, (llvm::Value *)1);
          v20 = *(_DWORD *)(a1 + 304);
          if (v20 >= *(_DWORD *)(a1 + 308))
          {
            sub_1C578EDF4((unsigned int *)(a1 + 296), (uint64_t *)&v26);
          }
          else
          {
            v21 = (uint64_t)v26;
            v22 = (llvm::ValueHandleBase *)(*(_QWORD *)(a1 + 296) + 24 * v20);
            *(_QWORD *)v22 = 6;
            *((_QWORD *)v22 + 1) = 0;
            *((_QWORD *)v22 + 2) = v21;
            if (v21 != -8192 && v21 != -4096 && v21)
            {
              llvm::ValueHandleBase::AddToUseList(v22);
              v20 = *(_DWORD *)(a1 + 304);
            }
            *(_DWORD *)(a1 + 304) = v20 + 1;
          }
        }
      }
      v15 += 8;
    }
    while (v16 != v15);
  }
  result = sub_1C49EEBE4((uint64_t)v13, (uint64_t)a3);
  v24 = *(unsigned int *)(a1 + 32);
  if (v24 >= *(_DWORD *)(a1 + 36))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, a1 + 40, v24 + 1, 16);
    LODWORD(v24) = *(_DWORD *)(a1 + 32);
  }
  v25 = (unint64_t *)(*(_QWORD *)(a1 + 24) + 16 * v24);
  *v25 = a2;
  v25[1] = (unint64_t)v13;
  ++*(_DWORD *)(a1 + 32);
  return result;
}

uint64_t sub_1C5C28F94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, unsigned int *a6)
{
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  *(_QWORD *)(a1 + 40) = a1 + 56;
  *(_QWORD *)(a1 + 48) = 0x800000000;
  v7 = *a4;
  if (*(_BYTE *)(*a4 + 8) == 15)
    v7 = a5;
  v8 = *(unsigned int *)(v7 + 32);
  *(_DWORD *)(a1 + 120) = v8;
  if (a6)
  {
    if (!a6[2] && (_DWORD)v8)
      goto LABEL_10;
  }
  else if ((_DWORD)v8)
  {
    a6 = (unsigned int *)(a1 + 40);
LABEL_10:
    sub_1C510F7B8(a6, v8, 0);
  }
  return a1;
}

uint64_t **sub_1C5C2901C(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x78uLL);
    v7[4] = *a3;
    v7[5] = (uint64_t *)(v7 + 7);
    v7[6] = (uint64_t *)0x800000000;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    sub_1C4768E74(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_1C5C290F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 **v9;
  uint64_t v10;
  unsigned __int8 **v11;
  unsigned int v12;
  unsigned __int8 *v14;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 **v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[9];

  v26[8] = *MEMORY[0x1E0C80C00];
  v24 = v26;
  v25 = 0x400000000;
  llvm::Value::getAllMetadata((_BYTE *)a2, (uint64_t)&v24);
  v5 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v5)
  {
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v6);
      if (v7 && *(unsigned __int8 *)(v7 + 16) >= 0x1Cu)
        break;
LABEL_43:
      if (++v6 == v5)
        goto LABEL_47;
    }
    if (!(_DWORD)v25)
    {
LABEL_36:
      llvm::Instruction::copyIRFlags(v7, a2, 1);
      v17 = *(unsigned __int8 **)(a2 + 48);
      if (v17)
      {
        v19 = *(_QWORD *)(v7 + 48);
        v18 = (unsigned __int8 **)(v7 + 48);
        if (!v19)
        {
          v22 = *(unsigned __int8 **)(a2 + 48);
          llvm::MetadataTracking::track((uint64_t)&v22, v17, 2);
          if (&v22 == v18)
          {
            if (v22)
              llvm::MetadataTracking::untrack((uint64_t)&v22, v22);
          }
          else
          {
            if (*v18)
              llvm::MetadataTracking::untrack((uint64_t)v18, *v18);
            v20 = v22;
            *v18 = v22;
            if (v20)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v22, v20, (uint64_t)v18);
              v22 = 0;
            }
          }
        }
      }
      goto LABEL_43;
    }
    v9 = (unsigned __int8 **)(v7 + 48);
    v10 = 16 * v25;
    v11 = (unsigned __int8 **)((char *)v24 + 8);
    while (1)
    {
      v12 = *((_DWORD *)v11 - 2);
      if ((v12 > 8 || ((1 << v12) & 0x1EA) == 0) && v12 != 25 && *(_DWORD *)(a1 + 1080) != v12)
        goto LABEL_21;
      v14 = *v11;
      if (*v11)
      {
        if (!v12)
        {
          v23 = *v11;
          llvm::MetadataTracking::track((uint64_t)&v23, v14, 2);
LABEL_29:
          if (&v23 == v9)
          {
            if (v23)
              llvm::MetadataTracking::untrack((uint64_t)&v23, v23);
          }
          else
          {
            if (*v9)
              llvm::MetadataTracking::untrack(v7 + 48, *v9);
            v16 = v23;
            *v9 = v23;
            if (v16)
              llvm::MetadataTracking::retrack((uint64_t)&v23, v16, v7 + 48);
          }
          goto LABEL_21;
        }
      }
      else
      {
        if (!*v9 && (*(_BYTE *)(v7 + 23) & 0x20) == 0)
          goto LABEL_21;
        if (!v12)
        {
          v23 = 0;
          goto LABEL_29;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v7, v12, (llvm::MDNode *)v14);
LABEL_21:
      v11 += 2;
      v10 -= 16;
      if (!v10)
        goto LABEL_36;
    }
  }
LABEL_47:
  if (v24 != v26)
    free(v24);
}

BOOL sub_1C5C29354(uint64_t a1, unint64_t a2)
{
  uint64_t **v2;
  unint64_t v6;
  int v7;
  llvm::UndefValue **v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  _QWORD v27[4];
  __int16 v28;
  _QWORD v29[4];
  __int16 v30;
  void *v31[2];
  _BYTE v32[64];
  _BYTE v33[40];
  void *v34;
  uint64_t v35;
  _BYTE v36[40];
  void *v37;
  uint64_t v38;
  void *v39[2];
  _QWORD v40[17];

  v40[15] = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v2 = *(uint64_t ***)a2;
  else
    v2 = 0;
  if (!v2)
    return v2 != 0;
  v6 = *((unsigned int *)v2 + 8);
  sub_1C4773D54((uint64_t)v39, a2, 0, 0, 0);
  v7 = *(_DWORD *)(a2 + 20);
  if ((v7 & 0x40000000) != 0)
    v8 = *(llvm::UndefValue ***)(a2 - 8);
  else
    v8 = (llvm::UndefValue **)(a2 - 32 * (v7 & 0x7FFFFFF));
  sub_1C5C28730((uint64_t)v36, a1, a2, *v8, 0);
  v9 = *(_DWORD *)(a2 + 20);
  if ((v9 & 0x40000000) != 0)
    v10 = *(_QWORD *)(a2 - 8);
  else
    v10 = a2 - 32 * (v9 & 0x7FFFFFF);
  sub_1C5C28730((uint64_t)v33, a1, a2, *(llvm::UndefValue **)(v10 + 32), 0);
  v31[0] = v32;
  v31[1] = (void *)0x800000000;
  sub_1C6154790((uint64_t)v31, v6);
  if ((_DWORD)v6)
  {
    v11 = 0;
    while (1)
    {
      v12 = sub_1C5C288BC((uint64_t)v36, v11);
      v13 = sub_1C5C288BC((uint64_t)v33, v11);
      if ((*(_BYTE *)(a2 + 23) & 0x10) == 0)
      {
        v23 = 0;
        v24 = &byte_1C871356D;
        goto LABEL_23;
      }
      v14 = ***(_QWORD ***)a2;
      v15 = *(_QWORD *)(v14 + 152);
      v16 = *(unsigned int *)(v14 + 168);
      if (!(_DWORD)v16)
        goto LABEL_21;
      LODWORD(v17) = (v16 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v18 = (uint64_t *)(v15 + 16 * v17);
      v19 = *v18;
      if (*v18 != a2)
        break;
LABEL_22:
      v22 = (_QWORD *)v18[1];
      v25 = *v22;
      v24 = (char *)(v22 + 2);
      v23 = v25;
LABEL_23:
      v28 = 773;
      v27[0] = v24;
      v27[1] = v23;
      v27[2] = ".i";
      v29[0] = v27;
      v29[2] = v11;
      v30 = 2050;
      v26 = sub_1C4773860((uint64_t)v39, *(unsigned __int8 *)(a2 + 16) - 28, v12, (uint64_t)v13, (uint64_t)v29, 0);
      *((_QWORD *)v31[0] + v11++) = v26;
      if (v11 == v6)
        goto LABEL_26;
    }
    v20 = 1;
    while (v19 != -4096)
    {
      v21 = v17 + v20++;
      v17 = v21 & (v16 - 1);
      v19 = *(_QWORD *)(v15 + 16 * v17);
      if (v19 == a2)
      {
        v18 = (uint64_t *)(v15 + 16 * v17);
        goto LABEL_22;
      }
    }
LABEL_21:
    v18 = (uint64_t *)(v15 + 16 * v16);
    goto LABEL_22;
  }
LABEL_26:
  sub_1C5C28D7C(a1, a2, (uint64_t *)v31);
  if (v31[0] != v32)
    free(v31[0]);
  if (v34 != &v35)
    free(v34);
  if (v37 != &v38)
    free(v37);
  if (v39[0] != v40)
    free(v39[0]);
  return v2 != 0;
}

void sub_1C5C2960C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  char v16;
  const char *v17;
  uint64_t v18;
  unint64_t v19;

  if (a2
    && (*(_DWORD *)(a2 + 8) & 0xFE) == 0x12
    && ((v8 = *(_QWORD *)(a2 + 24),
         sub_1C4768AD0(a4, v8),
         v10 = v9,
         v12 = v11,
         sub_1C4768AD0(a4, v8),
         v10 == ((v14 + 7) & 0xFFFFFFFFFFFFFFF8))
      ? (v15 = v12 == (v13 == 1))
      : (v15 = 0),
        v15))
  {
    sub_1C4768AD0(a4, v8);
    v19 = (unint64_t)(v18 + 7) >> 3;
    if ((_DWORD)v17 == 1)
    *(_QWORD *)a1 = a2;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = a3;
    v16 = 1;
    *(_QWORD *)(a1 + 24) = v19;
  }
  else
  {
    v16 = 0;
    *(_BYTE *)a1 = 0;
  }
  *(_BYTE *)(a1 + 32) = v16;
}

void sub_1C5C296EC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  void **v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  char *v16;
  char *v17;
  unint64_t v18;
  BOOL v19;
  char *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  char *v27;
  unint64_t v28;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 == a2)
    return;
  if (v2 > a2)
  {
    v5 = (void **)(*(_QWORD *)a1 + (v2 << 7) - 88);
    v6 = (a2 << 7) - (v2 << 7);
    do
    {
      if (v5 + 2 != *v5)
        free(*v5);
      v5 -= 16;
      v6 += 128;
    }
    while (v6);
    goto LABEL_39;
  }
  if (*(unsigned int *)(a1 + 12) >= a2)
  {
    v7 = *(char **)a1;
    goto LABEL_36;
  }
  v28 = 0;
  v7 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 128, &v28);
  v8 = *(char **)a1;
  v9 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v9)
    goto LABEL_33;
  v10 = 0;
  v11 = v9 << 7;
  do
  {
    v12 = &v7[v10];
    v13 = &v8[v10];
    v14 = *(_OWORD *)&v8[v10];
    v15 = *(_OWORD *)&v8[v10 + 16];
    *((_QWORD *)v12 + 4) = *(_QWORD *)&v8[v10 + 32];
    *(_OWORD *)v12 = v14;
    *((_OWORD *)v12 + 1) = v15;
    v16 = &v7[v10 + 56];
    *(_QWORD *)&v7[v10 + 40] = v16;
    v17 = &v7[v10 + 40];
    *((_QWORD *)v12 + 6) = 0x800000000;
    v18 = *(unsigned int *)&v8[v10 + 48];
    if ((_DWORD)v18)
      v19 = v13 == v12;
    else
      v19 = 1;
    if (!v19)
    {
      v20 = (char *)*((_QWORD *)v13 + 5);
      if (v13 + 56 != v20)
      {
        *(_QWORD *)v17 = v20;
        v22 = *(_DWORD *)&v8[v10 + 52];
        *((_DWORD *)v12 + 12) = v18;
        *((_DWORD *)v12 + 13) = v22;
        *((_QWORD *)v13 + 5) = v13 + 56;
        *(_DWORD *)&v8[v10 + 52] = 0;
        goto LABEL_20;
      }
      if (v18 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v17, (uint64_t)&v7[v10 + 56], v18, 8);
        v21 = *((unsigned int *)v13 + 12);
        if (!(_DWORD)v21)
          goto LABEL_19;
        v20 = (char *)*((_QWORD *)v13 + 5);
        v16 = *(char **)&v7[v10 + 40];
      }
      else
      {
        v21 = *(unsigned int *)&v8[v10 + 48];
      }
      memcpy(v16, v20, 8 * v21);
LABEL_19:
      *((_DWORD *)v12 + 12) = v18;
LABEL_20:
      *((_DWORD *)v13 + 12) = 0;
    }
    *((_DWORD *)v12 + 30) = *((_DWORD *)v13 + 30);
    v10 += 128;
  }
  while (v11 != v10);
  v8 = *(char **)a1;
  v23 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v23)
  {
    v24 = v23 << 7;
    do
    {
      v25 = *(char **)&v8[v24 - 88];
      if (&v8[v24 - 72] != v25)
        free(v25);
      v24 -= 128;
    }
    while (v24);
    v8 = *(char **)a1;
  }
LABEL_33:
  v26 = v28;
  if (v8 != (char *)(a1 + 16))
    free(v8);
  *(_QWORD *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v26;
  v2 = *(unsigned int *)(a1 + 8);
LABEL_36:
  if (v2 != a2)
  {
    v27 = &v7[128 * v2];
    do
    {
      *((_OWORD *)v27 + 2) = 0uLL;
      *((_OWORD *)v27 + 3) = 0uLL;
      *((_OWORD *)v27 + 6) = 0uLL;
      *((_OWORD *)v27 + 7) = 0uLL;
      *((_OWORD *)v27 + 4) = 0uLL;
      *((_OWORD *)v27 + 5) = 0uLL;
      *(_OWORD *)v27 = 0uLL;
      *((_OWORD *)v27 + 1) = 0uLL;
      *((_QWORD *)v27 + 5) = v27 + 56;
      *((_DWORD *)v27 + 13) = 8;
      v27 += 128;
    }
    while (v27 != &v7[128 * a2]);
  }
LABEL_39:
  *(_DWORD *)(a1 + 8) = a2;
}

BOOL sub_1C5C29934(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t **v2;
  unint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  _QWORD v24[4];
  __int16 v25;
  _QWORD v26[4];
  __int16 v27;
  void *v28[2];
  _BYTE v29[64];
  _BYTE v30[40];
  void *v31;
  uint64_t v32;
  void *v33[2];
  _QWORD v34[17];

  v34[15] = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v2 = *(uint64_t ***)a2;
  else
    v2 = 0;
  if (!v2)
    return v2 != 0;
  v6 = *((unsigned int *)v2 + 8);
  sub_1C4773D54((uint64_t)v33, (uint64_t)a2, 0, 0, 0);
  sub_1C5C28730((uint64_t)v30, a1, (uint64_t)a2, *((llvm::UndefValue **)a2 - 4), 0);
  v28[0] = v29;
  v28[1] = (void *)0x800000000;
  sub_1C6154790((uint64_t)v28, v6);
  if ((_DWORD)v6)
  {
    v7 = 0;
    while (1)
    {
      v8 = a2[16];
      v9 = sub_1C5C288BC((uint64_t)v30, v7);
      if ((a2[23] & 0x10) == 0)
      {
        v19 = 0;
        v20 = &byte_1C871356D;
        goto LABEL_17;
      }
      v10 = ***(_QWORD ***)a2;
      v11 = *(_QWORD *)(v10 + 152);
      v12 = *(unsigned int *)(v10 + 168);
      if (!(_DWORD)v12)
        goto LABEL_15;
      LODWORD(v13) = (v12 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v14 = (unsigned __int8 **)(v11 + 16 * v13);
      v15 = *v14;
      if (*v14 != a2)
        break;
LABEL_16:
      v18 = v14[1];
      v21 = *(_QWORD *)v18;
      v20 = (char *)(v18 + 16);
      v19 = v21;
LABEL_17:
      v22 = (uint64_t)v2[3];
      v25 = 773;
      v24[0] = v20;
      v24[1] = v19;
      v24[2] = ".i";
      v26[0] = v24;
      v26[2] = v7;
      v27 = 2050;
      v23 = sub_1C4773E38((uint64_t *)v33, (v8 - 28), v9, v22, (uint64_t)v26);
      *((_QWORD *)v28[0] + v7++) = v23;
      if (v7 == v6)
        goto LABEL_20;
    }
    v16 = 1;
    while (v15 != (unsigned __int8 *)-4096)
    {
      v17 = v13 + v16++;
      v13 = v17 & (v12 - 1);
      v15 = *(unsigned __int8 **)(v11 + 16 * v13);
      if (v15 == a2)
      {
        v14 = (unsigned __int8 **)(v11 + 16 * v13);
        goto LABEL_16;
      }
    }
LABEL_15:
    v14 = (unsigned __int8 **)(v11 + 16 * v12);
    goto LABEL_16;
  }
LABEL_20:
  sub_1C5C28D7C(a1, (unint64_t)a2, (uint64_t *)v28);
  if (v28[0] != v29)
    free(v28[0]);
  if (v31 != &v32)
    free(v31);
  if (v33[0] != v34)
    free(v33[0]);
  return v2 != 0;
}

uint64_t sub_1C5C29B78(uint64_t a1, uint64_t ***a2)
{
  uint64_t **v2;
  BOOL v3;
  uint64_t v5;
  llvm *v6;
  uint64_t result;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void **v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  unint64_t v20;
  char *v21;
  unsigned int v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t ***v30;
  llvm::UndefValue *v31;
  char *v32;
  void **v33;
  __int128 v34;
  __int128 v35;
  void **v36;
  char *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  void **v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  int v45;
  void **v46;
  void **v47;
  void **v48;
  uint64_t Declaration;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint64_t **v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t ****v60;
  uint64_t ***v61;
  int v62;
  int v63;
  uint64_t ***v64;
  uint64_t **v65;
  char *v66;
  uint64_t **v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  char *v71;
  uint64_t ***v72;
  uint64_t v73;
  void **v74;
  void **v75;
  void **v76;
  char *v77;
  int v78;
  void **v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD v83[4];
  __int16 v84;
  _QWORD v85[4];
  __int16 v86;
  void *v87[2];
  __int128 v88;
  void *v89[2];
  _OWORD v90[4];
  __int128 v91;
  void *v92;
  uint64_t v93;
  _BYTE v94[64];
  void *v95[2];
  _BYTE v96[64];
  void *v97;
  unsigned int v98;
  unsigned int v99;
  _QWORD v100[3];
  void *v101;
  unint64_t v102;
  _BYTE v103[56];
  uint64_t v104;
  void *v105[2];
  _QWORD v106[10];

  v106[8] = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  if (*a2)
    v3 = ((_DWORD)(*a2)[1] & 0xFE) == 18;
  else
    v3 = 0;
  if (!v3)
    return 0;
  v5 = (uint64_t)*(a2 - 4);
  if (!v5)
    return 0;
  if (*(_BYTE *)(v5 + 16))
    return 0;
  if (*(uint64_t ***)(v5 + 24) != a2[9])
    return 0;
  v6 = (llvm *)*(unsigned int *)(v5 + 36);
  if (!(_DWORD)v6)
    return 0;
  result = llvm::isTriviallyVectorizable((llvm *)*(unsigned int *)(v5 + 36));
  if ((_DWORD)result)
  {
    v9 = *((unsigned __int8 *)a2 + 16);
    if (v9 == 84)
    {
      v10 = 0;
    }
    else if (v9 == 39)
    {
      v10 = (*((_DWORD *)a2 + 20) + 1);
    }
    else
    {
      v10 = 2;
    }
    v11 = *((_DWORD *)a2 + 5);
    if (v11 < 0 && (v72 = &a2[-4 * (v11 & 0x7FFFFFF)], v73 = (uint64_t)*(v72 - 1), (v73 & 0xFFFFFFFF0) != 0))
    {
      v13 = -(uint64_t)(v11 & 0x7FFFFFF);
      v12 = (*((_DWORD *)v72 - 3) - *(_DWORD *)((char *)v72 - v73));
    }
    else
    {
      v12 = 0;
      v13 = -(uint64_t)(v11 & 0x7FFFFFF);
    }
    v80 = *((unsigned int *)v2 + 8);
    v81 = (unint64_t)(-32 * v10 - 32 * v12 - 32 * v13 - 32) >> 5;
    v105[0] = v106;
    v105[1] = (void *)0x800000000;
    sub_1C4848C0C((unsigned int *)v105, v81, 0);
    v89[0] = 0;
    memset(v90, 0, sizeof(v90));
    v91 = 0u;
    *(_OWORD *)v87 = 0u;
    v88 = 0u;
    v89[1] = (char *)v90 + 8;
    DWORD1(v90[0]) = 8;
    v101 = v103;
    v82 = (unint64_t)v81 << 7;
    v102 = 0x800000000;
    if (v81 < 9uLL)
    {
      if ((_DWORD)v81)
      {
        v23 = 0;
        v24 = &v104;
        v25 = -(uint64_t)v81;
        do
        {
          v26 = v88;
          *(_OWORD *)(v24 - 7) = *(_OWORD *)v87;
          *(_OWORD *)(v24 - 5) = v26;
          *(v24 - 3) = (uint64_t)v89[0];
          *(v24 - 2) = (uint64_t)v24;
          *(v24 - 1) = 0x800000000;
          if (LODWORD(v90[0]))
          {
            sub_1C49EEBE4((uint64_t)(v24 - 2), (uint64_t)&v89[1]);
            v23 = DWORD2(v91);
          }
          *((_DWORD *)v24 + 16) = v23;
          v24 += 16;
        }
        while (!__CFADD__(v25++, 1));
      }
      LODWORD(v102) = v81;
    }
    else
    {
      v95[0] = 0;
      v14 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v101, v81, 128, (unint64_t *)v95);
      v15 = 0;
      do
      {
        v16 = (void **)&v14[v15];
        v17 = *(_OWORD *)v87;
        v18 = v88;
        v16[4] = v89[0];
        *(_OWORD *)v16 = v17;
        *((_OWORD *)v16 + 1) = v18;
        *(_QWORD *)&v14[v15 + 40] = &v14[v15 + 56];
        v16[6] = (void *)0x800000000;
        if (LODWORD(v90[0]))
          sub_1C49EEBE4((uint64_t)&v14[v15 + 40], (uint64_t)&v89[1]);
        *((_DWORD *)v16 + 30) = DWORD2(v91);
        v15 += 128;
      }
      while (v82 != v15);
      v19 = (char *)v101;
      if ((_DWORD)v102)
      {
        v20 = (unint64_t)v102 << 7;
        do
        {
          v21 = *(char **)&v19[v20 - 88];
          if (&v19[v20 - 72] != v21)
            free(v21);
          v20 -= 128;
        }
        while (v20);
        v19 = (char *)v101;
      }
      v22 = v95[0];
      if (v19 != v103)
        free(v19);
      v101 = v14;
      v102 = __PAIR64__(v22, v81);
    }
    if (v89[1] != (char *)v90 + 8)
      free(v89[1]);
    sub_1C5C296EC((uint64_t)&v101, v81);
    v97 = v100;
    v99 = 3;
    if (((_DWORD)v2[1] & 0xFE) == 0x12)
      v2 = (uint64_t **)*v2[2];
    v100[0] = v2;
    v98 = 1;
    if ((_DWORD)v81)
    {
      v28 = 0;
      v29 = 0;
      v30 = a2;
      while (1)
      {
        v31 = (llvm::UndefValue *)v30[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
        if ((*(_DWORD *)(*(_QWORD *)v31 + 8) & 0xFE) != 0x12)
        {
          *(_QWORD *)((char *)v105[0] + v28) = v31;
          if ((_DWORD)v6 == 239 && v29 == 128)
          {
            v42 = *(_QWORD *)v31;
            v43 = v98;
            if (v98 >= (unint64_t)v99)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, (uint64_t)v100, v98 + 1, 8);
              v43 = v98;
            }
            *((_QWORD *)v97 + v43) = v42;
            ++v98;
          }
          goto LABEL_62;
        }
        sub_1C5C28730((uint64_t)v87, a1, (uint64_t)a2, v31, 0);
        v32 = (char *)v101;
        v33 = (void **)((char *)v101 + v29);
        v34 = *(_OWORD *)v87;
        v35 = v88;
        v33[4] = v89[0];
        *(_OWORD *)v33 = v34;
        *((_OWORD *)v33 + 1) = v35;
        v36 = v33 + 5;
        v37 = (char *)v89[1];
        if (v33 + 5 != &v89[1])
          break;
LABEL_55:
        *((_DWORD *)v33 + 30) = DWORD2(v91);
        if (v37 != (char *)v90 + 8)
          free(v37);
LABEL_62:
        v29 += 128;
        v28 += 8;
        v30 += 4;
        if (v82 == v29)
          goto LABEL_72;
      }
      if (v89[1] != (char *)v90 + 8)
      {
        v44 = &v32[v29];
        if (&v32[v29 + 56] != *v36)
        {
          v76 = v33;
          v79 = v33 + 5;
          free(*v36);
          v36 = v79;
          v33 = v76;
          v37 = (char *)v89[1];
        }
        *v36 = v37;
        *((_QWORD *)v44 + 6) = *(_QWORD *)&v90[0];
        v89[1] = (char *)v90 + 8;
        DWORD1(v90[0]) = 0;
        goto LABEL_54;
      }
      v38 = LODWORD(v90[0]);
      v39 = &v32[v29];
      v40 = *(unsigned int *)&v32[v29 + 48];
      if (v40 >= LODWORD(v90[0]))
      {
        v74 = v33;
        v45 = v90[0];
        if (LODWORD(v90[0]))
          memmove(*v36, (char *)v90 + 8, 8 * LODWORD(v90[0]));
        *((_DWORD *)v39 + 12) = v45;
        v33 = v74;
        goto LABEL_54;
      }
      v77 = &v32[v29];
      v78 = v90[0];
      if (*((_DWORD *)v39 + 13) < LODWORD(v90[0]))
      {
        *((_DWORD *)v39 + 12) = 0;
        v46 = v33;
        v47 = v33 + 5;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v33 + 5), (uint64_t)&v32[v29 + 56], v38, 8);
        v36 = v47;
        v33 = v46;
      }
      else if ((_DWORD)v40)
      {
        v75 = v33;
        v48 = v33 + 5;
        memmove(*v36, (char *)v90 + 8, 8 * v40);
        v36 = v48;
        v33 = v75;
        goto LABEL_51;
      }
      v40 = 0;
LABEL_51:
      v41 = v33;
      if (v40 != LODWORD(v90[0]))
        memcpy((char *)*v36 + 8 * v40, (char *)v89[1] + 8 * v40, 8 * LODWORD(v90[0]) - 8 * v40);
      *((_DWORD *)v77 + 12) = v78;
      v33 = v41;
LABEL_54:
      LODWORD(v90[0]) = 0;
      v37 = (char *)v89[1];
      goto LABEL_55;
    }
LABEL_72:
    v95[0] = v96;
    v95[1] = (void *)0x800000000;
    sub_1C4848C0C((unsigned int *)v95, v80, 0);
    v92 = v94;
    v93 = 0x800000000;
    sub_1C4848C0C((unsigned int *)&v92, v81, 0);
    Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(v5 + 40), (int)v6, (uint64_t *)v97, v98);
    sub_1C4773D54((uint64_t)v87, (uint64_t)a2, 0, 0, 0);
    if ((_DWORD)v80)
    {
      v50 = 0;
      while (1)
      {
        LODWORD(v93) = 0;
        if ((_DWORD)v81)
        {
          v51 = 0;
          v52 = 0;
          v53 = 0;
          do
          {
            if (llvm::hasVectorInstrinsicScalarOpd(v6, v53))
            {
              v54 = (unsigned __int8 *)*((_QWORD *)v105[0] + v53);
            }
            else
            {
              v54 = sub_1C5C288BC((uint64_t)v101 + v51, v50);
              v52 = v93;
            }
            if (v52 >= HIDWORD(v93))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, (uint64_t)v94, v52 + 1, 8);
              v52 = v93;
            }
            *((_QWORD *)v92 + v52) = v54;
            v52 = v93 + 1;
            LODWORD(v93) = v93 + 1;
            ++v53;
            v51 += 128;
          }
          while (v81 != v53);
        }
        else
        {
          v52 = 0;
        }
        if (Declaration)
          v55 = *(uint64_t ***)(Declaration + 24);
        else
          v55 = 0;
        if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
        {
          v65 = 0;
          v66 = &byte_1C871356D;
          goto LABEL_96;
        }
        v56 = ***a2;
        v57 = *(_QWORD *)(v56 + 152);
        v58 = *(unsigned int *)(v56 + 168);
        if (!(_DWORD)v58)
          goto LABEL_94;
        LODWORD(v59) = (v58 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        v60 = (uint64_t ****)(v57 + 16 * v59);
        v61 = *v60;
        if (*v60 != a2)
          break;
LABEL_95:
        v64 = v60[1];
        v67 = *v64;
        v66 = (char *)(v64 + 2);
        v65 = v67;
LABEL_96:
        v84 = 773;
        v83[0] = v66;
        v83[1] = v65;
        v83[2] = ".i";
        v85[0] = v83;
        v85[2] = v50;
        v86 = 2050;
        v68 = sub_1C4774778((uint64_t *)v87, v55, Declaration, (uint64_t *)v92, v52, (uint64_t)v85, 0);
        *((_QWORD *)v95[0] + v50++) = v68;
        if (v50 == v80)
          goto LABEL_99;
      }
      v62 = 1;
      while (v61 != (uint64_t ***)-4096)
      {
        v63 = v59 + v62++;
        v59 = v63 & (v58 - 1);
        v61 = *(uint64_t ****)(v57 + 16 * v59);
        if (v61 == a2)
        {
          v60 = (uint64_t ****)(v57 + 16 * v59);
          goto LABEL_95;
        }
      }
LABEL_94:
      v60 = (uint64_t ****)(v57 + 16 * v58);
      goto LABEL_95;
    }
LABEL_99:
    sub_1C5C28D7C(a1, (unint64_t)a2, (uint64_t *)v95);
    if (v87[0] != &v88)
      free(v87[0]);
    if (v92 != v94)
      free(v92);
    if (v95[0] != v96)
      free(v95[0]);
    if (v97 != v100)
      free(v97);
    v69 = (char *)v101;
    if ((_DWORD)v102)
    {
      v70 = (unint64_t)v102 << 7;
      do
      {
        v71 = *(char **)&v69[v70 - 88];
        if (&v69[v70 - 72] != v71)
          free(v71);
        v70 -= 128;
      }
      while (v70);
      v69 = (char *)v101;
    }
    if (v69 != v103)
      free(v69);
    if (v105[0] != v106)
      free(v105[0]);
    return 1;
  }
  return result;
}

uint64_t sub_1C5C2A42C()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  v3 = 1;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Allow the scalarizer pass to scalarize insertelement/extractelement with variable index";
  v1.n128_u64[1] = 87;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED822C88, "scalarize-variable-insert-extract", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED822C88, &dword_1C475E000);
  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Allow the scalarizer pass to scalarize loads and store";
  v1.n128_u64[1] = 54;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED822D48, "scalarize-load-store", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED822D48, &dword_1C475E000);
}

uint64_t sub_1C5C2A510(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetTransformInfoWrapperPassPass(a1);
  llvm::initializeDominatorTreeWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Scalarize unsupported masked memory intrinsics";
  *(_QWORD *)(v2 + 8) = 46;
  *(_QWORD *)(v2 + 16) = "scalarize-masked-mem-intrin";
  *(_QWORD *)(v2 + 24) = 27;
  *(_QWORD *)(v2 + 32) = &unk_1ED822E08;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5C2A8AC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5C2A5AC(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED822E08;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8197728;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED822E10);
  if (v3 != -1)
  {
    v7[0] = sub_1C5C2A510;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED822E10, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *llvm::ScalarizeMaskedMemIntrinPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  uint64_t CachedResultImpl;
  uint64_t v8;
  char v9;

  v6 = (_QWORD *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetIRAnalysis::Key, a1) + 8);
  CachedResultImpl = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(a2, (uint64_t)&llvm::DominatorTreeAnalysis::Key, a1);
  if (CachedResultImpl)
    v8 = CachedResultImpl + 8;
  else
    v8 = 0;
  v9 = sub_1C5C2A748(a1, v6, v8);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if ((v9 & 1) == 0)
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  sub_1C4DDB144(a3, (uint64_t)&llvm::TargetIRAnalysis::Key);
  return sub_1C4DDB144(a3, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
}

uint64_t sub_1C5C2A748(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v13;
  void **v14;
  void *v15[2];
  _QWORD v16[38];
  void *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v13 = a3;
  LOBYTE(v15[0]) = 0;
  v19 = 0;
  if (a3)
  {
    LOBYTE(v14) = 1;
    sub_1C61DDBE0((uint64_t)v15, &v13, (char *)&v14);
  }
  LODWORD(v5) = 0;
  v6 = *(_QWORD *)(a1 + 40) + 272;
  do
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
    {
      if (v8 == a1 + 72)
        break;
      v9 = *(_QWORD *)(v8 + 8);
      v10 = v8 ? v8 - 24 : 0;
      LOBYTE(v14) = 0;
      v11 = v19 ? v15 : 0;
      v7 |= sub_1C5C2AAB0(v10, &v14, a2, v6, (uint64_t)v11);
      v8 = v9;
    }
    while (!(_BYTE)v14);
    v5 = (v7 | v5) & 1;
  }
  while ((v7 & 1) != 0);
  if (v19)
  {
    llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)v15);
    v14 = (void **)&v18;
    sub_1C50B10F0(&v14);
    if (v17 != (void *)v16[37])
      free(v17);
    if (v15[0] != v16)
      free(v15[0]);
  }
  return v5;
}

uint64_t sub_1C5C2A8AC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5C2A5AC(v0);
}

void sub_1C5C2A8D8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5C2A8FC()
{
  return "Scalarize Masked Memory Intrinsics";
}

void *sub_1C5C2A90C(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1C5C2A948(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char **v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AnalysisPass;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17[2];
  int v18;
  _QWORD v19[2];
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;

  v6 = **(char ****)(a1 + 8);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != llvm::TargetTransformInfoWrapperPass::ID);
  v8 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  v19[0] = 0;
  v19[1] = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v9 = *(_QWORD *)(v8 + 56);
  if (!v9)
  {
    sub_1C485C2F0();
LABEL_15:
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    goto LABEL_7;
  }
  v3 = v19;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v9 + 48))(&v16, v9, a2);
  v2 = (uint64_t *)(v8 + 64);
  v10 = v16;
  if (!*(_BYTE *)(v8 + 72))
  {
    *(_QWORD *)(v8 + 64) = v16;
    *(_BYTE *)(v8 + 72) = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v11 = *v2;
  *v2 = v10;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v16;
    v16 = 0;
    if (v12)
      goto LABEL_15;
  }
LABEL_7:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v3);
  sub_1C4D8B52C(v17);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), llvm::DominatorTreeWrapperPass::ID, 1);
  if (AnalysisPass)
    AnalysisPass = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, llvm::DominatorTreeWrapperPass::ID);
  if (AnalysisPass)
    v14 = AnalysisPass + 32;
  else
    v14 = 0;
  return sub_1C5C2A748(a2, v2, v14);
}

uint64_t sub_1C5C2AAB0(uint64_t a1, _BYTE *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  _QWORD *v10;
  char *v11;
  uint64_t *v12;
  llvm::Instruction **v13;
  unint64_t *v14;
  void *v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD **v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  llvm::Constant **v30;
  uint64_t v31;
  llvm::ConstantInt *v32;
  llvm::Instruction *v33;
  _QWORD *v34;
  unsigned __int8 *v35;
  llvm::Instruction *v36;
  unsigned __int8 *v37;
  uint64_t **v38;
  uint64_t *v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  void *v48;
  llvm::Type **v49;
  llvm::Type *v50;
  uint64_t v51;
  llvm::ConstantInt *v52;
  _QWORD *v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  _QWORD *v56;
  unint64_t *v57;
  uint64_t **v58;
  uint64_t **v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  void *v65;
  llvm::Constant **v66;
  llvm::Constant *v67;
  unsigned __int8 *v68;
  llvm::ConstantInt *v69;
  llvm::Type *v70;
  _QWORD *v71;
  unint64_t *v72;
  llvm::Constant *v73;
  int v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  _QWORD *v77;
  unint64_t *v78;
  char *v79;
  llvm::Instruction **v80;
  uint64_t *v81;
  _QWORD *v82;
  void **v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unsigned __int8 **v87;
  unsigned __int8 *v88;
  unint64_t *v89;
  void **v90;
  uint64_t *v91;
  void *v92;
  unsigned __int8 *v93;
  unint64_t v94;
  __int16 v95;
  __int16 v96;
  llvm::ConstantInt *v97;
  llvm::Instruction *v98;
  _QWORD *v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  uint64_t **v102;
  uint64_t *v103;
  unint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  void *v109;
  llvm::Type **v110;
  llvm::Value *v111;
  uint64_t **v112;
  llvm::ConstantInt *v113;
  llvm::Constant *v114;
  _QWORD *v115;
  unsigned __int8 *v116;
  unsigned __int8 *v117;
  llvm::Instruction **v118;
  llvm::Instruction *v119;
  unint64_t *v120;
  llvm::Instruction **v121;
  void **v122;
  uint64_t *v123;
  void *v124;
  llvm::Instruction *v125;
  unsigned __int8 *v126;
  unint64_t v127;
  __int16 v128;
  __int16 v129;
  uint64_t v130;
  llvm::ConstantInt *v131;
  _QWORD *v132;
  unsigned __int8 *v133;
  unsigned __int8 *v134;
  unint64_t *v135;
  llvm::Instruction *v136;
  int v137;
  uint64_t v138;
  const llvm::APInt *v139;
  uint64_t v140;
  llvm::UndefValue *v141;
  const llvm::APInt *v142;
  llvm::ConstantInt *v143;
  unsigned int v144;
  unint64_t v145;
  llvm::ValueHandleBase *v146;
  const llvm::APInt *v147;
  uint64_t *v148;
  llvm::ConstantInt *v149;
  unsigned int v150;
  unint64_t v151;
  llvm::ValueHandleBase *v152;
  unsigned __int8 *v153;
  char v154;
  char v155;
  char *v156;
  char *v157;
  unsigned __int8 **v158;
  llvm::Value *v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  unsigned __int8 ***v164;
  uint64_t v165;
  char *v166;
  char *v167;
  unsigned __int8 **v168;
  int v169;
  unsigned __int8 *v170;
  unsigned __int8 *v171;
  unsigned __int8 *v172;
  uint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  uint64_t v176;
  const llvm::APInt *v177;
  uint64_t v178;
  llvm::UndefValue *v179;
  const llvm::APInt *v180;
  llvm::ConstantInt *v181;
  unsigned int v182;
  unint64_t v183;
  uint64_t v184;
  llvm::ValueHandleBase *v185;
  unsigned __int8 *v186;
  char v187;
  char v188;
  char *v189;
  char *v190;
  llvm::Value *v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  const llvm::APInt *v195;
  unint64_t v196;
  llvm::ConstantInt *v197;
  unsigned int v198;
  unint64_t v199;
  llvm::ValueHandleBase *v200;
  char *v201;
  char *v202;
  unsigned __int8 **v203;
  int v204;
  unsigned __int8 *v205;
  unsigned __int8 *v206;
  _QWORD *v207;
  _QWORD *v208;
  llvm::ConstantInt *v209;
  _QWORD *v210;
  llvm::ConstantInt *v211;
  _QWORD *v212;
  char *v213;
  char *v214;
  llvm::Value *v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  _QWORD *v219;
  _QWORD *v220;
  const char *v221;
  unint64_t PrimitiveSizeInBits;
  unsigned int v223;
  char v224;
  uint64_t v225;
  uint64_t v226;
  const llvm::APInt *v227;
  uint64_t v228;
  unsigned __int8 *v229;
  llvm::UndefValue *v230;
  uint64_t v231;
  uint64_t ***v232;
  char *v233;
  char *v234;
  llvm::Value *v235;
  uint64_t **v236;
  _QWORD *v237;
  uint64_t **v238;
  const llvm::APInt *v239;
  llvm::ConstantInt *v240;
  unsigned int v241;
  unint64_t v242;
  llvm::ValueHandleBase *v243;
  llvm::Type *v244;
  llvm::Type *v245;
  llvm::Type *v246;
  int v247;
  unsigned __int8 *v248;
  llvm::Type *v249;
  unsigned __int8 *v250;
  int v251;
  const llvm::APInt *v252;
  uint64_t v253;
  unsigned int v254;
  llvm::UndefValue *AggregateElement;
  const llvm::APInt *v256;
  llvm::ConstantInt *v257;
  unsigned int v258;
  unint64_t v259;
  llvm::ValueHandleBase *v260;
  unsigned __int8 *v261;
  uint64_t ***v262;
  char *v263;
  char *v264;
  uint64_t ****v265;
  llvm::Value *v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  uint64_t **v270;
  uint64_t *****v271;
  uint64_t **v272;
  char *v273;
  char *v274;
  unsigned __int8 **v275;
  int v276;
  unsigned __int8 *v277;
  unsigned __int8 *v278;
  unsigned __int8 *v279;
  uint64_t v280;
  _BYTE *v281;
  unint64_t v282;
  _QWORD *v283;
  _QWORD *v284;
  unint64_t v285;
  llvm::Type *v286;
  const llvm::APInt *v287;
  void *v288;
  uint64_t v289;
  llvm::UndefValue *v290;
  llvm::Type *v291;
  const llvm::APInt *v292;
  llvm::UndefValue *v293;
  unint64_t v294;
  uint64_t ***v295;
  char *v296;
  char *v297;
  uint64_t **v298;
  _QWORD *v299;
  uint64_t **v300;
  char *v301;
  char *v302;
  unsigned __int8 **v303;
  int v304;
  unsigned __int8 *v305;
  unsigned __int8 *v306;
  llvm::ConstantInt *v307;
  unsigned int v308;
  unint64_t v309;
  llvm::ValueHandleBase *v310;
  llvm::Value *v311;
  _QWORD *v312;
  _QWORD *v313;
  char *v314;
  char *v315;
  unsigned __int8 **v316;
  llvm::Value *v317;
  uint64_t v318;
  _QWORD *v319;
  uint64_t v320;
  unsigned __int8 ***v321;
  uint64_t v322;
  char *v323;
  char *v324;
  unsigned __int8 **v325;
  int v326;
  unsigned __int8 *v327;
  unsigned __int8 *v328;
  unsigned __int8 *v329;
  const char *v330;
  unint64_t v331;
  unsigned int v332;
  char v333;
  uint64_t v334;
  uint64_t v335;
  llvm::Constant *v336;
  const llvm::APInt *v337;
  uint64_t v338;
  __int16 v339;
  llvm::UndefValue *v340;
  const llvm::APInt *v341;
  llvm::ConstantInt *v342;
  unsigned int v343;
  unint64_t v344;
  llvm::ValueHandleBase *v345;
  unsigned __int8 *v346;
  uint64_t ***v347;
  char *v348;
  char *v349;
  uint64_t ****v350;
  llvm::Value *v351;
  uint64_t v352;
  _QWORD *v353;
  uint64_t v354;
  uint64_t **v355;
  uint64_t *****v356;
  uint64_t **v357;
  char *v358;
  char *v359;
  unsigned __int8 **v360;
  int v361;
  unsigned __int8 *v362;
  unsigned __int8 *v363;
  unsigned __int8 *v364;
  uint64_t v365;
  _QWORD *v366;
  _QWORD *v367;
  llvm::ConstantInt *v368;
  _QWORD *v369;
  llvm::ConstantInt *v370;
  _QWORD *v371;
  llvm::ConstantInt *v372;
  _QWORD *v373;
  llvm::ConstantInt *v374;
  _QWORD *v375;
  _QWORD *v376;
  _QWORD *v377;
  uint64_t v378;
  llvm::ConstantInt *v379;
  unsigned int v380;
  unint64_t v381;
  llvm::ValueHandleBase *v382;
  llvm::Value *v383;
  unsigned int v384;
  unint64_t v385;
  uint64_t v386;
  llvm::ValueHandleBase *v387;
  const llvm::APInt *v388;
  uint64_t v389;
  llvm::ConstantInt *v390;
  llvm::ConstantInt **v391;
  llvm::ConstantInt *v392;
  llvm::ValueHandleBase *v393;
  char *v394;
  uint64_t v395;
  void *v396;
  uint64_t v397;
  uint64_t v398;
  void *v399;
  const llvm::APInt *v400;
  llvm::ConstantInt *v401;
  unsigned int v402;
  unint64_t v403;
  llvm::ValueHandleBase *v404;
  const llvm::APInt *v405;
  uint64_t *v406;
  llvm::ConstantInt *v407;
  unsigned int v408;
  unint64_t v409;
  llvm::ValueHandleBase *v410;
  unsigned __int8 *v411;
  char v412;
  char v413;
  char *v414;
  char *v415;
  unsigned __int8 **v416;
  llvm::Value *v417;
  uint64_t v418;
  _QWORD *v419;
  uint64_t v420;
  uint64_t v421;
  unsigned __int8 ***v422;
  uint64_t v423;
  uint64_t v424;
  char *v425;
  char *v426;
  unsigned __int8 **v427;
  int v428;
  unsigned __int8 *v429;
  unsigned __int8 *v430;
  unsigned __int8 *v431;
  _DWORD *v432;
  int v433;
  uint64_t v434;
  _QWORD *v435;
  _QWORD *v436;
  int v437;
  _BYTE *v438;
  uint64_t v439;
  llvm::ConstantInt *v440;
  unsigned int v441;
  unint64_t v442;
  llvm::ValueHandleBase *v443;
  llvm::Value *v444;
  unsigned int v445;
  unint64_t v446;
  uint64_t v447;
  llvm::ValueHandleBase *v448;
  const llvm::APInt *v449;
  uint64_t v450;
  llvm::ConstantInt *v451;
  llvm::ConstantInt **v452;
  llvm::ConstantInt *v453;
  llvm::ValueHandleBase *v454;
  uint64_t v455;
  void *v456;
  uint64_t v457;
  uint64_t v458;
  void *v459;
  const llvm::APInt *v460;
  llvm::ConstantInt *v461;
  unsigned int v462;
  unint64_t v463;
  llvm::ValueHandleBase *v464;
  unsigned __int8 *v465;
  char v466;
  char v467;
  char *v468;
  char *v469;
  llvm::Value *v470;
  uint64_t v471;
  _QWORD *v472;
  uint64_t v473;
  unsigned __int8 *v474;
  unint64_t v475;
  llvm::ConstantInt *v476;
  unsigned int v477;
  unint64_t v478;
  llvm::ValueHandleBase *v479;
  uint64_t v480;
  llvm::PHINode *v481;
  char *v482;
  char *v483;
  unsigned __int8 **v484;
  int v485;
  unsigned __int8 *v486;
  unsigned __int8 **v487;
  unsigned __int8 *v488;
  _DWORD *v489;
  int v490;
  _QWORD *v491;
  _QWORD *v492;
  int v493;
  _BYTE *v494;
  uint64_t v495;
  llvm::ConstantInt *v496;
  unsigned int v497;
  unint64_t v498;
  llvm::ValueHandleBase *v499;
  llvm::Value *v500;
  unsigned int v501;
  unint64_t v502;
  uint64_t v503;
  llvm::Instruction *v504;
  llvm::ValueHandleBase *v505;
  const llvm::APInt *v506;
  uint64_t v507;
  llvm::ConstantInt *v508;
  llvm::ConstantInt **v509;
  llvm::ConstantInt *v510;
  llvm::ValueHandleBase *v511;
  uint64_t v512;
  void *v513;
  uint64_t v514;
  uint64_t v515;
  void *v516;
  const llvm::APInt *v517;
  llvm::ConstantInt *v518;
  unsigned int v519;
  unint64_t v520;
  llvm::ValueHandleBase *v521;
  unsigned __int8 *v522;
  char *v523;
  char *v524;
  llvm::Instruction **v525;
  llvm::Value *v526;
  uint64_t v527;
  _QWORD *v528;
  uint64_t v529;
  llvm::Instruction ***v530;
  uint64_t v531;
  uint64_t *v532;
  char *v533;
  char *v534;
  unsigned __int8 **v535;
  int v536;
  unsigned __int8 *v537;
  unsigned __int8 *v538;
  unsigned __int8 *v539;
  uint64_t ***v540;
  uint64_t *v541;
  uint64_t Successor;
  uint64_t v543;
  llvm::PHINode *v544;
  _DWORD *v545;
  int v546;
  uint64_t v547;
  _QWORD *v548;
  _QWORD *v549;
  void *v550;
  BOOL v551;
  _BYTE *v552;
  unint64_t v553;
  uint64_t v554;
  llvm::ConstantInt *v555;
  unsigned int v556;
  unint64_t v557;
  llvm::ValueHandleBase *v558;
  llvm::Value *v559;
  unsigned int v560;
  unint64_t v561;
  uint64_t v562;
  llvm::ValueHandleBase *v563;
  const llvm::APInt *v564;
  uint64_t v565;
  llvm::ConstantInt *v566;
  llvm::ConstantInt **v567;
  llvm::ConstantInt *v568;
  llvm::ValueHandleBase *v569;
  char *v570;
  uint64_t v571;
  void *v572;
  uint64_t v573;
  uint64_t v574;
  void *v575;
  char *v576;
  char *v577;
  llvm::Value *v578;
  _QWORD *v579;
  uint64_t v580;
  unsigned __int8 *v581;
  char *v582;
  char *v583;
  unsigned __int8 **v584;
  int v585;
  unsigned __int8 *v586;
  unsigned __int8 *v587;
  llvm::ConstantInt *v588;
  unsigned int v589;
  unint64_t v590;
  unint64_t v591;
  llvm::ValueHandleBase *v592;
  unsigned __int8 *v593;
  uint64_t ***v594;
  uint64_t v595;
  uint64_t v596;
  llvm::PHINode *v597;
  _DWORD *v598;
  int v599;
  _QWORD *v600;
  _QWORD *v601;
  char *v602;
  char *v603;
  unsigned __int8 **v604;
  int v605;
  unsigned __int8 *v606;
  unsigned __int8 *v607;
  unsigned __int8 *v608;
  _DWORD *v609;
  _DWORD *v610;
  int v611;
  _DWORD *v612;
  _DWORD *v613;
  int v614;
  _DWORD *v615;
  _DWORD *v616;
  int v617;
  _DWORD *v618;
  _DWORD *v619;
  int v620;
  _DWORD *v621;
  uint64_t v622;
  llvm::ConstantInt *v623;
  unsigned int v624;
  unint64_t v625;
  llvm::ValueHandleBase *v626;
  llvm::Value *v627;
  unsigned int v628;
  unint64_t v629;
  uint64_t v630;
  llvm::ValueHandleBase *v631;
  const llvm::APInt *v632;
  uint64_t v633;
  llvm::ConstantInt *v634;
  llvm::ConstantInt **v635;
  llvm::ConstantInt *v636;
  llvm::ValueHandleBase *v637;
  char *v638;
  void *v639;
  uint64_t v640;
  uint64_t v641;
  void *v642;
  uint64_t ***v643;
  char *v644;
  char *v645;
  llvm::Value *v646;
  uint64_t **v647;
  _QWORD *v648;
  uint64_t **v649;
  unsigned __int8 *v650;
  llvm::ConstantInt *v651;
  unsigned int v652;
  unint64_t v653;
  llvm::ValueHandleBase *v654;
  unsigned __int8 *v655;
  uint64_t v656;
  llvm::PHINode *v657;
  char *v658;
  char *v659;
  unsigned __int8 **v660;
  int v661;
  unsigned __int8 *v662;
  unsigned __int8 **v663;
  unsigned __int8 *v664;
  _DWORD *v665;
  int v666;
  _QWORD *v667;
  _QWORD *v668;
  _DWORD *v669;
  uint64_t v670;
  __int16 v671;
  llvm::ConstantInt *v672;
  unsigned int v673;
  unint64_t v674;
  llvm::ValueHandleBase *v675;
  llvm::Value *v676;
  unsigned int v677;
  unint64_t v678;
  uint64_t v679;
  llvm::ValueHandleBase *v680;
  const llvm::APInt *v681;
  uint64_t v682;
  llvm::ConstantInt *v683;
  llvm::ConstantInt **v684;
  llvm::ConstantInt *v685;
  llvm::ValueHandleBase *v686;
  char *v687;
  uint64_t v688;
  void *v689;
  uint64_t v690;
  uint64_t v691;
  void *v692;
  const llvm::APInt *v693;
  llvm::ConstantInt *v694;
  unsigned int v695;
  unint64_t v696;
  llvm::ValueHandleBase *v697;
  unsigned __int8 *v698;
  uint64_t ***v699;
  char *v700;
  char *v701;
  uint64_t ****v702;
  llvm::Value *v703;
  uint64_t v704;
  _QWORD *v705;
  uint64_t v706;
  uint64_t **v707;
  uint64_t *****v708;
  uint64_t **v709;
  uint64_t v710;
  llvm::Constant *v711;
  llvm::Constant *v712;
  llvm::Constant *v713;
  int v714;
  unsigned __int8 *v715;
  unsigned __int8 *v716;
  llvm::Constant *v717;
  unsigned __int8 *v718;
  _DWORD *v719;
  int v720;
  uint64_t v721;
  _QWORD *v722;
  _QWORD *v723;
  _DWORD *v724;
  int v725;
  _DWORD *v726;
  int v727;
  uint64_t v728;
  _BYTE *v729;
  _BYTE *v730;
  uint64_t v731;
  char *v733;
  unsigned __int8 **v734;
  unsigned __int8 **v735;
  unsigned __int8 **v736;
  _QWORD *v737;
  unint64_t v738;
  unint64_t v739;
  unsigned __int8 *v740;
  char *v741;
  unsigned __int8 **v742;
  unsigned __int8 **v743;
  unsigned __int8 **v744;
  unint64_t v745;
  unint64_t v746;
  unint64_t v747;
  unint64_t v748;
  unint64_t v749;
  uint64_t **v750;
  _QWORD *v751;
  _QWORD *v752;
  uint64_t v753;
  int v754;
  _BYTE *v755;
  unint64_t *v756;
  llvm::Instruction **v757;
  llvm::Instruction **v758;
  llvm::Instruction **v759;
  uint64_t *v760;
  _QWORD *v761;
  void **v762;
  void *v763;
  void *v764;
  unint64_t v765;
  _QWORD *v766;
  unint64_t v767;
  llvm::Constant *v768;
  unsigned __int8 *v769;
  unsigned __int8 *v770;
  _QWORD *v771;
  char v772;
  uint64_t v773;
  __int16 v774;
  llvm::Constant *v775;
  llvm::Constant *v776;
  uint64_t **v777;
  llvm::Constant *v778;
  unsigned __int8 *v779;
  llvm::Constant *v780;
  llvm::Constant *v781;
  llvm::Constant *v782;
  llvm::Constant *v783;
  unint64_t v784;
  _QWORD *v785;
  unsigned __int8 *v786;
  unsigned __int8 *v787;
  llvm::GetElementPtrInst *v788;
  unint64_t v789;
  llvm::Constant *v790;
  llvm::Constant *v791;
  llvm::Constant *v792;
  llvm::Constant *v793;
  llvm::Constant *v794;
  unsigned __int8 *v795;
  llvm::Constant *v796;
  unsigned __int8 *v797;
  unsigned __int8 *v798;
  char v799;
  llvm::Constant *v800;
  unsigned int v801;
  llvm::Constant *v802;
  unint64_t v803;
  unint64_t v804;
  char *v805;
  llvm::Instruction *v806;
  llvm::UndefValue *v807;
  llvm::Instruction *v808;
  llvm::Instruction *v809;
  unsigned __int8 *v810;
  char *v811;
  unint64_t v812;
  unint64_t v813;
  unint64_t v814;
  unint64_t v815;
  unint64_t v816;
  llvm::Instruction *v817;
  llvm::Instruction *v818;
  llvm::Instruction *v819;
  llvm::Instruction *v820;
  __int16 v821;
  llvm::Instruction *v822;
  char *v823;
  llvm::Type *v824;
  llvm::Type *v825;
  llvm::Type *v826;
  llvm::Type *v827;
  llvm::Type *v828;
  llvm::Type *v829;
  llvm::Type *v830;
  llvm::Type *v831;
  llvm::Type *v832;
  llvm::Type *v833;
  unint64_t v834;
  _BYTE *v835;
  uint64_t v836;
  unsigned __int8 *v837;
  unsigned int v838;
  unint64_t v839;
  __int16 v840;
  unsigned __int8 *v841;
  const char *v842;
  unsigned int v843;
  unint64_t v844;
  __int16 v845;
  unsigned __int8 *v846;
  void *v847;
  uint64_t v848;
  unint64_t v849;
  __int16 v850;
  char *v851;
  uint64_t v852;
  uint64_t v853;
  llvm::Instruction *v854;
  _QWORD **v855;
  llvm::ConstantInt *v856;
  void **v857;
  _QWORD *v858;
  uint64_t v859;
  int v860;
  __int16 v861;
  char v862;
  uint64_t v863;
  void *v864;
  _QWORD v865[3];

  v6 = 0;
  v865[1] = *MEMORY[0x1E0C80C00];
  v7 = a1 + 40;
  v8 = *(_QWORD *)(a1 + 48);
  v9 = &v864;
  v10 = v865;
  v11 = (char *)&v853;
  v12 = &v863;
  v13 = &v854;
  v14 = &v849;
  v15 = &unk_1E8167888;
  v17 = &unk_1E8167A08;
  do
  {
    if (v8 == v7)
      return v6 & 1;
    v18 = *(_QWORD *)(v8 + 8);
    v19 = v8 - 24;
    if (!v8)
      v19 = 0;
    v20 = *(unsigned __int8 *)(v19 + 16);
    if (v20 == 84)
      v21 = (_QWORD **)v19;
    else
      v21 = 0;
    if (v8 && v20 == 84)
    {
      v22 = (uint64_t)*(v21 - 4);
      if (!v22)
      {
LABEL_16:
        v6 |= v22;
        goto LABEL_17;
      }
      if (*(_BYTE *)(v22 + 16)
        || *(_QWORD **)(v22 + 24) != v21[9]
        || (*(_BYTE *)(v22 + 33) & 0x20) == 0
        || *(_BYTE *)(*(_QWORD *)v19 + 8) == 19)
      {
LABEL_15:
        LODWORD(v22) = 0;
        goto LABEL_16;
      }
      v23 = *(_DWORD *)(v19 + 20);
      v24 = v23 & 0x7FFFFFF;
      v25 = v19 - 32 * v24;
      if (v23 < 0)
      {
        v728 = *(_QWORD *)(v25 - 8);
        if ((v728 & 0xFFFFFFFF0) != 0)
          v26 = (*(_DWORD *)(v25 - 12) - *(_DWORD *)(v25 - v728));
        else
          v26 = 0;
      }
      else
      {
        v26 = 0;
      }
      v27 = v19 - 32;
      if (v25 != v27 - 32 * v26)
      {
        v28 = 32 * v24 - 32 * v26 - 32;
        while (*(_BYTE *)(**(_QWORD **)v25 + 8) != 19)
        {
          v25 += 32;
          v28 -= 32;
          if (!v28)
            goto LABEL_25;
        }
        goto LABEL_15;
      }
LABEL_25:
      v754 = v6;
      v835 = (_BYTE *)a4;
      v836 = a5;
      v766 = a3;
      v755 = a2;
      v756 = v14;
      v753 = v7;
      v805 = v11;
      v763 = v17;
      v764 = v15;
      switch(*(_DWORD *)(*(_QWORD *)v27 + 36))
      {
        case 0xB6:
          v757 = v13;
          v760 = v12;
          v761 = v10;
          v762 = v9;
          if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 392))(*a3, *v21[-4 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF)]) & 1) != 0)goto LABEL_89;
          v29 = 0;
          v30 = (llvm::Constant **)&v21[-4 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF)];
          v817 = v30[4];
          v790 = v30[8];
          v796 = *v30;
          v31 = *(_QWORD *)*v30;
          v32 = (llvm::ConstantInt *)**v21;
          v851 = v805;
          v852 = 0x200000000;
          v856 = v32;
          v857 = v762;
          v858 = v761;
          v859 = 0;
          v860 = 0;
          v861 = 512;
          v862 = 7;
          *v757 = 0;
          v757[1] = 0;
          *v760 = 0;
          v760[1] = 0;
          v864 = v15;
          v865[0] = v17;
          v33 = (llvm::Instruction *)v21[5];
          v854 = v33;
          v855 = v21 + 3;
          v771 = v21 + 3;
          v34 = v21[6];
          v847 = v34;
          if (v34)
          {
            llvm::MetadataTracking::track((uint64_t)&v847, (unsigned __int8 *)v34, 2);
            v29 = v847;
          }
          sub_1C4774EF4((uint64_t)&v851, 0, (uint64_t)v29);
          if (v847)
            llvm::MetadataTracking::untrack((uint64_t)&v847, (unsigned __int8 *)v847);
          v35 = (unsigned __int8 *)v21[6];
          v837 = v35;
          v36 = v817;
          if (v35)
          {
            llvm::MetadataTracking::track((uint64_t)&v837, v35, 2);
            v37 = v837;
          }
          else
          {
            v37 = 0;
          }
          sub_1C4774EF4((uint64_t)&v851, 0, (uint64_t)v37);
          if (v837)
            llvm::MetadataTracking::untrack((uint64_t)&v837, v837);
          v788 = *(llvm::GetElementPtrInst **)(v31 + 24);
          v251 = *(_DWORD *)(v31 + 32);
          v833 = (llvm::Type *)v251;
          if (sub_1C5C30818(v790))
          {
            if (!v251)
            {
LABEL_336:
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v21[5] + 5), (uint64_t ***)v21);
              v283 = v21[3];
              v284 = v21[4];
              *v284 = v283;
              v283[1] = v284;
              *v771 = 0;
              v21[4] = 0;
              llvm::Value::deleteValue((llvm::Value *)v21);
              a2 = v755;
              goto LABEL_798;
            }
            v253 = 0;
            v254 = 0;
            while (1)
            {
              AggregateElement = llvm::Constant::getAggregateElement(v790, (llvm::Type *)v253);
              if ((llvm::Constant::isNullValue(AggregateElement) & 1) == 0)
                break;
LABEL_311:
              if ((llvm::Type *)++v253 == v833)
                goto LABEL_336;
            }
            v847 = "Elt";
            v849 = v738 & 0xFFFFFFFF00000000 | v253;
            v850 = 2051;
            v257 = *(llvm::ConstantInt **)(*(_QWORD *)v856 + 1984);
            v258 = *(_DWORD *)(*(_QWORD *)v856 + 1992);
            v843 = v258 >> 8;
            v738 = v849;
            if (v258 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v842, v253, 0);
            }
            else
            {
              if (v258 <= 0xFF)
                v259 = 0;
              else
                v259 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v258);
              v842 = (const char *)(v259 & v253);
            }
            v260 = llvm::ConstantInt::get(v257, (llvm::LLVMContext *)&v842, v256);
            if (v843 >= 0x41 && v842)
              MEMORY[0x1CAA32F9C](v842, 0x1000C8000313F17);
            v261 = sub_1C4772EE0((uint64_t *)&v851, (uint64_t)v796, (uint64_t)v260, (uint64_t)&v847);
            v850 = 257;
            v262 = sub_1C4772C18((uint64_t *)&v851, v788, v36, v254, (uint64_t)&v847);
            v263 = (char *)operator new(0x80uLL);
            v264 = v263;
            *((_DWORD *)v263 + 21) = *((_DWORD *)v263 + 21) & 0x38000000 | 2;
            *(_QWORD *)v263 = 0;
            *((_QWORD *)v263 + 2) = 0;
            *((_QWORD *)v263 + 1) = 0;
            *((_QWORD *)v263 + 5) = 0;
            *((_QWORD *)v263 + 6) = 0;
            *((_QWORD *)v263 + 4) = 0;
            v265 = (uint64_t ****)(v263 + 32);
            *((_QWORD *)v263 + 8) = ***(_QWORD ***)v261 + 1576;
            v266 = (llvm::Value *)(v263 + 64);
            *((_QWORD *)v263 + 3) = v263 + 64;
            *((_QWORD *)v263 + 7) = v263 + 64;
            *((_QWORD *)v263 + 9) = 0;
            v263[80] = 61;
            v263[81] = 0;
            *((_WORD *)v263 + 41) = 0;
            *((_DWORD *)v263 + 21) = 2;
            *(_OWORD *)(v263 + 88) = 0u;
            *(_OWORD *)(v263 + 104) = 0u;
            *((_DWORD *)v263 + 30) = 0;
            *(_QWORD *)v263 = v261;
            v269 = *((_QWORD *)v261 + 1);
            v268 = v261 + 8;
            v267 = v269;
            *((_QWORD *)v263 + 1) = v269;
            if (v269)
              *(_QWORD *)(v267 + 16) = v263 + 8;
            *((_QWORD *)v263 + 2) = v268;
            *v268 = v263;
            if (*((_QWORD *)v263 + 4))
            {
              **((_QWORD **)v263 + 6) = *((_QWORD *)v263 + 5);
              v280 = *((_QWORD *)v263 + 5);
              if (v280)
                *(_QWORD *)(v280 + 16) = *((_QWORD *)v263 + 6);
            }
            *v265 = v262;
            if (v262)
            {
              v272 = v262[1];
              v271 = (uint64_t *****)(v262 + 1);
              v270 = v272;
              *((_QWORD *)v263 + 5) = v272;
              if (v272)
                v270[2] = (uint64_t *)(v263 + 40);
              *((_QWORD *)v263 + 6) = v271;
              *v271 = v265;
            }
            *((_WORD *)v263 + 41) = 0;
            v263[124] = 1;
            v850 = 257;
            (*(void (**)(_QWORD *, llvm::Value *, void **, llvm::Instruction *, _QWORD **))(*v858 + 16))(v858, v266, &v847, v854, v855);
            if (!(_DWORD)v852)
            {
LABEL_310:
              ++v254;
              v36 = v817;
              goto LABEL_311;
            }
            v273 = v851;
            v274 = &v851[16 * v852];
            v275 = (unsigned __int8 **)(v264 + 112);
            while (1)
            {
              v276 = *(_DWORD *)v273;
              v277 = (unsigned __int8 *)*((_QWORD *)v273 + 1);
              if (v277)
              {
                if (!v276)
                {
                  v842 = (const char *)*((_QWORD *)v273 + 1);
                  llvm::MetadataTracking::track((uint64_t)&v842, v277, 2);
                  v278 = *v275;
                  goto LABEL_324;
                }
              }
              else
              {
                v278 = *v275;
                if (!*v275 && (v264[87] & 0x20) == 0)
                  goto LABEL_321;
                if (!v276)
                {
                  v842 = 0;
LABEL_324:
                  if (v278)
                    llvm::MetadataTracking::untrack((uint64_t)(v264 + 112), v278);
                  v279 = (unsigned __int8 *)v842;
                  *v275 = (unsigned __int8 *)v842;
                  if (v279)
                    llvm::MetadataTracking::retrack((uint64_t)&v842, v279, (uint64_t)(v264 + 112));
                  goto LABEL_321;
                }
              }
              llvm::Value::setMetadata(v266, *(_DWORD *)v273, (llvm::MDNode *)v277);
LABEL_321:
              v273 += 16;
              if (v273 == v274)
                goto LABEL_310;
            }
          }
          v281 = v835;
          v282 = v767;
          if (v251 == 1)
          {
            v809 = v33;
            v779 = 0;
LABEL_702:
            v495 = 0;
            while (1)
            {
              if (v251 == 1)
              {
                v847 = "Mask";
                v849 = v282 & 0xFFFFFFFF00000000 | v495;
                v850 = 2051;
                v496 = *(llvm::ConstantInt **)(*(_QWORD *)v856 + 1984);
                v497 = *(_DWORD *)(*(_QWORD *)v856 + 1992);
                v843 = v497 >> 8;
                v767 = v849;
                if (v497 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v842, v495, 0);
                }
                else
                {
                  if (v497 <= 0xFF)
                    v498 = 0;
                  else
                    v498 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v497);
                  v842 = (const char *)(v498 & v495);
                }
                v499 = llvm::ConstantInt::get(v496, (llvm::LLVMContext *)&v842, v252);
                if (v843 >= 0x41 && v842)
                  MEMORY[0x1CAA32F9C](v842, 0x1000C8000313F17);
                v500 = (llvm::Value *)sub_1C4772EE0((uint64_t *)&v851, (uint64_t)v790, (uint64_t)v499, (uint64_t)&v847);
                goto LABEL_732;
              }
              if (*v281)
                v501 = v251 + ~(_DWORD)v495;
              else
                v501 = v495;
              LODWORD(v848) = v251;
              v767 = v282;
              if (v251 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v847, 0, 0);
                v503 = 1 << v501;
                if (v848 > 0x40)
                {
                  *((_QWORD *)v847 + (v501 >> 6)) |= v503;
                  v251 = (int)v833;
                  goto LABEL_717;
                }
                v502 = (unint64_t)v847;
                v251 = (int)v833;
              }
              else
              {
                v502 = 0;
                v503 = 1 << v501;
              }
              v847 = (void *)(v502 | v503);
LABEL_717:
              v504 = v36;
              v505 = llvm::ConstantInt::get(v856, (llvm::LLVMContext *)&v847, v252);
              if (v848 >= 0x41 && v847)
                MEMORY[0x1CAA32F9C](v847, 0x1000C8000313F17);
              v850 = 257;
              v507 = sub_1C4D89BCC((uint64_t)&v851, v779, (uint64_t)v505, (uint64_t)&v847);
              v508 = v856;
              LODWORD(v842) = v251;
              if (v251 <= 63)
              {
                if (v251 <= 31)
                {
                  switch(v251)
                  {
                    case 16:
                      v509 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 1936);
                      break;
                    case 8:
                      v509 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 1912);
                      break;
                    case 1:
                      v509 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 1888);
                      break;
                    default:
LABEL_780:
                      v545 = sub_1C5270984(*(_QWORD *)v856 + 2168, &v842);
                      v509 = (llvm::ConstantInt **)*((_QWORD *)v545 + 1);
                      if (!v509)
                      {
                        v509 = (llvm::ConstantInt **)sub_1C484358C(*(_QWORD *)v508 + 2040, 24, 3);
                        v546 = (int)v842;
                        *v509 = v508;
                        v509[2] = 0;
                        v509[1] = (llvm::ConstantInt *)((v546 << 8) | 0xDu);
                        *((_QWORD *)v545 + 1) = v509;
                      }
                      break;
                  }
                }
                else
                {
                  if (v251 != 32)
                    goto LABEL_780;
                  v509 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 1960);
                }
              }
              else if (v251 == 64)
              {
                v509 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 1984);
              }
              else
              {
                if (v251 != 128)
                  goto LABEL_780;
                v509 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 2008);
              }
              v510 = *v509;
              v843 = *((_DWORD *)v509 + 2) >> 8;
              if (v843 > 0x40)
                llvm::APInt::initSlowCase((llvm::APInt *)&v842, 0, 0);
              else
                v842 = 0;
              v36 = v504;
              v511 = llvm::ConstantInt::get(v510, (llvm::LLVMContext *)&v842, v506);
              if (v843 >= 0x41 && v842)
                MEMORY[0x1CAA32F9C](v842, 0x1000C8000313F17);
              v845 = 257;
              v500 = (llvm::Value *)sub_1C4774B48((uint64_t)&v851, 33, v507, (uint64_t)v511, (uint64_t)&v842);
LABEL_732:
              v823 = sub_1C5EBFBC0(v500, (uint64_t *)v21, 0, 0, v836, 0, 0, 0);
              v512 = *((_QWORD *)v823 + 5);
              v847 = "cond.store";
              v850 = 259;
              llvm::Value::setName((uint64_t ***)v512, (uint64_t)&v847);
              v513 = 0;
              v514 = *(_QWORD *)(v512 + 40);
              if (v514)
                v515 = v514 - 24;
              else
                v515 = 0;
              if (*(unsigned __int8 *)(v515 + 16) - 29 >= 0xB)
                v515 = 0;
              v854 = *(llvm::Instruction **)(v515 + 40);
              v855 = (_QWORD **)(v515 + 24);
              v516 = *(void **)(v515 + 48);
              v847 = v516;
              if (v516)
              {
                llvm::MetadataTracking::track((uint64_t)&v847, (unsigned __int8 *)v516, 2);
                v513 = v847;
              }
              sub_1C4774EF4((uint64_t)&v851, 0, (uint64_t)v513);
              if (v847)
                llvm::MetadataTracking::untrack((uint64_t)&v847, (unsigned __int8 *)v847);
              v850 = 257;
              v518 = *(llvm::ConstantInt **)(*(_QWORD *)v856 + 1984);
              v519 = *(_DWORD *)(*(_QWORD *)v856 + 1992);
              v843 = v519 >> 8;
              if (v519 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v842, v495, 0);
              }
              else
              {
                if (v519 <= 0xFF)
                  v520 = 0;
                else
                  v520 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v519);
                v842 = (const char *)(v520 & v495);
              }
              v521 = llvm::ConstantInt::get(v518, (llvm::LLVMContext *)&v842, v517);
              if (v843 >= 0x41 && v842)
                MEMORY[0x1CAA32F9C](v842, 0x1000C8000313F17);
              v522 = sub_1C4772EE0((uint64_t *)&v851, (uint64_t)v796, (uint64_t)v521, (uint64_t)&v847);
              v523 = (char *)operator new(0x80uLL);
              v524 = v523;
              *((_DWORD *)v523 + 21) = *((_DWORD *)v523 + 21) & 0x38000000 | 2;
              *(_QWORD *)v523 = 0;
              *((_QWORD *)v523 + 2) = 0;
              *((_QWORD *)v523 + 1) = 0;
              *((_QWORD *)v523 + 5) = 0;
              *((_QWORD *)v523 + 6) = 0;
              *((_QWORD *)v523 + 4) = 0;
              v525 = (llvm::Instruction **)(v523 + 32);
              *((_QWORD *)v523 + 8) = ***(_QWORD ***)v522 + 1576;
              v526 = (llvm::Value *)(v523 + 64);
              *((_QWORD *)v523 + 3) = v523 + 64;
              *((_QWORD *)v523 + 7) = v523 + 64;
              *((_QWORD *)v523 + 9) = 0;
              v523[80] = 61;
              v523[81] = 0;
              *((_WORD *)v523 + 41) = 0;
              *((_DWORD *)v523 + 21) = 2;
              *(_OWORD *)(v523 + 88) = 0u;
              *(_OWORD *)(v523 + 104) = 0u;
              *((_DWORD *)v523 + 30) = 0;
              *(_QWORD *)v523 = v522;
              v529 = *((_QWORD *)v522 + 1);
              v528 = v522 + 8;
              v527 = v529;
              *((_QWORD *)v523 + 1) = v529;
              if (v529)
                *(_QWORD *)(v527 + 16) = v523 + 8;
              *((_QWORD *)v523 + 2) = v528;
              *v528 = v523;
              if (*((_QWORD *)v523 + 4))
              {
                **((_QWORD **)v523 + 6) = *((_QWORD *)v523 + 5);
                v547 = *((_QWORD *)v523 + 5);
                if (v547)
                  *(_QWORD *)(v547 + 16) = *((_QWORD *)v523 + 6);
              }
              *v525 = v36;
              if (v36)
              {
                v530 = (llvm::Instruction ***)((char *)v36 + 8);
                v531 = *((_QWORD *)v36 + 1);
                *((_QWORD *)v523 + 5) = v531;
                if (v531)
                  *(_QWORD *)(v531 + 16) = v523 + 40;
                *((_QWORD *)v523 + 6) = v530;
                *v530 = v525;
              }
              v532 = (uint64_t *)v36;
              *((_WORD *)v523 + 41) = 0;
              v523[124] = 1;
              v850 = 257;
              (*(void (**)(_QWORD *, llvm::Value *, void **, llvm::Instruction *, _QWORD **))(*v858 + 16))(v858, v526, &v847, v854, v855);
              if ((_DWORD)v852)
              {
                v533 = v851;
                v534 = &v851[16 * v852];
                v535 = (unsigned __int8 **)(v524 + 112);
                do
                {
                  v536 = *(_DWORD *)v533;
                  v537 = (unsigned __int8 *)*((_QWORD *)v533 + 1);
                  if (v537)
                  {
                    if (!v536)
                    {
                      v842 = (const char *)*((_QWORD *)v533 + 1);
                      llvm::MetadataTracking::track((uint64_t)&v842, v537, 2);
                      v538 = *v535;
                      goto LABEL_765;
                    }
                  }
                  else
                  {
                    v538 = *v535;
                    if (!*v535 && (v524[87] & 0x20) == 0)
                      goto LABEL_762;
                    if (!v536)
                    {
                      v842 = 0;
LABEL_765:
                      if (v538)
                        llvm::MetadataTracking::untrack((uint64_t)(v524 + 112), v538);
                      v539 = (unsigned __int8 *)v842;
                      *v535 = (unsigned __int8 *)v842;
                      if (v539)
                        llvm::MetadataTracking::retrack((uint64_t)&v842, v539, (uint64_t)(v524 + 112));
                      goto LABEL_762;
                    }
                  }
                  llvm::Value::setMetadata(v526, *(_DWORD *)v533, (llvm::MDNode *)v537);
LABEL_762:
                  v533 += 16;
                }
                while (v533 != v534);
              }
              if ((llvm::Type *)++v495 == v833)
              {
                v540 = 0;
                v541 = v532;
              }
              else
              {
                v850 = 257;
                v541 = v532;
                v540 = sub_1C4772C18((uint64_t *)&v851, v788, v532, 1u, (uint64_t)&v847);
              }
              Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v823, 0);
              v847 = "else";
              v850 = 259;
              llvm::Value::setName((uint64_t ***)Successor, (uint64_t)&v847);
              sub_1C4D8AE2C((uint64_t)&v851, Successor, *(_QWORD *)(Successor + 48));
              v251 = (int)v833;
              if ((llvm::Type *)v495 == v833)
                goto LABEL_797;
              v543 = *v541;
              v847 = "ptr.phi.else";
              v850 = 259;
              v544 = (llvm::PHINode *)sub_1C4867E94((uint64_t)&v851, v543, 2, (uint64_t)&v847);
              sub_1C477667C(v544, (uint64_t)v540, v512);
              sub_1C477667C(v544, (uint64_t)v541, (uint64_t)v809);
              v36 = v544;
              v809 = (llvm::Instruction *)Successor;
              v281 = v835;
              v282 = v767;
            }
          }
          v368 = v856;
          LODWORD(v847) = v251;
          if (v251 <= 63)
          {
            switch(v251)
            {
              case 32:
                v369 = (_QWORD *)(*(_QWORD *)v856 + 1960);
                goto LABEL_700;
              case 16:
                v369 = (_QWORD *)(*(_QWORD *)v856 + 1936);
                goto LABEL_700;
              case 8:
                v369 = (_QWORD *)(*(_QWORD *)v856 + 1912);
                goto LABEL_700;
            }
          }
          else
          {
            if (v251 == 64)
            {
              v369 = (_QWORD *)(*(_QWORD *)v856 + 1984);
LABEL_700:
              v847 = "scalar_mask";
              v850 = 259;
              v779 = sub_1C4773E38((uint64_t *)&v851, 49, (unsigned __int8 *)v790, (uint64_t)v369, (uint64_t)&v847);
              if (v251)
              {
                v809 = v33;
                v281 = v835;
                v282 = v767;
                goto LABEL_702;
              }
LABEL_797:
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v21[5] + 5), (uint64_t ***)v21);
              v548 = v21[3];
              v549 = v21[4];
              *v549 = v548;
              v548[1] = v549;
              *v771 = 0;
              v21[4] = 0;
              llvm::Value::deleteValue((llvm::Value *)v21);
              a2 = v755;
              *v755 = 1;
LABEL_798:
              v550 = v851;
              v11 = v805;
              v551 = v851 == v805;
              v6 = v754;
              a4 = (uint64_t)v835;
              a5 = v836;
              a3 = v766;
              v7 = v753;
              v14 = v756;
              v13 = v757;
              goto LABEL_896;
            }
            if (v251 == 128)
            {
              v369 = (_QWORD *)(*(_QWORD *)v856 + 2008);
              goto LABEL_700;
            }
          }
          v615 = sub_1C5270984(*(_QWORD *)v856 + 2168, &v847);
          v369 = (_QWORD *)*((_QWORD *)v615 + 1);
          if (!v369)
          {
            v616 = v615;
            v369 = (_QWORD *)sub_1C484358C(*(_QWORD *)v368 + 2040, 24, 3);
            v617 = (int)v847;
            *v369 = v368;
            v369[2] = 0;
            v369[1] = (v617 << 8) | 0xDu;
            *((_QWORD *)v616 + 1) = v369;
          }
          goto LABEL_700;
        case 0xB7:
          v757 = v13;
          v760 = v12;
          v761 = v10;
          v762 = v9;
          if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 400))(*a3, *v21) & 1) != 0)
            goto LABEL_89;
          v109 = 0;
          v110 = (llvm::Type **)&v21[-4 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF)];
          v826 = *v110;
          v778 = v110[4];
          v111 = v110[8];
          v112 = (uint64_t **)*v21;
          v807 = (llvm::UndefValue *)(*v21)[3];
          v113 = (llvm::ConstantInt *)**v21;
          v851 = v805;
          v852 = 0x200000000;
          v856 = v113;
          v857 = v762;
          v858 = v761;
          v859 = 0;
          v860 = 0;
          v861 = 512;
          v862 = 7;
          *v757 = 0;
          v757[1] = 0;
          *v760 = 0;
          v760[1] = 0;
          v864 = &unk_1E8167888;
          v865[0] = &unk_1E8167A08;
          v114 = (llvm::Constant *)v21[5];
          v854 = v114;
          v855 = v21 + 3;
          v751 = v21 + 3;
          v115 = v21[6];
          v847 = v115;
          if (v115)
          {
            llvm::MetadataTracking::track((uint64_t)&v847, (unsigned __int8 *)v115, 2);
            v109 = v847;
          }
          sub_1C4774EF4((uint64_t)&v851, 0, (uint64_t)v109);
          if (v847)
            llvm::MetadataTracking::untrack((uint64_t)&v847, (unsigned __int8 *)v847);
          v116 = (unsigned __int8 *)v21[6];
          v841 = v116;
          if (v116)
          {
            llvm::MetadataTracking::track((uint64_t)&v841, v116, 2);
            v117 = v841;
          }
          else
          {
            v117 = 0;
          }
          sub_1C4774EF4((uint64_t)&v851, 0, (uint64_t)v117);
          if (v841)
            llvm::MetadataTracking::untrack((uint64_t)&v841, v841);
          v285 = *((unsigned int *)v112 + 8);
          v822 = (llvm::Instruction *)v285;
          if (sub_1C5C30818(v778))
          {
            v288 = llvm::UndefValue::get((llvm::UndefValue *)v112, v286);
            v847 = v756;
            v848 = 0x1000000000;
            sub_1C4893E04((char *)&v847, v285, -1);
            if (!(_DWORD)v285)
            {
LABEL_380:
              v845 = 257;
              v311 = (llvm::Value *)sub_1C486AD20((uint64_t)&v851, (uint64_t)v288, (uint64_t)v111, v847, v848, (uint64_t)&v842);
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v21, v311, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v21[5] + 5), (uint64_t ***)v21);
              v312 = v21[3];
              v313 = v21[4];
              *v313 = v312;
              v312[1] = v313;
              *v751 = 0;
              v21[4] = 0;
              llvm::Value::deleteValue((llvm::Value *)v21);
              v14 = v756;
              if (v847 != v756)
              {
                free(v847);
                v14 = v756;
              }
              a2 = v755;
LABEL_895:
              v550 = v851;
              v11 = v805;
              v551 = v851 == v805;
              v6 = v754;
              a4 = (uint64_t)v835;
              a5 = v836;
              a3 = v766;
              v7 = v753;
              v13 = v757;
LABEL_896:
              v17 = v763;
              v15 = v764;
              if (!v551)
              {
                free(v550);
                v17 = v763;
                v15 = v764;
                v14 = v756;
                v13 = v757;
                v11 = v805;
                v7 = v753;
                a2 = v755;
                a3 = v766;
                a4 = (uint64_t)v835;
                a5 = v836;
                v6 = v754;
              }
              goto LABEL_1044;
            }
            v289 = 0;
            v801 = 0;
            while (1)
            {
              v290 = llvm::Constant::getAggregateElement(v778, (llvm::Type *)v289);
              if (!llvm::Constant::isNullValue(v290))
                break;
              v293 = llvm::UndefValue::get(v807, v291);
              *((_DWORD *)v847 + v289) = v285 + v289;
              v294 = v834;
LABEL_367:
              v842 = "Res";
              v834 = v289 | v294 & 0xFFFFFFFF00000000;
              v844 = v834;
              v845 = 2051;
              v307 = *(llvm::ConstantInt **)(*(_QWORD *)v856 + 1984);
              v308 = *(_DWORD *)(*(_QWORD *)v856 + 1992);
              v838 = v308 >> 8;
              if (v308 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v837, v289, 0);
              }
              else
              {
                if (v308 <= 0xFF)
                  v309 = 0;
                else
                  v309 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v308);
                v837 = (unsigned __int8 *)(v309 & v289);
              }
              v310 = llvm::ConstantInt::get(v307, (llvm::LLVMContext *)&v837, v292);
              if (v838 >= 0x41 && v837)
                MEMORY[0x1CAA32F9C](v837, 0x1000C8000313F17);
              v288 = sub_1C4773154((uint64_t *)&v851, (uint64_t)v288, (uint64_t)v293, (uint64_t)v310, (uint64_t)&v842);
              if (++v289 == v285)
                goto LABEL_380;
            }
            v845 = 257;
            v295 = sub_1C4772C18((uint64_t *)&v851, v807, v826, v801, (uint64_t)&v842);
            v837 = "Load";
            v739 = v739 & 0xFFFFFFFF00000000 | v289;
            v839 = v739;
            v840 = 2051;
            v296 = (char *)operator new(0x60uLL);
            v297 = v296;
            v293 = (llvm::UndefValue *)(v296 + 32);
            *((_QWORD *)v296 + 2) = 0;
            *((_QWORD *)v296 + 3) = v296 + 32;
            v845 = 257;
            *((_QWORD *)v296 + 4) = v807;
            *((_QWORD *)v296 + 5) = 0;
            *((_WORD *)v296 + 24) = 60;
            *((_DWORD *)v296 + 13) = 1;
            *(_OWORD *)(v296 + 56) = 0u;
            *(_OWORD *)(v296 + 72) = 0u;
            *((_DWORD *)v296 + 22) = 0;
            *(_QWORD *)v296 = v295;
            *((_QWORD *)v296 + 1) = 0;
            if (v295)
            {
              v300 = v295[1];
              v299 = v295 + 1;
              v298 = v300;
              *((_QWORD *)v296 + 1) = v300;
              if (v300)
                v298[2] = (uint64_t *)(v296 + 8);
              *((_QWORD *)v296 + 2) = v299;
              *v299 = v296;
            }
            *((_WORD *)v296 + 25) = 0;
            v296[92] = 1;
            llvm::Value::setName((uint64_t ***)v296 + 4, (uint64_t)&v842);
            (*(void (**)(_QWORD *, llvm::UndefValue *, unsigned __int8 **, llvm::Instruction *, _QWORD **))(*v858 + 16))(v858, v293, &v837, v854, v855);
            v294 = v834;
            if (!(_DWORD)v852)
            {
LABEL_366:
              *((_DWORD *)v847 + v289) = v289;
              ++v801;
              v285 = (unint64_t)v822;
              goto LABEL_367;
            }
            v301 = v851;
            v302 = &v851[16 * v852];
            v303 = (unsigned __int8 **)(v297 + 80);
            while (1)
            {
              v304 = *(_DWORD *)v301;
              v292 = (const llvm::APInt *)*((_QWORD *)v301 + 1);
              if (v292)
              {
                if (!v304)
                {
                  v846 = (unsigned __int8 *)*((_QWORD *)v301 + 1);
                  llvm::MetadataTracking::track((uint64_t)&v846, (unsigned __int8 *)v292, 2);
                  v294 = v834;
                  v305 = *v303;
                  goto LABEL_362;
                }
              }
              else
              {
                v305 = *v303;
                if (!*v303 && (v297[55] & 0x20) == 0)
                  goto LABEL_359;
                if (!v304)
                {
                  v846 = 0;
LABEL_362:
                  if (v305)
                  {
                    llvm::MetadataTracking::untrack((uint64_t)(v297 + 80), v305);
                    v294 = v834;
                  }
                  v306 = v846;
                  *v303 = v846;
                  if (!v306)
                    goto LABEL_359;
                  llvm::MetadataTracking::retrack((uint64_t)&v846, v306, (uint64_t)(v297 + 80));
                  goto LABEL_358;
                }
              }
              llvm::Value::setMetadata(v293, *(_DWORD *)v301, v292);
LABEL_358:
              v294 = v834;
LABEL_359:
              v301 += 16;
              if (v301 == v302)
                goto LABEL_366;
            }
          }
          if ((_DWORD)v285 == 1)
          {
            v794 = v114;
            v770 = 0;
            v773 = (uint64_t)v112;
LABEL_803:
            v552 = v835;
            v553 = v765;
            v554 = 0;
            while (1)
            {
              v802 = v111;
              v789 = v554;
              if ((_DWORD)v285 == 1)
              {
                v847 = "Mask";
                v765 = v553 & 0xFFFFFFFF00000000 | v554;
                v849 = v765;
                v850 = 2051;
                v555 = *(llvm::ConstantInt **)(*(_QWORD *)v856 + 1984);
                v556 = *(_DWORD *)(*(_QWORD *)v856 + 1992);
                v843 = v556 >> 8;
                if (v556 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v842, v554, 0);
                }
                else
                {
                  if (v556 <= 0xFF)
                    v557 = 0;
                  else
                    v557 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v556);
                  v842 = (const char *)(v557 & v554);
                }
                v558 = llvm::ConstantInt::get(v555, (llvm::LLVMContext *)&v842, v287);
                if (v843 >= 0x41 && v842)
                  MEMORY[0x1CAA32F9C](v842, 0x1000C8000313F17);
                v559 = (llvm::Value *)sub_1C4772EE0((uint64_t *)&v851, (uint64_t)v778, (uint64_t)v558, (uint64_t)&v847);
                goto LABEL_833;
              }
              v765 = v553;
              if (*v552)
                v560 = v285 + ~(_DWORD)v554;
              else
                v560 = v554;
              LODWORD(v848) = v285;
              if (v285 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v847, 0, 0);
                v562 = 1 << v560;
                if (v848 > 0x40)
                {
                  *((_QWORD *)v847 + (v560 >> 6)) |= v562;
                  LODWORD(v285) = (_DWORD)v822;
                  goto LABEL_818;
                }
                v561 = (unint64_t)v847;
                LODWORD(v285) = (_DWORD)v822;
              }
              else
              {
                v561 = 0;
                v562 = 1 << v560;
              }
              v847 = (void *)(v561 | v562);
LABEL_818:
              v563 = llvm::ConstantInt::get(v856, (llvm::LLVMContext *)&v847, v287);
              if (v848 >= 0x41 && v847)
                MEMORY[0x1CAA32F9C](v847, 0x1000C8000313F17);
              v850 = 257;
              v565 = sub_1C4D89BCC((uint64_t)&v851, v770, (uint64_t)v563, (uint64_t)&v847);
              v566 = v856;
              LODWORD(v842) = v285;
              if ((int)v285 <= 63)
              {
                if ((int)v285 <= 31)
                {
                  switch((_DWORD)v285)
                  {
                    case 0x10:
                      v567 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 1936);
                      break;
                    case 8:
                      v567 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 1912);
                      break;
                    case 1:
                      v567 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 1888);
                      break;
                    default:
LABEL_879:
                      v598 = sub_1C5270984(*(_QWORD *)v856 + 2168, &v842);
                      v567 = (llvm::ConstantInt **)*((_QWORD *)v598 + 1);
                      if (!v567)
                      {
                        v567 = (llvm::ConstantInt **)sub_1C484358C(*(_QWORD *)v566 + 2040, 24, 3);
                        v599 = (int)v842;
                        *v567 = v566;
                        v567[2] = 0;
                        v567[1] = (llvm::ConstantInt *)((v599 << 8) | 0xDu);
                        *((_QWORD *)v598 + 1) = v567;
                      }
                      break;
                  }
                }
                else
                {
                  if ((_DWORD)v285 != 32)
                    goto LABEL_879;
                  v567 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 1960);
                }
              }
              else if ((_DWORD)v285 == 64)
              {
                v567 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 1984);
              }
              else
              {
                if ((_DWORD)v285 != 128)
                  goto LABEL_879;
                v567 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 2008);
              }
              v568 = *v567;
              v843 = *((_DWORD *)v567 + 2) >> 8;
              if (v843 > 0x40)
                llvm::APInt::initSlowCase((llvm::APInt *)&v842, 0, 0);
              else
                v842 = 0;
              v569 = llvm::ConstantInt::get(v568, (llvm::LLVMContext *)&v842, v564);
              if (v843 >= 0x41 && v842)
                MEMORY[0x1CAA32F9C](v842, 0x1000C8000313F17);
              v845 = 257;
              v559 = (llvm::Value *)sub_1C4774B48((uint64_t)&v851, 33, v565, (uint64_t)v569, (uint64_t)&v842);
LABEL_833:
              v570 = sub_1C5EBFBC0(v559, (uint64_t *)v21, 0, 0, v836, 0, 0, 0);
              v571 = *((_QWORD *)v570 + 5);
              v847 = "cond.load";
              v850 = 259;
              llvm::Value::setName((uint64_t ***)v571, (uint64_t)&v847);
              v572 = 0;
              v573 = *(_QWORD *)(v571 + 40);
              if (v573)
                v574 = v573 - 24;
              else
                v574 = 0;
              if (*(unsigned __int8 *)(v574 + 16) - 29 >= 0xB)
                v574 = 0;
              v854 = *(llvm::Instruction **)(v574 + 40);
              v855 = (_QWORD **)(v574 + 24);
              v575 = *(void **)(v574 + 48);
              v847 = v575;
              if (v575)
              {
                llvm::MetadataTracking::track((uint64_t)&v847, (unsigned __int8 *)v575, 2);
                v572 = v847;
              }
              sub_1C4774EF4((uint64_t)&v851, 0, (uint64_t)v572);
              if (v847)
                llvm::MetadataTracking::untrack((uint64_t)&v847, (unsigned __int8 *)v847);
              v845 = 257;
              v576 = (char *)operator new(0x60uLL);
              v577 = v576;
              v578 = (llvm::Value *)(v576 + 32);
              *((_QWORD *)v576 + 2) = 0;
              *((_QWORD *)v576 + 3) = v576 + 32;
              v850 = 257;
              *((_QWORD *)v576 + 4) = v807;
              *((_QWORD *)v576 + 5) = 0;
              *((_WORD *)v576 + 24) = 60;
              *((_DWORD *)v576 + 13) = 1;
              *(_OWORD *)(v576 + 56) = 0u;
              *(_OWORD *)(v576 + 72) = 0u;
              *((_DWORD *)v576 + 22) = 0;
              *(_QWORD *)v576 = v826;
              *((_QWORD *)v576 + 1) = 0;
              if (v826)
              {
                v579 = (_QWORD *)((char *)v826 + 8);
                v580 = *((_QWORD *)v826 + 1);
                *((_QWORD *)v576 + 1) = v580;
                if (v580)
                  *(_QWORD *)(v580 + 16) = v576 + 8;
                *((_QWORD *)v576 + 2) = v579;
                *v579 = v576;
              }
              *((_WORD *)v576 + 25) = 0;
              v576[92] = 1;
              llvm::Value::setName((uint64_t ***)v576 + 4, (uint64_t)&v847);
              (*(void (**)(_QWORD *, llvm::Value *, const char **, llvm::Instruction *, _QWORD **))(*v858 + 16))(v858, v578, &v842, v854, v855);
              if ((_DWORD)v852)
              {
                v582 = v851;
                v583 = &v851[16 * v852];
                v584 = (unsigned __int8 **)(v577 + 80);
                do
                {
                  v585 = *(_DWORD *)v582;
                  v581 = (unsigned __int8 *)*((_QWORD *)v582 + 1);
                  if (v581)
                  {
                    if (!v585)
                    {
                      v837 = (unsigned __int8 *)*((_QWORD *)v582 + 1);
                      llvm::MetadataTracking::track((uint64_t)&v837, v581, 2);
                      v586 = *v584;
                      goto LABEL_858;
                    }
                  }
                  else
                  {
                    v586 = *v584;
                    if (!*v584 && (v577[55] & 0x20) == 0)
                      goto LABEL_855;
                    if (!v585)
                    {
                      v837 = 0;
LABEL_858:
                      if (v586)
                        llvm::MetadataTracking::untrack((uint64_t)(v577 + 80), v586);
                      v587 = v837;
                      *v584 = v837;
                      if (v587)
                        llvm::MetadataTracking::retrack((uint64_t)&v837, v587, (uint64_t)(v577 + 80));
                      goto LABEL_855;
                    }
                  }
                  llvm::Value::setMetadata(v578, *(_DWORD *)v582, (llvm::MDNode *)v581);
LABEL_855:
                  v582 += 16;
                }
                while (v582 != v583);
              }
              v850 = 257;
              v588 = *(llvm::ConstantInt **)(*(_QWORD *)v856 + 1984);
              v589 = *(_DWORD *)(*(_QWORD *)v856 + 1992);
              v843 = v589 >> 8;
              if (v589 >> 8 > 0x40)
              {
                v591 = v789;
                llvm::APInt::initSlowCase((llvm::APInt *)&v842, v789, 0);
              }
              else
              {
                if (v589 <= 0xFF)
                  v590 = 0;
                else
                  v590 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v589);
                v591 = v789;
                v842 = (const char *)(v590 & v789);
              }
              v592 = llvm::ConstantInt::get(v588, (llvm::LLVMContext *)&v842, (const llvm::APInt *)v581);
              if (v843 >= 0x41 && v842)
                MEMORY[0x1CAA32F9C](v842, 0x1000C8000313F17);
              v593 = sub_1C4773154((uint64_t *)&v851, (uint64_t)v802, (uint64_t)v578, (uint64_t)v592, (uint64_t)&v847);
              v554 = v591 + 1;
              if ((llvm::Instruction *)v554 == v822)
              {
                v594 = 0;
              }
              else
              {
                v850 = 257;
                v594 = sub_1C4772C18((uint64_t *)&v851, v807, v826, 1u, (uint64_t)&v847);
              }
              v595 = llvm::Instruction::getSuccessor((llvm::Instruction *)v570, 0);
              v847 = "else";
              v850 = 259;
              llvm::Value::setName((uint64_t ***)v595, (uint64_t)&v847);
              sub_1C4D8AE2C((uint64_t)&v851, v595, *(_QWORD *)(v595 + 48));
              v847 = "res.phi.else";
              v850 = 259;
              v285 = sub_1C4867E94((uint64_t)&v851, v773, 2, (uint64_t)&v847);
              sub_1C477667C((llvm::PHINode *)v285, (uint64_t)v593, v571);
              sub_1C477667C((llvm::PHINode *)v285, (uint64_t)v802, (uint64_t)v794);
              if ((llvm::Instruction *)v554 == v822)
              {
                v111 = (llvm::Value *)v285;
LABEL_894:
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v21, v111, (llvm::Value *)1);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v21[5] + 5), (uint64_t ***)v21);
                v600 = v21[3];
                v601 = v21[4];
                *v601 = v600;
                v600[1] = v601;
                *v751 = 0;
                v21[4] = 0;
                llvm::Value::deleteValue((llvm::Value *)v21);
                a2 = v755;
                v14 = v756;
                *v755 = 1;
                goto LABEL_895;
              }
              v596 = *(_QWORD *)v826;
              v847 = "ptr.phi.else";
              v850 = 259;
              v597 = (llvm::PHINode *)sub_1C4867E94((uint64_t)&v851, v596, 2, (uint64_t)&v847);
              sub_1C477667C(v597, (uint64_t)v594, v571);
              sub_1C477667C(v597, (uint64_t)v826, (uint64_t)v794);
              v826 = v597;
              v794 = (llvm::Constant *)v595;
              v111 = (llvm::Value *)v285;
              v552 = v835;
              v553 = v765;
              LODWORD(v285) = (_DWORD)v822;
            }
          }
          v370 = v856;
          LODWORD(v847) = v285;
          if ((int)v285 <= 63)
          {
            switch((_DWORD)v285)
            {
              case 0x20:
                v371 = (_QWORD *)(*(_QWORD *)v856 + 1960);
                goto LABEL_801;
              case 0x10:
                v371 = (_QWORD *)(*(_QWORD *)v856 + 1936);
                goto LABEL_801;
              case 8:
                v371 = (_QWORD *)(*(_QWORD *)v856 + 1912);
                goto LABEL_801;
            }
          }
          else
          {
            if ((_DWORD)v285 == 64)
            {
              v371 = (_QWORD *)(*(_QWORD *)v856 + 1984);
LABEL_801:
              v847 = "scalar_mask";
              v850 = 259;
              v770 = sub_1C4773E38((uint64_t *)&v851, 49, (unsigned __int8 *)v778, (uint64_t)v371, (uint64_t)&v847);
              if (!(_DWORD)v285)
                goto LABEL_894;
              v794 = v114;
              v773 = (uint64_t)v112;
              goto LABEL_803;
            }
            if ((_DWORD)v285 == 128)
            {
              v371 = (_QWORD *)(*(_QWORD *)v856 + 2008);
              goto LABEL_801;
            }
          }
          v618 = sub_1C5270984(*(_QWORD *)v856 + 2168, &v847);
          v371 = (_QWORD *)*((_QWORD *)v618 + 1);
          if (!v371)
          {
            v619 = v618;
            v371 = (_QWORD *)sub_1C484358C(*(_QWORD *)v370 + 2040, 24, 3);
            v620 = (int)v847;
            *v371 = v370;
            v371[2] = 0;
            v371[1] = (v620 << 8) | 0xDu;
            *((_QWORD *)v619 + 1) = v371;
          }
          goto LABEL_801;
        case 0xB8:
          v56 = v21[-4 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF) + 4];
          v57 = v56 + 3;
          if (*((_DWORD *)v56 + 8) >= 0x41u)
            v57 = (unint64_t *)*v57;
          v760 = v12;
          v761 = v10;
          v762 = v9;
          v58 = (uint64_t **)*v21;
          v59 = (uint64_t **)*v21;
          if (((*v21)[1] & 0xFE) == 0x12)
            v59 = (uint64_t **)*v58[2];
          v757 = v13;
          v60 = *v57;
          v61 = __clz(v60) ^ 0x13F;
          if (v60)
            v62 = v61;
          else
            v62 = 0;
          if (v62 <= 0xFF)
          {
            v63 = a3;
            llvm::DataLayout::getAlignment(a4, (uint64_t)v59);
            a3 = v63;
          }
          v64 = v62;
          if ((*(unsigned int (**)(_QWORD, uint64_t **, _QWORD))(*(_QWORD *)*a3 + 368))(*a3, v58, v62)&& !(*(unsigned int (**)(_QWORD, uint64_t **, uint64_t))(*(_QWORD *)*v766 + 376))(*v766, v58, v64))
          {
            goto LABEL_89;
          }
          v65 = 0;
          v66 = (llvm::Constant **)&v21[-4 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF)];
          v67 = v66[4];
          v768 = v66[8];
          v68 = (unsigned __int8 *)v66[12];
          v784 = (*v21)[3];
          v792 = *v66;
          v750 = (uint64_t **)*v21;
          v69 = (llvm::ConstantInt *)**v21;
          v851 = v805;
          v852 = 0x200000000;
          v856 = v69;
          v857 = v762;
          v858 = v761;
          v859 = 0;
          v860 = 0;
          v861 = 512;
          v862 = 7;
          *v757 = 0;
          v757[1] = 0;
          *v760 = 0;
          v760[1] = 0;
          v864 = &unk_1E8167888;
          v865[0] = &unk_1E8167A08;
          v70 = (llvm::Type *)v21[5];
          v854 = v70;
          v855 = v21 + 3;
          v71 = v21[6];
          v847 = v71;
          if (v71)
          {
            llvm::MetadataTracking::track((uint64_t)&v847, (unsigned __int8 *)v71, 2);
            v65 = v847;
          }
          sub_1C4774EF4((uint64_t)&v851, 0, (uint64_t)v65);
          if (v847)
            llvm::MetadataTracking::untrack((uint64_t)&v847, (unsigned __int8 *)v847);
          v72 = (unint64_t *)((char *)v67 + 24);
          if (*((_DWORD *)v67 + 8) >= 0x41u)
            v72 = (unint64_t *)*v72;
          v73 = (llvm::Constant *)*v72;
          v74 = __clz(*v72) ^ 0x3F | 0x100;
          v776 = v73;
          if (!v73)
            LOBYTE(v74) = 0;
          v772 = v74;
          v75 = (unsigned __int8 *)v21[6];
          v846 = v75;
          if (v75)
          {
            llvm::MetadataTracking::track((uint64_t)&v846, v75, 2);
            v76 = v846;
          }
          else
          {
            v76 = 0;
          }
          sub_1C4774EF4((uint64_t)&v851, 0, (uint64_t)v76);
          if (v846)
            llvm::MetadataTracking::untrack((uint64_t)&v846, v846);
          v176 = *((unsigned int *)v750 + 8);
          v800 = (llvm::Constant *)v176;
          v737 = v21 + 3;
          if (sub_1C5C30818(v768))
          {
            if (!(_DWORD)v176)
            {
LABEL_229:
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v21, (llvm::Value *)v68, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v21[5] + 5), (uint64_t ***)v21);
              v207 = v21[3];
              v208 = v21[4];
              *v208 = v207;
              v207[1] = v208;
              *v737 = 0;
              v21[4] = 0;
              llvm::Value::deleteValue((llvm::Value *)v21);
              a2 = v755;
              goto LABEL_696;
            }
            v178 = 0;
            while (1)
            {
              v179 = llvm::Constant::getAggregateElement(v768, (llvm::Type *)v178);
              if ((llvm::Constant::isNullValue(v179) & 1) == 0)
                break;
LABEL_203:
              if (++v178 == v176)
                goto LABEL_229;
            }
            v847 = "Ptr";
            v849 = v745 & 0xFFFFFFFF00000000 | v178;
            v850 = 2051;
            v181 = *(llvm::ConstantInt **)(*(_QWORD *)v856 + 1984);
            v182 = *(_DWORD *)(*(_QWORD *)v856 + 1992);
            v843 = v182 >> 8;
            v745 = v849;
            if (v182 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v842, v178, 0);
            }
            else
            {
              if (v182 <= 0xFF)
                v183 = 0;
              else
                v183 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v182);
              v842 = (const char *)(v183 & v178);
            }
            v184 = (uint64_t)v68;
            v185 = llvm::ConstantInt::get(v181, (llvm::LLVMContext *)&v842, v180);
            if (v843 >= 0x41 && v842)
              MEMORY[0x1CAA32F9C](v842, 0x1000C8000313F17);
            v186 = sub_1C4772EE0((uint64_t *)&v851, (uint64_t)v792, (uint64_t)v185, (uint64_t)&v847);
            v842 = "Load";
            v746 = v178 | v746 & 0xFFFFFFFF00000000;
            v844 = v746;
            v845 = 2051;
            v187 = v772;
            if (!v776)
            {
              llvm::DataLayout::getAlignment(*(_QWORD *)(*((_QWORD *)v854 + 7) + 40) + 272, v784);
              v187 = v188;
            }
            v189 = (char *)operator new(0x60uLL);
            v190 = v189;
            v191 = (llvm::Value *)(v189 + 32);
            *((_QWORD *)v189 + 2) = 0;
            *((_QWORD *)v189 + 3) = v189 + 32;
            v850 = 257;
            *((_QWORD *)v189 + 4) = v784;
            *((_QWORD *)v189 + 5) = 0;
            *((_WORD *)v189 + 24) = 60;
            *((_DWORD *)v189 + 13) = 1;
            *(_OWORD *)(v189 + 56) = 0u;
            *(_OWORD *)(v189 + 72) = 0u;
            *((_DWORD *)v189 + 22) = 0;
            *(_QWORD *)v189 = v186;
            *((_QWORD *)v189 + 1) = 0;
            if (v186)
            {
              v194 = *((_QWORD *)v186 + 1);
              v193 = v186 + 8;
              v192 = v194;
              *((_QWORD *)v189 + 1) = v194;
              if (v194)
                *(_QWORD *)(v192 + 16) = v189 + 8;
              *((_QWORD *)v189 + 2) = v193;
              *v193 = v189;
            }
            *((_WORD *)v189 + 25) = 2 * (v187 & 0x3F);
            v189[92] = 1;
            llvm::Value::setName((uint64_t ***)v189 + 4, (uint64_t)&v847);
            (*(void (**)(_QWORD *, llvm::Value *, const char **, llvm::Instruction *, _QWORD **))(*v858 + 16))(v858, v191, &v842, v854, v855);
            v196 = v749;
            if (!(_DWORD)v852)
            {
LABEL_196:
              v847 = "Res";
              v749 = v178 | v196 & 0xFFFFFFFF00000000;
              v849 = v749;
              v850 = 2051;
              v197 = *(llvm::ConstantInt **)(*(_QWORD *)v856 + 1984);
              v198 = *(_DWORD *)(*(_QWORD *)v856 + 1992);
              v843 = v198 >> 8;
              if (v198 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v842, v178, 0);
              }
              else
              {
                if (v198 <= 0xFF)
                  v199 = 0;
                else
                  v199 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v198);
                v842 = (const char *)(v199 & v178);
              }
              v200 = llvm::ConstantInt::get(v197, (llvm::LLVMContext *)&v842, v195);
              if (v843 >= 0x41 && v842)
                MEMORY[0x1CAA32F9C](v842, 0x1000C8000313F17);
              v68 = sub_1C4773154((uint64_t *)&v851, v184, (uint64_t)v191, (uint64_t)v200, (uint64_t)&v847);
              v176 = (uint64_t)v800;
              goto LABEL_203;
            }
            v201 = v851;
            v202 = &v851[16 * v852];
            v203 = (unsigned __int8 **)(v190 + 80);
            while (1)
            {
              v204 = *(_DWORD *)v201;
              v195 = (const llvm::APInt *)*((_QWORD *)v201 + 1);
              if (v195)
              {
                if (!v204)
                {
                  v837 = (unsigned __int8 *)*((_QWORD *)v201 + 1);
                  llvm::MetadataTracking::track((uint64_t)&v837, (unsigned __int8 *)v195, 2);
                  v196 = v749;
                  v205 = *v203;
                  goto LABEL_217;
                }
              }
              else
              {
                v205 = *v203;
                if (!*v203 && (v190[55] & 0x20) == 0)
                  goto LABEL_214;
                if (!v204)
                {
                  v837 = 0;
LABEL_217:
                  if (v205)
                  {
                    llvm::MetadataTracking::untrack((uint64_t)(v190 + 80), v205);
                    v196 = v749;
                  }
                  v206 = v837;
                  *v203 = v837;
                  if (!v206)
                    goto LABEL_214;
                  llvm::MetadataTracking::retrack((uint64_t)&v837, v206, (uint64_t)(v190 + 80));
                  goto LABEL_213;
                }
              }
              llvm::Value::setMetadata(v191, *(_DWORD *)v201, v195);
LABEL_213:
              v196 = v749;
LABEL_214:
              v201 += 16;
              if (v201 == v202)
                goto LABEL_196;
            }
          }
          v828 = v70;
          if ((_DWORD)v176 == 1)
          {
            v740 = 0;
LABEL_595:
            v439 = 0;
            while (1)
            {
              if ((_DWORD)v176 == 1)
              {
                v847 = "Mask";
                v849 = v803 & 0xFFFFFFFF00000000 | v439;
                v850 = 2051;
                v440 = *(llvm::ConstantInt **)(*(_QWORD *)v856 + 1984);
                v441 = *(_DWORD *)(*(_QWORD *)v856 + 1992);
                v843 = v441 >> 8;
                v803 = v849;
                if (v441 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v842, v439, 0);
                }
                else
                {
                  if (v441 <= 0xFF)
                    v442 = 0;
                  else
                    v442 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v441);
                  v842 = (const char *)(v442 & v439);
                }
                v443 = llvm::ConstantInt::get(v440, (llvm::LLVMContext *)&v842, v177);
                if (v843 >= 0x41 && v842)
                  MEMORY[0x1CAA32F9C](v842, 0x1000C8000313F17);
                v444 = (llvm::Value *)sub_1C4772EE0((uint64_t *)&v851, (uint64_t)v768, (uint64_t)v443, (uint64_t)&v847);
                goto LABEL_625;
              }
              if (*v835)
                v445 = v176 + ~(_DWORD)v439;
              else
                v445 = v439;
              LODWORD(v848) = v176;
              if (v176 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v847, 0, 0);
                v447 = 1 << v445;
                if (v848 > 0x40)
                {
                  *((_QWORD *)v847 + (v445 >> 6)) |= v447;
                  LODWORD(v176) = (_DWORD)v800;
                  goto LABEL_610;
                }
                v446 = (unint64_t)v847;
                LODWORD(v176) = (_DWORD)v800;
              }
              else
              {
                v446 = 0;
                v447 = 1 << v445;
              }
              v847 = (void *)(v446 | v447);
LABEL_610:
              v448 = llvm::ConstantInt::get(v856, (llvm::LLVMContext *)&v847, v177);
              if (v848 >= 0x41 && v847)
                MEMORY[0x1CAA32F9C](v847, 0x1000C8000313F17);
              v850 = 257;
              v450 = sub_1C4D89BCC((uint64_t)&v851, v740, (uint64_t)v448, (uint64_t)&v847);
              v451 = v856;
              LODWORD(v842) = v176;
              if ((int)v176 <= 63)
              {
                if ((int)v176 <= 31)
                {
                  switch((_DWORD)v176)
                  {
                    case 0x10:
                      v452 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 1936);
                      break;
                    case 8:
                      v452 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 1912);
                      break;
                    case 1:
                      v452 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 1888);
                      break;
                    default:
LABEL_676:
                      v489 = sub_1C5270984(*(_QWORD *)v856 + 2168, &v842);
                      v452 = (llvm::ConstantInt **)*((_QWORD *)v489 + 1);
                      if (!v452)
                      {
                        v452 = (llvm::ConstantInt **)sub_1C484358C(*(_QWORD *)v451 + 2040, 24, 3);
                        v490 = (int)v842;
                        *v452 = v451;
                        v452[2] = 0;
                        v452[1] = (llvm::ConstantInt *)((v490 << 8) | 0xDu);
                        *((_QWORD *)v489 + 1) = v452;
                      }
                      break;
                  }
                }
                else
                {
                  if ((_DWORD)v176 != 32)
                    goto LABEL_676;
                  v452 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 1960);
                }
              }
              else if ((_DWORD)v176 == 64)
              {
                v452 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 1984);
              }
              else
              {
                if ((_DWORD)v176 != 128)
                  goto LABEL_676;
                v452 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 2008);
              }
              v453 = *v452;
              v843 = *((_DWORD *)v452 + 2) >> 8;
              if (v843 > 0x40)
                llvm::APInt::initSlowCase((llvm::APInt *)&v842, 0, 0);
              else
                v842 = 0;
              v454 = llvm::ConstantInt::get(v453, (llvm::LLVMContext *)&v842, v449);
              if (v843 >= 0x41 && v842)
                MEMORY[0x1CAA32F9C](v842, 0x1000C8000313F17);
              v845 = 257;
              v444 = (llvm::Value *)sub_1C4774B48((uint64_t)&v851, 33, v450, (uint64_t)v454, (uint64_t)&v842);
LABEL_625:
              v811 = sub_1C5EBFBC0(v444, (uint64_t *)v21, 0, 0, v836, 0, 0, 0);
              v455 = *((_QWORD *)v811 + 5);
              v847 = "cond.load";
              v850 = 259;
              llvm::Value::setName((uint64_t ***)v455, (uint64_t)&v847);
              v456 = 0;
              v457 = *(_QWORD *)(v455 + 40);
              if (v457)
                v458 = v457 - 24;
              else
                v458 = 0;
              if (*(unsigned __int8 *)(v458 + 16) - 29 >= 0xB)
                v458 = 0;
              v854 = *(llvm::Instruction **)(v458 + 40);
              v855 = (_QWORD **)(v458 + 24);
              v459 = *(void **)(v458 + 48);
              v847 = v459;
              if (v459)
              {
                llvm::MetadataTracking::track((uint64_t)&v847, (unsigned __int8 *)v459, 2);
                v456 = v847;
              }
              sub_1C4774EF4((uint64_t)&v851, 0, (uint64_t)v456);
              if (v847)
                llvm::MetadataTracking::untrack((uint64_t)&v847, (unsigned __int8 *)v847);
              v847 = "Ptr";
              v849 = v812 & 0xFFFFFFFF00000000 | v439;
              v850 = 2051;
              v461 = *(llvm::ConstantInt **)(*(_QWORD *)v856 + 1984);
              v462 = *(_DWORD *)(*(_QWORD *)v856 + 1992);
              v843 = v462 >> 8;
              v812 = v849;
              if (v462 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v842, v439, 0);
              }
              else
              {
                if (v462 <= 0xFF)
                  v463 = 0;
                else
                  v463 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v462);
                v842 = (const char *)(v463 & v439);
              }
              v464 = llvm::ConstantInt::get(v461, (llvm::LLVMContext *)&v842, v460);
              if (v843 >= 0x41 && v842)
                MEMORY[0x1CAA32F9C](v842, 0x1000C8000313F17);
              v465 = sub_1C4772EE0((uint64_t *)&v851, (uint64_t)v792, (uint64_t)v464, (uint64_t)&v847);
              v842 = "Load";
              v813 = v439 | v813 & 0xFFFFFFFF00000000;
              v844 = v813;
              v845 = 2051;
              v466 = v772;
              if (!v776)
              {
                llvm::DataLayout::getAlignment(*(_QWORD *)(*((_QWORD *)v854 + 7) + 40) + 272, v784);
                v466 = v467;
              }
              v468 = (char *)operator new(0x60uLL);
              v469 = v468;
              v470 = (llvm::Value *)(v468 + 32);
              *((_QWORD *)v468 + 2) = 0;
              *((_QWORD *)v468 + 3) = v468 + 32;
              v850 = 257;
              *((_QWORD *)v468 + 4) = v784;
              *((_QWORD *)v468 + 5) = 0;
              *((_WORD *)v468 + 24) = 60;
              *((_DWORD *)v468 + 13) = 1;
              *(_OWORD *)(v468 + 56) = 0u;
              *(_OWORD *)(v468 + 72) = 0u;
              *((_DWORD *)v468 + 22) = 0;
              *(_QWORD *)v468 = v465;
              *((_QWORD *)v468 + 1) = 0;
              if (v465)
              {
                v473 = *((_QWORD *)v465 + 1);
                v472 = v465 + 8;
                v471 = v473;
                *((_QWORD *)v468 + 1) = v473;
                if (v473)
                  *(_QWORD *)(v471 + 16) = v468 + 8;
                *((_QWORD *)v468 + 2) = v472;
                *v472 = v468;
              }
              *((_WORD *)v468 + 25) = 2 * (v466 & 0x3F);
              v468[92] = 1;
              llvm::Value::setName((uint64_t ***)v468 + 4, (uint64_t)&v847);
              (*(void (**)(_QWORD *, llvm::Value *, const char **, llvm::Instruction *, _QWORD **))(*v858 + 16))(v858, v470, &v842, v854, v855);
              v475 = v816;
              if ((_DWORD)v852)
              {
                v482 = v851;
                v483 = &v851[16 * v852];
                v484 = (unsigned __int8 **)(v469 + 80);
                do
                {
                  v485 = *(_DWORD *)v482;
                  v474 = (unsigned __int8 *)*((_QWORD *)v482 + 1);
                  if (v474)
                  {
                    if (!v485)
                    {
                      v837 = (unsigned __int8 *)*((_QWORD *)v482 + 1);
                      v734 = v484;
                      llvm::MetadataTracking::track((uint64_t)&v837, v474, 2);
                      v484 = v734;
                      v475 = v816;
                      v486 = *v734;
                      goto LABEL_666;
                    }
                  }
                  else
                  {
                    v486 = *v484;
                    if (!*v484 && (v469[55] & 0x20) == 0)
                      goto LABEL_663;
                    if (!v485)
                    {
                      v837 = 0;
LABEL_666:
                      if (v486)
                      {
                        v736 = v484;
                        llvm::MetadataTracking::untrack((uint64_t)v484, v486);
                        v484 = v736;
                        v475 = v816;
                      }
                      v488 = v837;
                      *v484 = v837;
                      if (!v488)
                        goto LABEL_663;
                      v735 = v484;
                      llvm::MetadataTracking::retrack((uint64_t)&v837, v488, (uint64_t)v484);
                      v484 = v735;
                      goto LABEL_662;
                    }
                  }
                  v733 = v483;
                  v487 = v484;
                  llvm::Value::setMetadata(v470, *(_DWORD *)v482, (llvm::MDNode *)v474);
                  v484 = v487;
                  v483 = v733;
LABEL_662:
                  v475 = v816;
LABEL_663:
                  v482 += 16;
                }
                while (v482 != v483);
              }
              v847 = "Res";
              v816 = v439 | v475 & 0xFFFFFFFF00000000;
              v849 = v816;
              v850 = 2051;
              v476 = *(llvm::ConstantInt **)(*(_QWORD *)v856 + 1984);
              v477 = *(_DWORD *)(*(_QWORD *)v856 + 1992);
              v843 = v477 >> 8;
              if (v477 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v842, v439, 0);
              }
              else
              {
                if (v477 <= 0xFF)
                  v478 = 0;
                else
                  v478 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v477);
                v842 = (const char *)(v478 & v439);
              }
              v479 = llvm::ConstantInt::get(v476, (llvm::LLVMContext *)&v842, (const llvm::APInt *)v474);
              if (v843 >= 0x41 && v842)
                MEMORY[0x1CAA32F9C](v842, 0x1000C8000313F17);
              v176 = (uint64_t)sub_1C4773154((uint64_t *)&v851, (uint64_t)v68, (uint64_t)v470, (uint64_t)v479, (uint64_t)&v847);
              v480 = llvm::Instruction::getSuccessor((llvm::Instruction *)v811, 0);
              v847 = "else";
              v850 = 259;
              llvm::Value::setName((uint64_t ***)v480, (uint64_t)&v847);
              sub_1C4D8AE2C((uint64_t)&v851, v480, *(_QWORD *)(v480 + 48));
              v847 = "res.phi.else";
              v850 = 259;
              v481 = (llvm::PHINode *)sub_1C4867E94((uint64_t)&v851, (uint64_t)v750, 2, (uint64_t)&v847);
              sub_1C477667C(v481, v176, v455);
              sub_1C477667C(v481, (uint64_t)v68, (uint64_t)v828);
              ++v439;
              v828 = (llvm::Type *)v480;
              v68 = (unsigned __int8 *)v481;
              LODWORD(v176) = (_DWORD)v800;
              if ((llvm::Constant *)v439 == v800)
                goto LABEL_695;
            }
          }
          v211 = v856;
          LODWORD(v847) = v176;
          if ((int)v176 <= 63)
          {
            switch((_DWORD)v176)
            {
              case 0x20:
                v212 = (_QWORD *)(*(_QWORD *)v856 + 1960);
                goto LABEL_594;
              case 0x10:
                v212 = (_QWORD *)(*(_QWORD *)v856 + 1936);
                goto LABEL_594;
              case 8:
                v212 = (_QWORD *)(*(_QWORD *)v856 + 1912);
                goto LABEL_594;
            }
          }
          else
          {
            if ((_DWORD)v176 == 64)
            {
              v212 = (_QWORD *)(*(_QWORD *)v856 + 1984);
LABEL_594:
              v847 = "scalar_mask";
              v850 = 259;
              v740 = sub_1C4773E38((uint64_t *)&v851, 49, (unsigned __int8 *)v768, (uint64_t)v212, (uint64_t)&v847);
              if ((_DWORD)v176)
                goto LABEL_595;
              v481 = (llvm::PHINode *)v68;
LABEL_695:
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v21, v481, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v21[5] + 5), (uint64_t ***)v21);
              v491 = v21[3];
              v492 = v21[4];
              *v492 = v491;
              v491[1] = v492;
              *v737 = 0;
              v21[4] = 0;
              llvm::Value::deleteValue((llvm::Value *)v21);
              a2 = v755;
              *v755 = 1;
LABEL_696:
              v11 = v805;
              v6 = v754;
              a5 = v836;
              a3 = v766;
              v7 = v753;
              v14 = v756;
              v13 = v757;
              v17 = v763;
              v15 = v764;
              if (v851 == v805)
                goto LABEL_1140;
              v493 = v754;
              v494 = a2;
              free(v851);
              v17 = v763;
              v15 = v764;
              v14 = v756;
              v13 = v757;
              v11 = v805;
              v7 = v753;
              a2 = v494;
              a3 = v766;
              a5 = v836;
LABEL_1148:
              v6 = v493;
LABEL_1140:
              LODWORD(v22) = 1;
              a4 = (uint64_t)v835;
              goto LABEL_1141;
            }
            if ((_DWORD)v176 == 128)
            {
              v212 = (_QWORD *)(*(_QWORD *)v856 + 2008);
              goto LABEL_594;
            }
          }
          v612 = sub_1C5270984(*(_QWORD *)v856 + 2168, &v847);
          v212 = (_QWORD *)*((_QWORD *)v612 + 1);
          if (!v212)
          {
            v613 = v612;
            v212 = (_QWORD *)sub_1C484358C(*(_QWORD *)v211 + 2040, 24, 3);
            v614 = (int)v847;
            *v212 = v211;
            v212[2] = 0;
            v212[1] = (v614 << 8) | 0xDu;
            *((_QWORD *)v613 + 1) = v212;
          }
          goto LABEL_594;
        case 0xB9:
          v77 = v21[-4 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF) + 4];
          v78 = v77 + 3;
          v79 = v16;
          v80 = v13;
          v81 = v12;
          v82 = v10;
          v83 = v9;
          if (*((_DWORD *)v77 + 8) >= 0x41u)
            v78 = (unint64_t *)*v78;
          v84 = *v78;
          v85 = __clz(v84) ^ 0x3F;
          if (v84)
            v86 = v85;
          else
            v86 = 0;
          if (((*(uint64_t (**)(_QWORD, _QWORD, unint64_t))(*(_QWORD *)*a3 + 328))(*a3, *v21, v86) & 1) != 0)
            goto LABEL_96;
          v87 = (unsigned __int8 **)&v21[-4 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF)];
          v88 = v87[4];
          v89 = (unint64_t *)(v88 + 24);
          if (*((_DWORD *)v88 + 8) >= 0x41u)
            v89 = (unint64_t *)*v89;
          v90 = v83;
          v91 = v81;
          v92 = 0;
          v93 = *v87;
          v797 = v87[8];
          v825 = (llvm::Type *)v87[12];
          v94 = *v89;
          v95 = __clz(*v89) ^ 0x3F;
          if (v94)
            v96 = v95;
          else
            v96 = 0;
          v806 = (llvm::Instruction *)(*v21)[3];
          v777 = (uint64_t **)*v21;
          v97 = (llvm::ConstantInt *)**v21;
          v851 = v805;
          v852 = 0x200000000;
          v856 = v97;
          v857 = v90;
          v761 = v82;
          v762 = v90;
          v858 = v82;
          v859 = 0;
          v860 = 0;
          v861 = 512;
          v862 = 7;
          *v80 = 0;
          v80[1] = 0;
          v758 = v80;
          v760 = v91;
          *v91 = 0;
          v91[1] = 0;
          v864 = &unk_1E8167888;
          v865[0] = v79 + 16;
          v98 = (llvm::Instruction *)v21[5];
          v854 = v98;
          v855 = v21 + 3;
          v99 = v21[6];
          v847 = v99;
          if (v99)
          {
            llvm::MetadataTracking::track((uint64_t)&v847, (unsigned __int8 *)v99, 2);
            v92 = v847;
          }
          sub_1C4774EF4((uint64_t)&v851, 0, (uint64_t)v92);
          if (v847)
            llvm::MetadataTracking::untrack((uint64_t)&v847, (unsigned __int8 *)v847);
          v100 = (unsigned __int8 *)v21[6];
          v846 = v100;
          if (v100)
          {
            llvm::MetadataTracking::track((uint64_t)&v846, v100, 2);
            v101 = v846;
          }
          else
          {
            v101 = 0;
          }
          sub_1C4774EF4((uint64_t)&v851, 0, (uint64_t)v101);
          if (v846)
            llvm::MetadataTracking::untrack((uint64_t)&v846, v846);
          if (v797[16] <= 0x14u && llvm::Constant::isAllOnesValue((llvm::Constant *)v797))
          {
            v845 = 257;
            v213 = (char *)operator new(0x60uLL);
            v214 = v213;
            v215 = (llvm::Value *)(v213 + 32);
            *((_QWORD *)v213 + 2) = 0;
            *((_QWORD *)v213 + 3) = v213 + 32;
            v850 = 257;
            *((_QWORD *)v213 + 4) = v777;
            *((_QWORD *)v213 + 5) = 0;
            *((_WORD *)v213 + 24) = 60;
            *((_DWORD *)v213 + 13) = 1;
            *(_OWORD *)(v213 + 56) = 0u;
            *(_OWORD *)(v213 + 72) = 0u;
            *((_DWORD *)v213 + 22) = 0;
            *(_QWORD *)v213 = v93;
            *((_QWORD *)v213 + 1) = 0;
            if (v93)
            {
              v218 = *((_QWORD *)v93 + 1);
              v217 = v93 + 8;
              v216 = v218;
              *((_QWORD *)v213 + 1) = v218;
              if (v218)
                *(_QWORD *)(v216 + 16) = v213 + 8;
              *((_QWORD *)v213 + 2) = v217;
              *v217 = v213;
            }
            *((_WORD *)v213 + 25) = 2 * v96;
            v213[92] = 1;
            llvm::Value::setName((uint64_t ***)v213 + 4, (uint64_t)&v847);
            (*(void (**)(_QWORD *, llvm::Value *, const char **, llvm::Instruction *, _QWORD **))(*v858 + 16))(v858, v215, &v842, v854, v855);
            if (!(_DWORD)v852)
            {
LABEL_246:
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v21, v215, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v21[5] + 5), (uint64_t ***)v21);
              v219 = v21[3];
              v220 = v21[4];
              *v220 = v219;
              v219[1] = v220;
              v21[3] = 0;
              v21[4] = 0;
              llvm::Value::deleteValue((llvm::Value *)v21);
              a2 = v755;
              goto LABEL_1043;
            }
            v602 = v851;
            v603 = &v851[16 * v852];
            v604 = (unsigned __int8 **)(v214 + 80);
            while (1)
            {
              v605 = *(_DWORD *)v602;
              v606 = (unsigned __int8 *)*((_QWORD *)v602 + 1);
              if (v606)
              {
                if (!v605)
                {
                  v837 = (unsigned __int8 *)*((_QWORD *)v602 + 1);
                  llvm::MetadataTracking::track((uint64_t)&v837, v606, 2);
                  v607 = *v604;
                  goto LABEL_910;
                }
              }
              else
              {
                v607 = *v604;
                if (!*v604 && (v214[55] & 0x20) == 0)
                  goto LABEL_907;
                if (!v605)
                {
                  v837 = 0;
LABEL_910:
                  if (v607)
                    llvm::MetadataTracking::untrack((uint64_t)(v214 + 80), v607);
                  v608 = v837;
                  *v604 = v837;
                  if (v608)
                    llvm::MetadataTracking::retrack((uint64_t)&v837, v608, (uint64_t)(v214 + 80));
                  goto LABEL_907;
                }
              }
              llvm::Value::setMetadata(v215, *(_DWORD *)v602, (llvm::MDNode *)v606);
LABEL_907:
              v602 += 16;
              if (v602 == v603)
                goto LABEL_246;
            }
          }
          PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v806);
          if ((_DWORD)v221 == 1)
          v820 = v98;
          v752 = v21 + 3;
          v223 = *(_DWORD *)(*(_QWORD *)v93 + 8);
          if ((v223 & 0xFE) == 0x12)
            v223 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v93 + 16) + 8);
          v224 = 63
               - __clz(((1 << v96) | (PrimitiveSizeInBits >> 3)) & -(uint64_t)((1 << v96) | (PrimitiveSizeInBits >> 3)));
          v225 = llvm::PointerType::get(v806, (llvm::Type *)(v223 >> 8));
          v850 = 257;
          v787 = sub_1C4773E38((uint64_t *)&v851, 49, v93, v225, (uint64_t)&v847);
          v226 = *((unsigned int *)v777 + 8);
          v793 = (llvm::Constant *)v226;
          if (sub_1C5C30818((llvm::Constant *)v797))
          {
            if ((_DWORD)v226)
            {
              v228 = 0;
              v821 = 2 * (v224 & 0x3F);
              v229 = (unsigned __int8 *)v825;
              while (1)
              {
                v230 = llvm::Constant::getAggregateElement((llvm::Constant *)v797, (llvm::Type *)v228);
                if ((llvm::Constant::isNullValue(v230) & 1) == 0)
                  break;
LABEL_267:
                if (++v228 == v226)
                  goto LABEL_472;
              }
              v231 = (uint64_t)v229;
              v850 = 257;
              v232 = sub_1C4772C18((uint64_t *)&v851, v806, v787, v228, (uint64_t)&v847);
              v845 = 257;
              v233 = (char *)operator new(0x60uLL);
              v234 = v233;
              v235 = (llvm::Value *)(v233 + 32);
              *((_QWORD *)v233 + 2) = 0;
              *((_QWORD *)v233 + 3) = v233 + 32;
              v850 = 257;
              *((_QWORD *)v233 + 4) = v806;
              *((_QWORD *)v233 + 5) = 0;
              *((_WORD *)v233 + 24) = 60;
              *((_DWORD *)v233 + 13) = 1;
              *(_OWORD *)(v233 + 56) = 0u;
              *(_OWORD *)(v233 + 72) = 0u;
              *((_DWORD *)v233 + 22) = 0;
              *(_QWORD *)v233 = v232;
              *((_QWORD *)v233 + 1) = 0;
              if (v232)
              {
                v238 = v232[1];
                v237 = v232 + 1;
                v236 = v238;
                *((_QWORD *)v233 + 1) = v238;
                if (v238)
                  v236[2] = (uint64_t *)(v233 + 8);
                *((_QWORD *)v233 + 2) = v237;
                *v237 = v233;
              }
              *((_WORD *)v233 + 25) = v821;
              v233[92] = 1;
              llvm::Value::setName((uint64_t ***)v233 + 4, (uint64_t)&v847);
              (*(void (**)(_QWORD *, llvm::Value *, const char **, llvm::Instruction *, _QWORD **))(*v858 + 16))(v858, v235, &v842, v854, v855);
              v226 = (uint64_t)v793;
              if (!(_DWORD)v852)
              {
LABEL_260:
                v850 = 257;
                v240 = *(llvm::ConstantInt **)(*(_QWORD *)v856 + 1984);
                v241 = *(_DWORD *)(*(_QWORD *)v856 + 1992);
                v843 = v241 >> 8;
                if (v241 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v842, v228, 0);
                }
                else
                {
                  if (v241 <= 0xFF)
                    v242 = 0;
                  else
                    v242 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v241);
                  v842 = (const char *)(v242 & v228);
                }
                v243 = llvm::ConstantInt::get(v240, (llvm::LLVMContext *)&v842, v239);
                if (v843 >= 0x41 && v842)
                  MEMORY[0x1CAA32F9C](v842, 0x1000C8000313F17);
                v229 = sub_1C4773154((uint64_t *)&v851, v231, (uint64_t)v235, (uint64_t)v243, (uint64_t)&v847);
                goto LABEL_267;
              }
              v244 = (llvm::Type *)v851;
              v245 = (llvm::Type *)&v851[16 * v852];
              v246 = (llvm::Type *)(v234 + 80);
              while (1)
              {
                v247 = *(_DWORD *)v244;
                v239 = (const llvm::APInt *)*((_QWORD *)v244 + 1);
                if (v239)
                {
                  if (!v247)
                  {
                    v837 = (unsigned __int8 *)*((_QWORD *)v244 + 1);
                    v830 = v246;
                    llvm::MetadataTracking::track((uint64_t)&v837, (unsigned __int8 *)v239, 2);
                    v246 = v830;
                    v248 = *(unsigned __int8 **)v830;
                    goto LABEL_280;
                  }
                }
                else
                {
                  v248 = *(unsigned __int8 **)v246;
                  if (!*(_QWORD *)v246 && (v234[55] & 0x20) == 0)
                    goto LABEL_277;
                  if (!v247)
                  {
                    v837 = 0;
LABEL_280:
                    if (v248)
                    {
                      v832 = v246;
                      llvm::MetadataTracking::untrack((uint64_t)v246, v248);
                      v246 = v832;
                    }
                    v250 = v837;
                    *(_QWORD *)v246 = v837;
                    if (v250)
                    {
                      v831 = v246;
                      llvm::MetadataTracking::retrack((uint64_t)&v837, v250, (uint64_t)v246);
                      v246 = v831;
                    }
                    goto LABEL_277;
                  }
                }
                v829 = v245;
                v249 = v246;
                llvm::Value::setMetadata(v235, *(_DWORD *)v244, v239);
                v246 = v249;
                v245 = v829;
LABEL_277:
                v244 = (llvm::Type *)((char *)v244 + 16);
                if (v244 == v245)
                  goto LABEL_260;
              }
            }
            v229 = (unsigned __int8 *)v825;
LABEL_472:
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v21, (llvm::Value *)v229, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v21[5] + 5), (uint64_t ***)v21);
            v376 = v21[3];
            v377 = v21[4];
            *v377 = v376;
            v376[1] = v377;
            *v752 = 0;
            v21[4] = 0;
            llvm::Value::deleteValue((llvm::Value *)v21);
            a2 = v755;
            goto LABEL_1043;
          }
          if ((_DWORD)v226 == 1)
          {
            v769 = 0;
LABEL_954:
            v622 = 0;
            v774 = 2 * (v224 & 0x3F);
            while (1)
            {
              if ((_DWORD)v226 == 1)
              {
                v850 = 257;
                v623 = *(llvm::ConstantInt **)(*(_QWORD *)v856 + 1984);
                v624 = *(_DWORD *)(*(_QWORD *)v856 + 1992);
                v843 = v624 >> 8;
                if (v624 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v842, v622, 0);
                }
                else
                {
                  if (v624 <= 0xFF)
                    v625 = 0;
                  else
                    v625 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v624);
                  v842 = (const char *)(v625 & v622);
                }
                v626 = llvm::ConstantInt::get(v623, (llvm::LLVMContext *)&v842, v227);
                if (v843 >= 0x41 && v842)
                  MEMORY[0x1CAA32F9C](v842, 0x1000C8000313F17);
                v627 = (llvm::Value *)sub_1C4772EE0((uint64_t *)&v851, (uint64_t)v797, (uint64_t)v626, (uint64_t)&v847);
                goto LABEL_984;
              }
              if (*v835)
                v628 = v226 + ~(_DWORD)v622;
              else
                v628 = v622;
              LODWORD(v848) = v226;
              if (v226 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v847, 0, 0);
                v630 = 1 << v628;
                if (v848 > 0x40)
                {
                  *((_QWORD *)v847 + (v628 >> 6)) |= v630;
                  LODWORD(v226) = (_DWORD)v793;
                  goto LABEL_969;
                }
                v629 = (unint64_t)v847;
                LODWORD(v226) = (_DWORD)v793;
              }
              else
              {
                v629 = 0;
                v630 = 1 << v628;
              }
              v847 = (void *)(v629 | v630);
LABEL_969:
              v631 = llvm::ConstantInt::get(v856, (llvm::LLVMContext *)&v847, v227);
              if (v848 >= 0x41 && v847)
                MEMORY[0x1CAA32F9C](v847, 0x1000C8000313F17);
              v850 = 257;
              v633 = sub_1C4D89BCC((uint64_t)&v851, v769, (uint64_t)v631, (uint64_t)&v847);
              v634 = v856;
              LODWORD(v842) = v226;
              if ((int)v226 <= 63)
              {
                if ((int)v226 <= 31)
                {
                  switch((_DWORD)v226)
                  {
                    case 0x10:
                      v635 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 1936);
                      break;
                    case 8:
                      v635 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 1912);
                      break;
                    case 1:
                      v635 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 1888);
                      break;
                    default:
LABEL_1027:
                      v665 = sub_1C5270984(*(_QWORD *)v856 + 2168, &v842);
                      v635 = (llvm::ConstantInt **)*((_QWORD *)v665 + 1);
                      if (!v635)
                      {
                        v635 = (llvm::ConstantInt **)sub_1C484358C(*(_QWORD *)v634 + 2040, 24, 3);
                        v666 = (int)v842;
                        *v635 = v634;
                        v635[2] = 0;
                        v635[1] = (llvm::ConstantInt *)((v666 << 8) | 0xDu);
                        *((_QWORD *)v665 + 1) = v635;
                      }
                      break;
                  }
                }
                else
                {
                  if ((_DWORD)v226 != 32)
                    goto LABEL_1027;
                  v635 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 1960);
                }
              }
              else if ((_DWORD)v226 == 64)
              {
                v635 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 1984);
              }
              else
              {
                if ((_DWORD)v226 != 128)
                  goto LABEL_1027;
                v635 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 2008);
              }
              v636 = *v635;
              v843 = *((_DWORD *)v635 + 2) >> 8;
              if (v843 > 0x40)
                llvm::APInt::initSlowCase((llvm::APInt *)&v842, 0, 0);
              else
                v842 = 0;
              v637 = llvm::ConstantInt::get(v636, (llvm::LLVMContext *)&v842, v632);
              if (v843 >= 0x41 && v842)
                MEMORY[0x1CAA32F9C](v842, 0x1000C8000313F17);
              v845 = 257;
              v627 = (llvm::Value *)sub_1C4774B48((uint64_t)&v851, 33, v633, (uint64_t)v637, (uint64_t)&v842);
LABEL_984:
              v638 = sub_1C5EBFBC0(v627, (uint64_t *)v21, 0, 0, v836, 0, 0, 0);
              v226 = *((_QWORD *)v638 + 5);
              v847 = "cond.load";
              v850 = 259;
              llvm::Value::setName((uint64_t ***)v226, (uint64_t)&v847);
              v639 = 0;
              v640 = *(_QWORD *)(v226 + 40);
              if (v640)
                v641 = v640 - 24;
              else
                v641 = 0;
              if (*(unsigned __int8 *)(v641 + 16) - 29 >= 0xB)
                v641 = 0;
              v854 = *(llvm::Instruction **)(v641 + 40);
              v855 = (_QWORD **)(v641 + 24);
              v642 = *(void **)(v641 + 48);
              v847 = v642;
              if (v642)
              {
                llvm::MetadataTracking::track((uint64_t)&v847, (unsigned __int8 *)v642, 2);
                v639 = v847;
              }
              sub_1C4774EF4((uint64_t)&v851, 0, (uint64_t)v639);
              if (v847)
                llvm::MetadataTracking::untrack((uint64_t)&v847, (unsigned __int8 *)v847);
              v850 = 257;
              v643 = sub_1C4772C18((uint64_t *)&v851, v806, v787, v622, (uint64_t)&v847);
              v845 = 257;
              v644 = (char *)operator new(0x60uLL);
              v645 = v644;
              v646 = (llvm::Value *)(v644 + 32);
              *((_QWORD *)v644 + 2) = 0;
              *((_QWORD *)v644 + 3) = v644 + 32;
              v850 = 257;
              *((_QWORD *)v644 + 4) = v806;
              *((_QWORD *)v644 + 5) = 0;
              *((_WORD *)v644 + 24) = 60;
              *((_DWORD *)v644 + 13) = 1;
              *(_OWORD *)(v644 + 56) = 0u;
              *(_OWORD *)(v644 + 72) = 0u;
              *((_DWORD *)v644 + 22) = 0;
              *(_QWORD *)v644 = v643;
              *((_QWORD *)v644 + 1) = 0;
              if (v643)
              {
                v649 = v643[1];
                v648 = v643 + 1;
                v647 = v649;
                *((_QWORD *)v644 + 1) = v649;
                if (v649)
                  v647[2] = (uint64_t *)(v644 + 8);
                *((_QWORD *)v644 + 2) = v648;
                *v648 = v644;
              }
              *((_WORD *)v644 + 25) = v774;
              v644[92] = 1;
              llvm::Value::setName((uint64_t ***)v644 + 4, (uint64_t)&v847);
              (*(void (**)(_QWORD *, llvm::Value *, const char **, llvm::Instruction *, _QWORD **))(*v858 + 16))(v858, v646, &v842, v854, v855);
              if ((_DWORD)v852)
              {
                v658 = v851;
                v659 = &v851[16 * v852];
                v660 = (unsigned __int8 **)(v645 + 80);
                do
                {
                  v661 = *(_DWORD *)v658;
                  v650 = (unsigned __int8 *)*((_QWORD *)v658 + 1);
                  if (v650)
                  {
                    if (!v661)
                    {
                      v837 = (unsigned __int8 *)*((_QWORD *)v658 + 1);
                      v742 = v660;
                      llvm::MetadataTracking::track((uint64_t)&v837, v650, 2);
                      v660 = v742;
                      v662 = *v742;
                      goto LABEL_1017;
                    }
                  }
                  else
                  {
                    v662 = *v660;
                    if (!*v660 && (v645[55] & 0x20) == 0)
                      goto LABEL_1014;
                    if (!v661)
                    {
                      v837 = 0;
LABEL_1017:
                      if (v662)
                      {
                        v744 = v660;
                        llvm::MetadataTracking::untrack((uint64_t)v660, v662);
                        v660 = v744;
                      }
                      v664 = v837;
                      *v660 = v837;
                      if (v664)
                      {
                        v743 = v660;
                        llvm::MetadataTracking::retrack((uint64_t)&v837, v664, (uint64_t)v660);
                        v660 = v743;
                      }
                      goto LABEL_1014;
                    }
                  }
                  v741 = v659;
                  v663 = v660;
                  llvm::Value::setMetadata(v646, *(_DWORD *)v658, (llvm::MDNode *)v650);
                  v660 = v663;
                  v659 = v741;
LABEL_1014:
                  v658 += 16;
                }
                while (v658 != v659);
              }
              v850 = 257;
              v651 = *(llvm::ConstantInt **)(*(_QWORD *)v856 + 1984);
              v652 = *(_DWORD *)(*(_QWORD *)v856 + 1992);
              v843 = v652 >> 8;
              if (v652 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v842, v622, 0);
              }
              else
              {
                if (v652 <= 0xFF)
                  v653 = 0;
                else
                  v653 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v652);
                v842 = (const char *)(v653 & v622);
              }
              v654 = llvm::ConstantInt::get(v651, (llvm::LLVMContext *)&v842, (const llvm::APInt *)v650);
              if (v843 >= 0x41 && v842)
                MEMORY[0x1CAA32F9C](v842, 0x1000C8000313F17);
              v655 = sub_1C4773154((uint64_t *)&v851, (uint64_t)v825, (uint64_t)v646, (uint64_t)v654, (uint64_t)&v847);
              v656 = llvm::Instruction::getSuccessor((llvm::Instruction *)v638, 0);
              v847 = "else";
              v850 = 259;
              llvm::Value::setName((uint64_t ***)v656, (uint64_t)&v847);
              sub_1C4D8AE2C((uint64_t)&v851, v656, *(_QWORD *)(v656 + 48));
              v847 = "res.phi.else";
              v850 = 259;
              v657 = (llvm::PHINode *)sub_1C4867E94((uint64_t)&v851, (uint64_t)v777, 2, (uint64_t)&v847);
              sub_1C477667C(v657, (uint64_t)v655, v226);
              sub_1C477667C(v657, (uint64_t)v825, (uint64_t)v820);
              ++v622;
              v820 = (llvm::Instruction *)v656;
              v825 = v657;
              LODWORD(v226) = (_DWORD)v793;
              if ((llvm::Constant *)v622 == v793)
                goto LABEL_1042;
            }
          }
          v372 = v856;
          LODWORD(v847) = v226;
          if ((int)v226 <= 63)
          {
            switch((_DWORD)v226)
            {
              case 0x20:
                v373 = (_QWORD *)(*(_QWORD *)v856 + 1960);
                goto LABEL_953;
              case 0x10:
                v373 = (_QWORD *)(*(_QWORD *)v856 + 1936);
                goto LABEL_953;
              case 8:
                v373 = (_QWORD *)(*(_QWORD *)v856 + 1912);
                goto LABEL_953;
            }
          }
          else
          {
            if ((_DWORD)v226 == 64)
            {
              v373 = (_QWORD *)(*(_QWORD *)v856 + 1984);
LABEL_953:
              v847 = "scalar_mask";
              v850 = 259;
              v769 = sub_1C4773E38((uint64_t *)&v851, 49, v797, (uint64_t)v373, (uint64_t)&v847);
              if ((_DWORD)v226)
                goto LABEL_954;
              v657 = v825;
LABEL_1042:
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v21, v657, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v21[5] + 5), (uint64_t ***)v21);
              v667 = v21[3];
              v668 = v21[4];
              *v668 = v667;
              v667[1] = v668;
              *v752 = 0;
              v21[4] = 0;
              llvm::Value::deleteValue((llvm::Value *)v21);
              a2 = v755;
              *v755 = 1;
LABEL_1043:
              v11 = v805;
              v6 = v754;
              a4 = (uint64_t)v835;
              a5 = v836;
              a3 = v766;
              v7 = v753;
              v14 = v756;
              v13 = v758;
              v17 = v763;
              v15 = v764;
              if (v851 == v805)
              {
LABEL_1044:
                LODWORD(v22) = 1;
LABEL_1141:
                v10 = v761;
                v9 = v762;
                v12 = v760;
                goto LABEL_16;
              }
              v437 = v754;
              v729 = a2;
              free(v851);
              v15 = v764;
              v14 = v756;
              v13 = v758;
              v11 = v805;
              v7 = v753;
              a2 = v729;
              v17 = v763;
              a3 = v766;
              a4 = (uint64_t)v835;
              a5 = v836;
LABEL_1146:
              v6 = v437;
              goto LABEL_1044;
            }
            if ((_DWORD)v226 == 128)
            {
              v373 = (_QWORD *)(*(_QWORD *)v856 + 2008);
              goto LABEL_953;
            }
          }
          v621 = sub_1C5270984(*(_QWORD *)v856 + 2168, &v847);
          v373 = (_QWORD *)*((_QWORD *)v621 + 1);
          if (!v373)
          {
            v724 = v621;
            v373 = (_QWORD *)sub_1C484358C(*(_QWORD *)v372 + 2040, 24, 3);
            v725 = (int)v847;
            *v373 = v372;
            v373[2] = 0;
            v373[1] = (v725 << 8) | 0xDu;
            *((_QWORD *)v724 + 1) = v373;
          }
          goto LABEL_953;
        case 0xBA:
          v38 = &v21[-4 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF)];
          v39 = v38[8];
          v40 = (unint64_t *)(v39 + 3);
          if (*((_DWORD *)v39 + 8) >= 0x41u)
            v40 = (unint64_t *)*v40;
          v760 = v12;
          v761 = v10;
          v762 = v9;
          v41 = **v38;
          v42 = v41;
          if ((*(_DWORD *)(v41 + 8) & 0xFE) == 0x12)
            v42 = **(_QWORD **)(v41 + 16);
          v757 = v13;
          v43 = *v40;
          v44 = __clz(v43) ^ 0x13F;
          if (v43)
            v45 = v44;
          else
            v45 = 0;
          if (v45 <= 0xFF)
          {
            v46 = a3;
            llvm::DataLayout::getAlignment(a4, v42);
            a3 = v46;
          }
          v47 = v45;
          if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a3 + 360))(*a3, v41, v45)&& !(*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v766 + 384))(*v766, v41, v47))
          {
LABEL_89:
            LODWORD(v22) = 0;
            v6 = v754;
            a4 = (uint64_t)v835;
            a5 = v836;
            a3 = v766;
            a2 = v755;
            v14 = v756;
            v7 = v753;
            v10 = v761;
            v9 = v762;
            v11 = v805;
            v13 = v757;
            v12 = v760;
            goto LABEL_97;
          }
          v48 = 0;
          v49 = (llvm::Type **)&v21[-4 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF)];
          v818 = v49[4];
          v824 = *v49;
          v50 = v49[8];
          v791 = v49[12];
          v51 = *(_QWORD *)*v49;
          v52 = (llvm::ConstantInt *)**v21;
          v851 = v805;
          v852 = 0x200000000;
          v856 = v52;
          v857 = v762;
          v858 = v761;
          v859 = 0;
          v860 = 0;
          v861 = 512;
          v862 = 7;
          *v757 = 0;
          v757[1] = 0;
          *v760 = 0;
          v760[1] = 0;
          v864 = &unk_1E8167888;
          v865[0] = &unk_1E8167A08;
          v854 = (llvm::Instruction *)v21[5];
          v855 = v21 + 3;
          v775 = (llvm::Constant *)(v21 + 3);
          v53 = v21[6];
          v847 = v53;
          if (v53)
          {
            llvm::MetadataTracking::track((uint64_t)&v847, (unsigned __int8 *)v53, 2);
            v48 = v847;
          }
          sub_1C4774EF4((uint64_t)&v851, 0, (uint64_t)v48);
          if (v847)
            llvm::MetadataTracking::untrack((uint64_t)&v847, (unsigned __int8 *)v847);
          v54 = (unsigned __int8 *)v21[6];
          v837 = v54;
          if (v54)
          {
            llvm::MetadataTracking::track((uint64_t)&v837, v54, 2);
            v55 = v837;
          }
          else
          {
            v55 = 0;
          }
          sub_1C4774EF4((uint64_t)&v851, 0, (uint64_t)v55);
          if (v837)
            llvm::MetadataTracking::untrack((uint64_t)&v837, v837);
          v135 = (unint64_t *)((char *)v50 + 24);
          if (*((_DWORD *)v50 + 8) >= 0x41u)
            v135 = (unint64_t *)*v135;
          v136 = (llvm::Instruction *)*v135;
          v137 = __clz(*v135) ^ 0x3F | 0x100;
          v808 = v136;
          if (!v136)
            LOBYTE(v137) = 0;
          v799 = v137;
          v138 = *(unsigned int *)(v51 + 32);
          if (sub_1C5C30818(v791))
          {
            if (!(_DWORD)v138)
            {
LABEL_175:
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v21[5] + 5), (uint64_t ***)v21);
              v174 = v21[3];
              v175 = v21[4];
              *v175 = v174;
              v174[1] = v175;
              *(_QWORD *)v775 = 0;
              v21[4] = 0;
              llvm::Value::deleteValue((llvm::Value *)v21);
              a2 = v755;
              goto LABEL_590;
            }
            v140 = 0;
            while (1)
            {
              v141 = llvm::Constant::getAggregateElement(v791, (llvm::Type *)v140);
              if ((llvm::Constant::isNullValue(v141) & 1) == 0)
              {
                v847 = "Elt";
                v849 = v747 & 0xFFFFFFFF00000000 | v140;
                v850 = 2051;
                v143 = *(llvm::ConstantInt **)(*(_QWORD *)v856 + 1984);
                v144 = *(_DWORD *)(*(_QWORD *)v856 + 1992);
                v843 = v144 >> 8;
                v747 = v849;
                if (v144 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v842, v140, 0);
                }
                else
                {
                  if (v144 <= 0xFF)
                    v145 = 0;
                  else
                    v145 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v144);
                  v842 = (const char *)(v145 & v140);
                }
                v146 = llvm::ConstantInt::get(v143, (llvm::LLVMContext *)&v842, v142);
                if (v843 >= 0x41 && v842)
                  MEMORY[0x1CAA32F9C](v842, 0x1000C8000313F17);
                v148 = (uint64_t *)sub_1C4772EE0((uint64_t *)&v851, (uint64_t)v824, (uint64_t)v146, (uint64_t)&v847);
                v847 = "Ptr";
                v849 = v140 | v748 & 0xFFFFFFFF00000000;
                v850 = 2051;
                v149 = *(llvm::ConstantInt **)(*(_QWORD *)v856 + 1984);
                v150 = *(_DWORD *)(*(_QWORD *)v856 + 1992);
                v843 = v150 >> 8;
                v748 = v849;
                if (v150 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v842, v140, 0);
                }
                else
                {
                  if (v150 <= 0xFF)
                    v151 = 0;
                  else
                    v151 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v150);
                  v842 = (const char *)(v151 & v140);
                }
                v152 = llvm::ConstantInt::get(v149, (llvm::LLVMContext *)&v842, v147);
                if (v843 >= 0x41 && v842)
                  MEMORY[0x1CAA32F9C](v842, 0x1000C8000313F17);
                v153 = sub_1C4772EE0((uint64_t *)&v851, (uint64_t)v818, (uint64_t)v152, (uint64_t)&v847);
                v154 = v799;
                if (!v808)
                {
                  llvm::DataLayout::getAlignment(*(_QWORD *)(*((_QWORD *)v854 + 7) + 40) + 272, *v148);
                  v154 = v155;
                }
                v156 = (char *)operator new(0x80uLL);
                v157 = v156;
                *((_DWORD *)v156 + 21) = *((_DWORD *)v156 + 21) & 0x38000000 | 2;
                *(_QWORD *)v156 = 0;
                *((_QWORD *)v156 + 2) = 0;
                *((_QWORD *)v156 + 1) = 0;
                *((_QWORD *)v156 + 5) = 0;
                *((_QWORD *)v156 + 6) = 0;
                *((_QWORD *)v156 + 4) = 0;
                v158 = (unsigned __int8 **)(v156 + 32);
                *((_QWORD *)v156 + 8) = **(_QWORD **)*v148 + 1576;
                v159 = (llvm::Value *)(v156 + 64);
                *((_QWORD *)v156 + 3) = v156 + 64;
                *((_QWORD *)v156 + 7) = v156 + 64;
                *((_QWORD *)v156 + 9) = 0;
                v156[80] = 61;
                v156[81] = 0;
                *((_WORD *)v156 + 41) = 0;
                *((_DWORD *)v156 + 21) = 2;
                *(_OWORD *)(v156 + 88) = 0u;
                *(_OWORD *)(v156 + 104) = 0u;
                *((_DWORD *)v156 + 30) = 0;
                *(_QWORD *)v156 = v148;
                v162 = v148[1];
                v161 = v148 + 1;
                v160 = v162;
                *((_QWORD *)v156 + 1) = v162;
                if (v162)
                  *(_QWORD *)(v160 + 16) = v156 + 8;
                *((_QWORD *)v156 + 2) = v161;
                *v161 = v156;
                if (*((_QWORD *)v156 + 4))
                {
                  **((_QWORD **)v156 + 6) = *((_QWORD *)v156 + 5);
                  v173 = *((_QWORD *)v156 + 5);
                  if (v173)
                    *(_QWORD *)(v173 + 16) = *((_QWORD *)v156 + 6);
                }
                *v158 = v153;
                if (v153)
                {
                  v165 = *((_QWORD *)v153 + 1);
                  v164 = (unsigned __int8 ***)(v153 + 8);
                  v163 = v165;
                  *((_QWORD *)v156 + 5) = v165;
                  if (v165)
                    *(_QWORD *)(v163 + 16) = v156 + 40;
                  *((_QWORD *)v156 + 6) = v164;
                  *v164 = v158;
                }
                *((_WORD *)v156 + 41) = 2 * (v154 & 0x3F);
                v156[124] = 1;
                v850 = 257;
                (*(void (**)(_QWORD *, llvm::Value *, void **, llvm::Instruction *, _QWORD **))(*v858 + 16))(v858, v159, &v847, v854, v855);
                if ((_DWORD)v852)
                  break;
              }
LABEL_147:
              if (++v140 == v138)
                goto LABEL_175;
            }
            v166 = v851;
            v167 = &v851[16 * v852];
            v168 = (unsigned __int8 **)(v157 + 112);
            while (1)
            {
              v169 = *(_DWORD *)v166;
              v170 = (unsigned __int8 *)*((_QWORD *)v166 + 1);
              if (v170)
              {
                if (!v169)
                {
                  v842 = (const char *)*((_QWORD *)v166 + 1);
                  llvm::MetadataTracking::track((uint64_t)&v842, v170, 2);
                  v171 = *v168;
                  goto LABEL_160;
                }
              }
              else
              {
                v171 = *v168;
                if (!*v168 && (v157[87] & 0x20) == 0)
                  goto LABEL_157;
                if (!v169)
                {
                  v842 = 0;
LABEL_160:
                  if (v171)
                    llvm::MetadataTracking::untrack((uint64_t)(v157 + 112), v171);
                  v172 = (unsigned __int8 *)v842;
                  *v168 = (unsigned __int8 *)v842;
                  if (v172)
                    llvm::MetadataTracking::retrack((uint64_t)&v842, v172, (uint64_t)(v157 + 112));
                  goto LABEL_157;
                }
              }
              llvm::Value::setMetadata(v159, *(_DWORD *)v166, (llvm::MDNode *)v170);
LABEL_157:
              v166 += 16;
              if (v166 == v167)
                goto LABEL_147;
            }
          }
          if ((_DWORD)v138 == 1)
          {
            v786 = 0;
LABEL_488:
            v378 = 0;
            while (1)
            {
              if ((_DWORD)v138 == 1)
              {
                v847 = "Mask";
                v849 = v804 & 0xFFFFFFFF00000000 | v378;
                v850 = 2051;
                v379 = *(llvm::ConstantInt **)(*(_QWORD *)v856 + 1984);
                v380 = *(_DWORD *)(*(_QWORD *)v856 + 1992);
                v843 = v380 >> 8;
                v804 = v849;
                if (v380 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v842, v378, 0);
                }
                else
                {
                  if (v380 <= 0xFF)
                    v381 = 0;
                  else
                    v381 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v380);
                  v842 = (const char *)(v381 & v378);
                }
                v382 = llvm::ConstantInt::get(v379, (llvm::LLVMContext *)&v842, v139);
                if (v843 >= 0x41 && v842)
                  MEMORY[0x1CAA32F9C](v842, 0x1000C8000313F17);
                v383 = (llvm::Value *)sub_1C4772EE0((uint64_t *)&v851, (uint64_t)v791, (uint64_t)v382, (uint64_t)&v847);
                goto LABEL_518;
              }
              if (*v835)
                v384 = v138 + ~(_DWORD)v378;
              else
                v384 = v378;
              LODWORD(v848) = v138;
              if (v138 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v847, 0, 0);
                v386 = 1 << v384;
                if (v848 > 0x40)
                {
                  *((_QWORD *)v847 + (v384 >> 6)) |= v386;
                  goto LABEL_503;
                }
                v385 = (unint64_t)v847;
              }
              else
              {
                v385 = 0;
                v386 = 1 << v384;
              }
              v847 = (void *)(v385 | v386);
LABEL_503:
              v387 = llvm::ConstantInt::get(v856, (llvm::LLVMContext *)&v847, v139);
              if (v848 >= 0x41 && v847)
                MEMORY[0x1CAA32F9C](v847, 0x1000C8000313F17);
              v850 = 257;
              v389 = sub_1C4D89BCC((uint64_t)&v851, v786, (uint64_t)v387, (uint64_t)&v847);
              v390 = v856;
              LODWORD(v842) = v138;
              if ((int)v138 <= 63)
              {
                if ((int)v138 <= 31)
                {
                  if ((_DWORD)v138 == 16)
                  {
                    v391 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 1936);
                  }
                  else
                  {
                    if ((_DWORD)v138 != 8)
                    {
LABEL_568:
                      v432 = sub_1C5270984(*(_QWORD *)v856 + 2168, &v842);
                      v391 = (llvm::ConstantInt **)*((_QWORD *)v432 + 1);
                      if (!v391)
                      {
                        v391 = (llvm::ConstantInt **)sub_1C484358C(*(_QWORD *)v390 + 2040, 24, 3);
                        v433 = (int)v842;
                        *v391 = v390;
                        v391[2] = 0;
                        v391[1] = (llvm::ConstantInt *)((v433 << 8) | 0xDu);
                        *((_QWORD *)v432 + 1) = v391;
                      }
                      goto LABEL_514;
                    }
                    v391 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 1912);
                  }
                }
                else
                {
                  if ((_DWORD)v138 != 32)
                    goto LABEL_568;
                  v391 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 1960);
                }
              }
              else if ((_DWORD)v138 == 64)
              {
                v391 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 1984);
              }
              else
              {
                if ((_DWORD)v138 != 128)
                  goto LABEL_568;
                v391 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 2008);
              }
LABEL_514:
              v392 = *v391;
              v843 = *((_DWORD *)v391 + 2) >> 8;
              if (v843 > 0x40)
                llvm::APInt::initSlowCase((llvm::APInt *)&v842, 0, 0);
              else
                v842 = 0;
              v393 = llvm::ConstantInt::get(v392, (llvm::LLVMContext *)&v842, v388);
              if (v843 >= 0x41 && v842)
                MEMORY[0x1CAA32F9C](v842, 0x1000C8000313F17);
              v845 = 257;
              v383 = (llvm::Value *)sub_1C4774B48((uint64_t)&v851, 33, v389, (uint64_t)v393, (uint64_t)&v842);
LABEL_518:
              v394 = sub_1C5EBFBC0(v383, (uint64_t *)v21, 0, 0, v836, 0, 0, 0);
              v395 = *((_QWORD *)v394 + 5);
              v847 = "cond.store";
              v850 = 259;
              llvm::Value::setName((uint64_t ***)v395, (uint64_t)&v847);
              v396 = 0;
              v397 = *(_QWORD *)(v395 + 40);
              if (v397)
                v398 = v397 - 24;
              else
                v398 = 0;
              if (*(unsigned __int8 *)(v398 + 16) - 29 >= 0xB)
                v398 = 0;
              v854 = *(llvm::Instruction **)(v398 + 40);
              v855 = (_QWORD **)(v398 + 24);
              v399 = *(void **)(v398 + 48);
              v847 = v399;
              if (v399)
              {
                llvm::MetadataTracking::track((uint64_t)&v847, (unsigned __int8 *)v399, 2);
                v396 = v847;
              }
              sub_1C4774EF4((uint64_t)&v851, 0, (uint64_t)v396);
              if (v847)
                llvm::MetadataTracking::untrack((uint64_t)&v847, (unsigned __int8 *)v847);
              v847 = "Elt";
              v849 = v814 & 0xFFFFFFFF00000000 | v378;
              v850 = 2051;
              v401 = *(llvm::ConstantInt **)(*(_QWORD *)v856 + 1984);
              v402 = *(_DWORD *)(*(_QWORD *)v856 + 1992);
              v843 = v402 >> 8;
              v814 = v849;
              if (v402 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v842, v378, 0);
              }
              else
              {
                if (v402 <= 0xFF)
                  v403 = 0;
                else
                  v403 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v402);
                v842 = (const char *)(v403 & v378);
              }
              v404 = llvm::ConstantInt::get(v401, (llvm::LLVMContext *)&v842, v400);
              if (v843 >= 0x41 && v842)
                MEMORY[0x1CAA32F9C](v842, 0x1000C8000313F17);
              v406 = (uint64_t *)sub_1C4772EE0((uint64_t *)&v851, (uint64_t)v824, (uint64_t)v404, (uint64_t)&v847);
              v847 = "Ptr";
              v849 = v378 | v815 & 0xFFFFFFFF00000000;
              v850 = 2051;
              v407 = *(llvm::ConstantInt **)(*(_QWORD *)v856 + 1984);
              v408 = *(_DWORD *)(*(_QWORD *)v856 + 1992);
              v843 = v408 >> 8;
              v815 = v849;
              if (v408 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v842, v378, 0);
              }
              else
              {
                if (v408 <= 0xFF)
                  v409 = 0;
                else
                  v409 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v408);
                v842 = (const char *)(v409 & v378);
              }
              v410 = llvm::ConstantInt::get(v407, (llvm::LLVMContext *)&v842, v405);
              if (v843 >= 0x41 && v842)
                MEMORY[0x1CAA32F9C](v842, 0x1000C8000313F17);
              v411 = sub_1C4772EE0((uint64_t *)&v851, (uint64_t)v818, (uint64_t)v410, (uint64_t)&v847);
              v412 = v799;
              if (!v808)
              {
                llvm::DataLayout::getAlignment(*(_QWORD *)(*((_QWORD *)v854 + 7) + 40) + 272, *v406);
                v412 = v413;
              }
              v414 = (char *)operator new(0x80uLL);
              v415 = v414;
              *((_DWORD *)v414 + 21) = *((_DWORD *)v414 + 21) & 0x38000000 | 2;
              *(_QWORD *)v414 = 0;
              *((_QWORD *)v414 + 2) = 0;
              *((_QWORD *)v414 + 1) = 0;
              *((_QWORD *)v414 + 5) = 0;
              *((_QWORD *)v414 + 6) = 0;
              *((_QWORD *)v414 + 4) = 0;
              v416 = (unsigned __int8 **)(v414 + 32);
              *((_QWORD *)v414 + 8) = **(_QWORD **)*v406 + 1576;
              v417 = (llvm::Value *)(v414 + 64);
              *((_QWORD *)v414 + 3) = v414 + 64;
              *((_QWORD *)v414 + 7) = v414 + 64;
              *((_QWORD *)v414 + 9) = 0;
              v414[80] = 61;
              v414[81] = 0;
              *((_WORD *)v414 + 41) = 0;
              *((_DWORD *)v414 + 21) = 2;
              *(_OWORD *)(v414 + 88) = 0u;
              *(_OWORD *)(v414 + 104) = 0u;
              *((_DWORD *)v414 + 30) = 0;
              *(_QWORD *)v414 = v406;
              v420 = v406[1];
              v419 = v406 + 1;
              v418 = v420;
              *((_QWORD *)v414 + 1) = v420;
              if (v420)
                *(_QWORD *)(v418 + 16) = v414 + 8;
              *((_QWORD *)v414 + 2) = v419;
              *v419 = v414;
              if (*((_QWORD *)v414 + 4))
              {
                **((_QWORD **)v414 + 6) = *((_QWORD *)v414 + 5);
                v434 = *((_QWORD *)v414 + 5);
                if (v434)
                  *(_QWORD *)(v434 + 16) = *((_QWORD *)v414 + 6);
              }
              *v416 = v411;
              if (v411)
              {
                v423 = *((_QWORD *)v411 + 1);
                v422 = (unsigned __int8 ***)(v411 + 8);
                v421 = v423;
                *((_QWORD *)v414 + 5) = v423;
                if (v423)
                  *(_QWORD *)(v421 + 16) = v414 + 40;
                *((_QWORD *)v414 + 6) = v422;
                *v422 = v416;
              }
              *((_WORD *)v414 + 41) = 2 * (v412 & 0x3F);
              v414[124] = 1;
              v850 = 257;
              (*(void (**)(_QWORD *, llvm::Value *, void **, llvm::Instruction *, _QWORD **))(*v858 + 16))(v858, v417, &v847, v854, v855);
              if ((_DWORD)v852)
              {
                v425 = v851;
                v426 = &v851[16 * v852];
                v427 = (unsigned __int8 **)(v415 + 112);
                do
                {
                  v428 = *(_DWORD *)v425;
                  v429 = (unsigned __int8 *)*((_QWORD *)v425 + 1);
                  if (v429)
                  {
                    if (!v428)
                    {
                      v842 = (const char *)*((_QWORD *)v425 + 1);
                      llvm::MetadataTracking::track((uint64_t)&v842, v429, 2);
                      v430 = *v427;
                      goto LABEL_560;
                    }
                  }
                  else
                  {
                    v430 = *v427;
                    if (!*v427 && (v415[87] & 0x20) == 0)
                      goto LABEL_557;
                    if (!v428)
                    {
                      v842 = 0;
LABEL_560:
                      if (v430)
                        llvm::MetadataTracking::untrack((uint64_t)(v415 + 112), v430);
                      v431 = (unsigned __int8 *)v842;
                      *v427 = (unsigned __int8 *)v842;
                      if (v431)
                        llvm::MetadataTracking::retrack((uint64_t)&v842, v431, (uint64_t)(v415 + 112));
                      goto LABEL_557;
                    }
                  }
                  llvm::Value::setMetadata(v417, *(_DWORD *)v425, (llvm::MDNode *)v429);
LABEL_557:
                  v425 += 16;
                }
                while (v425 != v426);
              }
              v424 = llvm::Instruction::getSuccessor((llvm::Instruction *)v394, 0);
              v847 = "else";
              v850 = 259;
              llvm::Value::setName((uint64_t ***)v424, (uint64_t)&v847);
              sub_1C4D8AE2C((uint64_t)&v851, v424, *(_QWORD *)(v424 + 48));
              if (++v378 == v138)
                goto LABEL_589;
            }
          }
          v209 = v856;
          LODWORD(v847) = v138;
          if ((int)v138 <= 63)
          {
            switch((_DWORD)v138)
            {
              case 0x20:
                v210 = (_QWORD *)(*(_QWORD *)v856 + 1960);
                goto LABEL_487;
              case 0x10:
                v210 = (_QWORD *)(*(_QWORD *)v856 + 1936);
                goto LABEL_487;
              case 8:
                v210 = (_QWORD *)(*(_QWORD *)v856 + 1912);
                goto LABEL_487;
            }
          }
          else
          {
            if ((_DWORD)v138 == 64)
            {
              v210 = (_QWORD *)(*(_QWORD *)v856 + 1984);
LABEL_487:
              v847 = "scalar_mask";
              v850 = 259;
              v786 = sub_1C4773E38((uint64_t *)&v851, 49, (unsigned __int8 *)v791, (uint64_t)v210, (uint64_t)&v847);
              if ((_DWORD)v138)
                goto LABEL_488;
LABEL_589:
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v21[5] + 5), (uint64_t ***)v21);
              v435 = v21[3];
              v436 = v21[4];
              *v436 = v435;
              v435[1] = v436;
              *(_QWORD *)v775 = 0;
              v21[4] = 0;
              llvm::Value::deleteValue((llvm::Value *)v21);
              a2 = v755;
              *v755 = 1;
LABEL_590:
              v11 = v805;
              v6 = v754;
              a4 = (uint64_t)v835;
              a5 = v836;
              a3 = v766;
              v7 = v753;
              v14 = v756;
              v13 = v757;
              v17 = v763;
              v15 = v764;
              if (v851 == v805)
                goto LABEL_1044;
              v437 = v754;
              v438 = a2;
              free(v851);
              v17 = v763;
              v15 = v764;
              v14 = v756;
              v13 = v757;
              v11 = v805;
              v7 = v753;
              a2 = v438;
              a3 = v766;
              a4 = (uint64_t)v835;
              a5 = v836;
              goto LABEL_1146;
            }
            if ((_DWORD)v138 == 128)
            {
              v210 = (_QWORD *)(*(_QWORD *)v856 + 2008);
              goto LABEL_487;
            }
          }
          v609 = sub_1C5270984(*(_QWORD *)v856 + 2168, &v847);
          v210 = (_QWORD *)*((_QWORD *)v609 + 1);
          if (!v210)
          {
            v610 = v609;
            v210 = (_QWORD *)sub_1C484358C(*(_QWORD *)v209 + 2040, 24, 3);
            v611 = (int)v847;
            *v210 = v209;
            v210[2] = 0;
            v210[1] = (v611 << 8) | 0xDu;
            *((_QWORD *)v610 + 1) = v210;
          }
          goto LABEL_487;
        case 0xBB:
          v102 = &v21[-4 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF)];
          v103 = v102[8];
          v104 = (unint64_t *)(v103 + 3);
          v79 = v16;
          v80 = v13;
          v81 = v12;
          v82 = v10;
          v83 = v9;
          if (*((_DWORD *)v103 + 8) >= 0x41u)
            v104 = (unint64_t *)*v104;
          v105 = **v102;
          v106 = *v104;
          v107 = __clz(v106) ^ 0x3F;
          if (v106)
            v108 = v107;
          else
            v108 = 0;
          if (((*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*a3 + 320))(*a3, v105, v108) & 1) != 0)
          {
LABEL_96:
            LODWORD(v22) = 0;
            v6 = v754;
            a4 = (uint64_t)v835;
            a5 = v836;
            a3 = v766;
            a2 = v755;
            v14 = v756;
            v7 = v753;
            v9 = v83;
            v10 = v82;
            v11 = v805;
            v12 = v81;
            v13 = v80;
            v16 = v79;
LABEL_97:
            v17 = v763;
            goto LABEL_16;
          }
          v118 = (llvm::Instruction **)&v21[-4 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF)];
          v119 = v118[8];
          v120 = (unint64_t *)((char *)v119 + 24);
          v121 = v80;
          if (*((_DWORD *)v119 + 8) >= 0x41u)
            v120 = (unint64_t *)*v120;
          v122 = v83;
          v123 = v81;
          v124 = 0;
          v125 = *v118;
          v126 = (unsigned __int8 *)v118[4];
          v798 = (unsigned __int8 *)v118[12];
          v127 = *v120;
          v128 = __clz(*v120) ^ 0x3F;
          if (v127)
            v129 = v128;
          else
            v129 = 0;
          v130 = *(_QWORD *)v125;
          v819 = v125;
          v827 = *(llvm::Type **)(*(_QWORD *)v125 + 24);
          v131 = (llvm::ConstantInt *)**v21;
          v851 = v805;
          v852 = 0x200000000;
          v856 = v131;
          v857 = v122;
          v761 = v82;
          v762 = v122;
          v858 = v82;
          v859 = 0;
          v860 = 0;
          v861 = 512;
          v862 = 7;
          *v121 = 0;
          v121[1] = 0;
          v759 = v121;
          v760 = v123;
          *v123 = 0;
          v123[1] = 0;
          v864 = &unk_1E8167888;
          v865[0] = v79 + 16;
          v854 = (llvm::Instruction *)v21[5];
          v855 = v21 + 3;
          v785 = v21 + 3;
          v132 = v21[6];
          v847 = v132;
          if (v132)
          {
            llvm::MetadataTracking::track((uint64_t)&v847, (unsigned __int8 *)v132, 2);
            v124 = v847;
          }
          sub_1C4774EF4((uint64_t)&v851, 0, (uint64_t)v124);
          if (v847)
            llvm::MetadataTracking::untrack((uint64_t)&v847, (unsigned __int8 *)v847);
          v133 = (unsigned __int8 *)v21[6];
          v837 = v133;
          if (v133)
          {
            llvm::MetadataTracking::track((uint64_t)&v837, v133, 2);
            v134 = v837;
          }
          else
          {
            v134 = 0;
          }
          sub_1C4774EF4((uint64_t)&v851, 0, (uint64_t)v134);
          if (v837)
            llvm::MetadataTracking::untrack((uint64_t)&v837, v837);
          if (v798[16] <= 0x14u && llvm::Constant::isAllOnesValue((llvm::Constant *)v798))
          {
            v314 = (char *)operator new(0x80uLL);
            v315 = v314;
            *((_DWORD *)v314 + 21) = *((_DWORD *)v314 + 21) & 0x38000000 | 2;
            *(_QWORD *)v314 = 0;
            *((_QWORD *)v314 + 2) = 0;
            *((_QWORD *)v314 + 1) = 0;
            *((_QWORD *)v314 + 5) = 0;
            *((_QWORD *)v314 + 6) = 0;
            *((_QWORD *)v314 + 4) = 0;
            v316 = (unsigned __int8 **)(v314 + 32);
            *((_QWORD *)v314 + 8) = ***(_QWORD ***)v819 + 1576;
            v317 = (llvm::Value *)(v314 + 64);
            *((_QWORD *)v314 + 3) = v314 + 64;
            *((_QWORD *)v314 + 7) = v314 + 64;
            *((_QWORD *)v314 + 9) = 0;
            v314[80] = 61;
            v314[81] = 0;
            *((_WORD *)v314 + 41) = 0;
            *((_DWORD *)v314 + 21) = 2;
            *(_OWORD *)(v314 + 88) = 0u;
            *(_OWORD *)(v314 + 104) = 0u;
            *((_DWORD *)v314 + 30) = 0;
            *(_QWORD *)v314 = v819;
            v319 = (_QWORD *)((char *)v819 + 8);
            v318 = *((_QWORD *)v819 + 1);
            *((_QWORD *)v314 + 1) = v318;
            if (v318)
              *(_QWORD *)(v318 + 16) = v314 + 8;
            *((_QWORD *)v314 + 2) = v319;
            *v319 = v314;
            if (*((_QWORD *)v314 + 4))
            {
              **((_QWORD **)v314 + 6) = *((_QWORD *)v314 + 5);
              v731 = *((_QWORD *)v314 + 5);
              if (v731)
                *(_QWORD *)(v731 + 16) = *((_QWORD *)v314 + 6);
            }
            *v316 = v126;
            if (v126)
            {
              v322 = *((_QWORD *)v126 + 1);
              v321 = (unsigned __int8 ***)(v126 + 8);
              v320 = v322;
              *((_QWORD *)v314 + 5) = v322;
              if (v322)
                *(_QWORD *)(v320 + 16) = v314 + 40;
              *((_QWORD *)v314 + 6) = v321;
              *v321 = v316;
            }
            *((_WORD *)v314 + 41) = 2 * v129;
            v314[124] = 1;
            v850 = 257;
            (*(void (**)(_QWORD *, llvm::Value *, void **, llvm::Instruction *, _QWORD **))(*v858 + 16))(v858, v317, &v847, v854, v855);
            if ((_DWORD)v852)
            {
              v323 = v851;
              v324 = &v851[16 * v852];
              v325 = (unsigned __int8 **)(v315 + 112);
              do
              {
                v326 = *(_DWORD *)v323;
                v327 = (unsigned __int8 *)*((_QWORD *)v323 + 1);
                if (v327)
                {
                  if (!v326)
                  {
                    v842 = (const char *)*((_QWORD *)v323 + 1);
                    llvm::MetadataTracking::track((uint64_t)&v842, v327, 2);
                    v328 = *v325;
                    goto LABEL_407;
                  }
                }
                else
                {
                  v328 = *v325;
                  if (!*v325 && (v315[87] & 0x20) == 0)
                    goto LABEL_404;
                  if (!v326)
                  {
                    v842 = 0;
LABEL_407:
                    if (v328)
                      llvm::MetadataTracking::untrack((uint64_t)(v315 + 112), v328);
                    v329 = (unsigned __int8 *)v842;
                    *v325 = (unsigned __int8 *)v842;
                    if (v329)
                      llvm::MetadataTracking::retrack((uint64_t)&v842, v329, (uint64_t)(v315 + 112));
                    goto LABEL_404;
                  }
                }
                llvm::Value::setMetadata(v317, *(_DWORD *)v323, (llvm::MDNode *)v327);
LABEL_404:
                v323 += 16;
              }
              while (v323 != v324);
            }
LABEL_456:
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v21[5] + 5), (uint64_t ***)v21);
            v366 = v21[3];
            v367 = v21[4];
            *v367 = v366;
            v366[1] = v367;
            *v785 = 0;
            v21[4] = 0;
            llvm::Value::deleteValue((llvm::Value *)v21);
            a2 = v755;
            goto LABEL_1139;
          }
          v331 = llvm::Type::getPrimitiveSizeInBits(v827);
          if ((_DWORD)v330 == 1)
          v332 = *(_DWORD *)(*(_QWORD *)v126 + 8);
          if ((v332 & 0xFE) == 0x12)
            v332 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v126 + 16) + 8);
          v333 = 63 - __clz(((1 << v129) | (v331 >> 3)) & -(uint64_t)((1 << v129) | (v331 >> 3)));
          v334 = llvm::PointerType::get(v827, (llvm::Type *)(v332 >> 8));
          v850 = 257;
          v810 = sub_1C4773E38((uint64_t *)&v851, 49, v126, v334, (uint64_t)&v847);
          v335 = *(unsigned int *)(v130 + 32);
          v336 = (llvm::Constant *)v798;
          if (sub_1C5C30818((llvm::Constant *)v798))
          {
            if (!(_DWORD)v335)
              goto LABEL_456;
            v338 = 0;
            v339 = 2 * (v333 & 0x3F);
            while (1)
            {
              v340 = llvm::Constant::getAggregateElement(v336, (llvm::Type *)v338);
              if ((llvm::Constant::isNullValue(v340) & 1) == 0)
                break;
LABEL_434:
              if (++v338 == v335)
                goto LABEL_456;
            }
            v850 = 257;
            v342 = *(llvm::ConstantInt **)(*(_QWORD *)v856 + 1984);
            v343 = *(_DWORD *)(*(_QWORD *)v856 + 1992);
            v843 = v343 >> 8;
            if (v343 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v842, v338, 0);
            }
            else
            {
              if (v343 <= 0xFF)
                v344 = 0;
              else
                v344 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v343);
              v842 = (const char *)(v344 & v338);
            }
            v345 = llvm::ConstantInt::get(v342, (llvm::LLVMContext *)&v842, v341);
            if (v843 >= 0x41 && v842)
              MEMORY[0x1CAA32F9C](v842, 0x1000C8000313F17);
            v346 = sub_1C4772EE0((uint64_t *)&v851, (uint64_t)v819, (uint64_t)v345, (uint64_t)&v847);
            v850 = 257;
            v347 = sub_1C4772C18((uint64_t *)&v851, v827, v810, v338, (uint64_t)&v847);
            v348 = (char *)operator new(0x80uLL);
            v349 = v348;
            *((_DWORD *)v348 + 21) = *((_DWORD *)v348 + 21) & 0x38000000 | 2;
            *(_QWORD *)v348 = 0;
            *((_QWORD *)v348 + 2) = 0;
            *((_QWORD *)v348 + 1) = 0;
            *((_QWORD *)v348 + 5) = 0;
            *((_QWORD *)v348 + 6) = 0;
            *((_QWORD *)v348 + 4) = 0;
            v350 = (uint64_t ****)(v348 + 32);
            *((_QWORD *)v348 + 8) = ***(_QWORD ***)v346 + 1576;
            v351 = (llvm::Value *)(v348 + 64);
            *((_QWORD *)v348 + 3) = v348 + 64;
            *((_QWORD *)v348 + 7) = v348 + 64;
            *((_QWORD *)v348 + 9) = 0;
            v348[80] = 61;
            v348[81] = 0;
            *((_WORD *)v348 + 41) = 0;
            *((_DWORD *)v348 + 21) = 2;
            *(_OWORD *)(v348 + 88) = 0u;
            *(_OWORD *)(v348 + 104) = 0u;
            *((_DWORD *)v348 + 30) = 0;
            *(_QWORD *)v348 = v346;
            v354 = *((_QWORD *)v346 + 1);
            v353 = v346 + 8;
            v352 = v354;
            *((_QWORD *)v348 + 1) = v354;
            if (v354)
              *(_QWORD *)(v352 + 16) = v348 + 8;
            *((_QWORD *)v348 + 2) = v353;
            *v353 = v348;
            if (*((_QWORD *)v348 + 4))
            {
              **((_QWORD **)v348 + 6) = *((_QWORD *)v348 + 5);
              v365 = *((_QWORD *)v348 + 5);
              if (v365)
                *(_QWORD *)(v365 + 16) = *((_QWORD *)v348 + 6);
            }
            *v350 = v347;
            if (v347)
            {
              v357 = v347[1];
              v356 = (uint64_t *****)(v347 + 1);
              v355 = v357;
              *((_QWORD *)v348 + 5) = v357;
              if (v357)
                v355[2] = (uint64_t *)(v348 + 40);
              *((_QWORD *)v348 + 6) = v356;
              *v356 = v350;
            }
            *((_WORD *)v348 + 41) = v339;
            v348[124] = 1;
            v850 = 257;
            (*(void (**)(_QWORD *, llvm::Value *, void **, llvm::Instruction *, _QWORD **))(*v858 + 16))(v858, v351, &v847, v854, v855);
            if (!(_DWORD)v852)
            {
LABEL_433:
              v336 = (llvm::Constant *)v798;
              goto LABEL_434;
            }
            v358 = v851;
            v359 = &v851[16 * v852];
            v360 = (unsigned __int8 **)(v349 + 112);
            while (1)
            {
              v361 = *(_DWORD *)v358;
              v362 = (unsigned __int8 *)*((_QWORD *)v358 + 1);
              if (v362)
              {
                if (!v361)
                {
                  v842 = (const char *)*((_QWORD *)v358 + 1);
                  llvm::MetadataTracking::track((uint64_t)&v842, v362, 2);
                  v363 = *v360;
                  goto LABEL_447;
                }
              }
              else
              {
                v363 = *v360;
                if (!*v360 && (v349[87] & 0x20) == 0)
                  goto LABEL_444;
                if (!v361)
                {
                  v842 = 0;
LABEL_447:
                  if (v363)
                    llvm::MetadataTracking::untrack((uint64_t)(v349 + 112), v363);
                  v364 = (unsigned __int8 *)v842;
                  *v360 = (unsigned __int8 *)v842;
                  if (v364)
                    llvm::MetadataTracking::retrack((uint64_t)&v842, v364, (uint64_t)(v349 + 112));
                  goto LABEL_444;
                }
              }
              llvm::Value::setMetadata(v351, *(_DWORD *)v358, (llvm::MDNode *)v362);
LABEL_444:
              v358 += 16;
              if (v358 == v359)
                goto LABEL_433;
            }
          }
          if ((_DWORD)v335 == 1)
          {
            v795 = 0;
LABEL_1048:
            v670 = 0;
            v671 = 2 * (v333 & 0x3F);
            while (1)
            {
              if ((_DWORD)v335 == 1)
              {
                v850 = 257;
                v672 = *(llvm::ConstantInt **)(*(_QWORD *)v856 + 1984);
                v673 = *(_DWORD *)(*(_QWORD *)v856 + 1992);
                v843 = v673 >> 8;
                if (v673 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v842, v670, 0);
                }
                else
                {
                  if (v673 <= 0xFF)
                    v674 = 0;
                  else
                    v674 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v673);
                  v842 = (const char *)(v674 & v670);
                }
                v675 = llvm::ConstantInt::get(v672, (llvm::LLVMContext *)&v842, v337);
                if (v843 >= 0x41 && v842)
                  MEMORY[0x1CAA32F9C](v842, 0x1000C8000313F17);
                v676 = (llvm::Value *)sub_1C4772EE0((uint64_t *)&v851, (uint64_t)v798, (uint64_t)v675, (uint64_t)&v847);
                goto LABEL_1078;
              }
              if (*v835)
                v677 = v335 + ~(_DWORD)v670;
              else
                v677 = v670;
              LODWORD(v848) = v335;
              if (v335 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v847, 0, 0);
                v679 = 1 << v677;
                if (v848 > 0x40)
                {
                  *((_QWORD *)v847 + (v677 >> 6)) |= v679;
                  goto LABEL_1063;
                }
                v678 = (unint64_t)v847;
              }
              else
              {
                v678 = 0;
                v679 = 1 << v677;
              }
              v847 = (void *)(v678 | v679);
LABEL_1063:
              v680 = llvm::ConstantInt::get(v856, (llvm::LLVMContext *)&v847, v337);
              if (v848 >= 0x41 && v847)
                MEMORY[0x1CAA32F9C](v847, 0x1000C8000313F17);
              v850 = 257;
              v682 = sub_1C4D89BCC((uint64_t)&v851, v795, (uint64_t)v680, (uint64_t)&v847);
              v683 = v856;
              LODWORD(v842) = v335;
              if ((int)v335 <= 63)
              {
                if ((int)v335 <= 31)
                {
                  if ((_DWORD)v335 == 16)
                  {
                    v684 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 1936);
                  }
                  else
                  {
                    if ((_DWORD)v335 != 8)
                    {
LABEL_1121:
                      v719 = sub_1C5270984(*(_QWORD *)v856 + 2168, &v842);
                      v684 = (llvm::ConstantInt **)*((_QWORD *)v719 + 1);
                      if (!v684)
                      {
                        v684 = (llvm::ConstantInt **)sub_1C484358C(*(_QWORD *)v683 + 2040, 24, 3);
                        v720 = (int)v842;
                        *v684 = v683;
                        v684[2] = 0;
                        v684[1] = (llvm::ConstantInt *)((v720 << 8) | 0xDu);
                        *((_QWORD *)v719 + 1) = v684;
                      }
                      goto LABEL_1074;
                    }
                    v684 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 1912);
                  }
                }
                else
                {
                  if ((_DWORD)v335 != 32)
                    goto LABEL_1121;
                  v684 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 1960);
                }
              }
              else if ((_DWORD)v335 == 64)
              {
                v684 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 1984);
              }
              else
              {
                if ((_DWORD)v335 != 128)
                  goto LABEL_1121;
                v684 = (llvm::ConstantInt **)(*(_QWORD *)v856 + 2008);
              }
LABEL_1074:
              v685 = *v684;
              v843 = *((_DWORD *)v684 + 2) >> 8;
              if (v843 > 0x40)
                llvm::APInt::initSlowCase((llvm::APInt *)&v842, 0, 0);
              else
                v842 = 0;
              v686 = llvm::ConstantInt::get(v685, (llvm::LLVMContext *)&v842, v681);
              if (v843 >= 0x41 && v842)
                MEMORY[0x1CAA32F9C](v842, 0x1000C8000313F17);
              v845 = 257;
              v676 = (llvm::Value *)sub_1C4774B48((uint64_t)&v851, 33, v682, (uint64_t)v686, (uint64_t)&v842);
LABEL_1078:
              v687 = sub_1C5EBFBC0(v676, (uint64_t *)v21, 0, 0, v836, 0, 0, 0);
              v688 = *((_QWORD *)v687 + 5);
              v847 = "cond.store";
              v850 = 259;
              llvm::Value::setName((uint64_t ***)v688, (uint64_t)&v847);
              v689 = 0;
              v690 = *(_QWORD *)(v688 + 40);
              if (v690)
                v691 = v690 - 24;
              else
                v691 = 0;
              if (*(unsigned __int8 *)(v691 + 16) - 29 >= 0xB)
                v691 = 0;
              v854 = *(llvm::Instruction **)(v691 + 40);
              v855 = (_QWORD **)(v691 + 24);
              v692 = *(void **)(v691 + 48);
              v847 = v692;
              if (v692)
              {
                llvm::MetadataTracking::track((uint64_t)&v847, (unsigned __int8 *)v692, 2);
                v689 = v847;
              }
              sub_1C4774EF4((uint64_t)&v851, 0, (uint64_t)v689);
              if (v847)
                llvm::MetadataTracking::untrack((uint64_t)&v847, (unsigned __int8 *)v847);
              v850 = 257;
              v694 = *(llvm::ConstantInt **)(*(_QWORD *)v856 + 1984);
              v695 = *(_DWORD *)(*(_QWORD *)v856 + 1992);
              v843 = v695 >> 8;
              if (v695 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v842, v670, 0);
              }
              else
              {
                if (v695 <= 0xFF)
                  v696 = 0;
                else
                  v696 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v695);
                v842 = (const char *)(v696 & v670);
              }
              v697 = llvm::ConstantInt::get(v694, (llvm::LLVMContext *)&v842, v693);
              if (v843 >= 0x41 && v842)
                MEMORY[0x1CAA32F9C](v842, 0x1000C8000313F17);
              v698 = sub_1C4772EE0((uint64_t *)&v851, (uint64_t)v819, (uint64_t)v697, (uint64_t)&v847);
              v850 = 257;
              v699 = sub_1C4772C18((uint64_t *)&v851, v827, v810, v670, (uint64_t)&v847);
              v700 = (char *)operator new(0x80uLL);
              v701 = v700;
              *((_DWORD *)v700 + 21) = *((_DWORD *)v700 + 21) & 0x38000000 | 2;
              *(_QWORD *)v700 = 0;
              *((_QWORD *)v700 + 2) = 0;
              *((_QWORD *)v700 + 1) = 0;
              *((_QWORD *)v700 + 5) = 0;
              *((_QWORD *)v700 + 6) = 0;
              *((_QWORD *)v700 + 4) = 0;
              v702 = (uint64_t ****)(v700 + 32);
              *((_QWORD *)v700 + 8) = ***(_QWORD ***)v698 + 1576;
              v703 = (llvm::Value *)(v700 + 64);
              *((_QWORD *)v700 + 3) = v700 + 64;
              *((_QWORD *)v700 + 7) = v700 + 64;
              *((_QWORD *)v700 + 9) = 0;
              v700[80] = 61;
              v700[81] = 0;
              *((_WORD *)v700 + 41) = 0;
              *((_DWORD *)v700 + 21) = 2;
              *(_OWORD *)(v700 + 88) = 0u;
              *(_OWORD *)(v700 + 104) = 0u;
              *((_DWORD *)v700 + 30) = 0;
              *(_QWORD *)v700 = v698;
              v706 = *((_QWORD *)v698 + 1);
              v705 = v698 + 8;
              v704 = v706;
              *((_QWORD *)v700 + 1) = v706;
              if (v706)
                *(_QWORD *)(v704 + 16) = v700 + 8;
              *((_QWORD *)v700 + 2) = v705;
              *v705 = v700;
              if (*((_QWORD *)v700 + 4))
              {
                **((_QWORD **)v700 + 6) = *((_QWORD *)v700 + 5);
                v721 = *((_QWORD *)v700 + 5);
                if (v721)
                  *(_QWORD *)(v721 + 16) = *((_QWORD *)v700 + 6);
              }
              *v702 = v699;
              if (v699)
              {
                v709 = v699[1];
                v708 = (uint64_t *****)(v699 + 1);
                v707 = v709;
                *((_QWORD *)v700 + 5) = v709;
                if (v709)
                  v707[2] = (uint64_t *)(v700 + 40);
                *((_QWORD *)v700 + 6) = v708;
                *v708 = v702;
              }
              *((_WORD *)v700 + 41) = v671;
              v700[124] = 1;
              v850 = 257;
              (*(void (**)(_QWORD *, llvm::Value *, void **, llvm::Instruction *, _QWORD **))(*v858 + 16))(v858, v703, &v847, v854, v855);
              if ((_DWORD)v852)
              {
                v711 = (llvm::Constant *)v851;
                v712 = (llvm::Constant *)&v851[16 * v852];
                v713 = (llvm::Constant *)(v701 + 112);
                do
                {
                  v714 = *(_DWORD *)v711;
                  v715 = (unsigned __int8 *)*((_QWORD *)v711 + 1);
                  if (v715)
                  {
                    if (!v714)
                    {
                      v842 = (const char *)*((_QWORD *)v711 + 1);
                      v781 = v713;
                      llvm::MetadataTracking::track((uint64_t)&v842, v715, 2);
                      v713 = v781;
                      v716 = *(unsigned __int8 **)v781;
                      goto LABEL_1113;
                    }
                  }
                  else
                  {
                    v716 = *(unsigned __int8 **)v713;
                    if (!*(_QWORD *)v713 && (v701[87] & 0x20) == 0)
                      goto LABEL_1110;
                    if (!v714)
                    {
                      v842 = 0;
LABEL_1113:
                      if (v716)
                      {
                        v783 = v713;
                        llvm::MetadataTracking::untrack((uint64_t)v713, v716);
                        v713 = v783;
                      }
                      v718 = (unsigned __int8 *)v842;
                      *(_QWORD *)v713 = v842;
                      if (v718)
                      {
                        v782 = v713;
                        llvm::MetadataTracking::retrack((uint64_t)&v842, v718, (uint64_t)v713);
                        v713 = v782;
                      }
                      goto LABEL_1110;
                    }
                  }
                  v780 = v712;
                  v717 = v713;
                  llvm::Value::setMetadata(v703, *(_DWORD *)v711, (llvm::MDNode *)v715);
                  v713 = v717;
                  v712 = v780;
LABEL_1110:
                  v711 = (llvm::Constant *)((char *)v711 + 16);
                }
                while (v711 != v712);
              }
              v710 = llvm::Instruction::getSuccessor((llvm::Instruction *)v687, 0);
              v847 = "else";
              v850 = 259;
              llvm::Value::setName((uint64_t ***)v710, (uint64_t)&v847);
              sub_1C4D8AE2C((uint64_t)&v851, v710, *(_QWORD *)(v710 + 48));
              if (++v670 == v335)
                goto LABEL_1138;
            }
          }
          v374 = v856;
          LODWORD(v847) = v335;
          if ((int)v335 <= 63)
          {
            switch((_DWORD)v335)
            {
              case 0x20:
                v375 = (_QWORD *)(*(_QWORD *)v856 + 1960);
                goto LABEL_1047;
              case 0x10:
                v375 = (_QWORD *)(*(_QWORD *)v856 + 1936);
                goto LABEL_1047;
              case 8:
                v375 = (_QWORD *)(*(_QWORD *)v856 + 1912);
                goto LABEL_1047;
            }
          }
          else
          {
            if ((_DWORD)v335 == 64)
            {
              v375 = (_QWORD *)(*(_QWORD *)v856 + 1984);
LABEL_1047:
              v847 = "scalar_mask";
              v850 = 259;
              v795 = sub_1C4773E38((uint64_t *)&v851, 49, v798, (uint64_t)v375, (uint64_t)&v847);
              if ((_DWORD)v335)
                goto LABEL_1048;
LABEL_1138:
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v21[5] + 5), (uint64_t ***)v21);
              v722 = v21[3];
              v723 = v21[4];
              *v723 = v722;
              v722[1] = v723;
              *v785 = 0;
              v21[4] = 0;
              llvm::Value::deleteValue((llvm::Value *)v21);
              a2 = v755;
              *v755 = 1;
LABEL_1139:
              v11 = v805;
              v6 = v754;
              a5 = v836;
              a3 = v766;
              v7 = v753;
              v14 = v756;
              v13 = v759;
              v17 = v763;
              v15 = v764;
              if (v851 == v805)
                goto LABEL_1140;
              v493 = v754;
              v730 = a2;
              free(v851);
              v14 = v756;
              v13 = v759;
              v11 = v805;
              v7 = v753;
              v17 = v763;
              a2 = v730;
              a3 = v766;
              a5 = v836;
              goto LABEL_1148;
            }
            if ((_DWORD)v335 == 128)
            {
              v375 = (_QWORD *)(*(_QWORD *)v856 + 2008);
              goto LABEL_1047;
            }
          }
          v669 = sub_1C5270984(*(_QWORD *)v856 + 2168, &v847);
          v375 = (_QWORD *)*((_QWORD *)v669 + 1);
          if (!v375)
          {
            v726 = v669;
            v375 = (_QWORD *)sub_1C484358C(*(_QWORD *)v374 + 2040, 24, 3);
            v727 = (int)v847;
            *v375 = v374;
            v375[2] = 0;
            v375[1] = (v727 << 8) | 0xDu;
            *((_QWORD *)v726 + 1) = v375;
          }
          goto LABEL_1047;
        default:
          goto LABEL_15;
      }
    }
LABEL_17:
    v8 = v18;
  }
  while (!*a2);
  LOBYTE(v6) = 1;
  return v6 & 1;
}

uint64_t sub_1C5C30818(llvm::Constant *this)
{
  uint64_t result;
  int v3;
  llvm::Type *v4;

  result = 0;
  if (this && *((unsigned __int8 *)this + 16) <= 0x14u)
  {
    v3 = *(_DWORD *)(*(_QWORD *)this + 32);
    if (v3)
    {
      v4 = 0;
      while (1)
      {
        result = (uint64_t)llvm::Constant::getAggregateElement(this, v4);
        if (!result)
          break;
        if (*(_BYTE *)(result + 16) != 16)
          return 0;
        v4 = (llvm::Type *)((_DWORD)v4 + 1);
        if (v3 == (_DWORD)v4)
          return 1;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_1C5C30894(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v2);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "Split GEPs to a variadic base and a constant offset for better CSE";
  *(_QWORD *)(v3 + 8) = 66;
  *(_QWORD *)(v3 + 16) = "separate-const-offset-from-gep";
  *(_QWORD *)(v3 + 24) = 30;
  *(_QWORD *)(v3 + 32) = &unk_1ED822E18;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5C33628;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C5C30948(uint64_t a1, char a2)
{
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED822E18;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81977C8;
  *(_BYTE *)(a1 + 28) = a2;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED822E20);
  if (v4 != -1)
  {
    v8[0] = sub_1C5C30894;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED822E20, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t llvm::SeparateConstOffsetFromGEPPass::run@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ResultImpl;
  char v12;
  char v13;
  _QWORD v15[7];
  char v16;
  _QWORD v17[2];
  int v18;
  _QWORD v19[2];
  int v20;
  uint64_t v21;

  v8 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::DominatorTreeAnalysis::Key, a2) + 8;
  v9 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::ScalarEvolutionAnalysis::Key, a2) + 8;
  v10 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::LoopAnalysis::Key, a2) + 8;
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::TargetLibraryAnalysis::Key, a2);
  v21 = a3;
  v12 = *a1;
  v15[0] = 0;
  v15[1] = v8;
  v15[2] = v9;
  v15[3] = v10;
  v15[4] = ResultImpl + 8;
  v15[5] = sub_1C5C34B50;
  v15[6] = &v21;
  v16 = v12;
  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  v19[0] = 0;
  v19[1] = 0;
  v20 = 0;
  v13 = sub_1C5C30B84((uint64_t)v15, a2);
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  if ((v13 & 1) != 0)
    sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::CFGAnalyses::SetKey);
  else
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  sub_1C63261C4((uint64_t)v19);
  MEMORY[0x1CAA32FB4](v19[0], 8);
  sub_1C63261C4((uint64_t)v17);
  return MEMORY[0x1CAA32FB4](v17[0], 8);
}

uint64_t sub_1C5C30B84(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t ***v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t ***v24;
  llvm::Value **v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t **v30;
  uint64_t ***v31;
  _QWORD **v32;
  _QWORD **v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t ***v37;
  int v38;
  uint64_t v39;
  int v40;
  _QWORD ***v41;
  _QWORD **v42;
  _QWORD *v43;
  _QWORD *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  llvm::DataLayout *v49;
  unint64_t v50;
  llvm::UndefValue *AggregateElement;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  BOOL v58;
  const char *v59;
  char v60;
  char v61;
  _QWORD *v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t ***v66;
  uint64_t v67;
  char v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned __int8 *v72;
  uint64_t *v73;
  int v74;
  uint64_t **v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t **v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  BOOL v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  unsigned __int8 *v93;
  uint64_t v94;
  unsigned int v95;
  llvm::Value **v96;
  int v97;
  int64_t v98;
  BOOL v99;
  unint64_t v100;
  unsigned int v101;
  uint64_t v102;
  llvm::Value **v103;
  uint64_t ***v104;
  llvm::Value ***v105;
  llvm::Value **v106;
  llvm::Value *v107;
  llvm::Value ****v108;
  llvm::Value *v109;
  void (**v110)(void);
  void (**v111)(void);
  unsigned int v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t **v117;
  uint64_t **v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  BOOL v124;
  const char *v125;
  char v126;
  char v127;
  int64_t v128;
  llvm::ConstantInt *v129;
  llvm::ConstantInt *v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  llvm::Value *v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  char *v141;
  uint64_t **v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  char *v150;
  _DWORD *v151;
  uint64_t v152;
  llvm::Type *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t ****v158;
  uint64_t ***v159;
  int v160;
  int v161;
  unsigned __int8 *v162;
  uint64_t v163;
  unsigned __int8 *v164;
  _QWORD *v165;
  uint64_t v166;
  int v167;
  int v168;
  uint64_t ***v169;
  uint64_t v170;
  unint64_t v171;
  int v172;
  int v173;
  uint64_t ***v174;
  uint64_t ***v175;
  llvm::Value **v176;
  llvm::GetElementPtrInst *v177;
  unsigned __int8 *v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  BOOL v183;
  llvm::APInt *v184;
  unsigned int v185;
  unint64_t v186;
  llvm::DataLayout *v187;
  unint64_t v188;
  llvm::UndefValue *v189;
  BOOL v190;
  unsigned int *v191;
  unsigned int *v192;
  unsigned int *v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  BOOL v197;
  const char *v198;
  const llvm::APInt *v199;
  char v200;
  char v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint8x8_t v205;
  int v206;
  int v207;
  int64_t v208;
  uint64_t v209;
  unint64_t v210;
  int v211;
  int v212;
  llvm::Value *v213;
  unint64_t v214;
  int8x8_t v215;
  uint8x8_t v216;
  int v217;
  unint64_t v218;
  llvm::Value **v219;
  uint64_t v220;
  llvm::Value **v221;
  llvm::GetElementPtrInst *v222;
  uint64_t ***v223;
  uint64_t v224;
  uint64_t v225;
  llvm::Value **v226;
  llvm::Value *v227;
  char *v228;
  char *v229;
  llvm::Value ***v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  llvm::Value *v234;
  llvm::Value ****v235;
  llvm::Value *v236;
  char *v237;
  char *v238;
  unsigned __int8 **v239;
  int v240;
  unsigned __int8 *v241;
  unsigned __int8 *v242;
  unsigned __int8 *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  BOOL v247;
  llvm::APInt *v248;
  unsigned int v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  llvm::UndefValue *v253;
  BOOL v254;
  unsigned int *v255;
  unsigned int *v256;
  unsigned int *v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  BOOL v261;
  const char *v262;
  const llvm::APInt *v263;
  char v264;
  char v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  uint8x8_t v269;
  int v270;
  int v271;
  int64_t v272;
  uint64_t v273;
  unint64_t v274;
  int v275;
  int v276;
  int8x8_t *v277;
  unint64_t v278;
  int8x8_t v279;
  uint8x8_t v280;
  int v281;
  unint64_t v282;
  llvm::Value **v283;
  uint64_t v284;
  llvm::Value **v285;
  char *v286;
  char *v287;
  uint64_t *v288;
  uint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t **v293;
  uint64_t v294;
  char *v295;
  char *v296;
  unsigned __int8 **v297;
  int v298;
  unsigned __int8 *v299;
  unsigned __int8 *v300;
  unsigned __int8 *v301;
  uint64_t v302;
  int v303;
  unsigned __int8 *v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  _QWORD *v308;
  _QWORD *v309;
  uint64_t v310;
  unsigned int v311;
  int v312;
  uint64_t *v313;
  llvm::GetElementPtrInst *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t ****v319;
  uint64_t ***v320;
  int v321;
  int v322;
  llvm::Type *v323;
  unsigned __int8 *v324;
  uint64_t **v325;
  uint64_t **v326;
  uint64_t *v327;
  uint64_t ***v328;
  uint64_t v329;
  char *v330;
  uint64_t v331;
  uint64_t ***v332;
  uint64_t v333;
  char *v334;
  uint64_t v335;
  char *v336;
  uint64_t v337;
  unsigned int v338;
  char *v339;
  uint64_t **v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  _QWORD *v344;
  uint64_t v345;
  _QWORD *v346;
  uint64_t v347;
  char *v348;
  uint64_t **v349;
  uint64_t **v350;
  uint64_t *v351;
  llvm::ValueSymbolTable *v352;
  uint64_t *v353;
  llvm::ValueSymbolTable *v354;
  uint64_t *v355;
  llvm::ValueSymbolTable *v356;
  uint64_t v357;
  uint64_t v358;
  _QWORD *v359;
  uint64_t v360;
  uint64_t v361;
  _QWORD *v362;
  uint64_t v363;
  uint64_t v364;
  unsigned __int8 *v365;
  _QWORD *v366;
  uint64_t v367;
  _QWORD *v368;
  uint64_t v369;
  uint64_t v370;
  llvm::DataLayout *v371;
  uint64_t v372;
  llvm::Value *v373;
  _BOOL4 ObjectSize;
  unsigned int v375;
  llvm::Value ***v376;
  int v377;
  int64_t v378;
  unint64_t v379;
  unsigned int v380;
  llvm::Type *v381;
  uint64_t **v382;
  uint64_t **v383;
  char *v384;
  _QWORD *v385;
  _QWORD *v386;
  uint64_t v387;
  char *v388;
  _QWORD *v389;
  _QWORD *v390;
  uint64_t v391;
  uint64_t v392;
  _WORD *v393;
  const void *v394;
  void *v395;
  int v396;
  unsigned int v397;
  _WORD *v398;
  void *v399;
  void *v400;
  unsigned int v401;
  unsigned int v402;
  char v403;
  char *v404;
  char *v405;
  char *v406;
  int v407;
  BOOL v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  int v414;
  llvm::ScalarEvolution *v415;
  unint64_t Unknown;
  unint64_t v417;
  uint64_t AddExpr;
  uint64_t v419;
  uint64_t v420;
  int v421;
  llvm::ScalarEvolution *v422;
  unint64_t v423;
  unint64_t v424;
  const llvm::Value *v425;
  uint64_t v426;
  _DWORD *v427;
  llvm::Value *v428;
  uint64_t v429;
  llvm::Value *v430;
  void (*v431)(void);
  unsigned int v432;
  unsigned int v433;
  unint64_t v434;
  int v435;
  unsigned int v437;
  unsigned int v438;
  llvm::Value *v439;
  int v440;
  llvm::Value **v441;
  int v442;
  llvm::Value **v443;
  llvm::Value *v444;
  int v445;
  llvm::ScalarEvolution *v446;
  unint64_t v447;
  unint64_t v448;
  void *v449;
  uint64_t v450;
  int v451;
  llvm::ScalarEvolution *v452;
  unint64_t v453;
  unint64_t v454;
  void *v455;
  _QWORD *v456;
  _QWORD *v457;
  unint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t i;
  llvm::Value *v463;
  unsigned int v464;
  llvm::raw_ostream *v465;
  llvm::raw_ostream *v466;
  uint64_t v468;
  int v469;
  uint64_t v470;
  unsigned int *v471;
  int v472;
  uint64_t *v473;
  uint64_t v474;
  int v475;
  char v476;
  uint64_t v477;
  uint64_t v478;
  int v479;
  char v480;
  unsigned int *v481;
  uint64_t *v482;
  llvm::ConstantInt *v483;
  uint64_t v485;
  uint64_t v486;
  _WORD *v487;
  uint64_t v488;
  unsigned int v489;
  unsigned int v490;
  int v491;
  _WORD v492[32];
  char *v493;
  char *v494;
  uint64_t v495;
  llvm::Value **v496;
  llvm::Value **v497;
  uint64_t v498;
  int v499;
  _WORD v500[32];
  void *__p;
  char *v502;
  uint64_t v503;
  _QWORD ***v504;
  uint64_t v505;
  unsigned __int8 *v506;
  unsigned int v507;
  llvm::Value *v508;
  uint64_t v509;
  unsigned __int8 *v510;
  void *v511;
  uint64_t v512;
  unint64_t v513;
  void **v514;
  __int16 v515;
  llvm::Value *v516[3];
  llvm::Value **v517;
  void *v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  char v523;
  uint64_t v524;
  uint64_t v525;
  llvm::Value ***v526;
  uint64_t v527;
  void *v528;
  uint64_t v529;
  void *v530;
  _BYTE *v531;
  void *v532;
  void *__src;
  unsigned int v534;
  unsigned int v535;
  int v536;
  void *v537;
  _BYTE *v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;

  v541 = *MEMORY[0x1E0C80C00];
  if (byte_1ED822EA8)
  {
    v2 = 0;
    return v2 & 1;
  }
  v4 = a1;
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 40) + 272;
  v5 = *(_QWORD *)(a2 + 80);
  v474 = a2 + 72;
  v6 = 0;
  if (v5 != a2 + 72)
  {
    while (1)
    {
      v7 = v5 ? v5 - 24 : 0;
      v477 = v5;
      if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(*(_QWORD *)(v4 + 8), v7))
      {
        v8 = v7 + 40;
        v9 = *(_QWORD *)(v7 + 48);
        if (v9 != v7 + 40)
          break;
      }
LABEL_477:
      v5 = *(_QWORD *)(v477 + 8);
      if (v5 == v474)
        goto LABEL_478;
    }
    v10 = v7 + 40;
    v478 = v8;
    while (1)
    {
      v11 = v9;
      v9 = *(_QWORD *)(v9 + 8);
      v12 = v11 - 24;
      if (!v11)
        v12 = 0;
      v13 = *(unsigned __int8 *)(v12 + 16);
      if (v13 == 62)
        v14 = (uint64_t ***)v12;
      else
        v14 = 0;
      if (v11 && v13 == 62)
      {
        v486 = v9;
        if (((_DWORD)(*v14)[1] & 0xFE) == 0x12 || (v15 = *((_DWORD *)v14 + 5) & 0x7FFFFFF, (_DWORD)v15 == 1))
        {
LABEL_23:
          v17 = 0;
          goto LABEL_24;
        }
        v16 = 1;
        while (*((_BYTE *)(&v14[4 * v16])[-4 * v15] + 16) == 16)
        {
          if ((_DWORD)v15 == ++v16)
            goto LABEL_23;
        }
        llvm::DataLayout::getIntPtrType(*(llvm::DataLayout **)v4, (llvm::Type *)*v14);
        v19 = v18;
        v20 = *((unsigned __int8 *)v14 + 16);
        v21 = 8;
        if (v20 != 62)
          v21 = 3;
        v22 = *((_DWORD *)v14 + 5);
        if ((v22 & 0x40000000) != 0)
        {
          v24 = (uint64_t ***)*(v14 - 1);
          v23 = -(uint64_t)(v22 & 0x7FFFFFF);
        }
        else
        {
          v23 = -(uint64_t)(v22 & 0x7FFFFFF);
          v24 = &v14[-4 * (v22 & 0x7FFFFFF)];
        }
        v25 = (llvm::Value **)((unint64_t)v14[v21] | 4);
        v496 = (llvm::Value **)(v24 + 4);
        v497 = v25;
        if (&v14[4 * v23 + 4] == v14)
        {
          v17 = 0;
        }
        else
        {
          v17 = 0;
          v26 = 4 * v23;
          do
          {
            if ((v497 & 4) != 0)
            {
              v27 = (uint64_t **)&v14[v26 + 4];
              v28 = *v27;
              if (**v27 != v19)
              {
                v518 = "idxprom";
                LOWORD(v522) = 259;
                llvm::CastInst::CreateIntegerCast(v28, v19, 1);
                if (*v27)
                {
                  *v14[v26 + 6] = (uint64_t *)v14[v26 + 5];
                  v30 = v14[v26 + 5];
                  if (v30)
                    v30[2] = (uint64_t *)v14[v26 + 6];
                }
                *v27 = v29;
                if (v29)
                {
                  v33 = (_QWORD **)v29[1];
                  v31 = (uint64_t ***)(v29 + 1);
                  v32 = v33;
                  v14[v26 + 5] = v33;
                  if (v33)
                    v32[2] = &v14[v26 + 5];
                  v14[v26 + 6] = (uint64_t **)v31;
                  *v31 = v27;
                }
                v17 = 1;
              }
            }
            sub_1C4774E38((uint64_t)&v496);
            v26 += 4;
          }
          while (v26 != -4);
          v20 = *((unsigned __int8 *)v14 + 16);
          v22 = *((_DWORD *)v14 + 5);
          v10 = v478;
        }
        v473 = (uint64_t *)(v14 + 3);
        if (v20 == 62)
          v34 = (uint64_t *)(v14 + 8);
        else
          v34 = (uint64_t *)(v14 + 3);
        v35 = *v34;
        v4 = a1;
        if ((v22 & 0x40000000) != 0)
        {
          v37 = (uint64_t ***)*(v14 - 1);
          LODWORD(v36) = v22 & 0x7FFFFFF;
        }
        else
        {
          v36 = v22 & 0x7FFFFFF;
          v37 = &v14[-4 * v36];
        }
        v487 = v37 + 4;
        v488 = v35 | 4;
        v38 = v36 - 1;
        if ((_DWORD)v36 != 1)
        {
          v475 = v6;
          v39 = 0;
          v40 = 0;
          v41 = v14 + 4;
          v479 = v17;
          do
          {
            if ((v488 & 4) != 0)
            {
              v45 = (unsigned __int8 *)v41[-4 * (*((_DWORD *)v14 + 5) & 0x7FFFFFF)];
              v46 = *(_QWORD *)(v4 + 8);
              v518 = &v520;
              v519 = 0x800000000;
              v528 = &v530;
              v529 = 0x1000000000;
              v538 = v14;
              v539 = v14[5][7][5] + 272;
              v540 = v46;
              sub_1C5C33BF0((const void **)&v496, (uint64_t)&v518, v45, 0, 0, (*((unsigned __int8 *)v14 + 17) >> 1) & 1);
              if (v497 > 0x40)
              {
                v47 = (uint64_t)*v496;
                MEMORY[0x1CAA32F9C]();
              }
              else
              {
                v47 = (uint64_t)((_QWORD)v496 << -(uint64_t)v497) >> -(uint64_t)v497;
              }
              if (v528 != &v530)
                free(v528);
              if (v518 != &v520)
                free(v518);
              if (v47)
              {
                v48 = v39;
                v49 = *(llvm::DataLayout **)v4;
                v50 = v488 & 0xFFFFFFFFFFFFFFF8;
                if ((v488 & 4) == 0 || !v50)
                {
                  AggregateElement = *(llvm::UndefValue **)v487;
                  if (!*(_QWORD *)v487 || *((_BYTE *)AggregateElement + 16) != 16)
                    AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
                  v54 = (unsigned int *)*((_QWORD *)AggregateElement + 3);
                  v52 = (unsigned int *)((char *)AggregateElement + 24);
                  v53 = v54;
                  if (v52[2] < 0x41)
                    v53 = v52;
                  v50 = *(_QWORD *)(*(_QWORD *)(v50 + 16) + 8 * *v53);
                }
                sub_1C4768AD0((uint64_t)v49, v50);
                v56 = v55;
                v58 = v57 == 1;
                llvm::DataLayout::getAlignment((uint64_t)v49, v50);
                v61 = v60;
                if (v58)
                v39 = (((1 << v61) + ((unint64_t)(v56 + 7) >> 3) - 1) & -(1 << v61)) * v47 + v48;
                v40 = 1;
                v4 = a1;
                v17 = v479;
              }
            }
            else if (*(_BYTE *)(v4 + 56))
            {
              v42 = v41[-4 * (*((_DWORD *)v14 + 5) & 0x7FFFFFF)];
              v43 = v42 + 3;
              if (*((_DWORD *)v42 + 8) >= 0x41u)
                v43 = (_QWORD *)*v43;
              if (*v43)
              {
                v44 = (_QWORD *)*v43;
                v39 += *((_QWORD *)llvm::DataLayout::getStructLayout(*(llvm::DataLayout **)v4, (llvm::StructType *)(v488 & 0xFFFFFFFFFFFFFFF8))+ v44+ 2);
                v40 = 1;
              }
            }
            sub_1C4774E38((uint64_t)&v487);
            v41 += 4;
            --v38;
          }
          while (v38);
          v6 = v475;
          if (!v40)
          {
            v10 = v478;
            goto LABEL_24;
          }
          v470 = v39;
          v62 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(v4 + 40))(*(_QWORD *)(v4 + 48), v14[5][7]);
          v10 = v478;
          if (*(_BYTE *)(v4 + 56) || (*(unsigned int (**)(void))(*(_QWORD *)*v62 + 264))())
          {
            v63 = 3;
            if (*((_BYTE *)v14 + 16) == 62)
              v63 = 8;
            v64 = *((_DWORD *)v14 + 5);
            if ((v64 & 0x40000000) != 0)
            {
              v66 = (uint64_t ***)*(v14 - 1);
              v65 = v64 & 0x7FFFFFF;
            }
            else
            {
              v65 = v64 & 0x7FFFFFF;
              v66 = &v14[-4 * (v64 & 0x7FFFFFF)];
            }
            v67 = (unint64_t)v14[v63] | 4;
            v504 = v66 + 4;
            v505 = v67;
            if (v65 == 1)
            {
LABEL_92:
              v68 = *((_BYTE *)v14 + 17);
              *((_BYTE *)v14 + 17) = v68 & 0xFD;
              v4 = a1;
              if (!*(_BYTE *)(a1 + 56))
              {
                v10 = v478;
                if (!v470)
                  goto LABEL_468;
                llvm::Instruction::clone((llvm::Instruction *)v14);
                v116 = (_QWORD *)v115;
                v117 = v14[5];
                *(_QWORD *)(v115 + 40) = v117;
                *((_WORD *)v117 + 9) &= ~0x8000u;
                if ((*(_BYTE *)(v115 + 23) & 0x10) != 0)
                {
                  v351 = v117[7];
                  if (v351)
                  {
                    v352 = (llvm::ValueSymbolTable *)v351[13];
                    if (v352)
                      llvm::ValueSymbolTable::reinsertValue(v352, (llvm::Value *)v116);
                  }
                }
                v118 = v14[3];
                v116[3] = v118;
                v116[4] = v473;
                v118[1] = v116 + 3;
                v14[3] = (uint64_t **)(v116 + 3);
                v119 = *(_QWORD *)a1;
                v120 = (uint64_t)v14[9];
                sub_1C4768AD0(*(_QWORD *)a1, v120);
                v122 = v121;
                v124 = v123 == 1;
                llvm::DataLayout::getAlignment(v119, v120);
                v127 = v126;
                if (v124)
                v480 = v68 & 2;
                v128 = ((1 << v127) + ((unint64_t)(v122 + 7) >> 3) - 1) & -(1 << v127);
                llvm::DataLayout::getIntPtrType(*(llvm::DataLayout **)a1, (llvm::Type *)*v14);
                v130 = v129;
                if (v470 % v128)
                {
                  v131 = (uint64_t)*v14[-4 * (*((_DWORD *)v14 + 5) & 0x7FFFFFF)];
                  v132 = *(_DWORD *)(v131 + 8);
                  if ((v132 & 0xFE) == 0x12)
                    v132 = *(_DWORD *)(**(_QWORD **)(v131 + 16) + 8);
                  v133 = llvm::PointerType::get((llvm::PointerType *)(***v14 + 1912), (llvm::Type *)(v132 >> 8));
                  v134 = (char *)operator new(0x60uLL);
                  *((_DWORD *)v134 + 13) = *((_DWORD *)v134 + 13) & 0x38000000 | 1;
                  *(_QWORD *)v134 = 0;
                  *((_QWORD *)v134 + 1) = 0;
                  *((_QWORD *)v134 + 2) = 0;
                  *((_QWORD *)v134 + 3) = v134 + 32;
                  LOWORD(v522) = 257;
                  llvm::BitCastInst::BitCastInst((uint64_t)(v134 + 32), (uint64_t)v116, v133, (uint64_t)&v518, (uint64_t)v14);
                  v135 = ***v14;
                  v496 = llvm::ConstantInt::get(v130, v470, (const llvm::APInt *)1);
                  v518 = "uglygep";
                  LOWORD(v522) = 259;
                  v136 = (char *)operator new(0x90uLL);
                  *((_DWORD *)v136 + 21) = *((_DWORD *)v136 + 21) & 0x38000000 | 2;
                  v137 = (llvm::Value *)(v136 + 64);
                  *(_QWORD *)v136 = 0;
                  *((_QWORD *)v136 + 1) = 0;
                  *((_QWORD *)v136 + 2) = 0;
                  *((_QWORD *)v136 + 3) = v136 + 64;
                  *((_QWORD *)v136 + 4) = 0;
                  *((_QWORD *)v136 + 5) = 0;
                  *((_QWORD *)v136 + 6) = 0;
                  *((_QWORD *)v136 + 7) = v136 + 64;
                  v138 = v135 + 1912;
                  sub_1C4774650((llvm::GetElementPtrInst *)(v135 + 1912), (uint64_t *)v134 + 4, (llvm::Value *)&v496, 1);
                  *((_QWORD *)v136 + 8) = v139;
                  *((_QWORD *)v136 + 9) = 0;
                  v140 = *((_DWORD *)v136 + 21) & 0xC0000000 | 2;
                  *((_DWORD *)v136 + 20) = 62;
                  *((_DWORD *)v136 + 21) = v140;
                  *(_OWORD *)(v136 + 88) = 0u;
                  v141 = v136 + 88;
                  *(_OWORD *)(v136 + 104) = 0u;
                  *((_DWORD *)v136 + 30) = 0;
                  v142 = v14[5];
                  *((_QWORD *)v136 + 13) = v142;
                  *((_WORD *)v142 + 9) &= ~0x8000u;
                  if ((v136[87] & 0x10) != 0)
                  {
                    v353 = v142[7];
                    if (v353)
                    {
                      v354 = (llvm::ValueSymbolTable *)v353[13];
                      if (v354)
                        llvm::ValueSymbolTable::reinsertValue(v354, v137);
                    }
                  }
                  v143 = *v473;
                  *((_QWORD *)v136 + 11) = *v473;
                  *((_QWORD *)v136 + 12) = v473;
                  *(_QWORD *)(v143 + 8) = v141;
                  *v473 = (uint64_t)v141;
                  LODWORD(v143) = *((_DWORD *)v136 + 21);
                  *((_QWORD *)v136 + 16) = v138;
                  *((_QWORD *)v136 + 17) = v138;
                  v144 = v143 & 0x7FFFFFF;
                  v145 = -v144;
                  v146 = (_QWORD *)((char *)v137 - 32 * v144);
                  if (*v146)
                  {
                    v384 = (char *)v137 + 32 * v145;
                    v386 = (_QWORD *)*((_QWORD *)v384 + 2);
                    v385 = v384 + 16;
                    *v386 = *(v385 - 1);
                    v387 = *(v385 - 1);
                    if (v387)
                      *(_QWORD *)(v387 + 16) = *v385;
                  }
                  *v146 = v134 + 32;
                  v149 = *((_QWORD *)v134 + 5);
                  v148 = v134 + 40;
                  v147 = v149;
                  v150 = (char *)v137 + 32 * v145;
                  *((_QWORD *)v150 + 1) = v149;
                  v6 = v475;
                  v10 = v478;
                  if (v149)
                    *(_QWORD *)(v147 + 16) = v150 + 8;
                  *((_QWORD *)v150 + 2) = v148;
                  *v148 = v146;
                  sub_1C5382FD4((uint64_t)&v487, (uint64_t *)&v496, (uint64_t *)&v497, (uint64_t)v137 - 32 * (*((_DWORD *)v136 + 21) & 0x7FFFFFF) + 32);
                  llvm::Value::setName((uint64_t ***)v137, (uint64_t)&v518);
                  llvm::Instruction::copyMetadata((uint64_t)v137, (uint64_t)v14, 0, 0);
                  v136[81] = v136[81] & 0xFD | v480;
                  if (*v14 == (uint64_t **)v133)
                  {
                    v4 = a1;
                  }
                  else
                  {
                    v151 = operator new(0x60uLL);
                    v152 = (uint64_t)(v151 + 8);
                    v151[13] = v151[13] & 0x38000000 | 1;
                    *(_QWORD *)v151 = 0;
                    *((_QWORD *)v151 + 1) = 0;
                    *((_QWORD *)v151 + 2) = 0;
                    *((_QWORD *)v151 + 3) = v151 + 8;
                    v153 = (llvm::Type *)*v14;
                    v4 = a1;
                    if ((*((_BYTE *)v14 + 23) & 0x10) != 0)
                    {
                      v154 = **(_QWORD **)v153;
                      v155 = *(_QWORD *)(v154 + 152);
                      v156 = *(unsigned int *)(v154 + 168);
                      if ((_DWORD)v156)
                      {
                        LODWORD(v157) = (v156 - 1) & ((v14 >> 4) ^ (v14 >> 9));
                        v158 = (uint64_t ****)(v155 + 16 * v157);
                        v159 = *v158;
                        if (*v158 != v14)
                        {
                          v160 = 1;
                          do
                          {
                            if (v159 == (uint64_t ***)-4096)
                              goto LABEL_400;
                            v161 = v157 + v160++;
                            v157 = v161 & (v156 - 1);
                            v159 = *(uint64_t ****)(v155 + 16 * v157);
                          }
                          while (v159 != v14);
                          v158 = (uint64_t ****)(v155 + 16 * v157);
                        }
                      }
                      else
                      {
LABEL_400:
                        v158 = (uint64_t ****)(v155 + 16 * v156);
                      }
                      v328 = v158[1];
                      v331 = (uint64_t)*v328;
                      v330 = (char *)(v328 + 2);
                      v329 = v331;
                    }
                    else
                    {
                      v329 = 0;
                      v330 = &byte_1C871356D;
                    }
                    LOWORD(v522) = 261;
                    v518 = v330;
                    v519 = v329;
                    v137 = (llvm::Value *)llvm::BitCastInst::BitCastInst(v152, (uint64_t)v137, (uint64_t)v153, (uint64_t)&v518, (uint64_t)v14);
                  }
                }
                else
                {
                  v314 = (llvm::GetElementPtrInst *)v14[9];
                  v496 = llvm::ConstantInt::get(v129, v470 / v128, (const llvm::APInt *)1);
                  if ((*((_BYTE *)v14 + 23) & 0x10) != 0)
                  {
                    v315 = ***v14;
                    v316 = *(_QWORD *)(v315 + 152);
                    v317 = *(unsigned int *)(v315 + 168);
                    v6 = v475;
                    if ((_DWORD)v317)
                    {
                      LODWORD(v318) = (v317 - 1) & ((v14 >> 4) ^ (v14 >> 9));
                      v319 = (uint64_t ****)(v316 + 16 * v318);
                      v320 = *v319;
                      if (*v319 != v14)
                      {
                        v321 = 1;
                        do
                        {
                          if (v320 == (uint64_t ***)-4096)
                            goto LABEL_403;
                          v322 = v318 + v321++;
                          v318 = v322 & (v317 - 1);
                          v320 = *(uint64_t ****)(v316 + 16 * v318);
                        }
                        while (v320 != v14);
                        v319 = (uint64_t ****)(v316 + 16 * v318);
                      }
                    }
                    else
                    {
LABEL_403:
                      v319 = (uint64_t ****)(v316 + 16 * v317);
                    }
                    v332 = v319[1];
                    v335 = (uint64_t)*v332;
                    v334 = (char *)(v332 + 2);
                    v333 = v335;
                  }
                  else
                  {
                    v333 = 0;
                    v334 = &byte_1C871356D;
                    v6 = v475;
                  }
                  LOWORD(v522) = 261;
                  v518 = v334;
                  v519 = v333;
                  v336 = (char *)operator new(0x90uLL);
                  *((_DWORD *)v336 + 21) = *((_DWORD *)v336 + 21) & 0x38000000 | 2;
                  v137 = (llvm::Value *)(v336 + 64);
                  *(_QWORD *)v336 = 0;
                  *((_QWORD *)v336 + 1) = 0;
                  *((_QWORD *)v336 + 2) = 0;
                  *((_QWORD *)v336 + 3) = v336 + 64;
                  *((_QWORD *)v336 + 4) = 0;
                  *((_QWORD *)v336 + 5) = 0;
                  *((_QWORD *)v336 + 6) = 0;
                  *((_QWORD *)v336 + 7) = v336 + 64;
                  sub_1C4774650(v314, v116, (llvm::Value *)&v496, 1);
                  *((_QWORD *)v336 + 8) = v337;
                  *((_QWORD *)v336 + 9) = 0;
                  v338 = *((_DWORD *)v336 + 21) & 0xC0000000 | 2;
                  *((_DWORD *)v336 + 20) = 62;
                  *((_DWORD *)v336 + 21) = v338;
                  *(_OWORD *)(v336 + 88) = 0u;
                  v339 = v336 + 88;
                  *(_OWORD *)(v336 + 104) = 0u;
                  *((_DWORD *)v336 + 30) = 0;
                  v340 = v14[5];
                  *((_QWORD *)v336 + 13) = v340;
                  *((_WORD *)v340 + 9) &= ~0x8000u;
                  if ((v336[87] & 0x10) != 0)
                  {
                    v355 = v340[7];
                    if (v355)
                    {
                      v356 = (llvm::ValueSymbolTable *)v355[13];
                      if (v356)
                        llvm::ValueSymbolTable::reinsertValue(v356, v137);
                    }
                  }
                  v341 = *v473;
                  *((_QWORD *)v336 + 11) = *v473;
                  *((_QWORD *)v336 + 12) = v473;
                  *(_QWORD *)(v341 + 8) = v339;
                  *v473 = (uint64_t)v339;
                  LODWORD(v341) = *((_DWORD *)v336 + 21);
                  *((_QWORD *)v336 + 16) = v314;
                  *((_QWORD *)v336 + 17) = v314;
                  v342 = v341 & 0x7FFFFFF;
                  v343 = -v342;
                  v344 = (_QWORD *)((char *)v137 - 32 * v342);
                  if (*v344)
                  {
                    v388 = (char *)v137 + 32 * v343;
                    v390 = (_QWORD *)*((_QWORD *)v388 + 2);
                    v389 = v388 + 16;
                    *v390 = *(v389 - 1);
                    v391 = *(v389 - 1);
                    if (v391)
                      *(_QWORD *)(v391 + 16) = *v389;
                  }
                  *v344 = v116;
                  v4 = a1;
                  v10 = v478;
                  if (v116)
                  {
                    v347 = v116[1];
                    v346 = v116 + 1;
                    v345 = v347;
                    v348 = (char *)v137 + 32 * v343;
                    *((_QWORD *)v348 + 1) = v347;
                    if (v347)
                      *(_QWORD *)(v345 + 16) = v348 + 8;
                    *((_QWORD *)v348 + 2) = v346;
                    *v346 = v344;
                  }
                  sub_1C5382FD4((uint64_t)&v487, (uint64_t *)&v496, (uint64_t *)&v497, (uint64_t)v137 - 32 * (*((_DWORD *)v336 + 21) & 0x7FFFFFF) + 32);
                  llvm::Value::setName((uint64_t ***)v137, (uint64_t)&v518);
                  llvm::Instruction::copyMetadata((uint64_t)v137, (uint64_t)v14, 0, 0);
                  v336[81] = v336[81] & 0xFD | v480;
                }
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v14, v137, (llvm::Value *)1);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v14[5] + 5), v14);
                v349 = v14[3];
                v350 = v14[4];
                *v350 = (uint64_t *)v349;
                v349[1] = (uint64_t *)v350;
                *v473 = 0;
                v14[4] = 0;
                llvm::Value::deleteValue((llvm::Value *)v14);
                goto LABEL_468;
              }
              v10 = v478;
              if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v62 + 472))(*v62))
              {
                sub_1C4773D54((uint64_t)&v518, (uint64_t)v14, 0, 0, 0);
                llvm::DataLayout::getIntPtrType(*(llvm::DataLayout **)a1, (llvm::Type *)*v14);
                v471 = v69;
                v70 = *((_DWORD *)*v14 + 2);
                if ((v70 & 0xFE) == 0x12)
                  v70 = *(_DWORD *)(*(*v14)[2] + 8);
                v71 = llvm::PointerType::get((llvm::PointerType *)(*v526 + 239), (llvm::Type *)(v70 >> 8));
                v72 = (unsigned __int8 *)v14[-4 * (*((_DWORD *)v14 + 5) & 0x7FFFFFF)];
                v73 = *(uint64_t **)(a1 + 24);
                v74 = *((_DWORD *)v73 + 4);
                if (!v74)
                  goto LABEL_184;
                v75 = v14[5];
                v76 = *v73;
                v77 = v74 - 1;
                v78 = ((v75 >> 4) ^ (v75 >> 9)) & (v74 - 1);
                v79 = *(uint64_t ***)(v76 + 16 * v78);
                if (v75 == v79)
                {
LABEL_101:
                  v82 = v76 + 16 * v78;
                  v83 = *(_QWORD *)(v82 + 8);
                  if (v83
                    && llvm::Loop::isLoopInvariant(*(_QWORD *)(v82 + 8), (uint64_t)v14[-4 * (*((_DWORD *)v14 + 5) & 0x7FFFFFF)]))
                  {
                    v84 = *((_QWORD *)v72 + 1);
                    if (!v84)
                    {
                      v91 = 1;
                      goto LABEL_186;
                    }
                    v85 = 0;
                    while (1)
                    {
                      v86 = *(_QWORD *)(v84 + 24);
                      if (v86)
                        v87 = *(unsigned __int8 *)(v86 + 16) >= 0x1Cu;
                      else
                        v87 = 0;
                      if (v87)
                      {
                        v88 = sub_1C477672C(v83 + 56, *(_QWORD *)(v86 + 40));
                        v89 = *(_QWORD *)(v83 + 64);
                        v90 = 72;
                        if (v89 == *(_QWORD *)(v83 + 56))
                          v90 = 76;
                        if (v88 != (_QWORD *)(v89 + 8 * *(unsigned int *)(v83 + v90)))
                        {
                          if (v85 > 0)
                          {
                            v91 = 0;
LABEL_420:
                            v4 = a1;
LABEL_186:
                            v469 = v91;
                            v468 = v83;
                            if (*(_QWORD *)v72 != v71)
                            {
                              v500[0] = 257;
                              v72 = sub_1C4773E38((uint64_t *)&v518, 49, v72, v71, (uint64_t)&v496);
                            }
                            v6 = v475;
                            v482 = (uint64_t *)v72;
                            v170 = 3;
                            if (*((_BYTE *)v14 + 16) == 62)
                              v170 = 8;
                            v171 = (unint64_t)v14[v170];
                            v172 = *((_DWORD *)v14 + 5);
                            if ((v172 & 0x40000000) != 0)
                            {
                              v174 = (uint64_t ***)*(v14 - 1);
                              v173 = v172 & 0x7FFFFFF;
                            }
                            else
                            {
                              v173 = v172 & 0x7FFFFFF;
                              v174 = &v14[-4 * (v172 & 0x7FFFFFF)];
                            }
                            v487 = v174 + 4;
                            v488 = v171 | 4;
                            if (v173 == 1)
                            {
                              v175 = 0;
LABEL_195:
                              if (v470)
                              {
                                v176 = llvm::ConstantInt::get((llvm::ConstantInt *)v471, v470, 0);
                                v177 = (llvm::GetElementPtrInst *)(*v526 + 239);
                                v496 = (llvm::Value **)"uglygep";
                                v500[0] = 259;
                                v178 = (unsigned __int8 *)sub_1C4867B70((uint64_t *)&v518, v177, v482, (uint64_t)v176, (uint64_t)&v496);
                                v179 = v469;
                                if (!v175)
                                  goto LABEL_463;
                              }
                              else
                              {
                                v179 = 0;
                                v178 = (unsigned __int8 *)v482;
                                if (!v175)
                                  goto LABEL_463;
                              }
                              v303 = *((unsigned __int8 *)v175 + 16);
                              if (v178[16] == 62)
                                v304 = v178;
                              else
                                v304 = 0;
                              if (v303 == 62)
                                v305 = (uint64_t)v175;
                              else
                                v305 = 0;
                              if (v303 == 62)
                                v306 = v179;
                              else
                                v306 = 0;
                              if (v306 == 1)
                              {
                                v307 = *(_QWORD *)(v305 + 8);
                                if (v307)
                                {
                                  if (v304)
                                  {
                                    if (!*(_QWORD *)(v307 + 8)
                                      && (unsigned __int8 *)v305 != v304
                                      && *(_QWORD *)(v305 + 40) == *((_QWORD *)v304 + 5)
                                      && (*(_DWORD *)(v305 + 20) & 0x7FFFFFF) == 2
                                      && (*((_DWORD *)v304 + 5) & 0x7FFFFFF) == 2)
                                    {
                                      v308 = *(_QWORD **)(v305 - 64);
                                      v309 = (_QWORD *)*((_QWORD *)v304 - 8);
                                      v310 = *(_QWORD *)(v305 - 32);
                                      if (!llvm::Loop::isLoopInvariant(v468, v310) && *v308 == *v309)
                                      {
                                        if (!v310
                                          || (v311 = *(unsigned __int8 *)(v310 + 16), v311 < 0x1C)
                                          || v311 - 53 <= 2
                                          && ((v312 = *(_DWORD *)(v310 + 20), (v312 & 0x40000000) != 0)
                                            ? (v313 = *(uint64_t **)(v310 - 8))
                                            : (v313 = (uint64_t *)(v310 - 32 * (v312 & 0x7FFFFFF))),
                                              *(_BYTE *)(v313[4] + 16) == 16
                                           && (v310 = *v313, v311 = *(unsigned __int8 *)(*v313 + 16), v311 < 0x1C))
                                          || v311 - 41 > 0x11
                                          || (v311 & 0xFFFFFFFD) != 0x29
                                          || *(_BYTE *)(*(_QWORD *)(v310 - 64) + 16) != 16
                                          && *(_BYTE *)(*(_QWORD *)(v310 - 32) + 16) != 16)
                                        {
                                          v357 = v305 - 32 * (*(_DWORD *)(v305 + 20) & 0x7FFFFFF);
                                          v359 = (_QWORD *)(v357 + 32);
                                          v358 = *(_QWORD *)(v357 + 32);
                                          v360 = *(_QWORD *)&v304[-32 * (*((_DWORD *)v304 + 5) & 0x7FFFFFF) + 32];
                                          if (v358)
                                          {
                                            **(_QWORD **)(v357 + 48) = *(_QWORD *)(v357 + 40);
                                            v361 = *(_QWORD *)(v357 + 40);
                                            if (v361)
                                              *(_QWORD *)(v361 + 16) = *(_QWORD *)(v357 + 48);
                                          }
                                          *v359 = v360;
                                          if (v360)
                                          {
                                            v364 = *(_QWORD *)(v360 + 8);
                                            v362 = (_QWORD *)(v360 + 8);
                                            v363 = v364;
                                            *(_QWORD *)(v357 + 40) = v364;
                                            if (v364)
                                              *(_QWORD *)(v363 + 16) = v357 + 40;
                                            *(_QWORD *)(v357 + 48) = v362;
                                            *v362 = v359;
                                          }
                                          v365 = &v304[-32 * (*((_DWORD *)v304 + 5) & 0x7FFFFFF)];
                                          v366 = v365 + 32;
                                          if (*((_QWORD *)v365 + 4))
                                          {
                                            **((_QWORD **)v365 + 6) = *((_QWORD *)v365 + 5);
                                            v367 = *((_QWORD *)v365 + 5);
                                            if (v367)
                                              *(_QWORD *)(v367 + 16) = *((_QWORD *)v365 + 6);
                                          }
                                          *v366 = v358;
                                          if (v358)
                                          {
                                            v370 = *(_QWORD *)(v358 + 8);
                                            v368 = (_QWORD *)(v358 + 8);
                                            v369 = v370;
                                            *((_QWORD *)v365 + 5) = v370;
                                            if (v370)
                                              *(_QWORD *)(v369 + 16) = v365 + 40;
                                            *((_QWORD *)v365 + 6) = v368;
                                            *v368 = v366;
                                          }
                                          v371 = (llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v305 + 40)
                                                                                            + 56)
                                                                                + 40)
                                                                    + 272);
                                          LODWORD(v497) = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(v371, *(_DWORD *)(*(_QWORD *)v305 + 8) >> 8)+ 12);
                                          if (v497 > 0x40)
                                            llvm::APInt::initSlowCase((llvm::APInt *)&v496, 0, 0);
                                          else
                                            v496 = 0;
                                          v373 = (llvm::Value *)llvm::Value::stripAndAccumulateConstantOffsets(v305, v371, (const void **)&v496, 0, 0, 0, v372);
                                          v508 = 0;
                                          ObjectSize = llvm::getObjectSize(v373, &v508, v371, *(llvm::DataLayout **)(a1 + 32), 0, 0);
                                          v375 = v497;
                                          if (!ObjectSize)
                                            goto LABEL_459;
                                          if (v497 < 0x41)
                                          {
                                            v376 = &v496;
                                            goto LABEL_458;
                                          }
                                          v377 = 0;
                                          v376 = (llvm::Value ***)v496;
                                          v378 = ((unint64_t)v497 + 63) >> 6;
                                          do
                                          {
                                            v99 = v378-- < 1;
                                            if (v99)
                                              break;
                                            v379 = (unint64_t)v496[v378];
                                            v377 += __clz(v379);
                                          }
                                          while (!v379);
                                          v380 = v497 | 0xFFFFFFC0;
                                          if ((v497 & 0x3F) == 0)
                                            v380 = 0;
                                          if ((_DWORD)v497 - v377 - v380 <= 0x40)
                                          {
LABEL_458:
                                            if (*v376 > (llvm::Value **)v508)
                                              goto LABEL_459;
                                            *(_BYTE *)(v305 + 17) |= 2u;
                                          }
                                          else
                                          {
LABEL_459:
                                            *(_BYTE *)(v305 + 17) &= ~2u;
                                            v304[17] &= ~2u;
                                          }
                                          if (v375 >= 0x41 && v496)
                                            MEMORY[0x1CAA32F9C](v496, 0x1000C8000313F17);
                                        }
                                      }
                                    }
                                  }
                                }
                              }
LABEL_463:
                              v381 = (llvm::Type *)*v14;
                              if (*(uint64_t ***)v178 != *v14)
                              {
                                v500[0] = 257;
                                v178 = sub_1C4773E38((uint64_t *)&v518, 49, v178, (uint64_t)v381, (uint64_t)&v496);
                              }
                              v4 = a1;
                              v10 = v478;
                              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v14, (llvm::Value *)v178, (llvm::Value *)1);
                              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v14[5] + 5), v14);
                              v382 = v14[3];
                              v383 = v14[4];
                              *v383 = (uint64_t *)v382;
                              v382[1] = (uint64_t *)v383;
                              *v473 = 0;
                              v14[4] = 0;
                              llvm::Value::deleteValue((llvm::Value *)v14);
                              v327 = (uint64_t *)v518;
LABEL_466:
                              if (v327 != &v520)
                                free(v327);
LABEL_468:
                              v17 = 1;
                              goto LABEL_24;
                            }
                            v175 = 0;
                            v180 = 1;
                            while (2)
                            {
                              v181 = v488;
                              if ((v488 & 4) != 0)
                              {
                                v182 = (uint64_t)(&v14[4 * v180])[-4 * (*((_DWORD *)v14 + 5) & 0x7FFFFFF)];
                                if (v182)
                                  v183 = *(_BYTE *)(v182 + 16) == 16;
                                else
                                  v183 = 0;
                                if (v183)
                                {
                                  v184 = (llvm::APInt *)(v182 + 24);
                                  v185 = *(_DWORD *)(v182 + 32);
                                  if (v185 > 0x40)
                                  {
                                    if (llvm::APInt::countLeadingZerosSlowCase(v184) != v185)
                                      goto LABEL_209;
                                  }
                                  else if (*(_QWORD *)v184)
                                  {
                                    goto LABEL_209;
                                  }
                                }
                                else
                                {
LABEL_209:
                                  v186 = v471[2];
                                  v187 = *(llvm::DataLayout **)v4;
                                  v188 = v181 & 0xFFFFFFFFFFFFFFF8;
                                  if ((v181 & 0xFFFFFFFFFFFFFFF8) == 0)
                                  {
                                    v189 = *(llvm::UndefValue **)v487;
                                    if (*(_QWORD *)v487)
                                      v190 = *(_BYTE *)(*(_QWORD *)v487 + 16) == 16;
                                    else
                                      v190 = 0;
                                    if (!v190)
                                      v189 = llvm::Constant::getAggregateElement(v189, 0);
                                    v193 = (unsigned int *)*((_QWORD *)v189 + 3);
                                    v191 = (unsigned int *)((char *)v189 + 24);
                                    v192 = v193;
                                    if (v191[2] < 0x41)
                                      v192 = v191;
                                    v188 = *(_QWORD *)(MEMORY[0x10] + 8 * *v192);
                                  }
                                  sub_1C4768AD0((uint64_t)v187, v188);
                                  v195 = v194;
                                  v197 = v196 == 1;
                                  llvm::DataLayout::getAlignment((uint64_t)v187, v188);
                                  v201 = v200;
                                  if (v197)
                                  v202 = v186 >> 8;
                                  v203 = ((1 << v201) + ((unint64_t)(v195 + 7) >> 3) - 1) & -(1 << v201);
                                  LODWORD(v509) = v186 >> 8;
                                  v4 = a1;
                                  if (v186 >> 8 > 0x40)
                                  {
                                    llvm::APInt::initSlowCase((llvm::APInt *)&v508, v203, 0);
                                    LODWORD(v202) = v509;
                                  }
                                  else
                                  {
                                    v204 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v186);
                                    if (v186 <= 0xFF)
                                      v204 = 0;
                                    v508 = (llvm::Value *)(v204 & v203);
                                  }
                                  if (v202 >= 0x41)
                                  {
                                    v207 = 0;
                                    v208 = ((unint64_t)v202 + 63) >> 6;
                                    v209 = v208;
                                    do
                                    {
                                      v99 = v209-- < 1;
                                      if (v99)
                                        break;
                                      v210 = *((_QWORD *)v508 + v209);
                                      v207 += __clz(v210);
                                    }
                                    while (!v210);
                                    v211 = v202 | 0xFFFFFFC0;
                                    if ((v202 & 0x3F) == 0)
                                      v211 = 0;
                                    if ((v202 - v207 - v211) >= 0x41 || *(_QWORD *)v508 != 1)
                                    {
                                      v212 = 0;
                                      v213 = v508;
                                      v214 = ((unint64_t)v202 + 63) >> 6;
                                      do
                                      {
                                        v215 = *(int8x8_t *)v213;
                                        v213 = (llvm::Value *)((char *)v213 + 8);
                                        v216 = (uint8x8_t)vcnt_s8(v215);
                                        v216.i16[0] = vaddlv_u8(v216);
                                        v212 += v216.i32[0];
                                        --v214;
                                      }
                                      while (v214);
                                      if (v212 != 1)
                                        goto LABEL_243;
                                      v217 = 0;
                                      do
                                      {
                                        v99 = v208-- < 1;
                                        if (v99)
                                          break;
                                        v218 = *((_QWORD *)v508 + v208);
                                        v217 += __clz(v218);
                                      }
                                      while (!v218);
                                      v206 = v217 + v211;
LABEL_242:
                                      v219 = llvm::ConstantInt::get((llvm::ConstantInt *)v471, (v202 + ~v206), 0);
                                      v500[0] = 257;
                                      v220 = sub_1C506E874((uint64_t)&v518, v182, (uint64_t)v219, (uint64_t)&v496, 0, 0);
LABEL_244:
                                      v182 = v220;
                                    }
                                  }
                                  else if (v508 != (llvm::Value *)1)
                                  {
                                    v205 = (uint8x8_t)vcnt_s8((int8x8_t)v508);
                                    v205.i16[0] = vaddlv_u8(v205);
                                    if (v205.u32[0] == 1)
                                    {
                                      v206 = v202 + __clz((unint64_t)v508) - 64;
                                      goto LABEL_242;
                                    }
LABEL_243:
                                    v221 = llvm::ConstantInt::get((llvm::ConstantInt **)v471, (llvm::Type *)&v508, v199);
                                    v500[0] = 257;
                                    v220 = sub_1C4EC4040((uint64_t)&v518, v182, (uint64_t)v221, (uint64_t)&v496, 0, 0);
                                    goto LABEL_244;
                                  }
                                  v222 = (llvm::GetElementPtrInst *)(*v526 + 239);
                                  v496 = (llvm::Value **)"uglygep";
                                  v500[0] = 259;
                                  v223 = sub_1C4867B70((uint64_t *)&v518, v222, v482, v182, (uint64_t)&v496);
                                  v482 = (uint64_t *)v223;
                                  if (!v175)
                                    v175 = v223;
                                  if (v509 >= 0x41 && v508)
                                    MEMORY[0x1CAA32F9C](v508, 0x1000C8000313F17);
                                }
                                v6 = v475;
                              }
                              ++v180;
                              sub_1C4774E38((uint64_t)&v487);
                              if (v173 == (_DWORD)v180)
                                goto LABEL_195;
                              continue;
                            }
                          }
                          ++v85;
                        }
                      }
                      v84 = *(_QWORD *)(v84 + 8);
                      if (!v84)
                      {
                        v91 = 1;
                        goto LABEL_420;
                      }
                    }
                  }
                }
                else
                {
                  v80 = 1;
                  while (v79 != (uint64_t **)-4096)
                  {
                    v81 = v78 + v80++;
                    v78 = v81 & v77;
                    v79 = *(uint64_t ***)(v76 + 16 * v78);
                    if (v75 == v79)
                      goto LABEL_101;
                  }
LABEL_184:
                  v83 = 0;
                }
                v91 = 0;
                goto LABEL_186;
              }
              sub_1C4773D54((uint64_t)&v518, (uint64_t)v14, 0, 0, 0);
              llvm::DataLayout::getIntPtrType(*(llvm::DataLayout **)a1, (llvm::Type *)*v14);
              v162 = (unsigned __int8 *)v14[-4 * (*((_DWORD *)v14 + 5) & 0x7FFFFFF)];
              v500[0] = 257;
              v481 = (unsigned int *)v163;
              v164 = sub_1C4773E38((uint64_t *)&v518, 47, v162, v163, (uint64_t)&v496);
              v165 = v164;
              v166 = 3;
              if (*((_BYTE *)v14 + 16) == 62)
                v166 = 8;
              v167 = *((_DWORD *)v14 + 5);
              if ((v167 & 0x40000000) != 0)
              {
                v169 = (uint64_t ***)*(v14 - 1);
                v168 = v167 & 0x7FFFFFF;
              }
              else
              {
                v168 = v167 & 0x7FFFFFF;
                v169 = &v14[-4 * (v167 & 0x7FFFFFF)];
              }
              v224 = (unint64_t)v14[v166] | 4;
              v508 = (llvm::Value *)(v169 + 4);
              v509 = v224;
              if (v168 == 1)
              {
                v225 = (uint64_t)v164;
LABEL_257:
                if (v470)
                {
                  v226 = llvm::ConstantInt::get((llvm::ConstantInt *)v481, v470, 0);
                  v492[0] = 257;
                  v227 = (llvm::Value *)(*(uint64_t (**)(uint64_t, uint64_t, llvm::Value **, _QWORD, _QWORD))(*(_QWORD *)v527 + 16))(v527, v225, v226, 0, 0);
                  if (!v227)
                  {
                    v500[0] = 257;
                    v228 = (char *)operator new(0x80uLL);
                    v229 = v228;
                    *(_QWORD *)v228 = 0;
                    *((_QWORD *)v228 + 1) = 0;
                    *((_QWORD *)v228 + 2) = 0;
                    *((_QWORD *)v228 + 5) = 0;
                    *((_QWORD *)v228 + 6) = 0;
                    *((_QWORD *)v228 + 4) = 0;
                    v230 = (llvm::Value ***)(v228 + 32);
                    *((_QWORD *)v228 + 8) = *(_QWORD *)v225;
                    v227 = (llvm::Value *)(v228 + 64);
                    *((_QWORD *)v228 + 3) = v228 + 64;
                    *((_QWORD *)v228 + 7) = v228 + 64;
                    *((_QWORD *)v228 + 9) = 0;
                    v228[80] = 41;
                    v228[81] = 0;
                    *((_WORD *)v228 + 41) = 0;
                    *((_DWORD *)v228 + 21) = 2;
                    *((_DWORD *)v228 + 30) = 0;
                    *(_OWORD *)(v228 + 104) = 0u;
                    *(_OWORD *)(v228 + 88) = 0u;
                    *(_QWORD *)v228 = v225;
                    v233 = *(_QWORD *)(v225 + 8);
                    v232 = (_QWORD *)(v225 + 8);
                    v231 = v233;
                    *((_QWORD *)v228 + 1) = v233;
                    if (v233)
                      *(_QWORD *)(v231 + 16) = v228 + 8;
                    *((_QWORD *)v228 + 2) = v232;
                    *v232 = v228;
                    if (*((_QWORD *)v228 + 4))
                    {
                      **((_QWORD **)v228 + 6) = *((_QWORD *)v228 + 5);
                      v392 = *((_QWORD *)v228 + 5);
                      if (v392)
                        *(_QWORD *)(v392 + 16) = *((_QWORD *)v228 + 6);
                    }
                    *v230 = v226;
                    if (v226)
                    {
                      v236 = v226[1];
                      v235 = (llvm::Value ****)(v226 + 1);
                      v234 = v236;
                      *((_QWORD *)v228 + 5) = v236;
                      if (v236)
                        *((_QWORD *)v234 + 2) = v228 + 40;
                      *((_QWORD *)v228 + 6) = v235;
                      *v235 = v230;
                    }
                    llvm::Value::setName((uint64_t ***)v228 + 8, (uint64_t)&v496);
                    (*(void (**)(void *, llvm::Value *, _WORD **, uint64_t, uint64_t))(*(_QWORD *)v528 + 16))(v528, v227, &v487, v524, v525);
                    if ((_DWORD)v519)
                    {
                      v237 = (char *)v518;
                      v238 = (char *)v518 + 16 * v519;
                      v239 = (unsigned __int8 **)(v229 + 112);
                      do
                      {
                        v240 = *(_DWORD *)v237;
                        v241 = (unsigned __int8 *)*((_QWORD *)v237 + 1);
                        if (v241)
                        {
                          if (!v240)
                          {
                            v506 = (unsigned __int8 *)*((_QWORD *)v237 + 1);
                            llvm::MetadataTracking::track((uint64_t)&v506, v241, 2);
                            v242 = *v239;
                            if (!*v239)
                            {
LABEL_279:
                              v243 = v506;
                              *v239 = v506;
                              if (v243)
                                llvm::MetadataTracking::retrack((uint64_t)&v506, v243, (uint64_t)(v229 + 112));
                              goto LABEL_276;
                            }
LABEL_273:
                            llvm::MetadataTracking::untrack((uint64_t)(v229 + 112), v242);
                            goto LABEL_279;
                          }
                        }
                        else
                        {
                          v242 = *v239;
                          if (!*v239 && (v229[87] & 0x20) == 0)
                            goto LABEL_276;
                          if (!v240)
                          {
                            v506 = 0;
                            if (!v242)
                              goto LABEL_279;
                            goto LABEL_273;
                          }
                        }
                        llvm::Value::setMetadata(v227, *(_DWORD *)v237, (llvm::MDNode *)v241);
LABEL_276:
                        v237 += 16;
                      }
                      while (v237 != v238);
                    }
                    v10 = v478;
                  }
                  v225 = (uint64_t)v227;
                }
                v323 = (llvm::Type *)*v14;
                v500[0] = 257;
                v324 = sub_1C4773E38((uint64_t *)&v518, 48, (unsigned __int8 *)v225, (uint64_t)v323, (uint64_t)&v496);
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v14, (llvm::Value *)v324, (llvm::Value *)1);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v14[5] + 5), v14);
                v325 = v14[3];
                v326 = v14[4];
                *v326 = (uint64_t *)v325;
                v325[1] = (uint64_t *)v326;
                *v473 = 0;
                v14[4] = 0;
                llvm::Value::deleteValue((llvm::Value *)v14);
                v327 = (uint64_t *)v518;
                v4 = a1;
                goto LABEL_466;
              }
              v244 = 1;
              v472 = v168;
              while (2)
              {
                v245 = v509;
                if ((v509 & 4) == 0)
                {
                  v225 = (uint64_t)v165;
                  goto LABEL_284;
                }
                v246 = (uint64_t)(&v14[4 * v244])[-4 * (*((_DWORD *)v14 + 5) & 0x7FFFFFF)];
                if (v246)
                  v247 = *(_BYTE *)(v246 + 16) == 16;
                else
                  v247 = 0;
                if (v247)
                {
                  v248 = (llvm::APInt *)(v246 + 24);
                  v249 = *(_DWORD *)(v246 + 32);
                  if (v249 > 0x40)
                  {
                    if (llvm::APInt::countLeadingZerosSlowCase(v248) != v249)
                      goto LABEL_292;
                  }
                  else if (*(_QWORD *)v248)
                  {
                    goto LABEL_292;
                  }
                  v225 = (uint64_t)v165;
LABEL_284:
                  v10 = v478;
                }
                else
                {
LABEL_292:
                  v250 = v481[2];
                  v251 = *(_QWORD *)a1;
                  v252 = v245 & 0xFFFFFFFFFFFFFFF8;
                  if ((v245 & 0xFFFFFFFFFFFFFFF8) == 0)
                  {
                    v253 = *(llvm::UndefValue **)v508;
                    if (*(_QWORD *)v508)
                      v254 = *(_BYTE *)(*(_QWORD *)v508 + 16) == 16;
                    else
                      v254 = 0;
                    if (!v254)
                      v253 = llvm::Constant::getAggregateElement(v253, 0);
                    v257 = (unsigned int *)*((_QWORD *)v253 + 3);
                    v255 = (unsigned int *)((char *)v253 + 24);
                    v256 = v257;
                    if (v255[2] < 0x41)
                      v256 = v255;
                    v252 = *(_QWORD *)(MEMORY[0x10] + 8 * *v256);
                  }
                  sub_1C4768AD0(v251, v252);
                  v259 = v258;
                  v261 = v260 == 1;
                  llvm::DataLayout::getAlignment(v251, v252);
                  v265 = v264;
                  if (v261)
                  v266 = v250 >> 8;
                  v267 = ((1 << v265) + ((unint64_t)(v259 + 7) >> 3) - 1) & -(1 << v265);
                  v507 = v250 >> 8;
                  if (v250 >> 8 > 0x40)
                  {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v506, v267, 0);
                    LODWORD(v266) = v507;
                  }
                  else
                  {
                    v268 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v250);
                    if (v250 <= 0xFF)
                      v268 = 0;
                    v506 = (unsigned __int8 *)(v268 & v267);
                  }
                  v6 = v475;
                  v168 = v472;
                  if (v266 >= 0x41)
                  {
                    v271 = 0;
                    v272 = ((unint64_t)v266 + 63) >> 6;
                    v273 = v272;
                    do
                    {
                      v99 = v273-- < 1;
                      if (v99)
                        break;
                      v274 = *(_QWORD *)&v506[8 * v273];
                      v271 += __clz(v274);
                    }
                    while (!v274);
                    v275 = v266 | 0xFFFFFFC0;
                    if ((v266 & 0x3F) == 0)
                      v275 = 0;
                    if ((v266 - v271 - v275) >= 0x41 || *(_QWORD *)v506 != 1)
                    {
                      v276 = 0;
                      v277 = (int8x8_t *)v506;
                      v278 = ((unint64_t)v266 + 63) >> 6;
                      do
                      {
                        v279 = *v277++;
                        v280 = (uint8x8_t)vcnt_s8(v279);
                        v280.i16[0] = vaddlv_u8(v280);
                        v276 += v280.i32[0];
                        --v278;
                      }
                      while (v278);
                      if (v276 != 1)
                        goto LABEL_329;
                      v281 = 0;
                      do
                      {
                        v99 = v272-- < 1;
                        if (v99)
                          break;
                        v282 = *(_QWORD *)&v506[8 * v272];
                        v281 += __clz(v282);
                      }
                      while (!v282);
                      v270 = v281 + v275;
LABEL_326:
                      v283 = llvm::ConstantInt::get((llvm::ConstantInt *)v481, (v266 + ~v270), 0);
                      v500[0] = 257;
                      v284 = sub_1C506E874((uint64_t)&v518, v246, (uint64_t)v283, (uint64_t)&v496, 0, 0);
LABEL_330:
                      v246 = v284;
                    }
                  }
                  else if (v506 != (unsigned __int8 *)1)
                  {
                    v269 = (uint8x8_t)vcnt_s8((int8x8_t)v506);
                    v269.i16[0] = vaddlv_u8(v269);
                    if (v269.u32[0] == 1)
                    {
                      v270 = v266 + __clz((unint64_t)v506) - 64;
                      goto LABEL_326;
                    }
LABEL_329:
                    v285 = llvm::ConstantInt::get((llvm::ConstantInt **)v481, (llvm::Type *)&v506, v263);
                    v500[0] = 257;
                    v284 = sub_1C4EC4040((uint64_t)&v518, v246, (uint64_t)v285, (uint64_t)&v496, 0, 0);
                    goto LABEL_330;
                  }
                  v492[0] = 257;
                  v225 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v527 + 16))(v527, v165, v246, 0, 0);
                  if (!v225)
                  {
                    v500[0] = 257;
                    v286 = (char *)operator new(0x80uLL);
                    v287 = v286;
                    *(_QWORD *)v286 = 0;
                    *((_QWORD *)v286 + 1) = 0;
                    *((_QWORD *)v286 + 2) = 0;
                    *((_QWORD *)v286 + 5) = 0;
                    *((_QWORD *)v286 + 6) = 0;
                    *((_QWORD *)v286 + 4) = 0;
                    v288 = (uint64_t *)(v286 + 32);
                    *((_QWORD *)v286 + 8) = *v165;
                    v225 = (uint64_t)(v286 + 64);
                    *((_QWORD *)v286 + 3) = v286 + 64;
                    *((_QWORD *)v286 + 7) = v286 + 64;
                    *((_QWORD *)v286 + 9) = 0;
                    v286[80] = 41;
                    v286[81] = 0;
                    *((_WORD *)v286 + 41) = 0;
                    *((_DWORD *)v286 + 21) = 2;
                    *((_DWORD *)v286 + 30) = 0;
                    *(_OWORD *)(v286 + 104) = 0u;
                    *(_OWORD *)(v286 + 88) = 0u;
                    *(_QWORD *)v286 = v165;
                    v291 = v165[1];
                    v290 = v165 + 1;
                    v289 = v291;
                    *((_QWORD *)v286 + 1) = v291;
                    if (v291)
                      *(_QWORD *)(v289 + 16) = v286 + 8;
                    *((_QWORD *)v286 + 2) = v290;
                    *v290 = v286;
                    if (*((_QWORD *)v286 + 4))
                    {
                      **((_QWORD **)v286 + 6) = *((_QWORD *)v286 + 5);
                      v302 = *((_QWORD *)v286 + 5);
                      if (v302)
                        *(_QWORD *)(v302 + 16) = *((_QWORD *)v286 + 6);
                    }
                    *v288 = v246;
                    if (v246)
                    {
                      v294 = *(_QWORD *)(v246 + 8);
                      v293 = (uint64_t **)(v246 + 8);
                      v292 = v294;
                      *((_QWORD *)v286 + 5) = v294;
                      if (v294)
                        *(_QWORD *)(v292 + 16) = v286 + 40;
                      *((_QWORD *)v286 + 6) = v293;
                      *v293 = v288;
                    }
                    llvm::Value::setName((uint64_t ***)v286 + 8, (uint64_t)&v496);
                    (*(void (**)(void *, uint64_t, _WORD **, uint64_t, uint64_t))(*(_QWORD *)v528 + 16))(v528, v225, &v487, v524, v525);
                    if ((_DWORD)v519)
                    {
                      v295 = (char *)v518;
                      v296 = (char *)v518 + 16 * v519;
                      v297 = (unsigned __int8 **)(v287 + 112);
                      do
                      {
                        v298 = *(_DWORD *)v295;
                        v299 = (unsigned __int8 *)*((_QWORD *)v295 + 1);
                        if (v299)
                        {
                          if (!v298)
                          {
                            v510 = (unsigned __int8 *)*((_QWORD *)v295 + 1);
                            llvm::MetadataTracking::track((uint64_t)&v510, v299, 2);
                            v300 = *v297;
                            if (!*v297)
                            {
LABEL_352:
                              v301 = v510;
                              *v297 = v510;
                              if (v301)
                                llvm::MetadataTracking::retrack((uint64_t)&v510, v301, (uint64_t)(v287 + 112));
                              goto LABEL_349;
                            }
LABEL_346:
                            llvm::MetadataTracking::untrack((uint64_t)(v287 + 112), v300);
                            goto LABEL_352;
                          }
                        }
                        else
                        {
                          v300 = *v297;
                          if (!*v297 && (v287[87] & 0x20) == 0)
                            goto LABEL_349;
                          if (!v298)
                          {
                            v510 = 0;
                            if (!v300)
                              goto LABEL_352;
                            goto LABEL_346;
                          }
                        }
                        llvm::Value::setMetadata((llvm::Value *)v225, *(_DWORD *)v295, (llvm::MDNode *)v299);
LABEL_349:
                        v295 += 16;
                      }
                      while (v295 != v296);
                    }
                    v6 = v475;
                  }
                  v10 = v478;
                  if (v507 >= 0x41 && v506)
                    MEMORY[0x1CAA32F9C](v506, 0x1000C8000313F17);
                }
                ++v244;
                sub_1C4774E38((uint64_t)&v508);
                v165 = (_QWORD *)v225;
                if (v168 == (_DWORD)v244)
                  goto LABEL_257;
                continue;
              }
            }
            v92 = 1;
            while (2)
            {
              if ((v505 & 4) != 0)
              {
                v93 = (unsigned __int8 *)(&v14[4 * v92])[-4 * (*((_DWORD *)v14 + 5) & 0x7FFFFFF)];
                v94 = *(_QWORD *)(a1 + 8);
                v518 = &v520;
                v519 = 0x800000000;
                v528 = &v530;
                v529 = 0x1000000000;
                v538 = v14;
                v539 = v14[5][7][5] + 272;
                v540 = v94;
                sub_1C5C33BF0((const void **)&v496, (uint64_t)&v518, v93, 0, 0, (*((unsigned __int8 *)v14 + 17) >> 1) & 1);
                v95 = v497;
                v96 = v496;
                if (v497 < 0x41)
                  goto LABEL_127;
                v97 = 0;
                v98 = ((unint64_t)v497 + 63) >> 6;
                do
                {
                  v99 = v98-- < 1;
                  if (v99)
                    break;
                  v100 = (unint64_t)v496[v98];
                  v97 += __clz(v100);
                }
                while (!v100);
                v101 = v497 | 0xFFFFFFC0;
                if ((v497 & 0x3F) == 0)
                  v101 = 0;
                if ((_DWORD)v497 - v97 - v101 > 0x40)
                  goto LABEL_154;
                v96 = (llvm::Value **)*v496;
LABEL_127:
                if (v96)
                {
LABEL_154:
                  sub_1C5C3428C((uint64_t)&v518, v519 - 1);
                  if ((_DWORD)v519)
                  {
                    v112 = 0;
                    v113 = v518;
                    v114 = 8 * v519;
                    do
                    {
                      if (*v113)
                        *((_QWORD *)v518 + v112++) = *v113;
                      ++v113;
                      v114 -= 8;
                    }
                    while (v114);
                  }
                  else
                  {
                    v112 = 0;
                  }
                  sub_1C6154790((uint64_t)&v518, v112);
                  v103 = sub_1C5C34538((uint64_t)&v518, (llvm::Type *)(v519 - 1));
                  v102 = *((_QWORD *)v518 + v519 - 1);
                  v95 = v497;
                }
                else
                {
                  v102 = 0;
                  v103 = 0;
                }
                if (v95 >= 0x41 && v496)
                  MEMORY[0x1CAA32F9C](v496, 0x1000C8000313F17);
                if (v528 != &v530)
                  free(v528);
                if (v518 != &v520)
                  free(v518);
                if (v103)
                {
                  v104 = &v14[-4 * (*((_DWORD *)v14 + 5) & 0x7FFFFFF)];
                  v105 = (llvm::Value ***)&v104[4 * v92];
                  if (*v105)
                  {
                    *v105[2] = (llvm::Value *)v105[1];
                    v106 = v105[1];
                    if (v106)
                      v106[2] = (llvm::Value *)v105[2];
                  }
                  *v105 = v103;
                  v109 = v103[1];
                  v108 = (llvm::Value ****)(v103 + 1);
                  v107 = v109;
                  v105[1] = (llvm::Value **)v109;
                  if (v109)
                    *((_QWORD *)v107 + 2) = v105 + 1;
                  v104[4 * v92 + 2] = (uint64_t **)v108;
                  *v108 = v105;
                  v514 = 0;
                  llvm::RecursivelyDeleteTriviallyDeadInstructions(v102, 0, 0, &v511);
                  if (v514 == &v511)
                  {
                    v110 = (void (**)(void))((char *)v511 + 32);
LABEL_146:
                    (*v110)();
                  }
                  else if (v514)
                  {
                    v110 = (void (**)(void))((char *)*v514 + 40);
                    goto LABEL_146;
                  }
                  v517 = 0;
                  llvm::RecursivelyDeleteTriviallyDeadInstructions((uint64_t)v93, 0, 0, v516);
                  if (v517 == v516)
                  {
                    v111 = (void (**)(void))((char *)v516[0] + 32);
LABEL_151:
                    (*v111)();
                  }
                  else if (v517)
                  {
                    v111 = (void (**)(void))((char *)*v517 + 40);
                    goto LABEL_151;
                  }
                }
              }
              ++v92;
              sub_1C4774E38((uint64_t)&v504);
              if (v65 == (_DWORD)v92)
                goto LABEL_92;
              continue;
            }
          }
        }
LABEL_24:
        v6 |= v17;
        v9 = v486;
      }
      if (v9 == v10)
        goto LABEL_477;
    }
  }
LABEL_478:
  v476 = v6;
  v485 = v4 + 64;
  sub_1C6326114(v4 + 64);
  v483 = (llvm::ConstantInt *)(v4 + 88);
  sub_1C6326114(v4 + 88);
  sub_1C6320368(v4 + 8, &v518);
  v393 = v500;
  v496 = (llvm::Value **)v500;
  v394 = (const void *)v519;
  if ((void *)v519 != v518)
  {
    LODWORD(v463) = v520;
    v393 = malloc_type_malloc(8 * v520, 0x4065EBACuLL);
    if (!v393)
      goto LABEL_619;
    goto LABEL_616;
  }
  v497 = (llvm::Value **)v500;
  v395 = (void *)v519;
  while (2)
  {
    v396 = HIDWORD(v520);
    LODWORD(v498) = v520;
    if (v394 == v395)
      v397 = HIDWORD(v520);
    else
      v397 = v520;
    if (v397)
    {
      memmove(v393, v394, 8 * v397);
      v396 = HIDWORD(v520);
    }
    HIDWORD(v498) = v396;
    v499 = v521;
    v502 = 0;
    v503 = 0;
    __p = 0;
    sub_1C4D6CDA0(&__p, v530, v531, 0xAAAAAAAAAAAAAAABLL * ((v531 - (_BYTE *)v530) >> 3));
    v398 = v492;
    v487 = v492;
    v399 = __src;
    if (__src == v532)
    {
      v488 = (uint64_t)v492;
      v400 = __src;
    }
    else
    {
      v464 = v534;
      v398 = malloc_type_malloc(8 * v534, 0x4065EBACuLL);
      if (!v398)
      {
        if (v464)
          goto LABEL_624;
        v398 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v398)
          goto LABEL_624;
      }
      v488 = (uint64_t)v398;
      v400 = v532;
      v399 = __src;
    }
    v401 = v535;
    v489 = v534;
    if (v399 == v400)
      v402 = v535;
    else
      v402 = v534;
    if (v402)
    {
      memmove(v398, v399, 8 * v402);
      v401 = v535;
    }
    v490 = v401;
    v491 = v536;
    v494 = 0;
    v495 = 0;
    v493 = 0;
    sub_1C4D6CDA0(&v493, v537, v538, 0xAAAAAAAAAAAAAAABLL * ((v538 - (_BYTE *)v537) >> 3));
    v403 = 0;
    while (1)
    {
      if (v502 - (_BYTE *)__p != v494 - v493)
        goto LABEL_507;
      if (__p == v502)
        break;
      v404 = v493 + 8;
      v405 = (char *)__p + 8;
      while (1)
      {
        v406 = v405 - 8;
        if (*((_QWORD *)v405 - 1) != *((_QWORD *)v404 - 1))
          break;
        v407 = v404[8];
        if (v405[8])
          v408 = v407 == 0;
        else
          v408 = 1;
        if (v408)
        {
          if ((v405[8] == 0) == (v407 != 0))
            break;
        }
        else if (*(_QWORD *)v405 != *(_QWORD *)v404)
        {
          break;
        }
        v404 += 24;
        v405 += 24;
        if (v406 + 24 == v502)
          goto LABEL_584;
      }
LABEL_507:
      v409 = **((_QWORD **)v502 - 3);
      v410 = v409 + 40;
      v411 = *(_QWORD *)(v409 + 48);
      if (v411 != v410)
      {
        do
        {
          v412 = *(_QWORD *)(v411 + 8);
          if (v411)
            v413 = v411 - 24;
          else
            v413 = 0;
          if ((*(_DWORD *)(*(_QWORD *)v413 + 8) & 0xFD) != 0xD)
          {
LABEL_555:
            LOBYTE(v439) = 0;
            goto LABEL_556;
          }
          v516[0] = 0;
          v508 = 0;
          v511 = v516;
          v512 = (uint64_t)&v508;
          v414 = *(unsigned __int8 *)(v413 + 16);
          if (v414 == 5)
          {
            if (*(_WORD *)(v413 + 18) == 13
              && sub_1C4B037F8((_QWORD **)&v511, *(_QWORD *)(v413 - 32 * (*(_DWORD *)(v413 + 20) & 0x7FFFFFF)))&& (sub_1C4B037F8((_QWORD **)&v512, *(_QWORD *)(v413 - 32 * (*(_DWORD *)(v413 + 20) & 0x7FFFFFF) + 32)) & 1) != 0)
            {
LABEL_521:
              if (*(_QWORD *)v516[0] != *(_QWORD *)v508)
                goto LABEL_541;
              v415 = *(llvm::ScalarEvolution **)(a1 + 16);
              Unknown = llvm::ScalarEvolution::getUnknown(v415, v516[0]);
              v417 = llvm::ScalarEvolution::getUnknown(*(llvm::ScalarEvolution **)(a1 + 16), v508);
              v511 = &v513;
              v513 = Unknown;
              v514 = (void **)v417;
              v512 = 0x200000002;
              AddExpr = llvm::ScalarEvolution::getAddExpr((uint64_t)v415, (uint64_t)&v511, 0, 0);
              if (v511 != &v513)
                free(v511);
              v419 = a1;
              v420 = v485;
              goto LABEL_537;
            }
          }
          else if (v414 == 41
                 && sub_1C4B037F8((_QWORD **)&v511, *(_QWORD *)(v413 - 64))
                 && sub_1C4B037F8((_QWORD **)&v512, *(_QWORD *)(v413 - 32)))
          {
            goto LABEL_521;
          }
          v511 = v516;
          v512 = (uint64_t)&v508;
          v421 = *(unsigned __int8 *)(v413 + 16);
          if (v421 == 5)
          {
            if (*(_WORD *)(v413 + 18) != 15
              || !sub_1C4B037F8((_QWORD **)&v511, *(_QWORD *)(v413 - 32 * (*(_DWORD *)(v413 + 20) & 0x7FFFFFF)))|| (sub_1C4B037F8((_QWORD **)&v512, *(_QWORD *)(v413 - 32 * (*(_DWORD *)(v413 + 20) & 0x7FFFFFF) + 32)) & 1) == 0)
            {
              goto LABEL_541;
            }
          }
          else if (v421 != 43
                 || !sub_1C4B037F8((_QWORD **)&v511, *(_QWORD *)(v413 - 64))
                 || !sub_1C4B037F8((_QWORD **)&v512, *(_QWORD *)(v413 - 32)))
          {
            goto LABEL_541;
          }
          if (*(_QWORD *)v516[0] == *(_QWORD *)v508)
          {
            v422 = *(llvm::ScalarEvolution **)(a1 + 16);
            v423 = llvm::ScalarEvolution::getUnknown(v422, v516[0]);
            v424 = llvm::ScalarEvolution::getUnknown(*(llvm::ScalarEvolution **)(a1 + 16), v508);
            v511 = &v513;
            v513 = v423;
            v514 = (void **)v424;
            v512 = 0x200000002;
            AddExpr = llvm::ScalarEvolution::getAddExpr((uint64_t)v422, (uint64_t)&v511, 0, 0);
            if (v511 != &v513)
              free(v511);
            v420 = (uint64_t)v483;
            v419 = a1;
LABEL_537:
            v425 = sub_1C5C348CC(v419, AddExpr, (const llvm::Instruction *)v413, v420);
            if (v425)
            {
              v426 = (uint64_t)v425;
              v427 = operator new(0x60uLL);
              v428 = (llvm::Value *)(v427 + 8);
              v427[13] = v427[13] & 0x38000000 | 1;
              *(_QWORD *)v427 = 0;
              *((_QWORD *)v427 + 1) = 0;
              *((_QWORD *)v427 + 2) = 0;
              *((_QWORD *)v427 + 3) = v427 + 8;
              v429 = *(_QWORD *)v413;
              v515 = 257;
              v430 = (llvm::Value *)llvm::SExtInst::SExtInst((uint64_t)(v427 + 8), v426, v429, (uint64_t)&v511, v413);
              llvm::Value::takeName(v430, (llvm::Value *)v413);
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v413, v428, (llvm::Value *)1);
              v514 = 0;
              llvm::RecursivelyDeleteTriviallyDeadInstructions(v413, 0, 0, &v511);
              if (v514 == &v511)
              {
                v431 = (void (*)(void))*((_QWORD *)v511 + 4);
LABEL_582:
                v431();
              }
              else if (v514)
              {
                v431 = (void (*)(void))*((_QWORD *)*v514 + 5);
                goto LABEL_582;
              }
              LOBYTE(v439) = 1;
              goto LABEL_556;
            }
          }
LABEL_541:
          v432 = *(unsigned __int8 *)(v413 + 16);
          HIDWORD(v434) = v432 - 41;
          LODWORD(v434) = v432 - 41;
          v433 = v434 >> 1;
          v435 = (1 << (v434 >> 1)) & 0x47;
          if (v433 > 6 || v435 == 0)
            goto LABEL_555;
          v437 = v432 - 28;
          v438 = v432 - 28;
          if (v432 <= 0x1B)
            v438 = *(unsigned __int16 *)(v413 + 18);
          if (v438 != 13 || (*(_BYTE *)(v413 + 17) & 4) == 0)
            goto LABEL_549;
          v440 = *(_DWORD *)(v413 + 20);
          if ((v440 & 0x40000000) != 0)
          {
            if (!**(_QWORD **)(v413 - 8))
              goto LABEL_549;
            v516[0] = **(llvm::Value ***)(v413 - 8);
            v441 = *(llvm::Value ***)(v413 - 8);
          }
          else
          {
            v441 = (llvm::Value **)(v413 - 32 * (v440 & 0x7FFFFFF));
            if (!*v441)
              goto LABEL_549;
            v516[0] = *v441;
          }
          v444 = v441[4];
          if (v444)
          {
            v508 = v444;
            v445 = sub_1C4F8CF08(v413, 1, 0);
            LOBYTE(v439) = 0;
            if (v445)
            {
              v446 = *(llvm::ScalarEvolution **)(a1 + 16);
              v447 = llvm::ScalarEvolution::getUnknown(v446, v516[0]);
              v448 = llvm::ScalarEvolution::getUnknown(*(llvm::ScalarEvolution **)(a1 + 16), v508);
              v511 = &v513;
              v513 = v447;
              v514 = (void **)v448;
              v512 = 0x200000002;
              v449 = (void *)llvm::ScalarEvolution::getAddExpr((uint64_t)v446, (uint64_t)&v511, 0, 0);
              if (v511 != &v513)
                free(v511);
              v511 = v449;
              v450 = v485;
              goto LABEL_578;
            }
            goto LABEL_556;
          }
LABEL_549:
          LOBYTE(v439) = 0;
          if (v433 > 6 || ((1 << v433) & 0x47) == 0)
            goto LABEL_556;
          if (v432 <= 0x1B)
            v437 = *(unsigned __int16 *)(v413 + 18);
          if (v437 != 15 || (*(_BYTE *)(v413 + 17) & 4) == 0)
            goto LABEL_555;
          v442 = *(_DWORD *)(v413 + 20);
          if ((v442 & 0x40000000) != 0)
          {
            v439 = **(llvm::Value ***)(v413 - 8);
            if (!v439)
              goto LABEL_556;
            v516[0] = **(llvm::Value ***)(v413 - 8);
            v443 = *(llvm::Value ***)(v413 - 8);
          }
          else
          {
            v443 = (llvm::Value **)(v413 - 32 * (v442 & 0x7FFFFFF));
            if (!*v443)
              goto LABEL_555;
            v516[0] = *v443;
          }
          v439 = v443[4];
          if (v439)
          {
            v508 = v439;
            v451 = sub_1C4F8CF08(v413, 1, 0);
            LOBYTE(v439) = 0;
            if (v451)
            {
              v452 = *(llvm::ScalarEvolution **)(a1 + 16);
              v453 = llvm::ScalarEvolution::getUnknown(v452, v516[0]);
              v454 = llvm::ScalarEvolution::getUnknown(*(llvm::ScalarEvolution **)(a1 + 16), v508);
              v511 = &v513;
              v513 = v453;
              v514 = (void **)v454;
              v512 = 0x200000002;
              v455 = (void *)llvm::ScalarEvolution::getAddExpr((uint64_t)v452, (uint64_t)&v511, 0, 0);
              if (v511 != &v513)
                free(v511);
              v511 = v455;
              v450 = (uint64_t)v483;
LABEL_578:
              v456 = sub_1C6326228(v450, (uint64_t *)&v511);
              v457 = v456;
              v458 = *((unsigned int *)v456 + 4);
              if (v458 >= *((unsigned int *)v456 + 5))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v456 + 1), (uint64_t)(v456 + 3), v458 + 1, 8);
                v458 = *((unsigned int *)v457 + 4);
              }
              LOBYTE(v439) = 0;
              *(_QWORD *)(v457[1] + 8 * v458) = v413;
              ++*((_DWORD *)v457 + 4);
            }
          }
LABEL_556:
          v403 |= v439;
          v411 = v412;
        }
        while (v412 != v410);
      }
      sub_1C632106C((char *)&v496);
    }
LABEL_584:
    if (v493)
    {
      v494 = v493;
      operator delete(v493);
    }
    if ((_WORD *)v488 != v487)
      free((void *)v488);
    if (__p)
    {
      v502 = (char *)__p;
      operator delete(__p);
    }
    if (v497 != v496)
      free(v497);
    if (v537)
    {
      v538 = v537;
      operator delete(v537);
    }
    if (__src != v532)
      free(__src);
    if (v530)
    {
      v531 = v530;
      operator delete(v530);
    }
    if ((void *)v519 != v518)
      free((void *)v519);
    v2 = v476 | v403;
    if (byte_1ED822F68)
    {
      v459 = *(_QWORD *)(a2 + 80);
LABEL_602:
      if (v459 != v474)
      {
        v460 = v459 - 24;
        if (!v459)
          v460 = 0;
        v461 = v460 + 40;
        for (i = *(_QWORD *)(v460 + 48); ; i = *(_QWORD *)(i + 8))
        {
          if (i == v461)
          {
            v459 = *(_QWORD *)(v459 + 8);
            goto LABEL_602;
          }
          v463 = i ? (llvm::Value *)(i - 24) : 0;
          if (!*((_QWORD *)v463 + 1) && llvm::wouldInstructionBeTriviallyDead((uint64_t)v463, 0))
            break;
        }
        v496 = 0;
        v497 = 0;
        v498 = 0;
        LODWORD(v519) = 0;
        v523 = 0;
        v524 = 0;
        v518 = &unk_1E81A7208;
        v526 = &v496;
        LODWORD(v525) = 0;
        v522 = 0;
        v520 = 0;
        v521 = 0;
        v465 = sub_1C4816AD8((llvm::raw_ostream *)&v518, "Dead instruction detected!\n");
        v466 = sub_1C61ABD88(v465, v463);
        sub_1C4816AD8(v466, "\n");
        __break(1u);
LABEL_619:
        if ((_DWORD)v463 || (v393 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)
LABEL_624:
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
LABEL_616:
        v497 = (llvm::Value **)v393;
        v395 = v518;
        v394 = (const void *)v519;
        continue;
      }
    }
    return v2 & 1;
  }
}

uint64_t sub_1C5C33628()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5C30948(v0, 0);
}

void sub_1C5C33658(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5C3367C(uint64_t a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  llvm::AnalysisUsage::setPreservesCFG(a2);
  return sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
}

uint64_t sub_1C5C336FC(uint64_t a1, const llvm::Function *a2)
{
  uint64_t v4;
  char **v6;
  char *v7;
  uint64_t v8;
  char **v9;
  char *v10;
  uint64_t v11;
  char **v12;
  char *v13;
  uint64_t v14;
  char **v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void **v31;
  int v32;
  uint64_t v33;
  uint64_t v34[2];
  int v35;
  uint64_t v36[2];
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  void *__src;
  uint64_t v43;
  _QWORD v44[4];
  char v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  _QWORD v49[2];
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, a2) & 1) != 0)
    return 0;
  v6 = **(char ****)(a1 + 8);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != llvm::DominatorTreeWrapperPass::ID);
  v8 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), llvm::DominatorTreeWrapperPass::ID);
  v9 = **(char ****)(a1 + 8);
  do
  {
    v10 = *v9;
    v9 += 2;
  }
  while (v10 != llvm::ScalarEvolutionWrapperPass::ID);
  v11 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v12 = **(char ****)(a1 + 8);
  do
  {
    v13 = *v12;
    v12 += 2;
  }
  while (v13 != llvm::LoopInfoWrapperPass::ID);
  v14 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v12 - 1) + 96))(*(v12 - 1), llvm::LoopInfoWrapperPass::ID);
  v15 = **(char ****)(a1 + 8);
  do
  {
    v16 = *v15;
    v15 += 2;
  }
  while (v16 != llvm::TargetLibraryInfoWrapperPass::ID);
  v17 = (void *)(v8 + 32);
  v18 = v14 + 32;
  v19 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v15 - 1) + 96))(*(v15 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v34[0] = 0;
  v34[1] = 0;
  v35 = 0;
  v36[0] = 0;
  v36[1] = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  llvm::TargetLibraryAnalysis::run(v19 + 32, (uint64_t)a2, (uint64_t)&v41);
  *(_QWORD *)(v19 + 240) = v41;
  if (!*(_BYTE *)(v19 + 320))
  {
    v27 = (void *)(v8 + 32);
    v28 = v18;
    v29 = v11;
    v30 = (void *)(v19 + 264);
    *(_QWORD *)(v19 + 248) = v19 + 264;
    v31 = (void **)(v19 + 248);
    *(_QWORD *)(v19 + 256) = 0x600000000;
    v32 = v43;
    if (!(_DWORD)v43 || v31 == &__src)
      goto LABEL_37;
    if (v43 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v19 + 248, v19 + 264, v43, 8);
      v33 = v43;
      if (!(_DWORD)v43)
      {
LABEL_36:
        *(_DWORD *)(v19 + 256) = v32;
LABEL_37:
        *(_DWORD *)(v19 + 312) = v47;
        *(_BYTE *)(v19 + 320) = 1;
        v11 = v29;
        v18 = v28;
        v17 = v27;
        goto LABEL_26;
      }
      v30 = *v31;
    }
    else
    {
      v33 = v43;
    }
    memcpy(v30, __src, 8 * v33);
    goto LABEL_36;
  }
  if ((uint64_t *)(v19 + 240) != &v41)
  {
    v20 = (void *)(v8 + 32);
    v21 = v18;
    v22 = v11;
    v23 = (void **)(v19 + 248);
    v24 = v43;
    v25 = *(unsigned int *)(v19 + 256);
    if (v25 >= v43)
    {
      if ((_DWORD)v43)
        memmove(*v23, __src, 8 * v43);
      goto LABEL_24;
    }
    if (*(_DWORD *)(v19 + 260) < v43)
    {
      *(_DWORD *)(v19 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v19 + 248, v19 + 264, v24, 8);
    }
    else if ((_DWORD)v25)
    {
      memmove(*v23, __src, 8 * v25);
      goto LABEL_22;
    }
    v25 = 0;
LABEL_22:
    if (v25 != v43)
      memcpy((char *)*v23 + 8 * v25, (char *)__src + 8 * v25, 8 * v43 - 8 * v25);
LABEL_24:
    *(_DWORD *)(v19 + 256) = v24;
    v11 = v22;
    v18 = v21;
    v17 = v20;
  }
  *(_DWORD *)(v19 + 312) = v47;
LABEL_26:
  if (__src != v44)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v36);
  sub_1C4D8B52C(v34);
  v34[0] = a1;
  v26 = *(_BYTE *)(a1 + 28);
  v41 = 0;
  __src = v17;
  v43 = v11;
  v44[0] = v18;
  v44[1] = v19 + 240;
  v44[2] = sub_1C5C33AD0;
  v44[3] = v34;
  v45 = v26;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49[0] = 0;
  v49[1] = 0;
  v50 = 0;
  v4 = sub_1C5C30B84((uint64_t)&v41, (uint64_t)a2);
  sub_1C63261C4((uint64_t)v49);
  MEMORY[0x1CAA32FB4](v49[0], 8);
  sub_1C63261C4((uint64_t)&v46);
  MEMORY[0x1CAA32FB4](v46, 8);
  return v4;
}

uint64_t *sub_1C5C33AD0(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  char **v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13[2];
  int v14;
  _QWORD v15[2];
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v4 = **(char ****)(*(_QWORD *)a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != llvm::TargetTransformInfoWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v13[0] = 0;
  v13[1] = 0;
  v14 = 0;
  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v7 = *(_QWORD *)(v6 + 56);
  if (!v7)
  {
    sub_1C485C2F0();
    goto LABEL_10;
  }
  v2 = v15;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v7 + 48))(&v12, v7, a2);
  a2 = (uint64_t *)(v6 + 64);
  v8 = v12;
  if (!*(_BYTE *)(v6 + 72))
  {
    *(_QWORD *)(v6 + 64) = v12;
    *(_BYTE *)(v6 + 72) = 1;
    goto LABEL_7;
  }
  v12 = 0;
  v9 = *a2;
  *a2 = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = v12;
    v12 = 0;
    if (v10)
LABEL_10:
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
LABEL_7:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v2);
  sub_1C4D8B52C(v13);
  return a2;
}

void sub_1C5C33BF0(const void **a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const void **v6;
  unsigned int v7;
  unsigned int v8;
  const void **v14;
  unsigned int v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *v27;
  unint64_t v28;
  void *v29;
  int v30;
  int64_t v31;
  BOOL v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned __int8 *v37;
  int v38;
  unsigned __int8 *v39;
  uint64_t v40;
  _QWORD *p_src;
  uint64_t v42;
  unint64_t v43;
  int v44;
  int64_t v45;
  unint64_t v46;
  int v47;
  void *__src;
  unsigned int v49;
  unint64_t v50;
  unsigned int v51;

  v6 = a1;
  v7 = *(_DWORD *)(*(_QWORD *)a3 + 8) >> 8;
  v8 = a3[16];
  *((_DWORD *)a1 + 2) = v7;
  if (v8 - 21 <= 6)
  {
    if (v7 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)a1, 0, 0);
    else
      *a1 = 0;
    return;
  }
  if (v7 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)a1, 0, 0);
    v8 = a3[16];
  }
  else
  {
    *a1 = 0;
  }
  if (v8 == 16)
  {
    v14 = (const void **)(a3 + 24);
    if (*((_DWORD *)v6 + 2) <= 0x40u)
    {
      v15 = *((_DWORD *)a3 + 8);
      if (v15 <= 0x40)
      {
        v16 = *v14;
        *v6 = *v14;
        *((_DWORD *)v6 + 2) = v15;
        if (!v16)
          return;
        goto LABEL_79;
      }
    }
    if (v14 != v6)
    {
      llvm::APInt::reallocate((uint64_t)v6, *((_DWORD *)a3 + 8));
      v25 = *((unsigned int *)v6 + 2);
      if (v25 <= 0x40)
        *v6 = *v14;
      else
        memcpy((void *)*v6, *v14, ((unint64_t)(v25 + 63) >> 3) & 0x3FFFFFF8);
    }
    goto LABEL_74;
  }
  if (v8 < 0x1C || v8 - 59 < 0xFFFFFFEE)
  {
    switch(v8)
    {
      case 'D':
        v38 = *((_DWORD *)a3 + 5);
        if ((v38 & 0x40000000) != 0)
          v39 = (unsigned __int8 *)*((_QWORD *)a3 - 1);
        else
          v39 = &a3[-32 * (v38 & 0x7FFFFFF)];
        sub_1C5C33BF0(&__src, a2, *(_QWORD *)v39, 1, a5, a6);
        llvm::APInt::sext((llvm::APInt *)&__src, v7, (llvm::APInt *)&v50);
        break;
      case 'C':
        v36 = *((_DWORD *)a3 + 5);
        if ((v36 & 0x40000000) != 0)
          v37 = (unsigned __int8 *)*((_QWORD *)a3 - 1);
        else
          v37 = &a3[-32 * (v36 & 0x7FFFFFF)];
        sub_1C5C33BF0(&__src, a2, *(_QWORD *)v37, 0, 1, 0);
        llvm::APInt::zext((llvm::APInt *)&__src, v7, (uint64_t)&v50);
        break;
      case 'B':
        v26 = *((_DWORD *)a3 + 5);
        if ((v26 & 0x40000000) != 0)
          v27 = (unsigned __int8 *)*((_QWORD *)a3 - 1);
        else
          v27 = &a3[-32 * (v26 & 0x7FFFFFF)];
        sub_1C5C33BF0(&__src, a2, *(_QWORD *)v27, a4, a5, a6);
        llvm::APInt::trunc((llvm::APInt *)&__src, v7, (llvm::APInt *)&v50);
        break;
      default:
        goto LABEL_74;
    }
    if (*((_DWORD *)v6 + 2) >= 0x41u && *v6)
      MEMORY[0x1CAA32F9C](*v6, 0x1000C8000313F17);
    *v6 = (const void *)v50;
    *((_DWORD *)v6 + 2) = v51;
    v51 = 0;
    if (v49 >= 0x41 && __src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    goto LABEL_74;
  }
  if (v8 > 0x39 || ((1 << v8) & 0x2000A0000000000) == 0)
    goto LABEL_74;
  v17 = *((_QWORD *)a3 - 8);
  v18 = *((_QWORD *)a3 - 4);
  if (v8 == 57)
  {
    if (!llvm::haveNoCommonBitsSet(*((llvm **)a3 - 8), *((const llvm::Value **)a3 - 4), *(void ***)(a2 + 232), 0, (llvm::AssumptionCache *)a3, *(const llvm::Instruction **)(a2 + 240), (const llvm::DominatorTree *)1))goto LABEL_74;
    v8 = a3[16];
  }
  if (v8 != 41 || !(_DWORD)a6 || (a5 & 1) != 0)
  {
    if ((v8 | 2) != 0x2B)
      goto LABEL_45;
LABEL_41:
    if ((!(_DWORD)a4 || (a3[17] & 4) != 0) && (!(_DWORD)a5 || (a3[17] & 2) != 0))
      goto LABEL_45;
LABEL_74:
    v35 = *((_DWORD *)v6 + 2);
    goto LABEL_75;
  }
  if (*(_BYTE *)(v17 + 16) != 16 || !v17)
    goto LABEL_30;
  v19 = (_QWORD *)(v17 + 24);
  v20 = *(_DWORD *)(v17 + 32);
  v21 = v20 - 1;
  if (v20 >= 0x41)
    v19 = (_QWORD *)(*v19 + 8 * (v21 >> 6));
  if (((*v19 >> v21) & 1) != 0)
  {
LABEL_30:
    if (*(_BYTE *)(v18 + 16) != 16 || !v18)
      goto LABEL_41;
    v22 = (_QWORD *)(v18 + 24);
    v23 = *(_DWORD *)(v18 + 32);
    v24 = v23 - 1;
    if (v23 >= 0x41)
      v22 = (_QWORD *)(*v22 + 8 * (v24 >> 6));
    if (((*v22 >> v24) & 1) != 0)
      goto LABEL_41;
  }
LABEL_45:
  v28 = *(unsigned int *)(a2 + 8);
  sub_1C5C33BF0(&__src, a2, *((_QWORD *)a3 - 8), a4, a5, 0);
  v29 = __src;
  if (v49 >= 0x41)
  {
    v30 = 0;
    v31 = ((unint64_t)v49 + 63) >> 6;
    do
    {
      v32 = v31-- < 1;
      if (v32)
        break;
      v33 = *((_QWORD *)__src + v31);
      v30 += __clz(v33);
    }
    while (!v33);
    v34 = v49 | 0xFFFFFFC0;
    if ((v49 & 0x3F) == 0)
      v34 = 0;
    if (v49 - v30 - v34 > 0x40)
      goto LABEL_54;
    v29 = *(void **)__src;
  }
  if (!v29)
  {
    sub_1C6154790(a2, v28);
    sub_1C5C33BF0(&v50, a2, *((_QWORD *)a3 - 4), a4, a5, 0);
    if (v49 >= 0x41 && __src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    p_src = (_QWORD *)v50;
    __src = (void *)v50;
    v42 = v51;
    v49 = v51;
    if (a3[16] == 43)
    {
      if (v51 > 0x40)
      {
        v50 = operator new[]();
        memcpy((void *)v50, __src, ((unint64_t)(v42 + 63) >> 3) & 0x3FFFFFF8);
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v50);
      }
      else
      {
        if (v51)
          v43 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v51;
        else
          v43 = 0;
        v50 = v43 & ~v50;
      }
      llvm::APInt::operator++((uint64_t)&v50);
      LODWORD(v42) = v51;
      p_src = (_QWORD *)v50;
      v51 = 0;
      if (v49 > 0x40 && __src)
      {
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        __src = p_src;
        v49 = v42;
        if (v51 >= 0x41 && v50)
        {
          MEMORY[0x1CAA32F9C](v50, 0x1000C8000313F17);
          LODWORD(v42) = v49;
          p_src = __src;
        }
      }
      else
      {
        __src = (void *)v50;
        v49 = v42;
      }
    }
    if (v42 >= 0x41)
    {
      v44 = 0;
      v45 = ((unint64_t)v42 + 63) >> 6;
      do
      {
        v32 = v45-- < 1;
        if (v32)
          break;
        v46 = p_src[v45];
        v44 += __clz(v46);
      }
      while (!v46);
      v47 = v42 | 0xFFFFFFC0;
      if ((v42 & 0x3F) == 0)
        v47 = 0;
      if ((v42 - v44 - v47) > 0x40)
        goto LABEL_54;
    }
    else
    {
      p_src = &__src;
    }
    if (!*p_src)
      sub_1C6154790(a2, v28);
  }
LABEL_54:
  if (*((_DWORD *)v6 + 2) >= 0x41u && *v6)
    MEMORY[0x1CAA32F9C](*v6, 0x1000C8000313F17);
  *v6 = __src;
  v35 = v49;
  *((_DWORD *)v6 + 2) = v49;
LABEL_75:
  if (v35 < 0x41)
    goto LABEL_78;
  if (v35 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v6) <= 0x40)
  {
    v6 = (const void **)*v6;
LABEL_78:
    if (!*v6)
      return;
  }
LABEL_79:
  v40 = *(unsigned int *)(a2 + 8);
  if (v40 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v40 + 1, 8);
    LODWORD(v40) = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v40) = a3;
  ++*(_DWORD *)(a2 + 8);
}

llvm::Value *sub_1C5C3428C(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  llvm::Value *v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  llvm::Value *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::Value *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::Value **v25;
  llvm::Value *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::Value **v33;
  llvm::Value *v34;
  int v35;
  int v36;
  llvm::Value *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  llvm::Value *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  __int16 v49;

  v3 = *(_QWORD *)a1;
  v4 = *(llvm::Value **)(*(_QWORD *)a1 + 8 * a2);
  if (a2)
  {
    v5 = a2;
    v6 = *((unsigned __int8 *)v4 + 16);
    if (v4)
      v7 = v6 >= 0x1C;
    else
      v7 = 0;
    if (!v7 || v6 - 79 < 0xFFFFFFF3)
    {
LABEL_23:
      v15 = *((_QWORD *)v4 - 8);
      v16 = a2 - 1;
      v17 = *(_QWORD *)(v3 + 8 * v16);
      v18 = sub_1C5C3467C(a1, *((llvm::Value **)v4 + 4 * (v15 == v17) - 8));
      v19 = sub_1C5C3428C(a1, v16);
      v20 = *((_BYTE *)v4 + 16) - 28;
      if (v15 != v17)
      {
        if ((*((_BYTE *)v4 + 23) & 0x10) == 0)
        {
          v39 = 0;
          v38 = &byte_1C871356D;
          goto LABEL_40;
        }
        v21 = ***(_QWORD ***)v4;
        v22 = *(_QWORD *)(v21 + 152);
        v23 = *(unsigned int *)(v21 + 168);
        if ((_DWORD)v23)
        {
          LODWORD(v24) = (v23 - 1) & ((v4 >> 4) ^ (v4 >> 9));
          v25 = (llvm::Value **)(v22 + 16 * v24);
          v26 = *v25;
          if (*v25 == v4)
          {
LABEL_39:
            v37 = v25[1];
            v40 = *(_QWORD *)v37;
            v38 = (char *)v37 + 16;
            v39 = v40;
LABEL_40:
            v49 = 261;
            v47 = v38;
            v48 = v39;
            v41 = *(_QWORD *)(a1 + 224);
            v42 = v18;
LABEL_44:
            result = llvm::BinaryOperator::Create(v20, v42, v19, (uint64_t)&v47, v41);
            goto LABEL_45;
          }
          v27 = 1;
          while (v26 != (llvm::Value *)-4096)
          {
            v28 = v24 + v27++;
            v24 = v28 & (v23 - 1);
            v26 = *(llvm::Value **)(v22 + 16 * v24);
            if (v26 == v4)
            {
              v25 = (llvm::Value **)(v22 + 16 * v24);
              goto LABEL_39;
            }
          }
        }
        v25 = (llvm::Value **)(v22 + 16 * v23);
        goto LABEL_39;
      }
      if ((*((_BYTE *)v4 + 23) & 0x10) == 0)
      {
        v45 = 0;
        v44 = &byte_1C871356D;
        goto LABEL_43;
      }
      v29 = ***(_QWORD ***)v4;
      v30 = *(_QWORD *)(v29 + 152);
      v31 = *(unsigned int *)(v29 + 168);
      if ((_DWORD)v31)
      {
        LODWORD(v32) = (v31 - 1) & ((v4 >> 4) ^ (v4 >> 9));
        v33 = (llvm::Value **)(v30 + 16 * v32);
        v34 = *v33;
        if (*v33 == v4)
        {
LABEL_42:
          v43 = v33[1];
          v46 = *(_QWORD *)v43;
          v44 = (char *)v43 + 16;
          v45 = v46;
LABEL_43:
          v49 = 261;
          v47 = v44;
          v48 = v45;
          v41 = *(_QWORD *)(a1 + 224);
          v42 = (_QWORD *)v19;
          v19 = (uint64_t)v18;
          goto LABEL_44;
        }
        v35 = 1;
        while (v34 != (llvm::Value *)-4096)
        {
          v36 = v32 + v35++;
          v32 = v36 & (v31 - 1);
          v34 = *(llvm::Value **)(v30 + 16 * v32);
          if (v34 == v4)
          {
            v33 = (llvm::Value **)(v30 + 16 * v32);
            goto LABEL_42;
          }
        }
      }
      v33 = (llvm::Value **)(v30 + 16 * v31);
      goto LABEL_42;
    }
    v9 = *(_DWORD *)(a1 + 88);
    while (1)
    {
      if (v9 >= *(_DWORD *)(a1 + 92))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 80, a1 + 96, v9 + 1, 8);
        v9 = *(_DWORD *)(a1 + 88);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v9) = v4;
      v9 = *(_DWORD *)(a1 + 88) + 1;
      *(_DWORD *)(a1 + 88) = v9;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v5) = 0;
      v3 = *(_QWORD *)a1;
      v10 = (v5 - 1);
      v4 = *(llvm::Value **)(*(_QWORD *)a1 + 8 * v10);
      if ((_DWORD)v5 == 1)
        break;
      v11 = *((unsigned __int8 *)v4 + 16);
      --v5;
      if (v4)
        v12 = v11 >= 0x1C;
      else
        v12 = 0;
      if (!v12 || v11 - 79 < 0xFFFFFFF3)
      {
        a2 = v5;
        v5 = v10;
        goto LABEL_23;
      }
    }
  }
  result = sub_1C5C3467C(a1, v4);
  v5 = 0;
LABEL_45:
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v5) = result;
  return result;
}

llvm::Value **sub_1C5C34538(uint64_t a1, llvm::Type *a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Value *v8;
  llvm::APInt *v9;
  unsigned int v10;
  char v13;
  llvm::Value *v14;
  uint64_t v15;
  _BYTE v16[32];
  __int16 v17;

  if (!(_DWORD)a2)
    return llvm::Constant::getNullValue(***(llvm::Constant ****)a1, a2);
  v3 = *(_BYTE **)(*(_QWORD *)a1 + 8 * a2);
  v4 = *((_QWORD *)v3 - 8);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8 * ((_DWORD)a2 - 1));
  v6 = sub_1C5C34538(a1);
  v7 = v6;
  v8 = *(llvm::Value **)&v3[32 * (v4 == v5) - 64];
  if (v6 && *(_BYTE *)(v6 + 16) == 16)
  {
    v9 = (llvm::APInt *)(v6 + 24);
    v10 = *(_DWORD *)(v7 + 32);
    if (v10 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v9) == v10)
        goto LABEL_9;
    }
    else if (!*(_QWORD *)v9)
    {
LABEL_9:
      if (v3[16] != 43 || v4 != v5)
        return (llvm::Value **)v8;
    }
  }
  if (v3[16] == 57)
    v13 = 13;
  else
    v13 = v3[16] - 28;
  v17 = 257;
  if (v4 == v5)
  {
    v14 = (llvm::Value *)v7;
    v15 = (uint64_t)v8;
  }
  else
  {
    v14 = v8;
    v15 = v7;
  }
  v8 = llvm::BinaryOperator::Create(v13, v14, v15, (uint64_t)v16, *(_QWORD *)(a1 + 224));
  llvm::Value::takeName(v8, (llvm::Value *)v3);
  return (llvm::Value **)v8;
}

llvm::Value *sub_1C5C3467C(uint64_t a1, llvm::Value *a2)
{
  llvm::Value *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  llvm::Value *Cast;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::ValueSymbolTable *v21;

  v2 = a2;
  v3 = *(unsigned int *)(a1 + 88);
  if (!(_DWORD)v3)
    return a2;
  v5 = 8 * v3;
  v6 = *(_QWORD *)(a1 + 80) - 8;
  do
  {
    v7 = *(unsigned __int8 **)(v6 + v5);
    if (v2 && *((unsigned __int8 *)v2 + 16) <= 0x14u)
    {
      Cast = (llvm::Value *)llvm::ConstantExpr::getCast(v7[16] - 28);
    }
    else
    {
      llvm::Instruction::clone((llvm::Instruction *)v7);
      Cast = (llvm::Value *)v9;
      v10 = *(_DWORD *)(v9 + 20);
      if ((v10 & 0x40000000) != 0)
        v11 = *(_QWORD *)(v9 - 8);
      else
        v11 = v9 - 32 * (v10 & 0x7FFFFFF);
      if (*(_QWORD *)v11)
      {
        **(_QWORD **)(v11 + 16) = *(_QWORD *)(v11 + 8);
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
          *(_QWORD *)(v12 + 16) = *(_QWORD *)(v11 + 16);
      }
      *(_QWORD *)v11 = v2;
      v15 = *((_QWORD *)v2 + 1);
      v14 = (_QWORD *)((char *)v2 + 8);
      v13 = v15;
      *(_QWORD *)(v11 + 8) = v15;
      if (v15)
        *(_QWORD *)(v13 + 16) = v11 + 8;
      *(_QWORD *)(v11 + 16) = v14;
      *v14 = v11;
      v16 = *(_QWORD *)(a1 + 224);
      v17 = *(_QWORD *)(v16 + 40);
      *(_QWORD *)(v9 + 40) = v17;
      *(_WORD *)(v17 + 18) &= ~0x8000u;
      if ((*(_BYTE *)(v9 + 23) & 0x10) != 0)
      {
        v20 = *(_QWORD *)(v17 + 56);
        if (v20)
        {
          v21 = *(llvm::ValueSymbolTable **)(v20 + 104);
          if (v21)
            llvm::ValueSymbolTable::reinsertValue(v21, Cast);
        }
      }
      v19 = *(_QWORD *)(v16 + 24);
      v18 = (_QWORD *)(v16 + 24);
      *((_QWORD *)Cast + 3) = v19;
      *((_QWORD *)Cast + 4) = v18;
      *(_QWORD *)(v19 + 8) = (char *)Cast + 24;
      *v18 = (char *)Cast + 24;
    }
    v2 = Cast;
    v5 -= 8;
  }
  while (v5);
  return Cast;
}

void sub_1C5C347C0(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_DWORD *)(a1 + 8);
  sub_1C63261C4(a1);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 8) = 0;
    if ((_DWORD)v4)
    {
      v5 = *(_QWORD **)a1;
      v6 = 40 * v4;
      do
      {
        *v5 = -4096;
        v5 += 5;
        v6 -= 40;
      }
      while (v6);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    if ((_DWORD)v4)
    {
      v7 = (4 * (int)v4 / 3u + 1) | ((unint64_t)(4 * (int)v4 / 3u + 1) >> 1);
      v8 = v7 | (v7 >> 2) | ((v7 | (v7 >> 2)) >> 4);
      LODWORD(v8) = (((v8 | (v8 >> 8)) >> 16) | v8 | (v8 >> 8)) + 1;
      *(_DWORD *)(a1 + 16) = v8;
      v9 = operator new(40 * v8, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = 0;
      v10 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v10)
      {
        v11 = 40 * v10;
        do
        {
          *v9 = -4096;
          v9 += 5;
          v11 -= 40;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
    }
  }
}

const llvm::Value *sub_1C5C348CC(uint64_t a1, uint64_t a2, const llvm::Instruction *a3, uint64_t a4)
{
  int v7;
  const llvm::Value *v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v13;

  v13 = 0;
  v7 = sub_1C61DBB84(*(_QWORD *)a4, *(_DWORD *)(a4 + 16), a2, &v13);
  v8 = 0;
  v9 = v13;
  if (v7)
    v10 = v13 == *(_QWORD *)a4 + 40 * *(unsigned int *)(a4 + 16);
  else
    v10 = 1;
  if (!v10)
  {
    v11 = *(_DWORD *)(v13 + 16);
    if (v11)
    {
      while (1)
      {
        v8 = *(const llvm::Value **)(*(_QWORD *)(v9 + 8) + 8 * v11 - 8);
        if (llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(a1 + 8), v8, a3))
          break;
        v11 = *(_DWORD *)(v9 + 16) - 1;
        *(_DWORD *)(v9 + 16) = v11;
        if (!v11)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

_QWORD *sub_1C5C34984(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6326350(a1, v4, v4 + 40 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 40 * v10;
    do
    {
      *result = -4096;
      result += 5;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

__n128 sub_1C5C34A48(char **a1, __n128 *a2, _WORD *a3)
{
  char *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED822E28, "disable-separate-const-offset-from-gep", 0x26uLL);
  v6 = *a1;
  byte_1ED822EA8 = **a1;
  byte_1ED822EB9 = 1;
  byte_1ED822EB8 = *v6;
  result = *a2;
  xmmword_1ED822E48 = (__int128)*a2;
  word_1ED822E32 = (32 * (*a3 & 3)) | word_1ED822E32 & 0xFF9F;
  return result;
}

__n128 sub_1C5C34ACC(char **a1, __n128 *a2, _WORD *a3)
{
  char *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED822EE8, "reassociate-geps-verify-no-dead-code", 0x24uLL);
  v6 = *a1;
  byte_1ED822F68 = **a1;
  byte_1ED822F79 = 1;
  byte_1ED822F78 = *v6;
  result = *a2;
  xmmword_1ED822F08 = (__int128)*a2;
  word_1ED822EF2 = (32 * (*a3 & 3)) | word_1ED822EF2 & 0xFF9F;
  return result;
}

uint64_t sub_1C5C34B50(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::TargetIRAnalysis::Key, a2) + 8;
}

uint64_t sub_1C5C34B78()
{
  int v1;
  __n128 v2;
  char v3;
  char *v4;

  v3 = 0;
  v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Do not separate the constant offset from a GEP instruction";
  v2.n128_u64[1] = 58;
  v1 = 1;
  sub_1C6326444(&v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED822E28, &dword_1C475E000);
  v3 = 0;
  v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Verify this pass produces no dead code";
  v2.n128_u64[1] = 38;
  v1 = 1;
  sub_1C63264E8(&v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED822EE8, &dword_1C475E000);
}

void llvm::SimpleLoopUnswitchPass::run(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t ***v10;
  size_t v11;
  void **v12;
  const char *v13;
  llvm::LoopInfo *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ****v19;
  uint64_t ***v20;
  int v21;
  int v22;
  uint64_t ***v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  void *__dst[2];
  unint64_t v30;
  uint64_t v31;
  char *v32[2];
  uint64_t v33;
  _BYTE *v34;
  void *v35;
  uint64_t v36;
  int v37;
  _BYTE v38[64];
  void *v39;
  uint64_t v40;
  _BYTE v41[64];
  _QWORD *v42;
  _QWORD v43[2];
  llvm::LoopInfo *v44;
  char *v45[2];
  uint64_t v46;
  _BYTE *v47;
  void *v48;
  uint64_t v49;
  int v50;
  _BYTE v51[64];
  void *v52;
  uint64_t v53;
  _BYTE v54[64];
  _QWORD **v55;
  _QWORD *v56[2];
  char v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v10 = **(uint64_t *****)(a2 + 32);
  if (!v10 || (*((_BYTE *)v10 + 23) & 0x10) == 0)
  {
    v11 = 14;
    HIBYTE(v30) = 14;
    v12 = __dst;
    v13 = "<unnamed loop>";
    goto LABEL_4;
  }
  v15 = ***v10;
  v16 = *(_QWORD *)(v15 + 152);
  v17 = *(unsigned int *)(v15 + 168);
  if ((_DWORD)v17)
  {
    LODWORD(v18) = (v17 - 1) & ((v10 >> 4) ^ (v10 >> 9));
    v19 = (uint64_t ****)(v16 + 16 * v18);
    v20 = *v19;
    if (*v19 == v10)
      goto LABEL_32;
    v21 = 1;
    while (v20 != (uint64_t ***)-4096)
    {
      v22 = v18 + v21++;
      v18 = v22 & (v17 - 1);
      v20 = *(uint64_t ****)(v16 + 16 * v18);
      if (v20 == v10)
      {
        v19 = (uint64_t ****)(v16 + 16 * v18);
        goto LABEL_32;
      }
    }
  }
  v19 = (uint64_t ****)(v16 + 16 * v17);
LABEL_32:
  v23 = v19[1];
  v24 = (unint64_t)*v23;
  v13 = (const char *)(v23 + 2);
  v11 = v24;
  if (v24 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v11 >= 0x17)
  {
    v25 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v25 = v11 | 7;
    v26 = v25 + 1;
    v12 = (void **)operator new(v25 + 1);
    __dst[1] = (void *)v11;
    v30 = v26 | 0x8000000000000000;
    __dst[0] = v12;
    goto LABEL_4;
  }
  HIBYTE(v30) = v11;
  v12 = __dst;
  if (v11)
LABEL_4:
    memmove(v12, v13, v11);
  *((_BYTE *)v12 + v11) = 0;
  v28[0] = a2;
  v28[1] = a4;
  v28[2] = __dst;
  v27 = a4;
  LOBYTE(v44) = 0;
  v57 = 0;
  v14 = *(llvm::LoopInfo **)(a3 + 72);
  if (v14)
  {
    v31 = *(_QWORD *)(a3 + 72);
    v32[0] = (char *)&v33;
    v32[1] = (char *)0x1000000000;
    v34 = v38;
    v35 = v38;
    v39 = v41;
    v40 = 0x800000000;
    v43[1] = 0;
    v43[0] = 0;
    v42 = v43;
    v44 = v14;
    v45[0] = (char *)&v46;
    v45[1] = (char *)0x1000000000;
    v47 = v51;
    v48 = v51;
    v49 = 8;
    v50 = 0;
    v36 = 8;
    v37 = 0;
    v52 = v54;
    v53 = 0x800000000;
    v56[1] = 0;
    v56[0] = 0;
    v55 = v56;
    v57 = 1;
    sub_1C61247C0((uint64_t)&v42, 0);
    if (v39 != v41)
      free(v39);
    if (v35 != v34)
      free(v35);
    sub_1C4EE41F8(v32);
    v14 = (llvm::LoopInfo *)&v44;
    if (!v57)
      v14 = 0;
  }
  if ((sub_1C5C34FEC(a2, *(llvm::BasicBlock **)(a3 + 16), *(llvm::DominatorTree **)(a3 + 24), *(llvm::AssumptionCache **)(a3 + 8), *(llvm::MemorySSA **)a3, *(unint64_t **)(a3 + 48), a1[1], *a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1C5C48AA0, (uint64_t)v28, *(int32x2_t **)(a3 + 32), v14, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1C5C48C34, (uint64_t)&v27) & 1) != 0)
  {
    llvm::getLoopPassPreservedAnalyses(a5);
    if (*(_QWORD *)(a3 + 72))
      sub_1C4DDB144(a5, (uint64_t)&llvm::MemorySSAAnalysis::Key);
  }
  else
  {
    *(_QWORD *)a5 = a5 + 32;
    *(_QWORD *)(a5 + 8) = a5 + 32;
    *(_QWORD *)(a5 + 16) = 2;
    *(_DWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 48) = a5 + 80;
    *(_QWORD *)(a5 + 56) = a5 + 80;
    *(_QWORD *)(a5 + 64) = 2;
    *(_DWORD *)(a5 + 72) = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a5, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  if (v57)
  {
    sub_1C61247C0((uint64_t)&v55, v56[0]);
    if (v52 != v54)
      free(v52);
    if (v48 != v47)
      free(v48);
    sub_1C4EE41F8(v45);
  }
  if (SHIBYTE(v30) < 0)
    operator delete(__dst[0]);
}

uint64_t sub_1C5C34FEC(uint64_t a1, llvm::BasicBlock *a2, llvm::DominatorTree *a3, llvm::AssumptionCache *a4, llvm::MemorySSA *a5, unint64_t *a6, int a7, int a8, void (*a9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t a10, int32x2_t *a11, llvm::LoopInfo *a12, void (*a13)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t a14)
{
  int32x2_t **v24;
  uint64_t v25;
  uint64_t v26;
  int32x2_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t LoopLatch;
  uint64_t i;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t ***v55;
  int v56;
  char v57;
  int v58;
  llvm **v59;
  char v60;
  uint64_t v61;
  _BOOL4 isLoopInvariant;
  unsigned __int8 *v63;
  llvm *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t ***v69;
  uint64_t v70;
  llvm::BasicBlock *v71;
  _QWORD *v72;
  uint64_t v73;
  unsigned int *v74;
  _QWORD *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t SuccessorWeight;
  int v80;
  uint64_t ***v81;
  llvm::BasicBlock *v82;
  _QWORD *v83;
  const llvm::SwitchInst *v84;
  uint64_t v85;
  unsigned int *v86;
  _QWORD *v87;
  uint64_t v88;
  char *v89;
  BOOL v90;
  void *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  const llvm::Loop *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  int v104;
  llvm::BasicBlock *v105;
  uint64_t v106;
  unsigned int *v107;
  _QWORD *v108;
  uint64_t v109;
  unsigned int *v110;
  int v111;
  llvm::BasicBlock *v112;
  uint64_t v113;
  unsigned __int8 *v114;
  int v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  llvm *v119;
  int v120;
  int v121;
  uint64_t v122;
  const llvm::Loop *v123;
  const llvm::Loop *v124;
  const llvm::Loop *v125;
  uint64_t LoopPredecessor;
  const llvm::Twine *v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  llvm::BasicBlock *v131;
  uint64_t v132;
  llvm::BasicBlock *v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t **v142;
  llvm::ValueSymbolTable *v143;
  llvm::ValueSymbolTable *v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int32x2_t **v150;
  uint64_t v151;
  llvm::Value *v152;
  unsigned int v153;
  uint64_t v154;
  _QWORD *v155;
  void **v156;
  unint64_t v157;
  uint64_t v158;
  _DWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  _DWORD *v165;
  const llvm::APInt *v166;
  uint64_t v167;
  llvm::ValueHandleBase *v168;
  llvm::ConstantInt *v169;
  unsigned int v170;
  char v171;
  void **v172;
  void **v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  BOOL v179;
  _QWORD *v180;
  uint64_t v181;
  unsigned int *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  unsigned int *v188;
  char v189;
  int v190;
  uint64_t ***v191;
  uint64_t v192;
  llvm::ValueSymbolTable *v193;
  uint64_t **v194;
  int v195;
  uint64_t ***v196;
  uint64_t **v197;
  int v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t **v202;
  int v203;
  int v204;
  const llvm::Loop *v205;
  const llvm::Loop *v206;
  unsigned int v207;
  llvm::BasicBlock *v208;
  char *v209;
  char *v210;
  int v211;
  uint64_t ***v212;
  int v213;
  int v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  uint64_t **v219;
  uint64_t v220;
  unsigned int v221;
  uint64_t v222;
  uint64_t **v223;
  int v224;
  int v225;
  const llvm::Loop *v226;
  void *v227;
  uint64_t ***v228;
  uint64_t v229;
  const llvm::Loop *v230;
  unsigned int v231;
  unsigned int v232;
  uint64_t v233;
  uint64_t ***v234;
  uint64_t v235;
  uint64_t ***v236;
  uint64_t ***v237;
  uint64_t ***v238;
  uint64_t ***v239;
  uint64_t v240;
  const llvm::Twine *v241;
  uint64_t v242;
  uint64_t v243;
  llvm *v244;
  int v245;
  llvm::BasicBlock *v246;
  _QWORD *v247;
  uint64_t ***v248;
  uint64_t ***v249;
  uint64_t **v250;
  uint64_t **v251;
  _DWORD *v252;
  void *v253;
  const llvm::SwitchInst *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int v258;
  BOOL v259;
  uint64_t v261;
  llvm::BasicBlock *v262;
  uint64_t **v263;
  char *v264;
  char *v265;
  _QWORD *v266;
  uint64_t v267;
  uint64_t v268;
  unsigned int v269;
  BOOL v270;
  char v272;
  _QWORD *v273;
  uint64_t v274;
  _QWORD *v275;
  uint64_t v276;
  llvm::BasicBlock *v277;
  uint64_t v278;
  char *v279;
  uint64_t v280;
  BOOL v281;
  int v282;
  char *v283;
  _QWORD *v284;
  uint64_t v285;
  unsigned int v286;
  int v287;
  uint64_t v288;
  unsigned int v289;
  unsigned int v290;
  uint64_t ***v291;
  llvm::BasicBlock *v292;
  int v293;
  uint64_t v294;
  _DWORD *v295;
  uint64_t v296;
  int v297;
  uint64_t ***v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  int v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t ***v309;
  uint64_t **v310;
  uint64_t *v311;
  uint64_t **v312;
  uint64_t *v313;
  uint64_t *v314;
  uint64_t v315;
  uint64_t *v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t *v319;
  char *v320;
  unsigned int v321;
  unint64_t v322;
  unsigned int v323;
  uint64_t *v324;
  uint64_t v325;
  llvm **v326;
  unint64_t *v327;
  unint64_t v328;
  int *v329;
  int *v330;
  char *v331;
  unsigned int v332;
  int *v333;
  int *v334;
  int *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t *v338;
  uint64_t v339;
  llvm **v340;
  uint64_t v341;
  llvm::Loop *v342;
  llvm::ConstantInt *v343;
  uint64_t v344;
  const llvm::Loop *v345;
  uint64_t **v346;
  llvm::Value *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  llvm::Value **v352;
  llvm::Value *v353;
  int v354;
  int v355;
  uint64_t v356;
  size_t *v357;
  size_t v358;
  unsigned __int8 *v359;
  int v360;
  int v361;
  _QWORD *v362;
  uint64_t v363;
  uint64_t v364;
  BOOL v365;
  char v366;
  uint64_t v367;
  uint64_t v368;
  _BOOL4 v369;
  llvm::BasicBlock **v370;
  llvm::BasicBlock **v371;
  int v372;
  llvm::BasicBlock *v373;
  uint64_t v374;
  unsigned int v375;
  uint64_t v376;
  llvm::BasicBlock *v377;
  int v378;
  int v379;
  _QWORD *j;
  _QWORD *v381;
  uint64_t v382;
  unsigned __int8 *v383;
  _QWORD *v384;
  _QWORD *v385;
  unsigned int v386;
  _QWORD *v387;
  int v388;
  BOOL v389;
  int v390;
  uint64_t *v391;
  _DWORD *v393;
  uint64_t *v394;
  unsigned int v395;
  int v396;
  void **v397;
  void *v398;
  int v399;
  char *v400;
  int v401;
  char *v402;
  unsigned __int8 *v403;
  int v404;
  llvm::BasicBlock **v405;
  uint64_t v406;
  uint64_t v407;
  unsigned __int8 *v408;
  uint64_t *v409;
  uint64_t LoopID;
  llvm::Instruction *v412;
  _BYTE *v413;
  _BYTE *v414;
  char *v415;
  uint64_t k;
  uint64_t v417;
  int v418;
  uint64_t m;
  _QWORD *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unsigned __int8 *v431;
  llvm::Instruction *v432;
  char *v433;
  char *v434;
  int v435;
  unint64_t v436;
  uint64_t v437;
  _QWORD *v438;
  uint64_t *v439;
  unsigned int v440;
  uint64_t v441;
  BOOL v442;
  uint64_t v443;
  uint64_t v444;
  int v445;
  unint64_t v446;
  uint64_t *v447;
  int v448;
  uint64_t v449;
  uint64_t *v450;
  uint64_t v451;
  uint64_t *v452;
  uint64_t v453;
  uint64_t *v454;
  uint64_t v455;
  int v456;
  int v457;
  uint64_t v458;
  unint64_t v459;
  _QWORD *v460;
  uint64_t n;
  int32x2_t *v462;
  uint64_t *v463;
  llvm::Instruction *v464;
  unint64_t *v465;
  unint64_t v466;
  unint64_t v467;
  unint64_t *v468;
  int v469;
  BOOL v471;
  uint64_t v473;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  int v478;
  int v479;
  unsigned int v480;
  uint64_t v481;
  uint64_t v482;
  int v483;
  llvm::BasicBlock *v484;
  char v485;
  llvm::BasicBlock *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  llvm::BasicBlock **v490;
  llvm::BasicBlock *v491;
  int v492;
  int v493;
  uint64_t v494;
  uint64_t v495;
  unsigned int v496;
  BOOL v497;
  BOOL v498;
  unsigned int v499;
  BOOL v500;
  uint64_t v502;
  unint64_t v503;
  int v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  void *v508;
  void *v509;
  uint64_t v510;
  void **v511;
  int v512;
  unsigned int v513;
  uint64_t v514;
  unsigned int v515;
  uint64_t v516;
  uint64_t *v517;
  int v518;
  _QWORD *v519;
  uint64_t v520;
  unsigned int *v521;
  uint64_t *v522;
  _QWORD *v523;
  unsigned int v524;
  uint64_t v525;
  void *v526;
  uint64_t v527;
  _BOOL4 v528;
  uint64_t v529;
  uint64_t v530;
  int v531;
  int v532;
  unsigned int v533;
  uint64_t v534;
  unsigned int v535;
  uint64_t *v536;
  uint64_t v537;
  int v538;
  _QWORD *v539;
  uint64_t v540;
  unsigned int *v541;
  int v542;
  unint64_t v543;
  unsigned int v544;
  int v546;
  _BOOL4 v547;
  uint64_t *v548;
  uint64_t v549;
  uint64_t v550;
  unsigned __int8 *v551;
  llvm::BasicBlock *v552;
  _QWORD *v553;
  _QWORD *v554;
  int v555;
  int v556;
  unsigned int v557;
  uint64_t v558;
  uint64_t v559;
  _QWORD *v560;
  uint64_t v561;
  int v562;
  uint64_t v563;
  char v564;
  uint64_t v565;
  llvm::BasicBlock **v566;
  char *v567;
  uint64_t v568;
  unsigned __int8 *v569;
  uint64_t ***v570;
  uint64_t ***v571;
  llvm::MemorySSA *v572;
  unsigned int v573;
  const llvm::APInt *v574;
  uint64_t *v575;
  uint64_t v576;
  llvm::ValueHandleBase *v577;
  uint64_t v578;
  uint64_t v579;
  llvm::ValueHandleBase **v580;
  char *v581;
  _QWORD *v582;
  _QWORD *v583;
  uint64_t v584;
  uint64_t v585;
  llvm::ValueHandleBase ***v586;
  uint64_t v587;
  char *v588;
  uint64_t v589;
  int v590;
  int v591;
  unsigned int v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  int v599;
  uint64_t v600;
  uint64_t v601;
  llvm::BasicBlock **v602;
  uint64_t *v603;
  uint64_t v604;
  uint64_t v605;
  unint64_t *v606;
  uint64_t v607;
  unsigned int v608;
  char *v609;
  unint64_t v610;
  uint64_t *v611;
  unint64_t *v612;
  unint64_t v613;
  int v614;
  uint64_t v615;
  unsigned int v616;
  uint64_t v617;
  llvm::Instruction *v618;
  int v619;
  int v620;
  uint64_t v621;
  _BYTE *v622;
  char *v623;
  uint64_t v624;
  llvm::ConstantInt *v625;
  llvm::MemorySSA *v626;
  llvm::ValueSymbolTable *v627;
  uint64_t v628;
  int v629;
  llvm::ValueSymbolTable *v630;
  unsigned __int8 *__s1;
  llvm::Instruction *__s1a;
  uint64_t *v633;
  uint64_t v634;
  llvm::Value *v635;
  unsigned int v636;
  uint64_t v637;
  size_t __n;
  size_t __na;
  int v640;
  uint64_t v641;
  uint64_t v642;
  int v643;
  uint64_t v644;
  unsigned int v645;
  llvm::Value **v646;
  llvm::BasicBlock *v647;
  llvm::BasicBlock *v648;
  unsigned int v649[2];
  int v650;
  unsigned int v651[2];
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  int v655[2];
  _QWORD *v656;
  llvm::BasicBlock *v657;
  llvm::BasicBlock *v658;
  llvm::BasicBlock *v659;
  uint64_t v660;
  uint64_t v661;
  void *v662;
  int v663;
  _BYTE *v664;
  uint64_t *v665;
  uint64_t v666;
  void (*v667)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  llvm::AssumptionCache *v668;
  uint64_t v669;
  uint64_t v670;
  unint64_t *v671;
  uint64_t v672;
  llvm::MemorySSA *v673;
  llvm::MemorySSA *v674;
  llvm::MemorySSA *v675;
  char v676;
  llvm::BasicBlock *v677;
  llvm::Instruction *v678;
  llvm::Instruction *v679;
  llvm::Instruction *v680;
  int v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t ***v686;
  llvm::DominatorTree *v687;
  int v688;
  uint64_t v689;
  unint64_t v690;
  llvm::BasicBlock *v691;
  void *v692;
  uint64_t v693;
  char *v694;
  char *v695;
  uint64_t v696;
  int v697;
  _BYTE v698[32];
  void *v699;
  uint64_t v700;
  _BYTE v701[96];
  llvm::BasicBlock *v702;
  void *v703;
  uint64_t v704;
  int v705;
  _BYTE v706[72];
  uint64_t v707;
  void *v708;
  uint64_t v709;
  int v710;
  _BYTE v711[32];
  void *v712;
  uint64_t v713;
  _BYTE v714[32];
  void *v715;
  uint64_t v716;
  _BYTE v717[16];
  void *__p;
  void *v719;
  void *__dst;
  uint64_t v721;
  _BYTE v722[41];
  llvm::Constant *v723;
  char v724;
  uint64_t v725;
  void *v726;
  uint64_t v727;
  _BYTE v728[64];
  void *v729;
  uint64_t v730;
  _DWORD v731[10];
  char v732;
  char v733;
  void *__src;
  void *v735;
  uint64_t v736;
  unint64_t v737;
  _WORD v738[16];
  __int128 v739;
  uint64_t v740;
  char v741;
  _BYTE v742[304];
  void *v743;
  _QWORD v744[10];

  v744[8] = *MEMORY[0x1E0C80C00];
  if (!llvm::Loop::isLoopSimplifyForm((llvm::Loop *)a1))
    return 0;
  v681 = a8;
  v673 = a5;
  v24 = (int32x2_t **)a12;
  v687 = a3;
  v691 = a2;
  if (!a7)
    goto LABEL_642;
  v25 = **(_QWORD **)(a1 + 32);
  v702 = (llvm::BasicBlock *)v706;
  v703 = v706;
  v704 = 8;
  v705 = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v702, v25);
  v676 = 0;
  v664 = v701;
  v665 = &v736;
  v26 = 0x1FFFFFFFFLL;
LABEL_4:
  if (!v24)
    goto LABEL_18;
  v27 = (*v24)[9];
  v28 = (*v24)[11].u32[0];
  if ((_DWORD)v28)
  {
    LODWORD(v29) = (v28 - 1) & ((v25 >> 4) ^ (v25 >> 9));
    v30 = (uint64_t *)(*(_QWORD *)&v27 + 16 * v29);
    v31 = *v30;
    if (v25 == *v30)
      goto LABEL_12;
    v32 = 1;
    while (v31 != -4096)
    {
      v33 = v29 + v32++;
      v29 = v33 & (v28 - 1);
      v31 = *(_QWORD *)(*(_QWORD *)&v27 + 16 * v29);
      if (v25 == v31)
      {
        v30 = (uint64_t *)(*(_QWORD *)&v27 + 16 * v29);
        goto LABEL_12;
      }
    }
  }
  v30 = (uint64_t *)(*(_QWORD *)&v27 + 16 * v28);
LABEL_12:
  if (v30 != (uint64_t *)(*(_QWORD *)&v27 + 16 * v28))
  {
    v34 = v30[1];
    if (v34)
    {
      v35 = *(_QWORD *)(v34 + 8);
      v36 = v35 - 48;
      if (!v35)
        v36 = 0;
      if (*(_BYTE *)(v36 + 16) != 27 || *(_QWORD *)(v35 + 8) != v34)
        goto LABEL_638;
    }
  }
LABEL_18:
  LoopLatch = v25 + 40;
  for (i = *(_QWORD *)(v25 + 48); ; i = *(_QWORD *)(i + 8))
  {
    if (i == LoopLatch)
    {
      v51 = *(_QWORD *)LoopLatch;
      if (*(_QWORD *)LoopLatch == LoopLatch)
        goto LABEL_638;
      v671 = a6;
      v52 = v51 == 0;
      if (v51)
        v53 = v51 - 24;
      else
        v53 = 0;
      v54 = *(unsigned __int8 *)(v53 + 16) - 40;
      if (v54 >= 0xFFFFFFF5)
        v55 = (uint64_t ***)v53;
      else
        v55 = 0;
      v56 = *((unsigned __int8 *)v55 + 16);
      v57 = v54 < 0xFFFFFFF5 || v52;
      v667 = a9;
      v668 = a4;
      v666 = a10;
      if (v56 != 31 || (v57 & 1) != 0)
      {
        if (v56 == 30)
          v60 = v57;
        else
          v60 = 1;
        if ((v60 & 1) != 0)
          goto LABEL_637;
        if ((*((_DWORD *)v55 + 5) & 0x7FFFFFF) != 3)
          goto LABEL_637;
        v61 = (uint64_t)*(v55 - 12);
        if (*(unsigned __int8 *)(v61 + 16) < 0x15u)
          goto LABEL_637;
        v699 = 0;
        isLoopInvariant = llvm::Loop::isLoopInvariant(a1, v61);
        v63 = (unsigned __int8 *)*(v55 - 12);
        v688 = isLoopInvariant;
        if (isLoopInvariant)
        {
          sub_1C5C39FB8((uint64_t)&v699, (uint64_t)v63);
          goto LABEL_162;
        }
        if (v63)
          v90 = v63[16] >= 0x1Cu;
        else
          v90 = 0;
        if (!v90)
        {
LABEL_158:
          if ((unint64_t)v699 < 8
            || (v699 & 4) != 0
            && ((unint64_t)v699 & 0xFFFFFFFFFFFFFFF8) != 0
            && !*(_DWORD *)(((unint64_t)v699 & 0xFFFFFFFFFFFFFFF8) + 8))
          {
LABEL_635:
            sub_1C4DA9768((uint64_t *)&v699);
LABEL_636:
            a9 = v667;
            a4 = v668;
            a10 = v666;
LABEL_637:
            a6 = v671;
            goto LABEL_638;
          }
LABEL_162:
          v64 = (llvm *)*(v55 - 4);
          v105 = (llvm::BasicBlock *)sub_1C477672C(a1 + 56, (uint64_t)v64);
          v106 = *(_QWORD *)(a1 + 64);
          if (v106 == *(_QWORD *)(a1 + 56))
            v107 = (unsigned int *)(a1 + 76);
          else
            v107 = (unsigned int *)(a1 + 72);
          *(_QWORD *)v655 = v106 + 8 * *v107;
          v657 = v105;
          if (v105 == *(llvm::BasicBlock **)v655)
          {
            v111 = 0;
LABEL_172:
            *(_QWORD *)v649 = v111 ^ 1u;
            v112 = (llvm::BasicBlock *)v55[-4 * *(_QWORD *)v649 - 4];
            v113 = (uint64_t)v55[5];
            if (!sub_1C5C39C74(a1, v113, (uint64_t)v64))
              goto LABEL_635;
            if ((v688 & 1) == 0)
            {
              v114 = (unsigned __int8 *)*(v55 - 12);
              if (v657 == *(llvm::BasicBlock **)v655)
              {
                if (!sub_1C48491B0((uint64_t)&__src, v114))
                  goto LABEL_635;
              }
              else if (!sub_1C5088268((uint64_t)&__dst, v114))
              {
                goto LABEL_635;
              }
            }
            if (!a11)
            {
LABEL_193:
              LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(a1);
              if (!LoopPredecessor)
                goto LABEL_200;
              v128 = *(_QWORD *)(LoopPredecessor + 40);
              if (v128 == LoopPredecessor + 40)
                goto LABEL_200;
              if (v128)
                v129 = v128 - 24;
              else
                v129 = 0;
              if (*(_BYTE *)(v129 + 16) == 30)
              {
                if ((*(_DWORD *)(v129 + 20) & 0x7FFFFFF) == 3)
                {
LABEL_200:
                  SuccessorWeight = 0;
                  goto LABEL_205;
                }
              }
              else
              {
                SuccessorWeight = 0;
                switch(*(_BYTE *)(v129 + 16))
                {
                  case 0x1D:
                  case 0x21:
                  case 0x22:
                  case 0x23:
                  case 0x24:
                  case 0x25:
                  case 0x26:
                    goto LABEL_205;
                  case 0x1E:
LABEL_1194:
                    __break(1u);
                    goto LABEL_1195;
                  case 0x1F:
                    v130 = (*(_DWORD *)(v129 + 20) >> 1) & 0x3FFFFFF;
                    break;
                  case 0x20:
                    v130 = (*(_DWORD *)(v129 + 20) & 0x7FFFFFF) - 1;
                    break;
                  case 0x27:
                    v130 = *(_DWORD *)(v129 + 80) + 1;
                    break;
                  default:
                    goto LABEL_200;
                }
                if (v130 != 1)
                  goto LABEL_200;
              }
              SuccessorWeight = LoopPredecessor;
LABEL_205:
              v647 = v112;
              v131 = **(llvm::BasicBlock ***)(a1 + 32);
              v738[0] = 257;
              v677 = (llvm::BasicBlock *)llvm::SplitEdge((llvm *)SuccessorWeight, v131, v691, v687, v24, (llvm::MemorySSAUpdater *)&__src, v127);
              if (!v688 || (v652 = (uint64_t)v64, !llvm::BasicBlock::getUniquePredecessor(v64)))
              {
                v132 = *((_QWORD *)v64 + 6);
                if (v132)
                  v133 = (llvm::BasicBlock *)(v132 - 24);
                else
                  v133 = 0;
                v738[0] = 257;
                v652 = sub_1C5EBD70C(v64, v133, 0, (uint64_t)v691, v687, v24, (llvm::Twine *)&__src, 0);
              }
              v135 = (uint64_t *)(SuccessorWeight + 40);
              v134 = *(_QWORD *)(SuccessorWeight + 40);
              v645 = v111;
              if (v134 == SuccessorWeight + 40)
              {
                v137 = 0;
              }
              else
              {
                if (v134)
                  v136 = v134 - 24;
                else
                  v136 = 0;
                if (*(unsigned __int8 *)(v136 + 16) - 29 >= 0xB)
                  v137 = 0;
                else
                  v137 = v136;
              }
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v137 + 40) + 40, (uint64_t ***)v137);
              v138 = *(_QWORD *)(v137 + 24);
              v139 = *(_QWORD **)(v137 + 32);
              *v139 = v138;
              *(_QWORD *)(v138 + 8) = v139;
              *(_QWORD *)(v137 + 24) = 0;
              *(_QWORD *)(v137 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v137);
              if (!v688)
              {
                v150 = (int32x2_t **)a12;
                if ((unint64_t)v699 >= 8)
                {
                  v158 = v652;
                  if ((v699 & 4) != 0)
                  {
                    v156 = *(void ***)((unint64_t)v699 & 0xFFFFFFFFFFFFFFF8);
                    v157 = *(unsigned int *)(((unint64_t)v699 & 0xFFFFFFFFFFFFFFF8) + 8);
                  }
                  else
                  {
                    v156 = &v699;
                    v157 = 1;
                  }
                }
                else
                {
                  v156 = 0;
                  v157 = 0;
                  v158 = v652;
                }
                sub_1C5C3A2D0((uint64_t **)SuccessorWeight, (llvm::Value **)v156, v157, v657 == *(llvm::BasicBlock **)v655, (llvm::BasicBlock *)v158, v677, 0);
                sub_1C53BAD9C((uint64_t)v691, 0, SuccessorWeight, v158);
                if (!a12)
                  goto LABEL_259;
                goto LABEL_246;
              }
              v140 = (uint64_t *)(v55 + 3);
              if (v135 == (uint64_t *)(v55 + 3) || (v141 = (uint64_t *)v55[4], v141 == v135))
              {
LABEL_234:
                v150 = (int32x2_t **)a12;
                if (a12)
                {
                  llvm::Instruction::clone((llvm::Instruction *)v55);
                  v152 = (llvm::Value *)v151;
                  *(_QWORD *)(v151 + 40) = v113;
                  *(_WORD *)(v113 + 18) &= ~0x8000u;
                  v153 = v645;
                  if ((*(_BYTE *)(v151 + 23) & 0x10) != 0)
                  {
                    v192 = *(_QWORD *)(v113 + 56);
                    if (v192)
                    {
                      v193 = *(llvm::ValueSymbolTable **)(v192 + 104);
                      if (v193)
                        llvm::ValueSymbolTable::reinsertValue(v193, v152);
                    }
                  }
                  v154 = *(_QWORD *)(v113 + 40);
                  *((_QWORD *)v152 + 3) = v154;
                  *((_QWORD *)v152 + 4) = v113 + 40;
                  v155 = (_QWORD *)((char *)v152 + 24);
                  *(_QWORD *)(v154 + 8) = v155;
                  *(_QWORD *)(v113 + 40) = v155;
                  v150 = (int32x2_t **)a12;
                }
                else
                {
                  v159 = operator new(0x60uLL);
                  v159[13] = v159[13] & 0x38000000 | 1;
                  *(_QWORD *)v159 = 0;
                  *((_QWORD *)v159 + 1) = 0;
                  *((_QWORD *)v159 + 2) = 0;
                  *((_QWORD *)v159 + 3) = v159 + 8;
                  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v159 + 8), v647, (llvm::BasicBlock *)v113);
                  v153 = v645;
                }
                v158 = v652;
                sub_1C53E1B14((uint64_t)v55, v153, v652);
                sub_1C53E1B14((uint64_t)v55, v649[0], (uint64_t)v677);
                sub_1C53BAD9C((uint64_t)v691, 0, SuccessorWeight, v652);
                if (!v150)
                {
LABEL_258:
                  sub_1C53BB778((uint64_t)v691, 0, v113, (uint64_t)v64);
LABEL_259:
                  if ((llvm *)v158 == v64)
                    sub_1C5C39378((uint64_t)v64, SuccessorWeight);
                  else
                    sub_1C5C393F0((uint64_t)v64, *(uint64_t **)(v158 + 48), v113, SuccessorWeight, v688);
                  v167 = ***v55;
                  if (v657 == *(llvm::BasicBlock **)v655)
                  {
                    v168 = *(llvm::ValueHandleBase **)(v167 + 1568);
                    if (!v168)
                    {
                      v343 = *(llvm::ConstantInt **)(v167 + 1888);
                      LODWORD(v735) = *(_DWORD *)(v167 + 1896) >> 8;
                      if (v735 > 0x40)
                        llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
                      else
                        __src = 0;
                      v168 = llvm::ConstantInt::get(v343, (llvm::LLVMContext *)&__src, v166);
                      if (v735 >= 0x41 && __src)
                        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
                      *(_QWORD *)(v167 + 1568) = v168;
                    }
                  }
                  else
                  {
                    v168 = *(llvm::ValueHandleBase **)(v167 + 1560);
                    if (!v168)
                    {
                      v169 = *(llvm::ConstantInt **)(v167 + 1888);
                      v170 = *(_DWORD *)(v167 + 1896);
                      LODWORD(v735) = v170 >> 8;
                      if (v170 >> 8 > 0x40)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)&__src, 1, 0);
                      }
                      else
                      {
                        if (v170 <= 0xFF)
                          v171 = 0;
                        else
                          v171 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v170);
                        __src = (void *)(v171 & 1);
                      }
                      v168 = llvm::ConstantInt::get(v169, (llvm::LLVMContext *)&__src, v166);
                      if (v735 >= 0x41 && __src)
                        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
                      *(_QWORD *)(v167 + 1560) = v168;
                    }
                  }
                  if ((v699 & 4) != 0)
                  {
                    v172 = *(void ***)((unint64_t)v699 & 0xFFFFFFFFFFFFFFF8);
                    v173 = &v172[*(unsigned int *)(((unint64_t)v699 & 0xFFFFFFFFFFFFFFF8) + 8)];
                  }
                  else
                  {
                    v172 = &v699;
                    v173 = &v699 + ((unint64_t)v699 > 7);
                  }
                  if (v172 != v173)
                  {
                    v174 = (_QWORD *)((char *)v168 + 8);
                    do
                    {
                      v175 = *((_QWORD *)*v172 + 1);
                      while (v175)
                      {
                        v176 = v175;
                        v177 = v175 + 8;
                        v175 = *(_QWORD *)(v175 + 8);
                        v178 = *(_QWORD *)(v177 + 16);
                        if (v178)
                          v179 = *(unsigned __int8 *)(v178 + 16) >= 0x1Cu;
                        else
                          v179 = 0;
                        if (v179)
                        {
                          v180 = sub_1C477672C(a1 + 56, *(_QWORD *)(v178 + 40));
                          v181 = *(_QWORD *)(a1 + 64);
                          v182 = (unsigned int *)(v181 == *(_QWORD *)(a1 + 56) ? a1 + 76 : a1 + 72);
                          if (v180 != (_QWORD *)(v181 + 8 * *v182))
                          {
                            if (*(_QWORD *)v176)
                            {
                              **(_QWORD **)(v176 + 16) = *(_QWORD *)(v176 + 8);
                              v183 = *(_QWORD *)(v176 + 8);
                              if (v183)
                                *(_QWORD *)(v183 + 16) = *(_QWORD *)(v176 + 16);
                            }
                            *(_QWORD *)v176 = v168;
                            v184 = *((_QWORD *)v168 + 1);
                            *(_QWORD *)(v176 + 8) = v184;
                            if (v184)
                              *(_QWORD *)(v184 + 16) = v177;
                            *(_QWORD *)(v176 + 16) = v174;
                            *v174 = v176;
                          }
                        }
                      }
                      ++v172;
                    }
                    while (v172 != v173);
                  }
                  v24 = (int32x2_t **)a12;
                  if ((v688 & 1) != 0)
                    sub_1C5C396A4((uint64_t *)a1, (uint64_t)v677, v691, (int32x2_t *)v687, a12, a11);
                  sub_1C4DA9768((uint64_t *)&v699);
                  v185 = *(_QWORD *)LoopLatch;
                  a9 = v667;
                  a4 = v668;
                  a10 = v666;
                  a6 = v671;
                  if (*(_QWORD *)LoopLatch == LoopLatch)
                  {
                    v100 = 0;
                  }
                  else
                  {
                    if (v185)
                      v100 = v185 - 24;
                    else
                      v100 = 0;
                    if (*(unsigned __int8 *)(v100 + 16) - 29 >= 0xB)
                      v100 = 0;
                  }
                  v104 = *(_DWORD *)(v100 + 20);
                  goto LABEL_306;
                }
LABEL_246:
                __src = &v736;
                v736 = SuccessorWeight;
                v737 = v158 & 0xFFFFFFFFFFFFFFFBLL;
                v735 = (void *)0x100000001;
                llvm::MemorySSAUpdater::applyInsertUpdates(v150, (uint64_t)&v736, 1, (uint64_t)v691);
                if (__src != &v736)
                  free(__src);
                if (!v688)
                  goto LABEL_259;
                v160 = *(_QWORD *)(v113 + 40);
                if (v160 == v113 + 40)
                {
                  v162 = 0;
                }
                else
                {
                  if (v160)
                    v161 = v160 - 24;
                  else
                    v161 = 0;
                  if (*(unsigned __int8 *)(v161 + 16) - 29 >= 0xB)
                    v162 = 0;
                  else
                    v162 = v161;
                }
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v162 + 40) + 40, (uint64_t ***)v162);
                v163 = *(_QWORD *)(v162 + 24);
                v164 = *(_QWORD **)(v162 + 32);
                *v164 = v163;
                *(_QWORD *)(v163 + 8) = v164;
                *(_QWORD *)(v162 + 24) = 0;
                *(_QWORD *)(v162 + 32) = 0;
                llvm::Value::deleteValue((llvm::Value *)v162);
                v165 = operator new(0x60uLL);
                v165[13] = v165[13] & 0x38000000 | 1;
                *(_QWORD *)v165 = 0;
                *((_QWORD *)v165 + 1) = 0;
                *((_QWORD *)v165 + 2) = 0;
                *((_QWORD *)v165 + 3) = v165 + 8;
                llvm::BranchInst::BranchInst((llvm::BranchInst *)(v165 + 8), v647, (llvm::BasicBlock *)v113);
                llvm::MemorySSAUpdater::removeEdge((llvm::MemorySSAUpdater *)v150, (llvm::BasicBlock *)v113, v64);
                goto LABEL_258;
              }
              v142 = v55[5];
              *(_WORD *)(SuccessorWeight + 18) &= ~0x8000u;
              if ((uint64_t **)SuccessorWeight == v142)
                goto LABEL_232;
              v143 = *(llvm::ValueSymbolTable **)(SuccessorWeight + 56);
              if (v143)
                v143 = (llvm::ValueSymbolTable *)*((_QWORD *)v143 + 13);
              v144 = (llvm::ValueSymbolTable *)v142[7];
              if (v144)
                v144 = (llvm::ValueSymbolTable *)*((_QWORD *)v144 + 13);
              if (v143 == v144)
              {
                v145 = (uint64_t *)(v55 + 3);
                if (v140 != v141)
                {
                  do
                  {
                    v146 = v145 - 3;
                    if (!v145)
                      v146 = 0;
                    v146[5] = SuccessorWeight;
                    v145 = (uint64_t *)v145[1];
                  }
                  while (v145 != v141);
                }
                goto LABEL_232;
              }
              v630 = v144;
              v627 = v143;
              v633 = (uint64_t *)(v55 + 3);
              if (v140 == v141)
              {
LABEL_232:
                if (v141 != v140)
                {
                  v147 = *v141;
                  v148 = *v140;
                  *(_QWORD *)(v148 + 8) = v141;
                  *v141 = v148;
                  v149 = *v135;
                  *(_QWORD *)(v147 + 8) = v135;
                  *v140 = v149;
                  *(_QWORD *)(v149 + 8) = v140;
                  *v135 = v147;
                }
                goto LABEL_234;
              }
              while (1)
              {
                v347 = (llvm::Value *)(v633 - 3);
                if (!v633)
                  v347 = 0;
                v635 = v347;
                v629 = *((_DWORD *)v347 + 5) & 0x10000000;
                if (v630)
                {
                  if (v629)
                    break;
                }
LABEL_619:
                *((_QWORD *)v635 + 5) = SuccessorWeight;
                if (v627 && v629)
                  llvm::ValueSymbolTable::reinsertValue(v627, v635);
                v633 = (uint64_t *)v633[1];
                if (v633 == v141)
                  goto LABEL_232;
              }
              v348 = ***(_QWORD ***)v347;
              v349 = *(_QWORD *)(v348 + 152);
              v350 = *(unsigned int *)(v348 + 168);
              if ((_DWORD)v350)
              {
                LODWORD(v351) = (v350 - 1) & ((v635 >> 4) ^ (v635 >> 9));
                v352 = (llvm::Value **)(v349 + 16 * v351);
                v353 = *v352;
                if (*v352 == v635)
                  goto LABEL_606;
                v354 = 1;
                while (v353 != (llvm::Value *)-4096)
                {
                  v355 = v351 + v354++;
                  v351 = v355 & (v350 - 1);
                  v353 = *(llvm::Value **)(v349 + 16 * v351);
                  if (v353 == v635)
                  {
                    v352 = (llvm::Value **)(v349 + 16 * v351);
                    goto LABEL_606;
                  }
                }
              }
              v352 = (llvm::Value **)(v349 + 16 * v350);
LABEL_606:
              v356 = *((unsigned int *)v630 + 2);
              if ((_DWORD)v356)
              {
                v357 = (size_t *)v352[1];
                v628 = *((unsigned int *)v630 + 5);
                __s1 = (unsigned __int8 *)v357 + v628;
                __n = *v357;
                if (*v357)
                {
                  v643 = 0;
                  v358 = *v357;
                  v359 = __s1;
                  do
                  {
                    v360 = *v359++;
                    v643 = 33 * v643 + v360;
                    --v358;
                  }
                  while (v358);
                }
                else
                {
                  v643 = 0;
                }
                v636 = v356 - 1;
                v637 = *(_QWORD *)v630;
                v634 = *(_QWORD *)v630 + 8 * v356 + 8;
                v640 = 1;
                v361 = v643;
                while (1)
                {
                  v641 = v361 & v636;
                  v362 = *(_QWORD **)(v637 + 8 * v641);
                  if (v362 != (_QWORD *)-8)
                  {
                    if (!v362)
                      goto LABEL_619;
                    if (*(_DWORD *)(v634 + 4 * v641) == v643
                      && __n == *v362
                      && (!__n || !memcmp(__s1, (char *)v362 + v628, __n)))
                    {
                      break;
                    }
                  }
                  v361 = v640 + v641;
                  ++v640;
                }
                *(_QWORD *)(v637 + 8 * (int)v641) = -8;
                *(int32x2_t *)((char *)v630 + 12) = vadd_s32(*(int32x2_t *)((char *)v630 + 12), (int32x2_t)0x1FFFFFFFFLL);
              }
              goto LABEL_619;
            }
            v115 = *((_DWORD *)v687 + 4);
            if (v115)
            {
              v116 = *(_QWORD *)v687;
              v117 = v115 - 1;
              v118 = (v115 - 1) & ((v64 >> 4) ^ (v64 >> 9));
              v119 = *(llvm **)(*(_QWORD *)v687 + 16 * v118);
              if (v64 == v119)
              {
LABEL_184:
                v122 = v116 + 16 * v118;
                v123 = *(const llvm::Loop **)(v122 + 8);
                if (v123)
                {
                  v124 = *(const llvm::Loop **)(v122 + 8);
                  do
                  {
                    if (llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isLoopExiting((uint64_t)v123, (uint64_t)v64))
                      v124 = v123;
                    v123 = *(const llvm::Loop **)v123;
                  }
                  while (v123);
                  if (v124)
                    goto LABEL_192;
                }
              }
              else
              {
                v120 = 1;
                while (v119 != (llvm *)-4096)
                {
                  v121 = v118 + v120++;
                  v118 = v121 & v117;
                  v119 = *(llvm **)(v116 + 16 * v118);
                  if (v64 == v119)
                    goto LABEL_184;
                }
              }
            }
            v125 = (const llvm::Loop *)a1;
            do
            {
              v124 = v125;
              v125 = *(const llvm::Loop **)v125;
            }
            while (v125);
LABEL_192:
            llvm::ScalarEvolution::forgetLoop(a11, v124);
            v24 = (int32x2_t **)a12;
            goto LABEL_193;
          }
          v64 = (llvm *)*(v55 - 8);
          v108 = sub_1C477672C(a1 + 56, (uint64_t)v64);
          v109 = *(_QWORD *)(a1 + 64);
          if (v109 == *(_QWORD *)(a1 + 56))
            v110 = (unsigned int *)(a1 + 76);
          else
            v110 = (unsigned int *)(a1 + 72);
          if (v108 == (_QWORD *)(v109 + 8 * *v110))
          {
            v111 = 1;
            goto LABEL_172;
          }
          goto LABEL_635;
        }
        sub_1C5C3A0C8(&__src, a1, v63);
        v91 = __src;
        if ((unint64_t)__src < 8
          || (v92 = (unint64_t)__src & 0xFFFFFFFFFFFFFFF8, (__src & 4) != 0)
          && v92
          && !*(_DWORD *)(v92 + 8))
        {
          if ((v699 & 4) != 0)
          {
            if (((unint64_t)v699 & 0xFFFFFFFFFFFFFFF8) != 0)
              *(_DWORD *)(((unint64_t)v699 & 0xFFFFFFFFFFFFFFF8) + 8) = 0;
          }
          else
          {
            v699 = 0;
          }
          goto LABEL_157;
        }
        v93 = (unint64_t)v699;
        if ((v699 & 4) != 0)
        {
          v94 = (unint64_t)v699 & 0xFFFFFFFFFFFFFFF8;
          if (((unint64_t)v699 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            if ((__src & 4) == 0)
            {
              *(_DWORD *)(v94 + 8) = 0;
              if (*(_DWORD *)(v94 + 12))
              {
                v95 = 0;
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v93 & 0xFFFFFFFFFFFFFFF8, v94 + 16, 1uLL, 8);
                v95 = *(unsigned int *)(v94 + 8);
              }
              *(_QWORD *)(*(_QWORD *)v94 + 8 * v95) = v92;
              ++*(_DWORD *)(v94 + 8);
              goto LABEL_156;
            }
            if (*(_QWORD *)v94 != v94 + 16)
              free(*(void **)v94);
            MEMORY[0x1CAA32FC0](v94, 0x1080C40ED926357);
            v91 = __src;
          }
        }
        v699 = v91;
LABEL_156:
        __src = 0;
LABEL_157:
        sub_1C4DA9768((uint64_t *)&__src);
        goto LABEL_158;
      }
      v58 = *((_DWORD *)v55 + 5);
      if ((v58 & 0x40000000) != 0)
        v59 = (llvm **)*(v55 - 1);
      else
        v59 = (llvm **)&v55[-4 * (v58 & 0x7FFFFFF)];
      v64 = *v59;
      if (*((unsigned __int8 *)*v59 + 16) < 0x15u || !llvm::Loop::isLoopInvariant(a1, (uint64_t)v64))
        goto LABEL_636;
      v689 = (uint64_t)v55[5];
      v715 = v717;
      v716 = 0x400000000;
      if (((*((_DWORD *)v55 + 5) >> 1) & 0x3FFFFFF) != 1)
      {
        v65 = 0;
        v66 = 0;
        v67 = 2 * (((*((_DWORD *)v55 + 5) >> 1) & 0x3FFFFFFu) - 1);
        do
        {
          v68 = *((_DWORD *)v55 + 5);
          if ((v68 & 0x40000000) != 0)
            v69 = (uint64_t ***)*(v55 - 1);
          else
            v69 = &v55[-4 * (v68 & 0x7FFFFFF)];
          v70 = (v66 + 3);
          if (v66 == 0x1FFFFFFFCLL)
            v70 = 1;
          v71 = (llvm::BasicBlock *)v69[4 * v70];
          v72 = sub_1C477672C(a1 + 56, (uint64_t)v71);
          v73 = *(_QWORD *)(a1 + 64);
          if (v73 == *(_QWORD *)(a1 + 56))
            v74 = (unsigned int *)(a1 + 76);
          else
            v74 = (unsigned int *)(a1 + 72);
          if (v72 == (_QWORD *)(v73 + 8 * *v74) && sub_1C5C39C74(a1, v689, (uint64_t)v71))
          {
            v75 = (_QWORD *)*((_QWORD *)v71 + 5);
            if (v75 == (_QWORD *)((char *)v71 + 40))
            {
              v77 = 0;
            }
            else
            {
              v76 = v75 ? (uint64_t)(v75 - 3) : 0;
              v77 = *(unsigned __int8 *)(v76 + 16) - 29 >= 0xB ? 0 : (char *)v76;
            }
            if (v77[16] != 35 || llvm::BasicBlock::getFirstNonPHIOrDbg(v71, 1) != v77)
            {
              v78 = v716;
              if (v716 >= (unint64_t)HIDWORD(v716))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v715, (uint64_t)v717, v716 + 1, 4);
                v78 = v716;
              }
              *((_DWORD *)v715 + v78) = v65;
              LODWORD(v716) = v716 + 1;
            }
          }
          v66 += 2;
          ++v65;
        }
        while (v67 != v66);
      }
      v712 = 0;
      SuccessorWeight = llvm::SwitchInstProfUpdateWrapper::getSuccessorWeight((llvm::SwitchInstProfUpdateWrapper *)v55, 0);
      v80 = *((_DWORD *)v55 + 5);
      if ((v80 & 0x40000000) != 0)
        v81 = (uint64_t ***)*(v55 - 1);
      else
        v81 = &v55[-4 * (v80 & 0x7FFFFFF)];
      v82 = (llvm::BasicBlock *)v81[4];
      v83 = sub_1C477672C(a1 + 56, (uint64_t)v82);
      v85 = *(_QWORD *)(a1 + 64);
      if (v85 == *(_QWORD *)(a1 + 56))
        v86 = (unsigned int *)(a1 + 76);
      else
        v86 = (unsigned int *)(a1 + 72);
      v24 = (int32x2_t **)a12;
      if (v83 == (_QWORD *)(v85 + 8 * *v86) && sub_1C5C39C74(a1, v689, (uint64_t)v82))
      {
        v87 = (_QWORD *)*((_QWORD *)v82 + 5);
        if (v87 == (_QWORD *)((char *)v82 + 40))
        {
          v89 = 0;
        }
        else
        {
          v88 = v87 ? (uint64_t)(v87 - 3) : 0;
          v89 = *(unsigned __int8 *)(v88 + 16) - 29 >= 0xB ? 0 : (char *)v88;
        }
        if (v89[16] != 35 || llvm::BasicBlock::getFirstNonPHIOrDbg(v82, 1) != v89)
        {
          v190 = *((_DWORD *)v55 + 5);
          if ((v190 & 0x40000000) != 0)
            v191 = (uint64_t ***)*(v55 - 1);
          else
            v191 = &v55[-4 * (v190 & 0x7FFFFFF)];
          v194 = v191[4];
          v712 = v194;
          v97 = (const llvm::Loop *)a1;
          if (v194)
          {
            v195 = *((_DWORD *)v55 + 5);
            if ((v195 & 0x40000000) != 0)
              v196 = (uint64_t ***)*(v55 - 1);
            else
              v196 = &v55[-4 * (v195 & 0x7FFFFFF)];
            if (v196[4])
            {
              *v196[6] = (uint64_t *)v196[5];
              v197 = v196[5];
              if (v197)
                v197[2] = (uint64_t *)v196[6];
            }
            v196[4] = 0;
            v198 = *((_DWORD *)v687 + 4);
            if (!v198)
              goto LABEL_332;
            v199 = *(_QWORD *)v687;
            v200 = v198 - 1;
            v201 = (v198 - 1) & ((v194 >> 4) ^ (v194 >> 9));
            v202 = *(uint64_t ***)(*(_QWORD *)v687 + 16 * v201);
            if (v194 == v202)
            {
LABEL_331:
              v205 = *(const llvm::Loop **)(v199 + 16 * v201 + 8);
              if (!v205)
                goto LABEL_332;
              v97 = (const llvm::Loop *)a1;
              if (v205 != (const llvm::Loop *)a1)
              {
                v345 = (const llvm::Loop *)a1;
                while (v345)
                {
                  v345 = *(const llvm::Loop **)v345;
                  if (v345 == v205)
                  {
                    v97 = v205;
                    goto LABEL_333;
                  }
                }
                v97 = (const llvm::Loop *)a1;
              }
            }
            else
            {
              v203 = 1;
              while (v202 != (uint64_t **)-4096)
              {
                v204 = v201 + v203++;
                v201 = v204 & v200;
                v202 = *(uint64_t ***)(v199 + 16 * v201);
                if (v194 == v202)
                  goto LABEL_331;
              }
LABEL_332:
              v97 = 0;
            }
          }
LABEL_333:
          v96 = v716;
LABEL_334:
          v699 = v701;
          v700 = 0x400000000;
          if (v96 >= 5)
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v699, (uint64_t)v701, v96, 24);
          v729 = v55;
          LOBYTE(v730) = 0;
          v732 = 0;
          v733 = 0;
          llvm::SwitchInstProfUpdateWrapper::init((llvm::SwitchInstProfUpdateWrapper **)&v729, v84);
          if (!(_DWORD)v716)
          {
LABEL_337:
            if (a11)
            {
              if (!v97)
              {
                v206 = (const llvm::Loop *)a1;
                do
                {
                  v97 = v206;
                  v206 = *(const llvm::Loop **)v206;
                }
                while (v206);
              }
              llvm::ScalarEvolution::forgetLoop(a11, v97);
            }
            v207 = *((_DWORD *)v55 + 5);
            if (((v207 >> 1) & 0x3FFFFFF) == 1)
              goto LABEL_343;
            if (((v207 >> 1) & 0x3FFFFFF) == 2)
            {
LABEL_385:
              if ((v207 & 0x40000000) != 0)
                v237 = (uint64_t ***)*(v55 - 1);
              else
                v237 = &v55[-4 * (v207 & 0x7FFFFFF)];
              v208 = (llvm::BasicBlock *)v237[12];
            }
            else
            {
              v232 = 5;
              v233 = 1;
              while (1)
              {
                v234 = &v55[-4 * (v207 & 0x7FFFFFF)];
                if ((v207 & 0x40000000) != 0)
                  v234 = (uint64_t ***)*(v55 - 1);
                v235 = v232;
                if ((_DWORD)v233 == -2)
                  v235 = 1;
                v236 = &v55[-4 * (v207 & 0x7FFFFFF)];
                if ((v207 & 0x40000000) != 0)
                  v236 = (uint64_t ***)*(v55 - 1);
                if (v234[4 * v235] != v236[12])
                  break;
                ++v233;
                v232 += 2;
                if (((v207 >> 1) & 0x3FFFFFF) - 1 == v233)
                  goto LABEL_385;
              }
LABEL_343:
              v208 = 0;
            }
            v656 = v712;
            if (!v712)
            {
              if ((v207 & 0x7FFFFFE) == 2)
              {
                if ((v207 & 0x40000000) != 0)
                  v238 = (uint64_t ***)*(v55 - 1);
                else
                  v238 = &v55[-4 * (v207 & 0x7FFFFFF)];
                v208 = (llvm::BasicBlock *)v238[4];
              }
              else
              {
                if ((v207 & 0x40000000) != 0)
                  v239 = (uint64_t ***)*(v55 - 1);
                else
                  v239 = &v55[-4 * (v207 & 0x7FFFFFF)];
                if (v239[4] != (uint64_t **)v208)
                  v208 = 0;
              }
            }
            v240 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(a1);
            if (v240)
            {
              v242 = *(_QWORD *)(v240 + 40);
              if (v242 != v240 + 40)
              {
                if (v242)
                  v243 = v242 - 24;
                else
                  v243 = 0;
                if (*(_BYTE *)(v243 + 16) == 30)
                {
                  if ((*(_DWORD *)(v243 + 20) & 0x7FFFFFF) == 3)
                    goto LABEL_407;
LABEL_411:
                  v244 = (llvm *)v240;
LABEL_412:
                  v246 = **(llvm::BasicBlock ***)(a1 + 32);
                  v738[0] = 257;
                  v658 = (llvm::BasicBlock *)llvm::SplitEdge(v244, v246, v691, v687, (int32x2_t **)a12, (llvm::MemorySSAUpdater *)&__src, v241);
                  v247 = (_QWORD *)*((_QWORD *)v244 + 5);
                  if (v247 == (_QWORD *)((char *)v244 + 40))
                  {
                    v248 = 0;
                  }
                  else
                  {
                    if (v247)
                      v249 = (uint64_t ***)(v247 - 3);
                    else
                      v249 = 0;
                    if (*((unsigned __int8 *)v249 + 16) - 29 >= 0xB)
                      v248 = 0;
                    else
                      v248 = v249;
                  }
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v248[5] + 5), v248);
                  v250 = v248[3];
                  v251 = v248[4];
                  *v251 = (uint64_t *)v250;
                  v250[1] = (uint64_t *)v251;
                  v248[3] = 0;
                  v248[4] = 0;
                  llvm::Value::deleteValue((llvm::Value *)v248);
                  v650 = v700;
                  v252 = operator new(0x48uLL);
                  v253 = v252 + 2;
                  v252[7] = v252[7] & 0x38000000 | 0x40000000;
                  *(_QWORD *)v252 = 0;
                  llvm::SwitchInst::SwitchInst((llvm::SwitchInst *)(v252 + 2), v64, v658, v650, v244);
                  v726 = v253;
                  LOBYTE(v727) = 0;
                  v728[40] = 0;
                  v728[48] = 0;
                  llvm::SwitchInstProfUpdateWrapper::init((llvm::SwitchInstProfUpdateWrapper **)&v726, v254);
                  v694 = v698;
                  v695 = v698;
                  v696 = 2;
                  v697 = 0;
                  v255 = 8;
                  v707 = 1;
                  do
                  {
                    *(uint64_t *)((char *)&v707 + v255) = -4096;
                    v255 += 16;
                  }
                  while (v255 != 40);
                  v24 = (int32x2_t **)a12;
                  v653 = SuccessorWeight;
                  if (v656)
                  {
                    v256 = v656[1];
                    if (v256)
                    {
                      while (1)
                      {
                        v257 = *(_QWORD *)(v256 + 24);
                        v258 = *(unsigned __int8 *)(v257 + 16);
                        v259 = v257 && v258 >= 0x1C;
                        if (v259 && v258 - 29 < 0xB)
                          break;
                        v256 = *(_QWORD *)(v256 + 8);
                        if (!v256)
                          goto LABEL_434;
                      }
                      v261 = v656[6];
                      if (v261)
                        v262 = (llvm::BasicBlock *)(v261 - 24);
                      else
                        v262 = 0;
                      v738[0] = 257;
                      v263 = (uint64_t **)sub_1C5EBD70C((llvm *)v656, v262, 0, (uint64_t)v691, v687, (int32x2_t **)a12, (llvm::Twine *)&__src, 0);
                      sub_1C5C393F0((uint64_t)v656, v263[6], v689, (uint64_t)v244, 1);
                      sub_1C6326820(&v707, (uint64_t *)&v712)[1] = v263;
                      v712 = v263;
                      v656 = v263;
                    }
                    else
                    {
LABEL_434:
                      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v694, (uint64_t)v656);
                      sub_1C5C39378((uint64_t)v656, (uint64_t)v244);
                    }
                  }
                  else
                  {
                    v656 = 0;
                  }
                  if ((_DWORD)v700)
                  {
                    v264 = (char *)v699;
                    v265 = (char *)v699 + 24 * v700;
                    do
                    {
                      v266 = (_QWORD *)*((_QWORD *)v265 - 2);
                      __dst = v266;
                      v267 = v266[1];
                      if (v267)
                      {
                        while (1)
                        {
                          v268 = *(_QWORD *)(v267 + 24);
                          v269 = *(unsigned __int8 *)(v268 + 16);
                          v270 = v268 && v269 >= 0x1C;
                          if (v270 && v269 - 29 < 0xB)
                            break;
                          v267 = *(_QWORD *)(v267 + 8);
                          if (!v267)
                            goto LABEL_451;
                        }
                        v273 = sub_1C6326820(&v707, (uint64_t *)&__dst);
                        v274 = v273[1];
                        if (!v274)
                        {
                          v275 = v273;
                          v276 = v266[6];
                          if (v276)
                            v277 = (llvm::BasicBlock *)(v276 - 24);
                          else
                            v277 = 0;
                          v738[0] = 257;
                          v278 = sub_1C5EBD70C((llvm *)v266, v277, 0, (uint64_t)v691, v687, (int32x2_t **)a12, (llvm::Twine *)&__src, 0);
                          v275[1] = v278;
                          sub_1C5C393F0((uint64_t)v266, *(uint64_t **)(v278 + 48), v689, (uint64_t)v244, 1);
                          v274 = v275[1];
                        }
                        *((_QWORD *)v265 - 2) = v274;
                        v24 = (int32x2_t **)a12;
                      }
                      else
                      {
LABEL_451:
                        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v694, (uint64_t)v266);
                        if (v272)
                          sub_1C5C39378((uint64_t)v266, (uint64_t)v244);
                      }
                      v265 -= 24;
                    }
                    while (v265 != v264);
                    if ((_DWORD)v700)
                    {
                      v279 = (char *)v699;
                      v280 = 24 * v700;
                      do
                      {
                        llvm::SwitchInstProfUpdateWrapper::addCase(&v726, *(llvm::ConstantInt **)&v279[v280 - 24], *(llvm::BasicBlock **)&v279[v280 - 16], *(_QWORD *)&v279[v280 - 8]);
                        v280 -= 24;
                      }
                      while (v280);
                    }
                  }
                  v281 = v656 == 0;
                  if (v656)
                  {
                    v282 = *((_DWORD *)v726 + 5);
                    if ((v282 & 0x40000000) != 0)
                      v283 = (char *)*((_QWORD *)v726 - 1);
                    else
                      v283 = (char *)v726 - 32 * (v282 & 0x7FFFFFF);
                    if (*((_QWORD *)v283 + 4))
                    {
                      **((_QWORD **)v283 + 6) = *((_QWORD *)v283 + 5);
                      v344 = *((_QWORD *)v283 + 5);
                      if (v344)
                        *(_QWORD *)(v344 + 16) = *((_QWORD *)v283 + 6);
                    }
                    *((_QWORD *)v283 + 4) = v656;
                    v284 = v656 + 1;
                    v285 = v656[1];
                    *((_QWORD *)v283 + 5) = v285;
                    if (v285)
                      *(_QWORD *)(v285 + 16) = v283 + 40;
                    *((_QWORD *)v283 + 6) = v284;
                    *v284 = v283 + 32;
                    llvm::SwitchInstProfUpdateWrapper::setSuccessorWeight((uint64_t *)&v726, 0, v653);
                    v286 = *((_DWORD *)v55 + 5);
                    v287 = (v286 >> 1) & 0x3FFFFFF;
                    v288 = (v287 - 1);
                    if (v287 != 1)
                    {
                      v296 = 0;
                      do
                      {
                        v297 = *((_DWORD *)v55 + 5);
                        if ((v297 & 0x40000000) != 0)
                          v298 = (uint64_t ***)*(v55 - 1);
                        else
                          v298 = &v55[-4 * (v297 & 0x7FFFFFF)];
                        if (v732)
                        {
                          v300 = v296 + 1;
                          if (v296 == 4294967294)
                            v301 = 0;
                          else
                            v301 = v296 + 1;
                          v299 = *(unsigned int *)(v730 + 4 * v301) | 0x100000000;
                        }
                        else
                        {
                          v299 = 0;
                          v300 = v296 + 1;
                        }
                        llvm::SwitchInstProfUpdateWrapper::addCase(&v726, (llvm::ConstantInt *)v298[4 * (2 * v296 + 2)], v658, v299);
                        v296 = v300;
                      }
                      while (v300 != v288);
                      goto LABEL_478;
                    }
                    if (v208)
                      goto LABEL_483;
                    v289 = 0;
                  }
                  else
                  {
                    if ((v653 & 0xFF00000000) == 0)
                    {
                      if (v208)
                      {
LABEL_483:
                        v292 = (llvm::BasicBlock *)v55[5];
                        v293 = (*((_DWORD *)v55 + 5) >> 1) & 0x3FFFFFF;
                        v294 = (v293 - 1);
                        if (v293 != 1)
                        {
                          do
                          {
                            if (v281)
                              llvm::BasicBlock::removePredecessor(v208, v292, 1);
                            v281 = 1;
                            --v294;
                          }
                          while (v294);
                        }
                        llvm::SwitchInstProfUpdateWrapper::eraseFromParent((llvm::SwitchInstProfUpdateWrapper *)&v729);
                        v295 = operator new(0x60uLL);
                        v295[13] = v295[13] & 0x38000000 | 1;
                        *(_QWORD *)v295 = 0;
                        *((_QWORD *)v295 + 1) = 0;
                        *((_QWORD *)v295 + 2) = 0;
                        *((_QWORD *)v295 + 3) = v295 + 8;
                        llvm::BranchInst::BranchInst((llvm::BranchInst *)(v295 + 8), v208, v292);
                      }
                      goto LABEL_524;
                    }
                    v290 = v653;
                    if (((*((_DWORD *)v55 + 5) >> 1) & 0x3FFFFFF) != 1)
                    {
                      v302 = 0;
                      do
                      {
                        if (v732)
                        {
                          if (v302 == 4294967294)
                            v304 = 0;
                          else
                            v304 = v302 + 1;
                          ++v302;
                          v303 = *(_DWORD *)(v730 + 4 * v304);
                        }
                        else
                        {
                          v303 = 0;
                          ++v302;
                        }
                        v290 += v303;
                      }
                      while (v302 != ((*((_DWORD *)v55 + 5) >> 1) & 0x3FFFFFF) - 1);
                    }
                    llvm::SwitchInstProfUpdateWrapper::setSuccessorWeight((uint64_t *)&v726, 0, v290 | 0x100000000);
LABEL_478:
                    if (v208)
                      goto LABEL_483;
                    if (!v656)
                    {
LABEL_524:
                      __dst = v722;
                      v721 = 0x400000000;
                      if (v695 == v694)
                        v316 = (uint64_t *)((char *)&v696 + 4);
                      else
                        v316 = &v696;
                      v317 = *(unsigned int *)v316;
                      if ((_DWORD)v317)
                      {
                        v318 = 8 * v317;
                        v319 = (unint64_t *)v695;
                        while (*v319 >= 0xFFFFFFFFFFFFFFFELL)
                        {
                          ++v319;
                          v318 -= 8;
                          if (!v318)
                            goto LABEL_543;
                        }
                      }
                      else
                      {
                        v319 = (unint64_t *)v695;
                      }
                      v320 = &v695[8 * v317];
                      if (v319 == (unint64_t *)v320)
                      {
LABEL_543:
                        v321 = 0;
                      }
                      else
                      {
                        v321 = 0;
                        v322 = *v319;
                        v323 = 4;
LABEL_535:
                        if (v321 >= v323)
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v722, v321 + 1, 16);
                          v321 = v721;
                        }
                        v324 = (uint64_t *)((char *)__dst + 16 * v321);
                        *v324 = v689;
                        v324[1] = v322 | 4;
                        v325 = (v721 + 1);
                        LODWORD(v721) = v325;
                        if (v325 >= HIDWORD(v721))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v722, v325 + 1, 16);
                          LODWORD(v325) = v721;
                        }
                        v326 = (llvm **)((char *)__dst + 16 * v325);
                        *v326 = v244;
                        v326[1] = (llvm *)(v322 & 0xFFFFFFFFFFFFFFFBLL);
                        v321 = v721 + 1;
                        LODWORD(v721) = v721 + 1;
                        v327 = v319 + 1;
                        while (v327 != (unint64_t *)v320)
                        {
                          v328 = *v327++;
                          v322 = v328;
                          if (v328 <= 0xFFFFFFFFFFFFFFFDLL)
                          {
                            v323 = HIDWORD(v721);
                            v319 = v327 - 1;
                            goto LABEL_535;
                          }
                        }
                      }
                      v329 = sub_1C63267A8((int *)&v707);
                      v331 = (char *)&v708;
                      if ((v707 & 1) == 0)
                        v331 = (char *)v708;
                      v332 = v709;
                      if ((v707 & 1) != 0)
                        v332 = 2;
                      v333 = (int *)&v331[16 * v332];
                      if (v333 != v329)
                      {
                        v334 = v329;
                        v335 = v330;
                        do
                        {
                          v337 = *(_QWORD *)v334;
                          v336 = *((_QWORD *)v334 + 1);
                          if (v321 >= HIDWORD(v721))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v722, v321 + 1, 16);
                            v321 = v721;
                          }
                          v338 = (uint64_t *)((char *)__dst + 16 * v321);
                          *v338 = v689;
                          v338[1] = v337 | 4;
                          v339 = (v721 + 1);
                          LODWORD(v721) = v339;
                          if (v339 >= HIDWORD(v721))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v722, v339 + 1, 16);
                            LODWORD(v339) = v721;
                          }
                          v340 = (llvm **)((char *)__dst + 16 * v339);
                          *v340 = v244;
                          v340[1] = (llvm *)(v336 & 0xFFFFFFFFFFFFFFFBLL);
                          v321 = v721 + 1;
                          LODWORD(v721) = v721 + 1;
                          v334 += 4;
                          v24 = (int32x2_t **)a12;
                          if (v334 == v335)
                          {
LABEL_557:
                            v334 = v335;
                          }
                          else
                          {
                            while ((*(_QWORD *)v334 | 0x1000) == 0xFFFFFFFFFFFFF000)
                            {
                              v334 += 4;
                              if (v334 == v335)
                                goto LABEL_557;
                            }
                          }
                        }
                        while (v334 != v333);
                      }
                      v341 = v321;
                      if (v24)
                      {
                        v342 = v691;
                        llvm::MemorySSAUpdater::applyUpdates(v24, (unint64_t *)__dst, v341, (uint64_t)v691, 1);
                        a9 = v667;
                        a4 = v668;
                        a10 = v666;
                        a6 = v671;
                      }
                      else
                      {
                        sub_1C4E25D14((uint64_t)&__src, (unint64_t *)__dst, v321, 1u);
                        v342 = v691;
                        llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>((uint64_t)v691, (uint64_t)&__src, 0);
                        a9 = v667;
                        a4 = v668;
                        a10 = v666;
                        a6 = v671;
                        if (v743 != v744)
                          free(v743);
                        sub_1C4E28CA4((uint64_t)v742);
                        sub_1C4E28CA4((uint64_t)&__src);
                      }
                      sub_1C5C396A4((uint64_t *)a1, (uint64_t)v658, v342, (int32x2_t *)v687, (llvm::LoopInfo *)v24, a11);
                      if (__dst != v722)
                        free(__dst);
                      if ((v707 & 1) == 0)
                        MEMORY[0x1CAA32FB4](v708, 8);
                      if (v695 != v694)
                        free(v695);
                      sub_1C5AE380C((uint64_t)&v726);
                      sub_1C5AE380C((uint64_t)&v729);
                      if (v699 != v701)
                        free(v699);
                      v98 = 1;
                      goto LABEL_136;
                    }
                    v286 = *((_DWORD *)v55 + 5);
                    v289 = ((v286 >> 1) & 0x3FFFFFF) - 1;
                  }
                  if ((v286 & 0x40000000) != 0)
                    v291 = (uint64_t ***)*(v55 - 1);
                  else
                    v291 = &v55[-4 * (v286 & 0x7FFFFFF)];
                  v305 = v289;
                  v306 = v289 - 1;
                  v307 = v289 - 1;
                  v308 = (2 * v306 + 3);
                  if (v307 == 4294967294)
                    v308 = 1;
                  if ((v286 & 0x40000000) != 0)
                    v309 = (uint64_t ***)*(v55 - 1);
                  else
                    v309 = &v55[-4 * (v286 & 0x7FFFFFF)];
                  v310 = v291[4 * v308];
                  v311 = (uint64_t *)(v309 + 4);
                  if (v309[4])
                  {
                    *v309[6] = (uint64_t *)v309[5];
                    v346 = v309[5];
                    if (v346)
                      v346[2] = (uint64_t *)v309[6];
                  }
                  *v311 = (uint64_t)v310;
                  if (v310)
                  {
                    v314 = v310[1];
                    v312 = v310 + 1;
                    v313 = v314;
                    v309[5] = (uint64_t **)v314;
                    if (v314)
                      v313[2] = (uint64_t)(v309 + 5);
                    v309[6] = v312;
                    *v312 = v311;
                  }
                  if (v732)
                  {
                    if (v307 == 4294967294)
                      v363 = 0;
                    else
                      v363 = v305;
                    v315 = *(unsigned int *)(v730 + 4 * v363) | 0x100000000;
                  }
                  else
                  {
                    v315 = 0;
                  }
                  llvm::SwitchInstProfUpdateWrapper::setSuccessorWeight((uint64_t *)&v729, 0, v315);
                  if (v732)
                  {
                    v733 = 1;
                    *(_DWORD *)(v730 + 4 * v305) = *(_DWORD *)(v730 + 4 * v731[0]-- - 4);
                  }
                  llvm::SwitchInst::removeCase((uint64_t)v729, (uint64_t)v55, v306);
                  goto LABEL_524;
                }
                v244 = 0;
                switch(*(_BYTE *)(v243 + 16))
                {
                  case 0x1D:
                  case 0x21:
                  case 0x22:
                  case 0x23:
                  case 0x24:
                  case 0x25:
                  case 0x26:
                    goto LABEL_412;
                  case 0x1E:
                    goto LABEL_1194;
                  case 0x1F:
                    v245 = (*(_DWORD *)(v243 + 20) >> 1) & 0x3FFFFFF;
                    break;
                  case 0x20:
                    v245 = (*(_DWORD *)(v243 + 20) & 0x7FFFFFF) - 1;
                    break;
                  case 0x27:
                    v245 = *(_DWORD *)(v243 + 80) + 1;
                    break;
                  default:
                    goto LABEL_407;
                }
                if (v245 == 1)
                  goto LABEL_411;
              }
            }
LABEL_407:
            v244 = 0;
            goto LABEL_412;
          }
          v209 = (char *)v715;
          v210 = (char *)v715 + 4 * v716;
          while (2)
          {
            v211 = *((_DWORD *)v55 + 5);
            if ((v211 & 0x40000000) != 0)
              v212 = (uint64_t ***)*(v55 - 1);
            else
              v212 = &v55[-4 * (v211 & 0x7FFFFFF)];
            v214 = *((_DWORD *)v210 - 1);
            v210 -= 4;
            v213 = v214;
            v215 = 2 * v214;
            v216 = (2 * v214 + 3);
            if (v214 == -2)
              v216 = 1;
            v217 = 4 * v216;
            v218 = *((_DWORD *)v687 + 4);
            if (v218)
            {
              v219 = v212[v217];
              v220 = *(_QWORD *)v687;
              v221 = v218 - 1;
              v222 = ((v219 >> 4) ^ (v219 >> 9)) & (v218 - 1);
              v223 = *(uint64_t ***)(*(_QWORD *)v687 + 16 * v222);
              if (v219 != v223)
              {
                v224 = 1;
                while (v223 != (uint64_t **)-4096)
                {
                  v225 = v222 + v224++;
                  v222 = v225 & v221;
                  v223 = *(uint64_t ***)(v220 + 16 * v222);
                  if (v219 == v223)
                    goto LABEL_355;
                }
                goto LABEL_356;
              }
LABEL_355:
              v226 = *(const llvm::Loop **)(v220 + 16 * v222 + 8);
              if (!v226)
                goto LABEL_356;
              if (v97 != v226)
              {
                v230 = v97;
                while (v230)
                {
                  v230 = *(const llvm::Loop **)v230;
                  if (v230 == v226)
                  {
                    v97 = v226;
                    break;
                  }
                }
              }
            }
            else
            {
LABEL_356:
              v97 = 0;
            }
            if (v732)
            {
              if (v213 == -2)
                v231 = 0;
              else
                v231 = v213 + 1;
              v227 = (void *)(*(unsigned int *)(v730 + 4 * v231) | 0x100000000);
            }
            else
            {
              v227 = 0;
            }
            __src = v227;
            if ((v211 & 0x40000000) != 0)
              v228 = (uint64_t ***)*(v55 - 1);
            else
              v228 = &v55[-4 * (v211 & 0x7FFFFFF)];
            v229 = (uint64_t)v228[4 * ((v215 + 2) & 0xFFFFFFFE)];
            __dst = v228[v217];
            sub_1C6326760((uint64_t)&v699, v229, (uint64_t *)&__dst, (uint64_t *)&__src);
            if (v732)
            {
              v733 = 1;
              *(_DWORD *)(v730 + 4 * (v213 + 1)) = *(_DWORD *)(v730 + 4 * v731[0]-- - 4);
            }
            llvm::SwitchInst::removeCase((uint64_t)v729, (uint64_t)v55, v213);
            if (v210 == v209)
              goto LABEL_337;
            continue;
          }
        }
      }
      v96 = v716;
      v97 = (const llvm::Loop *)a1;
      if ((_DWORD)v716)
        goto LABEL_334;
      v98 = 0;
      a9 = v667;
      a4 = v668;
      a10 = v666;
      a6 = v671;
LABEL_136:
      if (v715 != v717)
        free(v715);
      if (!v98)
        goto LABEL_638;
      v99 = *(_QWORD *)LoopLatch;
      if (*(_QWORD *)LoopLatch == LoopLatch)
        goto LABEL_797;
      v100 = v99 - 24;
      if (v99)
        v101 = v99 - 24;
      else
        v101 = 0;
      v102 = *(unsigned __int8 *)(v101 + 16) - 40;
      if (v102 < 0xFFFFFFF5)
        v101 = 0;
      v676 = 1;
      if (!v99)
        goto LABEL_638;
      if (*(_BYTE *)(v101 + 16) != 30 || v102 < 0xFFFFFFF5)
        goto LABEL_638;
      v104 = *(_DWORD *)(v101 + 20);
LABEL_306:
      if ((v104 & 0x7FFFFFF) == 3
        || ((v25 = *(_QWORD *)(v100 - 32),
             v186 = sub_1C477672C(a1 + 56, v25),
             v187 = *(_QWORD *)(a1 + 64),
             v187 != *(_QWORD *)(a1 + 56))
          ? (v188 = (unsigned int *)(a1 + 72))
          : (v188 = (unsigned int *)(a1 + 76)),
            v186 == (_QWORD *)(v187 + 8 * *v188)))
      {
LABEL_797:
        v676 = 1;
        goto LABEL_638;
      }
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v702, v25);
      v676 = 1;
      if (!v189)
        goto LABEL_638;
      goto LABEL_4;
    }
    if (i)
      v39 = i - 24;
    else
      v39 = 0;
    v40 = *(unsigned __int8 *)(v39 + 16) - 33;
    if (v40 > 0x37)
      goto LABEL_27;
    if (((1 << (*(_BYTE *)(v39 + 16) - 33)) & 0x808001D0000010) != 0)
      goto LABEL_638;
    if (((1 << (*(_BYTE *)(v39 + 16) - 33)) & 0x8000000000041) == 0)
    {
      if (v40 == 27 && (*(_WORD *)(v39 + 18) & 0x301) != 0)
        goto LABEL_638;
      goto LABEL_27;
    }
    v41 = *(_QWORD *)(v39 + 64);
    if (v41 && (*(_BYTE *)(v41 + 17) & 0x30) != 0)
      goto LABEL_27;
    v42 = *(_DWORD *)(v39 + 20);
    if (v42 < 0)
    {
      v43 = v39 - 32 * (v42 & 0x7FFFFFF);
      v46 = *(_QWORD *)(v43 - 8);
      v44 = v43 - 8;
      v45 = v46;
      if (v46)
        break;
    }
LABEL_33:
    if ((llvm::CallBase::hasFnAttrOnCalledFunction(v39, 45) & 1) == 0
      && !llvm::CallBase::hasFnAttrOnCalledFunction(v39, 44))
    {
      goto LABEL_638;
    }
LABEL_27:
    if ((llvm::Instruction::mayThrow((llvm::Instruction *)v39) & 1) != 0
      || (llvm::Instruction::willReturn((llvm::Instruction *)v39) & 1) == 0)
    {
      goto LABEL_638;
    }
  }
  v47 = -v45;
  while (1)
  {
    v48 = *(_DWORD *)(*(_QWORD *)(v44 + v47) + 8);
    v498 = v48 > 7;
    v49 = (1 << v48) & 0x83;
    if (v498 || v49 == 0)
      break;
    v47 += 16;
    v24 = (int32x2_t **)a12;
    if (!v47)
      goto LABEL_33;
  }
LABEL_638:
  if (v703 != v702)
    free(v703);
  a3 = v687;
  if ((v676 & 1) != 0)
  {
    v364 = 1;
    a9(a10, 1, 0, 0, 0);
    return v364;
  }
LABEL_642:
  if (byte_1ED823038)
    v365 = 1;
  else
    v365 = v681 == 0;
  if (!v365)
  {
    v366 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)*a6 + 88))(*a6);
    if ((v366 & 1) == 0)
      goto LABEL_650;
    return 0;
  }
  if (!byte_1ED823038)
    return 0;
LABEL_650:
  v367 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 32) + 56) + 112);
  if (v367 && ((*(_BYTE *)(v367 + 17) & 4) != 0 || *(char *)(v367 + 13) < 0)
    || !llvm::Loop::isSafeToClone((llvm::Loop *)a1))
  {
    return 0;
  }
  v664 = v728;
  v726 = v728;
  v26 = 0x400000000;
  v727 = 0x400000000;
  v667 = a9;
  v668 = a4;
  v666 = a10;
  v671 = a6;
  v369 = byte_1ED8233F8
      && (v368 = sub_1C4FB7E80(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 32) + 56) + 40) + 112), "llvm.experimental.guard", 0x17uLL)) != 0&& !*(_BYTE *)(v368 + 16)&& *(_QWORD *)(v368 + 8) != 0;
  v665 = (uint64_t *)v722;
  __dst = v722;
  v721 = 0x600000000;
  v723 = 0;
  v724 = 1;
  v725 = 0;
  v370 = *(llvm::BasicBlock ***)(a1 + 32);
  v371 = *(llvm::BasicBlock ***)(a1 + 40);
  if (v371 != v370)
  {
    while (2)
    {
      v372 = *((_DWORD *)a3 + 4);
      if (!v372)
        goto LABEL_664;
      v373 = *v370;
      v374 = *(_QWORD *)a3;
      v375 = v372 - 1;
      v376 = ((*v370 >> 4) ^ (*v370 >> 9)) & (v372 - 1);
      v377 = *(llvm::BasicBlock **)(*(_QWORD *)a3
                                  + 16 * (((*v370 >> 4) ^ (*v370 >> 9)) & v375));
      if (*v370 != v377)
      {
        v378 = 1;
        while (v377 != (llvm::BasicBlock *)-4096)
        {
          v379 = v376 + v378++;
          v376 = v379 & v375;
          v377 = *(llvm::BasicBlock **)(v374 + 16 * v376);
          if (v373 == v377)
            goto LABEL_663;
        }
LABEL_664:
        if (++v370 == v371)
          goto LABEL_752;
        continue;
      }
      break;
    }
LABEL_663:
    if (*(_QWORD *)(v374 + 16 * v376 + 8) != a1)
      goto LABEL_664;
    if (v369)
    {
      for (j = (_QWORD *)*((_QWORD *)v373 + 6); j != (_QWORD *)((char *)v373 + 40); j = (_QWORD *)j[1])
      {
        if (j)
          v381 = j - 3;
        else
          v381 = 0;
        if (j)
        {
          if (*((_BYTE *)v381 + 16) == 84)
          {
            v382 = *(v381 - 4);
            if (v382)
            {
              if (!*(_BYTE *)(v382 + 16) && *(_QWORD *)(v382 + 24) == v381[9] && *(_DWORD *)(v382 + 36) == 125)
              {
                v383 = (unsigned __int8 *)v381[-4 * (*((_DWORD *)v381 + 5) & 0x7FFFFFF)];
                if (v383[16] >= 0x15u
                  && llvm::Loop::isLoopInvariant(a1, v381[-4 * (*((_DWORD *)v381 + 5) & 0x7FFFFFF)]))
                {
                  v702 = (llvm::BasicBlock *)v383;
                  sub_1C5C43ADC((unint64_t *)&v699, &v702, 1uLL);
                  __src = v381;
                  sub_1C6326AC0((uint64_t *)&v735, (uint64_t)v699);
                  sub_1C5C3A734((uint64_t)&v726, (char *)&__src);
                  sub_1C4DA9768((uint64_t *)&v735);
                  sub_1C4DA9768((uint64_t *)&v699);
                }
              }
            }
          }
        }
      }
    }
    v384 = (_QWORD *)*((_QWORD *)v373 + 5);
    a3 = v687;
    if (v384 == (_QWORD *)((char *)v373 + 40))
      goto LABEL_664;
    if (v384)
      v385 = v384 - 3;
    else
      v385 = 0;
    v386 = *((unsigned __int8 *)v385 + 16) - 40;
    if (v386 >= 0xFFFFFFF5)
      v387 = v385;
    else
      v387 = 0;
    v388 = *((unsigned __int8 *)v387 + 16);
    if (v384 && (v388 == 31 ? (v389 = v386 >= 0xFFFFFFF5) : (v389 = 0), v389))
    {
      v390 = *((_DWORD *)v387 + 5);
      if ((v390 & 0x40000000) != 0)
        v391 = (uint64_t *)*(v387 - 1);
      else
        v391 = &v387[-4 * (v390 & 0x7FFFFFF)];
      if (*(unsigned __int8 *)(*v391 + 16) < 0x15u
        || !llvm::Loop::isLoopInvariant(a1, *v391)
        || llvm::BasicBlock::getUniqueSuccessor(v373))
      {
        goto LABEL_664;
      }
      v404 = *((_DWORD *)v387 + 5);
      if ((v404 & 0x40000000) != 0)
        v405 = (llvm::BasicBlock **)*(v387 - 1);
      else
        v405 = (llvm::BasicBlock **)&v387[-4 * (v404 & 0x7FFFFFF)];
      v702 = *v405;
      sub_1C5C43ADC((unint64_t *)&v699, &v702, 1uLL);
      __src = v387;
      sub_1C6326AC0((uint64_t *)&v735, (uint64_t)v699);
      sub_1C5C3A734((uint64_t)&v726, (char *)&__src);
      sub_1C4DA9768((uint64_t *)&v735);
      v409 = (uint64_t *)&v699;
    }
    else
    {
      if (!v384)
        goto LABEL_664;
      if (v388 != 30 || v386 < 0xFFFFFFF5)
        goto LABEL_664;
      if ((*((_DWORD *)v387 + 5) & 0x7FFFFFF) != 3)
        goto LABEL_664;
      v394 = v387 - 12;
      v393 = (_DWORD *)*(v387 - 12);
      v395 = *((unsigned __int8 *)v393 + 16);
      if (v395 < 0x15 || *(v387 - 4) == *(v387 - 8))
        goto LABEL_664;
      v699 = 0;
      __src = &v699;
      while (v395 == 85)
      {
        v396 = v393[5];
        v397 = (v396 & 0x40000000) != 0 ? (void **)*((_QWORD *)v393 - 1) : (void **)&v393[-8 * (v396 & 0x7FFFFFF)];
        v398 = *v397;
        if (!v398)
          break;
        v699 = v398;
        v399 = v393[5];
        v400 = (v399 & 0x40000000) != 0 ? (char *)*((_QWORD *)v393 - 1) : (char *)&v393[-8 * (v399 & 0x7FFFFFF)];
        if (!sub_1C4D89CC8((uint64_t)&v735, *((llvm::Constant **)v400 + 4)))
          break;
        v401 = v393[5];
        v402 = (v401 & 0x40000000) != 0 ? (char *)*((_QWORD *)v393 - 1) : (char *)&v393[-8 * (v401 & 0x7FFFFFF)];
        v403 = (unsigned __int8 *)*((_QWORD *)v402 + 8);
        if (!v403
          || v403[16] >= 0x15u
          || !llvm::Constant::isNullValue((llvm::Constant *)v403)
          && !sub_1C4E71060((uint64_t)&v702, (llvm::Constant *)v403))
        {
          break;
        }
        v393 = v699;
        __src = &v699;
        v395 = *((unsigned __int8 *)v699 + 16);
      }
      if (*v394)
      {
        *(_QWORD *)*(v387 - 10) = *(v387 - 11);
        v406 = *(v387 - 11);
        if (v406)
          *(_QWORD *)(v406 + 16) = *(v387 - 10);
      }
      *(v387 - 12) = v393;
      v407 = *((_QWORD *)v393 + 1);
      *(v387 - 11) = v407;
      if (v407)
        *(_QWORD *)(v407 + 16) = v387 - 11;
      *(v387 - 10) = v393 + 2;
      *((_QWORD *)v393 + 1) = v394;
      if (*((unsigned __int8 *)v393 + 16) < 0x15u)
        goto LABEL_664;
      if (llvm::Loop::isLoopInvariant(a1, *v394))
      {
        v729 = (void *)*(v387 - 12);
        sub_1C5C43ADC((unint64_t *)&v702, &v729, 1uLL);
        __src = v387;
        sub_1C6326AC0((uint64_t *)&v735, (uint64_t)v702);
LABEL_744:
        sub_1C5C3A734((uint64_t)&v726, (char *)&__src);
        sub_1C4DA9768((uint64_t *)&v735);
      }
      else
      {
        v408 = (unsigned __int8 *)*v394;
        LODWORD(__src) = 0;
        if (!sub_1C57BE738((uint64_t)&__src, v408) && !sub_1C57BE7B8((uint64_t)&__src + 2, v408))
          goto LABEL_664;
        sub_1C5C3A0C8(&v702, a1, v408);
        if ((unint64_t)v702 >= 8
          && ((v702 & 4) == 0
           || ((unint64_t)v702 & 0xFFFFFFFFFFFFFFF8) == 0
           || *(_DWORD *)(((unint64_t)v702 & 0xFFFFFFFFFFFFFFF8) + 8)))
        {
          __src = v387;
          v735 = v702;
          v702 = 0;
          goto LABEL_744;
        }
      }
      v409 = (uint64_t *)&v702;
    }
    sub_1C4DA9768(v409);
    goto LABEL_664;
  }
LABEL_752:
  if (!a12)
  {
    v412 = 0;
    v64 = v691;
    goto LABEL_756;
  }
  LoopID = llvm::Loop::getLoopID((llvm::Loop *)a1);
  v64 = v691;
  if (llvm::findOptionMDForLoopID(LoopID, "llvm.loop.unswitch.partial.disable", 0x22uLL))
    goto LABEL_754;
  if (!(_DWORD)v727)
  {
LABEL_784:
    llvm::hasPartialIVCondition((llvm *)a1, (llvm::Loop *)dword_1ED823578, v673, *(_QWORD *)a12, (uint64_t)&__src);
    if (!v741)
      goto LABEL_754;
    LoopLatch = (uint64_t)&v723;
    SuccessorWeight = v735;
    v428 = v721;
    if (v721 >= v735)
    {
LABEL_1195:
      if ((_DWORD)SuccessorWeight)
        memmove(__dst, __src, 8 * SuccessorWeight);
LABEL_791:
      LODWORD(v721) = SuccessorWeight;
      *(_OWORD *)LoopLatch = v739;
      *(_QWORD *)(LoopLatch + 16) = v740;
      v429 = **(_QWORD **)(a1 + 32);
      v430 = *(_QWORD *)(v429 + 40);
      if (v430 == v429 + 40)
      {
        v412 = 0;
      }
      else
      {
        v431 = (unsigned __int8 *)(v430 - 24);
        if (!v430)
          v431 = 0;
        if (v431[16] - 29 >= 0xB)
          v412 = 0;
        else
          v412 = (llvm::Instruction *)v431;
      }
      a3 = v687;
      v702 = 0;
      if ((_DWORD)v735)
      {
        v548 = (uint64_t *)__src;
        v549 = 8 * v735;
        do
        {
          v550 = *v548++;
          sub_1C5C39FB8((uint64_t)&v702, v550);
          v549 -= 8;
        }
        while (v549);
        v429 = **(_QWORD **)(a1 + 32);
        v430 = *(_QWORD *)(v429 + 40);
        a3 = v687;
      }
      if (v430 == v429 + 40)
      {
        v551 = 0;
      }
      else
      {
        if (v430)
          v551 = (unsigned __int8 *)(v430 - 24);
        else
          v551 = 0;
        if (v551[16] - 29 >= 0xB)
          v551 = 0;
      }
      v699 = v551;
      v700 = (uint64_t)v702;
      v702 = 0;
      sub_1C5C3A734((uint64_t)&v726, (char *)&v699);
      sub_1C4DA9768(&v700);
      sub_1C4DA9768((uint64_t *)&v702);
      if (v741 && __src != &v736)
        free(__src);
      goto LABEL_756;
    }
    if (HIDWORD(v721) < v735)
    {
      LODWORD(v721) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v722, v735, 8);
    }
    else if ((_DWORD)v721)
    {
      memmove(__dst, __src, 8 * v721);
LABEL_789:
      if (v428 != v735)
        memcpy((char *)__dst + 8 * v428, (char *)__src + 8 * v428, 8 * v735 - 8 * v428);
      goto LABEL_791;
    }
    v428 = 0;
    goto LABEL_789;
  }
  v420 = v726;
  v421 = **(_QWORD **)(a1 + 32);
  v424 = *(_QWORD *)(v421 + 40);
  v422 = v421 + 40;
  v423 = v424;
  v425 = v424 - 24;
  if (!v424)
    v425 = 0;
  v426 = 16 * v727;
  while (1)
  {
    if (v423 == v422)
      v427 = 0;
    else
      v427 = *(unsigned __int8 *)(v425 + 16) - 29 >= 0xB ? 0 : v425;
    if (*v420 == v427)
      break;
    v420 += 2;
    v426 -= 16;
    if (!v426)
      goto LABEL_784;
  }
LABEL_754:
  v412 = 0;
LABEL_756:
  if (!(_DWORD)v727)
  {
    v364 = 0;
    v413 = v664;
    goto LABEL_1173;
  }
  sub_1C4DFE414((uint64_t)&v715, a1);
  llvm::LoopBlocksDFS::perform((llvm::LoopBlocksDFS *)&v715, a3);
  if ((sub_1C4F7C2CC((uint64_t)&v715, (uint64_t *)a3) & 1) != 0)
  {
    v364 = 0;
    v413 = v664;
    goto LABEL_1170;
  }
  v712 = v714;
  v713 = v26;
  sub_1C4EAEA40((_QWORD *)a1, (uint64_t)&v712);
  if ((_DWORD)v713)
  {
    v414 = v712;
    v415 = (char *)v712;
    do
    {
      for (k = *(_QWORD *)(*(_QWORD *)v415 + 48); ; k = *(_QWORD *)(k + 8))
      {
        v417 = k - 24;
        if (!k)
          v417 = 0;
        if (*(_BYTE *)(v417 + 16) != 83)
          break;
      }
      v418 = *(unsigned __int8 *)(k - 8);
      if (v418 == 38 || v418 == 79)
      {
        v364 = 0;
        v413 = v664;
        goto LABEL_1168;
      }
      v415 += 8;
    }
    while (v415 != (char *)v712 + 8 * v713);
  }
  v707 = (uint64_t)v711;
  v708 = v711;
  v709 = 4;
  v710 = 0;
  llvm::CodeMetrics::collectEphemeralValues(a1, v668, (llvm::SmallPtrSetImplBase *)&v707);
  v699 = (void *)1;
  for (m = 8; m != 104; m += 24)
    *(void **)((char *)&v699 + m) = (void *)-4096;
  SuccessorWeight = *(_QWORD *)(a1 + 32);
  __s1a = v412;
  v432 = *(llvm::Instruction **)(a1 + 40);
  if (v432 == (llvm::Instruction *)SuccessorWeight)
  {
    v660 = 0;
    v661 = 0;
    goto LABEL_852;
  }
  v660 = 0;
  v661 = 0;
  v678 = *(llvm::Instruction **)(a1 + 40);
  while (2)
  {
    v702 = *(llvm::BasicBlock **)SuccessorWeight;
    v433 = (char *)v702 + 40;
    v434 = (char *)*((_QWORD *)v702 + 6);
    if (v434 == (char *)v702 + 40)
    {
      v435 = 0;
      v436 = 0;
      goto LABEL_846;
    }
    v682 = SuccessorWeight;
    v435 = 0;
    v436 = 0;
    while (2)
    {
      if (v434)
        v437 = (uint64_t)(v434 - 24);
      else
        v437 = 0;
      v438 = sub_1C477672C((uint64_t)&v707, v437);
      if (v708 == (void *)v707)
        v439 = (uint64_t *)((char *)&v709 + 4);
      else
        v439 = &v709;
      if (v438 == (_QWORD *)((char *)v708 + 8 * *(unsigned int *)v439))
      {
        if (*(_BYTE *)(*(_QWORD *)v437 + 8) == 12
          && (llvm::Instruction::isUsedOutsideOfBlock((llvm::Instruction *)v437, v702) & 1) != 0
          || ((v440 = *(unsigned __int8 *)(v437 + 16) - 33,
               v498 = v440 > 0x33,
               v441 = (1 << v440) & 0x8000000000041,
               !v498)
            ? (v442 = v441 == 0)
            : (v442 = 1),
              !v442
           && ((v443 = *((_QWORD *)v434 + 5)) != 0 && (*(_BYTE *)(v443 + 12) & 0x40) != 0
            || (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)(v434 - 24), 6) & 1) != 0
            || (v444 = *((_QWORD *)v434 + 5)) != 0 && (*(_BYTE *)(v444 + 15) & 1) != 0
            || (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)(v434 - 24), 24) & 1) != 0)))
        {
          v364 = 0;
          v413 = v664;
          goto LABEL_1163;
        }
        v445 = *(_DWORD *)(v437 + 20);
        if ((v445 & 0x40000000) != 0)
        {
          v447 = *(uint64_t **)(v437 - 8);
          v446 = v445 & 0x7FFFFFF;
        }
        else
        {
          v446 = v445 & 0x7FFFFFF;
          v447 = (uint64_t *)(v437 - 32 * v446);
        }
        __src = &v736;
        v735 = (void *)v26;
        if (v446 >= 5)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v736, v446, 8);
          v448 = (int)v735;
          v450 = (uint64_t *)__src;
          v449 = v735;
          goto LABEL_827;
        }
        v448 = 0;
        if (v446)
        {
          v449 = 0;
          v450 = &v736;
LABEL_827:
          v451 = 32 * v446;
          v452 = &v450[v449];
          do
          {
            v453 = *v447;
            v447 += 4;
            *v452++ = v453;
            v451 -= 32;
          }
          while (v451);
          v454 = (uint64_t *)__src;
        }
        else
        {
          v454 = &v736;
        }
        LODWORD(v735) = v448 + v446;
        v455 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t *))(*(_QWORD *)*v671 + 72))(*v671, v437, v454);
        v457 = v456;
        if (__src != &v736)
          free(__src);
        if (v457 == 1)
          v435 = 1;
        if (__OFADD__(v436, v455))
          v436 = ((uint64_t)(v436 + v455) >> 63) ^ 0x8000000000000000;
        else
          v436 += v455;
      }
      v434 = (char *)*((_QWORD *)v434 + 1);
      if (v434 != v433)
        continue;
      break;
    }
    v458 = v660;
    if (v435 == 1)
      v458 = 1;
    v660 = v458;
    v432 = v678;
    SuccessorWeight = v682;
LABEL_846:
    v459 = v661 + v436;
    if (__OFADD__(v661, v436))
      v459 = ((uint64_t)(v661 + v436) >> 63) ^ 0x8000000000000000;
    v661 = v459;
    v460 = sub_1C6326B44(&v699, (uint64_t *)&v702);
    v460[1] = v436;
    *((_DWORD *)v460 + 4) = v435;
    SuccessorWeight += 8;
    v64 = v691;
    if ((llvm::Instruction *)SuccessorWeight != v432)
      continue;
    break;
  }
LABEL_852:
  v702 = (llvm::BasicBlock *)1;
  for (n = 8; n != 104; n += 24)
    *(llvm::BasicBlock **)((char *)&v702 + n) = (llvm::BasicBlock *)-4096;
  v463 = (uint64_t *)a12;
  v462 = (int32x2_t *)v687;
  if (!(_DWORD)v727)
  {
    if (dword_1ED8230F8 > 0)
    {
      v646 = 0;
      v648 = 0;
      v464 = 0;
      goto LABEL_1069;
    }
    goto LABEL_1089;
  }
  v464 = 0;
  v646 = 0;
  v648 = 0;
  v662 = 0;
  v663 = 0;
  v465 = (unint64_t *)v726;
  v659 = (llvm::BasicBlock *)((char *)v726 + 16 * v727);
  __na = a1 + 56;
  while (2)
  {
    v466 = *v465;
    v468 = v465 + 1;
    v467 = v465[1];
    v679 = v464;
    v674 = (llvm::MemorySSA *)v465;
    if (v467 >= 8)
    {
      if ((v467 & 4) != 0)
      {
        v468 = *(unint64_t **)(v467 & 0xFFFFFFFFFFFFFFF8);
        v473 = *(unsigned int *)((v467 & 0xFFFFFFFFFFFFFFF8) + 8);
        v469 = *(unsigned __int8 *)(v466 + 16);
        if (v469 == 30 && v466 != 0)
        {
          if (v473 != 1)
          {
            v669 = v473;
            v471 = 0;
            v469 = 30;
            goto LABEL_880;
          }
          v467 = *v468;
LABEL_878:
          v471 = v467 == *(_QWORD *)(v466 - 96);
          v469 = 30;
          v669 = 1;
          goto LABEL_880;
        }
      }
      else
      {
        v469 = *(unsigned __int8 *)(v466 + 16);
        if (v469 == 30 && v466 != 0)
          goto LABEL_878;
        v473 = 1;
      }
      v669 = v473;
      v471 = 1;
      goto LABEL_880;
    }
    v669 = 0;
    v468 = 0;
    v469 = *(unsigned __int8 *)(v466 + 16);
    v471 = v469 != 30 || v466 == 0;
LABEL_880:
    v475 = *(_QWORD *)(v466 + 40);
    __src = v738;
    v735 = v738;
    v736 = 4;
    LODWORD(v737) = 0;
    v683 = v475;
    v476 = *(_QWORD *)(v475 + 40);
    v690 = v466;
    v671 = v468;
    if (v476 == v475 + 40)
      goto LABEL_1033;
    if (v476)
      v477 = v476 - 24;
    else
      v477 = 0;
    v478 = *(unsigned __int8 *)(v477 + 16);
    v479 = v478 - 29;
    if (v478 == 30)
    {
      if ((*(_DWORD *)(v477 + 20) & 0x7FFFFFF) == 3)
        v480 = 2;
      else
        v480 = 1;
    }
    else
    {
      v480 = 2;
      SuccessorWeight = 0;
      LoopLatch = 0;
      switch(v479)
      {
        case 0:
        case 5:
        case 6:
          goto LABEL_941;
        case 1:
          goto LABEL_1194;
        case 2:
          v480 = (*(_DWORD *)(v477 + 20) >> 1) & 0x3FFFFFF;
          break;
        case 3:
        case 9:
          v480 = (*(_DWORD *)(v477 + 20) & 0x7FFFFFF) - 1;
          break;
        case 4:
          goto LABEL_888;
        case 7:
          v480 = *(_WORD *)(v477 + 18) & 1;
          break;
        case 8:
          v480 = 1;
          goto LABEL_888;
        case 10:
          v480 = *(_DWORD *)(v477 + 80) + 1;
          break;
        default:
          goto LABEL_1033;
      }
      if (!v480)
      {
LABEL_1033:
        LoopLatch = 0;
        SuccessorWeight = 0;
        goto LABEL_941;
      }
    }
LABEL_888:
    v481 = 0;
    SuccessorWeight = 0;
    LoopLatch = 0;
    v482 = v480;
    while (2)
    {
      v483 = *(unsigned __int8 *)(v477 + 16);
      if (v483 != 30)
        __asm { BR              X9 }
      v484 = *(llvm::BasicBlock **)(v477 - 32 - 32 * v481);
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&__src, (uint64_t)v484);
      if (!v485)
        goto LABEL_934;
      if (v471)
        goto LABEL_897;
      if (sub_1C5088268((uint64_t)&v729, *(unsigned __int8 **)(v466 - 96)))
        goto LABEL_893;
      if (!sub_1C48491B0((uint64_t)&v729, *(unsigned __int8 **)(v466 - 96)))
      {
        if (llvm::Constant::isOneValue(v723) && v484 == *(llvm::BasicBlock **)(v466 - 32))
          goto LABEL_934;
        if (!llvm::Constant::isOneValue(v723))
        {
LABEL_893:
          v486 = *(llvm::BasicBlock **)(v466 - 64);
          goto LABEL_896;
        }
LABEL_897:
        if (!llvm::BasicBlock::getUniquePredecessor(v484))
        {
          v494 = *((_QWORD *)v484 + 1);
          if (v494)
          {
            while (1)
            {
              v495 = *(_QWORD *)(v494 + 24);
              v496 = *(unsigned __int8 *)(v495 + 16);
              v497 = v495 && v496 >= 0x1C;
              v498 = !v497 || v496 - 29 > 0xA;
              if (!v498)
                break;
              v494 = *(_QWORD *)(v494 + 8);
              if (!v494)
                goto LABEL_898;
            }
LABEL_923:
            v502 = *(_QWORD *)(v495 + 40);
            if (v683 != v502
              && !llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)v691, (uint64_t)v484, v502))
            {
              goto LABEL_933;
            }
            while (1)
            {
              v494 = *(_QWORD *)(v494 + 8);
              if (!v494)
                break;
              v495 = *(_QWORD *)(v494 + 24);
              v499 = *(unsigned __int8 *)(v495 + 16);
              if (v495)
                v500 = v499 >= 0x1C;
              else
                v500 = 0;
              if (v500 && v499 - 29 < 0xB)
                goto LABEL_923;
            }
          }
        }
LABEL_898:
        v487 = *((_QWORD *)v691 + 3);
        v488 = *((unsigned int *)v691 + 10);
        if ((_DWORD)v488)
        {
          LODWORD(v489) = (v488 - 1) & ((v484 >> 4) ^ (v484 >> 9));
          v490 = (llvm::BasicBlock **)(v487 + 16 * v489);
          v491 = *v490;
          if (v484 == *v490)
          {
LABEL_927:
            v503 = sub_1C5C43CF8((uint64_t)v490[1], (uint64_t)&v699, (uint64_t)&v702);
            if (v504 == 1)
              SuccessorWeight = 1;
            else
              SuccessorWeight = SuccessorWeight;
            if (__OFADD__(LoopLatch, v503))
              LoopLatch = ((uint64_t)(LoopLatch + v503) >> 63) ^ 0x8000000000000000;
            else
              LoopLatch += v503;
LABEL_933:
            v466 = v690;
            goto LABEL_934;
          }
          v492 = 1;
          while (v491 != (llvm::BasicBlock *)-4096)
          {
            v493 = v489 + v492++;
            v489 = v493 & (v488 - 1);
            v491 = *(llvm::BasicBlock **)(v487 + 16 * v489);
            if (v484 == v491)
            {
              v490 = (llvm::BasicBlock **)(v487 + 16 * v489);
              goto LABEL_927;
            }
          }
        }
        v490 = (llvm::BasicBlock **)(v487 + 16 * v488);
        goto LABEL_927;
      }
      v486 = *(llvm::BasicBlock **)(v466 - 32);
LABEL_896:
      if (v484 != v486)
        goto LABEL_897;
LABEL_934:
      if (++v481 != v482)
        continue;
      break;
    }
    v469 = *(unsigned __int8 *)(v466 + 16);
    v64 = v691;
LABEL_941:
    if (v469 == 84
      && (v505 = *(_QWORD *)(v466 - 32)) != 0
      && !*(_BYTE *)(v505 + 16)
      && *(_QWORD *)(v505 + 24) == *(_QWORD *)(v466 + 72)
      && *(_DWORD *)(v505 + 36) == 125)
    {
      v506 = 1;
    }
    else
    {
      v506 = HIDWORD(v736) + ~(_DWORD)v737;
    }
    v463 = (uint64_t *)a12;
    v507 = v660;
    if ((_DWORD)SuccessorWeight == 1)
      v507 = 1;
    v694 = (char *)v506;
    LODWORD(v695) = 0;
    if (__OFSUB__(v661, LoopLatch))
      v508 = (void *)(((v661 - LoopLatch) >> 63) ^ 0x8000000000000000);
    else
      v508 = (void *)(v661 - LoopLatch);
    v729 = v508;
    v730 = v507;
    sub_1C4848B64((uint64_t)&v729, (uint64_t)&v694);
    v509 = v729;
    v510 = v730;
    if (v735 != __src)
      free(v735);
    v692 = v509;
    v693 = v510;
    if (byte_1ED8231B8)
    {
      v511 = (void **)v726;
      SuccessorWeight = v727;
      LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(a1);
      if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)v64, *(_QWORD *)(v690 + 40), LoopLatch))
      {
        v512 = 1;
        v513 = 2;
        switch(*(_BYTE *)(v690 + 16))
        {
          case 0x1E:
            if ((*(_DWORD *)(v690 + 20) & 0x7FFFFFF) == 3)
              v513 = 2;
            else
              v513 = 1;
            goto LABEL_961;
          case 0x1F:
            v513 = (*(_DWORD *)(v690 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_1035;
          case 0x20:
          case 0x26:
            v513 = (*(_DWORD *)(v690 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_1035;
          case 0x21:
            goto LABEL_961;
          case 0x24:
            v513 = *(_WORD *)(v690 + 18) & 1;
            goto LABEL_1035;
          case 0x25:
            v513 = 1;
            goto LABEL_961;
          case 0x27:
            v513 = *(_DWORD *)(v690 + 80) + 1;
LABEL_1035:
            if (!v513)
              goto LABEL_972;
LABEL_961:
            v684 = LoopLatch;
            v514 = 0;
            v515 = 0;
            v516 = v513;
            v517 = (uint64_t *)(v690 - 32);
            do
            {
              v518 = *(unsigned __int8 *)(v690 + 16);
              if (v518 != 30)
                __asm { BR              X9 }
              v519 = sub_1C477672C(__na, *v517);
              v520 = *(_QWORD *)(a1 + 64);
              if (v520 == *(_QWORD *)(a1 + 56))
                v521 = (unsigned int *)(a1 + 76);
              else
                v521 = (unsigned int *)(a1 + 72);
              if (v519 != (_QWORD *)(v520 + 8 * *v521))
                ++v515;
              ++v514;
              v517 -= 4;
            }
            while (v516 != v514);
            v90 = v515 >= 2;
            v64 = v691;
            LoopLatch = v684;
            v463 = (uint64_t *)a12;
            if (v90)
              goto LABEL_973;
LABEL_972:
            v512 = 1;
            break;
          default:
            break;
        }
      }
      else
      {
LABEL_973:
        v522 = (uint64_t *)(*(_QWORD *)a1 + 8);
        v523 = (_QWORD *)(*(_QWORD *)a1 + 16);
        v654 = *(_QWORD *)a1;
        if (!*(_QWORD *)a1)
          v522 = (uint64_t *)((char *)v687 + 24);
        if (!v654)
          v523 = (_QWORD *)((char *)v687 + 32);
        *(_QWORD *)v651 = *v523;
        v644 = *v522;
        v524 = 0;
        if ((_DWORD)SuccessorWeight)
        {
          SuccessorWeight = (uint64_t)&v511[2 * SuccessorWeight];
          v642 = SuccessorWeight;
          v685 = LoopLatch;
          do
          {
            v525 = (uint64_t)v511[1];
            __src = *v511;
            sub_1C6326AC0((uint64_t *)&v735, v525);
            v526 = __src;
            v527 = *((_QWORD *)__src + 5);
            v528 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)v64, v527, LoopLatch);
            if (llvm::isGuard((uint64_t)v526))
            {
              v524 += !v528;
            }
            else
            {
              v529 = *(_QWORD *)(v527 + 40);
              if (v529 == v527 + 40)
              {
LABEL_1006:
                v535 = 0;
              }
              else
              {
                if (v529)
                  v530 = v529 - 24;
                else
                  v530 = 0;
                v531 = *(unsigned __int8 *)(v530 + 16);
                v532 = v531 - 29;
                if (v531 != 30)
                {
                  v533 = 2;
                  v535 = 0;
                  switch(v532)
                  {
                    case 0:
                    case 5:
                    case 6:
                      goto LABEL_1001;
                    case 1:
                      goto LABEL_1194;
                    case 2:
                      v533 = (*(_DWORD *)(v530 + 20) >> 1) & 0x3FFFFFF;
                      goto LABEL_1005;
                    case 3:
                    case 9:
                      v533 = (*(_DWORD *)(v530 + 20) & 0x7FFFFFF) - 1;
                      goto LABEL_1005;
                    case 4:
                      goto LABEL_989;
                    case 7:
                      v533 = *(_WORD *)(v530 + 18) & 1;
                      goto LABEL_1005;
                    case 8:
                      v533 = 1;
                      goto LABEL_989;
                    case 10:
                      v533 = *(_DWORD *)(v530 + 80) + 1;
LABEL_1005:
                      if (!v533)
                        goto LABEL_1006;
                      goto LABEL_989;
                    default:
                      goto LABEL_1006;
                  }
                }
                if ((*(_DWORD *)(v530 + 20) & 0x7FFFFFF) == 3)
                  v533 = 2;
                else
                  v533 = 1;
LABEL_989:
                v534 = 0;
                v535 = 0;
                v536 = (uint64_t *)(v530 - 32);
                v537 = v533;
                do
                {
                  if (v528)
                  {
                    v538 = *(unsigned __int8 *)(v530 + 16);
                    if (v538 != 30)
                      __asm { BR              X9 }
                    v539 = sub_1C477672C(__na, *v536);
                    v540 = *(_QWORD *)(a1 + 64);
                    if (v540 == *(_QWORD *)(a1 + 56))
                      v541 = (unsigned int *)(a1 + 76);
                    else
                      v541 = (unsigned int *)(a1 + 72);
                    v542 = v539 != (_QWORD *)(v540 + 8 * *v541);
                  }
                  else
                  {
                    v542 = 1;
                  }
                  v535 += v542;
                  ++v534;
                  v536 -= 4;
                }
                while (v537 != v534);
              }
LABEL_1001:
              v524 = v524 - __clz(v535) + 31;
              v64 = v691;
              LoopLatch = v685;
              SuccessorWeight = v642;
            }
            sub_1C4DA9768((uint64_t *)&v735);
            v511 += 2;
            v463 = (uint64_t *)a12;
          }
          while (v511 != (void **)SuccessorWeight);
        }
        v543 = (unint64_t)(*(_QWORD *)v651 - v644) >> 3;
        if (!v654)
          LODWORD(v543) = (int)v543 / dword_1ED823278;
        v544 = (v524 - dword_1ED823338) & ~((int)(v524 - dword_1ED823338) >> 31);
        if ((int)v543 <= 1)
          LODWORD(v543) = 1;
        v512 = dword_1ED8230F8;
        if (v544 <= 31 - __clz(dword_1ED8230F8) && (int)v543 <= dword_1ED8230F8)
        {
          v546 = (_DWORD)v543 << v544;
          if (dword_1ED8230F8 >= v546)
            v512 = v546;
        }
      }
      __src = (void *)v512;
      LODWORD(v735) = 0;
      sub_1C4848B64((uint64_t)&v692, (uint64_t)&__src);
      v509 = v692;
      LODWORD(v510) = v693;
    }
    v464 = v679;
    if (!v679)
      goto LABEL_1027;
    v547 = (uint64_t)v509 < (uint64_t)v662;
    if ((_DWORD)v510 != v663)
      v547 = (int)v510 < v663;
    if (v547)
    {
LABEL_1027:
      v663 = v510;
      v662 = v509;
      v646 = (llvm::Value **)v671;
      v648 = (llvm::BasicBlock *)v669;
      v464 = (llvm::Instruction *)v690;
    }
    v465 = (unint64_t *)((char *)v674 + 16);
    v462 = (int32x2_t *)v687;
    if ((llvm::MemorySSA *)((char *)v674 + 16) != v659)
      continue;
    break;
  }
  if (!v663)
  {
    if ((uint64_t)v662 < dword_1ED8230F8)
      goto LABEL_1069;
    goto LABEL_1089;
  }
  if ((v663 & 0x80000000) == 0)
  {
LABEL_1089:
    v364 = 0;
    goto LABEL_1161;
  }
LABEL_1069:
  if (v464 != __s1a)
    LODWORD(v721) = 0;
  if (llvm::isGuard((uint64_t)v464))
  {
    v729 = v731;
    v730 = v26;
    v680 = v464;
    v552 = (llvm::BasicBlock *)*((_QWORD *)v464 + 5);
    v694 = v698;
    v695 = v698;
    v696 = 4;
    v697 = 0;
    LoopLatch = (uint64_t)v552 + 40;
    v553 = (_QWORD *)*((_QWORD *)v552 + 5);
    if (v553 != (_QWORD *)((char *)v552 + 40))
    {
      if (v553)
        v554 = v553 - 3;
      else
        v554 = 0;
      v555 = *((unsigned __int8 *)v554 + 16);
      v556 = v555 - 29;
      if (v555 != 30)
      {
        v557 = 2;
        switch(v556)
        {
          case 1:
            goto LABEL_1194;
          case 2:
            v557 = (*((_DWORD *)v554 + 5) >> 1) & 0x3FFFFFF;
            goto LABEL_1182;
          case 3:
          case 9:
            v557 = (*((_DWORD *)v554 + 5) & 0x7FFFFFF) - 1;
            goto LABEL_1182;
          case 4:
            goto LABEL_1080;
          case 7:
            v557 = *((_WORD *)v554 + 9) & 1;
            goto LABEL_1182;
          case 8:
            v557 = 1;
            goto LABEL_1080;
          case 10:
            v557 = *((_DWORD *)v554 + 20) + 1;
LABEL_1182:
            if (!v557)
              goto LABEL_1092;
            goto LABEL_1080;
          default:
            goto LABEL_1092;
        }
      }
      if ((*((_DWORD *)v554 + 5) & 0x7FFFFFF) == 3)
        v557 = 2;
      else
        v557 = 1;
LABEL_1080:
      v558 = 0;
      v559 = 0;
      v64 = (llvm *)(v554 - 4);
      v560 = v554 - 8;
      v561 = v557;
      do
      {
        v562 = *((unsigned __int8 *)v554 + 16);
        if (v562 != 30)
          __asm { BR              X9 }
        v563 = *((_QWORD *)v64 - 4 * v559);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v694, v563);
        if (v564)
        {
          v565 = v730;
          if (v730 >= (unint64_t)HIDWORD(v730))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v729, (uint64_t)v731, v730 + 1, 16);
            v565 = v730;
          }
          v566 = (llvm::BasicBlock **)((char *)v729 + 16 * v565);
          *v566 = v552;
          v566[1] = (llvm::BasicBlock *)(v563 | 4);
          LODWORD(v730) = v730 + 1;
        }
        ++v559;
        v558 += 2;
        v560 += 4;
      }
      while (v561 != v559);
    }
LABEL_1092:
    v567 = sub_1C5EBFBC0(*((llvm::Value **)v680 - 4 * (*((_DWORD *)v680 + 5) & 0x7FFFFFF)), (uint64_t *)v680, 1, 0, 0, 0, 0, 0);
    v568 = *(_QWORD *)LoopLatch;
    if (*(_QWORD *)LoopLatch == LoopLatch)
    {
      v464 = 0;
    }
    else
    {
      if (v568)
        v569 = (unsigned __int8 *)(v568 - 24);
      else
        v569 = 0;
      if (v569[16] - 29 >= 0xB)
        v464 = 0;
      else
        v464 = (llvm::Instruction *)v569;
    }
    llvm::BranchInst::swapSuccessors(v464);
    v570 = (uint64_t ***)*((_QWORD *)v464 - 4);
    __src = "guarded";
    v738[0] = 259;
    llvm::Value::setName(v570, (uint64_t)&__src);
    v571 = (uint64_t ***)*((_QWORD *)v464 - 8);
    __src = "deopt";
    v738[0] = 259;
    llvm::Value::setName(v571, (uint64_t)&__src);
    v572 = (llvm::MemorySSA *)*((_QWORD *)v464 - 8);
    v573 = v713;
    if (v713 >= HIDWORD(v713))
    {
      v626 = (llvm::MemorySSA *)*((_QWORD *)v464 - 8);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v712, (uint64_t)v714, v713 + 1, 8);
      v572 = v626;
      v573 = v713;
    }
    v675 = v572;
    *((_QWORD *)v712 + v573) = v572;
    LODWORD(v713) = v713 + 1;
    if (a12)
      llvm::MemorySSAUpdater::moveAllAfterSpliceBlocks((int32x2_t **)a12, v552, (llvm::BasicBlock **)v570, v680);
    SuccessorWeight = (uint64_t)v680;
    llvm::Instruction::moveBefore(v680, (llvm::Instruction *)v567);
    v575 = **(uint64_t ***)v680;
    v576 = *v575;
    v577 = *(llvm::ValueHandleBase **)(*v575 + 1568);
    v686 = v570;
    if (!v577)
    {
      v625 = *(llvm::ConstantInt **)(v576 + 1888);
      LODWORD(v735) = *(_DWORD *)(v576 + 1896) >> 8;
      if (v735 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
      else
        __src = 0;
      v577 = llvm::ConstantInt::get(v625, (llvm::LLVMContext *)&__src, v574);
      if (v735 >= 0x41 && __src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      *(_QWORD *)(v576 + 1568) = v577;
      SuccessorWeight = (uint64_t)v680;
    }
    v578 = *(_DWORD *)(SuccessorWeight + 20) & 0x7FFFFFF;
    v579 = -v578;
    v580 = (llvm::ValueHandleBase **)(SuccessorWeight - 32 * v578);
    if (*v580)
    {
      v581 = (char *)v680 + 32 * v579;
      v583 = (_QWORD *)*((_QWORD *)v581 + 2);
      v582 = v581 + 16;
      *v583 = *(v582 - 1);
      v584 = *(v582 - 1);
      if (v584)
        *(_QWORD *)(v584 + 16) = *v582;
    }
    *v580 = v577;
    if (v577)
    {
      v587 = *((_QWORD *)v577 + 1);
      v586 = (llvm::ValueHandleBase ***)((char *)v577 + 8);
      v585 = v587;
      v588 = (char *)v680 + 32 * v579;
      *((_QWORD *)v588 + 1) = v587;
      if (v587)
        *(_QWORD *)(v585 + 16) = v588 + 8;
      *((_QWORD *)v588 + 2) = v586;
      *v586 = v580;
    }
    v589 = *(_QWORD *)LoopLatch;
    if (*(_QWORD *)LoopLatch != LoopLatch)
    {
      if (v589)
        LoopLatch = v589 - 24;
      else
        LoopLatch = 0;
      v590 = *(unsigned __int8 *)(LoopLatch + 16);
      v591 = v590 - 29;
      if (v590 != 30)
      {
        v592 = 2;
        switch(v591)
        {
          case 1:
            goto LABEL_1194;
          case 2:
            v592 = (*(_DWORD *)(LoopLatch + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_1185;
          case 3:
          case 9:
            v592 = (*(_DWORD *)(LoopLatch + 20) & 0x7FFFFFF) - 1;
            goto LABEL_1185;
          case 4:
            goto LABEL_1120;
          case 7:
            v592 = *(_WORD *)(LoopLatch + 18) & 1;
            goto LABEL_1185;
          case 8:
            v592 = 1;
            goto LABEL_1120;
          case 10:
            v592 = *(_DWORD *)(LoopLatch + 80) + 1;
LABEL_1185:
            if (!v592)
              goto LABEL_1128;
            goto LABEL_1120;
          default:
            goto LABEL_1128;
        }
      }
      if ((*(_DWORD *)(LoopLatch + 20) & 0x7FFFFFF) == 3)
        v592 = 2;
      else
        v592 = 1;
LABEL_1120:
      v593 = 0;
      v594 = 0;
      v595 = LoopLatch + 32;
      v596 = LoopLatch - 64;
      v597 = v592;
      v598 = LoopLatch - 64;
      do
      {
        v599 = *(unsigned __int8 *)(LoopLatch + 16);
        if (v599 != 30)
          __asm { BR              X9 }
        v600 = *(_QWORD *)(LoopLatch - 32 - 32 * v594);
        v601 = v730;
        if (v730 >= (unint64_t)HIDWORD(v730))
        {
          v670 = v596;
          v672 = v595;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v729, (uint64_t)v731, v730 + 1, 16);
          v596 = v670;
          v595 = v672;
          v601 = v730;
        }
        v602 = (llvm::BasicBlock **)((char *)v729 + 16 * v601);
        *v602 = v552;
        v602[1] = (llvm::BasicBlock *)(v600 & 0xFFFFFFFFFFFFFFFBLL);
        LODWORD(v730) = v730 + 1;
        ++v594;
        v593 += 2;
        v598 += 32;
      }
      while (v597 != v594);
    }
LABEL_1128:
    if (v695 == v694)
      v603 = (uint64_t *)((char *)&v696 + 4);
    else
      v603 = &v696;
    v604 = *(unsigned int *)v603;
    if ((_DWORD)v604)
    {
      v605 = 8 * v604;
      v606 = (unint64_t *)v695;
      v64 = v691;
      v607 = (uint64_t)v686;
      v463 = (uint64_t *)a12;
      while (*v606 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v606;
        v605 -= 8;
        if (!v605)
        {
          v608 = v730;
          goto LABEL_1145;
        }
      }
    }
    else
    {
      v606 = (unint64_t *)v695;
      v64 = v691;
      v607 = (uint64_t)v686;
      v463 = (uint64_t *)a12;
    }
    v609 = &v695[8 * v604];
    v608 = v730;
    if (v606 != (unint64_t *)v609)
    {
      v610 = *v606;
LABEL_1139:
      if (v608 >= HIDWORD(v730))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v729, (uint64_t)v731, v608 + 1, 16);
        v608 = v730;
      }
      v611 = (uint64_t *)((char *)v729 + 16 * v608);
      *v611 = v607;
      v611[1] = v610 & 0xFFFFFFFFFFFFFFFBLL;
      v608 = v730 + 1;
      LODWORD(v730) = v730 + 1;
      v612 = v606 + 1;
      while (v612 != (unint64_t *)v609)
      {
        v613 = *v612++;
        v610 = v613;
        if (v613 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v606 = v612 - 1;
          goto LABEL_1139;
        }
      }
    }
LABEL_1145:
    sub_1C4E25D14((uint64_t)&__src, (unint64_t *)v729, v608, 1u);
    llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>((uint64_t)v64, (uint64_t)&__src, 0);
    if (v743 != v744)
      free(v743);
    sub_1C4E28CA4((uint64_t)v742);
    sub_1C4E28CA4((uint64_t)&__src);
    v462 = (int32x2_t *)v687;
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop((_QWORD *)a1, v607, (uint64_t)v687);
    if (v463)
    {
      v614 = *(_DWORD *)(*v463 + 40);
      if (!v614)
        goto LABEL_1154;
      v615 = *(_QWORD *)(*v463 + 24);
      v616 = v614 - 1;
      v617 = (v614 - 1) & ((v680 >> 4) ^ (v680 >> 9));
      v618 = *(llvm::Instruction **)(v615 + 16 * v617);
      if (v680 == v618)
      {
LABEL_1153:
        v621 = *(_QWORD *)(v615 + 16 * v617 + 8);
        v463 = (uint64_t *)a12;
        v462 = (int32x2_t *)v687;
        v64 = v691;
      }
      else
      {
        v619 = 1;
        while (v618 != (llvm::Instruction *)-4096)
        {
          v620 = v617 + v619++;
          v617 = v620 & v616;
          v618 = *(llvm::Instruction **)(v615 + 16 * v617);
          if (v680 == v618)
            goto LABEL_1153;
        }
LABEL_1154:
        v621 = 0;
      }
      llvm::MemorySSAUpdater::moveToPlace(v463, v621, v675, 2);
    }
    if (v695 != v694)
      free(v695);
    if (v729 != v731)
      free(v729);
  }
  sub_1C5C3A7C8(a1, (uint64_t ***)v464, v646, (unint64_t)v648, (uint64_t)&v712, (uint64_t)&__dst, (uint64_t)v64, v462, (char **)v668, v667, v666, a11, (int32x2_t **)v463, a13, a14);
  v364 = 1;
LABEL_1161:
  v413 = v664;
  if ((v702 & 1) == 0)
    MEMORY[0x1CAA32FB4](v703, 8);
LABEL_1163:
  if ((v699 & 1) == 0)
    MEMORY[0x1CAA32FB4](v700, 8);
  if (v708 != (void *)v707)
    free(v708);
  v414 = v712;
LABEL_1168:
  if (v414 != v714)
    free(v414);
LABEL_1170:
  if (__p)
  {
    v719 = __p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v716, 8);
LABEL_1173:
  if (__dst != v665)
    free(__dst);
  v622 = v726;
  if ((_DWORD)v727)
  {
    v623 = (char *)v726 - 8;
    v624 = 16 * v727;
    do
    {
      sub_1C4DA9768((uint64_t *)&v623[v624]);
      v624 -= 16;
    }
    while (v624);
    v622 = v726;
  }
  if (v622 != v413)
    free(v622);
  return v364;
}

uint64_t sub_1C5C391F0(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopPassPass(a1, v2);
  llvm::initializeMemorySSAWrapperPassPass(a1, v3);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  v4 = operator new();
  *(_QWORD *)v4 = "Simple unswitch loops";
  *(_QWORD *)(v4 + 8) = 21;
  *(_QWORD *)(v4 + 16) = "simple-loop-unswitch";
  *(_QWORD *)(v4 + 24) = 20;
  *(_QWORD *)(v4 + 32) = &unk_1ED822FA8;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C5C483CC;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

uint64_t sub_1C5C392AC(uint64_t a1, char a2)
{
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED822FA8;
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)a1 = &off_1E81978E8;
  *(_BYTE *)(a1 + 28) = a2;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED822FB0);
  if (v4 != -1)
  {
    v8[0] = sub_1C5C391F0;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED822FB0, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5C39378(uint64_t result, uint64_t a2)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  if (*(_QWORD *)(result + 40) != result + 40)
  {
    for (i = *(_QWORD *)(result + 48); ; i = *(_QWORD *)(v3 + 32))
    {
      v3 = i - 24;
      v4 = i ? i - 24 : 0;
      if (!i || *(_BYTE *)(v4 + 16) != 83)
        break;
      v5 = *(_DWORD *)(i - 4) & 0x7FFFFFF;
      if ((_DWORD)v5)
      {
        v6 = 32 * *(unsigned int *)(i + 36);
        do
        {
          v7 = *(_DWORD *)(v3 + 20);
          if ((v7 & 0x40000000) != 0)
            v8 = *(_QWORD *)(v3 - 8);
          else
            v8 = v3 - 32 * (v7 & 0x7FFFFFF);
          *(_QWORD *)(v8 + v6) = a2;
          v6 += 8;
          --v5;
        }
        while (v5);
      }
    }
  }
  return result;
}

uint64_t sub_1C5C393F0(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  llvm::Value *v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  llvm::ValueSymbolTable *v44;
  _QWORD v45[4];
  __int16 v46;

  if (*(_QWORD *)(result + 40) != result + 40)
  {
    v5 = result;
    v6 = *(_QWORD *)(result + 48);
    v7 = v6 - 24;
    v8 = v6 ? v6 - 24 : 0;
    if (v6 && *(_BYTE *)(v8 + 16) == 83)
    {
      while (1)
      {
        v13 = *(uint64_t ***)v7;
        if ((*(_BYTE *)(v7 + 23) & 0x10) == 0)
        {
          v23 = 0;
          v24 = &byte_1C871356D;
          goto LABEL_16;
        }
        v14 = **v13;
        v15 = *(_QWORD *)(v14 + 152);
        v16 = *(unsigned int *)(v14 + 168);
        if (!(_DWORD)v16)
          goto LABEL_14;
        LODWORD(v17) = (v16 - 1) & ((v7 >> 4) ^ (v7 >> 9));
        v18 = (uint64_t *)(v15 + 16 * v17);
        v19 = *v18;
        if (*v18 != v7)
          break;
LABEL_15:
        v22 = (_QWORD *)v18[1];
        v25 = *v22;
        v24 = (char *)(v22 + 2);
        v23 = v25;
LABEL_16:
        v46 = 773;
        v45[0] = v24;
        v45[1] = v23;
        v45[2] = ".split";
        v26 = operator new(0x48uLL);
        v27 = v26;
        v26[1] = v13;
        v28 = (llvm::Value *)(v26 + 1);
        *v26 = 0;
        v26[2] = 0;
        v26[3] = 0x4000000000000053;
        *((_OWORD *)v26 + 2) = 0u;
        v29 = (char *)(v26 + 4);
        *((_OWORD *)v26 + 3) = 0u;
        *((_DWORD *)v26 + 16) = 0;
        if (a2)
        {
          v41 = a2[2];
          v26[6] = v41;
          *(_WORD *)(v41 + 18) &= ~0x8000u;
          if ((*((_BYTE *)v26 + 31) & 0x10) != 0)
          {
            v43 = *(_QWORD *)(v41 + 56);
            if (v43)
            {
              v44 = *(llvm::ValueSymbolTable **)(v43 + 104);
              if (v44)
                llvm::ValueSymbolTable::reinsertValue(v44, v28);
            }
          }
          v42 = *a2;
          v27[4] = *a2;
          v27[5] = a2;
          *(_QWORD *)(v42 + 8) = v29;
          *a2 = (uint64_t)v29;
        }
        *((_DWORD *)v27 + 17) = 2;
        llvm::Value::setName((uint64_t ***)v28, (uint64_t)v45);
        v30 = *((unsigned int *)v27 + 17);
        v31 = operator new(40 * v30);
        *v27 = v31;
        if ((_DWORD)v30)
        {
          v32 = &v31[4 * v30];
          do
          {
            *v31 = 0;
            v31[1] = 0;
            v31[2] = 0;
            v31[3] = v28;
            v31 += 4;
          }
          while (v31 != v32);
        }
        v33 = *(_DWORD *)(v7 + 20) & 0x7FFFFFF;
        if ((_DWORD)v33)
        {
          v34 = v33 - 1;
          do
          {
            v35 = *(_DWORD *)(v7 + 20);
            if ((v35 & 0x40000000) != 0)
              v36 = *(_QWORD *)(v7 - 8);
            else
              v36 = v7 - 32 * (v35 & 0x7FFFFFF);
            if (*(_QWORD *)(v36 + 32 * *(unsigned int *)(v7 + 60) + 8 * v34) == a3)
            {
              v37 = *(_QWORD *)(v36 + 32 * v34);
              if (a5)
                llvm::PHINode::removeIncomingValue((llvm::PHINode *)v7, v34, 1);
              sub_1C477667C(v28, v37, a4);
            }
            v38 = v34-- + 1;
          }
          while (v38 > 1);
        }
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v7, v28, (llvm::Value *)1);
        result = sub_1C477667C(v28, v7, v5);
        v39 = *(_QWORD *)(v7 + 32);
        v7 = v39 - 24;
        if (v39)
          v40 = v39 - 24;
        else
          v40 = 0;
        if (!v39 || *(_BYTE *)(v40 + 16) != 83)
          return result;
      }
      v20 = 1;
      while (v19 != -4096)
      {
        v21 = v17 + v20++;
        v17 = v21 & (v16 - 1);
        v19 = *(_QWORD *)(v15 + 16 * v17);
        if (v19 == v7)
        {
          v18 = (uint64_t *)(v15 + 16 * v17);
          goto LABEL_15;
        }
      }
LABEL_14:
      v18 = (uint64_t *)(v15 + 16 * v16);
      goto LABEL_15;
    }
  }
  return result;
}

void sub_1C5C396A4(uint64_t *a1, uint64_t a2, llvm::Loop *a3, int32x2_t *a4, llvm::LoopInfo *a5, int32x2_t *a6)
{
  uint64_t v6;
  _QWORD *v10;
  _QWORD *v11;
  int32x2_t v12;
  __int32 v13;
  __int32 v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  __int32 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  uint64_t **v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t **v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t **v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t *v62;
  _QWORD *v63;
  llvm::ScalarEvolution *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *i;
  _QWORD *v74;
  uint64_t v75;
  uint64_t *v76;
  _QWORD *v77;
  const llvm::DominatorTree *v78;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  _QWORD v85[5];

  v85[4] = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  if (*a1)
  {
    v83 = v85;
    v84 = 0x400000000;
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlocks(a1, (uint64_t)&v83);
    if ((_DWORD)v84)
    {
      v10 = 0;
      v11 = v83;
      v12 = *a4;
      v13 = a4[2].i32[0];
      v14 = v13 - 1;
      v15 = v83;
      do
      {
        if (v13)
        {
          v16 = ((*v15 >> 4) ^ (*v15 >> 9)) & v14;
          v17 = *(_QWORD *)(*(_QWORD *)&v12 + 16 * v16);
          if (*v15 == v17)
          {
LABEL_9:
            v20 = *(_QWORD **)(*(_QWORD *)&v12 + 16 * v16 + 8);
            if (v20)
            {
              if (!v10 || v20 == v10)
              {
LABEL_15:
                v10 = v20;
              }
              else
              {
                v21 = v20;
                while (v21)
                {
                  v21 = (_QWORD *)*v21;
                  if (v21 == v10)
                    goto LABEL_15;
                }
              }
            }
          }
          else
          {
            v18 = 1;
            while (v17 != -4096)
            {
              v19 = v16 + v18++;
              v16 = v19 & v14;
              v17 = *(_QWORD *)(*(_QWORD *)&v12 + 16 * v16);
              if (*v15 == v17)
                goto LABEL_9;
            }
          }
        }
        ++v15;
      }
      while (v15 != (_QWORD *)((char *)v83 + 8 * v84));
      if (v10 == (_QWORD *)v6)
        goto LABEL_113;
      v82 = a2;
      if (v10)
      {
        if (v13)
        {
          v22 = v14 & ((a2 >> 4) ^ (a2 >> 9));
          v23 = (_QWORD *)(*(_QWORD *)&v12 + 16 * v22);
          v24 = *v23;
          if (*v23 == a2)
            goto LABEL_44;
          v25 = 0;
          v26 = 1;
          while (v24 != -4096)
          {
            if (v25)
              v27 = 0;
            else
              v27 = v24 == -8192;
            if (v27)
              v25 = v23;
            v28 = v22 + v26++;
            v22 = v28 & v14;
            v23 = (_QWORD *)(*(_QWORD *)&v12 + 16 * v22);
            v24 = *v23;
            if (*v23 == a2)
              goto LABEL_44;
          }
          if (v25)
            v38 = v25;
          else
            v38 = v23;
        }
        else
        {
          v38 = 0;
        }
        v23 = sub_1C4EB6AAC((uint64_t)a4, (uint64_t)&v82, &v82, v38);
        *v23 = v82;
        v23[1] = 0;
LABEL_44:
        v23[1] = v10;
        llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::removeChildLoop(v6, (uint64_t)a1);
        *a1 = (uint64_t)v10;
        v40 = (uint64_t **)v10[2];
        v39 = v10[3];
        if ((unint64_t)v40 < v39)
        {
          *v40 = a1;
          v41 = v40 + 1;
LABEL_70:
          v10[2] = v41;
          goto LABEL_78;
        }
        v42 = (_QWORD *)v10[1];
        v43 = v40 - (uint64_t **)v42;
        v44 = v43 + 1;
        if (!((unint64_t)(v43 + 1) >> 61))
        {
          v45 = v39 - (_QWORD)v42;
          if (v45 >> 2 > v44)
            v44 = v45 >> 2;
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
            v46 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v46 = v44;
          if (!v46)
          {
            v47 = 0;
            goto LABEL_65;
          }
          if (!(v46 >> 61))
          {
            v47 = (char *)operator new(8 * v46);
LABEL_65:
            v54 = (uint64_t **)&v47[8 * v43];
            *v54 = a1;
            v41 = v54 + 1;
            if (v40 != v42)
            {
              do
              {
                v55 = *--v40;
                *--v54 = v55;
              }
              while (v40 != v42);
              v40 = (uint64_t **)v10[1];
            }
            v10[1] = v54;
            v10[2] = v41;
            v10[3] = &v47[8 * v46];
            if (v40)
              operator delete(v40);
            goto LABEL_70;
          }
LABEL_118:
          sub_1C4764EE4();
        }
LABEL_117:
        abort();
      }
    }
    else
    {
      v12 = *a4;
      v13 = a4[2].i32[0];
    }
    if (v13)
    {
      v29 = v13 - 1;
      LODWORD(v30) = v29 & ((a2 >> 4) ^ (a2 >> 9));
      v31 = (uint64_t *)(*(_QWORD *)&v12 + 16 * v30);
      v32 = *v31;
      if (*v31 == a2)
      {
LABEL_37:
        *v31 = -8192;
        a4[1] = vadd_s32(a4[1], (int32x2_t)0x1FFFFFFFFLL);
      }
      else
      {
        v33 = 1;
        while (v32 != -4096)
        {
          v34 = v30 + v33++;
          v30 = v34 & v29;
          v32 = *(_QWORD *)(*(_QWORD *)&v12 + 16 * v30);
          if (v32 == a2)
          {
            v31 = (uint64_t *)(*(_QWORD *)&v12 + 16 * v30);
            goto LABEL_37;
          }
        }
      }
    }
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::removeChildLoop(v6, (uint64_t)a1);
    v36 = (uint64_t **)a4[4];
    v35 = (unint64_t)a4[5];
    if ((unint64_t)v36 >= v35)
    {
      v48 = (_QWORD *)a4[3];
      v49 = v36 - (uint64_t **)v48;
      v50 = v49 + 1;
      if ((unint64_t)(v49 + 1) >> 61)
        goto LABEL_117;
      v51 = v35 - (_QWORD)v48;
      if (v51 >> 2 > v50)
        v50 = v51 >> 2;
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
        v52 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v52 = v50;
      if (v52)
      {
        if (v52 >> 61)
          goto LABEL_118;
        v53 = (char *)operator new(8 * v52);
      }
      else
      {
        v53 = 0;
      }
      v56 = (uint64_t **)&v53[8 * v49];
      *v56 = a1;
      v37 = v56 + 1;
      if (v36 != v48)
      {
        do
        {
          v57 = *--v36;
          *--v56 = v57;
        }
        while (v36 != v48);
        v36 = (uint64_t **)a4[3];
      }
      a4[3] = (int32x2_t)v56;
      a4[4] = (int32x2_t)v37;
      a4[5] = (int32x2_t)&v53[8 * v52];
      if (v36)
        operator delete(v36);
    }
    else
    {
      *v36 = a1;
      v37 = v36 + 1;
    }
    v10 = 0;
    a4[4] = (int32x2_t)v37;
LABEL_78:
    v77 = v10;
    v78 = (const llvm::DominatorTree *)a4;
    do
    {
      v58 = *(uint64_t **)(v6 + 32);
      v59 = *(uint64_t **)(v6 + 40);
      if (v58 != v59)
      {
        while (*v58 != a2)
        {
          v60 = sub_1C477672C((uint64_t)(a1 + 7), *v58);
          v61 = a1[8];
          v62 = v61 == a1[7] ? (uint64_t *)((char *)a1 + 76) : a1 + 9;
          if (v60 != (_QWORD *)(v61 + 8 * *(unsigned int *)v62))
            break;
          if (++v58 == v59)
          {
            v58 = v59;
            goto LABEL_87;
          }
        }
        for (i = v58 + 1; i != v59; ++i)
        {
          if (*i != a2)
          {
            v74 = sub_1C477672C((uint64_t)(a1 + 7), *i);
            v75 = a1[8];
            v76 = v75 == a1[7] ? (uint64_t *)((char *)a1 + 76) : a1 + 9;
            if (v74 == (_QWORD *)(v75 + 8 * *(unsigned int *)v76))
              *v58++ = *i;
          }
        }
      }
LABEL_87:
      if (v58 != *(uint64_t **)(v6 + 40))
        *(_QWORD *)(v6 + 40) = v58;
      v63 = sub_1C477672C(v6 + 56, a2);
      v65 = *(_QWORD *)(v6 + 64);
      if (v65 == *(_QWORD *)(v6 + 56))
        v66 = 76;
      else
        v66 = 72;
      if (v63 != (_QWORD *)(v65 + 8 * *(unsigned int *)(v6 + v66)))
      {
        *v63 = -2;
        ++*(_DWORD *)(v6 + 80);
      }
      v67 = (uint64_t *)a1[4];
      v68 = a1[5] - (_QWORD)v67;
      if (v68)
      {
        v69 = 8 * (v68 >> 3);
        do
        {
          v70 = sub_1C477672C(v6 + 56, *v67);
          v71 = *(_QWORD *)(v6 + 64);
          if (v71 == *(_QWORD *)(v6 + 56))
            v72 = 76;
          else
            v72 = 72;
          if (v70 != (_QWORD *)(v71 + 8 * *(unsigned int *)(v6 + v72)))
          {
            *v70 = -2;
            ++*(_DWORD *)(v6 + 80);
          }
          ++v67;
          v69 -= 8;
        }
        while (v69);
      }
      llvm::formLCSSA((llvm *)v6, a3, v78, a6, v64);
      llvm::formDedicatedExitBlocks(v6, a3, v78, a5, (llvm::MemorySSAUpdater *)1);
      v6 = *(_QWORD *)v6;
    }
    while ((_QWORD *)v6 != v77);
    v11 = v83;
LABEL_113:
    if (v11 != v85)
      free(v11);
  }
}

uint64_t sub_1C5C39C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a3 + 40;
  v5 = *(_QWORD *)(a3 + 48);
  if (v5 != a3 + 40)
  {
    do
    {
      v8 = v5 - 24;
      if (!v5)
        v8 = 0;
      v3 = 1;
      if (!v5 || *(_BYTE *)(v8 + 16) != 83)
        break;
      v9 = *(_DWORD *)(v8 + 20);
      v10 = v9 & 0x7FFFFFF;
      if ((v9 & 0x7FFFFFF) != 0)
      {
        v11 = 0;
        while (1)
        {
          v12 = v8 - 32 * v10;
          if ((v9 & 0x40000000) != 0)
            v12 = *(_QWORD *)(v8 - 8);
          if (*(_QWORD *)(v12 + 32 * *(unsigned int *)(v8 + 60) + 8 * v11) == a2)
            break;
          if (v10 == ++v11)
            goto LABEL_12;
        }
      }
      else
      {
LABEL_12:
        LODWORD(v11) = -1;
      }
      if ((v9 & 0x40000000) != 0)
        v13 = *(_QWORD *)(v8 - 8);
      else
        v13 = v8 - 32 * v10;
      if (!llvm::Loop::isLoopInvariant(a1, *(_QWORD *)(v13 + 32 * v11)))
      {
        v3 = 0;
        return v3 & 1;
      }
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != v4);
  }
  return v3 & 1;
}

uint64_t sub_1C5C39D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v11;
  BOOL v12;
  char *v13;
  _QWORD v14[3];

  v14[0] = a2;
  v14[1] = a3;
  v14[2] = a4;
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(_QWORD *)a1;
  v7 = (char *)v14;
  if (v5 >= *(_DWORD *)(a1 + 12))
  {
    v11 = v5 + 1;
    v12 = v6 + 24 * v5 > (unint64_t)v14;
    if (v6 <= (unint64_t)v14 && v12)
    {
      v13 = (char *)v14 - v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v11, 24);
      v6 = *(_QWORD *)a1;
      v7 = &v13[*(_QWORD *)a1];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v11, 24);
      v6 = *(_QWORD *)a1;
      v7 = (char *)v14;
    }
  }
  v8 = v6 + 24 * *(unsigned int *)(a1 + 8);
  v9 = *(_OWORD *)v7;
  *(_QWORD *)(v8 + 16) = *((_QWORD *)v7 + 2);
  *(_OWORD *)v8 = v9;
  LODWORD(v8) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v8;
  return *(_QWORD *)a1 + 24 * v8 - 24;
}

uint64_t sub_1C5C39E30(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  char v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16[5];

  v16[4] = *MEMORY[0x1E0C80C00];
  if (a2 >= 3)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 2)
    {
      v15 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v15;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C632693C(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v16;
  v10 = 1;
  v11 = (uint64_t *)(a1 + 8);
  do
  {
    v12 = v8;
    if ((*v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = *v11;
      v9[1] = v11[1];
      v9 += 2;
    }
    v11 = (uint64_t *)(a1 + 8 + 16 * v10);
    v8 = 1;
    v10 = 2;
  }
  while ((v12 & 1) == 0);
  if (a2 > 2)
  {
    *(_DWORD *)a1 &= ~1u;
    v13 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v13;
  }
  return sub_1C632693C(a1, v16, v9);
}

uint64_t sub_1C5C39FB8(uint64_t result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = (uint64_t *)result;
  v4 = *(_QWORD *)result;
  if (*(_QWORD *)result > 7uLL)
  {
    if ((v4 & 4) == 0)
    {
      v5 = v4 & 0xFFFFFFFFFFFFFFF8;
      result = operator new();
      *(_QWORD *)result = result + 16;
      *(_QWORD *)(result + 8) = 0x400000000;
      *v3 = result | 4;
      v6 = result & 0xFFFFFFFFFFFFFFF8;
      v7 = *(unsigned int *)((result & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v7 >= *(_DWORD *)((result & 0xFFFFFFFFFFFFFFF8) + 12))
      {
        v10 = result & 0xFFFFFFFFFFFFFFF8;
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(result & 0xFFFFFFFFFFFFFFF8, v6 + 16, v7 + 1, 8);
        v6 = v10;
        LODWORD(v7) = *(_DWORD *)(v10 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
      ++*(_DWORD *)(v6 + 8);
      v4 = *v3;
    }
    v8 = v4 & 0xFFFFFFFFFFFFFFF8;
    v9 = *(unsigned int *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v9 >= *(_DWORD *)(v8 + 12))
    {
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v8, v8 + 16, v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(v8 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = a2;
    ++*(_DWORD *)(v8 + 8);
  }
  else
  {
    *(_QWORD *)result = a2 & 0xFFFFFFFFFFFFFFFBLL;
  }
  return result;
}

void sub_1C5C3A0C8(_QWORD *a1, uint64_t a2, unsigned __int8 *a3)
{
  _BOOL4 v6;
  _BOOL4 v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  char v15;
  uint64_t v16;
  _BYTE v17[2];
  _BYTE v18[2];
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  int v22;
  _BYTE v23[64];
  void *v24;
  uint64_t v25;
  _QWORD v26[5];

  v26[4] = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  v6 = sub_1C57BE738((uint64_t)&v19, a3);
  v7 = sub_1C57BE7B8((uint64_t)&v19, a3);
  v24 = v26;
  v19 = v23;
  v20 = v23;
  v21 = 8;
  v22 = 0;
  v26[0] = a3;
  v25 = 0x400000001;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v19, (uint64_t)a3);
  v8 = v25;
  do
  {
    while (1)
    {
      v9 = *((_QWORD *)v24 + --v8);
      LODWORD(v25) = v8;
      v10 = *(_DWORD *)(v9 + 20);
      if ((v10 & 0x40000000) != 0)
        break;
      v11 = v10 & 0x7FFFFFF;
      v12 = (uint64_t *)(v9 - 32 * v11);
      if (v11)
        goto LABEL_7;
LABEL_4:
      if (!v8)
        goto LABEL_22;
    }
    v12 = *(uint64_t **)(v9 - 8);
    v11 = v10 & 0x7FFFFFF;
    if (!v11)
      goto LABEL_4;
LABEL_7:
    v13 = 32 * v11;
    do
    {
      v14 = (unsigned __int8 *)*v12;
      if (*(unsigned __int8 *)(*v12 + 16) >= 0x15u)
      {
        if (llvm::Loop::isLoopInvariant(a2, *v12))
        {
          sub_1C5C39FB8((uint64_t)a1, (uint64_t)v14);
        }
        else if (v14[16] >= 0x1Cu && (v6 && sub_1C57BE738((uint64_t)v18, v14) || v7 && sub_1C57BE7B8((uint64_t)v17, v14)))
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v19, (uint64_t)v14);
          if (v15)
          {
            v16 = v25;
            if (v25 >= (unint64_t)HIDWORD(v25))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, (uint64_t)v26, v25 + 1, 8);
              v16 = v25;
            }
            *((_QWORD *)v24 + v16) = v14;
            LODWORD(v25) = v25 + 1;
          }
        }
      }
      v12 += 4;
      v13 -= 32;
    }
    while (v13);
    v8 = v25;
  }
  while ((_DWORD)v25);
LABEL_22:
  if (v20 != v19)
    free(v20);
  if (v24 != v26)
    free(v24);
}

void sub_1C5C3A2D0(uint64_t **a1, llvm::Value **a2, unint64_t a3, int a4, llvm::BasicBlock *a5, llvm::BasicBlock *a6, int a7)
{
  uint64_t v13;
  llvm::Value *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  llvm::Value **v26;
  llvm::Value *v27;
  int v28;
  int v29;
  llvm::Value *v30;
  llvm::Value *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  unsigned __int8 **v38;
  int v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  llvm::BasicBlock *v43;
  _DWORD *v44;
  _DWORD *v45;
  uint64_t v46;
  llvm::Value *v47;
  _QWORD *v48;
  llvm::BasicBlock *v49;
  char *v50;
  char *v51;
  unsigned __int8 **v52;
  int v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  _QWORD v57[4];
  __int16 v58;
  _BYTE v59[32];
  __int16 v60;
  unsigned __int8 *v61;
  void *v62;
  uint64_t v63;
  _BYTE v64[32];
  uint64_t **v65;
  _QWORD **v66;
  uint64_t v67;
  void **v68;
  _QWORD *v69;
  uint64_t v70;
  int v71;
  __int16 v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  _QWORD v77[3];

  v77[1] = *MEMORY[0x1E0C80C00];
  v13 = **a1;
  v62 = v64;
  v63 = 0x200000000;
  v67 = v13;
  v68 = &v76;
  v69 = v77;
  v70 = 0;
  v71 = 0;
  v72 = 512;
  v73 = 7;
  v74 = 0;
  v75 = 0;
  v76 = &unk_1E8167888;
  v77[0] = &unk_1E8167A08;
  v65 = a1;
  v66 = a1 + 5;
  v14 = *a2;
  if (a4)
  {
    if (a3 >= 2)
    {
      v15 = 2;
      v16 = 1;
      do
      {
        v17 = (uint64_t)a2[v16];
        v60 = 257;
        v14 = (llvm::Value *)sub_1C4773594((uint64_t)&v62, v14, v17, (uint64_t)v59);
        v16 = v15;
        v18 = a3 > v15++;
      }
      while (v18);
    }
  }
  else if (a3 >= 2)
  {
    v19 = 2;
    v20 = 1;
    do
    {
      v21 = (uint64_t)a2[v20];
      v60 = 257;
      v14 = (llvm::Value *)sub_1C4D89BCC((uint64_t)&v62, v14, v21, (uint64_t)v59);
      v20 = v19;
      v18 = a3 > v19++;
    }
    while (v18);
  }
  if (!a7)
  {
    v30 = v14;
    goto LABEL_35;
  }
  if ((*((_BYTE *)v14 + 23) & 0x10) != 0)
  {
    v22 = ***(_QWORD ***)v14;
    v23 = *(_QWORD *)(v22 + 152);
    v24 = *(unsigned int *)(v22 + 168);
    if ((_DWORD)v24)
    {
      LODWORD(v25) = (v24 - 1) & ((v14 >> 4) ^ (v14 >> 9));
      v26 = (llvm::Value **)(v23 + 16 * v25);
      v27 = *v26;
      if (*v26 == v14)
      {
LABEL_19:
        v31 = v26[1];
        v34 = *(_QWORD *)v31;
        v32 = (char *)v31 + 16;
        v33 = v34;
        goto LABEL_20;
      }
      v28 = 1;
      while (v27 != (llvm::Value *)-4096)
      {
        v29 = v25 + v28++;
        v25 = v29 & (v24 - 1);
        v27 = *(llvm::Value **)(v23 + 16 * v25);
        if (v27 == v14)
        {
          v26 = (llvm::Value **)(v23 + 16 * v25);
          goto LABEL_19;
        }
      }
    }
    v26 = (llvm::Value **)(v23 + 16 * v24);
    goto LABEL_19;
  }
  v33 = 0;
  v32 = &byte_1C871356D;
LABEL_20:
  v58 = 773;
  v57[0] = v32;
  v57[1] = v33;
  v57[2] = ".fr";
  v35 = (char *)operator new(0x60uLL);
  *((_DWORD *)v35 + 13) = *((_DWORD *)v35 + 13) & 0x38000000 | 1;
  v30 = (llvm::Value *)(v35 + 32);
  *(_QWORD *)v35 = 0;
  *((_QWORD *)v35 + 1) = 0;
  *((_QWORD *)v35 + 2) = 0;
  *((_QWORD *)v35 + 3) = v35 + 32;
  v60 = 257;
  llvm::FreezeInst::FreezeInst((uint64_t)(v35 + 32), v14, (uint64_t)v59, 0);
  (*(void (**)(_QWORD *, char *, _QWORD *, uint64_t **, _QWORD **))(*v69 + 16))(v69, v35 + 32, v57, v65, v66);
  if ((_DWORD)v63)
  {
    v36 = (char *)v62;
    v37 = (char *)v62 + 16 * v63;
    v38 = (unsigned __int8 **)(v35 + 80);
    do
    {
      v39 = *(_DWORD *)v36;
      v40 = (unsigned __int8 *)*((_QWORD *)v36 + 1);
      if (v40)
      {
        if (!v39)
        {
          v61 = (unsigned __int8 *)*((_QWORD *)v36 + 1);
          llvm::MetadataTracking::track((uint64_t)&v61, v40, 2);
          v41 = *v38;
          if (!*v38)
          {
LABEL_33:
            v42 = v61;
            *v38 = v61;
            if (v42)
              llvm::MetadataTracking::retrack((uint64_t)&v61, v42, (uint64_t)(v35 + 80));
            goto LABEL_30;
          }
LABEL_27:
          llvm::MetadataTracking::untrack((uint64_t)(v35 + 80), v41);
          goto LABEL_33;
        }
      }
      else
      {
        v41 = *v38;
        if (!*v38 && (v35[55] & 0x20) == 0)
          goto LABEL_30;
        if (!v39)
        {
          v61 = 0;
          if (!v41)
            goto LABEL_33;
          goto LABEL_27;
        }
      }
      llvm::Value::setMetadata(v30, *(_DWORD *)v36, (llvm::MDNode *)v40);
LABEL_30:
      v36 += 16;
    }
    while (v36 != v37);
  }
LABEL_35:
  if (a4)
    v43 = a5;
  else
    v43 = a6;
  v44 = operator new(0xA0uLL);
  v45 = v44;
  v46 = 0;
  v47 = (llvm::Value *)(v44 + 24);
  v44[29] = v44[29] & 0x38000000 | 3;
  do
  {
    v48 = &v44[v46];
    *v48 = 0;
    v48[1] = 0;
    v48[2] = 0;
    v48[3] = v47;
    v46 += 8;
  }
  while (v46 != 24);
  if (a4)
    v49 = a6;
  else
    v49 = a5;
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v44 + 24), v43, v49, v30, 0);
  v60 = 257;
  (*(void (**)(_QWORD *, llvm::Value *, _BYTE *, uint64_t **, _QWORD **))(*v69 + 16))(v69, v47, v59, v65, v66);
  v50 = (char *)v62;
  if ((_DWORD)v63)
  {
    v51 = (char *)v62 + 16 * v63;
    v52 = (unsigned __int8 **)(v45 + 36);
    while (1)
    {
      v53 = *(_DWORD *)v50;
      v54 = (unsigned __int8 *)*((_QWORD *)v50 + 1);
      if (v54)
      {
        if (!v53)
        {
          v57[0] = *((_QWORD *)v50 + 1);
          llvm::MetadataTracking::track((uint64_t)v57, v54, 2);
          v55 = *v52;
          if (!*v52)
          {
LABEL_56:
            v56 = (unsigned __int8 *)v57[0];
            *v52 = (unsigned __int8 *)v57[0];
            if (v56)
              llvm::MetadataTracking::retrack((uint64_t)v57, v56, (uint64_t)(v45 + 36));
            goto LABEL_53;
          }
LABEL_50:
          llvm::MetadataTracking::untrack((uint64_t)(v45 + 36), v55);
          goto LABEL_56;
        }
      }
      else
      {
        v55 = *v52;
        if (!*v52 && (*((_BYTE *)v45 + 119) & 0x20) == 0)
          goto LABEL_53;
        if (!v53)
        {
          v57[0] = 0;
          if (!v55)
            goto LABEL_56;
          goto LABEL_50;
        }
      }
      llvm::Value::setMetadata(v47, *(_DWORD *)v50, (llvm::MDNode *)v54);
LABEL_53:
      v50 += 16;
      if (v50 == v51)
      {
        v50 = (char *)v62;
        break;
      }
    }
  }
  if (v50 != v64)
    free(v50);
}

void sub_1C5C3A734(uint64_t a1, char *a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  char *v10;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v7 = v4 + 1;
    v8 = v5 + 16 * v4;
    if (v5 <= (unint64_t)a2 && v8 > (unint64_t)a2)
    {
      v10 = &a2[-v5];
      sub_1C6326A04(a1, v7);
      v5 = *(_QWORD *)a1;
      a2 = &v10[*(_QWORD *)a1];
    }
    else
    {
      sub_1C6326A04(a1, v7);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = (_QWORD *)(v5 + 16 * *(unsigned int *)(a1 + 8));
  *v6 = *(_QWORD *)a2;
  v6[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  ++*(_DWORD *)(a1 + 8);
}

void sub_1C5C3A7C8(uint64_t a1, uint64_t ***a2, llvm::Value **a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int32x2_t *a8, char **a9, void (*a10)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t a11, int32x2_t *a12, int32x2_t **a13, void (*a14)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t a15)
{
  uint64_t ***v15;
  int v16;
  uint64_t ***v17;
  _QWORD ***v18;
  unsigned __int8 *v19;
  BOOL v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t ***v24;
  llvm::BasicBlock **v26;
  uint64_t **v27;
  unsigned int v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  int v32;
  BOOL v33;
  char v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _QWORD ***v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD ***v42;
  _QWORD **v43;
  int v44;
  _OWORD *v45;
  int v46;
  unsigned int v47;
  _QWORD *v48;
  void *v49;
  _QWORD *v50;
  int v51;
  BOOL v52;
  unsigned int v53;
  _QWORD *v54;
  _QWORD *v55;
  void *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  void *v60;
  unsigned int v61;
  uint64_t v62;
  const llvm::Loop *v63;
  const llvm::Loop *v64;
  __int32 v65;
  uint64_t *v66;
  uint64_t v67;
  int32x2_t v68;
  __int32 v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  const llvm::Loop *v74;
  const llvm::Loop *v75;
  const llvm::Loop *v76;
  uint64_t v77;
  uint64_t i;
  char *v79;
  uint64_t *v80;
  char *v81;
  uint64_t v83;
  llvm::BasicBlock **v84;
  llvm::BasicBlock *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  llvm::BasicBlock **v89;
  llvm::BasicBlock *v90;
  int v91;
  int v92;
  llvm::BasicBlock *v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  BOOL v104;
  BOOL v105;
  unsigned int v106;
  BOOL v107;
  uint64_t v109;
  uint64_t LoopPredecessor;
  const llvm::Twine *v111;
  uint64_t v112;
  uint64_t v113;
  llvm::BasicBlock *v114;
  uint64_t v115;
  llvm *v116;
  int v117;
  llvm::BasicBlock *v118;
  uint64_t j;
  llvm::Value *v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  int v124;
  unsigned int v125;
  _QWORD *v126;
  _QWORD ***v127;
  _QWORD *v128;
  int v129;
  BOOL v130;
  unsigned int v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  void **v135;
  _DWORD *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  unint64_t v150;
  uint64_t v151;
  int32x2_t *v152;
  unint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  int v159;
  int v160;
  _QWORD *v161;
  uint64_t *v162;
  uint64_t *k;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  unint64_t v171;
  uint64_t v172;
  int32x2_t *v173;
  unint64_t v174;
  uint64_t v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  int v180;
  int v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t *v184;
  uint64_t v185;
  int32x2_t *v186;
  unint64_t v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  int v193;
  int v194;
  uint64_t v195;
  _QWORD *v196;
  unsigned int v197;
  uint64_t v198;
  llvm::BasicBlock *v199;
  llvm::Value *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  llvm::Value **v205;
  llvm::Value *v206;
  int v207;
  int v208;
  llvm::Value *v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  unint64_t v215;
  uint64_t v216;
  int32x2_t *v217;
  unint64_t v218;
  uint64_t v219;
  unsigned int v220;
  uint64_t v221;
  uint64_t *v222;
  uint64_t v223;
  int v224;
  int v225;
  llvm::Value *v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t *v229;
  uint64_t v230;
  llvm::ValueAsMetadata *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t *v235;
  unsigned int v236;
  uint64_t v237;
  llvm::Value *v239;
  _QWORD *v240;
  _QWORD *v241;
  llvm::Value *v242;
  char *v243;
  uint64_t v244;
  _QWORD *v245;
  _QWORD *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  llvm::ValueSymbolTable *v250;
  unint64_t v251;
  unint64_t *v252;
  uint64_t v253;
  int32x2_t *v254;
  unint64_t v255;
  uint64_t v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t *v259;
  uint64_t v260;
  int v261;
  int v262;
  char *v263;
  char *v264;
  uint64_t v265;
  uint64_t m;
  uint64_t ***v267;
  uint64_t v268;
  llvm::LLVMContext *v269;
  llvm::LLVMContext *v270;
  _BOOL4 v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  _QWORD *v275;
  unsigned int v276;
  uint64_t v277;
  uint64_t v278;
  int v279;
  int v280;
  unsigned int v281;
  uint64_t v282;
  uint64_t v283;
  int v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  int v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v296;
  uint64_t n;
  uint64_t v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  int32x2_t *v307;
  unint64_t v308;
  uint64_t v309;
  unsigned int v310;
  uint64_t v311;
  uint64_t *v312;
  uint64_t v313;
  int v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  _QWORD *v319;
  llvm::BasicBlock *v320;
  int v321;
  int v322;
  uint64_t v323;
  llvm::BasicBlock *v324;
  unint64_t v326;
  _QWORD *v328;
  _QWORD *v329;
  int v330;
  int v331;
  unsigned int v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  void *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  _QWORD *v340;
  void *v341;
  int v342;
  int v343;
  uint64_t v344;
  llvm::BasicBlock *v345;
  unint64_t v347;
  unint64_t v349;
  uint64_t v350;
  int32x2_t *v351;
  unint64_t v352;
  uint64_t v353;
  unsigned int v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  int v358;
  int v359;
  unint64_t v360;
  uint64_t v361;
  int32x2_t *v362;
  unint64_t v363;
  uint64_t v364;
  unsigned int v365;
  uint64_t v366;
  uint64_t *v367;
  uint64_t v368;
  int v369;
  int v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  _QWORD *v374;
  void *v375;
  int v376;
  int v377;
  uint64_t v378;
  llvm::BasicBlock *v379;
  unint64_t v381;
  _QWORD *v383;
  uint64_t ***v384;
  BOOL v385;
  _QWORD *v386;
  unsigned int v387;
  BOOL v388;
  int v389;
  uint64_t *v390;
  uint64_t v391;
  char v392;
  uint64_t **v393;
  uint64_t **v394;
  _DWORD *v395;
  void (**v396)(void);
  unint64_t v397;
  uint64_t v398;
  int32x2_t *v399;
  unint64_t v400;
  uint64_t v401;
  unsigned int v402;
  uint64_t v403;
  uint64_t *v404;
  uint64_t v405;
  int v406;
  int v407;
  uint64_t ii;
  uint64_t v409;
  uint64_t v410;
  int v411;
  unint64_t v412;
  int v413;
  int v414;
  uint64_t v415;
  _BOOL4 v416;
  char *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  int v421;
  int v422;
  unsigned int v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  int v428;
  uint64_t v429;
  char v430;
  uint64_t v431;
  _QWORD *v432;
  int v434;
  unsigned int v435;
  void *v436;
  int v437;
  unint64_t v438;
  unint64_t *v439;
  uint64_t v440;
  int32x2_t *v441;
  unint64_t v442;
  uint64_t v443;
  unsigned int v444;
  uint64_t v445;
  uint64_t *v446;
  uint64_t v447;
  int v448;
  int v449;
  BOOL isOneValue;
  llvm *v451;
  uint64_t *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  _QWORD *v456;
  llvm::BasicBlock *v457;
  _QWORD *v458;
  llvm::Instruction *v459;
  uint64_t *v460;
  uint64_t *v461;
  uint64_t v462;
  llvm::ValueSymbolTable *v463;
  uint64_t v464;
  llvm::ValueSymbolTable *v465;
  uint64_t *v466;
  uint64_t *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  _QWORD *v473;
  uint64_t v474;
  uint64_t ***v475;
  char *v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t ****v481;
  uint64_t ***v482;
  int v483;
  int v484;
  int *v485;
  llvm::BasicBlock *v486;
  uint64_t ***v487;
  int v488;
  uint64_t ***v489;
  uint64_t v490;
  uint64_t *v491;
  uint64_t **v492;
  uint64_t v493;
  int v494;
  uint64_t ****v495;
  _QWORD *v496;
  unint64_t v497;
  _QWORD *v498;
  llvm *v499;
  llvm::Value **v500;
  llvm::Instruction *v501;
  llvm::Instruction *v502;
  uint64_t v503;
  llvm::Value *v504;
  uint64_t v505;
  uint64_t v506;
  llvm::LLVMContext *v507;
  llvm::LLVMContext *v508;
  _QWORD *v509;
  unint64_t v510;
  uint64_t v511;
  int32x2_t *v512;
  unint64_t v513;
  uint64_t v514;
  unsigned int v515;
  uint64_t v516;
  uint64_t *v517;
  uint64_t v518;
  int v519;
  int v520;
  llvm::Value *v521;
  __int32 v522;
  int32x2_t v523;
  __int32 v524;
  uint64_t v525;
  llvm::Instruction *v526;
  int v527;
  int v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t jj;
  _QWORD *v532;
  uint64_t v533;
  unsigned int *v534;
  int v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t *v541;
  int v542;
  uint64_t v543;
  llvm::ValueSymbolTable *v544;
  unint64_t v545;
  unint64_t *v546;
  uint64_t v547;
  int32x2_t *v548;
  unint64_t v549;
  uint64_t v550;
  unsigned int v551;
  uint64_t v552;
  uint64_t *v553;
  uint64_t v554;
  int v555;
  int v556;
  char *DefinedAccess;
  uint64_t v558;
  llvm::Value *v559;
  _QWORD *v560;
  unint64_t v561;
  uint64_t **v562;
  int32x2_t *v563;
  unint64_t v564;
  uint64_t v565;
  unsigned int v566;
  uint64_t v567;
  uint64_t ***v568;
  uint64_t **v569;
  int v570;
  int v571;
  uint64_t v572;
  uint64_t *v573;
  uint64_t v574;
  int v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t ***v583;
  uint64_t v584;
  int v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t *v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  llvm::Value *v595;
  llvm::BasicBlock *v596;
  _DWORD *v597;
  _DWORD *v598;
  uint64_t v599;
  llvm::Value *v600;
  _QWORD *v601;
  llvm::BasicBlock *v602;
  void **v603;
  void **v604;
  unsigned __int8 **v605;
  int v606;
  unsigned __int8 *v607;
  unsigned __int8 *v608;
  unsigned __int8 *v609;
  char *v610;
  char *v611;
  uint64_t v612;
  uint64_t v613;
  unint64_t v614;
  unint64_t *v615;
  uint64_t v616;
  int32x2_t *v617;
  unint64_t v618;
  uint64_t v619;
  unsigned int v620;
  uint64_t v621;
  uint64_t *v622;
  uint64_t v623;
  int v624;
  int v625;
  unint64_t v627;
  unint64_t *v628;
  uint64_t v629;
  int32x2_t *v630;
  unint64_t v631;
  uint64_t v632;
  unsigned int v633;
  uint64_t v634;
  uint64_t *v635;
  uint64_t v636;
  int v637;
  int v638;
  unsigned int v639;
  llvm **v640;
  uint64_t v641;
  uint64_t **v642;
  unsigned int v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t *v646;
  uint64_t ***v647;
  char *v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t ****v654;
  uint64_t ***v655;
  int v656;
  int v657;
  uint64_t v658;
  llvm::ValueSymbolTable *v659;
  _QWORD *v660;
  void *v661;
  uint64_t **v662;
  uint64_t ***v663;
  char *v664;
  uint64_t **v665;
  uint64_t **v666;
  uint64_t v667;
  uint64_t v668;
  _QWORD **v669;
  uint64_t **v670;
  _QWORD **v671;
  unint64_t v672;
  unsigned int v673;
  llvm **v674;
  uint64_t ***v675;
  char *v676;
  uint64_t **v677;
  uint64_t **v678;
  uint64_t ***v679;
  uint64_t v680;
  uint64_t v681;
  int v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t *v685;
  uint64_t v686;
  const llvm::BasicBlock **v687;
  uint64_t v688;
  const llvm::BasicBlock *v689;
  uint64_t **v690;
  unsigned int v691;
  uint64_t v692;
  uint64_t *v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  llvm **v697;
  uint64_t v698;
  uint64_t *v699;
  llvm::BasicBlock **v700;
  uint64_t v701;
  llvm::BasicBlock *v702;
  llvm::BasicBlock *v703;
  uint64_t v704;
  unsigned int v705;
  llvm::BasicBlock **v706;
  uint64_t v707;
  uint64_t v708;
  int v709;
  uint64_t v710;
  uint64_t v711;
  _QWORD *v712;
  uint64_t ***v713;
  uint64_t ***v714;
  uint64_t **v715;
  uint64_t **v716;
  llvm::BasicBlock *v717;
  _DWORD *v718;
  uint64_t v719;
  uint64_t v720;
  void *v721;
  void *v722;
  char *v723;
  BOOL v724;
  uint64_t v725;
  uint64_t *v726;
  uint64_t v727;
  unsigned int v728;
  char *v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  _QWORD *v733;
  uint64_t v734;
  int v735;
  int v736;
  void *v737;
  llvm::BasicBlock *v738;
  unint64_t v740;
  _QWORD *v742;
  _QWORD *v743;
  int v744;
  int v745;
  unsigned int v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  _QWORD *v750;
  int v751;
  unint64_t v752;
  uint64_t v753;
  int32x2_t *v754;
  unint64_t v755;
  uint64_t v756;
  unsigned int v757;
  uint64_t v758;
  uint64_t *v759;
  uint64_t v760;
  int v761;
  int v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t **v765;
  unsigned int v766;
  uint64_t v767;
  uint64_t **v768;
  uint64_t v769;
  uint64_t kk;
  uint64_t v771;
  int v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  _QWORD **v776;
  uint64_t v777;
  llvm::BasicBlock **v778;
  uint64_t v779;
  llvm::BasicBlock *v780;
  uint64_t v781;
  uint64_t *v782;
  unint64_t v783;
  int v784;
  uint64_t v785;
  _QWORD *v786;
  unsigned int v787;
  uint64_t *v788;
  uint64_t *v789;
  unint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  int v795;
  int v796;
  uint64_t v797;
  int v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  _QWORD *v803;
  uint64_t v804;
  int v805;
  int v806;
  uint64_t v807;
  uint64_t v808;
  unint64_t v810;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  _QWORD *v815;
  uint64_t v816;
  int v817;
  int v818;
  unint64_t v819;
  uint64_t v820;
  int32x2_t *v821;
  unint64_t v822;
  uint64_t v823;
  unsigned int v824;
  uint64_t v825;
  uint64_t *v826;
  uint64_t v827;
  int v828;
  int v829;
  uint64_t v830;
  uint64_t v831;
  unint64_t v833;
  uint64_t v835;
  int64x2_t v836;
  uint64_t *v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  unsigned int v841;
  uint64_t v842;
  _QWORD *v843;
  uint64_t v844;
  int v845;
  int v846;
  uint64_t v847;
  void *v848;
  unint64_t v850;
  int v852;
  uint64_t v853;
  unsigned int v854;
  uint64_t v855;
  uint64_t v856;
  int v857;
  int v858;
  _QWORD *v859;
  unint64_t v860;
  uint64_t v861;
  int32x2_t *v862;
  unint64_t v863;
  uint64_t v864;
  unsigned int v865;
  uint64_t v866;
  uint64_t *v867;
  uint64_t v868;
  int v869;
  int v870;
  uint64_t v871;
  _QWORD *v872;
  unint64_t v873;
  uint64_t v874;
  int32x2_t *v875;
  unint64_t v876;
  uint64_t v877;
  unsigned int v878;
  uint64_t v879;
  uint64_t *v880;
  uint64_t v881;
  int v882;
  int v883;
  uint64_t mm;
  uint64_t *v885;
  uint64_t *nn;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  _QWORD *v891;
  uint64_t v892;
  int v893;
  int v894;
  void *v895;
  void *v896;
  unint64_t v898;
  int v900;
  int64x2_t *p_b;
  unint64_t v902;
  uint64_t v903;
  int32x2_t *v904;
  unint64_t v905;
  uint64_t v906;
  unsigned int v907;
  uint64_t v908;
  uint64_t *v909;
  uint64_t v910;
  int v911;
  int v912;
  int v913;
  unsigned int v914;
  uint64_t *v915;
  void *v916;
  uint64_t *v917;
  int v918;
  BOOL v919;
  unsigned int v920;
  uint64_t *v921;
  _QWORD *v922;
  void *v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  unsigned int v927;
  BOOL v928;
  uint64_t v930;
  char v931;
  uint64_t v933;
  unsigned int v934;
  BOOL v935;
  uint64_t *v937;
  uint64_t v938;
  uint64_t v939;
  _QWORD *v940;
  uint64_t *v941;
  int8x16_t *v942;
  int8x16_t *v943;
  uint64_t v944;
  uint64_t v945;
  char *v946;
  uint64_t v947;
  unsigned int v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  unsigned int v952;
  BOOL v953;
  uint64_t v955;
  _QWORD *v956;
  uint64_t *v957;
  unsigned int v958;
  BOOL v959;
  uint64_t v961;
  char *v962;
  char *v963;
  uint64_t *v964;
  char *v965;
  char *v966;
  BOOL v967;
  uint64_t v969;
  uint64_t (*v970)(_QWORD);
  uint64_t v971;
  _QWORD *v972;
  uint64_t *v973;
  uint64_t v974;
  _QWORD *v975;
  uint64_t v976;
  uint64_t (*v977)(_QWORD);
  uint64_t v978;
  _QWORD *v979;
  uint64_t *v980;
  uint64_t *v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  _QWORD *v987;
  uint64_t v988;
  int v989;
  int v990;
  uint64_t v991;
  uint64_t v992;
  unint64_t v994;
  _QWORD *v996;
  uint64_t *v997;
  unint64_t v998;
  int32x2_t ****v999;
  int32x2_t *v1000;
  unint64_t v1001;
  uint64_t v1002;
  unsigned int v1003;
  uint64_t v1004;
  int32x2_t *****v1005;
  int32x2_t ****v1006;
  int v1007;
  int v1008;
  int v1009;
  _QWORD *v1010;
  _QWORD *v1011;
  uint64_t v1012;
  unsigned int v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  unsigned int v1017;
  BOOL v1018;
  uint64_t v1020;
  char v1021;
  uint64_t v1022;
  unsigned int v1023;
  BOOL v1024;
  unint64_t v1026;
  uint64_t v1027;
  _QWORD *v1028;
  unint64_t v1029;
  unint64_t *v1030;
  _QWORD *v1031;
  unint64_t v1032;
  unint64_t *v1033;
  _QWORD *v1034;
  _QWORD *v1035;
  uint64_t v1036;
  unint64_t v1037;
  uint64_t v1038;
  unint64_t v1039;
  char *v1040;
  _QWORD *v1041;
  uint64_t v1042;
  unint64_t v1043;
  uint64_t v1044;
  unint64_t v1045;
  char *v1046;
  char *v1047;
  uint64_t v1048;
  _QWORD *v1049;
  char *v1050;
  uint64_t v1051;
  uint64_t v1052;
  _QWORD *v1053;
  uint64_t *v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  unsigned int v1058;
  uint64_t v1059;
  _QWORD *v1060;
  uint64_t v1061;
  int v1062;
  int v1063;
  void *v1064;
  uint64_t v1065;
  unint64_t v1067;
  _QWORD *v1069;
  uint64_t *v1070;
  __int32 v1071;
  _QWORD *v1072;
  int32x2_t v1073;
  __int32 v1074;
  uint64_t v1075;
  uint64_t v1076;
  int v1077;
  uint64_t v1078;
  int v1079;
  unint64_t v1080;
  uint64_t v1081;
  int32x2_t *v1082;
  unint64_t v1083;
  uint64_t v1084;
  unsigned int v1085;
  uint64_t v1086;
  uint64_t *v1087;
  uint64_t v1088;
  int v1089;
  int v1090;
  _QWORD *v1091;
  uint64_t v1092;
  unint64_t v1093;
  uint64_t v1094;
  unint64_t v1095;
  char *v1096;
  uint64_t *v1097;
  _QWORD *v1098;
  uint64_t *v1099;
  uint64_t v1100;
  unint64_t v1101;
  uint64_t *v1102;
  uint64_t *v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  _QWORD *v1109;
  uint64_t v1110;
  int v1111;
  int v1112;
  void *v1113;
  uint64_t v1114;
  unint64_t v1116;
  _QWORD *v1118;
  uint64_t *v1119;
  unint64_t v1120;
  uint64_t v1121;
  int32x2_t *v1122;
  unint64_t v1123;
  uint64_t v1124;
  unsigned int v1125;
  uint64_t v1126;
  uint64_t *v1127;
  uint64_t v1128;
  int v1129;
  int v1130;
  uint64_t v1131;
  _BYTE *v1132;
  _BYTE *v1133;
  unint64_t v1134;
  unint64_t v1135;
  uint64_t v1136;
  unsigned int v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t **v1140;
  uint64_t v1141;
  uint64_t **v1142;
  uint64_t *v1143;
  llvm::BasicBlock *v1144;
  llvm::BasicBlock *v1145;
  char *v1146;
  int v1147;
  int v1148;
  unsigned int v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  char *v1153;
  int v1154;
  llvm::BasicBlock **v1155;
  llvm::BasicBlock *v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t *v1159;
  uint64_t v1160;
  _QWORD *v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t *v1164;
  uint64_t *v1165;
  uint64_t **v1166;
  uint64_t *v1167;
  uint64_t *v1168;
  uint64_t *v1169;
  uint64_t *v1170;
  uint64_t v1171;
  uint64_t ***v1172;
  const char *v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t *v1176;
  unsigned int v1177;
  uint64_t v1178;
  uint64_t v1179;
  llvm::BasicBlock **v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t ****v1185;
  uint64_t ***v1186;
  int v1187;
  int v1188;
  uint64_t ***v1189;
  uint64_t v1190;
  uint64_t *v1191;
  uint64_t v1192;
  uint64_t ***v1193;
  uint64_t v1194;
  const char *v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t ****v1200;
  uint64_t ***v1201;
  int v1202;
  int v1203;
  uint64_t ***v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t *v1207;
  char *v1208;
  uint64_t v1209;
  __int32 v1210;
  int32x2_t v1211;
  __int32 v1212;
  uint64_t v1213;
  uint64_t *v1214;
  uint64_t v1215;
  int v1216;
  int v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  llvm::UndefValue *v1221;
  uint64_t i1;
  uint64_t v1223;
  int v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  _QWORD **v1228;
  uint64_t v1229;
  llvm::BasicBlock **v1230;
  uint64_t v1231;
  llvm::BasicBlock *v1232;
  uint64_t v1233;
  uint64_t *v1234;
  unint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  _QWORD *v1239;
  int v1240;
  llvm *v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t *v1246;
  __int32 v1247;
  uint64_t v1248;
  int32x2_t v1249;
  __int32 v1250;
  uint64_t v1251;
  uint64_t v1252;
  int v1253;
  int v1254;
  llvm *v1255;
  uint64_t v1256;
  uint64_t v1257;
  llvm *v1258;
  int v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  unsigned int v1263;
  BOOL v1264;
  unsigned int v1266;
  uint64_t v1267;
  llvm *v1268;
  uint64_t v1270;
  _QWORD *v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t *v1274;
  uint64_t v1275;
  uint64_t v1276;
  _QWORD *v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t *v1280;
  uint64_t *v1281;
  _QWORD *v1282;
  uint64_t v1283;
  unsigned int *v1284;
  uint64_t *i2;
  _QWORD *v1286;
  uint64_t v1287;
  unsigned int *v1288;
  uint64_t v1289;
  char v1290;
  uint64_t v1292;
  unsigned int v1293;
  BOOL v1294;
  int32x2_t v1296;
  __int32 v1297;
  __int32 v1298;
  unsigned int v1299;
  _QWORD *v1300;
  _QWORD *v1301;
  _QWORD *v1302;
  int v1303;
  BOOL v1304;
  unsigned int v1305;
  _QWORD *v1306;
  unint64_t v1307;
  uint64_t *v1308;
  _QWORD *v1309;
  uint64_t v1310;
  __int32 v1311;
  int32x2_t v1312;
  __int32 v1313;
  uint64_t v1314;
  uint64_t v1315;
  int v1316;
  int v1317;
  uint64_t v1318;
  BOOL v1319;
  uint64_t v1320;
  unsigned int v1321;
  BOOL v1322;
  uint64_t v1324;
  _QWORD *v1325;
  uint64_t v1326;
  unsigned int *v1327;
  char v1328;
  uint64_t v1329;
  unsigned int v1330;
  BOOL v1331;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  int v1337;
  char v1338;
  uint64_t *v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  unint64_t v1343;
  uint64_t *v1344;
  _QWORD *v1345;
  _QWORD *v1346;
  uint64_t v1347;
  unint64_t v1348;
  uint64_t v1349;
  unint64_t v1350;
  char *v1351;
  _QWORD *v1352;
  uint64_t v1353;
  unint64_t v1354;
  uint64_t v1355;
  unint64_t v1356;
  char *v1357;
  uint64_t *v1358;
  int32x2_t *v1359;
  uint64_t v1360;
  uint64_t *v1361;
  uint64_t v1362;
  uint64_t *v1363;
  uint64_t *v1364;
  int8x16_t *v1365;
  _QWORD *v1366;
  _QWORD *v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t *v1370;
  uint64_t v1371;
  uint64_t v1372;
  _QWORD *v1373;
  _QWORD *v1374;
  uint64_t v1375;
  uint64_t v1376;
  unint64_t v1377;
  const std::nothrow_t *v1378;
  uint64_t *v1379;
  uint64_t *v1380;
  uint64_t *v1381;
  uint64_t *v1382;
  uint64_t *v1383;
  _QWORD *v1384;
  uint64_t v1385;
  unsigned int *v1386;
  uint64_t *v1387;
  unint64_t v1388;
  const std::nothrow_t *v1389;
  unint64_t v1390;
  uint64_t *v1391;
  llvm::ScalarEvolution *v1392;
  uint64_t *v1393;
  llvm *v1394;
  unsigned int v1395;
  unsigned int v1396;
  uint64_t v1397;
  uint64_t v1398;
  unint64_t *v1399;
  unint64_t *v1400;
  __int32 v1401;
  __int32 v1402;
  int32x2_t v1403;
  unint64_t v1404;
  int32x2_t v1405;
  uint64_t v1406;
  uint64_t *v1407;
  uint64_t v1408;
  int v1409;
  uint64_t v1410;
  uint64_t v1411;
  int v1412;
  _QWORD *v1413;
  int v1414;
  int v1415;
  unint64_t *v1416;
  unint64_t v1417;
  unint64_t *v1418;
  uint64_t *v1419;
  int8x16_t *v1420;
  _QWORD *v1421;
  _QWORD *v1422;
  uint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  __int32 v1426;
  int32x2_t v1427;
  __int32 v1428;
  uint64_t v1429;
  uint64_t v1430;
  int v1431;
  int v1432;
  llvm *v1433;
  uint64_t v1434;
  unsigned int v1435;
  _QWORD *v1436;
  uint64_t v1437;
  uint64_t v1438;
  unsigned int v1439;
  BOOL v1440;
  uint64_t v1442;
  _QWORD *v1443;
  unsigned int *v1444;
  uint64_t v1445;
  unsigned int v1446;
  BOOL v1447;
  void *v1449;
  uint64_t v1450;
  uint64_t *v1451;
  uint64_t v1452;
  void **v1453;
  uint64_t v1454;
  void **v1455;
  void *v1456;
  __int32 v1457;
  int32x2_t v1458;
  __int32 v1459;
  uint64_t v1460;
  _QWORD *v1461;
  void *v1462;
  int v1463;
  uint64_t v1464;
  int v1465;
  _QWORD *v1466;
  void *v1467;
  _QWORD *v1468;
  int v1469;
  BOOL v1470;
  int v1471;
  _QWORD *v1472;
  unint64_t *v1473;
  unint64_t v1474;
  int v1475;
  int v1476;
  int v1479;
  unsigned int v1480;
  void *v1481;
  uint64_t *v1482;
  uint64_t v1483;
  uint64_t v1484;
  _QWORD *v1485;
  _QWORD *v1486;
  uint64_t v1487;
  uint64_t v1488;
  unint64_t v1489;
  const std::nothrow_t *v1490;
  uint64_t *v1491;
  uint64_t *v1492;
  uint64_t *v1493;
  _QWORD *v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  int v1499;
  int v1500;
  uint64_t v1501;
  int v1502;
  __int32 v1503;
  int32x2_t v1504;
  __int32 v1505;
  uint64_t v1506;
  uint64_t v1507;
  int v1508;
  int v1509;
  _QWORD *v1510;
  unint64_t v1511;
  _QWORD *v1512;
  _QWORD *v1513;
  unint64_t v1514;
  _QWORD *v1515;
  _QWORD *v1516;
  _QWORD *v1517;
  uint64_t v1518;
  unint64_t v1519;
  uint64_t v1520;
  unint64_t v1521;
  char *v1522;
  _QWORD *v1523;
  uint64_t v1524;
  unint64_t v1525;
  uint64_t v1526;
  unint64_t v1527;
  char *v1528;
  char *v1529;
  uint64_t v1530;
  int32x2_t *v1531;
  char *v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  llvm *v1536;
  char *v1537;
  char *v1538;
  int64_t v1539;
  char *v1540;
  _QWORD *v1541;
  _QWORD *v1542;
  int64_t v1543;
  const llvm::APInt *v1544;
  int v1545;
  uint64_t v1546;
  llvm::ValueHandleBase *v1547;
  llvm::Value **v1548;
  llvm::ValueHandleBase *v1549;
  llvm::ConstantInt *v1550;
  uint64_t *v1551;
  uint64_t *v1552;
  llvm::Value **v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t *v1556;
  uint64_t v1557;
  BOOL v1558;
  uint64_t v1559;
  uint64_t v1560;
  _QWORD *v1561;
  uint64_t v1562;
  char *v1563;
  char *v1564;
  char *v1565;
  char *v1566;
  uint64_t v1568;
  llvm **v1569;
  llvm::ScalarEvolution *v1570;
  llvm *v1571;
  uint64_t v1572;
  uint64_t v1573;
  const llvm::Loop *v1574;
  uint64_t v1575;
  const llvm::DominatorTree *v1576;
  llvm *v1577;
  llvm *v1578;
  uint64_t *v1579;
  char *v1580;
  uint64_t *v1581;
  char *v1582;
  uint64_t v1584;
  llvm ***v1585;
  llvm **v1586;
  uint64_t v1587;
  uint64_t v1588;
  uint64_t v1589;
  llvm::ConstantInt *v1590;
  llvm::ConstantInt *v1591;
  unsigned int v1592;
  char v1593;
  llvm::ConstantInt *v1594;
  unsigned int v1595;
  char v1596;
  __int32 v1597;
  uint64_t v1598;
  void **v1599;
  _QWORD *v1600;
  int v1601;
  int v1602;
  llvm::Value *v1603;
  uint64_t v1604;
  uint64_t v1605;
  uint64_t v1606;
  uint64_t v1607;
  llvm::Value **v1608;
  llvm::Value *v1609;
  int v1610;
  int v1611;
  uint64_t v1612;
  size_t *v1613;
  int v1614;
  size_t v1615;
  unsigned __int8 *v1616;
  int v1617;
  uint64_t v1618;
  int v1619;
  int v1620;
  uint64_t v1621;
  _QWORD *v1622;
  unsigned int v1623;
  uint64_t ***v1624;
  int v1625;
  _BOOL4 v1626;
  int v1627;
  int v1628;
  int v1629;
  BOOL v1631;
  int v1632;
  llvm *v1635;
  uint64_t v1636;
  uint64_t v1637;
  _QWORD *v1638;
  char *v1639;
  _QWORD *v1640;
  void **v1641;
  llvm::BasicBlock *v1643;
  llvm::BasicBlock *v1644;
  uint64_t *v1645;
  int64x2_t v1646;
  uint64_t *v1647;
  uint64_t *v1648;
  uint64_t *v1649;
  llvm *v1650;
  void *v1651;
  uint64_t v1652;
  char *v1653;
  int v1654;
  _QWORD *__s1;
  int __s1a;
  unsigned __int8 *__s1b;
  const llvm::Loop *v1658;
  uint64_t v1659;
  uint64_t v1660;
  uint64_t v1662;
  void *v1663;
  _QWORD *v1664;
  uint64_t *v1665;
  uint64_t v1666;
  uint64_t *v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  llvm::Value *v1672;
  llvm::Value *v1673;
  llvm::Value *v1674;
  llvm *v1675;
  uint64_t *v1676;
  char *v1677;
  char *v1678;
  llvm::Value **v1679;
  unsigned int v1680;
  llvm::BasicBlock *__nc;
  unsigned int __n;
  size_t __na;
  size_t __nb;
  char v1686[8];
  uint64_t v1687;
  void *__p;
  void *v1689;
  llvm::BasicBlock *v1690;
  uint64_t *v1691;
  char *v1692;
  char *v1693;
  void **v1694;
  char *v1695;
  char *v1696;
  uint64_t v1697;
  void *v1698;
  uint64_t v1699;
  _BYTE v1700[32];
  _QWORD v1701[9];
  char *v1702;
  uint64_t v1703;
  uint64_t v1704;
  void *v1705;
  uint64_t v1706;
  _BYTE v1707[64];
  uint64_t v1708;
  _QWORD *v1709;
  unsigned int v1710;
  uint64_t v1711;
  _OWORD v1712[2];
  void *v1713;
  uint64_t v1714;
  _BYTE v1715[32];
  void *v1716;
  int64x2_t __b;
  int64x2_t v1718;
  int64x2_t v1719;
  int64x2_t v1720;
  void *v1721;
  uint64_t v1722;
  uint64_t v1723;
  int v1724;
  __int16 v1725;
  char v1726;
  uint64_t v1727;
  uint64_t v1728;
  void *v1729;
  void *v1730;
  void *v1731;
  uint64_t v1732;
  _BYTE v1733[144];
  _BYTE v1734[304];
  void *v1735;
  _BYTE v1736[64];
  void *v1737;
  uint64_t v1738;
  _BYTE v1739[32];
  void *v1740;
  void *v1741;
  uint64_t v1742;
  int v1743;
  _BYTE v1744[128];
  llvm::BasicBlock *v1745;
  uint64_t v1746;
  _BYTE v1747[128];
  void *v1748;
  void *v1749;
  uint64_t *v1750;
  char *v1751;
  char v1752;
  void *v1753;
  uint64_t v1754;
  _BYTE v1755[32];
  uint64_t v1756;
  void *v1757;
  uint64_t v1758;
  uint64_t **v1759;
  _QWORD v1760[16];
  unint64_t v1761;
  uint64_t v1762;
  int32x2_t ****v1763;
  uint64_t v1764;
  void *v1765;
  uint64_t v1766;
  uint64_t v1767;

  v15 = a2;
  v1767 = *MEMORY[0x1E0C80C00];
  v1643 = (llvm::BasicBlock *)a2[5];
  v16 = *(_DWORD *)(a6 + 8);
  v1632 = *((unsigned __int8 *)a2 + 16);
  if (v1632 == 30)
    v17 = a2;
  else
    v17 = 0;
  v1624 = v17;
  if (v1632 == 30)
    v18 = 0;
  else
    v18 = a2;
  v1636 = (uint64_t)v18;
  if (v1632 == 30)
  {
    v19 = (unsigned __int8 *)*(a2 - 12);
    v20 = v19 == (unsigned __int8 *)*a3 && v16 == 0;
    v21 = v20;
    v1629 = v21;
    if (v20)
    {
      v22 = 0;
      v1627 = 1;
LABEL_27:
      v26 = (llvm::BasicBlock **)&v15[-4 * (v22 ^ 1) - 4];
      goto LABEL_28;
    }
    if (sub_1C48491B0((uint64_t)&v1716, v19))
    {
LABEL_20:
      v22 = 0;
      v1627 = 1;
      v15 = a2;
      v18 = (_QWORD ***)v1636;
      goto LABEL_27;
    }
    if (sub_1C5088268((uint64_t)&v1716, (unsigned __int8 *)*(a2 - 12)))
    {
      v18 = (_QWORD ***)v1636;
    }
    else
    {
      if (!v16)
        goto LABEL_20;
      isOneValue = llvm::Constant::isOneValue(*(llvm::Constant **)(a6 + 64));
      v18 = (_QWORD ***)v1636;
      if (isOneValue)
      {
        v22 = 0;
        v1627 = 1;
        goto LABEL_26;
      }
    }
    v1627 = 0;
    v22 = 1;
LABEL_26:
    v15 = a2;
    goto LABEL_27;
  }
  v23 = *((_DWORD *)a2 + 5);
  if ((v23 & 0x40000000) != 0)
    v24 = (uint64_t ***)*(a2 - 1);
  else
    v24 = &a2[-4 * (v23 & 0x7FFFFFF)];
  v22 = 0;
  v26 = (llvm::BasicBlock **)(v24 + 4);
  v1627 = 1;
  v1629 = 1;
LABEL_28:
  v1690 = *v26;
  v1711 = 1;
  v1712[0] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v1712[1] = v1712[0];
  v1631 = a13 == 0;
  v1713 = v1715;
  v1714 = 0x400000000;
  v1626 = v16 != 0;
  v1628 = v16;
  v1623 = v22;
  if (v1632 != 30)
  {
    v35 = (*((_DWORD *)v15 + 5) >> 1) & 0x3FFFFFF;
    v36 = (v35 - 1);
    if (v35 == 1)
      goto LABEL_79;
    v37 = 0;
    while (1)
    {
      v38 = *((_DWORD *)v15 + 5);
      if ((v38 & 0x40000000) != 0)
        v39 = (_QWORD ***)*(v15 - 1);
      else
        v39 = &v18[-4 * (v38 & 0x7FFFFFF)];
      v40 = (2 * v37 + 3);
      if (v37 == 4294967294)
        v40 = 1;
      v41 = 4 * v40;
      if (v39[v41] == (_QWORD **)v1690)
        goto LABEL_68;
      if ((v38 & 0x40000000) != 0)
        v42 = (_QWORD ***)*(v15 - 1);
      else
        v42 = &v18[-4 * (v38 & 0x7FFFFFF)];
      v43 = v42[v41];
      v1716 = v43;
      if ((v1711 & 1) != 0)
      {
        v44 = 4;
        v45 = v1712;
      }
      else
      {
        v44 = DWORD2(v1712[0]);
        if (!DWORD2(v1712[0]))
        {
          v54 = 0;
LABEL_65:
          v55 = sub_1C5648ADC((uint64_t)&v1711, (uint64_t)&v1716, &v1716, v54);
          *v55 = v1716;
          v56 = v1716;
          v57 = v1714;
          if (v1714 >= (unint64_t)HIDWORD(v1714))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1713, (uint64_t)v1715, v1714 + 1, 8);
            v57 = v1714;
          }
          v15 = a2;
          v18 = (_QWORD ***)v1636;
          *((_QWORD *)v1713 + v57) = v56;
          LODWORD(v1714) = v1714 + 1;
          goto LABEL_68;
        }
        v45 = *(_OWORD **)&v1712[0];
      }
      v46 = v44 - 1;
      v47 = v46 & ((v43 >> 4) ^ (v43 >> 9));
      v48 = (_QWORD *)v45 + v47;
      v49 = (void *)*v48;
      if (v43 != (_QWORD **)*v48)
      {
        v50 = 0;
        v51 = 1;
        while (v49 != (void *)-4096)
        {
          if (v50)
            v52 = 0;
          else
            v52 = v49 == (void *)-8192;
          if (v52)
            v50 = v48;
          v53 = v47 + v51++;
          v47 = v53 & v46;
          v48 = (_QWORD *)v45 + v47;
          v49 = (void *)*v48;
          if (v43 == (_QWORD **)*v48)
            goto LABEL_68;
        }
        if (v50)
          v54 = v50;
        else
          v54 = v48;
        goto LABEL_65;
      }
LABEL_68:
      if (++v37 == v36)
        goto LABEL_79;
    }
  }
  v27 = v15[-4 * v22 - 4];
  v1716 = v27;
  v28 = ((v27 >> 4) ^ (v27 >> 9)) & 3;
  v29 = (_QWORD *)v1712 + v28;
  v30 = (void *)*v29;
  if (v27 != (uint64_t **)*v29)
  {
    v31 = 0;
    v32 = 1;
    while (v30 != (void *)-4096)
    {
      if (v31)
        v33 = 0;
      else
        v33 = v30 == (void *)-8192;
      if (v33)
        v31 = v29;
      v34 = v28 + v32++;
      v28 = v34 & 3;
      v29 = (_QWORD *)v1712 + v28;
      v30 = (void *)*v29;
      if (v27 == (uint64_t **)*v29)
        goto LABEL_79;
    }
    if (v31)
      v58 = v31;
    else
      v58 = v29;
    v59 = sub_1C5648ADC((uint64_t)&v1711, (uint64_t)&v1716, &v1716, v58);
    *v59 = v1716;
    v60 = v1716;
    v61 = v1714;
    if (v1714 >= HIDWORD(v1714))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1713, (uint64_t)v1715, v1714 + 1, 8);
      v61 = v1714;
    }
    *((_QWORD *)v1713 + v61) = v60;
    LODWORD(v1714) = v1714 + 1;
  }
LABEL_79:
  v1650 = *(llvm **)a1;
  sub_1C4DFE414((uint64_t)&v1686, a1);
  if (a13)
    llvm::LoopBlocksDFS::perform((llvm::LoopBlocksDFS *)&v1686, (llvm::LoopInfo *)a8);
  v62 = *(unsigned int *)(a5 + 8);
  v63 = (const llvm::Loop *)a1;
  if ((_DWORD)v62)
  {
    v65 = a8[2].i32[0];
    if (v65)
    {
      v66 = *(uint64_t **)a5;
      v67 = *(_QWORD *)a5 + 8 * v62;
      v68 = *a8;
      v69 = v65 - 1;
      v63 = (const llvm::Loop *)a1;
      while (1)
      {
        v70 = ((*v66 >> 4) ^ (*v66 >> 9)) & v69;
        v71 = *(_QWORD *)(*(_QWORD *)&v68 + 16 * v70);
        if (*v66 != v71)
          break;
LABEL_91:
        v74 = *(const llvm::Loop **)(*(_QWORD *)&v68 + 16 * v70 + 8);
        if (!v74)
          goto LABEL_99;
        if (v74 != v63)
        {
          v75 = v63;
          while (v75)
          {
            v75 = *(const llvm::Loop **)v75;
            if (v75 == v74)
            {
              v63 = v74;
              break;
            }
          }
        }
        if (++v66 == (uint64_t *)v67)
          goto LABEL_82;
      }
      v72 = 1;
      while (v71 != -4096)
      {
        v73 = v70 + v72++;
        v70 = v73 & v69;
        v71 = *(_QWORD *)(*(_QWORD *)&v68 + 16 * v70);
        if (*v66 == v71)
          goto LABEL_91;
      }
    }
LABEL_99:
    v64 = (const llvm::Loop *)a1;
    if (!a12)
      goto LABEL_102;
    goto LABEL_100;
  }
LABEL_82:
  if (a12)
  {
    v64 = (const llvm::Loop *)a1;
    if (v63)
    {
      llvm::ScalarEvolution::forgetLoop(a12, v63);
      goto LABEL_103;
    }
    do
    {
LABEL_100:
      v76 = v64;
      v64 = *(const llvm::Loop **)v64;
    }
    while (v64);
    llvm::ScalarEvolution::forgetLoop(a12, v76);
LABEL_102:
    v63 = 0;
  }
LABEL_103:
  v77 = (uint64_t)a9;
  v1658 = v63;
  if (byte_1ED823638)
  {
    v1718.i32[0] = 0;
    __b = 0uLL;
    v1716 = &off_1E8139EE0;
    v1718.i8[8] = 0;
    v1720.i64[0] = 0;
    v1720.i32[2] = 0;
    v1719.i64[1] = 0;
    v1719.i64[0] = (uint64_t)&unk_1E81384F8;
    v1723 = 0;
    v1724 = 0;
    v1722 = 0;
    v1721 = &unk_1E8138520;
    llvm::ICFLoopSafetyInfo::computeLoopSafetyInfo((int32x2_t *)&v1716, (const llvm::Loop *)a1);
    v1625 = llvm::ICFLoopSafetyInfo::isGuaranteedToExecute((int32x2_t *)&v1716, (const llvm::BasicBlock **)a2, (const llvm::DominatorTree *)a7, (const llvm::BasicBlock ***)a1) ^ 1;
    v1716 = &off_1E8139EE0;
    v1721 = &unk_1E8138548;
    MEMORY[0x1CAA32FB4](v1722, 8);
    v1719.i64[0] = (uint64_t)&unk_1E8138548;
    MEMORY[0x1CAA32FB4](v1719.i64[1], 8);
    v1716 = &unk_1E813A258;
    sub_1C4EF1108(__b.i64);
  }
  else
  {
    v1625 = 0;
  }
  v1708 = 1;
  for (i = 8; i != 264; i += 16)
    *(uint64_t *)((char *)&v1708 + i) = -4096;
  v79 = (char *)v1713;
  v80 = (uint64_t *)&v1690;
  v1748 = &v1690;
  v1749 = v1713;
  v81 = (char *)v1713 + 8 * v1714;
  v1750 = (uint64_t *)&v1691;
  v1751 = v81;
  while (v80 != (uint64_t *)&v1691 || v79 != v81 || v1750 != (uint64_t *)&v1691 || v1751 != v81)
  {
    v83 = 0;
    do
    {
      v84 = (llvm::BasicBlock **)(*(uint64_t (**)(void **))((char *)&off_1E8197858 + v83))(&v1748);
      v83 += 16;
    }
    while (!v84);
    v85 = *v84;
    if (llvm::BasicBlock::getUniquePredecessor(*v84))
      goto LABEL_118;
    v101 = *((_QWORD *)v85 + 1);
    if (!v101)
      goto LABEL_118;
    while (1)
    {
      v102 = *(_QWORD *)(v101 + 24);
      v103 = *(unsigned __int8 *)(v102 + 16);
      v104 = v102 && v103 >= 0x1C;
      v105 = !v104 || v103 - 29 > 0xA;
      if (!v105)
        break;
      v101 = *(_QWORD *)(v101 + 8);
      if (!v101)
        goto LABEL_118;
    }
LABEL_160:
    v109 = *(_QWORD *)(v102 + 40);
    if (v1643 == (llvm::BasicBlock *)v109
      || llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(a7, (uint64_t)v85, v109))
    {
      while (1)
      {
        v101 = *(_QWORD *)(v101 + 8);
        if (!v101)
          break;
        v102 = *(_QWORD *)(v101 + 24);
        v106 = *(unsigned __int8 *)(v102 + 16);
        if (v102)
          v107 = v106 >= 0x1C;
        else
          v107 = 0;
        if (v107 && v106 - 29 < 0xB)
          goto LABEL_160;
      }
LABEL_118:
      v1716 = &__b.u64[1];
      __b.i32[1] = 4;
      v86 = *(unsigned int *)(a7 + 40);
      if ((_DWORD)v86)
      {
        v87 = *(_QWORD *)(a7 + 24);
        LODWORD(v88) = (v86 - 1) & ((v85 >> 4) ^ (v85 >> 9));
        v89 = (llvm::BasicBlock **)(v87 + 16 * v88);
        v90 = *v89;
        if (v85 != *v89)
        {
          v91 = 1;
          while (v90 != (llvm::BasicBlock *)-4096)
          {
            v92 = v88 + v91++;
            v88 = v92 & (v86 - 1);
            v90 = *(llvm::BasicBlock **)(v87 + 16 * v88);
            if (v85 == v90)
            {
              v89 = (llvm::BasicBlock **)(v87 + 16 * v88);
              goto LABEL_124;
            }
          }
          goto LABEL_126;
        }
LABEL_124:
        if (v89 == (llvm::BasicBlock **)(v87 + 16 * v86))
          goto LABEL_126;
        v93 = v89[1];
      }
      else
      {
LABEL_126:
        v93 = 0;
      }
      __b.i64[1] = (uint64_t)v93;
      v94 = 1;
      do
      {
        v95 = *((_QWORD *)v1716 + v94 - 1);
        __b.i32[0] = v94 - 1;
        v1756 = *(_QWORD *)v95;
        sub_1C6280CD8(&v1708, &v1756)[1] = v85;
        v96 = *(unsigned int *)(v95 + 32);
        v94 = __b.i32[0];
        if ((_DWORD)v96)
        {
          v97 = *(uint64_t **)(v95 + 24);
          v98 = 8 * v96;
          do
          {
            v99 = *v97;
            if (v94 >= __b.i32[1])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1716, (uint64_t)&__b.i64[1], v94 + 1, 8);
              v94 = __b.i32[0];
            }
            *((_QWORD *)v1716 + v94) = v99;
            v94 = ++__b.i32[0];
            ++v97;
            v98 -= 8;
          }
          while (v98);
        }
      }
      while (v94);
      if (v1716 != &__b.u64[1])
        free(v1716);
    }
    v100 = 0;
    do
    {
      if (((*(uint64_t (**)(void **))((char *)&off_1E8197878 + v100))(&v1748) & 1) != 0)
        break;
      v20 = v100 == 16;
      v100 += 16;
    }
    while (!v20);
    v80 = (uint64_t *)v1748;
    v79 = (char *)v1749;
  }
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(a1);
  if (LoopPredecessor)
  {
    v112 = *(_QWORD *)(LoopPredecessor + 40);
    v113 = (uint64_t)a8;
    v114 = (llvm::BasicBlock *)a7;
    if (v112 == LoopPredecessor + 40)
      goto LABEL_170;
    if (v112)
      v115 = v112 - 24;
    else
      v115 = 0;
    if (*(_BYTE *)(v115 + 16) != 30)
    {
      v116 = 0;
      switch(*(_BYTE *)(v115 + 16))
      {
        case 0x1D:
        case 0x21:
        case 0x22:
        case 0x23:
        case 0x24:
        case 0x25:
        case 0x26:
          goto LABEL_175;
        case 0x1E:
LABEL_2550:
          __break(1u);
          return;
        case 0x1F:
          v117 = (*(_DWORD *)(v115 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_173;
        case 0x20:
          v117 = (*(_DWORD *)(v115 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_173;
        case 0x27:
          v117 = *(_DWORD *)(v115 + 80) + 1;
LABEL_173:
          if (v117 == 1)
            goto LABEL_174;
          goto LABEL_170;
        default:
          goto LABEL_170;
      }
    }
    if ((*(_DWORD *)(v115 + 20) & 0x7FFFFFF) == 3)
LABEL_170:
      v116 = 0;
    else
LABEL_174:
      v116 = (llvm *)LoopPredecessor;
  }
  else
  {
    v116 = 0;
    v113 = (uint64_t)a8;
    v114 = (llvm::BasicBlock *)a7;
  }
LABEL_175:
  v118 = **(llvm::BasicBlock ***)(a1 + 32);
  v1718.i16[4] = 257;
  v1635 = v116;
  v1659 = llvm::SplitEdge(v116, v118, v114, (llvm::DominatorTree *)v113, a13, (llvm::MemorySSAUpdater *)&v1716, v111);
  v1705 = v1707;
  v1706 = 0x400000000;
  v1702 = (char *)&v1704;
  v1703 = 0x400000000;
  if (v1714 >= 5)
    sub_1C6326F9C((uint64_t)&v1702, v1714);
  v1701[0] = 1;
  for (j = 1; j != 9; j += 2)
    v1701[j] = -4096;
  if ((_DWORD)v1714)
  {
    v135 = (void **)v1713;
    v1639 = (char *)v1713 + 8 * v1714;
    v1638 = (_QWORD *)((char *)v1643 + 40);
    v1647 = (uint64_t *)(v1659 + 24);
    do
    {
      v1740 = 0;
      v1641 = v135;
      v1740 = *v135;
      v136 = (_DWORD *)operator new();
      v136[4] = 128;
      v137 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
      *(_QWORD *)v136 = v137;
      *((_QWORD *)v136 + 1) = 0;
      v138 = v136[4];
      if ((_DWORD)v138)
      {
        v139 = v138 << 6;
        v140 = v137 + 16;
        do
        {
          *v140 = 0;
          v140[1] = -4096;
          *(v140 - 2) = &unk_1E814DA10;
          *(v140 - 1) = 2;
          v140[2] = 0;
          v140 += 8;
          v139 -= 64;
        }
        while (v139);
      }
      *((_BYTE *)v136 + 24) = 0;
      *((_BYTE *)v136 + 48) = 0;
      v1716 = v136;
      v141 = v1703;
      if (v1703 >= (unint64_t)HIDWORD(v1703))
      {
        sub_1C6327068((uint64_t)&v1702, &v1716);
        v142 = v1702;
        v143 = v1703;
      }
      else
      {
        v142 = v1702;
        *(_QWORD *)&v1702[8 * v1703] = v136;
        v143 = v141 + 1;
        LODWORD(v1703) = v143;
      }
      v144 = *(uint64_t **)a5;
      v145 = *(unsigned int *)(a5 + 8);
      v1651 = v1740;
      v146 = *(_QWORD *)&v142[8 * v143 - 8];
      v1748 = &v1750;
      v1749 = (void *)0x400000000;
      v147 = v145 + ((*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3);
      if (v147 >= 5)
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1748, (uint64_t)&v1750, v147, 8);
      v1716 = ".us";
      v1718.i16[4] = 259;
      __s1 = (_QWORD *)llvm::CloneBasicBlock((uint64_t ***)v1659, v146, (uint64_t)&v1716, *(_QWORD *)(v1659 + 56), 0, 0);
      sub_1C4FCEAA0(*(_QWORD *)(v1659 + 56) + 72, v1647, __s1[7] + 72, __s1 + 3);
      v148 = v1749;
      if (v1749 >= (unint64_t)HIDWORD(v1749))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1748, (uint64_t)&v1750, v1749 + 1, 8);
        v148 = v1749;
      }
      *((_QWORD *)v1748 + v148) = __s1;
      LODWORD(v1749) = (_DWORD)v1749 + 1;
      __b = (int64x2_t)2uLL;
      v1718.i64[0] = v1659;
      if (v1659 != -8192 && v1659 != -4096 && v1659)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&__b);
      v1716 = &unk_1E814DA10;
      v1718.i64[1] = v146;
      v149 = sub_1C52E2ED8(v146, &v1716);
      if (v1718.i64[0] != -8192 && v1718.i64[0] != -4096 && v1718.i64[0])
      {
        v150 = __b.i64[0] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(__b.i64[0] & 0xFFFFFFFFFFFFFFF8) = __b.i64[1];
        if (__b.i64[1])
        {
          *(_QWORD *)__b.i64[1] = *(_QWORD *)__b.i64[1] & 7 | v150;
        }
        else
        {
          v151 = v1718.i64[0];
          v152 = ***(int32x2_t ****)v1718.i64[0];
          v153 = (unint64_t)v152[303];
          if (v153 <= v150)
          {
            v154 = v152[305].u32[0];
            if (v153 + 16 * v154 > v150)
            {
              v155 = v154 - 1;
              LODWORD(v156) = v155 & (((unsigned __int32)v1718.i32[0] >> 4) ^ ((unsigned __int32)v1718.i32[0] >> 9));
              v157 = (uint64_t *)(v153 + 16 * v156);
              v158 = *v157;
              if (v1718.i64[0] == *v157)
              {
LABEL_221:
                *v157 = -8192;
                v152[304] = vadd_s32(v152[304], (int32x2_t)0x1FFFFFFFFLL);
                v151 = v1718.i64[0];
              }
              else
              {
                v159 = 1;
                while (v158 != -4096)
                {
                  v160 = v156 + v159++;
                  v156 = v160 & v155;
                  v158 = *(_QWORD *)(v153 + 16 * v156);
                  if (v1718.i64[0] == v158)
                  {
                    v157 = (uint64_t *)(v153 + 16 * v156);
                    goto LABEL_221;
                  }
                }
              }
              *(_BYTE *)(v151 + 17) &= ~1u;
            }
          }
        }
      }
      v161 = (_QWORD *)v149[7];
      if (v161 != __s1)
      {
        if (v161 && v161 != (_QWORD *)-8192 && v161 != (_QWORD *)-4096)
        {
          v438 = v149[5] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v438 = v149[6];
          v439 = (unint64_t *)v149[6];
          if (v439)
          {
            *v439 = *v439 & 7 | v438;
          }
          else
          {
            v440 = v149[7];
            v441 = ***(int32x2_t ****)v440;
            v442 = (unint64_t)v441[303];
            if (v442 <= v438)
            {
              v443 = v441[305].u32[0];
              if (v442 + 16 * v443 > v438)
              {
                v444 = v443 - 1;
                LODWORD(v445) = v444 & ((v440 >> 4) ^ (v440 >> 9));
                v446 = (uint64_t *)(v442 + 16 * v445);
                v447 = *v446;
                if (v440 == *v446)
                {
LABEL_681:
                  *v446 = -8192;
                  v441[304] = vadd_s32(v441[304], (int32x2_t)0x1FFFFFFFFLL);
                  v440 = v149[7];
                }
                else
                {
                  v448 = 1;
                  while (v447 != -4096)
                  {
                    v449 = v445 + v448++;
                    v445 = v449 & v444;
                    v447 = *(_QWORD *)(v442 + 16 * v445);
                    if (v440 == v447)
                    {
                      v446 = (uint64_t *)(v442 + 16 * v445);
                      goto LABEL_681;
                    }
                  }
                }
                *(_BYTE *)(v440 + 17) &= ~1u;
              }
            }
          }
        }
        v149[7] = __s1;
        if (__s1 != (_QWORD *)-8192 && __s1 != (_QWORD *)-4096 && __s1)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v149 + 5));
      }
      v162 = *(uint64_t **)(a1 + 32);
      for (k = *(uint64_t **)(a1 + 40); v162 != k; ++v162)
      {
        v164 = *v162;
        v165 = sub_1C63270F0((uint64_t)&v1708, *v162);
        v166 = &v1709;
        if ((v1708 & 1) != 0)
        {
          v167 = 16;
        }
        else
        {
          v166 = v1709;
          v167 = v1710;
        }
        if (&v166[2 * v167] == (_QWORD *)v165 || *(void **)(v165 + 8) == v1651)
        {
          v1716 = ".us";
          v1718.i16[4] = 259;
          v168 = llvm::CloneBasicBlock((uint64_t ***)v164, v146, (uint64_t)&v1716, *(_QWORD *)(v164 + 56), 0, 0);
          sub_1C4FCEAA0(*(_QWORD *)(v1659 + 56) + 72, v1647, *(_QWORD *)(v168 + 56) + 72, (uint64_t *)(v168 + 24));
          v169 = v1749;
          if (v1749 >= (unint64_t)HIDWORD(v1749))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1748, (uint64_t)&v1750, v1749 + 1, 8);
            v169 = v1749;
          }
          *((_QWORD *)v1748 + v169) = v168;
          LODWORD(v1749) = (_DWORD)v1749 + 1;
          __b = (int64x2_t)2uLL;
          v1718.i64[0] = v164;
          if (v164 != -8192 && v164 != -4096 && v164)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&__b);
          v1716 = &unk_1E814DA10;
          v1718.i64[1] = v146;
          v170 = sub_1C52E2ED8(v146, &v1716);
          if (v1718.i64[0] != -8192 && v1718.i64[0] != -4096 && v1718.i64[0])
          {
            v171 = __b.i64[0] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(__b.i64[0] & 0xFFFFFFFFFFFFFFF8) = __b.i64[1];
            if (__b.i64[1])
            {
              *(_QWORD *)__b.i64[1] = *(_QWORD *)__b.i64[1] & 7 | v171;
            }
            else
            {
              v172 = v1718.i64[0];
              v173 = ***(int32x2_t ****)v1718.i64[0];
              v174 = (unint64_t)v173[303];
              if (v174 <= v171)
              {
                v175 = v173[305].u32[0];
                if (v174 + 16 * v175 > v171)
                {
                  v176 = v175 - 1;
                  LODWORD(v177) = v176 & (((unsigned __int32)v1718.i32[0] >> 4) ^ ((unsigned __int32)v1718.i32[0] >> 9));
                  v178 = (uint64_t *)(v174 + 16 * v177);
                  v179 = *v178;
                  if (v1718.i64[0] == *v178)
                  {
LABEL_253:
                    *v178 = -8192;
                    v173[304] = vadd_s32(v173[304], (int32x2_t)0x1FFFFFFFFLL);
                    v172 = v1718.i64[0];
                  }
                  else
                  {
                    v180 = 1;
                    while (v179 != -4096)
                    {
                      v181 = v177 + v180++;
                      v177 = v181 & v176;
                      v179 = *(_QWORD *)(v174 + 16 * v177);
                      if (v1718.i64[0] == v179)
                      {
                        v178 = (uint64_t *)(v174 + 16 * v177);
                        goto LABEL_253;
                      }
                    }
                  }
                  *(_BYTE *)(v172 + 17) &= ~1u;
                }
              }
            }
          }
          v182 = v170[7];
          if (v182 != v168)
          {
            if (v182 && v182 != -8192 && v182 != -4096)
            {
              v183 = v170[5] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v183 = v170[6];
              v184 = (unint64_t *)v170[6];
              if (v184)
              {
                *v184 = *v184 & 7 | v183;
              }
              else
              {
                v185 = v170[7];
                v186 = ***(int32x2_t ****)v185;
                v187 = (unint64_t)v186[303];
                if (v187 <= v183)
                {
                  v188 = v186[305].u32[0];
                  if (v187 + 16 * v188 > v183)
                  {
                    v189 = v188 - 1;
                    LODWORD(v190) = v189 & ((v185 >> 4) ^ (v185 >> 9));
                    v191 = (uint64_t *)(v187 + 16 * v190);
                    v192 = *v191;
                    if (v185 == *v191)
                    {
LABEL_274:
                      *v191 = -8192;
                      v186[304] = vadd_s32(v186[304], (int32x2_t)0x1FFFFFFFFLL);
                      v185 = v170[7];
                    }
                    else
                    {
                      v193 = 1;
                      while (v192 != -4096)
                      {
                        v194 = v190 + v193++;
                        v190 = v194 & v189;
                        v192 = *(_QWORD *)(v187 + 16 * v190);
                        if (v185 == v192)
                        {
                          v191 = (uint64_t *)(v187 + 16 * v190);
                          goto LABEL_274;
                        }
                      }
                    }
                    *(_BYTE *)(v185 + 17) &= ~1u;
                  }
                }
              }
            }
            v170[7] = v168;
            if (v168 != -8192 && v168 != -4096 && v168)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v170 + 5));
          }
        }
      }
      v1662 = v146;
      if ((_DWORD)v145)
      {
        v1645 = &v144[v145];
        while (1)
        {
          v1649 = v144;
          v1675 = (llvm *)*v144;
          v195 = sub_1C63270F0((uint64_t)&v1708, *v144);
          v196 = &v1709;
          if ((v1708 & 1) != 0)
          {
            v197 = 16;
          }
          else
          {
            v196 = v1709;
            v197 = v1710;
          }
          if (&v196[2 * v197] == (_QWORD *)v195 || *(void **)(v195 + 8) == v1651)
            break;
LABEL_353:
          v144 = v1649 + 1;
          if (v1649 + 1 == v1645)
            goto LABEL_369;
        }
        v198 = *((_QWORD *)v1675 + 6);
        if (v198)
          v199 = (llvm::BasicBlock *)(v198 - 24);
        else
          v199 = 0;
        v1718.i16[4] = 257;
        v200 = (llvm::Value *)sub_1C5EBD70C(v1675, v199, 0, a7, (llvm::DomTreeUpdater *)a8, a13, (llvm::Twine *)&v1716, 0);
        llvm::Value::takeName(v200, v1675);
        if ((*((_BYTE *)v200 + 23) & 0x10) == 0)
        {
          v210 = 0;
          v211 = &byte_1C871356D;
          goto LABEL_296;
        }
        v201 = ***(_QWORD ***)v200;
        v202 = *(_QWORD *)(v201 + 152);
        v203 = *(unsigned int *)(v201 + 168);
        if ((_DWORD)v203)
        {
          LODWORD(v204) = (v203 - 1) & ((v200 >> 4) ^ (v200 >> 9));
          v205 = (llvm::Value **)(v202 + 16 * v204);
          v206 = *v205;
          if (*v205 == v200)
          {
LABEL_295:
            v209 = v205[1];
            v212 = *(_QWORD *)v209;
            v211 = (char *)v209 + 16;
            v210 = v212;
LABEL_296:
            v1716 = v211;
            __b.i64[0] = v210;
            __b.i64[1] = (uint64_t)".split";
            v1718.i16[4] = 773;
            llvm::Value::setName((uint64_t ***)v1675, (uint64_t)&v1716);
            v1716 = ".us";
            v1718.i16[4] = 259;
            v1672 = (llvm::Value *)llvm::CloneBasicBlock((uint64_t ***)v1675, v146, (uint64_t)&v1716, *((_QWORD *)v1675 + 7), 0, 0);
            sub_1C4FCEAA0(*(_QWORD *)(v1659 + 56) + 72, v1647, *((_QWORD *)v1672 + 7) + 72, (uint64_t *)v1672 + 3);
            v213 = v1749;
            if (v1749 >= (unint64_t)HIDWORD(v1749))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1748, (uint64_t)&v1750, v1749 + 1, 8);
              v213 = v1749;
            }
            *((_QWORD *)v1748 + v213) = v1672;
            LODWORD(v1749) = (_DWORD)v1749 + 1;
            __b = (int64x2_t)2uLL;
            v1718.i64[0] = (uint64_t)v1675;
            if (v1675 != (llvm *)-8192 && v1675 != (llvm *)-4096 && v1675)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&__b);
            v1716 = &unk_1E814DA10;
            v1718.i64[1] = v146;
            v214 = sub_1C52E2ED8(v146, &v1716);
            if (v1718.i64[0] != -8192 && v1718.i64[0] != -4096 && v1718.i64[0])
            {
              v215 = __b.i64[0] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)(__b.i64[0] & 0xFFFFFFFFFFFFFFF8) = __b.i64[1];
              if (__b.i64[1])
              {
                *(_QWORD *)__b.i64[1] = *(_QWORD *)__b.i64[1] & 7 | v215;
              }
              else
              {
                v216 = v1718.i64[0];
                v217 = ***(int32x2_t ****)v1718.i64[0];
                v218 = (unint64_t)v217[303];
                if (v218 <= v215)
                {
                  v219 = v217[305].u32[0];
                  if (v218 + 16 * v219 > v215)
                  {
                    v220 = v219 - 1;
                    LODWORD(v221) = v220 & (((unsigned __int32)v1718.i32[0] >> 4) ^ ((unsigned __int32)v1718.i32[0] >> 9));
                    v222 = (uint64_t *)(v218 + 16 * v221);
                    v223 = *v222;
                    if (v1718.i64[0] == *v222)
                    {
LABEL_313:
                      *v222 = -8192;
                      v217[304] = vadd_s32(v217[304], (int32x2_t)0x1FFFFFFFFLL);
                      v216 = v1718.i64[0];
                    }
                    else
                    {
                      v224 = 1;
                      while (v223 != -4096)
                      {
                        v225 = v221 + v224++;
                        v221 = v225 & v220;
                        v223 = *(_QWORD *)(v218 + 16 * v221);
                        if (v1718.i64[0] == v223)
                        {
                          v222 = (uint64_t *)(v218 + 16 * v221);
                          goto LABEL_313;
                        }
                      }
                    }
                    *(_BYTE *)(v216 + 17) &= ~1u;
                  }
                }
              }
            }
            v226 = (llvm::Value *)v214[7];
            if (v226 != v1672)
            {
              if (v226 && v226 != (llvm::Value *)-8192 && v226 != (llvm::Value *)-4096)
              {
                v251 = v214[5] & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v251 = v214[6];
                v252 = (unint64_t *)v214[6];
                if (v252)
                {
                  *v252 = *v252 & 7 | v251;
                }
                else
                {
                  v253 = v214[7];
                  v254 = ***(int32x2_t ****)v253;
                  v255 = (unint64_t)v254[303];
                  if (v255 <= v251)
                  {
                    v256 = v254[305].u32[0];
                    if (v255 + 16 * v256 > v251)
                    {
                      v257 = v256 - 1;
                      LODWORD(v258) = v257 & ((v253 >> 4) ^ (v253 >> 9));
                      v259 = (uint64_t *)(v255 + 16 * v258);
                      v260 = *v259;
                      if (v253 == *v259)
                      {
LABEL_365:
                        *v259 = -8192;
                        v254[304] = vadd_s32(v254[304], (int32x2_t)0x1FFFFFFFFLL);
                        v253 = v214[7];
                      }
                      else
                      {
                        v261 = 1;
                        while (v260 != -4096)
                        {
                          v262 = v258 + v261++;
                          v258 = v262 & v257;
                          v260 = *(_QWORD *)(v255 + 16 * v258);
                          if (v253 == v260)
                          {
                            v259 = (uint64_t *)(v255 + 16 * v258);
                            goto LABEL_365;
                          }
                        }
                      }
                      *(_BYTE *)(v253 + 17) &= ~1u;
                    }
                  }
                }
              }
              v214[7] = v1672;
              if (v1672 != (llvm::Value *)-8192 && v1672 != (llvm::Value *)-4096 && v1672)
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v214 + 5));
            }
            v227 = *((_QWORD *)v1675 + 6);
            v1668 = *((_QWORD *)v1675 + 5);
            if (v227 != v1668)
            {
              v228 = (uint64_t *)((char *)v1672 + 48);
              v229 = (uint64_t *)((char *)v200 + 40);
              do
              {
                v230 = *v228;
                if (v227)
                  v231 = (llvm::ValueAsMetadata *)(v227 - 24);
                else
                  v231 = 0;
                if (v230)
                  v232 = v230 - 24;
                else
                  v232 = 0;
                v233 = *(_QWORD *)v231;
                v1716 = ".us-phi";
                v1718.i16[4] = 259;
                v234 = v229;
                if (*((uint64_t **)v200 + 6) != v229)
                {
                  v234 = (uint64_t *)*((_QWORD *)v200 + 6);
                  while (1)
                  {
                    v235 = v234 - 3;
                    if (!v234)
                      v235 = 0;
                    if (*((_BYTE *)v235 + 16) != 83)
                      break;
                    v234 = (uint64_t *)v234[1];
                    if (v234 == v229)
                    {
                      v234 = v229;
                      goto LABEL_342;
                    }
                  }
                  v236 = *((unsigned __int8 *)v234 - 8) - 38;
                  v105 = v236 > 0x38;
                  v237 = (1 << v236) & 0x100060000000001;
                  if (!v105 && v237 != 0)
                    v234 = (uint64_t *)v234[1];
                }
LABEL_342:
                v239 = v200;
                v240 = operator new(0x48uLL);
                v241 = v240;
                v240[1] = v233;
                v242 = (llvm::Value *)(v240 + 1);
                *v240 = 0;
                v240[2] = 0;
                v240[3] = 0x4000000000000053;
                *((_OWORD *)v240 + 2) = 0u;
                v243 = (char *)(v240 + 4);
                *((_OWORD *)v240 + 3) = 0u;
                *((_DWORD *)v240 + 16) = 0;
                if (v234)
                {
                  v247 = v234[2];
                  v240[6] = v247;
                  *(_WORD *)(v247 + 18) &= ~0x8000u;
                  if ((*((_BYTE *)v240 + 31) & 0x10) != 0)
                  {
                    v249 = *(_QWORD *)(v247 + 56);
                    if (v249)
                    {
                      v250 = *(llvm::ValueSymbolTable **)(v249 + 104);
                      if (v250)
                        llvm::ValueSymbolTable::reinsertValue(v250, v242);
                    }
                  }
                  v248 = *v234;
                  v241[4] = *v234;
                  v241[5] = v234;
                  *(_QWORD *)(v248 + 8) = v243;
                  *v234 = (uint64_t)v243;
                }
                *((_DWORD *)v241 + 17) = 2;
                llvm::Value::setName((uint64_t ***)v242, (uint64_t)&v1716);
                v244 = *((unsigned int *)v241 + 17);
                v245 = operator new(40 * v244);
                *v241 = v245;
                if ((_DWORD)v244)
                {
                  v246 = &v245[4 * v244];
                  do
                  {
                    *v245 = 0;
                    v245[1] = 0;
                    v245[2] = 0;
                    v245[3] = v242;
                    v245 += 4;
                  }
                  while (v245 != v246);
                }
                llvm::Value::doRAUW(v231, v242, (llvm::Value *)1);
                sub_1C477667C(v242, (uint64_t)v231, (uint64_t)v1675);
                sub_1C477667C(v242, v232, (uint64_t)v1672);
                v227 = *(_QWORD *)(v227 + 8);
                v228 = (uint64_t *)(v230 + 8);
                v200 = v239;
                v146 = v1662;
              }
              while (v227 != v1668);
            }
            goto LABEL_353;
          }
          v207 = 1;
          while (v206 != (llvm::Value *)-4096)
          {
            v208 = v204 + v207++;
            v204 = v208 & (v203 - 1);
            v206 = *(llvm::Value **)(v202 + 16 * v204);
            if (v206 == v200)
            {
              v205 = (llvm::Value **)(v202 + 16 * v204);
              goto LABEL_295;
            }
          }
        }
        v205 = (llvm::Value **)(v202 + 16 * v203);
        goto LABEL_295;
      }
LABEL_369:
      v77 = (uint64_t)a9;
      if ((_DWORD)v1749)
      {
        v263 = (char *)v1748;
        v264 = (char *)v1748 + 8 * v1749;
        do
        {
          v265 = *(_QWORD *)v263 + 40;
          for (m = *(_QWORD *)(*(_QWORD *)v263 + 48); m != v265; m = *(_QWORD *)(m + 8))
          {
            if (m)
              v267 = (uint64_t ***)(m - 24);
            else
              v267 = 0;
            v268 = operator new();
            *(_DWORD *)v268 = 3;
            *(_QWORD *)(v268 + 8) = 0;
            *(_DWORD *)(v268 + 16) = 0;
            *(_QWORD *)(v268 + 40) = v146;
            *(_QWORD *)(v268 + 24) = v268 + 40;
            *(_QWORD *)(v268 + 48) = 0;
            *(_QWORD *)(v268 + 32) = 0x200000001;
            *(_QWORD *)(v268 + 72) = v268 + 88;
            *(_QWORD *)(v268 + 80) = 0x400000000;
            *(_QWORD *)(v268 + 184) = v268 + 200;
            *(_QWORD *)(v268 + 192) = 0x100000000;
            *(_QWORD *)(v268 + 216) = v268 + 232;
            *(_QWORD *)(v268 + 224) = 0x1000000000;
            v1756 = v268;
            v1716 = (void *)v268;
            sub_1C5FD706C(v268, v267);
            sub_1C5FD3718((uint64_t *)&v1716, v269);
            llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v1756, v270);
            v271 = sub_1C4D9F8B4((uint64_t)v267);
            if (m && v271)
              llvm::AssumptionCache::registerAssumption(a9, (uint64_t)v267);
          }
          v263 += 8;
        }
        while (v263 != v264);
      }
      v272 = *(uint64_t **)(a1 + 32);
      v1676 = *(uint64_t **)(a1 + 40);
      if (v1676 != v272)
      {
        while (1)
        {
          v273 = *v272;
          v274 = sub_1C63270F0((uint64_t)&v1708, *v272);
          v275 = &v1709;
          if ((v1708 & 1) != 0)
          {
            v276 = 16;
          }
          else
          {
            v275 = v1709;
            v276 = v1710;
          }
          if (&v275[2 * v276] != (_QWORD *)v274 && *(void **)(v274 + 8) != v1651)
          {
            v277 = *(_QWORD *)(v273 + 40);
            if (v277 != v273 + 40)
              break;
          }
LABEL_451:
          if (++v272 == v1676)
            goto LABEL_460;
        }
        if (v277)
          v278 = v277 - 24;
        else
          v278 = 0;
        v279 = *(unsigned __int8 *)(v278 + 16);
        v280 = v279 - 29;
        if (v279 != 30)
        {
          v281 = 2;
          switch(v280)
          {
            case 1:
              goto LABEL_2550;
            case 2:
              v281 = (*(_DWORD *)(v278 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_454;
            case 3:
            case 9:
              v281 = (*(_DWORD *)(v278 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_454;
            case 4:
              goto LABEL_395;
            case 7:
              v281 = *(_WORD *)(v278 + 18) & 1;
              goto LABEL_454;
            case 8:
              v281 = 1;
              goto LABEL_395;
            case 10:
              v281 = *(_DWORD *)(v278 + 80) + 1;
LABEL_454:
              if (!v281)
                goto LABEL_451;
              goto LABEL_395;
            default:
              goto LABEL_451;
          }
        }
        if ((*(_DWORD *)(v278 + 20) & 0x7FFFFFF) == 3)
          v281 = 2;
        else
          v281 = 1;
LABEL_395:
        v282 = 0;
        v283 = v281;
        while (1)
        {
          v284 = *(unsigned __int8 *)(v278 + 16);
          if (v284 != 30)
            __asm { BR              X9 }
          v285 = *(_QWORD *)(v278 - 32 - 32 * v282);
          v286 = *(_QWORD *)v146;
          v287 = *(unsigned int *)(v146 + 16);
          if (!(_DWORD)v287)
            goto LABEL_403;
          v288 = ((_DWORD)v287 - 1) & ((v285 >> 4) ^ (v285 >> 9));
          v289 = (_QWORD *)(v286 + (v288 << 6));
          v290 = v289[3];
          if (v285 != v290)
            break;
LABEL_404:
          v1716 = (void *)6;
          if (v289 == (_QWORD *)(v286 + (v287 << 6)))
          {
            v293 = 0;
            v294 = 0;
            __b = 0uLL;
          }
          else
          {
            v293 = 0;
            v294 = v289[7];
            __b.i64[0] = 0;
            __b.i64[1] = v294;
            if (v294 != -8192 && v294 != -4096 && v294 != 0)
            {
              v296 = v289[5] & 0xFFFFFFFFFFFFFFF8;
              __b.i64[0] = *(_QWORD *)v296;
              *(_QWORD *)v296 = &v1716;
              v1716 = (void *)(v296 | 6);
              v293 = __b.i64[0];
              if (__b.i64[0])
                *(_QWORD *)__b.i64[0] = *(_QWORD *)__b.i64[0] & 7 | (unint64_t)&__b;
              v294 = __b.i64[1];
            }
          }
          if (v294 != -8192 && v294 != -4096 && v294 != 0)
          {
            v305 = (unint64_t)v1716 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)((unint64_t)v1716 & 0xFFFFFFFFFFFFFFF8) = v293;
            if (__b.i64[0])
            {
              *(_QWORD *)__b.i64[0] = *(_QWORD *)__b.i64[0] & 7 | v305;
            }
            else
            {
              v306 = __b.i64[1];
              v307 = ***(int32x2_t ****)__b.i64[1];
              v308 = (unint64_t)v307[303];
              if (v308 <= v305)
              {
                v309 = v307[305].u32[0];
                if (v308 + 16 * v309 > v305)
                {
                  v310 = v309 - 1;
                  LODWORD(v311) = v310 & (((unsigned __int32)__b.i32[2] >> 4) ^ ((unsigned __int32)__b.i32[2] >> 9));
                  v312 = (uint64_t *)(v308 + 16 * v311);
                  v313 = *v312;
                  if (__b.i64[1] == *v312)
                  {
LABEL_446:
                    *v312 = -8192;
                    v307[304] = vadd_s32(v307[304], (int32x2_t)0x1FFFFFFFFLL);
                    v306 = __b.i64[1];
                  }
                  else
                  {
                    v314 = 1;
                    while (v313 != -4096)
                    {
                      v315 = v311 + v314++;
                      v311 = v315 & v310;
                      v313 = *(_QWORD *)(v308 + 16 * v311);
                      if (__b.i64[1] == v313)
                      {
                        v312 = (uint64_t *)(v308 + 16 * v311);
                        goto LABEL_446;
                      }
                    }
                  }
                  *(_BYTE *)(v306 + 17) &= ~1u;
                }
              }
            }
          }
          if (v294 && *(_QWORD *)(v294 + 40) != v294 + 40)
          {
            for (n = *(_QWORD *)(v294 + 48); ; n = *(_QWORD *)(v299 + 32))
            {
              v299 = n - 24;
              v300 = n ? n - 24 : 0;
              if (!n || *(_BYTE *)(v300 + 16) != 83)
                break;
              v301 = *(_DWORD *)(n - 4);
              v302 = v301 & 0x7FFFFFF;
              if ((v301 & 0x7FFFFFF) != 0)
              {
                v303 = 0;
                while (1)
                {
                  v304 = v299 - 32 * v302;
                  if ((v301 & 0x40000000) != 0)
                    v304 = *(_QWORD *)(v299 - 8);
                  if (*(_QWORD *)(v304 + 32 * *(unsigned int *)(v299 + 60) + 8 * v303) == v273)
                    break;
                  if (v302 == ++v303)
                    goto LABEL_434;
                }
              }
              else
              {
LABEL_434:
                LODWORD(v303) = -1;
              }
              llvm::PHINode::removeIncomingValue((llvm::PHINode *)v299, v303, 0);
            }
          }
          if (++v282 == v283)
            goto LABEL_451;
        }
        v291 = 1;
        while (v290 != -4096)
        {
          v292 = v288 + v291++;
          v288 = v292 & (v287 - 1);
          v289 = (_QWORD *)(v286 + (v288 << 6));
          v290 = v289[3];
          if (v285 == v290)
            goto LABEL_404;
        }
LABEL_403:
        v289 = (_QWORD *)(v286 + (v287 << 6));
        goto LABEL_404;
      }
LABEL_460:
      v316 = *(_QWORD *)v146;
      v317 = *(unsigned int *)(v146 + 16);
      if ((_DWORD)v317)
      {
        v318 = ((_DWORD)v317 - 1) & ((v1643 >> 4) ^ (v1643 >> 9));
        v319 = (_QWORD *)(v316 + (v318 << 6));
        v320 = (llvm::BasicBlock *)v319[3];
        if (v1643 == v320)
          goto LABEL_467;
        v321 = 1;
        while (v320 != (llvm::BasicBlock *)-4096)
        {
          v322 = v318 + v321++;
          v318 = v322 & (v317 - 1);
          v319 = (_QWORD *)(v316 + (v318 << 6));
          v320 = (llvm::BasicBlock *)v319[3];
          if (v1643 == v320)
            goto LABEL_467;
        }
      }
      v319 = (_QWORD *)(v316 + (v317 << 6));
LABEL_467:
      v1716 = (void *)6;
      if (v319 == (_QWORD *)(v316 + (v317 << 6)))
      {
        v323 = 0;
        v324 = 0;
        __b = 0uLL;
      }
      else
      {
        v323 = 0;
        v324 = (llvm::BasicBlock *)v319[7];
        __b.i64[0] = 0;
        __b.i64[1] = (uint64_t)v324;
        if (v324 != (llvm::BasicBlock *)-8192 && v324 != (llvm::BasicBlock *)-4096 && v324 != 0)
        {
          v326 = v319[5] & 0xFFFFFFFFFFFFFFF8;
          __b.i64[0] = *(_QWORD *)v326;
          *(_QWORD *)v326 = &v1716;
          v1716 = (void *)(v326 | 6);
          v323 = __b.i64[0];
          if (__b.i64[0])
            *(_QWORD *)__b.i64[0] = *(_QWORD *)__b.i64[0] & 7 | (unint64_t)&__b;
          v324 = (llvm::BasicBlock *)__b.i64[1];
        }
      }
      if (v324 != (llvm::BasicBlock *)-8192 && v324 != (llvm::BasicBlock *)-4096 && v324 != 0)
      {
        v360 = (unint64_t)v1716 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)((unint64_t)v1716 & 0xFFFFFFFFFFFFFFF8) = v323;
        if (__b.i64[0])
        {
          *(_QWORD *)__b.i64[0] = *(_QWORD *)__b.i64[0] & 7 | v360;
        }
        else
        {
          v361 = __b.i64[1];
          v362 = ***(int32x2_t ****)__b.i64[1];
          v363 = (unint64_t)v362[303];
          if (v363 <= v360)
          {
            v364 = v362[305].u32[0];
            if (v363 + 16 * v364 > v360)
            {
              v365 = v364 - 1;
              LODWORD(v366) = v365 & (((unsigned __int32)__b.i32[2] >> 4) ^ ((unsigned __int32)__b.i32[2] >> 9));
              v367 = (uint64_t *)(v363 + 16 * v366);
              v368 = *v367;
              if (__b.i64[1] == *v367)
              {
LABEL_541:
                *v367 = -8192;
                v362[304] = vadd_s32(v362[304], (int32x2_t)0x1FFFFFFFFLL);
                v361 = __b.i64[1];
              }
              else
              {
                v369 = 1;
                while (v368 != -4096)
                {
                  v370 = v366 + v369++;
                  v366 = v370 & v365;
                  v368 = *(_QWORD *)(v363 + 16 * v366);
                  if (__b.i64[1] == v368)
                  {
                    v367 = (uint64_t *)(v363 + 16 * v366);
                    goto LABEL_541;
                  }
                }
              }
              *(_BYTE *)(v361 + 17) &= ~1u;
            }
          }
        }
      }
      v328 = (_QWORD *)*v1638;
      if ((_QWORD *)*v1638 != v1638)
      {
        if (v328)
          v329 = v328 - 3;
        else
          v329 = 0;
        v330 = *((unsigned __int8 *)v329 + 16);
        v331 = v330 - 29;
        if (v330 != 30)
        {
          v332 = 2;
          switch(v331)
          {
            case 1:
              goto LABEL_2550;
            case 2:
              v332 = (*((_DWORD *)v329 + 5) >> 1) & 0x3FFFFFF;
              goto LABEL_684;
            case 3:
            case 9:
              v332 = (*((_DWORD *)v329 + 5) & 0x7FFFFFF) - 1;
              goto LABEL_684;
            case 4:
              goto LABEL_491;
            case 7:
              v332 = *((_WORD *)v329 + 9) & 1;
              goto LABEL_684;
            case 8:
              v332 = 1;
              goto LABEL_491;
            case 10:
              v332 = *((_DWORD *)v329 + 20) + 1;
LABEL_684:
              if (!v332)
                goto LABEL_545;
              goto LABEL_491;
            default:
              goto LABEL_545;
          }
        }
        if ((*((_DWORD *)v329 + 5) & 0x7FFFFFF) == 3)
          v332 = 2;
        else
          v332 = 1;
LABEL_491:
        v333 = 0;
        v334 = v332;
        while (1)
        {
          v335 = *((unsigned __int8 *)v329 + 16);
          if (v335 != 30)
            __asm { BR              X9 }
          v336 = (void *)v329[-4 * v333 - 4];
          if (v336 != v1651)
            break;
LABEL_520:
          if (++v333 == v334)
            goto LABEL_545;
        }
        v337 = *(_QWORD *)v146;
        v338 = *(unsigned int *)(v146 + 16);
        if ((_DWORD)v338)
        {
          v339 = ((_DWORD)v338 - 1) & ((v336 >> 4) ^ (v336 >> 9));
          v340 = (_QWORD *)(v337 + (v339 << 6));
          v341 = (void *)v340[3];
          if (v336 != v341)
          {
            v342 = 1;
            while (v341 != (void *)-4096)
            {
              v343 = v339 + v342++;
              v339 = v343 & (v338 - 1);
              v340 = (_QWORD *)(v337 + (v339 << 6));
              v341 = (void *)v340[3];
              if (v336 == v341)
                goto LABEL_502;
            }
            goto LABEL_501;
          }
        }
        else
        {
LABEL_501:
          v340 = (_QWORD *)(v337 + (v338 << 6));
        }
LABEL_502:
        v1716 = (void *)6;
        if (v340 == (_QWORD *)(v337 + (v338 << 6)))
        {
          v344 = 0;
          v345 = 0;
          __b = 0uLL;
        }
        else
        {
          v344 = 0;
          v345 = (llvm::BasicBlock *)v340[7];
          __b.i64[0] = 0;
          __b.i64[1] = (uint64_t)v345;
          if (v345 != (llvm::BasicBlock *)-8192 && v345 != (llvm::BasicBlock *)-4096 && v345 != 0)
          {
            v347 = v340[5] & 0xFFFFFFFFFFFFFFF8;
            __b.i64[0] = *(_QWORD *)v347;
            *(_QWORD *)v347 = &v1716;
            v1716 = (void *)(v347 | 6);
            v344 = __b.i64[0];
            if (__b.i64[0])
              *(_QWORD *)__b.i64[0] = *(_QWORD *)__b.i64[0] & 7 | (unint64_t)&__b;
            v345 = (llvm::BasicBlock *)__b.i64[1];
          }
        }
        if (v345 != (llvm::BasicBlock *)-8192 && v345 != (llvm::BasicBlock *)-4096 && v345 != 0)
        {
          v349 = (unint64_t)v1716 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)((unint64_t)v1716 & 0xFFFFFFFFFFFFFFF8) = v344;
          if (__b.i64[0])
          {
            *(_QWORD *)__b.i64[0] = *(_QWORD *)__b.i64[0] & 7 | v349;
          }
          else
          {
            v350 = __b.i64[1];
            v351 = ***(int32x2_t ****)__b.i64[1];
            v352 = (unint64_t)v351[303];
            if (v352 <= v349)
            {
              v353 = v351[305].u32[0];
              if (v352 + 16 * v353 > v349)
              {
                v354 = v353 - 1;
                LODWORD(v355) = v354 & (((unsigned __int32)__b.i32[2] >> 4) ^ ((unsigned __int32)__b.i32[2] >> 9));
                v356 = (uint64_t *)(v352 + 16 * v355);
                v357 = *v356;
                if (__b.i64[1] == *v356)
                {
LABEL_530:
                  *v356 = -8192;
                  v351[304] = vadd_s32(v351[304], (int32x2_t)0x1FFFFFFFFLL);
                  v350 = __b.i64[1];
                }
                else
                {
                  v358 = 1;
                  while (v357 != -4096)
                  {
                    v359 = v355 + v358++;
                    v355 = v359 & v354;
                    v357 = *(_QWORD *)(v352 + 16 * v355);
                    if (__b.i64[1] == v357)
                    {
                      v356 = (uint64_t *)(v352 + 16 * v355);
                      goto LABEL_530;
                    }
                  }
                }
                *(_BYTE *)(v350 + 17) &= ~1u;
              }
            }
          }
        }
        if (v345)
          llvm::BasicBlock::removePredecessor(v345, v324, 1);
        goto LABEL_520;
      }
LABEL_545:
      v371 = *(_QWORD *)v146;
      v372 = *(unsigned int *)(v146 + 16);
      if ((_DWORD)v372)
      {
        v373 = ((_DWORD)v372 - 1) & ((v1651 >> 4) ^ (v1651 >> 9));
        v374 = (_QWORD *)(v371 + (v373 << 6));
        v375 = (void *)v374[3];
        if (v1651 == v375)
          goto LABEL_552;
        v376 = 1;
        while (v375 != (void *)-4096)
        {
          v377 = v373 + v376++;
          v373 = v377 & (v372 - 1);
          v374 = (_QWORD *)(v371 + (v373 << 6));
          v375 = (void *)v374[3];
          if (v1651 == v375)
            goto LABEL_552;
        }
      }
      v374 = (_QWORD *)(v371 + (v372 << 6));
LABEL_552:
      v1716 = (void *)6;
      if (v374 == (_QWORD *)(v371 + (v372 << 6)))
      {
        v378 = 0;
        v379 = 0;
        __b = 0uLL;
      }
      else
      {
        v378 = 0;
        v379 = (llvm::BasicBlock *)v374[7];
        __b.i64[0] = 0;
        __b.i64[1] = (uint64_t)v379;
        if (v379 != (llvm::BasicBlock *)-8192 && v379 != (llvm::BasicBlock *)-4096 && v379 != 0)
        {
          v381 = v374[5] & 0xFFFFFFFFFFFFFFF8;
          __b.i64[0] = *(_QWORD *)v381;
          *(_QWORD *)v381 = &v1716;
          v1716 = (void *)(v381 | 6);
          v378 = __b.i64[0];
          if (__b.i64[0])
            *(_QWORD *)__b.i64[0] = *(_QWORD *)__b.i64[0] & 7 | (unint64_t)&__b;
          v379 = (llvm::BasicBlock *)__b.i64[1];
        }
      }
      if (v379 != (llvm::BasicBlock *)-8192 && v379 != (llvm::BasicBlock *)-4096 && v379 != 0)
      {
        v397 = (unint64_t)v1716 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)((unint64_t)v1716 & 0xFFFFFFFFFFFFFFF8) = v378;
        if (__b.i64[0])
        {
          *(_QWORD *)__b.i64[0] = *(_QWORD *)__b.i64[0] & 7 | v397;
        }
        else
        {
          v398 = __b.i64[1];
          v399 = ***(int32x2_t ****)__b.i64[1];
          v400 = (unint64_t)v399[303];
          if (v400 <= v397)
          {
            v401 = v399[305].u32[0];
            if (v400 + 16 * v401 > v397)
            {
              v402 = v401 - 1;
              LODWORD(v403) = v402 & (((unsigned __int32)__b.i32[2] >> 4) ^ ((unsigned __int32)__b.i32[2] >> 9));
              v404 = (uint64_t *)(v400 + 16 * v403);
              v405 = *v404;
              if (__b.i64[1] == *v404)
              {
LABEL_598:
                *v404 = -8192;
                v399[304] = vadd_s32(v399[304], (int32x2_t)0x1FFFFFFFFLL);
                v398 = __b.i64[1];
              }
              else
              {
                v406 = 1;
                while (v405 != -4096)
                {
                  v407 = v403 + v406++;
                  v403 = v407 & v402;
                  v405 = *(_QWORD *)(v400 + 16 * v403);
                  if (__b.i64[1] == v405)
                  {
                    v404 = (uint64_t *)(v400 + 16 * v403);
                    goto LABEL_598;
                  }
                }
              }
              *(_BYTE *)(v398 + 17) &= ~1u;
            }
          }
        }
      }
      v383 = (_QWORD *)*((_QWORD *)v324 + 5);
      if (v383 == (_QWORD *)((char *)v324 + 40))
      {
        v384 = 0;
      }
      else
      {
        v384 = (uint64_t ***)(v383 - 3);
        v385 = v383 == 0;
        if (v383)
          v386 = v383 - 3;
        else
          v386 = 0;
        v387 = *((unsigned __int8 *)v386 + 16) - 40;
        v388 = __CFADD__(v387, 11);
        if (v387 < 0xFFFFFFF5)
          v386 = 0;
        v389 = *((unsigned __int8 *)v386 + 16);
        if (!v388)
          v385 = 1;
        if (v389 == 30 && !v385)
        {
          v390 = v386 - 12;
LABEL_579:
          v391 = *v390;
          goto LABEL_586;
        }
        v392 = v389 != 31 || v385;
        if ((v392 & 1) == 0)
        {
          v437 = *((_DWORD *)v386 + 5);
          if ((v437 & 0x40000000) != 0)
            v390 = (uint64_t *)*(v386 - 1);
          else
            v390 = &v386[-4 * (v437 & 0x7FFFFFF)];
          goto LABEL_579;
        }
      }
      v391 = 0;
LABEL_586:
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v384[5] + 5), v384);
      v393 = v384[3];
      v394 = v384[4];
      *v394 = (uint64_t *)v393;
      v393[1] = (uint64_t *)v394;
      v384[3] = 0;
      v384[4] = 0;
      llvm::Value::deleteValue((llvm::Value *)v384);
      v395 = operator new(0x60uLL);
      v395[13] = v395[13] & 0x38000000 | 1;
      *(_QWORD *)v395 = 0;
      *((_QWORD *)v395 + 1) = 0;
      *((_QWORD *)v395 + 2) = 0;
      *((_QWORD *)v395 + 3) = v395 + 8;
      llvm::BranchInst::BranchInst((llvm::BranchInst *)(v395 + 8), v379, v324);
      if (!v391)
        goto LABEL_602;
      v1759 = 0;
      llvm::RecursivelyDeleteTriviallyDeadInstructions(v391, 0, a13, &v1756);
      if (v1759 == (uint64_t **)&v1756)
      {
        v396 = (void (**)(void))(v1756 + 32);
      }
      else
      {
        if (!v1759)
          goto LABEL_602;
        v396 = (void (**)(void))(*v1759 + 5);
      }
      (*v396)();
LABEL_602:
      if (*((llvm::BasicBlock **)v379 + 5) != (llvm::BasicBlock *)((char *)v379 + 40))
      {
        for (ii = *((_QWORD *)v379 + 6); ; ii = *(_QWORD *)(v409 + 32))
        {
          v409 = ii - 24;
          v410 = ii ? ii - 24 : 0;
          if (!ii || *(_BYTE *)(v410 + 16) != 83)
            break;
          v411 = *(_DWORD *)(ii - 4);
          v412 = v411 & 0x7FFFFFF;
          if ((v411 & 0x7FFFFFF) != 0)
          {
            v413 = 0;
            do
            {
              v414 = *(_DWORD *)(v409 + 20);
              if ((v414 & 0x40000000) != 0)
                v415 = *(_QWORD *)(v409 - 8);
              else
                v415 = v409 - 32 * (v414 & 0x7FFFFFF);
              v416 = *(_QWORD *)(v415 + 32 * *(unsigned int *)(v409 + 60) + 8 * (v412 - 1)) == (_QWORD)v324;
              if ((v416 & v413) == 1)
              {
                llvm::PHINode::removeIncomingValue((llvm::PHINode *)v409, v412 - 1, 0);
                v413 = 1;
              }
              else
              {
                v413 |= v416;
              }
              v105 = v412-- > 1;
            }
            while (v105);
          }
        }
      }
      v1716 = &v1718.u64[1];
      __b.i64[0] = (uint64_t)&v1718.i64[1];
      __b.i64[1] = 4;
      v1718.i32[0] = 0;
      if ((_DWORD)v1749)
      {
        v417 = (char *)v1748;
        v1677 = (char *)v1748 + 8 * v1749;
        while (1)
        {
          v418 = *(_QWORD *)v417;
          v419 = *(_QWORD *)(*(_QWORD *)v417 + 40);
          if (v419 != *(_QWORD *)v417 + 40)
          {
            if (v419)
              v420 = v419 - 24;
            else
              v420 = 0;
            v421 = *(unsigned __int8 *)(v420 + 16);
            v422 = v421 - 29;
            if (v421 != 30)
            {
              v423 = 2;
              switch(v422)
              {
                case 1:
                  goto LABEL_2550;
                case 2:
                  v423 = (*(_DWORD *)(v420 + 20) >> 1) & 0x3FFFFFF;
                  goto LABEL_650;
                case 3:
                case 9:
                  v423 = (*(_DWORD *)(v420 + 20) & 0x7FFFFFF) - 1;
                  goto LABEL_650;
                case 4:
                  goto LABEL_629;
                case 7:
                  v423 = *(_WORD *)(v420 + 18) & 1;
                  goto LABEL_650;
                case 8:
                  v423 = 1;
                  goto LABEL_629;
                case 10:
                  v423 = *(_DWORD *)(v420 + 80) + 1;
LABEL_650:
                  if (!v423)
                    goto LABEL_639;
                  goto LABEL_629;
                default:
                  goto LABEL_639;
              }
            }
            if ((*(_DWORD *)(v420 + 20) & 0x7FFFFFF) == 3)
              v423 = 2;
            else
              v423 = 1;
LABEL_629:
            v424 = 0;
            v425 = 0;
            v426 = v423;
            v427 = v420 - 64;
            do
            {
              v428 = *(unsigned __int8 *)(v420 + 16);
              if (v428 != 30)
                __asm { BR              X9 }
              v429 = *(_QWORD *)(v420 - 32 - 32 * v425);
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1716, v429);
              if (v430)
              {
                v431 = v1706;
                if (v1706 >= (unint64_t)HIDWORD(v1706))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1705, (uint64_t)v1707, v1706 + 1, 16);
                  v431 = v1706;
                }
                v432 = (char *)v1705 + 16 * v431;
                *v432 = v418;
                v432[1] = v429 & 0xFFFFFFFFFFFFFFFBLL;
                LODWORD(v1706) = v1706 + 1;
              }
              ++v425;
              v424 += 2;
              v427 += 32;
            }
            while (v426 != v425);
          }
LABEL_639:
          if ((void *)__b.i64[0] != v1716)
          {
            if (__b.i32[2] >= 0x21u && (4 * (__b.i32[3] - v1718.i32[0])) < __b.i32[2])
            {
              free((void *)__b.i64[0]);
              v434 = 1 << (33 - __clz(__b.i32[3] - v1718.i32[0] - 1));
              v105 = (__b.i32[3] - v1718.i32[0]) > 0x10;
              v1718.i32[0] = 0;
              if (v105)
                v435 = v434;
              else
                v435 = 32;
              __b.i64[1] = v435;
              v436 = malloc_type_malloc(8 * v435, 0x4065EBACuLL);
              if (!v436)
LABEL_2566:
                llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
              __b.i64[0] = (uint64_t)v436;
              memset(v436, 255, 8 * __b.u32[2]);
              goto LABEL_641;
            }
            memset((void *)__b.i64[0], 255, 8 * __b.u32[2]);
          }
          v1718.i32[0] = 0;
          __b.i32[3] = 0;
LABEL_641:
          v77 = (uint64_t)a9;
          v417 += 8;
          if (v417 == v1677)
          {
            if ((void *)__b.i64[0] != v1716)
              free((void *)__b.i64[0]);
            break;
          }
        }
      }
      if (v1748 != &v1750)
        free(v1748);
      sub_1C564FF4C(v1701, &v1740)[1] = __s1;
      v135 = v1641 + 1;
      v113 = (uint64_t)a8;
      v114 = (llvm::BasicBlock *)a7;
    }
    while (v1641 + 1 != (void **)v1639);
  }
  v120 = (llvm::Value *)a2;
  if ((*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    v121 = ***a2;
    v1716 = a2;
    v122 = *(_DWORD *)(v121 + 2496);
    if (!v122)
    {
      v660 = 0;
      goto LABEL_981;
    }
    v123 = *(_QWORD *)(v121 + 2480);
    v124 = v122 - 1;
    v125 = v124 & ((a2 >> 4) ^ (a2 >> 9));
    v126 = (_QWORD *)(v123 + 40 * v125);
    v127 = (_QWORD ***)*v126;
    if ((uint64_t ***)*v126 != a2)
    {
      v128 = 0;
      v129 = 1;
      while (v127 != (_QWORD ***)-4096)
      {
        if (v128)
          v130 = 0;
        else
          v130 = v127 == (_QWORD ***)-8192;
        if (v130)
          v128 = v126;
        v131 = v125 + v129++;
        v125 = v131 & v124;
        v126 = (_QWORD *)(v123 + 40 * v125);
        v127 = (_QWORD ***)*v126;
        if ((uint64_t ***)*v126 == a2)
          goto LABEL_191;
      }
      if (v128)
        v660 = v128;
      else
        v660 = v126;
LABEL_981:
      v126 = sub_1C541AB24(v121 + 2480, (uint64_t)&v1716, (uint64_t *)&v1716, v660);
      v661 = v1716;
      v126[3] = 0;
      v126[4] = 0;
      *v126 = v661;
      v126[1] = v126 + 3;
      v126[2] = 0x100000000;
      v120 = (llvm::Value *)a2;
    }
LABEL_191:
    v132 = *((unsigned int *)v126 + 4);
    if ((_DWORD)v132)
    {
      v133 = (_QWORD *)(v126[1] + 8);
      v134 = 16 * v132;
      while (*((_DWORD *)v133 - 2) != 14)
      {
        v133 += 2;
        v134 -= 16;
        if (!v134)
          goto LABEL_706;
      }
      if (*v133)
      {
        if (byte_1ED8234B8)
        {
          if (*((_QWORD *)v120 + 6) || (*((_BYTE *)v120 + 23) & 0x20) != 0)
            llvm::Value::setMetadata(v120, 14, 0);
        }
        else
        {
          v1718.i32[0] = 0;
          __b = 0uLL;
          v1716 = &off_1E8139EE0;
          v1718.i8[8] = 0;
          v1720.i64[0] = 0;
          v1720.i32[2] = 0;
          v1719.i64[1] = 0;
          v1719.i64[0] = (uint64_t)&unk_1E81384F8;
          v1723 = 0;
          v1724 = 0;
          v1722 = 0;
          v1721 = &unk_1E8138520;
          llvm::ICFLoopSafetyInfo::computeLoopSafetyInfo((int32x2_t *)&v1716, (const llvm::Loop *)a1);
          if ((llvm::ICFLoopSafetyInfo::isGuaranteedToExecute((int32x2_t *)&v1716, (const llvm::BasicBlock **)v120, v114, (const llvm::BasicBlock ***)a1) & 1) == 0&& (*((_QWORD *)v120 + 6) || (*((_BYTE *)v120 + 23) & 0x20) != 0))
          {
            llvm::Value::setMetadata(v120, 14, 0);
          }
          v1716 = &off_1E8139EE0;
          v1721 = &unk_1E8138548;
          MEMORY[0x1CAA32FB4](v1722, 8);
          v1719.i64[0] = (uint64_t)&unk_1E8138548;
          MEMORY[0x1CAA32FB4](v1719.i64[1], 8);
          v1716 = &unk_1E813A258;
          sub_1C4EF1108(__b.i64);
          v114 = (llvm::BasicBlock *)a7;
        }
      }
    }
  }
LABEL_706:
  v452 = (uint64_t *)((char *)v1635 + 40);
  v451 = (llvm *)*((_QWORD *)v1635 + 5);
  if (v451 == (llvm *)((char *)v1635 + 40))
  {
    v453 = 0;
  }
  else
  {
    if (v451)
      v454 = (uint64_t)v451 - 24;
    else
      v454 = 0;
    if (*(unsigned __int8 *)(v454 + 16) - 29 >= 0xB)
      v453 = 0;
    else
      v453 = v454;
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v453 + 40) + 40, (uint64_t ***)v453);
  v455 = *(_QWORD *)(v453 + 24);
  v456 = *(_QWORD **)(v453 + 32);
  *v456 = v455;
  *(_QWORD *)(v455 + 8) = v456;
  *(_QWORD *)(v453 + 24) = 0;
  *(_QWORD *)(v453 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)v453);
  if (!v1629)
  {
    v485 = sub_1C61B4D30((int *)v1701);
    v486 = (llvm::BasicBlock *)*((_QWORD *)v485 + 1);
    if (!v1628)
    {
      sub_1C5C3A2D0((uint64_t **)v1635, a3, a4, v1627, v486, (llvm::BasicBlock *)v1659, v1625);
LABEL_954:
      v639 = v1706;
      if (v1706 >= HIDWORD(v1706))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1705, (uint64_t)v1707, v1706 + 1, 16);
        v639 = v1706;
      }
      v640 = (llvm **)((char *)v1705 + 16 * v639);
      *v640 = v1635;
      v640[1] = (llvm *)((unint64_t)v486 & 0xFFFFFFFFFFFFFFFBLL);
      v641 = (v1706 + 1);
      LODWORD(v1706) = v1706 + 1;
      if (a13)
      {
        sub_1C4E25D14((uint64_t)&v1716, (unint64_t *)v1705, v641, 1u);
        llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>((uint64_t)v114, (uint64_t)&v1716, 0);
        if (v1735 != v1736)
          free(v1735);
        sub_1C4E28CA4((uint64_t)v1734);
        sub_1C4E28CA4((uint64_t)&v1716);
        LODWORD(v1706) = 0;
        v642 = (uint64_t **)v1702;
        if ((_DWORD)v1703)
        {
          v645 = 8 * v1703;
          v644 = a5;
          do
          {
            v646 = *v642++;
            llvm::MemorySSAUpdater::updateForClonedLoop((uint64_t)a13, (uint64_t)&v1686, *(_QWORD *)a5, *(unsigned int *)(a5 + 8), (uint64_t)v646, 1);
            v645 -= 8;
          }
          while (v645);
          v642 = (uint64_t **)v1702;
          v643 = v1703;
        }
        else
        {
          v643 = 0;
          v644 = a5;
        }
        llvm::MemorySSAUpdater::updateExitBlocksForClonedLoop(a13, *(uint64_t **)v644, *(unsigned int *)(v644 + 8), v642, v643, (uint64_t)v114);
        v1631 = 0;
      }
      else
      {
        v1631 = 1;
      }
      goto LABEL_1045;
    }
    v1673 = (llvm::Value *)*((_QWORD *)v485 + 1);
    LODWORD(v1750) = 128;
    v496 = operator new(0x2000uLL, (std::align_val_t)8uLL);
    v1748 = v496;
    v1749 = 0;
    if ((_DWORD)v1750)
    {
      v497 = (unint64_t)v1750 << 6;
      v498 = v496 + 2;
      do
      {
        *v498 = 0;
        v498[1] = -4096;
        *(v498 - 2) = &unk_1E814DA10;
        *(v498 - 1) = 2;
        v498[2] = 0;
        v498 += 8;
        v497 -= 64;
      }
      while (v497);
    }
    LOBYTE(v1751) = 0;
    v1752 = 0;
    v499 = v1635;
    if (a4)
    {
      v500 = &a3[a4];
      do
      {
        v502 = *--v500;
        v501 = v502;
        llvm::Instruction::clone(v502);
        v504 = (llvm::Value *)v503;
        *(_QWORD *)(v503 + 40) = v499;
        *((_WORD *)v499 + 9) &= ~0x8000u;
        if ((*(_BYTE *)(v503 + 23) & 0x10) != 0)
        {
          v543 = *((_QWORD *)v499 + 7);
          if (v543)
          {
            v544 = *(llvm::ValueSymbolTable **)(v543 + 104);
            if (v544)
              llvm::ValueSymbolTable::reinsertValue(v544, v504);
          }
        }
        v505 = *v452;
        *((_QWORD *)v504 + 4) = v452;
        *((_QWORD *)v504 + 3) = v505;
        *(_QWORD *)(v505 + 8) = (char *)v504 + 24;
        *v452 = (uint64_t)v504 + 24;
        v506 = operator new();
        *(_DWORD *)v506 = 3;
        *(_QWORD *)(v506 + 8) = 0;
        *(_DWORD *)(v506 + 16) = 0;
        *(_QWORD *)(v506 + 40) = &v1748;
        *(_QWORD *)(v506 + 24) = v506 + 40;
        *(_QWORD *)(v506 + 48) = 0;
        *(_QWORD *)(v506 + 32) = 0x200000001;
        *(_QWORD *)(v506 + 72) = v506 + 88;
        *(_QWORD *)(v506 + 80) = 0x400000000;
        *(_QWORD *)(v506 + 184) = v506 + 200;
        *(_QWORD *)(v506 + 192) = 0x100000000;
        *(_QWORD *)(v506 + 216) = v506 + 232;
        *(_QWORD *)(v506 + 224) = 0x1000000000;
        v1756 = v506;
        v1716 = (void *)v506;
        sub_1C5FD706C(v506, (uint64_t ***)v504);
        sub_1C5FD3718((uint64_t *)&v1716, v507);
        llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v1756, v508);
        __b = (int64x2_t)2uLL;
        v1718.i64[0] = (uint64_t)v501;
        if (v501 != (llvm::Instruction *)-8192 && v501 != (llvm::Instruction *)-4096 && v501)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&__b);
        v1716 = &unk_1E814DA10;
        v1718.i64[1] = (uint64_t)&v1748;
        v509 = sub_1C52E2ED8((uint64_t)&v1748, &v1716);
        if (v1718.i64[0] != -8192 && v1718.i64[0] != -4096 && v1718.i64[0])
        {
          v510 = __b.i64[0] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(__b.i64[0] & 0xFFFFFFFFFFFFFFF8) = __b.i64[1];
          if (__b.i64[1])
          {
            *(_QWORD *)__b.i64[1] = *(_QWORD *)__b.i64[1] & 7 | v510;
          }
          else
          {
            v511 = v1718.i64[0];
            v512 = ***(int32x2_t ****)v1718.i64[0];
            v513 = (unint64_t)v512[303];
            if (v513 <= v510)
            {
              v514 = v512[305].u32[0];
              if (v513 + 16 * v514 > v510)
              {
                v515 = v514 - 1;
                LODWORD(v516) = v515 & (((unsigned __int32)v1718.i32[0] >> 4) ^ ((unsigned __int32)v1718.i32[0] >> 9));
                v517 = (uint64_t *)(v513 + 16 * v516);
                v518 = *v517;
                if (v1718.i64[0] == *v517)
                {
LABEL_775:
                  *v517 = -8192;
                  v512[304] = vadd_s32(v512[304], (int32x2_t)0x1FFFFFFFFLL);
                  v511 = v1718.i64[0];
                }
                else
                {
                  v519 = 1;
                  while (v518 != -4096)
                  {
                    v520 = v516 + v519++;
                    v516 = v520 & v515;
                    v518 = *(_QWORD *)(v513 + 16 * v516);
                    if (v1718.i64[0] == v518)
                    {
                      v517 = (uint64_t *)(v513 + 16 * v516);
                      goto LABEL_775;
                    }
                  }
                }
                *(_BYTE *)(v511 + 17) &= ~1u;
              }
            }
          }
        }
        v521 = (llvm::Value *)v509[7];
        if (v521 != v504)
        {
          if (v521 && v521 != (llvm::Value *)-8192 && v521 != (llvm::Value *)-4096)
          {
            v545 = v509[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v545 = v509[6];
            v546 = (unint64_t *)v509[6];
            if (v546)
            {
              *v546 = *v546 & 7 | v545;
            }
            else
            {
              v547 = v509[7];
              v548 = ***(int32x2_t ****)v547;
              v549 = (unint64_t)v548[303];
              if (v549 <= v545)
              {
                v550 = v548[305].u32[0];
                if (v549 + 16 * v550 > v545)
                {
                  v551 = v550 - 1;
                  LODWORD(v552) = v551 & ((v547 >> 4) ^ (v547 >> 9));
                  v553 = (uint64_t *)(v549 + 16 * v552);
                  v554 = *v553;
                  if (v547 == *v553)
                  {
LABEL_834:
                    *v553 = -8192;
                    v548[304] = vadd_s32(v548[304], (int32x2_t)0x1FFFFFFFFLL);
                    v547 = v509[7];
                  }
                  else
                  {
                    v555 = 1;
                    while (v554 != -4096)
                    {
                      v556 = v552 + v555++;
                      v552 = v556 & v551;
                      v554 = *(_QWORD *)(v549 + 16 * v552);
                      if (v547 == v554)
                      {
                        v553 = (uint64_t *)(v549 + 16 * v552);
                        goto LABEL_834;
                      }
                    }
                  }
                  *(_BYTE *)(v547 + 17) &= ~1u;
                }
              }
            }
          }
          v509[7] = v504;
          if (v504 != (llvm::Value *)-8192 && v504 != (llvm::Value *)-4096 && v504)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v509 + 5));
        }
        if (a13)
        {
          v522 = (*a13)[5].i32[0];
          if (v522)
          {
            v523 = (*a13)[3];
            v524 = v522 - 1;
            v525 = (v522 - 1) & ((v501 >> 4) ^ (v501 >> 9));
            v526 = *(llvm::Instruction **)(*(_QWORD *)&v523 + 16 * v525);
            if (v501 == v526)
            {
LABEL_790:
              v529 = *(_QWORD *)(*(_QWORD *)&v523 + 16 * v525 + 8);
              if (v529 && *(_BYTE *)(v529 + 16) == 25)
              {
                v530 = *(_QWORD *)(v529 - 32);
                for (jj = *(_QWORD *)(v530 + 64); ; jj = *(_QWORD *)(v530 + 64))
                {
                  v532 = sub_1C477672C(a1 + 56, jj);
                  v533 = *(_QWORD *)(a1 + 64);
                  v534 = (unsigned int *)(v533 == *(_QWORD *)(a1 + 56) ? a1 + 76 : a1 + 72);
                  if (v532 == (_QWORD *)(v533 + 8 * *v534))
                    break;
                  v535 = *(unsigned __int8 *)(v530 + 16);
                  if (v535 == 27)
                  {
                    v536 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(a1);
                    if (!v536)
                      goto LABEL_805;
                    v537 = *(_QWORD *)(v536 + 40);
                    if (v537 == v536 + 40)
                      goto LABEL_805;
                    if (v537)
                      v538 = v537 - 24;
                    else
                      v538 = 0;
                    if (*(_BYTE *)(v538 + 16) != 30)
                    {
                      v539 = 0;
                      switch(*(_BYTE *)(v538 + 16))
                      {
                        case 0x1D:
                        case 0x21:
                        case 0x22:
                        case 0x23:
                        case 0x24:
                        case 0x25:
                        case 0x26:
                          goto LABEL_817;
                        case 0x1E:
                          goto LABEL_2550;
                        case 0x1F:
                          v542 = (*(_DWORD *)(v538 + 20) >> 1) & 0x3FFFFFF;
                          goto LABEL_815;
                        case 0x20:
                          v542 = (*(_DWORD *)(v538 + 20) & 0x7FFFFFF) - 1;
                          goto LABEL_815;
                        case 0x27:
                          v542 = *(_DWORD *)(v538 + 80) + 1;
LABEL_815:
                          if (v542 == 1)
                            goto LABEL_816;
                          goto LABEL_805;
                        default:
                          goto LABEL_805;
                      }
                    }
                    if ((*(_DWORD *)(v538 + 20) & 0x7FFFFFF) == 3)
LABEL_805:
                      v539 = 0;
                    else
LABEL_816:
                      v539 = v536;
LABEL_817:
                    v530 = sub_1C4EDF32C(v530, v539);
                  }
                  else
                  {
                    if (v535 == 25)
                      v540 = v530;
                    else
                      v540 = 0;
                    if (v540)
                      v541 = (uint64_t *)(v540 - 32);
                    else
                      v541 = (uint64_t *)(v530 - 64);
                    v530 = *v541;
                  }
                }
                __nc = (llvm::BasicBlock *)*((_QWORD *)v504 + 5);
                DefinedAccess = llvm::MemorySSA::createDefinedAccess((uint64_t *)*a13, (uint64_t)v504, v530, 0);
                llvm::MemorySSA::insertIntoListsForBlock((uint64_t)*a13, (uint64_t)DefinedAccess, __nc, 2);
                v499 = v1635;
              }
            }
            else
            {
              v527 = 1;
              while (v526 != (llvm::Instruction *)-4096)
              {
                v528 = v525 + v527++;
                v525 = v528 & v524;
                v526 = *(llvm::Instruction **)(*(_QWORD *)&v523 + 16 * v525);
                if (v501 == v526)
                  goto LABEL_790;
              }
            }
          }
        }
      }
      while (v500 != a3);
    }
    v558 = **(_QWORD **)v499;
    v1716 = &__b.u64[1];
    __b.i64[0] = 0x200000000;
    v1720.i64[1] = v558;
    v1721 = &v1729;
    v1722 = (uint64_t)&v1730;
    v1723 = 0;
    v1724 = 0;
    v1725 = 512;
    v1726 = 7;
    v1728 = 0;
    v1727 = 0;
    v1729 = &unk_1E8167888;
    v1730 = &unk_1E8167A08;
    v1719.i64[1] = (uint64_t)v499;
    v1720.i64[0] = (uint64_t)v1635 + 40;
    v559 = *a3;
    v1757 = (void *)2;
    v1758 = 0;
    v1759 = (uint64_t **)v559;
    if (v559 != (llvm::Value *)-8192 && v559 != (llvm::Value *)-4096 && v559)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v1757);
    v1756 = (uint64_t)&unk_1E814DA10;
    v1760[0] = &v1748;
    v560 = sub_1C52E2ED8((uint64_t)&v1748, &v1756);
    v486 = v1673;
    if (v1759 != (uint64_t **)-8192 && v1759 != (uint64_t **)-4096 && v1759)
    {
      v561 = (unint64_t)v1757 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)((unint64_t)v1757 & 0xFFFFFFFFFFFFFFF8) = v1758;
      if (v1758)
      {
        *(_QWORD *)v1758 = *(_QWORD *)v1758 & 7 | v561;
      }
      else
      {
        v562 = v1759;
        v563 = *(int32x2_t **)**v1759;
        v564 = (unint64_t)v563[303];
        if (v564 <= v561)
        {
          v565 = v563[305].u32[0];
          if (v564 + 16 * v565 > v561)
          {
            v566 = v565 - 1;
            LODWORD(v567) = v566 & ((v1759 >> 4) ^ (v1759 >> 9));
            v568 = (uint64_t ***)(v564 + 16 * v567);
            v569 = *v568;
            if (v1759 == *v568)
            {
LABEL_854:
              *v568 = (uint64_t **)-8192;
              v563[304] = vadd_s32(v563[304], (int32x2_t)0x1FFFFFFFFLL);
              v562 = v1759;
            }
            else
            {
              v570 = 1;
              while (v569 != (uint64_t **)-4096)
              {
                v571 = v567 + v570++;
                v567 = v571 & v566;
                v569 = *(uint64_t ***)(v564 + 16 * v567);
                if (v1759 == v569)
                {
                  v568 = (uint64_t ***)(v564 + 16 * v567);
                  goto LABEL_854;
                }
              }
            }
            *((_BYTE *)v562 + 17) &= ~1u;
          }
        }
      }
    }
    v595 = (llvm::Value *)v560[7];
    if (v1627)
      v596 = v1673;
    else
      v596 = (llvm::BasicBlock *)v1659;
    v597 = operator new(0xA0uLL);
    v598 = v597;
    v599 = 0;
    v600 = (llvm::Value *)(v597 + 24);
    v597[29] = v597[29] & 0x38000000 | 3;
    do
    {
      v601 = &v597[v599];
      *v601 = 0;
      v601[1] = 0;
      v601[2] = 0;
      v601[3] = v600;
      v599 += 8;
    }
    while (v599 != 24);
    if (v1627)
      v602 = (llvm::BasicBlock *)v1659;
    else
      v602 = v1673;
    llvm::BranchInst::BranchInst((llvm::BranchInst *)(v597 + 24), v596, v602, v595, 0);
    LOWORD(v1760[0]) = 257;
    (*(void (**)(uint64_t, llvm::Value *, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v1722 + 16))(v1722, v600, &v1756, v1719.i64[1], v1720.i64[0]);
    v603 = (void **)v1716;
    if (!__b.i32[0])
    {
LABEL_913:
      v113 = (uint64_t)a8;
      v114 = (llvm::BasicBlock *)a7;
      if (v603 != (void **)&__b.u64[1])
        free(v603);
      if (v1752)
      {
        sub_1C4E43068((uint64_t)&v1751);
        MEMORY[0x1CAA32FB4](v1751, 8);
        v1752 = 0;
      }
      v610 = (char *)v1748;
      if ((_DWORD)v1750)
      {
        v611 = (char *)v1748 + 64 * (unint64_t)v1750;
        do
        {
          v612 = *((_QWORD *)v610 + 3);
          if ((v612 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v613 = *((_QWORD *)v610 + 7);
            if (v613)
            {
              if (v613 != -8192 && v613 != -4096)
              {
                v614 = *((_QWORD *)v610 + 5) & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v614 = *((_QWORD *)v610 + 6);
                v615 = (unint64_t *)*((_QWORD *)v610 + 6);
                if (v615)
                {
                  *v615 = *v615 & 7 | v614;
                }
                else
                {
                  v616 = *((_QWORD *)v610 + 7);
                  v617 = ***(int32x2_t ****)v616;
                  v618 = (unint64_t)v617[303];
                  if (v618 <= v614)
                  {
                    v619 = v617[305].u32[0];
                    if (v618 + 16 * v619 > v614)
                    {
                      v620 = v619 - 1;
                      LODWORD(v621) = v620 & ((v616 >> 4) ^ (v616 >> 9));
                      v622 = (uint64_t *)(v618 + 16 * v621);
                      v623 = *v622;
                      if (v616 == *v622)
                      {
LABEL_931:
                        *v622 = -8192;
                        v617[304] = vadd_s32(v617[304], (int32x2_t)0x1FFFFFFFFLL);
                        v616 = *((_QWORD *)v610 + 7);
                      }
                      else
                      {
                        v624 = 1;
                        while (v623 != -4096)
                        {
                          v625 = v621 + v624++;
                          v621 = v625 & v620;
                          v623 = *(_QWORD *)(v618 + 16 * v621);
                          if (v616 == v623)
                          {
                            v622 = (uint64_t *)(v618 + 16 * v621);
                            goto LABEL_931;
                          }
                        }
                      }
                      *(_BYTE *)(v616 + 17) &= ~1u;
                    }
                  }
                }
                v612 = *((_QWORD *)v610 + 3);
              }
            }
          }
          if (v612 != -4096 && v612 != -8192 && v612 != 0)
          {
            v627 = *((_QWORD *)v610 + 1) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v627 = *((_QWORD *)v610 + 2);
            v628 = (unint64_t *)*((_QWORD *)v610 + 2);
            if (v628)
            {
              *v628 = *v628 & 7 | v627;
            }
            else
            {
              v629 = *((_QWORD *)v610 + 3);
              v630 = ***(int32x2_t ****)v629;
              v631 = (unint64_t)v630[303];
              if (v631 <= v627)
              {
                v632 = v630[305].u32[0];
                if (v631 + 16 * v632 > v627)
                {
                  v633 = v632 - 1;
                  LODWORD(v634) = v633 & ((v629 >> 4) ^ (v629 >> 9));
                  v635 = (uint64_t *)(v631 + 16 * v634);
                  v636 = *v635;
                  if (v629 == *v635)
                  {
LABEL_950:
                    *v635 = -8192;
                    v630[304] = vadd_s32(v630[304], (int32x2_t)0x1FFFFFFFFLL);
                    v629 = *((_QWORD *)v610 + 3);
                  }
                  else
                  {
                    v637 = 1;
                    while (v636 != -4096)
                    {
                      v638 = v634 + v637++;
                      v634 = v638 & v633;
                      v636 = *(_QWORD *)(v631 + 16 * v634);
                      if (v629 == v636)
                      {
                        v635 = (uint64_t *)(v631 + 16 * v634);
                        goto LABEL_950;
                      }
                    }
                  }
                  *(_BYTE *)(v629 + 17) &= ~1u;
                }
              }
            }
          }
          v610 += 64;
        }
        while (v610 != v611);
        v610 = (char *)v1748;
      }
      MEMORY[0x1CAA32FB4](v610, 8);
      goto LABEL_954;
    }
    v604 = (void **)((char *)v1716 + 16 * __b.u32[0]);
    v605 = (unsigned __int8 **)(v598 + 36);
    while (1)
    {
      v606 = *(_DWORD *)v603;
      v607 = (unsigned __int8 *)v603[1];
      if (v607)
      {
        if (!v606)
        {
          v1740 = v603[1];
          llvm::MetadataTracking::track((uint64_t)&v1740, v607, 2);
          v608 = *v605;
          if (!*v605)
          {
LABEL_911:
            v609 = (unsigned __int8 *)v1740;
            *v605 = (unsigned __int8 *)v1740;
            if (v609)
              llvm::MetadataTracking::retrack((uint64_t)&v1740, v609, (uint64_t)(v598 + 36));
            goto LABEL_908;
          }
LABEL_905:
          llvm::MetadataTracking::untrack((uint64_t)(v598 + 36), v608);
          goto LABEL_911;
        }
      }
      else
      {
        v608 = *v605;
        if (!*v605 && (*((_BYTE *)v598 + 119) & 0x20) == 0)
          goto LABEL_908;
        if (!v606)
        {
          v1740 = 0;
          if (!v608)
            goto LABEL_911;
          goto LABEL_905;
        }
      }
      llvm::Value::setMetadata(v600, *(_DWORD *)v603, (llvm::MDNode *)v607);
LABEL_908:
      v603 += 2;
      if (v603 == v604)
      {
        v603 = (void **)v1716;
        goto LABEL_913;
      }
    }
  }
  v457 = v1643;
  v458 = (_QWORD *)((char *)v1643 + 40);
  v459 = (llvm::Instruction *)a2;
  v460 = (uint64_t *)(a2 + 3);
  if (v452 == (uint64_t *)(a2 + 3))
    goto LABEL_730;
  v461 = (uint64_t *)a2[4];
  if (v461 == v452)
    goto LABEL_730;
  *((_WORD *)v1635 + 9) &= ~0x8000u;
  if (v1635 == v1643)
    goto LABEL_728;
  v462 = *((_QWORD *)v1635 + 7);
  if (v462)
    v463 = *(llvm::ValueSymbolTable **)(v462 + 104);
  else
    v463 = 0;
  v464 = *((_QWORD *)v1643 + 7);
  if (v464)
    v465 = *(llvm::ValueSymbolTable **)(v464 + 104);
  else
    v465 = 0;
  if (v463 != v465)
  {
    if (v460 == v461)
      goto LABEL_728;
    v1667 = (uint64_t *)(a2 + 3);
    while (1)
    {
      v1603 = (llvm::Value *)(v1667 - 3);
      if (!v1667)
        v1603 = 0;
      v1674 = v1603;
      v1654 = *((_DWORD *)v1603 + 5) & 0x10000000;
      if (v465)
      {
        if (v1654)
          break;
      }
LABEL_2600:
      *((_QWORD *)v1674 + 5) = v1635;
      if (v463 && v1654)
        llvm::ValueSymbolTable::reinsertValue(v463, v1674);
      v1667 = (uint64_t *)v1667[1];
      v114 = (llvm::BasicBlock *)a7;
      v457 = v1643;
      v459 = (llvm::Instruction *)a2;
      v77 = (uint64_t)a9;
      if (v1667 == v461)
        goto LABEL_728;
    }
    v1604 = ***(_QWORD ***)v1603;
    v1605 = *(_QWORD *)(v1604 + 152);
    v1606 = *(unsigned int *)(v1604 + 168);
    if ((_DWORD)v1606)
    {
      LODWORD(v1607) = (v1606 - 1) & ((v1674 >> 4) ^ (v1674 >> 9));
      v1608 = (llvm::Value **)(v1605 + 16 * v1607);
      v1609 = *v1608;
      if (*v1608 == v1674)
        goto LABEL_2587;
      v1610 = 1;
      while (v1609 != (llvm::Value *)-4096)
      {
        v1611 = v1607 + v1610++;
        v1607 = v1611 & (v1606 - 1);
        v1609 = *(llvm::Value **)(v1605 + 16 * v1607);
        if (v1609 == v1674)
        {
          v1608 = (llvm::Value **)(v1605 + 16 * v1607);
          goto LABEL_2587;
        }
      }
    }
    v1608 = (llvm::Value **)(v1605 + 16 * v1606);
LABEL_2587:
    v1612 = *((unsigned int *)v465 + 2);
    if ((_DWORD)v1612)
    {
      v1613 = (size_t *)v1608[1];
      v1652 = *((unsigned int *)v465 + 5);
      __s1b = (unsigned __int8 *)v1613 + v1652;
      __nb = *v1613;
      v1614 = 0;
      if (*v1613)
      {
        v1615 = *v1613;
        v1616 = __s1b;
        do
        {
          v1617 = *v1616++;
          v1614 = 33 * v1614 + v1617;
          --v1615;
        }
        while (v1615);
      }
      v1680 = v1612 - 1;
      v1618 = *(_QWORD *)v465;
      v1670 = *(_QWORD *)v465 + 8 * v1612 + 8;
      v1619 = 1;
      v1620 = v1614;
      while (1)
      {
        v1621 = v1620 & v1680;
        v1622 = *(_QWORD **)(v1618 + 8 * v1621);
        if (v1622 != (_QWORD *)-8)
        {
          if (!v1622)
            goto LABEL_2600;
          if (*(_DWORD *)(v1670 + 4 * v1621) == v1614
            && __nb == *v1622
            && (!__nb || !memcmp(__s1b, (char *)v1622 + v1652, __nb)))
          {
            break;
          }
        }
        v1620 = v1619 + v1621;
        ++v1619;
      }
      *(_QWORD *)(v1618 + 8 * (int)v1621) = -8;
      *(int32x2_t *)((char *)v465 + 12) = vadd_s32(*(int32x2_t *)((char *)v465 + 12), (int32x2_t)0x1FFFFFFFFLL);
    }
    goto LABEL_2600;
  }
  if (v460 != v461)
  {
    v466 = (uint64_t *)(a2 + 3);
    do
    {
      v467 = v466 - 3;
      if (!v466)
        v467 = 0;
      v467[5] = (uint64_t)v1635;
      v466 = (uint64_t *)v466[1];
    }
    while (v466 != v461);
  }
LABEL_728:
  if (v461 != v460)
  {
    v468 = *v461;
    v469 = *v460;
    *(_QWORD *)(v469 + 8) = v461;
    *v461 = v469;
    v470 = *v452;
    *(_QWORD *)(v468 + 8) = v452;
    *v460 = v470;
    *(_QWORD *)(v470 + 8) = v460;
    *v452 = v468;
  }
LABEL_730:
  llvm::Instruction::clone(v459);
  v472 = v471;
  *(_QWORD *)(v471 + 40) = v457;
  *((_WORD *)v457 + 9) &= ~0x8000u;
  if ((*(_BYTE *)(v471 + 23) & 0x10) != 0)
  {
    v658 = *((_QWORD *)v457 + 7);
    if (v658)
    {
      v659 = *(llvm::ValueSymbolTable **)(v658 + 104);
      if (v659)
        llvm::ValueSymbolTable::reinsertValue(v659, (llvm::Value *)v472);
    }
  }
  v473 = (_QWORD *)*v458;
  *(_QWORD *)(v472 + 24) = *v458;
  *(_QWORD *)(v472 + 32) = v458;
  v473[1] = v472 + 24;
  *v458 = v472 + 24;
  if (v1632 != 30)
  {
    v487 = a2;
    v488 = *((_DWORD *)a2 + 5);
    if ((v488 & 0x40000000) != 0)
      v489 = (uint64_t ***)*(a2 - 1);
    else
      v489 = &a2[-4 * (v488 & 0x7FFFFFF)];
    v490 = v1636;
    v491 = (uint64_t *)(v489 + 4);
    if (v489[4])
    {
      *v489[6] = (uint64_t *)v489[5];
      v662 = v489[5];
      if (v662)
        v662[2] = (uint64_t *)v489[6];
    }
    *v491 = v1659;
    if (v1659)
    {
      v492 = (uint64_t **)(v1659 + 8);
      v493 = *(_QWORD *)(v1659 + 8);
      v489[5] = (uint64_t **)v493;
      if (v493)
        *(_QWORD *)(v493 + 16) = v489 + 5;
      v489[6] = v492;
      *v492 = v491;
    }
    if (((*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFF) != 1)
    {
      v572 = 0;
      v573 = (uint64_t *)(v1659 + 8);
      v574 = 2 * (((*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFFu) - 1);
      do
      {
        v575 = *((_DWORD *)v487 + 5);
        if ((v575 & 0x40000000) != 0)
          v576 = (uint64_t)*(v487 - 1);
        else
          v576 = v490 - 32 * (v575 & 0x7FFFFFF);
        if (v572 == 0x1FFFFFFFCLL)
          v577 = 1;
        else
          v577 = (v572 + 3);
        if (*(llvm::BasicBlock **)(v576 + 32 * v577) == v1690)
        {
          if ((v575 & 0x40000000) != 0)
            v579 = (uint64_t)*(v487 - 1);
          else
            v579 = v490 - 32 * (v575 & 0x7FFFFFF);
          v580 = v579 + 32 * v577;
          if (*(_QWORD *)v580)
          {
            **(_QWORD **)(v580 + 16) = *(_QWORD *)(v580 + 8);
            v594 = *(_QWORD *)(v580 + 8);
            if (v594)
              *(_QWORD *)(v594 + 16) = *(_QWORD *)(v580 + 16);
          }
          *(_QWORD *)v580 = v1659;
          if (v1659)
          {
            v581 = *v573;
            v582 = v579 + 32 * v577;
            *(_QWORD *)(v582 + 8) = *v573;
            if (v581)
              *(_QWORD *)(v581 + 16) = v582 + 8;
            *(_QWORD *)(v582 + 16) = v573;
            *v573 = v580;
          }
        }
        else
        {
          if ((v575 & 0x40000000) != 0)
            v578 = (uint64_t)*(v487 - 1);
          else
            v578 = v490 - 32 * (v575 & 0x7FFFFFF);
          v583 = v487;
          v584 = sub_1C564FE20((uint64_t)v1701, *(_QWORD *)(v578 + 32 * v577));
          v585 = *((_DWORD *)v583 + 5);
          v487 = v583;
          if ((v585 & 0x40000000) != 0)
            v586 = (uint64_t)*(v583 - 1);
          else
            v586 = v1636 - 32 * (v585 & 0x7FFFFFF);
          v587 = *(_QWORD *)(v584 + 8);
          v588 = v586 + 32 * v577;
          v490 = v1636;
          if (*(_QWORD *)v588)
          {
            **(_QWORD **)(v588 + 16) = *(_QWORD *)(v588 + 8);
            v593 = *(_QWORD *)(v588 + 8);
            if (v593)
              *(_QWORD *)(v593 + 16) = *(_QWORD *)(v588 + 16);
          }
          *(_QWORD *)v588 = v587;
          if (v587)
          {
            v591 = *(_QWORD *)(v587 + 8);
            v589 = (uint64_t *)(v587 + 8);
            v590 = v591;
            v592 = v586 + 32 * v577;
            *(_QWORD *)(v592 + 8) = v591;
            if (v591)
              *(_QWORD *)(v590 + 16) = v592 + 8;
            *(_QWORD *)(v592 + 16) = v589;
            *v589 = v588;
          }
        }
        v572 += 2;
      }
      while (v574 != v572);
    }
    if ((v1625 & 1) == 0)
      goto LABEL_1003;
    v494 = *((_DWORD *)v487 + 5);
    v495 = (v494 & 0x40000000) != 0 ? *(uint64_t *****)(v490 - 8) : (uint64_t ****)(v490 - 32 * (v494 & 0x7FFFFFF));
    v647 = *v495;
    if ((sub_1C4F8BE80(*v495, v77, v490, a7, 0, 0) & 1) != 0)
      goto LABEL_1003;
    v648 = (char *)operator new(0x60uLL);
    *((_DWORD *)v648 + 13) = *((_DWORD *)v648 + 13) & 0x38000000 | 1;
    *(_QWORD *)v648 = 0;
    *((_QWORD *)v648 + 1) = 0;
    *((_QWORD *)v648 + 2) = 0;
    *((_QWORD *)v648 + 3) = v648 + 32;
    if ((*((_BYTE *)v647 + 23) & 0x10) == 0)
    {
      v677 = 0;
      v676 = &byte_1C871356D;
      v652 = v1636;
      goto LABEL_997;
    }
    v649 = ***v647;
    v650 = *(_QWORD *)(v649 + 152);
    v651 = *(unsigned int *)(v649 + 168);
    v652 = v1636;
    if ((_DWORD)v651)
    {
      LODWORD(v653) = (v651 - 1) & ((v647 >> 4) ^ (v647 >> 9));
      v654 = (uint64_t ****)(v650 + 16 * v653);
      v655 = *v654;
      if (*v654 == v647)
      {
LABEL_996:
        v675 = v654[1];
        v678 = *v675;
        v676 = (char *)(v675 + 2);
        v677 = v678;
LABEL_997:
        v1718.i16[4] = 773;
        v1716 = v676;
        __b.i64[0] = (uint64_t)v677;
        __b.i64[1] = (uint64_t)".fr";
        v679 = v647;
        v680 = v652;
        v681 = llvm::FreezeInst::FreezeInst((uint64_t)(v648 + 32), v679, (uint64_t)&v1716, v652);
        v682 = *((_DWORD *)a2 + 5);
        if ((v682 & 0x40000000) != 0)
          v683 = *(_QWORD *)(v680 - 8);
        else
          v683 = v680 - 32 * (v682 & 0x7FFFFFF);
        if (*(_QWORD *)v683)
        {
          **(_QWORD **)(v683 + 16) = *(_QWORD *)(v683 + 8);
          v1589 = *(_QWORD *)(v683 + 8);
          if (v1589)
            *(_QWORD *)(v1589 + 16) = *(_QWORD *)(v683 + 16);
        }
        *(_QWORD *)v683 = v681;
        v686 = *((_QWORD *)v648 + 5);
        v685 = (uint64_t *)(v648 + 40);
        v684 = v686;
        *(_QWORD *)(v683 + 8) = v686;
        if (v686)
          *(_QWORD *)(v684 + 16) = v683 + 8;
        *(_QWORD *)(v683 + 16) = v685;
        *v685 = v683;
LABEL_1003:
        if ((_DWORD)v1714)
        {
          v693 = (uint64_t *)v1713;
          v694 = 8 * v1714;
          do
          {
            v695 = *(_QWORD *)(sub_1C564FE20((uint64_t)v1701, *v693) + 8);
            v696 = v1706;
            if (v1706 >= (unint64_t)HIDWORD(v1706))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1705, (uint64_t)v1707, v1706 + 1, 16);
              v696 = v1706;
            }
            v697 = (llvm **)((char *)v1705 + 16 * v696);
            *v697 = v1635;
            v697[1] = (llvm *)(v695 & 0xFFFFFFFFFFFFFFFBLL);
            LODWORD(v1706) = v1706 + 1;
            ++v693;
            v694 -= 8;
          }
          while (v694);
        }
        goto LABEL_1004;
      }
      v656 = 1;
      while (v655 != (uint64_t ***)-4096)
      {
        v657 = v653 + v656++;
        v653 = v657 & (v651 - 1);
        v655 = *(uint64_t ****)(v650 + 16 * v653);
        if (v655 == v647)
        {
          v654 = (uint64_t ****)(v650 + 16 * v653);
          goto LABEL_996;
        }
      }
    }
    v654 = (uint64_t ****)(v650 + 16 * v651);
    goto LABEL_996;
  }
  v474 = *((_QWORD *)sub_1C61B4D30((int *)v1701) + 1);
  sub_1C53E1B14((uint64_t)a2, v1623, v474);
  sub_1C53E1B14((uint64_t)a2, v1623 ^ 1, v1659);
  if (v1625)
  {
    v475 = (uint64_t ***)*(a2 - 12);
    if ((sub_1C4F8BE80(v475, v77, (uint64_t)a2, (uint64_t)v114, 0, 0) & 1) == 0)
    {
      v476 = (char *)operator new(0x60uLL);
      *((_DWORD *)v476 + 13) = *((_DWORD *)v476 + 13) & 0x38000000 | 1;
      *(_QWORD *)v476 = 0;
      *((_QWORD *)v476 + 1) = 0;
      *((_QWORD *)v476 + 2) = 0;
      *((_QWORD *)v476 + 3) = v476 + 32;
      if ((*((_BYTE *)v475 + 23) & 0x10) != 0)
      {
        v477 = ***v475;
        v478 = *(_QWORD *)(v477 + 152);
        v479 = *(unsigned int *)(v477 + 168);
        if (!(_DWORD)v479)
          goto LABEL_984;
        LODWORD(v480) = (v479 - 1) & ((v475 >> 4) ^ (v475 >> 9));
        v481 = (uint64_t ****)(v478 + 16 * v480);
        v482 = *v481;
        if (*v481 != v475)
        {
          v483 = 1;
          while (v482 != (uint64_t ***)-4096)
          {
            v484 = v480 + v483++;
            v480 = v484 & (v479 - 1);
            v482 = *(uint64_t ****)(v478 + 16 * v480);
            if (v482 == v475)
            {
              v481 = (uint64_t ****)(v478 + 16 * v480);
              goto LABEL_985;
            }
          }
LABEL_984:
          v481 = (uint64_t ****)(v478 + 16 * v479);
        }
LABEL_985:
        v663 = v481[1];
        v666 = *v663;
        v664 = (char *)(v663 + 2);
        v665 = v666;
      }
      else
      {
        v665 = 0;
        v664 = &byte_1C871356D;
      }
      v1718.i16[4] = 773;
      v1716 = v664;
      __b.i64[0] = (uint64_t)v665;
      __b.i64[1] = (uint64_t)".fr";
      v667 = llvm::FreezeInst::FreezeInst((uint64_t)(v476 + 32), v475, (uint64_t)&v1716, (uint64_t)a2);
      if (*(a2 - 12))
      {
        **(a2 - 10) = (uint64_t *)*(a2 - 11);
        v668 = (uint64_t)*(a2 - 11);
        if (v668)
          *(_QWORD *)(v668 + 16) = *(a2 - 10);
      }
      v671 = (_QWORD **)*((_QWORD *)v476 + 5);
      v670 = (uint64_t **)(v476 + 40);
      v669 = v671;
      *(a2 - 11) = v671;
      *(a2 - 12) = (uint64_t **)v667;
      if (v671)
        v669[2] = a2 - 11;
      *(a2 - 10) = v670;
      *v670 = (uint64_t *)(a2 - 12);
    }
  }
  v672 = v474 & 0xFFFFFFFFFFFFFFFBLL;
  v673 = v1706;
  if (v1706 >= HIDWORD(v1706))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1705, (uint64_t)v1707, v1706 + 1, 16);
    v673 = v1706;
  }
  v674 = (llvm **)((char *)v1705 + 16 * v673);
  *v674 = v1635;
  v674[1] = (llvm *)v672;
  LODWORD(v1706) = v1706 + 1;
LABEL_1004:
  if (a13)
  {
    sub_1C4E25D14((uint64_t)&v1716, (unint64_t *)v1705, v1706, 1u);
    llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(a7, (uint64_t)&v1716, 0);
    if (v1735 != v1736)
      free(v1735);
    sub_1C4E28CA4((uint64_t)v1734);
    sub_1C4E28CA4((uint64_t)&v1716);
    LODWORD(v1706) = 0;
    llvm::MemorySSAUpdater::removeDuplicatePhiEdgesBetween((llvm::MemorySSAUpdater *)a13, v1643, v1690);
    if ((_DWORD)v1714)
    {
      v687 = (const llvm::BasicBlock **)v1713;
      v688 = 8 * v1714;
      do
      {
        v689 = *v687++;
        llvm::MemorySSAUpdater::removeDuplicatePhiEdgesBetween((llvm::MemorySSAUpdater *)a13, v1643, v689);
        v688 -= 8;
      }
      while (v688);
    }
    v690 = (uint64_t **)v1702;
    v691 = v1703;
    if ((_DWORD)v1703)
    {
      v698 = 8 * v1703;
      v692 = a5;
      do
      {
        v699 = *v690++;
        llvm::MemorySSAUpdater::updateForClonedLoop((uint64_t)a13, (uint64_t)&v1686, *(_QWORD *)v692, *(unsigned int *)(v692 + 8), (uint64_t)v699, 1);
        v692 = a5;
        v698 -= 8;
      }
      while (v698);
      v690 = (uint64_t **)v1702;
      v691 = v1703;
    }
    else
    {
      v692 = a5;
    }
    llvm::MemorySSAUpdater::updateExitBlocksForClonedLoop(a13, *(uint64_t **)v692, *(unsigned int *)(v692 + 8), v690, v691, a7);
    if ((_DWORD)v1714)
    {
      v700 = (llvm::BasicBlock **)v1713;
      v701 = 8 * v1714;
      do
      {
        v702 = *v700++;
        llvm::MemorySSAUpdater::removeEdge((llvm::MemorySSAUpdater *)a13, v1643, v702);
        v701 -= 8;
      }
      while (v701);
    }
  }
  if (v1632 == 30)
  {
    v703 = *(llvm::BasicBlock **)v1713;
    llvm::BasicBlock::removePredecessor(*(llvm::BasicBlock **)v1713, v1643, 1);
    v704 = (unint64_t)v703 | 4;
    v705 = v1706;
    v113 = (uint64_t)a8;
    if (v1706 >= HIDWORD(v1706))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1705, (uint64_t)v1707, v1706 + 1, 16);
      v705 = v1706;
    }
    v706 = (llvm::BasicBlock **)((char *)v1705 + 16 * v705);
    *v706 = v1643;
    v706[1] = (llvm::BasicBlock *)v704;
    LODWORD(v1706) = v1706 + 1;
  }
  else
  {
    if (((*(_DWORD *)(v472 + 20) >> 1) & 0x3FFFFFF) != 1)
    {
      v707 = 0;
      v708 = 2 * (((*(_DWORD *)(v472 + 20) >> 1) & 0x3FFFFFFu) - 1);
      do
      {
        v709 = *(_DWORD *)(v472 + 20);
        if ((v709 & 0x40000000) != 0)
          v710 = *(_QWORD *)(v472 - 8);
        else
          v710 = v472 - 32 * (v709 & 0x7FFFFFF);
        v711 = (v707 + 3);
        if (v707 == 0x1FFFFFFFCLL)
          v711 = 1;
        llvm::BasicBlock::removePredecessor(*(llvm::BasicBlock **)(v710 + 32 * v711), v1643, 1);
        v707 += 2;
      }
      while (v708 != v707);
    }
    v113 = (uint64_t)a8;
    if ((_DWORD)v1714)
    {
      v1176 = (uint64_t *)v1713;
      v1177 = v1706;
      v1178 = 8 * v1714;
      do
      {
        v1179 = *v1176;
        if (v1177 >= HIDWORD(v1706))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1705, (uint64_t)v1707, v1177 + 1, 16);
          v1177 = v1706;
        }
        v1180 = (llvm::BasicBlock **)((char *)v1705 + 16 * v1177);
        *v1180 = v1643;
        v1180[1] = (llvm::BasicBlock *)(v1179 | 4);
        v1177 = v1706 + 1;
        LODWORD(v1706) = v1706 + 1;
        ++v1176;
        v1178 -= 8;
      }
      while (v1178);
    }
  }
  v712 = (_QWORD *)*v458;
  if ((_QWORD *)*v458 == v458)
  {
    v713 = 0;
  }
  else
  {
    if (v712)
      v714 = (uint64_t ***)(v712 - 3);
    else
      v714 = 0;
    if (*((unsigned __int8 *)v714 + 16) - 29 >= 0xB)
      v713 = 0;
    else
      v713 = v714;
  }
  v114 = (llvm::BasicBlock *)a7;
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v713[5] + 5), v713);
  v715 = v713[3];
  v716 = v713[4];
  *v716 = (uint64_t *)v715;
  v715[1] = (uint64_t *)v716;
  v713[3] = 0;
  v713[4] = 0;
  llvm::Value::deleteValue((llvm::Value *)v713);
  v717 = v1690;
  v718 = operator new(0x60uLL);
  v718[13] = v718[13] & 0x38000000 | 1;
  *(_QWORD *)v718 = 0;
  *((_QWORD *)v718 + 1) = 0;
  *((_QWORD *)v718 + 2) = 0;
  *((_QWORD *)v718 + 3) = v718 + 8;
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v718 + 8), v717, v1643);
LABEL_1045:
  sub_1C4E25D14((uint64_t)&v1716, (unint64_t *)v1705, v1706, 1u);
  llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>((uint64_t)v114, (uint64_t)&v1716, 0);
  if (v1735 != v1736)
    free(v1735);
  sub_1C4E28CA4((uint64_t)v1734);
  sub_1C4E28CA4((uint64_t)&v1716);
  v719 = *(_QWORD *)a5;
  v720 = *(unsigned int *)(a5 + 8);
  v1748 = &v1750;
  v1749 = (void *)0x1000000000;
  v721 = *(void **)(a1 + 32);
  v722 = *(void **)(a1 + 40);
  v1716 = v721;
  __b.i64[0] = v719;
  v1663 = v722;
  __b.i64[1] = (uint64_t)v722;
  v1660 = v719 + 8 * v720;
  v1718.i64[0] = v1660;
  v1653 = v1702;
  __s1a = v1703;
  v723 = &v1702[8 * v1703];
  v1678 = v723;
  while (2)
  {
    if (v721 != v1663
      || v719 != v1660
      || ((void *)__b.i64[1] == v1663 ? (v724 = v1718.i64[0] == v1660) : (v724 = 0), !v724))
    {
      v725 = 0;
      do
      {
        v726 = (uint64_t *)(*(uint64_t (**)(void **))((char *)&off_1E8197858 + v725))(&v1716);
        v725 += 16;
      }
      while (!v726);
      if (!__s1a)
      {
LABEL_1120:
        v764 = 0;
        do
        {
          if (((*(uint64_t (**)(void **))((char *)&off_1E8197878 + v764))(&v1716) & 1) != 0)
            break;
          v20 = v764 == 16;
          v764 += 16;
        }
        while (!v20);
        v721 = v1716;
        v719 = __b.i64[0];
        v113 = (uint64_t)a8;
        continue;
      }
      v727 = *v726;
      v728 = (*v726 >> 4) ^ (*v726 >> 9);
      v729 = v1653;
      __n = v728;
      while (2)
      {
        v730 = **(_QWORD **)v729;
        v731 = *(unsigned int *)(*(_QWORD *)v729 + 16);
        if ((_DWORD)v731)
        {
          v732 = ((_DWORD)v731 - 1) & v728;
          v733 = (_QWORD *)(v730 + (v732 << 6));
          v734 = v733[3];
          if (v727 != v734)
          {
            v735 = 1;
            while (v734 != -4096)
            {
              v736 = v732 + v735++;
              v732 = v736 & (v731 - 1);
              v733 = (_QWORD *)(v730 + (v732 << 6));
              v734 = v733[3];
              if (v727 == v734)
                goto LABEL_1065;
            }
            goto LABEL_1064;
          }
        }
        else
        {
LABEL_1064:
          v733 = (_QWORD *)(v730 + (v731 << 6));
        }
LABEL_1065:
        v1756 = 6;
        if (v733 == (_QWORD *)(v730 + (v731 << 6)))
        {
          v737 = 0;
          v738 = 0;
          v1757 = 0;
          v1758 = 0;
        }
        else
        {
          v737 = 0;
          v738 = (llvm::BasicBlock *)v733[7];
          v1757 = 0;
          v1758 = (uint64_t)v738;
          if (v738 != (llvm::BasicBlock *)-8192 && v738 != (llvm::BasicBlock *)-4096 && v738 != 0)
          {
            v740 = v733[5] & 0xFFFFFFFFFFFFFFF8;
            v1757 = *(void **)v740;
            *(_QWORD *)v740 = &v1756;
            v1756 = v740 | 6;
            v737 = v1757;
            if (v1757)
              *(_QWORD *)v1757 = *(_QWORD *)v1757 & 7 | (unint64_t)&v1757;
            v738 = (llvm::BasicBlock *)v1758;
          }
        }
        if (v738 != (llvm::BasicBlock *)-8192 && v738 != (llvm::BasicBlock *)-4096 && v738 != 0)
        {
          v752 = v1756 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v1756 & 0xFFFFFFFFFFFFFFF8) = v737;
          if (v1757)
          {
            *(_QWORD *)v1757 = *(_QWORD *)v1757 & 7 | v752;
          }
          else
          {
            v753 = v1758;
            v754 = ***(int32x2_t ****)v1758;
            v755 = (unint64_t)v754[303];
            if (v755 <= v752)
            {
              v756 = v754[305].u32[0];
              if (v755 + 16 * v756 > v752)
              {
                v757 = v756 - 1;
                LODWORD(v758) = v757 & ((v1758 >> 4) ^ (v1758 >> 9));
                v759 = (uint64_t *)(v755 + 16 * v758);
                v760 = *v759;
                if (v1758 == *v759)
                {
LABEL_1104:
                  *v759 = -8192;
                  v754[304] = vadd_s32(v754[304], (int32x2_t)0x1FFFFFFFFLL);
                  v753 = v1758;
                }
                else
                {
                  v761 = 1;
                  while (v760 != -4096)
                  {
                    v762 = v758 + v761++;
                    v758 = v762 & v757;
                    v760 = *(_QWORD *)(v755 + 16 * v758);
                    if (v1758 == v760)
                    {
                      v759 = (uint64_t *)(v755 + 16 * v758);
                      goto LABEL_1104;
                    }
                  }
                }
                *(_BYTE *)(v753 + 17) &= ~1u;
              }
            }
          }
        }
        if (v738
          && !llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry((uint64_t)v114, (uint64_t)v738))
        {
          v742 = (_QWORD *)*((_QWORD *)v738 + 5);
          if (v742 != (_QWORD *)((char *)v738 + 40))
          {
            if (v742)
              v743 = v742 - 3;
            else
              v743 = 0;
            v744 = *((unsigned __int8 *)v743 + 16);
            v745 = v744 - 29;
            if (v744 != 30)
            {
              v746 = 2;
              switch(v745)
              {
                case 1:
                  goto LABEL_2550;
                case 2:
                  v746 = (*((_DWORD *)v743 + 5) >> 1) & 0x3FFFFFF;
                  goto LABEL_1114;
                case 3:
                case 9:
                  v746 = (*((_DWORD *)v743 + 5) & 0x7FFFFFF) - 1;
                  goto LABEL_1114;
                case 4:
                  goto LABEL_1091;
                case 7:
                  v746 = *((_WORD *)v743 + 9) & 1;
                  goto LABEL_1114;
                case 8:
                  v746 = 1;
                  goto LABEL_1091;
                case 10:
                  v746 = *((_DWORD *)v743 + 20) + 1;
LABEL_1114:
                  if (!v746)
                    goto LABEL_1108;
                  goto LABEL_1091;
                default:
                  goto LABEL_1108;
              }
            }
            if ((*((_DWORD *)v743 + 5) & 0x7FFFFFF) == 3)
              v746 = 2;
            else
              v746 = 1;
LABEL_1091:
            v747 = 0;
            v748 = 0;
            v749 = v746;
            v750 = v743 - 8;
            do
            {
              v751 = *((unsigned __int8 *)v743 + 16);
              if (v751 != 30)
                __asm { BR              X9 }
              llvm::BasicBlock::removePredecessor((llvm::BasicBlock *)v743[-4 * v748++ - 4], v738, 0);
              v747 += 2;
              v750 += 4;
            }
            while (v749 != v748);
          }
LABEL_1108:
          v763 = v1749;
          if (v1749 >= (unint64_t)HIDWORD(v1749))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1748, (uint64_t)&v1750, v1749 + 1, 8);
            v763 = v1749;
          }
          v723 = v1678;
          v114 = (llvm::BasicBlock *)a7;
          v728 = __n;
          *((_QWORD *)v1748 + v763) = v738;
          LODWORD(v1749) = (_DWORD)v1749 + 1;
        }
        v729 += 8;
        if (v729 == v723)
          goto LABEL_1120;
        continue;
      }
    }
    break;
  }
  v765 = (uint64_t **)v1748;
  v766 = v1749;
  if (!v1631)
  {
    v1716 = (void *)1;
    __b = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v1718 = __b;
    v1719 = __b;
    v1720 = __b;
    v1721 = &v1723;
    v1722 = 0x800000000;
    sub_1C627BE14(&v1716, (uint64_t *)v1748, (uint64_t *)v1748 + v1749);
    llvm::MemorySSAUpdater::removeBlocks((uint64_t)a13, (uint64_t)&v1716);
    if (v1721 != &v1723)
      free(v1721);
    if ((v1716 & 1) == 0)
      MEMORY[0x1CAA32FB4](__b.i64[0], 8);
    v765 = (uint64_t **)v1748;
    v766 = v1749;
  }
  if (v766)
  {
    v767 = v766;
    v768 = &v765[v766];
    while (1)
    {
      v769 = (uint64_t)(*v765 + 5);
      for (kk = (*v765)[6]; kk != v769; kk = *(_QWORD *)(kk + 8))
      {
        if (kk)
          v771 = kk - 24;
        else
          v771 = 0;
        v772 = *(_DWORD *)(v771 + 20);
        if ((v772 & 0x40000000) != 0)
        {
          v774 = *(_QWORD *)(v771 - 8);
          v773 = v772 & 0x7FFFFFF;
          if (!v773)
            continue;
        }
        else
        {
          v773 = v772 & 0x7FFFFFF;
          v774 = v771 - 32 * v773;
          if (!v773)
            continue;
        }
        v775 = 32 * v773;
        v776 = (_QWORD **)(v774 + 16);
        do
        {
          if (*(v776 - 2))
          {
            **v776 = *(v776 - 1);
            v777 = (uint64_t)*(v776 - 1);
            if (v777)
              *(_QWORD *)(v777 + 16) = *v776;
          }
          *(v776 - 2) = 0;
          v776 += 4;
          v775 -= 32;
        }
        while (v775);
      }
      if (++v765 == v768)
      {
        v778 = (llvm::BasicBlock **)v1748;
        v779 = 8 * v767;
        do
        {
          v780 = *v778++;
          llvm::BasicBlock::eraseFromParent(v780);
          v779 -= 8;
        }
        while (v779);
        v765 = (uint64_t **)v1748;
        break;
      }
    }
  }
  if (v765 != &v1750)
    free(v765);
  v1698 = v1700;
  v1699 = 0x400000000;
  v781 = a5;
  if ((_DWORD)v1703)
  {
    v788 = (uint64_t *)v1702;
    v1644 = (llvm::BasicBlock *)&v1702[8 * v1703];
    v1637 = v113 + 48;
    v1646 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      v789 = *(uint64_t **)v781;
      v790 = *(unsigned int *)(v781 + 8);
      v791 = *v788;
      v792 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(a1);
      if (!v792)
        goto LABEL_1167;
      v793 = *(_QWORD *)(v792 + 40);
      if (v793 == v792 + 40)
        goto LABEL_1167;
      if (v793)
        v794 = v793 - 24;
      else
        v794 = 0;
      v795 = *(unsigned __int8 *)(v794 + 16);
      v796 = v795 - 29;
      if (v795 != 30)
      {
        v797 = 0;
        switch(v796)
        {
          case 0:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
            goto LABEL_1172;
          case 1:
            goto LABEL_2550;
          case 2:
            v798 = (*(_DWORD *)(v794 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_1170;
          case 3:
            v798 = (*(_DWORD *)(v794 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_1170;
          case 10:
            v798 = *(_DWORD *)(v794 + 80) + 1;
LABEL_1170:
            if (v798 == 1)
              goto LABEL_1171;
            goto LABEL_1167;
          default:
            goto LABEL_1167;
        }
      }
      if ((*(_DWORD *)(v794 + 20) & 0x7FFFFFF) == 3)
LABEL_1167:
        v797 = 0;
      else
LABEL_1171:
        v797 = v792;
LABEL_1172:
      v799 = **(_QWORD **)(a1 + 32);
      v1697 = 0;
      v800 = *(_QWORD *)v791;
      v801 = *(unsigned int *)(v791 + 16);
      if ((_DWORD)v801)
      {
        v802 = ((_DWORD)v801 - 1) & ((v797 >> 4) ^ (v797 >> 9));
        v803 = (_QWORD *)(v800 + (v802 << 6));
        v804 = v803[3];
        if (v797 == v804)
          goto LABEL_1179;
        v805 = 1;
        while (v804 != -4096)
        {
          v806 = v802 + v805++;
          v802 = v806 & (v801 - 1);
          v803 = (_QWORD *)(v800 + (v802 << 6));
          v804 = v803[3];
          if (v797 == v804)
            goto LABEL_1179;
        }
      }
      v803 = (_QWORD *)(v800 + (v801 << 6));
LABEL_1179:
      v1716 = (void *)6;
      if (v803 == (_QWORD *)(v800 + (v801 << 6)))
      {
        v807 = 0;
        v808 = 0;
        __b = 0uLL;
      }
      else
      {
        v807 = 0;
        v808 = v803[7];
        __b.i64[0] = 0;
        __b.i64[1] = v808;
        if (v808 != -8192 && v808 != -4096 && v808 != 0)
        {
          v810 = v803[5] & 0xFFFFFFFFFFFFFFF8;
          __b.i64[0] = *(_QWORD *)v810;
          *(_QWORD *)v810 = &v1716;
          v1716 = (void *)(v810 | 6);
          v807 = __b.i64[0];
          if (__b.i64[0])
            *(_QWORD *)__b.i64[0] = *(_QWORD *)__b.i64[0] & 7 | (unint64_t)&__b;
          v808 = __b.i64[1];
        }
      }
      if (v808 != -8192 && v808 != -4096 && v808 != 0)
      {
        v819 = (unint64_t)v1716 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)((unint64_t)v1716 & 0xFFFFFFFFFFFFFFF8) = v807;
        if (__b.i64[0])
        {
          *(_QWORD *)__b.i64[0] = *(_QWORD *)__b.i64[0] & 7 | v819;
        }
        else
        {
          v820 = __b.i64[1];
          v821 = ***(int32x2_t ****)__b.i64[1];
          v822 = (unint64_t)v821[303];
          if (v822 <= v819)
          {
            v823 = v821[305].u32[0];
            if (v822 + 16 * v823 > v819)
            {
              v824 = v823 - 1;
              LODWORD(v825) = v824 & (((unsigned __int32)__b.i32[2] >> 4) ^ ((unsigned __int32)__b.i32[2] >> 9));
              v826 = (uint64_t *)(v822 + 16 * v825);
              v827 = *v826;
              if (__b.i64[1] != *v826)
              {
                v828 = 1;
                do
                {
                  if (v827 == -4096)
                    goto LABEL_1210;
                  v829 = v825 + v828++;
                  v825 = v829 & v824;
                  v827 = *(_QWORD *)(v822 + 16 * v825);
                }
                while (__b.i64[1] != v827);
                v826 = (uint64_t *)(v822 + 16 * v825);
              }
              *v826 = -8192;
              v821[304] = vadd_s32(v821[304], (int32x2_t)0x1FFFFFFFFLL);
              v820 = __b.i64[1];
LABEL_1210:
              *(_BYTE *)(v820 + 17) &= ~1u;
            }
          }
        }
      }
      v1697 = v808;
      v812 = *(_QWORD *)v791;
      v813 = *(unsigned int *)(v791 + 16);
      if ((_DWORD)v813)
      {
        v814 = ((_DWORD)v813 - 1) & ((v799 >> 4) ^ (v799 >> 9));
        v815 = (_QWORD *)(v812 + (v814 << 6));
        v816 = v815[3];
        if (v799 == v816)
          goto LABEL_1212;
        v817 = 1;
        while (v816 != -4096)
        {
          v818 = v814 + v817++;
          v814 = v818 & (v813 - 1);
          v815 = (_QWORD *)(v812 + (v814 << 6));
          v816 = v815[3];
          if (v799 == v816)
            goto LABEL_1212;
        }
      }
      v815 = (_QWORD *)(v812 + (v813 << 6));
LABEL_1212:
      v1648 = v788;
      v1716 = (void *)6;
      if (v815 == (_QWORD *)(v812 + (v813 << 6)))
      {
        v830 = 0;
        v831 = 0;
        __b = 0uLL;
      }
      else
      {
        v830 = 0;
        v831 = v815[7];
        __b.i64[0] = 0;
        __b.i64[1] = v831;
        if (v831 != -8192 && v831 != -4096 && v831 != 0)
        {
          v833 = v815[5] & 0xFFFFFFFFFFFFFFF8;
          __b.i64[0] = *(_QWORD *)v833;
          *(_QWORD *)v833 = &v1716;
          v1716 = (void *)(v833 | 6);
          v830 = __b.i64[0];
          if (__b.i64[0])
            *(_QWORD *)__b.i64[0] = *(_QWORD *)__b.i64[0] & 7 | (unint64_t)&__b;
          v831 = __b.i64[1];
        }
      }
      if (v831 != -8192 && v831 != -4096 && v831 != 0)
      {
        v873 = (unint64_t)v1716 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)((unint64_t)v1716 & 0xFFFFFFFFFFFFFFF8) = v830;
        if (__b.i64[0])
        {
          *(_QWORD *)__b.i64[0] = *(_QWORD *)__b.i64[0] & 7 | v873;
        }
        else
        {
          v874 = __b.i64[1];
          v875 = ***(int32x2_t ****)__b.i64[1];
          v876 = (unint64_t)v875[303];
          if (v876 <= v873)
          {
            v877 = v875[305].u32[0];
            if (v876 + 16 * v877 > v873)
            {
              v878 = v877 - 1;
              LODWORD(v879) = v878 & (((unsigned __int32)__b.i32[2] >> 4) ^ ((unsigned __int32)__b.i32[2] >> 9));
              v880 = (uint64_t *)(v876 + 16 * v879);
              v881 = *v880;
              if (__b.i64[1] != *v880)
              {
                v882 = 1;
                do
                {
                  if (v881 == -4096)
                    goto LABEL_1294;
                  v883 = v879 + v882++;
                  v879 = v883 & v878;
                  v881 = *(_QWORD *)(v876 + 16 * v879);
                }
                while (__b.i64[1] != v881);
                v880 = (uint64_t *)(v876 + 16 * v879);
              }
              *v880 = -8192;
              v875[304] = vadd_s32(v875[304], (int32x2_t)0x1FFFFFFFFLL);
              v874 = __b.i64[1];
LABEL_1294:
              *(_BYTE *)(v874 + 17) &= ~1u;
            }
          }
        }
      }
      v1753 = v1755;
      v1754 = 0x400000000;
      v835 = 8;
      v1748 = (void *)1;
      do
      {
        *(void **)((char *)&v1748 + v835) = (void *)-4096;
        v835 += 16;
      }
      while (v835 != 264);
      if (v790 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1753, (uint64_t)v1755, v790, 8);
        v836 = v1646;
LABEL_1233:
        v1664 = 0;
        v837 = &v789[v790];
        while (1)
        {
          v838 = *v789;
          v839 = *(_QWORD *)v791;
          v840 = *(unsigned int *)(v791 + 16);
          v841 = *v789 >> 4;
          if (!(_DWORD)v840)
            goto LABEL_1240;
          v842 = ((_DWORD)v840 - 1) & (v841 ^ (v838 >> 9));
          v843 = (_QWORD *)(v839 + (v842 << 6));
          v844 = v843[3];
          if (v838 != v844)
            break;
LABEL_1241:
          v1716 = (void *)6;
          if (v843 == (_QWORD *)(v839 + (v840 << 6)))
          {
            v847 = 0;
            v848 = 0;
            __b = 0uLL;
          }
          else
          {
            v847 = 0;
            v848 = (void *)v843[7];
            __b.i64[0] = 0;
            __b.i64[1] = (uint64_t)v848;
            if (v848 != (void *)-8192 && v848 != (void *)-4096 && v848 != 0)
            {
              v850 = v843[5] & 0xFFFFFFFFFFFFFFF8;
              __b.i64[0] = *(_QWORD *)v850;
              *(_QWORD *)v850 = &v1716;
              v1716 = (void *)(v850 | 6);
              v847 = __b.i64[0];
              if (__b.i64[0])
                *(_QWORD *)__b.i64[0] = *(_QWORD *)__b.i64[0] & 7 | (unint64_t)&__b;
              v848 = (void *)__b.i64[1];
            }
          }
          if (v848 != (void *)-8192 && v848 != (void *)-4096 && v848 != 0)
          {
            v860 = (unint64_t)v1716 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)((unint64_t)v1716 & 0xFFFFFFFFFFFFFFF8) = v847;
            if (__b.i64[0])
            {
              *(_QWORD *)__b.i64[0] = *(_QWORD *)__b.i64[0] & 7 | v860;
            }
            else
            {
              v861 = __b.i64[1];
              v862 = ***(int32x2_t ****)__b.i64[1];
              v863 = (unint64_t)v862[303];
              if (v863 <= v860)
              {
                v864 = v862[305].u32[0];
                if (v863 + 16 * v864 > v860)
                {
                  v865 = v864 - 1;
                  LODWORD(v866) = v865 & (((unsigned __int32)__b.i32[2] >> 4) ^ ((unsigned __int32)__b.i32[2] >> 9));
                  v867 = (uint64_t *)(v863 + 16 * v866);
                  v868 = *v867;
                  if (__b.i64[1] != *v867)
                  {
                    v869 = 1;
                    do
                    {
                      if (v868 == -4096)
                        goto LABEL_1275;
                      v870 = v866 + v869++;
                      v866 = v870 & v865;
                      v868 = *(_QWORD *)(v863 + 16 * v866);
                    }
                    while (__b.i64[1] != v868);
                    v867 = (uint64_t *)(v863 + 16 * v866);
                  }
                  *v867 = -8192;
                  v862[304] = vadd_s32(v862[304], (int32x2_t)0x1FFFFFFFFLL);
                  v861 = __b.i64[1];
LABEL_1275:
                  *(_BYTE *)(v861 + 17) &= ~1u;
                }
              }
            }
          }
          v1716 = v848;
          if (v848)
          {
            v852 = *(_DWORD *)(v113 + 16);
            if (v852)
            {
              v853 = *(_QWORD *)v113;
              v854 = v852 - 1;
              v855 = v854 & (v841 ^ (v838 >> 9));
              v856 = *(_QWORD *)(*(_QWORD *)v113 + 16 * v855);
              if (v838 == v856)
              {
LABEL_1263:
                v859 = *(_QWORD **)(v853 + 16 * v855 + 8);
                if (v859)
                {
                  sub_1C61D2364(&v1748, (uint64_t *)&v1716)[1] = v859;
                  v871 = v1754;
                  if (v1754 >= (unint64_t)HIDWORD(v1754))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1753, (uint64_t)v1755, v1754 + 1, 8);
                    v871 = v1754;
                  }
                  *((_QWORD *)v1753 + v871) = v848;
                  LODWORD(v1754) = v1754 + 1;
                  v836 = v1646;
                  if (v1664)
                  {
                    if (v1664 != v859)
                    {
                      v872 = v859;
                      while (v872)
                      {
                        v872 = (_QWORD *)*v872;
                        if (v872 == v1664)
                          goto LABEL_1284;
                      }
                    }
                  }
                  else
                  {
LABEL_1284:
                    v1664 = v859;
                  }
                }
              }
              else
              {
                v857 = 1;
                while (v856 != -4096)
                {
                  v858 = v855 + v857++;
                  v855 = v858 & v854;
                  v856 = *(_QWORD *)(v853 + 16 * v855);
                  if (v838 == v856)
                    goto LABEL_1263;
                }
              }
            }
          }
          if (++v789 == v837)
            goto LABEL_1296;
        }
        v845 = 1;
        while (v844 != -4096)
        {
          v846 = v842 + v845++;
          v842 = v846 & (v840 - 1);
          v843 = (_QWORD *)(v839 + (v842 << 6));
          v844 = v843[3];
          if (v838 == v844)
            goto LABEL_1241;
        }
LABEL_1240:
        v843 = (_QWORD *)(v839 + (v840 << 6));
        goto LABEL_1241;
      }
      v836 = v1646;
      if ((_DWORD)v790)
        goto LABEL_1233;
      v1664 = 0;
LABEL_1296:
      v1716 = (void *)1;
      for (mm = 8; mm != 136; mm += 16)
        *(int64x2_t *)((char *)&v1716 + mm) = v836;
      v1731 = v1733;
      v1732 = 0x1000000000;
      v885 = *(uint64_t **)(a1 + 32);
      for (nn = *(uint64_t **)(a1 + 40); v885 != nn; ++v885)
      {
        v887 = *v885;
        v1740 = 0;
        v888 = *(_QWORD *)v791;
        v889 = *(unsigned int *)(v791 + 16);
        if ((_DWORD)v889)
        {
          v890 = ((_DWORD)v889 - 1) & ((v887 >> 4) ^ (v887 >> 9));
          v891 = (_QWORD *)(v888 + (v890 << 6));
          v892 = v891[3];
          if (v887 == v892)
            goto LABEL_1306;
          v893 = 1;
          while (v892 != -4096)
          {
            v894 = v890 + v893++;
            v890 = v894 & (v889 - 1);
            v891 = (_QWORD *)(v888 + (v890 << 6));
            v892 = v891[3];
            if (v887 == v892)
              goto LABEL_1306;
          }
        }
        v891 = (_QWORD *)(v888 + (v889 << 6));
LABEL_1306:
        v1756 = 6;
        if (v891 == (_QWORD *)(v888 + (v889 << 6)))
        {
          v895 = 0;
          v896 = 0;
          v1757 = 0;
          v1758 = 0;
        }
        else
        {
          v895 = 0;
          v896 = (void *)v891[7];
          v1757 = 0;
          v1758 = (uint64_t)v896;
          if (v896 != (void *)-8192 && v896 != (void *)-4096 && v896 != 0)
          {
            v898 = v891[5] & 0xFFFFFFFFFFFFFFF8;
            v1757 = *(void **)v898;
            *(_QWORD *)v898 = &v1756;
            v1756 = v898 | 6;
            v895 = v1757;
            if (v1757)
              *(_QWORD *)v1757 = *(_QWORD *)v1757 & 7 | (unint64_t)&v1757;
            v896 = (void *)v1758;
          }
        }
        if (v896 != (void *)-8192 && v896 != (void *)-4096 && v896 != 0)
        {
          v902 = v1756 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v1756 & 0xFFFFFFFFFFFFFFF8) = v895;
          if (v1757)
          {
            *(_QWORD *)v1757 = *(_QWORD *)v1757 & 7 | v902;
          }
          else
          {
            v903 = v1758;
            v904 = ***(int32x2_t ****)v1758;
            v905 = (unint64_t)v904[303];
            if (v905 <= v902)
            {
              v906 = v904[305].u32[0];
              if (v905 + 16 * v906 > v902)
              {
                v907 = v906 - 1;
                LODWORD(v908) = v907 & ((v1758 >> 4) ^ (v1758 >> 9));
                v909 = (uint64_t *)(v905 + 16 * v908);
                v910 = *v909;
                if (v1758 != *v909)
                {
                  v911 = 1;
                  do
                  {
                    if (v910 == -4096)
                      goto LABEL_1335;
                    v912 = v908 + v911++;
                    v908 = v912 & v907;
                    v910 = *(_QWORD *)(v905 + 16 * v908);
                  }
                  while (v1758 != v910);
                  v909 = (uint64_t *)(v905 + 16 * v908);
                }
                *v909 = -8192;
                v904[304] = vadd_s32(v904[304], (int32x2_t)0x1FFFFFFFFLL);
                v903 = v1758;
LABEL_1335:
                *(_BYTE *)(v903 + 17) &= ~1u;
              }
            }
          }
        }
        v1740 = v896;
        if (!v896)
          continue;
        if ((v1716 & 1) != 0)
        {
          v900 = 16;
          p_b = &__b;
        }
        else
        {
          v900 = __b.i32[2];
          if (!__b.i32[2])
          {
            v921 = 0;
LABEL_1350:
            v922 = sub_1C5AC7B84((uint64_t)&v1716, (uint64_t)&v1740, &v1740, v921);
            *v922 = v1740;
            v923 = v1740;
            v924 = v1732;
            if (v1732 >= (unint64_t)HIDWORD(v1732))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1731, (uint64_t)v1733, v1732 + 1, 8);
              v924 = v1732;
            }
            *((_QWORD *)v1731 + v924) = v923;
            LODWORD(v1732) = v1732 + 1;
            continue;
          }
          p_b = (int64x2_t *)__b.i64[0];
        }
        v913 = v900 - 1;
        v914 = v913 & ((v896 >> 4) ^ (v896 >> 9));
        v915 = &p_b->i64[v914];
        v916 = (void *)*v915;
        if (v896 != (void *)*v915)
        {
          v917 = 0;
          v918 = 1;
          while (v916 != (void *)-4096)
          {
            if (v917)
              v919 = 0;
            else
              v919 = v916 == (void *)-8192;
            if (v919)
              v917 = v915;
            v920 = v914 + v918++;
            v914 = v920 & v913;
            v915 = &p_b->i64[v914];
            v916 = (void *)*v915;
            if (v896 == (void *)*v915)
              goto LABEL_1353;
          }
          if (v917)
            v921 = v917;
          else
            v921 = v915;
          goto LABEL_1350;
        }
LABEL_1353:
        ;
      }
      v1745 = (llvm::BasicBlock *)v1747;
      v1746 = 0x1000000000;
      v1756 = (uint64_t)v1760;
      v1757 = v1760;
      v1758 = 16;
      LODWORD(v1759) = 0;
      v925 = *(_QWORD *)(v831 + 8);
      if (v925)
      {
        while (1)
        {
          v926 = *(_QWORD *)(v925 + 24);
          v927 = *(unsigned __int8 *)(v926 + 16);
          v928 = v926 && v927 >= 0x1C;
          if (v928 && v927 - 29 <= 0xA)
            break;
          v925 = *(_QWORD *)(v925 + 8);
          if (!v925)
            goto LABEL_1386;
        }
LABEL_1368:
        v930 = *(_QWORD *)(v926 + 40);
        if (v930 != v1697)
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1756, v930);
          if (v930 != v831 && v931 != 0)
          {
            v933 = v1746;
            if (v1746 >= (unint64_t)HIDWORD(v1746))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1745, (uint64_t)v1747, v1746 + 1, 8);
              v933 = v1746;
            }
            *((_QWORD *)v1745 + v933) = v930;
            LODWORD(v1746) = v1746 + 1;
          }
        }
        while (1)
        {
          v925 = *(_QWORD *)(v925 + 8);
          if (!v925)
            break;
          v926 = *(_QWORD *)(v925 + 24);
          v934 = *(unsigned __int8 *)(v926 + 16);
          if (v926)
            v935 = v934 >= 0x1C;
          else
            v935 = 0;
          if (v935 && v934 - 29 < 0xB)
            goto LABEL_1368;
        }
        if (HIDWORD(v1758) != (_DWORD)v1759)
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1756, v831);
          while (1)
          {
            v1013 = v1746;
            do
            {
LABEL_1534:
              if (!v1013)
              {
                v1026 = sub_1C484358C(v1637, 152, 3);
                *(_OWORD *)(v1026 + 32) = 0u;
                v1027 = v1026 + 32;
                *(_OWORD *)(v1026 + 48) = 0u;
                *(_OWORD *)(v1026 + 64) = 0u;
                *(_OWORD *)v1026 = 0u;
                *(_OWORD *)(v1026 + 16) = 0u;
                *(_OWORD *)(v1026 + 80) = 0u;
                *(_OWORD *)(v1026 + 96) = 0u;
                *(_OWORD *)(v1026 + 112) = 0u;
                *(_OWORD *)(v1026 + 128) = 0u;
                *(_QWORD *)(v1026 + 144) = 0;
                *(_QWORD *)(v1026 + 56) = v1026 + 88;
                *(_QWORD *)(v1026 + 64) = v1026 + 88;
                *(_DWORD *)(v1026 + 72) = 8;
                v1640 = (_QWORD *)v1026;
                if (!v1664)
                {
                  v1033 = *(unint64_t **)(v113 + 32);
                  v1032 = *(_QWORD *)(v113 + 40);
                  if ((unint64_t)v1033 >= v1032)
                  {
                    v1041 = *(_QWORD **)(v113 + 24);
                    v1042 = v1033 - v1041;
                    v1043 = v1042 + 1;
                    if ((unint64_t)(v1042 + 1) >> 61)
                      goto LABEL_2547;
                    v1044 = v1032 - (_QWORD)v1041;
                    if (v1044 >> 2 > v1043)
                      v1043 = v1044 >> 2;
                    if ((unint64_t)v1044 >= 0x7FFFFFFFFFFFFFF8)
                      v1045 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v1045 = v1043;
                    if (v1045)
                    {
                      if (v1045 >> 61)
                        goto LABEL_2549;
                      v1046 = (char *)operator new(8 * v1045);
                    }
                    else
                    {
                      v1046 = 0;
                    }
                    v1050 = &v1046[8 * v1042];
                    *(_QWORD *)v1050 = v1640;
                    v1034 = v1050 + 8;
                    if (v1033 != v1041)
                    {
                      do
                      {
                        v1051 = *--v1033;
                        *((_QWORD *)v1050 - 1) = v1051;
                        v1050 -= 8;
                      }
                      while (v1033 != v1041);
                      v1033 = *(unint64_t **)(v113 + 24);
                    }
                    *(_QWORD *)(v113 + 24) = v1050;
                    *(_QWORD *)(v113 + 32) = v1034;
                    *(_QWORD *)(v113 + 40) = &v1046[8 * v1045];
                    if (v1033)
                      operator delete(v1033);
                  }
                  else
                  {
                    *v1033 = v1026;
                    v1034 = v1033 + 1;
                  }
                  *(_QWORD *)(v113 + 32) = v1034;
                  goto LABEL_1601;
                }
                v1028 = v1664;
                llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v1664, v1697, v113);
                *(_QWORD *)v1026 = v1664;
                v1030 = (unint64_t *)v1664[2];
                v1029 = v1664[3];
                if ((unint64_t)v1030 < v1029)
                {
                  *v1030 = v1026;
                  v1031 = v1030 + 1;
                  goto LABEL_1593;
                }
                v1035 = (_QWORD *)v1664[1];
                v1036 = v1030 - v1035;
                v1037 = v1036 + 1;
                if (!((unint64_t)(v1036 + 1) >> 61))
                {
                  v1038 = v1029 - (_QWORD)v1035;
                  if (v1038 >> 2 > v1037)
                    v1037 = v1038 >> 2;
                  if ((unint64_t)v1038 >= 0x7FFFFFFFFFFFFFF8)
                    v1039 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v1039 = v1037;
                  if (!v1039)
                  {
                    v1040 = 0;
                    goto LABEL_1586;
                  }
                  if (!(v1039 >> 61))
                  {
                    v1040 = (char *)operator new(8 * v1039);
LABEL_1586:
                    v1047 = &v1040[8 * v1036];
                    *(_QWORD *)v1047 = v1640;
                    v1031 = v1047 + 8;
                    if (v1030 == v1035)
                    {
                      v1049 = v1664;
                    }
                    else
                    {
                      do
                      {
                        v1048 = *--v1030;
                        *((_QWORD *)v1047 - 1) = v1048;
                        v1047 -= 8;
                      }
                      while (v1030 != v1035);
                      v1049 = v1664;
                      v1030 = (unint64_t *)v1664[1];
                    }
                    v1049[1] = v1047;
                    v1049[2] = v1031;
                    v1049[3] = &v1040[8 * v1039];
                    if (v1030)
                    {
                      operator delete(v1030);
                      v1028 = v1664;
                    }
                    else
                    {
                      v1028 = v1049;
                    }
LABEL_1593:
                    v1028[2] = v1031;
LABEL_1601:
                    v1052 = v1699;
                    v1053 = v1640;
                    if (v1699 >= (unint64_t)HIDWORD(v1699))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1698, (uint64_t)v1700, v1699 + 1, 8);
                      v1052 = v1699;
                    }
                    *((_QWORD *)v1698 + v1052) = v1640;
                    LODWORD(v1699) = v1699 + 1;
                    sub_1C4DB1D18(v1027, (HIDWORD(v1758) - (_DWORD)v1759));
                    v1054 = *(uint64_t **)(a1 + 32);
                    v1665 = *(uint64_t **)(a1 + 40);
                    if (v1665 != v1054)
                    {
                      while (2)
                      {
                        v1055 = *v1054;
                        v1056 = *(_QWORD *)v791;
                        v1057 = *(unsigned int *)(v791 + 16);
                        v1058 = *v1054 >> 4;
                        if (!(_DWORD)v1057)
                          goto LABEL_1610;
                        v1059 = ((_DWORD)v1057 - 1) & (v1058 ^ (v1055 >> 9));
                        v1060 = (_QWORD *)(v1056 + (v1059 << 6));
                        v1061 = v1060[3];
                        if (v1055 != v1061)
                        {
                          v1062 = 1;
                          while (v1061 != -4096)
                          {
                            v1063 = v1059 + v1062++;
                            v1059 = v1063 & (v1057 - 1);
                            v1060 = (_QWORD *)(v1056 + (v1059 << 6));
                            v1061 = v1060[3];
                            if (v1055 == v1061)
                              goto LABEL_1611;
                          }
LABEL_1610:
                          v1060 = (_QWORD *)(v1056 + (v1057 << 6));
                        }
LABEL_1611:
                        v1740 = (void *)6;
                        if (v1060 == (_QWORD *)(v1056 + (v1057 << 6)))
                        {
                          v1064 = 0;
                          v1065 = 0;
                          v1741 = 0;
                          v1742 = 0;
                        }
                        else
                        {
                          v1064 = 0;
                          v1065 = v1060[7];
                          v1741 = 0;
                          v1742 = v1065;
                          if (v1065 != -8192 && v1065 != -4096 && v1065 != 0)
                          {
                            v1067 = v1060[5] & 0xFFFFFFFFFFFFFFF8;
                            v1741 = *(void **)v1067;
                            *(_QWORD *)v1067 = &v1740;
                            v1740 = (void *)(v1067 | 6);
                            v1064 = v1741;
                            if (v1741)
                              *(_QWORD *)v1741 = *(_QWORD *)v1741 & 7 | (unint64_t)&v1741;
                            v1065 = v1742;
                          }
                        }
                        if (v1065 != -8192 && v1065 != -4096 && v1065 != 0)
                        {
                          v1080 = (unint64_t)v1740 & 0xFFFFFFFFFFFFFFF8;
                          *(_QWORD *)((unint64_t)v1740 & 0xFFFFFFFFFFFFFFF8) = v1064;
                          if (v1741)
                          {
                            *(_QWORD *)v1741 = *(_QWORD *)v1741 & 7 | v1080;
                          }
                          else
                          {
                            v1081 = v1742;
                            v1082 = ***(int32x2_t ****)v1742;
                            v1083 = (unint64_t)v1082[303];
                            if (v1083 <= v1080)
                            {
                              v1084 = v1082[305].u32[0];
                              if (v1083 + 16 * v1084 > v1080)
                              {
                                v1085 = v1084 - 1;
                                LODWORD(v1086) = v1085 & ((v1742 >> 4) ^ (v1742 >> 9));
                                v1087 = (uint64_t *)(v1083 + 16 * v1086);
                                v1088 = *v1087;
                                if (v1742 != *v1087)
                                {
                                  v1089 = 1;
                                  do
                                  {
                                    if (v1088 == -4096)
                                      goto LABEL_1647;
                                    v1090 = v1086 + v1089++;
                                    v1086 = v1090 & v1085;
                                    v1088 = *(_QWORD *)(v1083 + 16 * v1086);
                                  }
                                  while (v1742 != v1088);
                                  v1087 = (uint64_t *)(v1083 + 16 * v1086);
                                }
                                *v1087 = -8192;
                                v1082[304] = vadd_s32(v1082[304], (int32x2_t)0x1FFFFFFFFLL);
                                v1081 = v1742;
LABEL_1647:
                                *(_BYTE *)(v1081 + 17) &= ~1u;
                              }
                            }
                          }
                        }
                        if (v1065)
                        {
                          v1069 = sub_1C477672C((uint64_t)&v1756, v1065);
                          v1070 = v1757 == (void *)v1756 ? (uint64_t *)((char *)&v1758 + 4) : &v1758;
                          if (v1069 != (_QWORD *)((char *)v1757 + 8 * *(unsigned int *)v1070))
                          {
                            v1071 = a8[2].i32[0];
                            v1072 = v1053;
                            if (!v1071)
                              goto LABEL_1668;
                            v1073 = *a8;
                            v1074 = v1071 - 1;
                            v1075 = (v1071 - 1) & (v1058 ^ (v1055 >> 9));
                            v1076 = *(_QWORD *)(*(_QWORD *)a8 + 16 * v1075);
                            if (v1055 == v1076)
                            {
                              v1078 = a1;
                            }
                            else
                            {
                              v1077 = 1;
                              v1078 = a1;
                              do
                              {
                                if (v1076 == -4096)
                                {
                                  v1072 = v1053;
                                  goto LABEL_1668;
                                }
                                v1079 = v1075 + v1077++;
                                v1075 = v1079 & v1074;
                                v1076 = *(_QWORD *)(*(_QWORD *)&v1073 + 16 * v1075);
                              }
                              while (v1055 != v1076);
                            }
                            v1072 = v1053;
                            if (*(_QWORD *)(*(_QWORD *)&v1073 + 16 * v1075 + 8) == v1078)
                            {
                              llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v1053, v1065, (uint64_t)a8);
                            }
                            else
                            {
                              do
                              {
LABEL_1668:
                                v1099 = (uint64_t *)v1072[5];
                                v1101 = v1072[6];
                                if ((unint64_t)v1099 >= v1101)
                                {
                                  v1091 = (_QWORD *)v1072[4];
                                  v1092 = v1099 - v1091;
                                  v1093 = v1092 + 1;
                                  if ((unint64_t)(v1092 + 1) >> 61)
                                    goto LABEL_2547;
                                  v1094 = v1101 - (_QWORD)v1091;
                                  if (v1094 >> 2 > v1093)
                                    v1093 = v1094 >> 2;
                                  if ((unint64_t)v1094 >= 0x7FFFFFFFFFFFFFF8)
                                    v1095 = 0x1FFFFFFFFFFFFFFFLL;
                                  else
                                    v1095 = v1093;
                                  if (v1095)
                                  {
                                    if (v1095 >> 61)
                                      goto LABEL_2549;
                                    v1096 = (char *)operator new(8 * v1095);
                                  }
                                  else
                                  {
                                    v1096 = 0;
                                  }
                                  v1097 = (uint64_t *)&v1096[8 * v1092];
                                  *v1097 = v1065;
                                  v1098 = v1097 + 1;
                                  if (v1099 != v1091)
                                  {
                                    do
                                    {
                                      v1100 = *--v1099;
                                      *--v1097 = v1100;
                                    }
                                    while (v1099 != v1091);
                                    v1099 = (uint64_t *)v1072[4];
                                  }
                                  v1072[4] = v1097;
                                  v1072[5] = v1098;
                                  v1072[6] = &v1096[8 * v1095];
                                  if (v1099)
                                    operator delete(v1099);
                                  v1053 = v1640;
                                }
                                else
                                {
                                  *v1099 = v1065;
                                  v1098 = v1099 + 1;
                                }
                                v1072[5] = v1098;
                                sub_1C4774094((llvm::SmallPtrSetImplBase *)(v1072 + 7), v1065);
                                v1072 = (_QWORD *)*v1072;
                              }
                              while (v1072);
                            }
                          }
                        }
                        ++v1054;
                        v113 = (uint64_t)a8;
                        if (v1054 == v1665)
                          break;
                        continue;
                      }
                    }
                    v1102 = *(uint64_t **)(a1 + 8);
                    v1103 = *(uint64_t **)(a1 + 16);
                    while (2)
                    {
                      if (v1102 == v1103)
                        goto LABEL_1386;
                      v1104 = *v1102;
                      v1105 = *(_QWORD *)v791;
                      v1106 = *(unsigned int *)(v791 + 16);
                      if ((_DWORD)v1106)
                      {
                        v1107 = **(_QWORD **)(v1104 + 32);
                        v1108 = ((v1107 >> 4) ^ (v1107 >> 9)) & ((_DWORD)v1106 - 1);
                        v1109 = (_QWORD *)(v1105 + (v1108 << 6));
                        v1110 = v1109[3];
                        if (v1107 != v1110)
                        {
                          v1111 = 1;
                          while (v1110 != -4096)
                          {
                            v1112 = v1108 + v1111++;
                            v1108 = v1112 & (v1106 - 1);
                            v1109 = (_QWORD *)(v1105 + (v1108 << 6));
                            v1110 = v1109[3];
                            if (v1107 == v1110)
                              goto LABEL_1683;
                          }
                          goto LABEL_1682;
                        }
                      }
                      else
                      {
LABEL_1682:
                        v1109 = (_QWORD *)(v1105 + (v1106 << 6));
                      }
LABEL_1683:
                      v1740 = (void *)6;
                      if (v1109 == (_QWORD *)(v1105 + (v1106 << 6)))
                      {
                        v1113 = 0;
                        v1114 = 0;
                        v1741 = 0;
                        v1742 = 0;
                      }
                      else
                      {
                        v1113 = 0;
                        v1114 = v1109[7];
                        v1741 = 0;
                        v1742 = v1114;
                        if (v1114 != -8192 && v1114 != -4096 && v1114 != 0)
                        {
                          v1116 = v1109[5] & 0xFFFFFFFFFFFFFFF8;
                          v1741 = *(void **)v1116;
                          *(_QWORD *)v1116 = &v1740;
                          v1740 = (void *)(v1116 | 6);
                          v1113 = v1741;
                          if (v1741)
                            *(_QWORD *)v1741 = *(_QWORD *)v1741 & 7 | (unint64_t)&v1741;
                          v1114 = v1742;
                        }
                      }
                      if (v1114 != -8192 && v1114 != -4096 && v1114 != 0)
                      {
                        v1120 = (unint64_t)v1740 & 0xFFFFFFFFFFFFFFF8;
                        *(_QWORD *)((unint64_t)v1740 & 0xFFFFFFFFFFFFFFF8) = v1113;
                        if (v1741)
                        {
                          *(_QWORD *)v1741 = *(_QWORD *)v1741 & 7 | v1120;
                        }
                        else
                        {
                          v1121 = v1742;
                          v1122 = ***(int32x2_t ****)v1742;
                          v1123 = (unint64_t)v1122[303];
                          if (v1123 <= v1120)
                          {
                            v1124 = v1122[305].u32[0];
                            if (v1123 + 16 * v1124 > v1120)
                            {
                              v1125 = v1124 - 1;
                              LODWORD(v1126) = v1125 & ((v1742 >> 4) ^ (v1742 >> 9));
                              v1127 = (uint64_t *)(v1123 + 16 * v1126);
                              v1128 = *v1127;
                              if (v1742 != *v1127)
                              {
                                v1129 = 1;
                                do
                                {
                                  if (v1128 == -4096)
                                    goto LABEL_1715;
                                  v1130 = v1126 + v1129++;
                                  v1126 = v1130 & v1125;
                                  v1128 = *(_QWORD *)(v1123 + 16 * v1126);
                                }
                                while (v1742 != v1128);
                                v1127 = (uint64_t *)(v1123 + 16 * v1126);
                              }
                              *v1127 = -8192;
                              v1122[304] = vadd_s32(v1122[304], (int32x2_t)0x1FFFFFFFFLL);
                              v1121 = v1742;
LABEL_1715:
                              *(_BYTE *)(v1121 + 17) &= ~1u;
                            }
                          }
                        }
                      }
                      if (v1114)
                      {
                        v1118 = sub_1C477672C((uint64_t)&v1756, v1114);
                        v1119 = v1757 == (void *)v1756 ? (uint64_t *)((char *)&v1758 + 4) : &v1758;
                        if (v1118 != (_QWORD *)((char *)v1757 + 8 * *(unsigned int *)v1119))
                          sub_1C5C440D4(v1104, v1053, v791, (_QWORD *)v113);
                      }
                      ++v1102;
                      continue;
                    }
                  }
LABEL_2549:
                  sub_1C4764EE4();
                }
LABEL_2547:
                abort();
              }
              v1014 = *((_QWORD *)v1745 + --v1013);
              LODWORD(v1746) = v1013;
              v1015 = *(_QWORD *)(v1014 + 8);
            }
            while (!v1015);
            while (1)
            {
              v1016 = *(_QWORD *)(v1015 + 24);
              v1017 = *(unsigned __int8 *)(v1016 + 16);
              v1018 = v1016 && v1017 >= 0x1C;
              if (v1018 && v1017 - 29 <= 0xA)
                break;
              v1015 = *(_QWORD *)(v1015 + 8);
              if (!v1015)
                goto LABEL_1534;
            }
LABEL_1546:
            v1020 = *(_QWORD *)(v1016 + 40);
            if (sub_1C61EAAB0((uint64_t)&v1716, v1020, &v1740))
            {
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1756, v1020);
              if (v1021)
              {
                v1022 = v1746;
                if (v1746 >= (unint64_t)HIDWORD(v1746))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1745, (uint64_t)v1747, v1746 + 1, 8);
                  v1022 = v1746;
                }
                *((_QWORD *)v1745 + v1022) = v1020;
                LODWORD(v1746) = v1746 + 1;
              }
            }
            while (1)
            {
              v1015 = *(_QWORD *)(v1015 + 8);
              if (!v1015)
                break;
              v1016 = *(_QWORD *)(v1015 + 24);
              v1023 = *(unsigned __int8 *)(v1016 + 16);
              if (v1016)
                v1024 = v1023 >= 0x1C;
              else
                v1024 = 0;
              if (v1024 && v1023 - 29 < 0xB)
                goto LABEL_1546;
            }
          }
        }
      }
LABEL_1386:
      v1740 = v1744;
      v1741 = v1744;
      v1742 = 16;
      v1743 = 0;
      if (HIDWORD(v1758) == (_DWORD)v1759)
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1740, v1697);
      if ((_DWORD)v1732)
      {
        v937 = (uint64_t *)v1731;
        v938 = 8 * v1732;
        do
        {
          v939 = *v937;
          v940 = sub_1C477672C((uint64_t)&v1756, *v937);
          if (v1757 == (void *)v1756)
            v941 = (uint64_t *)((char *)&v1758 + 4);
          else
            v941 = &v1758;
          if (v940 == (_QWORD *)((char *)v1757 + 8 * *(unsigned int *)v941))
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1740, v939);
          ++v937;
          v938 -= 8;
        }
        while (v938);
      }
      v942 = (int8x16_t *)v1739;
      v1737 = v1739;
      v1738 = 0x400000000;
      if ((_DWORD)v1754)
      {
        sub_1C49EEBE4((uint64_t)&v1737, (uint64_t)&v1753);
        v942 = (int8x16_t *)v1737;
        v943 = (int8x16_t *)((char *)v1737 + 8 * v1738);
        v1761 = (unint64_t)&v1748;
        if ((_DWORD)v1738)
        {
          v944 = 126 - 2 * __clz(v1738);
          goto LABEL_1401;
        }
      }
      else
      {
        v1761 = (unint64_t)&v1748;
        v943 = (int8x16_t *)v1739;
      }
      v944 = 0;
LABEL_1401:
      sub_1C5C44968(v942, v943, (uint64_t *)&v1761, v944, 1);
      while (HIDWORD(v1742) != v1743 && (_DWORD)v1738)
      {
        v945 = *((_QWORD *)v1737 + v1738 - 1);
        LODWORD(v1738) = v1738 - 1;
        v1761 = 0;
        v946 = 0;
        if (sub_1C6184BF0((uint64_t)&v1748, v945, &v1761))
          v946 = *(char **)(v1761 + 8);
        v947 = v1746;
        if (v1746 >= (unint64_t)HIDWORD(v1746))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1745, (uint64_t)v1747, v1746 + 1, 8);
          v947 = v1746;
        }
        *((_QWORD *)v1745 + v947) = v945;
        v948 = v1746 + 1;
        do
        {
          v949 = *((_QWORD *)v1745 + --v948);
          LODWORD(v1746) = v948;
          if (v949 != v1697)
          {
            v950 = *(_QWORD *)(v949 + 8);
            if (v950)
            {
              while (1)
              {
                v951 = *(_QWORD *)(v950 + 24);
                v952 = *(unsigned __int8 *)(v951 + 16);
                v953 = v951 && v952 >= 0x1C;
                if (v953 && v952 - 29 <= 0xA)
                  break;
                v950 = *(_QWORD *)(v950 + 8);
                if (!v950)
                  goto LABEL_1438;
              }
LABEL_1421:
              v955 = *(_QWORD *)(v951 + 40);
              v956 = sub_1C477672C((uint64_t)&v1740, v955);
              if (v1741 == v1740)
                v957 = (uint64_t *)((char *)&v1742 + 4);
              else
                v957 = &v1742;
              if (v956 != (_QWORD *)((char *)v1741 + 8 * *(unsigned int *)v957))
              {
                *v956 = -2;
                ++v1743;
                v1691 = (uint64_t *)v955;
                v1692 = v946;
                sub_1C6327150((uint64_t)&v1761, (uint64_t)&v1748, (uint64_t *)&v1691, &v1692);
                v961 = v1746;
                if (v1746 >= (unint64_t)HIDWORD(v1746))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1745, (uint64_t)v1747, v1746 + 1, 8);
                  v961 = v1746;
                }
                *((_QWORD *)v1745 + v961) = v955;
                LODWORD(v1746) = v1746 + 1;
              }
              while (1)
              {
                v950 = *(_QWORD *)(v950 + 8);
                if (!v950)
                  break;
                v951 = *(_QWORD *)(v950 + 24);
                v958 = *(unsigned __int8 *)(v951 + 16);
                if (v951)
                  v959 = v958 >= 0x1C;
                else
                  v959 = 0;
                if (v959 && v958 - 29 < 0xB)
                  goto LABEL_1421;
              }
              v948 = v1746;
            }
          }
LABEL_1438:
          ;
        }
        while (v948);
      }
      v962 = (char *)v1731;
      v963 = (char *)v1753;
      v964 = &v1697;
      v1691 = &v1697;
      v1692 = (char *)v1731;
      v965 = (char *)v1731 + 8 * v1732;
      v966 = (char *)v1753 + 8 * v1754;
      v1693 = (char *)v1753;
      v1694 = &v1698;
      v1695 = v965;
      v1696 = v966;
      while (1)
      {
        if (v964 == (uint64_t *)&v1698 && v962 == v965 && v963 == v966)
        {
          v967 = v1694 == &v1698 && v1695 == v965;
          if (v967 && v1696 == v966)
            break;
        }
        v969 = 0;
        v1766 = 0;
        v1762 = 0;
        v1764 = 0;
        v1761 = (unint64_t)sub_1C6327218;
        v1763 = (int32x2_t ****)sub_1C632722C;
        v1765 = sub_1C6327240;
        do
        {
          v970 = *(uint64_t (**)(_QWORD))((char *)&v1761 + v969);
          v971 = *(unint64_t *)((char *)&v1761 + v969 + 8);
          v972 = (uint64_t **)((char *)&v1691 + (v971 >> 1));
          if ((v971 & 1) != 0)
            v970 = *(uint64_t (**)(_QWORD))(*v972 + v970);
          v973 = (uint64_t *)v970(v972);
          if (v973)
            break;
          v20 = v969 == 32;
          v969 += 16;
        }
        while (!v20);
        v974 = *v973;
        v1761 = 0;
        if ((sub_1C6184BF0((uint64_t)&v1748, v974, &v1761) & 1) != 0)
        {
          v975 = *(_QWORD **)(v1761 + 8);
          if (v975)
            llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v975, v974, v113);
        }
        v976 = 0;
        v1766 = 0;
        v1762 = 0;
        v1764 = 0;
        v1761 = (unint64_t)sub_1C5C46530;
        v1763 = (int32x2_t ****)sub_1C5C46554;
        v1765 = sub_1C5C46578;
        do
        {
          v977 = *(uint64_t (**)(_QWORD))((char *)&v1761 + v976);
          v978 = *(unint64_t *)((char *)&v1761 + v976 + 8);
          v979 = (uint64_t **)((char *)&v1691 + (v978 >> 1));
          if ((v978 & 1) != 0)
            v977 = *(uint64_t (**)(_QWORD))(*v979 + v977);
          if ((v977(v979) & 1) != 0)
            break;
          v20 = v976 == 32;
          v976 += 16;
        }
        while (!v20);
        v964 = v1691;
        v962 = v1692;
        v963 = v1693;
      }
      v980 = *(uint64_t **)(a1 + 8);
      v981 = *(uint64_t **)(a1 + 16);
      while (v980 != v981)
      {
        v982 = *v980;
        v983 = *(_QWORD *)v791;
        v984 = *(unsigned int *)(v791 + 16);
        if ((_DWORD)v984)
        {
          v985 = **(_QWORD **)(v982 + 32);
          v986 = ((v985 >> 4) ^ (v985 >> 9)) & ((_DWORD)v984 - 1);
          v987 = (_QWORD *)(v983 + (v986 << 6));
          v988 = v987[3];
          if (v985 == v988)
            goto LABEL_1476;
          v989 = 1;
          while (v988 != -4096)
          {
            v990 = v986 + v989++;
            v986 = v990 & (v984 - 1);
            v987 = (_QWORD *)(v983 + (v986 << 6));
            v988 = v987[3];
            if (v985 == v988)
              goto LABEL_1476;
          }
        }
        v987 = (_QWORD *)(v983 + (v984 << 6));
LABEL_1476:
        v1761 = 6;
        if (v987 == (_QWORD *)(v983 + (v984 << 6)))
        {
          v991 = 0;
          v992 = 0;
          v1762 = 0;
          v1763 = 0;
        }
        else
        {
          v991 = 0;
          v992 = v987[7];
          v1762 = 0;
          v1763 = (int32x2_t ****)v992;
          if (v992 != -8192 && v992 != -4096 && v992 != 0)
          {
            v994 = v987[5] & 0xFFFFFFFFFFFFFFF8;
            v1762 = *(_QWORD *)v994;
            *(_QWORD *)v994 = &v1761;
            v1761 = v994 | 6;
            v991 = v1762;
            if (v1762)
              *(_QWORD *)v1762 = *(_QWORD *)v1762 & 7 | (unint64_t)&v1762;
            v992 = (uint64_t)v1763;
          }
        }
        if (v992 != -8192 && v992 != -4096 && v992 != 0)
        {
          v998 = v1761 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v1761 & 0xFFFFFFFFFFFFFFF8) = v991;
          if (v1762)
          {
            *(_QWORD *)v1762 = *(_QWORD *)v1762 & 7 | v998;
          }
          else
          {
            v999 = v1763;
            v1000 = ***v1763;
            v1001 = (unint64_t)v1000[303];
            if (v1001 <= v998)
            {
              v1002 = v1000[305].u32[0];
              if (v1001 + 16 * v1002 > v998)
              {
                v1003 = v1002 - 1;
                LODWORD(v1004) = v1003 & ((v1763 >> 4) ^ (v1763 >> 9));
                v1005 = (int32x2_t *****)(v1001 + 16 * v1004);
                v1006 = *v1005;
                if (v1763 == *v1005)
                {
LABEL_1506:
                  *v1005 = (int32x2_t ****)-8192;
                  v1000[304] = vadd_s32(v1000[304], (int32x2_t)0x1FFFFFFFFLL);
                  v999 = v1763;
                }
                else
                {
                  v1007 = 1;
                  while (v1006 != (int32x2_t ****)-4096)
                  {
                    v1008 = v1004 + v1007++;
                    v1004 = v1008 & v1003;
                    v1006 = *(int32x2_t *****)(v1001 + 16 * v1004);
                    if (v1763 == v1006)
                    {
                      v1005 = (int32x2_t *****)(v1001 + 16 * v1004);
                      goto LABEL_1506;
                    }
                  }
                }
                *((_BYTE *)v999 + 17) &= ~1u;
              }
            }
          }
        }
        if (v992)
        {
          v996 = sub_1C477672C((uint64_t)&v1756, v992);
          v997 = v1757 == (void *)v1756 ? (uint64_t *)((char *)&v1758 + 4) : &v1758;
          if (v996 == (_QWORD *)((char *)v1757 + 8 * *(unsigned int *)v997))
          {
            v1761 = 0;
            v1009 = sub_1C6184BF0((uint64_t)&v1748, v992, &v1761);
            v1010 = 0;
            if (v1009)
              v1010 = *(_QWORD **)(v1761 + 8);
            v1011 = sub_1C5C440D4(v982, v1010, v791, (_QWORD *)v113);
            v1012 = v1699;
            if (v1699 >= (unint64_t)HIDWORD(v1699))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1698, (uint64_t)v1700, v1699 + 1, 8);
              v1012 = v1699;
            }
            *((_QWORD *)v1698 + v1012) = v1011;
            LODWORD(v1699) = v1699 + 1;
          }
        }
        ++v980;
      }
      if (v1737 != v1739)
        free(v1737);
      if (v1741 != v1740)
        free(v1741);
      if (v1757 != (void *)v1756)
        free(v1757);
      if (v1745 != (llvm::BasicBlock *)v1747)
        free(v1745);
      if (v1731 != v1733)
        free(v1731);
      if ((v1716 & 1) == 0)
        MEMORY[0x1CAA32FB4](__b.i64[0], 8);
      if ((v1748 & 1) == 0)
        MEMORY[0x1CAA32FB4](v1749, 8);
      if (v1753 != v1755)
        free(v1753);
      v788 = v1648 + 1;
      v781 = a5;
    }
    while (v1648 + 1 != (uint64_t *)v1644);
  }
  v1716 = (void *)1;
  __b = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v1718 = __b;
  v1719 = __b;
  v1720 = __b;
  v1721 = &v1723;
  v1722 = 0x800000000;
  v782 = *(uint64_t **)v781;
  v783 = *(unsigned int *)(v781 + 8);
  v1748 = &v1750;
  v1749 = (void *)0x1000000000;
  if (v783 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1748, (uint64_t)&v1750, v783, 8);
    v784 = (int)v1749;
    v786 = v1748;
    v785 = a1;
  }
  else
  {
    v784 = 0;
    v785 = a1;
    if (!(_DWORD)v783)
    {
      v787 = 16;
      goto LABEL_1720;
    }
    v786 = &v1750;
  }
  memcpy(&v786[v784], v782, 8 * v783);
  v784 = (int)v1749;
  v787 = HIDWORD(v1749);
LABEL_1720:
  v1131 = (v784 + v783);
  LODWORD(v1749) = v1131;
  v1133 = *(_BYTE **)(v785 + 32);
  v1132 = *(_BYTE **)(v785 + 40);
  v1134 = v1132 - v1133;
  v1135 = v1131 + ((v1132 - v1133) >> 3);
  if (v1135 > v787)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1748, (uint64_t)&v1750, v1135, 8);
    LODWORD(v1131) = (_DWORD)v1749;
  }
  if (v1132 != v1133)
  {
    memcpy((char *)v1748 + 8 * v1131, v1133, v1132 - v1133);
    LODWORD(v1131) = (_DWORD)v1749;
  }
  v1136 = a7;
  v1137 = v1131 + (v1134 >> 3);
  LODWORD(v1749) = v1137;
  if (v1137)
  {
    do
    {
      v1745 = 0;
      v1144 = (llvm::BasicBlock *)*((_QWORD *)v1748 + v1137 - 1);
      LODWORD(v1749) = v1137 - 1;
      v1745 = v1144;
      v1756 = (uint64_t)v1144;
      v1740 = 0;
      if ((sub_1C61A6880((uint64_t)&v1716, &v1756, &v1740) & 1) == 0
        && !llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(v1136, (uint64_t)v1745))
      {
        v1145 = (llvm::BasicBlock *)*((_QWORD *)v1745 + 5);
        if (v1145 != (llvm::BasicBlock *)((char *)v1745 + 40))
        {
          if (v1145)
            v1146 = (char *)v1145 - 24;
          else
            v1146 = 0;
          v1147 = v1146[16];
          v1148 = v1147 - 29;
          if (v1147 != 30)
          {
            v1149 = 2;
            switch(v1148)
            {
              case 1:
                goto LABEL_2550;
              case 2:
                v1149 = (*((_DWORD *)v1146 + 5) >> 1) & 0x3FFFFFF;
                goto LABEL_1751;
              case 3:
              case 9:
                v1149 = (*((_DWORD *)v1146 + 5) & 0x7FFFFFF) - 1;
                goto LABEL_1751;
              case 4:
                goto LABEL_1742;
              case 7:
                v1149 = *((_WORD *)v1146 + 9) & 1;
                goto LABEL_1751;
              case 8:
                v1149 = 1;
                goto LABEL_1742;
              case 10:
                v1149 = *((_DWORD *)v1146 + 20) + 1;
LABEL_1751:
                if (!v1149)
                  goto LABEL_1752;
                goto LABEL_1742;
              default:
                goto LABEL_1752;
            }
          }
          if ((*((_DWORD *)v1146 + 5) & 0x7FFFFFF) == 3)
            v1149 = 2;
          else
            v1149 = 1;
LABEL_1742:
          v1150 = 0;
          v1151 = 0;
          v1152 = v1149;
          v1153 = v1146 - 64;
          do
          {
            v1154 = v1146[16];
            if (v1154 != 30)
              __asm { BR              X9 }
            v1155 = (llvm::BasicBlock **)&v1146[-32 * v1151 - 32];
            v1156 = *v1155;
            llvm::BasicBlock::removePredecessor(*v1155, v1745, 0);
            v1157 = v1749;
            if (v1749 >= (unint64_t)HIDWORD(v1749))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1748, (uint64_t)&v1750, v1749 + 1, 8);
              v1157 = v1749;
            }
            *((_QWORD *)v1748 + v1157) = v1156;
            LODWORD(v1749) = (_DWORD)v1749 + 1;
            ++v1151;
            v1150 += 2;
            v1153 += 32;
          }
          while (v1152 != v1151);
        }
LABEL_1752:
        sub_1C50878C8((uint64_t)&v1716, (uint64_t *)&v1745);
        v1136 = a7;
      }
      v1137 = v1749;
    }
    while ((_DWORD)v1749);
  }
  if (!v1631)
    llvm::MemorySSAUpdater::removeBlocks((uint64_t)a13, (uint64_t)&v1716);
  v1138 = *(_QWORD *)a5;
  v1139 = *(unsigned int *)(a5 + 8);
  if (!(_DWORD)v1139)
    goto LABEL_1760;
  v1140 = (uint64_t **)(v1138 + 8 * v1139);
  v1141 = 8 * v1139 - 8;
  v1142 = *(uint64_t ***)a5;
  do
  {
    v1143 = *v1142++;
    v1756 = (uint64_t)v1143;
    v1740 = 0;
    if (sub_1C61A6880((uint64_t)&v1716, &v1756, &v1740))
      break;
    v1141 -= 8;
    v1138 = (uint64_t)v1142;
  }
  while (v1142 != v1140);
  if (v1142 != v1140)
  {
    v1175 = 8;
    v1140 = (uint64_t **)v1138;
    do
    {
      v1756 = *(_QWORD *)(v1138 + v1175);
      v1740 = 0;
      if ((sub_1C61A6880((uint64_t)&v1716, &v1756, &v1740) & 1) == 0)
        *v1140++ = *(uint64_t **)(v1138 + v1175);
      v1175 += 8;
      v1141 -= 8;
    }
    while (v1141);
  }
  else
  {
LABEL_1760:
    v1140 = (uint64_t **)v1138;
  }
  *(_DWORD *)(a5 + 8) = ((unint64_t)v1140 - *(_QWORD *)a5) >> 3;
  v1158 = a1;
  do
  {
    if ((_DWORD)v1722)
    {
      v1159 = (uint64_t *)v1721;
      v1160 = 8 * v1722;
      do
      {
        v1161 = sub_1C477672C(v1158 + 56, *v1159);
        v1162 = *(_QWORD *)(v1158 + 64);
        if (v1162 == *(_QWORD *)(v1158 + 56))
          v1163 = 76;
        else
          v1163 = 72;
        if (v1161 != (_QWORD *)(v1162 + 8 * *(unsigned int *)(v1158 + v1163)))
        {
          *v1161 = -2;
          ++*(_DWORD *)(v1158 + 80);
        }
        ++v1159;
        v1160 -= 8;
      }
      while (v1160);
    }
    v1164 = *(uint64_t **)(v1158 + 32);
    v1165 = *(uint64_t **)(v1158 + 40);
    if (v1164 != v1165)
    {
      v1166 = *(uint64_t ***)(v1158 + 32);
      while (1)
      {
        v1167 = *v1166++;
        v1756 = (uint64_t)v1167;
        v1740 = 0;
        if (sub_1C61A6880((uint64_t)&v1716, &v1756, &v1740))
          break;
        v1164 = (uint64_t *)v1166;
        if (v1166 == (uint64_t **)v1165)
        {
          v1164 = v1165;
          goto LABEL_1775;
        }
      }
      if (v1166 != (uint64_t **)v1165)
      {
        v1168 = v1164 + 1;
        do
        {
          v1756 = *v1168;
          v1740 = 0;
          if ((sub_1C61A6880((uint64_t)&v1716, &v1756, &v1740) & 1) == 0)
            *v1164++ = *v1168;
          ++v1168;
        }
        while (v1168 != v1165);
      }
    }
LABEL_1775:
    if (v1164 != *(uint64_t **)(v1158 + 40))
    {
      v765 = *(uint64_t ***)(v1158 + 40);
      *(_QWORD *)(v1158 + 40) = v1164;
    }
    v1158 = *(_QWORD *)v1158;
  }
  while (v1158);
  v1169 = *(uint64_t **)(a1 + 8);
  v1170 = *(uint64_t **)(a1 + 16);
  if (v1169 == v1170)
    goto LABEL_1826;
  while (1)
  {
    v1171 = *v1169;
    v1756 = **(_QWORD **)(*v1169 + 32);
    v1740 = 0;
    if (sub_1C61A6880((uint64_t)&v1716, &v1756, &v1740))
      break;
    if (++v1169 == v1170)
    {
      v1169 = v1170;
      goto LABEL_1826;
    }
  }
  v1172 = **(uint64_t *****)(v1171 + 32);
  if (!v1172 || (*((_BYTE *)v1172 + 23) & 0x10) == 0)
  {
    v1173 = "<unnamed loop>";
    v1174 = 14;
    goto LABEL_1810;
  }
  v1181 = ***v1172;
  v1182 = *(_QWORD *)(v1181 + 152);
  v1183 = *(unsigned int *)(v1181 + 168);
  if (!(_DWORD)v1183)
    goto LABEL_1808;
  LODWORD(v1184) = (v1183 - 1) & ((v1172 >> 4) ^ (v1172 >> 9));
  v1185 = (uint64_t ****)(v1182 + 16 * v1184);
  v1186 = *v1185;
  if (*v1185 != v1172)
  {
    v1187 = 1;
    while (v1186 != (uint64_t ***)-4096)
    {
      v1188 = v1184 + v1187++;
      v1184 = v1188 & (v1183 - 1);
      v1186 = *(uint64_t ****)(v1182 + 16 * v1184);
      if (v1186 == v1172)
      {
        v1185 = (uint64_t ****)(v1182 + 16 * v1184);
        goto LABEL_1809;
      }
    }
LABEL_1808:
    v1185 = (uint64_t ****)(v1182 + 16 * v1183);
  }
LABEL_1809:
  v1189 = v1185[1];
  v1190 = (uint64_t)*v1189;
  v1173 = (const char *)(v1189 + 2);
  v1174 = v1190;
LABEL_1810:
  a14(a15, v1171, v1173, v1174);
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::~LoopBase(v1171);
  v1191 = v1169 + 1;
  if (v1169 + 1 != v1170)
  {
    while (1)
    {
      v1192 = *v1191;
      v1756 = **(_QWORD **)(*v1191 + 32);
      v1740 = 0;
      if (sub_1C61A6880((uint64_t)&v1716, &v1756, &v1740))
        break;
      *v1169++ = *v1191;
LABEL_1825:
      if (++v1191 == v1170)
        goto LABEL_1826;
    }
    v1193 = **(uint64_t *****)(v1192 + 32);
    if (!v1193 || (*((_BYTE *)v1193 + 23) & 0x10) == 0)
    {
      v1194 = 14;
      v1195 = "<unnamed loop>";
LABEL_1824:
      a14(a15, v1192, v1195, v1194);
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::~LoopBase(v1192);
      goto LABEL_1825;
    }
    v1196 = ***v1193;
    v1197 = *(_QWORD *)(v1196 + 152);
    v1198 = *(unsigned int *)(v1196 + 168);
    if ((_DWORD)v1198)
    {
      LODWORD(v1199) = (v1198 - 1) & ((v1193 >> 4) ^ (v1193 >> 9));
      v1200 = (uint64_t ****)(v1197 + 16 * v1199);
      v1201 = *v1200;
      if (*v1200 == v1193)
      {
LABEL_1823:
        v1204 = v1200[1];
        v1205 = (uint64_t)*v1204;
        v1195 = (const char *)(v1204 + 2);
        v1194 = v1205;
        goto LABEL_1824;
      }
      v1202 = 1;
      while (v1201 != (uint64_t ***)-4096)
      {
        v1203 = v1199 + v1202++;
        v1199 = v1203 & (v1198 - 1);
        v1201 = *(uint64_t ****)(v1197 + 16 * v1199);
        if (v1201 == v1193)
        {
          v1200 = (uint64_t ****)(v1197 + 16 * v1199);
          goto LABEL_1823;
        }
      }
    }
    v1200 = (uint64_t ****)(v1197 + 16 * v1198);
    goto LABEL_1823;
  }
LABEL_1826:
  v1206 = a1;
  if (v1169 != *(uint64_t **)(a1 + 16))
  {
    v765 = *(uint64_t ***)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v1169;
  }
  if ((_DWORD)v1722)
  {
    v1207 = (uint64_t *)v1721;
    v1208 = (char *)v1721 + 8 * v1722;
    while (1)
    {
      v1209 = *v1207;
      v1210 = a8[2].i32[0];
      if (v1210)
      {
        v1211 = *a8;
        v1212 = v1210 - 1;
        LODWORD(v1213) = ((v1209 >> 4) ^ (v1209 >> 9)) & (v1210 - 1);
        v1214 = (uint64_t *)(*(_QWORD *)a8 + 16 * v1213);
        v1215 = *v1214;
        if (v1209 == *v1214)
        {
LABEL_1836:
          *v1214 = -8192;
          a8[1] = vadd_s32(a8[1], (int32x2_t)0x1FFFFFFFFLL);
        }
        else
        {
          v1216 = 1;
          while (v1215 != -4096)
          {
            v1217 = v1213 + v1216++;
            v1213 = v1217 & v1212;
            v1215 = *(_QWORD *)(*(_QWORD *)&v1211 + 16 * v1213);
            if (v1209 == v1215)
            {
              v1214 = (uint64_t *)(*(_QWORD *)&v1211 + 16 * v1213);
              goto LABEL_1836;
            }
          }
        }
      }
      v1218 = v1209 + 40;
      v1219 = *(_QWORD *)(v1209 + 48);
      if (v1219 != v1209 + 40)
        break;
LABEL_1859:
      if (++v1207 == (uint64_t *)v1208)
      {
        v1206 = a1;
        if ((_DWORD)v1722)
        {
          v1230 = (llvm::BasicBlock **)v1721;
          v1231 = 8 * v1722;
          do
          {
            v1232 = *v1230++;
            llvm::BasicBlock::eraseFromParent(v1232);
            v1231 -= 8;
          }
          while (v1231);
        }
        goto LABEL_1863;
      }
    }
    do
    {
      if (v1219)
        v1220 = v1219 - 24;
      else
        v1220 = 0;
      if (*(_QWORD *)(v1220 + 8))
      {
        v1221 = llvm::UndefValue::get(*(llvm::UndefValue **)v1220, (llvm::Type *)v765);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v1220, v1221, (llvm::Value *)1);
      }
      v1219 = *(_QWORD *)(v1219 + 8);
    }
    while (v1219 != v1218);
    for (i1 = *(_QWORD *)(v1209 + 48); ; i1 = *(_QWORD *)(i1 + 8))
    {
      if (i1 == v1218)
        goto LABEL_1859;
      if (i1)
        v1223 = i1 - 24;
      else
        v1223 = 0;
      v1224 = *(_DWORD *)(v1223 + 20);
      if ((v1224 & 0x40000000) != 0)
      {
        v1226 = *(_QWORD *)(v1223 - 8);
        v1225 = v1224 & 0x7FFFFFF;
        if (!v1225)
          continue;
      }
      else
      {
        v1225 = v1224 & 0x7FFFFFF;
        v1226 = v1223 - 32 * v1225;
        if (!v1225)
          continue;
      }
      v1227 = 32 * v1225;
      v1228 = (_QWORD **)(v1226 + 16);
      do
      {
        if (*(v1228 - 2))
        {
          **v1228 = *(v1228 - 1);
          v1229 = (uint64_t)*(v1228 - 1);
          if (v1229)
            *(_QWORD *)(v1229 + 16) = *v1228;
        }
        *(v1228 - 2) = 0;
        v1228 += 4;
        v1227 -= 32;
      }
      while (v1227);
    }
  }
LABEL_1863:
  if (v1748 != &v1750)
    free(v1748);
  if (v1721 != &v1723)
    free(v1721);
  v1233 = a5;
  if ((v1716 & 1) == 0)
  {
    MEMORY[0x1CAA32FB4](__b.i64[0], 8);
    v1233 = a5;
  }
  v1753 = v1755;
  v1754 = 0x400000000;
  v1234 = *(uint64_t **)v1233;
  v1235 = *(unsigned int *)(v1233 + 8);
  v1236 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(v1206);
  if (!v1236)
    goto LABEL_1876;
  v1237 = *(_QWORD *)(v1236 + 40);
  if (v1237 == v1236 + 40)
    goto LABEL_1876;
  if (v1237)
    v1238 = v1237 - 24;
  else
    v1238 = 0;
  if (*(_BYTE *)(v1238 + 16) != 30)
  {
    v1239 = 0;
    switch(*(_BYTE *)(v1238 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
        goto LABEL_1881;
      case 0x1E:
        goto LABEL_2550;
      case 0x1F:
        v1240 = (*(_DWORD *)(v1238 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_1879;
      case 0x20:
        v1240 = (*(_DWORD *)(v1238 + 20) & 0x7FFFFFF) - 1;
        goto LABEL_1879;
      case 0x27:
        v1240 = *(_DWORD *)(v1238 + 80) + 1;
LABEL_1879:
        if (v1240 == 1)
          goto LABEL_1880;
        goto LABEL_1876;
      default:
        goto LABEL_1876;
    }
  }
  if ((*(_DWORD *)(v1238 + 20) & 0x7FFFFFF) == 3)
LABEL_1876:
    v1239 = 0;
  else
LABEL_1880:
    v1239 = (_QWORD *)v1236;
LABEL_1881:
  v1745 = (llvm::BasicBlock *)v1747;
  v1746 = 0x400000000;
  v1761 = (unint64_t)&v1763;
  v1762 = 0x400000000;
  if (v1235 <= 4)
  {
    if (!(_DWORD)v1235)
    {
      v1241 = 0;
      goto LABEL_1885;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1761, (uint64_t)&v1763, v1235, 8);
  }
  v1241 = 0;
  v1246 = &v1234[v1235];
  do
  {
    v1247 = a8[2].i32[0];
    if (v1247)
    {
      v1248 = *v1234;
      v1249 = *a8;
      v1250 = v1247 - 1;
      v1251 = ((*v1234 >> 4) ^ (*v1234 >> 9)) & (v1247 - 1);
      v1252 = *(_QWORD *)(*(_QWORD *)a8 + 16 * (((*v1234 >> 4) ^ (*v1234 >> 9)) & v1250));
      if (*v1234 == v1252)
      {
LABEL_1899:
        v1255 = *(llvm **)(*(_QWORD *)&v1249 + 16 * v1251 + 8);
        if (v1255)
        {
          v1256 = v1746;
          if (v1746 >= (unint64_t)HIDWORD(v1746))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1745, (uint64_t)v1747, v1746 + 1, 8);
            v1256 = v1746;
          }
          *((_QWORD *)v1745 + v1256) = v1255;
          LODWORD(v1746) = v1746 + 1;
          v1257 = v1762;
          if (v1762 >= (unint64_t)HIDWORD(v1762))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1761, (uint64_t)&v1763, v1762 + 1, 8);
            v1257 = v1762;
          }
          *(_QWORD *)(v1761 + 8 * v1257) = v1248;
          LODWORD(v1762) = v1762 + 1;
          if (v1241)
          {
            if (v1241 != v1255)
            {
              v1258 = v1255;
              while (v1258)
              {
                v1258 = *(llvm **)v1258;
                if (v1258 == v1241)
                  goto LABEL_1909;
              }
            }
          }
          else
          {
LABEL_1909:
            v1241 = v1255;
          }
        }
      }
      else
      {
        v1253 = 1;
        while (v1252 != -4096)
        {
          v1254 = v1251 + v1253++;
          v1251 = v1254 & v1250;
          v1252 = *(_QWORD *)(*(_QWORD *)&v1249 + 16 * v1251);
          if (v1248 == v1252)
            goto LABEL_1899;
        }
      }
    }
    ++v1234;
  }
  while (v1234 != v1246);
LABEL_1885:
  v1716 = &v1718.u64[1];
  __b.i64[0] = (uint64_t)&v1718.i64[1];
  __b.i64[1] = 16;
  v1718.i32[0] = 0;
  v1242 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(a1);
  if (!v1242)
    goto LABEL_1892;
  v1243 = *(_QWORD *)(v1242 + 40);
  if (v1243 == v1242 + 40)
    goto LABEL_1892;
  if (v1243)
    v1244 = v1243 - 24;
  else
    v1244 = 0;
  if (*(_BYTE *)(v1244 + 16) != 30)
  {
    v1245 = 0;
    switch(*(_BYTE *)(v1244 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
        goto LABEL_1916;
      case 0x1E:
        goto LABEL_2550;
      case 0x1F:
        v1259 = (*(_DWORD *)(v1244 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_1914;
      case 0x20:
        v1259 = (*(_DWORD *)(v1244 + 20) & 0x7FFFFFF) - 1;
        goto LABEL_1914;
      case 0x27:
        v1259 = *(_DWORD *)(v1244 + 80) + 1;
LABEL_1914:
        if (v1259 == 1)
          goto LABEL_1915;
        goto LABEL_1892;
      default:
        goto LABEL_1892;
    }
  }
  if ((*(_DWORD *)(v1244 + 20) & 0x7FFFFFF) == 3)
LABEL_1892:
    v1245 = 0;
  else
LABEL_1915:
    v1245 = v1242;
LABEL_1916:
  v1260 = **(_QWORD **)(a1 + 32);
  v1748 = &v1750;
  v1749 = (void *)0x1000000000;
  v1261 = *(_QWORD *)(v1260 + 8);
  if (v1261)
  {
    while (1)
    {
      v1262 = *(_QWORD *)(v1261 + 24);
      v1263 = *(unsigned __int8 *)(v1262 + 16);
      v1264 = v1262 && v1263 >= 0x1C;
      if (v1264 && v1263 - 29 <= 0xA)
        break;
      v1261 = *(_QWORD *)(v1261 + 8);
      if (!v1261)
        goto LABEL_1926;
    }
LABEL_1969:
    v1289 = *(_QWORD *)(v1262 + 40);
    if (v1289 != v1245)
    {
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1716, *(_QWORD *)(v1262 + 40));
      if (v1289 != v1260 && v1290 != 0)
      {
        v1292 = v1749;
        if (v1749 >= (unint64_t)HIDWORD(v1749))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1748, (uint64_t)&v1750, v1749 + 1, 8);
          v1292 = v1749;
        }
        *((_QWORD *)v1748 + v1292) = v1289;
        LODWORD(v1749) = (_DWORD)v1749 + 1;
      }
    }
    while (1)
    {
      v1261 = *(_QWORD *)(v1261 + 8);
      if (!v1261)
        break;
      v1262 = *(_QWORD *)(v1261 + 24);
      v1293 = *(unsigned __int8 *)(v1262 + 16);
      if (v1262)
        v1294 = v1293 >= 0x1C;
      else
        v1294 = 0;
      if (v1294 && v1293 - 29 < 0xB)
        goto LABEL_1969;
    }
  }
LABEL_1926:
  if (__b.i32[3] != v1718.i32[0])
  {
    v1266 = v1749;
    while ((_DWORD)v1749)
    {
      while (1)
      {
        v1310 = *((_QWORD *)v1748 + --v1266);
        LODWORD(v1749) = v1266;
        if (v1310 != v1260)
          break;
LABEL_2063:
        if (!v1266)
          goto LABEL_1928;
      }
      v1311 = a8[2].i32[0];
      if (!v1311)
        goto LABEL_2017;
      v1312 = *a8;
      v1313 = v1311 - 1;
      v1314 = (v1311 - 1) & ((v1310 >> 4) ^ (v1310 >> 9));
      v1315 = *(_QWORD *)(*(_QWORD *)a8 + 16 * v1314);
      if (v1310 != v1315)
      {
        v1316 = 1;
        do
        {
          if (v1315 == -4096)
            goto LABEL_2017;
          v1317 = v1314 + v1316++;
          v1314 = v1317 & v1313;
          v1315 = *(_QWORD *)(*(_QWORD *)&v1312 + 16 * v1314);
        }
        while (v1310 != v1315);
      }
      v1318 = *(_QWORD *)(*(_QWORD *)&v1312 + 16 * v1314 + 8);
      if (v1318)
        v1319 = v1318 == a1;
      else
        v1319 = 1;
      if (v1319)
      {
LABEL_2017:
        while (1)
        {
          v1310 = *(_QWORD *)(v1310 + 8);
          if (!v1310)
            break;
          v1320 = *(_QWORD *)(v1310 + 24);
          v1321 = *(unsigned __int8 *)(v1320 + 16);
          if (v1320)
            v1322 = v1321 >= 0x1C;
          else
            v1322 = 0;
          if (v1322 && v1321 - 29 <= 0xA)
          {
LABEL_2025:
            v1324 = *(_QWORD *)(v1320 + 40);
            v1325 = sub_1C477672C(a1 + 56, v1324);
            v1326 = *(_QWORD *)(a1 + 64);
            if (v1326 == *(_QWORD *)(a1 + 56))
              v1327 = (unsigned int *)(a1 + 76);
            else
              v1327 = (unsigned int *)(a1 + 72);
            if (v1325 != (_QWORD *)(v1326 + 8 * *v1327))
            {
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1716, v1324);
              if (v1328)
              {
                v1329 = v1749;
                if (v1749 >= (unint64_t)HIDWORD(v1749))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1748, (uint64_t)&v1750, v1749 + 1, 8);
                  v1329 = v1749;
                }
                *((_QWORD *)v1748 + v1329) = v1324;
                LODWORD(v1749) = (_DWORD)v1749 + 1;
              }
            }
            while (1)
            {
              v1310 = *(_QWORD *)(v1310 + 8);
              if (!v1310)
                goto LABEL_2065;
              v1320 = *(_QWORD *)(v1310 + 24);
              v1330 = *(unsigned __int8 *)(v1320 + 16);
              if (v1320)
                v1331 = v1330 >= 0x1C;
              else
                v1331 = 0;
              if (v1331 && v1330 - 29 < 0xB)
                goto LABEL_2025;
            }
          }
        }
      }
      else
      {
        v1333 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(v1318);
        if (!v1333)
          goto LABEL_2049;
        v1334 = *(_QWORD *)(v1333 + 40);
        if (v1334 == v1333 + 40)
          goto LABEL_2049;
        if (v1334)
          v1335 = v1334 - 24;
        else
          v1335 = 0;
        if (*(_BYTE *)(v1335 + 16) != 30)
        {
          v1336 = 0;
          switch(*(_BYTE *)(v1335 + 16))
          {
            case 0x1D:
            case 0x21:
            case 0x22:
            case 0x23:
            case 0x24:
            case 0x25:
            case 0x26:
              goto LABEL_2054;
            case 0x1E:
              goto LABEL_2550;
            case 0x1F:
              v1337 = (*(_DWORD *)(v1335 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_2052;
            case 0x20:
              v1337 = (*(_DWORD *)(v1335 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_2052;
            case 0x27:
              v1337 = *(_DWORD *)(v1335 + 80) + 1;
LABEL_2052:
              if (v1337 == 1)
                goto LABEL_2053;
              goto LABEL_2049;
            default:
              goto LABEL_2049;
          }
        }
        if ((*(_DWORD *)(v1335 + 20) & 0x7FFFFFF) == 3)
LABEL_2049:
          v1336 = 0;
        else
LABEL_2053:
          v1336 = v1333;
LABEL_2054:
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1716, v1336);
        if (v1338)
        {
          v1339 = *(uint64_t **)(v1318 + 32);
          v1340 = *(_QWORD *)(v1318 + 40) - (_QWORD)v1339;
          if (v1340)
          {
            v1341 = 8 * (v1340 >> 3);
            do
            {
              if (*v1339 != v1310)
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1716, *v1339);
              ++v1339;
              v1341 -= 8;
            }
            while (v1341);
          }
          v1342 = v1749;
          if (v1749 >= (unint64_t)HIDWORD(v1749))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1748, (uint64_t)&v1750, v1749 + 1, 8);
            v1342 = v1749;
          }
          *((_QWORD *)v1748 + v1342) = v1336;
          v1266 = (_DWORD)v1749 + 1;
          LODWORD(v1749) = (_DWORD)v1749 + 1;
          goto LABEL_2063;
        }
      }
LABEL_2065:
      v1266 = v1749;
    }
  }
LABEL_1928:
  if (v1748 != &v1750)
    free(v1748);
  v1267 = a1;
  v1268 = *(llvm **)a1;
  if (__b.i32[3] != v1718.i32[0] && v1268 != v1241)
  {
    v1270 = a1 + 56;
    do
    {
      v1271 = sub_1C477672C((uint64_t)v1268 + 56, (uint64_t)v1239);
      v1272 = *((_QWORD *)v1268 + 8);
      if (v1272 == *((_QWORD *)v1268 + 7))
        v1273 = 76;
      else
        v1273 = 72;
      if (v1271 != (_QWORD *)(v1272 + 8 * *(unsigned int *)((char *)v1268 + v1273)))
      {
        *v1271 = -2;
        ++*((_DWORD *)v1268 + 20);
      }
      v1274 = *(uint64_t **)(a1 + 32);
      v1275 = *(_QWORD *)(a1 + 40) - (_QWORD)v1274;
      if (v1275)
      {
        v1276 = 8 * (v1275 >> 3);
        do
        {
          v1277 = sub_1C477672C((uint64_t)v1268 + 56, *v1274);
          v1278 = *((_QWORD *)v1268 + 8);
          if (v1278 == *((_QWORD *)v1268 + 7))
            v1279 = 76;
          else
            v1279 = 72;
          if (v1277 != (_QWORD *)(v1278 + 8 * *(unsigned int *)((char *)v1268 + v1279)))
          {
            *v1277 = -2;
            ++*((_DWORD *)v1268 + 20);
          }
          ++v1274;
          v1276 -= 8;
        }
        while (v1276);
      }
      v1280 = (uint64_t *)*((_QWORD *)v1268 + 4);
      v1281 = (uint64_t *)*((_QWORD *)v1268 + 5);
      if (v1280 != v1281)
      {
        while (v1239 != (_QWORD *)*v1280)
        {
          v1282 = sub_1C477672C(v1270, *v1280);
          v1283 = *(_QWORD *)(a1 + 64);
          v1284 = (unsigned int *)(v1283 == *(_QWORD *)(a1 + 56) ? a1 + 76 : a1 + 72);
          if (v1282 != (_QWORD *)(v1283 + 8 * *v1284))
            break;
          if (++v1280 == v1281)
          {
            v1280 = v1281;
            goto LABEL_1956;
          }
        }
        for (i2 = v1280 + 1; i2 != v1281; ++i2)
        {
          if (v1239 != (_QWORD *)*i2)
          {
            v1286 = sub_1C477672C(v1270, *i2);
            v1287 = *(_QWORD *)(a1 + 64);
            v1288 = (unsigned int *)(v1287 == *(_QWORD *)(a1 + 56) ? a1 + 76 : a1 + 72);
            if (v1286 == (_QWORD *)(v1287 + 8 * *v1288))
              *v1280++ = *i2;
          }
        }
      }
LABEL_1956:
      if (v1280 != *((uint64_t **)v1268 + 5))
        *((_QWORD *)v1268 + 5) = v1280;
      v1268 = *(llvm **)v1268;
    }
    while (v1268 != v1241);
    v1748 = v1239;
    v1296 = *a8;
    v1297 = a8[2].i32[0];
    if (!v1241)
    {
      if (!v1297)
      {
        llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::removeChildLoop(*(_QWORD *)a1, a1);
        goto LABEL_2004;
      }
      v1597 = v1297 - 1;
      LODWORD(v1598) = (v1297 - 1) & ((v1239 >> 4) ^ (v1239 >> 9));
      v1599 = (void **)(*(_QWORD *)&v1296 + 16 * v1598);
      v1600 = *v1599;
      if (v1239 == *v1599)
      {
LABEL_2559:
        *v1599 = (void *)-8192;
        a8[1] = vadd_s32(a8[1], (int32x2_t)0x1FFFFFFFFLL);
      }
      else
      {
        v1601 = 1;
        while (v1600 != (_QWORD *)-4096)
        {
          v1602 = v1598 + v1601++;
          v1598 = v1602 & v1597;
          v1600 = *(_QWORD **)(*(_QWORD *)&v1296 + 16 * v1598);
          if (v1239 == v1600)
          {
            v1599 = (void **)(*(_QWORD *)&v1296 + 16 * v1598);
            goto LABEL_2559;
          }
        }
      }
LABEL_2003:
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::removeChildLoop(*(_QWORD *)a1, a1);
      if (v1241)
      {
        *(_QWORD *)a1 = v1241;
        v1344 = (uint64_t *)*((_QWORD *)v1241 + 2);
        v1343 = *((_QWORD *)v1241 + 3);
        if ((unint64_t)v1344 >= v1343)
        {
          v1352 = (_QWORD *)*((_QWORD *)v1241 + 1);
          v1353 = v1344 - v1352;
          v1354 = v1353 + 1;
          if ((unint64_t)(v1353 + 1) >> 61)
            goto LABEL_2547;
          v1355 = v1343 - (_QWORD)v1352;
          if (v1355 >> 2 > v1354)
            v1354 = v1355 >> 2;
          if ((unint64_t)v1355 >= 0x7FFFFFFFFFFFFFF8)
            v1356 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v1356 = v1354;
          if (v1356)
          {
            if (v1356 >> 61)
              goto LABEL_2549;
            v1357 = (char *)operator new(8 * v1356);
          }
          else
          {
            v1357 = 0;
          }
          v1361 = (uint64_t *)&v1357[8 * v1353];
          *v1361 = a1;
          v1345 = v1361 + 1;
          if (v1344 != v1352)
          {
            do
            {
              v1362 = *--v1344;
              *--v1361 = v1362;
            }
            while (v1344 != v1352);
            v1344 = (uint64_t *)*((_QWORD *)v1241 + 1);
          }
          *((_QWORD *)v1241 + 1) = v1361;
          *((_QWORD *)v1241 + 2) = v1345;
          *((_QWORD *)v1241 + 3) = &v1357[8 * v1356];
          if (v1344)
            operator delete(v1344);
        }
        else
        {
          *v1344 = a1;
          v1345 = v1344 + 1;
        }
        *((_QWORD *)v1241 + 2) = v1345;
        goto LABEL_2104;
      }
LABEL_2004:
      v1308 = (uint64_t *)a8[4];
      v1307 = (unint64_t)a8[5];
      if ((unint64_t)v1308 >= v1307)
      {
        v1346 = (_QWORD *)a8[3];
        v1347 = v1308 - v1346;
        v1348 = v1347 + 1;
        if ((unint64_t)(v1347 + 1) >> 61)
          goto LABEL_2547;
        v1349 = v1307 - (_QWORD)v1346;
        if (v1349 >> 2 > v1348)
          v1348 = v1349 >> 2;
        if ((unint64_t)v1349 >= 0x7FFFFFFFFFFFFFF8)
          v1350 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1350 = v1348;
        if (v1350)
        {
          if (v1350 >> 61)
            goto LABEL_2549;
          v1351 = (char *)operator new(8 * v1350);
        }
        else
        {
          v1351 = 0;
        }
        v1358 = (uint64_t *)&v1351[8 * v1347];
        *v1358 = a1;
        v1309 = v1358 + 1;
        if (v1308 == v1346)
        {
          v1359 = a8;
        }
        else
        {
          do
          {
            v1360 = *--v1308;
            *--v1358 = v1360;
          }
          while (v1308 != v1346);
          v1359 = a8;
          v1308 = (uint64_t *)a8[3];
        }
        v1359[3] = (int32x2_t)v1358;
        v1359[4] = (int32x2_t)v1309;
        v1359[5] = (int32x2_t)&v1351[8 * v1350];
        if (v1308)
          operator delete(v1308);
      }
      else
      {
        *v1308 = a1;
        v1309 = v1308 + 1;
      }
      a8[4] = (int32x2_t)v1309;
LABEL_2104:
      v1267 = a1;
      goto LABEL_2105;
    }
    if (v1297)
    {
      v1298 = v1297 - 1;
      v1299 = v1298 & ((v1239 >> 4) ^ (v1239 >> 9));
      v1300 = (_QWORD *)(*(_QWORD *)&v1296 + 16 * v1299);
      v1301 = (_QWORD *)*v1300;
      if ((_QWORD *)*v1300 == v1239)
      {
LABEL_2002:
        v1300[1] = v1241;
        goto LABEL_2003;
      }
      v1302 = 0;
      v1303 = 1;
      while (v1301 != (_QWORD *)-4096)
      {
        if (v1302)
          v1304 = 0;
        else
          v1304 = v1301 == (_QWORD *)-8192;
        if (v1304)
          v1302 = v1300;
        v1305 = v1299 + v1303++;
        v1299 = v1305 & v1298;
        v1300 = (_QWORD *)(*(_QWORD *)&v1296 + 16 * v1299);
        v1301 = (_QWORD *)*v1300;
        if ((_QWORD *)*v1300 == v1239)
          goto LABEL_2002;
      }
      if (v1302)
        v1306 = v1302;
      else
        v1306 = v1300;
    }
    else
    {
      v1306 = 0;
    }
    v1300 = sub_1C4EB6AAC((uint64_t)a8, (uint64_t)&v1748, (uint64_t *)&v1748, v1306);
    *v1300 = v1748;
    v1300[1] = 0;
    goto LABEL_2002;
  }
LABEL_2105:
  v1363 = *(uint64_t **)(v1267 + 32);
  v1364 = *(uint64_t **)(v1267 + 40);
  if (__b.i32[3] != v1718.i32[0])
  {
    v1748 = &v1716;
    if (v1363 != v1364)
    {
      v1365 = (int8x16_t *)v1363;
      while (1)
      {
        v1366 = v1748;
        v1367 = sub_1C477672C((uint64_t)v1748, *v1363);
        v1368 = v1366[1];
        v1369 = v1368 == *v1366 ? 20 : 16;
        if (v1367 == (_QWORD *)(v1368 + 8 * *(unsigned int *)((char *)v1366 + v1369)))
          break;
        ++v1363;
        v1365 = (int8x16_t *)((char *)v1365 + 8);
        if (v1363 == v1364)
        {
          v1363 = v1364;
          goto LABEL_2131;
        }
      }
      v1370 = v1364 - 1;
      v1371 = (char *)v1364 - (char *)v1365;
      while (v1363 != v1370)
      {
        v1372 = *v1370--;
        v1373 = v1748;
        v1374 = sub_1C477672C((uint64_t)v1748, v1372);
        v1375 = v1373[1];
        if (v1375 == *v1373)
          v1376 = 20;
        else
          v1376 = 16;
        --v1364;
        v1371 -= 8;
        if (v1374 != (_QWORD *)(v1375 + 8 * *(unsigned int *)((char *)v1373 + v1376)))
        {
          if (v1371 < 17)
          {
LABEL_2127:
            v1380 = 0;
            v1377 = 0;
          }
          else
          {
            if ((v1371 >> 3) + 1 >= 0xFFFFFFFFFFFFFFFLL)
              v1377 = 0xFFFFFFFFFFFFFFFLL;
            else
              v1377 = (v1371 >> 3) + 1;
            v1378 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
            while (1)
            {
              v1379 = (uint64_t *)operator new(8 * v1377, v1378);
              if (v1379)
                break;
              v105 = v1377 > 1;
              v1377 >>= 1;
              if (!v105)
                goto LABEL_2127;
            }
            v1380 = v1379;
          }
          v1363 = sub_1C5C46758(v1365, v1364, (uint64_t *)&v1748, (v1371 >> 3) + 1, v1380, v1377);
          if (v1380)
            operator delete(v1380);
          break;
        }
      }
    }
LABEL_2131:
    v1364 = *(uint64_t **)(a1 + 40);
  }
  sub_1C6327254((llvm::SmallPtrSetImplBase *)&v1748, v1363, v1364);
  if (__b.i32[3] == v1718.i32[0])
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1748, (uint64_t)v1239);
  v1381 = *(uint64_t **)(a1 + 40);
  v1382 = v1363;
  if (v1363 != v1381)
  {
    v1383 = v1363;
    do
    {
      v1384 = sub_1C477672C(a1 + 56, *v1383);
      v1385 = *(_QWORD *)(a1 + 64);
      if (v1385 == *(_QWORD *)(a1 + 56))
        v1386 = (unsigned int *)(a1 + 76);
      else
        v1386 = (unsigned int *)(a1 + 72);
      if (v1384 != (_QWORD *)(v1385 + 8 * *v1386))
      {
        *v1384 = -2;
        ++*(_DWORD *)(a1 + 80);
      }
      ++v1383;
    }
    while (v1383 != v1381);
    v1382 = *(uint64_t **)(a1 + 40);
  }
  if (v1363 != v1382)
    *(_QWORD *)(a1 + 40) = v1363;
  v1387 = (uint64_t *)v1761;
  v1388 = v1762;
  v1756 = (uint64_t)a8;
  if (v1762 < 0x81)
  {
LABEL_2149:
    sub_1C5C46BC4((uint64_t)v1387, &v1387[v1388], (uint64_t **)&v1756, v1388, 0, 0);
  }
  else
  {
    v1389 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v1390 = v1762;
    while (1)
    {
      v1391 = (uint64_t *)operator new(8 * v1390, v1389);
      if (v1391)
        break;
      v105 = v1390 > 1;
      v1390 >>= 1;
      if (!v105)
        goto LABEL_2149;
    }
    v1393 = v1391;
    sub_1C5C46BC4((uint64_t)v1387, &v1387[v1388], (uint64_t **)&v1756, v1388, v1391, v1390);
    operator delete(v1393);
  }
  v1756 = (uint64_t)v1760;
  v1757 = v1760;
  v1758 = 16;
  LODWORD(v1759) = 0;
  v1394 = *(llvm **)a1;
  v1740 = &v1742;
  v1741 = (void *)0x1000000000;
  v1395 = HIDWORD(v1750);
  if (HIDWORD(v1750) != (_DWORD)v1751)
  {
    v1396 = v1762;
    if ((_DWORD)v1762)
    {
      while (1)
      {
        v1425 = *(_QWORD *)(v1761 + 8 * v1396 - 8);
        LODWORD(v1762) = v1396 - 1;
        v1426 = a8[2].i32[0];
        if (!v1426)
          goto LABEL_2204;
        v1427 = *a8;
        v1428 = v1426 - 1;
        v1429 = ((v1425 >> 4) ^ (v1425 >> 9)) & (v1426 - 1);
        v1430 = *(_QWORD *)(*(_QWORD *)a8 + 16 * v1429);
        if (v1425 != v1430)
          break;
LABEL_2203:
        v1433 = *(llvm **)(*(_QWORD *)&v1427 + 16 * v1429 + 8);
LABEL_2205:
        if (v1394 != v1433)
        {
          do
          {
            sub_1C5C4659C(v1394, &v1748);
            v1394 = *(llvm **)v1394;
          }
          while (v1394 != v1433);
          v1394 = v1433;
        }
        v1434 = v1741;
        if (v1741 >= (unint64_t)HIDWORD(v1741))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1740, (uint64_t)&v1742, v1741 + 1, 8);
          v1434 = v1741;
        }
        *((_QWORD *)v1740 + v1434) = v1425;
        v1435 = (_DWORD)v1741 + 1;
        do
        {
          while (1)
          {
            v1436 = (_QWORD *)*((_QWORD *)v1740 + --v1435);
            LODWORD(v1741) = v1435;
            if (v1436 != v1239)
            {
              v1437 = v1436[1];
              if (v1437)
                break;
            }
LABEL_2222:
            if (!v1435)
              goto LABEL_2241;
          }
          while (1)
          {
            v1438 = *(_QWORD *)(v1437 + 24);
            v1439 = *(unsigned __int8 *)(v1438 + 16);
            v1440 = v1438 && v1439 >= 0x1C;
            if (v1440 && v1439 - 29 <= 0xA)
              break;
            v1437 = *(_QWORD *)(v1437 + 8);
            if (!v1437)
              goto LABEL_2222;
          }
LABEL_2224:
          v1442 = *(_QWORD *)(v1438 + 40);
          v1443 = sub_1C477672C((uint64_t)&v1748, v1442);
          if (v1749 == v1748)
            v1444 = (unsigned int *)&v1750 + 1;
          else
            v1444 = (unsigned int *)&v1750;
          if (v1443 != (_QWORD *)((char *)v1749 + 8 * *v1444))
          {
            *v1443 = -2;
            LODWORD(v1751) = (_DWORD)v1751 + 1;
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1756, v1442);
            v1445 = v1741;
            if (v1741 >= (unint64_t)HIDWORD(v1741))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1740, (uint64_t)&v1742, v1741 + 1, 8);
              v1445 = v1741;
            }
            *((_QWORD *)v1740 + v1445) = v1442;
            LODWORD(v1741) = (_DWORD)v1741 + 1;
          }
          while (1)
          {
            v1437 = *(_QWORD *)(v1437 + 8);
            if (!v1437)
              break;
            v1438 = *(_QWORD *)(v1437 + 24);
            v1446 = *(unsigned __int8 *)(v1438 + 16);
            if (v1438)
              v1447 = v1446 >= 0x1C;
            else
              v1447 = 0;
            if (v1447 && v1446 - 29 < 0xB)
              goto LABEL_2224;
          }
          v1435 = v1741;
        }
        while ((_DWORD)v1741);
LABEL_2241:
        v1449 = v1757;
        v1450 = v1756;
        v1451 = (uint64_t *)((char *)&v1758 + 4);
        if (v1757 != (void *)v1756)
          v1451 = &v1758;
        v1452 = *(unsigned int *)v1451;
        v1453 = (void **)v1757;
        if ((_DWORD)v1452)
        {
          v1454 = 0;
          while (*(_QWORD *)((char *)v1757 + v1454) >= 0xFFFFFFFFFFFFFFFELL)
          {
            v1454 += 8;
            if (8 * v1452 == v1454)
              goto LABEL_2290;
          }
          v1453 = (void **)((char *)v1757 + v1454);
        }
        v1455 = (void **)((char *)v1757 + 8 * v1452);
        if (v1453 != v1455)
        {
          v1456 = *v1453;
LABEL_2251:
          v1457 = a8[2].i32[0];
          if (v1457)
          {
            v1458 = *a8;
            v1459 = v1457 - 1;
            LODWORD(v1460) = ((v1456 >> 4) ^ (v1456 >> 9)) & v1459;
            v1461 = (_QWORD *)(*(_QWORD *)a8 + 16 * v1460);
            v1462 = (void *)*v1461;
            if (v1456 == (void *)*v1461)
            {
              v1464 = ((v1456 >> 4) ^ (v1456 >> 9)) & v1459;
LABEL_2258:
              v1466 = *(_QWORD **)(*(_QWORD *)&v1458 + 16 * v1464 + 8);
              if (v1466)
              {
                if (v1466 != (_QWORD *)a1)
                {
                  while (v1466)
                  {
                    v1466 = (_QWORD *)*v1466;
                    if (v1466 == (_QWORD *)a1)
                      goto LABEL_2279;
                  }
                }
                v1737 = v1456;
                v1467 = (void *)*v1461;
                if (v1433)
                {
                  if (v1467 != v1456)
                  {
                    v1468 = 0;
                    v1469 = 1;
                    while (v1467 != (void *)-4096)
                    {
                      if (v1468)
                        v1470 = 0;
                      else
                        v1470 = v1467 == (void *)-8192;
                      if (v1470)
                        v1468 = v1461;
                      v1471 = v1460 + v1469++;
                      LODWORD(v1460) = v1471 & v1459;
                      v1461 = (_QWORD *)(*(_QWORD *)&v1458 + 16 * v1460);
                      v1467 = (void *)*v1461;
                      if ((void *)*v1461 == v1456)
                        goto LABEL_2278;
                    }
                    if (v1468)
                      v1472 = v1468;
                    else
                      v1472 = v1461;
                    v1461 = sub_1C4EB6AAC((uint64_t)a8, (uint64_t)&v1737, (uint64_t *)&v1737, v1472);
                    *v1461 = v1737;
                    v1461[1] = 0;
                  }
LABEL_2278:
                  v1461[1] = v1433;
                }
                else if (v1456 == v1467)
                {
LABEL_2288:
                  *v1461 = -8192;
                  a8[1] = vadd_s32(a8[1], (int32x2_t)0x1FFFFFFFFLL);
                }
                else
                {
                  v1475 = 1;
                  while (v1467 != (void *)-4096)
                  {
                    v1476 = v1460 + v1475++;
                    v1460 = v1476 & v1459;
                    v1467 = *(void **)(*(_QWORD *)&v1458 + 16 * v1460);
                    if (v1456 == v1467)
                    {
                      v1461 = (_QWORD *)(*(_QWORD *)&v1458 + 16 * v1460);
                      goto LABEL_2288;
                    }
                  }
                }
              }
            }
            else
            {
              v1463 = 1;
              LODWORD(v1464) = ((v1456 >> 4) ^ (v1456 >> 9)) & v1459;
              while (v1462 != (void *)-4096)
              {
                v1465 = v1464 + v1463++;
                v1464 = v1465 & v1459;
                v1462 = *(void **)(*(_QWORD *)&v1458 + 16 * v1464);
                if (v1456 == v1462)
                  goto LABEL_2258;
              }
            }
          }
LABEL_2279:
          v1473 = (unint64_t *)(v1453 + 1);
          while (v1473 != (unint64_t *)v1455)
          {
            v1474 = *v1473++;
            v1456 = (void *)v1474;
            if (v1474 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v1453 = (void **)(v1473 - 1);
              goto LABEL_2251;
            }
          }
          v1449 = v1757;
          v1450 = v1756;
        }
LABEL_2290:
        if (v1449 != (void *)v1450)
        {
          if (v1758 >= 0x21 && 4 * (HIDWORD(v1758) - (int)v1759) < v1758)
          {
            free(v1449);
            v1479 = 1 << (33 - __clz(HIDWORD(v1758) - (_DWORD)v1759 - 1));
            v105 = (HIDWORD(v1758) - (_DWORD)v1759) > 0x10;
            LODWORD(v1759) = 0;
            if (v105)
              v1480 = v1479;
            else
              v1480 = 32;
            v1758 = v1480;
            v1481 = malloc_type_malloc(8 * v1480, 0x4065EBACuLL);
            if (!v1481)
              goto LABEL_2566;
            v1757 = v1481;
            memset(v1481, 255, 8 * v1758);
            goto LABEL_2292;
          }
          memset(v1449, 255, 8 * v1758);
        }
        LODWORD(v1759) = 0;
        HIDWORD(v1758) = 0;
LABEL_2292:
        v1395 = HIDWORD(v1750);
        v1396 = v1762;
        if (HIDWORD(v1750) == (_DWORD)v1751 || (_DWORD)v1762 == 0)
          goto LABEL_2153;
      }
      v1431 = 1;
      while (v1430 != -4096)
      {
        v1432 = v1429 + v1431++;
        v1429 = v1432 & v1428;
        v1430 = *(_QWORD *)(*(_QWORD *)&v1427 + 16 * v1429);
        if (v1425 == v1430)
          goto LABEL_2203;
      }
LABEL_2204:
      v1433 = 0;
      goto LABEL_2205;
    }
  }
LABEL_2153:
  if (v1394)
  {
    do
    {
      sub_1C5C4659C(v1394, &v1748);
      v1394 = *(llvm **)v1394;
    }
    while (v1394);
    v1395 = HIDWORD(v1750);
  }
  if (v1749 == v1748)
    v1397 = v1395;
  else
    v1397 = v1750;
  if ((_DWORD)v1397)
  {
    v1398 = 8 * v1397;
    v1399 = (unint64_t *)v1749;
    while (*v1399 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v1399;
      v1398 -= 8;
      if (!v1398)
        goto LABEL_2189;
    }
  }
  else
  {
    v1399 = (unint64_t *)v1749;
  }
  v1400 = (unint64_t *)((char *)v1749 + 8 * v1397);
  if (v1399 != v1400)
  {
    v1401 = a8[2].i32[0];
    v1402 = v1401 - 1;
    v1403 = a8[1];
    v1404 = *v1399;
    if (v1401)
    {
LABEL_2167:
      v1405 = *a8;
      LODWORD(v1406) = ((v1404 >> 4) ^ (v1404 >> 9)) & v1402;
      v1407 = (uint64_t *)(*(_QWORD *)a8 + 16 * v1406);
      v1408 = *v1407;
      if (v1404 == *v1407)
      {
        v1411 = ((v1404 >> 4) ^ (v1404 >> 9)) & v1402;
LABEL_2173:
        v1413 = *(_QWORD **)(*(_QWORD *)&v1405 + 16 * v1411 + 8);
        if (v1413)
        {
          if (v1413 != (_QWORD *)a1)
          {
            while (v1413)
            {
              v1413 = (_QWORD *)*v1413;
              if (v1413 == (_QWORD *)a1)
                goto LABEL_2184;
            }
          }
          if (v1404 == v1408)
          {
LABEL_2183:
            *v1407 = -8192;
            v1403 = vadd_s32(v1403, (int32x2_t)0x1FFFFFFFFLL);
            a8[1] = v1403;
          }
          else
          {
            v1414 = 1;
            while (v1408 != -4096)
            {
              v1415 = v1406 + v1414++;
              v1406 = v1415 & v1402;
              v1408 = *(_QWORD *)(*(_QWORD *)&v1405 + 16 * v1406);
              if (v1404 == v1408)
              {
                v1407 = (uint64_t *)(*(_QWORD *)&v1405 + 16 * v1406);
                goto LABEL_2183;
              }
            }
          }
        }
      }
      else
      {
        v1409 = 1;
        v1410 = *v1407;
        LODWORD(v1411) = ((v1404 >> 4) ^ (v1404 >> 9)) & v1402;
        while (v1410 != -4096)
        {
          v1412 = v1411 + v1409++;
          v1411 = v1412 & v1402;
          v1410 = *(_QWORD *)(*(_QWORD *)&v1405 + 16 * v1411);
          if (v1404 == v1410)
            goto LABEL_2173;
        }
      }
    }
LABEL_2184:
    v1416 = v1399 + 1;
    while (v1416 != v1400)
    {
      v1417 = *v1416++;
      v1404 = v1417;
      if (v1417 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v1399 = v1416 - 1;
        if (v1401)
          goto LABEL_2167;
        goto LABEL_2184;
      }
    }
  }
LABEL_2189:
  v1419 = *(uint64_t **)(a1 + 8);
  v1418 = *(unint64_t **)(a1 + 16);
  if (__b.i32[3] != v1718.i32[0])
  {
    v1737 = &v1716;
    if (v1419 != (uint64_t *)v1418)
    {
      v1420 = (int8x16_t *)v1419;
      while (1)
      {
        v1421 = v1737;
        v1422 = sub_1C477672C((uint64_t)v1737, **(_QWORD **)(*v1419 + 32));
        v1423 = v1421[1];
        v1424 = v1423 == *v1421 ? 20 : 16;
        if (v1422 == (_QWORD *)(v1423 + 8 * *(unsigned int *)((char *)v1421 + v1424)))
          break;
        ++v1419;
        v1420 = (int8x16_t *)((char *)v1420 + 8);
        if (v1419 == (uint64_t *)v1418)
        {
          v1419 = (uint64_t *)v1418;
          goto LABEL_2326;
        }
      }
      v1482 = (uint64_t *)(v1418 - 1);
      v1483 = (char *)v1418 - (char *)v1420;
      while (v1419 != v1482)
      {
        v1484 = *v1482--;
        v1485 = v1737;
        v1486 = sub_1C477672C((uint64_t)v1737, **(_QWORD **)(v1484 + 32));
        v1487 = v1485[1];
        if (v1487 == *v1485)
          v1488 = 20;
        else
          v1488 = 16;
        --v1418;
        v1483 -= 8;
        if (v1486 != (_QWORD *)(v1487 + 8 * *(unsigned int *)((char *)v1485 + v1488)))
        {
          if (v1483 < 17)
          {
LABEL_2322:
            v1492 = 0;
            v1489 = 0;
          }
          else
          {
            if ((v1483 >> 3) + 1 >= 0xFFFFFFFFFFFFFFFLL)
              v1489 = 0xFFFFFFFFFFFFFFFLL;
            else
              v1489 = (v1483 >> 3) + 1;
            v1490 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
            while (1)
            {
              v1491 = (uint64_t *)operator new(8 * v1489, v1490);
              if (v1491)
                break;
              v105 = v1489 > 1;
              v1489 >>= 1;
              if (!v105)
                goto LABEL_2322;
            }
            v1492 = v1491;
          }
          v1419 = sub_1C5C47EE8(v1420, v1418, (uint64_t *)&v1737, (v1483 >> 3) + 1, v1492, v1489);
          if (v1492)
            operator delete(v1492);
          break;
        }
      }
    }
LABEL_2326:
    v1418 = *(unint64_t **)(a1 + 16);
  }
  if (v1419 == (uint64_t *)v1418)
    goto LABEL_2389;
  v1493 = v1419;
  do
  {
    v1494 = (_QWORD *)*v1493;
    v1495 = v1754;
    if (v1754 >= (unint64_t)HIDWORD(v1754))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1753, (uint64_t)v1755, v1754 + 1, 8);
      v1495 = v1754;
    }
    *((_QWORD *)v1753 + v1495) = v1494;
    LODWORD(v1754) = v1754 + 1;
    *v1494 = 0;
    v1496 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v1494);
    if (!v1496)
      goto LABEL_2337;
    v1497 = *(_QWORD *)(v1496 + 40);
    if (v1497 == v1496 + 40)
      goto LABEL_2337;
    v1498 = v1497 - 24;
    if (!v1497)
      v1498 = 0;
    v1499 = *(unsigned __int8 *)(v1498 + 16);
    v1500 = v1499 - 29;
    if (v1499 != 30)
    {
      v1501 = 0;
      switch(v1500)
      {
        case 0:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_2342;
        case 1:
          goto LABEL_2550;
        case 2:
          v1502 = (*(_DWORD *)(v1498 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_2340;
        case 3:
          v1502 = (*(_DWORD *)(v1498 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_2340;
        case 10:
          v1502 = *(_DWORD *)(v1498 + 80) + 1;
LABEL_2340:
          if (v1502 == 1)
            goto LABEL_2341;
          goto LABEL_2337;
        default:
          goto LABEL_2337;
      }
    }
    if ((*(_DWORD *)(v1498 + 20) & 0x7FFFFFF) == 3)
LABEL_2337:
      v1501 = 0;
    else
LABEL_2341:
      v1501 = v1496;
LABEL_2342:
    v1503 = a8[2].i32[0];
    if (!v1503)
      goto LABEL_2350;
    v1504 = *a8;
    v1505 = v1503 - 1;
    v1506 = ((v1501 >> 4) ^ (v1501 >> 9)) & (v1503 - 1);
    v1507 = *(_QWORD *)(*(_QWORD *)a8 + 16 * v1506);
    if (v1501 != v1507)
    {
      v1508 = 1;
      while (v1507 != -4096)
      {
        v1509 = v1506 + v1508++;
        v1506 = v1509 & v1505;
        v1507 = *(_QWORD *)(*(_QWORD *)&v1504 + 16 * v1506);
        if (v1501 == v1507)
          goto LABEL_2347;
      }
LABEL_2350:
      v1515 = (_QWORD *)a8[4];
      v1514 = (unint64_t)a8[5];
      if ((unint64_t)v1515 >= v1514)
      {
        v1517 = (_QWORD *)a8[3];
        v1518 = v1515 - v1517;
        v1519 = v1518 + 1;
        if ((unint64_t)(v1518 + 1) >> 61)
          goto LABEL_2547;
        v1520 = v1514 - (_QWORD)v1517;
        if (v1520 >> 2 > v1519)
          v1519 = v1520 >> 2;
        if ((unint64_t)v1520 >= 0x7FFFFFFFFFFFFFF8)
          v1521 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1521 = v1519;
        if (v1521)
        {
          if (v1521 >> 61)
            goto LABEL_2549;
          v1522 = (char *)operator new(8 * v1521);
        }
        else
        {
          v1522 = 0;
        }
        v1529 = &v1522[8 * v1518];
        *(_QWORD *)v1529 = v1494;
        v1516 = v1529 + 8;
        if (v1515 == v1517)
        {
          v1531 = a8;
        }
        else
        {
          do
          {
            v1530 = *--v1515;
            *((_QWORD *)v1529 - 1) = v1530;
            v1529 -= 8;
          }
          while (v1515 != v1517);
          v1531 = a8;
          v1515 = (_QWORD *)a8[3];
        }
        v1531[3] = (int32x2_t)v1529;
        v1531[4] = (int32x2_t)v1516;
        v1531[5] = (int32x2_t)&v1522[8 * v1521];
        if (v1515)
          operator delete(v1515);
      }
      else
      {
        *v1515 = v1494;
        v1516 = v1515 + 1;
      }
      a8[4] = (int32x2_t)v1516;
      goto LABEL_2385;
    }
LABEL_2347:
    v1510 = *(_QWORD **)(*(_QWORD *)&v1504 + 16 * v1506 + 8);
    if (!v1510)
      goto LABEL_2350;
    *v1494 = v1510;
    v1512 = (_QWORD *)v1510[2];
    v1511 = v1510[3];
    if ((unint64_t)v1512 >= v1511)
    {
      v1523 = (_QWORD *)v1510[1];
      v1524 = v1512 - v1523;
      v1525 = v1524 + 1;
      if ((unint64_t)(v1524 + 1) >> 61)
        goto LABEL_2547;
      v1526 = v1511 - (_QWORD)v1523;
      if (v1526 >> 2 > v1525)
        v1525 = v1526 >> 2;
      if ((unint64_t)v1526 >= 0x7FFFFFFFFFFFFFF8)
        v1527 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1527 = v1525;
      if (v1527)
      {
        if (v1527 >> 61)
          goto LABEL_2549;
        v1528 = (char *)operator new(8 * v1527);
      }
      else
      {
        v1528 = 0;
      }
      v1532 = &v1528[8 * v1524];
      *(_QWORD *)v1532 = v1494;
      v1513 = v1532 + 8;
      if (v1512 != v1523)
      {
        do
        {
          v1533 = *--v1512;
          *((_QWORD *)v1532 - 1) = v1533;
          v1532 -= 8;
        }
        while (v1512 != v1523);
        v1512 = (_QWORD *)v1510[1];
      }
      v1510[1] = v1532;
      v1510[2] = v1513;
      v1510[3] = &v1528[8 * v1527];
      if (v1512)
        operator delete(v1512);
    }
    else
    {
      *v1512 = v1494;
      v1513 = v1512 + 1;
    }
    v1510[2] = v1513;
LABEL_2385:
    ++v1493;
  }
  while (v1493 != (uint64_t *)v1418);
  v1418 = *(unint64_t **)(a1 + 16);
LABEL_2389:
  if (v1419 != (uint64_t *)v1418)
    *(_QWORD *)(a1 + 16) = v1419;
  v1534 = *(_QWORD *)(a1 + 32);
  v1535 = *(_QWORD *)(a1 + 40);
  if (v1534 == v1535)
  {
    v1536 = *(llvm **)a1;
    if (*(_QWORD *)a1)
    {
      v1541 = (_QWORD *)*((_QWORD *)v1536 + 1);
      v1540 = (char *)*((_QWORD *)v1536 + 2);
      if (v1541 != (_QWORD *)v1540)
      {
        while (*v1541 != a1)
        {
          if (++v1541 == (_QWORD *)v1540)
          {
            v1541 = (_QWORD *)*((_QWORD *)v1536 + 2);
            break;
          }
        }
      }
      v1542 = (_QWORD *)*v1541;
      v1543 = v1540 - (char *)(v1541 + 1);
      if (v1540 != (char *)(v1541 + 1))
        memmove(v1541, v1541 + 1, v1540 - (char *)(v1541 + 1));
      *((_QWORD *)v1536 + 2) = (char *)v1541 + v1543;
      *v1542 = 0;
    }
    else
    {
      v1538 = (char *)a8[3];
      v1537 = (char *)a8[4];
      if (v1538 != v1537)
      {
        while (*(_QWORD *)v1538 != a1)
        {
          v1538 += 8;
          if (v1538 == v1537)
          {
            v1538 = (char *)a8[4];
            break;
          }
        }
      }
      v1539 = v1537 - (v1538 + 8);
      if (v1537 != v1538 + 8)
        memmove(v1538, v1538 + 8, v1537 - (v1538 + 8));
      a8[4] = (int32x2_t)&v1538[v1539];
    }
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::~LoopBase(a1);
  }
  if (v1740 != &v1742)
    free(v1740);
  if (v1757 != (void *)v1756)
    free(v1757);
  if (v1749 != v1748)
    free(v1749);
  if ((void *)__b.i64[0] != v1716)
    free((void *)__b.i64[0]);
  if ((int32x2_t *****)v1761 != &v1763)
    free((void *)v1761);
  v1666 = v1535;
  v1669 = v1534;
  if (v1745 != (llvm::BasicBlock *)v1747)
    free(v1745);
  if (v1632 == 30 && !v1628)
  {
    __na = *((_QWORD *)sub_1C61B4D30((int *)v1701) + 1);
    v1545 = a4 == 1 ? 1 : v1629;
    v1546 = ***v1624;
    if (v1627)
    {
      v1547 = *(llvm::ValueHandleBase **)(v1546 + 1560);
      v1548 = a3;
      if (!v1547)
      {
        v1591 = *(llvm::ConstantInt **)(v1546 + 1888);
        v1592 = *(_DWORD *)(v1546 + 1896);
        __b.i32[0] = v1592 >> 8;
        if (v1592 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v1716, 1, 0);
        }
        else
        {
          if (v1592 <= 0xFF)
            v1593 = 0;
          else
            v1593 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v1592);
          v1716 = (void *)(v1593 & 1);
        }
        v1547 = llvm::ConstantInt::get(v1591, (llvm::LLVMContext *)&v1716, v1544);
        if (__b.i32[0] >= 0x41u && v1716)
          MEMORY[0x1CAA32F9C](v1716, 0x1000C8000313F17);
        *(_QWORD *)(v1546 + 1560) = v1547;
        v1546 = ***v1624;
        v1548 = a3;
      }
      v1549 = *(llvm::ValueHandleBase **)(v1546 + 1568);
      if (!v1549)
      {
        v1550 = *(llvm::ConstantInt **)(v1546 + 1888);
        __b.i32[0] = *(_DWORD *)(v1546 + 1896) >> 8;
        if (__b.i32[0] > 0x40u)
          llvm::APInt::initSlowCase((llvm::APInt *)&v1716, 0, 0);
        else
          v1716 = 0;
        v1549 = llvm::ConstantInt::get(v1550, (llvm::LLVMContext *)&v1716, v1544);
        if (__b.i32[0] >= 0x41u && v1716)
          MEMORY[0x1CAA32F9C](v1716, 0x1000C8000313F17);
        *(_QWORD *)(v1546 + 1568) = v1549;
        goto LABEL_2542;
      }
    }
    else
    {
      v1547 = *(llvm::ValueHandleBase **)(v1546 + 1568);
      v1548 = a3;
      if (!v1547)
      {
        v1590 = *(llvm::ConstantInt **)(v1546 + 1888);
        __b.i32[0] = *(_DWORD *)(v1546 + 1896) >> 8;
        if (__b.i32[0] > 0x40u)
          llvm::APInt::initSlowCase((llvm::APInt *)&v1716, 0, 0);
        else
          v1716 = 0;
        v1547 = llvm::ConstantInt::get(v1590, (llvm::LLVMContext *)&v1716, v1544);
        if (__b.i32[0] >= 0x41u && v1716)
          MEMORY[0x1CAA32F9C](v1716, 0x1000C8000313F17);
        *(_QWORD *)(v1546 + 1568) = v1547;
        v1546 = ***v1624;
        v1548 = a3;
      }
      v1549 = *(llvm::ValueHandleBase **)(v1546 + 1560);
      if (!v1549)
      {
        v1594 = *(llvm::ConstantInt **)(v1546 + 1888);
        v1595 = *(_DWORD *)(v1546 + 1896);
        __b.i32[0] = v1595 >> 8;
        if (v1595 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v1716, 1, 0);
        }
        else
        {
          if (v1595 <= 0xFF)
            v1596 = 0;
          else
            v1596 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v1595);
          v1716 = (void *)(v1596 & 1);
        }
        v1549 = llvm::ConstantInt::get(v1594, (llvm::LLVMContext *)&v1716, v1544);
        if (__b.i32[0] >= 0x41u && v1716)
          MEMORY[0x1CAA32F9C](v1716, 0x1000C8000313F17);
        *(_QWORD *)(v1546 + 1560) = v1549;
LABEL_2542:
        v1548 = a3;
      }
    }
    if (a4)
    {
      v1679 = &v1548[a4];
      v1551 = (uint64_t *)((char *)v1547 + 8);
      v1552 = (uint64_t *)((char *)v1549 + 8);
      do
      {
        v1553 = v1548;
        v1554 = *((_QWORD *)*v1548 + 1);
        while (v1554)
        {
          v1555 = v1554;
          v1556 = (uint64_t *)(v1554 + 8);
          v1554 = *(_QWORD *)(v1554 + 8);
          v1557 = v1556[2];
          if (v1557)
            v1558 = *(unsigned __int8 *)(v1557 + 16) >= 0x1Cu;
          else
            v1558 = 0;
          if (v1558)
          {
            if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(a7, v1659, *(_QWORD *)(v1557 + 40)))
            {
              if (*(_QWORD *)v1555)
              {
                **(_QWORD **)(v1555 + 16) = *(_QWORD *)(v1555 + 8);
                v1559 = *(_QWORD *)(v1555 + 8);
                if (v1559)
                  *(_QWORD *)(v1559 + 16) = *(_QWORD *)(v1555 + 16);
              }
              *(_QWORD *)v1555 = v1549;
              if (v1549)
              {
                v1560 = *v1552;
                *v1556 = *v1552;
                v1561 = (_QWORD *)((char *)v1549 + 8);
                if (!v1560)
                  goto LABEL_2450;
LABEL_2449:
                *(_QWORD *)(v1560 + 16) = v1556;
                goto LABEL_2450;
              }
            }
            else if (v1545
                   && llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(a7, __na, *(_QWORD *)(v1557 + 40)))
            {
              if (*(_QWORD *)v1555)
              {
                **(_QWORD **)(v1555 + 16) = *(_QWORD *)(v1555 + 8);
                v1562 = *(_QWORD *)(v1555 + 8);
                if (v1562)
                  *(_QWORD *)(v1562 + 16) = *(_QWORD *)(v1555 + 16);
              }
              *(_QWORD *)v1555 = v1547;
              if (v1547)
              {
                v1560 = *v1551;
                *v1556 = *v1551;
                v1561 = (_QWORD *)((char *)v1547 + 8);
                if (v1560)
                  goto LABEL_2449;
LABEL_2450:
                *(_QWORD *)(v1555 + 16) = v1561;
                *v1561 = v1555;
              }
            }
          }
        }
        v1548 = v1553 + 1;
      }
      while (v1553 + 1 != v1679);
    }
  }
  v1563 = (char *)v1698;
  v1564 = (char *)v1753;
  v1716 = v1698;
  __b.i64[0] = (uint64_t)v1753;
  v1565 = (char *)v1698 + 8 * v1699;
  v1566 = (char *)v1753 + 8 * v1754;
  __b.i64[1] = (uint64_t)v1565;
  v1718.i64[0] = (uint64_t)v1566;
  while (v1563 != v1565 || v1564 != v1566 || (char *)__b.i64[1] != v1565 || v1718.i64[0] != (_QWORD)v1566)
  {
    v1568 = 0;
    do
    {
      v1569 = (llvm **)(*(uint64_t (**)(void **))((char *)&off_1E8197898 + v1568))(&v1716);
      v1568 += 16;
    }
    while (!v1569);
    v1571 = *v1569;
    llvm::formLCSSA(*v1569, (llvm::Loop *)a7, (const llvm::DominatorTree *)a8, a12, v1570);
    llvm::formDedicatedExitBlocks((uint64_t)v1571, (llvm::Loop *)a7, (llvm::DominatorTree *)a8, (llvm::LoopInfo *)a13, (llvm::MemorySSAUpdater *)1);
    v1572 = 0;
    v1573 = *(_QWORD *)v1571;
    do
    {
      if (((*(uint64_t (**)(void **))((char *)&off_1E81978B8 + v1572))(&v1716) & 1) != 0)
        break;
      v20 = v1572 == 16;
      v1572 += 16;
    }
    while (!v20);
    v1574 = v1658;
    if (!v1573)
      v1574 = 0;
    v1658 = v1574;
    v1563 = (char *)v1716;
    v1564 = (char *)__b.i64[0];
  }
  if (v1669 == v1666)
  {
    v1576 = (const llvm::DominatorTree *)a8;
    v1575 = a1;
    v1577 = v1658;
  }
  else
  {
    v1575 = a1;
    v1576 = (const llvm::DominatorTree *)a8;
    llvm::formLCSSA((llvm *)a1, (llvm::Loop *)a7, (const llvm::DominatorTree *)a8, a12, v1392);
    llvm::formDedicatedExitBlocks(a1, (llvm::Loop *)a7, (llvm::DominatorTree *)a8, (llvm::LoopInfo *)a13, (llvm::MemorySSAUpdater *)1);
    v1577 = v1658;
    if (!*(_QWORD *)a1)
      v1577 = 0;
  }
  if (v1577 != (llvm *)v1575 && v1650 != v1577)
  {
    v1578 = v1650;
    do
    {
      llvm::formLCSSA(v1578, (llvm::Loop *)a7, v1576, a12, v1392);
      llvm::formDedicatedExitBlocks((uint64_t)v1578, (llvm::Loop *)a7, v1576, (llvm::LoopInfo *)a13, (llvm::MemorySSAUpdater *)1);
      v1578 = *(llvm **)v1578;
    }
    while (v1578 != v1577);
  }
  v1716 = &__b.u64[1];
  __b.i64[0] = 0x400000000;
  v1579 = (uint64_t *)v1698;
  v1580 = (char *)v1753;
  v1748 = v1698;
  v1749 = v1753;
  v1581 = (uint64_t *)((char *)v1698 + 8 * v1699);
  v1582 = (char *)v1753 + 8 * v1754;
  v1750 = v1581;
  v1751 = v1582;
  while (v1579 != v1581 || v1580 != v1582 || v1750 != v1581 || v1751 != v1582)
  {
    v1584 = 0;
    do
    {
      v1585 = (llvm ***)(*(uint64_t (**)(void **))((char *)&off_1E8197898 + v1584))(&v1748);
      v1584 += 16;
    }
    while (!v1585);
    v1586 = *v1585;
    if (**v1585 == v1650)
    {
      v1587 = __b.u32[0];
      if (__b.u32[0] >= (unint64_t)__b.u32[1])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1716, (uint64_t)&__b.i64[1], __b.u32[0] + 1, 8);
        v1587 = __b.u32[0];
      }
      *((_QWORD *)v1716 + v1587) = v1586;
      ++__b.i32[0];
    }
    v1588 = 0;
    do
    {
      if (((*(uint64_t (**)(void **))((char *)&off_1E81978B8 + v1588))(&v1748) & 1) != 0)
        break;
      v20 = v1588 == 16;
      v1588 += 16;
    }
    while (!v20);
    v1579 = (uint64_t *)v1748;
    v1580 = (char *)v1749;
  }
  a10(a11, v1669 != v1666, v1626, v1716, __b.u32[0]);
  if (v1716 != &__b.u64[1])
    free(v1716);
  if (v1753 != v1755)
    free(v1753);
  if (v1698 != v1700)
    free(v1698);
  if ((v1701[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v1701[1], 8);
  sub_1C63272E0(&v1702);
  if (v1705 != v1707)
    free(v1705);
  if ((v1708 & 1) == 0)
    MEMORY[0x1CAA32FB4](v1709, 8);
  if (__p)
  {
    v1689 = __p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v1687, 8);
  if (v1713 != v1715)
    free(v1713);
  if ((v1711 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)&v1712[0], 8);
}

unint64_t *sub_1C5C43ADC(unint64_t *a1, _BYTE *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v6;

  v3 = a3;
  if (a3)
  {
    if (a3 == 1)
    {
      v3 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFFBLL;
    }
    else
    {
      v6 = operator new();
      *(_QWORD *)v6 = v6 + 16;
      *(_QWORD *)(v6 + 8) = 0x400000000;
      sub_1C4FA6FB8((unsigned int *)v6, a2, &a2[8 * v3]);
      v3 = v6 | 4;
    }
  }
  *a1 = v3;
  return a1;
}

uint64_t sub_1C5C43B68(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[96];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C6326D18(a1, v6, v6 + 24 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v9 = v10;
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(a1 + v8 + 16);
      v9 += 24;
    }
    v8 += 24;
  }
  while (v8 != 96);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C6326D18(a1, (uint64_t)v14, (uint64_t)v9);
}

unint64_t sub_1C5C43CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  _BYTE v25[24];

  v6 = sub_1C6326DE4(a2, *(_QWORD *)a1);
  if ((*(_DWORD *)a2 & 1) != 0)
    v7 = a2 + 8;
  else
    v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_DWORD *)(a2 + 16);
  if ((*(_DWORD *)a2 & 1) != 0)
    v8 = 4;
  if (v7 + 24 * v8 == v6)
    return 0;
  v11 = v6;
  v12 = sub_1C6326E44(a3, a1);
  if ((*(_DWORD *)a3 & 1) != 0)
    v13 = a3 + 8;
  else
    v13 = *(_QWORD *)(a3 + 8);
  v14 = *(_DWORD *)(a3 + 16);
  if ((*(_DWORD *)a3 & 1) != 0)
    v14 = 4;
  if (v13 + 24 * v14 != v12)
    return *(_QWORD *)(v12 + 8);
  v15 = *(unsigned int *)(a1 + 32);
  v9 = *(_QWORD *)(v11 + 8);
  v16 = *(_QWORD *)(v11 + 16);
  if ((_DWORD)v15)
  {
    v17 = *(uint64_t **)(a1 + 24);
    v18 = 8 * v15;
    do
    {
      v19 = *v17++;
      v20 = sub_1C5C43CF8(v19, a2, a3);
      v22 = v16;
      if (__OFADD__(v9, v20))
        v9 = ((uint64_t)(v9 + v20) >> 63) ^ 0x8000000000000000;
      else
        v9 += v20;
      if (v21 == 1)
        v22 = 1;
      v16 = v22 | v16 & 0xFFFFFFFF00000000;
      v18 -= 8;
    }
    while (v18);
  }
  v23 = a1;
  *(_QWORD *)&v24 = v9;
  *((_QWORD *)&v24 + 1) = v16;
  sub_1C6326EA4((uint64_t)v25, a3, &v23, &v24);
  return v9;
}

BOOL sub_1C5C43E3C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[2];
  if (*a1 != v2)
    *a1 = v1 + 8;
  return v1 != v2;
}

BOOL sub_1C5C43E60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 24);
  if (v1 != v2)
    *(_QWORD *)(a1 + 8) = v1 + 8;
  return v1 != v2;
}

void sub_1C5C43E84(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  int32x2_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  int32x2_t *v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  int v31;

  if (*(_BYTE *)(a1 + 48))
  {
    sub_1C4E43068(a1 + 24);
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 24), 8);
    *(_BYTE *)(a1 + 48) = 0;
  }
  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(_QWORD **)a1;
  if ((_DWORD)v2)
  {
    v4 = &v3[8 * v2];
    do
    {
      v5 = v3[3];
      if ((v5 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v6 = v3[7];
        if (v6)
        {
          if (v6 != -8192 && v6 != -4096)
          {
            v7 = v3[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v7 = v3[6];
            v8 = (unint64_t *)v3[6];
            if (v8)
            {
              *v8 = *v8 & 7 | v7;
            }
            else
            {
              v9 = v3[7];
              v10 = ***(int32x2_t ****)v9;
              v11 = (unint64_t)v10[303];
              if (v11 <= v7)
              {
                v12 = v10[305].u32[0];
                if (v11 + 16 * v12 > v7)
                {
                  v13 = v12 - 1;
                  LODWORD(v14) = v13 & ((v9 >> 4) ^ (v9 >> 9));
                  v15 = (uint64_t *)(v11 + 16 * v14);
                  v16 = *v15;
                  if (v9 != *v15)
                  {
                    v17 = 1;
                    do
                    {
                      if (v16 == -4096)
                        goto LABEL_18;
                      v18 = v14 + v17++;
                      v14 = v18 & v13;
                      v16 = *(_QWORD *)(v11 + 16 * v14);
                    }
                    while (v9 != v16);
                    v15 = (uint64_t *)(v11 + 16 * v14);
                  }
                  *v15 = -8192;
                  v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
                  v9 = v3[7];
LABEL_18:
                  *(_BYTE *)(v9 + 17) &= ~1u;
                }
              }
            }
            v5 = v3[3];
          }
        }
      }
      if (v5 != -4096 && v5 != -8192 && v5 != 0)
      {
        v20 = v3[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v20 = v3[2];
        v21 = (unint64_t *)v3[2];
        if (v21)
        {
          *v21 = *v21 & 7 | v20;
        }
        else
        {
          v22 = v3[3];
          v23 = ***(int32x2_t ****)v22;
          v24 = (unint64_t)v23[303];
          if (v24 <= v20)
          {
            v25 = v23[305].u32[0];
            if (v24 + 16 * v25 > v20)
            {
              v26 = v25 - 1;
              LODWORD(v27) = v26 & ((v22 >> 4) ^ (v22 >> 9));
              v28 = (uint64_t *)(v24 + 16 * v27);
              v29 = *v28;
              if (v22 != *v28)
              {
                v30 = 1;
                do
                {
                  if (v29 == -4096)
                    goto LABEL_37;
                  v31 = v27 + v30++;
                  v27 = v31 & v26;
                  v29 = *(_QWORD *)(v24 + 16 * v27);
                }
                while (v22 != v29);
                v28 = (uint64_t *)(v24 + 16 * v27);
              }
              *v28 = -8192;
              v23[304] = vadd_s32(v23[304], (int32x2_t)0x1FFFFFFFFLL);
              v22 = v3[3];
LABEL_37:
              *(_BYTE *)(v22 + 17) &= ~1u;
            }
          }
        }
      }
      v3 += 8;
    }
    while (v3 != v4);
    v3 = *(_QWORD **)a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5C440D4(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v61[2];
  void *v62;
  uint64_t v63;
  _QWORD v64[34];

  v64[32] = *MEMORY[0x1E0C80C00];
  v61[0] = a3;
  v61[1] = (uint64_t)a4;
  v7 = (uint64_t)(a4 + 6);
  v8 = sub_1C484358C((uint64_t)(a4 + 6), 152, 3);
  v9 = (_QWORD *)v8;
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_QWORD *)(v8 + 144) = 0;
  *(_QWORD *)(v8 + 56) = v8 + 88;
  *(_QWORD *)(v8 + 64) = v8 + 88;
  *(_DWORD *)(v8 + 72) = 8;
  if (a2)
  {
    *(_QWORD *)v8 = a2;
    v11 = (unint64_t *)a2[2];
    v10 = a2[3];
    if ((unint64_t)v11 < v10)
    {
      *v11 = v8;
      v12 = v11 + 1;
LABEL_30:
      a2[2] = v12;
      goto LABEL_38;
    }
    v16 = (_QWORD *)a2[1];
    v17 = v11 - v16;
    v18 = v17 + 1;
    if (!((unint64_t)(v17 + 1) >> 61))
    {
      v19 = v10 - (_QWORD)v16;
      if (v19 >> 2 > v18)
        v18 = v19 >> 2;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (!v20)
      {
        v21 = 0;
        goto LABEL_25;
      }
      if (!(v20 >> 61))
      {
        v21 = (char *)operator new(8 * v20);
LABEL_25:
        v28 = &v21[8 * v17];
        *(_QWORD *)v28 = v9;
        v12 = v28 + 8;
        if (v11 != v16)
        {
          do
          {
            v29 = *--v11;
            *((_QWORD *)v28 - 1) = v29;
            v28 -= 8;
          }
          while (v11 != v16);
          v11 = (unint64_t *)a2[1];
        }
        a2[1] = v28;
        a2[2] = v12;
        a2[3] = &v21[8 * v20];
        if (v11)
          operator delete(v11);
        goto LABEL_30;
      }
LABEL_70:
      sub_1C4764EE4();
    }
LABEL_69:
    abort();
  }
  v14 = (unint64_t *)a4[4];
  v13 = a4[5];
  if ((unint64_t)v14 >= v13)
  {
    v22 = (_QWORD *)a4[3];
    v23 = v14 - v22;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 61)
      goto LABEL_69;
    v25 = v13 - (_QWORD)v22;
    if (v25 >> 2 > v24)
      v24 = v25 >> 2;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
      v26 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    if (v26)
    {
      if (v26 >> 61)
        goto LABEL_70;
      v27 = (char *)operator new(8 * v26);
    }
    else
    {
      v27 = 0;
    }
    v30 = &v27[8 * v23];
    *(_QWORD *)v30 = v9;
    v15 = v30 + 8;
    if (v14 != v22)
    {
      do
      {
        v31 = *--v14;
        *((_QWORD *)v30 - 1) = v31;
        v30 -= 8;
      }
      while (v14 != v22);
      v14 = (unint64_t *)a4[3];
    }
    a4[3] = v30;
    a4[4] = v15;
    a4[5] = &v27[8 * v26];
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v14 = v8;
    v15 = v14 + 1;
  }
  a4[4] = v15;
LABEL_38:
  sub_1C5C44534(v61, a1, v9);
  v32 = *(_QWORD *)(a1 + 8);
  v33 = *(_QWORD *)(a1 + 16);
  if (v32 != v33)
  {
    v34 = 0;
    v62 = v64;
    v63 = 0x1000000000;
    do
    {
      v36 = *(_QWORD *)(v33 - 8);
      v33 -= 8;
      v35 = v36;
      if (v34 >= HIDWORD(v63))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v34 + 1, 16);
        v34 = v63;
      }
      v37 = (char *)v62 + 16 * v34;
      *v37 = v9;
      v37[1] = v35;
      v34 = v63 + 1;
      LODWORD(v63) = v63 + 1;
    }
    while (v33 != v32);
    do
    {
      v38 = (char *)v62 + 16 * v34;
      v40 = (_QWORD *)*((_QWORD *)v38 - 2);
      v39 = *((_QWORD *)v38 - 1);
      LODWORD(v63) = v34 - 1;
      v41 = sub_1C484358C(v7, 152, 3);
      v42 = (_QWORD *)v41;
      *(_OWORD *)(v41 + 56) = 0u;
      *(_OWORD *)(v41 + 72) = 0u;
      *(_OWORD *)(v41 + 136) = 0u;
      *(_OWORD *)(v41 + 120) = 0u;
      *(_OWORD *)(v41 + 104) = 0u;
      *(_OWORD *)(v41 + 40) = 0u;
      *(_OWORD *)(v41 + 24) = 0u;
      *(_OWORD *)(v41 + 8) = 0u;
      *(_OWORD *)(v41 + 88) = 0u;
      *(_QWORD *)(v41 + 56) = v41 + 88;
      *(_QWORD *)(v41 + 64) = v41 + 88;
      *(_DWORD *)(v41 + 72) = 8;
      *(_QWORD *)v41 = v40;
      v44 = (unint64_t *)v40[2];
      v43 = v40[3];
      if ((unint64_t)v44 >= v43)
      {
        v46 = (_QWORD *)v40[1];
        v47 = v44 - v46;
        v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 61)
          goto LABEL_69;
        v49 = v43 - (_QWORD)v46;
        if (v49 >> 2 > v48)
          v48 = v49 >> 2;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
          v50 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        if (v50)
        {
          if (v50 >> 61)
            goto LABEL_70;
          v51 = (char *)operator new(8 * v50);
        }
        else
        {
          v51 = 0;
        }
        v52 = &v51[8 * v47];
        *(_QWORD *)v52 = v42;
        v45 = v52 + 8;
        if (v44 != v46)
        {
          do
          {
            v53 = *--v44;
            *((_QWORD *)v52 - 1) = v53;
            v52 -= 8;
          }
          while (v44 != v46);
          v44 = (unint64_t *)v40[1];
        }
        v40[1] = v52;
        v40[2] = v45;
        v40[3] = &v51[8 * v50];
        if (v44)
          operator delete(v44);
      }
      else
      {
        *v44 = v41;
        v45 = v44 + 1;
      }
      v40[2] = v45;
      sub_1C5C44534(v61, v39, v42);
      v56 = v39 + 8;
      v55 = *(_QWORD *)(v39 + 8);
      v54 = *(_QWORD *)(v56 + 8);
      v34 = v63;
      while (v54 != v55)
      {
        v58 = *(_QWORD *)(v54 - 8);
        v54 -= 8;
        v57 = v58;
        if (v34 >= HIDWORD(v63))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v34 + 1, 16);
          v34 = v63;
        }
        v59 = (char *)v62 + 16 * v34;
        *v59 = v42;
        v59[1] = v57;
        v34 = v63 + 1;
        LODWORD(v63) = v63 + 1;
      }
    }
    while (v34);
    if (v62 != v64)
      free(v62);
  }
  return v9;
}

void sub_1C5C44534(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  unint64_t v41;
  int32x2_t ****v42;
  int32x2_t *v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  int32x2_t *****v48;
  int32x2_t ****v49;
  int v50;
  int v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t **v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t *v65;
  int32x2_t ****v66;

  v4 = a2;
  v62 = (uint64_t **)(a3 + 4);
  sub_1C4DB1D18((uint64_t)(a3 + 4), ((*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
  v6 = *(uint64_t **)(v4 + 32);
  v63 = *(uint64_t **)(v4 + 40);
  if (v63 != v6)
  {
    while (1)
    {
      v7 = *v6;
      v8 = *(_QWORD *)*a1;
      v9 = *(unsigned int *)(*a1 + 16);
      v10 = *v6 >> 4;
      if (!(_DWORD)v9)
        goto LABEL_8;
      v11 = ((_DWORD)v9 - 1) & (v10 ^ (v7 >> 9));
      v12 = (_QWORD *)(v8 + (v11 << 6));
      v13 = v12[3];
      if (v7 != v13)
        break;
LABEL_9:
      v64 = 6;
      if (v12 == (_QWORD *)(v8 + (v9 << 6)))
      {
        v16 = 0;
        v17 = 0;
        v65 = 0;
        v66 = 0;
      }
      else
      {
        v16 = 0;
        v17 = v12[7];
        v65 = 0;
        v66 = (int32x2_t ****)v17;
        if (v17 != -8192 && v17 != -4096 && v17 != 0)
        {
          v19 = v12[5] & 0xFFFFFFFFFFFFFFF8;
          v65 = *(unint64_t **)v19;
          *(_QWORD *)v19 = &v64;
          v64 = v19 | 6;
          v16 = v65;
          if (v65)
            *v65 = *v65 & 7 | (unint64_t)&v65;
          v17 = (uint64_t)v66;
        }
      }
      if (v17 != -8192 && v17 != -4096 && v17 != 0)
      {
        v41 = v64 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v64 & 0xFFFFFFFFFFFFFFF8) = v16;
        if (v65)
        {
          *v65 = *v65 & 7 | v41;
        }
        else
        {
          v42 = v66;
          v43 = ***v66;
          v44 = (unint64_t)v43[303];
          if (v44 <= v41)
          {
            v45 = v43[305].u32[0];
            if (v44 + 16 * v45 > v41)
            {
              v46 = v45 - 1;
              LODWORD(v47) = v46 & ((v66 >> 4) ^ (v66 >> 9));
              v48 = (int32x2_t *****)(v44 + 16 * v47);
              v49 = *v48;
              if (v66 == *v48)
              {
LABEL_53:
                *v48 = (int32x2_t ****)-8192;
                v43[304] = vadd_s32(v43[304], (int32x2_t)0x1FFFFFFFFLL);
                v42 = v66;
              }
              else
              {
                v50 = 1;
                while (v49 != (int32x2_t ****)-4096)
                {
                  v51 = v47 + v50++;
                  v47 = v51 & v46;
                  v49 = *(int32x2_t *****)(v44 + 16 * v47);
                  if (v66 == v49)
                  {
                    v48 = (int32x2_t *****)(v44 + 16 * v47);
                    goto LABEL_53;
                  }
                }
              }
              *((_BYTE *)v42 + 17) &= ~1u;
            }
          }
        }
      }
      v22 = (uint64_t *)a3[5];
      v21 = a3[6];
      if ((unint64_t)v22 >= v21)
      {
        v61 = v4;
        v53 = *v62;
        v54 = v22 - *v62;
        v55 = v54 + 1;
        if ((unint64_t)(v54 + 1) >> 61)
          abort();
        v56 = v21 - (_QWORD)v53;
        if (v56 >> 2 > v55)
          v55 = v56 >> 2;
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
          v55 = 0x1FFFFFFFFFFFFFFFLL;
        v60 = v55;
        if (v55)
        {
          if (v55 >> 61)
            sub_1C4764EE4();
          v57 = (char *)operator new(8 * v55);
        }
        else
        {
          v57 = 0;
        }
        v58 = (uint64_t *)&v57[8 * v54];
        *v58 = v17;
        v23 = v58 + 1;
        if (v22 != v53)
        {
          do
          {
            v59 = *--v22;
            *--v58 = v59;
          }
          while (v22 != v53);
          v22 = *v62;
        }
        v4 = v61;
        a3[4] = v58;
        a3[5] = v23;
        a3[6] = &v57[8 * v60];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *v22 = v17;
        v23 = v22 + 1;
      }
      a3[5] = v23;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)(a3 + 7), v17);
      v24 = a1[1];
      v25 = *(_DWORD *)(v24 + 16);
      if (v25)
      {
        v26 = *(_QWORD *)v24;
        v27 = v25 - 1;
        LODWORD(v28) = v27 & (v10 ^ (v7 >> 9));
        v29 = (uint64_t *)(*(_QWORD *)v24 + 16 * v28);
        v30 = *v29;
        if (v7 == *v29)
        {
          v33 = v29[1];
LABEL_34:
          if (v33 == v4)
          {
            v64 = v17;
            v34 = v27 & ((v17 >> 4) ^ (v17 >> 9));
            v35 = (_QWORD *)(*(_QWORD *)v24 + 16 * v34);
            v36 = *v35;
            if (v17 != *v35)
            {
              v37 = 0;
              v38 = 1;
              while (v36 != -4096)
              {
                if (v37)
                  v39 = 0;
                else
                  v39 = v36 == -8192;
                if (v39)
                  v37 = v35;
                v40 = v34 + v38++;
                v34 = v40 & v27;
                v35 = (_QWORD *)(*(_QWORD *)v24 + 16 * (v40 & v27));
                v36 = *v35;
                if (v17 == *v35)
                  goto LABEL_59;
              }
              if (v37)
                v52 = v37;
              else
                v52 = v35;
              v35 = sub_1C4EB6AAC(v24, (uint64_t)&v64, &v64, v52);
              *v35 = v64;
              v35[1] = 0;
            }
LABEL_59:
            v35[1] = a3;
          }
        }
        else
        {
          v31 = 1;
          while (v30 != -4096)
          {
            v32 = v28 + v31++;
            v28 = v32 & v27;
            v30 = *(_QWORD *)(v26 + 16 * v28);
            if (v7 == v30)
            {
              v33 = *(_QWORD *)(v26 + 16 * v28 + 8);
              goto LABEL_34;
            }
          }
        }
      }
      if (++v6 == v63)
        return;
    }
    v14 = 1;
    while (v13 != -4096)
    {
      v15 = v11 + v14++;
      v11 = v15 & (v9 - 1);
      v12 = (_QWORD *)(v8 + (v11 << 6));
      v13 = v12[3];
      if (v7 == v13)
        goto LABEL_9;
    }
LABEL_8:
    v12 = (_QWORD *)(v8 + (v9 << 6));
    goto LABEL_9;
  }
}

int8x16_t sub_1C5C44968(int8x16_t *a1, int8x16_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  int8x16_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t *v17;
  int8x16_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  unsigned int v27;
  int8x16_t *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _QWORD *v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  unsigned int v37;
  int8x16_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  _QWORD *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  _QWORD *v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  _QWORD *v56;
  unsigned int v57;
  uint64_t *v58;
  BOOL v59;
  int8x16_t result;
  uint64_t v61;
  uint64_t v62;
  int v63;
  _QWORD *v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  _QWORD *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  _QWORD *v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  _QWORD *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  _QWORD *v84;
  unsigned int v85;
  uint64_t v86;
  int v87;
  _QWORD *v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  _QWORD *v94;
  unsigned int v95;
  uint64_t v96;
  int v97;
  _QWORD *v98;
  unsigned int v99;
  int8x16_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  _QWORD *v105;
  unsigned int v106;
  uint64_t v107;
  int v108;
  _QWORD *v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  _QWORD *v116;
  unsigned int v117;
  uint64_t v118;
  int v119;
  _QWORD *v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  _QWORD *v126;
  unsigned int v127;
  uint64_t v128;
  int v129;
  _QWORD *v130;
  unsigned int v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  _QWORD *v136;
  unsigned int v137;
  uint64_t v138;
  int v139;
  _QWORD *v140;
  unsigned int v141;
  int8x16_t *v142;
  BOOL v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  _QWORD *v151;
  unsigned int v152;
  uint64_t v153;
  int v154;
  _QWORD *v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  _QWORD *v163;
  unsigned int v164;
  uint64_t v165;
  int v166;
  _QWORD *v167;
  unsigned int v168;
  int64_t v169;
  int64_t v170;
  int64_t v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  int v179;
  _QWORD *v180;
  unsigned int v181;
  uint64_t v182;
  int v183;
  _QWORD *v184;
  unsigned int v185;
  BOOL v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  _QWORD *v192;
  unsigned int v193;
  uint64_t v194;
  int v195;
  _QWORD *v196;
  unsigned int v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  _QWORD *v207;
  unsigned int v208;
  uint64_t v209;
  int v210;
  _QWORD *v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  _QWORD *v216;
  unsigned int v217;
  uint64_t v218;
  int v219;
  _QWORD *v220;
  unsigned int v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  _QWORD *v231;
  unsigned int v232;
  uint64_t v233;
  int v234;
  _QWORD *v235;
  unsigned int v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  _QWORD *v244;
  unsigned int v245;
  uint64_t v246;
  int v247;
  _QWORD *v248;
  unsigned int v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  _QWORD *v255;
  unsigned int v256;
  uint64_t v257;
  int v258;
  _QWORD *v259;
  unsigned int v260;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  _QWORD *v267;
  unsigned int v268;
  uint64_t v269;
  int v270;
  _QWORD *v271;
  unsigned int v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  int v279;
  _QWORD *v280;
  unsigned int v281;
  uint64_t v282;
  int v283;
  _QWORD *v284;
  unsigned int v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  _QWORD *v290;
  unsigned int v291;
  uint64_t v292;
  int v293;
  _QWORD *v294;
  unsigned int v295;
  uint64_t v296;
  uint64_t *v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  _QWORD *v303;
  unsigned int v304;
  uint64_t v305;
  int v306;
  _QWORD *v307;
  unsigned int v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  _QWORD *v314;
  unsigned int v315;
  uint64_t v316;
  int v317;
  _QWORD *v318;
  unsigned int v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  _QWORD *v325;
  unsigned int v326;
  uint64_t v327;
  int v328;
  _QWORD *v329;
  unsigned int v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  _QWORD *v336;
  unsigned int v337;
  uint64_t v338;
  int v339;
  _QWORD *v340;
  unsigned int v341;
  uint64_t *v342;
  uint64_t *i64;
  uint64_t v344;
  uint64_t *v345;
  uint64_t *v346;
  uint64_t *v347;
  uint64_t v348;
  int8x16_t *v349;
  int8x16_t *v350;
  int8x16_t *v351;
  uint64_t v352;

uint64_t sub_1C5C45BB4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t result;
  _QWORD *v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  unsigned int v39;
  uint64_t v40;
  _QWORD *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  _QWORD *v49;
  unsigned int v50;
  uint64_t v51;
  _QWORD *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;

  v8 = *a2;
  v9 = *a1;
  v10 = *a4;
  v55 = 0;
  v11 = sub_1C6184BF0(v10, v8, &v55);
  v12 = 0;
  if (v11)
    v12 = *(_QWORD **)(v55 + 8);
  v13 = 0;
  do
  {
    v12 = (_QWORD *)*v12;
    ++v13;
  }
  while (v12);
  v14 = *a4;
  v55 = 0;
  v15 = sub_1C6184BF0(v14, v9, &v55);
  v16 = 0;
  if (v15)
    v16 = *(_QWORD **)(v55 + 8);
  v17 = 0;
  do
  {
    v16 = (_QWORD *)*v16;
    ++v17;
  }
  while (v16);
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (v13 >= v17)
  {
    v55 = 0;
    v29 = sub_1C6184BF0(v20, v18, &v55);
    v30 = 0;
    if (v29)
      v30 = *(_QWORD **)(v55 + 8);
    v31 = 0;
    do
    {
      v30 = (_QWORD *)*v30;
      ++v31;
    }
    while (v30);
    v32 = *a4;
    v55 = 0;
    result = sub_1C6184BF0(v32, v19, &v55);
    v33 = 0;
    if ((_DWORD)result)
      v33 = *(_QWORD **)(v55 + 8);
    v34 = 0;
    do
    {
      v33 = (_QWORD *)*v33;
      ++v34;
    }
    while (v33);
    if (v31 < v34)
    {
      v44 = *a2;
      *a2 = *a3;
      *a3 = v44;
      v45 = *a2;
      v46 = *a1;
      v47 = *a4;
      v55 = 0;
      v48 = sub_1C6184BF0(v47, v45, &v55);
      v49 = 0;
      if (v48)
        v49 = *(_QWORD **)(v55 + 8);
      v50 = 0;
      do
      {
        v49 = (_QWORD *)*v49;
        ++v50;
      }
      while (v49);
      v51 = *a4;
      v55 = 0;
      result = sub_1C6184BF0(v51, v46, &v55);
      v52 = 0;
      if ((_DWORD)result)
        v52 = *(_QWORD **)(v55 + 8);
      v53 = 0;
      do
      {
        v52 = (_QWORD *)*v52;
        ++v53;
      }
      while (v52);
      if (v50 < v53)
      {
        v54 = *a1;
        *a1 = *a2;
        *a2 = v54;
      }
    }
  }
  else
  {
    v55 = 0;
    v21 = sub_1C6184BF0(v20, v18, &v55);
    v22 = 0;
    if (v21)
      v22 = *(_QWORD **)(v55 + 8);
    v23 = 0;
    do
    {
      v22 = (_QWORD *)*v22;
      ++v23;
    }
    while (v22);
    v24 = *a4;
    v55 = 0;
    result = sub_1C6184BF0(v24, v19, &v55);
    v26 = 0;
    if ((_DWORD)result)
      v26 = *(_QWORD **)(v55 + 8);
    v27 = 0;
    do
    {
      v26 = (_QWORD *)*v26;
      ++v27;
    }
    while (v26);
    v28 = *a1;
    if (v23 >= v27)
    {
      *a1 = *a2;
      *a2 = v28;
      v35 = *a3;
      v36 = *a4;
      v55 = 0;
      v37 = sub_1C6184BF0(v36, v35, &v55);
      v38 = 0;
      if (v37)
        v38 = *(_QWORD **)(v55 + 8);
      v39 = 0;
      do
      {
        v38 = (_QWORD *)*v38;
        ++v39;
      }
      while (v38);
      v40 = *a4;
      v55 = 0;
      result = sub_1C6184BF0(v40, v28, &v55);
      v41 = 0;
      if ((_DWORD)result)
        v41 = *(_QWORD **)(v55 + 8);
      v42 = 0;
      do
      {
        v41 = (_QWORD *)*v41;
        ++v42;
      }
      while (v41);
      if (v39 < v42)
      {
        v43 = *a2;
        *a2 = *a3;
        *a3 = v43;
      }
    }
    else
    {
      *a1 = *a3;
      *a3 = v28;
    }
  }
  return result;
}

BOOL sub_1C5C45E80(int8x16_t *a1, int8x16_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  _QWORD *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t *i64;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  _QWORD *v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  _QWORD *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  _QWORD *v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  _QWORD *v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  _QWORD *v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  _QWORD *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  _QWORD *v83;
  unsigned int v84;
  uint64_t v85;
  int v86;
  _QWORD *v87;
  unsigned int v88;
  uint64_t v89;

  v6 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v33 = a2[-1].i64[1];
      v34 = a1->i64[0];
      v35 = *a3;
      v89 = 0;
      v36 = sub_1C6184BF0(v35, v33, &v89);
      v37 = 0;
      if (v36)
        v37 = *(_QWORD **)(v89 + 8);
      v38 = 0;
      do
      {
        v37 = (_QWORD *)*v37;
        ++v38;
      }
      while (v37);
      v39 = *a3;
      v89 = 0;
      v40 = sub_1C6184BF0(v39, v34, &v89);
      v41 = 0;
      if (v40)
        v41 = *(_QWORD **)(v89 + 8);
      v42 = 0;
      do
      {
        v41 = (_QWORD *)*v41;
        ++v42;
      }
      while (v41);
      if (v38 < v42)
      {
        v43 = a1->i64[0];
        a1->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v43;
      }
      return 1;
    case 3:
      sub_1C5C45BB4(a1->i64, &a1->i64[1], &a2[-1].i64[1], a3);
      return 1;
    case 4:
      sub_1C5C4634C(a1->i64, &a1->i64[1], a1[1].i64, &a2[-1].i64[1], a3);
      return 1;
    case 5:
      i64 = a1[1].i64;
      v45 = &a1[1].i64[1];
      sub_1C5C4634C(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], a3);
      v46 = a2[-1].i64[1];
      v47 = a1[1].i64[1];
      v48 = *a3;
      v89 = 0;
      v49 = sub_1C6184BF0(v48, v46, &v89);
      v50 = 0;
      if (v49)
        v50 = *(_QWORD **)(v89 + 8);
      v51 = 0;
      do
      {
        v50 = (_QWORD *)*v50;
        ++v51;
      }
      while (v50);
      v52 = *a3;
      v89 = 0;
      v53 = sub_1C6184BF0(v52, v47, &v89);
      v54 = 0;
      if (v53)
        v54 = *(_QWORD **)(v89 + 8);
      v55 = 0;
      do
      {
        v54 = (_QWORD *)*v54;
        ++v55;
      }
      while (v54);
      if (v51 < v55)
      {
        v56 = *v45;
        *v45 = a2[-1].i64[1];
        a2[-1].i64[1] = v56;
        v57 = *v45;
        v58 = *i64;
        v59 = *a3;
        v89 = 0;
        v60 = sub_1C6184BF0(v59, v57, &v89);
        v61 = 0;
        if (v60)
          v61 = *(_QWORD **)(v89 + 8);
        v62 = 0;
        do
        {
          v61 = (_QWORD *)*v61;
          ++v62;
        }
        while (v61);
        v63 = *a3;
        v89 = 0;
        v64 = sub_1C6184BF0(v63, v58, &v89);
        v65 = 0;
        if (v64)
          v65 = *(_QWORD **)(v89 + 8);
        v66 = 0;
        do
        {
          v65 = (_QWORD *)*v65;
          ++v66;
        }
        while (v65);
        if (v62 < v66)
        {
          v67 = *i64;
          v68 = *v45;
          *i64 = *v45;
          *v45 = v67;
          v69 = a1->i64[1];
          v70 = *a3;
          v89 = 0;
          v71 = sub_1C6184BF0(v70, v68, &v89);
          v72 = 0;
          if (v71)
            v72 = *(_QWORD **)(v89 + 8);
          v73 = 0;
          do
          {
            v72 = (_QWORD *)*v72;
            ++v73;
          }
          while (v72);
          v74 = *a3;
          v89 = 0;
          v75 = sub_1C6184BF0(v74, v69, &v89);
          v76 = 0;
          if (v75)
            v76 = *(_QWORD **)(v89 + 8);
          v77 = 0;
          do
          {
            v76 = (_QWORD *)*v76;
            ++v77;
          }
          while (v76);
          if (v73 < v77)
          {
            v79 = a1->i64[1];
            v78 = a1[1].i64[0];
            v80 = a1->i64[0];
            a1->i64[1] = v78;
            a1[1].i64[0] = v79;
            v81 = *a3;
            v89 = 0;
            v82 = sub_1C6184BF0(v81, v78, &v89);
            v83 = 0;
            if (v82)
              v83 = *(_QWORD **)(v89 + 8);
            v84 = 0;
            do
            {
              v83 = (_QWORD *)*v83;
              ++v84;
            }
            while (v83);
            v85 = *a3;
            v89 = 0;
            v86 = sub_1C6184BF0(v85, v80, &v89);
            v87 = 0;
            if (v86)
              v87 = *(_QWORD **)(v89 + 8);
            v88 = 0;
            do
            {
              v87 = (_QWORD *)*v87;
              ++v88;
            }
            while (v87);
            if (v84 < v88)
              *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    default:
      v8 = a1[1].i64;
      sub_1C5C45BB4(a1->i64, &a1->i64[1], a1[1].i64, a3);
      v9 = &a1[1].i64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2)
        return 1;
      v10 = 0;
      break;
  }
  while (1)
  {
    v11 = *v9;
    v12 = *v8;
    v13 = *a3;
    v89 = 0;
    v14 = sub_1C6184BF0(v13, v11, &v89);
    v15 = 0;
    if (v14)
      v15 = *(_QWORD **)(v89 + 8);
    v16 = 0;
    do
    {
      v15 = (_QWORD *)*v15;
      ++v16;
    }
    while (v15);
    v17 = *a3;
    v89 = 0;
    v18 = sub_1C6184BF0(v17, v12, &v89);
    v19 = 0;
    if (v18)
      v19 = *(_QWORD **)(v89 + 8);
    v20 = 0;
    do
    {
      v19 = (_QWORD *)*v19;
      ++v20;
    }
    while (v19);
    if (v16 < v20)
    {
      v21 = *v9;
      v22 = v9;
      while (1)
      {
        *v22 = *v8;
        if (v8 == (uint64_t *)a1)
          break;
        v22 = v8;
        v24 = *--v8;
        v23 = v24;
        v25 = *a3;
        v89 = 0;
        v26 = sub_1C6184BF0(v25, v21, &v89);
        v27 = 0;
        if (v26)
          v27 = *(_QWORD **)(v89 + 8);
        v28 = 0;
        do
        {
          v27 = (_QWORD *)*v27;
          ++v28;
        }
        while (v27);
        v29 = *a3;
        v89 = 0;
        v30 = sub_1C6184BF0(v29, v23, &v89);
        v31 = 0;
        if (v30)
          v31 = *(_QWORD **)(v89 + 8);
        v32 = 0;
        do
        {
          v31 = (_QWORD *)*v31;
          ++v32;
        }
        while (v31);
        if (v28 >= v32)
          goto LABEL_27;
      }
      v22 = (uint64_t *)a1;
LABEL_27:
      *v22 = v21;
      if (++v10 == 8)
        return v9 + 1 == (uint64_t *)a2;
    }
    v8 = v9;
    result = 1;
    if (++v9 == (uint64_t *)a2)
      return result;
  }
}

uint64_t sub_1C5C4634C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t result;
  _QWORD *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  unsigned int v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;

  sub_1C5C45BB4(a1, a2, a3, a5);
  v10 = *a4;
  v11 = *a3;
  v12 = *a5;
  v41 = 0;
  v13 = sub_1C6184BF0(v12, v10, &v41);
  v14 = 0;
  if (v13)
    v14 = *(_QWORD **)(v41 + 8);
  v15 = 0;
  do
  {
    v14 = (_QWORD *)*v14;
    ++v15;
  }
  while (v14);
  v16 = *a5;
  v41 = 0;
  result = sub_1C6184BF0(v16, v11, &v41);
  v18 = 0;
  if ((_DWORD)result)
    v18 = *(_QWORD **)(v41 + 8);
  v19 = 0;
  do
  {
    v18 = (_QWORD *)*v18;
    ++v19;
  }
  while (v18);
  if (v15 < v19)
  {
    v20 = *a3;
    *a3 = *a4;
    *a4 = v20;
    v21 = *a3;
    v22 = *a2;
    v23 = *a5;
    v41 = 0;
    v24 = sub_1C6184BF0(v23, v21, &v41);
    v25 = 0;
    if (v24)
      v25 = *(_QWORD **)(v41 + 8);
    v26 = 0;
    do
    {
      v25 = (_QWORD *)*v25;
      ++v26;
    }
    while (v25);
    v27 = *a5;
    v41 = 0;
    result = sub_1C6184BF0(v27, v22, &v41);
    v28 = 0;
    if ((_DWORD)result)
      v28 = *(_QWORD **)(v41 + 8);
    v29 = 0;
    do
    {
      v28 = (_QWORD *)*v28;
      ++v29;
    }
    while (v28);
    if (v26 < v29)
    {
      v30 = *a2;
      *a2 = *a3;
      *a3 = v30;
      v31 = *a2;
      v32 = *a1;
      v33 = *a5;
      v41 = 0;
      v34 = sub_1C6184BF0(v33, v31, &v41);
      v35 = 0;
      if (v34)
        v35 = *(_QWORD **)(v41 + 8);
      v36 = 0;
      do
      {
        v35 = (_QWORD *)*v35;
        ++v36;
      }
      while (v35);
      v37 = *a5;
      v41 = 0;
      result = sub_1C6184BF0(v37, v32, &v41);
      v38 = 0;
      if ((_DWORD)result)
        v38 = *(_QWORD **)(v41 + 8);
      v39 = 0;
      do
      {
        v38 = (_QWORD *)*v38;
        ++v39;
      }
      while (v38);
      if (v36 < v39)
      {
        v40 = *a1;
        *a1 = *a2;
        *a2 = v40;
      }
    }
  }
  return result;
}

BOOL sub_1C5C46530(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[3];
  if (*a1 != v2)
    *a1 = v1 + 8;
  return v1 != v2;
}

BOOL sub_1C5C46554(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 32);
  if (v1 != v2)
    *(_QWORD *)(a1 + 8) = v1 + 8;
  return v1 != v2;
}

BOOL sub_1C5C46578(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 40);
  if (v1 != v2)
    *(_QWORD *)(a1 + 16) = v1 + 8;
  return v1 != v2;
}

_QWORD *sub_1C5C4659C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int *v23;

  v3 = result;
  v4 = a2[1];
  if (v4 == *a2)
    v5 = (unsigned int *)a2 + 5;
  else
    v5 = (unsigned int *)(a2 + 2);
  v6 = *v5;
  if ((_DWORD)v6)
  {
    v7 = 8 * v6;
    v8 = (uint64_t *)a2[1];
    while ((unint64_t)*v8 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v8;
      v7 -= 8;
      if (!v7)
        goto LABEL_21;
    }
  }
  else
  {
    v8 = (uint64_t *)a2[1];
  }
  v9 = (_QWORD *)(v4 + 8 * v6);
  if (v8 != v9)
  {
    v10 = *v8;
LABEL_12:
    result = sub_1C477672C((uint64_t)(v3 + 7), v10);
    v11 = v3[8];
    if (v11 == v3[7])
      v12 = (unsigned int *)v3 + 19;
    else
      v12 = (unsigned int *)(v3 + 9);
    if (result != (_QWORD *)(v11 + 8 * *v12))
    {
      *result = -2;
      ++*((_DWORD *)v3 + 20);
    }
    v13 = (unint64_t *)(v8 + 1);
    while (v13 != v9)
    {
      v14 = *v13++;
      v10 = v14;
      if (v14 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v8 = (uint64_t *)(v13 - 1);
        goto LABEL_12;
      }
    }
  }
LABEL_21:
  v15 = (uint64_t *)v3[4];
  v16 = (uint64_t *)v3[5];
  if (v15 != v16)
  {
    v17 = (uint64_t *)v3[4];
    while (1)
    {
      v18 = *v17++;
      result = sub_1C477672C((uint64_t)a2, v18);
      v19 = a2[1];
      v20 = v19 == *a2 ? (unsigned int *)((char *)a2 + 20) : (unsigned int *)(a2 + 2);
      if (result != (_QWORD *)(v19 + 8 * *v20))
        break;
      v15 = v17;
      if (v17 == v16)
      {
        v15 = v16;
        goto LABEL_37;
      }
    }
    if (v17 != v16)
    {
      v21 = v15 + 1;
      do
      {
        result = sub_1C477672C((uint64_t)a2, *v21);
        v22 = a2[1];
        if (v22 == *a2)
          v23 = (unsigned int *)a2 + 5;
        else
          v23 = (unsigned int *)(a2 + 2);
        if (result == (_QWORD *)(v22 + 8 * *v23))
          *v15++ = *v21;
        ++v21;
      }
      while (v21 != v16);
    }
  }
LABEL_37:
  if (v15 != (uint64_t *)v3[5])
    v3[5] = v15;
  return result;
}

uint64_t *sub_1C5C46758(int8x16_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  size_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  BOOL v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;

  if (a4 == 3)
  {
    v11 = &a1->i8[8];
    v12 = (_QWORD *)*a3;
    v13 = sub_1C477672C(*a3, a1->i64[1]);
    v14 = v12[1];
    v15 = 16;
    if (v14 == *v12)
      v15 = 20;
    if (v13 == (_QWORD *)(v14 + 8 * *(unsigned int *)((char *)v12 + v15)))
    {
      v36 = a1->i64[1];
      a1->i64[1] = *a2;
      *a2 = v36;
      *a1 = vextq_s8(*a1, *a1, 8uLL);
      return (uint64_t *)v11;
    }
    v10 = a1->i64[0];
    a1->i64[0] = a1->i64[1];
    a1->i64[1] = v10;
    a1->i64[1] = *a2;
    goto LABEL_8;
  }
  if (a4 == 2)
  {
    v10 = a1->i64[0];
    a1->i64[0] = *a2;
LABEL_8:
    *a2 = v10;
    return a2;
  }
  if (a6 >= a4)
  {
    v27 = &a1->i64[1];
    *a5 = a1->i64[0];
    v28 = a5 + 1;
    if (&a1->u64[1] == (unint64_t *)a2)
    {
      a1->i64[0] = *a2;
      v11 = (char *)a2;
    }
    else
    {
      v29 = (uint64_t *)a1;
      do
      {
        v30 = (_QWORD *)*a3;
        v31 = sub_1C477672C(*a3, *v27);
        v32 = v30[1];
        if (v32 == *v30)
          v33 = 20;
        else
          v33 = 16;
        v34 = (_QWORD *)(v32 + 8 * *(unsigned int *)((char *)v30 + v33));
        v35 = *v27;
        if (v31 == v34)
          *v28++ = v35;
        else
          *v29++ = v35;
        ++v27;
      }
      while (v27 != a2);
      *v29 = *a2;
      v11 = (char *)(v29 + 1);
      if (v28 <= a5)
        return (uint64_t *)v11;
    }
    v61 = 0;
    do
    {
      *(_QWORD *)&v11[v61 * 8] = a5[v61];
      ++v61;
    }
    while (&a5[v61] < v28);
    return (uint64_t *)v11;
  }
  if (a4 >= 0)
    v18 = a4;
  else
    v18 = a4 + 1;
  v19 = v18 >> 1;
  v20 = &a1->i64[v18 >> 1];
  v21 = v20 - 1;
  v22 = (_QWORD *)*a3;
  v23 = sub_1C477672C(*a3, *(v20 - 1));
  v24 = v22[1];
  v25 = 16;
  if (v24 == *v22)
    v25 = 20;
  v79 = v19;
  v80 = v20;
  if (v23 == (_QWORD *)(v24 + 8 * *(unsigned int *)((char *)v22 + v25)))
  {
    v37 = 8 - 8 * v19;
    v38 = v19;
    while (v37)
    {
      v26 = v38 - 1;
      v39 = (_QWORD *)*a3;
      v40 = sub_1C477672C(*a3, a1[-1].i64[v38]);
      v41 = v39[1];
      if (v41 == *v39)
        v42 = 20;
      else
        v42 = 16;
      v43 = (_QWORD *)(v41 + 8 * *(unsigned int *)((char *)v39 + v42));
      v37 += 8;
      v38 = v26;
      if (v40 != v43)
      {
        v21 = (uint64_t *)((char *)a1->i64 - v37);
        goto LABEL_37;
      }
    }
    v44 = (uint64_t *)a1;
  }
  else
  {
    v26 = v19;
LABEL_37:
    v44 = (uint64_t *)sub_1C5C46758(a1, v21, a3, v26, a5, a6);
  }
  v45 = a4 - v19;
  v46 = (_QWORD *)*a3;
  v47 = sub_1C477672C(*a3, *v20);
  v48 = v46[1];
  v49 = 16;
  if (v48 == *v46)
    v49 = 20;
  if (v47 == (_QWORD *)(v48 + 8 * *(unsigned int *)((char *)v46 + v49)))
  {
LABEL_46:
    v11 = (char *)sub_1C5C46758(v20, a2, a3, v45, a5, a6);
  }
  else
  {
    v11 = (char *)(a2 + 1);
    v50 = &a1->i64[v19 + 1];
    while (v50 != a2)
    {
      --v45;
      v51 = *v50++;
      v52 = (_QWORD *)*a3;
      v53 = sub_1C477672C(*a3, v51);
      v54 = v52[1];
      v55 = 16;
      if (v54 == *v52)
        v55 = 20;
      ++v20;
      if (v53 == (_QWORD *)(v54 + 8 * *(unsigned int *)((char *)v52 + v55)))
        goto LABEL_46;
    }
  }
  if (v44 != v80)
  {
    if (v80 == (uint64_t *)v11)
    {
      return v44;
    }
    else if (v44 + 1 == v80)
    {
      v62 = *v44;
      v63 = v11 - (char *)v80;
      memmove(v44, v80, v63);
      v11 = (char *)v44 + v63;
      *(_QWORD *)v11 = v62;
    }
    else if (v80 + 1 == (uint64_t *)v11)
    {
      v64 = v11 - 8;
      v65 = *((_QWORD *)v11 - 1);
      v11 = (char *)(v44 + 1);
      if (v64 != (char *)v44)
        memmove(v44 + 1, v44, v64 - (char *)v44);
      *v44 = v65;
    }
    else
    {
      v56 = v80 - v44;
      if (v56 == (v11 - (char *)v80) >> 3)
      {
        v57 = v44 + 1;
        v58 = (uint64_t)&a1->i64[v79 + 1];
        do
        {
          v59 = *(v57 - 1);
          *(v57 - 1) = *(_QWORD *)(v58 - 8);
          *(_QWORD *)(v58 - 8) = v59;
          if (v57 == v80)
            break;
          ++v57;
          v60 = v58 == (_QWORD)v11;
          v58 += 8;
        }
        while (!v60);
        return v80;
      }
      else
      {
        v66 = (v11 - (char *)v80) >> 3;
        v67 = v80 - v44;
        do
        {
          v68 = v67;
          v67 = v66;
          v66 = v68 % v66;
        }
        while (v66);
        if (v67)
        {
          v69 = &v44[v67];
          do
          {
            v71 = *--v69;
            v70 = v71;
            v72 = &v69[v56];
            v73 = v69;
            do
            {
              v74 = v72;
              *v73 = *v72;
              v75 = &v72[v56];
              v76 = __OFSUB__(v56, (v11 - (char *)v72) >> 3);
              v78 = v56 - ((v11 - (char *)v72) >> 3);
              v77 = (v78 < 0) ^ v76;
              v72 = &v44[v78];
              if (v77)
                v72 = v75;
              v73 = v74;
            }
            while (v72 != v69);
            *v74 = v70;
          }
          while (v69 != v44);
        }
        return &v44[(v11 - (char *)v80) >> 3];
      }
    }
  }
  return (uint64_t *)v11;
}

uint64_t sub_1C5C46BC4(uint64_t result, uint64_t *a2, uint64_t **a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  _QWORD *v18;
  unsigned int v19;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  _QWORD *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  unsigned int v40;
  _QWORD *v41;
  uint64_t *v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  _QWORD *v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  int v54;
  _QWORD *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  _QWORD *v61;
  unsigned int v62;
  uint64_t *v64;
  unint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  _QWORD *v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  _QWORD *v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;

  if (a4 < 2)
    return result;
  v8 = (_QWORD *)result;
  if (a4 != 2)
  {
    if ((uint64_t)a4 <= 128)
    {
      if ((uint64_t *)result == a2)
        return result;
      v21 = result + 8;
      if ((uint64_t *)(result + 8) == a2)
        return result;
      v22 = (_QWORD *)result;
      while (1)
      {
        v23 = v22;
        v22 = (_QWORD *)v21;
        v24 = *((_DWORD *)*a3 + 4);
        if (!v24)
          goto LABEL_58;
        v25 = v23[1];
        v26 = **a3;
        v27 = (v25 >> 4) ^ (v25 >> 9);
        v28 = v24 - 1;
        v29 = (v24 - 1) & v27;
        v30 = *(_QWORD *)(v26 + 16 * v29);
        if (v30 != v25)
          break;
LABEL_22:
        v33 = *(_QWORD **)(v26 + 16 * v29 + 8);
        if (!v33)
          goto LABEL_26;
        v34 = 0;
        do
        {
          v33 = (_QWORD *)*v33;
          ++v34;
        }
        while (v33);
LABEL_27:
        v35 = *v23;
        v36 = ((*v23 >> 4) ^ (*v23 >> 9)) & v28;
        v37 = *(_QWORD *)(v26 + 16 * v36);
        if (*v23 != v37)
        {
          result = 1;
          do
          {
            if (v37 == -4096)
              goto LABEL_58;
            v38 = v36 + result;
            result = (result + 1);
            v36 = v38 & v28;
            v37 = *(_QWORD *)(v26 + 16 * v36);
          }
          while (v35 != v37);
        }
        v39 = *(_QWORD **)(v26 + 16 * v36 + 8);
        if (v39)
        {
          v40 = 0;
          do
          {
            v39 = (_QWORD *)*v39;
            ++v40;
          }
          while (v39);
          if (v34 < v40)
          {
            v41 = v22;
            while (1)
            {
              *v41 = v35;
              if (v23 == v8)
              {
                v41 = v8;
                goto LABEL_57;
              }
              v41 = v23;
              v42 = *a3;
              v43 = *((_DWORD *)*a3 + 4);
              if (!v43)
                goto LABEL_57;
              v44 = *v42;
              v45 = v43 - 1;
              v46 = (v43 - 1) & v27;
              v47 = *(_QWORD *)(*v42 + 16 * v46);
              if (v47 != v25)
                break;
LABEL_42:
              v50 = *(_QWORD **)(v44 + 16 * v46 + 8);
              if (!v50)
                goto LABEL_46;
              v51 = 0;
              do
              {
                v50 = (_QWORD *)*v50;
                ++v51;
              }
              while (v50);
LABEL_47:
              v23 = v41 - 1;
              v35 = *(v41 - 1);
              v52 = ((v35 >> 4) ^ (v35 >> 9)) & v45;
              result = *(_QWORD *)(v44 + 16 * v52);
              if (v35 != result)
              {
                v53 = 1;
                while (result != -4096)
                {
                  v54 = v52 + v53++;
                  v52 = v54 & v45;
                  result = *(_QWORD *)(v44 + 16 * v52);
                  if (v35 == result)
                    goto LABEL_51;
                }
LABEL_57:
                *v41 = v25;
                goto LABEL_58;
              }
LABEL_51:
              v55 = *(_QWORD **)(v44 + 16 * v52 + 8);
              if (v55)
              {
                v56 = 0;
                do
                {
                  v55 = (_QWORD *)*v55;
                  ++v56;
                }
                while (v55);
                if (v51 < v56)
                  continue;
              }
              goto LABEL_57;
            }
            v48 = 1;
            while (v47 != -4096)
            {
              v49 = v46 + v48++;
              v46 = v49 & v45;
              v47 = *(_QWORD *)(v44 + 16 * v46);
              if (v47 == v25)
                goto LABEL_42;
            }
LABEL_46:
            v51 = 0;
            goto LABEL_47;
          }
        }
LABEL_58:
        v21 = (uint64_t)(v22 + 1);
        if (v22 + 1 == a2)
          return result;
      }
      v31 = 1;
      while (v30 != -4096)
      {
        v32 = v29 + v31++;
        v29 = v32 & v28;
        v30 = *(_QWORD *)(v26 + 16 * v29);
        if (v30 == v25)
          goto LABEL_22;
      }
LABEL_26:
      v34 = 0;
      goto LABEL_27;
    }
    v64 = a5;
    v65 = a4 >> 1;
    v66 = (uint64_t *)(result + 8 * (a4 >> 1));
    v67 = a4 >> 1;
    if ((uint64_t)a4 > a6)
    {
      sub_1C5C46BC4(result, v66, a3, v67, a5, a6);
      sub_1C5C46BC4(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v64, a6);
      return sub_1C5C476A4((uint64_t)v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), v64, a6);
    }
    sub_1C5C47150((uint64_t *)result, v66, a3, v67, a5);
    v68 = &v64[v65];
    result = (uint64_t)sub_1C5C47150(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v68);
    v69 = &v64[a4];
    v70 = v68;
    while (1)
    {
      if (v70 == v69)
      {
        if (v64 != v68)
        {
          v89 = 0;
          do
          {
            v8[v89] = v64[v89];
            ++v89;
          }
          while (&v64[v89] != v68);
        }
        return result;
      }
      v71 = *v64;
      v72 = *((_DWORD *)*a3 + 4);
      if (!v72)
        goto LABEL_93;
      v73 = *v70;
      v74 = **a3;
      v75 = v72 - 1;
      v76 = v75 & ((*v70 >> 4) ^ (*v70 >> 9));
      v77 = *(_QWORD *)(v74 + 16 * v76);
      if (v77 != *v70)
        break;
LABEL_79:
      v80 = *(_QWORD **)(v74 + 16 * v76 + 8);
      if (!v80)
        goto LABEL_83;
      v81 = 0;
      do
      {
        v80 = (_QWORD *)*v80;
        ++v81;
      }
      while (v80);
LABEL_84:
      v82 = ((v71 >> 4) ^ (v71 >> 9)) & v75;
      v83 = *(_QWORD *)(v74 + 16 * v82);
      if (v71 != v83)
      {
        v84 = 1;
        while (v83 != -4096)
        {
          v85 = v82 + v84++;
          v82 = v85 & v75;
          v83 = *(_QWORD *)(v74 + 16 * v82);
          if (v71 == v83)
            goto LABEL_88;
        }
LABEL_93:
        *v8 = v71;
        ++v64;
        goto LABEL_94;
      }
LABEL_88:
      v86 = *(_QWORD **)(v74 + 16 * v82 + 8);
      if (!v86)
        goto LABEL_93;
      v87 = 0;
      do
      {
        v86 = (_QWORD *)*v86;
        ++v87;
      }
      while (v86);
      if (v81 >= v87)
        goto LABEL_93;
      *v8 = v73;
      ++v70;
LABEL_94:
      ++v8;
      if (v64 == v68)
      {
        if (v70 != v69)
        {
          v88 = 0;
          do
          {
            v8[v88] = v70[v88];
            ++v88;
          }
          while (&v70[v88] != v69);
        }
        return result;
      }
    }
    v78 = 1;
    while (v77 != -4096)
    {
      v79 = v76 + v78++;
      v76 = v79 & v75;
      v77 = *(_QWORD *)(v74 + 16 * v76);
      if (v77 == v73)
        goto LABEL_79;
    }
LABEL_83:
    v81 = 0;
    goto LABEL_84;
  }
  v9 = *((_DWORD *)*a3 + 4);
  if (!v9)
    return result;
  v10 = *(a2 - 1);
  v11 = *(_QWORD *)result;
  v12 = **a3;
  v13 = v9 - 1;
  v14 = v13 & ((v10 >> 4) ^ (v10 >> 9));
  v15 = *(_QWORD *)(v12 + 16 * v14);
  if (v15 != v10)
  {
    v16 = 1;
    while (v15 != -4096)
    {
      v17 = v14 + v16++;
      v14 = v17 & v13;
      v15 = *(_QWORD *)(v12 + 16 * v14);
      if (v15 == v10)
        goto LABEL_9;
    }
    goto LABEL_60;
  }
LABEL_9:
  v18 = *(_QWORD **)(v12 + 16 * v14 + 8);
  if (!v18)
  {
LABEL_60:
    v19 = 0;
    goto LABEL_61;
  }
  v19 = 0;
  do
  {
    v18 = (_QWORD *)*v18;
    ++v19;
  }
  while (v18);
LABEL_61:
  v57 = ((v11 >> 4) ^ (v11 >> 9)) & v13;
  v58 = *(_QWORD *)(v12 + 16 * v57);
  if (v11 == v58)
  {
LABEL_65:
    v61 = *(_QWORD **)(v12 + 16 * v57 + 8);
    if (v61)
    {
      v62 = 0;
      do
      {
        v61 = (_QWORD *)*v61;
        ++v62;
      }
      while (v61);
      if (v19 < v62)
      {
        *(_QWORD *)result = v10;
        *(a2 - 1) = v11;
      }
    }
  }
  else
  {
    v59 = 1;
    while (v58 != -4096)
    {
      v60 = v57 + v59++;
      v57 = v60 & v13;
      v58 = *(_QWORD *)(v12 + 16 * v57);
      if (v11 == v58)
        goto LABEL_65;
    }
  }
  return result;
}

uint64_t *sub_1C5C47150(uint64_t *result, uint64_t *a2, uint64_t **a3, unint64_t a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  _QWORD *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  _QWORD *v41;
  unsigned int v42;
  uint64_t *v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  _QWORD *v51;
  unsigned int v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  _QWORD *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  _QWORD *v65;
  unsigned int v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  _QWORD *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  _QWORD *v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;

  if (!a4)
    return result;
  v5 = a5;
  v7 = result;
  if (a4 == 1)
  {
LABEL_72:
    *v5 = *v7;
    return result;
  }
  if (a4 == 2)
  {
    v11 = a2 - 1;
    v10 = *(a2 - 1);
    v12 = *result;
    v13 = *((_DWORD *)*a3 + 4);
    if (!v13)
    {
LABEL_71:
      *a5 = v12;
      v5 = a5 + 1;
      v7 = v11;
      goto LABEL_72;
    }
    v14 = **a3;
    v15 = v13 - 1;
    v16 = v15 & ((v10 >> 4) ^ (v10 >> 9));
    v17 = *(_QWORD *)(v14 + 16 * v16);
    if (v17 == v10)
    {
LABEL_9:
      v20 = *(_QWORD **)(v14 + 16 * v16 + 8);
      if (v20)
      {
        v21 = 0;
        do
        {
          v20 = (_QWORD *)*v20;
          ++v21;
        }
        while (v20);
LABEL_62:
        v61 = ((v12 >> 4) ^ (v12 >> 9)) & v15;
        v62 = *(_QWORD *)(v14 + 16 * v61);
        if (v12 == v62)
        {
LABEL_66:
          v65 = *(_QWORD **)(v14 + 16 * v61 + 8);
          if (v65)
          {
            v66 = 0;
            do
            {
              v65 = (_QWORD *)*v65;
              ++v66;
            }
            while (v65);
            if (v21 < v66)
            {
              v12 = *(a2 - 1);
              v11 = result;
            }
          }
        }
        else
        {
          v63 = 1;
          while (v62 != -4096)
          {
            v64 = v61 + v63++;
            v61 = v64 & v15;
            v62 = *(_QWORD *)(v14 + 16 * v61);
            if (v12 == v62)
              goto LABEL_66;
          }
        }
        goto LABEL_71;
      }
    }
    else
    {
      v18 = 1;
      while (v17 != -4096)
      {
        v19 = v16 + v18++;
        v16 = v19 & v15;
        v17 = *(_QWORD *)(v14 + 16 * v16);
        if (v17 == v10)
          goto LABEL_9;
      }
    }
    v21 = 0;
    goto LABEL_62;
  }
  if ((uint64_t)a4 > 8)
  {
    v67 = &result[a4 >> 1];
    sub_1C5C46BC4(result, v67, a3, a4 >> 1, a5, a4 >> 1);
    result = (uint64_t *)sub_1C5C46BC4(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
    v68 = &v7[a4 >> 1];
    while (1)
    {
      if (v68 == a2)
      {
        if (v7 != v67)
        {
          v87 = 0;
          do
          {
            v5[v87] = v7[v87];
            ++v87;
          }
          while (&v7[v87] != v67);
        }
        return result;
      }
      v69 = *v7;
      v70 = *((_DWORD *)*a3 + 4);
      if (!v70)
        goto LABEL_95;
      v71 = *v68;
      v72 = **a3;
      v73 = v70 - 1;
      v74 = v73 & ((*v68 >> 4) ^ (*v68 >> 9));
      v75 = *(_QWORD *)(v72 + 16 * v74);
      if (v75 != *v68)
        break;
LABEL_81:
      v78 = *(_QWORD **)(v72 + 16 * v74 + 8);
      if (!v78)
        goto LABEL_85;
      v79 = 0;
      do
      {
        v78 = (_QWORD *)*v78;
        ++v79;
      }
      while (v78);
LABEL_86:
      v80 = ((v69 >> 4) ^ (v69 >> 9)) & v73;
      v81 = *(_QWORD *)(v72 + 16 * v80);
      if (v69 != v81)
      {
        v82 = 1;
        while (v81 != -4096)
        {
          v83 = v80 + v82++;
          v80 = v83 & v73;
          v81 = *(_QWORD *)(v72 + 16 * v80);
          if (v69 == v81)
            goto LABEL_90;
        }
LABEL_95:
        *v5 = v69;
        ++v7;
        goto LABEL_96;
      }
LABEL_90:
      v84 = *(_QWORD **)(v72 + 16 * v80 + 8);
      if (!v84)
        goto LABEL_95;
      v85 = 0;
      do
      {
        v84 = (_QWORD *)*v84;
        ++v85;
      }
      while (v84);
      if (v79 >= v85)
        goto LABEL_95;
      *v5 = v71;
      ++v68;
LABEL_96:
      ++v5;
      if (v7 == v67)
      {
        if (v68 != a2)
        {
          v86 = 0;
          do
          {
            v5[v86] = v68[v86];
            ++v86;
          }
          while (&v68[v86] != a2);
        }
        return result;
      }
    }
    v76 = 1;
    while (v75 != -4096)
    {
      v77 = v74 + v76++;
      v74 = v77 & v73;
      v75 = *(_QWORD *)(v72 + 16 * v74);
      if (v75 == v71)
        goto LABEL_81;
    }
LABEL_85:
    v79 = 0;
    goto LABEL_86;
  }
  if (result == a2)
    return result;
  v22 = result + 1;
  *a5 = *result;
  if (result + 1 == a2)
    return result;
  v23 = a5;
  v24 = a5;
  do
  {
    v26 = *v24++;
    v25 = v26;
    v27 = *v22;
    v28 = *((_DWORD *)*a3 + 4);
    if (!v28)
      goto LABEL_56;
    v29 = **a3;
    v30 = v28 - 1;
    v31 = v30 & ((v27 >> 4) ^ (v27 >> 9));
    v32 = *(_QWORD *)(v29 + 16 * v31);
    if (v32 == v27)
    {
LABEL_22:
      v35 = *(_QWORD **)(v29 + 16 * v31 + 8);
      if (v35)
      {
        v36 = 0;
        do
        {
          v35 = (_QWORD *)*v35;
          ++v36;
        }
        while (v35);
        goto LABEL_27;
      }
    }
    else
    {
      v33 = 1;
      while (v32 != -4096)
      {
        v34 = v31 + v33++;
        v31 = v34 & v30;
        v32 = *(_QWORD *)(v29 + 16 * v31);
        if (v32 == v27)
          goto LABEL_22;
      }
    }
    v36 = 0;
LABEL_27:
    v37 = ((v25 >> 4) ^ (v25 >> 9)) & v30;
    v38 = *(_QWORD *)(v29 + 16 * v37);
    if (v25 != v38)
    {
      v39 = 1;
      while (v38 != -4096)
      {
        v40 = v37 + v39++;
        v37 = v40 & v30;
        v38 = *(_QWORD *)(v29 + 16 * v37);
        if (v25 == v38)
          goto LABEL_31;
      }
LABEL_56:
      *v24 = v27;
      goto LABEL_57;
    }
LABEL_31:
    v41 = *(_QWORD **)(v29 + 16 * v37 + 8);
    if (!v41)
      goto LABEL_56;
    v42 = 0;
    do
    {
      v41 = (_QWORD *)*v41;
      ++v42;
    }
    while (v41);
    if (v36 >= v42)
      goto LABEL_56;
    v23[1] = v25;
    v43 = a5;
    if (v23 == a5)
      goto LABEL_60;
    while (1)
    {
      v44 = *((_DWORD *)*a3 + 4);
      if (!v44)
        break;
      v45 = **a3;
      v46 = v44 - 1;
      v47 = v46 & ((*v22 >> 4) ^ (*v22 >> 9));
      v48 = *(_QWORD *)(v45 + 16 * v47);
      if (v48 != *v22)
      {
        v49 = 1;
        while (v48 != -4096)
        {
          v50 = v47 + v49++;
          v47 = v50 & v46;
          v48 = *(_QWORD *)(v45 + 16 * v47);
          if (v48 == *v22)
            goto LABEL_41;
        }
LABEL_45:
        v52 = 0;
        goto LABEL_46;
      }
LABEL_41:
      v51 = *(_QWORD **)(v45 + 16 * v47 + 8);
      if (!v51)
        goto LABEL_45;
      v52 = 0;
      do
      {
        v51 = (_QWORD *)*v51;
        ++v52;
      }
      while (v51);
LABEL_46:
      v53 = v23 - 1;
      v54 = *(v23 - 1);
      v55 = ((v54 >> 4) ^ (v54 >> 9)) & v46;
      v56 = *(_QWORD *)(v45 + 16 * v55);
      if (v54 != v56)
      {
        v57 = 1;
        while (v56 != -4096)
        {
          v58 = v55 + v57++;
          v55 = v58 & v46;
          v56 = *(_QWORD *)(v45 + 16 * v55);
          if (v54 == v56)
            goto LABEL_50;
        }
        break;
      }
LABEL_50:
      v59 = *(_QWORD **)(v45 + 16 * v55 + 8);
      if (!v59)
        break;
      v60 = 0;
      do
      {
        v59 = (_QWORD *)*v59;
        ++v60;
      }
      while (v59);
      if (v52 >= v60)
        break;
      *v23-- = v54;
      if (v53 == a5)
      {
        v43 = a5;
        goto LABEL_60;
      }
    }
    v43 = v23;
LABEL_60:
    *v43 = *v22;
LABEL_57:
    ++v22;
    v23 = v24;
  }
  while (v22 != a2);
  return result;
}

uint64_t sub_1C5C476A4(uint64_t result, _QWORD *a2, _QWORD *a3, uint64_t **a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  _QWORD *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  _QWORD *v41;
  unsigned int v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  _QWORD *v49;
  unsigned int v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  _QWORD *v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  _QWORD *v68;
  unsigned int v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t **v72;
  _QWORD *v73;
  int64_t v74;
  uint64_t **v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t **v78;
  uint64_t **v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t **v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  _QWORD *v96;
  unsigned int v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  _QWORD *v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  _QWORD *v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  _QWORD *v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t **v127;
  _QWORD *v128;

  if (!a6)
    return result;
  v9 = a6;
  v13 = (_QWORD *)result;
  while (a5 > a8 && v9 > a8)
  {
    if (!a5)
      return result;
    v14 = *a2;
    v15 = **a4;
    v16 = *((_DWORD *)*a4 + 4);
    v17 = v16 - 1;
    v18 = (uint64_t *)(v15 + 16 * ((v16 - 1) & ((*a2 >> 4) ^ (*a2 >> 9))));
    while (1)
    {
      if (!v16)
        goto LABEL_25;
      v19 = *v18;
      v20 = v17 & ((*a2 >> 4) ^ (*a2 >> 9));
      if (*v18 != v14)
      {
        v21 = 1;
        LODWORD(v20) = v17 & ((*a2 >> 4) ^ (*a2 >> 9));
        while (v19 != -4096)
        {
          v22 = v20 + v21++;
          v20 = v22 & v17;
          v19 = *(_QWORD *)(v15 + 16 * v20);
          if (v19 == v14)
            goto LABEL_12;
        }
LABEL_16:
        v24 = 0;
        goto LABEL_17;
      }
LABEL_12:
      v23 = *(_QWORD **)(v15 + 16 * v20 + 8);
      if (!v23)
        goto LABEL_16;
      v24 = 0;
      do
      {
        v23 = (_QWORD *)*v23;
        ++v24;
      }
      while (v23);
LABEL_17:
      v25 = *v13;
      v26 = ((*v13 >> 4) ^ (*v13 >> 9)) & v17;
      v27 = *(_QWORD *)(v15 + 16 * v26);
      if (*v13 != v27)
      {
        result = 1;
        while (v27 != -4096)
        {
          v28 = v26 + result;
          result = (result + 1);
          v26 = v28 & v17;
          v27 = *(_QWORD *)(v15 + 16 * v26);
          if (v25 == v27)
            goto LABEL_21;
        }
        goto LABEL_25;
      }
LABEL_21:
      v29 = *(_QWORD **)(v15 + 16 * v26 + 8);
      if (v29)
      {
        v30 = 0;
        do
        {
          v29 = (_QWORD *)*v29;
          ++v30;
        }
        while (v29);
        if (v24 < v30)
          break;
      }
LABEL_25:
      ++v13;
      if (!--a5)
        return result;
    }
    if (a5 >= v9)
    {
      if (a5 == 1)
      {
        *v13 = v14;
        *a2 = v25;
        return result;
      }
      if (a5 >= 0)
        v53 = a5;
      else
        v53 = a5 + 1;
      v52 = v53 >> 1;
      v34 = &v13[v53 >> 1];
      v33 = a3;
      if (a3 == a2)
      {
LABEL_84:
        v32 = v33 - a2;
        goto LABEL_85;
      }
      v54 = a3 - a2;
      v55 = *v34;
      v33 = a2;
      while (2)
      {
        v56 = v54 >> 1;
        v57 = &v33[v54 >> 1];
        v58 = ((*v57 >> 4) ^ (*v57 >> 9)) & v17;
        v59 = *(_QWORD *)(v15 + 16 * v58);
        if (v59 == *v57)
        {
LABEL_66:
          v62 = *(_QWORD **)(v15 + 16 * v58 + 8);
          if (!v62)
            goto LABEL_70;
          v63 = 0;
          do
          {
            v62 = (_QWORD *)*v62;
            ++v63;
          }
          while (v62);
        }
        else
        {
          v60 = 1;
          while (v59 != -4096)
          {
            v61 = v58 + v60++;
            v58 = v61 & v17;
            v59 = *(_QWORD *)(v15 + 16 * v58);
            if (v59 == *v57)
              goto LABEL_66;
          }
LABEL_70:
          v63 = 0;
        }
        v64 = ((*v34 >> 4) ^ (*v34 >> 9)) & v17;
        if (v55 == *(_QWORD *)(v15 + 16 * v64))
        {
LABEL_75:
          v68 = *(_QWORD **)(v15 + 16 * v64 + 8);
          if (!v68)
            goto LABEL_79;
          v69 = 0;
          do
          {
            v68 = (_QWORD *)*v68;
            ++v69;
          }
          while (v68);
        }
        else
        {
          v65 = 1;
          v66 = *(_QWORD *)(v15 + 16 * (((*v34 >> 4) ^ (*v34 >> 9)) & v17));
          LODWORD(v64) = ((*v34 >> 4) ^ (*v34 >> 9)) & v17;
          while (v66 != -4096)
          {
            v67 = v64 + v65++;
            v64 = v67 & v17;
            v66 = *(_QWORD *)(v15 + 16 * v64);
            if (v55 == v66)
              goto LABEL_75;
          }
LABEL_79:
          v69 = 0;
        }
        v70 = v57 + 1;
        v54 += ~v56;
        if (v63 < v69)
          v33 = v70;
        else
          v54 = v56;
        if (!v54)
          goto LABEL_84;
        continue;
      }
    }
    if (v9 >= 0)
      v31 = v9;
    else
      v31 = v9 + 1;
    v32 = v31 >> 1;
    v33 = &a2[v31 >> 1];
    v34 = a2;
    if (a2 != v13)
    {
      v35 = a2 - v13;
      v36 = *v33;
      v34 = v13;
      while (1)
      {
        v37 = ((*v33 >> 4) ^ (*v33 >> 9)) & v17;
        if (*(_QWORD *)(v15 + 16 * v37) != v36)
          break;
LABEL_37:
        v41 = *(_QWORD **)(v15 + 16 * v37 + 8);
        if (!v41)
          goto LABEL_41;
        v42 = 0;
        do
        {
          v41 = (_QWORD *)*v41;
          ++v42;
        }
        while (v41);
LABEL_42:
        v43 = v35 >> 1;
        v44 = &v34[v35 >> 1];
        v45 = ((*v44 >> 4) ^ (*v44 >> 9)) & v17;
        v46 = *(_QWORD *)(v15 + 16 * v45);
        if (*v44 != v46)
        {
          v47 = 1;
          while (v46 != -4096)
          {
            v48 = v45 + v47++;
            v45 = v48 & v17;
            v46 = *(_QWORD *)(v15 + 16 * v45);
            if (*v44 == v46)
              goto LABEL_46;
          }
LABEL_50:
          v50 = 0;
          goto LABEL_51;
        }
LABEL_46:
        v49 = *(_QWORD **)(v15 + 16 * v45 + 8);
        if (!v49)
          goto LABEL_50;
        v50 = 0;
        do
        {
          v49 = (_QWORD *)*v49;
          ++v50;
        }
        while (v49);
LABEL_51:
        v51 = v44 + 1;
        v35 += ~v43;
        if (v42 < v50)
          v35 = v43;
        else
          v34 = v51;
        if (!v35)
          goto LABEL_55;
      }
      v38 = 1;
      v39 = *(_QWORD *)(v15 + 16 * (((*v33 >> 4) ^ (*v33 >> 9)) & v17));
      LODWORD(v37) = ((*v33 >> 4) ^ (*v33 >> 9)) & v17;
      while (v39 != -4096)
      {
        v40 = v37 + v38++;
        v37 = v40 & v17;
        v39 = *(_QWORD *)(v15 + 16 * v37);
        if (v39 == v36)
          goto LABEL_37;
      }
LABEL_41:
      v42 = 0;
      goto LABEL_42;
    }
LABEL_55:
    v52 = v34 - v13;
LABEL_85:
    v71 = v33;
    if (v34 != a2)
    {
      v71 = v34;
      if (a2 != v33)
      {
        v128 = a7;
        if (v34 + 1 == a2)
        {
          v124 = *v34;
          v126 = a3;
          v74 = (char *)v33 - (char *)a2;
          v75 = a4;
          memmove(v34, a2, (char *)v33 - (char *)a2);
          a4 = v75;
          a3 = v126;
          a7 = v128;
          v71 = (_QWORD *)((char *)v34 + v74);
          *v71 = v124;
        }
        else
        {
          if (a2 + 1 == v33)
          {
            v76 = *(v33 - 1);
            v71 = v34 + 1;
            if (v33 - 1 != v34)
            {
              v125 = *(v33 - 1);
              v127 = a4;
              memmove(v34 + 1, v34, (char *)(v33 - 1) - (char *)v34);
              v76 = v125;
              a4 = v127;
            }
            *v34 = v76;
          }
          else
          {
            v72 = a4;
            v73 = sub_1C4E85DF0(v34, a2, v33);
            a4 = v72;
            v71 = v73;
          }
          a7 = v128;
        }
      }
    }
    a5 -= v52;
    v9 -= v32;
    if (v52 + v32 >= a5 + v9)
    {
      v82 = v33;
      v83 = a3;
      v84 = a4;
      v85 = a7;
      result = sub_1C5C476A4(v71, v82, v83, a4, a5, v9);
      a4 = v84;
      a7 = v85;
      v33 = v34;
      v9 = v32;
      a5 = v52;
      a3 = v71;
    }
    else
    {
      v77 = v13;
      v78 = a4;
      v79 = a4;
      v80 = v52;
      v81 = a7;
      result = sub_1C5C476A4(v77, v34, v71, v78, v80, v32);
      a4 = v79;
      a7 = v81;
      v13 = v71;
    }
    a2 = v33;
    if (!v9)
      return result;
  }
  if (a5 <= v9)
  {
    if (v13 == a2)
      return result;
    v105 = 0;
    do
    {
      a7[v105] = v13[v105];
      ++v105;
    }
    while (&v13[v105] != a2);
    if (!(v105 * 8))
      return result;
    v106 = a7;
    while (1)
    {
      if (a2 == a3)
        return (uint64_t)memmove(v13, v106, (char *)a7 - (char *)v106 + v105 * 8);
      v107 = *v106;
      v108 = *((_DWORD *)*a4 + 4);
      if (!v108)
        goto LABEL_153;
      v109 = *a2;
      v110 = **a4;
      v111 = v108 - 1;
      v112 = v111 & ((*a2 >> 4) ^ (*a2 >> 9));
      v113 = *(_QWORD *)(v110 + 16 * v112);
      if (v113 != *a2)
        break;
LABEL_139:
      v116 = *(_QWORD **)(v110 + 16 * v112 + 8);
      if (!v116)
        goto LABEL_143;
      v117 = 0;
      do
      {
        v116 = (_QWORD *)*v116;
        ++v117;
      }
      while (v116);
LABEL_144:
      v118 = ((v107 >> 4) ^ (v107 >> 9)) & v111;
      v119 = *(_QWORD *)(v110 + 16 * v118);
      if (v107 != v119)
      {
        result = 1;
        while (v119 != -4096)
        {
          v120 = v118 + result;
          result = (result + 1);
          v118 = v120 & v111;
          v119 = *(_QWORD *)(v110 + 16 * v118);
          if (v107 == v119)
            goto LABEL_148;
        }
LABEL_153:
        *v13 = v107;
        ++v106;
        goto LABEL_154;
      }
LABEL_148:
      v121 = *(_QWORD **)(v110 + 16 * v118 + 8);
      if (!v121)
        goto LABEL_153;
      v122 = 0;
      do
      {
        v121 = (_QWORD *)*v121;
        ++v122;
      }
      while (v121);
      if (v117 >= v122)
        goto LABEL_153;
      *v13 = v109;
      ++a2;
LABEL_154:
      ++v13;
      if (&a7[v105] == v106)
        return result;
    }
    v114 = 1;
    while (v113 != -4096)
    {
      v115 = v112 + v114++;
      v112 = v115 & v111;
      v113 = *(_QWORD *)(v110 + 16 * v112);
      if (v113 == v109)
        goto LABEL_139;
    }
LABEL_143:
    v117 = 0;
    goto LABEL_144;
  }
  if (a2 == a3)
    return result;
  v86 = 0;
  do
  {
    a7[v86] = a2[v86];
    ++v86;
  }
  while (&a2[v86] != a3);
  if (!(v86 * 8))
    return result;
  v87 = &a7[v86];
  while (2)
  {
    if (a2 != v13)
    {
      v88 = *(v87 - 1);
      v89 = *((_DWORD *)*a4 + 4);
      if (!v89)
        goto LABEL_125;
      v90 = **a4;
      v91 = v89 - 1;
      v92 = v91 & ((v88 >> 4) ^ (v88 >> 9));
      v93 = *(_QWORD *)(v90 + 16 * v92);
      if (v93 == v88)
      {
LABEL_112:
        v96 = *(_QWORD **)(v90 + 16 * v92 + 8);
        if (!v96)
          goto LABEL_116;
        v97 = 0;
        do
        {
          v96 = (_QWORD *)*v96;
          ++v97;
        }
        while (v96);
      }
      else
      {
        v94 = 1;
        while (v93 != -4096)
        {
          v95 = v92 + v94++;
          v92 = v95 & v91;
          v93 = *(_QWORD *)(v90 + 16 * v92);
          if (v93 == v88)
            goto LABEL_112;
        }
LABEL_116:
        v97 = 0;
      }
      v98 = a2 - 1;
      v99 = *(a2 - 1);
      v100 = ((v99 >> 4) ^ (v99 >> 9)) & v91;
      v101 = *(_QWORD *)(v90 + 16 * v100);
      if (v99 == v101)
      {
LABEL_121:
        v103 = *(_QWORD **)(v90 + 16 * v100 + 8);
        if (!v103)
          goto LABEL_125;
        v104 = 0;
        do
        {
          v103 = (_QWORD *)*v103;
          ++v104;
        }
        while (v103);
        if (v97 >= v104)
          goto LABEL_125;
      }
      else
      {
        result = 1;
        while (v101 != -4096)
        {
          v102 = v100 + result;
          result = (result + 1);
          v100 = v102 & v91;
          v101 = *(_QWORD *)(v90 + 16 * v100);
          if (v99 == v101)
            goto LABEL_121;
        }
LABEL_125:
        v99 = *(v87 - 1);
        v98 = a2;
        --v87;
      }
      *--a3 = v99;
      a2 = v98;
      if (v87 == a7)
        return result;
      continue;
    }
    break;
  }
  if (v87 != a7)
  {
    v123 = 0;
    do
    {
      a3[v123 - 1] = v87[v123 - 1];
      --v123;
    }
    while (&v87[v123] != a7);
  }
  return result;
}

uint64_t *sub_1C5C47EE8(int8x16_t *a1, unint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v18;
  uint64_t v19;
  __int8 *v20;
  char *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  BOOL v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;

  if (a4 == 3)
  {
    v11 = &a1->i8[8];
    v12 = (_QWORD *)*a3;
    v13 = sub_1C477672C(*a3, **(_QWORD **)(a1->i64[1] + 32));
    v14 = v12[1];
    v15 = 16;
    if (v14 == *v12)
      v15 = 20;
    if (v13 == (_QWORD *)(v14 + 8 * *(unsigned int *)((char *)v12 + v15)))
    {
      v36 = a1->i64[1];
      a1->i64[1] = *a2;
      *a2 = v36;
      *a1 = vextq_s8(*a1, *a1, 8uLL);
      return (uint64_t *)v11;
    }
    v10 = a1->i64[0];
    a1->i64[0] = a1->i64[1];
    a1->i64[1] = v10;
    a1->i64[1] = *a2;
    goto LABEL_8;
  }
  if (a4 == 2)
  {
    v10 = a1->i64[0];
    a1->i64[0] = *a2;
LABEL_8:
    *a2 = v10;
    return (uint64_t *)a2;
  }
  if (a6 >= a4)
  {
    v27 = &a1->i64[1];
    *a5 = a1->i64[0];
    v28 = a5 + 1;
    if (&a1->u64[1] == a2)
    {
      a1->i64[0] = *a2;
      v11 = (char *)a2;
    }
    else
    {
      v29 = (uint64_t *)a1;
      do
      {
        v30 = (_QWORD *)*a3;
        v31 = sub_1C477672C(*a3, **(_QWORD **)(*v27 + 32));
        v32 = v30[1];
        if (v32 == *v30)
          v33 = 20;
        else
          v33 = 16;
        v34 = (_QWORD *)(v32 + 8 * *(unsigned int *)((char *)v30 + v33));
        v35 = *v27;
        if (v31 == v34)
          *v28++ = v35;
        else
          *v29++ = v35;
        ++v27;
      }
      while (v27 != (uint64_t *)a2);
      *v29 = *a2;
      v11 = (char *)(v29 + 1);
      if (v28 <= a5)
        return (uint64_t *)v11;
    }
    v61 = 0;
    do
    {
      *(_QWORD *)&v11[v61 * 8] = a5[v61];
      ++v61;
    }
    while (&a5[v61] < v28);
    return (uint64_t *)v11;
  }
  if (a4 >= 0)
    v18 = a4;
  else
    v18 = a4 + 1;
  v19 = v18 >> 1;
  v20 = &a1->i8[8 * (v18 >> 1)];
  v21 = v20 - 8;
  v22 = (_QWORD *)*a3;
  v23 = sub_1C477672C(*a3, **(_QWORD **)(*((_QWORD *)v20 - 1) + 32));
  v24 = v22[1];
  v25 = 16;
  if (v24 == *v22)
    v25 = 20;
  v78 = v19;
  v79 = (uint64_t *)v20;
  if (v23 == (_QWORD *)(v24 + 8 * *(unsigned int *)((char *)v22 + v25)))
  {
    v37 = 8 - 8 * v19;
    v38 = v19;
    while (v37)
    {
      v26 = v38 - 1;
      v39 = (_QWORD *)*a3;
      v40 = sub_1C477672C(*a3, **(_QWORD **)(a1[-1].i64[v38] + 32));
      v41 = v39[1];
      if (v41 == *v39)
        v42 = 20;
      else
        v42 = 16;
      v43 = (_QWORD *)(v41 + 8 * *(unsigned int *)((char *)v39 + v42));
      v37 += 8;
      v38 = v26;
      if (v40 != v43)
      {
        v21 = &a1->i8[-v37];
        goto LABEL_37;
      }
    }
    v44 = (uint64_t *)a1;
  }
  else
  {
    v26 = v19;
LABEL_37:
    v44 = (uint64_t *)sub_1C5C47EE8(a1, v21, a3, v26, a5, a6);
  }
  v45 = a4 - v19;
  v46 = (_QWORD *)*a3;
  v47 = sub_1C477672C(*a3, **(_QWORD **)(*(_QWORD *)v20 + 32));
  v48 = v46[1];
  v49 = 16;
  if (v48 == *v46)
    v49 = 20;
  if (v47 == (_QWORD *)(v48 + 8 * *(unsigned int *)((char *)v46 + v49)))
  {
LABEL_46:
    v11 = (char *)sub_1C5C47EE8(v20, a2, a3, v45, a5, a6);
  }
  else
  {
    v11 = (char *)(a2 + 1);
    v50 = &a1->i64[v19 + 1];
    while (v50 != (uint64_t *)a2)
    {
      --v45;
      v51 = *v50++;
      v52 = (_QWORD *)*a3;
      v53 = sub_1C477672C(*a3, **(_QWORD **)(v51 + 32));
      v54 = v52[1];
      v55 = 16;
      if (v54 == *v52)
        v55 = 20;
      v20 += 8;
      if (v53 == (_QWORD *)(v54 + 8 * *(unsigned int *)((char *)v52 + v55)))
        goto LABEL_46;
    }
  }
  if (v44 != v79)
  {
    if (v79 == (uint64_t *)v11)
    {
      return v44;
    }
    else if (v44 + 1 == v79)
    {
      v62 = *v44;
      memmove(v44, v79, v11 - (char *)v79);
      v11 = (char *)v44 + v11 - (char *)v79;
      *(_QWORD *)v11 = v62;
    }
    else if (v79 + 1 == (uint64_t *)v11)
    {
      v63 = v11 - 8;
      v64 = *((_QWORD *)v11 - 1);
      v11 = (char *)(v44 + 1);
      if (v63 != (char *)v44)
        memmove(v44 + 1, v44, v63 - (char *)v44);
      *v44 = v64;
    }
    else
    {
      v56 = v79 - v44;
      if (v56 == (v11 - (char *)v79) >> 3)
      {
        v57 = v44 + 1;
        v58 = (uint64_t)&a1->i64[v78 + 1];
        do
        {
          v59 = *(v57 - 1);
          *(v57 - 1) = *(_QWORD *)(v58 - 8);
          *(_QWORD *)(v58 - 8) = v59;
          if (v57 == v79)
            break;
          ++v57;
          v60 = v58 == (_QWORD)v11;
          v58 += 8;
        }
        while (!v60);
        return v79;
      }
      else
      {
        v65 = (v11 - (char *)v79) >> 3;
        v66 = v79 - v44;
        do
        {
          v67 = v66;
          v66 = v65;
          v65 = v67 % v65;
        }
        while (v65);
        if (v66)
        {
          v68 = &v44[v66];
          do
          {
            v70 = *--v68;
            v69 = v70;
            v71 = &v68[v56];
            v72 = v68;
            do
            {
              v73 = v71;
              *v72 = *v71;
              v74 = &v71[v56];
              v75 = __OFSUB__(v56, (v11 - (char *)v71) >> 3);
              v77 = v56 - ((v11 - (char *)v71) >> 3);
              v76 = (v77 < 0) ^ v75;
              v71 = &v44[v77];
              if (v76)
                v71 = v74;
              v72 = v73;
            }
            while (v71 != v68);
            *v73 = v69;
          }
          while (v68 != v44);
        }
        return &v44[(v11 - (char *)v79) >> 3];
      }
    }
  }
  return (uint64_t *)v11;
}

BOOL sub_1C5C48384(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[2];
  if (*a1 != v2)
    *a1 = v1 + 8;
  return v1 != v2;
}

BOOL sub_1C5C483A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 24);
  if (v1 != v2)
    *(_QWORD *)(a1 + 8) = v1 + 8;
  return v1 != v2;
}

uint64_t sub_1C5C483CC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5C392AC(v0, 0);
}

void sub_1C5C483FC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5C48420(uint64_t a1, llvm *a2)
{
  llvm::AnalysisUsage *v3;

  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
  return llvm::getLoopAnalysisUsage(a2, v3);
}

uint64_t sub_1C5C4848C(uint64_t a1, const llvm::Loop *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  llvm::Function *v8;
  char **v9;
  char *v10;
  uint64_t v11;
  char **v12;
  char *v13;
  uint64_t v14;
  char **v15;
  char *v16;
  llvm::AssumptionCacheTracker *v17;
  llvm::AssumptionCache *AssumptionCache;
  char **v19;
  char *v20;
  llvm::MemorySSA *v21;
  char **v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  void *v30;
  llvm::DominatorTree *v31;
  uint64_t AnalysisPass;
  uint64_t v33;
  int32x2_t *v34;
  llvm::BasicBlock *v36;
  uint64_t v37;
  _QWORD v38[2];
  const llvm::Loop *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  _QWORD v43[2];
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  int v51;
  _BYTE v52[64];
  void *v53;
  uint64_t v54;
  _BYTE v55[64];
  _QWORD **v56;
  _QWORD *v57[4];

  v57[2] = *(_QWORD **)MEMORY[0x1E0C80C00];
  v39 = a2;
  if ((llvm::LoopPass::skipLoop((llvm::LoopPass *)a1, a2) & 1) != 0)
    return 0;
  v8 = *(llvm::Function **)(**((_QWORD **)a2 + 4) + 56);
  v9 = **(char ****)(a1 + 8);
  do
  {
    v10 = *v9;
    v9 += 2;
  }
  while (v10 != llvm::DominatorTreeWrapperPass::ID);
  v11 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), llvm::DominatorTreeWrapperPass::ID);
  v12 = **(char ****)(a1 + 8);
  do
  {
    v13 = *v12;
    v12 += 2;
  }
  while (v13 != llvm::LoopInfoWrapperPass::ID);
  v14 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v12 - 1) + 96))(*(v12 - 1), llvm::LoopInfoWrapperPass::ID);
  v15 = **(char ****)(a1 + 8);
  do
  {
    v16 = *v15;
    v15 += 2;
  }
  while (v16 != llvm::AssumptionCacheTracker::ID);
  v17 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v15 - 1) + 96))(*(v15 - 1), llvm::AssumptionCacheTracker::ID);
  AssumptionCache = (llvm::AssumptionCache *)llvm::AssumptionCacheTracker::getAssumptionCache(v17, v8);
  v19 = **(char ****)(a1 + 8);
  do
  {
    v20 = *v19;
    v19 += 2;
  }
  while (v20 != llvm::AAResultsWrapperPass::ID);
  v21 = *(llvm::MemorySSA **)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v19 - 1) + 96))(*(v19 - 1), llvm::AAResultsWrapperPass::ID)+ 32);
  v22 = **(char ****)(a1 + 8);
  do
  {
    v23 = *v22;
    v22 += 2;
  }
  while (v23 != llvm::TargetTransformInfoWrapperPass::ID);
  v24 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v22 - 1) + 96))(*(v22 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v40 = 0;
  v41 = 0;
  LODWORD(v42) = 0;
  v43[0] = 0;
  v43[1] = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v25 = *(_QWORD *)(v24 + 56);
  if (v25)
  {
    v36 = (llvm::BasicBlock *)(v11 + 32);
    v3 = v43;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, llvm::Function *))(*(_QWORD *)v25 + 48))(v38, v25, v8);
    v8 = (llvm::Function *)(v24 + 64);
    v26 = v38[0];
    if (!*(_BYTE *)(v24 + 72))
    {
      *(_QWORD *)(v24 + 64) = v38[0];
      *(_BYTE *)(v24 + 72) = 1;
      goto LABEL_17;
    }
    v38[0] = 0;
    v27 = *(_QWORD *)v8;
    *(_QWORD *)v8 = v26;
    if (!v27)
      goto LABEL_17;
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    v28 = v38[0];
    v38[0] = 0;
    if (!v28)
      goto LABEL_17;
  }
  else
  {
    sub_1C485C2F0();
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
LABEL_17:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v3);
  sub_1C4D8B52C(&v40);
  v29 = **(void ****)(a1 + 8);
  do
  {
    v30 = *v29;
    v29 += 2;
  }
  while (v30 != &llvm::MemorySSAWrapperPass::ID);
  v31 = (llvm::DominatorTree *)(v14 + 32);
  v40 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v29 - 1) + 96))(*(v29 - 1), &llvm::MemorySSAWrapperPass::ID)+ 32);
  v41 = (char *)v43;
  v42 = 0x1000000000;
  v48 = v52;
  v49 = v52;
  v50 = 8;
  v51 = 0;
  v53 = v55;
  v54 = 0x800000000;
  v57[1] = 0;
  v57[0] = 0;
  v56 = v57;
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), llvm::ScalarEvolutionWrapperPass::ID, 1);
  if (AnalysisPass
    && (v33 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, llvm::ScalarEvolutionWrapperPass::ID)) != 0)
  {
    v34 = *(int32x2_t **)(v33 + 32);
  }
  else
  {
    v34 = 0;
  }
  v38[0] = &v39;
  v38[1] = a3;
  v37 = a3;
  v7 = sub_1C5C34FEC((uint64_t)a2, v36, v31, AssumptionCache, v21, (unint64_t *)v8, 1, *(unsigned __int8 *)(a1 + 28), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1C5C48878, (uint64_t)v38, v34, (llvm::LoopInfo *)&v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1C5C4890C, (uint64_t)&v37);
  sub_1C61247C0((uint64_t)&v56, v57[0]);
  if (v53 != v55)
    free(v53);
  if (v49 != v48)
    free(v49);
  sub_1C4EE41F8(&v41);
  return v7;
}

void sub_1C5C48878(uint64_t a1, char a2, char a3, llvm::Loop **a4, uint64_t a5)
{
  uint64_t v9;
  llvm::Loop *v10;

  if (a5)
  {
    v9 = 8 * a5;
    do
    {
      v10 = *a4++;
      llvm::LPPassManager::addLoop(*(llvm::LPPassManager **)(a1 + 8), v10);
      v9 -= 8;
    }
    while (v9);
  }
  if ((a2 & 1) != 0)
  {
    if ((a3 & 1) == 0)
      llvm::LPPassManager::addLoop(*(llvm::LPPassManager **)(a1 + 8), **(llvm::Loop ***)a1);
  }
  else
  {
    llvm::LPPassManager::markLoopAsDeleted(*(llvm::LPPassManager **)(a1 + 8), **(llvm::Loop ***)a1);
  }
}

void sub_1C5C4890C(llvm::LPPassManager **a1, llvm::Loop *a2)
{
  llvm::LPPassManager::markLoopAsDeleted(*a1, a2);
}

__n128 sub_1C5C48914(int **a1, _WORD *a2, __n128 *a3)
{
  int *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED8231F8, "unswitch-siblings-toplevel-div", 0x1EuLL);
  v6 = *a1;
  dword_1ED823278 = **a1;
  byte_1ED82328C = 1;
  dword_1ED823288 = *v6;
  word_1ED823202 = (32 * (*a2 & 3)) | word_1ED823202 & 0xFF9F;
  result = *a3;
  xmmword_1ED823218 = (__int128)*a3;
  return result;
}

__n128 sub_1C5C48998(int **a1, _WORD *a2, __n128 *a3)
{
  int *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED8232B8, "unswitch-num-initial-unscaled-candidates", 0x28uLL);
  v6 = *a1;
  dword_1ED823338 = **a1;
  byte_1ED82334C = 1;
  dword_1ED823348 = *v6;
  word_1ED8232C2 = (32 * (*a2 & 3)) | word_1ED8232C2 & 0xFF9F;
  result = *a3;
  xmmword_1ED8232D8 = (__int128)*a3;
  return result;
}

__n128 sub_1C5C48A1C(char **a1, _WORD *a2, __n128 *a3)
{
  char *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED823438, "simple-loop-unswitch-drop-non-trivial-implicit-null-checks", 0x3AuLL);
  v6 = *a1;
  byte_1ED8234B8 = **a1;
  byte_1ED8234C9 = 1;
  byte_1ED8234C8 = *v6;
  word_1ED823442 = (32 * (*a2 & 3)) | word_1ED823442 & 0xFF9F;
  result = *a3;
  xmmword_1ED823458 = (__int128)*a3;
  return result;
}

void sub_1C5C48AA0(uint64_t *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v8;
  uint64_t Impl;
  uint64_t LoopID;
  llvm::MDNode *PostTransformationMetadata;
  llvm::Loop *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];

  v20[2] = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    sub_1C6319C38(a1[1], a4, a5);
    if (a2)
    {
LABEL_3:
      if (a3)
      {
        v8 = ****(uint64_t *****)(*a1 + 32);
        v20[0] = llvm::MDString::get(v8, "llvm.loop.unswitch.partial.disable", 0x22uLL);
        Impl = llvm::MDTuple::getImpl(v8, v20, 1, 0, 1);
        LoopID = llvm::Loop::getLoopID((llvm::Loop *)*a1);
        v20[0] = "llvm.loop.unswitch.partial";
        v20[1] = 26;
        v19 = Impl;
        PostTransformationMetadata = llvm::makePostTransformationMetadata(v8, LoopID, (uint64_t)v20, 1, &v19, 1);
        llvm::Loop::setLoopID((llvm::Loop *)*a1, PostTransformationMetadata);
      }
      else
      {
        v18 = a1[1];
        *(_BYTE *)(v18 + 24) = 1;
        sub_1C63192F0(*(_QWORD *)v18, (uint64_t *)(v18 + 16));
      }
      return;
    }
  }
  else if (a2)
  {
    goto LABEL_3;
  }
  v12 = (llvm::Loop *)*a1;
  v13 = a1[1];
  v14 = a1[2];
  v15 = *(_BYTE *)(v14 + 23);
  if (v15 >= 0)
    v16 = a1[2];
  else
    v16 = *(_QWORD *)v14;
  if (v15 >= 0)
    v17 = v15 & 0x7F;
  else
    v17 = *(_QWORD *)(v14 + 8);
  llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::clear(*(_QWORD *)(v13 + 8), *a1, v16, v17);
  if (*(llvm::Loop **)(v13 + 16) == v12)
    *(_BYTE *)(v13 + 24) = 1;
}

void sub_1C5C48C34(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = *a1;
  llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::clear(*(_QWORD *)(*a1 + 8), a2, a3, a4);
  if (*(_QWORD *)(v5 + 16) == a2)
    *(_BYTE *)(v5 + 24) = 1;
}

uint64_t sub_1C5C48C70()
{
  int v1;
  int v2;
  __n128 v3;
  int v4;
  int *v5;

  LOBYTE(v2) = 0;
  v5 = &v2;
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Forcibly enables non-trivial loop unswitching rather than following the configurati"
                                     "on passed into the pass.";
  v3.n128_u64[1] = 107;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED822FB8, "enable-nontrivial-unswitch", (_BYTE **)&v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED822FB8, &dword_1C475E000);
  v4 = 50;
  v5 = &v4;
  v1 = 1;
  v2 = 1;
  v3.n128_u64[0] = (unint64_t)"The cost threshold for unswitching a loop.";
  v3.n128_u64[1] = 42;
  sub_1C6327348(&v5, &v2, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED823078, &dword_1C475E000);
  LOBYTE(v2) = 1;
  v5 = &v2;
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Enable unswitch cost multiplier that prohibits exponential explosion in nontrivial unswitch.";
  v3.n128_u64[1] = 92;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED823138, "enable-unswitch-cost-multiplier", (_BYTE **)&v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED823138, &dword_1C475E000);
  v4 = 2;
  v5 = &v4;
  v2 = 1;
  v3.n128_u64[0] = (unint64_t)"Toplevel siblings divisor for cost multiplier.";
  v3.n128_u64[1] = 46;
  sub_1C6327488(&v5, &v2, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED8231F8, &dword_1C475E000);
  v4 = 8;
  v5 = &v4;
  v2 = 1;
  v3.n128_u64[0] = (unint64_t)"Number of unswitch candidates that are ignored when calculating cost multiplier.";
  v3.n128_u64[1] = 80;
  sub_1C6327524(&v5, &v2, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED8232B8, &dword_1C475E000);
  LOBYTE(v2) = 1;
  v5 = &v2;
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"If enabled, simple loop unswitching will also consider llvm.experimental.guard intr"
                                     "insics as unswitch candidates.";
  v3.n128_u64[1] = 113;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED823378, "simple-loop-unswitch-guards", (_BYTE **)&v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED823378, &dword_1C475E000);
  LOBYTE(v2) = 0;
  v5 = &v2;
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"If enabled, drop make.implicit metadata in unswitched implicit null checks to save "
                                     "time analyzing if we can keep it.";
  v3.n128_u64[1] = 116;
  sub_1C63275C0((char **)&v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED823438, &dword_1C475E000);
  v3.n128_u64[0] = (unint64_t)"Max number of memory uses to explore during partial unswitching analysis";
  v3.n128_u64[1] = 72;
  v4 = 100;
  v5 = &v4;
  v2 = 1;
  sub_1C61D8E94((uint64_t)&unk_1ED8234F8, "simple-loop-unswitch-memoryssa-threshold", &v3, &v5, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED8234F8, &dword_1C475E000);
  LOBYTE(v2) = 0;
  v5 = &v2;
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"If enabled, the freeze instruction will be added to condition of loop unswitch to p"
                                     "revent miscompilation.";
  v3.n128_u64[1] = 105;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED8235B8, "freeze-loop-unswitch-cond", (_BYTE **)&v5, &v4, &v3);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8235B8, &dword_1C475E000);
}

llvm::SimplifyCFGPass *llvm::SimplifyCFGPass::SimplifyCFGPass(llvm::SimplifyCFGPass *this)
{
  *(_DWORD *)this = 1;
  *(_QWORD *)((char *)this + 4) = 0x101000001000000;
  *((_QWORD *)this + 2) = 0;
  sub_1C5C48FA4((uint64_t)this);
  return this;
}

{
  *(_DWORD *)this = 1;
  *(_QWORD *)((char *)this + 4) = 0x101000001000000;
  *((_QWORD *)this + 2) = 0;
  sub_1C5C48FA4((uint64_t)this);
  return this;
}

uint64_t sub_1C5C48FA4(uint64_t result)
{
  if (word_1ED836398)
    *(_DWORD *)result = dword_1ED836410;
  if (word_1ED836698)
    *(_BYTE *)(result + 4) = byte_1ED836710;
  if (word_1ED836518)
    *(_BYTE *)(result + 5) = byte_1ED836590;
  if (word_1ED8365D8)
    *(_BYTE *)(result + 6) = byte_1ED836650;
  if (word_1ED836458)
    *(_BYTE *)(result + 7) = byte_1ED8364D0;
  if (word_1ED836758)
    *(_BYTE *)(result + 8) = byte_1ED8367D0;
  if (word_1ED836818)
    *(_BYTE *)(result + 9) = byte_1ED836890;
  return result;
}

uint64_t llvm::SimplifyCFGPass::SimplifyCFGPass(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  sub_1C5C48FA4(a1);
  return a1;
}

{
  __int128 v3;

  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  sub_1C5C48FA4(a1);
  return a1;
}

uint64_t llvm::SimplifyCFGPass::run@<X0>(uint64_t a1@<X0>, llvm *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t result;

  v8 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::TargetIRAnalysis::Key, (uint64_t)a2) + 8;
  *(_QWORD *)(a1 + 16) = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::AssumptionAnalysis::Key, (uint64_t)a2)+ 8;
  if (byte_1ED837D18)
    v9 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::DominatorTreeAnalysis::Key, (uint64_t)a2) + 8;
  else
    v9 = 0;
  v10 = *((_QWORD *)a2 + 14);
  if (v10)
    v11 = (*(_BYTE *)(v10 + 17) & 2) == 0;
  else
    v11 = 1;
  *(_BYTE *)(a1 + 10) = v11;
  *(_BYTE *)(a1 + 11) = v11;
  result = sub_1C5C49204(a2, v8, v9, (llvm::MemorySSAUpdater *)a1);
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  if ((result & 1) == 0)
    return (uint64_t)sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  if (byte_1ED837D18)
    return (uint64_t)sub_1C4DDB144(a4, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
  return result;
}

uint64_t sub_1C5C49204(llvm *a1, uint64_t a2, uint64_t a3, llvm::MemorySSAUpdater *a4)
{
  uint64_t v4;
  llvm *v6;
  _BYTE *v7;
  void **v8;
  void **v9;
  void **v10;
  uint64_t i;
  char *v12;
  char *v13;
  llvm::BasicBlock *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  _QWORD *PrevNonDebugInstruction;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  _DWORD *v27;
  char *v28;
  unsigned __int8 **v29;
  char *v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _DWORD *v38;
  unint64_t v39;
  int64_t v40;
  unsigned __int8 **v41;
  uint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  char *v45;
  char *v46;
  void **p_p;
  llvm::BasicBlock **v48;
  uint64_t v49;
  llvm::BasicBlock *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  const char *OpcodeName;
  char v55;
  llvm::BasicBlock *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t *v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t **v65;
  llvm::Value **v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  int v73;
  int v74;
  _QWORD *v75;
  uint64_t *v76;
  unsigned __int8 *v77;
  uint64_t *v78;
  uint64_t v79;
  _QWORD *v80;
  llvm::Value *v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  llvm::ValueSymbolTable *v87;
  const llvm::DILocation *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  _QWORD **v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  llvm::DILocation *MergedLocation;
  llvm::BasicBlock *v106;
  llvm::BasicBlock *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t *v112;
  BOOL v113;
  llvm::PHINode **v114;
  uint64_t v115;
  uint64_t v116;
  llvm::PHINode *v117;
  llvm::PHINode *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _DWORD *v123;
  _QWORD *v124;
  char *v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  llvm::BasicBlock **v132;
  llvm::BasicBlock **v133;
  _QWORD *v134;
  unsigned __int8 **v135;
  unsigned __int8 *v136;
  uint64_t v137;
  llvm::ValueSymbolTable *v138;
  unint64_t *v139;
  uint64_t v140;
  char *v141;
  llvm::MemorySSAUpdater *v142;
  char v143;
  char v144;
  llvm::MemorySSAUpdater *v145;
  char v146;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  void **v153;
  llvm *v154;
  char v155;
  void **v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  unint64_t v160;
  _DWORD *v161;
  uint64_t **v162;
  llvm::BasicBlock **v163;
  void *__p;
  char *v166;
  char *v167;
  int v168;
  int v169;
  void *v170[2];
  _QWORD v171[36];
  char v172;
  _BYTE *v173;
  _BYTE *v174;
  uint64_t v175;
  int v176;
  _BYTE v177[64];
  _QWORD v178[3];
  __int16 v179;
  void **v180[5];
  void *v181;
  uint64_t v182;
  _BYTE v183[160];
  char *v184;
  uint64_t v185;
  _BYTE v186[16];
  unsigned __int8 *v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  __int16 v191;
  uint64_t v192;

  v4 = (uint64_t)a4;
  v6 = a1;
  v192 = *MEMORY[0x1E0C80C00];
  v7 = v171;
  v170[0] = v171;
  v170[1] = (void *)0x1000000000;
  v171[32] = 0;
  v171[33] = 0;
  v171[34] = a3;
  v171[35] = 0;
  v172 = 0;
  v173 = v177;
  v174 = v177;
  v175 = 8;
  v176 = 0;
  v8 = (void **)v178;
  if (a3)
    v9 = v170;
  else
    v9 = 0;
  memset(v178, 0, sizeof(v178));
  v179 = 0;
  v155 = llvm::removeUnreachableBlocks(a1, (llvm::Function *)v9, 0, a4);
  v180[0] = (void **)1;
  v10 = &v181;
  for (i = 1; i != 5; ++i)
    LODWORD(v180[i]) = -1;
  v181 = v183;
  v182 = 0x400000000;
  v12 = (char *)v6 + 72;
  v13 = (char *)*((_QWORD *)v6 + 10);
  if (v13 == (char *)v6 + 72)
  {
    v139 = 0;
    LOBYTE(v10) = 0;
    __p = 0;
    v166 = 0;
    v167 = 0;
    goto LABEL_204;
  }
  v153 = v9;
  v154 = v6;
  v149 = a2;
  v150 = v4;
  v9 = (void **)&v169;
  v7 = v186;
  v6 = (llvm *)&v187;
  v8 = (void **)&v190;
  v152 = (uint64_t)v12;
  do
  {
    if (v13)
      v14 = (llvm::BasicBlock *)(v13 - 24);
    else
      v14 = 0;
    if (a3 && llvm::DomTreeUpdater::isBBPendingDeletion((llvm::DomTreeUpdater *)v170, v14))
      goto LABEL_17;
    v15 = (_QWORD *)*((_QWORD *)v14 + 5);
    if (v15 == (_QWORD *)((char *)v14 + 40))
    {
LABEL_63:
      a2 = 0;
    }
    else
    {
      a2 = (uint64_t)(v15 - 3);
      if (v15)
        v16 = v15 - 3;
      else
        v16 = 0;
      if (*((_BYTE *)v16 + 16) == 30)
        goto LABEL_17;
      switch(*((_BYTE *)v16 + 16))
      {
        case 0x1D:
        case 0x22:
        case 0x23:
          goto LABEL_20;
        case 0x1E:
          __break(1u);
          goto LABEL_230;
        case 0x1F:
          v24 = (*((_DWORD *)v16 + 5) >> 1) & 0x3FFFFFF;
          break;
        case 0x20:
        case 0x26:
          v24 = (*((_DWORD *)v16 + 5) & 0x7FFFFFF) - 1;
          break;
        case 0x21:
        case 0x25:
          goto LABEL_17;
        case 0x24:
          v24 = *((_WORD *)v16 + 9) & 1;
          break;
        case 0x27:
          v24 = *((_DWORD *)v16 + 20) + 1;
          break;
        default:
          goto LABEL_63;
      }
      if (v24)
        goto LABEL_17;
    }
LABEL_20:
    v17 = *(unsigned __int8 *)(a2 + 16);
    if ((v17 == 34 || v17 == 29) && !llvm::BasicBlock::getTerminatingMustTailCall(v14))
    {
      PrevNonDebugInstruction = llvm::Instruction::getPrevNonDebugInstruction((llvm::Instruction *)a2, 0);
      if (!PrevNonDebugInstruction
        || *((_BYTE *)PrevNonDebugInstruction + 16) != 84
        || (v20 = *(PrevNonDebugInstruction - 4)) == 0
        || *(_BYTE *)(v20 + 16)
        || *(_QWORD *)(v20 + 24) != PrevNonDebugInstruction[9]
        || *(_DWORD *)(v20 + 36) != 119)
      {
        v21 = *(_DWORD *)(a2 + 20);
        if ((v21 & 0x40000000) != 0)
        {
          v23 = *(_QWORD *)(a2 - 8);
          v22 = v21 & 0x7FFFFFF;
          if (!v22)
          {
LABEL_44:
            v26 = *(unsigned __int8 *)(a2 + 16) - 28;
            v168 = v26;
            v169 = 0;
            sub_1C5C4A4C8((uint64_t)v180, &v168, &v169, (uint64_t)&__p);
            v27 = __p;
            if ((_BYTE)v167)
            {
              v184 = v186;
              v185 = 0x200000000;
              LODWORD(v187) = v26;
              v188 = &v190;
              v189 = 0x200000000;
              v28 = (char *)v181;
              if (v182 >= HIDWORD(v182))
              {
                v38 = __p;
                v39 = v182 + 1;
                if (v181 <= &v187 && (char *)v181 + 40 * v182 > (char *)&v187)
                {
                  v40 = (char *)&v187 - (_BYTE *)v181;
                  sub_1C6327AAC((uint64_t)&v181, v39);
                  v28 = (char *)v181;
                  v29 = (unsigned __int8 **)((char *)v181 + v40);
                }
                else
                {
                  sub_1C6327AAC((uint64_t)&v181, v39);
                  v29 = &v187;
                  v28 = (char *)v181;
                }
                v27 = v38;
              }
              else
              {
                v29 = &v187;
              }
              v30 = &v28[40 * v182];
              *(_DWORD *)v30 = *(_DWORD *)v29;
              v31 = v30 + 24;
              *((_QWORD *)v30 + 2) = 0x200000000;
              *((_QWORD *)v30 + 1) = v30 + 24;
              v32 = (uint64_t)(v30 + 8);
              v33 = *((unsigned int *)v29 + 4);
              if ((_DWORD)v33 && (unsigned __int8 **)v32 != v29 + 1)
              {
                v161 = v27;
                v41 = (unsigned __int8 **)v29[1];
                if (v41 == v29 + 3)
                {
                  if (v33 < 3)
                  {
                    v42 = *((unsigned int *)v29 + 4);
                    goto LABEL_71;
                  }
                  *(_DWORD *)(v32 + 8) = 0;
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v32, v32 + 16, v33, 8);
                  v42 = *((unsigned int *)v29 + 4);
                  if ((_DWORD)v42)
LABEL_71:
                    memcpy(*(void **)v32, v29[1], 8 * v42);
                  *(_DWORD *)(v32 + 8) = v33;
                }
                else
                {
                  if (v31 != (void *)(v32 + 16))
                  {
                    free(v31);
                    v41 = (unsigned __int8 **)v29[1];
                    LODWORD(v33) = *((_DWORD *)v29 + 4);
                  }
                  *(_QWORD *)v32 = v41;
                  *(_DWORD *)(v32 + 8) = v33;
                  *(_DWORD *)(v32 + 12) = *((_DWORD *)v29 + 5);
                  v29[1] = (unsigned __int8 *)(v29 + 3);
                  *((_DWORD *)v29 + 5) = 0;
                }
                *((_DWORD *)v29 + 4) = 0;
                v27 = v161;
              }
              LODWORD(v182) = v182 + 1;
              if (v188 != &v190)
              {
                v43 = v27;
                free(v188);
                v27 = v43;
              }
              v6 = (llvm *)&v187;
              if (v184 != v186)
              {
                v44 = v27;
                free(v184);
                v27 = v44;
              }
              v34 = v182 - 1;
              v27[1] = v182 - 1;
            }
            else
            {
              v34 = *((_DWORD *)__p + 1);
            }
            v35 = (char *)v181 + 40 * v34;
            v36 = v35 + 8;
            v37 = *((unsigned int *)v35 + 4);
            if (v37 >= *((_DWORD *)v35 + 5))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v35 + 8), (uint64_t)(v35 + 24), v37 + 1, 8);
              *(_QWORD *)(*(_QWORD *)v36 + 8 * *((unsigned int *)v36 + 2)) = v14;
              LODWORD(v37) = *((_DWORD *)v36 + 2);
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)v36 + 8 * v37) = v14;
            }
            *((_DWORD *)v36 + 2) = v37 + 1;
            v12 = (char *)v152;
            goto LABEL_17;
          }
        }
        else
        {
          v22 = v21 & 0x7FFFFFF;
          v23 = a2 - 32 * v22;
          if (!v22)
            goto LABEL_44;
        }
        v25 = 32 * v22;
        while (*(_BYTE *)(**(_QWORD **)v23 + 8) != 12)
        {
          v23 += 32;
          v25 -= 32;
          if (!v25)
            goto LABEL_44;
        }
      }
    }
LABEL_17:
    v13 = (char *)*((_QWORD *)v13 + 1);
  }
  while (v13 != v12);
  v45 = (char *)v181;
  __p = 0;
  v166 = 0;
  v167 = 0;
  if ((_DWORD)v182)
  {
    LODWORD(v10) = 0;
    v46 = (char *)v181 + 40 * v182;
    p_p = &__p;
    if (!a3)
      p_p = 0;
    v156 = p_p;
    v9 = v153;
    v6 = v154;
    v148 = (char *)v181 + 40 * v182;
    while (1)
    {
      v48 = (llvm::BasicBlock **)*((_QWORD *)v45 + 1);
      v49 = *((unsigned int *)v45 + 4);
      v184 = v186;
      v185 = 0x100000000;
      if (v49 >= 2)
        break;
LABEL_84:
      if (v184 != v186)
        free(v184);
      LODWORD(v10) = v10 | (v49 > 1);
      v45 += 40;
      if (v45 == v46)
      {
        v139 = (unint64_t *)__p;
        v4 = v150;
        v7 = v171;
        v8 = (void **)v178;
        a2 = v149;
        goto LABEL_204;
      }
    }
    if (a3)
      sub_1C501881C((uint64_t)&__p, v49 + ((v166 - (_BYTE *)__p) >> 4));
    v50 = (llvm::BasicBlock *)*((_QWORD *)*v48 + 5);
    if (v50 == (llvm::BasicBlock *)((char *)*v48 + 40))
    {
      v51 = 0;
    }
    else
    {
      if (v50)
        v52 = (uint64_t)v50 - 24;
      else
        v52 = 0;
      if (*(unsigned __int8 *)(v52 + 16) - 29 >= 0xB)
        v51 = 0;
      else
        v51 = v52;
    }
    v53 = **(_QWORD ***)v6;
    OpcodeName = llvm::Instruction::getOpcodeName((llvm::Instruction *)(*(unsigned __int8 *)(v51 + 16) - 28));
    v151 = (int)v10;
    v158 = v49;
    if (*OpcodeName)
    {
      v187 = "common.";
      v189 = (uint64_t)OpcodeName;
      v55 = 3;
    }
    else
    {
      v187 = "common.";
      v55 = 1;
    }
    LOBYTE(v191) = 3;
    HIBYTE(v191) = v55;
    v56 = *v48;
    v57 = operator new();
    *(_QWORD *)v57 = *v53 + 1600;
    *(_QWORD *)(v57 + 8) = 0;
    v58 = *(_DWORD *)(v57 + 20) & 0xC0000000;
    *(_DWORD *)(v57 + 16) = 22;
    *(_DWORD *)(v57 + 20) = v58;
    v59 = (uint64_t *)(v57 + 40);
    *(_QWORD *)(v57 + 24) = 0;
    v60 = (_QWORD *)(v57 + 24);
    *(_QWORD *)(v57 + 32) = 0;
    *(_QWORD *)(v57 + 40) = v57 + 40;
    *(_QWORD *)(v57 + 48) = v57 + 40;
    *(_QWORD *)(v57 + 56) = 0;
    if (v56)
      v61 = (uint64_t *)((char *)v56 + 24);
    else
      v61 = (uint64_t *)v152;
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v152, (_QWORD *)v57);
    v62 = *v61;
    *(_QWORD *)(v57 + 32) = v61;
    *v60 = v62;
    *(_QWORD *)(v62 + 8) = v60;
    *v61 = (uint64_t)v60;
    llvm::Value::setName((uint64_t ***)v57, (uint64_t)&v187);
    sub_1C515FA1C((uint64_t)&v184, *(_DWORD *)(v51 + 20) & 0x7FFFFFF);
    v63 = *(_DWORD *)(v51 + 20);
    if ((v63 & 0x40000000) != 0)
    {
      v65 = *(uint64_t ***)(v51 - 8);
      v64 = v63 & 0x7FFFFFF;
      if (!v64)
        goto LABEL_130;
    }
    else
    {
      v64 = v63 & 0x7FFFFFF;
      v65 = (uint64_t **)(v51 - 32 * v64);
      if (!v64)
      {
LABEL_130:
        llvm::Instruction::clone((llvm::Instruction *)v51);
        v90 = v89;
        *(_QWORD *)(v89 + 40) = v57;
        *(_WORD *)(v57 + 18) &= ~0x8000u;
        if ((*(_BYTE *)(v89 + 23) & 0x10) != 0)
        {
          v137 = *(_QWORD *)(v57 + 56);
          if (v137)
          {
            v138 = *(llvm::ValueSymbolTable **)(v137 + 104);
            if (v138)
              llvm::ValueSymbolTable::reinsertValue(v138, (llvm::Value *)v90);
          }
        }
        v91 = *v59;
        *(_QWORD *)(v90 + 24) = *v59;
        *(_QWORD *)(v90 + 32) = v59;
        *(_QWORD *)(v91 + 8) = v90 + 24;
        *v59 = v90 + 24;
        v92 = *(_DWORD *)(v90 + 20);
        if ((v92 & 0x40000000) != 0)
        {
          v94 = *(_QWORD *)(v90 - 8);
          v93 = v92 & 0x7FFFFFF;
        }
        else
        {
          v93 = v92 & 0x7FFFFFF;
          v94 = v90 - 32 * v93;
        }
        if ((_DWORD)v185 && v93)
        {
          v95 = (uint64_t *)v184;
          v96 = 8 * v185 - 8;
          v97 = (_QWORD **)(v94 + 8);
          v98 = 32 * v93 - 32;
          do
          {
            v99 = v97 - 1;
            v100 = *v95;
            if (*(v97 - 1))
            {
              *v97[1] = *v97;
              if (*v97)
                (*v97)[2] = v97[1];
            }
            *v99 = v100;
            if (v100)
            {
              v103 = *(_QWORD **)(v100 + 8);
              v101 = (_QWORD *)(v100 + 8);
              v102 = v103;
              *v97 = v103;
              if (v103)
                v102[2] = v97;
              v97[1] = v101;
              *v101 = v99;
            }
            if (!v96)
              break;
            ++v95;
            v96 -= 8;
            v97 += 4;
            v104 = v98;
            v98 -= 32;
          }
          while (v104);
        }
        v157 = v90;
        MergedLocation = 0;
        v160 = v57 & 0xFFFFFFFFFFFFFFFBLL;
        v163 = &v48[v158];
        do
        {
          v106 = *v48;
          v107 = (llvm::BasicBlock *)*((_QWORD *)*v48 + 5);
          if (v107 == (llvm::BasicBlock *)((char *)*v48 + 40))
          {
            v109 = 0;
          }
          else
          {
            if (v107)
              v108 = (uint64_t)v107 - 24;
            else
              v108 = 0;
            if (*(unsigned __int8 *)(v108 + 16) - 29 >= 0xB)
              v109 = 0;
            else
              v109 = v108;
          }
          v110 = *(_DWORD *)(v109 + 20);
          if ((v110 & 0x40000000) != 0)
          {
            v112 = *(uint64_t **)(v109 - 8);
            v111 = v110 & 0x7FFFFFF;
          }
          else
          {
            v111 = v110 & 0x7FFFFFF;
            v112 = (uint64_t *)(v109 - 32 * v111);
          }
          if (v111)
            v113 = (_DWORD)v185 == 0;
          else
            v113 = 1;
          if (!v113)
          {
            v114 = (llvm::PHINode **)v184;
            v115 = 32 * v111 - 32;
            v116 = 8 * v185 - 8;
            do
            {
              v118 = *v114++;
              v117 = v118;
              v119 = *v112;
              v112 += 4;
              sub_1C477667C(v117, v119, (uint64_t)v106);
              if (!v115)
                break;
              v115 -= 32;
              v120 = v116;
              v116 -= 8;
            }
            while (v120);
          }
          if (MergedLocation)
            MergedLocation = llvm::DILocation::getMergedLocation(MergedLocation, *(const llvm::DILocation **)(v109 + 48), v88);
          else
            MergedLocation = *(llvm::DILocation **)(v109 + 48);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v109 + 40) + 40, (uint64_t ***)v109);
          v121 = *(_QWORD *)(v109 + 24);
          v122 = *(_QWORD **)(v109 + 32);
          *v122 = v121;
          *(_QWORD *)(v121 + 8) = v122;
          *(_QWORD *)(v109 + 24) = 0;
          *(_QWORD *)(v109 + 32) = 0;
          llvm::Value::deleteValue((llvm::Value *)v109);
          v123 = operator new(0x60uLL);
          v123[13] = v123[13] & 0x38000000 | 1;
          *(_QWORD *)v123 = 0;
          *((_QWORD *)v123 + 1) = 0;
          *((_QWORD *)v123 + 2) = 0;
          *((_QWORD *)v123 + 3) = v123 + 8;
          llvm::BranchInst::BranchInst((llvm::BranchInst *)(v123 + 8), (llvm::BasicBlock *)v57, v106);
          if (a3)
          {
            v124 = v166;
            if (v166 >= v167)
            {
              v126 = __p;
              v127 = (v166 - (_BYTE *)__p) >> 4;
              v128 = v127 + 1;
              if ((unint64_t)(v127 + 1) >> 60)
                abort();
              v129 = v167 - (_BYTE *)__p;
              if ((v167 - (_BYTE *)__p) >> 3 > v128)
                v128 = v129 >> 3;
              if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF0)
                v130 = 0xFFFFFFFFFFFFFFFLL;
              else
                v130 = v128;
              if (v130)
              {
                if (v130 >> 60)
                  sub_1C4764EE4();
                v131 = (char *)operator new(16 * v130);
              }
              else
              {
                v131 = 0;
              }
              v132 = (llvm::BasicBlock **)&v131[16 * v127];
              *v132 = v106;
              v132[1] = (llvm::BasicBlock *)v160;
              v133 = v132;
              if (v124 == v126)
              {
                v134 = v156;
              }
              else
              {
                v134 = v156;
                do
                {
                  *((_OWORD *)v133 - 1) = *((_OWORD *)v124 - 1);
                  v133 -= 2;
                  v124 -= 2;
                }
                while (v124 != v126);
                v124 = *v156;
              }
              *v134 = v133;
              v125 = (char *)(v132 + 2);
              v166 = (char *)(v132 + 2);
              v167 = &v131[16 * v130];
              if (v124)
                operator delete(v124);
            }
            else
            {
              *(_QWORD *)v166 = v106;
              v124[1] = v160;
              v125 = (char *)(v124 + 2);
            }
            v166 = v125;
          }
          ++v48;
        }
        while (v48 != v163);
        v187 = (unsigned __int8 *)MergedLocation;
        if (MergedLocation)
          llvm::MetadataTracking::track((uint64_t)&v187, (unsigned __int8 *)MergedLocation, 2);
        v135 = (unsigned __int8 **)(v157 + 48);
        if (&v187 == (unsigned __int8 **)(v157 + 48))
        {
          v9 = v153;
          v6 = v154;
          LODWORD(v10) = v151;
          v46 = v148;
          LODWORD(v49) = v158;
          if (v187)
            llvm::MetadataTracking::untrack((uint64_t)&v187, v187);
        }
        else
        {
          v9 = v153;
          v6 = v154;
          LODWORD(v10) = v151;
          v46 = v148;
          LODWORD(v49) = v158;
          if (*v135)
            llvm::MetadataTracking::untrack(v157 + 48, *v135);
          v136 = v187;
          *v135 = v187;
          if (v136)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v187, v136, (uint64_t)v135);
            v187 = 0;
          }
        }
        goto LABEL_84;
      }
    }
    if (!(_DWORD)v185)
      goto LABEL_130;
    v66 = (llvm::Value **)v184;
    v159 = &v184[8 * v185];
    v162 = &v65[4 * v64];
    while (2)
    {
      if ((*(_BYTE *)(v57 + 23) & 0x10) != 0)
      {
        v67 = ***(_QWORD ***)v57;
        v68 = *(_QWORD *)(v67 + 152);
        v69 = *(unsigned int *)(v67 + 168);
        if (!(_DWORD)v69)
          goto LABEL_117;
        LODWORD(v70) = (v69 - 1) & ((v57 >> 4) ^ (v57 >> 9));
        v71 = (uint64_t *)(v68 + 16 * v70);
        v72 = *v71;
        if (*v71 != v57)
        {
          v73 = 1;
          while (v72 != -4096)
          {
            v74 = v70 + v73++;
            v70 = v74 & (v69 - 1);
            v72 = *(_QWORD *)(v68 + 16 * v70);
            if (v72 == v57)
            {
              v71 = (uint64_t *)(v68 + 16 * v70);
              goto LABEL_118;
            }
          }
LABEL_117:
          v71 = (uint64_t *)(v68 + 16 * v69);
        }
LABEL_118:
        v75 = (_QWORD *)v71[1];
        v78 = (uint64_t *)*v75;
        v77 = (unsigned __int8 *)(v75 + 2);
        v76 = v78;
      }
      else
      {
        v76 = 0;
        v77 = (unsigned __int8 *)&byte_1C871356D;
      }
      v79 = **v65;
      v191 = 773;
      v187 = v77;
      v188 = v76;
      v189 = (uint64_t)".op";
      v80 = operator new(0x48uLL);
      v80[1] = v79;
      v81 = (llvm::Value *)(v80 + 1);
      *v80 = 0;
      v80[2] = 0;
      v80[3] = 0x4000000000000053;
      *((_OWORD *)v80 + 2) = 0u;
      *((_OWORD *)v80 + 3) = 0u;
      *((_DWORD *)v80 + 16) = 0;
      *((_DWORD *)v80 + 17) = v158;
      llvm::Value::setName((uint64_t ***)v80 + 1, (uint64_t)&v187);
      v82 = *((unsigned int *)v80 + 17);
      v83 = operator new(40 * v82);
      *v80 = v83;
      if ((_DWORD)v82)
      {
        v84 = &v83[4 * v82];
        do
        {
          *v83 = 0;
          v83[1] = 0;
          v83[2] = 0;
          v83[3] = v81;
          v83 += 4;
        }
        while (v83 != v84);
      }
      *v66 = v81;
      v80[6] = v57;
      *(_WORD *)(v57 + 18) &= ~0x8000u;
      if ((*((_BYTE *)v80 + 31) & 0x10) != 0)
      {
        v86 = *(_QWORD *)(v57 + 56);
        if (v86)
        {
          v87 = *(llvm::ValueSymbolTable **)(v86 + 104);
          if (v87)
            llvm::ValueSymbolTable::reinsertValue(v87, v81);
        }
      }
      v85 = *v59;
      v80[4] = *v59;
      v80[5] = v59;
      *(_QWORD *)(v85 + 8) = v80 + 4;
      *v59 = (uint64_t)(v80 + 4);
      v65 += 4;
      if (v65 == v162)
        goto LABEL_130;
      if (++v66 == (llvm::Value **)v159)
        goto LABEL_130;
      continue;
    }
  }
  v139 = 0;
  LOBYTE(v10) = 0;
  v4 = v150;
  v7 = v171;
  v8 = (void **)v178;
  a2 = v149;
  v9 = v153;
  v6 = v154;
LABEL_204:
  if (a3)
  {
    llvm::DomTreeUpdater::applyUpdates((uint64_t)v170, v139, (v166 - (char *)v139) >> 4);
    v139 = (unint64_t *)__p;
  }
  if (v139)
  {
    v166 = (char *)v139;
    operator delete(v139);
  }
  v12 = (char *)v181;
  if ((_DWORD)v182)
  {
    v140 = 40 * v182;
    do
    {
      v141 = *(char **)&v12[v140 - 32];
      if (&v12[v140 - 16] != v141)
        free(v141);
      v140 -= 40;
    }
    while (v140);
    v12 = (char *)v181;
  }
  if (v12 != v183)
LABEL_230:
    free(v12);
  if (((uint64_t)v180[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v180[1], 4);
  v143 = v10 | v155 | sub_1C5C4A1C0((uint64_t)v6, a2, (llvm::DomTreeUpdater *)v9, v4);
  if ((v143 & 1) != 0 && llvm::removeUnreachableBlocks(v6, (llvm::Function *)v9, 0, v142))
  {
    do
    {
      do
      {
        v144 = sub_1C5C4A1C0((uint64_t)v6, a2, (llvm::DomTreeUpdater *)v9, v4);
        v146 = llvm::removeUnreachableBlocks(v6, (llvm::Function *)v9, 0, v145);
      }
      while ((v144 & 1) != 0);
    }
    while ((v146 & 1) != 0);
  }
  llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)v170);
  v180[0] = v8;
  sub_1C50B10F0(v180);
  if (v174 != v173)
    free(v174);
  if (v170[0] != v7)
    free(v170[0]);
  return v143 & 1;
}

uint64_t sub_1C5C49FFC(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetTransformInfoWrapperPassPass(a1);
  llvm::initializeAssumptionCacheTrackerPass(a1);
  llvm::initializeDominatorTreeWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Simplify the CFG";
  *(_QWORD *)(v2 + 8) = 16;
  *(_QWORD *)(v2 + 16) = "simplifycfg";
  *(_QWORD *)(v2 + 24) = 11;
  *(_QWORD *)(v2 + 32) = &unk_1ED823678;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5C4A86C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5C4A0A0(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t v9;
  _QWORD *v10;
  _QWORD v11[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED823678;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8197998;
  v4 = *a2;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a3 + 24);
  if (v5)
  {
    if (v5 == a3)
    {
      *(_QWORD *)(a1 + 80) = a1 + 56;
      (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 80) = v5;
      *(_QWORD *)(a3 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 80) = 0;
  }
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v9 = qword_1ED830BC0[0];
  v7 = atomic_load(&qword_1ED823680);
  if (v7 != -1)
  {
    v11[0] = sub_1C5C49FFC;
    v11[1] = &v9;
    v10 = v11;
    std::__call_once(&qword_1ED823680, &v10, (void (__cdecl *)(void *))sub_1C4776838);
  }
  sub_1C5C48FA4(a1 + 32);
  return a1;
}

uint64_t sub_1C5C4A1C0(uint64_t a1, uint64_t a2, llvm::DomTreeUpdater *a3, uint64_t a4)
{
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t *v19;
  char *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  llvm::ValueHandleBase *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  llvm *v34;
  BOOL v35;
  llvm *v36;
  llvm::BasicBlock *v37;
  uint64_t v38;
  int v39;
  unint64_t *v41;
  unint64_t *v42;
  uint64_t v43;
  int v44;
  _BYTE v45[128];
  _QWORD v46[7];
  char *v47;
  uint64_t v48;
  _BYTE v49[384];
  void *v50;
  uint64_t v51;
  _QWORD v52[66];

  v52[64] = *MEMORY[0x1E0C80C00];
  v50 = v52;
  v51 = 0x2000000000;
  llvm::FindFunctionBackedges(a1, (uint64_t)&v50);
  v8 = (unint64_t *)v45;
  v41 = (unint64_t *)v45;
  v42 = (unint64_t *)v45;
  v43 = 16;
  v44 = 0;
  if ((_DWORD)v51)
  {
    v9 = 0;
    v10 = 16 * v51;
    do
    {
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v41, *(_QWORD *)((char *)v50 + v9 + 8));
      v9 += 16;
    }
    while (v10 != v9);
    v8 = v41;
    v11 = v42;
    v13 = v43;
    v12 = HIDWORD(v43);
  }
  else
  {
    v12 = 0;
    v13 = 16;
    v11 = (unint64_t *)v45;
  }
  if (v11 == v8)
    v14 = v12;
  else
    v14 = v13;
  v15 = v11;
  if ((_DWORD)v14)
  {
    v16 = 8 * v14;
    v15 = v11;
    while (*v15 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v15;
      v16 -= 8;
      if (!v16)
      {
        v17 = 0;
        v18 = 0;
        v47 = v49;
        HIDWORD(v48) = 16;
        goto LABEL_34;
      }
    }
  }
  v19 = &v11[v14];
  v20 = v49;
  v47 = v49;
  v48 = 0x1000000000;
  if (v15 == v19)
  {
    v17 = 0;
    v18 = 0;
  }
  else
  {
    v21 = 0;
    v22 = v15;
LABEL_16:
    v17 = v21 + 1;
    v23 = v22 + 1;
    while (v23 != v19)
    {
      v24 = *v23++;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v22 = v23 - 1;
        ++v21;
        goto LABEL_16;
      }
    }
    if (v21 < 0x10)
    {
      v25 = 0;
    }
    else
    {
      sub_1C4EE49E4((unsigned int *)&v47, v21 + 1);
      v25 = v48;
      v20 = v47;
    }
    v26 = (llvm::ValueHandleBase *)&v20[24 * v25];
    v27 = *v15;
LABEL_25:
    *(_QWORD *)v26 = 4;
    *((_QWORD *)v26 + 1) = 0;
    *((_QWORD *)v26 + 2) = v27;
    if (v27 != -8192 && v27 != -4096 && v27)
      llvm::ValueHandleBase::AddToUseList(v26);
    v28 = v15 + 1;
    while (v28 != v19)
    {
      v29 = *v28++;
      v27 = v29;
      if (v29 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v26 = (llvm::ValueHandleBase *)((char *)v26 + 24);
        v15 = v28 - 1;
        goto LABEL_25;
      }
    }
    v18 = v48;
  }
LABEL_34:
  v30 = 0;
  LODWORD(v48) = v18 + v17;
  v31 = a1 + 72;
  do
  {
    v32 = *(_QWORD *)(a1 + 80);
    if (v32 == v31)
      break;
    v33 = 0;
    do
    {
      v34 = (llvm *)(v32 - 24);
      v35 = v32 == 0;
      v32 = *(_QWORD *)(v32 + 8);
      if (v35)
        v36 = 0;
      else
        v36 = v34;
      if (a3 && v32 != v31)
      {
        while (1)
        {
          v37 = v32 ? (llvm::BasicBlock *)(v32 - 24) : 0;
          if (!llvm::DomTreeUpdater::isBBPendingDeletion(a3, v37))
            break;
          v32 = *(_QWORD *)(v32 + 8);
          if (v32 == v31)
          {
            v32 = a1 + 72;
            break;
          }
        }
      }
      v38 = *(_QWORD *)(*((_QWORD *)v36 + 7) + 40) + 272;
      v46[0] = a2;
      v46[1] = a3;
      v46[2] = v38;
      v46[3] = v47;
      v46[4] = v48;
      v46[5] = a4;
      sub_1C5F89198((uint64_t)v46, v36);
      if (v39)
        v33 = 1;
    }
    while (v32 != v31);
    v30 = (v33 | v30) & 1;
  }
  while ((v33 & 1) != 0);
  sub_1C4EE41F8(&v47);
  if (v42 != v41)
    free(v42);
  if (v50 != v52)
    free(v50);
  return v30 & 1;
}

_DWORD *sub_1C5C4A4C8@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _DWORD *result;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;

  v16 = 0;
  result = (_DWORD *)sub_1C5C4A58C(a1, a2, &v16);
  v9 = v16;
  if ((_DWORD)result)
  {
    v14 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v15 = 4;
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 8);
      v15 = *(unsigned int *)(a1 + 16);
    }
    v13 = 0;
    v12 = v14 + 8 * v15;
  }
  else
  {
    result = sub_1C5C4A63C((_DWORD *)a1, (uint64_t)a2, a2, v16);
    v9 = result;
    *result = *a2;
    result[1] = *a3;
    v10 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v11 = 4;
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 8);
      v11 = *(unsigned int *)(a1 + 16);
    }
    v12 = v10 + 8 * v11;
    v13 = 1;
  }
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v12;
  *(_BYTE *)(a4 + 16) = v13;
  return result;
}

uint64_t sub_1C5C4A58C(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  _DWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (37 * *a2) & (v4 - 1);
  v7 = (_DWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -1)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -2;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_DWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_8;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

_DWORD *sub_1C5C4A63C(_DWORD *a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v4;
  unsigned int v5;
  uint64_t v8;
  _DWORD *v9;

  v4 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v5 = 4;
  else
    v5 = a1[4];
  if (4 * v4 + 4 >= 3 * v5)
  {
    v5 *= 2;
  }
  else if (v5 + ~v4 - a1[1] > v5 >> 3)
  {
    goto LABEL_5;
  }
  v8 = (uint64_t)a1;
  sub_1C5C4A6F8((uint64_t)a1, v5);
  v9 = 0;
  sub_1C5C4A58C(v8, a3, &v9);
  a1 = (_DWORD *)v8;
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -1)
    --a1[1];
  return a4;
}

uint64_t sub_1C5C4A6F8(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  _DWORD v14[8];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_DWORD **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)4uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C63279EC(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_DWORD *)(a1 + v8 + 8);
    if (v10 <= 0xFFFFFFFD)
    {
      *v9 = v10;
      v9[1] = *(_DWORD *)(a1 + v8 + 12);
      v9 += 2;
    }
    v8 += 8;
  }
  while (v8 != 32);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)4uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C63279EC(a1, v14, v9);
}

uint64_t sub_1C5C4A86C()
{
  uint64_t v0;
  void (**v1)(void);
  __int128 v3;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  *(_QWORD *)&v3 = 0x100000000000001;
  *((_QWORD *)&v3 + 1) = 16842752;
  v4 = 0;
  v6 = 0;
  sub_1C5C4A0A0(v0, &v3, (uint64_t)v5);
  if (v6 == v5)
  {
    v1 = (void (**)(void))(v5[0] + 32);
    goto LABEL_5;
  }
  if (v6)
  {
    v1 = (void (**)(void))(*v6 + 40);
LABEL_5:
    (*v1)();
  }
  return v0;
}

void sub_1C5C4A934(llvm::Pass *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E8197998;
  v2 = (char *)this + 56;
  v3 = (char *)*((_QWORD *)this + 10);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  llvm::Pass::~Pass(this);
}

void sub_1C5C4A990(llvm::Pass *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E8197998;
  v2 = (char *)this + 56;
  v3 = (char *)*((_QWORD *)this + 10);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      llvm::Pass::~Pass(this);
      JUMPOUT(0x1CAA32FC0);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  goto LABEL_6;
}

void *sub_1C5C4AA00(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  if (byte_1ED837D18)
    sub_1C4771E64(a2, a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  if (byte_1ED837D18)
    sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
}

uint64_t sub_1C5C4AA90(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  uint64_t *v2;
  llvm::FunctionPass *v4;
  uint64_t v5;
  char **v6;
  char *v7;
  llvm::AssumptionCacheTracker *v8;
  char **v9;
  char *v10;
  uint64_t v11;
  llvm::MemorySSAUpdater *v13;
  uint64_t v14;
  BOOL v15;
  char **v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[2];
  int v25;
  _QWORD v26[2];
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;

  v4 = a1;
  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0)
    return 0;
  v5 = *((_QWORD *)v4 + 10);
  if (v5)
  {
    if (!(*(unsigned int (**)(uint64_t, const llvm::Function *))(*(_QWORD *)v5 + 48))(v5, a2))
      return 0;
  }
  v6 = (char **)**((_QWORD **)v4 + 1);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != llvm::AssumptionCacheTracker::ID);
  v8 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), llvm::AssumptionCacheTracker::ID);
  *((_QWORD *)v4 + 6) = llvm::AssumptionCacheTracker::getAssumptionCache(v8, a2);
  if (byte_1ED837D18)
  {
    v9 = (char **)**((_QWORD **)v4 + 1);
    do
    {
      v10 = *v9;
      v9 += 2;
    }
    while (v10 != llvm::DominatorTreeWrapperPass::ID);
    v11 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), llvm::DominatorTreeWrapperPass::ID)+ 32;
  }
  else
  {
    v11 = 0;
  }
  v13 = (llvm::FunctionPass *)((char *)v4 + 32);
  v14 = *((_QWORD *)a2 + 14);
  if (v14)
    v15 = (*(_BYTE *)(v14 + 17) & 2) == 0;
  else
    v15 = 1;
  *((_BYTE *)v4 + 42) = v15;
  *((_BYTE *)v4 + 43) = v15;
  v16 = (char **)**((_QWORD **)v4 + 1);
  do
  {
    v17 = *v16;
    v16 += 2;
  }
  while (v17 != llvm::TargetTransformInfoWrapperPass::ID);
  v18 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v16 - 1) + 96))(*(v16 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v24[0] = 0;
  v24[1] = 0;
  v25 = 0;
  v26[0] = 0;
  v26[1] = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v19 = *(_QWORD *)(v18 + 56);
  if (!v19)
  {
    sub_1C485C2F0();
LABEL_24:
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    goto LABEL_21;
  }
  v4 = (llvm::FunctionPass *)v26;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, const llvm::Function *))(*(_QWORD *)v19 + 48))(&v23, v19, a2);
  v2 = (uint64_t *)(v18 + 64);
  v20 = v23;
  if (*(_BYTE *)(v18 + 72))
  {
    v23 = 0;
    v21 = *v2;
    *v2 = v20;
    if (!v21)
      goto LABEL_21;
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v22 = v23;
    v23 = 0;
    if (!v22)
      goto LABEL_21;
    goto LABEL_24;
  }
  *(_QWORD *)(v18 + 64) = v23;
  *(_BYTE *)(v18 + 72) = 1;
LABEL_21:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440((uint64_t *)v4);
  sub_1C4D8B52C(v24);
  return sub_1C5C49204(a2, (uint64_t)v2, v11, v13);
}

uint64_t sub_1C5C4ACBC()
{
  int v1;
  __n128 v2;
  int *v3;
  int v4;

  v4 = 1;
  v1 = 1;
  v2.n128_u64[0] = (unint64_t)"Control the number of bonus instructions (default = 1)";
  v2.n128_u64[1] = 54;
  v3 = &v1;
  sub_1C61798D0((uint64_t)&unk_1ED836390, "bonus-inst-threshold", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED836390, &dword_1C475E000);
  v4 = 1;
  LOBYTE(v1) = 1;
  v2.n128_u64[0] = (unint64_t)"Preserve canonical loop structure (default = true)";
  v2.n128_u64[1] = 50;
  v3 = &v1;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED836450, "keep-loops", &v4, (_BYTE **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED836450, &dword_1C475E000);
  v4 = 1;
  LOBYTE(v1) = 0;
  v2.n128_u64[0] = (unint64_t)"Convert switches into an integer range comparison (default = false)";
  v2.n128_u64[1] = 67;
  v3 = &v1;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED836510, "switch-range-to-icmp", &v4, (_BYTE **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED836510, &dword_1C475E000);
  v4 = 1;
  LOBYTE(v1) = 0;
  v2.n128_u64[0] = (unint64_t)"Convert switches to lookup tables (default = false)";
  v2.n128_u64[1] = 51;
  v3 = &v1;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED8365D0, "switch-to-lookup", &v4, (_BYTE **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8365D0, &dword_1C475E000);
  v4 = 1;
  LOBYTE(v1) = 0;
  v2.n128_u64[0] = (unint64_t)"Forward switch condition to phi ops (default = false)";
  v2.n128_u64[1] = 53;
  v3 = &v1;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED836690, "forward-switch-cond", &v4, (_BYTE **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED836690, &dword_1C475E000);
  v4 = 1;
  LOBYTE(v1) = 0;
  v2.n128_u64[0] = (unint64_t)"hoist common instructions (default = false)";
  v2.n128_u64[1] = 43;
  v3 = &v1;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED836750, "hoist-common-insts", &v4, (_BYTE **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED836750, &dword_1C475E000);
  v4 = 1;
  LOBYTE(v1) = 0;
  v2.n128_u64[0] = (unint64_t)"Sink common instructions (default = false)";
  v2.n128_u64[1] = 42;
  v3 = &v1;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED836810, "sink-common-insts", &v4, (_BYTE **)&v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED836810, &dword_1C475E000);
}

_QWORD *llvm::SinkingPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t ResultImpl;
  char v9;

  v6 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, a1) + 8;
  v7 = (uint64_t *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::LoopAnalysis::Key, a1) + 8);
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AAManager::Key, a1);
  v9 = sub_1C5C4B01C(a1, v6, v7, (llvm::AAResults *)(ResultImpl + 8));
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if ((v9 & 1) != 0)
    return sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::CFGAnalyses::SetKey);
  else
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

uint64_t sub_1C5C4B01C(uint64_t a1, uint64_t a2, uint64_t *a3, llvm::AAResults *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  const llvm::CallBase *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  unsigned int v35;
  BOOL v36;
  uint64_t v37;
  BOOL v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  llvm::Instruction **v44;
  uint64_t v45;
  int v46;
  char *v47;
  llvm::Instruction *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t NearestCommonDominator;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  llvm::BasicBlock *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  BOOL v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  llvm::BasicBlock **v69;
  llvm::BasicBlock *v70;
  int v71;
  int v72;
  uint64_t UniquePredecessor;
  uint64_t v74;
  _BOOL4 v75;
  int v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  llvm::BasicBlock *v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int hasFnAttrOnCalledFunction;
  uint64_t v92;
  _QWORD *i;
  _QWORD *v94;
  unsigned int v95;
  uint64_t v96;
  llvm::Instruction *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  int v105;
  char v107;
  char v111;
  uint64_t v112;
  llvm::BasicBlock *v113;
  uint64_t v114;
  char v116;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t v120;
  int v121;
  _BYTE v122[64];
  __int128 v123[3];
  char v124;
  __int128 v125;
  _OWORD v126[2];

  v4 = a1 + 72;
  v5 = *(_QWORD *)(a1 + 80);
  if (v5 == a1 + 72)
  {
    v111 = 0;
    return v111 & 1;
  }
  v6 = a2;
  v111 = 0;
  v114 = a1 + 72;
  do
  {
    v7 = 0;
    do
    {
      if (v5)
        v8 = v5 - 24;
      else
        v8 = 0;
      v9 = *(_QWORD *)(v8 + 40);
      if (v9 == v8 + 40)
      {
        v10 = 0;
      }
      else
      {
        if (v9)
          v10 = v9 - 24;
        else
          v10 = 0;
        if (*(unsigned __int8 *)(v10 + 16) - 29 >= 0xB)
          v10 = 0;
      }
      v11 = *(unsigned __int8 *)(v10 + 16);
      if (v11 != 30)
        __asm { BR              X10 }
      if ((*(_DWORD *)(v10 + 20) & 0x7FFFFFF) != 3
        || !llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(v6, v8))
      {
        v107 = 0;
        goto LABEL_210;
      }
      v116 = 0;
      v12 = *(_QWORD **)(v8 + 40);
      v118 = (uint64_t *)v122;
      v119 = (uint64_t *)v122;
      v120 = 8;
      v121 = 0;
      do
      {
        v13 = v12;
        v14 = (const llvm::CallBase *)(v12 - 3);
        if (v12)
          v15 = (uint64_t)(v12 - 3);
        else
          v15 = 0;
        v16 = *(_QWORD **)(v8 + 48);
        if (v12 != v16)
          v12 = (_QWORD *)*v12;
        if (sub_1C4D99D08(v15) || sub_1C509DDB0(v15))
          continue;
        if (v13 && *(_BYTE *)(v15 + 16) == 59 && *(_BYTE *)(*(_QWORD *)(v15 - 32) + 16) == 16)
        {
          v17 = *(_QWORD *)(v15 + 40);
          v18 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 80);
          v19 = v18 ? v18 - 24 : 0;
          if (v17 == v19 && (*(_WORD *)(v15 + 18) & 0x40) == 0)
            continue;
        }
        v20 = atomic_load((unsigned __int8 *)&qword_1ED823698);
        if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_1ED823698))
        {
          byte_1ED823688 = 0;
          __cxa_guard_release(&qword_1ED823698);
        }
        v21 = *(unsigned __int8 *)(v15 + 16);
        if (byte_1ED823688)
        {
          if (v21 == 60)
            continue;
        }
        v22 = (v21 - 33);
        if (v22 <= 0x37)
        {
          if (((1 << v22) & 0x8000000000041) != 0)
          {
            v45 = *(_QWORD *)(v15 + 64);
            if (!v45 || (*(_BYTE *)(v45 + 17) & 0x30) == 0)
            {
              v46 = *(_DWORD *)(v15 + 20);
              if (v46 < 0)
              {
                v99 = v15 - 32 * (v46 & 0x7FFFFFF);
                v102 = *(_QWORD *)(v99 - 8);
                v100 = v99 - 8;
                v101 = v102;
                if (v102)
                {
                  v103 = -v101;
                  while (1)
                  {
                    v104 = *(_DWORD *)(*(_QWORD *)(v100 + v103) + 8);
                    v36 = v104 > 7;
                    v105 = (1 << v104) & 0x83;
                    if (v36 || v105 == 0)
                      break;
                    v103 += 16;
                    if (!v103)
                      goto LABEL_90;
                  }
LABEL_94:
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v118, v15);
                  continue;
                }
              }
LABEL_90:
              if ((llvm::CallBase::hasFnAttrOnCalledFunction(v15, 45) & 1) == 0
                && (llvm::CallBase::hasFnAttrOnCalledFunction(v15, 44) & 1) == 0)
              {
                goto LABEL_94;
              }
            }
          }
          else if (v22 == 27)
          {
            if ((*(_WORD *)(v15 + 18) & 0x301) != 0)
              goto LABEL_94;
          }
          else if (((1 << v22) & 0x808001D0000010) != 0)
          {
            goto LABEL_94;
          }
        }
        v23 = *(unsigned __int8 *)(v15 + 16);
        if (v13 && v23 == 60)
        {
          v24 = *(_QWORD *)(v15 - 32);
          sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 40) + 56) + 40) + 272, *(_QWORD *)v15);
          if (v26 == 1)
            v27 = -2;
          else
            v27 = (unint64_t)(v25 + 7) >> 3;
          llvm::Instruction::getAAMetadata((uint64_t ***)v15, v126);
          *(_QWORD *)&v125 = v24;
          *((_QWORD *)&v125 + 1) = v27;
          if (v119 == v118)
            v28 = (uint64_t *)((char *)&v120 + 4);
          else
            v28 = &v120;
          v29 = *(unsigned int *)v28;
          if ((_DWORD)v29)
          {
            v30 = 8 * v29;
            v31 = v119;
            while ((unint64_t)*v31 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v31;
              v30 -= 8;
              if (!v30)
                goto LABEL_61;
            }
          }
          else
          {
            v31 = v119;
          }
          v32 = (char *)&v119[v29];
          if (v31 != (uint64_t *)v32)
          {
            v33 = *v31;
LABEL_57:
            v123[0] = v125;
            v123[1] = v126[0];
            v123[2] = v126[1];
            v124 = 1;
            if ((sub_1C4D90C64((uint64_t)a4, v33, v123) & 2) != 0)
              continue;
            while (++v31 != (uint64_t *)v32)
            {
              v33 = *v31;
              if ((unint64_t)*v31 < 0xFFFFFFFFFFFFFFFELL)
                goto LABEL_57;
            }
          }
LABEL_61:
          v23 = *(unsigned __int8 *)(v15 + 16);
        }
        if (v23 == 83 || (v23 - 29) < 0xB)
          continue;
        v35 = v23 - 38;
        v36 = v35 > 0x38;
        v37 = (1 << v35) & 0x100060000000001;
        v38 = v36 || v37 == 0;
        if (!v38
          || (llvm::Instruction::mayThrow((llvm::Instruction *)v15) & 1) != 0
          || !llvm::Instruction::willReturn((llvm::Instruction *)v15))
        {
          continue;
        }
        v39 = *(unsigned __int8 *)(v15 + 16) - 33;
        if (v39 <= 0x33 && ((1 << v39) & 0x8000000000041) != 0)
        {
          v40 = v13[5];
          if (v40 && (*(_BYTE *)(v40 + 12) & 0x40) != 0
            || (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v14, 6) & 1) != 0)
          {
            continue;
          }
          if (v119 == v118)
            v41 = (uint64_t *)((char *)&v120 + 4);
          else
            v41 = &v120;
          v42 = *(unsigned int *)v41;
          if ((_DWORD)v42)
          {
            v43 = 8 * v42;
            v44 = (llvm::Instruction **)v119;
            while ((unint64_t)*v44 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v44;
              v43 -= 8;
              if (!v43)
                goto LABEL_102;
            }
          }
          else
          {
            v44 = (llvm::Instruction **)v119;
          }
          v47 = (char *)&v119[v42];
          if (v44 != (llvm::Instruction **)v47)
          {
            v48 = *v44;
LABEL_98:
            if ((llvm::AAResults::getModRefInfo(a4, v48, v14) & 2) != 0)
              continue;
            while (++v44 != (llvm::Instruction **)v47)
            {
              v48 = *v44;
              if ((unint64_t)*v44 < 0xFFFFFFFFFFFFFFFELL)
                goto LABEL_98;
            }
          }
        }
LABEL_102:
        v49 = *(_QWORD *)(v15 + 8);
        if (!v49)
          continue;
        v112 = *(_QWORD *)(v15 + 40);
        v113 = 0;
        do
        {
          v50 = *(_QWORD *)(v49 + 24);
          NearestCommonDominator = *(_QWORD *)(v50 + 40);
          if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(a2, NearestCommonDominator))
          {
            if (*(_BYTE *)(v50 + 16) == 83)
            {
              v52 = *(_QWORD *)(v49 + 24);
              v53 = *(_DWORD *)(v52 + 20);
              if ((v53 & 0x40000000) != 0)
                v54 = *(_QWORD *)(v52 - 8);
              else
                v54 = v52 - 32 * (v53 & 0x7FFFFFF);
              v55 = *(_DWORD *)(v50 + 20);
              if ((v55 & 0x40000000) != 0)
                v56 = *(_QWORD *)(v50 - 8);
              else
                v56 = v50 - 32 * (v55 & 0x7FFFFFF);
              NearestCommonDominator = *(_QWORD *)(v56
                                                 + 32 * *(unsigned int *)(v50 + 60)
                                                 + 8 * ((unint64_t)(v49 - v54) >> 5));
            }
            if (v113)
              NearestCommonDominator = llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator(a2, (uint64_t)v113, NearestCommonDominator);
            v113 = (llvm::BasicBlock *)NearestCommonDominator;
            if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(a2, v112, NearestCommonDominator))
              goto LABEL_176;
          }
          v49 = *(_QWORD *)(v49 + 8);
        }
        while (v49);
        v57 = v113;
        if (!v113 || v113 == (llvm::BasicBlock *)v112)
          continue;
        v58 = a2;
        while (1)
        {
          v60 = (_QWORD *)((char *)v57 + 40);
          v59 = *((_QWORD *)v57 + 5);
          if (v59)
            v61 = v59 - 24;
          else
            v61 = 0;
          if (*(unsigned __int8 *)(v61 + 16) - 29 >= 0xB)
            v61 = 0;
          v62 = *(unsigned __int8 *)(v61 + 16);
          v36 = v62 > 0x26;
          v63 = (1 << v62) & 0x7600000000;
          v64 = v36 || v63 == 0;
          v65 = v57 >> 4;
          if (!v64)
            goto LABEL_130;
          UniquePredecessor = llvm::BasicBlock::getUniquePredecessor(v57);
          v65 = v57 >> 4;
          if (UniquePredecessor == *(_QWORD *)(v15 + 40))
            goto LABEL_179;
          v74 = *(unsigned __int8 *)(v15 + 16) - 33;
          v58 = a2;
          if (v74 > 0x37)
            break;
          if (((1 << (*(_BYTE *)(v15 + 16) - 33)) & 0x8000000000041) == 0)
          {
            if (((1 << (*(_BYTE *)(v15 + 16) - 33)) & 0x808001C8000010) != 0
              || v74 == 28 && (*(_WORD *)(v15 + 18) & 0x301) != 0)
            {
              goto LABEL_130;
            }
            break;
          }
          v90 = *(_QWORD *)(v15 + 64);
          if (v90 && ((*(_BYTE *)(v90 + 20) & 4) != 0 || (*(_BYTE *)(v90 + 17) & 0x10) != 0))
            break;
          LODWORD(v123[0]) = 7;
          if (sub_1C53E4BBC(v15, (__int32 *)v123, 1uLL))
          {
            v92 = *(_QWORD *)(v15 - 32);
            if (!v92 || *(_BYTE *)(v92 + 16) || *(_QWORD *)(v92 + 24) != *(_QWORD *)(v15 + 72))
            {
              v58 = a2;
              v65 = v57 >> 4;
              goto LABEL_130;
            }
            v58 = a2;
            v65 = v57 >> 4;
            if (*(_DWORD *)(v92 + 36) != 7)
              goto LABEL_130;
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v15, 66) & 1) != 0)
            break;
          hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction(v15, 44);
          v65 = v57 >> 4;
          if (hasFnAttrOnCalledFunction)
            break;
LABEL_130:
          v66 = *(_QWORD *)(v58 + 24);
          v67 = *(unsigned int *)(v58 + 40);
          if (!(_DWORD)v67)
            goto LABEL_148;
          LODWORD(v68) = (v67 - 1) & (v65 ^ (v57 >> 9));
          v69 = (llvm::BasicBlock **)(v66 + 16 * v68);
          v70 = *v69;
          if (v57 != *v69)
          {
            v71 = 1;
            while (v70 != (llvm::BasicBlock *)-4096)
            {
              v72 = v68 + v71++;
              v68 = v72 & (v67 - 1);
              v70 = *(llvm::BasicBlock **)(v66 + 16 * v68);
              if (v57 == v70)
              {
                v69 = (llvm::BasicBlock **)(v66 + 16 * v68);
                goto LABEL_149;
              }
            }
LABEL_148:
            v69 = (llvm::BasicBlock **)(v66 + 16 * v67);
          }
LABEL_149:
          v57 = (llvm::BasicBlock *)**((_QWORD **)v69[1] + 1);
          if (v57 == (llvm::BasicBlock *)v112)
            goto LABEL_176;
        }
        v75 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v58, *(_QWORD *)(v15 + 40), (uint64_t)v57);
        v65 = v57 >> 4;
        if (!v75)
          goto LABEL_130;
        v76 = *((_DWORD *)a3 + 4);
        if (!v76)
          goto LABEL_179;
        v77 = *a3;
        v78 = v76 - 1;
        v79 = v78 & ((v57 >> 4) ^ (v57 >> 9));
        v80 = *(llvm::BasicBlock **)(*a3 + 16 * v79);
        if (v57 == v80)
        {
LABEL_147:
          v83 = *(_QWORD *)(v77 + 16 * v79 + 8);
        }
        else
        {
          v81 = 1;
          while (v80 != (llvm::BasicBlock *)-4096)
          {
            v82 = v79 + v81++;
            v79 = v82 & v78;
            v80 = *(llvm::BasicBlock **)(v77 + 16 * v79);
            if (v57 == v80)
              goto LABEL_147;
          }
          v83 = 0;
        }
        v58 = a2;
        v84 = *(_QWORD *)(v15 + 40);
        v85 = ((v84 >> 4) ^ (v84 >> 9)) & v78;
        v86 = *(_QWORD *)(v77 + 16 * v85);
        if (v84 == v86)
        {
LABEL_156:
          v89 = *(_QWORD *)(v77 + 16 * v85 + 8);
        }
        else
        {
          v87 = 1;
          while (v86 != -4096)
          {
            v88 = v85 + v87++;
            v85 = v88 & v78;
            v86 = *(_QWORD *)(v77 + 16 * v85);
            if (v84 == v86)
              goto LABEL_156;
          }
          v89 = 0;
        }
        if (v83 && v83 != v89)
          goto LABEL_130;
        if (!v57)
          continue;
LABEL_179:
        for (i = (_QWORD *)*((_QWORD *)v57 + 6); i != v60; i = (_QWORD *)i[1])
        {
          v94 = i - 3;
          if (!i)
            v94 = 0;
          if (*((_BYTE *)v94 + 16) != 83)
          {
            v95 = *((unsigned __int8 *)i - 8) - 38;
            v36 = v95 > 0x38;
            v96 = (1 << v95) & 0x100060000000001;
            if (v36 || v96 == 0)
              v60 = i;
            else
              v60 = (_QWORD *)i[1];
            break;
          }
        }
        if (v60)
          v98 = (llvm::Instruction *)(v60 - 3);
        else
          v98 = 0;
        llvm::Instruction::moveBefore((llvm::Instruction *)v15, v98);
        v116 = 1;
LABEL_176:
        ;
      }
      while (v13 != v16);
      if (v119 != v118)
        free(v119);
      v6 = a2;
      v4 = v114;
      v107 = v116;
LABEL_210:
      v7 |= v107;
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != v4);
    if ((v7 & 1) == 0)
      break;
    v5 = *(_QWORD *)(a1 + 80);
    v111 = 1;
  }
  while (v5 != v4);
  return v111 & 1;
}

uint64_t sub_1C5C4B9F4(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeAAResultsWrapperPassPass(a1, v2);
  v3 = operator new();
  *(_QWORD *)v3 = "Code sinking";
  *(_QWORD *)(v3 + 8) = 12;
  *(_QWORD *)(v3 + 16) = "sink";
  *(_QWORD *)(v3 + 24) = 4;
  *(_QWORD *)(v3 + 32) = &unk_1ED823689;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5C4BB60;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C5C4BA98(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED823689;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8197A38;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED823690);
  if (v3 != -1)
  {
    v7[0] = sub_1C5C4B9F4;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED823690, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5C4BB60()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5C4BA98(v0);
}

void sub_1C5C4BB8C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5C4BBB0(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  return sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::LoopInfoWrapperPass::ID);
}

uint64_t sub_1C5C4BC40(uint64_t a1, uint64_t a2)
{
  char **v4;
  char *v5;
  uint64_t v6;
  char **v7;
  char *v8;
  uint64_t v9;
  char **v10;
  char *v11;
  uint64_t *v12;
  llvm::AAResults *v13;

  v4 = **(char ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != llvm::DominatorTreeWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::DominatorTreeWrapperPass::ID);
  v7 = **(char ****)(a1 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != llvm::LoopInfoWrapperPass::ID);
  v9 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), llvm::LoopInfoWrapperPass::ID);
  v10 = **(char ****)(a1 + 8);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != llvm::AAResultsWrapperPass::ID);
  v12 = (uint64_t *)(v9 + 32);
  v13 = *(llvm::AAResults **)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), llvm::AAResultsWrapperPass::ID)+ 32);
  return sub_1C5C4B01C(a2, v6 + 32, v12, v13);
}

uint64_t sub_1C5C4BD24(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetTransformInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Speculatively execute instructions";
  *(_QWORD *)(v2 + 8) = 34;
  *(_QWORD *)(v2 + 16) = "speculative-execution";
  *(_QWORD *)(v2 + 24) = 21;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F5768;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5C4C4F4;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::SpeculativeExecutionPass::runImpl(llvm::SpeculativeExecutionPass *this, llvm::Function *a2, llvm::TargetTransformInfo *a3)
{
  char *v6;
  uint64_t v7;
  int v8;
  llvm::BasicBlock *v9;

  if (*(_BYTE *)this && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)a3 + 88))(*(_QWORD *)a3)
    || (*((_QWORD *)this + 1) = a3, v6 = (char *)a2 + 72, v7 = *((_QWORD *)a2 + 10), (char *)v7 == v6))
  {
    LOBYTE(v8) = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      if (v7)
        v9 = (llvm::BasicBlock *)(v7 - 24);
      else
        v9 = 0;
      v8 |= llvm::SpeculativeExecutionPass::runOnBasicBlock(this, v9);
      v7 = *(_QWORD *)(v7 + 8);
    }
    while ((char *)v7 != v6);
  }
  return v8 & 1;
}

uint64_t llvm::SpeculativeExecutionPass::runOnBasicBlock(llvm::SpeculativeExecutionPass *this, llvm::BasicBlock *a2)
{
  llvm::BasicBlock *v2;
  char *v3;
  unsigned int v4;
  BOOL v5;
  llvm::BasicBlock *v7;
  llvm::BasicBlock *v8;
  BOOL v9;
  uint64_t SingleSuccessor;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;

  v2 = (llvm::BasicBlock *)*((_QWORD *)a2 + 5);
  if (v2 == (llvm::BasicBlock *)((char *)a2 + 40))
    return 0;
  v3 = (char *)v2 - 24;
  if (!v2)
    v3 = 0;
  v4 = v3[16] - 40;
  if (v4 < 0xFFFFFFF5)
    v3 = 0;
  if (!v2)
    return 0;
  v5 = v3[16] == 30 && v4 >= 0xFFFFFFF5;
  if (!v5 || (*((_DWORD *)v3 + 5) & 0x7FFFFFF) != 3)
    return 0;
  v7 = (llvm::BasicBlock *)*((_QWORD *)v3 - 4);
  v8 = (llvm::BasicBlock *)*((_QWORD *)v3 - 8);
  v9 = v7 == a2 || v8 == a2;
  if (v9 || v7 == v8)
    return 0;
  if (llvm::BasicBlock::getSinglePredecessor(*((llvm::BasicBlock **)v3 - 4))
    && (llvm::BasicBlock *)llvm::BasicBlock::getSingleSuccessor(v7) == v8)
  {
    return llvm::SpeculativeExecutionPass::considerHoistingFromTo(this, v7, a2);
  }
  if (!llvm::BasicBlock::getSinglePredecessor(v8) || (llvm::BasicBlock *)llvm::BasicBlock::getSingleSuccessor(v8) != v7)
  {
    if (llvm::BasicBlock::getSinglePredecessor(v7))
    {
      if (llvm::BasicBlock::getSinglePredecessor(v8))
      {
        if (llvm::BasicBlock::getSingleSuccessor(v8))
        {
          if ((llvm::BasicBlock *)llvm::BasicBlock::getSingleSuccessor(v8) != a2)
          {
            SingleSuccessor = llvm::BasicBlock::getSingleSuccessor(v8);
            if (SingleSuccessor == llvm::BasicBlock::getSingleSuccessor(v7))
            {
              v14 = 2;
              v15 = (_QWORD *)((char *)v8 + 40);
              do
              {
                v15 = (_QWORD *)v15[1];
                --v14;
              }
              while (v15 != (_QWORD *)((char *)v8 + 40));
              if (!v14)
                return llvm::SpeculativeExecutionPass::considerHoistingFromTo(this, v7, a2);
              v16 = 2;
              v17 = (_QWORD *)((char *)v7 + 40);
              do
              {
                v17 = (_QWORD *)v17[1];
                --v16;
              }
              while (v17 != (_QWORD *)((char *)v7 + 40));
              v7 = v8;
              if (!v16)
                return llvm::SpeculativeExecutionPass::considerHoistingFromTo(this, v7, a2);
            }
          }
        }
      }
    }
    return 0;
  }
  v7 = v8;
  return llvm::SpeculativeExecutionPass::considerHoistingFromTo(this, v7, a2);
}

uint64_t llvm::SpeculativeExecutionPass::considerHoistingFromTo(llvm::SpeculativeExecutionPass *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  char *v3;
  char *v4;
  unsigned int v6;
  int64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  int v18;
  unint64_t v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  llvm::Instruction *v47;
  char *v48;
  uint64_t *v49;
  _QWORD *v50;
  unsigned __int8 *v51;
  llvm::Instruction *v52;
  int64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  int v60;
  _BYTE v61[64];
  void *v62;
  uint64_t v63;
  _QWORD v64[6];

  v64[4] = *MEMORY[0x1E0C80C00];
  v57 = v61;
  v58 = v61;
  v59 = 8;
  v60 = 0;
  v3 = (char *)a2 + 40;
  v4 = (char *)*((_QWORD *)a2 + 6);
  if (v4 != (char *)a2 + 40)
  {
    v6 = 0;
    v7 = 0;
    while (1)
    {
      if (v4)
        v8 = (uint64_t)(v4 - 24);
      else
        v8 = 0;
      v9 = (_QWORD *)*((_QWORD *)this + 1);
      v10 = *(unsigned __int8 *)(v8 + 16);
      if (v4 && v10 > 0x1B)
      {
        v11 = v10 - 28;
        goto LABEL_12;
      }
      v12 = 0;
      if (!v4)
        goto LABEL_73;
      v13 = 1;
      if (v10 == 5)
        break;
LABEL_27:
      if (!v13 && llvm::isSafeToSpeculativelyExecute(v8, 0, 0, 0))
      {
        if (sub_1C53923FC(v8) && v4)
        {
          v56 = v7;
          llvm::DbgVariableIntrinsic::location_ops(v8, &v62);
          v30 = (uint64_t)v62;
          v29 = v63;
          while (1)
          {
            if (v30 == v29)
            {
              v7 = v56;
              goto LABEL_67;
            }
            v31 = (unint64_t *)(v30 & 0xFFFFFFFFFFFFFFF8);
            v32 = v30 & 0xFFFFFFFFFFFFFFF8;
            if ((v30 & 4) != 0)
              v32 = *v31;
            v33 = *(_QWORD *)(v32 + 128);
            if (!v33 || *(unsigned __int8 *)(v33 + 16) < 0x1Cu)
              break;
            v34 = (char *)sub_1C477672C((uint64_t)&v57, v33);
            v35 = v58 == v57 ? (uint64_t *)((char *)&v59 + 4) : &v59;
            if (v34 != &v58[8 * *(unsigned int *)v35])
              break;
            if ((v30 & 4) != 0)
              v30 = (unint64_t)(v31 + 1) | 4;
            else
              v30 = (uint64_t)(v31 + 17);
          }
          v7 = v56;
        }
        else if (!sub_1C5392454(v8))
        {
          v36 = *(_DWORD *)(v8 + 20);
          if ((v36 & 0x40000000) != 0)
          {
            v38 = *(uint64_t **)(v8 - 8);
            v37 = v36 & 0x7FFFFFF;
            if (!v37)
            {
LABEL_67:
              if (__OFADD__(v7, v12))
                v7 = ((v7 + v12) >> 63) ^ 0x8000000000000000;
              else
                v7 += v12;
              if (v7 > dword_1ED823728)
              {
LABEL_75:
                v43 = 0;
                goto LABEL_96;
              }
              goto LABEL_53;
            }
          }
          else
          {
            v37 = v36 & 0x7FFFFFF;
            v38 = (uint64_t *)(v8 - 32 * v37);
            if (!v37)
              goto LABEL_67;
          }
          v39 = 32 * v37;
          while (1)
          {
            if (*v38 && *(unsigned __int8 *)(*v38 + 16) >= 0x1Cu)
            {
              v41 = (char *)sub_1C477672C((uint64_t)&v57, *v38);
              v42 = v58 == v57 ? (uint64_t *)((char *)&v59 + 4) : &v59;
              if (v41 != &v58[8 * *(unsigned int *)v42])
                break;
            }
            v38 += 4;
            v39 -= 32;
            if (!v39)
              goto LABEL_67;
          }
        }
      }
      v6 += !sub_1C4D99D08(v8);
      if (v6 > dword_1ED8237E8)
        goto LABEL_75;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v57, v8);
LABEL_53:
      v4 = (char *)*((_QWORD *)v4 + 1);
      if (v4 == v3)
      {
        v44 = (char *)*((_QWORD *)a2 + 6);
        if (v44 != v3)
        {
          v45 = (_QWORD *)((char *)a3 + 40);
          do
          {
            v46 = (char *)*((_QWORD *)v44 + 1);
            if (v44)
              v47 = (llvm::Instruction *)(v44 - 24);
            else
              v47 = 0;
            v48 = (char *)sub_1C477672C((uint64_t)&v57, (uint64_t)v47);
            if (v58 == v57)
              v49 = (uint64_t *)((char *)&v59 + 4);
            else
              v49 = &v59;
            if (v48 == &v58[8 * *(unsigned int *)v49])
            {
              v50 = (_QWORD *)*v45;
              if ((_QWORD *)*v45 == v45)
              {
                v52 = 0;
              }
              else
              {
                if (v50)
                  v51 = (unsigned __int8 *)(v50 - 3);
                else
                  v51 = 0;
                if (v51[16] - 29 >= 0xB)
                  v52 = 0;
                else
                  v52 = (llvm::Instruction *)v51;
              }
              llvm::Instruction::moveBefore(v47, v52);
            }
            v44 = v46;
          }
          while (v46 != v3);
        }
        goto LABEL_95;
      }
    }
    v11 = *(unsigned __int16 *)(v8 + 18);
LABEL_12:
    v14 = v11 - 12;
    v15 = v14 > 0x37;
    v16 = (1 << v14) & 0xBE367FFC47F27FLL;
    if (v15 || v16 == 0)
    {
      v12 = 0;
LABEL_73:
      v13 = 1;
      goto LABEL_27;
    }
    v18 = *(_DWORD *)(v8 + 20);
    if ((v18 & 0x40000000) != 0)
    {
      v20 = *(uint64_t **)(v8 - 8);
      v19 = v18 & 0x7FFFFFF;
    }
    else
    {
      v19 = v18 & 0x7FFFFFF;
      v20 = (uint64_t *)(v8 - 32 * v19);
    }
    v62 = v64;
    v63 = 0x400000000;
    if (v19 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v19, 8);
      v21 = v63;
      v23 = v62;
      v22 = v63;
    }
    else
    {
      v21 = 0;
      if (!v19)
      {
        v27 = v64;
        goto LABEL_25;
      }
      v22 = 0;
      v23 = v64;
    }
    v24 = 32 * v19;
    v25 = &v23[v22];
    do
    {
      v26 = *v20;
      v20 += 4;
      *v25++ = v26;
      v24 -= 32;
    }
    while (v24);
    v27 = v62;
LABEL_25:
    LODWORD(v63) = v21 + v19;
    v12 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *))(*(_QWORD *)*v9 + 72))(*v9, v8, v27);
    v13 = v28;
    if (v62 != v64)
      free(v62);
    goto LABEL_27;
  }
LABEL_95:
  v43 = 1;
LABEL_96:
  if (v58 != v57)
    free(v58);
  return v43;
}

uint64_t llvm::SpeculativeExecutionPass::SpeculativeExecutionPass(uint64_t this, char a2)
{
  if (byte_1ED836950)
    a2 = 1;
  *(_BYTE *)this = a2;
  *(_QWORD *)(this + 8) = 0;
  return this;
}

{
  if (byte_1ED836950)
    a2 = 1;
  *(_BYTE *)this = a2;
  *(_QWORD *)(this + 8) = 0;
  return this;
}

_QWORD *llvm::SpeculativeExecutionPass::run@<X0>(llvm::SpeculativeExecutionPass *a1@<X0>, llvm::Function *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t ResultImpl;
  char v8;

  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::TargetIRAnalysis::Key, (uint64_t)a2);
  v8 = llvm::SpeculativeExecutionPass::runImpl(a1, a2, (llvm::TargetTransformInfo *)(ResultImpl + 8));
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  if ((v8 & 1) != 0)
    return sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::CFGAnalyses::SetKey);
  else
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

uint64_t sub_1C5C4C4F4()
{
  uint64_t result;
  char v1;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8F5768;
  *(_DWORD *)(result + 24) = 2;
  *(_QWORD *)result = &off_1E8197AD8;
  v1 = byte_1ED836950;
  *(_BYTE *)(result + 28) = byte_1ED836950;
  *(_BYTE *)(result + 32) = v1;
  *(_QWORD *)(result + 40) = 0;
  return result;
}

void sub_1C5C4C554(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5C4C578(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 28))
    return "Speculatively execute instructions if target has divergent branches";
  else
    return "Speculatively execute instructions";
}

void sub_1C5C4C5A4(uint64_t a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C5C4C5E8(_QWORD **a1, const llvm::Function *a2)
{
  uint64_t *v2;
  llvm::TargetTransformInfo *v3;
  char **v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[2];
  int v16;
  _QWORD v17[2];
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, a2) & 1) != 0)
    return 0;
  v7 = (char **)*a1[1];
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != llvm::TargetTransformInfoWrapperPass::ID);
  v9 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v10 = *(_QWORD *)(v9 + 56);
  if (!v10)
  {
    sub_1C485C2F0();
LABEL_12:
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    goto LABEL_9;
  }
  v2 = v17;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, const llvm::Function *))(*(_QWORD *)v10 + 48))(&v14, v10, a2);
  v3 = (llvm::TargetTransformInfo *)(v9 + 64);
  v11 = v14;
  if (*(_BYTE *)(v9 + 72))
  {
    v14 = 0;
    v12 = *(_QWORD *)v3;
    *(_QWORD *)v3 = v11;
    if (!v12)
      goto LABEL_9;
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = v14;
    v14 = 0;
    if (!v13)
      goto LABEL_9;
    goto LABEL_12;
  }
  *(_QWORD *)(v9 + 64) = v14;
  *(_BYTE *)(v9 + 72) = 1;
LABEL_9:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v2);
  sub_1C4D8B52C(v15);
  return llvm::SpeculativeExecutionPass::runImpl((llvm::SpeculativeExecutionPass *)(a1 + 4), a2, v3);
}

uint64_t sub_1C5C4C73C()
{
  int v1;
  __n128 v2;
  int v3;
  int *v4;

  v3 = 7;
  v4 = &v3;
  v1 = 1;
  v2.n128_u64[0] = (unint64_t)"Speculative execution is not applied to basic blocks where the cost of the instruct"
                                     "ions to speculatively execute exceeds this limit.";
  v2.n128_u64[1] = 132;
  sub_1C4DB1928((uint64_t)&unk_1ED8236A8, "spec-exec-max-speculation-cost", &v4, &v1, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED8236A8, &dword_1C475E000);
  v3 = 5;
  v4 = &v3;
  v1 = 1;
  v2.n128_u64[0] = (unint64_t)"Speculative execution is not applied to basic blocks where the number of instructio"
                                     "ns that would not be speculatively executed exceeds this limit.";
  v2.n128_u64[1] = 146;
  sub_1C4DB1928((uint64_t)&unk_1ED823768, "spec-exec-max-not-hoisted", &v4, &v1, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED823768, &dword_1C475E000);
  LOBYTE(v1) = 0;
  v4 = &v1;
  v3 = 1;
  v2.n128_u64[0] = (unint64_t)"Speculative execution is applied only to targets with divergent branches, even if t"
                                     "he pass was configured to apply only to all targets.";
  v2.n128_u64[1] = 135;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED8368D0, "spec-exec-only-if-divergent-target", (_BYTE **)&v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8368D0, &dword_1C475E000);
}

uint64_t sub_1C5C4C880(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v2);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "Straight line strength reduction";
  *(_QWORD *)(v3 + 8) = 32;
  *(_QWORD *)(v3 + 16) = "slsr";
  *(_QWORD *)(v3 + 24) = 4;
  *(_QWORD *)(v3 + 32) = &unk_1ED823828;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5C4E47C;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C5C4C924(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED823828;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8197B78;
  *(_QWORD *)(a1 + 32) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED823830);
  if (v3 != -1)
  {
    v7[0] = sub_1C5C4C880;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED823830, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *llvm::StraightLineStrengthReducePass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v12[4];
  uint64_t v13;
  uint64_t *v14;
  void *__p[2];
  __int128 v16;

  v12[0] = *(_QWORD *)(a1 + 40) + 272;
  v12[1] = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, a1) + 8;
  v12[2] = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::ScalarEvolutionAnalysis::Key, a1) + 8;
  v12[3] = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetIRAnalysis::Key, a1) + 8;
  v13 = (uint64_t)&v13;
  v14 = &v13;
  *(_OWORD *)__p = 0u;
  v16 = 0u;
  v6 = sub_1C5C4CB74(v12);
  if (__p[1])
  {
    *(void **)&v16 = __p[1];
    operator delete(__p[1]);
  }
  if (__p[0])
  {
    v8 = v13;
    v7 = v14;
    v9 = *v14;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v8 + 8) = v9;
    __p[0] = 0;
    if (v7 != &v13)
    {
      do
      {
        v10 = (uint64_t *)v7[1];
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != &v13);
    }
  }
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if (!v6)
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::CFGAnalyses::SetKey);
  sub_1C4DDB144(a3, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
  sub_1C4DDB144(a3, (uint64_t)&llvm::ScalarEvolutionAnalysis::Key);
  return sub_1C4DDB144(a3, (uint64_t)&llvm::TargetIRAnalysis::Key);
}

BOOL sub_1C5C4CB74(uint64_t *a1)
{
  void **v2;
  const void *v3;
  void *v4;
  unsigned int v5;
  unsigned int v6;
  _WORD *v7;
  const void *v8;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  llvm::Value **v23;
  int v24;
  unint64_t *v25;
  int v26;
  unint64_t *v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t SCEVIter;
  int v39;
  const llvm::APInt *v40;
  const llvm::APInt *v41;
  llvm::Value *v42;
  llvm::Value *v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  const void *v60;
  unsigned int v61;
  unint64_t v62;
  void *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _BOOL4 v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  BOOL v77;
  const char *v78;
  llvm::APInt *v79;
  char v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  unsigned int v84;
  _QWORD *v85;
  int v86;
  int64_t v87;
  BOOL v88;
  unint64_t v89;
  unsigned int v90;
  int v91;
  void **p_dst;
  int v93;
  int64_t v94;
  unint64_t v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t v101;
  void **p_src;
  uint64_t v103;
  unsigned __int8 *v104;
  const llvm::APInt *v105;
  unsigned __int8 *v106;
  uint8x8_t v107;
  int v108;
  int v109;
  int64_t v110;
  int8x8_t *v111;
  int64_t v112;
  int8x8_t v113;
  uint8x8_t v114;
  int v115;
  unint64_t v116;
  unsigned int v117;
  uint64_t v118;
  llvm::ConstantInt *v119;
  unsigned int v120;
  unint64_t v121;
  llvm::ValueHandleBase *v122;
  const llvm::APInt *v123;
  unsigned int v124;
  uint64_t v125;
  llvm::Value **v126;
  int v127;
  void *v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  unsigned __int8 *v134;
  uint64_t *v135;
  llvm::GetElementPtrInst *v136;
  unsigned __int8 *v137;
  unsigned __int8 *v138;
  uint64_t *v139;
  llvm::GetElementPtrInst *v140;
  llvm::Value *v141;
  uint64_t v142;
  llvm::Value *v143;
  void (*v144)(void);
  _QWORD *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  char *v154;
  char *v155;
  unsigned __int8 **v156;
  int v157;
  unsigned __int8 *v158;
  unsigned __int8 *v159;
  unsigned __int8 *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  unint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  unint64_t v178;
  const llvm::APInt *v179;
  uint64_t v180;
  _QWORD *v181;
  int v182;
  int v183;
  int64_t v184;
  unint64_t v185;
  int v186;
  uint64_t v187;
  llvm::ConstantInt *v188;
  unsigned int v189;
  unint64_t v190;
  llvm::ValueHandleBase *v191;
  _DWORD *v192;
  _DWORD *v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _DWORD *v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  int v202;
  _DWORD *v203;
  uint64_t v204;
  uint64_t v205;
  void (**v206)(void);
  uint64_t v207;
  _BOOL8 result;
  unsigned int v209;
  unsigned int v210;
  _QWORD *v211;
  uint64_t v212;
  void *__src;
  unsigned int v214[2];
  unsigned int v215;
  unsigned int v216;
  int v217;
  _WORD v218[32];
  char *v219;
  char *v220;
  uint64_t v221;
  _QWORD *v222;
  unsigned int v223;
  void *__dst;
  unsigned int v225;
  void *v226;
  uint64_t v227;
  _QWORD v228[3];
  _QWORD *v229;
  void **v230;
  void **v231;
  unsigned int v232;
  unsigned int v233;
  const void **v234;
  _WORD v235[32];
  void *__p;
  char *v237;
  uint64_t v238;
  void *v239;
  void *v240;
  unsigned int v241;
  unsigned int v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  uint64_t v248;
  void *v249;
  _BYTE *v250;
  void *v251;
  void *v252;
  unsigned int v253;
  unsigned int v254;
  int v255;
  void *v256;
  _BYTE *v257;
  _QWORD *v258;
  uint64_t v259;
  _QWORD v260[6];

  v260[4] = *MEMORY[0x1E0C80C00];
  sub_1C6320368((uint64_t)(a1 + 1), &v239);
  v2 = (void **)v235;
  v230 = (void **)v235;
  v3 = v240;
  if (v240 == v239)
  {
    v231 = (void **)v235;
    v4 = v240;
  }
  else
  {
    v209 = v241;
    v2 = (void **)malloc_type_malloc(8 * v241, 0x4065EBACuLL);
    if (!v2)
    {
      if (v209)
        goto LABEL_367;
      v2 = (void **)malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v2)
        goto LABEL_367;
    }
    v231 = v2;
    v4 = v239;
    v3 = v240;
  }
  v5 = v242;
  v232 = v241;
  if (v3 == v4)
    v6 = v242;
  else
    v6 = v241;
  if (v6)
  {
    memmove(v2, v3, 8 * v6);
    v5 = v242;
  }
  v233 = v5;
  LODWORD(v234) = v243;
  v237 = 0;
  v238 = 0;
  __p = 0;
  sub_1C4D6CDA0(&__p, v249, v250, 0xAAAAAAAAAAAAAAABLL * ((v250 - (_BYTE *)v249) >> 3));
  v7 = v218;
  __src = v218;
  v8 = v252;
  if (v252 == v251)
  {
    *(_QWORD *)v214 = v218;
    v9 = v252;
    goto LABEL_10;
  }
  v210 = v253;
  v7 = malloc_type_malloc(8 * v253, 0x4065EBACuLL);
  if (!v7 && (v210 || (v7 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_367:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *(_QWORD *)v214 = v7;
  v9 = v251;
  v8 = v252;
LABEL_10:
  v10 = v254;
  v215 = v253;
  if (v8 == v9)
    v11 = v254;
  else
    v11 = v253;
  if (v11)
  {
    memmove(v7, v8, 8 * v11);
    v10 = v254;
  }
  v216 = v10;
  v217 = v255;
  v220 = 0;
  v221 = 0;
  v219 = 0;
  sub_1C4D6CDA0(&v219, v256, v257, 0xAAAAAAAAAAAAAAABLL * ((v257 - (_BYTE *)v256) >> 3));
  v12 = v260;
  while (1)
  {
    if (v237 - (_BYTE *)__p != v220 - v219)
      goto LABEL_30;
    if (__p == v237)
      break;
    v13 = v219 + 8;
    v14 = (char *)__p + 8;
    while (1)
    {
      v15 = v14 - 8;
      if (*((_QWORD *)v14 - 1) != *((_QWORD *)v13 - 1))
        break;
      v16 = v13[8];
      if (v14[8])
        v17 = v16 == 0;
      else
        v17 = 1;
      if (v17)
      {
        if ((v14[8] == 0) == (v16 != 0))
          break;
      }
      else if (*(_QWORD *)v14 != *(_QWORD *)v13)
      {
        break;
      }
      v13 += 24;
      v14 += 24;
      if (v15 + 24 == v237)
        goto LABEL_86;
    }
LABEL_30:
    v18 = **((_QWORD **)v237 - 3);
    v19 = *(_QWORD *)(v18 + 48);
    v211 = v12;
    v212 = v18 + 40;
    while (v19 != v212)
    {
      if (v19)
        v20 = v19 - 24;
      else
        v20 = 0;
      v21 = *(unsigned __int8 *)(v20 + 16);
      if (v21 == 62)
      {
        if ((*(_DWORD *)(*(_QWORD *)v20 + 8) & 0xFE) != 0x12)
        {
          v258 = v12;
          v259 = 0x400000000;
          v26 = *(_DWORD *)(v20 + 20);
          v27 = (unint64_t *)(v20 - 32 * (v26 & 0x7FFFFFF) + 32);
          if (v27 == (unint64_t *)v20)
          {
            v39 = 62;
LABEL_68:
            v44 = v39 != 62 || v19 == 0;
            v45 = 64;
            if (v44)
              v45 = 24;
            v46 = *(_QWORD *)(v20 + v45);
            if ((v26 & 0x40000000) != 0)
            {
              v48 = *(_QWORD *)(v20 - 8);
              LODWORD(v47) = v26 & 0x7FFFFFF;
            }
            else
            {
              v47 = v26 & 0x7FFFFFF;
              v48 = v20 - 32 * v47;
            }
            v226 = (void *)(v48 + 32);
            v227 = v46 | 4;
            if ((_DWORD)v47 != 1)
            {
              v49 = 1;
              do
              {
                if ((v227 & 4) != 0)
                  __asm { BR              X10 }
                ++v49;
                sub_1C4774E38((uint64_t)&v226);
              }
              while ((_DWORD)v47 != (_DWORD)v49);
            }
            v12 = v211;
            if (v258 != v211)
              free(v258);
            goto LABEL_79;
          }
          v28 = 0;
          while (2)
          {
            v29 = a1[2];
            v30 = *v27;
            v31 = *(_QWORD *)(v29 + 104);
            v32 = *(_DWORD *)(v29 + 120);
            if (v32)
            {
              v33 = ((v30 >> 4) ^ (v30 >> 9)) & (v32 - 1);
              v34 = v31 + 48 * v33;
              v35 = *(_QWORD *)(v34 + 24);
              if (v35 != v30)
              {
                v36 = 1;
                while (v35 != -4096)
                {
                  v37 = v33 + v36++;
                  v33 = v37 & (v32 - 1);
                  v34 = v31 + 48 * v33;
                  v35 = *(_QWORD *)(v34 + 24);
                  if (v35 == v30)
                    goto LABEL_54;
                }
                goto LABEL_53;
              }
            }
            else
            {
LABEL_53:
              v34 = v31 + 48 * v32;
            }
LABEL_54:
            if (v34 == v31 + 48 * v32 || (SCEVIter = *(_QWORD *)(v34 + 40)) == 0)
            {
              SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v29, v30);
              v28 = v259;
            }
            if (v28 >= HIDWORD(v259))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v258, (uint64_t)v211, v28 + 1, 8);
              v28 = v259;
            }
            v258[v28] = SCEVIter;
            v28 = v259 + 1;
            LODWORD(v259) = v259 + 1;
            v27 += 4;
            if (v27 == (unint64_t *)v20)
            {
              v39 = *(unsigned __int8 *)(v20 + 16);
              v26 = *(_DWORD *)(v20 + 20);
              goto LABEL_68;
            }
            continue;
          }
        }
      }
      else if (v21 == 45)
      {
        if (*(_BYTE *)(*(_QWORD *)v20 + 8) == 13)
        {
          v24 = *(_DWORD *)(v20 + 20);
          v25 = (v24 & 0x40000000) != 0
              ? *(unint64_t **)(v20 - 8)
              : (unint64_t *)(v20 - 32 * (v24 & 0x7FFFFFF));
          v40 = (const llvm::APInt *)*v25;
          v41 = (const llvm::APInt *)v25[4];
          sub_1C5C4F068(a1, *v25, v41, (llvm::ConstantInt ***)v20);
          if (v40 != v41)
            sub_1C5C4F068(a1, (unint64_t)v41, v40, (llvm::ConstantInt ***)v20);
        }
      }
      else if (v21 == 41 && *(_BYTE *)(*(_QWORD *)v20 + 8) == 13)
      {
        v22 = *(_DWORD *)(v20 + 20);
        v23 = (v22 & 0x40000000) != 0 ? *(llvm::Value ***)(v20 - 8) : (llvm::Value **)(v20 - 32 * (v22 & 0x7FFFFFF));
        v42 = *v23;
        v43 = v23[4];
        sub_1C5C4E754(a1, *v23, (uint64_t)v43, (llvm::ConstantInt ***)v20);
        if (v42 != v43)
          sub_1C5C4E754(a1, v43, (uint64_t)v42, (llvm::ConstantInt ***)v20);
      }
LABEL_79:
      v19 = *(_QWORD *)(v19 + 8);
    }
    sub_1C632106C((char *)&v230);
  }
LABEL_86:
  if (v219)
  {
    v220 = v219;
    operator delete(v219);
  }
  if (*(void **)v214 != __src)
    free(*(void **)v214);
  if (__p)
  {
    v237 = (char *)__p;
    operator delete(__p);
  }
  if (v231 != v230)
    free(v231);
  if (v256)
  {
    v257 = v256;
    operator delete(v256);
  }
  if (v252 != v251)
    free(v252);
  if (v249)
  {
    v250 = v249;
    operator delete(v249);
  }
  if (v240 != v239)
    free(v240);
  v50 = a1[6];
  v51 = a1;
  if (v50)
  {
    while (1)
    {
      v52 = (uint64_t *)v51[4];
      v53 = v52[7];
      if (v53)
      {
        v54 = v52[6];
        if (*(_QWORD *)(v54 + 40))
          break;
      }
LABEL_289:
      v177 = *v52;
      *(_QWORD *)(v177 + 8) = v52[1];
      *(_QWORD *)v52[1] = v177;
      v51 = a1;
      a1[6] = v50 - 1;
      operator delete(v52);
      v50 = a1[6];
      if (!v50)
        goto LABEL_337;
    }
    sub_1C4773D54((uint64_t)&v239, v54, 0, 0, 0);
    v55 = *a1;
    v56 = v52[4];
    v57 = *(_DWORD *)(v56 + 32);
    LODWORD(v259) = v57;
    if (v57 > 0x40)
    {
      v258 = (_QWORD *)operator new[]();
      v57 = v259;
      memcpy(v258, *(const void **)(v56 + 24), (((unint64_t)v259 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v258 = *(_QWORD **)(v56 + 24);
    }
    v58 = *(_QWORD *)(v53 + 16);
    v59 = *(_DWORD *)(v58 + 32);
    LODWORD(v227) = v59;
    if (v59 > 0x40)
    {
      v226 = (void *)operator new[]();
      v60 = *(const void **)(v58 + 24);
      v61 = v227;
      memcpy(v226, v60, (((unint64_t)v227 + 63) >> 3) & 0x3FFFFFF8);
      v57 = v259;
      v59 = v61;
    }
    else
    {
      v226 = *(void **)(v58 + 24);
    }
    if (v57 >= v59)
    {
      if (v57 > v59)
      {
        llvm::APInt::sext((llvm::APInt *)&v226, v57, (llvm::APInt *)&v230);
        if (v227 >= 0x41 && v226)
          MEMORY[0x1CAA32F9C](v226, 0x1000C8000313F17);
        v226 = v230;
        LODWORD(v227) = (_DWORD)v231;
        v57 = v259;
      }
    }
    else
    {
      llvm::APInt::sext((llvm::APInt *)&v258, v59, (llvm::APInt *)&v230);
      if (v259 >= 0x41 && v258)
        MEMORY[0x1CAA32F9C](v258, 0x1000C8000313F17);
      v258 = v230;
      v57 = v231;
      LODWORD(v259) = (_DWORD)v231;
    }
    if (v57 >= 0x41)
    {
      v64 = v57 + 63;
      v63 = (void *)operator new[]();
      memcpy(v63, v258, (v64 >> 3) & 0x3FFFFFF8);
      v65 = 0;
      v66 = (unint64_t *)v226;
      v67 = (unint64_t *)v63;
      v68 = v64 >> 6;
      do
      {
        v69 = *v66++;
        v70 = *v67 - v69;
        v71 = *v67 < v69;
        v72 = *v67 + ~v69;
        if (v65)
        {
          v65 = v72 >= *v67;
        }
        else
        {
          v72 = v70;
          v65 = v71;
        }
        *v67++ = v72;
        --v68;
      }
      while (v68);
      *((_QWORD *)v63 + (v64 >> 6) - 1) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v57;
    }
    else
    {
      v62 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v57;
      if (!v57)
        v62 = 0;
      v63 = (void *)(v62 & ((char *)v258 - (_BYTE *)v226));
    }
    v225 = v57;
    __dst = v63;
    if (*(_DWORD *)v53 != 3)
    {
      v91 = 0;
      goto LABEL_167;
    }
    v73 = *(_QWORD *)(*(_QWORD *)(v53 + 32) + 72);
    sub_1C4768AD0(v55, v73);
    v75 = v74;
    v77 = v76 == 1;
    llvm::DataLayout::getAlignment(v55, v73);
    v81 = v80;
    if (v77)
    v82 = ((1 << v81) + ((unint64_t)(v75 + 7) >> 3) - 1) & -(1 << v81);
    LODWORD(v231) = v57;
    if (v57 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v230, v82, 0);
    }
    else
    {
      v83 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v57;
      if (!v57)
        v83 = 0;
      v230 = (void **)(v83 & v82);
    }
    v214[0] = 1;
    __src = 0;
    v223 = 1;
    v222 = 0;
    llvm::APInt::sdivrem((llvm::APInt *)&__dst, (const void **)&v230, (const llvm::APInt *)&__src, (llvm::APInt *)&v222, v79);
    v84 = v223;
    v85 = v222;
    if (v223 >= 0x41)
    {
      v86 = 0;
      v87 = ((unint64_t)v223 + 63) >> 6;
      do
      {
        v88 = v87-- < 1;
        if (v88)
          break;
        v89 = v222[v87];
        v86 += __clz(v89);
      }
      while (!v89);
      v90 = v223 | 0xFFFFFFC0;
      if ((v223 & 0x3F) == 0)
        v90 = 0;
      if (v223 - v86 - v90 > 0x40)
      {
        v91 = 1;
        if (!v222)
        {
LABEL_160:
          if (v214[0] >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          if (v231 >= 0x41 && v230)
            MEMORY[0x1CAA32F9C](v230, 0x1000C8000313F17);
          v57 = v225;
          v63 = __dst;
LABEL_167:
          if (v57 >= 0x41)
          {
            v93 = 0;
            v94 = ((unint64_t)v57 + 63) >> 6;
            do
            {
              v88 = v94-- < 1;
              if (v88)
                break;
              v95 = *((_QWORD *)v63 + v94);
              v93 += __clz(v95);
            }
            while (!v95);
            v96 = v57 | 0xFFFFFFC0;
            if ((v57 & 0x3F) == 0)
              v96 = 0;
            v97 = v57 - v93 - v96;
            p_dst = (void **)v63;
            if (v97 > 0x40)
              goto LABEL_183;
          }
          else
          {
            p_dst = &__dst;
          }
          if (*p_dst == (void *)1)
          {
            v98 = v52[5];
LABEL_215:
            if (v225 >= 0x41 && __dst)
              MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
            if (v227 >= 0x41 && v226)
              MEMORY[0x1CAA32F9C](v226, 0x1000C8000313F17);
            if (v259 >= 0x41 && v258)
              MEMORY[0x1CAA32F9C](v258, 0x1000C8000313F17);
            if ((*((_DWORD *)v52 + 4) - 1) > 1)
            {
              llvm::DataLayout::getIntPtrType((llvm::DataLayout *)*a1, *(llvm::Type **)v52[6]);
              v130 = *(_BYTE *)(v52[6] + 17);
              if (v91)
              {
                v131 = **(_QWORD **)(v53 + 32);
                v132 = *(_DWORD *)(v131 + 8);
                if ((v132 & 0xFE) == 0x12)
                  v132 = *(_DWORD *)(**(_QWORD **)(v131 + 16) + 8);
                v133 = llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)v131 + 1912), (llvm::Type *)(v132 >> 8));
                v134 = *(unsigned __int8 **)(v53 + 32);
                v235[0] = 257;
                v135 = (uint64_t *)sub_1C4773E38((uint64_t *)&v239, 49, v134, v133, (uint64_t)&v230);
                v136 = (llvm::GetElementPtrInst *)(*v246 + 1912);
                v235[0] = 257;
                if ((v130 & 2) != 0)
                  v137 = (unsigned __int8 *)sub_1C5098FF4((uint64_t *)&v239, v136, v135, v98, (uint64_t)&v230);
                else
                  v137 = (unsigned __int8 *)sub_1C4867B70((uint64_t *)&v239, v136, v135, v98, (uint64_t)&v230);
                v161 = *(_QWORD *)v52[6];
                v235[0] = 257;
                v141 = (llvm::Value *)sub_1C4773E38((uint64_t *)&v239, 49, v137, v161, (uint64_t)&v230);
              }
              else
              {
                v235[0] = 257;
                v138 = sub_1C4773B94((uint64_t *)&v239, (unsigned __int8 *)v98, v129, (uint64_t)&v230);
                v139 = *(uint64_t **)(v53 + 32);
                v140 = (llvm::GetElementPtrInst *)v139[9];
                v235[0] = 257;
                if ((v130 & 2) != 0)
                  v141 = (llvm::Value *)sub_1C5098FF4((uint64_t *)&v239, v140, v139, (uint64_t)v138, (uint64_t)&v230);
                else
                  v141 = (llvm::Value *)sub_1C4867B70((uint64_t *)&v239, v140, v139, (uint64_t)v138, (uint64_t)&v230);
              }
              v143 = v141;
              goto LABEL_268;
            }
            v226 = 0;
            v231 = &v226;
            v127 = *(unsigned __int8 *)(v98 + 16);
            if (v127 == 5)
            {
              if (*(_WORD *)(v98 + 18) != 15)
                goto LABEL_243;
              if (!sub_1C4E71060((uint64_t)&v230, *(llvm::Constant **)(v98 - 32 * (*(_DWORD *)(v98 + 20) & 0x7FFFFFF))))goto LABEL_243;
              v128 = *(void **)(v98 - 32 * (*(_DWORD *)(v98 + 20) & 0x7FFFFFF) + 32);
              if (!v128)
                goto LABEL_243;
            }
            else if (v127 != 43
                   || !sub_1C4D8AC3C((uint64_t)&v230, *(llvm::Constant **)(v98 - 64))
                   || (v128 = *(void **)(v98 - 32)) == 0)
            {
LABEL_243:
              v145 = *(_QWORD **)(v53 + 32);
              v218[0] = 257;
              v143 = (llvm::Value *)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v247 + 16))(v247, v145, v98, 0, 0);
              if (!v143)
              {
                v235[0] = 257;
                v146 = (char *)operator new(0x80uLL);
                v147 = v146;
                *(_QWORD *)v146 = 0;
                *((_QWORD *)v146 + 1) = 0;
                *((_QWORD *)v146 + 2) = 0;
                *((_QWORD *)v146 + 5) = 0;
                *((_QWORD *)v146 + 6) = 0;
                *((_QWORD *)v146 + 4) = 0;
                *((_QWORD *)v146 + 8) = *v145;
                v143 = (llvm::Value *)(v146 + 64);
                *((_QWORD *)v146 + 3) = v146 + 64;
                *((_QWORD *)v146 + 7) = v146 + 64;
                *((_QWORD *)v146 + 9) = 0;
                v146[80] = 41;
                v146[81] = 0;
                *((_WORD *)v146 + 41) = 0;
                *((_DWORD *)v146 + 21) = 2;
                *((_DWORD *)v146 + 30) = 0;
                *(_OWORD *)(v146 + 104) = 0u;
                *(_OWORD *)(v146 + 88) = 0u;
                *(_QWORD *)v146 = v145;
                v150 = v145[1];
                v149 = v145 + 1;
                v148 = v150;
                *((_QWORD *)v146 + 1) = v150;
                if (v150)
                  *(_QWORD *)(v148 + 16) = v146 + 8;
                *((_QWORD *)v146 + 2) = v149;
                *v149 = v146;
                if (*((_QWORD *)v146 + 4))
                {
                  **((_QWORD **)v146 + 6) = *((_QWORD *)v146 + 5);
                  v195 = *((_QWORD *)v146 + 5);
                  if (v195)
                    *(_QWORD *)(v195 + 16) = *((_QWORD *)v146 + 6);
                }
                *((_QWORD *)v146 + 4) = v98;
                v153 = *(_QWORD *)(v98 + 8);
                v152 = (_QWORD *)(v98 + 8);
                v151 = v153;
                *((_QWORD *)v146 + 5) = v153;
                if (v153)
                  *(_QWORD *)(v151 + 16) = v146 + 40;
                *((_QWORD *)v146 + 6) = v152;
                *v152 = v146 + 32;
                llvm::Value::setName((uint64_t ***)v146 + 8, (uint64_t)&v230);
                (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v248 + 16))(v248, v143, &__src, v244, v245);
                if ((_DWORD)v240)
                {
                  v154 = (char *)v239;
                  v155 = (char *)v239 + 16 * v240;
                  v156 = (unsigned __int8 **)(v147 + 112);
                  while (1)
                  {
                    v157 = *(_DWORD *)v154;
                    v158 = (unsigned __int8 *)*((_QWORD *)v154 + 1);
                    if (v158)
                    {
                      if (!v157)
                      {
                        v258 = (_QWORD *)*((_QWORD *)v154 + 1);
                        llvm::MetadataTracking::track((uint64_t)&v258, v158, 2);
                        v159 = *v156;
                        if (!*v156)
                        {
LABEL_262:
                          v160 = (unsigned __int8 *)v258;
                          *v156 = (unsigned __int8 *)v258;
                          if (v160)
                            llvm::MetadataTracking::retrack((uint64_t)&v258, v160, (uint64_t)(v147 + 112));
                          goto LABEL_259;
                        }
LABEL_256:
                        llvm::MetadataTracking::untrack((uint64_t)(v147 + 112), v159);
                        goto LABEL_262;
                      }
                    }
                    else
                    {
                      v159 = *v156;
                      if (!*v156 && (v147[87] & 0x20) == 0)
                        goto LABEL_259;
                      if (!v157)
                      {
                        v258 = 0;
                        if (!v159)
                          goto LABEL_262;
                        goto LABEL_256;
                      }
                    }
                    llvm::Value::setMetadata(v143, *(_DWORD *)v154, (llvm::MDNode *)v158);
LABEL_259:
                    v154 += 16;
                    if (v154 == v155)
                      goto LABEL_268;
                  }
                }
              }
              goto LABEL_268;
            }
            *v231 = v128;
            v142 = *(_QWORD *)(v53 + 32);
            v235[0] = 257;
            v143 = (llvm::Value *)sub_1C47733F8((uint64_t)&v239, v142, (uint64_t)v226, (uint64_t)&v230, 0, 0);
            v234 = 0;
            llvm::RecursivelyDeleteTriviallyDeadInstructions(v98, 0, 0, &v230);
            if (v234 == (const void **)&v230)
            {
              v144 = (void (*)(void))v230[4];
            }
            else
            {
              if (!v234)
              {
LABEL_268:
                llvm::Value::takeName(v143, (llvm::Value *)v52[6]);
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v52[6], v143, (llvm::Value *)1);
                v162 = v52[6];
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v162 + 40) + 40, (uint64_t ***)v162);
                v163 = *(_QWORD *)(v162 + 24);
                v164 = *(_QWORD **)(v162 + 32);
                *v164 = v163;
                *(_QWORD *)(v163 + 8) = v164;
                *(_QWORD *)(v162 + 24) = 0;
                *(_QWORD *)(v162 + 32) = 0;
                v166 = (_QWORD *)a1[8];
                v165 = a1[9];
                if ((unint64_t)v166 >= v165)
                {
                  v168 = (_QWORD *)a1[7];
                  v169 = v166 - v168;
                  v170 = v169 + 1;
                  if ((unint64_t)(v169 + 1) >> 61)
                    abort();
                  v171 = v165 - (_QWORD)v168;
                  if (v171 >> 2 > v170)
                    v170 = v171 >> 2;
                  if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFF8)
                    v172 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v172 = v170;
                  if (v172)
                  {
                    if (v172 >> 61)
                      sub_1C4764EE4();
                    v173 = (char *)operator new(8 * v172);
                  }
                  else
                  {
                    v173 = 0;
                  }
                  v174 = &v173[8 * v169];
                  *(_QWORD *)v174 = v52[6];
                  v167 = v174 + 8;
                  if (v166 == v168)
                  {
                    v176 = a1;
                  }
                  else
                  {
                    do
                    {
                      v175 = *--v166;
                      *((_QWORD *)v174 - 1) = v175;
                      v174 -= 8;
                    }
                    while (v166 != v168);
                    v176 = a1;
                    v166 = (_QWORD *)a1[7];
                  }
                  v176[7] = (uint64_t)v174;
                  v176[8] = (uint64_t)v167;
                  v176[9] = (uint64_t)&v173[8 * v172];
                  if (v166)
                    operator delete(v166);
                }
                else
                {
                  *v166 = v52[6];
                  v167 = v166 + 1;
                }
                a1[8] = (uint64_t)v167;
                if (v239 != &v241)
                  free(v239);
                v52 = (uint64_t *)a1[4];
                v50 = a1[6];
                goto LABEL_289;
              }
              v144 = (void (*)(void))*((_QWORD *)*v234 + 5);
            }
            v144();
            goto LABEL_268;
          }
          if (!v57)
            goto LABEL_184;
          if (v57 <= 0x40)
          {
            if ((void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v57) != v63)
              goto LABEL_180;
            goto LABEL_184;
          }
LABEL_183:
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__dst) != v57)
          {
LABEL_180:
            v99 = ***(_QWORD ****)(v53 + 32);
            LODWORD(v230) = v57;
            if ((int)v57 <= 63)
            {
              if ((int)v57 <= 31)
              {
                switch(v57)
                {
                  case 0x10u:
                    v100 = *v99 + 1936;
                    goto LABEL_191;
                  case 8u:
                    v100 = *v99 + 1912;
                    goto LABEL_191;
                  case 1u:
                    v100 = *v99 + 1888;
                    goto LABEL_191;
                }
              }
              else if (v57 == 32)
              {
                v100 = *v99 + 1960;
                goto LABEL_191;
              }
            }
            else
            {
              if (v57 == 64)
              {
                v100 = *v99 + 1984;
                goto LABEL_191;
              }
              if (v57 == 128)
              {
                v100 = *v99 + 2008;
                goto LABEL_191;
              }
            }
            v192 = sub_1C5270984(*v99 + 2168, &v230);
            v100 = *((_QWORD *)v192 + 1);
            if (!v100)
            {
              v193 = v192;
              v100 = sub_1C484358C(*v99 + 2040, 24, 3);
              v194 = (int)v230;
              *(_QWORD *)v100 = v99;
              *(_QWORD *)(v100 + 16) = 0;
              *(_QWORD *)(v100 + 8) = (v194 << 8) | 0xDu;
              *((_QWORD *)v193 + 1) = v100;
            }
LABEL_191:
            v104 = (unsigned __int8 *)v52[5];
            v235[0] = 257;
            v106 = sub_1C4773B94((uint64_t *)&v239, v104, v100, (uint64_t)&v230);
            if (v225 > 0x40)
            {
              v109 = 0;
              v110 = ((unint64_t)v225 + 63) >> 6;
              v111 = (int8x8_t *)__dst;
              v112 = v110;
              do
              {
                v113 = *v111++;
                v114 = (uint8x8_t)vcnt_s8(v113);
                v114.i16[0] = vaddlv_u8(v114);
                v109 += v114.i32[0];
                --v112;
              }
              while (v112);
              if (v109 == 1)
              {
                v115 = 0;
                do
                {
                  v88 = v110-- < 1;
                  if (v88)
                    break;
                  v116 = *((_QWORD *)__dst + v110);
                  v115 += __clz(v116);
                }
                while (!v116);
                v117 = v225 | 0xFFFFFFC0;
                if ((v225 & 0x3F) == 0)
                  v117 = 0;
                v108 = v115 + v117;
                goto LABEL_203;
              }
            }
            else
            {
              v107 = (uint8x8_t)vcnt_s8((int8x8_t)__dst);
              v107.i16[0] = vaddlv_u8(v107);
              if (v107.u32[0] == 1)
              {
                v108 = v225 + __clz((unint64_t)__dst) - 64;
LABEL_203:
                v118 = v225 + ~v108;
                v119 = *(llvm::ConstantInt **)v100;
                v120 = *(_DWORD *)(v100 + 8);
                LODWORD(v231) = v120 >> 8;
                if (v120 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v230, v118, 0);
                }
                else
                {
                  if (v120 <= 0xFF)
                    v121 = 0;
                  else
                    v121 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v120);
                  v230 = (void **)(v121 & v118);
                }
                v122 = llvm::ConstantInt::get(v119, (llvm::LLVMContext *)&v230, v105);
                if (v231 >= 0x41 && v230)
                  MEMORY[0x1CAA32F9C](v230, 0x1000C8000313F17);
                v235[0] = 257;
                v103 = sub_1C506E874((uint64_t)&v239, (uint64_t)v106, (uint64_t)v122, (uint64_t)&v230, 0, 0);
                goto LABEL_214;
              }
            }
            if (!sub_1C57EDD40((llvm::APInt *)&__dst))
            {
              v126 = llvm::ConstantInt::get((llvm::ConstantInt **)v100, (llvm::Type *)&__dst, v123);
              v235[0] = 257;
              v103 = sub_1C4EC4040((uint64_t)&v239, (uint64_t)v106, (uint64_t)v126, (uint64_t)&v230, 0, 0);
              goto LABEL_214;
            }
            v124 = v225;
            v223 = v225;
            if (v225 > 0x40)
            {
              v125 = operator new[]();
              v222 = (_QWORD *)v125;
              v124 = v223;
              memcpy((void *)v125, __dst, (((unint64_t)v223 + 63) >> 3) & 0x3FFFFFF8);
              if (v124 > 0x40)
              {
                llvm::APInt::flipAllBitsSlowCase((uint64_t)&v222);
LABEL_295:
                llvm::APInt::operator++((uint64_t)&v222);
                v180 = v223;
                v181 = v222;
                v223 = 0;
                if (v180 > 0x40)
                {
                  v183 = 0;
                  v184 = (unint64_t)(v180 + 63) >> 6;
                  do
                  {
                    v88 = v184-- < 1;
                    if (v88)
                      break;
                    v185 = v222[v184];
                    v183 += __clz(v185);
                  }
                  while (!v185);
                  v186 = v180 | 0xFFFFFFC0;
                  if ((v180 & 0x3F) == 0)
                    v186 = 0;
                  v182 = v183 + v186;
                }
                else
                {
                  v182 = v180 + __clz((unint64_t)v222) - 64;
                }
                v187 = (v180 + ~v182);
                v188 = *(llvm::ConstantInt **)v100;
                v189 = *(_DWORD *)(v100 + 8);
                LODWORD(v231) = v189 >> 8;
                if (v189 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v230, v187, 0);
                }
                else
                {
                  if (v189 <= 0xFF)
                    v190 = 0;
                  else
                    v190 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v189);
                  v230 = (void **)(v190 & v187);
                }
                v191 = llvm::ConstantInt::get(v188, (llvm::LLVMContext *)&v230, v179);
                if (v231 >= 0x41 && v230)
                  MEMORY[0x1CAA32F9C](v230, 0x1000C8000313F17);
                if (v180 >= 0x41 && v181)
                  MEMORY[0x1CAA32F9C](v181, 0x1000C8000313F17);
                if (v223 >= 0x41 && v222)
                  MEMORY[0x1CAA32F9C](v222, 0x1000C8000313F17);
                v235[0] = 257;
                v101 = sub_1C506E874((uint64_t)&v239, (uint64_t)v106, (uint64_t)v191, (uint64_t)&v230, 0, 0);
                v218[0] = 257;
                p_src = &__src;
                goto LABEL_185;
              }
            }
            else
            {
              v125 = (uint64_t)__dst;
            }
            v178 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v124;
            if (!v124)
              v178 = 0;
            v222 = (_QWORD *)(v178 & ~v125);
            goto LABEL_295;
          }
LABEL_184:
          v101 = v52[5];
          v235[0] = 257;
          p_src = (void **)&v230;
LABEL_185:
          v103 = (uint64_t)sub_1C5346748((uint64_t)&v239, v101, (uint64_t)p_src, 0, 0);
LABEL_214:
          v98 = v103;
          goto LABEL_215;
        }
LABEL_159:
        MEMORY[0x1CAA32F9C](v85, 0x1000C8000313F17);
        goto LABEL_160;
      }
      v85 = (_QWORD *)*v222;
    }
    if (v85)
    {
      v91 = 1;
    }
    else if (v225 > 0x40 || v214[0] > 0x40)
    {
      llvm::APInt::reallocate((uint64_t)&__dst, v214[0]);
      if (v225 <= 0x40)
        __dst = __src;
      else
        memcpy(__dst, __src, (((unint64_t)v225 + 63) >> 3) & 0x3FFFFFF8);
      v91 = 0;
      v84 = v223;
    }
    else
    {
      v91 = 0;
      __dst = __src;
      v225 = v214[0];
    }
    if (v84 < 0x41)
      goto LABEL_160;
    v85 = v222;
    if (!v222)
      goto LABEL_160;
    goto LABEL_159;
  }
LABEL_337:
  v196 = v51[7];
  v197 = v51[8];
  if (v196 == v197)
  {
    v207 = v51[7];
    goto LABEL_355;
  }
  do
  {
    v198 = *(_DWORD **)v196;
    v199 = *(_DWORD *)(*(_QWORD *)v196 + 20) & 0x7FFFFFF;
    if ((_DWORD)v199)
    {
      v200 = 0;
      v201 = 32 * v199;
      while (1)
      {
        v202 = v198[5];
        v203 = (v202 & 0x40000000) != 0 ? (_DWORD *)*((_QWORD *)v198 - 1) : &v198[-8 * (v202 & 0x7FFFFFF)];
        v204 = *(_QWORD *)&v203[v200 / 4];
        if (v204)
        {
          **(_QWORD **)&v203[v200 / 4 + 4] = *(_QWORD *)&v203[v200 / 4 + 2];
          v205 = *(_QWORD *)&v203[v200 / 4 + 2];
          if (v205)
            *(_QWORD *)(v205 + 16) = *(_QWORD *)&v203[v200 / 4 + 4];
        }
        *(_QWORD *)&v203[v200 / 4] = 0;
        v229 = 0;
        llvm::RecursivelyDeleteTriviallyDeadInstructions(v204, 0, 0, v228);
        if (v229 == v228)
          break;
        if (v229)
        {
          v206 = (void (**)(void))(*v229 + 40);
LABEL_350:
          (*v206)();
        }
        v200 += 32;
        if (v201 == v200)
          goto LABEL_352;
      }
      v206 = (void (**)(void))(v228[0] + 32);
      goto LABEL_350;
    }
LABEL_352:
    llvm::Value::deleteValue((llvm::Value *)v198);
    v196 += 8;
  }
  while (v196 != v197);
  v207 = v51[7];
  v196 = v51[8];
LABEL_355:
  result = v207 != v196;
  v51[8] = v207;
  return result;
}

uint64_t sub_1C5C4E47C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5C4C924(v0);
}

void sub_1C5C4E4A8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5C4E4CC(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = a2 + 272;
  return 0;
}

void sub_1C5C4E4DC(uint64_t a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

BOOL sub_1C5C4E534(uint64_t a1, const llvm::Function *a2)
{
  uint64_t *v2;
  const llvm::Function *v3;
  _BOOL8 v5;
  char **v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char **v13;
  char *v14;
  uint64_t v15;
  char **v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const llvm::Function *v28;
  uint64_t v29;
  uint64_t *v30;
  void *__p[2];
  __int128 v32;
  uint64_t v33;

  v3 = a2;
  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, a2) & 1) != 0)
    return 0;
  v6 = **(char ****)(a1 + 8);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != llvm::TargetTransformInfoWrapperPass::ID);
  v8 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v25 = 0;
  v26 = 0;
  LODWORD(v27) = 0;
  v28 = 0;
  v29 = 0;
  LODWORD(v30) = 0;
  __p[0] = 0;
  __p[1] = 0;
  LODWORD(v32) = 0;
  v9 = *(_QWORD *)(v8 + 56);
  if (v9)
  {
    v2 = (uint64_t *)&v28;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, const llvm::Function *))(*(_QWORD *)v9 + 48))(&v33, v9, v3);
    v3 = (const llvm::Function *)(v8 + 64);
    v10 = v33;
    if (!*(_BYTE *)(v8 + 72))
    {
      *(_QWORD *)(v8 + 64) = v33;
      *(_BYTE *)(v8 + 72) = 1;
      goto LABEL_9;
    }
    v33 = 0;
    v11 = *(_QWORD *)v3;
    *(_QWORD *)v3 = v10;
    if (!v11)
      goto LABEL_9;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v33;
    v33 = 0;
    if (!v12)
      goto LABEL_9;
  }
  else
  {
    sub_1C485C2F0();
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
LABEL_9:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v2);
  sub_1C4D8B52C(&v25);
  v13 = **(char ****)(a1 + 8);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != llvm::DominatorTreeWrapperPass::ID);
  v15 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), llvm::DominatorTreeWrapperPass::ID);
  v16 = **(char ****)(a1 + 8);
  do
  {
    v17 = *v16;
    v16 += 2;
  }
  while (v17 != llvm::ScalarEvolutionWrapperPass::ID);
  v18 = v15 + 32;
  v19 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v16 - 1) + 96))(*(v16 - 1), llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v25 = *(_QWORD *)(a1 + 32);
  v26 = v18;
  v27 = v19;
  v28 = v3;
  v29 = (uint64_t)&v29;
  v30 = &v29;
  *(_OWORD *)__p = 0u;
  v32 = 0u;
  v5 = sub_1C5C4CB74(&v25);
  if (__p[1])
  {
    *(void **)&v32 = __p[1];
    operator delete(__p[1]);
  }
  if (__p[0])
  {
    v21 = v29;
    v20 = v30;
    v22 = *v30;
    *(_QWORD *)(v22 + 8) = *(_QWORD *)(v29 + 8);
    **(_QWORD **)(v21 + 8) = v22;
    __p[0] = 0;
    if (v20 != &v29)
    {
      do
      {
        v23 = (uint64_t *)v20[1];
        operator delete(v20);
        v20 = v23;
      }
      while (v23 != &v29);
    }
  }
  return v5;
}

_DWORD *sub_1C5C4E754(uint64_t *a1, llvm::Value *a2, uint64_t a3, llvm::ConstantInt ***a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  llvm::Value *v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  llvm::ConstantInt *v26;
  unsigned int v27;
  char v28;
  llvm::ValueHandleBase *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  llvm::Value *v36;
  int v37;
  unsigned int v38;
  uint64_t SCEVIter;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *result;
  unsigned int v44;
  unint64_t v45;
  uint64_t ***v46;
  llvm::ConstantInt **v47;
  llvm::ConstantInt *v48;
  unsigned int v49;
  void *v50;
  unint64_t v51;
  void *v52;
  unsigned int v53;
  const llvm::APInt *v54;
  llvm::ValueHandleBase *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  llvm::Value *v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  llvm::ConstantInt ***v66;
  unint64_t v67;
  unint64_t v68;
  size_t v69;
  uint64_t ***v70;
  void *v71;
  unsigned int v72;
  void *__src;
  unsigned int v74;

  v8 = *(unsigned __int8 *)(a3 + 16);
  switch(v8)
  {
    case 5:
      v11 = *(unsigned __int16 *)(a3 + 18);
      if (v11 != 25)
      {
        if (v11 != 17)
          goto LABEL_31;
        v12 = (uint64_t *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
        v9 = *v12;
        if (!*v12)
          goto LABEL_31;
        v10 = v12[4];
        if (!v10 || *(_BYTE *)(v10 + 16) != 16)
          goto LABEL_31;
        goto LABEL_16;
      }
      v24 = (uint64_t *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
      v22 = *v24;
      if (!*v24)
        goto LABEL_31;
      v23 = v24[4];
      if (!v23 || *(_BYTE *)(v23 + 16) != 16)
        goto LABEL_31;
      break;
    case 53:
      v22 = *(_QWORD *)(a3 - 64);
      if (!v22 || (v23 = *(_QWORD *)(a3 - 32)) == 0 || *(_BYTE *)(v23 + 16) != 16)
      {
LABEL_31:
        v26 = **a4;
        v27 = *((_DWORD *)*a4 + 2);
        v74 = v27 >> 8;
        if (v27 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&__src, 1, 0);
        }
        else
        {
          if (v27 <= 0xFF)
            v28 = 0;
          else
            v28 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v27);
          __src = (void *)(v28 & 1);
        }
        v29 = llvm::ConstantInt::get(v26, (llvm::LLVMContext *)&__src, (const llvm::APInt *)a3);
        if (v74 >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        v30 = a1[2];
        v31 = *(_QWORD *)(v30 + 104);
        v32 = *(_DWORD *)(v30 + 120);
        if (v32)
        {
          v33 = v32 - 1;
          v34 = (v32 - 1) & ((a2 >> 4) ^ (a2 >> 9));
          v35 = v31 + 48 * v34;
          v36 = *(llvm::Value **)(v35 + 24);
          if (v36 == a2)
            goto LABEL_44;
          v37 = 1;
          while (v36 != (llvm::Value *)-4096)
          {
            v38 = v34 + v37++;
            v34 = v38 & v33;
            v35 = v31 + 48 * (v38 & v33);
            v36 = *(llvm::Value **)(v35 + 24);
            if (v36 == a2)
              goto LABEL_44;
          }
        }
        v35 = v31 + 48 * v32;
LABEL_44:
        if (v35 == v31 + 48 * v32 || (SCEVIter = *(_QWORD *)(v35 + 40)) == 0)
          SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v30, (unint64_t)a2);
        v40 = a1;
        v41 = (uint64_t)v29;
        v42 = a3;
        return sub_1C5C4EC34(v40, 1, SCEVIter, v41, v42, (uint64_t)a4);
      }
      break;
    case 45:
      v9 = *(_QWORD *)(a3 - 64);
      if (!v9)
        goto LABEL_31;
      v10 = *(_QWORD *)(a3 - 32);
      if (!v10 || *(_BYTE *)(v10 + 16) != 16)
        goto LABEL_31;
LABEL_16:
      v14 = a1[2];
      v15 = *(_QWORD *)(v14 + 104);
      v16 = *(_DWORD *)(v14 + 120);
      if (v16)
      {
        v17 = (v16 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        v18 = v15 + 48 * v17;
        v19 = *(llvm::Value **)(v18 + 24);
        if (v19 == a2)
          goto LABEL_64;
        v20 = 1;
        while (v19 != (llvm::Value *)-4096)
        {
          v21 = v17 + v20++;
          v17 = v21 & (v16 - 1);
          v18 = v15 + 48 * v17;
          v19 = *(llvm::Value **)(v18 + 24);
          if (v19 == a2)
            goto LABEL_64;
        }
      }
      v18 = v15 + 48 * v16;
LABEL_64:
      if (v18 == v15 + 48 * v16 || (SCEVIter = *(_QWORD *)(v18 + 40)) == 0)
        SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v14, (unint64_t)a2);
      v40 = a1;
      v41 = v10;
      v42 = v9;
      return sub_1C5C4EC34(v40, 1, SCEVIter, v41, v42, (uint64_t)a4);
    default:
      goto LABEL_31;
  }
  v44 = *(_DWORD *)(v23 + 32);
  v74 = v44;
  if (v44 > 0x40)
  {
    v66 = (llvm::ConstantInt ***)v23;
    llvm::APInt::initSlowCase((llvm::APInt *)&__src, 1, 0);
    v70 = (uint64_t ***)(v66 + 3);
    v48 = **v66;
    v72 = v74;
    v49 = v74;
    if (v74 > 0x40)
    {
      v67 = v74;
      v68 = (((unint64_t)v74 + 63) >> 3) & 0x3FFFFFF8;
      v52 = (void *)operator new[]();
      v50 = __src;
      v69 = v68;
      v49 = v67;
      memcpy(v52, __src, v69);
      v51 = v67;
      v46 = v70;
      goto LABEL_54;
    }
    v46 = (uint64_t ***)(v66 + 3);
  }
  else
  {
    v45 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v44;
    if (!v44)
      LOBYTE(v45) = 0;
    __src = (void *)(v45 & 1);
    v47 = *(llvm::ConstantInt ***)v23;
    v46 = (uint64_t ***)(v23 + 24);
    v48 = *v47;
    v72 = v44;
    v49 = v44;
  }
  v50 = __src;
  v51 = v49;
  v52 = __src;
LABEL_54:
  v71 = v52;
  v53 = sub_1C47EE5B8(v46, v51);
  sub_1C4888094((uint64_t)&v71, v53);
  v55 = llvm::ConstantInt::get(v48, (llvm::LLVMContext *)&v71, v54);
  if (v72 >= 0x41 && v71)
    MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17);
  v56 = a1[2];
  v57 = *(_QWORD *)(v56 + 104);
  v58 = *(_DWORD *)(v56 + 120);
  if (v58)
  {
    v59 = v58 - 1;
    v60 = (v58 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v61 = v57 + 48 * v60;
    v62 = *(llvm::Value **)(v61 + 24);
    if (v62 == a2)
      goto LABEL_69;
    v63 = 1;
    while (v62 != (llvm::Value *)-4096)
    {
      v64 = v60 + v63++;
      v60 = v64 & v59;
      v61 = v57 + 48 * (v64 & v59);
      v62 = *(llvm::Value **)(v61 + 24);
      if (v62 == a2)
        goto LABEL_69;
    }
  }
  v61 = v57 + 48 * v58;
LABEL_69:
  if (v61 == v57 + 48 * v58 || (v65 = *(_QWORD *)(v61 + 40)) == 0)
    v65 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v56, (unint64_t)a2);
  result = sub_1C5C4EC34(a1, 1, v65, (uint64_t)v55, v22, (uint64_t)a4);
  if (v49 >= 0x41 && v50)
    return (_DWORD *)MEMORY[0x1CAA32F9C](v50, 0x1000C8000313F17);
  return result;
}

_DWORD *sub_1C5C4EC34(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  int v15;
  int v16;
  _BOOL4 v17;
  BOOL v18;
  _QWORD *v19;
  unsigned int v20;
  llvm::APInt *v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t *v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  llvm::APInt *v36;
  unsigned int v37;
  _DWORD *result;
  _QWORD *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  _QWORD v43[5];

  v43[4] = *MEMORY[0x1E0C80C00];
  v12 = (_QWORD *)a1[3];
  if (a2 == 1)
  {
    if (*(_DWORD *)(a4 + 32) <= 0x40u)
      __asm { BR              X12 }
    v23 = *(_DWORD *)(a4 + 32);
    v24 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a4 + 24));
    if (v24 != v23 - 1 && llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)(a4 + 24)) != v23)
      goto LABEL_26;
    goto LABEL_56;
  }
  if (a2 == 2)
  {
    v21 = (llvm::APInt *)(a4 + 24);
    v22 = *(_DWORD *)(a4 + 32);
    if (v22 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v21) != v22)
        goto LABEL_26;
    }
    else if (*(_QWORD *)v21)
    {
      goto LABEL_26;
    }
    goto LABEL_56;
  }
  if (a2 != 3)
    goto LABEL_26;
  v13 = (char *)(a6 - 32 * (*(_DWORD *)(a6 + 20) & 0x7FFFFFF) + 32);
  v41 = v43;
  v42 = 0x400000000;
  sub_1C6320FEC((unsigned int *)&v41, v13, (char *)a6);
  v14 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, void *, _QWORD, uint64_t))(*(_QWORD *)*v12 + 24))(*v12, *(_QWORD *)(a6 + 64), *(_QWORD *)(a6 - 32 * (*(_DWORD *)(a6 + 20) & 0x7FFFFFF)), v41, v42, 3);
  v16 = v15;
  if (v41 != v43)
    free(v41);
  v17 = v16 >= 0;
  if (v16)
  {
    v18 = v16 < 1;
  }
  else
  {
    v17 = v14 >= 0;
    v18 = v14 < 1;
  }
  if (v17 && v18)
  {
LABEL_56:
    v29 = 0;
    goto LABEL_57;
  }
  v19 = (_QWORD *)(a4 + 24);
  v20 = *(_DWORD *)(a4 + 32);
  if (v20 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a4 + 24)) != v20 - 1
      && llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)(a4 + 24)) != v20)
    {
      goto LABEL_26;
    }
  }
  else if (v20 && *v19 != 1 && *v19 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v20)
  {
    goto LABEL_26;
  }
  v31 = *(_DWORD *)(a6 + 20) & 0x7FFFFFF;
  if (a6 - 32 * v31 + 32 == a6)
    goto LABEL_56;
  v32 = 0;
  v33 = 32 - 32 * v31;
  do
  {
    v34 = *(_QWORD *)(a6 + v33);
    if (v34)
      v35 = *(_BYTE *)(v34 + 16) == 16;
    else
      v35 = 0;
    if (!v35)
      goto LABEL_50;
    v36 = (llvm::APInt *)(v34 + 24);
    v37 = *(_DWORD *)(v34 + 32);
    if (v37 <= 0x40)
    {
      if (!*(_QWORD *)v36)
        goto LABEL_51;
LABEL_50:
      ++v32;
      goto LABEL_51;
    }
    if (llvm::APInt::countLeadingZerosSlowCase(v36) != v37)
      goto LABEL_50;
LABEL_51:
    v33 += 32;
  }
  while (v33);
  if (v32 < 2)
    goto LABEL_56;
LABEL_26:
  v25 = a1 + 4;
  if (a1 + 4 == (uint64_t *)a1[5])
    goto LABEL_56;
  v26 = 0;
  while (1)
  {
    v27 = *v25;
    v28 = *(_QWORD **)(*v25 + 48);
    if (v28 != (_QWORD *)a6
      && *v28 == *(_QWORD *)a6
      && llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(a1[1], v28[5], *(_QWORD *)(a6 + 40))
      && *(_QWORD *)(v27 + 24) == a3
      && *(_QWORD *)(v27 + 40) == a5
      && *(_DWORD *)(v27 + 16) == a2)
    {
      break;
    }
    v29 = 0;
    v25 = (uint64_t *)*v25;
    if (v25 != (uint64_t *)a1[5] && v26++ < 0x31)
      continue;
    goto LABEL_57;
  }
  v29 = *v25 + 16;
LABEL_57:
  result = operator new(0x40uLL);
  result[4] = a2;
  *((_QWORD *)result + 3) = a3;
  *((_QWORD *)result + 4) = a4;
  *((_QWORD *)result + 5) = a5;
  *((_QWORD *)result + 6) = a6;
  *((_QWORD *)result + 7) = v29;
  v40 = a1[4];
  v39 = a1 + 4;
  *(_QWORD *)result = v40;
  *((_QWORD *)result + 1) = v39;
  *(_QWORD *)(v40 + 8) = result;
  *v39 = result;
  ++v39[2];
  return result;
}

_DWORD *sub_1C5C4F068(uint64_t *a1, unint64_t a2, const llvm::APInt *a3, llvm::ConstantInt ***a4)
{
  int v8;
  llvm::ValueHandleBase *v9;
  llvm::ValueHandleBase *v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  llvm::ValueHandleBase *v23;
  llvm *v24;
  uint64_t SCEVIter;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  llvm *v32;
  int v33;
  unsigned int v34;
  llvm::ConstantInt *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v45;
  unsigned int v46;

  v8 = *(unsigned __int8 *)(a2 + 16);
  if (v8 == 5)
  {
    v12 = *(unsigned __int16 *)(a2 + 18);
    if (v12 != 29)
    {
      if (v12 != 13)
        goto LABEL_43;
      v13 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
      v9 = *(llvm::ValueHandleBase **)v13;
      if (!*(_QWORD *)v13)
        goto LABEL_43;
      v10 = *(llvm::ValueHandleBase **)(v13 + 32);
      if (v10)
        v14 = *((_BYTE *)v10 + 16) == 16;
      else
        v14 = 0;
      if (v14)
        goto LABEL_7;
      goto LABEL_15;
    }
    v26 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
    v9 = *(llvm::ValueHandleBase **)v26;
    if (!*(_QWORD *)v26)
      goto LABEL_43;
    v23 = *(llvm::ValueHandleBase **)(v26 + 32);
    if (v23)
      v27 = *((_BYTE *)v23 + 16) == 16;
    else
      v27 = 0;
    if (v27)
      goto LABEL_25;
    goto LABEL_35;
  }
  if (v8 == 57)
  {
    v9 = *(llvm::ValueHandleBase **)(a2 - 64);
    if (!v9)
      goto LABEL_43;
    v23 = *(llvm::ValueHandleBase **)(a2 - 32);
    if (v23 && *((_BYTE *)v23 + 16) == 16)
    {
LABEL_25:
      v24 = v9;
      v9 = v23;
LABEL_36:
      if (llvm::haveNoCommonBitsSet(v24, v9, (void **)*a1, 0, 0, 0, (const llvm::DominatorTree *)1))
      {
        v15 = a1[2];
        v28 = *(_QWORD *)(v15 + 104);
        v29 = *(_DWORD *)(v15 + 120);
        if (v29)
        {
          v30 = (v29 - 1) & ((v24 >> 4) ^ (v24 >> 9));
          v31 = v28 + 48 * v30;
          v32 = *(llvm **)(v31 + 24);
          if (v32 == v24)
            goto LABEL_58;
          v33 = 1;
          while (v32 != (llvm *)-4096)
          {
            v34 = v30 + v33++;
            v30 = v34 & (v29 - 1);
            v31 = v28 + 48 * v30;
            v32 = *(llvm **)(v31 + 24);
            if (v32 == v24)
              goto LABEL_58;
          }
        }
        v31 = v28 + 48 * v29;
LABEL_58:
        if (v31 != v28 + 48 * v29)
        {
          SCEVIter = *(_QWORD *)(v31 + 40);
          if (SCEVIter)
            return sub_1C5C4EC34(a1, 2, SCEVIter, (uint64_t)v9, (uint64_t)a3, (uint64_t)a4);
        }
        v11 = (unint64_t)v24;
LABEL_56:
        SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v15, v11);
        return sub_1C5C4EC34(a1, 2, SCEVIter, (uint64_t)v9, (uint64_t)a3, (uint64_t)a4);
      }
LABEL_43:
      v35 = **a4;
      v46 = *((_DWORD *)*a4 + 2) >> 8;
      if (v46 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v45, 0, 0);
      else
        v45 = 0;
      v9 = llvm::ConstantInt::get(v35, (llvm::LLVMContext *)&v45, a3);
      if (v46 >= 0x41 && v45)
        MEMORY[0x1CAA32F9C](v45, 0x1000C8000313F17);
      v15 = a1[2];
      v36 = *(_QWORD *)(v15 + 104);
      v37 = *(_DWORD *)(v15 + 120);
      if (v37)
      {
        v38 = v37 - 1;
        v39 = (v37 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        v40 = v36 + 48 * v39;
        v41 = *(_QWORD *)(v40 + 24);
        if (v41 == a2)
          goto LABEL_53;
        v42 = 1;
        while (v41 != -4096)
        {
          v43 = v39 + v42++;
          v39 = v43 & v38;
          v40 = v36 + 48 * (v43 & v38);
          v41 = *(_QWORD *)(v40 + 24);
          if (v41 == a2)
            goto LABEL_53;
        }
      }
      v40 = v36 + 48 * v37;
LABEL_53:
      if (v40 != v36 + 48 * v37)
      {
        SCEVIter = *(_QWORD *)(v40 + 40);
        if (SCEVIter)
          return sub_1C5C4EC34(a1, 2, SCEVIter, (uint64_t)v9, (uint64_t)a3, (uint64_t)a4);
      }
      v11 = a2;
      goto LABEL_56;
    }
LABEL_35:
    v24 = v23;
    if (*((_BYTE *)v9 + 16) != 16)
      goto LABEL_43;
    goto LABEL_36;
  }
  if (v8 != 41)
    goto LABEL_43;
  v9 = *(llvm::ValueHandleBase **)(a2 - 64);
  if (!v9)
    goto LABEL_43;
  v10 = *(llvm::ValueHandleBase **)(a2 - 32);
  if (v10 && *((_BYTE *)v10 + 16) == 16)
  {
LABEL_7:
    v11 = (unint64_t)v9;
    v9 = v10;
    goto LABEL_16;
  }
LABEL_15:
  v11 = (unint64_t)v10;
  if (*((_BYTE *)v9 + 16) != 16)
    goto LABEL_43;
LABEL_16:
  v15 = a1[2];
  v16 = *(_QWORD *)(v15 + 104);
  v17 = *(_DWORD *)(v15 + 120);
  if (!v17)
  {
LABEL_26:
    v19 = v16 + 48 * v17;
    goto LABEL_27;
  }
  v18 = (v17 - 1) & ((v11 >> 4) ^ (v11 >> 9));
  v19 = v16 + 48 * v18;
  v20 = *(_QWORD *)(v19 + 24);
  if (v20 != v11)
  {
    v21 = 1;
    while (v20 != -4096)
    {
      v22 = v18 + v21++;
      v18 = v22 & (v17 - 1);
      v19 = v16 + 48 * v18;
      v20 = *(_QWORD *)(v19 + 24);
      if (v20 == v11)
        goto LABEL_27;
    }
    goto LABEL_26;
  }
LABEL_27:
  if (v19 == v16 + 48 * v17)
    goto LABEL_56;
  SCEVIter = *(_QWORD *)(v19 + 40);
  if (!SCEVIter)
    goto LABEL_56;
  return sub_1C5C4EC34(a1, 2, SCEVIter, (uint64_t)v9, (uint64_t)a3, (uint64_t)a4);
}

_DWORD *sub_1C5C4F3DC(llvm::DataLayout **a1, uint64_t a2, const llvm::APInt *a3, uint64_t a4, llvm::Type **a5)
{
  llvm::ConstantInt *v10;
  unsigned int v11;
  char v12;
  llvm::ValueHandleBase *v13;
  _DWORD *result;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  int v19;
  unsigned int v21;
  unint64_t v22;
  int v23;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t ***v35;
  llvm::ConstantInt **v36;
  llvm::ConstantInt *v37;
  unsigned int v38;
  void *v39;
  unint64_t v40;
  unsigned int v41;
  const llvm::APInt *v42;
  llvm::ValueHandleBase *v43;
  llvm::ConstantInt ***v44;
  unint64_t v45;
  unint64_t v46;
  size_t v47;
  uint64_t ***v48;
  void *v49;
  unsigned int v50;
  void *__src;
  unsigned int v52;

  v10 = **(llvm::ConstantInt ***)a2;
  v11 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  v52 = v11 >> 8;
  if (v11 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__src, 1, 0);
  }
  else
  {
    if (v11 <= 0xFF)
      v12 = 0;
    else
      v12 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v11);
    __src = (void *)(v12 & 1);
  }
  v13 = llvm::ConstantInt::get(v10, (llvm::LLVMContext *)&__src, a3);
  if (v52 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  result = sub_1C5C4F798(a1, (uint64_t)a3, (uint64_t)v13, a2, a4, a5);
  v15 = *(unsigned __int8 *)(a2 + 16);
  v16 = v15 - 28;
  if (v15 < 0x1C)
  {
    if (v15 != 5)
      return result;
    v16 = *(unsigned __int16 *)(a2 + 18);
    HIDWORD(v22) = v16 - 13;
    LODWORD(v22) = v16 - 13;
    v21 = v22 >> 1;
    v23 = (1 << (v22 >> 1)) & 0x47;
    if (v21 > 6 || v23 == 0)
      goto LABEL_34;
  }
  else
  {
    HIDWORD(v18) = v15 - 41;
    LODWORD(v18) = v15 - 41;
    v17 = v18 >> 1;
    v19 = (1 << (v18 >> 1)) & 0x47;
    if (v17 > 6 || v19 == 0)
      goto LABEL_30;
  }
  if (v16 == 17 && (*(_BYTE *)(a2 + 17) & 4) != 0)
  {
    v25 = *(_DWORD *)(a2 + 20);
    v26 = (v25 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v25 & 0x7FFFFFF));
    if (*v26)
    {
      v27 = v26[4];
      if (v27)
      {
        if (*(_BYTE *)(v27 + 16) == 16)
          return sub_1C5C4F798(a1, (uint64_t)a3, v27, *v26, a4, a5);
      }
    }
  }
  if (v15 >= 0x1C)
  {
    HIDWORD(v28) = v15 - 41;
    LODWORD(v28) = v15 - 41;
    v17 = v28 >> 1;
LABEL_30:
    if (v17 > 6 || ((1 << v17) & 0x47) == 0)
      return result;
    v16 = v15 - 28;
    goto LABEL_36;
  }
  v16 = *(unsigned __int16 *)(a2 + 18);
  HIDWORD(v29) = v16 - 13;
  LODWORD(v29) = v16 - 13;
  v21 = v29 >> 1;
LABEL_34:
  if (v21 > 6 || ((1 << v21) & 0x47) == 0)
    return result;
LABEL_36:
  if (v16 != 25 || (*(_BYTE *)(a2 + 17) & 4) == 0)
    return result;
  v30 = *(_DWORD *)(a2 + 20);
  v31 = (v30 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v30 & 0x7FFFFFF));
  v32 = *v31;
  if (!*v31)
    return result;
  result = (_DWORD *)v31[4];
  if (!result || *((_BYTE *)result + 16) != 16)
    return result;
  v33 = result[8];
  v52 = v33;
  if (v33 <= 0x40)
  {
    v34 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v33;
    if (!v33)
      LOBYTE(v34) = 0;
    __src = (void *)(v34 & 1);
    v36 = *(llvm::ConstantInt ***)result;
    v35 = (uint64_t ***)(result + 6);
    v37 = *v36;
    v50 = v33;
    v38 = v33;
    goto LABEL_48;
  }
  v44 = (llvm::ConstantInt ***)result;
  llvm::APInt::initSlowCase((llvm::APInt *)&__src, 1, 0);
  v48 = (uint64_t ***)(v44 + 3);
  v37 = **v44;
  v50 = v52;
  v38 = v52;
  if (v52 <= 0x40)
  {
    v35 = (uint64_t ***)(v44 + 3);
LABEL_48:
    v39 = __src;
    v49 = __src;
    v40 = v38;
    goto LABEL_49;
  }
  v45 = v52;
  v46 = (((unint64_t)v52 + 63) >> 3) & 0x3FFFFFF8;
  v49 = (void *)operator new[]();
  v39 = __src;
  v47 = v46;
  v38 = v45;
  memcpy(v49, __src, v47);
  v40 = v45;
  v35 = v48;
LABEL_49:
  v41 = sub_1C47EE5B8(v35, v40);
  sub_1C4888094((uint64_t)&v49, v41);
  v43 = llvm::ConstantInt::get(v37, (llvm::LLVMContext *)&v49, v42);
  if (v50 >= 0x41 && v49)
    MEMORY[0x1CAA32F9C](v49, 0x1000C8000313F17);
  result = sub_1C5C4F798(a1, (uint64_t)a3, (uint64_t)v43, v32, a4, a5);
  if (v38 >= 0x41)
  {
    if (v39)
      return (_DWORD *)MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
  }
  return result;
}

_DWORD *sub_1C5C4F798(llvm::DataLayout **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::Type **a6)
{
  llvm::ConstantInt **v12;
  const llvm::APInt *v13;
  llvm::ConstantInt **v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  llvm::ConstantInt *v18;
  unint64_t v19;
  unint64_t v20;
  llvm::ValueHandleBase *v21;
  llvm::ConstantInt *v23;
  unint64_t v24;
  unsigned int v25;

  llvm::DataLayout::getIntPtrType(*a1, *a6);
  v14 = v12;
  v15 = *(_DWORD *)(a3 + 32);
  if (v15 > 0x40)
    v16 = **(_QWORD **)(a3 + 24);
  else
    v16 = (uint64_t)(*(_QWORD *)(a3 + 24) << -(char)v15) >> -(char)v15;
  v17 = v16 * a5;
  v18 = *v12;
  v19 = *((unsigned int *)v14 + 2);
  v25 = v19 >> 8;
  if (v19 >> 8 > 0x40)
  {
    v23 = v18;
    llvm::APInt::initSlowCase((llvm::APInt *)&v24, v17, 1);
    v18 = v23;
  }
  else
  {
    if (v19 <= 0xFF)
      v20 = 0;
    else
      v20 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v19);
    v24 = v20 & v17;
  }
  v21 = llvm::ConstantInt::get(v18, (llvm::LLVMContext *)&v24, v13);
  if (v25 >= 0x41 && v24)
    MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
  return sub_1C5C4EC34((uint64_t *)a1, 3, a2, (uint64_t)v21, a4, (uint64_t)a6);
}

uint64_t sub_1C5C4F8BC(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  uint64_t v5;

  llvm::initializeLegacyDivergenceAnalysisPass(a1, a2);
  llvm::initializeLowerSwitchLegacyPassPass(a1, v3);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeRegionInfoPassPass(a1, v4);
  v5 = operator new();
  *(_QWORD *)v5 = "Structurize the CFG";
  *(_QWORD *)(v5 + 8) = 19;
  *(_QWORD *)(v5 + 16) = "structurizecfg";
  *(_QWORD *)(v5 + 24) = 14;
  *(_QWORD *)(v5 + 32) = &unk_1ED823838;
  *(_WORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 42) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = sub_1C5C52420;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v5, 1);
  return v5;
}

uint64_t sub_1C5C4F968(uint64_t a1, char a2)
{
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED823838;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E8197C18;
  *(_BYTE *)(a1 + 28) = a2;
  if (word_1ED823850)
    *(_BYTE *)(a1 + 28) = byte_1ED8238C8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED823840);
  if (v4 != -1)
  {
    v8[0] = sub_1C5C4F8BC;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED823840, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void llvm::StructurizeCFGPass::run(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t ResultImpl;
  uint64_t v7;
  const llvm::APInt *v8;
  char *v9;
  char *v10;
  int v11;
  llvm::Type **v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[10];
  _QWORD v17[11];
  int v18;
  _QWORD v19[10];
  _QWORD v20[26];
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  _BYTE v26[28];
  _QWORD *v27;
  uint64_t v28;
  _QWORD v29[10];
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD v36[11];

  v36[9] = *MEMORY[0x1E0C80C00];
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, a1);
  v7 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::RegionInfoAnalysis::Key, a1);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  sub_1C5C4FC98(*(_QWORD *)(v7 + 40), &v13);
  v9 = v13;
  v10 = v14;
  if (v13 == v14)
    goto LABEL_7;
  v11 = 0;
  do
  {
    v12 = (llvm::Type **)*((_QWORD *)v10 - 1);
    v10 -= 8;
    v16[6] = 0;
    v16[8] = v17;
    v16[9] = 0x800000000;
    v17[8] = v19;
    v17[9] = v19;
    v17[10] = 8;
    v18 = 0;
    v19[8] = v20;
    v19[9] = 0x800000000;
    v20[24] = 0;
    v20[25] = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0u;
    memset(v26, 0, sizeof(v26));
    v27 = v29;
    v28 = 0x800000000;
    v29[8] = 0;
    v29[9] = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = v36;
    v35 = 0x800000000;
    sub_1C5C4FD9C((uint64_t)v16, *v12, v8);
    v11 |= sub_1C5C4FF28(v16, v12, ResultImpl + 8);
    sub_1C5C52324((uint64_t)v16);
  }
  while (v10 != v9);
  if ((v11 & 1) == 0)
  {
LABEL_7:
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)(a3 + 16) = 2;
    *(_DWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 48) = a3 + 80;
    *(_QWORD *)(a3 + 56) = a3 + 80;
    *(_QWORD *)(a3 + 64) = 2;
    *(_DWORD *)(a3 + 72) = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
    if (!v9)
      return;
    goto LABEL_8;
  }
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  sub_1C4DDB144(a3, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
  if (v9)
LABEL_8:
    operator delete(v9);
}

void sub_1C5C4FC98(uint64_t a1, char **a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;

  v5 = a2[1];
  v4 = (unint64_t)a2[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a2;
    v8 = (v5 - *a2) >> 3;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      abort();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_1C4764EE4();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = a1;
    v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        v14 = *((_QWORD *)v5 - 1);
        v5 -= 8;
        *((_QWORD *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      v5 = *a2;
    }
    *a2 = v13;
    a2[1] = v6;
    a2[2] = &v12[8 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v5 = a1;
    v6 = v5 + 8;
  }
  a2[1] = v6;
  v16 = *(uint64_t **)(a1 + 40);
  v15 = *(uint64_t **)(a1 + 48);
  while (v16 != v15)
  {
    v17 = *v16++;
    sub_1C5C4FC98(v17, a2);
  }
}

llvm::UndefValue *sub_1C5C4FD9C(uint64_t a1, llvm::Type *a2, const llvm::APInt *a3)
{
  uint64_t *v4;
  uint64_t v5;
  llvm::ValueHandleBase *v6;
  llvm::ValueHandleBase *v7;
  llvm::UndefValue *result;
  llvm::ConstantInt *v9;
  llvm::ConstantInt *v10;
  unsigned int v11;
  char v12;
  llvm::ConstantInt *v13;
  llvm::ValueHandleBase *v14;
  llvm::ConstantInt *v15;
  llvm::ValueHandleBase *v16;
  uint64_t v17;
  unsigned int v18;

  v4 = **(uint64_t ***)((unint64_t)a2 & 0xFFFFFFFFFFFFFFF8);
  v5 = *v4;
  *(_QWORD *)a1 = *v4 + 1888;
  v6 = *(llvm::ValueHandleBase **)(v5 + 1560);
  if (!v6)
  {
    v10 = *(llvm::ConstantInt **)(v5 + 1888);
    v11 = *(_DWORD *)(v5 + 1896);
    v18 = v11 >> 8;
    if (v11 >> 8 > 0x40)
    {
      v15 = v10;
      llvm::APInt::initSlowCase((llvm::APInt *)&v17, 1, 0);
      v10 = v15;
    }
    else
    {
      if (v11 <= 0xFF)
        v12 = 0;
      else
        v12 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v11);
      v17 = v12 & 1;
    }
    v6 = llvm::ConstantInt::get(v10, (llvm::LLVMContext *)&v17, a3);
    if (v18 >= 0x41 && v17)
    {
      v16 = v6;
      MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
      v6 = v16;
    }
    *(_QWORD *)(v5 + 1560) = v6;
    v5 = *v4;
  }
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(llvm::ValueHandleBase **)(v5 + 1568);
  if (!v7)
  {
    v9 = *(llvm::ConstantInt **)(v5 + 1888);
    v18 = *(_DWORD *)(v5 + 1896) >> 8;
    if (v18 > 0x40)
    {
      v13 = v9;
      llvm::APInt::initSlowCase((llvm::APInt *)&v17, 0, 0);
      v9 = v13;
    }
    else
    {
      v17 = 0;
    }
    v7 = llvm::ConstantInt::get(v9, (llvm::LLVMContext *)&v17, a3);
    if (v18 >= 0x41 && v17)
    {
      v14 = v7;
      MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
      v7 = v14;
    }
    *(_QWORD *)(v5 + 1568) = v7;
  }
  *(_QWORD *)(a1 + 16) = v7;
  result = llvm::UndefValue::get(*(llvm::UndefValue **)a1, a2);
  *(_QWORD *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

BOOL sub_1C5C4FF28(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  unint64_t v6;
  uint64_t *Node;
  __int128 *v8;
  unint64_t *v9;
  unint64_t *v10;
  int v11;
  unsigned int v12;
  void **v13;
  llvm::Value *v14;
  llvm::Value *v15;
  int v16;
  unsigned int v17;
  uint64_t *v18;
  unint64_t i;
  _BYTE *v20;
  char *v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  void *v35;
  llvm::SmallPtrSetImplBase *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  BOOL v44;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  unsigned int v51;
  BOOL v52;
  int v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  llvm::Value *v61;
  int v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  llvm::Value **v66;
  llvm::Value *v67;
  llvm::Value **v68;
  int v69;
  BOOL v70;
  unsigned int v71;
  llvm::Value *v72;
  char *v73;
  char *v74;
  llvm::Value **v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  unsigned int v80;
  llvm::Value *v81;
  llvm::Value **v82;
  int v83;
  BOOL v84;
  unsigned int v85;
  uint64_t v86;
  int v87;
  char *v88;
  char *v89;
  _QWORD *v90;
  llvm::Value *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  llvm::Value *v99;
  int v100;
  uint64_t v101;
  int v102;
  unsigned int v103;
  llvm::Value **v104;
  llvm::Value *v105;
  llvm::Value **v106;
  int v107;
  BOOL v108;
  unsigned int v109;
  llvm::Value **v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  int v114;
  unsigned int v115;
  llvm::Value *v116;
  llvm::Value **v117;
  int v118;
  BOOL v119;
  unsigned int v120;
  int v121;
  uint64_t v122;
  int v123;
  unsigned int v124;
  _QWORD *v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  llvm::Value *v132;
  int v133;
  unsigned int v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  int v138;
  BOOL v139;
  unsigned int v140;
  llvm::Value *v141;
  int v142;
  unsigned int v143;
  llvm::Value **v144;
  llvm::Value *v145;
  llvm::Value **v146;
  int v147;
  BOOL v148;
  unsigned int v149;
  llvm::Value **v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  _QWORD *v155;
  int v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  void **v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  llvm::BasicBlock *v166;
  _BOOL4 v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v175;
  unint64_t *v176;
  uint64_t v177;
  int32x2_t *v178;
  unint64_t v179;
  uint64_t v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  int v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  unsigned int v190;
  int v191;
  unsigned int v192;
  void *v193;
  unsigned int v194;
  int v195;
  unsigned int v196;
  void *v197;
  uint64_t *v198;
  llvm::Value **v199;
  llvm::Value **v200;
  int v201;
  char *v202;
  llvm::Value *v203;
  _QWORD *v204;
  llvm::Type *v205;
  uint64_t v206;
  llvm::UndefValue **v207;
  llvm::UndefValue *v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  int v212;
  int v213;
  unsigned int v214;
  _QWORD *v215;
  uint64_t v216;
  _QWORD *v217;
  int v218;
  BOOL v219;
  unsigned int v220;
  _QWORD *v221;
  llvm::Value *v222;
  int v223;
  unsigned int v224;
  llvm::Value **v225;
  llvm::Value *v226;
  llvm::Value **v227;
  int v228;
  BOOL v229;
  unsigned int v230;
  llvm::Value **v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t *v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  int v240;
  unsigned int v241;
  _QWORD *v242;
  uint64_t v243;
  _QWORD *v244;
  int v245;
  BOOL v246;
  unsigned int v247;
  _QWORD *v248;
  llvm::Value *v249;
  uint64_t NearestCommonDominator;
  int v251;
  int v252;
  int v253;
  unsigned int v254;
  _QWORD *v255;
  uint64_t v256;
  _QWORD *v257;
  int v258;
  BOOL v259;
  unsigned int v260;
  _QWORD *v261;
  uint64_t v262;
  llvm::BasicBlock **v263;
  uint64_t v264;
  llvm::BasicBlock *v265;
  llvm::UndefValue *ValueAtEndOfBlockInternal;
  _QWORD *v267;
  unsigned int v268;
  unint64_t *v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v273;
  uint64_t *v274;
  unint64_t v275;
  int32x2_t ****v276;
  int32x2_t *v277;
  unint64_t v278;
  uint64_t v279;
  unsigned int v280;
  uint64_t v281;
  int32x2_t *****v282;
  int32x2_t ****v283;
  int v284;
  int v285;
  llvm::Type *v286;
  llvm::DSOLocalEquivalent **v287;
  _QWORD *v288;
  uint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  _QWORD *v292;
  uint64_t v293;
  _QWORD *v294;
  uint64_t v295;
  BOOL v296;
  uint64_t v297;
  uint64_t v298;
  BOOL v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  llvm::Value *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  llvm::Value *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  _QWORD *v327;
  unsigned int v328;
  char v329;
  _QWORD *v330;
  _QWORD *v331;
  int32x2_t ****v332;
  BOOL v333;
  int v334;
  unint64_t v335;
  int32x2_t ****v336;
  int v337;
  uint64_t v338;
  llvm::Value *v339;
  uint64_t v340;
  int32x2_t ****v341;
  int32x2_t ***v342;
  llvm::Value *v343;
  unint64_t v344;
  llvm::UndefValue *v345;
  int32x2_t ***v346;
  int32x2_t ***v347;
  unint64_t v349;
  int32x2_t ****v350;
  int32x2_t *v351;
  unint64_t v352;
  uint64_t v353;
  unsigned int v354;
  uint64_t v355;
  int32x2_t *****v356;
  int32x2_t ****v357;
  int v358;
  int v359;
  uint64_t v360;
  void **v361;
  const void *v362;
  void *v363;
  unsigned int *v364;
  int v365;
  unsigned int v366;
  unint64_t *v367;
  const void *v368;
  void *v369;
  unsigned int v370;
  unsigned int v371;
  char *v372;
  char *v373;
  char *v374;
  int v375;
  BOOL v376;
  uint64_t v377;
  uint64_t v378;
  unsigned int v379;
  uint64_t v380;
  llvm::Use *v381;
  char v382;
  llvm::Use *v383;
  uint64_t v384;
  int v385;
  uint64_t v386;
  llvm::Type *v387;
  llvm::UndefValue *v388;
  uint64_t v389;
  uint64_t v390;
  llvm::Value *v391;
  int v392;
  int v393;
  unsigned int v394;
  _QWORD *v395;
  uint64_t v396;
  _QWORD *v397;
  int v398;
  BOOL v399;
  unsigned int v400;
  _QWORD *v401;
  unsigned int v402;
  int v403;
  _QWORD *v404;
  uint64_t v405;
  _QWORD *v406;
  int v407;
  BOOL v408;
  int v409;
  _QWORD *v410;
  void *v411;
  uint64_t v412;
  int v413;
  unsigned int v414;
  unsigned int v415;
  int v416;
  unsigned int v417;
  void *v418;
  uint64_t v419;
  llvm::Value *v420;
  uint64_t v421;
  uint64_t v422;
  _QWORD *v423;
  _QWORD *v424;
  uint64_t *v425;
  uint64_t v426;
  uint64_t *v427;
  llvm::Value **v428;
  _QWORD *v429;
  uint64_t v430;
  uint64_t *v431;
  _QWORD *v432;
  unsigned int *v433;
  _QWORD *v434;
  uint64_t v435;
  uint64_t v436;
  llvm::Value **v437;
  _QWORD *v438;
  uint64_t v439;
  unsigned int v440;
  llvm::Value *v441[2];
  _BYTE v442[80];
  void *__p;
  _BYTE *v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t *v447;
  int32x2_t ****v448;
  int v449;
  _BYTE v450[64];
  _BYTE *v451;
  _BYTE *v452;
  uint64_t v453;
  uint64_t v454;
  int64x2_t v455;
  int64x2_t v456;
  llvm::Value *v457;
  uint64_t v458;
  uint64_t v459;
  int v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  _BYTE *v465;
  _BYTE *v466;
  uint64_t v467;
  void *v468;
  void *v469;
  unsigned int v470;
  unsigned int v471;
  int v472;
  _BYTE *v473;
  _BYTE *v474;
  void *v475[5];
  void **v476;
  _QWORD *v477;
  _QWORD *v478;
  char *v479;
  char *v480;
  uint64_t v481;
  uint64_t v482;

  v482 = *MEMORY[0x1E0C80C00];
  v3 = a2[4];
  if (!v3)
    return v3 != 0;
  v5 = a1;
  v421 = a2[4];
  a1[7] = a3;
  v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  a1[4] = *(_QWORD *)(v6 + 56);
  a1[5] = a2;
  Node = llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getNode(a2, v6);
  sub_1C61AEFB4((uint64_t)&v446, (uint64_t)Node);
  llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getNode((_QWORD *)v5[5], *(_QWORD *)v5[5] & 0xFFFFFFFFFFFFFFF8);
  memset(&v442[8], 0, 72);
  __p = 0;
  v441[0] = (llvm::Value *)&v442[16];
  v441[1] = (llvm::Value *)&v442[16];
  *(_QWORD *)v442 = 8;
  v444 = 0;
  v445 = 0;
  v8 = &v461;
  v457 = (llvm::Value *)&v461;
  v9 = v447;
  v439 = (uint64_t)v5;
  if (v447 == (unint64_t *)v446)
  {
    v458 = (uint64_t)&v461;
    v10 = v447;
  }
  else
  {
    v189 = (int)v448;
    v8 = (__int128 *)malloc_type_malloc(8 * v448, 0x4065EBACuLL);
    if (!v8)
    {
      if (v189)
        goto LABEL_707;
      v8 = (__int128 *)malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v8)
        goto LABEL_707;
    }
    v458 = (uint64_t)v8;
    v10 = (unint64_t *)v446;
    v9 = v447;
  }
  v11 = HIDWORD(v448);
  LODWORD(v459) = (_DWORD)v448;
  if (v9 == v10)
    v12 = HIDWORD(v448);
  else
    v12 = v448;
  if (v12)
  {
    memmove(v8, v9, 8 * v12);
    v11 = HIDWORD(v448);
  }
  HIDWORD(v459) = v11;
  v460 = v449;
  v466 = 0;
  v467 = 0;
  v465 = 0;
  sub_1C4EFB920(&v465, v451, v452, 0xCCCCCCCCCCCCCCCDLL * ((v452 - v451) >> 3));
  v13 = &v475[4];
  v475[0] = &v475[4];
  v14 = v441[1];
  if (v441[1] == v441[0])
  {
    v475[1] = &v475[4];
    v15 = v441[1];
  }
  else
  {
    v13 = (void **)malloc_type_malloc(8 * *(unsigned int *)v442, 0x4065EBACuLL);
    if (!v13)
      goto LABEL_707;
    v475[1] = v13;
    v15 = v441[0];
    v14 = v441[1];
  }
  v16 = *(_DWORD *)&v442[4];
  LODWORD(v475[2]) = *(_DWORD *)v442;
  if (v14 == v15)
    v17 = *(_DWORD *)&v442[4];
  else
    v17 = *(_DWORD *)v442;
  if (v17)
  {
    memmove(v13, v14, 8 * v17);
    v16 = *(_DWORD *)&v442[4];
  }
  v18 = v5 + 8;
  HIDWORD(v475[2]) = v16;
  LODWORD(v475[3]) = *(_DWORD *)&v442[8];
  v480 = 0;
  v481 = 0;
  v479 = 0;
  sub_1C4EFB920(&v479, __p, v444, 0xCCCCCCCCCCCCCCCDLL * ((v444 - (_BYTE *)__p) >> 3));
  for (i = 0; ; ++i)
  {
    v20 = v465;
    if (v466 - v465 != v480 - v479)
      goto LABEL_36;
    if (v465 == v466)
      break;
    v21 = v479;
    while (*(_QWORD *)v20 == *(_QWORD *)v21)
    {
      v22 = v21[32];
      if (v20[32])
        v23 = v22 == 0;
      else
        v23 = 1;
      if (v23)
      {
        if ((v20[32] == 0) == (v22 != 0))
          break;
      }
      else
      {
        v24 = *((_QWORD *)v20 + 1);
        if ((v24 & 6) != 0)
        {
          if (((*((_DWORD *)v21 + 2) ^ v24) & 6) != 0)
            break;
        }
        else if (*((_DWORD *)v20 + 6) != *((_DWORD *)v21 + 6))
        {
          break;
        }
      }
      v20 += 40;
      v21 += 40;
      if (v20 == v466)
        goto LABEL_37;
    }
LABEL_36:
    sub_1C4EFBFFC((llvm::SmallPtrSetImplBase *)&v457);
  }
LABEL_37:
  if (v479)
  {
    v480 = v479;
    operator delete(v479);
  }
  if (v475[1] != v475[0])
    free(v475[1]);
  if (v465)
  {
    v466 = v465;
    operator delete(v465);
  }
  if ((llvm::Value *)v458 != v457)
    free((void *)v458);
  sub_1C6154790((uint64_t)(v5 + 8), i);
  if (__p)
  {
    v444 = __p;
    operator delete(__p);
  }
  if (v441[1] != v441[0])
    free(v441[1]);
  if (v451)
  {
    v452 = v451;
    operator delete(v451);
  }
  if (v447 != (unint64_t *)v446)
    free(v447);
  if (*((_DWORD *)v5 + 18))
  {
    v454 = 1;
    v455 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v456 = v455;
    v25 = llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getNode((_QWORD *)v5[5], *(_QWORD *)v5[5] & 0xFFFFFFFFFFFFFFF8);
    LODWORD(v26) = 0;
    v27 = 0;
    v475[0] = &v475[2];
    v475[1] = (void *)0x800000000;
    while (1)
    {
      LODWORD(v457) = 0;
      v458 = 0;
      v459 = 0;
      v460 = 0;
      v461 = 0u;
      v462 = 0u;
      v463 = 0u;
      v464 = 0u;
      v465 = 0;
      sub_1C5C53800((int *)&v457, (uint64_t)v25, (uint64_t)v27);
      while (1)
      {
        sub_1C5C53A84((int *)&v457);
        v29 = (uint64_t *)*((_QWORD *)&v462 + 1);
        v28 = (uint64_t *)v463;
        if (*((_QWORD *)&v462 + 1) == (_QWORD)v463)
          break;
        v30 = ((_QWORD)v463 - *((_QWORD *)&v462 + 1)) >> 4;
        if (v30 >= 3)
        {
          v440 = v26 + v30;
          sub_1C61DFF7C((uint64_t)v475, v26, &v440);
        }
        while (v29 != v28)
        {
          v31 = *v29;
          v29 += 2;
          *(_QWORD *)(*v18 + 8 * v26) = v31;
          LODWORD(v26) = v26 + 1;
        }
      }
      if ((_QWORD)v464)
        operator delete((void *)v464);
      if (v29)
        operator delete(v29);
      if ((_QWORD)v461)
        operator delete((void *)v461);
      MEMORY[0x1CAA32FB4](v458, 8);
      if (!LODWORD(v475[1]))
        break;
      v26 = *((_QWORD *)v475[0] + LODWORD(v475[1]) - 1);
      --LODWORD(v475[1]);
      sub_1C628250C(&v454);
      v32 = *v18;
      v33 = (uint64_t *)(*v18 + 8 * v26);
      if (v33 != (uint64_t *)(*v18 + 8 * HIDWORD(v26) - 8))
      {
        v34 = 8 * HIDWORD(v26) - 8 * v26 - 8;
        do
        {
          sub_1C61540B4((uint64_t)&v457, (uint64_t)&v454, v33++);
          v34 -= 8;
        }
        while (v34);
        v32 = *v18;
      }
      v25 = *(uint64_t **)(v32 + 8 * (HIDWORD(v26) - 1));
      v27 = &v454;
    }
    if (v475[0] != &v475[2])
      free(v475[0]);
    if ((v454 & 1) == 0)
      MEMORY[0x1CAA32FB4](v455.i64[0], 8);
  }
  v424 = v5 + 65;
  sub_1C6327FB0(v5 + 65);
  sub_1C61446F0((unsigned int *)v5 + 156);
  v423 = v5 + 81;
  sub_1C6327FB0(v5 + 81);
  v35 = (void *)v5[19];
  v36 = (llvm::SmallPtrSetImplBase *)(v5 + 18);
  if (v35 == (void *)v5[18])
  {
LABEL_79:
    *((_DWORD *)v5 + 41) = 0;
    *((_DWORD *)v5 + 42) = 0;
  }
  else
  {
    v187 = *((unsigned int *)v5 + 40);
    if (v187 < 0x21 || 4 * (*((_DWORD *)v5 + 41) - *((_DWORD *)v5 + 42)) >= v187)
    {
      memset(v35, 255, 8 * v187);
      goto LABEL_79;
    }
    free(v35);
    v190 = *((_DWORD *)v5 + 41) - *((_DWORD *)v5 + 42);
    v191 = 1 << (33 - __clz(v190 - 1));
    *((_DWORD *)v5 + 41) = 0;
    *((_DWORD *)v5 + 42) = 0;
    if (v190 <= 0x10)
      v192 = 32;
    else
      v192 = v191;
    *((_DWORD *)v5 + 40) = v192;
    v193 = malloc_type_malloc(8 * v192, 0x4065EBACuLL);
    if (!v193)
      goto LABEL_707;
    v5[19] = v193;
    memset(v193, 255, 8 * *((unsigned int *)v5 + 40));
  }
  v431 = v5 + 78;
  v37 = *((unsigned int *)v5 + 18);
  if ((_DWORD)v37)
  {
    v422 = v5[8];
    v38 = v422 + 8 * v37;
    while (1)
    {
      v426 = v38 - 8;
      v39 = *(_QWORD *)(v5[5] + 16);
      v427 = *(uint64_t **)(v38 - 8);
      v446 = *v427 & 0xFFFFFFFFFFFFFFF8;
      v40 = v446;
      v434 = sub_1C63063F0((uint64_t)v424, &v446);
      v432 = sub_1C63063F0((uint64_t)v423, &v446);
      v41 = *(_QWORD *)(v40 + 8);
      if (!v41)
        goto LABEL_93;
      v429 = v434 + 1;
      while (1)
      {
        v42 = *(_QWORD *)(v41 + 24);
        v43 = *(unsigned __int8 *)(v42 + 16);
        v44 = v42 && v43 >= 0x1C;
        if (v44 && v43 - 29 < 0xB)
          break;
        v41 = *(_QWORD *)(v41 + 8);
        if (!v41)
          goto LABEL_93;
      }
      v425 = (uint64_t *)(v39 + 40);
      v436 = v40;
LABEL_96:
      v441[0] = *(llvm::Value **)(v42 + 40);
      if (!llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(*(_QWORD **)(v439 + 40), (uint64_t)v441[0]))
        goto LABEL_97;
      v457 = v441[0];
      v475[0] = 0;
      v54 = sub_1C61252B8(v425, &v457, v475);
      v55 = 0;
      if (v54)
        v55 = (uint64_t *)*((_QWORD *)v475[0] + 1);
      v56 = *(uint64_t **)(v439 + 40);
      if (v55 == v56)
        break;
      do
      {
        v57 = v55;
        v55 = (uint64_t *)v55[1];
      }
      while (v55 != v56);
      if (v57 != v427)
      {
        v457 = 0;
        v457 = (llvm::Value *)(*v57 & 0xFFFFFFFFFFFFFFF8);
        v58 = sub_1C477672C((uint64_t)v36, (uint64_t)v457);
        v59 = *(_QWORD *)(v439 + 152);
        if (v59 == *(_QWORD *)(v439 + 144))
          v60 = 164;
        else
          v60 = 160;
        if (v58 != (_QWORD *)(v59 + 8 * *(unsigned int *)(v439 + v60)))
        {
          v61 = *(llvm::Value **)(v439 + 8);
          v62 = *((_DWORD *)v434 + 6);
          if (!v62)
          {
            v75 = 0;
LABEL_136:
            v76 = (uint64_t)(v434 + 1);
LABEL_258:
            v66 = (llvm::Value **)sub_1C4ECCA58(v76, (uint64_t)&v457, (uint64_t *)&v457, v75);
            *v66 = v457;
            v66[1] = 0;
            goto LABEL_259;
          }
          v63 = v434[1];
          v64 = v62 - 1;
          v65 = ((v457 >> 4) ^ (v457 >> 9)) & v64;
          v66 = (llvm::Value **)(v63 + 16 * v65);
          v67 = *v66;
          if (v457 != *v66)
          {
            v68 = 0;
            v69 = 1;
            while (v67 != (llvm::Value *)-4096)
            {
              if (v68)
                v70 = 0;
              else
                v70 = v67 == (llvm::Value *)-8192;
              if (v70)
                v68 = v66;
              v71 = v65 + v69++;
              v65 = v71 & v64;
              v66 = (llvm::Value **)(v63 + 16 * v65);
              v67 = *v66;
              if (v457 == *v66)
                goto LABEL_259;
            }
            if (v68)
              v75 = v68;
            else
              v75 = v66;
            goto LABEL_136;
          }
LABEL_259:
          v66[1] = v61;
          goto LABEL_97;
        }
        v61 = *(llvm::Value **)(v439 + 16);
        v77 = *((_DWORD *)v432 + 6);
        if (v77)
        {
          v78 = v432[1];
          v79 = v77 - 1;
          v80 = ((v457 >> 4) ^ (v457 >> 9)) & v79;
          v66 = (llvm::Value **)(v78 + 16 * v80);
          v81 = *v66;
          if (v457 == *v66)
            goto LABEL_259;
          v82 = 0;
          v83 = 1;
          while (v81 != (llvm::Value *)-4096)
          {
            if (v82)
              v84 = 0;
            else
              v84 = v81 == (llvm::Value *)-8192;
            if (v84)
              v82 = v66;
            v85 = v80 + v83++;
            v80 = v85 & v79;
            v66 = (llvm::Value **)(v78 + 16 * v80);
            v81 = *v66;
            if (v457 == *v66)
              goto LABEL_259;
          }
          if (v82)
            v75 = v82;
          else
            v75 = v66;
        }
        else
        {
          v75 = 0;
        }
        v76 = (uint64_t)(v432 + 1);
        goto LABEL_258;
      }
LABEL_97:
      while (1)
      {
        v41 = *(_QWORD *)(v41 + 8);
        if (!v41)
          break;
        v42 = *(_QWORD *)(v41 + 24);
        v51 = *(unsigned __int8 *)(v42 + 16);
        if (v42)
          v52 = v51 >= 0x1C;
        else
          v52 = 0;
        if (v52 && v51 - 29 < 0xB)
          goto LABEL_96;
      }
LABEL_93:
      sub_1C4774094(v36, *v427 & 0xFFFFFFFFFFFFFFF8);
      v46 = *v427;
      if ((*v427 & 4) != 0)
      {
        v457 = (llvm::Value *)v427[4];
        v151 = sub_1C477672C((uint64_t)v36, (uint64_t)v457);
        v5 = (_QWORD *)v439;
        v152 = *(_QWORD *)(v439 + 152);
        if (v152 == *(_QWORD *)(v439 + 144))
          v153 = 164;
        else
          v153 = 160;
        v38 = v426;
        if (v151 != (_QWORD *)(v152 + 8 * *(unsigned int *)(v439 + v153)))
        {
          v154 = *v427 & 0xFFFFFFFFFFFFFFF8;
          sub_1C4E5D0EC(v431, &v457)[1] = v154;
        }
      }
      else
      {
        v47 = v46 & 0xFFFFFFFFFFFFFFF8;
        v49 = (_QWORD *)((v46 & 0xFFFFFFFFFFFFFFF8) + 40);
        v48 = (_QWORD *)*v49;
        v5 = (_QWORD *)v439;
        v38 = v426;
        if ((_QWORD *)*v49 == v49)
        {
          v50 = 0;
        }
        else
        {
          if (v48)
            v155 = v48 - 3;
          else
            v155 = 0;
          if (*((unsigned __int8 *)v155 + 16) - 29 >= 0xB)
            v50 = 0;
          else
            v50 = v155;
        }
        v156 = *((_DWORD *)v50 + 5);
        if ((v156 & 0x40000000) != 0)
        {
          v158 = (_QWORD *)*(v50 - 1);
          v157 = v156 & 0x7FFFFFF;
        }
        else
        {
          v157 = v156 & 0x7FFFFFF;
          v158 = &v50[-4 * v157];
        }
        v159 = (_DWORD)v157 == 3;
        if (v157 != v159)
        {
          v160 = (void **)&v158[4 * v159];
          v161 = 32 * v157 - 32 * v159;
          do
          {
            v457 = 0;
            v457 = (llvm::Value *)*v160;
            v162 = sub_1C477672C((uint64_t)v36, (uint64_t)v457);
            v163 = *(_QWORD *)(v439 + 152);
            if (v163 == *(_QWORD *)(v439 + 144))
              v164 = 164;
            else
              v164 = 160;
            if (v162 != (_QWORD *)(v163 + 8 * *(unsigned int *)(v439 + v164)))
              sub_1C4E5D0EC(v431, &v457)[1] = v47;
            v160 += 4;
            v161 -= 32;
          }
          while (v161);
        }
      }
      if (v38 == v422)
        goto LABEL_285;
    }
    v72 = (llvm::Value *)*((_QWORD *)v441[0] + 5);
    if (v72 == (llvm::Value *)((char *)v441[0] + 40))
    {
      v74 = 0;
    }
    else
    {
      if (v72)
        v73 = (char *)v72 - 24;
      else
        v73 = 0;
      if (v73[16] - 29 >= 0xB)
        v74 = 0;
      else
        v74 = v73;
    }
    v86 = 0;
    if ((*((_DWORD *)v74 + 5) & 0x7FFFFFF) == 3)
      v87 = 2;
    else
      v87 = 1;
    v88 = v74;
    v89 = v74 - 32;
    while (*(_QWORD *)&v89[-32 * v86] != v40)
    {
LABEL_207:
      if (v87 == (_DWORD)++v86)
        goto LABEL_97;
    }
    v90 = sub_1C477672C((uint64_t)v36, (uint64_t)v441[0]);
    v92 = *(_QWORD *)(v439 + 152);
    if (v92 == *(_QWORD *)(v439 + 144))
      v93 = 164;
    else
      v93 = 160;
    if (v90 != (_QWORD *)(v92 + 8 * *(unsigned int *)(v439 + v93)))
    {
      v94 = *((_DWORD *)v88 + 5);
      if ((v94 & 0x7FFFFFF) == 3)
      {
        v454 = 0;
        if (v86)
          v95 = 0;
        else
          v95 = -1;
        v454 = *(_QWORD *)&v89[32 * v95];
        v96 = sub_1C477672C((uint64_t)v36, v454);
        v97 = *(_QWORD *)(v439 + 152);
        if (v97 == *(_QWORD *)(v439 + 144))
          v98 = 164;
        else
          v98 = 160;
        if (v96 != (_QWORD *)(v97 + 8 * *(unsigned int *)(v439 + v98)))
        {
          v457 = (llvm::Value *)v454;
          v475[0] = 0;
          if ((sub_1C61252B8(v431, &v457, v475) & 1) == 0)
          {
            v121 = *((_DWORD *)v434 + 6);
            if (!v121)
            {
              v135 = 0;
              v419 = *(_QWORD *)(v439 + 16);
              goto LABEL_236;
            }
            v122 = v434[1];
            v123 = v121 - 1;
            v124 = ((v454 >> 4) ^ (v454 >> 9)) & (v121 - 1);
            v125 = (_QWORD *)(v122 + 16 * v124);
            v126 = *v125;
            if (v454 != *v125)
            {
              v127 = 1;
              v128 = *v125;
              v129 = ((v454 >> 4) ^ (v454 >> 9)) & v123;
              while (v128 != -4096)
              {
                v130 = v129 + v127++;
                v129 = v130 & v123;
                v128 = *(_QWORD *)(v122 + 16 * v129);
                if (v454 == v128)
                  goto LABEL_166;
              }
              v131 = ((LODWORD(v441[0]) >> 4) ^ (LODWORD(v441[0]) >> 9)) & v123;
              v132 = *(llvm::Value **)(v122 + 16 * v131);
              if (v441[0] != v132)
              {
                v133 = 1;
                while (v132 != (llvm::Value *)-4096)
                {
                  v134 = v131 + v133++;
                  v131 = v134 & v123;
                  v132 = *(llvm::Value **)(v122 + 16 * v131);
                  if (v441[0] == v132)
                    goto LABEL_166;
                }
                v136 = 0;
                v137 = *(_QWORD *)(v439 + 16);
                v138 = 1;
                while (v126 != -4096)
                {
                  if (v136)
                    v139 = 0;
                  else
                    v139 = v126 == -8192;
                  if (v139)
                    v136 = v125;
                  v140 = v124 + v138++;
                  v124 = v140 & v123;
                  v125 = (_QWORD *)(v122 + 16 * v124);
                  v126 = *v125;
                  if (v454 == *v125)
                    goto LABEL_237;
                }
                v419 = *(_QWORD *)(v439 + 16);
                if (v136)
                  v135 = v136;
                else
                  v135 = v125;
LABEL_236:
                v125 = sub_1C4ECCA58((uint64_t)v429, (uint64_t)&v454, &v454, v135);
                *v125 = v454;
                v125[1] = 0;
                v121 = *((_DWORD *)v434 + 6);
                v137 = v419;
LABEL_237:
                v125[1] = v137;
                v141 = *(llvm::Value **)(v439 + 8);
                v420 = v141;
                if (v121)
                {
                  v142 = v121 - 1;
                  v143 = ((LODWORD(v441[0]) >> 4) ^ (LODWORD(v441[0]) >> 9)) & v142;
                  v144 = (llvm::Value **)(*v429 + 16 * v143);
                  v145 = *v144;
                  if (v441[0] != *v144)
                  {
                    v146 = 0;
                    v147 = 1;
                    while (v145 != (llvm::Value *)-4096)
                    {
                      if (v146)
                        v148 = 0;
                      else
                        v148 = v145 == (llvm::Value *)-8192;
                      if (v148)
                        v146 = v144;
                      v149 = v143 + v147++;
                      v143 = v149 & v142;
                      v144 = (llvm::Value **)(*v429 + 16 * v143);
                      v145 = *v144;
                      if (v441[0] == *v144)
                        goto LABEL_252;
                    }
                    if (v146)
                      v150 = v146;
                    else
                      v150 = v144;
LABEL_251:
                    v144 = (llvm::Value **)sub_1C4ECCA58((uint64_t)v429, (uint64_t)v441, (uint64_t *)v441, v150);
                    *v144 = v441[0];
                    v144[1] = 0;
                    v141 = v420;
                  }
LABEL_252:
                  v144[1] = v141;
                  goto LABEL_207;
                }
                v150 = 0;
                goto LABEL_251;
              }
            }
          }
        }
LABEL_166:
        v94 = *((_DWORD *)v88 + 5);
      }
      if ((v94 & 0x7FFFFFF) == 3)
      {
        v99 = (llvm::Value *)*((_QWORD *)v88 - 12);
        if (v86)
          v99 = llvm::invertCondition(*((llvm **)v88 - 12), v91);
      }
      else
      {
        v99 = *(llvm::Value **)(v439 + 8);
      }
      v100 = *((_DWORD *)v434 + 6);
      if (!v100)
      {
        v110 = 0;
LABEL_188:
        v111 = (uint64_t)(v434 + 1);
LABEL_205:
        v104 = (llvm::Value **)sub_1C4ECCA58(v111, (uint64_t)v441, (uint64_t *)v441, v110);
        *v104 = v441[0];
        v104[1] = 0;
        goto LABEL_206;
      }
      v101 = v434[1];
      v102 = v100 - 1;
      v103 = ((LODWORD(v441[0]) >> 4) ^ (LODWORD(v441[0]) >> 9)) & v102;
      v104 = (llvm::Value **)(v101 + 16 * v103);
      v105 = *v104;
      if (v441[0] != *v104)
      {
        v106 = 0;
        v107 = 1;
        while (v105 != (llvm::Value *)-4096)
        {
          if (v106)
            v108 = 0;
          else
            v108 = v105 == (llvm::Value *)-8192;
          if (v108)
            v106 = v104;
          v109 = v103 + v107++;
          v103 = v109 & v102;
          v104 = (llvm::Value **)(v101 + 16 * v103);
          v105 = *v104;
          if (v441[0] == *v104)
            goto LABEL_206;
        }
        if (v106)
          v110 = v106;
        else
          v110 = v104;
        goto LABEL_188;
      }
LABEL_206:
      v104[1] = v99;
      v40 = v436;
      goto LABEL_207;
    }
    if ((*((_DWORD *)v88 + 5) & 0x7FFFFFF) == 3)
    {
      v99 = (llvm::Value *)*((_QWORD *)v88 - 12);
      if (v86 != 1)
        v99 = llvm::invertCondition(*((llvm **)v88 - 12), v91);
    }
    else
    {
      v99 = *(llvm::Value **)(v439 + 16);
    }
    v112 = *((_DWORD *)v432 + 6);
    if (v112)
    {
      v113 = v432[1];
      v114 = v112 - 1;
      v115 = ((LODWORD(v441[0]) >> 4) ^ (LODWORD(v441[0]) >> 9)) & v114;
      v104 = (llvm::Value **)(v113 + 16 * v115);
      v116 = *v104;
      if (v441[0] == *v104)
        goto LABEL_206;
      v117 = 0;
      v118 = 1;
      while (v116 != (llvm::Value *)-4096)
      {
        if (v117)
          v119 = 0;
        else
          v119 = v116 == (llvm::Value *)-8192;
        if (v119)
          v117 = v104;
        v120 = v115 + v118++;
        v115 = v120 & v114;
        v104 = (llvm::Value **)(v113 + 16 * v115);
        v116 = *v104;
        if (v441[0] == *v104)
          goto LABEL_206;
      }
      if (v117)
        v110 = v117;
      else
        v110 = v104;
    }
    else
    {
      v110 = 0;
    }
    v111 = (uint64_t)(v432 + 1);
    goto LABEL_205;
  }
LABEL_285:
  v165 = (_QWORD *)v5[5];
  v166 = (llvm::BasicBlock *)v165[4];
  v167 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v5[7], *v165 & 0xFFFFFFFFFFFFFFF8, (uint64_t)v166);
  v168 = v5[30];
  v433 = (unsigned int *)(v5 + 30);
  v169 = *((_DWORD *)v5 + 62);
  if (v169)
  {
    v172 = v168 + 24 * v169;
    do
    {
      v173 = *(_QWORD *)(v172 - 8);
      if (v173 != -8192 && v173 != -4096 && v173 != 0)
      {
        v175 = *(_QWORD *)(v172 - 24) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v175 = *(_QWORD *)(v172 - 16);
        v176 = *(unint64_t **)(v172 - 16);
        if (v176)
        {
          *v176 = *v176 & 7 | v175;
        }
        else
        {
          v177 = *(_QWORD *)(v172 - 8);
          v178 = ***(int32x2_t ****)v177;
          v179 = (unint64_t)v178[303];
          if (v179 <= v175)
          {
            v180 = v178[305].u32[0];
            if (v179 + 16 * v180 > v175)
            {
              v181 = v180 - 1;
              LODWORD(v182) = v181 & ((v177 >> 4) ^ (v177 >> 9));
              v183 = (uint64_t *)(v179 + 16 * v182);
              v184 = *v183;
              if (v177 == *v183)
              {
LABEL_305:
                *v183 = -8192;
                v178[304] = vadd_s32(v178[304], (int32x2_t)0x1FFFFFFFFLL);
                v177 = *(_QWORD *)(v172 - 8);
              }
              else
              {
                v185 = 1;
                while (v184 != -4096)
                {
                  v186 = v182 + v185++;
                  v182 = v186 & v181;
                  v184 = *(_QWORD *)(v179 + 16 * v182);
                  if (v177 == v184)
                  {
                    v183 = (uint64_t *)(v179 + 16 * v182);
                    goto LABEL_305;
                  }
                }
              }
              *(_BYTE *)(v177 + 17) &= ~1u;
            }
          }
        }
      }
      v172 -= 24;
    }
    while (v172 != v168);
  }
  v170 = v439;
  *(_DWORD *)(v439 + 248) = 0;
  v430 = v439 + 448;
  sub_1C6327EB8(v439 + 448);
  sub_1C6327F5C(v439 + 472);
  *(_DWORD *)(v439 + 552) = 0;
  *(_DWORD *)(v439 + 680) = 0;
  *(_QWORD *)(v439 + 752) = 0;
  v171 = *(void **)(v439 + 152);
  if (v171 != *(void **)(v439 + 144))
  {
    v188 = *(unsigned int *)(v439 + 160);
    if (v188 >= 0x21 && 4 * (*(_DWORD *)(v439 + 164) - *(_DWORD *)(v439 + 168)) < v188)
    {
      free(v171);
      v194 = *(_DWORD *)(v439 + 164) - *(_DWORD *)(v439 + 168);
      v195 = 1 << (33 - __clz(v194 - 1));
      *(_DWORD *)(v439 + 164) = 0;
      *(_DWORD *)(v439 + 168) = 0;
      if (v194 <= 0x10)
        v196 = 32;
      else
        v196 = v195;
      *(_DWORD *)(v439 + 160) = v196;
      v197 = malloc_type_malloc(8 * v196, 0x4065EBACuLL);
      if (!v197)
        goto LABEL_707;
      *(_QWORD *)(v439 + 152) = v197;
      memset(v197, 255, 8 * *(unsigned int *)(v439 + 160));
      goto LABEL_329;
    }
    memset(v171, 255, 8 * v188);
  }
  *(_DWORD *)(v439 + 164) = 0;
  *(_DWORD *)(v439 + 168) = 0;
LABEL_329:
  while (*(_DWORD *)(v439 + 72))
    sub_1C5C53FA4(v439, v167, 0);
  v198 = *(uint64_t **)(v439 + 752);
  if (v198)
    sub_1C5C542F8(v439, v198, v166, v167);
  sub_1C5C53298((uint64_t *)v439, 0);
  sub_1C5C53298((uint64_t *)v439, 1);
  v457 = (llvm::Value *)&v459;
  v458 = 0x800000000;
  memset(v475, 0, sizeof(v475));
  v476 = (void **)&v457;
  v200 = *(llvm::Value ***)(v439 + 496);
  v199 = *(llvm::Value ***)(v439 + 504);
  if (v200 == v199)
  {
    v201 = 0;
    v202 = (char *)&v459;
    goto LABEL_452;
  }
  v428 = *(llvm::Value ***)(v439 + 504);
  do
  {
    v203 = *v200;
    v441[0] = v203;
    if (!sub_1C61A45F4(*(_QWORD *)(v170 + 448), *(_DWORD *)(v170 + 464), (uint64_t)v203, &v446))
      goto LABEL_450;
    v204 = sub_1C63281D8(v430, (uint64_t *)v441);
    v206 = v204[4];
    v435 = v204[5];
    v437 = v200;
    if (v206 == v435)
      goto LABEL_449;
    do
    {
      v207 = *(llvm::UndefValue ***)v206;
      v208 = llvm::UndefValue::get(**(llvm::UndefValue ***)v206, v205);
      llvm::SSAUpdater::Initialize((uint64_t)v475, (uint64_t)*v207, "", 0);
      v209 = *(_QWORD *)(*(_QWORD *)(v170 + 32) + 80);
      if (v209)
        v210 = v209 - 24;
      else
        v210 = 0;
      v446 = v210;
      v211 = v475[0];
      v212 = *((_DWORD *)v475[0] + 4);
      if (v212)
      {
        v213 = v212 - 1;
        v214 = (v212 - 1) & ((v210 >> 4) ^ (v210 >> 9));
        v215 = (_QWORD *)(*(_QWORD *)v475[0] + 16 * v214);
        v216 = *v215;
        if (*v215 == v210)
        {
          v215[1] = v208;
          v222 = v441[0];
          v446 = (uint64_t)v441[0];
          goto LABEL_356;
        }
        v217 = 0;
        v218 = 1;
        while (v216 != -4096)
        {
          if (v217)
            v219 = 0;
          else
            v219 = v216 == -8192;
          if (v219)
            v217 = v215;
          v220 = v214 + v218++;
          v214 = v220 & v213;
          v215 = (_QWORD *)(*(_QWORD *)v475[0] + 16 * (v220 & v213));
          v216 = *v215;
          if (*v215 == v210)
            goto LABEL_355;
        }
        if (v217)
          v221 = v217;
        else
          v221 = v215;
      }
      else
      {
        v221 = 0;
      }
      v215 = sub_1C4ECCA58((uint64_t)v475[0], (uint64_t)&v446, &v446, v221);
      *v215 = v446;
      v215[1] = 0;
      v211 = v475[0];
      v212 = *((_DWORD *)v475[0] + 4);
LABEL_355:
      v215[1] = v208;
      v222 = v441[0];
      v446 = (uint64_t)v441[0];
      if (!v212)
      {
        v231 = 0;
LABEL_369:
        v225 = (llvm::Value **)sub_1C4ECCA58((uint64_t)v211, (uint64_t)&v446, &v446, v231);
        *v225 = (llvm::Value *)v446;
        v225[1] = 0;
        goto LABEL_370;
      }
LABEL_356:
      v223 = v212 - 1;
      v224 = v223 & ((v222 >> 4) ^ (v222 >> 9));
      v225 = (llvm::Value **)(*v211 + 16 * v224);
      v226 = *v225;
      if (*v225 != v222)
      {
        v227 = 0;
        v228 = 1;
        while (v226 != (llvm::Value *)-4096)
        {
          if (v227)
            v229 = 0;
          else
            v229 = v226 == (llvm::Value *)-8192;
          if (v229)
            v227 = v225;
          v230 = v224 + v228++;
          v224 = v230 & v223;
          v225 = (llvm::Value **)(*v211 + 16 * (v230 & v223));
          v226 = *v225;
          if (*v225 == v222)
            goto LABEL_370;
        }
        if (v227)
          v231 = v227;
        else
          v231 = v225;
        goto LABEL_369;
      }
LABEL_370:
      v225[1] = v208;
      v232 = *(unsigned int *)(v206 + 16);
      if (!(_DWORD)v232)
      {
        NearestCommonDominator = (uint64_t)v222;
        goto LABEL_399;
      }
      v233 = 0;
      v234 = *(_QWORD *)(v439 + 56);
      v235 = *(uint64_t **)(v206 + 8);
      v236 = &v235[2 * v232];
      do
      {
        while (1)
        {
          v237 = *v235;
          v238 = v235[1];
          v446 = *v235;
          v239 = *((_DWORD *)v475[0] + 4);
          if (v239)
          {
            v240 = v239 - 1;
            v241 = (v239 - 1) & ((v237 >> 4) ^ (v237 >> 9));
            v242 = (_QWORD *)(*(_QWORD *)v475[0] + 16 * v241);
            v243 = *v242;
            if (*v242 == v237)
              goto LABEL_387;
            v244 = 0;
            v245 = 1;
            while (v243 != -4096)
            {
              if (v244)
                v246 = 0;
              else
                v246 = v243 == -8192;
              if (v246)
                v244 = v242;
              v247 = v241 + v245++;
              v241 = v247 & v240;
              v242 = (_QWORD *)(*(_QWORD *)v475[0] + 16 * (v247 & v240));
              v243 = *v242;
              if (*v242 == v237)
                goto LABEL_387;
            }
            v248 = v244 ? v244 : v242;
          }
          else
          {
            v248 = 0;
          }
          v242 = sub_1C4ECCA58((uint64_t)v475[0], (uint64_t)&v446, &v446, v248);
          *v242 = v446;
          v242[1] = 0;
LABEL_387:
          v242[1] = v238;
          v249 = (llvm::Value *)*v235;
          if (v222)
            break;
          v235 += 2;
          v233 = 1;
          v222 = v249;
          if (v235 == v236)
            goto LABEL_415;
        }
        NearestCommonDominator = llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator(v234, (uint64_t)v222, *v235);
        if ((llvm::Value *)NearestCommonDominator == v222)
          v251 = v233;
        else
          v251 = 0;
        v233 = v251 | (NearestCommonDominator == (_QWORD)v249);
        v235 += 2;
        v222 = (llvm::Value *)NearestCommonDominator;
      }
      while (v235 != v236);
      if (!(v251 | (NearestCommonDominator == (_QWORD)v249)))
      {
LABEL_399:
        v446 = NearestCommonDominator;
        v252 = *((_DWORD *)v475[0] + 4);
        if (!v252)
        {
          v261 = 0;
          goto LABEL_413;
        }
        v253 = v252 - 1;
        v254 = (v252 - 1) & ((NearestCommonDominator >> 4) ^ (NearestCommonDominator >> 9));
        v255 = (_QWORD *)(*(_QWORD *)v475[0] + 16 * v254);
        v256 = *v255;
        if (*v255 != NearestCommonDominator)
        {
          v257 = 0;
          v258 = 1;
          while (v256 != -4096)
          {
            if (v257)
              v259 = 0;
            else
              v259 = v256 == -8192;
            if (v259)
              v257 = v255;
            v260 = v254 + v258++;
            v254 = v260 & v253;
            v255 = (_QWORD *)(*(_QWORD *)v475[0] + 16 * (v260 & v253));
            v256 = *v255;
            if (*v255 == NearestCommonDominator)
              goto LABEL_414;
          }
          if (v257)
            v261 = v257;
          else
            v261 = v255;
LABEL_413:
          v255 = sub_1C4ECCA58((uint64_t)v475[0], (uint64_t)&v446, &v446, v261);
          *v255 = v446;
          v255[1] = 0;
        }
LABEL_414:
        v255[1] = v208;
      }
LABEL_415:
      v200 = v437;
      v262 = *((unsigned int *)v437 + 4);
      if ((_DWORD)v262)
      {
        v263 = (llvm::BasicBlock **)v437[1];
        v264 = 8 * v262;
        do
        {
          v265 = *v263++;
          ValueAtEndOfBlockInternal = llvm::SSAUpdater::GetValueAtEndOfBlockInternal((llvm::SSAUpdater *)v475, v265);
          sub_1C5276870((uint64_t)v207, (uint64_t)v265, (uint64_t)ValueAtEndOfBlockInternal);
          v264 -= 8;
        }
        while (v264);
      }
      v446 = 4;
      v447 = 0;
      v448 = (int32x2_t ****)v207;
      v170 = v439;
      if (v207 != (llvm::UndefValue **)-8192 && v207 != (llvm::UndefValue **)-4096 && v207)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v446);
      v267 = (_QWORD *)sub_1C4EE497C(v433, (unint64_t)&v446, 1);
      v268 = *(_DWORD *)(v439 + 248);
      v269 = (unint64_t *)(*(_QWORD *)(v439 + 240) + 24 * v268);
      *v269 = 4;
      v269[1] = 0;
      v270 = (unint64_t)(v269 + 1);
      v271 = v267[2];
      v269[2] = v271;
      if (v271 != -8192 && v271 != -4096 && v271 != 0)
      {
        v273 = *v267 & 0xFFFFFFFFFFFFFFF8;
        v269[1] = *(_QWORD *)v273;
        *(_QWORD *)v273 = v269;
        *v269 = v273 | 4;
        v274 = (uint64_t *)v269[1];
        if (v274)
          *v274 = *v274 & 7 | v270;
      }
      *(_DWORD *)(v439 + 248) = v268 + 1;
      if (v448 != (int32x2_t ****)-8192 && v448 != (int32x2_t ****)-4096 && v448)
      {
        v275 = v446 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v446 & 0xFFFFFFFFFFFFFFF8) = v447;
        if (v447)
        {
          *v447 = *v447 & 7 | v275;
        }
        else
        {
          v276 = v448;
          v277 = ***v448;
          v278 = (unint64_t)v277[303];
          if (v278 <= v275)
          {
            v279 = v277[305].u32[0];
            if (v278 + 16 * v279 > v275)
            {
              v280 = v279 - 1;
              LODWORD(v281) = v280 & ((v448 >> 4) ^ (v448 >> 9));
              v282 = (int32x2_t *****)(v278 + 16 * v281);
              v283 = *v282;
              if (v448 == *v282)
              {
LABEL_440:
                *v282 = (int32x2_t ****)-8192;
                v277[304] = vadd_s32(v277[304], (int32x2_t)0x1FFFFFFFFLL);
                v276 = v448;
              }
              else
              {
                v284 = 1;
                while (v283 != (int32x2_t ****)-4096)
                {
                  v285 = v281 + v284++;
                  v281 = v285 & v280;
                  v283 = *(int32x2_t *****)(v278 + 16 * v281);
                  if (v448 == v283)
                  {
                    v282 = (int32x2_t *****)(v278 + 16 * v281);
                    goto LABEL_440;
                  }
                }
              }
              *((_BYTE *)v276 + 17) &= ~1u;
            }
          }
        }
      }
      v206 += 56;
    }
    while (v206 != v435);
    v203 = v441[0];
LABEL_449:
    sub_1C632870C(v430, (uint64_t)v203);
    v199 = v428;
LABEL_450:
    v200 += 11;
  }
  while (v200 != v199);
  v202 = (char *)v457;
  v201 = v458;
LABEL_452:
  sub_1C631EA34(v433, v202, &v202[8 * v201]);
  llvm::SSAUpdater::~SSAUpdater(v475);
  if (v457 != (llvm::Value *)&v459)
    free(v457);
  v457 = (llvm::Value *)&v459;
  v458 = 0x600000000;
  v288 = *(_QWORD **)(v170 + 520);
  v289 = *(unsigned int *)(v170 + 536);
  v290 = &v288[4 * v289];
  if (*(_DWORD *)(v170 + 528))
  {
    if ((_DWORD)v289)
    {
      v291 = 32 * v289;
      while ((*v288 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v288 += 4;
        v291 -= 32;
        if (!v291)
          goto LABEL_459;
      }
    }
  }
  else
  {
LABEL_459:
    v288 = v290;
  }
  v292 = *(_QWORD **)(v170 + 648);
  v293 = *(unsigned int *)(v170 + 664);
  v294 = &v292[4 * v293];
  if (*(_DWORD *)(v170 + 656))
  {
    if ((_DWORD)v293)
    {
      v295 = 32 * v293;
      while ((*v292 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v292 += 4;
        v295 -= 32;
        if (!v295)
          goto LABEL_465;
      }
    }
  }
  else
  {
LABEL_465:
    v292 = v294;
  }
  v475[0] = v288;
  v475[1] = v290;
  v475[2] = v292;
  v475[3] = v294;
  v475[4] = v290;
  v476 = (void **)v290;
  v477 = v294;
  v478 = v294;
  v438 = v294;
  while (2)
  {
    if (v288 != v290 || v292 != v294 || (v475[4] == v290 ? (v296 = v477 == v294) : (v296 = 0), !v296))
    {
      v297 = 0;
      do
      {
        v298 = (*(uint64_t (**)(void **))((char *)&off_1E8197CB8 + v297))(v475);
        if (v298)
          v299 = 1;
        else
          v299 = v297 == 16;
        v297 += 16;
      }
      while (!v299);
      v300 = *(_QWORD *)(v298 + 8);
      v301 = *(unsigned int *)(v298 + 24);
      v302 = v300 + 16 * v301;
      if (*(_DWORD *)(v298 + 16))
      {
        if (*(_DWORD *)(v298 + 24))
        {
          v303 = 16 * v301;
          v304 = *(_QWORD *)(v298 + 8);
          while ((*(_QWORD *)v304 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v304 += 16;
            v303 -= 16;
            if (!v303)
              goto LABEL_484;
          }
        }
        else
        {
          v304 = *(_QWORD *)(v298 + 8);
        }
      }
      else
      {
LABEL_484:
        v304 = v300 + 16 * v301;
      }
      v305 = v300 + 16 * v301;
LABEL_487:
      if (v304 == v305)
      {
        v322 = 0;
        do
        {
          if (((*(uint64_t (**)(void **))((char *)&off_1E8197CD8 + v322))(v475) & 1) != 0)
            break;
          v23 = v322 == 16;
          v322 += 16;
        }
        while (!v23);
        v288 = v475[0];
        v292 = v475[2];
        v294 = v438;
        continue;
      }
      v441[0] = 0;
      v306 = *(_QWORD *)(v304 + 8);
      v446 = (uint64_t)v441;
      v307 = *(unsigned __int8 *)(v306 + 16);
      if (v307 != 5)
      {
        if (v307 != 58)
          goto LABEL_515;
        v308 = *(_QWORD *)(v306 - 64);
        v309 = *(_QWORD *)(v308 + 8);
        if (!v309
          || *(_QWORD *)(v309 + 8)
          || *(unsigned __int8 *)(v308 + 16) < 0x1Cu
          || (v441[0] = *(llvm::Value **)(v306 - 64),
              (sub_1C4D9ED34((uint64_t)&v447, *(llvm::Constant **)(v306 - 32)) & 1) == 0))
        {
          v310 = *(_QWORD *)(v306 - 32);
          v311 = *(_QWORD *)(v310 + 8);
          if (!v311)
            goto LABEL_515;
          if (*(_QWORD *)(v311 + 8))
            goto LABEL_515;
          if (*(unsigned __int8 *)(v310 + 16) < 0x1Cu)
            goto LABEL_515;
          *(_QWORD *)v446 = v310;
          if ((sub_1C4D9ED34((uint64_t)&v447, *(llvm::Constant **)(v306 - 64)) & 1) == 0)
            goto LABEL_515;
        }
        goto LABEL_509;
      }
      if (*(_WORD *)(v306 + 18) != 30)
        goto LABEL_515;
      v312 = *(_DWORD *)(v306 + 20) & 0x7FFFFFF;
      v313 = -v312;
      v314 = *(_QWORD *)(v306 - 32 * v312);
      v315 = *(_QWORD *)(v314 + 8);
      if (!v315 || *(_QWORD *)(v315 + 8) || *(unsigned __int8 *)(v314 + 16) < 0x1Cu)
      {
LABEL_505:
        v316 = *(_QWORD *)(v306 + 32 * v313 + 32);
        v317 = *(_QWORD *)(v316 + 8);
        if (!v317)
          goto LABEL_515;
        if (*(_QWORD *)(v317 + 8))
          goto LABEL_515;
        if (*(unsigned __int8 *)(v316 + 16) < 0x1Cu)
          goto LABEL_515;
        *(_QWORD *)v446 = v316;
        if (!sub_1C4D9EED4((uint64_t)&v447, *(llvm::Constant **)(v306 - 32 * (*(_DWORD *)(v306 + 20) & 0x7FFFFFF))))goto LABEL_515;
      }
      else
      {
        v441[0] = (llvm::Value *)v314;
        if ((sub_1C4D9EED4((uint64_t)&v447, *(llvm::Constant **)(v306 - 32 * (*(_DWORD *)(v306 + 20) & 0x7FFFFFF) + 32)) & 1) == 0)
        {
          v313 = -(uint64_t)(*(_DWORD *)(v306 + 20) & 0x7FFFFFF);
          goto LABEL_505;
        }
      }
LABEL_509:
      if (*(_QWORD *)(*(_QWORD *)(v304 + 8) + 8))
      {
        v318 = v441[0];
        if (v441[0])
        {
          if (*((unsigned __int8 *)v441[0] + 16) - 83 >= 0xFFFFFFFE)
          {
            *((_WORD *)v441[0] + 9) = word_1C866ADA8[*((_WORD *)v441[0] + 9) & 0x3FLL] | *((_WORD *)v441[0] + 9) & 0xFFC0;
            llvm::Value::doRAUW(*(llvm::ValueAsMetadata **)(v304 + 8), v318, (llvm::Value *)1);
            v319 = *(_QWORD *)(v304 + 8);
            v320 = v458;
            if (v458 >= (unint64_t)HIDWORD(v458))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v457, (uint64_t)&v459, v458 + 1, 8);
              v320 = v458;
            }
            *((_QWORD *)v457 + v320) = v319;
            LODWORD(v458) = v458 + 1;
          }
        }
      }
LABEL_515:
      v321 = v304 + 16;
      v304 = v302;
      if (v321 != v302)
      {
        v304 = v321;
        while ((*(_QWORD *)v304 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v304 += 16;
          if (v304 == v302)
          {
            v304 = v302;
            goto LABEL_487;
          }
        }
      }
      goto LABEL_487;
    }
    break;
  }
  v323 = v457;
  if ((_DWORD)v458)
  {
    v324 = 8 * v458;
    do
    {
      v325 = *(_QWORD *)v323;
      v323 = (llvm::Value *)((char *)v323 + 8);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v325 + 40) + 40, (uint64_t ***)v325);
      v326 = *(_QWORD *)(v325 + 24);
      v327 = *(_QWORD **)(v325 + 32);
      *v327 = v326;
      *(_QWORD *)(v326 + 8) = v327;
      *(_QWORD *)(v325 + 24) = 0;
      *(_QWORD *)(v325 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v325);
      v324 -= 8;
    }
    while (v324);
    v323 = v457;
  }
  if (v323 != (llvm::Value *)&v459)
    free(v323);
  while (2)
  {
    v475[0] = (void *)(*(_QWORD *)(*(_QWORD *)(v439 + 32) + 40) + 272);
    memset(&v475[1], 0, 32);
    LOWORD(v476) = 257;
    v475[2] = *(void **)(v439 + 56);
    v328 = *(_DWORD *)(v439 + 248);
    if (!v328)
      break;
    v329 = 0;
    v330 = *(_QWORD **)(v439 + 240);
    v331 = &v330[3 * v328];
    while (2)
    {
      v446 = 4;
      v447 = 0;
      v332 = (int32x2_t ****)v330[2];
      v448 = v332;
      if (v332 == (int32x2_t ****)-8192
        || (v332 != (int32x2_t ****)-4096 ? (v333 = v332 == 0) : (v333 = 1), v333))
      {
        if (!v332)
          goto LABEL_557;
LABEL_540:
        if (*((_BYTE *)v332 + 16) != 83)
          goto LABEL_557;
        v334 = *((_DWORD *)v332 + 5);
        if ((v334 & 0x40000000) != 0)
        {
          v336 = (int32x2_t ****)*(v332 - 1);
          v335 = v334 & 0x7FFFFFF;
        }
        else
        {
          v335 = v334 & 0x7FFFFFF;
          v336 = &v332[-4 * v335];
        }
        v457 = (llvm::Value *)&v459;
        v458 = 0x800000000;
        if (v335 >= 9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v457, (uint64_t)&v459, v335, 8);
          v337 = v458;
          v339 = v457;
          v338 = v458;
        }
        else
        {
          v337 = 0;
          if (!v335)
          {
            v343 = (llvm::Value *)&v459;
            goto LABEL_554;
          }
          v338 = 0;
          v339 = (llvm::Value *)&v459;
        }
        v340 = 32 * v335;
        v341 = (int32x2_t ****)((char *)v339 + 8 * v338);
        do
        {
          v342 = *v336;
          v336 += 4;
          *v341++ = v342;
          v340 -= 32;
        }
        while (v340);
        v343 = v457;
LABEL_554:
        LODWORD(v458) = v337 + v335;
        v345 = llvm::SimplifyInstructionWithOperands((llvm *)v332, (uint64_t)v343, (v337 + v335), (uint64_t)v475, v286, v287);
        if (v457 == (llvm::Value *)&v459)
        {
          if (!v345)
            goto LABEL_557;
        }
        else
        {
          free(v457);
          if (!v345)
            goto LABEL_557;
        }
        v329 = 1;
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v332, v345, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v332[5] + 5), (uint64_t ***)v332);
        v346 = v332[3];
        v347 = v332[4];
        *v347 = (int32x2_t **)v346;
        v346[1] = (int32x2_t **)v347;
        v332[3] = 0;
        v332[4] = 0;
        llvm::Value::deleteValue((llvm::Value *)v332);
        goto LABEL_557;
      }
      v344 = *v330 & 0xFFFFFFFFFFFFFFF8;
      v447 = *(unint64_t **)v344;
      *(_QWORD *)v344 = &v446;
      v446 = v344 | 4;
      if (v447)
        *v447 = *v447 & 7 | (unint64_t)&v447;
      v332 = v448;
      if (v448)
        goto LABEL_540;
LABEL_557:
      if (v448 != (int32x2_t ****)-8192 && v448 != (int32x2_t ****)-4096 && v448 != 0)
      {
        v349 = v446 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v446 & 0xFFFFFFFFFFFFFFF8) = v447;
        if (v447)
        {
          *v447 = *v447 & 7 | v349;
        }
        else
        {
          v350 = v448;
          v351 = ***v448;
          v352 = (unint64_t)v351[303];
          if (v352 <= v349)
          {
            v353 = v351[305].u32[0];
            if (v352 + 16 * v353 > v349)
            {
              v354 = v353 - 1;
              LODWORD(v355) = v354 & ((v448 >> 4) ^ (v448 >> 9));
              v356 = (int32x2_t *****)(v352 + 16 * v355);
              v357 = *v356;
              if (v448 == *v356)
              {
LABEL_573:
                *v356 = (int32x2_t ****)-8192;
                v351[304] = vadd_s32(v351[304], (int32x2_t)0x1FFFFFFFFLL);
                v350 = v448;
              }
              else
              {
                v358 = 1;
                while (v357 != (int32x2_t ****)-4096)
                {
                  v359 = v355 + v358++;
                  v355 = v359 & v354;
                  v357 = *(int32x2_t *****)(v352 + 16 * v355);
                  if (v448 == v357)
                  {
                    v356 = (int32x2_t *****)(v352 + 16 * v355);
                    goto LABEL_573;
                  }
                }
              }
              *((_BYTE *)v350 + 17) &= ~1u;
            }
          }
        }
      }
      v330 += 3;
      if (v330 != v331)
        continue;
      break;
    }
    if ((v329 & 1) != 0)
      continue;
    break;
  }
  memset(v442, 0, 32);
  *(_OWORD *)v441 = 0u;
  v360 = v439;
  llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::blocks(*(_QWORD **)(v439 + 40), &v457);
  v361 = &v475[4];
  v475[0] = &v475[4];
  v362 = (const void *)v458;
  if ((llvm::Value *)v458 == v457)
  {
    v475[1] = &v475[4];
    v363 = (void *)v458;
    v364 = (unsigned int *)v431;
    goto LABEL_583;
  }
  v413 = v459;
  v361 = (void **)malloc_type_malloc(8 * v459, 0x4065EBACuLL);
  v364 = (unsigned int *)v431;
  if (!v361)
  {
    if (v413
      || (v361 = (void **)malloc_type_malloc(1uLL, 0x4065EBACuLL), v360 = v439, v364 = (unsigned int *)v431, !v361))
    {
LABEL_707:
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
  }
  v475[1] = v361;
  v363 = v457;
  v362 = (const void *)v458;
LABEL_583:
  v365 = HIDWORD(v459);
  LODWORD(v475[2]) = v459;
  if (v362 == v363)
    v366 = HIDWORD(v459);
  else
    v366 = v459;
  if (v366)
  {
    memmove(v361, v362, 8 * v366);
    v365 = HIDWORD(v459);
  }
  HIDWORD(v475[2]) = v365;
  LODWORD(v475[3]) = v460;
  v480 = 0;
  v481 = 0;
  v479 = 0;
  sub_1C4E19D7C(&v479, v465, v466, (v466 - v465) >> 5);
  v367 = (unint64_t *)v450;
  v446 = (uint64_t)v450;
  v368 = v469;
  if (v469 == v468)
  {
    v447 = (unint64_t *)v450;
    v369 = v469;
  }
  else
  {
    v414 = v470;
    v367 = (unint64_t *)malloc_type_malloc(8 * v470, 0x4065EBACuLL);
    if (!v367)
    {
      if (v414)
        goto LABEL_707;
      v367 = (unint64_t *)malloc_type_malloc(1uLL, 0x4065EBACuLL);
      v360 = v439;
      v364 = (unsigned int *)v431;
      if (!v367)
        goto LABEL_707;
    }
    v447 = v367;
    v369 = v468;
    v368 = v469;
  }
  v370 = v471;
  LODWORD(v448) = v470;
  if (v368 == v369)
    v371 = v471;
  else
    v371 = v470;
  if (v371)
  {
    memmove(v367, v368, 8 * v371);
    v370 = v471;
  }
  HIDWORD(v448) = v370;
  v449 = v472;
  v452 = 0;
  v453 = 0;
  v451 = 0;
  sub_1C4E19D7C(&v451, v473, v474, (v474 - v473) >> 5);
  while (2)
  {
    if (v480 - v479 != v452 - v451)
    {
LABEL_610:
      v377 = *((_QWORD *)v480 - 4);
      v378 = *(_QWORD *)(v377 + 48);
      if (v378 != v377 + 40)
      {
        v379 = (v377 >> 4) ^ (v377 >> 9);
        while (1)
        {
          v380 = v378 ? v378 - 24 : 0;
          v381 = *(llvm::Use **)(v380 + 8);
          if (v381)
            break;
LABEL_665:
          v378 = *(_QWORD *)(v378 + 8);
          if (v378 == v377 + 40)
            goto LABEL_666;
        }
        v382 = 0;
        while (2)
        {
          v383 = v381;
          v381 = (llvm::Use *)*((_QWORD *)v381 + 1);
          v384 = *((_QWORD *)v383 + 3);
          if (*(_QWORD *)(v384 + 40) != v377)
          {
            if (*(_BYTE *)(v384 + 16) != 83
              || ((v385 = *(_DWORD *)(v384 + 20), (v385 & 0x40000000) != 0)
                ? (v386 = *(_QWORD *)(v384 - 8))
                : (v386 = v384 - 32 * (v385 & 0x7FFFFFF)),
                  *(_QWORD *)(v386
                            + 32 * *(unsigned int *)(v384 + 60)
                            + 8 * (((unint64_t)v383 - v386) >> 5)) != v377))
            {
              if (!llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(v439 + 56), (const llvm::Value *)v380, (const llvm::Instruction *)v384))
              {
                if ((v382 & 1) == 0)
                {
                  v388 = llvm::UndefValue::get(*(llvm::UndefValue **)v380, v387);
                  llvm::SSAUpdater::Initialize((uint64_t)v441, *(_QWORD *)v380, "", 0);
                  v389 = *(_QWORD *)(*(_QWORD *)(v439 + 32) + 80);
                  if (v389)
                    v390 = v389 - 24;
                  else
                    v390 = 0;
                  v454 = v390;
                  v391 = v441[0];
                  v392 = *((_DWORD *)v441[0] + 4);
                  if (!v392)
                  {
                    v401 = 0;
                    goto LABEL_642;
                  }
                  v393 = v392 - 1;
                  v394 = (v392 - 1) & ((v390 >> 4) ^ (v390 >> 9));
                  v395 = (_QWORD *)(*(_QWORD *)v441[0] + 16 * v394);
                  v396 = *v395;
                  if (*v395 == v390)
                  {
                    v395[1] = v388;
                    v454 = v377;
                    goto LABEL_644;
                  }
                  v397 = 0;
                  v398 = 1;
                  while (v396 != -4096)
                  {
                    if (v397)
                      v399 = 0;
                    else
                      v399 = v396 == -8192;
                    if (v399)
                      v397 = v395;
                    v400 = v394 + v398++;
                    v394 = v400 & v393;
                    v395 = (_QWORD *)(*(_QWORD *)v441[0] + 16 * (v400 & v393));
                    v396 = *v395;
                    if (*v395 == v390)
                      goto LABEL_643;
                  }
                  if (v397)
                    v401 = v397;
                  else
                    v401 = v395;
LABEL_642:
                  v395 = sub_1C4ECCA58((uint64_t)v441[0], (uint64_t)&v454, &v454, v401);
                  *v395 = v454;
                  v395[1] = 0;
                  v391 = v441[0];
                  v392 = *((_DWORD *)v441[0] + 4);
LABEL_643:
                  v395[1] = v388;
                  v454 = v377;
                  if (!v392)
                  {
                    v410 = 0;
                    goto LABEL_657;
                  }
LABEL_644:
                  v402 = v392 - 1;
                  v403 = v402 & v379;
                  v404 = (_QWORD *)(*(_QWORD *)v391 + 16 * (v402 & v379));
                  v405 = *v404;
                  if (*v404 != v377)
                  {
                    v406 = 0;
                    v407 = 1;
                    while (v405 != -4096)
                    {
                      if (v406)
                        v408 = 0;
                      else
                        v408 = v405 == -8192;
                      if (v408)
                        v406 = v404;
                      v409 = v403 + v407++;
                      v403 = v409 & v402;
                      v404 = (_QWORD *)(*(_QWORD *)v391 + 16 * (v409 & v402));
                      v405 = *v404;
                      if (*v404 == v377)
                        goto LABEL_658;
                    }
                    if (v406)
                      v410 = v406;
                    else
                      v410 = v404;
LABEL_657:
                    v404 = sub_1C4ECCA58((uint64_t)v391, (uint64_t)&v454, &v454, v410);
                    *v404 = v454;
                    v404[1] = 0;
                  }
LABEL_658:
                  v404[1] = v380;
                }
                llvm::SSAUpdater::RewriteUseAfterInsertions((llvm::SSAUpdater *)v441, v383);
                v382 = 1;
              }
            }
          }
          if (!v381)
            goto LABEL_665;
          continue;
        }
      }
LABEL_666:
      sub_1C4EFD8A4((llvm::SmallPtrSetImplBase *)v475);
      v360 = v439;
      v364 = (unsigned int *)v431;
      continue;
    }
    break;
  }
  if (v479 != v480)
  {
    v372 = v451 + 16;
    v373 = v479 + 16;
    do
    {
      v374 = v373 - 16;
      if (*((_QWORD *)v373 - 2) != *((_QWORD *)v372 - 2))
        goto LABEL_610;
      v375 = v372[8];
      if (v373[8])
        v376 = v375 == 0;
      else
        v376 = 1;
      if (v376)
      {
        if ((v373[8] == 0) == (v375 != 0))
          goto LABEL_610;
      }
      else if (*(_DWORD *)v373 != *(_DWORD *)v372)
      {
        goto LABEL_610;
      }
      v372 += 32;
      v373 += 32;
    }
    while (v374 + 32 != v480);
  }
  if (v451)
  {
    v452 = v451;
    operator delete(v451);
  }
  if (v447 != (unint64_t *)v446)
    free(v447);
  if (v479)
  {
    v480 = v479;
    operator delete(v479);
  }
  if (v475[1] != v475[0])
    free(v475[1]);
  if (v473)
  {
    v474 = v473;
    operator delete(v473);
  }
  if (v469 != v468)
    free(v469);
  if (v465)
  {
    v466 = v465;
    operator delete(v465);
  }
  if ((llvm::Value *)v458 != v457)
    free((void *)v458);
  llvm::SSAUpdater::~SSAUpdater((void **)v441);
  *(_DWORD *)(v360 + 72) = 0;
  v411 = *(void **)(v360 + 152);
  if (v411 == *(void **)(v360 + 144))
  {
LABEL_684:
    *(_DWORD *)(v360 + 164) = 0;
    *(_DWORD *)(v360 + 168) = 0;
    goto LABEL_685;
  }
  v412 = *(unsigned int *)(v360 + 160);
  if (v412 < 0x21 || 4 * (*(_DWORD *)(v360 + 164) - *(_DWORD *)(v360 + 168)) >= v412)
  {
    memset(v411, 255, 8 * v412);
    goto LABEL_684;
  }
  free(v411);
  v415 = *(_DWORD *)(v360 + 164) - *(_DWORD *)(v360 + 168);
  v416 = 1 << (33 - __clz(v415 - 1));
  *(_DWORD *)(v360 + 164) = 0;
  *(_DWORD *)(v360 + 168) = 0;
  if (v415 <= 0x10)
    v417 = 32;
  else
    v417 = v416;
  *(_DWORD *)(v360 + 160) = v417;
  v418 = malloc_type_malloc(8 * v417, 0x4065EBACuLL);
  if (!v418)
    goto LABEL_707;
  *(_QWORD *)(v360 + 152) = v418;
  memset(v418, 255, 8 * *(unsigned int *)(v360 + 160));
LABEL_685:
  sub_1C6327EB8(v430);
  sub_1C6327F5C(v439 + 472);
  sub_1C6327FB0(v424);
  *(_DWORD *)(v360 + 552) = 0;
  sub_1C61446F0(v364);
  sub_1C6327FB0(v423);
  *(_DWORD *)(v360 + 680) = 0;
  v3 = v421;
  return v3 != 0;
}

uint64_t sub_1C5C52324(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v2 = *(void **)(a1 + 672);
  if (v2 != (void *)(a1 + 688))
    free(v2);
  sub_1C54E61C4(a1 + 648);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 648), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 624), 8);
  v3 = *(void **)(a1 + 544);
  if (v3 != (void *)(a1 + 560))
    free(v3);
  sub_1C54E61C4(a1 + 520);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 520), 8);
  sub_1C62EA8E4(a1 + 472);
  v4 = *(unsigned int *)(a1 + 464);
  v5 = *(_QWORD *)(a1 + 448);
  if ((_DWORD)v4)
  {
    v6 = v5 + 8;
    v7 = 56 * v4;
    do
    {
      if ((*(_QWORD *)(v6 - 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
        v6 = sub_1C61F7CF0(v6);
      v6 += 56;
      v7 -= 56;
    }
    while (v7);
    v5 = *(_QWORD *)(a1 + 448);
  }
  MEMORY[0x1CAA32FB4](v5, 8);
  sub_1C4EE4F14((char **)(a1 + 240));
  v8 = *(void **)(a1 + 152);
  if (v8 != *(void **)(a1 + 144))
    free(v8);
  v9 = *(void **)(a1 + 64);
  if (v9 != (void *)(a1 + 80))
    free(v9);
  return a1;
}

uint64_t sub_1C5C52420()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5C4F968(v0, 0);
}

void sub_1C5C52450(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5C52474()
{
  return "Structurize control flow";
}

void *sub_1C5C52484(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 28))
    sub_1C4771E64(a2, a2, (uint64_t)&llvm::LegacyDivergenceAnalysis::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&unk_1EF8F7658);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
}

BOOL sub_1C5C524F4(uint64_t a1, uint64_t a2, const llvm::APInt *a3)
{
  void **v5;
  void *v6;
  uint64_t v7;
  char **v8;
  char *v9;
  uint64_t v10;
  _BOOL8 v11;
  llvm::LegacyDivergenceAnalysis *v13;
  _BYTE *v14;
  void *v15;
  void *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int8 *v19;
  void *v20;
  void *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  BOOL v39;
  const void *v40;
  _BYTE *v41;
  void *v42;
  unsigned int v43;
  unsigned int v44;
  const void *v45;
  _BYTE *v46;
  void *v47;
  unsigned int v48;
  _BYTE *v49;
  uint64_t v50;
  char *v51;
  int v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  int v69;
  BOOL v70;
  unsigned int v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  unsigned __int8 *Impl;
  _BYTE *v82;
  void *v83;
  void *v84;
  unsigned int v85;
  unsigned int v86;
  _BYTE *v87;
  void *v88;
  void *v89;
  unsigned int v90;
  unsigned int v91;
  char *v92;
  _DWORD *v93;
  int v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  int v101;
  unsigned __int8 **v102;
  unsigned __int8 *v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int MDKindID;
  _BYTE *v109;
  _BYTE v110[64];
  char *v111;
  _BYTE *v112;
  uint64_t v113;
  _BYTE *v114;
  _BYTE *v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  _BYTE v119[64];
  void *__p;
  char *v121;
  uint64_t v122;
  _BYTE *v123;
  _BYTE *v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  _BYTE v128[64];
  void *v129;
  char *v130;
  uint64_t v131;
  void *v132;
  void *v133;
  unsigned int v134;
  unsigned int v135;
  void *v136;
  _BYTE *v137;
  unsigned __int8 *v138;
  unsigned __int8 *v139;
  unsigned int v140;
  unsigned int v141;
  int v142;
  _BYTE v143[64];
  void *v144;
  _BYTE *v145;
  uint64_t v146;
  _BYTE *v147;
  void *v148;
  unsigned int v149;
  unsigned int v150;
  int v151;
  _BYTE v152[64];
  void *v153;
  char *v154;
  uint64_t v155;
  void *v156;
  void *__src;
  unsigned int v158;
  unsigned int v159;
  int v160;
  void *v161;
  _BYTE *v162;
  void *v163;
  void *v164;
  unsigned int v165;
  unsigned int v166;
  int v167;
  void *v168;
  _BYTE *v169;
  uint64_t v170;
  _QWORD v171[6];
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  _QWORD v175[11];
  int v176;
  _QWORD v177[10];
  _OWORD v178[13];
  int v179;
  __int128 v180;
  int v181;
  __int128 v182;
  _BYTE v183[28];
  _OWORD *v184;
  uint64_t v185;
  _OWORD v186[5];
  int v187;
  __int128 v188;
  int v189;
  _QWORD *v190;
  uint64_t v191;
  _QWORD v192[11];

  v192[9] = *MEMORY[0x1E0C80C00];
  v172 = 0;
  v173 = v175;
  v174 = 0x800000000;
  v175[8] = v177;
  v175[9] = v177;
  v175[10] = 8;
  v176 = 0;
  v177[8] = v178;
  v177[9] = 0x800000000;
  v178[12] = 0u;
  v179 = 0;
  v180 = 0u;
  v181 = 0;
  v182 = 0u;
  memset(v183, 0, sizeof(v183));
  v184 = v186;
  v185 = 0x800000000;
  v187 = 0;
  v186[4] = 0u;
  v188 = 0u;
  v189 = 0;
  v190 = v192;
  v191 = 0x800000000;
  sub_1C5C4FD9C((uint64_t)v171, *(llvm::Type **)a2, a3);
  if (!*(_BYTE *)(a1 + 28))
    goto LABEL_5;
  v5 = **(void ****)(a1 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::LegacyDivergenceAnalysis::ID);
  v7 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::LegacyDivergenceAnalysis::ID);
  if (!*(_QWORD *)(a2 + 32))
  {
LABEL_5:
    v8 = **(char ****)(a1 + 8);
    do
    {
      v9 = *v8;
      v8 += 2;
    }
    while (v9 != llvm::DominatorTreeWrapperPass::ID);
    v10 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), llvm::DominatorTreeWrapperPass::ID);
    v11 = sub_1C5C4FF28(v171, (_QWORD *)a2, v10 + 32);
    goto LABEL_8;
  }
  v13 = (llvm::LegacyDivergenceAnalysis *)v7;
  v172 = v7;
  MDKindID = llvm::LLVMContext::getMDKindID(**(uint64_t ***)(*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8), "structurizecfg.uniform", 0x16uLL);
  llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::elements((_QWORD *)a2, &v156);
  v14 = v152;
  v147 = v152;
  v15 = __src;
  if (__src == v156)
  {
    v148 = v152;
    v16 = __src;
  }
  else
  {
    v104 = v158;
    v14 = malloc_type_malloc(8 * v158, 0x4065EBACuLL);
    if (!v14)
    {
      if (v104)
        goto LABEL_271;
      v14 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v14)
        goto LABEL_271;
    }
    v148 = v14;
    v16 = v156;
    v15 = __src;
  }
  v17 = v159;
  v149 = v158;
  if (v15 == v16)
    v18 = v159;
  else
    v18 = v158;
  if (v18)
  {
    memmove(v14, v15, 8 * v18);
    v17 = v159;
  }
  v150 = v17;
  v151 = v160;
  v155 = 0;
  v153 = 0;
  v154 = 0;
  sub_1C4EFB920(&v153, v161, v162, 0xCCCCCCCCCCCCCCCDLL * ((v162 - (_BYTE *)v161) >> 3));
  v19 = v143;
  v138 = v143;
  v20 = v164;
  if (v164 == v163)
  {
    v139 = v143;
    v21 = v164;
  }
  else
  {
    v105 = v165;
    v19 = (unsigned __int8 *)malloc_type_malloc(8 * v165, 0x4065EBACuLL);
    if (!v19)
    {
      if (v105)
        goto LABEL_271;
      v19 = (unsigned __int8 *)malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v19)
        goto LABEL_271;
    }
    v139 = v19;
    v21 = v163;
    v20 = v164;
  }
  v22 = v166;
  v140 = v165;
  if (v20 == v21)
    v23 = v166;
  else
    v23 = v165;
  if (v23)
  {
    memmove(v19, v20, 8 * v23);
    v22 = v166;
  }
  v141 = v22;
  v142 = v167;
  v146 = 0;
  v144 = 0;
  v145 = 0;
  sub_1C4EFB920(&v144, v168, v169, 0xCCCCCCCCCCCCCCCDLL * ((v169 - (_BYTE *)v168) >> 3));
  v24 = 0;
  v25 = 1;
  while (2)
  {
    v26 = v144;
    if (v154 - (_BYTE *)v153 == v145 - (_BYTE *)v144)
    {
      if (v153 == v154)
      {
        v80 = 1;
        goto LABEL_250;
      }
      v27 = 0;
      do
      {
        v28 = (char *)v144 + v27;
        v29 = (char *)v153 + v27;
        if (*(_QWORD *)((char *)v153 + v27) != *(_QWORD *)((char *)v144 + v27))
          goto LABEL_41;
        v30 = v28[32];
        if (v29[32])
          v31 = v30 == 0;
        else
          v31 = 1;
        if (v31)
        {
          if ((v29[32] == 0) == (v30 != 0))
            goto LABEL_41;
        }
        else
        {
          v32 = *(_QWORD *)((char *)v153 + v27 + 8);
          if ((v32 & 6) != 0)
          {
            if (((*((_DWORD *)v28 + 2) ^ v32) & 6) != 0)
              goto LABEL_41;
          }
          else if (*(_DWORD *)((char *)v153 + v27 + 24) != *(_DWORD *)((char *)v144 + v27 + 24))
          {
            goto LABEL_41;
          }
        }
        v27 += 40;
      }
      while (v29 + 40 != v154);
      v80 = 1;
      if (!v144)
        goto LABEL_162;
LABEL_161:
      v145 = v26;
      operator delete(v26);
      goto LABEL_162;
    }
LABEL_41:
    v33 = (_QWORD *)*((_QWORD *)v154 - 5);
    if ((*v33 & 4) == 0)
    {
      v35 = (_QWORD *)((*v33 & 0xFFFFFFFFFFFFFFF8) + 40);
      v34 = (_QWORD *)*v35;
      if ((_QWORD *)*v35 == v35)
        goto LABEL_143;
      v36 = v34 ? (uint64_t)(v34 - 3) : 0;
      v37 = *(unsigned __int8 *)(v36 + 16) - 40;
      v38 = v37 >= 0xFFFFFFF5 ? v36 : 0;
      if (!v34)
        goto LABEL_143;
      v39 = *(_BYTE *)(v38 + 16) == 30 && v37 >= 0xFFFFFFF5;
      if (!v39 || (*(_DWORD *)(v38 + 20) & 0x7FFFFFF) != 3)
        goto LABEL_143;
      if ((llvm::LegacyDivergenceAnalysis::isDivergent(v13, (const llvm::Value *)v38) & 1) == 0)
      {
        ++v24;
        goto LABEL_143;
      }
      break;
    }
    llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::blocks(v33, &v123);
    v114 = v119;
    v40 = v124;
    if (v124 == v123)
    {
      v115 = v119;
      v41 = v119;
      v42 = v124;
    }
    else
    {
      v78 = v125;
      v41 = malloc_type_malloc(8 * v125, 0x4065EBACuLL);
      if (!v41)
      {
        if (v78)
          goto LABEL_271;
        v41 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v41)
          goto LABEL_271;
      }
      v115 = v41;
      v42 = v123;
      v40 = v124;
    }
    v43 = v126;
    v116 = v125;
    if (v40 == v42)
      v44 = v126;
    else
      v44 = v125;
    if (v44)
    {
      memmove(v41, v40, 8 * v44);
      v43 = v126;
    }
    v117 = v43;
    v118 = v127;
    v121 = 0;
    v122 = 0;
    __p = 0;
    sub_1C4E19D7C(&__p, v129, v130, (v130 - (_BYTE *)v129) >> 5);
    v45 = v133;
    if (v133 == v132)
    {
      v109 = v110;
      v46 = v110;
      v47 = v133;
    }
    else
    {
      v79 = v134;
      v46 = malloc_type_malloc(8 * v134, 0x4065EBACuLL);
      if (!v46)
      {
        if (v79)
          goto LABEL_271;
        v46 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v46)
          goto LABEL_271;
      }
      v109 = v46;
      v47 = v132;
      v45 = v133;
    }
    if (v45 == v47)
      v48 = v135;
    else
      v48 = v134;
    if (v48)
      memmove(v46, v45, 8 * v48);
    v112 = 0;
    v113 = 0;
    v111 = 0;
    sub_1C4E19D7C(&v111, v136, v137, (v137 - (_BYTE *)v136) >> 5);
    while (1)
    {
      v49 = v111;
      if (v121 - (_BYTE *)__p == v112 - v111)
      {
        if (__p == v121)
        {
LABEL_126:
          v77 = 6;
          if (!v111)
            goto LABEL_128;
          goto LABEL_127;
        }
        v50 = 0;
        while (1)
        {
          v51 = (char *)__p + v50;
          if (*(_QWORD *)((char *)__p + v50) != *(_QWORD *)&v111[v50])
            break;
          v52 = v111[v50 + 24];
          if (v51[24])
            v53 = v52 == 0;
          else
            v53 = 1;
          if (v53)
          {
            if ((v51[24] == 0) == (v52 != 0))
              break;
          }
          else if (*(_DWORD *)((char *)__p + v50 + 16) != *(_DWORD *)&v111[v50 + 16])
          {
            break;
          }
          v50 += 32;
          if (v51 + 32 == v121)
            goto LABEL_126;
        }
      }
      v54 = *((_QWORD *)v121 - 4);
      v55 = *(_QWORD *)(v54 + 40);
      if (v55 != v54 + 40)
      {
        v56 = v55 - 24;
        if (!v55)
          v56 = 0;
        v57 = *(unsigned __int8 *)(v56 + 16) - 40;
        if (v57 < 0xFFFFFFF5)
          v56 = 0;
        if (v55)
        {
          if (*(_BYTE *)(v56 + 16) == 30 && v57 >= 0xFFFFFFF5)
          {
            v59 = *(_DWORD *)(v56 + 20);
            if ((v59 & 0x7FFFFFF) == 3)
              break;
          }
        }
      }
LABEL_120:
      sub_1C4EFD8A4((llvm::SmallPtrSetImplBase *)&v114);
    }
    v60 = *(_QWORD *)(v56 + 48);
    if ((v59 & 0x20000000) == 0 && !v60)
      goto LABEL_145;
    if (MDKindID)
    {
      if ((v59 & 0x20000000) == 0)
        goto LABEL_144;
      v61 = ***(_QWORD ***)v56;
      v170 = v56;
      v62 = *(_DWORD *)(v61 + 2496);
      if (!v62)
      {
        v75 = 0;
        goto LABEL_124;
      }
      v63 = *(_QWORD *)(v61 + 2480);
      v64 = v62 - 1;
      v65 = v64 & ((v56 >> 4) ^ (v56 >> 9));
      v66 = (_QWORD *)(v63 + 40 * v65);
      v67 = *v66;
      if (*v66 != v56)
      {
        v68 = 0;
        v69 = 1;
        while (v67 != -4096)
        {
          if (v68)
            v70 = 0;
          else
            v70 = v67 == -8192;
          if (v70)
            v68 = v66;
          v71 = v65 + v69++;
          v65 = v71 & v64;
          v66 = (_QWORD *)(v63 + 40 * v65);
          v67 = *v66;
          if (*v66 == v56)
            goto LABEL_113;
        }
        if (v68)
          v75 = v68;
        else
          v75 = v66;
LABEL_124:
        v66 = sub_1C541AB24(v61 + 2480, (uint64_t)&v170, &v170, v75);
        v76 = v170;
        v66[4] = 0;
        v66[3] = 0;
        *v66 = v76;
        v66[1] = v66 + 3;
        v66[2] = 0x100000000;
      }
LABEL_113:
      v72 = *((unsigned int *)v66 + 4);
      if (!(_DWORD)v72)
        goto LABEL_144;
      v73 = (_QWORD *)(v66[1] + 8);
      v74 = 16 * v72;
      while (*((_DWORD *)v73 - 2) != MDKindID)
      {
        v73 += 2;
        v74 -= 16;
        if (!v74)
          goto LABEL_144;
      }
      v60 = *v73;
    }
    if (v60)
      goto LABEL_120;
LABEL_144:
    v49 = v111;
LABEL_145:
    if (byte_1ED823988)
      v77 = 6;
    else
      v77 = 1;
    v25 = (byte_1ED823988 == 0) & v25;
    if (v49)
    {
LABEL_127:
      v112 = v49;
      operator delete(v49);
    }
LABEL_128:
    if (v109 != v110)
      free(v109);
    if (__p)
    {
      v121 = (char *)__p;
      operator delete(__p);
    }
    if (v115 != v114)
      free(v115);
    if (v136)
    {
      v137 = v136;
      operator delete(v136);
    }
    if (v133 != v132)
      free(v133);
    if (v129)
    {
      v130 = (char *)v129;
      operator delete(v129);
    }
    if (v124 != v123)
      free(v124);
    if (v77 == 6)
    {
LABEL_143:
      sub_1C4EFBFFC((llvm::SmallPtrSetImplBase *)&v147);
      continue;
    }
    break;
  }
  v80 = 0;
LABEL_250:
  v26 = v144;
  if (v144)
    goto LABEL_161;
LABEL_162:
  if (v139 != v138)
    free(v139);
  if (v153)
  {
    v154 = (char *)v153;
    operator delete(v153);
  }
  if (v148 != v147)
    free(v148);
  if (v168)
  {
    v169 = v168;
    operator delete(v168);
  }
  if (v164 != v163)
    free(v164);
  if (v161)
  {
    v162 = v161;
    operator delete(v161);
  }
  if (__src != v156)
    free(__src);
  if ((v80 & (v25 | (v24 < 2))) != 1)
    goto LABEL_5;
  Impl = (unsigned __int8 *)llvm::MDTuple::getImpl(***(uint64_t ****)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 56), 0, 0, 0, 1);
  llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::elements((_QWORD *)a2, &v156);
  v82 = v128;
  v123 = v128;
  v83 = __src;
  if (__src == v156)
  {
    v124 = v128;
    v84 = __src;
    goto LABEL_179;
  }
  v106 = v158;
  v82 = malloc_type_malloc(8 * v158, 0x4065EBACuLL);
  if (!v82 && (v106 || (v82 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_271:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v124 = v82;
  v84 = v156;
  v83 = __src;
LABEL_179:
  v85 = v159;
  v125 = v158;
  if (v83 == v84)
    v86 = v159;
  else
    v86 = v158;
  if (v86)
  {
    memmove(v82, v83, 8 * v86);
    v85 = v159;
  }
  v126 = v85;
  v127 = v160;
  v130 = 0;
  v131 = 0;
  v129 = 0;
  sub_1C4EFB920(&v129, v161, v162, 0xCCCCCCCCCCCCCCCDLL * ((v162 - (_BYTE *)v161) >> 3));
  v87 = v152;
  v147 = v152;
  v88 = v164;
  if (v164 == v163)
  {
    v148 = v152;
    v89 = v164;
  }
  else
  {
    v107 = v165;
    v87 = malloc_type_malloc(8 * v165, 0x4065EBACuLL);
    if (!v87)
    {
      if (v107)
        goto LABEL_271;
      v87 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v87)
        goto LABEL_271;
    }
    v148 = v87;
    v89 = v163;
    v88 = v164;
  }
  v90 = v166;
  v149 = v165;
  if (v88 == v89)
    v91 = v166;
  else
    v91 = v165;
  if (v91)
  {
    memmove(v87, v88, 8 * v91);
    v90 = v166;
  }
  v150 = v90;
  v151 = v167;
  v155 = 0;
  v153 = 0;
  v154 = 0;
  sub_1C4EFB920(&v153, v168, v169, 0xCCCCCCCCCCCCCCCDLL * ((v169 - (_BYTE *)v168) >> 3));
  while (2)
  {
    v92 = (char *)v129;
    if (v130 - (_BYTE *)v129 != v154 - (_BYTE *)v153)
    {
LABEL_209:
      v97 = **((_QWORD **)v130 - 5);
      if ((v97 & 4) != 0)
        goto LABEL_222;
      v99 = (_QWORD *)((v97 & 0xFFFFFFFFFFFFFFF8) + 40);
      v98 = (_QWORD *)*v99;
      if ((_QWORD *)*v99 == v99)
        goto LABEL_222;
      v100 = v98 ? (uint64_t)(v98 - 3) : 0;
      if (*(unsigned __int8 *)(v100 + 16) - 29 > 0xA)
        goto LABEL_222;
      if (Impl)
      {
        v101 = MDKindID;
        if (!MDKindID)
        {
          v138 = Impl;
          llvm::MetadataTracking::track((uint64_t)&v138, Impl, 2);
LABEL_224:
          v102 = (unsigned __int8 **)(v100 + 48);
          if (&v138 == v102)
          {
            if (v138)
              llvm::MetadataTracking::untrack((uint64_t)&v138, v138);
          }
          else
          {
            if (*v102)
              llvm::MetadataTracking::untrack((uint64_t)v102, *v102);
            v103 = v138;
            *v102 = v138;
            if (v103)
              llvm::MetadataTracking::retrack((uint64_t)&v138, v103, (uint64_t)v102);
          }
          goto LABEL_222;
        }
      }
      else
      {
        if (!*(_QWORD *)(v100 + 48) && (*(_BYTE *)(v100 + 23) & 0x20) == 0)
          goto LABEL_222;
        v101 = MDKindID;
        if (!MDKindID)
        {
          v138 = 0;
          goto LABEL_224;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v100, v101, (llvm::MDNode *)Impl);
LABEL_222:
      sub_1C4EFBFFC((llvm::SmallPtrSetImplBase *)&v123);
      continue;
    }
    break;
  }
  if (v129 != v130)
  {
    v93 = v153;
    while (*(_QWORD *)v92 == *(_QWORD *)v93)
    {
      v94 = *((unsigned __int8 *)v93 + 32);
      if (v92[32])
        v95 = v94 == 0;
      else
        v95 = 1;
      if (v95)
      {
        if ((v92[32] == 0) == (v94 != 0))
          goto LABEL_209;
      }
      else
      {
        v96 = *((_QWORD *)v92 + 1);
        if ((v96 & 6) != 0)
        {
          if (((v93[2] ^ v96) & 6) != 0)
            goto LABEL_209;
        }
        else if (*((_DWORD *)v92 + 6) != v93[6])
        {
          goto LABEL_209;
        }
      }
      v92 += 40;
      v93 += 10;
      if (v92 == v130)
        goto LABEL_232;
    }
    goto LABEL_209;
  }
LABEL_232:
  if (v153)
  {
    v154 = (char *)v153;
    operator delete(v153);
  }
  if (v148 != v147)
    free(v148);
  if (v129)
  {
    v130 = (char *)v129;
    operator delete(v129);
  }
  if (v124 != v123)
    free(v124);
  if (v168)
  {
    v169 = v168;
    operator delete(v168);
  }
  if (v164 != v163)
    free(v164);
  if (v161)
  {
    v162 = v161;
    operator delete(v161);
  }
  if (__src != v156)
    free(__src);
  v11 = 0;
LABEL_8:
  sub_1C5C52324((uint64_t)v171);
  return v11;
}

void sub_1C5C53298(uint64_t *a1, int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  int v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  unsigned int v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  int v57;
  BOOL v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t NearestCommonDominator;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  int v69;
  int v70;
  unsigned int v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  int v75;
  BOOL v76;
  unsigned int v77;
  _QWORD *v78;
  llvm::UndefValue *ValueInMiddleOfBlock;
  llvm::UndefValue **v80;
  uint64_t v81;
  llvm::UndefValue ***v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _OWORD v94[3];
  uint64_t v95;

  v2 = a1 + 84;
  v3 = 68;
  if (a2)
    v3 = 84;
  v4 = 2;
  if (a2)
    v4 = 1;
  v5 = a1[v4];
  if (!a2)
    v2 = a1 + 68;
  memset(v94, 0, sizeof(v94));
  v6 = *((unsigned int *)v2 + 2);
  if (!(_DWORD)v6)
    goto LABEL_128;
  v7 = a2;
  v8 = a1;
  v9 = a1[v3];
  v90 = v9 + 8 * v6;
  v85 = (uint64_t)(a1 + 81);
  v86 = (uint64_t)(a1 + 65);
  v87 = v5;
  do
  {
    v10 = *(_QWORD *)v9;
    v11 = *(uint64_t ***)(*(_QWORD *)v9 + 40);
    v12 = *(_QWORD *)(*(_QWORD *)v9 - 32);
    v13 = *(_QWORD *)(*(_QWORD *)v9 - 64);
    v92 = v13;
    v93 = v12;
    llvm::SSAUpdater::Initialize((uint64_t)v94, *v8, "", 0);
    v14 = *(_QWORD *)(v8[4] + 80);
    if (v14)
      v15 = v14 - 24;
    else
      v15 = 0;
    v95 = v15;
    v16 = *(_QWORD **)&v94[0];
    v17 = *(_DWORD *)(*(_QWORD *)&v94[0] + 16);
    if (v17)
    {
      v18 = v17 - 1;
      v19 = (v17 - 1) & ((v15 >> 4) ^ (v15 >> 9));
      v20 = (_QWORD *)(**(_QWORD **)&v94[0] + 16 * v19);
      v21 = *v20;
      if (*v20 == v15)
      {
        v20[1] = v5;
        if (v7)
          v27 = v13;
        else
          v27 = (uint64_t)v11;
        v95 = v27;
        goto LABEL_31;
      }
      v22 = 0;
      v23 = 1;
      while (v21 != -4096)
      {
        if (v22)
          v24 = 0;
        else
          v24 = v21 == -8192;
        if (v24)
          v22 = v20;
        v25 = v19 + v23++;
        v19 = v25 & v18;
        v20 = (_QWORD *)(**(_QWORD **)&v94[0] + 16 * (v25 & v18));
        v21 = *v20;
        if (*v20 == v15)
          goto LABEL_27;
      }
      if (v22)
        v26 = v22;
      else
        v26 = v20;
    }
    else
    {
      v26 = 0;
    }
    v20 = sub_1C4ECCA58(*(uint64_t *)&v94[0], (uint64_t)&v95, &v95, v26);
    *v20 = v95;
    v20[1] = 0;
    v16 = *(_QWORD **)&v94[0];
    v17 = *(_DWORD *)(*(_QWORD *)&v94[0] + 16);
LABEL_27:
    v20[1] = v5;
    if (v7)
      v27 = v13;
    else
      v27 = (uint64_t)v11;
    v95 = v27;
    if (!v17)
    {
      v36 = 0;
LABEL_44:
      v30 = sub_1C4ECCA58((uint64_t)v16, (uint64_t)&v95, &v95, v36);
      *v30 = v95;
      v30[1] = 0;
      goto LABEL_45;
    }
LABEL_31:
    v28 = v17 - 1;
    v29 = v28 & ((v27 >> 4) ^ (v27 >> 9));
    v30 = (_QWORD *)(*v16 + 16 * v29);
    v31 = *v30;
    if (*v30 != v27)
    {
      v32 = 0;
      v33 = 1;
      while (v31 != -4096)
      {
        if (v32)
          v34 = 0;
        else
          v34 = v31 == -8192;
        if (v34)
          v32 = v30;
        v35 = v29 + v33++;
        v29 = v35 & v28;
        v30 = (_QWORD *)(*v16 + 16 * (v35 & v28));
        v31 = *v30;
        if (*v30 == v27)
          goto LABEL_45;
      }
      if (v32)
        v36 = v32;
      else
        v36 = v30;
      goto LABEL_44;
    }
LABEL_45:
    v30[1] = v5;
    if (v7)
    {
      v37 = &v92;
      v38 = v85;
    }
    else
    {
      v37 = &v93;
      v38 = v86;
    }
    v39 = sub_1C63063F0(v38, v37);
    v40 = v8[7];
    v41 = v39[1];
    v42 = *((unsigned int *)v39 + 6);
    v43 = (uint64_t *)(v41 + 16 * v42);
    v91 = v9;
    if (*((_DWORD *)v39 + 4))
    {
      if (*((_DWORD *)v39 + 6))
      {
        v44 = 16 * v42;
        v45 = (uint64_t *)v39[1];
        while ((*v45 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v45 += 2;
          v44 -= 16;
          if (!v44)
            goto LABEL_53;
        }
      }
      else
      {
        v45 = (uint64_t *)v39[1];
      }
    }
    else
    {
LABEL_53:
      v45 = (uint64_t *)(v41 + 16 * v42);
    }
    v46 = (uint64_t *)(v41 + 16 * v42);
    v47 = (uint64_t)v11;
    if (v45 == v46)
    {
LABEL_96:
      v95 = v47;
      v69 = *(_DWORD *)(*(_QWORD *)&v94[0] + 16);
      if (v69)
      {
        v70 = v69 - 1;
        v71 = (v69 - 1) & ((v47 >> 4) ^ (v47 >> 9));
        v72 = (_QWORD *)(**(_QWORD **)&v94[0] + 16 * v71);
        v73 = *v72;
        if (*v72 != v47)
        {
          v74 = 0;
          v75 = 1;
          while (v73 != -4096)
          {
            if (v74)
              v76 = 0;
            else
              v76 = v73 == -8192;
            if (v76)
              v74 = v72;
            v77 = v71 + v75++;
            v71 = v77 & v70;
            v72 = (_QWORD *)(**(_QWORD **)&v94[0] + 16 * (v77 & v70));
            v73 = *v72;
            if (*v72 == v47)
              goto LABEL_111;
          }
          if (v74)
            v78 = v74;
          else
            v78 = v72;
LABEL_110:
          v72 = sub_1C4ECCA58(*(uint64_t *)&v94[0], (uint64_t)&v95, &v95, v78);
          *v72 = v95;
          v72[1] = 0;
        }
LABEL_111:
        v72[1] = v5;
        goto LABEL_112;
      }
      v78 = 0;
      goto LABEL_110;
    }
    v48 = 0;
    v47 = (uint64_t)v11;
    while (1)
    {
      v50 = *v45;
      v49 = v45[1];
      if ((uint64_t **)*v45 == v11)
        break;
      v95 = *v45;
      v51 = *(_DWORD *)(*(_QWORD *)&v94[0] + 16);
      if (!v51)
      {
        v60 = 0;
LABEL_72:
        v54 = sub_1C4ECCA58(*(uint64_t *)&v94[0], (uint64_t)&v95, &v95, v60);
        *v54 = v95;
        v54[1] = 0;
        goto LABEL_73;
      }
      v52 = v51 - 1;
      v53 = (v51 - 1) & ((v50 >> 4) ^ (v50 >> 9));
      v54 = (_QWORD *)(**(_QWORD **)&v94[0] + 16 * v53);
      v55 = *v54;
      if (*v54 != v50)
      {
        v56 = 0;
        v57 = 1;
        while (v55 != -4096)
        {
          if (v56)
            v58 = 0;
          else
            v58 = v55 == -8192;
          if (v58)
            v56 = v54;
          v59 = v53 + v57++;
          v53 = v59 & v52;
          v54 = (_QWORD *)(**(_QWORD **)&v94[0] + 16 * (v59 & v52));
          v55 = *v54;
          if (*v54 == v50)
            goto LABEL_73;
        }
        if (v56)
          v60 = v56;
        else
          v60 = v54;
        goto LABEL_72;
      }
LABEL_73:
      v54[1] = v49;
      if (v47)
      {
        NearestCommonDominator = llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator(v40, v47, v50);
        if (NearestCommonDominator == v47)
          v62 = v48;
        else
          v62 = 0;
        v48 = v62 | (NearestCommonDominator == v50);
        v47 = NearestCommonDominator;
      }
      else
      {
        v48 = 1;
        v47 = v50;
      }
      v63 = v45 + 2;
      v45 = v43;
      if (v63 != v43)
      {
        v45 = v63;
        while ((*v45 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v45 += 2;
          if (v45 == v43)
          {
            v45 = v43;
            break;
          }
        }
      }
      if (v45 == v46)
        goto LABEL_94;
    }
    if (v49)
    {
      v7 = a2;
      v64 = v91;
      if (*(_QWORD *)(v10 - 96))
      {
        **(_QWORD **)(v10 - 80) = *(_QWORD *)(v10 - 88);
        v65 = *(_QWORD *)(v10 - 88);
        if (v65)
          *(_QWORD *)(v65 + 16) = *(_QWORD *)(v10 - 80);
      }
      *(_QWORD *)(v10 - 96) = v49;
      v68 = *(_QWORD *)(v49 + 8);
      v67 = (_QWORD *)(v49 + 8);
      v66 = v68;
      *(_QWORD *)(v10 - 88) = v68;
      if (v68)
        *(_QWORD *)(v66 + 16) = v10 - 88;
      *(_QWORD *)(v10 - 80) = v67;
      *v67 = v10 - 96;
      v5 = v87;
      v8 = a1;
      goto LABEL_119;
    }
LABEL_94:
    v24 = v48 == 0;
    v7 = a2;
    v5 = v87;
    v8 = a1;
    if (v24)
      goto LABEL_96;
LABEL_112:
    ValueInMiddleOfBlock = llvm::SSAUpdater::GetValueInMiddleOfBlock((llvm::UndefValue **)v94, v11);
    v80 = (llvm::UndefValue **)(v10 - 96);
    if (*(_QWORD *)(v10 - 96))
    {
      **(_QWORD **)(v10 - 80) = *(_QWORD *)(v10 - 88);
      v81 = *(_QWORD *)(v10 - 88);
      if (v81)
        *(_QWORD *)(v81 + 16) = *(_QWORD *)(v10 - 80);
    }
    *v80 = ValueInMiddleOfBlock;
    v64 = v91;
    if (ValueInMiddleOfBlock)
    {
      v84 = *((_QWORD *)ValueInMiddleOfBlock + 1);
      v82 = (llvm::UndefValue ***)((char *)ValueInMiddleOfBlock + 8);
      v83 = v84;
      *(_QWORD *)(v10 - 88) = v84;
      if (v84)
        *(_QWORD *)(v83 + 16) = v10 - 88;
      *(_QWORD *)(v10 - 80) = v82;
      *v82 = v80;
    }
LABEL_119:
    v9 = v64 + 8;
  }
  while (v9 != v90);
LABEL_128:
  llvm::SSAUpdater::~SSAUpdater((void **)v94);
}

void sub_1C5C53800(int *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  int v17;
  unint64_t v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  _OWORD v37[4];
  uint64_t v38;

  *(_QWORD *)&v36 = a2;
  *((_QWORD *)&v36 + 1) = a3;
  v6 = *a1 + 1;
  *a1 = v6;
  *((_DWORD *)sub_1C6328054((uint64_t)(a1 + 2), (uint64_t *)&v36) + 4) = v6;
  v8 = (_OWORD *)*((_QWORD *)a1 + 5);
  v7 = *((_QWORD *)a1 + 6);
  if ((unint64_t)v8 >= v7)
  {
    v10 = (_OWORD *)*((_QWORD *)a1 + 4);
    v11 = v8 - v10;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      goto LABEL_36;
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 60)
        goto LABEL_37;
      v15 = (char *)operator new(16 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[16 * v11];
    *(_OWORD *)v16 = v36;
    v9 = v16 + 16;
    if (v8 != v10)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *(v8 - 1);
        v16 -= 16;
        --v8;
      }
      while (v8 != v10);
      v8 = (_OWORD *)*((_QWORD *)a1 + 4);
    }
    *((_QWORD *)a1 + 4) = v16;
    *((_QWORD *)a1 + 5) = v9;
    *((_QWORD *)a1 + 6) = &v15[16 * v14];
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v8 = v36;
    v9 = v8 + 1;
  }
  *((_QWORD *)a1 + 5) = v9;
  sub_1C5C53D3C((uint64_t)v37, (unint64_t *)&v36);
  v33 = v37[2];
  v34 = v37[3];
  v35 = v38;
  v31 = v37[0];
  v32 = v37[1];
  v17 = *a1;
  v19 = (char *)*((_QWORD *)a1 + 11);
  v18 = *((_QWORD *)a1 + 12);
  if ((unint64_t)v19 < v18)
  {
    *(_QWORD *)v19 = a2;
    *((_QWORD *)v19 + 1) = a3;
    *((_OWORD *)v19 + 3) = v33;
    *((_OWORD *)v19 + 4) = v34;
    *((_QWORD *)v19 + 10) = v35;
    *((_OWORD *)v19 + 1) = v31;
    *((_OWORD *)v19 + 2) = v32;
    v20 = v19 + 96;
    *((_DWORD *)v19 + 22) = v17;
    goto LABEL_35;
  }
  v21 = (_BYTE *)*((_QWORD *)a1 + 10);
  v22 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v21) >> 5) + 1;
  if (v22 > 0x2AAAAAAAAAAAAAALL)
LABEL_36:
    abort();
  v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (_QWORD)v21) >> 5);
  if (2 * v23 > v22)
    v22 = 2 * v23;
  if (v23 >= 0x155555555555555)
    v24 = 0x2AAAAAAAAAAAAAALL;
  else
    v24 = v22;
  if (!v24)
  {
    v25 = 0;
    goto LABEL_30;
  }
  if (v24 > 0x2AAAAAAAAAAAAAALL)
LABEL_37:
    sub_1C4764EE4();
  v25 = (char *)operator new(96 * v24);
LABEL_30:
  v26 = &v25[32 * ((v19 - v21) >> 5)];
  *(_QWORD *)v26 = a2;
  *((_QWORD *)v26 + 1) = a3;
  *((_OWORD *)v26 + 3) = v33;
  *((_OWORD *)v26 + 4) = v34;
  *((_QWORD *)v26 + 10) = v35;
  *((_OWORD *)v26 + 1) = v31;
  *((_OWORD *)v26 + 2) = v32;
  *((_DWORD *)v26 + 22) = v17;
  v20 = v26 + 96;
  if (v19 != v21)
  {
    do
    {
      v27 = *((_OWORD *)v19 - 5);
      *((_OWORD *)v26 - 6) = *((_OWORD *)v19 - 6);
      *((_OWORD *)v26 - 5) = v27;
      v28 = *((_OWORD *)v19 - 4);
      v29 = *((_OWORD *)v19 - 3);
      v30 = *((_OWORD *)v19 - 1);
      *((_OWORD *)v26 - 2) = *((_OWORD *)v19 - 2);
      *((_OWORD *)v26 - 1) = v30;
      *((_OWORD *)v26 - 4) = v28;
      *((_OWORD *)v26 - 3) = v29;
      v26 -= 96;
      v19 -= 96;
    }
    while (v19 != v21);
    v19 = (char *)*((_QWORD *)a1 + 10);
  }
  *((_QWORD *)a1 + 10) = v26;
  *((_QWORD *)a1 + 11) = v20;
  *((_QWORD *)a1 + 12) = &v25[96 * v24];
  if (v19)
    operator delete(v19);
LABEL_35:
  *((_QWORD *)a1 + 11) = v20;
}

int *sub_1C5C53A84(int *result)
{
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  _OWORD *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;

  *((_QWORD *)result + 8) = *((_QWORD *)result + 7);
  v1 = *((_QWORD *)result + 11);
  if (*((_QWORD *)result + 10) == v1)
    return result;
  v2 = result;
  v3 = (uint64_t)(result + 2);
  while (1)
  {
    while (1)
    {
      sub_1C5C53D3C((uint64_t)&v29, (unint64_t *)(v1 - 96));
      v4 = *(_QWORD *)(v1 - 80);
      if ((v4 & 6) == 0)
        break;
      if (((v4 ^ v34) & 6) == 0)
        goto LABEL_10;
LABEL_5:
      v5 = *((_QWORD *)v2 + 11);
      v6 = (unint64_t *)(v5 - 80);
      v29 = *(_OWORD *)(v5 - 80);
      v8 = *(_OWORD *)(v5 - 48);
      v7 = *(_OWORD *)(v5 - 32);
      v9 = *(_OWORD *)(v5 - 64);
      v33 = *(_QWORD *)(v5 - 16);
      v31 = v8;
      v32 = v7;
      v30 = v9;
      sub_1C61AF6D8((unint64_t *)(v5 - 80));
      sub_1C5C53F24(v6);
      v10 = sub_1C62AB5B4((uint64_t)&v29);
      v11 = *((_QWORD *)&v30 + 1);
      *(_QWORD *)&v29 = 0;
      if (!sub_1C6200DDC(*((_QWORD *)v2 + 1), v2[6], (uint64_t)v10, *((uint64_t *)&v30 + 1), &v29)
        || (_QWORD)v29 == *((_QWORD *)v2 + 1) + 24 * v2[6])
      {
        sub_1C5C53800(v2, (uint64_t)v10, v11);
        v1 = *((_QWORD *)v2 + 11);
      }
      else
      {
        v12 = *(_DWORD *)(v29 + 16);
        v1 = *((_QWORD *)v2 + 11);
        if (*(_DWORD *)(v1 - 8) > v12)
          *(_DWORD *)(v1 - 8) = v12;
      }
    }
    if (*(_DWORD *)(v1 - 64) != v35)
      goto LABEL_5;
LABEL_10:
    v14 = *((_QWORD *)v2 + 10);
    v13 = *((_QWORD *)v2 + 11);
    v29 = *(_OWORD *)(v13 - 96);
    v15 = *(_DWORD *)(v13 - 8);
    *((_QWORD *)v2 + 11) = v13 - 96;
    if (v14 != v13 - 96 && *(_DWORD *)(v13 - 104) > v15)
      *(_DWORD *)(v13 - 104) = v15;
    result = (int *)sub_1C6328054(v3, (uint64_t *)&v29);
    if (v15 == result[4])
      break;
    v1 = *((_QWORD *)v2 + 11);
    if (*((_QWORD *)v2 + 10) == v1)
      return result;
  }
  v16 = (uint64_t *)*((_QWORD *)v2 + 8);
  do
  {
    v17 = (_OWORD *)(*((_QWORD *)v2 + 5) - 16);
    v18 = *((_QWORD *)v2 + 9);
    if ((unint64_t)v16 >= v18)
    {
      v20 = (uint64_t *)*((_QWORD *)v2 + 7);
      v21 = ((char *)v16 - (char *)v20) >> 4;
      v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 60)
        abort();
      v23 = v18 - (_QWORD)v20;
      if (v23 >> 3 > v22)
        v22 = v23 >> 3;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
        v24 = 0xFFFFFFFFFFFFFFFLL;
      else
        v24 = v22;
      if (v24)
      {
        if (v24 >> 60)
          sub_1C4764EE4();
        v25 = (char *)operator new(16 * v24);
      }
      else
      {
        v25 = 0;
      }
      v26 = &v25[16 * v21];
      *(_OWORD *)v26 = *v17;
      v27 = v26;
      if (v16 != v20)
      {
        do
        {
          *((_OWORD *)v27 - 1) = *((_OWORD *)v16 - 1);
          v27 -= 16;
          v16 -= 2;
        }
        while (v16 != v20);
        v16 = (uint64_t *)*((_QWORD *)v2 + 7);
      }
      v19 = (uint64_t *)(v26 + 16);
      *((_QWORD *)v2 + 7) = v27;
      *((_QWORD *)v2 + 8) = v26 + 16;
      *((_QWORD *)v2 + 9) = &v25[16 * v24];
      if (v16)
        operator delete(v16);
    }
    else
    {
      *(_OWORD *)v16 = *v17;
      v19 = v16 + 2;
    }
    *((_QWORD *)v2 + 8) = v19;
    *((_QWORD *)v2 + 5) -= 16;
    result = (int *)sub_1C6328054(v3, v19 - 2);
    result[4] = -1;
    v16 = (uint64_t *)*((_QWORD *)v2 + 8);
  }
  while (*(v16 - 2) != (_QWORD)v29 || *(v16 - 1) != *((_QWORD *)&v29 + 1));
  return result;
}

double sub_1C5C53D3C(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  unint64_t v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double result;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  void *v34;

  v4 = a2[1];
  sub_1C61AF5B4((unint64_t *)&v23, *a2);
  v5 = *a2;
  v6 = a2[1];
  v7 = *(_QWORD *)*a2;
  v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 40);
  if (v8 == (v7 & 0xFFFFFFFFFFFFFFF8) + 40)
  {
    v9 = 0;
    v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = v8 - 24;
    if (v8)
      v12 = v8 - 24;
    else
      v12 = 0;
    v13 = *(unsigned __int8 *)(v12 + 16);
    v14 = v13 - 29;
    if (v13 != 30)
    {
      v15 = 0;
      switch(v14)
      {
        case 0:
        case 5:
        case 6:
          goto LABEL_9;
        case 1:
          __break(1u);
          goto LABEL_18;
        case 2:
          v15 = (*(_DWORD *)(v12 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_9;
        case 3:
        case 9:
LABEL_18:
          v15 = (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_9;
        case 4:
          v15 = 2;
          goto LABEL_9;
        case 7:
          v15 = *(_WORD *)(v12 + 18) & 1;
          goto LABEL_9;
        case 8:
          v15 = 1;
          goto LABEL_9;
        case 10:
          v15 = *(_DWORD *)(v12 + 80) + 1;
          goto LABEL_9;
        default:
          goto LABEL_11;
      }
    }
    if ((*(_DWORD *)(v12 + 20) & 0x7FFFFFF) == 3)
      v15 = 2;
    else
      v15 = 1;
LABEL_9:
    v10 = v15;
    v9 = v11;
  }
LABEL_11:
  v16 = v5 & 0xFFFFFFFFFFFFFFF9 | v7 & 4;
  v30 = v23;
  if (v4)
    v17 = sub_1C5C53EF4;
  else
    v17 = sub_1C5C53F1C;
  *(_QWORD *)&v31 = v24;
  *((_QWORD *)&v31 + 1) = v6;
  *(_QWORD *)&v32 = v5 & 0xFFFFFFFFFFFFFFF9 | v7 & 4;
  *((_QWORD *)&v32 + 1) = v9;
  *(_QWORD *)&v33 = v10;
  *((_QWORD *)&v33 + 1) = v6;
  v34 = v17;
  sub_1C5C53F24((unint64_t *)&v30);
  *(_QWORD *)&v25 = v16;
  *((_QWORD *)&v25 + 1) = v9;
  *(_QWORD *)&v26 = v10;
  *((_QWORD *)&v26 + 1) = v6;
  *(_QWORD *)&v27 = v16;
  *((_QWORD *)&v27 + 1) = v9;
  *(_QWORD *)&v28 = v10;
  *((_QWORD *)&v28 + 1) = v6;
  v29 = v17;
  sub_1C5C53F24((unint64_t *)&v25);
  v18 = v33;
  *(_OWORD *)(a1 + 32) = v32;
  *(_OWORD *)(a1 + 48) = v18;
  v19 = v31;
  *(_OWORD *)a1 = v30;
  *(_OWORD *)(a1 + 16) = v19;
  v20 = v25;
  *(_OWORD *)(a1 + 88) = v26;
  result = *(double *)&v27;
  v22 = v28;
  *(_OWORD *)(a1 + 104) = v27;
  *(_OWORD *)(a1 + 120) = v22;
  *(_QWORD *)(a1 + 64) = v34;
  *(_QWORD *)(a1 + 136) = v29;
  *(_OWORD *)(a1 + 72) = v20;
  return result;
}

uint64_t sub_1C5C53EF4(uint64_t *a1)
{
  uint64_t v2;

  return sub_1C6154170(a1[1], *a1, &v2);
}

uint64_t sub_1C5C53F1C()
{
  return 1;
}

unint64_t *sub_1C5C53F24(unint64_t *result)
{
  uint64_t i;
  uint64_t (*v2)(_QWORD *);
  uint64_t *v3;
  uint64_t v4;
  _QWORD v5[2];

  for (i = (uint64_t)result; ; result = sub_1C61AF6D8((unint64_t *)i))
  {
    if ((*(_QWORD *)i & 6) != 0)
    {
      if (((*(_DWORD *)(i + 32) ^ *(_QWORD *)i) & 6) == 0)
        return result;
    }
    else if (*(_DWORD *)(i + 16) == *(_DWORD *)(i + 48))
    {
      return result;
    }
    v2 = *(uint64_t (**)(_QWORD *))(i + 64);
    v3 = sub_1C62AB5B4(i);
    v4 = *(_QWORD *)(i + 24);
    v5[0] = v3;
    v5[1] = v4;
    result = (unint64_t *)v2(v5);
    if ((result & 1) != 0)
      break;
  }
  return result;
}

void sub_1C5C53FA4(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t ***v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t ***v18;
  llvm::BasicBlock *v19;
  llvm::BasicBlock *v20;
  llvm::Value *v21;
  _DWORD *v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *BBNode;
  uint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t **v31;
  _DWORD *v32;
  _QWORD v33[4];
  __int16 v34;
  uint64_t v35;

  v6 = *(uint64_t **)(*(_QWORD *)(a1 + 64) + 8 * *(unsigned int *)(a1 + 72) - 8);
  v7 = (uint64_t ***)(*v6 & 0xFFFFFFFFFFFFFFF8);
  v8 = (uint64_t *)(a1 + 624);
  v33[0] = v7;
  v35 = 0;
  if ((sub_1C61252B8((uint64_t *)(a1 + 624), v33, &v35) & 1) != 0)
  {
    if (!sub_1C5C547C0(a1, *v6))
      v7 = (uint64_t ***)sub_1C5C548EC(a1, 1);
    v33[0] = *v6 & 0xFFFFFFFFFFFFFFF8;
    v9 = sub_1C4E5D0EC(v8, v33)[1];
    sub_1C5C544D8(a1, 0, v9);
    v10 = sub_1C477672C(a1 + 144, v9);
    v11 = *(_QWORD *)(a1 + 152);
    v12 = 160;
    if (v11 == *(_QWORD *)(a1 + 144))
      v12 = 164;
    if (v10 == (_QWORD *)(v11 + 8 * *(unsigned int *)(a1 + v12)))
    {
      do
      {
        sub_1C5C53FA4(a1, 0, v9);
        v13 = sub_1C477672C(a1 + 144, v9);
        v14 = *(_QWORD *)(a1 + 152);
        if (v14 == *(_QWORD *)(a1 + 144))
          v15 = 164;
        else
          v15 = 160;
      }
      while (v13 == (_QWORD *)(v14 + 8 * *(unsigned int *)(a1 + v15)));
    }
    v16 = v7[7];
    v17 = v16[10];
    if (v17)
      v18 = (uint64_t ***)(v17 - 3);
    else
      v18 = 0;
    if (v7 == v18)
    {
      v33[0] = "entry.orig";
      v34 = 259;
      llvm::Value::setName(v7, (uint64_t)v33);
      v28 = **v7;
      v33[0] = "entry";
      v34 = 259;
      v29 = operator new();
      *(_QWORD *)v29 = *v28 + 1600;
      *(_QWORD *)(v29 + 8) = 0;
      v30 = *(_DWORD *)(v29 + 20) & 0xC0000000;
      *(_DWORD *)(v29 + 16) = 22;
      *(_DWORD *)(v29 + 20) = v30;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0;
      *(_QWORD *)(v29 + 40) = v29 + 40;
      *(_QWORD *)(v29 + 48) = v29 + 40;
      *(_QWORD *)(v29 + 56) = 0;
      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v16 + 9), (_QWORD *)v29);
      v31 = v7[3];
      *(_QWORD *)(v29 + 32) = v7 + 3;
      *(_QWORD *)(v29 + 24) = v31;
      v31[1] = (uint64_t *)(v29 + 24);
      v7[3] = (uint64_t **)(v29 + 24);
      llvm::Value::setName((uint64_t ***)v29, (uint64_t)v33);
      v32 = operator new(0x60uLL);
      v32[13] = v32[13] & 0x38000000 | 1;
      *(_QWORD *)v32 = 0;
      *((_QWORD *)v32 + 1) = 0;
      *((_QWORD *)v32 + 2) = 0;
      *((_QWORD *)v32 + 3) = v32 + 8;
      llvm::BranchInst::BranchInst((llvm::BranchInst *)(v32 + 8), (llvm::BasicBlock *)v7, (llvm::BasicBlock *)v29);
      llvm::DominatorTreeBase<llvm::BasicBlock,false>::setNewRoot(*(_QWORD *)(a1 + 56), v29);
    }
    v19 = sub_1C5C548EC(a1, 0);
    v20 = (llvm::BasicBlock *)sub_1C5C549D4(a1, v19, a2);
    v21 = *(llvm::Value **)(a1 + 24);
    v22 = operator new(0xA0uLL);
    v23 = 0;
    v24 = (char *)(v22 + 24);
    v22[29] = v22[29] & 0x38000000 | 3;
    do
    {
      v25 = &v22[v23];
      *v25 = 0;
      v25[1] = 0;
      v25[2] = 0;
      v25[3] = v24;
      v23 += 8;
    }
    while (v23 != 24);
    llvm::BranchInst::BranchInst((llvm::BranchInst *)(v22 + 24), v20, (llvm::BasicBlock *)v7, v21, v19);
    v26 = *(unsigned int *)(a1 + 680);
    if (v26 >= *(_DWORD *)(a1 + 684))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 672, a1 + 688, v26 + 1, 8);
      LODWORD(v26) = *(_DWORD *)(a1 + 680);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 672) + 8 * v26) = v24;
    ++*(_DWORD *)(a1 + 680);
    sub_1C5C54A4C(a1, v19, (uint64_t)v7);
    if (llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(*(_QWORD **)(a1 + 40), (uint64_t)v20))
      BBNode = llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getBBNode(*(_QWORD *)(a1 + 40), (unint64_t)v20);
    else
      BBNode = 0;
    *(_QWORD *)(a1 + 752) = BBNode;
  }
  else
  {
    sub_1C5C544D8(a1, a2, a3);
  }
}

void sub_1C5C542F8(uint64_t a1, uint64_t *a2, llvm::BasicBlock *a3, int a4)
{
  uint64_t v7;
  llvm::BasicBlock *v8;
  _DWORD *v9;
  llvm::Value *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t NearestCommonDominator;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  llvm::Type *v23;
  _QWORD *v24;
  uint64_t v25;
  llvm::User *v26;

  v7 = *a2;
  if ((*a2 & 4) == 0)
  {
    v8 = (llvm::BasicBlock *)(v7 & 0xFFFFFFFFFFFFFFF8);
    sub_1C5C54B1C(a1, v7 & 0xFFFFFFFFFFFFFFF8);
    v9 = operator new(0x60uLL);
    v9[13] = v9[13] & 0x38000000 | 1;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = 0;
    *((_QWORD *)v9 + 3) = v9 + 8;
    llvm::BranchInst::BranchInst((llvm::BranchInst *)(v9 + 8), a3, v8);
    sub_1C5C54A4C(a1, v8, (uint64_t)a3);
    if (a4)
      llvm::DominatorTreeBase<llvm::BasicBlock,false>::changeImmediateDominator(*(_QWORD *)(a1 + 56), (uint64_t)a3, (uint64_t)v8);
    return;
  }
  v11 = (llvm::Value *)a2[4];
  v12 = *((_QWORD *)v11 + 1);
  if (!v12)
    goto LABEL_41;
  while (1)
  {
    v13 = *(_QWORD *)(v12 + 24);
    v14 = *(unsigned __int8 *)(v13 + 16);
    v15 = v13 && v14 >= 0x1C;
    if (v15 && v14 - 29 < 0xB)
      break;
    v12 = *(_QWORD *)(v12 + 8);
    if (!v12)
      goto LABEL_41;
  }
  NearestCommonDominator = 0;
  do
  {
    while (1)
    {
      v18 = v12;
      do
      {
        v12 = *(_QWORD *)(v12 + 8);
        if (!v12)
          break;
        v19 = *(_QWORD *)(v12 + 24);
        v20 = *(unsigned __int8 *)(v19 + 16);
        v21 = v19 && v20 >= 0x1C;
      }
      while (!v21 || v20 - 29 > 0xA);
      v23 = *(llvm::Type **)(*(_QWORD *)(v18 + 24) + 40);
      if (!llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(a2, (uint64_t)v23))
        goto LABEL_36;
      sub_1C5C54E04(a1, (uint64_t)v23, (uint64_t)v11);
      v24 = (_QWORD *)*((_QWORD *)v23 + 5);
      if (v24 == (_QWORD *)((char *)v23 + 40))
      {
        v26 = 0;
      }
      else
      {
        v25 = v24 ? (uint64_t)(v24 - 3) : 0;
        v26 = *(unsigned __int8 *)(v25 + 16) - 29 >= 0xB ? 0 : (llvm::User *)v25;
      }
      llvm::User::replaceUsesOfWith(v26, v11, a3);
      sub_1C5C54A4C(a1, v23, (uint64_t)a3);
      if (!a4)
        goto LABEL_36;
      if (!NearestCommonDominator)
        break;
      NearestCommonDominator = llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator(*(_QWORD *)(a1 + 56), NearestCommonDominator, (uint64_t)v23);
LABEL_36:
      if (!v12)
        goto LABEL_39;
    }
    NearestCommonDominator = (uint64_t)v23;
  }
  while (v12);
LABEL_39:
  if (NearestCommonDominator)
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::changeImmediateDominator(*(_QWORD *)(a1 + 56), (uint64_t)a3, NearestCommonDominator);
LABEL_41:
  a2[4] = (uint64_t)a3;
}

void sub_1C5C544D8(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  llvm::BasicBlock *v10;
  llvm::BasicBlock *v11;
  llvm::BasicBlock *v12;
  llvm::Value *v13;
  _DWORD *v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *BBNode;
  unint64_t v31;

  v6 = *(unsigned int *)(a1 + 72);
  v7 = *(uint64_t **)(*(_QWORD *)(a1 + 64) + 8 * v6 - 8);
  *(_DWORD *)(a1 + 72) = v6 - 1;
  v8 = a1 + 144;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 144), *v7 & 0xFFFFFFFFFFFFFFF8);
  if (sub_1C5C547C0(a1, *v7))
  {
    v9 = *(uint64_t **)(a1 + 752);
    if (v9)
      sub_1C5C542F8(a1, v9, (llvm::BasicBlock *)(*v7 & 0xFFFFFFFFFFFFFFF8), 1);
    *(_QWORD *)(a1 + 752) = v7;
  }
  else
  {
    v10 = sub_1C5C548EC(a1, 0);
    v11 = (llvm::BasicBlock *)(*v7 & 0xFFFFFFFFFFFFFFF8);
    v12 = (llvm::BasicBlock *)sub_1C5C549D4(a1, v10, a2);
    v13 = *(llvm::Value **)(a1 + 24);
    v14 = operator new(0xA0uLL);
    v15 = 0;
    v16 = (char *)(v14 + 24);
    v14[29] = v14[29] & 0x38000000 | 3;
    do
    {
      v17 = &v14[v15];
      *v17 = 0;
      v17[1] = 0;
      v17[2] = 0;
      v17[3] = v16;
      v15 += 8;
    }
    while (v15 != 24);
    llvm::BranchInst::BranchInst((llvm::BranchInst *)(v14 + 24), v11, v12, v13, v10);
    v18 = *(unsigned int *)(a1 + 552);
    if (v18 >= *(_DWORD *)(a1 + 556))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 544, a1 + 560, v18 + 1, 8);
      LODWORD(v18) = *(_DWORD *)(a1 + 552);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 544) + 8 * v18) = v16;
    ++*(_DWORD *)(a1 + 552);
    sub_1C5C54A4C(a1, v10, (uint64_t)v11);
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::changeImmediateDominator(*(_QWORD *)(a1 + 56), (uint64_t)v11, (uint64_t)v10);
    *(_QWORD *)(a1 + 752) = v7;
    while (*(_DWORD *)(a1 + 72))
    {
      v19 = sub_1C477672C(v8, a3);
      v20 = *(_QWORD *)(a1 + 152);
      v21 = 160;
      if (v20 == *(_QWORD *)(a1 + 144))
        v21 = 164;
      if (v19 != (_QWORD *)(v20 + 8 * *(unsigned int *)(a1 + v21)))
        break;
      v31 = **(_QWORD **)(*(_QWORD *)(a1 + 64) + 8 * *(unsigned int *)(a1 + 72) - 8) & 0xFFFFFFFFFFFFFFF8;
      v22 = sub_1C63063F0(a1 + 520, (uint64_t *)&v31);
      v23 = v22[1];
      v24 = *((unsigned int *)v22 + 6);
      v25 = (uint64_t *)(v23 + 16 * v24);
      if (*((_DWORD *)v22 + 4))
      {
        if (*((_DWORD *)v22 + 6))
        {
          v26 = 16 * v24;
          v27 = (uint64_t *)v22[1];
          while ((*v27 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v27 += 2;
            v26 -= 16;
            if (!v26)
              goto LABEL_18;
          }
        }
        else
        {
          v27 = (uint64_t *)v22[1];
        }
      }
      else
      {
LABEL_18:
        v27 = (uint64_t *)(v23 + 16 * v24);
      }
      v28 = (uint64_t *)(v23 + 16 * v24);
LABEL_21:
      while (v27 != v28)
      {
        if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*(_QWORD *)(a1 + 56), (uint64_t)v11, *v27))
          goto LABEL_29;
        v29 = v27 + 2;
        v27 = v25;
        if (v29 != v25)
        {
          v27 = v29;
          while ((*v27 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v27 += 2;
            if (v27 == v25)
            {
              v27 = v25;
              goto LABEL_21;
            }
          }
        }
      }
      sub_1C5C53FA4(a1, 0, a3);
    }
LABEL_29:
    sub_1C5C542F8(a1, *(uint64_t **)(a1 + 752), v12, 0);
    if (llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(*(_QWORD **)(a1 + 40), (uint64_t)v12))
      BBNode = llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getBBNode(*(_QWORD *)(a1 + 40), (unint64_t)v12);
    else
      BBNode = 0;
    *(_QWORD *)(a1 + 752) = BBNode;
  }
}

BOOL sub_1C5C547C0(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v15;

  v15 = a2 & 0xFFFFFFFFFFFFFFF8;
  v3 = sub_1C63063F0(a1 + 520, (uint64_t *)&v15);
  if (*(_QWORD *)(a1 + 752))
  {
    v4 = v3[1];
    v5 = *((unsigned int *)v3 + 6);
    v6 = (uint64_t *)(v4 + 16 * v5);
    if (*((_DWORD *)v3 + 4))
    {
      if ((_DWORD)v5)
      {
        v7 = 16 * v5;
        v8 = (uint64_t *)v3[1];
        while ((*v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v8 += 2;
          v7 -= 16;
          if (!v7)
            goto LABEL_7;
        }
      }
      else
      {
        v8 = (uint64_t *)v3[1];
      }
    }
    else
    {
LABEL_7:
      v8 = (uint64_t *)(v4 + 16 * v5);
    }
    v10 = (uint64_t *)(v4 + 16 * v5);
    if (v8 != v10)
    {
      v9 = 0;
      while (1)
      {
        v11 = v8[1];
        v12 = *(_QWORD *)(a1 + 8);
        if (v11 == v12 && !v9)
          v9 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*(_QWORD *)(a1 + 56), *v8, **(_QWORD **)(a1 + 752) & 0xFFFFFFFFFFFFFFF8);
        if (v11 != v12)
          break;
        v13 = v8 + 2;
        v8 = v6;
        if (v13 != v6)
        {
          v8 = v13;
          while ((*v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v8 += 2;
            if (v8 == v6)
            {
              v8 = v6;
              break;
            }
          }
        }
        if (v8 == v10)
          return v9;
      }
    }
    return 0;
  }
  else
  {
    return 1;
  }
}

llvm::BasicBlock *sub_1C5C548EC(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm::BasicBlock *v4;
  _QWORD *v6;
  _QWORD *i;
  _QWORD *v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;

  v3 = **(_QWORD **)(a1 + 752);
  v4 = (llvm::BasicBlock *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
  {
LABEL_15:
    v4 = (llvm::BasicBlock *)sub_1C5C54CD0(a1, (uint64_t)v4);
    sub_1C5C542F8(a1, *(uint64_t **)(a1 + 752), v4, 1);
    *(_QWORD *)(a1 + 752) = llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getBBNode(*(_QWORD *)(a1 + 40), (unint64_t)v4);
  }
  else
  {
    sub_1C5C54B1C(a1, v3 & 0xFFFFFFFFFFFFFFF8);
    if (a2)
    {
      v6 = (_QWORD *)((char *)v4 + 40);
      for (i = (_QWORD *)*((_QWORD *)v4 + 6); i != v6; i = (_QWORD *)i[1])
      {
        v8 = i - 3;
        if (!i)
          v8 = 0;
        if (*((_BYTE *)v8 + 16) != 83)
        {
          v9 = *((unsigned __int8 *)i - 8) - 38;
          v10 = v9 > 0x38;
          v11 = (1 << v9) & 0x100060000000001;
          if (!v10 && v11 != 0)
            i = (_QWORD *)i[1];
          if (v6 == i)
            return v4;
          goto LABEL_15;
        }
      }
    }
  }
  return v4;
}

uint64_t sub_1C5C549D4(uint64_t a1, llvm::Type *a2, char a3)
{
  uint64_t v5;

  if (*(_DWORD *)(a1 + 72) || (a3 & 1) == 0)
    return sub_1C5C54CD0(a1, (uint64_t)a2);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32);
  llvm::DominatorTreeBase<llvm::BasicBlock,false>::changeImmediateDominator(*(_QWORD *)(a1 + 56), v5, (uint64_t)a2);
  sub_1C5C54A4C(a1, a2, v5);
  return v5;
}

uint64_t sub_1C5C54A4C(uint64_t a1, llvm::Type *a2, uint64_t a3)
{
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  llvm::UndefValue *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = a3;
  if (*(_QWORD *)(a3 + 40) != a3 + 40)
  {
    for (i = *(_QWORD *)(a3 + 48); ; i = *(_QWORD *)(v6 + 32))
    {
      v6 = i - 24;
      v7 = i ? i - 24 : 0;
      if (!i || *(_BYTE *)(v7 + 16) != 83)
        break;
      v8 = llvm::UndefValue::get(*(llvm::UndefValue **)v6, a2);
      sub_1C477667C((llvm::PHINode *)v6, (uint64_t)v8, (uint64_t)a2);
    }
  }
  result = sub_1C6328520(a1 + 472, &v12);
  v10 = result;
  v11 = *(unsigned int *)(result + 8);
  if (v11 >= *(_DWORD *)(result + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(result, result + 16, v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(v10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v10 + 8 * v11) = a2;
  ++*(_DWORD *)(v10 + 8);
  return result;
}

void sub_1C5C54B1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v6;
  unsigned int i;
  uint64_t Successor;
  int32x2_t *v9;
  __int32 v10;
  int32x2_t v11;
  __int32 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;

  v2 = *(_QWORD *)(a2 + 40);
  if (v2 != a2 + 40)
  {
    if (v2)
      v3 = v2 - 24;
    else
      v3 = 0;
    if (*(_BYTE *)(v3 + 16) != 30)
    {
      v6 = 2;
      switch(*(_BYTE *)(v3 + 16))
      {
        case 0x1D:
        case 0x22:
        case 0x23:
          goto LABEL_11;
        case 0x1E:
          __break(1u);
          goto LABEL_26;
        case 0x1F:
          v6 = (*(_DWORD *)(v3 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_23;
        case 0x20:
        case 0x26:
LABEL_26:
          v6 = (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_23;
        case 0x21:
          goto LABEL_9;
        case 0x24:
          v6 = *(_WORD *)(v3 + 18) & 1;
          goto LABEL_23;
        case 0x25:
          v6 = 1;
          goto LABEL_9;
        case 0x27:
          v6 = *(_DWORD *)(v3 + 80) + 1;
LABEL_23:
          if (!v6)
            goto LABEL_11;
          goto LABEL_9;
        default:
          return;
      }
    }
    if ((*(_DWORD *)(v3 + 20) & 0x7FFFFFF) == 3)
      v6 = 2;
    else
      v6 = 1;
LABEL_9:
    for (i = 0; i != v6; ++i)
    {
      Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v3, i);
      sub_1C5C54E04(a1, a2, Successor);
    }
LABEL_11:
    v9 = *(int32x2_t **)(a1 + 48);
    if (v9)
    {
      v10 = v9[7].i32[0];
      if (v10)
      {
        v11 = v9[5];
        v12 = v10 - 1;
        LODWORD(v13) = (v10 - 1) & ((v3 >> 4) ^ (v3 >> 9));
        v14 = (uint64_t *)(*(_QWORD *)&v11 + 8 * v13);
        v15 = *v14;
        if (v3 == *v14)
        {
LABEL_18:
          *v14 = -8192;
          v9[6] = vadd_s32(v9[6], (int32x2_t)0x1FFFFFFFFLL);
        }
        else
        {
          v16 = 1;
          while (v15 != -4096)
          {
            v17 = v13 + v16++;
            v13 = v17 & v12;
            v15 = *(_QWORD *)(*(_QWORD *)&v11 + 8 * v13);
            if (v3 == v15)
            {
              v14 = (uint64_t *)(*(_QWORD *)&v11 + 8 * v13);
              goto LABEL_18;
            }
          }
        }
      }
    }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v3 + 40) + 40, (uint64_t ***)v3);
    v18 = *(_QWORD *)(v3 + 24);
    v19 = *(_QWORD **)(v3 + 32);
    *v19 = v18;
    *(_QWORD *)(v18 + 8) = v19;
    *(_QWORD *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v3);
  }
}

uint64_t sub_1C5C54CD0(uint64_t a1, uint64_t a2)
{
  _QWORD **v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17[4];
  __int16 v18;

  v4 = *(_QWORD ***)(a1 + 32);
  v5 = (_QWORD *)**v4;
  v6 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v6)
    v7 = **(_QWORD **)(*(_QWORD *)(a1 + 64) + 8 * v6 - 8) & 0xFFFFFFFFFFFFFFF8;
  else
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32);
  v17[0] = (uint64_t)"Flow";
  v18 = 259;
  v8 = operator new();
  *(_QWORD *)v8 = *v5 + 1600;
  *(_QWORD *)(v8 + 8) = 0;
  v9 = *(_DWORD *)(v8 + 20) & 0xC0000000;
  *(_DWORD *)(v8 + 16) = 22;
  *(_DWORD *)(v8 + 20) = v9;
  *(_QWORD *)(v8 + 24) = 0;
  v10 = (_QWORD *)(v8 + 24);
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = v8 + 40;
  *(_QWORD *)(v8 + 48) = v8 + 40;
  *(_QWORD *)(v8 + 56) = 0;
  v11 = (uint64_t)(v4 + 9);
  if (v7)
    v12 = (uint64_t *)(v7 + 24);
  else
    v12 = (uint64_t *)(v4 + 9);
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v11, (_QWORD *)v8);
  v13 = *v12;
  *(_QWORD *)(v8 + 32) = v12;
  *v10 = v13;
  *(_QWORD *)(v13 + 8) = v10;
  *v12 = (uint64_t)v10;
  llvm::Value::setName((uint64_t ***)v8, (uint64_t)v17);
  llvm::DominatorTreeBase<llvm::BasicBlock,false>::addNewBlock(*(_QWORD *)(a1 + 56), v8, a2);
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(_QWORD *)(v14 + 16);
  v17[0] = v8;
  sub_1C6180A54(v15 + 40, v17)[1] = v14;
  return v8;
}

uint64_t sub_1C5C54E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  int32x2_t ****v31;
  int32x2_t *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int32x2_t *****v37;
  int32x2_t ****v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  int32x2_t ****v45;
  uint64_t v46;

  v46 = a3;
  result = (uint64_t)sub_1C63281D8(a1 + 448, &v46);
  if (*(_QWORD *)(a3 + 40) != a3 + 40)
  {
    v7 = *(_QWORD *)(a3 + 48);
    v8 = v7 - 24;
    v9 = v7 ? v7 - 24 : 0;
    if (v7 && *(_BYTE *)(v9 + 16) == 83)
    {
      v10 = result + 8;
      do
      {
        v11 = *(_DWORD *)(v8 + 20);
        v12 = v11 & 0x7FFFFFF;
        if ((v11 & 0x7FFFFFF) != 0)
        {
          v13 = 0;
          do
          {
            v14 = 0;
            v15 = *(unsigned int *)(v8 + 60);
            while (1)
            {
              v16 = v8 - 32 * v12;
              if ((v11 & 0x40000000) != 0)
                v16 = *(_QWORD *)(v8 - 8);
              if (*(_QWORD *)(v16 + 32 * v15 + 8 * v14) == a2)
                break;
              if (v12 == ++v14)
                goto LABEL_50;
            }
            if (v14 == -1)
              break;
            v17 = 0;
            v18 = 32 * v15;
            while (1)
            {
              v19 = v8 - 32 * v12;
              if ((v11 & 0x40000000) != 0)
                v19 = *(_QWORD *)(v8 - 8);
              if (*(_QWORD *)(v19 + v18 + 8 * v17) == a2)
                break;
              if (v12 == ++v17)
              {
                LODWORD(v17) = -1;
                break;
              }
            }
            v20 = llvm::PHINode::removeIncomingValue((llvm::PHINode *)v8, v17, 0);
            v43 = v8;
            result = sub_1C63280C0(v10, &v43);
            v21 = result;
            v22 = *(unsigned int *)(result + 8);
            if (v22 >= *(unsigned int *)(result + 12))
            {
              result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(result, result + 16, v22 + 1, 16);
              v22 = *(unsigned int *)(v21 + 8);
            }
            v23 = (_QWORD *)(*(_QWORD *)v21 + 16 * v22);
            *v23 = a2;
            v23[1] = v20;
            ++*(_DWORD *)(v21 + 8);
            if ((v13 & 1) == 0)
            {
              v43 = 4;
              v44 = 0;
              v45 = (int32x2_t ****)v8;
              if (v8 != -8192 && v8 != -4096 && v8)
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v43);
              result = sub_1C4EE497C((unsigned int *)(a1 + 240), (unint64_t)&v43, 1);
              v24 = *(_DWORD *)(a1 + 248);
              v25 = (unint64_t *)(*(_QWORD *)(a1 + 240) + 24 * v24);
              *v25 = 4;
              v25[1] = 0;
              v26 = (unint64_t)(v25 + 1);
              v27 = *(_QWORD *)(result + 16);
              v25[2] = v27;
              if (v27 != -8192 && v27 != -4096)
              {
                if (v27)
                {
                  v28 = *(_QWORD *)result & 0xFFFFFFFFFFFFFFF8;
                  v25[1] = *(_QWORD *)v28;
                  *(_QWORD *)v28 = v25;
                  *v25 = v28 | 4;
                  v29 = (uint64_t *)v25[1];
                  if (v29)
                    *v29 = *v29 & 7 | v26;
                }
              }
              *(_DWORD *)(a1 + 248) = v24 + 1;
              if (v45 != (int32x2_t ****)-8192 && v45 != (int32x2_t ****)-4096 && v45)
              {
                v30 = v43 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)(v43 & 0xFFFFFFFFFFFFFFF8) = v44;
                if (v44)
                {
                  *v44 = *v44 & 7 | v30;
                }
                else
                {
                  v31 = v45;
                  v32 = ***v45;
                  v33 = (unint64_t)v32[303];
                  if (v33 <= v30)
                  {
                    v34 = v32[305].u32[0];
                    if (v33 + 16 * v34 > v30)
                    {
                      v35 = v34 - 1;
                      LODWORD(v36) = v35 & ((v45 >> 4) ^ (v45 >> 9));
                      v37 = (int32x2_t *****)(v33 + 16 * v36);
                      v38 = *v37;
                      if (v45 == *v37)
                      {
LABEL_46:
                        *v37 = (int32x2_t ****)-8192;
                        v32[304] = vadd_s32(v32[304], (int32x2_t)0x1FFFFFFFFLL);
                        v31 = v45;
                      }
                      else
                      {
                        v39 = 1;
                        while (v38 != (int32x2_t ****)-4096)
                        {
                          v40 = v36 + v39++;
                          v36 = v40 & v35;
                          v38 = *(int32x2_t *****)(v33 + 16 * v36);
                          if (v45 == v38)
                          {
                            v37 = (int32x2_t *****)(v33 + 16 * v36);
                            goto LABEL_46;
                          }
                        }
                      }
                      *((_BYTE *)v31 + 17) &= ~1u;
                    }
                  }
                }
              }
            }
            v11 = *(_DWORD *)(v8 + 20);
            v13 = 1;
            v12 = v11 & 0x7FFFFFF;
          }
          while ((v11 & 0x7FFFFFF) != 0);
        }
LABEL_50:
        v41 = *(_QWORD *)(v8 + 32);
        v8 = v41 - 24;
        if (v41)
          v42 = v41 - 24;
        else
          v42 = 0;
      }
      while (v41 && *(_BYTE *)(v42 + 16) == 83);
    }
  }
  return result;
}

_QWORD *sub_1C5C55154(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(56 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6328300(a1, v4, &v4[7 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 56 * v10;
    do
    {
      *result = -4096;
      result += 7;
      v11 -= 56;
    }
    while (v11);
  }
  return result;
}

void sub_1C5C55218(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *i;
  char *v16;
  void *__p;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;

  v4 = a1[2];
  v5 = (_QWORD *)a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v5 - *a1) >> 3);
    if ((unint64_t)(v7 + 1) > 0x492492492492492)
      abort();
    v8 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - *a1) >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= v7 + 1)
      v9 = v7 + 1;
    if (v8 >= 0x249249249249249)
      v10 = 0x492492492492492;
    else
      v10 = v9;
    v21 = a1 + 2;
    if (v10 > 0x492492492492492)
      sub_1C4764EE4();
    v11 = 56 * v10;
    v12 = (char *)operator new(56 * v10);
    v13 = &v12[56 * v7];
    __p = v12;
    v18 = v13;
    v20 = &v12[v11];
    *(_QWORD *)v13 = *(_QWORD *)a2;
    *((_QWORD *)v13 + 1) = v13 + 24;
    *((_QWORD *)v13 + 2) = 0x200000000;
    if (*(_DWORD *)(a2 + 16))
      sub_1C486F510((uint64_t)(v13 + 8), a2 + 8);
    v19 = v13 + 56;
    sub_1C6328454(a1, &__p);
    v6 = (_QWORD *)a1[1];
    v14 = v18;
    for (i = v19; i != v14; i -= 56)
    {
      v16 = (char *)*((_QWORD *)i - 6);
      if (i - 32 != v16)
        free(v16);
    }
    if (__p)
      operator delete(__p);
  }
  else
  {
    *v5 = *(_QWORD *)a2;
    v5[1] = v5 + 3;
    v5[2] = 0x200000000;
    if (*(_DWORD *)(a2 + 16))
      sub_1C486F510((uint64_t)(v5 + 1), a2 + 8);
    v6 = v5 + 7;
  }
  a1[1] = (uint64_t)v6;
}

_QWORD *sub_1C5C553B8(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C49D7AB8(a1, v7);
      v17 = 0;
      sub_1C48BF0C0((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C49D7AB8(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void sub_1C5C554E8(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  void *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void *v20;
  void **v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  char *v25;
  char *i;
  char *v27;
  int v28;
  void *__p;
  char *v30;
  char *v31;
  char *v32;
  uint64_t *v33;

  v4 = a1[2];
  v5 = a1[1];
  if (v5 < v4)
  {
    *(_QWORD *)v5 = *(_QWORD *)a2;
    v6 = (void *)(v5 + 24);
    *(_QWORD *)(v5 + 8) = v5 + 24;
    *(_QWORD *)(v5 + 16) = 0x800000000;
    v7 = *(_DWORD *)(a2 + 16);
    if (v7)
      v8 = v5 == a2;
    else
      v8 = 1;
    if (v8)
      goto LABEL_12;
    v9 = *(_QWORD *)(a2 + 8);
    v10 = (const void *)(a2 + 24);
    if (v9 != a2 + 24)
    {
      *(_QWORD *)(v5 + 8) = v9;
      *(_DWORD *)(v5 + 16) = v7;
      *(_DWORD *)(v5 + 20) = *(_DWORD *)(a2 + 20);
      *(_QWORD *)(a2 + 8) = v10;
      *(_DWORD *)(a2 + 20) = 0;
      goto LABEL_11;
    }
    if (v7 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 8, v5 + 24, *(unsigned int *)(a2 + 16), 8);
      v11 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v11)
        goto LABEL_10;
      v10 = *(const void **)(a2 + 8);
      v6 = *(void **)(v5 + 8);
    }
    else
    {
      v11 = *(unsigned int *)(a2 + 16);
    }
    memcpy(v6, v10, 8 * v11);
LABEL_10:
    *(_DWORD *)(v5 + 16) = v7;
LABEL_11:
    *(_DWORD *)(a2 + 16) = 0;
LABEL_12:
    v12 = v5 + 88;
    goto LABEL_13;
  }
  v13 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - *a1) >> 3);
  if ((unint64_t)(v13 + 1) > 0x2E8BA2E8BA2E8BALL)
    abort();
  v14 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v4 - *a1) >> 3);
  v15 = 2 * v14;
  if (2 * v14 <= v13 + 1)
    v15 = v13 + 1;
  if (v14 >= 0x1745D1745D1745DLL)
    v16 = 0x2E8BA2E8BA2E8BALL;
  else
    v16 = v15;
  v33 = a1 + 2;
  if (v16 > 0x2E8BA2E8BA2E8BALL)
    sub_1C4764EE4();
  v17 = 88 * v16;
  v18 = (char *)operator new(88 * v16);
  v19 = &v18[88 * v13];
  __p = v18;
  v30 = v19;
  v32 = &v18[v17];
  *(_QWORD *)v19 = *(_QWORD *)a2;
  v20 = v19 + 24;
  *((_QWORD *)v19 + 1) = v19 + 24;
  v21 = (void **)(v19 + 8);
  *((_QWORD *)v19 + 2) = 0x800000000;
  v22 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v22 && v21 != (void **)(a2 + 8))
  {
    v23 = *(void **)(a2 + 8);
    if (v23 != (void *)(a2 + 24))
    {
      *v21 = v23;
      v28 = *(_DWORD *)(a2 + 20);
      *((_DWORD *)v19 + 4) = v22;
      *((_DWORD *)v19 + 5) = v28;
      *(_QWORD *)(a2 + 8) = a2 + 24;
      *(_DWORD *)(a2 + 20) = 0;
      goto LABEL_28;
    }
    if (v22 >= 9)
    {
      *((_DWORD *)v19 + 4) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v19 + 8), (uint64_t)(v19 + 24), v22, 8);
      v24 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v24)
        goto LABEL_27;
      v23 = *(void **)(a2 + 8);
      v20 = *v21;
    }
    else
    {
      v24 = *(unsigned int *)(a2 + 16);
    }
    memcpy(v20, v23, 8 * v24);
LABEL_27:
    *((_DWORD *)v19 + 4) = v22;
LABEL_28:
    *(_DWORD *)(a2 + 16) = 0;
  }
  v31 = v19 + 88;
  sub_1C6328640(a1, &__p);
  v12 = a1[1];
  v25 = v30;
  for (i = v31; i != v25; i -= 88)
  {
    v27 = (char *)*((_QWORD *)i - 10);
    if (i - 64 != v27)
      free(v27);
  }
  if (__p)
    operator delete(__p);
LABEL_13:
  a1[1] = v12;
}

BOOL sub_1C5C55798(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *i;

  v1 = *a1;
  v2 = a1[4];
  if (*a1 != v2)
  {
    v3 = (_QWORD *)a1[1];
    for (i = (_QWORD *)(v1 + 32); ; i += 4)
    {
      *a1 = (uint64_t)i;
      if (i == v3 || (*i | 0x1000) != 0xFFFFFFFFFFFFF000)
        break;
    }
  }
  return v1 != v2;
}

BOOL sub_1C5C557E0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *i;

  v1 = a1[2];
  v2 = a1[6];
  if (v1 != v2)
  {
    v3 = (_QWORD *)a1[3];
    for (i = (_QWORD *)(v1 + 32); ; i += 4)
    {
      a1[2] = i;
      if (i == v3 || (*i | 0x1000) != 0xFFFFFFFFFFFFF000)
        break;
    }
  }
  return v1 != v2;
}

uint64_t sub_1C5C55828(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = result;
  v2 = *(unsigned int *)(result + 16);
  v3 = *(_DWORD *)(result + 8);
  if ((_DWORD)v2)
  {
    v4 = 56 * v2;
    result = *(_QWORD *)result + 8;
    do
    {
      if ((*(_QWORD *)(result - 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
        result = sub_1C61F7CF0(result);
      result += 56;
      v4 -= 56;
    }
    while (v4);
  }
  v5 = 1 << (33 - __clz(v3 - 1));
  if (v5 <= 64)
    v5 = 64;
  if (v3)
    v6 = v5;
  else
    v6 = 0;
  if ((_DWORD)v6 == *(_DWORD *)(v1 + 16))
  {
    *(_QWORD *)(v1 + 8) = 0;
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD **)v1;
      v8 = 56 * v6;
      do
      {
        *v7 = -4096;
        v7 += 7;
        v8 -= 56;
      }
      while (v8);
    }
  }
  else
  {
    result = MEMORY[0x1CAA32FB4](*(_QWORD *)v1, 8);
    if ((_DWORD)v6)
    {
      v9 = (4 * (int)v6 / 3u + 1) | ((unint64_t)(4 * (int)v6 / 3u + 1) >> 1);
      v10 = v9 | (v9 >> 2) | ((v9 | (v9 >> 2)) >> 4);
      LODWORD(v10) = (((v10 | (v10 >> 8)) >> 16) | v10 | (v10 >> 8)) + 1;
      *(_DWORD *)(v1 + 16) = v10;
      result = (uint64_t)operator new(56 * v10, (std::align_val_t)8uLL);
      *(_QWORD *)v1 = result;
      *(_QWORD *)(v1 + 8) = 0;
      v11 = *(unsigned int *)(v1 + 16);
      if ((_DWORD)v11)
      {
        v12 = 56 * v11;
        do
        {
          *(_QWORD *)result = -4096;
          result += 56;
          v12 -= 56;
        }
        while (v12);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
      *(_DWORD *)(v1 + 16) = 0;
    }
  }
  return result;
}

_QWORD *sub_1C5C55978(_QWORD *a1)
{
  int v2;
  _QWORD *result;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *((_DWORD *)a1 + 2);
  result = (_QWORD *)sub_1C54E61C4((uint64_t)a1);
  if (v2)
  {
    v4 = 1 << (33 - __clz(v2 - 1));
    if (v4 <= 64)
      v5 = 64;
    else
      v5 = v4;
    if (v5 == *((_DWORD *)a1 + 4))
    {
      a1[1] = 0;
      v6 = 32 * v5;
      v7 = (_QWORD *)*a1;
      do
      {
        *v7 = -4096;
        v7 += 4;
        v6 -= 32;
      }
      while (v6);
    }
    else
    {
      MEMORY[0x1CAA32FB4](*a1, 8);
      v8 = (4 * v5 / 3 + 1) | ((unint64_t)(4 * v5 / 3 + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      *((_DWORD *)a1 + 4) = v9;
      result = operator new(32 * v9, (std::align_val_t)8uLL);
      *a1 = result;
      a1[1] = 0;
      v10 = *((unsigned int *)a1 + 4);
      if ((_DWORD)v10)
      {
        v11 = 32 * v10;
        do
        {
          *result = -4096;
          result += 4;
          v11 -= 32;
        }
        while (v11);
      }
    }
  }
  else if (*((_DWORD *)a1 + 4))
  {
    result = (_QWORD *)MEMORY[0x1CAA32FB4](*a1, 8);
    *a1 = 0;
    a1[1] = 0;
    *((_DWORD *)a1 + 4) = 0;
  }
  else
  {
    a1[1] = 0;
  }
  return result;
}

__n128 sub_1C5C55A88(_WORD *a1, __n128 *a2, char **a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED823848, "structurizecfg-skip-uniform-regions", 0x23uLL);
  word_1ED823852 = (32 * (*a1 & 3)) | word_1ED823852 & 0xFF9F;
  result = *a2;
  xmmword_1ED823868 = (__int128)*a2;
  v7 = *a3;
  byte_1ED8238C8 = **a3;
  byte_1ED8238D9 = 1;
  byte_1ED8238D8 = *v7;
  return result;
}

uint64_t sub_1C5C55B0C()
{
  char v1;
  char *v2;
  __n128 v3;
  int v4;

  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Force whether the StructurizeCFG pass skips uniform regions";
  v3.n128_u64[1] = 59;
  v1 = 0;
  v2 = &v1;
  sub_1C63287A0(&v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED823848, &dword_1C475E000);
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Allow relaxed uniform region checks";
  v3.n128_u64[1] = 35;
  v1 = 1;
  v2 = &v1;
  sub_1C6151DC0((llvm::cl::Option *)&unk_1ED823908, "structurizecfg-relaxed-uniform-regions", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED823908, &dword_1C475E000);
}

uint64_t sub_1C5C55BE4(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeOptimizationRemarkEmitterWrapperPassPass(a1, v2);
  v3 = operator new();
  *(_QWORD *)v3 = "Tail Call Elimination";
  *(_QWORD *)(v3 + 8) = 21;
  *(_QWORD *)(v3 + 16) = "tailcallelim";
  *(_QWORD *)(v3 + 24) = 12;
  *(_QWORD *)(v3 + 32) = &unk_1ED8239C8;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5C574CC;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C5C55C80(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED8239C8;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8197D08;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED8239D0);
  if (v3 != -1)
  {
    v7[0] = sub_1C5C55BE4;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED8239D0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void llvm::TailCallElimPass::run(llvm::Function *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  void *v6;
  uint64_t v7;
  llvm::OptimizationRemarkEmitter *v8;
  uint64_t CachedResultImpl;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void **v14;
  void *v15[2];
  _QWORD v16[36];
  char v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  int v21;
  _BYTE v22[64];
  _QWORD v23[3];
  __int16 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = (void *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetIRAnalysis::Key, (uint64_t)a1) + 8);
  v7 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AAManager::Key, (uint64_t)a1) + 8;
  v8 = (llvm::OptimizationRemarkEmitter *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::OptimizationRemarkEmitterAnalysis::Key, (uint64_t)a1)+ 8);
  CachedResultImpl = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(a2, (uint64_t)&llvm::DominatorTreeAnalysis::Key, (uint64_t)a1);
  if (CachedResultImpl)
    v10 = CachedResultImpl + 8;
  else
    v10 = 0;
  v11 = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(a2, (uint64_t)&llvm::PostDominatorTreeAnalysis::Key, (uint64_t)a1);
  v15[0] = v16;
  v12 = v11 + 8;
  v15[1] = (void *)0x1000000000;
  if (!v11)
    v12 = 0;
  v16[32] = 0;
  v16[33] = 0;
  v16[34] = v10;
  v16[35] = v12;
  v17 = 0;
  v18 = v22;
  v19 = v22;
  v20 = 8;
  v21 = 0;
  memset(v23, 0, sizeof(v23));
  v24 = 0;
  sub_1C5C55F40(a1, v6, v7, v8, (llvm::DomTreeUpdater *)v15);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if ((v13 & 1) != 0)
  {
    sub_1C4DDB144(a3, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
    sub_1C4DDB144(a3, (uint64_t)&llvm::PostDominatorTreeAnalysis::Key);
  }
  else
  {
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)v15);
  v14 = (void **)v23;
  sub_1C50B10F0(&v14);
  if (v19 != v18)
    free(v19);
  if (v15[0] != v16)
    free(v15[0]);
}

void sub_1C5C55F40(llvm::Function *this, void *a2, uint64_t a3, llvm::OptimizationRemarkEmitter *a4, llvm::DomTreeUpdater *a5)
{
  llvm::Function *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int i;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v24;
  llvm::DomTreeUpdater *v25;
  llvm::DSOLocalEquivalent **v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  _QWORD *v37;
  _QWORD *j;
  char *v39;
  int v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  void **v70;
  char *v71;
  unint64_t v72;
  void **v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  int v78;
  unsigned int k;
  void *Successor;
  _QWORD *v81;
  uint64_t v82;
  void **v83;
  char *v84;
  char *v85;
  uint64_t v86;
  void *v87;
  unsigned int v88;
  _QWORD *v89;
  void *v90;
  _QWORD *v91;
  int v92;
  BOOL v93;
  unsigned int v94;
  _QWORD *v95;
  char *v96;
  char *v97;
  char *v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  llvm::BasicBlock *v111;
  _QWORD *v112;
  _QWORD *v113;
  unsigned int v114;
  _QWORD *v115;
  int v116;
  llvm::BasicBlock *v118;
  char *FirstNonPHIOrDbg;
  BOOL v120;
  llvm *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  BOOL v127;
  char *v129;
  char *v130;
  uint64_t v131;
  int v132;
  unint64_t v133;
  uint64_t *v134;
  int v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t *v141;
  llvm::UndefValue *v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t *v145;
  llvm::DomTreeUpdater **v146;
  llvm::DomTreeUpdater **v147;
  llvm::DomTreeUpdater **v148;
  llvm::DomTreeUpdater **v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v154;
  llvm::Value *v155;
  uint64_t v156;
  llvm::Instruction *v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t ***v161;
  uint64_t ***v162;
  int v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t ***v168;
  _BOOL8 v169;
  uint64_t ***v170;
  uint64_t **v171;
  uint64_t **v172;
  uint64_t **v173;
  uint64_t **v174;
  uint64_t ***v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t **v179;
  _QWORD *v180;
  uint64_t **v181;
  uint64_t v182;
  llvm::ValueSymbolTable *v183;
  int v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  _QWORD **v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD **v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  llvm::DomTreeUpdater **v201;
  llvm::DomTreeUpdater **v202;
  llvm::Instruction *v203;
  llvm::DomTreeUpdater **v204;
  llvm::DomTreeUpdater **v205;
  uint64_t v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t ***v210;
  uint64_t v211;
  int v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  _BOOL8 v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  llvm::ValueSymbolTable *v228;
  unint64_t v229;
  uint64_t v230;
  llvm::DomTreeUpdater *v231;
  void *v232;
  llvm::Function *v233;
  _QWORD v234[2];
  int v235;
  __int128 v236;
  void *v237;
  uint64_t v238;
  _BYTE v239[256];
  void *v240;
  uint64_t v241;
  _BYTE v242[256];
  void *v243;
  uint64_t v244;
  _BYTE v245[256];
  llvm::DomTreeUpdater **v246;
  void *v247;
  uint64_t v248;
  llvm::OptimizationRemarkEmitter *v249;
  llvm::DomTreeUpdater *v250[2];
  void *v251;
  uint64_t v252;
  _BYTE v253[64];
  uint64_t *v254;
  uint64_t v255;
  void *v256;
  uint64_t v257;
  _BYTE v258[64];
  uint64_t v259;
  llvm::Instruction *v260;
  _BYTE *v261;
  void *v262;
  uint64_t v263;
  int v264;
  _BYTE v265[256];
  uint64_t (**v266)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  __int128 v267;
  __int128 v268;
  __int16 v269;
  void *v270;
  unsigned int v271;
  uint64_t v272;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  __int128 v276;
  const char *v277;
  const char *v278;
  uint64_t v279;
  char v280;
  char v281;
  void *v282;
  uint64_t v283;
  _BYTE v284[260];
  int v285;
  uint64_t v286;
  uint64_t v287;

  v9 = this;
  v287 = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)this + 14);
  if (!v10)
    goto LABEL_25;
  if (!*(_DWORD *)(v10 + 8))
    goto LABEL_25;
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
    goto LABEL_25;
  v12 = *(_DWORD *)(v11 + 40);
  if (!v12)
    goto LABEL_25;
  v13 = *(_QWORD *)(v11 + 24);
  v14 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v229 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v229 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v229;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v15 = __ROR8__(qword_1ED7EAC80 ^ 0xAE2F6180382EB467, 30);
  v16 = 0x9DDFEA08EB382D69
      * ((qword_1ED7EAC80 + 0x1ED4D83DFEF8CF66) ^ ((0x9DDFEA08EB382D69
                                                    * ((v15 - 0x58DDE70BBE0D1868) ^ (qword_1ED7EAC80
                                                                                     + 0x1ED4D83DFEF8CF66))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v15 - 0x58DDE70BBE0D1868) ^ (qword_1ED7EAC80 + 0x1ED4D83DFEF8CF66))));
  v17 = -348639895 * ((v16 >> 47) ^ v16);
  for (i = 1; ; ++i)
  {
    v19 = v17 & (v12 - 1);
    v20 = (uint64_t *)(v13 + 24 * v19);
    v21 = *v20;
    if (*v20 == -1)
    {
      if ("disable-tail-calls" == (char *)-1)
        goto LABEL_23;
      goto LABEL_9;
    }
    if (v21 != -2)
      break;
    if ("disable-tail-calls" == (char *)-2)
      goto LABEL_23;
LABEL_9:
    if (v21 == -1)
      goto LABEL_25;
    v17 = i + v19;
  }
  if (v20[1] != 18)
    goto LABEL_9;
  v22 = *(_QWORD *)v21 == 0x2D656C6261736964 && *(_QWORD *)(v21 + 8) == 0x6C61632D6C696174;
  if (!v22 || *(_WORD *)(v21 + 16) != 29548)
    goto LABEL_9;
LABEL_23:
  v24 = v20[2];
  if (v24 && *(_DWORD *)(v24 + 16) == 4 && *(_DWORD *)(v24 + *(unsigned int *)(v24 + 12) + 25) == *(_DWORD *)"true")
    return;
LABEL_25:
  v232 = a2;
  if ((llvm::Function::callsFunctionThatReturnsTwice(v9) & 1) != 0)
  {
    v27 = 0;
    goto LABEL_202;
  }
  v246 = v250;
  v247 = v250;
  v248 = 32;
  LODWORD(v249) = 0;
  v261 = v265;
  v262 = v265;
  v263 = 32;
  v264 = 0;
  if ((*((_BYTE *)v9 + 18) & 1) == 0)
  {
    v28 = *((_QWORD *)v9 + 11);
    goto LABEL_29;
  }
  llvm::Function::BuildLazyArguments(v9);
  v28 = *((_QWORD *)v9 + 11);
  if ((*((_WORD *)v9 + 9) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(v9);
    v29 = *((_QWORD *)v9 + 11);
  }
  else
  {
LABEL_29:
    v29 = v28;
  }
  v233 = v9;
  v30 = v29 + 40 * *((_QWORD *)v9 + 12);
  while (v28 != v30)
  {
    if (*(_BYTE *)(*(_QWORD *)v28 + 8) == 15)
    {
      v31 = *(_QWORD *)(*(_QWORD *)(v28 + 24) + 112);
      if (v31)
      {
        v32 = *(_DWORD *)(v28 + 32) + 2;
        if (v32 < *(_DWORD *)(v31 + 8))
        {
          v33 = *(_QWORD *)(v31 + 8 * v32 + 40);
          if (v33)
          {
            if ((*(_BYTE *)(v33 + 20) & 0x20) != 0)
              sub_1C5C578A8((uint64_t)&v246, *(_QWORD *)(v28 + 8));
          }
        }
      }
    }
    v28 += 40;
  }
  v230 = a3;
  v231 = a5;
  v34 = (char *)v9 + 72;
  v35 = (char *)*((_QWORD *)v9 + 10);
  if (v35 != (char *)v9 + 72)
  {
    do
    {
      v36 = v35 - 24;
      if (!v35)
        v36 = 0;
      v37 = v36 + 40;
      for (j = (_QWORD *)*((_QWORD *)v36 + 6); j != v37; j = (_QWORD *)j[1])
      {
        if (j && *((_BYTE *)j - 8) == 59)
          sub_1C5C578A8((uint64_t)&v246, *(j - 2));
      }
      v35 = (char *)*((_QWORD *)v35 + 1);
    }
    while (v35 != v34);
    v34 = (char *)*((_QWORD *)v9 + 10);
  }
  v27 = 0;
  v234[0] = 0;
  v234[1] = 0;
  v235 = 0;
  v243 = v245;
  if (v34)
    v39 = v34 - 24;
  else
    v39 = 0;
  v244 = 0x2000000000;
  v240 = v242;
  v241 = 0x2000000000;
  v237 = v239;
  v238 = 0x2000000000;
  v40 = 1;
LABEL_54:
  while (2)
  {
    v41 = v39 + 40;
    v42 = (_QWORD *)*((_QWORD *)v39 + 6);
    while (2)
    {
      if (v42 != v41)
      {
        if (v42)
          v43 = (uint64_t)(v42 - 3);
        else
          v43 = 0;
        v44 = sub_1C477672C((uint64_t)&v261, v43);
        if (v262 == v261)
          v45 = (uint64_t *)((char *)&v263 + 4);
        else
          v45 = &v263;
        if (v44 != (_QWORD *)((char *)v262 + 8 * *(unsigned int *)v45))
          v40 = 2;
        v46 = *(unsigned __int8 *)(v43 + 16);
        if (v46 == 84)
          v47 = v43;
        else
          v47 = 0;
        if (v42)
        {
          if (v46 == 84
            && (*(_WORD *)(v47 + 18) & 3u) - 1 >= 2
            && !sub_1C4D99D08(v43)
            && !sub_1C509DDB0(v43)
            && (~*(unsigned __int16 *)(v47 + 18) & 3) != 0)
          {
            v273 = (void *)0x700000006;
            if (!sub_1C53E4BBC(v47, (__int32 *)&v273, 2uLL))
            {
              v48 = *(_QWORD *)(v47 + 64);
              if (!v48 || (*(_BYTE *)(v48 + 17) & 0x10) == 0)
              {
                LODWORD(v273) = 7;
                if (sub_1C53E4BBC(v47, (__int32 *)&v273, 1uLL))
                {
                  v74 = *(_QWORD *)(v47 - 32);
                  if (!v74
                    || *(_BYTE *)(v74 + 16)
                    || *(_QWORD *)(v74 + 24) != *(_QWORD *)(v47 + 72)
                    || *(_DWORD *)(v74 + 36) != 7)
                  {
                    goto LABEL_93;
                  }
                }
                if (!llvm::CallBase::hasFnAttrOnCalledFunction(v47, 44))
                  goto LABEL_93;
              }
              v49 = *(unsigned __int8 *)(v47 + 16);
              if (v49 == 84)
              {
                v50 = 0;
              }
              else if (v49 == 39)
              {
                v50 = (*(_DWORD *)(v47 + 80) + 1);
              }
              else
              {
                v50 = 2;
              }
              v51 = *(_DWORD *)(v47 + 20);
              v52 = v51 & 0x7FFFFFF;
              v53 = v47 - 32 * v52;
              if (v51 < 0 && (v75 = *(_QWORD *)(v53 - 8), (v75 & 0xFFFFFFFF0) != 0))
                v54 = (*(_DWORD *)(v53 - 12) - *(_DWORD *)(v53 - v75));
              else
                v54 = 0;
              if (v53 == v47 - 32 * v50 - 32 * v54 - 32)
              {
LABEL_101:
                v65 = ****(_QWORD ****)a4;
                if (*(_QWORD *)(v65 + 128)
                  || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v65 + 72) + 48))(*(_QWORD *)(v65 + 72)) & 1) != 0)
                {
                  v66 = *(_QWORD *)(*(_QWORD *)(v47 + 40) + 56);
                  llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v236, (const llvm::DebugLoc *)(v47 + 48));
                  v67 = *(_QWORD *)(v47 + 40);
                  LODWORD(v274) = 9;
                  BYTE4(v274) = 2;
                  v276 = v236;
                  v275 = v66;
                  v277 = "tailcallelim";
                  v278 = "tailcall-readnone";
                  v279 = 17;
                  v280 = 0;
                  v281 = 0;
                  v282 = v284;
                  v283 = 0x400000000;
                  v284[256] = 0;
                  v285 = -1;
                  v286 = v67;
                  v273 = &off_1E814E500;
                  *(_QWORD *)&v236 = "marked as tail call candidate (readnone)";
                  *((_QWORD *)&v236 + 1) = 40;
                  sub_1C53B17B4((uint64_t)&v282, (const void **)&v236);
                  sub_1C61998EC((uint64_t)&v266, (uint64_t)&v273);
                  v266 = &off_1E814E500;
                  v273 = &off_1E814E790;
                  v68 = (char *)v282;
                  if ((_DWORD)v283)
                  {
                    v69 = (unint64_t)v283 << 6;
                    do
                    {
                      v70 = (void **)&v68[v69];
                      if (v68[v69 - 17] < 0)
                        operator delete(*(v70 - 5));
                      if (*((char *)v70 - 41) < 0)
                        operator delete(*(v70 - 8));
                      v69 -= 64;
                    }
                    while (v69);
                    v68 = (char *)v282;
                  }
                  if (v68 != v284)
                    free(v68);
                  llvm::OptimizationRemarkEmitter::emit(a4, (llvm::DiagnosticInfoOptimizationBase *)&v266);
                  v266 = &off_1E814E790;
                  v71 = (char *)v270;
                  if (v271)
                  {
                    v72 = (unint64_t)v271 << 6;
                    do
                    {
                      v73 = (void **)&v71[v72];
                      if (v71[v72 - 17] < 0)
                        operator delete(*(v73 - 5));
                      if (*((char *)v73 - 41) < 0)
                        operator delete(*(v73 - 8));
                      v72 -= 64;
                    }
                    while (v72);
                    v71 = (char *)v270;
                  }
                  if (v71 != (char *)&v272)
                    free(v71);
                }
                *(_WORD *)(v47 + 18) = *(_WORD *)(v47 + 18) & 0xFFFC | 1;
                v27 = 1;
              }
              else
              {
                v55 = 32 * v52 - 32 * v50 - 32 * v54 - 32;
                v56 = v53 + 24;
                while (1)
                {
                  v57 = *(_QWORD *)v56;
                  v58 = *(unsigned __int8 *)(*(_QWORD *)v56 + 16);
                  if (v58 >= 0x15)
                  {
                    if (v58 != 21)
                      break;
                    if (*(_BYTE *)(*(_QWORD *)v57 + 8) == 15)
                    {
                      v59 = *(_QWORD *)(*(_QWORD *)(v57 + 24) + 112);
                      if (v59)
                      {
                        v60 = *(_DWORD *)(v57 + 32) + 2;
                        if (v60 < *(_DWORD *)(v59 + 8))
                        {
                          v61 = *(_QWORD *)(v59 + 8 * v60 + 40);
                          if (v61)
                          {
                            if ((*(_BYTE *)(v61 + 20) & 0x20) != 0)
                              break;
                          }
                        }
                      }
                    }
                  }
                  v56 += 32;
                  v55 -= 32;
                  if (!v55)
                    goto LABEL_101;
                }
LABEL_93:
                if (v40 == 1)
                {
                  v62 = sub_1C477672C((uint64_t)&v246, v47);
                  v63 = v247 == v246 ? (uint64_t *)((char *)&v248 + 4) : &v248;
                  if (v62 == (_QWORD *)((char *)v247 + 8 * *(unsigned int *)v63))
                  {
                    v64 = v238;
                    if (v238 >= (unint64_t)HIDWORD(v238))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v237, (uint64_t)v239, v238 + 1, 8);
                      v64 = v238;
                    }
                    *((_QWORD *)v237 + v64) = v47;
                    LODWORD(v238) = v238 + 1;
                  }
                }
              }
            }
          }
        }
        v42 = (_QWORD *)v42[1];
        continue;
      }
      break;
    }
    v76 = (_QWORD *)*v41;
    if ((_QWORD *)*v41 != v41)
    {
      if (v76)
        v77 = v76 - 3;
      else
        v77 = 0;
      if (*((_BYTE *)v77 + 16) != 30)
      {
        v78 = 2;
        switch(*((_BYTE *)v77 + 16))
        {
          case 0x1E:
            __break(1u);
            return;
          case 0x1F:
            v78 = (*((_DWORD *)v77 + 5) >> 1) & 0x3FFFFFF;
            goto LABEL_163;
          case 0x20:
          case 0x26:
            v78 = (*((_DWORD *)v77 + 5) & 0x7FFFFFF) - 1;
            goto LABEL_163;
          case 0x21:
            goto LABEL_143;
          case 0x24:
            v78 = *((_WORD *)v77 + 9) & 1;
            goto LABEL_163;
          case 0x25:
            v78 = 1;
            goto LABEL_143;
          case 0x27:
            v78 = *((_DWORD *)v77 + 20) + 1;
LABEL_163:
            if (!v78)
              goto LABEL_155;
            goto LABEL_143;
          default:
            goto LABEL_155;
        }
      }
      if ((*((_DWORD *)v77 + 5) & 0x7FFFFFF) == 3)
        v78 = 2;
      else
        v78 = 1;
LABEL_143:
      for (k = 0; k != v78; ++k)
      {
        Successor = (void *)llvm::Instruction::getSuccessor((llvm::Instruction *)v77, k);
        v273 = Successor;
        v81 = sub_1C5C57C80((uint64_t)v234, (uint64_t *)&v273);
        if (*(_DWORD *)v81 < v40)
        {
          *(_DWORD *)v81 = v40;
          if (v40 == 2)
          {
            v82 = v241;
            v83 = &v240;
            if (v241 >= (unint64_t)HIDWORD(v241))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v240, (uint64_t)v242, v241 + 1, 8);
              v82 = v241;
            }
          }
          else
          {
            v82 = v244;
            v83 = &v243;
            if (v244 >= (unint64_t)HIDWORD(v244))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v243, (uint64_t)v245, v244 + 1, 8);
              v82 = v244;
            }
          }
          *((_QWORD *)*v83 + v82) = Successor;
          ++*((_DWORD *)v83 + 2);
        }
      }
    }
LABEL_155:
    if ((_DWORD)v241)
    {
      v39 = (char *)*((_QWORD *)v240 + v241 - 1);
      LODWORD(v241) = v241 - 1;
      v40 = 2;
      if (!v39)
        goto LABEL_169;
      continue;
    }
    break;
  }
  while ((_DWORD)v244)
  {
    v39 = (char *)*((_QWORD *)v243 + v244 - 1);
    LODWORD(v244) = v244 - 1;
    v273 = v39;
    if (*(_DWORD *)sub_1C5C57C80((uint64_t)v234, (uint64_t *)&v273) == 1)
    {
      v40 = 1;
      if (v39)
        goto LABEL_54;
      break;
    }
  }
LABEL_169:
  v84 = (char *)v237;
  if ((_DWORD)v238)
  {
    v85 = (char *)v237 + 8 * v238;
    a5 = v231;
    while (1)
    {
      v86 = *(_QWORD *)v84;
      v87 = *(void **)(*(_QWORD *)v84 + 40);
      v273 = v87;
      if (!v235)
        break;
      v88 = ((v87 >> 4) ^ (v87 >> 9)) & (v235 - 1);
      v89 = (_QWORD *)(v234[0] + 16 * v88);
      v90 = (void *)*v89;
      if (v87 != (void *)*v89)
      {
        v91 = 0;
        v92 = 1;
        while (v90 != (void *)-4096)
        {
          if (v91)
            v93 = 0;
          else
            v93 = v90 == (void *)-8192;
          if (v93)
            v91 = v89;
          v94 = v88 + v92++;
          v88 = v94 & (v235 - 1);
          v89 = (_QWORD *)(v234[0] + 16 * v88);
          v90 = (void *)*v89;
          if (v87 == (void *)*v89)
            goto LABEL_184;
        }
        if (v91)
          v95 = v91;
        else
          v95 = v89;
        goto LABEL_183;
      }
LABEL_184:
      if (*((_DWORD *)v89 + 2) != 2)
      {
        *(_WORD *)(v86 + 18) = *(_WORD *)(v86 + 18) & 0xFFFC | 1;
        v27 = 1;
      }
      v84 += 8;
      if (v84 == v85)
      {
        v84 = (char *)v237;
        goto LABEL_192;
      }
    }
    v95 = 0;
LABEL_183:
    v89 = sub_1C56163E4((uint64_t)v234, (uint64_t *)&v273, v95);
    *v89 = v87;
    *((_DWORD *)v89 + 2) = 0;
    goto LABEL_184;
  }
  a5 = v231;
LABEL_192:
  a3 = v230;
  if (v84 != v239)
    free(v84);
  if (v240 != v242)
    free(v240);
  v9 = v233;
  if (v243 != v245)
    free(v243);
  MEMORY[0x1CAA32FB4](v234[0], 8);
  if (v262 != v261)
    free(v262);
  if (v247 != v246)
    free(v247);
LABEL_202:
  if (*(_DWORD *)(*((_QWORD *)v9 + 3) + 8) > 0xFFu)
    return;
  v96 = (char *)v9 + 72;
  v97 = (char *)*((_QWORD *)v9 + 10);
  if (v97 != (char *)v9 + 72)
  {
    v98 = v97 - 24;
    if (!v97)
      v98 = 0;
    v99 = v98 + 40;
    v100 = (_QWORD *)*((_QWORD *)v98 + 6);
    v101 = *((_QWORD *)v9 + 10);
    if (v100 != v99)
    {
      while (1)
      {
LABEL_212:
        v104 = v100 - 3;
        if (!v100)
          v104 = 0;
        if (*((_BYTE *)v104 + 16) == 59)
        {
          if (*(_BYTE *)(*(v104 - 4) + 16) != 16)
            break;
          v105 = v104[5];
          v106 = *(_QWORD *)(*(_QWORD *)(v105 + 56) + 80);
          v107 = v106 ? v106 - 24 : 0;
          if (v105 != v107 || (*((_WORD *)v104 + 9) & 0x40) != 0)
            break;
        }
        v100 = (_QWORD *)v100[1];
        v108 = v101 - 24;
        if (!v101)
          v108 = 0;
        v109 = (_QWORD *)(v108 + 40);
        while (v100 == v109)
        {
          v101 = *(_QWORD *)(v101 + 8);
          if ((char *)v101 == v96)
            goto LABEL_230;
          v110 = v101 - 24;
          if (!v101)
            v110 = 0;
          v109 = (_QWORD *)(v110 + 40);
          v100 = *(_QWORD **)(v110 + 48);
        }
        if ((char *)v101 == v96)
          goto LABEL_230;
      }
      return;
    }
    v101 = *((_QWORD *)v9 + 10);
    while (1)
    {
      v101 = *(_QWORD *)(v101 + 8);
      if ((char *)v101 == v96)
        break;
      v102 = v101 - 24;
      if (!v101)
        v102 = 0;
      v103 = (_QWORD *)(v102 + 40);
      v100 = *(_QWORD **)(v102 + 48);
      if (v100 != v103)
        goto LABEL_212;
    }
  }
LABEL_230:
  v246 = (llvm::DomTreeUpdater **)v9;
  v247 = v232;
  v248 = a3;
  v249 = a4;
  v250[0] = a5;
  v250[1] = 0;
  v251 = v253;
  v252 = 0x800000000;
  v255 = 0;
  v254 = 0;
  v256 = v258;
  v257 = 0x800000000;
  v260 = 0;
  v259 = 0;
  if (v97 == v96)
    goto LABEL_291;
  do
  {
    if (v97)
      v111 = (llvm::BasicBlock *)(v97 - 24);
    else
      v111 = 0;
    v112 = (_QWORD *)*((_QWORD *)v111 + 5);
    if (v112 == (_QWORD *)((char *)v111 + 40))
    {
      v116 = MEMORY[0x10];
LABEL_266:
      if (v116 != 29)
        goto LABEL_269;
      v122 = (uint64_t)sub_1C5C57CE8((uint64_t)&v246, (uint64_t)v111);
      if (v122)
        LOBYTE(v122) = sub_1C5C57FB8((llvm::Function **)&v246, v122);
      goto LABEL_270;
    }
    v113 = v112 - 3;
    if (!v112)
      v113 = 0;
    v114 = *((unsigned __int8 *)v113 + 16) - 40;
    if (v114 >= 0xFFFFFFF5)
      v115 = v113;
    else
      v115 = 0;
    v116 = *((unsigned __int8 *)v115 + 16);
    if (!v112)
      goto LABEL_266;
    if (v116 != 30 || v114 < 0xFFFFFFF5)
      goto LABEL_266;
    if ((*((_DWORD *)v115 + 5) & 0x7FFFFFF) == 3
      || ((v118 = (llvm::BasicBlock *)*(v115 - 4),
           (FirstNonPHIOrDbg = llvm::BasicBlock::getFirstNonPHIOrDbg(v118, 1)) != 0)
        ? (v120 = FirstNonPHIOrDbg[16] == 29)
        : (v120 = 0),
          !v120))
    {
LABEL_269:
      LOBYTE(v122) = 0;
      goto LABEL_270;
    }
    v121 = (llvm *)FirstNonPHIOrDbg;
    v122 = (uint64_t)sub_1C5C57CE8((uint64_t)&v246, (uint64_t)v111);
    if (v122)
    {
      v123 = v122;
      llvm::FoldReturnIntoUncondBranch(v121, v118, v111, v250[0], v25);
      v124 = *((_QWORD *)v118 + 1);
      if (v124)
      {
        while (1)
        {
          v125 = *(_QWORD *)(v124 + 24);
          v126 = *(unsigned __int8 *)(v125 + 16);
          v127 = v125 && v126 >= 0x1C;
          if (v127 && v126 - 29 < 0xB)
            break;
          v124 = *(_QWORD *)(v124 + 8);
          if (!v124)
            goto LABEL_263;
        }
      }
      else
      {
LABEL_263:
        llvm::DomTreeUpdater::deleteBB(v250[0], v118);
      }
      sub_1C5C57FB8((llvm::Function **)&v246, v123);
      LOBYTE(v122) = 1;
    }
LABEL_270:
    v27 |= v122;
    v97 = (char *)*((_QWORD *)v97 + 1);
  }
  while (v97 != v96);
  if ((_DWORD)v252)
  {
    v129 = (char *)v251;
    v130 = (char *)v251 + 8 * v252;
    do
    {
      v131 = *(_QWORD *)v129;
      v266 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))((char *)v246[5] + 272);
      v267 = 0u;
      v268 = 0u;
      v269 = 257;
      v132 = *(_DWORD *)(v131 + 20);
      if ((v132 & 0x40000000) != 0)
      {
        v134 = *(uint64_t **)(v131 - 8);
        v133 = v132 & 0x7FFFFFF;
      }
      else
      {
        v133 = v132 & 0x7FFFFFF;
        v134 = (uint64_t *)(v131 - 32 * v133);
      }
      v273 = &v275;
      v274 = 0x800000000;
      if (v133 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)&v275, v133, 8);
        v135 = v274;
        v137 = (uint64_t *)v273;
        v136 = v274;
      }
      else
      {
        v135 = 0;
        if (!v133)
        {
          v141 = &v275;
          goto LABEL_282;
        }
        v136 = 0;
        v137 = &v275;
      }
      v138 = 32 * v133;
      v139 = &v137[v136];
      do
      {
        v140 = *v134;
        v134 += 4;
        *v139++ = v140;
        v138 -= 32;
      }
      while (v138);
      v141 = (uint64_t *)v273;
LABEL_282:
      LODWORD(v274) = v135 + v133;
      v142 = llvm::SimplifyInstructionWithOperands((llvm *)v131, (uint64_t)v141, (v135 + v133), (uint64_t)&v266, v25, v26);
      if (v273 != &v275)
      {
        free(v273);
        if (!v142)
          goto LABEL_285;
LABEL_284:
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v131, v142, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v131 + 40) + 40, (uint64_t ***)v131);
        v143 = *(_QWORD *)(v131 + 24);
        v144 = *(_QWORD **)(v131 + 32);
        *v144 = v143;
        *(_QWORD *)(v143 + 8) = v144;
        *(_QWORD *)(v131 + 24) = 0;
        *(_QWORD *)(v131 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v131);
        goto LABEL_285;
      }
      if (v142)
        goto LABEL_284;
LABEL_285:
      v129 += 8;
    }
    while (v129 != v130);
  }
LABEL_291:
  v145 = v254;
  if (v254)
  {
    if ((_DWORD)v257)
    {
      v146 = v246 + 9;
      v147 = (llvm::DomTreeUpdater **)v246[10];
      if (v147 != v246 + 9)
      {
        do
        {
          if (v147)
            v148 = v147 - 3;
          else
            v148 = 0;
          v149 = (llvm::DomTreeUpdater **)v148[5];
          if (v149 != v148 + 5)
          {
            v150 = v149 ? (uint64_t)(v149 - 3) : 0;
            v151 = *(unsigned __int8 *)(v150 + 16) - 40;
            v152 = v151 >= 0xFFFFFFF5 ? v150 : 0;
            if (v149)
            {
              if (*(_BYTE *)(v152 + 16) == 29 && v151 >= 0xFFFFFFF5)
              {
                v154 = *(_QWORD *)(v152 - 32 * (*(_DWORD *)(v152 + 20) & 0x7FFFFFF));
                v273 = "current.ret.tr";
                WORD4(v276) = 259;
                v155 = sub_1C4FC8748(v255, v254, v154, (uint64_t)&v273, v152, 0);
                v156 = v257;
                if (v257 >= (unint64_t)HIDWORD(v257))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v256, (uint64_t)v258, v257 + 1, 8);
                  v156 = v257;
                }
                *((_QWORD *)v256 + v156) = v155;
                LODWORD(v257) = v257 + 1;
                LLVMSetArgOperand_0(v152, 0, (uint64_t)v155);
              }
            }
          }
          v147 = (llvm::DomTreeUpdater **)v147[1];
        }
        while (v147 != v146);
      }
      if (v259 && (_DWORD)v257)
      {
        v157 = v260;
        v158 = (uint64_t *)v256;
        v159 = 8 * v257;
        do
        {
          v160 = *v158;
          llvm::Instruction::clone(v157);
          v162 = v161;
          v273 = "accumulator.ret.tr";
          WORD4(v276) = 259;
          llvm::Value::setName(v161, (uint64_t)&v273);
          v163 = *((_DWORD *)v157 + 5);
          if ((v163 & 0x40000000) != 0)
            v164 = (uint64_t *)*((_QWORD *)v157 - 1);
          else
            v164 = (uint64_t *)((char *)v157 - 32 * (v163 & 0x7FFFFFF));
          v165 = *v164;
          v166 = *(_QWORD *)(v160 - 32);
          v167 = *((_DWORD *)v162 + 5);
          if ((v167 & 0x40000000) != 0)
            v168 = (uint64_t ***)*(v162 - 1);
          else
            v168 = &v162[-4 * (v167 & 0x7FFFFFF)];
          v169 = v165 == v259;
          v170 = &v168[4 * v169];
          if (*v170)
          {
            *v170[2] = (uint64_t *)v170[1];
            v171 = v170[1];
            if (v171)
              v171[2] = (uint64_t *)v170[2];
          }
          *v170 = (uint64_t **)v166;
          if (v166)
          {
            v174 = *(uint64_t ***)(v166 + 8);
            v172 = (uint64_t **)(v166 + 8);
            v173 = v174;
            v175 = &v168[4 * v169];
            v175[1] = v174;
            if (v174)
              v173[2] = (uint64_t *)(v175 + 1);
            v175[2] = v172;
            *v172 = (uint64_t *)v170;
          }
          v176 = *(_QWORD *)(v160 + 40);
          v162[5] = (uint64_t **)v176;
          *(_WORD *)(v176 + 18) &= ~0x8000u;
          if ((*((_BYTE *)v162 + 23) & 0x10) != 0)
          {
            v182 = *(_QWORD *)(v176 + 56);
            if (v182)
            {
              v183 = *(llvm::ValueSymbolTable **)(v182 + 104);
              if (v183)
                llvm::ValueSymbolTable::reinsertValue(v183, (llvm::Value *)v162);
            }
          }
          v177 = *(_QWORD *)(v160 + 24);
          v162[3] = (uint64_t **)v177;
          v162[4] = (uint64_t **)(v160 + 24);
          *(_QWORD *)(v177 + 8) = v162 + 3;
          *(_QWORD *)(v160 + 24) = v162 + 3;
          if (*(_QWORD *)(v160 - 32))
          {
            **(_QWORD **)(v160 - 16) = *(_QWORD *)(v160 - 24);
            v178 = *(_QWORD *)(v160 - 24);
            if (v178)
              *(_QWORD *)(v178 + 16) = *(_QWORD *)(v160 - 16);
          }
          *(_QWORD *)(v160 - 32) = v162;
          v181 = v162[1];
          v180 = v162 + 1;
          v179 = v181;
          *(_QWORD *)(v160 - 24) = v181;
          if (v181)
            v179[2] = (uint64_t *)(v160 - 24);
          *(_QWORD *)(v160 - 16) = v180;
          *v180 = v160 - 32;
          ++v158;
          v159 -= 8;
        }
        while (v159);
      }
      goto LABEL_395;
    }
    v184 = *((_DWORD *)v254 + 5);
    if ((v184 & 0x40000000) != 0)
    {
      v186 = (uint64_t *)*(v254 - 1);
      v185 = v184 & 0x7FFFFFF;
      if (v185)
        goto LABEL_343;
    }
    else
    {
      v185 = v184 & 0x7FFFFFF;
      v186 = &v254[-4 * v185];
      if (v185)
      {
LABEL_343:
        v187 = 32 * v185;
        v188 = (_QWORD **)(v186 + 2);
        do
        {
          if (*(v188 - 2))
          {
            **v188 = *(v188 - 1);
            v189 = (uint64_t)*(v188 - 1);
            if (v189)
              *(_QWORD *)(v189 + 16) = *v188;
          }
          *(v188 - 2) = 0;
          v188 += 4;
          v187 -= 32;
        }
        while (v187);
        v145 = v254;
      }
    }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v145[5] + 40, (uint64_t ***)v145);
    v190 = v145[3];
    v191 = (uint64_t *)v145[4];
    *v191 = v190;
    *(_QWORD *)(v190 + 8) = v191;
    v145[3] = 0;
    v145[4] = 0;
    llvm::Value::deleteValue((llvm::Value *)v145);
    v192 = v255;
    v193 = *(_DWORD *)(v255 + 20);
    if ((v193 & 0x40000000) != 0)
    {
      v195 = *(_QWORD *)(v255 - 8);
      v194 = v193 & 0x7FFFFFF;
      if (v194)
        goto LABEL_351;
    }
    else
    {
      v194 = v193 & 0x7FFFFFF;
      v195 = v255 - 32 * v194;
      if (v194)
      {
LABEL_351:
        v196 = 32 * v194;
        v197 = (_QWORD **)(v195 + 16);
        do
        {
          if (*(v197 - 2))
          {
            **v197 = *(v197 - 1);
            v198 = (uint64_t)*(v197 - 1);
            if (v198)
              *(_QWORD *)(v198 + 16) = *v197;
          }
          *(v197 - 2) = 0;
          v197 += 4;
          v196 -= 32;
        }
        while (v196);
        v192 = v255;
      }
    }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v192 + 40) + 40, (uint64_t ***)v192);
    v199 = *(_QWORD *)(v192 + 24);
    v200 = *(_QWORD **)(v192 + 32);
    *v200 = v199;
    *(_QWORD *)(v199 + 8) = v200;
    *(_QWORD *)(v192 + 24) = 0;
    *(_QWORD *)(v192 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v192);
    if (v259)
    {
      v201 = v246 + 9;
      v202 = (llvm::DomTreeUpdater **)v246[10];
      if (v202 != v246 + 9)
      {
        v203 = v260;
        do
        {
          if (v202)
            v204 = v202 - 3;
          else
            v204 = 0;
          v205 = (llvm::DomTreeUpdater **)v204[5];
          if (v205 != v204 + 5)
          {
            v206 = v205 ? (uint64_t)(v205 - 3) : 0;
            v207 = *(unsigned __int8 *)(v206 + 16) - 40;
            v208 = v207 >= 0xFFFFFFF5 ? v206 : 0;
            if (v205)
            {
              if (*(_BYTE *)(v208 + 16) == 29 && v207 >= 0xFFFFFFF5)
              {
                llvm::Instruction::clone(v203);
                v211 = (uint64_t)v210;
                v273 = "accumulator.ret.tr";
                WORD4(v276) = 259;
                llvm::Value::setName(v210, (uint64_t)&v273);
                v212 = *((_DWORD *)v203 + 5);
                if ((v212 & 0x40000000) != 0)
                  v213 = (uint64_t *)*((_QWORD *)v203 - 1);
                else
                  v213 = (uint64_t *)((char *)v203 - 32 * (v212 & 0x7FFFFFF));
                v214 = *v213;
                v215 = *(_QWORD *)(v208 - 32 * (*(_DWORD *)(v208 + 20) & 0x7FFFFFF));
                v216 = *(_DWORD *)(v211 + 20);
                if ((v216 & 0x40000000) != 0)
                  v217 = *(_QWORD *)(v211 - 8);
                else
                  v217 = v211 - 32 * (v216 & 0x7FFFFFF);
                v218 = v214 == v259;
                v219 = v217 + 32 * v218;
                if (*(_QWORD *)v219)
                {
                  **(_QWORD **)(v219 + 16) = *(_QWORD *)(v219 + 8);
                  v220 = *(_QWORD *)(v219 + 8);
                  if (v220)
                    *(_QWORD *)(v220 + 16) = *(_QWORD *)(v219 + 16);
                }
                *(_QWORD *)v219 = v215;
                if (v215)
                {
                  v223 = *(_QWORD *)(v215 + 8);
                  v221 = (uint64_t *)(v215 + 8);
                  v222 = v223;
                  v224 = v217 + 32 * v218;
                  *(_QWORD *)(v224 + 8) = v223;
                  if (v223)
                    *(_QWORD *)(v222 + 16) = v224 + 8;
                  *(_QWORD *)(v224 + 16) = v221;
                  *v221 = v219;
                }
                v225 = *(_QWORD *)(v208 + 40);
                *(_QWORD *)(v211 + 40) = v225;
                *(_WORD *)(v225 + 18) &= ~0x8000u;
                if ((*(_BYTE *)(v211 + 23) & 0x10) != 0)
                {
                  v227 = *(_QWORD *)(v225 + 56);
                  if (v227)
                  {
                    v228 = *(llvm::ValueSymbolTable **)(v227 + 104);
                    if (v228)
                      llvm::ValueSymbolTable::reinsertValue(v228, (llvm::Value *)v211);
                  }
                }
                v226 = *(_QWORD *)(v208 + 24);
                *(_QWORD *)(v211 + 32) = v208 + 24;
                *(_QWORD *)(v211 + 24) = v226;
                *(_QWORD *)(v226 + 8) = v211 + 24;
                *(_QWORD *)(v208 + 24) = v211 + 24;
                LLVMSetArgOperand_0(v208, 0, v211);
              }
            }
          }
          v202 = (llvm::DomTreeUpdater **)v202[1];
        }
        while (v202 != v201);
      }
    }
  }
LABEL_395:
  if (v256 != v258)
    free(v256);
  if (v251 != v253)
    free(v251);
}

uint64_t sub_1C5C574CC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5C55C80(v0);
}

void sub_1C5C574F8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5C5751C(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::OptimizationRemarkEmitterWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
}

uint64_t sub_1C5C575AC(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  uint64_t v4;
  uint64_t *v5;
  llvm::PMDataManager *v6;
  uint64_t AnalysisPass;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char **v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char **v18;
  char *v19;
  uint64_t v20;
  void **v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  void **v27[2];
  int v28;
  _QWORD v29[2];
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  void *v34[2];
  _QWORD v35[36];
  char v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  int v40;
  _BYTE v41[64];
  _QWORD v42[3];
  __int16 v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0)
    return 0;
  v5 = (uint64_t *)*((_QWORD *)a1 + 1);
  v6 = (llvm::PMDataManager *)v5[3];
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(v6, llvm::DominatorTreeWrapperPass::ID, 1);
  if (AnalysisPass)
  {
    AnalysisPass = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, llvm::DominatorTreeWrapperPass::ID);
    v5 = (uint64_t *)*((_QWORD *)a1 + 1);
    v6 = (llvm::PMDataManager *)v5[3];
  }
  if (AnalysisPass)
    v8 = AnalysisPass + 32;
  else
    v8 = 0;
  v9 = llvm::PMDataManager::findAnalysisPass(v6, &llvm::PostDominatorTreeWrapperPass::ID, 1);
  if (v9)
  {
    v9 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v9 + 96))(v9, &llvm::PostDominatorTreeWrapperPass::ID);
    v5 = (uint64_t *)*((_QWORD *)a1 + 1);
  }
  v10 = v9 + 32;
  if (!v9)
    v10 = 0;
  v34[0] = v35;
  v34[1] = (void *)0x1000000000;
  v35[32] = 0;
  v35[33] = 0;
  v35[34] = v8;
  v35[35] = v10;
  v36 = 0;
  v37 = v41;
  v38 = v41;
  v39 = 8;
  v40 = 0;
  memset(v42, 0, sizeof(v42));
  v43 = 0;
  v11 = (char **)*v5;
  do
  {
    v12 = *v11;
    v11 += 2;
  }
  while (v12 != llvm::TargetTransformInfoWrapperPass::ID);
  v13 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v27[0] = 0;
  v27[1] = 0;
  v28 = 0;
  v29[0] = 0;
  v29[1] = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v14 = *(_QWORD *)(v13 + 56);
  if (v14)
  {
    v5 = v29;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, const llvm::Function *))(*(_QWORD *)v14 + 48))(&v26, v14, a2);
    v6 = (llvm::PMDataManager *)(v13 + 64);
    v15 = v26;
    if (!*(_BYTE *)(v13 + 72))
    {
      *(_QWORD *)(v13 + 64) = v26;
      *(_BYTE *)(v13 + 72) = 1;
      goto LABEL_18;
    }
    v26 = 0;
    v16 = *(_QWORD *)v6;
    *(_QWORD *)v6 = v15;
    if (!v16)
      goto LABEL_18;
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v26;
    v26 = 0;
    if (!v17)
      goto LABEL_18;
  }
  else
  {
    sub_1C485C2F0();
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
LABEL_18:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v5);
  sub_1C4D8B52C((uint64_t *)v27);
  v18 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v19 = *v18;
    v18 += 2;
  }
  while (v19 != llvm::AAResultsWrapperPass::ID);
  v20 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v18 - 1) + 96))(*(v18 - 1), llvm::AAResultsWrapperPass::ID)+ 32);
  v21 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v22 = *v21;
    v21 += 2;
  }
  while (v22 != &llvm::OptimizationRemarkEmitterWrapperPass::ID);
  v23 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v21 - 1) + 96))(*(v21 - 1), &llvm::OptimizationRemarkEmitterWrapperPass::ID);
  sub_1C5C55F40(a2, v6, v20, *(llvm::OptimizationRemarkEmitter **)(v23 + 32), (llvm::DomTreeUpdater *)v34);
  v4 = v24;
  llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)v34);
  v27[0] = (void **)v42;
  sub_1C50B10F0(v27);
  if (v38 != v37)
    free(v38);
  if (v34[0] != v35)
    free(v34[0]);
  return v4;
}

void sub_1C5C578A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  int v32;
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  int v38;
  _BYTE v39[256];
  void *v40;
  uint64_t v41;
  _QWORD v42[33];

  v42[32] = *MEMORY[0x1E0C80C00];
  v40 = v42;
  v41 = 0x2000000000;
  v35 = v39;
  v36 = v39;
  v37 = 32;
  v38 = 0;
  if (a2)
  {
    v2 = a2;
    do
    {
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v35, v2);
      if (v4)
      {
        v5 = v41;
        if (v41 >= (unint64_t)HIDWORD(v41))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, (uint64_t)v42, v41 + 1, 8);
          v5 = v41;
        }
        *((_QWORD *)v40 + v5) = v2;
        LODWORD(v41) = v41 + 1;
      }
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2);
    v6 = v41;
    if ((_DWORD)v41)
    {
      while (1)
      {
        v7 = *((_QWORD *)v40 + --v6);
        LODWORD(v41) = v6;
        v8 = *(_QWORD *)(v7 + 24);
        v9 = *(unsigned __int8 *)(v8 + 16);
        if ((v9 - 61) <= 0x18)
        {
          if (((1 << (v9 - 61)) & 0x1430002) != 0)
            goto LABEL_45;
          if (v9 == 61)
          {
            v18 = *(_DWORD *)(v8 + 20);
            if ((v18 & 0x40000000) != 0)
              v19 = *(_QWORD *)(v8 - 8);
            else
              v19 = v8 - 32 * (v18 & 0x7FFFFFF);
            if (((v7 - v19) & 0x1FFFFFFFE0) == 0)
              sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 288), *(_QWORD *)(v7 + 24));
            goto LABEL_35;
          }
          if (v9 == 84)
            goto LABEL_15;
        }
        if (v9 != 60)
          break;
LABEL_36:
        if (!v6)
          goto LABEL_62;
      }
      if (v9 != 33)
        goto LABEL_44;
LABEL_15:
      v10 = *(_DWORD *)(v8 + 20);
      v11 = -(uint64_t)(v10 & 0x7FFFFFF);
      v12 = v8 - 32 * (v10 & 0x7FFFFFF);
      if (v12 <= v7)
      {
        v13 = v9 == 84 ? 0 : 2;
        if (v10 < 0 && (v34 = *(_QWORD *)(v12 - 8), (v34 & 0xFFFFFFFF0) != 0))
          v14 = (*(_DWORD *)(v12 - 12) - *(_DWORD *)(v12 - v34));
        else
          v14 = 0;
        if (v8 - 32 * v13 - 32 * v14 - 32 > v7)
        {
          if ((llvm::CallBase::paramHasAttr(*(_QWORD *)(v7 + 24), (v7 - v12) >> 5, 69) & 1) != 0)
          {
LABEL_35:
            v6 = v41;
            goto LABEL_36;
          }
          v11 = -(uint64_t)(*(_DWORD *)(v8 + 20) & 0x7FFFFFF);
        }
      }
      v15 = v8 + 32 * v11;
      if (v15 > v7
        || ((v16 = *(unsigned __int8 *)(v8 + 16), v16 == 84)
          ? (v17 = 0)
          : v16 != 39
          ? (v17 = 2)
          : (v17 = (*(_DWORD *)(v8 + 80) + 1)),
            v8 - 32 * v17 - 32 <= v7))
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, v8);
      }
      else
      {
        v20 = sub_1C4D91D40(v8, (v7 - v15) >> 5, 22);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, v8);
        if ((v20 & 1) != 0)
          goto LABEL_35;
      }
      v21 = *(_QWORD *)(v8 + 64);
      if (!v21 || (*(_BYTE *)(v21 + 17) & 0x30) == 0)
      {
        v22 = *(_DWORD *)(v8 + 20);
        if (v22 < 0)
        {
          v25 = v8 - 32 * (v22 & 0x7FFFFFF);
          v28 = *(_QWORD *)(v25 - 8);
          v26 = v25 - 8;
          v27 = v28;
          if (v28)
          {
            v29 = -v27;
            do
            {
              v30 = *(_DWORD *)(*(_QWORD *)(v26 + v29) + 8);
              v31 = v30 > 7;
              v32 = (1 << v30) & 0x83;
              if (v31 || v32 == 0)
                goto LABEL_44;
              v29 += 16;
            }
            while (v29);
          }
        }
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v8, 45) & 1) == 0
          && (llvm::CallBase::hasFnAttrOnCalledFunction(v8, 44) & 1) == 0)
        {
LABEL_44:
          sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 288), v8);
        }
      }
LABEL_45:
      while (1)
      {
        v8 = *(_QWORD *)(v8 + 8);
        if (!v8)
          break;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v35, v8);
        if (v23)
        {
          v24 = v41;
          if (v41 >= (unint64_t)HIDWORD(v41))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, (uint64_t)v42, v41 + 1, 8);
            v24 = v41;
          }
          *((_QWORD *)v40 + v24) = v8;
          LODWORD(v41) = v41 + 1;
        }
      }
      goto LABEL_35;
    }
  }
LABEL_62:
  if (v36 != v35)
    free(v36);
  if (v40 != v42)
    free(v40);
}

_QWORD *sub_1C5C57C80(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C56163E4(a1, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5 + 1;
}

_QWORD *sub_1C5C57CE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  llvm::Function *v29;
  uint64_t v30;
  llvm::Function *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;

  v4 = *(_QWORD *)(a2 + 40);
  if (v4 == a2 + 40)
  {
    v6 = 0;
  }
  else
  {
    if (v4)
      v5 = v4 - 24;
    else
      v5 = 0;
    if (*(unsigned __int8 *)(v5 + 16) - 29 >= 0xB)
      v6 = 0;
    else
      v6 = v5;
  }
  v7 = *(_QWORD **)(a2 + 48);
  if (v7)
    v8 = (uint64_t)(v7 - 3);
  else
    v8 = 0;
  if (v8 == v6)
    return 0;
  v9 = (_QWORD *)(v6 + 24);
  if (!v6)
    v9 = 0;
  while (1)
  {
    v10 = v9 - 3;
    v11 = v9 ? (uint64_t)(v9 - 3) : 0;
    v12 = *(unsigned __int8 *)(v11 + 16);
    v13 = v12 == 84 ? v11 : 0;
    if (v9 && v12 == 84)
    {
      v14 = *(_QWORD *)(v13 - 32);
      if (!v14 || *(_BYTE *)(v14 + 16) || *(_QWORD *)(v14 + 24) != *(_QWORD *)(v13 + 72))
        v14 = 0;
      if (v14 == *(_QWORD *)a1)
        break;
    }
    if (v9 == v7)
      return 0;
    v9 = (_QWORD *)*v9;
  }
  if ((*(_WORD *)(v13 + 18) & 3u) - 1 > 1)
    return 0;
  v15 = *(_QWORD *)(v14 + 80);
  if (v15)
    v16 = v15 - 24;
  else
    v16 = 0;
  if (v16 == a2)
  {
    if (sub_1C4D99D08(v8))
    {
      v17 = v8 + 24;
      do
      {
        v17 = *(_QWORD *)(v17 + 8);
        if (v17)
          v8 = v17 - 24;
        else
          v8 = 0;
      }
      while (sub_1C4D99D08(v8));
    }
    if (v8 != v13)
      return (_QWORD *)v13;
    v10 = (_QWORD *)v11;
    v18 = *(_QWORD *)(a2 + 48);
    do
    {
      v18 = *(_QWORD *)(v18 + 8);
      if (v18)
        v19 = v18 - 24;
      else
        v19 = 0;
    }
    while (sub_1C4D99D08(v19));
    if (v19 == v6)
    {
      v21 = *(_QWORD *)(v13 - 32);
      if (v21
        && !*(_BYTE *)(v21 + 16)
        && *(_QWORD *)(v21 + 24) == *(_QWORD *)(v13 + 72)
        && ((*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 176))(**(_QWORD **)(a1 + 8)) & 1) == 0)
      {
        v22 = *(_DWORD *)(v13 + 20);
        v23 = v22 & 0x7FFFFFF;
        v24 = (_QWORD *)(v13 - 32 * v23);
        v25 = *(unsigned __int8 *)(v13 + 16);
        if (v25 == 84)
        {
          v26 = 0;
        }
        else if (v25 == 39)
        {
          v26 = (*(_DWORD *)(v13 + 80) + 1);
        }
        else
        {
          v26 = 2;
        }
        if (v22 < 0 && (v35 = *(v24 - 1), (v35 & 0xFFFFFFFF0) != 0))
          v27 = (*((_DWORD *)v24 - 3) - *(_DWORD *)((char *)v24 - v35));
        else
          v27 = 0;
        v28 = v13 - 32 * v26 - 32 * v27 - 32;
        v29 = *(llvm::Function **)a1;
        if ((*(_WORD *)(*(_QWORD *)a1 + 18) & 1) != 0)
        {
          llvm::Function::BuildLazyArguments(*(llvm::Function **)a1);
          v31 = *(llvm::Function **)a1;
          v30 = *((_QWORD *)v29 + 11);
          if ((*((_WORD *)v31 + 9) & 1) != 0)
            llvm::Function::BuildLazyArguments(v31);
          v29 = v31;
        }
        else
        {
          v30 = *((_QWORD *)v29 + 11);
        }
        v32 = *((_QWORD *)v29 + 11) + 40 * *((_QWORD *)v29 + 12);
        if (v24 != (_QWORD *)v28 && v30 != v32)
        {
          v33 = 32 * v23 - 32 * v26 - 32 * v27 - 64;
          do
          {
            if (v30 != *v24)
              break;
            v24 += 4;
            v30 += 40;
            if (!v33)
              break;
            v33 -= 32;
          }
          while (v30 != v32);
        }
        if (v30 == v32 && v24 == (_QWORD *)v28)
          return 0;
        else
          return (_QWORD *)v13;
      }
    }
    else
    {
      return (_QWORD *)v13;
    }
  }
  return v10;
}

uint64_t sub_1C5C57FB8(llvm::Function **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  const llvm::DataLayout *v20;
  void *v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  _BOOL4 isSafeToLoadUnconditionally;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  BOOL v43;
  int v44;
  _QWORD *v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  void *v51;
  llvm::OptimizationRemarkEmitter *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  llvm::PointerType *v62;
  uint64_t v63;
  unsigned int ParamAlignment;
  _DWORD *v65;
  _DWORD *v66;
  llvm::Value *v67;
  unsigned __int8 v68;
  uint64_t ***v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t ****v74;
  uint64_t ***v75;
  int v76;
  int v77;
  uint64_t ***v78;
  unint64_t v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  llvm::Type *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  BOOL v91;
  const char *v92;
  const llvm::APInt *v93;
  char v94;
  char v95;
  unint64_t v96;
  llvm::ConstantInt *v97;
  unsigned int v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  llvm::PHINode *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  BOOL v123;
  const char *v124;
  const llvm::APInt *v125;
  char v126;
  char v127;
  unint64_t v128;
  llvm::ConstantInt *v129;
  unsigned int v130;
  unint64_t v131;
  uint64_t *v132;
  llvm::Function *v133;
  unsigned __int8 v134;
  llvm::PHINode *v135;
  llvm::Function *v136;
  uint64_t v137;
  llvm::Function *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  BOOL v142;
  char v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  BOOL v150;
  int v152;
  uint64_t *v153;
  _QWORD *v154;
  _QWORD *v155;
  llvm::Value *v156;
  char *v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  int v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  llvm::PHINode *v167;
  uint64_t v168;
  int v169;
  llvm::ConstantFP *v170;
  void *Zero;
  unsigned int v172;
  BOOL v173;
  _BOOL8 v175;
  llvm::Function *v176;
  llvm::Function **v177;
  llvm::Function *v178;
  llvm::Function ***v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  llvm::PHINode *v186;
  llvm::Value **True;
  uint64_t v188;
  llvm::Value *v189;
  uint64_t v190;
  uint64_t ***v191;
  llvm::Type *v192;
  const llvm::APInt *v193;
  llvm::PHINode *v194;
  uint64_t v195;
  llvm::Function *v196;
  char *v197;
  char *v198;
  llvm::Value *v199;
  char *v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  unsigned __int8 *v204;
  unsigned __int8 *v205;
  unsigned __int8 **v206;
  unsigned __int8 *v207;
  unsigned __int8 *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  unint64_t v217;
  const char *v219;
  uint64_t v220;
  char *v221;
  unint64_t v222;
  void **v223;
  char *v224;
  unint64_t v225;
  void **v226;
  llvm::Function *v227;
  uint64_t v228;
  uint64_t v229;
  BOOL v230;
  uint64_t *v231;
  _QWORD *v232;
  uint64_t *v233;
  uint64_t v234;
  unsigned int v235;
  uint64_t v236;
  uint64_t ***v237;
  llvm::BasicBlock *v238;
  char *v239;
  unsigned __int8 *v240;
  unsigned __int8 *v241;
  _QWORD *v242;
  unsigned __int8 *v243;
  unsigned __int8 *v244;
  llvm::Function *v245;
  _QWORD *v246;
  _QWORD *v247;
  uint64_t v248;
  llvm::Instruction *v249;
  _QWORD *v250;
  unsigned __int8 *v251;
  int v252;
  llvm::Instruction *v253;
  llvm::Function *v254;
  llvm::ValueAsMetadata *v255;
  llvm::Function *v256;
  uint64_t v257;
  llvm::UndefValue *v258;
  uint64_t **v259;
  _QWORD *v260;
  _QWORD *v261;
  llvm::Value *v262;
  char *v263;
  uint64_t v264;
  _QWORD *v265;
  _QWORD *v266;
  _QWORD *v267;
  _QWORD *v268;
  llvm::Value *v269;
  char *v270;
  uint64_t v271;
  _QWORD *v272;
  llvm::Type *v273;
  _QWORD *v274;
  llvm::PHINode *v275;
  llvm::UndefValue *v276;
  llvm::PHINode *v277;
  llvm::Type *v278;
  const llvm::APInt *v279;
  llvm::Value **False;
  uint64_t **v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  llvm::ValueAsMetadata **v286;
  llvm::ValueAsMetadata *v287;
  int v288;
  int v289;
  llvm::ValueAsMetadata *v290;
  unint64_t v291;
  char *v292;
  unint64_t v293;
  _QWORD *v294;
  _QWORD *v295;
  llvm::Value *v296;
  char *v297;
  uint64_t v298;
  _QWORD *v299;
  _QWORD *v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  llvm::ValueSymbolTable *v305;
  uint64_t v306;
  uint64_t *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  llvm::ValueSymbolTable *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  llvm::ValueSymbolTable *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  llvm::ValueSymbolTable *v323;
  uint64_t v324;
  llvm::ValueSymbolTable *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unsigned __int8 v330;
  void *v331;
  uint64_t v332;
  uint64_t v333;
  unsigned __int16 v334;
  unsigned __int8 *v335;
  _OWORD v336[5];
  void *v337;
  unsigned int v338;
  uint64_t v339;
  void *v340;
  unint64_t v341;
  const char *v342;
  __int128 v343;
  const char *v344;
  const char *v345;
  uint64_t v346;
  uint64_t v347;
  char v348;
  void *v349;
  uint64_t v350;
  _BYTE v351[260];
  int v352;
  uint64_t v353;
  uint64_t v354;

  v354 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(v4 + 40);
  if (v5 == v4 + 40)
  {
    v7 = 0;
  }
  else
  {
    if (v5)
      v6 = v5 - 24;
    else
      v6 = 0;
    if (*(unsigned __int8 *)(v6 + 16) - 29 >= 0xB)
      v7 = 0;
    else
      v7 = v6;
  }
  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 == 0;
  if (v8)
    v10 = v8 - 24;
  else
    v10 = 0;
  v333 = v7;
  if (v10 == v7)
  {
    v332 = 0;
LABEL_106:
    v51 = *(void **)(v7 + 40);
    v52 = a1[3];
    v53 = ****(_QWORD ****)v52;
    v331 = v51;
    if (*(_QWORD *)(v53 + 128)
      || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v53 + 72) + 48))(*(_QWORD *)(v53 + 72)))
    {
      v219 = *(const char **)(*(_QWORD *)(a2 + 40) + 56);
      llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)v336, (const llvm::DebugLoc *)(a2 + 48));
      v220 = *(_QWORD *)(a2 + 40);
      LODWORD(v341) = 9;
      BYTE4(v341) = 2;
      v342 = v219;
      v343 = v336[0];
      v344 = "tailcallelim";
      v345 = "tailcall-recursion";
      v346 = 18;
      LOBYTE(v347) = 0;
      v348 = 0;
      v349 = v351;
      v350 = 0x400000000;
      v351[256] = 0;
      v352 = -1;
      v353 = v220;
      v340 = &off_1E814E500;
      *(_QWORD *)&v336[0] = "transforming tail recursion into loop";
      *((_QWORD *)&v336[0] + 1) = 37;
      sub_1C53B17B4((uint64_t)&v349, (const void **)v336);
      sub_1C61998EC((uint64_t)v336, (uint64_t)&v340);
      *(_QWORD *)&v336[0] = &off_1E814E500;
      v340 = &off_1E814E790;
      v221 = (char *)v349;
      if ((_DWORD)v350)
      {
        v222 = (unint64_t)v350 << 6;
        do
        {
          v223 = (void **)&v221[v222];
          if (v221[v222 - 17] < 0)
            operator delete(*(v223 - 5));
          if (*((char *)v223 - 41) < 0)
            operator delete(*(v223 - 8));
          v222 -= 64;
        }
        while (v222);
        v221 = (char *)v349;
        v7 = v333;
        v51 = v331;
      }
      if (v221 != v351)
        free(v221);
      llvm::OptimizationRemarkEmitter::emit(v52, (llvm::DiagnosticInfoOptimizationBase *)v336);
      *(_QWORD *)&v336[0] = &off_1E814E790;
      v224 = (char *)v337;
      if (v338)
      {
        v225 = (unint64_t)v338 << 6;
        do
        {
          v226 = (void **)&v224[v225];
          if (v224[v225 - 17] < 0)
            operator delete(*(v226 - 5));
          if (*((char *)v226 - 41) < 0)
            operator delete(*(v226 - 8));
          v225 -= 64;
        }
        while (v225);
        v224 = (char *)v337;
      }
      if (v224 != (char *)&v339)
        free(v224);
    }
    if (a1[5])
    {
LABEL_109:
      v54 = *(unsigned __int8 *)(a2 + 16);
      if (v54 == 84)
      {
        v55 = 0;
      }
      else
      {
        if (v54 == 39)
          v55 = (*(_DWORD *)(a2 + 80) + 1);
        else
          v55 = 2;
        v7 = v333;
        v51 = v331;
      }
      v56 = *(_DWORD *)(a2 + 20);
      if (v56 < 0 && (v326 = a2 - 32 * (v56 & 0x7FFFFFF), v327 = *(_QWORD *)(v326 - 8), (v327 & 0xFFFFFFFF0) != 0))
      {
        v58 = -(uint64_t)(v56 & 0x7FFFFFF);
        v57 = (*(_DWORD *)(v326 - 12) - *(_DWORD *)(v326 - v327));
      }
      else
      {
        v57 = 0;
        v58 = -(uint64_t)(v56 & 0x7FFFFFF);
      }
      v59 = -32 * v55 - 32 * v57 - 32 * v58 - 32;
      if ((v59 & 0x1FFFFFFFE0) != 0)
      {
        v60 = 0;
        v61 = (v59 >> 5);
        while (!llvm::CallBase::paramHasAttr(a2, v60, 69))
        {
LABEL_116:
          if (++v60 == v61)
          {
            v54 = *(unsigned __int8 *)(a2 + 16);
            goto LABEL_157;
          }
        }
        v62 = (llvm::PointerType *)sub_1C6199478(a2, v60);
        v63 = *((_QWORD *)*a1 + 5);
        ParamAlignment = (unsigned __int16)llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a2 + 64), v60);
        v65 = operator new(0x68uLL);
        v66 = v65;
        v67 = (llvm::Value *)(v65 + 8);
        v65[13] = v65[13] & 0x38000000 | 1;
        *(_QWORD *)v65 = 0;
        *((_QWORD *)v65 + 1) = 0;
        *((_QWORD *)v65 + 2) = 0;
        *((_QWORD *)v65 + 3) = v65 + 8;
        if (ParamAlignment <= 0x100)
          v68 = 0;
        else
          v68 = ParamAlignment;
        v69 = *(uint64_t ****)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * v60);
        if ((*((_BYTE *)v69 + 23) & 0x10) == 0)
        {
          v79 = 0;
          v80 = &byte_1C871356D;
          goto LABEL_130;
        }
        v70 = ***v69;
        v71 = *(_QWORD *)(v70 + 152);
        v72 = *(unsigned int *)(v70 + 168);
        if ((_DWORD)v72)
        {
          LODWORD(v73) = (v72 - 1) & ((v69 >> 4) ^ (v69 >> 9));
          v74 = (uint64_t ****)(v71 + 16 * v73);
          v75 = *v74;
          if (*v74 == v69)
          {
LABEL_129:
            v78 = v74[1];
            v81 = (unint64_t)*v78;
            v80 = (char *)(v78 + 2);
            v79 = v81;
LABEL_130:
            v82 = v63 + 272;
            v83 = (llvm::Type *)*(unsigned int *)(v63 + 276);
            WORD4(v343) = 261;
            v340 = v80;
            v341 = v79;
            v84 = *((_QWORD *)*a1 + 10);
            if (v84)
              v85 = v84 - 24;
            else
              v85 = 0;
            v86 = *(_QWORD *)(v85 + 48);
            if (v86)
              v87 = v86 - 24;
            else
              v87 = 0;
            v330 = v68;
            llvm::AllocaInst::AllocaInst((uint64_t)(v65 + 8), v62, v83, 0, v68, (uint64_t)&v340, v87);
            sub_1C4773D54((uint64_t)&v340, a2, 0, 0, 0);
            sub_1C4768AD0(v63 + 272, (uint64_t)v62);
            v89 = v88;
            v91 = v90 == 1;
            llvm::DataLayout::getAlignment(v82, (uint64_t)v62);
            v95 = v94;
            if (v91)
            v96 = ((1 << v95) + ((unint64_t)(v89 + 7) >> 3) - 1) & -(1 << v95);
            v97 = *(llvm::ConstantInt **)(*(_QWORD *)v347 + 1984);
            v98 = *(_DWORD *)(*(_QWORD *)v347 + 1992);
            DWORD2(v336[0]) = v98 >> 8;
            if (v98 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)v336, v96, 0);
            }
            else
            {
              if (v98 <= 0xFF)
                v99 = 0;
              else
                v99 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v98);
              *(_QWORD *)&v336[0] = v99 & v96;
            }
            v7 = v333;
            v100 = (uint64_t *)llvm::ConstantInt::get(v97, (llvm::LLVMContext *)v336, v93);
            if (DWORD2(v336[0]) >= 0x41 && *(_QWORD *)&v336[0])
              MEMORY[0x1CAA32F9C](*(_QWORD *)&v336[0], 0x1000C8000313F17);
            llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v340, 194, v67, v330 | 0x100, *(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * v60), v330 | 0x100, v100, 0, 0, 0, 0, 0);
            v101 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
            v102 = v101 + 32 * v60;
            if (*(_QWORD *)v102)
            {
              **(_QWORD **)(v102 + 16) = *(_QWORD *)(v102 + 8);
              v103 = *(_QWORD *)(v102 + 8);
              if (v103)
                *(_QWORD *)(v103 + 16) = *(_QWORD *)(v102 + 16);
            }
            *(_QWORD *)v102 = v67;
            v106 = *((_QWORD *)v66 + 5);
            v105 = (uint64_t *)(v66 + 10);
            v104 = v106;
            *(_QWORD *)(v102 + 8) = v106;
            if (v106)
              *(_QWORD *)(v104 + 16) = v102 + 8;
            *(_QWORD *)(v101 + 32 * v60 + 16) = v105;
            *v105 = v102;
            if (v340 != &v342)
              free(v340);
            v51 = v331;
            goto LABEL_116;
          }
          v76 = 1;
          while (v75 != (uint64_t ***)-4096)
          {
            v77 = v73 + v76++;
            v73 = v77 & (v72 - 1);
            v75 = *(uint64_t ****)(v71 + 16 * v73);
            if (v75 == v69)
            {
              v74 = (uint64_t ****)(v71 + 16 * v73);
              goto LABEL_129;
            }
          }
        }
        v74 = (uint64_t ****)(v71 + 16 * v72);
        goto LABEL_129;
      }
LABEL_157:
      if (v54 == 84)
      {
        v107 = 0;
      }
      else
      {
        if (v54 == 39)
          v107 = (*(_DWORD *)(a2 + 80) + 1);
        else
          v107 = 2;
        v7 = v333;
        v51 = v331;
      }
      v108 = *(_DWORD *)(a2 + 20);
      if (v108 < 0
        && (v328 = a2 - 32 * (v108 & 0x7FFFFFF), v329 = *(_QWORD *)(v328 - 8), (v329 & 0xFFFFFFFF0) != 0))
      {
        v110 = -(uint64_t)(v108 & 0x7FFFFFF);
        v109 = (*(_DWORD *)(v328 - 12) - *(_DWORD *)(v328 - v329));
      }
      else
      {
        v109 = 0;
        v110 = -(uint64_t)(v108 & 0x7FFFFFF);
      }
      v111 = -32 * v107 - 32 * v109 - 32 * v110 - 32;
      if ((v111 & 0x1FFFFFFFE0) != 0)
      {
        v112 = 0;
        v113 = 0;
        v114 = (v111 >> 5);
        v115 = a2;
        do
        {
          if (llvm::CallBase::paramHasAttr(a2, v113, 69))
          {
            v118 = sub_1C6199478(a2, v113);
            v119 = *((_QWORD *)*a1 + 5) + 272;
            v334 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a2 + 64), v113);
            sub_1C4773D54((uint64_t)&v340, a2, 0, 0, 0);
            sub_1C4768AD0(v119, v118);
            v121 = v120;
            v123 = v122 == 1;
            llvm::DataLayout::getAlignment(v119, v118);
            v127 = v126;
            if (v123)
            v128 = ((1 << v127) + ((unint64_t)(v121 + 7) >> 3) - 1) & -(1 << v127);
            v129 = *(llvm::ConstantInt **)(*(_QWORD *)v347 + 1984);
            v130 = *(_DWORD *)(*(_QWORD *)v347 + 1992);
            DWORD2(v336[0]) = v130 >> 8;
            if (v130 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)v336, v128, 0);
            }
            else
            {
              if (v130 <= 0xFF)
                v131 = 0;
              else
                v131 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v130);
              *(_QWORD *)&v336[0] = v131 & v128;
            }
            v7 = v333;
            v132 = (uint64_t *)llvm::ConstantInt::get(v129, (llvm::LLVMContext *)v336, v125);
            if (DWORD2(v336[0]) >= 0x41 && *(_QWORD *)&v336[0])
              MEMORY[0x1CAA32F9C](*(_QWORD *)&v336[0], 0x1000C8000313F17);
            v133 = *a1;
            if ((*((_WORD *)*a1 + 9) & 1) != 0)
              llvm::Function::BuildLazyArguments(*a1);
            v134 = v334;
            if (v334 <= 0x100u)
              v134 = 0;
            llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v340, 194, (llvm::Value *)(*((_QWORD *)v133 + 11) + v112), v134 | 0x100, *(llvm::Value **)(v115 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), v134 | 0x100, v132, 0, 0, 0, 0, 0);
            if (v340 != &v342)
              free(v340);
            v135 = (llvm::PHINode *)*((_QWORD *)a1[6] + v113);
            v136 = *a1;
            if ((*((_WORD *)*a1 + 9) & 1) != 0)
              llvm::Function::BuildLazyArguments(*a1);
            v117 = *((_QWORD *)v136 + 11) + v112;
            v116 = v135;
            v51 = v331;
          }
          else
          {
            v116 = (llvm::PHINode *)*((_QWORD *)a1[6] + v113);
            v117 = *(_QWORD *)(v115 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
          }
          sub_1C477667C(v116, v117, (uint64_t)v51);
          ++v113;
          v115 += 32;
          v112 += 40;
        }
        while (v114 != v113);
      }
      v137 = v332;
      if (v332)
      {
        a1[29] = (llvm::Function *)v332;
        v138 = a1[5];
        v139 = *((_QWORD *)v138 + 1);
        if (v139)
        {
          while (1)
          {
            v140 = *(_QWORD *)(v139 + 24);
            v141 = *(unsigned __int8 *)(v140 + 16);
            v142 = v140 && v141 >= 0x1C;
            if (v142 && v141 - 29 < 0xB)
              break;
            v139 = *(_QWORD *)(v139 + 8);
            if (!v139)
              goto LABEL_198;
          }
          v145 = 0;
          v146 = **(_QWORD **)(*((_QWORD *)*a1 + 3) + 16);
          v147 = v139;
LABEL_199:
          ++v145;
          while (1)
          {
            v147 = *(_QWORD *)(v147 + 8);
            if (!v147)
              break;
            v148 = *(_QWORD *)(v147 + 24);
            v149 = *(unsigned __int8 *)(v148 + 16);
            if (v148)
              v150 = v149 >= 0x1C;
            else
              v150 = 0;
            if (v150 && v149 - 29 < 0xB)
              goto LABEL_199;
          }
          v144 = 0;
        }
        else
        {
LABEL_198:
          v139 = 0;
          v145 = 0;
          v146 = **(_QWORD **)(*((_QWORD *)*a1 + 3) + 16);
          v144 = 1;
        }
        v152 = v145 + 1;
        v340 = "accumulator.tr";
        WORD4(v343) = 259;
        v153 = (uint64_t *)*((_QWORD *)v138 + 6);
        v154 = operator new(0x48uLL);
        v155 = v154;
        v154[1] = v146;
        v156 = (llvm::Value *)(v154 + 1);
        *v154 = 0;
        v154[2] = 0;
        v154[3] = 0x4000000000000053;
        *((_OWORD *)v154 + 2) = 0u;
        v157 = (char *)(v154 + 4);
        *((_OWORD *)v154 + 3) = 0u;
        *((_DWORD *)v154 + 16) = 0;
        if (v153)
        {
          v309 = v153[2];
          v154[6] = v309;
          *(_WORD *)(v309 + 18) &= ~0x8000u;
          if ((*((_BYTE *)v154 + 31) & 0x10) != 0)
          {
            v316 = *(_QWORD *)(v309 + 56);
            if (v316)
            {
              v317 = *(llvm::ValueSymbolTable **)(v316 + 104);
              if (v317)
                llvm::ValueSymbolTable::reinsertValue(v317, v156);
            }
          }
          v310 = *v153;
          v155[4] = *v153;
          v155[5] = v153;
          *(_QWORD *)(v310 + 8) = v157;
          *v153 = (uint64_t)v157;
        }
        *((_DWORD *)v155 + 17) = v152;
        llvm::Value::setName((uint64_t ***)v156, (uint64_t)&v340);
        v158 = *((unsigned int *)v155 + 17);
        v159 = operator new(40 * v158);
        *v155 = v159;
        if ((_DWORD)v158)
        {
          v160 = &v159[4 * v158];
          do
          {
            *v159 = 0;
            v159[1] = 0;
            v159[2] = 0;
            v159[3] = v156;
            v159 += 4;
          }
          while (v159 != v160);
        }
        a1[28] = v156;
        v137 = v332;
        v7 = v333;
        v51 = v331;
        if ((v144 & 1) == 0)
        {
          v163 = *(_QWORD *)(v139 + 24);
LABEL_218:
          v164 = *(_QWORD *)(v163 + 40);
          v165 = *((_QWORD *)*a1 + 10);
          if (v165)
            v166 = v165 - 24;
          else
            v166 = 0;
          if (v164 == v166)
          {
            v168 = 0;
            v169 = *(unsigned __int8 *)(v332 + 16);
            v170 = *(llvm::ConstantFP **)v332;
            switch(*(_BYTE *)(v332 + 16))
            {
              case ')':
                goto LABEL_227;
              case '*':
                Zero = llvm::ConstantFP::getZero(v170, (llvm::Type *)1);
                goto LABEL_231;
              case '+':
              case ',':
                goto LABEL_232;
              case '-':
                Zero = llvm::ConstantInt::get(v170, 1, 0);
                goto LABEL_231;
              case '.':
                Zero = llvm::ConstantFP::get((llvm::ConstantFP **)v170, 0, 1.0);
                goto LABEL_231;
              default:
                if (v169 == 56)
                {
                  Zero = llvm::Constant::getAllOnesValue(v170, 0);
                }
                else
                {
                  if ((v169 - 57) > 1)
                    goto LABEL_232;
LABEL_227:
                  Zero = llvm::Constant::getNullValue(v170, 0);
                }
LABEL_231:
                v168 = (uint64_t)Zero;
LABEL_232:
                v167 = a1[28];
                break;
            }
          }
          else
          {
            v167 = a1[28];
            v168 = (uint64_t)v167;
          }
          sub_1C477667C(v167, v168, v164);
          while (1)
          {
            v139 = *(_QWORD *)(v139 + 8);
            if (!v139)
              break;
            v163 = *(_QWORD *)(v139 + 24);
            v172 = *(unsigned __int8 *)(v163 + 16);
            if (v163)
              v173 = v172 >= 0x1C;
            else
              v173 = 0;
            if (v173 && v172 - 29 < 0xB)
              goto LABEL_218;
          }
        }
        v161 = *(_DWORD *)(v332 + 20);
        if ((v161 & 0x40000000) != 0)
          v162 = *(_QWORD **)(v332 - 8);
        else
          v162 = (_QWORD *)(v332 - 32 * (v161 & 0x7FFFFFF));
        v175 = *v162 != a2;
        v176 = a1[28];
        v177 = (llvm::Function **)&v162[4 * v175];
        if (*v177)
        {
          *(_QWORD *)v177[2] = v177[1];
          v178 = v177[1];
          if (v178)
            *((_QWORD *)v178 + 2) = v177[2];
        }
        *v177 = v176;
        if (v176)
        {
          v181 = *((_QWORD *)v176 + 1);
          v179 = (llvm::Function ***)((char *)v176 + 8);
          v180 = v181;
          v182 = &v162[4 * v175];
          v182[1] = v181;
          if (v181)
            *(_QWORD *)(v180 + 16) = v182 + 1;
          v182[2] = v179;
          *v179 = v177;
        }
      }
      v183 = (uint64_t *)a1[16];
      if (!v183)
      {
LABEL_267:
        v196 = a1[5];
        v197 = (char *)operator new(0x60uLL);
        v198 = v197;
        *((_DWORD *)v197 + 13) = *((_DWORD *)v197 + 13) & 0x38000000 | 1;
        *((_QWORD *)v197 + 1) = 0;
        *((_QWORD *)v197 + 2) = 0;
        *(_QWORD *)v197 = 0;
        *((_QWORD *)v197 + 4) = ***(_QWORD ***)v196 + 1576;
        v199 = (llvm::Value *)(v197 + 32);
        *((_QWORD *)v197 + 3) = v197 + 32;
        *((_QWORD *)v197 + 5) = 0;
        v197[48] = 30;
        v197[49] = 0;
        *((_WORD *)v197 + 25) = 0;
        *((_DWORD *)v197 + 13) = 1;
        *(_OWORD *)(v197 + 56) = 0u;
        v200 = v197 + 56;
        *(_OWORD *)(v197 + 72) = 0u;
        *((_DWORD *)v197 + 22) = 0;
        if (v7)
        {
          v306 = *(_QWORD *)(v7 + 40);
          v307 = (uint64_t *)(v7 + 24);
          *((_QWORD *)v197 + 9) = v306;
          *(_WORD *)(v306 + 18) &= ~0x8000u;
          if ((v197[55] & 0x10) != 0
            && (v311 = *(_QWORD *)(v306 + 56)) != 0
            && (v312 = *(llvm::ValueSymbolTable **)(v311 + 104)) != 0)
          {
            llvm::ValueSymbolTable::reinsertValue(v312, v199);
            v313 = *(_QWORD *)v198;
            v314 = *v307;
            *((_QWORD *)v198 + 7) = *v307;
            *((_QWORD *)v198 + 8) = v307;
            *(_QWORD *)(v314 + 8) = v200;
            *v307 = (uint64_t)v200;
            if (v313)
            {
              **((_QWORD **)v198 + 2) = *((_QWORD *)v198 + 1);
              v315 = *((_QWORD *)v198 + 1);
              if (v315)
                *(_QWORD *)(v315 + 16) = *((_QWORD *)v198 + 2);
            }
          }
          else
          {
            v308 = *v307;
            *((_QWORD *)v198 + 7) = *v307;
            *((_QWORD *)v198 + 8) = v307;
            *(_QWORD *)(v308 + 8) = v200;
            *v307 = (uint64_t)v200;
          }
        }
        *(_QWORD *)v198 = v196;
        v203 = *((_QWORD *)v196 + 1);
        v202 = (_QWORD *)((char *)v196 + 8);
        v201 = v203;
        *((_QWORD *)v198 + 1) = v203;
        if (v203)
          *(_QWORD *)(v201 + 16) = v198 + 8;
        *((_QWORD *)v198 + 2) = v202;
        *v202 = v198;
        v204 = *(unsigned __int8 **)(a2 + 48);
        v335 = v204;
        if (v204)
          llvm::MetadataTracking::track((uint64_t)&v335, v204, 2);
        v207 = (unsigned __int8 *)*((_QWORD *)v198 + 10);
        v206 = (unsigned __int8 **)(v198 + 80);
        v205 = v207;
        if (v207)
          llvm::MetadataTracking::untrack((uint64_t)v206, v205);
        v208 = v335;
        *v206 = v335;
        if (v208)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v335, v208, (uint64_t)v206);
          v335 = 0;
        }
        v209 = v7 + 24;
        if (!v7)
          v209 = 0;
        v210 = v209 - 24;
        if (v7)
          v211 = v210;
        else
          v211 = 0;
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)v51 + 40, (uint64_t ***)v211);
        v212 = *(_QWORD *)(v211 + 24);
        v213 = *(_QWORD **)(v211 + 32);
        *v213 = v212;
        *(_QWORD *)(v212 + 8) = v213;
        *(_QWORD *)(v211 + 24) = 0;
        *(_QWORD *)(v211 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v211);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)v51 + 40, (uint64_t ***)a2);
        v214 = *(_QWORD *)(a2 + 24);
        v215 = *(_QWORD **)(a2 + 32);
        *v215 = v214;
        *(_QWORD *)(v214 + 8) = v215;
        *(_QWORD *)(a2 + 24) = 0;
        *(_QWORD *)(a2 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)a2);
        v216 = (uint64_t)a1[4];
        v217 = (unint64_t)a1[5] & 0xFFFFFFFFFFFFFFFBLL;
        v340 = v51;
        v341 = v217;
        v31 = 1;
        llvm::DomTreeUpdater::applyUpdates(v216, (unint64_t *)&v340, 1);
        return v31;
      }
      v184 = *(_DWORD *)(v7 + 20) & 0x7FFFFFF;
      if ((_DWORD)v184)
      {
        if (v137)
          goto LABEL_257;
        v185 = *(_QWORD *)(v7 - 32 * v184);
        if (v185 == a2)
          goto LABEL_257;
      }
      else
      {
        if (v137)
        {
LABEL_257:
          sub_1C477667C(a1[16], (uint64_t)v183, (uint64_t)v51);
          v186 = a1[17];
          True = (llvm::Value **)v186;
LABEL_262:
          sub_1C477667C(v186, (uint64_t)True, (uint64_t)v51);
          v194 = a1[28];
          if (v194)
          {
            if (v137)
              v195 = v137;
            else
              v195 = (uint64_t)a1[28];
            sub_1C477667C(v194, v195, (uint64_t)v51);
          }
          goto LABEL_267;
        }
        v185 = 0;
      }
      v188 = (uint64_t)a1[17];
      v340 = "current.ret.tr";
      WORD4(v343) = 259;
      v189 = sub_1C4FC8748(v188, v183, v185, (uint64_t)&v340, v7, 0);
      v190 = *((unsigned int *)a1 + 38);
      if (v190 >= *((_DWORD *)a1 + 39))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 18), (uint64_t)(a1 + 20), v190 + 1, 8);
        LODWORD(v190) = *((_DWORD *)a1 + 38);
      }
      *((_QWORD *)a1[18] + v190) = v189;
      ++*((_DWORD *)a1 + 38);
      sub_1C477667C(a1[16], (uint64_t)v189, (uint64_t)v51);
      v191 = (uint64_t ***)a1[17];
      True = llvm::ConstantInt::getTrue(*v191, v192, v193);
      v186 = (llvm::PHINode *)v191;
      goto LABEL_262;
    }
    v227 = *a1;
    v228 = (uint64_t)*a1 + 72;
    v229 = *((_QWORD *)*a1 + 10);
    v230 = v229 == 0;
    if (v229)
      v231 = (uint64_t *)(v229 - 24);
    else
      v231 = 0;
    a1[5] = (llvm::Function *)v231;
    v232 = **(_QWORD ***)v227;
    WORD4(v343) = 257;
    if (v230)
      v233 = (uint64_t *)v228;
    else
      v233 = v231 + 3;
    v234 = operator new();
    *(_QWORD *)v234 = *v232 + 1600;
    *(_QWORD *)(v234 + 8) = 0;
    v235 = *(_DWORD *)(v234 + 20) & 0xC0000000;
    *(_DWORD *)(v234 + 16) = 22;
    *(_DWORD *)(v234 + 20) = v235;
    *(_QWORD *)(v234 + 24) = 0;
    *(_QWORD *)(v234 + 32) = 0;
    *(_QWORD *)(v234 + 40) = v234 + 40;
    *(_QWORD *)(v234 + 48) = v234 + 40;
    *(_QWORD *)(v234 + 56) = 0;
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v228, (_QWORD *)v234);
    v236 = *v233;
    *(_QWORD *)(v234 + 32) = v233;
    *(_QWORD *)(v234 + 24) = v236;
    *(_QWORD *)(v236 + 8) = v234 + 24;
    *v233 = v234 + 24;
    llvm::Value::setName((uint64_t ***)v234, (uint64_t)&v340);
    llvm::Value::takeName((llvm::Value *)v234, a1[5]);
    v237 = (uint64_t ***)a1[5];
    v340 = "tailrecurse";
    WORD4(v343) = 259;
    llvm::Value::setName(v237, (uint64_t)&v340);
    v238 = a1[5];
    v239 = (char *)operator new(0x60uLL);
    *((_DWORD *)v239 + 13) = *((_DWORD *)v239 + 13) & 0x38000000 | 1;
    *(_QWORD *)v239 = 0;
    *((_QWORD *)v239 + 1) = 0;
    *((_QWORD *)v239 + 2) = 0;
    *((_QWORD *)v239 + 3) = v239 + 32;
    llvm::BranchInst::BranchInst((llvm::BranchInst *)(v239 + 32), v238, (llvm::BasicBlock *)v234);
    v240 = *(unsigned __int8 **)(a2 + 48);
    *(_QWORD *)&v336[0] = v240;
    if (v240)
      llvm::MetadataTracking::track((uint64_t)v336, v240, 2);
    v243 = (unsigned __int8 *)*((_QWORD *)v239 + 10);
    v242 = v239 + 80;
    v241 = v243;
    if (v243)
      llvm::MetadataTracking::untrack((uint64_t)v242, v241);
    v244 = *(unsigned __int8 **)&v336[0];
    *v242 = *(_QWORD *)&v336[0];
    if (v244)
    {
      llvm::MetadataTracking::retrack((uint64_t)v336, v244, (uint64_t)v242);
      *(_QWORD *)&v336[0] = 0;
    }
    v245 = a1[5];
    v246 = (_QWORD *)((char *)v245 + 40);
    v247 = (_QWORD *)*((_QWORD *)v245 + 6);
    if (v247 != (_QWORD *)((char *)v245 + 40))
    {
      v248 = *(_QWORD *)(v234 + 48);
      if (v248)
        v249 = (llvm::Instruction *)(v248 - 24);
      else
        v249 = 0;
      do
      {
        v250 = v247;
        v247 = (_QWORD *)v247[1];
        v251 = (unsigned __int8 *)(v250 - 3);
        if (!v250)
          v251 = 0;
        v252 = v251[16];
        if (v252 == 59)
          v253 = (llvm::Instruction *)v251;
        else
          v253 = 0;
        if (v250 && v252 == 59 && *(_BYTE *)(*((_QWORD *)v253 - 4) + 16) == 16)
          llvm::Instruction::moveBefore(v253, v249);
      }
      while (v247 != v246);
      v247 = (_QWORD *)*((_QWORD *)a1[5] + 6);
    }
    v254 = *a1;
    if ((*((_WORD *)*a1 + 9) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments(*a1);
      v256 = *a1;
      v255 = (llvm::ValueAsMetadata *)*((_QWORD *)v254 + 11);
      if ((*((_WORD *)*a1 + 9) & 1) != 0)
        llvm::Function::BuildLazyArguments(*a1);
      v254 = v256;
    }
    else
    {
      v255 = (llvm::ValueAsMetadata *)*((_QWORD *)v254 + 11);
    }
    v257 = *((_QWORD *)v254 + 11) + 40 * *((_QWORD *)v254 + 12);
    if (v255 == (llvm::ValueAsMetadata *)v257)
    {
LABEL_336:
      v258 = **(llvm::UndefValue ***)(*((_QWORD *)*a1 + 3) + 16);
      if (*((_BYTE *)v258 + 8) != 7)
      {
        v259 = (uint64_t **)(***(_QWORD ***)*a1 + 1888);
        v340 = "ret.tr";
        WORD4(v343) = 259;
        v260 = operator new(0x48uLL);
        v261 = v260;
        v260[1] = v258;
        v262 = (llvm::Value *)(v260 + 1);
        *v260 = 0;
        v260[2] = 0;
        v260[3] = 0x4000000000000053;
        *((_OWORD *)v260 + 2) = 0u;
        v263 = (char *)(v260 + 4);
        *((_OWORD *)v260 + 3) = 0u;
        *((_DWORD *)v260 + 16) = 0;
        if (v247)
        {
          v318 = v247[2];
          v260[6] = v318;
          *(_WORD *)(v318 + 18) &= ~0x8000u;
          if ((*((_BYTE *)v260 + 31) & 0x10) != 0)
          {
            v322 = *(_QWORD *)(v318 + 56);
            if (v322)
            {
              v323 = *(llvm::ValueSymbolTable **)(v322 + 104);
              if (v323)
                llvm::ValueSymbolTable::reinsertValue(v323, v262);
            }
          }
          v319 = *v247;
          v261[4] = *v247;
          v261[5] = v247;
          *(_QWORD *)(v319 + 8) = v263;
          *v247 = v263;
        }
        *((_DWORD *)v261 + 17) = 2;
        llvm::Value::setName((uint64_t ***)v262, (uint64_t)&v340);
        v264 = *((unsigned int *)v261 + 17);
        v265 = operator new(40 * v264);
        *v261 = v265;
        if ((_DWORD)v264)
        {
          v266 = &v265[4 * v264];
          do
          {
            *v265 = 0;
            v265[1] = 0;
            v265[2] = 0;
            v265[3] = v262;
            v265 += 4;
          }
          while (v265 != v266);
        }
        a1[16] = v262;
        v340 = "ret.known.tr";
        WORD4(v343) = 259;
        v267 = operator new(0x48uLL);
        v268 = v267;
        v267[1] = v259;
        v269 = (llvm::Value *)(v267 + 1);
        *v267 = 0;
        v267[2] = 0;
        v267[3] = 0x4000000000000053;
        *((_OWORD *)v267 + 2) = 0u;
        v270 = (char *)(v267 + 4);
        *((_OWORD *)v267 + 3) = 0u;
        *((_DWORD *)v267 + 16) = 0;
        if (v247)
        {
          v320 = v247[2];
          v267[6] = v320;
          *(_WORD *)(v320 + 18) &= ~0x8000u;
          if ((*((_BYTE *)v267 + 31) & 0x10) != 0)
          {
            v324 = *(_QWORD *)(v320 + 56);
            if (v324)
            {
              v325 = *(llvm::ValueSymbolTable **)(v324 + 104);
              if (v325)
                llvm::ValueSymbolTable::reinsertValue(v325, v269);
            }
          }
          v321 = *v247;
          v268[4] = *v247;
          v268[5] = v247;
          *(_QWORD *)(v321 + 8) = v270;
          *v247 = v270;
        }
        *((_DWORD *)v268 + 17) = 2;
        llvm::Value::setName((uint64_t ***)v269, (uint64_t)&v340);
        v271 = *((unsigned int *)v268 + 17);
        v272 = operator new(40 * v271);
        *v268 = v272;
        if ((_DWORD)v271)
        {
          v274 = &v272[4 * v271];
          do
          {
            *v272 = 0;
            v272[1] = 0;
            v272[2] = 0;
            v272[3] = v269;
            v272 += 4;
          }
          while (v272 != v274);
        }
        a1[17] = v269;
        v275 = a1[16];
        v276 = llvm::UndefValue::get(v258, v273);
        sub_1C477667C(v275, (uint64_t)v276, v234);
        v277 = a1[17];
        False = llvm::ConstantInt::getFalse(v259, v278, v279);
        sub_1C477667C(v277, (uint64_t)False, v234);
      }
      llvm::DomTreeUpdater::recalculate(a1[4], *(llvm::Function **)(v234 + 56));
      v7 = v333;
      v51 = v331;
      goto LABEL_109;
    }
    while (1)
    {
      v281 = *(uint64_t ***)v255;
      if ((*((_BYTE *)v255 + 23) & 0x10) == 0)
      {
        v291 = 0;
        v292 = &byte_1C871356D;
        goto LABEL_356;
      }
      v282 = **v281;
      v283 = *(_QWORD *)(v282 + 152);
      v284 = *(unsigned int *)(v282 + 168);
      if (!(_DWORD)v284)
        goto LABEL_354;
      LODWORD(v285) = (v284 - 1) & ((v255 >> 4) ^ (v255 >> 9));
      v286 = (llvm::ValueAsMetadata **)(v283 + 16 * v285);
      v287 = *v286;
      if (*v286 != v255)
        break;
LABEL_355:
      v290 = v286[1];
      v293 = *(_QWORD *)v290;
      v292 = (char *)v290 + 16;
      v291 = v293;
LABEL_356:
      WORD4(v343) = 773;
      v340 = v292;
      v341 = v291;
      v342 = ".tr";
      v294 = operator new(0x48uLL);
      v295 = v294;
      v294[1] = v281;
      v296 = (llvm::Value *)(v294 + 1);
      *v294 = 0;
      v294[2] = 0;
      v294[3] = 0x4000000000000053;
      *((_OWORD *)v294 + 2) = 0u;
      v297 = (char *)(v294 + 4);
      *((_OWORD *)v294 + 3) = 0u;
      *((_DWORD *)v294 + 16) = 0;
      if (v247)
      {
        v302 = v247[2];
        v294[6] = v302;
        *(_WORD *)(v302 + 18) &= ~0x8000u;
        if ((*((_BYTE *)v294 + 31) & 0x10) != 0)
        {
          v304 = *(_QWORD *)(v302 + 56);
          if (v304)
          {
            v305 = *(llvm::ValueSymbolTable **)(v304 + 104);
            if (v305)
              llvm::ValueSymbolTable::reinsertValue(v305, v296);
          }
        }
        v303 = *v247;
        v295[4] = *v247;
        v295[5] = v247;
        *(_QWORD *)(v303 + 8) = v297;
        *v247 = v297;
      }
      *((_DWORD *)v295 + 17) = 2;
      llvm::Value::setName((uint64_t ***)v296, (uint64_t)&v340);
      v298 = *((unsigned int *)v295 + 17);
      v299 = operator new(40 * v298);
      *v295 = v299;
      if ((_DWORD)v298)
      {
        v300 = &v299[4 * v298];
        do
        {
          *v299 = 0;
          v299[1] = 0;
          v299[2] = 0;
          v299[3] = v296;
          v299 += 4;
        }
        while (v299 != v300);
      }
      llvm::Value::doRAUW(v255, v296, (llvm::Value *)1);
      sub_1C477667C(v296, (uint64_t)v255, v234);
      v301 = *((unsigned int *)a1 + 14);
      if (v301 >= *((unsigned int *)a1 + 15))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 6), (uint64_t)(a1 + 8), v301 + 1, 8);
        v301 = *((unsigned int *)a1 + 14);
      }
      *((_QWORD *)a1[6] + v301) = v296;
      ++*((_DWORD *)a1 + 14);
      v255 = (llvm::ValueAsMetadata *)((char *)v255 + 40);
      if (v255 == (llvm::ValueAsMetadata *)v257)
        goto LABEL_336;
    }
    v288 = 1;
    while (v287 != (llvm::ValueAsMetadata *)-4096)
    {
      v289 = v285 + v288++;
      v285 = v289 & (v284 - 1);
      v287 = *(llvm::ValueAsMetadata **)(v283 + 16 * v285);
      if (v287 == v255)
      {
        v286 = (llvm::ValueAsMetadata **)(v283 + 16 * v285);
        goto LABEL_355;
      }
    }
LABEL_354:
    v286 = (llvm::ValueAsMetadata **)(v283 + 16 * v284);
    goto LABEL_355;
  }
  v332 = 0;
  v11 = a2 - 8;
  while (1)
  {
    v12 = (uint64_t)a1[2];
    if (!sub_1C4D99D08(v10))
    {
      v13 = *(unsigned __int8 *)(v10 + 16);
      if (v13 != 84)
        goto LABEL_28;
      v14 = *(_QWORD *)(v10 - 32);
      if (!v14
        || *(_BYTE *)(v14 + 16)
        || *(_QWORD *)(v14 + 24) != *(_QWORD *)(v10 + 72)
        || (*(_BYTE *)(v14 + 33) & 0x20) == 0
        || *(_DWORD *)(*(_QWORD *)(v8 - 56) + 36) != 167)
      {
        goto LABEL_32;
      }
      if (!llvm::findAllocaForValue(*(llvm **)(v8 - 32 * (*(_DWORD *)(v8 - 4) & 0x7FFFFFF) + 8), 0))
        break;
    }
LABEL_15:
    v8 = *(_QWORD *)(v8 + 8);
    v9 = v8 == 0;
    if (v8)
      v10 = v8 - 24;
    else
      v10 = 0;
    if (v10 == v7)
      goto LABEL_106;
  }
  v13 = *(unsigned __int8 *)(v10 + 16);
LABEL_28:
  v15 = (v13 - 33);
  if (v15 > 0x37)
    goto LABEL_37;
  if (((1 << v15) & 0x808001D0000010) != 0)
    goto LABEL_62;
  if (v15 == 27)
  {
    if ((*(_WORD *)(v10 + 18) & 0x301) != 0)
      goto LABEL_62;
    goto LABEL_37;
  }
  if (((1 << v15) & 0x8000000000041) == 0)
    goto LABEL_37;
LABEL_32:
  v16 = *(_QWORD *)(v10 + 64);
  if (v16)
  {
    if ((*(_BYTE *)(v16 + 17) & 0x30) != 0)
    {
LABEL_37:
      if ((llvm::Instruction::mayThrow((llvm::Instruction *)v10) & 1) != 0
        || !llvm::Instruction::willReturn((llvm::Instruction *)v10))
      {
        goto LABEL_62;
      }
      if (v9 || *(_BYTE *)(v10 + 16) != 60)
        goto LABEL_51;
      v18 = *(unsigned __int8 *)(a2 + 16) - 33;
      if (v18 <= 0x37)
      {
        if (((1 << (*(_BYTE *)(a2 + 16) - 33)) & 0x808001D0000010) != 0)
          goto LABEL_46;
        if (((1 << (*(_BYTE *)(a2 + 16) - 33)) & 0x8000000000041) != 0)
        {
          v35 = *(_QWORD *)(a2 + 64);
          if (!v35 || (*(_BYTE *)(v35 + 17) & 0x30) == 0)
          {
            v36 = *(_DWORD *)(a2 + 20);
            if (v36 < 0)
            {
              v46 = (_QWORD *)(v11 - 32 * (v36 & 0x7FFFFFF));
              if (*v46)
              {
                v47 = -*v46;
                do
                {
                  v48 = *(_DWORD *)(*(_QWORD *)((char *)v46 + v47) + 8);
                  v43 = v48 > 7;
                  v49 = (1 << v48) & 0x83;
                  if (v43 || v49 == 0)
                    goto LABEL_46;
                  v47 += 16;
                }
                while (v47);
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(a2, 45) & 1) == 0
              && !llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44))
            {
LABEL_46:
              v19 = v11;
              v20 = (const llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 56) + 40) + 272);
              v21 = *(void **)(v10 - 32);
              sub_1C4768AD0((uint64_t)v20, *(_QWORD *)v10);
              if (v23 == 1)
                v24 = -2;
              else
                v24 = (unint64_t)(v22 + 7) >> 3;
              llvm::Instruction::getAAMetadata((uint64_t ***)v10, &v342);
              v340 = v21;
              v341 = v24;
              if ((llvm::AAResults::getModRefInfo(v12, a2, (uint64_t)&v340) & 2) != 0)
              {
                v7 = v333;
                v11 = v19;
                goto LABEL_62;
              }
              isSafeToLoadUnconditionally = llvm::isSafeToLoadUnconditionally(*(uint64_t **)(v10 - 32), *(_QWORD *)v10, ((unint64_t)*(unsigned __int16 *)(v10 + 18) >> 1) & 0x3F, v20, (unint64_t *)v10, 0, 0);
              v7 = v333;
              v11 = v19;
              if (!isSafeToLoadUnconditionally)
                goto LABEL_62;
LABEL_51:
              v26 = *(_DWORD *)(v10 + 20);
              if ((v26 & 0x40000000) != 0)
              {
                v28 = *(char **)(v10 - 8);
                v27 = v26 & 0x7FFFFFF;
                if (v27)
                {
LABEL_53:
                  v29 = 32 * v27;
                  v30 = v28;
                  while (*(_QWORD *)v30 != a2)
                  {
                    v30 += 32;
                    v29 -= 32;
                    if (!v29)
                    {
                      v30 = &v28[32 * v27];
                      break;
                    }
                  }
LABEL_59:
                  if (v27 != (v30 - v28) >> 5)
                    goto LABEL_62;
                  goto LABEL_15;
                }
              }
              else
              {
                v27 = v26 & 0x7FFFFFF;
                v28 = (char *)(v10 - 32 * v27);
                if (v27)
                  goto LABEL_53;
              }
              v30 = v28;
              goto LABEL_59;
            }
          }
        }
        else if (v18 == 27 && (*(_WORD *)(a2 + 18) & 0x301) != 0)
        {
          goto LABEL_46;
        }
      }
      if ((llvm::Instruction::mayThrow((llvm::Instruction *)a2) & 1) == 0
        && (llvm::Instruction::willReturn((llvm::Instruction *)a2) & 1) != 0)
      {
        goto LABEL_51;
      }
      goto LABEL_46;
    }
  }
  v17 = *(_DWORD *)(v10 + 20);
  if ((v17 & 0x80000000) == 0
    || (v37 = v10 - 32 * (v17 & 0x7FFFFFF), v40 = *(_QWORD *)(v37 - 8), v38 = v37 - 8, (v39 = v40) == 0))
  {
LABEL_35:
    if ((llvm::CallBase::hasFnAttrOnCalledFunction(v10, 45) & 1) == 0
      && !llvm::CallBase::hasFnAttrOnCalledFunction(v10, 44))
    {
      goto LABEL_62;
    }
    goto LABEL_37;
  }
  v41 = -v39;
  while (1)
  {
    v42 = *(_DWORD *)(*(_QWORD *)(v38 + v41) + 8);
    v43 = v42 > 7;
    v44 = (1 << v42) & 0x83;
    if (v43 || v44 == 0)
      break;
    v41 += 16;
    if (!v41)
      goto LABEL_35;
  }
LABEL_62:
  if (a1[28])
    goto LABEL_156;
  v31 = 0;
  switch(*(_BYTE *)(v10 + 16))
  {
    case ')':
    case '-':
      goto LABEL_65;
    case '*':
    case '.':
      if ((~*(unsigned __int8 *)(v10 + 17) & 0x12) != 0)
        goto LABEL_156;
      goto LABEL_65;
    case '+':
    case ',':
      return v31;
    default:
      if (*(unsigned __int8 *)(v10 + 16) - 56 >= 3)
        return v31;
LABEL_65:
      if (!llvm::Instruction::isCommutative((llvm::Instruction *)v10))
        goto LABEL_156;
      v32 = *(_DWORD *)(v10 + 20);
      if ((v32 & 0x40000000) != 0)
        v33 = *(_QWORD **)(v10 - 8);
      else
        v33 = (_QWORD *)(v10 - 32 * (v32 & 0x7FFFFFF));
      if (*v33 == a2)
      {
        if (v33[4] == a2)
          goto LABEL_156;
      }
      else if (v33[4] != a2)
      {
        goto LABEL_156;
      }
      v34 = *(_QWORD *)(v10 + 8);
      if (v34)
      {
        if (!*(_QWORD *)(v34 + 8))
        {
          v332 = v10;
          if (*(_BYTE *)(*(_QWORD *)(v34 + 24) + 16) == 29)
            goto LABEL_15;
        }
      }
LABEL_156:
      v31 = 0;
      break;
  }
  return v31;
}

uint64_t sub_1C5C599A8(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeDominatorTreeWrapperPassPass(a1);
  llvm::initializeLoopInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "TLS Variable Hoist";
  *(_QWORD *)(v2 + 8) = 18;
  *(_QWORD *)(v2 + 16) = "tlshoist";
  *(_QWORD *)(v2 + 24) = 8;
  *(_QWORD *)(v2 + 32) = &unk_1ED823A98;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5C5A0F8;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5C59A44(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED823A98;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8197DA8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED823AA0);
  if (v3 != -1)
  {
    v7[0] = sub_1C5C599A8;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED823AA0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t llvm::TLSVariableHoistPass::collectTLSCandidate(uint64_t this, llvm::Instruction *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  if (*((unsigned __int8 *)a2 + 16) - 66 >= 0xD)
  {
    v3 = *((_DWORD *)a2 + 5);
    v4 = v3 & 0x7FFFFFF;
    if ((v3 & 0x7FFFFFF) != 0)
    {
      v5 = 0;
      v6 = 0;
      v7 = this + 16;
      do
      {
        v8 = *((_DWORD *)a2 + 5);
        if ((v8 & 0x40000000) != 0)
          v9 = (char *)*((_QWORD *)a2 - 1);
        else
          v9 = (char *)a2 - 32 * (v8 & 0x7FFFFFF);
        v10 = *(_QWORD *)&v9[v5];
        if (*(_BYTE *)(v10 + 16) != 3)
          v10 = 0;
        v14 = v10;
        if (v10 && (*(_BYTE *)(v10 + 33) & 0x1C) != 0)
        {
          this = sub_1C6328954(v7, &v14);
          v11 = this;
          v12 = *(unsigned int *)(this + 8);
          if (v12 >= *(unsigned int *)(this + 12))
          {
            this = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(this, this + 16, v12 + 1, 16);
            v12 = *(unsigned int *)(v11 + 8);
          }
          v13 = (_QWORD *)(*(_QWORD *)v11 + 16 * v12);
          *v13 = a2;
          v13[1] = v6;
          ++*(_DWORD *)(v11 + 8);
        }
        ++v6;
        v5 += 32;
      }
      while (v4 != v6);
    }
  }
  return this;
}

void llvm::TLSVariableHoistPass::collectTLSCandidates(llvm::TLSVariableHoistPass *this, llvm::Function *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  char *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t j;
  llvm::Instruction *v13;

  v2 = *((_QWORD *)a2 + 5);
  v3 = v2 + 8;
  v4 = *(_QWORD *)(v2 + 16);
  if (v4 != v3)
  {
    while (1)
    {
      v7 = v4 - 56;
      if (!v4)
        v7 = 0;
      if ((*(_BYTE *)(v7 + 33) & 0x1C) != 0)
        break;
      v4 = *(_QWORD *)(v4 + 8);
      if (v4 == v3)
        return;
    }
    sub_1C6328A8C((uint64_t)this + 16);
    v8 = (char *)a2 + 72;
    for (i = *((_QWORD *)a2 + 10); (char *)i != v8; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v10 = i - 24;
      else
        v10 = 0;
      if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(*(_QWORD *)this, v10))
      {
        v11 = v10 + 40;
        for (j = *(_QWORD *)(v10 + 48); j != v11; j = *(_QWORD *)(j + 8))
        {
          if (j)
            v13 = (llvm::Instruction *)(j - 24);
          else
            v13 = 0;
          llvm::TLSVariableHoistPass::collectTLSCandidate((uint64_t)this, v13);
        }
      }
    }
  }
}

uint64_t llvm::TLSVariableHoistPass::getNearestLoopDomInst(llvm::TLSVariableHoistPass *this, llvm::BasicBlock *a2, llvm::Loop **a3)
{
  llvm::Loop *v4;
  uint64_t LoopPredecessor;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t NearestCommonDominator;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  int v20;

  do
  {
    v4 = (llvm::Loop *)a3;
    a3 = (llvm::Loop **)*a3;
  }
  while (a3);
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v4);
  if (LoopPredecessor)
  {
    v6 = *(_QWORD *)(LoopPredecessor + 40);
    if (v6 != LoopPredecessor + 40)
    {
      v7 = v6 - 24;
      if (!v6)
        v7 = 0;
      if (*(_BYTE *)(v7 + 16) == 30)
      {
        if ((*(_DWORD *)(v7 + 20) & 0x7FFFFFF) != 3)
          goto LABEL_20;
      }
      else
      {
        switch(*(_BYTE *)(v7 + 16))
        {
          case 0x1E:
            __break(1u);
            goto LABEL_41;
          case 0x1F:
            v20 = (*(_DWORD *)(v7 + 20) >> 1) & 0x3FFFFFF;
            break;
          case 0x20:
LABEL_41:
            v20 = (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) - 1;
            break;
          case 0x27:
            v20 = *(_DWORD *)(v7 + 80) + 1;
            break;
          default:
            goto LABEL_8;
        }
        if (v20 == 1)
          goto LABEL_20;
      }
    }
  }
LABEL_8:
  v8 = (uint64_t *)*((_QWORD *)v4 + 4);
  NearestCommonDominator = *v8;
  v10 = *(_QWORD *)(*v8 + 8);
  if (v10)
  {
    while (1)
    {
      v11 = *(_QWORD *)(v10 + 24);
      v12 = *(unsigned __int8 *)(v11 + 16);
      v13 = v11 && v12 >= 0x1C;
      if (v13 && v12 - 29 <= 0xA)
        break;
      v10 = *(_QWORD *)(v10 + 8);
      if (!v10)
        goto LABEL_18;
    }
LABEL_26:
    NearestCommonDominator = llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator(*(_QWORD *)this, NearestCommonDominator, *(_QWORD *)(v11 + 40));
    while (1)
    {
      v10 = *(_QWORD *)(v10 + 8);
      if (!v10)
        break;
      v11 = *(_QWORD *)(v10 + 24);
      v16 = *(unsigned __int8 *)(v11 + 16);
      if (v11)
        v17 = v16 >= 0x1C;
      else
        v17 = 0;
      if (v17 && v16 - 29 < 0xB)
        goto LABEL_26;
    }
  }
LABEL_18:
  v6 = *(_QWORD *)(NearestCommonDominator + 40);
  if (v6 == NearestCommonDominator + 40)
    return 0;
LABEL_20:
  if (v6)
    v15 = v6 - 24;
  else
    v15 = 0;
  if (*(unsigned __int8 *)(v15 + 16) - 29 >= 0xB)
    return 0;
  else
    return v15;
}

uint64_t llvm::TLSVariableHoistPass::tryReplaceTLSCandidate(llvm::TLSVariableHoistPass *this, llvm::Function *a2, llvm::GlobalVariable *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  _QWORD *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  llvm::GlobalVariable *v31;

  v31 = a3;
  v6 = (_DWORD *)sub_1C6328954((uint64_t)this + 16, (uint64_t *)&v31);
  v7 = v6;
  if (v6[2] == 1)
  {
    v8 = (uint64_t *)*((_QWORD *)this + 1);
    v9 = *((_DWORD *)v8 + 4);
    if (!v9)
      return 0;
    v10 = *(_QWORD *)(**(_QWORD **)v6 + 40);
    v11 = *v8;
    v12 = v9 - 1;
    v13 = ((v10 >> 4) ^ (v10 >> 9)) & (v9 - 1);
    v14 = *(_QWORD *)(v11 + 16 * v13);
    if (v10 != v14)
    {
      v15 = 1;
      while (v14 != -4096)
      {
        v16 = v13 + v15++;
        v13 = v16 & v12;
        v14 = *(_QWORD *)(v11 + 16 * v13);
        if (v10 == v14)
          goto LABEL_7;
      }
      return 0;
    }
LABEL_7:
    if (!*(_QWORD *)(v11 + 16 * v13 + 8))
      return 0;
  }
  v18 = llvm::TLSVariableHoistPass::genBitCastInst(this, a2, a3);
  v19 = v7[2];
  if ((_DWORD)v19)
  {
    v20 = *(unsigned int **)v7;
    v21 = *(_QWORD *)v7 + 16 * v19;
    v22 = v18 + 1;
    do
    {
      v23 = *(_QWORD *)v20;
      v24 = *(_DWORD *)(*(_QWORD *)v20 + 20);
      if ((v24 & 0x40000000) != 0)
        v25 = *(_QWORD *)(v23 - 8);
      else
        v25 = v23 - 32 * (v24 & 0x7FFFFFF);
      v26 = v20[2];
      v27 = v25 + 32 * v26;
      if (*(_QWORD *)v27)
      {
        **(_QWORD **)(v27 + 16) = *(_QWORD *)(v27 + 8);
        v28 = *(_QWORD *)(v27 + 8);
        if (v28)
          *(_QWORD *)(v28 + 16) = *(_QWORD *)(v27 + 16);
      }
      *(_QWORD *)v27 = v18;
      if (v18)
      {
        v29 = *v22;
        v30 = v25 + 32 * v26;
        *(_QWORD *)(v30 + 8) = *v22;
        if (v29)
          *(_QWORD *)(v29 + 16) = v30 + 8;
        *(_QWORD *)(v30 + 16) = v22;
        *v22 = v27;
      }
      v20 += 4;
    }
    while (v20 != (unsigned int *)v21);
  }
  return 1;
}

uint64_t llvm::TLSVariableHoistPass::tryReplaceTLSCandidates(llvm::TLSVariableHoistPass *this, llvm::Function *a2)
{
  llvm::GlobalVariable **v2;
  llvm::GlobalVariable **v3;
  int v6;
  llvm::GlobalVariable *v7;

  v2 = (llvm::GlobalVariable **)*((_QWORD *)this + 5);
  v3 = (llvm::GlobalVariable **)*((_QWORD *)this + 6);
  if (v2 == v3)
  {
    LOBYTE(v6) = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = *v2;
      v2 += 19;
      v6 |= llvm::TLSVariableHoistPass::tryReplaceTLSCandidate(this, a2, v7);
    }
    while (v2 != v3);
  }
  return v6 & 1;
}

_QWORD *llvm::TLSVariableHoistPass::run@<X0>(llvm::GlobalVariable ***a1@<X0>, llvm::Function *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  llvm::GlobalVariable **v8;
  uint64_t ResultImpl;
  char v10;

  v8 = (llvm::GlobalVariable **)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::LoopAnalysis::Key, (uint64_t)a2)+ 8);
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::DominatorTreeAnalysis::Key, (uint64_t)a2);
  v10 = llvm::TLSVariableHoistPass::runImpl(a1, a2, (llvm::GlobalVariable **)(ResultImpl + 8), v8);
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  if ((v10 & 1) != 0)
    return sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::CFGAnalyses::SetKey);
  else
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

uint64_t sub_1C5C5A0F8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5C59A44(v0);
}

void sub_1C5C5A120(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E8197DA8;
  sub_1C62EA928((uint64_t)a1 + 48);
  llvm::Pass::~Pass(a1);
}

void sub_1C5C5A150(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E8197DA8;
  sub_1C62EA928((uint64_t)a1 + 48);
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5C5A194()
{
  return "TLS Variable Hoist";
}

void *sub_1C5C5A1A4(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  return sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::LoopInfoWrapperPass::ID);
}

uint64_t sub_1C5C5A1EC(uint64_t a1, const llvm::Function *a2)
{
  char **v5;
  char *v6;
  uint64_t v7;
  char **v8;
  char *v9;
  llvm::GlobalVariable **v10;
  llvm::GlobalVariable **v11;

  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, a2) & 1) != 0)
    return 0;
  v5 = **(char ****)(a1 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != llvm::DominatorTreeWrapperPass::ID);
  v7 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), llvm::DominatorTreeWrapperPass::ID);
  v8 = **(char ****)(a1 + 8);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != llvm::LoopInfoWrapperPass::ID);
  v10 = (llvm::GlobalVariable **)(v7 + 32);
  v11 = (llvm::GlobalVariable **)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), llvm::LoopInfoWrapperPass::ID)+ 32);
  return llvm::TLSVariableHoistPass::runImpl((llvm::GlobalVariable ***)(a1 + 32), a2, v10, v11);
}

void sub_1C5C5A2B0(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *i;
  char *v16;
  void *__p;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;

  v4 = a1[2];
  v5 = (_QWORD *)a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = 0x86BCA1AF286BCA1BLL * (((uint64_t)v5 - *a1) >> 3);
    if (v7 + 1 > 0x1AF286BCA1AF286)
      abort();
    v8 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v4 - *a1) >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= v7 + 1)
      v9 = v7 + 1;
    if (v8 >= 0xD79435E50D7943)
      v10 = 0x1AF286BCA1AF286;
    else
      v10 = v9;
    v21 = a1 + 2;
    if (v10 > 0x1AF286BCA1AF286)
      sub_1C4764EE4();
    v11 = 152 * v10;
    v12 = (char *)operator new(152 * v10);
    v13 = &v12[152 * v7];
    __p = v12;
    v18 = v13;
    v20 = &v12[v11];
    *(_QWORD *)v13 = *(_QWORD *)a2;
    *((_QWORD *)v13 + 1) = v13 + 24;
    *((_QWORD *)v13 + 2) = 0x800000000;
    if (*(_DWORD *)(a2 + 16))
      sub_1C62F45E8((uint64_t)(v13 + 8), a2 + 8);
    v19 = v13 + 152;
    sub_1C6328DC4(a1, &__p);
    v6 = (_QWORD *)a1[1];
    v14 = v18;
    for (i = v19; i != v14; i -= 152)
    {
      v16 = (char *)*((_QWORD *)i - 18);
      if (i - 128 != v16)
        free(v16);
    }
    if (__p)
      operator delete(__p);
  }
  else
  {
    *v5 = *(_QWORD *)a2;
    v5[1] = v5 + 3;
    v5[2] = 0x800000000;
    if (*(_DWORD *)(a2 + 16))
      sub_1C62F45E8((uint64_t)(v5 + 1), a2 + 8);
    v6 = v5 + 19;
  }
  a1[1] = (uint64_t)v6;
}

uint64_t sub_1C5C5A458()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"hoist the TLS loads in PIC model to eliminate redundant TLS address calculation.";
  v1.n128_u64[1] = 80;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED8239D8, "tls-load-hoist", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8239D8, &dword_1C475E000);
}

void sub_1C5C5A4D8(uint64_t a1, llvm::OptimizationRemarkEmitter *a2)
{
  const llvm::Loop *v3;
  llvm **v4;
  llvm **v5;
  llvm *v6;
  const llvm::Loop *v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void **v15;
  const llvm::Loop *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  void **v24;
  const llvm::Loop *v25;
  unsigned __int8 *OptionalElementCountLoopAttribute;
  char v27;
  char v28;
  uint64_t LoopID;
  unsigned __int8 *OptionMDForLoopID;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  void **v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void **v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  void **v58;
  uint64_t v59;
  unsigned int v60;
  unsigned __int8 *v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t (**v67)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  const char *v74;
  const char *v75;
  uint64_t v76;
  char v77;
  char v78;
  void *v79;
  uint64_t v80;
  _BYTE v81[256];
  char v82;
  int v83;
  uint64_t v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::getLoopsInPreorder(a1, (uint64_t)&v64);
  v4 = (llvm **)v64;
  if (!v65)
    goto LABEL_113;
  v5 = (llvm **)((char *)v64 + 8 * v65);
  do
  {
    v6 = *v4;
    if (llvm::hasUnrollTransformation(*v4, v3) == 5)
    {
      llvm::Loop::getStartLoc(v6, &v61);
      v8 = (int)v61;
      if (v61)
      {
        v9 = *(_QWORD *)&v61[-8 * *((unsigned int *)v61 + 2)];
        if (*(_BYTE *)v9 != 15)
          v9 = *(_QWORD *)(v9 - 8 * *(unsigned int *)(v9 + 8));
        v10 = *((_DWORD *)v61 + 1);
        v8 = *((unsigned __int16 *)v61 + 1);
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
      v11 = **((_QWORD **)v6 + 4);
      v12 = *(_QWORD *)(v11 + 56);
      v68 = 14;
      v69 = 1;
      v70 = v12;
      v71 = v9;
      v72 = v10;
      v73 = v8;
      v74 = "transform-warning";
      v75 = "FailedRequestedUnrolling";
      v76 = 24;
      v77 = 0;
      v78 = 0;
      v79 = v81;
      v80 = 0x400000000;
      v82 = 0;
      v83 = -1;
      v84 = v11;
      v67 = &off_1E814E5A8;
      v62 = "loop not unrolled: the optimizer was unable to perform the requested transformation; the transformation migh"
            "t be disabled or specified as part of an unsupported transformation ordering";
      v63 = 184;
      sub_1C53B17B4((uint64_t)&v79, (const void **)&v62);
      llvm::OptimizationRemarkEmitter::emit(a2, (llvm::DiagnosticInfoOptimizationBase *)&v67);
      v67 = &off_1E814E790;
      v13 = (char *)v79;
      if ((_DWORD)v80)
      {
        v14 = (unint64_t)v80 << 6;
        do
        {
          v15 = (void **)&v13[v14];
          if (v13[v14 - 17] < 0)
            operator delete(*(v15 - 5));
          if (*((char *)v15 - 41) < 0)
            operator delete(*(v15 - 8));
          v14 -= 64;
        }
        while (v14);
        v13 = (char *)v79;
      }
      if (v13 != v81)
        free(v13);
      v7 = (const llvm::Loop *)v61;
      if (v61)
        llvm::MetadataTracking::untrack((uint64_t)&v61, v61);
    }
    if (llvm::hasUnrollAndJamTransformation(v6, v7) == 5)
    {
      llvm::Loop::getStartLoc(v6, &v61);
      v17 = (int)v61;
      if (v61)
      {
        v18 = *(_QWORD *)&v61[-8 * *((unsigned int *)v61 + 2)];
        if (*(_BYTE *)v18 != 15)
          v18 = *(_QWORD *)(v18 - 8 * *(unsigned int *)(v18 + 8));
        v19 = *((_DWORD *)v61 + 1);
        v17 = *((unsigned __int16 *)v61 + 1);
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
      v20 = **((_QWORD **)v6 + 4);
      v21 = *(_QWORD *)(v20 + 56);
      v68 = 14;
      v69 = 1;
      v70 = v21;
      v71 = v18;
      v72 = v19;
      v73 = v17;
      v74 = "transform-warning";
      v75 = "FailedRequestedUnrollAndJamming";
      v76 = 31;
      v77 = 0;
      v78 = 0;
      v79 = v81;
      v80 = 0x400000000;
      v82 = 0;
      v83 = -1;
      v84 = v20;
      v67 = &off_1E814E5A8;
      v62 = "loop not unroll-and-jammed: the optimizer was unable to perform the requested transformation; the transforma"
            "tion might be disabled or specified as part of an unsupported transformation ordering";
      v63 = 193;
      sub_1C53B17B4((uint64_t)&v79, (const void **)&v62);
      llvm::OptimizationRemarkEmitter::emit(a2, (llvm::DiagnosticInfoOptimizationBase *)&v67);
      v67 = &off_1E814E790;
      v22 = (char *)v79;
      if ((_DWORD)v80)
      {
        v23 = (unint64_t)v80 << 6;
        do
        {
          v24 = (void **)&v22[v23];
          if (v22[v23 - 17] < 0)
            operator delete(*(v24 - 5));
          if (*((char *)v24 - 41) < 0)
            operator delete(*(v24 - 8));
          v23 -= 64;
        }
        while (v23);
        v22 = (char *)v79;
      }
      if (v22 != v81)
        free(v22);
      v16 = (const llvm::Loop *)v61;
      if (v61)
        llvm::MetadataTracking::untrack((uint64_t)&v61, v61);
    }
    if (llvm::hasVectorizeTransformation(v6, v16) != 5)
      goto LABEL_73;
    OptionalElementCountLoopAttribute = llvm::getOptionalElementCountLoopAttribute(v6, v25);
    v28 = v27;
    LoopID = llvm::Loop::getLoopID(v6);
    OptionMDForLoopID = llvm::findOptionMDForLoopID(LoopID, "llvm.loop.interleave.count", 0x1AuLL);
    if (OptionMDForLoopID)
    {
      v59 = *((unsigned int *)OptionMDForLoopID + 2);
      if ((_DWORD)v59 == 1)
      {
        LOBYTE(v31) = 0;
      }
      else
      {
        v31 = *(_QWORD *)&OptionMDForLoopID[-8 * v59 + 8];
        if (v31)
        {
          v31 = *(_QWORD *)(v31 + 128);
          if (v31)
          {
            v60 = *(_DWORD *)(v31 + 32);
            if (v60 > 0x40)
              v31 = **(_QWORD **)(v31 + 24);
            else
              v31 = (uint64_t)(*(_QWORD *)(v31 + 24) << -(char)v60) >> -(char)v60;
            v33 = v31 & 0xFFFFFF00;
            v32 = v31;
            LOBYTE(v31) = 1;
            goto LABEL_42;
          }
        }
      }
      v32 = 0;
      v33 = 0;
    }
    else
    {
      LOBYTE(v31) = 0;
      v32 = 0;
      v33 = 0;
    }
LABEL_42:
    if (!v28
      || ((unint64_t)OptionalElementCountLoopAttribute >> 32 == 1
        ? (v37 = (_DWORD)OptionalElementCountLoopAttribute == 0)
        : (v37 = 1),
          v37 ? (v38 = 0) : (v38 = 1),
          (OptionalElementCountLoopAttribute & 0xFFFFFFFE) != 0 || v38))
    {
      llvm::Loop::getStartLoc(v6, &v61);
      v34 = (int)v61;
      if (v61)
      {
        v35 = *(_QWORD *)&v61[-8 * *((unsigned int *)v61 + 2)];
        if (*(_BYTE *)v35 != 15)
          v35 = *(_QWORD *)(v35 - 8 * *(unsigned int *)(v35 + 8));
        v36 = *((_DWORD *)v61 + 1);
        v34 = *((unsigned __int16 *)v61 + 1);
      }
      else
      {
        v35 = 0;
        v36 = 0;
      }
      v42 = **((_QWORD **)v6 + 4);
      v43 = *(_QWORD *)(v42 + 56);
      v68 = 14;
      v69 = 1;
      v70 = v43;
      v71 = v35;
      v72 = v36;
      v73 = v34;
      v74 = "transform-warning";
      v75 = "FailedRequestedVectorization";
      v76 = 28;
      v77 = 0;
      v78 = 0;
      v79 = v81;
      v80 = 0x400000000;
      v82 = 0;
      v83 = -1;
      v84 = v42;
      v67 = &off_1E814E5A8;
      v62 = "loop not vectorized: the optimizer was unable to perform the requested transformation; the transformation mi"
            "ght be disabled or specified as part of an unsupported transformation ordering";
      v63 = 186;
      sub_1C53B17B4((uint64_t)&v79, (const void **)&v62);
      llvm::OptimizationRemarkEmitter::emit(a2, (llvm::DiagnosticInfoOptimizationBase *)&v67);
      v67 = &off_1E814E790;
      v44 = (char *)v79;
      if ((_DWORD)v80)
      {
        v45 = (unint64_t)v80 << 6;
        do
        {
          v46 = (void **)&v44[v45];
          if (v44[v45 - 17] < 0)
            operator delete(*(v46 - 5));
          if (*((char *)v46 - 41) < 0)
            operator delete(*(v46 - 8));
          v45 -= 64;
        }
        while (v45);
LABEL_68:
        v44 = (char *)v79;
      }
LABEL_69:
      if (v44 != v81)
        free(v44);
      v25 = (const llvm::Loop *)v61;
      if (v61)
        llvm::MetadataTracking::untrack((uint64_t)&v61, v61);
      goto LABEL_73;
    }
    if ((v33 | v32) != 1)
      LOBYTE(v31) = 0;
    if ((v31 & 1) == 0)
    {
      llvm::Loop::getStartLoc(v6, &v61);
      v39 = (int)v61;
      if (v61)
      {
        v40 = *(_QWORD *)&v61[-8 * *((unsigned int *)v61 + 2)];
        if (*(_BYTE *)v40 != 15)
          v40 = *(_QWORD *)(v40 - 8 * *(unsigned int *)(v40 + 8));
        v41 = *((_DWORD *)v61 + 1);
        v39 = *((unsigned __int16 *)v61 + 1);
      }
      else
      {
        v40 = 0;
        v41 = 0;
      }
      v50 = **((_QWORD **)v6 + 4);
      v51 = *(_QWORD *)(v50 + 56);
      v68 = 14;
      v69 = 1;
      v70 = v51;
      v71 = v40;
      v72 = v41;
      v73 = v39;
      v74 = "transform-warning";
      v75 = "FailedRequestedInterleaving";
      v76 = 27;
      v77 = 0;
      v78 = 0;
      v79 = v81;
      v80 = 0x400000000;
      v82 = 0;
      v83 = -1;
      v84 = v50;
      v67 = &off_1E814E5A8;
      v62 = "loop not interleaved: the optimizer was unable to perform the requested transformation; the transformation m"
            "ight be disabled or specified as part of an unsupported transformation ordering";
      v63 = 187;
      sub_1C53B17B4((uint64_t)&v79, (const void **)&v62);
      llvm::OptimizationRemarkEmitter::emit(a2, (llvm::DiagnosticInfoOptimizationBase *)&v67);
      v67 = &off_1E814E790;
      v44 = (char *)v79;
      if ((_DWORD)v80)
      {
        v52 = (unint64_t)v80 << 6;
        do
        {
          v53 = (void **)&v44[v52];
          if (v44[v52 - 17] < 0)
            operator delete(*(v53 - 5));
          if (*((char *)v53 - 41) < 0)
            operator delete(*(v53 - 8));
          v52 -= 64;
        }
        while (v52);
        goto LABEL_68;
      }
      goto LABEL_69;
    }
LABEL_73:
    if (llvm::hasDistributeTransformation(v6, v25) == 5)
    {
      llvm::Loop::getStartLoc(v6, &v61);
      v47 = (int)v61;
      if (v61)
      {
        v48 = *(_QWORD *)&v61[-8 * *((unsigned int *)v61 + 2)];
        if (*(_BYTE *)v48 != 15)
          v48 = *(_QWORD *)(v48 - 8 * *(unsigned int *)(v48 + 8));
        v49 = *((_DWORD *)v61 + 1);
        v47 = *((unsigned __int16 *)v61 + 1);
      }
      else
      {
        v48 = 0;
        v49 = 0;
      }
      v54 = **((_QWORD **)v6 + 4);
      v55 = *(_QWORD *)(v54 + 56);
      v68 = 14;
      v69 = 1;
      v70 = v55;
      v71 = v48;
      v72 = v49;
      v73 = v47;
      v74 = "transform-warning";
      v75 = "FailedRequestedDistribution";
      v76 = 27;
      v77 = 0;
      v78 = 0;
      v79 = v81;
      v80 = 0x400000000;
      v82 = 0;
      v83 = -1;
      v84 = v54;
      v67 = &off_1E814E5A8;
      v62 = "loop not distributed: the optimizer was unable to perform the requested transformation; the transformation m"
            "ight be disabled or specified as part of an unsupported transformation ordering";
      v63 = 187;
      sub_1C53B17B4((uint64_t)&v79, (const void **)&v62);
      llvm::OptimizationRemarkEmitter::emit(a2, (llvm::DiagnosticInfoOptimizationBase *)&v67);
      v67 = &off_1E814E790;
      v56 = (char *)v79;
      if ((_DWORD)v80)
      {
        v57 = (unint64_t)v80 << 6;
        do
        {
          v58 = (void **)&v56[v57];
          if (v56[v57 - 17] < 0)
            operator delete(*(v58 - 5));
          if (*((char *)v58 - 41) < 0)
            operator delete(*(v58 - 8));
          v57 -= 64;
        }
        while (v57);
        v56 = (char *)v79;
      }
      if (v56 != v81)
        free(v56);
      v3 = (const llvm::Loop *)v61;
      if (v61)
        llvm::MetadataTracking::untrack((uint64_t)&v61, v61);
    }
    ++v4;
  }
  while (v4 != v5);
  v4 = (llvm **)v64;
LABEL_113:
  if (v4 != (llvm **)&v66)
    free(v4);
}

uint64_t sub_1C5C5AD68(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeOptimizationRemarkEmitterWrapperPassPass(a1, v2);
  v3 = operator new();
  *(_QWORD *)v3 = "Warn about non-applied transformations";
  *(_QWORD *)(v3 + 8) = 38;
  *(_QWORD *)(v3 + 16) = "transform-warning";
  *(_QWORD *)(v3 + 24) = 17;
  *(_QWORD *)(v3 + 32) = &unk_1ED823AA8;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5C5AECC;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C5C5AE04(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED823AA8;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8197E48;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED823AB0);
  if (v3 != -1)
  {
    v7[0] = sub_1C5C5AD68;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED823AB0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5C5AECC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5C5AE04(v0);
}

void sub_1C5C5AEF8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5C5AF1C(uint64_t a1, uint64_t a2)
{
  void *result;

  sub_1C4771E64(a2, a2, (uint64_t)&llvm::OptimizationRemarkEmitterWrapperPass::ID);
  result = sub_1C4771E64(a2, a2, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  *(_BYTE *)(a2 + 160) = 1;
  return result;
}

uint64_t sub_1C5C5AF64(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  void **v3;
  void *v4;
  llvm::OptimizationRemarkEmitter *v5;
  char **v6;
  char *v7;
  uint64_t v8;

  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) == 0)
  {
    v3 = (void **)**((_QWORD **)a1 + 1);
    do
    {
      v4 = *v3;
      v3 += 2;
    }
    while (v4 != &llvm::OptimizationRemarkEmitterWrapperPass::ID);
    v5 = *(llvm::OptimizationRemarkEmitter **)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::OptimizationRemarkEmitterWrapperPass::ID)+ 32);
    v6 = (char **)**((_QWORD **)a1 + 1);
    do
    {
      v7 = *v6;
      v6 += 2;
    }
    while (v7 != llvm::LoopInfoWrapperPass::ID);
    v8 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), llvm::LoopInfoWrapperPass::ID);
    sub_1C5C5A4D8(v8 + 32, v5);
  }
  return 0;
}

uint64_t sub_1C5C5B004(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8[2];
  char v9;

  if (*(_WORD *)(a2 + 24) != 281)
  {
    v3 = result;
    v8[0] = a2;
    sub_1C6329130(result + 592, v8);
    v4 = *(_DWORD *)(v3 + 48);
    v6 = a2;
    v7 = v4;
    result = sub_1C61D73E4((uint64_t)v8, v3 + 568, &v6, &v7);
    if (v9)
    {
      v5 = *(unsigned int *)(v3 + 48);
      if (v5 >= *(_DWORD *)(v3 + 52))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 40, v3 + 56, v5 + 1, 8);
        LODWORD(v5) = *(_DWORD *)(v3 + 48);
      }
      *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8 * v5) = a2;
      ++*(_DWORD *)(v3 + 48);
    }
  }
  return result;
}

uint64_t sub_1C5C5B0B4(uint64_t *a1, uint64_t a2, uint64_t *a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t i;
  uint64_t (**v16)();
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;

  v10 = *a1;
  v11 = *(_QWORD *)(v10 + 656);
  *(_QWORD *)(v10 + 656) = &v16;
  v16 = &off_1E8197EE8;
  v17 = v11;
  v18 = v10;
  v19 = a1;
  sub_1C636F034(v10, a2, a3);
  if (a4 && a5)
  {
    v12 = 0;
    do
    {
      v13 = &a3[2 * v12];
      if (*v13)
      {
        sub_1C5C5B004((uint64_t)a1, *v13);
        for (i = *(_QWORD *)(*v13 + 48); i; i = *(_QWORD *)(i + 32))
          sub_1C5C5B004((uint64_t)a1, *(_QWORD *)(i + 16));
      }
      ++v12;
    }
    while (v12 != a4);
  }
  if (!*(_QWORD *)(a2 + 48))
    sub_1C5C5B9D4(a1, a2);
  *(_QWORD *)(v18 + 656) = v17;
  return a2;
}

BOOL sub_1C5C5B190(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  int64x2_t v6;
  unsigned int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[17];
  void *v19;
  uint64_t v20;
  _QWORD v21[17];

  v21[16] = *MEMORY[0x1E0C80C00];
  v17 = a2;
  v2 = *(_QWORD *)(a2 + 48);
  if (!v2)
  {
    v18[0] = 1;
    v5 = 1;
    v6 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *(int64x2_t *)&v18[v5] = v6;
      v5 += 2;
    }
    while (v5 != 17);
    v19 = v21;
    v20 = 0x1000000000;
    sub_1C62B3A60((uint64_t)v18, &v17);
    v7 = v20;
    do
    {
      v8 = (char *)v19 + 8 * v7;
      v9 = *((_QWORD *)v8 - 1);
      sub_1C5C5BC18(v18, (_QWORD *)v8 - 1);
      v7 = v20 - 1;
      LODWORD(v20) = v20 - 1;
      v17 = v9;
      if (v9)
      {
        if (*(_QWORD *)(v9 + 48))
        {
          sub_1C5C5B004((uint64_t)a1, v9);
        }
        else
        {
          v10 = *(unsigned __int16 *)(v9 + 56);
          if (*(_WORD *)(v9 + 56))
          {
            v11 = *(uint64_t **)(v9 + 32);
            v12 = 40 * v10;
            do
            {
              v13 = *v11;
              v11 += 5;
              v16 = v13;
              sub_1C62B3A60((uint64_t)v18, &v16);
              v12 -= 40;
            }
            while (v12);
            v9 = v17;
          }
          sub_1C5C5BAB0((uint64_t)a1, v9);
          v14 = *a1;
          v15 = v17;
          sub_1C5D3DF28(*a1, v17);
          sub_1C63655F0(v14, v15);
        }
        v7 = v20;
      }
    }
    while (v7);
    if (v19 != v21)
      free(v19);
    if ((v18[0] & 1) == 0)
      MEMORY[0x1CAA32FB4](v18[1], 8);
  }
  return v2 == 0;
}

void sub_1C5C5B32C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t (**v9)();
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  v4 = *a1;
  v5 = *(_QWORD *)(v4 + 656);
  *(_QWORD *)(v4 + 656) = &v9;
  v9 = &off_1E8197EE8;
  v10 = v5;
  v11 = v4;
  v12 = a1;
  sub_1C5D6146C(v4, a2[2], a2[3], a2[4], a2[5]);
  v6 = a2[4];
  for (i = *(_QWORD *)(v6 + 48); i; i = *(_QWORD *)(i + 32))
    sub_1C5C5B004((uint64_t)a1, *(_QWORD *)(i + 16));
  sub_1C5C5B004((uint64_t)a1, v6);
  v8 = a2[2];
  if (!*(_QWORD *)(v8 + 48))
    sub_1C5C5B9D4(a1, v8);
  *(_QWORD *)(v11 + 656) = v10;
}

void sub_1C5C5B3D4(uint64_t a1, int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  int64x2_t v10;
  BOOL v11;
  char v12;
  uint64_t i;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t m;
  uint64_t j;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t k;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  _BYTE *v46;
  int64x2_t v47;
  uint64_t (**v48)();
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  _BYTE v52[80];
  uint64_t v53;
  uint64_t v54;
  uint64_t (**v55)();
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  __int16 v64;
  BOOL v65;
  BOOL v66;
  char v67;
  void *v68;
  uint64_t v69;
  _BYTE v70[512];
  __int128 v71;
  int v72;
  _QWORD v73[33];
  void *v74;
  uint64_t v75;
  _BYTE v76[256];
  _BYTE *v77;
  void *v78;
  uint64_t v79;
  int v80;
  _BYTE v81[256];
  __int128 v82;
  int v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  _QWORD v90[18];

  v90[16] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 24);
  v59 = (uint64_t *)a1;
  v60 = v7;
  v61 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 16) + 128))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  v62 = 0;
  v63 = a4;
  v64 = 0;
  v65 = 0;
  v8 = v70;
  v68 = v70;
  v69 = 0x4000000000;
  v71 = 0u;
  v72 = 0;
  v73[0] = 1;
  v9 = 75;
  v10 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&(&v59)[v9] = v10;
    v9 += 2;
  }
  while (v9 != 107);
  v74 = v76;
  v75 = 0x2000000000;
  v77 = v81;
  v78 = v81;
  v79 = 32;
  v80 = 0;
  v82 = 0u;
  v83 = 0;
  v84 = a3;
  v11 = sub_1C636604C((uint64_t)v59);
  v12 = 0;
  v66 = v11;
  if (v61)
    v12 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v61 + 96))(v61, v63);
  v67 = v12;
  v85 = 0;
  for (i = 13; i != 191; ++i)
  {
    LOBYTE(v86) = i - 12;
    if ((i - 12) >= 2u)
    {
      if (*(_QWORD *)(v60 + 8 * i))
      {
        v14 = sub_1C47A8C74((unsigned __int8 *)&v86);
        if (v14 >= v85)
          v85 = sub_1C47A8C74((unsigned __int8 *)&v86);
      }
    }
  }
  v62 = a2;
  LOBYTE(v64) = a2 > 2;
  HIBYTE(v64) = a2 > 1;
  v65 = a2 > 0;
  v15 = v59;
  v16 = v59[82];
  v59[82] = (uint64_t)&v55;
  v55 = &off_1E8197F20;
  v56 = v16;
  v57 = v15;
  v58 = (uint64_t *)&v59;
  v17 = v15 + 26;
  v18 = (uint64_t *)v15[27];
  if (v18 != v15 + 26)
  {
    do
    {
      if (v18)
        v19 = (uint64_t)(v18 - 1);
      else
        v19 = 0;
      sub_1C5C5B004((uint64_t)&v59, v19);
      v18 = (uint64_t *)v18[1];
    }
    while (v18 != v17);
    v15 = v59;
  }
  sub_1C6329230((uint64_t)v52, v15[24], v15[25]);
  v47 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
LABEL_18:
  v20 = v75;
  while (v20)
  {
    v21 = *((_QWORD *)v74 + v20 - 1);
    sub_1C5C5BBC8(v73, v21);
    v20 = v75 - 1;
    LODWORD(v75) = v75 - 1;
    if (!*(_QWORD *)(v21 + 48))
    {
      sub_1C5C5B190((uint64_t *)&v59, v21);
      goto LABEL_18;
    }
  }
  v22 = v69;
  while (v22)
  {
    v23 = *((_QWORD *)v68 + --v22);
    LODWORD(v69) = v22;
    if (v23)
    {
      if (v72)
      {
        LODWORD(v24) = (v72 - 1) & ((v23 >> 4) ^ (v23 >> 9));
        v25 = (uint64_t *)(v71 + 16 * v24);
        v26 = *v25;
        if (v23 == *v25)
        {
LABEL_27:
          *v25 = -8192;
          *((int32x2_t *)&v71 + 1) = vadd_s32(*(int32x2_t *)((char *)&v71 + 8), (int32x2_t)0x1FFFFFFFFLL);
        }
        else
        {
          v41 = 1;
          while (v26 != -4096)
          {
            v42 = v24 + v41++;
            v24 = v42 & (v72 - 1);
            v26 = *(_QWORD *)(v71 + 16 * v24);
            if (v23 == v26)
            {
              v25 = (uint64_t *)(v71 + 16 * v24);
              goto LABEL_27;
            }
          }
        }
      }
      if (!sub_1C5C5B190((uint64_t *)&v59, v23))
      {
        v27 = v59;
        v28 = v59[82];
        v59[82] = (uint64_t)&v48;
        v48 = &off_1E8197EE8;
        v49 = v28;
        v50 = v27;
        v51 = (uint64_t *)&v59;
        if (!(_BYTE)v64)
          goto LABEL_30;
        v46 = v8;
        v86 = 1;
        for (j = 8; j != 136; j += 16)
          *(int64x2_t *)((char *)&v86 + j) = v47;
        v88 = v90;
        v89 = 0x1000000000;
        v45 = sub_1C632C78C(v27, v23, (uint64_t)&v86);
        v37 = (uint64_t *)v88;
        v38 = (uint64_t *)((char *)v88 + 8 * v89);
        if ((_DWORD)v89)
        {
          do
          {
            v39 = *v37;
            for (k = *(_QWORD *)(*v37 + 48); k; k = *(_QWORD *)(k + 32))
              sub_1C5C5B004((uint64_t)&v59, *(_QWORD *)(k + 16));
            sub_1C5C5B004((uint64_t)&v59, v39);
            ++v37;
          }
          while (v37 != v38);
          v37 = (uint64_t *)v88;
        }
        if (v37 != v90)
          free(v37);
        v8 = v46;
        if ((v86 & 1) == 0)
          MEMORY[0x1CAA32FB4](v87, 8);
        if (v45)
        {
LABEL_30:
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v77, v23);
          if (*(_WORD *)(v23 + 56))
          {
            v29 = *(uint64_t **)(v23 + 32);
            v30 = 40 * *(unsigned __int16 *)(v23 + 56);
            do
            {
              v31 = sub_1C477672C((uint64_t)&v77, *v29);
              if (v78 == v77)
                v32 = (uint64_t *)((char *)&v79 + 4);
              else
                v32 = &v79;
              if (v31 == (_QWORD *)((char *)v78 + 8 * *(unsigned int *)v32))
                sub_1C5C5B004((uint64_t)&v59, *v29);
              v29 += 5;
              v30 -= 40;
            }
            while (v30);
          }
          v33 = sub_1C5C5BC68(&v59, v23);
          v86 = v33;
          v87 = v34;
          if (v33 && v23 != v33)
          {
            if (*(unsigned __int16 *)(v23 + 58) == *(unsigned __int16 *)(v33 + 58))
              sub_1C636595C((uint64_t)v59, v23, v33);
            else
              sub_1C636F034((uint64_t)v59, v23, &v86);
            if (*(_WORD *)(v86 + 24) != 1)
            {
              sub_1C5C5B004((uint64_t)&v59, v86);
              for (m = *(_QWORD *)(v86 + 48); m; m = *(_QWORD *)(m + 32))
                sub_1C5C5B004((uint64_t)&v59, *(_QWORD *)(m + 16));
            }
            sub_1C5C5B190((uint64_t *)&v59, v23);
          }
        }
        v50[82] = v49;
      }
      goto LABEL_18;
    }
  }
  v43 = (uint64_t)v59;
  v44 = v54;
  v59[24] = v53;
  *(_DWORD *)(v43 + 200) = v44;
  sub_1C6365284((_QWORD *)v43);
  sub_1C636F550((uint64_t)v52);
  v57[82] = v56;
  MEMORY[0x1CAA32FB4](v82, 8);
  if (v78 != v77)
    free(v78);
  if (v74 != v76)
    free(v74);
  if ((v73[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v73[1], 8);
  MEMORY[0x1CAA32FB4](v71, 8);
  if (v68 != v8)
    free(v68);
}

int32x2_t sub_1C5C5B9D4(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1C5C5BAB0((uint64_t)a1, a2);
  if (*(_WORD *)(a2 + 56))
  {
    v4 = *(uint64_t **)(a2 + 32);
    v5 = 40 * *(unsigned __int16 *)(a2 + 56);
    do
    {
      v6 = *v4;
      v7 = *(_QWORD *)(*v4 + 48);
      if (v7 && !*(_QWORD *)(v7 + 32) || *(unsigned __int16 *)(v6 + 58) >= 2u)
        sub_1C5C5B004((uint64_t)a1, v6);
      v4 += 5;
      v5 -= 40;
    }
    while (v5);
  }
  v8 = *a1;
  sub_1C5D3DF28(v8, a2);
  return sub_1C63655F0(v8, a2);
}

_QWORD *sub_1C5C5BA60(_QWORD *result)
{
  *result = &off_1E8198BC8;
  *(_QWORD *)(result[2] + 656) = result[1];
  return result;
}

void sub_1C5C5BA7C(_QWORD *a1)
{
  *a1 = &off_1E8198BC8;
  *(_QWORD *)(a1[2] + 656) = a1[1];
  JUMPOUT(0x1CAA32FC0);
}

int32x2_t sub_1C5C5BAA8(uint64_t a1, uint64_t a2)
{
  return sub_1C5C5BAB0(*(_QWORD *)(a1 + 24), a2);
}

int32x2_t sub_1C5C5BAB0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int32x2_t result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v9 = a2;
  v4 = sub_1C477672C(a1 + 1128, a2);
  v5 = *(_QWORD *)(a1 + 1136);
  v6 = 1144;
  if (v5 == *(_QWORD *)(a1 + 1128))
    v6 = 1148;
  if (v4 != (_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + v6)))
  {
    *v4 = -2;
    ++*(_DWORD *)(a1 + 1152);
  }
  sub_1C63291B4(a1 + 592, &v9);
  v10 = 0;
  if (sub_1C617A1AC(*(_QWORD *)(a1 + 1416), *(_DWORD *)(a1 + 1432), a2, &v10))
  {
    *(_QWORD *)v10 = -8192;
    *(int32x2_t *)(a1 + 1424) = vadd_s32(*(int32x2_t *)(a1 + 1424), (int32x2_t)0x1FFFFFFFFLL);
  }
  v10 = 0;
  if (sub_1C6144BDC(*(_QWORD *)(a1 + 568), *(_DWORD *)(a1 + 584), a2, &v10))
  {
    v8 = (_QWORD *)v10;
    if (v10 != *(_QWORD *)(a1 + 568) + 16 * *(unsigned int *)(a1 + 584))
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * *(unsigned int *)(v10 + 8)) = 0;
      *v8 = -8192;
      result = vadd_s32(*(int32x2_t *)(a1 + 576), (int32x2_t)0x1FFFFFFFFLL);
      *(int32x2_t *)(a1 + 576) = result;
    }
  }
  return result;
}

uint64_t sub_1C5C5BBC8(_DWORD *a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  _QWORD *v5;

  v5 = 0;
  result = sub_1C63242E8((uint64_t)a1, a2, &v5);
  if ((_DWORD)result)
  {
    *v5 = -8192;
    v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

uint64_t sub_1C5C5BC18(_DWORD *a1, _QWORD *a2)
{
  uint64_t result;
  int v4;
  _QWORD *v5;

  v5 = 0;
  result = sub_1C62B3C58((uint64_t)a1, a2, &v5);
  if ((_DWORD)result)
  {
    *v5 = -8192;
    v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

#error "1C5C5BC68: too big function (funcsize=0)"

_QWORD *sub_1C5C8A204(_QWORD *result)
{
  *result = &off_1E8198BC8;
  *(_QWORD *)(result[2] + 656) = result[1];
  return result;
}

void sub_1C5C8A220(_QWORD *a1)
{
  *a1 = &off_1E8198BC8;
  *(_QWORD *)(a1[2] + 656) = a1[1];
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5C8A24C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 24);
  v4 = a2;
  return sub_1C6329130(v2 + 592, &v4);
}

uint64_t *sub_1C5C8A278(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  llvm *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned __int8 *v30;
  void **p_src;
  uint64_t v33;
  void *v34;
  uint64_t *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  __int128 v43;
  uint64_t v45;
  BOOL v46;
  int v47;
  uint64_t v48;
  void *v49;
  uint64_t *v50;
  unsigned int v51;
  unsigned __int8 *v52;
  BOOL v53;
  uint64_t v54;
  unint64_t v55;
  _BOOL4 v56;
  uint64_t v57;
  unsigned __int8 *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t *v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  const void **v80;
  const char *v81;
  BOOL v82;
  llvm::Type *v83;
  llvm::Type *v84;
  _DWORD *v85;
  uint64_t v86;
  BOOL v87;
  unint64_t v88;
  llvm::Type *v89;
  unsigned int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  llvm::detail::DoubleAPFloat *v95;
  void *v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unint64_t v101;
  unint64_t v102;
  unsigned int v103;
  int v104;
  int64_t v105;
  unint64_t v107;
  unsigned int v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  llvm *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t ExtendedIntegerVT;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  size_t v127;
  unsigned int v128;
  uint64_t v129;
  unsigned __int8 *v130;
  uint64_t v131;
  llvm *v132;
  uint64_t v133;
  uint64_t v134;
  __int16 v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  int v141;
  void *v142;
  _QWORD *v143;
  uint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  _QWORD *v150;
  uint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  int v155;
  unsigned int v156;
  _QWORD *v157;
  uint64_t *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  BOOL v162;
  _BOOL4 v163;
  uint64_t v164;
  llvm::Type *v165;
  uint64_t v166;
  int v167;
  int v168;
  uint64_t v169;
  unsigned int v170;
  uint64_t v171;
  int v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  unsigned __int8 *v176;
  uint64_t *v177;
  _QWORD *v178;
  uint64_t *v179;
  uint64_t v180;
  int v181;
  BOOL v182;
  int v183;
  uint64_t *v184;
  int v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  BOOL v191;
  int v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unsigned __int8 *v198;
  uint64_t v199;
  llvm *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  int v204;
  int v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  char v210;
  uint64_t v211;
  int v212;
  uint64_t *v213;
  _BOOL4 v214;
  unint64_t *v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  int v222;
  BOOL v223;
  int v224;
  uint64_t v225;
  llvm::LLVMContext *v226;
  int v227;
  uint64_t v228;
  unsigned __int8 *v229;
  uint64_t v230;
  llvm *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t *v234;
  int v235;
  int v236;
  unint64_t *v237;
  unint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unsigned __int8 *v243;
  uint64_t v244;
  llvm *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t *v248;
  int v249;
  int v250;
  BOOL v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  llvm::APInt *v263;
  unsigned int v264;
  uint64_t v265;
  BOOL v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  _QWORD *v272;
  unsigned int v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  uint64_t v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  uint64_t v284;
  __int128 v285;
  uint64_t v286;
  uint64_t *v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  int v293;
  int v294;
  llvm::APInt *v296;
  int v297;
  uint64_t v298;
  unsigned __int8 *v299;
  llvm *v300;
  uint64_t v301;
  uint64_t *v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  __int16 v306;
  uint64_t v307;
  BOOL v308;
  uint64_t v309;
  uint64_t *v310;
  uint64_t v311;
  int v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  uint64_t *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  __int128 v329;
  void *v330;
  _QWORD *v331;
  void *v332;
  void *v333;
  uint64_t v334;
  BOOL v335;
  int v336;
  unsigned __int8 *v337;
  uint64_t v338;
  int v339;
  uint64_t v340;
  uint64_t v341;
  unsigned int v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t **v347;
  unsigned int v348;
  BOOL v349;
  uint64_t v352;
  _QWORD *v353;
  unsigned int v354;
  void *v355;
  uint64_t v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t *v359;
  uint64_t v360;
  unint64_t v361;
  uint64_t v362;
  unsigned int v363;
  uint64_t v364;
  BOOL v365;
  unsigned int v366;
  uint64_t v367;
  _DWORD *v368;
  uint64_t v369;
  int v370;
  uint64_t v371;
  int v372;
  int v373;
  uint64_t v374;
  int v375;
  uint64_t v377;
  const char *v378;
  unsigned int v379;
  _QWORD **v380;
  unsigned int v381;
  _QWORD *v382;
  void *v383;
  uint64_t v384;
  unint64_t v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  _QWORD *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t v394;
  unint64_t v395;
  uint64_t v396;
  uint64_t *v397;
  uint64_t v398;
  uint64_t v399;
  _QWORD *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  __int16 v406;
  uint64_t v407;
  uint64_t *v408;
  uint64_t v409;
  int v410;
  uint64_t v411;
  uint64_t v412;
  int v413;
  uint64_t v414;
  unint64_t v415;
  unint64_t v416;
  unsigned __int8 *v417;
  uint64_t v418;
  llvm *v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  unsigned __int8 *v428;
  _QWORD *v429;
  int v430;
  int v431;
  uint64_t v432;
  int v433;
  int v434;
  llvm::LLVMContext *v435;
  unsigned int v436;
  llvm::LLVMContext *v437;
  unsigned int v438;
  uint64_t v439;
  unint64_t v440;
  uint64_t v441;
  int v442;
  const void **v443;
  void **v444;
  int v445;
  uint64_t v446;
  unint64_t i;
  unint64_t v448;
  uint64_t v449;
  uint64_t v450;
  llvm *v451;
  unsigned int v452;
  BOOL v453;
  void *v454;
  int v455;
  llvm *v456;
  uint64_t v457;
  __int128 v458;
  __int128 v459;
  unsigned int v460[4];
  __int128 v461;
  void *__dst[2];
  uint64_t v463;
  int v464;
  _BYTE v465[16];
  __int128 __src;
  _QWORD *v467;
  uint64_t v468;
  _QWORD *v469;
  uint64_t v470;
  uint64_t v471;
  int v472;
  uint64_t v473;
  int v474;
  uint64_t v475;
  int v476;
  _QWORD v477[3];
  _QWORD *v478;
  __int128 v479;
  uint64_t v480;
  int v481;
  uint64_t v482;

  v482 = *MEMORY[0x1E0C80C00];
  v4 = *(__int128 **)(a2 + 32);
  v5 = *v4;
  v458 = *(__int128 *)((char *)v4 + 40);
  v459 = v5;
  v6 = v458;
  v7 = *(_QWORD *)(v458 + 40) + 16 * DWORD2(v458);
  v8 = *(llvm **)v7;
  v9 = *(_QWORD *)(v7 + 8);
  v456 = *(llvm **)v7;
  v457 = v9;
  if ((_QWORD)v5 == (_QWORD)v458 && DWORD2(v459) == DWORD2(v458))
    return (uint64_t *)v6;
  v10 = *(_QWORD *)a1;
  v11 = *(void **)(a2 + 64);
  __dst[0] = v11;
  if (v11)
  {
    llvm::MetadataTracking::track((uint64_t)__dst, (unsigned __int8 *)v11, 2);
    v8 = v456;
    v9 = v457;
  }
  LODWORD(__dst[1]) = *(_DWORD *)(a2 + 60);
  *(_QWORD *)&__src = v459;
  DWORD2(__src) = DWORD2(v459);
  v467 = (_QWORD *)v458;
  LODWORD(v468) = DWORD2(v458);
  v6 = (uint64_t)sub_1C5D53628(v10, 171, (const char *)__dst, v8, v9, (uint64_t)&__src, 2);
  if (__dst[0])
    llvm::MetadataTracking::untrack((uint64_t)__dst, (unsigned __int8 *)__dst[0]);
  if (v6)
    return (uint64_t *)v6;
  if (sub_1C5D583CC(*(_QWORD *)a1, v459) && !sub_1C5D583CC(*(_QWORD *)a1, v458))
  {
    v26 = *(_QWORD *)a1;
    v27 = *(unsigned __int8 **)(a2 + 64);
    *(_QWORD *)&__src = v27;
    if (v27)
      llvm::MetadataTracking::track((uint64_t)&__src, v27, 2);
    DWORD2(__src) = *(_DWORD *)(a2 + 60);
    v28 = *(_QWORD *)(v26 + 832);
    if (v28)
      LOWORD(v28) = *(_WORD *)(v28 + 8);
    v29 = sub_1C5D56C70(v26, 171, (const llvm::APInt *)&__src, v456, v457, v458, *((unint64_t *)&v458 + 1), v16, v459, *((unint64_t *)&v459 + 1), v28);
    goto LABEL_33;
  }
  if ((_BYTE)v456)
  {
    if (v456 - 15 >= 0x9C)
      goto LABEL_26;
  }
  else if ((*(_DWORD *)(v457 + 8) & 0xFE) != 0x12)
  {
    goto LABEL_26;
  }
  v17 = *(unsigned __int8 **)(a2 + 64);
  *(_QWORD *)&__src = v17;
  if (v17)
    llvm::MetadataTracking::track((uint64_t)&__src, v17, 2);
  DWORD2(__src) = *(_DWORD *)(a2 + 60);
  v6 = (uint64_t)sub_1C5C9E2A0((uint64_t *)a1, a2, (const llvm::APInt *)&__src, v12, v13, v14, v15, v16);
  if ((_QWORD)__src)
    llvm::MetadataTracking::untrack((uint64_t)&__src, (unsigned __int8 *)__src);
  if (v6)
    return (uint64_t *)v6;
  if (sub_1C5D3DBE0(v458, 0, v18))
  {
    v33 = *(_QWORD *)a1;
    DWORD2(__src) = sub_1C6329368((unsigned int *)&v458, v19, v20);
    if (DWORD2(__src) > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
    else
      *(_QWORD *)&__src = 0;
    v34 = *(void **)(a2 + 64);
    __dst[0] = v34;
    if (v34)
      llvm::MetadataTracking::track((uint64_t)__dst, (unsigned __int8 *)v34, 2);
    LODWORD(__dst[1]) = *(_DWORD *)(a2 + 60);
    v35 = (uint64_t *)(*(_QWORD *)(v458 + 40) + 16 * DWORD2(v458));
    v6 = sub_1C63666FC(v33, (llvm::LLVMContext *)&__src, (const llvm::APInt *)__dst, *v35, v35[1], 0, 0);
    if (__dst[0])
      llvm::MetadataTracking::untrack((uint64_t)__dst, (unsigned __int8 *)__dst[0]);
    if (DWORD2(__src) >= 0x41 && (_QWORD)__src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    return (uint64_t *)v6;
  }
  v6 = v459;
  if (sub_1C5D3D948(v458, 0, v20))
    return (uint64_t *)v6;
  v21 = *(unsigned __int16 *)(v459 + 24);
  v22 = sub_1C5D4F7E8(v458, DWORD2(v458), 1, 1);
  if ((_QWORD)v459)
  {
    if (v21 == 308 && (*(_WORD *)(v459 + 26) & 0xC00) == 0x400)
    {
      v23 = *(_QWORD *)(v459 + 48);
      if (v23)
      {
        v39 = v22;
        v40 = 1;
        do
        {
          if (*(_DWORD *)(v23 + 8) == DWORD2(v459))
          {
            if (!v40)
              goto LABEL_26;
            --v40;
          }
          v23 = *(_QWORD *)(v23 + 32);
        }
        while (v23);
        if (!v40)
        {
          if (v22)
          {
            v41 = *(_QWORD *)(v458 + 48);
            if (v41)
            {
              v42 = 1;
              do
              {
                if (*(_DWORD *)(v41 + 8) == DWORD2(v458))
                {
                  if (!v42)
                    goto LABEL_26;
                  --v42;
                }
                v41 = *(_QWORD *)(v41 + 32);
              }
              while (v41);
              if (!v42)
              {
                v43 = *(_OWORD *)(v459 + 80);
                __src = v43;
                if ((_BYTE)v456
                  && v43 != 0
                  && *(unsigned __int16 *)(*(_QWORD *)(a1 + 8)
                                         + 358 * v456
                                         + 2 * v43
                                         + 73672) <= 0xFFFu)
                {
                  LOBYTE(__dst[0]) = sub_1C47F37A0((unsigned __int8 *)&__src);
                  __dst[0] = (void *)LOBYTE(__dst[0]);
                  __dst[1] = 0;
                  v47 = sub_1C6131328((unsigned __int8 *)__dst, v45, v46);
                  if (sub_1C4F30574((llvm::APInt *)(*(_QWORD *)(v39 + 80) + 24), v47))
                  {
                    v48 = *(_QWORD *)a1;
                    v49 = *(void **)(a2 + 64);
                    __dst[0] = v49;
                    if (v49)
                      llvm::MetadataTracking::track((uint64_t)__dst, (unsigned __int8 *)v49, 2);
                    LODWORD(__dst[1]) = *(_DWORD *)(a2 + 60);
                    v50 = *(uint64_t **)(v459 + 32);
                    v51 = *(unsigned __int16 *)(v459 + 26);
                    LODWORD(v432) = (v51 >> 7) & 7;
                    HIDWORD(v432) = 3;
                    v6 = (uint64_t)sub_1C5D5FD20(v48, (uint64_t)v456, v457, (uint64_t)__dst, *v50, v50[1], v50[5], v50[6], v50[10], v50[11], v50[15], v50[16], v50[20], v50[21], __src, *((uint64_t *)&__src + 1), *(_QWORD *)(v459 + 96), v432, (v51 & 0x1000) != 0);
                    v30 = (unsigned __int8 *)__dst[0];
                    if (__dst[0])
                    {
                      p_src = __dst;
                      goto LABEL_35;
                    }
                    return (uint64_t *)v6;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_26:
  if (sub_1C636F400(v458))
    return (uint64_t *)v459;
  v36 = sub_1C6131328((unsigned __int8 *)&v456, v24, v25);
  v37 = sub_1C5D4F7E8(v458, DWORD2(v458), 0, 0);
  if (v37)
  {
    v54 = *(_QWORD *)a1;
    DWORD2(__src) = v36;
    if (v36 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&__src, -1, 1);
    }
    else
    {
      v55 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v36;
      if (!v36)
        v55 = 0;
      *(_QWORD *)&__src = v55;
    }
    v56 = sub_1C63686D8(v54, a2, 0, (uint64_t)&__src, 0);
    if (DWORD2(__src) >= 0x41 && (_QWORD)__src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    if (v56)
    {
      v57 = *(_QWORD *)a1;
      v58 = *(unsigned __int8 **)(a2 + 64);
      *(_QWORD *)&__src = v58;
      if (v58)
        llvm::MetadataTracking::track((uint64_t)&__src, v58, 2);
      DWORD2(__src) = *(_DWORD *)(a2 + 60);
      v29 = sub_1C6366AB4(v57, 0, (const llvm::APInt *)&__src, v456, v457, 0, 0);
      goto LABEL_33;
    }
  }
  v38 = sub_1C5C9F2A8((uint64_t *)a1, a2);
  if (v38)
    return v38;
  v52 = *(unsigned __int8 **)(a2 + 64);
  *(_QWORD *)&__src = v52;
  if (v52)
    llvm::MetadataTracking::track((uint64_t)&__src, v52, 2);
  DWORD2(__src) = *(_DWORD *)(a2 + 60);
  v6 = (uint64_t)sub_1C5C9F740((uint64_t *)a1, 171, (const llvm::APInt *)&__src, v459, *((unint64_t *)&v459 + 1), v458, *((unint64_t *)&v458 + 1), *(_WORD *)(a2 + 72));
  if ((_QWORD)__src)
    llvm::MetadataTracking::untrack((uint64_t)&__src, (unsigned __int8 *)__src);
  if (v6)
    return (uint64_t *)v6;
  if ((_BYTE)v456)
  {
    if (v456 - 15 >= 0x9C)
      goto LABEL_105;
  }
  else if ((*(_DWORD *)(v457 + 8) & 0xFE) != 0x12)
  {
    goto LABEL_105;
  }
  v59 = *(_QWORD *)(a2 + 32);
  v60 = *(uint64_t **)(a2 + 40);
  v61 = v60[1];
  v449 = *v60;
  v62 = *(_QWORD *)v59;
  v63 = *(_QWORD *)(v59 + 8);
  v64 = *(_QWORD *)(v59 + 40);
  if (*(_WORD *)(v64 + 24) == 216)
  {
    do
    {
      v65 = *(unsigned int **)(v64 + 32);
      v64 = *(_QWORD *)v65;
    }
    while (*(_WORD *)(*(_QWORD *)v65 + 24) == 216);
    v66 = v65[2];
  }
  else
  {
    v66 = *(unsigned int *)(v59 + 48);
  }
  v67 = *(unsigned __int8 **)(a2 + 64);
  *(_QWORD *)&v461 = v67;
  if (v67)
    llvm::MetadataTracking::track((uint64_t)&v461, v67, 2);
  DWORD2(v461) = *(_DWORD *)(a2 + 60);
  if (!*(_BYTE *)(a1 + 33) && *(_WORD *)(v64 + 24) == 146)
  {
    *(_OWORD *)v460 = *(_OWORD *)(*(_QWORD *)(v64 + 40) + 16 * v66);
    v433 = *(unsigned __int16 *)(v64 + 56);
    if (((unint64_t)sub_1C6131328((unsigned __int8 *)v460, (uint64_t)v67, v53) & 7) != 0)
    {
      LODWORD(v88) = 1;
    }
    else
    {
      v88 = (unint64_t)sub_1C6131328((unsigned __int8 *)v460, v86, v87) >> 3;
      if ((int)v88 < 1)
        goto LABEL_101;
    }
    v441 = (v88 + 1);
    for (i = 1; i != v441; ++i)
    {
      if ((unint64_t)sub_1C6131328((unsigned __int8 *)v460, v86, v87) % i)
        continue;
      v89 = sub_1C6131328((unsigned __int8 *)v460, v86, v87);
      *(_QWORD *)&__src = &v467;
      *((_QWORD *)&__src + 1) = 0x800000000;
      v435 = (llvm::LLVMContext *)((unint64_t)v89 / i);
      v438 = i * v433;
      if ((_DWORD)i * v433)
      {
        v90 = 0;
        while (1)
        {
          v91 = *(_QWORD *)(*(_QWORD *)(v64 + 32) + 40 * (v90 / i));
          v92 = *(unsigned __int16 *)(v91 + 24);
          if (v92 != 51)
            break;
          v93 = DWORD2(__src);
          if (DWORD2(__src) >= (unint64_t)HIDWORD(__src))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v467, DWORD2(__src) + 1, 4);
            v93 = DWORD2(__src);
          }
          *(_DWORD *)(__src + 4 * v93) = v90 + v438;
          ++DWORD2(__src);
LABEL_178:
          if (++v90 == v438)
            goto LABEL_193;
        }
        LODWORD(__dst[1]) = 1;
        __dst[0] = 0;
        if (v92 > 34)
        {
          if (v92 == 35)
            goto LABEL_156;
          if (v92 != 36)
            goto LABEL_207;
LABEL_150:
          v94 = *(_QWORD *)(v91 + 80);
          v96 = *(void **)(v94 + 32);
          v95 = (llvm::detail::DoubleAPFloat *)(v94 + 32);
          if (v96 == &unk_1C866F1C0)
            llvm::detail::DoubleAPFloat::bitcastToAPInt(v95, (unsigned int *)&v479);
          else
            llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v95, (unsigned int *)&v479);
          if (LODWORD(__dst[1]) >= 0x41 && __dst[0])
            MEMORY[0x1CAA32F9C](__dst[0], 0x1000C8000313F17);
          __dst[0] = (void *)v479;
          LODWORD(__dst[1]) = DWORD2(v479);
        }
        else
        {
          if (v92 != 11)
          {
            if (v92 != 12)
              goto LABEL_207;
            goto LABEL_150;
          }
LABEL_156:
          v97 = *(_QWORD *)(v91 + 80);
          v443 = (const void **)(v97 + 24);
          v98 = *(_DWORD *)(v97 + 32);
          if (v98 > 0x40)
          {
            if (__dst != (void **)v443)
            {
              llvm::APInt::reallocate((uint64_t)__dst, v98);
              if (LODWORD(__dst[1]) <= 0x40)
                __dst[0] = (void *)*v443;
              else
                memcpy(__dst[0], *v443, (((unint64_t)LODWORD(__dst[1]) + 63) >> 3) & 0x3FFFFFF8);
            }
          }
          else
          {
            __dst[0] = (void *)*v443;
            LODWORD(__dst[1]) = v98;
          }
        }
        v99 = v90 % i;
        if (*(_BYTE *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)a1 + 40) + 40) + 272))
          v99 = ~v99 + i;
        llvm::APInt::extractBits((llvm::APInt *)__dst, v435, v99 * (_DWORD)v435, (unsigned int *)&v479);
        if (LODWORD(__dst[1]) >= 0x41 && __dst[0])
          MEMORY[0x1CAA32F9C](__dst[0], 0x1000C8000313F17);
        v444 = (void **)v479;
        __dst[0] = (void *)v479;
        v100 = DWORD2(v479);
        LODWORD(__dst[1]) = DWORD2(v479);
        if (!DWORD2(v479))
          goto LABEL_169;
        if (DWORD2(v479) > 0x40)
        {
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)__dst) == v100)
            goto LABEL_169;
          v104 = 0;
          v105 = ((unint64_t)v100 + 63) >> 6;
          do
          {
            if (v105-- < 1)
              break;
            v107 = (unint64_t)v444[v105];
            v104 += __clz(v107);
          }
          while (!v107);
          v108 = v100 | 0xFFFFFFC0;
          if ((v100 & 0x3F) == 0)
            v108 = 0;
          if (v100 - v104 - v108 > 0x40)
          {
            if (v444)
              MEMORY[0x1CAA32F9C](v444, 0x1000C8000313F17);
LABEL_207:
            v6 = 0;
            goto LABEL_208;
          }
LABEL_186:
          if (!*v444)
          {
            v103 = v90 + v438;
            v101 = DWORD2(__src);
            v102 = HIDWORD(__src);
            goto LABEL_170;
          }
          v445 = 0;
        }
        else
        {
          if ((_QWORD)v479 != 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v479))
          {
            v444 = __dst;
            goto LABEL_186;
          }
LABEL_169:
          v101 = DWORD2(__src);
          v102 = HIDWORD(__src);
          v103 = v90;
LABEL_170:
          if (v101 >= v102)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v467, v101 + 1, 4);
            v101 = DWORD2(__src);
          }
          *(_DWORD *)(__src + 4 * v101) = v103;
          ++DWORD2(__src);
          v445 = 1;
          v100 = __dst[1];
        }
        if (v100 >= 0x41 && __dst[0])
        {
          MEMORY[0x1CAA32F9C](__dst[0], 0x1000C8000313F17);
          if ((v445 & 1) == 0)
            goto LABEL_207;
        }
        else if (!v445)
        {
          goto LABEL_207;
        }
        goto LABEL_178;
      }
LABEL_193:
      if ((int)v435 <= 31)
      {
        switch((_DWORD)v435)
        {
          case 1:
            v109 = 0;
            v110 = 0;
            v111 = 2;
            break;
          case 0x10:
            v109 = 0;
            v110 = 0;
            v111 = 4;
            break;
          case 8:
            v109 = 0;
            v110 = 0;
            v111 = 3;
            break;
          default:
            goto LABEL_215;
        }
      }
      else
      {
        switch((_DWORD)v435)
        {
          case 0x20:
            v109 = 0;
            v110 = 0;
            v111 = 5;
            break;
          case 0x40:
            v109 = 0;
            v110 = 0;
            v111 = 6;
            break;
          case 0x80:
            v109 = 0;
            v110 = 0;
            v111 = 7;
            break;
          default:
LABEL_215:
            ExtendedIntegerVT = llvm::EVT::getExtendedIntegerVT(*(llvm::EVT **)(*(_QWORD *)a1 + 56), v435);
            v110 = v122;
            v109 = ExtendedIntegerVT & 0xFFFFFFFFFFFFFF00;
            v111 = ExtendedIntegerVT;
            break;
        }
      }
      v112 = (llvm *)sub_1C4816F98(*(llvm::LLVMContext **)(*(_QWORD *)a1 + 56), v111 | v109, v110, v438, 0);
      v114 = v113;
      if (!(*(unsigned int (**)(_QWORD, _QWORD, _QWORD, llvm *, uint64_t))(**(_QWORD **)(a1 + 8) + 504))(*(_QWORD *)(a1 + 8), __src, DWORD2(__src), v112, v113))goto LABEL_207;
      v115 = sub_1C6366AB4(*(_QWORD *)a1, 0, (const llvm::APInt *)&v461, v112, v114, 0, 0);
      v436 = v116;
      v439 = (uint64_t)v115;
      v446 = *(_QWORD *)a1;
      v117 = sub_1C6367DA8(*(_QWORD *)a1, (uint64_t)v112, v114, v62, v63);
      v119 = sub_1C5D41DE4(v446, v112, v114, (uint64_t)&v461, v117, v118, v439, v436, (void *)__src, DWORD2(__src));
      v6 = sub_1C6367DA8(v446, v449, v61, (uint64_t)v119, v120);
LABEL_208:
      if ((_QWORD **)__src != &v467)
        free((void *)__src);
      if (v6)
        goto LABEL_102;
    }
  }
LABEL_101:
  v6 = 0;
LABEL_102:
  if ((_QWORD)v461)
    llvm::MetadataTracking::untrack((uint64_t)&v461, (unsigned __int8 *)v461);
  if (v6)
    return (uint64_t *)v6;
LABEL_105:
  v68 = sub_1C5CA4AE4(*(_QWORD *)a1, *(unsigned int **)(a1 + 8), v459, *((unint64_t *)&v459 + 1), v458, *((unint64_t *)&v458 + 1), a2);
  if (v68)
    return v68;
  if (*(_WORD *)(v459 + 24) == 172)
  {
    v71 = *(_QWORD *)(v459 + 32);
    v72 = *(_QWORD *)(v71 + 40);
    v73 = *(_QWORD *)(v71 + 48);
    v477[0] = &off_1E8198030;
    v478 = v477;
    v74 = sub_1C6364E28(v72, v73, v458, DWORD2(v458), (uint64_t)v477, 0, 0);
    if (v478 == v477)
    {
      (*(void (**)(_QWORD *))(v477[0] + 32))(v477);
    }
    else
    {
      if (!v478)
      {
        if (v74)
          return (uint64_t *)v458;
        goto LABEL_114;
      }
      (*(void (**)(_QWORD *))(*v478 + 40))(v478);
    }
    if ((v74 & 1) != 0)
      return (uint64_t *)v458;
  }
LABEL_114:
  v75 = v459;
  if (v37 && *(_WORD *)(v459 + 24) == 200)
  {
    *(_OWORD *)__dst = *(_OWORD *)*(_QWORD *)(v459 + 32);
    v123 = *(_QWORD *)(v37 + 80);
    v124 = *(unsigned int *)(v123 + 32);
    v455 = v124;
    if (v124 > 0x40)
    {
      v127 = ((unint64_t)(v124 + 63) >> 3) & 0x3FFFFFF8;
      v454 = (void *)operator new[]();
      memcpy(v454, *(const void **)(v123 + 24), v127);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v454);
      LODWORD(v124) = v455;
      v126 = v454;
    }
    else
    {
      if ((_DWORD)v124)
        v125 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v124;
      else
        v125 = 0;
      v126 = (void *)(v125 & ~*(_QWORD *)(v123 + 24));
      v454 = v126;
    }
    DWORD2(v479) = v124;
    *(_QWORD *)&v479 = v126;
    v455 = 0;
    v128 = sub_1C6329368((unsigned int *)__dst, v69, v70);
    llvm::APInt::trunc((llvm::APInt *)&v479, v128, (llvm::APInt *)&__src);
    if (DWORD2(v479) >= 0x41 && (_QWORD)v479)
      MEMORY[0x1CAA32F9C](v479, 0x1000C8000313F17);
    *(_QWORD *)&v479 = __src;
    DWORD2(v479) = DWORD2(__src);
    if (sub_1C63686D8(*(_QWORD *)a1, (uint64_t)__dst[0], (_BOOL8)__dst[1], (uint64_t)&v479, 0))
    {
      v129 = *(_QWORD *)a1;
      v130 = *(unsigned __int8 **)(a2 + 64);
      *(_QWORD *)&__src = v130;
      if (v130)
        llvm::MetadataTracking::track((uint64_t)&__src, v130, 2);
      DWORD2(__src) = *(_DWORD *)(a2 + 60);
      v131 = *(_QWORD *)(v459 + 40) + 16 * DWORD2(v459);
      v132 = *(llvm **)v131;
      v133 = *(_QWORD *)(v131 + 8);
      v134 = *(_QWORD *)(v129 + 832);
      if (v134)
        v135 = *(_WORD *)(v134 + 8);
      else
        v135 = 0;
      v136 = sub_1C5D52060(v129, 199, (const llvm::APInt *)&__src, v132, v133, (uint64_t)__dst[0], (unint64_t)__dst[1], v135);
      v138 = v137;
      if ((_QWORD)__src)
        llvm::MetadataTracking::untrack((uint64_t)&__src, (unsigned __int8 *)__src);
      *(_QWORD *)&__src = v136;
      *((_QWORD *)&__src + 1) = v138;
      sub_1C5C5B0B4((uint64_t *)a1, a2, (uint64_t *)&__src, 1, 1);
      v139 = v459;
      *(_QWORD *)&__src = v136;
      *((_QWORD *)&__src + 1) = v138;
      v140 = (uint64_t *)a1;
      v141 = 1;
LABEL_244:
      sub_1C5C5B0B4(v140, v139, (uint64_t *)&__src, v141, 1);
      if (DWORD2(v479) < 0x41)
        return (uint64_t *)a2;
      v142 = (void *)v479;
      if (!(_QWORD)v479)
        return (uint64_t *)a2;
      goto LABEL_459;
    }
    if (DWORD2(v479) >= 0x41 && (_QWORD)v479)
      MEMORY[0x1CAA32F9C](v479, 0x1000C8000313F17);
    v75 = v459;
  }
  if (*(_WORD *)(v75 + 24) != 148)
    goto LABEL_117;
  v83 = sub_1C6131A64((unsigned int *)&v459);
  if ((_DWORD)v81 == 1)
  v84 = sub_1C6329368(*(unsigned int **)(v459 + 32), (uint64_t)v81, v82);
  v75 = v459;
  if (v83 == v84 && (v85 = *(_DWORD **)(v459 + 32), *(_WORD *)(*(_QWORD *)v85 + 24) == 253) && !v85[2])
  {
    if (*(_WORD *)(v459 + 24) != 253)
      v75 = *(_QWORD *)v85;
  }
  else
  {
LABEL_117:
    v76 = *(unsigned __int16 *)(v75 + 24);
    if (v76 != 253)
      goto LABEL_338;
    if (DWORD2(v459))
      goto LABEL_339;
  }
  LODWORD(__dst[1]) = 1;
  __dst[0] = 0;
  v77 = v458;
  v78 = *(unsigned __int16 *)(v458 + 24);
  if (v78 == 11)
  {
LABEL_122:
    v79 = *(_QWORD *)(v458 + 80);
    v80 = (const void **)(v79 + 24);
    v69 = *(unsigned int *)(v79 + 32);
    if (v69 > 0x40)
    {
      if (__dst != (void **)v80)
      {
        llvm::APInt::reallocate((uint64_t)__dst, v69);
        if (LODWORD(__dst[1]) <= 0x40)
          __dst[0] = (void *)*v80;
        else
          memcpy(__dst[0], *v80, (((unint64_t)LODWORD(__dst[1]) + 63) >> 3) & 0x3FFFFFF8);
      }
    }
    else
    {
      __dst[0] = (void *)*v80;
      LODWORD(__dst[1]) = v69;
    }
    goto LABEL_300;
  }
  if (v78 != 146)
  {
    if (v78 != 35)
      goto LABEL_300;
    goto LABEL_122;
  }
  DWORD2(__src) = 1;
  *(_QWORD *)&__src = 0;
  DWORD2(v479) = 1;
  *(_QWORD *)&v479 = 0;
  v460[0] = 0;
  v453 = 0;
  if (sub_1C5D3D1E4(v458, (void **)&__src, (void **)&v479, v460, &v453, 0, 0))
  {
    if (DWORD2(__src) > 0x40)
    {
      v143 = (_QWORD *)__src;
      v144 = (uint64_t *)v479;
      v145 = ((unint64_t)DWORD2(__src) + 63) >> 6;
      do
      {
        v146 = *v144++;
        *v143++ |= v146;
        --v145;
      }
      while (v145);
    }
    else
    {
      *(_QWORD *)&__src = __src | v479;
    }
    v461 = *(_OWORD *)*(_QWORD *)(v77 + 40);
    v147 = sub_1C6131328((unsigned __int8 *)&v461, v69, v70);
    v148 = v147;
    v149 = v460[0];
    if (v460[0] < v147)
    {
      if (DWORD2(__src) >= v147)
      {
        if (DWORD2(__src) > v147)
        {
          llvm::APInt::trunc((llvm::APInt *)&__src, v147, (llvm::APInt *)&v461);
        }
        else
        {
          DWORD2(v461) = DWORD2(__src);
          if (DWORD2(__src) > 0x40)
          {
            *(_QWORD *)&v461 = operator new[]();
            memcpy((void *)v461, (const void *)__src, (((unint64_t)DWORD2(v461) + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            *(_QWORD *)&v461 = __src;
          }
        }
      }
      else
      {
        llvm::APInt::zext((llvm::APInt *)&__src, v147, (uint64_t)&v461);
      }
      if (DWORD2(__src) >= 0x41 && (_QWORD)__src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      *(_QWORD *)&__src = v461;
      DWORD2(__src) = DWORD2(v461);
      v149 = v460[0];
      while (v149 < v148)
      {
        DWORD2(v461) = DWORD2(__src);
        if (DWORD2(__src) > 0x40)
        {
          *(_QWORD *)&v461 = operator new[]();
          memcpy((void *)v461, (const void *)__src, (((unint64_t)DWORD2(v461) + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          *(_QWORD *)&v461 = __src;
        }
        sub_1C4888094((uint64_t)&v461, v149);
        if (DWORD2(__src) > 0x40)
        {
          v150 = (_QWORD *)__src;
          v151 = (uint64_t *)v461;
          v152 = ((unint64_t)DWORD2(__src) + 63) >> 6;
          do
          {
            v153 = *v151++;
            *v150++ |= v153;
            --v152;
          }
          while (v152);
        }
        else
        {
          *(_QWORD *)&__src = __src | v461;
        }
        if (DWORD2(v461) >= 0x41 && (_QWORD)v461)
          MEMORY[0x1CAA32F9C](v461, 0x1000C8000313F17);
        v149 = 2 * v460[0];
        v460[0] *= 2;
      }
    }
    if (!(v149 % v148))
    {
      DWORD2(v461) = v148;
      if (v148 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v461, -1, 1);
      }
      else
      {
        v154 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v148;
        if (!v148)
          v154 = 0;
        *(_QWORD *)&v461 = v154;
      }
      if (LODWORD(__dst[1]) >= 0x41 && __dst[0])
        MEMORY[0x1CAA32F9C](__dst[0], 0x1000C8000313F17);
      __dst[0] = (void *)v461;
      LODWORD(__dst[1]) = DWORD2(v461);
      if (v460[0] >= v148)
      {
        v155 = 0;
        if (v460[0] / v148 <= 1)
          v156 = 1;
        else
          v156 = v460[0] / v148;
        do
        {
          llvm::APInt::extractBits((llvm::APInt *)&__src, v148, v155 * v148, (unsigned int *)&v461);
          if (LODWORD(__dst[1]) > 0x40)
          {
            v157 = __dst[0];
            v158 = (uint64_t *)v461;
            v159 = ((unint64_t)LODWORD(__dst[1]) + 63) >> 6;
            do
            {
              v160 = *v158++;
              *v157++ &= v160;
              --v159;
            }
            while (v159);
          }
          else
          {
            __dst[0] = (void *)((unint64_t)__dst[0] & v461);
          }
          if (DWORD2(v461) >= 0x41 && (_QWORD)v461)
            MEMORY[0x1CAA32F9C](v461, 0x1000C8000313F17);
          ++v155;
        }
        while (v155 != v156);
      }
    }
  }
  if (DWORD2(v479) >= 0x41 && (_QWORD)v479)
    MEMORY[0x1CAA32F9C](v479, 0x1000C8000313F17);
  if (DWORD2(__src) >= 0x41 && (_QWORD)__src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
LABEL_300:
  v161 = *(_QWORD *)(v75 + 80);
  if (**(_BYTE **)(v75 + 40))
    v162 = v161 == 0;
  else
    v162 = 1;
  v163 = !v162
      && *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 358 * **(unsigned __int8 **)(v75 + 40) + 2 * v161 + 73672) < 0x1000u;
  v164 = *(_QWORD *)(v75 + 88);
  *(_QWORD *)&v479 = *(_QWORD *)(v75 + 80);
  *((_QWORD *)&v479 + 1) = v164;
  v165 = sub_1C6131328((unsigned __int8 *)&v479, v69, v70);
  v69 = (uint64_t)v165;
  if (LODWORD(__dst[1]) >= v165)
  {
    if (LODWORD(__dst[1]) > v165)
    {
      llvm::APInt::trunc((llvm::APInt *)__dst, v165, (llvm::APInt *)&__src);
    }
    else
    {
      DWORD2(__src) = __dst[1];
      if (LODWORD(__dst[1]) > 0x40)
      {
        *(_QWORD *)&__src = operator new[]();
        memcpy((void *)__src, __dst[0], (((unint64_t)DWORD2(__src) + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        *(void **)&__src = __dst[0];
      }
    }
  }
  else
  {
    llvm::APInt::zext((llvm::APInt *)__dst, v165, (uint64_t)&__src);
  }
  if (LODWORD(__dst[1]) >= 0x41 && __dst[0])
    MEMORY[0x1CAA32F9C](__dst[0], 0x1000C8000313F17);
  v166 = __src;
  __dst[0] = (void *)__src;
  v167 = DWORD2(__src);
  LODWORD(__dst[1]) = DWORD2(__src);
  v168 = (*(unsigned __int16 *)(v75 + 26) >> 10) & 3;
  if (v168 && v168 != 3 && (v168 != 1 || !v163))
  {
    if (DWORD2(__src) < 0x41)
      goto LABEL_337;
    goto LABEL_335;
  }
  if (!DWORD2(__src))
    goto LABEL_326;
  if (DWORD2(__src) > 0x40)
  {
    if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)__dst) == v167)
    {
LABEL_326:
      v169 = *((_QWORD *)&v459 + 1);
      if ((_QWORD)v459 == v75)
        v169 = 0;
      *(_QWORD *)&__src = v459;
      *((_QWORD *)&__src + 1) = v169;
      sub_1C5C5B0B4((uint64_t *)a1, a2, (uint64_t *)&__src, 1, 1);
      v170 = *(unsigned __int16 *)(v75 + 26);
      if ((v170 & 0xC00) == 0x400)
      {
        v171 = *(_QWORD *)a1;
        v172 = (v170 >> 7) & 7;
        v173 = *(uint64_t **)(v75 + 40);
        v174 = *v173;
        v175 = v173[1];
        v176 = *(unsigned __int8 **)(v75 + 64);
        *(_QWORD *)&__src = v176;
        if (v176)
          llvm::MetadataTracking::track((uint64_t)&__src, v176, 2);
        DWORD2(__src) = *(_DWORD *)(v75 + 60);
        v177 = *(uint64_t **)(v75 + 32);
        v178 = sub_1C5D5D21C(v171, v172, 3, v174, v175, (uint64_t)&__src, *v177, v177[1], v177[5], v177[6], v177[10], v177[11], *(_QWORD *)(v75 + 80), *(_QWORD *)(v75 + 88), *(_QWORD *)(v75 + 96));
        if ((_QWORD)__src)
          llvm::MetadataTracking::untrack((uint64_t)&__src, (unsigned __int8 *)__src);
        if (*(_WORD *)(v75 + 58) == 3)
        {
          __src = (unint64_t)v178;
          v467 = v178;
          v468 = 1;
          v469 = v178;
          v470 = 2;
          v179 = (uint64_t *)a1;
          v180 = v75;
          v181 = 3;
        }
        else
        {
          *(_QWORD *)&__src = v178;
          DWORD2(__src) = 0;
          v467 = v178;
          LODWORD(v468) = 1;
          v179 = (uint64_t *)a1;
          v180 = v75;
          v181 = 2;
        }
        sub_1C5C5B0B4(v179, v180, (uint64_t *)&__src, v181, 1);
      }
      if (LODWORD(__dst[1]) < 0x41)
        return (uint64_t *)a2;
      v142 = __dst[0];
      if (!__dst[0])
        return (uint64_t *)a2;
LABEL_459:
      MEMORY[0x1CAA32F9C](v142, 0x1000C8000313F17);
      return (uint64_t *)a2;
    }
LABEL_335:
    if (v166)
      MEMORY[0x1CAA32F9C](v166, 0x1000C8000313F17);
    goto LABEL_337;
  }
  if ((_QWORD)__src == 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(__src))
    goto LABEL_326;
LABEL_337:
  v75 = v459;
  v76 = *(unsigned __int16 *)(v459 + 24);
LABEL_338:
  if (v76 == 310)
  {
    v479 = *(_OWORD *)(v75 + 80);
    v210 = sub_1C6131264((unsigned __int8 *)&v479, v69, v70);
    v211 = *(_QWORD *)(v75 + 48);
    if (v211)
    {
      v212 = 1;
      do
      {
        if (!*(_DWORD *)(v211 + 8))
        {
          if (!v212)
            goto LABEL_339;
          --v212;
        }
        v211 = *(_QWORD *)(v211 + 32);
      }
      while (v211);
      if (!v212 && (v210 - 3) <= 2u)
      {
        v213 = (uint64_t *)qword_1C866B1E0[(char)(v210 - 3)];
        DWORD2(__src) = 1;
        *(_QWORD *)&__src = 0;
        if (sub_1C5D3CF08(v458, (void **)&__src, v70))
          v214 = sub_1C47EE5B8((uint64_t ***)&__src, 0xFFFFFFFFFFFFFFFFLL) == v213;
        else
          v214 = 0;
        if (DWORD2(__src) >= 0x41 && (_QWORD)__src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        if (v214
          && (*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 1312))(*(_QWORD *)(a1 + 8), v75, 0))
        {
          v320 = *(uint64_t **)(v75 + 32);
          v321 = *v320;
          DWORD2(__src) = *((_DWORD *)v320 + 2);
          *(_QWORD *)&__src = v321;
          v467 = (_QWORD *)v320[5];
          LODWORD(v468) = *((_DWORD *)v320 + 12);
          LODWORD(v470) = *((_DWORD *)v320 + 22);
          v469 = (_QWORD *)v320[10];
          v322 = *(_QWORD *)(v75 + 32);
          v472 = *(_DWORD *)(v322 + 128);
          v471 = *(_QWORD *)(v322 + 120);
          v323 = *(_QWORD *)(v75 + 32);
          v474 = *(_DWORD *)(v323 + 168);
          v473 = *(_QWORD *)(v323 + 160);
          v324 = *(_QWORD *)(v75 + 32);
          v476 = *(_DWORD *)(v324 + 208);
          v475 = *(_QWORD *)(v324 + 200);
          v325 = *(_QWORD *)a1;
          v326 = sub_1C636A8B4(*(_QWORD *)a1, (uint64_t)v456, v457, 1, 0);
          v328 = v327;
          v329 = v479;
          v330 = *(void **)(a2 + 64);
          __dst[0] = v330;
          if (v330)
            llvm::MetadataTracking::track((uint64_t)__dst, (unsigned __int8 *)v330, 2);
          LODWORD(__dst[1]) = *(_DWORD *)(a2 + 60);
          v331 = sub_1C5D605F8(v325, v326, v328, (void *)v329, *((uint64_t *)&v329 + 1), (uint64_t)__dst, (uint64_t *)&__src, 6, *(_QWORD *)(v75 + 96), (*(unsigned __int16 *)(v75 + 26) >> 7) & 7, 3);
          v333 = v332;
          if (__dst[0])
            llvm::MetadataTracking::untrack((uint64_t)__dst, (unsigned __int8 *)__dst[0]);
          __dst[0] = v331;
          __dst[1] = v333;
          sub_1C5C5B0B4((uint64_t *)a1, a2, (uint64_t *)__dst, 1, 1);
          sub_1C5C5B004(a1, (uint64_t)v331);
          return (uint64_t *)a2;
        }
      }
    }
  }
LABEL_339:
  if ((_BYTE)v456)
    v182 = v456 - 15 < 0x9C;
  else
    v182 = (*(_DWORD *)(v457 + 8) & 0xFE) == 18;
  if (v37)
  {
    if (!v182)
    {
      v183 = *(unsigned __int16 *)(v459 + 24);
      if (v183 == 253 || v183 == 200 && *(_WORD *)(**(_QWORD **)(v459 + 32) + 24) == 253)
      {
        v184 = sub_1C5CA4D78((uint64_t *)a1, a2, v70);
        if (v184)
        {
          v186 = (uint64_t)v184;
          v187 = v185;
          v188 = v459;
          if (*(_WORD *)(v459 + 24) == 200)
            v188 = **(_QWORD **)(v459 + 32);
          sub_1C5C5B004(a1, a2);
          sub_1C5D6146C(*(_QWORD *)a1, v188, 0, v186, v187);
          return (uint64_t *)a2;
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 34))
  {
    v189 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40);
    v190 = *(unsigned __int16 *)(v189 + 24);
    v191 = v190 == 35 || v190 == 11;
    if (v191
      && sub_1C49AB31C((llvm::APInt *)(*(_QWORD *)(v189 + 80) + 24))
      && *(_WORD *)(**(_QWORD **)(a2 + 32) + 24) != 253)
    {
      *(_QWORD *)&__src = &v467;
      *((_QWORD *)&__src + 1) = 0x800000000;
      __dst[0] = v465;
      __dst[1] = v465;
      v463 = 2;
      v464 = 0;
      *(_QWORD *)&v461 = 0;
      v192 = sub_1C5CA7C70(a1, a2, (uint64_t)&__src, (llvm::SmallPtrSetImplBase *)__dst, v189, (uint64_t *)&v461);
      if (DWORD2(__src))
        v194 = v192;
      else
        v194 = 0;
      v442 = v194;
      if (v194 == 1)
      {
        v195 = *(_QWORD *)(a2 + 32);
        v448 = *(_QWORD *)(v195 + 48);
        v450 = *(_QWORD *)(v195 + 40);
        v196 = v461;
        if ((_QWORD)v461)
        {
          v197 = *(_QWORD *)a1;
          v198 = *(unsigned __int8 **)(v461 + 64);
          *(_QWORD *)&v479 = v198;
          if (v198)
            llvm::MetadataTracking::track((uint64_t)&v479, v198, 2);
          DWORD2(v479) = *(_DWORD *)(v196 + 60);
          v199 = *(_QWORD *)(v196 + 40);
          v200 = *(llvm **)v199;
          v201 = *(_QWORD *)(v199 + 8);
          v202 = *(_QWORD *)(v197 + 832);
          if (v202)
            LOWORD(v202) = *(_WORD *)(v202 + 8);
          v203 = sub_1C5D56C70(v197, 171, (const llvm::APInt *)&v479, v200, v201, v196, 0, v193, v450, v448, v202);
          v205 = v204;
          if ((_QWORD)v479)
            llvm::MetadataTracking::untrack((uint64_t)&v479, (unsigned __int8 *)v479);
          sub_1C5D6146C(*(_QWORD *)a1, v196, 0, (uint64_t)v203, v205);
          if (*((_WORD *)v203 + 12) == 171)
            sub_1C636DCBC(*(_QWORD *)a1, (uint64_t)v203, v196, 0, v450, v448);
        }
        if (__dst[1] == __dst[0])
          v206 = (uint64_t *)((char *)&v463 + 4);
        else
          v206 = &v463;
        v207 = *(unsigned int *)v206;
        if ((_DWORD)v207)
        {
          v208 = 8 * v207;
          v209 = (uint64_t *)__dst[1];
          while ((unint64_t)*v209 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v209;
            v208 -= 8;
            if (!v208)
              goto LABEL_418;
          }
        }
        else
        {
          v209 = (uint64_t *)__dst[1];
        }
        v215 = (unint64_t *)((char *)__dst[1] + 8 * v207);
        if (v209 != (uint64_t *)v215)
        {
          v216 = *v209;
LABEL_393:
          v217 = *(uint64_t **)(v216 + 32);
          v218 = *v217;
          v219 = v217[1];
          v221 = v217[5];
          v220 = v217[6];
          v222 = *(unsigned __int16 *)(v218 + 24);
          v223 = v222 == 35 || v222 == 11;
          v224 = v220;
          if (v223)
            v225 = v218;
          else
            v225 = v221;
          if (v223)
            v220 = v220 & 0xFFFFFFFF00000000 | v219;
          v440 = v220;
          if (v223)
            v226 = (llvm::LLVMContext *)v221;
          else
            v226 = (llvm::LLVMContext *)v218;
          v437 = v226;
          if (v223)
            v227 = v224;
          else
            v227 = v219;
          v434 = v227;
          v228 = *(_QWORD *)a1;
          v229 = *(unsigned __int8 **)(v225 + 64);
          *(_QWORD *)&v479 = v229;
          if (v229)
            llvm::MetadataTracking::track((uint64_t)&v479, v229, 2);
          DWORD2(v479) = *(_DWORD *)(v225 + 60);
          v230 = *(_QWORD *)(v225 + 40) + 16 * v440;
          v231 = *(llvm **)v230;
          v232 = *(_QWORD *)(v230 + 8);
          v233 = *(_QWORD *)(v228 + 832);
          if (v233)
            LOWORD(v233) = *(_WORD *)(v233 + 8);
          v234 = sub_1C5D56C70(v228, 171, (const llvm::APInt *)&v479, v231, v232, v225, v440, v193, v450, v448, v233);
          v236 = v235;
          if ((_QWORD)v479)
            llvm::MetadataTracking::untrack((uint64_t)&v479, (unsigned __int8 *)v479);
          sub_1C636DCBC(*(_QWORD *)a1, v216, (uint64_t)v437, v434, (uint64_t)v234, v236);
          v237 = (unint64_t *)(v209 + 1);
          while (v237 != v215)
          {
            v238 = *v237++;
            v216 = v238;
            if (v238 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v209 = (uint64_t *)(v237 - 1);
              goto LABEL_393;
            }
          }
        }
LABEL_418:
        if (DWORD2(__src))
        {
          v239 = (uint64_t *)__src;
          v240 = 8 * DWORD2(__src);
          do
          {
            v241 = *v239;
            v242 = *(_QWORD *)a1;
            v243 = *(unsigned __int8 **)(*v239 + 64);
            *(_QWORD *)&v479 = v243;
            if (v243)
              llvm::MetadataTracking::track((uint64_t)&v479, v243, 2);
            DWORD2(v479) = *(_DWORD *)(v241 + 60);
            v244 = *(_QWORD *)(v241 + 40);
            v245 = *(llvm **)v244;
            v246 = *(_QWORD *)(v244 + 8);
            v247 = *(_QWORD *)(v242 + 832);
            if (v247)
              LOWORD(v247) = *(_WORD *)(v247 + 8);
            v248 = sub_1C5D56C70(v242, 171, (const llvm::APInt *)&v479, v245, v246, v241, 0, v193, v450, v448, v247);
            v250 = v249;
            if ((_QWORD)v479)
              llvm::MetadataTracking::untrack((uint64_t)&v479, (unsigned __int8 *)v479);
            sub_1C5D6146C(*(_QWORD *)a1, v241, 0, (uint64_t)v248, v250);
            if (*((_WORD *)v248 + 12) == 171)
              v248 = sub_1C636DCBC(*(_QWORD *)a1, (uint64_t)v248, v241, 0, v450, v448);
            *(_QWORD *)&v479 = sub_1C5CA4D78((uint64_t *)a1, (uint64_t)v248, v251);
            DWORD2(v479) = v252;
            v480 = v479;
            v481 = 1;
            sub_1C5C5B0B4((uint64_t *)a1, v241, (uint64_t *)&v479, 2, 1);
            ++v239;
            v240 -= 8;
          }
          while (v240);
        }
        sub_1C636595C(*(_QWORD *)a1, a2, **(_QWORD **)(a2 + 32));
      }
      if (__dst[1] != __dst[0])
        free(__dst[1]);
      if ((_QWORD **)__src != &v467)
        free((void *)__src);
      if (v442)
        return (uint64_t *)a2;
    }
  }
  v68 = sub_1C5CA598C(a1, v459, DWORD2(v459), v458, DWORD2(v458), a2);
  if (v68)
    return v68;
  v258 = v459;
  v259 = v458;
  if (*(unsigned __int16 *)(v459 + 24) == *(unsigned __int16 *)(v458 + 24))
  {
    v68 = sub_1C5CA64D8(a1, a2, v253, v458, v254, v255, v256, v257);
    if (v68)
      return v68;
    v258 = v459;
    v259 = v458;
  }
  v68 = sub_1C5CA6F54(a2, v258, SDWORD2(v459), v259, SDWORD2(v458), *(_QWORD *)a1, v256, v257);
  if (v68)
    return v68;
  v68 = sub_1C5CA6F54(a2, v458, SDWORD2(v458), v459, SDWORD2(v459), *(_QWORD *)a1, v260, v261);
  if (v68)
    return v68;
  if (v37)
  {
    v262 = *(_QWORD *)(v37 + 80);
    v263 = (llvm::APInt *)(v262 + 24);
    v264 = *(_DWORD *)(v262 + 32);
    if (v264 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v263) != v264 - 1)
        goto LABEL_448;
    }
    else if (*(_QWORD *)v263 != 1)
    {
      goto LABEL_448;
    }
    if (*(_WORD *)(v459 + 24) == 57
      && sub_1C636CD34(**(_QWORD **)(v459 + 32), *(_QWORD *)(*(_QWORD *)(v459 + 32) + 8), 0))
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v459 + 32) + 40);
      v336 = *(unsigned __int16 *)(v6 + 24);
      if (v336 == 199)
      {
        if (sub_1C6329368(*(unsigned int **)(v6 + 32), v334, v335) == (llvm::Type *)1)
          return (uint64_t *)v6;
        v336 = *(unsigned __int16 *)(v6 + 24);
      }
      if (v336 == 198 && sub_1C6329368(*(unsigned int **)(v6 + 32), v334, v335) == (llvm::Type *)1)
      {
        v298 = *(_QWORD *)a1;
        v337 = *(unsigned __int8 **)(a2 + 64);
        *(_QWORD *)&__src = v337;
        if (v337)
          llvm::MetadataTracking::track((uint64_t)&__src, v337, 2);
        DWORD2(__src) = *(_DWORD *)(a2 + 60);
        v300 = v456;
        v301 = v457;
        v302 = *(uint64_t **)(v6 + 32);
        goto LABEL_518;
      }
    }
  }
LABEL_448:
  if (sub_1C5C9FA08(a1, a2, 0))
    return (uint64_t *)a2;
  v267 = v459;
  if (*(_WORD *)(v459 + 24) == 253 && (*(_WORD *)(v459 + 26) & 0x380) == 0)
  {
    v268 = *(_WORD *)(v459 + 26) & 0xC00;
    if (v268 != 2048)
    {
      if (v268 != 1024)
        goto LABEL_467;
      goto LABEL_588;
    }
    v269 = *(_QWORD *)(v459 + 48);
    if (v269)
    {
      v270 = 1;
      do
      {
        if (*(_DWORD *)(v269 + 8) == DWORD2(v459))
        {
          if (!v270)
            goto LABEL_467;
          --v270;
        }
        v269 = *(_QWORD *)(v269 + 32);
      }
      while (v269);
      if (!v270)
      {
LABEL_588:
        *(_OWORD *)__dst = *(_OWORD *)(v459 + 80);
        v363 = sub_1C6329368((unsigned int *)&v458, v265, v266);
        v366 = sub_1C6131328((unsigned __int8 *)__dst, v364, v365) - v363;
        DWORD2(v479) = v363;
        if (v363 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v479, 0, 0);
          v363 = DWORD2(v479);
        }
        else
        {
          *(_QWORD *)&v479 = 0;
        }
        sub_1C4912E54(&v479, v366 + v363, v363);
        if (!sub_1C63686D8(*(_QWORD *)a1, v458, *((_BOOL8 *)&v458 + 1), (uint64_t)&v479, 0)
          || (*(_BYTE *)(a1 + 33)
           || (*(_WORD *)(*(_QWORD *)(v267 + 96) + 36) & 0xF00) != 0
           || (*(_BYTE *)(v267 + 26) & 8) != 0)
          && (!(_BYTE)v456
           || !LOBYTE(__dst[0])
           || *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 358 * v456 + 2 * LOBYTE(__dst[0]) + 73672) > 0xFFFu))
        {
          if (DWORD2(v479) >= 0x41 && (_QWORD)v479)
            MEMORY[0x1CAA32F9C](v479, 0x1000C8000313F17);
          goto LABEL_467;
        }
        v426 = *(_QWORD *)a1;
        v427 = v459;
        v428 = *(unsigned __int8 **)(v459 + 64);
        *(_QWORD *)&__src = v428;
        if (v428)
          llvm::MetadataTracking::track((uint64_t)&__src, v428, 2);
        DWORD2(__src) = *(_DWORD *)(v427 + 60);
        v429 = sub_1C636B5B0(v426, 3, (uint64_t)&__src, (uint64_t)v456, v457, **(_QWORD **)(v267 + 32), *(_QWORD *)(*(_QWORD *)(v267 + 32) + 8), v367, *(_QWORD *)(*(_QWORD *)(v267 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v267 + 32) + 48), (uint64_t)__dst[0], (uint64_t)__dst[1], *(_QWORD *)(v267 + 96));
        v431 = v430;
        if ((_QWORD)__src)
          llvm::MetadataTracking::untrack((uint64_t)&__src, (unsigned __int8 *)__src);
        sub_1C5C5B004(a1, a2);
        v139 = v459;
        *(_QWORD *)&__src = v429;
        DWORD2(__src) = v431;
        v467 = v429;
        LODWORD(v468) = 1;
        v140 = (uint64_t *)a1;
        v141 = 2;
        goto LABEL_244;
      }
    }
  }
LABEL_467:
  if (!v37)
    goto LABEL_474;
  v271 = *(_QWORD *)(v37 + 80);
  v272 = (_QWORD *)(v271 + 24);
  v273 = *(_DWORD *)(v271 + 32);
  if (v273 >= 0x41)
  {
    if (v273 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v271 + 24)) > 0x40)
      goto LABEL_474;
    v272 = (_QWORD *)*v272;
  }
  if (*v272 == 0xFFFFLL && *(_WORD *)(v459 + 24) == 172)
  {
    v68 = sub_1C5CA7198(a1, v459, **(_QWORD **)(v459 + 32), *(_QWORD *)(*(_QWORD *)(v459 + 32) + 8), *(_QWORD *)(*(_QWORD *)(v459 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v459 + 32) + 48), 0);
    if (v68)
      return v68;
  }
LABEL_474:
  v274 = *(uint64_t **)(a2 + 32);
  v275 = *v274;
  v276 = v274[1];
  v277 = v274[5];
  v278 = *((_DWORD *)v274 + 12);
  if (!(*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 328))(*(_QWORD *)(a1 + 8), *v274, v276))goto LABEL_493;
  v279 = *(_QWORD *)(v277 + 48);
  if (!v279)
    goto LABEL_484;
  v280 = 1;
  do
  {
    if (*(_DWORD *)(v279 + 8) == v278)
    {
      if (!v280)
        goto LABEL_484;
      --v280;
    }
    v279 = *(_QWORD *)(v279 + 32);
  }
  while (v279);
  if (v280)
    goto LABEL_484;
  v281 = *(unsigned __int16 *)(v277 + 24);
  if ((_DWORD)v281 == 175)
  {
    v410 = 177;
LABEL_643:
    v452 = v410;
    v411 = *(_QWORD *)(v277 + 32);
    if (sub_1C636F400(*(_QWORD *)v411))
      goto LABEL_649;
    goto LABEL_484;
  }
  if ((_DWORD)v281 == 177)
  {
    v410 = 175;
    goto LABEL_643;
  }
LABEL_484:
  v282 = *(_QWORD *)(v275 + 48);
  if (!v282)
    goto LABEL_493;
  v283 = 1;
  do
  {
    if (*(_DWORD *)(v282 + 8) == (_DWORD)v276)
    {
      if (!v283)
        goto LABEL_493;
      --v283;
    }
    v282 = *(_QWORD *)(v282 + 32);
  }
  while (v282);
  if (v283)
    goto LABEL_493;
  v281 = *(unsigned __int16 *)(v275 + 24);
  if ((_DWORD)v281 == 175)
  {
    v413 = 177;
  }
  else
  {
    if ((_DWORD)v281 != 177)
      goto LABEL_493;
    v413 = 175;
  }
  v452 = v413;
  v411 = *(_QWORD *)(v275 + 32);
  if (!sub_1C636F400(*(_QWORD *)v411))
    goto LABEL_493;
  LODWORD(v276) = v278;
  v275 = v277;
LABEL_649:
  v414 = *(_QWORD *)(v411 + 40);
  v415 = *(unsigned int *)(v411 + 48);
  v416 = v276;
  v417 = *(unsigned __int8 **)(a2 + 64);
  *(_QWORD *)&__src = v417;
  if (v417)
    llvm::MetadataTracking::track((uint64_t)&__src, v417, 2);
  DWORD2(__src) = *(_DWORD *)(a2 + 60);
  v418 = *(_QWORD *)(a2 + 40);
  v419 = *(llvm **)v418;
  v420 = *(_QWORD *)(v418 + 8);
  v421 = *(_QWORD *)(*(_QWORD *)a1 + 832);
  if (v421)
    LOWORD(v421) = *(_WORD *)(v421 + 8);
  v423 = sub_1C5D56C70(*(_QWORD *)a1, v452, (const llvm::APInt *)&__src, v419, v420, v275, v416, v412, v414, v415, v421);
  v425 = *(_QWORD *)(*(_QWORD *)a1 + 832);
  if (v425)
    LOWORD(v425) = *(_WORD *)(v425 + 8);
  v6 = (uint64_t)sub_1C5D56C70(*(_QWORD *)a1, v281, (const llvm::APInt *)&__src, v419, v420, (uint64_t)v423, v422, v424, v414, v415, v425);
  if ((_QWORD)__src)
    llvm::MetadataTracking::untrack((uint64_t)&__src, (unsigned __int8 *)__src);
  if (v6)
    return (uint64_t *)v6;
LABEL_493:
  v284 = *(_QWORD *)a1;
  v285 = *(_OWORD *)*(_QWORD *)(a2 + 40);
  __src = v285;
  if (!(_BYTE)v285)
    goto LABEL_505;
  v286 = *(_QWORD *)(v284 + 24);
  if (!*(_QWORD *)(v286 + 8 * v285 + 96))
    goto LABEL_505;
  v287 = *(uint64_t **)(a2 + 32);
  v288 = *v287;
  v289 = v287[1];
  if (*(_WORD *)(*v287 + 24) == 200)
  {
    v290 = *(_QWORD *)(v288 + 32);
    v288 = *(_QWORD *)v290;
    v289 = v289 & 0xFFFFFFFF00000000 | *(unsigned int *)(v290 + 8);
  }
  v291 = v287[5];
  if (!sub_1C5D621EC(v288, v289, 0))
    goto LABEL_505;
  v292 = *(_QWORD *)(v288 + 48);
  if (!v292)
    goto LABEL_505;
  v293 = 1;
  do
  {
    if (*(_DWORD *)(v292 + 8) == (_DWORD)v289)
    {
      if (!v293)
        goto LABEL_505;
      --v293;
    }
    v292 = *(_QWORD *)(v292 + 32);
  }
  while (v292);
  if (v293 || !sub_1C636F474(v291))
    goto LABEL_505;
  v368 = *(_DWORD **)(v288 + 32);
  v369 = *(_QWORD *)v368;
  v370 = *(unsigned __int16 *)(*(_QWORD *)v368 + 24);
  if (v370 == 201)
  {
    v368 = *(_DWORD **)(v369 + 32);
    v369 = *(_QWORD *)v368;
    v370 = *(unsigned __int16 *)(*(_QWORD *)v368 + 24);
  }
  if (v370 != 177)
    goto LABEL_505;
  v371 = *(_QWORD *)(v369 + 48);
  if (!v371)
    goto LABEL_505;
  v372 = v368[2];
  v373 = 1;
  do
  {
    if (*(_DWORD *)(v371 + 8) == v372)
    {
      if (!v373)
        goto LABEL_505;
      --v373;
    }
    v371 = *(_QWORD *)(v371 + 32);
  }
  while (v371);
  if (v373)
    goto LABEL_505;
  v374 = *(_QWORD *)(*(_QWORD *)(v369 + 32) + 40);
  v375 = *(unsigned __int16 *)(v374 + 24);
  if (v375 != 35 && v375 != 11)
    goto LABEL_505;
  v377 = *(_QWORD *)(v374 + 80);
  v379 = sub_1C47A8C74((unsigned __int8 *)&__src);
  if ((_DWORD)v378 == 1)
  v380 = (_QWORD **)(v377 + 24);
  v381 = *(_DWORD *)(v377 + 32);
  v382 = (_QWORD *)(v377 + 24);
  if (v381 >= 0x41)
  {
    if (v381 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v377 + 24)) > 0x40)
      goto LABEL_505;
    v382 = *v380;
  }
  if (*v382 >= (unint64_t)v379
    || !(*(unsigned int (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v286 + 320))(v286, **(_QWORD **)(v369 + 32), *(_QWORD *)(*(_QWORD *)(v369 + 32) + 8), *(_QWORD *)(*(_QWORD *)(v369 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v369 + 32) + 48)))
  {
    goto LABEL_505;
  }
  v383 = *(void **)(a2 + 64);
  __dst[0] = v383;
  if (v383)
    llvm::MetadataTracking::track((uint64_t)__dst, (unsigned __int8 *)v383, 2);
  LODWORD(__dst[1]) = *(_DWORD *)(a2 + 60);
  v384 = sub_1C6366544(v284, **(_QWORD **)(v369 + 32), *(_QWORD *)(*(_QWORD *)(v369 + 32) + 8), (uint64_t)__dst, __src, *((uint64_t *)&__src + 1));
  v386 = v385;
  v451 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v286 + 400))(v286, *(_QWORD *)(**(_QWORD **)(v284 + 40) + 40) + 272, *(_QWORD *)(v284 + 56), __src, *((_QWORD *)&__src + 1));
  v388 = v387;
  if (*(_DWORD *)(v377 + 32) >= 0x41u)
    v380 = (_QWORD **)*v380;
  v389 = *v380;
  DWORD2(v479) = v379;
  if (v379 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v479, 0, 0);
    v391 = 1 << (char)v389;
    if (DWORD2(v479) > 0x40)
    {
      *(_QWORD *)(v479 + 8 * (v389 >> 6)) |= v391;
      goto LABEL_630;
    }
    v390 = v479;
  }
  else
  {
    v390 = 0;
    v391 = 1 << (char)v389;
  }
  *(_QWORD *)&v479 = v391 | v390;
LABEL_630:
  v393 = sub_1C63666FC(v284, (llvm::LLVMContext *)&v479, (const llvm::APInt *)__dst, __src, *((uint64_t *)&__src + 1), 0, 0);
  v395 = v394;
  if (DWORD2(v479) >= 0x41 && (_QWORD)v479)
    MEMORY[0x1CAA32F9C](v479, 0x1000C8000313F17);
  v396 = *(_QWORD *)(v284 + 832);
  if (v396)
    LOWORD(v396) = *(_WORD *)(v396 + 8);
  v397 = sub_1C5D56C70(v284, 171, (const llvm::APInt *)__dst, (llvm *)__src, *((uint64_t *)&__src + 1), v384, v386, v392, v393, v395, v396);
  v399 = v398;
  v400 = sub_1C6366AB4(v284, 0, (const llvm::APInt *)__dst, (llvm *)__src, *((uint64_t *)&__src + 1), 0, 0);
  v402 = v401;
  v403 = sub_1C6367818((_QWORD *)v284, 0x11u);
  v406 = 0;
  v407 = *(_QWORD *)(v284 + 832);
  if (v407)
    v406 = *(_WORD *)(v407 + 8);
  v408 = sub_1C5D58E08(v284, (const char *)0xC1, (const llvm::APInt *)__dst, v451, v388, (uint64_t)v397, v399, v405, (uint64_t)v400, v402, v403, v404, SHIDWORD(v404), v406);
  v6 = sub_1C6366544(v284, (uint64_t)v408, v409, (uint64_t)__dst, __src, *((uint64_t *)&__src + 1));
  if (__dst[0])
    llvm::MetadataTracking::untrack((uint64_t)__dst, (unsigned __int8 *)__dst[0]);
  if (v6)
    return (uint64_t *)v6;
LABEL_505:
  if (*(_WORD *)(v459 + 24) == 198)
  {
    v294 = *(unsigned __int16 *)(v458 + 24);
    if (v294 == 35 || v294 == 11)
    {
      v296 = (llvm::APInt *)(*(_QWORD *)(v458 + 80) + 24);
      __src = *(_OWORD *)(*(_QWORD *)(**(_QWORD **)(v459 + 32) + 40)
                        + 16 * *(unsigned int *)(*(_QWORD *)(v459 + 32) + 8));
      v297 = (_BYTE)__src
           ? sub_1C47A8C74((unsigned __int8 *)&__src)
           : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&__src);
      if (sub_1C4F30574(v296, v297))
      {
        v298 = *(_QWORD *)a1;
        v299 = *(unsigned __int8 **)(a2 + 64);
        *(_QWORD *)&__src = v299;
        if (v299)
          llvm::MetadataTracking::track((uint64_t)&__src, v299, 2);
        DWORD2(__src) = *(_DWORD *)(a2 + 60);
        v300 = v456;
        v301 = v457;
        v302 = *(uint64_t **)(v459 + 32);
LABEL_518:
        v303 = *v302;
        v304 = v302[1];
        v305 = *(_QWORD *)(v298 + 832);
        if (v305)
          v306 = *(_WORD *)(v305 + 8);
        else
          v306 = 0;
        v29 = sub_1C5D52060(v298, 199, (const llvm::APInt *)&__src, v300, v301, v303, v304, v306);
LABEL_33:
        v6 = (uint64_t)v29;
        v30 = (unsigned __int8 *)__src;
        if (!(_QWORD)__src)
          return (uint64_t *)v6;
        p_src = (void **)&__src;
LABEL_35:
        llvm::MetadataTracking::untrack((uint64_t)p_src, v30);
        return (uint64_t *)v6;
      }
    }
  }
  if (!sub_1C5CA00A8(*(_QWORD *)(a1 + 8), 0x55u, v456, v457, *(unsigned __int8 *)(a1 + 33)))return 0;
  v309 = *(_QWORD *)a1;
  v310 = *(uint64_t **)(a2 + 32);
  v311 = *v310;
  v312 = *((_DWORD *)v310 + 2);
  v313 = v310[5];
  v314 = *((unsigned int *)v310 + 12);
  __src = *(_OWORD *)(*(_QWORD *)(v313 + 40) + 16 * v314);
  v315 = *(unsigned __int16 *)(v311 + 24);
  if (v315 == 176)
  {
    v315 = *(unsigned __int16 *)(v313 + 24);
    v316 = v314;
    v317 = v313;
  }
  else
  {
    v316 = v312;
    v317 = v311;
    v312 = v314;
    v311 = v313;
  }
  if (v315 != 173 && v315 != 56)
    return 0;
  if (*(_WORD *)(v311 + 24) != 176)
    return 0;
  v318 = *(_QWORD *)(v317 + 48);
  if (!v318)
    return 0;
  v319 = 1;
  do
  {
    if (*(_DWORD *)(v318 + 8) == v316)
    {
      if (!v319)
        return 0;
      --v319;
    }
    v318 = *(_QWORD *)(v318 + 32);
  }
  while (v318);
  if (v319)
    return 0;
  v338 = *(_QWORD *)(v311 + 48);
  if (!v338)
    return 0;
  v339 = 1;
  do
  {
    if (*(_DWORD *)(v338 + 8) == v312)
    {
      if (!v339)
        return 0;
      --v339;
    }
    v338 = *(_QWORD *)(v338 + 32);
  }
  while (v338);
  if (v339)
    return 0;
  v340 = *(_QWORD *)(v317 + 32);
  v341 = *(_QWORD *)(v311 + 32);
  if (*(_QWORD *)v340 != *(_QWORD *)v341)
    return 0;
  if (*(_DWORD *)(v340 + 8) != *(_DWORD *)(v341 + 8))
    return 0;
  v342 = sub_1C6131328((unsigned __int8 *)&__src, v307, v308);
  v343 = sub_1C5D4F7E8(*(_QWORD *)(*(_QWORD *)(v317 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v317 + 32) + 48), 1, 0);
  v344 = sub_1C5D4F7E8(*(_QWORD *)(*(_QWORD *)(v311 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v311 + 32) + 48), 1, 0);
  if (!v343)
    return 0;
  v345 = v344;
  v346 = *(_QWORD *)(v343 + 80);
  v347 = (unint64_t **)(v346 + 24);
  v348 = *(_DWORD *)(v346 + 32);
  if (v348 > 0x40)
  {
    if ((((*v347)[(v348 - 1) >> 6] >> (v348 - 1)) & 1) == 0)
      return 0;
    v349 = llvm::APInt::countTrailingZerosSlowCase(v347) == v348 - 1;
  }
  else
  {
    v349 = *v347 == (unint64_t *)(1 << (v348 - 1));
  }
  if (!v349 || v345 == 0)
    return 0;
  v352 = *(_QWORD *)(v345 + 80);
  v353 = (_QWORD *)(v352 + 24);
  v354 = *(_DWORD *)(v352 + 32);
  if (v354 >= 0x41)
  {
    if (v354 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v352 + 24)) <= 0x40)
    {
      v353 = (_QWORD *)*v353;
      goto LABEL_579;
    }
    return 0;
  }
LABEL_579:
  if (*v353 != v342 - 1)
    return 0;
  v355 = *(void **)(a2 + 64);
  __dst[0] = v355;
  if (v355)
  {
    llvm::MetadataTracking::track((uint64_t)__dst, (unsigned __int8 *)v355, 2);
    v346 = *(_QWORD *)(v343 + 80);
  }
  LODWORD(__dst[1]) = *(_DWORD *)(a2 + 60);
  v356 = sub_1C63666FC(v309, (llvm::LLVMContext *)(v346 + 24), (const llvm::APInt *)__dst, __src, *((uint64_t *)&__src + 1), 0, 0);
  v359 = *(uint64_t **)(v317 + 32);
  v360 = *v359;
  v361 = v359[1];
  v362 = *(_QWORD *)(v309 + 832);
  if (v362)
    LOWORD(v362) = *(_WORD *)(v362 + 8);
  v6 = (uint64_t)sub_1C5D56C70(v309, 85, (const llvm::APInt *)__dst, (llvm *)__src, *((uint64_t *)&__src + 1), v360, v361, v358, v356, v357, v362);
  if (__dst[0])
    llvm::MetadataTracking::untrack((uint64_t)__dst, (unsigned __int8 *)__dst[0]);
  if (!v6)
    return 0;
  return (uint64_t *)v6;
}

uint64_t *sub_1C5C8CDAC(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t **v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  unsigned __int8 *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  llvm *v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  unsigned int v56;
  unint64_t v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  int v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  unsigned __int8 *v76;
  uint64_t v77;
  uint64_t *v78;
  unsigned int v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t *v90;
  int v91;
  int v92;
  int v94;
  uint64_t *v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  unsigned __int8 *v105;
  uint64_t *v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  BOOL v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t *v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t *v122;
  uint64_t v123;
  unint64_t v124;
  BOOL v125;
  BOOL v126;
  BOOL v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  llvm *v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  llvm **v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  _DWORD *v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  uint64_t v148;
  unsigned int v149;
  BOOL v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  uint64_t v162;
  unsigned int v163;
  BOOL v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v169;
  int v170;
  _DWORD *v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  int v175;
  uint64_t v176;
  unsigned int v177;
  BOOL v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  int v189;
  uint64_t v190;
  int v191;
  BOOL v192;
  unsigned int v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  uint64_t v198;
  unsigned int *v199;
  _QWORD *v200;
  unsigned __int8 *v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  __int128 v211;
  unint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  BOOL v231;
  uint64_t v232;
  _QWORD *v233;
  unsigned int v234;
  _QWORD *v235;
  unsigned __int8 *v236;
  unsigned int v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  unsigned __int8 *v241;
  uint64_t *v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  __int16 v248;
  unsigned int v249;
  void *v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  unint64_t v264;
  unsigned __int8 *v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t *v270;
  unint64_t v271;
  uint64_t *v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t *v276;
  unint64_t v277;
  uint64_t *v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t *v285;
  unint64_t v286;
  uint64_t *v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t *v291;
  unint64_t v292;
  uint64_t v293;
  llvm *v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  unint64_t v298;
  uint64_t *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t *v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t *v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t *v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  __int16 v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  unsigned int v323;
  unsigned int v324;
  unsigned int v325;
  unsigned int v326;
  unint64_t v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  llvm::Type *v334;
  unint64_t v335;
  uint64_t *v336;
  unint64_t v337;
  llvm *v338;
  uint64_t v339;
  uint64_t v340;
  unsigned int v341;
  llvm::APInt *v342;
  unint64_t v343;
  llvm::APInt *v344;
  llvm::APInt *v345;
  unsigned int v346;
  llvm::APInt *v347;
  llvm::APInt *v348;
  unsigned int v349;
  unsigned int v350;
  unint64_t v351;
  void *__s2;
  unsigned int v353;
  uint64_t v354;
  int v355;
  uint64_t v356;
  uint64_t v357;
  llvm::APInt *v358;
  uint64_t v359;
  unsigned __int8 *v360;
  int v361;
  __int128 v362;
  unsigned __int8 *v363;
  uint64_t v364;
  uint64_t v365;
  int v366;
  uint64_t v367;

  v367 = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)(a2 + 32);
  v6 = *v4;
  v5 = v4[1];
  v7 = v5;
  v8 = v4[5];
  v9 = v4[6];
  v362 = *(_OWORD *)(*(_QWORD *)(*v4 + 40) + 16 * v5);
  v10 = *(unsigned __int8 **)(a2 + 64);
  v360 = v10;
  if (v10)
    llvm::MetadataTracking::track((uint64_t)&v360, v10, 2);
  v361 = *(_DWORD *)(a2 + 60);
  v11 = *(unsigned __int16 *)(v8 + 24);
  if (*(_WORD *)(v6 + 24) == 51)
  {
    v12 = (uint64_t *)v6;
    if (v11 != 51)
      goto LABEL_22;
    v13 = (unint64_t)sub_1C6366AB4(*(_QWORD *)a1, 0, (const llvm::APInt *)&v360, (llvm *)v362, *((uint64_t *)&v362 + 1), 0, 0);
    goto LABEL_21;
  }
  if (v11 == 51)
  {
    v12 = (uint64_t *)v8;
    goto LABEL_22;
  }
  v14 = *(_QWORD *)a1;
  v363 = (unsigned __int8 *)v6;
  LODWORD(v364) = v5;
  v365 = v8;
  v366 = v9;
  v13 = (unint64_t)sub_1C5D53628(v14, 173, (const char *)&v360, (llvm *)v362, *((uint64_t *)&v362 + 1), (uint64_t)&v363, 2);
  if (v13)
    goto LABEL_21;
  v15 = v5;
  if (sub_1C5D583CC(*(_QWORD *)a1, v6) && !sub_1C5D583CC(*(_QWORD *)a1, v8))
  {
    v22 = *(_QWORD *)(*(_QWORD *)a1 + 832);
    if (v22)
      LOWORD(v22) = *(_WORD *)(v22 + 8);
    v13 = (unint64_t)sub_1C5D56C70(*(_QWORD *)a1, 173, (const llvm::APInt *)&v360, (llvm *)v362, *((uint64_t *)&v362 + 1), v8, v9, v20, v6, v5, v22);
    goto LABEL_21;
  }
  if ((_BYTE)v362)
  {
    if (v362 - 15 >= 0x9C)
      goto LABEL_25;
  }
  else if ((*(_DWORD *)(*((_QWORD *)&v362 + 1) + 8) & 0xFE) != 0x12)
  {
    goto LABEL_25;
  }
  v13 = (unint64_t)sub_1C5C9E2A0((uint64_t *)a1, a2, (const llvm::APInt *)&v360, v16, v17, v18, v19, v20);
  if (v13)
    goto LABEL_21;
  if ((sub_1C5D3DBE0(v8, 0, v21) & 1) != 0)
  {
LABEL_17:
    v12 = (uint64_t *)v6;
    goto LABEL_22;
  }
LABEL_25:
  if (sub_1C6368AD4(v8))
    goto LABEL_17;
  v13 = (unint64_t)sub_1C5C9F2A8((uint64_t *)a1, a2);
  if (v13)
    goto LABEL_21;
  v24 = sub_1C5C9F740((uint64_t *)a1, 173, (const llvm::APInt *)&v360, v6, v5, v8, v9, *(_WORD *)(a2 + 72));
  if (v24)
  {
    v12 = v24;
    goto LABEL_22;
  }
  if (!*(_BYTE *)(a1 + 33)
    || ((v25 = *(_QWORD *)(a1 + 8), v362 == 1)
     || (_BYTE)v362 && *(_QWORD *)(v25 + 8 * v362 + 96))
    && !*(_BYTE *)(v25 + 390 * v362 + 3918))
  {
    v26 = *(unsigned __int16 *)(v8 + 24);
    if (v26 == 35 || v26 == 11)
    {
      v27 = *(_QWORD *)(v8 + 80);
      v28 = (unint64_t **)(v27 + 24);
      v29 = *(_DWORD *)(v27 + 32);
      if (v29 > 0x40)
      {
        if ((((*v28)[(v29 - 1) >> 6] >> (v29 - 1)) & 1) == 0
          || llvm::APInt::countTrailingZerosSlowCase(v28) != v29 - 1)
        {
          goto LABEL_39;
        }
      }
      else if (*v28 != (unint64_t *)(1 << (v29 - 1)))
      {
        goto LABEL_39;
      }
      v12 = sub_1C5C9CC08(a1, a2);
      if (v12)
        goto LABEL_22;
    }
  }
LABEL_39:
  v350 = *(unsigned __int16 *)(v6 + 24);
  v358 = 0;
  LODWORD(v359) = 0;
  v356 = 0;
  LODWORD(v357) = 0;
  v354 = 0;
  v355 = 0;
  if (!sub_1C63762F8(*(unsigned int **)(a1 + 8), v8, v9)
    || !sub_1C5CA91A0(a1, v6, v5, (uint64_t)&v358, (uint64_t)&v356, (uint64_t)&v354, 1)
    || (v342 = v358,
        v30 = (uint64_t *)(*((_QWORD *)v358 + 5) + 16 * v359),
        v31 = *v30,
        v32 = sub_1C6365158(*(_DWORD *)(v354 + 76), *v30, v30[1]),
        v33 = v32,
        *(_BYTE *)(a1 + 33))
    && ((*(_DWORD *)(*(_QWORD *)(a1 + 8) + 92 * v32 + 4 * (v31 >> 3) + 171588) >> (4 * (v31 & 7))) & 0xF) != 0)
  {
    if (!sub_1C636F474(v8))
      goto LABEL_73;
    if (v350 != 199)
      goto LABEL_73;
    v41 = *(_QWORD *)(v6 + 48);
    if (!v41)
      goto LABEL_73;
    v42 = 1;
    do
    {
      if (*(_DWORD *)(v41 + 8) == (_DWORD)v5)
      {
        if (!v42)
          goto LABEL_73;
        --v42;
      }
      v41 = *(_QWORD *)(v41 + 32);
    }
    while (v41);
    if (v42
      || !sub_1C5CA91A0(a1, **(_QWORD **)(v6 + 32), *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8), (uint64_t)&v358, (uint64_t)&v356, (uint64_t)&v354, 0))
    {
      goto LABEL_73;
    }
    v43 = *(uint64_t **)(v6 + 32);
    v45 = *v43;
    v44 = v43[1];
    v46 = *(unsigned __int8 **)(v6 + 64);
    v363 = v46;
    if (v46)
      llvm::MetadataTracking::track((uint64_t)&v363, v46, 2);
    LODWORD(v364) = *(_DWORD *)(v6 + 60);
    v47 = *(_QWORD *)a1;
    v48 = *(_QWORD *)(v45 + 40) + 16 * v44;
    v49 = *(llvm **)v48;
    v50 = *(_QWORD *)(v48 + 8);
    v51 = sub_1C6366AB4(*(_QWORD *)a1, 1, (const llvm::APInt *)&v363, *(llvm **)v48, v50, 0, 0);
    v54 = *(_QWORD *)(v47 + 832);
    if (v54)
      LOWORD(v54) = *(_WORD *)(v54 + 8);
    v55 = sub_1C5D56C70(v47, 173, (const llvm::APInt *)&v363, v49, v50, v45, v44, v53, (uint64_t)v51, v52, v54);
    v57 = v44 & 0xFFFFFFFF00000000 | v56;
    sub_1C5C5B004(a1, (uint64_t)v55);
    v58 = *(_QWORD *)(*(_QWORD *)a1 + 832);
    if (v58)
      v59 = *(_WORD *)(v58 + 8);
    else
      v59 = 0;
    v106 = sub_1C5D52060(*(_QWORD *)a1, 199, (const llvm::APInt *)&v360, (llvm *)v362, *((uint64_t *)&v362 + 1), (uint64_t)v55, v57, v59);
LABEL_329:
    v12 = v106;
    if (v363)
      llvm::MetadataTracking::untrack((uint64_t)&v363, v363);
    goto LABEL_22;
  }
  if (v350 - 138 >= 2)
  {
    if (v350 == 192)
    {
      v104 = *(_QWORD **)a1;
      v105 = *(unsigned __int8 **)(v6 + 64);
      v363 = v105;
      if (v105)
        llvm::MetadataTracking::track((uint64_t)&v363, v105, 2);
      LODWORD(v364) = *(_DWORD *)(v6 + 60);
      v106 = sub_1C47DF81C(v104, (const llvm::APInt *)&v363, (uint64_t)v342, v359, v356, v357, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 80), *(_QWORD *)(*(_QWORD *)(v6 + 32) + 88), *(_QWORD *)(*(_QWORD *)(v6 + 32) + 120), *(_QWORD *)(*(_QWORD *)(v6 + 32) + 128), HIDWORD(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 128)), v33);
    }
    else
    {
      v200 = *(_QWORD **)a1;
      v201 = *(unsigned __int8 **)(v6 + 64);
      v363 = v201;
      if (v201)
        llvm::MetadataTracking::track((uint64_t)&v363, v201, 2);
      LODWORD(v364) = *(_DWORD *)(v6 + 60);
      v202 = v362;
      v203 = v359;
      v204 = v356;
      v205 = v357;
      v206 = sub_1C6367818(v200, v33);
      v209 = v200[104];
      if (v209)
        LOWORD(v209) = *(_WORD *)(v209 + 8);
      v106 = sub_1C5D58E08((uint64_t)v200, (const char *)0xC1, (const llvm::APInt *)&v363, (llvm *)v202, *((uint64_t *)&v202 + 1), (uint64_t)v342, v203, v208, v204, v205, v206, v207, SHIDWORD(v207), v209);
    }
    goto LABEL_329;
  }
  v34 = *(_QWORD *)(v6 + 48);
  if (v34)
  {
    v35 = 1;
    do
    {
      if (*(_DWORD *)(v34 + 8) == (_DWORD)v5)
      {
        if (!v35)
          goto LABEL_73;
        --v35;
      }
      v34 = *(_QWORD *)(v34 + 32);
    }
    while (v34);
    if (!v35)
    {
      v36 = *(_QWORD **)a1;
      v37 = *(unsigned __int8 **)(v6 + 64);
      v363 = v37;
      if (v37)
        llvm::MetadataTracking::track((uint64_t)&v363, v37, 2);
      LODWORD(v364) = *(_DWORD *)(v6 + 60);
      v38 = sub_1C47F4CEC(v36, (const llvm::APInt *)&v363, (llvm *)v362, *((uint64_t *)&v362 + 1), (uint64_t)v342, v359, v356, v357, v33, **(_QWORD **)(v6 + 32), *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8), HIDWORD(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8)), v350 == 139);
      v40 = v39;
      if (v363)
        llvm::MetadataTracking::untrack((uint64_t)&v363, v363);
      v363 = (unsigned __int8 *)v38;
      v364 = v40;
      sub_1C5C5B0B4((uint64_t *)a1, a2, (uint64_t *)&v363, 1, 1);
      sub_1C5D6146C(*(_QWORD *)a1, v6, 1, (uint64_t)v38, 1);
      sub_1C5C5B190((uint64_t *)a1, v6);
      goto LABEL_56;
    }
  }
LABEL_73:
  if (sub_1C636F474(v8) && v362 == 2)
  {
    v60 = *(_QWORD *)(v6 + 48);
    if (v60)
    {
      v61 = 1;
      do
      {
        if (*(_DWORD *)(v60 + 8) == (_DWORD)v5)
        {
          if (!v61)
            goto LABEL_103;
          --v61;
        }
        v60 = *(_QWORD *)(v60 + 32);
      }
      while (v60);
      if (!v61 && v350 - 171 <= 1)
      {
        v62 = *(uint64_t **)(v6 + 32);
        v63 = *v62;
        v343 = v62[1];
        v65 = v62[5];
        v64 = v62[6];
        if (sub_1C5CACF7C(a1, v65, v64) || sub_1C5CACF7C(a1, v63, v343))
          goto LABEL_85;
      }
    }
  }
LABEL_103:
  if (sub_1C636F400(v8))
  {
    v88 = *(_QWORD *)(v6 + 48);
    if (v88)
    {
      v89 = 1;
      do
      {
        if (*(_DWORD *)(v88 + 8) == v7)
        {
          if (!v89)
            goto LABEL_118;
          --v89;
        }
        v88 = *(_QWORD *)(v88 + 32);
      }
      while (v88);
      if (!v89 && v350 - 171 <= 1)
      {
        v90 = *(uint64_t **)(v6 + 32);
        v63 = *v90;
        v343 = v90[1];
        v65 = v90[5];
        v64 = v90[6];
        v91 = *(unsigned __int16 *)(v65 + 24);
        if (v91 == 11 || v91 == 35)
          goto LABEL_85;
        v92 = *(unsigned __int16 *)(v63 + 24);
        if (v92 == 35 || v92 == 11)
        {
LABEL_85:
          if (v350 == 171)
            v67 = 172;
          else
            v67 = 171;
          v68 = *(_QWORD *)a1;
          v69 = *(unsigned __int8 **)(v63 + 64);
          v363 = v69;
          if (v69)
            llvm::MetadataTracking::track((uint64_t)&v363, v69, 2);
          LODWORD(v364) = *(_DWORD *)(v63 + 60);
          v70 = *(_QWORD *)(v68 + 832);
          if (v70)
            LOWORD(v70) = *(_WORD *)(v70 + 8);
          v72 = sub_1C5D56C70(v68, 173, (const llvm::APInt *)&v363, (llvm *)v362, *((uint64_t *)&v362 + 1), v63, v343, v66, v8, v9, v70);
          v74 = v73;
          if (v363)
            llvm::MetadataTracking::untrack((uint64_t)&v363, v363);
          v75 = *(_QWORD *)a1;
          v76 = *(unsigned __int8 **)(v65 + 64);
          v363 = v76;
          if (v76)
            llvm::MetadataTracking::track((uint64_t)&v363, v76, 2);
          v344 = (llvm::APInt *)(v343 & 0xFFFFFFFF00000000 | v74);
          LODWORD(v364) = *(_DWORD *)(v65 + 60);
          v77 = *(_QWORD *)(v75 + 832);
          if (v77)
            LOWORD(v77) = *(_WORD *)(v77 + 8);
          v78 = sub_1C5D56C70(v75, 173, (const llvm::APInt *)&v363, (llvm *)v362, *((uint64_t *)&v362 + 1), v65, v64, v71, v8, v9, v77);
          v80 = v64 & 0xFFFFFFFF00000000 | v79;
          if (v363)
            llvm::MetadataTracking::untrack((uint64_t)&v363, v363);
          sub_1C5C5B004(a1, (uint64_t)v72);
          sub_1C5C5B004(a1, (uint64_t)v78);
          v82 = *(_QWORD *)(*(_QWORD *)a1 + 832);
          if (v82)
            LOWORD(v82) = *(_WORD *)(v82 + 8);
          v13 = (unint64_t)sub_1C5D56C70(*(_QWORD *)a1, v67, (const llvm::APInt *)&v360, (llvm *)v362, *((uint64_t *)&v362 + 1), (uint64_t)v72, (unint64_t)v344, v81, (uint64_t)v78, v80, v82);
          goto LABEL_21;
        }
      }
    }
LABEL_118:
    v94 = *(unsigned __int16 *)(v6 + 24);
    if (v94 == 56)
    {
      if (sub_1C5D62374(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v6 + 32) + 48), 0))
      {
        v210 = *(_QWORD *)a1;
        v211 = v362;
        v213 = sub_1C6366AB4(v210, 0, (const llvm::APInt *)&v360, (llvm *)v362, *((uint64_t *)&v362 + 1), 0, 0);
        v215 = *(uint64_t **)(v6 + 32);
        v216 = *v215;
        v217 = v215[1];
        v218 = *(_QWORD *)(v210 + 832);
        if (v218)
          LOWORD(v218) = *(_WORD *)(v218 + 8);
        v13 = (unint64_t)sub_1C5D56C70(v210, 57, (const llvm::APInt *)&v360, (llvm *)v211, *((uint64_t *)&v211 + 1), (uint64_t)v213, v212, v214, v216, v217, v218);
        goto LABEL_21;
      }
    }
    else if (v94 == 57)
    {
      v95 = *(uint64_t **)(v6 + 32);
      if (sub_1C6368AD4(*v95))
      {
        v96 = *(_QWORD *)a1;
        v97 = v362;
        v98 = v95[5];
        v99 = v95[6];
        v100 = sub_1C63293BC(v96, (const llvm::APInt *)&v360, v362, *((uint64_t *)&v362 + 1), 0, 0);
        v103 = *(_QWORD *)(v96 + 832);
        if (v103)
          LOWORD(v103) = *(_WORD *)(v103 + 8);
        v13 = (unint64_t)sub_1C5D56C70(v96, 56, (const llvm::APInt *)&v360, (llvm *)v97, *((uint64_t *)&v97 + 1), v98, v99, v102, v100, v101, v103);
        goto LABEL_21;
      }
    }
  }
  if (v350 == 171)
  {
    v107 = *(_QWORD *)(v6 + 48);
    if (v107)
    {
      v108 = 1;
      do
      {
        if (*(_DWORD *)(v107 + 8) == v7)
        {
          if (!v108)
            goto LABEL_139;
          --v108;
        }
        v107 = *(_QWORD *)(v107 + 32);
      }
      while (v107);
      if (!v108)
      {
        v109 = *(_QWORD *)(v6 + 32);
        if (*(_QWORD *)(v109 + 40) == v8 && *(_DWORD *)(v109 + 48) == (_DWORD)v9)
        {
          v238 = *(_QWORD *)v109;
          v239 = *(_QWORD *)(v109 + 8);
          v240 = *(_QWORD *)a1;
          v241 = *(unsigned __int8 **)(*(_QWORD *)v109 + 64);
          v363 = v241;
          if (v241)
            llvm::MetadataTracking::track((uint64_t)&v363, v241, 2);
          LODWORD(v364) = *(_DWORD *)(v238 + 60);
          v242 = sub_1C6366760(v240, (const llvm::APInt *)&v363, v238, v239, (llvm *)v362, *((uint64_t *)&v362 + 1));
          v244 = v243;
          if (v363)
            llvm::MetadataTracking::untrack((uint64_t)&v363, v363);
          sub_1C5C5B004(a1, (uint64_t)v242);
          v246 = *(_QWORD *)(*(_QWORD *)a1 + 832);
          if (v246)
            LOWORD(v246) = *(_WORD *)(v246 + 8);
          v13 = (unint64_t)sub_1C5D56C70(*(_QWORD *)a1, 171, (const llvm::APInt *)&v360, (llvm *)v362, *((uint64_t *)&v362 + 1), (uint64_t)v242, v244, v245, v8, v9, v246);
          goto LABEL_21;
        }
      }
    }
LABEL_139:
    v110 = 0;
    goto LABEL_149;
  }
  v110 = v350 == 175;
  if (v350 == 177 || v350 == 175)
  {
    v111 = *(_QWORD *)(v6 + 48);
    if (v111)
    {
      v112 = 1;
      do
      {
        if (*(_DWORD *)(v111 + 8) == v7)
        {
          if (!v112)
            goto LABEL_149;
          --v112;
        }
        v111 = *(_QWORD *)(v111 + 32);
      }
      while (v111);
      if (!v112)
      {
        v228 = sub_1C5D4F7E8(v8, v9, 0, 0);
        v229 = sub_1C5D4F7E8(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v6 + 32) + 48), 0, 0);
        v339 = v228;
        v346 = sub_1C6131328((unsigned __int8 *)&v362, v230, v231);
        if (v228)
        {
          if (v229)
          {
            v232 = *(_QWORD *)(v229 + 80);
            v233 = (_QWORD *)(v232 + 24);
            v234 = *(_DWORD *)(v232 + 32);
            if (v234 >= 0x41)
            {
              if (v234 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v232 + 24)) > 0x40)
                goto LABEL_149;
              v233 = (_QWORD *)*v233;
            }
            v235 = (_QWORD *)*v233;
            if (*v233 < (unint64_t)v346)
            {
              LODWORD(v364) = v346;
              if (v346 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v363, -1, 1);
              }
              else
              {
                v236 = (unsigned __int8 *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v346);
                if (!v346)
                  v236 = 0;
                v363 = v236;
              }
              v237 = v364;
              v353 = v364;
              if (v350 == 175)
              {
                if (v364 > 0x40)
                {
                  __s2 = (void *)operator new[]();
                  v347 = (llvm::APInt *)v363;
                  memcpy(__s2, v363, (((unint64_t)v353 + 63) >> 3) & 0x3FFFFFF8);
                }
                else
                {
                  v347 = (llvm::APInt *)v363;
                  __s2 = v363;
                }
                sub_1C4888094((uint64_t)&__s2, v235);
              }
              else
              {
                if (v364 > 0x40)
                {
                  __s2 = (void *)operator new[]();
                  v327 = v353 + 63;
                  v335 = (unint64_t)__s2;
                  v347 = (llvm::APInt *)v363;
                  memcpy(__s2, v363, (v327 >> 3) & 0x3FFFFFF8);
                  if (v353 > 0x40)
                  {
                    llvm::APInt::tcShiftRight((llvm::APInt *)__s2, (unint64_t *)(v327 >> 6), v235);
LABEL_380:
                    if (v347)
                      MEMORY[0x1CAA32F9C](v347, 0x1000C8000313F17);
LABEL_382:
                    v250 = __s2;
                    v349 = v353;
                    v251 = *(_QWORD *)(v339 + 80);
                    v252 = *(unsigned int *)(v251 + 32);
                    if (v252 > 0x40)
                    {
                      if (memcmp(*(const void **)(v251 + 24), __s2, ((unint64_t)(v252 + 63) >> 3) & 0x3FFFFFF8))
                        goto LABEL_384;
                    }
                    else if (*(void **)(v251 + 24) != __s2)
                    {
LABEL_384:
                      if (v349 >= 0x41 && v250)
                        MEMORY[0x1CAA32F9C](v250, 0x1000C8000313F17);
                      goto LABEL_149;
                    }
                    v254 = sub_1C6366760(*(_QWORD *)a1, (const llvm::APInt *)&v360, **(_QWORD **)(v6 + 32), *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8), (llvm *)v362, *((uint64_t *)&v362 + 1));
                    v256 = *(_QWORD *)(v6 + 32);
                    v257 = *(_QWORD *)(v256 + 40);
                    v258 = *(_QWORD *)(v256 + 48);
                    v259 = *(_QWORD *)(*(_QWORD *)a1 + 832);
                    if (v259)
                      LOWORD(v259) = *(_WORD *)(v259 + 8);
                    v12 = sub_1C5D56C70(*(_QWORD *)a1, v350, (const llvm::APInt *)&v360, (llvm *)v362, *((uint64_t *)&v362 + 1), (uint64_t)v254, v253, v255, v257, v258, v259);
                    if (v349 >= 0x41 && v250)
                      MEMORY[0x1CAA32F9C](v250, 0x1000C8000313F17);
                    goto LABEL_22;
                  }
                  v249 = v353;
                }
                else
                {
                  v347 = (llvm::APInt *)v363;
                  v335 = (unint64_t)v363;
                  v249 = v364;
                }
                if (v249 == (_DWORD)v235)
                  __s2 = 0;
                else
                  __s2 = (void *)(v335 >> (char)v235);
              }
              if (v237 < 0x41)
                goto LABEL_382;
              goto LABEL_380;
            }
          }
        }
      }
    }
  }
LABEL_149:
  if ((_BYTE)v362)
  {
    v113 = *(_QWORD *)(a1 + 8);
    if ((v362 == 1 || *(_QWORD *)(v113 + 8 * v362 + 96))
      && (*(unsigned __int8 *)(v113 + 390 * v362 + 4036) | 4) == 4)
    {
      v114 = v350 == 56 ? v6 : v8;
      v115 = v350 == 176 ? v6 : v8;
      v116 = v350 == 176 ? v7 : v9;
      if (*(_WORD *)(v114 + 24) == 56 && *(_WORD *)(v115 + 24) == 176)
      {
        v117 = *(uint64_t **)(v114 + 32);
        v118 = *v117;
        v119 = *((_DWORD *)v117 + 2);
        v120 = v117[5];
        v121 = *((_DWORD *)v117 + 12);
        v122 = *(uint64_t **)(v115 + 32);
        v123 = *v122;
        v124 = v122[1];
        v125 = v118 == v115 && v119 == v116;
        v126 = v125 && v120 == v123;
        v127 = v126 && v121 == (_DWORD)v124;
        if (v127 || v120 == v115 && v121 == v116 && v118 == v123 && v119 == (_DWORD)v124)
        {
          v128 = sub_1C5D4F7E8(v122[5], v122[6], 0, 0);
          if (v128)
          {
            v340 = *(_QWORD *)(v128 + 80);
            v348 = (llvm::APInt *)(v340 + 24);
            v334 = sub_1C6131328((unsigned __int8 *)&v362, v129, v83);
            v341 = *(_DWORD *)(v340 + 32);
            if (v341 >= 0x41)
            {
              if (v341 - llvm::APInt::countLeadingZerosSlowCase(v348) > 0x40)
                goto LABEL_179;
              v348 = *(llvm::APInt **)v348;
            }
            if (*(llvm::Type **)v348 == (llvm::Type *)((char *)v334 - 1))
            {
              v247 = *(_QWORD *)(*(_QWORD *)a1 + 832);
              if (v247)
                v248 = *(_WORD *)(v247 + 8);
              else
                v248 = 0;
              v13 = (unint64_t)sub_1C5D52060(*(_QWORD *)a1, 174, (const llvm::APInt *)&v360, (llvm *)v362, *((uint64_t *)&v362 + 1), v123, v124, v248);
              goto LABEL_21;
            }
          }
        }
      }
    }
  }
LABEL_179:
  v130 = *(_QWORD *)(a1 + 8);
  v131 = (llvm *)v362;
  if (v6 == v8 && v7 == (_DWORD)v9)
  {
    v13 = sub_1C5CA0E64((const llvm::APInt *)&v360, v130, (llvm *)v362, *((uint64_t *)&v362 + 1), *(_QWORD *)a1, *(unsigned __int8 *)(a1 + 33));
    goto LABEL_21;
  }
  if ((_BYTE)v362 && (v362 == 1 || *(_QWORD *)(v130 + 8 * v362 + 96)))
  {
    v132 = !v110;
    if ((*(_BYTE *)(v130 + 390 * v362 + 4040) & 0xFB) != 0)
      v132 = 1;
    if ((v132 & 1) == 0 && sub_1C636F400(v8) && sub_1C636F474(**(_QWORD **)(v6 + 32)))
    {
      v219 = *(_QWORD *)a1;
      v220 = *((_QWORD *)&v362 + 1);
      v222 = sub_1C6366AB4(v219, -2, (const llvm::APInt *)&v360, v131, *((uint64_t *)&v362 + 1), 0, 0);
      v224 = *(_QWORD *)(v6 + 32);
      v225 = *(_QWORD *)(v224 + 40);
      v226 = *(_QWORD *)(v224 + 48);
      v227 = *(_QWORD *)(v219 + 832);
      if (v227)
        LOWORD(v227) = *(_WORD *)(v227 + 8);
      v13 = (unint64_t)sub_1C5D56C70(v219, 178, (const llvm::APInt *)&v360, v131, v220, (uint64_t)v222, v221, v223, v225, v226, v227);
      goto LABEL_21;
    }
  }
  if (v350 == *(unsigned __int16 *)(v8 + 24)
    && (v13 = (unint64_t)sub_1C5CA64D8(a1, a2, v83, v84, v85, v86, v87, v66)) != 0
    || (v13 = (unint64_t)sub_1C5CA6F54(a2, v6, v15, v8, v9, *(_QWORD *)a1, v87, v66)) != 0
    || (v13 = (unint64_t)sub_1C5CA6F54(a2, v8, v9, v6, v15, *(_QWORD *)a1, v133, v134)) != 0)
  {
LABEL_21:
    v12 = (uint64_t *)v13;
    goto LABEL_22;
  }
  if ((sub_1C5D62374(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48), 0) & 1) == 0)
  {
    v136 = *(uint64_t **)(a2 + 32);
    v135 = *(llvm ***)(a2 + 40);
    v338 = *v135;
    v345 = v135[1];
    v138 = *v136;
    v137 = v136[1];
    v139 = v136[5];
    v140 = v136[6];
    if (*(_WORD *)(*v136 + 24) == 171)
    {
      v351 = v136[6];
      v141 = *(_QWORD *)(v138 + 48);
      if (v141)
      {
        v142 = 1;
        do
        {
          if (*(_DWORD *)(v141 + 8) == (_DWORD)v137)
          {
            if (!v142)
              goto LABEL_226;
            --v142;
          }
          v141 = *(_QWORD *)(v141 + 32);
        }
        while (v141);
        if (!v142)
        {
          v143 = *(_DWORD **)(v138 + 32);
          v144 = *(_QWORD *)v143;
          if (*(_WORD *)(*(_QWORD *)v143 + 24) == 173)
          {
            v145 = *(_QWORD *)(v144 + 48);
            if (v145)
            {
              v146 = v143[2];
              v147 = 1;
              do
              {
                if (*(_DWORD *)(v145 + 8) == v146)
                {
                  if (!v147)
                    goto LABEL_226;
                  --v147;
                }
                v145 = *(_QWORD *)(v145 + 32);
              }
              while (v145);
              if (!v147)
              {
                v148 = *(_QWORD *)(v144 + 32);
                v329 = *(_QWORD *)v148;
                v323 = *(_DWORD *)(v148 + 8);
                v314 = *(_QWORD *)(v148 + 48);
                v318 = *(_QWORD *)(v148 + 40);
                if ((sub_1C5D62374(v318, v314, 0) & 1) == 0)
                {
                  v149 = v323;
                  v150 = v329 == v139 && v323 == (_DWORD)v140;
                  if (v150)
                    v149 = v314;
                  v324 = v149;
                  v151 = v150 ? v318 : v329;
                  v330 = v151;
                  v152 = v140;
                  if (v150)
                  {
                    v153 = v139;
                  }
                  else
                  {
                    v152 = v314;
                    v153 = v318;
                  }
                  if (v153 == v139 && (_DWORD)v140 == v152)
                  {
                    v260 = *(_QWORD *)(v138 + 32);
                    v198 = v260 + 40;
                    v199 = (unsigned int *)(v260 + 48);
                    goto LABEL_399;
                  }
                }
              }
            }
          }
        }
      }
LABEL_226:
      if (*(_WORD *)(v138 + 24) == 171)
      {
        v155 = *(_QWORD *)(v138 + 48);
        if (v155)
        {
          v156 = 1;
          do
          {
            if (*(_DWORD *)(v155 + 8) == (_DWORD)v137)
            {
              if (!v156)
                goto LABEL_259;
              --v156;
            }
            v155 = *(_QWORD *)(v155 + 32);
          }
          while (v155);
          if (!v156)
          {
            v157 = *(_QWORD *)(v138 + 32);
            v158 = *(_QWORD *)(v157 + 40);
            if (*(_WORD *)(v158 + 24) == 173)
            {
              v159 = *(_QWORD *)(v158 + 48);
              if (v159)
              {
                v160 = *(_DWORD *)(v157 + 48);
                v161 = 1;
                do
                {
                  if (*(_DWORD *)(v159 + 8) == v160)
                  {
                    if (!v161)
                      goto LABEL_259;
                    --v161;
                  }
                  v159 = *(_QWORD *)(v159 + 32);
                }
                while (v159);
                if (!v161)
                {
                  v162 = *(_QWORD *)(v158 + 32);
                  v331 = *(_QWORD *)v162;
                  v325 = *(_DWORD *)(v162 + 8);
                  v315 = *(_QWORD *)(v162 + 48);
                  v319 = *(_QWORD *)(v162 + 40);
                  if ((sub_1C5D62374(v319, v315, 0) & 1) == 0)
                  {
                    v163 = v325;
                    v164 = v331 == v139 && v325 == (_DWORD)v140;
                    if (v164)
                      v163 = v315;
                    v324 = v163;
                    v165 = v164 ? v319 : v331;
                    v330 = v165;
                    v166 = v140;
                    if (v164)
                    {
                      v167 = v139;
                    }
                    else
                    {
                      v166 = v315;
                      v167 = v319;
                    }
                    if (v167 == v139 && (_DWORD)v140 == v166)
                    {
                      v198 = *(_QWORD *)(v138 + 32);
                      v199 = (unsigned int *)(v198 + 8);
                      goto LABEL_399;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_259:
    if (*(_WORD *)(v139 + 24) == 171)
    {
      v351 = v137;
      v169 = *(_QWORD *)(v139 + 48);
      if (!v169)
        goto LABEL_292;
      v170 = 1;
      do
      {
        if (*(_DWORD *)(v169 + 8) == (_DWORD)v140)
        {
          if (!v170)
            goto LABEL_292;
          --v170;
        }
        v169 = *(_QWORD *)(v169 + 32);
      }
      while (v169);
      if (v170)
        goto LABEL_292;
      v171 = *(_DWORD **)(v139 + 32);
      v172 = *(_QWORD *)v171;
      if (*(_WORD *)(*(_QWORD *)v171 + 24) != 173)
        goto LABEL_292;
      v173 = *(_QWORD *)(v172 + 48);
      if (!v173)
        goto LABEL_292;
      v174 = v171[2];
      v175 = 1;
      do
      {
        if (*(_DWORD *)(v173 + 8) == v174)
        {
          if (!v175)
            goto LABEL_292;
          --v175;
        }
        v173 = *(_QWORD *)(v173 + 32);
      }
      while (v173);
      if (v175)
        goto LABEL_292;
      v176 = *(_QWORD *)(v172 + 32);
      v332 = *(_QWORD *)v176;
      v326 = *(_DWORD *)(v176 + 8);
      v316 = *(_QWORD *)(v176 + 48);
      v320 = *(_QWORD *)(v176 + 40);
      if ((sub_1C5D62374(v320, v316, 0) & 1) != 0)
        goto LABEL_292;
      v177 = v326;
      v178 = v332 == v138 && v326 == (_DWORD)v137;
      if (v178)
        v177 = v316;
      v324 = v177;
      v179 = v178 ? v320 : v332;
      v330 = v179;
      v180 = v137;
      if (v178)
      {
        v181 = v138;
      }
      else
      {
        v180 = v316;
        v181 = v320;
      }
      if (v181 == v138 && (_DWORD)v137 == v180)
      {
        v261 = *(_QWORD *)(v139 + 32);
        v198 = v261 + 40;
        v199 = (unsigned int *)(v261 + 48);
      }
      else
      {
LABEL_292:
        if (*(_WORD *)(v139 + 24) != 171)
          goto LABEL_402;
        v183 = *(_QWORD *)(v139 + 48);
        if (!v183)
          goto LABEL_402;
        v184 = 1;
        do
        {
          if (*(_DWORD *)(v183 + 8) == (_DWORD)v140)
          {
            if (!v184)
              goto LABEL_402;
            --v184;
          }
          v183 = *(_QWORD *)(v183 + 32);
        }
        while (v183);
        if (v184)
          goto LABEL_402;
        v185 = *(_QWORD *)(v139 + 32);
        v186 = *(_QWORD *)(v185 + 40);
        if (*(_WORD *)(v186 + 24) != 173)
          goto LABEL_402;
        v187 = *(_QWORD *)(v186 + 48);
        if (!v187)
          goto LABEL_402;
        v188 = *(_DWORD *)(v185 + 48);
        v189 = 1;
        do
        {
          if (*(_DWORD *)(v187 + 8) == v188)
          {
            if (!v189)
              goto LABEL_402;
            --v189;
          }
          v187 = *(_QWORD *)(v187 + 32);
        }
        while (v187);
        if (v189)
          goto LABEL_402;
        v190 = *(_QWORD *)(v186 + 32);
        v333 = *(_QWORD *)v190;
        v191 = *(_DWORD *)(v190 + 8);
        v317 = *(_QWORD *)(v190 + 48);
        v321 = *(_QWORD *)(v190 + 40);
        if ((sub_1C5D62374(v321, v317, 0) & 1) != 0)
          goto LABEL_402;
        v192 = v333 == v138 && v191 == (_DWORD)v137;
        v193 = v192 ? v317 : v191;
        v324 = v193;
        v194 = v192 ? v321 : v333;
        v330 = v194;
        v195 = v137;
        if (v192)
        {
          v196 = v138;
        }
        else
        {
          v195 = v317;
          v196 = v321;
        }
        if (v196 != v138 || (_DWORD)v137 != v195)
          goto LABEL_402;
        v198 = *(_QWORD *)(v139 + 32);
        v199 = (unsigned int *)(v198 + 8);
      }
      v139 = v138;
LABEL_399:
      v262 = *(_QWORD *)v198;
      v263 = *(unsigned __int16 *)(*(_QWORD *)v198 + 24);
      if (v263 != 11 && v263 != 35)
      {
        v264 = *v199;
        if ((*(unsigned int (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(a1 + 8) + 312))(*(_QWORD *)(a1 + 8), v262, v264))
        {
          v265 = *(unsigned __int8 **)(a2 + 64);
          v363 = v265;
          if (v265)
            llvm::MetadataTracking::track((uint64_t)&v363, v265, 2);
          LODWORD(v364) = *(_DWORD *)(a2 + 60);
          if (((*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(a1 + 8) + 312))(*(_QWORD *)(a1 + 8), v139, v351) & 1) != 0|| (sub_1C5D621EC(v262, v264, 0) & 1) != 0)
          {
            if (((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 312))(*(_QWORD *)(a1 + 8), v330, v324) & 1) != 0|| !sub_1C5D621EC(v262, v264, 0))
            {
              v284 = *(_QWORD *)(*(_QWORD *)a1 + 832);
              if (v284)
                LOWORD(v284) = *(_WORD *)(v284 + 8);
              v285 = sub_1C5D56C70(*(_QWORD *)a1, 171, (const llvm::APInt *)&v363, v338, (uint64_t)v345, v330, v324, v266, v262, v264, v284);
              v328 = v286;
              v336 = v285;
              v287 = sub_1C6366760(*(_QWORD *)a1, (const llvm::APInt *)&v363, v262, v264, v338, (uint64_t)v345);
              v290 = *(_QWORD *)(*(_QWORD *)a1 + 832);
              if (v290)
                LOWORD(v290) = *(_WORD *)(v290 + 8);
              v291 = sub_1C5D56C70(*(_QWORD *)a1, 171, (const llvm::APInt *)&v363, v338, (uint64_t)v345, v139, v351, v289, (uint64_t)v287, v288, v290);
              v293 = *(_QWORD *)(*(_QWORD *)a1 + 832);
              if (v293)
                LOWORD(v293) = *(_WORD *)(v293 + 8);
              v312 = v292;
              v313 = v293;
              v311 = (uint64_t)v291;
              v282 = *(_QWORD *)a1;
              v283 = 172;
            }
            else
            {
              v267 = *(uint64_t **)(v262 + 32);
              v268 = *v267;
              v322 = v267[1];
              v269 = *(_QWORD *)(*(_QWORD *)a1 + 832);
              if (v269)
                LOWORD(v269) = *(_WORD *)(v269 + 8);
              v270 = sub_1C5D56C70(*(_QWORD *)a1, 172, (const llvm::APInt *)&v363, v338, (uint64_t)v345, v330, v324, v266, v268, v322, v269);
              v328 = v271;
              v336 = v270;
              v272 = sub_1C6366760(*(_QWORD *)a1, (const llvm::APInt *)&v363, v139, v351, v338, (uint64_t)v345);
              v275 = *(_QWORD *)(*(_QWORD *)a1 + 832);
              if (v275)
                LOWORD(v275) = *(_WORD *)(v275 + 8);
              v276 = sub_1C5D56C70(*(_QWORD *)a1, 171, (const llvm::APInt *)&v363, v338, (uint64_t)v345, v268, v322, v274, (uint64_t)v272, v273, v275);
              v278 = sub_1C6366760(*(_QWORD *)a1, (const llvm::APInt *)&v363, (uint64_t)v276, v277, v338, (uint64_t)v345);
              v281 = *(_QWORD *)(*(_QWORD *)a1 + 832);
              if (v281)
                LOWORD(v281) = *(_WORD *)(v281 + 8);
              v312 = v279;
              v313 = v281;
              v311 = (uint64_t)v278;
              v282 = *(_QWORD *)a1;
              v283 = 171;
            }
            v294 = v338;
            v295 = (uint64_t)v345;
            v297 = v328;
            v296 = (uint64_t)v336;
          }
          else
          {
            v299 = sub_1C6366760(*(_QWORD *)a1, (const llvm::APInt *)&v363, v330, v324, v338, (uint64_t)v345);
            v301 = *(_QWORD *)(*(_QWORD *)a1 + 832);
            if (v301)
              LOWORD(v301) = *(_WORD *)(v301 + 8);
            v302 = sub_1C5D56C70(*(_QWORD *)a1, 171, (const llvm::APInt *)&v363, v338, (uint64_t)v345, (uint64_t)v299, v298, v300, v262, v264, v301);
            v305 = sub_1C6366760(*(_QWORD *)a1, (const llvm::APInt *)&v363, (uint64_t)v302, v303, v338, (uint64_t)v345);
            v337 = v306;
            v307 = *(_QWORD *)(*(_QWORD *)a1 + 832);
            if (v307)
              LOWORD(v307) = *(_WORD *)(v307 + 8);
            v308 = sub_1C5D56C70(*(_QWORD *)a1, 172, (const llvm::APInt *)&v363, v338, (uint64_t)v345, v262, v264, v304, v139, v351, v307);
            v310 = *(_QWORD *)(*(_QWORD *)a1 + 832);
            if (v310)
              LOWORD(v310) = *(_WORD *)(v310 + 8);
            v312 = v309;
            v313 = v310;
            v311 = (uint64_t)v308;
            v282 = *(_QWORD *)a1;
            v283 = 171;
            v294 = v338;
            v295 = (uint64_t)v345;
            v296 = (uint64_t)v305;
            v297 = v337;
          }
          v12 = sub_1C5D56C70(v282, v283, (const llvm::APInt *)&v363, v294, v295, v296, v297, v280, v311, v312, v313);
          if (v363)
            llvm::MetadataTracking::untrack((uint64_t)&v363, v363);
          if (v12)
            goto LABEL_22;
        }
      }
    }
  }
LABEL_402:
  if (sub_1C5C9FA08(a1, a2, 0))
  {
LABEL_56:
    v12 = (uint64_t *)a2;
    goto LABEL_22;
  }
  v12 = sub_1C5CA4AE4(*(_QWORD *)a1, *(unsigned int **)(a1 + 8), v6, v15, v8, v9, a2);
LABEL_22:
  if (v360)
    llvm::MetadataTracking::untrack((uint64_t)&v360, v360);
  return v12;
}

uint64_t sub_1C5C8E698(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  int v34;
  uint64_t j;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t ExtendedSizeInBits;
  int v41;
  int v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t *v82;
  int v83;
  int v84;
  uint64_t v85;
  unsigned __int8 *v86;
  uint64_t v87;
  __int16 v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  llvm *v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  int v99;
  char v100;
  int v101;
  int v102;
  uint64_t v103;
  unsigned __int8 *v104;
  uint64_t v105;
  int v106;
  int v107;
  int v108;
  uint64_t v109;
  unsigned __int8 *v110;
  uint64_t v111;
  __int16 v112;
  unsigned __int16 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int16 v117;
  int v119;
  uint64_t v120;
  uint64_t *v121;
  int v122;
  uint64_t result;
  int v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  _QWORD *v130;
  uint64_t v131;
  void *v132;
  void *v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t *v137;
  int v138;
  int v139;
  unsigned __int8 *v140;
  int v141;
  uint64_t v142;
  int v143;
  const char *v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int v147;
  unint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v155;
  _QWORD *v156;
  int v157;
  const char *v158;
  unsigned int v159;
  int v160;
  uint64_t v161;
  int v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  unint64_t v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t *v173;
  unint64_t v174;
  uint64_t v175;
  BOOL v176;
  uint64_t v177;
  llvm::EVT *v178;
  llvm::LLVMContext *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  char *v185;
  void **v186;
  char *v187;
  __int128 v188;
  unint64_t v189;
  int64_t v190;
  uint64_t v191;
  int v192;
  void *v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  __int16 v199;
  __int128 v200;
  unsigned int v201;
  uint64_t v202;
  unsigned __int8 *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  _DWORD *v209;
  _QWORD *v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  llvm::EVT *v215;
  llvm::LLVMContext *v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  BOOL v220;
  int v221;
  _QWORD *v222;
  int v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  unsigned __int8 v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  llvm::EVT *v242;
  llvm::LLVMContext *v243;
  uint64_t v244;
  int v245;
  uint64_t ExtendedIntegerVT;
  uint64_t v247;
  BOOL v248;
  int v249;
  unsigned int v250;
  BOOL v251;
  uint64_t v252;
  uint64_t v253;
  _QWORD *v254;
  char *v255;
  llvm::EVT *v256;
  llvm::LLVMContext *v257;
  uint64_t v258;
  uint64_t v259;
  llvm::EVT *v260;
  llvm::LLVMContext *v261;
  uint64_t v262;
  int v263;
  unsigned __int8 v264;
  _QWORD *v265;
  uint64_t *v266;
  unint64_t v267;
  uint64_t v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t *v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  llvm *v280;
  uint64_t v281;
  unsigned __int8 *v282;
  uint64_t v283;
  _QWORD *v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unsigned int v288;
  unsigned int v289;
  llvm::EVT *v290;
  llvm::LLVMContext *v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unsigned __int8 *v297;
  uint64_t v298;
  uint64_t *v299;
  uint64_t v300;
  uint64_t v301;
  unsigned __int8 v302;
  __int16 v303;
  uint64_t v304;
  uint64_t v305;
  _QWORD *v306;
  unint64_t v307;
  unint64_t v308;
  uint64_t v309;
  llvm *v310;
  uint64_t v311;
  uint64_t v312;
  unsigned __int8 *v313;
  uint64_t v314;
  __int16 v315;
  unsigned int v316;
  unsigned int v317;
  uint64_t v318;
  uint64_t v319;
  _QWORD *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t *v323;
  int v324;
  int v325;
  int v326;
  uint64_t v327;
  unsigned int v328;
  uint64_t v329;
  uint64_t *v330;
  uint64_t v331;
  int v332;
  unsigned __int8 *v333;
  uint64_t v334;
  unint64_t v335;
  unint64_t v336;
  uint64_t v337;
  unsigned __int8 *v338;
  uint64_t v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  int v343;
  _BYTE *v344;
  int v345;
  uint64_t v346;
  uint64_t v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  int v352;
  unsigned int v353;
  uint64_t v354;
  unint64_t v355;
  char v356;
  uint64_t v357;
  uint64_t v358;
  int v359;
  uint64_t v360;
  int v361;
  uint64_t v362;
  int v363;
  uint64_t *v364;
  unint64_t v365;
  uint64_t v366;
  __int128 v367;
  uint64_t v368;
  uint64_t v369;
  __int128 v370;
  uint64_t v371;
  uint64_t v372;
  llvm *v373;
  uint64_t v374;
  __int128 v375;
  __int128 v376;
  unsigned __int8 *v377;
  uint64_t v378;
  void *v379;
  uint64_t v380;
  int v381;
  uint64_t v382;
  void *v383[2];
  _OWORD v384[8];
  __int128 v385;
  __int128 v386;
  uint64_t v387;
  int v388;
  uint64_t v389;

  v389 = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)(a2 + 32);
  v5 = *v4;
  v6 = (uint64_t *)v4[1];
  v7 = v4[5];
  v8 = v4[6];
  if ((*(_WORD *)(*(_QWORD *)(a2 + 96) + 36) & 0xF00) != 0 || (*(_BYTE *)(a2 + 26) & 8) != 0)
    goto LABEL_238;
  v9 = *(_QWORD *)(a2 + 40);
  if (*(_BYTE *)(v9 + 16) == 1)
  {
    v10 = *(_QWORD *)(a2 + 48);
    if (v10)
    {
      while (*(_DWORD *)(v10 + 8))
      {
        v10 = *(_QWORD *)(v10 + 32);
        if (!v10)
          goto LABEL_7;
      }
      goto LABEL_27;
    }
LABEL_7:
    v11 = *(_QWORD *)a1;
    v12 = *(void **)(*(_QWORD *)a1 + 656);
    *(_QWORD *)(v11 + 656) = v383;
    v383[0] = &off_1E8197EE8;
    v383[1] = v12;
    *(_QWORD *)&v384[0] = v11;
    *((_QWORD *)&v384[0] + 1) = a1;
    sub_1C5D6146C(v11, a2, 1, v5, (int)v6);
    for (i = *(_QWORD *)(v5 + 48); i; i = *(_QWORD *)(i + 32))
      sub_1C5C5B004(a1, *(_QWORD *)(i + 16));
    if (*(_QWORD *)(a2 + 48))
    {
LABEL_63:
      *(void **)(*(_QWORD *)&v384[0] + 656) = v383[1];
      return a2;
    }
LABEL_62:
    sub_1C5C5B9D4((uint64_t *)a1, a2);
    goto LABEL_63;
  }
  if (!byte_1ED823D78)
  {
    v15 = *(_QWORD *)(a2 + 48);
    if (v15)
    {
      v17 = *(_QWORD *)(a2 + 48);
      do
      {
        if (!*(_DWORD *)(v17 + 8))
          goto LABEL_27;
        v17 = *(_QWORD *)(v17 + 32);
      }
      while (v17);
LABEL_25:
      while (v15)
      {
        if (*(_DWORD *)(v15 + 8) == 1)
          goto LABEL_27;
        v15 = *(_QWORD *)(v15 + 32);
      }
    }
    v21 = 0;
    goto LABEL_40;
  }
  v14 = v4[10];
  v15 = *(_QWORD *)(a2 + 48);
  if (*(_WORD *)(v14 + 24) == 35)
  {
    if (v15)
    {
      v16 = *(_QWORD *)(a2 + 48);
      while (*(_DWORD *)(v16 + 8))
      {
        v16 = *(_QWORD *)(v16 + 32);
        if (!v16)
          goto LABEL_17;
      }
      goto LABEL_27;
    }
LABEL_17:
    if ((*(_BYTE *)(v14 + 26) & 8) != 0)
      goto LABEL_25;
    goto LABEL_38;
  }
  if (!v15)
  {
LABEL_38:
    v21 = 1;
LABEL_40:
    v28 = sub_1C61312D0(*(_QWORD *)a1, *(llvm **)v9, *(_QWORD *)(v9 + 8));
    v30 = v29;
    v31 = *(_QWORD *)(a2 + 48);
    if (!v31)
      goto LABEL_60;
    while (*(_DWORD *)(v31 + 8) != 1)
    {
      v31 = *(_QWORD *)(v31 + 32);
      if (!v31)
        goto LABEL_60;
    }
    if (v21)
    {
      v32 = sub_1C5CB72E0((uint64_t *)a1, a2, v22, v23, v24, v25, v26, v27);
      v34 = v33;
      for (j = *(_QWORD *)(a2 + 48); j; j = *(_QWORD *)(j + 32))
        sub_1C5C5B004(a1, *(_QWORD *)(j + 16));
    }
    else
    {
LABEL_60:
      v32 = sub_1C61312D0(*(_QWORD *)a1, *(llvm **)(*(_QWORD *)(a2 + 40) + 16), *(_QWORD *)(*(_QWORD *)(a2 + 40) + 24));
      v34 = v42;
    }
    v43 = *(_QWORD *)a1;
    v44 = *(void **)(*(_QWORD *)a1 + 656);
    *(_QWORD *)(v43 + 656) = v383;
    v383[0] = &off_1E8197EE8;
    v383[1] = v44;
    *(_QWORD *)&v384[0] = v43;
    *((_QWORD *)&v384[0] + 1) = a1;
    sub_1C5D6146C(v43, a2, 0, (uint64_t)v28, v30);
    sub_1C5D6146C(*(_QWORD *)a1, a2, 1, (uint64_t)v32, v34);
    sub_1C5D6146C(*(_QWORD *)a1, a2, 2, v5, (int)v6);
    goto LABEL_62;
  }
  while (*(_DWORD *)(v15 + 8))
  {
    v15 = *(_QWORD *)(v15 + 32);
    if (!v15)
      goto LABEL_38;
  }
LABEL_27:
  if (!*(_DWORD *)(a1 + 28))
    goto LABEL_246;
  if (!v5
    || *(_WORD *)(v5 + 24) != 254
    || (*(_WORD *)(*(_QWORD *)(v5 + 96) + 36) & 0xF00) != 0
    || (*(_BYTE *)(v5 + 26) & 8) != 0)
  {
    goto LABEL_238;
  }
  v375 = *(_OWORD *)*(_QWORD *)(a2 + 40);
  v18 = *(_QWORD *)(a2 + 88);
  v373 = *(llvm **)(a2 + 80);
  v374 = v18;
  v19 = *(_QWORD *)(v5 + 88);
  v371 = *(_QWORD *)(v5 + 80);
  v372 = v19;
  v370 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 40) + 40)
                   + 16 * *(unsigned int *)(*(_QWORD *)(v5 + 32) + 48));
  v20 = (_BYTE)v373 ? v373 - 120 < 0x33 : *(_BYTE *)(v18 + 8) == 19;
  v36 = (_BYTE)v371 ? v371 - 120 < 0x33 : *(_BYTE *)(v19 + 8) == 19;
  if (v20 != v36)
    goto LABEL_238;
  v37 = *(_QWORD *)a1;
  if (v20)
  {
    if (*(_BYTE *)(*(_QWORD *)(**(_QWORD **)(v37 + 40) + 40) + 272))
      goto LABEL_238;
  }
  sub_1C5D657F8(a2, v37, (uint64_t)v383);
  sub_1C5D657F8(v5, *(_QWORD *)a1, (uint64_t)&v379);
  v369 = 0;
  if (!sub_1C5D653D4((uint64_t *)&v379, (uint64_t *)v383, *(_QWORD *)a1, &v369))
    goto LABEL_238;
  if (*(_BYTE *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)a1 + 40) + 40) + 272))
  {
    v38 = sub_1C47C1C70((unsigned __int8 *)&v371);
    v39 = sub_1C47C1C70((unsigned __int8 *)&v373);
    v369 = ((uint64_t)(8 * (v38 - v39)) >> 3) - v369;
  }
  if ((_BYTE)v373)
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v373);
  else
    ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v373);
  v45 = ExtendedSizeInBits;
  v46 = v41;
  if ((_BYTE)v371)
    v47 = sub_1C47A8C74((unsigned __int8 *)&v371);
  else
    v47 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v371);
  v53 = v47;
  if (v20)
  {
    if (v369 || v45 != v47 || v46 != v48)
      goto LABEL_238;
  }
  else
  {
    if (v369 < 0 || v45 + 8 * v369 > v47)
      goto LABEL_238;
    if (v369)
    {
LABEL_82:
      if (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 40) + 24) == 51 || v369)
        goto LABEL_238;
      v54 = *(_QWORD *)(v5 + 32);
      v55 = *(_QWORD *)(v54 + 40);
      v56 = *(unsigned int *)(v54 + 48);
      v57 = (uint64_t *)(*(_QWORD *)(v55 + 40) + 16 * v56);
      v58 = *v57;
      v59 = v57[1];
      *(_QWORD *)&v376 = v58;
      *((_QWORD *)&v376 + 1) = v59;
      v60 = *(unsigned __int8 **)(v5 + 80);
      v61 = *(_QWORD *)(v5 + 88);
      v377 = v60;
      v378 = v61;
      v365 = v56;
      if (v58 == v60 && ((_BYTE)v58 || v59 == v61))
      {
LABEL_174:
        v93 = v373;
        if (*(_BYTE *)(a1 + 34)
          && (!(_BYTE)v373 || !*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v373 + 96)))
        {
          goto LABEL_236;
        }
        if (v371 == v373)
        {
          if ((_BYTE)v373 || (v94 = v372, v372 == v374))
          {
LABEL_180:
            v95 = *(unsigned __int8 *)(a2 + 80);
            v96 = *(_QWORD *)(a2 + 88);
            v97 = *(_QWORD **)(a2 + 40);
            v98 = v97[1];
            v99 = *v97;
            if (v99 != v95 || !v99 && v98 != v96)
            {
              if (*(_BYTE *)(a2 + 80))
              {
                if ((v95 - 120) >= 0x20
                  && (v95 - 2) >= 6
                  && (v95 - 15) >= 0x3C)
                {
                  goto LABEL_236;
                }
              }
              else
              {
                if ((*(_DWORD *)(v96 + 8) & 0xFE) == 0x12)
                  v102 = *(unsigned __int8 *)(**(_QWORD **)(v96 + 16) + 8);
                else
                  v102 = *(_DWORD *)(v96 + 8);
                if (v102 != 13)
                  goto LABEL_236;
              }
              if (v99)
              {
                if ((v99 - 120) < 0x20 || (v99 - 2) < 6 || (v99 - 15) < 0x3C)
                  goto LABEL_222;
              }
              else
              {
                if ((*(_DWORD *)(v98 + 8) & 0xFE) == 0x12)
                  v106 = *(unsigned __int8 *)(**(_QWORD **)(v98 + 16) + 8);
                else
                  v106 = *(_DWORD *)(v98 + 8);
                if (v106 == 13)
LABEL_222:
                  __asm { BR              X10 }
              }
LABEL_236:
              if (!*(_QWORD *)(v55 + 48))
                sub_1C5C5B9D4((uint64_t *)a1, v55);
              goto LABEL_238;
            }
            if ((*(_WORD *)(a2 + 26) & 0x380) != 0)
            {
              if (byte_1ED823D78)
              {
                v329 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 80);
                if (*(_WORD *)(v329 + 24) != 35 || (*(_BYTE *)(v329 + 26) & 8) == 0)
                {
                  v82 = sub_1C5CB72E0((uint64_t *)a1, a2, v49, (uint64_t)v93, v61, v50, v51, v52);
                  *(_QWORD *)&v385 = v55;
                  DWORD2(v385) = v365;
                  goto LABEL_577;
                }
              }
              goto LABEL_238;
            }
            *(_QWORD *)&v385 = v55;
            DWORD2(v385) = v365;
LABEL_579:
            *(_QWORD *)&v386 = v5;
            DWORD2(v386) = (_DWORD)v6;
            v330 = (uint64_t *)a1;
            v331 = a2;
            v332 = 2;
LABEL_580:
            result = sub_1C5C5B0B4(v330, v331, (uint64_t *)&v385, v332, 1);
            if (result)
              return result;
            goto LABEL_238;
          }
        }
        else
        {
          if ((_BYTE)v371)
          {
            if (v371 - 15 < 0x9C)
              goto LABEL_236;
            v100 = 0;
LABEL_194:
            if ((_BYTE)v373)
            {
              if (v373 - 15 < 0x9C)
                goto LABEL_236;
            }
            else if ((*(_DWORD *)(v374 + 8) & 0xFE) == 0x12)
            {
              goto LABEL_236;
            }
            if ((v100 & 1) != 0)
            {
              if ((*(_DWORD *)(v372 + 8) & 0xFE) == 0x12)
                v101 = *(unsigned __int8 *)(**(_QWORD **)(v372 + 16) + 8);
              else
                v101 = *(_DWORD *)(v372 + 8);
              if (v101 != 13)
                goto LABEL_236;
            }
            else if (v371 - 2 >= 6)
            {
              goto LABEL_236;
            }
            if ((_BYTE)v373)
            {
              if (v373 - 2 >= 6)
                goto LABEL_236;
            }
            else
            {
              if ((*(_DWORD *)(v374 + 8) & 0xFE) == 0x12)
                v108 = *(unsigned __int8 *)(**(_QWORD **)(v374 + 16) + 8);
              else
                v108 = *(_DWORD *)(v374 + 8);
              if (v108 != 13)
                goto LABEL_236;
            }
            v109 = *(_QWORD *)a1;
            v110 = *(unsigned __int8 **)(a2 + 64);
            *(_QWORD *)&v385 = v110;
            if (v110)
            {
              llvm::MetadataTracking::track((uint64_t)&v385, v110, 2);
              v93 = v373;
            }
            DWORD2(v385) = *(_DWORD *)(a2 + 60);
            v111 = *(_QWORD *)(v109 + 832);
            if (v111)
              v112 = *(_WORD *)(v111 + 8);
            else
              v112 = 0;
            v55 = (uint64_t)sub_1C5D52060(v109, 201, (const llvm::APInt *)&v385, v93, v374, v55, v365, v112);
            LODWORD(v365) = v326;
            if ((_QWORD)v385)
              llvm::MetadataTracking::untrack((uint64_t)&v385, (unsigned __int8 *)v385);
            goto LABEL_180;
          }
          v94 = v372;
        }
        if ((*(_DWORD *)(v94 + 8) & 0xFE) == 0x12)
          goto LABEL_236;
        v100 = 1;
        goto LABEL_194;
      }
      if (!*(_BYTE *)(a1 + 34) || (_BYTE)v60 && *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v60 + 96))
        goto LABEL_236;
      if ((_BYTE)v58)
      {
        if ((v58 + 104) >= 0x13u
          && (v58 - 8) >= 7u
          && (v58 - 75) >= 0x2Du)
        {
          *(_QWORD *)&v385 = v58;
          *((_QWORD *)&v385 + 1) = v59;
          goto LABEL_108;
        }
      }
      else
      {
        if ((*(_DWORD *)(v59 + 8) & 0xFE) == 0x12)
          v62 = *(unsigned __int8 *)(**(_QWORD **)(v59 + 16) + 8);
        else
          v62 = *(_DWORD *)(v59 + 8);
        if (v62 >= 7)
        {
          *(_QWORD *)&v385 = v58;
          *((_QWORD *)&v385 + 1) = v59;
          goto LABEL_111;
        }
      }
      if ((_BYTE)v60
        && (((_BYTE)v60 + 104) < 0x13u
         || ((_BYTE)v60 - 8) < 7u
         || ((_BYTE)v60 - 75) <= 0x2Cu))
      {
        v67 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)(v67 + 8 * v60 + 96))
        {
          if (!*(_BYTE *)(v67 + 390 * v60 + 4098))
          {
            v103 = *(_QWORD *)a1;
            v104 = *(unsigned __int8 **)(v5 + 64);
            *(_QWORD *)&v385 = v104;
            if (v104)
            {
              llvm::MetadataTracking::track((uint64_t)&v385, v104, 2);
              v60 = v377;
              v61 = v378;
            }
            DWORD2(v385) = *(_DWORD *)(v5 + 60);
            v105 = *(_QWORD *)(v103 + 832);
            if (v105)
              v88 = *(_WORD *)(v105 + 8);
            else
              v88 = 0;
            v90 = v103;
            v91 = 236;
            goto LABEL_172;
          }
        }
      }
      *(_QWORD *)&v385 = v58;
      *((_QWORD *)&v385 + 1) = v59;
      if ((_BYTE)v58)
      {
LABEL_108:
        if ((v58 - 15) < 0x9Cu)
        {
LABEL_109:
          v68 = sub_1C52B71D4((unsigned __int8 *)&v385);
          v60 = v377;
          v61 = v378;
          goto LABEL_113;
        }
LABEL_112:
        v68 = 0;
LABEL_113:
        *(_QWORD *)&v385 = v60;
        *((_QWORD *)&v385 + 1) = v61;
        if ((_BYTE)v60)
        {
          if (v60 - 15 < 0x9C)
          {
LABEL_115:
            v69 = sub_1C52B71D4((unsigned __int8 *)&v385);
            goto LABEL_118;
          }
        }
        else if ((*(_DWORD *)(v61 + 8) & 0xFE) == 0x12)
        {
          goto LABEL_115;
        }
        v69 = 0;
LABEL_118:
        if (v68 != v69)
          goto LABEL_131;
        if ((_BYTE)v376)
        {
          if (v376 - 120 >= 0x20
            && v376 - 2 >= 6
            && v376 - 15 >= 0x3C)
          {
            goto LABEL_131;
          }
        }
        else
        {
          if ((*(_DWORD *)(*((_QWORD *)&v376 + 1) + 8) & 0xFE) == 0x12)
            v70 = *(unsigned __int8 *)(**(_QWORD **)(*((_QWORD *)&v376 + 1) + 16) + 8);
          else
            v70 = *(_DWORD *)(*((_QWORD *)&v376 + 1) + 8);
          if (v70 != 13)
            goto LABEL_133;
        }
        if ((_BYTE)v377)
        {
          if (v377 - 120 >= 0x20
            && v377 - 2 >= 6
            && v377 - 15 >= 0x3C)
          {
            goto LABEL_131;
          }
          goto LABEL_157;
        }
        if ((*(_DWORD *)(v378 + 8) & 0xFE) == 0x12)
          v84 = *(unsigned __int8 *)(**(_QWORD **)(v378 + 16) + 8);
        else
          v84 = *(_DWORD *)(v378 + 8);
        if (v84 == 13)
        {
LABEL_157:
          v85 = *(_QWORD *)a1;
          v86 = *(unsigned __int8 **)(v5 + 64);
          *(_QWORD *)&v385 = v86;
          if (v86)
            llvm::MetadataTracking::track((uint64_t)&v385, v86, 2);
          DWORD2(v385) = *(_DWORD *)(v5 + 60);
          v60 = v377;
          v61 = v378;
          v87 = *(_QWORD *)(v85 + 832);
          if (v87)
            v88 = *(_WORD *)(v87 + 8);
          else
            v88 = 0;
          v90 = v85;
          v91 = 201;
LABEL_172:
          v55 = (uint64_t)sub_1C5D52060(v90, v91, (const llvm::APInt *)&v385, (llvm *)v60, v61, v55, v365, v88);
          v365 = v92;
          if ((_QWORD)v385)
            llvm::MetadataTracking::untrack((uint64_t)&v385, (unsigned __int8 *)v385);
          goto LABEL_174;
        }
LABEL_131:
        if ((_BYTE)v376)
        {
          v71 = sub_1C47A8C74((unsigned __int8 *)&v376);
LABEL_134:
          v73 = v71;
          v74 = v72;
          if ((_BYTE)v377)
            v75 = sub_1C47A8C74((unsigned __int8 *)&v377);
          else
            v75 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v377);
          if (v73 != v75 || v74 != v76)
            goto LABEL_236;
          v55 = sub_1C6367DA8(*(_QWORD *)a1, (uint64_t)v377, v378, v55, v365);
          v365 = v77;
          goto LABEL_174;
        }
LABEL_133:
        v71 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v376);
        goto LABEL_134;
      }
LABEL_111:
      if ((*(_DWORD *)(v59 + 8) & 0xFE) == 0x12)
        goto LABEL_109;
      goto LABEL_112;
    }
  }
  if (v375 != v370
    || !(_BYTE)v375 && *((_QWORD *)&v375 + 1) != *((_QWORD *)&v370 + 1)
    || v371 != v373
    || !(_BYTE)v371 && v372 != v374)
  {
    goto LABEL_82;
  }
  if ((_BYTE)v375)
    v63 = sub_1C47A8C74((unsigned __int8 *)&v375);
  else
    v63 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v375);
  if (v63 == v45 && v64 == v46)
  {
    v78 = *(_QWORD *)(v5 + 32);
    v80 = *(uint64_t **)(v78 + 40);
    v79 = *(_QWORD *)(v78 + 48);
  }
  else
  {
    if ((_BYTE)v370)
    {
      if (v370 - 120 >= 0x20
        && v370 - 2 >= 6
        && v370 - 15 >= 0x3C)
      {
        goto LABEL_82;
      }
    }
    else
    {
      if ((*(_DWORD *)(*((_QWORD *)&v370 + 1) + 8) & 0xFE) == 0x12)
        v89 = *(unsigned __int8 *)(**(_QWORD **)(*((_QWORD *)&v370 + 1) + 16) + 8);
      else
        v89 = *(_DWORD *)(*((_QWORD *)&v370 + 1) + 8);
      if (v89 != 13)
        goto LABEL_82;
    }
    if ((_BYTE)v373)
    {
      if (v373 - 120 >= 0x20
        && v373 - 2 >= 6
        && v373 - 15 >= 0x3C)
      {
        goto LABEL_82;
      }
    }
    else
    {
      if ((*(_DWORD *)(v374 + 8) & 0xFE) == 0x12)
        v107 = *(unsigned __int8 *)(**(_QWORD **)(v374 + 16) + 8);
      else
        v107 = *(_DWORD *)(v374 + 8);
      if (v107 != 13)
        goto LABEL_82;
    }
    if ((_BYTE)v370)
    {
      if (v370 - 15 < 0x9C)
        goto LABEL_82;
    }
    else if ((*(_DWORD *)(*((_QWORD *)&v370 + 1) + 8) & 0xFE) == 0x12)
    {
      goto LABEL_82;
    }
    if ((_BYTE)v373)
    {
      if (v373 - 15 < 0x9C)
        goto LABEL_82;
    }
    else if ((*(_DWORD *)(v374 + 8) & 0xFE) == 0x12)
    {
      goto LABEL_82;
    }
    if ((*(_WORD *)(a2 + 26) & 0xC00) == 0x800)
      goto LABEL_82;
    v327 = *(_QWORD *)a1;
    if ((_BYTE)v370)
      v328 = sub_1C47A8C74((unsigned __int8 *)&v370);
    else
      v328 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v370);
    DWORD2(v385) = v328;
    if (v328 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v385, 0, 0);
    else
      *(_QWORD *)&v385 = 0;
    sub_1C4912E54(&v385, 0, v53);
    v333 = *(unsigned __int8 **)(v5 + 64);
    *(_QWORD *)&v376 = v333;
    if (v333)
      llvm::MetadataTracking::track((uint64_t)&v376, v333, 2);
    DWORD2(v376) = *(_DWORD *)(v5 + 60);
    v79 = sub_1C63666FC(v327, (llvm::LLVMContext *)&v385, (const llvm::APInt *)&v376, v370, *((uint64_t *)&v370 + 1), 0, 0);
    v336 = v335;
    if ((_QWORD)v376)
      llvm::MetadataTracking::untrack((uint64_t)&v376, (unsigned __int8 *)v376);
    if (DWORD2(v385) >= 0x41 && (_QWORD)v385)
      MEMORY[0x1CAA32F9C](v385, 0x1000C8000313F17);
    v337 = *(_QWORD *)a1;
    v338 = *(unsigned __int8 **)(a2 + 64);
    *(_QWORD *)&v385 = v338;
    if (v338)
      llvm::MetadataTracking::track((uint64_t)&v385, v338, 2);
    DWORD2(v385) = *(_DWORD *)(a2 + 60);
    v339 = *(_QWORD *)(v5 + 32);
    v340 = *(_QWORD *)(v339 + 40);
    v341 = *(_QWORD *)(v339 + 48);
    v342 = *(_QWORD *)(v337 + 832);
    if (v342)
      LOWORD(v342) = *(_WORD *)(v342 + 8);
    v80 = sub_1C5D56C70(v337, 171, (const llvm::APInt *)&v385, (llvm *)v375, *((uint64_t *)&v375 + 1), v340, v341, v334, v79, v336, v342);
    LODWORD(v79) = v343;
    if ((_QWORD)v385)
      llvm::MetadataTracking::untrack((uint64_t)&v385, (unsigned __int8 *)v385);
  }
  if ((*(_WORD *)(a2 + 26) & 0x380) == 0)
  {
    *(_QWORD *)&v385 = v80;
    DWORD2(v385) = v79;
    goto LABEL_579;
  }
  if (byte_1ED823D78)
  {
    v81 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 80);
    if (*(_WORD *)(v81 + 24) != 35 || (*(_BYTE *)(v81 + 26) & 8) == 0)
    {
      v82 = sub_1C5CB72E0((uint64_t *)a1, a2, v49, v65, v66, v50, v51, v52);
      *(_QWORD *)&v385 = v80;
      DWORD2(v385) = v79;
LABEL_577:
      *(_QWORD *)&v386 = v82;
      DWORD2(v386) = v83;
      v387 = v5;
      v388 = (int)v6;
      v330 = (uint64_t *)a1;
      v331 = a2;
      v332 = 3;
      goto LABEL_580;
    }
  }
LABEL_238:
  if (*(_DWORD *)(a1 + 28))
  {
    if ((*(_WORD *)(a2 + 26) & 0x380) == 0 && (*(_WORD *)(*(_QWORD *)(a2 + 96) + 36) & 0xF00) == 0)
    {
      v113 = sub_1C5D633A0(*(_QWORD *)a1, v7);
      if (v113 >= 0x100u)
      {
        v115 = *(_QWORD *)(a2 + 96);
        v116 = *(_QWORD *)(v115 + 8);
        v117 = v113;
        if (v113 > (63
                                                                   - __clz(((1 << *(_BYTE *)(v115 + 34)) | v116) & -((1 << *(_BYTE *)(v115 + 34)) | v116)))
          && (v116 & ~(-1 << v113)) == 0)
        {
          v191 = *(_QWORD *)a1;
          v192 = (*(unsigned __int16 *)(a2 + 26) >> 10) & 3;
          v193 = *(void **)(a2 + 64);
          v379 = v193;
          if (v193)
          {
            llvm::MetadataTracking::track((uint64_t)&v379, (unsigned __int8 *)v193, 2);
            v115 = *(_QWORD *)(a2 + 96);
          }
          LODWORD(v380) = *(_DWORD *)(a2 + 60);
          v194 = *(uint64_t **)(a2 + 40);
          v195 = *v194;
          v196 = v194[1];
          v368 = *(_QWORD *)(v115 + 16);
          v367 = *(_OWORD *)v115;
          v197 = *(_QWORD *)(a2 + 80);
          v198 = *(_QWORD *)(a2 + 88);
          v199 = *(_WORD *)(v115 + 32);
          v200 = *(_OWORD *)(v115 + 56);
          *(_OWORD *)v383 = *(_OWORD *)(v115 + 40);
          v384[0] = v200;
          sub_1C636B4C8(v191, v192, (uint64_t)&v379, v195, v196, v5, (int)v6, v114, v7, v8, &v367, v197, v198, v117 | 0x100, 0, v199, (uint64_t)v383);
          if (v379)
            llvm::MetadataTracking::untrack((uint64_t)&v379, (unsigned __int8 *)v379);
        }
      }
    }
  }
LABEL_246:
  if ((*(_WORD *)(a2 + 26) & 0x380) != 0
    || (v121 = sub_1C5CB743C(a1, a2, (uint64_t *)v5, v6), v122 = v119, (uint64_t *)v5 == v121) && (_DWORD)v6 == v119)
  {
    if ((sub_1C5CB7840((uint64_t *)a1, a2) & 1) != 0 || sub_1C5CB83E4((uint64_t *)a1, a2))
      return a2;
    if (*(int *)(a1 + 24) < 3
      || (*(_WORD *)(*(_QWORD *)(a2 + 96) + 36) & 0xF00) != 0
      || (*(_BYTE *)(a2 + 26) & 8) != 0
      || *(_WORD *)(a2 + 24) != 253
      || (*(_WORD *)(a2 + 26) & 0xF80) != 0)
    {
      return 0;
    }
    v140 = *(unsigned __int8 **)(a2 + 40);
    v141 = *v140;
    if (*v140)
    {
      if ((v141 - 2) >= 6 && (v141 - 15) >= 0x3C)
        return 0;
      goto LABEL_283;
    }
    v142 = *((_QWORD *)v140 + 1);
    v143 = *(_DWORD *)(v142 + 8);
    if ((*(_DWORD *)(v142 + 8) & 0xFE) == 0x12)
      v143 = *(unsigned __int8 *)(**(_QWORD **)(v142 + 16) + 8);
    result = 0;
    if (v143 == 13 && *(_DWORD *)(v142 + 8) != 19)
    {
LABEL_283:
      v145 = sub_1C4916CF4(a2, 0);
      if ((_DWORD)v144 == 1)
      DWORD2(v375) = v145;
      if (v145 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v375, 0, 0);
      else
        *(_QWORD *)&v375 = 0;
      v383[0] = v384;
      v383[1] = (void *)0x400000000;
      v146 = *(_QWORD *)(a2 + 48);
      if (!v146)
        goto LABEL_455;
      v147 = DWORD2(v375);
      v148 = ((unint64_t)DWORD2(v375) + 63) >> 6;
      while (*(_DWORD *)(v146 + 8))
      {
LABEL_347:
        v146 = *(_QWORD *)(v146 + 32);
        if (!v146)
        {
          if (byte_1ED823CB8)
          {
            if (LODWORD(v383[1]) > 1)
              goto LABEL_379;
            goto LABEL_455;
          }
          if (LODWORD(v383[1]) != 2 || (v348 = *(unsigned __int8 *)(a1 + 35), !sub_1C5CB94F0((llvm::APInt *)&v375)))
          {
LABEL_455:
            v160 = 0;
            goto LABEL_456;
          }
          v207 = 0;
          v363 = 0;
          v345 = 0;
          v361 = 0;
          v359 = 0;
          v208 = 1;
          while (1)
          {
            v356 = v208;
            v209 = v383[0];
            v210 = (char *)v383[0] + 32 * v207;
            v211 = *(uint64_t **)(*v210 + 40);
            v212 = *v211;
            v213 = v211[1];
            v214 = v210 + 3;
            v215 = *(llvm::EVT **)(v210[3] + 56);
            v216 = (llvm::LLVMContext *)(8 * sub_1C5CB9454((uint64_t)v210));
            if ((int)v216 > 63)
            {
              if ((_DWORD)v216 == 64)
              {
                v217 = 0;
                v218 = 0;
                v219 = 6;
              }
              else
              {
                if ((_DWORD)v216 != 128)
                {
LABEL_431:
                  ExtendedIntegerVT = llvm::EVT::getExtendedIntegerVT(v215, v216);
                  v218 = v247;
                  v217 = ExtendedIntegerVT & 0xFFFFFFFFFFFFFF00;
                  v219 = ExtendedIntegerVT;
                  goto LABEL_396;
                }
                v217 = 0;
                v218 = 0;
                v219 = 7;
              }
            }
            else
            {
              switch((_DWORD)v216)
              {
                case 0x20:
                  v217 = 0;
                  v218 = 0;
                  v219 = 5;
                  break;
                case 0x10:
                  v217 = 0;
                  v218 = 0;
                  v219 = 4;
                  break;
                case 8:
                  v217 = 0;
                  v218 = 0;
                  v219 = 3;
                  break;
                default:
                  goto LABEL_431;
              }
            }
LABEL_396:
            if (v212 == (_DWORD)v219 && (!(_BYTE)v212 ? (v220 = v213 == v218) : (v220 = 1), v220))
              v221 = 0;
            else
              v221 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(*v214 + 24) + 1192))(*(_QWORD *)(*v214 + 24), v219 | v217, v218, v212, v213) ^ 1;
            v222 = (_QWORD *)(*(_QWORD *)(**(_QWORD **)(*v210 + 32) + 40)
                            + 16 * *(unsigned int *)(*(_QWORD *)(*v210 + 32) + 8));
            v223 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(*v214 + 24)
                                                                                     + 1160))(*(_QWORD *)(*v214 + 24), *v222, v222[1], **(_QWORD **)(*v210 + 40), *(_QWORD *)(*(_QWORD *)(*v210 + 40) + 8));
            v224 = v363;
            if (v209[8 * v207 + 4])
              v224 = v363 + 1;
            v363 = v224;
            if (!*v210
              || (v225 = *(_QWORD *)(*v210 + 48)) == 0
              || *(_QWORD *)(v225 + 32)
              || (v226 = *(_QWORD *)(v225 + 16), *(_WORD *)(v226 + 24) != 216))
            {
              v231 = v359;
              goto LABEL_417;
            }
            v352 = v221;
            v227 = *(_QWORD *)(*v214 + 24);
            v228 = *(uint64_t **)(v226 + 40);
            v346 = v228[1];
            v347 = *v228;
            v349 = *v228;
            v354 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v227 + 424))(v227);
            v350 = v227;
            v229 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v227 + 424))(v227, *(unsigned __int8 *)(*(_QWORD *)(**(_QWORD **)(v226 + 32) + 40)+ 16 * *(unsigned int *)(*(_QWORD *)(v226 + 32) + 8)), (*(unsigned __int8 *)(**(_QWORD **)(v226 + 32) + 26) >> 2) & 1);
            if (v229 != v354)
            {
              v230 = v229;
              if (v349 == 1 || v349 && *(_QWORD *)(v227 + 8 * v349 + 96))
              {
                v344 = (_BYTE *)(v227 + 390 * v349 + 4115);
                if (!*v344)
                {
                  v232 = *(_QWORD *)(*(_QWORD *)(*v214 + 40) + 16);
                  v233 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v232 + 176))(v232);
                  if (v233)
                  {
                    if (!llvm::TargetRegisterInfo::getCommonSubClass(v233, v230, v354))
                    {
                      LOBYTE(v379) = 0;
                      v234 = *(_QWORD *)(*v214 + 56);
                      v235 = *(_QWORD *)(**(_QWORD **)(*v214 + 40) + 40) + 272;
                      v236 = (char *)&v209[8 * v207];
                      v237 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)v236 + 1) + 96) + 16);
                      v238 = sub_1C5CB96FC((uint64_t)v210);
                      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, void **))(*(_QWORD *)v350 + 664))(v350, v234, v235, v347, v346, v237, v238, *(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)v236 + 1) + 96) + 32), &v379))
                      {
                        if ((_BYTE)v379 && (v349 == 1 || *(_QWORD *)(v350 + 8 * v349 + 96)) && !*v344)
                        {
                          v239 = *(uint64_t **)(*v210 + 40);
                          v241 = *v239;
                          v240 = v239[1];
                          v242 = *(llvm::EVT **)(*v214 + 56);
                          v243 = (llvm::LLVMContext *)(8 * sub_1C5CB9454((uint64_t)v210));
                          if ((int)v243 > 63)
                          {
                            if ((_DWORD)v243 == 64)
                            {
                              v244 = 0;
                              v245 = 6;
                              goto LABEL_438;
                            }
                            if ((_DWORD)v243 != 128)
                              goto LABEL_447;
                            v244 = 0;
                            v245 = 7;
                          }
                          else
                          {
                            switch((_DWORD)v243)
                            {
                              case 0x20:
                                v244 = 0;
                                v245 = 5;
                                goto LABEL_438;
                              case 0x10:
                                v244 = 0;
                                v245 = 4;
                                goto LABEL_438;
                              case 8:
                                v244 = 0;
                                v245 = 3;
                                goto LABEL_438;
                            }
LABEL_447:
                            v245 = llvm::EVT::getExtendedIntegerVT(v242, v243);
                          }
LABEL_438:
                          if (v241 == v245)
                          {
                            if ((_BYTE)v241)
                              v248 = 1;
                            else
                              v248 = v240 == v244;
                            v249 = v345;
                            if (v248)
                              v249 = v345 + 1;
                            v345 = v249;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v231 = v359;
            v221 = v352;
LABEL_417:
            v208 = 0;
            v359 = v221 + v231;
            v361 += v223 ^ 1;
            v207 = 1;
            if ((v356 & 1) == 0)
            {
              v357 = LODWORD(v383[1]);
              if (LODWORD(v383[1]) < 2)
              {
                v353 = 2;
LABEL_450:
                v250 = v345 + 1;
                if (v348 || (v251 = v353 >= v250, v353 == v250))
                  v251 = v353 + v359 >= v363 + v361 + v250;
                if (!v251)
                {
LABEL_379:
                  v379 = &v381;
                  v380 = 0x800000000;
                  v201 = v383[1];
                  if (!LODWORD(v383[1]))
                  {
LABEL_380:
                    v202 = *(_QWORD *)a1;
                    v203 = *(unsigned __int8 **)(a2 + 64);
                    *(_QWORD *)&v385 = v203;
                    if (v203)
                    {
                      llvm::MetadataTracking::track((uint64_t)&v385, v203, 2);
                      v201 = v380;
                    }
                    DWORD2(v385) = *(_DWORD *)(a2 + 60);
                    v204 = v201;
                    v205 = *(_QWORD *)(v202 + 832);
                    if (v205)
                      v206 = *(unsigned __int16 *)(v205 + 8);
                    else
                      v206 = 0;
                    v323 = sub_1C636D0C8(v202, (const char *)2, (const llvm::APInt *)&v385, (llvm *)1, 0, (uint64_t *)v379, v204, v206);
                    v325 = v324;
                    if ((_QWORD)v385)
                      llvm::MetadataTracking::untrack((uint64_t)&v385, (unsigned __int8 *)v385);
                    sub_1C5D6146C(*(_QWORD *)a1, a2, 1, (uint64_t)v323, v325);
                    sub_1C5C5B004(a1, (uint64_t)v323);
                    if (v379 != &v381)
                      free(v379);
                    v160 = 1;
                    goto LABEL_456;
                  }
                  v272 = (uint64_t *)v383[0];
                  v273 = 32 * LODWORD(v383[1]);
                  while (2)
                  {
                    v274 = *(_QWORD *)(v272[1] + 32);
                    v275 = *(uint64_t **)(v274 + 40);
                    v276 = *(_QWORD *)(v274 + 48);
                    v277 = sub_1C5CB93C0((uint64_t)v272);
                    v364 = v275;
                    if (v277)
                    {
                      v278 = v275[5] + 16 * v276;
                      v280 = *(llvm **)v278;
                      v279 = *(_QWORD *)(v278 + 8);
                      v281 = v272[1];
                      v282 = *(unsigned __int8 **)(v281 + 64);
                      *(_QWORD *)&v385 = v282;
                      if (v282)
                        llvm::MetadataTracking::track((uint64_t)&v385, v282, 2);
                      DWORD2(v385) = *(_DWORD *)(v281 + 60);
                      v283 = v272[3];
                      v284 = sub_1C6366AB4(v283, v277, (const llvm::APInt *)&v385, v280, v279, 0, 0);
                      v287 = *(_QWORD *)(v283 + 832);
                      if (v287)
                        LOWORD(v287) = *(_WORD *)(v287 + 8);
                      v364 = sub_1C5D56C70(v283, 56, (const llvm::APInt *)&v385, v280, v279, (uint64_t)v364, v276, v286, (uint64_t)v284, v285, v287);
                      v289 = v288;
                      if ((_QWORD)v385)
                        llvm::MetadataTracking::untrack((uint64_t)&v385, (unsigned __int8 *)v385);
                      v276 = v276 & 0xFFFFFFFF00000000 | v289;
                    }
                    v360 = v276;
                    v290 = *(llvm::EVT **)(v272[3] + 56);
                    v291 = (llvm::LLVMContext *)(8 * sub_1C5CB9454((uint64_t)v272));
                    v362 = v273;
                    v358 = v277;
                    if ((int)v291 > 63)
                    {
                      if ((_DWORD)v291 == 64)
                      {
                        v292 = 0;
                        v293 = 0;
                        v294 = 6;
                        goto LABEL_528;
                      }
                      if ((_DWORD)v291 != 128)
                        goto LABEL_551;
                      v292 = 0;
                      v293 = 0;
                      v294 = 7;
                    }
                    else
                    {
                      switch((_DWORD)v291)
                      {
                        case 0x20:
                          v292 = 0;
                          v293 = 0;
                          v294 = 5;
                          goto LABEL_528;
                        case 0x10:
                          v292 = 0;
                          v293 = 0;
                          v294 = 4;
                          goto LABEL_528;
                        case 8:
                          v292 = 0;
                          v293 = 0;
                          v294 = 3;
                          goto LABEL_528;
                      }
LABEL_551:
                      v321 = llvm::EVT::getExtendedIntegerVT(v290, v291);
                      v293 = v322;
                      v292 = v321 & 0xFFFFFFFFFFFFFF00;
                      v294 = v321;
                    }
LABEL_528:
                    v295 = v272[3];
                    v296 = v272[1];
                    v297 = *(unsigned __int8 **)(v296 + 64);
                    v377 = v297;
                    v298 = v296;
                    if (v297)
                    {
                      llvm::MetadataTracking::track((uint64_t)&v377, v297, 2);
                      v298 = v272[1];
                    }
                    LODWORD(v378) = *(_DWORD *)(v296 + 60);
                    v299 = *(uint64_t **)(v298 + 32);
                    v301 = *v299;
                    v300 = v299[1];
                    sub_1C4824250(*(uint64_t **)(v298 + 96), v358, (uint64_t)&v376);
                    v302 = sub_1C5CB96FC((uint64_t)v272);
                    v303 = *(_WORD *)(*(_QWORD *)(v272[1] + 96) + 32);
                    v385 = 0u;
                    v386 = 0u;
                    v304 = v294 | v292;
                    v305 = v293;
                    v306 = sub_1C63681B0(v295, v304, v293, (uint64_t)&v377, v301, v300, (uint64_t)v364, v360, &v376, v302 | 0x100u, (v302 | 0x100uLL) >> 32, v303, (uint64_t)&v385, 0);
                    v308 = v307;
                    if (v377)
                      llvm::MetadataTracking::untrack((uint64_t)&v377, v377);
                    v309 = *(_QWORD *)(*v272 + 40);
                    v310 = *(llvm **)v309;
                    v311 = *(_QWORD *)(v309 + 8);
                    if ((_DWORD)v294 == *(_QWORD *)v309 && ((_DWORD)v294 || v305 == v311))
                    {
                      v317 = v308;
                    }
                    else
                    {
                      v312 = v272[3];
                      v313 = (unsigned __int8 *)v306[8];
                      *(_QWORD *)&v385 = v313;
                      if (v313)
                        llvm::MetadataTracking::track((uint64_t)&v385, v313, 2);
                      DWORD2(v385) = *((_DWORD *)v306 + 15);
                      v314 = *(_QWORD *)(v312 + 832);
                      if (v314)
                        v315 = *(_WORD *)(v314 + 8);
                      else
                        v315 = 0;
                      v306 = sub_1C5D52060(v312, 199, (const llvm::APInt *)&v385, v310, v311, (uint64_t)v306, v308, v315);
                      v317 = v316;
                      if ((_QWORD)v385)
                        llvm::MetadataTracking::untrack((uint64_t)&v385, (unsigned __int8 *)v385);
                    }
                    v318 = *v272;
                    *(_QWORD *)&v385 = v306;
                    *((_QWORD *)&v385 + 1) = v308 & 0xFFFFFFFF00000000 | v317;
                    sub_1C5C5B0B4((uint64_t *)a1, v318, (uint64_t *)&v385, 1, 1);
                    if (*((_WORD *)v306 + 12) != 253)
                      v306 = *(_QWORD **)v306[4];
                    v319 = v380;
                    if (v380 >= (unint64_t)HIDWORD(v380))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v379, (uint64_t)&v381, v380 + 1, 16);
                      v319 = v380;
                    }
                    v320 = (char *)v379 + 16 * v319;
                    *v320 = v306;
                    v320[1] = 1;
                    v201 = v380 + 1;
                    LODWORD(v380) = v380 + 1;
                    v272 += 4;
                    v273 = v362 - 32;
                    if (v362 == 32)
                      goto LABEL_380;
                    continue;
                  }
                }
                goto LABEL_455;
              }
              sub_1C5CB9770((__int128 *)v383[0], (__int128 *)v383[0] + 2 * LODWORD(v383[1]), 126 - 2 * __clz(LODWORD(v383[1])), 1);
              v252 = 0;
              v253 = 0;
              v351 = *(_QWORD *)(*((_QWORD *)v383[0] + 3) + 24);
              v353 = 2;
              while (2)
              {
                v254 = v383[0];
                v255 = (char *)v383[0] + 32 * v252;
                if (v253)
                {
                  v256 = *(llvm::EVT **)(*(_QWORD *)(v253 + 24) + 56);
                  v257 = (llvm::LLVMContext *)(8 * sub_1C5CB9454(v253));
                  if ((int)v257 > 63)
                  {
                    if ((_DWORD)v257 == 64)
                    {
                      v355 = 0;
                      v258 = 0;
                      v259 = 6;
                      goto LABEL_475;
                    }
                    if ((_DWORD)v257 != 128)
                      goto LABEL_508;
                    v355 = 0;
                    v258 = 0;
                    v259 = 7;
                  }
                  else
                  {
                    switch((_DWORD)v257)
                    {
                      case 0x20:
                        v355 = 0;
                        v258 = 0;
                        v259 = 5;
                        goto LABEL_475;
                      case 0x10:
                        v355 = 0;
                        v258 = 0;
                        v259 = 4;
                        goto LABEL_475;
                      case 8:
                        v355 = 0;
                        v258 = 0;
                        v259 = 3;
                        goto LABEL_475;
                    }
LABEL_508:
                    v270 = llvm::EVT::getExtendedIntegerVT(v256, v257);
                    v258 = v271;
                    v355 = v270 & 0xFFFFFFFFFFFFFF00;
                    v259 = v270;
                  }
LABEL_475:
                  v260 = *(llvm::EVT **)(v254[4 * v252 + 3] + 56);
                  v261 = (llvm::LLVMContext *)(8 * sub_1C5CB9454((uint64_t)v255));
                  if ((int)v261 > 63)
                  {
                    if ((_DWORD)v261 == 64)
                    {
                      v262 = 0;
                      v263 = 6;
                      goto LABEL_484;
                    }
                    if ((_DWORD)v261 != 128)
                      goto LABEL_509;
                    v262 = 0;
                    v263 = 7;
                  }
                  else
                  {
                    switch((_DWORD)v261)
                    {
                      case 0x20:
                        v262 = 0;
                        v263 = 5;
                        goto LABEL_484;
                      case 0x10:
                        v262 = 0;
                        v263 = 4;
                        goto LABEL_484;
                      case 8:
                        v262 = 0;
                        v263 = 3;
                        goto LABEL_484;
                    }
LABEL_509:
                    v263 = llvm::EVT::getExtendedIntegerVT(v260, v261);
                  }
LABEL_484:
                  if ((_DWORD)v259 == v263 && ((_DWORD)v259 || v258 == v262))
                  {
                    LOBYTE(v376) = 0;
                    if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t, __int128 *))(*(_QWORD *)v351 + 1240))(v351, v259 | v355, v258, &v376))
                    {
                      v264 = sub_1C5CB96FC(v253);
                      if (v376 <= v264)
                      {
                        sub_1C5CB9248((llvm::APInt *)&v379, v253);
                        sub_1C5CB9248((llvm::APInt *)&v385, (uint64_t)v255);
                        if (v380 > 0x40)
                        {
                          v265 = v379;
                          v266 = (uint64_t *)v385;
                          v267 = ((unint64_t)v380 + 63) >> 6;
                          do
                          {
                            v268 = *v266++;
                            *v265++ |= v268;
                            --v267;
                          }
                          while (v267);
                        }
                        else
                        {
                          v379 = (void *)((unint64_t)v379 | v385);
                        }
                        if (DWORD2(v385) >= 0x41 && (_QWORD)v385)
                          MEMORY[0x1CAA32F9C](v385, 0x1000C8000313F17);
                        v269 = sub_1C5CB94F0((llvm::APInt *)&v379);
                        if (v380 >= 0x41 && v379)
                          MEMORY[0x1CAA32F9C](v379, 0x1000C8000313F17);
                        v353 -= v269;
                        if (v269)
                          v255 = 0;
                      }
                    }
                    else
                    {
                      v255 = 0;
                    }
                  }
                }
                ++v252;
                v253 = (uint64_t)v255;
                if (v252 == v357)
                  goto LABEL_450;
                continue;
              }
            }
          }
        }
      }
      v149 = *(_QWORD *)(v146 + 16);
      v150 = *(unsigned __int16 *)(v149 + 24);
      if (v150 == 177)
      {
        v151 = *(_QWORD *)(v149 + 48);
        if (!v151 || *(_QWORD *)(v151 + 32))
          goto LABEL_455;
        v152 = *(_QWORD *)(*(_QWORD *)(v149 + 32) + 40);
        v153 = *(unsigned __int16 *)(v152 + 24);
        if (v153 != 35 && v153 != 11)
          goto LABEL_455;
        v155 = *(_QWORD *)(v152 + 80);
        v156 = (_QWORD *)(v155 + 24);
        if (*(_DWORD *)(v155 + 32) >= 0x41u)
          v156 = (_QWORD *)*v156;
        v157 = *(_DWORD *)v156;
        v149 = *(_QWORD *)(v151 + 16);
        v150 = *(unsigned __int16 *)(v149 + 24);
      }
      else
      {
        v157 = 0;
      }
      if (v150 != 201)
        goto LABEL_455;
      v159 = sub_1C4916CF4(v149, 0);
      if ((_DWORD)v158 == 1)
      if (v159 < 8)
        goto LABEL_455;
      v160 = 0;
      if ((v159 & (v159 - 1)) != 0 || (v157 & 7) != 0)
        goto LABEL_456;
      v161 = *(_QWORD *)a1;
      v379 = (void *)v149;
      v380 = a2;
      v381 = v157;
      v382 = v161;
      sub_1C5CB9248((llvm::APInt *)&v385, (uint64_t)&v379);
      v162 = DWORD2(v385);
      if (DWORD2(v385) >= 0x41)
      {
        v164 = DWORD2(v385) + 63;
        v165 = (uint64_t *)operator new[]();
        memcpy(v165, (const void *)v385, (v164 >> 3) & 0x3FFFFFF8);
        v166 = 0;
        v163 = v375;
        v167 = v164 >> 6;
        do
        {
          v165[v166] &= *(_QWORD *)(v163 + v166 * 8);
          ++v166;
        }
        while (v164 >> 6 != v166);
        v168 = 0;
        do
        {
          if (v167-- < 1)
            break;
          v170 = v165[v167];
          v168 += __clz(v170);
        }
        while (!v170);
        v171 = v162 | 0xFFFFFFC0;
        if ((v162 & 0x3F) == 0)
          v171 = 0;
        if (v162 - v168 - v171 >= 0x41)
        {
          MEMORY[0x1CAA32F9C](v165, 0x1000C8000313F17);
          goto LABEL_342;
        }
        v172 = *v165;
        MEMORY[0x1CAA32F9C](v165, 0x1000C8000313F17);
        if (v172)
        {
LABEL_342:
          v160 = 0;
          goto LABEL_343;
        }
      }
      else
      {
        v163 = v375;
        if (((unint64_t)v375 & (unint64_t)v385) != 0)
          goto LABEL_342;
      }
      if (v147 > 0x40)
      {
        v173 = (uint64_t *)v385;
        v174 = v148;
        do
        {
          v175 = *v173++;
          *(_QWORD *)v163 |= v175;
          v163 += 8;
          --v174;
        }
        while (v174);
      }
      else
      {
        *(_QWORD *)&v375 = v163 | v385;
      }
      if (v380)
        v176 = v379 == 0;
      else
        v176 = 1;
      if (v176 || !v382 || *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v380 + 32) + 80) + 24) != 51)
        goto LABEL_342;
      v177 = *(_QWORD *)(v382 + 24);
      v178 = *(llvm::EVT **)(v382 + 56);
      v179 = (llvm::LLVMContext *)(8 * sub_1C5CB9454((uint64_t)&v379));
      if ((int)v179 > 63)
      {
        if ((_DWORD)v179 == 64)
        {
          v180 = 6;
          goto LABEL_340;
        }
        if ((_DWORD)v179 == 128)
        {
          v180 = 7;
LABEL_340:
          if (!*(_QWORD *)(v177 + 8 * v180 + 96) || *(_BYTE *)(v177 + 390 * v180 + 4115))
            goto LABEL_342;
          v160 = 0;
          v181 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v380 + 32) + 40) + 40)
                           + 16 * *(unsigned int *)(*(_QWORD *)(v380 + 32) + 48));
          if (!(_BYTE)v181 || (v182 = v181, v181 == 174))
          {
LABEL_343:
            if (DWORD2(v385) >= 0x41 && (_QWORD)v385)
              MEMORY[0x1CAA32F9C](v385, 0x1000C8000313F17);
            if (!v160)
            {
LABEL_456:
              if (v383[0] != v384)
                free(v383[0]);
              if (DWORD2(v375) >= 0x41 && (_QWORD)v375)
                MEMORY[0x1CAA32F9C](v375, 0x1000C8000313F17);
              if (v160)
                return a2;
              else
                return 0;
            }
            goto LABEL_347;
          }
          v183 = sub_1C5CB93C0((uint64_t)&v379);
          if (!(*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)v177 + 1088))(v177, v183)
            || (_DWORD)v182 != 1 && !*(_QWORD *)(v177 + 8 * v182 + 96)
            || *(_BYTE *)(v177 + 390 * v182 + 3918))
          {
            goto LABEL_342;
          }
          v184 = **((unsigned __int8 **)v379 + 5);
          if ((_DWORD)v184 == (_DWORD)v180)
            goto LABEL_356;
          if (**((_BYTE **)v379 + 5))
          {
            if ((_DWORD)v184 != 1)
            {
              v160 = 0;
              if (!**((_BYTE **)v379 + 5) || !*(_QWORD *)(v177 + 8 * v184 + 96))
                goto LABEL_343;
            }
            if (!*(_BYTE *)(v177 + 390 * **((unsigned __int8 **)v379 + 5) + 4061))
            {
LABEL_356:
              v185 = (char *)v383[0];
              if (LODWORD(v383[1]) >= HIDWORD(v383[1]))
              {
                v189 = LODWORD(v383[1]) + 1;
                if (v383[0] <= &v379 && (char *)v383[0] + 32 * LODWORD(v383[1]) > (char *)&v379)
                {
                  v190 = (char *)&v379 - (char *)v383[0];
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v383, (uint64_t)v384, v189, 32);
                  v185 = (char *)v383[0];
                  v186 = (void **)((char *)v383[0] + v190);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v383, (uint64_t)v384, v189, 32);
                  v186 = &v379;
                  v185 = (char *)v383[0];
                }
              }
              else
              {
                v186 = &v379;
              }
              v187 = &v185[32 * LODWORD(v383[1])];
              v188 = *((_OWORD *)v186 + 1);
              *(_OWORD *)v187 = *(_OWORD *)v186;
              *((_OWORD *)v187 + 1) = v188;
              ++LODWORD(v383[1]);
              v160 = 1;
              goto LABEL_343;
            }
          }
          goto LABEL_342;
        }
      }
      else
      {
        switch((_DWORD)v179)
        {
          case 0x20:
            v180 = 5;
            goto LABEL_340;
          case 0x10:
            v180 = 4;
            goto LABEL_340;
          case 8:
            v180 = 3;
            goto LABEL_340;
        }
      }
      v180 = llvm::EVT::getExtendedIntegerVT(v178, v179);
      if (!v180)
        goto LABEL_342;
      goto LABEL_340;
    }
  }
  else
  {
    v124 = (*(unsigned __int16 *)(a2 + 26) >> 10) & 3;
    v125 = *(_QWORD *)a1;
    if (v124)
    {
      v132 = *(void **)(a2 + 64);
      v383[0] = v132;
      if (v132)
        llvm::MetadataTracking::track((uint64_t)v383, (unsigned __int8 *)v132, 2);
      LODWORD(v383[1]) = *(_DWORD *)(a2 + 60);
      v130 = sub_1C636B5B0(v125, v124, (uint64_t)v383, **(_QWORD **)(a2 + 40), *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8), (uint64_t)v121, v122, v120, v7, v8, *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88), *(_QWORD *)(a2 + 96));
    }
    else
    {
      v126 = *(uint64_t **)(a2 + 40);
      v128 = *v126;
      v127 = v126[1];
      v129 = *(void **)(a2 + 64);
      v383[0] = v129;
      if (v129)
      {
        v366 = v127;
        llvm::MetadataTracking::track((uint64_t)v383, (unsigned __int8 *)v129, 2);
        v127 = v366;
      }
      LODWORD(v383[1]) = *(_DWORD *)(a2 + 60);
      v130 = sub_1C636B420(v125, v128, v127, (uint64_t)v383, (uint64_t)v121, v122, v7, v8, *(_QWORD *)(a2 + 96));
    }
    v133 = v130;
    if (v383[0])
      llvm::MetadataTracking::untrack((uint64_t)v383, (unsigned __int8 *)v383[0]);
    v134 = *(_QWORD *)a1;
    v135 = *(void **)(a2 + 64);
    v383[0] = v135;
    if (v135)
      llvm::MetadataTracking::track((uint64_t)v383, (unsigned __int8 *)v135, 2);
    LODWORD(v383[1]) = *(_DWORD *)(a2 + 60);
    v136 = *(_QWORD *)(v134 + 832);
    if (v136)
      LOWORD(v136) = *(_WORD *)(v136 + 8);
    v137 = sub_1C5D56C70(v134, 2, (const llvm::APInt *)v383, (llvm *)1, 0, v5, (unint64_t)v6, v131, (uint64_t)v133, 1uLL, v136);
    v139 = v138;
    if (v383[0])
      llvm::MetadataTracking::untrack((uint64_t)v383, (unsigned __int8 *)v383[0]);
    v383[0] = v133;
    LODWORD(v383[1]) = 0;
    *(_QWORD *)&v384[0] = v137;
    DWORD2(v384[0]) = v139;
    return sub_1C5C5B0B4((uint64_t *)a1, a2, (uint64_t *)v383, 2, 1);
  }
  return result;
}

_QWORD *sub_1C5C90B34(uint64_t a1, uint64_t a2, BOOL a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;
  unsigned __int16 v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  __int16 v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned __int8 *v28;
  int v29;
  BOOL v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  void *v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  int v50;
  int v51;
  BOOL v52;
  unsigned int *v53;
  uint64_t v54;
  unsigned __int8 *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  char v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  void *v65;
  uint64_t v66;
  __int128 v67;
  void *v68;
  unsigned int v69;
  uint64_t v70;
  BOOL v71;
  unsigned int v72;
  _QWORD *v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  __int128 v78;
  unsigned __int8 *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  __int128 *v89;
  uint64_t *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int v95;
  uint64_t *v96;
  int v97;
  uint64_t v98;
  unsigned __int8 *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  void *v113;
  void *v114;
  uint64_t v115;
  __int16 v116;
  uint64_t v117;
  __int16 v118;
  uint64_t v119;
  __int16 v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  __int128 v126;
  void *v127;
  uint64_t *v128;
  BOOL v129;
  __int128 v130;
  const char *v131;
  uint64_t v132;
  const char *v133;
  unint64_t v134;
  uint64_t v135;
  const char *v136;
  uint64_t v137;
  uint64_t i;
  int v139;
  int v140;
  int v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t j;
  uint64_t v146;
  int v147;
  uint64_t v148;
  int v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  const char *v163;
  char v164;
  uint64_t v165;
  int v166;
  unint64_t v167;
  int v168;
  char *v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  size_t v176;
  char *v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  int v186;
  unsigned int v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  llvm::LLVMContext *v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unsigned __int8 v205;
  unint64_t v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  size_t v211;
  int v212;
  uint64_t v213;
  const char *v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  uint64_t k;
  uint64_t v219;
  _QWORD *v220;
  unint64_t v221;
  uint64_t v222;
  const char *v223;
  int v224;
  _BYTE *v225;
  unsigned int v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  llvm::LLVMContext *v233;
  unsigned int v234;
  unsigned int v235;
  int isNullValue;
  uint64_t v237;
  uint64_t v238;
  unsigned int v239;
  uint64_t v240;
  llvm::APInt *v241;
  unsigned int v242;
  BOOL v243;
  uint64_t v244;
  uint64_t v245;
  const char *v246;
  unint64_t v247;
  void *v248;
  unint64_t v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t *v253;
  unsigned __int8 v254;
  unsigned int v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unsigned __int8 v264;
  unsigned int v265;
  void *v266;
  _BOOL4 v267;
  char v268;
  uint64_t v269;
  unsigned int v270;
  _BYTE *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  size_t v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  char v283;
  uint64_t v284;
  unsigned __int8 v285;
  _OWORD *v286;
  __int128 v287;
  uint64_t v288;
  uint64_t v289;
  char v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  uint64_t *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  int v304;
  char v305;
  unsigned int v306;
  unsigned int v307;
  int v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  const char *v313;
  unint64_t v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unsigned __int8 *v319;
  unint64_t v320;
  int v321;
  unsigned int v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  int v328;
  uint64_t v329;
  int v330;
  unsigned __int8 v331;
  uint64_t v332;
  uint64_t v333;
  unsigned __int8 v334;
  unsigned __int8 v335;
  int v336;
  unsigned int v337;
  unsigned int v338;
  uint64_t v339;
  uint64_t v340;
  unsigned __int8 v341;
  unsigned int v342;
  uint64_t v343;
  char *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  char v349;
  int v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unsigned int v354;
  void *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  void *v359;
  uint64_t v360;
  unint64_t v361;
  uint64_t v362;
  llvm::EVT *v363;
  llvm::LLVMContext *v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unsigned __int8 *v368;
  uint64_t v369;
  unsigned __int8 *v370;
  uint64_t *v371;
  int v372;
  __int16 v373;
  __int16 v374;
  uint64_t v375;
  uint64_t *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t *v382;
  unsigned int v383;
  unsigned int v384;
  uint64_t *v385;
  _QWORD *v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;
  int v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t *v393;
  uint64_t v394;
  uint64_t v395;
  __int128 *v396;
  unsigned int v397;
  _QWORD *v398;
  void *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  unsigned int v409;
  unint64_t v410;
  uint64_t v411;
  uint64_t *v412;
  uint64_t v413;
  uint64_t v414;
  __int128 *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  void *v425;
  uint64_t v426;
  uint64_t v427;
  llvm::EVT *v428;
  unint64_t v429;
  uint64_t v430;
  void *v431;
  uint64_t v432;
  uint64_t v434;
  int v435;
  BOOL v436;
  void *v437;
  unsigned __int8 *v438;
  void *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t *v443;
  uint64_t v444;
  unsigned int v445;
  uint64_t v446;
  unsigned int v447;
  int v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t ExtendedSizeInBits;
  const char *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t *v455;
  uint64_t v456;
  uint64_t v457;
  int v458;
  uint64_t v459;
  uint64_t *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  unint64_t v466;
  uint64_t *v467;
  uint64_t v468;
  uint64_t v469;
  int v470;
  uint64_t v471;
  uint64_t v472;
  int v473;
  unsigned int v474;
  uint64_t v475;
  unsigned __int8 *v476;
  uint64_t v477;
  uint64_t v478;
  __int16 v479;
  __int128 v480;
  BOOL v481;
  int v482;
  uint64_t v483;
  llvm::LLVMContext *v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  const char *v491;
  uint64_t v492;
  unint64_t v493;
  uint64_t v494;
  uint64_t v495;
  char *v496;
  char *v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  int v502;
  unsigned int v503;
  uint64_t v504;
  int v505;
  uint64_t v506;
  int v507;
  char *v508;
  char *v509;
  unsigned int v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t **v515;
  uint64_t *v516;
  uint64_t *v517;
  unsigned int v518;
  uint64_t v519;
  uint64_t *v520;
  uint64_t v521;
  _QWORD *v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  int v529;
  uint64_t *v530;
  uint64_t v531;
  uint64_t **v532;
  uint64_t v533;
  uint64_t *v534;
  int v535;
  int v536;
  uint64_t v537;
  void *v538;
  _QWORD *v539;
  unsigned int v540;
  void *v541;
  _QWORD *v542;
  unsigned int v543;
  unsigned int v544;
  _QWORD *v545;
  _DWORD *v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t **v549;
  uint64_t v550;
  uint64_t v551;
  int v552;
  uint64_t v553;
  uint64_t v554;
  void *v555;
  uint64_t *v556;
  void *v557;
  void *v558;
  uint64_t v559;
  uint64_t *v560;
  uint64_t v561;
  uint64_t v562;
  unsigned int v563;
  uint64_t v564;
  _QWORD *v565;
  _QWORD *v566;
  _OWORD *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  int v571;
  uint64_t v572;
  const char *v573;
  uint64_t v574;
  const char *v575;
  llvm::Type *v576;
  uint64_t v577;
  int v578;
  uint64_t v580;
  _QWORD *v581;
  unsigned int v582;
  unint64_t v583;
  uint64_t v584;
  unint64_t v585;
  int v586;
  unsigned int *v587;
  unsigned __int8 *v588;
  uint64_t v589;
  uint64_t v590;
  unsigned int v591;
  unsigned int v592;
  unsigned int v593;
  uint64_t v594;
  llvm::LLVMContext *v595;
  llvm::LLVMContext **v596;
  uint64_t v597;
  llvm::LLVMContext *v598;
  uint64_t v599;
  uint64_t *v600;
  uint64_t v601;
  int v602;
  uint64_t v604;
  unint64_t *v605;
  unint64_t v606;
  uint64_t v607;
  uint64_t v608;
  unsigned int v609;
  int v610;
  int v611;
  __int128 v612;
  uint64_t v613;
  unsigned __int8 *v614;
  int v615;
  uint64_t v616;
  BOOL v617;
  unsigned __int8 *v618;
  llvm::Type *v619;
  uint64_t v620;
  BOOL v621;
  llvm::Type *v622;
  uint64_t v623;
  BOOL v624;
  int v625;
  unint64_t v626;
  uint64_t v627;
  uint64_t v628;
  BOOL v629;
  uint64_t v630;
  _BYTE *v631;
  unsigned int v632;
  unsigned int v633;
  unsigned int v634;
  unsigned int v635;
  unint64_t v636;
  uint64_t v637;
  uint64_t v638;
  _QWORD *v639;
  uint64_t v640;
  unint64_t v641;
  uint64_t *v642;
  uint64_t v643;
  int v644;
  uint64_t v645;
  int v646;
  uint64_t v647;
  char v648;
  unsigned __int8 *v649;
  uint64_t *v650;
  unsigned __int8 *v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t ExtendedIntegerVT;
  int v655;
  uint64_t *v656;
  uint64_t v657;
  uint64_t v658;
  void *v659;
  uint64_t *v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  _QWORD *v667;
  unsigned int v668;
  unsigned int v669;
  uint64_t v670;
  uint64_t *v671;
  uint64_t v672;
  uint64_t v673;
  void *v674;
  uint64_t v675;
  uint64_t v676;
  __int128 *v677;
  uint64_t v678;
  uint64_t v679;
  void *v680;
  const char *v681;
  llvm::Type *v682;
  uint64_t v683;
  int v684;
  unsigned int *v685;
  unsigned __int8 *v686;
  uint64_t v687;
  __int16 v688;
  int v689;
  uint64_t v690;
  __int16 v691;
  _QWORD *v692;
  unint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t *v696;
  int v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  void *v704;
  const void *v705;
  void *v706;
  char *v707;
  uint64_t v708;
  uint64_t v709;
  unsigned int v711;
  int v712;
  int64_t v713;
  unint64_t v714;
  int v715;
  int v716;
  unint64_t v717;
  unint64_t v718;
  unint64_t v719;
  unint64_t v720;
  uint64_t v721;
  uint64_t v722;
  const char *v723;
  llvm::Type *v724;
  unsigned int *v725;
  uint64_t *v726;
  uint64_t v727;
  uint64_t v728;
  unsigned int *v729;
  _QWORD *v730;
  uint64_t v731;
  __int128 v732;
  unint64_t v733;
  uint64_t v734;
  uint64_t v735;
  llvm *v736;
  uint64_t *v737;
  uint64_t v738;
  unint64_t v739;
  uint64_t v740;
  __int16 v741;
  uint64_t *v742;
  unsigned int v743;
  unsigned int v744;
  uint64_t *v745;
  uint64_t v746;
  unint64_t v747;
  uint64_t v748;
  __int16 v749;
  uint64_t *v750;
  unsigned int v751;
  uint64_t *v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  unint64_t v756;
  uint64_t v757;
  uint64_t v758;
  _QWORD *v759;
  int v760;
  int v761;
  uint64_t v762;
  uint64_t *v763;
  int v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  const char *v768;
  uint64_t v769;
  unint64_t v770;
  unint64_t v771;
  uint64_t v772;
  unsigned int v773;
  unsigned int v774;
  char *v775;
  char *v776;
  uint64_t v777;
  uint64_t v778;
  int v779;
  uint64_t v780;
  uint64_t v781;
  unint64_t v782;
  void *v783;
  char *v784;
  uint64_t v785;
  uint64_t v786;
  unint64_t v787;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  BOOL v795;
  uint64_t v796;
  void *v797;
  uint64_t *v798;
  uint64_t v799;
  __int128 v800;
  unsigned __int8 *v801;
  uint64_t *v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  __int16 v806;
  __int128 v807;
  size_t v808;
  uint64_t v809;
  void *v810;
  int v811;
  llvm *v812;
  uint64_t v813;
  uint64_t v814;
  unsigned __int8 *v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  unint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t *v822;
  unsigned int v823;
  unsigned int v824;
  uint64_t v825;
  unsigned __int8 *v826;
  uint64_t v827;
  void *v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  unint64_t v834;
  unint64_t v835;
  unint64_t v836;
  uint64_t v837;
  unsigned int v838;
  int v839;
  uint64_t v840;
  int v841;
  uint64_t v842;
  int v843;
  int v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  unint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t *v852;
  uint64_t *v853;
  unint64_t v854;
  int v855;
  int v856;
  llvm::LLVMContext *v857;
  unsigned int v858;
  uint64_t v859;
  char v860;
  int v861;
  uint64_t v862;
  int v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  unsigned int v867;
  unsigned int v868;
  llvm *v869;
  unsigned int v870;
  llvm::EVT *v871;
  llvm::EVT *v872;
  llvm::EVT *v873;
  int v874;
  unsigned int v875;
  int v876;
  unsigned int v877;
  unsigned int v878;
  unsigned int v879;
  int v880;
  int v881;
  uint64_t v882;
  int v883;
  uint64_t v884;
  unsigned int v885;
  unsigned int __n;
  unsigned int __na;
  size_t __nb;
  size_t __nc;
  unint64_t __nd;
  size_t __ne;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  unint64_t v895;
  llvm::EVT *v896;
  unsigned int v897;
  unsigned int v898;
  llvm::LLVMContext *v899;
  llvm::LLVMContext *v900;
  llvm::LLVMContext *v901;
  uint64_t v902;
  unint64_t v903;
  int v904;
  int v905;
  unint64_t v906;
  unint64_t v907;
  uint64_t v908;
  unint64_t v909;
  int v910;
  unsigned int v911;
  unsigned int v912;
  llvm::EVT *v913;
  int __src;
  void *__srca;
  unint64_t __srcb;
  uint64_t *__srcc;
  uint64_t v918;
  uint64_t v919;
  char v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  __int16 v924;
  uint64_t v925;
  __int128 v926;
  uint64_t v927;
  __int128 v928;
  __int128 v929;
  __int128 v930;
  uint64_t v931;
  __int128 v932;
  uint64_t v933;
  __int128 v934;
  uint64_t v935;
  uint64_t v936;
  __int128 v937;
  unsigned __int8 *v938;
  int v939;
  char v940;
  unsigned __int8 *v941;
  uint64_t v942;
  char v943[17];
  __int128 v944;
  void *v945[2];
  __int128 v946;
  __int128 v947;
  uint64_t v948;
  int v949;
  void *__dst[2];
  __int128 v951;
  __int128 v952;
  __int128 v953;
  __int128 v954;
  __int128 v955;
  __int128 v956;
  __int128 v957;
  uint64_t v958;
  uint64_t v959;
  __int128 *v960;
  __int128 v961;
  __int128 v962;
  __int128 v963;
  uint64_t v964;
  char v965;
  _QWORD *v966;
  uint64_t v967;
  _QWORD v968[3];
  void *v969[2];
  _QWORD v970[8];
  __int128 v971;
  uint64_t v972;
  _QWORD v973[17];

  v3 = a2;
  v4 = a1;
  v973[15] = *MEMORY[0x1E0C80C00];
  v5 = *(__int128 **)(a2 + 32);
  v6 = *v5;
  v928 = *(__int128 *)((char *)v5 + 40);
  v929 = v6;
  v7 = *((_QWORD *)v5 + 10);
  v8 = *((_QWORD *)v5 + 11);
  v9 = v928;
  v10 = *(unsigned __int16 *)(v928 + 24);
  if (v10 != 216)
  {
LABEL_19:
    if (v10 == 51 && (*(_WORD *)(v3 + 26) & 0x380) == 0)
      return (_QWORD *)v929;
    goto LABEL_21;
  }
  v11 = *(_WORD *)(a2 + 26);
  if ((v11 & 0x780) == 0)
  {
    if (!*(_BYTE *)(a1 + 33) && !(*(_WORD *)(*(_QWORD *)(a2 + 96) + 36) & 0xF00 | v11 & 8))
    {
      v12 = *(_QWORD *)(a1 + 8);
LABEL_14:
      v14 = (_QWORD *)(*(_QWORD *)(v928 + 40) + 16 * DWORD2(v928));
      if (((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v12 + 184))(v12, *v14, v14[1]) & 1) != 0)
      {
        v15 = *(_QWORD *)v4;
        v16 = *(void **)(v3 + 64);
        __dst[0] = v16;
        if (v16)
        {
          llvm::MetadataTracking::track((uint64_t)__dst, (unsigned __int8 *)v16, 2);
          v9 = v928;
        }
        LODWORD(__dst[1]) = *(_DWORD *)(v3 + 60);
        v17 = sub_1C5D5D774(v15, v929, SDWORD2(v929), (uint64_t)__dst, **(_QWORD **)(v9 + 32), *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8), v7, v8, *(_QWORD *)(v3 + 96));
LABEL_117:
        v32 = v17;
        if (__dst[0])
          llvm::MetadataTracking::untrack((uint64_t)__dst, (unsigned __int8 *)__dst[0]);
        return v32;
      }
      v10 = *(unsigned __int16 *)(v928 + 24);
      goto LABEL_19;
    }
    if (*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v928 + 32) + 40)
                                    + 16 * *(unsigned int *)(*(_QWORD *)(v928 + 32) + 8)))
    {
      v12 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v928 + 32) + 40)
                                      + 16 * *(unsigned int *)(*(_QWORD *)(v928 + 32) + 8)) == 1
        || (*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v928 + 32) + 40)
                                       + 16 * *(unsigned int *)(*(_QWORD *)(v928 + 32) + 8))
          ? (v13 = *(_QWORD *)(v12
                             + 8
                             * *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v928 + 32) + 40)
                                                          + 16 * *(unsigned int *)(*(_QWORD *)(v928 + 32) + 8))
                             + 96) == 0)
          : (v13 = 1),
            !v13))
      {
        if (!*(_BYTE *)(v12
                       + 390
                       * *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v928 + 32) + 40)
                                                    + 16 * *(unsigned int *)(*(_QWORD *)(v928 + 32) + 8))
                       + 4116))
          goto LABEL_14;
      }
    }
  }
LABEL_21:
  if (*(_DWORD *)(v4 + 28))
  {
    if ((*(_WORD *)(v3 + 26) & 0x380) == 0 && (*(_WORD *)(*(_QWORD *)(v3 + 96) + 36) & 0xF00) == 0)
    {
      v18 = sub_1C5D633A0(*(_QWORD *)v4, v7);
      if (v18 >= 0x100u)
      {
        v19 = *(__int128 **)(v3 + 96);
        v20 = *((_QWORD *)v19 + 1);
        v21 = v18;
        if (v18 > (63
                                                                  - __clz(((1 << *((_BYTE *)v19 + 34)) | v20) & -((1 << *((_BYTE *)v19 + 34)) | v20)))
          && (v20 & ~(-1 << v18)) == 0)
        {
          v475 = *(_QWORD *)v4;
          v476 = *(unsigned __int8 **)(v3 + 64);
          *(_QWORD *)&v971 = v476;
          if (v476)
          {
            llvm::MetadataTracking::track((uint64_t)&v971, v476, 2);
            v9 = v928;
            v19 = *(__int128 **)(v3 + 96);
          }
          DWORD2(v971) = *(_DWORD *)(v3 + 60);
          v927 = *((_QWORD *)v19 + 2);
          v926 = *v19;
          v477 = *(_QWORD *)(v3 + 80);
          v478 = *(_QWORD *)(v3 + 88);
          v479 = *((_WORD *)v19 + 16);
          v480 = *(__int128 *)((char *)v19 + 56);
          *(_OWORD *)__dst = *(__int128 *)((char *)v19 + 40);
          v951 = v480;
          sub_1C636B9CC(v475, v929, SDWORD2(v929), (uint64_t)&v971, v9, DWORD2(v928), v7, v8, (uint64_t)&v926, v477, v478, v21, SHIDWORD(v21), v479, (uint64_t)__dst);
          a2 = v971;
          if ((_QWORD)v971)
            llvm::MetadataTracking::untrack((uint64_t)&v971, (unsigned __int8 *)v971);
        }
      }
    }
  }
  v925 = v4;
  if (*(_WORD *)(v3 + 24) == 254)
  {
    v23 = *(unsigned __int16 *)(v3 + 26);
    if ((v23 & 0x780) == 0)
    {
      v40 = *(_QWORD *)(v3 + 32);
      v41 = *(_QWORD *)(v40 + 40);
      if (v41)
      {
        if (*(_WORD *)(v41 + 24) == 253)
        {
          v42 = *(unsigned __int16 *)(v41 + 26);
          if ((v42 & 0xF80) == 0)
          {
            v43 = *(_QWORD *)(v41 + 48);
            if (v43)
            {
              v44 = *(_QWORD *)(v40 + 48);
              v45 = 1;
              do
              {
                if (*(_DWORD *)(v43 + 8) == (_DWORD)v44)
                {
                  if (!v45)
                    goto LABEL_31;
                  --v45;
                }
                v43 = *(_QWORD *)(v43 + 32);
              }
              while (v43);
              if (!v45)
              {
                v46 = *(void **)(v41 + 80);
                v47 = *(_QWORD *)(v41 + 88);
                v945[0] = v46;
                v945[1] = (void *)v47;
                if ((_BYTE)v46)
                {
                  v48 = ((_BYTE)v46 + 104) >= 0x13u && ((_BYTE)v46 - 8) >= 7u;
                  if (v48 && ((_BYTE)v46 - 75) >= 0x2Du)
                    goto LABEL_31;
                }
                else
                {
                  if ((*(_DWORD *)(v47 + 8) & 0xFE) == 0x12)
                    v474 = *(unsigned __int8 *)(**(_QWORD **)(v47 + 16) + 8);
                  else
                    v474 = *(_DWORD *)(v47 + 8);
                  if (v474 > 6)
                    goto LABEL_31;
                }
                if (*(unsigned __int8 *)(v3 + 80) != v46)
                  goto LABEL_31;
                v481 = v47 != *(_QWORD *)(v3 + 88) && v46 == 0;
                if (v481
                  || ((v42 | v23) & 0x10) != 0
                  || *(_DWORD *)(*(_QWORD *)(v41 + 96) + 16)
                  || *(_DWORD *)(*(_QWORD *)(v3 + 96) + 16))
                {
                  goto LABEL_31;
                }
                v482 = v8;
                v483 = v3;
                v484 = (_BYTE)v46
                     ? (llvm::LLVMContext *)sub_1C47A8C74((unsigned __int8 *)v945)
                     : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v945);
                if ((_DWORD)a2 == 1)
                  goto LABEL_31;
                LOBYTE(v934) = 0;
                LOBYTE(v932) = 0;
                if ((int)v484 <= 31)
                {
                  switch((_DWORD)v484)
                  {
                    case 1:
                      v590 = 2;
                      goto LABEL_1008;
                    case 0x10:
                      v590 = 4;
                      goto LABEL_1008;
                    case 8:
                      v590 = 3;
                      goto LABEL_1008;
                  }
                }
                else
                {
                  switch((_DWORD)v484)
                  {
                    case 0x20:
                      v590 = 5;
LABEL_1008:
                      v637 = 0;
                      v639 = (_QWORD *)(v4 + 8);
                      v638 = *(_QWORD *)(v4 + 8);
                      v640 = v590;
                      goto LABEL_1009;
                    case 0x40:
                      v590 = 6;
                      goto LABEL_1008;
                    case 0x80:
                      v590 = 7;
                      goto LABEL_1008;
                  }
                }
                ExtendedIntegerVT = llvm::EVT::getExtendedIntegerVT(*(llvm::EVT **)(*(_QWORD *)v4 + 56), v484);
                v590 = ExtendedIntegerVT;
                v655 = ExtendedIntegerVT;
                if (!(_BYTE)ExtendedIntegerVT)
                  goto LABEL_31;
                v637 = a2;
                v640 = ExtendedIntegerVT;
                v639 = (_QWORD *)(v4 + 8);
                v638 = *(_QWORD *)(v4 + 8);
                if (v655 == 1)
                {
LABEL_1010:
                  if (!*(_BYTE *)(v638 + 390 * v640 + 4115)
                    && !*(_BYTE *)(v638 + 390 * v640 + 4116)
                    && (*(unsigned int (**)(uint64_t, uint64_t, void *, void *))(*(_QWORD *)v638 + 1752))(v638, 253, v945[0], v945[1])&& (*(unsigned int (**)(_QWORD, uint64_t, void *, void *))(*(_QWORD *)*v639 + 1752))(*v639, 254, v945[0], v945[1])&& llvm::TargetLoweringBase::allowsMemoryAccess(*(_QWORD *)(v4 + 8), *(_QWORD *)(*(_QWORD *)v4 + 56), *(_QWORD *)(**(_QWORD **)(*(_QWORD *)v4 + 40) + 40) + 272, v590, v637, *(_QWORD *)(v41 + 96), (uint64_t)&v934)&& llvm::TargetLoweringBase::allowsMemoryAccess(*(_QWORD *)(v4 + 8),
                                       *(_QWORD *)(*(_QWORD *)v4 + 56),
                                       *(_QWORD *)(**(_QWORD **)(*(_QWORD *)v4 + 40) + 40) + 272,
                                       v590,
                                       v637,
                                       *(_QWORD *)(v3 + 96),
                                       (uint64_t)&v932)
                    && (_BYTE)v934
                    && (_BYTE)v932)
                  {
                    v658 = *(_QWORD *)v4;
                    v659 = *(void **)(v41 + 64);
                    v969[0] = v659;
                    if (v659)
                      llvm::MetadataTracking::track((uint64_t)v969, (unsigned __int8 *)v659, 2);
                    LODWORD(v969[1]) = *(_DWORD *)(v41 + 60);
                    v660 = *(uint64_t **)(v41 + 32);
                    v661 = *v660;
                    v662 = v660[1];
                    v663 = v660[5];
                    v664 = v660[6];
                    v665 = *(_QWORD *)(v41 + 96);
                    v972 = *(_QWORD *)(v665 + 16);
                    v971 = *(_OWORD *)v665;
                    v666 = (1 << *(_BYTE *)(v665 + 34)) | *(_QWORD *)(v665 + 8);
                    *(_OWORD *)__dst = 0u;
                    v951 = 0u;
                    v829 = (63 - __clz(v666 & -v666)) | 0x100;
                    v667 = sub_1C63681B0(v658, v590, v637, (uint64_t)v969, v661, v662, v663, v664, &v971, v829, SHIDWORD(v829), 0, (uint64_t)__dst, 0);
                    v669 = v668;
                    if (v969[0])
                      llvm::MetadataTracking::untrack((uint64_t)v969, (unsigned __int8 *)v969[0]);
                    v670 = *(_QWORD *)v4;
                    v671 = *(uint64_t **)(v483 + 32);
                    v672 = *v671;
                    v673 = v671[1];
                    v674 = *(void **)(v483 + 64);
                    v969[0] = v674;
                    if (v674)
                    {
                      llvm::MetadataTracking::track((uint64_t)v969, (unsigned __int8 *)v674, 2);
                      v671 = *(uint64_t **)(v483 + 32);
                    }
                    LODWORD(v969[1]) = *(_DWORD *)(v483 + 60);
                    v675 = v671[10];
                    v676 = v671[11];
                    v677 = *(__int128 **)(v483 + 96);
                    *(_QWORD *)&v962 = *((_QWORD *)v677 + 2);
                    v961 = *v677;
                    v678 = (1 << *((_BYTE *)v677 + 34)) | *((_QWORD *)v677 + 1);
                    *(_OWORD *)__dst = 0u;
                    v951 = 0u;
                    v830 = (63 - __clz(v678 & -v678));
                    v32 = sub_1C636B75C(v670, v672, v673, (uint64_t)v969, (uint64_t)v667, v669, v675, v676, (uint64_t)&v961, v830, SHIDWORD(v830), 0, (uint64_t)__dst);
                    if (v969[0])
                      llvm::MetadataTracking::untrack((uint64_t)v969, (unsigned __int8 *)v969[0]);
                    v4 = v925;
                    sub_1C5C5B004(v925, (uint64_t)v667);
                    sub_1C5C5B004(v925, (uint64_t)v32);
                    v679 = *(_QWORD *)v925;
                    v680 = *(void **)(*(_QWORD *)v925 + 656);
                    *(_QWORD *)(v679 + 656) = __dst;
                    __dst[1] = v680;
                    __dst[0] = &off_1E8197EE8;
                    *(_QWORD *)&v951 = v679;
                    *((_QWORD *)&v951 + 1) = v925;
                    sub_1C5D6146C(v679, v41, 1, (uint64_t)v667, 1);
                    *(void **)(v951 + 656) = __dst[1];
                    v3 = v483;
                    LODWORD(v8) = v482;
                    if (v32)
                      return v32;
                  }
                  goto LABEL_31;
                }
LABEL_1009:
                if (!*(_QWORD *)(v638 + 8 * v640 + 96))
                  goto LABEL_31;
                goto LABEL_1010;
              }
            }
          }
        }
      }
    }
  }
LABEL_31:
  if (*(_BYTE *)(v4 + 33))
    goto LABEL_32;
  if (!*(_DWORD *)(v4 + 28))
    goto LABEL_32;
  v31 = *(unsigned __int8 *)(v3 + 80);
  if ((v31 - 3) > 2
    || (*(_WORD *)(*(_QWORD *)(v3 + 96) + 36) & 0xF00) != 0
    || (*(_BYTE *)(v3 + 26) & 8) != 0
    || (*(_WORD *)(v3 + 26) & 0x380) != 0)
  {
    goto LABEL_32;
  }
  v909 = v7;
  v32 = 0;
  v33 = v3;
  v34 = **(_QWORD **)(v3 + 32);
  __dst[0] = &v951;
  v35 = v33;
  *(_QWORD *)&v951 = v33;
  __dst[1] = (void *)0x800000001;
  if (v34 && *(_WORD *)(v34 + 24) == 254)
  {
    LODWORD(v36) = 1;
    do
    {
      if (*(unsigned __int8 *)(v34 + 80) != v31
        || (*(_WORD *)(*(_QWORD *)(v34 + 96) + 36) & 0xF00) != 0
        || (*(_BYTE *)(v34 + 26) & 8) != 0
        || (*(_WORD *)(v34 + 26) & 0x380) != 0)
      {
        goto LABEL_750;
      }
      if (v36 >= HIDWORD(__dst[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__dst, (uint64_t)&v951, v36 + 1, 8);
        LODWORD(v36) = __dst[1];
      }
      *((_QWORD *)__dst[0] + v36) = v34;
      v37 = __dst[1];
      v36 = ++LODWORD(__dst[1]);
      v38 = *(_QWORD *)(v34 + 32);
      v34 = *(_QWORD *)v38;
      v39 = *(_DWORD *)(v38 + 8);
    }
    while (*(_QWORD *)v38 && *(_WORD *)(v34 + 24) == 254);
    if (v36 < 2)
    {
LABEL_750:
      v32 = 0;
      v4 = v925;
      goto LABEL_751;
    }
    v905 = v8;
    v873 = *(llvm::EVT **)(*(_QWORD *)v925 + 56);
    v971 = *(_OWORD *)(v35 + 80);
    v875 = sub_1C6131328((unsigned __int8 *)&v971, a2, a3);
    v877 = v36 * v875;
    if ((int)(v36 * v875) <= 31)
    {
      if (v877 == 1)
      {
        v32 = 0;
        goto LABEL_1058;
      }
      if (v877 == 16)
      {
        v589 = 4;
        goto LABEL_955;
      }
      v32 = 0;
      if (v877 != 8)
        goto LABEL_1046;
    }
    else
    {
      if (v877 == 32)
      {
        v589 = 5;
LABEL_955:
        v934 = (unint64_t)v589;
        goto LABEL_956;
      }
      if (v877 == 64)
      {
        v589 = 6;
        goto LABEL_955;
      }
      v32 = 0;
      if (v877 != 128)
      {
LABEL_1046:
        *(_QWORD *)&v934 = llvm::EVT::getExtendedIntegerVT(v873, (llvm::LLVMContext *)v877);
        *((_QWORD *)&v934 + 1) = v653;
        if (v934 - 4 <= 2)
        {
LABEL_956:
          *(_QWORD *)&v932 = 0;
          DWORD2(v932) = 0;
          *(_QWORD *)&v971 = &v972;
          *((_QWORD *)&v971 + 1) = 0x800000000;
          sub_1C4765AA4((char *)&v971, v36, 0x7FFFFFFFFFFFFFFFLL);
          LOBYTE(v961) = 0;
          v965 = 0;
          if (LODWORD(__dst[1]))
          {
            v595 = 0;
            v596 = (llvm::LLVMContext **)__dst[0];
            v597 = 8 * LODWORD(__dst[1]);
            v923 = 0x7FFFFFFFFFFFFFFFLL;
            while (1)
            {
              v598 = *v596;
              v599 = *(_QWORD *)(*((_QWORD *)*v596 + 4) + 40);
              if (*(_WORD *)(v599 + 24) != 201)
                goto LABEL_1055;
              v930 = *(_OWORD *)*(_QWORD *)(v599 + 32);
              v884 = v597;
              __nb = (size_t)v596;
              v899 = v598;
              if ((*(_WORD *)(v930 + 24) & 0xFFFE) != 0xB0)
                goto LABEL_969;
              v600 = *(uint64_t **)(v930 + 32);
              v601 = v600[5];
              v602 = *(unsigned __int16 *)(v601 + 24);
              if (v602 == 35 || v602 == 11)
              {
                v604 = *(_QWORD *)(v601 + 80);
                v605 = (unint64_t *)(v604 + 24);
                if (*(_DWORD *)(v604 + 32) >= 0x41u)
                  v605 = (unint64_t *)*v605;
                v606 = *v605;
                v895 = v606 / v875;
                if (v606 % v875)
                  goto LABEL_1055;
                v607 = *v600;
                DWORD2(v930) = *((_DWORD *)v600 + 2);
                *(_QWORD *)&v930 = v607;
              }
              else
              {
LABEL_969:
                v895 = 0;
              }
              v608 = v932;
              if ((_QWORD)v932)
              {
                v609 = DWORD2(v932);
                v882 = sub_1C5CBA428(v932);
                v611 = v610;
                v612 = v930;
                if (v882 != sub_1C5CBA428(v930) || v611 != (_DWORD)v613)
                  goto LABEL_1055;
                v614 = (unsigned __int8 *)(*(_QWORD *)(v608 + 40) + 16 * v609);
                v615 = *v614;
                if (v615 != v934
                  || ((v616 = *((_QWORD *)v614 + 1), !v615) ? (v617 = v616 == *((_QWORD *)&v934 + 1)) : (v617 = 1), !v617))
                {
                  v618 = (unsigned __int8 *)(*(_QWORD *)(v612 + 40) + 16 * DWORD2(v612));
                  if (*v618 == v934
                    && ((_BYTE)v934 || *((_QWORD *)v618 + 1) == *((_QWORD *)&v934 + 1))
                    || (v619 = sub_1C6329368((unsigned int *)&v930, v613, a3),
                        v619 > sub_1C6329368((unsigned int *)&v932, v620, v621)))
                  {
                    *(_QWORD *)&v932 = v930;
                    DWORD2(v932) = DWORD2(v930);
                  }
                  v622 = sub_1C6329368((unsigned int *)&v932, v613, a3);
                  if (v622 < sub_1C6131328((unsigned __int8 *)&v934, v623, v624))
                    goto LABEL_1055;
                }
              }
              else
              {
                *(_QWORD *)&v932 = v930;
                DWORD2(v932) = DWORD2(v930);
              }
              sub_1C5D657F8((uint64_t)v899, *(_QWORD *)v925, (uint64_t)v945);
              *(_QWORD *)&v944 = 0;
              if (v965)
              {
                v625 = sub_1C5D653D4((uint64_t *)&v961, (uint64_t *)v945, *(_QWORD *)v925, &v944);
                v626 = v895;
                if (!v625)
                  goto LABEL_1055;
                v627 = v944;
              }
              else
              {
                v627 = 0;
                v961 = *(_OWORD *)v945;
                v962 = v946;
                v963 = v947;
                v964 = v948;
                v965 = 1;
                v626 = v895;
              }
              v628 = v923;
              v629 = v627 < v923;
              if (v627 < v923)
                v628 = v627;
              v923 = v628;
              if (v629)
                v595 = v899;
              if (v626 >= v36 || *(_QWORD *)(v971 + 8 * v626) != 0x7FFFFFFFFFFFFFFFLL)
                goto LABEL_1055;
              *(_QWORD *)(v971 + 8 * v626) = v627;
              v596 = (llvm::LLVMContext **)(__nb + 8);
              v597 = v884 - 8;
              if (v884 == 8)
                goto LABEL_999;
            }
          }
          v595 = 0;
          v923 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_999:
          v630 = *(_QWORD *)(v925 + 8);
          v631 = (_BYTE *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)v925 + 40) + 40) + 272);
          LOBYTE(v944) = 0;
          if (!llvm::TargetLoweringBase::allowsMemoryAccess(v630, (uint64_t)v873, (uint64_t)v631, v934, *((uint64_t *)&v934 + 1), *((_QWORD *)v595 + 12), (uint64_t)&v944))
          {
            v32 = 0;
            goto LABEL_1056;
          }
          v32 = 0;
          if (!(_BYTE)v944)
            goto LABEL_1056;
          v632 = *v631;
          v633 = v875 >> 3;
          v634 = 0;
          if (*v631)
          {
            v635 = v37;
            v636 = v36;
            while (*(_QWORD *)(v971 + 8 * v635) == v923 + v634)
            {
              v634 += v633;
              --v635;
              if (!--v636)
                goto LABEL_1023;
            }
LABEL_1024:
            if (v875 == 8)
            {
              v645 = 0;
              if (*v631)
              {
                while (*(_QWORD *)(v971 + 8 * v645) == v923 + v645)
                {
                  if (v36 == ++v645)
                    goto LABEL_1028;
                }
              }
              else
              {
                while (*(_QWORD *)(v971 + 8 * v37) == v923 + v645)
                {
                  ++v645;
                  --v37;
                  if (v36 == v645)
                  {
LABEL_1028:
                    v644 = 0;
                    v646 = 1;
                    goto LABEL_1037;
                  }
                }
              }
            }
            if ((_DWORD)v36 == 2)
            {
              if (*v631)
              {
                LOBYTE(v644) = 0;
                v647 = 0;
                while (*(_QWORD *)(v971 + 8 * v647) == v923 + v647 * (v875 >> 3))
                {
                  v648 = v644;
                  v644 = 1;
                  v647 = 1;
                  if ((v648 & 1) != 0)
                    goto LABEL_1036;
                }
              }
              else
              {
                v656 = (uint64_t *)(v971 + 8);
                while (1)
                {
                  v657 = *v656--;
                  if (v657 != v923 + v632)
                    break;
                  v632 += v633;
                  if (!--v36)
                  {
                    v646 = 0;
                    v644 = 1;
                    goto LABEL_1037;
                  }
                }
              }
            }
LABEL_1055:
            v32 = 0;
LABEL_1056:
            if ((uint64_t *)v971 != &v972)
              free((void *)v971);
            goto LABEL_1058;
          }
          v641 = v36;
          v642 = (uint64_t *)v971;
          do
          {
            v643 = *v642++;
            if (v643 != v923 + v634)
              goto LABEL_1024;
            v634 += v633;
            --v641;
          }
          while (v641);
LABEL_1023:
          v644 = 0;
LABEL_1036:
          v646 = 0;
LABEL_1037:
          v649 = *(unsigned __int8 **)(v35 + 64);
          *(_QWORD *)&v930 = v649;
          if (v649)
            llvm::MetadataTracking::track((uint64_t)&v930, v649, 2);
          DWORD2(v930) = *(_DWORD *)(v35 + 60);
          v650 = (uint64_t *)v932;
          v651 = (unsigned __int8 *)(*(_QWORD *)(v932 + 40) + 16 * DWORD2(v932));
          if (v934 == *v651)
          {
            if ((_BYTE)v934)
              goto LABEL_1093;
            v652 = *((_QWORD *)&v934 + 1);
            if (*((_QWORD *)&v934 + 1) == *((_QWORD *)v651 + 1))
              goto LABEL_1093;
          }
          else
          {
            v652 = *((_QWORD *)&v934 + 1);
          }
          v687 = *(_QWORD *)(*(_QWORD *)v925 + 832);
          if (v687)
            v688 = *(_WORD *)(v687 + 8);
          else
            v688 = 0;
          v650 = sub_1C5D52060(*(_QWORD *)v925, 201, (const llvm::APInt *)&v930, (llvm *)v934, v652, v932, *((unint64_t *)&v932 + 1), v688);
          *(_QWORD *)&v932 = v650;
          DWORD2(v932) = v689;
LABEL_1093:
          if (v646)
          {
            v690 = *(_QWORD *)(*(_QWORD *)v925 + 832);
            if (v690)
              v691 = *(_WORD *)(v690 + 8);
            else
              v691 = 0;
            v696 = sub_1C5D52060(*(_QWORD *)v925, 182, (const llvm::APInt *)&v930, (llvm *)v934, *((uint64_t *)&v934 + 1), (uint64_t)v650, *((unint64_t *)&v932 + 1), v691);
          }
          else
          {
            if (!v644)
              goto LABEL_1103;
            v692 = sub_1C6366AB4(*(_QWORD *)v925, v877 >> 1, (const llvm::APInt *)&v930, (llvm *)v934, *((uint64_t *)&v934 + 1), 0, 0);
            v695 = *(_QWORD *)(*(_QWORD *)v925 + 832);
            if (v695)
              LOWORD(v695) = *(_WORD *)(v695 + 8);
            v696 = sub_1C5D56C70(*(_QWORD *)v925, 179, (const llvm::APInt *)&v930, (llvm *)v934, *((uint64_t *)&v934 + 1), v932, *((unint64_t *)&v932 + 1), v694, (uint64_t)v692, v693, v695);
          }
          v650 = v696;
          *(_QWORD *)&v932 = v696;
          DWORD2(v932) = v697;
LABEL_1103:
          v698 = *(_QWORD *)v925;
          v699 = *((_QWORD *)v595 + 4);
          v700 = *(_QWORD *)(v699 + 80);
          v701 = *(_QWORD *)(v699 + 88);
          v702 = *((_QWORD *)v595 + 12);
          *(_OWORD *)v969 = *(_OWORD *)v702;
          v970[0] = *(_QWORD *)(v702 + 16);
          v703 = (1 << *(_BYTE *)(v702 + 34)) | *(_QWORD *)(v702 + 8);
          *(_OWORD *)v945 = 0u;
          v946 = 0u;
          v831 = (63 - __clz(v703 & -v703));
          v32 = sub_1C636B75C(v698, v34, v39, (uint64_t)&v930, (uint64_t)v650, DWORD2(v932), v700, v701, (uint64_t)v969, v831, SHIDWORD(v831), 0, (uint64_t)v945);
          sub_1C636595C(*(_QWORD *)v925, v35, (uint64_t)v32);
          if ((_QWORD)v930)
            llvm::MetadataTracking::untrack((uint64_t)&v930, (unsigned __int8 *)v930);
          goto LABEL_1056;
        }
        v32 = 0;
      }
    }
LABEL_1058:
    v4 = v925;
    LODWORD(v8) = v905;
  }
LABEL_751:
  if (__dst[0] != &v951)
    free(__dst[0]);
  v3 = v35;
  v7 = v909;
  if (v32)
    return v32;
LABEL_32:
  v24 = *(_WORD *)(v3 + 26);
  if ((v24 & 0x380) != 0)
    goto LABEL_37;
  if (!*(_DWORD *)(v4 + 28))
    goto LABEL_36;
  sub_1C5D657F8(v3, *(_QWORD *)v4, (uint64_t)&v930);
  if (!(_QWORD)v930 || *(_WORD *)(v930 + 24) == 51)
    goto LABEL_36;
  v969[0] = v970;
  v969[1] = (void *)0x800000000;
  v961 = 0uLL;
  *(_QWORD *)&v962 = 0;
  *((_QWORD *)&v962 + 1) = (char *)&v963 + 8;
  *(_QWORD *)&v963 = 0x400000000;
  v966 = v968;
  v967 = 0;
  v968[0] = 0;
  v968[1] = 1;
  v959 = 0;
  v960 = &v961;
  *(_OWORD *)__dst = 0u;
  v951 = 0u;
  v952 = 0u;
  v953 = 0u;
  v954 = 0u;
  v955 = 0u;
  v956 = 0u;
  v957 = 0u;
  v958 = 0;
  sub_1C5D657F8(v3, *(_QWORD *)v4, (uint64_t)&v934);
  if (!(_QWORD)v934)
    goto LABEL_104;
  if (*(_WORD *)(v934 + 24) == 51)
    goto LABEL_104;
  v971 = *(_OWORD *)(v3 + 80);
  if (sub_1C6218588((llvm::EVT *)&v971))
    goto LABEL_104;
  v450 = *(_QWORD *)(v3 + 88);
  if (!*(_QWORD *)(v3 + 80))
  {
    if (*(_BYTE *)(v450 + 8) != 19)
    {
      *(_QWORD *)&v971 = *(_QWORD *)(v3 + 80);
      *((_QWORD *)&v971 + 1) = v450;
      ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v971);
      goto LABEL_762;
    }
LABEL_104:
    v61 = 0;
    goto LABEL_105;
  }
  if (*(_QWORD *)(v3 + 80) - 120 < 0x33)
    goto LABEL_104;
  *(_QWORD *)&v971 = *(_QWORD *)(v3 + 80);
  *((_QWORD *)&v971 + 1) = v450;
  ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v971);
LABEL_762:
  v486 = ExtendedSizeInBits;
  if ((_DWORD)v452 == 1)
  sub_1C5CBA454((uint64_t)__dst, 0, (unint64_t)(v486 + 7) >> 3);
  v909 = (unint64_t)&v971 + 8;
  v866 = v3;
  v487 = v3;
  while (1)
  {
    v488 = **(_QWORD **)(v487 + 32);
    if (!v488 || *(_WORD *)(v488 + 24) != 254)
      break;
    if (*(_BYTE *)(v488 + 80))
    {
      if (*(unsigned __int8 *)(v488 + 80) - 120 < 0x33)
        goto LABEL_924;
    }
    else if (*(_BYTE *)(*(_QWORD *)(v488 + 88) + 8) == 19)
    {
LABEL_924:
      v61 = 0;
      v3 = v866;
      v4 = v925;
      goto LABEL_105;
    }
    v489 = *(_QWORD *)(v488 + 48);
    if (!v489)
      break;
    if (*(_QWORD *)(v489 + 32))
      break;
    if ((*(_WORD *)(*(_QWORD *)(v488 + 96) + 36) & 0xF00) != 0)
      break;
    if ((*(_BYTE *)(v488 + 26) & 8) != 0)
      break;
    if ((*(_WORD *)(v488 + 26) & 0x380) != 0)
      break;
    sub_1C5D657F8(v488, *(_QWORD *)v925, (uint64_t)&v932);
    *(_QWORD *)&v944 = 0;
    if ((sub_1C5D653D4((uint64_t *)&v934, (uint64_t *)&v932, *(_QWORD *)v925, &v944) & 1) == 0)
      break;
    v971 = *(_OWORD *)(v488 + 80);
    if ((_BYTE)v971)
      v490 = sub_1C47A8C74((unsigned __int8 *)&v971);
    else
      v490 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v971);
    v492 = v490;
    if ((_DWORD)v491 == 1)
    v493 = (unint64_t)(v492 + 7) >> 3;
    sub_1C5CBA6B4((uint64_t)&v971, (uint64_t)__dst, v944);
    v945[0] = __dst;
    v945[1] = (char *)&v946 + 8;
    *(_QWORD *)&v946 = 0x400000000;
    sub_1C5CBB618(v945, HIDWORD(v959));
    if ((_DWORD)v972
      && (v494 = *((_QWORD *)&v971 + 1),
          *(_DWORD *)(*((_QWORD *)&v971 + 1) + 12) < *(_DWORD *)(*((_QWORD *)&v971 + 1) + 8)))
    {
      v495 = *((_QWORD *)&v971 + 1) + 16 * v972;
      v496 = (char *)v945[1];
      v497 = (char *)v945[1] + 16 * v946;
      if (*(_DWORD *)(v495 - 4) == *((_DWORD *)v497 - 1) && *(_QWORD *)(v495 - 16) == *((_QWORD *)v497 - 2))
        goto LABEL_795;
    }
    else
    {
      v496 = (char *)v945[1];
      if (!(_DWORD)v946 || *((_DWORD *)v945[1] + 3) >= *((_DWORD *)v945[1] + 2))
      {
LABEL_795:
        v498 = v487;
        if (v496 != (char *)&v946 + 8)
          free(v496);
        goto LABEL_797;
      }
      v494 = *((_QWORD *)&v971 + 1);
    }
    v498 = v487;
    v499 = v7;
    v500 = *(_QWORD *)(*(_QWORD *)(v494 + 16 * v972 - 16)
                     + 16 * *(unsigned int *)(v494 + 16 * v972 - 4));
    v501 = v944;
    if (v496 != (char *)&v946 + 8)
      free(v496);
    v629 = v500 < (uint64_t)(v501 + v493);
    v7 = v499;
    if (v629)
    {
      v502 = 3;
      goto LABEL_825;
    }
LABEL_797:
    v945[0] = __dst;
    v945[1] = (char *)&v946 + 8;
    *(_QWORD *)&v946 = 0x400000000;
    sub_1C5CBB618(v945, 0);
    v503 = *((_DWORD *)v945[0] + 34);
    if (v503)
    {
      while ((int)v946 - 1 < v503)
        sub_1C4A079DC(&v945[1], *(_QWORD *)(*((_QWORD *)v945[1] + 2 * (v946 - 1))+ 8 * *((unsigned int *)v945[1] + 4 * (v946 - 1) + 3)), 0);
    }
    if ((_DWORD)v972)
    {
      v504 = *((_QWORD *)&v971 + 1);
      v505 = v946;
      if (*(_DWORD *)(*((_QWORD *)&v971 + 1) + 12) < *(_DWORD *)(*((_QWORD *)&v971 + 1) + 8))
      {
        v506 = *((_QWORD *)&v971 + 1) + 16 * v972;
        v507 = *(_DWORD *)(v506 - 4);
        v508 = (char *)v945[1];
        v509 = (char *)v945[1] + 16 * v946;
        if (v507 == *((_DWORD *)v509 - 1) && *(_QWORD *)(v506 - 16) == *((_QWORD *)v509 - 2))
          goto LABEL_814;
        goto LABEL_809;
      }
    }
    else
    {
      v505 = v946;
    }
    v508 = (char *)v945[1];
    if (!v505 || *((_DWORD *)v945[1] + 3) >= *((_DWORD *)v945[1] + 2))
    {
LABEL_814:
      v511 = v7;
      if (v508 != (char *)&v946 + 8)
        free(v508);
LABEL_821:
      sub_1C5CBA454((uint64_t)__dst, v944, v944 + v493);
      v514 = LODWORD(v969[1]);
      if (LODWORD(v969[1]) >= (unint64_t)HIDWORD(v969[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v969, (uint64_t)v970, LODWORD(v969[1]) + 1, 8);
        v514 = LODWORD(v969[1]);
      }
      v7 = v511;
      v502 = 0;
      *((_QWORD *)v969[0] + v514) = v488;
      ++LODWORD(v969[1]);
      v487 = v488;
      goto LABEL_826;
    }
    v504 = *((_QWORD *)&v971 + 1);
    v507 = *(_DWORD *)(*((_QWORD *)&v971 + 1) + 16 * v972 - 4);
LABEL_809:
    if (!v507)
    {
      v510 = *(_DWORD *)(v971 + 136);
LABEL_817:
      v511 = v7;
      llvm::IntervalMapImpl::Path::moveLeft((llvm::IntervalMapImpl::Path *)((char *)&v971 + 8), v510);
      v504 = *((_QWORD *)&v971 + 1);
      goto LABEL_818;
    }
    if (!(_DWORD)v972 || *(_DWORD *)(v504 + 12) >= *(_DWORD *)(v504 + 8))
    {
      v510 = *(_DWORD *)(v971 + 136);
      if (v510)
        goto LABEL_817;
    }
    v511 = v7;
    *(_DWORD *)(v504 + 16 * v972 - 4) = v507 - 1;
LABEL_818:
    v512 = *(_QWORD *)(*(_QWORD *)(v504 + 16 * v972 - 16)
                     + 16 * *(unsigned int *)(v504 + 16 * v972 - 4)
                     + 8);
    v513 = v944;
    if (v945[1] != (char *)&v946 + 8)
      free(v945[1]);
    if (v512 > v513)
      goto LABEL_821;
    v502 = 3;
    v7 = v511;
LABEL_825:
    v487 = v498;
LABEL_826:
    if (*((_QWORD **)&v971 + 1) != v973)
      free(*((void **)&v971 + 1));
    if (v502)
    {
      v3 = v866;
      goto LABEL_831;
    }
  }
  v3 = v866;
LABEL_831:
  if (LODWORD(v969[1]))
  {
    v515 = *(uint64_t ***)(v487 + 32);
    v517 = *v515;
    v516 = v515[1];
    v909 = (unint64_t)&v972;
    *(_QWORD *)&v971 = &v972;
    *((_QWORD *)&v971 + 1) = 0x800000000;
    v518 = LODWORD(v969[1]) - 1;
    do
    {
      v519 = *((_QWORD *)v969[0] + v518);
      v520 = sub_1C5CB743C(v925, v519, v517, v516);
      v521 = *(_QWORD *)v925;
      v522 = *(_QWORD **)(v519 + 32);
      v523 = v522[5];
      v524 = v522[6];
      v525 = v522[10];
      v526 = v522[11];
      v528 = v522[15];
      v527 = v522[16];
      v945[0] = v520;
      LODWORD(v945[1]) = v529;
      *(_QWORD *)&v946 = v523;
      DWORD2(v946) = v524;
      *(_QWORD *)&v947 = v525;
      DWORD2(v947) = v526;
      v948 = v528;
      v949 = v527;
      v530 = sub_1C636DEEC(v521, v519, (uint64_t *)v945, 4);
      v531 = DWORD2(v971);
      if (DWORD2(v971) >= (unint64_t)HIDWORD(v971))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v971, (uint64_t)&v972, DWORD2(v971) + 1, 16);
        v531 = DWORD2(v971);
      }
      v532 = (uint64_t **)(v971 + 16 * v531);
      *v532 = v530;
      v532[1] = 0;
      ++DWORD2(v971);
      v533 = v518;
      *((_QWORD *)v969[0] + v518--) = v530;
    }
    while (v533);
    v534 = sub_1C5CB743C(v925, v866, v517, v516);
    v536 = v535;
    v537 = *(_QWORD *)v925;
    if ((*(_WORD *)(v866 + 26) & 0x400) != 0)
    {
      v541 = *(void **)(v866 + 64);
      v945[0] = v541;
      if (v541)
        llvm::MetadataTracking::track((uint64_t)v945, (unsigned __int8 *)v541, 2);
      LODWORD(v945[1]) = *(_DWORD *)(v866 + 60);
      v539 = sub_1C5D5DBA0(v537, (uint64_t)v534, v536, (uint64_t)v945, *(_QWORD *)(*(_QWORD *)(v866 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v866 + 32) + 48), *(_QWORD *)(*(_QWORD *)(v866 + 32) + 80), *(_QWORD *)(*(_QWORD *)(v866 + 32) + 88), *(_QWORD *)(v866 + 80), *(_QWORD *)(v866 + 88), *(_QWORD *)(v866 + 96));
    }
    else
    {
      v538 = *(void **)(v866 + 64);
      v945[0] = v538;
      if (v538)
        llvm::MetadataTracking::track((uint64_t)v945, (unsigned __int8 *)v538, 2);
      LODWORD(v945[1]) = *(_DWORD *)(v866 + 60);
      v539 = sub_1C5D5D774(v537, (uint64_t)v534, v536, (uint64_t)v945, *(_QWORD *)(*(_QWORD *)(v866 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v866 + 32) + 48), *(_QWORD *)(*(_QWORD *)(v866 + 32) + 80), *(_QWORD *)(*(_QWORD *)(v866 + 32) + 88), *(_QWORD *)(v866 + 96));
    }
    v542 = v539;
    v543 = v540;
    if (v945[0])
      llvm::MetadataTracking::untrack((uint64_t)v945, (unsigned __int8 *)v945[0]);
    v544 = DWORD2(v971);
    if (DWORD2(v971) >= HIDWORD(v971))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v971, (uint64_t)&v972, DWORD2(v971) + 1, 16);
      v544 = DWORD2(v971);
    }
    v545 = (_QWORD *)(v971 + 16 * v544);
    *v545 = v542;
    v545[1] = v543;
    v546 = (_DWORD *)v971;
    v30 = __CFADD__(DWORD2(v971), 1);
    v547 = ++DWORD2(v971);
    if (v30)
    {
      if (v547 >= HIDWORD(v971))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v971, (uint64_t)&v972, v547 + 1, 16);
        v546 = (_DWORD *)v971;
        v548 = DWORD2(v971);
      }
      else
      {
        v548 = 0;
      }
      v549 = (uint64_t **)&v546[4 * v548];
      *v549 = v517;
      v549[1] = v516;
      ++DWORD2(v971);
    }
    else
    {
      v550 = 0;
      while (1)
      {
        v551 = *(_QWORD *)(*(_QWORD *)(v971 + v550) + 32);
        if (*(uint64_t **)v551 == v517 && *(_DWORD *)(v551 + 8) == (_DWORD)v516)
          break;
        v550 += 16;
        if (16 * v547 == v550)
        {
          if (v547 >= HIDWORD(v971))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v971, (uint64_t)&v972, v547 + 1, 16);
            v546 = (_DWORD *)v971;
            v547 = DWORD2(v971);
          }
          *(_OWORD *)&v546[4 * v547] = *(_OWORD *)&v546[4 * v547 - 4];
          v552 = DWORD2(v971);
          v553 = v971 + 16 * DWORD2(v971);
          if ((_DWORD *)(v553 - 16) != v546)
          {
            memmove(v546 + 4, v546, v553 - 16 - (_QWORD)v546 - 4);
            v552 = DWORD2(v971);
          }
          DWORD2(v971) = v552 + 1;
          *(_QWORD *)v546 = v517;
          v546[2] = (_DWORD)v516;
          break;
        }
      }
    }
    v4 = v925;
    v554 = *(_QWORD *)v925;
    v555 = *(void **)(v487 + 64);
    v945[0] = v555;
    if (v555)
      llvm::MetadataTracking::track((uint64_t)v945, (unsigned __int8 *)v555, 2);
    LODWORD(v945[1]) = *(_DWORD *)(v487 + 60);
    v556 = sub_1C5D63E30(v554, (const llvm::APInt *)v945, (uint64_t)&v971);
    v558 = v557;
    v3 = v866;
    if (v945[0])
      llvm::MetadataTracking::untrack((uint64_t)v945, (unsigned __int8 *)v945[0]);
    v945[0] = v556;
    v945[1] = v558;
    sub_1C5C5B0B4((uint64_t *)v925, v866, (uint64_t *)v945, 1, 1);
    sub_1C5C5B004(v925, (uint64_t)v556);
    v559 = *((unsigned __int16 *)v556 + 28);
    if (*((_WORD *)v556 + 28))
    {
      v560 = (uint64_t *)v556[4];
      v561 = 40 * v559;
      do
      {
        v562 = *v560;
        v560 += 5;
        sub_1C5C5B004(v925, v562);
        v561 -= 40;
      }
      while (v561);
    }
    sub_1C5C5B004(v925, v487);
    if ((uint64_t *)v971 != &v972)
      free((void *)v971);
    v61 = 1;
  }
  else
  {
    v61 = 0;
    v4 = v925;
  }
LABEL_105:
  v62 = v959;
  if ((_DWORD)v959)
  {
    *(_QWORD *)&v971 = &v972;
    *((_QWORD *)&v971 + 1) = 0x400000000;
    v945[0] = &v946;
    v945[1] = (void *)0x400000000;
    LODWORD(v63) = HIDWORD(v959);
    if (HIDWORD(v959))
    {
      LODWORD(v63) = 0;
      v64 = 0;
      do
      {
        v65 = __dst[v64 + 1];
        if (v63 >= HIDWORD(v971))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v971, (uint64_t)&v972, v63 + 1, 8);
          LODWORD(v63) = DWORD2(v971);
        }
        *(_QWORD *)(v971 + 8 * v63) = v65;
        LODWORD(v63) = ++DWORD2(v971);
        ++v64;
      }
      while (v64 != HIDWORD(v959));
      v62 = v959;
    }
    v80 = v62 - 1;
    if (v62 != 1)
    {
      v909 = v7;
      do
      {
        v81 = DWORD2(v971);
        if (DWORD2(v971))
        {
          v82 = 0;
          v83 = v971;
          v84 = v945[1];
          do
          {
            v85 = 0;
            v86 = 8 * (*(_QWORD *)(v83 + 8 * v82) & 0x3FLL) + 8;
            do
            {
              v87 = *(_QWORD *)((*(_QWORD *)(v971 + 8 * v82) & 0xFFFFFFFFFFFFFFC0) + v85);
              if (v84 >= HIDWORD(v945[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v945, (uint64_t)&v946, v84 + 1, 8);
                v84 = v945[1];
              }
              *((_QWORD *)v945[0] + v84) = v87;
              v84 = ++LODWORD(v945[1]);
              v85 += 8;
            }
            while (v86 != v85);
            v83 = v971;
            v88 = (_QWORD *)(*(_QWORD *)(v971 + 8 * v82) & 0xFFFFFFFFFFFFFFC0);
            v89 = v960;
            *v88 = *(_QWORD *)v960;
            *(_QWORD *)v89 = v88;
            ++v82;
          }
          while (v82 != v81);
        }
        DWORD2(v971) = 0;
        sub_1C50FDE40(&v971, (uint64_t)v945);
        --v80;
      }
      while (v80);
      LODWORD(v63) = DWORD2(v971);
      v4 = v925;
      v7 = v909;
    }
    if ((_DWORD)v63)
    {
      v90 = (uint64_t *)v971;
      v91 = (unint64_t *)v960;
      v92 = *(_QWORD *)v960;
      v63 = v63;
      do
      {
        v93 = *v90++;
        v94 = v93 & 0xFFFFFFFFFFFFFFC0;
        *(_QWORD *)(v93 & 0xFFFFFFFFFFFFFFC0) = v92;
        v92 = v93 & 0xFFFFFFFFFFFFFFC0;
        --v63;
      }
      while (v63);
      *v91 = v94;
    }
    if (v945[0] != &v946)
      free(v945[0]);
    if ((uint64_t *)v971 != &v972)
      free((void *)v971);
  }
  *(_QWORD *)&v961 = 0;
  sub_1C4926AE8((uint64_t)&v961 + 8);
  if (v969[0] != v970)
    free(v969[0]);
  if ((v61 & 1) != 0)
    return (_QWORD *)v3;
  v96 = sub_1C5CB743C(v4, v3, **(uint64_t ***)(v3 + 32), *(uint64_t **)(*(_QWORD *)(v3 + 32) + 8));
  v97 = v95;
  v98 = *(_QWORD *)(v3 + 32);
  if (*(uint64_t **)v98 != v96 || *(_DWORD *)(v98 + 8) != v95)
  {
    v99 = *(unsigned __int8 **)(v3 + 64);
    *(_QWORD *)&v971 = v99;
    if (v99)
    {
      llvm::MetadataTracking::track((uint64_t)&v971, v99, 2);
      v98 = *(_QWORD *)(v3 + 32);
    }
    DWORD2(v971) = *(_DWORD *)(v3 + 60);
    v100 = *(_QWORD *)v4;
    v101 = *(_QWORD *)(v98 + 40);
    v102 = *(_QWORD *)(v98 + 48);
    v103 = *(_QWORD *)(v98 + 80);
    v104 = *(_QWORD *)(v98 + 88);
    if ((*(_BYTE *)(v3 + 27) & 4) != 0)
      v105 = sub_1C5D5DBA0(v100, (uint64_t)v96, v97, (uint64_t)&v971, v101, v102, v103, v104, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), *(_QWORD *)(v3 + 96));
    else
      v105 = sub_1C5D5D774(v100, (uint64_t)v96, v97, (uint64_t)&v971, v101, v102, v103, v104, *(_QWORD *)(v3 + 96));
    v108 = *(uint64_t **)(v3 + 32);
    v109 = *v108;
    v110 = v108[1];
    v111 = *(_QWORD *)(*(_QWORD *)v4 + 832);
    if (v111)
      LOWORD(v111) = *(_WORD *)(v111 + 8);
    v112 = sub_1C5D56C70(*(_QWORD *)v4, 2, (const llvm::APInt *)&v971, (llvm *)1, 0, v109, v110, v107, (uint64_t)v105, v106, v111);
    v114 = v113;
    sub_1C5C5B004(v4, (uint64_t)v112);
    __dst[0] = v112;
    __dst[1] = v114;
    sub_1C5C5B0B4((uint64_t *)v4, v3, (uint64_t *)__dst, 1, 0);
    if ((_QWORD)v971)
      llvm::MetadataTracking::untrack((uint64_t)&v971, (unsigned __int8 *)v971);
    return (_QWORD *)v3;
  }
LABEL_36:
  v25 = *(_QWORD *)(v3 + 32);
  v26 = *(_DWORD *)(v25 + 8);
  *(_QWORD *)&v929 = *(_QWORD *)v25;
  DWORD2(v929) = v26;
  v24 = *(_WORD *)(v3 + 26);
LABEL_37:
  v27 = v928;
  if ((v24 & 0x780) != 0x400)
    goto LABEL_170;
  v28 = (unsigned __int8 *)(*(_QWORD *)(v928 + 40) + 16 * DWORD2(v928));
  v29 = *v28;
  if (!*v28)
  {
    v49 = *((_QWORD *)v28 + 1);
    if ((*(_DWORD *)(v49 + 8) & 0xFE) == 0x12)
      v50 = *(unsigned __int8 *)(**(_QWORD **)(v49 + 16) + 8);
    else
      v50 = *(_DWORD *)(v49 + 8);
    if (v50 != 13)
      goto LABEL_170;
LABEL_84:
    v51 = *(unsigned __int16 *)(v928 + 24);
    v52 = v51 == 35 || v51 == 11;
    if (v52 && (*(_BYTE *)(v928 + 26) & 8) != 0)
      goto LABEL_170;
    if ((v51 - 198) <= 2)
    {
      v53 = *(unsigned int **)(v928 + 32);
      v54 = *(_QWORD *)v53;
      v55 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v53 + 40) + 16 * v53[2]);
      v56 = *v55;
      v57 = *(unsigned __int8 *)(v3 + 80);
      if (v56 == (_DWORD)v57)
      {
        v58 = *((_QWORD *)v55 + 1);
        if (v56 || v58 == *(_QWORD *)(v3 + 88))
        {
          v60 = *(_QWORD *)(v4 + 8);
          if (v56 == 1)
          {
            if (!*(_BYTE *)(v3 + 80))
              goto LABEL_119;
          }
          else if (!v56 || !*(_BYTE *)(v3 + 80) || !*(_QWORD *)(v60 + 8 * v57 + 96))
          {
            goto LABEL_119;
          }
          if ((*(unsigned __int8 *)(v60 + 390 * *(unsigned __int8 *)(v3 + 80) + 4116) | 4) == 4)
          {
            v66 = *(_QWORD *)v4;
            v67 = v929;
            v68 = *(void **)(v3 + 64);
            __dst[0] = v68;
            if (v68)
            {
              llvm::MetadataTracking::track((uint64_t)__dst, (unsigned __int8 *)v68, 2);
              v53 = *(unsigned int **)(v928 + 32);
              v54 = *(_QWORD *)v53;
            }
            LODWORD(__dst[1]) = *(_DWORD *)(v3 + 60);
            v17 = sub_1C5D5D774(v66, v67, SDWORD2(v67), (uint64_t)__dst, v54, *((_QWORD *)v53 + 1), v7, v8, *(_QWORD *)(v3 + 96));
            goto LABEL_117;
          }
        }
      }
    }
LABEL_119:
    v69 = sub_1C6329368((unsigned int *)&v928, v928, a3);
    v971 = *(_OWORD *)(v3 + 80);
    v72 = sub_1C6131328((unsigned __int8 *)&v971, v70, v71);
    LODWORD(__dst[1]) = v69;
    if (v69 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)__dst, 0, 0);
    else
      __dst[0] = 0;
    sub_1C4912E54(__dst, 0, v72);
    sub_1C5C5B004(v4, v928);
    v73 = sub_1C6368540(*(_QWORD *)v4, v928, *((const llvm::APInt **)&v928 + 1), (unsigned int *)__dst);
    if (v73)
    {
      v75 = (uint64_t)v73;
      v76 = v74;
      v77 = *(_QWORD *)v4;
      v78 = v929;
      v79 = *(unsigned __int8 **)(v3 + 64);
      *(_QWORD *)&v971 = v79;
      if (v79)
        llvm::MetadataTracking::track((uint64_t)&v971, v79, 2);
      DWORD2(v971) = *(_DWORD *)(v3 + 60);
      v32 = sub_1C5D5DBA0(v77, v78, SDWORD2(v78), (uint64_t)&v971, v75, v76, v7, v8, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), *(_QWORD *)(v3 + 96));
      if ((_QWORD)v971)
        llvm::MetadataTracking::untrack((uint64_t)&v971, (unsigned __int8 *)v971);
    }
    else
    {
      if (!sub_1C5CA0B3C(v4, v928, *((const llvm::KnownBits **)&v928 + 1), (uint64_t)__dst))
      {
        if (LODWORD(__dst[1]) >= 0x41 && __dst[0])
          MEMORY[0x1CAA32F9C](__dst[0], 0x1000C8000313F17);
        v27 = v928;
        goto LABEL_170;
      }
      if (*(_WORD *)(v3 + 24))
        sub_1C5C5B004(v4, v3);
      v32 = (_QWORD *)v3;
    }
    if (LODWORD(__dst[1]) >= 0x41 && __dst[0])
      MEMORY[0x1CAA32F9C](__dst[0], 0x1000C8000313F17);
    return v32;
  }
  v30 = (v29 - 120) >= 0x20 && (v29 - 2) >= 6;
  if (!v30 || (v29 - 15) < 0x3C)
    goto LABEL_84;
LABEL_170:
  if (v27)
  {
    if (*(_WORD *)(v27 + 24) == 253)
    {
      v115 = *(_QWORD *)(v27 + 32);
      if (*(_QWORD *)(v115 + 40) == v7
        && *(_DWORD *)(v115 + 48) == (_DWORD)v8
        && *(unsigned __int8 *)(v3 + 80) == *(unsigned __int8 *)(v27 + 80)
        && (*(_BYTE *)(v3 + 80) || *(_QWORD *)(v3 + 88) == *(_QWORD *)(v27 + 88)))
      {
        v116 = *(_WORD *)(v3 + 26);
        if ((v116 & 0x380) == 0)
        {
          v117 = *(_QWORD *)(v3 + 96);
          if (!(*(_WORD *)(v117 + 36) & 0xF00 | v116 & 8)
            && *(_DWORD *)(*(_QWORD *)(v27 + 96) + 16) == *(_DWORD *)(v117 + 16)
            && sub_1C5D62468((uint64_t *)&v929, v27, 1u, 2))
          {
            return (_QWORD *)v929;
          }
        }
      }
    }
  }
  v32 = (_QWORD *)v929;
  if ((_QWORD)v929)
  {
    if (*(_WORD *)(v929 + 24) == 254)
    {
      v118 = *(_WORD *)(v3 + 26);
      if ((v118 & 0x380) == 0)
      {
        v119 = *(_QWORD *)(v3 + 96);
        if (!(*(_WORD *)(v119 + 36) & 0xF00 | v118 & 8))
        {
          v120 = *(_WORD *)(v929 + 26);
          if ((v120 & 0x380) == 0)
          {
            v121 = *(_QWORD *)(v929 + 96);
            if (!(*(_WORD *)(v121 + 36) & 0xF00 | v120 & 8))
            {
              if (*(_DWORD *)(v4 + 28))
              {
                v440 = *(_QWORD *)(v929 + 32);
                v441 = *(_QWORD *)(v440 + 80);
                if (v441 == v7
                  && *(_DWORD *)(v440 + 88) == (_DWORD)v8
                  && *(_QWORD *)(v440 + 40) == (_QWORD)v928
                  && *(_DWORD *)(v440 + 48) == DWORD2(v928)
                  && *(unsigned __int8 *)(v3 + 80) == *(unsigned __int8 *)(v929 + 80)
                  && (*(_BYTE *)(v3 + 80) || *(_QWORD *)(v3 + 88) == *(_QWORD *)(v929 + 88))
                  && *(_DWORD *)(v119 + 16) == *(_DWORD *)(v121 + 16))
                {
                  return v32;
                }
                v442 = *(_QWORD *)(v929 + 48);
                if (v442)
                {
                  if (!*(_QWORD *)(v442 + 32) && *(_WORD *)(v441 + 24) != 51)
                  {
                    if (*(_BYTE *)(v3 + 80))
                    {
                      if (*(unsigned __int8 *)(v3 + 80) - 120 >= 0x33)
                      {
LABEL_841:
                        if (*(_BYTE *)(v929 + 80))
                        {
                          if (*(unsigned __int8 *)(v929 + 80) - 120 >= 0x33)
                            goto LABEL_876;
                        }
                        else if (*(_BYTE *)(*(_QWORD *)(v929 + 88) + 8) != 19)
                        {
LABEL_876:
                          if (*(_DWORD *)(v119 + 16) == *(_DWORD *)(v121 + 16))
                          {
                            sub_1C5D657F8(v3, *(_QWORD *)v4, (uint64_t)__dst);
                            sub_1C5D657F8((uint64_t)v32, *(_QWORD *)v4, (uint64_t)&v971);
                            v961 = *(_OWORD *)(v3 + 80);
                            if ((_BYTE)v961)
                              v563 = sub_1C47A8C74((unsigned __int8 *)&v961);
                            else
                              v563 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v961);
                            v591 = v563;
                            v961 = *((_OWORD *)v32 + 5);
                            if ((_BYTE)v961)
                              v592 = sub_1C47A8C74((unsigned __int8 *)&v961);
                            else
                              v592 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v961);
                            v593 = v592;
                            v594 = *(_QWORD *)v925;
                            *(_QWORD *)&v961 = 0;
                            if (sub_1C5D653D4((uint64_t *)__dst, (uint64_t *)&v971, v594, &v961)
                              && (v961 & 0x8000000000000000) == 0
                              && v593 + 8 * (uint64_t)v961 <= v591)
                            {
                              v961 = *(_OWORD *)v32[4];
                              sub_1C5C5B0B4((uint64_t *)v925, (uint64_t)v32, (uint64_t *)&v961, 1, 1);
                              return 0;
                            }
                            v4 = v925;
                          }
                        }
                      }
                    }
                    else if (*(_BYTE *)(*(_QWORD *)(v3 + 88) + 8) != 19)
                    {
                      goto LABEL_841;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v122 = *(unsigned __int16 *)(v928 + 24);
  if (v122 == 212 || v122 == 201)
  {
    v123 = *(_QWORD *)(v928 + 48);
    if (v123)
    {
      if (!*(_QWORD *)(v123 + 32) && (*(_WORD *)(v3 + 26) & 0x380) == 0)
      {
        v124 = (_QWORD *)(*(_QWORD *)(**(_QWORD **)(v928 + 32) + 40)
                        + 16 * *(unsigned int *)(*(_QWORD *)(v928 + 32) + 8));
        if ((*(unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v4 + 8)
                                                                                            + 544))(*(_QWORD *)(v4 + 8), *v124, v124[1], *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), *(unsigned __int8 *)(v4 + 33)))
        {
          v125 = *(_QWORD *)v4;
          v126 = v929;
          v127 = *(void **)(v3 + 64);
          __dst[0] = v127;
          if (v127)
            llvm::MetadataTracking::track((uint64_t)__dst, (unsigned __int8 *)v127, 2);
          LODWORD(__dst[1]) = *(_DWORD *)(v3 + 60);
          v17 = sub_1C5D5DBA0(v125, v126, SDWORD2(v126), (uint64_t)__dst, **(_QWORD **)(v928 + 32), *(_QWORD *)(*(_QWORD *)(v928 + 32) + 8), v7, v8, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), *(_QWORD *)(v3 + 96));
          goto LABEL_117;
        }
      }
    }
  }
  if (!*(_BYTE *)(v4 + 34)
    || (*(unsigned int (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v4 + 8) + 200))(*(_QWORD *)(v4 + 8), *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88)))
  {
    v128 = &v972;
    v32 = &unk_1ED823000;
    while (1)
    {
      if (*(_DWORD *)(v4 + 28))
        v129 = *((_BYTE *)v32 + 3640) == 0;
      else
        v129 = 1;
      if (v129)
        goto LABEL_655;
      v130 = *(_OWORD *)(v3 + 80);
      v937 = v130;
      if (!(_BYTE)v130 || (v130 - 120) < 0x33u)
        goto LABEL_655;
      v132 = sub_1C47A8C74((unsigned __int8 *)&v937);
      if ((_DWORD)v131 == 1)
      if (2 * v132 > (unint64_t)*(unsigned int *)(v4 + 1448))
        goto LABEL_655;
      v134 = sub_1C47C1C70((unsigned __int8 *)&v937);
      if ((_DWORD)v133 == 1)
      if ((_BYTE)v937)
        v135 = sub_1C47A8C74((unsigned __int8 *)&v937);
      else
        v135 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v937);
      v137 = v135;
      if ((_DWORD)v136 == 1)
      if (8 * v134 != v137)
        goto LABEL_655;
      for (i = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 40); ; i = **(_QWORD **)(i + 32))
      {
        v139 = *(unsigned __int16 *)(i + 24);
        if (v139 != 216)
          break;
      }
      if (*(unsigned __int16 *)(i + 24) > 0x96u)
        break;
      if ((v139 - 11) >= 2)
      {
        if (v139 != 148)
          goto LABEL_655;
LABEL_228:
        v140 = 0;
        v141 = 2;
        goto LABEL_230;
      }
      v140 = 0;
      v141 = 1;
LABEL_230:
      *(_QWORD *)&v971 = v128;
      *((_QWORD *)&v971 + 1) = 0x800000000;
      v936 = 0;
      *(_QWORD *)&v944 = v3;
      sub_1C5D657F8(v3, *(_QWORD *)v4, (uint64_t)&v961);
      if ((_QWORD)v961 && *(_WORD *)(v961 + 24) != 51)
      {
        v880 = v141;
        v142 = v134;
        v143 = v944;
        v144 = *(_QWORD *)(v944 + 32);
        v146 = *(_QWORD *)(v144 + 40);
        for (j = *(_QWORD *)(v144 + 48); ; j = j & 0xFFFFFFFF00000000 | *(unsigned int *)(v148 + 8))
        {
          v147 = *(unsigned __int16 *)(v146 + 24);
          if (v147 != 216)
            break;
          v148 = *(_QWORD *)(v146 + 32);
          v146 = *(_QWORD *)v148;
        }
        *(_QWORD *)&v934 = v146;
        *((_QWORD *)&v934 + 1) = j;
        if (v147 <= 150)
        {
          if ((v147 - 11) < 2)
          {
            v149 = 0;
            v150 = 1;
            goto LABEL_244;
          }
          if (v147 == 148)
          {
LABEL_242:
            v149 = 0;
            v150 = 2;
            goto LABEL_244;
          }
LABEL_240:
          v149 = 0;
          v150 = 0;
          goto LABEL_244;
        }
        if (v147 != 253)
        {
          if (v147 == 151)
            goto LABEL_242;
          goto LABEL_240;
        }
        v150 = 3;
        v149 = 1;
LABEL_244:
        LODWORD(v938) = v150;
        v932 = *(_OWORD *)(v944 + 80);
        v945[0] = 0;
        LODWORD(v945[1]) = 0;
        *(_QWORD *)&v946 = 0;
        DWORD2(v946) = 0;
        LOBYTE(v947) = 0;
        BYTE8(v947) = 0;
        LOBYTE(v948) = 0;
        LOBYTE(v930) = 0;
        *((_QWORD *)&v930 + 1) = 0;
        if (v149)
        {
          sub_1C5D657F8(v146, *(_QWORD *)v4, (uint64_t)__dst);
          *(_OWORD *)v945 = *(_OWORD *)__dst;
          v946 = v951;
          v947 = v952;
          LOBYTE(v948) = v953;
          v151 = *(_QWORD *)(v146 + 88);
          *(_QWORD *)&v930 = *(_QWORD *)(v146 + 80);
          *((_QWORD *)&v930 + 1) = v151;
          if (v932 == v930 && ((_BYTE)v932 || *((_QWORD *)&v932 + 1) == v151))
          {
            v152 = *(_QWORD *)(v146 + 48);
            if (v152)
            {
              v153 = 1;
              do
              {
                if (!*(_DWORD *)(v152 + 8))
                {
                  if (!v153)
                    goto LABEL_281;
                  --v153;
                }
                v152 = *(_QWORD *)(v152 + 32);
              }
              while (v152);
              if (!v153
                && (*(_WORD *)(*(_QWORD *)(v146 + 96) + 36) & 0xF00) == 0
                && (*(_BYTE *)(v146 + 26) & 8) == 0
                && (*(_WORD *)(v146 + 26) & 0x380) == 0)
              {
                v143 = v944;
                goto LABEL_259;
              }
            }
          }
        }
        else
        {
LABEL_259:
          v154 = v128;
          __dst[0] = &v944;
          __dst[1] = &v932;
          *(_QWORD *)&v951 = &v938;
          *((_QWORD *)&v951 + 1) = v4;
          *(_QWORD *)&v952 = &v930;
          *((_QWORD *)&v952 + 1) = &v934;
          *(_QWORD *)&v953 = v945;
          *((_QWORD *)&v953 + 1) = &v961;
          v941 = (unsigned __int8 *)v4;
          v969[0] = __dst;
          v969[1] = &v941;
          v970[0] = &v936;
          v970[1] = &v971;
          v155 = **(_QWORD **)(v143 + 32);
          v936 = v155;
          if (v155 && *(_WORD *)(v155 + 24) == 253)
          {
            v936 = **(_QWORD **)(v155 + 32);
            v156 = *(_QWORD *)(v936 + 48);
            if (v156)
            {
              v157 = 0;
              do
              {
                v158 = *(_QWORD *)(v156 + 16);
                v159 = 0xCCCCCCCCCCCCCCCDLL * ((v156 - *(_QWORD *)(v158 + 32)) >> 3);
                if (!(_DWORD)v159 && *(_WORD *)(v158 + 24) == 253)
                {
                  v160 = *(_QWORD *)(v158 + 48);
                  if (v160)
                  {
                    do
                    {
                      sub_1C5CBC044((uint64_t)v969, v160);
                      v160 = *(_QWORD *)(v160 + 32);
                    }
                    while (v160);
                    v158 = *(_QWORD *)(v156 + 16);
                    v159 = 0xCCCCCCCCCCCCCCCDLL * ((v156 - *(_QWORD *)(v158 + 32)) >> 3);
                  }
                }
                if (!(_DWORD)v159 && *(_WORD *)(v158 + 24) == 254)
                  sub_1C5CBC044((uint64_t)v969, v156);
                v156 = *(_QWORD *)(v156 + 32);
                if (!v156)
                  break;
                v30 = v157++ >= 0x3FF;
              }
              while (!v30);
            }
          }
          else
          {
            v161 = *(_QWORD *)(v155 + 48);
            if (v161)
            {
              v162 = 0;
              do
              {
                sub_1C5CBC044((uint64_t)v969, v161);
                v161 = *(_QWORD *)(v161 + 32);
                if (!v161)
                  break;
                v30 = v162++ >= 0x3FF;
              }
              while (!v30);
            }
          }
          v128 = v154;
          v32 = (_QWORD *)&unk_1ED823000;
        }
LABEL_281:
        v134 = v142;
        v141 = v880;
      }
      if (DWORD2(v971) < 2
        || ((sub_1C5CBC3E8(v971, (_QWORD *)(v971 + 16 * DWORD2(v971)), 126 - 2 * __clz(DWORD2(v971)), 1),
             (v165 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)v4 + 40) + 112)) == 0)
          ? (__src = 0)
          : (__src = (*(unsigned __int8 *)(v165 + 15) >> 2) & 1),
            !v140 ? (v166 = 0) : (v166 = (*(unsigned __int8 *)(i + 26) >> 4) & 1),
            LODWORD(v167) = DWORD2(v971),
            DWORD2(v971) < 2))
      {
        LOBYTE(v168) = 0;
        goto LABEL_650;
      }
      v876 = v166;
      v168 = 0;
      v883 = __src ^ 1;
      v874 = (*(unsigned __int8 *)(v3 + 26) >> 1) & 8;
      do
      {
        v169 = (char *)v971;
        LODWORD(v170) = v167;
        while (1)
        {
          v171 = 0;
          v172 = v170 <= 1uLL ? 1 : v170;
          v173 = 16 * v172 - 16;
          do
          {
            if (v173 == v171)
              goto LABEL_650;
            v174 = *(_QWORD *)&v169[v171 + 8] + v134;
            v175 = *(_QWORD *)&v169[v171 + 24];
            v171 += 16;
          }
          while (v174 != v175);
          if (v171 != 16)
          {
            v176 = 16 * v170 - v171 + 16;
            v177 = v169;
            if (16 * v170 + 16 != v171)
            {
              memmove(v169, &v169[v171 - 16], v176);
              v177 = (char *)v971;
            }
            v170 = (unint64_t)(&v169[v176] - v177) >> 4;
            DWORD2(v971) = v170;
            v169 = v177;
          }
          v178 = 0;
          v179 = 0;
          v180 = v170 <= 1 ? (char *)1 : (char *)v170;
          v181 = 24;
          while (v180 - 1 != v179)
          {
            v182 = *(_QWORD *)&v169[v181] - *((_QWORD *)v169 + 1);
            ++v179;
            v181 += 16;
            v178 += v134;
            if (v178 != v182)
            {
              LODWORD(v180) = (_DWORD)v179;
              break;
            }
          }
          if (v180 > 1)
            break;
          v183 = 16 * v170 - 16;
          v184 = v169;
          if ((_DWORD)v170 != 1)
          {
            memmove(v169, v169 + 16, 16 * v170 - 16);
            v184 = (char *)v971;
          }
          v170 = (unint64_t)(&v169[v183] - v184) >> 4;
          DWORD2(v971) = v170;
          v169 = v184;
        }
        v863 = v168;
        v854 = v134;
        v881 = v141;
        if (v141 != 3)
        {
          v852 = v128;
          if (v141 == 2)
          {
            v918 = v936;
            *(_OWORD *)__dst = v937;
            v909 = *(_QWORD *)(*(_QWORD *)v4 + 56);
            v185 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)v4 + 40) + 40);
            if ((_BYTE)v937)
            {
              if (v937 - 15 >= 0x9C)
                goto LABEL_317;
LABEL_639:
              v186 = sub_1C612FE00((llvm::EVT *)__dst, v163);
              v169 = (char *)v971;
            }
            else
            {
              if ((*(_DWORD *)(*((_QWORD *)&v937 + 1) + 8) & 0xFE) == 0x12)
                goto LABEL_639;
LABEL_317:
              v186 = 1;
            }
            v855 = 0;
            v902 = v185 + 272;
            while (2)
            {
              v187 = v180;
              v188 = v3;
              v189 = 0;
              v190 = v187;
              v191 = *(_QWORD *)v169;
              v192 = *(_QWORD *)(*(_QWORD *)v169 + 96);
              v193 = *(unsigned int *)(v192 + 16);
              LODWORD(v194) = 1;
              v195 = (1 << *(_BYTE *)(v192 + 34)) | *(_QWORD *)(v192 + 8);
              v196 = 1 << (63 - __clz(v195 & -v195));
              v197 = v186;
              do
              {
                v198 = *(llvm::LLVMContext **)(*(_QWORD *)v925 + 56);
                v199 = sub_1C6131264((unsigned __int8 *)__dst, (uint64_t)v163, v164);
                *(_QWORD *)&v961 = sub_1C4816F98(v198, v199, v200, v197, 0);
                *((_QWORD *)&v961 + 1) = v201;
                LOBYTE(v945[0]) = 0;
                if ((_BYTE)v961)
                  v202 = sub_1C47A8C74((unsigned __int8 *)&v961);
                else
                  v202 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v961);
                v203 = v202;
                if ((_DWORD)v163 == 1)
                if (v203 > *(unsigned int *)(v925 + 1448))
                  break;
                ++v189;
                v164 = v961;
                if ((_BYTE)v961)
                {
                  v204 = *(_QWORD *)(v925 + 8);
                  if (*(_QWORD *)(v204 + 8 * v961 + 96))
                  {
                    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v204 + 208))(v204, v193))
                    {
                      v205 = llvm::TargetLoweringBase::allowsMemoryAccess(*(_QWORD *)(v925 + 8), v909, v902, v961, *((uint64_t *)&v961 + 1), *(_QWORD *)(v191 + 96), (uint64_t)v945);
                      if ((v205 & (LOBYTE(v945[0]) != 0)) != 0)
                        LODWORD(v194) = v189;
                    }
                  }
                }
                v197 += v186;
              }
              while ((_DWORD)v190 != v189);
              if (v194 > 1)
              {
                v32 = (_QWORD *)&unk_1ED823000;
                if (sub_1C5CBCE54(v925, (uint64_t **)&v971, v194, v918))
                  v855 |= sub_1C5CBD138((uint64_t *)v925, (uint64_t **)&v971, (llvm *)__dst[0], (uint64_t)__dst[1], v194, 0, 1, 0);
                v207 = (void *)v971;
                v163 = (const char *)(v971 + 16 * v194);
                v211 = 16 * DWORD2(v971) - 16 * v194;
                v3 = v188;
                if (DWORD2(v971) != (_DWORD)v194)
                  goto LABEL_345;
              }
              else
              {
                v206 = v196;
                v207 = (void *)v971;
                v208 = 16;
                v194 = 1;
                v3 = v188;
                v32 = (_QWORD *)&unk_1ED823000;
                while (1)
                {
                  v209 = (1 << *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v971 + v208) + 96) + 34)) | *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v971 + v208) + 96) + 8);
                  if (!(v206 >> (63 - __clz(v209 & -v209))))
                    break;
                  ++v194;
                  v208 += 16;
                  if (v190 == v194)
                  {
                    v210 = v190;
                    LODWORD(v194) = v190;
                    goto LABEL_344;
                  }
                }
                v210 = v194;
LABEL_344:
                v163 = (const char *)(v971 + 16 * v210);
                v211 = 16 * DWORD2(v971) - 16 * v210;
                if (DWORD2(v971) != (_DWORD)v194)
                {
LABEL_345:
                  memmove(v207, v163, v211);
                  v169 = (char *)v971;
LABEL_346:
                  v167 = (unint64_t)((_BYTE *)v207 + v211 - v169) >> 4;
                  DWORD2(v971) = v167;
                  LODWORD(v180) = v190 - v194;
                  if ((v190 - v194) <= 1)
                  {
                    v4 = v925;
                    v128 = v852;
                    v134 = v854;
                    v141 = v881;
                    v212 = v863;
                    goto LABEL_636;
                  }
                  continue;
                }
              }
              break;
            }
            v169 = (char *)v207;
            goto LABEL_346;
          }
          v849 = v936;
          v961 = v937;
          v221 = *(_QWORD *)(*(_QWORD *)v4 + 56);
          v222 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)v4 + 40) + 40);
          v224 = sub_1C47C1C70((unsigned __int8 *)&v961);
          if ((_DWORD)v223 == 1)
          v909 = v221;
          if ((_BYTE)v961)
          {
            if (v961 - 15 >= 0x9C)
              goto LABEL_369;
LABEL_643:
            v904 = sub_1C612FE00((llvm::EVT *)&v961, v223);
          }
          else
          {
            if ((*(_DWORD *)(*((_QWORD *)&v961 + 1) + 8) & 0xFE) == 0x12)
              goto LABEL_643;
LABEL_369:
            v904 = 1;
          }
          v855 = 0;
          v846 = v222 + 272;
          v897 = 8 * v224;
          v225 = (_BYTE *)v971;
          v864 = v3;
          while (2)
          {
            v226 = v180;
            v227 = 0;
            v228 = 0;
            v860 = 0;
            v229 = 0;
            v230 = v226;
            v859 = *(_QWORD *)v225;
            v231 = *(_QWORD *)(*(_QWORD *)v225 + 96);
            __n = *(_DWORD *)(v231 + 16);
            v232 = (1 << *(_BYTE *)(v231 + 34)) | *(_QWORD *)(v231 + 8);
            v870 = 1;
            v857 = (llvm::LLVMContext *)(1 << (63 - __clz(v232 & -v232)));
            v233 = (llvm::LLVMContext *)v897;
            v234 = v904;
            v867 = 1;
            v878 = v226;
            v235 = v226;
            v893 = v226;
LABEL_372:
            isNullValue = 0;
            v237 = *(_QWORD *)(*(_QWORD *)(v971 + v227) + 32);
            v238 = *(_QWORD *)(v237 + 40);
            v919 = *(unsigned int *)(v237 + 48);
            v239 = *(unsigned __int16 *)(v238 + 24);
            if (v239 > 0x22)
            {
              if (v239 == 36)
                goto LABEL_380;
              if (v239 != 35)
                goto LABEL_385;
            }
            else if (v239 != 11)
            {
              if (v239 != 12)
                goto LABEL_385;
LABEL_380:
              isNullValue = llvm::Constant::isNullValue(*(llvm::Constant **)(v238 + 80));
              goto LABEL_385;
            }
            v240 = *(_QWORD *)(v238 + 80);
            v241 = (llvm::APInt *)(v240 + 24);
            v242 = *(_DWORD *)(v240 + 32);
            if (v242 > 0x40)
              v243 = llvm::APInt::countLeadingZerosSlowCase(v241) == v242;
            else
              v243 = *(_QWORD *)v241 == 0;
            isNullValue = v243;
LABEL_385:
            if (((v235 == (_DWORD)v230) & isNullValue & v229) != 0)
              v235 = v228;
            if ((int)v233 > 63)
            {
              if ((_DWORD)v233 == 64)
              {
                v244 = 6;
                goto LABEL_396;
              }
              if ((_DWORD)v233 != 128)
                goto LABEL_437;
              v244 = 7;
LABEL_396:
              v945[0] = (void *)v244;
              v945[1] = 0;
              LOBYTE(v969[0]) = 0;
            }
            else
            {
              switch((_DWORD)v233)
              {
                case 0x20:
                  v244 = 5;
                  goto LABEL_396;
                case 0x10:
                  v244 = 4;
                  goto LABEL_396;
                case 8:
                  v244 = 3;
                  goto LABEL_396;
              }
LABEL_437:
              v945[0] = (void *)llvm::EVT::getExtendedIntegerVT((llvm::EVT *)v909, v233);
              v945[1] = v266;
              LOBYTE(v969[0]) = 0;
              if (!LOBYTE(v945[0]))
              {
                v245 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v945);
LABEL_398:
                v247 = v245;
                if ((_DWORD)v246 == 1)
                if (v247 > *(unsigned int *)(v925 + 1448))
                {
LABEL_439:
                  v267 = v867 > v870;
                  v268 = v267 & v883;
                  if ((v267 & v883) != 0)
                    LODWORD(v269) = v867;
                  else
                    LODWORD(v269) = v870;
                  if (v269 > 1)
                  {
                    v4 = v925;
                    v32 = (_QWORD *)&unk_1ED823000;
                    v212 = v863;
                    v270 = v878;
                    if (sub_1C5CBCE54(v925, (uint64_t **)&v971, v269, v849))
                      v855 |= sub_1C5CBD138((uint64_t *)v925, (uint64_t **)&v971, (llvm *)v961, *((uint64_t *)&v961 + 1), v269, 1, v268 & 1, v860 & (v268 ^ 1) & 1);
                    v271 = (_BYTE *)v971;
                    v163 = (const char *)(v971 + 16 * v269);
                    v275 = 16 * DWORD2(v971) - 16 * v269;
                    v3 = v864;
                    if (DWORD2(v971) != (_DWORD)v269)
                      goto LABEL_458;
LABEL_454:
                    v225 = v271;
                    goto LABEL_459;
                  }
                  v270 = v878;
                  if (v878 >= v235)
                    v269 = v235;
                  else
                    v269 = v878;
                  v271 = (_BYTE *)v971;
                  v4 = v925;
                  v32 = (_QWORD *)&unk_1ED823000;
                  v212 = v863;
                  if (v269 < 2)
                  {
                    LODWORD(v269) = 1;
                    v3 = v864;
                  }
                  else
                  {
                    v272 = v971 + 16;
                    v273 = 1;
                    v3 = v864;
                    while (1)
                    {
                      v274 = (1 << *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v272 + 96) + 34)) | *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v272 + 96) + 8);
                      if (!((unint64_t)v857 >> (63 - __clz(v274 & -v274))))
                        break;
                      ++v273;
                      v272 += 16;
                      if (v269 == v273)
                        goto LABEL_457;
                    }
                    LODWORD(v269) = v273;
                  }
LABEL_457:
                  v163 = (const char *)(v971 + 16 * v269);
                  v275 = 16 * DWORD2(v971) - 16 * v269;
                  if (DWORD2(v971) == (_DWORD)v269)
                    goto LABEL_454;
LABEL_458:
                  memmove(v271, v163, v275);
                  v225 = (_BYTE *)v971;
LABEL_459:
                  v167 = (unint64_t)(&v271[v275] - v225) >> 4;
                  DWORD2(v971) = v167;
                  LODWORD(v180) = v270 - v269;
                  if (v180 <= 1)
                  {
                    v128 = v852;
                    v134 = v854;
                    v141 = v881;
                    goto LABEL_636;
                  }
                  continue;
                }
                ++v228;
                v248 = v945[0];
                v249 = *(_QWORD *)(v925 + 8);
                if (!LOBYTE(v945[0])
                  || !*(_QWORD *)(v249 + 8 * LOBYTE(v945[0]) + 96)
                  || (v250 = (*(uint64_t (**)(unint64_t, _QWORD, void *, void *, _QWORD))(*(_QWORD *)v249 + 208))(v249, __n, v945[0], v945[1], *(_QWORD *)(*(_QWORD *)v925 + 40)), v249 = *(_QWORD *)(v925 + 8), v248 = v945[0], !v250))
                {
LABEL_404:
                  llvm::TargetLoweringBase::getTypeConversion(v249, (llvm::EVT *)v909, (_BOOL8)v248, (uint64_t)v945[1], (uint64_t)__dst);
                  if (LOBYTE(__dst[0]) == 1)
                  {
                    llvm::TargetLoweringBase::getTypeConversion(*(_QWORD *)(v925 + 8), (llvm::EVT *)v909, *(_QWORD *)(*(_QWORD *)(v238 + 40) + 16 * v919), *(_QWORD *)(*(_QWORD *)(v238 + 40) + 16 * v919 + 8), (uint64_t)__dst);
                    v164 = (char)__dst[1];
                    if (LOBYTE(__dst[1]))
                    {
                      v252 = *(_QWORD *)(v925 + 8);
                      v253 = (uint64_t *)v925;
                      v230 = v893;
                      if (*(_QWORD *)(v252 + 8 * LOBYTE(__dst[1]) + 96)
                        && LOBYTE(v945[0])
                        && !*(_BYTE *)(v252 + 179 * LOBYTE(__dst[1]) + LOBYTE(v945[0]) + 137754)
                        && (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v252 + 208))(v252, __n))
                      {
                        v254 = llvm::TargetLoweringBase::allowsMemoryAccess(*(_QWORD *)(v925 + 8), v909, v846, (uint64_t)v945[0], (uint64_t)v945[1], *(_QWORD *)(v859 + 96), (uint64_t)v969);
                        v860 |= v254 & (LOBYTE(v969[0]) != 0);
                        if ((v254 & (LOBYTE(v969[0]) != 0)) != 0)
                          v255 = v228;
                        else
                          v255 = v870;
                        v870 = v255;
                      }
                      goto LABEL_417;
                    }
                    v253 = (uint64_t *)v925;
                  }
                  else
                  {
                    v253 = (uint64_t *)v925;
                  }
                  v230 = v893;
                  goto LABEL_417;
                }
                if (!llvm::TargetLoweringBase::allowsMemoryAccess(v249, v909, v846, (uint64_t)v945[0], (uint64_t)v945[1], *(_QWORD *)(v859 + 96), (uint64_t)v969)|| !LOBYTE(v969[0]))
                {
                  v249 = *(_QWORD *)(v925 + 8);
                  v248 = v945[0];
                  goto LABEL_404;
                }
                v860 = 0;
                v870 = v228;
                v253 = (uint64_t *)v925;
LABEL_417:
                v229 |= isNullValue ^ 1;
                if ((v229 & 1) != 0)
                {
                  if (((*(unsigned int (**)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v253[1]
                                                                                                 + 192))(v253[1], v961, *((_QWORD *)&v961 + 1), v228, __n) & v883 & 1) != 0)
                  {
LABEL_423:
                    v256 = sub_1C6131264((unsigned __int8 *)&v961, v251, v164);
                    v258 = sub_1C4816F98((llvm::LLVMContext *)v909, v256, v257, v234, 0);
                    v260 = v258;
                    if ((_BYTE)v258)
                    {
                      v261 = v258;
                      v262 = v253[1];
                      if (*(_QWORD *)(v262 + 8 * v260 + 96))
                      {
                        if ((_BYTE)v961)
                        {
                          if (*(_QWORD *)(v262 + 8 * v961 + 96))
                          {
                            v263 = v259;
                            if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v262 + 208))(v262, __n, v261, v259, *(_QWORD *)(*v253 + 40)))
                            {
                              v264 = llvm::TargetLoweringBase::allowsMemoryAccess(v253[1], v909, v846, v261, v263, *(_QWORD *)(v859 + 96), (uint64_t)v969);
                              v265 = v867;
                              if ((v264 & (LOBYTE(v969[0]) != 0)) != 0)
                                v265 = v228;
                              v867 = v265;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                else if ((__src & 1) == 0)
                {
                  goto LABEL_423;
                }
                v234 += v904;
                v233 = (llvm::LLVMContext *)(v233 + v897);
                v227 += 16;
                if (v230 == v228)
                  goto LABEL_439;
                goto LABEL_372;
              }
            }
            break;
          }
          v245 = sub_1C47A8C74((unsigned __int8 *)v945);
          goto LABEL_398;
        }
        v944 = v937;
        v892 = v936;
        v896 = *(llvm::EVT **)(*(_QWORD *)v4 + 56);
        v213 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)v4 + 40) + 40);
        v903 = sub_1C47C1C70((unsigned __int8 *)&v944);
        if ((_DWORD)v214 == 1)
        if ((_BYTE)v944)
        {
          if (v944 - 15 < 0x9C)
            goto LABEL_641;
        }
        else if ((*(_DWORD *)(*((_QWORD *)&v944 + 1) + 8) & 0xFE) == 0x12)
        {
LABEL_641:
          v844 = sub_1C612FE00((llvm::EVT *)&v944, v214);
          goto LABEL_353;
        }
        v844 = 1;
LABEL_353:
        v215 = 0;
        __dst[0] = &v951;
        v837 = v213 + 272;
        __dst[1] = (void *)0x800000000;
        *(_QWORD *)&v961 = 0;
        DWORD2(v961) = 0;
        *(_QWORD *)&v962 = 0;
        DWORD2(v962) = 0;
        LOBYTE(v963) = 0;
        BYTE8(v963) = 0;
        v216 = v180;
        LOBYTE(v964) = 0;
        v217 = (int)v180;
        while (1)
        {
          for (k = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v971 + 16 * v215) + 32) + 40);
                *(_WORD *)(k + 24) == 216;
          sub_1C5D657F8(k, *(_QWORD *)v4, (uint64_t)v945);
          v969[0] = 0;
          if (!(_QWORD)v961)
          {
            v180 = 0;
            v961 = *(_OWORD *)v945;
            v962 = v946;
            v963 = v947;
            LOBYTE(v964) = v948;
            goto LABEL_361;
          }
          if (!sub_1C5D653D4((uint64_t *)&v961, (uint64_t *)v945, *(_QWORD *)v4, v969))
            break;
          v180 = (char *)v969[0];
LABEL_361:
          v219 = LODWORD(__dst[1]);
          if (LODWORD(__dst[1]) >= (unint64_t)HIDWORD(__dst[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__dst, (uint64_t)&v951, LODWORD(__dst[1]) + 1, 16);
            v219 = LODWORD(__dst[1]);
          }
          v220 = (char *)__dst[0] + 16 * v219;
          *v220 = k;
          v220[1] = v180;
          LODWORD(v220) = ++LODWORD(__dst[1]);
          ++v215;
          LODWORD(v180) = v217;
          if (v215 == v216)
            goto LABEL_462;
        }
        LODWORD(v220) = __dst[1];
LABEL_462:
        v134 = v854;
        v212 = v863;
        if (v220 < 2)
        {
          v855 = 0;
          goto LABEL_632;
        }
        v855 = 0;
        v858 = 16 * v903;
        __na = 16 * v903 - 16;
        v839 = 8 * v903;
        v845 = __na >> 4;
        v141 = 3;
        v865 = v3;
        v853 = v128;
        while (2)
        {
          v879 = v180;
          v276 = 0;
          v943[0] = 0;
          if ((_DWORD)v220 == 2)
          {
            if ((*(unsigned int (**)(_QWORD, _QWORD, _QWORD, char *))(**(_QWORD **)(v4 + 8) + 1240))(*(_QWORD *)(v4 + 8), v944, *((_QWORD *)&v944 + 1), v943))
            {
              v277 = v971;
              v278 = (1 << *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v277 + 96) + 34)) | *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v277 + 96)
                                                                                                 + 8);
              if (v943[0] <= (63 - __clz(v278 & -v278)))
              {
                v429 = v134;
                v430 = 16 * DWORD2(v971) - 32;
                if (DWORD2(v971) != 2)
                  memmove((void *)v971, (const void *)(v971 + 32), 16 * DWORD2(v971) - 32);
                DWORD2(v971) = (unint64_t)(v277 + v430 - v971) >> 4;
                v431 = __dst[0];
                v432 = 16 * LODWORD(__dst[1]) - 32;
                if (LODWORD(__dst[1]) != 2)
                  memmove(__dst[0], (char *)__dst[0] + 32, 16 * LODWORD(__dst[1]) - 32);
                LODWORD(__dst[1]) = ((unint64_t)v431 + v432 - (unint64_t)__dst[0]) >> 4;
                v134 = v429;
                v212 = v863;
                goto LABEL_633;
              }
            }
            v279 = *((_QWORD *)__dst[0] + 1);
            v280 = *((_QWORD *)__dst[0] + 3);
            if (__na <= 0x7F && ((0x8Bu >> v845) & 1) != 0)
            {
              v281 = 0;
              v282 = qword_1C866B1F8[v845];
            }
            else
            {
              v283 = llvm::EVT::getExtendedIntegerVT(v896, (llvm::LLVMContext *)v858);
              v281 = v284;
              LOBYTE(v282) = v283;
            }
            if (v279 - v280 == v903
              && ((v285 = v282,
                   (sub_1C5CA00A8(*(_QWORD *)(v4 + 8), 0xB2u, v282, v281, *(unsigned __int8 *)(v4 + 33)) & 1) != 0)
               || sub_1C5CA00A8(*(_QWORD *)(v4 + 8), 0xB3u, v285, v281, *(unsigned __int8 *)(v4 + 33))))
            {
              v286 = __dst[0];
              v287 = *(_OWORD *)__dst[0];
              *(_OWORD *)__dst[0] = *((_OWORD *)__dst[0] + 1);
              v286[1] = v287;
              v276 = 1;
            }
            else
            {
              v276 = 0;
            }
          }
          v288 = *(_QWORD *)v971;
          v289 = *(_QWORD *)(*(_QWORD *)v971 + 96);
          v290 = *(_BYTE *)(v289 + 34);
          v291 = *(_QWORD *)(v289 + 8);
          v292 = (char *)__dst[0];
          v293 = *(_QWORD *)__dst[0];
          if (LODWORD(__dst[1]) < 2
            || (v294 = *(uint64_t **)(v293 + 32),
                v295 = *v294,
                v296 = *((_QWORD *)__dst[0] + 2),
                v297 = *(_QWORD *)(v296 + 32),
                *(_QWORD *)v297 != *v294)
            || (v298 = *((_DWORD *)v294 + 2), *(_DWORD *)(v297 + 8) != v298))
          {
            v920 = 0;
            v307 = 1;
            v306 = 1;
            v305 = 1;
            v328 = 1;
            goto LABEL_543;
          }
          v299 = 0;
          v300 = 0;
          v871 = 0;
          v920 = 0;
          v838 = *(_DWORD *)(v289 + 16);
          v301 = *((_QWORD *)__dst[0] + 1);
          v302 = 1;
          v868 = 2 * v844;
          v303 = v858;
          v304 = 1;
          v305 = 1;
          v306 = 1;
          v307 = 1;
          v850 = *(_QWORD *)v971;
          v843 = v276;
          v842 = v295;
          v841 = v298;
          v840 = v301;
          while (2)
          {
            v299 += v903;
            if (v299 != *(_QWORD *)&v292[v300 + 24] - v301)
            {
              v328 = v304;
              goto LABEL_543;
            }
            v847 = v302;
            v308 = v276;
            if ((v305 & 1) != 0)
              v861 = (*(unsigned __int8 *)(v296 + 26) >> 5) & 1;
            else
              LOBYTE(v861) = 0;
            v309 = sub_1C6131264((unsigned __int8 *)&v944, v302, v164);
            v941 = (unsigned __int8 *)sub_1C4816F98(v896, v309, v310, v868, 0);
            v942 = v311;
            if ((_BYTE)v941)
              v312 = sub_1C47A8C74((unsigned __int8 *)&v941);
            else
              v312 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v941);
            v314 = v312;
            v276 = v308;
            v305 = v861;
            if ((_DWORD)v313 == 1)
            {
              v305 = v861;
              v276 = v308;
            }
            if (v314 > *(unsigned int *)(v925 + 1448))
            {
              v328 = (_DWORD)v871 + 1;
              v288 = v850;
              goto LABEL_543;
            }
            LOBYTE(v938) = 0;
            v940 = 0;
            if ((v276 & 1) == 0)
            {
              if ((_BYTE)v941)
              {
                v315 = *(_QWORD *)(v925 + 8);
                if (*(_QWORD *)(v315 + 8 * v941 + 96))
                {
                  if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v315 + 208))(v315, v838))
                  {
                    if (llvm::TargetLoweringBase::allowsMemoryAccess(*(_QWORD *)(v925 + 8), (uint64_t)v896, v837, (uint64_t)v941, v942, *(_QWORD *)(v850 + 96), (uint64_t)&v938))
                    {
                      if ((_BYTE)v938)
                      {
                        v331 = llvm::TargetLoweringBase::allowsMemoryAccess(*(_QWORD *)(v925 + 8), (uint64_t)v896, v837, (uint64_t)v941, v942, *(_QWORD *)(v293 + 96), (uint64_t)&v940);
                        if ((v331 & (v940 != 0)) != 0)
                          v306 = (_DWORD)v871 + 2;
                      }
                    }
                  }
                }
              }
            }
            if ((int)v303 > 63)
            {
              if ((_DWORD)v303 == 64)
              {
                v316 = 0;
                v317 = 0;
                v318 = 6;
                goto LABEL_503;
              }
              if ((_DWORD)v303 == 128)
              {
                v316 = 0;
                v317 = 0;
                v318 = 7;
                goto LABEL_503;
              }
LABEL_537:
              v332 = llvm::EVT::getExtendedIntegerVT(v896, (llvm::LLVMContext *)v303);
              v317 = v333;
              v316 = v332 & 0xFFFFFFFFFFFFFF00;
              v318 = v332;
              goto LABEL_503;
            }
            if ((_DWORD)v303 != 32)
            {
              if ((_DWORD)v303 == 16)
              {
                v316 = 0;
                v317 = 0;
                v318 = 4;
                goto LABEL_503;
              }
              if ((_DWORD)v303 == 8)
              {
                v316 = 0;
                v317 = 0;
                v318 = 3;
                goto LABEL_503;
              }
              goto LABEL_537;
            }
            v316 = 0;
            v317 = 0;
            v318 = 5;
LABEL_503:
            v319 = (unsigned __int8 *)(v318 | v316);
            v941 = (unsigned __int8 *)(v318 | v316);
            v942 = v317;
            v320 = *(_QWORD *)(v925 + 8);
            if (v318)
            {
              if (*(_QWORD *)(v320 + 8 * v318 + 96))
              {
                v321 = (*(uint64_t (**)(unint64_t, _QWORD, unsigned __int8 *, uint64_t, _QWORD))(*(_QWORD *)v320 + 208))(v320, v838, v319, v317, *(_QWORD *)(*(_QWORD *)v925 + 40));
                v320 = *(_QWORD *)(v925 + 8);
                v319 = v941;
                v317 = v942;
                if (v321)
                {
                  v330 = llvm::TargetLoweringBase::allowsMemoryAccess(v320, (uint64_t)v896, v837, (uint64_t)v941, v942, *(_QWORD *)(v850 + 96), (uint64_t)&v938);
                  v320 = *(_QWORD *)(v925 + 8);
                  v319 = v941;
                  v317 = v942;
                  if (v330)
                  {
                    if ((_BYTE)v938)
                    {
                      if (llvm::TargetLoweringBase::allowsMemoryAccess(v320, (uint64_t)v896, v837, (uint64_t)v941, v942, *(_QWORD *)(v293 + 96), (uint64_t)&v940)&& v940)
                      {
                        v920 = 0;
                        v327 = (unint64_t)v871 + 2;
                        v307 = (_DWORD)v871 + 2;
                        goto LABEL_529;
                      }
                      v320 = *(_QWORD *)(v925 + 8);
                      v319 = v941;
                      v317 = v942;
                    }
                  }
                }
              }
            }
            llvm::TargetLoweringBase::getTypeConversion(v320, v896, (_BOOL8)v319, v317, (uint64_t)v945);
            if (LOBYTE(v945[0]) != 1
              || (llvm::TargetLoweringBase::getTypeConversion(*(_QWORD *)(v925 + 8), v896, (_BOOL8)v941, v942, (uint64_t)v945), v164 = (char)v945[1], v322 = LOBYTE(v945[1]), !LOBYTE(v945[1])))
            {
LABEL_516:
              v288 = v850;
LABEL_517:
              v276 = v843;
              v305 = v861;
LABEL_518:
              v325 = v842;
              v326 = v847;
              v327 = (unint64_t)v871 + 2;
              goto LABEL_519;
            }
            v323 = *(_QWORD *)(v925 + 8);
            v276 = v843;
            v305 = v861;
            if (!*(_QWORD *)(v323 + 8 * LOBYTE(v945[1]) + 96))
            {
              v288 = v850;
              goto LABEL_518;
            }
            v288 = v850;
            if (!(_BYTE)v941 || *(_BYTE *)(v323 + 179 * LOBYTE(v945[1]) + v941 + 137754))
              goto LABEL_518;
            if (!(*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v323 + 208))(v323, v838))
              goto LABEL_517;
            if (!(_BYTE)v941)
              goto LABEL_517;
            v324 = *(_QWORD *)(v925 + 8);
            if (*(unsigned __int16 *)(v324 + 358 * v322 + 2 * v941 + 73672) > 0xFu)
              goto LABEL_517;
            if (!llvm::TargetLoweringBase::allowsMemoryAccess(v324, (uint64_t)v896, v837, (uint64_t)v941, v942, *(_QWORD *)(v850 + 96), (uint64_t)&v938)|| !(_BYTE)v938)
            {
              goto LABEL_516;
            }
            v334 = llvm::TargetLoweringBase::allowsMemoryAccess(*(_QWORD *)(v925 + 8), (uint64_t)v896, v837, (uint64_t)v941, v942, *(_QWORD *)(v293 + 96), (uint64_t)&v940);
            v327 = (unint64_t)v871 + 2;
            if ((v334 & (v940 != 0)) != 0)
              v307 = (_DWORD)v871 + 2;
            v920 |= v334 & (v940 != 0);
LABEL_529:
            v326 = v847;
            v288 = v850;
            v276 = v843;
            v305 = v861;
            v325 = v842;
LABEL_519:
            if (v327 < LODWORD(__dst[1]))
            {
              v328 = v326;
              v292 = (char *)__dst[0];
              v296 = *(_QWORD *)((char *)__dst[0] + v300 + 32);
              v329 = *(_QWORD *)(v296 + 32);
              if (*(_QWORD *)v329 != v325)
                goto LABEL_543;
              v304 = (_DWORD)v871 + 1;
              v300 += 16;
              v303 = (v303 + v839);
              v164 = v868 + v844;
              v868 += v844;
              v302 = v326 + 1;
              v871 = (llvm::EVT *)((char *)v871 + 1);
              v13 = *(_DWORD *)(v329 + 8) == v841;
              v301 = v840;
              if (!v13)
                goto LABEL_543;
              continue;
            }
            break;
          }
          v328 = (_DWORD)v871 + 1;
LABEL_543:
          v335 = 63 - __clz(((1 << v290) | v291) & -((1 << v290) | v291));
          if (v306 > v307)
            v336 = __src ^ 1;
          else
            v336 = 0;
          if (v306 <= v307)
            v337 = v307;
          else
            v337 = v306;
          if (v328 + 1 < v879)
            v338 = v328 + 1;
          else
            v338 = v879;
          if (v338 >= v337)
            v339 = v337;
          else
            v339 = v338;
          v340 = (1 << *(_BYTE *)(*(_QWORD *)(v293 + 96) + 34)) | *(_QWORD *)(*(_QWORD *)(v293 + 96) + 8);
          v341 = 63 - __clz(v340 & -v340);
          if (v339 > 1)
          {
            v349 = v305;
            v350 = v276;
            v4 = v925;
            if (!sub_1C5CBCE54(v925, (uint64_t **)&v971, v339, v892))
            {
              v352 = v971;
              v353 = 16 * DWORD2(v971) - 16 * v339;
              if (DWORD2(v971) != (_DWORD)v339)
                memmove((void *)v971, (const void *)(v971 + 16 * v339), 16 * DWORD2(v971) - 16 * v339);
              v3 = v865;
              v128 = v853;
              v32 = (_QWORD *)&unk_1ED823000;
              v212 = v863;
              v354 = v879;
              DWORD2(v971) = (unint64_t)(v352 + v353 - v971) >> 4;
              v355 = __dst[0];
              v163 = (char *)__dst[0] + 16 * v339;
              v356 = 16 * LODWORD(__dst[1]) - 16 * v339;
              if (LODWORD(__dst[1]) != (_DWORD)v339)
                memmove(__dst[0], v163, 16 * LODWORD(__dst[1]) - 16 * v339);
              v220 = (_QWORD *)(((unint64_t)v355 + v356 - (unint64_t)__dst[0]) >> 4);
              LODWORD(__dst[1]) = (_DWORD)v220;
              v134 = v854;
              goto LABEL_577;
            }
            v851 = v288;
            if (v336)
            {
              v361 = sub_1C6131264((unsigned __int8 *)&v944, v351, v164);
              v869 = (llvm *)sub_1C4816F98(v896, v361, v362, (int)v339 * v844, 0);
              v872 = v363;
LABEL_596:
              v367 = *(_QWORD *)__dst[0];
              v368 = *(unsigned __int8 **)(*(_QWORD *)__dst[0] + 64);
              v941 = v368;
              if (v368)
                llvm::MetadataTracking::track((uint64_t)&v941, v368, 2);
              LODWORD(v942) = *(_DWORD *)(v367 + 60);
              v369 = *(_QWORD *)v971;
              v370 = *(unsigned __int8 **)(*(_QWORD *)v971 + 64);
              v938 = v370;
              if (v370)
                llvm::MetadataTracking::track((uint64_t)&v938, v370, 2);
              v939 = *(_DWORD *)(v369 + 60);
              v371 = sub_1C5CBE2D0((uint64_t *)v4, (uint64_t **)&v971, v339);
              v856 = v372;
              v862 = (uint64_t)v371;
              sub_1C5C5B004(v4, (uint64_t)v371);
              if ((v349 & 1) != 0)
                v373 = 16;
              else
                v373 = 0;
              if (v876)
                v374 = v373 | 8;
              else
                v374 = v373;
              v848 = v836 & 0xFFFFFFFF00000000;
              if (v336 & 1 | ((v920 & 1) == 0))
              {
                v375 = *(_QWORD *)v4;
                v376 = *(uint64_t **)(v293 + 32);
                v377 = *v376;
                v378 = v376[1];
                v379 = v376[5];
                v380 = v376[6];
                v381 = *(_QWORD *)(v293 + 96);
                *(_OWORD *)v969 = *(_OWORD *)v381;
                v970[0] = *(_QWORD *)(v381 + 16);
                *(_OWORD *)v945 = 0u;
                v946 = 0u;
                v834 = v834 & 0xFFFFFFFFFFFF0000 | v341 | 0x100;
                v382 = sub_1C63681B0(v375, (uint64_t)v869, (uint64_t)v872, (uint64_t)&v941, v377, v378, v379, v380, (__int128 *)v969, v834, SHIDWORD(v834), v374, (uint64_t)v945, 0);
                v384 = v383;
                v385 = v382;
                v836 = v383 | v848;
                v32 = (_QWORD *)&unk_1ED823000;
                if (v350)
                {
                  v386 = sub_1C6366C2C(*(_QWORD *)v4, 8 * (v903 & 0xFFFFFFF), (uint64_t)v869, (uint64_t)v872, (const llvm::APInt *)&v941, 1);
                  v389 = *(_QWORD *)(*(_QWORD *)v4 + 832);
                  if (v389)
                    LOWORD(v389) = *(_WORD *)(v389 + 8);
                  v385 = sub_1C5D56C70(*(_QWORD *)v4, 178, (const llvm::APInt *)&v941, v869, (uint64_t)v872, (uint64_t)v382, v836, v388, (uint64_t)v386, v387, v389);
                  v384 = v390 | v848;
                }
                v391 = *(_QWORD *)v4;
                v392 = (uint64_t)v385;
                v393 = (uint64_t *)sub_1C6131AB0(v851);
                v394 = *v393;
                v395 = v393[1];
                v396 = *(__int128 **)(v851 + 96);
                v934 = *v396;
                v935 = *((_QWORD *)v396 + 2);
                *(_OWORD *)v945 = 0u;
                v946 = 0u;
                v398 = sub_1C636B75C(v391, v862, v856, (uint64_t)&v938, v392, v384, v394, v395, (uint64_t)&v934, v335, 0, v874, (uint64_t)v945);
              }
              else
              {
                llvm::TargetLoweringBase::getTypeConversion(*(_QWORD *)(v4 + 8), *(llvm::EVT **)(*(_QWORD *)v4 + 56), (_BOOL8)v869, (uint64_t)v872, (uint64_t)v945);
                v399 = v945[1];
                v400 = v946;
                v401 = *(_QWORD *)v4;
                v402 = *(uint64_t **)(v293 + 32);
                v403 = *v402;
                v404 = v402[1];
                v406 = v402[5];
                v405 = v402[6];
                v407 = *(_QWORD *)(v293 + 96);
                v932 = *(_OWORD *)v407;
                v933 = *(_QWORD *)(v407 + 16);
                *(_OWORD *)v945 = 0u;
                v946 = 0u;
                v835 = v835 & 0xFFFFFFFFFFFF0000 | v341 | 0x100;
                v382 = sub_1C636B4C8(v401, 1, (uint64_t)&v941, (uint64_t)v399, v400, v403, v404, v408, v406, v405, &v932, (uint64_t)v869, (uint64_t)v872, v835, SHIDWORD(v835), v374, (uint64_t)v945);
                v410 = v409 | v848;
                v411 = *(_QWORD *)v4;
                v412 = (uint64_t *)sub_1C6131AB0(v851);
                v413 = *v412;
                v414 = v412[1];
                v415 = *(__int128 **)(v851 + 96);
                v930 = *v415;
                v931 = *((_QWORD *)v415 + 2);
                v416 = (1 << *((_BYTE *)v415 + 34)) | *((_QWORD *)v415 + 1);
                LOWORD(v415) = *((_WORD *)v415 + 16);
                *(_OWORD *)v945 = 0u;
                v946 = 0u;
                v833 = (63 - __clz(v416 & -v416));
                v836 = v410;
                v398 = sub_1C636B9CC(v411, v862, v856, (uint64_t)&v938, (uint64_t)v382, v410, v413, v414, (uint64_t)&v930, (uint64_t)v869, (uint64_t)v872, v833, SHIDWORD(v833), (__int16)v415, (uint64_t)v945);
                v32 = (_QWORD *)&unk_1ED823000;
              }
              v417 = 0;
              v418 = v397;
              v419 = v339;
              do
              {
                sub_1C5D6146C(*(_QWORD *)v4, *(_QWORD *)((char *)__dst[0] + v417), 1, (uint64_t)v382, 1);
                v417 += 16;
                --v419;
              }
              while (v419);
              v909 = v418 | v909 & 0xFFFFFFFF00000000;
              v420 = v339;
              v3 = v865;
              v128 = v853;
              do
              {
                v421 = *(_QWORD *)(v971 + v419);
                v422 = *(_QWORD *)(*(_QWORD *)(v421 + 32) + 40);
                v945[0] = v398;
                v945[1] = (void *)v909;
                sub_1C5C5B0B4((uint64_t *)v4, v421, (uint64_t *)v945, 1, 1);
                if (!*(_QWORD *)(v422 + 48))
                  sub_1C5C5B190((uint64_t *)v4, v422);
                v419 += 16;
                --v420;
              }
              while (v420);
              v423 = v971;
              v424 = 16 * DWORD2(v971) - 16 * v339;
              if (DWORD2(v971) != (_DWORD)v339)
                memmove((void *)v971, (const void *)(v971 + 16 * v339), 16 * DWORD2(v971) - 16 * v339);
              v212 = v863;
              v354 = v879;
              DWORD2(v971) = (unint64_t)(v423 + v424 - v971) >> 4;
              v425 = __dst[0];
              v426 = 16 * LODWORD(__dst[1]) - 16 * v339;
              if (LODWORD(__dst[1]) != (_DWORD)v339)
                memmove(__dst[0], (char *)__dst[0] + 16 * v339, 16 * LODWORD(__dst[1]) - 16 * v339);
              LODWORD(__dst[1]) = ((unint64_t)v425 + v426 - (unint64_t)__dst[0]) >> 4;
              if (v938)
                llvm::MetadataTracking::untrack((uint64_t)&v938, v938);
              v163 = (const char *)v941;
              v134 = v854;
              if (v941)
                llvm::MetadataTracking::untrack((uint64_t)&v941, v941);
              v855 = 1;
              LODWORD(v220) = __dst[1];
              goto LABEL_577;
            }
            v364 = (llvm::LLVMContext *)(v339 * v839);
            if ((int)v364 > 63)
            {
              if ((_DWORD)v364 == 64)
              {
                v365 = 0;
                v872 = 0;
                v366 = 6;
                goto LABEL_595;
              }
              if ((_DWORD)v364 == 128)
              {
                v365 = 0;
                v872 = 0;
                v366 = 7;
                goto LABEL_594;
              }
            }
            else
            {
              switch((_DWORD)v364)
              {
                case 0x20:
                  v365 = 0;
                  v872 = 0;
                  v366 = 5;
LABEL_595:
                  v869 = (llvm *)(v366 | v365);
                  goto LABEL_596;
                case 0x10:
                  v365 = 0;
                  v872 = 0;
                  v366 = 4;
                  goto LABEL_595;
                case 8:
                  v365 = 0;
                  v872 = 0;
                  v366 = 3;
LABEL_594:
                  v4 = v925;
                  goto LABEL_595;
              }
            }
            v427 = llvm::EVT::getExtendedIntegerVT(v896, v364);
            v872 = v428;
            v365 = v427 & 0xFFFFFFFFFFFFFF00;
            v366 = v427;
            goto LABEL_594;
          }
          v342 = __dst[1];
          v343 = v971;
          v4 = v925;
          if (LODWORD(__dst[1]) < 2)
          {
            v346 = 1;
            LODWORD(v339) = 1;
            v3 = v865;
            v32 = (_QWORD *)&unk_1ED823000;
          }
          else
          {
            v344 = (char *)__dst[0] + 16;
            v345 = v971 + 16;
            v346 = 1;
            v3 = v865;
            v32 = (_QWORD *)&unk_1ED823000;
            while (1)
            {
              v347 = (1 << *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v344 + 96) + 34)) | *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v344 + 96)
                                                                                                 + 8);
              if ((63 - __clz(v347 & -v347)) > v341)
                break;
              v348 = (1 << *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v345 + 96) + 34)) | *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v345 + 96)
                                                                                                 + 8);
              if ((63 - __clz(v348 & -v348)) > v335)
                break;
              ++v346;
              v344 += 16;
              v345 += 16;
              if (LODWORD(__dst[1]) == v346)
              {
                LODWORD(v339) = __dst[1];
                v346 = (LODWORD(__dst[1]) - 2) + 2;
                goto LABEL_571;
              }
            }
            LODWORD(v339) = v346;
          }
LABEL_571:
          v357 = 16 * DWORD2(v971) - 16 * v346;
          v212 = v863;
          v354 = v879;
          if (DWORD2(v971) == (_DWORD)v339)
          {
            v358 = v971;
          }
          else
          {
            memmove((void *)v971, (const void *)(v971 + 16 * v346), 16 * DWORD2(v971) - 16 * v346);
            v358 = v971;
            v342 = __dst[1];
          }
          DWORD2(v971) = (unint64_t)(v343 + v357 - v358) >> 4;
          v359 = __dst[0];
          v163 = (char *)__dst[0] + 16 * v346;
          v360 = 16 * v342 - 16 * v346;
          if (v342 != (_DWORD)v339)
            memmove(__dst[0], v163, 16 * v342 - 16 * v346);
          v220 = (_QWORD *)(((unint64_t)v359 + v360 - (unint64_t)__dst[0]) >> 4);
          LODWORD(__dst[1]) = (_DWORD)v220;
          v128 = v853;
          v134 = v854;
LABEL_577:
          LODWORD(v180) = v354 - v339;
          if (v180 >= 2)
          {
            v141 = 3;
            if (v220 <= 1)
              goto LABEL_633;
            continue;
          }
          break;
        }
LABEL_632:
        v141 = 3;
LABEL_633:
        if (__dst[0] != &v951)
          free(__dst[0]);
        LODWORD(v167) = DWORD2(v971);
LABEL_636:
        v168 = v212 | v855;
      }
      while (v167 > 1);
LABEL_650:
      if ((uint64_t *)v971 != v128)
        free((void *)v971);
      if ((v168 & 1) == 0)
        goto LABEL_655;
      if (*(_WORD *)(v3 + 24) != 254)
        return (_QWORD *)v3;
    }
    if (v139 == 253)
    {
      v141 = 3;
      v140 = 1;
      goto LABEL_230;
    }
    if (v139 != 151)
      goto LABEL_655;
    goto LABEL_228;
  }
LABEL_655:
  if ((sub_1C5CB7840((uint64_t *)v4, v3) & 1) != 0 || sub_1C5CB83E4((uint64_t *)v4, v3))
    return (_QWORD *)v3;
  v434 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 40);
  v435 = *(unsigned __int16 *)(v434 + 24);
  v436 = v435 == 36 || v435 == 12;
  if (v436 && v435 != 36 && *(_WORD *)(v3 + 24) == 254 && (*(_WORD *)(v3 + 26) & 0x780) == 0)
  {
    v439 = *(void **)(v3 + 64);
    v945[0] = v439;
    if (v439)
      llvm::MetadataTracking::track((uint64_t)v945, (unsigned __int8 *)v439, 2);
    LODWORD(v945[1]) = *(_DWORD *)(v3 + 60);
    __asm { BR              X10 }
  }
  if (!*(_DWORD *)(v4 + 28) || (*(_WORD *)(*(_QWORD *)(v3 + 96) + 36) & 0xF00) != 0 || (*(_BYTE *)(v3 + 26) & 8) != 0)
    goto LABEL_713;
  *(_OWORD *)v945 = *(_OWORD *)(*(_QWORD *)(v3 + 32) + 40);
  v437 = *(void **)(v3 + 64);
  v969[0] = v437;
  if (v437)
    llvm::MetadataTracking::track((uint64_t)v969, (unsigned __int8 *)v437, 2);
  LODWORD(v969[1]) = *(_DWORD *)(v3 + 60);
  v438 = (unsigned __int8 *)(*((_QWORD *)v945[0] + 5) + 16 * LODWORD(v945[1]));
  if (*v438)
  {
    if (*v438 - 2 >= 6)
      goto LABEL_709;
  }
  else if (*(_BYTE *)(*((_QWORD *)v438 + 1) + 8) != 13)
  {
    goto LABEL_709;
  }
  if (*((_WORD *)v945[0] + 12) != 172)
    goto LABEL_709;
  v443 = (uint64_t *)*((_QWORD *)v945[0] + 4);
  v444 = *v443;
  v445 = *((_DWORD *)v443 + 2);
  v446 = v443[5];
  v447 = *((_DWORD *)v443 + 12);
  if (*(_WORD *)(*v443 + 24) != 175)
  {
    v448 = *((_DWORD *)v443 + 12);
    v449 = v446;
    if (*(_WORD *)(v446 + 24) == 175)
      goto LABEL_702;
LABEL_709:
    v32 = 0;
    goto LABEL_710;
  }
  v448 = *((_DWORD *)v443 + 2);
  v449 = v444;
  v445 = v447;
  v444 = v446;
LABEL_702:
  v453 = *(_QWORD *)(v449 + 48);
  if (!v453)
    goto LABEL_709;
  v454 = v445;
  v455 = *(uint64_t **)(v449 + 32);
  v456 = *v455;
  v457 = *((unsigned int *)v455 + 2);
  v458 = 1;
  do
  {
    if (*(_DWORD *)(v453 + 8) == v448)
    {
      if (!v458)
        goto LABEL_709;
      --v458;
    }
    v453 = *(_QWORD *)(v453 + 32);
  }
  while (v453);
  if (v458)
    goto LABEL_709;
  v574 = v3;
  v576 = sub_1C6131A64((unsigned int *)v945);
  if ((_DWORD)v575 == 1)
  v577 = *(_QWORD *)(*(_QWORD *)(v449 + 32) + 40);
  v578 = *(unsigned __int16 *)(v577 + 24);
  if (v578 != 35 && v578 != 11)
    goto LABEL_1019;
  v580 = *(_QWORD *)(v577 + 80);
  v581 = (_QWORD *)(v580 + 24);
  v582 = *(_DWORD *)(v580 + 32);
  if (v582 >= 0x41)
  {
    if (v582 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v580 + 24)) > 0x40)
      goto LABEL_1019;
    v581 = (_QWORD *)*v581;
  }
  v583 = ((unint64_t)v576 >> 1);
  if (*v581 != v583)
    goto LABEL_1019;
  if (*(_WORD *)(v444 + 24) != 199)
    goto LABEL_1019;
  v584 = *(_QWORD *)(v444 + 48);
  if (!v584)
    goto LABEL_1019;
  v585 = (unint64_t)v576 >> 1;
  v586 = 1;
  do
  {
    if (*(_DWORD *)(v584 + 8) == (_DWORD)v454)
    {
      if (!v586)
        goto LABEL_1019;
      --v586;
    }
    v584 = *(_QWORD *)(v584 + 32);
  }
  while (v584);
  if (v586)
    goto LABEL_1019;
  v587 = *(unsigned int **)(v444 + 32);
  v588 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v587 + 40) + 16 * v587[2]);
  if (*v588)
  {
    if (*v588 - 2 >= 6)
      goto LABEL_1019;
  }
  else if (*(_BYTE *)(*((_QWORD *)v588 + 1) + 8) != 13)
  {
    goto LABEL_1019;
  }
  v682 = sub_1C6131A64(v587);
  if ((_DWORD)v681 == 1)
  if ((unint64_t)v682 > v583)
    goto LABEL_1019;
  if (*(_WORD *)(v456 + 24) != 199)
    goto LABEL_1019;
  v683 = *(_QWORD *)(v456 + 48);
  if (!v683)
    goto LABEL_1019;
  v684 = 1;
  do
  {
    if (*(_DWORD *)(v683 + 8) == (_DWORD)v457)
    {
      if (!v684)
        goto LABEL_1019;
      --v684;
    }
    v683 = *(_QWORD *)(v683 + 32);
  }
  while (v683);
  if (v684)
    goto LABEL_1019;
  v685 = *(unsigned int **)(v456 + 32);
  v686 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v685 + 40) + 16 * v685[2]);
  if (!*v686)
  {
    if (*(_BYTE *)(*((_QWORD *)v686 + 1) + 8) == 13)
      goto LABEL_1148;
LABEL_1019:
    v32 = 0;
    v3 = v574;
    goto LABEL_710;
  }
  if (*v686 - 2 >= 6)
    goto LABEL_1019;
LABEL_1148:
  v724 = sub_1C6131A64(v685);
  if ((_DWORD)v723 == 1)
  if ((unint64_t)v724 > v583)
    goto LABEL_1019;
  v725 = *(unsigned int **)(v444 + 32);
  v726 = (uint64_t *)(*(_WORD *)(*(_QWORD *)v725 + 24) == 216
                   ? *(_QWORD *)(*(_QWORD *)v725 + 40) + 16 * v725[2]
                   : *(_QWORD *)(v444 + 40) + 16 * v454);
  v727 = *v726;
  v728 = v726[1];
  v729 = *(unsigned int **)(v456 + 32);
  v730 = (_QWORD *)(*(_WORD *)(*(_QWORD *)v729 + 24) == 216
                  ? *(_QWORD *)(*(_QWORD *)v729 + 40) + 16 * v729[2]
                  : *(_QWORD *)(v456 + 40) + 16 * v457);
  if (!(*(unsigned int (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v925 + 8) + 272))(*(_QWORD *)(v925 + 8), v727, v728, *v730, v730[1]))goto LABEL_1019;
  v731 = *(_QWORD *)(v574 + 96);
  v924 = *(_WORD *)(v731 + 32);
  v732 = *(_OWORD *)(v731 + 56);
  *(_OWORD *)__dst = *(_OWORD *)(v731 + 40);
  v951 = v732;
  if ((int)v585 <= 31)
  {
    switch((_DWORD)v585)
    {
      case 1:
        v733 = 0;
        v734 = 0;
        v735 = 2;
        goto LABEL_1173;
      case 0x10:
        v733 = 0;
        v734 = 0;
        v735 = 4;
        goto LABEL_1173;
      case 8:
        v733 = 0;
        v734 = 0;
        v735 = 3;
        goto LABEL_1173;
    }
LABEL_1182:
    v766 = llvm::EVT::getExtendedIntegerVT(*(llvm::EVT **)(*(_QWORD *)v925 + 56), (llvm::LLVMContext *)((unint64_t)v576 >> 1));
    v734 = v767;
    v733 = v766 & 0xFFFFFFFFFFFFFF00;
    v735 = v766;
    goto LABEL_1173;
  }
  if ((_DWORD)v585 != 32)
  {
    if ((_DWORD)v585 == 64)
    {
      v733 = 0;
      v734 = 0;
      v735 = 6;
      goto LABEL_1173;
    }
    if ((_DWORD)v585 == 128)
    {
      v733 = 0;
      v734 = 0;
      v735 = 7;
      goto LABEL_1173;
    }
    goto LABEL_1182;
  }
  v733 = 0;
  v734 = 0;
  v735 = 5;
LABEL_1173:
  v736 = (llvm *)(v735 | v733);
  v737 = *(uint64_t **)(v444 + 32);
  v738 = *v737;
  v739 = v737[1];
  v740 = *(_QWORD *)(*(_QWORD *)v925 + 832);
  if (v740)
    v741 = *(_WORD *)(v740 + 8);
  else
    v741 = 0;
  v742 = sub_1C5D52060(*(_QWORD *)v925, 199, (const llvm::APInt *)v969, v736, v734, v738, v739, v741);
  v744 = v743;
  v745 = *(uint64_t **)(v456 + 32);
  v746 = *v745;
  v747 = v745[1];
  v748 = *(_QWORD *)(*(_QWORD *)v925 + 832);
  if (v748)
    v749 = *(_WORD *)(v748 + 8);
  else
    v749 = 0;
  v750 = sub_1C5D52060(*(_QWORD *)v925, 199, (const llvm::APInt *)v969, v736, v734, v746, v747, v749);
  v912 = v751;
  __srcc = v750;
  v3 = v574;
  v752 = *(uint64_t **)(v574 + 32);
  v753 = *v752;
  v754 = v752[1];
  v755 = v752[10];
  v756 = v752[11];
  v757 = *(_QWORD *)v925;
  v758 = *(_QWORD *)(v574 + 96);
  v971 = *(_OWORD *)v758;
  v972 = *(_QWORD *)(v758 + 16);
  v759 = sub_1C636B75C(v757, v753, v754, (uint64_t)v969, (uint64_t)v742, v744, v755, v756, (uint64_t)&v971, *(_BYTE *)(v758 + 34), 0, v924, (uint64_t)__dst);
  v761 = v760;
  v762 = ((unint64_t)v576 >> 4) & 0x1FFFFFFF;
  v763 = sub_1C6369954(*(_QWORD *)v925, v755, v756, v762, 0, (const llvm::APInt *)v969, 0);
  LODWORD(v756) = v764;
  v765 = *(_QWORD *)v925;
  sub_1C4824250(*(uint64_t **)(v3 + 96), v762, (uint64_t)&v961);
  v832 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 96) + 34);
  v32 = sub_1C636B75C(v765, (uint64_t)v759, v761, (uint64_t)v969, (uint64_t)__srcc, v912, (uint64_t)v763, v756, (uint64_t)&v961, v832, SHIDWORD(v832), v924, (uint64_t)__dst);
LABEL_710:
  if (v969[0])
    llvm::MetadataTracking::untrack((uint64_t)v969, (unsigned __int8 *)v969[0]);
  if (v32)
    return v32;
LABEL_713:
  if ((*(_WORD *)(*(_QWORD *)(v3 + 96) + 36) & 0xF00) != 0
    || (*(_BYTE *)(v3 + 26) & 8) != 0
    || (*(_WORD *)(v3 + 26) & 0x400) != 0)
  {
    return 0;
  }
  v459 = v3;
  v460 = *(uint64_t **)(v3 + 32);
  v461 = *v460;
  v462 = v460[1];
  v464 = v460[5];
  v463 = v460[6];
  v465 = v460[10];
  v466 = v460[11];
  v467 = (uint64_t *)(*(_QWORD *)(v464 + 40) + 16 * v463);
  v469 = *v467;
  v468 = v467[1];
  v470 = *v467;
  if (v470)
  {
    if ((v470 - 15) < 0x9C)
      return 0;
  }
  else if ((*(_DWORD *)(v468 + 8) & 0xFE) == 0x12)
  {
    return 0;
  }
  v471 = *(unsigned __int16 *)(v464 + 24);
  if ((v471 - 174) < 0xFFFFFFFD)
    return 0;
  v472 = *(_QWORD *)(v464 + 48);
  if (!v472)
    return 0;
  v473 = 1;
  do
  {
    if (*(_DWORD *)(v472 + 8) == (_DWORD)v463)
    {
      if (!v473)
        return 0;
      --v473;
    }
    v472 = *(_QWORD *)(v472 + 32);
  }
  while (v472);
  if (v473)
    return 0;
  if ((_DWORD)v471 == 172 && byte_1ED824138)
  {
    v921 = v461;
    v485 = sub_1C5CBE49C(**(_QWORD **)(v464 + 32), *(_QWORD *)(*(_QWORD *)(v464 + 32) + 8), v465, v466, v461);
    if ((_DWORD)v485)
    {
      v32 = sub_1C5CBE720(v485, HIDWORD(v485), *(uint64_t **)(*(_QWORD *)(v464 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v464 + 32) + 48), v459, v925);
      if (v32)
        return v32;
    }
    v564 = sub_1C5CBE49C(*(_QWORD *)(*(_QWORD *)(v464 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v464 + 32) + 48), v465, v466, v921);
    v461 = v921;
    if ((_DWORD)v564)
    {
      v565 = sub_1C5CBE720(v564, HIDWORD(v564), **(uint64_t ***)(v464 + 32), *(_QWORD *)(*(_QWORD *)(v464 + 32) + 8), v459, v925);
      v461 = v921;
      v32 = v565;
      if (v565)
        return v32;
    }
  }
  if (!byte_1ED824078)
    return 0;
  v566 = *(_QWORD **)(v464 + 32);
  v567 = v566 + 5;
  if (*(_WORD *)(v566[5] + 24) != 11)
    return 0;
  v568 = *v566;
  if (!*v566)
    return 0;
  if (*(_WORD *)(v568 + 24) != 253)
    return 0;
  if ((*(_WORD *)(v568 + 26) & 0xF80) != 0)
    return 0;
  v569 = *(_QWORD *)(v568 + 48);
  if (!v569)
    return 0;
  v570 = v566[1];
  v571 = 1;
  do
  {
    if (*(_DWORD *)(v569 + 8) == (_DWORD)v570)
    {
      if (!v571)
        return 0;
      --v571;
    }
    v569 = *(_QWORD *)(v569 + 32);
  }
  while (v569);
  if (v571)
    return 0;
  if (v461 != v568)
    return 0;
  if (v462 != 1)
    return 0;
  v922 = v461;
  v572 = *(_QWORD *)(v461 + 32);
  if (*(_QWORD *)(v572 + 40) != v465
    || *(_DWORD *)(v572 + 48) != (_DWORD)v466
    || *(_DWORD *)(*(_QWORD *)(v461 + 96) + 16) != *(_DWORD *)(*(_QWORD *)(v459 + 96) + 16))
  {
    return 0;
  }
  *(_OWORD *)v945 = *v567;
  v898 = sub_1C6131A64((unsigned int *)v945);
  if ((_DWORD)v573 == 1)
  __srca = (void *)*((_QWORD *)v945[0] + 10);
  LODWORD(v969[1]) = *((_DWORD *)__srca + 8);
  v894 = LODWORD(v969[1]);
  if (LODWORD(v969[1]) > 0x40)
  {
    v704 = (void *)operator new[]();
    v705 = (const void *)*((_QWORD *)__srca + 3);
    __srcb = (unint64_t)v704;
    memcpy(v704, v705, ((unint64_t)(v894 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    __srcb = *((_QWORD *)__srca + 3);
  }
  v969[0] = (void *)__srcb;
  if ((_DWORD)v471 == 171)
  {
    LODWORD(__dst[1]) = v898;
    if (v898 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)__dst, -1, 1);
    }
    else
    {
      v706 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v898);
      if (!v898)
        v706 = 0;
      __dst[0] = v706;
    }
    if (v894 > 0x40)
    {
      v709 = 0;
      v707 = (char *)__dst[0];
      do
      {
        *(_QWORD *)(__srcb + v709) ^= *(_QWORD *)&v707[v709];
        v709 += 8;
      }
      while ((((unint64_t)(v894 + 63) >> 3) & 0x3FFFFFF8) != v709);
      v708 = __srcb;
    }
    else
    {
      v707 = (char *)__dst[0];
      v708 = (unint64_t)__dst[0] ^ __srcb;
      v969[0] = (void *)((unint64_t)__dst[0] ^ __srcb);
      __srcb ^= (unint64_t)__dst[0];
    }
    __nc = v708;
    if (LODWORD(__dst[1]) >= 0x41 && v707 != 0)
      MEMORY[0x1CAA32F9C]();
  }
  else
  {
    __nc = __srcb;
  }
  if (v894 >= 0x41)
  {
    v712 = 0;
    v713 = (unint64_t)(v894 + 63) >> 6;
    do
    {
      v629 = v713-- < 1;
      if (v629)
        break;
      v714 = *(_QWORD *)(__srcb + 8 * v713);
      v712 += __clz(v714);
    }
    while (!v714);
    v715 = v894 | 0xFFFFFFC0;
    if ((v894 & 0x3F) == 0)
      v715 = 0;
    v910 = v712 + v715;
    if ((v894 - (v712 + v715)) < 0x41 && !*(_QWORD *)__srcb)
    {
      v32 = 0;
      v716 = 1;
      goto LABEL_1203;
    }
    if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v969) == (_DWORD)v894)
    {
      v32 = 0;
      v716 = 1;
      goto LABEL_1202;
    }
    v885 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v969);
  }
  else
  {
    if (!(_DWORD)v894 || !__srcb || 0xFFFFFFFFFFFFFFFFLL >> -(char)v894 == __srcb)
      return 0;
    v711 = __clz(__rbit64(__srcb));
    if (v894 < v711)
      v711 = v894;
    v885 = v711;
    v910 = v894 + __clz(__srcb) - 64;
  }
  v717 = (v898 - v885 + ~v910) | ((unint64_t)(v898 - v885 + ~v910) >> 1);
  v718 = v717 | (v717 >> 2) | ((v717 | (v717 >> 2)) >> 4);
  v719 = v718 | (v718 >> 8) | ((v718 | (v718 >> 8)) >> 16);
  v911 = v719 + 1;
  if ((int)v719 > 30)
    goto LABEL_1140;
  if ((_DWORD)v719)
    goto LABEL_1183;
  v720 = 0;
  v722 = 2;
  v721 = 0;
  while (1)
  {
    *(_QWORD *)&v934 = v722 | v720;
    *((_QWORD *)&v934 + 1) = v721;
    if (v911 >= v898)
    {
      v32 = 0;
      v716 = 1;
      goto LABEL_1201;
    }
    v906 = sub_1C47C1C70((unsigned __int8 *)&v934);
    if ((_DWORD)v768 == 1)
    if (8 * v906 == v911)
    {
      if ((_BYTE)v934)
      {
        v769 = *(_QWORD *)(v925 + 8);
        if ((v934 == 1 || *(_QWORD *)(v769 + 8 * v934 + 96))
          && (v471 > 0x185 || (*(_BYTE *)(v769 + 390 * v934 + v471 + 3862) & 0xFB) == 0)
          && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v769 + 1384))(v769, v469, v468) & 1) != 0)
        {
          break;
        }
      }
    }
    v770 = v911 | ((unint64_t)v911 >> 1) | ((v911 | ((unint64_t)v911 >> 1)) >> 2);
    v771 = v770 | (v770 >> 4) | ((v770 | (v770 >> 4)) >> 8);
    v719 = v771 | (v771 >> 16);
    v911 = v719 + 1;
    if ((int)v719 > 30)
    {
LABEL_1140:
      switch((_DWORD)v719)
      {
        case 0x1F:
          v720 = 0;
          v721 = 0;
          v722 = 5;
          break;
        case 0x3F:
          v720 = 0;
          v721 = 0;
          v722 = 6;
          break;
        case 0x7F:
          v720 = 0;
          v721 = 0;
          v722 = 7;
          break;
        default:
          goto LABEL_1206;
      }
    }
    else if ((_DWORD)v719)
    {
LABEL_1183:
      if ((_DWORD)v719 == 15)
      {
        v720 = 0;
        v721 = 0;
        v722 = 4;
      }
      else if ((_DWORD)v719 == 7)
      {
        v720 = 0;
        v721 = 0;
        v722 = 3;
      }
      else
      {
LABEL_1206:
        v772 = llvm::EVT::getExtendedIntegerVT(*(llvm::EVT **)(*(_QWORD *)v925 + 56), (llvm::LLVMContext *)v911);
        v720 = v772 & 0xFFFFFFFFFFFFFF00;
        v722 = v772;
      }
    }
    else
    {
      v720 = 0;
      v721 = 0;
      v722 = 2;
    }
  }
  if (v885 % v911)
    v885 = (v885 + v911 - 1) / v911 * v911 - v911;
  if (v885 + v911 >= v898)
    v773 = v898;
  else
    v773 = v885 + v911;
  DWORD2(v932) = v898;
  if (v898 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v932, 0, 0);
  else
    *(_QWORD *)&v932 = 0;
  sub_1C4912E54(&v932, v885, v773);
  if (v894 >= 0x41)
  {
    v776 = (char *)operator new[]();
    __nd = ((unint64_t)(v894 + 63) >> 3) & 0x3FFFFFF8;
    memcpy(v776, (const void *)__srcb, __nd);
    v777 = 0;
    v778 = v932;
    v907 = 8 * ((unint64_t)(v894 + 63) >> 6);
    do
    {
      *(_QWORD *)&v776[v777] &= *(_QWORD *)(v778 + v777);
      v777 += 8;
    }
    while (v907 != v777);
    v779 = memcmp(v776, (const void *)__srcb, __nd);
    MEMORY[0x1CAA32F9C](v776, 0x1000C8000313F17);
    if (v779)
      goto LABEL_1222;
    v775 = (char *)operator new[]();
    memcpy(v775, (const void *)__srcb, __nd);
    v780 = 0;
    v781 = v932;
    do
    {
      *(_QWORD *)&v775[v780] &= *(_QWORD *)(v781 + v780);
      v780 += 8;
    }
    while (v907 != v780);
    LODWORD(__dst[1]) = v894;
    __dst[0] = (void *)operator new[]();
    v774 = __dst[1];
    v782 = LODWORD(__dst[1]) + 63;
    __nc = (size_t)__dst[0];
    memcpy(__dst[0], v775, (v782 >> 3) & 0x3FFFFFF8);
    if (v774 <= 0x40)
    {
LABEL_1217:
      if (v774 == v885)
        __dst[0] = 0;
      else
        __dst[0] = (void *)(__nc >> v885);
    }
    else
    {
      llvm::APInt::tcShiftRight((llvm::APInt *)__nc, (unint64_t *)(v782 >> 6), v885);
    }
    llvm::APInt::trunc((llvm::APInt *)__dst, v911, (llvm::APInt *)&v930);
    if (LODWORD(__dst[1]) >= 0x41 && __dst[0])
      MEMORY[0x1CAA32F9C](__dst[0], 0x1000C8000313F17);
    if (v894 >= 0x41 && v775)
      MEMORY[0x1CAA32F9C](v775, 0x1000C8000313F17);
    if ((_DWORD)v471 == 171)
    {
      LODWORD(__dst[1]) = v911;
      if (v911 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)__dst, -1, 1);
      }
      else
      {
        v783 = v911 ? (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v911) : 0;
        __dst[0] = v783;
      }
      if (DWORD2(v930) > 0x40)
      {
        v785 = 0;
        v786 = v930;
        v784 = (char *)__dst[0];
        v787 = (((unint64_t)DWORD2(v930) + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          *(_QWORD *)(v786 + v785) ^= *(_QWORD *)&v784[v785];
          v785 += 8;
        }
        while (v787 != v785);
      }
      else
      {
        v784 = (char *)__dst[0];
        *(_QWORD *)&v930 = v930 ^ (__int128)__dst[0];
      }
      if (LODWORD(__dst[1]) >= 0x41 && v784 != 0)
        MEMORY[0x1CAA32F9C]();
    }
    v790 = *(_QWORD *)v925;
    v789 = *(_QWORD *)(v925 + 8);
    if (*(_BYTE *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)v925 + 40) + 40) + 272))
      v791 = ((v898 - v911 + 7) >> 3) - (unint64_t)(v885 >> 3);
    else
      v791 = v885 >> 3;
    LOBYTE(v941) = 0;
    v792 = (1 << *(_BYTE *)(*(_QWORD *)(v922 + 96) + 34)) | *(_QWORD *)(*(_QWORD *)(v922 + 96) + 8);
    v793 = (1 << (63 - __clz(v792 & -v792))) | v791;
    v794 = (63 - __clz(v793 & -v793));
    if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v789 + 664))(v789, *(_QWORD *)(v790 + 56)))
      v795 = v941 == 0;
    else
      v795 = 1;
    if (v795)
    {
      v32 = 0;
LABEL_1256:
      if (DWORD2(v930) >= 0x41 && (_QWORD)v930)
        MEMORY[0x1CAA32F9C](v930, 0x1000C8000313F17);
      v716 = 1;
      goto LABEL_1260;
    }
    v796 = *(_QWORD *)v925;
    v797 = *(void **)(v922 + 64);
    __dst[0] = v797;
    if (v797)
      llvm::MetadataTracking::track((uint64_t)__dst, (unsigned __int8 *)v797, 2);
    LODWORD(__dst[1]) = *(_DWORD *)(v922 + 60);
    v798 = sub_1C6369954(v796, v465, v466, v791, 0, (const llvm::APInt *)__dst, 0);
    v908 = v799;
    v913 = (llvm::EVT *)v798;
    if (__dst[0])
      llvm::MetadataTracking::untrack((uint64_t)__dst, (unsigned __int8 *)__dst[0]);
    v900 = *(llvm::LLVMContext **)v925;
    v800 = v934;
    v801 = *(unsigned __int8 **)(v922 + 64);
    *(_QWORD *)&v961 = v801;
    if (v801)
      llvm::MetadataTracking::track((uint64_t)&v961, v801, 2);
    DWORD2(v961) = *(_DWORD *)(v922 + 60);
    v802 = *(uint64_t **)(v922 + 32);
    v803 = *v802;
    v804 = v802[1];
    sub_1C4824250(*(uint64_t **)(v922 + 96), v791, (uint64_t)&v971);
    v805 = *(_QWORD *)(v922 + 96);
    v806 = *(_WORD *)(v805 + 32);
    v807 = *(_OWORD *)(v805 + 56);
    *(_OWORD *)__dst = *(_OWORD *)(v805 + 40);
    v951 = v807;
    v901 = (llvm::LLVMContext *)sub_1C63681B0((uint64_t)v900, v800, *((uint64_t *)&v800 + 1), (uint64_t)&v961, v803, v804, (uint64_t)v913, v908, &v971, (unsigned __int16)v794 | 0x100u, (v794 | 0x100uLL) >> 32, v806, (uint64_t)__dst, 0);
    __ne = v808;
    if ((_QWORD)v961)
      llvm::MetadataTracking::untrack((uint64_t)&v961, (unsigned __int8 *)v961);
    v809 = *(_QWORD *)v925;
    v810 = *(void **)(v464 + 64);
    __dst[0] = v810;
    if (v810)
    {
      llvm::MetadataTracking::track((uint64_t)__dst, (unsigned __int8 *)v810, 2);
      v814 = *(_QWORD *)v925;
      v815 = *(unsigned __int8 **)(v464 + 64);
      v811 = *(_DWORD *)(v464 + 60);
      LODWORD(__dst[1]) = v811;
      v813 = *((_QWORD *)&v934 + 1);
      v812 = (llvm *)v934;
      *(_QWORD *)&v961 = v815;
      if (v815)
      {
        llvm::MetadataTracking::track((uint64_t)&v961, v815, 2);
        v811 = *(_DWORD *)(v464 + 60);
        v816 = *((_QWORD *)&v934 + 1);
        v817 = v934;
        goto LABEL_1276;
      }
    }
    else
    {
      v811 = *(_DWORD *)(v464 + 60);
      LODWORD(__dst[1]) = v811;
      v813 = *((_QWORD *)&v934 + 1);
      v812 = (llvm *)v934;
      *(_QWORD *)&v961 = 0;
      v814 = v809;
    }
    v816 = v813;
    v817 = (uint64_t)v812;
LABEL_1276:
    DWORD2(v961) = v811;
    v818 = sub_1C63666FC(v814, (llvm::LLVMContext *)&v930, (const llvm::APInt *)&v961, v817, v816, 0, 0);
    v821 = *(_QWORD *)(v809 + 832);
    if (v821)
      LOWORD(v821) = *(_WORD *)(v821 + 8);
    v822 = sub_1C5D56C70(v809, v471, (const llvm::APInt *)__dst, v812, v813, (uint64_t)v901, __ne, v820, v818, v819, v821);
    v824 = v823;
    if ((_QWORD)v961)
      llvm::MetadataTracking::untrack((uint64_t)&v961, (unsigned __int8 *)v961);
    if (__dst[0])
      llvm::MetadataTracking::untrack((uint64_t)__dst, (unsigned __int8 *)__dst[0]);
    v825 = *(_QWORD *)v925;
    v826 = *(unsigned __int8 **)(v459 + 64);
    *(_QWORD *)&v944 = v826;
    if (v826)
      llvm::MetadataTracking::track((uint64_t)&v944, v826, 2);
    DWORD2(v944) = *(_DWORD *)(v459 + 60);
    sub_1C4824250(*(uint64_t **)(v459 + 96), v791, (uint64_t)&v961);
    *(_OWORD *)__dst = 0u;
    v951 = 0u;
    v32 = sub_1C636B75C(v825, v922, v462, (uint64_t)&v944, (uint64_t)v822, v824, (uint64_t)v913, v908, (uint64_t)&v961, v794, SHIDWORD(v794), 0, (uint64_t)__dst);
    if ((_QWORD)v944)
      llvm::MetadataTracking::untrack((uint64_t)&v944, (unsigned __int8 *)v944);
    sub_1C5C5B004(v925, (uint64_t)v913);
    sub_1C5C5B004(v925, (uint64_t)v901);
    sub_1C5C5B004(v925, (uint64_t)v822);
    v827 = *(_QWORD *)v925;
    v828 = *(void **)(*(_QWORD *)v925 + 656);
    *(_QWORD *)(v827 + 656) = __dst;
    __dst[1] = v828;
    __dst[0] = &off_1E8197EE8;
    *(_QWORD *)&v951 = v827;
    *((_QWORD *)&v951 + 1) = v925;
    sub_1C5D6146C(v827, v922, 1, (uint64_t)v901, 1);
    *(void **)(v951 + 656) = __dst[1];
    goto LABEL_1256;
  }
  if ((__nc & ~(_QWORD)v932) == 0)
  {
    v775 = (char *)__nc;
    v774 = v894;
    LODWORD(__dst[1]) = v894;
    goto LABEL_1217;
  }
LABEL_1222:
  v716 = 0;
LABEL_1260:
  if (DWORD2(v932) >= 0x41 && (_QWORD)v932)
    MEMORY[0x1CAA32F9C](v932, 0x1000C8000313F17);
LABEL_1201:
  if (v894 >= 0x41)
  {
LABEL_1202:
    if (__srcb)
LABEL_1203:
      MEMORY[0x1CAA32F9C](__srcb, 0x1000C8000313F17);
  }
  if (!v716)
    return 0;
  return v32;
}

