unint64_t sub_1C4D290B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_80;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_81;
  }
LABEL_80:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_82;
  }
LABEL_81:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_82:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_86;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_87;
  }
LABEL_86:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_88;
  }
LABEL_87:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_88:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_92;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_93;
  }
LABEL_92:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_94;
  }
LABEL_93:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_94:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_98;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_99;
  }
LABEL_98:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_100;
  }
LABEL_99:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_100:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) != 0)
LABEL_36:
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
LABEL_37:
  v9 = v8;
  if ((v8 & 0x10000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 224) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_39:
      if ((v9 & 0x40000000) == 0)
        goto LABEL_40;
      goto LABEL_104;
    }
  }
  else if ((v8 & 0x20000000) == 0)
  {
    goto LABEL_39;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 232);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_40:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_105;
  }
LABEL_104:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 240) & 0x1FF;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_106;
  }
LABEL_105:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_106:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 256) & 0x1FFFF;
  if ((v9 & 0x200000000) != 0)
LABEL_43:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 264) & 0x1FFF;
LABEL_44:
  v10 = v9;
  if ((v9 & 0x400000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 272) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x800000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 280);
  v11 = v10;
  if ((v10 & 0x1000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 288) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x2000000000) == 0)
    {
LABEL_50:
      if ((v11 & 0x4000000000) == 0)
        goto LABEL_51;
      goto LABEL_110;
    }
  }
  else if ((v10 & 0x2000000000) == 0)
  {
    goto LABEL_50;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 296);
  if ((v11 & 0x4000000000) == 0)
  {
LABEL_51:
    if ((v11 & 0x8000000000) == 0)
      goto LABEL_52;
    goto LABEL_111;
  }
LABEL_110:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_112;
  }
LABEL_111:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 312) != 0;
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_113;
  }
LABEL_112:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 320);
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_114;
  }
LABEL_113:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 328) != 0;
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_115;
  }
LABEL_114:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_116;
  }
LABEL_115:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_117;
  }
LABEL_116:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_118;
  }
LABEL_117:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_120;
  }
LABEL_119:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_125;
  }
LABEL_124:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 416);
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_126;
  }
LABEL_125:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 424);
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 432);
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 440);
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_129;
  }
LABEL_128:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_130;
  }
LABEL_129:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_73;
    goto LABEL_72;
  }
LABEL_130:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) != 0)
LABEL_72:
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 472);
LABEL_73:
  v12 = v2 & 1;
  if ((v11 & 0x1000000000000000) != 0)
    *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 480);
  v13 = v3 & 2;
  v14 = v3 & 4;
  v15 = v3 & 8;
  v16 = v3 & 0x10;
  v17 = v3 & 0x20;
  v18 = v3 & 0x40;
  v19 = v4 & 0x80;
  v20 = v4 & 0x100;
  v25 = (unsigned __int16)v6 & 0x8000;
  v26 = v6 & 0x10000;
  v27 = v6 & 0x20000;
  v28 = v6 & 0x40000;
  v29 = v6 & 0x80000;
  v30 = v6 & 0x100000;
  if ((v11 & 0x2000000000000000) != 0)
    *(_BYTE *)(a2 + 136) = *(_QWORD *)(a1 + 488) != 0;
  v22 = v5 & 0x800;
  v21 = v5 & 0x200;
  v24 = v5 & 0x4000;
  v23 = v5 & 0x2000;
  v32 = v7 & 0x400000;
  v33 = v8 & 0x800000;
  v34 = v8 & 0x1000000;
  v35 = v8 & 0x2000000;
  v36 = v8 & 0x4000000;
  v37 = v8 & 0x8000000;
  v38 = v8 & 0x10000000;
  v40 = v9 & 0x200000000;
  v41 = v9 & 0x400000000;
  v42 = v10 & 0x800000000;
  v43 = v11 & 0x2000000000;
  v44 = v10 & 0x1000000000;
  v45 = v11 & 0x4000000000;
  v46 = v11 & 0x8000000000;
  v47 = v11 & 0x10000000000;
  v48 = v11 & 0x20000000000;
  v49 = v11 & 0x40000000000;
  v39 = BYTE4(v9) & 1;
  LODWORD(v22) = (v13 >> 1)
               + v12
               + (v14 >> 2)
               + (v15 >> 3)
               + (v16 >> 4)
               + (v17 >> 5)
               + (v18 >> 6)
               + (v19 >> 7)
               + (v20 >> 8)
               + (v21 >> 9)
               + ((unint64_t)(v5 & 0x400) >> 10)
               + (v22 >> 11)
               + ((unint64_t)(v5 & 0x1000) >> 12)
               + (v23 >> 13)
               + (v24 >> 14)
               + (v25 >> 15)
               + (v26 >> 16)
               + (v27 >> 17)
               + (v28 >> 18)
               + (v29 >> 19)
               + (v30 >> 20)
               + ((v7 & 0x200000uLL) >> 21)
               + (v32 >> 22)
               + (v33 >> 23)
               + (v34 >> 24)
               + (v35 >> 25)
               + (v36 >> 26)
               + (v37 >> 27)
               + (v38 >> 28)
               + ((v9 & 0x20000000) >> 29)
               + ((v9 & 0x40000000) >> 30)
               + (v9 >> 31)
               + v39
               + (v40 >> 33)
               + (v41 >> 34)
               + (v42 >> 35)
               + (v44 >> 36)
               + (v43 >> 37)
               + (v45 >> 38)
               + (v46 >> 39)
               + (v47 >> 40)
               + (v48 >> 41)
               + (v49 >> 42);
  return (_DWORD)v22
       + ((v11 & 0x80000000000uLL) >> 43)
       + ((v11 & 0x100000000000uLL) >> 44)
       + ((v11 & 0x200000000000uLL) >> 45)
       + ((v11 & 0x400000000000uLL) >> 46)
       + ((v11 & 0x800000000000uLL) >> 47)
       + ((v11 & 0x1000000000000uLL) >> 48)
       + ((v11 & 0x2000000000000uLL) >> 49)
       + ((v11 & 0x4000000000000uLL) >> 50)
       + ((v11 & 0x8000000000000uLL) >> 51)
       + ((v11 & 0x10000000000000uLL) >> 52)
       + ((v11 & 0x20000000000000uLL) >> 53)
       + ((v11 & 0x40000000000000uLL) >> 54)
       + ((v11 & 0x80000000000000uLL) >> 55)
       + ((v11 & 0x100000000000000uLL) >> 56)
       + ((v11 & 0x200000000000000uLL) >> 57)
       + ((v11 & 0x400000000000000uLL) >> 58)
       + ((v11 & 0x800000000000000uLL) >> 59)
       + ((v11 & 0x1000000000000000uLL) >> 60)
       + ((v11 & 0x2000000000000000uLL) >> 61);
}

unint64_t sub_1C4D299AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_80;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_81;
  }
LABEL_80:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_82;
  }
LABEL_81:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_82:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_86;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_87;
  }
LABEL_86:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_88;
  }
LABEL_87:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_88:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_92;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_93;
  }
LABEL_92:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_94;
  }
LABEL_93:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_94:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_98;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_99;
  }
LABEL_98:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_100;
  }
LABEL_99:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_100:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) != 0)
LABEL_36:
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
LABEL_37:
  v9 = v8;
  if ((v8 & 0x10000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 224) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_39:
      if ((v9 & 0x40000000) == 0)
        goto LABEL_40;
      goto LABEL_104;
    }
  }
  else if ((v8 & 0x20000000) == 0)
  {
    goto LABEL_39;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 232);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_40:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_105;
  }
LABEL_104:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 240) & 0x1FF;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_106;
  }
LABEL_105:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_106:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 256) & 0x1FFFF;
  if ((v9 & 0x200000000) != 0)
LABEL_43:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 264) & 0x1FFF;
LABEL_44:
  v10 = v9;
  if ((v9 & 0x400000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 272) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x800000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 280);
  v11 = v10;
  if ((v10 & 0x1000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 288) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x2000000000) == 0)
    {
LABEL_50:
      if ((v11 & 0x4000000000) == 0)
        goto LABEL_51;
      goto LABEL_110;
    }
  }
  else if ((v10 & 0x2000000000) == 0)
  {
    goto LABEL_50;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 296);
  if ((v11 & 0x4000000000) == 0)
  {
LABEL_51:
    if ((v11 & 0x8000000000) == 0)
      goto LABEL_52;
    goto LABEL_111;
  }
LABEL_110:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_112;
  }
LABEL_111:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 312) != 0;
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_113;
  }
LABEL_112:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 320);
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_114;
  }
LABEL_113:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 328) != 0;
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_115;
  }
LABEL_114:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_116;
  }
LABEL_115:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_117;
  }
LABEL_116:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_118;
  }
LABEL_117:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_120;
  }
LABEL_119:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_125;
  }
LABEL_124:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 416);
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_126;
  }
LABEL_125:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 424);
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 432);
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 440);
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_129;
  }
LABEL_128:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_130;
  }
LABEL_129:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_73;
    goto LABEL_72;
  }
LABEL_130:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) != 0)
LABEL_72:
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 472);
LABEL_73:
  v12 = v2 & 1;
  if ((v11 & 0x1000000000000000) != 0)
    *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 480);
  v13 = v3 & 2;
  v14 = v3 & 4;
  v15 = v3 & 8;
  v16 = v3 & 0x10;
  v17 = v3 & 0x20;
  v18 = v3 & 0x40;
  v19 = v4 & 0x80;
  v20 = v4 & 0x100;
  v25 = (unsigned __int16)v6 & 0x8000;
  v26 = v6 & 0x10000;
  v27 = v6 & 0x20000;
  v28 = v6 & 0x40000;
  v29 = v6 & 0x80000;
  v30 = v6 & 0x100000;
  if ((v11 & 0x2000000000000000) != 0)
    *(_BYTE *)(a2 + 136) = *(_QWORD *)(a1 + 488) != 0;
  v22 = v5 & 0x800;
  v21 = v5 & 0x200;
  v24 = v5 & 0x4000;
  v23 = v5 & 0x2000;
  v32 = v7 & 0x400000;
  v33 = v8 & 0x800000;
  v34 = v8 & 0x1000000;
  v35 = v8 & 0x2000000;
  v36 = v8 & 0x4000000;
  v37 = v8 & 0x8000000;
  v38 = v8 & 0x10000000;
  v40 = v9 & 0x200000000;
  v41 = v9 & 0x400000000;
  v42 = v10 & 0x800000000;
  v43 = v11 & 0x2000000000;
  v44 = v10 & 0x1000000000;
  v45 = v11 & 0x4000000000;
  v46 = v11 & 0x8000000000;
  v47 = v11 & 0x10000000000;
  v48 = v11 & 0x20000000000;
  v49 = v11 & 0x40000000000;
  v39 = BYTE4(v9) & 1;
  LODWORD(v22) = (v13 >> 1)
               + v12
               + (v14 >> 2)
               + (v15 >> 3)
               + (v16 >> 4)
               + (v17 >> 5)
               + (v18 >> 6)
               + (v19 >> 7)
               + (v20 >> 8)
               + (v21 >> 9)
               + ((unint64_t)(v5 & 0x400) >> 10)
               + (v22 >> 11)
               + ((unint64_t)(v5 & 0x1000) >> 12)
               + (v23 >> 13)
               + (v24 >> 14)
               + (v25 >> 15)
               + (v26 >> 16)
               + (v27 >> 17)
               + (v28 >> 18)
               + (v29 >> 19)
               + (v30 >> 20)
               + ((v7 & 0x200000uLL) >> 21)
               + (v32 >> 22)
               + (v33 >> 23)
               + (v34 >> 24)
               + (v35 >> 25)
               + (v36 >> 26)
               + (v37 >> 27)
               + (v38 >> 28)
               + ((v9 & 0x20000000) >> 29)
               + ((v9 & 0x40000000) >> 30)
               + (v9 >> 31)
               + v39
               + (v40 >> 33)
               + (v41 >> 34)
               + (v42 >> 35)
               + (v44 >> 36)
               + (v43 >> 37)
               + (v45 >> 38)
               + (v46 >> 39)
               + (v47 >> 40)
               + (v48 >> 41)
               + (v49 >> 42);
  return (_DWORD)v22
       + ((v11 & 0x80000000000uLL) >> 43)
       + ((v11 & 0x100000000000uLL) >> 44)
       + ((v11 & 0x200000000000uLL) >> 45)
       + ((v11 & 0x400000000000uLL) >> 46)
       + ((v11 & 0x800000000000uLL) >> 47)
       + ((v11 & 0x1000000000000uLL) >> 48)
       + ((v11 & 0x2000000000000uLL) >> 49)
       + ((v11 & 0x4000000000000uLL) >> 50)
       + ((v11 & 0x8000000000000uLL) >> 51)
       + ((v11 & 0x10000000000000uLL) >> 52)
       + ((v11 & 0x20000000000000uLL) >> 53)
       + ((v11 & 0x40000000000000uLL) >> 54)
       + ((v11 & 0x80000000000000uLL) >> 55)
       + ((v11 & 0x100000000000000uLL) >> 56)
       + ((v11 & 0x200000000000000uLL) >> 57)
       + ((v11 & 0x400000000000000uLL) >> 58)
       + ((v11 & 0x800000000000000uLL) >> 59)
       + ((v11 & 0x1000000000000000uLL) >> 60)
       + ((v11 & 0x2000000000000000uLL) >> 61);
}

unint64_t sub_1C4D2A2A4(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_83;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_84;
  }
LABEL_83:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_85;
  }
LABEL_84:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_85:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_89;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_90;
  }
LABEL_89:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_91;
  }
LABEL_90:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_92;
  }
LABEL_91:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_92:
  *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
  if ((v5 & 0x4000) != 0)
LABEL_19:
    *(_BYTE *)(a2 + 28) = *(_QWORD *)(a1 + 112) != 0;
LABEL_20:
  v6 = v5;
  if ((v5 & 0x8000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 120) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x10000) == 0)
    {
LABEL_22:
      if ((v6 & 0x20000) == 0)
        goto LABEL_23;
      goto LABEL_96;
    }
  }
  else if ((v5 & 0x10000) == 0)
  {
    goto LABEL_22;
  }
  *(_WORD *)(a2 + 32) = *(_QWORD *)(a1 + 128);
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_97;
  }
LABEL_96:
  *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_98;
  }
LABEL_97:
  *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 144) & 0x1FF;
  if ((v6 & 0x80000) == 0)
  {
LABEL_25:
    if ((v6 & 0x100000) == 0)
      goto LABEL_27;
    goto LABEL_26;
  }
LABEL_98:
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 152) & 0x1FFFF;
  if ((v6 & 0x100000) != 0)
LABEL_26:
    *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 160) & 0x1FFF;
LABEL_27:
  v7 = v6;
  if ((v6 & 0x200000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 168) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x400000) != 0)
    *(_DWORD *)(a2 + 32) = *(_QWORD *)(a1 + 176);
  v8 = v7;
  if ((v7 & 0x800000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 184) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x1000000) == 0)
    {
LABEL_33:
      if ((v8 & 0x2000000) == 0)
        goto LABEL_34;
      goto LABEL_102;
    }
  }
  else if ((v7 & 0x1000000) == 0)
  {
    goto LABEL_33;
  }
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_103;
  }
LABEL_102:
  *(_DWORD *)(a2 + 44) = *(_QWORD *)(a1 + 200);
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_104;
  }
LABEL_103:
  *(_BYTE *)(a2 + 48) = *(_QWORD *)(a1 + 208) != 0;
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_105;
  }
LABEL_104:
  *(_DWORD *)(a2 + 52) = *(_QWORD *)(a1 + 216);
  if ((v8 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v8 & 0x20000000) == 0)
      goto LABEL_38;
    goto LABEL_106;
  }
LABEL_105:
  *(_BYTE *)(a2 + 56) = *(_QWORD *)(a1 + 224) != 0;
  if ((v8 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x40000000) == 0)
      goto LABEL_39;
    goto LABEL_107;
  }
LABEL_106:
  *(_BYTE *)(a2 + 57) = *(_QWORD *)(a1 + 232) != 0;
  if ((v8 & 0x40000000) == 0)
  {
LABEL_39:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_40;
  }
LABEL_107:
  *(_BYTE *)(a2 + 58) = *(_QWORD *)(a1 + 240) != 0;
  if ((v8 & 0x80000000) != 0)
LABEL_40:
    *(_BYTE *)(a2 + 59) = *(_QWORD *)(a1 + 248) != 0;
LABEL_41:
  v9 = v8;
  if ((v8 & 0x100000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 256) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x200000000) == 0)
    {
LABEL_43:
      if ((v9 & 0x400000000) == 0)
        goto LABEL_44;
      goto LABEL_111;
    }
  }
  else if ((v8 & 0x200000000) == 0)
  {
    goto LABEL_43;
  }
  *(_WORD *)(a2 + 60) = *(_QWORD *)(a1 + 264);
  if ((v9 & 0x400000000) == 0)
  {
LABEL_44:
    if ((v9 & 0x800000000) == 0)
      goto LABEL_45;
    goto LABEL_112;
  }
LABEL_111:
  *(_WORD *)(a2 + 60) = *(_WORD *)(a1 + 272) & 0x1FF;
  if ((v9 & 0x800000000) == 0)
  {
LABEL_45:
    if ((v9 & 0x1000000000) == 0)
      goto LABEL_46;
    goto LABEL_113;
  }
LABEL_112:
  *(_WORD *)(a2 + 60) = *(_WORD *)(a1 + 280) & 0x1FF;
  if ((v9 & 0x1000000000) == 0)
  {
LABEL_46:
    if ((v9 & 0x2000000000) == 0)
      goto LABEL_48;
    goto LABEL_47;
  }
LABEL_113:
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 288) & 0x1FFFF;
  if ((v9 & 0x2000000000) != 0)
LABEL_47:
    *(_WORD *)(a2 + 60) = *(_WORD *)(a1 + 296) & 0x1FFF;
LABEL_48:
  v10 = v9;
  if ((v9 & 0x4000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 304) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x8000000000) != 0)
    *(_DWORD *)(a2 + 60) = *(_QWORD *)(a1 + 312);
  v11 = v10;
  if ((v10 & 0x10000000000) != 0)
  {
    *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 320) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x20000000000) == 0)
    {
LABEL_54:
      if ((v11 & 0x40000000000) == 0)
        goto LABEL_55;
      goto LABEL_117;
    }
  }
  else if ((v10 & 0x20000000000) == 0)
  {
    goto LABEL_54;
  }
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 328);
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_118;
  }
LABEL_117:
  *(_DWORD *)(a2 + 72) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 76) = *(_QWORD *)(a1 + 344) != 0;
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_120;
  }
LABEL_119:
  *(_DWORD *)(a2 + 80) = *(_QWORD *)(a1 + 352);
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 84) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_122;
  }
LABEL_121:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 368);
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_123;
  }
LABEL_122:
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 376);
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_125;
  }
LABEL_124:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_126;
  }
LABEL_125:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_127;
  }
LABEL_126:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_128;
  }
LABEL_127:
  *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 416) != 0;
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_129;
  }
LABEL_128:
  *(_BYTE *)(a2 + 101) = *(_QWORD *)(a1 + 424) != 0;
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_130;
  }
LABEL_129:
  *(_BYTE *)(a2 + 102) = *(_QWORD *)(a1 + 432) != 0;
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_131;
  }
LABEL_130:
  *(_BYTE *)(a2 + 103) = *(_QWORD *)(a1 + 440) != 0;
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_132;
  }
LABEL_131:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_133;
  }
LABEL_132:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_72;
    goto LABEL_134;
  }
LABEL_133:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) == 0)
  {
LABEL_72:
    if ((v11 & 0x1000000000000000) == 0)
      goto LABEL_73;
    goto LABEL_135;
  }
LABEL_134:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 472);
  if ((v11 & 0x1000000000000000) == 0)
  {
LABEL_73:
    if ((v11 & 0x2000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_136;
  }
LABEL_135:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 480);
  if ((v11 & 0x2000000000000000) == 0)
  {
LABEL_74:
    if ((v11 & 0x4000000000000000) == 0)
      goto LABEL_75;
LABEL_137:
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 496);
    if ((v11 & 0x8000000000000000) == 0)
      goto LABEL_76;
    goto LABEL_138;
  }
LABEL_136:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 488);
  if ((v11 & 0x4000000000000000) != 0)
    goto LABEL_137;
LABEL_75:
  if ((v11 & 0x8000000000000000) == 0)
    goto LABEL_76;
LABEL_138:
  *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 504);
LABEL_76:
  v12 = *(_QWORD *)(a1 + 1256);
  if ((v12 & 1) != 0)
    *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 512);
  if ((v12 & 2) != 0)
    *(_BYTE *)(a2 + 140) = *(_QWORD *)(a1 + 520) != 0;
  v14 = ((v3 & 2) >> 1)
      + (v2 & 1)
      + ((v3 & 4) >> 2)
      + ((v3 & 8) >> 3)
      + ((v3 & 0x10) >> 4)
      + ((v3 & 0x20) >> 5)
      + ((v3 & 0x40) >> 6)
      + ((unint64_t)(v4 & 0x80) >> 7)
      + ((v4 & 0x100) >> 8)
      + ((v5 & 0x200) >> 9)
      + ((v5 & 0x400) >> 10)
      + ((v5 & 0x800) >> 11)
      + ((v5 & 0x1000) >> 12)
      + ((v5 & 0x2000) >> 13)
      + ((v5 & 0x4000) >> 14)
      + ((unint64_t)((unsigned __int16)v5 & 0x8000) >> 15)
      + ((v6 & 0x10000) >> 16)
      + ((v6 & 0x20000) >> 17)
      + ((v6 & 0x40000) >> 18)
      + ((v6 & 0x80000) >> 19)
      + ((v6 & 0x100000) >> 20)
      + ((v6 & 0x200000) >> 21)
      + ((v7 & 0x400000) >> 22)
      + ((v7 & 0x800000) >> 23)
      + ((v8 & 0x1000000) >> 24)
      + ((v8 & 0x2000000) >> 25)
      + ((v8 & 0x4000000) >> 26)
      + ((v8 & 0x8000000) >> 27)
      + ((v8 & 0x10000000) >> 28)
      + ((v8 & 0x20000000) >> 29)
      + ((v8 & 0x40000000) >> 30);
  v13 = v12 & 2;
  v17 = v9 & 0x200000000;
  v18 = v9 & 0x400000000;
  v19 = v9 & 0x800000000;
  v16 = BYTE4(v8) & 1;
  v20 = v12 & 1;
  return v14
       + (v8 >> 31)
       + v16
       + (v17 >> 33)
       + (v18 >> 34)
       + (v19 >> 35)
       + ((v9 & 0x1000000000) >> 36)
       + ((v9 & 0x2000000000) >> 37)
       + ((v9 & 0x4000000000) >> 38)
       + ((v10 & 0x8000000000) >> 39)
       + ((v10 & 0x10000000000) >> 40)
       + (v11 >> 63)
       + ((v11 & 0x20000000000) >> 41)
       + ((v11 & 0x40000000000) >> 42)
       + ((v11 & 0x80000000000) >> 43)
       + ((v11 & 0x100000000000) >> 44)
       + ((v11 & 0x200000000000) >> 45)
       + ((v11 & 0x400000000000) >> 46)
       + ((v11 & 0x800000000000) >> 47)
       + ((v11 & 0x1000000000000) >> 48)
       + ((v11 & 0x2000000000000) >> 49)
       + ((v11 & 0x4000000000000) >> 50)
       + ((v11 & 0x8000000000000) >> 51)
       + ((v11 & 0x10000000000000) >> 52)
       + ((v11 & 0x20000000000000) >> 53)
       + ((v11 & 0x40000000000000) >> 54)
       + ((v11 & 0x80000000000000) >> 55)
       + ((v11 & 0x100000000000000) >> 56)
       + ((v11 & 0x200000000000000) >> 57)
       + ((v11 & 0x400000000000000) >> 58)
       + ((v11 & 0x800000000000000) >> 59)
       + ((v11 & 0x1000000000000000) >> 60)
       + ((v11 & 0x2000000000000000) >> 61)
       + ((v11 & 0x4000000000000000) >> 62)
       + v20
       + (v13 >> 1);
}

unint64_t sub_1C4D2AC30(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_83;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_84;
  }
LABEL_83:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_85;
  }
LABEL_84:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_85:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_89;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_90;
  }
LABEL_89:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_91;
  }
LABEL_90:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_92;
  }
LABEL_91:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_92:
  *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
  if ((v5 & 0x4000) != 0)
LABEL_19:
    *(_BYTE *)(a2 + 28) = *(_QWORD *)(a1 + 112) != 0;
LABEL_20:
  v6 = v5;
  if ((v5 & 0x8000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 120) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x10000) == 0)
    {
LABEL_22:
      if ((v6 & 0x20000) == 0)
        goto LABEL_23;
      goto LABEL_96;
    }
  }
  else if ((v5 & 0x10000) == 0)
  {
    goto LABEL_22;
  }
  *(_WORD *)(a2 + 32) = *(_QWORD *)(a1 + 128);
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_97;
  }
LABEL_96:
  *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_98;
  }
LABEL_97:
  *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 144) & 0x1FF;
  if ((v6 & 0x80000) == 0)
  {
LABEL_25:
    if ((v6 & 0x100000) == 0)
      goto LABEL_27;
    goto LABEL_26;
  }
LABEL_98:
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 152) & 0x1FFFF;
  if ((v6 & 0x100000) != 0)
LABEL_26:
    *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 160) & 0x1FFF;
LABEL_27:
  v7 = v6;
  if ((v6 & 0x200000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 168) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x400000) != 0)
    *(_DWORD *)(a2 + 32) = *(_QWORD *)(a1 + 176);
  v8 = v7;
  if ((v7 & 0x800000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 184) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x1000000) == 0)
    {
LABEL_33:
      if ((v8 & 0x2000000) == 0)
        goto LABEL_34;
      goto LABEL_102;
    }
  }
  else if ((v7 & 0x1000000) == 0)
  {
    goto LABEL_33;
  }
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_103;
  }
LABEL_102:
  *(_DWORD *)(a2 + 44) = *(_QWORD *)(a1 + 200);
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_104;
  }
LABEL_103:
  *(_BYTE *)(a2 + 48) = *(_QWORD *)(a1 + 208) != 0;
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_105;
  }
LABEL_104:
  *(_DWORD *)(a2 + 52) = *(_QWORD *)(a1 + 216);
  if ((v8 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v8 & 0x20000000) == 0)
      goto LABEL_38;
    goto LABEL_106;
  }
LABEL_105:
  *(_BYTE *)(a2 + 56) = *(_QWORD *)(a1 + 224) != 0;
  if ((v8 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x40000000) == 0)
      goto LABEL_39;
    goto LABEL_107;
  }
LABEL_106:
  *(_BYTE *)(a2 + 57) = *(_QWORD *)(a1 + 232) != 0;
  if ((v8 & 0x40000000) == 0)
  {
LABEL_39:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_40;
  }
LABEL_107:
  *(_BYTE *)(a2 + 58) = *(_QWORD *)(a1 + 240) != 0;
  if ((v8 & 0x80000000) != 0)
LABEL_40:
    *(_BYTE *)(a2 + 59) = *(_QWORD *)(a1 + 248) != 0;
LABEL_41:
  v9 = v8;
  if ((v8 & 0x100000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 256) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x200000000) == 0)
    {
LABEL_43:
      if ((v9 & 0x400000000) == 0)
        goto LABEL_44;
      goto LABEL_111;
    }
  }
  else if ((v8 & 0x200000000) == 0)
  {
    goto LABEL_43;
  }
  *(_WORD *)(a2 + 60) = *(_QWORD *)(a1 + 264);
  if ((v9 & 0x400000000) == 0)
  {
LABEL_44:
    if ((v9 & 0x800000000) == 0)
      goto LABEL_45;
    goto LABEL_112;
  }
LABEL_111:
  *(_WORD *)(a2 + 60) = *(_WORD *)(a1 + 272) & 0x1FF;
  if ((v9 & 0x800000000) == 0)
  {
LABEL_45:
    if ((v9 & 0x1000000000) == 0)
      goto LABEL_46;
    goto LABEL_113;
  }
LABEL_112:
  *(_WORD *)(a2 + 60) = *(_WORD *)(a1 + 280) & 0x1FF;
  if ((v9 & 0x1000000000) == 0)
  {
LABEL_46:
    if ((v9 & 0x2000000000) == 0)
      goto LABEL_48;
    goto LABEL_47;
  }
LABEL_113:
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 288) & 0x1FFFF;
  if ((v9 & 0x2000000000) != 0)
LABEL_47:
    *(_WORD *)(a2 + 60) = *(_WORD *)(a1 + 296) & 0x1FFF;
LABEL_48:
  v10 = v9;
  if ((v9 & 0x4000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 304) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x8000000000) != 0)
    *(_DWORD *)(a2 + 60) = *(_QWORD *)(a1 + 312);
  v11 = v10;
  if ((v10 & 0x10000000000) != 0)
  {
    *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 320) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x20000000000) == 0)
    {
LABEL_54:
      if ((v11 & 0x40000000000) == 0)
        goto LABEL_55;
      goto LABEL_117;
    }
  }
  else if ((v10 & 0x20000000000) == 0)
  {
    goto LABEL_54;
  }
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 328);
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_118;
  }
LABEL_117:
  *(_DWORD *)(a2 + 72) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 76) = *(_QWORD *)(a1 + 344) != 0;
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_120;
  }
LABEL_119:
  *(_DWORD *)(a2 + 80) = *(_QWORD *)(a1 + 352);
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 84) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_122;
  }
LABEL_121:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 368);
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_123;
  }
LABEL_122:
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 376);
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_125;
  }
LABEL_124:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_126;
  }
LABEL_125:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_127;
  }
LABEL_126:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_128;
  }
LABEL_127:
  *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 416) != 0;
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_129;
  }
LABEL_128:
  *(_BYTE *)(a2 + 101) = *(_QWORD *)(a1 + 424) != 0;
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_130;
  }
LABEL_129:
  *(_BYTE *)(a2 + 102) = *(_QWORD *)(a1 + 432) != 0;
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_131;
  }
LABEL_130:
  *(_BYTE *)(a2 + 103) = *(_QWORD *)(a1 + 440) != 0;
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_132;
  }
LABEL_131:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_133;
  }
LABEL_132:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_72;
    goto LABEL_134;
  }
LABEL_133:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) == 0)
  {
LABEL_72:
    if ((v11 & 0x1000000000000000) == 0)
      goto LABEL_73;
    goto LABEL_135;
  }
LABEL_134:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 472);
  if ((v11 & 0x1000000000000000) == 0)
  {
LABEL_73:
    if ((v11 & 0x2000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_136;
  }
LABEL_135:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 480);
  if ((v11 & 0x2000000000000000) == 0)
  {
LABEL_74:
    if ((v11 & 0x4000000000000000) == 0)
      goto LABEL_75;
LABEL_137:
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 496);
    if ((v11 & 0x8000000000000000) == 0)
      goto LABEL_76;
    goto LABEL_138;
  }
LABEL_136:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 488);
  if ((v11 & 0x4000000000000000) != 0)
    goto LABEL_137;
LABEL_75:
  if ((v11 & 0x8000000000000000) == 0)
    goto LABEL_76;
LABEL_138:
  *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 504);
LABEL_76:
  v12 = *(_QWORD *)(a1 + 1256);
  if ((v12 & 1) != 0)
    *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 512);
  if ((v12 & 2) != 0)
    *(_BYTE *)(a2 + 140) = *(_QWORD *)(a1 + 520) != 0;
  v14 = ((v3 & 2) >> 1)
      + (v2 & 1)
      + ((v3 & 4) >> 2)
      + ((v3 & 8) >> 3)
      + ((v3 & 0x10) >> 4)
      + ((v3 & 0x20) >> 5)
      + ((v3 & 0x40) >> 6)
      + ((unint64_t)(v4 & 0x80) >> 7)
      + ((v4 & 0x100) >> 8)
      + ((v5 & 0x200) >> 9)
      + ((v5 & 0x400) >> 10)
      + ((v5 & 0x800) >> 11)
      + ((v5 & 0x1000) >> 12)
      + ((v5 & 0x2000) >> 13)
      + ((v5 & 0x4000) >> 14)
      + ((unint64_t)((unsigned __int16)v5 & 0x8000) >> 15)
      + ((v6 & 0x10000) >> 16)
      + ((v6 & 0x20000) >> 17)
      + ((v6 & 0x40000) >> 18)
      + ((v6 & 0x80000) >> 19)
      + ((v6 & 0x100000) >> 20)
      + ((v6 & 0x200000) >> 21)
      + ((v7 & 0x400000) >> 22)
      + ((v7 & 0x800000) >> 23)
      + ((v8 & 0x1000000) >> 24)
      + ((v8 & 0x2000000) >> 25)
      + ((v8 & 0x4000000) >> 26)
      + ((v8 & 0x8000000) >> 27)
      + ((v8 & 0x10000000) >> 28)
      + ((v8 & 0x20000000) >> 29)
      + ((v8 & 0x40000000) >> 30);
  v13 = v12 & 2;
  v17 = v9 & 0x200000000;
  v18 = v9 & 0x400000000;
  v19 = v9 & 0x800000000;
  v16 = BYTE4(v8) & 1;
  v20 = v12 & 1;
  return v14
       + (v8 >> 31)
       + v16
       + (v17 >> 33)
       + (v18 >> 34)
       + (v19 >> 35)
       + ((v9 & 0x1000000000) >> 36)
       + ((v9 & 0x2000000000) >> 37)
       + ((v9 & 0x4000000000) >> 38)
       + ((v10 & 0x8000000000) >> 39)
       + ((v10 & 0x10000000000) >> 40)
       + (v11 >> 63)
       + ((v11 & 0x20000000000) >> 41)
       + ((v11 & 0x40000000000) >> 42)
       + ((v11 & 0x80000000000) >> 43)
       + ((v11 & 0x100000000000) >> 44)
       + ((v11 & 0x200000000000) >> 45)
       + ((v11 & 0x400000000000) >> 46)
       + ((v11 & 0x800000000000) >> 47)
       + ((v11 & 0x1000000000000) >> 48)
       + ((v11 & 0x2000000000000) >> 49)
       + ((v11 & 0x4000000000000) >> 50)
       + ((v11 & 0x8000000000000) >> 51)
       + ((v11 & 0x10000000000000) >> 52)
       + ((v11 & 0x20000000000000) >> 53)
       + ((v11 & 0x40000000000000) >> 54)
       + ((v11 & 0x80000000000000) >> 55)
       + ((v11 & 0x100000000000000) >> 56)
       + ((v11 & 0x200000000000000) >> 57)
       + ((v11 & 0x400000000000000) >> 58)
       + ((v11 & 0x800000000000000) >> 59)
       + ((v11 & 0x1000000000000000) >> 60)
       + ((v11 & 0x2000000000000000) >> 61)
       + ((v11 & 0x4000000000000000) >> 62)
       + v20
       + (v13 >> 1);
}

unint64_t sub_1C4D2B5BC(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_87;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_88;
  }
LABEL_87:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_89;
  }
LABEL_88:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_89:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_93;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_94;
  }
LABEL_93:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_95;
  }
LABEL_94:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_96;
  }
LABEL_95:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_97;
  }
LABEL_96:
  *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
LABEL_97:
  *(_BYTE *)(a2 + 28) = *(_QWORD *)(a1 + 112) != 0;
  if ((v5 & 0x8000) != 0)
LABEL_20:
    *(_DWORD *)(a2 + 32) = *(_QWORD *)(a1 + 120);
LABEL_21:
  v6 = v5;
  if ((v5 & 0x10000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 128) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x20000) == 0)
    {
LABEL_23:
      if ((v6 & 0x40000) == 0)
        goto LABEL_24;
      goto LABEL_101;
    }
  }
  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_23;
  }
  *(_WORD *)(a2 + 36) = *(_QWORD *)(a1 + 136);
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_102;
  }
LABEL_101:
  *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 144) & 0x1FF;
  if ((v6 & 0x80000) == 0)
  {
LABEL_25:
    if ((v6 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_103;
  }
LABEL_102:
  *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 152) & 0x1FF;
  if ((v6 & 0x100000) == 0)
  {
LABEL_26:
    if ((v6 & 0x200000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_103:
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 160) & 0x1FFFF;
  if ((v6 & 0x200000) != 0)
LABEL_27:
    *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 168) & 0x1FFF;
LABEL_28:
  v7 = v6;
  if ((v6 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 176) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x800000) != 0)
    *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  v8 = v7;
  if ((v7 & 0x1000000) != 0)
  {
    *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 192) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x2000000) == 0)
    {
LABEL_34:
      if ((v8 & 0x4000000) == 0)
        goto LABEL_35;
      goto LABEL_107;
    }
  }
  else if ((v7 & 0x2000000) == 0)
  {
    goto LABEL_34;
  }
  *(_DWORD *)(a2 + 44) = *(_QWORD *)(a1 + 200);
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_108;
  }
LABEL_107:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_109;
  }
LABEL_108:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v8 & 0x20000000) == 0)
      goto LABEL_38;
    goto LABEL_110;
  }
LABEL_109:
  *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 224);
  if ((v8 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x40000000) == 0)
      goto LABEL_39;
    goto LABEL_111;
  }
LABEL_110:
  *(_BYTE *)(a2 + 60) = *(_QWORD *)(a1 + 232) != 0;
  if ((v8 & 0x40000000) == 0)
  {
LABEL_39:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_112;
  }
LABEL_111:
  *(_BYTE *)(a2 + 61) = *(_QWORD *)(a1 + 240) != 0;
  if ((v8 & 0x80000000) == 0)
  {
LABEL_40:
    if ((v8 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_41;
  }
LABEL_112:
  *(_BYTE *)(a2 + 62) = *(_QWORD *)(a1 + 248) != 0;
  if ((v8 & 0x100000000) != 0)
LABEL_41:
    *(_BYTE *)(a2 + 63) = *(_QWORD *)(a1 + 256) != 0;
LABEL_42:
  v9 = v8;
  if ((v8 & 0x200000000) != 0)
  {
    *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 264) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x400000000) == 0)
    {
LABEL_44:
      if ((v9 & 0x800000000) == 0)
        goto LABEL_45;
      goto LABEL_116;
    }
  }
  else if ((v8 & 0x400000000) == 0)
  {
    goto LABEL_44;
  }
  *(_WORD *)(a2 + 64) = *(_QWORD *)(a1 + 272);
  if ((v9 & 0x800000000) == 0)
  {
LABEL_45:
    if ((v9 & 0x1000000000) == 0)
      goto LABEL_46;
    goto LABEL_117;
  }
LABEL_116:
  *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 280) & 0x1FF;
  if ((v9 & 0x1000000000) == 0)
  {
LABEL_46:
    if ((v9 & 0x2000000000) == 0)
      goto LABEL_47;
    goto LABEL_118;
  }
LABEL_117:
  *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 288) & 0x1FF;
  if ((v9 & 0x2000000000) == 0)
  {
LABEL_47:
    if ((v9 & 0x4000000000) == 0)
      goto LABEL_49;
    goto LABEL_48;
  }
LABEL_118:
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 296) & 0x1FFFF;
  if ((v9 & 0x4000000000) != 0)
LABEL_48:
    *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 304) & 0x1FFF;
LABEL_49:
  v10 = v9;
  if ((v9 & 0x8000000000) != 0)
  {
    *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 312) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x10000000000) != 0)
    *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 320);
  v11 = v10;
  if ((v10 & 0x20000000000) != 0)
  {
    *(_BYTE *)(a2 + 68) = *(_BYTE *)(a1 + 328) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x40000000000) == 0)
    {
LABEL_55:
      if ((v11 & 0x80000000000) == 0)
        goto LABEL_56;
      goto LABEL_122;
    }
  }
  else if ((v10 & 0x40000000000) == 0)
  {
    goto LABEL_55;
  }
  *(_DWORD *)(a2 + 72) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_123;
  }
LABEL_122:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_125;
  }
LABEL_124:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 360);
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_126;
  }
LABEL_125:
  *(_BYTE *)(a2 + 88) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 376);
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 384);
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_129;
  }
LABEL_128:
  *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_130;
  }
LABEL_129:
  *(_BYTE *)(a2 + 101) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_131;
  }
LABEL_130:
  *(_BYTE *)(a2 + 102) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_132;
  }
LABEL_131:
  *(_BYTE *)(a2 + 103) = *(_QWORD *)(a1 + 416) != 0;
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_133;
  }
LABEL_132:
  *(_BYTE *)(a2 + 104) = *(_QWORD *)(a1 + 424) != 0;
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_134;
  }
LABEL_133:
  *(_BYTE *)(a2 + 105) = *(_QWORD *)(a1 + 432) != 0;
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_135;
  }
LABEL_134:
  *(_BYTE *)(a2 + 106) = *(_QWORD *)(a1 + 440) != 0;
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_136;
  }
LABEL_135:
  *(_BYTE *)(a2 + 107) = *(_QWORD *)(a1 + 448) != 0;
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_137;
  }
LABEL_136:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_72;
    goto LABEL_138;
  }
LABEL_137:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) == 0)
  {
LABEL_72:
    if ((v11 & 0x1000000000000000) == 0)
      goto LABEL_73;
    goto LABEL_139;
  }
LABEL_138:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 472);
  if ((v11 & 0x1000000000000000) == 0)
  {
LABEL_73:
    if ((v11 & 0x2000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_140;
  }
LABEL_139:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 480);
  if ((v11 & 0x2000000000000000) == 0)
  {
LABEL_74:
    if ((v11 & 0x4000000000000000) == 0)
      goto LABEL_75;
LABEL_141:
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 496);
    if ((v11 & 0x8000000000000000) == 0)
      goto LABEL_76;
    goto LABEL_142;
  }
LABEL_140:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 488);
  if ((v11 & 0x4000000000000000) != 0)
    goto LABEL_141;
LABEL_75:
  if ((v11 & 0x8000000000000000) == 0)
    goto LABEL_76;
LABEL_142:
  *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 504);
LABEL_76:
  v12 = *(_QWORD *)(a1 + 1256);
  if ((v12 & 1) != 0)
    *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 512);
  if ((v12 & 2) != 0)
    *(_DWORD *)(a2 + 140) = *(_QWORD *)(a1 + 520);
  if ((v12 & 4) != 0)
    *(_BYTE *)(a2 + 144) = *(_QWORD *)(a1 + 528) != 0;
  if ((v12 & 8) != 0)
    *(_DWORD *)(a2 + 148) = *(_QWORD *)(a1 + 536);
  v14 = ((v3 & 2) >> 1)
      + (v2 & 1)
      + ((v3 & 4) >> 2)
      + ((v3 & 8) >> 3)
      + ((v3 & 0x10) >> 4)
      + ((v3 & 0x20) >> 5)
      + ((v3 & 0x40) >> 6)
      + ((unint64_t)(v4 & 0x80) >> 7)
      + ((v4 & 0x100) >> 8)
      + ((v5 & 0x200) >> 9)
      + ((v5 & 0x400) >> 10)
      + ((v5 & 0x800) >> 11)
      + ((v5 & 0x1000) >> 12)
      + ((v5 & 0x2000) >> 13)
      + ((v5 & 0x4000) >> 14)
      + ((unint64_t)((unsigned __int16)v5 & 0x8000) >> 15)
      + ((v5 & 0x10000) >> 16)
      + ((v6 & 0x20000) >> 17)
      + ((v6 & 0x40000) >> 18)
      + ((v6 & 0x80000) >> 19)
      + ((v6 & 0x100000) >> 20)
      + ((v6 & 0x200000) >> 21)
      + ((v6 & 0x400000) >> 22)
      + ((v7 & 0x800000) >> 23)
      + ((v7 & 0x1000000) >> 24)
      + ((v8 & 0x2000000) >> 25)
      + ((v8 & 0x4000000) >> 26)
      + ((v8 & 0x8000000) >> 27)
      + ((v8 & 0x10000000) >> 28)
      + ((v8 & 0x20000000) >> 29)
      + ((v8 & 0x40000000) >> 30);
  v13 = v12 & 8;
  v17 = v8 & 0x200000000;
  v18 = v9 & 0x400000000;
  v19 = v9 & 0x800000000;
  v20 = v9 & 0x1000000000;
  v21 = v9 & 0x2000000000;
  v22 = v9 & 0x4000000000;
  v23 = v9 & 0x8000000000;
  v24 = v10 & 0x10000000000;
  v25 = v10 & 0x20000000000;
  v26 = v11 & 0x80000000000;
  v27 = v11 & 0x40000000000;
  v16 = BYTE4(v8) & 1;
  v28 = v12 & 1;
  return v14
       + (v8 >> 31)
       + v16
       + (v17 >> 33)
       + (v18 >> 34)
       + (v19 >> 35)
       + (v20 >> 36)
       + (v21 >> 37)
       + (v22 >> 38)
       + (v23 >> 39)
       + (v24 >> 40)
       + (v25 >> 41)
       + (v11 >> 63)
       + (v27 >> 42)
       + (v26 >> 43)
       + ((v11 & 0x100000000000) >> 44)
       + ((v11 & 0x200000000000) >> 45)
       + ((v11 & 0x400000000000) >> 46)
       + ((v11 & 0x800000000000) >> 47)
       + ((v11 & 0x1000000000000) >> 48)
       + ((v11 & 0x2000000000000) >> 49)
       + ((v11 & 0x4000000000000) >> 50)
       + ((v11 & 0x8000000000000) >> 51)
       + ((v11 & 0x10000000000000) >> 52)
       + ((v11 & 0x20000000000000) >> 53)
       + ((v11 & 0x40000000000000) >> 54)
       + ((v11 & 0x80000000000000) >> 55)
       + ((v11 & 0x100000000000000) >> 56)
       + ((v11 & 0x200000000000000) >> 57)
       + ((v11 & 0x400000000000000) >> 58)
       + ((v11 & 0x800000000000000) >> 59)
       + ((v11 & 0x1000000000000000) >> 60)
       + ((v11 & 0x2000000000000000) >> 61)
       + ((v11 & 0x4000000000000000) >> 62)
       + v28
       + ((unint64_t)(v12 & 2) >> 1)
       + ((unint64_t)(v12 & 4) >> 2)
       + (v13 >> 3);
}

unint64_t sub_1C4D2BF90(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_87;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_88;
  }
LABEL_87:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_89;
  }
LABEL_88:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_89:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_93;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_94;
  }
LABEL_93:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_95;
  }
LABEL_94:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_96;
  }
LABEL_95:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_97;
  }
LABEL_96:
  *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
LABEL_97:
  *(_BYTE *)(a2 + 28) = *(_QWORD *)(a1 + 112) != 0;
  if ((v5 & 0x8000) != 0)
LABEL_20:
    *(_DWORD *)(a2 + 32) = *(_QWORD *)(a1 + 120);
LABEL_21:
  v6 = v5;
  if ((v5 & 0x10000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 128) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x20000) == 0)
    {
LABEL_23:
      if ((v6 & 0x40000) == 0)
        goto LABEL_24;
      goto LABEL_101;
    }
  }
  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_23;
  }
  *(_WORD *)(a2 + 36) = *(_QWORD *)(a1 + 136);
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_102;
  }
LABEL_101:
  *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 144) & 0x1FF;
  if ((v6 & 0x80000) == 0)
  {
LABEL_25:
    if ((v6 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_103;
  }
LABEL_102:
  *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 152) & 0x1FF;
  if ((v6 & 0x100000) == 0)
  {
LABEL_26:
    if ((v6 & 0x200000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_103:
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 160) & 0x1FFFF;
  if ((v6 & 0x200000) != 0)
LABEL_27:
    *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 168) & 0x1FFF;
LABEL_28:
  v7 = v6;
  if ((v6 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 176) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x800000) != 0)
    *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  v8 = v7;
  if ((v7 & 0x1000000) != 0)
  {
    *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 192) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x2000000) == 0)
    {
LABEL_34:
      if ((v8 & 0x4000000) == 0)
        goto LABEL_35;
      goto LABEL_107;
    }
  }
  else if ((v7 & 0x2000000) == 0)
  {
    goto LABEL_34;
  }
  *(_DWORD *)(a2 + 44) = *(_QWORD *)(a1 + 200);
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_108;
  }
LABEL_107:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_109;
  }
LABEL_108:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v8 & 0x20000000) == 0)
      goto LABEL_38;
    goto LABEL_110;
  }
LABEL_109:
  *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 224);
  if ((v8 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x40000000) == 0)
      goto LABEL_39;
    goto LABEL_111;
  }
LABEL_110:
  *(_BYTE *)(a2 + 60) = *(_QWORD *)(a1 + 232) != 0;
  if ((v8 & 0x40000000) == 0)
  {
LABEL_39:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_112;
  }
LABEL_111:
  *(_BYTE *)(a2 + 61) = *(_QWORD *)(a1 + 240) != 0;
  if ((v8 & 0x80000000) == 0)
  {
LABEL_40:
    if ((v8 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_41;
  }
LABEL_112:
  *(_BYTE *)(a2 + 62) = *(_QWORD *)(a1 + 248) != 0;
  if ((v8 & 0x100000000) != 0)
LABEL_41:
    *(_BYTE *)(a2 + 63) = *(_QWORD *)(a1 + 256) != 0;
LABEL_42:
  v9 = v8;
  if ((v8 & 0x200000000) != 0)
  {
    *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 264) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x400000000) == 0)
    {
LABEL_44:
      if ((v9 & 0x800000000) == 0)
        goto LABEL_45;
      goto LABEL_116;
    }
  }
  else if ((v8 & 0x400000000) == 0)
  {
    goto LABEL_44;
  }
  *(_WORD *)(a2 + 64) = *(_QWORD *)(a1 + 272);
  if ((v9 & 0x800000000) == 0)
  {
LABEL_45:
    if ((v9 & 0x1000000000) == 0)
      goto LABEL_46;
    goto LABEL_117;
  }
LABEL_116:
  *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 280) & 0x1FF;
  if ((v9 & 0x1000000000) == 0)
  {
LABEL_46:
    if ((v9 & 0x2000000000) == 0)
      goto LABEL_47;
    goto LABEL_118;
  }
LABEL_117:
  *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 288) & 0x1FF;
  if ((v9 & 0x2000000000) == 0)
  {
LABEL_47:
    if ((v9 & 0x4000000000) == 0)
      goto LABEL_49;
    goto LABEL_48;
  }
LABEL_118:
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 296) & 0x1FFFF;
  if ((v9 & 0x4000000000) != 0)
LABEL_48:
    *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 304) & 0x1FFF;
LABEL_49:
  v10 = v9;
  if ((v9 & 0x8000000000) != 0)
  {
    *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 312) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x10000000000) != 0)
    *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 320);
  v11 = v10;
  if ((v10 & 0x20000000000) != 0)
  {
    *(_BYTE *)(a2 + 68) = *(_BYTE *)(a1 + 328) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x40000000000) == 0)
    {
LABEL_55:
      if ((v11 & 0x80000000000) == 0)
        goto LABEL_56;
      goto LABEL_122;
    }
  }
  else if ((v10 & 0x40000000000) == 0)
  {
    goto LABEL_55;
  }
  *(_DWORD *)(a2 + 72) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_123;
  }
LABEL_122:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_125;
  }
LABEL_124:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 360);
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_126;
  }
LABEL_125:
  *(_BYTE *)(a2 + 88) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 376);
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 384);
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_129;
  }
LABEL_128:
  *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_130;
  }
LABEL_129:
  *(_BYTE *)(a2 + 101) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_131;
  }
LABEL_130:
  *(_BYTE *)(a2 + 102) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_132;
  }
LABEL_131:
  *(_BYTE *)(a2 + 103) = *(_QWORD *)(a1 + 416) != 0;
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_133;
  }
LABEL_132:
  *(_BYTE *)(a2 + 104) = *(_QWORD *)(a1 + 424) != 0;
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_134;
  }
LABEL_133:
  *(_BYTE *)(a2 + 105) = *(_QWORD *)(a1 + 432) != 0;
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_135;
  }
LABEL_134:
  *(_BYTE *)(a2 + 106) = *(_QWORD *)(a1 + 440) != 0;
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_136;
  }
LABEL_135:
  *(_BYTE *)(a2 + 107) = *(_QWORD *)(a1 + 448) != 0;
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_137;
  }
LABEL_136:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_72;
    goto LABEL_138;
  }
LABEL_137:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) == 0)
  {
LABEL_72:
    if ((v11 & 0x1000000000000000) == 0)
      goto LABEL_73;
    goto LABEL_139;
  }
LABEL_138:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 472);
  if ((v11 & 0x1000000000000000) == 0)
  {
LABEL_73:
    if ((v11 & 0x2000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_140;
  }
LABEL_139:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 480);
  if ((v11 & 0x2000000000000000) == 0)
  {
LABEL_74:
    if ((v11 & 0x4000000000000000) == 0)
      goto LABEL_75;
LABEL_141:
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 496);
    if ((v11 & 0x8000000000000000) == 0)
      goto LABEL_76;
    goto LABEL_142;
  }
LABEL_140:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 488);
  if ((v11 & 0x4000000000000000) != 0)
    goto LABEL_141;
LABEL_75:
  if ((v11 & 0x8000000000000000) == 0)
    goto LABEL_76;
LABEL_142:
  *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 504);
LABEL_76:
  v12 = *(_QWORD *)(a1 + 1256);
  if ((v12 & 1) != 0)
    *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 512);
  if ((v12 & 2) != 0)
    *(_DWORD *)(a2 + 140) = *(_QWORD *)(a1 + 520);
  if ((v12 & 4) != 0)
    *(_BYTE *)(a2 + 144) = *(_QWORD *)(a1 + 528) != 0;
  if ((v12 & 8) != 0)
    *(_DWORD *)(a2 + 148) = *(_QWORD *)(a1 + 536);
  v14 = ((v3 & 2) >> 1)
      + (v2 & 1)
      + ((v3 & 4) >> 2)
      + ((v3 & 8) >> 3)
      + ((v3 & 0x10) >> 4)
      + ((v3 & 0x20) >> 5)
      + ((v3 & 0x40) >> 6)
      + ((unint64_t)(v4 & 0x80) >> 7)
      + ((v4 & 0x100) >> 8)
      + ((v5 & 0x200) >> 9)
      + ((v5 & 0x400) >> 10)
      + ((v5 & 0x800) >> 11)
      + ((v5 & 0x1000) >> 12)
      + ((v5 & 0x2000) >> 13)
      + ((v5 & 0x4000) >> 14)
      + ((unint64_t)((unsigned __int16)v5 & 0x8000) >> 15)
      + ((v5 & 0x10000) >> 16)
      + ((v6 & 0x20000) >> 17)
      + ((v6 & 0x40000) >> 18)
      + ((v6 & 0x80000) >> 19)
      + ((v6 & 0x100000) >> 20)
      + ((v6 & 0x200000) >> 21)
      + ((v6 & 0x400000) >> 22)
      + ((v7 & 0x800000) >> 23)
      + ((v7 & 0x1000000) >> 24)
      + ((v8 & 0x2000000) >> 25)
      + ((v8 & 0x4000000) >> 26)
      + ((v8 & 0x8000000) >> 27)
      + ((v8 & 0x10000000) >> 28)
      + ((v8 & 0x20000000) >> 29)
      + ((v8 & 0x40000000) >> 30);
  v13 = v12 & 8;
  v17 = v8 & 0x200000000;
  v18 = v9 & 0x400000000;
  v19 = v9 & 0x800000000;
  v20 = v9 & 0x1000000000;
  v21 = v9 & 0x2000000000;
  v22 = v9 & 0x4000000000;
  v23 = v9 & 0x8000000000;
  v24 = v10 & 0x10000000000;
  v25 = v10 & 0x20000000000;
  v26 = v11 & 0x80000000000;
  v27 = v11 & 0x40000000000;
  v16 = BYTE4(v8) & 1;
  v28 = v12 & 1;
  return v14
       + (v8 >> 31)
       + v16
       + (v17 >> 33)
       + (v18 >> 34)
       + (v19 >> 35)
       + (v20 >> 36)
       + (v21 >> 37)
       + (v22 >> 38)
       + (v23 >> 39)
       + (v24 >> 40)
       + (v25 >> 41)
       + (v11 >> 63)
       + (v27 >> 42)
       + (v26 >> 43)
       + ((v11 & 0x100000000000) >> 44)
       + ((v11 & 0x200000000000) >> 45)
       + ((v11 & 0x400000000000) >> 46)
       + ((v11 & 0x800000000000) >> 47)
       + ((v11 & 0x1000000000000) >> 48)
       + ((v11 & 0x2000000000000) >> 49)
       + ((v11 & 0x4000000000000) >> 50)
       + ((v11 & 0x8000000000000) >> 51)
       + ((v11 & 0x10000000000000) >> 52)
       + ((v11 & 0x20000000000000) >> 53)
       + ((v11 & 0x40000000000000) >> 54)
       + ((v11 & 0x80000000000000) >> 55)
       + ((v11 & 0x100000000000000) >> 56)
       + ((v11 & 0x200000000000000) >> 57)
       + ((v11 & 0x400000000000000) >> 58)
       + ((v11 & 0x800000000000000) >> 59)
       + ((v11 & 0x1000000000000000) >> 60)
       + ((v11 & 0x2000000000000000) >> 61)
       + ((v11 & 0x4000000000000000) >> 62)
       + v28
       + ((unint64_t)(v12 & 2) >> 1)
       + ((unint64_t)(v12 & 4) >> 2)
       + (v13 >> 3);
}

unint64_t sub_1C4D2C964(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_87;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_88;
  }
LABEL_87:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_89;
  }
LABEL_88:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_89:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_93;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_94;
  }
LABEL_93:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_95;
  }
LABEL_94:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_96;
  }
LABEL_95:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_97;
  }
LABEL_96:
  *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
LABEL_97:
  *(_BYTE *)(a2 + 28) = *(_QWORD *)(a1 + 112) != 0;
  if ((v5 & 0x8000) != 0)
LABEL_20:
    *(_DWORD *)(a2 + 32) = *(_QWORD *)(a1 + 120);
LABEL_21:
  v6 = v5;
  if ((v5 & 0x10000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 128) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x20000) == 0)
    {
LABEL_23:
      if ((v6 & 0x40000) == 0)
        goto LABEL_24;
      goto LABEL_101;
    }
  }
  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_23;
  }
  *(_WORD *)(a2 + 36) = *(_QWORD *)(a1 + 136);
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_102;
  }
LABEL_101:
  *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 144) & 0x1FF;
  if ((v6 & 0x80000) == 0)
  {
LABEL_25:
    if ((v6 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_103;
  }
LABEL_102:
  *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 152) & 0x1FF;
  if ((v6 & 0x100000) == 0)
  {
LABEL_26:
    if ((v6 & 0x200000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_103:
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 160) & 0x1FFFF;
  if ((v6 & 0x200000) != 0)
LABEL_27:
    *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 168) & 0x1FFF;
LABEL_28:
  v7 = v6;
  if ((v6 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 176) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x800000) != 0)
    *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  v8 = v7;
  if ((v7 & 0x1000000) != 0)
  {
    *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 192) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x2000000) == 0)
    {
LABEL_34:
      if ((v8 & 0x4000000) == 0)
        goto LABEL_35;
      goto LABEL_107;
    }
  }
  else if ((v7 & 0x2000000) == 0)
  {
    goto LABEL_34;
  }
  *(_DWORD *)(a2 + 44) = *(_QWORD *)(a1 + 200);
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_108;
  }
LABEL_107:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_109;
  }
LABEL_108:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v8 & 0x20000000) == 0)
      goto LABEL_38;
    goto LABEL_110;
  }
LABEL_109:
  *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 224);
  if ((v8 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x40000000) == 0)
      goto LABEL_39;
    goto LABEL_111;
  }
LABEL_110:
  *(_BYTE *)(a2 + 60) = *(_QWORD *)(a1 + 232) != 0;
  if ((v8 & 0x40000000) == 0)
  {
LABEL_39:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_112;
  }
LABEL_111:
  *(_BYTE *)(a2 + 61) = *(_QWORD *)(a1 + 240) != 0;
  if ((v8 & 0x80000000) == 0)
  {
LABEL_40:
    if ((v8 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_41;
  }
LABEL_112:
  *(_BYTE *)(a2 + 62) = *(_QWORD *)(a1 + 248) != 0;
  if ((v8 & 0x100000000) != 0)
LABEL_41:
    *(_BYTE *)(a2 + 63) = *(_QWORD *)(a1 + 256) != 0;
LABEL_42:
  v9 = v8;
  if ((v8 & 0x200000000) != 0)
  {
    *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 264) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x400000000) == 0)
    {
LABEL_44:
      if ((v9 & 0x800000000) == 0)
        goto LABEL_45;
      goto LABEL_116;
    }
  }
  else if ((v8 & 0x400000000) == 0)
  {
    goto LABEL_44;
  }
  *(_WORD *)(a2 + 64) = *(_QWORD *)(a1 + 272);
  if ((v9 & 0x800000000) == 0)
  {
LABEL_45:
    if ((v9 & 0x1000000000) == 0)
      goto LABEL_46;
    goto LABEL_117;
  }
LABEL_116:
  *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 280) & 0x1FF;
  if ((v9 & 0x1000000000) == 0)
  {
LABEL_46:
    if ((v9 & 0x2000000000) == 0)
      goto LABEL_47;
    goto LABEL_118;
  }
LABEL_117:
  *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 288) & 0x1FF;
  if ((v9 & 0x2000000000) == 0)
  {
LABEL_47:
    if ((v9 & 0x4000000000) == 0)
      goto LABEL_49;
    goto LABEL_48;
  }
LABEL_118:
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 296) & 0x1FFFF;
  if ((v9 & 0x4000000000) != 0)
LABEL_48:
    *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 304) & 0x1FFF;
LABEL_49:
  v10 = v9;
  if ((v9 & 0x8000000000) != 0)
  {
    *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 312) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x10000000000) != 0)
    *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 320);
  v11 = v10;
  if ((v10 & 0x20000000000) != 0)
  {
    *(_BYTE *)(a2 + 68) = *(_BYTE *)(a1 + 328) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x40000000000) == 0)
    {
LABEL_55:
      if ((v11 & 0x80000000000) == 0)
        goto LABEL_56;
      goto LABEL_122;
    }
  }
  else if ((v10 & 0x40000000000) == 0)
  {
    goto LABEL_55;
  }
  *(_DWORD *)(a2 + 72) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_123;
  }
LABEL_122:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_125;
  }
LABEL_124:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 360);
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_126;
  }
LABEL_125:
  *(_BYTE *)(a2 + 88) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 376);
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 384);
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_129;
  }
LABEL_128:
  *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_130;
  }
LABEL_129:
  *(_BYTE *)(a2 + 101) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_131;
  }
LABEL_130:
  *(_BYTE *)(a2 + 102) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_132;
  }
LABEL_131:
  *(_BYTE *)(a2 + 103) = *(_QWORD *)(a1 + 416) != 0;
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_133;
  }
LABEL_132:
  *(_BYTE *)(a2 + 104) = *(_QWORD *)(a1 + 424) != 0;
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_134;
  }
LABEL_133:
  *(_BYTE *)(a2 + 105) = *(_QWORD *)(a1 + 432) != 0;
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_135;
  }
LABEL_134:
  *(_BYTE *)(a2 + 106) = *(_QWORD *)(a1 + 440) != 0;
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_136;
  }
LABEL_135:
  *(_BYTE *)(a2 + 107) = *(_QWORD *)(a1 + 448) != 0;
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_137;
  }
LABEL_136:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_72;
    goto LABEL_138;
  }
LABEL_137:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) == 0)
  {
LABEL_72:
    if ((v11 & 0x1000000000000000) == 0)
      goto LABEL_73;
    goto LABEL_139;
  }
LABEL_138:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 472);
  if ((v11 & 0x1000000000000000) == 0)
  {
LABEL_73:
    if ((v11 & 0x2000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_140;
  }
LABEL_139:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 480);
  if ((v11 & 0x2000000000000000) == 0)
  {
LABEL_74:
    if ((v11 & 0x4000000000000000) == 0)
      goto LABEL_75;
LABEL_141:
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 496);
    if ((v11 & 0x8000000000000000) == 0)
      goto LABEL_76;
    goto LABEL_142;
  }
LABEL_140:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 488);
  if ((v11 & 0x4000000000000000) != 0)
    goto LABEL_141;
LABEL_75:
  if ((v11 & 0x8000000000000000) == 0)
    goto LABEL_76;
LABEL_142:
  *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 504);
LABEL_76:
  v12 = *(_QWORD *)(a1 + 1256);
  if ((v12 & 1) != 0)
    *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 512);
  if ((v12 & 2) != 0)
    *(_DWORD *)(a2 + 140) = *(_QWORD *)(a1 + 520);
  if ((v12 & 4) != 0)
    *(_BYTE *)(a2 + 144) = *(_QWORD *)(a1 + 528) != 0;
  if ((v12 & 8) != 0)
    *(_DWORD *)(a2 + 148) = *(_QWORD *)(a1 + 536);
  v14 = ((v3 & 2) >> 1)
      + (v2 & 1)
      + ((v3 & 4) >> 2)
      + ((v3 & 8) >> 3)
      + ((v3 & 0x10) >> 4)
      + ((v3 & 0x20) >> 5)
      + ((v3 & 0x40) >> 6)
      + ((unint64_t)(v4 & 0x80) >> 7)
      + ((v4 & 0x100) >> 8)
      + ((v5 & 0x200) >> 9)
      + ((v5 & 0x400) >> 10)
      + ((v5 & 0x800) >> 11)
      + ((v5 & 0x1000) >> 12)
      + ((v5 & 0x2000) >> 13)
      + ((v5 & 0x4000) >> 14)
      + ((unint64_t)((unsigned __int16)v5 & 0x8000) >> 15)
      + ((v5 & 0x10000) >> 16)
      + ((v6 & 0x20000) >> 17)
      + ((v6 & 0x40000) >> 18)
      + ((v6 & 0x80000) >> 19)
      + ((v6 & 0x100000) >> 20)
      + ((v6 & 0x200000) >> 21)
      + ((v6 & 0x400000) >> 22)
      + ((v7 & 0x800000) >> 23)
      + ((v7 & 0x1000000) >> 24)
      + ((v8 & 0x2000000) >> 25)
      + ((v8 & 0x4000000) >> 26)
      + ((v8 & 0x8000000) >> 27)
      + ((v8 & 0x10000000) >> 28)
      + ((v8 & 0x20000000) >> 29)
      + ((v8 & 0x40000000) >> 30);
  v13 = v12 & 8;
  v17 = v8 & 0x200000000;
  v18 = v9 & 0x400000000;
  v19 = v9 & 0x800000000;
  v20 = v9 & 0x1000000000;
  v21 = v9 & 0x2000000000;
  v22 = v9 & 0x4000000000;
  v23 = v9 & 0x8000000000;
  v24 = v10 & 0x10000000000;
  v25 = v10 & 0x20000000000;
  v26 = v11 & 0x80000000000;
  v27 = v11 & 0x40000000000;
  v16 = BYTE4(v8) & 1;
  v28 = v12 & 1;
  return v14
       + (v8 >> 31)
       + v16
       + (v17 >> 33)
       + (v18 >> 34)
       + (v19 >> 35)
       + (v20 >> 36)
       + (v21 >> 37)
       + (v22 >> 38)
       + (v23 >> 39)
       + (v24 >> 40)
       + (v25 >> 41)
       + (v11 >> 63)
       + (v27 >> 42)
       + (v26 >> 43)
       + ((v11 & 0x100000000000) >> 44)
       + ((v11 & 0x200000000000) >> 45)
       + ((v11 & 0x400000000000) >> 46)
       + ((v11 & 0x800000000000) >> 47)
       + ((v11 & 0x1000000000000) >> 48)
       + ((v11 & 0x2000000000000) >> 49)
       + ((v11 & 0x4000000000000) >> 50)
       + ((v11 & 0x8000000000000) >> 51)
       + ((v11 & 0x10000000000000) >> 52)
       + ((v11 & 0x20000000000000) >> 53)
       + ((v11 & 0x40000000000000) >> 54)
       + ((v11 & 0x80000000000000) >> 55)
       + ((v11 & 0x100000000000000) >> 56)
       + ((v11 & 0x200000000000000) >> 57)
       + ((v11 & 0x400000000000000) >> 58)
       + ((v11 & 0x800000000000000) >> 59)
       + ((v11 & 0x1000000000000000) >> 60)
       + ((v11 & 0x2000000000000000) >> 61)
       + ((v11 & 0x4000000000000000) >> 62)
       + v28
       + ((unint64_t)(v12 & 2) >> 1)
       + ((unint64_t)(v12 & 4) >> 2)
       + (v13 >> 3);
}

unint64_t sub_1C4D2D338(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_87;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_88;
  }
LABEL_87:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_89;
  }
LABEL_88:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_89:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_93;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_94;
  }
LABEL_93:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_95;
  }
LABEL_94:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_96;
  }
LABEL_95:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_97;
  }
LABEL_96:
  *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
LABEL_97:
  *(_BYTE *)(a2 + 28) = *(_QWORD *)(a1 + 112) != 0;
  if ((v5 & 0x8000) != 0)
LABEL_20:
    *(_DWORD *)(a2 + 32) = *(_QWORD *)(a1 + 120);
LABEL_21:
  v6 = v5;
  if ((v5 & 0x10000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 128) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x20000) == 0)
    {
LABEL_23:
      if ((v6 & 0x40000) == 0)
        goto LABEL_24;
      goto LABEL_101;
    }
  }
  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_23;
  }
  *(_WORD *)(a2 + 36) = *(_QWORD *)(a1 + 136);
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_102;
  }
LABEL_101:
  *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 144) & 0x1FF;
  if ((v6 & 0x80000) == 0)
  {
LABEL_25:
    if ((v6 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_103;
  }
LABEL_102:
  *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 152) & 0x1FF;
  if ((v6 & 0x100000) == 0)
  {
LABEL_26:
    if ((v6 & 0x200000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_103:
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 160) & 0x1FFFF;
  if ((v6 & 0x200000) != 0)
LABEL_27:
    *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 168) & 0x1FFF;
LABEL_28:
  v7 = v6;
  if ((v6 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 176) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x800000) != 0)
    *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  v8 = v7;
  if ((v7 & 0x1000000) != 0)
  {
    *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 192) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x2000000) == 0)
    {
LABEL_34:
      if ((v8 & 0x4000000) == 0)
        goto LABEL_35;
      goto LABEL_107;
    }
  }
  else if ((v7 & 0x2000000) == 0)
  {
    goto LABEL_34;
  }
  *(_DWORD *)(a2 + 44) = *(_QWORD *)(a1 + 200);
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_108;
  }
LABEL_107:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_109;
  }
LABEL_108:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v8 & 0x20000000) == 0)
      goto LABEL_38;
    goto LABEL_110;
  }
LABEL_109:
  *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 224);
  if ((v8 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x40000000) == 0)
      goto LABEL_39;
    goto LABEL_111;
  }
LABEL_110:
  *(_BYTE *)(a2 + 60) = *(_QWORD *)(a1 + 232) != 0;
  if ((v8 & 0x40000000) == 0)
  {
LABEL_39:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_112;
  }
LABEL_111:
  *(_BYTE *)(a2 + 61) = *(_QWORD *)(a1 + 240) != 0;
  if ((v8 & 0x80000000) == 0)
  {
LABEL_40:
    if ((v8 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_41;
  }
LABEL_112:
  *(_BYTE *)(a2 + 62) = *(_QWORD *)(a1 + 248) != 0;
  if ((v8 & 0x100000000) != 0)
LABEL_41:
    *(_BYTE *)(a2 + 63) = *(_QWORD *)(a1 + 256) != 0;
LABEL_42:
  v9 = v8;
  if ((v8 & 0x200000000) != 0)
  {
    *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 264) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x400000000) == 0)
    {
LABEL_44:
      if ((v9 & 0x800000000) == 0)
        goto LABEL_45;
      goto LABEL_116;
    }
  }
  else if ((v8 & 0x400000000) == 0)
  {
    goto LABEL_44;
  }
  *(_WORD *)(a2 + 64) = *(_QWORD *)(a1 + 272);
  if ((v9 & 0x800000000) == 0)
  {
LABEL_45:
    if ((v9 & 0x1000000000) == 0)
      goto LABEL_46;
    goto LABEL_117;
  }
LABEL_116:
  *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 280) & 0x1FF;
  if ((v9 & 0x1000000000) == 0)
  {
LABEL_46:
    if ((v9 & 0x2000000000) == 0)
      goto LABEL_47;
    goto LABEL_118;
  }
LABEL_117:
  *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 288) & 0x1FF;
  if ((v9 & 0x2000000000) == 0)
  {
LABEL_47:
    if ((v9 & 0x4000000000) == 0)
      goto LABEL_49;
    goto LABEL_48;
  }
LABEL_118:
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 296) & 0x1FFFF;
  if ((v9 & 0x4000000000) != 0)
LABEL_48:
    *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 304) & 0x1FFF;
LABEL_49:
  v10 = v9;
  if ((v9 & 0x8000000000) != 0)
  {
    *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 312) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x10000000000) != 0)
    *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 320);
  v11 = v10;
  if ((v10 & 0x20000000000) != 0)
  {
    *(_BYTE *)(a2 + 68) = *(_BYTE *)(a1 + 328) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x40000000000) == 0)
    {
LABEL_55:
      if ((v11 & 0x80000000000) == 0)
        goto LABEL_56;
      goto LABEL_122;
    }
  }
  else if ((v10 & 0x40000000000) == 0)
  {
    goto LABEL_55;
  }
  *(_DWORD *)(a2 + 72) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_123;
  }
LABEL_122:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_125;
  }
LABEL_124:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 360);
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_126;
  }
LABEL_125:
  *(_BYTE *)(a2 + 88) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 376);
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 384);
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_129;
  }
LABEL_128:
  *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_130;
  }
LABEL_129:
  *(_BYTE *)(a2 + 101) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_131;
  }
LABEL_130:
  *(_BYTE *)(a2 + 102) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_132;
  }
LABEL_131:
  *(_BYTE *)(a2 + 103) = *(_QWORD *)(a1 + 416) != 0;
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_133;
  }
LABEL_132:
  *(_BYTE *)(a2 + 104) = *(_QWORD *)(a1 + 424) != 0;
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_134;
  }
LABEL_133:
  *(_BYTE *)(a2 + 105) = *(_QWORD *)(a1 + 432) != 0;
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_135;
  }
LABEL_134:
  *(_BYTE *)(a2 + 106) = *(_QWORD *)(a1 + 440) != 0;
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_136;
  }
LABEL_135:
  *(_BYTE *)(a2 + 107) = *(_QWORD *)(a1 + 448) != 0;
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_137;
  }
LABEL_136:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_72;
    goto LABEL_138;
  }
LABEL_137:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) == 0)
  {
LABEL_72:
    if ((v11 & 0x1000000000000000) == 0)
      goto LABEL_73;
    goto LABEL_139;
  }
LABEL_138:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 472);
  if ((v11 & 0x1000000000000000) == 0)
  {
LABEL_73:
    if ((v11 & 0x2000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_140;
  }
LABEL_139:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 480);
  if ((v11 & 0x2000000000000000) == 0)
  {
LABEL_74:
    if ((v11 & 0x4000000000000000) == 0)
      goto LABEL_75;
LABEL_141:
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 496);
    if ((v11 & 0x8000000000000000) == 0)
      goto LABEL_76;
    goto LABEL_142;
  }
LABEL_140:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 488);
  if ((v11 & 0x4000000000000000) != 0)
    goto LABEL_141;
LABEL_75:
  if ((v11 & 0x8000000000000000) == 0)
    goto LABEL_76;
LABEL_142:
  *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 504);
LABEL_76:
  v12 = *(_QWORD *)(a1 + 1256);
  if ((v12 & 1) != 0)
    *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 512);
  if ((v12 & 2) != 0)
    *(_DWORD *)(a2 + 140) = *(_QWORD *)(a1 + 520);
  if ((v12 & 4) != 0)
    *(_BYTE *)(a2 + 144) = *(_QWORD *)(a1 + 528) != 0;
  if ((v12 & 8) != 0)
    *(_DWORD *)(a2 + 148) = *(_QWORD *)(a1 + 536);
  v14 = ((v3 & 2) >> 1)
      + (v2 & 1)
      + ((v3 & 4) >> 2)
      + ((v3 & 8) >> 3)
      + ((v3 & 0x10) >> 4)
      + ((v3 & 0x20) >> 5)
      + ((v3 & 0x40) >> 6)
      + ((unint64_t)(v4 & 0x80) >> 7)
      + ((v4 & 0x100) >> 8)
      + ((v5 & 0x200) >> 9)
      + ((v5 & 0x400) >> 10)
      + ((v5 & 0x800) >> 11)
      + ((v5 & 0x1000) >> 12)
      + ((v5 & 0x2000) >> 13)
      + ((v5 & 0x4000) >> 14)
      + ((unint64_t)((unsigned __int16)v5 & 0x8000) >> 15)
      + ((v5 & 0x10000) >> 16)
      + ((v6 & 0x20000) >> 17)
      + ((v6 & 0x40000) >> 18)
      + ((v6 & 0x80000) >> 19)
      + ((v6 & 0x100000) >> 20)
      + ((v6 & 0x200000) >> 21)
      + ((v6 & 0x400000) >> 22)
      + ((v7 & 0x800000) >> 23)
      + ((v7 & 0x1000000) >> 24)
      + ((v8 & 0x2000000) >> 25)
      + ((v8 & 0x4000000) >> 26)
      + ((v8 & 0x8000000) >> 27)
      + ((v8 & 0x10000000) >> 28)
      + ((v8 & 0x20000000) >> 29)
      + ((v8 & 0x40000000) >> 30);
  v13 = v12 & 8;
  v17 = v8 & 0x200000000;
  v18 = v9 & 0x400000000;
  v19 = v9 & 0x800000000;
  v20 = v9 & 0x1000000000;
  v21 = v9 & 0x2000000000;
  v22 = v9 & 0x4000000000;
  v23 = v9 & 0x8000000000;
  v24 = v10 & 0x10000000000;
  v25 = v10 & 0x20000000000;
  v26 = v11 & 0x80000000000;
  v27 = v11 & 0x40000000000;
  v16 = BYTE4(v8) & 1;
  v28 = v12 & 1;
  return v14
       + (v8 >> 31)
       + v16
       + (v17 >> 33)
       + (v18 >> 34)
       + (v19 >> 35)
       + (v20 >> 36)
       + (v21 >> 37)
       + (v22 >> 38)
       + (v23 >> 39)
       + (v24 >> 40)
       + (v25 >> 41)
       + (v11 >> 63)
       + (v27 >> 42)
       + (v26 >> 43)
       + ((v11 & 0x100000000000) >> 44)
       + ((v11 & 0x200000000000) >> 45)
       + ((v11 & 0x400000000000) >> 46)
       + ((v11 & 0x800000000000) >> 47)
       + ((v11 & 0x1000000000000) >> 48)
       + ((v11 & 0x2000000000000) >> 49)
       + ((v11 & 0x4000000000000) >> 50)
       + ((v11 & 0x8000000000000) >> 51)
       + ((v11 & 0x10000000000000) >> 52)
       + ((v11 & 0x20000000000000) >> 53)
       + ((v11 & 0x40000000000000) >> 54)
       + ((v11 & 0x80000000000000) >> 55)
       + ((v11 & 0x100000000000000) >> 56)
       + ((v11 & 0x200000000000000) >> 57)
       + ((v11 & 0x400000000000000) >> 58)
       + ((v11 & 0x800000000000000) >> 59)
       + ((v11 & 0x1000000000000000) >> 60)
       + ((v11 & 0x2000000000000000) >> 61)
       + ((v11 & 0x4000000000000000) >> 62)
       + v28
       + ((unint64_t)(v12 & 2) >> 1)
       + ((unint64_t)(v12 & 4) >> 2)
       + (v13 >> 3);
}

unint64_t sub_1C4D2DD0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_81;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_82;
  }
LABEL_81:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_83;
  }
LABEL_82:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_83:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_87;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_88;
  }
LABEL_87:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_89;
  }
LABEL_88:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_89:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_93;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_94;
  }
LABEL_93:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_95;
  }
LABEL_94:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_95:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_99;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_100;
  }
LABEL_99:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_101;
  }
LABEL_100:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_102;
  }
LABEL_101:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_38;
    goto LABEL_37;
  }
LABEL_102:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) != 0)
LABEL_37:
    *(_BYTE *)(a2 + 53) = *(_QWORD *)(a1 + 224) != 0;
LABEL_38:
  v9 = v8;
  if ((v8 & 0x20000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 232) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x40000000) == 0)
    {
LABEL_40:
      if ((v9 & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_106;
    }
  }
  else if ((v8 & 0x40000000) == 0)
  {
    goto LABEL_40;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 240);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_107;
  }
LABEL_106:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_43;
    goto LABEL_108;
  }
LABEL_107:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 256) & 0x1FF;
  if ((v9 & 0x200000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x400000000) == 0)
      goto LABEL_45;
    goto LABEL_44;
  }
LABEL_108:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 264) & 0x1FFFF;
  if ((v9 & 0x400000000) != 0)
LABEL_44:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 272) & 0x1FFF;
LABEL_45:
  v10 = v9;
  if ((v9 & 0x800000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 280) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x1000000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 288);
  v11 = v10;
  if ((v10 & 0x2000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 296) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x4000000000) == 0)
    {
LABEL_51:
      if ((v11 & 0x8000000000) == 0)
        goto LABEL_52;
      goto LABEL_112;
    }
  }
  else if ((v10 & 0x4000000000) == 0)
  {
    goto LABEL_51;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_113;
  }
LABEL_112:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 312);
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_114;
  }
LABEL_113:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 320) != 0;
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_115;
  }
LABEL_114:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 328);
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_116;
  }
LABEL_115:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 336) != 0;
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_117;
  }
LABEL_116:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_118;
  }
LABEL_117:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 352);
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_120;
  }
LABEL_119:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_125;
  }
LABEL_124:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_126;
  }
LABEL_125:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 416) != 0;
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 424);
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 432);
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_129;
  }
LABEL_128:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 440);
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_130;
  }
LABEL_129:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_131;
  }
LABEL_130:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_72;
    goto LABEL_132;
  }
LABEL_131:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) == 0)
  {
LABEL_72:
    if ((v11 & 0x1000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_73;
  }
LABEL_132:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 472);
  if ((v11 & 0x1000000000000000) != 0)
LABEL_73:
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 480);
LABEL_74:
  v12 = v2 & 1;
  if ((v11 & 0x2000000000000000) != 0)
    *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 488);
  v13 = v3 & 2;
  v14 = v3 & 4;
  v15 = v3 & 8;
  v16 = v3 & 0x10;
  v17 = v3 & 0x20;
  v18 = v3 & 0x40;
  v19 = v4 & 0x80;
  v20 = v4 & 0x100;
  v21 = v5 & 0x200;
  v22 = v5 & 0x400;
  v23 = v5 & 0x800;
  v24 = v5 & 0x1000;
  v25 = v5 & 0x2000;
  v26 = v5 & 0x4000;
  v27 = (unsigned __int16)v6 & 0x8000;
  v28 = v6 & 0x10000;
  v29 = v6 & 0x20000;
  v30 = v6 & 0x40000;
  v31 = v6 & 0x80000;
  v32 = v6 & 0x100000;
  if ((v11 & 0x4000000000000000) != 0)
    *(_BYTE *)(a2 + 136) = *(_QWORD *)(a1 + 496) != 0;
  v33 = v7 & 0x200000;
  v36 = v7 & 0x400000;
  v37 = v8 & 0x800000;
  v38 = v8 & 0x1000000;
  v39 = v8 & 0x2000000;
  v40 = v8 & 0x4000000;
  v41 = v8 & 0x8000000;
  v42 = v8 & 0x10000000;
  v44 = v8 & 0x20000000;
  v45 = v9 & 0x200000000;
  v46 = v9 & 0x400000000;
  v47 = v9 & 0x800000000;
  v48 = v10 & 0x1000000000;
  v49 = v11 & 0x4000000000;
  v43 = BYTE4(v9) & 1;
  v34 = (v13 >> 1)
      + v12
      + (v14 >> 2)
      + (v15 >> 3)
      + (v16 >> 4)
      + (v17 >> 5)
      + (v18 >> 6)
      + (v19 >> 7)
      + (v20 >> 8)
      + (v21 >> 9)
      + (v22 >> 10)
      + (v23 >> 11)
      + (v24 >> 12)
      + (v25 >> 13)
      + (v26 >> 14)
      + (v27 >> 15)
      + (v28 >> 16)
      + (v29 >> 17)
      + (v30 >> 18)
      + (v31 >> 19)
      + (v32 >> 20)
      + (v33 >> 21)
      + (v36 >> 22)
      + (v37 >> 23)
      + (v38 >> 24)
      + (v39 >> 25)
      + (v40 >> 26)
      + (v41 >> 27)
      + (v42 >> 28)
      + (v44 >> 29)
      + ((v9 & 0x40000000) >> 30)
      + (v9 >> 31)
      + v43
      + (v45 >> 33)
      + (v46 >> 34)
      + (v47 >> 35)
      + (v48 >> 36)
      + ((v10 & 0x2000000000uLL) >> 37)
      + (v49 >> 38)
      + ((v11 & 0x8000000000uLL) >> 39)
      + ((v11 & 0x10000000000uLL) >> 40)
      + ((v11 & 0x20000000000uLL) >> 41)
      + ((v11 & 0x40000000000uLL) >> 42);
  return v34
       + ((v11 & 0x80000000000uLL) >> 43)
       + ((v11 & 0x100000000000uLL) >> 44)
       + ((v11 & 0x200000000000uLL) >> 45)
       + ((v11 & 0x400000000000uLL) >> 46)
       + ((v11 & 0x800000000000uLL) >> 47)
       + ((v11 & 0x1000000000000uLL) >> 48)
       + ((v11 & 0x2000000000000uLL) >> 49)
       + ((v11 & 0x4000000000000uLL) >> 50)
       + ((v11 & 0x8000000000000uLL) >> 51)
       + ((v11 & 0x10000000000000uLL) >> 52)
       + ((v11 & 0x20000000000000uLL) >> 53)
       + ((v11 & 0x40000000000000uLL) >> 54)
       + ((v11 & 0x80000000000000uLL) >> 55)
       + ((v11 & 0x100000000000000uLL) >> 56)
       + ((v11 & 0x200000000000000uLL) >> 57)
       + ((v11 & 0x400000000000000uLL) >> 58)
       + ((v11 & 0x800000000000000uLL) >> 59)
       + ((v11 & 0x1000000000000000uLL) >> 60)
       + ((v11 & 0x2000000000000000uLL) >> 61)
       + ((v11 & 0x4000000000000000uLL) >> 62);
}

unint64_t sub_1C4D2E608(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_81;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_82;
  }
LABEL_81:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_83;
  }
LABEL_82:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_83:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_87;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_88;
  }
LABEL_87:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_89;
  }
LABEL_88:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_89:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_93;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_94;
  }
LABEL_93:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_95;
  }
LABEL_94:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_95:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_99;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_100;
  }
LABEL_99:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_101;
  }
LABEL_100:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_102;
  }
LABEL_101:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_38;
    goto LABEL_37;
  }
LABEL_102:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) != 0)
LABEL_37:
    *(_BYTE *)(a2 + 53) = *(_QWORD *)(a1 + 224) != 0;
LABEL_38:
  v9 = v8;
  if ((v8 & 0x20000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 232) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x40000000) == 0)
    {
LABEL_40:
      if ((v9 & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_106;
    }
  }
  else if ((v8 & 0x40000000) == 0)
  {
    goto LABEL_40;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 240);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_107;
  }
LABEL_106:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_43;
    goto LABEL_108;
  }
LABEL_107:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 256) & 0x1FF;
  if ((v9 & 0x200000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x400000000) == 0)
      goto LABEL_45;
    goto LABEL_44;
  }
LABEL_108:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 264) & 0x1FFFF;
  if ((v9 & 0x400000000) != 0)
LABEL_44:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 272) & 0x1FFF;
LABEL_45:
  v10 = v9;
  if ((v9 & 0x800000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 280) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x1000000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 288);
  v11 = v10;
  if ((v10 & 0x2000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 296) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x4000000000) == 0)
    {
LABEL_51:
      if ((v11 & 0x8000000000) == 0)
        goto LABEL_52;
      goto LABEL_112;
    }
  }
  else if ((v10 & 0x4000000000) == 0)
  {
    goto LABEL_51;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_113;
  }
LABEL_112:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 312);
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_114;
  }
LABEL_113:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 320) != 0;
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_115;
  }
LABEL_114:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 328);
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_116;
  }
LABEL_115:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 336) != 0;
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_117;
  }
LABEL_116:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_118;
  }
LABEL_117:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 352);
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_120;
  }
LABEL_119:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_125;
  }
LABEL_124:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_126;
  }
LABEL_125:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 416) != 0;
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 424);
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 432);
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_129;
  }
LABEL_128:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 440);
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_130;
  }
LABEL_129:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_131;
  }
LABEL_130:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_72;
    goto LABEL_132;
  }
LABEL_131:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) == 0)
  {
LABEL_72:
    if ((v11 & 0x1000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_73;
  }
LABEL_132:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 472);
  if ((v11 & 0x1000000000000000) != 0)
LABEL_73:
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 480);
LABEL_74:
  v12 = v2 & 1;
  if ((v11 & 0x2000000000000000) != 0)
    *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 488);
  v13 = v3 & 2;
  v14 = v3 & 4;
  v15 = v3 & 8;
  v16 = v3 & 0x10;
  v17 = v3 & 0x20;
  v18 = v3 & 0x40;
  v19 = v4 & 0x80;
  v20 = v4 & 0x100;
  v21 = v5 & 0x200;
  v22 = v5 & 0x400;
  v23 = v5 & 0x800;
  v24 = v5 & 0x1000;
  v25 = v5 & 0x2000;
  v26 = v5 & 0x4000;
  v27 = (unsigned __int16)v6 & 0x8000;
  v28 = v6 & 0x10000;
  v29 = v6 & 0x20000;
  v30 = v6 & 0x40000;
  v31 = v6 & 0x80000;
  v32 = v6 & 0x100000;
  if ((v11 & 0x4000000000000000) != 0)
    *(_BYTE *)(a2 + 136) = *(_QWORD *)(a1 + 496) != 0;
  v33 = v7 & 0x200000;
  v36 = v7 & 0x400000;
  v37 = v8 & 0x800000;
  v38 = v8 & 0x1000000;
  v39 = v8 & 0x2000000;
  v40 = v8 & 0x4000000;
  v41 = v8 & 0x8000000;
  v42 = v8 & 0x10000000;
  v44 = v8 & 0x20000000;
  v45 = v9 & 0x200000000;
  v46 = v9 & 0x400000000;
  v47 = v9 & 0x800000000;
  v48 = v10 & 0x1000000000;
  v49 = v11 & 0x4000000000;
  v43 = BYTE4(v9) & 1;
  v34 = (v13 >> 1)
      + v12
      + (v14 >> 2)
      + (v15 >> 3)
      + (v16 >> 4)
      + (v17 >> 5)
      + (v18 >> 6)
      + (v19 >> 7)
      + (v20 >> 8)
      + (v21 >> 9)
      + (v22 >> 10)
      + (v23 >> 11)
      + (v24 >> 12)
      + (v25 >> 13)
      + (v26 >> 14)
      + (v27 >> 15)
      + (v28 >> 16)
      + (v29 >> 17)
      + (v30 >> 18)
      + (v31 >> 19)
      + (v32 >> 20)
      + (v33 >> 21)
      + (v36 >> 22)
      + (v37 >> 23)
      + (v38 >> 24)
      + (v39 >> 25)
      + (v40 >> 26)
      + (v41 >> 27)
      + (v42 >> 28)
      + (v44 >> 29)
      + ((v9 & 0x40000000) >> 30)
      + (v9 >> 31)
      + v43
      + (v45 >> 33)
      + (v46 >> 34)
      + (v47 >> 35)
      + (v48 >> 36)
      + ((v10 & 0x2000000000uLL) >> 37)
      + (v49 >> 38)
      + ((v11 & 0x8000000000uLL) >> 39)
      + ((v11 & 0x10000000000uLL) >> 40)
      + ((v11 & 0x20000000000uLL) >> 41)
      + ((v11 & 0x40000000000uLL) >> 42);
  return v34
       + ((v11 & 0x80000000000uLL) >> 43)
       + ((v11 & 0x100000000000uLL) >> 44)
       + ((v11 & 0x200000000000uLL) >> 45)
       + ((v11 & 0x400000000000uLL) >> 46)
       + ((v11 & 0x800000000000uLL) >> 47)
       + ((v11 & 0x1000000000000uLL) >> 48)
       + ((v11 & 0x2000000000000uLL) >> 49)
       + ((v11 & 0x4000000000000uLL) >> 50)
       + ((v11 & 0x8000000000000uLL) >> 51)
       + ((v11 & 0x10000000000000uLL) >> 52)
       + ((v11 & 0x20000000000000uLL) >> 53)
       + ((v11 & 0x40000000000000uLL) >> 54)
       + ((v11 & 0x80000000000000uLL) >> 55)
       + ((v11 & 0x100000000000000uLL) >> 56)
       + ((v11 & 0x200000000000000uLL) >> 57)
       + ((v11 & 0x400000000000000uLL) >> 58)
       + ((v11 & 0x800000000000000uLL) >> 59)
       + ((v11 & 0x1000000000000000uLL) >> 60)
       + ((v11 & 0x2000000000000000uLL) >> 61)
       + ((v11 & 0x4000000000000000uLL) >> 62);
}

unint64_t sub_1C4D2EF04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_81;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_82;
  }
LABEL_81:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_83;
  }
LABEL_82:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_83:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_87;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_88;
  }
LABEL_87:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_89;
  }
LABEL_88:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_89:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_93;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_94;
  }
LABEL_93:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_95;
  }
LABEL_94:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_95:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_99;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_100;
  }
LABEL_99:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_101;
  }
LABEL_100:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_102;
  }
LABEL_101:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_38;
    goto LABEL_37;
  }
LABEL_102:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) != 0)
LABEL_37:
    *(_BYTE *)(a2 + 53) = *(_QWORD *)(a1 + 224) != 0;
LABEL_38:
  v9 = v8;
  if ((v8 & 0x20000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 232) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x40000000) == 0)
    {
LABEL_40:
      if ((v9 & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_106;
    }
  }
  else if ((v8 & 0x40000000) == 0)
  {
    goto LABEL_40;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 240);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_107;
  }
LABEL_106:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_43;
    goto LABEL_108;
  }
LABEL_107:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 256) & 0x1FF;
  if ((v9 & 0x200000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x400000000) == 0)
      goto LABEL_45;
    goto LABEL_44;
  }
LABEL_108:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 264) & 0x1FFFF;
  if ((v9 & 0x400000000) != 0)
LABEL_44:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 272) & 0x1FFF;
LABEL_45:
  v10 = v9;
  if ((v9 & 0x800000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 280) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x1000000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 288);
  v11 = v10;
  if ((v10 & 0x2000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 296) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x4000000000) == 0)
    {
LABEL_51:
      if ((v11 & 0x8000000000) == 0)
        goto LABEL_52;
      goto LABEL_112;
    }
  }
  else if ((v10 & 0x4000000000) == 0)
  {
    goto LABEL_51;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_113;
  }
LABEL_112:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 312);
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_114;
  }
LABEL_113:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 320) != 0;
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_115;
  }
LABEL_114:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 328);
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_116;
  }
LABEL_115:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 336) != 0;
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_117;
  }
LABEL_116:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_118;
  }
LABEL_117:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 352);
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_120;
  }
LABEL_119:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_125;
  }
LABEL_124:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_126;
  }
LABEL_125:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 416) != 0;
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 424);
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 432);
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_129;
  }
LABEL_128:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 440);
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_130;
  }
LABEL_129:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_131;
  }
LABEL_130:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_72;
    goto LABEL_132;
  }
LABEL_131:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) == 0)
  {
LABEL_72:
    if ((v11 & 0x1000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_73;
  }
LABEL_132:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 472);
  if ((v11 & 0x1000000000000000) != 0)
LABEL_73:
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 480);
LABEL_74:
  v12 = v2 & 1;
  if ((v11 & 0x2000000000000000) != 0)
    *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 488);
  v13 = v3 & 2;
  v14 = v3 & 4;
  v15 = v3 & 8;
  v16 = v3 & 0x10;
  v17 = v3 & 0x20;
  v18 = v3 & 0x40;
  v19 = v4 & 0x80;
  v20 = v4 & 0x100;
  v21 = v5 & 0x200;
  v22 = v5 & 0x400;
  v23 = v5 & 0x800;
  v24 = v5 & 0x1000;
  v25 = v5 & 0x2000;
  v26 = v5 & 0x4000;
  v27 = (unsigned __int16)v6 & 0x8000;
  v28 = v6 & 0x10000;
  v29 = v6 & 0x20000;
  v30 = v6 & 0x40000;
  v31 = v6 & 0x80000;
  v32 = v6 & 0x100000;
  if ((v11 & 0x4000000000000000) != 0)
    *(_BYTE *)(a2 + 136) = *(_QWORD *)(a1 + 496) != 0;
  v33 = v7 & 0x200000;
  v36 = v7 & 0x400000;
  v37 = v8 & 0x800000;
  v38 = v8 & 0x1000000;
  v39 = v8 & 0x2000000;
  v40 = v8 & 0x4000000;
  v41 = v8 & 0x8000000;
  v42 = v8 & 0x10000000;
  v44 = v8 & 0x20000000;
  v45 = v9 & 0x200000000;
  v46 = v9 & 0x400000000;
  v47 = v9 & 0x800000000;
  v48 = v10 & 0x1000000000;
  v49 = v11 & 0x4000000000;
  v43 = BYTE4(v9) & 1;
  v34 = (v13 >> 1)
      + v12
      + (v14 >> 2)
      + (v15 >> 3)
      + (v16 >> 4)
      + (v17 >> 5)
      + (v18 >> 6)
      + (v19 >> 7)
      + (v20 >> 8)
      + (v21 >> 9)
      + (v22 >> 10)
      + (v23 >> 11)
      + (v24 >> 12)
      + (v25 >> 13)
      + (v26 >> 14)
      + (v27 >> 15)
      + (v28 >> 16)
      + (v29 >> 17)
      + (v30 >> 18)
      + (v31 >> 19)
      + (v32 >> 20)
      + (v33 >> 21)
      + (v36 >> 22)
      + (v37 >> 23)
      + (v38 >> 24)
      + (v39 >> 25)
      + (v40 >> 26)
      + (v41 >> 27)
      + (v42 >> 28)
      + (v44 >> 29)
      + ((v9 & 0x40000000) >> 30)
      + (v9 >> 31)
      + v43
      + (v45 >> 33)
      + (v46 >> 34)
      + (v47 >> 35)
      + (v48 >> 36)
      + ((v10 & 0x2000000000uLL) >> 37)
      + (v49 >> 38)
      + ((v11 & 0x8000000000uLL) >> 39)
      + ((v11 & 0x10000000000uLL) >> 40)
      + ((v11 & 0x20000000000uLL) >> 41)
      + ((v11 & 0x40000000000uLL) >> 42);
  return v34
       + ((v11 & 0x80000000000uLL) >> 43)
       + ((v11 & 0x100000000000uLL) >> 44)
       + ((v11 & 0x200000000000uLL) >> 45)
       + ((v11 & 0x400000000000uLL) >> 46)
       + ((v11 & 0x800000000000uLL) >> 47)
       + ((v11 & 0x1000000000000uLL) >> 48)
       + ((v11 & 0x2000000000000uLL) >> 49)
       + ((v11 & 0x4000000000000uLL) >> 50)
       + ((v11 & 0x8000000000000uLL) >> 51)
       + ((v11 & 0x10000000000000uLL) >> 52)
       + ((v11 & 0x20000000000000uLL) >> 53)
       + ((v11 & 0x40000000000000uLL) >> 54)
       + ((v11 & 0x80000000000000uLL) >> 55)
       + ((v11 & 0x100000000000000uLL) >> 56)
       + ((v11 & 0x200000000000000uLL) >> 57)
       + ((v11 & 0x400000000000000uLL) >> 58)
       + ((v11 & 0x800000000000000uLL) >> 59)
       + ((v11 & 0x1000000000000000uLL) >> 60)
       + ((v11 & 0x2000000000000000uLL) >> 61)
       + ((v11 & 0x4000000000000000uLL) >> 62);
}

unint64_t sub_1C4D2F800(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_80;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_81;
  }
LABEL_80:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_82;
  }
LABEL_81:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_82:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_86;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_87;
  }
LABEL_86:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_88;
  }
LABEL_87:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_88:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_92;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_93;
  }
LABEL_92:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_94;
  }
LABEL_93:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_94:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_98;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_99;
  }
LABEL_98:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_100;
  }
LABEL_99:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_100:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) != 0)
LABEL_36:
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
LABEL_37:
  v9 = v8;
  if ((v8 & 0x10000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 224) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_39:
      if ((v9 & 0x40000000) == 0)
        goto LABEL_40;
      goto LABEL_104;
    }
  }
  else if ((v8 & 0x20000000) == 0)
  {
    goto LABEL_39;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 232);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_40:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_105;
  }
LABEL_104:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 240) & 0x1FF;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_106;
  }
LABEL_105:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_106:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 256) & 0x1FFFF;
  if ((v9 & 0x200000000) != 0)
LABEL_43:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 264) & 0x1FFF;
LABEL_44:
  v10 = v9;
  if ((v9 & 0x400000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 272) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x800000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 280);
  v11 = v10;
  if ((v10 & 0x1000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 288) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x2000000000) == 0)
    {
LABEL_50:
      if ((v11 & 0x4000000000) == 0)
        goto LABEL_51;
      goto LABEL_110;
    }
  }
  else if ((v10 & 0x2000000000) == 0)
  {
    goto LABEL_50;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 296);
  if ((v11 & 0x4000000000) == 0)
  {
LABEL_51:
    if ((v11 & 0x8000000000) == 0)
      goto LABEL_52;
    goto LABEL_111;
  }
LABEL_110:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_112;
  }
LABEL_111:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 312) != 0;
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_113;
  }
LABEL_112:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 320);
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_114;
  }
LABEL_113:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 328) != 0;
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_115;
  }
LABEL_114:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_116;
  }
LABEL_115:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_117;
  }
LABEL_116:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_118;
  }
LABEL_117:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_120;
  }
LABEL_119:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_125;
  }
LABEL_124:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 416);
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_126;
  }
LABEL_125:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 424);
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 432);
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 440);
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_129;
  }
LABEL_128:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_130;
  }
LABEL_129:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_73;
    goto LABEL_72;
  }
LABEL_130:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) != 0)
LABEL_72:
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 472);
LABEL_73:
  v12 = v2 & 1;
  if ((v11 & 0x1000000000000000) != 0)
    *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 480);
  v13 = v3 & 2;
  v14 = v3 & 4;
  v15 = v3 & 8;
  v16 = v3 & 0x10;
  v17 = v3 & 0x20;
  v18 = v3 & 0x40;
  v19 = v4 & 0x80;
  v20 = v4 & 0x100;
  v25 = (unsigned __int16)v6 & 0x8000;
  v26 = v6 & 0x10000;
  v27 = v6 & 0x20000;
  v28 = v6 & 0x40000;
  v29 = v6 & 0x80000;
  v30 = v6 & 0x100000;
  if ((v11 & 0x2000000000000000) != 0)
    *(_BYTE *)(a2 + 136) = *(_QWORD *)(a1 + 488) != 0;
  v22 = v5 & 0x800;
  v21 = v5 & 0x200;
  v24 = v5 & 0x4000;
  v23 = v5 & 0x2000;
  v32 = v7 & 0x400000;
  v33 = v8 & 0x800000;
  v34 = v8 & 0x1000000;
  v35 = v8 & 0x2000000;
  v36 = v8 & 0x4000000;
  v37 = v8 & 0x8000000;
  v38 = v8 & 0x10000000;
  v40 = v9 & 0x200000000;
  v41 = v9 & 0x400000000;
  v42 = v10 & 0x800000000;
  v43 = v11 & 0x2000000000;
  v44 = v10 & 0x1000000000;
  v45 = v11 & 0x4000000000;
  v46 = v11 & 0x8000000000;
  v47 = v11 & 0x10000000000;
  v48 = v11 & 0x20000000000;
  v49 = v11 & 0x40000000000;
  v39 = BYTE4(v9) & 1;
  LODWORD(v22) = (v13 >> 1)
               + v12
               + (v14 >> 2)
               + (v15 >> 3)
               + (v16 >> 4)
               + (v17 >> 5)
               + (v18 >> 6)
               + (v19 >> 7)
               + (v20 >> 8)
               + (v21 >> 9)
               + ((unint64_t)(v5 & 0x400) >> 10)
               + (v22 >> 11)
               + ((unint64_t)(v5 & 0x1000) >> 12)
               + (v23 >> 13)
               + (v24 >> 14)
               + (v25 >> 15)
               + (v26 >> 16)
               + (v27 >> 17)
               + (v28 >> 18)
               + (v29 >> 19)
               + (v30 >> 20)
               + ((v7 & 0x200000uLL) >> 21)
               + (v32 >> 22)
               + (v33 >> 23)
               + (v34 >> 24)
               + (v35 >> 25)
               + (v36 >> 26)
               + (v37 >> 27)
               + (v38 >> 28)
               + ((v9 & 0x20000000) >> 29)
               + ((v9 & 0x40000000) >> 30)
               + (v9 >> 31)
               + v39
               + (v40 >> 33)
               + (v41 >> 34)
               + (v42 >> 35)
               + (v44 >> 36)
               + (v43 >> 37)
               + (v45 >> 38)
               + (v46 >> 39)
               + (v47 >> 40)
               + (v48 >> 41)
               + (v49 >> 42);
  return (_DWORD)v22
       + ((v11 & 0x80000000000uLL) >> 43)
       + ((v11 & 0x100000000000uLL) >> 44)
       + ((v11 & 0x200000000000uLL) >> 45)
       + ((v11 & 0x400000000000uLL) >> 46)
       + ((v11 & 0x800000000000uLL) >> 47)
       + ((v11 & 0x1000000000000uLL) >> 48)
       + ((v11 & 0x2000000000000uLL) >> 49)
       + ((v11 & 0x4000000000000uLL) >> 50)
       + ((v11 & 0x8000000000000uLL) >> 51)
       + ((v11 & 0x10000000000000uLL) >> 52)
       + ((v11 & 0x20000000000000uLL) >> 53)
       + ((v11 & 0x40000000000000uLL) >> 54)
       + ((v11 & 0x80000000000000uLL) >> 55)
       + ((v11 & 0x100000000000000uLL) >> 56)
       + ((v11 & 0x200000000000000uLL) >> 57)
       + ((v11 & 0x400000000000000uLL) >> 58)
       + ((v11 & 0x800000000000000uLL) >> 59)
       + ((v11 & 0x1000000000000000uLL) >> 60)
       + ((v11 & 0x2000000000000000uLL) >> 61);
}

unint64_t sub_1C4D300F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_80;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_81;
  }
LABEL_80:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_82;
  }
LABEL_81:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_82:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_86;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_87;
  }
LABEL_86:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_88;
  }
LABEL_87:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_88:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_92;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_93;
  }
LABEL_92:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_94;
  }
LABEL_93:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_94:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_98;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_99;
  }
LABEL_98:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_100;
  }
LABEL_99:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_100:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) != 0)
LABEL_36:
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
LABEL_37:
  v9 = v8;
  if ((v8 & 0x10000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 224) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_39:
      if ((v9 & 0x40000000) == 0)
        goto LABEL_40;
      goto LABEL_104;
    }
  }
  else if ((v8 & 0x20000000) == 0)
  {
    goto LABEL_39;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 232);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_40:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_105;
  }
LABEL_104:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 240) & 0x1FF;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_106;
  }
LABEL_105:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_106:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 256) & 0x1FFFF;
  if ((v9 & 0x200000000) != 0)
LABEL_43:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 264) & 0x1FFF;
LABEL_44:
  v10 = v9;
  if ((v9 & 0x400000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 272) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x800000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 280);
  v11 = v10;
  if ((v10 & 0x1000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 288) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x2000000000) == 0)
    {
LABEL_50:
      if ((v11 & 0x4000000000) == 0)
        goto LABEL_51;
      goto LABEL_110;
    }
  }
  else if ((v10 & 0x2000000000) == 0)
  {
    goto LABEL_50;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 296);
  if ((v11 & 0x4000000000) == 0)
  {
LABEL_51:
    if ((v11 & 0x8000000000) == 0)
      goto LABEL_52;
    goto LABEL_111;
  }
LABEL_110:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_112;
  }
LABEL_111:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 312) != 0;
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_113;
  }
LABEL_112:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 320);
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_114;
  }
LABEL_113:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 328) != 0;
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_115;
  }
LABEL_114:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_116;
  }
LABEL_115:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_117;
  }
LABEL_116:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_118;
  }
LABEL_117:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_120;
  }
LABEL_119:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_125;
  }
LABEL_124:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 416);
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_126;
  }
LABEL_125:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 424);
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 432);
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 440);
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_129;
  }
LABEL_128:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_130;
  }
LABEL_129:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_73;
    goto LABEL_72;
  }
LABEL_130:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) != 0)
LABEL_72:
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 472);
LABEL_73:
  v12 = v2 & 1;
  if ((v11 & 0x1000000000000000) != 0)
    *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 480);
  v13 = v3 & 2;
  v14 = v3 & 4;
  v15 = v3 & 8;
  v16 = v3 & 0x10;
  v17 = v3 & 0x20;
  v18 = v3 & 0x40;
  v19 = v4 & 0x80;
  v20 = v4 & 0x100;
  v25 = (unsigned __int16)v6 & 0x8000;
  v26 = v6 & 0x10000;
  v27 = v6 & 0x20000;
  v28 = v6 & 0x40000;
  v29 = v6 & 0x80000;
  v30 = v6 & 0x100000;
  if ((v11 & 0x2000000000000000) != 0)
    *(_BYTE *)(a2 + 136) = *(_QWORD *)(a1 + 488) != 0;
  v22 = v5 & 0x800;
  v21 = v5 & 0x200;
  v24 = v5 & 0x4000;
  v23 = v5 & 0x2000;
  v32 = v7 & 0x400000;
  v33 = v8 & 0x800000;
  v34 = v8 & 0x1000000;
  v35 = v8 & 0x2000000;
  v36 = v8 & 0x4000000;
  v37 = v8 & 0x8000000;
  v38 = v8 & 0x10000000;
  v40 = v9 & 0x200000000;
  v41 = v9 & 0x400000000;
  v42 = v10 & 0x800000000;
  v43 = v11 & 0x2000000000;
  v44 = v10 & 0x1000000000;
  v45 = v11 & 0x4000000000;
  v46 = v11 & 0x8000000000;
  v47 = v11 & 0x10000000000;
  v48 = v11 & 0x20000000000;
  v49 = v11 & 0x40000000000;
  v39 = BYTE4(v9) & 1;
  LODWORD(v22) = (v13 >> 1)
               + v12
               + (v14 >> 2)
               + (v15 >> 3)
               + (v16 >> 4)
               + (v17 >> 5)
               + (v18 >> 6)
               + (v19 >> 7)
               + (v20 >> 8)
               + (v21 >> 9)
               + ((unint64_t)(v5 & 0x400) >> 10)
               + (v22 >> 11)
               + ((unint64_t)(v5 & 0x1000) >> 12)
               + (v23 >> 13)
               + (v24 >> 14)
               + (v25 >> 15)
               + (v26 >> 16)
               + (v27 >> 17)
               + (v28 >> 18)
               + (v29 >> 19)
               + (v30 >> 20)
               + ((v7 & 0x200000uLL) >> 21)
               + (v32 >> 22)
               + (v33 >> 23)
               + (v34 >> 24)
               + (v35 >> 25)
               + (v36 >> 26)
               + (v37 >> 27)
               + (v38 >> 28)
               + ((v9 & 0x20000000) >> 29)
               + ((v9 & 0x40000000) >> 30)
               + (v9 >> 31)
               + v39
               + (v40 >> 33)
               + (v41 >> 34)
               + (v42 >> 35)
               + (v44 >> 36)
               + (v43 >> 37)
               + (v45 >> 38)
               + (v46 >> 39)
               + (v47 >> 40)
               + (v48 >> 41)
               + (v49 >> 42);
  return (_DWORD)v22
       + ((v11 & 0x80000000000uLL) >> 43)
       + ((v11 & 0x100000000000uLL) >> 44)
       + ((v11 & 0x200000000000uLL) >> 45)
       + ((v11 & 0x400000000000uLL) >> 46)
       + ((v11 & 0x800000000000uLL) >> 47)
       + ((v11 & 0x1000000000000uLL) >> 48)
       + ((v11 & 0x2000000000000uLL) >> 49)
       + ((v11 & 0x4000000000000uLL) >> 50)
       + ((v11 & 0x8000000000000uLL) >> 51)
       + ((v11 & 0x10000000000000uLL) >> 52)
       + ((v11 & 0x20000000000000uLL) >> 53)
       + ((v11 & 0x40000000000000uLL) >> 54)
       + ((v11 & 0x80000000000000uLL) >> 55)
       + ((v11 & 0x100000000000000uLL) >> 56)
       + ((v11 & 0x200000000000000uLL) >> 57)
       + ((v11 & 0x400000000000000uLL) >> 58)
       + ((v11 & 0x800000000000000uLL) >> 59)
       + ((v11 & 0x1000000000000000uLL) >> 60)
       + ((v11 & 0x2000000000000000uLL) >> 61);
}

unint64_t sub_1C4D309F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_79;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_80;
  }
LABEL_79:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_81;
  }
LABEL_80:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_81:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_85;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_86;
  }
LABEL_85:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_87;
  }
LABEL_86:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_87:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_91;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_92;
  }
LABEL_91:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_93;
  }
LABEL_92:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_93:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_97;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_98;
  }
LABEL_97:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_99;
  }
LABEL_98:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_99:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) != 0)
LABEL_36:
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
LABEL_37:
  v9 = v8;
  if ((v8 & 0x10000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 224) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_39:
      if ((v9 & 0x40000000) == 0)
        goto LABEL_40;
      goto LABEL_103;
    }
  }
  else if ((v8 & 0x20000000) == 0)
  {
    goto LABEL_39;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 232);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_40:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_104;
  }
LABEL_103:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 240) & 0x1FF;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_105;
  }
LABEL_104:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_105:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 256) & 0x1FFFF;
  if ((v9 & 0x200000000) != 0)
LABEL_43:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 264) & 0x1FFF;
LABEL_44:
  v10 = v9;
  if ((v9 & 0x400000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 272) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x800000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 280);
  v11 = v10;
  if ((v10 & 0x1000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 288) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x2000000000) == 0)
    {
LABEL_50:
      if ((v11 & 0x4000000000) == 0)
        goto LABEL_51;
      goto LABEL_109;
    }
  }
  else if ((v10 & 0x2000000000) == 0)
  {
    goto LABEL_50;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 296);
  if ((v11 & 0x4000000000) == 0)
  {
LABEL_51:
    if ((v11 & 0x8000000000) == 0)
      goto LABEL_52;
    goto LABEL_110;
  }
LABEL_109:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_111;
  }
LABEL_110:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 312) != 0;
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_112;
  }
LABEL_111:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 320);
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_113;
  }
LABEL_112:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 328) != 0;
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_114;
  }
LABEL_113:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_115;
  }
LABEL_114:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_116;
  }
LABEL_115:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_117;
  }
LABEL_116:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_118;
  }
LABEL_117:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_120;
  }
LABEL_119:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_124;
  }
LABEL_123:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 416);
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_125;
  }
LABEL_124:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 424);
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_126;
  }
LABEL_125:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 432);
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 440);
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_72;
    goto LABEL_71;
  }
LABEL_128:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) != 0)
LABEL_71:
    *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 464);
LABEL_72:
  v12 = v2 & 1;
  if ((v11 & 0x800000000000000) != 0)
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 472);
  v13 = v3 & 2;
  v14 = v3 & 4;
  v15 = v3 & 8;
  v16 = v3 & 0x10;
  v17 = v3 & 0x20;
  v18 = v3 & 0x40;
  v19 = v4 & 0x80;
  v20 = v4 & 0x100;
  v25 = (unsigned __int16)v6 & 0x8000;
  v26 = v6 & 0x10000;
  v27 = v6 & 0x20000;
  v28 = v6 & 0x40000;
  v29 = v6 & 0x80000;
  v30 = v6 & 0x100000;
  if ((v11 & 0x1000000000000000) != 0)
    *(_BYTE *)(a2 + 132) = *(_QWORD *)(a1 + 480) != 0;
  v21 = v5 & 0x200;
  v24 = v5 & 0x4000;
  v23 = v5 & 0x2000;
  v22 = v5 & 0x1000;
  v32 = v7 & 0x400000;
  v33 = v8 & 0x800000;
  v34 = v8 & 0x1000000;
  v35 = v8 & 0x2000000;
  v36 = v8 & 0x4000000;
  v37 = v8 & 0x8000000;
  v38 = v8 & 0x10000000;
  v40 = v9 & 0x200000000;
  v41 = v9 & 0x400000000;
  v42 = v10 & 0x800000000;
  v43 = v11 & 0x2000000000;
  v44 = v10 & 0x1000000000;
  v45 = v11 & 0x4000000000;
  v46 = v11 & 0x8000000000;
  v47 = v11 & 0x10000000000;
  v48 = v11 & 0x20000000000;
  v49 = v11 & 0x40000000000;
  v39 = BYTE4(v9) & 1;
  LODWORD(v21) = (v13 >> 1)
               + v12
               + (v14 >> 2)
               + (v15 >> 3)
               + (v16 >> 4)
               + (v17 >> 5)
               + (v18 >> 6)
               + (v19 >> 7)
               + (v20 >> 8)
               + (v21 >> 9)
               + ((unint64_t)(v5 & 0x400) >> 10)
               + ((unint64_t)(v5 & 0x800) >> 11)
               + (v22 >> 12)
               + (v23 >> 13)
               + (v24 >> 14)
               + (v25 >> 15)
               + (v26 >> 16)
               + (v27 >> 17)
               + (v28 >> 18)
               + (v29 >> 19)
               + (v30 >> 20)
               + ((v7 & 0x200000uLL) >> 21)
               + (v32 >> 22)
               + (v33 >> 23)
               + (v34 >> 24)
               + (v35 >> 25)
               + (v36 >> 26)
               + (v37 >> 27)
               + (v38 >> 28)
               + ((v9 & 0x20000000) >> 29)
               + ((v9 & 0x40000000) >> 30)
               + (v9 >> 31)
               + v39
               + (v40 >> 33)
               + (v41 >> 34)
               + (v42 >> 35)
               + (v44 >> 36)
               + (v43 >> 37)
               + (v45 >> 38)
               + (v46 >> 39)
               + (v47 >> 40)
               + (v48 >> 41)
               + (v49 >> 42);
  return (_DWORD)v21
       + ((v11 & 0x80000000000uLL) >> 43)
       + ((v11 & 0x100000000000uLL) >> 44)
       + ((v11 & 0x200000000000uLL) >> 45)
       + ((v11 & 0x400000000000uLL) >> 46)
       + ((v11 & 0x800000000000uLL) >> 47)
       + ((v11 & 0x1000000000000uLL) >> 48)
       + ((v11 & 0x2000000000000uLL) >> 49)
       + ((v11 & 0x4000000000000uLL) >> 50)
       + ((v11 & 0x8000000000000uLL) >> 51)
       + ((v11 & 0x10000000000000uLL) >> 52)
       + ((v11 & 0x20000000000000uLL) >> 53)
       + ((v11 & 0x40000000000000uLL) >> 54)
       + ((v11 & 0x80000000000000uLL) >> 55)
       + ((v11 & 0x100000000000000uLL) >> 56)
       + ((v11 & 0x200000000000000uLL) >> 57)
       + ((v11 & 0x400000000000000uLL) >> 58)
       + ((v11 & 0x800000000000000uLL) >> 59)
       + ((v11 & 0x1000000000000000uLL) >> 60);
}

unint64_t sub_1C4D312C4(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int v54;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_88;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_89;
  }
LABEL_88:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_90;
  }
LABEL_89:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_90:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_94;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_95;
  }
LABEL_94:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_96;
  }
LABEL_95:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_96:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_100;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_101;
  }
LABEL_100:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_102;
  }
LABEL_101:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_102:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_106;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_107;
  }
LABEL_106:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_108;
  }
LABEL_107:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_109;
  }
LABEL_108:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_110;
  }
LABEL_109:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v8 & 0x20000000) == 0)
      goto LABEL_38;
    goto LABEL_111;
  }
LABEL_110:
  *(_BYTE *)(a2 + 53) = *(_QWORD *)(a1 + 224) != 0;
  if ((v8 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x40000000) == 0)
      goto LABEL_40;
    goto LABEL_39;
  }
LABEL_111:
  *(_BYTE *)(a2 + 54) = *(_QWORD *)(a1 + 232) != 0;
  if ((v8 & 0x40000000) != 0)
LABEL_39:
    *(_BYTE *)(a2 + 55) = *(_QWORD *)(a1 + 240) != 0;
LABEL_40:
  v9 = v8;
  if ((v8 & 0x80000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 248) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x100000000) == 0)
    {
LABEL_42:
      if ((v9 & 0x200000000) == 0)
        goto LABEL_43;
      goto LABEL_115;
    }
  }
  else if ((v8 & 0x100000000) == 0)
  {
    goto LABEL_42;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 256);
  if ((v9 & 0x200000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x400000000) == 0)
      goto LABEL_44;
    goto LABEL_116;
  }
LABEL_115:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 264) & 0x1FF;
  if ((v9 & 0x400000000) == 0)
  {
LABEL_44:
    if ((v9 & 0x800000000) == 0)
      goto LABEL_45;
    goto LABEL_117;
  }
LABEL_116:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 272) & 0x1FF;
  if ((v9 & 0x800000000) == 0)
  {
LABEL_45:
    if ((v9 & 0x1000000000) == 0)
      goto LABEL_47;
    goto LABEL_46;
  }
LABEL_117:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 280) & 0x1FFFF;
  if ((v9 & 0x1000000000) != 0)
LABEL_46:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 288) & 0x1FFF;
LABEL_47:
  v10 = v9;
  if ((v9 & 0x2000000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 296) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x4000000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 304);
  v11 = v10;
  if ((v10 & 0x8000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 312) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x10000000000) == 0)
    {
LABEL_53:
      if ((v11 & 0x20000000000) == 0)
        goto LABEL_54;
      goto LABEL_121;
    }
  }
  else if ((v10 & 0x10000000000) == 0)
  {
    goto LABEL_53;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 320);
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_122;
  }
LABEL_121:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 328);
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 336) != 0;
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_124;
  }
LABEL_123:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_125;
  }
LABEL_124:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_126;
  }
LABEL_125:
  *(_BYTE *)(a2 + 81) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_127;
  }
LABEL_126:
  *(_BYTE *)(a2 + 82) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_128;
  }
LABEL_127:
  *(_BYTE *)(a2 + 83) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_129;
  }
LABEL_128:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 384);
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_130;
  }
LABEL_129:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 392);
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_131;
  }
LABEL_130:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_132;
  }
LABEL_131:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_133;
  }
LABEL_132:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 416) != 0;
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_134;
  }
LABEL_133:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 424) != 0;
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_135;
  }
LABEL_134:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 432) != 0;
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_136;
  }
LABEL_135:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 440) != 0;
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_137;
  }
LABEL_136:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 448) != 0;
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_138;
  }
LABEL_137:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 456) != 0;
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_72;
    goto LABEL_139;
  }
LABEL_138:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) == 0)
  {
LABEL_72:
    if ((v11 & 0x1000000000000000) == 0)
      goto LABEL_73;
    goto LABEL_140;
  }
LABEL_139:
  *(_BYTE *)(a2 + 104) = *(_QWORD *)(a1 + 472) != 0;
  if ((v11 & 0x1000000000000000) == 0)
  {
LABEL_73:
    if ((v11 & 0x2000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_141;
  }
LABEL_140:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 480);
  if ((v11 & 0x2000000000000000) == 0)
  {
LABEL_74:
    if ((v11 & 0x4000000000000000) == 0)
      goto LABEL_75;
LABEL_142:
    *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 496);
    if ((v11 & 0x8000000000000000) == 0)
      goto LABEL_76;
    goto LABEL_143;
  }
LABEL_141:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 488);
  if ((v11 & 0x4000000000000000) != 0)
    goto LABEL_142;
LABEL_75:
  if ((v11 & 0x8000000000000000) == 0)
    goto LABEL_76;
LABEL_143:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 504);
LABEL_76:
  v12 = *(_QWORD *)(a1 + 1256);
  if ((v12 & 1) != 0)
  {
    *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 512);
    if ((v12 & 2) == 0)
    {
LABEL_78:
      if ((v12 & 4) == 0)
        goto LABEL_79;
      goto LABEL_146;
    }
  }
  else if ((v12 & 2) == 0)
  {
    goto LABEL_78;
  }
  *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 520);
  if ((v12 & 4) == 0)
  {
LABEL_79:
    if ((v12 & 8) == 0)
      goto LABEL_81;
    goto LABEL_80;
  }
LABEL_146:
  *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 528);
  if ((v12 & 8) != 0)
LABEL_80:
    *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 536);
LABEL_81:
  if ((v12 & 0x10) != 0)
    *(_BYTE *)(a2 + 140) = *(_QWORD *)(a1 + 544) != 0;
  v13 = v3 & 2;
  v14 = v3 & 4;
  v15 = v3 & 8;
  v16 = v3 & 0x10;
  v17 = v3 & 0x20;
  v18 = v3 & 0x40;
  v19 = v5 & 0x200;
  v20 = v5 & 0x400;
  v21 = v5 & 0x800;
  v22 = v5 & 0x1000;
  v23 = v5 & 0x2000;
  v24 = v5 & 0x4000;
  v25 = (unsigned __int16)v6 & 0x8000;
  v26 = v6 & 0x10000;
  v27 = v6 & 0x20000;
  v31 = v6 & 0x40000;
  v32 = v6 & 0x80000;
  v28 = v6 & 0x100000;
  if ((v12 & 0x20) != 0)
    *(_DWORD *)(a2 + 144) = *(_QWORD *)(a1 + 552);
  v29 = (v13 >> 1)
      + (v2 & 1)
      + (v14 >> 2)
      + (v15 >> 3)
      + (v16 >> 4)
      + (v17 >> 5)
      + (v18 >> 6)
      + ((unint64_t)(v4 & 0x80) >> 7)
      + ((v4 & 0x100) >> 8)
      + (v19 >> 9)
      + (v20 >> 10)
      + (v21 >> 11)
      + (v22 >> 12)
      + (v23 >> 13)
      + (v24 >> 14)
      + (v25 >> 15)
      + (v26 >> 16)
      + (v27 >> 17)
      + (v31 >> 18)
      + (v32 >> 19)
      + (v28 >> 20)
      + ((v7 & 0x200000) >> 21)
      + ((v7 & 0x400000) >> 22)
      + ((v8 & 0x800000) >> 23)
      + ((v8 & 0x1000000) >> 24)
      + ((v8 & 0x2000000) >> 25)
      + ((v8 & 0x4000000) >> 26)
      + ((v8 & 0x8000000) >> 27)
      + ((v8 & 0x10000000) >> 28)
      + ((v8 & 0x20000000) >> 29)
      + ((v8 & 0x40000000) >> 30);
  v34 = v9 & 0x200000000;
  v35 = v9 & 0x400000000;
  v36 = v9 & 0x800000000;
  v37 = v9 & 0x1000000000;
  v38 = v9 & 0x2000000000;
  v39 = v10 & 0x4000000000;
  v40 = v10 & 0x8000000000;
  v41 = v11 & 0x10000000000;
  v42 = v11 & 0x20000000000;
  v43 = v11 & 0x80000000000;
  v44 = v11 & 0x40000000000;
  v45 = v11 & 0x100000000000;
  v46 = v11 & 0x200000000000;
  v47 = v12 & 0x10;
  v48 = v12 & 0x20;
  v49 = v12 & 8;
  v50 = v12 & 4;
  v51 = v12 & 2;
  v52 = v11 & 0x4000000000000000;
  v53 = v11 & 0x2000000000000000;
  v33 = BYTE4(v9) & 1;
  v54 = v12 & 1;
  return v29
       + (v8 >> 31)
       + v33
       + (v34 >> 33)
       + (v35 >> 34)
       + (v36 >> 35)
       + (v37 >> 36)
       + (v38 >> 37)
       + (v39 >> 38)
       + (v40 >> 39)
       + (v11 >> 63)
       + (v41 >> 40)
       + (v42 >> 41)
       + (v44 >> 42)
       + (v43 >> 43)
       + (v45 >> 44)
       + (v46 >> 45)
       + ((v11 & 0x400000000000) >> 46)
       + ((v11 & 0x800000000000) >> 47)
       + ((v11 & 0x1000000000000) >> 48)
       + ((v11 & 0x2000000000000) >> 49)
       + ((v11 & 0x4000000000000) >> 50)
       + ((v11 & 0x8000000000000) >> 51)
       + ((v11 & 0x10000000000000) >> 52)
       + ((v11 & 0x20000000000000) >> 53)
       + ((v11 & 0x40000000000000) >> 54)
       + ((v11 & 0x80000000000000) >> 55)
       + ((v11 & 0x100000000000000) >> 56)
       + ((v11 & 0x200000000000000) >> 57)
       + ((v11 & 0x400000000000000) >> 58)
       + ((v11 & 0x800000000000000) >> 59)
       + ((v11 & 0x1000000000000000) >> 60)
       + (v53 >> 61)
       + (v52 >> 62)
       + v54
       + (v51 >> 1)
       + (v50 >> 2)
       + (v49 >> 3)
       + (v47 >> 4)
       + (v48 >> 5);
}

unint64_t sub_1C4D31D00(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v21;
  unint64_t v22;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_83;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_84;
  }
LABEL_83:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_85;
  }
LABEL_84:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_85:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_89;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_90;
  }
LABEL_89:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_91;
  }
LABEL_90:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_91:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_95;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_96;
  }
LABEL_95:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_97;
  }
LABEL_96:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_97:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_101;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_102;
  }
LABEL_101:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_103;
  }
LABEL_102:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_104;
  }
LABEL_103:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_38;
    goto LABEL_37;
  }
LABEL_104:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) != 0)
LABEL_37:
    *(_BYTE *)(a2 + 53) = *(_QWORD *)(a1 + 224) != 0;
LABEL_38:
  v9 = v8;
  if ((v8 & 0x20000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 232) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x40000000) == 0)
    {
LABEL_40:
      if ((v9 & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_108;
    }
  }
  else if ((v8 & 0x40000000) == 0)
  {
    goto LABEL_40;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 240);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_109;
  }
LABEL_108:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_43;
    goto LABEL_110;
  }
LABEL_109:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 256) & 0x1FF;
  if ((v9 & 0x200000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x400000000) == 0)
      goto LABEL_45;
    goto LABEL_44;
  }
LABEL_110:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 264) & 0x1FFFF;
  if ((v9 & 0x400000000) != 0)
LABEL_44:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 272) & 0x1FFF;
LABEL_45:
  v10 = v9;
  if ((v9 & 0x800000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 280) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x1000000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 288);
  v11 = v10;
  if ((v10 & 0x2000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 296) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x4000000000) == 0)
    {
LABEL_51:
      if ((v11 & 0x8000000000) == 0)
        goto LABEL_52;
      goto LABEL_114;
    }
  }
  else if ((v10 & 0x4000000000) == 0)
  {
    goto LABEL_51;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_115;
  }
LABEL_114:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 312);
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_116;
  }
LABEL_115:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 320) != 0;
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_117;
  }
LABEL_116:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 328);
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_118;
  }
LABEL_117:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 336) != 0;
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 81) = *(_QWORD *)(a1 + 344) != 0;
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_120;
  }
LABEL_119:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 352);
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_121;
  }
LABEL_120:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 360);
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_125;
  }
LABEL_124:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_126;
  }
LABEL_125:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_127;
  }
LABEL_126:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_128;
  }
LABEL_127:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 416) != 0;
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_129;
  }
LABEL_128:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 424) != 0;
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_130;
  }
LABEL_129:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 432);
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_131;
  }
LABEL_130:
  *(_BYTE *)(a2 + 104) = *(_QWORD *)(a1 + 440) != 0;
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_132;
  }
LABEL_131:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_133;
  }
LABEL_132:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_72;
    goto LABEL_134;
  }
LABEL_133:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) == 0)
  {
LABEL_72:
    if ((v11 & 0x1000000000000000) == 0)
      goto LABEL_73;
    goto LABEL_135;
  }
LABEL_134:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 472);
  if ((v11 & 0x1000000000000000) == 0)
  {
LABEL_73:
    if ((v11 & 0x2000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_136;
  }
LABEL_135:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 480);
  if ((v11 & 0x2000000000000000) == 0)
  {
LABEL_74:
    if ((v11 & 0x4000000000000000) == 0)
      goto LABEL_76;
    goto LABEL_75;
  }
LABEL_136:
  *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 488);
  if ((v11 & 0x4000000000000000) != 0)
LABEL_75:
    *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 496);
LABEL_76:
  if ((v11 & 0x8000000000000000) != 0)
    *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 504);
  v12 = (unsigned __int16)v6 & 0x8000;
  v13 = v6 & 0x10000;
  v14 = v6 & 0x20000;
  v15 = v6 & 0x40000;
  v16 = v6 & 0x80000;
  v17 = v6 & 0x100000;
  v21 = v10 & 0x1000000000;
  v22 = v10 & 0x2000000000;
  v18 = *(_QWORD *)(a1 + 1256);
  if ((v18 & 1) != 0)
    *(_BYTE *)(a2 + 140) = *(_QWORD *)(a1 + 512) != 0;
  v19 = ((v3 & 2) >> 1)
      + (v2 & 1)
      + ((v3 & 4) >> 2)
      + ((v3 & 8) >> 3)
      + ((v3 & 0x10) >> 4)
      + ((v3 & 0x20) >> 5)
      + ((v3 & 0x40) >> 6)
      + ((unint64_t)(v4 & 0x80) >> 7)
      + ((v4 & 0x100) >> 8)
      + ((v5 & 0x200) >> 9)
      + ((v5 & 0x400) >> 10)
      + ((v5 & 0x800) >> 11)
      + ((v5 & 0x1000) >> 12)
      + ((v5 & 0x2000) >> 13)
      + ((v5 & 0x4000) >> 14)
      + (v12 >> 15)
      + (v13 >> 16)
      + (v14 >> 17)
      + (v15 >> 18)
      + (v16 >> 19)
      + (v17 >> 20)
      + ((v7 & 0x200000) >> 21)
      + ((v7 & 0x400000) >> 22)
      + ((v8 & 0x800000) >> 23)
      + ((v8 & 0x1000000) >> 24)
      + ((v8 & 0x2000000) >> 25)
      + ((v8 & 0x4000000) >> 26)
      + ((v8 & 0x8000000) >> 27)
      + ((v8 & 0x10000000) >> 28)
      + ((v8 & 0x20000000) >> 29)
      + ((v9 & 0x40000000) >> 30);
  return v19
       + (v9 >> 31)
       + (BYTE4(v9) & 1)
       + ((v9 & 0x200000000) >> 33)
       + ((v9 & 0x400000000) >> 34)
       + ((v9 & 0x800000000) >> 35)
       + (v21 >> 36)
       + (v22 >> 37)
       + (v11 >> 63)
       + ((v11 & 0x4000000000) >> 38)
       + ((v11 & 0x8000000000) >> 39)
       + ((v11 & 0x10000000000) >> 40)
       + ((v11 & 0x20000000000) >> 41)
       + ((v11 & 0x40000000000) >> 42)
       + ((v11 & 0x80000000000) >> 43)
       + ((v11 & 0x100000000000) >> 44)
       + ((v11 & 0x200000000000) >> 45)
       + ((v11 & 0x400000000000) >> 46)
       + ((v11 & 0x800000000000) >> 47)
       + ((v11 & 0x1000000000000) >> 48)
       + ((v11 & 0x2000000000000) >> 49)
       + ((v11 & 0x4000000000000) >> 50)
       + ((v11 & 0x8000000000000) >> 51)
       + ((v11 & 0x10000000000000) >> 52)
       + ((v11 & 0x20000000000000) >> 53)
       + ((v11 & 0x40000000000000) >> 54)
       + ((v11 & 0x80000000000000) >> 55)
       + ((v11 & 0x100000000000000) >> 56)
       + ((v11 & 0x200000000000000) >> 57)
       + ((v11 & 0x400000000000000) >> 58)
       + ((v11 & 0x800000000000000) >> 59)
       + ((v11 & 0x1000000000000000) >> 60)
       + ((v11 & 0x2000000000000000) >> 61)
       + ((v11 & 0x4000000000000000) >> 62)
       + (v18 & 1);
}

unint64_t sub_1C4D32658(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_79;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_80;
  }
LABEL_79:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_81;
  }
LABEL_80:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_81:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_85;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_86;
  }
LABEL_85:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_87;
  }
LABEL_86:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_87:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_91;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_92;
  }
LABEL_91:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_93;
  }
LABEL_92:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_93:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_97;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_98;
  }
LABEL_97:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_99;
  }
LABEL_98:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_99:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) != 0)
LABEL_36:
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
LABEL_37:
  v9 = v8;
  if ((v8 & 0x10000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 224) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_39:
      if ((v9 & 0x40000000) == 0)
        goto LABEL_40;
      goto LABEL_103;
    }
  }
  else if ((v8 & 0x20000000) == 0)
  {
    goto LABEL_39;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 232);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_40:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_104;
  }
LABEL_103:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 240) & 0x1FF;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_105;
  }
LABEL_104:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_105:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 256) & 0x1FFFF;
  if ((v9 & 0x200000000) != 0)
LABEL_43:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 264) & 0x1FFF;
LABEL_44:
  v10 = v9;
  if ((v9 & 0x400000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 272) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x800000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 280);
  v11 = v10;
  if ((v10 & 0x1000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 288) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x2000000000) == 0)
    {
LABEL_50:
      if ((v11 & 0x4000000000) == 0)
        goto LABEL_51;
      goto LABEL_109;
    }
  }
  else if ((v10 & 0x2000000000) == 0)
  {
    goto LABEL_50;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 296);
  if ((v11 & 0x4000000000) == 0)
  {
LABEL_51:
    if ((v11 & 0x8000000000) == 0)
      goto LABEL_52;
    goto LABEL_110;
  }
LABEL_109:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_111;
  }
LABEL_110:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 312) != 0;
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_112;
  }
LABEL_111:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 320);
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_113;
  }
LABEL_112:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 328) != 0;
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_114;
  }
LABEL_113:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_115;
  }
LABEL_114:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_116;
  }
LABEL_115:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_117;
  }
LABEL_116:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_118;
  }
LABEL_117:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_120;
  }
LABEL_119:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_124;
  }
LABEL_123:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 416);
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_125;
  }
LABEL_124:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 424);
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_126;
  }
LABEL_125:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 432);
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 440);
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_72;
    goto LABEL_71;
  }
LABEL_128:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) != 0)
LABEL_71:
    *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 464);
LABEL_72:
  v12 = v2 & 1;
  if ((v11 & 0x800000000000000) != 0)
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 472);
  v13 = v3 & 2;
  v14 = v3 & 4;
  v15 = v3 & 8;
  v16 = v3 & 0x10;
  v17 = v3 & 0x20;
  v18 = v3 & 0x40;
  v19 = v4 & 0x80;
  v20 = v4 & 0x100;
  v25 = (unsigned __int16)v6 & 0x8000;
  v26 = v6 & 0x10000;
  v27 = v6 & 0x20000;
  v28 = v6 & 0x40000;
  v29 = v6 & 0x80000;
  v30 = v6 & 0x100000;
  if ((v11 & 0x1000000000000000) != 0)
    *(_BYTE *)(a2 + 132) = *(_QWORD *)(a1 + 480) != 0;
  v21 = v5 & 0x200;
  v24 = v5 & 0x4000;
  v23 = v5 & 0x2000;
  v22 = v5 & 0x1000;
  v32 = v7 & 0x400000;
  v33 = v8 & 0x800000;
  v34 = v8 & 0x1000000;
  v35 = v8 & 0x2000000;
  v36 = v8 & 0x4000000;
  v37 = v8 & 0x8000000;
  v38 = v8 & 0x10000000;
  v40 = v9 & 0x200000000;
  v41 = v9 & 0x400000000;
  v42 = v10 & 0x800000000;
  v43 = v11 & 0x2000000000;
  v44 = v10 & 0x1000000000;
  v45 = v11 & 0x4000000000;
  v46 = v11 & 0x8000000000;
  v47 = v11 & 0x10000000000;
  v48 = v11 & 0x20000000000;
  v49 = v11 & 0x40000000000;
  v39 = BYTE4(v9) & 1;
  LODWORD(v21) = (v13 >> 1)
               + v12
               + (v14 >> 2)
               + (v15 >> 3)
               + (v16 >> 4)
               + (v17 >> 5)
               + (v18 >> 6)
               + (v19 >> 7)
               + (v20 >> 8)
               + (v21 >> 9)
               + ((unint64_t)(v5 & 0x400) >> 10)
               + ((unint64_t)(v5 & 0x800) >> 11)
               + (v22 >> 12)
               + (v23 >> 13)
               + (v24 >> 14)
               + (v25 >> 15)
               + (v26 >> 16)
               + (v27 >> 17)
               + (v28 >> 18)
               + (v29 >> 19)
               + (v30 >> 20)
               + ((v7 & 0x200000uLL) >> 21)
               + (v32 >> 22)
               + (v33 >> 23)
               + (v34 >> 24)
               + (v35 >> 25)
               + (v36 >> 26)
               + (v37 >> 27)
               + (v38 >> 28)
               + ((v9 & 0x20000000) >> 29)
               + ((v9 & 0x40000000) >> 30)
               + (v9 >> 31)
               + v39
               + (v40 >> 33)
               + (v41 >> 34)
               + (v42 >> 35)
               + (v44 >> 36)
               + (v43 >> 37)
               + (v45 >> 38)
               + (v46 >> 39)
               + (v47 >> 40)
               + (v48 >> 41)
               + (v49 >> 42);
  return (_DWORD)v21
       + ((v11 & 0x80000000000uLL) >> 43)
       + ((v11 & 0x100000000000uLL) >> 44)
       + ((v11 & 0x200000000000uLL) >> 45)
       + ((v11 & 0x400000000000uLL) >> 46)
       + ((v11 & 0x800000000000uLL) >> 47)
       + ((v11 & 0x1000000000000uLL) >> 48)
       + ((v11 & 0x2000000000000uLL) >> 49)
       + ((v11 & 0x4000000000000uLL) >> 50)
       + ((v11 & 0x8000000000000uLL) >> 51)
       + ((v11 & 0x10000000000000uLL) >> 52)
       + ((v11 & 0x20000000000000uLL) >> 53)
       + ((v11 & 0x40000000000000uLL) >> 54)
       + ((v11 & 0x80000000000000uLL) >> 55)
       + ((v11 & 0x100000000000000uLL) >> 56)
       + ((v11 & 0x200000000000000uLL) >> 57)
       + ((v11 & 0x400000000000000uLL) >> 58)
       + ((v11 & 0x800000000000000uLL) >> 59)
       + ((v11 & 0x1000000000000000uLL) >> 60);
}

unint64_t sub_1C4D32F2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_79;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_80;
  }
LABEL_79:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_81;
  }
LABEL_80:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_81:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_85;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_86;
  }
LABEL_85:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_87;
  }
LABEL_86:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_87:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_91;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_92;
  }
LABEL_91:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_93;
  }
LABEL_92:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_93:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_97;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_98;
  }
LABEL_97:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_99;
  }
LABEL_98:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_99:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) != 0)
LABEL_36:
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
LABEL_37:
  v9 = v8;
  if ((v8 & 0x10000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 224) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_39:
      if ((v9 & 0x40000000) == 0)
        goto LABEL_40;
      goto LABEL_103;
    }
  }
  else if ((v8 & 0x20000000) == 0)
  {
    goto LABEL_39;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 232);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_40:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_104;
  }
LABEL_103:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 240) & 0x1FF;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_105;
  }
LABEL_104:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_105:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 256) & 0x1FFFF;
  if ((v9 & 0x200000000) != 0)
LABEL_43:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 264) & 0x1FFF;
LABEL_44:
  v10 = v9;
  if ((v9 & 0x400000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 272) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x800000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 280);
  v11 = v10;
  if ((v10 & 0x1000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 288) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x2000000000) == 0)
    {
LABEL_50:
      if ((v11 & 0x4000000000) == 0)
        goto LABEL_51;
      goto LABEL_109;
    }
  }
  else if ((v10 & 0x2000000000) == 0)
  {
    goto LABEL_50;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 296);
  if ((v11 & 0x4000000000) == 0)
  {
LABEL_51:
    if ((v11 & 0x8000000000) == 0)
      goto LABEL_52;
    goto LABEL_110;
  }
LABEL_109:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_111;
  }
LABEL_110:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 312) != 0;
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_112;
  }
LABEL_111:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 320);
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_113;
  }
LABEL_112:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 328) != 0;
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_114;
  }
LABEL_113:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_115;
  }
LABEL_114:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_116;
  }
LABEL_115:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_117;
  }
LABEL_116:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_118;
  }
LABEL_117:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_120;
  }
LABEL_119:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_124;
  }
LABEL_123:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 416);
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_125;
  }
LABEL_124:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 424);
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_126;
  }
LABEL_125:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 432);
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 440);
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_72;
    goto LABEL_71;
  }
LABEL_128:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) != 0)
LABEL_71:
    *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 464);
LABEL_72:
  v12 = v2 & 1;
  if ((v11 & 0x800000000000000) != 0)
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 472);
  v13 = v3 & 2;
  v14 = v3 & 4;
  v15 = v3 & 8;
  v16 = v3 & 0x10;
  v17 = v3 & 0x20;
  v18 = v3 & 0x40;
  v19 = v4 & 0x80;
  v20 = v4 & 0x100;
  v25 = (unsigned __int16)v6 & 0x8000;
  v26 = v6 & 0x10000;
  v27 = v6 & 0x20000;
  v28 = v6 & 0x40000;
  v29 = v6 & 0x80000;
  v30 = v6 & 0x100000;
  if ((v11 & 0x1000000000000000) != 0)
    *(_BYTE *)(a2 + 132) = *(_QWORD *)(a1 + 480) != 0;
  v21 = v5 & 0x200;
  v24 = v5 & 0x4000;
  v23 = v5 & 0x2000;
  v22 = v5 & 0x1000;
  v32 = v7 & 0x400000;
  v33 = v8 & 0x800000;
  v34 = v8 & 0x1000000;
  v35 = v8 & 0x2000000;
  v36 = v8 & 0x4000000;
  v37 = v8 & 0x8000000;
  v38 = v8 & 0x10000000;
  v40 = v9 & 0x200000000;
  v41 = v9 & 0x400000000;
  v42 = v10 & 0x800000000;
  v43 = v11 & 0x2000000000;
  v44 = v10 & 0x1000000000;
  v45 = v11 & 0x4000000000;
  v46 = v11 & 0x8000000000;
  v47 = v11 & 0x10000000000;
  v48 = v11 & 0x20000000000;
  v49 = v11 & 0x40000000000;
  v39 = BYTE4(v9) & 1;
  LODWORD(v21) = (v13 >> 1)
               + v12
               + (v14 >> 2)
               + (v15 >> 3)
               + (v16 >> 4)
               + (v17 >> 5)
               + (v18 >> 6)
               + (v19 >> 7)
               + (v20 >> 8)
               + (v21 >> 9)
               + ((unint64_t)(v5 & 0x400) >> 10)
               + ((unint64_t)(v5 & 0x800) >> 11)
               + (v22 >> 12)
               + (v23 >> 13)
               + (v24 >> 14)
               + (v25 >> 15)
               + (v26 >> 16)
               + (v27 >> 17)
               + (v28 >> 18)
               + (v29 >> 19)
               + (v30 >> 20)
               + ((v7 & 0x200000uLL) >> 21)
               + (v32 >> 22)
               + (v33 >> 23)
               + (v34 >> 24)
               + (v35 >> 25)
               + (v36 >> 26)
               + (v37 >> 27)
               + (v38 >> 28)
               + ((v9 & 0x20000000) >> 29)
               + ((v9 & 0x40000000) >> 30)
               + (v9 >> 31)
               + v39
               + (v40 >> 33)
               + (v41 >> 34)
               + (v42 >> 35)
               + (v44 >> 36)
               + (v43 >> 37)
               + (v45 >> 38)
               + (v46 >> 39)
               + (v47 >> 40)
               + (v48 >> 41)
               + (v49 >> 42);
  return (_DWORD)v21
       + ((v11 & 0x80000000000uLL) >> 43)
       + ((v11 & 0x100000000000uLL) >> 44)
       + ((v11 & 0x200000000000uLL) >> 45)
       + ((v11 & 0x400000000000uLL) >> 46)
       + ((v11 & 0x800000000000uLL) >> 47)
       + ((v11 & 0x1000000000000uLL) >> 48)
       + ((v11 & 0x2000000000000uLL) >> 49)
       + ((v11 & 0x4000000000000uLL) >> 50)
       + ((v11 & 0x8000000000000uLL) >> 51)
       + ((v11 & 0x10000000000000uLL) >> 52)
       + ((v11 & 0x20000000000000uLL) >> 53)
       + ((v11 & 0x40000000000000uLL) >> 54)
       + ((v11 & 0x80000000000000uLL) >> 55)
       + ((v11 & 0x100000000000000uLL) >> 56)
       + ((v11 & 0x200000000000000uLL) >> 57)
       + ((v11 & 0x400000000000000uLL) >> 58)
       + ((v11 & 0x800000000000000uLL) >> 59)
       + ((v11 & 0x1000000000000000uLL) >> 60);
}

unint64_t sub_1C4D33800(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_79;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_80;
  }
LABEL_79:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_81;
  }
LABEL_80:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_81:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_85;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_86;
  }
LABEL_85:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_87;
  }
LABEL_86:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_87:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_91;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_92;
  }
LABEL_91:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_93;
  }
LABEL_92:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_93:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_97;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_98;
  }
LABEL_97:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_99;
  }
LABEL_98:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_99:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) != 0)
LABEL_36:
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
LABEL_37:
  v9 = v8;
  if ((v8 & 0x10000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 224) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_39:
      if ((v9 & 0x40000000) == 0)
        goto LABEL_40;
      goto LABEL_103;
    }
  }
  else if ((v8 & 0x20000000) == 0)
  {
    goto LABEL_39;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 232);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_40:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_104;
  }
LABEL_103:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 240) & 0x1FF;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_105;
  }
LABEL_104:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_105:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 256) & 0x1FFFF;
  if ((v9 & 0x200000000) != 0)
LABEL_43:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 264) & 0x1FFF;
LABEL_44:
  v10 = v9;
  if ((v9 & 0x400000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 272) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x800000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 280);
  v11 = v10;
  if ((v10 & 0x1000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 288) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x2000000000) == 0)
    {
LABEL_50:
      if ((v11 & 0x4000000000) == 0)
        goto LABEL_51;
      goto LABEL_109;
    }
  }
  else if ((v10 & 0x2000000000) == 0)
  {
    goto LABEL_50;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 296);
  if ((v11 & 0x4000000000) == 0)
  {
LABEL_51:
    if ((v11 & 0x8000000000) == 0)
      goto LABEL_52;
    goto LABEL_110;
  }
LABEL_109:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_111;
  }
LABEL_110:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 312) != 0;
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_112;
  }
LABEL_111:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 320);
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_113;
  }
LABEL_112:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 328) != 0;
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_114;
  }
LABEL_113:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_115;
  }
LABEL_114:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_116;
  }
LABEL_115:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_117;
  }
LABEL_116:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_118;
  }
LABEL_117:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_120;
  }
LABEL_119:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_124;
  }
LABEL_123:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 416);
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_125;
  }
LABEL_124:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 424);
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_126;
  }
LABEL_125:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 432);
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 440);
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_72;
    goto LABEL_71;
  }
LABEL_128:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) != 0)
LABEL_71:
    *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 464);
LABEL_72:
  v12 = v2 & 1;
  if ((v11 & 0x800000000000000) != 0)
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 472);
  v13 = v3 & 2;
  v14 = v3 & 4;
  v15 = v3 & 8;
  v16 = v3 & 0x10;
  v17 = v3 & 0x20;
  v18 = v3 & 0x40;
  v19 = v4 & 0x80;
  v20 = v4 & 0x100;
  v25 = (unsigned __int16)v6 & 0x8000;
  v26 = v6 & 0x10000;
  v27 = v6 & 0x20000;
  v28 = v6 & 0x40000;
  v29 = v6 & 0x80000;
  v30 = v6 & 0x100000;
  if ((v11 & 0x1000000000000000) != 0)
    *(_BYTE *)(a2 + 132) = *(_QWORD *)(a1 + 480) != 0;
  v21 = v5 & 0x200;
  v24 = v5 & 0x4000;
  v23 = v5 & 0x2000;
  v22 = v5 & 0x1000;
  v32 = v7 & 0x400000;
  v33 = v8 & 0x800000;
  v34 = v8 & 0x1000000;
  v35 = v8 & 0x2000000;
  v36 = v8 & 0x4000000;
  v37 = v8 & 0x8000000;
  v38 = v8 & 0x10000000;
  v40 = v9 & 0x200000000;
  v41 = v9 & 0x400000000;
  v42 = v10 & 0x800000000;
  v43 = v11 & 0x2000000000;
  v44 = v10 & 0x1000000000;
  v45 = v11 & 0x4000000000;
  v46 = v11 & 0x8000000000;
  v47 = v11 & 0x10000000000;
  v48 = v11 & 0x20000000000;
  v49 = v11 & 0x40000000000;
  v39 = BYTE4(v9) & 1;
  LODWORD(v21) = (v13 >> 1)
               + v12
               + (v14 >> 2)
               + (v15 >> 3)
               + (v16 >> 4)
               + (v17 >> 5)
               + (v18 >> 6)
               + (v19 >> 7)
               + (v20 >> 8)
               + (v21 >> 9)
               + ((unint64_t)(v5 & 0x400) >> 10)
               + ((unint64_t)(v5 & 0x800) >> 11)
               + (v22 >> 12)
               + (v23 >> 13)
               + (v24 >> 14)
               + (v25 >> 15)
               + (v26 >> 16)
               + (v27 >> 17)
               + (v28 >> 18)
               + (v29 >> 19)
               + (v30 >> 20)
               + ((v7 & 0x200000uLL) >> 21)
               + (v32 >> 22)
               + (v33 >> 23)
               + (v34 >> 24)
               + (v35 >> 25)
               + (v36 >> 26)
               + (v37 >> 27)
               + (v38 >> 28)
               + ((v9 & 0x20000000) >> 29)
               + ((v9 & 0x40000000) >> 30)
               + (v9 >> 31)
               + v39
               + (v40 >> 33)
               + (v41 >> 34)
               + (v42 >> 35)
               + (v44 >> 36)
               + (v43 >> 37)
               + (v45 >> 38)
               + (v46 >> 39)
               + (v47 >> 40)
               + (v48 >> 41)
               + (v49 >> 42);
  return (_DWORD)v21
       + ((v11 & 0x80000000000uLL) >> 43)
       + ((v11 & 0x100000000000uLL) >> 44)
       + ((v11 & 0x200000000000uLL) >> 45)
       + ((v11 & 0x400000000000uLL) >> 46)
       + ((v11 & 0x800000000000uLL) >> 47)
       + ((v11 & 0x1000000000000uLL) >> 48)
       + ((v11 & 0x2000000000000uLL) >> 49)
       + ((v11 & 0x4000000000000uLL) >> 50)
       + ((v11 & 0x8000000000000uLL) >> 51)
       + ((v11 & 0x10000000000000uLL) >> 52)
       + ((v11 & 0x20000000000000uLL) >> 53)
       + ((v11 & 0x40000000000000uLL) >> 54)
       + ((v11 & 0x80000000000000uLL) >> 55)
       + ((v11 & 0x100000000000000uLL) >> 56)
       + ((v11 & 0x200000000000000uLL) >> 57)
       + ((v11 & 0x400000000000000uLL) >> 58)
       + ((v11 & 0x800000000000000uLL) >> 59)
       + ((v11 & 0x1000000000000000uLL) >> 60);
}

unint64_t sub_1C4D340D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_62;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_63;
  }
LABEL_62:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_64;
  }
LABEL_63:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_64:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_68;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_69;
  }
LABEL_68:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_70;
  }
LABEL_69:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_70:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_74;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_75;
  }
LABEL_74:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_76;
  }
LABEL_75:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_76:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_80;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_81;
  }
LABEL_80:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_82;
  }
LABEL_81:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_83;
  }
LABEL_82:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_84;
  }
LABEL_83:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v8 & 0x20000000) == 0)
      goto LABEL_38;
    goto LABEL_85;
  }
LABEL_84:
  *(_BYTE *)(a2 + 53) = *(_QWORD *)(a1 + 224) != 0;
  if ((v8 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x40000000) == 0)
      goto LABEL_39;
    goto LABEL_86;
  }
LABEL_85:
  *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 232);
  if ((v8 & 0x40000000) == 0)
  {
LABEL_39:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_87;
  }
LABEL_86:
  *(_DWORD *)(a2 + 60) = *(_QWORD *)(a1 + 240);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_40:
    if ((v8 & 0x100000000) == 0)
      goto LABEL_41;
    goto LABEL_88;
  }
LABEL_87:
  *(_BYTE *)(a2 + 64) = *(_QWORD *)(a1 + 248) != 0;
  if ((v8 & 0x100000000) == 0)
  {
LABEL_41:
    if ((v8 & 0x200000000) == 0)
      goto LABEL_42;
    goto LABEL_89;
  }
LABEL_88:
  *(_BYTE *)(a2 + 65) = *(_QWORD *)(a1 + 256) != 0;
  if ((v8 & 0x200000000) == 0)
  {
LABEL_42:
    if ((v8 & 0x400000000) == 0)
      goto LABEL_43;
    goto LABEL_90;
  }
LABEL_89:
  *(_BYTE *)(a2 + 66) = *(_QWORD *)(a1 + 264) != 0;
  if ((v8 & 0x400000000) == 0)
  {
LABEL_43:
    if ((v8 & 0x800000000) == 0)
      goto LABEL_44;
    goto LABEL_91;
  }
LABEL_90:
  *(_BYTE *)(a2 + 67) = *(_QWORD *)(a1 + 272) != 0;
  if ((v8 & 0x800000000) == 0)
  {
LABEL_44:
    if ((v8 & 0x1000000000) == 0)
      goto LABEL_45;
    goto LABEL_92;
  }
LABEL_91:
  *(_BYTE *)(a2 + 68) = *(_QWORD *)(a1 + 280) != 0;
  if ((v8 & 0x1000000000) == 0)
  {
LABEL_45:
    if ((v8 & 0x2000000000) == 0)
      goto LABEL_46;
    goto LABEL_93;
  }
LABEL_92:
  *(_BYTE *)(a2 + 69) = *(_QWORD *)(a1 + 288) != 0;
  if ((v8 & 0x2000000000) == 0)
  {
LABEL_46:
    if ((v8 & 0x4000000000) == 0)
      goto LABEL_47;
    goto LABEL_94;
  }
LABEL_93:
  *(_BYTE *)(a2 + 70) = *(_QWORD *)(a1 + 296) != 0;
  if ((v8 & 0x4000000000) == 0)
  {
LABEL_47:
    if ((v8 & 0x8000000000) == 0)
      goto LABEL_48;
    goto LABEL_95;
  }
LABEL_94:
  *(_BYTE *)(a2 + 71) = *(_QWORD *)(a1 + 304) != 0;
  if ((v8 & 0x8000000000) == 0)
  {
LABEL_48:
    if ((v8 & 0x10000000000) == 0)
      goto LABEL_49;
    goto LABEL_96;
  }
LABEL_95:
  *(_DWORD *)(a2 + 72) = *(_QWORD *)(a1 + 312);
  if ((v8 & 0x10000000000) == 0)
  {
LABEL_49:
    if ((v8 & 0x20000000000) == 0)
      goto LABEL_50;
    goto LABEL_97;
  }
LABEL_96:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 320);
  if ((v8 & 0x20000000000) == 0)
  {
LABEL_50:
    if ((v8 & 0x40000000000) == 0)
      goto LABEL_51;
    goto LABEL_98;
  }
LABEL_97:
  *(_DWORD *)(a2 + 80) = *(_QWORD *)(a1 + 328);
  if ((v8 & 0x40000000000) == 0)
  {
LABEL_51:
    if ((v8 & 0x80000000000) == 0)
      goto LABEL_52;
    goto LABEL_99;
  }
LABEL_98:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 336);
  if ((v8 & 0x80000000000) == 0)
  {
LABEL_52:
    if ((v8 & 0x100000000000) == 0)
      goto LABEL_53;
    goto LABEL_100;
  }
LABEL_99:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 344);
  if ((v8 & 0x100000000000) == 0)
  {
LABEL_53:
    if ((v8 & 0x200000000000) == 0)
      goto LABEL_55;
    goto LABEL_54;
  }
LABEL_100:
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 352);
  if ((v8 & 0x200000000000) != 0)
LABEL_54:
    *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 360);
LABEL_55:
  if ((v8 & 0x400000000000) != 0)
    *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 368);
  if ((v8 & 0x800000000000) != 0)
    *(_BYTE *)(a2 + 104) = *(_QWORD *)(a1 + 376) != 0;
  v9 = ((unint64_t)(v3 & 2) >> 1)
     + (v2 & 1)
     + ((unint64_t)(v3 & 4) >> 2)
     + ((unint64_t)(v3 & 8) >> 3)
     + ((unint64_t)(v3 & 0x10) >> 4)
     + ((unint64_t)(v3 & 0x20) >> 5)
     + ((unint64_t)(v3 & 0x40) >> 6)
     + ((unint64_t)(v4 & 0x80) >> 7)
     + ((unint64_t)(v4 & 0x100) >> 8)
     + ((unint64_t)(v5 & 0x200) >> 9)
     + ((unint64_t)(v5 & 0x400) >> 10)
     + ((unint64_t)(v5 & 0x800) >> 11)
     + ((unint64_t)(v5 & 0x1000) >> 12)
     + ((unint64_t)(v5 & 0x2000) >> 13)
     + ((unint64_t)(v5 & 0x4000) >> 14)
     + ((unint64_t)((unsigned __int16)v6 & 0x8000) >> 15)
     + ((v6 & 0x10000uLL) >> 16)
     + ((v6 & 0x20000uLL) >> 17)
     + ((v6 & 0x40000uLL) >> 18)
     + ((v6 & 0x80000uLL) >> 19)
     + ((v6 & 0x100000uLL) >> 20)
     + ((v7 & 0x200000uLL) >> 21)
     + ((v7 & 0x400000uLL) >> 22)
     + ((v8 & 0x800000uLL) >> 23)
     + ((v8 & 0x1000000) >> 24)
     + ((v8 & 0x2000000) >> 25)
     + ((v8 & 0x4000000) >> 26)
     + ((v8 & 0x8000000) >> 27)
     + ((v8 & 0x10000000) >> 28)
     + ((v8 & 0x20000000) >> 29)
     + ((v8 & 0x40000000) >> 30);
  return v9
       + (v8 >> 31)
       + (BYTE4(v8) & 1)
       + ((v8 & 0x200000000uLL) >> 33)
       + ((v8 & 0x400000000uLL) >> 34)
       + ((v8 & 0x800000000uLL) >> 35)
       + ((v8 & 0x1000000000uLL) >> 36)
       + ((v8 & 0x2000000000uLL) >> 37)
       + ((v8 & 0x4000000000uLL) >> 38)
       + ((v8 & 0x8000000000uLL) >> 39)
       + ((v8 & 0x10000000000uLL) >> 40)
       + ((v8 & 0x20000000000uLL) >> 41)
       + ((v8 & 0x40000000000uLL) >> 42)
       + ((v8 & 0x80000000000uLL) >> 43)
       + ((v8 & 0x100000000000uLL) >> 44)
       + ((v8 & 0x200000000000uLL) >> 45)
       + ((v8 & 0x400000000000uLL) >> 46)
       + ((v8 & 0x800000000000uLL) >> 47);
}

unint64_t sub_1C4D347A0(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a1[156];
  if ((v2 & 1) != 0)
  {
    *(_DWORD *)a2 = *a1;
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_BYTE *)(a2 + 4) = a1[1] != 0;
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  *(_BYTE *)(a2 + 5) = a1[2] != 0;
  if ((v2 & 8) == 0)
  {
LABEL_5:
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_27;
  }
LABEL_26:
  *(_BYTE *)(a2 + 6) = a1[3] != 0;
  if ((v2 & 0x10) == 0)
  {
LABEL_6:
    if ((v2 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_28;
  }
LABEL_27:
  *(_BYTE *)(a2 + 7) = a1[4] != 0;
  if ((v2 & 0x20) == 0)
  {
LABEL_7:
    if ((v2 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_28:
  *(_BYTE *)(a2 + 8) = a1[5] != 0;
  if ((v2 & 0x40) == 0)
  {
LABEL_8:
    if ((v2 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_30;
  }
LABEL_29:
  *(_BYTE *)(a2 + 9) = a1[6] != 0;
  if ((v2 & 0x80) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  *(_BYTE *)(a2 + 10) = a1[7] != 0;
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_32;
  }
LABEL_31:
  *(_BYTE *)(a2 + 11) = a1[8] != 0;
  if ((v2 & 0x200) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_33;
  }
LABEL_32:
  *(_DWORD *)(a2 + 12) = a1[9];
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_34;
  }
LABEL_33:
  *(_DWORD *)(a2 + 16) = a1[10];
  if ((v2 & 0x800) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_35;
  }
LABEL_34:
  *(_DWORD *)(a2 + 20) = a1[11];
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_35:
  *(_DWORD *)(a2 + 24) = a1[12];
  if ((v2 & 0x2000) == 0)
  {
LABEL_15:
    if ((v2 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_37;
  }
LABEL_36:
  *(_DWORD *)(a2 + 28) = a1[13];
  if ((v2 & 0x4000) == 0)
  {
LABEL_16:
    if ((v2 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_17;
  }
LABEL_37:
  *(_DWORD *)(a2 + 32) = a1[14];
  if ((v2 & 0x8000) != 0)
LABEL_17:
    *(_DWORD *)(a2 + 36) = a1[15];
LABEL_18:
  if ((v2 & 0x10000) != 0)
    *(_DWORD *)(a2 + 40) = a1[16];
  if ((v2 & 0x20000) != 0)
    *(_BYTE *)(a2 + 44) = a1[17] != 0;
  return ((unint64_t)(v2 & 2) >> 1)
       + (v2 & 1)
       + ((unint64_t)(v2 & 4) >> 2)
       + ((unint64_t)(v2 & 8) >> 3)
       + ((unint64_t)(v2 & 0x10) >> 4)
       + ((unint64_t)(v2 & 0x20) >> 5)
       + ((unint64_t)(v2 & 0x40) >> 6)
       + ((unint64_t)(v2 & 0x80) >> 7)
       + ((unint64_t)(v2 & 0x100) >> 8)
       + ((unint64_t)(v2 & 0x200) >> 9)
       + ((unint64_t)(v2 & 0x400) >> 10)
       + ((unint64_t)(v2 & 0x800) >> 11)
       + ((unint64_t)(v2 & 0x1000) >> 12)
       + ((unint64_t)(v2 & 0x2000) >> 13)
       + ((unint64_t)(v2 & 0x4000) >> 14)
       + ((unint64_t)((unsigned __int16)v2 & 0x8000) >> 15)
       + ((v2 & 0x10000uLL) >> 16)
       + ((v2 & 0x20000uLL) >> 17);
}

unint64_t sub_1C4D349E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_63;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_64;
  }
LABEL_63:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_65;
  }
LABEL_64:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_65:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_69;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_70;
  }
LABEL_69:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_71;
  }
LABEL_70:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_71:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_75;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_76;
  }
LABEL_75:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_77;
  }
LABEL_76:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_77:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_81;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_82;
  }
LABEL_81:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_83;
  }
LABEL_82:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_84;
  }
LABEL_83:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_85;
  }
LABEL_84:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v8 & 0x20000000) == 0)
      goto LABEL_38;
    goto LABEL_86;
  }
LABEL_85:
  *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 224);
  if ((v8 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x40000000) == 0)
      goto LABEL_39;
    goto LABEL_87;
  }
LABEL_86:
  *(_DWORD *)(a2 + 60) = *(_QWORD *)(a1 + 232);
  if ((v8 & 0x40000000) == 0)
  {
LABEL_39:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_88;
  }
LABEL_87:
  *(_BYTE *)(a2 + 64) = *(_QWORD *)(a1 + 240) != 0;
  if ((v8 & 0x80000000) == 0)
  {
LABEL_40:
    if ((v8 & 0x100000000) == 0)
      goto LABEL_41;
    goto LABEL_89;
  }
LABEL_88:
  *(_BYTE *)(a2 + 65) = *(_QWORD *)(a1 + 248) != 0;
  if ((v8 & 0x100000000) == 0)
  {
LABEL_41:
    if ((v8 & 0x200000000) == 0)
      goto LABEL_42;
    goto LABEL_90;
  }
LABEL_89:
  *(_BYTE *)(a2 + 66) = *(_QWORD *)(a1 + 256) != 0;
  if ((v8 & 0x200000000) == 0)
  {
LABEL_42:
    if ((v8 & 0x400000000) == 0)
      goto LABEL_43;
    goto LABEL_91;
  }
LABEL_90:
  *(_BYTE *)(a2 + 67) = *(_QWORD *)(a1 + 264) != 0;
  if ((v8 & 0x400000000) == 0)
  {
LABEL_43:
    if ((v8 & 0x800000000) == 0)
      goto LABEL_44;
    goto LABEL_92;
  }
LABEL_91:
  *(_BYTE *)(a2 + 68) = *(_QWORD *)(a1 + 272) != 0;
  if ((v8 & 0x800000000) == 0)
  {
LABEL_44:
    if ((v8 & 0x1000000000) == 0)
      goto LABEL_45;
    goto LABEL_93;
  }
LABEL_92:
  *(_BYTE *)(a2 + 69) = *(_QWORD *)(a1 + 280) != 0;
  if ((v8 & 0x1000000000) == 0)
  {
LABEL_45:
    if ((v8 & 0x2000000000) == 0)
      goto LABEL_47;
    goto LABEL_46;
  }
LABEL_93:
  *(_BYTE *)(a2 + 70) = *(_QWORD *)(a1 + 288) != 0;
  if ((v8 & 0x2000000000) != 0)
LABEL_46:
    *(_BYTE *)(a2 + 71) = *(_QWORD *)(a1 + 296) != 0;
LABEL_47:
  v9 = v8;
  if ((v8 & 0x4000000000) != 0)
  {
    *(_BYTE *)(a2 + 72) = *(_BYTE *)(a1 + 304) & 0xF;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x8000000000) == 0)
    {
LABEL_49:
      if ((v9 & 0x10000000000) == 0)
        goto LABEL_50;
      goto LABEL_97;
    }
  }
  else if ((v8 & 0x8000000000) == 0)
  {
    goto LABEL_49;
  }
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 312);
  if ((v9 & 0x10000000000) == 0)
  {
LABEL_50:
    if ((v9 & 0x20000000000) == 0)
      goto LABEL_51;
    goto LABEL_98;
  }
LABEL_97:
  *(_DWORD *)(a2 + 80) = *(_QWORD *)(a1 + 320);
  if ((v9 & 0x20000000000) == 0)
  {
LABEL_51:
    if ((v9 & 0x40000000000) == 0)
      goto LABEL_52;
    goto LABEL_99;
  }
LABEL_98:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 328);
  if ((v9 & 0x40000000000) == 0)
  {
LABEL_52:
    if ((v9 & 0x80000000000) == 0)
      goto LABEL_53;
    goto LABEL_100;
  }
LABEL_99:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 336);
  if ((v9 & 0x80000000000) == 0)
  {
LABEL_53:
    if ((v9 & 0x100000000000) == 0)
      goto LABEL_54;
    goto LABEL_101;
  }
LABEL_100:
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 344);
  if ((v9 & 0x100000000000) == 0)
  {
LABEL_54:
    if ((v9 & 0x200000000000) == 0)
      goto LABEL_56;
    goto LABEL_55;
  }
LABEL_101:
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 352);
  if ((v9 & 0x200000000000) != 0)
LABEL_55:
    *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 360);
LABEL_56:
  if ((v9 & 0x400000000000) != 0)
    *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 368);
  if ((v9 & 0x800000000000) != 0)
    *(_BYTE *)(a2 + 108) = *(_QWORD *)(a1 + 376) != 0;
  v10 = ((unint64_t)(v3 & 2) >> 1)
      + (v2 & 1)
      + ((unint64_t)(v3 & 4) >> 2)
      + ((unint64_t)(v3 & 8) >> 3)
      + ((unint64_t)(v3 & 0x10) >> 4)
      + ((unint64_t)(v3 & 0x20) >> 5)
      + ((unint64_t)(v3 & 0x40) >> 6)
      + ((unint64_t)(v4 & 0x80) >> 7)
      + ((unint64_t)(v4 & 0x100) >> 8)
      + ((unint64_t)(v5 & 0x200) >> 9)
      + ((unint64_t)(v5 & 0x400) >> 10)
      + ((unint64_t)(v5 & 0x800) >> 11)
      + ((unint64_t)(v5 & 0x1000) >> 12)
      + ((unint64_t)(v5 & 0x2000) >> 13)
      + ((unint64_t)(v5 & 0x4000) >> 14)
      + ((unint64_t)((unsigned __int16)v6 & 0x8000) >> 15)
      + ((v6 & 0x10000uLL) >> 16)
      + ((v6 & 0x20000uLL) >> 17)
      + ((v6 & 0x40000uLL) >> 18)
      + ((v6 & 0x80000uLL) >> 19)
      + ((v6 & 0x100000uLL) >> 20)
      + ((v7 & 0x200000uLL) >> 21)
      + ((v7 & 0x400000uLL) >> 22)
      + ((v8 & 0x800000uLL) >> 23)
      + ((v8 & 0x1000000) >> 24)
      + ((v8 & 0x2000000) >> 25)
      + ((v8 & 0x4000000) >> 26)
      + ((v8 & 0x8000000) >> 27)
      + ((v8 & 0x10000000) >> 28)
      + ((v8 & 0x20000000) >> 29)
      + ((v8 & 0x40000000) >> 30);
  return v10
       + (v8 >> 31)
       + (BYTE4(v8) & 1)
       + ((v8 & 0x200000000uLL) >> 33)
       + ((v8 & 0x400000000uLL) >> 34)
       + ((v8 & 0x800000000uLL) >> 35)
       + ((v8 & 0x1000000000uLL) >> 36)
       + ((v8 & 0x2000000000uLL) >> 37)
       + ((v8 & 0x4000000000uLL) >> 38)
       + ((v9 & 0x8000000000uLL) >> 39)
       + ((v9 & 0x10000000000uLL) >> 40)
       + ((v9 & 0x20000000000uLL) >> 41)
       + ((v9 & 0x40000000000uLL) >> 42)
       + ((v9 & 0x80000000000uLL) >> 43)
       + ((v9 & 0x100000000000uLL) >> 44)
       + ((v9 & 0x200000000000uLL) >> 45)
       + ((v9 & 0x400000000000uLL) >> 46)
       + ((v9 & 0x800000000000uLL) >> 47);
}

unint64_t sub_1C4D350C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_80;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_81;
  }
LABEL_80:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_82;
  }
LABEL_81:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_82:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_86;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_87;
  }
LABEL_86:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_88;
  }
LABEL_87:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_88:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_92;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_93;
  }
LABEL_92:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_94;
  }
LABEL_93:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_94:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_98;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_99;
  }
LABEL_98:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_100;
  }
LABEL_99:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_100:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) != 0)
LABEL_36:
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
LABEL_37:
  v9 = v8;
  if ((v8 & 0x10000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 224) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_39:
      if ((v9 & 0x40000000) == 0)
        goto LABEL_40;
      goto LABEL_104;
    }
  }
  else if ((v8 & 0x20000000) == 0)
  {
    goto LABEL_39;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 232);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_40:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_105;
  }
LABEL_104:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 240) & 0x1FF;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_106;
  }
LABEL_105:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_106:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 256) & 0x1FFFF;
  if ((v9 & 0x200000000) != 0)
LABEL_43:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 264) & 0x1FFF;
LABEL_44:
  v10 = v9;
  if ((v9 & 0x400000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 272) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x800000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 280);
  v11 = v10;
  if ((v10 & 0x1000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 288) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x2000000000) == 0)
    {
LABEL_50:
      if ((v11 & 0x4000000000) == 0)
        goto LABEL_51;
      goto LABEL_110;
    }
  }
  else if ((v10 & 0x2000000000) == 0)
  {
    goto LABEL_50;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 296);
  if ((v11 & 0x4000000000) == 0)
  {
LABEL_51:
    if ((v11 & 0x8000000000) == 0)
      goto LABEL_52;
    goto LABEL_111;
  }
LABEL_110:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_112;
  }
LABEL_111:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 312) != 0;
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_113;
  }
LABEL_112:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 320);
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_114;
  }
LABEL_113:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 328) != 0;
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_115;
  }
LABEL_114:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_116;
  }
LABEL_115:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_117;
  }
LABEL_116:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_118;
  }
LABEL_117:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_120;
  }
LABEL_119:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_125;
  }
LABEL_124:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 416);
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_126;
  }
LABEL_125:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 424);
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 432);
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 440);
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_129;
  }
LABEL_128:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_130;
  }
LABEL_129:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_73;
    goto LABEL_72;
  }
LABEL_130:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) != 0)
LABEL_72:
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 472);
LABEL_73:
  v12 = v2 & 1;
  if ((v11 & 0x1000000000000000) != 0)
    *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 480);
  v13 = v3 & 2;
  v14 = v3 & 4;
  v15 = v3 & 8;
  v16 = v3 & 0x10;
  v17 = v3 & 0x20;
  v18 = v3 & 0x40;
  v19 = v4 & 0x80;
  v20 = v4 & 0x100;
  v25 = (unsigned __int16)v6 & 0x8000;
  v26 = v6 & 0x10000;
  v27 = v6 & 0x20000;
  v28 = v6 & 0x40000;
  v29 = v6 & 0x80000;
  v30 = v6 & 0x100000;
  if ((v11 & 0x2000000000000000) != 0)
    *(_BYTE *)(a2 + 136) = *(_QWORD *)(a1 + 488) != 0;
  v22 = v5 & 0x800;
  v21 = v5 & 0x200;
  v24 = v5 & 0x4000;
  v23 = v5 & 0x2000;
  v32 = v7 & 0x400000;
  v33 = v8 & 0x800000;
  v34 = v8 & 0x1000000;
  v35 = v8 & 0x2000000;
  v36 = v8 & 0x4000000;
  v37 = v8 & 0x8000000;
  v38 = v8 & 0x10000000;
  v40 = v9 & 0x200000000;
  v41 = v9 & 0x400000000;
  v42 = v10 & 0x800000000;
  v43 = v11 & 0x2000000000;
  v44 = v10 & 0x1000000000;
  v45 = v11 & 0x4000000000;
  v46 = v11 & 0x8000000000;
  v47 = v11 & 0x10000000000;
  v48 = v11 & 0x20000000000;
  v49 = v11 & 0x40000000000;
  v39 = BYTE4(v9) & 1;
  LODWORD(v22) = (v13 >> 1)
               + v12
               + (v14 >> 2)
               + (v15 >> 3)
               + (v16 >> 4)
               + (v17 >> 5)
               + (v18 >> 6)
               + (v19 >> 7)
               + (v20 >> 8)
               + (v21 >> 9)
               + ((unint64_t)(v5 & 0x400) >> 10)
               + (v22 >> 11)
               + ((unint64_t)(v5 & 0x1000) >> 12)
               + (v23 >> 13)
               + (v24 >> 14)
               + (v25 >> 15)
               + (v26 >> 16)
               + (v27 >> 17)
               + (v28 >> 18)
               + (v29 >> 19)
               + (v30 >> 20)
               + ((v7 & 0x200000uLL) >> 21)
               + (v32 >> 22)
               + (v33 >> 23)
               + (v34 >> 24)
               + (v35 >> 25)
               + (v36 >> 26)
               + (v37 >> 27)
               + (v38 >> 28)
               + ((v9 & 0x20000000) >> 29)
               + ((v9 & 0x40000000) >> 30)
               + (v9 >> 31)
               + v39
               + (v40 >> 33)
               + (v41 >> 34)
               + (v42 >> 35)
               + (v44 >> 36)
               + (v43 >> 37)
               + (v45 >> 38)
               + (v46 >> 39)
               + (v47 >> 40)
               + (v48 >> 41)
               + (v49 >> 42);
  return (_DWORD)v22
       + ((v11 & 0x80000000000uLL) >> 43)
       + ((v11 & 0x100000000000uLL) >> 44)
       + ((v11 & 0x200000000000uLL) >> 45)
       + ((v11 & 0x400000000000uLL) >> 46)
       + ((v11 & 0x800000000000uLL) >> 47)
       + ((v11 & 0x1000000000000uLL) >> 48)
       + ((v11 & 0x2000000000000uLL) >> 49)
       + ((v11 & 0x4000000000000uLL) >> 50)
       + ((v11 & 0x8000000000000uLL) >> 51)
       + ((v11 & 0x10000000000000uLL) >> 52)
       + ((v11 & 0x20000000000000uLL) >> 53)
       + ((v11 & 0x40000000000000uLL) >> 54)
       + ((v11 & 0x80000000000000uLL) >> 55)
       + ((v11 & 0x100000000000000uLL) >> 56)
       + ((v11 & 0x200000000000000uLL) >> 57)
       + ((v11 & 0x400000000000000uLL) >> 58)
       + ((v11 & 0x800000000000000uLL) >> 59)
       + ((v11 & 0x1000000000000000uLL) >> 60)
       + ((v11 & 0x2000000000000000uLL) >> 61);
}

unint64_t sub_1C4D359B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_80;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_81;
  }
LABEL_80:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_82;
  }
LABEL_81:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_82:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_86;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_87;
  }
LABEL_86:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_88;
  }
LABEL_87:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_88:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_92;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_93;
  }
LABEL_92:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_94;
  }
LABEL_93:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_94:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_98;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_99;
  }
LABEL_98:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_100;
  }
LABEL_99:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_100:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) != 0)
LABEL_36:
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
LABEL_37:
  v9 = v8;
  if ((v8 & 0x10000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 224) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_39:
      if ((v9 & 0x40000000) == 0)
        goto LABEL_40;
      goto LABEL_104;
    }
  }
  else if ((v8 & 0x20000000) == 0)
  {
    goto LABEL_39;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 232);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_40:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_105;
  }
LABEL_104:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 240) & 0x1FF;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_106;
  }
LABEL_105:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_106:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 256) & 0x1FFFF;
  if ((v9 & 0x200000000) != 0)
LABEL_43:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 264) & 0x1FFF;
LABEL_44:
  v10 = v9;
  if ((v9 & 0x400000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 272) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x800000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 280);
  v11 = v10;
  if ((v10 & 0x1000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 288) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x2000000000) == 0)
    {
LABEL_50:
      if ((v11 & 0x4000000000) == 0)
        goto LABEL_51;
      goto LABEL_110;
    }
  }
  else if ((v10 & 0x2000000000) == 0)
  {
    goto LABEL_50;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 296);
  if ((v11 & 0x4000000000) == 0)
  {
LABEL_51:
    if ((v11 & 0x8000000000) == 0)
      goto LABEL_52;
    goto LABEL_111;
  }
LABEL_110:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_112;
  }
LABEL_111:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 312) != 0;
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_113;
  }
LABEL_112:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 320);
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_114;
  }
LABEL_113:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 328) != 0;
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_115;
  }
LABEL_114:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_116;
  }
LABEL_115:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_117;
  }
LABEL_116:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_118;
  }
LABEL_117:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_120;
  }
LABEL_119:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_125;
  }
LABEL_124:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 416);
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_126;
  }
LABEL_125:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 424);
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 432);
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 440);
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_129;
  }
LABEL_128:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_130;
  }
LABEL_129:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_73;
    goto LABEL_72;
  }
LABEL_130:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) != 0)
LABEL_72:
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 472);
LABEL_73:
  v12 = v2 & 1;
  if ((v11 & 0x1000000000000000) != 0)
    *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 480);
  v13 = v3 & 2;
  v14 = v3 & 4;
  v15 = v3 & 8;
  v16 = v3 & 0x10;
  v17 = v3 & 0x20;
  v18 = v3 & 0x40;
  v19 = v4 & 0x80;
  v20 = v4 & 0x100;
  v25 = (unsigned __int16)v6 & 0x8000;
  v26 = v6 & 0x10000;
  v27 = v6 & 0x20000;
  v28 = v6 & 0x40000;
  v29 = v6 & 0x80000;
  v30 = v6 & 0x100000;
  if ((v11 & 0x2000000000000000) != 0)
    *(_BYTE *)(a2 + 136) = *(_QWORD *)(a1 + 488) != 0;
  v22 = v5 & 0x800;
  v21 = v5 & 0x200;
  v24 = v5 & 0x4000;
  v23 = v5 & 0x2000;
  v32 = v7 & 0x400000;
  v33 = v8 & 0x800000;
  v34 = v8 & 0x1000000;
  v35 = v8 & 0x2000000;
  v36 = v8 & 0x4000000;
  v37 = v8 & 0x8000000;
  v38 = v8 & 0x10000000;
  v40 = v9 & 0x200000000;
  v41 = v9 & 0x400000000;
  v42 = v10 & 0x800000000;
  v43 = v11 & 0x2000000000;
  v44 = v10 & 0x1000000000;
  v45 = v11 & 0x4000000000;
  v46 = v11 & 0x8000000000;
  v47 = v11 & 0x10000000000;
  v48 = v11 & 0x20000000000;
  v49 = v11 & 0x40000000000;
  v39 = BYTE4(v9) & 1;
  LODWORD(v22) = (v13 >> 1)
               + v12
               + (v14 >> 2)
               + (v15 >> 3)
               + (v16 >> 4)
               + (v17 >> 5)
               + (v18 >> 6)
               + (v19 >> 7)
               + (v20 >> 8)
               + (v21 >> 9)
               + ((unint64_t)(v5 & 0x400) >> 10)
               + (v22 >> 11)
               + ((unint64_t)(v5 & 0x1000) >> 12)
               + (v23 >> 13)
               + (v24 >> 14)
               + (v25 >> 15)
               + (v26 >> 16)
               + (v27 >> 17)
               + (v28 >> 18)
               + (v29 >> 19)
               + (v30 >> 20)
               + ((v7 & 0x200000uLL) >> 21)
               + (v32 >> 22)
               + (v33 >> 23)
               + (v34 >> 24)
               + (v35 >> 25)
               + (v36 >> 26)
               + (v37 >> 27)
               + (v38 >> 28)
               + ((v9 & 0x20000000) >> 29)
               + ((v9 & 0x40000000) >> 30)
               + (v9 >> 31)
               + v39
               + (v40 >> 33)
               + (v41 >> 34)
               + (v42 >> 35)
               + (v44 >> 36)
               + (v43 >> 37)
               + (v45 >> 38)
               + (v46 >> 39)
               + (v47 >> 40)
               + (v48 >> 41)
               + (v49 >> 42);
  return (_DWORD)v22
       + ((v11 & 0x80000000000uLL) >> 43)
       + ((v11 & 0x100000000000uLL) >> 44)
       + ((v11 & 0x200000000000uLL) >> 45)
       + ((v11 & 0x400000000000uLL) >> 46)
       + ((v11 & 0x800000000000uLL) >> 47)
       + ((v11 & 0x1000000000000uLL) >> 48)
       + ((v11 & 0x2000000000000uLL) >> 49)
       + ((v11 & 0x4000000000000uLL) >> 50)
       + ((v11 & 0x8000000000000uLL) >> 51)
       + ((v11 & 0x10000000000000uLL) >> 52)
       + ((v11 & 0x20000000000000uLL) >> 53)
       + ((v11 & 0x40000000000000uLL) >> 54)
       + ((v11 & 0x80000000000000uLL) >> 55)
       + ((v11 & 0x100000000000000uLL) >> 56)
       + ((v11 & 0x200000000000000uLL) >> 57)
       + ((v11 & 0x400000000000000uLL) >> 58)
       + ((v11 & 0x800000000000000uLL) >> 59)
       + ((v11 & 0x1000000000000000uLL) >> 60)
       + ((v11 & 0x2000000000000000uLL) >> 61);
}

unint64_t sub_1C4D362B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_80;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_81;
  }
LABEL_80:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_82;
  }
LABEL_81:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_82:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_86;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_87;
  }
LABEL_86:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_88;
  }
LABEL_87:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_88:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_92;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_93;
  }
LABEL_92:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_94;
  }
LABEL_93:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_94:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_98;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_99;
  }
LABEL_98:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_100;
  }
LABEL_99:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_100:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) != 0)
LABEL_36:
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
LABEL_37:
  v9 = v8;
  if ((v8 & 0x10000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 224) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_39:
      if ((v9 & 0x40000000) == 0)
        goto LABEL_40;
      goto LABEL_104;
    }
  }
  else if ((v8 & 0x20000000) == 0)
  {
    goto LABEL_39;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 232);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_40:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_105;
  }
LABEL_104:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 240) & 0x1FF;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_106;
  }
LABEL_105:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_106:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 256) & 0x1FFFF;
  if ((v9 & 0x200000000) != 0)
LABEL_43:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 264) & 0x1FFF;
LABEL_44:
  v10 = v9;
  if ((v9 & 0x400000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 272) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x800000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 280);
  v11 = v10;
  if ((v10 & 0x1000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 288) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x2000000000) == 0)
    {
LABEL_50:
      if ((v11 & 0x4000000000) == 0)
        goto LABEL_51;
      goto LABEL_110;
    }
  }
  else if ((v10 & 0x2000000000) == 0)
  {
    goto LABEL_50;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 296);
  if ((v11 & 0x4000000000) == 0)
  {
LABEL_51:
    if ((v11 & 0x8000000000) == 0)
      goto LABEL_52;
    goto LABEL_111;
  }
LABEL_110:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_112;
  }
LABEL_111:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 312) != 0;
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_113;
  }
LABEL_112:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 320);
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_114;
  }
LABEL_113:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 328) != 0;
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_115;
  }
LABEL_114:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_116;
  }
LABEL_115:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_117;
  }
LABEL_116:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_118;
  }
LABEL_117:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_120;
  }
LABEL_119:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_125;
  }
LABEL_124:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 416);
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_126;
  }
LABEL_125:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 424);
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 432);
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 440);
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_129;
  }
LABEL_128:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_130;
  }
LABEL_129:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_73;
    goto LABEL_72;
  }
LABEL_130:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) != 0)
LABEL_72:
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 472);
LABEL_73:
  v12 = v2 & 1;
  if ((v11 & 0x1000000000000000) != 0)
    *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 480);
  v13 = v3 & 2;
  v14 = v3 & 4;
  v15 = v3 & 8;
  v16 = v3 & 0x10;
  v17 = v3 & 0x20;
  v18 = v3 & 0x40;
  v19 = v4 & 0x80;
  v20 = v4 & 0x100;
  v25 = (unsigned __int16)v6 & 0x8000;
  v26 = v6 & 0x10000;
  v27 = v6 & 0x20000;
  v28 = v6 & 0x40000;
  v29 = v6 & 0x80000;
  v30 = v6 & 0x100000;
  if ((v11 & 0x2000000000000000) != 0)
    *(_BYTE *)(a2 + 136) = *(_QWORD *)(a1 + 488) != 0;
  v22 = v5 & 0x800;
  v21 = v5 & 0x200;
  v24 = v5 & 0x4000;
  v23 = v5 & 0x2000;
  v32 = v7 & 0x400000;
  v33 = v8 & 0x800000;
  v34 = v8 & 0x1000000;
  v35 = v8 & 0x2000000;
  v36 = v8 & 0x4000000;
  v37 = v8 & 0x8000000;
  v38 = v8 & 0x10000000;
  v40 = v9 & 0x200000000;
  v41 = v9 & 0x400000000;
  v42 = v10 & 0x800000000;
  v43 = v11 & 0x2000000000;
  v44 = v10 & 0x1000000000;
  v45 = v11 & 0x4000000000;
  v46 = v11 & 0x8000000000;
  v47 = v11 & 0x10000000000;
  v48 = v11 & 0x20000000000;
  v49 = v11 & 0x40000000000;
  v39 = BYTE4(v9) & 1;
  LODWORD(v22) = (v13 >> 1)
               + v12
               + (v14 >> 2)
               + (v15 >> 3)
               + (v16 >> 4)
               + (v17 >> 5)
               + (v18 >> 6)
               + (v19 >> 7)
               + (v20 >> 8)
               + (v21 >> 9)
               + ((unint64_t)(v5 & 0x400) >> 10)
               + (v22 >> 11)
               + ((unint64_t)(v5 & 0x1000) >> 12)
               + (v23 >> 13)
               + (v24 >> 14)
               + (v25 >> 15)
               + (v26 >> 16)
               + (v27 >> 17)
               + (v28 >> 18)
               + (v29 >> 19)
               + (v30 >> 20)
               + ((v7 & 0x200000uLL) >> 21)
               + (v32 >> 22)
               + (v33 >> 23)
               + (v34 >> 24)
               + (v35 >> 25)
               + (v36 >> 26)
               + (v37 >> 27)
               + (v38 >> 28)
               + ((v9 & 0x20000000) >> 29)
               + ((v9 & 0x40000000) >> 30)
               + (v9 >> 31)
               + v39
               + (v40 >> 33)
               + (v41 >> 34)
               + (v42 >> 35)
               + (v44 >> 36)
               + (v43 >> 37)
               + (v45 >> 38)
               + (v46 >> 39)
               + (v47 >> 40)
               + (v48 >> 41)
               + (v49 >> 42);
  return (_DWORD)v22
       + ((v11 & 0x80000000000uLL) >> 43)
       + ((v11 & 0x100000000000uLL) >> 44)
       + ((v11 & 0x200000000000uLL) >> 45)
       + ((v11 & 0x400000000000uLL) >> 46)
       + ((v11 & 0x800000000000uLL) >> 47)
       + ((v11 & 0x1000000000000uLL) >> 48)
       + ((v11 & 0x2000000000000uLL) >> 49)
       + ((v11 & 0x4000000000000uLL) >> 50)
       + ((v11 & 0x8000000000000uLL) >> 51)
       + ((v11 & 0x10000000000000uLL) >> 52)
       + ((v11 & 0x20000000000000uLL) >> 53)
       + ((v11 & 0x40000000000000uLL) >> 54)
       + ((v11 & 0x80000000000000uLL) >> 55)
       + ((v11 & 0x100000000000000uLL) >> 56)
       + ((v11 & 0x200000000000000uLL) >> 57)
       + ((v11 & 0x400000000000000uLL) >> 58)
       + ((v11 & 0x800000000000000uLL) >> 59)
       + ((v11 & 0x1000000000000000uLL) >> 60)
       + ((v11 & 0x2000000000000000uLL) >> 61);
}

unint64_t sub_1C4D36BA8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_83;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_84;
  }
LABEL_83:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_85;
  }
LABEL_84:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_85:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_89;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_90;
  }
LABEL_89:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_91;
  }
LABEL_90:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_92;
  }
LABEL_91:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_92:
  *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
  if ((v5 & 0x4000) != 0)
LABEL_19:
    *(_BYTE *)(a2 + 28) = *(_QWORD *)(a1 + 112) != 0;
LABEL_20:
  v6 = v5;
  if ((v5 & 0x8000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 120) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x10000) == 0)
    {
LABEL_22:
      if ((v6 & 0x20000) == 0)
        goto LABEL_23;
      goto LABEL_96;
    }
  }
  else if ((v5 & 0x10000) == 0)
  {
    goto LABEL_22;
  }
  *(_WORD *)(a2 + 32) = *(_QWORD *)(a1 + 128);
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_97;
  }
LABEL_96:
  *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_98;
  }
LABEL_97:
  *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 144) & 0x1FF;
  if ((v6 & 0x80000) == 0)
  {
LABEL_25:
    if ((v6 & 0x100000) == 0)
      goto LABEL_27;
    goto LABEL_26;
  }
LABEL_98:
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 152) & 0x1FFFF;
  if ((v6 & 0x100000) != 0)
LABEL_26:
    *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 160) & 0x1FFF;
LABEL_27:
  v7 = v6;
  if ((v6 & 0x200000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 168) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x400000) != 0)
    *(_DWORD *)(a2 + 32) = *(_QWORD *)(a1 + 176);
  v8 = v7;
  if ((v7 & 0x800000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 184) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x1000000) == 0)
    {
LABEL_33:
      if ((v8 & 0x2000000) == 0)
        goto LABEL_34;
      goto LABEL_102;
    }
  }
  else if ((v7 & 0x1000000) == 0)
  {
    goto LABEL_33;
  }
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_103;
  }
LABEL_102:
  *(_DWORD *)(a2 + 44) = *(_QWORD *)(a1 + 200);
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_104;
  }
LABEL_103:
  *(_BYTE *)(a2 + 48) = *(_QWORD *)(a1 + 208) != 0;
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_105;
  }
LABEL_104:
  *(_DWORD *)(a2 + 52) = *(_QWORD *)(a1 + 216);
  if ((v8 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v8 & 0x20000000) == 0)
      goto LABEL_38;
    goto LABEL_106;
  }
LABEL_105:
  *(_BYTE *)(a2 + 56) = *(_QWORD *)(a1 + 224) != 0;
  if ((v8 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x40000000) == 0)
      goto LABEL_39;
    goto LABEL_107;
  }
LABEL_106:
  *(_BYTE *)(a2 + 57) = *(_QWORD *)(a1 + 232) != 0;
  if ((v8 & 0x40000000) == 0)
  {
LABEL_39:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_40;
  }
LABEL_107:
  *(_BYTE *)(a2 + 58) = *(_QWORD *)(a1 + 240) != 0;
  if ((v8 & 0x80000000) != 0)
LABEL_40:
    *(_BYTE *)(a2 + 59) = *(_QWORD *)(a1 + 248) != 0;
LABEL_41:
  v9 = v8;
  if ((v8 & 0x100000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 256) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x200000000) == 0)
    {
LABEL_43:
      if ((v9 & 0x400000000) == 0)
        goto LABEL_44;
      goto LABEL_111;
    }
  }
  else if ((v8 & 0x200000000) == 0)
  {
    goto LABEL_43;
  }
  *(_WORD *)(a2 + 60) = *(_QWORD *)(a1 + 264);
  if ((v9 & 0x400000000) == 0)
  {
LABEL_44:
    if ((v9 & 0x800000000) == 0)
      goto LABEL_45;
    goto LABEL_112;
  }
LABEL_111:
  *(_WORD *)(a2 + 60) = *(_WORD *)(a1 + 272) & 0x1FF;
  if ((v9 & 0x800000000) == 0)
  {
LABEL_45:
    if ((v9 & 0x1000000000) == 0)
      goto LABEL_46;
    goto LABEL_113;
  }
LABEL_112:
  *(_WORD *)(a2 + 60) = *(_WORD *)(a1 + 280) & 0x1FF;
  if ((v9 & 0x1000000000) == 0)
  {
LABEL_46:
    if ((v9 & 0x2000000000) == 0)
      goto LABEL_48;
    goto LABEL_47;
  }
LABEL_113:
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 288) & 0x1FFFF;
  if ((v9 & 0x2000000000) != 0)
LABEL_47:
    *(_WORD *)(a2 + 60) = *(_WORD *)(a1 + 296) & 0x1FFF;
LABEL_48:
  v10 = v9;
  if ((v9 & 0x4000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 304) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x8000000000) != 0)
    *(_DWORD *)(a2 + 60) = *(_QWORD *)(a1 + 312);
  v11 = v10;
  if ((v10 & 0x10000000000) != 0)
  {
    *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 320) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x20000000000) == 0)
    {
LABEL_54:
      if ((v11 & 0x40000000000) == 0)
        goto LABEL_55;
      goto LABEL_117;
    }
  }
  else if ((v10 & 0x20000000000) == 0)
  {
    goto LABEL_54;
  }
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 328);
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_118;
  }
LABEL_117:
  *(_DWORD *)(a2 + 72) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 76) = *(_QWORD *)(a1 + 344) != 0;
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_120;
  }
LABEL_119:
  *(_DWORD *)(a2 + 80) = *(_QWORD *)(a1 + 352);
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 84) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_122;
  }
LABEL_121:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 368);
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_123;
  }
LABEL_122:
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 376);
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_125;
  }
LABEL_124:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_126;
  }
LABEL_125:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_127;
  }
LABEL_126:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_128;
  }
LABEL_127:
  *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 416) != 0;
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_129;
  }
LABEL_128:
  *(_BYTE *)(a2 + 101) = *(_QWORD *)(a1 + 424) != 0;
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_130;
  }
LABEL_129:
  *(_BYTE *)(a2 + 102) = *(_QWORD *)(a1 + 432) != 0;
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_131;
  }
LABEL_130:
  *(_BYTE *)(a2 + 103) = *(_QWORD *)(a1 + 440) != 0;
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_132;
  }
LABEL_131:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_133;
  }
LABEL_132:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_72;
    goto LABEL_134;
  }
LABEL_133:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) == 0)
  {
LABEL_72:
    if ((v11 & 0x1000000000000000) == 0)
      goto LABEL_73;
    goto LABEL_135;
  }
LABEL_134:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 472);
  if ((v11 & 0x1000000000000000) == 0)
  {
LABEL_73:
    if ((v11 & 0x2000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_136;
  }
LABEL_135:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 480);
  if ((v11 & 0x2000000000000000) == 0)
  {
LABEL_74:
    if ((v11 & 0x4000000000000000) == 0)
      goto LABEL_75;
LABEL_137:
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 496);
    if ((v11 & 0x8000000000000000) == 0)
      goto LABEL_76;
    goto LABEL_138;
  }
LABEL_136:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 488);
  if ((v11 & 0x4000000000000000) != 0)
    goto LABEL_137;
LABEL_75:
  if ((v11 & 0x8000000000000000) == 0)
    goto LABEL_76;
LABEL_138:
  *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 504);
LABEL_76:
  v12 = *(_QWORD *)(a1 + 1256);
  if ((v12 & 1) != 0)
    *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 512);
  if ((v12 & 2) != 0)
    *(_BYTE *)(a2 + 140) = *(_QWORD *)(a1 + 520) != 0;
  v14 = ((v3 & 2) >> 1)
      + (v2 & 1)
      + ((v3 & 4) >> 2)
      + ((v3 & 8) >> 3)
      + ((v3 & 0x10) >> 4)
      + ((v3 & 0x20) >> 5)
      + ((v3 & 0x40) >> 6)
      + ((unint64_t)(v4 & 0x80) >> 7)
      + ((v4 & 0x100) >> 8)
      + ((v5 & 0x200) >> 9)
      + ((v5 & 0x400) >> 10)
      + ((v5 & 0x800) >> 11)
      + ((v5 & 0x1000) >> 12)
      + ((v5 & 0x2000) >> 13)
      + ((v5 & 0x4000) >> 14)
      + ((unint64_t)((unsigned __int16)v5 & 0x8000) >> 15)
      + ((v6 & 0x10000) >> 16)
      + ((v6 & 0x20000) >> 17)
      + ((v6 & 0x40000) >> 18)
      + ((v6 & 0x80000) >> 19)
      + ((v6 & 0x100000) >> 20)
      + ((v6 & 0x200000) >> 21)
      + ((v7 & 0x400000) >> 22)
      + ((v7 & 0x800000) >> 23)
      + ((v8 & 0x1000000) >> 24)
      + ((v8 & 0x2000000) >> 25)
      + ((v8 & 0x4000000) >> 26)
      + ((v8 & 0x8000000) >> 27)
      + ((v8 & 0x10000000) >> 28)
      + ((v8 & 0x20000000) >> 29)
      + ((v8 & 0x40000000) >> 30);
  v13 = v12 & 2;
  v17 = v9 & 0x200000000;
  v18 = v9 & 0x400000000;
  v19 = v9 & 0x800000000;
  v16 = BYTE4(v8) & 1;
  v20 = v12 & 1;
  return v14
       + (v8 >> 31)
       + v16
       + (v17 >> 33)
       + (v18 >> 34)
       + (v19 >> 35)
       + ((v9 & 0x1000000000) >> 36)
       + ((v9 & 0x2000000000) >> 37)
       + ((v9 & 0x4000000000) >> 38)
       + ((v10 & 0x8000000000) >> 39)
       + ((v10 & 0x10000000000) >> 40)
       + (v11 >> 63)
       + ((v11 & 0x20000000000) >> 41)
       + ((v11 & 0x40000000000) >> 42)
       + ((v11 & 0x80000000000) >> 43)
       + ((v11 & 0x100000000000) >> 44)
       + ((v11 & 0x200000000000) >> 45)
       + ((v11 & 0x400000000000) >> 46)
       + ((v11 & 0x800000000000) >> 47)
       + ((v11 & 0x1000000000000) >> 48)
       + ((v11 & 0x2000000000000) >> 49)
       + ((v11 & 0x4000000000000) >> 50)
       + ((v11 & 0x8000000000000) >> 51)
       + ((v11 & 0x10000000000000) >> 52)
       + ((v11 & 0x20000000000000) >> 53)
       + ((v11 & 0x40000000000000) >> 54)
       + ((v11 & 0x80000000000000) >> 55)
       + ((v11 & 0x100000000000000) >> 56)
       + ((v11 & 0x200000000000000) >> 57)
       + ((v11 & 0x400000000000000) >> 58)
       + ((v11 & 0x800000000000000) >> 59)
       + ((v11 & 0x1000000000000000) >> 60)
       + ((v11 & 0x2000000000000000) >> 61)
       + ((v11 & 0x4000000000000000) >> 62)
       + v20
       + (v13 >> 1);
}

unint64_t sub_1C4D37534(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_83;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_84;
  }
LABEL_83:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_85;
  }
LABEL_84:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_85:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_89;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_90;
  }
LABEL_89:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_91;
  }
LABEL_90:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_92;
  }
LABEL_91:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_92:
  *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
  if ((v5 & 0x4000) != 0)
LABEL_19:
    *(_BYTE *)(a2 + 28) = *(_QWORD *)(a1 + 112) != 0;
LABEL_20:
  v6 = v5;
  if ((v5 & 0x8000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 120) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x10000) == 0)
    {
LABEL_22:
      if ((v6 & 0x20000) == 0)
        goto LABEL_23;
      goto LABEL_96;
    }
  }
  else if ((v5 & 0x10000) == 0)
  {
    goto LABEL_22;
  }
  *(_WORD *)(a2 + 32) = *(_QWORD *)(a1 + 128);
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_97;
  }
LABEL_96:
  *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_98;
  }
LABEL_97:
  *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 144) & 0x1FF;
  if ((v6 & 0x80000) == 0)
  {
LABEL_25:
    if ((v6 & 0x100000) == 0)
      goto LABEL_27;
    goto LABEL_26;
  }
LABEL_98:
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 152) & 0x1FFFF;
  if ((v6 & 0x100000) != 0)
LABEL_26:
    *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 160) & 0x1FFF;
LABEL_27:
  v7 = v6;
  if ((v6 & 0x200000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 168) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x400000) != 0)
    *(_DWORD *)(a2 + 32) = *(_QWORD *)(a1 + 176);
  v8 = v7;
  if ((v7 & 0x800000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 184) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x1000000) == 0)
    {
LABEL_33:
      if ((v8 & 0x2000000) == 0)
        goto LABEL_34;
      goto LABEL_102;
    }
  }
  else if ((v7 & 0x1000000) == 0)
  {
    goto LABEL_33;
  }
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_103;
  }
LABEL_102:
  *(_DWORD *)(a2 + 44) = *(_QWORD *)(a1 + 200);
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_104;
  }
LABEL_103:
  *(_BYTE *)(a2 + 48) = *(_QWORD *)(a1 + 208) != 0;
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_105;
  }
LABEL_104:
  *(_DWORD *)(a2 + 52) = *(_QWORD *)(a1 + 216);
  if ((v8 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v8 & 0x20000000) == 0)
      goto LABEL_38;
    goto LABEL_106;
  }
LABEL_105:
  *(_BYTE *)(a2 + 56) = *(_QWORD *)(a1 + 224) != 0;
  if ((v8 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x40000000) == 0)
      goto LABEL_39;
    goto LABEL_107;
  }
LABEL_106:
  *(_BYTE *)(a2 + 57) = *(_QWORD *)(a1 + 232) != 0;
  if ((v8 & 0x40000000) == 0)
  {
LABEL_39:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_40;
  }
LABEL_107:
  *(_BYTE *)(a2 + 58) = *(_QWORD *)(a1 + 240) != 0;
  if ((v8 & 0x80000000) != 0)
LABEL_40:
    *(_BYTE *)(a2 + 59) = *(_QWORD *)(a1 + 248) != 0;
LABEL_41:
  v9 = v8;
  if ((v8 & 0x100000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 256) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x200000000) == 0)
    {
LABEL_43:
      if ((v9 & 0x400000000) == 0)
        goto LABEL_44;
      goto LABEL_111;
    }
  }
  else if ((v8 & 0x200000000) == 0)
  {
    goto LABEL_43;
  }
  *(_WORD *)(a2 + 60) = *(_QWORD *)(a1 + 264);
  if ((v9 & 0x400000000) == 0)
  {
LABEL_44:
    if ((v9 & 0x800000000) == 0)
      goto LABEL_45;
    goto LABEL_112;
  }
LABEL_111:
  *(_WORD *)(a2 + 60) = *(_WORD *)(a1 + 272) & 0x1FF;
  if ((v9 & 0x800000000) == 0)
  {
LABEL_45:
    if ((v9 & 0x1000000000) == 0)
      goto LABEL_46;
    goto LABEL_113;
  }
LABEL_112:
  *(_WORD *)(a2 + 60) = *(_WORD *)(a1 + 280) & 0x1FF;
  if ((v9 & 0x1000000000) == 0)
  {
LABEL_46:
    if ((v9 & 0x2000000000) == 0)
      goto LABEL_48;
    goto LABEL_47;
  }
LABEL_113:
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 288) & 0x1FFFF;
  if ((v9 & 0x2000000000) != 0)
LABEL_47:
    *(_WORD *)(a2 + 60) = *(_WORD *)(a1 + 296) & 0x1FFF;
LABEL_48:
  v10 = v9;
  if ((v9 & 0x4000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 304) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x8000000000) != 0)
    *(_DWORD *)(a2 + 60) = *(_QWORD *)(a1 + 312);
  v11 = v10;
  if ((v10 & 0x10000000000) != 0)
  {
    *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 320) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x20000000000) == 0)
    {
LABEL_54:
      if ((v11 & 0x40000000000) == 0)
        goto LABEL_55;
      goto LABEL_117;
    }
  }
  else if ((v10 & 0x20000000000) == 0)
  {
    goto LABEL_54;
  }
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 328);
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_118;
  }
LABEL_117:
  *(_DWORD *)(a2 + 72) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 76) = *(_QWORD *)(a1 + 344) != 0;
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_120;
  }
LABEL_119:
  *(_DWORD *)(a2 + 80) = *(_QWORD *)(a1 + 352);
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 84) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_122;
  }
LABEL_121:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 368);
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_123;
  }
LABEL_122:
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 376);
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_125;
  }
LABEL_124:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_126;
  }
LABEL_125:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_127;
  }
LABEL_126:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_128;
  }
LABEL_127:
  *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 416) != 0;
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_129;
  }
LABEL_128:
  *(_BYTE *)(a2 + 101) = *(_QWORD *)(a1 + 424) != 0;
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_130;
  }
LABEL_129:
  *(_BYTE *)(a2 + 102) = *(_QWORD *)(a1 + 432) != 0;
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_131;
  }
LABEL_130:
  *(_BYTE *)(a2 + 103) = *(_QWORD *)(a1 + 440) != 0;
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_132;
  }
LABEL_131:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_133;
  }
LABEL_132:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_72;
    goto LABEL_134;
  }
LABEL_133:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) == 0)
  {
LABEL_72:
    if ((v11 & 0x1000000000000000) == 0)
      goto LABEL_73;
    goto LABEL_135;
  }
LABEL_134:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 472);
  if ((v11 & 0x1000000000000000) == 0)
  {
LABEL_73:
    if ((v11 & 0x2000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_136;
  }
LABEL_135:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 480);
  if ((v11 & 0x2000000000000000) == 0)
  {
LABEL_74:
    if ((v11 & 0x4000000000000000) == 0)
      goto LABEL_75;
LABEL_137:
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 496);
    if ((v11 & 0x8000000000000000) == 0)
      goto LABEL_76;
    goto LABEL_138;
  }
LABEL_136:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 488);
  if ((v11 & 0x4000000000000000) != 0)
    goto LABEL_137;
LABEL_75:
  if ((v11 & 0x8000000000000000) == 0)
    goto LABEL_76;
LABEL_138:
  *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 504);
LABEL_76:
  v12 = *(_QWORD *)(a1 + 1256);
  if ((v12 & 1) != 0)
    *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 512);
  if ((v12 & 2) != 0)
    *(_BYTE *)(a2 + 140) = *(_QWORD *)(a1 + 520) != 0;
  v14 = ((v3 & 2) >> 1)
      + (v2 & 1)
      + ((v3 & 4) >> 2)
      + ((v3 & 8) >> 3)
      + ((v3 & 0x10) >> 4)
      + ((v3 & 0x20) >> 5)
      + ((v3 & 0x40) >> 6)
      + ((unint64_t)(v4 & 0x80) >> 7)
      + ((v4 & 0x100) >> 8)
      + ((v5 & 0x200) >> 9)
      + ((v5 & 0x400) >> 10)
      + ((v5 & 0x800) >> 11)
      + ((v5 & 0x1000) >> 12)
      + ((v5 & 0x2000) >> 13)
      + ((v5 & 0x4000) >> 14)
      + ((unint64_t)((unsigned __int16)v5 & 0x8000) >> 15)
      + ((v6 & 0x10000) >> 16)
      + ((v6 & 0x20000) >> 17)
      + ((v6 & 0x40000) >> 18)
      + ((v6 & 0x80000) >> 19)
      + ((v6 & 0x100000) >> 20)
      + ((v6 & 0x200000) >> 21)
      + ((v7 & 0x400000) >> 22)
      + ((v7 & 0x800000) >> 23)
      + ((v8 & 0x1000000) >> 24)
      + ((v8 & 0x2000000) >> 25)
      + ((v8 & 0x4000000) >> 26)
      + ((v8 & 0x8000000) >> 27)
      + ((v8 & 0x10000000) >> 28)
      + ((v8 & 0x20000000) >> 29)
      + ((v8 & 0x40000000) >> 30);
  v13 = v12 & 2;
  v17 = v9 & 0x200000000;
  v18 = v9 & 0x400000000;
  v19 = v9 & 0x800000000;
  v16 = BYTE4(v8) & 1;
  v20 = v12 & 1;
  return v14
       + (v8 >> 31)
       + v16
       + (v17 >> 33)
       + (v18 >> 34)
       + (v19 >> 35)
       + ((v9 & 0x1000000000) >> 36)
       + ((v9 & 0x2000000000) >> 37)
       + ((v9 & 0x4000000000) >> 38)
       + ((v10 & 0x8000000000) >> 39)
       + ((v10 & 0x10000000000) >> 40)
       + (v11 >> 63)
       + ((v11 & 0x20000000000) >> 41)
       + ((v11 & 0x40000000000) >> 42)
       + ((v11 & 0x80000000000) >> 43)
       + ((v11 & 0x100000000000) >> 44)
       + ((v11 & 0x200000000000) >> 45)
       + ((v11 & 0x400000000000) >> 46)
       + ((v11 & 0x800000000000) >> 47)
       + ((v11 & 0x1000000000000) >> 48)
       + ((v11 & 0x2000000000000) >> 49)
       + ((v11 & 0x4000000000000) >> 50)
       + ((v11 & 0x8000000000000) >> 51)
       + ((v11 & 0x10000000000000) >> 52)
       + ((v11 & 0x20000000000000) >> 53)
       + ((v11 & 0x40000000000000) >> 54)
       + ((v11 & 0x80000000000000) >> 55)
       + ((v11 & 0x100000000000000) >> 56)
       + ((v11 & 0x200000000000000) >> 57)
       + ((v11 & 0x400000000000000) >> 58)
       + ((v11 & 0x800000000000000) >> 59)
       + ((v11 & 0x1000000000000000) >> 60)
       + ((v11 & 0x2000000000000000) >> 61)
       + ((v11 & 0x4000000000000000) >> 62)
       + v20
       + (v13 >> 1);
}

unint64_t sub_1C4D37EC0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_87;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_88;
  }
LABEL_87:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_89;
  }
LABEL_88:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_89:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_93;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_94;
  }
LABEL_93:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_95;
  }
LABEL_94:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_96;
  }
LABEL_95:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_97;
  }
LABEL_96:
  *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
LABEL_97:
  *(_BYTE *)(a2 + 28) = *(_QWORD *)(a1 + 112) != 0;
  if ((v5 & 0x8000) != 0)
LABEL_20:
    *(_DWORD *)(a2 + 32) = *(_QWORD *)(a1 + 120);
LABEL_21:
  v6 = v5;
  if ((v5 & 0x10000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 128) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x20000) == 0)
    {
LABEL_23:
      if ((v6 & 0x40000) == 0)
        goto LABEL_24;
      goto LABEL_101;
    }
  }
  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_23;
  }
  *(_WORD *)(a2 + 36) = *(_QWORD *)(a1 + 136);
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_102;
  }
LABEL_101:
  *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 144) & 0x1FF;
  if ((v6 & 0x80000) == 0)
  {
LABEL_25:
    if ((v6 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_103;
  }
LABEL_102:
  *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 152) & 0x1FF;
  if ((v6 & 0x100000) == 0)
  {
LABEL_26:
    if ((v6 & 0x200000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_103:
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 160) & 0x1FFFF;
  if ((v6 & 0x200000) != 0)
LABEL_27:
    *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 168) & 0x1FFF;
LABEL_28:
  v7 = v6;
  if ((v6 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 176) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x800000) != 0)
    *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  v8 = v7;
  if ((v7 & 0x1000000) != 0)
  {
    *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 192) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x2000000) == 0)
    {
LABEL_34:
      if ((v8 & 0x4000000) == 0)
        goto LABEL_35;
      goto LABEL_107;
    }
  }
  else if ((v7 & 0x2000000) == 0)
  {
    goto LABEL_34;
  }
  *(_DWORD *)(a2 + 44) = *(_QWORD *)(a1 + 200);
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_108;
  }
LABEL_107:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_109;
  }
LABEL_108:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v8 & 0x20000000) == 0)
      goto LABEL_38;
    goto LABEL_110;
  }
LABEL_109:
  *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 224);
  if ((v8 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x40000000) == 0)
      goto LABEL_39;
    goto LABEL_111;
  }
LABEL_110:
  *(_BYTE *)(a2 + 60) = *(_QWORD *)(a1 + 232) != 0;
  if ((v8 & 0x40000000) == 0)
  {
LABEL_39:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_112;
  }
LABEL_111:
  *(_BYTE *)(a2 + 61) = *(_QWORD *)(a1 + 240) != 0;
  if ((v8 & 0x80000000) == 0)
  {
LABEL_40:
    if ((v8 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_41;
  }
LABEL_112:
  *(_BYTE *)(a2 + 62) = *(_QWORD *)(a1 + 248) != 0;
  if ((v8 & 0x100000000) != 0)
LABEL_41:
    *(_BYTE *)(a2 + 63) = *(_QWORD *)(a1 + 256) != 0;
LABEL_42:
  v9 = v8;
  if ((v8 & 0x200000000) != 0)
  {
    *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 264) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x400000000) == 0)
    {
LABEL_44:
      if ((v9 & 0x800000000) == 0)
        goto LABEL_45;
      goto LABEL_116;
    }
  }
  else if ((v8 & 0x400000000) == 0)
  {
    goto LABEL_44;
  }
  *(_WORD *)(a2 + 64) = *(_QWORD *)(a1 + 272);
  if ((v9 & 0x800000000) == 0)
  {
LABEL_45:
    if ((v9 & 0x1000000000) == 0)
      goto LABEL_46;
    goto LABEL_117;
  }
LABEL_116:
  *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 280) & 0x1FF;
  if ((v9 & 0x1000000000) == 0)
  {
LABEL_46:
    if ((v9 & 0x2000000000) == 0)
      goto LABEL_47;
    goto LABEL_118;
  }
LABEL_117:
  *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 288) & 0x1FF;
  if ((v9 & 0x2000000000) == 0)
  {
LABEL_47:
    if ((v9 & 0x4000000000) == 0)
      goto LABEL_49;
    goto LABEL_48;
  }
LABEL_118:
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 296) & 0x1FFFF;
  if ((v9 & 0x4000000000) != 0)
LABEL_48:
    *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 304) & 0x1FFF;
LABEL_49:
  v10 = v9;
  if ((v9 & 0x8000000000) != 0)
  {
    *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 312) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x10000000000) != 0)
    *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 320);
  v11 = v10;
  if ((v10 & 0x20000000000) != 0)
  {
    *(_BYTE *)(a2 + 68) = *(_BYTE *)(a1 + 328) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x40000000000) == 0)
    {
LABEL_55:
      if ((v11 & 0x80000000000) == 0)
        goto LABEL_56;
      goto LABEL_122;
    }
  }
  else if ((v10 & 0x40000000000) == 0)
  {
    goto LABEL_55;
  }
  *(_DWORD *)(a2 + 72) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_123;
  }
LABEL_122:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_125;
  }
LABEL_124:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 360);
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_126;
  }
LABEL_125:
  *(_BYTE *)(a2 + 88) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 376);
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 384);
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_129;
  }
LABEL_128:
  *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_130;
  }
LABEL_129:
  *(_BYTE *)(a2 + 101) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_131;
  }
LABEL_130:
  *(_BYTE *)(a2 + 102) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_132;
  }
LABEL_131:
  *(_BYTE *)(a2 + 103) = *(_QWORD *)(a1 + 416) != 0;
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_133;
  }
LABEL_132:
  *(_BYTE *)(a2 + 104) = *(_QWORD *)(a1 + 424) != 0;
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_134;
  }
LABEL_133:
  *(_BYTE *)(a2 + 105) = *(_QWORD *)(a1 + 432) != 0;
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_135;
  }
LABEL_134:
  *(_BYTE *)(a2 + 106) = *(_QWORD *)(a1 + 440) != 0;
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_136;
  }
LABEL_135:
  *(_BYTE *)(a2 + 107) = *(_QWORD *)(a1 + 448) != 0;
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_137;
  }
LABEL_136:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_72;
    goto LABEL_138;
  }
LABEL_137:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) == 0)
  {
LABEL_72:
    if ((v11 & 0x1000000000000000) == 0)
      goto LABEL_73;
    goto LABEL_139;
  }
LABEL_138:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 472);
  if ((v11 & 0x1000000000000000) == 0)
  {
LABEL_73:
    if ((v11 & 0x2000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_140;
  }
LABEL_139:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 480);
  if ((v11 & 0x2000000000000000) == 0)
  {
LABEL_74:
    if ((v11 & 0x4000000000000000) == 0)
      goto LABEL_75;
LABEL_141:
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 496);
    if ((v11 & 0x8000000000000000) == 0)
      goto LABEL_76;
    goto LABEL_142;
  }
LABEL_140:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 488);
  if ((v11 & 0x4000000000000000) != 0)
    goto LABEL_141;
LABEL_75:
  if ((v11 & 0x8000000000000000) == 0)
    goto LABEL_76;
LABEL_142:
  *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 504);
LABEL_76:
  v12 = *(_QWORD *)(a1 + 1256);
  if ((v12 & 1) != 0)
    *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 512);
  if ((v12 & 2) != 0)
    *(_DWORD *)(a2 + 140) = *(_QWORD *)(a1 + 520);
  if ((v12 & 4) != 0)
    *(_BYTE *)(a2 + 144) = *(_QWORD *)(a1 + 528) != 0;
  if ((v12 & 8) != 0)
    *(_DWORD *)(a2 + 148) = *(_QWORD *)(a1 + 536);
  v14 = ((v3 & 2) >> 1)
      + (v2 & 1)
      + ((v3 & 4) >> 2)
      + ((v3 & 8) >> 3)
      + ((v3 & 0x10) >> 4)
      + ((v3 & 0x20) >> 5)
      + ((v3 & 0x40) >> 6)
      + ((unint64_t)(v4 & 0x80) >> 7)
      + ((v4 & 0x100) >> 8)
      + ((v5 & 0x200) >> 9)
      + ((v5 & 0x400) >> 10)
      + ((v5 & 0x800) >> 11)
      + ((v5 & 0x1000) >> 12)
      + ((v5 & 0x2000) >> 13)
      + ((v5 & 0x4000) >> 14)
      + ((unint64_t)((unsigned __int16)v5 & 0x8000) >> 15)
      + ((v5 & 0x10000) >> 16)
      + ((v6 & 0x20000) >> 17)
      + ((v6 & 0x40000) >> 18)
      + ((v6 & 0x80000) >> 19)
      + ((v6 & 0x100000) >> 20)
      + ((v6 & 0x200000) >> 21)
      + ((v6 & 0x400000) >> 22)
      + ((v7 & 0x800000) >> 23)
      + ((v7 & 0x1000000) >> 24)
      + ((v8 & 0x2000000) >> 25)
      + ((v8 & 0x4000000) >> 26)
      + ((v8 & 0x8000000) >> 27)
      + ((v8 & 0x10000000) >> 28)
      + ((v8 & 0x20000000) >> 29)
      + ((v8 & 0x40000000) >> 30);
  v13 = v12 & 8;
  v17 = v8 & 0x200000000;
  v18 = v9 & 0x400000000;
  v19 = v9 & 0x800000000;
  v20 = v9 & 0x1000000000;
  v21 = v9 & 0x2000000000;
  v22 = v9 & 0x4000000000;
  v23 = v9 & 0x8000000000;
  v24 = v10 & 0x10000000000;
  v25 = v10 & 0x20000000000;
  v26 = v11 & 0x80000000000;
  v27 = v11 & 0x40000000000;
  v16 = BYTE4(v8) & 1;
  v28 = v12 & 1;
  return v14
       + (v8 >> 31)
       + v16
       + (v17 >> 33)
       + (v18 >> 34)
       + (v19 >> 35)
       + (v20 >> 36)
       + (v21 >> 37)
       + (v22 >> 38)
       + (v23 >> 39)
       + (v24 >> 40)
       + (v25 >> 41)
       + (v11 >> 63)
       + (v27 >> 42)
       + (v26 >> 43)
       + ((v11 & 0x100000000000) >> 44)
       + ((v11 & 0x200000000000) >> 45)
       + ((v11 & 0x400000000000) >> 46)
       + ((v11 & 0x800000000000) >> 47)
       + ((v11 & 0x1000000000000) >> 48)
       + ((v11 & 0x2000000000000) >> 49)
       + ((v11 & 0x4000000000000) >> 50)
       + ((v11 & 0x8000000000000) >> 51)
       + ((v11 & 0x10000000000000) >> 52)
       + ((v11 & 0x20000000000000) >> 53)
       + ((v11 & 0x40000000000000) >> 54)
       + ((v11 & 0x80000000000000) >> 55)
       + ((v11 & 0x100000000000000) >> 56)
       + ((v11 & 0x200000000000000) >> 57)
       + ((v11 & 0x400000000000000) >> 58)
       + ((v11 & 0x800000000000000) >> 59)
       + ((v11 & 0x1000000000000000) >> 60)
       + ((v11 & 0x2000000000000000) >> 61)
       + ((v11 & 0x4000000000000000) >> 62)
       + v28
       + ((unint64_t)(v12 & 2) >> 1)
       + ((unint64_t)(v12 & 4) >> 2)
       + (v13 >> 3);
}

unint64_t sub_1C4D38894(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_87;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_88;
  }
LABEL_87:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_89;
  }
LABEL_88:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_89:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_93;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_94;
  }
LABEL_93:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_95;
  }
LABEL_94:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_96;
  }
LABEL_95:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_97;
  }
LABEL_96:
  *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
LABEL_97:
  *(_BYTE *)(a2 + 28) = *(_QWORD *)(a1 + 112) != 0;
  if ((v5 & 0x8000) != 0)
LABEL_20:
    *(_DWORD *)(a2 + 32) = *(_QWORD *)(a1 + 120);
LABEL_21:
  v6 = v5;
  if ((v5 & 0x10000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 128) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x20000) == 0)
    {
LABEL_23:
      if ((v6 & 0x40000) == 0)
        goto LABEL_24;
      goto LABEL_101;
    }
  }
  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_23;
  }
  *(_WORD *)(a2 + 36) = *(_QWORD *)(a1 + 136);
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_102;
  }
LABEL_101:
  *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 144) & 0x1FF;
  if ((v6 & 0x80000) == 0)
  {
LABEL_25:
    if ((v6 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_103;
  }
LABEL_102:
  *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 152) & 0x1FF;
  if ((v6 & 0x100000) == 0)
  {
LABEL_26:
    if ((v6 & 0x200000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_103:
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 160) & 0x1FFFF;
  if ((v6 & 0x200000) != 0)
LABEL_27:
    *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 168) & 0x1FFF;
LABEL_28:
  v7 = v6;
  if ((v6 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 176) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x800000) != 0)
    *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  v8 = v7;
  if ((v7 & 0x1000000) != 0)
  {
    *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 192) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x2000000) == 0)
    {
LABEL_34:
      if ((v8 & 0x4000000) == 0)
        goto LABEL_35;
      goto LABEL_107;
    }
  }
  else if ((v7 & 0x2000000) == 0)
  {
    goto LABEL_34;
  }
  *(_DWORD *)(a2 + 44) = *(_QWORD *)(a1 + 200);
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_108;
  }
LABEL_107:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_109;
  }
LABEL_108:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v8 & 0x20000000) == 0)
      goto LABEL_38;
    goto LABEL_110;
  }
LABEL_109:
  *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 224);
  if ((v8 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x40000000) == 0)
      goto LABEL_39;
    goto LABEL_111;
  }
LABEL_110:
  *(_BYTE *)(a2 + 60) = *(_QWORD *)(a1 + 232) != 0;
  if ((v8 & 0x40000000) == 0)
  {
LABEL_39:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_112;
  }
LABEL_111:
  *(_BYTE *)(a2 + 61) = *(_QWORD *)(a1 + 240) != 0;
  if ((v8 & 0x80000000) == 0)
  {
LABEL_40:
    if ((v8 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_41;
  }
LABEL_112:
  *(_BYTE *)(a2 + 62) = *(_QWORD *)(a1 + 248) != 0;
  if ((v8 & 0x100000000) != 0)
LABEL_41:
    *(_BYTE *)(a2 + 63) = *(_QWORD *)(a1 + 256) != 0;
LABEL_42:
  v9 = v8;
  if ((v8 & 0x200000000) != 0)
  {
    *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 264) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x400000000) == 0)
    {
LABEL_44:
      if ((v9 & 0x800000000) == 0)
        goto LABEL_45;
      goto LABEL_116;
    }
  }
  else if ((v8 & 0x400000000) == 0)
  {
    goto LABEL_44;
  }
  *(_WORD *)(a2 + 64) = *(_QWORD *)(a1 + 272);
  if ((v9 & 0x800000000) == 0)
  {
LABEL_45:
    if ((v9 & 0x1000000000) == 0)
      goto LABEL_46;
    goto LABEL_117;
  }
LABEL_116:
  *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 280) & 0x1FF;
  if ((v9 & 0x1000000000) == 0)
  {
LABEL_46:
    if ((v9 & 0x2000000000) == 0)
      goto LABEL_47;
    goto LABEL_118;
  }
LABEL_117:
  *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 288) & 0x1FF;
  if ((v9 & 0x2000000000) == 0)
  {
LABEL_47:
    if ((v9 & 0x4000000000) == 0)
      goto LABEL_49;
    goto LABEL_48;
  }
LABEL_118:
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 296) & 0x1FFFF;
  if ((v9 & 0x4000000000) != 0)
LABEL_48:
    *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 304) & 0x1FFF;
LABEL_49:
  v10 = v9;
  if ((v9 & 0x8000000000) != 0)
  {
    *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 312) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x10000000000) != 0)
    *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 320);
  v11 = v10;
  if ((v10 & 0x20000000000) != 0)
  {
    *(_BYTE *)(a2 + 68) = *(_BYTE *)(a1 + 328) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x40000000000) == 0)
    {
LABEL_55:
      if ((v11 & 0x80000000000) == 0)
        goto LABEL_56;
      goto LABEL_122;
    }
  }
  else if ((v10 & 0x40000000000) == 0)
  {
    goto LABEL_55;
  }
  *(_DWORD *)(a2 + 72) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_123;
  }
LABEL_122:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_125;
  }
LABEL_124:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 360);
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_126;
  }
LABEL_125:
  *(_BYTE *)(a2 + 88) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 376);
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 384);
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_129;
  }
LABEL_128:
  *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_130;
  }
LABEL_129:
  *(_BYTE *)(a2 + 101) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_131;
  }
LABEL_130:
  *(_BYTE *)(a2 + 102) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_132;
  }
LABEL_131:
  *(_BYTE *)(a2 + 103) = *(_QWORD *)(a1 + 416) != 0;
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_133;
  }
LABEL_132:
  *(_BYTE *)(a2 + 104) = *(_QWORD *)(a1 + 424) != 0;
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_134;
  }
LABEL_133:
  *(_BYTE *)(a2 + 105) = *(_QWORD *)(a1 + 432) != 0;
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_135;
  }
LABEL_134:
  *(_BYTE *)(a2 + 106) = *(_QWORD *)(a1 + 440) != 0;
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_136;
  }
LABEL_135:
  *(_BYTE *)(a2 + 107) = *(_QWORD *)(a1 + 448) != 0;
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_137;
  }
LABEL_136:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_72;
    goto LABEL_138;
  }
LABEL_137:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) == 0)
  {
LABEL_72:
    if ((v11 & 0x1000000000000000) == 0)
      goto LABEL_73;
    goto LABEL_139;
  }
LABEL_138:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 472);
  if ((v11 & 0x1000000000000000) == 0)
  {
LABEL_73:
    if ((v11 & 0x2000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_140;
  }
LABEL_139:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 480);
  if ((v11 & 0x2000000000000000) == 0)
  {
LABEL_74:
    if ((v11 & 0x4000000000000000) == 0)
      goto LABEL_75;
LABEL_141:
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 496);
    if ((v11 & 0x8000000000000000) == 0)
      goto LABEL_76;
    goto LABEL_142;
  }
LABEL_140:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 488);
  if ((v11 & 0x4000000000000000) != 0)
    goto LABEL_141;
LABEL_75:
  if ((v11 & 0x8000000000000000) == 0)
    goto LABEL_76;
LABEL_142:
  *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 504);
LABEL_76:
  v12 = *(_QWORD *)(a1 + 1256);
  if ((v12 & 1) != 0)
    *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 512);
  if ((v12 & 2) != 0)
    *(_DWORD *)(a2 + 140) = *(_QWORD *)(a1 + 520);
  if ((v12 & 4) != 0)
    *(_BYTE *)(a2 + 144) = *(_QWORD *)(a1 + 528) != 0;
  if ((v12 & 8) != 0)
    *(_DWORD *)(a2 + 148) = *(_QWORD *)(a1 + 536);
  v14 = ((v3 & 2) >> 1)
      + (v2 & 1)
      + ((v3 & 4) >> 2)
      + ((v3 & 8) >> 3)
      + ((v3 & 0x10) >> 4)
      + ((v3 & 0x20) >> 5)
      + ((v3 & 0x40) >> 6)
      + ((unint64_t)(v4 & 0x80) >> 7)
      + ((v4 & 0x100) >> 8)
      + ((v5 & 0x200) >> 9)
      + ((v5 & 0x400) >> 10)
      + ((v5 & 0x800) >> 11)
      + ((v5 & 0x1000) >> 12)
      + ((v5 & 0x2000) >> 13)
      + ((v5 & 0x4000) >> 14)
      + ((unint64_t)((unsigned __int16)v5 & 0x8000) >> 15)
      + ((v5 & 0x10000) >> 16)
      + ((v6 & 0x20000) >> 17)
      + ((v6 & 0x40000) >> 18)
      + ((v6 & 0x80000) >> 19)
      + ((v6 & 0x100000) >> 20)
      + ((v6 & 0x200000) >> 21)
      + ((v6 & 0x400000) >> 22)
      + ((v7 & 0x800000) >> 23)
      + ((v7 & 0x1000000) >> 24)
      + ((v8 & 0x2000000) >> 25)
      + ((v8 & 0x4000000) >> 26)
      + ((v8 & 0x8000000) >> 27)
      + ((v8 & 0x10000000) >> 28)
      + ((v8 & 0x20000000) >> 29)
      + ((v8 & 0x40000000) >> 30);
  v13 = v12 & 8;
  v17 = v8 & 0x200000000;
  v18 = v9 & 0x400000000;
  v19 = v9 & 0x800000000;
  v20 = v9 & 0x1000000000;
  v21 = v9 & 0x2000000000;
  v22 = v9 & 0x4000000000;
  v23 = v9 & 0x8000000000;
  v24 = v10 & 0x10000000000;
  v25 = v10 & 0x20000000000;
  v26 = v11 & 0x80000000000;
  v27 = v11 & 0x40000000000;
  v16 = BYTE4(v8) & 1;
  v28 = v12 & 1;
  return v14
       + (v8 >> 31)
       + v16
       + (v17 >> 33)
       + (v18 >> 34)
       + (v19 >> 35)
       + (v20 >> 36)
       + (v21 >> 37)
       + (v22 >> 38)
       + (v23 >> 39)
       + (v24 >> 40)
       + (v25 >> 41)
       + (v11 >> 63)
       + (v27 >> 42)
       + (v26 >> 43)
       + ((v11 & 0x100000000000) >> 44)
       + ((v11 & 0x200000000000) >> 45)
       + ((v11 & 0x400000000000) >> 46)
       + ((v11 & 0x800000000000) >> 47)
       + ((v11 & 0x1000000000000) >> 48)
       + ((v11 & 0x2000000000000) >> 49)
       + ((v11 & 0x4000000000000) >> 50)
       + ((v11 & 0x8000000000000) >> 51)
       + ((v11 & 0x10000000000000) >> 52)
       + ((v11 & 0x20000000000000) >> 53)
       + ((v11 & 0x40000000000000) >> 54)
       + ((v11 & 0x80000000000000) >> 55)
       + ((v11 & 0x100000000000000) >> 56)
       + ((v11 & 0x200000000000000) >> 57)
       + ((v11 & 0x400000000000000) >> 58)
       + ((v11 & 0x800000000000000) >> 59)
       + ((v11 & 0x1000000000000000) >> 60)
       + ((v11 & 0x2000000000000000) >> 61)
       + ((v11 & 0x4000000000000000) >> 62)
       + v28
       + ((unint64_t)(v12 & 2) >> 1)
       + ((unint64_t)(v12 & 4) >> 2)
       + (v13 >> 3);
}

unint64_t sub_1C4D39268(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_87;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_88;
  }
LABEL_87:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_89;
  }
LABEL_88:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_89:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_93;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_94;
  }
LABEL_93:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_95;
  }
LABEL_94:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_96;
  }
LABEL_95:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_97;
  }
LABEL_96:
  *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
LABEL_97:
  *(_BYTE *)(a2 + 28) = *(_QWORD *)(a1 + 112) != 0;
  if ((v5 & 0x8000) != 0)
LABEL_20:
    *(_DWORD *)(a2 + 32) = *(_QWORD *)(a1 + 120);
LABEL_21:
  v6 = v5;
  if ((v5 & 0x10000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 128) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x20000) == 0)
    {
LABEL_23:
      if ((v6 & 0x40000) == 0)
        goto LABEL_24;
      goto LABEL_101;
    }
  }
  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_23;
  }
  *(_WORD *)(a2 + 36) = *(_QWORD *)(a1 + 136);
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_102;
  }
LABEL_101:
  *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 144) & 0x1FF;
  if ((v6 & 0x80000) == 0)
  {
LABEL_25:
    if ((v6 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_103;
  }
LABEL_102:
  *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 152) & 0x1FF;
  if ((v6 & 0x100000) == 0)
  {
LABEL_26:
    if ((v6 & 0x200000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_103:
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 160) & 0x1FFFF;
  if ((v6 & 0x200000) != 0)
LABEL_27:
    *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 168) & 0x1FFF;
LABEL_28:
  v7 = v6;
  if ((v6 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 176) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x800000) != 0)
    *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  v8 = v7;
  if ((v7 & 0x1000000) != 0)
  {
    *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 192) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x2000000) == 0)
    {
LABEL_34:
      if ((v8 & 0x4000000) == 0)
        goto LABEL_35;
      goto LABEL_107;
    }
  }
  else if ((v7 & 0x2000000) == 0)
  {
    goto LABEL_34;
  }
  *(_DWORD *)(a2 + 44) = *(_QWORD *)(a1 + 200);
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_108;
  }
LABEL_107:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_109;
  }
LABEL_108:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v8 & 0x20000000) == 0)
      goto LABEL_38;
    goto LABEL_110;
  }
LABEL_109:
  *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 224);
  if ((v8 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x40000000) == 0)
      goto LABEL_39;
    goto LABEL_111;
  }
LABEL_110:
  *(_BYTE *)(a2 + 60) = *(_QWORD *)(a1 + 232) != 0;
  if ((v8 & 0x40000000) == 0)
  {
LABEL_39:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_112;
  }
LABEL_111:
  *(_BYTE *)(a2 + 61) = *(_QWORD *)(a1 + 240) != 0;
  if ((v8 & 0x80000000) == 0)
  {
LABEL_40:
    if ((v8 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_41;
  }
LABEL_112:
  *(_BYTE *)(a2 + 62) = *(_QWORD *)(a1 + 248) != 0;
  if ((v8 & 0x100000000) != 0)
LABEL_41:
    *(_BYTE *)(a2 + 63) = *(_QWORD *)(a1 + 256) != 0;
LABEL_42:
  v9 = v8;
  if ((v8 & 0x200000000) != 0)
  {
    *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 264) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x400000000) == 0)
    {
LABEL_44:
      if ((v9 & 0x800000000) == 0)
        goto LABEL_45;
      goto LABEL_116;
    }
  }
  else if ((v8 & 0x400000000) == 0)
  {
    goto LABEL_44;
  }
  *(_WORD *)(a2 + 64) = *(_QWORD *)(a1 + 272);
  if ((v9 & 0x800000000) == 0)
  {
LABEL_45:
    if ((v9 & 0x1000000000) == 0)
      goto LABEL_46;
    goto LABEL_117;
  }
LABEL_116:
  *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 280) & 0x1FF;
  if ((v9 & 0x1000000000) == 0)
  {
LABEL_46:
    if ((v9 & 0x2000000000) == 0)
      goto LABEL_47;
    goto LABEL_118;
  }
LABEL_117:
  *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 288) & 0x1FF;
  if ((v9 & 0x2000000000) == 0)
  {
LABEL_47:
    if ((v9 & 0x4000000000) == 0)
      goto LABEL_49;
    goto LABEL_48;
  }
LABEL_118:
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 296) & 0x1FFFF;
  if ((v9 & 0x4000000000) != 0)
LABEL_48:
    *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 304) & 0x1FFF;
LABEL_49:
  v10 = v9;
  if ((v9 & 0x8000000000) != 0)
  {
    *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 312) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x10000000000) != 0)
    *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 320);
  v11 = v10;
  if ((v10 & 0x20000000000) != 0)
  {
    *(_BYTE *)(a2 + 68) = *(_BYTE *)(a1 + 328) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x40000000000) == 0)
    {
LABEL_55:
      if ((v11 & 0x80000000000) == 0)
        goto LABEL_56;
      goto LABEL_122;
    }
  }
  else if ((v10 & 0x40000000000) == 0)
  {
    goto LABEL_55;
  }
  *(_DWORD *)(a2 + 72) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_123;
  }
LABEL_122:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_125;
  }
LABEL_124:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 360);
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_126;
  }
LABEL_125:
  *(_BYTE *)(a2 + 88) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 376);
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 384);
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_129;
  }
LABEL_128:
  *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_130;
  }
LABEL_129:
  *(_BYTE *)(a2 + 101) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_131;
  }
LABEL_130:
  *(_BYTE *)(a2 + 102) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_132;
  }
LABEL_131:
  *(_BYTE *)(a2 + 103) = *(_QWORD *)(a1 + 416) != 0;
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_133;
  }
LABEL_132:
  *(_BYTE *)(a2 + 104) = *(_QWORD *)(a1 + 424) != 0;
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_134;
  }
LABEL_133:
  *(_BYTE *)(a2 + 105) = *(_QWORD *)(a1 + 432) != 0;
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_135;
  }
LABEL_134:
  *(_BYTE *)(a2 + 106) = *(_QWORD *)(a1 + 440) != 0;
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_136;
  }
LABEL_135:
  *(_BYTE *)(a2 + 107) = *(_QWORD *)(a1 + 448) != 0;
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_137;
  }
LABEL_136:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_72;
    goto LABEL_138;
  }
LABEL_137:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) == 0)
  {
LABEL_72:
    if ((v11 & 0x1000000000000000) == 0)
      goto LABEL_73;
    goto LABEL_139;
  }
LABEL_138:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 472);
  if ((v11 & 0x1000000000000000) == 0)
  {
LABEL_73:
    if ((v11 & 0x2000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_140;
  }
LABEL_139:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 480);
  if ((v11 & 0x2000000000000000) == 0)
  {
LABEL_74:
    if ((v11 & 0x4000000000000000) == 0)
      goto LABEL_75;
LABEL_141:
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 496);
    if ((v11 & 0x8000000000000000) == 0)
      goto LABEL_76;
    goto LABEL_142;
  }
LABEL_140:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 488);
  if ((v11 & 0x4000000000000000) != 0)
    goto LABEL_141;
LABEL_75:
  if ((v11 & 0x8000000000000000) == 0)
    goto LABEL_76;
LABEL_142:
  *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 504);
LABEL_76:
  v12 = *(_QWORD *)(a1 + 1256);
  if ((v12 & 1) != 0)
    *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 512);
  if ((v12 & 2) != 0)
    *(_DWORD *)(a2 + 140) = *(_QWORD *)(a1 + 520);
  if ((v12 & 4) != 0)
    *(_BYTE *)(a2 + 144) = *(_QWORD *)(a1 + 528) != 0;
  if ((v12 & 8) != 0)
    *(_DWORD *)(a2 + 148) = *(_QWORD *)(a1 + 536);
  v14 = ((v3 & 2) >> 1)
      + (v2 & 1)
      + ((v3 & 4) >> 2)
      + ((v3 & 8) >> 3)
      + ((v3 & 0x10) >> 4)
      + ((v3 & 0x20) >> 5)
      + ((v3 & 0x40) >> 6)
      + ((unint64_t)(v4 & 0x80) >> 7)
      + ((v4 & 0x100) >> 8)
      + ((v5 & 0x200) >> 9)
      + ((v5 & 0x400) >> 10)
      + ((v5 & 0x800) >> 11)
      + ((v5 & 0x1000) >> 12)
      + ((v5 & 0x2000) >> 13)
      + ((v5 & 0x4000) >> 14)
      + ((unint64_t)((unsigned __int16)v5 & 0x8000) >> 15)
      + ((v5 & 0x10000) >> 16)
      + ((v6 & 0x20000) >> 17)
      + ((v6 & 0x40000) >> 18)
      + ((v6 & 0x80000) >> 19)
      + ((v6 & 0x100000) >> 20)
      + ((v6 & 0x200000) >> 21)
      + ((v6 & 0x400000) >> 22)
      + ((v7 & 0x800000) >> 23)
      + ((v7 & 0x1000000) >> 24)
      + ((v8 & 0x2000000) >> 25)
      + ((v8 & 0x4000000) >> 26)
      + ((v8 & 0x8000000) >> 27)
      + ((v8 & 0x10000000) >> 28)
      + ((v8 & 0x20000000) >> 29)
      + ((v8 & 0x40000000) >> 30);
  v13 = v12 & 8;
  v17 = v8 & 0x200000000;
  v18 = v9 & 0x400000000;
  v19 = v9 & 0x800000000;
  v20 = v9 & 0x1000000000;
  v21 = v9 & 0x2000000000;
  v22 = v9 & 0x4000000000;
  v23 = v9 & 0x8000000000;
  v24 = v10 & 0x10000000000;
  v25 = v10 & 0x20000000000;
  v26 = v11 & 0x80000000000;
  v27 = v11 & 0x40000000000;
  v16 = BYTE4(v8) & 1;
  v28 = v12 & 1;
  return v14
       + (v8 >> 31)
       + v16
       + (v17 >> 33)
       + (v18 >> 34)
       + (v19 >> 35)
       + (v20 >> 36)
       + (v21 >> 37)
       + (v22 >> 38)
       + (v23 >> 39)
       + (v24 >> 40)
       + (v25 >> 41)
       + (v11 >> 63)
       + (v27 >> 42)
       + (v26 >> 43)
       + ((v11 & 0x100000000000) >> 44)
       + ((v11 & 0x200000000000) >> 45)
       + ((v11 & 0x400000000000) >> 46)
       + ((v11 & 0x800000000000) >> 47)
       + ((v11 & 0x1000000000000) >> 48)
       + ((v11 & 0x2000000000000) >> 49)
       + ((v11 & 0x4000000000000) >> 50)
       + ((v11 & 0x8000000000000) >> 51)
       + ((v11 & 0x10000000000000) >> 52)
       + ((v11 & 0x20000000000000) >> 53)
       + ((v11 & 0x40000000000000) >> 54)
       + ((v11 & 0x80000000000000) >> 55)
       + ((v11 & 0x100000000000000) >> 56)
       + ((v11 & 0x200000000000000) >> 57)
       + ((v11 & 0x400000000000000) >> 58)
       + ((v11 & 0x800000000000000) >> 59)
       + ((v11 & 0x1000000000000000) >> 60)
       + ((v11 & 0x2000000000000000) >> 61)
       + ((v11 & 0x4000000000000000) >> 62)
       + v28
       + ((unint64_t)(v12 & 2) >> 1)
       + ((unint64_t)(v12 & 4) >> 2)
       + (v13 >> 3);
}

unint64_t sub_1C4D39C3C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_87;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_88;
  }
LABEL_87:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_89;
  }
LABEL_88:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_89:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_93;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_94;
  }
LABEL_93:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_95;
  }
LABEL_94:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_96;
  }
LABEL_95:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_97;
  }
LABEL_96:
  *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
LABEL_97:
  *(_BYTE *)(a2 + 28) = *(_QWORD *)(a1 + 112) != 0;
  if ((v5 & 0x8000) != 0)
LABEL_20:
    *(_DWORD *)(a2 + 32) = *(_QWORD *)(a1 + 120);
LABEL_21:
  v6 = v5;
  if ((v5 & 0x10000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 128) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x20000) == 0)
    {
LABEL_23:
      if ((v6 & 0x40000) == 0)
        goto LABEL_24;
      goto LABEL_101;
    }
  }
  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_23;
  }
  *(_WORD *)(a2 + 36) = *(_QWORD *)(a1 + 136);
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_102;
  }
LABEL_101:
  *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 144) & 0x1FF;
  if ((v6 & 0x80000) == 0)
  {
LABEL_25:
    if ((v6 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_103;
  }
LABEL_102:
  *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 152) & 0x1FF;
  if ((v6 & 0x100000) == 0)
  {
LABEL_26:
    if ((v6 & 0x200000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_103:
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 160) & 0x1FFFF;
  if ((v6 & 0x200000) != 0)
LABEL_27:
    *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 168) & 0x1FFF;
LABEL_28:
  v7 = v6;
  if ((v6 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 176) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x800000) != 0)
    *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  v8 = v7;
  if ((v7 & 0x1000000) != 0)
  {
    *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 192) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x2000000) == 0)
    {
LABEL_34:
      if ((v8 & 0x4000000) == 0)
        goto LABEL_35;
      goto LABEL_107;
    }
  }
  else if ((v7 & 0x2000000) == 0)
  {
    goto LABEL_34;
  }
  *(_DWORD *)(a2 + 44) = *(_QWORD *)(a1 + 200);
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_108;
  }
LABEL_107:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_109;
  }
LABEL_108:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v8 & 0x20000000) == 0)
      goto LABEL_38;
    goto LABEL_110;
  }
LABEL_109:
  *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 224);
  if ((v8 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x40000000) == 0)
      goto LABEL_39;
    goto LABEL_111;
  }
LABEL_110:
  *(_BYTE *)(a2 + 60) = *(_QWORD *)(a1 + 232) != 0;
  if ((v8 & 0x40000000) == 0)
  {
LABEL_39:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_112;
  }
LABEL_111:
  *(_BYTE *)(a2 + 61) = *(_QWORD *)(a1 + 240) != 0;
  if ((v8 & 0x80000000) == 0)
  {
LABEL_40:
    if ((v8 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_41;
  }
LABEL_112:
  *(_BYTE *)(a2 + 62) = *(_QWORD *)(a1 + 248) != 0;
  if ((v8 & 0x100000000) != 0)
LABEL_41:
    *(_BYTE *)(a2 + 63) = *(_QWORD *)(a1 + 256) != 0;
LABEL_42:
  v9 = v8;
  if ((v8 & 0x200000000) != 0)
  {
    *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 264) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x400000000) == 0)
    {
LABEL_44:
      if ((v9 & 0x800000000) == 0)
        goto LABEL_45;
      goto LABEL_116;
    }
  }
  else if ((v8 & 0x400000000) == 0)
  {
    goto LABEL_44;
  }
  *(_WORD *)(a2 + 64) = *(_QWORD *)(a1 + 272);
  if ((v9 & 0x800000000) == 0)
  {
LABEL_45:
    if ((v9 & 0x1000000000) == 0)
      goto LABEL_46;
    goto LABEL_117;
  }
LABEL_116:
  *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 280) & 0x1FF;
  if ((v9 & 0x1000000000) == 0)
  {
LABEL_46:
    if ((v9 & 0x2000000000) == 0)
      goto LABEL_47;
    goto LABEL_118;
  }
LABEL_117:
  *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 288) & 0x1FF;
  if ((v9 & 0x2000000000) == 0)
  {
LABEL_47:
    if ((v9 & 0x4000000000) == 0)
      goto LABEL_49;
    goto LABEL_48;
  }
LABEL_118:
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 296) & 0x1FFFF;
  if ((v9 & 0x4000000000) != 0)
LABEL_48:
    *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 304) & 0x1FFF;
LABEL_49:
  v10 = v9;
  if ((v9 & 0x8000000000) != 0)
  {
    *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 312) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x10000000000) != 0)
    *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 320);
  v11 = v10;
  if ((v10 & 0x20000000000) != 0)
  {
    *(_BYTE *)(a2 + 68) = *(_BYTE *)(a1 + 328) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x40000000000) == 0)
    {
LABEL_55:
      if ((v11 & 0x80000000000) == 0)
        goto LABEL_56;
      goto LABEL_122;
    }
  }
  else if ((v10 & 0x40000000000) == 0)
  {
    goto LABEL_55;
  }
  *(_DWORD *)(a2 + 72) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_123;
  }
LABEL_122:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_125;
  }
LABEL_124:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 360);
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_126;
  }
LABEL_125:
  *(_BYTE *)(a2 + 88) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 376);
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 384);
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_129;
  }
LABEL_128:
  *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_130;
  }
LABEL_129:
  *(_BYTE *)(a2 + 101) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_131;
  }
LABEL_130:
  *(_BYTE *)(a2 + 102) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_132;
  }
LABEL_131:
  *(_BYTE *)(a2 + 103) = *(_QWORD *)(a1 + 416) != 0;
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_133;
  }
LABEL_132:
  *(_BYTE *)(a2 + 104) = *(_QWORD *)(a1 + 424) != 0;
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_134;
  }
LABEL_133:
  *(_BYTE *)(a2 + 105) = *(_QWORD *)(a1 + 432) != 0;
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_135;
  }
LABEL_134:
  *(_BYTE *)(a2 + 106) = *(_QWORD *)(a1 + 440) != 0;
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_136;
  }
LABEL_135:
  *(_BYTE *)(a2 + 107) = *(_QWORD *)(a1 + 448) != 0;
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_137;
  }
LABEL_136:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_72;
    goto LABEL_138;
  }
LABEL_137:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) == 0)
  {
LABEL_72:
    if ((v11 & 0x1000000000000000) == 0)
      goto LABEL_73;
    goto LABEL_139;
  }
LABEL_138:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 472);
  if ((v11 & 0x1000000000000000) == 0)
  {
LABEL_73:
    if ((v11 & 0x2000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_140;
  }
LABEL_139:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 480);
  if ((v11 & 0x2000000000000000) == 0)
  {
LABEL_74:
    if ((v11 & 0x4000000000000000) == 0)
      goto LABEL_75;
LABEL_141:
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 496);
    if ((v11 & 0x8000000000000000) == 0)
      goto LABEL_76;
    goto LABEL_142;
  }
LABEL_140:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 488);
  if ((v11 & 0x4000000000000000) != 0)
    goto LABEL_141;
LABEL_75:
  if ((v11 & 0x8000000000000000) == 0)
    goto LABEL_76;
LABEL_142:
  *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 504);
LABEL_76:
  v12 = *(_QWORD *)(a1 + 1256);
  if ((v12 & 1) != 0)
    *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 512);
  if ((v12 & 2) != 0)
    *(_DWORD *)(a2 + 140) = *(_QWORD *)(a1 + 520);
  if ((v12 & 4) != 0)
    *(_BYTE *)(a2 + 144) = *(_QWORD *)(a1 + 528) != 0;
  if ((v12 & 8) != 0)
    *(_DWORD *)(a2 + 148) = *(_QWORD *)(a1 + 536);
  v14 = ((v3 & 2) >> 1)
      + (v2 & 1)
      + ((v3 & 4) >> 2)
      + ((v3 & 8) >> 3)
      + ((v3 & 0x10) >> 4)
      + ((v3 & 0x20) >> 5)
      + ((v3 & 0x40) >> 6)
      + ((unint64_t)(v4 & 0x80) >> 7)
      + ((v4 & 0x100) >> 8)
      + ((v5 & 0x200) >> 9)
      + ((v5 & 0x400) >> 10)
      + ((v5 & 0x800) >> 11)
      + ((v5 & 0x1000) >> 12)
      + ((v5 & 0x2000) >> 13)
      + ((v5 & 0x4000) >> 14)
      + ((unint64_t)((unsigned __int16)v5 & 0x8000) >> 15)
      + ((v5 & 0x10000) >> 16)
      + ((v6 & 0x20000) >> 17)
      + ((v6 & 0x40000) >> 18)
      + ((v6 & 0x80000) >> 19)
      + ((v6 & 0x100000) >> 20)
      + ((v6 & 0x200000) >> 21)
      + ((v6 & 0x400000) >> 22)
      + ((v7 & 0x800000) >> 23)
      + ((v7 & 0x1000000) >> 24)
      + ((v8 & 0x2000000) >> 25)
      + ((v8 & 0x4000000) >> 26)
      + ((v8 & 0x8000000) >> 27)
      + ((v8 & 0x10000000) >> 28)
      + ((v8 & 0x20000000) >> 29)
      + ((v8 & 0x40000000) >> 30);
  v13 = v12 & 8;
  v17 = v8 & 0x200000000;
  v18 = v9 & 0x400000000;
  v19 = v9 & 0x800000000;
  v20 = v9 & 0x1000000000;
  v21 = v9 & 0x2000000000;
  v22 = v9 & 0x4000000000;
  v23 = v9 & 0x8000000000;
  v24 = v10 & 0x10000000000;
  v25 = v10 & 0x20000000000;
  v26 = v11 & 0x80000000000;
  v27 = v11 & 0x40000000000;
  v16 = BYTE4(v8) & 1;
  v28 = v12 & 1;
  return v14
       + (v8 >> 31)
       + v16
       + (v17 >> 33)
       + (v18 >> 34)
       + (v19 >> 35)
       + (v20 >> 36)
       + (v21 >> 37)
       + (v22 >> 38)
       + (v23 >> 39)
       + (v24 >> 40)
       + (v25 >> 41)
       + (v11 >> 63)
       + (v27 >> 42)
       + (v26 >> 43)
       + ((v11 & 0x100000000000) >> 44)
       + ((v11 & 0x200000000000) >> 45)
       + ((v11 & 0x400000000000) >> 46)
       + ((v11 & 0x800000000000) >> 47)
       + ((v11 & 0x1000000000000) >> 48)
       + ((v11 & 0x2000000000000) >> 49)
       + ((v11 & 0x4000000000000) >> 50)
       + ((v11 & 0x8000000000000) >> 51)
       + ((v11 & 0x10000000000000) >> 52)
       + ((v11 & 0x20000000000000) >> 53)
       + ((v11 & 0x40000000000000) >> 54)
       + ((v11 & 0x80000000000000) >> 55)
       + ((v11 & 0x100000000000000) >> 56)
       + ((v11 & 0x200000000000000) >> 57)
       + ((v11 & 0x400000000000000) >> 58)
       + ((v11 & 0x800000000000000) >> 59)
       + ((v11 & 0x1000000000000000) >> 60)
       + ((v11 & 0x2000000000000000) >> 61)
       + ((v11 & 0x4000000000000000) >> 62)
       + v28
       + ((unint64_t)(v12 & 2) >> 1)
       + ((unint64_t)(v12 & 4) >> 2)
       + (v13 >> 3);
}

unint64_t sub_1C4D3A610(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_81;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_82;
  }
LABEL_81:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_83;
  }
LABEL_82:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_83:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_87;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_88;
  }
LABEL_87:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_89;
  }
LABEL_88:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_89:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_93;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_94;
  }
LABEL_93:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_95;
  }
LABEL_94:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_95:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_99;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_100;
  }
LABEL_99:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_101;
  }
LABEL_100:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_102;
  }
LABEL_101:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_38;
    goto LABEL_37;
  }
LABEL_102:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) != 0)
LABEL_37:
    *(_BYTE *)(a2 + 53) = *(_QWORD *)(a1 + 224) != 0;
LABEL_38:
  v9 = v8;
  if ((v8 & 0x20000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 232) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x40000000) == 0)
    {
LABEL_40:
      if ((v9 & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_106;
    }
  }
  else if ((v8 & 0x40000000) == 0)
  {
    goto LABEL_40;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 240);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_107;
  }
LABEL_106:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_43;
    goto LABEL_108;
  }
LABEL_107:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 256) & 0x1FF;
  if ((v9 & 0x200000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x400000000) == 0)
      goto LABEL_45;
    goto LABEL_44;
  }
LABEL_108:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 264) & 0x1FFFF;
  if ((v9 & 0x400000000) != 0)
LABEL_44:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 272) & 0x1FFF;
LABEL_45:
  v10 = v9;
  if ((v9 & 0x800000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 280) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x1000000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 288);
  v11 = v10;
  if ((v10 & 0x2000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 296) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x4000000000) == 0)
    {
LABEL_51:
      if ((v11 & 0x8000000000) == 0)
        goto LABEL_52;
      goto LABEL_112;
    }
  }
  else if ((v10 & 0x4000000000) == 0)
  {
    goto LABEL_51;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_113;
  }
LABEL_112:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 312);
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_114;
  }
LABEL_113:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 320) != 0;
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_115;
  }
LABEL_114:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 328);
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_116;
  }
LABEL_115:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 336) != 0;
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_117;
  }
LABEL_116:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_118;
  }
LABEL_117:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 352);
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_120;
  }
LABEL_119:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_125;
  }
LABEL_124:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_126;
  }
LABEL_125:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 416) != 0;
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 424);
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 432);
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_129;
  }
LABEL_128:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 440);
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_130;
  }
LABEL_129:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_131;
  }
LABEL_130:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_72;
    goto LABEL_132;
  }
LABEL_131:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) == 0)
  {
LABEL_72:
    if ((v11 & 0x1000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_73;
  }
LABEL_132:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 472);
  if ((v11 & 0x1000000000000000) != 0)
LABEL_73:
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 480);
LABEL_74:
  v12 = v2 & 1;
  if ((v11 & 0x2000000000000000) != 0)
    *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 488);
  v13 = v3 & 2;
  v14 = v3 & 4;
  v15 = v3 & 8;
  v16 = v3 & 0x10;
  v17 = v3 & 0x20;
  v18 = v3 & 0x40;
  v19 = v4 & 0x80;
  v20 = v4 & 0x100;
  v21 = v5 & 0x200;
  v22 = v5 & 0x400;
  v23 = v5 & 0x800;
  v24 = v5 & 0x1000;
  v25 = v5 & 0x2000;
  v26 = v5 & 0x4000;
  v27 = (unsigned __int16)v6 & 0x8000;
  v28 = v6 & 0x10000;
  v29 = v6 & 0x20000;
  v30 = v6 & 0x40000;
  v31 = v6 & 0x80000;
  v32 = v6 & 0x100000;
  if ((v11 & 0x4000000000000000) != 0)
    *(_BYTE *)(a2 + 136) = *(_QWORD *)(a1 + 496) != 0;
  v33 = v7 & 0x200000;
  v36 = v7 & 0x400000;
  v37 = v8 & 0x800000;
  v38 = v8 & 0x1000000;
  v39 = v8 & 0x2000000;
  v40 = v8 & 0x4000000;
  v41 = v8 & 0x8000000;
  v42 = v8 & 0x10000000;
  v44 = v8 & 0x20000000;
  v45 = v9 & 0x200000000;
  v46 = v9 & 0x400000000;
  v47 = v9 & 0x800000000;
  v48 = v10 & 0x1000000000;
  v49 = v11 & 0x4000000000;
  v43 = BYTE4(v9) & 1;
  v34 = (v13 >> 1)
      + v12
      + (v14 >> 2)
      + (v15 >> 3)
      + (v16 >> 4)
      + (v17 >> 5)
      + (v18 >> 6)
      + (v19 >> 7)
      + (v20 >> 8)
      + (v21 >> 9)
      + (v22 >> 10)
      + (v23 >> 11)
      + (v24 >> 12)
      + (v25 >> 13)
      + (v26 >> 14)
      + (v27 >> 15)
      + (v28 >> 16)
      + (v29 >> 17)
      + (v30 >> 18)
      + (v31 >> 19)
      + (v32 >> 20)
      + (v33 >> 21)
      + (v36 >> 22)
      + (v37 >> 23)
      + (v38 >> 24)
      + (v39 >> 25)
      + (v40 >> 26)
      + (v41 >> 27)
      + (v42 >> 28)
      + (v44 >> 29)
      + ((v9 & 0x40000000) >> 30)
      + (v9 >> 31)
      + v43
      + (v45 >> 33)
      + (v46 >> 34)
      + (v47 >> 35)
      + (v48 >> 36)
      + ((v10 & 0x2000000000uLL) >> 37)
      + (v49 >> 38)
      + ((v11 & 0x8000000000uLL) >> 39)
      + ((v11 & 0x10000000000uLL) >> 40)
      + ((v11 & 0x20000000000uLL) >> 41)
      + ((v11 & 0x40000000000uLL) >> 42);
  return v34
       + ((v11 & 0x80000000000uLL) >> 43)
       + ((v11 & 0x100000000000uLL) >> 44)
       + ((v11 & 0x200000000000uLL) >> 45)
       + ((v11 & 0x400000000000uLL) >> 46)
       + ((v11 & 0x800000000000uLL) >> 47)
       + ((v11 & 0x1000000000000uLL) >> 48)
       + ((v11 & 0x2000000000000uLL) >> 49)
       + ((v11 & 0x4000000000000uLL) >> 50)
       + ((v11 & 0x8000000000000uLL) >> 51)
       + ((v11 & 0x10000000000000uLL) >> 52)
       + ((v11 & 0x20000000000000uLL) >> 53)
       + ((v11 & 0x40000000000000uLL) >> 54)
       + ((v11 & 0x80000000000000uLL) >> 55)
       + ((v11 & 0x100000000000000uLL) >> 56)
       + ((v11 & 0x200000000000000uLL) >> 57)
       + ((v11 & 0x400000000000000uLL) >> 58)
       + ((v11 & 0x800000000000000uLL) >> 59)
       + ((v11 & 0x1000000000000000uLL) >> 60)
       + ((v11 & 0x2000000000000000uLL) >> 61)
       + ((v11 & 0x4000000000000000uLL) >> 62);
}

unint64_t sub_1C4D3AF0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_81;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_82;
  }
LABEL_81:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_83;
  }
LABEL_82:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_83:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_87;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_88;
  }
LABEL_87:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_89;
  }
LABEL_88:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_89:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_93;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_94;
  }
LABEL_93:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_95;
  }
LABEL_94:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_95:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_99;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_100;
  }
LABEL_99:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_101;
  }
LABEL_100:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_102;
  }
LABEL_101:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_38;
    goto LABEL_37;
  }
LABEL_102:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) != 0)
LABEL_37:
    *(_BYTE *)(a2 + 53) = *(_QWORD *)(a1 + 224) != 0;
LABEL_38:
  v9 = v8;
  if ((v8 & 0x20000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 232) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x40000000) == 0)
    {
LABEL_40:
      if ((v9 & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_106;
    }
  }
  else if ((v8 & 0x40000000) == 0)
  {
    goto LABEL_40;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 240);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_107;
  }
LABEL_106:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_43;
    goto LABEL_108;
  }
LABEL_107:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 256) & 0x1FF;
  if ((v9 & 0x200000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x400000000) == 0)
      goto LABEL_45;
    goto LABEL_44;
  }
LABEL_108:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 264) & 0x1FFFF;
  if ((v9 & 0x400000000) != 0)
LABEL_44:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 272) & 0x1FFF;
LABEL_45:
  v10 = v9;
  if ((v9 & 0x800000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 280) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x1000000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 288);
  v11 = v10;
  if ((v10 & 0x2000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 296) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x4000000000) == 0)
    {
LABEL_51:
      if ((v11 & 0x8000000000) == 0)
        goto LABEL_52;
      goto LABEL_112;
    }
  }
  else if ((v10 & 0x4000000000) == 0)
  {
    goto LABEL_51;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_113;
  }
LABEL_112:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 312);
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_114;
  }
LABEL_113:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 320) != 0;
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_115;
  }
LABEL_114:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 328);
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_116;
  }
LABEL_115:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 336) != 0;
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_117;
  }
LABEL_116:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_118;
  }
LABEL_117:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 352);
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_120;
  }
LABEL_119:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_125;
  }
LABEL_124:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_126;
  }
LABEL_125:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 416) != 0;
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 424);
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 432);
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_129;
  }
LABEL_128:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 440);
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_130;
  }
LABEL_129:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_131;
  }
LABEL_130:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_72;
    goto LABEL_132;
  }
LABEL_131:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) == 0)
  {
LABEL_72:
    if ((v11 & 0x1000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_73;
  }
LABEL_132:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 472);
  if ((v11 & 0x1000000000000000) != 0)
LABEL_73:
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 480);
LABEL_74:
  v12 = v2 & 1;
  if ((v11 & 0x2000000000000000) != 0)
    *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 488);
  v13 = v3 & 2;
  v14 = v3 & 4;
  v15 = v3 & 8;
  v16 = v3 & 0x10;
  v17 = v3 & 0x20;
  v18 = v3 & 0x40;
  v19 = v4 & 0x80;
  v20 = v4 & 0x100;
  v21 = v5 & 0x200;
  v22 = v5 & 0x400;
  v23 = v5 & 0x800;
  v24 = v5 & 0x1000;
  v25 = v5 & 0x2000;
  v26 = v5 & 0x4000;
  v27 = (unsigned __int16)v6 & 0x8000;
  v28 = v6 & 0x10000;
  v29 = v6 & 0x20000;
  v30 = v6 & 0x40000;
  v31 = v6 & 0x80000;
  v32 = v6 & 0x100000;
  if ((v11 & 0x4000000000000000) != 0)
    *(_BYTE *)(a2 + 136) = *(_QWORD *)(a1 + 496) != 0;
  v33 = v7 & 0x200000;
  v36 = v7 & 0x400000;
  v37 = v8 & 0x800000;
  v38 = v8 & 0x1000000;
  v39 = v8 & 0x2000000;
  v40 = v8 & 0x4000000;
  v41 = v8 & 0x8000000;
  v42 = v8 & 0x10000000;
  v44 = v8 & 0x20000000;
  v45 = v9 & 0x200000000;
  v46 = v9 & 0x400000000;
  v47 = v9 & 0x800000000;
  v48 = v10 & 0x1000000000;
  v49 = v11 & 0x4000000000;
  v43 = BYTE4(v9) & 1;
  v34 = (v13 >> 1)
      + v12
      + (v14 >> 2)
      + (v15 >> 3)
      + (v16 >> 4)
      + (v17 >> 5)
      + (v18 >> 6)
      + (v19 >> 7)
      + (v20 >> 8)
      + (v21 >> 9)
      + (v22 >> 10)
      + (v23 >> 11)
      + (v24 >> 12)
      + (v25 >> 13)
      + (v26 >> 14)
      + (v27 >> 15)
      + (v28 >> 16)
      + (v29 >> 17)
      + (v30 >> 18)
      + (v31 >> 19)
      + (v32 >> 20)
      + (v33 >> 21)
      + (v36 >> 22)
      + (v37 >> 23)
      + (v38 >> 24)
      + (v39 >> 25)
      + (v40 >> 26)
      + (v41 >> 27)
      + (v42 >> 28)
      + (v44 >> 29)
      + ((v9 & 0x40000000) >> 30)
      + (v9 >> 31)
      + v43
      + (v45 >> 33)
      + (v46 >> 34)
      + (v47 >> 35)
      + (v48 >> 36)
      + ((v10 & 0x2000000000uLL) >> 37)
      + (v49 >> 38)
      + ((v11 & 0x8000000000uLL) >> 39)
      + ((v11 & 0x10000000000uLL) >> 40)
      + ((v11 & 0x20000000000uLL) >> 41)
      + ((v11 & 0x40000000000uLL) >> 42);
  return v34
       + ((v11 & 0x80000000000uLL) >> 43)
       + ((v11 & 0x100000000000uLL) >> 44)
       + ((v11 & 0x200000000000uLL) >> 45)
       + ((v11 & 0x400000000000uLL) >> 46)
       + ((v11 & 0x800000000000uLL) >> 47)
       + ((v11 & 0x1000000000000uLL) >> 48)
       + ((v11 & 0x2000000000000uLL) >> 49)
       + ((v11 & 0x4000000000000uLL) >> 50)
       + ((v11 & 0x8000000000000uLL) >> 51)
       + ((v11 & 0x10000000000000uLL) >> 52)
       + ((v11 & 0x20000000000000uLL) >> 53)
       + ((v11 & 0x40000000000000uLL) >> 54)
       + ((v11 & 0x80000000000000uLL) >> 55)
       + ((v11 & 0x100000000000000uLL) >> 56)
       + ((v11 & 0x200000000000000uLL) >> 57)
       + ((v11 & 0x400000000000000uLL) >> 58)
       + ((v11 & 0x800000000000000uLL) >> 59)
       + ((v11 & 0x1000000000000000uLL) >> 60)
       + ((v11 & 0x2000000000000000uLL) >> 61)
       + ((v11 & 0x4000000000000000uLL) >> 62);
}

unint64_t sub_1C4D3B808(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_81;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_82;
  }
LABEL_81:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_83;
  }
LABEL_82:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_83:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_87;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_88;
  }
LABEL_87:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_89;
  }
LABEL_88:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_89:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_93;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_94;
  }
LABEL_93:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_95;
  }
LABEL_94:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_95:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_99;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_100;
  }
LABEL_99:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_101;
  }
LABEL_100:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_102;
  }
LABEL_101:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_38;
    goto LABEL_37;
  }
LABEL_102:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) != 0)
LABEL_37:
    *(_BYTE *)(a2 + 53) = *(_QWORD *)(a1 + 224) != 0;
LABEL_38:
  v9 = v8;
  if ((v8 & 0x20000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 232) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x40000000) == 0)
    {
LABEL_40:
      if ((v9 & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_106;
    }
  }
  else if ((v8 & 0x40000000) == 0)
  {
    goto LABEL_40;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 240);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_107;
  }
LABEL_106:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_43;
    goto LABEL_108;
  }
LABEL_107:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 256) & 0x1FF;
  if ((v9 & 0x200000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x400000000) == 0)
      goto LABEL_45;
    goto LABEL_44;
  }
LABEL_108:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 264) & 0x1FFFF;
  if ((v9 & 0x400000000) != 0)
LABEL_44:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 272) & 0x1FFF;
LABEL_45:
  v10 = v9;
  if ((v9 & 0x800000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 280) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x1000000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 288);
  v11 = v10;
  if ((v10 & 0x2000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 296) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x4000000000) == 0)
    {
LABEL_51:
      if ((v11 & 0x8000000000) == 0)
        goto LABEL_52;
      goto LABEL_112;
    }
  }
  else if ((v10 & 0x4000000000) == 0)
  {
    goto LABEL_51;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_113;
  }
LABEL_112:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 312);
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_114;
  }
LABEL_113:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 320) != 0;
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_115;
  }
LABEL_114:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 328);
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_116;
  }
LABEL_115:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 336) != 0;
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_117;
  }
LABEL_116:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_118;
  }
LABEL_117:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 352);
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_120;
  }
LABEL_119:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_125;
  }
LABEL_124:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_126;
  }
LABEL_125:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 416) != 0;
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 424);
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 432);
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_129;
  }
LABEL_128:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 440);
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_130;
  }
LABEL_129:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_131;
  }
LABEL_130:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_72;
    goto LABEL_132;
  }
LABEL_131:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) == 0)
  {
LABEL_72:
    if ((v11 & 0x1000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_73;
  }
LABEL_132:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 472);
  if ((v11 & 0x1000000000000000) != 0)
LABEL_73:
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 480);
LABEL_74:
  v12 = v2 & 1;
  if ((v11 & 0x2000000000000000) != 0)
    *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 488);
  v13 = v3 & 2;
  v14 = v3 & 4;
  v15 = v3 & 8;
  v16 = v3 & 0x10;
  v17 = v3 & 0x20;
  v18 = v3 & 0x40;
  v19 = v4 & 0x80;
  v20 = v4 & 0x100;
  v21 = v5 & 0x200;
  v22 = v5 & 0x400;
  v23 = v5 & 0x800;
  v24 = v5 & 0x1000;
  v25 = v5 & 0x2000;
  v26 = v5 & 0x4000;
  v27 = (unsigned __int16)v6 & 0x8000;
  v28 = v6 & 0x10000;
  v29 = v6 & 0x20000;
  v30 = v6 & 0x40000;
  v31 = v6 & 0x80000;
  v32 = v6 & 0x100000;
  if ((v11 & 0x4000000000000000) != 0)
    *(_BYTE *)(a2 + 136) = *(_QWORD *)(a1 + 496) != 0;
  v33 = v7 & 0x200000;
  v36 = v7 & 0x400000;
  v37 = v8 & 0x800000;
  v38 = v8 & 0x1000000;
  v39 = v8 & 0x2000000;
  v40 = v8 & 0x4000000;
  v41 = v8 & 0x8000000;
  v42 = v8 & 0x10000000;
  v44 = v8 & 0x20000000;
  v45 = v9 & 0x200000000;
  v46 = v9 & 0x400000000;
  v47 = v9 & 0x800000000;
  v48 = v10 & 0x1000000000;
  v49 = v11 & 0x4000000000;
  v43 = BYTE4(v9) & 1;
  v34 = (v13 >> 1)
      + v12
      + (v14 >> 2)
      + (v15 >> 3)
      + (v16 >> 4)
      + (v17 >> 5)
      + (v18 >> 6)
      + (v19 >> 7)
      + (v20 >> 8)
      + (v21 >> 9)
      + (v22 >> 10)
      + (v23 >> 11)
      + (v24 >> 12)
      + (v25 >> 13)
      + (v26 >> 14)
      + (v27 >> 15)
      + (v28 >> 16)
      + (v29 >> 17)
      + (v30 >> 18)
      + (v31 >> 19)
      + (v32 >> 20)
      + (v33 >> 21)
      + (v36 >> 22)
      + (v37 >> 23)
      + (v38 >> 24)
      + (v39 >> 25)
      + (v40 >> 26)
      + (v41 >> 27)
      + (v42 >> 28)
      + (v44 >> 29)
      + ((v9 & 0x40000000) >> 30)
      + (v9 >> 31)
      + v43
      + (v45 >> 33)
      + (v46 >> 34)
      + (v47 >> 35)
      + (v48 >> 36)
      + ((v10 & 0x2000000000uLL) >> 37)
      + (v49 >> 38)
      + ((v11 & 0x8000000000uLL) >> 39)
      + ((v11 & 0x10000000000uLL) >> 40)
      + ((v11 & 0x20000000000uLL) >> 41)
      + ((v11 & 0x40000000000uLL) >> 42);
  return v34
       + ((v11 & 0x80000000000uLL) >> 43)
       + ((v11 & 0x100000000000uLL) >> 44)
       + ((v11 & 0x200000000000uLL) >> 45)
       + ((v11 & 0x400000000000uLL) >> 46)
       + ((v11 & 0x800000000000uLL) >> 47)
       + ((v11 & 0x1000000000000uLL) >> 48)
       + ((v11 & 0x2000000000000uLL) >> 49)
       + ((v11 & 0x4000000000000uLL) >> 50)
       + ((v11 & 0x8000000000000uLL) >> 51)
       + ((v11 & 0x10000000000000uLL) >> 52)
       + ((v11 & 0x20000000000000uLL) >> 53)
       + ((v11 & 0x40000000000000uLL) >> 54)
       + ((v11 & 0x80000000000000uLL) >> 55)
       + ((v11 & 0x100000000000000uLL) >> 56)
       + ((v11 & 0x200000000000000uLL) >> 57)
       + ((v11 & 0x400000000000000uLL) >> 58)
       + ((v11 & 0x800000000000000uLL) >> 59)
       + ((v11 & 0x1000000000000000uLL) >> 60)
       + ((v11 & 0x2000000000000000uLL) >> 61)
       + ((v11 & 0x4000000000000000uLL) >> 62);
}

unint64_t sub_1C4D3C104(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_80;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_81;
  }
LABEL_80:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_82;
  }
LABEL_81:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_82:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_86;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_87;
  }
LABEL_86:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_88;
  }
LABEL_87:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_88:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_92;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_93;
  }
LABEL_92:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_94;
  }
LABEL_93:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_94:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_98;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_99;
  }
LABEL_98:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_100;
  }
LABEL_99:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_100:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) != 0)
LABEL_36:
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
LABEL_37:
  v9 = v8;
  if ((v8 & 0x10000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 224) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_39:
      if ((v9 & 0x40000000) == 0)
        goto LABEL_40;
      goto LABEL_104;
    }
  }
  else if ((v8 & 0x20000000) == 0)
  {
    goto LABEL_39;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 232);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_40:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_105;
  }
LABEL_104:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 240) & 0x1FF;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_106;
  }
LABEL_105:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_106:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 256) & 0x1FFFF;
  if ((v9 & 0x200000000) != 0)
LABEL_43:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 264) & 0x1FFF;
LABEL_44:
  v10 = v9;
  if ((v9 & 0x400000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 272) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x800000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 280);
  v11 = v10;
  if ((v10 & 0x1000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 288) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x2000000000) == 0)
    {
LABEL_50:
      if ((v11 & 0x4000000000) == 0)
        goto LABEL_51;
      goto LABEL_110;
    }
  }
  else if ((v10 & 0x2000000000) == 0)
  {
    goto LABEL_50;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 296);
  if ((v11 & 0x4000000000) == 0)
  {
LABEL_51:
    if ((v11 & 0x8000000000) == 0)
      goto LABEL_52;
    goto LABEL_111;
  }
LABEL_110:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_112;
  }
LABEL_111:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 312) != 0;
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_113;
  }
LABEL_112:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 320);
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_114;
  }
LABEL_113:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 328) != 0;
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_115;
  }
LABEL_114:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_116;
  }
LABEL_115:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_117;
  }
LABEL_116:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_118;
  }
LABEL_117:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_120;
  }
LABEL_119:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_125;
  }
LABEL_124:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 416);
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_126;
  }
LABEL_125:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 424);
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 432);
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 440);
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_129;
  }
LABEL_128:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_130;
  }
LABEL_129:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_73;
    goto LABEL_72;
  }
LABEL_130:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) != 0)
LABEL_72:
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 472);
LABEL_73:
  v12 = v2 & 1;
  if ((v11 & 0x1000000000000000) != 0)
    *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 480);
  v13 = v3 & 2;
  v14 = v3 & 4;
  v15 = v3 & 8;
  v16 = v3 & 0x10;
  v17 = v3 & 0x20;
  v18 = v3 & 0x40;
  v19 = v4 & 0x80;
  v20 = v4 & 0x100;
  v25 = (unsigned __int16)v6 & 0x8000;
  v26 = v6 & 0x10000;
  v27 = v6 & 0x20000;
  v28 = v6 & 0x40000;
  v29 = v6 & 0x80000;
  v30 = v6 & 0x100000;
  if ((v11 & 0x2000000000000000) != 0)
    *(_BYTE *)(a2 + 136) = *(_QWORD *)(a1 + 488) != 0;
  v22 = v5 & 0x800;
  v21 = v5 & 0x200;
  v24 = v5 & 0x4000;
  v23 = v5 & 0x2000;
  v32 = v7 & 0x400000;
  v33 = v8 & 0x800000;
  v34 = v8 & 0x1000000;
  v35 = v8 & 0x2000000;
  v36 = v8 & 0x4000000;
  v37 = v8 & 0x8000000;
  v38 = v8 & 0x10000000;
  v40 = v9 & 0x200000000;
  v41 = v9 & 0x400000000;
  v42 = v10 & 0x800000000;
  v43 = v11 & 0x2000000000;
  v44 = v10 & 0x1000000000;
  v45 = v11 & 0x4000000000;
  v46 = v11 & 0x8000000000;
  v47 = v11 & 0x10000000000;
  v48 = v11 & 0x20000000000;
  v49 = v11 & 0x40000000000;
  v39 = BYTE4(v9) & 1;
  LODWORD(v22) = (v13 >> 1)
               + v12
               + (v14 >> 2)
               + (v15 >> 3)
               + (v16 >> 4)
               + (v17 >> 5)
               + (v18 >> 6)
               + (v19 >> 7)
               + (v20 >> 8)
               + (v21 >> 9)
               + ((unint64_t)(v5 & 0x400) >> 10)
               + (v22 >> 11)
               + ((unint64_t)(v5 & 0x1000) >> 12)
               + (v23 >> 13)
               + (v24 >> 14)
               + (v25 >> 15)
               + (v26 >> 16)
               + (v27 >> 17)
               + (v28 >> 18)
               + (v29 >> 19)
               + (v30 >> 20)
               + ((v7 & 0x200000uLL) >> 21)
               + (v32 >> 22)
               + (v33 >> 23)
               + (v34 >> 24)
               + (v35 >> 25)
               + (v36 >> 26)
               + (v37 >> 27)
               + (v38 >> 28)
               + ((v9 & 0x20000000) >> 29)
               + ((v9 & 0x40000000) >> 30)
               + (v9 >> 31)
               + v39
               + (v40 >> 33)
               + (v41 >> 34)
               + (v42 >> 35)
               + (v44 >> 36)
               + (v43 >> 37)
               + (v45 >> 38)
               + (v46 >> 39)
               + (v47 >> 40)
               + (v48 >> 41)
               + (v49 >> 42);
  return (_DWORD)v22
       + ((v11 & 0x80000000000uLL) >> 43)
       + ((v11 & 0x100000000000uLL) >> 44)
       + ((v11 & 0x200000000000uLL) >> 45)
       + ((v11 & 0x400000000000uLL) >> 46)
       + ((v11 & 0x800000000000uLL) >> 47)
       + ((v11 & 0x1000000000000uLL) >> 48)
       + ((v11 & 0x2000000000000uLL) >> 49)
       + ((v11 & 0x4000000000000uLL) >> 50)
       + ((v11 & 0x8000000000000uLL) >> 51)
       + ((v11 & 0x10000000000000uLL) >> 52)
       + ((v11 & 0x20000000000000uLL) >> 53)
       + ((v11 & 0x40000000000000uLL) >> 54)
       + ((v11 & 0x80000000000000uLL) >> 55)
       + ((v11 & 0x100000000000000uLL) >> 56)
       + ((v11 & 0x200000000000000uLL) >> 57)
       + ((v11 & 0x400000000000000uLL) >> 58)
       + ((v11 & 0x800000000000000uLL) >> 59)
       + ((v11 & 0x1000000000000000uLL) >> 60)
       + ((v11 & 0x2000000000000000uLL) >> 61);
}

unint64_t sub_1C4D3C9FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_80;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_81;
  }
LABEL_80:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_82;
  }
LABEL_81:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_82:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_86;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_87;
  }
LABEL_86:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_88;
  }
LABEL_87:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_88:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_92;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_93;
  }
LABEL_92:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_94;
  }
LABEL_93:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_94:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_98;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_99;
  }
LABEL_98:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_100;
  }
LABEL_99:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_100:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) != 0)
LABEL_36:
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
LABEL_37:
  v9 = v8;
  if ((v8 & 0x10000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 224) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_39:
      if ((v9 & 0x40000000) == 0)
        goto LABEL_40;
      goto LABEL_104;
    }
  }
  else if ((v8 & 0x20000000) == 0)
  {
    goto LABEL_39;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 232);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_40:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_105;
  }
LABEL_104:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 240) & 0x1FF;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_106;
  }
LABEL_105:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_106:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 256) & 0x1FFFF;
  if ((v9 & 0x200000000) != 0)
LABEL_43:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 264) & 0x1FFF;
LABEL_44:
  v10 = v9;
  if ((v9 & 0x400000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 272) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x800000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 280);
  v11 = v10;
  if ((v10 & 0x1000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 288) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x2000000000) == 0)
    {
LABEL_50:
      if ((v11 & 0x4000000000) == 0)
        goto LABEL_51;
      goto LABEL_110;
    }
  }
  else if ((v10 & 0x2000000000) == 0)
  {
    goto LABEL_50;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 296);
  if ((v11 & 0x4000000000) == 0)
  {
LABEL_51:
    if ((v11 & 0x8000000000) == 0)
      goto LABEL_52;
    goto LABEL_111;
  }
LABEL_110:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_112;
  }
LABEL_111:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 312) != 0;
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_113;
  }
LABEL_112:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 320);
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_114;
  }
LABEL_113:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 328) != 0;
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_115;
  }
LABEL_114:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_116;
  }
LABEL_115:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_117;
  }
LABEL_116:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_118;
  }
LABEL_117:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_120;
  }
LABEL_119:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_125;
  }
LABEL_124:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 416);
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_126;
  }
LABEL_125:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 424);
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 432);
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 440);
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_129;
  }
LABEL_128:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_130;
  }
LABEL_129:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_73;
    goto LABEL_72;
  }
LABEL_130:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) != 0)
LABEL_72:
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 472);
LABEL_73:
  v12 = v2 & 1;
  if ((v11 & 0x1000000000000000) != 0)
    *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 480);
  v13 = v3 & 2;
  v14 = v3 & 4;
  v15 = v3 & 8;
  v16 = v3 & 0x10;
  v17 = v3 & 0x20;
  v18 = v3 & 0x40;
  v19 = v4 & 0x80;
  v20 = v4 & 0x100;
  v25 = (unsigned __int16)v6 & 0x8000;
  v26 = v6 & 0x10000;
  v27 = v6 & 0x20000;
  v28 = v6 & 0x40000;
  v29 = v6 & 0x80000;
  v30 = v6 & 0x100000;
  if ((v11 & 0x2000000000000000) != 0)
    *(_BYTE *)(a2 + 136) = *(_QWORD *)(a1 + 488) != 0;
  v22 = v5 & 0x800;
  v21 = v5 & 0x200;
  v24 = v5 & 0x4000;
  v23 = v5 & 0x2000;
  v32 = v7 & 0x400000;
  v33 = v8 & 0x800000;
  v34 = v8 & 0x1000000;
  v35 = v8 & 0x2000000;
  v36 = v8 & 0x4000000;
  v37 = v8 & 0x8000000;
  v38 = v8 & 0x10000000;
  v40 = v9 & 0x200000000;
  v41 = v9 & 0x400000000;
  v42 = v10 & 0x800000000;
  v43 = v11 & 0x2000000000;
  v44 = v10 & 0x1000000000;
  v45 = v11 & 0x4000000000;
  v46 = v11 & 0x8000000000;
  v47 = v11 & 0x10000000000;
  v48 = v11 & 0x20000000000;
  v49 = v11 & 0x40000000000;
  v39 = BYTE4(v9) & 1;
  LODWORD(v22) = (v13 >> 1)
               + v12
               + (v14 >> 2)
               + (v15 >> 3)
               + (v16 >> 4)
               + (v17 >> 5)
               + (v18 >> 6)
               + (v19 >> 7)
               + (v20 >> 8)
               + (v21 >> 9)
               + ((unint64_t)(v5 & 0x400) >> 10)
               + (v22 >> 11)
               + ((unint64_t)(v5 & 0x1000) >> 12)
               + (v23 >> 13)
               + (v24 >> 14)
               + (v25 >> 15)
               + (v26 >> 16)
               + (v27 >> 17)
               + (v28 >> 18)
               + (v29 >> 19)
               + (v30 >> 20)
               + ((v7 & 0x200000uLL) >> 21)
               + (v32 >> 22)
               + (v33 >> 23)
               + (v34 >> 24)
               + (v35 >> 25)
               + (v36 >> 26)
               + (v37 >> 27)
               + (v38 >> 28)
               + ((v9 & 0x20000000) >> 29)
               + ((v9 & 0x40000000) >> 30)
               + (v9 >> 31)
               + v39
               + (v40 >> 33)
               + (v41 >> 34)
               + (v42 >> 35)
               + (v44 >> 36)
               + (v43 >> 37)
               + (v45 >> 38)
               + (v46 >> 39)
               + (v47 >> 40)
               + (v48 >> 41)
               + (v49 >> 42);
  return (_DWORD)v22
       + ((v11 & 0x80000000000uLL) >> 43)
       + ((v11 & 0x100000000000uLL) >> 44)
       + ((v11 & 0x200000000000uLL) >> 45)
       + ((v11 & 0x400000000000uLL) >> 46)
       + ((v11 & 0x800000000000uLL) >> 47)
       + ((v11 & 0x1000000000000uLL) >> 48)
       + ((v11 & 0x2000000000000uLL) >> 49)
       + ((v11 & 0x4000000000000uLL) >> 50)
       + ((v11 & 0x8000000000000uLL) >> 51)
       + ((v11 & 0x10000000000000uLL) >> 52)
       + ((v11 & 0x20000000000000uLL) >> 53)
       + ((v11 & 0x40000000000000uLL) >> 54)
       + ((v11 & 0x80000000000000uLL) >> 55)
       + ((v11 & 0x100000000000000uLL) >> 56)
       + ((v11 & 0x200000000000000uLL) >> 57)
       + ((v11 & 0x400000000000000uLL) >> 58)
       + ((v11 & 0x800000000000000uLL) >> 59)
       + ((v11 & 0x1000000000000000uLL) >> 60)
       + ((v11 & 0x2000000000000000uLL) >> 61);
}

unint64_t sub_1C4D3D2F4(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_DWORD *)a2 = *(_QWORD *)a1;
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0)
        goto LABEL_4;
      goto LABEL_111;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 8) & 1;
  v3 = *(_QWORD *)(a1 + 1248);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_112;
  }
LABEL_111:
  *(_WORD *)(a2 + 4) = *(_QWORD *)(a1 + 16);
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_113;
  }
LABEL_112:
  *(_WORD *)(a2 + 4) = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_114;
  }
LABEL_113:
  *(_WORD *)(a2 + 4) = *(_WORD *)(a1 + 32) & 0x1FF;
  if ((v3 & 0x20) == 0)
  {
LABEL_7:
    if ((v3 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_114:
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 40) & 0x1FFFF;
  if ((v3 & 0x40) != 0)
LABEL_8:
    *(_WORD *)(a2 + 4) = *(_WORD *)(a1 + 48) & 0x1FFF;
LABEL_9:
  v4 = v3;
  if ((v3 & 0x80) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 56) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x100) != 0)
    *(_DWORD *)(a2 + 4) = *(_QWORD *)(a1 + 64);
  v5 = v4;
  if ((v4 & 0x200) != 0)
  {
    *(_BYTE *)(a2 + 8) = *(_BYTE *)(a1 + 72) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x400) == 0)
    {
LABEL_15:
      if ((v5 & 0x800) == 0)
        goto LABEL_16;
      goto LABEL_118;
    }
  }
  else if ((v4 & 0x400) == 0)
  {
    goto LABEL_15;
  }
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_119;
  }
LABEL_118:
  *(_DWORD *)(a2 + 16) = *(_QWORD *)(a1 + 88);
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_120;
  }
LABEL_119:
  *(_BYTE *)(a2 + 20) = *(_QWORD *)(a1 + 96) != 0;
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_120:
  *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
  if ((v5 & 0x4000) != 0)
LABEL_19:
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 112);
LABEL_20:
  v6 = v5;
  if ((v5 & 0x8000) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 120) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x10000) == 0)
    {
LABEL_22:
      if ((v6 & 0x20000) == 0)
        goto LABEL_23;
      goto LABEL_124;
    }
  }
  else if ((v5 & 0x10000) == 0)
  {
    goto LABEL_22;
  }
  *(_WORD *)(a2 + 4) = *(_QWORD *)(a1 + 128);
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_125;
  }
LABEL_124:
  *(_WORD *)(a2 + 4) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_126;
  }
LABEL_125:
  *(_WORD *)(a2 + 4) = *(_WORD *)(a1 + 144) & 0x1FF;
  if ((v6 & 0x80000) == 0)
  {
LABEL_25:
    if ((v6 & 0x100000) == 0)
      goto LABEL_27;
    goto LABEL_26;
  }
LABEL_126:
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 152) & 0x1FFFF;
  if ((v6 & 0x100000) != 0)
LABEL_26:
    *(_WORD *)(a2 + 4) = *(_WORD *)(a1 + 160) & 0x1FFF;
LABEL_27:
  v7 = v6;
  if ((v6 & 0x200000) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 168) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x400000) != 0)
    *(_DWORD *)(a2 + 4) = *(_QWORD *)(a1 + 176);
  v8 = v7;
  if ((v7 & 0x800000) != 0)
  {
    *(_BYTE *)(a2 + 8) = *(_BYTE *)(a1 + 184) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x1000000) == 0)
    {
LABEL_33:
      if ((v8 & 0x2000000) == 0)
        goto LABEL_34;
      goto LABEL_130;
    }
  }
  else if ((v7 & 0x1000000) == 0)
  {
    goto LABEL_33;
  }
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_131;
  }
LABEL_130:
  *(_DWORD *)(a2 + 16) = *(_QWORD *)(a1 + 200);
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_132;
  }
LABEL_131:
  *(_BYTE *)(a2 + 20) = *(_QWORD *)(a1 + 208) != 0;
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_133;
  }
LABEL_132:
  *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 216);
  if ((v8 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v8 & 0x20000000) == 0)
      goto LABEL_38;
    goto LABEL_134;
  }
LABEL_133:
  *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 224);
  if ((v8 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x40000000) == 0)
      goto LABEL_39;
    goto LABEL_135;
  }
LABEL_134:
  *(_BYTE *)(a2 + 32) = *(_QWORD *)(a1 + 232) != 0;
  if ((v8 & 0x40000000) == 0)
  {
LABEL_39:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_40;
  }
LABEL_135:
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 240);
  if ((v8 & 0x80000000) != 0)
LABEL_40:
    *(_BYTE *)(a2 + 4) = *(_QWORD *)(a1 + 248) != 0;
LABEL_41:
  v9 = v8;
  if ((v8 & 0x100000000) != 0)
  {
    *(_BYTE *)(a2 + 5) = *(_BYTE *)(a1 + 256) & 0xF;
    v9 = *(_QWORD *)(a1 + 1248);
  }
  v10 = v9;
  if ((v9 & 0x200000000) != 0)
  {
    *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 264) & 1;
    v10 = *(_QWORD *)(a1 + 1248);
    if ((v10 & 0x400000000) == 0)
    {
LABEL_45:
      if ((v10 & 0x800000000) == 0)
        goto LABEL_46;
      goto LABEL_139;
    }
  }
  else if ((v9 & 0x400000000) == 0)
  {
    goto LABEL_45;
  }
  *(_WORD *)(a2 + 40) = *(_QWORD *)(a1 + 272);
  if ((v10 & 0x800000000) == 0)
  {
LABEL_46:
    if ((v10 & 0x1000000000) == 0)
      goto LABEL_47;
    goto LABEL_140;
  }
LABEL_139:
  *(_WORD *)(a2 + 40) = *(_WORD *)(a1 + 280) & 0x1FF;
  if ((v10 & 0x1000000000) == 0)
  {
LABEL_47:
    if ((v10 & 0x2000000000) == 0)
      goto LABEL_48;
    goto LABEL_141;
  }
LABEL_140:
  *(_WORD *)(a2 + 40) = *(_WORD *)(a1 + 288) & 0x1FF;
  if ((v10 & 0x2000000000) == 0)
  {
LABEL_48:
    if ((v10 & 0x4000000000) == 0)
      goto LABEL_50;
    goto LABEL_49;
  }
LABEL_141:
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 296) & 0x1FFFF;
  if ((v10 & 0x4000000000) != 0)
LABEL_49:
    *(_WORD *)(a2 + 40) = *(_WORD *)(a1 + 304) & 0x1FFF;
LABEL_50:
  v11 = v10;
  if ((v10 & 0x8000000000) != 0)
  {
    *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 312) & 0x7F;
    v11 = *(_QWORD *)(a1 + 1248);
  }
  if ((v11 & 0x10000000000) != 0)
    *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 320);
  v12 = v11;
  if ((v11 & 0x20000000000) != 0)
  {
    *(_BYTE *)(a2 + 44) = *(_BYTE *)(a1 + 328) & 0xF;
    v12 = *(_QWORD *)(a1 + 1248);
    if ((v12 & 0x40000000000) == 0)
    {
LABEL_56:
      if ((v12 & 0x80000000000) == 0)
        goto LABEL_57;
      goto LABEL_145;
    }
  }
  else if ((v11 & 0x40000000000) == 0)
  {
    goto LABEL_56;
  }
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 336);
  if ((v12 & 0x80000000000) == 0)
  {
LABEL_57:
    if ((v12 & 0x100000000000) == 0)
      goto LABEL_58;
    goto LABEL_146;
  }
LABEL_145:
  *(_DWORD *)(a2 + 52) = *(_QWORD *)(a1 + 344);
  if ((v12 & 0x100000000000) == 0)
  {
LABEL_58:
    if ((v12 & 0x200000000000) == 0)
      goto LABEL_59;
    goto LABEL_147;
  }
LABEL_146:
  *(_BYTE *)(a2 + 56) = *(_QWORD *)(a1 + 352) != 0;
  if ((v12 & 0x200000000000) == 0)
  {
LABEL_59:
    if ((v12 & 0x400000000000) == 0)
      goto LABEL_60;
    goto LABEL_148;
  }
LABEL_147:
  *(_DWORD *)(a2 + 60) = *(_QWORD *)(a1 + 360);
  if ((v12 & 0x400000000000) == 0)
  {
LABEL_60:
    if ((v12 & 0x800000000000) == 0)
      goto LABEL_61;
    goto LABEL_149;
  }
LABEL_148:
  *(_BYTE *)(a2 + 64) = *(_QWORD *)(a1 + 368) != 0;
  if ((v12 & 0x800000000000) == 0)
  {
LABEL_61:
    if ((v12 & 0x1000000000000) == 0)
      goto LABEL_62;
    goto LABEL_150;
  }
LABEL_149:
  *(_BYTE *)(a2 + 65) = *(_QWORD *)(a1 + 376) != 0;
  if ((v12 & 0x1000000000000) == 0)
  {
LABEL_62:
    if ((v12 & 0x2000000000000) == 0)
      goto LABEL_64;
    goto LABEL_63;
  }
LABEL_150:
  *(_BYTE *)(a2 + 66) = *(_QWORD *)(a1 + 384) != 0;
  if ((v12 & 0x2000000000000) != 0)
LABEL_63:
    *(_BYTE *)(a2 + 67) = *(_QWORD *)(a1 + 392) != 0;
LABEL_64:
  v13 = v12;
  if ((v12 & 0x4000000000000) != 0)
  {
    *(_BYTE *)(a2 + 68) = *(_BYTE *)(a1 + 400) & 1;
    v13 = *(_QWORD *)(a1 + 1248);
    if ((v13 & 0x8000000000000) == 0)
    {
LABEL_66:
      if ((v13 & 0x10000000000000) == 0)
        goto LABEL_67;
      goto LABEL_154;
    }
  }
  else if ((v12 & 0x8000000000000) == 0)
  {
    goto LABEL_66;
  }
  *(_WORD *)(a2 + 68) = *(_QWORD *)(a1 + 408);
  if ((v13 & 0x10000000000000) == 0)
  {
LABEL_67:
    if ((v13 & 0x20000000000000) == 0)
      goto LABEL_68;
    goto LABEL_155;
  }
LABEL_154:
  *(_WORD *)(a2 + 68) = *(_WORD *)(a1 + 416) & 0x1FF;
  if ((v13 & 0x20000000000000) == 0)
  {
LABEL_68:
    if ((v13 & 0x40000000000000) == 0)
      goto LABEL_69;
    goto LABEL_156;
  }
LABEL_155:
  *(_WORD *)(a2 + 68) = *(_WORD *)(a1 + 424) & 0x1FF;
  if ((v13 & 0x40000000000000) == 0)
  {
LABEL_69:
    if ((v13 & 0x80000000000000) == 0)
      goto LABEL_71;
    goto LABEL_70;
  }
LABEL_156:
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 432) & 0x1FFFF;
  if ((v13 & 0x80000000000000) != 0)
LABEL_70:
    *(_WORD *)(a2 + 68) = *(_WORD *)(a1 + 440) & 0x1FFF;
LABEL_71:
  v14 = v13;
  if ((v13 & 0x100000000000000) != 0)
  {
    *(_BYTE *)(a2 + 68) = *(_BYTE *)(a1 + 448) & 0x7F;
    v14 = *(_QWORD *)(a1 + 1248);
  }
  v41 = v7;
  if ((v14 & 0x200000000000000) != 0)
    *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 456);
  v15 = v14;
  if ((v14 & 0x400000000000000) != 0)
  {
    *(_BYTE *)(a2 + 72) = *(_BYTE *)(a1 + 464) & 0xF;
    v15 = *(_QWORD *)(a1 + 1248);
    if ((v15 & 0x800000000000000) == 0)
    {
LABEL_77:
      if ((v15 & 0x1000000000000000) == 0)
        goto LABEL_78;
      goto LABEL_160;
    }
  }
  else if ((v14 & 0x800000000000000) == 0)
  {
    goto LABEL_77;
  }
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 472);
  if ((v15 & 0x1000000000000000) == 0)
  {
LABEL_78:
    if ((v15 & 0x2000000000000000) == 0)
      goto LABEL_79;
    goto LABEL_161;
  }
LABEL_160:
  *(_DWORD *)(a2 + 80) = *(_QWORD *)(a1 + 480);
  if ((v15 & 0x2000000000000000) == 0)
  {
LABEL_79:
    if ((v15 & 0x4000000000000000) == 0)
      goto LABEL_80;
LABEL_162:
    *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 496);
    if ((v15 & 0x8000000000000000) == 0)
      goto LABEL_81;
    goto LABEL_163;
  }
LABEL_161:
  *(_BYTE *)(a2 + 84) = *(_QWORD *)(a1 + 488) != 0;
  if ((v15 & 0x4000000000000000) != 0)
    goto LABEL_162;
LABEL_80:
  if ((v15 & 0x8000000000000000) == 0)
    goto LABEL_81;
LABEL_163:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 504) != 0;
LABEL_81:
  v16 = *(_QWORD *)(a1 + 1256);
  if ((v16 & 1) != 0)
  {
    *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 512) != 0;
    if ((v16 & 2) == 0)
    {
LABEL_83:
      if ((v16 & 4) == 0)
        goto LABEL_84;
      goto LABEL_166;
    }
  }
  else if ((v16 & 2) == 0)
  {
    goto LABEL_83;
  }
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 520) != 0;
  if ((v16 & 4) == 0)
  {
LABEL_84:
    if ((v16 & 8) == 0)
      goto LABEL_86;
    goto LABEL_85;
  }
LABEL_166:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 528) != 0;
  if ((v16 & 8) != 0)
LABEL_85:
    *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 536) != 0;
LABEL_86:
  LODWORD(v17) = v16;
  if ((v16 & 0x10) != 0)
  {
    *(_BYTE *)(a2 + 97) = *(_BYTE *)(a1 + 544) & 0xF;
    v17 = *(_QWORD *)(a1 + 1256);
    if ((v17 & 0x20) == 0)
    {
LABEL_88:
      if ((v17 & 0x40) == 0)
        goto LABEL_89;
      goto LABEL_170;
    }
  }
  else if ((v16 & 0x20) == 0)
  {
    goto LABEL_88;
  }
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 552);
  if ((v17 & 0x40) == 0)
  {
LABEL_89:
    if ((v17 & 0x80) == 0)
      goto LABEL_90;
    goto LABEL_171;
  }
LABEL_170:
  *(_BYTE *)(a2 + 104) = *(_QWORD *)(a1 + 560) != 0;
  if ((v17 & 0x80) == 0)
  {
LABEL_90:
    if ((v17 & 0x100) == 0)
      goto LABEL_91;
    goto LABEL_172;
  }
LABEL_171:
  *(_BYTE *)(a2 + 105) = *(_QWORD *)(a1 + 568) != 0;
  if ((v17 & 0x100) == 0)
  {
LABEL_91:
    if ((v17 & 0x200) == 0)
      goto LABEL_92;
    goto LABEL_173;
  }
LABEL_172:
  *(_BYTE *)(a2 + 106) = *(_QWORD *)(a1 + 576) != 0;
  if ((v17 & 0x200) == 0)
  {
LABEL_92:
    if ((v17 & 0x400) == 0)
      goto LABEL_93;
    goto LABEL_174;
  }
LABEL_173:
  *(_BYTE *)(a2 + 107) = *(_QWORD *)(a1 + 584) != 0;
  if ((v17 & 0x400) == 0)
  {
LABEL_93:
    if ((v17 & 0x800) == 0)
      goto LABEL_94;
    goto LABEL_175;
  }
LABEL_174:
  *(_BYTE *)(a2 + 108) = *(_QWORD *)(a1 + 592) != 0;
  if ((v17 & 0x800) == 0)
  {
LABEL_94:
    if ((v17 & 0x1000) == 0)
      goto LABEL_95;
    goto LABEL_176;
  }
LABEL_175:
  *(_BYTE *)(a2 + 109) = *(_QWORD *)(a1 + 600) != 0;
  if ((v17 & 0x1000) == 0)
  {
LABEL_95:
    if ((v17 & 0x2000) == 0)
      goto LABEL_96;
    goto LABEL_177;
  }
LABEL_176:
  *(_BYTE *)(a2 + 110) = *(_QWORD *)(a1 + 608) != 0;
  if ((v17 & 0x2000) == 0)
  {
LABEL_96:
    if ((v17 & 0x4000) == 0)
      goto LABEL_97;
    goto LABEL_178;
  }
LABEL_177:
  *(_BYTE *)(a2 + 111) = *(_QWORD *)(a1 + 616) != 0;
  if ((v17 & 0x4000) == 0)
  {
LABEL_97:
    if ((v17 & 0x8000) == 0)
      goto LABEL_98;
    goto LABEL_179;
  }
LABEL_178:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 624);
  if ((v17 & 0x8000) == 0)
  {
LABEL_98:
    if ((v17 & 0x10000) == 0)
      goto LABEL_99;
    goto LABEL_180;
  }
LABEL_179:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 632);
  if ((v17 & 0x10000) == 0)
  {
LABEL_99:
    if ((v17 & 0x20000) == 0)
      goto LABEL_100;
    goto LABEL_181;
  }
LABEL_180:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 640);
  if ((v17 & 0x20000) == 0)
  {
LABEL_100:
    if ((v17 & 0x40000) == 0)
      goto LABEL_101;
    goto LABEL_182;
  }
LABEL_181:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 648);
  if ((v17 & 0x40000) == 0)
  {
LABEL_101:
    if ((v17 & 0x80000) == 0)
      goto LABEL_102;
    goto LABEL_183;
  }
LABEL_182:
  *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 656);
  if ((v17 & 0x80000) == 0)
  {
LABEL_102:
    if ((v17 & 0x100000) == 0)
      goto LABEL_104;
    goto LABEL_103;
  }
LABEL_183:
  *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 664);
  if ((v17 & 0x100000) != 0)
LABEL_103:
    *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 672);
LABEL_104:
  if ((v17 & 0x200000) != 0)
    *(_DWORD *)(a2 + 140) = *(_QWORD *)(a1 + 680);
  v38 = v14 & 0x200000000000000;
  v39 = v14 & 0x400000000000000;
  if ((v17 & 0x400000) != 0)
    *(_BYTE *)(a2 + 144) = *(_QWORD *)(a1 + 688) != 0;
  v19 = ((v2 & 2) >> 1)
      + (v2 & 1)
      + ((v3 & 4) >> 2)
      + ((v3 & 8) >> 3)
      + ((v3 & 0x10) >> 4)
      + ((v3 & 0x20) >> 5)
      + ((v3 & 0x40) >> 6)
      + ((unint64_t)(v3 & 0x80) >> 7)
      + ((v4 & 0x100) >> 8)
      + ((v4 & 0x200) >> 9)
      + ((v5 & 0x400) >> 10)
      + ((v5 & 0x800) >> 11)
      + ((v5 & 0x1000) >> 12)
      + ((v5 & 0x2000) >> 13)
      + ((v5 & 0x4000) >> 14)
      + ((unint64_t)((unsigned __int16)v5 & 0x8000) >> 15)
      + ((v6 & 0x10000) >> 16)
      + ((v6 & 0x20000) >> 17)
      + ((v6 & 0x40000) >> 18)
      + ((v6 & 0x80000) >> 19)
      + ((v6 & 0x100000) >> 20)
      + ((v6 & 0x200000) >> 21)
      + ((v41 & 0x400000u) >> 22)
      + ((v41 & 0x800000u) >> 23)
      + ((v8 & 0x1000000) >> 24)
      + ((v8 & 0x2000000) >> 25)
      + ((v8 & 0x4000000) >> 26)
      + ((v8 & 0x8000000) >> 27)
      + ((v8 & 0x10000000) >> 28);
  HIDWORD(v16) = BYTE4(v8) & 1;
  v18 = v8 & 0x40000000;
  v22 = v9 & 0x200000000;
  v23 = v10 & 0x400000000;
  v24 = v10 & 0x800000000;
  v25 = v10 & 0x1000000000;
  v26 = v10 & 0x2000000000;
  v27 = v10 & 0x4000000000;
  v28 = v10 & 0x8000000000;
  v29 = v11 & 0x10000000000;
  v30 = v11 & 0x20000000000;
  v31 = v12 & 0x40000000000;
  v32 = v12 & 0x80000000000;
  v33 = v12 & 0x100000000000;
  v34 = v12 & 0x200000000000;
  v35 = v12 & 0x400000000000;
  v36 = v12 & 0x800000000000;
  v37 = v12 & 0x1000000000000;
  v40 = v16 & 1;
  v20 = v19
      + ((v8 & 0x20000000) >> 29)
      + (v18 >> 30)
      + (v8 >> 31)
      + HIDWORD(v16)
      + (v22 >> 33)
      + (v23 >> 34)
      + (v24 >> 35)
      + (v25 >> 36)
      + (v26 >> 37)
      + (v27 >> 38)
      + (v28 >> 39)
      + (v29 >> 40)
      + (v30 >> 41)
      + (v31 >> 42)
      + (v32 >> 43)
      + (v33 >> 44)
      + (v34 >> 45)
      + (v35 >> 46)
      + (v36 >> 47)
      + HIWORD(v37)
      + ((v12 & 0x2000000000000) >> 49)
      + ((v12 & 0x4000000000000) >> 50)
      + ((v13 & 0x8000000000000) >> 51)
      + ((v13 & 0x10000000000000) >> 52)
      + ((v13 & 0x20000000000000) >> 53)
      + ((v13 & 0x40000000000000) >> 54)
      + ((v13 & 0x80000000000000) >> 55)
      + ((v13 & 0x100000000000000) >> 56)
      + (v38 >> 57)
      + (v39 >> 58)
      + (v15 >> 63)
      + ((v15 & 0x800000000000000) >> 59)
      + ((v15 & 0x1000000000000000) >> 60)
      + ((v15 & 0x2000000000000000) >> 61)
      + ((v15 & 0x4000000000000000) >> 62)
      + v40
      + ((unint64_t)(v16 & 2) >> 1)
      + ((unint64_t)(v16 & 4) >> 2)
      + ((unint64_t)(v16 & 8) >> 3);
  return v20
       + ((unint64_t)(v16 & 0x10) >> 4)
       + ((unint64_t)(v17 & 0x20) >> 5)
       + ((unint64_t)(v17 & 0x40) >> 6)
       + ((unint64_t)(v17 & 0x80) >> 7)
       + ((unint64_t)(v17 & 0x100) >> 8)
       + ((unint64_t)(v17 & 0x200) >> 9)
       + ((unint64_t)(v17 & 0x400) >> 10)
       + ((unint64_t)(v17 & 0x800) >> 11)
       + ((unint64_t)(v17 & 0x1000) >> 12)
       + ((unint64_t)(v17 & 0x2000) >> 13)
       + ((unint64_t)(v17 & 0x4000) >> 14)
       + ((unint64_t)((unsigned __int16)v17 & 0x8000) >> 15)
       + ((v17 & 0x10000uLL) >> 16)
       + ((v17 & 0x20000uLL) >> 17)
       + ((v17 & 0x40000uLL) >> 18)
       + ((v17 & 0x80000uLL) >> 19)
       + ((v17 & 0x100000uLL) >> 20)
       + ((v17 & 0x200000uLL) >> 21)
       + ((v17 & 0x400000uLL) >> 22);
}

unint64_t sub_1C4D3DFCC(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_90;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_91;
  }
LABEL_90:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_92;
  }
LABEL_91:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_92:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_96;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_97;
  }
LABEL_96:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_98;
  }
LABEL_97:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_99;
  }
LABEL_98:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_100;
  }
LABEL_99:
  *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
LABEL_100:
  *(_BYTE *)(a2 + 28) = *(_QWORD *)(a1 + 112) != 0;
  if ((v5 & 0x8000) != 0)
LABEL_20:
    *(_DWORD *)(a2 + 32) = *(_QWORD *)(a1 + 120);
LABEL_21:
  v6 = v5;
  if ((v5 & 0x10000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 128) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x20000) == 0)
    {
LABEL_23:
      if ((v6 & 0x40000) == 0)
        goto LABEL_24;
      goto LABEL_104;
    }
  }
  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_23;
  }
  *(_WORD *)(a2 + 36) = *(_QWORD *)(a1 + 136);
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_105;
  }
LABEL_104:
  *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 144) & 0x1FF;
  if ((v6 & 0x80000) == 0)
  {
LABEL_25:
    if ((v6 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_106;
  }
LABEL_105:
  *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 152) & 0x1FF;
  if ((v6 & 0x100000) == 0)
  {
LABEL_26:
    if ((v6 & 0x200000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_106:
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 160) & 0x1FFFF;
  if ((v6 & 0x200000) != 0)
LABEL_27:
    *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 168) & 0x1FFF;
LABEL_28:
  v7 = v6;
  if ((v6 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 176) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x800000) != 0)
    *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  v8 = v7;
  if ((v7 & 0x1000000) != 0)
  {
    *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 192) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x2000000) == 0)
    {
LABEL_34:
      if ((v8 & 0x4000000) == 0)
        goto LABEL_35;
      goto LABEL_110;
    }
  }
  else if ((v7 & 0x2000000) == 0)
  {
    goto LABEL_34;
  }
  *(_DWORD *)(a2 + 44) = *(_QWORD *)(a1 + 200);
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_111;
  }
LABEL_110:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_112;
  }
LABEL_111:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v8 & 0x20000000) == 0)
      goto LABEL_38;
    goto LABEL_113;
  }
LABEL_112:
  *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 224);
  if ((v8 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x40000000) == 0)
      goto LABEL_39;
    goto LABEL_114;
  }
LABEL_113:
  *(_BYTE *)(a2 + 60) = *(_QWORD *)(a1 + 232) != 0;
  if ((v8 & 0x40000000) == 0)
  {
LABEL_39:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_115;
  }
LABEL_114:
  *(_BYTE *)(a2 + 61) = *(_QWORD *)(a1 + 240) != 0;
  if ((v8 & 0x80000000) == 0)
  {
LABEL_40:
    if ((v8 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_41;
  }
LABEL_115:
  *(_BYTE *)(a2 + 62) = *(_QWORD *)(a1 + 248) != 0;
  if ((v8 & 0x100000000) != 0)
LABEL_41:
    *(_BYTE *)(a2 + 63) = *(_QWORD *)(a1 + 256) != 0;
LABEL_42:
  v9 = v8;
  if ((v8 & 0x200000000) != 0)
  {
    *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 264) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x400000000) == 0)
    {
LABEL_44:
      if ((v9 & 0x800000000) == 0)
        goto LABEL_45;
      goto LABEL_119;
    }
  }
  else if ((v8 & 0x400000000) == 0)
  {
    goto LABEL_44;
  }
  *(_WORD *)(a2 + 64) = *(_QWORD *)(a1 + 272);
  if ((v9 & 0x800000000) == 0)
  {
LABEL_45:
    if ((v9 & 0x1000000000) == 0)
      goto LABEL_46;
    goto LABEL_120;
  }
LABEL_119:
  *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 280) & 0x1FF;
  if ((v9 & 0x1000000000) == 0)
  {
LABEL_46:
    if ((v9 & 0x2000000000) == 0)
      goto LABEL_47;
    goto LABEL_121;
  }
LABEL_120:
  *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 288) & 0x1FF;
  if ((v9 & 0x2000000000) == 0)
  {
LABEL_47:
    if ((v9 & 0x4000000000) == 0)
      goto LABEL_49;
    goto LABEL_48;
  }
LABEL_121:
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 296) & 0x1FFFF;
  if ((v9 & 0x4000000000) != 0)
LABEL_48:
    *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 304) & 0x1FFF;
LABEL_49:
  v10 = v9;
  if ((v9 & 0x8000000000) != 0)
  {
    *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 312) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x10000000000) != 0)
    *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 320);
  v11 = v10;
  if ((v10 & 0x20000000000) != 0)
  {
    *(_BYTE *)(a2 + 68) = *(_BYTE *)(a1 + 328) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x40000000000) == 0)
    {
LABEL_55:
      if ((v11 & 0x80000000000) == 0)
        goto LABEL_56;
      goto LABEL_125;
    }
  }
  else if ((v10 & 0x40000000000) == 0)
  {
    goto LABEL_55;
  }
  *(_DWORD *)(a2 + 72) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_126;
  }
LABEL_125:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_127;
  }
LABEL_126:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 360);
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_129;
  }
LABEL_128:
  *(_BYTE *)(a2 + 88) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_130;
  }
LABEL_129:
  *(_BYTE *)(a2 + 89) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_131;
  }
LABEL_130:
  *(_BYTE *)(a2 + 90) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_64;
    goto LABEL_63;
  }
LABEL_131:
  *(_BYTE *)(a2 + 91) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) != 0)
LABEL_63:
    *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 400) != 0;
LABEL_64:
  v12 = v11;
  if ((v11 & 0x8000000000000) != 0)
  {
    *(_BYTE *)(a2 + 93) = *(_BYTE *)(a1 + 408) & 0xF;
    v12 = *(_QWORD *)(a1 + 1248);
    if ((v12 & 0x10000000000000) == 0)
    {
LABEL_66:
      if ((v12 & 0x20000000000000) == 0)
        goto LABEL_67;
      goto LABEL_135;
    }
  }
  else if ((v11 & 0x10000000000000) == 0)
  {
    goto LABEL_66;
  }
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 416);
  if ((v12 & 0x20000000000000) == 0)
  {
LABEL_67:
    if ((v12 & 0x40000000000000) == 0)
      goto LABEL_68;
    goto LABEL_136;
  }
LABEL_135:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 424);
  if ((v12 & 0x40000000000000) == 0)
  {
LABEL_68:
    if ((v12 & 0x80000000000000) == 0)
      goto LABEL_69;
    goto LABEL_137;
  }
LABEL_136:
  *(_BYTE *)(a2 + 104) = *(_QWORD *)(a1 + 432) != 0;
  if ((v12 & 0x80000000000000) == 0)
  {
LABEL_69:
    if ((v12 & 0x100000000000000) == 0)
      goto LABEL_70;
    goto LABEL_138;
  }
LABEL_137:
  *(_BYTE *)(a2 + 105) = *(_QWORD *)(a1 + 440) != 0;
  if ((v12 & 0x100000000000000) == 0)
  {
LABEL_70:
    if ((v12 & 0x200000000000000) == 0)
      goto LABEL_71;
    goto LABEL_139;
  }
LABEL_138:
  *(_BYTE *)(a2 + 106) = *(_QWORD *)(a1 + 448) != 0;
  if ((v12 & 0x200000000000000) == 0)
  {
LABEL_71:
    if ((v12 & 0x400000000000000) == 0)
      goto LABEL_72;
    goto LABEL_140;
  }
LABEL_139:
  *(_BYTE *)(a2 + 107) = *(_QWORD *)(a1 + 456) != 0;
  if ((v12 & 0x400000000000000) == 0)
  {
LABEL_72:
    if ((v12 & 0x800000000000000) == 0)
      goto LABEL_73;
    goto LABEL_141;
  }
LABEL_140:
  *(_BYTE *)(a2 + 108) = *(_QWORD *)(a1 + 464) != 0;
  if ((v12 & 0x800000000000000) == 0)
  {
LABEL_73:
    if ((v12 & 0x1000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_142;
  }
LABEL_141:
  *(_BYTE *)(a2 + 109) = *(_QWORD *)(a1 + 472) != 0;
  if ((v12 & 0x1000000000000000) == 0)
  {
LABEL_74:
    if ((v12 & 0x2000000000000000) == 0)
      goto LABEL_75;
    goto LABEL_143;
  }
LABEL_142:
  *(_BYTE *)(a2 + 110) = *(_QWORD *)(a1 + 480) != 0;
  if ((v12 & 0x2000000000000000) == 0)
  {
LABEL_75:
    if ((v12 & 0x4000000000000000) == 0)
      goto LABEL_76;
LABEL_144:
    *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 496);
    if ((v12 & 0x8000000000000000) == 0)
      goto LABEL_77;
    goto LABEL_145;
  }
LABEL_143:
  *(_BYTE *)(a2 + 111) = *(_QWORD *)(a1 + 488) != 0;
  if ((v12 & 0x4000000000000000) != 0)
    goto LABEL_144;
LABEL_76:
  if ((v12 & 0x8000000000000000) == 0)
    goto LABEL_77;
LABEL_145:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 504);
LABEL_77:
  v13 = *(_QWORD *)(a1 + 1256);
  if ((v13 & 1) != 0)
  {
    *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 512);
    if ((v13 & 2) == 0)
    {
LABEL_79:
      if ((v13 & 4) == 0)
        goto LABEL_80;
      goto LABEL_148;
    }
  }
  else if ((v13 & 2) == 0)
  {
    goto LABEL_79;
  }
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 520);
  if ((v13 & 4) == 0)
  {
LABEL_80:
    if ((v13 & 8) == 0)
      goto LABEL_81;
    goto LABEL_149;
  }
LABEL_148:
  *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 528);
  if ((v13 & 8) == 0)
  {
LABEL_81:
    if ((v13 & 0x10) == 0)
      goto LABEL_83;
    goto LABEL_82;
  }
LABEL_149:
  *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 536);
  if ((v13 & 0x10) != 0)
LABEL_82:
    *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 544);
LABEL_83:
  if ((v13 & 0x20) != 0)
    *(_DWORD *)(a2 + 140) = *(_QWORD *)(a1 + 552);
  if ((v13 & 0x40) != 0)
    *(_BYTE *)(a2 + 144) = *(_QWORD *)(a1 + 560) != 0;
  v14 = ((v3 & 2) >> 1)
      + (v2 & 1)
      + ((v3 & 4) >> 2)
      + ((v3 & 8) >> 3)
      + ((v3 & 0x10) >> 4)
      + ((v3 & 0x20) >> 5)
      + ((v3 & 0x40) >> 6)
      + ((unint64_t)(v4 & 0x80) >> 7)
      + ((v4 & 0x100) >> 8)
      + ((v5 & 0x200) >> 9)
      + ((v5 & 0x400) >> 10)
      + ((v5 & 0x800) >> 11)
      + ((v5 & 0x1000) >> 12)
      + ((v5 & 0x2000) >> 13)
      + ((v5 & 0x4000) >> 14)
      + ((unint64_t)((unsigned __int16)v5 & 0x8000) >> 15)
      + ((v5 & 0x10000) >> 16)
      + ((v6 & 0x20000) >> 17)
      + ((v6 & 0x40000) >> 18)
      + ((v6 & 0x80000) >> 19)
      + ((v6 & 0x100000) >> 20)
      + ((v6 & 0x200000) >> 21)
      + ((v6 & 0x400000) >> 22)
      + ((v7 & 0x800000) >> 23)
      + ((v7 & 0x1000000) >> 24)
      + ((v8 & 0x2000000) >> 25)
      + ((v8 & 0x4000000) >> 26)
      + ((v8 & 0x8000000) >> 27)
      + ((v8 & 0x10000000) >> 28)
      + ((v8 & 0x20000000) >> 29)
      + ((v8 & 0x40000000) >> 30);
  v17 = v8 & 0x200000000;
  v18 = v9 & 0x400000000;
  v19 = v9 & 0x800000000;
  v20 = v9 & 0x1000000000;
  v21 = v9 & 0x2000000000;
  v22 = v9 & 0x4000000000;
  v23 = v9 & 0x8000000000;
  v24 = v10 & 0x10000000000;
  v25 = v10 & 0x20000000000;
  v26 = v11 & 0x40000000000;
  v27 = v11 & 0x80000000000;
  v28 = v11 & 0x100000000000;
  v29 = v11 & 0x200000000000;
  v30 = v11 & 0x400000000000;
  v31 = v11 & 0x800000000000;
  v32 = v11 & 0x1000000000000;
  v33 = v11 & 0x2000000000000;
  v34 = v11 & 0x4000000000000;
  v35 = v11 & 0x8000000000000;
  v36 = v12 & 0x10000000000000;
  v37 = v12 & 0x20000000000000;
  v38 = v12 & 0x80000000000000;
  v39 = v12 & 0x40000000000000;
  v40 = v12 & 0x100000000000000;
  v16 = BYTE4(v8) & 1;
  v41 = v13 & 1;
  return v14
       + (v8 >> 31)
       + v16
       + (v17 >> 33)
       + (v18 >> 34)
       + (v19 >> 35)
       + (v20 >> 36)
       + (v21 >> 37)
       + (v22 >> 38)
       + (v23 >> 39)
       + (v24 >> 40)
       + (v25 >> 41)
       + (v26 >> 42)
       + (v27 >> 43)
       + (v28 >> 44)
       + (v29 >> 45)
       + (v30 >> 46)
       + (v31 >> 47)
       + HIWORD(v32)
       + (v33 >> 49)
       + (v34 >> 50)
       + (v35 >> 51)
       + (v12 >> 63)
       + (v36 >> 52)
       + (v37 >> 53)
       + (v39 >> 54)
       + (v38 >> 55)
       + HIBYTE(v40)
       + ((v12 & 0x200000000000000) >> 57)
       + ((v12 & 0x400000000000000) >> 58)
       + ((v12 & 0x800000000000000) >> 59)
       + ((v12 & 0x1000000000000000) >> 60)
       + ((v12 & 0x2000000000000000) >> 61)
       + ((v12 & 0x4000000000000000) >> 62)
       + v41
       + ((unint64_t)(v13 & 2) >> 1)
       + ((unint64_t)(v13 & 4) >> 2)
       + ((unint64_t)(v13 & 8) >> 3)
       + ((unint64_t)(v13 & 0x10) >> 4)
       + ((unint64_t)(v13 & 0x20) >> 5)
       + ((unint64_t)(v13 & 0x40) >> 6);
}

unint64_t sub_1C4D3EA30(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_90;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_91;
  }
LABEL_90:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_92;
  }
LABEL_91:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_92:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_96;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_97;
  }
LABEL_96:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_98;
  }
LABEL_97:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_99;
  }
LABEL_98:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_100;
  }
LABEL_99:
  *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
LABEL_100:
  *(_BYTE *)(a2 + 28) = *(_QWORD *)(a1 + 112) != 0;
  if ((v5 & 0x8000) != 0)
LABEL_20:
    *(_DWORD *)(a2 + 32) = *(_QWORD *)(a1 + 120);
LABEL_21:
  v6 = v5;
  if ((v5 & 0x10000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 128) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x20000) == 0)
    {
LABEL_23:
      if ((v6 & 0x40000) == 0)
        goto LABEL_24;
      goto LABEL_104;
    }
  }
  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_23;
  }
  *(_WORD *)(a2 + 36) = *(_QWORD *)(a1 + 136);
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_105;
  }
LABEL_104:
  *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 144) & 0x1FF;
  if ((v6 & 0x80000) == 0)
  {
LABEL_25:
    if ((v6 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_106;
  }
LABEL_105:
  *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 152) & 0x1FF;
  if ((v6 & 0x100000) == 0)
  {
LABEL_26:
    if ((v6 & 0x200000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_106:
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 160) & 0x1FFFF;
  if ((v6 & 0x200000) != 0)
LABEL_27:
    *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 168) & 0x1FFF;
LABEL_28:
  v7 = v6;
  if ((v6 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 176) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x800000) != 0)
    *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  v8 = v7;
  if ((v7 & 0x1000000) != 0)
  {
    *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 192) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x2000000) == 0)
    {
LABEL_34:
      if ((v8 & 0x4000000) == 0)
        goto LABEL_35;
      goto LABEL_110;
    }
  }
  else if ((v7 & 0x2000000) == 0)
  {
    goto LABEL_34;
  }
  *(_DWORD *)(a2 + 44) = *(_QWORD *)(a1 + 200);
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_111;
  }
LABEL_110:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_112;
  }
LABEL_111:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v8 & 0x20000000) == 0)
      goto LABEL_38;
    goto LABEL_113;
  }
LABEL_112:
  *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 224);
  if ((v8 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x40000000) == 0)
      goto LABEL_39;
    goto LABEL_114;
  }
LABEL_113:
  *(_BYTE *)(a2 + 60) = *(_QWORD *)(a1 + 232) != 0;
  if ((v8 & 0x40000000) == 0)
  {
LABEL_39:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_115;
  }
LABEL_114:
  *(_BYTE *)(a2 + 61) = *(_QWORD *)(a1 + 240) != 0;
  if ((v8 & 0x80000000) == 0)
  {
LABEL_40:
    if ((v8 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_41;
  }
LABEL_115:
  *(_BYTE *)(a2 + 62) = *(_QWORD *)(a1 + 248) != 0;
  if ((v8 & 0x100000000) != 0)
LABEL_41:
    *(_BYTE *)(a2 + 63) = *(_QWORD *)(a1 + 256) != 0;
LABEL_42:
  v9 = v8;
  if ((v8 & 0x200000000) != 0)
  {
    *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 264) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x400000000) == 0)
    {
LABEL_44:
      if ((v9 & 0x800000000) == 0)
        goto LABEL_45;
      goto LABEL_119;
    }
  }
  else if ((v8 & 0x400000000) == 0)
  {
    goto LABEL_44;
  }
  *(_WORD *)(a2 + 64) = *(_QWORD *)(a1 + 272);
  if ((v9 & 0x800000000) == 0)
  {
LABEL_45:
    if ((v9 & 0x1000000000) == 0)
      goto LABEL_46;
    goto LABEL_120;
  }
LABEL_119:
  *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 280) & 0x1FF;
  if ((v9 & 0x1000000000) == 0)
  {
LABEL_46:
    if ((v9 & 0x2000000000) == 0)
      goto LABEL_47;
    goto LABEL_121;
  }
LABEL_120:
  *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 288) & 0x1FF;
  if ((v9 & 0x2000000000) == 0)
  {
LABEL_47:
    if ((v9 & 0x4000000000) == 0)
      goto LABEL_49;
    goto LABEL_48;
  }
LABEL_121:
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 296) & 0x1FFFF;
  if ((v9 & 0x4000000000) != 0)
LABEL_48:
    *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 304) & 0x1FFF;
LABEL_49:
  v10 = v9;
  if ((v9 & 0x8000000000) != 0)
  {
    *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 312) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x10000000000) != 0)
    *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 320);
  v11 = v10;
  if ((v10 & 0x20000000000) != 0)
  {
    *(_BYTE *)(a2 + 68) = *(_BYTE *)(a1 + 328) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x40000000000) == 0)
    {
LABEL_55:
      if ((v11 & 0x80000000000) == 0)
        goto LABEL_56;
      goto LABEL_125;
    }
  }
  else if ((v10 & 0x40000000000) == 0)
  {
    goto LABEL_55;
  }
  *(_DWORD *)(a2 + 72) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_126;
  }
LABEL_125:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_127;
  }
LABEL_126:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 360);
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_129;
  }
LABEL_128:
  *(_BYTE *)(a2 + 88) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_130;
  }
LABEL_129:
  *(_BYTE *)(a2 + 89) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_131;
  }
LABEL_130:
  *(_BYTE *)(a2 + 90) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_64;
    goto LABEL_63;
  }
LABEL_131:
  *(_BYTE *)(a2 + 91) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) != 0)
LABEL_63:
    *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 400) != 0;
LABEL_64:
  v12 = v11;
  if ((v11 & 0x8000000000000) != 0)
  {
    *(_BYTE *)(a2 + 93) = *(_BYTE *)(a1 + 408) & 0xF;
    v12 = *(_QWORD *)(a1 + 1248);
    if ((v12 & 0x10000000000000) == 0)
    {
LABEL_66:
      if ((v12 & 0x20000000000000) == 0)
        goto LABEL_67;
      goto LABEL_135;
    }
  }
  else if ((v11 & 0x10000000000000) == 0)
  {
    goto LABEL_66;
  }
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 416);
  if ((v12 & 0x20000000000000) == 0)
  {
LABEL_67:
    if ((v12 & 0x40000000000000) == 0)
      goto LABEL_68;
    goto LABEL_136;
  }
LABEL_135:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 424);
  if ((v12 & 0x40000000000000) == 0)
  {
LABEL_68:
    if ((v12 & 0x80000000000000) == 0)
      goto LABEL_69;
    goto LABEL_137;
  }
LABEL_136:
  *(_BYTE *)(a2 + 104) = *(_QWORD *)(a1 + 432) != 0;
  if ((v12 & 0x80000000000000) == 0)
  {
LABEL_69:
    if ((v12 & 0x100000000000000) == 0)
      goto LABEL_70;
    goto LABEL_138;
  }
LABEL_137:
  *(_BYTE *)(a2 + 105) = *(_QWORD *)(a1 + 440) != 0;
  if ((v12 & 0x100000000000000) == 0)
  {
LABEL_70:
    if ((v12 & 0x200000000000000) == 0)
      goto LABEL_71;
    goto LABEL_139;
  }
LABEL_138:
  *(_BYTE *)(a2 + 106) = *(_QWORD *)(a1 + 448) != 0;
  if ((v12 & 0x200000000000000) == 0)
  {
LABEL_71:
    if ((v12 & 0x400000000000000) == 0)
      goto LABEL_72;
    goto LABEL_140;
  }
LABEL_139:
  *(_BYTE *)(a2 + 107) = *(_QWORD *)(a1 + 456) != 0;
  if ((v12 & 0x400000000000000) == 0)
  {
LABEL_72:
    if ((v12 & 0x800000000000000) == 0)
      goto LABEL_73;
    goto LABEL_141;
  }
LABEL_140:
  *(_BYTE *)(a2 + 108) = *(_QWORD *)(a1 + 464) != 0;
  if ((v12 & 0x800000000000000) == 0)
  {
LABEL_73:
    if ((v12 & 0x1000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_142;
  }
LABEL_141:
  *(_BYTE *)(a2 + 109) = *(_QWORD *)(a1 + 472) != 0;
  if ((v12 & 0x1000000000000000) == 0)
  {
LABEL_74:
    if ((v12 & 0x2000000000000000) == 0)
      goto LABEL_75;
    goto LABEL_143;
  }
LABEL_142:
  *(_BYTE *)(a2 + 110) = *(_QWORD *)(a1 + 480) != 0;
  if ((v12 & 0x2000000000000000) == 0)
  {
LABEL_75:
    if ((v12 & 0x4000000000000000) == 0)
      goto LABEL_76;
LABEL_144:
    *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 496);
    if ((v12 & 0x8000000000000000) == 0)
      goto LABEL_77;
    goto LABEL_145;
  }
LABEL_143:
  *(_BYTE *)(a2 + 111) = *(_QWORD *)(a1 + 488) != 0;
  if ((v12 & 0x4000000000000000) != 0)
    goto LABEL_144;
LABEL_76:
  if ((v12 & 0x8000000000000000) == 0)
    goto LABEL_77;
LABEL_145:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 504);
LABEL_77:
  v13 = *(_QWORD *)(a1 + 1256);
  if ((v13 & 1) != 0)
  {
    *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 512);
    if ((v13 & 2) == 0)
    {
LABEL_79:
      if ((v13 & 4) == 0)
        goto LABEL_80;
      goto LABEL_148;
    }
  }
  else if ((v13 & 2) == 0)
  {
    goto LABEL_79;
  }
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 520);
  if ((v13 & 4) == 0)
  {
LABEL_80:
    if ((v13 & 8) == 0)
      goto LABEL_81;
    goto LABEL_149;
  }
LABEL_148:
  *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 528);
  if ((v13 & 8) == 0)
  {
LABEL_81:
    if ((v13 & 0x10) == 0)
      goto LABEL_83;
    goto LABEL_82;
  }
LABEL_149:
  *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 536);
  if ((v13 & 0x10) != 0)
LABEL_82:
    *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 544);
LABEL_83:
  if ((v13 & 0x20) != 0)
    *(_DWORD *)(a2 + 140) = *(_QWORD *)(a1 + 552);
  if ((v13 & 0x40) != 0)
    *(_BYTE *)(a2 + 144) = *(_QWORD *)(a1 + 560) != 0;
  v14 = ((v3 & 2) >> 1)
      + (v2 & 1)
      + ((v3 & 4) >> 2)
      + ((v3 & 8) >> 3)
      + ((v3 & 0x10) >> 4)
      + ((v3 & 0x20) >> 5)
      + ((v3 & 0x40) >> 6)
      + ((unint64_t)(v4 & 0x80) >> 7)
      + ((v4 & 0x100) >> 8)
      + ((v5 & 0x200) >> 9)
      + ((v5 & 0x400) >> 10)
      + ((v5 & 0x800) >> 11)
      + ((v5 & 0x1000) >> 12)
      + ((v5 & 0x2000) >> 13)
      + ((v5 & 0x4000) >> 14)
      + ((unint64_t)((unsigned __int16)v5 & 0x8000) >> 15)
      + ((v5 & 0x10000) >> 16)
      + ((v6 & 0x20000) >> 17)
      + ((v6 & 0x40000) >> 18)
      + ((v6 & 0x80000) >> 19)
      + ((v6 & 0x100000) >> 20)
      + ((v6 & 0x200000) >> 21)
      + ((v6 & 0x400000) >> 22)
      + ((v7 & 0x800000) >> 23)
      + ((v7 & 0x1000000) >> 24)
      + ((v8 & 0x2000000) >> 25)
      + ((v8 & 0x4000000) >> 26)
      + ((v8 & 0x8000000) >> 27)
      + ((v8 & 0x10000000) >> 28)
      + ((v8 & 0x20000000) >> 29)
      + ((v8 & 0x40000000) >> 30);
  v17 = v8 & 0x200000000;
  v18 = v9 & 0x400000000;
  v19 = v9 & 0x800000000;
  v20 = v9 & 0x1000000000;
  v21 = v9 & 0x2000000000;
  v22 = v9 & 0x4000000000;
  v23 = v9 & 0x8000000000;
  v24 = v10 & 0x10000000000;
  v25 = v10 & 0x20000000000;
  v26 = v11 & 0x40000000000;
  v27 = v11 & 0x80000000000;
  v28 = v11 & 0x100000000000;
  v29 = v11 & 0x200000000000;
  v30 = v11 & 0x400000000000;
  v31 = v11 & 0x800000000000;
  v32 = v11 & 0x1000000000000;
  v33 = v11 & 0x2000000000000;
  v34 = v11 & 0x4000000000000;
  v35 = v11 & 0x8000000000000;
  v36 = v12 & 0x10000000000000;
  v37 = v12 & 0x20000000000000;
  v38 = v12 & 0x80000000000000;
  v39 = v12 & 0x40000000000000;
  v40 = v12 & 0x100000000000000;
  v16 = BYTE4(v8) & 1;
  v41 = v13 & 1;
  return v14
       + (v8 >> 31)
       + v16
       + (v17 >> 33)
       + (v18 >> 34)
       + (v19 >> 35)
       + (v20 >> 36)
       + (v21 >> 37)
       + (v22 >> 38)
       + (v23 >> 39)
       + (v24 >> 40)
       + (v25 >> 41)
       + (v26 >> 42)
       + (v27 >> 43)
       + (v28 >> 44)
       + (v29 >> 45)
       + (v30 >> 46)
       + (v31 >> 47)
       + HIWORD(v32)
       + (v33 >> 49)
       + (v34 >> 50)
       + (v35 >> 51)
       + (v12 >> 63)
       + (v36 >> 52)
       + (v37 >> 53)
       + (v39 >> 54)
       + (v38 >> 55)
       + HIBYTE(v40)
       + ((v12 & 0x200000000000000) >> 57)
       + ((v12 & 0x400000000000000) >> 58)
       + ((v12 & 0x800000000000000) >> 59)
       + ((v12 & 0x1000000000000000) >> 60)
       + ((v12 & 0x2000000000000000) >> 61)
       + ((v12 & 0x4000000000000000) >> 62)
       + v41
       + ((unint64_t)(v13 & 2) >> 1)
       + ((unint64_t)(v13 & 4) >> 2)
       + ((unint64_t)(v13 & 8) >> 3)
       + ((unint64_t)(v13 & 0x10) >> 4)
       + ((unint64_t)(v13 & 0x20) >> 5)
       + ((unint64_t)(v13 & 0x40) >> 6);
}

unint64_t sub_1C4D3F494(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_82;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_83;
  }
LABEL_82:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_84;
  }
LABEL_83:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_84:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_88;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_89;
  }
LABEL_88:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_90;
  }
LABEL_89:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_90:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_94;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_95;
  }
LABEL_94:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_96;
  }
LABEL_95:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_96:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_100;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_101;
  }
LABEL_100:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_102;
  }
LABEL_101:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_102:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) != 0)
LABEL_36:
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
LABEL_37:
  v9 = v8;
  if ((v8 & 0x10000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 224) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_39:
      if ((v9 & 0x40000000) == 0)
        goto LABEL_40;
      goto LABEL_106;
    }
  }
  else if ((v8 & 0x20000000) == 0)
  {
    goto LABEL_39;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 232);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_40:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_107;
  }
LABEL_106:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 240) & 0x1FF;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_108;
  }
LABEL_107:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_108:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 256) & 0x1FFFF;
  if ((v9 & 0x200000000) != 0)
LABEL_43:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 264) & 0x1FFF;
LABEL_44:
  v10 = v9;
  if ((v9 & 0x400000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 272) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x800000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 280);
  v11 = v10;
  if ((v10 & 0x1000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 288) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x2000000000) == 0)
    {
LABEL_50:
      if ((v11 & 0x4000000000) == 0)
        goto LABEL_51;
      goto LABEL_112;
    }
  }
  else if ((v10 & 0x2000000000) == 0)
  {
    goto LABEL_50;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 296);
  if ((v11 & 0x4000000000) == 0)
  {
LABEL_51:
    if ((v11 & 0x8000000000) == 0)
      goto LABEL_52;
    goto LABEL_113;
  }
LABEL_112:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_114;
  }
LABEL_113:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 312) != 0;
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_115;
  }
LABEL_114:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 320);
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_56;
    goto LABEL_55;
  }
LABEL_115:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 328) != 0;
  if ((v11 & 0x40000000000) != 0)
LABEL_55:
    *(_BYTE *)(a2 + 84) = *(_QWORD *)(a1 + 336) != 0;
LABEL_56:
  v12 = v11;
  if ((v11 & 0x80000000000) != 0)
  {
    *(_BYTE *)(a2 + 85) = *(_BYTE *)(a1 + 344) & 0xF;
    v12 = *(_QWORD *)(a1 + 1248);
    if ((v12 & 0x100000000000) == 0)
    {
LABEL_58:
      if ((v12 & 0x200000000000) == 0)
        goto LABEL_59;
      goto LABEL_119;
    }
  }
  else if ((v11 & 0x100000000000) == 0)
  {
    goto LABEL_58;
  }
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 352);
  if ((v12 & 0x200000000000) == 0)
  {
LABEL_59:
    if ((v12 & 0x400000000000) == 0)
      goto LABEL_60;
    goto LABEL_120;
  }
LABEL_119:
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 360);
  if ((v12 & 0x400000000000) == 0)
  {
LABEL_60:
    if ((v12 & 0x800000000000) == 0)
      goto LABEL_61;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 368) != 0;
  if ((v12 & 0x800000000000) == 0)
  {
LABEL_61:
    if ((v12 & 0x1000000000000) == 0)
      goto LABEL_62;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 376) != 0;
  if ((v12 & 0x1000000000000) == 0)
  {
LABEL_62:
    if ((v12 & 0x2000000000000) == 0)
      goto LABEL_63;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 384) != 0;
  if ((v12 & 0x2000000000000) == 0)
  {
LABEL_63:
    if ((v12 & 0x4000000000000) == 0)
      goto LABEL_64;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 392) != 0;
  if ((v12 & 0x4000000000000) == 0)
  {
LABEL_64:
    if ((v12 & 0x8000000000000) == 0)
      goto LABEL_65;
    goto LABEL_125;
  }
LABEL_124:
  *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 400) != 0;
  if ((v12 & 0x8000000000000) == 0)
  {
LABEL_65:
    if ((v12 & 0x10000000000000) == 0)
      goto LABEL_66;
    goto LABEL_126;
  }
LABEL_125:
  *(_BYTE *)(a2 + 101) = *(_QWORD *)(a1 + 408) != 0;
  if ((v12 & 0x10000000000000) == 0)
  {
LABEL_66:
    if ((v12 & 0x20000000000000) == 0)
      goto LABEL_67;
    goto LABEL_127;
  }
LABEL_126:
  *(_BYTE *)(a2 + 102) = *(_QWORD *)(a1 + 416) != 0;
  if ((v12 & 0x20000000000000) == 0)
  {
LABEL_67:
    if ((v12 & 0x40000000000000) == 0)
      goto LABEL_68;
    goto LABEL_128;
  }
LABEL_127:
  *(_BYTE *)(a2 + 103) = *(_QWORD *)(a1 + 424) != 0;
  if ((v12 & 0x40000000000000) == 0)
  {
LABEL_68:
    if ((v12 & 0x80000000000000) == 0)
      goto LABEL_69;
    goto LABEL_129;
  }
LABEL_128:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 432);
  if ((v12 & 0x80000000000000) == 0)
  {
LABEL_69:
    if ((v12 & 0x100000000000000) == 0)
      goto LABEL_70;
    goto LABEL_130;
  }
LABEL_129:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 440);
  if ((v12 & 0x100000000000000) == 0)
  {
LABEL_70:
    if ((v12 & 0x200000000000000) == 0)
      goto LABEL_71;
    goto LABEL_131;
  }
LABEL_130:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 448);
  if ((v12 & 0x200000000000000) == 0)
  {
LABEL_71:
    if ((v12 & 0x400000000000000) == 0)
      goto LABEL_72;
    goto LABEL_132;
  }
LABEL_131:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 456);
  if ((v12 & 0x400000000000000) == 0)
  {
LABEL_72:
    if ((v12 & 0x800000000000000) == 0)
      goto LABEL_73;
    goto LABEL_133;
  }
LABEL_132:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 464);
  if ((v12 & 0x800000000000000) == 0)
  {
LABEL_73:
    if ((v12 & 0x1000000000000000) == 0)
      goto LABEL_75;
    goto LABEL_74;
  }
LABEL_133:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 472);
  if ((v12 & 0x1000000000000000) != 0)
LABEL_74:
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 480);
LABEL_75:
  v13 = v2 & 1;
  if ((v12 & 0x2000000000000000) != 0)
    *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 488);
  v14 = v3 & 2;
  v15 = v3 & 4;
  v16 = v3 & 8;
  v17 = v3 & 0x10;
  v18 = v3 & 0x20;
  v19 = v3 & 0x40;
  v20 = v4 & 0x80;
  v21 = v4 & 0x100;
  v22 = v5 & 0x200;
  v23 = v5 & 0x400;
  v24 = v5 & 0x800;
  v25 = v5 & 0x1000;
  v26 = v5 & 0x2000;
  v27 = v5 & 0x4000;
  if ((v12 & 0x4000000000000000) != 0)
    *(_BYTE *)(a2 + 136) = *(_QWORD *)(a1 + 496) != 0;
  v32 = v6 & 0x80000;
  v31 = v6 & 0x40000;
  v30 = v6 & 0x20000;
  v29 = v6 & 0x10000;
  v28 = (unsigned __int16)v6 & 0x8000;
  v35 = v6 & 0x100000;
  v36 = v7 & 0x200000;
  v37 = v7 & 0x400000;
  v38 = v8 & 0x800000;
  v39 = v8 & 0x1000000;
  v40 = v8 & 0x2000000;
  v41 = v8 & 0x4000000;
  v42 = v8 & 0x8000000;
  v43 = v9 & 0x400000000;
  v44 = v8 & 0x10000000;
  v45 = v10 & 0x800000000;
  v46 = v10 & 0x1000000000;
  v47 = v11 & 0x2000000000;
  v48 = v11 & 0x4000000000;
  v49 = v11 & 0x8000000000;
  v50 = v11 & 0x10000000000;
  v33 = (v14 >> 1)
      + v13
      + (v15 >> 2)
      + (v16 >> 3)
      + (v17 >> 4)
      + (v18 >> 5)
      + (v19 >> 6)
      + (v20 >> 7)
      + (v21 >> 8)
      + (v22 >> 9)
      + (v23 >> 10)
      + (v24 >> 11)
      + (v25 >> 12)
      + (v26 >> 13)
      + (v27 >> 14)
      + (v28 >> 15)
      + (v29 >> 16)
      + (v30 >> 17)
      + (v31 >> 18)
      + (v32 >> 19)
      + (v35 >> 20)
      + (v36 >> 21)
      + (v37 >> 22)
      + (v38 >> 23)
      + (v39 >> 24)
      + (v40 >> 25)
      + (v41 >> 26)
      + (v42 >> 27)
      + (v44 >> 28)
      + ((v9 & 0x20000000) >> 29)
      + ((v9 & 0x40000000) >> 30)
      + (v9 >> 31)
      + (BYTE4(v9) & 1)
      + ((v9 & 0x200000000uLL) >> 33)
      + (v43 >> 34)
      + (v45 >> 35)
      + (v46 >> 36)
      + (v47 >> 37)
      + (v48 >> 38)
      + (v49 >> 39)
      + (v50 >> 40)
      + ((v11 & 0x20000000000uLL) >> 41)
      + ((v11 & 0x40000000000uLL) >> 42);
  return v33
       + ((v11 & 0x80000000000uLL) >> 43)
       + ((v12 & 0x100000000000uLL) >> 44)
       + ((v12 & 0x200000000000uLL) >> 45)
       + ((v12 & 0x400000000000uLL) >> 46)
       + ((v12 & 0x800000000000uLL) >> 47)
       + ((v12 & 0x1000000000000uLL) >> 48)
       + ((v12 & 0x2000000000000uLL) >> 49)
       + ((v12 & 0x4000000000000uLL) >> 50)
       + ((v12 & 0x8000000000000uLL) >> 51)
       + ((v12 & 0x10000000000000uLL) >> 52)
       + ((v12 & 0x20000000000000uLL) >> 53)
       + ((v12 & 0x40000000000000uLL) >> 54)
       + ((v12 & 0x80000000000000uLL) >> 55)
       + ((v12 & 0x100000000000000uLL) >> 56)
       + ((v12 & 0x200000000000000uLL) >> 57)
       + ((v12 & 0x400000000000000uLL) >> 58)
       + ((v12 & 0x800000000000000uLL) >> 59)
       + ((v12 & 0x1000000000000000uLL) >> 60)
       + ((v12 & 0x2000000000000000uLL) >> 61)
       + ((v12 & 0x4000000000000000uLL) >> 62);
}

unint64_t sub_1C4D3FDB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_82;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_83;
  }
LABEL_82:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_84;
  }
LABEL_83:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_84:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_88;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_89;
  }
LABEL_88:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_90;
  }
LABEL_89:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_90:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_94;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_95;
  }
LABEL_94:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_96;
  }
LABEL_95:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_96:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_100;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_101;
  }
LABEL_100:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_102;
  }
LABEL_101:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_102:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) != 0)
LABEL_36:
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
LABEL_37:
  v9 = v8;
  if ((v8 & 0x10000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 224) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_39:
      if ((v9 & 0x40000000) == 0)
        goto LABEL_40;
      goto LABEL_106;
    }
  }
  else if ((v8 & 0x20000000) == 0)
  {
    goto LABEL_39;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 232);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_40:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_107;
  }
LABEL_106:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 240) & 0x1FF;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_108;
  }
LABEL_107:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_108:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 256) & 0x1FFFF;
  if ((v9 & 0x200000000) != 0)
LABEL_43:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 264) & 0x1FFF;
LABEL_44:
  v10 = v9;
  if ((v9 & 0x400000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 272) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x800000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 280);
  v11 = v10;
  if ((v10 & 0x1000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 288) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x2000000000) == 0)
    {
LABEL_50:
      if ((v11 & 0x4000000000) == 0)
        goto LABEL_51;
      goto LABEL_112;
    }
  }
  else if ((v10 & 0x2000000000) == 0)
  {
    goto LABEL_50;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 296);
  if ((v11 & 0x4000000000) == 0)
  {
LABEL_51:
    if ((v11 & 0x8000000000) == 0)
      goto LABEL_52;
    goto LABEL_113;
  }
LABEL_112:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_114;
  }
LABEL_113:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 312) != 0;
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_115;
  }
LABEL_114:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 320);
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_56;
    goto LABEL_55;
  }
LABEL_115:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 328) != 0;
  if ((v11 & 0x40000000000) != 0)
LABEL_55:
    *(_BYTE *)(a2 + 84) = *(_QWORD *)(a1 + 336) != 0;
LABEL_56:
  v12 = v11;
  if ((v11 & 0x80000000000) != 0)
  {
    *(_BYTE *)(a2 + 85) = *(_BYTE *)(a1 + 344) & 0xF;
    v12 = *(_QWORD *)(a1 + 1248);
    if ((v12 & 0x100000000000) == 0)
    {
LABEL_58:
      if ((v12 & 0x200000000000) == 0)
        goto LABEL_59;
      goto LABEL_119;
    }
  }
  else if ((v11 & 0x100000000000) == 0)
  {
    goto LABEL_58;
  }
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 352);
  if ((v12 & 0x200000000000) == 0)
  {
LABEL_59:
    if ((v12 & 0x400000000000) == 0)
      goto LABEL_60;
    goto LABEL_120;
  }
LABEL_119:
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 360);
  if ((v12 & 0x400000000000) == 0)
  {
LABEL_60:
    if ((v12 & 0x800000000000) == 0)
      goto LABEL_61;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 368) != 0;
  if ((v12 & 0x800000000000) == 0)
  {
LABEL_61:
    if ((v12 & 0x1000000000000) == 0)
      goto LABEL_62;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 376) != 0;
  if ((v12 & 0x1000000000000) == 0)
  {
LABEL_62:
    if ((v12 & 0x2000000000000) == 0)
      goto LABEL_63;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 384) != 0;
  if ((v12 & 0x2000000000000) == 0)
  {
LABEL_63:
    if ((v12 & 0x4000000000000) == 0)
      goto LABEL_64;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 392) != 0;
  if ((v12 & 0x4000000000000) == 0)
  {
LABEL_64:
    if ((v12 & 0x8000000000000) == 0)
      goto LABEL_65;
    goto LABEL_125;
  }
LABEL_124:
  *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 400) != 0;
  if ((v12 & 0x8000000000000) == 0)
  {
LABEL_65:
    if ((v12 & 0x10000000000000) == 0)
      goto LABEL_66;
    goto LABEL_126;
  }
LABEL_125:
  *(_BYTE *)(a2 + 101) = *(_QWORD *)(a1 + 408) != 0;
  if ((v12 & 0x10000000000000) == 0)
  {
LABEL_66:
    if ((v12 & 0x20000000000000) == 0)
      goto LABEL_67;
    goto LABEL_127;
  }
LABEL_126:
  *(_BYTE *)(a2 + 102) = *(_QWORD *)(a1 + 416) != 0;
  if ((v12 & 0x20000000000000) == 0)
  {
LABEL_67:
    if ((v12 & 0x40000000000000) == 0)
      goto LABEL_68;
    goto LABEL_128;
  }
LABEL_127:
  *(_BYTE *)(a2 + 103) = *(_QWORD *)(a1 + 424) != 0;
  if ((v12 & 0x40000000000000) == 0)
  {
LABEL_68:
    if ((v12 & 0x80000000000000) == 0)
      goto LABEL_69;
    goto LABEL_129;
  }
LABEL_128:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 432);
  if ((v12 & 0x80000000000000) == 0)
  {
LABEL_69:
    if ((v12 & 0x100000000000000) == 0)
      goto LABEL_70;
    goto LABEL_130;
  }
LABEL_129:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 440);
  if ((v12 & 0x100000000000000) == 0)
  {
LABEL_70:
    if ((v12 & 0x200000000000000) == 0)
      goto LABEL_71;
    goto LABEL_131;
  }
LABEL_130:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 448);
  if ((v12 & 0x200000000000000) == 0)
  {
LABEL_71:
    if ((v12 & 0x400000000000000) == 0)
      goto LABEL_72;
    goto LABEL_132;
  }
LABEL_131:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 456);
  if ((v12 & 0x400000000000000) == 0)
  {
LABEL_72:
    if ((v12 & 0x800000000000000) == 0)
      goto LABEL_73;
    goto LABEL_133;
  }
LABEL_132:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 464);
  if ((v12 & 0x800000000000000) == 0)
  {
LABEL_73:
    if ((v12 & 0x1000000000000000) == 0)
      goto LABEL_75;
    goto LABEL_74;
  }
LABEL_133:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 472);
  if ((v12 & 0x1000000000000000) != 0)
LABEL_74:
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 480);
LABEL_75:
  v13 = v2 & 1;
  if ((v12 & 0x2000000000000000) != 0)
    *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 488);
  v14 = v3 & 2;
  v15 = v3 & 4;
  v16 = v3 & 8;
  v17 = v3 & 0x10;
  v18 = v3 & 0x20;
  v19 = v3 & 0x40;
  v20 = v4 & 0x80;
  v21 = v4 & 0x100;
  v22 = v5 & 0x200;
  v23 = v5 & 0x400;
  v24 = v5 & 0x800;
  v25 = v5 & 0x1000;
  v26 = v5 & 0x2000;
  v27 = v5 & 0x4000;
  if ((v12 & 0x4000000000000000) != 0)
    *(_BYTE *)(a2 + 136) = *(_QWORD *)(a1 + 496) != 0;
  v32 = v6 & 0x80000;
  v31 = v6 & 0x40000;
  v30 = v6 & 0x20000;
  v29 = v6 & 0x10000;
  v28 = (unsigned __int16)v6 & 0x8000;
  v35 = v6 & 0x100000;
  v36 = v7 & 0x200000;
  v37 = v7 & 0x400000;
  v38 = v8 & 0x800000;
  v39 = v8 & 0x1000000;
  v40 = v8 & 0x2000000;
  v41 = v8 & 0x4000000;
  v42 = v8 & 0x8000000;
  v43 = v9 & 0x400000000;
  v44 = v8 & 0x10000000;
  v45 = v10 & 0x800000000;
  v46 = v10 & 0x1000000000;
  v47 = v11 & 0x2000000000;
  v48 = v11 & 0x4000000000;
  v49 = v11 & 0x8000000000;
  v50 = v11 & 0x10000000000;
  v33 = (v14 >> 1)
      + v13
      + (v15 >> 2)
      + (v16 >> 3)
      + (v17 >> 4)
      + (v18 >> 5)
      + (v19 >> 6)
      + (v20 >> 7)
      + (v21 >> 8)
      + (v22 >> 9)
      + (v23 >> 10)
      + (v24 >> 11)
      + (v25 >> 12)
      + (v26 >> 13)
      + (v27 >> 14)
      + (v28 >> 15)
      + (v29 >> 16)
      + (v30 >> 17)
      + (v31 >> 18)
      + (v32 >> 19)
      + (v35 >> 20)
      + (v36 >> 21)
      + (v37 >> 22)
      + (v38 >> 23)
      + (v39 >> 24)
      + (v40 >> 25)
      + (v41 >> 26)
      + (v42 >> 27)
      + (v44 >> 28)
      + ((v9 & 0x20000000) >> 29)
      + ((v9 & 0x40000000) >> 30)
      + (v9 >> 31)
      + (BYTE4(v9) & 1)
      + ((v9 & 0x200000000uLL) >> 33)
      + (v43 >> 34)
      + (v45 >> 35)
      + (v46 >> 36)
      + (v47 >> 37)
      + (v48 >> 38)
      + (v49 >> 39)
      + (v50 >> 40)
      + ((v11 & 0x20000000000uLL) >> 41)
      + ((v11 & 0x40000000000uLL) >> 42);
  return v33
       + ((v11 & 0x80000000000uLL) >> 43)
       + ((v12 & 0x100000000000uLL) >> 44)
       + ((v12 & 0x200000000000uLL) >> 45)
       + ((v12 & 0x400000000000uLL) >> 46)
       + ((v12 & 0x800000000000uLL) >> 47)
       + ((v12 & 0x1000000000000uLL) >> 48)
       + ((v12 & 0x2000000000000uLL) >> 49)
       + ((v12 & 0x4000000000000uLL) >> 50)
       + ((v12 & 0x8000000000000uLL) >> 51)
       + ((v12 & 0x10000000000000uLL) >> 52)
       + ((v12 & 0x20000000000000uLL) >> 53)
       + ((v12 & 0x40000000000000uLL) >> 54)
       + ((v12 & 0x80000000000000uLL) >> 55)
       + ((v12 & 0x100000000000000uLL) >> 56)
       + ((v12 & 0x200000000000000uLL) >> 57)
       + ((v12 & 0x400000000000000uLL) >> 58)
       + ((v12 & 0x800000000000000uLL) >> 59)
       + ((v12 & 0x1000000000000000uLL) >> 60)
       + ((v12 & 0x2000000000000000uLL) >> 61)
       + ((v12 & 0x4000000000000000uLL) >> 62);
}

uint64_t sub_1C4D406D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
    *(_BYTE *)a2 = *(_QWORD *)a1 != 0;
  if ((v2 & 2) != 0)
  {
    *(_BYTE *)(a2 + 1) = *(_BYTE *)(a1 + 8) & 0xF;
    v3 = *(_QWORD *)(a1 + 1248);
  }
  v4 = v3;
  if ((v3 & 4) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 16) & 1;
    v4 = *(_QWORD *)(a1 + 1248);
    if ((v4 & 8) == 0)
    {
LABEL_7:
      if ((v4 & 0x10) == 0)
        goto LABEL_8;
      goto LABEL_68;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_7;
  }
  *(_WORD *)(a2 + 4) = *(_QWORD *)(a1 + 24);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_69;
  }
LABEL_68:
  *(_WORD *)(a2 + 4) = *(_WORD *)(a1 + 32) & 0x1FF;
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_70;
  }
LABEL_69:
  *(_WORD *)(a2 + 4) = *(_WORD *)(a1 + 40) & 0x1FF;
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_70:
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 48) & 0x1FFFF;
  if ((v4 & 0x80) != 0)
LABEL_11:
    *(_WORD *)(a2 + 4) = *(_WORD *)(a1 + 56) & 0x1FFF;
LABEL_12:
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0x7F;
    v5 = *(_QWORD *)(a1 + 1248);
  }
  if ((v5 & 0x200) != 0)
    *(_DWORD *)(a2 + 4) = *(_QWORD *)(a1 + 72);
  v6 = v5;
  if ((v5 & 0x400) != 0)
  {
    *(_BYTE *)(a2 + 8) = *(_BYTE *)(a1 + 80) & 0xF;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x800) == 0)
    {
LABEL_18:
      if ((v6 & 0x1000) == 0)
        goto LABEL_19;
      goto LABEL_74;
    }
  }
  else if ((v5 & 0x800) == 0)
  {
    goto LABEL_18;
  }
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 88);
  if ((v6 & 0x1000) == 0)
  {
LABEL_19:
    if ((v6 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_75;
  }
LABEL_74:
  *(_DWORD *)(a2 + 16) = *(_QWORD *)(a1 + 96);
  if ((v6 & 0x2000) == 0)
  {
LABEL_20:
    if ((v6 & 0x4000) == 0)
      goto LABEL_21;
    goto LABEL_76;
  }
LABEL_75:
  *(_BYTE *)(a2 + 20) = *(_QWORD *)(a1 + 104) != 0;
  if ((v6 & 0x4000) == 0)
  {
LABEL_21:
    if ((v6 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_22;
  }
LABEL_76:
  *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 112);
  if ((v6 & 0x8000) != 0)
LABEL_22:
    *(_BYTE *)(a2 + 28) = *(_QWORD *)(a1 + 120) != 0;
LABEL_23:
  v7 = v6;
  if ((v6 & 0x10000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 128) & 1;
    v7 = *(_QWORD *)(a1 + 1248);
    if ((v7 & 0x20000) == 0)
    {
LABEL_25:
      if ((v7 & 0x40000) == 0)
        goto LABEL_26;
      goto LABEL_80;
    }
  }
  else if ((v6 & 0x20000) == 0)
  {
    goto LABEL_25;
  }
  *(_WORD *)(a2 + 32) = *(_QWORD *)(a1 + 136);
  if ((v7 & 0x40000) == 0)
  {
LABEL_26:
    if ((v7 & 0x80000) == 0)
      goto LABEL_27;
    goto LABEL_81;
  }
LABEL_80:
  *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 144) & 0x1FF;
  if ((v7 & 0x80000) == 0)
  {
LABEL_27:
    if ((v7 & 0x100000) == 0)
      goto LABEL_28;
    goto LABEL_82;
  }
LABEL_81:
  *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 152) & 0x1FF;
  if ((v7 & 0x100000) == 0)
  {
LABEL_28:
    if ((v7 & 0x200000) == 0)
      goto LABEL_30;
    goto LABEL_29;
  }
LABEL_82:
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 160) & 0x1FFFF;
  if ((v7 & 0x200000) != 0)
LABEL_29:
    *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 168) & 0x1FFF;
LABEL_30:
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0x7F;
    v8 = *(_QWORD *)(a1 + 1248);
  }
  if ((v8 & 0x800000) != 0)
    *(_DWORD *)(a2 + 32) = *(_QWORD *)(a1 + 184);
  v9 = v8;
  if ((v8 & 0x1000000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 192) & 0xF;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x2000000) == 0)
    {
LABEL_36:
      if ((v9 & 0x4000000) == 0)
        goto LABEL_37;
      goto LABEL_86;
    }
  }
  else if ((v8 & 0x2000000) == 0)
  {
    goto LABEL_36;
  }
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 200);
  if ((v9 & 0x4000000) == 0)
  {
LABEL_37:
    if ((v9 & 0x8000000) == 0)
      goto LABEL_38;
    goto LABEL_87;
  }
LABEL_86:
  *(_DWORD *)(a2 + 44) = *(_QWORD *)(a1 + 208);
  if ((v9 & 0x8000000) == 0)
  {
LABEL_38:
    if ((v9 & 0x10000000) == 0)
      goto LABEL_39;
    goto LABEL_88;
  }
LABEL_87:
  *(_BYTE *)(a2 + 48) = *(_QWORD *)(a1 + 216) != 0;
  if ((v9 & 0x10000000) == 0)
  {
LABEL_39:
    if ((v9 & 0x20000000) == 0)
      goto LABEL_40;
    goto LABEL_89;
  }
LABEL_88:
  *(_DWORD *)(a2 + 52) = *(_QWORD *)(a1 + 224);
  if ((v9 & 0x20000000) == 0)
  {
LABEL_40:
    if ((v9 & 0x40000000) == 0)
      goto LABEL_42;
    goto LABEL_41;
  }
LABEL_89:
  *(_BYTE *)(a2 + 56) = *(_QWORD *)(a1 + 232) != 0;
  if ((v9 & 0x40000000) != 0)
LABEL_41:
    *(_BYTE *)(a2 + 60) = *(_QWORD *)(a1 + 240) != 0;
LABEL_42:
  v10 = v9;
  if ((v9 & 0x80000000) != 0)
  {
    *(_BYTE *)(a2 + 61) = *(_BYTE *)(a1 + 248) & 0xF;
    v10 = *(_QWORD *)(a1 + 1248);
    if ((v10 & 0x100000000) == 0)
    {
LABEL_44:
      if ((v10 & 0x200000000) == 0)
        goto LABEL_45;
      goto LABEL_93;
    }
  }
  else if ((v9 & 0x100000000) == 0)
  {
    goto LABEL_44;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 256);
  if ((v10 & 0x200000000) == 0)
  {
LABEL_45:
    if ((v10 & 0x400000000) == 0)
      goto LABEL_46;
    goto LABEL_94;
  }
LABEL_93:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 264);
  if ((v10 & 0x400000000) == 0)
  {
LABEL_46:
    if ((v10 & 0x800000000) == 0)
      goto LABEL_47;
    goto LABEL_95;
  }
LABEL_94:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 272) != 0;
  if ((v10 & 0x800000000) == 0)
  {
LABEL_47:
    if ((v10 & 0x1000000000) == 0)
      goto LABEL_48;
    goto LABEL_96;
  }
LABEL_95:
  *(_BYTE *)(a2 + 73) = *(_QWORD *)(a1 + 280) != 0;
  if ((v10 & 0x1000000000) == 0)
  {
LABEL_48:
    if ((v10 & 0x2000000000) == 0)
      goto LABEL_49;
    goto LABEL_97;
  }
LABEL_96:
  *(_BYTE *)(a2 + 74) = *(_QWORD *)(a1 + 288) != 0;
  if ((v10 & 0x2000000000) == 0)
  {
LABEL_49:
    if ((v10 & 0x4000000000) == 0)
      goto LABEL_50;
    goto LABEL_98;
  }
LABEL_97:
  *(_BYTE *)(a2 + 75) = *(_QWORD *)(a1 + 296) != 0;
  if ((v10 & 0x4000000000) == 0)
  {
LABEL_50:
    if ((v10 & 0x8000000000) == 0)
      goto LABEL_51;
    goto LABEL_99;
  }
LABEL_98:
  *(_BYTE *)(a2 + 76) = *(_QWORD *)(a1 + 304) != 0;
  if ((v10 & 0x8000000000) == 0)
  {
LABEL_51:
    if ((v10 & 0x10000000000) == 0)
      goto LABEL_52;
    goto LABEL_100;
  }
LABEL_99:
  *(_BYTE *)(a2 + 77) = *(_QWORD *)(a1 + 312) != 0;
  if ((v10 & 0x10000000000) == 0)
  {
LABEL_52:
    if ((v10 & 0x20000000000) == 0)
      goto LABEL_53;
    goto LABEL_101;
  }
LABEL_100:
  *(_BYTE *)(a2 + 78) = *(_QWORD *)(a1 + 320) != 0;
  if ((v10 & 0x20000000000) == 0)
  {
LABEL_53:
    if ((v10 & 0x40000000000) == 0)
      goto LABEL_54;
    goto LABEL_102;
  }
LABEL_101:
  *(_BYTE *)(a2 + 79) = *(_QWORD *)(a1 + 328) != 0;
  if ((v10 & 0x40000000000) == 0)
  {
LABEL_54:
    if ((v10 & 0x80000000000) == 0)
      goto LABEL_55;
    goto LABEL_103;
  }
LABEL_102:
  *(_DWORD *)(a2 + 80) = *(_QWORD *)(a1 + 336);
  if ((v10 & 0x80000000000) == 0)
  {
LABEL_55:
    if ((v10 & 0x100000000000) == 0)
      goto LABEL_56;
    goto LABEL_104;
  }
LABEL_103:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 344);
  if ((v10 & 0x100000000000) == 0)
  {
LABEL_56:
    if ((v10 & 0x200000000000) == 0)
      goto LABEL_57;
    goto LABEL_105;
  }
LABEL_104:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 352);
  if ((v10 & 0x200000000000) == 0)
  {
LABEL_57:
    if ((v10 & 0x400000000000) == 0)
      goto LABEL_58;
    goto LABEL_106;
  }
LABEL_105:
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 360);
  if ((v10 & 0x400000000000) == 0)
  {
LABEL_58:
    if ((v10 & 0x800000000000) == 0)
      goto LABEL_59;
    goto LABEL_107;
  }
LABEL_106:
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 368);
  if ((v10 & 0x800000000000) == 0)
  {
LABEL_59:
    if ((v10 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_60;
  }
LABEL_107:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 376);
  if ((v10 & 0x1000000000000) != 0)
LABEL_60:
    *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 384);
LABEL_61:
  v11 = v2 & 1;
  if ((v10 & 0x2000000000000) != 0)
    *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 392);
  v12 = v2 & 2;
  v13 = v3 & 4;
  v14 = v4 & 8;
  v15 = v4 & 0x10;
  v16 = v4 & 0x20;
  v17 = v4 & 0x40;
  v18 = v4 & 0x80;
  v19 = v4 & 0x100;
  v20 = v5 & 0x200;
  v21 = v5 & 0x400;
  v22 = v6 & 0x800;
  v23 = v6 & 0x1000;
  v24 = v6 & 0x2000;
  v25 = v6 & 0x4000;
  v26 = (unsigned __int16)v6 & 0x8000;
  v27 = v6 & 0x10000;
  v28 = v7 & 0x20000;
  v29 = v7 & 0x40000;
  v30 = v7 & 0x80000;
  v31 = v7 & 0x100000;
  v32 = v7 & 0x200000;
  v33 = v7 & 0x400000;
  if ((v10 & 0x4000000000000) != 0)
    *(_BYTE *)(a2 + 112) = *(_QWORD *)(a1 + 400) != 0;
  v34 = v8 & 0x800000;
  v37 = v8 & 0x1000000;
  v38 = v9 & 0x2000000;
  v39 = v9 & 0x4000000;
  v40 = v9 & 0x8000000;
  v41 = v9 & 0x10000000;
  v42 = v9 & 0x20000000;
  v43 = v9 & 0x40000000;
  v45 = v10 & 0x200000000;
  v46 = v10 & 0x400000000;
  v47 = v10 & 0x800000000;
  v48 = v10 & 0x1000000000;
  v49 = v10 & 0x2000000000;
  v44 = BYTE4(v10) & 1;
  v35 = (v12 >> 1)
      + v11
      + (v13 >> 2)
      + (v14 >> 3)
      + (v15 >> 4)
      + (v16 >> 5)
      + (v17 >> 6)
      + (v18 >> 7)
      + (v19 >> 8)
      + (v20 >> 9)
      + (v21 >> 10)
      + (v22 >> 11)
      + (v23 >> 12)
      + (v24 >> 13)
      + (v25 >> 14)
      + (v26 >> 15)
      + (v27 >> 16)
      + (v28 >> 17)
      + (v29 >> 18)
      + (v30 >> 19)
      + (v31 >> 20)
      + (v32 >> 21)
      + (v33 >> 22)
      + (v34 >> 23)
      + (v37 >> 24)
      + (v38 >> 25)
      + (v39 >> 26)
      + (v40 >> 27)
      + (v41 >> 28)
      + (v42 >> 29)
      + (v43 >> 30)
      + (v9 >> 31)
      + v44
      + (v45 >> 33)
      + (v46 >> 34)
      + (v47 >> 35)
      + (v48 >> 36)
      + (v49 >> 37)
      + ((v10 & 0x4000000000uLL) >> 38)
      + ((v10 & 0x8000000000uLL) >> 39)
      + ((v10 & 0x10000000000uLL) >> 40)
      + ((v10 & 0x20000000000uLL) >> 41)
      + ((v10 & 0x40000000000uLL) >> 42);
  return v35
       + ((v10 & 0x80000000000uLL) >> 43)
       + ((v10 & 0x100000000000uLL) >> 44)
       + ((v10 & 0x200000000000uLL) >> 45)
       + ((v10 & 0x400000000000uLL) >> 46)
       + ((v10 & 0x800000000000uLL) >> 47)
       + ((v10 & 0x1000000000000uLL) >> 48)
       + ((v10 & 0x2000000000000uLL) >> 49)
       + ((v10 & 0x4000000000000uLL) >> 50);
}

uint64_t sub_1C4D40E34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
    *(_BYTE *)a2 = *(_QWORD *)a1 != 0;
  if ((v2 & 2) != 0)
  {
    *(_BYTE *)(a2 + 1) = *(_BYTE *)(a1 + 8) & 0xF;
    v3 = *(_QWORD *)(a1 + 1248);
  }
  v4 = v3;
  if ((v3 & 4) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 16) & 1;
    v4 = *(_QWORD *)(a1 + 1248);
    if ((v4 & 8) == 0)
    {
LABEL_7:
      if ((v4 & 0x10) == 0)
        goto LABEL_8;
      goto LABEL_68;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_7;
  }
  *(_WORD *)(a2 + 4) = *(_QWORD *)(a1 + 24);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_69;
  }
LABEL_68:
  *(_WORD *)(a2 + 4) = *(_WORD *)(a1 + 32) & 0x1FF;
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_70;
  }
LABEL_69:
  *(_WORD *)(a2 + 4) = *(_WORD *)(a1 + 40) & 0x1FF;
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_70:
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 48) & 0x1FFFF;
  if ((v4 & 0x80) != 0)
LABEL_11:
    *(_WORD *)(a2 + 4) = *(_WORD *)(a1 + 56) & 0x1FFF;
LABEL_12:
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0x7F;
    v5 = *(_QWORD *)(a1 + 1248);
  }
  if ((v5 & 0x200) != 0)
    *(_DWORD *)(a2 + 4) = *(_QWORD *)(a1 + 72);
  v6 = v5;
  if ((v5 & 0x400) != 0)
  {
    *(_BYTE *)(a2 + 8) = *(_BYTE *)(a1 + 80) & 0xF;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x800) == 0)
    {
LABEL_18:
      if ((v6 & 0x1000) == 0)
        goto LABEL_19;
      goto LABEL_74;
    }
  }
  else if ((v5 & 0x800) == 0)
  {
    goto LABEL_18;
  }
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 88);
  if ((v6 & 0x1000) == 0)
  {
LABEL_19:
    if ((v6 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_75;
  }
LABEL_74:
  *(_DWORD *)(a2 + 16) = *(_QWORD *)(a1 + 96);
  if ((v6 & 0x2000) == 0)
  {
LABEL_20:
    if ((v6 & 0x4000) == 0)
      goto LABEL_21;
    goto LABEL_76;
  }
LABEL_75:
  *(_BYTE *)(a2 + 20) = *(_QWORD *)(a1 + 104) != 0;
  if ((v6 & 0x4000) == 0)
  {
LABEL_21:
    if ((v6 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_22;
  }
LABEL_76:
  *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 112);
  if ((v6 & 0x8000) != 0)
LABEL_22:
    *(_BYTE *)(a2 + 28) = *(_QWORD *)(a1 + 120) != 0;
LABEL_23:
  v7 = v6;
  if ((v6 & 0x10000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 128) & 1;
    v7 = *(_QWORD *)(a1 + 1248);
    if ((v7 & 0x20000) == 0)
    {
LABEL_25:
      if ((v7 & 0x40000) == 0)
        goto LABEL_26;
      goto LABEL_80;
    }
  }
  else if ((v6 & 0x20000) == 0)
  {
    goto LABEL_25;
  }
  *(_WORD *)(a2 + 32) = *(_QWORD *)(a1 + 136);
  if ((v7 & 0x40000) == 0)
  {
LABEL_26:
    if ((v7 & 0x80000) == 0)
      goto LABEL_27;
    goto LABEL_81;
  }
LABEL_80:
  *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 144) & 0x1FF;
  if ((v7 & 0x80000) == 0)
  {
LABEL_27:
    if ((v7 & 0x100000) == 0)
      goto LABEL_28;
    goto LABEL_82;
  }
LABEL_81:
  *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 152) & 0x1FF;
  if ((v7 & 0x100000) == 0)
  {
LABEL_28:
    if ((v7 & 0x200000) == 0)
      goto LABEL_30;
    goto LABEL_29;
  }
LABEL_82:
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 160) & 0x1FFFF;
  if ((v7 & 0x200000) != 0)
LABEL_29:
    *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 168) & 0x1FFF;
LABEL_30:
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0x7F;
    v8 = *(_QWORD *)(a1 + 1248);
  }
  if ((v8 & 0x800000) != 0)
    *(_DWORD *)(a2 + 32) = *(_QWORD *)(a1 + 184);
  v9 = v8;
  if ((v8 & 0x1000000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 192) & 0xF;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x2000000) == 0)
    {
LABEL_36:
      if ((v9 & 0x4000000) == 0)
        goto LABEL_37;
      goto LABEL_86;
    }
  }
  else if ((v8 & 0x2000000) == 0)
  {
    goto LABEL_36;
  }
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 200);
  if ((v9 & 0x4000000) == 0)
  {
LABEL_37:
    if ((v9 & 0x8000000) == 0)
      goto LABEL_38;
    goto LABEL_87;
  }
LABEL_86:
  *(_DWORD *)(a2 + 44) = *(_QWORD *)(a1 + 208);
  if ((v9 & 0x8000000) == 0)
  {
LABEL_38:
    if ((v9 & 0x10000000) == 0)
      goto LABEL_39;
    goto LABEL_88;
  }
LABEL_87:
  *(_BYTE *)(a2 + 48) = *(_QWORD *)(a1 + 216) != 0;
  if ((v9 & 0x10000000) == 0)
  {
LABEL_39:
    if ((v9 & 0x20000000) == 0)
      goto LABEL_40;
    goto LABEL_89;
  }
LABEL_88:
  *(_DWORD *)(a2 + 52) = *(_QWORD *)(a1 + 224);
  if ((v9 & 0x20000000) == 0)
  {
LABEL_40:
    if ((v9 & 0x40000000) == 0)
      goto LABEL_42;
    goto LABEL_41;
  }
LABEL_89:
  *(_BYTE *)(a2 + 56) = *(_QWORD *)(a1 + 232) != 0;
  if ((v9 & 0x40000000) != 0)
LABEL_41:
    *(_BYTE *)(a2 + 60) = *(_QWORD *)(a1 + 240) != 0;
LABEL_42:
  v10 = v9;
  if ((v9 & 0x80000000) != 0)
  {
    *(_BYTE *)(a2 + 61) = *(_BYTE *)(a1 + 248) & 0xF;
    v10 = *(_QWORD *)(a1 + 1248);
    if ((v10 & 0x100000000) == 0)
    {
LABEL_44:
      if ((v10 & 0x200000000) == 0)
        goto LABEL_45;
      goto LABEL_93;
    }
  }
  else if ((v9 & 0x100000000) == 0)
  {
    goto LABEL_44;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 256);
  if ((v10 & 0x200000000) == 0)
  {
LABEL_45:
    if ((v10 & 0x400000000) == 0)
      goto LABEL_46;
    goto LABEL_94;
  }
LABEL_93:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 264);
  if ((v10 & 0x400000000) == 0)
  {
LABEL_46:
    if ((v10 & 0x800000000) == 0)
      goto LABEL_47;
    goto LABEL_95;
  }
LABEL_94:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 272) != 0;
  if ((v10 & 0x800000000) == 0)
  {
LABEL_47:
    if ((v10 & 0x1000000000) == 0)
      goto LABEL_48;
    goto LABEL_96;
  }
LABEL_95:
  *(_BYTE *)(a2 + 73) = *(_QWORD *)(a1 + 280) != 0;
  if ((v10 & 0x1000000000) == 0)
  {
LABEL_48:
    if ((v10 & 0x2000000000) == 0)
      goto LABEL_49;
    goto LABEL_97;
  }
LABEL_96:
  *(_BYTE *)(a2 + 74) = *(_QWORD *)(a1 + 288) != 0;
  if ((v10 & 0x2000000000) == 0)
  {
LABEL_49:
    if ((v10 & 0x4000000000) == 0)
      goto LABEL_50;
    goto LABEL_98;
  }
LABEL_97:
  *(_BYTE *)(a2 + 75) = *(_QWORD *)(a1 + 296) != 0;
  if ((v10 & 0x4000000000) == 0)
  {
LABEL_50:
    if ((v10 & 0x8000000000) == 0)
      goto LABEL_51;
    goto LABEL_99;
  }
LABEL_98:
  *(_BYTE *)(a2 + 76) = *(_QWORD *)(a1 + 304) != 0;
  if ((v10 & 0x8000000000) == 0)
  {
LABEL_51:
    if ((v10 & 0x10000000000) == 0)
      goto LABEL_52;
    goto LABEL_100;
  }
LABEL_99:
  *(_BYTE *)(a2 + 77) = *(_QWORD *)(a1 + 312) != 0;
  if ((v10 & 0x10000000000) == 0)
  {
LABEL_52:
    if ((v10 & 0x20000000000) == 0)
      goto LABEL_53;
    goto LABEL_101;
  }
LABEL_100:
  *(_BYTE *)(a2 + 78) = *(_QWORD *)(a1 + 320) != 0;
  if ((v10 & 0x20000000000) == 0)
  {
LABEL_53:
    if ((v10 & 0x40000000000) == 0)
      goto LABEL_54;
    goto LABEL_102;
  }
LABEL_101:
  *(_BYTE *)(a2 + 79) = *(_QWORD *)(a1 + 328) != 0;
  if ((v10 & 0x40000000000) == 0)
  {
LABEL_54:
    if ((v10 & 0x80000000000) == 0)
      goto LABEL_55;
    goto LABEL_103;
  }
LABEL_102:
  *(_DWORD *)(a2 + 80) = *(_QWORD *)(a1 + 336);
  if ((v10 & 0x80000000000) == 0)
  {
LABEL_55:
    if ((v10 & 0x100000000000) == 0)
      goto LABEL_56;
    goto LABEL_104;
  }
LABEL_103:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 344);
  if ((v10 & 0x100000000000) == 0)
  {
LABEL_56:
    if ((v10 & 0x200000000000) == 0)
      goto LABEL_57;
    goto LABEL_105;
  }
LABEL_104:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 352);
  if ((v10 & 0x200000000000) == 0)
  {
LABEL_57:
    if ((v10 & 0x400000000000) == 0)
      goto LABEL_58;
    goto LABEL_106;
  }
LABEL_105:
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 360);
  if ((v10 & 0x400000000000) == 0)
  {
LABEL_58:
    if ((v10 & 0x800000000000) == 0)
      goto LABEL_59;
    goto LABEL_107;
  }
LABEL_106:
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 368);
  if ((v10 & 0x800000000000) == 0)
  {
LABEL_59:
    if ((v10 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_60;
  }
LABEL_107:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 376);
  if ((v10 & 0x1000000000000) != 0)
LABEL_60:
    *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 384);
LABEL_61:
  v11 = v2 & 1;
  if ((v10 & 0x2000000000000) != 0)
    *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 392);
  v12 = v2 & 2;
  v13 = v3 & 4;
  v14 = v4 & 8;
  v15 = v4 & 0x10;
  v16 = v4 & 0x20;
  v17 = v4 & 0x40;
  v18 = v4 & 0x80;
  v19 = v4 & 0x100;
  v20 = v5 & 0x200;
  v21 = v5 & 0x400;
  v22 = v6 & 0x800;
  v23 = v6 & 0x1000;
  v24 = v6 & 0x2000;
  v25 = v6 & 0x4000;
  v26 = (unsigned __int16)v6 & 0x8000;
  v27 = v6 & 0x10000;
  v28 = v7 & 0x20000;
  v29 = v7 & 0x40000;
  v30 = v7 & 0x80000;
  v31 = v7 & 0x100000;
  v32 = v7 & 0x200000;
  v33 = v7 & 0x400000;
  if ((v10 & 0x4000000000000) != 0)
    *(_BYTE *)(a2 + 112) = *(_QWORD *)(a1 + 400) != 0;
  v34 = v8 & 0x800000;
  v37 = v8 & 0x1000000;
  v38 = v9 & 0x2000000;
  v39 = v9 & 0x4000000;
  v40 = v9 & 0x8000000;
  v41 = v9 & 0x10000000;
  v42 = v9 & 0x20000000;
  v43 = v9 & 0x40000000;
  v45 = v10 & 0x200000000;
  v46 = v10 & 0x400000000;
  v47 = v10 & 0x800000000;
  v48 = v10 & 0x1000000000;
  v49 = v10 & 0x2000000000;
  v44 = BYTE4(v10) & 1;
  v35 = (v12 >> 1)
      + v11
      + (v13 >> 2)
      + (v14 >> 3)
      + (v15 >> 4)
      + (v16 >> 5)
      + (v17 >> 6)
      + (v18 >> 7)
      + (v19 >> 8)
      + (v20 >> 9)
      + (v21 >> 10)
      + (v22 >> 11)
      + (v23 >> 12)
      + (v24 >> 13)
      + (v25 >> 14)
      + (v26 >> 15)
      + (v27 >> 16)
      + (v28 >> 17)
      + (v29 >> 18)
      + (v30 >> 19)
      + (v31 >> 20)
      + (v32 >> 21)
      + (v33 >> 22)
      + (v34 >> 23)
      + (v37 >> 24)
      + (v38 >> 25)
      + (v39 >> 26)
      + (v40 >> 27)
      + (v41 >> 28)
      + (v42 >> 29)
      + (v43 >> 30)
      + (v9 >> 31)
      + v44
      + (v45 >> 33)
      + (v46 >> 34)
      + (v47 >> 35)
      + (v48 >> 36)
      + (v49 >> 37)
      + ((v10 & 0x4000000000uLL) >> 38)
      + ((v10 & 0x8000000000uLL) >> 39)
      + ((v10 & 0x10000000000uLL) >> 40)
      + ((v10 & 0x20000000000uLL) >> 41)
      + ((v10 & 0x40000000000uLL) >> 42);
  return v35
       + ((v10 & 0x80000000000uLL) >> 43)
       + ((v10 & 0x100000000000uLL) >> 44)
       + ((v10 & 0x200000000000uLL) >> 45)
       + ((v10 & 0x400000000000uLL) >> 46)
       + ((v10 & 0x800000000000uLL) >> 47)
       + ((v10 & 0x1000000000000uLL) >> 48)
       + ((v10 & 0x2000000000000uLL) >> 49)
       + ((v10 & 0x4000000000000uLL) >> 50);
}

unint64_t sub_1C4D41594(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a1[156];
  if ((v2 & 1) != 0)
  {
    *(_DWORD *)a2 = *a1;
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0)
        goto LABEL_4;
      goto LABEL_29;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_DWORD *)(a2 + 4) = a1[1];
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0)
      goto LABEL_5;
    goto LABEL_30;
  }
LABEL_29:
  *(_BYTE *)(a2 + 8) = a1[2] != 0;
  if ((v2 & 8) == 0)
  {
LABEL_5:
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_31;
  }
LABEL_30:
  *(_BYTE *)(a2 + 9) = a1[3] != 0;
  if ((v2 & 0x10) == 0)
  {
LABEL_6:
    if ((v2 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_32;
  }
LABEL_31:
  *(_BYTE *)(a2 + 10) = a1[4] != 0;
  if ((v2 & 0x20) == 0)
  {
LABEL_7:
    if ((v2 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_33;
  }
LABEL_32:
  *(_BYTE *)(a2 + 11) = a1[5] != 0;
  if ((v2 & 0x40) == 0)
  {
LABEL_8:
    if ((v2 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_34;
  }
LABEL_33:
  *(_BYTE *)(a2 + 12) = a1[6] != 0;
  if ((v2 & 0x80) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  *(_BYTE *)(a2 + 13) = a1[7] != 0;
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  *(_BYTE *)(a2 + 14) = a1[8] != 0;
  if ((v2 & 0x200) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  *(_BYTE *)(a2 + 15) = a1[9] != 0;
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  *(_DWORD *)(a2 + 16) = a1[10];
  if ((v2 & 0x800) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  *(_DWORD *)(a2 + 20) = a1[11];
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_40;
  }
LABEL_39:
  *(_DWORD *)(a2 + 24) = a1[12];
  if ((v2 & 0x2000) == 0)
  {
LABEL_15:
    if ((v2 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_41;
  }
LABEL_40:
  *(_DWORD *)(a2 + 28) = a1[13];
  if ((v2 & 0x4000) == 0)
  {
LABEL_16:
    if ((v2 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_42;
  }
LABEL_41:
  *(_DWORD *)(a2 + 32) = a1[14];
  if ((v2 & 0x8000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_43;
  }
LABEL_42:
  *(_DWORD *)(a2 + 36) = a1[15];
  if ((v2 & 0x10000) == 0)
  {
LABEL_18:
    if ((v2 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_44;
  }
LABEL_43:
  *(_DWORD *)(a2 + 40) = a1[16];
  if ((v2 & 0x20000) == 0)
  {
LABEL_19:
    if ((v2 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_45;
  }
LABEL_44:
  *(_DWORD *)(a2 + 44) = a1[17];
  if ((v2 & 0x40000) == 0)
  {
LABEL_20:
    if ((v2 & 0x80000) == 0)
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_45:
  *(_DWORD *)(a2 + 48) = a1[18];
  if ((v2 & 0x80000) != 0)
LABEL_21:
    *(_DWORD *)(a2 + 52) = a1[19];
LABEL_22:
  if ((v2 & 0x100000) != 0)
    *(_DWORD *)(a2 + 56) = a1[20];
  if ((v2 & 0x200000) != 0)
    *(_BYTE *)(a2 + 60) = a1[21] != 0;
  return ((unint64_t)(v2 & 2) >> 1)
       + (v2 & 1)
       + ((unint64_t)(v2 & 4) >> 2)
       + ((unint64_t)(v2 & 8) >> 3)
       + ((unint64_t)(v2 & 0x10) >> 4)
       + ((unint64_t)(v2 & 0x20) >> 5)
       + ((unint64_t)(v2 & 0x40) >> 6)
       + ((unint64_t)(v2 & 0x80) >> 7)
       + ((unint64_t)(v2 & 0x100) >> 8)
       + ((unint64_t)(v2 & 0x200) >> 9)
       + ((unint64_t)(v2 & 0x400) >> 10)
       + ((unint64_t)(v2 & 0x800) >> 11)
       + ((unint64_t)(v2 & 0x1000) >> 12)
       + ((unint64_t)(v2 & 0x2000) >> 13)
       + ((unint64_t)(v2 & 0x4000) >> 14)
       + ((unint64_t)((unsigned __int16)v2 & 0x8000) >> 15)
       + ((v2 & 0x10000uLL) >> 16)
       + ((v2 & 0x20000uLL) >> 17)
       + ((v2 & 0x40000uLL) >> 18)
       + ((v2 & 0x80000uLL) >> 19)
       + ((v2 & 0x100000uLL) >> 20)
       + ((v2 & 0x200000uLL) >> 21);
}

unint64_t sub_1C4D4185C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_43;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_44;
  }
LABEL_43:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_45;
  }
LABEL_44:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_45:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_49;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_50;
  }
LABEL_49:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_51;
  }
LABEL_50:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_52;
  }
LABEL_51:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_53;
  }
LABEL_52:
  *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_54;
  }
LABEL_53:
  *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 112);
  if ((v5 & 0x8000) == 0)
  {
LABEL_20:
    if ((v5 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_55;
  }
LABEL_54:
  *(_DWORD *)(a2 + 32) = *(_QWORD *)(a1 + 120);
  if ((v5 & 0x10000) == 0)
  {
LABEL_21:
    if ((v5 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_56;
  }
LABEL_55:
  *(_BYTE *)(a2 + 36) = *(_QWORD *)(a1 + 128) != 0;
  if ((v5 & 0x20000) == 0)
  {
LABEL_22:
    if ((v5 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_57;
  }
LABEL_56:
  *(_BYTE *)(a2 + 37) = *(_QWORD *)(a1 + 136) != 0;
  if ((v5 & 0x40000) == 0)
  {
LABEL_23:
    if ((v5 & 0x80000) == 0)
      goto LABEL_24;
    goto LABEL_58;
  }
LABEL_57:
  *(_BYTE *)(a2 + 38) = *(_QWORD *)(a1 + 144) != 0;
  if ((v5 & 0x80000) == 0)
  {
LABEL_24:
    if ((v5 & 0x100000) == 0)
      goto LABEL_25;
    goto LABEL_59;
  }
LABEL_58:
  *(_BYTE *)(a2 + 39) = *(_QWORD *)(a1 + 152) != 0;
  if ((v5 & 0x100000) == 0)
  {
LABEL_25:
    if ((v5 & 0x200000) == 0)
      goto LABEL_26;
    goto LABEL_60;
  }
LABEL_59:
  *(_BYTE *)(a2 + 40) = *(_QWORD *)(a1 + 160) != 0;
  if ((v5 & 0x200000) == 0)
  {
LABEL_26:
    if ((v5 & 0x400000) == 0)
      goto LABEL_27;
    goto LABEL_61;
  }
LABEL_60:
  *(_BYTE *)(a2 + 41) = *(_QWORD *)(a1 + 168) != 0;
  if ((v5 & 0x400000) == 0)
  {
LABEL_27:
    if ((v5 & 0x800000) == 0)
      goto LABEL_28;
    goto LABEL_62;
  }
LABEL_61:
  *(_BYTE *)(a2 + 42) = *(_QWORD *)(a1 + 176) != 0;
  if ((v5 & 0x800000) == 0)
  {
LABEL_28:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_29;
    goto LABEL_63;
  }
LABEL_62:
  *(_BYTE *)(a2 + 43) = *(_QWORD *)(a1 + 184) != 0;
  if ((v5 & 0x1000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_30;
    goto LABEL_64;
  }
LABEL_63:
  *(_DWORD *)(a2 + 44) = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_31;
    goto LABEL_65;
  }
LABEL_64:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 200);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_32;
    goto LABEL_66;
  }
LABEL_65:
  *(_DWORD *)(a2 + 52) = *(_QWORD *)(a1 + 208);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_33;
    goto LABEL_67;
  }
LABEL_66:
  *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_34;
    goto LABEL_68;
  }
LABEL_67:
  *(_DWORD *)(a2 + 60) = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_36;
    goto LABEL_35;
  }
LABEL_68:
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 232);
  if ((v5 & 0x40000000) != 0)
LABEL_35:
    *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 240);
LABEL_36:
  v6 = v2 & 1;
  if ((v5 & 0x80000000) != 0)
    *(_DWORD *)(a2 + 72) = *(_QWORD *)(a1 + 248);
  v7 = v3 & 2;
  v8 = v3 & 4;
  v9 = v3 & 8;
  v10 = v3 & 0x10;
  v11 = v3 & 0x20;
  v12 = v3 & 0x40;
  if ((v5 & 0x100000000) != 0)
    *(_BYTE *)(a2 + 76) = *(_QWORD *)(a1 + 256) != 0;
  return (v7 >> 1)
       + v6
       + (v8 >> 2)
       + (v9 >> 3)
       + (v10 >> 4)
       + (v11 >> 5)
       + (v12 >> 6)
       + ((unint64_t)(v4 & 0x80) >> 7)
       + ((unint64_t)(v4 & 0x100) >> 8)
       + ((unint64_t)(v5 & 0x200) >> 9)
       + ((unint64_t)(v5 & 0x400) >> 10)
       + ((unint64_t)(v5 & 0x800) >> 11)
       + ((unint64_t)(v5 & 0x1000) >> 12)
       + ((unint64_t)(v5 & 0x2000) >> 13)
       + ((unint64_t)(v5 & 0x4000) >> 14)
       + ((unint64_t)((unsigned __int16)v5 & 0x8000) >> 15)
       + ((v5 & 0x10000uLL) >> 16)
       + ((v5 & 0x20000uLL) >> 17)
       + ((v5 & 0x40000uLL) >> 18)
       + ((v5 & 0x80000uLL) >> 19)
       + ((v5 & 0x100000uLL) >> 20)
       + ((v5 & 0x200000uLL) >> 21)
       + ((v5 & 0x400000uLL) >> 22)
       + ((v5 & 0x800000uLL) >> 23)
       + ((v5 & 0x1000000) >> 24)
       + ((v5 & 0x2000000) >> 25)
       + ((v5 & 0x4000000) >> 26)
       + ((v5 & 0x8000000) >> 27)
       + ((v5 & 0x10000000) >> 28)
       + ((v5 & 0x20000000) >> 29)
       + ((v5 & 0x40000000) >> 30)
       + (v5 >> 31)
       + (BYTE4(v5) & 1);
}

unint64_t sub_1C4D41CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_79;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_80;
  }
LABEL_79:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_81;
  }
LABEL_80:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_81:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_85;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_86;
  }
LABEL_85:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_87;
  }
LABEL_86:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_87:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_91;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_92;
  }
LABEL_91:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_93;
  }
LABEL_92:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_93:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_97;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_98;
  }
LABEL_97:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_99;
  }
LABEL_98:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_99:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) != 0)
LABEL_36:
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
LABEL_37:
  v9 = v8;
  if ((v8 & 0x10000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 224) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_39:
      if ((v9 & 0x40000000) == 0)
        goto LABEL_40;
      goto LABEL_103;
    }
  }
  else if ((v8 & 0x20000000) == 0)
  {
    goto LABEL_39;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 232);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_40:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_104;
  }
LABEL_103:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 240) & 0x1FF;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_105;
  }
LABEL_104:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_105:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 256) & 0x1FFFF;
  if ((v9 & 0x200000000) != 0)
LABEL_43:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 264) & 0x1FFF;
LABEL_44:
  v10 = v9;
  if ((v9 & 0x400000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 272) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x800000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 280);
  v11 = v10;
  if ((v10 & 0x1000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 288) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x2000000000) == 0)
    {
LABEL_50:
      if ((v11 & 0x4000000000) == 0)
        goto LABEL_51;
      goto LABEL_109;
    }
  }
  else if ((v10 & 0x2000000000) == 0)
  {
    goto LABEL_50;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 296);
  if ((v11 & 0x4000000000) == 0)
  {
LABEL_51:
    if ((v11 & 0x8000000000) == 0)
      goto LABEL_52;
    goto LABEL_110;
  }
LABEL_109:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_111;
  }
LABEL_110:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 312) != 0;
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_112;
  }
LABEL_111:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 320);
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_113;
  }
LABEL_112:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 328) != 0;
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_114;
  }
LABEL_113:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_115;
  }
LABEL_114:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_116;
  }
LABEL_115:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_117;
  }
LABEL_116:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_118;
  }
LABEL_117:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_120;
  }
LABEL_119:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_124;
  }
LABEL_123:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 416);
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_125;
  }
LABEL_124:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 424);
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_126;
  }
LABEL_125:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 432);
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 440);
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_72;
    goto LABEL_71;
  }
LABEL_128:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) != 0)
LABEL_71:
    *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 464);
LABEL_72:
  v12 = v2 & 1;
  if ((v11 & 0x800000000000000) != 0)
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 472);
  v13 = v3 & 2;
  v14 = v3 & 4;
  v15 = v3 & 8;
  v16 = v3 & 0x10;
  v17 = v3 & 0x20;
  v18 = v3 & 0x40;
  v19 = v4 & 0x80;
  v20 = v4 & 0x100;
  v25 = (unsigned __int16)v6 & 0x8000;
  v26 = v6 & 0x10000;
  v27 = v6 & 0x20000;
  v28 = v6 & 0x40000;
  v29 = v6 & 0x80000;
  v30 = v6 & 0x100000;
  if ((v11 & 0x1000000000000000) != 0)
    *(_BYTE *)(a2 + 132) = *(_QWORD *)(a1 + 480) != 0;
  v21 = v5 & 0x200;
  v24 = v5 & 0x4000;
  v23 = v5 & 0x2000;
  v22 = v5 & 0x1000;
  v32 = v7 & 0x400000;
  v33 = v8 & 0x800000;
  v34 = v8 & 0x1000000;
  v35 = v8 & 0x2000000;
  v36 = v8 & 0x4000000;
  v37 = v8 & 0x8000000;
  v38 = v8 & 0x10000000;
  v40 = v9 & 0x200000000;
  v41 = v9 & 0x400000000;
  v42 = v10 & 0x800000000;
  v43 = v11 & 0x2000000000;
  v44 = v10 & 0x1000000000;
  v45 = v11 & 0x4000000000;
  v46 = v11 & 0x8000000000;
  v47 = v11 & 0x10000000000;
  v48 = v11 & 0x20000000000;
  v49 = v11 & 0x40000000000;
  v39 = BYTE4(v9) & 1;
  LODWORD(v21) = (v13 >> 1)
               + v12
               + (v14 >> 2)
               + (v15 >> 3)
               + (v16 >> 4)
               + (v17 >> 5)
               + (v18 >> 6)
               + (v19 >> 7)
               + (v20 >> 8)
               + (v21 >> 9)
               + ((unint64_t)(v5 & 0x400) >> 10)
               + ((unint64_t)(v5 & 0x800) >> 11)
               + (v22 >> 12)
               + (v23 >> 13)
               + (v24 >> 14)
               + (v25 >> 15)
               + (v26 >> 16)
               + (v27 >> 17)
               + (v28 >> 18)
               + (v29 >> 19)
               + (v30 >> 20)
               + ((v7 & 0x200000uLL) >> 21)
               + (v32 >> 22)
               + (v33 >> 23)
               + (v34 >> 24)
               + (v35 >> 25)
               + (v36 >> 26)
               + (v37 >> 27)
               + (v38 >> 28)
               + ((v9 & 0x20000000) >> 29)
               + ((v9 & 0x40000000) >> 30)
               + (v9 >> 31)
               + v39
               + (v40 >> 33)
               + (v41 >> 34)
               + (v42 >> 35)
               + (v44 >> 36)
               + (v43 >> 37)
               + (v45 >> 38)
               + (v46 >> 39)
               + (v47 >> 40)
               + (v48 >> 41)
               + (v49 >> 42);
  return (_DWORD)v21
       + ((v11 & 0x80000000000uLL) >> 43)
       + ((v11 & 0x100000000000uLL) >> 44)
       + ((v11 & 0x200000000000uLL) >> 45)
       + ((v11 & 0x400000000000uLL) >> 46)
       + ((v11 & 0x800000000000uLL) >> 47)
       + ((v11 & 0x1000000000000uLL) >> 48)
       + ((v11 & 0x2000000000000uLL) >> 49)
       + ((v11 & 0x4000000000000uLL) >> 50)
       + ((v11 & 0x8000000000000uLL) >> 51)
       + ((v11 & 0x10000000000000uLL) >> 52)
       + ((v11 & 0x20000000000000uLL) >> 53)
       + ((v11 & 0x40000000000000uLL) >> 54)
       + ((v11 & 0x80000000000000uLL) >> 55)
       + ((v11 & 0x100000000000000uLL) >> 56)
       + ((v11 & 0x200000000000000uLL) >> 57)
       + ((v11 & 0x400000000000000uLL) >> 58)
       + ((v11 & 0x800000000000000uLL) >> 59)
       + ((v11 & 0x1000000000000000uLL) >> 60);
}

unint64_t sub_1C4D425A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_79;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_80;
  }
LABEL_79:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_81;
  }
LABEL_80:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_81:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_85;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_86;
  }
LABEL_85:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_87;
  }
LABEL_86:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_87:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_91;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_92;
  }
LABEL_91:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_93;
  }
LABEL_92:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_93:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_97;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_98;
  }
LABEL_97:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_99;
  }
LABEL_98:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_99:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) != 0)
LABEL_36:
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
LABEL_37:
  v9 = v8;
  if ((v8 & 0x10000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 224) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_39:
      if ((v9 & 0x40000000) == 0)
        goto LABEL_40;
      goto LABEL_103;
    }
  }
  else if ((v8 & 0x20000000) == 0)
  {
    goto LABEL_39;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 232);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_40:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_104;
  }
LABEL_103:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 240) & 0x1FF;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_105;
  }
LABEL_104:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_105:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 256) & 0x1FFFF;
  if ((v9 & 0x200000000) != 0)
LABEL_43:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 264) & 0x1FFF;
LABEL_44:
  v10 = v9;
  if ((v9 & 0x400000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 272) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x800000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 280);
  v11 = v10;
  if ((v10 & 0x1000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 288) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x2000000000) == 0)
    {
LABEL_50:
      if ((v11 & 0x4000000000) == 0)
        goto LABEL_51;
      goto LABEL_109;
    }
  }
  else if ((v10 & 0x2000000000) == 0)
  {
    goto LABEL_50;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 296);
  if ((v11 & 0x4000000000) == 0)
  {
LABEL_51:
    if ((v11 & 0x8000000000) == 0)
      goto LABEL_52;
    goto LABEL_110;
  }
LABEL_109:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_111;
  }
LABEL_110:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 312) != 0;
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_112;
  }
LABEL_111:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 320);
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_113;
  }
LABEL_112:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 328) != 0;
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_114;
  }
LABEL_113:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_115;
  }
LABEL_114:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_116;
  }
LABEL_115:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_117;
  }
LABEL_116:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_118;
  }
LABEL_117:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_120;
  }
LABEL_119:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_124;
  }
LABEL_123:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 416);
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_125;
  }
LABEL_124:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 424);
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_126;
  }
LABEL_125:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 432);
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 440);
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_72;
    goto LABEL_71;
  }
LABEL_128:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) != 0)
LABEL_71:
    *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 464);
LABEL_72:
  v12 = v2 & 1;
  if ((v11 & 0x800000000000000) != 0)
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 472);
  v13 = v3 & 2;
  v14 = v3 & 4;
  v15 = v3 & 8;
  v16 = v3 & 0x10;
  v17 = v3 & 0x20;
  v18 = v3 & 0x40;
  v19 = v4 & 0x80;
  v20 = v4 & 0x100;
  v25 = (unsigned __int16)v6 & 0x8000;
  v26 = v6 & 0x10000;
  v27 = v6 & 0x20000;
  v28 = v6 & 0x40000;
  v29 = v6 & 0x80000;
  v30 = v6 & 0x100000;
  if ((v11 & 0x1000000000000000) != 0)
    *(_BYTE *)(a2 + 132) = *(_QWORD *)(a1 + 480) != 0;
  v21 = v5 & 0x200;
  v24 = v5 & 0x4000;
  v23 = v5 & 0x2000;
  v22 = v5 & 0x1000;
  v32 = v7 & 0x400000;
  v33 = v8 & 0x800000;
  v34 = v8 & 0x1000000;
  v35 = v8 & 0x2000000;
  v36 = v8 & 0x4000000;
  v37 = v8 & 0x8000000;
  v38 = v8 & 0x10000000;
  v40 = v9 & 0x200000000;
  v41 = v9 & 0x400000000;
  v42 = v10 & 0x800000000;
  v43 = v11 & 0x2000000000;
  v44 = v10 & 0x1000000000;
  v45 = v11 & 0x4000000000;
  v46 = v11 & 0x8000000000;
  v47 = v11 & 0x10000000000;
  v48 = v11 & 0x20000000000;
  v49 = v11 & 0x40000000000;
  v39 = BYTE4(v9) & 1;
  LODWORD(v21) = (v13 >> 1)
               + v12
               + (v14 >> 2)
               + (v15 >> 3)
               + (v16 >> 4)
               + (v17 >> 5)
               + (v18 >> 6)
               + (v19 >> 7)
               + (v20 >> 8)
               + (v21 >> 9)
               + ((unint64_t)(v5 & 0x400) >> 10)
               + ((unint64_t)(v5 & 0x800) >> 11)
               + (v22 >> 12)
               + (v23 >> 13)
               + (v24 >> 14)
               + (v25 >> 15)
               + (v26 >> 16)
               + (v27 >> 17)
               + (v28 >> 18)
               + (v29 >> 19)
               + (v30 >> 20)
               + ((v7 & 0x200000uLL) >> 21)
               + (v32 >> 22)
               + (v33 >> 23)
               + (v34 >> 24)
               + (v35 >> 25)
               + (v36 >> 26)
               + (v37 >> 27)
               + (v38 >> 28)
               + ((v9 & 0x20000000) >> 29)
               + ((v9 & 0x40000000) >> 30)
               + (v9 >> 31)
               + v39
               + (v40 >> 33)
               + (v41 >> 34)
               + (v42 >> 35)
               + (v44 >> 36)
               + (v43 >> 37)
               + (v45 >> 38)
               + (v46 >> 39)
               + (v47 >> 40)
               + (v48 >> 41)
               + (v49 >> 42);
  return (_DWORD)v21
       + ((v11 & 0x80000000000uLL) >> 43)
       + ((v11 & 0x100000000000uLL) >> 44)
       + ((v11 & 0x200000000000uLL) >> 45)
       + ((v11 & 0x400000000000uLL) >> 46)
       + ((v11 & 0x800000000000uLL) >> 47)
       + ((v11 & 0x1000000000000uLL) >> 48)
       + ((v11 & 0x2000000000000uLL) >> 49)
       + ((v11 & 0x4000000000000uLL) >> 50)
       + ((v11 & 0x8000000000000uLL) >> 51)
       + ((v11 & 0x10000000000000uLL) >> 52)
       + ((v11 & 0x20000000000000uLL) >> 53)
       + ((v11 & 0x40000000000000uLL) >> 54)
       + ((v11 & 0x80000000000000uLL) >> 55)
       + ((v11 & 0x100000000000000uLL) >> 56)
       + ((v11 & 0x200000000000000uLL) >> 57)
       + ((v11 & 0x400000000000000uLL) >> 58)
       + ((v11 & 0x800000000000000uLL) >> 59)
       + ((v11 & 0x1000000000000000uLL) >> 60);
}

unint64_t sub_1C4D42E78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_79;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_80;
  }
LABEL_79:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_81;
  }
LABEL_80:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_81:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_85;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_86;
  }
LABEL_85:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_87;
  }
LABEL_86:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_87:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_91;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_92;
  }
LABEL_91:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_93;
  }
LABEL_92:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_93:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_97;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_98;
  }
LABEL_97:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_99;
  }
LABEL_98:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_99:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) != 0)
LABEL_36:
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
LABEL_37:
  v9 = v8;
  if ((v8 & 0x10000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 224) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_39:
      if ((v9 & 0x40000000) == 0)
        goto LABEL_40;
      goto LABEL_103;
    }
  }
  else if ((v8 & 0x20000000) == 0)
  {
    goto LABEL_39;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 232);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_40:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_104;
  }
LABEL_103:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 240) & 0x1FF;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_105;
  }
LABEL_104:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_105:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 256) & 0x1FFFF;
  if ((v9 & 0x200000000) != 0)
LABEL_43:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 264) & 0x1FFF;
LABEL_44:
  v10 = v9;
  if ((v9 & 0x400000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 272) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x800000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 280);
  v11 = v10;
  if ((v10 & 0x1000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 288) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x2000000000) == 0)
    {
LABEL_50:
      if ((v11 & 0x4000000000) == 0)
        goto LABEL_51;
      goto LABEL_109;
    }
  }
  else if ((v10 & 0x2000000000) == 0)
  {
    goto LABEL_50;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 296);
  if ((v11 & 0x4000000000) == 0)
  {
LABEL_51:
    if ((v11 & 0x8000000000) == 0)
      goto LABEL_52;
    goto LABEL_110;
  }
LABEL_109:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_111;
  }
LABEL_110:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 312) != 0;
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_112;
  }
LABEL_111:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 320);
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_113;
  }
LABEL_112:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 328) != 0;
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_114;
  }
LABEL_113:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_115;
  }
LABEL_114:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_116;
  }
LABEL_115:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_117;
  }
LABEL_116:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_118;
  }
LABEL_117:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_120;
  }
LABEL_119:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_124;
  }
LABEL_123:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 416);
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_125;
  }
LABEL_124:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 424);
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_126;
  }
LABEL_125:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 432);
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 440);
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_72;
    goto LABEL_71;
  }
LABEL_128:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) != 0)
LABEL_71:
    *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 464);
LABEL_72:
  v12 = v2 & 1;
  if ((v11 & 0x800000000000000) != 0)
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 472);
  v13 = v3 & 2;
  v14 = v3 & 4;
  v15 = v3 & 8;
  v16 = v3 & 0x10;
  v17 = v3 & 0x20;
  v18 = v3 & 0x40;
  v19 = v4 & 0x80;
  v20 = v4 & 0x100;
  v25 = (unsigned __int16)v6 & 0x8000;
  v26 = v6 & 0x10000;
  v27 = v6 & 0x20000;
  v28 = v6 & 0x40000;
  v29 = v6 & 0x80000;
  v30 = v6 & 0x100000;
  if ((v11 & 0x1000000000000000) != 0)
    *(_BYTE *)(a2 + 132) = *(_QWORD *)(a1 + 480) != 0;
  v21 = v5 & 0x200;
  v24 = v5 & 0x4000;
  v23 = v5 & 0x2000;
  v22 = v5 & 0x1000;
  v32 = v7 & 0x400000;
  v33 = v8 & 0x800000;
  v34 = v8 & 0x1000000;
  v35 = v8 & 0x2000000;
  v36 = v8 & 0x4000000;
  v37 = v8 & 0x8000000;
  v38 = v8 & 0x10000000;
  v40 = v9 & 0x200000000;
  v41 = v9 & 0x400000000;
  v42 = v10 & 0x800000000;
  v43 = v11 & 0x2000000000;
  v44 = v10 & 0x1000000000;
  v45 = v11 & 0x4000000000;
  v46 = v11 & 0x8000000000;
  v47 = v11 & 0x10000000000;
  v48 = v11 & 0x20000000000;
  v49 = v11 & 0x40000000000;
  v39 = BYTE4(v9) & 1;
  LODWORD(v21) = (v13 >> 1)
               + v12
               + (v14 >> 2)
               + (v15 >> 3)
               + (v16 >> 4)
               + (v17 >> 5)
               + (v18 >> 6)
               + (v19 >> 7)
               + (v20 >> 8)
               + (v21 >> 9)
               + ((unint64_t)(v5 & 0x400) >> 10)
               + ((unint64_t)(v5 & 0x800) >> 11)
               + (v22 >> 12)
               + (v23 >> 13)
               + (v24 >> 14)
               + (v25 >> 15)
               + (v26 >> 16)
               + (v27 >> 17)
               + (v28 >> 18)
               + (v29 >> 19)
               + (v30 >> 20)
               + ((v7 & 0x200000uLL) >> 21)
               + (v32 >> 22)
               + (v33 >> 23)
               + (v34 >> 24)
               + (v35 >> 25)
               + (v36 >> 26)
               + (v37 >> 27)
               + (v38 >> 28)
               + ((v9 & 0x20000000) >> 29)
               + ((v9 & 0x40000000) >> 30)
               + (v9 >> 31)
               + v39
               + (v40 >> 33)
               + (v41 >> 34)
               + (v42 >> 35)
               + (v44 >> 36)
               + (v43 >> 37)
               + (v45 >> 38)
               + (v46 >> 39)
               + (v47 >> 40)
               + (v48 >> 41)
               + (v49 >> 42);
  return (_DWORD)v21
       + ((v11 & 0x80000000000uLL) >> 43)
       + ((v11 & 0x100000000000uLL) >> 44)
       + ((v11 & 0x200000000000uLL) >> 45)
       + ((v11 & 0x400000000000uLL) >> 46)
       + ((v11 & 0x800000000000uLL) >> 47)
       + ((v11 & 0x1000000000000uLL) >> 48)
       + ((v11 & 0x2000000000000uLL) >> 49)
       + ((v11 & 0x4000000000000uLL) >> 50)
       + ((v11 & 0x8000000000000uLL) >> 51)
       + ((v11 & 0x10000000000000uLL) >> 52)
       + ((v11 & 0x20000000000000uLL) >> 53)
       + ((v11 & 0x40000000000000uLL) >> 54)
       + ((v11 & 0x80000000000000uLL) >> 55)
       + ((v11 & 0x100000000000000uLL) >> 56)
       + ((v11 & 0x200000000000000uLL) >> 57)
       + ((v11 & 0x400000000000000uLL) >> 58)
       + ((v11 & 0x800000000000000uLL) >> 59)
       + ((v11 & 0x1000000000000000uLL) >> 60);
}

unint64_t sub_1C4D4374C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int v54;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_88;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_89;
  }
LABEL_88:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_90;
  }
LABEL_89:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_90:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_94;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_95;
  }
LABEL_94:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_96;
  }
LABEL_95:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_96:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_100;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_101;
  }
LABEL_100:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_102;
  }
LABEL_101:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_102:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_106;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_107;
  }
LABEL_106:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_108;
  }
LABEL_107:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_109;
  }
LABEL_108:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_110;
  }
LABEL_109:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v8 & 0x20000000) == 0)
      goto LABEL_38;
    goto LABEL_111;
  }
LABEL_110:
  *(_BYTE *)(a2 + 53) = *(_QWORD *)(a1 + 224) != 0;
  if ((v8 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x40000000) == 0)
      goto LABEL_40;
    goto LABEL_39;
  }
LABEL_111:
  *(_BYTE *)(a2 + 54) = *(_QWORD *)(a1 + 232) != 0;
  if ((v8 & 0x40000000) != 0)
LABEL_39:
    *(_BYTE *)(a2 + 55) = *(_QWORD *)(a1 + 240) != 0;
LABEL_40:
  v9 = v8;
  if ((v8 & 0x80000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 248) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x100000000) == 0)
    {
LABEL_42:
      if ((v9 & 0x200000000) == 0)
        goto LABEL_43;
      goto LABEL_115;
    }
  }
  else if ((v8 & 0x100000000) == 0)
  {
    goto LABEL_42;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 256);
  if ((v9 & 0x200000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x400000000) == 0)
      goto LABEL_44;
    goto LABEL_116;
  }
LABEL_115:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 264) & 0x1FF;
  if ((v9 & 0x400000000) == 0)
  {
LABEL_44:
    if ((v9 & 0x800000000) == 0)
      goto LABEL_45;
    goto LABEL_117;
  }
LABEL_116:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 272) & 0x1FF;
  if ((v9 & 0x800000000) == 0)
  {
LABEL_45:
    if ((v9 & 0x1000000000) == 0)
      goto LABEL_47;
    goto LABEL_46;
  }
LABEL_117:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 280) & 0x1FFFF;
  if ((v9 & 0x1000000000) != 0)
LABEL_46:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 288) & 0x1FFF;
LABEL_47:
  v10 = v9;
  if ((v9 & 0x2000000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 296) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x4000000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 304);
  v11 = v10;
  if ((v10 & 0x8000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 312) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x10000000000) == 0)
    {
LABEL_53:
      if ((v11 & 0x20000000000) == 0)
        goto LABEL_54;
      goto LABEL_121;
    }
  }
  else if ((v10 & 0x10000000000) == 0)
  {
    goto LABEL_53;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 320);
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_122;
  }
LABEL_121:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 328);
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 336) != 0;
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_124;
  }
LABEL_123:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_125;
  }
LABEL_124:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_126;
  }
LABEL_125:
  *(_BYTE *)(a2 + 81) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_127;
  }
LABEL_126:
  *(_BYTE *)(a2 + 82) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_128;
  }
LABEL_127:
  *(_BYTE *)(a2 + 83) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_129;
  }
LABEL_128:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 384);
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_130;
  }
LABEL_129:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 392);
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_131;
  }
LABEL_130:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_132;
  }
LABEL_131:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_133;
  }
LABEL_132:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 416) != 0;
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_134;
  }
LABEL_133:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 424) != 0;
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_135;
  }
LABEL_134:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 432) != 0;
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_136;
  }
LABEL_135:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 440) != 0;
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_137;
  }
LABEL_136:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 448) != 0;
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_138;
  }
LABEL_137:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 456) != 0;
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_72;
    goto LABEL_139;
  }
LABEL_138:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) == 0)
  {
LABEL_72:
    if ((v11 & 0x1000000000000000) == 0)
      goto LABEL_73;
    goto LABEL_140;
  }
LABEL_139:
  *(_BYTE *)(a2 + 104) = *(_QWORD *)(a1 + 472) != 0;
  if ((v11 & 0x1000000000000000) == 0)
  {
LABEL_73:
    if ((v11 & 0x2000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_141;
  }
LABEL_140:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 480);
  if ((v11 & 0x2000000000000000) == 0)
  {
LABEL_74:
    if ((v11 & 0x4000000000000000) == 0)
      goto LABEL_75;
LABEL_142:
    *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 496);
    if ((v11 & 0x8000000000000000) == 0)
      goto LABEL_76;
    goto LABEL_143;
  }
LABEL_141:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 488);
  if ((v11 & 0x4000000000000000) != 0)
    goto LABEL_142;
LABEL_75:
  if ((v11 & 0x8000000000000000) == 0)
    goto LABEL_76;
LABEL_143:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 504);
LABEL_76:
  v12 = *(_QWORD *)(a1 + 1256);
  if ((v12 & 1) != 0)
  {
    *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 512);
    if ((v12 & 2) == 0)
    {
LABEL_78:
      if ((v12 & 4) == 0)
        goto LABEL_79;
      goto LABEL_146;
    }
  }
  else if ((v12 & 2) == 0)
  {
    goto LABEL_78;
  }
  *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 520);
  if ((v12 & 4) == 0)
  {
LABEL_79:
    if ((v12 & 8) == 0)
      goto LABEL_81;
    goto LABEL_80;
  }
LABEL_146:
  *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 528);
  if ((v12 & 8) != 0)
LABEL_80:
    *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 536);
LABEL_81:
  if ((v12 & 0x10) != 0)
    *(_BYTE *)(a2 + 140) = *(_QWORD *)(a1 + 544) != 0;
  v13 = v3 & 2;
  v14 = v3 & 4;
  v15 = v3 & 8;
  v16 = v3 & 0x10;
  v17 = v3 & 0x20;
  v18 = v3 & 0x40;
  v19 = v5 & 0x200;
  v20 = v5 & 0x400;
  v21 = v5 & 0x800;
  v22 = v5 & 0x1000;
  v23 = v5 & 0x2000;
  v24 = v5 & 0x4000;
  v25 = (unsigned __int16)v6 & 0x8000;
  v26 = v6 & 0x10000;
  v27 = v6 & 0x20000;
  v31 = v6 & 0x40000;
  v32 = v6 & 0x80000;
  v28 = v6 & 0x100000;
  if ((v12 & 0x20) != 0)
    *(_DWORD *)(a2 + 144) = *(_QWORD *)(a1 + 552);
  v29 = (v13 >> 1)
      + (v2 & 1)
      + (v14 >> 2)
      + (v15 >> 3)
      + (v16 >> 4)
      + (v17 >> 5)
      + (v18 >> 6)
      + ((unint64_t)(v4 & 0x80) >> 7)
      + ((v4 & 0x100) >> 8)
      + (v19 >> 9)
      + (v20 >> 10)
      + (v21 >> 11)
      + (v22 >> 12)
      + (v23 >> 13)
      + (v24 >> 14)
      + (v25 >> 15)
      + (v26 >> 16)
      + (v27 >> 17)
      + (v31 >> 18)
      + (v32 >> 19)
      + (v28 >> 20)
      + ((v7 & 0x200000) >> 21)
      + ((v7 & 0x400000) >> 22)
      + ((v8 & 0x800000) >> 23)
      + ((v8 & 0x1000000) >> 24)
      + ((v8 & 0x2000000) >> 25)
      + ((v8 & 0x4000000) >> 26)
      + ((v8 & 0x8000000) >> 27)
      + ((v8 & 0x10000000) >> 28)
      + ((v8 & 0x20000000) >> 29)
      + ((v8 & 0x40000000) >> 30);
  v34 = v9 & 0x200000000;
  v35 = v9 & 0x400000000;
  v36 = v9 & 0x800000000;
  v37 = v9 & 0x1000000000;
  v38 = v9 & 0x2000000000;
  v39 = v10 & 0x4000000000;
  v40 = v10 & 0x8000000000;
  v41 = v11 & 0x10000000000;
  v42 = v11 & 0x20000000000;
  v43 = v11 & 0x80000000000;
  v44 = v11 & 0x40000000000;
  v45 = v11 & 0x100000000000;
  v46 = v11 & 0x200000000000;
  v47 = v12 & 0x10;
  v48 = v12 & 0x20;
  v49 = v12 & 8;
  v50 = v12 & 4;
  v51 = v12 & 2;
  v52 = v11 & 0x4000000000000000;
  v53 = v11 & 0x2000000000000000;
  v33 = BYTE4(v9) & 1;
  v54 = v12 & 1;
  return v29
       + (v8 >> 31)
       + v33
       + (v34 >> 33)
       + (v35 >> 34)
       + (v36 >> 35)
       + (v37 >> 36)
       + (v38 >> 37)
       + (v39 >> 38)
       + (v40 >> 39)
       + (v11 >> 63)
       + (v41 >> 40)
       + (v42 >> 41)
       + (v44 >> 42)
       + (v43 >> 43)
       + (v45 >> 44)
       + (v46 >> 45)
       + ((v11 & 0x400000000000) >> 46)
       + ((v11 & 0x800000000000) >> 47)
       + ((v11 & 0x1000000000000) >> 48)
       + ((v11 & 0x2000000000000) >> 49)
       + ((v11 & 0x4000000000000) >> 50)
       + ((v11 & 0x8000000000000) >> 51)
       + ((v11 & 0x10000000000000) >> 52)
       + ((v11 & 0x20000000000000) >> 53)
       + ((v11 & 0x40000000000000) >> 54)
       + ((v11 & 0x80000000000000) >> 55)
       + ((v11 & 0x100000000000000) >> 56)
       + ((v11 & 0x200000000000000) >> 57)
       + ((v11 & 0x400000000000000) >> 58)
       + ((v11 & 0x800000000000000) >> 59)
       + ((v11 & 0x1000000000000000) >> 60)
       + (v53 >> 61)
       + (v52 >> 62)
       + v54
       + (v51 >> 1)
       + (v50 >> 2)
       + (v49 >> 3)
       + (v47 >> 4)
       + (v48 >> 5);
}

unint64_t sub_1C4D44188(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v21;
  unint64_t v22;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_83;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_84;
  }
LABEL_83:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_85;
  }
LABEL_84:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_85:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_89;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_90;
  }
LABEL_89:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_91;
  }
LABEL_90:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_91:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_95;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_96;
  }
LABEL_95:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_97;
  }
LABEL_96:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_97:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_101;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_102;
  }
LABEL_101:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_103;
  }
LABEL_102:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_104;
  }
LABEL_103:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_38;
    goto LABEL_37;
  }
LABEL_104:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) != 0)
LABEL_37:
    *(_BYTE *)(a2 + 53) = *(_QWORD *)(a1 + 224) != 0;
LABEL_38:
  v9 = v8;
  if ((v8 & 0x20000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 232) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x40000000) == 0)
    {
LABEL_40:
      if ((v9 & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_108;
    }
  }
  else if ((v8 & 0x40000000) == 0)
  {
    goto LABEL_40;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 240);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_109;
  }
LABEL_108:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_43;
    goto LABEL_110;
  }
LABEL_109:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 256) & 0x1FF;
  if ((v9 & 0x200000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x400000000) == 0)
      goto LABEL_45;
    goto LABEL_44;
  }
LABEL_110:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 264) & 0x1FFFF;
  if ((v9 & 0x400000000) != 0)
LABEL_44:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 272) & 0x1FFF;
LABEL_45:
  v10 = v9;
  if ((v9 & 0x800000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 280) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x1000000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 288);
  v11 = v10;
  if ((v10 & 0x2000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 296) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x4000000000) == 0)
    {
LABEL_51:
      if ((v11 & 0x8000000000) == 0)
        goto LABEL_52;
      goto LABEL_114;
    }
  }
  else if ((v10 & 0x4000000000) == 0)
  {
    goto LABEL_51;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_115;
  }
LABEL_114:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 312);
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_116;
  }
LABEL_115:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 320) != 0;
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_117;
  }
LABEL_116:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 328);
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_118;
  }
LABEL_117:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 336) != 0;
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 81) = *(_QWORD *)(a1 + 344) != 0;
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_120;
  }
LABEL_119:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 352);
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_121;
  }
LABEL_120:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 360);
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_125;
  }
LABEL_124:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_126;
  }
LABEL_125:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_127;
  }
LABEL_126:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_128;
  }
LABEL_127:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 416) != 0;
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_129;
  }
LABEL_128:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 424) != 0;
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_130;
  }
LABEL_129:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 432);
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_131;
  }
LABEL_130:
  *(_BYTE *)(a2 + 104) = *(_QWORD *)(a1 + 440) != 0;
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_132;
  }
LABEL_131:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_133;
  }
LABEL_132:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_72;
    goto LABEL_134;
  }
LABEL_133:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) == 0)
  {
LABEL_72:
    if ((v11 & 0x1000000000000000) == 0)
      goto LABEL_73;
    goto LABEL_135;
  }
LABEL_134:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 472);
  if ((v11 & 0x1000000000000000) == 0)
  {
LABEL_73:
    if ((v11 & 0x2000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_136;
  }
LABEL_135:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 480);
  if ((v11 & 0x2000000000000000) == 0)
  {
LABEL_74:
    if ((v11 & 0x4000000000000000) == 0)
      goto LABEL_76;
    goto LABEL_75;
  }
LABEL_136:
  *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 488);
  if ((v11 & 0x4000000000000000) != 0)
LABEL_75:
    *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 496);
LABEL_76:
  if ((v11 & 0x8000000000000000) != 0)
    *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 504);
  v12 = (unsigned __int16)v6 & 0x8000;
  v13 = v6 & 0x10000;
  v14 = v6 & 0x20000;
  v15 = v6 & 0x40000;
  v16 = v6 & 0x80000;
  v17 = v6 & 0x100000;
  v21 = v10 & 0x1000000000;
  v22 = v10 & 0x2000000000;
  v18 = *(_QWORD *)(a1 + 1256);
  if ((v18 & 1) != 0)
    *(_BYTE *)(a2 + 140) = *(_QWORD *)(a1 + 512) != 0;
  v19 = ((v3 & 2) >> 1)
      + (v2 & 1)
      + ((v3 & 4) >> 2)
      + ((v3 & 8) >> 3)
      + ((v3 & 0x10) >> 4)
      + ((v3 & 0x20) >> 5)
      + ((v3 & 0x40) >> 6)
      + ((unint64_t)(v4 & 0x80) >> 7)
      + ((v4 & 0x100) >> 8)
      + ((v5 & 0x200) >> 9)
      + ((v5 & 0x400) >> 10)
      + ((v5 & 0x800) >> 11)
      + ((v5 & 0x1000) >> 12)
      + ((v5 & 0x2000) >> 13)
      + ((v5 & 0x4000) >> 14)
      + (v12 >> 15)
      + (v13 >> 16)
      + (v14 >> 17)
      + (v15 >> 18)
      + (v16 >> 19)
      + (v17 >> 20)
      + ((v7 & 0x200000) >> 21)
      + ((v7 & 0x400000) >> 22)
      + ((v8 & 0x800000) >> 23)
      + ((v8 & 0x1000000) >> 24)
      + ((v8 & 0x2000000) >> 25)
      + ((v8 & 0x4000000) >> 26)
      + ((v8 & 0x8000000) >> 27)
      + ((v8 & 0x10000000) >> 28)
      + ((v8 & 0x20000000) >> 29)
      + ((v9 & 0x40000000) >> 30);
  return v19
       + (v9 >> 31)
       + (BYTE4(v9) & 1)
       + ((v9 & 0x200000000) >> 33)
       + ((v9 & 0x400000000) >> 34)
       + ((v9 & 0x800000000) >> 35)
       + (v21 >> 36)
       + (v22 >> 37)
       + (v11 >> 63)
       + ((v11 & 0x4000000000) >> 38)
       + ((v11 & 0x8000000000) >> 39)
       + ((v11 & 0x10000000000) >> 40)
       + ((v11 & 0x20000000000) >> 41)
       + ((v11 & 0x40000000000) >> 42)
       + ((v11 & 0x80000000000) >> 43)
       + ((v11 & 0x100000000000) >> 44)
       + ((v11 & 0x200000000000) >> 45)
       + ((v11 & 0x400000000000) >> 46)
       + ((v11 & 0x800000000000) >> 47)
       + ((v11 & 0x1000000000000) >> 48)
       + ((v11 & 0x2000000000000) >> 49)
       + ((v11 & 0x4000000000000) >> 50)
       + ((v11 & 0x8000000000000) >> 51)
       + ((v11 & 0x10000000000000) >> 52)
       + ((v11 & 0x20000000000000) >> 53)
       + ((v11 & 0x40000000000000) >> 54)
       + ((v11 & 0x80000000000000) >> 55)
       + ((v11 & 0x100000000000000) >> 56)
       + ((v11 & 0x200000000000000) >> 57)
       + ((v11 & 0x400000000000000) >> 58)
       + ((v11 & 0x800000000000000) >> 59)
       + ((v11 & 0x1000000000000000) >> 60)
       + ((v11 & 0x2000000000000000) >> 61)
       + ((v11 & 0x4000000000000000) >> 62)
       + (v18 & 1);
}

unint64_t sub_1C4D44AE0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  int v25;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_100;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_101;
  }
LABEL_100:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_102;
  }
LABEL_101:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_102:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_106;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_107;
  }
LABEL_106:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_108;
  }
LABEL_107:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_108:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_112;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_113;
  }
LABEL_112:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_114;
  }
LABEL_113:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_114:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_118;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_119;
  }
LABEL_118:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_36;
    goto LABEL_35;
  }
LABEL_119:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) != 0)
LABEL_35:
    *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
LABEL_36:
  v25 = v7;
  if ((v8 & 0x8000000) != 0)
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  v9 = v8;
  if ((v8 & 0x10000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 224) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_40:
      if ((v9 & 0x40000000) == 0)
        goto LABEL_41;
      goto LABEL_123;
    }
  }
  else if ((v8 & 0x20000000) == 0)
  {
    goto LABEL_40;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 232);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_124;
  }
LABEL_123:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 240) & 0x1FF;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_43;
    goto LABEL_125;
  }
LABEL_124:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_45;
    goto LABEL_44;
  }
LABEL_125:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 256) & 0x1FFFF;
  if ((v9 & 0x200000000) != 0)
LABEL_44:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 264) & 0x1FFF;
LABEL_45:
  v10 = v9;
  if ((v9 & 0x400000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 272) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x800000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 280);
  v11 = v10;
  if ((v10 & 0x1000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 288) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x2000000000) == 0)
    {
LABEL_51:
      if ((v11 & 0x4000000000) == 0)
        goto LABEL_52;
      goto LABEL_129;
    }
  }
  else if ((v10 & 0x2000000000) == 0)
  {
    goto LABEL_51;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 296);
  if ((v11 & 0x4000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x8000000000) == 0)
      goto LABEL_53;
    goto LABEL_130;
  }
LABEL_129:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_54;
    goto LABEL_131;
  }
LABEL_130:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 312) != 0;
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_56;
    goto LABEL_55;
  }
LABEL_131:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 320);
  if ((v11 & 0x20000000000) != 0)
LABEL_55:
    *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 328) != 0;
LABEL_56:
  v12 = v11;
  if ((v11 & 0x40000000000) != 0)
  {
    *(_BYTE *)(a2 + 84) = *(_BYTE *)(a1 + 336) & 1;
    v12 = *(_QWORD *)(a1 + 1248);
    if ((v12 & 0x80000000000) == 0)
    {
LABEL_58:
      if ((v12 & 0x100000000000) == 0)
        goto LABEL_59;
      goto LABEL_135;
    }
  }
  else if ((v11 & 0x80000000000) == 0)
  {
    goto LABEL_58;
  }
  *(_WORD *)(a2 + 84) = *(_QWORD *)(a1 + 344);
  if ((v12 & 0x100000000000) == 0)
  {
LABEL_59:
    if ((v12 & 0x200000000000) == 0)
      goto LABEL_60;
    goto LABEL_136;
  }
LABEL_135:
  *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 352) & 0x1FF;
  if ((v12 & 0x200000000000) == 0)
  {
LABEL_60:
    if ((v12 & 0x400000000000) == 0)
      goto LABEL_61;
    goto LABEL_137;
  }
LABEL_136:
  *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 360) & 0x1FF;
  if ((v12 & 0x400000000000) == 0)
  {
LABEL_61:
    if ((v12 & 0x800000000000) == 0)
      goto LABEL_63;
    goto LABEL_62;
  }
LABEL_137:
  *(_DWORD *)(a2 + 84) = *(_DWORD *)(a1 + 368) & 0x1FFFF;
  if ((v12 & 0x800000000000) != 0)
LABEL_62:
    *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 376) & 0x1FFF;
LABEL_63:
  v13 = v12;
  if ((v12 & 0x1000000000000) != 0)
  {
    *(_BYTE *)(a2 + 84) = *(_BYTE *)(a1 + 384) & 0x7F;
    v13 = *(_QWORD *)(a1 + 1248);
  }
  if ((v13 & 0x2000000000000) != 0)
    *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 392);
  v14 = v13;
  if ((v13 & 0x4000000000000) != 0)
  {
    *(_BYTE *)(a2 + 88) = *(_BYTE *)(a1 + 400) & 0xF;
    v14 = *(_QWORD *)(a1 + 1248);
    if ((v14 & 0x8000000000000) == 0)
    {
LABEL_69:
      if ((v14 & 0x10000000000000) == 0)
        goto LABEL_70;
      goto LABEL_141;
    }
  }
  else if ((v13 & 0x8000000000000) == 0)
  {
    goto LABEL_69;
  }
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 408);
  if ((v14 & 0x10000000000000) == 0)
  {
LABEL_70:
    if ((v14 & 0x20000000000000) == 0)
      goto LABEL_71;
    goto LABEL_142;
  }
LABEL_141:
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 416);
  if ((v14 & 0x20000000000000) == 0)
  {
LABEL_71:
    if ((v14 & 0x40000000000000) == 0)
      goto LABEL_72;
    goto LABEL_143;
  }
LABEL_142:
  *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 424) != 0;
  if ((v14 & 0x40000000000000) == 0)
  {
LABEL_72:
    if ((v14 & 0x80000000000000) == 0)
      goto LABEL_73;
    goto LABEL_144;
  }
LABEL_143:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 432);
  if ((v14 & 0x80000000000000) == 0)
  {
LABEL_73:
    if ((v14 & 0x100000000000000) == 0)
      goto LABEL_74;
    goto LABEL_145;
  }
LABEL_144:
  *(_BYTE *)(a2 + 108) = *(_QWORD *)(a1 + 440) != 0;
  if ((v14 & 0x100000000000000) == 0)
  {
LABEL_74:
    if ((v14 & 0x200000000000000) == 0)
      goto LABEL_75;
    goto LABEL_146;
  }
LABEL_145:
  *(_BYTE *)(a2 + 109) = *(_QWORD *)(a1 + 448) != 0;
  if ((v14 & 0x200000000000000) == 0)
  {
LABEL_75:
    if ((v14 & 0x400000000000000) == 0)
      goto LABEL_76;
    goto LABEL_147;
  }
LABEL_146:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 456);
  if ((v14 & 0x400000000000000) == 0)
  {
LABEL_76:
    if ((v14 & 0x800000000000000) == 0)
      goto LABEL_77;
    goto LABEL_148;
  }
LABEL_147:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 464);
  if ((v14 & 0x800000000000000) == 0)
  {
LABEL_77:
    if ((v14 & 0x1000000000000000) == 0)
      goto LABEL_78;
    goto LABEL_149;
  }
LABEL_148:
  *(_BYTE *)(a2 + 120) = *(_QWORD *)(a1 + 472) != 0;
  if ((v14 & 0x1000000000000000) == 0)
  {
LABEL_78:
    if ((v14 & 0x2000000000000000) == 0)
      goto LABEL_79;
    goto LABEL_150;
  }
LABEL_149:
  *(_BYTE *)(a2 + 121) = *(_QWORD *)(a1 + 480) != 0;
  if ((v14 & 0x2000000000000000) == 0)
  {
LABEL_79:
    if ((v14 & 0x4000000000000000) == 0)
      goto LABEL_80;
LABEL_151:
    *(_BYTE *)(a2 + 123) = *(_QWORD *)(a1 + 496) != 0;
    if ((v14 & 0x8000000000000000) == 0)
      goto LABEL_81;
    goto LABEL_152;
  }
LABEL_150:
  *(_BYTE *)(a2 + 122) = *(_QWORD *)(a1 + 488) != 0;
  if ((v14 & 0x4000000000000000) != 0)
    goto LABEL_151;
LABEL_80:
  if ((v14 & 0x8000000000000000) == 0)
    goto LABEL_81;
LABEL_152:
  *(_BYTE *)(a2 + 124) = *(_QWORD *)(a1 + 504) != 0;
LABEL_81:
  v15 = *(_QWORD *)(a1 + 1256);
  if ((v15 & 1) != 0)
  {
    *(_BYTE *)(a2 + 125) = *(_QWORD *)(a1 + 512) != 0;
    if ((v15 & 2) == 0)
    {
LABEL_83:
      if ((v15 & 4) == 0)
        goto LABEL_84;
      goto LABEL_155;
    }
  }
  else if ((v15 & 2) == 0)
  {
    goto LABEL_83;
  }
  *(_BYTE *)(a2 + 126) = *(_QWORD *)(a1 + 520) != 0;
  if ((v15 & 4) == 0)
  {
LABEL_84:
    if ((v15 & 8) == 0)
      goto LABEL_85;
    goto LABEL_156;
  }
LABEL_155:
  *(_BYTE *)(a2 + 127) = *(_QWORD *)(a1 + 528) != 0;
  if ((v15 & 8) == 0)
  {
LABEL_85:
    if ((v15 & 0x10) == 0)
      goto LABEL_86;
    goto LABEL_157;
  }
LABEL_156:
  *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 536);
  if ((v15 & 0x10) == 0)
  {
LABEL_86:
    if ((v15 & 0x20) == 0)
      goto LABEL_87;
    goto LABEL_158;
  }
LABEL_157:
  *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 544);
  if ((v15 & 0x20) == 0)
  {
LABEL_87:
    if ((v15 & 0x40) == 0)
      goto LABEL_88;
    goto LABEL_159;
  }
LABEL_158:
  *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 552);
  if ((v15 & 0x40) == 0)
  {
LABEL_88:
    if ((v15 & 0x80) == 0)
      goto LABEL_89;
    goto LABEL_160;
  }
LABEL_159:
  *(_DWORD *)(a2 + 140) = *(_QWORD *)(a1 + 560);
  if ((v15 & 0x80) == 0)
  {
LABEL_89:
    if ((v15 & 0x100) == 0)
      goto LABEL_90;
    goto LABEL_161;
  }
LABEL_160:
  *(_DWORD *)(a2 + 144) = *(_QWORD *)(a1 + 568);
  if ((v15 & 0x100) == 0)
  {
LABEL_90:
    if ((v15 & 0x200) == 0)
      goto LABEL_91;
    goto LABEL_162;
  }
LABEL_161:
  *(_DWORD *)(a2 + 148) = *(_QWORD *)(a1 + 576);
  if ((v15 & 0x200) == 0)
  {
LABEL_91:
    if ((v15 & 0x400) == 0)
      goto LABEL_93;
    goto LABEL_92;
  }
LABEL_162:
  *(_DWORD *)(a2 + 152) = *(_QWORD *)(a1 + 584);
  if ((v15 & 0x400) != 0)
LABEL_92:
    *(_DWORD *)(a2 + 156) = *(_QWORD *)(a1 + 592);
LABEL_93:
  if ((v15 & 0x800) != 0)
    *(_DWORD *)(a2 + 160) = *(_QWORD *)(a1 + 600);
  if ((v15 & 0x1000) != 0)
    *(_BYTE *)(a2 + 164) = *(_QWORD *)(a1 + 608) != 0;
  v16 = ((v3 & 2) >> 1)
      + (v2 & 1)
      + ((v3 & 4) >> 2)
      + ((v3 & 8) >> 3)
      + ((v3 & 0x10) >> 4)
      + ((v3 & 0x20) >> 5)
      + ((v3 & 0x40) >> 6)
      + ((unint64_t)(v4 & 0x80) >> 7)
      + ((v4 & 0x100) >> 8)
      + ((v5 & 0x200) >> 9)
      + ((v5 & 0x400) >> 10);
  v17 = v16
      + ((v5 & 0x800) >> 11)
      + ((v5 & 0x1000) >> 12)
      + ((v5 & 0x2000) >> 13)
      + ((v5 & 0x4000) >> 14)
      + ((unint64_t)((unsigned __int16)v6 & 0x8000) >> 15)
      + ((v6 & 0x10000) >> 16)
      + ((v6 & 0x20000) >> 17)
      + ((v6 & 0x40000) >> 18)
      + ((v6 & 0x80000) >> 19)
      + ((v6 & 0x100000) >> 20)
      + ((v25 & 0x200000u) >> 21)
      + ((v25 & 0x400000u) >> 22)
      + ((v8 & 0x800000) >> 23)
      + ((v8 & 0x1000000) >> 24)
      + ((v8 & 0x2000000) >> 25)
      + ((v8 & 0x4000000) >> 26)
      + ((v8 & 0x8000000) >> 27)
      + ((v8 & 0x10000000) >> 28)
      + ((v9 & 0x20000000) >> 29)
      + ((v9 & 0x40000000) >> 30)
      + (v9 >> 31)
      + (BYTE4(v9) & 1)
      + ((v9 & 0x200000000) >> 33)
      + ((v9 & 0x400000000) >> 34)
      + ((v10 & 0x800000000) >> 35)
      + ((v10 & 0x1000000000) >> 36)
      + ((v11 & 0x2000000000) >> 37)
      + ((v11 & 0x4000000000) >> 38)
      + ((v11 & 0x8000000000) >> 39)
      + ((v11 & 0x10000000000) >> 40)
      + ((v11 & 0x20000000000) >> 41)
      + ((v11 & 0x40000000000) >> 42);
  v19 = v12 & 0x80000000000;
  v20 = v12 & 0x100000000000;
  v21 = v12 & 0x200000000000;
  v22 = v12 & 0x400000000000;
  v23 = v12 & 0x800000000000;
  v24 = v15 & 1;
  return v17
       + (v19 >> 43)
       + (v20 >> 44)
       + (v21 >> 45)
       + (v22 >> 46)
       + (v23 >> 47)
       + ((v12 & 0x1000000000000) >> 48)
       + ((v13 & 0x2000000000000) >> 49)
       + ((v13 & 0x4000000000000) >> 50)
       + (v14 >> 63)
       + ((v14 & 0x8000000000000) >> 51)
       + ((v14 & 0x10000000000000) >> 52)
       + ((v14 & 0x20000000000000) >> 53)
       + ((v14 & 0x40000000000000) >> 54)
       + ((v14 & 0x80000000000000) >> 55)
       + ((v14 & 0x100000000000000) >> 56)
       + ((v14 & 0x200000000000000) >> 57)
       + ((v14 & 0x400000000000000) >> 58)
       + ((v14 & 0x800000000000000) >> 59)
       + ((v14 & 0x1000000000000000) >> 60)
       + ((v14 & 0x2000000000000000) >> 61)
       + ((v14 & 0x4000000000000000) >> 62)
       + v24
       + ((unint64_t)(v15 & 2) >> 1)
       + ((unint64_t)(v15 & 4) >> 2)
       + ((unint64_t)(v15 & 8) >> 3)
       + ((unint64_t)(v15 & 0x10) >> 4)
       + ((unint64_t)(v15 & 0x20) >> 5)
       + ((unint64_t)(v15 & 0x40) >> 6)
       + ((unint64_t)(v15 & 0x80) >> 7)
       + ((unint64_t)(v15 & 0x100) >> 8)
       + ((unint64_t)(v15 & 0x200) >> 9)
       + ((unint64_t)(v15 & 0x400) >> 10)
       + ((unint64_t)(v15 & 0x800) >> 11)
       + ((unint64_t)(v15 & 0x1000) >> 12);
}

unint64_t sub_1C4D45624(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  int v25;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_100;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_101;
  }
LABEL_100:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_102;
  }
LABEL_101:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_102:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_106;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_107;
  }
LABEL_106:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_108;
  }
LABEL_107:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_108:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_112;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_113;
  }
LABEL_112:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_114;
  }
LABEL_113:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_114:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_118;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_119;
  }
LABEL_118:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_36;
    goto LABEL_35;
  }
LABEL_119:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) != 0)
LABEL_35:
    *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
LABEL_36:
  v25 = v7;
  if ((v8 & 0x8000000) != 0)
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  v9 = v8;
  if ((v8 & 0x10000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 224) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_40:
      if ((v9 & 0x40000000) == 0)
        goto LABEL_41;
      goto LABEL_123;
    }
  }
  else if ((v8 & 0x20000000) == 0)
  {
    goto LABEL_40;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 232);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_124;
  }
LABEL_123:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 240) & 0x1FF;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_43;
    goto LABEL_125;
  }
LABEL_124:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_45;
    goto LABEL_44;
  }
LABEL_125:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 256) & 0x1FFFF;
  if ((v9 & 0x200000000) != 0)
LABEL_44:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 264) & 0x1FFF;
LABEL_45:
  v10 = v9;
  if ((v9 & 0x400000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 272) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x800000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 280);
  v11 = v10;
  if ((v10 & 0x1000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 288) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x2000000000) == 0)
    {
LABEL_51:
      if ((v11 & 0x4000000000) == 0)
        goto LABEL_52;
      goto LABEL_129;
    }
  }
  else if ((v10 & 0x2000000000) == 0)
  {
    goto LABEL_51;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 296);
  if ((v11 & 0x4000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x8000000000) == 0)
      goto LABEL_53;
    goto LABEL_130;
  }
LABEL_129:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_54;
    goto LABEL_131;
  }
LABEL_130:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 312) != 0;
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_56;
    goto LABEL_55;
  }
LABEL_131:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 320);
  if ((v11 & 0x20000000000) != 0)
LABEL_55:
    *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 328) != 0;
LABEL_56:
  v12 = v11;
  if ((v11 & 0x40000000000) != 0)
  {
    *(_BYTE *)(a2 + 84) = *(_BYTE *)(a1 + 336) & 1;
    v12 = *(_QWORD *)(a1 + 1248);
    if ((v12 & 0x80000000000) == 0)
    {
LABEL_58:
      if ((v12 & 0x100000000000) == 0)
        goto LABEL_59;
      goto LABEL_135;
    }
  }
  else if ((v11 & 0x80000000000) == 0)
  {
    goto LABEL_58;
  }
  *(_WORD *)(a2 + 84) = *(_QWORD *)(a1 + 344);
  if ((v12 & 0x100000000000) == 0)
  {
LABEL_59:
    if ((v12 & 0x200000000000) == 0)
      goto LABEL_60;
    goto LABEL_136;
  }
LABEL_135:
  *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 352) & 0x1FF;
  if ((v12 & 0x200000000000) == 0)
  {
LABEL_60:
    if ((v12 & 0x400000000000) == 0)
      goto LABEL_61;
    goto LABEL_137;
  }
LABEL_136:
  *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 360) & 0x1FF;
  if ((v12 & 0x400000000000) == 0)
  {
LABEL_61:
    if ((v12 & 0x800000000000) == 0)
      goto LABEL_63;
    goto LABEL_62;
  }
LABEL_137:
  *(_DWORD *)(a2 + 84) = *(_DWORD *)(a1 + 368) & 0x1FFFF;
  if ((v12 & 0x800000000000) != 0)
LABEL_62:
    *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 376) & 0x1FFF;
LABEL_63:
  v13 = v12;
  if ((v12 & 0x1000000000000) != 0)
  {
    *(_BYTE *)(a2 + 84) = *(_BYTE *)(a1 + 384) & 0x7F;
    v13 = *(_QWORD *)(a1 + 1248);
  }
  if ((v13 & 0x2000000000000) != 0)
    *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 392);
  v14 = v13;
  if ((v13 & 0x4000000000000) != 0)
  {
    *(_BYTE *)(a2 + 88) = *(_BYTE *)(a1 + 400) & 0xF;
    v14 = *(_QWORD *)(a1 + 1248);
    if ((v14 & 0x8000000000000) == 0)
    {
LABEL_69:
      if ((v14 & 0x10000000000000) == 0)
        goto LABEL_70;
      goto LABEL_141;
    }
  }
  else if ((v13 & 0x8000000000000) == 0)
  {
    goto LABEL_69;
  }
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 408);
  if ((v14 & 0x10000000000000) == 0)
  {
LABEL_70:
    if ((v14 & 0x20000000000000) == 0)
      goto LABEL_71;
    goto LABEL_142;
  }
LABEL_141:
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 416);
  if ((v14 & 0x20000000000000) == 0)
  {
LABEL_71:
    if ((v14 & 0x40000000000000) == 0)
      goto LABEL_72;
    goto LABEL_143;
  }
LABEL_142:
  *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 424) != 0;
  if ((v14 & 0x40000000000000) == 0)
  {
LABEL_72:
    if ((v14 & 0x80000000000000) == 0)
      goto LABEL_73;
    goto LABEL_144;
  }
LABEL_143:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 432);
  if ((v14 & 0x80000000000000) == 0)
  {
LABEL_73:
    if ((v14 & 0x100000000000000) == 0)
      goto LABEL_74;
    goto LABEL_145;
  }
LABEL_144:
  *(_BYTE *)(a2 + 108) = *(_QWORD *)(a1 + 440) != 0;
  if ((v14 & 0x100000000000000) == 0)
  {
LABEL_74:
    if ((v14 & 0x200000000000000) == 0)
      goto LABEL_75;
    goto LABEL_146;
  }
LABEL_145:
  *(_BYTE *)(a2 + 109) = *(_QWORD *)(a1 + 448) != 0;
  if ((v14 & 0x200000000000000) == 0)
  {
LABEL_75:
    if ((v14 & 0x400000000000000) == 0)
      goto LABEL_76;
    goto LABEL_147;
  }
LABEL_146:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 456);
  if ((v14 & 0x400000000000000) == 0)
  {
LABEL_76:
    if ((v14 & 0x800000000000000) == 0)
      goto LABEL_77;
    goto LABEL_148;
  }
LABEL_147:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 464);
  if ((v14 & 0x800000000000000) == 0)
  {
LABEL_77:
    if ((v14 & 0x1000000000000000) == 0)
      goto LABEL_78;
    goto LABEL_149;
  }
LABEL_148:
  *(_BYTE *)(a2 + 120) = *(_QWORD *)(a1 + 472) != 0;
  if ((v14 & 0x1000000000000000) == 0)
  {
LABEL_78:
    if ((v14 & 0x2000000000000000) == 0)
      goto LABEL_79;
    goto LABEL_150;
  }
LABEL_149:
  *(_BYTE *)(a2 + 121) = *(_QWORD *)(a1 + 480) != 0;
  if ((v14 & 0x2000000000000000) == 0)
  {
LABEL_79:
    if ((v14 & 0x4000000000000000) == 0)
      goto LABEL_80;
LABEL_151:
    *(_BYTE *)(a2 + 123) = *(_QWORD *)(a1 + 496) != 0;
    if ((v14 & 0x8000000000000000) == 0)
      goto LABEL_81;
    goto LABEL_152;
  }
LABEL_150:
  *(_BYTE *)(a2 + 122) = *(_QWORD *)(a1 + 488) != 0;
  if ((v14 & 0x4000000000000000) != 0)
    goto LABEL_151;
LABEL_80:
  if ((v14 & 0x8000000000000000) == 0)
    goto LABEL_81;
LABEL_152:
  *(_BYTE *)(a2 + 124) = *(_QWORD *)(a1 + 504) != 0;
LABEL_81:
  v15 = *(_QWORD *)(a1 + 1256);
  if ((v15 & 1) != 0)
  {
    *(_BYTE *)(a2 + 125) = *(_QWORD *)(a1 + 512) != 0;
    if ((v15 & 2) == 0)
    {
LABEL_83:
      if ((v15 & 4) == 0)
        goto LABEL_84;
      goto LABEL_155;
    }
  }
  else if ((v15 & 2) == 0)
  {
    goto LABEL_83;
  }
  *(_BYTE *)(a2 + 126) = *(_QWORD *)(a1 + 520) != 0;
  if ((v15 & 4) == 0)
  {
LABEL_84:
    if ((v15 & 8) == 0)
      goto LABEL_85;
    goto LABEL_156;
  }
LABEL_155:
  *(_BYTE *)(a2 + 127) = *(_QWORD *)(a1 + 528) != 0;
  if ((v15 & 8) == 0)
  {
LABEL_85:
    if ((v15 & 0x10) == 0)
      goto LABEL_86;
    goto LABEL_157;
  }
LABEL_156:
  *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 536);
  if ((v15 & 0x10) == 0)
  {
LABEL_86:
    if ((v15 & 0x20) == 0)
      goto LABEL_87;
    goto LABEL_158;
  }
LABEL_157:
  *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 544);
  if ((v15 & 0x20) == 0)
  {
LABEL_87:
    if ((v15 & 0x40) == 0)
      goto LABEL_88;
    goto LABEL_159;
  }
LABEL_158:
  *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 552);
  if ((v15 & 0x40) == 0)
  {
LABEL_88:
    if ((v15 & 0x80) == 0)
      goto LABEL_89;
    goto LABEL_160;
  }
LABEL_159:
  *(_DWORD *)(a2 + 140) = *(_QWORD *)(a1 + 560);
  if ((v15 & 0x80) == 0)
  {
LABEL_89:
    if ((v15 & 0x100) == 0)
      goto LABEL_90;
    goto LABEL_161;
  }
LABEL_160:
  *(_DWORD *)(a2 + 144) = *(_QWORD *)(a1 + 568);
  if ((v15 & 0x100) == 0)
  {
LABEL_90:
    if ((v15 & 0x200) == 0)
      goto LABEL_91;
    goto LABEL_162;
  }
LABEL_161:
  *(_DWORD *)(a2 + 148) = *(_QWORD *)(a1 + 576);
  if ((v15 & 0x200) == 0)
  {
LABEL_91:
    if ((v15 & 0x400) == 0)
      goto LABEL_93;
    goto LABEL_92;
  }
LABEL_162:
  *(_DWORD *)(a2 + 152) = *(_QWORD *)(a1 + 584);
  if ((v15 & 0x400) != 0)
LABEL_92:
    *(_DWORD *)(a2 + 156) = *(_QWORD *)(a1 + 592);
LABEL_93:
  if ((v15 & 0x800) != 0)
    *(_DWORD *)(a2 + 160) = *(_QWORD *)(a1 + 600);
  if ((v15 & 0x1000) != 0)
    *(_BYTE *)(a2 + 164) = *(_QWORD *)(a1 + 608) != 0;
  v16 = ((v3 & 2) >> 1)
      + (v2 & 1)
      + ((v3 & 4) >> 2)
      + ((v3 & 8) >> 3)
      + ((v3 & 0x10) >> 4)
      + ((v3 & 0x20) >> 5)
      + ((v3 & 0x40) >> 6)
      + ((unint64_t)(v4 & 0x80) >> 7)
      + ((v4 & 0x100) >> 8)
      + ((v5 & 0x200) >> 9)
      + ((v5 & 0x400) >> 10);
  v17 = v16
      + ((v5 & 0x800) >> 11)
      + ((v5 & 0x1000) >> 12)
      + ((v5 & 0x2000) >> 13)
      + ((v5 & 0x4000) >> 14)
      + ((unint64_t)((unsigned __int16)v6 & 0x8000) >> 15)
      + ((v6 & 0x10000) >> 16)
      + ((v6 & 0x20000) >> 17)
      + ((v6 & 0x40000) >> 18)
      + ((v6 & 0x80000) >> 19)
      + ((v6 & 0x100000) >> 20)
      + ((v25 & 0x200000u) >> 21)
      + ((v25 & 0x400000u) >> 22)
      + ((v8 & 0x800000) >> 23)
      + ((v8 & 0x1000000) >> 24)
      + ((v8 & 0x2000000) >> 25)
      + ((v8 & 0x4000000) >> 26)
      + ((v8 & 0x8000000) >> 27)
      + ((v8 & 0x10000000) >> 28)
      + ((v9 & 0x20000000) >> 29)
      + ((v9 & 0x40000000) >> 30)
      + (v9 >> 31)
      + (BYTE4(v9) & 1)
      + ((v9 & 0x200000000) >> 33)
      + ((v9 & 0x400000000) >> 34)
      + ((v10 & 0x800000000) >> 35)
      + ((v10 & 0x1000000000) >> 36)
      + ((v11 & 0x2000000000) >> 37)
      + ((v11 & 0x4000000000) >> 38)
      + ((v11 & 0x8000000000) >> 39)
      + ((v11 & 0x10000000000) >> 40)
      + ((v11 & 0x20000000000) >> 41)
      + ((v11 & 0x40000000000) >> 42);
  v19 = v12 & 0x80000000000;
  v20 = v12 & 0x100000000000;
  v21 = v12 & 0x200000000000;
  v22 = v12 & 0x400000000000;
  v23 = v12 & 0x800000000000;
  v24 = v15 & 1;
  return v17
       + (v19 >> 43)
       + (v20 >> 44)
       + (v21 >> 45)
       + (v22 >> 46)
       + (v23 >> 47)
       + ((v12 & 0x1000000000000) >> 48)
       + ((v13 & 0x2000000000000) >> 49)
       + ((v13 & 0x4000000000000) >> 50)
       + (v14 >> 63)
       + ((v14 & 0x8000000000000) >> 51)
       + ((v14 & 0x10000000000000) >> 52)
       + ((v14 & 0x20000000000000) >> 53)
       + ((v14 & 0x40000000000000) >> 54)
       + ((v14 & 0x80000000000000) >> 55)
       + ((v14 & 0x100000000000000) >> 56)
       + ((v14 & 0x200000000000000) >> 57)
       + ((v14 & 0x400000000000000) >> 58)
       + ((v14 & 0x800000000000000) >> 59)
       + ((v14 & 0x1000000000000000) >> 60)
       + ((v14 & 0x2000000000000000) >> 61)
       + ((v14 & 0x4000000000000000) >> 62)
       + v24
       + ((unint64_t)(v15 & 2) >> 1)
       + ((unint64_t)(v15 & 4) >> 2)
       + ((unint64_t)(v15 & 8) >> 3)
       + ((unint64_t)(v15 & 0x10) >> 4)
       + ((unint64_t)(v15 & 0x20) >> 5)
       + ((unint64_t)(v15 & 0x40) >> 6)
       + ((unint64_t)(v15 & 0x80) >> 7)
       + ((unint64_t)(v15 & 0x100) >> 8)
       + ((unint64_t)(v15 & 0x200) >> 9)
       + ((unint64_t)(v15 & 0x400) >> 10)
       + ((unint64_t)(v15 & 0x800) >> 11)
       + ((unint64_t)(v15 & 0x1000) >> 12);
}

unint64_t sub_1C4D46168(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_79;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_80;
  }
LABEL_79:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_81;
  }
LABEL_80:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_81:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_85;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_86;
  }
LABEL_85:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_87;
  }
LABEL_86:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_87:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_91;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_92;
  }
LABEL_91:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_93;
  }
LABEL_92:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_93:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_97;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_98;
  }
LABEL_97:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_99;
  }
LABEL_98:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_99:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) != 0)
LABEL_36:
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
LABEL_37:
  v9 = v8;
  if ((v8 & 0x10000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 224) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_39:
      if ((v9 & 0x40000000) == 0)
        goto LABEL_40;
      goto LABEL_103;
    }
  }
  else if ((v8 & 0x20000000) == 0)
  {
    goto LABEL_39;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 232);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_40:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_104;
  }
LABEL_103:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 240) & 0x1FF;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_105;
  }
LABEL_104:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_105:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 256) & 0x1FFFF;
  if ((v9 & 0x200000000) != 0)
LABEL_43:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 264) & 0x1FFF;
LABEL_44:
  v10 = v9;
  if ((v9 & 0x400000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 272) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x800000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 280);
  v11 = v10;
  if ((v10 & 0x1000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 288) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x2000000000) == 0)
    {
LABEL_50:
      if ((v11 & 0x4000000000) == 0)
        goto LABEL_51;
      goto LABEL_109;
    }
  }
  else if ((v10 & 0x2000000000) == 0)
  {
    goto LABEL_50;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 296);
  if ((v11 & 0x4000000000) == 0)
  {
LABEL_51:
    if ((v11 & 0x8000000000) == 0)
      goto LABEL_52;
    goto LABEL_110;
  }
LABEL_109:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_111;
  }
LABEL_110:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 312) != 0;
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_112;
  }
LABEL_111:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 320);
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_113;
  }
LABEL_112:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 328) != 0;
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_114;
  }
LABEL_113:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_115;
  }
LABEL_114:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_116;
  }
LABEL_115:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_117;
  }
LABEL_116:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_118;
  }
LABEL_117:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_120;
  }
LABEL_119:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_124;
  }
LABEL_123:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 416);
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_125;
  }
LABEL_124:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 424);
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_126;
  }
LABEL_125:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 432);
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 440);
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_72;
    goto LABEL_71;
  }
LABEL_128:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) != 0)
LABEL_71:
    *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 464);
LABEL_72:
  v12 = v2 & 1;
  if ((v11 & 0x800000000000000) != 0)
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 472);
  v13 = v3 & 2;
  v14 = v3 & 4;
  v15 = v3 & 8;
  v16 = v3 & 0x10;
  v17 = v3 & 0x20;
  v18 = v3 & 0x40;
  v19 = v4 & 0x80;
  v20 = v4 & 0x100;
  v25 = (unsigned __int16)v6 & 0x8000;
  v26 = v6 & 0x10000;
  v27 = v6 & 0x20000;
  v28 = v6 & 0x40000;
  v29 = v6 & 0x80000;
  v30 = v6 & 0x100000;
  if ((v11 & 0x1000000000000000) != 0)
    *(_BYTE *)(a2 + 132) = *(_QWORD *)(a1 + 480) != 0;
  v21 = v5 & 0x200;
  v24 = v5 & 0x4000;
  v23 = v5 & 0x2000;
  v22 = v5 & 0x1000;
  v32 = v7 & 0x400000;
  v33 = v8 & 0x800000;
  v34 = v8 & 0x1000000;
  v35 = v8 & 0x2000000;
  v36 = v8 & 0x4000000;
  v37 = v8 & 0x8000000;
  v38 = v8 & 0x10000000;
  v40 = v9 & 0x200000000;
  v41 = v9 & 0x400000000;
  v42 = v10 & 0x800000000;
  v43 = v11 & 0x2000000000;
  v44 = v10 & 0x1000000000;
  v45 = v11 & 0x4000000000;
  v46 = v11 & 0x8000000000;
  v47 = v11 & 0x10000000000;
  v48 = v11 & 0x20000000000;
  v49 = v11 & 0x40000000000;
  v39 = BYTE4(v9) & 1;
  LODWORD(v21) = (v13 >> 1)
               + v12
               + (v14 >> 2)
               + (v15 >> 3)
               + (v16 >> 4)
               + (v17 >> 5)
               + (v18 >> 6)
               + (v19 >> 7)
               + (v20 >> 8)
               + (v21 >> 9)
               + ((unint64_t)(v5 & 0x400) >> 10)
               + ((unint64_t)(v5 & 0x800) >> 11)
               + (v22 >> 12)
               + (v23 >> 13)
               + (v24 >> 14)
               + (v25 >> 15)
               + (v26 >> 16)
               + (v27 >> 17)
               + (v28 >> 18)
               + (v29 >> 19)
               + (v30 >> 20)
               + ((v7 & 0x200000uLL) >> 21)
               + (v32 >> 22)
               + (v33 >> 23)
               + (v34 >> 24)
               + (v35 >> 25)
               + (v36 >> 26)
               + (v37 >> 27)
               + (v38 >> 28)
               + ((v9 & 0x20000000) >> 29)
               + ((v9 & 0x40000000) >> 30)
               + (v9 >> 31)
               + v39
               + (v40 >> 33)
               + (v41 >> 34)
               + (v42 >> 35)
               + (v44 >> 36)
               + (v43 >> 37)
               + (v45 >> 38)
               + (v46 >> 39)
               + (v47 >> 40)
               + (v48 >> 41)
               + (v49 >> 42);
  return (_DWORD)v21
       + ((v11 & 0x80000000000uLL) >> 43)
       + ((v11 & 0x100000000000uLL) >> 44)
       + ((v11 & 0x200000000000uLL) >> 45)
       + ((v11 & 0x400000000000uLL) >> 46)
       + ((v11 & 0x800000000000uLL) >> 47)
       + ((v11 & 0x1000000000000uLL) >> 48)
       + ((v11 & 0x2000000000000uLL) >> 49)
       + ((v11 & 0x4000000000000uLL) >> 50)
       + ((v11 & 0x8000000000000uLL) >> 51)
       + ((v11 & 0x10000000000000uLL) >> 52)
       + ((v11 & 0x20000000000000uLL) >> 53)
       + ((v11 & 0x40000000000000uLL) >> 54)
       + ((v11 & 0x80000000000000uLL) >> 55)
       + ((v11 & 0x100000000000000uLL) >> 56)
       + ((v11 & 0x200000000000000uLL) >> 57)
       + ((v11 & 0x400000000000000uLL) >> 58)
       + ((v11 & 0x800000000000000uLL) >> 59)
       + ((v11 & 0x1000000000000000uLL) >> 60);
}

unint64_t sub_1C4D46A3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_79;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_80;
  }
LABEL_79:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_81;
  }
LABEL_80:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_81:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_85;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_86;
  }
LABEL_85:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_87;
  }
LABEL_86:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_87:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_91;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_92;
  }
LABEL_91:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_93;
  }
LABEL_92:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_93:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_97;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_98;
  }
LABEL_97:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_99;
  }
LABEL_98:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_99:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) != 0)
LABEL_36:
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
LABEL_37:
  v9 = v8;
  if ((v8 & 0x10000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 224) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_39:
      if ((v9 & 0x40000000) == 0)
        goto LABEL_40;
      goto LABEL_103;
    }
  }
  else if ((v8 & 0x20000000) == 0)
  {
    goto LABEL_39;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 232);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_40:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_104;
  }
LABEL_103:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 240) & 0x1FF;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_105;
  }
LABEL_104:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_105:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 256) & 0x1FFFF;
  if ((v9 & 0x200000000) != 0)
LABEL_43:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 264) & 0x1FFF;
LABEL_44:
  v10 = v9;
  if ((v9 & 0x400000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 272) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x800000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 280);
  v11 = v10;
  if ((v10 & 0x1000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 288) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x2000000000) == 0)
    {
LABEL_50:
      if ((v11 & 0x4000000000) == 0)
        goto LABEL_51;
      goto LABEL_109;
    }
  }
  else if ((v10 & 0x2000000000) == 0)
  {
    goto LABEL_50;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 296);
  if ((v11 & 0x4000000000) == 0)
  {
LABEL_51:
    if ((v11 & 0x8000000000) == 0)
      goto LABEL_52;
    goto LABEL_110;
  }
LABEL_109:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_111;
  }
LABEL_110:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 312) != 0;
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_112;
  }
LABEL_111:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 320);
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_113;
  }
LABEL_112:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 328) != 0;
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_114;
  }
LABEL_113:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_115;
  }
LABEL_114:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_116;
  }
LABEL_115:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_117;
  }
LABEL_116:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_118;
  }
LABEL_117:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_120;
  }
LABEL_119:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_124;
  }
LABEL_123:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 416);
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_125;
  }
LABEL_124:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 424);
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_126;
  }
LABEL_125:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 432);
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 440);
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_72;
    goto LABEL_71;
  }
LABEL_128:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) != 0)
LABEL_71:
    *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 464);
LABEL_72:
  v12 = v2 & 1;
  if ((v11 & 0x800000000000000) != 0)
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 472);
  v13 = v3 & 2;
  v14 = v3 & 4;
  v15 = v3 & 8;
  v16 = v3 & 0x10;
  v17 = v3 & 0x20;
  v18 = v3 & 0x40;
  v19 = v4 & 0x80;
  v20 = v4 & 0x100;
  v25 = (unsigned __int16)v6 & 0x8000;
  v26 = v6 & 0x10000;
  v27 = v6 & 0x20000;
  v28 = v6 & 0x40000;
  v29 = v6 & 0x80000;
  v30 = v6 & 0x100000;
  if ((v11 & 0x1000000000000000) != 0)
    *(_BYTE *)(a2 + 132) = *(_QWORD *)(a1 + 480) != 0;
  v21 = v5 & 0x200;
  v24 = v5 & 0x4000;
  v23 = v5 & 0x2000;
  v22 = v5 & 0x1000;
  v32 = v7 & 0x400000;
  v33 = v8 & 0x800000;
  v34 = v8 & 0x1000000;
  v35 = v8 & 0x2000000;
  v36 = v8 & 0x4000000;
  v37 = v8 & 0x8000000;
  v38 = v8 & 0x10000000;
  v40 = v9 & 0x200000000;
  v41 = v9 & 0x400000000;
  v42 = v10 & 0x800000000;
  v43 = v11 & 0x2000000000;
  v44 = v10 & 0x1000000000;
  v45 = v11 & 0x4000000000;
  v46 = v11 & 0x8000000000;
  v47 = v11 & 0x10000000000;
  v48 = v11 & 0x20000000000;
  v49 = v11 & 0x40000000000;
  v39 = BYTE4(v9) & 1;
  LODWORD(v21) = (v13 >> 1)
               + v12
               + (v14 >> 2)
               + (v15 >> 3)
               + (v16 >> 4)
               + (v17 >> 5)
               + (v18 >> 6)
               + (v19 >> 7)
               + (v20 >> 8)
               + (v21 >> 9)
               + ((unint64_t)(v5 & 0x400) >> 10)
               + ((unint64_t)(v5 & 0x800) >> 11)
               + (v22 >> 12)
               + (v23 >> 13)
               + (v24 >> 14)
               + (v25 >> 15)
               + (v26 >> 16)
               + (v27 >> 17)
               + (v28 >> 18)
               + (v29 >> 19)
               + (v30 >> 20)
               + ((v7 & 0x200000uLL) >> 21)
               + (v32 >> 22)
               + (v33 >> 23)
               + (v34 >> 24)
               + (v35 >> 25)
               + (v36 >> 26)
               + (v37 >> 27)
               + (v38 >> 28)
               + ((v9 & 0x20000000) >> 29)
               + ((v9 & 0x40000000) >> 30)
               + (v9 >> 31)
               + v39
               + (v40 >> 33)
               + (v41 >> 34)
               + (v42 >> 35)
               + (v44 >> 36)
               + (v43 >> 37)
               + (v45 >> 38)
               + (v46 >> 39)
               + (v47 >> 40)
               + (v48 >> 41)
               + (v49 >> 42);
  return (_DWORD)v21
       + ((v11 & 0x80000000000uLL) >> 43)
       + ((v11 & 0x100000000000uLL) >> 44)
       + ((v11 & 0x200000000000uLL) >> 45)
       + ((v11 & 0x400000000000uLL) >> 46)
       + ((v11 & 0x800000000000uLL) >> 47)
       + ((v11 & 0x1000000000000uLL) >> 48)
       + ((v11 & 0x2000000000000uLL) >> 49)
       + ((v11 & 0x4000000000000uLL) >> 50)
       + ((v11 & 0x8000000000000uLL) >> 51)
       + ((v11 & 0x10000000000000uLL) >> 52)
       + ((v11 & 0x20000000000000uLL) >> 53)
       + ((v11 & 0x40000000000000uLL) >> 54)
       + ((v11 & 0x80000000000000uLL) >> 55)
       + ((v11 & 0x100000000000000uLL) >> 56)
       + ((v11 & 0x200000000000000uLL) >> 57)
       + ((v11 & 0x400000000000000uLL) >> 58)
       + ((v11 & 0x800000000000000uLL) >> 59)
       + ((v11 & 0x1000000000000000uLL) >> 60);
}

unint64_t sub_1C4D47310(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  int v61;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_101;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_102;
  }
LABEL_101:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_103;
  }
LABEL_102:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_103:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_107;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_108;
  }
LABEL_107:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_109;
  }
LABEL_108:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_109:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_113;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_114;
  }
LABEL_113:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_115;
  }
LABEL_114:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_115:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_119;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_120;
  }
LABEL_119:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_121:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) != 0)
LABEL_36:
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
LABEL_37:
  v61 = v7;
  if ((v8 & 0x10000000) != 0)
    *(_BYTE *)(a2 + 53) = *(_QWORD *)(a1 + 224) != 0;
  v9 = v8;
  if ((v8 & 0x20000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 232) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x40000000) == 0)
    {
LABEL_41:
      if ((v9 & 0x80000000) == 0)
        goto LABEL_42;
      goto LABEL_125;
    }
  }
  else if ((v8 & 0x40000000) == 0)
  {
    goto LABEL_41;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 240);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_43;
    goto LABEL_126;
  }
LABEL_125:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_44;
    goto LABEL_127;
  }
LABEL_126:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 256) & 0x1FF;
  if ((v9 & 0x200000000) == 0)
  {
LABEL_44:
    if ((v9 & 0x400000000) == 0)
      goto LABEL_46;
    goto LABEL_45;
  }
LABEL_127:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 264) & 0x1FFFF;
  if ((v9 & 0x400000000) != 0)
LABEL_45:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 272) & 0x1FFF;
LABEL_46:
  v10 = v9;
  if ((v9 & 0x800000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 280) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x1000000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 288);
  v11 = v10;
  if ((v10 & 0x2000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 296) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x4000000000) == 0)
    {
LABEL_52:
      if ((v11 & 0x8000000000) == 0)
        goto LABEL_53;
      goto LABEL_131;
    }
  }
  else if ((v10 & 0x4000000000) == 0)
  {
    goto LABEL_52;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_54;
    goto LABEL_132;
  }
LABEL_131:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 312);
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_55;
    goto LABEL_133;
  }
LABEL_132:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 320) != 0;
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_57;
    goto LABEL_56;
  }
LABEL_133:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 328);
  if ((v11 & 0x40000000000) != 0)
LABEL_56:
    *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 336) != 0;
LABEL_57:
  v12 = v11;
  if ((v11 & 0x80000000000) != 0)
  {
    *(_BYTE *)(a2 + 84) = *(_BYTE *)(a1 + 344) & 1;
    v12 = *(_QWORD *)(a1 + 1248);
    if ((v12 & 0x100000000000) == 0)
    {
LABEL_59:
      if ((v12 & 0x200000000000) == 0)
        goto LABEL_60;
      goto LABEL_137;
    }
  }
  else if ((v11 & 0x100000000000) == 0)
  {
    goto LABEL_59;
  }
  *(_WORD *)(a2 + 84) = *(_QWORD *)(a1 + 352);
  if ((v12 & 0x200000000000) == 0)
  {
LABEL_60:
    if ((v12 & 0x400000000000) == 0)
      goto LABEL_61;
    goto LABEL_138;
  }
LABEL_137:
  *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 360) & 0x1FF;
  if ((v12 & 0x400000000000) == 0)
  {
LABEL_61:
    if ((v12 & 0x800000000000) == 0)
      goto LABEL_62;
    goto LABEL_139;
  }
LABEL_138:
  *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 368) & 0x1FF;
  if ((v12 & 0x800000000000) == 0)
  {
LABEL_62:
    if ((v12 & 0x1000000000000) == 0)
      goto LABEL_64;
    goto LABEL_63;
  }
LABEL_139:
  *(_DWORD *)(a2 + 84) = *(_DWORD *)(a1 + 376) & 0x1FFFF;
  if ((v12 & 0x1000000000000) != 0)
LABEL_63:
    *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 384) & 0x1FFF;
LABEL_64:
  v13 = v12;
  if ((v12 & 0x2000000000000) != 0)
  {
    *(_BYTE *)(a2 + 84) = *(_BYTE *)(a1 + 392) & 0x7F;
    v13 = *(_QWORD *)(a1 + 1248);
  }
  if ((v13 & 0x4000000000000) != 0)
    *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 400);
  v14 = v13;
  if ((v13 & 0x8000000000000) != 0)
  {
    *(_BYTE *)(a2 + 88) = *(_BYTE *)(a1 + 408) & 0xF;
    v14 = *(_QWORD *)(a1 + 1248);
    if ((v14 & 0x10000000000000) == 0)
    {
LABEL_70:
      if ((v14 & 0x20000000000000) == 0)
        goto LABEL_71;
      goto LABEL_143;
    }
  }
  else if ((v13 & 0x10000000000000) == 0)
  {
    goto LABEL_70;
  }
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 416);
  if ((v14 & 0x20000000000000) == 0)
  {
LABEL_71:
    if ((v14 & 0x40000000000000) == 0)
      goto LABEL_72;
    goto LABEL_144;
  }
LABEL_143:
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 424);
  if ((v14 & 0x40000000000000) == 0)
  {
LABEL_72:
    if ((v14 & 0x80000000000000) == 0)
      goto LABEL_73;
    goto LABEL_145;
  }
LABEL_144:
  *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 432) != 0;
  if ((v14 & 0x80000000000000) == 0)
  {
LABEL_73:
    if ((v14 & 0x100000000000000) == 0)
      goto LABEL_75;
    goto LABEL_74;
  }
LABEL_145:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 440);
  if ((v14 & 0x100000000000000) != 0)
LABEL_74:
    *(_BYTE *)(a2 + 108) = *(_QWORD *)(a1 + 448) != 0;
LABEL_75:
  v15 = v14;
  if ((v14 & 0x200000000000000) != 0)
  {
    *(_BYTE *)(a2 + 112) = *(_BYTE *)(a1 + 456) & 0x1F;
    v15 = *(_QWORD *)(a1 + 1248);
    if ((v15 & 0x400000000000000) == 0)
    {
LABEL_77:
      if ((v15 & 0x800000000000000) == 0)
        goto LABEL_78;
      goto LABEL_149;
    }
  }
  else if ((v14 & 0x400000000000000) == 0)
  {
    goto LABEL_77;
  }
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 464);
  if ((v15 & 0x800000000000000) == 0)
  {
LABEL_78:
    if ((v15 & 0x1000000000000000) == 0)
      goto LABEL_79;
    goto LABEL_150;
  }
LABEL_149:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 472);
  if ((v15 & 0x1000000000000000) == 0)
  {
LABEL_79:
    if ((v15 & 0x2000000000000000) == 0)
      goto LABEL_80;
    goto LABEL_151;
  }
LABEL_150:
  *(_BYTE *)(a2 + 124) = *(_QWORD *)(a1 + 480) != 0;
  if ((v15 & 0x2000000000000000) == 0)
  {
LABEL_80:
    if ((v15 & 0x4000000000000000) == 0)
      goto LABEL_81;
LABEL_152:
    *(_BYTE *)(a2 + 126) = *(_QWORD *)(a1 + 496) != 0;
    if ((v15 & 0x8000000000000000) == 0)
      goto LABEL_82;
    goto LABEL_153;
  }
LABEL_151:
  *(_BYTE *)(a2 + 125) = *(_QWORD *)(a1 + 488) != 0;
  if ((v15 & 0x4000000000000000) != 0)
    goto LABEL_152;
LABEL_81:
  if ((v15 & 0x8000000000000000) == 0)
    goto LABEL_82;
LABEL_153:
  *(_BYTE *)(a2 + 127) = *(_QWORD *)(a1 + 504) != 0;
LABEL_82:
  v16 = *(_QWORD *)(a1 + 1256);
  if ((v16 & 1) != 0)
  {
    *(_BYTE *)(a2 + 128) = *(_QWORD *)(a1 + 512) != 0;
    if ((v16 & 2) == 0)
    {
LABEL_84:
      if ((v16 & 4) == 0)
        goto LABEL_85;
      goto LABEL_156;
    }
  }
  else if ((v16 & 2) == 0)
  {
    goto LABEL_84;
  }
  *(_BYTE *)(a2 + 129) = *(_QWORD *)(a1 + 520) != 0;
  if ((v16 & 4) == 0)
  {
LABEL_85:
    if ((v16 & 8) == 0)
      goto LABEL_86;
    goto LABEL_157;
  }
LABEL_156:
  *(_BYTE *)(a2 + 130) = *(_QWORD *)(a1 + 528) != 0;
  if ((v16 & 8) == 0)
  {
LABEL_86:
    if ((v16 & 0x10) == 0)
      goto LABEL_87;
    goto LABEL_158;
  }
LABEL_157:
  *(_BYTE *)(a2 + 131) = *(_QWORD *)(a1 + 536) != 0;
  if ((v16 & 0x10) == 0)
  {
LABEL_87:
    if ((v16 & 0x20) == 0)
      goto LABEL_88;
    goto LABEL_159;
  }
LABEL_158:
  *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 544);
  if ((v16 & 0x20) == 0)
  {
LABEL_88:
    if ((v16 & 0x40) == 0)
      goto LABEL_89;
    goto LABEL_160;
  }
LABEL_159:
  *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 552);
  if ((v16 & 0x40) == 0)
  {
LABEL_89:
    if ((v16 & 0x80) == 0)
      goto LABEL_90;
    goto LABEL_161;
  }
LABEL_160:
  *(_DWORD *)(a2 + 140) = *(_QWORD *)(a1 + 560);
  if ((v16 & 0x80) == 0)
  {
LABEL_90:
    if ((v16 & 0x100) == 0)
      goto LABEL_91;
    goto LABEL_162;
  }
LABEL_161:
  *(_DWORD *)(a2 + 144) = *(_QWORD *)(a1 + 568);
  if ((v16 & 0x100) == 0)
  {
LABEL_91:
    if ((v16 & 0x200) == 0)
      goto LABEL_92;
    goto LABEL_163;
  }
LABEL_162:
  *(_DWORD *)(a2 + 148) = *(_QWORD *)(a1 + 576);
  if ((v16 & 0x200) == 0)
  {
LABEL_92:
    if ((v16 & 0x400) == 0)
      goto LABEL_94;
    goto LABEL_93;
  }
LABEL_163:
  *(_DWORD *)(a2 + 152) = *(_QWORD *)(a1 + 584);
  if ((v16 & 0x400) != 0)
LABEL_93:
    *(_DWORD *)(a2 + 156) = *(_QWORD *)(a1 + 592);
LABEL_94:
  v17 = v2 & 1;
  if ((v16 & 0x800) != 0)
    *(_DWORD *)(a2 + 160) = *(_QWORD *)(a1 + 600);
  v18 = v3 & 2;
  v19 = v3 & 4;
  v20 = v3 & 8;
  v21 = v3 & 0x10;
  v22 = v3 & 0x20;
  v23 = v3 & 0x40;
  v24 = v4 & 0x80;
  v25 = v4 & 0x100;
  v44 = v8 & 0x800000;
  v45 = v8 & 0x1000000;
  v46 = v8 & 0x2000000;
  v47 = v8 & 0x4000000;
  v48 = v8 & 0x8000000;
  v49 = v8 & 0x10000000;
  v33 = v8 & 0x20000000;
  v50 = v11 & 0x4000000000;
  v51 = v11 & 0x8000000000;
  v52 = v11 & 0x10000000000;
  v53 = v11 & 0x20000000000;
  v54 = v11 & 0x40000000000;
  v55 = v11 & 0x80000000000;
  if ((v16 & 0x1000) != 0)
    *(_BYTE *)(a2 + 164) = *(_QWORD *)(a1 + 608) != 0;
  v32 = (unsigned __int16)v6 & 0x8000;
  v31 = v5 & 0x4000;
  v30 = v5 & 0x2000;
  v29 = v5 & 0x1000;
  v28 = v5 & 0x800;
  v27 = v5 & 0x400;
  v26 = v5 & 0x200;
  v37 = v6 & 0x10000;
  v38 = v6 & 0x20000;
  v39 = v6 & 0x40000;
  v40 = v6 & 0x80000;
  v41 = v6 & 0x100000;
  v42 = v61 & 0x200000;
  v43 = v61 & 0x400000;
  v34 = BYTE4(v9) & 1;
  v35 = (v18 >> 1)
      + v17
      + (v19 >> 2)
      + (v20 >> 3)
      + (v21 >> 4)
      + (v22 >> 5)
      + (v23 >> 6)
      + (v24 >> 7)
      + (v25 >> 8)
      + (v26 >> 9)
      + (v27 >> 10)
      + (v28 >> 11)
      + (v29 >> 12)
      + (v30 >> 13)
      + (v31 >> 14)
      + (v32 >> 15)
      + (v37 >> 16)
      + (v38 >> 17)
      + (v39 >> 18)
      + (v40 >> 19)
      + (v41 >> 20)
      + (v42 >> 21)
      + (v43 >> 22)
      + (v44 >> 23)
      + (v45 >> 24)
      + (v46 >> 25)
      + (v47 >> 26)
      + (v48 >> 27)
      + (v49 >> 28)
      + (v33 >> 29)
      + ((v9 & 0x40000000) >> 30)
      + (v9 >> 31)
      + v34
      + ((v9 & 0x200000000) >> 33)
      + ((v9 & 0x400000000) >> 34)
      + ((v9 & 0x800000000) >> 35)
      + ((v10 & 0x1000000000) >> 36)
      + ((v10 & 0x2000000000) >> 37)
      + (v50 >> 38)
      + (v51 >> 39)
      + (v52 >> 40)
      + (v53 >> 41)
      + (v54 >> 42);
  v56 = v12 & 0x100000000000;
  v57 = v12 & 0x200000000000;
  v58 = v12 & 0x400000000000;
  v59 = v12 & 0x800000000000;
  v60 = v16 & 1;
  return v35
       + (v55 >> 43)
       + (v56 >> 44)
       + (v57 >> 45)
       + (v58 >> 46)
       + (v59 >> 47)
       + ((v12 & 0x1000000000000) >> 48)
       + ((v12 & 0x2000000000000) >> 49)
       + ((v13 & 0x4000000000000) >> 50)
       + ((v13 & 0x8000000000000) >> 51)
       + ((v14 & 0x10000000000000) >> 52)
       + ((v14 & 0x20000000000000) >> 53)
       + ((v14 & 0x40000000000000) >> 54)
       + ((v14 & 0x80000000000000) >> 55)
       + ((v14 & 0x100000000000000) >> 56)
       + ((v14 & 0x200000000000000) >> 57)
       + (v15 >> 63)
       + ((v15 & 0x400000000000000) >> 58)
       + ((v15 & 0x800000000000000) >> 59)
       + ((v15 & 0x1000000000000000) >> 60)
       + ((v15 & 0x2000000000000000) >> 61)
       + ((v15 & 0x4000000000000000) >> 62)
       + v60
       + ((unint64_t)(v16 & 2) >> 1)
       + ((unint64_t)(v16 & 4) >> 2)
       + ((unint64_t)(v16 & 8) >> 3)
       + ((unint64_t)(v16 & 0x10) >> 4)
       + ((unint64_t)(v16 & 0x20) >> 5)
       + ((unint64_t)(v16 & 0x40) >> 6)
       + ((unint64_t)(v16 & 0x80) >> 7)
       + ((unint64_t)(v16 & 0x100) >> 8)
       + ((unint64_t)(v16 & 0x200) >> 9)
       + ((unint64_t)(v16 & 0x400) >> 10)
       + ((unint64_t)(v16 & 0x800) >> 11)
       + ((unint64_t)(v16 & 0x1000) >> 12);
}

unint64_t sub_1C4D47E7C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  int v61;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_101;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_102;
  }
LABEL_101:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_103;
  }
LABEL_102:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_103:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_107;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_108;
  }
LABEL_107:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_109;
  }
LABEL_108:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_109:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_113;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_114;
  }
LABEL_113:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_115;
  }
LABEL_114:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_115:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_119;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_120;
  }
LABEL_119:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_121:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) != 0)
LABEL_36:
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
LABEL_37:
  v61 = v7;
  if ((v8 & 0x10000000) != 0)
    *(_BYTE *)(a2 + 53) = *(_QWORD *)(a1 + 224) != 0;
  v9 = v8;
  if ((v8 & 0x20000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 232) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x40000000) == 0)
    {
LABEL_41:
      if ((v9 & 0x80000000) == 0)
        goto LABEL_42;
      goto LABEL_125;
    }
  }
  else if ((v8 & 0x40000000) == 0)
  {
    goto LABEL_41;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 240);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_43;
    goto LABEL_126;
  }
LABEL_125:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_44;
    goto LABEL_127;
  }
LABEL_126:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 256) & 0x1FF;
  if ((v9 & 0x200000000) == 0)
  {
LABEL_44:
    if ((v9 & 0x400000000) == 0)
      goto LABEL_46;
    goto LABEL_45;
  }
LABEL_127:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 264) & 0x1FFFF;
  if ((v9 & 0x400000000) != 0)
LABEL_45:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 272) & 0x1FFF;
LABEL_46:
  v10 = v9;
  if ((v9 & 0x800000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 280) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x1000000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 288);
  v11 = v10;
  if ((v10 & 0x2000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 296) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x4000000000) == 0)
    {
LABEL_52:
      if ((v11 & 0x8000000000) == 0)
        goto LABEL_53;
      goto LABEL_131;
    }
  }
  else if ((v10 & 0x4000000000) == 0)
  {
    goto LABEL_52;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_54;
    goto LABEL_132;
  }
LABEL_131:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 312);
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_55;
    goto LABEL_133;
  }
LABEL_132:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 320) != 0;
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_57;
    goto LABEL_56;
  }
LABEL_133:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 328);
  if ((v11 & 0x40000000000) != 0)
LABEL_56:
    *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 336) != 0;
LABEL_57:
  v12 = v11;
  if ((v11 & 0x80000000000) != 0)
  {
    *(_BYTE *)(a2 + 84) = *(_BYTE *)(a1 + 344) & 1;
    v12 = *(_QWORD *)(a1 + 1248);
    if ((v12 & 0x100000000000) == 0)
    {
LABEL_59:
      if ((v12 & 0x200000000000) == 0)
        goto LABEL_60;
      goto LABEL_137;
    }
  }
  else if ((v11 & 0x100000000000) == 0)
  {
    goto LABEL_59;
  }
  *(_WORD *)(a2 + 84) = *(_QWORD *)(a1 + 352);
  if ((v12 & 0x200000000000) == 0)
  {
LABEL_60:
    if ((v12 & 0x400000000000) == 0)
      goto LABEL_61;
    goto LABEL_138;
  }
LABEL_137:
  *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 360) & 0x1FF;
  if ((v12 & 0x400000000000) == 0)
  {
LABEL_61:
    if ((v12 & 0x800000000000) == 0)
      goto LABEL_62;
    goto LABEL_139;
  }
LABEL_138:
  *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 368) & 0x1FF;
  if ((v12 & 0x800000000000) == 0)
  {
LABEL_62:
    if ((v12 & 0x1000000000000) == 0)
      goto LABEL_64;
    goto LABEL_63;
  }
LABEL_139:
  *(_DWORD *)(a2 + 84) = *(_DWORD *)(a1 + 376) & 0x1FFFF;
  if ((v12 & 0x1000000000000) != 0)
LABEL_63:
    *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 384) & 0x1FFF;
LABEL_64:
  v13 = v12;
  if ((v12 & 0x2000000000000) != 0)
  {
    *(_BYTE *)(a2 + 84) = *(_BYTE *)(a1 + 392) & 0x7F;
    v13 = *(_QWORD *)(a1 + 1248);
  }
  if ((v13 & 0x4000000000000) != 0)
    *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 400);
  v14 = v13;
  if ((v13 & 0x8000000000000) != 0)
  {
    *(_BYTE *)(a2 + 88) = *(_BYTE *)(a1 + 408) & 0xF;
    v14 = *(_QWORD *)(a1 + 1248);
    if ((v14 & 0x10000000000000) == 0)
    {
LABEL_70:
      if ((v14 & 0x20000000000000) == 0)
        goto LABEL_71;
      goto LABEL_143;
    }
  }
  else if ((v13 & 0x10000000000000) == 0)
  {
    goto LABEL_70;
  }
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 416);
  if ((v14 & 0x20000000000000) == 0)
  {
LABEL_71:
    if ((v14 & 0x40000000000000) == 0)
      goto LABEL_72;
    goto LABEL_144;
  }
LABEL_143:
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 424);
  if ((v14 & 0x40000000000000) == 0)
  {
LABEL_72:
    if ((v14 & 0x80000000000000) == 0)
      goto LABEL_73;
    goto LABEL_145;
  }
LABEL_144:
  *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 432) != 0;
  if ((v14 & 0x80000000000000) == 0)
  {
LABEL_73:
    if ((v14 & 0x100000000000000) == 0)
      goto LABEL_75;
    goto LABEL_74;
  }
LABEL_145:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 440);
  if ((v14 & 0x100000000000000) != 0)
LABEL_74:
    *(_BYTE *)(a2 + 108) = *(_QWORD *)(a1 + 448) != 0;
LABEL_75:
  v15 = v14;
  if ((v14 & 0x200000000000000) != 0)
  {
    *(_BYTE *)(a2 + 112) = *(_BYTE *)(a1 + 456) & 0x1F;
    v15 = *(_QWORD *)(a1 + 1248);
    if ((v15 & 0x400000000000000) == 0)
    {
LABEL_77:
      if ((v15 & 0x800000000000000) == 0)
        goto LABEL_78;
      goto LABEL_149;
    }
  }
  else if ((v14 & 0x400000000000000) == 0)
  {
    goto LABEL_77;
  }
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 464);
  if ((v15 & 0x800000000000000) == 0)
  {
LABEL_78:
    if ((v15 & 0x1000000000000000) == 0)
      goto LABEL_79;
    goto LABEL_150;
  }
LABEL_149:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 472);
  if ((v15 & 0x1000000000000000) == 0)
  {
LABEL_79:
    if ((v15 & 0x2000000000000000) == 0)
      goto LABEL_80;
    goto LABEL_151;
  }
LABEL_150:
  *(_BYTE *)(a2 + 124) = *(_QWORD *)(a1 + 480) != 0;
  if ((v15 & 0x2000000000000000) == 0)
  {
LABEL_80:
    if ((v15 & 0x4000000000000000) == 0)
      goto LABEL_81;
LABEL_152:
    *(_BYTE *)(a2 + 126) = *(_QWORD *)(a1 + 496) != 0;
    if ((v15 & 0x8000000000000000) == 0)
      goto LABEL_82;
    goto LABEL_153;
  }
LABEL_151:
  *(_BYTE *)(a2 + 125) = *(_QWORD *)(a1 + 488) != 0;
  if ((v15 & 0x4000000000000000) != 0)
    goto LABEL_152;
LABEL_81:
  if ((v15 & 0x8000000000000000) == 0)
    goto LABEL_82;
LABEL_153:
  *(_BYTE *)(a2 + 127) = *(_QWORD *)(a1 + 504) != 0;
LABEL_82:
  v16 = *(_QWORD *)(a1 + 1256);
  if ((v16 & 1) != 0)
  {
    *(_BYTE *)(a2 + 128) = *(_QWORD *)(a1 + 512) != 0;
    if ((v16 & 2) == 0)
    {
LABEL_84:
      if ((v16 & 4) == 0)
        goto LABEL_85;
      goto LABEL_156;
    }
  }
  else if ((v16 & 2) == 0)
  {
    goto LABEL_84;
  }
  *(_BYTE *)(a2 + 129) = *(_QWORD *)(a1 + 520) != 0;
  if ((v16 & 4) == 0)
  {
LABEL_85:
    if ((v16 & 8) == 0)
      goto LABEL_86;
    goto LABEL_157;
  }
LABEL_156:
  *(_BYTE *)(a2 + 130) = *(_QWORD *)(a1 + 528) != 0;
  if ((v16 & 8) == 0)
  {
LABEL_86:
    if ((v16 & 0x10) == 0)
      goto LABEL_87;
    goto LABEL_158;
  }
LABEL_157:
  *(_BYTE *)(a2 + 131) = *(_QWORD *)(a1 + 536) != 0;
  if ((v16 & 0x10) == 0)
  {
LABEL_87:
    if ((v16 & 0x20) == 0)
      goto LABEL_88;
    goto LABEL_159;
  }
LABEL_158:
  *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 544);
  if ((v16 & 0x20) == 0)
  {
LABEL_88:
    if ((v16 & 0x40) == 0)
      goto LABEL_89;
    goto LABEL_160;
  }
LABEL_159:
  *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 552);
  if ((v16 & 0x40) == 0)
  {
LABEL_89:
    if ((v16 & 0x80) == 0)
      goto LABEL_90;
    goto LABEL_161;
  }
LABEL_160:
  *(_DWORD *)(a2 + 140) = *(_QWORD *)(a1 + 560);
  if ((v16 & 0x80) == 0)
  {
LABEL_90:
    if ((v16 & 0x100) == 0)
      goto LABEL_91;
    goto LABEL_162;
  }
LABEL_161:
  *(_DWORD *)(a2 + 144) = *(_QWORD *)(a1 + 568);
  if ((v16 & 0x100) == 0)
  {
LABEL_91:
    if ((v16 & 0x200) == 0)
      goto LABEL_92;
    goto LABEL_163;
  }
LABEL_162:
  *(_DWORD *)(a2 + 148) = *(_QWORD *)(a1 + 576);
  if ((v16 & 0x200) == 0)
  {
LABEL_92:
    if ((v16 & 0x400) == 0)
      goto LABEL_94;
    goto LABEL_93;
  }
LABEL_163:
  *(_DWORD *)(a2 + 152) = *(_QWORD *)(a1 + 584);
  if ((v16 & 0x400) != 0)
LABEL_93:
    *(_DWORD *)(a2 + 156) = *(_QWORD *)(a1 + 592);
LABEL_94:
  v17 = v2 & 1;
  if ((v16 & 0x800) != 0)
    *(_DWORD *)(a2 + 160) = *(_QWORD *)(a1 + 600);
  v18 = v3 & 2;
  v19 = v3 & 4;
  v20 = v3 & 8;
  v21 = v3 & 0x10;
  v22 = v3 & 0x20;
  v23 = v3 & 0x40;
  v24 = v4 & 0x80;
  v25 = v4 & 0x100;
  v44 = v8 & 0x800000;
  v45 = v8 & 0x1000000;
  v46 = v8 & 0x2000000;
  v47 = v8 & 0x4000000;
  v48 = v8 & 0x8000000;
  v49 = v8 & 0x10000000;
  v33 = v8 & 0x20000000;
  v50 = v11 & 0x4000000000;
  v51 = v11 & 0x8000000000;
  v52 = v11 & 0x10000000000;
  v53 = v11 & 0x20000000000;
  v54 = v11 & 0x40000000000;
  v55 = v11 & 0x80000000000;
  if ((v16 & 0x1000) != 0)
    *(_BYTE *)(a2 + 164) = *(_QWORD *)(a1 + 608) != 0;
  v32 = (unsigned __int16)v6 & 0x8000;
  v31 = v5 & 0x4000;
  v30 = v5 & 0x2000;
  v29 = v5 & 0x1000;
  v28 = v5 & 0x800;
  v27 = v5 & 0x400;
  v26 = v5 & 0x200;
  v37 = v6 & 0x10000;
  v38 = v6 & 0x20000;
  v39 = v6 & 0x40000;
  v40 = v6 & 0x80000;
  v41 = v6 & 0x100000;
  v42 = v61 & 0x200000;
  v43 = v61 & 0x400000;
  v34 = BYTE4(v9) & 1;
  v35 = (v18 >> 1)
      + v17
      + (v19 >> 2)
      + (v20 >> 3)
      + (v21 >> 4)
      + (v22 >> 5)
      + (v23 >> 6)
      + (v24 >> 7)
      + (v25 >> 8)
      + (v26 >> 9)
      + (v27 >> 10)
      + (v28 >> 11)
      + (v29 >> 12)
      + (v30 >> 13)
      + (v31 >> 14)
      + (v32 >> 15)
      + (v37 >> 16)
      + (v38 >> 17)
      + (v39 >> 18)
      + (v40 >> 19)
      + (v41 >> 20)
      + (v42 >> 21)
      + (v43 >> 22)
      + (v44 >> 23)
      + (v45 >> 24)
      + (v46 >> 25)
      + (v47 >> 26)
      + (v48 >> 27)
      + (v49 >> 28)
      + (v33 >> 29)
      + ((v9 & 0x40000000) >> 30)
      + (v9 >> 31)
      + v34
      + ((v9 & 0x200000000) >> 33)
      + ((v9 & 0x400000000) >> 34)
      + ((v9 & 0x800000000) >> 35)
      + ((v10 & 0x1000000000) >> 36)
      + ((v10 & 0x2000000000) >> 37)
      + (v50 >> 38)
      + (v51 >> 39)
      + (v52 >> 40)
      + (v53 >> 41)
      + (v54 >> 42);
  v56 = v12 & 0x100000000000;
  v57 = v12 & 0x200000000000;
  v58 = v12 & 0x400000000000;
  v59 = v12 & 0x800000000000;
  v60 = v16 & 1;
  return v35
       + (v55 >> 43)
       + (v56 >> 44)
       + (v57 >> 45)
       + (v58 >> 46)
       + (v59 >> 47)
       + ((v12 & 0x1000000000000) >> 48)
       + ((v12 & 0x2000000000000) >> 49)
       + ((v13 & 0x4000000000000) >> 50)
       + ((v13 & 0x8000000000000) >> 51)
       + ((v14 & 0x10000000000000) >> 52)
       + ((v14 & 0x20000000000000) >> 53)
       + ((v14 & 0x40000000000000) >> 54)
       + ((v14 & 0x80000000000000) >> 55)
       + ((v14 & 0x100000000000000) >> 56)
       + ((v14 & 0x200000000000000) >> 57)
       + (v15 >> 63)
       + ((v15 & 0x400000000000000) >> 58)
       + ((v15 & 0x800000000000000) >> 59)
       + ((v15 & 0x1000000000000000) >> 60)
       + ((v15 & 0x2000000000000000) >> 61)
       + ((v15 & 0x4000000000000000) >> 62)
       + v60
       + ((unint64_t)(v16 & 2) >> 1)
       + ((unint64_t)(v16 & 4) >> 2)
       + ((unint64_t)(v16 & 8) >> 3)
       + ((unint64_t)(v16 & 0x10) >> 4)
       + ((unint64_t)(v16 & 0x20) >> 5)
       + ((unint64_t)(v16 & 0x40) >> 6)
       + ((unint64_t)(v16 & 0x80) >> 7)
       + ((unint64_t)(v16 & 0x100) >> 8)
       + ((unint64_t)(v16 & 0x200) >> 9)
       + ((unint64_t)(v16 & 0x400) >> 10)
       + ((unint64_t)(v16 & 0x800) >> 11)
       + ((unint64_t)(v16 & 0x1000) >> 12);
}

unint64_t sub_1C4D489E8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  int v44;
  int v45;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  int v137;
  int v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  int v145;
  __int16 v146;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_199;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_200;
  }
LABEL_199:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_201;
  }
LABEL_200:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_201:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_205;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_206;
  }
LABEL_205:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_207;
  }
LABEL_206:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_207:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_211;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_212;
  }
LABEL_211:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_213;
  }
LABEL_212:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_213:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_217;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_218;
  }
LABEL_217:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_36;
    goto LABEL_35;
  }
LABEL_218:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) != 0)
LABEL_35:
    *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
LABEL_36:
  v146 = v4;
  if ((v8 & 0x8000000) != 0)
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  v9 = v8;
  if ((v8 & 0x10000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 224) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_40:
      if ((v9 & 0x40000000) == 0)
        goto LABEL_41;
      goto LABEL_222;
    }
  }
  else if ((v8 & 0x20000000) == 0)
  {
    goto LABEL_40;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 232);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_223;
  }
LABEL_222:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 240) & 0x1FF;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_43;
    goto LABEL_224;
  }
LABEL_223:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_45;
    goto LABEL_44;
  }
LABEL_224:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 256) & 0x1FFFF;
  if ((v9 & 0x200000000) != 0)
LABEL_44:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 264) & 0x1FFF;
LABEL_45:
  v10 = v9;
  if ((v9 & 0x400000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 272) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x800000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 280);
  v11 = v10;
  if ((v10 & 0x1000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 288) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x2000000000) == 0)
    {
LABEL_51:
      if ((v11 & 0x4000000000) == 0)
        goto LABEL_52;
      goto LABEL_228;
    }
  }
  else if ((v10 & 0x2000000000) == 0)
  {
    goto LABEL_51;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 296);
  if ((v11 & 0x4000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x8000000000) == 0)
      goto LABEL_53;
    goto LABEL_229;
  }
LABEL_228:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_54;
    goto LABEL_230;
  }
LABEL_229:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 312) != 0;
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_56;
    goto LABEL_55;
  }
LABEL_230:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 320);
  if ((v11 & 0x20000000000) != 0)
LABEL_55:
    *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 328) != 0;
LABEL_56:
  v12 = v11;
  if ((v11 & 0x40000000000) != 0)
  {
    *(_BYTE *)(a2 + 84) = *(_BYTE *)(a1 + 336) & 1;
    v12 = *(_QWORD *)(a1 + 1248);
    if ((v12 & 0x80000000000) == 0)
    {
LABEL_58:
      if ((v12 & 0x100000000000) == 0)
        goto LABEL_59;
      goto LABEL_234;
    }
  }
  else if ((v11 & 0x80000000000) == 0)
  {
    goto LABEL_58;
  }
  *(_WORD *)(a2 + 84) = *(_QWORD *)(a1 + 344);
  if ((v12 & 0x100000000000) == 0)
  {
LABEL_59:
    if ((v12 & 0x200000000000) == 0)
      goto LABEL_60;
    goto LABEL_235;
  }
LABEL_234:
  *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 352) & 0x1FF;
  if ((v12 & 0x200000000000) == 0)
  {
LABEL_60:
    if ((v12 & 0x400000000000) == 0)
      goto LABEL_61;
    goto LABEL_236;
  }
LABEL_235:
  *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 360) & 0x1FF;
  if ((v12 & 0x400000000000) == 0)
  {
LABEL_61:
    if ((v12 & 0x800000000000) == 0)
      goto LABEL_63;
    goto LABEL_62;
  }
LABEL_236:
  *(_DWORD *)(a2 + 84) = *(_DWORD *)(a1 + 368) & 0x1FFFF;
  if ((v12 & 0x800000000000) != 0)
LABEL_62:
    *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 376) & 0x1FFF;
LABEL_63:
  v13 = v12;
  if ((v12 & 0x1000000000000) != 0)
  {
    *(_BYTE *)(a2 + 84) = *(_BYTE *)(a1 + 384) & 0x7F;
    v13 = *(_QWORD *)(a1 + 1248);
  }
  if ((v13 & 0x2000000000000) != 0)
    *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 392);
  v14 = v13;
  if ((v13 & 0x4000000000000) != 0)
  {
    *(_BYTE *)(a2 + 88) = *(_BYTE *)(a1 + 400) & 0xF;
    v14 = *(_QWORD *)(a1 + 1248);
    if ((v14 & 0x8000000000000) == 0)
    {
LABEL_69:
      if ((v14 & 0x10000000000000) == 0)
        goto LABEL_70;
      goto LABEL_240;
    }
  }
  else if ((v13 & 0x8000000000000) == 0)
  {
    goto LABEL_69;
  }
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 408);
  if ((v14 & 0x10000000000000) == 0)
  {
LABEL_70:
    if ((v14 & 0x20000000000000) == 0)
      goto LABEL_71;
    goto LABEL_241;
  }
LABEL_240:
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 416);
  if ((v14 & 0x20000000000000) == 0)
  {
LABEL_71:
    if ((v14 & 0x40000000000000) == 0)
      goto LABEL_72;
    goto LABEL_242;
  }
LABEL_241:
  *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 424) != 0;
  if ((v14 & 0x40000000000000) == 0)
  {
LABEL_72:
    if ((v14 & 0x80000000000000) == 0)
      goto LABEL_74;
    goto LABEL_73;
  }
LABEL_242:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 432);
  if ((v14 & 0x80000000000000) != 0)
LABEL_73:
    *(_BYTE *)(a2 + 108) = *(_QWORD *)(a1 + 440) != 0;
LABEL_74:
  v15 = v14;
  if ((v14 & 0x100000000000000) != 0)
  {
    *(_BYTE *)(a2 + 112) = *(unsigned __int8 *)(a1 + 448) << 25 >> 25;
    v15 = *(_QWORD *)(a1 + 1248);
  }
  v143 = v10;
  if ((v15 & 0x200000000000000) != 0)
    *(_BYTE *)(a2 + 113) = *(_QWORD *)(a1 + 456) != 0;
  v16 = v15;
  if ((v15 & 0x400000000000000) != 0)
  {
    *(_BYTE *)(a2 + 114) = *(unsigned __int8 *)(a1 + 464) << 25 >> 25;
    v16 = *(_QWORD *)(a1 + 1248);
    if ((v16 & 0x800000000000000) == 0)
    {
LABEL_80:
      if ((v16 & 0x1000000000000000) == 0)
        goto LABEL_81;
      goto LABEL_246;
    }
  }
  else if ((v15 & 0x800000000000000) == 0)
  {
    goto LABEL_80;
  }
  *(_BYTE *)(a2 + 115) = *(_QWORD *)(a1 + 472) != 0;
  if ((v16 & 0x1000000000000000) == 0)
  {
LABEL_81:
    if ((v16 & 0x2000000000000000) == 0)
      goto LABEL_82;
    goto LABEL_247;
  }
LABEL_246:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 480);
  if ((v16 & 0x2000000000000000) == 0)
  {
LABEL_82:
    if ((v16 & 0x4000000000000000) == 0)
      goto LABEL_83;
LABEL_248:
    *(_BYTE *)(a2 + 124) = *(_QWORD *)(a1 + 496) != 0;
    if ((v16 & 0x8000000000000000) == 0)
      goto LABEL_84;
    goto LABEL_249;
  }
LABEL_247:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 488);
  if ((v16 & 0x4000000000000000) != 0)
    goto LABEL_248;
LABEL_83:
  if ((v16 & 0x8000000000000000) == 0)
    goto LABEL_84;
LABEL_249:
  *(_BYTE *)(a2 + 125) = *(_QWORD *)(a1 + 504) != 0;
LABEL_84:
  v17 = *(_QWORD *)(a1 + 1256);
  if ((v17 & 1) != 0)
  {
    *(_BYTE *)(a2 + 126) = *(_QWORD *)(a1 + 512) != 0;
    if ((v17 & 2) == 0)
    {
LABEL_86:
      if ((v17 & 4) == 0)
        goto LABEL_87;
      goto LABEL_252;
    }
  }
  else if ((v17 & 2) == 0)
  {
    goto LABEL_86;
  }
  *(_BYTE *)(a2 + 127) = *(_QWORD *)(a1 + 520) != 0;
  if ((v17 & 4) == 0)
  {
LABEL_87:
    if ((v17 & 8) == 0)
      goto LABEL_88;
    goto LABEL_253;
  }
LABEL_252:
  *(_BYTE *)(a2 + 128) = *(_QWORD *)(a1 + 528) != 0;
  if ((v17 & 8) == 0)
  {
LABEL_88:
    if ((v17 & 0x10) == 0)
      goto LABEL_89;
    goto LABEL_254;
  }
LABEL_253:
  *(_BYTE *)(a2 + 129) = *(_QWORD *)(a1 + 536) != 0;
  if ((v17 & 0x10) == 0)
  {
LABEL_89:
    if ((v17 & 0x20) == 0)
      goto LABEL_90;
    goto LABEL_255;
  }
LABEL_254:
  *(_BYTE *)(a2 + 130) = *(_QWORD *)(a1 + 544) != 0;
  if ((v17 & 0x20) == 0)
  {
LABEL_90:
    if ((v17 & 0x40) == 0)
      goto LABEL_92;
    goto LABEL_91;
  }
LABEL_255:
  *(_BYTE *)(a2 + 131) = *(_QWORD *)(a1 + 552) != 0;
  if ((v17 & 0x40) != 0)
LABEL_91:
    *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 560);
LABEL_92:
  v18 = v17;
  if ((v17 & 0x80) != 0)
  {
    *(_BYTE *)(a2 + 136) = *(_BYTE *)(a1 + 568) & 0xF;
    v18 = *(_QWORD *)(a1 + 1256);
    if ((v18 & 0x100) == 0)
    {
LABEL_94:
      if ((v18 & 0x200) == 0)
        goto LABEL_95;
      goto LABEL_259;
    }
  }
  else if ((v17 & 0x100) == 0)
  {
    goto LABEL_94;
  }
  *(_DWORD *)(a2 + 140) = *(_QWORD *)(a1 + 576);
  if ((v18 & 0x200) == 0)
  {
LABEL_95:
    if ((v18 & 0x400) == 0)
      goto LABEL_96;
    goto LABEL_260;
  }
LABEL_259:
  *(_DWORD *)(a2 + 144) = *(_QWORD *)(a1 + 584);
  if ((v18 & 0x400) == 0)
  {
LABEL_96:
    if ((v18 & 0x800) == 0)
      goto LABEL_98;
    goto LABEL_97;
  }
LABEL_260:
  *(_DWORD *)(a2 + 148) = *(_QWORD *)(a1 + 592);
  if ((v18 & 0x800) != 0)
LABEL_97:
    *(_DWORD *)(a2 + 152) = *(_QWORD *)(a1 + 600);
LABEL_98:
  v19 = v18;
  if ((v18 & 0x1000) != 0)
  {
    *(_BYTE *)(a2 + 156) = *(_BYTE *)(a1 + 608) & 1;
    v19 = *(_QWORD *)(a1 + 1256);
    if ((v19 & 0x2000) == 0)
    {
LABEL_100:
      if ((v19 & 0x4000) == 0)
        goto LABEL_101;
      goto LABEL_264;
    }
  }
  else if ((v18 & 0x2000) == 0)
  {
    goto LABEL_100;
  }
  *(_WORD *)(a2 + 156) = *(_QWORD *)(a1 + 616);
  if ((v19 & 0x4000) == 0)
  {
LABEL_101:
    if ((v19 & 0x8000) == 0)
      goto LABEL_102;
    goto LABEL_265;
  }
LABEL_264:
  *(_WORD *)(a2 + 156) = *(_WORD *)(a1 + 624) & 0x1FF;
  if ((v19 & 0x8000) == 0)
  {
LABEL_102:
    if ((v19 & 0x10000) == 0)
      goto LABEL_103;
    goto LABEL_266;
  }
LABEL_265:
  *(_WORD *)(a2 + 156) = *(_WORD *)(a1 + 632) & 0x1FF;
  if ((v19 & 0x10000) == 0)
  {
LABEL_103:
    if ((v19 & 0x20000) == 0)
      goto LABEL_105;
    goto LABEL_104;
  }
LABEL_266:
  *(_DWORD *)(a2 + 156) = *(_DWORD *)(a1 + 640) & 0x1FFFF;
  if ((v19 & 0x20000) != 0)
LABEL_104:
    *(_WORD *)(a2 + 156) = *(_WORD *)(a1 + 648) & 0x1FFF;
LABEL_105:
  v20 = v19;
  if ((v19 & 0x40000) != 0)
  {
    *(_BYTE *)(a2 + 156) = *(_BYTE *)(a1 + 656) & 0x7F;
    v20 = *(_QWORD *)(a1 + 1256);
  }
  if ((v20 & 0x80000) != 0)
    *(_DWORD *)(a2 + 156) = *(_QWORD *)(a1 + 664);
  v21 = v20;
  if ((v20 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 160) = *(_BYTE *)(a1 + 672) & 0xF;
    v21 = *(_QWORD *)(a1 + 1256);
    if ((v21 & 0x200000) == 0)
    {
LABEL_111:
      if ((v21 & 0x400000) == 0)
        goto LABEL_112;
      goto LABEL_270;
    }
  }
  else if ((v20 & 0x200000) == 0)
  {
    goto LABEL_111;
  }
  *(_DWORD *)(a2 + 164) = *(_QWORD *)(a1 + 680);
  if ((v21 & 0x400000) == 0)
  {
LABEL_112:
    if ((v21 & 0x800000) == 0)
      goto LABEL_113;
    goto LABEL_271;
  }
LABEL_270:
  *(_DWORD *)(a2 + 168) = *(_QWORD *)(a1 + 688);
  if ((v21 & 0x800000) == 0)
  {
LABEL_113:
    if ((v21 & 0x1000000) == 0)
      goto LABEL_115;
    goto LABEL_114;
  }
LABEL_271:
  *(_BYTE *)(a2 + 172) = *(_QWORD *)(a1 + 696) != 0;
  if ((v21 & 0x1000000) != 0)
LABEL_114:
    *(_DWORD *)(a2 + 176) = *(_QWORD *)(a1 + 704);
LABEL_115:
  v141 = v13;
  v144 = v16;
  if ((v21 & 0x2000000) != 0)
    *(_BYTE *)(a2 + 180) = *(_QWORD *)(a1 + 712) != 0;
  v22 = v21;
  if ((v21 & 0x4000000) != 0)
  {
    *(_BYTE *)(a2 + 184) = *(_BYTE *)(a1 + 720) & 1;
    v22 = *(_QWORD *)(a1 + 1256);
    if ((v22 & 0x8000000) == 0)
    {
LABEL_119:
      if ((v22 & 0x10000000) == 0)
        goto LABEL_120;
      goto LABEL_275;
    }
  }
  else if ((v21 & 0x8000000) == 0)
  {
    goto LABEL_119;
  }
  *(_WORD *)(a2 + 184) = *(_QWORD *)(a1 + 728);
  if ((v22 & 0x10000000) == 0)
  {
LABEL_120:
    if ((v22 & 0x20000000) == 0)
      goto LABEL_121;
    goto LABEL_276;
  }
LABEL_275:
  *(_WORD *)(a2 + 184) = *(_WORD *)(a1 + 736) & 0x1FF;
  if ((v22 & 0x20000000) == 0)
  {
LABEL_121:
    if ((v22 & 0x40000000) == 0)
      goto LABEL_122;
    goto LABEL_277;
  }
LABEL_276:
  *(_WORD *)(a2 + 184) = *(_WORD *)(a1 + 744) & 0x1FF;
  if ((v22 & 0x40000000) == 0)
  {
LABEL_122:
    if ((v22 & 0x80000000) == 0)
      goto LABEL_124;
    goto LABEL_123;
  }
LABEL_277:
  *(_DWORD *)(a2 + 184) = *(_DWORD *)(a1 + 752) & 0x1FFFF;
  if ((v22 & 0x80000000) != 0)
LABEL_123:
    *(_WORD *)(a2 + 184) = *(_WORD *)(a1 + 760) & 0x1FFF;
LABEL_124:
  v23 = v22;
  if ((v22 & 0x100000000) != 0)
  {
    *(_BYTE *)(a2 + 184) = *(_BYTE *)(a1 + 768) & 0x7F;
    v23 = *(_QWORD *)(a1 + 1256);
  }
  if ((v23 & 0x200000000) != 0)
    *(_DWORD *)(a2 + 184) = *(_QWORD *)(a1 + 776);
  v24 = v23;
  if ((v23 & 0x400000000) != 0)
  {
    *(_BYTE *)(a2 + 188) = *(_BYTE *)(a1 + 784) & 0xF;
    v24 = *(_QWORD *)(a1 + 1256);
    if ((v24 & 0x800000000) == 0)
    {
LABEL_130:
      if ((v24 & 0x1000000000) == 0)
        goto LABEL_131;
      goto LABEL_281;
    }
  }
  else if ((v23 & 0x800000000) == 0)
  {
    goto LABEL_130;
  }
  *(_DWORD *)(a2 + 192) = *(_QWORD *)(a1 + 792);
  if ((v24 & 0x1000000000) == 0)
  {
LABEL_131:
    if ((v24 & 0x2000000000) == 0)
      goto LABEL_132;
    goto LABEL_282;
  }
LABEL_281:
  *(_DWORD *)(a2 + 196) = *(_QWORD *)(a1 + 800);
  if ((v24 & 0x2000000000) == 0)
  {
LABEL_132:
    if ((v24 & 0x4000000000) == 0)
      goto LABEL_133;
    goto LABEL_283;
  }
LABEL_282:
  *(_BYTE *)(a2 + 200) = *(_QWORD *)(a1 + 808) != 0;
  if ((v24 & 0x4000000000) == 0)
  {
LABEL_133:
    if ((v24 & 0x8000000000) == 0)
      goto LABEL_134;
    goto LABEL_284;
  }
LABEL_283:
  *(_DWORD *)(a2 + 204) = *(_QWORD *)(a1 + 816);
  if ((v24 & 0x8000000000) == 0)
  {
LABEL_134:
    if ((v24 & 0x10000000000) == 0)
      goto LABEL_136;
    goto LABEL_135;
  }
LABEL_284:
  *(_BYTE *)(a2 + 208) = *(_QWORD *)(a1 + 824) != 0;
  if ((v24 & 0x10000000000) != 0)
LABEL_135:
    *(_BYTE *)(a2 + 209) = *(_QWORD *)(a1 + 832) != 0;
LABEL_136:
  v25 = v24;
  if ((v24 & 0x20000000000) != 0)
  {
    *(_BYTE *)(a2 + 212) = *(_BYTE *)(a1 + 840) & 1;
    v25 = *(_QWORD *)(a1 + 1256);
    if ((v25 & 0x40000000000) == 0)
    {
LABEL_138:
      if ((v25 & 0x80000000000) == 0)
        goto LABEL_139;
      goto LABEL_288;
    }
  }
  else if ((v24 & 0x40000000000) == 0)
  {
    goto LABEL_138;
  }
  *(_WORD *)(a2 + 212) = *(_QWORD *)(a1 + 848);
  if ((v25 & 0x80000000000) == 0)
  {
LABEL_139:
    if ((v25 & 0x100000000000) == 0)
      goto LABEL_140;
    goto LABEL_289;
  }
LABEL_288:
  *(_WORD *)(a2 + 212) = *(_WORD *)(a1 + 856) & 0x1FF;
  if ((v25 & 0x100000000000) == 0)
  {
LABEL_140:
    if ((v25 & 0x200000000000) == 0)
      goto LABEL_141;
    goto LABEL_290;
  }
LABEL_289:
  *(_WORD *)(a2 + 212) = *(_WORD *)(a1 + 864) & 0x1FF;
  if ((v25 & 0x200000000000) == 0)
  {
LABEL_141:
    if ((v25 & 0x400000000000) == 0)
      goto LABEL_143;
    goto LABEL_142;
  }
LABEL_290:
  *(_DWORD *)(a2 + 212) = *(_DWORD *)(a1 + 872) & 0x1FFFF;
  if ((v25 & 0x400000000000) != 0)
LABEL_142:
    *(_WORD *)(a2 + 212) = *(_WORD *)(a1 + 880) & 0x1FFF;
LABEL_143:
  v26 = v25;
  if ((v25 & 0x800000000000) != 0)
  {
    *(_BYTE *)(a2 + 212) = *(_BYTE *)(a1 + 888) & 0x7F;
    v26 = *(_QWORD *)(a1 + 1256);
  }
  if ((v26 & 0x1000000000000) != 0)
    *(_DWORD *)(a2 + 212) = *(_QWORD *)(a1 + 896);
  v145 = v7;
  v27 = v26;
  if ((v26 & 0x2000000000000) != 0)
  {
    *(_BYTE *)(a2 + 216) = *(_BYTE *)(a1 + 904) & 0xF;
    v27 = *(_QWORD *)(a1 + 1256);
    if ((v27 & 0x4000000000000) == 0)
    {
LABEL_149:
      if ((v27 & 0x8000000000000) == 0)
        goto LABEL_150;
      goto LABEL_294;
    }
  }
  else if ((v26 & 0x4000000000000) == 0)
  {
    goto LABEL_149;
  }
  *(_DWORD *)(a2 + 220) = *(_QWORD *)(a1 + 912);
  if ((v27 & 0x8000000000000) == 0)
  {
LABEL_150:
    if ((v27 & 0x10000000000000) == 0)
      goto LABEL_151;
    goto LABEL_295;
  }
LABEL_294:
  *(_DWORD *)(a2 + 224) = *(_QWORD *)(a1 + 920);
  if ((v27 & 0x10000000000000) == 0)
  {
LABEL_151:
    if ((v27 & 0x20000000000000) == 0)
      goto LABEL_152;
    goto LABEL_296;
  }
LABEL_295:
  *(_BYTE *)(a2 + 228) = *(_QWORD *)(a1 + 928) != 0;
  if ((v27 & 0x20000000000000) == 0)
  {
LABEL_152:
    if ((v27 & 0x40000000000000) == 0)
      goto LABEL_154;
    goto LABEL_153;
  }
LABEL_296:
  *(_DWORD *)(a2 + 232) = *(_QWORD *)(a1 + 936);
  if ((v27 & 0x40000000000000) != 0)
LABEL_153:
    *(_BYTE *)(a2 + 236) = *(_QWORD *)(a1 + 944) != 0;
LABEL_154:
  v28 = v27;
  if ((v27 & 0x80000000000000) != 0)
  {
    *(_BYTE *)(a2 + 240) = *(_BYTE *)(a1 + 952) & 1;
    v28 = *(_QWORD *)(a1 + 1256);
    if ((v28 & 0x100000000000000) == 0)
    {
LABEL_156:
      if ((v28 & 0x200000000000000) == 0)
        goto LABEL_157;
      goto LABEL_300;
    }
  }
  else if ((v27 & 0x100000000000000) == 0)
  {
    goto LABEL_156;
  }
  *(_WORD *)(a2 + 240) = *(_QWORD *)(a1 + 960);
  if ((v28 & 0x200000000000000) == 0)
  {
LABEL_157:
    if ((v28 & 0x400000000000000) == 0)
      goto LABEL_158;
    goto LABEL_301;
  }
LABEL_300:
  *(_WORD *)(a2 + 240) = *(_WORD *)(a1 + 968) & 0x1FF;
  if ((v28 & 0x400000000000000) == 0)
  {
LABEL_158:
    if ((v28 & 0x800000000000000) == 0)
      goto LABEL_160;
    goto LABEL_159;
  }
LABEL_301:
  *(_WORD *)(a2 + 240) = *(_WORD *)(a1 + 976) & 0x1FF;
  if ((v28 & 0x800000000000000) != 0)
LABEL_159:
    *(_DWORD *)(a2 + 240) = *(_DWORD *)(a1 + 984) & 0x1FFFF;
LABEL_160:
  v139 = v20;
  if ((v28 & 0x1000000000000000) != 0)
    *(_WORD *)(a2 + 240) = *(_WORD *)(a1 + 992) & 0x1FFF;
  v29 = v28;
  if ((v28 & 0x2000000000000000) == 0)
  {
    if ((v28 & 0x4000000000000000) == 0)
      goto LABEL_164;
LABEL_304:
    *(_DWORD *)(a2 + 240) = *(_QWORD *)(a1 + 1008);
    if ((v29 & 0x8000000000000000) == 0)
      goto LABEL_165;
    goto LABEL_305;
  }
  *(_BYTE *)(a2 + 240) = *(_BYTE *)(a1 + 1000) & 0x7F;
  v29 = *(_QWORD *)(a1 + 1256);
  if ((v29 & 0x4000000000000000) != 0)
    goto LABEL_304;
LABEL_164:
  if ((v29 & 0x8000000000000000) == 0)
    goto LABEL_165;
LABEL_305:
  *(_BYTE *)(a2 + 244) = *(_BYTE *)(a1 + 1016) & 0xF;
LABEL_165:
  v30 = *(_QWORD *)(a1 + 1264);
  if ((v30 & 1) != 0)
  {
    *(_DWORD *)(a2 + 248) = *(_QWORD *)(a1 + 1024);
    if ((v30 & 2) == 0)
    {
LABEL_167:
      if ((v30 & 4) == 0)
        goto LABEL_168;
      goto LABEL_308;
    }
  }
  else if ((v30 & 2) == 0)
  {
    goto LABEL_167;
  }
  *(_DWORD *)(a2 + 252) = *(_QWORD *)(a1 + 1032);
  if ((v30 & 4) == 0)
  {
LABEL_168:
    if ((v30 & 8) == 0)
      goto LABEL_169;
    goto LABEL_309;
  }
LABEL_308:
  *(_BYTE *)(a2 + 256) = *(_QWORD *)(a1 + 1040) != 0;
  if ((v30 & 8) == 0)
  {
LABEL_169:
    if ((v30 & 0x10) == 0)
      goto LABEL_170;
    goto LABEL_310;
  }
LABEL_309:
  *(_DWORD *)(a2 + 260) = *(_QWORD *)(a1 + 1048);
  if ((v30 & 0x10) == 0)
  {
LABEL_170:
    if ((v30 & 0x20) == 0)
      goto LABEL_171;
    goto LABEL_311;
  }
LABEL_310:
  *(_BYTE *)(a2 + 264) = *(_QWORD *)(a1 + 1056) != 0;
  if ((v30 & 0x20) == 0)
  {
LABEL_171:
    if ((v30 & 0x40) == 0)
      goto LABEL_172;
    goto LABEL_312;
  }
LABEL_311:
  *(_BYTE *)(a2 + 265) = *(_QWORD *)(a1 + 1064) != 0;
  if ((v30 & 0x40) == 0)
  {
LABEL_172:
    if ((v30 & 0x80) == 0)
      goto LABEL_173;
    goto LABEL_313;
  }
LABEL_312:
  *(_DWORD *)(a2 + 268) = *(_QWORD *)(a1 + 1072);
  if ((v30 & 0x80) == 0)
  {
LABEL_173:
    if ((v30 & 0x100) == 0)
      goto LABEL_174;
    goto LABEL_314;
  }
LABEL_313:
  *(_DWORD *)(a2 + 272) = *(_QWORD *)(a1 + 1080);
  if ((v30 & 0x100) == 0)
  {
LABEL_174:
    if ((v30 & 0x200) == 0)
      goto LABEL_175;
    goto LABEL_315;
  }
LABEL_314:
  *(_DWORD *)(a2 + 276) = *(_QWORD *)(a1 + 1088);
  if ((v30 & 0x200) == 0)
  {
LABEL_175:
    if ((v30 & 0x400) == 0)
      goto LABEL_176;
    goto LABEL_316;
  }
LABEL_315:
  *(_DWORD *)(a2 + 280) = *(_QWORD *)(a1 + 1096);
  if ((v30 & 0x400) == 0)
  {
LABEL_176:
    if ((v30 & 0x800) == 0)
      goto LABEL_177;
    goto LABEL_317;
  }
LABEL_316:
  *(_DWORD *)(a2 + 284) = *(_QWORD *)(a1 + 1104);
  if ((v30 & 0x800) == 0)
  {
LABEL_177:
    if ((v30 & 0x1000) == 0)
      goto LABEL_178;
    goto LABEL_318;
  }
LABEL_317:
  *(_DWORD *)(a2 + 288) = *(_QWORD *)(a1 + 1112);
  if ((v30 & 0x1000) == 0)
  {
LABEL_178:
    if ((v30 & 0x2000) == 0)
      goto LABEL_179;
    goto LABEL_319;
  }
LABEL_318:
  *(_DWORD *)(a2 + 292) = *(_QWORD *)(a1 + 1120);
  if ((v30 & 0x2000) == 0)
  {
LABEL_179:
    if ((v30 & 0x4000) == 0)
      goto LABEL_180;
    goto LABEL_320;
  }
LABEL_319:
  *(_DWORD *)(a2 + 296) = *(_QWORD *)(a1 + 1128);
  if ((v30 & 0x4000) == 0)
  {
LABEL_180:
    if ((v30 & 0x8000) == 0)
      goto LABEL_181;
    goto LABEL_321;
  }
LABEL_320:
  *(_DWORD *)(a2 + 300) = *(_QWORD *)(a1 + 1136);
  if ((v30 & 0x8000) == 0)
  {
LABEL_181:
    if ((v30 & 0x10000) == 0)
      goto LABEL_182;
    goto LABEL_322;
  }
LABEL_321:
  *(_DWORD *)(a2 + 304) = *(_QWORD *)(a1 + 1144);
  if ((v30 & 0x10000) == 0)
  {
LABEL_182:
    if ((v30 & 0x20000) == 0)
      goto LABEL_183;
    goto LABEL_323;
  }
LABEL_322:
  *(_DWORD *)(a2 + 308) = *(_QWORD *)(a1 + 1152);
  if ((v30 & 0x20000) == 0)
  {
LABEL_183:
    if ((v30 & 0x40000) == 0)
      goto LABEL_184;
    goto LABEL_324;
  }
LABEL_323:
  *(_DWORD *)(a2 + 312) = *(_QWORD *)(a1 + 1160);
  if ((v30 & 0x40000) == 0)
  {
LABEL_184:
    if ((v30 & 0x80000) == 0)
      goto LABEL_185;
    goto LABEL_325;
  }
LABEL_324:
  *(_DWORD *)(a2 + 316) = *(_QWORD *)(a1 + 1168);
  if ((v30 & 0x80000) == 0)
  {
LABEL_185:
    if ((v30 & 0x100000) == 0)
      goto LABEL_186;
    goto LABEL_326;
  }
LABEL_325:
  *(_DWORD *)(a2 + 320) = *(_QWORD *)(a1 + 1176);
  if ((v30 & 0x100000) == 0)
  {
LABEL_186:
    if ((v30 & 0x200000) == 0)
      goto LABEL_187;
    goto LABEL_327;
  }
LABEL_326:
  *(_DWORD *)(a2 + 324) = *(_QWORD *)(a1 + 1184);
  if ((v30 & 0x200000) == 0)
  {
LABEL_187:
    if ((v30 & 0x400000) == 0)
      goto LABEL_188;
    goto LABEL_328;
  }
LABEL_327:
  *(_DWORD *)(a2 + 328) = *(_QWORD *)(a1 + 1192);
  if ((v30 & 0x400000) == 0)
  {
LABEL_188:
    if ((v30 & 0x800000) == 0)
      goto LABEL_189;
    goto LABEL_329;
  }
LABEL_328:
  *(_DWORD *)(a2 + 332) = *(_QWORD *)(a1 + 1200);
  if ((v30 & 0x800000) == 0)
  {
LABEL_189:
    if ((v30 & 0x1000000) == 0)
      goto LABEL_190;
    goto LABEL_330;
  }
LABEL_329:
  *(_DWORD *)(a2 + 336) = *(_QWORD *)(a1 + 1208);
  if ((v30 & 0x1000000) == 0)
  {
LABEL_190:
    if ((v30 & 0x2000000) == 0)
      goto LABEL_192;
    goto LABEL_191;
  }
LABEL_330:
  *(_BYTE *)(a2 + 340) = *(_QWORD *)(a1 + 1216) != 0;
  if ((v30 & 0x2000000) != 0)
LABEL_191:
    *(_DWORD *)(a2 + 344) = *(_QWORD *)(a1 + 1224);
LABEL_192:
  v51 = v2 & 1;
  if ((v30 & 0x4000000) != 0)
    *(_DWORD *)(a2 + 348) = *(_QWORD *)(a1 + 1232);
  v52 = v5 & 0x200;
  v53 = v5 & 0x400;
  v54 = v5 & 0x800;
  v55 = v5 & 0x1000;
  v56 = v5 & 0x2000;
  v57 = v5 & 0x4000;
  v69 = v11 & 0x2000000000;
  v70 = v11 & 0x4000000000;
  v71 = v11 & 0x8000000000;
  v72 = v11 & 0x10000000000;
  v35 = v11 & 0x20000000000;
  v36 = v11 & 0x40000000000;
  v81 = v14 & 0x8000000000000;
  v82 = v14 & 0x10000000000000;
  v83 = v14 & 0x20000000000000;
  v84 = v14 & 0x40000000000000;
  v85 = v14 & 0x80000000000000;
  v37 = v14 & 0x100000000000000;
  v102 = v21 & 0x200000;
  v101 = v21 & 0x400000;
  v99 = v21 & 0x1000000;
  v100 = v21 & 0x800000;
  v97 = v21 & 0x4000000;
  v98 = v21 & 0x2000000;
  v96 = v23 & 0x200000000;
  v122 = v23 & 0x400000000;
  v121 = v26 & 0x1000000000000;
  v120 = v26 & 0x2000000000000;
  v124 = v27 & 0x4000000000000;
  v119 = v27 & 0x8000000000000;
  v118 = v27 & 0x10000000000000;
  v117 = v27 & 0x20000000000000;
  v116 = v27 & 0x40000000000000;
  v115 = v27 & 0x80000000000000;
  v114 = v28 & 0x100000000000000;
  v113 = v28 & 0x200000000000000;
  v112 = v28 & 0x400000000000000;
  v111 = v28 & 0x800000000000000;
  v110 = v28 & 0x1000000000000000;
  v109 = v28 & 0x2000000000000000;
  if ((v30 & 0x8000000) != 0)
    *(_WORD *)(a2 + 352) = *(_QWORD *)(a1 + 1240);
  v33 = v3 & 8;
  v32 = v3 & 4;
  v34 = v3 & 0x10;
  HIDWORD(v17) = BYTE4(v9) & 1;
  v31 = v3 & 2;
  v38 = v9 & 0x40000000;
  v47 = v3 & 0x20;
  v48 = v3 & 0x40;
  v63 = v8 & 0x800000;
  v64 = v8 & 0x1000000;
  v65 = v8 & 0x2000000;
  v66 = v8 & 0x4000000;
  v49 = v146 & 0x80;
  v50 = v146 & 0x100;
  v61 = v145 & 0x200000;
  v62 = v145 & 0x400000;
  v67 = v143 & 0x800000000;
  v68 = v143 & 0x1000000000;
  v58 = (unsigned __int16)v6 & 0x8000;
  v59 = v6 & 0x10000;
  v60 = v6 & 0x20000;
  v43 = (v31 >> 1)
      + v51
      + (v32 >> 2)
      + (v33 >> 3)
      + (v34 >> 4)
      + (v47 >> 5)
      + (v48 >> 6)
      + (v49 >> 7)
      + (v50 >> 8)
      + (v52 >> 9)
      + (v53 >> 10)
      + (v54 >> 11)
      + (v55 >> 12)
      + (v56 >> 13)
      + (v57 >> 14)
      + (v58 >> 15)
      + (v59 >> 16)
      + (v60 >> 17)
      + ((v6 & 0x40000) >> 18)
      + ((v6 & 0x80000) >> 19)
      + ((v6 & 0x100000) >> 20)
      + (v61 >> 21)
      + (v62 >> 22)
      + (v63 >> 23)
      + (v64 >> 24)
      + (v65 >> 25)
      + (v66 >> 26)
      + ((v8 & 0x8000000) >> 27)
      + ((v8 & 0x10000000) >> 28)
      + ((v9 & 0x20000000) >> 29)
      + (v38 >> 30)
      + (v9 >> 31)
      + HIDWORD(v17)
      + ((v9 & 0x200000000) >> 33)
      + ((v9 & 0x400000000) >> 34)
      + (v67 >> 35)
      + (v68 >> 36)
      + (v69 >> 37)
      + (v70 >> 38)
      + (v71 >> 39)
      + (v72 >> 40)
      + (v35 >> 41)
      + (v36 >> 42);
  v39 = v144 & 0x800000000000000;
  v40 = v144 & 0x1000000000000000;
  v42 = v144 & 0x4000000000000000;
  v41 = v144 & 0x2000000000000000;
  v73 = v12 & 0x80000000000;
  v74 = v12 & 0x100000000000;
  v75 = v12 & 0x200000000000;
  v76 = v12 & 0x400000000000;
  v77 = v12 & 0x800000000000;
  v78 = v12 & 0x1000000000000;
  v103 = v19 & 0x20000;
  v104 = v19 & 0x10000;
  v105 = (unsigned __int16)v19 & 0x8000;
  v106 = v19 & 0x4000;
  v79 = v141 & 0x2000000000000;
  v80 = v141 & 0x4000000000000;
  v86 = v15 & 0x200000000000000;
  v87 = v15 & 0x400000000000000;
  v137 = v17 & 1;
  v44 = v43
      + (v73 >> 43)
      + (v74 >> 44)
      + (v75 >> 45)
      + (v76 >> 46)
      + (v77 >> 47)
      + HIWORD(v78)
      + (v79 >> 49)
      + (v80 >> 50)
      + (v81 >> 51)
      + (v82 >> 52)
      + (v83 >> 53)
      + (v84 >> 54)
      + (v85 >> 55)
      + HIBYTE(v37)
      + (v86 >> 57)
      + (v87 >> 58)
      + (v144 >> 63)
      + (v39 >> 59)
      + (v40 >> 60)
      + (v41 >> 61)
      + (v42 >> 62)
      + v137
      + ((v17 & 2) >> 1)
      + ((v17 & 4) >> 2)
      + ((v17 & 8) >> 3)
      + ((v17 & 0x10) >> 4)
      + ((v17 & 0x20) >> 5)
      + ((v17 & 0x40) >> 6)
      + ((unint64_t)(v17 & 0x80) >> 7)
      + ((v18 & 0x100) >> 8)
      + ((v18 & 0x200) >> 9)
      + ((v18 & 0x400) >> 10)
      + ((v18 & 0x800) >> 11)
      + ((v18 & 0x1000) >> 12)
      + ((v19 & 0x2000) >> 13)
      + (v106 >> 14)
      + (v105 >> 15)
      + (v104 >> 16)
      + (v103 >> 17);
  v45 = v44
      + ((v19 & 0x40000) >> 18)
      + ((v139 & 0x80000u) >> 19)
      + ((v139 & 0x100000u) >> 20)
      + (v102 >> 21)
      + (v101 >> 22)
      + (v100 >> 23)
      + (v99 >> 24)
      + (v98 >> 25)
      + (v97 >> 26)
      + ((v22 & 0x8000000) >> 27)
      + ((v22 & 0x10000000) >> 28)
      + ((v22 & 0x20000000) >> 29)
      + ((v22 & 0x40000000) >> 30)
      + (v22 >> 31)
      + (BYTE4(v22) & 1)
      + (v96 >> 33)
      + (v122 >> 34)
      + ((v24 & 0x800000000) >> 35)
      + ((v24 & 0x1000000000) >> 36)
      + ((v24 & 0x2000000000) >> 37)
      + ((v24 & 0x4000000000) >> 38)
      + ((v24 & 0x8000000000) >> 39)
      + ((v24 & 0x10000000000) >> 40)
      + ((v24 & 0x20000000000) >> 41)
      + ((v25 & 0x40000000000) >> 42)
      + ((v25 & 0x80000000000) >> 43)
      + ((v25 & 0x100000000000) >> 44)
      + ((v25 & 0x200000000000) >> 45)
      + ((v25 & 0x400000000000) >> 46)
      + ((v25 & 0x800000000000) >> 47)
      + HIWORD(v121)
      + (v120 >> 49);
  v88 = v29 & 0x4000000000000000;
  v89 = v30 & 2;
  v90 = v30 & 4;
  v91 = v30 & 8;
  v92 = v30 & 0x10;
  v93 = v30 & 0x40;
  v94 = v30 & 0x20;
  v95 = v30 & 0x80;
  v107 = v30 & 0x100;
  v108 = v30 & 0x200;
  v123 = v30 & 0x400;
  v125 = v30 & 0x4000000;
  v126 = v30 & 0x8000000;
  v127 = v30 & 0x1000000;
  v128 = v30 & 0x800000;
  v129 = v30 & 0x400000;
  v130 = v30 & 0x200000;
  v131 = v30 & 0x100000;
  v132 = v30 & 0x80000;
  v133 = v30 & 0x40000;
  v134 = v30 & 0x20000;
  v135 = v30 & 0x10000;
  v136 = (unsigned __int16)v30 & 0x8000;
  v140 = v30 & 0x4000;
  v142 = v30 & 0x2000;
  v138 = v30 & 1;
  return v45
       + (v124 >> 50)
       + (v119 >> 51)
       + (v118 >> 52)
       + (v117 >> 53)
       + (v116 >> 54)
       + (v115 >> 55)
       + HIBYTE(v114)
       + (v113 >> 57)
       + (v112 >> 58)
       + (v111 >> 59)
       + (v110 >> 60)
       + (v109 >> 61)
       + (v29 >> 63)
       + (v88 >> 62)
       + v138
       + (v89 >> 1)
       + (v90 >> 2)
       + (v91 >> 3)
       + (v92 >> 4)
       + (v94 >> 5)
       + (v93 >> 6)
       + (v95 >> 7)
       + (v107 >> 8)
       + (v108 >> 9)
       + (v123 >> 10)
       + ((unint64_t)(v30 & 0x800) >> 11)
       + ((unint64_t)(v30 & 0x1000) >> 12)
       + (v142 >> 13)
       + (v140 >> 14)
       + (v136 >> 15)
       + (v135 >> 16)
       + (v134 >> 17)
       + (v133 >> 18)
       + (v132 >> 19)
       + (v131 >> 20)
       + (v130 >> 21)
       + (v129 >> 22)
       + (v128 >> 23)
       + (v127 >> 24)
       + ((v30 & 0x2000000) >> 25)
       + (v125 >> 26)
       + (v126 >> 27);
}

unint64_t sub_1C4D4A158(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[156];
  LODWORD(v3) = v2;
  if ((v2 & 1) != 0)
  {
    *(_DWORD *)a2 = *a1;
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0)
        goto LABEL_4;
      goto LABEL_33;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_DWORD *)(a2 + 4) = a1[1];
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0)
      goto LABEL_5;
    goto LABEL_34;
  }
LABEL_33:
  *(_BYTE *)(a2 + 8) = a1[2] != 0;
  if ((v2 & 8) == 0)
  {
LABEL_5:
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_35;
  }
LABEL_34:
  *(_BYTE *)(a2 + 9) = a1[3] != 0;
  if ((v2 & 0x10) == 0)
  {
LABEL_6:
    if ((v2 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_36;
  }
LABEL_35:
  *(_BYTE *)(a2 + 10) = a1[4] != 0;
  if ((v2 & 0x20) == 0)
  {
LABEL_7:
    if ((v2 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_37;
  }
LABEL_36:
  *(_BYTE *)(a2 + 11) = a1[5] != 0;
  if ((v2 & 0x40) == 0)
  {
LABEL_8:
    if ((v2 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_38;
  }
LABEL_37:
  *(_BYTE *)(a2 + 12) = a1[6] != 0;
  if ((v2 & 0x80) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_39;
  }
LABEL_38:
  *(_BYTE *)(a2 + 13) = a1[7] != 0;
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_40;
  }
LABEL_39:
  *(_BYTE *)(a2 + 14) = a1[8] != 0;
  if ((v2 & 0x200) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_41;
  }
LABEL_40:
  *(_BYTE *)(a2 + 15) = a1[9] != 0;
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_42;
  }
LABEL_41:
  *(_DWORD *)(a2 + 16) = a1[10];
  if ((v2 & 0x800) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_43;
  }
LABEL_42:
  *(_DWORD *)(a2 + 20) = a1[11];
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_44;
  }
LABEL_43:
  *(_DWORD *)(a2 + 24) = a1[12];
  if ((v2 & 0x2000) == 0)
  {
LABEL_15:
    if ((v2 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_45;
  }
LABEL_44:
  *(_DWORD *)(a2 + 28) = a1[13];
  if ((v2 & 0x4000) == 0)
  {
LABEL_16:
    if ((v2 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_46;
  }
LABEL_45:
  *(_DWORD *)(a2 + 32) = a1[14];
  if ((v2 & 0x8000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_47;
  }
LABEL_46:
  *(_DWORD *)(a2 + 36) = a1[15];
  if ((v2 & 0x10000) == 0)
  {
LABEL_18:
    if ((v2 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_48;
  }
LABEL_47:
  *(_DWORD *)(a2 + 40) = a1[16];
  if ((v2 & 0x20000) == 0)
  {
LABEL_19:
    if ((v2 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_49;
  }
LABEL_48:
  *(_DWORD *)(a2 + 44) = a1[17];
  if ((v2 & 0x40000) == 0)
  {
LABEL_20:
    if ((v2 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_50;
  }
LABEL_49:
  *(_WORD *)(a2 + 48) = a1[18];
  if ((v2 & 0x80000) == 0)
  {
LABEL_21:
    if ((v2 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_51;
  }
LABEL_50:
  *(_DWORD *)(a2 + 52) = a1[19];
  if ((v2 & 0x100000) == 0)
  {
LABEL_22:
    if ((v2 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_52;
  }
LABEL_51:
  *(_DWORD *)(a2 + 56) = a1[20];
  if ((v2 & 0x200000) == 0)
  {
LABEL_23:
    if ((v2 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_53;
  }
LABEL_52:
  *(_DWORD *)(a2 + 60) = a1[21];
  if ((v2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v2 & 0x800000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_53:
  *(_BYTE *)(a2 + 64) = a1[22];
  v3 = a1[156];
  if ((v3 & 0x800000) != 0)
LABEL_25:
    *(_BYTE *)(a2 + 68) = a1[23] != 0;
LABEL_26:
  if ((v3 & 0x1000000) != 0)
    *(_BYTE *)(a2 + 69) = a1[24] != 0;
  if ((v3 & 0x2000000) != 0)
    *(_BYTE *)(a2 + 70) = a1[25] != 0;
  return ((unint64_t)(v2 & 2) >> 1)
       + (v2 & 1)
       + ((unint64_t)(v2 & 4) >> 2)
       + ((unint64_t)(v2 & 8) >> 3)
       + ((unint64_t)(v2 & 0x10) >> 4)
       + ((unint64_t)(v2 & 0x20) >> 5)
       + ((unint64_t)(v2 & 0x40) >> 6)
       + ((unint64_t)(v2 & 0x80) >> 7)
       + ((unint64_t)(v2 & 0x100) >> 8)
       + ((unint64_t)(v2 & 0x200) >> 9)
       + ((unint64_t)(v2 & 0x400) >> 10)
       + ((unint64_t)(v2 & 0x800) >> 11)
       + ((unint64_t)(v2 & 0x1000) >> 12)
       + ((unint64_t)(v2 & 0x2000) >> 13)
       + ((unint64_t)(v2 & 0x4000) >> 14)
       + ((unint64_t)((unsigned __int16)v2 & 0x8000) >> 15)
       + ((v2 & 0x10000uLL) >> 16)
       + ((v2 & 0x20000uLL) >> 17)
       + ((v2 & 0x40000uLL) >> 18)
       + ((v2 & 0x80000uLL) >> 19)
       + ((v2 & 0x100000uLL) >> 20)
       + ((v2 & 0x200000uLL) >> 21)
       + ((v2 & 0x400000uLL) >> 22)
       + ((v3 & 0x800000uLL) >> 23)
       + ((v3 & 0x1000000) >> 24)
       + ((v3 & 0x2000000) >> 25);
}

unint64_t sub_1C4D4A4B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 1248);
  LODWORD(v3) = v2;
  if ((v2 & 1) != 0)
  {
    *(_DWORD *)a2 = *(_QWORD *)a1;
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0)
        goto LABEL_4;
      goto LABEL_33;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_DWORD *)(a2 + 4) = *(_QWORD *)(a1 + 8);
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0)
      goto LABEL_5;
    goto LABEL_34;
  }
LABEL_33:
  *(_BYTE *)(a2 + 8) = *(_QWORD *)(a1 + 16) != 0;
  if ((v2 & 8) == 0)
  {
LABEL_5:
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_35;
  }
LABEL_34:
  *(_BYTE *)(a2 + 9) = *(_QWORD *)(a1 + 24) != 0;
  if ((v2 & 0x10) == 0)
  {
LABEL_6:
    if ((v2 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_36;
  }
LABEL_35:
  *(_BYTE *)(a2 + 10) = *(_QWORD *)(a1 + 32) != 0;
  if ((v2 & 0x20) == 0)
  {
LABEL_7:
    if ((v2 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_37;
  }
LABEL_36:
  *(_BYTE *)(a2 + 11) = *(_QWORD *)(a1 + 40) != 0;
  if ((v2 & 0x40) == 0)
  {
LABEL_8:
    if ((v2 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_38;
  }
LABEL_37:
  *(_BYTE *)(a2 + 12) = *(_QWORD *)(a1 + 48) != 0;
  if ((v2 & 0x80) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_39;
  }
LABEL_38:
  *(_BYTE *)(a2 + 13) = *(_QWORD *)(a1 + 56) != 0;
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_40;
  }
LABEL_39:
  *(_BYTE *)(a2 + 14) = *(_QWORD *)(a1 + 64) != 0;
  if ((v2 & 0x200) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_41;
  }
LABEL_40:
  *(_BYTE *)(a2 + 15) = *(_QWORD *)(a1 + 72) != 0;
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_42;
  }
LABEL_41:
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 80) & 0x7F;
  v3 = *(_QWORD *)(a1 + 1248);
  if ((v3 & 0x800) == 0)
  {
LABEL_13:
    if ((v3 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_43;
  }
LABEL_42:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 88);
  if ((v3 & 0x1000) == 0)
  {
LABEL_14:
    if ((v3 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_44;
  }
LABEL_43:
  *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 96);
  if ((v3 & 0x2000) == 0)
  {
LABEL_15:
    if ((v3 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_45;
  }
LABEL_44:
  *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 104);
  if ((v3 & 0x4000) == 0)
  {
LABEL_16:
    if ((v3 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_46;
  }
LABEL_45:
  *(_DWORD *)(a2 + 32) = *(_QWORD *)(a1 + 112);
  if ((v3 & 0x8000) == 0)
  {
LABEL_17:
    if ((v3 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_47;
  }
LABEL_46:
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 120);
  if ((v3 & 0x10000) == 0)
  {
LABEL_18:
    if ((v3 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_48;
  }
LABEL_47:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 128);
  if ((v3 & 0x20000) == 0)
  {
LABEL_19:
    if ((v3 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_49;
  }
LABEL_48:
  *(_DWORD *)(a2 + 44) = *(_QWORD *)(a1 + 136);
  if ((v3 & 0x40000) == 0)
  {
LABEL_20:
    if ((v3 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_50;
  }
LABEL_49:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 144);
  if ((v3 & 0x80000) == 0)
  {
LABEL_21:
    if ((v3 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_51;
  }
LABEL_50:
  *(_DWORD *)(a2 + 52) = *(_QWORD *)(a1 + 152);
  if ((v3 & 0x100000) == 0)
  {
LABEL_22:
    if ((v3 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_52;
  }
LABEL_51:
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 160);
  if ((v3 & 0x200000) == 0)
  {
LABEL_23:
    if ((v3 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_53;
  }
LABEL_52:
  *(_WORD *)(a2 + 58) = *(_QWORD *)(a1 + 168);
  if ((v3 & 0x400000) == 0)
  {
LABEL_24:
    if ((v3 & 0x800000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_53:
  *(_WORD *)(a2 + 60) = *(_WORD *)(a1 + 176) & 0xFFF;
  if ((v3 & 0x800000) != 0)
LABEL_25:
    *(_BYTE *)(a2 + 62) = *(_QWORD *)(a1 + 184) != 0;
LABEL_26:
  LODWORD(v4) = v3;
  if ((v3 & 0x1000000) != 0)
  {
    *(_BYTE *)(a2 + 63) = *(_QWORD *)(a1 + 192);
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x2000000) != 0)
    *(_BYTE *)(a2 + 64) = *(_QWORD *)(a1 + 200);
  return ((unint64_t)(v2 & 2) >> 1)
       + (v2 & 1)
       + ((unint64_t)(v2 & 4) >> 2)
       + ((unint64_t)(v2 & 8) >> 3)
       + ((unint64_t)(v2 & 0x10) >> 4)
       + ((unint64_t)(v2 & 0x20) >> 5)
       + ((unint64_t)(v2 & 0x40) >> 6)
       + ((unint64_t)(v2 & 0x80) >> 7)
       + ((unint64_t)(v2 & 0x100) >> 8)
       + ((unint64_t)(v2 & 0x200) >> 9)
       + ((unint64_t)(v2 & 0x400) >> 10)
       + ((unint64_t)(v3 & 0x800) >> 11)
       + ((unint64_t)(v3 & 0x1000) >> 12)
       + ((unint64_t)(v3 & 0x2000) >> 13)
       + ((unint64_t)(v3 & 0x4000) >> 14)
       + ((unint64_t)((unsigned __int16)v3 & 0x8000) >> 15)
       + ((v3 & 0x10000uLL) >> 16)
       + ((v3 & 0x20000uLL) >> 17)
       + ((v3 & 0x40000uLL) >> 18)
       + ((v3 & 0x80000uLL) >> 19)
       + ((v3 & 0x100000uLL) >> 20)
       + ((v3 & 0x200000uLL) >> 21)
       + ((v3 & 0x400000uLL) >> 22)
       + ((v3 & 0x800000uLL) >> 23)
       + ((v3 & 0x1000000) >> 24)
       + ((v4 & 0x2000000) >> 25);
}

unint64_t sub_1C4D4A818(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_80;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_81;
  }
LABEL_80:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_82;
  }
LABEL_81:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_82:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_86;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_87;
  }
LABEL_86:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_88;
  }
LABEL_87:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_88:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_92;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_93;
  }
LABEL_92:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_94;
  }
LABEL_93:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_94:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_98;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_99;
  }
LABEL_98:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_100;
  }
LABEL_99:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_101;
  }
LABEL_100:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_38;
    goto LABEL_37;
  }
LABEL_101:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) != 0)
LABEL_37:
    *(_BYTE *)(a2 + 53) = *(_QWORD *)(a1 + 224) != 0;
LABEL_38:
  v9 = v8;
  if ((v8 & 0x20000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 232) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x40000000) == 0)
    {
LABEL_40:
      if ((v9 & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_105;
    }
  }
  else if ((v8 & 0x40000000) == 0)
  {
    goto LABEL_40;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 240);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_106;
  }
LABEL_105:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_43;
    goto LABEL_107;
  }
LABEL_106:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 256) & 0x1FF;
  if ((v9 & 0x200000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x400000000) == 0)
      goto LABEL_45;
    goto LABEL_44;
  }
LABEL_107:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 264) & 0x1FFFF;
  if ((v9 & 0x400000000) != 0)
LABEL_44:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 272) & 0x1FFF;
LABEL_45:
  v10 = v9;
  if ((v9 & 0x800000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 280) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x1000000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 288);
  v11 = v10;
  if ((v10 & 0x2000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 296) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x4000000000) == 0)
    {
LABEL_51:
      if ((v11 & 0x8000000000) == 0)
        goto LABEL_52;
      goto LABEL_111;
    }
  }
  else if ((v10 & 0x4000000000) == 0)
  {
    goto LABEL_51;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_112;
  }
LABEL_111:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 312);
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_113;
  }
LABEL_112:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 320) != 0;
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_114;
  }
LABEL_113:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 328);
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_115;
  }
LABEL_114:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 336) != 0;
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_116;
  }
LABEL_115:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_117;
  }
LABEL_116:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 352);
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_118;
  }
LABEL_117:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_120;
  }
LABEL_119:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_125;
  }
LABEL_124:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 416) != 0;
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_126;
  }
LABEL_125:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 424);
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 432);
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 440);
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_129;
  }
LABEL_128:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_130;
  }
LABEL_129:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_73;
    goto LABEL_72;
  }
LABEL_130:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) != 0)
LABEL_72:
    *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 472);
LABEL_73:
  v12 = v2 & 1;
  if ((v11 & 0x1000000000000000) != 0)
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 480);
  v13 = v3 & 2;
  v14 = v3 & 4;
  v15 = v3 & 8;
  v16 = v3 & 0x10;
  v17 = v3 & 0x20;
  v18 = v3 & 0x40;
  v19 = v4 & 0x80;
  v20 = v4 & 0x100;
  v21 = v5 & 0x200;
  v22 = v5 & 0x400;
  v23 = v5 & 0x800;
  v24 = v5 & 0x1000;
  v25 = v5 & 0x2000;
  v26 = v5 & 0x4000;
  if ((v11 & 0x2000000000000000) != 0)
    *(_BYTE *)(a2 + 132) = *(_QWORD *)(a1 + 488) != 0;
  v29 = v6 & 0x100000;
  v28 = v6 & 0x80000;
  v27 = v6 & 0x40000;
  v32 = v7 & 0x400000;
  v33 = v8 & 0x800000;
  v34 = v8 & 0x1000000;
  v35 = v8 & 0x2000000;
  v36 = v8 & 0x4000000;
  v37 = v8 & 0x8000000;
  v38 = v8 & 0x10000000;
  v40 = v8 & 0x20000000;
  v41 = v9 & 0x200000000;
  v42 = v9 & 0x400000000;
  v43 = v9 & 0x800000000;
  v44 = v10 & 0x1000000000;
  v45 = v11 & 0x4000000000;
  v46 = v10 & 0x2000000000;
  v47 = v11 & 0x8000000000;
  v48 = v11 & 0x10000000000;
  v49 = v11 & 0x20000000000;
  v50 = v11 & 0x40000000000;
  v39 = BYTE4(v9) & 1;
  v30 = (v13 >> 1)
      + v12
      + (v14 >> 2)
      + (v15 >> 3)
      + (v16 >> 4)
      + (v17 >> 5)
      + (v18 >> 6)
      + (v19 >> 7)
      + (v20 >> 8)
      + (v21 >> 9)
      + (v22 >> 10)
      + (v23 >> 11)
      + (v24 >> 12)
      + (v25 >> 13)
      + (v26 >> 14)
      + ((unint64_t)((unsigned __int16)v6 & 0x8000) >> 15)
      + ((v6 & 0x10000uLL) >> 16)
      + ((v6 & 0x20000uLL) >> 17)
      + (v27 >> 18)
      + (v28 >> 19)
      + (v29 >> 20)
      + ((v7 & 0x200000uLL) >> 21)
      + (v32 >> 22)
      + (v33 >> 23)
      + (v34 >> 24)
      + (v35 >> 25)
      + (v36 >> 26)
      + (v37 >> 27)
      + (v38 >> 28)
      + (v40 >> 29)
      + ((v9 & 0x40000000) >> 30)
      + (v9 >> 31)
      + v39
      + (v41 >> 33)
      + (v42 >> 34)
      + (v43 >> 35)
      + (v44 >> 36)
      + (v46 >> 37)
      + (v45 >> 38)
      + (v47 >> 39)
      + (v48 >> 40)
      + (v49 >> 41)
      + (v50 >> 42);
  return v30
       + ((v11 & 0x80000000000uLL) >> 43)
       + ((v11 & 0x100000000000uLL) >> 44)
       + ((v11 & 0x200000000000uLL) >> 45)
       + ((v11 & 0x400000000000uLL) >> 46)
       + ((v11 & 0x800000000000uLL) >> 47)
       + ((v11 & 0x1000000000000uLL) >> 48)
       + ((v11 & 0x2000000000000uLL) >> 49)
       + ((v11 & 0x4000000000000uLL) >> 50)
       + ((v11 & 0x8000000000000uLL) >> 51)
       + ((v11 & 0x10000000000000uLL) >> 52)
       + ((v11 & 0x20000000000000uLL) >> 53)
       + ((v11 & 0x40000000000000uLL) >> 54)
       + ((v11 & 0x80000000000000uLL) >> 55)
       + ((v11 & 0x100000000000000uLL) >> 56)
       + ((v11 & 0x200000000000000uLL) >> 57)
       + ((v11 & 0x400000000000000uLL) >> 58)
       + ((v11 & 0x800000000000000uLL) >> 59)
       + ((v11 & 0x1000000000000000uLL) >> 60)
       + ((v11 & 0x2000000000000000uLL) >> 61);
}

unint64_t sub_1C4D4B124(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_80;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_81;
  }
LABEL_80:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_82;
  }
LABEL_81:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_82:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_86;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_87;
  }
LABEL_86:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_88;
  }
LABEL_87:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_88:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_92;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_93;
  }
LABEL_92:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_94;
  }
LABEL_93:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_94:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_98;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_99;
  }
LABEL_98:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_100;
  }
LABEL_99:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_101;
  }
LABEL_100:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_38;
    goto LABEL_37;
  }
LABEL_101:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) != 0)
LABEL_37:
    *(_BYTE *)(a2 + 53) = *(_QWORD *)(a1 + 224) != 0;
LABEL_38:
  v9 = v8;
  if ((v8 & 0x20000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 232) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x40000000) == 0)
    {
LABEL_40:
      if ((v9 & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_105;
    }
  }
  else if ((v8 & 0x40000000) == 0)
  {
    goto LABEL_40;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 240);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_106;
  }
LABEL_105:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_43;
    goto LABEL_107;
  }
LABEL_106:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 256) & 0x1FF;
  if ((v9 & 0x200000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x400000000) == 0)
      goto LABEL_45;
    goto LABEL_44;
  }
LABEL_107:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 264) & 0x1FFFF;
  if ((v9 & 0x400000000) != 0)
LABEL_44:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 272) & 0x1FFF;
LABEL_45:
  v10 = v9;
  if ((v9 & 0x800000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 280) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x1000000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 288);
  v11 = v10;
  if ((v10 & 0x2000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 296) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x4000000000) == 0)
    {
LABEL_51:
      if ((v11 & 0x8000000000) == 0)
        goto LABEL_52;
      goto LABEL_111;
    }
  }
  else if ((v10 & 0x4000000000) == 0)
  {
    goto LABEL_51;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_112;
  }
LABEL_111:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 312);
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_113;
  }
LABEL_112:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 320) != 0;
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_114;
  }
LABEL_113:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 328);
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_115;
  }
LABEL_114:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 336) != 0;
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_116;
  }
LABEL_115:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_117;
  }
LABEL_116:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 352);
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_118;
  }
LABEL_117:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_120;
  }
LABEL_119:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_66;
    goto LABEL_125;
  }
LABEL_124:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 416) != 0;
  if ((v11 & 0x20000000000000) == 0)
  {
LABEL_66:
    if ((v11 & 0x40000000000000) == 0)
      goto LABEL_67;
    goto LABEL_126;
  }
LABEL_125:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 424);
  if ((v11 & 0x40000000000000) == 0)
  {
LABEL_67:
    if ((v11 & 0x80000000000000) == 0)
      goto LABEL_68;
    goto LABEL_127;
  }
LABEL_126:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 432);
  if ((v11 & 0x80000000000000) == 0)
  {
LABEL_68:
    if ((v11 & 0x100000000000000) == 0)
      goto LABEL_69;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 440);
  if ((v11 & 0x100000000000000) == 0)
  {
LABEL_69:
    if ((v11 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_129;
  }
LABEL_128:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 448);
  if ((v11 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v11 & 0x400000000000000) == 0)
      goto LABEL_71;
    goto LABEL_130;
  }
LABEL_129:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 456);
  if ((v11 & 0x400000000000000) == 0)
  {
LABEL_71:
    if ((v11 & 0x800000000000000) == 0)
      goto LABEL_73;
    goto LABEL_72;
  }
LABEL_130:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 464);
  if ((v11 & 0x800000000000000) != 0)
LABEL_72:
    *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 472);
LABEL_73:
  v12 = v2 & 1;
  if ((v11 & 0x1000000000000000) != 0)
    *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 480);
  v13 = v3 & 2;
  v14 = v3 & 4;
  v15 = v3 & 8;
  v16 = v3 & 0x10;
  v17 = v3 & 0x20;
  v18 = v3 & 0x40;
  v19 = v4 & 0x80;
  v20 = v4 & 0x100;
  v21 = v5 & 0x200;
  v22 = v5 & 0x400;
  v23 = v5 & 0x800;
  v24 = v5 & 0x1000;
  v25 = v5 & 0x2000;
  v26 = v5 & 0x4000;
  if ((v11 & 0x2000000000000000) != 0)
    *(_BYTE *)(a2 + 132) = *(_QWORD *)(a1 + 488) != 0;
  v29 = v6 & 0x100000;
  v28 = v6 & 0x80000;
  v27 = v6 & 0x40000;
  v32 = v7 & 0x400000;
  v33 = v8 & 0x800000;
  v34 = v8 & 0x1000000;
  v35 = v8 & 0x2000000;
  v36 = v8 & 0x4000000;
  v37 = v8 & 0x8000000;
  v38 = v8 & 0x10000000;
  v40 = v8 & 0x20000000;
  v41 = v9 & 0x200000000;
  v42 = v9 & 0x400000000;
  v43 = v9 & 0x800000000;
  v44 = v10 & 0x1000000000;
  v45 = v11 & 0x4000000000;
  v46 = v10 & 0x2000000000;
  v47 = v11 & 0x8000000000;
  v48 = v11 & 0x10000000000;
  v49 = v11 & 0x20000000000;
  v50 = v11 & 0x40000000000;
  v39 = BYTE4(v9) & 1;
  v30 = (v13 >> 1)
      + v12
      + (v14 >> 2)
      + (v15 >> 3)
      + (v16 >> 4)
      + (v17 >> 5)
      + (v18 >> 6)
      + (v19 >> 7)
      + (v20 >> 8)
      + (v21 >> 9)
      + (v22 >> 10)
      + (v23 >> 11)
      + (v24 >> 12)
      + (v25 >> 13)
      + (v26 >> 14)
      + ((unint64_t)((unsigned __int16)v6 & 0x8000) >> 15)
      + ((v6 & 0x10000uLL) >> 16)
      + ((v6 & 0x20000uLL) >> 17)
      + (v27 >> 18)
      + (v28 >> 19)
      + (v29 >> 20)
      + ((v7 & 0x200000uLL) >> 21)
      + (v32 >> 22)
      + (v33 >> 23)
      + (v34 >> 24)
      + (v35 >> 25)
      + (v36 >> 26)
      + (v37 >> 27)
      + (v38 >> 28)
      + (v40 >> 29)
      + ((v9 & 0x40000000) >> 30)
      + (v9 >> 31)
      + v39
      + (v41 >> 33)
      + (v42 >> 34)
      + (v43 >> 35)
      + (v44 >> 36)
      + (v46 >> 37)
      + (v45 >> 38)
      + (v47 >> 39)
      + (v48 >> 40)
      + (v49 >> 41)
      + (v50 >> 42);
  return v30
       + ((v11 & 0x80000000000uLL) >> 43)
       + ((v11 & 0x100000000000uLL) >> 44)
       + ((v11 & 0x200000000000uLL) >> 45)
       + ((v11 & 0x400000000000uLL) >> 46)
       + ((v11 & 0x800000000000uLL) >> 47)
       + ((v11 & 0x1000000000000uLL) >> 48)
       + ((v11 & 0x2000000000000uLL) >> 49)
       + ((v11 & 0x4000000000000uLL) >> 50)
       + ((v11 & 0x8000000000000uLL) >> 51)
       + ((v11 & 0x10000000000000uLL) >> 52)
       + ((v11 & 0x20000000000000uLL) >> 53)
       + ((v11 & 0x40000000000000uLL) >> 54)
       + ((v11 & 0x80000000000000uLL) >> 55)
       + ((v11 & 0x100000000000000uLL) >> 56)
       + ((v11 & 0x200000000000000uLL) >> 57)
       + ((v11 & 0x400000000000000uLL) >> 58)
       + ((v11 & 0x800000000000000uLL) >> 59)
       + ((v11 & 0x1000000000000000uLL) >> 60)
       + ((v11 & 0x2000000000000000uLL) >> 61);
}

unint64_t sub_1C4D4BA30(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  int v61;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_101;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_102;
  }
LABEL_101:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_103;
  }
LABEL_102:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_103:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_107;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_108;
  }
LABEL_107:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_109;
  }
LABEL_108:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_109:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_113;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_114;
  }
LABEL_113:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_115;
  }
LABEL_114:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_115:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_119;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_120;
  }
LABEL_119:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_121:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) != 0)
LABEL_36:
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
LABEL_37:
  v61 = v7;
  if ((v8 & 0x10000000) != 0)
    *(_BYTE *)(a2 + 53) = *(_QWORD *)(a1 + 224) != 0;
  v9 = v8;
  if ((v8 & 0x20000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 232) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x40000000) == 0)
    {
LABEL_41:
      if ((v9 & 0x80000000) == 0)
        goto LABEL_42;
      goto LABEL_125;
    }
  }
  else if ((v8 & 0x40000000) == 0)
  {
    goto LABEL_41;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 240);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_43;
    goto LABEL_126;
  }
LABEL_125:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_44;
    goto LABEL_127;
  }
LABEL_126:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 256) & 0x1FF;
  if ((v9 & 0x200000000) == 0)
  {
LABEL_44:
    if ((v9 & 0x400000000) == 0)
      goto LABEL_46;
    goto LABEL_45;
  }
LABEL_127:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 264) & 0x1FFFF;
  if ((v9 & 0x400000000) != 0)
LABEL_45:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 272) & 0x1FFF;
LABEL_46:
  v10 = v9;
  if ((v9 & 0x800000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 280) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x1000000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 288);
  v11 = v10;
  if ((v10 & 0x2000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 296) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x4000000000) == 0)
    {
LABEL_52:
      if ((v11 & 0x8000000000) == 0)
        goto LABEL_53;
      goto LABEL_131;
    }
  }
  else if ((v10 & 0x4000000000) == 0)
  {
    goto LABEL_52;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_54;
    goto LABEL_132;
  }
LABEL_131:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 312);
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_55;
    goto LABEL_133;
  }
LABEL_132:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 320) != 0;
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_57;
    goto LABEL_56;
  }
LABEL_133:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 328);
  if ((v11 & 0x40000000000) != 0)
LABEL_56:
    *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 336) != 0;
LABEL_57:
  v12 = v11;
  if ((v11 & 0x80000000000) != 0)
  {
    *(_BYTE *)(a2 + 84) = *(_BYTE *)(a1 + 344) & 1;
    v12 = *(_QWORD *)(a1 + 1248);
    if ((v12 & 0x100000000000) == 0)
    {
LABEL_59:
      if ((v12 & 0x200000000000) == 0)
        goto LABEL_60;
      goto LABEL_137;
    }
  }
  else if ((v11 & 0x100000000000) == 0)
  {
    goto LABEL_59;
  }
  *(_WORD *)(a2 + 84) = *(_QWORD *)(a1 + 352);
  if ((v12 & 0x200000000000) == 0)
  {
LABEL_60:
    if ((v12 & 0x400000000000) == 0)
      goto LABEL_61;
    goto LABEL_138;
  }
LABEL_137:
  *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 360) & 0x1FF;
  if ((v12 & 0x400000000000) == 0)
  {
LABEL_61:
    if ((v12 & 0x800000000000) == 0)
      goto LABEL_62;
    goto LABEL_139;
  }
LABEL_138:
  *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 368) & 0x1FF;
  if ((v12 & 0x800000000000) == 0)
  {
LABEL_62:
    if ((v12 & 0x1000000000000) == 0)
      goto LABEL_64;
    goto LABEL_63;
  }
LABEL_139:
  *(_DWORD *)(a2 + 84) = *(_DWORD *)(a1 + 376) & 0x1FFFF;
  if ((v12 & 0x1000000000000) != 0)
LABEL_63:
    *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 384) & 0x1FFF;
LABEL_64:
  v13 = v12;
  if ((v12 & 0x2000000000000) != 0)
  {
    *(_BYTE *)(a2 + 84) = *(_BYTE *)(a1 + 392) & 0x7F;
    v13 = *(_QWORD *)(a1 + 1248);
  }
  if ((v13 & 0x4000000000000) != 0)
    *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 400);
  v14 = v13;
  if ((v13 & 0x8000000000000) != 0)
  {
    *(_BYTE *)(a2 + 88) = *(_BYTE *)(a1 + 408) & 0xF;
    v14 = *(_QWORD *)(a1 + 1248);
    if ((v14 & 0x10000000000000) == 0)
    {
LABEL_70:
      if ((v14 & 0x20000000000000) == 0)
        goto LABEL_71;
      goto LABEL_143;
    }
  }
  else if ((v13 & 0x10000000000000) == 0)
  {
    goto LABEL_70;
  }
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 416);
  if ((v14 & 0x20000000000000) == 0)
  {
LABEL_71:
    if ((v14 & 0x40000000000000) == 0)
      goto LABEL_72;
    goto LABEL_144;
  }
LABEL_143:
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 424);
  if ((v14 & 0x40000000000000) == 0)
  {
LABEL_72:
    if ((v14 & 0x80000000000000) == 0)
      goto LABEL_73;
    goto LABEL_145;
  }
LABEL_144:
  *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 432) != 0;
  if ((v14 & 0x80000000000000) == 0)
  {
LABEL_73:
    if ((v14 & 0x100000000000000) == 0)
      goto LABEL_75;
    goto LABEL_74;
  }
LABEL_145:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 440);
  if ((v14 & 0x100000000000000) != 0)
LABEL_74:
    *(_BYTE *)(a2 + 108) = *(_QWORD *)(a1 + 448) != 0;
LABEL_75:
  v15 = v14;
  if ((v14 & 0x200000000000000) != 0)
  {
    *(_BYTE *)(a2 + 112) = *(_BYTE *)(a1 + 456) & 0x1F;
    v15 = *(_QWORD *)(a1 + 1248);
    if ((v15 & 0x400000000000000) == 0)
    {
LABEL_77:
      if ((v15 & 0x800000000000000) == 0)
        goto LABEL_78;
      goto LABEL_149;
    }
  }
  else if ((v14 & 0x400000000000000) == 0)
  {
    goto LABEL_77;
  }
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 464);
  if ((v15 & 0x800000000000000) == 0)
  {
LABEL_78:
    if ((v15 & 0x1000000000000000) == 0)
      goto LABEL_79;
    goto LABEL_150;
  }
LABEL_149:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 472);
  if ((v15 & 0x1000000000000000) == 0)
  {
LABEL_79:
    if ((v15 & 0x2000000000000000) == 0)
      goto LABEL_80;
    goto LABEL_151;
  }
LABEL_150:
  *(_BYTE *)(a2 + 124) = *(_QWORD *)(a1 + 480) != 0;
  if ((v15 & 0x2000000000000000) == 0)
  {
LABEL_80:
    if ((v15 & 0x4000000000000000) == 0)
      goto LABEL_81;
LABEL_152:
    *(_BYTE *)(a2 + 126) = *(_QWORD *)(a1 + 496) != 0;
    if ((v15 & 0x8000000000000000) == 0)
      goto LABEL_82;
    goto LABEL_153;
  }
LABEL_151:
  *(_BYTE *)(a2 + 125) = *(_QWORD *)(a1 + 488) != 0;
  if ((v15 & 0x4000000000000000) != 0)
    goto LABEL_152;
LABEL_81:
  if ((v15 & 0x8000000000000000) == 0)
    goto LABEL_82;
LABEL_153:
  *(_BYTE *)(a2 + 127) = *(_QWORD *)(a1 + 504) != 0;
LABEL_82:
  v16 = *(_QWORD *)(a1 + 1256);
  if ((v16 & 1) != 0)
  {
    *(_BYTE *)(a2 + 128) = *(_QWORD *)(a1 + 512) != 0;
    if ((v16 & 2) == 0)
    {
LABEL_84:
      if ((v16 & 4) == 0)
        goto LABEL_85;
      goto LABEL_156;
    }
  }
  else if ((v16 & 2) == 0)
  {
    goto LABEL_84;
  }
  *(_BYTE *)(a2 + 129) = *(_QWORD *)(a1 + 520) != 0;
  if ((v16 & 4) == 0)
  {
LABEL_85:
    if ((v16 & 8) == 0)
      goto LABEL_86;
    goto LABEL_157;
  }
LABEL_156:
  *(_BYTE *)(a2 + 130) = *(_QWORD *)(a1 + 528) != 0;
  if ((v16 & 8) == 0)
  {
LABEL_86:
    if ((v16 & 0x10) == 0)
      goto LABEL_87;
    goto LABEL_158;
  }
LABEL_157:
  *(_BYTE *)(a2 + 131) = *(_QWORD *)(a1 + 536) != 0;
  if ((v16 & 0x10) == 0)
  {
LABEL_87:
    if ((v16 & 0x20) == 0)
      goto LABEL_88;
    goto LABEL_159;
  }
LABEL_158:
  *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 544);
  if ((v16 & 0x20) == 0)
  {
LABEL_88:
    if ((v16 & 0x40) == 0)
      goto LABEL_89;
    goto LABEL_160;
  }
LABEL_159:
  *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 552);
  if ((v16 & 0x40) == 0)
  {
LABEL_89:
    if ((v16 & 0x80) == 0)
      goto LABEL_90;
    goto LABEL_161;
  }
LABEL_160:
  *(_DWORD *)(a2 + 140) = *(_QWORD *)(a1 + 560);
  if ((v16 & 0x80) == 0)
  {
LABEL_90:
    if ((v16 & 0x100) == 0)
      goto LABEL_91;
    goto LABEL_162;
  }
LABEL_161:
  *(_DWORD *)(a2 + 144) = *(_QWORD *)(a1 + 568);
  if ((v16 & 0x100) == 0)
  {
LABEL_91:
    if ((v16 & 0x200) == 0)
      goto LABEL_92;
    goto LABEL_163;
  }
LABEL_162:
  *(_DWORD *)(a2 + 148) = *(_QWORD *)(a1 + 576);
  if ((v16 & 0x200) == 0)
  {
LABEL_92:
    if ((v16 & 0x400) == 0)
      goto LABEL_94;
    goto LABEL_93;
  }
LABEL_163:
  *(_DWORD *)(a2 + 152) = *(_QWORD *)(a1 + 584);
  if ((v16 & 0x400) != 0)
LABEL_93:
    *(_DWORD *)(a2 + 156) = *(_QWORD *)(a1 + 592);
LABEL_94:
  v17 = v2 & 1;
  if ((v16 & 0x800) != 0)
    *(_DWORD *)(a2 + 160) = *(_QWORD *)(a1 + 600);
  v18 = v3 & 2;
  v19 = v3 & 4;
  v20 = v3 & 8;
  v21 = v3 & 0x10;
  v22 = v3 & 0x20;
  v23 = v3 & 0x40;
  v24 = v4 & 0x80;
  v25 = v4 & 0x100;
  v44 = v8 & 0x800000;
  v45 = v8 & 0x1000000;
  v46 = v8 & 0x2000000;
  v47 = v8 & 0x4000000;
  v48 = v8 & 0x8000000;
  v49 = v8 & 0x10000000;
  v33 = v8 & 0x20000000;
  v50 = v11 & 0x4000000000;
  v51 = v11 & 0x8000000000;
  v52 = v11 & 0x10000000000;
  v53 = v11 & 0x20000000000;
  v54 = v11 & 0x40000000000;
  v55 = v11 & 0x80000000000;
  if ((v16 & 0x1000) != 0)
    *(_BYTE *)(a2 + 164) = *(_QWORD *)(a1 + 608) != 0;
  v32 = (unsigned __int16)v6 & 0x8000;
  v31 = v5 & 0x4000;
  v30 = v5 & 0x2000;
  v29 = v5 & 0x1000;
  v28 = v5 & 0x800;
  v27 = v5 & 0x400;
  v26 = v5 & 0x200;
  v37 = v6 & 0x10000;
  v38 = v6 & 0x20000;
  v39 = v6 & 0x40000;
  v40 = v6 & 0x80000;
  v41 = v6 & 0x100000;
  v42 = v61 & 0x200000;
  v43 = v61 & 0x400000;
  v34 = BYTE4(v9) & 1;
  v35 = (v18 >> 1)
      + v17
      + (v19 >> 2)
      + (v20 >> 3)
      + (v21 >> 4)
      + (v22 >> 5)
      + (v23 >> 6)
      + (v24 >> 7)
      + (v25 >> 8)
      + (v26 >> 9)
      + (v27 >> 10)
      + (v28 >> 11)
      + (v29 >> 12)
      + (v30 >> 13)
      + (v31 >> 14)
      + (v32 >> 15)
      + (v37 >> 16)
      + (v38 >> 17)
      + (v39 >> 18)
      + (v40 >> 19)
      + (v41 >> 20)
      + (v42 >> 21)
      + (v43 >> 22)
      + (v44 >> 23)
      + (v45 >> 24)
      + (v46 >> 25)
      + (v47 >> 26)
      + (v48 >> 27)
      + (v49 >> 28)
      + (v33 >> 29)
      + ((v9 & 0x40000000) >> 30)
      + (v9 >> 31)
      + v34
      + ((v9 & 0x200000000) >> 33)
      + ((v9 & 0x400000000) >> 34)
      + ((v9 & 0x800000000) >> 35)
      + ((v10 & 0x1000000000) >> 36)
      + ((v10 & 0x2000000000) >> 37)
      + (v50 >> 38)
      + (v51 >> 39)
      + (v52 >> 40)
      + (v53 >> 41)
      + (v54 >> 42);
  v56 = v12 & 0x100000000000;
  v57 = v12 & 0x200000000000;
  v58 = v12 & 0x400000000000;
  v59 = v12 & 0x800000000000;
  v60 = v16 & 1;
  return v35
       + (v55 >> 43)
       + (v56 >> 44)
       + (v57 >> 45)
       + (v58 >> 46)
       + (v59 >> 47)
       + ((v12 & 0x1000000000000) >> 48)
       + ((v12 & 0x2000000000000) >> 49)
       + ((v13 & 0x4000000000000) >> 50)
       + ((v13 & 0x8000000000000) >> 51)
       + ((v14 & 0x10000000000000) >> 52)
       + ((v14 & 0x20000000000000) >> 53)
       + ((v14 & 0x40000000000000) >> 54)
       + ((v14 & 0x80000000000000) >> 55)
       + ((v14 & 0x100000000000000) >> 56)
       + ((v14 & 0x200000000000000) >> 57)
       + (v15 >> 63)
       + ((v15 & 0x400000000000000) >> 58)
       + ((v15 & 0x800000000000000) >> 59)
       + ((v15 & 0x1000000000000000) >> 60)
       + ((v15 & 0x2000000000000000) >> 61)
       + ((v15 & 0x4000000000000000) >> 62)
       + v60
       + ((unint64_t)(v16 & 2) >> 1)
       + ((unint64_t)(v16 & 4) >> 2)
       + ((unint64_t)(v16 & 8) >> 3)
       + ((unint64_t)(v16 & 0x10) >> 4)
       + ((unint64_t)(v16 & 0x20) >> 5)
       + ((unint64_t)(v16 & 0x40) >> 6)
       + ((unint64_t)(v16 & 0x80) >> 7)
       + ((unint64_t)(v16 & 0x100) >> 8)
       + ((unint64_t)(v16 & 0x200) >> 9)
       + ((unint64_t)(v16 & 0x400) >> 10)
       + ((unint64_t)(v16 & 0x800) >> 11)
       + ((unint64_t)(v16 & 0x1000) >> 12);
}

unint64_t sub_1C4D4C59C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  int v61;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_101;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_102;
  }
LABEL_101:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_103;
  }
LABEL_102:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_103:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_107;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_108;
  }
LABEL_107:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_109;
  }
LABEL_108:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_109:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_113;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_114;
  }
LABEL_113:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_115;
  }
LABEL_114:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_115:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_119;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_120;
  }
LABEL_119:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_121:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) != 0)
LABEL_36:
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
LABEL_37:
  v61 = v7;
  if ((v8 & 0x10000000) != 0)
    *(_BYTE *)(a2 + 53) = *(_QWORD *)(a1 + 224) != 0;
  v9 = v8;
  if ((v8 & 0x20000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 232) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x40000000) == 0)
    {
LABEL_41:
      if ((v9 & 0x80000000) == 0)
        goto LABEL_42;
      goto LABEL_125;
    }
  }
  else if ((v8 & 0x40000000) == 0)
  {
    goto LABEL_41;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 240);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_43;
    goto LABEL_126;
  }
LABEL_125:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_44;
    goto LABEL_127;
  }
LABEL_126:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 256) & 0x1FF;
  if ((v9 & 0x200000000) == 0)
  {
LABEL_44:
    if ((v9 & 0x400000000) == 0)
      goto LABEL_46;
    goto LABEL_45;
  }
LABEL_127:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 264) & 0x1FFFF;
  if ((v9 & 0x400000000) != 0)
LABEL_45:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 272) & 0x1FFF;
LABEL_46:
  v10 = v9;
  if ((v9 & 0x800000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 280) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x1000000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 288);
  v11 = v10;
  if ((v10 & 0x2000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 296) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x4000000000) == 0)
    {
LABEL_52:
      if ((v11 & 0x8000000000) == 0)
        goto LABEL_53;
      goto LABEL_131;
    }
  }
  else if ((v10 & 0x4000000000) == 0)
  {
    goto LABEL_52;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_54;
    goto LABEL_132;
  }
LABEL_131:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 312);
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_55;
    goto LABEL_133;
  }
LABEL_132:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 320) != 0;
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_57;
    goto LABEL_56;
  }
LABEL_133:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 328);
  if ((v11 & 0x40000000000) != 0)
LABEL_56:
    *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 336) != 0;
LABEL_57:
  v12 = v11;
  if ((v11 & 0x80000000000) != 0)
  {
    *(_BYTE *)(a2 + 84) = *(_BYTE *)(a1 + 344) & 1;
    v12 = *(_QWORD *)(a1 + 1248);
    if ((v12 & 0x100000000000) == 0)
    {
LABEL_59:
      if ((v12 & 0x200000000000) == 0)
        goto LABEL_60;
      goto LABEL_137;
    }
  }
  else if ((v11 & 0x100000000000) == 0)
  {
    goto LABEL_59;
  }
  *(_WORD *)(a2 + 84) = *(_QWORD *)(a1 + 352);
  if ((v12 & 0x200000000000) == 0)
  {
LABEL_60:
    if ((v12 & 0x400000000000) == 0)
      goto LABEL_61;
    goto LABEL_138;
  }
LABEL_137:
  *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 360) & 0x1FF;
  if ((v12 & 0x400000000000) == 0)
  {
LABEL_61:
    if ((v12 & 0x800000000000) == 0)
      goto LABEL_62;
    goto LABEL_139;
  }
LABEL_138:
  *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 368) & 0x1FF;
  if ((v12 & 0x800000000000) == 0)
  {
LABEL_62:
    if ((v12 & 0x1000000000000) == 0)
      goto LABEL_64;
    goto LABEL_63;
  }
LABEL_139:
  *(_DWORD *)(a2 + 84) = *(_DWORD *)(a1 + 376) & 0x1FFFF;
  if ((v12 & 0x1000000000000) != 0)
LABEL_63:
    *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 384) & 0x1FFF;
LABEL_64:
  v13 = v12;
  if ((v12 & 0x2000000000000) != 0)
  {
    *(_BYTE *)(a2 + 84) = *(_BYTE *)(a1 + 392) & 0x7F;
    v13 = *(_QWORD *)(a1 + 1248);
  }
  if ((v13 & 0x4000000000000) != 0)
    *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 400);
  v14 = v13;
  if ((v13 & 0x8000000000000) != 0)
  {
    *(_BYTE *)(a2 + 88) = *(_BYTE *)(a1 + 408) & 0xF;
    v14 = *(_QWORD *)(a1 + 1248);
    if ((v14 & 0x10000000000000) == 0)
    {
LABEL_70:
      if ((v14 & 0x20000000000000) == 0)
        goto LABEL_71;
      goto LABEL_143;
    }
  }
  else if ((v13 & 0x10000000000000) == 0)
  {
    goto LABEL_70;
  }
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 416);
  if ((v14 & 0x20000000000000) == 0)
  {
LABEL_71:
    if ((v14 & 0x40000000000000) == 0)
      goto LABEL_72;
    goto LABEL_144;
  }
LABEL_143:
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 424);
  if ((v14 & 0x40000000000000) == 0)
  {
LABEL_72:
    if ((v14 & 0x80000000000000) == 0)
      goto LABEL_73;
    goto LABEL_145;
  }
LABEL_144:
  *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 432) != 0;
  if ((v14 & 0x80000000000000) == 0)
  {
LABEL_73:
    if ((v14 & 0x100000000000000) == 0)
      goto LABEL_75;
    goto LABEL_74;
  }
LABEL_145:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 440);
  if ((v14 & 0x100000000000000) != 0)
LABEL_74:
    *(_BYTE *)(a2 + 108) = *(_QWORD *)(a1 + 448) != 0;
LABEL_75:
  v15 = v14;
  if ((v14 & 0x200000000000000) != 0)
  {
    *(_BYTE *)(a2 + 112) = *(_BYTE *)(a1 + 456) & 0x1F;
    v15 = *(_QWORD *)(a1 + 1248);
    if ((v15 & 0x400000000000000) == 0)
    {
LABEL_77:
      if ((v15 & 0x800000000000000) == 0)
        goto LABEL_78;
      goto LABEL_149;
    }
  }
  else if ((v14 & 0x400000000000000) == 0)
  {
    goto LABEL_77;
  }
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 464);
  if ((v15 & 0x800000000000000) == 0)
  {
LABEL_78:
    if ((v15 & 0x1000000000000000) == 0)
      goto LABEL_79;
    goto LABEL_150;
  }
LABEL_149:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 472);
  if ((v15 & 0x1000000000000000) == 0)
  {
LABEL_79:
    if ((v15 & 0x2000000000000000) == 0)
      goto LABEL_80;
    goto LABEL_151;
  }
LABEL_150:
  *(_BYTE *)(a2 + 124) = *(_QWORD *)(a1 + 480) != 0;
  if ((v15 & 0x2000000000000000) == 0)
  {
LABEL_80:
    if ((v15 & 0x4000000000000000) == 0)
      goto LABEL_81;
LABEL_152:
    *(_BYTE *)(a2 + 126) = *(_QWORD *)(a1 + 496) != 0;
    if ((v15 & 0x8000000000000000) == 0)
      goto LABEL_82;
    goto LABEL_153;
  }
LABEL_151:
  *(_BYTE *)(a2 + 125) = *(_QWORD *)(a1 + 488) != 0;
  if ((v15 & 0x4000000000000000) != 0)
    goto LABEL_152;
LABEL_81:
  if ((v15 & 0x8000000000000000) == 0)
    goto LABEL_82;
LABEL_153:
  *(_BYTE *)(a2 + 127) = *(_QWORD *)(a1 + 504) != 0;
LABEL_82:
  v16 = *(_QWORD *)(a1 + 1256);
  if ((v16 & 1) != 0)
  {
    *(_BYTE *)(a2 + 128) = *(_QWORD *)(a1 + 512) != 0;
    if ((v16 & 2) == 0)
    {
LABEL_84:
      if ((v16 & 4) == 0)
        goto LABEL_85;
      goto LABEL_156;
    }
  }
  else if ((v16 & 2) == 0)
  {
    goto LABEL_84;
  }
  *(_BYTE *)(a2 + 129) = *(_QWORD *)(a1 + 520) != 0;
  if ((v16 & 4) == 0)
  {
LABEL_85:
    if ((v16 & 8) == 0)
      goto LABEL_86;
    goto LABEL_157;
  }
LABEL_156:
  *(_BYTE *)(a2 + 130) = *(_QWORD *)(a1 + 528) != 0;
  if ((v16 & 8) == 0)
  {
LABEL_86:
    if ((v16 & 0x10) == 0)
      goto LABEL_87;
    goto LABEL_158;
  }
LABEL_157:
  *(_BYTE *)(a2 + 131) = *(_QWORD *)(a1 + 536) != 0;
  if ((v16 & 0x10) == 0)
  {
LABEL_87:
    if ((v16 & 0x20) == 0)
      goto LABEL_88;
    goto LABEL_159;
  }
LABEL_158:
  *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 544);
  if ((v16 & 0x20) == 0)
  {
LABEL_88:
    if ((v16 & 0x40) == 0)
      goto LABEL_89;
    goto LABEL_160;
  }
LABEL_159:
  *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 552);
  if ((v16 & 0x40) == 0)
  {
LABEL_89:
    if ((v16 & 0x80) == 0)
      goto LABEL_90;
    goto LABEL_161;
  }
LABEL_160:
  *(_DWORD *)(a2 + 140) = *(_QWORD *)(a1 + 560);
  if ((v16 & 0x80) == 0)
  {
LABEL_90:
    if ((v16 & 0x100) == 0)
      goto LABEL_91;
    goto LABEL_162;
  }
LABEL_161:
  *(_DWORD *)(a2 + 144) = *(_QWORD *)(a1 + 568);
  if ((v16 & 0x100) == 0)
  {
LABEL_91:
    if ((v16 & 0x200) == 0)
      goto LABEL_92;
    goto LABEL_163;
  }
LABEL_162:
  *(_DWORD *)(a2 + 148) = *(_QWORD *)(a1 + 576);
  if ((v16 & 0x200) == 0)
  {
LABEL_92:
    if ((v16 & 0x400) == 0)
      goto LABEL_94;
    goto LABEL_93;
  }
LABEL_163:
  *(_DWORD *)(a2 + 152) = *(_QWORD *)(a1 + 584);
  if ((v16 & 0x400) != 0)
LABEL_93:
    *(_DWORD *)(a2 + 156) = *(_QWORD *)(a1 + 592);
LABEL_94:
  v17 = v2 & 1;
  if ((v16 & 0x800) != 0)
    *(_DWORD *)(a2 + 160) = *(_QWORD *)(a1 + 600);
  v18 = v3 & 2;
  v19 = v3 & 4;
  v20 = v3 & 8;
  v21 = v3 & 0x10;
  v22 = v3 & 0x20;
  v23 = v3 & 0x40;
  v24 = v4 & 0x80;
  v25 = v4 & 0x100;
  v44 = v8 & 0x800000;
  v45 = v8 & 0x1000000;
  v46 = v8 & 0x2000000;
  v47 = v8 & 0x4000000;
  v48 = v8 & 0x8000000;
  v49 = v8 & 0x10000000;
  v33 = v8 & 0x20000000;
  v50 = v11 & 0x4000000000;
  v51 = v11 & 0x8000000000;
  v52 = v11 & 0x10000000000;
  v53 = v11 & 0x20000000000;
  v54 = v11 & 0x40000000000;
  v55 = v11 & 0x80000000000;
  if ((v16 & 0x1000) != 0)
    *(_BYTE *)(a2 + 164) = *(_QWORD *)(a1 + 608) != 0;
  v32 = (unsigned __int16)v6 & 0x8000;
  v31 = v5 & 0x4000;
  v30 = v5 & 0x2000;
  v29 = v5 & 0x1000;
  v28 = v5 & 0x800;
  v27 = v5 & 0x400;
  v26 = v5 & 0x200;
  v37 = v6 & 0x10000;
  v38 = v6 & 0x20000;
  v39 = v6 & 0x40000;
  v40 = v6 & 0x80000;
  v41 = v6 & 0x100000;
  v42 = v61 & 0x200000;
  v43 = v61 & 0x400000;
  v34 = BYTE4(v9) & 1;
  v35 = (v18 >> 1)
      + v17
      + (v19 >> 2)
      + (v20 >> 3)
      + (v21 >> 4)
      + (v22 >> 5)
      + (v23 >> 6)
      + (v24 >> 7)
      + (v25 >> 8)
      + (v26 >> 9)
      + (v27 >> 10)
      + (v28 >> 11)
      + (v29 >> 12)
      + (v30 >> 13)
      + (v31 >> 14)
      + (v32 >> 15)
      + (v37 >> 16)
      + (v38 >> 17)
      + (v39 >> 18)
      + (v40 >> 19)
      + (v41 >> 20)
      + (v42 >> 21)
      + (v43 >> 22)
      + (v44 >> 23)
      + (v45 >> 24)
      + (v46 >> 25)
      + (v47 >> 26)
      + (v48 >> 27)
      + (v49 >> 28)
      + (v33 >> 29)
      + ((v9 & 0x40000000) >> 30)
      + (v9 >> 31)
      + v34
      + ((v9 & 0x200000000) >> 33)
      + ((v9 & 0x400000000) >> 34)
      + ((v9 & 0x800000000) >> 35)
      + ((v10 & 0x1000000000) >> 36)
      + ((v10 & 0x2000000000) >> 37)
      + (v50 >> 38)
      + (v51 >> 39)
      + (v52 >> 40)
      + (v53 >> 41)
      + (v54 >> 42);
  v56 = v12 & 0x100000000000;
  v57 = v12 & 0x200000000000;
  v58 = v12 & 0x400000000000;
  v59 = v12 & 0x800000000000;
  v60 = v16 & 1;
  return v35
       + (v55 >> 43)
       + (v56 >> 44)
       + (v57 >> 45)
       + (v58 >> 46)
       + (v59 >> 47)
       + ((v12 & 0x1000000000000) >> 48)
       + ((v12 & 0x2000000000000) >> 49)
       + ((v13 & 0x4000000000000) >> 50)
       + ((v13 & 0x8000000000000) >> 51)
       + ((v14 & 0x10000000000000) >> 52)
       + ((v14 & 0x20000000000000) >> 53)
       + ((v14 & 0x40000000000000) >> 54)
       + ((v14 & 0x80000000000000) >> 55)
       + ((v14 & 0x100000000000000) >> 56)
       + ((v14 & 0x200000000000000) >> 57)
       + (v15 >> 63)
       + ((v15 & 0x400000000000000) >> 58)
       + ((v15 & 0x800000000000000) >> 59)
       + ((v15 & 0x1000000000000000) >> 60)
       + ((v15 & 0x2000000000000000) >> 61)
       + ((v15 & 0x4000000000000000) >> 62)
       + v60
       + ((unint64_t)(v16 & 2) >> 1)
       + ((unint64_t)(v16 & 4) >> 2)
       + ((unint64_t)(v16 & 8) >> 3)
       + ((unint64_t)(v16 & 0x10) >> 4)
       + ((unint64_t)(v16 & 0x20) >> 5)
       + ((unint64_t)(v16 & 0x40) >> 6)
       + ((unint64_t)(v16 & 0x80) >> 7)
       + ((unint64_t)(v16 & 0x100) >> 8)
       + ((unint64_t)(v16 & 0x200) >> 9)
       + ((unint64_t)(v16 & 0x400) >> 10)
       + ((unint64_t)(v16 & 0x800) >> 11)
       + ((unint64_t)(v16 & 0x1000) >> 12);
}

unint64_t sub_1C4D4D108(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v16;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_DWORD *)a2 = *(_QWORD *)a1;
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0)
        goto LABEL_4;
      goto LABEL_46;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_DWORD *)(a2 + 4) = *(_QWORD *)(a1 + 8);
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0)
      goto LABEL_5;
    goto LABEL_47;
  }
LABEL_46:
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(a1 + 16) & 1;
  v3 = *(_QWORD *)(a1 + 1248);
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_48;
  }
LABEL_47:
  *(_WORD *)(a2 + 8) = *(_QWORD *)(a1 + 24);
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_49;
  }
LABEL_48:
  *(_WORD *)(a2 + 8) = *(_WORD *)(a1 + 32) & 0x1FF;
  if ((v3 & 0x20) == 0)
  {
LABEL_7:
    if ((v3 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_50;
  }
LABEL_49:
  *(_WORD *)(a2 + 8) = *(_WORD *)(a1 + 40) & 0x1FF;
  if ((v3 & 0x40) == 0)
  {
LABEL_8:
    if ((v3 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_50:
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 48) & 0x1FFFF;
  if ((v3 & 0x80) != 0)
LABEL_9:
    *(_WORD *)(a2 + 8) = *(_WORD *)(a1 + 56) & 0x1FFF;
LABEL_10:
  v4 = v3;
  if ((v3 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 8) = *(_BYTE *)(a1 + 64) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x200) != 0)
    *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  v5 = v4;
  if ((v4 & 0x400) != 0)
  {
    *(_BYTE *)(a2 + 12) = *(_BYTE *)(a1 + 80) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x800) == 0)
    {
LABEL_16:
      if ((v5 & 0x1000) == 0)
        goto LABEL_17;
      goto LABEL_54;
    }
  }
  else if ((v4 & 0x800) == 0)
  {
    goto LABEL_16;
  }
  *(_DWORD *)(a2 + 16) = *(_QWORD *)(a1 + 88);
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_55;
  }
LABEL_54:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_56;
  }
LABEL_55:
  *(_BYTE *)(a2 + 24) = *(_QWORD *)(a1 + 104) != 0;
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_57;
  }
LABEL_56:
  *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 112);
  if ((v5 & 0x8000) == 0)
  {
LABEL_20:
    if ((v5 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_58;
  }
LABEL_57:
  *(_BYTE *)(a2 + 32) = *(_QWORD *)(a1 + 120) != 0;
  if ((v5 & 0x10000) == 0)
  {
LABEL_21:
    if ((v5 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_59;
  }
LABEL_58:
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 128);
  if ((v5 & 0x20000) == 0)
  {
LABEL_22:
    if ((v5 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_60;
  }
LABEL_59:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 136);
  if ((v5 & 0x40000) == 0)
  {
LABEL_23:
    if ((v5 & 0x80000) == 0)
      goto LABEL_24;
    goto LABEL_61;
  }
LABEL_60:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 144) != 0;
  if ((v5 & 0x80000) == 0)
  {
LABEL_24:
    if ((v5 & 0x100000) == 0)
      goto LABEL_25;
    goto LABEL_62;
  }
LABEL_61:
  *(_BYTE *)(a2 + 45) = *(_QWORD *)(a1 + 152) != 0;
  if ((v5 & 0x100000) == 0)
  {
LABEL_25:
    if ((v5 & 0x200000) == 0)
      goto LABEL_26;
    goto LABEL_63;
  }
LABEL_62:
  *(_BYTE *)(a2 + 46) = *(_QWORD *)(a1 + 160) != 0;
  if ((v5 & 0x200000) == 0)
  {
LABEL_26:
    if ((v5 & 0x400000) == 0)
      goto LABEL_27;
    goto LABEL_64;
  }
LABEL_63:
  *(_BYTE *)(a2 + 47) = *(_QWORD *)(a1 + 168) != 0;
  if ((v5 & 0x400000) == 0)
  {
LABEL_27:
    if ((v5 & 0x800000) == 0)
      goto LABEL_28;
    goto LABEL_65;
  }
LABEL_64:
  *(_BYTE *)(a2 + 48) = *(_QWORD *)(a1 + 176) != 0;
  if ((v5 & 0x800000) == 0)
  {
LABEL_28:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_29;
    goto LABEL_66;
  }
LABEL_65:
  *(_BYTE *)(a2 + 49) = *(_QWORD *)(a1 + 184) != 0;
  if ((v5 & 0x1000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_30;
    goto LABEL_67;
  }
LABEL_66:
  *(_BYTE *)(a2 + 50) = *(_QWORD *)(a1 + 192) != 0;
  if ((v5 & 0x2000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_31;
    goto LABEL_68;
  }
LABEL_67:
  *(_BYTE *)(a2 + 51) = *(_QWORD *)(a1 + 200) != 0;
  if ((v5 & 0x4000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_32;
    goto LABEL_69;
  }
LABEL_68:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 208) != 0;
  if ((v5 & 0x8000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_33;
    goto LABEL_70;
  }
LABEL_69:
  *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_34;
    goto LABEL_71;
  }
LABEL_70:
  *(_DWORD *)(a2 + 60) = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_35;
    goto LABEL_72;
  }
LABEL_71:
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 232);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_73;
  }
LABEL_72:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 240);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_37;
    goto LABEL_74;
  }
LABEL_73:
  *(_DWORD *)(a2 + 72) = *(_QWORD *)(a1 + 248);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_39;
    goto LABEL_38;
  }
LABEL_74:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 256);
  if ((v5 & 0x200000000) != 0)
LABEL_38:
    *(_DWORD *)(a2 + 80) = *(_QWORD *)(a1 + 264);
LABEL_39:
  v6 = v2 & 1;
  if ((v5 & 0x400000000) != 0)
    *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 272);
  v7 = v2 & 2;
  v8 = v2 & 4;
  v9 = v3 & 8;
  v10 = v3 & 0x10;
  v11 = v3 & 0x20;
  v12 = v3 & 0x40;
  v13 = v3 & 0x80;
  v14 = v3 & 0x100;
  if ((v5 & 0x800000000) != 0)
    *(_BYTE *)(a2 + 88) = *(_QWORD *)(a1 + 280) != 0;
  v16 = BYTE4(v5) & 1;
  return (v7 >> 1)
       + v6
       + (v8 >> 2)
       + (v9 >> 3)
       + (v10 >> 4)
       + (v11 >> 5)
       + (v12 >> 6)
       + (v13 >> 7)
       + (v14 >> 8)
       + ((unint64_t)(v4 & 0x200) >> 9)
       + ((unint64_t)(v4 & 0x400) >> 10)
       + ((unint64_t)(v5 & 0x800) >> 11)
       + ((unint64_t)(v5 & 0x1000) >> 12)
       + ((unint64_t)(v5 & 0x2000) >> 13)
       + ((unint64_t)(v5 & 0x4000) >> 14)
       + ((unint64_t)((unsigned __int16)v5 & 0x8000) >> 15)
       + ((v5 & 0x10000uLL) >> 16)
       + ((v5 & 0x20000uLL) >> 17)
       + ((v5 & 0x40000uLL) >> 18)
       + ((v5 & 0x80000uLL) >> 19)
       + ((v5 & 0x100000uLL) >> 20)
       + ((v5 & 0x200000uLL) >> 21)
       + ((v5 & 0x400000uLL) >> 22)
       + ((v5 & 0x800000uLL) >> 23)
       + ((v5 & 0x1000000) >> 24)
       + ((v5 & 0x2000000) >> 25)
       + ((v5 & 0x4000000) >> 26)
       + ((v5 & 0x8000000) >> 27)
       + ((v5 & 0x10000000) >> 28)
       + ((v5 & 0x20000000) >> 29)
       + ((v5 & 0x40000000) >> 30)
       + (v5 >> 31)
       + v16
       + ((v5 & 0x200000000uLL) >> 33)
       + ((v5 & 0x400000000uLL) >> 34)
       + ((v5 & 0x800000000uLL) >> 35);
}

unint64_t sub_1C4D4D5F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v16;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_46;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_47;
  }
LABEL_46:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_48;
  }
LABEL_47:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_48:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_52;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_53;
  }
LABEL_52:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_54;
  }
LABEL_53:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_55;
  }
LABEL_54:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_56;
  }
LABEL_55:
  *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_57;
  }
LABEL_56:
  *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 112);
  if ((v5 & 0x8000) == 0)
  {
LABEL_20:
    if ((v5 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_58;
  }
LABEL_57:
  *(_DWORD *)(a2 + 32) = *(_QWORD *)(a1 + 120);
  if ((v5 & 0x10000) == 0)
  {
LABEL_21:
    if ((v5 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_59;
  }
LABEL_58:
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 128);
  if ((v5 & 0x20000) == 0)
  {
LABEL_22:
    if ((v5 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_60;
  }
LABEL_59:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 136);
  if ((v5 & 0x40000) == 0)
  {
LABEL_23:
    if ((v5 & 0x80000) == 0)
      goto LABEL_24;
    goto LABEL_61;
  }
LABEL_60:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 144) != 0;
  if ((v5 & 0x80000) == 0)
  {
LABEL_24:
    if ((v5 & 0x100000) == 0)
      goto LABEL_25;
    goto LABEL_62;
  }
LABEL_61:
  *(_BYTE *)(a2 + 45) = *(_QWORD *)(a1 + 152) != 0;
  if ((v5 & 0x100000) == 0)
  {
LABEL_25:
    if ((v5 & 0x200000) == 0)
      goto LABEL_26;
    goto LABEL_63;
  }
LABEL_62:
  *(_BYTE *)(a2 + 46) = *(_QWORD *)(a1 + 160) != 0;
  if ((v5 & 0x200000) == 0)
  {
LABEL_26:
    if ((v5 & 0x400000) == 0)
      goto LABEL_27;
    goto LABEL_64;
  }
LABEL_63:
  *(_BYTE *)(a2 + 47) = *(_QWORD *)(a1 + 168) != 0;
  if ((v5 & 0x400000) == 0)
  {
LABEL_27:
    if ((v5 & 0x800000) == 0)
      goto LABEL_28;
    goto LABEL_65;
  }
LABEL_64:
  *(_BYTE *)(a2 + 48) = *(_QWORD *)(a1 + 176) != 0;
  if ((v5 & 0x800000) == 0)
  {
LABEL_28:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_29;
    goto LABEL_66;
  }
LABEL_65:
  *(_BYTE *)(a2 + 49) = *(_QWORD *)(a1 + 184) != 0;
  if ((v5 & 0x1000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_30;
    goto LABEL_67;
  }
LABEL_66:
  *(_BYTE *)(a2 + 50) = *(_QWORD *)(a1 + 192) != 0;
  if ((v5 & 0x2000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_31;
    goto LABEL_68;
  }
LABEL_67:
  *(_BYTE *)(a2 + 51) = *(_QWORD *)(a1 + 200) != 0;
  if ((v5 & 0x4000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_32;
    goto LABEL_69;
  }
LABEL_68:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 208) != 0;
  if ((v5 & 0x8000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_33;
    goto LABEL_70;
  }
LABEL_69:
  *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_34;
    goto LABEL_71;
  }
LABEL_70:
  *(_DWORD *)(a2 + 60) = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_35;
    goto LABEL_72;
  }
LABEL_71:
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 232);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_73;
  }
LABEL_72:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 240);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_37;
    goto LABEL_74;
  }
LABEL_73:
  *(_DWORD *)(a2 + 72) = *(_QWORD *)(a1 + 248);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_39;
    goto LABEL_38;
  }
LABEL_74:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 256);
  if ((v5 & 0x200000000) != 0)
LABEL_38:
    *(_DWORD *)(a2 + 80) = *(_QWORD *)(a1 + 264);
LABEL_39:
  if ((v5 & 0x400000000) != 0)
    *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 272);
  v7 = v3 & 2;
  v8 = v3 & 4;
  v9 = v3 & 8;
  v10 = v3 & 0x10;
  v11 = v3 & 0x20;
  v12 = v3 & 0x40;
  if ((v5 & 0x800000000) != 0)
    *(_BYTE *)(a2 + 88) = *(_QWORD *)(a1 + 280) != 0;
  v14 = v5 & 0x1000000;
  v13 = v4 & 0x100;
  v6 = v2 & 1;
  v16 = BYTE4(v5) & 1;
  return (v7 >> 1)
       + v6
       + (v8 >> 2)
       + (v9 >> 3)
       + (v10 >> 4)
       + (v11 >> 5)
       + (v12 >> 6)
       + ((unint64_t)(v4 & 0x80) >> 7)
       + (v13 >> 8)
       + ((unint64_t)(v5 & 0x200) >> 9)
       + ((unint64_t)(v5 & 0x400) >> 10)
       + ((unint64_t)(v5 & 0x800) >> 11)
       + ((unint64_t)(v5 & 0x1000) >> 12)
       + ((unint64_t)(v5 & 0x2000) >> 13)
       + ((unint64_t)(v5 & 0x4000) >> 14)
       + ((unint64_t)((unsigned __int16)v5 & 0x8000) >> 15)
       + ((v5 & 0x10000uLL) >> 16)
       + ((v5 & 0x20000uLL) >> 17)
       + ((v5 & 0x40000uLL) >> 18)
       + ((v5 & 0x80000uLL) >> 19)
       + ((v5 & 0x100000uLL) >> 20)
       + ((v5 & 0x200000uLL) >> 21)
       + ((v5 & 0x400000uLL) >> 22)
       + ((v5 & 0x800000uLL) >> 23)
       + (v14 >> 24)
       + ((v5 & 0x2000000) >> 25)
       + ((v5 & 0x4000000) >> 26)
       + ((v5 & 0x8000000) >> 27)
       + ((v5 & 0x10000000) >> 28)
       + ((v5 & 0x20000000) >> 29)
       + ((v5 & 0x40000000) >> 30)
       + (v5 >> 31)
       + v16
       + ((v5 & 0x200000000uLL) >> 33)
       + ((v5 & 0x400000000uLL) >> 34)
       + ((v5 & 0x800000000uLL) >> 35);
}

unint64_t sub_1C4D4DAD8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  int v77;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_105;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_106;
  }
LABEL_105:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_107;
  }
LABEL_106:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_107:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_111;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_112;
  }
LABEL_111:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_113;
  }
LABEL_112:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_113:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_BYTE *)(a2 + 24) = *(_QWORD *)(a1 + 104) != 0;
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_117;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_118;
  }
LABEL_117:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_119;
  }
LABEL_118:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_119:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_123;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_124;
  }
LABEL_123:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_125;
  }
LABEL_124:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_125:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) != 0)
LABEL_36:
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
LABEL_37:
  v77 = v7;
  if ((v8 & 0x10000000) != 0)
    *(_BYTE *)(a2 + 53) = *(_QWORD *)(a1 + 224) != 0;
  v9 = v8;
  if ((v8 & 0x20000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 232) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x40000000) == 0)
    {
LABEL_41:
      if ((v9 & 0x80000000) == 0)
        goto LABEL_42;
      goto LABEL_129;
    }
  }
  else if ((v8 & 0x40000000) == 0)
  {
    goto LABEL_41;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 240);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_43;
    goto LABEL_130;
  }
LABEL_129:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_44;
    goto LABEL_131;
  }
LABEL_130:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 256) & 0x1FF;
  if ((v9 & 0x200000000) == 0)
  {
LABEL_44:
    if ((v9 & 0x400000000) == 0)
      goto LABEL_46;
    goto LABEL_45;
  }
LABEL_131:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 264) & 0x1FFFF;
  if ((v9 & 0x400000000) != 0)
LABEL_45:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 272) & 0x1FFF;
LABEL_46:
  v10 = v9;
  if ((v9 & 0x800000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 280) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x1000000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 288);
  v11 = v10;
  if ((v10 & 0x2000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 296) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x4000000000) == 0)
    {
LABEL_52:
      if ((v11 & 0x8000000000) == 0)
        goto LABEL_53;
      goto LABEL_135;
    }
  }
  else if ((v10 & 0x4000000000) == 0)
  {
    goto LABEL_52;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_54;
    goto LABEL_136;
  }
LABEL_135:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 312);
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_55;
    goto LABEL_137;
  }
LABEL_136:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 320) != 0;
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_56;
    goto LABEL_138;
  }
LABEL_137:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 328);
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_58;
    goto LABEL_57;
  }
LABEL_138:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 336) != 0;
  if ((v11 & 0x80000000000) != 0)
LABEL_57:
    *(_BYTE *)(a2 + 84) = *(_QWORD *)(a1 + 344) != 0;
LABEL_58:
  v12 = v11;
  if ((v11 & 0x100000000000) != 0)
  {
    *(_BYTE *)(a2 + 88) = *(_BYTE *)(a1 + 352) & 1;
    v12 = *(_QWORD *)(a1 + 1248);
    if ((v12 & 0x200000000000) == 0)
    {
LABEL_60:
      if ((v12 & 0x400000000000) == 0)
        goto LABEL_61;
      goto LABEL_142;
    }
  }
  else if ((v11 & 0x200000000000) == 0)
  {
    goto LABEL_60;
  }
  *(_WORD *)(a2 + 88) = *(_QWORD *)(a1 + 360);
  if ((v12 & 0x400000000000) == 0)
  {
LABEL_61:
    if ((v12 & 0x800000000000) == 0)
      goto LABEL_62;
    goto LABEL_143;
  }
LABEL_142:
  *(_WORD *)(a2 + 88) = *(_WORD *)(a1 + 368) & 0x1FF;
  if ((v12 & 0x800000000000) == 0)
  {
LABEL_62:
    if ((v12 & 0x1000000000000) == 0)
      goto LABEL_63;
    goto LABEL_144;
  }
LABEL_143:
  *(_WORD *)(a2 + 88) = *(_WORD *)(a1 + 376) & 0x1FF;
  if ((v12 & 0x1000000000000) == 0)
  {
LABEL_63:
    if ((v12 & 0x2000000000000) == 0)
      goto LABEL_65;
    goto LABEL_64;
  }
LABEL_144:
  *(_DWORD *)(a2 + 88) = *(_DWORD *)(a1 + 384) & 0x1FFFF;
  if ((v12 & 0x2000000000000) != 0)
LABEL_64:
    *(_WORD *)(a2 + 88) = *(_WORD *)(a1 + 392) & 0x1FFF;
LABEL_65:
  v13 = v12;
  if ((v12 & 0x4000000000000) != 0)
  {
    *(_BYTE *)(a2 + 88) = *(_BYTE *)(a1 + 400) & 0x7F;
    v13 = *(_QWORD *)(a1 + 1248);
  }
  if ((v13 & 0x8000000000000) != 0)
    *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 408);
  v14 = v13;
  if ((v13 & 0x10000000000000) != 0)
  {
    *(_BYTE *)(a2 + 92) = *(_BYTE *)(a1 + 416) & 0xF;
    v14 = *(_QWORD *)(a1 + 1248);
    if ((v14 & 0x20000000000000) == 0)
    {
LABEL_71:
      if ((v14 & 0x40000000000000) == 0)
        goto LABEL_72;
      goto LABEL_148;
    }
  }
  else if ((v13 & 0x20000000000000) == 0)
  {
    goto LABEL_71;
  }
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 424);
  if ((v14 & 0x40000000000000) == 0)
  {
LABEL_72:
    if ((v14 & 0x80000000000000) == 0)
      goto LABEL_73;
    goto LABEL_149;
  }
LABEL_148:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 432);
  if ((v14 & 0x80000000000000) == 0)
  {
LABEL_73:
    if ((v14 & 0x100000000000000) == 0)
      goto LABEL_74;
    goto LABEL_150;
  }
LABEL_149:
  *(_BYTE *)(a2 + 104) = *(_QWORD *)(a1 + 440) != 0;
  if ((v14 & 0x100000000000000) == 0)
  {
LABEL_74:
    if ((v14 & 0x200000000000000) == 0)
      goto LABEL_75;
    goto LABEL_151;
  }
LABEL_150:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 448);
  if ((v14 & 0x200000000000000) == 0)
  {
LABEL_75:
    if ((v14 & 0x400000000000000) == 0)
      goto LABEL_76;
    goto LABEL_152;
  }
LABEL_151:
  *(_BYTE *)(a2 + 112) = *(_QWORD *)(a1 + 456) != 0;
  if ((v14 & 0x400000000000000) == 0)
  {
LABEL_76:
    if ((v14 & 0x800000000000000) == 0)
      goto LABEL_77;
    goto LABEL_153;
  }
LABEL_152:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 464);
  if ((v14 & 0x800000000000000) == 0)
  {
LABEL_77:
    if ((v14 & 0x1000000000000000) == 0)
      goto LABEL_78;
    goto LABEL_154;
  }
LABEL_153:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 472);
  if ((v14 & 0x1000000000000000) == 0)
  {
LABEL_78:
    if ((v14 & 0x2000000000000000) == 0)
      goto LABEL_79;
    goto LABEL_155;
  }
LABEL_154:
  *(_BYTE *)(a2 + 124) = *(_QWORD *)(a1 + 480) != 0;
  if ((v14 & 0x2000000000000000) == 0)
  {
LABEL_79:
    if ((v14 & 0x4000000000000000) == 0)
      goto LABEL_80;
LABEL_156:
    *(_BYTE *)(a2 + 126) = *(_QWORD *)(a1 + 496) != 0;
    if ((v14 & 0x8000000000000000) == 0)
      goto LABEL_81;
    goto LABEL_157;
  }
LABEL_155:
  *(_BYTE *)(a2 + 125) = *(_QWORD *)(a1 + 488) != 0;
  if ((v14 & 0x4000000000000000) != 0)
    goto LABEL_156;
LABEL_80:
  if ((v14 & 0x8000000000000000) == 0)
    goto LABEL_81;
LABEL_157:
  *(_BYTE *)(a2 + 127) = *(_QWORD *)(a1 + 504) != 0;
LABEL_81:
  v15 = *(_QWORD *)(a1 + 1256);
  if ((v15 & 1) != 0)
  {
    *(_BYTE *)(a2 + 128) = *(_QWORD *)(a1 + 512) != 0;
    if ((v15 & 2) == 0)
    {
LABEL_83:
      if ((v15 & 4) == 0)
        goto LABEL_84;
      goto LABEL_160;
    }
  }
  else if ((v15 & 2) == 0)
  {
    goto LABEL_83;
  }
  *(_BYTE *)(a2 + 129) = *(_QWORD *)(a1 + 520) != 0;
  if ((v15 & 4) == 0)
  {
LABEL_84:
    if ((v15 & 8) == 0)
      goto LABEL_86;
    goto LABEL_85;
  }
LABEL_160:
  *(_BYTE *)(a2 + 130) = *(_QWORD *)(a1 + 528) != 0;
  if ((v15 & 8) != 0)
LABEL_85:
    *(_BYTE *)(a2 + 131) = *(_QWORD *)(a1 + 536) != 0;
LABEL_86:
  LODWORD(v16) = v15;
  if ((v15 & 0x10) != 0)
  {
    *(_BYTE *)(a2 + 132) = *(_BYTE *)(a1 + 544) & 0xF;
    v16 = *(_QWORD *)(a1 + 1256);
    if ((v16 & 0x20) == 0)
    {
LABEL_88:
      if ((v16 & 0x40) == 0)
        goto LABEL_89;
      goto LABEL_164;
    }
  }
  else if ((v15 & 0x20) == 0)
  {
    goto LABEL_88;
  }
  *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 552);
  if ((v16 & 0x40) == 0)
  {
LABEL_89:
    if ((v16 & 0x80) == 0)
      goto LABEL_90;
    goto LABEL_165;
  }
LABEL_164:
  *(_WORD *)(a2 + 140) = *(_QWORD *)(a1 + 560);
  if ((v16 & 0x80) == 0)
  {
LABEL_90:
    if ((v16 & 0x100) == 0)
      goto LABEL_91;
    goto LABEL_166;
  }
LABEL_165:
  *(_DWORD *)(a2 + 144) = *(_QWORD *)(a1 + 568);
  if ((v16 & 0x100) == 0)
  {
LABEL_91:
    if ((v16 & 0x200) == 0)
      goto LABEL_92;
    goto LABEL_167;
  }
LABEL_166:
  *(_DWORD *)(a2 + 148) = *(_QWORD *)(a1 + 576);
  if ((v16 & 0x200) == 0)
  {
LABEL_92:
    if ((v16 & 0x400) == 0)
      goto LABEL_93;
    goto LABEL_168;
  }
LABEL_167:
  *(_DWORD *)(a2 + 152) = *(_QWORD *)(a1 + 584);
  if ((v16 & 0x400) == 0)
  {
LABEL_93:
    if ((v16 & 0x800) == 0)
      goto LABEL_94;
    goto LABEL_169;
  }
LABEL_168:
  *(_DWORD *)(a2 + 156) = *(_QWORD *)(a1 + 592);
  if ((v16 & 0x800) == 0)
  {
LABEL_94:
    if ((v16 & 0x1000) == 0)
      goto LABEL_95;
    goto LABEL_170;
  }
LABEL_169:
  *(_DWORD *)(a2 + 160) = *(_QWORD *)(a1 + 600);
  if ((v16 & 0x1000) == 0)
  {
LABEL_95:
    if ((v16 & 0x2000) == 0)
      goto LABEL_96;
    goto LABEL_171;
  }
LABEL_170:
  *(_DWORD *)(a2 + 164) = *(_QWORD *)(a1 + 608);
  if ((v16 & 0x2000) == 0)
  {
LABEL_96:
    if ((v16 & 0x4000) == 0)
      goto LABEL_98;
    goto LABEL_97;
  }
LABEL_171:
  *(_DWORD *)(a2 + 168) = *(_QWORD *)(a1 + 616);
  if ((v16 & 0x4000) != 0)
LABEL_97:
    *(_DWORD *)(a2 + 172) = *(_QWORD *)(a1 + 624);
LABEL_98:
  v17 = v2 & 1;
  if ((v16 & 0x8000) != 0)
    *(_DWORD *)(a2 + 176) = *(_QWORD *)(a1 + 632);
  v18 = v3 & 2;
  v19 = v3 & 4;
  v20 = v3 & 8;
  v21 = v3 & 0x10;
  v22 = v3 & 0x20;
  v23 = v3 & 0x40;
  v24 = v4 & 0x80;
  v25 = v4 & 0x100;
  v44 = v8 & 0x800000;
  v45 = v8 & 0x1000000;
  v46 = v8 & 0x2000000;
  v47 = v8 & 0x4000000;
  v48 = v8 & 0x8000000;
  v49 = v8 & 0x10000000;
  v33 = v8 & 0x20000000;
  v50 = v11 & 0x4000000000;
  v51 = v11 & 0x8000000000;
  v52 = v11 & 0x10000000000;
  v53 = v11 & 0x20000000000;
  v54 = v11 & 0x40000000000;
  v55 = v11 & 0x80000000000;
  v56 = v11 & 0x100000000000;
  if ((v16 & 0x10000) != 0)
    *(_BYTE *)(a2 + 180) = *(_QWORD *)(a1 + 640) != 0;
  v26 = v5 & 0x200;
  v32 = (unsigned __int16)v6 & 0x8000;
  v31 = v5 & 0x4000;
  v30 = v5 & 0x2000;
  v29 = v5 & 0x1000;
  v28 = v5 & 0x800;
  v27 = v5 & 0x400;
  v37 = v6 & 0x10000;
  v38 = v6 & 0x20000;
  v39 = v6 & 0x40000;
  v40 = v6 & 0x80000;
  v41 = v6 & 0x100000;
  v42 = v77 & 0x200000;
  v43 = v77 & 0x400000;
  v34 = BYTE4(v9) & 1;
  v35 = (v18 >> 1)
      + v17
      + (v19 >> 2)
      + (v20 >> 3)
      + (v21 >> 4)
      + (v22 >> 5)
      + (v23 >> 6)
      + (v24 >> 7)
      + (v25 >> 8)
      + (v26 >> 9)
      + (v27 >> 10)
      + (v28 >> 11)
      + (v29 >> 12)
      + (v30 >> 13)
      + (v31 >> 14)
      + (v32 >> 15)
      + (v37 >> 16)
      + (v38 >> 17)
      + (v39 >> 18)
      + (v40 >> 19)
      + (v41 >> 20)
      + (v42 >> 21)
      + (v43 >> 22)
      + (v44 >> 23)
      + (v45 >> 24)
      + (v46 >> 25)
      + (v47 >> 26)
      + (v48 >> 27)
      + (v49 >> 28)
      + (v33 >> 29)
      + ((v9 & 0x40000000) >> 30)
      + (v9 >> 31)
      + v34
      + ((v9 & 0x200000000) >> 33)
      + ((v9 & 0x400000000) >> 34)
      + ((v9 & 0x800000000) >> 35)
      + ((v10 & 0x1000000000) >> 36)
      + ((v10 & 0x2000000000) >> 37)
      + (v50 >> 38)
      + (v51 >> 39)
      + (v52 >> 40)
      + (v53 >> 41)
      + (v54 >> 42);
  v57 = v12 & 0x200000000000;
  v58 = v12 & 0x400000000000;
  v59 = v12 & 0x800000000000;
  v60 = v12 & 0x1000000000000;
  v61 = v12 & 0x2000000000000;
  v62 = v12 & 0x4000000000000;
  v63 = v13 & 0x8000000000000;
  v64 = v13 & 0x10000000000000;
  v65 = v14 & 0x20000000000000;
  v66 = v14 & 0x80000000000000;
  v67 = v14 & 0x40000000000000;
  v68 = v14 & 0x100000000000000;
  v69 = v14 & 0x200000000000000;
  v70 = v14 & 0x400000000000000;
  v71 = v14 & 0x800000000000000;
  v72 = v14 & 0x1000000000000000;
  v73 = v14 & 0x2000000000000000;
  v74 = v14 & 0x4000000000000000;
  v75 = v16 & 0x20;
  v76 = v15 & 1;
  return v35
       + (v55 >> 43)
       + (v56 >> 44)
       + (v57 >> 45)
       + (v58 >> 46)
       + (v59 >> 47)
       + HIWORD(v60)
       + (v61 >> 49)
       + (v62 >> 50)
       + (v63 >> 51)
       + (v64 >> 52)
       + (v14 >> 63)
       + (v65 >> 53)
       + (v67 >> 54)
       + (v66 >> 55)
       + HIBYTE(v68)
       + (v69 >> 57)
       + (v70 >> 58)
       + (v71 >> 59)
       + (v72 >> 60)
       + (v73 >> 61)
       + (v74 >> 62)
       + v76
       + ((unint64_t)(v15 & 2) >> 1)
       + ((unint64_t)(v15 & 4) >> 2)
       + ((unint64_t)(v15 & 8) >> 3)
       + ((unint64_t)(v15 & 0x10) >> 4)
       + (v75 >> 5)
       + ((unint64_t)(v16 & 0x40) >> 6)
       + ((unint64_t)(v16 & 0x80) >> 7)
       + ((unint64_t)(v16 & 0x100) >> 8)
       + ((unint64_t)(v16 & 0x200) >> 9)
       + ((unint64_t)(v16 & 0x400) >> 10)
       + ((unint64_t)(v16 & 0x800) >> 11)
       + ((unint64_t)(v16 & 0x1000) >> 12)
       + ((unint64_t)(v16 & 0x2000) >> 13)
       + ((unint64_t)(v16 & 0x4000) >> 14)
       + ((unint64_t)((unsigned __int16)v16 & 0x8000) >> 15)
       + ((v16 & 0x10000uLL) >> 16);
}

unint64_t sub_1C4D4E6E0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  int v77;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_105;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_106;
  }
LABEL_105:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_107;
  }
LABEL_106:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_107:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_111;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_112;
  }
LABEL_111:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_113;
  }
LABEL_112:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_113:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_BYTE *)(a2 + 24) = *(_QWORD *)(a1 + 104) != 0;
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_117;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_118;
  }
LABEL_117:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_119;
  }
LABEL_118:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_119:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_123;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_124;
  }
LABEL_123:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_125;
  }
LABEL_124:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_125:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) != 0)
LABEL_36:
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
LABEL_37:
  v77 = v7;
  if ((v8 & 0x10000000) != 0)
    *(_BYTE *)(a2 + 53) = *(_QWORD *)(a1 + 224) != 0;
  v9 = v8;
  if ((v8 & 0x20000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 232) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x40000000) == 0)
    {
LABEL_41:
      if ((v9 & 0x80000000) == 0)
        goto LABEL_42;
      goto LABEL_129;
    }
  }
  else if ((v8 & 0x40000000) == 0)
  {
    goto LABEL_41;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 240);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_43;
    goto LABEL_130;
  }
LABEL_129:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_44;
    goto LABEL_131;
  }
LABEL_130:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 256) & 0x1FF;
  if ((v9 & 0x200000000) == 0)
  {
LABEL_44:
    if ((v9 & 0x400000000) == 0)
      goto LABEL_46;
    goto LABEL_45;
  }
LABEL_131:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 264) & 0x1FFFF;
  if ((v9 & 0x400000000) != 0)
LABEL_45:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 272) & 0x1FFF;
LABEL_46:
  v10 = v9;
  if ((v9 & 0x800000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 280) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x1000000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 288);
  v11 = v10;
  if ((v10 & 0x2000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 296) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x4000000000) == 0)
    {
LABEL_52:
      if ((v11 & 0x8000000000) == 0)
        goto LABEL_53;
      goto LABEL_135;
    }
  }
  else if ((v10 & 0x4000000000) == 0)
  {
    goto LABEL_52;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_54;
    goto LABEL_136;
  }
LABEL_135:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 312);
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_55;
    goto LABEL_137;
  }
LABEL_136:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 320) != 0;
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_56;
    goto LABEL_138;
  }
LABEL_137:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 328);
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_58;
    goto LABEL_57;
  }
LABEL_138:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 336) != 0;
  if ((v11 & 0x80000000000) != 0)
LABEL_57:
    *(_BYTE *)(a2 + 84) = *(_QWORD *)(a1 + 344) != 0;
LABEL_58:
  v12 = v11;
  if ((v11 & 0x100000000000) != 0)
  {
    *(_BYTE *)(a2 + 88) = *(_BYTE *)(a1 + 352) & 1;
    v12 = *(_QWORD *)(a1 + 1248);
    if ((v12 & 0x200000000000) == 0)
    {
LABEL_60:
      if ((v12 & 0x400000000000) == 0)
        goto LABEL_61;
      goto LABEL_142;
    }
  }
  else if ((v11 & 0x200000000000) == 0)
  {
    goto LABEL_60;
  }
  *(_WORD *)(a2 + 88) = *(_QWORD *)(a1 + 360);
  if ((v12 & 0x400000000000) == 0)
  {
LABEL_61:
    if ((v12 & 0x800000000000) == 0)
      goto LABEL_62;
    goto LABEL_143;
  }
LABEL_142:
  *(_WORD *)(a2 + 88) = *(_WORD *)(a1 + 368) & 0x1FF;
  if ((v12 & 0x800000000000) == 0)
  {
LABEL_62:
    if ((v12 & 0x1000000000000) == 0)
      goto LABEL_63;
    goto LABEL_144;
  }
LABEL_143:
  *(_WORD *)(a2 + 88) = *(_WORD *)(a1 + 376) & 0x1FF;
  if ((v12 & 0x1000000000000) == 0)
  {
LABEL_63:
    if ((v12 & 0x2000000000000) == 0)
      goto LABEL_65;
    goto LABEL_64;
  }
LABEL_144:
  *(_DWORD *)(a2 + 88) = *(_DWORD *)(a1 + 384) & 0x1FFFF;
  if ((v12 & 0x2000000000000) != 0)
LABEL_64:
    *(_WORD *)(a2 + 88) = *(_WORD *)(a1 + 392) & 0x1FFF;
LABEL_65:
  v13 = v12;
  if ((v12 & 0x4000000000000) != 0)
  {
    *(_BYTE *)(a2 + 88) = *(_BYTE *)(a1 + 400) & 0x7F;
    v13 = *(_QWORD *)(a1 + 1248);
  }
  if ((v13 & 0x8000000000000) != 0)
    *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 408);
  v14 = v13;
  if ((v13 & 0x10000000000000) != 0)
  {
    *(_BYTE *)(a2 + 92) = *(_BYTE *)(a1 + 416) & 0xF;
    v14 = *(_QWORD *)(a1 + 1248);
    if ((v14 & 0x20000000000000) == 0)
    {
LABEL_71:
      if ((v14 & 0x40000000000000) == 0)
        goto LABEL_72;
      goto LABEL_148;
    }
  }
  else if ((v13 & 0x20000000000000) == 0)
  {
    goto LABEL_71;
  }
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 424);
  if ((v14 & 0x40000000000000) == 0)
  {
LABEL_72:
    if ((v14 & 0x80000000000000) == 0)
      goto LABEL_73;
    goto LABEL_149;
  }
LABEL_148:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 432);
  if ((v14 & 0x80000000000000) == 0)
  {
LABEL_73:
    if ((v14 & 0x100000000000000) == 0)
      goto LABEL_74;
    goto LABEL_150;
  }
LABEL_149:
  *(_BYTE *)(a2 + 104) = *(_QWORD *)(a1 + 440) != 0;
  if ((v14 & 0x100000000000000) == 0)
  {
LABEL_74:
    if ((v14 & 0x200000000000000) == 0)
      goto LABEL_75;
    goto LABEL_151;
  }
LABEL_150:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 448);
  if ((v14 & 0x200000000000000) == 0)
  {
LABEL_75:
    if ((v14 & 0x400000000000000) == 0)
      goto LABEL_76;
    goto LABEL_152;
  }
LABEL_151:
  *(_BYTE *)(a2 + 112) = *(_QWORD *)(a1 + 456) != 0;
  if ((v14 & 0x400000000000000) == 0)
  {
LABEL_76:
    if ((v14 & 0x800000000000000) == 0)
      goto LABEL_77;
    goto LABEL_153;
  }
LABEL_152:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 464);
  if ((v14 & 0x800000000000000) == 0)
  {
LABEL_77:
    if ((v14 & 0x1000000000000000) == 0)
      goto LABEL_78;
    goto LABEL_154;
  }
LABEL_153:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 472);
  if ((v14 & 0x1000000000000000) == 0)
  {
LABEL_78:
    if ((v14 & 0x2000000000000000) == 0)
      goto LABEL_79;
    goto LABEL_155;
  }
LABEL_154:
  *(_BYTE *)(a2 + 124) = *(_QWORD *)(a1 + 480) != 0;
  if ((v14 & 0x2000000000000000) == 0)
  {
LABEL_79:
    if ((v14 & 0x4000000000000000) == 0)
      goto LABEL_80;
LABEL_156:
    *(_BYTE *)(a2 + 126) = *(_QWORD *)(a1 + 496) != 0;
    if ((v14 & 0x8000000000000000) == 0)
      goto LABEL_81;
    goto LABEL_157;
  }
LABEL_155:
  *(_BYTE *)(a2 + 125) = *(_QWORD *)(a1 + 488) != 0;
  if ((v14 & 0x4000000000000000) != 0)
    goto LABEL_156;
LABEL_80:
  if ((v14 & 0x8000000000000000) == 0)
    goto LABEL_81;
LABEL_157:
  *(_BYTE *)(a2 + 127) = *(_QWORD *)(a1 + 504) != 0;
LABEL_81:
  v15 = *(_QWORD *)(a1 + 1256);
  if ((v15 & 1) != 0)
  {
    *(_BYTE *)(a2 + 128) = *(_QWORD *)(a1 + 512) != 0;
    if ((v15 & 2) == 0)
    {
LABEL_83:
      if ((v15 & 4) == 0)
        goto LABEL_84;
      goto LABEL_160;
    }
  }
  else if ((v15 & 2) == 0)
  {
    goto LABEL_83;
  }
  *(_BYTE *)(a2 + 129) = *(_QWORD *)(a1 + 520) != 0;
  if ((v15 & 4) == 0)
  {
LABEL_84:
    if ((v15 & 8) == 0)
      goto LABEL_86;
    goto LABEL_85;
  }
LABEL_160:
  *(_BYTE *)(a2 + 130) = *(_QWORD *)(a1 + 528) != 0;
  if ((v15 & 8) != 0)
LABEL_85:
    *(_BYTE *)(a2 + 131) = *(_QWORD *)(a1 + 536) != 0;
LABEL_86:
  LODWORD(v16) = v15;
  if ((v15 & 0x10) != 0)
  {
    *(_BYTE *)(a2 + 132) = *(_BYTE *)(a1 + 544) & 0xF;
    v16 = *(_QWORD *)(a1 + 1256);
    if ((v16 & 0x20) == 0)
    {
LABEL_88:
      if ((v16 & 0x40) == 0)
        goto LABEL_89;
      goto LABEL_164;
    }
  }
  else if ((v15 & 0x20) == 0)
  {
    goto LABEL_88;
  }
  *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 552);
  if ((v16 & 0x40) == 0)
  {
LABEL_89:
    if ((v16 & 0x80) == 0)
      goto LABEL_90;
    goto LABEL_165;
  }
LABEL_164:
  *(_WORD *)(a2 + 140) = *(_QWORD *)(a1 + 560);
  if ((v16 & 0x80) == 0)
  {
LABEL_90:
    if ((v16 & 0x100) == 0)
      goto LABEL_91;
    goto LABEL_166;
  }
LABEL_165:
  *(_DWORD *)(a2 + 144) = *(_QWORD *)(a1 + 568);
  if ((v16 & 0x100) == 0)
  {
LABEL_91:
    if ((v16 & 0x200) == 0)
      goto LABEL_92;
    goto LABEL_167;
  }
LABEL_166:
  *(_DWORD *)(a2 + 148) = *(_QWORD *)(a1 + 576);
  if ((v16 & 0x200) == 0)
  {
LABEL_92:
    if ((v16 & 0x400) == 0)
      goto LABEL_93;
    goto LABEL_168;
  }
LABEL_167:
  *(_DWORD *)(a2 + 152) = *(_QWORD *)(a1 + 584);
  if ((v16 & 0x400) == 0)
  {
LABEL_93:
    if ((v16 & 0x800) == 0)
      goto LABEL_94;
    goto LABEL_169;
  }
LABEL_168:
  *(_DWORD *)(a2 + 156) = *(_QWORD *)(a1 + 592);
  if ((v16 & 0x800) == 0)
  {
LABEL_94:
    if ((v16 & 0x1000) == 0)
      goto LABEL_95;
    goto LABEL_170;
  }
LABEL_169:
  *(_DWORD *)(a2 + 160) = *(_QWORD *)(a1 + 600);
  if ((v16 & 0x1000) == 0)
  {
LABEL_95:
    if ((v16 & 0x2000) == 0)
      goto LABEL_96;
    goto LABEL_171;
  }
LABEL_170:
  *(_DWORD *)(a2 + 164) = *(_QWORD *)(a1 + 608);
  if ((v16 & 0x2000) == 0)
  {
LABEL_96:
    if ((v16 & 0x4000) == 0)
      goto LABEL_98;
    goto LABEL_97;
  }
LABEL_171:
  *(_DWORD *)(a2 + 168) = *(_QWORD *)(a1 + 616);
  if ((v16 & 0x4000) != 0)
LABEL_97:
    *(_DWORD *)(a2 + 172) = *(_QWORD *)(a1 + 624);
LABEL_98:
  v17 = v2 & 1;
  if ((v16 & 0x8000) != 0)
    *(_DWORD *)(a2 + 176) = *(_QWORD *)(a1 + 632);
  v18 = v3 & 2;
  v19 = v3 & 4;
  v20 = v3 & 8;
  v21 = v3 & 0x10;
  v22 = v3 & 0x20;
  v23 = v3 & 0x40;
  v24 = v4 & 0x80;
  v25 = v4 & 0x100;
  v44 = v8 & 0x800000;
  v45 = v8 & 0x1000000;
  v46 = v8 & 0x2000000;
  v47 = v8 & 0x4000000;
  v48 = v8 & 0x8000000;
  v49 = v8 & 0x10000000;
  v33 = v8 & 0x20000000;
  v50 = v11 & 0x4000000000;
  v51 = v11 & 0x8000000000;
  v52 = v11 & 0x10000000000;
  v53 = v11 & 0x20000000000;
  v54 = v11 & 0x40000000000;
  v55 = v11 & 0x80000000000;
  v56 = v11 & 0x100000000000;
  if ((v16 & 0x10000) != 0)
    *(_BYTE *)(a2 + 180) = *(_QWORD *)(a1 + 640) != 0;
  v26 = v5 & 0x200;
  v32 = (unsigned __int16)v6 & 0x8000;
  v31 = v5 & 0x4000;
  v30 = v5 & 0x2000;
  v29 = v5 & 0x1000;
  v28 = v5 & 0x800;
  v27 = v5 & 0x400;
  v37 = v6 & 0x10000;
  v38 = v6 & 0x20000;
  v39 = v6 & 0x40000;
  v40 = v6 & 0x80000;
  v41 = v6 & 0x100000;
  v42 = v77 & 0x200000;
  v43 = v77 & 0x400000;
  v34 = BYTE4(v9) & 1;
  v35 = (v18 >> 1)
      + v17
      + (v19 >> 2)
      + (v20 >> 3)
      + (v21 >> 4)
      + (v22 >> 5)
      + (v23 >> 6)
      + (v24 >> 7)
      + (v25 >> 8)
      + (v26 >> 9)
      + (v27 >> 10)
      + (v28 >> 11)
      + (v29 >> 12)
      + (v30 >> 13)
      + (v31 >> 14)
      + (v32 >> 15)
      + (v37 >> 16)
      + (v38 >> 17)
      + (v39 >> 18)
      + (v40 >> 19)
      + (v41 >> 20)
      + (v42 >> 21)
      + (v43 >> 22)
      + (v44 >> 23)
      + (v45 >> 24)
      + (v46 >> 25)
      + (v47 >> 26)
      + (v48 >> 27)
      + (v49 >> 28)
      + (v33 >> 29)
      + ((v9 & 0x40000000) >> 30)
      + (v9 >> 31)
      + v34
      + ((v9 & 0x200000000) >> 33)
      + ((v9 & 0x400000000) >> 34)
      + ((v9 & 0x800000000) >> 35)
      + ((v10 & 0x1000000000) >> 36)
      + ((v10 & 0x2000000000) >> 37)
      + (v50 >> 38)
      + (v51 >> 39)
      + (v52 >> 40)
      + (v53 >> 41)
      + (v54 >> 42);
  v57 = v12 & 0x200000000000;
  v58 = v12 & 0x400000000000;
  v59 = v12 & 0x800000000000;
  v60 = v12 & 0x1000000000000;
  v61 = v12 & 0x2000000000000;
  v62 = v12 & 0x4000000000000;
  v63 = v13 & 0x8000000000000;
  v64 = v13 & 0x10000000000000;
  v65 = v14 & 0x20000000000000;
  v66 = v14 & 0x80000000000000;
  v67 = v14 & 0x40000000000000;
  v68 = v14 & 0x100000000000000;
  v69 = v14 & 0x200000000000000;
  v70 = v14 & 0x400000000000000;
  v71 = v14 & 0x800000000000000;
  v72 = v14 & 0x1000000000000000;
  v73 = v14 & 0x2000000000000000;
  v74 = v14 & 0x4000000000000000;
  v75 = v16 & 0x20;
  v76 = v15 & 1;
  return v35
       + (v55 >> 43)
       + (v56 >> 44)
       + (v57 >> 45)
       + (v58 >> 46)
       + (v59 >> 47)
       + HIWORD(v60)
       + (v61 >> 49)
       + (v62 >> 50)
       + (v63 >> 51)
       + (v64 >> 52)
       + (v14 >> 63)
       + (v65 >> 53)
       + (v67 >> 54)
       + (v66 >> 55)
       + HIBYTE(v68)
       + (v69 >> 57)
       + (v70 >> 58)
       + (v71 >> 59)
       + (v72 >> 60)
       + (v73 >> 61)
       + (v74 >> 62)
       + v76
       + ((unint64_t)(v15 & 2) >> 1)
       + ((unint64_t)(v15 & 4) >> 2)
       + ((unint64_t)(v15 & 8) >> 3)
       + ((unint64_t)(v15 & 0x10) >> 4)
       + (v75 >> 5)
       + ((unint64_t)(v16 & 0x40) >> 6)
       + ((unint64_t)(v16 & 0x80) >> 7)
       + ((unint64_t)(v16 & 0x100) >> 8)
       + ((unint64_t)(v16 & 0x200) >> 9)
       + ((unint64_t)(v16 & 0x400) >> 10)
       + ((unint64_t)(v16 & 0x800) >> 11)
       + ((unint64_t)(v16 & 0x1000) >> 12)
       + ((unint64_t)(v16 & 0x2000) >> 13)
       + ((unint64_t)(v16 & 0x4000) >> 14)
       + ((unint64_t)((unsigned __int16)v16 & 0x8000) >> 15)
       + ((v16 & 0x10000uLL) >> 16);
}

unint64_t sub_1C4D4F2E8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int v72;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_103;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_104;
  }
LABEL_103:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_105;
  }
LABEL_104:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_105:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_109;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_110;
  }
LABEL_109:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_111;
  }
LABEL_110:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_111:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_BYTE *)(a2 + 24) = *(_QWORD *)(a1 + 104) != 0;
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_115;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_116;
  }
LABEL_115:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_117;
  }
LABEL_116:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_117:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_121;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_122;
  }
LABEL_121:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_124;
  }
LABEL_123:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_38;
    goto LABEL_37;
  }
LABEL_124:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) != 0)
LABEL_37:
    *(_BYTE *)(a2 + 53) = *(_QWORD *)(a1 + 224) != 0;
LABEL_38:
  v9 = v8;
  if ((v8 & 0x20000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 232) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x40000000) == 0)
    {
LABEL_40:
      if ((v9 & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_128;
    }
  }
  else if ((v8 & 0x40000000) == 0)
  {
    goto LABEL_40;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 240);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_129;
  }
LABEL_128:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_43;
    goto LABEL_130;
  }
LABEL_129:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 256) & 0x1FF;
  if ((v9 & 0x200000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x400000000) == 0)
      goto LABEL_45;
    goto LABEL_44;
  }
LABEL_130:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 264) & 0x1FFFF;
  if ((v9 & 0x400000000) != 0)
LABEL_44:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 272) & 0x1FFF;
LABEL_45:
  v10 = v9;
  if ((v9 & 0x800000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 280) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x1000000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 288);
  v11 = v10;
  if ((v10 & 0x2000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 296) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x4000000000) == 0)
    {
LABEL_51:
      if ((v11 & 0x8000000000) == 0)
        goto LABEL_52;
      goto LABEL_134;
    }
  }
  else if ((v10 & 0x4000000000) == 0)
  {
    goto LABEL_51;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_135;
  }
LABEL_134:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 312);
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_136;
  }
LABEL_135:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 320) != 0;
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_137;
  }
LABEL_136:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 328);
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_57;
    goto LABEL_56;
  }
LABEL_137:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 336) != 0;
  if ((v11 & 0x80000000000) != 0)
LABEL_56:
    *(_BYTE *)(a2 + 84) = *(_QWORD *)(a1 + 344) != 0;
LABEL_57:
  v12 = v11;
  if ((v11 & 0x100000000000) != 0)
  {
    *(_BYTE *)(a2 + 88) = *(_BYTE *)(a1 + 352) & 1;
    v12 = *(_QWORD *)(a1 + 1248);
    if ((v12 & 0x200000000000) == 0)
    {
LABEL_59:
      if ((v12 & 0x400000000000) == 0)
        goto LABEL_60;
      goto LABEL_141;
    }
  }
  else if ((v11 & 0x200000000000) == 0)
  {
    goto LABEL_59;
  }
  *(_WORD *)(a2 + 88) = *(_QWORD *)(a1 + 360);
  if ((v12 & 0x400000000000) == 0)
  {
LABEL_60:
    if ((v12 & 0x800000000000) == 0)
      goto LABEL_61;
    goto LABEL_142;
  }
LABEL_141:
  *(_WORD *)(a2 + 88) = *(_WORD *)(a1 + 368) & 0x1FF;
  if ((v12 & 0x800000000000) == 0)
  {
LABEL_61:
    if ((v12 & 0x1000000000000) == 0)
      goto LABEL_62;
    goto LABEL_143;
  }
LABEL_142:
  *(_WORD *)(a2 + 88) = *(_WORD *)(a1 + 376) & 0x1FF;
  if ((v12 & 0x1000000000000) == 0)
  {
LABEL_62:
    if ((v12 & 0x2000000000000) == 0)
      goto LABEL_64;
    goto LABEL_63;
  }
LABEL_143:
  *(_DWORD *)(a2 + 88) = *(_DWORD *)(a1 + 384) & 0x1FFFF;
  if ((v12 & 0x2000000000000) != 0)
LABEL_63:
    *(_WORD *)(a2 + 88) = *(_WORD *)(a1 + 392) & 0x1FFF;
LABEL_64:
  v13 = v12;
  if ((v12 & 0x4000000000000) != 0)
  {
    *(_BYTE *)(a2 + 88) = *(_BYTE *)(a1 + 400) & 0x7F;
    v13 = *(_QWORD *)(a1 + 1248);
  }
  if ((v13 & 0x8000000000000) != 0)
    *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 408);
  v14 = v13;
  if ((v13 & 0x10000000000000) != 0)
  {
    *(_BYTE *)(a2 + 92) = *(_BYTE *)(a1 + 416) & 0xF;
    v14 = *(_QWORD *)(a1 + 1248);
    if ((v14 & 0x20000000000000) == 0)
    {
LABEL_70:
      if ((v14 & 0x40000000000000) == 0)
        goto LABEL_71;
      goto LABEL_147;
    }
  }
  else if ((v13 & 0x20000000000000) == 0)
  {
    goto LABEL_70;
  }
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 424);
  if ((v14 & 0x40000000000000) == 0)
  {
LABEL_71:
    if ((v14 & 0x80000000000000) == 0)
      goto LABEL_72;
    goto LABEL_148;
  }
LABEL_147:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 432);
  if ((v14 & 0x80000000000000) == 0)
  {
LABEL_72:
    if ((v14 & 0x100000000000000) == 0)
      goto LABEL_73;
    goto LABEL_149;
  }
LABEL_148:
  *(_BYTE *)(a2 + 104) = *(_QWORD *)(a1 + 440) != 0;
  if ((v14 & 0x100000000000000) == 0)
  {
LABEL_73:
    if ((v14 & 0x200000000000000) == 0)
      goto LABEL_74;
    goto LABEL_150;
  }
LABEL_149:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 448);
  if ((v14 & 0x200000000000000) == 0)
  {
LABEL_74:
    if ((v14 & 0x400000000000000) == 0)
      goto LABEL_75;
    goto LABEL_151;
  }
LABEL_150:
  *(_BYTE *)(a2 + 112) = *(_QWORD *)(a1 + 456) != 0;
  if ((v14 & 0x400000000000000) == 0)
  {
LABEL_75:
    if ((v14 & 0x800000000000000) == 0)
      goto LABEL_76;
    goto LABEL_152;
  }
LABEL_151:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 464);
  if ((v14 & 0x800000000000000) == 0)
  {
LABEL_76:
    if ((v14 & 0x1000000000000000) == 0)
      goto LABEL_77;
    goto LABEL_153;
  }
LABEL_152:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 472);
  if ((v14 & 0x1000000000000000) == 0)
  {
LABEL_77:
    if ((v14 & 0x2000000000000000) == 0)
      goto LABEL_78;
    goto LABEL_154;
  }
LABEL_153:
  *(_BYTE *)(a2 + 124) = *(_QWORD *)(a1 + 480) != 0;
  if ((v14 & 0x2000000000000000) == 0)
  {
LABEL_78:
    if ((v14 & 0x4000000000000000) == 0)
      goto LABEL_79;
LABEL_155:
    *(_BYTE *)(a2 + 126) = *(_QWORD *)(a1 + 496) != 0;
    if ((v14 & 0x8000000000000000) == 0)
      goto LABEL_80;
    goto LABEL_156;
  }
LABEL_154:
  *(_BYTE *)(a2 + 125) = *(_QWORD *)(a1 + 488) != 0;
  if ((v14 & 0x4000000000000000) != 0)
    goto LABEL_155;
LABEL_79:
  if ((v14 & 0x8000000000000000) == 0)
    goto LABEL_80;
LABEL_156:
  *(_BYTE *)(a2 + 127) = *(_QWORD *)(a1 + 504) != 0;
LABEL_80:
  v15 = *(_QWORD *)(a1 + 1256);
  if ((v15 & 1) != 0)
  {
    *(_BYTE *)(a2 + 128) = *(_QWORD *)(a1 + 512) != 0;
    if ((v15 & 2) == 0)
    {
LABEL_82:
      if ((v15 & 4) == 0)
        goto LABEL_83;
      goto LABEL_159;
    }
  }
  else if ((v15 & 2) == 0)
  {
    goto LABEL_82;
  }
  *(_BYTE *)(a2 + 129) = *(_QWORD *)(a1 + 520) != 0;
  if ((v15 & 4) == 0)
  {
LABEL_83:
    if ((v15 & 8) == 0)
      goto LABEL_85;
    goto LABEL_84;
  }
LABEL_159:
  *(_BYTE *)(a2 + 130) = *(_QWORD *)(a1 + 528) != 0;
  if ((v15 & 8) != 0)
LABEL_84:
    *(_BYTE *)(a2 + 131) = *(_QWORD *)(a1 + 536) != 0;
LABEL_85:
  LOWORD(v16) = v15;
  if ((v15 & 0x10) != 0)
  {
    *(_BYTE *)(a2 + 132) = *(_BYTE *)(a1 + 544) & 0xF;
    v16 = *(_QWORD *)(a1 + 1256);
    if ((v16 & 0x20) == 0)
    {
LABEL_87:
      if ((v16 & 0x40) == 0)
        goto LABEL_88;
      goto LABEL_163;
    }
  }
  else if ((v15 & 0x20) == 0)
  {
    goto LABEL_87;
  }
  *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 552);
  if ((v16 & 0x40) == 0)
  {
LABEL_88:
    if ((v16 & 0x80) == 0)
      goto LABEL_89;
    goto LABEL_164;
  }
LABEL_163:
  *(_WORD *)(a2 + 140) = *(_QWORD *)(a1 + 560);
  if ((v16 & 0x80) == 0)
  {
LABEL_89:
    if ((v16 & 0x100) == 0)
      goto LABEL_90;
    goto LABEL_165;
  }
LABEL_164:
  *(_DWORD *)(a2 + 144) = *(_QWORD *)(a1 + 568);
  if ((v16 & 0x100) == 0)
  {
LABEL_90:
    if ((v16 & 0x200) == 0)
      goto LABEL_91;
    goto LABEL_166;
  }
LABEL_165:
  *(_DWORD *)(a2 + 148) = *(_QWORD *)(a1 + 576);
  if ((v16 & 0x200) == 0)
  {
LABEL_91:
    if ((v16 & 0x400) == 0)
      goto LABEL_92;
    goto LABEL_167;
  }
LABEL_166:
  *(_DWORD *)(a2 + 152) = *(_QWORD *)(a1 + 584);
  if ((v16 & 0x400) == 0)
  {
LABEL_92:
    if ((v16 & 0x800) == 0)
      goto LABEL_93;
    goto LABEL_168;
  }
LABEL_167:
  *(_DWORD *)(a2 + 156) = *(_QWORD *)(a1 + 592);
  if ((v16 & 0x800) == 0)
  {
LABEL_93:
    if ((v16 & 0x1000) == 0)
      goto LABEL_94;
    goto LABEL_169;
  }
LABEL_168:
  *(_DWORD *)(a2 + 160) = *(_QWORD *)(a1 + 600);
  if ((v16 & 0x1000) == 0)
  {
LABEL_94:
    if ((v16 & 0x2000) == 0)
      goto LABEL_96;
    goto LABEL_95;
  }
LABEL_169:
  *(_DWORD *)(a2 + 164) = *(_QWORD *)(a1 + 608);
  if ((v16 & 0x2000) != 0)
LABEL_95:
    *(_DWORD *)(a2 + 168) = *(_QWORD *)(a1 + 616);
LABEL_96:
  v17 = v2 & 1;
  if ((v16 & 0x4000) != 0)
    *(_DWORD *)(a2 + 172) = *(_QWORD *)(a1 + 624);
  v18 = v3 & 2;
  v19 = v3 & 4;
  v20 = v3 & 8;
  v21 = v3 & 0x10;
  v22 = v3 & 0x20;
  v23 = v3 & 0x40;
  v24 = v4 & 0x80;
  v25 = v4 & 0x100;
  v44 = v8 & 0x800000;
  v45 = v8 & 0x1000000;
  v46 = v8 & 0x2000000;
  v47 = v8 & 0x4000000;
  v48 = v8 & 0x8000000;
  v49 = v8 & 0x10000000;
  v32 = v8 & 0x20000000;
  v50 = v11 & 0x4000000000;
  v51 = v11 & 0x8000000000;
  v52 = v11 & 0x10000000000;
  v53 = v11 & 0x20000000000;
  v54 = v11 & 0x40000000000;
  v55 = v11 & 0x80000000000;
  v56 = v11 & 0x100000000000;
  if ((v16 & 0x8000) != 0)
    *(_BYTE *)(a2 + 176) = *(_QWORD *)(a1 + 632) != 0;
  v28 = v5 & 0x800;
  v31 = v5 & 0x4000;
  v30 = v5 & 0x2000;
  v29 = v5 & 0x1000;
  v27 = v5 & 0x400;
  v26 = v5 & 0x200;
  v36 = (unsigned __int16)v6 & 0x8000;
  v37 = v6 & 0x10000;
  v38 = v6 & 0x20000;
  v39 = v6 & 0x40000;
  v40 = v6 & 0x80000;
  v41 = v6 & 0x100000;
  v42 = v7 & 0x200000;
  v43 = v7 & 0x400000;
  v33 = BYTE4(v9) & 1;
  v34 = (v18 >> 1)
      + v17
      + (v19 >> 2)
      + (v20 >> 3)
      + (v21 >> 4)
      + (v22 >> 5)
      + (v23 >> 6)
      + (v24 >> 7)
      + (v25 >> 8)
      + (v26 >> 9)
      + (v27 >> 10)
      + (v28 >> 11)
      + (v29 >> 12)
      + (v30 >> 13)
      + (v31 >> 14)
      + (v36 >> 15)
      + (v37 >> 16)
      + (v38 >> 17)
      + (v39 >> 18)
      + (v40 >> 19)
      + (v41 >> 20)
      + (v42 >> 21)
      + (v43 >> 22)
      + (v44 >> 23)
      + (v45 >> 24)
      + (v46 >> 25)
      + (v47 >> 26)
      + (v48 >> 27)
      + (v49 >> 28)
      + (v32 >> 29)
      + ((v9 & 0x40000000) >> 30)
      + (v9 >> 31)
      + v33
      + ((v9 & 0x200000000) >> 33)
      + ((v9 & 0x400000000) >> 34)
      + ((v9 & 0x800000000) >> 35)
      + ((v10 & 0x1000000000) >> 36)
      + ((v10 & 0x2000000000) >> 37)
      + (v50 >> 38)
      + (v51 >> 39)
      + (v52 >> 40)
      + (v53 >> 41)
      + (v54 >> 42);
  v57 = v12 & 0x200000000000;
  v58 = v12 & 0x400000000000;
  v59 = v12 & 0x800000000000;
  v60 = v12 & 0x1000000000000;
  v61 = v12 & 0x2000000000000;
  v62 = v12 & 0x4000000000000;
  v63 = v13 & 0x8000000000000;
  v64 = v13 & 0x10000000000000;
  v65 = v14 & 0x20000000000000;
  v66 = v14 & 0x80000000000000;
  v67 = v14 & 0x40000000000000;
  v68 = v14 & 0x100000000000000;
  v69 = v14 & 0x200000000000000;
  v70 = v14 & 0x400000000000000;
  v71 = v14 & 0x800000000000000;
  v72 = v15 & 1;
  return v34
       + (v55 >> 43)
       + (v56 >> 44)
       + (v57 >> 45)
       + (v58 >> 46)
       + (v59 >> 47)
       + HIWORD(v60)
       + (v61 >> 49)
       + (v62 >> 50)
       + (v63 >> 51)
       + (v64 >> 52)
       + (v14 >> 63)
       + (v65 >> 53)
       + (v67 >> 54)
       + (v66 >> 55)
       + HIBYTE(v68)
       + (v69 >> 57)
       + (v70 >> 58)
       + (v71 >> 59)
       + ((v14 & 0x1000000000000000) >> 60)
       + ((v14 & 0x2000000000000000) >> 61)
       + ((v14 & 0x4000000000000000) >> 62)
       + v72
       + ((unint64_t)(v15 & 2) >> 1)
       + ((unint64_t)(v15 & 4) >> 2)
       + ((unint64_t)(v15 & 8) >> 3)
       + ((unint64_t)(v15 & 0x10) >> 4)
       + ((unint64_t)(v16 & 0x20) >> 5)
       + ((unint64_t)(v16 & 0x40) >> 6)
       + ((unint64_t)(v16 & 0x80) >> 7)
       + ((unint64_t)(v16 & 0x100) >> 8)
       + ((unint64_t)(v16 & 0x200) >> 9)
       + ((unint64_t)(v16 & 0x400) >> 10)
       + ((unint64_t)(v16 & 0x800) >> 11)
       + ((unint64_t)(v16 & 0x1000) >> 12)
       + ((unint64_t)(v16 & 0x2000) >> 13)
       + ((unint64_t)(v16 & 0x4000) >> 14)
       + ((unint64_t)((unsigned __int16)v16 & 0x8000) >> 15);
}

unint64_t sub_1C4D4FE98(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int v72;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_103;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_104;
  }
LABEL_103:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_105;
  }
LABEL_104:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_105:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_109;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_110;
  }
LABEL_109:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_111;
  }
LABEL_110:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_111:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_BYTE *)(a2 + 24) = *(_QWORD *)(a1 + 104) != 0;
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_115;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_116;
  }
LABEL_115:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_117;
  }
LABEL_116:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_117:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_121;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_122;
  }
LABEL_121:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_124;
  }
LABEL_123:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_38;
    goto LABEL_37;
  }
LABEL_124:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) != 0)
LABEL_37:
    *(_BYTE *)(a2 + 53) = *(_QWORD *)(a1 + 224) != 0;
LABEL_38:
  v9 = v8;
  if ((v8 & 0x20000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 232) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x40000000) == 0)
    {
LABEL_40:
      if ((v9 & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_128;
    }
  }
  else if ((v8 & 0x40000000) == 0)
  {
    goto LABEL_40;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 240);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_129;
  }
LABEL_128:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_43;
    goto LABEL_130;
  }
LABEL_129:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 256) & 0x1FF;
  if ((v9 & 0x200000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x400000000) == 0)
      goto LABEL_45;
    goto LABEL_44;
  }
LABEL_130:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 264) & 0x1FFFF;
  if ((v9 & 0x400000000) != 0)
LABEL_44:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 272) & 0x1FFF;
LABEL_45:
  v10 = v9;
  if ((v9 & 0x800000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 280) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x1000000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 288);
  v11 = v10;
  if ((v10 & 0x2000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 296) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x4000000000) == 0)
    {
LABEL_51:
      if ((v11 & 0x8000000000) == 0)
        goto LABEL_52;
      goto LABEL_134;
    }
  }
  else if ((v10 & 0x4000000000) == 0)
  {
    goto LABEL_51;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_135;
  }
LABEL_134:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 312);
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_136;
  }
LABEL_135:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 320) != 0;
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_137;
  }
LABEL_136:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 328);
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_57;
    goto LABEL_56;
  }
LABEL_137:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 336) != 0;
  if ((v11 & 0x80000000000) != 0)
LABEL_56:
    *(_BYTE *)(a2 + 84) = *(_QWORD *)(a1 + 344) != 0;
LABEL_57:
  v12 = v11;
  if ((v11 & 0x100000000000) != 0)
  {
    *(_BYTE *)(a2 + 88) = *(_BYTE *)(a1 + 352) & 1;
    v12 = *(_QWORD *)(a1 + 1248);
    if ((v12 & 0x200000000000) == 0)
    {
LABEL_59:
      if ((v12 & 0x400000000000) == 0)
        goto LABEL_60;
      goto LABEL_141;
    }
  }
  else if ((v11 & 0x200000000000) == 0)
  {
    goto LABEL_59;
  }
  *(_WORD *)(a2 + 88) = *(_QWORD *)(a1 + 360);
  if ((v12 & 0x400000000000) == 0)
  {
LABEL_60:
    if ((v12 & 0x800000000000) == 0)
      goto LABEL_61;
    goto LABEL_142;
  }
LABEL_141:
  *(_WORD *)(a2 + 88) = *(_WORD *)(a1 + 368) & 0x1FF;
  if ((v12 & 0x800000000000) == 0)
  {
LABEL_61:
    if ((v12 & 0x1000000000000) == 0)
      goto LABEL_62;
    goto LABEL_143;
  }
LABEL_142:
  *(_WORD *)(a2 + 88) = *(_WORD *)(a1 + 376) & 0x1FF;
  if ((v12 & 0x1000000000000) == 0)
  {
LABEL_62:
    if ((v12 & 0x2000000000000) == 0)
      goto LABEL_64;
    goto LABEL_63;
  }
LABEL_143:
  *(_DWORD *)(a2 + 88) = *(_DWORD *)(a1 + 384) & 0x1FFFF;
  if ((v12 & 0x2000000000000) != 0)
LABEL_63:
    *(_WORD *)(a2 + 88) = *(_WORD *)(a1 + 392) & 0x1FFF;
LABEL_64:
  v13 = v12;
  if ((v12 & 0x4000000000000) != 0)
  {
    *(_BYTE *)(a2 + 88) = *(_BYTE *)(a1 + 400) & 0x7F;
    v13 = *(_QWORD *)(a1 + 1248);
  }
  if ((v13 & 0x8000000000000) != 0)
    *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 408);
  v14 = v13;
  if ((v13 & 0x10000000000000) != 0)
  {
    *(_BYTE *)(a2 + 92) = *(_BYTE *)(a1 + 416) & 0xF;
    v14 = *(_QWORD *)(a1 + 1248);
    if ((v14 & 0x20000000000000) == 0)
    {
LABEL_70:
      if ((v14 & 0x40000000000000) == 0)
        goto LABEL_71;
      goto LABEL_147;
    }
  }
  else if ((v13 & 0x20000000000000) == 0)
  {
    goto LABEL_70;
  }
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 424);
  if ((v14 & 0x40000000000000) == 0)
  {
LABEL_71:
    if ((v14 & 0x80000000000000) == 0)
      goto LABEL_72;
    goto LABEL_148;
  }
LABEL_147:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 432);
  if ((v14 & 0x80000000000000) == 0)
  {
LABEL_72:
    if ((v14 & 0x100000000000000) == 0)
      goto LABEL_73;
    goto LABEL_149;
  }
LABEL_148:
  *(_BYTE *)(a2 + 104) = *(_QWORD *)(a1 + 440) != 0;
  if ((v14 & 0x100000000000000) == 0)
  {
LABEL_73:
    if ((v14 & 0x200000000000000) == 0)
      goto LABEL_74;
    goto LABEL_150;
  }
LABEL_149:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 448);
  if ((v14 & 0x200000000000000) == 0)
  {
LABEL_74:
    if ((v14 & 0x400000000000000) == 0)
      goto LABEL_75;
    goto LABEL_151;
  }
LABEL_150:
  *(_BYTE *)(a2 + 112) = *(_QWORD *)(a1 + 456) != 0;
  if ((v14 & 0x400000000000000) == 0)
  {
LABEL_75:
    if ((v14 & 0x800000000000000) == 0)
      goto LABEL_76;
    goto LABEL_152;
  }
LABEL_151:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 464);
  if ((v14 & 0x800000000000000) == 0)
  {
LABEL_76:
    if ((v14 & 0x1000000000000000) == 0)
      goto LABEL_77;
    goto LABEL_153;
  }
LABEL_152:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 472);
  if ((v14 & 0x1000000000000000) == 0)
  {
LABEL_77:
    if ((v14 & 0x2000000000000000) == 0)
      goto LABEL_78;
    goto LABEL_154;
  }
LABEL_153:
  *(_BYTE *)(a2 + 124) = *(_QWORD *)(a1 + 480) != 0;
  if ((v14 & 0x2000000000000000) == 0)
  {
LABEL_78:
    if ((v14 & 0x4000000000000000) == 0)
      goto LABEL_79;
LABEL_155:
    *(_BYTE *)(a2 + 126) = *(_QWORD *)(a1 + 496) != 0;
    if ((v14 & 0x8000000000000000) == 0)
      goto LABEL_80;
    goto LABEL_156;
  }
LABEL_154:
  *(_BYTE *)(a2 + 125) = *(_QWORD *)(a1 + 488) != 0;
  if ((v14 & 0x4000000000000000) != 0)
    goto LABEL_155;
LABEL_79:
  if ((v14 & 0x8000000000000000) == 0)
    goto LABEL_80;
LABEL_156:
  *(_BYTE *)(a2 + 127) = *(_QWORD *)(a1 + 504) != 0;
LABEL_80:
  v15 = *(_QWORD *)(a1 + 1256);
  if ((v15 & 1) != 0)
  {
    *(_BYTE *)(a2 + 128) = *(_QWORD *)(a1 + 512) != 0;
    if ((v15 & 2) == 0)
    {
LABEL_82:
      if ((v15 & 4) == 0)
        goto LABEL_83;
      goto LABEL_159;
    }
  }
  else if ((v15 & 2) == 0)
  {
    goto LABEL_82;
  }
  *(_BYTE *)(a2 + 129) = *(_QWORD *)(a1 + 520) != 0;
  if ((v15 & 4) == 0)
  {
LABEL_83:
    if ((v15 & 8) == 0)
      goto LABEL_85;
    goto LABEL_84;
  }
LABEL_159:
  *(_BYTE *)(a2 + 130) = *(_QWORD *)(a1 + 528) != 0;
  if ((v15 & 8) != 0)
LABEL_84:
    *(_BYTE *)(a2 + 131) = *(_QWORD *)(a1 + 536) != 0;
LABEL_85:
  LOWORD(v16) = v15;
  if ((v15 & 0x10) != 0)
  {
    *(_BYTE *)(a2 + 132) = *(_BYTE *)(a1 + 544) & 0xF;
    v16 = *(_QWORD *)(a1 + 1256);
    if ((v16 & 0x20) == 0)
    {
LABEL_87:
      if ((v16 & 0x40) == 0)
        goto LABEL_88;
      goto LABEL_163;
    }
  }
  else if ((v15 & 0x20) == 0)
  {
    goto LABEL_87;
  }
  *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 552);
  if ((v16 & 0x40) == 0)
  {
LABEL_88:
    if ((v16 & 0x80) == 0)
      goto LABEL_89;
    goto LABEL_164;
  }
LABEL_163:
  *(_WORD *)(a2 + 140) = *(_QWORD *)(a1 + 560);
  if ((v16 & 0x80) == 0)
  {
LABEL_89:
    if ((v16 & 0x100) == 0)
      goto LABEL_90;
    goto LABEL_165;
  }
LABEL_164:
  *(_DWORD *)(a2 + 144) = *(_QWORD *)(a1 + 568);
  if ((v16 & 0x100) == 0)
  {
LABEL_90:
    if ((v16 & 0x200) == 0)
      goto LABEL_91;
    goto LABEL_166;
  }
LABEL_165:
  *(_DWORD *)(a2 + 148) = *(_QWORD *)(a1 + 576);
  if ((v16 & 0x200) == 0)
  {
LABEL_91:
    if ((v16 & 0x400) == 0)
      goto LABEL_92;
    goto LABEL_167;
  }
LABEL_166:
  *(_DWORD *)(a2 + 152) = *(_QWORD *)(a1 + 584);
  if ((v16 & 0x400) == 0)
  {
LABEL_92:
    if ((v16 & 0x800) == 0)
      goto LABEL_93;
    goto LABEL_168;
  }
LABEL_167:
  *(_DWORD *)(a2 + 156) = *(_QWORD *)(a1 + 592);
  if ((v16 & 0x800) == 0)
  {
LABEL_93:
    if ((v16 & 0x1000) == 0)
      goto LABEL_94;
    goto LABEL_169;
  }
LABEL_168:
  *(_DWORD *)(a2 + 160) = *(_QWORD *)(a1 + 600);
  if ((v16 & 0x1000) == 0)
  {
LABEL_94:
    if ((v16 & 0x2000) == 0)
      goto LABEL_96;
    goto LABEL_95;
  }
LABEL_169:
  *(_DWORD *)(a2 + 164) = *(_QWORD *)(a1 + 608);
  if ((v16 & 0x2000) != 0)
LABEL_95:
    *(_DWORD *)(a2 + 168) = *(_QWORD *)(a1 + 616);
LABEL_96:
  v17 = v2 & 1;
  if ((v16 & 0x4000) != 0)
    *(_DWORD *)(a2 + 172) = *(_QWORD *)(a1 + 624);
  v18 = v3 & 2;
  v19 = v3 & 4;
  v20 = v3 & 8;
  v21 = v3 & 0x10;
  v22 = v3 & 0x20;
  v23 = v3 & 0x40;
  v24 = v4 & 0x80;
  v25 = v4 & 0x100;
  v44 = v8 & 0x800000;
  v45 = v8 & 0x1000000;
  v46 = v8 & 0x2000000;
  v47 = v8 & 0x4000000;
  v48 = v8 & 0x8000000;
  v49 = v8 & 0x10000000;
  v32 = v8 & 0x20000000;
  v50 = v11 & 0x4000000000;
  v51 = v11 & 0x8000000000;
  v52 = v11 & 0x10000000000;
  v53 = v11 & 0x20000000000;
  v54 = v11 & 0x40000000000;
  v55 = v11 & 0x80000000000;
  v56 = v11 & 0x100000000000;
  if ((v16 & 0x8000) != 0)
    *(_BYTE *)(a2 + 176) = *(_QWORD *)(a1 + 632) != 0;
  v28 = v5 & 0x800;
  v31 = v5 & 0x4000;
  v30 = v5 & 0x2000;
  v29 = v5 & 0x1000;
  v27 = v5 & 0x400;
  v26 = v5 & 0x200;
  v36 = (unsigned __int16)v6 & 0x8000;
  v37 = v6 & 0x10000;
  v38 = v6 & 0x20000;
  v39 = v6 & 0x40000;
  v40 = v6 & 0x80000;
  v41 = v6 & 0x100000;
  v42 = v7 & 0x200000;
  v43 = v7 & 0x400000;
  v33 = BYTE4(v9) & 1;
  v34 = (v18 >> 1)
      + v17
      + (v19 >> 2)
      + (v20 >> 3)
      + (v21 >> 4)
      + (v22 >> 5)
      + (v23 >> 6)
      + (v24 >> 7)
      + (v25 >> 8)
      + (v26 >> 9)
      + (v27 >> 10)
      + (v28 >> 11)
      + (v29 >> 12)
      + (v30 >> 13)
      + (v31 >> 14)
      + (v36 >> 15)
      + (v37 >> 16)
      + (v38 >> 17)
      + (v39 >> 18)
      + (v40 >> 19)
      + (v41 >> 20)
      + (v42 >> 21)
      + (v43 >> 22)
      + (v44 >> 23)
      + (v45 >> 24)
      + (v46 >> 25)
      + (v47 >> 26)
      + (v48 >> 27)
      + (v49 >> 28)
      + (v32 >> 29)
      + ((v9 & 0x40000000) >> 30)
      + (v9 >> 31)
      + v33
      + ((v9 & 0x200000000) >> 33)
      + ((v9 & 0x400000000) >> 34)
      + ((v9 & 0x800000000) >> 35)
      + ((v10 & 0x1000000000) >> 36)
      + ((v10 & 0x2000000000) >> 37)
      + (v50 >> 38)
      + (v51 >> 39)
      + (v52 >> 40)
      + (v53 >> 41)
      + (v54 >> 42);
  v57 = v12 & 0x200000000000;
  v58 = v12 & 0x400000000000;
  v59 = v12 & 0x800000000000;
  v60 = v12 & 0x1000000000000;
  v61 = v12 & 0x2000000000000;
  v62 = v12 & 0x4000000000000;
  v63 = v13 & 0x8000000000000;
  v64 = v13 & 0x10000000000000;
  v65 = v14 & 0x20000000000000;
  v66 = v14 & 0x80000000000000;
  v67 = v14 & 0x40000000000000;
  v68 = v14 & 0x100000000000000;
  v69 = v14 & 0x200000000000000;
  v70 = v14 & 0x400000000000000;
  v71 = v14 & 0x800000000000000;
  v72 = v15 & 1;
  return v34
       + (v55 >> 43)
       + (v56 >> 44)
       + (v57 >> 45)
       + (v58 >> 46)
       + (v59 >> 47)
       + HIWORD(v60)
       + (v61 >> 49)
       + (v62 >> 50)
       + (v63 >> 51)
       + (v64 >> 52)
       + (v14 >> 63)
       + (v65 >> 53)
       + (v67 >> 54)
       + (v66 >> 55)
       + HIBYTE(v68)
       + (v69 >> 57)
       + (v70 >> 58)
       + (v71 >> 59)
       + ((v14 & 0x1000000000000000) >> 60)
       + ((v14 & 0x2000000000000000) >> 61)
       + ((v14 & 0x4000000000000000) >> 62)
       + v72
       + ((unint64_t)(v15 & 2) >> 1)
       + ((unint64_t)(v15 & 4) >> 2)
       + ((unint64_t)(v15 & 8) >> 3)
       + ((unint64_t)(v15 & 0x10) >> 4)
       + ((unint64_t)(v16 & 0x20) >> 5)
       + ((unint64_t)(v16 & 0x40) >> 6)
       + ((unint64_t)(v16 & 0x80) >> 7)
       + ((unint64_t)(v16 & 0x100) >> 8)
       + ((unint64_t)(v16 & 0x200) >> 9)
       + ((unint64_t)(v16 & 0x400) >> 10)
       + ((unint64_t)(v16 & 0x800) >> 11)
       + ((unint64_t)(v16 & 0x1000) >> 12)
       + ((unint64_t)(v16 & 0x2000) >> 13)
       + ((unint64_t)(v16 & 0x4000) >> 14)
       + ((unint64_t)((unsigned __int16)v16 & 0x8000) >> 15);
}

unint64_t sub_1C4D50A48(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_84;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_85;
  }
LABEL_84:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_86;
  }
LABEL_85:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_86:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_90;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_91;
  }
LABEL_90:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_92;
  }
LABEL_91:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_92:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_BYTE *)(a2 + 24) = *(_QWORD *)(a1 + 104) != 0;
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_96;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_97;
  }
LABEL_96:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_98;
  }
LABEL_97:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_98:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_102;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_103;
  }
LABEL_102:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_104;
  }
LABEL_103:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_105;
  }
LABEL_104:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_38;
    goto LABEL_37;
  }
LABEL_105:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) != 0)
LABEL_37:
    *(_BYTE *)(a2 + 53) = *(_QWORD *)(a1 + 224) != 0;
LABEL_38:
  v9 = v8;
  if ((v8 & 0x20000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 232) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x40000000) == 0)
    {
LABEL_40:
      if ((v9 & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_109;
    }
  }
  else if ((v8 & 0x40000000) == 0)
  {
    goto LABEL_40;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 240);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_110;
  }
LABEL_109:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_43;
    goto LABEL_111;
  }
LABEL_110:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 256) & 0x1FF;
  if ((v9 & 0x200000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x400000000) == 0)
      goto LABEL_45;
    goto LABEL_44;
  }
LABEL_111:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 264) & 0x1FFFF;
  if ((v9 & 0x400000000) != 0)
LABEL_44:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 272) & 0x1FFF;
LABEL_45:
  v10 = v9;
  if ((v9 & 0x800000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 280) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x1000000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 288);
  v11 = v10;
  if ((v10 & 0x2000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 296) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x4000000000) == 0)
    {
LABEL_51:
      if ((v11 & 0x8000000000) == 0)
        goto LABEL_52;
      goto LABEL_115;
    }
  }
  else if ((v10 & 0x4000000000) == 0)
  {
    goto LABEL_51;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_116;
  }
LABEL_115:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 312);
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_117;
  }
LABEL_116:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 320) != 0;
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_118;
  }
LABEL_117:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 328);
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 336) != 0;
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_120;
  }
LABEL_119:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_121;
  }
LABEL_120:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 352);
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_123;
  }
LABEL_122:
  *(_BYTE *)(a2 + 93) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_124;
  }
LABEL_123:
  *(_BYTE *)(a2 + 94) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_125;
  }
LABEL_124:
  *(_BYTE *)(a2 + 95) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_126;
  }
LABEL_125:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_64;
    goto LABEL_127;
  }
LABEL_126:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x10000000000000) == 0)
      goto LABEL_65;
    goto LABEL_128;
  }
LABEL_127:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 408) != 0;
  if ((v11 & 0x10000000000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x20000000000000) == 0)
      goto LABEL_67;
    goto LABEL_66;
  }
LABEL_128:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 416) != 0;
  if ((v11 & 0x20000000000000) != 0)
LABEL_66:
    *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 424) != 0;
LABEL_67:
  v12 = v11;
  if ((v11 & 0x40000000000000) != 0)
  {
    *(_BYTE *)(a2 + 101) = *(_BYTE *)(a1 + 432) & 0xF;
    v12 = *(_QWORD *)(a1 + 1248);
    if ((v12 & 0x80000000000000) == 0)
    {
LABEL_69:
      if ((v12 & 0x100000000000000) == 0)
        goto LABEL_70;
      goto LABEL_132;
    }
  }
  else if ((v11 & 0x80000000000000) == 0)
  {
    goto LABEL_69;
  }
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 440);
  if ((v12 & 0x100000000000000) == 0)
  {
LABEL_70:
    if ((v12 & 0x200000000000000) == 0)
      goto LABEL_71;
    goto LABEL_133;
  }
LABEL_132:
  *(_WORD *)(a2 + 108) = *(_QWORD *)(a1 + 448);
  if ((v12 & 0x200000000000000) == 0)
  {
LABEL_71:
    if ((v12 & 0x400000000000000) == 0)
      goto LABEL_72;
    goto LABEL_134;
  }
LABEL_133:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 456);
  if ((v12 & 0x400000000000000) == 0)
  {
LABEL_72:
    if ((v12 & 0x800000000000000) == 0)
      goto LABEL_73;
    goto LABEL_135;
  }
LABEL_134:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 464);
  if ((v12 & 0x800000000000000) == 0)
  {
LABEL_73:
    if ((v12 & 0x1000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_136;
  }
LABEL_135:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 472);
  if ((v12 & 0x1000000000000000) == 0)
  {
LABEL_74:
    if ((v12 & 0x2000000000000000) == 0)
      goto LABEL_75;
    goto LABEL_137;
  }
LABEL_136:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 480);
  if ((v12 & 0x2000000000000000) == 0)
  {
LABEL_75:
    if ((v12 & 0x4000000000000000) == 0)
      goto LABEL_76;
LABEL_138:
    *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 496);
    if ((v12 & 0x8000000000000000) == 0)
      goto LABEL_77;
    goto LABEL_139;
  }
LABEL_137:
  *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 488);
  if ((v12 & 0x4000000000000000) != 0)
    goto LABEL_138;
LABEL_76:
  if ((v12 & 0x8000000000000000) == 0)
    goto LABEL_77;
LABEL_139:
  *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 504);
LABEL_77:
  v13 = v2 & 1;
  v14 = *(_QWORD *)(a1 + 1256);
  if ((v14 & 1) != 0)
    *(_DWORD *)(a2 + 140) = *(_QWORD *)(a1 + 512);
  v15 = v3 & 2;
  v16 = v3 & 4;
  v17 = v3 & 8;
  v18 = v3 & 0x10;
  v19 = v3 & 0x20;
  v20 = v3 & 0x40;
  v21 = v4 & 0x80;
  v22 = v4 & 0x100;
  if ((v14 & 2) != 0)
    *(_BYTE *)(a2 + 144) = *(_QWORD *)(a1 + 520) != 0;
  v24 = v5 & 0x400;
  v23 = v5 & 0x200;
  v26 = v5 & 0x1000;
  v27 = v5 & 0x2000;
  v25 = v5 & 0x800;
  v28 = v5 & 0x4000;
  v36 = v7 & 0x200000;
  v37 = v9 & 0x400000000;
  v38 = v7 & 0x400000;
  v39 = v8 & 0x800000;
  v40 = v9 & 0x800000000;
  v41 = v8 & 0x1000000;
  v42 = v8 & 0x2000000;
  v43 = v8 & 0x4000000;
  v44 = v8 & 0x8000000;
  v45 = v8 & 0x10000000;
  v46 = v11 & 0x4000000000;
  v47 = v11 & 0x8000000000;
  v48 = v11 & 0x10000000000;
  v49 = v11 & 0x20000000000;
  v50 = v11 & 0x40000000000;
  v31 = v6 & 0x20000;
  v30 = v6 & 0x10000;
  v29 = (unsigned __int16)v6 & 0x8000;
  v33 = v6 & 0x40000;
  v34 = v6 & 0x80000;
  v35 = v6 & 0x100000;
  LODWORD(v26) = (v15 >> 1)
               + v13
               + (v16 >> 2)
               + (v17 >> 3)
               + (v18 >> 4)
               + (v19 >> 5)
               + (v20 >> 6)
               + (v21 >> 7)
               + (v22 >> 8)
               + (v23 >> 9)
               + (v24 >> 10)
               + (v25 >> 11)
               + (v26 >> 12)
               + (v27 >> 13)
               + (v28 >> 14)
               + (v29 >> 15)
               + (v30 >> 16)
               + (v31 >> 17)
               + (v33 >> 18)
               + (v34 >> 19)
               + (v35 >> 20)
               + (v36 >> 21)
               + (v38 >> 22)
               + (v39 >> 23)
               + (v41 >> 24)
               + (v42 >> 25)
               + (v43 >> 26)
               + (v44 >> 27)
               + (v45 >> 28)
               + ((v8 & 0x20000000) >> 29)
               + ((v9 & 0x40000000) >> 30)
               + (v9 >> 31)
               + (BYTE4(v9) & 1)
               + ((v9 & 0x200000000) >> 33)
               + (v37 >> 34)
               + (v40 >> 35)
               + ((v10 & 0x1000000000) >> 36)
               + ((v10 & 0x2000000000) >> 37)
               + (v46 >> 38)
               + (v47 >> 39)
               + (v48 >> 40)
               + (v49 >> 41)
               + (v50 >> 42);
  return (_DWORD)v26
       + ((v11 & 0x80000000000) >> 43)
       + ((v11 & 0x100000000000) >> 44)
       + ((v11 & 0x200000000000) >> 45)
       + ((v11 & 0x400000000000) >> 46)
       + ((v11 & 0x800000000000) >> 47)
       + ((v11 & 0x1000000000000) >> 48)
       + ((v11 & 0x2000000000000) >> 49)
       + ((v11 & 0x4000000000000) >> 50)
       + ((v11 & 0x8000000000000) >> 51)
       + ((v11 & 0x10000000000000) >> 52)
       + ((v11 & 0x20000000000000) >> 53)
       + ((v11 & 0x40000000000000) >> 54)
       + (v12 >> 63)
       + ((v12 & 0x80000000000000) >> 55)
       + ((v12 & 0x100000000000000) >> 56)
       + ((v12 & 0x200000000000000) >> 57)
       + ((v12 & 0x400000000000000) >> 58)
       + ((v12 & 0x800000000000000) >> 59)
       + ((v12 & 0x1000000000000000) >> 60)
       + ((v12 & 0x2000000000000000) >> 61)
       + ((v12 & 0x4000000000000000) >> 62)
       + (v14 & 1)
       + ((unint64_t)(v14 & 2) >> 1);
}

uint64_t sub_1C4D513C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_64;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_65;
  }
LABEL_64:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_66;
  }
LABEL_65:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_66:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_70;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_71;
  }
LABEL_70:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_72;
  }
LABEL_71:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_73;
  }
LABEL_72:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_74;
  }
LABEL_73:
  *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
LABEL_74:
  *(_BYTE *)(a2 + 28) = *(_QWORD *)(a1 + 112) != 0;
  if ((v5 & 0x8000) != 0)
LABEL_20:
    *(_DWORD *)(a2 + 32) = *(_QWORD *)(a1 + 120);
LABEL_21:
  v6 = v5;
  if ((v5 & 0x10000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 128) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x20000) == 0)
    {
LABEL_23:
      if ((v6 & 0x40000) == 0)
        goto LABEL_24;
      goto LABEL_78;
    }
  }
  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_23;
  }
  *(_WORD *)(a2 + 36) = *(_QWORD *)(a1 + 136);
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_79;
  }
LABEL_78:
  *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 144) & 0x1FF;
  if ((v6 & 0x80000) == 0)
  {
LABEL_25:
    if ((v6 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_80;
  }
LABEL_79:
  *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 152) & 0x1FF;
  if ((v6 & 0x100000) == 0)
  {
LABEL_26:
    if ((v6 & 0x200000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_80:
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 160) & 0x1FFFF;
  if ((v6 & 0x200000) != 0)
LABEL_27:
    *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 168) & 0x1FFF;
LABEL_28:
  v7 = v6;
  if ((v6 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 176) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x800000) != 0)
    *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  v8 = v7;
  if ((v7 & 0x1000000) != 0)
  {
    *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 192) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x2000000) == 0)
    {
LABEL_34:
      if ((v8 & 0x4000000) == 0)
        goto LABEL_35;
      goto LABEL_84;
    }
  }
  else if ((v7 & 0x2000000) == 0)
  {
    goto LABEL_34;
  }
  *(_DWORD *)(a2 + 44) = *(_QWORD *)(a1 + 200);
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_85;
  }
LABEL_84:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_86;
  }
LABEL_85:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v8 & 0x20000000) == 0)
      goto LABEL_38;
    goto LABEL_87;
  }
LABEL_86:
  *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 224);
  if ((v8 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x40000000) == 0)
      goto LABEL_39;
    goto LABEL_88;
  }
LABEL_87:
  *(_BYTE *)(a2 + 60) = *(_QWORD *)(a1 + 232) != 0;
  if ((v8 & 0x40000000) == 0)
  {
LABEL_39:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_89;
  }
LABEL_88:
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 240);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_40:
    if ((v8 & 0x100000000) == 0)
      goto LABEL_41;
    goto LABEL_90;
  }
LABEL_89:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 248);
  if ((v8 & 0x100000000) == 0)
  {
LABEL_41:
    if ((v8 & 0x200000000) == 0)
      goto LABEL_42;
    goto LABEL_91;
  }
LABEL_90:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 256) != 0;
  if ((v8 & 0x200000000) == 0)
  {
LABEL_42:
    if ((v8 & 0x400000000) == 0)
      goto LABEL_43;
    goto LABEL_92;
  }
LABEL_91:
  *(_BYTE *)(a2 + 73) = *(_QWORD *)(a1 + 264) != 0;
  if ((v8 & 0x400000000) == 0)
  {
LABEL_43:
    if ((v8 & 0x800000000) == 0)
      goto LABEL_44;
    goto LABEL_93;
  }
LABEL_92:
  *(_BYTE *)(a2 + 74) = *(_QWORD *)(a1 + 272) != 0;
  if ((v8 & 0x800000000) == 0)
  {
LABEL_44:
    if ((v8 & 0x1000000000) == 0)
      goto LABEL_45;
    goto LABEL_94;
  }
LABEL_93:
  *(_BYTE *)(a2 + 75) = *(_QWORD *)(a1 + 280) != 0;
  if ((v8 & 0x1000000000) == 0)
  {
LABEL_45:
    if ((v8 & 0x2000000000) == 0)
      goto LABEL_46;
    goto LABEL_95;
  }
LABEL_94:
  *(_BYTE *)(a2 + 76) = *(_QWORD *)(a1 + 288) != 0;
  if ((v8 & 0x2000000000) == 0)
  {
LABEL_46:
    if ((v8 & 0x4000000000) == 0)
      goto LABEL_47;
    goto LABEL_96;
  }
LABEL_95:
  *(_BYTE *)(a2 + 77) = *(_QWORD *)(a1 + 296) != 0;
  if ((v8 & 0x4000000000) == 0)
  {
LABEL_47:
    if ((v8 & 0x8000000000) == 0)
      goto LABEL_48;
    goto LABEL_97;
  }
LABEL_96:
  *(_BYTE *)(a2 + 78) = *(_QWORD *)(a1 + 304) != 0;
  if ((v8 & 0x8000000000) == 0)
  {
LABEL_48:
    if ((v8 & 0x10000000000) == 0)
      goto LABEL_49;
    goto LABEL_98;
  }
LABEL_97:
  *(_BYTE *)(a2 + 79) = *(_QWORD *)(a1 + 312) != 0;
  if ((v8 & 0x10000000000) == 0)
  {
LABEL_49:
    if ((v8 & 0x20000000000) == 0)
      goto LABEL_50;
    goto LABEL_99;
  }
LABEL_98:
  *(_DWORD *)(a2 + 80) = *(_QWORD *)(a1 + 320);
  if ((v8 & 0x20000000000) == 0)
  {
LABEL_50:
    if ((v8 & 0x40000000000) == 0)
      goto LABEL_51;
    goto LABEL_100;
  }
LABEL_99:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 328);
  if ((v8 & 0x40000000000) == 0)
  {
LABEL_51:
    if ((v8 & 0x80000000000) == 0)
      goto LABEL_52;
    goto LABEL_101;
  }
LABEL_100:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 336);
  if ((v8 & 0x80000000000) == 0)
  {
LABEL_52:
    if ((v8 & 0x100000000000) == 0)
      goto LABEL_53;
    goto LABEL_102;
  }
LABEL_101:
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 344);
  if ((v8 & 0x100000000000) == 0)
  {
LABEL_53:
    if ((v8 & 0x200000000000) == 0)
      goto LABEL_54;
    goto LABEL_103;
  }
LABEL_102:
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 352);
  if ((v8 & 0x200000000000) == 0)
  {
LABEL_54:
    if ((v8 & 0x400000000000) == 0)
      goto LABEL_55;
    goto LABEL_104;
  }
LABEL_103:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 360);
  if ((v8 & 0x400000000000) == 0)
  {
LABEL_55:
    if ((v8 & 0x800000000000) == 0)
      goto LABEL_57;
    goto LABEL_56;
  }
LABEL_104:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 368);
  if ((v8 & 0x800000000000) != 0)
LABEL_56:
    *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 376);
LABEL_57:
  v9 = v2 & 1;
  if ((v8 & 0x1000000000000) != 0)
    *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 384);
  v10 = v3 & 2;
  v11 = v3 & 4;
  v12 = v3 & 8;
  v13 = v3 & 0x10;
  v14 = v3 & 0x20;
  v15 = v3 & 0x40;
  v16 = v4 & 0x80;
  v17 = v4 & 0x100;
  v18 = v5 & 0x200;
  v19 = v5 & 0x400;
  v20 = v5 & 0x800;
  v21 = v5 & 0x1000;
  v22 = v5 & 0x2000;
  v23 = v5 & 0x4000;
  v24 = (unsigned __int16)v5 & 0x8000;
  v25 = v5 & 0x10000;
  v26 = v6 & 0x20000;
  v27 = v6 & 0x40000;
  v28 = v6 & 0x80000;
  v29 = v6 & 0x100000;
  v30 = v6 & 0x200000;
  v31 = v6 & 0x400000;
  if ((v8 & 0x2000000000000) != 0)
    *(_BYTE *)(a2 + 116) = *(_QWORD *)(a1 + 392) != 0;
  v33 = v7 & 0x1000000;
  v32 = v7 & 0x800000;
  v36 = v8 & 0x2000000;
  v37 = v8 & 0x4000000;
  v38 = v8 & 0x8000000;
  v39 = v8 & 0x10000000;
  v40 = v8 & 0x20000000;
  v41 = v8 & 0x40000000;
  v43 = v8 & 0x200000000;
  v44 = v8 & 0x400000000;
  v45 = v8 & 0x800000000;
  v46 = v8 & 0x1000000000;
  v47 = v8 & 0x2000000000;
  v42 = BYTE4(v8) & 1;
  v34 = (v10 >> 1)
      + v9
      + (v11 >> 2)
      + (v12 >> 3)
      + (v13 >> 4)
      + (v14 >> 5)
      + (v15 >> 6)
      + (v16 >> 7)
      + (v17 >> 8)
      + (v18 >> 9)
      + (v19 >> 10)
      + (v20 >> 11)
      + (v21 >> 12)
      + (v22 >> 13)
      + (v23 >> 14)
      + (v24 >> 15)
      + (v25 >> 16)
      + (v26 >> 17)
      + (v27 >> 18)
      + (v28 >> 19)
      + (v29 >> 20)
      + (v30 >> 21)
      + (v31 >> 22)
      + (v32 >> 23)
      + (v33 >> 24)
      + (v36 >> 25)
      + (v37 >> 26)
      + (v38 >> 27)
      + (v39 >> 28)
      + (v40 >> 29)
      + (v41 >> 30)
      + (v8 >> 31)
      + v42
      + (v43 >> 33)
      + (v44 >> 34)
      + (v45 >> 35)
      + (v46 >> 36)
      + (v47 >> 37)
      + ((v8 & 0x4000000000uLL) >> 38)
      + ((v8 & 0x8000000000uLL) >> 39)
      + ((v8 & 0x10000000000uLL) >> 40)
      + ((v8 & 0x20000000000uLL) >> 41)
      + ((v8 & 0x40000000000uLL) >> 42);
  return v34
       + ((v8 & 0x80000000000uLL) >> 43)
       + ((v8 & 0x100000000000uLL) >> 44)
       + ((v8 & 0x200000000000uLL) >> 45)
       + ((v8 & 0x400000000000uLL) >> 46)
       + ((v8 & 0x800000000000uLL) >> 47)
       + ((v8 & 0x1000000000000uLL) >> 48)
       + ((v8 & 0x2000000000000uLL) >> 49);
}

uint64_t sub_1C4D51ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_66;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_67;
  }
LABEL_66:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_68;
  }
LABEL_67:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_68:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_72;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_73;
  }
LABEL_72:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_74;
  }
LABEL_73:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_75;
  }
LABEL_74:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_76;
  }
LABEL_75:
  *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
LABEL_76:
  *(_BYTE *)(a2 + 28) = *(_QWORD *)(a1 + 112) != 0;
  if ((v5 & 0x8000) != 0)
LABEL_20:
    *(_DWORD *)(a2 + 32) = *(_QWORD *)(a1 + 120);
LABEL_21:
  v6 = v5;
  if ((v5 & 0x10000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 128) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x20000) == 0)
    {
LABEL_23:
      if ((v6 & 0x40000) == 0)
        goto LABEL_24;
      goto LABEL_80;
    }
  }
  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_23;
  }
  *(_WORD *)(a2 + 36) = *(_QWORD *)(a1 + 136);
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_81;
  }
LABEL_80:
  *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 144) & 0x1FF;
  if ((v6 & 0x80000) == 0)
  {
LABEL_25:
    if ((v6 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_82;
  }
LABEL_81:
  *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 152) & 0x1FF;
  if ((v6 & 0x100000) == 0)
  {
LABEL_26:
    if ((v6 & 0x200000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_82:
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 160) & 0x1FFFF;
  if ((v6 & 0x200000) != 0)
LABEL_27:
    *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 168) & 0x1FFF;
LABEL_28:
  v7 = v6;
  if ((v6 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 176) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x800000) != 0)
    *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  v8 = v7;
  if ((v7 & 0x1000000) != 0)
  {
    *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 192) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x2000000) == 0)
    {
LABEL_34:
      if ((v8 & 0x4000000) == 0)
        goto LABEL_35;
      goto LABEL_86;
    }
  }
  else if ((v7 & 0x2000000) == 0)
  {
    goto LABEL_34;
  }
  *(_DWORD *)(a2 + 44) = *(_QWORD *)(a1 + 200);
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_87;
  }
LABEL_86:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_88;
  }
LABEL_87:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v8 & 0x20000000) == 0)
      goto LABEL_38;
    goto LABEL_89;
  }
LABEL_88:
  *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 224);
  if ((v8 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x40000000) == 0)
      goto LABEL_39;
    goto LABEL_90;
  }
LABEL_89:
  *(_BYTE *)(a2 + 60) = *(_QWORD *)(a1 + 232) != 0;
  if ((v8 & 0x40000000) == 0)
  {
LABEL_39:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_91;
  }
LABEL_90:
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 240);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_40:
    if ((v8 & 0x100000000) == 0)
      goto LABEL_41;
    goto LABEL_92;
  }
LABEL_91:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 248);
  if ((v8 & 0x100000000) == 0)
  {
LABEL_41:
    if ((v8 & 0x200000000) == 0)
      goto LABEL_42;
    goto LABEL_93;
  }
LABEL_92:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 256) != 0;
  if ((v8 & 0x200000000) == 0)
  {
LABEL_42:
    if ((v8 & 0x400000000) == 0)
      goto LABEL_43;
    goto LABEL_94;
  }
LABEL_93:
  *(_BYTE *)(a2 + 73) = *(_QWORD *)(a1 + 264) != 0;
  if ((v8 & 0x400000000) == 0)
  {
LABEL_43:
    if ((v8 & 0x800000000) == 0)
      goto LABEL_44;
    goto LABEL_95;
  }
LABEL_94:
  *(_BYTE *)(a2 + 74) = *(_QWORD *)(a1 + 272) != 0;
  if ((v8 & 0x800000000) == 0)
  {
LABEL_44:
    if ((v8 & 0x1000000000) == 0)
      goto LABEL_45;
    goto LABEL_96;
  }
LABEL_95:
  *(_BYTE *)(a2 + 75) = *(_QWORD *)(a1 + 280) != 0;
  if ((v8 & 0x1000000000) == 0)
  {
LABEL_45:
    if ((v8 & 0x2000000000) == 0)
      goto LABEL_46;
    goto LABEL_97;
  }
LABEL_96:
  *(_BYTE *)(a2 + 76) = *(_QWORD *)(a1 + 288) != 0;
  if ((v8 & 0x2000000000) == 0)
  {
LABEL_46:
    if ((v8 & 0x4000000000) == 0)
      goto LABEL_47;
    goto LABEL_98;
  }
LABEL_97:
  *(_BYTE *)(a2 + 77) = *(_QWORD *)(a1 + 296) != 0;
  if ((v8 & 0x4000000000) == 0)
  {
LABEL_47:
    if ((v8 & 0x8000000000) == 0)
      goto LABEL_48;
    goto LABEL_99;
  }
LABEL_98:
  *(_BYTE *)(a2 + 78) = *(_QWORD *)(a1 + 304) != 0;
  if ((v8 & 0x8000000000) == 0)
  {
LABEL_48:
    if ((v8 & 0x10000000000) == 0)
      goto LABEL_50;
    goto LABEL_49;
  }
LABEL_99:
  *(_BYTE *)(a2 + 79) = *(_QWORD *)(a1 + 312) != 0;
  if ((v8 & 0x10000000000) != 0)
LABEL_49:
    *(_DWORD *)(a2 + 80) = *(_QWORD *)(a1 + 320);
LABEL_50:
  v9 = v8;
  if ((v8 & 0x20000000000) != 0)
  {
    *(_BYTE *)(a2 + 84) = *(_BYTE *)(a1 + 328) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x40000000000) == 0)
    {
LABEL_52:
      if ((v9 & 0x80000000000) == 0)
        goto LABEL_53;
      goto LABEL_103;
    }
  }
  else if ((v8 & 0x40000000000) == 0)
  {
    goto LABEL_52;
  }
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 336);
  if ((v9 & 0x80000000000) == 0)
  {
LABEL_53:
    if ((v9 & 0x100000000000) == 0)
      goto LABEL_54;
    goto LABEL_104;
  }
LABEL_103:
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 344);
  if ((v9 & 0x100000000000) == 0)
  {
LABEL_54:
    if ((v9 & 0x200000000000) == 0)
      goto LABEL_55;
    goto LABEL_105;
  }
LABEL_104:
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 352);
  if ((v9 & 0x200000000000) == 0)
  {
LABEL_55:
    if ((v9 & 0x400000000000) == 0)
      goto LABEL_56;
    goto LABEL_106;
  }
LABEL_105:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 360);
  if ((v9 & 0x400000000000) == 0)
  {
LABEL_56:
    if ((v9 & 0x800000000000) == 0)
      goto LABEL_57;
    goto LABEL_107;
  }
LABEL_106:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 368);
  if ((v9 & 0x800000000000) == 0)
  {
LABEL_57:
    if ((v9 & 0x1000000000000) == 0)
      goto LABEL_59;
    goto LABEL_58;
  }
LABEL_107:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 376);
  if ((v9 & 0x1000000000000) != 0)
LABEL_58:
    *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 384);
LABEL_59:
  v10 = v2 & 1;
  if ((v9 & 0x2000000000000) != 0)
    *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 392);
  v11 = v3 & 2;
  v12 = v3 & 4;
  v13 = v3 & 8;
  v14 = v3 & 0x10;
  v15 = v3 & 0x20;
  v16 = v3 & 0x40;
  v17 = v4 & 0x80;
  v18 = v4 & 0x100;
  v19 = v5 & 0x200;
  v20 = v5 & 0x400;
  v21 = v5 & 0x800;
  v22 = v5 & 0x1000;
  v23 = v5 & 0x2000;
  v24 = v5 & 0x4000;
  v25 = (unsigned __int16)v5 & 0x8000;
  v26 = v5 & 0x10000;
  v27 = v6 & 0x20000;
  v28 = v6 & 0x40000;
  v29 = v6 & 0x80000;
  v30 = v6 & 0x100000;
  v31 = v6 & 0x200000;
  v32 = v6 & 0x400000;
  if ((v9 & 0x4000000000000) != 0)
    *(_BYTE *)(a2 + 120) = *(_QWORD *)(a1 + 400) != 0;
  v33 = v7 & 0x800000;
  v36 = v7 & 0x1000000;
  v37 = v8 & 0x2000000;
  v38 = v8 & 0x4000000;
  v39 = v8 & 0x8000000;
  v40 = v8 & 0x10000000;
  v41 = v8 & 0x20000000;
  v42 = v8 & 0x40000000;
  v44 = v8 & 0x200000000;
  v45 = v8 & 0x400000000;
  v46 = v8 & 0x800000000;
  v47 = v8 & 0x1000000000;
  v48 = v8 & 0x2000000000;
  v43 = BYTE4(v8) & 1;
  v34 = (v11 >> 1)
      + v10
      + (v12 >> 2)
      + (v13 >> 3)
      + (v14 >> 4)
      + (v15 >> 5)
      + (v16 >> 6)
      + (v17 >> 7)
      + (v18 >> 8)
      + (v19 >> 9)
      + (v20 >> 10)
      + (v21 >> 11)
      + (v22 >> 12)
      + (v23 >> 13)
      + (v24 >> 14)
      + (v25 >> 15)
      + (v26 >> 16)
      + (v27 >> 17)
      + (v28 >> 18)
      + (v29 >> 19)
      + (v30 >> 20)
      + (v31 >> 21)
      + (v32 >> 22)
      + (v33 >> 23)
      + (v36 >> 24)
      + (v37 >> 25)
      + (v38 >> 26)
      + (v39 >> 27)
      + (v40 >> 28)
      + (v41 >> 29)
      + (v42 >> 30)
      + (v8 >> 31)
      + v43
      + (v44 >> 33)
      + (v45 >> 34)
      + (v46 >> 35)
      + (v47 >> 36)
      + (v48 >> 37)
      + ((v8 & 0x4000000000uLL) >> 38)
      + ((v8 & 0x8000000000uLL) >> 39)
      + ((v8 & 0x10000000000uLL) >> 40)
      + ((v8 & 0x20000000000uLL) >> 41)
      + ((v9 & 0x40000000000uLL) >> 42);
  return v34
       + ((v9 & 0x80000000000uLL) >> 43)
       + ((v9 & 0x100000000000uLL) >> 44)
       + ((v9 & 0x200000000000uLL) >> 45)
       + ((v9 & 0x400000000000uLL) >> 46)
       + ((v9 & 0x800000000000uLL) >> 47)
       + ((v9 & 0x1000000000000uLL) >> 48)
       + ((v9 & 0x2000000000000uLL) >> 49)
       + ((v9 & 0x4000000000000uLL) >> 50);
}

unint64_t sub_1C4D52228(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_DWORD *)a2 = *(_QWORD *)a1;
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0)
        goto LABEL_4;
      goto LABEL_62;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_DWORD *)(a2 + 4) = *(_QWORD *)(a1 + 8);
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0)
      goto LABEL_5;
    goto LABEL_63;
  }
LABEL_62:
  *(_BYTE *)(a2 + 8) = *(_QWORD *)(a1 + 16) != 0;
  if ((v2 & 8) == 0)
  {
LABEL_5:
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_64;
  }
LABEL_63:
  *(_BYTE *)(a2 + 9) = *(_QWORD *)(a1 + 24) != 0;
  if ((v2 & 0x10) == 0)
  {
LABEL_6:
    if ((v2 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_65;
  }
LABEL_64:
  *(_BYTE *)(a2 + 10) = *(_QWORD *)(a1 + 32) != 0;
  if ((v2 & 0x20) == 0)
  {
LABEL_7:
    if ((v2 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_66;
  }
LABEL_65:
  *(_BYTE *)(a2 + 11) = *(_QWORD *)(a1 + 40) != 0;
  if ((v2 & 0x40) == 0)
  {
LABEL_8:
    if ((v2 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_67;
  }
LABEL_66:
  *(_BYTE *)(a2 + 12) = *(_QWORD *)(a1 + 48) != 0;
  if ((v2 & 0x80) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_68;
  }
LABEL_67:
  *(_BYTE *)(a2 + 13) = *(_QWORD *)(a1 + 56) != 0;
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_69;
  }
LABEL_68:
  *(_BYTE *)(a2 + 14) = *(_QWORD *)(a1 + 64) != 0;
  if ((v2 & 0x200) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_70;
  }
LABEL_69:
  *(_BYTE *)(a2 + 15) = *(_QWORD *)(a1 + 72) != 0;
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_71;
  }
LABEL_70:
  *(_DWORD *)(a2 + 16) = *(_QWORD *)(a1 + 80);
  if ((v2 & 0x800) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_72;
  }
LABEL_71:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 88);
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_73;
  }
LABEL_72:
  *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 96);
  if ((v2 & 0x2000) == 0)
  {
LABEL_15:
    if ((v2 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_74;
  }
LABEL_73:
  *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 104);
  if ((v2 & 0x4000) == 0)
  {
LABEL_16:
    if ((v2 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_75;
  }
LABEL_74:
  *(_DWORD *)(a2 + 32) = *(_QWORD *)(a1 + 112);
  if ((v2 & 0x8000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_76;
  }
LABEL_75:
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 120);
  if ((v2 & 0x10000) == 0)
  {
LABEL_18:
    if ((v2 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_77;
  }
LABEL_76:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 128);
  if ((v2 & 0x20000) == 0)
  {
LABEL_19:
    if ((v2 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_78;
  }
LABEL_77:
  *(_DWORD *)(a2 + 44) = *(_QWORD *)(a1 + 136);
  if ((v2 & 0x40000) == 0)
  {
LABEL_20:
    if ((v2 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_79;
  }
LABEL_78:
  *(_BYTE *)(a2 + 48) = *(_BYTE *)(a1 + 144) & 1;
  v3 = *(_QWORD *)(a1 + 1248);
  if ((v3 & 0x80000) == 0)
  {
LABEL_21:
    if ((v3 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_80;
  }
LABEL_79:
  *(_WORD *)(a2 + 48) = *(_QWORD *)(a1 + 152);
  if ((v3 & 0x100000) == 0)
  {
LABEL_22:
    if ((v3 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_81;
  }
LABEL_80:
  *(_WORD *)(a2 + 48) = *(_WORD *)(a1 + 160) & 0x1FF;
  if ((v3 & 0x200000) == 0)
  {
LABEL_23:
    if ((v3 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_82;
  }
LABEL_81:
  *(_WORD *)(a2 + 48) = *(_WORD *)(a1 + 168) & 0x1FF;
  if ((v3 & 0x400000) == 0)
  {
LABEL_24:
    if ((v3 & 0x800000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_82:
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 176) & 0x1FFFF;
  if ((v3 & 0x800000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 48) = *(_WORD *)(a1 + 184) & 0x1FFF;
LABEL_26:
  v4 = v3;
  if ((v3 & 0x1000000) != 0)
  {
    *(_BYTE *)(a2 + 48) = *(_BYTE *)(a1 + 192) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x2000000) != 0)
    *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 200);
  v5 = v4;
  if ((v4 & 0x4000000) != 0)
  {
    *(_BYTE *)(a2 + 52) = *(_BYTE *)(a1 + 208) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x8000000) == 0)
    {
LABEL_32:
      if ((v5 & 0x10000000) == 0)
        goto LABEL_33;
      goto LABEL_86;
    }
  }
  else if ((v4 & 0x8000000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_34;
    goto LABEL_87;
  }
LABEL_86:
  *(_DWORD *)(a2 + 60) = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_35;
    goto LABEL_88;
  }
LABEL_87:
  *(_BYTE *)(a2 + 64) = *(_QWORD *)(a1 + 232) != 0;
  if ((v5 & 0x40000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_88:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 240);
  if ((v5 & 0x80000000) != 0)
LABEL_36:
    *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 248) != 0;
LABEL_37:
  v6 = v5;
  if ((v5 & 0x100000000) != 0)
  {
    *(_BYTE *)(a2 + 76) = *(_BYTE *)(a1 + 256) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x200000000) == 0)
    {
LABEL_39:
      if ((v6 & 0x400000000) == 0)
        goto LABEL_40;
      goto LABEL_92;
    }
  }
  else if ((v5 & 0x200000000) == 0)
  {
    goto LABEL_39;
  }
  *(_WORD *)(a2 + 76) = *(_QWORD *)(a1 + 264);
  if ((v6 & 0x400000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x800000000) == 0)
      goto LABEL_41;
    goto LABEL_93;
  }
LABEL_92:
  *(_WORD *)(a2 + 76) = *(_WORD *)(a1 + 272) & 0x1FF;
  if ((v6 & 0x800000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_42;
    goto LABEL_94;
  }
LABEL_93:
  *(_WORD *)(a2 + 76) = *(_WORD *)(a1 + 280) & 0x1FF;
  if ((v6 & 0x1000000000) == 0)
  {
LABEL_42:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_94:
  *(_DWORD *)(a2 + 76) = *(_DWORD *)(a1 + 288) & 0x1FFFF;
  if ((v6 & 0x2000000000) != 0)
LABEL_43:
    *(_WORD *)(a2 + 76) = *(_WORD *)(a1 + 296) & 0x1FFF;
LABEL_44:
  v7 = v6;
  if ((v6 & 0x4000000000) != 0)
  {
    *(_BYTE *)(a2 + 76) = *(_BYTE *)(a1 + 304) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x8000000000) != 0)
    *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 312);
  v8 = v7;
  if ((v7 & 0x10000000000) != 0)
  {
    *(_BYTE *)(a2 + 80) = *(_BYTE *)(a1 + 320) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x20000000000) == 0)
    {
LABEL_50:
      if ((v8 & 0x40000000000) == 0)
        goto LABEL_51;
      goto LABEL_98;
    }
  }
  else if ((v7 & 0x20000000000) == 0)
  {
    goto LABEL_50;
  }
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 328);
  if ((v8 & 0x40000000000) == 0)
  {
LABEL_51:
    if ((v8 & 0x80000000000) == 0)
      goto LABEL_52;
    goto LABEL_99;
  }
LABEL_98:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 336);
  if ((v8 & 0x80000000000) == 0)
  {
LABEL_52:
    if ((v8 & 0x100000000000) == 0)
      goto LABEL_53;
    goto LABEL_100;
  }
LABEL_99:
  *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 344) != 0;
  if ((v8 & 0x100000000000) == 0)
  {
LABEL_53:
    if ((v8 & 0x200000000000) == 0)
      goto LABEL_55;
    goto LABEL_54;
  }
LABEL_100:
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 352);
  if ((v8 & 0x200000000000) != 0)
LABEL_54:
    *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 360) != 0;
LABEL_55:
  if ((v8 & 0x400000000000) != 0)
    *(_BYTE *)(a2 + 101) = *(_QWORD *)(a1 + 368) != 0;
  if ((v8 & 0x800000000000) != 0)
    *(_BYTE *)(a2 + 104) = *(_QWORD *)(a1 + 376) != 0;
  v9 = ((unint64_t)(v2 & 2) >> 1)
     + (v2 & 1)
     + ((unint64_t)(v2 & 4) >> 2)
     + ((unint64_t)(v2 & 8) >> 3)
     + ((unint64_t)(v2 & 0x10) >> 4)
     + ((unint64_t)(v2 & 0x20) >> 5)
     + ((unint64_t)(v2 & 0x40) >> 6)
     + ((unint64_t)(v2 & 0x80) >> 7)
     + ((unint64_t)(v2 & 0x100) >> 8)
     + ((unint64_t)(v2 & 0x200) >> 9)
     + ((unint64_t)(v2 & 0x400) >> 10)
     + ((unint64_t)(v2 & 0x800) >> 11)
     + ((unint64_t)(v2 & 0x1000) >> 12)
     + ((unint64_t)(v2 & 0x2000) >> 13)
     + ((unint64_t)(v2 & 0x4000) >> 14)
     + ((unint64_t)((unsigned __int16)v2 & 0x8000) >> 15)
     + ((v2 & 0x10000uLL) >> 16)
     + ((v2 & 0x20000uLL) >> 17)
     + ((v2 & 0x40000uLL) >> 18)
     + ((v3 & 0x80000uLL) >> 19)
     + ((v3 & 0x100000uLL) >> 20)
     + ((v3 & 0x200000uLL) >> 21);
  return v9
       + ((v3 & 0x400000uLL) >> 22)
       + ((v3 & 0x800000uLL) >> 23)
       + ((v3 & 0x1000000) >> 24)
       + ((v4 & 0x2000000) >> 25)
       + ((v4 & 0x4000000) >> 26)
       + ((v5 & 0x8000000) >> 27)
       + ((v5 & 0x10000000) >> 28)
       + ((v5 & 0x20000000) >> 29)
       + ((v5 & 0x40000000) >> 30)
       + (v5 >> 31)
       + (BYTE4(v5) & 1)
       + ((v6 & 0x200000000uLL) >> 33)
       + ((v6 & 0x400000000uLL) >> 34)
       + ((v6 & 0x800000000uLL) >> 35)
       + ((v6 & 0x1000000000uLL) >> 36)
       + ((v6 & 0x2000000000uLL) >> 37)
       + ((v6 & 0x4000000000uLL) >> 38)
       + ((v7 & 0x8000000000uLL) >> 39)
       + ((v7 & 0x10000000000uLL) >> 40)
       + ((v8 & 0x20000000000uLL) >> 41)
       + ((v8 & 0x40000000000uLL) >> 42)
       + ((v8 & 0x80000000000uLL) >> 43)
       + ((v8 & 0x100000000000uLL) >> 44)
       + ((v8 & 0x200000000000uLL) >> 45)
       + ((v8 & 0x400000000000uLL) >> 46)
       + ((v8 & 0x800000000000uLL) >> 47);
}

unint64_t sub_1C4D528F4(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a1[156];
  if ((v2 & 1) != 0)
  {
    *(_DWORD *)a2 = *a1;
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_DWORD *)(a2 + 4) = a1[1];
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0)
      goto LABEL_5;
    goto LABEL_27;
  }
LABEL_26:
  *(_BYTE *)(a2 + 8) = a1[2] != 0;
  if ((v2 & 8) == 0)
  {
LABEL_5:
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_27:
  *(_BYTE *)(a2 + 9) = a1[3] != 0;
  if ((v2 & 0x10) == 0)
  {
LABEL_6:
    if ((v2 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_28:
  *(_BYTE *)(a2 + 10) = a1[4] != 0;
  if ((v2 & 0x20) == 0)
  {
LABEL_7:
    if ((v2 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_29:
  *(_BYTE *)(a2 + 11) = a1[5] != 0;
  if ((v2 & 0x40) == 0)
  {
LABEL_8:
    if ((v2 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_30:
  *(_BYTE *)(a2 + 12) = a1[6] != 0;
  if ((v2 & 0x80) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  *(_BYTE *)(a2 + 13) = a1[7] != 0;
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  *(_BYTE *)(a2 + 14) = a1[8] != 0;
  if ((v2 & 0x200) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  *(_BYTE *)(a2 + 15) = a1[9] != 0;
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  *(_DWORD *)(a2 + 16) = a1[10];
  if ((v2 & 0x800) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  *(_DWORD *)(a2 + 20) = a1[11];
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  *(_DWORD *)(a2 + 24) = a1[12];
  if ((v2 & 0x2000) == 0)
  {
LABEL_15:
    if ((v2 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  *(_DWORD *)(a2 + 28) = a1[13];
  if ((v2 & 0x4000) == 0)
  {
LABEL_16:
    if ((v2 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_38:
  *(_DWORD *)(a2 + 32) = a1[14];
  if ((v2 & 0x8000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_39:
  *(_DWORD *)(a2 + 36) = a1[15];
  if ((v2 & 0x10000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 40) = a1[16];
LABEL_19:
  if ((v2 & 0x20000) != 0)
    *(_DWORD *)(a2 + 44) = a1[17];
  if ((v2 & 0x40000) != 0)
    *(_BYTE *)(a2 + 48) = a1[18] != 0;
  return ((unint64_t)(v2 & 2) >> 1)
       + (v2 & 1)
       + ((unint64_t)(v2 & 4) >> 2)
       + ((unint64_t)(v2 & 8) >> 3)
       + ((unint64_t)(v2 & 0x10) >> 4)
       + ((unint64_t)(v2 & 0x20) >> 5)
       + ((unint64_t)(v2 & 0x40) >> 6)
       + ((unint64_t)(v2 & 0x80) >> 7)
       + ((unint64_t)(v2 & 0x100) >> 8)
       + ((unint64_t)(v2 & 0x200) >> 9)
       + ((unint64_t)(v2 & 0x400) >> 10)
       + ((unint64_t)(v2 & 0x800) >> 11)
       + ((unint64_t)(v2 & 0x1000) >> 12)
       + ((unint64_t)(v2 & 0x2000) >> 13)
       + ((unint64_t)(v2 & 0x4000) >> 14)
       + ((unint64_t)((unsigned __int16)v2 & 0x8000) >> 15)
       + ((v2 & 0x10000uLL) >> 16)
       + ((v2 & 0x20000uLL) >> 17)
       + ((v2 & 0x40000uLL) >> 18);
}

unint64_t sub_1C4D52B58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v16;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_46;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_47;
  }
LABEL_46:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_48;
  }
LABEL_47:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_48:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_52;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_53;
  }
LABEL_52:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_54;
  }
LABEL_53:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_55;
  }
LABEL_54:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_56;
  }
LABEL_55:
  *(_BYTE *)(a2 + 24) = *(_QWORD *)(a1 + 104) != 0;
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_57;
  }
LABEL_56:
  *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 112);
  if ((v5 & 0x8000) == 0)
  {
LABEL_20:
    if ((v5 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_58;
  }
LABEL_57:
  *(_DWORD *)(a2 + 32) = *(_QWORD *)(a1 + 120);
  if ((v5 & 0x10000) == 0)
  {
LABEL_21:
    if ((v5 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_59;
  }
LABEL_58:
  *(_BYTE *)(a2 + 36) = *(_QWORD *)(a1 + 128) != 0;
  if ((v5 & 0x20000) == 0)
  {
LABEL_22:
    if ((v5 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_60;
  }
LABEL_59:
  *(_BYTE *)(a2 + 37) = *(_QWORD *)(a1 + 136) != 0;
  if ((v5 & 0x40000) == 0)
  {
LABEL_23:
    if ((v5 & 0x80000) == 0)
      goto LABEL_24;
    goto LABEL_61;
  }
LABEL_60:
  *(_BYTE *)(a2 + 38) = *(_QWORD *)(a1 + 144) != 0;
  if ((v5 & 0x80000) == 0)
  {
LABEL_24:
    if ((v5 & 0x100000) == 0)
      goto LABEL_25;
    goto LABEL_62;
  }
LABEL_61:
  *(_BYTE *)(a2 + 39) = *(_QWORD *)(a1 + 152) != 0;
  if ((v5 & 0x100000) == 0)
  {
LABEL_25:
    if ((v5 & 0x200000) == 0)
      goto LABEL_26;
    goto LABEL_63;
  }
LABEL_62:
  *(_BYTE *)(a2 + 40) = *(_QWORD *)(a1 + 160) != 0;
  if ((v5 & 0x200000) == 0)
  {
LABEL_26:
    if ((v5 & 0x400000) == 0)
      goto LABEL_27;
    goto LABEL_64;
  }
LABEL_63:
  *(_BYTE *)(a2 + 41) = *(_QWORD *)(a1 + 168) != 0;
  if ((v5 & 0x400000) == 0)
  {
LABEL_27:
    if ((v5 & 0x800000) == 0)
      goto LABEL_28;
    goto LABEL_65;
  }
LABEL_64:
  *(_BYTE *)(a2 + 42) = *(_QWORD *)(a1 + 176) != 0;
  if ((v5 & 0x800000) == 0)
  {
LABEL_28:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_29;
    goto LABEL_66;
  }
LABEL_65:
  *(_BYTE *)(a2 + 43) = *(_QWORD *)(a1 + 184) != 0;
  if ((v5 & 0x1000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_30;
    goto LABEL_67;
  }
LABEL_66:
  *(_DWORD *)(a2 + 44) = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_31;
    goto LABEL_68;
  }
LABEL_67:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 200);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_32;
    goto LABEL_69;
  }
LABEL_68:
  *(_DWORD *)(a2 + 52) = *(_QWORD *)(a1 + 208);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_33;
    goto LABEL_70;
  }
LABEL_69:
  *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_34;
    goto LABEL_71;
  }
LABEL_70:
  *(_DWORD *)(a2 + 60) = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_35;
    goto LABEL_72;
  }
LABEL_71:
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 232);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_73;
  }
LABEL_72:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 240);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_37;
    goto LABEL_74;
  }
LABEL_73:
  *(_DWORD *)(a2 + 72) = *(_QWORD *)(a1 + 248);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_39;
    goto LABEL_38;
  }
LABEL_74:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 256);
  if ((v5 & 0x200000000) != 0)
LABEL_38:
    *(_DWORD *)(a2 + 80) = *(_QWORD *)(a1 + 264);
LABEL_39:
  v6 = v2 & 1;
  if ((v5 & 0x400000000) != 0)
    *(_BYTE *)(a2 + 84) = *(_QWORD *)(a1 + 272) != 0;
  v7 = v3 & 2;
  v8 = v3 & 4;
  v9 = v3 & 8;
  v10 = v3 & 0x10;
  v11 = v3 & 0x20;
  v12 = v3 & 0x40;
  if ((v5 & 0x800000000) != 0)
    *(_BYTE *)(a2 + 85) = *(_QWORD *)(a1 + 280) != 0;
  v14 = v5 & 0x1000000;
  v13 = v4 & 0x100;
  v16 = BYTE4(v5) & 1;
  return (v7 >> 1)
       + v6
       + (v8 >> 2)
       + (v9 >> 3)
       + (v10 >> 4)
       + (v11 >> 5)
       + (v12 >> 6)
       + ((unint64_t)(v4 & 0x80) >> 7)
       + (v13 >> 8)
       + ((unint64_t)(v5 & 0x200) >> 9)
       + ((unint64_t)(v5 & 0x400) >> 10)
       + ((unint64_t)(v5 & 0x800) >> 11)
       + ((unint64_t)(v5 & 0x1000) >> 12)
       + ((unint64_t)(v5 & 0x2000) >> 13)
       + ((unint64_t)(v5 & 0x4000) >> 14)
       + ((unint64_t)((unsigned __int16)v5 & 0x8000) >> 15)
       + ((v5 & 0x10000uLL) >> 16)
       + ((v5 & 0x20000uLL) >> 17)
       + ((v5 & 0x40000uLL) >> 18)
       + ((v5 & 0x80000uLL) >> 19)
       + ((v5 & 0x100000uLL) >> 20)
       + ((v5 & 0x200000uLL) >> 21)
       + ((v5 & 0x400000uLL) >> 22)
       + ((v5 & 0x800000uLL) >> 23)
       + (v14 >> 24)
       + ((v5 & 0x2000000) >> 25)
       + ((v5 & 0x4000000) >> 26)
       + ((v5 & 0x8000000) >> 27)
       + ((v5 & 0x10000000) >> 28)
       + ((v5 & 0x20000000) >> 29)
       + ((v5 & 0x40000000) >> 30)
       + (v5 >> 31)
       + v16
       + ((v5 & 0x200000000uLL) >> 33)
       + ((v5 & 0x400000000uLL) >> 34)
       + ((v5 & 0x800000000uLL) >> 35);
}

unint64_t sub_1C4D53044(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_63;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_64;
  }
LABEL_63:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_65;
  }
LABEL_64:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_65:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_69;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_70;
  }
LABEL_69:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_71;
  }
LABEL_70:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_71:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_BYTE *)(a2 + 24) = *(_QWORD *)(a1 + 104) != 0;
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_75;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_76;
  }
LABEL_75:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_77;
  }
LABEL_76:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_77:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_81;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_82;
  }
LABEL_81:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_83;
  }
LABEL_82:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_84;
  }
LABEL_83:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_85;
  }
LABEL_84:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v8 & 0x20000000) == 0)
      goto LABEL_38;
    goto LABEL_86;
  }
LABEL_85:
  *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 224);
  if ((v8 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x40000000) == 0)
      goto LABEL_39;
    goto LABEL_87;
  }
LABEL_86:
  *(_DWORD *)(a2 + 60) = *(_QWORD *)(a1 + 232);
  if ((v8 & 0x40000000) == 0)
  {
LABEL_39:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_88;
  }
LABEL_87:
  *(_BYTE *)(a2 + 64) = *(_QWORD *)(a1 + 240) != 0;
  if ((v8 & 0x80000000) == 0)
  {
LABEL_40:
    if ((v8 & 0x100000000) == 0)
      goto LABEL_41;
    goto LABEL_89;
  }
LABEL_88:
  *(_BYTE *)(a2 + 65) = *(_QWORD *)(a1 + 248) != 0;
  if ((v8 & 0x100000000) == 0)
  {
LABEL_41:
    if ((v8 & 0x200000000) == 0)
      goto LABEL_42;
    goto LABEL_90;
  }
LABEL_89:
  *(_BYTE *)(a2 + 66) = *(_QWORD *)(a1 + 256) != 0;
  if ((v8 & 0x200000000) == 0)
  {
LABEL_42:
    if ((v8 & 0x400000000) == 0)
      goto LABEL_43;
    goto LABEL_91;
  }
LABEL_90:
  *(_BYTE *)(a2 + 67) = *(_QWORD *)(a1 + 264) != 0;
  if ((v8 & 0x400000000) == 0)
  {
LABEL_43:
    if ((v8 & 0x800000000) == 0)
      goto LABEL_44;
    goto LABEL_92;
  }
LABEL_91:
  *(_BYTE *)(a2 + 68) = *(_QWORD *)(a1 + 272) != 0;
  if ((v8 & 0x800000000) == 0)
  {
LABEL_44:
    if ((v8 & 0x1000000000) == 0)
      goto LABEL_45;
    goto LABEL_93;
  }
LABEL_92:
  *(_BYTE *)(a2 + 69) = *(_QWORD *)(a1 + 280) != 0;
  if ((v8 & 0x1000000000) == 0)
  {
LABEL_45:
    if ((v8 & 0x2000000000) == 0)
      goto LABEL_46;
    goto LABEL_94;
  }
LABEL_93:
  *(_BYTE *)(a2 + 70) = *(_QWORD *)(a1 + 288) != 0;
  if ((v8 & 0x2000000000) == 0)
  {
LABEL_46:
    if ((v8 & 0x4000000000) == 0)
      goto LABEL_47;
    goto LABEL_95;
  }
LABEL_94:
  *(_BYTE *)(a2 + 71) = *(_QWORD *)(a1 + 296) != 0;
  if ((v8 & 0x4000000000) == 0)
  {
LABEL_47:
    if ((v8 & 0x8000000000) == 0)
      goto LABEL_48;
    goto LABEL_96;
  }
LABEL_95:
  *(_DWORD *)(a2 + 72) = *(_QWORD *)(a1 + 304);
  if ((v8 & 0x8000000000) == 0)
  {
LABEL_48:
    if ((v8 & 0x10000000000) == 0)
      goto LABEL_49;
    goto LABEL_97;
  }
LABEL_96:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 312);
  if ((v8 & 0x10000000000) == 0)
  {
LABEL_49:
    if ((v8 & 0x20000000000) == 0)
      goto LABEL_50;
    goto LABEL_98;
  }
LABEL_97:
  *(_DWORD *)(a2 + 80) = *(_QWORD *)(a1 + 320);
  if ((v8 & 0x20000000000) == 0)
  {
LABEL_50:
    if ((v8 & 0x40000000000) == 0)
      goto LABEL_51;
    goto LABEL_99;
  }
LABEL_98:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 328);
  if ((v8 & 0x40000000000) == 0)
  {
LABEL_51:
    if ((v8 & 0x80000000000) == 0)
      goto LABEL_52;
    goto LABEL_100;
  }
LABEL_99:
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 336);
  if ((v8 & 0x80000000000) == 0)
  {
LABEL_52:
    if ((v8 & 0x100000000000) == 0)
      goto LABEL_53;
    goto LABEL_101;
  }
LABEL_100:
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 344);
  if ((v8 & 0x100000000000) == 0)
  {
LABEL_53:
    if ((v8 & 0x200000000000) == 0)
      goto LABEL_54;
    goto LABEL_102;
  }
LABEL_101:
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 352);
  if ((v8 & 0x200000000000) == 0)
  {
LABEL_54:
    if ((v8 & 0x400000000000) == 0)
      goto LABEL_56;
    goto LABEL_55;
  }
LABEL_102:
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 360);
  if ((v8 & 0x400000000000) != 0)
LABEL_55:
    *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 368);
LABEL_56:
  if ((v8 & 0x800000000000) != 0)
    *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 376);
  if ((v8 & 0x1000000000000) != 0)
    *(_BYTE *)(a2 + 112) = *(_QWORD *)(a1 + 384) != 0;
  v9 = ((unint64_t)(v3 & 2) >> 1)
     + (v2 & 1)
     + ((unint64_t)(v3 & 4) >> 2)
     + ((unint64_t)(v3 & 8) >> 3)
     + ((unint64_t)(v3 & 0x10) >> 4)
     + ((unint64_t)(v3 & 0x20) >> 5)
     + ((unint64_t)(v3 & 0x40) >> 6)
     + ((unint64_t)(v4 & 0x80) >> 7)
     + ((unint64_t)(v4 & 0x100) >> 8)
     + ((unint64_t)(v5 & 0x200) >> 9)
     + ((unint64_t)(v5 & 0x400) >> 10)
     + ((unint64_t)(v5 & 0x800) >> 11)
     + ((unint64_t)(v5 & 0x1000) >> 12)
     + ((unint64_t)(v5 & 0x2000) >> 13)
     + ((unint64_t)(v5 & 0x4000) >> 14)
     + ((unint64_t)((unsigned __int16)v6 & 0x8000) >> 15)
     + ((v6 & 0x10000uLL) >> 16)
     + ((v6 & 0x20000uLL) >> 17)
     + ((v6 & 0x40000uLL) >> 18)
     + ((v6 & 0x80000uLL) >> 19)
     + ((v6 & 0x100000uLL) >> 20)
     + ((v7 & 0x200000uLL) >> 21)
     + ((v7 & 0x400000uLL) >> 22)
     + ((v8 & 0x800000uLL) >> 23)
     + ((v8 & 0x1000000) >> 24)
     + ((v8 & 0x2000000) >> 25)
     + ((v8 & 0x4000000) >> 26)
     + ((v8 & 0x8000000) >> 27)
     + ((v8 & 0x10000000) >> 28)
     + ((v8 & 0x20000000) >> 29)
     + ((v8 & 0x40000000) >> 30);
  return v9
       + (v8 >> 31)
       + (BYTE4(v8) & 1)
       + ((v8 & 0x200000000uLL) >> 33)
       + ((v8 & 0x400000000uLL) >> 34)
       + ((v8 & 0x800000000uLL) >> 35)
       + ((v8 & 0x1000000000uLL) >> 36)
       + ((v8 & 0x2000000000uLL) >> 37)
       + ((v8 & 0x4000000000uLL) >> 38)
       + ((v8 & 0x8000000000uLL) >> 39)
       + ((v8 & 0x10000000000uLL) >> 40)
       + ((v8 & 0x20000000000uLL) >> 41)
       + ((v8 & 0x40000000000uLL) >> 42)
       + ((v8 & 0x80000000000uLL) >> 43)
       + ((v8 & 0x100000000000uLL) >> 44)
       + ((v8 & 0x200000000000uLL) >> 45)
       + ((v8 & 0x400000000000uLL) >> 46)
       + ((v8 & 0x800000000000uLL) >> 47)
       + ((v8 & 0x1000000000000uLL) >> 48);
}

unint64_t sub_1C4D53734(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int v54;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_98;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_99;
  }
LABEL_98:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_100;
  }
LABEL_99:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_100:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_104;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_105;
  }
LABEL_104:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_106;
  }
LABEL_105:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_106:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_110;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_111;
  }
LABEL_110:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_112;
  }
LABEL_111:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_112:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_116;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_117;
  }
LABEL_116:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_118;
  }
LABEL_117:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_119;
  }
LABEL_118:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_38;
    goto LABEL_37;
  }
LABEL_119:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) != 0)
LABEL_37:
    *(_BYTE *)(a2 + 53) = *(_QWORD *)(a1 + 224) != 0;
LABEL_38:
  v9 = v8;
  if ((v8 & 0x20000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 232) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x40000000) == 0)
    {
LABEL_40:
      if ((v9 & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_123;
    }
  }
  else if ((v8 & 0x40000000) == 0)
  {
    goto LABEL_40;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 240);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_124;
  }
LABEL_123:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_43;
    goto LABEL_125;
  }
LABEL_124:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 256) & 0x1FF;
  if ((v9 & 0x200000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x400000000) == 0)
      goto LABEL_45;
    goto LABEL_44;
  }
LABEL_125:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 264) & 0x1FFFF;
  if ((v9 & 0x400000000) != 0)
LABEL_44:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 272) & 0x1FFF;
LABEL_45:
  v10 = v9;
  if ((v9 & 0x800000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 280) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x1000000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 288);
  v11 = v10;
  if ((v10 & 0x2000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 296) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x4000000000) == 0)
    {
LABEL_51:
      if ((v11 & 0x8000000000) == 0)
        goto LABEL_52;
      goto LABEL_129;
    }
  }
  else if ((v10 & 0x4000000000) == 0)
  {
    goto LABEL_51;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_130;
  }
LABEL_129:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 312);
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_131;
  }
LABEL_130:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 320) != 0;
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_56;
    goto LABEL_55;
  }
LABEL_131:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 328);
  if ((v11 & 0x40000000000) != 0)
LABEL_55:
    *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 336) != 0;
LABEL_56:
  v12 = v11;
  if ((v11 & 0x80000000000) != 0)
  {
    *(_BYTE *)(a2 + 84) = *(_BYTE *)(a1 + 344) & 1;
    v12 = *(_QWORD *)(a1 + 1248);
    if ((v12 & 0x100000000000) == 0)
    {
LABEL_58:
      if ((v12 & 0x200000000000) == 0)
        goto LABEL_59;
      goto LABEL_135;
    }
  }
  else if ((v11 & 0x100000000000) == 0)
  {
    goto LABEL_58;
  }
  *(_WORD *)(a2 + 84) = *(_QWORD *)(a1 + 352);
  if ((v12 & 0x200000000000) == 0)
  {
LABEL_59:
    if ((v12 & 0x400000000000) == 0)
      goto LABEL_60;
    goto LABEL_136;
  }
LABEL_135:
  *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 360) & 0x1FF;
  if ((v12 & 0x400000000000) == 0)
  {
LABEL_60:
    if ((v12 & 0x800000000000) == 0)
      goto LABEL_61;
    goto LABEL_137;
  }
LABEL_136:
  *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 368) & 0x1FF;
  if ((v12 & 0x800000000000) == 0)
  {
LABEL_61:
    if ((v12 & 0x1000000000000) == 0)
      goto LABEL_63;
    goto LABEL_62;
  }
LABEL_137:
  *(_DWORD *)(a2 + 84) = *(_DWORD *)(a1 + 376) & 0x1FFFF;
  if ((v12 & 0x1000000000000) != 0)
LABEL_62:
    *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 384) & 0x1FFF;
LABEL_63:
  v13 = v12;
  if ((v12 & 0x2000000000000) != 0)
  {
    *(_BYTE *)(a2 + 84) = *(_BYTE *)(a1 + 392) & 0x7F;
    v13 = *(_QWORD *)(a1 + 1248);
  }
  if ((v13 & 0x4000000000000) != 0)
    *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 400);
  v14 = v13;
  if ((v13 & 0x8000000000000) != 0)
  {
    *(_BYTE *)(a2 + 88) = *(_BYTE *)(a1 + 408) & 0xF;
    v14 = *(_QWORD *)(a1 + 1248);
    if ((v14 & 0x10000000000000) == 0)
    {
LABEL_69:
      if ((v14 & 0x20000000000000) == 0)
        goto LABEL_70;
      goto LABEL_141;
    }
  }
  else if ((v13 & 0x10000000000000) == 0)
  {
    goto LABEL_69;
  }
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 416);
  if ((v14 & 0x20000000000000) == 0)
  {
LABEL_70:
    if ((v14 & 0x40000000000000) == 0)
      goto LABEL_71;
    goto LABEL_142;
  }
LABEL_141:
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 424);
  if ((v14 & 0x40000000000000) == 0)
  {
LABEL_71:
    if ((v14 & 0x80000000000000) == 0)
      goto LABEL_72;
    goto LABEL_143;
  }
LABEL_142:
  *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 432) != 0;
  if ((v14 & 0x80000000000000) == 0)
  {
LABEL_72:
    if ((v14 & 0x100000000000000) == 0)
      goto LABEL_73;
    goto LABEL_144;
  }
LABEL_143:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 440);
  if ((v14 & 0x100000000000000) == 0)
  {
LABEL_73:
    if ((v14 & 0x200000000000000) == 0)
      goto LABEL_74;
    goto LABEL_145;
  }
LABEL_144:
  *(_BYTE *)(a2 + 108) = *(_QWORD *)(a1 + 448) != 0;
  if ((v14 & 0x200000000000000) == 0)
  {
LABEL_74:
    if ((v14 & 0x400000000000000) == 0)
      goto LABEL_75;
    goto LABEL_146;
  }
LABEL_145:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 456);
  if ((v14 & 0x400000000000000) == 0)
  {
LABEL_75:
    if ((v14 & 0x800000000000000) == 0)
      goto LABEL_76;
    goto LABEL_147;
  }
LABEL_146:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 464);
  if ((v14 & 0x800000000000000) == 0)
  {
LABEL_76:
    if ((v14 & 0x1000000000000000) == 0)
      goto LABEL_77;
    goto LABEL_148;
  }
LABEL_147:
  *(_BYTE *)(a2 + 120) = *(_QWORD *)(a1 + 472) != 0;
  if ((v14 & 0x1000000000000000) == 0)
  {
LABEL_77:
    if ((v14 & 0x2000000000000000) == 0)
      goto LABEL_78;
    goto LABEL_149;
  }
LABEL_148:
  *(_BYTE *)(a2 + 121) = *(_QWORD *)(a1 + 480) != 0;
  if ((v14 & 0x2000000000000000) == 0)
  {
LABEL_78:
    if ((v14 & 0x4000000000000000) == 0)
      goto LABEL_79;
LABEL_150:
    *(_BYTE *)(a2 + 123) = *(_QWORD *)(a1 + 496) != 0;
    if ((v14 & 0x8000000000000000) == 0)
      goto LABEL_80;
    goto LABEL_151;
  }
LABEL_149:
  *(_BYTE *)(a2 + 122) = *(_QWORD *)(a1 + 488) != 0;
  if ((v14 & 0x4000000000000000) != 0)
    goto LABEL_150;
LABEL_79:
  if ((v14 & 0x8000000000000000) == 0)
    goto LABEL_80;
LABEL_151:
  *(_BYTE *)(a2 + 124) = *(_QWORD *)(a1 + 504) != 0;
LABEL_80:
  v15 = *(_QWORD *)(a1 + 1256);
  if ((v15 & 1) != 0)
  {
    *(_BYTE *)(a2 + 125) = *(_QWORD *)(a1 + 512) != 0;
    if ((v15 & 2) == 0)
    {
LABEL_82:
      if ((v15 & 4) == 0)
        goto LABEL_83;
      goto LABEL_154;
    }
  }
  else if ((v15 & 2) == 0)
  {
    goto LABEL_82;
  }
  *(_BYTE *)(a2 + 126) = *(_QWORD *)(a1 + 520) != 0;
  if ((v15 & 4) == 0)
  {
LABEL_83:
    if ((v15 & 8) == 0)
      goto LABEL_84;
    goto LABEL_155;
  }
LABEL_154:
  *(_BYTE *)(a2 + 127) = *(_QWORD *)(a1 + 528) != 0;
  if ((v15 & 8) == 0)
  {
LABEL_84:
    if ((v15 & 0x10) == 0)
      goto LABEL_85;
    goto LABEL_156;
  }
LABEL_155:
  *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 536);
  if ((v15 & 0x10) == 0)
  {
LABEL_85:
    if ((v15 & 0x20) == 0)
      goto LABEL_86;
    goto LABEL_157;
  }
LABEL_156:
  *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 544);
  if ((v15 & 0x20) == 0)
  {
LABEL_86:
    if ((v15 & 0x40) == 0)
      goto LABEL_87;
    goto LABEL_158;
  }
LABEL_157:
  *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 552);
  if ((v15 & 0x40) == 0)
  {
LABEL_87:
    if ((v15 & 0x80) == 0)
      goto LABEL_88;
    goto LABEL_159;
  }
LABEL_158:
  *(_DWORD *)(a2 + 140) = *(_QWORD *)(a1 + 560);
  if ((v15 & 0x80) == 0)
  {
LABEL_88:
    if ((v15 & 0x100) == 0)
      goto LABEL_89;
    goto LABEL_160;
  }
LABEL_159:
  *(_DWORD *)(a2 + 144) = *(_QWORD *)(a1 + 568);
  if ((v15 & 0x100) == 0)
  {
LABEL_89:
    if ((v15 & 0x200) == 0)
      goto LABEL_91;
    goto LABEL_90;
  }
LABEL_160:
  *(_DWORD *)(a2 + 148) = *(_QWORD *)(a1 + 576);
  if ((v15 & 0x200) != 0)
LABEL_90:
    *(_DWORD *)(a2 + 152) = *(_QWORD *)(a1 + 584);
LABEL_91:
  v16 = v2 & 1;
  if ((v15 & 0x400) != 0)
    *(_DWORD *)(a2 + 156) = *(_QWORD *)(a1 + 592);
  v17 = v3 & 2;
  v18 = v3 & 4;
  v19 = v3 & 8;
  v20 = v3 & 0x10;
  v21 = v3 & 0x20;
  v22 = v3 & 0x40;
  v23 = v4 & 0x80;
  v24 = v4 & 0x100;
  v42 = v8 & 0x800000;
  v43 = v8 & 0x1000000;
  v44 = v8 & 0x2000000;
  v45 = v8 & 0x4000000;
  v46 = v8 & 0x8000000;
  v47 = v8 & 0x10000000;
  v32 = v8 & 0x20000000;
  v48 = v10 & 0x1000000000;
  v49 = v10 & 0x2000000000;
  if ((v15 & 0x800) != 0)
    *(_BYTE *)(a2 + 160) = *(_QWORD *)(a1 + 600) != 0;
  v31 = (unsigned __int16)v6 & 0x8000;
  v30 = v5 & 0x4000;
  v29 = v5 & 0x2000;
  v28 = v5 & 0x1000;
  v27 = v5 & 0x800;
  v26 = v5 & 0x400;
  v25 = v5 & 0x200;
  v35 = v6 & 0x10000;
  v36 = v6 & 0x20000;
  v37 = v6 & 0x40000;
  v38 = v6 & 0x80000;
  v39 = v6 & 0x100000;
  v40 = v7 & 0x200000;
  v41 = v7 & 0x400000;
  v50 = v11 & 0x4000000000;
  v51 = v11 & 0x8000000000;
  v52 = v11 & 0x10000000000;
  v33 = BYTE4(v9) & 1;
  LODWORD(v31) = (v17 >> 1)
               + v16
               + (v18 >> 2)
               + (v19 >> 3)
               + (v20 >> 4)
               + (v21 >> 5)
               + (v22 >> 6)
               + (v23 >> 7)
               + (v24 >> 8)
               + (v25 >> 9)
               + (v26 >> 10)
               + (v27 >> 11)
               + (v28 >> 12)
               + (v29 >> 13)
               + (v30 >> 14)
               + (v31 >> 15)
               + (v35 >> 16)
               + (v36 >> 17)
               + (v37 >> 18)
               + (v38 >> 19)
               + (v39 >> 20)
               + (v40 >> 21)
               + (v41 >> 22)
               + (v42 >> 23)
               + (v43 >> 24)
               + (v44 >> 25)
               + (v45 >> 26)
               + (v46 >> 27)
               + (v47 >> 28)
               + (v32 >> 29)
               + ((v9 & 0x40000000) >> 30)
               + (v9 >> 31)
               + v33
               + ((v9 & 0x200000000) >> 33)
               + ((v9 & 0x400000000) >> 34)
               + ((v9 & 0x800000000) >> 35)
               + (v48 >> 36)
               + (v49 >> 37)
               + (v50 >> 38)
               + (v51 >> 39)
               + (v52 >> 40)
               + ((v11 & 0x20000000000) >> 41)
               + ((v11 & 0x40000000000) >> 42);
  v53 = v11 & 0x80000000000;
  v54 = v15 & 1;
  return (_DWORD)v31
       + (v53 >> 43)
       + ((v12 & 0x100000000000) >> 44)
       + ((v12 & 0x200000000000) >> 45)
       + ((v12 & 0x400000000000) >> 46)
       + ((v12 & 0x800000000000) >> 47)
       + ((v12 & 0x1000000000000) >> 48)
       + ((v12 & 0x2000000000000) >> 49)
       + ((v13 & 0x4000000000000) >> 50)
       + ((v13 & 0x8000000000000) >> 51)
       + (v14 >> 63)
       + ((v14 & 0x10000000000000) >> 52)
       + ((v14 & 0x20000000000000) >> 53)
       + ((v14 & 0x40000000000000) >> 54)
       + ((v14 & 0x80000000000000) >> 55)
       + ((v14 & 0x100000000000000) >> 56)
       + ((v14 & 0x200000000000000) >> 57)
       + ((v14 & 0x400000000000000) >> 58)
       + ((v14 & 0x800000000000000) >> 59)
       + ((v14 & 0x1000000000000000) >> 60)
       + ((v14 & 0x2000000000000000) >> 61)
       + ((v14 & 0x4000000000000000) >> 62)
       + v54
       + ((unint64_t)(v15 & 2) >> 1)
       + ((unint64_t)(v15 & 4) >> 2)
       + ((unint64_t)(v15 & 8) >> 3)
       + ((unint64_t)(v15 & 0x10) >> 4)
       + ((unint64_t)(v15 & 0x20) >> 5)
       + ((unint64_t)(v15 & 0x40) >> 6)
       + ((unint64_t)(v15 & 0x80) >> 7)
       + ((unint64_t)(v15 & 0x100) >> 8)
       + ((unint64_t)(v15 & 0x200) >> 9)
       + ((unint64_t)(v15 & 0x400) >> 10)
       + ((unint64_t)(v15 & 0x800) >> 11);
}

unint64_t sub_1C4D54218(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_43;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_44;
  }
LABEL_43:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_45;
  }
LABEL_44:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_45:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_49;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_50;
  }
LABEL_49:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_51;
  }
LABEL_50:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_52;
  }
LABEL_51:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_53;
  }
LABEL_52:
  *(_BYTE *)(a2 + 24) = *(_QWORD *)(a1 + 104) != 0;
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_54;
  }
LABEL_53:
  *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 112);
  if ((v5 & 0x8000) == 0)
  {
LABEL_20:
    if ((v5 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_55;
  }
LABEL_54:
  *(_DWORD *)(a2 + 32) = *(_QWORD *)(a1 + 120);
  if ((v5 & 0x10000) == 0)
  {
LABEL_21:
    if ((v5 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_56;
  }
LABEL_55:
  *(_BYTE *)(a2 + 36) = *(_QWORD *)(a1 + 128) != 0;
  if ((v5 & 0x20000) == 0)
  {
LABEL_22:
    if ((v5 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_57;
  }
LABEL_56:
  *(_BYTE *)(a2 + 37) = *(_QWORD *)(a1 + 136) != 0;
  if ((v5 & 0x40000) == 0)
  {
LABEL_23:
    if ((v5 & 0x80000) == 0)
      goto LABEL_24;
    goto LABEL_58;
  }
LABEL_57:
  *(_BYTE *)(a2 + 38) = *(_QWORD *)(a1 + 144) != 0;
  if ((v5 & 0x80000) == 0)
  {
LABEL_24:
    if ((v5 & 0x100000) == 0)
      goto LABEL_25;
    goto LABEL_59;
  }
LABEL_58:
  *(_BYTE *)(a2 + 39) = *(_QWORD *)(a1 + 152) != 0;
  if ((v5 & 0x100000) == 0)
  {
LABEL_25:
    if ((v5 & 0x200000) == 0)
      goto LABEL_26;
    goto LABEL_60;
  }
LABEL_59:
  *(_BYTE *)(a2 + 40) = *(_QWORD *)(a1 + 160) != 0;
  if ((v5 & 0x200000) == 0)
  {
LABEL_26:
    if ((v5 & 0x400000) == 0)
      goto LABEL_27;
    goto LABEL_61;
  }
LABEL_60:
  *(_BYTE *)(a2 + 41) = *(_QWORD *)(a1 + 168) != 0;
  if ((v5 & 0x400000) == 0)
  {
LABEL_27:
    if ((v5 & 0x800000) == 0)
      goto LABEL_28;
    goto LABEL_62;
  }
LABEL_61:
  *(_BYTE *)(a2 + 42) = *(_QWORD *)(a1 + 176) != 0;
  if ((v5 & 0x800000) == 0)
  {
LABEL_28:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_29;
    goto LABEL_63;
  }
LABEL_62:
  *(_BYTE *)(a2 + 43) = *(_QWORD *)(a1 + 184) != 0;
  if ((v5 & 0x1000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_30;
    goto LABEL_64;
  }
LABEL_63:
  *(_DWORD *)(a2 + 44) = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_31;
    goto LABEL_65;
  }
LABEL_64:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 200);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_32;
    goto LABEL_66;
  }
LABEL_65:
  *(_DWORD *)(a2 + 52) = *(_QWORD *)(a1 + 208);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_33;
    goto LABEL_67;
  }
LABEL_66:
  *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_34;
    goto LABEL_68;
  }
LABEL_67:
  *(_DWORD *)(a2 + 60) = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_36;
    goto LABEL_35;
  }
LABEL_68:
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 232);
  if ((v5 & 0x40000000) != 0)
LABEL_35:
    *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 240);
LABEL_36:
  v6 = v2 & 1;
  if ((v5 & 0x80000000) != 0)
    *(_DWORD *)(a2 + 72) = *(_QWORD *)(a1 + 248);
  v7 = v3 & 2;
  v8 = v3 & 4;
  v9 = v3 & 8;
  v10 = v3 & 0x10;
  v11 = v3 & 0x20;
  v12 = v3 & 0x40;
  if ((v5 & 0x100000000) != 0)
    *(_BYTE *)(a2 + 76) = *(_QWORD *)(a1 + 256) != 0;
  return (v7 >> 1)
       + v6
       + (v8 >> 2)
       + (v9 >> 3)
       + (v10 >> 4)
       + (v11 >> 5)
       + (v12 >> 6)
       + ((unint64_t)(v4 & 0x80) >> 7)
       + ((unint64_t)(v4 & 0x100) >> 8)
       + ((unint64_t)(v5 & 0x200) >> 9)
       + ((unint64_t)(v5 & 0x400) >> 10)
       + ((unint64_t)(v5 & 0x800) >> 11)
       + ((unint64_t)(v5 & 0x1000) >> 12)
       + ((unint64_t)(v5 & 0x2000) >> 13)
       + ((unint64_t)(v5 & 0x4000) >> 14)
       + ((unint64_t)((unsigned __int16)v5 & 0x8000) >> 15)
       + ((v5 & 0x10000uLL) >> 16)
       + ((v5 & 0x20000uLL) >> 17)
       + ((v5 & 0x40000uLL) >> 18)
       + ((v5 & 0x80000uLL) >> 19)
       + ((v5 & 0x100000uLL) >> 20)
       + ((v5 & 0x200000uLL) >> 21)
       + ((v5 & 0x400000uLL) >> 22)
       + ((v5 & 0x800000uLL) >> 23)
       + ((v5 & 0x1000000) >> 24)
       + ((v5 & 0x2000000) >> 25)
       + ((v5 & 0x4000000) >> 26)
       + ((v5 & 0x8000000) >> 27)
       + ((v5 & 0x10000000) >> 28)
       + ((v5 & 0x20000000) >> 29)
       + ((v5 & 0x40000000) >> 30)
       + (v5 >> 31)
       + (BYTE4(v5) & 1);
}

unint64_t sub_1C4D54694(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int v78;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_102;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_103;
  }
LABEL_102:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_104;
  }
LABEL_103:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_104:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_108;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_109;
  }
LABEL_108:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_110;
  }
LABEL_109:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_111;
  }
LABEL_110:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_112;
  }
LABEL_111:
  *(_BYTE *)(a2 + 24) = *(_QWORD *)(a1 + 104) != 0;
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_113;
  }
LABEL_112:
  *(_BYTE *)(a2 + 25) = *(_QWORD *)(a1 + 112) != 0;
  if ((v5 & 0x8000) == 0)
  {
LABEL_20:
    if ((v5 & 0x10000) == 0)
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_113:
  *(_BYTE *)(a2 + 26) = *(_QWORD *)(a1 + 120) != 0;
  if ((v5 & 0x10000) != 0)
LABEL_21:
    *(_BYTE *)(a2 + 27) = *(_QWORD *)(a1 + 128) != 0;
LABEL_22:
  v6 = v5;
  if ((v5 & 0x20000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 136) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x40000) == 0)
    {
LABEL_24:
      if ((v6 & 0x80000) == 0)
        goto LABEL_25;
      goto LABEL_117;
    }
  }
  else if ((v5 & 0x40000) == 0)
  {
    goto LABEL_24;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 144);
  if ((v6 & 0x80000) == 0)
  {
LABEL_25:
    if ((v6 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_118;
  }
LABEL_117:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FF;
  if ((v6 & 0x100000) == 0)
  {
LABEL_26:
    if ((v6 & 0x200000) == 0)
      goto LABEL_27;
    goto LABEL_119;
  }
LABEL_118:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 160) & 0x1FF;
  if ((v6 & 0x200000) == 0)
  {
LABEL_27:
    if ((v6 & 0x400000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
LABEL_119:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 168) & 0x1FFFF;
  if ((v6 & 0x400000) != 0)
LABEL_28:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 176) & 0x1FFF;
LABEL_29:
  v7 = v6;
  if ((v6 & 0x800000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 184) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x1000000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 192);
  v8 = v7;
  if ((v7 & 0x2000000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 200) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x4000000) == 0)
    {
LABEL_35:
      if ((v8 & 0x8000000) == 0)
        goto LABEL_36;
      goto LABEL_123;
    }
  }
  else if ((v7 & 0x4000000) == 0)
  {
    goto LABEL_35;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_124;
  }
LABEL_123:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 216);
  if ((v8 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v8 & 0x20000000) == 0)
      goto LABEL_38;
    goto LABEL_125;
  }
LABEL_124:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 224) != 0;
  if ((v8 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x40000000) == 0)
      goto LABEL_39;
    goto LABEL_126;
  }
LABEL_125:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 232);
  if ((v8 & 0x40000000) == 0)
  {
LABEL_39:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_127;
  }
LABEL_126:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 240) != 0;
  if ((v8 & 0x80000000) == 0)
  {
LABEL_40:
    if ((v8 & 0x100000000) == 0)
      goto LABEL_41;
    goto LABEL_128;
  }
LABEL_127:
  *(_BYTE *)(a2 + 53) = *(_QWORD *)(a1 + 248) != 0;
  if ((v8 & 0x100000000) == 0)
  {
LABEL_41:
    if ((v8 & 0x200000000) == 0)
      goto LABEL_43;
    goto LABEL_42;
  }
LABEL_128:
  *(_BYTE *)(a2 + 54) = *(_QWORD *)(a1 + 256) != 0;
  if ((v8 & 0x200000000) != 0)
LABEL_42:
    *(_BYTE *)(a2 + 55) = *(_QWORD *)(a1 + 264) != 0;
LABEL_43:
  v9 = v8;
  if ((v8 & 0x400000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 272) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x800000000) == 0)
    {
LABEL_45:
      if ((v9 & 0x1000000000) == 0)
        goto LABEL_46;
      goto LABEL_132;
    }
  }
  else if ((v8 & 0x800000000) == 0)
  {
    goto LABEL_45;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 280);
  if ((v9 & 0x1000000000) == 0)
  {
LABEL_46:
    if ((v9 & 0x2000000000) == 0)
      goto LABEL_47;
    goto LABEL_133;
  }
LABEL_132:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 288) & 0x1FF;
  if ((v9 & 0x2000000000) == 0)
  {
LABEL_47:
    if ((v9 & 0x4000000000) == 0)
      goto LABEL_48;
    goto LABEL_134;
  }
LABEL_133:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 296) & 0x1FF;
  if ((v9 & 0x4000000000) == 0)
  {
LABEL_48:
    if ((v9 & 0x8000000000) == 0)
      goto LABEL_50;
    goto LABEL_49;
  }
LABEL_134:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 304) & 0x1FFFF;
  if ((v9 & 0x8000000000) != 0)
LABEL_49:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 312) & 0x1FFF;
LABEL_50:
  v10 = v9;
  if ((v9 & 0x10000000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 320) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x20000000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 328);
  v11 = v10;
  if ((v10 & 0x40000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 336) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x80000000000) == 0)
    {
LABEL_56:
      if ((v11 & 0x100000000000) == 0)
        goto LABEL_57;
      goto LABEL_138;
    }
  }
  else if ((v10 & 0x80000000000) == 0)
  {
    goto LABEL_56;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_139;
  }
LABEL_138:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 352);
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_140;
  }
LABEL_139:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_141;
  }
LABEL_140:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 368);
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_142;
  }
LABEL_141:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_62;
    goto LABEL_143;
  }
LABEL_142:
  *(_BYTE *)(a2 + 81) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x4000000000000) == 0)
      goto LABEL_63;
    goto LABEL_144;
  }
LABEL_143:
  *(_BYTE *)(a2 + 82) = *(_QWORD *)(a1 + 392) != 0;
  if ((v11 & 0x4000000000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x8000000000000) == 0)
      goto LABEL_65;
    goto LABEL_64;
  }
LABEL_144:
  *(_BYTE *)(a2 + 83) = *(_QWORD *)(a1 + 400) != 0;
  if ((v11 & 0x8000000000000) != 0)
LABEL_64:
    *(_BYTE *)(a2 + 84) = *(_QWORD *)(a1 + 408) != 0;
LABEL_65:
  v12 = v11;
  if ((v11 & 0x10000000000000) != 0)
  {
    *(_BYTE *)(a2 + 85) = *(_BYTE *)(a1 + 416) & 0xF;
    v12 = *(_QWORD *)(a1 + 1248);
    if ((v12 & 0x20000000000000) == 0)
    {
LABEL_67:
      if ((v12 & 0x40000000000000) == 0)
        goto LABEL_68;
      goto LABEL_148;
    }
  }
  else if ((v11 & 0x20000000000000) == 0)
  {
    goto LABEL_67;
  }
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 424);
  if ((v12 & 0x40000000000000) == 0)
  {
LABEL_68:
    if ((v12 & 0x80000000000000) == 0)
      goto LABEL_69;
    goto LABEL_149;
  }
LABEL_148:
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 432);
  if ((v12 & 0x80000000000000) == 0)
  {
LABEL_69:
    if ((v12 & 0x100000000000000) == 0)
      goto LABEL_70;
    goto LABEL_150;
  }
LABEL_149:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 440) != 0;
  if ((v12 & 0x100000000000000) == 0)
  {
LABEL_70:
    if ((v12 & 0x200000000000000) == 0)
      goto LABEL_71;
    goto LABEL_151;
  }
LABEL_150:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 448) != 0;
  if ((v12 & 0x200000000000000) == 0)
  {
LABEL_71:
    if ((v12 & 0x400000000000000) == 0)
      goto LABEL_72;
    goto LABEL_152;
  }
LABEL_151:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 456) != 0;
  if ((v12 & 0x400000000000000) == 0)
  {
LABEL_72:
    if ((v12 & 0x800000000000000) == 0)
      goto LABEL_73;
    goto LABEL_153;
  }
LABEL_152:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 464) != 0;
  if ((v12 & 0x800000000000000) == 0)
  {
LABEL_73:
    if ((v12 & 0x1000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_154;
  }
LABEL_153:
  *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 472) != 0;
  if ((v12 & 0x1000000000000000) == 0)
  {
LABEL_74:
    if ((v12 & 0x2000000000000000) == 0)
      goto LABEL_75;
    goto LABEL_155;
  }
LABEL_154:
  *(_BYTE *)(a2 + 101) = *(_QWORD *)(a1 + 480) != 0;
  if ((v12 & 0x2000000000000000) == 0)
  {
LABEL_75:
    if ((v12 & 0x4000000000000000) == 0)
      goto LABEL_76;
LABEL_156:
    *(_BYTE *)(a2 + 103) = *(_QWORD *)(a1 + 496) != 0;
    if ((v12 & 0x8000000000000000) == 0)
      goto LABEL_77;
    goto LABEL_157;
  }
LABEL_155:
  *(_BYTE *)(a2 + 102) = *(_QWORD *)(a1 + 488) != 0;
  if ((v12 & 0x4000000000000000) != 0)
    goto LABEL_156;
LABEL_76:
  if ((v12 & 0x8000000000000000) == 0)
    goto LABEL_77;
LABEL_157:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 504);
LABEL_77:
  v13 = *(_QWORD *)(a1 + 1256);
  if ((v13 & 1) != 0)
  {
    *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 512);
    if ((v13 & 2) == 0)
    {
LABEL_79:
      if ((v13 & 4) == 0)
        goto LABEL_80;
      goto LABEL_160;
    }
  }
  else if ((v13 & 2) == 0)
  {
    goto LABEL_79;
  }
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 520);
  if ((v13 & 4) == 0)
  {
LABEL_80:
    if ((v13 & 8) == 0)
      goto LABEL_81;
    goto LABEL_161;
  }
LABEL_160:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 528);
  if ((v13 & 8) == 0)
  {
LABEL_81:
    if ((v13 & 0x10) == 0)
      goto LABEL_82;
    goto LABEL_162;
  }
LABEL_161:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 536);
  if ((v13 & 0x10) == 0)
  {
LABEL_82:
    if ((v13 & 0x20) == 0)
      goto LABEL_83;
    goto LABEL_163;
  }
LABEL_162:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 544);
  if ((v13 & 0x20) == 0)
  {
LABEL_83:
    if ((v13 & 0x40) == 0)
      goto LABEL_84;
    goto LABEL_164;
  }
LABEL_163:
  *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 552);
  if ((v13 & 0x40) == 0)
  {
LABEL_84:
    if ((v13 & 0x80) == 0)
      goto LABEL_85;
    goto LABEL_165;
  }
LABEL_164:
  *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 560);
  if ((v13 & 0x80) == 0)
  {
LABEL_85:
    if ((v13 & 0x100) == 0)
      goto LABEL_86;
    goto LABEL_166;
  }
LABEL_165:
  *(_BYTE *)(a2 + 136) = *(_QWORD *)(a1 + 568) != 0;
  if ((v13 & 0x100) == 0)
  {
LABEL_86:
    if ((v13 & 0x200) == 0)
      goto LABEL_87;
    goto LABEL_167;
  }
LABEL_166:
  *(_DWORD *)(a2 + 140) = *(_QWORD *)(a1 + 576);
  if ((v13 & 0x200) == 0)
  {
LABEL_87:
    if ((v13 & 0x400) == 0)
      goto LABEL_88;
    goto LABEL_168;
  }
LABEL_167:
  *(_DWORD *)(a2 + 144) = *(_QWORD *)(a1 + 584);
  if ((v13 & 0x400) == 0)
  {
LABEL_88:
    if ((v13 & 0x800) == 0)
      goto LABEL_89;
    goto LABEL_169;
  }
LABEL_168:
  *(_DWORD *)(a2 + 148) = *(_QWORD *)(a1 + 592);
  if ((v13 & 0x800) == 0)
  {
LABEL_89:
    if ((v13 & 0x1000) == 0)
      goto LABEL_90;
    goto LABEL_170;
  }
LABEL_169:
  *(_BYTE *)(a2 + 152) = *(_QWORD *)(a1 + 600) != 0;
  if ((v13 & 0x1000) == 0)
  {
LABEL_90:
    if ((v13 & 0x2000) == 0)
      goto LABEL_91;
    goto LABEL_171;
  }
LABEL_170:
  *(_BYTE *)(a2 + 153) = *(_QWORD *)(a1 + 608) != 0;
  if ((v13 & 0x2000) == 0)
  {
LABEL_91:
    if ((v13 & 0x4000) == 0)
      goto LABEL_92;
    goto LABEL_172;
  }
LABEL_171:
  *(_BYTE *)(a2 + 154) = *(_QWORD *)(a1 + 616) != 0;
  if ((v13 & 0x4000) == 0)
  {
LABEL_92:
    if ((v13 & 0x8000) == 0)
      goto LABEL_93;
    goto LABEL_173;
  }
LABEL_172:
  *(_BYTE *)(a2 + 155) = *(_QWORD *)(a1 + 624) != 0;
  if ((v13 & 0x8000) == 0)
  {
LABEL_93:
    if ((v13 & 0x10000) == 0)
      goto LABEL_95;
    goto LABEL_94;
  }
LABEL_173:
  *(_BYTE *)(a2 + 156) = *(_QWORD *)(a1 + 632) != 0;
  if ((v13 & 0x10000) != 0)
LABEL_94:
    *(_BYTE *)(a2 + 157) = *(_QWORD *)(a1 + 640) != 0;
LABEL_95:
  v14 = v2 & 1;
  if ((v13 & 0x20000) != 0)
    *(_BYTE *)(a2 + 158) = *(_QWORD *)(a1 + 648) != 0;
  v15 = v3 & 2;
  v16 = v3 & 4;
  v17 = v3 & 8;
  v18 = v3 & 0x10;
  v19 = v3 & 0x20;
  v20 = v3 & 0x40;
  v21 = v4 & 0x80;
  v22 = v4 & 0x100;
  v23 = v5 & 0x200;
  v24 = v5 & 0x400;
  v25 = v5 & 0x800;
  v26 = v5 & 0x1000;
  v27 = v5 & 0x2000;
  v28 = v5 & 0x4000;
  v29 = (unsigned __int16)v5 & 0x8000;
  v30 = v5 & 0x10000;
  v31 = v5 & 0x20000;
  if ((v13 & 0x40000) != 0)
    *(_BYTE *)(a2 + 159) = *(_QWORD *)(a1 + 656) != 0;
  v34 = v6 & 0x40000;
  v35 = v6 & 0x80000;
  v36 = v6 & 0x100000;
  v37 = v6 & 0x200000;
  v38 = v8 & 0x200000000;
  v39 = v6 & 0x400000;
  v40 = v8 & 0x400000000;
  v41 = v6 & 0x800000;
  v42 = v7 & 0x1000000;
  v43 = v7 & 0x2000000;
  v44 = v9 & 0x800000000;
  v45 = v9 & 0x1000000000;
  v46 = v9 & 0x2000000000;
  v47 = v9 & 0x4000000000;
  v48 = v9 & 0x8000000000;
  v32 = (v15 >> 1)
      + v14
      + (v16 >> 2)
      + (v17 >> 3)
      + (v18 >> 4)
      + (v19 >> 5)
      + (v20 >> 6)
      + (v21 >> 7)
      + (v22 >> 8)
      + (v23 >> 9)
      + (v24 >> 10)
      + (v25 >> 11)
      + (v26 >> 12)
      + (v27 >> 13)
      + (v28 >> 14)
      + (v29 >> 15)
      + (v30 >> 16)
      + (v31 >> 17)
      + (v34 >> 18)
      + (v35 >> 19)
      + (v36 >> 20)
      + (v37 >> 21)
      + (v39 >> 22)
      + (v41 >> 23)
      + (v42 >> 24)
      + (v43 >> 25)
      + ((v8 & 0x4000000) >> 26)
      + ((v8 & 0x8000000) >> 27)
      + ((v8 & 0x10000000) >> 28)
      + ((v8 & 0x20000000) >> 29)
      + ((v8 & 0x40000000) >> 30)
      + (v8 >> 31)
      + (BYTE4(v8) & 1)
      + (v38 >> 33)
      + (v40 >> 34)
      + (v44 >> 35)
      + (v45 >> 36)
      + (v46 >> 37)
      + (v47 >> 38)
      + (v48 >> 39)
      + ((v9 & 0x10000000000) >> 40)
      + ((v10 & 0x20000000000) >> 41)
      + ((v10 & 0x40000000000) >> 42);
  v49 = v11 & 0x80000000000;
  v50 = v11 & 0x100000000000;
  v51 = v11 & 0x200000000000;
  v52 = v11 & 0x400000000000;
  v53 = v11 & 0x800000000000;
  v54 = v11 & 0x1000000000000;
  v55 = v11 & 0x2000000000000;
  v56 = v11 & 0x4000000000000;
  v57 = v11 & 0x8000000000000;
  v58 = v11 & 0x10000000000000;
  v59 = v12 & 0x20000000000000;
  v60 = v12 & 0x80000000000000;
  v61 = v12 & 0x40000000000000;
  v62 = v12 & 0x100000000000000;
  v63 = v12 & 0x200000000000000;
  v64 = v12 & 0x400000000000000;
  v65 = v13 & 0x20000;
  v66 = v13 & 0x10000;
  v67 = (unsigned __int16)v13 & 0x8000;
  v68 = v13 & 0x4000;
  v69 = v13 & 0x2000;
  v70 = v13 & 0x1000;
  v71 = v13 & 0x800;
  v72 = v13 & 0x400;
  v73 = v13 & 0x200;
  v74 = v13 & 0x100;
  v75 = v13 & 0x80;
  v76 = v13 & 0x40;
  v77 = v13 & 0x20;
  v78 = v13 & 1;
  return v32
       + (v49 >> 43)
       + (v50 >> 44)
       + (v51 >> 45)
       + (v52 >> 46)
       + (v53 >> 47)
       + HIWORD(v54)
       + (v55 >> 49)
       + (v56 >> 50)
       + (v57 >> 51)
       + (v58 >> 52)
       + (v12 >> 63)
       + (v59 >> 53)
       + (v61 >> 54)
       + (v60 >> 55)
       + HIBYTE(v62)
       + (v63 >> 57)
       + (v64 >> 58)
       + ((v12 & 0x800000000000000) >> 59)
       + ((v12 & 0x1000000000000000) >> 60)
       + ((v12 & 0x2000000000000000) >> 61)
       + ((v12 & 0x4000000000000000) >> 62)
       + v78
       + ((unint64_t)(v13 & 2) >> 1)
       + ((unint64_t)(v13 & 4) >> 2)
       + ((unint64_t)(v13 & 8) >> 3)
       + ((unint64_t)(v13 & 0x10) >> 4)
       + (v77 >> 5)
       + (v76 >> 6)
       + (v75 >> 7)
       + (v74 >> 8)
       + (v73 >> 9)
       + (v72 >> 10)
       + (v71 >> 11)
       + (v70 >> 12)
       + (v69 >> 13)
       + (v68 >> 14)
       + (v67 >> 15)
       + (v66 >> 16)
       + (v65 >> 17)
       + ((v13 & 0x40000uLL) >> 18);
}

unint64_t sub_1C4D5532C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_119;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_120;
  }
LABEL_119:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_121;
  }
LABEL_120:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_121:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_125;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_126;
  }
LABEL_125:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_127;
  }
LABEL_126:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_129;
  }
LABEL_128:
  *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
LABEL_129:
  *(_BYTE *)(a2 + 28) = *(_QWORD *)(a1 + 112) != 0;
  if ((v5 & 0x8000) != 0)
LABEL_20:
    *(_DWORD *)(a2 + 32) = *(_QWORD *)(a1 + 120);
LABEL_21:
  v6 = v5;
  if ((v5 & 0x10000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 128) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x20000) == 0)
    {
LABEL_23:
      if ((v6 & 0x40000) == 0)
        goto LABEL_24;
      goto LABEL_133;
    }
  }
  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_23;
  }
  *(_WORD *)(a2 + 36) = *(_QWORD *)(a1 + 136);
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_134;
  }
LABEL_133:
  *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 144) & 0x1FF;
  if ((v6 & 0x80000) == 0)
  {
LABEL_25:
    if ((v6 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_135;
  }
LABEL_134:
  *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 152) & 0x1FF;
  if ((v6 & 0x100000) == 0)
  {
LABEL_26:
    if ((v6 & 0x200000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_135:
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 160) & 0x1FFFF;
  if ((v6 & 0x200000) != 0)
LABEL_27:
    *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 168) & 0x1FFF;
LABEL_28:
  v7 = v6;
  if ((v6 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 176) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x800000) != 0)
    *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  v8 = v7;
  if ((v7 & 0x1000000) != 0)
  {
    *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 192) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x2000000) == 0)
    {
LABEL_34:
      if ((v8 & 0x4000000) == 0)
        goto LABEL_35;
      goto LABEL_139;
    }
  }
  else if ((v7 & 0x2000000) == 0)
  {
    goto LABEL_34;
  }
  *(_DWORD *)(a2 + 44) = *(_QWORD *)(a1 + 200);
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_140;
  }
LABEL_139:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_141;
  }
LABEL_140:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v8 & 0x20000000) == 0)
      goto LABEL_38;
    goto LABEL_142;
  }
LABEL_141:
  *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 224);
  if ((v8 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x40000000) == 0)
      goto LABEL_39;
    goto LABEL_143;
  }
LABEL_142:
  *(_BYTE *)(a2 + 60) = *(_QWORD *)(a1 + 232) != 0;
  if ((v8 & 0x40000000) == 0)
  {
LABEL_39:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_144;
  }
LABEL_143:
  *(_BYTE *)(a2 + 61) = *(_QWORD *)(a1 + 240) != 0;
  if ((v8 & 0x80000000) == 0)
  {
LABEL_40:
    if ((v8 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_41;
  }
LABEL_144:
  *(_BYTE *)(a2 + 62) = *(_QWORD *)(a1 + 248) != 0;
  if ((v8 & 0x100000000) != 0)
LABEL_41:
    *(_BYTE *)(a2 + 63) = *(_QWORD *)(a1 + 256) != 0;
LABEL_42:
  v9 = v8;
  if ((v8 & 0x200000000) != 0)
  {
    *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 264) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x400000000) == 0)
    {
LABEL_44:
      if ((v9 & 0x800000000) == 0)
        goto LABEL_45;
      goto LABEL_148;
    }
  }
  else if ((v8 & 0x400000000) == 0)
  {
    goto LABEL_44;
  }
  *(_WORD *)(a2 + 64) = *(_QWORD *)(a1 + 272);
  if ((v9 & 0x800000000) == 0)
  {
LABEL_45:
    if ((v9 & 0x1000000000) == 0)
      goto LABEL_46;
    goto LABEL_149;
  }
LABEL_148:
  *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 280) & 0x1FF;
  if ((v9 & 0x1000000000) == 0)
  {
LABEL_46:
    if ((v9 & 0x2000000000) == 0)
      goto LABEL_47;
    goto LABEL_150;
  }
LABEL_149:
  *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 288) & 0x1FF;
  if ((v9 & 0x2000000000) == 0)
  {
LABEL_47:
    if ((v9 & 0x4000000000) == 0)
      goto LABEL_49;
    goto LABEL_48;
  }
LABEL_150:
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 296) & 0x1FFFF;
  if ((v9 & 0x4000000000) != 0)
LABEL_48:
    *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 304) & 0x1FFF;
LABEL_49:
  v10 = v9;
  if ((v9 & 0x8000000000) != 0)
  {
    *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 312) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x10000000000) != 0)
    *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 320);
  v11 = v10;
  if ((v10 & 0x20000000000) != 0)
  {
    *(_BYTE *)(a2 + 68) = *(_BYTE *)(a1 + 328) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x40000000000) == 0)
    {
LABEL_55:
      if ((v11 & 0x80000000000) == 0)
        goto LABEL_56;
      goto LABEL_154;
    }
  }
  else if ((v10 & 0x40000000000) == 0)
  {
    goto LABEL_55;
  }
  *(_DWORD *)(a2 + 72) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_155;
  }
LABEL_154:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_156;
  }
LABEL_155:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_157;
  }
LABEL_156:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 360);
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_158;
  }
LABEL_157:
  *(_BYTE *)(a2 + 88) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_159;
  }
LABEL_158:
  *(_BYTE *)(a2 + 89) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_63;
    goto LABEL_62;
  }
LABEL_159:
  *(_BYTE *)(a2 + 90) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) != 0)
LABEL_62:
    *(_BYTE *)(a2 + 91) = *(_QWORD *)(a1 + 392) != 0;
LABEL_63:
  v12 = v11;
  if ((v11 & 0x4000000000000) != 0)
  {
    *(_BYTE *)(a2 + 92) = *(_BYTE *)(a1 + 400) & 1;
    v12 = *(_QWORD *)(a1 + 1248);
    if ((v12 & 0x8000000000000) == 0)
    {
LABEL_65:
      if ((v12 & 0x10000000000000) == 0)
        goto LABEL_66;
      goto LABEL_163;
    }
  }
  else if ((v11 & 0x8000000000000) == 0)
  {
    goto LABEL_65;
  }
  *(_WORD *)(a2 + 92) = *(_QWORD *)(a1 + 408);
  if ((v12 & 0x10000000000000) == 0)
  {
LABEL_66:
    if ((v12 & 0x20000000000000) == 0)
      goto LABEL_67;
    goto LABEL_164;
  }
LABEL_163:
  *(_WORD *)(a2 + 92) = *(_WORD *)(a1 + 416) & 0x1FF;
  if ((v12 & 0x20000000000000) == 0)
  {
LABEL_67:
    if ((v12 & 0x40000000000000) == 0)
      goto LABEL_68;
    goto LABEL_165;
  }
LABEL_164:
  *(_WORD *)(a2 + 92) = *(_WORD *)(a1 + 424) & 0x1FF;
  if ((v12 & 0x40000000000000) == 0)
  {
LABEL_68:
    if ((v12 & 0x80000000000000) == 0)
      goto LABEL_70;
    goto LABEL_69;
  }
LABEL_165:
  *(_DWORD *)(a2 + 92) = *(_DWORD *)(a1 + 432) & 0x1FFFF;
  if ((v12 & 0x80000000000000) != 0)
LABEL_69:
    *(_WORD *)(a2 + 92) = *(_WORD *)(a1 + 440) & 0x1FFF;
LABEL_70:
  v13 = v12;
  if ((v12 & 0x100000000000000) != 0)
  {
    *(_BYTE *)(a2 + 92) = *(_BYTE *)(a1 + 448) & 0x7F;
    v13 = *(_QWORD *)(a1 + 1248);
  }
  if ((v13 & 0x200000000000000) != 0)
    *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 456);
  v14 = v13;
  if ((v13 & 0x400000000000000) != 0)
  {
    *(_BYTE *)(a2 + 96) = *(_BYTE *)(a1 + 464) & 0xF;
    v14 = *(_QWORD *)(a1 + 1248);
    if ((v14 & 0x800000000000000) == 0)
    {
LABEL_76:
      if ((v14 & 0x1000000000000000) == 0)
        goto LABEL_77;
      goto LABEL_169;
    }
  }
  else if ((v13 & 0x800000000000000) == 0)
  {
    goto LABEL_76;
  }
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 472);
  if ((v14 & 0x1000000000000000) == 0)
  {
LABEL_77:
    if ((v14 & 0x2000000000000000) == 0)
      goto LABEL_78;
    goto LABEL_170;
  }
LABEL_169:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 480);
  if ((v14 & 0x2000000000000000) == 0)
  {
LABEL_78:
    if ((v14 & 0x4000000000000000) == 0)
      goto LABEL_79;
LABEL_171:
    *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 496);
    if ((v14 & 0x8000000000000000) == 0)
      goto LABEL_80;
    goto LABEL_172;
  }
LABEL_170:
  *(_BYTE *)(a2 + 108) = *(_QWORD *)(a1 + 488) != 0;
  if ((v14 & 0x4000000000000000) != 0)
    goto LABEL_171;
LABEL_79:
  if ((v14 & 0x8000000000000000) == 0)
    goto LABEL_80;
LABEL_172:
  *(_BYTE *)(a2 + 116) = *(_QWORD *)(a1 + 504) != 0;
LABEL_80:
  v15 = *(_QWORD *)(a1 + 1256);
  if ((v15 & 1) != 0)
  {
    *(_BYTE *)(a2 + 117) = *(_QWORD *)(a1 + 512) != 0;
    if ((v15 & 2) == 0)
    {
LABEL_82:
      if ((v15 & 4) == 0)
        goto LABEL_83;
      goto LABEL_175;
    }
  }
  else if ((v15 & 2) == 0)
  {
    goto LABEL_82;
  }
  *(_BYTE *)(a2 + 118) = *(_QWORD *)(a1 + 520) != 0;
  if ((v15 & 4) == 0)
  {
LABEL_83:
    if ((v15 & 8) == 0)
      goto LABEL_84;
    goto LABEL_176;
  }
LABEL_175:
  *(_BYTE *)(a2 + 119) = *(_QWORD *)(a1 + 528) != 0;
  if ((v15 & 8) == 0)
  {
LABEL_84:
    if ((v15 & 0x10) == 0)
      goto LABEL_85;
    goto LABEL_177;
  }
LABEL_176:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 536);
  if ((v15 & 0x10) == 0)
  {
LABEL_85:
    if ((v15 & 0x20) == 0)
      goto LABEL_86;
    goto LABEL_178;
  }
LABEL_177:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 544);
  if ((v15 & 0x20) == 0)
  {
LABEL_86:
    if ((v15 & 0x40) == 0)
      goto LABEL_87;
    goto LABEL_179;
  }
LABEL_178:
  *(_BYTE *)(a2 + 128) = *(_QWORD *)(a1 + 552) != 0;
  if ((v15 & 0x40) == 0)
  {
LABEL_87:
    if ((v15 & 0x80) == 0)
      goto LABEL_88;
    goto LABEL_180;
  }
LABEL_179:
  *(_BYTE *)(a2 + 129) = *(_QWORD *)(a1 + 560) != 0;
  if ((v15 & 0x80) == 0)
  {
LABEL_88:
    if ((v15 & 0x100) == 0)
      goto LABEL_89;
    goto LABEL_181;
  }
LABEL_180:
  *(_BYTE *)(a2 + 130) = *(_QWORD *)(a1 + 568) != 0;
  if ((v15 & 0x100) == 0)
  {
LABEL_89:
    if ((v15 & 0x200) == 0)
      goto LABEL_90;
    goto LABEL_182;
  }
LABEL_181:
  *(_BYTE *)(a2 + 131) = *(_QWORD *)(a1 + 576) != 0;
  if ((v15 & 0x200) == 0)
  {
LABEL_90:
    if ((v15 & 0x400) == 0)
      goto LABEL_91;
    goto LABEL_183;
  }
LABEL_182:
  *(_BYTE *)(a2 + 132) = *(_QWORD *)(a1 + 584) != 0;
  if ((v15 & 0x400) == 0)
  {
LABEL_91:
    if ((v15 & 0x800) == 0)
      goto LABEL_92;
    goto LABEL_184;
  }
LABEL_183:
  *(_BYTE *)(a2 + 133) = *(_QWORD *)(a1 + 592) != 0;
  if ((v15 & 0x800) == 0)
  {
LABEL_92:
    if ((v15 & 0x1000) == 0)
      goto LABEL_93;
    goto LABEL_185;
  }
LABEL_184:
  *(_BYTE *)(a2 + 134) = *(_QWORD *)(a1 + 600) != 0;
  if ((v15 & 0x1000) == 0)
  {
LABEL_93:
    if ((v15 & 0x2000) == 0)
      goto LABEL_94;
    goto LABEL_186;
  }
LABEL_185:
  *(_BYTE *)(a2 + 135) = *(_QWORD *)(a1 + 608) != 0;
  if ((v15 & 0x2000) == 0)
  {
LABEL_94:
    if ((v15 & 0x4000) == 0)
      goto LABEL_95;
    goto LABEL_187;
  }
LABEL_186:
  *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 616);
  if ((v15 & 0x4000) == 0)
  {
LABEL_95:
    if ((v15 & 0x8000) == 0)
      goto LABEL_96;
    goto LABEL_188;
  }
LABEL_187:
  *(_DWORD *)(a2 + 140) = *(_QWORD *)(a1 + 624);
  if ((v15 & 0x8000) == 0)
  {
LABEL_96:
    if ((v15 & 0x10000) == 0)
      goto LABEL_97;
    goto LABEL_189;
  }
LABEL_188:
  *(_DWORD *)(a2 + 144) = *(_QWORD *)(a1 + 632);
  if ((v15 & 0x10000) == 0)
  {
LABEL_97:
    if ((v15 & 0x20000) == 0)
      goto LABEL_98;
    goto LABEL_190;
  }
LABEL_189:
  *(_DWORD *)(a2 + 148) = *(_QWORD *)(a1 + 640);
  if ((v15 & 0x20000) == 0)
  {
LABEL_98:
    if ((v15 & 0x40000) == 0)
      goto LABEL_99;
    goto LABEL_191;
  }
LABEL_190:
  *(_DWORD *)(a2 + 152) = *(_QWORD *)(a1 + 648);
  if ((v15 & 0x40000) == 0)
  {
LABEL_99:
    if ((v15 & 0x80000) == 0)
      goto LABEL_100;
    goto LABEL_192;
  }
LABEL_191:
  *(_DWORD *)(a2 + 156) = *(_QWORD *)(a1 + 656);
  if ((v15 & 0x80000) == 0)
  {
LABEL_100:
    if ((v15 & 0x100000) == 0)
      goto LABEL_101;
    goto LABEL_193;
  }
LABEL_192:
  *(_DWORD *)(a2 + 160) = *(_QWORD *)(a1 + 664);
  if ((v15 & 0x100000) == 0)
  {
LABEL_101:
    if ((v15 & 0x200000) == 0)
      goto LABEL_102;
    goto LABEL_194;
  }
LABEL_193:
  *(_DWORD *)(a2 + 164) = *(_QWORD *)(a1 + 672);
  if ((v15 & 0x200000) == 0)
  {
LABEL_102:
    if ((v15 & 0x400000) == 0)
      goto LABEL_103;
    goto LABEL_195;
  }
LABEL_194:
  *(_BYTE *)(a2 + 168) = *(_QWORD *)(a1 + 680) != 0;
  if ((v15 & 0x400000) == 0)
  {
LABEL_103:
    if ((v15 & 0x800000) == 0)
      goto LABEL_104;
    goto LABEL_196;
  }
LABEL_195:
  *(_DWORD *)(a2 + 172) = *(_QWORD *)(a1 + 688);
  if ((v15 & 0x800000) == 0)
  {
LABEL_104:
    if ((v15 & 0x1000000) == 0)
      goto LABEL_105;
    goto LABEL_197;
  }
LABEL_196:
  *(_DWORD *)(a2 + 176) = *(_QWORD *)(a1 + 696);
  if ((v15 & 0x1000000) == 0)
  {
LABEL_105:
    if ((v15 & 0x2000000) == 0)
      goto LABEL_106;
    goto LABEL_198;
  }
LABEL_197:
  *(_DWORD *)(a2 + 180) = *(_QWORD *)(a1 + 704);
  if ((v15 & 0x2000000) == 0)
  {
LABEL_106:
    if ((v15 & 0x4000000) == 0)
      goto LABEL_107;
    goto LABEL_199;
  }
LABEL_198:
  *(_DWORD *)(a2 + 184) = *(_QWORD *)(a1 + 712);
  if ((v15 & 0x4000000) == 0)
  {
LABEL_107:
    if ((v15 & 0x8000000) == 0)
      goto LABEL_108;
    goto LABEL_200;
  }
LABEL_199:
  *(_DWORD *)(a2 + 188) = *(_QWORD *)(a1 + 720);
  if ((v15 & 0x8000000) == 0)
  {
LABEL_108:
    if ((v15 & 0x10000000) == 0)
      goto LABEL_109;
    goto LABEL_201;
  }
LABEL_200:
  *(_DWORD *)(a2 + 192) = *(_QWORD *)(a1 + 728);
  if ((v15 & 0x10000000) == 0)
  {
LABEL_109:
    if ((v15 & 0x20000000) == 0)
      goto LABEL_110;
    goto LABEL_202;
  }
LABEL_201:
  *(_DWORD *)(a2 + 196) = *(_QWORD *)(a1 + 736);
  if ((v15 & 0x20000000) == 0)
  {
LABEL_110:
    if ((v15 & 0x40000000) == 0)
      goto LABEL_112;
    goto LABEL_111;
  }
LABEL_202:
  *(_DWORD *)(a2 + 200) = *(_QWORD *)(a1 + 744);
  if ((v15 & 0x40000000) != 0)
LABEL_111:
    *(_DWORD *)(a2 + 204) = *(_QWORD *)(a1 + 752);
LABEL_112:
  if ((v15 & 0x80000000) != 0)
    *(_DWORD *)(a2 + 208) = *(_QWORD *)(a1 + 760);
  v24 = v11 & 0x40000000000;
  v25 = v11 & 0x80000000000;
  v26 = v11 & 0x100000000000;
  v27 = v11 & 0x200000000000;
  v28 = v11 & 0x400000000000;
  v29 = v11 & 0x800000000000;
  v30 = v11 & 0x1000000000000;
  v31 = v11 & 0x2000000000000;
  v32 = v11 & 0x4000000000000;
  v33 = v12 & 0x8000000000000;
  v34 = v12 & 0x10000000000000;
  v35 = v12 & 0x20000000000000;
  v36 = v12 & 0x40000000000000;
  v37 = v12 & 0x80000000000000;
  v38 = v12 & 0x100000000000000;
  if ((v15 & 0x100000000) != 0)
    *(_DWORD *)(a2 + 212) = *(_QWORD *)(a1 + 768);
  v18 = ((v3 & 2) >> 1)
      + (v2 & 1)
      + ((v3 & 4) >> 2)
      + ((v3 & 8) >> 3)
      + ((v3 & 0x10) >> 4)
      + ((v3 & 0x20) >> 5)
      + ((v3 & 0x40) >> 6)
      + ((unint64_t)(v4 & 0x80) >> 7)
      + ((v4 & 0x100) >> 8)
      + ((v5 & 0x200) >> 9)
      + ((v5 & 0x400) >> 10)
      + ((v5 & 0x800) >> 11)
      + ((v5 & 0x1000) >> 12)
      + ((v5 & 0x2000) >> 13)
      + ((v5 & 0x4000) >> 14)
      + ((unint64_t)((unsigned __int16)v5 & 0x8000) >> 15)
      + ((v5 & 0x10000) >> 16)
      + ((v6 & 0x20000) >> 17)
      + ((v6 & 0x40000) >> 18)
      + ((v6 & 0x80000) >> 19)
      + ((v6 & 0x100000) >> 20)
      + ((v6 & 0x200000) >> 21)
      + ((v6 & 0x400000) >> 22)
      + ((v7 & 0x800000) >> 23)
      + ((v7 & 0x1000000) >> 24)
      + ((v8 & 0x2000000) >> 25)
      + ((v8 & 0x4000000) >> 26)
      + ((v8 & 0x8000000) >> 27)
      + ((v8 & 0x10000000) >> 28);
  v16 = v8 & 0x40000000;
  v21 = v8 & 0x200000000;
  v22 = v9 & 0x400000000;
  v23 = v9 & 0x800000000;
  v39 = v15 & 1;
  v17 = BYTE4(v8) & 1;
  v19 = v18
      + ((v8 & 0x20000000) >> 29)
      + (v16 >> 30)
      + (v8 >> 31)
      + v17
      + (v21 >> 33)
      + (v22 >> 34)
      + (v23 >> 35)
      + ((v9 & 0x1000000000) >> 36)
      + ((v9 & 0x2000000000) >> 37)
      + ((v9 & 0x4000000000) >> 38)
      + ((v9 & 0x8000000000) >> 39)
      + ((v10 & 0x10000000000) >> 40)
      + ((v10 & 0x20000000000) >> 41)
      + (v24 >> 42)
      + (v25 >> 43)
      + (v26 >> 44)
      + (v27 >> 45)
      + (v28 >> 46)
      + (v29 >> 47)
      + HIWORD(v30)
      + (v31 >> 49)
      + (v32 >> 50)
      + (v33 >> 51)
      + (v34 >> 52)
      + (v35 >> 53)
      + (v36 >> 54)
      + (v37 >> 55)
      + HIBYTE(v38)
      + ((v13 & 0x200000000000000) >> 57)
      + ((v13 & 0x400000000000000) >> 58)
      + (v14 >> 63)
      + ((v14 & 0x800000000000000) >> 59)
      + ((v14 & 0x1000000000000000) >> 60)
      + ((v14 & 0x2000000000000000) >> 61)
      + ((v14 & 0x4000000000000000) >> 62)
      + v39
      + ((unint64_t)(v15 & 2) >> 1)
      + ((unint64_t)(v15 & 4) >> 2)
      + ((unint64_t)(v15 & 8) >> 3);
  return v19
       + ((unint64_t)(v15 & 0x10) >> 4)
       + ((unint64_t)(v15 & 0x20) >> 5)
       + ((unint64_t)(v15 & 0x40) >> 6)
       + ((unint64_t)(v15 & 0x80) >> 7)
       + ((unint64_t)(v15 & 0x100) >> 8)
       + ((unint64_t)(v15 & 0x200) >> 9)
       + ((unint64_t)(v15 & 0x400) >> 10)
       + ((unint64_t)(v15 & 0x800) >> 11)
       + ((unint64_t)(v15 & 0x1000) >> 12)
       + ((unint64_t)(v15 & 0x2000) >> 13)
       + ((unint64_t)(v15 & 0x4000) >> 14)
       + ((unint64_t)((unsigned __int16)v15 & 0x8000) >> 15)
       + ((v15 & 0x10000uLL) >> 16)
       + ((v15 & 0x20000uLL) >> 17)
       + ((v15 & 0x40000uLL) >> 18)
       + ((v15 & 0x80000uLL) >> 19)
       + ((v15 & 0x100000uLL) >> 20)
       + ((v15 & 0x200000uLL) >> 21)
       + ((v15 & 0x400000uLL) >> 22)
       + ((v15 & 0x800000uLL) >> 23)
       + ((v15 & 0x1000000) >> 24)
       + ((v15 & 0x2000000) >> 25)
       + ((v15 & 0x4000000) >> 26)
       + ((v15 & 0x8000000) >> 27)
       + ((v15 & 0x10000000) >> 28)
       + ((v15 & 0x20000000) >> 29)
       + ((v15 & 0x40000000) >> 30)
       + (v15 >> 31)
       + (BYTE4(v15) & 1);
}

unint64_t sub_1C4D56158(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_119;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_120;
  }
LABEL_119:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_121;
  }
LABEL_120:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_121:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_125;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_126;
  }
LABEL_125:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_127;
  }
LABEL_126:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_129;
  }
LABEL_128:
  *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
LABEL_129:
  *(_BYTE *)(a2 + 28) = *(_QWORD *)(a1 + 112) != 0;
  if ((v5 & 0x8000) != 0)
LABEL_20:
    *(_DWORD *)(a2 + 32) = *(_QWORD *)(a1 + 120);
LABEL_21:
  v6 = v5;
  if ((v5 & 0x10000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 128) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x20000) == 0)
    {
LABEL_23:
      if ((v6 & 0x40000) == 0)
        goto LABEL_24;
      goto LABEL_133;
    }
  }
  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_23;
  }
  *(_WORD *)(a2 + 36) = *(_QWORD *)(a1 + 136);
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_134;
  }
LABEL_133:
  *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 144) & 0x1FF;
  if ((v6 & 0x80000) == 0)
  {
LABEL_25:
    if ((v6 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_135;
  }
LABEL_134:
  *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 152) & 0x1FF;
  if ((v6 & 0x100000) == 0)
  {
LABEL_26:
    if ((v6 & 0x200000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_135:
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 160) & 0x1FFFF;
  if ((v6 & 0x200000) != 0)
LABEL_27:
    *(_WORD *)(a2 + 36) = *(_WORD *)(a1 + 168) & 0x1FFF;
LABEL_28:
  v7 = v6;
  if ((v6 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 176) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x800000) != 0)
    *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  v8 = v7;
  if ((v7 & 0x1000000) != 0)
  {
    *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 192) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x2000000) == 0)
    {
LABEL_34:
      if ((v8 & 0x4000000) == 0)
        goto LABEL_35;
      goto LABEL_139;
    }
  }
  else if ((v7 & 0x2000000) == 0)
  {
    goto LABEL_34;
  }
  *(_DWORD *)(a2 + 44) = *(_QWORD *)(a1 + 200);
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_140;
  }
LABEL_139:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_141;
  }
LABEL_140:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v8 & 0x20000000) == 0)
      goto LABEL_38;
    goto LABEL_142;
  }
LABEL_141:
  *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 224);
  if ((v8 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x40000000) == 0)
      goto LABEL_39;
    goto LABEL_143;
  }
LABEL_142:
  *(_BYTE *)(a2 + 60) = *(_QWORD *)(a1 + 232) != 0;
  if ((v8 & 0x40000000) == 0)
  {
LABEL_39:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_144;
  }
LABEL_143:
  *(_BYTE *)(a2 + 61) = *(_QWORD *)(a1 + 240) != 0;
  if ((v8 & 0x80000000) == 0)
  {
LABEL_40:
    if ((v8 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_41;
  }
LABEL_144:
  *(_BYTE *)(a2 + 62) = *(_QWORD *)(a1 + 248) != 0;
  if ((v8 & 0x100000000) != 0)
LABEL_41:
    *(_BYTE *)(a2 + 63) = *(_QWORD *)(a1 + 256) != 0;
LABEL_42:
  v9 = v8;
  if ((v8 & 0x200000000) != 0)
  {
    *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 264) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x400000000) == 0)
    {
LABEL_44:
      if ((v9 & 0x800000000) == 0)
        goto LABEL_45;
      goto LABEL_148;
    }
  }
  else if ((v8 & 0x400000000) == 0)
  {
    goto LABEL_44;
  }
  *(_WORD *)(a2 + 64) = *(_QWORD *)(a1 + 272);
  if ((v9 & 0x800000000) == 0)
  {
LABEL_45:
    if ((v9 & 0x1000000000) == 0)
      goto LABEL_46;
    goto LABEL_149;
  }
LABEL_148:
  *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 280) & 0x1FF;
  if ((v9 & 0x1000000000) == 0)
  {
LABEL_46:
    if ((v9 & 0x2000000000) == 0)
      goto LABEL_47;
    goto LABEL_150;
  }
LABEL_149:
  *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 288) & 0x1FF;
  if ((v9 & 0x2000000000) == 0)
  {
LABEL_47:
    if ((v9 & 0x4000000000) == 0)
      goto LABEL_49;
    goto LABEL_48;
  }
LABEL_150:
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 296) & 0x1FFFF;
  if ((v9 & 0x4000000000) != 0)
LABEL_48:
    *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 304) & 0x1FFF;
LABEL_49:
  v10 = v9;
  if ((v9 & 0x8000000000) != 0)
  {
    *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 312) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x10000000000) != 0)
    *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 320);
  v11 = v10;
  if ((v10 & 0x20000000000) != 0)
  {
    *(_BYTE *)(a2 + 68) = *(_BYTE *)(a1 + 328) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x40000000000) == 0)
    {
LABEL_55:
      if ((v11 & 0x80000000000) == 0)
        goto LABEL_56;
      goto LABEL_154;
    }
  }
  else if ((v10 & 0x40000000000) == 0)
  {
    goto LABEL_55;
  }
  *(_DWORD *)(a2 + 72) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_155;
  }
LABEL_154:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_156;
  }
LABEL_155:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_157;
  }
LABEL_156:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 360);
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_60;
    goto LABEL_158;
  }
LABEL_157:
  *(_BYTE *)(a2 + 88) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) == 0)
  {
LABEL_60:
    if ((v11 & 0x1000000000000) == 0)
      goto LABEL_61;
    goto LABEL_159;
  }
LABEL_158:
  *(_BYTE *)(a2 + 89) = *(_QWORD *)(a1 + 376) != 0;
  if ((v11 & 0x1000000000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000000000) == 0)
      goto LABEL_63;
    goto LABEL_62;
  }
LABEL_159:
  *(_BYTE *)(a2 + 90) = *(_QWORD *)(a1 + 384) != 0;
  if ((v11 & 0x2000000000000) != 0)
LABEL_62:
    *(_BYTE *)(a2 + 91) = *(_QWORD *)(a1 + 392) != 0;
LABEL_63:
  v12 = v11;
  if ((v11 & 0x4000000000000) != 0)
  {
    *(_BYTE *)(a2 + 92) = *(_BYTE *)(a1 + 400) & 1;
    v12 = *(_QWORD *)(a1 + 1248);
    if ((v12 & 0x8000000000000) == 0)
    {
LABEL_65:
      if ((v12 & 0x10000000000000) == 0)
        goto LABEL_66;
      goto LABEL_163;
    }
  }
  else if ((v11 & 0x8000000000000) == 0)
  {
    goto LABEL_65;
  }
  *(_WORD *)(a2 + 92) = *(_QWORD *)(a1 + 408);
  if ((v12 & 0x10000000000000) == 0)
  {
LABEL_66:
    if ((v12 & 0x20000000000000) == 0)
      goto LABEL_67;
    goto LABEL_164;
  }
LABEL_163:
  *(_WORD *)(a2 + 92) = *(_WORD *)(a1 + 416) & 0x1FF;
  if ((v12 & 0x20000000000000) == 0)
  {
LABEL_67:
    if ((v12 & 0x40000000000000) == 0)
      goto LABEL_68;
    goto LABEL_165;
  }
LABEL_164:
  *(_WORD *)(a2 + 92) = *(_WORD *)(a1 + 424) & 0x1FF;
  if ((v12 & 0x40000000000000) == 0)
  {
LABEL_68:
    if ((v12 & 0x80000000000000) == 0)
      goto LABEL_70;
    goto LABEL_69;
  }
LABEL_165:
  *(_DWORD *)(a2 + 92) = *(_DWORD *)(a1 + 432) & 0x1FFFF;
  if ((v12 & 0x80000000000000) != 0)
LABEL_69:
    *(_WORD *)(a2 + 92) = *(_WORD *)(a1 + 440) & 0x1FFF;
LABEL_70:
  v13 = v12;
  if ((v12 & 0x100000000000000) != 0)
  {
    *(_BYTE *)(a2 + 92) = *(_BYTE *)(a1 + 448) & 0x7F;
    v13 = *(_QWORD *)(a1 + 1248);
  }
  if ((v13 & 0x200000000000000) != 0)
    *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 456);
  v14 = v13;
  if ((v13 & 0x400000000000000) != 0)
  {
    *(_BYTE *)(a2 + 96) = *(_BYTE *)(a1 + 464) & 0xF;
    v14 = *(_QWORD *)(a1 + 1248);
    if ((v14 & 0x800000000000000) == 0)
    {
LABEL_76:
      if ((v14 & 0x1000000000000000) == 0)
        goto LABEL_77;
      goto LABEL_169;
    }
  }
  else if ((v13 & 0x800000000000000) == 0)
  {
    goto LABEL_76;
  }
  *(_DWORD *)(a2 + 100) = *(_QWORD *)(a1 + 472);
  if ((v14 & 0x1000000000000000) == 0)
  {
LABEL_77:
    if ((v14 & 0x2000000000000000) == 0)
      goto LABEL_78;
    goto LABEL_170;
  }
LABEL_169:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 480);
  if ((v14 & 0x2000000000000000) == 0)
  {
LABEL_78:
    if ((v14 & 0x4000000000000000) == 0)
      goto LABEL_79;
LABEL_171:
    *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 496);
    if ((v14 & 0x8000000000000000) == 0)
      goto LABEL_80;
    goto LABEL_172;
  }
LABEL_170:
  *(_BYTE *)(a2 + 108) = *(_QWORD *)(a1 + 488) != 0;
  if ((v14 & 0x4000000000000000) != 0)
    goto LABEL_171;
LABEL_79:
  if ((v14 & 0x8000000000000000) == 0)
    goto LABEL_80;
LABEL_172:
  *(_BYTE *)(a2 + 116) = *(_QWORD *)(a1 + 504) != 0;
LABEL_80:
  v15 = *(_QWORD *)(a1 + 1256);
  if ((v15 & 1) != 0)
  {
    *(_BYTE *)(a2 + 117) = *(_QWORD *)(a1 + 512) != 0;
    if ((v15 & 2) == 0)
    {
LABEL_82:
      if ((v15 & 4) == 0)
        goto LABEL_83;
      goto LABEL_175;
    }
  }
  else if ((v15 & 2) == 0)
  {
    goto LABEL_82;
  }
  *(_BYTE *)(a2 + 118) = *(_QWORD *)(a1 + 520) != 0;
  if ((v15 & 4) == 0)
  {
LABEL_83:
    if ((v15 & 8) == 0)
      goto LABEL_84;
    goto LABEL_176;
  }
LABEL_175:
  *(_BYTE *)(a2 + 119) = *(_QWORD *)(a1 + 528) != 0;
  if ((v15 & 8) == 0)
  {
LABEL_84:
    if ((v15 & 0x10) == 0)
      goto LABEL_85;
    goto LABEL_177;
  }
LABEL_176:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 536);
  if ((v15 & 0x10) == 0)
  {
LABEL_85:
    if ((v15 & 0x20) == 0)
      goto LABEL_86;
    goto LABEL_178;
  }
LABEL_177:
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 544);
  if ((v15 & 0x20) == 0)
  {
LABEL_86:
    if ((v15 & 0x40) == 0)
      goto LABEL_87;
    goto LABEL_179;
  }
LABEL_178:
  *(_BYTE *)(a2 + 128) = *(_QWORD *)(a1 + 552) != 0;
  if ((v15 & 0x40) == 0)
  {
LABEL_87:
    if ((v15 & 0x80) == 0)
      goto LABEL_88;
    goto LABEL_180;
  }
LABEL_179:
  *(_BYTE *)(a2 + 129) = *(_QWORD *)(a1 + 560) != 0;
  if ((v15 & 0x80) == 0)
  {
LABEL_88:
    if ((v15 & 0x100) == 0)
      goto LABEL_89;
    goto LABEL_181;
  }
LABEL_180:
  *(_BYTE *)(a2 + 130) = *(_QWORD *)(a1 + 568) != 0;
  if ((v15 & 0x100) == 0)
  {
LABEL_89:
    if ((v15 & 0x200) == 0)
      goto LABEL_90;
    goto LABEL_182;
  }
LABEL_181:
  *(_BYTE *)(a2 + 131) = *(_QWORD *)(a1 + 576) != 0;
  if ((v15 & 0x200) == 0)
  {
LABEL_90:
    if ((v15 & 0x400) == 0)
      goto LABEL_91;
    goto LABEL_183;
  }
LABEL_182:
  *(_BYTE *)(a2 + 132) = *(_QWORD *)(a1 + 584) != 0;
  if ((v15 & 0x400) == 0)
  {
LABEL_91:
    if ((v15 & 0x800) == 0)
      goto LABEL_92;
    goto LABEL_184;
  }
LABEL_183:
  *(_BYTE *)(a2 + 133) = *(_QWORD *)(a1 + 592) != 0;
  if ((v15 & 0x800) == 0)
  {
LABEL_92:
    if ((v15 & 0x1000) == 0)
      goto LABEL_93;
    goto LABEL_185;
  }
LABEL_184:
  *(_BYTE *)(a2 + 134) = *(_QWORD *)(a1 + 600) != 0;
  if ((v15 & 0x1000) == 0)
  {
LABEL_93:
    if ((v15 & 0x2000) == 0)
      goto LABEL_94;
    goto LABEL_186;
  }
LABEL_185:
  *(_BYTE *)(a2 + 135) = *(_QWORD *)(a1 + 608) != 0;
  if ((v15 & 0x2000) == 0)
  {
LABEL_94:
    if ((v15 & 0x4000) == 0)
      goto LABEL_95;
    goto LABEL_187;
  }
LABEL_186:
  *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 616);
  if ((v15 & 0x4000) == 0)
  {
LABEL_95:
    if ((v15 & 0x8000) == 0)
      goto LABEL_96;
    goto LABEL_188;
  }
LABEL_187:
  *(_DWORD *)(a2 + 140) = *(_QWORD *)(a1 + 624);
  if ((v15 & 0x8000) == 0)
  {
LABEL_96:
    if ((v15 & 0x10000) == 0)
      goto LABEL_97;
    goto LABEL_189;
  }
LABEL_188:
  *(_DWORD *)(a2 + 144) = *(_QWORD *)(a1 + 632);
  if ((v15 & 0x10000) == 0)
  {
LABEL_97:
    if ((v15 & 0x20000) == 0)
      goto LABEL_98;
    goto LABEL_190;
  }
LABEL_189:
  *(_DWORD *)(a2 + 148) = *(_QWORD *)(a1 + 640);
  if ((v15 & 0x20000) == 0)
  {
LABEL_98:
    if ((v15 & 0x40000) == 0)
      goto LABEL_99;
    goto LABEL_191;
  }
LABEL_190:
  *(_DWORD *)(a2 + 152) = *(_QWORD *)(a1 + 648);
  if ((v15 & 0x40000) == 0)
  {
LABEL_99:
    if ((v15 & 0x80000) == 0)
      goto LABEL_100;
    goto LABEL_192;
  }
LABEL_191:
  *(_DWORD *)(a2 + 156) = *(_QWORD *)(a1 + 656);
  if ((v15 & 0x80000) == 0)
  {
LABEL_100:
    if ((v15 & 0x100000) == 0)
      goto LABEL_101;
    goto LABEL_193;
  }
LABEL_192:
  *(_DWORD *)(a2 + 160) = *(_QWORD *)(a1 + 664);
  if ((v15 & 0x100000) == 0)
  {
LABEL_101:
    if ((v15 & 0x200000) == 0)
      goto LABEL_102;
    goto LABEL_194;
  }
LABEL_193:
  *(_DWORD *)(a2 + 164) = *(_QWORD *)(a1 + 672);
  if ((v15 & 0x200000) == 0)
  {
LABEL_102:
    if ((v15 & 0x400000) == 0)
      goto LABEL_103;
    goto LABEL_195;
  }
LABEL_194:
  *(_BYTE *)(a2 + 168) = *(_QWORD *)(a1 + 680) != 0;
  if ((v15 & 0x400000) == 0)
  {
LABEL_103:
    if ((v15 & 0x800000) == 0)
      goto LABEL_104;
    goto LABEL_196;
  }
LABEL_195:
  *(_DWORD *)(a2 + 172) = *(_QWORD *)(a1 + 688);
  if ((v15 & 0x800000) == 0)
  {
LABEL_104:
    if ((v15 & 0x1000000) == 0)
      goto LABEL_105;
    goto LABEL_197;
  }
LABEL_196:
  *(_DWORD *)(a2 + 176) = *(_QWORD *)(a1 + 696);
  if ((v15 & 0x1000000) == 0)
  {
LABEL_105:
    if ((v15 & 0x2000000) == 0)
      goto LABEL_106;
    goto LABEL_198;
  }
LABEL_197:
  *(_DWORD *)(a2 + 180) = *(_QWORD *)(a1 + 704);
  if ((v15 & 0x2000000) == 0)
  {
LABEL_106:
    if ((v15 & 0x4000000) == 0)
      goto LABEL_107;
    goto LABEL_199;
  }
LABEL_198:
  *(_DWORD *)(a2 + 184) = *(_QWORD *)(a1 + 712);
  if ((v15 & 0x4000000) == 0)
  {
LABEL_107:
    if ((v15 & 0x8000000) == 0)
      goto LABEL_108;
    goto LABEL_200;
  }
LABEL_199:
  *(_DWORD *)(a2 + 188) = *(_QWORD *)(a1 + 720);
  if ((v15 & 0x8000000) == 0)
  {
LABEL_108:
    if ((v15 & 0x10000000) == 0)
      goto LABEL_109;
    goto LABEL_201;
  }
LABEL_200:
  *(_DWORD *)(a2 + 192) = *(_QWORD *)(a1 + 728);
  if ((v15 & 0x10000000) == 0)
  {
LABEL_109:
    if ((v15 & 0x20000000) == 0)
      goto LABEL_110;
    goto LABEL_202;
  }
LABEL_201:
  *(_DWORD *)(a2 + 196) = *(_QWORD *)(a1 + 736);
  if ((v15 & 0x20000000) == 0)
  {
LABEL_110:
    if ((v15 & 0x40000000) == 0)
      goto LABEL_112;
    goto LABEL_111;
  }
LABEL_202:
  *(_DWORD *)(a2 + 200) = *(_QWORD *)(a1 + 744);
  if ((v15 & 0x40000000) != 0)
LABEL_111:
    *(_DWORD *)(a2 + 204) = *(_QWORD *)(a1 + 752);
LABEL_112:
  if ((v15 & 0x80000000) != 0)
    *(_DWORD *)(a2 + 208) = *(_QWORD *)(a1 + 760);
  v24 = v11 & 0x40000000000;
  v25 = v11 & 0x80000000000;
  v26 = v11 & 0x100000000000;
  v27 = v11 & 0x200000000000;
  v28 = v11 & 0x400000000000;
  v29 = v11 & 0x800000000000;
  v30 = v11 & 0x1000000000000;
  v31 = v11 & 0x2000000000000;
  v32 = v11 & 0x4000000000000;
  v33 = v12 & 0x8000000000000;
  v34 = v12 & 0x10000000000000;
  v35 = v12 & 0x20000000000000;
  v36 = v12 & 0x40000000000000;
  v37 = v12 & 0x80000000000000;
  v38 = v12 & 0x100000000000000;
  if ((v15 & 0x100000000) != 0)
    *(_DWORD *)(a2 + 212) = *(_QWORD *)(a1 + 768);
  v18 = ((v3 & 2) >> 1)
      + (v2 & 1)
      + ((v3 & 4) >> 2)
      + ((v3 & 8) >> 3)
      + ((v3 & 0x10) >> 4)
      + ((v3 & 0x20) >> 5)
      + ((v3 & 0x40) >> 6)
      + ((unint64_t)(v4 & 0x80) >> 7)
      + ((v4 & 0x100) >> 8)
      + ((v5 & 0x200) >> 9)
      + ((v5 & 0x400) >> 10)
      + ((v5 & 0x800) >> 11)
      + ((v5 & 0x1000) >> 12)
      + ((v5 & 0x2000) >> 13)
      + ((v5 & 0x4000) >> 14)
      + ((unint64_t)((unsigned __int16)v5 & 0x8000) >> 15)
      + ((v5 & 0x10000) >> 16)
      + ((v6 & 0x20000) >> 17)
      + ((v6 & 0x40000) >> 18)
      + ((v6 & 0x80000) >> 19)
      + ((v6 & 0x100000) >> 20)
      + ((v6 & 0x200000) >> 21)
      + ((v6 & 0x400000) >> 22)
      + ((v7 & 0x800000) >> 23)
      + ((v7 & 0x1000000) >> 24)
      + ((v8 & 0x2000000) >> 25)
      + ((v8 & 0x4000000) >> 26)
      + ((v8 & 0x8000000) >> 27)
      + ((v8 & 0x10000000) >> 28);
  v16 = v8 & 0x40000000;
  v21 = v8 & 0x200000000;
  v22 = v9 & 0x400000000;
  v23 = v9 & 0x800000000;
  v39 = v15 & 1;
  v17 = BYTE4(v8) & 1;
  v19 = v18
      + ((v8 & 0x20000000) >> 29)
      + (v16 >> 30)
      + (v8 >> 31)
      + v17
      + (v21 >> 33)
      + (v22 >> 34)
      + (v23 >> 35)
      + ((v9 & 0x1000000000) >> 36)
      + ((v9 & 0x2000000000) >> 37)
      + ((v9 & 0x4000000000) >> 38)
      + ((v9 & 0x8000000000) >> 39)
      + ((v10 & 0x10000000000) >> 40)
      + ((v10 & 0x20000000000) >> 41)
      + (v24 >> 42)
      + (v25 >> 43)
      + (v26 >> 44)
      + (v27 >> 45)
      + (v28 >> 46)
      + (v29 >> 47)
      + HIWORD(v30)
      + (v31 >> 49)
      + (v32 >> 50)
      + (v33 >> 51)
      + (v34 >> 52)
      + (v35 >> 53)
      + (v36 >> 54)
      + (v37 >> 55)
      + HIBYTE(v38)
      + ((v13 & 0x200000000000000) >> 57)
      + ((v13 & 0x400000000000000) >> 58)
      + (v14 >> 63)
      + ((v14 & 0x800000000000000) >> 59)
      + ((v14 & 0x1000000000000000) >> 60)
      + ((v14 & 0x2000000000000000) >> 61)
      + ((v14 & 0x4000000000000000) >> 62)
      + v39
      + ((unint64_t)(v15 & 2) >> 1)
      + ((unint64_t)(v15 & 4) >> 2)
      + ((unint64_t)(v15 & 8) >> 3);
  return v19
       + ((unint64_t)(v15 & 0x10) >> 4)
       + ((unint64_t)(v15 & 0x20) >> 5)
       + ((unint64_t)(v15 & 0x40) >> 6)
       + ((unint64_t)(v15 & 0x80) >> 7)
       + ((unint64_t)(v15 & 0x100) >> 8)
       + ((unint64_t)(v15 & 0x200) >> 9)
       + ((unint64_t)(v15 & 0x400) >> 10)
       + ((unint64_t)(v15 & 0x800) >> 11)
       + ((unint64_t)(v15 & 0x1000) >> 12)
       + ((unint64_t)(v15 & 0x2000) >> 13)
       + ((unint64_t)(v15 & 0x4000) >> 14)
       + ((unint64_t)((unsigned __int16)v15 & 0x8000) >> 15)
       + ((v15 & 0x10000uLL) >> 16)
       + ((v15 & 0x20000uLL) >> 17)
       + ((v15 & 0x40000uLL) >> 18)
       + ((v15 & 0x80000uLL) >> 19)
       + ((v15 & 0x100000uLL) >> 20)
       + ((v15 & 0x200000uLL) >> 21)
       + ((v15 & 0x400000uLL) >> 22)
       + ((v15 & 0x800000uLL) >> 23)
       + ((v15 & 0x1000000) >> 24)
       + ((v15 & 0x2000000) >> 25)
       + ((v15 & 0x4000000) >> 26)
       + ((v15 & 0x8000000) >> 27)
       + ((v15 & 0x10000000) >> 28)
       + ((v15 & 0x20000000) >> 29)
       + ((v15 & 0x40000000) >> 30)
       + (v15 >> 31)
       + (BYTE4(v15) & 1);
}

unint64_t sub_1C4D56F84(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_117;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_118;
  }
LABEL_117:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_119;
  }
LABEL_118:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_119:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_123;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_124;
  }
LABEL_123:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_125;
  }
LABEL_124:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_125:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_129;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_130;
  }
LABEL_129:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_131;
  }
LABEL_130:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_131:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_135;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_136;
  }
LABEL_135:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_137;
  }
LABEL_136:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_138;
  }
LABEL_137:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_139;
  }
LABEL_138:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v8 & 0x20000000) == 0)
      goto LABEL_38;
    goto LABEL_140;
  }
LABEL_139:
  *(_BYTE *)(a2 + 53) = *(_QWORD *)(a1 + 224) != 0;
  if ((v8 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x40000000) == 0)
      goto LABEL_40;
    goto LABEL_39;
  }
LABEL_140:
  *(_BYTE *)(a2 + 54) = *(_QWORD *)(a1 + 232) != 0;
  if ((v8 & 0x40000000) != 0)
LABEL_39:
    *(_BYTE *)(a2 + 55) = *(_QWORD *)(a1 + 240) != 0;
LABEL_40:
  v9 = v8;
  if ((v8 & 0x80000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 248) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x100000000) == 0)
    {
LABEL_42:
      if ((v9 & 0x200000000) == 0)
        goto LABEL_43;
      goto LABEL_144;
    }
  }
  else if ((v8 & 0x100000000) == 0)
  {
    goto LABEL_42;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 256);
  if ((v9 & 0x200000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x400000000) == 0)
      goto LABEL_44;
    goto LABEL_145;
  }
LABEL_144:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 264) & 0x1FF;
  if ((v9 & 0x400000000) == 0)
  {
LABEL_44:
    if ((v9 & 0x800000000) == 0)
      goto LABEL_45;
    goto LABEL_146;
  }
LABEL_145:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 272) & 0x1FF;
  if ((v9 & 0x800000000) == 0)
  {
LABEL_45:
    if ((v9 & 0x1000000000) == 0)
      goto LABEL_47;
    goto LABEL_46;
  }
LABEL_146:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 280) & 0x1FFFF;
  if ((v9 & 0x1000000000) != 0)
LABEL_46:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 288) & 0x1FFF;
LABEL_47:
  v10 = v9;
  if ((v9 & 0x2000000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 296) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x4000000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 304);
  v11 = v10;
  if ((v10 & 0x8000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 312) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x10000000000) == 0)
    {
LABEL_53:
      if ((v11 & 0x20000000000) == 0)
        goto LABEL_54;
      goto LABEL_150;
    }
  }
  else if ((v10 & 0x10000000000) == 0)
  {
    goto LABEL_53;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 320);
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_151;
  }
LABEL_150:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 328);
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_56;
    goto LABEL_152;
  }
LABEL_151:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 336) != 0;
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_57;
    goto LABEL_153;
  }
LABEL_152:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 344);
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_58;
    goto LABEL_154;
  }
LABEL_153:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x400000000000) == 0)
      goto LABEL_59;
    goto LABEL_155;
  }
LABEL_154:
  *(_BYTE *)(a2 + 81) = *(_QWORD *)(a1 + 360) != 0;
  if ((v11 & 0x400000000000) == 0)
  {
LABEL_59:
    if ((v11 & 0x800000000000) == 0)
      goto LABEL_61;
    goto LABEL_60;
  }
LABEL_155:
  *(_BYTE *)(a2 + 82) = *(_QWORD *)(a1 + 368) != 0;
  if ((v11 & 0x800000000000) != 0)
LABEL_60:
    *(_BYTE *)(a2 + 83) = *(_QWORD *)(a1 + 376) != 0;
LABEL_61:
  v12 = v11;
  if ((v11 & 0x1000000000000) != 0)
  {
    *(_BYTE *)(a2 + 84) = *(_BYTE *)(a1 + 384) & 1;
    v12 = *(_QWORD *)(a1 + 1248);
    if ((v12 & 0x2000000000000) == 0)
    {
LABEL_63:
      if ((v12 & 0x4000000000000) == 0)
        goto LABEL_64;
      goto LABEL_159;
    }
  }
  else if ((v11 & 0x2000000000000) == 0)
  {
    goto LABEL_63;
  }
  *(_WORD *)(a2 + 84) = *(_QWORD *)(a1 + 392);
  if ((v12 & 0x4000000000000) == 0)
  {
LABEL_64:
    if ((v12 & 0x8000000000000) == 0)
      goto LABEL_65;
    goto LABEL_160;
  }
LABEL_159:
  *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 400) & 0x1FF;
  if ((v12 & 0x8000000000000) == 0)
  {
LABEL_65:
    if ((v12 & 0x10000000000000) == 0)
      goto LABEL_66;
    goto LABEL_161;
  }
LABEL_160:
  *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 408) & 0x1FF;
  if ((v12 & 0x10000000000000) == 0)
  {
LABEL_66:
    if ((v12 & 0x20000000000000) == 0)
      goto LABEL_68;
    goto LABEL_67;
  }
LABEL_161:
  *(_DWORD *)(a2 + 84) = *(_DWORD *)(a1 + 416) & 0x1FFFF;
  if ((v12 & 0x20000000000000) != 0)
LABEL_67:
    *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 424) & 0x1FFF;
LABEL_68:
  v13 = v12;
  if ((v12 & 0x40000000000000) != 0)
  {
    *(_BYTE *)(a2 + 84) = *(_BYTE *)(a1 + 432) & 0x7F;
    v13 = *(_QWORD *)(a1 + 1248);
  }
  if ((v13 & 0x80000000000000) != 0)
    *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 440);
  v14 = v13;
  if ((v13 & 0x100000000000000) != 0)
  {
    *(_BYTE *)(a2 + 88) = *(_BYTE *)(a1 + 448) & 0xF;
    v14 = *(_QWORD *)(a1 + 1248);
    if ((v14 & 0x200000000000000) == 0)
    {
LABEL_74:
      if ((v14 & 0x400000000000000) == 0)
        goto LABEL_75;
      goto LABEL_165;
    }
  }
  else if ((v13 & 0x200000000000000) == 0)
  {
    goto LABEL_74;
  }
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 456);
  if ((v14 & 0x400000000000000) == 0)
  {
LABEL_75:
    if ((v14 & 0x800000000000000) == 0)
      goto LABEL_76;
    goto LABEL_166;
  }
LABEL_165:
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 464);
  if ((v14 & 0x800000000000000) == 0)
  {
LABEL_76:
    if ((v14 & 0x1000000000000000) == 0)
      goto LABEL_77;
    goto LABEL_167;
  }
LABEL_166:
  *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 472) != 0;
  if ((v14 & 0x1000000000000000) == 0)
  {
LABEL_77:
    if ((v14 & 0x2000000000000000) == 0)
      goto LABEL_78;
    goto LABEL_168;
  }
LABEL_167:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 480);
  if ((v14 & 0x2000000000000000) == 0)
  {
LABEL_78:
    if ((v14 & 0x4000000000000000) == 0)
      goto LABEL_79;
LABEL_169:
    *(_BYTE *)(a2 + 109) = *(_QWORD *)(a1 + 496) != 0;
    if ((v14 & 0x8000000000000000) == 0)
      goto LABEL_80;
    goto LABEL_170;
  }
LABEL_168:
  *(_BYTE *)(a2 + 108) = *(_QWORD *)(a1 + 488) != 0;
  if ((v14 & 0x4000000000000000) != 0)
    goto LABEL_169;
LABEL_79:
  if ((v14 & 0x8000000000000000) == 0)
    goto LABEL_80;
LABEL_170:
  *(_BYTE *)(a2 + 110) = *(_QWORD *)(a1 + 504) != 0;
LABEL_80:
  v15 = *(_QWORD *)(a1 + 1256);
  if ((v15 & 1) != 0)
  {
    *(_BYTE *)(a2 + 111) = *(_QWORD *)(a1 + 512) != 0;
    if ((v15 & 2) == 0)
    {
LABEL_82:
      if ((v15 & 4) == 0)
        goto LABEL_83;
      goto LABEL_173;
    }
  }
  else if ((v15 & 2) == 0)
  {
    goto LABEL_82;
  }
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 520);
  if ((v15 & 4) == 0)
  {
LABEL_83:
    if ((v15 & 8) == 0)
      goto LABEL_84;
    goto LABEL_174;
  }
LABEL_173:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 528);
  if ((v15 & 8) == 0)
  {
LABEL_84:
    if ((v15 & 0x10) == 0)
      goto LABEL_85;
    goto LABEL_175;
  }
LABEL_174:
  *(_BYTE *)(a2 + 120) = *(_QWORD *)(a1 + 536) != 0;
  if ((v15 & 0x10) == 0)
  {
LABEL_85:
    if ((v15 & 0x20) == 0)
      goto LABEL_86;
    goto LABEL_176;
  }
LABEL_175:
  *(_BYTE *)(a2 + 121) = *(_QWORD *)(a1 + 544) != 0;
  if ((v15 & 0x20) == 0)
  {
LABEL_86:
    if ((v15 & 0x40) == 0)
      goto LABEL_87;
    goto LABEL_177;
  }
LABEL_176:
  *(_BYTE *)(a2 + 122) = *(_QWORD *)(a1 + 552) != 0;
  if ((v15 & 0x40) == 0)
  {
LABEL_87:
    if ((v15 & 0x80) == 0)
      goto LABEL_88;
    goto LABEL_178;
  }
LABEL_177:
  *(_BYTE *)(a2 + 123) = *(_QWORD *)(a1 + 560) != 0;
  if ((v15 & 0x80) == 0)
  {
LABEL_88:
    if ((v15 & 0x100) == 0)
      goto LABEL_89;
    goto LABEL_179;
  }
LABEL_178:
  *(_BYTE *)(a2 + 124) = *(_QWORD *)(a1 + 568) != 0;
  if ((v15 & 0x100) == 0)
  {
LABEL_89:
    if ((v15 & 0x200) == 0)
      goto LABEL_90;
    goto LABEL_180;
  }
LABEL_179:
  *(_BYTE *)(a2 + 125) = *(_QWORD *)(a1 + 576) != 0;
  if ((v15 & 0x200) == 0)
  {
LABEL_90:
    if ((v15 & 0x400) == 0)
      goto LABEL_91;
    goto LABEL_181;
  }
LABEL_180:
  *(_BYTE *)(a2 + 126) = *(_QWORD *)(a1 + 584) != 0;
  if ((v15 & 0x400) == 0)
  {
LABEL_91:
    if ((v15 & 0x800) == 0)
      goto LABEL_92;
    goto LABEL_182;
  }
LABEL_181:
  *(_BYTE *)(a2 + 127) = *(_QWORD *)(a1 + 592) != 0;
  if ((v15 & 0x800) == 0)
  {
LABEL_92:
    if ((v15 & 0x1000) == 0)
      goto LABEL_93;
    goto LABEL_183;
  }
LABEL_182:
  *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 600);
  if ((v15 & 0x1000) == 0)
  {
LABEL_93:
    if ((v15 & 0x2000) == 0)
      goto LABEL_94;
    goto LABEL_184;
  }
LABEL_183:
  *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 608);
  if ((v15 & 0x2000) == 0)
  {
LABEL_94:
    if ((v15 & 0x4000) == 0)
      goto LABEL_95;
    goto LABEL_185;
  }
LABEL_184:
  *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 616);
  if ((v15 & 0x4000) == 0)
  {
LABEL_95:
    if ((v15 & 0x8000) == 0)
      goto LABEL_96;
    goto LABEL_186;
  }
LABEL_185:
  *(_DWORD *)(a2 + 140) = *(_QWORD *)(a1 + 624);
  if ((v15 & 0x8000) == 0)
  {
LABEL_96:
    if ((v15 & 0x10000) == 0)
      goto LABEL_97;
    goto LABEL_187;
  }
LABEL_186:
  *(_DWORD *)(a2 + 144) = *(_QWORD *)(a1 + 632);
  if ((v15 & 0x10000) == 0)
  {
LABEL_97:
    if ((v15 & 0x20000) == 0)
      goto LABEL_98;
    goto LABEL_188;
  }
LABEL_187:
  *(_DWORD *)(a2 + 148) = *(_QWORD *)(a1 + 640);
  if ((v15 & 0x20000) == 0)
  {
LABEL_98:
    if ((v15 & 0x40000) == 0)
      goto LABEL_99;
    goto LABEL_189;
  }
LABEL_188:
  *(_DWORD *)(a2 + 152) = *(_QWORD *)(a1 + 648);
  if ((v15 & 0x40000) == 0)
  {
LABEL_99:
    if ((v15 & 0x80000) == 0)
      goto LABEL_100;
    goto LABEL_190;
  }
LABEL_189:
  *(_DWORD *)(a2 + 156) = *(_QWORD *)(a1 + 656);
  if ((v15 & 0x80000) == 0)
  {
LABEL_100:
    if ((v15 & 0x100000) == 0)
      goto LABEL_101;
    goto LABEL_191;
  }
LABEL_190:
  *(_BYTE *)(a2 + 160) = *(_QWORD *)(a1 + 664) != 0;
  if ((v15 & 0x100000) == 0)
  {
LABEL_101:
    if ((v15 & 0x200000) == 0)
      goto LABEL_102;
    goto LABEL_192;
  }
LABEL_191:
  *(_DWORD *)(a2 + 164) = *(_QWORD *)(a1 + 672);
  if ((v15 & 0x200000) == 0)
  {
LABEL_102:
    if ((v15 & 0x400000) == 0)
      goto LABEL_103;
    goto LABEL_193;
  }
LABEL_192:
  *(_DWORD *)(a2 + 168) = *(_QWORD *)(a1 + 680);
  if ((v15 & 0x400000) == 0)
  {
LABEL_103:
    if ((v15 & 0x800000) == 0)
      goto LABEL_104;
    goto LABEL_194;
  }
LABEL_193:
  *(_DWORD *)(a2 + 172) = *(_QWORD *)(a1 + 688);
  if ((v15 & 0x800000) == 0)
  {
LABEL_104:
    if ((v15 & 0x1000000) == 0)
      goto LABEL_105;
    goto LABEL_195;
  }
LABEL_194:
  *(_DWORD *)(a2 + 176) = *(_QWORD *)(a1 + 696);
  if ((v15 & 0x1000000) == 0)
  {
LABEL_105:
    if ((v15 & 0x2000000) == 0)
      goto LABEL_106;
    goto LABEL_196;
  }
LABEL_195:
  *(_DWORD *)(a2 + 180) = *(_QWORD *)(a1 + 704);
  if ((v15 & 0x2000000) == 0)
  {
LABEL_106:
    if ((v15 & 0x4000000) == 0)
      goto LABEL_107;
    goto LABEL_197;
  }
LABEL_196:
  *(_DWORD *)(a2 + 184) = *(_QWORD *)(a1 + 712);
  if ((v15 & 0x4000000) == 0)
  {
LABEL_107:
    if ((v15 & 0x8000000) == 0)
      goto LABEL_108;
    goto LABEL_198;
  }
LABEL_197:
  *(_DWORD *)(a2 + 188) = *(_QWORD *)(a1 + 720);
  if ((v15 & 0x8000000) == 0)
  {
LABEL_108:
    if ((v15 & 0x10000000) == 0)
      goto LABEL_110;
    goto LABEL_109;
  }
LABEL_198:
  *(_DWORD *)(a2 + 192) = *(_QWORD *)(a1 + 728);
  if ((v15 & 0x10000000) != 0)
LABEL_109:
    *(_DWORD *)(a2 + 196) = *(_QWORD *)(a1 + 736);
LABEL_110:
  if ((v15 & 0x20000000) != 0)
    *(_DWORD *)(a2 + 200) = *(_QWORD *)(a1 + 744);
  if ((v15 & 0x40000000) != 0)
    *(_DWORD *)(a2 + 204) = *(_QWORD *)(a1 + 752);
  v16 = ((v3 & 2) >> 1)
      + (v2 & 1)
      + ((v3 & 4) >> 2)
      + ((v3 & 8) >> 3)
      + ((v3 & 0x10) >> 4)
      + ((v3 & 0x20) >> 5)
      + ((v3 & 0x40) >> 6)
      + ((unint64_t)(v4 & 0x80) >> 7)
      + ((v4 & 0x100) >> 8)
      + ((v5 & 0x200) >> 9)
      + ((v5 & 0x400) >> 10)
      + ((v5 & 0x800) >> 11)
      + ((v5 & 0x1000) >> 12)
      + ((v5 & 0x2000) >> 13)
      + ((v5 & 0x4000) >> 14)
      + ((unint64_t)((unsigned __int16)v6 & 0x8000) >> 15)
      + ((v6 & 0x10000) >> 16)
      + ((v6 & 0x20000) >> 17)
      + ((v6 & 0x40000) >> 18)
      + ((v6 & 0x80000) >> 19)
      + ((v6 & 0x100000) >> 20)
      + ((v7 & 0x200000) >> 21)
      + ((v7 & 0x400000) >> 22)
      + ((v8 & 0x800000) >> 23)
      + ((v8 & 0x1000000) >> 24)
      + ((v8 & 0x2000000) >> 25)
      + ((v8 & 0x4000000) >> 26)
      + ((v8 & 0x8000000) >> 27)
      + ((v8 & 0x10000000) >> 28);
  v19 = v8 & 0x40000000;
  v21 = v9 & 0x200000000;
  v22 = v9 & 0x400000000;
  v23 = v9 & 0x800000000;
  v24 = v9 & 0x1000000000;
  v25 = v9 & 0x2000000000;
  v26 = v10 & 0x4000000000;
  v27 = v10 & 0x8000000000;
  v28 = v11 & 0x10000000000;
  v29 = v11 & 0x20000000000;
  v30 = v11 & 0x40000000000;
  v31 = v11 & 0x80000000000;
  v32 = v11 & 0x100000000000;
  v33 = v11 & 0x200000000000;
  v34 = v11 & 0x400000000000;
  v35 = v11 & 0x800000000000;
  v36 = v11 & 0x1000000000000;
  v37 = v13 & 0x80000000000000;
  v38 = v13 & 0x100000000000000;
  v20 = BYTE4(v9) & 1;
  v39 = v15 & 1;
  v17 = v16
      + ((v8 & 0x20000000) >> 29)
      + (v19 >> 30)
      + (v8 >> 31)
      + v20
      + (v21 >> 33)
      + (v22 >> 34)
      + (v23 >> 35)
      + (v24 >> 36)
      + (v25 >> 37)
      + (v26 >> 38)
      + (v27 >> 39)
      + (v28 >> 40)
      + (v29 >> 41)
      + (v30 >> 42)
      + (v31 >> 43)
      + (v32 >> 44)
      + (v33 >> 45)
      + (v34 >> 46)
      + (v35 >> 47)
      + HIWORD(v36)
      + ((v12 & 0x2000000000000) >> 49)
      + ((v12 & 0x4000000000000) >> 50)
      + ((v12 & 0x8000000000000) >> 51)
      + ((v12 & 0x10000000000000) >> 52)
      + ((v12 & 0x20000000000000) >> 53)
      + ((v12 & 0x40000000000000) >> 54)
      + (v37 >> 55)
      + HIBYTE(v38)
      + (v14 >> 63)
      + ((v14 & 0x200000000000000) >> 57)
      + ((v14 & 0x400000000000000) >> 58)
      + ((v14 & 0x800000000000000) >> 59)
      + ((v14 & 0x1000000000000000) >> 60)
      + ((v14 & 0x2000000000000000) >> 61)
      + ((v14 & 0x4000000000000000) >> 62)
      + v39
      + ((unint64_t)(v15 & 2) >> 1)
      + ((unint64_t)(v15 & 4) >> 2)
      + ((unint64_t)(v15 & 8) >> 3);
  return v17
       + ((unint64_t)(v15 & 0x10) >> 4)
       + ((unint64_t)(v15 & 0x20) >> 5)
       + ((unint64_t)(v15 & 0x40) >> 6)
       + ((unint64_t)(v15 & 0x80) >> 7)
       + ((unint64_t)(v15 & 0x100) >> 8)
       + ((unint64_t)(v15 & 0x200) >> 9)
       + ((unint64_t)(v15 & 0x400) >> 10)
       + ((unint64_t)(v15 & 0x800) >> 11)
       + ((unint64_t)(v15 & 0x1000) >> 12)
       + ((unint64_t)(v15 & 0x2000) >> 13)
       + ((unint64_t)(v15 & 0x4000) >> 14)
       + ((unint64_t)((unsigned __int16)v15 & 0x8000) >> 15)
       + ((v15 & 0x10000uLL) >> 16)
       + ((v15 & 0x20000uLL) >> 17)
       + ((v15 & 0x40000uLL) >> 18)
       + ((v15 & 0x80000uLL) >> 19)
       + ((v15 & 0x100000uLL) >> 20)
       + ((v15 & 0x200000uLL) >> 21)
       + ((v15 & 0x400000uLL) >> 22)
       + ((v15 & 0x800000uLL) >> 23)
       + ((v15 & 0x1000000) >> 24)
       + ((v15 & 0x2000000) >> 25)
       + ((v15 & 0x4000000) >> 26)
       + ((v15 & 0x8000000) >> 27)
       + ((v15 & 0x10000000) >> 28)
       + ((v15 & 0x20000000) >> 29)
       + ((v15 & 0x40000000) >> 30);
}

unint64_t sub_1C4D57D64(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_97;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_98;
  }
LABEL_97:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_99;
  }
LABEL_98:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_99:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_103;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_104;
  }
LABEL_103:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_105;
  }
LABEL_104:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_106;
  }
LABEL_105:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_106:
  *(_BYTE *)(a2 + 24) = *(_QWORD *)(a1 + 104) != 0;
  if ((v5 & 0x4000) != 0)
LABEL_19:
    *(_BYTE *)(a2 + 25) = *(_QWORD *)(a1 + 112) != 0;
LABEL_20:
  v6 = v5;
  if ((v5 & 0x8000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 120) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x10000) == 0)
    {
LABEL_22:
      if ((v6 & 0x20000) == 0)
        goto LABEL_23;
      goto LABEL_110;
    }
  }
  else if ((v5 & 0x10000) == 0)
  {
    goto LABEL_22;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 128);
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_111;
  }
LABEL_110:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_112;
  }
LABEL_111:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 144) & 0x1FF;
  if ((v6 & 0x80000) == 0)
  {
LABEL_25:
    if ((v6 & 0x100000) == 0)
      goto LABEL_27;
    goto LABEL_26;
  }
LABEL_112:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 152) & 0x1FFFF;
  if ((v6 & 0x100000) != 0)
LABEL_26:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 160) & 0x1FFF;
LABEL_27:
  v7 = v6;
  if ((v6 & 0x200000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 168) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x400000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 176);
  v8 = v7;
  if ((v7 & 0x800000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 184) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x1000000) == 0)
    {
LABEL_33:
      if ((v8 & 0x2000000) == 0)
        goto LABEL_34;
      goto LABEL_116;
    }
  }
  else if ((v7 & 0x1000000) == 0)
  {
    goto LABEL_33;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_117;
  }
LABEL_116:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 200);
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_118;
  }
LABEL_117:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 208) != 0;
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_38;
    goto LABEL_37;
  }
LABEL_118:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 216);
  if ((v8 & 0x10000000) != 0)
LABEL_37:
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 224) != 0;
LABEL_38:
  v39 = v7;
  if ((v8 & 0x20000000) != 0)
    *(_BYTE *)(a2 + 53) = *(_QWORD *)(a1 + 232) != 0;
  v9 = v8;
  if ((v8 & 0x40000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 240) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_42:
      if ((v9 & 0x100000000) == 0)
        goto LABEL_43;
      goto LABEL_122;
    }
  }
  else if ((v8 & 0x80000000) == 0)
  {
    goto LABEL_42;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 248);
  if ((v9 & 0x100000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_44;
    goto LABEL_123;
  }
LABEL_122:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 256) & 0x1FF;
  if ((v9 & 0x200000000) == 0)
  {
LABEL_44:
    if ((v9 & 0x400000000) == 0)
      goto LABEL_45;
    goto LABEL_124;
  }
LABEL_123:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 264) & 0x1FF;
  if ((v9 & 0x400000000) == 0)
  {
LABEL_45:
    if ((v9 & 0x800000000) == 0)
      goto LABEL_47;
    goto LABEL_46;
  }
LABEL_124:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 272) & 0x1FFFF;
  if ((v9 & 0x800000000) != 0)
LABEL_46:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 280) & 0x1FFF;
LABEL_47:
  v10 = v9;
  if ((v9 & 0x1000000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 288) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x2000000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 296);
  v11 = v10;
  if ((v10 & 0x4000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 304) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x8000000000) == 0)
    {
LABEL_53:
      if ((v11 & 0x10000000000) == 0)
        goto LABEL_54;
      goto LABEL_128;
    }
  }
  else if ((v10 & 0x8000000000) == 0)
  {
    goto LABEL_53;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 312);
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_55;
    goto LABEL_129;
  }
LABEL_128:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 320);
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_56;
    goto LABEL_130;
  }
LABEL_129:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 328) != 0;
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_56:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_57;
    goto LABEL_131;
  }
LABEL_130:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 336);
  if ((v11 & 0x80000000000) == 0)
  {
LABEL_57:
    if ((v11 & 0x100000000000) == 0)
      goto LABEL_58;
    goto LABEL_132;
  }
LABEL_131:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 344) != 0;
  if ((v11 & 0x100000000000) == 0)
  {
LABEL_58:
    if ((v11 & 0x200000000000) == 0)
      goto LABEL_60;
    goto LABEL_59;
  }
LABEL_132:
  *(_BYTE *)(a2 + 81) = *(_QWORD *)(a1 + 352) != 0;
  if ((v11 & 0x200000000000) != 0)
LABEL_59:
    *(_BYTE *)(a2 + 84) = *(_QWORD *)(a1 + 360) != 0;
LABEL_60:
  v12 = v11;
  if ((v11 & 0x400000000000) != 0)
  {
    *(_BYTE *)(a2 + 85) = *(_BYTE *)(a1 + 368) & 0xF;
    v12 = *(_QWORD *)(a1 + 1248);
    if ((v12 & 0x800000000000) == 0)
    {
LABEL_62:
      if ((v12 & 0x1000000000000) == 0)
        goto LABEL_63;
      goto LABEL_136;
    }
  }
  else if ((v11 & 0x800000000000) == 0)
  {
    goto LABEL_62;
  }
  *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 376);
  if ((v12 & 0x1000000000000) == 0)
  {
LABEL_63:
    if ((v12 & 0x2000000000000) == 0)
      goto LABEL_64;
    goto LABEL_137;
  }
LABEL_136:
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 384);
  if ((v12 & 0x2000000000000) == 0)
  {
LABEL_64:
    if ((v12 & 0x4000000000000) == 0)
      goto LABEL_65;
    goto LABEL_138;
  }
LABEL_137:
  *(_BYTE *)(a2 + 96) = *(_QWORD *)(a1 + 392) != 0;
  if ((v12 & 0x4000000000000) == 0)
  {
LABEL_65:
    if ((v12 & 0x8000000000000) == 0)
      goto LABEL_66;
    goto LABEL_139;
  }
LABEL_138:
  *(_BYTE *)(a2 + 97) = *(_QWORD *)(a1 + 400) != 0;
  if ((v12 & 0x8000000000000) == 0)
  {
LABEL_66:
    if ((v12 & 0x10000000000000) == 0)
      goto LABEL_67;
    goto LABEL_140;
  }
LABEL_139:
  *(_BYTE *)(a2 + 98) = *(_QWORD *)(a1 + 408) != 0;
  if ((v12 & 0x10000000000000) == 0)
  {
LABEL_67:
    if ((v12 & 0x20000000000000) == 0)
      goto LABEL_68;
    goto LABEL_141;
  }
LABEL_140:
  *(_BYTE *)(a2 + 99) = *(_QWORD *)(a1 + 416) != 0;
  if ((v12 & 0x20000000000000) == 0)
  {
LABEL_68:
    if ((v12 & 0x40000000000000) == 0)
      goto LABEL_69;
    goto LABEL_142;
  }
LABEL_141:
  *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 424) != 0;
  if ((v12 & 0x40000000000000) == 0)
  {
LABEL_69:
    if ((v12 & 0x80000000000000) == 0)
      goto LABEL_70;
    goto LABEL_143;
  }
LABEL_142:
  *(_BYTE *)(a2 + 101) = *(_QWORD *)(a1 + 432) != 0;
  if ((v12 & 0x80000000000000) == 0)
  {
LABEL_70:
    if ((v12 & 0x100000000000000) == 0)
      goto LABEL_71;
    goto LABEL_144;
  }
LABEL_143:
  *(_BYTE *)(a2 + 102) = *(_QWORD *)(a1 + 440) != 0;
  if ((v12 & 0x100000000000000) == 0)
  {
LABEL_71:
    if ((v12 & 0x200000000000000) == 0)
      goto LABEL_72;
    goto LABEL_145;
  }
LABEL_144:
  *(_BYTE *)(a2 + 103) = *(_QWORD *)(a1 + 448) != 0;
  if ((v12 & 0x200000000000000) == 0)
  {
LABEL_72:
    if ((v12 & 0x400000000000000) == 0)
      goto LABEL_73;
    goto LABEL_146;
  }
LABEL_145:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 456);
  if ((v12 & 0x400000000000000) == 0)
  {
LABEL_73:
    if ((v12 & 0x800000000000000) == 0)
      goto LABEL_74;
    goto LABEL_147;
  }
LABEL_146:
  *(_DWORD *)(a2 + 108) = *(_QWORD *)(a1 + 464);
  if ((v12 & 0x800000000000000) == 0)
  {
LABEL_74:
    if ((v12 & 0x1000000000000000) == 0)
      goto LABEL_75;
    goto LABEL_148;
  }
LABEL_147:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 472);
  if ((v12 & 0x1000000000000000) == 0)
  {
LABEL_75:
    if ((v12 & 0x2000000000000000) == 0)
      goto LABEL_76;
    goto LABEL_149;
  }
LABEL_148:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 480);
  if ((v12 & 0x2000000000000000) == 0)
  {
LABEL_76:
    if ((v12 & 0x4000000000000000) == 0)
      goto LABEL_77;
LABEL_150:
    *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 496);
    if ((v12 & 0x8000000000000000) == 0)
      goto LABEL_78;
    goto LABEL_151;
  }
LABEL_149:
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(a1 + 488);
  if ((v12 & 0x4000000000000000) != 0)
    goto LABEL_150;
LABEL_77:
  if ((v12 & 0x8000000000000000) == 0)
    goto LABEL_78;
LABEL_151:
  *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 504);
LABEL_78:
  v13 = *(_QWORD *)(a1 + 1256);
  if ((v13 & 1) != 0)
  {
    *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 512);
    if ((v13 & 2) == 0)
    {
LABEL_80:
      if ((v13 & 4) == 0)
        goto LABEL_81;
      goto LABEL_154;
    }
  }
  else if ((v13 & 2) == 0)
  {
    goto LABEL_80;
  }
  *(_BYTE *)(a2 + 136) = *(_QWORD *)(a1 + 520) != 0;
  if ((v13 & 4) == 0)
  {
LABEL_81:
    if ((v13 & 8) == 0)
      goto LABEL_82;
    goto LABEL_155;
  }
LABEL_154:
  *(_DWORD *)(a2 + 140) = *(_QWORD *)(a1 + 528);
  if ((v13 & 8) == 0)
  {
LABEL_82:
    if ((v13 & 0x10) == 0)
      goto LABEL_83;
    goto LABEL_156;
  }
LABEL_155:
  *(_DWORD *)(a2 + 144) = *(_QWORD *)(a1 + 536);
  if ((v13 & 0x10) == 0)
  {
LABEL_83:
    if ((v13 & 0x20) == 0)
      goto LABEL_84;
    goto LABEL_157;
  }
LABEL_156:
  *(_DWORD *)(a2 + 148) = *(_QWORD *)(a1 + 544);
  if ((v13 & 0x20) == 0)
  {
LABEL_84:
    if ((v13 & 0x40) == 0)
      goto LABEL_85;
    goto LABEL_158;
  }
LABEL_157:
  *(_BYTE *)(a2 + 152) = *(_QWORD *)(a1 + 552) != 0;
  if ((v13 & 0x40) == 0)
  {
LABEL_85:
    if ((v13 & 0x80) == 0)
      goto LABEL_86;
    goto LABEL_159;
  }
LABEL_158:
  *(_BYTE *)(a2 + 153) = *(_QWORD *)(a1 + 560) != 0;
  if ((v13 & 0x80) == 0)
  {
LABEL_86:
    if ((v13 & 0x100) == 0)
      goto LABEL_87;
    goto LABEL_160;
  }
LABEL_159:
  *(_BYTE *)(a2 + 154) = *(_QWORD *)(a1 + 568) != 0;
  if ((v13 & 0x100) == 0)
  {
LABEL_87:
    if ((v13 & 0x200) == 0)
      goto LABEL_88;
    goto LABEL_161;
  }
LABEL_160:
  *(_BYTE *)(a2 + 155) = *(_QWORD *)(a1 + 576) != 0;
  if ((v13 & 0x200) == 0)
  {
LABEL_88:
    if ((v13 & 0x400) == 0)
      goto LABEL_90;
    goto LABEL_89;
  }
LABEL_161:
  *(_BYTE *)(a2 + 156) = *(_QWORD *)(a1 + 584) != 0;
  if ((v13 & 0x400) != 0)
LABEL_89:
    *(_BYTE *)(a2 + 157) = *(_QWORD *)(a1 + 592) != 0;
LABEL_90:
  if ((v13 & 0x800) != 0)
    *(_BYTE *)(a2 + 158) = *(_QWORD *)(a1 + 600) != 0;
  v34 = v10 & 0x2000000000;
  v35 = v10 & 0x4000000000;
  if ((v13 & 0x1000) != 0)
    *(_BYTE *)(a2 + 159) = *(_QWORD *)(a1 + 608) != 0;
  v18 = ((v3 & 2) >> 1)
      + (v2 & 1)
      + ((v3 & 4) >> 2)
      + ((v3 & 8) >> 3)
      + ((v3 & 0x10) >> 4)
      + ((v3 & 0x20) >> 5)
      + ((v3 & 0x40) >> 6)
      + ((unint64_t)(v4 & 0x80) >> 7)
      + ((v4 & 0x100) >> 8)
      + ((v5 & 0x200) >> 9)
      + ((v5 & 0x400) >> 10)
      + ((v5 & 0x800) >> 11)
      + ((v5 & 0x1000) >> 12)
      + ((v5 & 0x2000) >> 13)
      + ((v5 & 0x4000) >> 14)
      + ((unint64_t)((unsigned __int16)v5 & 0x8000) >> 15);
  v15 = v6 & 0x20000;
  v16 = v6 & 0x40000;
  v14 = v6 & 0x10000;
  v20 = v6 & 0x80000;
  v21 = v6 & 0x100000;
  v22 = v6 & 0x200000;
  v25 = v8 & 0x1000000;
  v26 = v8 & 0x2000000;
  v27 = v8 & 0x4000000;
  v28 = v8 & 0x8000000;
  v29 = v9 & 0x800000000;
  v30 = v8 & 0x10000000;
  v31 = v9 & 0x1000000000;
  v32 = v8 & 0x20000000;
  v33 = v8 & 0x40000000;
  v36 = v11 & 0x8000000000;
  v37 = v11 & 0x10000000000;
  v38 = v11 & 0x20000000000;
  v23 = v39 & 0x400000;
  v24 = v39 & 0x800000;
  v17 = BYTE4(v9) & 1;
  LODWORD(v16) = v18
               + (v14 >> 16)
               + (v15 >> 17)
               + (v16 >> 18)
               + (v20 >> 19)
               + (v21 >> 20)
               + (v22 >> 21)
               + (v23 >> 22)
               + (v24 >> 23)
               + (v25 >> 24)
               + (v26 >> 25)
               + (v27 >> 26)
               + (v28 >> 27)
               + (v30 >> 28)
               + (v32 >> 29)
               + (v33 >> 30)
               + (v9 >> 31)
               + v17
               + ((v9 & 0x200000000) >> 33)
               + ((v9 & 0x400000000) >> 34)
               + (v29 >> 35)
               + (v31 >> 36)
               + (v34 >> 37)
               + (v35 >> 38)
               + (v36 >> 39)
               + (v37 >> 40)
               + (v38 >> 41)
               + ((v11 & 0x40000000000) >> 42)
               + ((v11 & 0x80000000000) >> 43)
               + ((v11 & 0x100000000000) >> 44)
               + ((v11 & 0x200000000000) >> 45)
               + ((v11 & 0x400000000000) >> 46)
               + (v12 >> 63)
               + ((v12 & 0x800000000000) >> 47)
               + ((v12 & 0x1000000000000) >> 48)
               + ((v12 & 0x2000000000000) >> 49)
               + ((v12 & 0x4000000000000) >> 50)
               + ((v12 & 0x8000000000000) >> 51)
               + ((v12 & 0x10000000000000) >> 52)
               + ((v12 & 0x20000000000000) >> 53);
  return (_DWORD)v16
       + ((v12 & 0x40000000000000) >> 54)
       + ((v12 & 0x80000000000000) >> 55)
       + ((v12 & 0x100000000000000) >> 56)
       + ((v12 & 0x200000000000000) >> 57)
       + ((v12 & 0x400000000000000) >> 58)
       + ((v12 & 0x800000000000000) >> 59)
       + ((v12 & 0x1000000000000000) >> 60)
       + ((v12 & 0x2000000000000000) >> 61)
       + ((v12 & 0x4000000000000000) >> 62)
       + (v13 & 1)
       + ((unint64_t)(v13 & 2) >> 1)
       + ((unint64_t)(v13 & 4) >> 2)
       + ((unint64_t)(v13 & 8) >> 3)
       + ((unint64_t)(v13 & 0x10) >> 4)
       + ((unint64_t)(v13 & 0x20) >> 5)
       + ((unint64_t)(v13 & 0x40) >> 6)
       + ((unint64_t)(v13 & 0x80) >> 7)
       + ((unint64_t)(v13 & 0x100) >> 8)
       + ((unint64_t)(v13 & 0x200) >> 9)
       + ((unint64_t)(v13 & 0x400) >> 10)
       + ((unint64_t)(v13 & 0x800) >> 11)
       + ((unint64_t)(v13 & 0x1000) >> 12);
}

unint64_t sub_1C4D588F8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  int v78;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_111;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_112;
  }
LABEL_111:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_113;
  }
LABEL_112:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_113:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_117;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_118;
  }
LABEL_117:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_119:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_123;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_124;
  }
LABEL_123:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_125;
  }
LABEL_124:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_125:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_129;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_130;
  }
LABEL_129:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_131;
  }
LABEL_130:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_132;
  }
LABEL_131:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_38;
    goto LABEL_37;
  }
LABEL_132:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) != 0)
LABEL_37:
    *(_BYTE *)(a2 + 53) = *(_QWORD *)(a1 + 224) != 0;
LABEL_38:
  v9 = v8;
  if ((v8 & 0x20000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 232) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x40000000) == 0)
    {
LABEL_40:
      if ((v9 & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_136;
    }
  }
  else if ((v8 & 0x40000000) == 0)
  {
    goto LABEL_40;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 240);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_137;
  }
LABEL_136:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_43;
    goto LABEL_138;
  }
LABEL_137:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 256) & 0x1FF;
  if ((v9 & 0x200000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x400000000) == 0)
      goto LABEL_45;
    goto LABEL_44;
  }
LABEL_138:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 264) & 0x1FFFF;
  if ((v9 & 0x400000000) != 0)
LABEL_44:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 272) & 0x1FFF;
LABEL_45:
  v10 = v9;
  if ((v9 & 0x800000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 280) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x1000000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 288);
  v11 = v10;
  if ((v10 & 0x2000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 296) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x4000000000) == 0)
    {
LABEL_51:
      if ((v11 & 0x8000000000) == 0)
        goto LABEL_52;
      goto LABEL_142;
    }
  }
  else if ((v10 & 0x4000000000) == 0)
  {
    goto LABEL_51;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_143;
  }
LABEL_142:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 312);
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_144;
  }
LABEL_143:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 320) != 0;
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_145;
  }
LABEL_144:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 328);
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_57;
    goto LABEL_56;
  }
LABEL_145:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 336) != 0;
  if ((v11 & 0x80000000000) != 0)
LABEL_56:
    *(_BYTE *)(a2 + 81) = *(_QWORD *)(a1 + 344) != 0;
LABEL_57:
  v12 = v11;
  if ((v11 & 0x100000000000) != 0)
  {
    *(_BYTE *)(a2 + 84) = *(_BYTE *)(a1 + 352) & 1;
    v12 = *(_QWORD *)(a1 + 1248);
    if ((v12 & 0x200000000000) == 0)
    {
LABEL_59:
      if ((v12 & 0x400000000000) == 0)
        goto LABEL_60;
      goto LABEL_149;
    }
  }
  else if ((v11 & 0x200000000000) == 0)
  {
    goto LABEL_59;
  }
  *(_WORD *)(a2 + 84) = *(_QWORD *)(a1 + 360);
  if ((v12 & 0x400000000000) == 0)
  {
LABEL_60:
    if ((v12 & 0x800000000000) == 0)
      goto LABEL_61;
    goto LABEL_150;
  }
LABEL_149:
  *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 368) & 0x1FF;
  if ((v12 & 0x800000000000) == 0)
  {
LABEL_61:
    if ((v12 & 0x1000000000000) == 0)
      goto LABEL_62;
    goto LABEL_151;
  }
LABEL_150:
  *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 376) & 0x1FF;
  if ((v12 & 0x1000000000000) == 0)
  {
LABEL_62:
    if ((v12 & 0x2000000000000) == 0)
      goto LABEL_64;
    goto LABEL_63;
  }
LABEL_151:
  *(_DWORD *)(a2 + 84) = *(_DWORD *)(a1 + 384) & 0x1FFFF;
  if ((v12 & 0x2000000000000) != 0)
LABEL_63:
    *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 392) & 0x1FFF;
LABEL_64:
  v13 = v12;
  if ((v12 & 0x4000000000000) != 0)
  {
    *(_BYTE *)(a2 + 84) = *(_BYTE *)(a1 + 400) & 0x7F;
    v13 = *(_QWORD *)(a1 + 1248);
  }
  v78 = v7;
  if ((v13 & 0x8000000000000) != 0)
    *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 408);
  v14 = v13;
  if ((v13 & 0x10000000000000) != 0)
  {
    *(_BYTE *)(a2 + 88) = *(_BYTE *)(a1 + 416) & 0xF;
    v14 = *(_QWORD *)(a1 + 1248);
    if ((v14 & 0x20000000000000) == 0)
    {
LABEL_70:
      if ((v14 & 0x40000000000000) == 0)
        goto LABEL_71;
      goto LABEL_155;
    }
  }
  else if ((v13 & 0x20000000000000) == 0)
  {
    goto LABEL_70;
  }
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 424);
  if ((v14 & 0x40000000000000) == 0)
  {
LABEL_71:
    if ((v14 & 0x80000000000000) == 0)
      goto LABEL_72;
    goto LABEL_156;
  }
LABEL_155:
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 432);
  if ((v14 & 0x80000000000000) == 0)
  {
LABEL_72:
    if ((v14 & 0x100000000000000) == 0)
      goto LABEL_73;
    goto LABEL_157;
  }
LABEL_156:
  *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 440) != 0;
  if ((v14 & 0x100000000000000) == 0)
  {
LABEL_73:
    if ((v14 & 0x200000000000000) == 0)
      goto LABEL_74;
    goto LABEL_158;
  }
LABEL_157:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 448);
  if ((v14 & 0x200000000000000) == 0)
  {
LABEL_74:
    if ((v14 & 0x400000000000000) == 0)
      goto LABEL_75;
    goto LABEL_159;
  }
LABEL_158:
  *(_BYTE *)(a2 + 108) = *(_QWORD *)(a1 + 456) != 0;
  if ((v14 & 0x400000000000000) == 0)
  {
LABEL_75:
    if ((v14 & 0x800000000000000) == 0)
      goto LABEL_76;
    goto LABEL_160;
  }
LABEL_159:
  *(_BYTE *)(a2 + 109) = *(_QWORD *)(a1 + 464) != 0;
  if ((v14 & 0x800000000000000) == 0)
  {
LABEL_76:
    if ((v14 & 0x1000000000000000) == 0)
      goto LABEL_77;
    goto LABEL_161;
  }
LABEL_160:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 472);
  if ((v14 & 0x1000000000000000) == 0)
  {
LABEL_77:
    if ((v14 & 0x2000000000000000) == 0)
      goto LABEL_78;
    goto LABEL_162;
  }
LABEL_161:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 480);
  if ((v14 & 0x2000000000000000) == 0)
  {
LABEL_78:
    if ((v14 & 0x4000000000000000) == 0)
      goto LABEL_79;
LABEL_163:
    *(_BYTE *)(a2 + 121) = *(_QWORD *)(a1 + 496) != 0;
    if ((v14 & 0x8000000000000000) == 0)
      goto LABEL_80;
    goto LABEL_164;
  }
LABEL_162:
  *(_BYTE *)(a2 + 120) = *(_QWORD *)(a1 + 488) != 0;
  if ((v14 & 0x4000000000000000) != 0)
    goto LABEL_163;
LABEL_79:
  if ((v14 & 0x8000000000000000) == 0)
    goto LABEL_80;
LABEL_164:
  *(_BYTE *)(a2 + 122) = *(_QWORD *)(a1 + 504) != 0;
LABEL_80:
  v15 = *(_QWORD *)(a1 + 1256);
  if ((v15 & 1) != 0)
  {
    *(_BYTE *)(a2 + 123) = *(_QWORD *)(a1 + 512) != 0;
    if ((v15 & 2) == 0)
    {
LABEL_82:
      if ((v15 & 4) == 0)
        goto LABEL_83;
      goto LABEL_167;
    }
  }
  else if ((v15 & 2) == 0)
  {
    goto LABEL_82;
  }
  *(_BYTE *)(a2 + 124) = *(_QWORD *)(a1 + 520) != 0;
  if ((v15 & 4) == 0)
  {
LABEL_83:
    if ((v15 & 8) == 0)
      goto LABEL_84;
    goto LABEL_168;
  }
LABEL_167:
  *(_BYTE *)(a2 + 125) = *(_QWORD *)(a1 + 528) != 0;
  if ((v15 & 8) == 0)
  {
LABEL_84:
    if ((v15 & 0x10) == 0)
      goto LABEL_85;
    goto LABEL_169;
  }
LABEL_168:
  *(_BYTE *)(a2 + 126) = *(_QWORD *)(a1 + 536) != 0;
  if ((v15 & 0x10) == 0)
  {
LABEL_85:
    if ((v15 & 0x20) == 0)
      goto LABEL_86;
    goto LABEL_170;
  }
LABEL_169:
  *(_BYTE *)(a2 + 127) = *(_QWORD *)(a1 + 544) != 0;
  if ((v15 & 0x20) == 0)
  {
LABEL_86:
    if ((v15 & 0x40) == 0)
      goto LABEL_87;
    goto LABEL_171;
  }
LABEL_170:
  *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 552);
  if ((v15 & 0x40) == 0)
  {
LABEL_87:
    if ((v15 & 0x80) == 0)
      goto LABEL_88;
    goto LABEL_172;
  }
LABEL_171:
  *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 560);
  if ((v15 & 0x80) == 0)
  {
LABEL_88:
    if ((v15 & 0x100) == 0)
      goto LABEL_89;
    goto LABEL_173;
  }
LABEL_172:
  *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 568);
  if ((v15 & 0x100) == 0)
  {
LABEL_89:
    if ((v15 & 0x200) == 0)
      goto LABEL_90;
    goto LABEL_174;
  }
LABEL_173:
  *(_DWORD *)(a2 + 140) = *(_QWORD *)(a1 + 576);
  if ((v15 & 0x200) == 0)
  {
LABEL_90:
    if ((v15 & 0x400) == 0)
      goto LABEL_91;
    goto LABEL_175;
  }
LABEL_174:
  *(_DWORD *)(a2 + 144) = *(_QWORD *)(a1 + 584);
  if ((v15 & 0x400) == 0)
  {
LABEL_91:
    if ((v15 & 0x800) == 0)
      goto LABEL_92;
    goto LABEL_176;
  }
LABEL_175:
  *(_DWORD *)(a2 + 148) = *(_QWORD *)(a1 + 592);
  if ((v15 & 0x800) == 0)
  {
LABEL_92:
    if ((v15 & 0x1000) == 0)
      goto LABEL_93;
    goto LABEL_177;
  }
LABEL_176:
  *(_DWORD *)(a2 + 152) = *(_QWORD *)(a1 + 600);
  if ((v15 & 0x1000) == 0)
  {
LABEL_93:
    if ((v15 & 0x2000) == 0)
      goto LABEL_94;
    goto LABEL_178;
  }
LABEL_177:
  *(_DWORD *)(a2 + 156) = *(_QWORD *)(a1 + 608);
  if ((v15 & 0x2000) == 0)
  {
LABEL_94:
    if ((v15 & 0x4000) == 0)
      goto LABEL_95;
    goto LABEL_179;
  }
LABEL_178:
  *(_BYTE *)(a2 + 160) = *(_QWORD *)(a1 + 616) != 0;
  if ((v15 & 0x4000) == 0)
  {
LABEL_95:
    if ((v15 & 0x8000) == 0)
      goto LABEL_96;
    goto LABEL_180;
  }
LABEL_179:
  *(_DWORD *)(a2 + 164) = *(_QWORD *)(a1 + 624);
  if ((v15 & 0x8000) == 0)
  {
LABEL_96:
    if ((v15 & 0x10000) == 0)
      goto LABEL_97;
    goto LABEL_181;
  }
LABEL_180:
  *(_DWORD *)(a2 + 168) = *(_QWORD *)(a1 + 632);
  if ((v15 & 0x10000) == 0)
  {
LABEL_97:
    if ((v15 & 0x20000) == 0)
      goto LABEL_98;
    goto LABEL_182;
  }
LABEL_181:
  *(_DWORD *)(a2 + 172) = *(_QWORD *)(a1 + 640);
  if ((v15 & 0x20000) == 0)
  {
LABEL_98:
    if ((v15 & 0x40000) == 0)
      goto LABEL_99;
    goto LABEL_183;
  }
LABEL_182:
  *(_DWORD *)(a2 + 176) = *(_QWORD *)(a1 + 648);
  if ((v15 & 0x40000) == 0)
  {
LABEL_99:
    if ((v15 & 0x80000) == 0)
      goto LABEL_100;
    goto LABEL_184;
  }
LABEL_183:
  *(_DWORD *)(a2 + 180) = *(_QWORD *)(a1 + 656);
  if ((v15 & 0x80000) == 0)
  {
LABEL_100:
    if ((v15 & 0x100000) == 0)
      goto LABEL_101;
    goto LABEL_185;
  }
LABEL_184:
  *(_DWORD *)(a2 + 184) = *(_QWORD *)(a1 + 664);
  if ((v15 & 0x100000) == 0)
  {
LABEL_101:
    if ((v15 & 0x200000) == 0)
      goto LABEL_102;
    goto LABEL_186;
  }
LABEL_185:
  *(_DWORD *)(a2 + 188) = *(_QWORD *)(a1 + 672);
  if ((v15 & 0x200000) == 0)
  {
LABEL_102:
    if ((v15 & 0x400000) == 0)
      goto LABEL_104;
    goto LABEL_103;
  }
LABEL_186:
  *(_DWORD *)(a2 + 192) = *(_QWORD *)(a1 + 680);
  if ((v15 & 0x400000) != 0)
LABEL_103:
    *(_DWORD *)(a2 + 196) = *(_QWORD *)(a1 + 688);
LABEL_104:
  v16 = v2 & 1;
  if ((v15 & 0x800000) != 0)
    *(_DWORD *)(a2 + 200) = *(_QWORD *)(a1 + 696);
  v17 = v3 & 2;
  v18 = v3 & 4;
  v19 = v3 & 8;
  v20 = v3 & 0x10;
  v21 = v3 & 0x20;
  v22 = v3 & 0x40;
  v23 = v4 & 0x80;
  v24 = v4 & 0x100;
  v48 = v11 & 0x4000000000;
  v49 = v11 & 0x8000000000;
  v50 = v11 & 0x10000000000;
  v51 = v11 & 0x20000000000;
  v52 = v11 & 0x40000000000;
  v53 = v11 & 0x80000000000;
  v54 = v11 & 0x100000000000;
  if ((v15 & 0x1000000) != 0)
    *(_DWORD *)(a2 + 204) = *(_QWORD *)(a1 + 704);
  v25 = v5 & 0x200;
  v32 = v6 & 0x10000;
  v31 = (unsigned __int16)v6 & 0x8000;
  v30 = v5 & 0x4000;
  v29 = v5 & 0x2000;
  v28 = v5 & 0x1000;
  v27 = v5 & 0x800;
  v26 = v5 & 0x400;
  v35 = v6 & 0x20000;
  v36 = v6 & 0x40000;
  v37 = v6 & 0x80000;
  v38 = v6 & 0x100000;
  v41 = v8 & 0x800000;
  v42 = v8 & 0x1000000;
  v43 = v8 & 0x2000000;
  v44 = v8 & 0x4000000;
  v45 = v8 & 0x8000000;
  v46 = v8 & 0x10000000;
  v47 = v8 & 0x20000000;
  v39 = v78 & 0x200000;
  v40 = v78 & 0x400000;
  v33 = BYTE4(v9) & 1;
  LODWORD(v25) = (v17 >> 1)
               + v16
               + (v18 >> 2)
               + (v19 >> 3)
               + (v20 >> 4)
               + (v21 >> 5)
               + (v22 >> 6)
               + (v23 >> 7)
               + (v24 >> 8)
               + (v25 >> 9)
               + (v26 >> 10)
               + (v27 >> 11)
               + (v28 >> 12)
               + (v29 >> 13)
               + (v30 >> 14)
               + (v31 >> 15)
               + (v32 >> 16)
               + (v35 >> 17)
               + (v36 >> 18)
               + (v37 >> 19)
               + (v38 >> 20)
               + (v39 >> 21)
               + (v40 >> 22)
               + (v41 >> 23)
               + (v42 >> 24)
               + (v43 >> 25)
               + (v44 >> 26)
               + (v45 >> 27)
               + (v46 >> 28)
               + (v47 >> 29)
               + ((v9 & 0x40000000) >> 30)
               + (v9 >> 31)
               + v33
               + ((v9 & 0x200000000) >> 33)
               + ((v9 & 0x400000000) >> 34)
               + ((v9 & 0x800000000) >> 35)
               + ((v10 & 0x1000000000) >> 36)
               + ((v10 & 0x2000000000) >> 37)
               + (v48 >> 38)
               + (v49 >> 39)
               + (v50 >> 40)
               + (v51 >> 41)
               + (v52 >> 42);
  v55 = v12 & 0x200000000000;
  v56 = v12 & 0x400000000000;
  v57 = v12 & 0x800000000000;
  v58 = v12 & 0x1000000000000;
  v59 = v12 & 0x2000000000000;
  v60 = v12 & 0x4000000000000;
  v61 = v13 & 0x8000000000000;
  v62 = v13 & 0x10000000000000;
  v63 = v14 & 0x20000000000000;
  v64 = v14 & 0x80000000000000;
  v65 = v14 & 0x40000000000000;
  v66 = v14 & 0x100000000000000;
  v67 = v15 & 0x20000;
  v68 = v15 & 0x10000;
  v69 = (unsigned __int16)v15 & 0x8000;
  v70 = v15 & 0x4000;
  v71 = v15 & 0x2000;
  v72 = v15 & 0x1000;
  v73 = v15 & 0x800;
  v74 = v15 & 0x400;
  v75 = v15 & 0x200;
  v76 = v15 & 0x100;
  v77 = v15 & 1;
  LODWORD(v25) = v25
               + (v53 >> 43)
               + (v54 >> 44)
               + (v55 >> 45)
               + (v56 >> 46)
               + (v57 >> 47)
               + HIWORD(v58)
               + (v59 >> 49)
               + (v60 >> 50)
               + (v61 >> 51)
               + (v62 >> 52)
               + (v14 >> 63)
               + (v63 >> 53)
               + (v65 >> 54)
               + (v64 >> 55)
               + HIBYTE(v66)
               + ((v14 & 0x200000000000000) >> 57)
               + ((v14 & 0x400000000000000) >> 58)
               + ((v14 & 0x800000000000000) >> 59)
               + ((v14 & 0x1000000000000000) >> 60)
               + ((v14 & 0x2000000000000000) >> 61)
               + ((v14 & 0x4000000000000000) >> 62)
               + v77
               + ((unint64_t)(v15 & 2) >> 1)
               + ((unint64_t)(v15 & 4) >> 2)
               + ((unint64_t)(v15 & 8) >> 3)
               + ((unint64_t)(v15 & 0x10) >> 4)
               + ((unint64_t)(v15 & 0x20) >> 5)
               + ((unint64_t)(v15 & 0x40) >> 6)
               + ((unint64_t)(v15 & 0x80) >> 7)
               + (v76 >> 8)
               + (v75 >> 9)
               + (v74 >> 10)
               + (v73 >> 11)
               + (v72 >> 12)
               + (v71 >> 13)
               + (v70 >> 14)
               + (v69 >> 15)
               + (v68 >> 16)
               + (v67 >> 17);
  return v25
       + ((v15 & 0x40000uLL) >> 18)
       + ((v15 & 0x80000uLL) >> 19)
       + ((v15 & 0x100000uLL) >> 20)
       + ((v15 & 0x200000uLL) >> 21)
       + ((v15 & 0x400000uLL) >> 22)
       + ((v15 & 0x800000uLL) >> 23)
       + ((v15 & 0x1000000) >> 24);
}

unint64_t sub_1C4D59600(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  int v78;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_111;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_112;
  }
LABEL_111:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_113;
  }
LABEL_112:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_113:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_117;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_118;
  }
LABEL_117:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_119;
  }
LABEL_118:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_119:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_123;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_124;
  }
LABEL_123:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_125;
  }
LABEL_124:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_125:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_129;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_130;
  }
LABEL_129:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_131;
  }
LABEL_130:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_132;
  }
LABEL_131:
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_38;
    goto LABEL_37;
  }
LABEL_132:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  if ((v8 & 0x10000000) != 0)
LABEL_37:
    *(_BYTE *)(a2 + 53) = *(_QWORD *)(a1 + 224) != 0;
LABEL_38:
  v9 = v8;
  if ((v8 & 0x20000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 232) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x40000000) == 0)
    {
LABEL_40:
      if ((v9 & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_136;
    }
  }
  else if ((v8 & 0x40000000) == 0)
  {
    goto LABEL_40;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 240);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_137;
  }
LABEL_136:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_43;
    goto LABEL_138;
  }
LABEL_137:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 256) & 0x1FF;
  if ((v9 & 0x200000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x400000000) == 0)
      goto LABEL_45;
    goto LABEL_44;
  }
LABEL_138:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 264) & 0x1FFFF;
  if ((v9 & 0x400000000) != 0)
LABEL_44:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 272) & 0x1FFF;
LABEL_45:
  v10 = v9;
  if ((v9 & 0x800000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 280) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x1000000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 288);
  v11 = v10;
  if ((v10 & 0x2000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 296) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x4000000000) == 0)
    {
LABEL_51:
      if ((v11 & 0x8000000000) == 0)
        goto LABEL_52;
      goto LABEL_142;
    }
  }
  else if ((v10 & 0x4000000000) == 0)
  {
    goto LABEL_51;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_53;
    goto LABEL_143;
  }
LABEL_142:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 312);
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_54;
    goto LABEL_144;
  }
LABEL_143:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 320) != 0;
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_55;
    goto LABEL_145;
  }
LABEL_144:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 328);
  if ((v11 & 0x40000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x80000000000) == 0)
      goto LABEL_57;
    goto LABEL_56;
  }
LABEL_145:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 336) != 0;
  if ((v11 & 0x80000000000) != 0)
LABEL_56:
    *(_BYTE *)(a2 + 81) = *(_QWORD *)(a1 + 344) != 0;
LABEL_57:
  v12 = v11;
  if ((v11 & 0x100000000000) != 0)
  {
    *(_BYTE *)(a2 + 84) = *(_BYTE *)(a1 + 352) & 1;
    v12 = *(_QWORD *)(a1 + 1248);
    if ((v12 & 0x200000000000) == 0)
    {
LABEL_59:
      if ((v12 & 0x400000000000) == 0)
        goto LABEL_60;
      goto LABEL_149;
    }
  }
  else if ((v11 & 0x200000000000) == 0)
  {
    goto LABEL_59;
  }
  *(_WORD *)(a2 + 84) = *(_QWORD *)(a1 + 360);
  if ((v12 & 0x400000000000) == 0)
  {
LABEL_60:
    if ((v12 & 0x800000000000) == 0)
      goto LABEL_61;
    goto LABEL_150;
  }
LABEL_149:
  *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 368) & 0x1FF;
  if ((v12 & 0x800000000000) == 0)
  {
LABEL_61:
    if ((v12 & 0x1000000000000) == 0)
      goto LABEL_62;
    goto LABEL_151;
  }
LABEL_150:
  *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 376) & 0x1FF;
  if ((v12 & 0x1000000000000) == 0)
  {
LABEL_62:
    if ((v12 & 0x2000000000000) == 0)
      goto LABEL_64;
    goto LABEL_63;
  }
LABEL_151:
  *(_DWORD *)(a2 + 84) = *(_DWORD *)(a1 + 384) & 0x1FFFF;
  if ((v12 & 0x2000000000000) != 0)
LABEL_63:
    *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 392) & 0x1FFF;
LABEL_64:
  v13 = v12;
  if ((v12 & 0x4000000000000) != 0)
  {
    *(_BYTE *)(a2 + 84) = *(_BYTE *)(a1 + 400) & 0x7F;
    v13 = *(_QWORD *)(a1 + 1248);
  }
  v78 = v7;
  if ((v13 & 0x8000000000000) != 0)
    *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 408);
  v14 = v13;
  if ((v13 & 0x10000000000000) != 0)
  {
    *(_BYTE *)(a2 + 88) = *(_BYTE *)(a1 + 416) & 0xF;
    v14 = *(_QWORD *)(a1 + 1248);
    if ((v14 & 0x20000000000000) == 0)
    {
LABEL_70:
      if ((v14 & 0x40000000000000) == 0)
        goto LABEL_71;
      goto LABEL_155;
    }
  }
  else if ((v13 & 0x20000000000000) == 0)
  {
    goto LABEL_70;
  }
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 424);
  if ((v14 & 0x40000000000000) == 0)
  {
LABEL_71:
    if ((v14 & 0x80000000000000) == 0)
      goto LABEL_72;
    goto LABEL_156;
  }
LABEL_155:
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 432);
  if ((v14 & 0x80000000000000) == 0)
  {
LABEL_72:
    if ((v14 & 0x100000000000000) == 0)
      goto LABEL_73;
    goto LABEL_157;
  }
LABEL_156:
  *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 440) != 0;
  if ((v14 & 0x100000000000000) == 0)
  {
LABEL_73:
    if ((v14 & 0x200000000000000) == 0)
      goto LABEL_74;
    goto LABEL_158;
  }
LABEL_157:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 448);
  if ((v14 & 0x200000000000000) == 0)
  {
LABEL_74:
    if ((v14 & 0x400000000000000) == 0)
      goto LABEL_75;
    goto LABEL_159;
  }
LABEL_158:
  *(_BYTE *)(a2 + 108) = *(_QWORD *)(a1 + 456) != 0;
  if ((v14 & 0x400000000000000) == 0)
  {
LABEL_75:
    if ((v14 & 0x800000000000000) == 0)
      goto LABEL_76;
    goto LABEL_160;
  }
LABEL_159:
  *(_BYTE *)(a2 + 109) = *(_QWORD *)(a1 + 464) != 0;
  if ((v14 & 0x800000000000000) == 0)
  {
LABEL_76:
    if ((v14 & 0x1000000000000000) == 0)
      goto LABEL_77;
    goto LABEL_161;
  }
LABEL_160:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 472);
  if ((v14 & 0x1000000000000000) == 0)
  {
LABEL_77:
    if ((v14 & 0x2000000000000000) == 0)
      goto LABEL_78;
    goto LABEL_162;
  }
LABEL_161:
  *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 480);
  if ((v14 & 0x2000000000000000) == 0)
  {
LABEL_78:
    if ((v14 & 0x4000000000000000) == 0)
      goto LABEL_79;
LABEL_163:
    *(_BYTE *)(a2 + 121) = *(_QWORD *)(a1 + 496) != 0;
    if ((v14 & 0x8000000000000000) == 0)
      goto LABEL_80;
    goto LABEL_164;
  }
LABEL_162:
  *(_BYTE *)(a2 + 120) = *(_QWORD *)(a1 + 488) != 0;
  if ((v14 & 0x4000000000000000) != 0)
    goto LABEL_163;
LABEL_79:
  if ((v14 & 0x8000000000000000) == 0)
    goto LABEL_80;
LABEL_164:
  *(_BYTE *)(a2 + 122) = *(_QWORD *)(a1 + 504) != 0;
LABEL_80:
  v15 = *(_QWORD *)(a1 + 1256);
  if ((v15 & 1) != 0)
  {
    *(_BYTE *)(a2 + 123) = *(_QWORD *)(a1 + 512) != 0;
    if ((v15 & 2) == 0)
    {
LABEL_82:
      if ((v15 & 4) == 0)
        goto LABEL_83;
      goto LABEL_167;
    }
  }
  else if ((v15 & 2) == 0)
  {
    goto LABEL_82;
  }
  *(_BYTE *)(a2 + 124) = *(_QWORD *)(a1 + 520) != 0;
  if ((v15 & 4) == 0)
  {
LABEL_83:
    if ((v15 & 8) == 0)
      goto LABEL_84;
    goto LABEL_168;
  }
LABEL_167:
  *(_BYTE *)(a2 + 125) = *(_QWORD *)(a1 + 528) != 0;
  if ((v15 & 8) == 0)
  {
LABEL_84:
    if ((v15 & 0x10) == 0)
      goto LABEL_85;
    goto LABEL_169;
  }
LABEL_168:
  *(_BYTE *)(a2 + 126) = *(_QWORD *)(a1 + 536) != 0;
  if ((v15 & 0x10) == 0)
  {
LABEL_85:
    if ((v15 & 0x20) == 0)
      goto LABEL_86;
    goto LABEL_170;
  }
LABEL_169:
  *(_BYTE *)(a2 + 127) = *(_QWORD *)(a1 + 544) != 0;
  if ((v15 & 0x20) == 0)
  {
LABEL_86:
    if ((v15 & 0x40) == 0)
      goto LABEL_87;
    goto LABEL_171;
  }
LABEL_170:
  *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 552);
  if ((v15 & 0x40) == 0)
  {
LABEL_87:
    if ((v15 & 0x80) == 0)
      goto LABEL_88;
    goto LABEL_172;
  }
LABEL_171:
  *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 560);
  if ((v15 & 0x80) == 0)
  {
LABEL_88:
    if ((v15 & 0x100) == 0)
      goto LABEL_89;
    goto LABEL_173;
  }
LABEL_172:
  *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 568);
  if ((v15 & 0x100) == 0)
  {
LABEL_89:
    if ((v15 & 0x200) == 0)
      goto LABEL_90;
    goto LABEL_174;
  }
LABEL_173:
  *(_DWORD *)(a2 + 140) = *(_QWORD *)(a1 + 576);
  if ((v15 & 0x200) == 0)
  {
LABEL_90:
    if ((v15 & 0x400) == 0)
      goto LABEL_91;
    goto LABEL_175;
  }
LABEL_174:
  *(_DWORD *)(a2 + 144) = *(_QWORD *)(a1 + 584);
  if ((v15 & 0x400) == 0)
  {
LABEL_91:
    if ((v15 & 0x800) == 0)
      goto LABEL_92;
    goto LABEL_176;
  }
LABEL_175:
  *(_DWORD *)(a2 + 148) = *(_QWORD *)(a1 + 592);
  if ((v15 & 0x800) == 0)
  {
LABEL_92:
    if ((v15 & 0x1000) == 0)
      goto LABEL_93;
    goto LABEL_177;
  }
LABEL_176:
  *(_DWORD *)(a2 + 152) = *(_QWORD *)(a1 + 600);
  if ((v15 & 0x1000) == 0)
  {
LABEL_93:
    if ((v15 & 0x2000) == 0)
      goto LABEL_94;
    goto LABEL_178;
  }
LABEL_177:
  *(_DWORD *)(a2 + 156) = *(_QWORD *)(a1 + 608);
  if ((v15 & 0x2000) == 0)
  {
LABEL_94:
    if ((v15 & 0x4000) == 0)
      goto LABEL_95;
    goto LABEL_179;
  }
LABEL_178:
  *(_BYTE *)(a2 + 160) = *(_QWORD *)(a1 + 616) != 0;
  if ((v15 & 0x4000) == 0)
  {
LABEL_95:
    if ((v15 & 0x8000) == 0)
      goto LABEL_96;
    goto LABEL_180;
  }
LABEL_179:
  *(_DWORD *)(a2 + 164) = *(_QWORD *)(a1 + 624);
  if ((v15 & 0x8000) == 0)
  {
LABEL_96:
    if ((v15 & 0x10000) == 0)
      goto LABEL_97;
    goto LABEL_181;
  }
LABEL_180:
  *(_DWORD *)(a2 + 168) = *(_QWORD *)(a1 + 632);
  if ((v15 & 0x10000) == 0)
  {
LABEL_97:
    if ((v15 & 0x20000) == 0)
      goto LABEL_98;
    goto LABEL_182;
  }
LABEL_181:
  *(_DWORD *)(a2 + 172) = *(_QWORD *)(a1 + 640);
  if ((v15 & 0x20000) == 0)
  {
LABEL_98:
    if ((v15 & 0x40000) == 0)
      goto LABEL_99;
    goto LABEL_183;
  }
LABEL_182:
  *(_DWORD *)(a2 + 176) = *(_QWORD *)(a1 + 648);
  if ((v15 & 0x40000) == 0)
  {
LABEL_99:
    if ((v15 & 0x80000) == 0)
      goto LABEL_100;
    goto LABEL_184;
  }
LABEL_183:
  *(_DWORD *)(a2 + 180) = *(_QWORD *)(a1 + 656);
  if ((v15 & 0x80000) == 0)
  {
LABEL_100:
    if ((v15 & 0x100000) == 0)
      goto LABEL_101;
    goto LABEL_185;
  }
LABEL_184:
  *(_DWORD *)(a2 + 184) = *(_QWORD *)(a1 + 664);
  if ((v15 & 0x100000) == 0)
  {
LABEL_101:
    if ((v15 & 0x200000) == 0)
      goto LABEL_102;
    goto LABEL_186;
  }
LABEL_185:
  *(_DWORD *)(a2 + 188) = *(_QWORD *)(a1 + 672);
  if ((v15 & 0x200000) == 0)
  {
LABEL_102:
    if ((v15 & 0x400000) == 0)
      goto LABEL_104;
    goto LABEL_103;
  }
LABEL_186:
  *(_DWORD *)(a2 + 192) = *(_QWORD *)(a1 + 680);
  if ((v15 & 0x400000) != 0)
LABEL_103:
    *(_DWORD *)(a2 + 196) = *(_QWORD *)(a1 + 688);
LABEL_104:
  v16 = v2 & 1;
  if ((v15 & 0x800000) != 0)
    *(_DWORD *)(a2 + 200) = *(_QWORD *)(a1 + 696);
  v17 = v3 & 2;
  v18 = v3 & 4;
  v19 = v3 & 8;
  v20 = v3 & 0x10;
  v21 = v3 & 0x20;
  v22 = v3 & 0x40;
  v23 = v4 & 0x80;
  v24 = v4 & 0x100;
  v48 = v11 & 0x4000000000;
  v49 = v11 & 0x8000000000;
  v50 = v11 & 0x10000000000;
  v51 = v11 & 0x20000000000;
  v52 = v11 & 0x40000000000;
  v53 = v11 & 0x80000000000;
  v54 = v11 & 0x100000000000;
  if ((v15 & 0x1000000) != 0)
    *(_DWORD *)(a2 + 204) = *(_QWORD *)(a1 + 704);
  v25 = v5 & 0x200;
  v32 = v6 & 0x10000;
  v31 = (unsigned __int16)v6 & 0x8000;
  v30 = v5 & 0x4000;
  v29 = v5 & 0x2000;
  v28 = v5 & 0x1000;
  v27 = v5 & 0x800;
  v26 = v5 & 0x400;
  v35 = v6 & 0x20000;
  v36 = v6 & 0x40000;
  v37 = v6 & 0x80000;
  v38 = v6 & 0x100000;
  v41 = v8 & 0x800000;
  v42 = v8 & 0x1000000;
  v43 = v8 & 0x2000000;
  v44 = v8 & 0x4000000;
  v45 = v8 & 0x8000000;
  v46 = v8 & 0x10000000;
  v47 = v8 & 0x20000000;
  v39 = v78 & 0x200000;
  v40 = v78 & 0x400000;
  v33 = BYTE4(v9) & 1;
  LODWORD(v25) = (v17 >> 1)
               + v16
               + (v18 >> 2)
               + (v19 >> 3)
               + (v20 >> 4)
               + (v21 >> 5)
               + (v22 >> 6)
               + (v23 >> 7)
               + (v24 >> 8)
               + (v25 >> 9)
               + (v26 >> 10)
               + (v27 >> 11)
               + (v28 >> 12)
               + (v29 >> 13)
               + (v30 >> 14)
               + (v31 >> 15)
               + (v32 >> 16)
               + (v35 >> 17)
               + (v36 >> 18)
               + (v37 >> 19)
               + (v38 >> 20)
               + (v39 >> 21)
               + (v40 >> 22)
               + (v41 >> 23)
               + (v42 >> 24)
               + (v43 >> 25)
               + (v44 >> 26)
               + (v45 >> 27)
               + (v46 >> 28)
               + (v47 >> 29)
               + ((v9 & 0x40000000) >> 30)
               + (v9 >> 31)
               + v33
               + ((v9 & 0x200000000) >> 33)
               + ((v9 & 0x400000000) >> 34)
               + ((v9 & 0x800000000) >> 35)
               + ((v10 & 0x1000000000) >> 36)
               + ((v10 & 0x2000000000) >> 37)
               + (v48 >> 38)
               + (v49 >> 39)
               + (v50 >> 40)
               + (v51 >> 41)
               + (v52 >> 42);
  v55 = v12 & 0x200000000000;
  v56 = v12 & 0x400000000000;
  v57 = v12 & 0x800000000000;
  v58 = v12 & 0x1000000000000;
  v59 = v12 & 0x2000000000000;
  v60 = v12 & 0x4000000000000;
  v61 = v13 & 0x8000000000000;
  v62 = v13 & 0x10000000000000;
  v63 = v14 & 0x20000000000000;
  v64 = v14 & 0x80000000000000;
  v65 = v14 & 0x40000000000000;
  v66 = v14 & 0x100000000000000;
  v67 = v15 & 0x20000;
  v68 = v15 & 0x10000;
  v69 = (unsigned __int16)v15 & 0x8000;
  v70 = v15 & 0x4000;
  v71 = v15 & 0x2000;
  v72 = v15 & 0x1000;
  v73 = v15 & 0x800;
  v74 = v15 & 0x400;
  v75 = v15 & 0x200;
  v76 = v15 & 0x100;
  v77 = v15 & 1;
  LODWORD(v25) = v25
               + (v53 >> 43)
               + (v54 >> 44)
               + (v55 >> 45)
               + (v56 >> 46)
               + (v57 >> 47)
               + HIWORD(v58)
               + (v59 >> 49)
               + (v60 >> 50)
               + (v61 >> 51)
               + (v62 >> 52)
               + (v14 >> 63)
               + (v63 >> 53)
               + (v65 >> 54)
               + (v64 >> 55)
               + HIBYTE(v66)
               + ((v14 & 0x200000000000000) >> 57)
               + ((v14 & 0x400000000000000) >> 58)
               + ((v14 & 0x800000000000000) >> 59)
               + ((v14 & 0x1000000000000000) >> 60)
               + ((v14 & 0x2000000000000000) >> 61)
               + ((v14 & 0x4000000000000000) >> 62)
               + v77
               + ((unint64_t)(v15 & 2) >> 1)
               + ((unint64_t)(v15 & 4) >> 2)
               + ((unint64_t)(v15 & 8) >> 3)
               + ((unint64_t)(v15 & 0x10) >> 4)
               + ((unint64_t)(v15 & 0x20) >> 5)
               + ((unint64_t)(v15 & 0x40) >> 6)
               + ((unint64_t)(v15 & 0x80) >> 7)
               + (v76 >> 8)
               + (v75 >> 9)
               + (v74 >> 10)
               + (v73 >> 11)
               + (v72 >> 12)
               + (v71 >> 13)
               + (v70 >> 14)
               + (v69 >> 15)
               + (v68 >> 16)
               + (v67 >> 17);
  return v25
       + ((v15 & 0x40000uLL) >> 18)
       + ((v15 & 0x80000uLL) >> 19)
       + ((v15 & 0x100000uLL) >> 20)
       + ((v15 & 0x200000uLL) >> 21)
       + ((v15 & 0x400000uLL) >> 22)
       + ((v15 & 0x800000uLL) >> 23)
       + ((v15 & 0x1000000) >> 24);
}

unint64_t sub_1C4D5A308(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_48;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_49;
  }
LABEL_48:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_50;
  }
LABEL_49:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_50:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_54;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_55;
  }
LABEL_54:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_56;
  }
LABEL_55:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_56:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_BYTE *)(a2 + 24) = *(_QWORD *)(a1 + 104) != 0;
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 112) & 0xFFFFFFFFFFFFLL;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_60;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_61;
  }
LABEL_60:
  *(_DWORD *)(a2 + 44) = *(_QWORD *)(a1 + 128);
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_62;
  }
LABEL_61:
  *(_BYTE *)(a2 + 48) = *(_QWORD *)(a1 + 136) != 0;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_63;
  }
LABEL_62:
  *(_BYTE *)(a2 + 49) = *(_QWORD *)(a1 + 144) != 0;
  if ((v6 & 0x80000) == 0)
  {
LABEL_25:
    if ((v6 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_64;
  }
LABEL_63:
  *(_BYTE *)(a2 + 50) = *(_QWORD *)(a1 + 152) != 0;
  if ((v6 & 0x100000) == 0)
  {
LABEL_26:
    if ((v6 & 0x200000) == 0)
      goto LABEL_27;
    goto LABEL_65;
  }
LABEL_64:
  *(_BYTE *)(a2 + 51) = *(_QWORD *)(a1 + 160) != 0;
  if ((v6 & 0x200000) == 0)
  {
LABEL_27:
    if ((v6 & 0x400000) == 0)
      goto LABEL_28;
    goto LABEL_66;
  }
LABEL_65:
  *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 168) != 0;
  if ((v6 & 0x400000) == 0)
  {
LABEL_28:
    if ((v6 & 0x800000) == 0)
      goto LABEL_29;
    goto LABEL_67;
  }
LABEL_66:
  *(_BYTE *)(a2 + 53) = *(_QWORD *)(a1 + 176) != 0;
  if ((v6 & 0x800000) == 0)
  {
LABEL_29:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_30;
    goto LABEL_68;
  }
LABEL_67:
  *(_BYTE *)(a2 + 54) = *(_QWORD *)(a1 + 184) != 0;
  if ((v6 & 0x1000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_31;
    goto LABEL_69;
  }
LABEL_68:
  *(_BYTE *)(a2 + 55) = *(_QWORD *)(a1 + 192) != 0;
  if ((v6 & 0x2000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_32;
    goto LABEL_70;
  }
LABEL_69:
  *(_BYTE *)(a2 + 56) = *(_QWORD *)(a1 + 200) != 0;
  if ((v6 & 0x4000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_33;
    goto LABEL_71;
  }
LABEL_70:
  *(_BYTE *)(a2 + 57) = *(_QWORD *)(a1 + 208) != 0;
  if ((v6 & 0x8000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_34;
    goto LABEL_72;
  }
LABEL_71:
  *(_DWORD *)(a2 + 60) = *(_QWORD *)(a1 + 216);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_35;
    goto LABEL_73;
  }
LABEL_72:
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 224);
  if ((v6 & 0x20000000) == 0)
  {
LABEL_35:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_36;
    goto LABEL_74;
  }
LABEL_73:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 232);
  if ((v6 & 0x40000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_75;
  }
LABEL_74:
  *(_DWORD *)(a2 + 72) = *(_QWORD *)(a1 + 240);
  if ((v6 & 0x80000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_38;
    goto LABEL_76;
  }
LABEL_75:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 248);
  if ((v6 & 0x100000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_39;
    goto LABEL_77;
  }
LABEL_76:
  *(_DWORD *)(a2 + 80) = *(_QWORD *)(a1 + 256);
  if ((v6 & 0x200000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x400000000) == 0)
      goto LABEL_41;
    goto LABEL_40;
  }
LABEL_77:
  *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 264);
  if ((v6 & 0x400000000) != 0)
LABEL_40:
    *(_DWORD *)(a2 + 88) = *(_QWORD *)(a1 + 272);
LABEL_41:
  v7 = v2 & 1;
  if ((v6 & 0x800000000) != 0)
    *(_BYTE *)(a2 + 92) = *(_QWORD *)(a1 + 280) != 0;
  if ((v6 & 0x1000000000) != 0)
    *(_BYTE *)(a2 + 93) = *(_BYTE *)(a1 + 288) & 0x1F;
  v8 = v3 & 8;
  v11 = v6 & 0x800000;
  v10 = v4 & 0x100;
  v9 = v4 & 0x80;
  v13 = v6 & 0x2000000;
  v14 = v6 & 0x4000000;
  v15 = v6 & 0x8000000;
  v16 = v6 & 0x10000000;
  v17 = v6 & 0x20000000;
  v18 = v6 & 0x40000000;
  v20 = v6 & 0x200000000;
  v21 = v6 & 0x400000000;
  v19 = BYTE4(v6) & 1;
  return ((unint64_t)(v3 & 2) >> 1)
       + v7
       + ((unint64_t)(v3 & 4) >> 2)
       + (v8 >> 3)
       + ((unint64_t)(v3 & 0x10) >> 4)
       + ((unint64_t)(v3 & 0x20) >> 5)
       + ((unint64_t)(v3 & 0x40) >> 6)
       + (v9 >> 7)
       + (v10 >> 8)
       + ((unint64_t)(v5 & 0x200) >> 9)
       + ((unint64_t)(v5 & 0x400) >> 10)
       + ((unint64_t)(v5 & 0x800) >> 11)
       + ((unint64_t)(v5 & 0x1000) >> 12)
       + ((unint64_t)(v5 & 0x2000) >> 13)
       + ((unint64_t)(v5 & 0x4000) >> 14)
       + ((unint64_t)((unsigned __int16)v6 & 0x8000) >> 15)
       + ((v6 & 0x10000uLL) >> 16)
       + ((v6 & 0x20000uLL) >> 17)
       + ((v6 & 0x40000uLL) >> 18)
       + ((v6 & 0x80000uLL) >> 19)
       + ((v6 & 0x100000uLL) >> 20)
       + ((v6 & 0x200000uLL) >> 21)
       + ((v6 & 0x400000uLL) >> 22)
       + (v11 >> 23)
       + ((v6 & 0x1000000) >> 24)
       + (v13 >> 25)
       + (v14 >> 26)
       + (v15 >> 27)
       + (v16 >> 28)
       + (v17 >> 29)
       + (v18 >> 30)
       + (v6 >> 31)
       + v19
       + (v20 >> 33)
       + (v21 >> 34)
       + ((v6 & 0x800000000uLL) >> 35)
       + ((v6 & 0x1000000000uLL) >> 36);
}

unint64_t sub_1C4D5A830(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  unint64_t v81;
  int v82;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_130;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_131;
  }
LABEL_130:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_132;
  }
LABEL_131:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_132:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_136;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_137;
  }
LABEL_136:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_138;
  }
LABEL_137:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_138:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_142;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_143;
  }
LABEL_142:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_144;
  }
LABEL_143:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_144:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_148;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_149;
  }
LABEL_148:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_36;
    goto LABEL_35;
  }
LABEL_149:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) != 0)
LABEL_35:
    *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
LABEL_36:
  v82 = v7;
  if ((v8 & 0x8000000) != 0)
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  v9 = v8;
  if ((v8 & 0x10000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 224) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_40:
      if ((v9 & 0x40000000) == 0)
        goto LABEL_41;
      goto LABEL_153;
    }
  }
  else if ((v8 & 0x20000000) == 0)
  {
    goto LABEL_40;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 232);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_154;
  }
LABEL_153:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 240) & 0x1FF;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_43;
    goto LABEL_155;
  }
LABEL_154:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_45;
    goto LABEL_44;
  }
LABEL_155:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 256) & 0x1FFFF;
  if ((v9 & 0x200000000) != 0)
LABEL_44:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 264) & 0x1FFF;
LABEL_45:
  v10 = v9;
  if ((v9 & 0x400000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 272) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x800000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 280);
  v11 = v10;
  if ((v10 & 0x1000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 288) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x2000000000) == 0)
    {
LABEL_51:
      if ((v11 & 0x4000000000) == 0)
        goto LABEL_52;
      goto LABEL_159;
    }
  }
  else if ((v10 & 0x2000000000) == 0)
  {
    goto LABEL_51;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 296);
  if ((v11 & 0x4000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x8000000000) == 0)
      goto LABEL_53;
    goto LABEL_160;
  }
LABEL_159:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_54;
    goto LABEL_161;
  }
LABEL_160:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 312) != 0;
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_55;
    goto LABEL_162;
  }
LABEL_161:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 320);
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_57;
    goto LABEL_56;
  }
LABEL_162:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 328) != 0;
  if ((v11 & 0x40000000000) != 0)
LABEL_56:
    *(_BYTE *)(a2 + 81) = *(_QWORD *)(a1 + 336) != 0;
LABEL_57:
  v12 = v11;
  if ((v11 & 0x80000000000) != 0)
  {
    *(_BYTE *)(a2 + 84) = *(_BYTE *)(a1 + 344) & 1;
    v12 = *(_QWORD *)(a1 + 1248);
    if ((v12 & 0x100000000000) == 0)
    {
LABEL_59:
      if ((v12 & 0x200000000000) == 0)
        goto LABEL_60;
      goto LABEL_166;
    }
  }
  else if ((v11 & 0x100000000000) == 0)
  {
    goto LABEL_59;
  }
  *(_WORD *)(a2 + 84) = *(_QWORD *)(a1 + 352);
  if ((v12 & 0x200000000000) == 0)
  {
LABEL_60:
    if ((v12 & 0x400000000000) == 0)
      goto LABEL_61;
    goto LABEL_167;
  }
LABEL_166:
  *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 360) & 0x1FF;
  if ((v12 & 0x400000000000) == 0)
  {
LABEL_61:
    if ((v12 & 0x800000000000) == 0)
      goto LABEL_62;
    goto LABEL_168;
  }
LABEL_167:
  *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 368) & 0x1FF;
  if ((v12 & 0x800000000000) == 0)
  {
LABEL_62:
    if ((v12 & 0x1000000000000) == 0)
      goto LABEL_64;
    goto LABEL_63;
  }
LABEL_168:
  *(_DWORD *)(a2 + 84) = *(_DWORD *)(a1 + 376) & 0x1FFFF;
  if ((v12 & 0x1000000000000) != 0)
LABEL_63:
    *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 384) & 0x1FFF;
LABEL_64:
  v13 = v12;
  if ((v12 & 0x2000000000000) != 0)
  {
    *(_BYTE *)(a2 + 84) = *(_BYTE *)(a1 + 392) & 0x7F;
    v13 = *(_QWORD *)(a1 + 1248);
  }
  if ((v13 & 0x4000000000000) != 0)
    *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 400);
  v14 = v13;
  if ((v13 & 0x8000000000000) != 0)
  {
    *(_BYTE *)(a2 + 88) = *(_BYTE *)(a1 + 408) & 0xF;
    v14 = *(_QWORD *)(a1 + 1248);
    if ((v14 & 0x10000000000000) == 0)
    {
LABEL_70:
      if ((v14 & 0x20000000000000) == 0)
        goto LABEL_71;
      goto LABEL_172;
    }
  }
  else if ((v13 & 0x10000000000000) == 0)
  {
    goto LABEL_70;
  }
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 416);
  if ((v14 & 0x20000000000000) == 0)
  {
LABEL_71:
    if ((v14 & 0x40000000000000) == 0)
      goto LABEL_72;
    goto LABEL_173;
  }
LABEL_172:
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 424);
  if ((v14 & 0x40000000000000) == 0)
  {
LABEL_72:
    if ((v14 & 0x80000000000000) == 0)
      goto LABEL_73;
    goto LABEL_174;
  }
LABEL_173:
  *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 432) != 0;
  if ((v14 & 0x80000000000000) == 0)
  {
LABEL_73:
    if ((v14 & 0x100000000000000) == 0)
      goto LABEL_75;
    goto LABEL_74;
  }
LABEL_174:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 440);
  if ((v14 & 0x100000000000000) != 0)
LABEL_74:
    *(_BYTE *)(a2 + 108) = *(_QWORD *)(a1 + 448) != 0;
LABEL_75:
  v81 = v10;
  if ((v14 & 0x200000000000000) != 0)
    *(_BYTE *)(a2 + 112) = *(_QWORD *)(a1 + 456) != 0;
  v15 = v14;
  if ((v14 & 0x400000000000000) != 0)
  {
    *(_BYTE *)(a2 + 116) = *(_BYTE *)(a1 + 464) & 1;
    v15 = *(_QWORD *)(a1 + 1248);
    if ((v15 & 0x800000000000000) == 0)
    {
LABEL_79:
      if ((v15 & 0x1000000000000000) == 0)
        goto LABEL_80;
      goto LABEL_178;
    }
  }
  else if ((v14 & 0x800000000000000) == 0)
  {
    goto LABEL_79;
  }
  *(_WORD *)(a2 + 116) = *(_QWORD *)(a1 + 472);
  if ((v15 & 0x1000000000000000) == 0)
  {
LABEL_80:
    if ((v15 & 0x2000000000000000) == 0)
      goto LABEL_81;
    goto LABEL_179;
  }
LABEL_178:
  *(_WORD *)(a2 + 116) = *(_WORD *)(a1 + 480) & 0x1FF;
  if ((v15 & 0x2000000000000000) == 0)
  {
LABEL_81:
    if ((v15 & 0x4000000000000000) == 0)
      goto LABEL_82;
LABEL_180:
    *(_DWORD *)(a2 + 116) = *(_DWORD *)(a1 + 496) & 0x1FFFF;
    if ((v15 & 0x8000000000000000) == 0)
      goto LABEL_83;
    goto LABEL_181;
  }
LABEL_179:
  *(_WORD *)(a2 + 116) = *(_WORD *)(a1 + 488) & 0x1FF;
  if ((v15 & 0x4000000000000000) != 0)
    goto LABEL_180;
LABEL_82:
  if ((v15 & 0x8000000000000000) == 0)
    goto LABEL_83;
LABEL_181:
  *(_WORD *)(a2 + 116) = *(_WORD *)(a1 + 504) & 0x1FFF;
LABEL_83:
  v16 = *(_QWORD *)(a1 + 1256);
  v17 = v16;
  if ((v16 & 1) != 0)
  {
    *(_BYTE *)(a2 + 116) = *(_BYTE *)(a1 + 512) & 0x7F;
    v17 = *(_QWORD *)(a1 + 1256);
  }
  if ((v17 & 2) != 0)
    *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 520);
  v18 = v17;
  if ((v17 & 4) != 0)
  {
    *(_BYTE *)(a2 + 120) = *(_BYTE *)(a1 + 528) & 0xF;
    v18 = *(_QWORD *)(a1 + 1256);
    if ((v18 & 8) == 0)
    {
LABEL_89:
      if ((v18 & 0x10) == 0)
        goto LABEL_90;
      goto LABEL_184;
    }
  }
  else if ((v17 & 8) == 0)
  {
    goto LABEL_89;
  }
  *(_DWORD *)(a2 + 124) = *(_QWORD *)(a1 + 536);
  if ((v18 & 0x10) == 0)
  {
LABEL_90:
    if ((v18 & 0x20) == 0)
      goto LABEL_91;
    goto LABEL_185;
  }
LABEL_184:
  *(_DWORD *)(a2 + 128) = *(_QWORD *)(a1 + 544);
  if ((v18 & 0x20) == 0)
  {
LABEL_91:
    if ((v18 & 0x40) == 0)
      goto LABEL_92;
    goto LABEL_186;
  }
LABEL_185:
  *(_BYTE *)(a2 + 132) = *(_QWORD *)(a1 + 552) != 0;
  if ((v18 & 0x40) == 0)
  {
LABEL_92:
    if ((v18 & 0x80) == 0)
      goto LABEL_93;
    goto LABEL_187;
  }
LABEL_186:
  *(_DWORD *)(a2 + 136) = *(_QWORD *)(a1 + 560);
  if ((v18 & 0x80) == 0)
  {
LABEL_93:
    if ((v18 & 0x100) == 0)
      goto LABEL_94;
    goto LABEL_188;
  }
LABEL_187:
  *(_BYTE *)(a2 + 140) = *(_QWORD *)(a1 + 568) != 0;
  if ((v18 & 0x100) == 0)
  {
LABEL_94:
    if ((v18 & 0x200) == 0)
      goto LABEL_96;
    goto LABEL_95;
  }
LABEL_188:
  *(_DWORD *)(a2 + 144) = *(_QWORD *)(a1 + 576);
  if ((v18 & 0x200) != 0)
LABEL_95:
    *(_DWORD *)(a2 + 148) = *(_QWORD *)(a1 + 584);
LABEL_96:
  v19 = v18;
  if ((v18 & 0x400) != 0)
  {
    *(_BYTE *)(a2 + 152) = *(_BYTE *)(a1 + 592) & 0xF;
    v19 = *(_QWORD *)(a1 + 1256);
  }
  v20 = v19;
  if ((v19 & 0x800) != 0)
  {
    *(_BYTE *)(a2 + 153) = *(_BYTE *)(a1 + 600) & 0xF;
    v20 = *(_QWORD *)(a1 + 1256);
    if ((v20 & 0x1000) == 0)
    {
LABEL_100:
      if ((v20 & 0x2000) == 0)
        goto LABEL_101;
      goto LABEL_192;
    }
  }
  else if ((v19 & 0x1000) == 0)
  {
    goto LABEL_100;
  }
  *(_BYTE *)(a2 + 154) = *(_QWORD *)(a1 + 608) != 0;
  if ((v20 & 0x2000) == 0)
  {
LABEL_101:
    if ((v20 & 0x4000) == 0)
      goto LABEL_102;
    goto LABEL_193;
  }
LABEL_192:
  *(_BYTE *)(a2 + 155) = *(_QWORD *)(a1 + 616) != 0;
  if ((v20 & 0x4000) == 0)
  {
LABEL_102:
    if ((v20 & 0x8000) == 0)
      goto LABEL_103;
    goto LABEL_194;
  }
LABEL_193:
  *(_BYTE *)(a2 + 156) = *(_QWORD *)(a1 + 624) != 0;
  if ((v20 & 0x8000) == 0)
  {
LABEL_103:
    if ((v20 & 0x10000) == 0)
      goto LABEL_104;
    goto LABEL_195;
  }
LABEL_194:
  *(_BYTE *)(a2 + 157) = *(_QWORD *)(a1 + 632) != 0;
  if ((v20 & 0x10000) == 0)
  {
LABEL_104:
    if ((v20 & 0x20000) == 0)
      goto LABEL_105;
    goto LABEL_196;
  }
LABEL_195:
  *(_BYTE *)(a2 + 158) = *(_QWORD *)(a1 + 640) != 0;
  if ((v20 & 0x20000) == 0)
  {
LABEL_105:
    if ((v20 & 0x40000) == 0)
      goto LABEL_106;
    goto LABEL_197;
  }
LABEL_196:
  *(_BYTE *)(a2 + 159) = *(_QWORD *)(a1 + 648) != 0;
  if ((v20 & 0x40000) == 0)
  {
LABEL_106:
    if ((v20 & 0x80000) == 0)
      goto LABEL_107;
    goto LABEL_198;
  }
LABEL_197:
  *(_BYTE *)(a2 + 160) = *(_QWORD *)(a1 + 656) != 0;
  if ((v20 & 0x80000) == 0)
  {
LABEL_107:
    if ((v20 & 0x100000) == 0)
      goto LABEL_108;
    goto LABEL_199;
  }
LABEL_198:
  *(_BYTE *)(a2 + 161) = *(_QWORD *)(a1 + 664) != 0;
  if ((v20 & 0x100000) == 0)
  {
LABEL_108:
    if ((v20 & 0x200000) == 0)
      goto LABEL_110;
    goto LABEL_109;
  }
LABEL_199:
  *(_DWORD *)(a2 + 164) = *(_QWORD *)(a1 + 672);
  if ((v20 & 0x200000) != 0)
LABEL_109:
    *(_BYTE *)(a2 + 168) = *(_QWORD *)(a1 + 680) != 0;
LABEL_110:
  v21 = v20;
  if ((v20 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 169) = *(_BYTE *)(a1 + 688) & 0xF;
    v21 = *(_QWORD *)(a1 + 1256);
    if ((v21 & 0x800000) == 0)
    {
LABEL_112:
      if ((v21 & 0x1000000) == 0)
        goto LABEL_113;
      goto LABEL_203;
    }
  }
  else if ((v20 & 0x800000) == 0)
  {
    goto LABEL_112;
  }
  *(_DWORD *)(a2 + 172) = *(_QWORD *)(a1 + 696);
  if ((v21 & 0x1000000) == 0)
  {
LABEL_113:
    if ((v21 & 0x2000000) == 0)
      goto LABEL_114;
    goto LABEL_204;
  }
LABEL_203:
  *(_WORD *)(a2 + 176) = *(_QWORD *)(a1 + 704);
  if ((v21 & 0x2000000) == 0)
  {
LABEL_114:
    if ((v21 & 0x4000000) == 0)
      goto LABEL_115;
    goto LABEL_205;
  }
LABEL_204:
  *(_DWORD *)(a2 + 180) = *(_QWORD *)(a1 + 712);
  if ((v21 & 0x4000000) == 0)
  {
LABEL_115:
    if ((v21 & 0x8000000) == 0)
      goto LABEL_116;
    goto LABEL_206;
  }
LABEL_205:
  *(_DWORD *)(a2 + 184) = *(_QWORD *)(a1 + 720);
  if ((v21 & 0x8000000) == 0)
  {
LABEL_116:
    if ((v21 & 0x10000000) == 0)
      goto LABEL_117;
    goto LABEL_207;
  }
LABEL_206:
  *(_DWORD *)(a2 + 188) = *(_QWORD *)(a1 + 728);
  if ((v21 & 0x10000000) == 0)
  {
LABEL_117:
    if ((v21 & 0x20000000) == 0)
      goto LABEL_118;
    goto LABEL_208;
  }
LABEL_207:
  *(_DWORD *)(a2 + 192) = *(_QWORD *)(a1 + 736);
  if ((v21 & 0x20000000) == 0)
  {
LABEL_118:
    if ((v21 & 0x40000000) == 0)
      goto LABEL_119;
    goto LABEL_209;
  }
LABEL_208:
  *(_DWORD *)(a2 + 196) = *(_QWORD *)(a1 + 744);
  if ((v21 & 0x40000000) == 0)
  {
LABEL_119:
    if ((v21 & 0x80000000) == 0)
      goto LABEL_120;
    goto LABEL_210;
  }
LABEL_209:
  *(_DWORD *)(a2 + 200) = *(_QWORD *)(a1 + 752);
  if ((v21 & 0x80000000) == 0)
  {
LABEL_120:
    if ((v21 & 0x100000000) == 0)
      goto LABEL_121;
    goto LABEL_211;
  }
LABEL_210:
  *(_DWORD *)(a2 + 204) = *(_QWORD *)(a1 + 760);
  if ((v21 & 0x100000000) == 0)
  {
LABEL_121:
    if ((v21 & 0x200000000) == 0)
      goto LABEL_123;
    goto LABEL_122;
  }
LABEL_211:
  *(_DWORD *)(a2 + 208) = *(_QWORD *)(a1 + 768);
  if ((v21 & 0x200000000) != 0)
LABEL_122:
    *(_BYTE *)(a2 + 212) = *(_QWORD *)(a1 + 776) != 0;
LABEL_123:
  v22 = v2 & 1;
  v80 = v16 & 1;
  if ((v21 & 0x400000000) != 0)
    *(_BYTE *)(a2 + 213) = *(_QWORD *)(a1 + 784) != 0;
  v23 = v3 & 2;
  v24 = v3 & 4;
  v25 = v3 & 8;
  v26 = v3 & 0x10;
  v27 = v3 & 0x20;
  v28 = v3 & 0x40;
  v29 = v4 & 0x80;
  v30 = v4 & 0x100;
  v53 = v11 & 0x2000000000;
  v54 = v11 & 0x4000000000;
  v55 = v11 & 0x8000000000;
  v56 = v11 & 0x10000000000;
  v57 = v11 & 0x20000000000;
  v58 = v11 & 0x40000000000;
  v34 = v11 & 0x80000000000;
  v59 = v12 & 0x100000000000;
  v60 = v12 & 0x200000000000;
  v61 = v12 & 0x400000000000;
  v62 = v12 & 0x800000000000;
  v35 = v12 & 0x1000000000000;
  v36 = v12 & 0x2000000000000;
  if ((v21 & 0x800000000) != 0)
    *(_DWORD *)(a2 + 216) = *(_QWORD *)(a1 + 792);
  HIDWORD(v17) = BYTE4(v9) & 1;
  v33 = v5 & 0x800;
  v32 = v5 & 0x400;
  v31 = v5 & 0x200;
  v38 = v5 & 0x1000;
  v39 = v5 & 0x2000;
  v40 = v5 & 0x4000;
  v41 = (unsigned __int16)v6 & 0x8000;
  v42 = v6 & 0x10000;
  v43 = v6 & 0x20000;
  v44 = v6 & 0x40000;
  v45 = v6 & 0x80000;
  v46 = v6 & 0x100000;
  v49 = v8 & 0x1000000;
  v50 = v8 & 0x2000000;
  v51 = v8 & 0x4000000;
  v52 = v8 & 0x8000000;
  v47 = v82 & 0x200000;
  v48 = v82 & 0x400000;
  LODWORD(v33) = (v23 >> 1)
               + v22
               + (v24 >> 2)
               + (v25 >> 3)
               + (v26 >> 4)
               + (v27 >> 5)
               + (v28 >> 6)
               + (v29 >> 7)
               + (v30 >> 8)
               + (v31 >> 9)
               + (v32 >> 10)
               + (v33 >> 11)
               + (v38 >> 12)
               + (v39 >> 13)
               + (v40 >> 14)
               + (v41 >> 15)
               + (v42 >> 16)
               + (v43 >> 17)
               + (v44 >> 18)
               + (v45 >> 19)
               + (v46 >> 20)
               + (v47 >> 21)
               + (v48 >> 22)
               + ((v8 & 0x800000) >> 23)
               + (v49 >> 24)
               + (v50 >> 25)
               + (v51 >> 26)
               + (v52 >> 27)
               + ((v8 & 0x10000000) >> 28)
               + ((v9 & 0x20000000) >> 29)
               + ((v9 & 0x40000000) >> 30)
               + (v9 >> 31)
               + HIDWORD(v17)
               + ((v9 & 0x200000000) >> 33)
               + ((v9 & 0x400000000) >> 34)
               + ((v81 & 0x800000000) >> 35)
               + ((v81 & 0x1000000000) >> 36)
               + (v53 >> 37)
               + (v54 >> 38)
               + (v55 >> 39)
               + (v56 >> 40)
               + (v57 >> 41)
               + (v58 >> 42);
  v63 = v13 & 0x4000000000000;
  v64 = v13 & 0x8000000000000;
  v65 = v14 & 0x10000000000000;
  v66 = v14 & 0x20000000000000;
  v67 = v14 & 0x40000000000000;
  v68 = v14 & 0x80000000000000;
  v69 = v14 & 0x100000000000000;
  v70 = v14 & 0x200000000000000;
  v71 = v14 & 0x400000000000000;
  v72 = v15 & 0x1000000000000000;
  v73 = v15 & 0x2000000000000000;
  v74 = v15 & 0x4000000000000000;
  v75 = v17 & 2;
  v76 = v20 & 0x20000;
  v77 = v20 & 0x10000;
  v78 = (unsigned __int16)v20 & 0x8000;
  v79 = v20 & 0x4000;
  LODWORD(v33) = v33
               + (v34 >> 43)
               + (v59 >> 44)
               + (v60 >> 45)
               + (v61 >> 46)
               + (v62 >> 47)
               + HIWORD(v35)
               + (v36 >> 49)
               + (v63 >> 50)
               + (v64 >> 51)
               + (v65 >> 52)
               + (v66 >> 53)
               + (v67 >> 54)
               + (v68 >> 55)
               + HIBYTE(v69)
               + (v70 >> 57)
               + (v71 >> 58)
               + (v15 >> 63)
               + ((v15 & 0x800000000000000) >> 59)
               + (v72 >> 60)
               + (v73 >> 61)
               + (v74 >> 62)
               + v80
               + (v75 >> 1)
               + ((unint64_t)(v17 & 4) >> 2)
               + ((unint64_t)(v18 & 8) >> 3)
               + ((unint64_t)(v18 & 0x10) >> 4)
               + ((unint64_t)(v18 & 0x20) >> 5)
               + ((unint64_t)(v18 & 0x40) >> 6)
               + ((unint64_t)(v18 & 0x80) >> 7)
               + ((unint64_t)(v18 & 0x100) >> 8)
               + ((unint64_t)(v18 & 0x200) >> 9)
               + ((unint64_t)(v18 & 0x400) >> 10)
               + ((unint64_t)(v19 & 0x800) >> 11)
               + ((unint64_t)(v20 & 0x1000) >> 12)
               + ((unint64_t)(v20 & 0x2000) >> 13)
               + (v79 >> 14)
               + (v78 >> 15)
               + (v77 >> 16)
               + (v76 >> 17);
  return (_DWORD)v33
       + ((v20 & 0x40000uLL) >> 18)
       + ((v20 & 0x80000uLL) >> 19)
       + ((v20 & 0x100000uLL) >> 20)
       + ((v20 & 0x200000uLL) >> 21)
       + ((v20 & 0x400000uLL) >> 22)
       + ((v21 & 0x800000uLL) >> 23)
       + ((v21 & 0x1000000) >> 24)
       + ((v21 & 0x2000000) >> 25)
       + ((v21 & 0x4000000) >> 26)
       + ((v21 & 0x8000000) >> 27)
       + ((v21 & 0x10000000) >> 28)
       + ((v21 & 0x20000000) >> 29)
       + ((v21 & 0x40000000) >> 30)
       + (v21 >> 31)
       + (BYTE4(v21) & 1)
       + ((v21 & 0x200000000uLL) >> 33)
       + ((v21 & 0x400000000uLL) >> 34)
       + ((v21 & 0x800000000uLL) >> 35);
}

unint64_t sub_1C4D5B70C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;

  v2 = *(_QWORD *)(a1 + 1248);
  v3 = v2;
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1 & 1;
    v3 = *(_QWORD *)(a1 + 1248);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_112;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)a2 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_113;
  }
LABEL_112:
  *(_WORD *)a2 = *(_WORD *)(a1 + 16) & 0x1FF;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_114;
  }
LABEL_113:
  *(_WORD *)a2 = *(_WORD *)(a1 + 24) & 0x1FF;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_114:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  if ((v3 & 0x20) != 0)
LABEL_7:
    *(_WORD *)a2 = *(_WORD *)(a1 + 40) & 0x1FFF;
LABEL_8:
  v4 = v3;
  if ((v3 & 0x40) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 48) & 0x7F;
    v4 = *(_QWORD *)(a1 + 1248);
  }
  if ((v4 & 0x80) != 0)
    *(_DWORD *)a2 = *(_QWORD *)(a1 + 56);
  v5 = v4;
  if ((v4 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 64) & 0xF;
    v5 = *(_QWORD *)(a1 + 1248);
    if ((v5 & 0x200) == 0)
    {
LABEL_14:
      if ((v5 & 0x400) == 0)
        goto LABEL_15;
      goto LABEL_118;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_119;
  }
LABEL_118:
  *(_DWORD *)(a2 + 12) = *(_QWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_120;
  }
LABEL_119:
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(a1 + 88) != 0;
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_120:
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 96);
  if ((v5 & 0x2000) != 0)
LABEL_18:
    *(_DWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
LABEL_19:
  v6 = v5;
  if ((v5 & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 112) & 1;
    v6 = *(_QWORD *)(a1 + 1248);
    if ((v6 & 0x8000) == 0)
    {
LABEL_21:
      if ((v6 & 0x10000) == 0)
        goto LABEL_22;
      goto LABEL_124;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 28) = *(_QWORD *)(a1 + 120);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_125;
  }
LABEL_124:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 128) & 0x1FF;
  if ((v6 & 0x20000) == 0)
  {
LABEL_23:
    if ((v6 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_126;
  }
LABEL_125:
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 136) & 0x1FF;
  if ((v6 & 0x40000) == 0)
  {
LABEL_24:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_126:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 144) & 0x1FFFF;
  if ((v6 & 0x80000) != 0)
LABEL_25:
    *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 152) & 0x1FFF;
LABEL_26:
  v7 = v6;
  if ((v6 & 0x100000) != 0)
  {
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 160) & 0x7F;
    v7 = *(_QWORD *)(a1 + 1248);
  }
  if ((v7 & 0x200000) != 0)
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(a1 + 168);
  v8 = v7;
  if ((v7 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 176) & 0xF;
    v8 = *(_QWORD *)(a1 + 1248);
    if ((v8 & 0x800000) == 0)
    {
LABEL_32:
      if ((v8 & 0x1000000) == 0)
        goto LABEL_33;
      goto LABEL_130;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(a1 + 184);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_131;
  }
LABEL_130:
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(a1 + 192);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_36;
    goto LABEL_35;
  }
LABEL_131:
  *(_BYTE *)(a2 + 44) = *(_QWORD *)(a1 + 200) != 0;
  if ((v8 & 0x4000000) != 0)
LABEL_35:
    *(_DWORD *)(a2 + 48) = *(_QWORD *)(a1 + 208);
LABEL_36:
  v73 = v7;
  if ((v8 & 0x8000000) != 0)
    *(_BYTE *)(a2 + 52) = *(_QWORD *)(a1 + 216) != 0;
  v9 = v8;
  if ((v8 & 0x10000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 224) & 1;
    v9 = *(_QWORD *)(a1 + 1248);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_40:
      if ((v9 & 0x40000000) == 0)
        goto LABEL_41;
      goto LABEL_135;
    }
  }
  else if ((v8 & 0x20000000) == 0)
  {
    goto LABEL_40;
  }
  *(_WORD *)(a2 + 56) = *(_QWORD *)(a1 + 232);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_136;
  }
LABEL_135:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 240) & 0x1FF;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_42:
    if ((v9 & 0x100000000) == 0)
      goto LABEL_43;
    goto LABEL_137;
  }
LABEL_136:
  *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 248) & 0x1FF;
  if ((v9 & 0x100000000) == 0)
  {
LABEL_43:
    if ((v9 & 0x200000000) == 0)
      goto LABEL_45;
    goto LABEL_44;
  }
LABEL_137:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 256) & 0x1FFFF;
  if ((v9 & 0x200000000) != 0)
LABEL_44:
    *(_WORD *)(a2 + 56) = *(_WORD *)(a1 + 264) & 0x1FFF;
LABEL_45:
  v10 = v9;
  if ((v9 & 0x400000000) != 0)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 272) & 0x7F;
    v10 = *(_QWORD *)(a1 + 1248);
  }
  if ((v10 & 0x800000000) != 0)
    *(_DWORD *)(a2 + 56) = *(_QWORD *)(a1 + 280);
  v11 = v10;
  if ((v10 & 0x1000000000) != 0)
  {
    *(_BYTE *)(a2 + 60) = *(_BYTE *)(a1 + 288) & 0xF;
    v11 = *(_QWORD *)(a1 + 1248);
    if ((v11 & 0x2000000000) == 0)
    {
LABEL_51:
      if ((v11 & 0x4000000000) == 0)
        goto LABEL_52;
      goto LABEL_141;
    }
  }
  else if ((v10 & 0x2000000000) == 0)
  {
    goto LABEL_51;
  }
  *(_DWORD *)(a2 + 64) = *(_QWORD *)(a1 + 296);
  if ((v11 & 0x4000000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x8000000000) == 0)
      goto LABEL_53;
    goto LABEL_142;
  }
LABEL_141:
  *(_DWORD *)(a2 + 68) = *(_QWORD *)(a1 + 304);
  if ((v11 & 0x8000000000) == 0)
  {
LABEL_53:
    if ((v11 & 0x10000000000) == 0)
      goto LABEL_54;
    goto LABEL_143;
  }
LABEL_142:
  *(_BYTE *)(a2 + 72) = *(_QWORD *)(a1 + 312) != 0;
  if ((v11 & 0x10000000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x20000000000) == 0)
      goto LABEL_55;
    goto LABEL_144;
  }
LABEL_143:
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(a1 + 320);
  if ((v11 & 0x20000000000) == 0)
  {
LABEL_55:
    if ((v11 & 0x40000000000) == 0)
      goto LABEL_57;
    goto LABEL_56;
  }
LABEL_144:
  *(_BYTE *)(a2 + 80) = *(_QWORD *)(a1 + 328) != 0;
  if ((v11 & 0x40000000000) != 0)
LABEL_56:
    *(_BYTE *)(a2 + 81) = *(_QWORD *)(a1 + 336) != 0;
LABEL_57:
  v12 = v11;
  if ((v11 & 0x80000000000) != 0)
  {
    *(_BYTE *)(a2 + 84) = *(_BYTE *)(a1 + 344) & 1;
    v12 = *(_QWORD *)(a1 + 1248);
    if ((v12 & 0x100000000000) == 0)
    {
LABEL_59:
      if ((v12 & 0x200000000000) == 0)
        goto LABEL_60;
      goto LABEL_148;
    }
  }
  else if ((v11 & 0x100000000000) == 0)
  {
    goto LABEL_59;
  }
  *(_WORD *)(a2 + 84) = *(_QWORD *)(a1 + 352);
  if ((v12 & 0x200000000000) == 0)
  {
LABEL_60:
    if ((v12 & 0x400000000000) == 0)
      goto LABEL_61;
    goto LABEL_149;
  }
LABEL_148:
  *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 360) & 0x1FF;
  if ((v12 & 0x400000000000) == 0)
  {
LABEL_61:
    if ((v12 & 0x800000000000) == 0)
      goto LABEL_62;
    goto LABEL_150;
  }
LABEL_149:
  *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 368) & 0x1FF;
  if ((v12 & 0x800000000000) == 0)
  {
LABEL_62:
    if ((v12 & 0x1000000000000) == 0)
      goto LABEL_64;
    goto LABEL_63;
  }
LABEL_150:
  *(_DWORD *)(a2 + 84) = *(_DWORD *)(a1 + 376) & 0x1FFFF;
  if ((v12 & 0x1000000000000) != 0)
LABEL_63:
    *(_WORD *)(a2 + 84) = *(_WORD *)(a1 + 384) & 0x1FFF;
LABEL_64:
  v13 = v12;
  if ((v12 & 0x2000000000000) != 0)
  {
    *(_BYTE *)(a2 + 84) = *(_BYTE *)(a1 + 392) & 0x7F;
    v13 = *(_QWORD *)(a1 + 1248);
  }
  if ((v13 & 0x4000000000000) != 0)
    *(_DWORD *)(a2 + 84) = *(_QWORD *)(a1 + 400);
  v14 = v13;
  if ((v13 & 0x8000000000000) != 0)
  {
    *(_BYTE *)(a2 + 88) = *(_BYTE *)(a1 + 408) & 0xF;
    v14 = *(_QWORD *)(a1 + 1248);
    if ((v14 & 0x10000000000000) == 0)
    {
LABEL_70:
      if ((v14 & 0x20000000000000) == 0)
        goto LABEL_71;
      goto LABEL_154;
    }
  }
  else if ((v13 & 0x10000000000000) == 0)
  {
    goto LABEL_70;
  }
  *(_DWORD *)(a2 + 92) = *(_QWORD *)(a1 + 416);
  if ((v14 & 0x20000000000000) == 0)
  {
LABEL_71:
    if ((v14 & 0x40000000000000) == 0)
      goto LABEL_72;
    goto LABEL_155;
  }
LABEL_154:
  *(_DWORD *)(a2 + 96) = *(_QWORD *)(a1 + 424);
  if ((v14 & 0x40000000000000) == 0)
  {
LABEL_72:
    if ((v14 & 0x80000000000000) == 0)
      goto LABEL_73;
    goto LABEL_156;
  }
LABEL_155:
  *(_BYTE *)(a2 + 100) = *(_QWORD *)(a1 + 432) != 0;
  if ((v14 & 0x80000000000000) == 0)
  {
LABEL_73:
    if ((v14 & 0x100000000000000) == 0)
      goto LABEL_74;
    goto LABEL_157;
  }
LABEL_156:
  *(_DWORD *)(a2 + 104) = *(_QWORD *)(a1 + 440);
  if ((v14 & 0x100000000000000) == 0)
  {
LABEL_74:
    if ((v14 & 0x200000000000000) == 0)
      goto LABEL_75;
    goto LABEL_158;
  }
LABEL_157:
  *(_BYTE *)(a2 + 108) = *(_QWORD *)(a1 + 448) != 0;
  if ((v14 & 0x200000000000000) == 0)
  {
LABEL_75:
    if ((v14 & 0x400000000000000) == 0)
      goto LABEL_77;
    goto LABEL_76;
  }
LABEL_158:
  *(_DWORD *)(a2 + 112) = *(_QWORD *)(a1 + 456);
  if ((v14 & 0x400000000000000) != 0)
LABEL_76:
    *(_DWORD *)(a2 + 116) = *(_QWORD *)(a1 + 464);
LABEL_77:
  v72 = v10;
  v15 = v14;
  if ((v14 & 0x800000000000000) != 0)
  {
    *(_BYTE *)(a2 + 120) = *(_BYTE *)(a1 + 472) & 0xF;
    v15 = *(_QWORD *)(a1 + 1248);
  }
  v16 = v15;
  if ((v15 & 0x1000000000000000) != 0)
  {
    *(_BYTE *)(a2 + 121) = *(_BYTE *)(a1 + 480) & 0xF;
    v16 = *(_QWORD *)(a1 + 1248);
    if ((v16 & 0x2000000000000000) == 0)
    {
LABEL_81:
      if ((v16 & 0x4000000000000000) == 0)
        goto LABEL_82;
LABEL_162:
      *(_BYTE *)(a2 + 123) = *(_QWORD *)(a1 + 496) != 0;
      if ((v16 & 0x8000000000000000) == 0)
        goto LABEL_83;
      goto LABEL_163;
    }
  }
  else if ((v15 & 0x2000000000000000) == 0)
  {
    goto LABEL_81;
  }
  *(_BYTE *)(a2 + 122) = *(_QWORD *)(a1 + 488) != 0;
  if ((v16 & 0x4000000000000000) != 0)
    goto LABEL_162;
LABEL_82:
  if ((v16 & 0x8000000000000000) == 0)
    goto LABEL_83;
LABEL_163:
  *(_BYTE *)(a2 + 124) = *(_QWORD *)(a1 + 504) != 0;
LABEL_83:
  v17 = *(_QWORD *)(a1 + 1256);
  if ((v17 & 1) != 0)
  {
    *(_BYTE *)(a2 + 125) = *(_QWORD *)(a1 + 512) != 0;
    if ((v17 & 2) == 0)
    {
LABEL_85:
      if ((v17 & 4) == 0)
        goto LABEL_86;
      goto LABEL_166;
    }
  }
  else if ((v17 & 2) == 0)
  {
    goto LABEL_85;
  }
  *(_BYTE *)(a2 + 126) = *(_QWORD *)(a1 + 520) != 0;
  if ((v17 & 4) == 0)
  {
LABEL_86:
    if ((v17 & 8) == 0)
      goto LABEL_87;
    goto LABEL_167;
  }
LABEL_166:
  *(_BYTE *)(a2 + 127) = *(_QWORD *)(a1 + 528) != 0;
  if ((v17 & 8) == 0)
  {
LABEL_87:
    if ((v17 & 0x10) == 0)
      goto LABEL_88;
    goto LABEL_168;
  }
LABEL_167:
  *(_BYTE *)(a2 + 128) = *(_QWORD *)(a1 + 536) != 0;
  if ((v17 & 0x10) == 0)
  {
LABEL_88:
    if ((v17 & 0x20) == 0)
      goto LABEL_89;
    goto LABEL_169;
  }
LABEL_168:
  *(_BYTE *)(a2 + 129) = *(_QWORD *)(a1 + 544) != 0;
  if ((v17 & 0x20) == 0)
  {
LABEL_89:
    if ((v17 & 0x40) == 0)
      goto LABEL_90;
    goto LABEL_170;
  }
LABEL_169:
  *(_BYTE *)(a2 + 130) = *(_QWORD *)(a1 + 552) != 0;
  if ((v17 & 0x40) == 0)
  {
LABEL_90:
    if ((v17 & 0x80) == 0)
      goto LABEL_92;
    goto LABEL_91;
  }
LABEL_170:
  *(_DWORD *)(a2 + 132) = *(_QWORD *)(a1 + 560);
  if ((v17 & 0x80) != 0)
LABEL_91:
    *(_BYTE *)(a2 + 136) = *(_QWORD *)(a1 + 568) != 0;
LABEL_92:
  LODWORD(v18) = v17;
  if ((v17 & 0x100) != 0)
  {
    *(_BYTE *)(a2 + 137) = *(_BYTE *)(a1 + 576) & 0xF;
    v18 = *(_QWORD *)(a1 + 1256);
    if ((v18 & 0x200) == 0)
    {
LABEL_94:
      if ((v18 & 0x400) == 0)
        goto LABEL_95;
      goto LABEL_174;
    }
  }
  else if ((v17 & 0x200) == 0)
  {
    goto LABEL_94;
  }
  *(_DWORD *)(a2 + 140) = *(_QWORD *)(a1 + 584);
  if ((v18 & 0x400) == 0)
  {
LABEL_95:
    if ((v18 & 0x800) == 0)
      goto LABEL_96;
    goto LABEL_175;
  }
LABEL_174:
  *(_WORD *)(a2 + 144) = *(_QWORD *)(a1 + 592);
  if ((v18 & 0x800) == 0)
  {
LABEL_96:
    if ((v18 & 0x1000) == 0)
      goto LABEL_97;
    goto LABEL_176;
  }
LABEL_175:
  *(_DWORD *)(a2 + 148) = *(_QWORD *)(a1 + 600);
  if ((v18 & 0x1000) == 0)
  {
LABEL_97:
    if ((v18 & 0x2000) == 0)
      goto LABEL_98;
    goto LABEL_177;
  }
LABEL_176:
  *(_DWORD *)(a2 + 152) = *(_QWORD *)(a1 + 608);
  if ((v18 & 0x2000) == 0)
  {
LABEL_98:
    if ((v18 & 0x4000) == 0)
      goto LABEL_99;
    goto LABEL_178;
  }
LABEL_177:
  *(_DWORD *)(a2 + 156) = *(_QWORD *)(a1 + 616);
  if ((v18 & 0x4000) == 0)
  {
LABEL_99:
    if ((v18 & 0x8000) == 0)
      goto LABEL_100;
    goto LABEL_179;
  }
LABEL_178:
  *(_DWORD *)(a2 + 160) = *(_QWORD *)(a1 + 624);
  if ((v18 & 0x8000) == 0)
  {
LABEL_100:
    if ((v18 & 0x10000) == 0)
      goto LABEL_101;
    goto LABEL_180;
  }
LABEL_179:
  *(_DWORD *)(a2 + 164) = *(_QWORD *)(a1 + 632);
  if ((v18 & 0x10000) == 0)
  {
LABEL_101:
    if ((v18 & 0x20000) == 0)
      goto LABEL_102;
    goto LABEL_181;
  }
LABEL_180:
  *(_DWORD *)(a2 + 168) = *(_QWORD *)(a1 + 640);
  if ((v18 & 0x20000) == 0)
  {
LABEL_102:
    if ((v18 & 0x40000) == 0)
      goto LABEL_103;
    goto LABEL_182;
  }
LABEL_181:
  *(_DWORD *)(a2 + 172) = *(_QWORD *)(a1 + 648);
  if ((v18 & 0x40000) == 0)
  {
LABEL_103:
    if ((v18 & 0x80000) == 0)
      goto LABEL_105;
    goto LABEL_104;
  }
LABEL_182:
  *(_DWORD *)(a2 + 176) = *(_QWORD *)(a1 + 656);
  if ((v18 & 0x80000) != 0)
LABEL_104:
    *(_BYTE *)(a2 + 180) = *(_QWORD *)(a1 + 664) != 0;
LABEL_105:
  if ((v18 & 0x100000) != 0)
    *(_BYTE *)(a2 + 181) = *(_QWORD *)(a1 + 672) != 0;
  v19 = v4 & 0x80;
  v20 = v4 & 0x100;
  v21 = v5 & 0x200;
  v22 = v5 & 0x400;
  v23 = v5 & 0x800;
  v24 = v5 & 0x1000;
  v25 = v5 & 0x2000;
  v26 = v5 & 0x4000;
  v50 = v11 & 0x2000000000;
  v51 = v11 & 0x4000000000;
  v52 = v11 & 0x8000000000;
  v53 = v11 & 0x10000000000;
  v54 = v11 & 0x20000000000;
  v55 = v11 & 0x40000000000;
  v27 = v11 & 0x80000000000;
  v56 = v12 & 0x100000000000;
  v57 = v12 & 0x200000000000;
  v58 = v12 & 0x400000000000;
  v59 = v12 & 0x800000000000;
  v60 = v12 & 0x1000000000000;
  v61 = v12 & 0x2000000000000;
  v64 = v14 & 0x10000000000000;
  v65 = v14 & 0x20000000000000;
  v66 = v14 & 0x40000000000000;
  v67 = v14 & 0x80000000000000;
  v68 = v14 & 0x100000000000000;
  v69 = v14 & 0x200000000000000;
  v70 = v14 & 0x400000000000000;
  v71 = v14 & 0x800000000000000;
  if ((v18 & 0x200000) != 0)
    *(_DWORD *)(a2 + 184) = *(_QWORD *)(a1 + 680);
  v30 = ((v3 & 2) >> 1)
      + (v2 & 1)
      + ((v3 & 4) >> 2)
      + ((v3 & 8) >> 3)
      + ((v3 & 0x10) >> 4)
      + ((v3 & 0x20) >> 5)
      + ((v3 & 0x40) >> 6)
      + (v19 >> 7)
      + (v20 >> 8)
      + (v21 >> 9)
      + (v22 >> 10);
  v31 = v25 >> 13;
  v32 = v26 >> 14;
  v28 = v9 & 0x20000000;
  v43 = v8 & 0x800000;
  v44 = v8 & 0x1000000;
  v45 = v8 & 0x2000000;
  v46 = v8 & 0x4000000;
  v47 = v8 & 0x8000000;
  v48 = v8 & 0x10000000;
  v62 = v13 & 0x4000000000000;
  v63 = v13 & 0x8000000000000;
  v35 = (unsigned __int16)v6 & 0x8000;
  v36 = v6 & 0x10000;
  v37 = v6 & 0x20000;
  v38 = v6 & 0x40000;
  v39 = v6 & 0x80000;
  v40 = v6 & 0x100000;
  v41 = v73 & 0x200000;
  v42 = v73 & 0x400000;
  v49 = v72 & 0x800000000;
  v29 = BYTE4(v9) & 1;
  v33 = v30
      + (v23 >> 11)
      + (v24 >> 12)
      + v31
      + v32
      + (v35 >> 15)
      + (v36 >> 16)
      + (v37 >> 17)
      + (v38 >> 18)
      + (v39 >> 19)
      + (v40 >> 20)
      + (v41 >> 21)
      + (v42 >> 22)
      + (v43 >> 23)
      + (v44 >> 24)
      + (v45 >> 25)
      + (v46 >> 26)
      + (v47 >> 27)
      + (v48 >> 28)
      + (v28 >> 29)
      + ((v9 & 0x40000000) >> 30)
      + (v9 >> 31)
      + v29
      + ((v9 & 0x200000000) >> 33)
      + ((v9 & 0x400000000) >> 34)
      + (v49 >> 35)
      + ((v72 & 0x1000000000) >> 36)
      + (v50 >> 37)
      + (v51 >> 38)
      + (v52 >> 39)
      + (v53 >> 40)
      + (v54 >> 41)
      + (v55 >> 42)
      + (v27 >> 43)
      + (v56 >> 44)
      + (v57 >> 45)
      + (v58 >> 46)
      + (v59 >> 47)
      + HIWORD(v60)
      + (v61 >> 49)
      + (v62 >> 50)
      + (v63 >> 51)
      + (v64 >> 52)
      + (v65 >> 53)
      + (v66 >> 54);
  return v33
       + (v67 >> 55)
       + HIBYTE(v68)
       + (v69 >> 57)
       + (v70 >> 58)
       + (v71 >> 59)
       + ((v15 & 0x1000000000000000) >> 60)
       + (v16 >> 63)
       + ((v16 & 0x2000000000000000) >> 61)
       + ((v16 & 0x4000000000000000) >> 62)
       + (v17 & 1)
       + ((unint64_t)(v17 & 2) >> 1)
       + ((unint64_t)(v17 & 4) >> 2)
       + ((unint64_t)(v17 & 8) >> 3)
       + ((unint64_t)(v17 & 0x10) >> 4)
       + ((unint64_t)(v17 & 0x20) >> 5)
       + ((unint64_t)(v17 & 0x40) >> 6)
       + ((unint64_t)(v17 & 0x80) >> 7)
       + ((unint64_t)(v17 & 0x100) >> 8)
       + ((unint64_t)(v18 & 0x200) >> 9)
       + ((unint64_t)(v18 & 0x400) >> 10)
       + ((unint64_t)(v18 & 0x800) >> 11)
       + ((unint64_t)(v18 & 0x1000) >> 12)
       + ((unint64_t)(v18 & 0x2000) >> 13)
       + ((unint64_t)(v18 & 0x4000) >> 14)
       + ((unint64_t)((unsigned __int16)v18 & 0x8000) >> 15)
       + ((v18 & 0x10000uLL) >> 16)
       + ((v18 & 0x20000uLL) >> 17)
       + ((v18 & 0x40000uLL) >> 18)
       + ((v18 & 0x80000uLL) >> 19)
       + ((v18 & 0x100000uLL) >> 20)
       + ((v18 & 0x200000uLL) >> 21);
}

void sub_1C4D5C3A0(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v39;
  uint64_t v40;
  _DWORD v41[10];
  uint64_t v42;

  v4 = 0;
  v5 = 0;
  v42 = *MEMORY[0x1E0C80C00];
  v39 = v41;
  v41[0] = a1;
  v40 = 0xA00000001;
  v35 = a3 + 16;
  v6 = 1;
  do
  {
    while (1)
    {
      v7 = *((unsigned int *)v39 + v6 - 1);
      LODWORD(v40) = v6 - 1;
      v8 = (int *)(a2 + 4 * v7);
      v9 = *v8;
      if (*v8 < 0)
      {
        v26 = ~v9;
        v27 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a4 + 8))(a4, ~v9) & ~v4;
        if ((v27 & v5) != 0)
        {
          v28 = v5;
        }
        else
        {
          v28 = v4;
          while (2)
          {
            v4 = v28;
            while (1)
            {
              if (!v27)
              {
                v28 = v5;
                goto LABEL_61;
              }
              v29 = 1 << __clz(__rbit64(v27));
              if ((v29 & v5) == 0)
                break;
              if ((v29 & v28) != 0)
                v30 = ~v29;
              else
                v30 = -1;
              v27 &= v30;
              if ((v29 & v28) == 0)
              {
                v28 = v5;
                if (v27)
                  goto LABEL_64;
                goto LABEL_61;
              }
            }
            v31 = (**(uint64_t (***)(uint64_t))a4)(a4);
            if (v31)
              v32 = v28;
            else
              v32 = v5;
            v28 = v32 | v29;
            if (v31)
              v33 = ~v29;
            else
              v33 = -1;
            v27 &= v33;
            if ((v31 & 1) != 0)
              continue;
            break;
          }
          if (v27)
            goto LABEL_64;
LABEL_61:
          v34 = *(unsigned int *)(a3 + 8);
          if (v34 >= *(unsigned int *)(a3 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v35, v34 + 1, 4);
            v34 = *(unsigned int *)(a3 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a3 + 4 * v34) = v26;
          ++*(_DWORD *)(a3 + 8);
        }
        goto LABEL_64;
      }
      v11 = v8[1];
      v10 = v8[2];
      if (v11 == -1)
        v12 = 0;
      else
        v12 = v8[1];
      if (v10 == -1)
        v13 = 0;
      else
        v13 = v8[2];
      v14 = v8[3];
      if (v14 == -1)
        v15 = 0;
      else
        v15 = v14;
      v16 = 1 << v9;
      v17 = ((1 << v9) & v4) != 0;
      if (((1 << v9) & v5) == 0)
      {
        v18 = (**(uint64_t (***)(uint64_t))a4)(a4);
        v17 = v18;
        if (v18)
          v19 = v4;
        else
          v19 = v5;
        v20 = v19 | v16;
        if (v18)
          v4 = v20;
        else
          v5 = v20;
      }
      if (v11 != -1)
      {
        v21 = v40;
        if (v40 >= (unint64_t)HIDWORD(v40))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, (uint64_t)v41, v40 + 1, 4);
          v21 = v40;
        }
        *((_DWORD *)v39 + v21) = v12 | v11 & 0xFFFFFF00;
        LODWORD(v40) = v40 + 1;
      }
      v22 = v14 == -1 || v17;
      if ((v22 & 1) == 0)
      {
        v23 = v40;
        if (v40 >= (unint64_t)HIDWORD(v40))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, (uint64_t)v41, v40 + 1, 4);
          v23 = v40;
        }
        *((_DWORD *)v39 + v23) = v15 | v14 & 0xFFFFFF00;
        LODWORD(v40) = v40 + 1;
      }
      if (v10 != -1 && v17)
        break;
      v28 = v5;
LABEL_64:
      v6 = v40;
      v5 = v28;
      if (!(_DWORD)v40)
        goto LABEL_65;
    }
    v25 = v40;
    if (v40 >= (unint64_t)HIDWORD(v40))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, (uint64_t)v41, v40 + 1, 4);
      v25 = v40;
    }
    *((_DWORD *)v39 + v25) = v13 | v10 & 0xFFFFFF00;
    v6 = v40 + 1;
    LODWORD(v40) = v6;
  }
  while (v6);
LABEL_65:
  if (v39 != v41)
    free(v39);
}

void LLVMInitializeAGX2Disassembler()
{
  qword_1ED82C4B0 = (uint64_t)sub_1C4D5C714;
  qword_1ED82C518 = (uint64_t)sub_1C4D5E148;
}

_QWORD *sub_1C4D5C714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  unsigned int v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  int v35;
  char *v36;
  int v37;
  char *v38;
  unsigned int v39;
  int v40;
  _QWORD *v41;
  unsigned int v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  unsigned int v52;
  int v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  int v63;
  int v64;
  char *v65;
  uint64_t v66;
  int v67;
  char *v68;
  int v69;
  char *v70;
  int v71;
  char *v72;
  int v73;
  char *v74;
  int v75;
  char *v76;
  int v77;
  char *v78;
  int v79;
  _QWORD *v80;
  uint64_t v81;
  int v82;
  char *v83;
  int v84;
  char *v85;
  int v86;
  char *v87;
  int v88;
  char *v89;
  int v90;
  char *v91;
  int v92;
  char *v93;
  int v94;
  _QWORD *v95;
  int v96;
  unsigned int v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  unsigned int v105;
  int v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  unsigned int v114;
  int v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  int v123;
  unsigned int v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  unsigned int v132;
  int v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  unsigned int v143;
  int v144;
  _QWORD *v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  _QWORD *v153;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  _QWORD *v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  char *v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  char *v180;
  _QWORD *v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  _QWORD *v198;
  _QWORD *v199;
  char *v200;
  char *v201;
  _QWORD *v202;
  char *v203;
  char *v204;
  char *v205;
  char *v206;
  char *v207;
  _QWORD *v208;
  _QWORD *v209;
  _QWORD *v210;
  _QWORD *v211;
  _QWORD *v212;
  int v213;
  void *v214;
  uint64_t v215;
  _BYTE v216[64];
  void *v217;
  uint64_t v218;
  _QWORD v219[8];
  char *v220;
  uint64_t v221;
  _QWORD v222[8];
  char *v223;
  uint64_t v224;
  _QWORD v225[8];
  char *v226;
  uint64_t v227;
  _QWORD v228[8];
  char *v229;
  uint64_t v230;
  _QWORD v231[10];

  v231[8] = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)operator new();
  v5[3] = 0;
  v5[4] = 0;
  v5[1] = a3;
  v5[2] = a2;
  v5[5] = v5 + 7;
  v6 = (uint64_t)(v5 + 5);
  *v5 = &off_1E8132570;
  v5[6] = 0x600000000;
  v229 = (char *)v231;
  v230 = 0x400000000;
  v226 = (char *)v228;
  v227 = 0x400000000;
  v223 = (char *)v225;
  v224 = 0x400000000;
  v220 = (char *)v222;
  v221 = 0x400000000;
  v217 = v219;
  v218 = 0x400000000;
  v214 = v216;
  v215 = 0x400000000;
  v7 = *(_QWORD *)(a2 + 192);
  if ((v7 & 0x200000000) != 0)
  {
    v225[0] = &unk_1C850F7F8;
    v225[1] = 0;
    v8 = 1;
    LODWORD(v224) = 1;
  }
  else
  {
    v8 = 0;
  }
  v9 = v7 & 0x22800000000;
  if ((v7 & 0x22800000000) != 0)
  {
    v10 = &v225[2 * v8];
    *v10 = &unk_1C850F80B;
    v10[1] = 0;
    LODWORD(v224) = ++v8;
    v222[0] = &unk_1C850F82C;
    v222[1] = 0;
    v11 = 1;
    LODWORD(v221) = 1;
    if ((v7 & 0x10000000000) == 0)
      goto LABEL_6;
  }
  else
  {
    v11 = 0;
    if ((v7 & 0x10000000000) == 0)
    {
LABEL_6:
      if ((v7 & 0x2000000000) == 0)
        goto LABEL_7;
      goto LABEL_27;
    }
  }
  v231[0] = &unk_1C850F859;
  v231[1] = 0;
  LODWORD(v230) = 1;
  v228[0] = &unk_1C850F891;
  v228[1] = 0;
  LODWORD(v227) = 1;
  v12 = &v225[2 * v8];
  *v12 = &unk_1C850F8EC;
  v12[1] = 0;
  LODWORD(v224) = v8 + 1;
  v13 = &v222[2 * v11];
  *v13 = &unk_1C850F9C7;
  v13[1] = 0;
  v219[0] = &unk_1C850FB7B;
  v219[1] = 0;
  LODWORD(v218) = 1;
  v14 = &v222[2 * v11 + 2];
  *v14 = &unk_1C850FBAB;
  v14[1] = 1;
  v15 = &v220[16 * (v11 | 2)];
  *(_QWORD *)v15 = &unk_1C8510EAA;
  *((_QWORD *)v15 + 1) = 2;
  v16 = v11 + 3;
  LODWORD(v221) = v11 + 3;
  if (v9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v220, (uint64_t)v222, v16 + 1, 16);
    v192 = &v220[16 * v221];
    *(_QWORD *)v192 = &unk_1C85121A9;
    *((_QWORD *)v192 + 1) = 3;
    LODWORD(v16) = v221;
    v18 = HIDWORD(v221);
  }
  else
  {
    v17 = &v220[16 * v16];
    *(_QWORD *)v17 = &unk_1C85121A9;
    *((_QWORD *)v17 + 1) = 3;
    v18 = 4;
  }
  v19 = (v16 + 1);
  LODWORD(v221) = v19;
  if (v19 >= v18)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v220, (uint64_t)v222, v19 + 1, 16);
    v193 = &v220[16 * v221];
    *(_QWORD *)v193 = &unk_1C85134A8;
    *((_QWORD *)v193 + 1) = 4;
    LODWORD(v19) = v221;
    v18 = HIDWORD(v221);
  }
  else
  {
    v20 = &v220[16 * v19];
    *(_QWORD *)v20 = &unk_1C85134A8;
    *((_QWORD *)v20 + 1) = 4;
  }
  v21 = (v19 + 1);
  LODWORD(v221) = v21;
  if (v21 >= v18)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v220, (uint64_t)v222, v21 + 1, 16);
    v194 = &v220[16 * v221];
    *(_QWORD *)v194 = &unk_1C85147A7;
    *((_QWORD *)v194 + 1) = 5;
    LODWORD(v21) = v221;
  }
  else
  {
    v22 = &v220[16 * v21];
    *(_QWORD *)v22 = &unk_1C85147A7;
    *((_QWORD *)v22 + 1) = 5;
  }
  LODWORD(v221) = v21 + 1;
  v24 = v215;
  v23 = HIDWORD(v215);
  if (v215 >= HIDWORD(v215))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, (uint64_t)v216, v215 + 1, 16);
    v195 = (char *)v214 + 16 * v215;
    *v195 = &unk_1C8515AA6;
    v195[1] = 1;
    v24 = v215;
    v23 = HIDWORD(v215);
  }
  else
  {
    v25 = (char *)v214 + 16 * v215;
    *v25 = &unk_1C8515AA6;
    v25[1] = 1;
  }
  v26 = (v24 + 1);
  LODWORD(v215) = v26;
  if (v26 >= v23)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, (uint64_t)v216, v26 + 1, 16);
    v196 = (char *)v214 + 16 * v215;
    *v196 = &unk_1C85170A5;
    v196[1] = 2;
    LODWORD(v26) = v215;
    v23 = HIDWORD(v215);
  }
  else
  {
    v27 = (char *)v214 + 16 * v26;
    *v27 = &unk_1C85170A5;
    v27[1] = 2;
  }
  v28 = (v26 + 1);
  LODWORD(v215) = v28;
  if (v28 >= v23)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, (uint64_t)v216, v28 + 1, 16);
    v197 = (char *)v214 + 16 * v215;
    *v197 = &unk_1C85186A4;
    v197[1] = 3;
    LODWORD(v28) = v215;
    v23 = HIDWORD(v215);
  }
  else
  {
    v29 = (char *)v214 + 16 * v28;
    *v29 = &unk_1C85186A4;
    v29[1] = 3;
  }
  v30 = (v28 + 1);
  LODWORD(v215) = v30;
  if (v30 >= v23)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, (uint64_t)v216, v30 + 1, 16);
    v198 = (char *)v214 + 16 * v215;
    *v198 = &unk_1C8519CA3;
    v198[1] = 4;
    LODWORD(v30) = v215;
    v23 = HIDWORD(v215);
  }
  else
  {
    v31 = (char *)v214 + 16 * v30;
    *v31 = &unk_1C8519CA3;
    v31[1] = 4;
  }
  v32 = (v30 + 1);
  LODWORD(v215) = v32;
  if (v32 >= v23)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, (uint64_t)v216, v32 + 1, 16);
    v199 = (char *)v214 + 16 * v215;
    *v199 = &unk_1C851B2A2;
    v199[1] = 5;
    v34 = v215 + 1;
  }
  else
  {
    v33 = (char *)v214 + 16 * v32;
    *v33 = &unk_1C851B2A2;
    v33[1] = 5;
    v34 = v30 + 2;
  }
  LODWORD(v215) = v34;
  v7 = *(_QWORD *)(a2 + 192);
  if ((v7 & 0x2000000000) == 0)
  {
LABEL_7:
    if ((v7 & 0x800000000) == 0)
      goto LABEL_56;
    goto LABEL_54;
  }
LABEL_27:
  v35 = v224;
  if (v224 >= HIDWORD(v224))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v223, (uint64_t)v225, v224 + 1, 16);
    v200 = &v223[16 * v224];
    *(_QWORD *)v200 = &unk_1C851C8A1;
    *((_QWORD *)v200 + 1) = 0;
    v35 = v224;
  }
  else
  {
    v36 = &v223[16 * v224];
    *(_QWORD *)v36 = &unk_1C851C8A1;
    *((_QWORD *)v36 + 1) = 0;
  }
  LODWORD(v224) = v35 + 1;
  v37 = v221;
  if (v221 >= HIDWORD(v221))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v220, (uint64_t)v222, v221 + 1, 16);
    v201 = &v220[16 * v221];
    *(_QWORD *)v201 = &unk_1C851D64E;
    *((_QWORD *)v201 + 1) = 0;
    v37 = v221;
  }
  else
  {
    v38 = &v220[16 * v221];
    *(_QWORD *)v38 = &unk_1C851D64E;
    *((_QWORD *)v38 + 1) = 0;
  }
  v39 = v37 + 1;
  LODWORD(v221) = v37 + 1;
  v40 = v218;
  if (v218 >= HIDWORD(v218))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v217, (uint64_t)v219, v218 + 1, 16);
    v202 = (char *)v217 + 16 * v218;
    *v202 = &unk_1C851D76A;
    v202[1] = 0;
    v40 = v218;
    v39 = v221;
  }
  else
  {
    v41 = (char *)v217 + 16 * v218;
    *v41 = &unk_1C851D76A;
    v41[1] = 0;
  }
  LODWORD(v218) = v40 + 1;
  v42 = HIDWORD(v221);
  if (v39 >= HIDWORD(v221))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v220, (uint64_t)v222, v39 + 1, 16);
    v203 = &v220[16 * v221];
    *(_QWORD *)v203 = &unk_1C851D792;
    *((_QWORD *)v203 + 1) = 1;
    v39 = v221;
    v42 = HIDWORD(v221);
  }
  else
  {
    v43 = &v220[16 * v39];
    *(_QWORD *)v43 = &unk_1C851D792;
    *((_QWORD *)v43 + 1) = 1;
  }
  v44 = v39 + 1;
  LODWORD(v221) = v44;
  if (v44 >= v42)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v220, (uint64_t)v222, v44 + 1, 16);
    v204 = &v220[16 * v221];
    *(_QWORD *)v204 = &unk_1C851E25D;
    *((_QWORD *)v204 + 1) = 2;
    LODWORD(v44) = v221;
    v42 = HIDWORD(v221);
  }
  else
  {
    v45 = &v220[16 * v44];
    *(_QWORD *)v45 = &unk_1C851E25D;
    *((_QWORD *)v45 + 1) = 2;
  }
  v46 = (v44 + 1);
  LODWORD(v221) = v46;
  if (v46 >= v42)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v220, (uint64_t)v222, v46 + 1, 16);
    v205 = &v220[16 * v221];
    *(_QWORD *)v205 = &unk_1C851ED28;
    *((_QWORD *)v205 + 1) = 3;
    LODWORD(v46) = v221;
    v42 = HIDWORD(v221);
  }
  else
  {
    v47 = &v220[16 * v46];
    *(_QWORD *)v47 = &unk_1C851ED28;
    *((_QWORD *)v47 + 1) = 3;
  }
  v48 = (v46 + 1);
  LODWORD(v221) = v48;
  if (v48 >= v42)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v220, (uint64_t)v222, v48 + 1, 16);
    v206 = &v220[16 * v221];
    *(_QWORD *)v206 = &unk_1C851F7F3;
    *((_QWORD *)v206 + 1) = 4;
    LODWORD(v48) = v221;
    v42 = HIDWORD(v221);
  }
  else
  {
    v49 = &v220[16 * v48];
    *(_QWORD *)v49 = &unk_1C851F7F3;
    *((_QWORD *)v49 + 1) = 4;
  }
  v50 = (v48 + 1);
  LODWORD(v221) = v50;
  if (v50 >= v42)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v220, (uint64_t)v222, v50 + 1, 16);
    v207 = &v220[16 * v221];
    *(_QWORD *)v207 = &unk_1C85202BE;
    *((_QWORD *)v207 + 1) = 5;
    LODWORD(v50) = v221;
  }
  else
  {
    v51 = &v220[16 * v50];
    *(_QWORD *)v51 = &unk_1C85202BE;
    *((_QWORD *)v51 + 1) = 5;
  }
  LODWORD(v221) = v50 + 1;
  v53 = v215;
  v52 = HIDWORD(v215);
  if (v215 >= HIDWORD(v215))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, (uint64_t)v216, v215 + 1, 16);
    v208 = (char *)v214 + 16 * v215;
    *v208 = &unk_1C8520D89;
    v208[1] = 1;
    v53 = v215;
    v52 = HIDWORD(v215);
  }
  else
  {
    v54 = (char *)v214 + 16 * v215;
    *v54 = &unk_1C8520D89;
    v54[1] = 1;
  }
  v55 = (v53 + 1);
  LODWORD(v215) = v55;
  if (v55 >= v52)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, (uint64_t)v216, v55 + 1, 16);
    v209 = (char *)v214 + 16 * v215;
    *v209 = &unk_1C85224F0;
    v209[1] = 2;
    LODWORD(v55) = v215;
    v52 = HIDWORD(v215);
  }
  else
  {
    v56 = (char *)v214 + 16 * v55;
    *v56 = &unk_1C85224F0;
    v56[1] = 2;
  }
  v57 = (v55 + 1);
  LODWORD(v215) = v57;
  if (v57 >= v52)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, (uint64_t)v216, v57 + 1, 16);
    v210 = (char *)v214 + 16 * v215;
    *v210 = &unk_1C8523C57;
    v210[1] = 3;
    LODWORD(v57) = v215;
    v52 = HIDWORD(v215);
  }
  else
  {
    v58 = (char *)v214 + 16 * v57;
    *v58 = &unk_1C8523C57;
    v58[1] = 3;
  }
  v59 = (v57 + 1);
  LODWORD(v215) = v59;
  if (v59 >= v52)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, (uint64_t)v216, v59 + 1, 16);
    v211 = (char *)v214 + 16 * v215;
    *v211 = &unk_1C85253BE;
    v211[1] = 4;
    LODWORD(v59) = v215;
    v52 = HIDWORD(v215);
  }
  else
  {
    v60 = (char *)v214 + 16 * v59;
    *v60 = &unk_1C85253BE;
    v60[1] = 4;
  }
  v61 = (v59 + 1);
  LODWORD(v215) = v61;
  if (v61 >= v52)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, (uint64_t)v216, v61 + 1, 16);
    v212 = (char *)v214 + 16 * v215;
    *v212 = &unk_1C8526B25;
    v212[1] = 5;
    v63 = v215 + 1;
  }
  else
  {
    v62 = (char *)v214 + 16 * v61;
    *v62 = &unk_1C8526B25;
    v62[1] = 5;
    v63 = v59 + 2;
  }
  LODWORD(v215) = v63;
  if ((*(_QWORD *)(a2 + 192) & 0x800000000) != 0)
  {
LABEL_54:
    v64 = v221;
    if (v221 >= HIDWORD(v221))
    {
      sub_1C4D5ECEC(&v220, (uint64_t)&unk_1C852828C);
    }
    else
    {
      v65 = &v220[16 * v221];
      *(_QWORD *)v65 = &unk_1C852828C;
      *((_QWORD *)v65 + 1) = 0;
      LODWORD(v221) = v64 + 1;
    }
  }
LABEL_56:
  v66 = *(_QWORD *)(a2 + 192);
  if ((v66 & 0x2A00000000) != 0)
  {
    v67 = v227;
    if (v227 >= HIDWORD(v227))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v226, (uint64_t)v228, v227 + 1, 16);
      v186 = &v226[16 * v227];
      *(_QWORD *)v186 = &unk_1C852829F;
      *((_QWORD *)v186 + 1) = 0;
      v67 = v227;
    }
    else
    {
      v68 = &v226[16 * v227];
      *(_QWORD *)v68 = &unk_1C852829F;
      *((_QWORD *)v68 + 1) = 0;
    }
    LODWORD(v227) = v67 + 1;
    v69 = v224;
    if (v224 >= HIDWORD(v224))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v223, (uint64_t)v225, v224 + 1, 16);
      v187 = &v223[16 * v224];
      *(_QWORD *)v187 = &unk_1C8528414;
      *((_QWORD *)v187 + 1) = 0;
      v69 = v224;
    }
    else
    {
      v70 = &v223[16 * v224];
      *(_QWORD *)v70 = &unk_1C8528414;
      *((_QWORD *)v70 + 1) = 0;
    }
    LODWORD(v224) = v69 + 1;
    v66 = *(_QWORD *)(a2 + 192);
  }
  if ((v66 & 0x2800000000) != 0)
  {
    v71 = v230;
    if (v230 >= HIDWORD(v230))
    {
      sub_1C4D5ECEC(&v229, (uint64_t)&unk_1C8528599);
    }
    else
    {
      v72 = &v229[16 * v230];
      *(_QWORD *)v72 = &unk_1C8528599;
      *((_QWORD *)v72 + 1) = 0;
      LODWORD(v230) = v71 + 1;
    }
    v73 = v227;
    if (v227 >= HIDWORD(v227))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v226, (uint64_t)v228, v227 + 1, 16);
      v188 = &v226[16 * v227];
      *(_QWORD *)v188 = &unk_1C85285DE;
      *((_QWORD *)v188 + 1) = 0;
      v73 = v227;
    }
    else
    {
      v74 = &v226[16 * v227];
      *(_QWORD *)v74 = &unk_1C85285DE;
      *((_QWORD *)v74 + 1) = 0;
    }
    LODWORD(v227) = v73 + 1;
    v75 = v224;
    if (v224 >= HIDWORD(v224))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v223, (uint64_t)v225, v224 + 1, 16);
      v189 = &v223[16 * v224];
      *(_QWORD *)v189 = &unk_1C8528629;
      *((_QWORD *)v189 + 1) = 0;
      v75 = v224;
    }
    else
    {
      v76 = &v223[16 * v224];
      *(_QWORD *)v76 = &unk_1C8528629;
      *((_QWORD *)v76 + 1) = 0;
    }
    LODWORD(v224) = v75 + 1;
    v77 = v221;
    if (v221 >= HIDWORD(v221))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v220, (uint64_t)v222, v221 + 1, 16);
      v190 = &v220[16 * v221];
      *(_QWORD *)v190 = &unk_1C8528678;
      *((_QWORD *)v190 + 1) = 0;
      v77 = v221;
    }
    else
    {
      v78 = &v220[16 * v221];
      *(_QWORD *)v78 = &unk_1C8528678;
      *((_QWORD *)v78 + 1) = 0;
    }
    LODWORD(v221) = v77 + 1;
    v79 = v218;
    if (v218 >= HIDWORD(v218))
    {
      sub_1C4D5ECEC(&v217, (uint64_t)&unk_1C85286CD);
    }
    else
    {
      v80 = (char *)v217 + 16 * v218;
      *v80 = &unk_1C85286CD;
      v80[1] = 0;
      LODWORD(v218) = v79 + 1;
    }
  }
  v81 = *(_QWORD *)(a2 + 192);
  if ((v81 & 0xA00000000) != 0)
  {
    v82 = v221;
    if (v221 >= HIDWORD(v221))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v220, (uint64_t)v222, v221 + 1, 16);
      v191 = &v220[16 * v221];
      *(_QWORD *)v191 = &unk_1C8528712;
      *((_QWORD *)v191 + 1) = 0;
      v82 = v221;
    }
    else
    {
      v83 = &v220[16 * v221];
      *(_QWORD *)v83 = &unk_1C8528712;
      *((_QWORD *)v83 + 1) = 0;
    }
    LODWORD(v221) = v82 + 1;
    v81 = *(_QWORD *)(a2 + 192);
  }
  if ((v81 & 0x200000000) != 0)
  {
    v84 = v221;
    if (v221 >= HIDWORD(v221))
    {
      sub_1C4D5ECEC(&v220, (uint64_t)&unk_1C85287AF);
    }
    else
    {
      v85 = &v220[16 * v221];
      *(_QWORD *)v85 = &unk_1C85287AF;
      *((_QWORD *)v85 + 1) = 0;
      LODWORD(v221) = v84 + 1;
    }
  }
  v86 = v230;
  if (v230 >= HIDWORD(v230))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v229, (uint64_t)v231, v230 + 1, 16);
    v155 = &v229[16 * v230];
    *(_QWORD *)v155 = &unk_1C85287C2;
    *((_QWORD *)v155 + 1) = 0;
    v86 = v230;
  }
  else
  {
    v87 = &v229[16 * v230];
    *(_QWORD *)v87 = &unk_1C85287C2;
    *((_QWORD *)v87 + 1) = 0;
  }
  LODWORD(v230) = v86 + 1;
  v88 = v227;
  if (v227 >= HIDWORD(v227))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v226, (uint64_t)v228, v227 + 1, 16);
    v156 = &v226[16 * v227];
    *(_QWORD *)v156 = &unk_1C8528B14;
    *((_QWORD *)v156 + 1) = 0;
    v88 = v227;
  }
  else
  {
    v89 = &v226[16 * v227];
    *(_QWORD *)v89 = &unk_1C8528B14;
    *((_QWORD *)v89 + 1) = 0;
  }
  LODWORD(v227) = v88 + 1;
  v90 = v224;
  if (v224 >= HIDWORD(v224))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v223, (uint64_t)v225, v224 + 1, 16);
    v157 = &v223[16 * v224];
    *(_QWORD *)v157 = &unk_1C852B07B;
    *((_QWORD *)v157 + 1) = 0;
    v90 = v224;
  }
  else
  {
    v91 = &v223[16 * v224];
    *(_QWORD *)v91 = &unk_1C852B07B;
    *((_QWORD *)v91 + 1) = 0;
  }
  LODWORD(v224) = v90 + 1;
  v92 = v221;
  if (v221 >= HIDWORD(v221))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v220, (uint64_t)v222, v221 + 1, 16);
    v158 = &v220[16 * v221];
    *(_QWORD *)v158 = &unk_1C854044A;
    *((_QWORD *)v158 + 1) = 0;
    v92 = v221;
  }
  else
  {
    v93 = &v220[16 * v221];
    *(_QWORD *)v93 = &unk_1C854044A;
    *((_QWORD *)v93 + 1) = 0;
  }
  LODWORD(v221) = v92 + 1;
  v94 = v218;
  if (v218 >= HIDWORD(v218))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v217, (uint64_t)v219, v218 + 1, 16);
    v159 = (char *)v217 + 16 * v218;
    *v159 = &unk_1C856542D;
    v159[1] = 0;
    v94 = v218;
  }
  else
  {
    v95 = (char *)v217 + 16 * v218;
    *v95 = &unk_1C856542D;
    v95[1] = 0;
  }
  LODWORD(v218) = v94 + 1;
  v96 = v224;
  v97 = HIDWORD(v224);
  if (v224 >= HIDWORD(v224))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v223, (uint64_t)v225, v224 + 1, 16);
    v160 = &v223[16 * v224];
    *(_QWORD *)v160 = &unk_1C85849E0;
    *((_QWORD *)v160 + 1) = 1;
    v96 = v224;
    v97 = HIDWORD(v224);
  }
  else
  {
    v98 = &v223[16 * v224];
    *(_QWORD *)v98 = &unk_1C85849E0;
    *((_QWORD *)v98 + 1) = 1;
  }
  v99 = (v96 + 1);
  LODWORD(v224) = v99;
  if (v99 >= v97)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v223, (uint64_t)v225, v99 + 1, 16);
    v161 = &v223[16 * v224];
    *(_QWORD *)v161 = &unk_1C8584D61;
    *((_QWORD *)v161 + 1) = 2;
    LODWORD(v99) = v224;
    v97 = HIDWORD(v224);
  }
  else
  {
    v100 = &v223[16 * v99];
    *(_QWORD *)v100 = &unk_1C8584D61;
    *((_QWORD *)v100 + 1) = 2;
  }
  v101 = (v99 + 1);
  LODWORD(v224) = v101;
  if (v101 >= v97)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v223, (uint64_t)v225, v101 + 1, 16);
    v162 = &v223[16 * v224];
    *(_QWORD *)v162 = &unk_1C85850E2;
    *((_QWORD *)v162 + 1) = 3;
    LODWORD(v101) = v224;
    v97 = HIDWORD(v224);
  }
  else
  {
    v102 = &v223[16 * v101];
    *(_QWORD *)v102 = &unk_1C85850E2;
    *((_QWORD *)v102 + 1) = 3;
  }
  v103 = (v101 + 1);
  LODWORD(v224) = v103;
  if (v103 >= v97)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v223, (uint64_t)v225, v103 + 1, 16);
    v163 = &v223[16 * v224];
    *(_QWORD *)v163 = &unk_1C8585463;
    *((_QWORD *)v163 + 1) = 4;
    LODWORD(v103) = v224;
  }
  else
  {
    v104 = &v223[16 * v103];
    *(_QWORD *)v104 = &unk_1C8585463;
    *((_QWORD *)v104 + 1) = 4;
  }
  LODWORD(v224) = v103 + 1;
  v106 = v221;
  v105 = HIDWORD(v221);
  if (v221 >= HIDWORD(v221))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v220, (uint64_t)v222, v221 + 1, 16);
    v164 = &v220[16 * v221];
    *(_QWORD *)v164 = &unk_1C85857E4;
    *((_QWORD *)v164 + 1) = 1;
    v106 = v221;
    v105 = HIDWORD(v221);
  }
  else
  {
    v107 = &v220[16 * v221];
    *(_QWORD *)v107 = &unk_1C85857E4;
    *((_QWORD *)v107 + 1) = 1;
  }
  v108 = (v106 + 1);
  LODWORD(v221) = v108;
  if (v108 >= v105)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v220, (uint64_t)v222, v108 + 1, 16);
    v165 = &v220[16 * v221];
    *(_QWORD *)v165 = &unk_1C8585E0B;
    *((_QWORD *)v165 + 1) = 2;
    LODWORD(v108) = v221;
    v105 = HIDWORD(v221);
  }
  else
  {
    v109 = &v220[16 * v108];
    *(_QWORD *)v109 = &unk_1C8585E0B;
    *((_QWORD *)v109 + 1) = 2;
  }
  v110 = (v108 + 1);
  LODWORD(v221) = v110;
  if (v110 >= v105)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v220, (uint64_t)v222, v110 + 1, 16);
    v166 = &v220[16 * v221];
    *(_QWORD *)v166 = &unk_1C8586432;
    *((_QWORD *)v166 + 1) = 3;
    LODWORD(v110) = v221;
    v105 = HIDWORD(v221);
  }
  else
  {
    v111 = &v220[16 * v110];
    *(_QWORD *)v111 = &unk_1C8586432;
    *((_QWORD *)v111 + 1) = 3;
  }
  v112 = (v110 + 1);
  LODWORD(v221) = v112;
  if (v112 >= v105)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v220, (uint64_t)v222, v112 + 1, 16);
    v167 = &v220[16 * v221];
    *(_QWORD *)v167 = &unk_1C8586A59;
    *((_QWORD *)v167 + 1) = 4;
    LODWORD(v112) = v221;
  }
  else
  {
    v113 = &v220[16 * v112];
    *(_QWORD *)v113 = &unk_1C8586A59;
    *((_QWORD *)v113 + 1) = 4;
  }
  LODWORD(v221) = v112 + 1;
  v115 = v218;
  v114 = HIDWORD(v218);
  if (v218 >= HIDWORD(v218))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v217, (uint64_t)v219, v218 + 1, 16);
    v168 = (char *)v217 + 16 * v218;
    *v168 = &unk_1C8587080;
    v168[1] = 1;
    v115 = v218;
    v114 = HIDWORD(v218);
  }
  else
  {
    v116 = (char *)v217 + 16 * v218;
    *v116 = &unk_1C8587080;
    v116[1] = 1;
  }
  v117 = (v115 + 1);
  LODWORD(v218) = v117;
  if (v117 >= v114)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v217, (uint64_t)v219, v117 + 1, 16);
    v169 = (char *)v217 + 16 * v218;
    *v169 = &unk_1C8587B93;
    v169[1] = 2;
    LODWORD(v117) = v218;
    v114 = HIDWORD(v218);
  }
  else
  {
    v118 = (char *)v217 + 16 * v117;
    *v118 = &unk_1C8587B93;
    v118[1] = 2;
  }
  v119 = (v117 + 1);
  LODWORD(v218) = v119;
  if (v119 >= v114)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v217, (uint64_t)v219, v119 + 1, 16);
    v170 = (char *)v217 + 16 * v218;
    *v170 = &unk_1C85886A6;
    v170[1] = 3;
    LODWORD(v119) = v218;
    v114 = HIDWORD(v218);
  }
  else
  {
    v120 = (char *)v217 + 16 * v119;
    *v120 = &unk_1C85886A6;
    v120[1] = 3;
  }
  v121 = (v119 + 1);
  LODWORD(v218) = v121;
  if (v121 >= v114)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v217, (uint64_t)v219, v121 + 1, 16);
    v171 = (char *)v217 + 16 * v218;
    *v171 = &unk_1C85891B9;
    v171[1] = 4;
    LODWORD(v121) = v218;
  }
  else
  {
    v122 = (char *)v217 + 16 * v121;
    *v122 = &unk_1C85891B9;
    v122[1] = 4;
  }
  LODWORD(v218) = v121 + 1;
  v123 = v224;
  v124 = HIDWORD(v224);
  if (v224 >= HIDWORD(v224))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v223, (uint64_t)v225, v224 + 1, 16);
    v172 = &v223[16 * v224];
    *(_QWORD *)v172 = &unk_1C8589CCC;
    *((_QWORD *)v172 + 1) = 1;
    v123 = v224;
    v124 = HIDWORD(v224);
  }
  else
  {
    v125 = &v223[16 * v224];
    *(_QWORD *)v125 = &unk_1C8589CCC;
    *((_QWORD *)v125 + 1) = 1;
  }
  v126 = (v123 + 1);
  LODWORD(v224) = v126;
  if (v126 >= v124)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v223, (uint64_t)v225, v126 + 1, 16);
    v173 = &v223[16 * v224];
    *(_QWORD *)v173 = &unk_1C8589E2D;
    *((_QWORD *)v173 + 1) = 2;
    LODWORD(v126) = v224;
    v124 = HIDWORD(v224);
  }
  else
  {
    v127 = &v223[16 * v126];
    *(_QWORD *)v127 = &unk_1C8589E2D;
    *((_QWORD *)v127 + 1) = 2;
  }
  v128 = (v126 + 1);
  LODWORD(v224) = v128;
  if (v128 >= v124)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v223, (uint64_t)v225, v128 + 1, 16);
    v174 = &v223[16 * v224];
    *(_QWORD *)v174 = &unk_1C8589F8E;
    *((_QWORD *)v174 + 1) = 3;
    LODWORD(v128) = v224;
    v124 = HIDWORD(v224);
  }
  else
  {
    v129 = &v223[16 * v128];
    *(_QWORD *)v129 = &unk_1C8589F8E;
    *((_QWORD *)v129 + 1) = 3;
  }
  v130 = (v128 + 1);
  LODWORD(v224) = v130;
  if (v130 >= v124)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v223, (uint64_t)v225, v130 + 1, 16);
    v175 = &v223[16 * v224];
    *(_QWORD *)v175 = &unk_1C858A0EF;
    *((_QWORD *)v175 + 1) = 4;
    LODWORD(v130) = v224;
  }
  else
  {
    v131 = &v223[16 * v130];
    *(_QWORD *)v131 = &unk_1C858A0EF;
    *((_QWORD *)v131 + 1) = 4;
  }
  LODWORD(v224) = v130 + 1;
  v133 = v221;
  v132 = HIDWORD(v221);
  if (v221 >= HIDWORD(v221))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v220, (uint64_t)v222, v221 + 1, 16);
    v176 = &v220[16 * v221];
    *(_QWORD *)v176 = &unk_1C858A250;
    *((_QWORD *)v176 + 1) = 0;
    v133 = v221;
    v132 = HIDWORD(v221);
  }
  else
  {
    v134 = &v220[16 * v221];
    *(_QWORD *)v134 = &unk_1C858A250;
    *((_QWORD *)v134 + 1) = 0;
  }
  v135 = (v133 + 1);
  LODWORD(v221) = v135;
  if (v135 >= v132)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v220, (uint64_t)v222, v135 + 1, 16);
    v177 = &v220[16 * v221];
    *(_QWORD *)v177 = &unk_1C858A83C;
    *((_QWORD *)v177 + 1) = 1;
    LODWORD(v135) = v221;
    v132 = HIDWORD(v221);
  }
  else
  {
    v136 = &v220[16 * v135];
    *(_QWORD *)v136 = &unk_1C858A83C;
    *((_QWORD *)v136 + 1) = 1;
  }
  v137 = (v135 + 1);
  LODWORD(v221) = v137;
  if (v137 >= v132)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v220, (uint64_t)v222, v137 + 1, 16);
    v178 = &v220[16 * v221];
    *(_QWORD *)v178 = &unk_1C858BBD9;
    *((_QWORD *)v178 + 1) = 2;
    LODWORD(v137) = v221;
    v132 = HIDWORD(v221);
  }
  else
  {
    v138 = &v220[16 * v137];
    *(_QWORD *)v138 = &unk_1C858BBD9;
    *((_QWORD *)v138 + 1) = 2;
  }
  v139 = (v137 + 1);
  LODWORD(v221) = v139;
  if (v139 >= v132)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v220, (uint64_t)v222, v139 + 1, 16);
    v179 = &v220[16 * v221];
    *(_QWORD *)v179 = &unk_1C858CF76;
    *((_QWORD *)v179 + 1) = 3;
    LODWORD(v139) = v221;
    v132 = HIDWORD(v221);
  }
  else
  {
    v140 = &v220[16 * v139];
    *(_QWORD *)v140 = &unk_1C858CF76;
    *((_QWORD *)v140 + 1) = 3;
  }
  v141 = (v139 + 1);
  LODWORD(v221) = v141;
  if (v141 >= v132)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v220, (uint64_t)v222, v141 + 1, 16);
    v180 = &v220[16 * v221];
    *(_QWORD *)v180 = &unk_1C858E313;
    *((_QWORD *)v180 + 1) = 4;
    LODWORD(v141) = v221;
  }
  else
  {
    v142 = &v220[16 * v141];
    *(_QWORD *)v142 = &unk_1C858E313;
    *((_QWORD *)v142 + 1) = 4;
  }
  LODWORD(v221) = v141 + 1;
  v144 = v218;
  v143 = HIDWORD(v218);
  if (v218 >= HIDWORD(v218))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v217, (uint64_t)v219, v218 + 1, 16);
    v181 = (char *)v217 + 16 * v218;
    *v181 = &unk_1C858F6B0;
    v181[1] = 0;
    v144 = v218;
    v143 = HIDWORD(v218);
  }
  else
  {
    v145 = (char *)v217 + 16 * v218;
    *v145 = &unk_1C858F6B0;
    v145[1] = 0;
  }
  v146 = (v144 + 1);
  LODWORD(v218) = v146;
  if (v146 >= v143)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v217, (uint64_t)v219, v146 + 1, 16);
    v182 = (char *)v217 + 16 * v218;
    *v182 = &unk_1C858FA81;
    v182[1] = 1;
    LODWORD(v146) = v218;
    v143 = HIDWORD(v218);
  }
  else
  {
    v147 = (char *)v217 + 16 * v146;
    *v147 = &unk_1C858FA81;
    v147[1] = 1;
  }
  v148 = (v146 + 1);
  LODWORD(v218) = v148;
  if (v148 >= v143)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v217, (uint64_t)v219, v148 + 1, 16);
    v183 = (char *)v217 + 16 * v218;
    *v183 = &unk_1C858FE52;
    v183[1] = 2;
    LODWORD(v148) = v218;
    v143 = HIDWORD(v218);
  }
  else
  {
    v149 = (char *)v217 + 16 * v148;
    *v149 = &unk_1C858FE52;
    v149[1] = 2;
  }
  v150 = (v148 + 1);
  LODWORD(v218) = v150;
  if (v150 >= v143)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v217, (uint64_t)v219, v150 + 1, 16);
    v184 = (char *)v217 + 16 * v218;
    *v184 = &unk_1C8590223;
    v184[1] = 3;
    LODWORD(v150) = v218;
    v143 = HIDWORD(v218);
  }
  else
  {
    v151 = (char *)v217 + 16 * v150;
    *v151 = &unk_1C8590223;
    v151[1] = 3;
  }
  v152 = (v150 + 1);
  LODWORD(v218) = v152;
  if (v152 >= v143)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v217, (uint64_t)v219, v152 + 1, 16);
    v185 = (char *)v217 + 16 * v218;
    *v185 = &unk_1C85905F4;
    v185[1] = 4;
    LODWORD(v152) = v218;
  }
  else
  {
    v153 = (char *)v217 + 16 * v152;
    *v153 = &unk_1C85905F4;
    v153[1] = 4;
  }
  LODWORD(v218) = v152 + 1;
  v213 = 16;
  sub_1C4D5E1BC(v6, (uint64_t)&v229, &v213);
  v213 = 32;
  sub_1C4D5E1BC(v6, (uint64_t)&v226, &v213);
  v213 = 48;
  sub_1C4D5E1BC(v6, (uint64_t)&v223, &v213);
  v213 = 64;
  sub_1C4D5E1BC(v6, (uint64_t)&v220, &v213);
  v213 = 80;
  sub_1C4D5E1BC(v6, (uint64_t)&v217, &v213);
  v213 = 96;
  sub_1C4D5E1BC(v6, (uint64_t)&v214, &v213);
  if (v214 != v216)
    free(v214);
  if (v217 != v219)
    free(v217);
  if (v220 != (char *)v222)
    free(v220);
  if (v223 != (char *)v225)
    free(v223);
  if (v226 != (char *)v228)
    free(v226);
  if (v229 != (char *)v231)
    free(v229);
  return v5;
}

_QWORD *sub_1C4D5E148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  _QWORD *result;
  uint64_t v12;

  result = (_QWORD *)operator new();
  v12 = *a6;
  *a6 = 0;
  *result = &off_1E8184C60;
  result[1] = a5;
  result[2] = v12;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  return result;
}

void sub_1C4D5E1BC(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v6;
  int v7;
  char *v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  const void *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  char *v24;
  int v25;
  unint64_t v26;

  v6 = *(_DWORD *)(a1 + 8);
  if (v6 < *(_DWORD *)(a1 + 12))
  {
    sub_1C4D5ED4C(*(_QWORD *)a1 + 88 * v6, a2, *a3);
    v7 = *(_DWORD *)(a1 + 8) + 1;
    goto LABEL_3;
  }
  v26 = 0;
  v8 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 88, &v26);
  sub_1C4D5ED4C((uint64_t)&v8[88 * *(unsigned int *)(a1 + 8)], a2, *a3);
  v9 = *(char **)a1;
  v10 = *(_DWORD *)(a1 + 8);
  if (!v10)
    goto LABEL_24;
  v11 = 0;
  v12 = 88 * v10;
  do
  {
    v13 = &v8[v11];
    v14 = &v9[v11];
    v15 = &v8[v11 + 16];
    *(_QWORD *)v13 = v15;
    *((_QWORD *)v13 + 1) = 0x400000000;
    if (v9 != v8)
    {
      v16 = *((unsigned int *)v14 + 2);
      if (*((_DWORD *)v14 + 2))
      {
        v17 = &v9[v11];
        v19 = (uint64_t)&v9[v11 + 16];
        v18 = *(const void **)&v9[v11];
        if ((const void *)v19 != v18)
        {
          *(_QWORD *)v13 = v18;
          v20 = *((_DWORD *)v17 + 3);
          *((_DWORD *)v13 + 2) = v16;
          *((_DWORD *)v13 + 3) = v20;
          *(_QWORD *)v17 = v19;
          *((_DWORD *)v17 + 3) = 0;
LABEL_16:
          *((_DWORD *)v14 + 2) = 0;
          goto LABEL_17;
        }
        if (v16 < 5)
        {
          v21 = *((unsigned int *)v14 + 2);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v8[v11], (uint64_t)&v8[v11 + 16], *((unsigned int *)v14 + 2), 16);
          v21 = *((unsigned int *)v14 + 2);
          if (!(_DWORD)v21)
          {
LABEL_15:
            *((_DWORD *)v13 + 2) = v16;
            goto LABEL_16;
          }
          v18 = *(const void **)v14;
          v15 = *(char **)v13;
        }
        memcpy(v15, v18, 16 * v21);
        goto LABEL_15;
      }
    }
LABEL_17:
    *((_DWORD *)v13 + 20) = *((_DWORD *)v14 + 20);
    v11 += 88;
  }
  while (v12 != v11);
  v9 = *(char **)a1;
  v22 = *(_DWORD *)(a1 + 8);
  if (v22)
  {
    v23 = 88 * v22;
    do
    {
      v24 = *(char **)&v9[v23 - 88];
      if (&v9[v23 - 72] != v24)
        free(v24);
      v23 -= 88;
    }
    while (v23);
    v9 = *(char **)a1;
  }
LABEL_24:
  v25 = v26;
  if (v9 != (char *)(a1 + 16))
    free(v9);
  *(_QWORD *)a1 = v8;
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 12) = v25;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v7;
}

uint64_t sub_1C4D5E39C(uint64_t a1)
{
  char *v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_1E8132570;
  v2 = *(char **)(a1 + 40);
  v3 = *(_DWORD *)(a1 + 48);
  if (v3)
  {
    v4 = 88 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 88];
      if (&v2[v4 - 72] != v5)
        free(v5);
      v4 -= 88;
    }
    while (v4);
    v2 = *(char **)(a1 + 40);
  }
  if (v2 != (char *)(a1 + 56))
    free(v2);
  *(_QWORD *)a1 = off_1E8184C30;
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

void sub_1C4D5E444(uint64_t a1)
{
  sub_1C4D5E39C(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4D5E468(uint64_t result, uint64_t a2, unint64_t *a3, unsigned __int8 *a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  _BYTE *v32;
  char v33;
  int v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int16 *v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  _BYTE *v46;
  char v47;
  int v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  _BYTE *v57;
  char v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  _BYTE *v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  _BYTE *v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  unsigned int v79;
  char *v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  char *v86;
  char v87;
  uint64_t v88;
  unsigned __int8 *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  char *v98;
  char v99;
  uint64_t v100;
  llvm::raw_ostream *v101;
  llvm::raw_ostream *v102;
  unint64_t v103;
  int v104;
  void *v105;
  uint64_t v106;
  unsigned int v107;
  unsigned __int8 *v108;
  unsigned __int8 v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t *v114;
  unsigned __int8 *v115;
  void **v116;
  uint64_t v117;
  int v118;
  uint64_t *v119;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  unsigned __int8 *v126;
  unsigned int v127;
  _QWORD v128[2];
  unsigned __int8 v129;
  __int128 v130;
  void *__src;
  uint64_t v132;
  _BYTE v133[128];
  char v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(result + 32) = a7;
  *a3 = 2;
  v7 = *(_DWORD *)(result + 48);
  if (v7)
  {
    v8 = result;
    v9 = *(uint64_t **)(result + 40);
    v114 = &v9[11 * v7];
    v116 = (void **)(a2 + 16);
    v112 = a2 + 32;
    v115 = a4;
    v123 = result;
    while (1)
    {
      v10 = (unint64_t)*((unsigned int *)v9 + 20) >> 3;
      if (a5 < v10)
        v10 = a5;
      v11 = v10 >= 8 ? 8 : v10;
      if (v11)
      {
        v12 = 0;
        v13 = 0;
        v14 = a4;
        do
        {
          v15 = *v14++;
          v13 |= (unint64_t)v15 << v12;
          v12 += 8;
        }
        while (8 * v11 != v12);
        v16 = v11;
      }
      else
      {
        v13 = 0;
        v16 = 0;
      }
      if (v16 == (_DWORD)v10)
      {
        v17 = 0;
      }
      else
      {
        v17 = 0;
        v18 = v10 - v11;
        v19 = &a4[v11];
        v20 = 8 * v11 + 4294967232;
        do
        {
          v21 = *v19++;
          v17 |= (unint64_t)v21 << (v20 & 0xF8);
          v20 += 8;
          --v18;
        }
        while (v18);
      }
      v22 = *((unsigned int *)v9 + 2);
      if ((_DWORD)v22)
        break;
LABEL_126:
      v9 += 11;
      a4 = v115;
      if (v9 == v114)
        return 0;
    }
    v23 = *v9;
    v124 = *v9 + 16 * v22;
    v119 = v9;
LABEL_19:
    *(_QWORD *)(v8 + 584) = *(_QWORD *)(v23 + 8) & 0x1FLL;
    if (a5 < (unint64_t)*((unsigned int *)v9 + 20) >> 3)
      return 0;
    v24 = 0;
    v25 = 0;
    v26 = *(unsigned __int8 **)v23;
    v128[0] = v17;
    v128[1] = v13;
    v27 = *(_QWORD *)(v8 + 16);
    v127 = 3;
    v126 = v26;
    while (1)
    {
      switch(*v26)
      {
        case 1u:
          v62 = v26[1];
          v63 = v26[2];
          v26 += 3;
          result = (uint64_t)sub_1C4D5EDE8((unint64_t *)&v130, v17, v13, v62, v63);
          v25 = *((_QWORD *)&v130 + 1);
          v24 = v130;
          continue;
        case 2u:
          v28 = 0;
          v29 = 0;
          v30 = 0;
          v31 = 0;
          v32 = v26 + 1;
          do
          {
            v33 = v32[v28];
            v34 = v33;
            v35 = v33 & 0x7F;
            v36 = __CFADD__(v29, v35 << v31);
            v37 = (v35 << v31) + v29;
            v38 = v35 << v31;
            if (v31 < 0x40)
            {
              v29 = v37;
              v38 = v36;
            }
            v30 += v38;
            v31 += 7;
            ++v28;
          }
          while (v34 < 0);
          v39 = (unsigned __int16 *)&v32[v28];
          v40 = *((unsigned __int8 *)v39 + 2);
          v41 = v29 == v25 && v30 == v24;
          goto LABEL_42;
        case 3u:
          result = (uint64_t)sub_1C4D5EDE8((unint64_t *)&v130, v17, v13, v26[1], v26[2]);
          v42 = 0;
          v43 = 0;
          v44 = 0;
          v45 = 0;
          v46 = v26 + 3;
          do
          {
            v47 = v46[v42];
            v48 = v47;
            v49 = v47 & 0x7F;
            v50 = __CFADD__(v43, v49 << v45);
            v51 = (v49 << v45) + v43;
            v52 = v49 << v45;
            if (v45 < 0x40)
            {
              v43 = v51;
              v52 = v50;
            }
            v44 += v52;
            v45 += 7;
            ++v42;
          }
          while (v48 < 0);
          v39 = (unsigned __int16 *)&v46[v42];
          v40 = *((unsigned __int8 *)v39 + 2);
          v41 = v43 == *((_QWORD *)&v130 + 1) && v44 == (_QWORD)v130;
LABEL_42:
          v53 = *v39 | (unint64_t)(v40 << 16);
          if (v41)
            v53 = 0;
          v26 = (unsigned __int8 *)v39 + v53 + 3;
          continue;
        case 4u:
          v54 = 0;
          v55 = 0;
          v56 = 0;
          v57 = v26 + 1;
          while (1)
          {
            v58 = v57[v54];
            v59 = v58 & 0x7F;
            if (v56 >= 0x40 && (v58 & 0x7F) != 0)
              break;
            if ((unint64_t)(v59 << v56) >> v56 != v59)
              break;
            v55 += v59 << v56;
            v56 += 7;
            ++v54;
            if ((v58 & 0x80) == 0)
              __asm { BR              X13 }
          }
          v60 = &v57[v54];
          v61 = *v60 | ((unint64_t)v60[1] << 8) | ((unint64_t)v60[2] << 16);
          if (((*(unsigned __int8 *)(v27 + 196) >> 1) & 1) != 0)
            v61 = 0;
          v26 = &v60[v61 + 3];
          continue;
        case 5u:
          v96 = 0;
          v97 = 0;
          v98 = (char *)(v26 + 1);
          while (1)
          {
            v99 = *v98;
            v100 = *v98 & 0x7F;
            if (v97 >= 0x40 && (*v98 & 0x7F) != 0)
              break;
            if ((unint64_t)(v100 << v97) >> v97 != v100)
              break;
            v96 += v100 << v97;
            v97 += 7;
            ++v98;
            if ((v99 & 0x80) == 0)
              goto LABEL_112;
          }
          LODWORD(v96) = 0;
LABEL_112:
          v106 = 0;
          v107 = 0;
          v108 = &v26[(_DWORD)v98 - ((_DWORD)v26 + 1) + 1];
          while (1)
          {
            v109 = *v108;
            v110 = *v108 & 0x7F;
            if (v107 >= 0x40 && (*v108 & 0x7F) != 0)
              break;
            if ((unint64_t)(v110 << v107) >> v107 != v110)
              break;
            v106 += v110 << v107;
            v107 += 7;
            ++v108;
            if ((v109 & 0x80) == 0)
              goto LABEL_119;
          }
          LODWORD(v106) = 0;
LABEL_119:
          *(_DWORD *)(a2 + 24) = 0;
          *(_DWORD *)a2 = v96;
          sub_1C4D5EE64(v127, v106, (uint64_t)v128, a2, a6, v8, &v130);
          v122 = v111;
          goto LABEL_120;
        case 6u:
          v78 = 0;
          v79 = 0;
          v80 = (char *)(v26 + 1);
          break;
        case 7u:
          v64 = 0;
          v65 = 0;
          v66 = 0;
          v67 = v26 + 1;
          do
          {
            v68 = v67[v64];
            v69 = (unint64_t)(v68 & 0x7F) << v66;
            if (v66 > 0x3F)
              v69 = 0;
            v65 += v69;
            v66 += 7;
            ++v64;
          }
          while (v68 < 0);
          v70 = 0;
          v71 = 0;
          v72 = 0;
          v73 = &v67[v64];
          v74 = (uint64_t)&v26[v64 + 1];
          do
          {
            v75 = *(_BYTE *)(v74 + v70);
            v76 = (unint64_t)(v75 & 0x7F) << v72;
            if (v72 > 0x3F)
              v76 = 0;
            v71 += v76;
            v72 += 7;
            ++v70;
          }
          while (v75 < 0);
          v26 = &v73[v70];
          v41 = (v65 & v13 | v71 & ~v13) == 0;
          v77 = v127;
          if (!v41)
            v77 = 1;
          v127 = v77;
          continue;
        case 8u:
          goto LABEL_122;
        default:
          v101 = (llvm::raw_ostream *)llvm::errs((llvm *)result);
          v102 = v101;
          if (v26 - v126 < 0)
          {
            v103 = v126 - v26;
            v104 = 1;
          }
          else
          {
            v103 = v26 - v126;
            v104 = 0;
          }
          result = (uint64_t)sub_1C5E21910(v101, v103, 0, 0, v104);
          v105 = (void *)*((_QWORD *)v102 + 4);
          v9 = v119;
          if (*((_QWORD *)v102 + 3) - (_QWORD)v105 > 0x21uLL)
          {
            qmemcpy(v105, ": Unexpected decode table opcode!\n", 34);
            *((_QWORD *)v102 + 4) += 34;
          }
          else
          {
            result = (uint64_t)llvm::raw_ostream::write(v102, ": Unexpected decode table opcode!\n", 0x22uLL);
          }
          v8 = v123;
          goto LABEL_122;
      }
      while (1)
      {
        v81 = *v80;
        v82 = *v80 & 0x7F;
        if (v79 >= 0x40 && (*v80 & 0x7F) != 0)
          break;
        if ((unint64_t)(v82 << v79) >> v79 != v82)
          break;
        v78 += v82 << v79;
        v79 += 7;
        ++v80;
        if ((v81 & 0x80) == 0)
          goto LABEL_74;
      }
      LODWORD(v78) = 0;
LABEL_74:
      v83 = 0;
      v84 = 0;
      v85 = (uint64_t)&v26[(_DWORD)v80 - ((_DWORD)v26 + 1) + 1];
      v86 = (char *)v85;
      while (1)
      {
        v87 = *v86;
        v88 = *v86 & 0x7F;
        if (v84 >= 0x40 && (*v86 & 0x7F) != 0)
          break;
        if ((unint64_t)(v88 << v84) >> v84 != v88)
          break;
        v83 += v88 << v84;
        v84 += 7;
        ++v86;
        if ((v87 & 0x80) == 0)
          goto LABEL_81;
      }
      LODWORD(v83) = 0;
LABEL_81:
      v89 = (unsigned __int8 *)(v85 + ((_DWORD)v86 - v85));
      v117 = *v89;
      v90 = v89[1];
      v26 = v89 + 3;
      v91 = v89[2];
      __src = v133;
      v132 = 0x800000000;
      v134 = 0;
      v130 = v78;
      v129 = 0;
      sub_1C4D5EE64(v127, v83, (uint64_t)v128, (uint64_t)&v130, a6, v123, &v129);
      v127 = v92;
      v118 = v129;
      if (!v129)
      {
        v26 += v117 | (v90 << 8) | (v91 << 16);
        v127 = 3;
        goto LABEL_92;
      }
      v93 = a2;
      *(_OWORD *)a2 = v130;
      if (&v130 != (__int128 *)a2)
        break;
LABEL_90:
      *(_BYTE *)(v93 + 160) = v134;
      v122 = v127;
LABEL_92:
      v8 = v123;
      result = (uint64_t)__src;
      v9 = v119;
      if (__src != v133)
        free(__src);
      if (v118)
      {
LABEL_120:
        result = v122;
        if (v122 == 1)
          return result;
        if (v122 == 3)
        {
          *a3 = (unint64_t)*((unsigned int *)v9 + 20) >> 3;
          return result;
        }
LABEL_122:
        v23 += 16;
        if (v23 == v124)
          goto LABEL_126;
        goto LABEL_19;
      }
    }
    v94 = v132;
    v95 = *(unsigned int *)(a2 + 24);
    if (v95 >= v132)
    {
      if ((_DWORD)v132)
        memmove(*v116, __src, 16 * v132);
      goto LABEL_89;
    }
    if (*(_DWORD *)(a2 + 28) < v132)
    {
      *(_DWORD *)(a2 + 24) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v116, v112, v94, 16);
    }
    else if ((_DWORD)v95)
    {
      memmove(*v116, __src, 16 * v95);
LABEL_87:
      if (v95 != v132)
        memcpy((char *)*v116 + 16 * v95, (char *)__src + 16 * v95, 16 * v132 - 16 * v95);
LABEL_89:
      v93 = a2;
      *(_DWORD *)(a2 + 24) = v94;
      goto LABEL_90;
    }
    v95 = 0;
    goto LABEL_87;
  }
  return 0;
}

_DWORD *sub_1C4D5ECEC(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = result;
  v4 = result[2];
  if (v4 >= result[3])
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v4 + 1, 16);
    LODWORD(v4) = v3[2];
  }
  v5 = (_QWORD *)(*(_QWORD *)v3 + 16 * v4);
  *v5 = a2;
  v5[1] = 0;
  ++v3[2];
  return result;
}

uint64_t sub_1C4D5ED4C(uint64_t a1, uint64_t a2, int a3)
{
  void *v5;
  unint64_t v7;
  unsigned int v8;

  v5 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x400000000;
  if (a1 != a2)
  {
    v7 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v7)
    {
      if (v7 < 5)
      {
        v8 = *(_DWORD *)(a2 + 8);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v7, 16);
        v8 = *(_DWORD *)(a2 + 8);
        if (!v8)
        {
LABEL_8:
          *(_DWORD *)(a1 + 8) = v7;
          goto LABEL_9;
        }
        v5 = *(void **)a1;
      }
      memcpy(v5, *(const void **)a2, 16 * v8);
      goto LABEL_8;
    }
  }
LABEL_9:
  *(_DWORD *)(a1 + 80) = a3;
  return a1;
}

unint64_t *sub_1C4D5EDE8(unint64_t *result, unint64_t a2, unint64_t a3, unsigned int a4, unsigned int a5)
{
  unint64_t v5;
  unint64_t v6;

  if (!a5)
  {
    v5 = 0;
LABEL_11:
    v6 = 0;
    if (!a4)
      goto LABEL_20;
    goto LABEL_12;
  }
  v5 = -1;
  if ((a5 & 0x3F) == 0)
    goto LABEL_11;
  v6 = 0xFFFFFFFFFFFFFFFFLL >> -(a5 & 0x3F);
  if (a5 >= 0x40)
    v5 = -1;
  else
    v5 = 0xFFFFFFFFFFFFFFFFLL >> -(a5 & 0x3F);
  if (a5 < 0x40)
    v6 = 0;
  if (a4)
  {
LABEL_12:
    if ((int)(a4 - 64) < 0)
    {
      if (a4 <= 0x3F)
        a3 = (a2 << -(char)a4) | (a3 >> a4);
      else
        a3 = a2 << -(char)a4;
      if (a4 <= 0x3F)
        a2 >>= a4;
      else
        a2 = 0;
    }
    else
    {
      a3 = a2 >> (a4 - 64);
      a2 = 0;
    }
  }
LABEL_20:
  *result = a2 & v6;
  result[1] = a3 & v5;
  return result;
}

void sub_1C4D5EE64(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  char *v7;

  v7 = (char *)&unk_1C85ABBC0 + dword_1C85ABC6C[dword_1C85909C8[a2]];
  *a7 = 1;
  __asm { BR              X9 }
}

void sub_1C4D5EF3C()
{
  unsigned __int16 *v0;
  unint64_t *v1;
  uint64_t v2;
  unsigned int v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned __int8 *v13;
  unsigned __int8 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unsigned int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned __int8 *v37;
  int v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;

  v2 = 0;
  v3 = 0;
  v4 = (unsigned __int8 *)&unk_1C85CC3C0 + dword_1C85CE4B0[*v0];
  v7 = *v4;
  v5 = v4 + 1;
  v6 = v7;
  v8 = v5;
  while (1)
  {
    v9 = *v8;
    v10 = *v8 & 0x7F;
    if (v3 >= 0x40 && (*v8 & 0x7F) != 0)
      break;
    if ((unint64_t)(v10 << v3) >> v3 != v10)
      break;
    v2 += v10 << v3;
    v3 += 7;
    ++v8;
    if ((v9 & 0x80) == 0)
      goto LABEL_8;
  }
  LODWORD(v2) = 0;
LABEL_8:
  v11 = 0;
  v12 = 0;
  v13 = &v5[(_DWORD)v8 - (_DWORD)v5];
  while (1)
  {
    v14 = *v13;
    v15 = *v13 & 0x7F;
    if (v12 >= 0x40 && (*v13 & 0x7F) != 0)
      break;
    if ((unint64_t)(v15 << v12) >> v12 != v15)
      break;
    v11 += v15 << v12;
    v12 += 7;
    ++v13;
    if ((v14 & 0x80) == 0)
      goto LABEL_15;
  }
  LODWORD(v11) = 0;
LABEL_15:
  v16 = v11 | ((unint64_t)v2 << 32);
  v17 = 0;
  v18 = v6 - 2;
  if (v6 == 2)
    goto LABEL_53;
  v19 = &v5[(_DWORD)v13 - (_DWORD)v5];
  v20 = *v1;
  v21 = v1[1];
LABEL_17:
  v22 = 0;
  v23 = 0;
  v24 = v19;
  v25 = 0;
  while (v24)
  {
    v26 = *v24;
    v27 = *v24 & 0x7F;
    if (v23 >= 0x40 && (*v24 & 0x7F) != 0 || (unint64_t)(v27 << v23) >> v23 != v27)
    {
      LODWORD(v25) = 0;
LABEL_26:
      v28 = 0;
      v29 = 0;
      v30 = &v19[(_DWORD)v24 - (_DWORD)v19];
      v31 = v30;
      while (v31)
      {
        v32 = *v31;
        v33 = *v31 & 0x7F;
        if (v29 >= 0x40 && (*v31 & 0x7F) != 0 || (unint64_t)(v33 << v29) >> v29 != v33)
        {
          LODWORD(v28) = 0;
LABEL_35:
          v34 = 0;
          v35 = 0;
          v36 = 0;
          v37 = &v30[(_DWORD)v31 - (_DWORD)v30];
          v38 = (int)v37;
          while (1)
          {
            if (!&v37[v34])
              goto LABEL_46;
            v39 = v37[v34];
            v40 = v39 & 0x7F;
            if (v36 >= 0x40 && (v39 & 0x7F) != 0)
              break;
            if ((unint64_t)(v40 << v36) >> v36 != v40)
            {
              v22 = v38;
              goto LABEL_46;
            }
            v35 += v40 << v36;
            v36 += 7;
            ++v38;
            ++v34;
            if ((v39 & 0x80) == 0)
            {
              v19 = &v37[v34];
              sub_1C4D5EDE8(&v43, v20, v21, v25, v28);
              if ((_DWORD)v35)
              {
                if ((int)v35 - 64 < 0)
                {
                  v42 = v44 >> -(char)v35;
                  if (v35 <= 0x3F)
                  {
                    v42 |= v43 << v35;
                    v41 = v44 << v35;
                  }
                  else
                  {
                    v41 = 0;
                  }
                }
                else
                {
                  v41 = 0;
                  v42 = v44 << (v35 - 64);
                }
LABEL_48:
                v17 |= v42;
                v16 |= v41;
                v18 -= 3;
                if (!v18)
LABEL_53:
                  JUMPOUT(0x1C4D5EF28);
                goto LABEL_17;
              }
LABEL_47:
              v42 = v43;
              v41 = v44;
              goto LABEL_48;
            }
          }
          v22 = (_DWORD)v37 + v34;
LABEL_46:
          v19 = &v37[v22 - (_DWORD)v37];
          sub_1C4D5EDE8(&v43, v20, v21, v25, v28);
          goto LABEL_47;
        }
        v28 += v33 << v29;
        v29 += 7;
        ++v31;
        if ((v32 & 0x80) == 0)
          goto LABEL_35;
      }
      LODWORD(v28) = 0;
      LODWORD(v31) = 0;
      goto LABEL_35;
    }
    v25 += v27 << v23;
    v23 += 7;
    ++v24;
    if ((v26 & 0x80) == 0)
      goto LABEL_26;
  }
  LODWORD(v25) = 0;
  LODWORD(v24) = 0;
  goto LABEL_26;
}

void sub_1C4D5F260(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(unsigned int *)*a1;
  *a1 += 4;
  __asm { BR              X10 }
}

uint64_t sub_1C4D5F2A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  return sub_1C4D61478((uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t))sub_1C4D61410, v5, a3, v6, a5, v7);
}

void sub_1C4D5F340()
{
  unsigned __int16 *v0;
  uint64_t v1;
  uint64_t v2;

  sub_1C4D61BAC(v0, v1, v2, 16);
}

uint64_t sub_1C4D5FD40()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v3 = ((v1 >> 11) & 7) - 1;
  if (v3 > 6 || ((0x67u >> v3) & 1) == 0)
    JUMPOUT(0x1C4D60560);
  return sub_1C4D60A84(v0, qword_1C85CEFD0[v3] | v1 & 0x7FF, v2);
}

void sub_1C4D5FD68()
{
  unsigned __int16 *v0;
  uint64_t v1;
  uint64_t v2;

  sub_1C4D61A0C(v0, v1, v2, 32);
}

uint64_t sub_1C4D5FD90()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  return sub_1C4D61804(v0, v1, v2, 64);
}

void sub_1C4D5FDE8()
{
  uint64_t v0;
  unsigned __int8 v1;
  uint64_t v2;

  if (sub_1C4D615B8(v0, 0x2Du, 0, 0x75u, 2u, v1, v2))
  {
    if (*(_DWORD *)(v0 + 24) < *(_DWORD *)(v0 + 28))
      JUMPOUT(0x1C4D60548);
    JUMPOUT(0x1C4D6071CLL);
  }
  JUMPOUT(0x1C4D60560);
}

void sub_1C4D5FE18()
{
  unint64_t v0;
  unint64_t v1;

  v1 = ((v0 >> 11) & 7) - 1;
  if (v1 <= 6 && ((0x67u >> v1) & 1) != 0)
    JUMPOUT(0x1C4D6014CLL);
  JUMPOUT(0x1C4D60560);
}

uint64_t sub_1C4D5FE3C()
{
  unsigned __int16 *v0;
  unsigned int v1;

  v1 = sub_1C4B138B4(*v0);
  return ((uint64_t (*)(uint64_t))((char *)sub_1C4D5FE84
                                          + 4
                                          * word_1C850F64A[(*(_QWORD *)(*((_QWORD *)v0 + 2) + 16 * v1 + 8) >> 6) & 0xF]))(3);
}

void sub_1C4D5FE84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;

  v4 = sub_1C484358C(*(_QWORD *)(v1 + 8) + 192, 24, 3);
  *(_BYTE *)v4 = 1;
  *(_DWORD *)(v4 + 1) = *(unsigned __int8 *)(v4 + 4) << 24;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = v3;
  v5 = sub_1C484358C(*(_QWORD *)(v1 + 8) + 192, 40, 3);
  *(_DWORD *)(v5 + 9) = *(unsigned __int8 *)(v5 + 12) << 24;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)v5 = &unk_1E8054FE0;
  *(_DWORD *)(v5 + 24) = 5;
  *(_QWORD *)(v5 + 32) = v4;
  *(_BYTE *)(v5 + 8) = 4;
  v6 = v5 + 8;
  v7 = *(unsigned int *)(v0 + 24);
  if (v7 >= *(_DWORD *)(v0 + 28))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v2, v0 + 32, v7 + 1, 16);
    LODWORD(v7) = *(_DWORD *)(v0 + 24);
  }
  v8 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 16 * v7);
  *v8 = 5;
  v8[1] = v6;
  v9 = *(_DWORD *)(v0 + 24) + 1;
  *(_DWORD *)(v0 + 24) = v9;
  if (v9 >= *(_DWORD *)(v0 + 28))
    llvm::SmallVectorBase<unsigned int>::grow_pod(v2, v0 + 32, v9 + 1, 16);
  JUMPOUT(0x1C4D60548);
}

void sub_1C4D5FF2C()
{
  JUMPOUT(0x1C4D5FF48);
}

uint64_t sub_1C4D5FF60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  return sub_1C4D61360((uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t))sub_1C4D61410, v5, a3, v6, a5, v7);
}

uint64_t sub_1C4D60178()
{
  char v0;

  return ((uint64_t (*)(void))((char *)sub_1C4D60194 + 4 * byte_1C850F666[v0 & 0xF]))();
}

void sub_1C4D60194(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int v4;

  if (a1 == 12)
    v4 = 37;
  else
    v4 = 35;
  if (sub_1C4D618E4(v1, v3, v2, v4))
    JUMPOUT(0x1C4D6052CLL);
  JUMPOUT(0x1C4D60560);
}

void sub_1C4D601A4(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int v4;

  if (a1)
    v4 = 22;
  else
    v4 = 2;
  if (sub_1C4D618E4(v1, v3, v2, v4))
  {
    if (*(_DWORD *)(v1 + 24) >= *(_DWORD *)(v1 + 28))
      JUMPOUT(0x1C4D60728);
    JUMPOUT(0x1C4D60468);
  }
  JUMPOUT(0x1C4D60560);
}

void sub_1C4D601B0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a1)
    v4 = 27;
  else
    v4 = 6;
  if (sub_1C4D618E4(v1, v3, v2, v4))
  {
    if (*(_DWORD *)(v1 + 24) >= *(_DWORD *)(v1 + 28))
      JUMPOUT(0x1C4D60728);
    JUMPOUT(0x1C4D60468);
  }
  JUMPOUT(0x1C4D60560);
}

void sub_1C4D601C0()
{
  JUMPOUT(0x1C4D604B8);
}

void sub_1C4D601CC(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a1)
    v4 = 15;
  else
    v4 = 4;
  if (sub_1C4D618E4(v1, v3, v2, v4))
  {
    if (*(_DWORD *)(v1 + 24) >= *(_DWORD *)(v1 + 28))
      JUMPOUT(0x1C4D60728);
    JUMPOUT(0x1C4D60468);
  }
  JUMPOUT(0x1C4D60560);
}

void sub_1C4D601DC()
{
  JUMPOUT(0x1C4D60514);
}

void sub_1C4D60474()
{
  JUMPOUT(0x1C4D6047CLL);
}

void sub_1C4D60484()
{
  JUMPOUT(0x1C4D6048CLL);
}

void sub_1C4D60494()
{
  JUMPOUT(0x1C4D604B8);
}

void sub_1C4D604A0()
{
  JUMPOUT(0x1C4D604B8);
}

void sub_1C4D604A8()
{
  JUMPOUT(0x1C4D604B4);
}

void sub_1C4D604F0(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a1 == 12)
    v4 = 22;
  else
    v4 = 17;
  if (sub_1C4D618E4(v1, v3, v2, v4))
    JUMPOUT(0x1C4D6052CLL);
  JUMPOUT(0x1C4D60560);
}

void sub_1C4D60500(int a1@<W8>)
{
  int v1;

  if ((v1 & 0x40000) == 0)
    JUMPOUT(0x1C4D60510);
  sub_1C4D60194(a1);
}

uint64_t sub_1C4D60974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4D615B8(a1, 6u, 0, 0x80u, 2u, *(_QWORD *)(a2 + 8), a4);
}

uint64_t sub_1C4D60990(int a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  HIDWORD(v3) = a1;
  LODWORD(v3) = a1 - 8;
  switch((v3 >> 3))
  {
    case 0u:
      if (a3 > 0xFF)
        goto LABEL_13;
      LODWORD(a3) = (char)a3;
      goto LABEL_10;
    case 1u:
      if (a3 >> 16)
        goto LABEL_13;
      LODWORD(a3) = (__int16)a3;
      goto LABEL_10;
    case 2u:
      if (a3 >> 24)
        goto LABEL_13;
      LODWORD(a3) = (int)((_DWORD)a3 << 8) >> 8;
LABEL_10:
      v6 = (int)a3;
      v7 = *(unsigned int *)(a2 + 24);
      if (v7 >= *(_DWORD *)(a2 + 28))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, a2 + 32, v7 + 1, 16);
        LODWORD(v7) = *(_DWORD *)(a2 + 24);
      }
      v8 = (_QWORD *)(*(_QWORD *)(a2 + 16) + 16 * v7);
      *v8 = 2;
      v8[1] = v6;
      ++*(_DWORD *)(a2 + 24);
      result = 3;
      break;
    case 3u:
      if (!HIDWORD(a3))
        goto LABEL_10;
LABEL_13:
      result = 0;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_1C4D60A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4D615B8(a1, 0, 0, 0x100u, 1u, *(_QWORD *)(a2 + 8), a4);
}

uint64_t sub_1C4D60A84(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  result = 0;
  v6 = a2;
  v7 = a2;
  switch((a2 >> 11) & 0xF)
  {
    case 0uLL:
      v13 = (_DWORD *)(a1 + 24);
      v12 = *(unsigned int *)(a1 + 24);
      if (v12 >= *(_DWORD *)(a1 + 28))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, a1 + 32, v12 + 1, 16);
        LODWORD(v12) = *(_DWORD *)(a1 + 24);
      }
      v14 = (uint64_t *)(*(_QWORD *)(a1 + 16) + 16 * v12);
      v15 = 2;
      goto LABEL_18;
    case 1uLL:
    case 2uLL:
    case 3uLL:
      v8 = a1;
      v9 = 0;
      v10 = 256;
      v11 = 1;
      goto LABEL_4;
    case 4uLL:
      v16 = sub_1C484358C(*(_QWORD *)(a3 + 8) + 192, 24, 3);
      *(_BYTE *)v16 = 1;
      *(_DWORD *)(v16 + 1) = *(unsigned __int8 *)(v16 + 4) << 24;
      *(_QWORD *)(v16 + 8) = 0;
      *(_QWORD *)(v16 + 16) = v7;
      v17 = sub_1C484358C(*(_QWORD *)(a3 + 8) + 192, 40, 3);
      v18 = v17;
      *(_DWORD *)(v17 + 9) = *(unsigned __int8 *)(v17 + 12) << 24;
      *(_QWORD *)(v17 + 16) = 0;
      *(_QWORD *)v17 = &unk_1E8054FE0;
      *(_DWORD *)(v17 + 24) = 5;
      goto LABEL_12;
    case 5uLL:
      v19 = a2 | 0x100;
      v20 = sub_1C484358C(*(_QWORD *)(a3 + 8) + 192, 24, 3);
      *(_BYTE *)v20 = 1;
      *(_DWORD *)(v20 + 1) = *(unsigned __int8 *)(v20 + 4) << 24;
      *(_QWORD *)(v20 + 8) = 0;
      *(_QWORD *)(v20 + 16) = v19;
      v21 = sub_1C484358C(*(_QWORD *)(a3 + 8) + 192, 40, 3);
      *(_DWORD *)(v21 + 9) = *(unsigned __int8 *)(v21 + 12) << 24;
      *(_QWORD *)(v21 + 16) = 0;
      *(_QWORD *)v21 = &unk_1E8054FE0;
      *(_DWORD *)(v21 + 24) = 5;
      goto LABEL_14;
    case 6uLL:
      v16 = sub_1C484358C(*(_QWORD *)(a3 + 8) + 192, 24, 3);
      *(_BYTE *)v16 = 1;
      *(_DWORD *)(v16 + 1) = *(unsigned __int8 *)(v16 + 4) << 24;
      *(_QWORD *)(v16 + 8) = 0;
      *(_QWORD *)(v16 + 16) = v7;
      v17 = sub_1C484358C(*(_QWORD *)(a3 + 8) + 192, 40, 3);
      v18 = v17;
      *(_DWORD *)(v17 + 9) = *(unsigned __int8 *)(v17 + 12) << 24;
      *(_QWORD *)(v17 + 16) = 0;
      *(_QWORD *)v17 = &unk_1E8054FE0;
      *(_DWORD *)(v17 + 24) = 4;
LABEL_12:
      *(_QWORD *)(v17 + 32) = v16;
      goto LABEL_15;
    case 7uLL:
      v22 = a2 | 0x100;
      v20 = sub_1C484358C(*(_QWORD *)(a3 + 8) + 192, 24, 3);
      *(_BYTE *)v20 = 1;
      *(_DWORD *)(v20 + 1) = *(unsigned __int8 *)(v20 + 4) << 24;
      *(_QWORD *)(v20 + 8) = 0;
      *(_QWORD *)(v20 + 16) = v22;
      v21 = sub_1C484358C(*(_QWORD *)(a3 + 8) + 192, 40, 3);
      *(_DWORD *)(v21 + 9) = *(unsigned __int8 *)(v21 + 12) << 24;
      *(_QWORD *)(v21 + 16) = 0;
      *(_QWORD *)v21 = &unk_1E8054FE0;
      *(_DWORD *)(v21 + 24) = 4;
LABEL_14:
      *(_QWORD *)(v21 + 32) = v20;
      v18 = v21;
LABEL_15:
      *(_BYTE *)(v18 + 8) = 4;
      v7 = v18 + 8;
      v13 = (_DWORD *)(a1 + 24);
      v23 = *(unsigned int *)(a1 + 24);
      if (v23 >= *(_DWORD *)(a1 + 28))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, a1 + 32, v23 + 1, 16);
        LODWORD(v23) = *(_DWORD *)(a1 + 24);
      }
      v14 = (uint64_t *)(*(_QWORD *)(a1 + 16) + 16 * v23);
      v15 = 5;
LABEL_18:
      *v14 = v15;
      v14[1] = v7;
      ++*v13;
      goto LABEL_19;
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
      v8 = a1;
      v9 = 6;
      v10 = 128;
      v11 = 2;
LABEL_4:
      result = sub_1C4D615B8(v8, v9, 0, v10, v11, v7, a3);
      if (!(_DWORD)result)
        return result;
LABEL_19:
      v24 = (32 * ((v6 & 0x3800) == 4096)) | (16 * ((v6 & 0x3800) == 6144)) | (__rbit32(v6 >> 8) >> 29);
      v25 = *(unsigned int *)(a1 + 24);
      if (v25 >= *(_DWORD *)(a1 + 28))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, a1 + 32, v25 + 1, 16);
        LODWORD(v25) = *(_DWORD *)(a1 + 24);
      }
      v26 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 16 * v25);
      *v26 = 2;
      v26[1] = v24;
      ++*(_DWORD *)(a1 + 24);
      result = 3;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1C4D60E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4D615B8(a1, 0xFu, 0, 0xFDu, 1u, *(_QWORD *)(a2 + 8), a4);
}

uint64_t sub_1C4D60E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4D615B8(a1, 0x23u, 0, 0x7Du, 2u, *(_QWORD *)(a2 + 8), a4);
}

uint64_t sub_1C4D60E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4D615B8(a1, 4u, 0, 0xFFu, 1u, *(_QWORD *)(a2 + 8), a4);
}

uint64_t sub_1C4D60E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4D615B8(a1, 0xAu, 0, 0xFEu, 1u, *(_QWORD *)(a2 + 8), a4);
}

uint64_t sub_1C4D60E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4D615B8(a1, 0x11u, 0, 0x7Fu, 2u, *(_QWORD *)(a2 + 8), a4);
}

uint64_t sub_1C4D60EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4D615B8(a1, 0x1Bu, 0, 0x7Eu, 2u, *(_QWORD *)(a2 + 8), a4);
}

uint64_t sub_1C4D60EBC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int v25;
  _QWORD *v26;

  result = 0;
  v5 = (a2 >> 11) & 0xF;
  v8 = (a2 >> 15) & 7;
  v9 = a2;
  switch(v5)
  {
    case 0:
      v16 = (unint64_t)a2 << v8;
      goto LABEL_22;
    case 1:
    case 2:
    case 3:
      v10 = a1;
      v11 = 0;
      v12 = 256;
      v13 = 1;
      goto LABEL_6;
    case 4:
      v17 = sub_1C484358C(*(_QWORD *)(a3 + 8) + 192, 24, 3);
      *(_BYTE *)v17 = 1;
      *(_DWORD *)(v17 + 1) = *(unsigned __int8 *)(v17 + 4) << 24;
      *(_QWORD *)(v17 + 8) = 0;
      *(_QWORD *)(v17 + 16) = v9;
      v18 = sub_1C484358C(*(_QWORD *)(a3 + 8) + 192, 40, 3);
      *(_DWORD *)(v18 + 9) = *(unsigned __int8 *)(v18 + 12) << 24;
      *(_QWORD *)(v18 + 16) = 0;
      *(_QWORD *)v18 = &unk_1E8054FE0;
      *(_DWORD *)(v18 + 24) = 5;
      goto LABEL_15;
    case 5:
      v19 = a2 | 0x100;
      v20 = sub_1C484358C(*(_QWORD *)(a3 + 8) + 192, 24, 3);
      *(_BYTE *)v20 = 1;
      *(_DWORD *)(v20 + 1) = *(unsigned __int8 *)(v20 + 4) << 24;
      *(_QWORD *)(v20 + 8) = 0;
      *(_QWORD *)(v20 + 16) = v19;
      v18 = sub_1C484358C(*(_QWORD *)(a3 + 8) + 192, 40, 3);
      *(_DWORD *)(v18 + 9) = *(unsigned __int8 *)(v18 + 12) << 24;
      *(_QWORD *)(v18 + 16) = 0;
      *(_QWORD *)v18 = &unk_1E8054FE0;
      *(_DWORD *)(v18 + 24) = 5;
      goto LABEL_17;
    case 6:
      v17 = sub_1C484358C(*(_QWORD *)(a3 + 8) + 192, 24, 3);
      *(_BYTE *)v17 = 1;
      *(_DWORD *)(v17 + 1) = *(unsigned __int8 *)(v17 + 4) << 24;
      *(_QWORD *)(v17 + 8) = 0;
      *(_QWORD *)(v17 + 16) = v9;
      v18 = sub_1C484358C(*(_QWORD *)(a3 + 8) + 192, 40, 3);
      *(_DWORD *)(v18 + 9) = *(unsigned __int8 *)(v18 + 12) << 24;
      *(_QWORD *)(v18 + 16) = 0;
      *(_QWORD *)v18 = &unk_1E8054FE0;
      *(_DWORD *)(v18 + 24) = 4;
LABEL_15:
      *(_QWORD *)(v18 + 32) = v17;
      goto LABEL_18;
    case 7:
      v21 = a2 | 0x100;
      v20 = sub_1C484358C(*(_QWORD *)(a3 + 8) + 192, 24, 3);
      *(_BYTE *)v20 = 1;
      *(_DWORD *)(v20 + 1) = *(unsigned __int8 *)(v20 + 4) << 24;
      *(_QWORD *)(v20 + 8) = 0;
      *(_QWORD *)(v20 + 16) = v21;
      v18 = sub_1C484358C(*(_QWORD *)(a3 + 8) + 192, 40, 3);
      *(_DWORD *)(v18 + 9) = *(unsigned __int8 *)(v18 + 12) << 24;
      *(_QWORD *)(v18 + 16) = 0;
      *(_QWORD *)v18 = &unk_1E8054FE0;
      *(_DWORD *)(v18 + 24) = 4;
LABEL_17:
      *(_QWORD *)(v18 + 32) = v20;
LABEL_18:
      *(_BYTE *)(v18 + 8) = 4;
      v22 = v18 + 8;
      v23 = *(unsigned int *)(a1 + 24);
      if (v23 >= *(_DWORD *)(a1 + 28))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, a1 + 32, v23 + 1, 16);
        LODWORD(v23) = *(_DWORD *)(a1 + 24);
      }
      v15 = 0;
      v24 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 16 * v23);
      *v24 = 5;
      v24[1] = v22;
      ++*(_DWORD *)(a1 + 24);
      goto LABEL_21;
    case 9:
    case 10:
    case 11:
      v10 = a1;
      v11 = 6;
      v12 = 128;
      goto LABEL_5;
    case 13:
    case 14:
    case 15:
      v10 = a1;
      v11 = 17;
      v12 = 127;
LABEL_5:
      v13 = 2;
LABEL_6:
      result = sub_1C4D615B8(v10, v11, 0, v12, v13, v9, a3);
      if ((_DWORD)result)
      {
        v14 = v5 - 1;
        if ((unint64_t)(v5 - 1) <= 0xE && ((0x7707u >> v14) & 1) != 0)
        {
          v15 = qword_1C85CF040[v14];
LABEL_21:
          v16 = v15 | (a2 >> 7) & 8 | (v8 << 6);
LABEL_22:
          v25 = *(_DWORD *)(a1 + 24);
          if (v25 >= *(_DWORD *)(a1 + 28))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, a1 + 32, v25 + 1, 16);
            v25 = *(_DWORD *)(a1 + 24);
          }
          v26 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 16 * v25);
          *v26 = 2;
          v26[1] = v16;
          ++*(_DWORD *)(a1 + 24);
          result = 3;
        }
        else
        {
          result = 0;
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1C4D61234(uint64_t (*a1)(uint64_t, _QWORD *, uint64_t, uint64_t), uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = a3;
  result = a1(a2, v11, a4, a5);
  if ((_DWORD)result)
  {
    v8 = (a3 >> 4) & 0x10;
    v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, a2 + 32, v9 + 1, 16);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    v10 = (_QWORD *)(*(_QWORD *)(a2 + 16) + 16 * v9);
    *v10 = 2;
    v10[1] = v8;
    ++*(_DWORD *)(a2 + 24);
    return 3;
  }
  return result;
}

uint64_t sub_1C4D612D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v5 = *(_QWORD *)(a2 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(a4 + 16) + 196) & 0x20) != 0)
  {
    if ((v5 & 0x10) != 0)
      return 0;
    if ((v5 & 8) != 0)
      v5 = v5 & 0xFFFFFFFFFFFFFFE7 | 0x10;
  }
  v6 = *(unsigned int *)(a1 + 24);
  if (v6 >= *(_DWORD *)(a1 + 28))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, a1 + 32, v6 + 1, 16);
    LODWORD(v6) = *(_DWORD *)(a1 + 24);
  }
  v7 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 16 * v6);
  *v7 = 2;
  v7[1] = v5;
  ++*(_DWORD *)(a1 + 24);
  return 3;
}

uint64_t sub_1C4D61360(uint64_t (*a1)(uint64_t, _QWORD *, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[0] = a3;
  v15[1] = a4;
  result = a1(a2, v15, a5, a6);
  if ((_DWORD)result)
  {
    v9 = *(_DWORD *)(a2 + 24);
    if (v9
      && (v10 = (v9 - 1), v11 = *(_QWORD *)(a2 + 16), *(_BYTE *)(v11 + 16 * v10) == 2)
      && (v12 = *(_QWORD *)(v11 + 16 * v10 + 8),
          v13 = (uint8x8_t)vcnt_s8((int8x8_t)((v12 >> 11) & 0xF)),
          v13.i16[0] = vaddlv_u8(v13),
          v14 = v13.u32[0] + ((v12 >> 21) & 1),
          (unint64_t)(v14 - 1) <= 4)
      && v14 == *(_QWORD *)(a6 + 584))
    {
      return 3;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C4D61410(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(unsigned int *)(a1 + 24);
  if (v4 >= *(_DWORD *)(a1 + 28))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, a1 + 32, v4 + 1, 16);
    LODWORD(v4) = *(_DWORD *)(a1 + 24);
  }
  v5 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 16 * v4);
  *v5 = 2;
  v5[1] = v3;
  ++*(_DWORD *)(a1 + 24);
  return 3;
}

uint64_t sub_1C4D61478(uint64_t (*a1)(uint64_t, _QWORD *, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  int8x8_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint8x8_t v18;
  _QWORD v19[2];

  v19[0] = a3;
  v19[1] = a4;
  result = a1(a2, v19, a5, a6);
  if ((_DWORD)result)
  {
    v10 = *(_DWORD *)(a2 + 24);
    if (v10
      && (v11 = (v10 - 1), v12 = *(_QWORD *)(a2 + 16), *(_BYTE *)(v12 + 16 * v11) == 2))
    {
      v13 = *(_DWORD *)(v12 + 16 * v11 + 8);
      if ((v13 & 0xF) == 8)
      {
        v14 = 15;
      }
      else
      {
        v15 = v13 & 0xE;
        v14 = 7;
        if (v15 != 12)
        {
          v16 = v13 >> 4;
          if ((*(_QWORD *)(*(_QWORD *)(a6 + 16) + 192) & 0x10000000000) != 0 && v15 == 14)
            v14 = 7;
          else
            v14 = v16;
        }
      }
      v9.i32[0] = v14;
      v18 = (uint8x8_t)vcnt_s8(v9);
      v18.i16[0] = vaddlv_u8(v18);
      if (*(_QWORD *)(a6 + 584) == v18.u32[0])
        return 3;
      else
        return 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C4D6154C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(unsigned int *)(a1 + 24);
  if (v4 >= *(_DWORD *)(a1 + 28))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, a1 + 32, v4 + 1, 16);
    LODWORD(v4) = *(_DWORD *)(a1 + 24);
  }
  v5 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 16 * v4);
  *v5 = 2;
  v5[1] = v3 ^ 0x8000000000000000;
  ++*(_DWORD *)(a1 + 24);
  return 3;
}

uint64_t sub_1C4D615B8(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unint64_t a6, uint64_t a7)
{
  unint64_t v7;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v7 = a6 / a5;
  if (a6 % a5)
    return 0;
  if (v7 < a3 || v7 >= a4)
    return 0;
  v10 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a7 + 8) + 160) + 24) + 32 * a2)
                            + 2 * (v7 - a3));
  v11 = *(unsigned int *)(a1 + 24);
  if (v11 >= *(_DWORD *)(a1 + 28))
  {
    v13 = a1;
    v14 = v10;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, a1 + 32, v11 + 1, 16);
    a1 = v13;
    v10 = v14;
    LODWORD(v11) = *(_DWORD *)(v13 + 24);
  }
  v12 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 16 * v11);
  *v12 = 1;
  v12[1] = v10;
  ++*(_DWORD *)(a1 + 24);
  return 3;
}

uint64_t sub_1C4D61668(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  unsigned int v4;
  unint64_t v5;
  int v6;
  uint64_t v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  HIDWORD(v5) = a4;
  LODWORD(v5) = a4 - 16;
  v4 = v5 >> 4;
  v6 = (1 << (v5 >> 4)) & 0x22F;
  if (v4 > 9 || v6 == 0)
    return 0;
  v10 = (a2 >> 11) & 0xF;
  if (!v10)
  {
    if ((a2 & 0x100) == 0)
      goto LABEL_13;
LABEL_17:
    v11 = 256;
    goto LABEL_18;
  }
  if ((a2 & 0x100) != 0)
    return 0;
  if (a4 == 32)
  {
    if (v10 == 6)
      goto LABEL_13;
    if (v10 == 7)
      goto LABEL_17;
    return 0;
  }
  if (a4 != 16)
    return 0;
  if (v10 != 4)
  {
    if (v10 != 5)
      return 0;
    goto LABEL_17;
  }
LABEL_13:
  v11 = 0;
LABEL_18:
  if (v4 > 9 || ((0x22Fu >> v4) & 1) == 0)
    return 0;
  v13 = dword_1C85CF0B8[v4];
  v14 = v11 | a2;
  v15 = sub_1C484358C(*(_QWORD *)(a3 + 8) + 192, 24, 3);
  *(_BYTE *)v15 = 1;
  *(_DWORD *)(v15 + 1) = *(unsigned __int8 *)(v15 + 4) << 24;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = v14;
  v16 = sub_1C484358C(*(_QWORD *)(a3 + 8) + 192, 40, 3);
  *(_DWORD *)(v16 + 9) = *(unsigned __int8 *)(v16 + 12) << 24;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)v16 = &unk_1E8054FE0;
  *(_DWORD *)(v16 + 24) = v13;
  *(_QWORD *)(v16 + 32) = v15;
  *(_BYTE *)(v16 + 8) = 4;
  v17 = v16 + 8;
  v18 = *(unsigned int *)(a1 + 24);
  if (v18 >= *(_DWORD *)(a1 + 28))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, a1 + 32, v18 + 1, 16);
    LODWORD(v18) = *(_DWORD *)(a1 + 24);
  }
  v19 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 16 * v18);
  *v19 = 5;
  v19[1] = v17;
  ++*(_DWORD *)(a1 + 24);
  return 3;
}

uint64_t sub_1C4D61804(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v6 = a2;
  if (a4 == 64)
  {
    v7 = 17;
    v8 = 127;
LABEL_7:
    v9 = 2;
    goto LABEL_8;
  }
  if (a4 == 32)
  {
    v7 = 6;
    v8 = 128;
    goto LABEL_7;
  }
  if (a4 != 16)
    return 0;
  v7 = 0;
  v8 = 256;
  v9 = 1;
LABEL_8:
  result = sub_1C4D615B8(a1, v7, 0, v8, v9, v6, a3);
  if ((_DWORD)result)
  {
    v11 = (a2 >> 4) & 0x10;
    v12 = *(unsigned int *)(a1 + 24);
    if (v12 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, a1 + 32, v12 + 1, 16);
      LODWORD(v12) = *(_DWORD *)(a1 + 24);
    }
    v13 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 16 * v12);
    *v13 = 2;
    v13[1] = v11;
    ++*(_DWORD *)(a1 + 24);
    return 3;
  }
  return result;
}

uint64_t sub_1C4D618E4(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t result;
  unsigned int v10;

  switch(a4)
  {
    case 0:
      v6 = 0;
      v7 = 0;
      goto LABEL_4;
    case 1:
      v6 = 1;
      v7 = 1;
LABEL_4:
      v8 = 256;
      goto LABEL_16;
    case 2:
      v6 = 2;
      goto LABEL_9;
    case 4:
      v6 = 4;
      v7 = 0;
      v8 = 255;
      goto LABEL_16;
    case 6:
      v6 = 6;
LABEL_9:
      v7 = 0;
      v8 = 128;
      goto LABEL_27;
    case 10:
      v6 = 10;
      v7 = 0;
      v8 = 254;
      goto LABEL_16;
    case 12:
      v6 = 12;
      goto LABEL_14;
    case 15:
      v6 = 15;
      v7 = 0;
      v8 = 253;
      goto LABEL_16;
    case 17:
      v6 = 17;
LABEL_14:
      v7 = 0;
      v8 = 127;
      goto LABEL_27;
    case 20:
      v6 = 20;
      v7 = 0;
      v8 = 252;
LABEL_16:
      v10 = 1;
      goto LABEL_17;
    case 22:
      v6 = 22;
      goto LABEL_20;
    case 27:
      v6 = 27;
LABEL_20:
      v7 = 0;
      v8 = 126;
      goto LABEL_27;
    case 32:
      v6 = 32;
      goto LABEL_23;
    case 35:
      v6 = 35;
LABEL_23:
      v7 = 0;
      v8 = 125;
      goto LABEL_27;
    case 37:
      v6 = 37;
      v7 = 0;
      v8 = 124;
      goto LABEL_27;
    case 39:
      v6 = 39;
      v7 = 0;
      v8 = 123;
      goto LABEL_27;
    case 41:
      v6 = 41;
      v7 = 0;
      v8 = 122;
LABEL_27:
      v10 = 2;
LABEL_17:
      result = sub_1C4D615B8(a1, v6, v7, v8, v10, a2, a3);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void sub_1C4D61A0C(unsigned __int16 *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 16 * sub_1C4B138B4(*a1) + 8) & 0xFLL;
  if (a4 == 32)
    __asm { BR              X11 }
  __asm { BR              X11 }
}

uint64_t sub_1C4D61A9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  if (a1)
    v6 = 10;
  else
    v6 = 0;
  result = sub_1C4D618E4(v1, v5, v4, v6);
  if ((_DWORD)result)
  {
    v8 = (v3 >> 4) & 0x10;
    v9 = *(unsigned int *)(v1 + 24);
    if (v9 >= *(_DWORD *)(v1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v2, v1 + 32, v9 + 1, 16);
      LODWORD(v9) = *(_DWORD *)(v1 + 24);
    }
    v10 = (_QWORD *)(*(_QWORD *)(v1 + 16) + 16 * v9);
    *v10 = 2;
    v10[1] = v8;
    ++*(_DWORD *)(v1 + 24);
    return 3;
  }
  return result;
}

void sub_1C4D61AAC()
{
  JUMPOUT(0x1C4D61B34);
}

void sub_1C4D61ABC()
{
  JUMPOUT(0x1C4D61B34);
}

void sub_1C4D61ACC()
{
  JUMPOUT(0x1C4D61B34);
}

void sub_1C4D61AD8()
{
  JUMPOUT(0x1C4D61AE0);
}

void sub_1C4D61AE8()
{
  JUMPOUT(0x1C4D61B34);
}

void sub_1C4D61AF4()
{
  JUMPOUT(0x1C4D61AA4);
}

void sub_1C4D61B00()
{
  JUMPOUT(0x1C4D61B0CLL);
}

uint64_t sub_1C4D61B14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  if (a1)
    v6 = 0;
  else
    v6 = 0xFFFFFFFFLL;
  result = sub_1C4D618E4(v1, v5, v4, v6);
  if ((_DWORD)result)
  {
    v8 = (v3 >> 4) & 0x10;
    v9 = *(unsigned int *)(v1 + 24);
    if (v9 >= *(_DWORD *)(v1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v2, v1 + 32, v9 + 1, 16);
      LODWORD(v9) = *(_DWORD *)(v1 + 24);
    }
    v10 = (_QWORD *)(*(_QWORD *)(v1 + 16) + 16 * v9);
    *v10 = 2;
    v10[1] = v8;
    ++*(_DWORD *)(v1 + 24);
    return 3;
  }
  return result;
}

uint64_t sub_1C4D61B20@<X0>(unint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  result = sub_1C4D618E4(v1, v5, v4, a1 >> 17);
  if ((_DWORD)result)
  {
    v7 = (v3 >> 4) & 0x10;
    v8 = *(unsigned int *)(v1 + 24);
    if (v8 >= *(_DWORD *)(v1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v2, v1 + 32, v8 + 1, 16);
      LODWORD(v8) = *(_DWORD *)(v1 + 24);
    }
    v9 = (_QWORD *)(*(_QWORD *)(v1 + 16) + 16 * v8);
    *v9 = 2;
    v9[1] = v7;
    ++*(_DWORD *)(v1 + 24);
    return 3;
  }
  return result;
}

void sub_1C4D61B28()
{
  JUMPOUT(0x1C4D61B30);
}

void sub_1C4D61BAC(unsigned __int16 *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 16 * sub_1C4B138B4(*a1) + 8) & 0xFLL;
  if (a4 == 32)
    __asm { BR              X11 }
  __asm { BR              X10 }
}

uint64_t sub_1C4D61C44()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;

  if (v4)
    v5 = 12;
  else
    v5 = 10;
  result = sub_1C4D618E4(v0, v3, v2, v5);
  if ((_DWORD)result)
  {
    v7 = (v1 >> 4) & 0x10;
    v8 = *(_DWORD *)(v0 + 24);
    if (v8 >= *(_DWORD *)(v0 + 28))
      JUMPOUT(0x1C4D61D1CLL);
    v9 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 16 * v8);
    *v9 = 2;
    v9[1] = v7;
    ++*(_DWORD *)(v0 + 24);
    return 3;
  }
  return result;
}

uint64_t sub_1C4D61D04()
{
  uint64_t result;
  uint64_t v1;
  unsigned int v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1C4D618E4(v4, v7, v6, 32);
  if ((_DWORD)result)
  {
    v1 = (v5 >> 4) & 0x10;
    v2 = *(_DWORD *)(v4 + 24);
    if (v2 >= *(_DWORD *)(v4 + 28))
      JUMPOUT(0x1C4D61D1CLL);
    v3 = (_QWORD *)(*(_QWORD *)(v4 + 16) + 16 * v2);
    *v3 = 2;
    v3[1] = v1;
    ++*(_DWORD *)(v4 + 24);
    return 3;
  }
  return result;
}

uint64_t sub_1C4D61D0C()
{
  uint64_t result;
  uint64_t v1;
  unsigned int v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  if (v8)
    v9 = 2;
  else
    v9 = 0;
  result = sub_1C4D618E4(v4, v7, v6, v9);
  if ((_DWORD)result)
  {
    v1 = (v5 >> 4) & 0x10;
    v2 = *(_DWORD *)(v4 + 24);
    if (v2 >= *(_DWORD *)(v4 + 28))
      JUMPOUT(0x1C4D61D1CLL);
    v3 = (_QWORD *)(*(_QWORD *)(v4 + 16) + 16 * v2);
    *v3 = 2;
    v3[1] = v1;
    ++*(_DWORD *)(v4 + 24);
    return 3;
  }
  return result;
}

uint64_t sub_1C4D61D38(unsigned __int16 *a1, unint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v8 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 16 * sub_1C4B138B4(*a1) + 8);
  if ((~(_DWORD)v8 & 0x410) != 0)
    v9 = 6;
  else
    v9 = 12;
  if ((v8 & 0x10) == 0)
  {
    if ((v8 & 0x400) == 0)
      return 3;
    if (a4)
      v9 = 2;
    else
      v9 = 0;
  }
  result = sub_1C4D618E4((uint64_t)a1, a2, a3, v9);
  if (!(_DWORD)result)
    return result;
  v11 = (a2 >> 4) & 0x10;
  v12 = *((unsigned int *)a1 + 6);
  if (v12 >= *((_DWORD *)a1 + 7))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 8), (uint64_t)(a1 + 16), v12 + 1, 16);
    LODWORD(v12) = *((_DWORD *)a1 + 6);
  }
  v13 = (_QWORD *)(*((_QWORD *)a1 + 2) + 16 * v12);
  *v13 = 2;
  v13[1] = v11;
  ++*((_DWORD *)a1 + 6);
  return 3;
}

void LLVMInitializeAGX3Disassembler()
{
  qword_1EF8F68D8 = (uint64_t)sub_1C4D61E40;
  qword_1EF8F6940 = (uint64_t)sub_1C4D61EC0;
}

double sub_1C4D61E40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(void);
  uint64_t v6;
  _QWORD *v7;
  double result;

  v5 = *(uint64_t (**)(void))(a1 + 64);
  if (v5)
    v6 = v5();
  else
    v6 = 0;
  v7 = (_QWORD *)operator new();
  v7[2] = a2;
  v7[3] = 0;
  *v7 = &off_1E81325A0;
  v7[1] = a3;
  v7[4] = 0;
  v7[5] = v7 + 7;
  *(_QWORD *)&result = 0x600000000;
  v7[6] = 0x600000000;
  v7[74] = v6;
  return result;
}

_QWORD *sub_1C4D61EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  _QWORD *result;
  uint64_t v12;

  result = (_QWORD *)operator new();
  v12 = *a6;
  *a6 = 0;
  result[2] = v12;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  *result = &off_1E81325D0;
  result[1] = a5;
  return result;
}

uint64_t sub_1C4D61F30(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  unsigned int v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  *(_QWORD *)a1 = &off_1E81325A0;
  v2 = *(_QWORD *)(a1 + 592);
  *(_QWORD *)(a1 + 592) = 0;
  if (v2)
    MEMORY[0x1CAA32FC0](v2, 0x10F0C40CB53E019);
  v3 = *(char **)(a1 + 40);
  v4 = *(_DWORD *)(a1 + 48);
  if (v4)
  {
    v5 = 88 * v4;
    do
    {
      v6 = *(char **)&v3[v5 - 88];
      if (&v3[v5 - 72] != v6)
        free(v6);
      v5 -= 88;
    }
    while (v5);
    v3 = *(char **)(a1 + 40);
  }
  if (v3 != (char *)(a1 + 56))
    free(v3);
  *(_QWORD *)a1 = off_1E8184C30;
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

void sub_1C4D61FF8(uint64_t a1)
{
  sub_1C4D61F30(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4D6201C(_QWORD *a1, uint64_t a2, unint64_t *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  _BYTE *v7;
  unint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unsigned int v34;
  _BYTE *v35;
  char v36;
  int v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  _BYTE *v49;
  char v50;
  int v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  _BYTE *v60;
  char v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  _BYTE *v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  int v70;
  unsigned int v71;
  unint64_t v72;
  llvm::raw_ostream *v73;
  llvm::raw_ostream *v74;
  unint64_t v75;
  int v76;
  void *v77;
  uint64_t v78;
  unsigned int v79;
  char *v80;
  char v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  char *v86;
  char v87;
  char v88;
  uint64_t v89;
  __int128 *v90;
  void (**v91)(__int128 *);
  unint64_t v93;
  uint64_t v94;
  unint64_t *v97;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  _OWORD v104[8];
  char v105;
  uint64_t v106;
  uint64_t v107;

  v7 = (_BYTE *)a5;
  v9 = a3;
  v10 = a2;
  v11 = a1;
  v107 = *MEMORY[0x1E0C80C00];
  a1[4] = a7;
  v12 = a1[2];
  if ((*(_BYTE *)(v12 + 197) & 8) != 0)
  {
    v28 = &v102;
    v29 = a1[1];
    v18 = *(_QWORD *)(v29 + 160);
    v11 = (_QWORD *)a1[74];
    *(_QWORD *)&v102 = &off_1E8131718;
    *((_QWORD *)&v102 + 1) = v12;
    *((_QWORD *)&v103 + 1) = &v102;
    v22 = sub_1C4C0B384(&v102);
    v90 = (__int128 *)*((_QWORD *)&v103 + 1);
    if (*((__int128 **)&v103 + 1) == &v102)
    {
      v91 = (void (**)(__int128 *))(v102 + 32);
      v90 = &v102;
    }
    else
    {
LABEL_101:
      if (!v90)
      {
LABEL_93:
        v101 = 0;
        v106 = 0;
        v28[20] = 0u;
        v28[21] = 0u;
        v28[18] = 0u;
        v28[19] = 0u;
        v28[16] = 0u;
        v28[17] = 0u;
        v28[14] = 0u;
        v28[15] = 0u;
        v28[12] = 0u;
        v28[13] = 0u;
        v28[10] = 0u;
        v28[11] = 0u;
        v28[8] = 0u;
        v28[9] = 0u;
        memset(v104, 0, 96);
        v102 = 0u;
        v103 = 0u;
        if (sub_1C4C95358(v22, a4, (unint64_t)v7, v9, (int *)&v101 + 1, (uint64_t)&v102, &v101)
          && sub_1C4C0B04C(v22, v11, v18, v29, (int *)&v101 + 1, (uint64_t)&v102, v10, 1))
        {
          return 3;
        }
        v97 = v9;
LABEL_97:
        v93 = 0;
        v30 = 0;
        goto LABEL_98;
      }
      v91 = (void (**)(__int128 *))(*(_QWORD *)v90 + 40);
    }
    (*v91)(v90);
    goto LABEL_93;
  }
  *a3 = 2;
  v97 = a3;
  if (a5 < 2)
    goto LABEL_97;
  v13 = *((_DWORD *)a1 + 12);
  if (!v13)
    goto LABEL_97;
  v14 = a1[5];
  v94 = v14 + 88 * v13;
  while (1)
  {
    v15 = (unint64_t)*(unsigned int *)(v14 + 80) >> 3;
    if ((unint64_t)v7 < v15)
      v15 = (unint64_t)v7;
    v16 = v15 >= 8 ? 8 : v15;
    if (v16)
    {
      v17 = 0;
      v18 = 0;
      v19 = (unsigned __int8 *)a4;
      do
      {
        v20 = *v19++;
        v18 |= (unint64_t)v20 << v17;
        v17 += 8;
      }
      while (8 * v16 != v17);
      v21 = v16;
    }
    else
    {
      v18 = 0;
      v21 = 0;
    }
    if (v21 == (_DWORD)v15)
    {
      v22 = 0;
    }
    else
    {
      v22 = 0;
      v23 = v15 - v16;
      v24 = (unsigned __int8 *)(a4 + v16);
      v25 = 8 * v16 + 4294967232;
      do
      {
        v26 = *v24++;
        v22 |= (unint64_t)v26 << (v25 & 0xF8);
        v25 += 8;
        --v23;
      }
      while (v23);
    }
    v27 = *(unsigned int *)(v14 + 8);
    if ((_DWORD)v27)
      break;
LABEL_88:
    v93 = 0;
    v30 = 0;
    v14 += 88;
    if (v14 == v94)
      goto LABEL_98;
  }
  v28 = *(__int128 **)v14;
  v99 = *(_QWORD *)v14 + 16 * v27;
  v100 = v14;
LABEL_21:
  v11[73] = *((_QWORD *)v28 + 1) & 0x1FLL;
  if ((unint64_t)v7 < (unint64_t)*(unsigned int *)(v14 + 80) >> 3)
    goto LABEL_97;
  v9 = 0;
  v10 = 0;
  v29 = *(_QWORD *)v28;
  v30 = 3;
  v7 = *(_BYTE **)v28;
  while (2)
  {
    switch(*v7)
    {
      case 1:
        v70 = v7[1];
        v71 = v7[2];
        v7 += 3;
        a1 = sub_1C4D6268C((unint64_t *)&v102, v22, v18, v70, v71);
        v10 = *((_QWORD *)&v102 + 1);
        v9 = (unint64_t *)v102;
        continue;
      case 2:
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = v7 + 1;
        do
        {
          v36 = v35[v31];
          v37 = v36;
          v38 = v36 & 0x7F;
          v39 = __CFADD__(v32, v38 << v34);
          v40 = (v38 << v34) + v32;
          v41 = v38 << v34;
          if (v34 < 0x40)
          {
            v32 = v40;
            v41 = v39;
          }
          v33 = (unint64_t *)((char *)v33 + v41);
          v34 += 7;
          ++v31;
        }
        while (v37 < 0);
        v42 = (unsigned __int16 *)&v35[v31];
        v43 = *((unsigned __int8 *)v42 + 2);
        v44 = v32 == v10 && v33 == v9;
        goto LABEL_44;
      case 3:
        a1 = sub_1C4D6268C((unint64_t *)&v102, v22, v18, v7[1], v7[2]);
        v45 = 0;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        v49 = v7 + 3;
        do
        {
          v50 = v49[v45];
          v51 = v50;
          v52 = v50 & 0x7F;
          v53 = __CFADD__(v46, v52 << v48);
          v54 = (v52 << v48) + v46;
          v55 = v52 << v48;
          if (v48 < 0x40)
          {
            v46 = v54;
            v55 = v53;
          }
          v47 += v55;
          v48 += 7;
          ++v45;
        }
        while (v51 < 0);
        v42 = (unsigned __int16 *)&v49[v45];
        v43 = *((unsigned __int8 *)v42 + 2);
        v44 = v46 == *((_QWORD *)&v102 + 1) && v47 == (_QWORD)v102;
LABEL_44:
        v56 = *v42 | (unint64_t)(v43 << 16);
        if (v44)
          v56 = 0;
        v7 = (char *)v42 + v56 + 3;
        continue;
      case 4:
        LODWORD(v102) = 0;
        v90 = (__int128 *)sub_1C4D62708(v7 + 1, &v102, 0, 0);
        __break(1u);
        goto LABEL_101;
      case 5:
        v78 = 0;
        v79 = 0;
        v80 = v7 + 1;
        while (1)
        {
          v82 = *v80++;
          v81 = v82;
          v83 = v82 & 0x7F;
          if (v79 >= 0x40)
          {
            if ((_DWORD)v83)
              break;
          }
          if ((unint64_t)(v83 << v79) >> v79 != v83)
            break;
          v78 += v83 << v79;
          v79 += 7;
          if ((v81 & 0x80) == 0)
            goto LABEL_77;
        }
        LODWORD(v78) = 0;
LABEL_77:
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)a2 = v78;
        goto LABEL_82;
      case 6:
        v84 = 0;
        v85 = 0;
        v86 = v7 + 1;
        break;
      case 7:
        v57 = 0;
        v58 = 0;
        v59 = 0;
        v60 = v7 + 1;
        do
        {
          v61 = v60[v57];
          v62 = (unint64_t)(v61 & 0x7F) << v59;
          if (v59 > 0x3F)
            v62 = 0;
          v58 += v62;
          v59 += 7;
          ++v57;
        }
        while (v61 < 0);
        v63 = 0;
        v64 = 0;
        v65 = 0;
        v66 = &v60[v57];
        v67 = (uint64_t)&v7[v57 + 1];
        do
        {
          v68 = *(_BYTE *)(v67 + v63);
          v69 = (unint64_t)(v68 & 0x7F) << v65;
          if (v65 > 0x3F)
            v69 = 0;
          v64 += v69;
          v65 += 7;
          ++v63;
        }
        while (v68 < 0);
        v7 = &v66[v63];
        if (v58 & v18 | v64 & ~v18)
          v30 = 1;
        else
          v30 = v30;
        continue;
      case 8:
        goto LABEL_84;
      default:
        v72 = (unint64_t)&v7[-v29];
        v73 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
        v74 = v73;
        if ((v72 & 0x8000000000000000) != 0)
        {
          v75 = -(uint64_t)v72;
          v76 = 1;
        }
        else
        {
          v75 = v72;
          v76 = 0;
        }
        a1 = sub_1C5E21910(v73, v75, 0, 0, v76);
        v77 = (void *)*((_QWORD *)v74 + 4);
        if (*((_QWORD *)v74 + 3) - (_QWORD)v77 > 0x21uLL)
        {
          qmemcpy(v77, ": Unexpected decode table opcode!\n", 34);
          *((_QWORD *)v74 + 4) += 34;
        }
        else
        {
          a1 = llvm::raw_ostream::write(v74, ": Unexpected decode table opcode!\n", 0x22uLL);
        }
LABEL_84:
        ++v28;
        v7 = (_BYTE *)a5;
        v14 = v100;
        if (v28 == (__int128 *)v99)
          goto LABEL_88;
        goto LABEL_21;
    }
    break;
  }
  while (1)
  {
    v88 = *v86++;
    v87 = v88;
    v89 = v88 & 0x7F;
    if (v85 >= 0x40)
    {
      if ((_DWORD)v89)
        break;
    }
    if ((unint64_t)(v89 << v85) >> v85 != v89)
      break;
    v84 += v89 << v85;
    v85 += 7;
    if ((v87 & 0x80) == 0)
      goto LABEL_79;
  }
  LODWORD(v84) = 0;
LABEL_79:
  *(_QWORD *)&v103 = v104;
  *((_QWORD *)&v103 + 1) = 0x800000000;
  v105 = 0;
  v102 = v84;
  *(_OWORD *)a2 = v84;
  if (&v102 != (__int128 *)a2)
    *(_DWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 160) = 0;
LABEL_82:
  if ((_DWORD)v30 != 1)
  {
    v93 = (unint64_t)*(unsigned int *)(v100 + 80) >> 3;
LABEL_98:
    *v97 = v93;
  }
  return v30;
}

unint64_t *sub_1C4D6268C(unint64_t *result, unint64_t a2, unint64_t a3, int a4, unsigned int a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (!a5)
  {
    v5 = 0;
    goto LABEL_10;
  }
  v5 = -1;
  if ((a5 & 0x3F) == 0)
  {
LABEL_10:
    v6 = 0;
    goto LABEL_11;
  }
  v6 = 0xFFFFFFFFFFFFFFFFLL >> -(a5 & 0x3F);
  if (a5 >= 0x40)
    v5 = -1;
  else
    v5 = 0xFFFFFFFFFFFFFFFFLL >> -(a5 & 0x3F);
  if (a5 < 0x40)
    v6 = 0;
LABEL_11:
  v7 = a2 << -(char)a4;
  v8 = a2 >> a4;
  if (a4 > 0x3F)
    v8 = 0;
  else
    v7 |= a3 >> a4;
  if (a4 >= 64)
  {
    v7 = a2 >> a4;
    v8 = 0;
  }
  if (!a4)
  {
    v7 = a3;
    v8 = a2;
  }
  *result = v8 & v6;
  result[1] = v7 & v5;
  return result;
}

uint64_t sub_1C4D62708(char *a1, _DWORD *a2, char *a3, _QWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  char *v6;
  char v7;
  uint64_t v8;

  if (a4)
    *a4 = 0;
  v4 = 0;
  v5 = 0;
  v6 = a1;
  while (v6 != a3)
  {
    v7 = *v6;
    v8 = *v6 & 0x7F;
    if (v5 >= 0x40 && (*v6 & 0x7F) != 0 || (unint64_t)(v8 << v5) >> v5 != v8)
    {
      if (a4)
        *a4 = "uleb128 too big for uint64";
      v4 = 0;
LABEL_13:
      LODWORD(a3) = (_DWORD)v6;
      if (!a2)
        return v4;
LABEL_14:
      *a2 = (_DWORD)a3 - (_DWORD)a1;
      return v4;
    }
    v4 += v8 << v5;
    v5 += 7;
    ++v6;
    if ((v7 & 0x80) == 0)
      goto LABEL_13;
  }
  if (a4)
    *a4 = "malformed uleb128, extends past end";
  v4 = 0;
  if (a2)
    goto LABEL_14;
  return v4;
}

uint64_t sub_1C4D627A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v7;
  unint64_t **v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t Symbol;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  char *v28;
  unint64_t v29;
  _DWORD *v30;
  unint64_t *v31;
  uint64_t Relocation;
  unsigned int v33;
  char *AnyRelocationSection;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  _BOOL4 v44;
  _BOOL4 v45;
  unint64_t v46;
  unint64_t v47;
  _BOOL4 v48;
  _BOOL4 v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char v59;
  __int16 v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v7 = *(uint64_t **)(a1 + 40);
  if (!v7)
    return 0;
  v8 = (unint64_t **)v7[1];
  v9 = *v8;
  v10 = v8[1];
  if (*v8 == v10)
    return 0;
  v14 = *v7;
  v15 = a7 + a5;
  while ((*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)v9[1] + 296))(v9[1], *v9) != v15)
  {
    v9 += 2;
    if (v9 == v10)
    {
      v9 = v10;
      break;
    }
  }
  if (v9 == v8[1])
    return 0;
  v16 = (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)v9[1] + 304))(v9[1], *v9);
  (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v17 + 72))(&v57, v17, v16);
  v18 = v57;
  if ((v59 & 1) != 0)
  {
    v56 = v57;
    v57 = 0;
    sub_1C4D62BD4(&v56, &v54);
    if (v56)
      (*(void (**)(char *))(*(_QWORD *)v56 + 8))(v56);
    if ((v59 & 1) != 0)
    {
      v28 = v57;
      v57 = 0;
      if (v28)
        (*(void (**)(char *))(*(_QWORD *)v28 + 8))(v28);
    }
    v54 = 0;
    v55 = 0;
    v31 = v9;
    v29 = *v9;
    v30 = (_DWORD *)v31[1];
    Relocation = llvm::object::MachOObjectFile::getRelocation((uint64_t)v30, v29);
    if (v30[13] != 16777223 && (Relocation & 0x80000000) != 0)
      return 0;
    v33 = v30[2];
    if (v33 <= 0x13 && ((1 << v33) & 0xAAC00) != 0)
    {
      if ((Relocation & 0x1000000000) != 0)
        return 0;
    }
    else if (((HIDWORD(Relocation) >> 27) & 1) != 0)
    {
      return 0;
    }
    v57 = (char *)llvm::object::MachOObjectFile::getRelocation((uint64_t)v30, v29);
    AnyRelocationSection = (char *)llvm::object::MachOObjectFile::getAnyRelocationSection(v30, &v57);
    v36 = v35;
    v37 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v30 + 352))(v30);
    if (v36 != v38 || AnyRelocationSection != (char *)v37)
    {
      (*(void (**)(char **__return_ptr, uint64_t, char *))(*(_QWORD *)v36 + 136))(&v57, v36, AnyRelocationSection);
      if ((v59 & 1) != 0)
      {
        v50 = v57;
        v57 = 0;
        if (v50)
          (*(void (**)(char *))(*(_QWORD *)v50 + 8))(v50);
      }
      else
      {
        v54 = AnyRelocationSection;
        v55 = v36;
        v40 = *(_QWORD **)(v14 + 8);
        if (!v40)
LABEL_42:
          abort();
        while (1)
        {
          while (1)
          {
            v41 = bswap64((unint64_t)v54);
            v42 = bswap64(v40[4]);
            v43 = v41 >= v42;
            v44 = v41 > v42;
            v45 = !v43;
            if (v44 - v45 >= 0)
              break;
            v40 = (_QWORD *)*v40;
            if (!v40)
              goto LABEL_42;
          }
          v46 = bswap64(v40[4]);
          v47 = bswap64((unint64_t)v54);
          v43 = v46 >= v47;
          v48 = v46 > v47;
          v49 = !v43;
          if (v48 - v49 >= 0)
            break;
          v40 = (_QWORD *)v40[1];
          if (!v40)
            goto LABEL_42;
        }
        v51 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v36 + 144))(v36, AnyRelocationSection);
        v52 = (_QWORD *)v40[6];
        v53 = (_QWORD *)v40[7];
        if (v52 != v53)
        {
          while (*v52 != v51 + a4)
          {
            v52 += 6;
            if (v52 == v53)
              return 0;
          }
          v18 = (char *)v52[1];
          v19 = v52[2];
          goto LABEL_10;
        }
      }
    }
    return 0;
  }
  v19 = v58;
LABEL_10:
  v20 = *(_QWORD *)(a1 + 8);
  v60 = 261;
  v57 = v18;
  v58 = v19;
  Symbol = llvm::MCContext::getOrCreateSymbol(v20, (uint64_t)&v57);
  v22 = *(_QWORD *)(a1 + 8);
  v23 = sub_1C484358C(v22 + 192, 24, 3);
  v24 = *(unsigned __int8 *)(*(_QWORD *)(v22 + 152) + 18) << 16;
  *(_BYTE *)v23 = 2;
  *(_DWORD *)(v23 + 1) = v24 | (*(unsigned __int8 *)(v23 + 4) << 24);
  *(_QWORD *)(v23 + 8) = 0;
  *(_QWORD *)(v23 + 16) = Symbol;
  v25 = *(unsigned int *)(a2 + 24);
  if (v25 >= *(_DWORD *)(a2 + 28))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, a2 + 32, v25 + 1, 16);
    LODWORD(v25) = *(_DWORD *)(a2 + 24);
  }
  v26 = (_QWORD *)(*(_QWORD *)(a2 + 16) + 16 * v25);
  *v26 = 5;
  v26[1] = v23;
  ++*(_DWORD *)(a2 + 24);
  return 1;
}

_QWORD *sub_1C4D62B28(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E8184CC0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1C4D62B70(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E8184CC0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4D62BC8()
{
  return 0;
}

char **sub_1C4D62BD4@<X0>(char **result@<X0>, char **a2@<X8>)
{
  char *v3;
  char **v4;
  char **v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;

  v3 = *result;
  if (*result)
  {
    *result = 0;
    if ((*(unsigned int (**)(char *, void *))(*(_QWORD *)v3 + 48))(v3, &llvm::ErrorList::ID))
    {
      *a2 = 0;
      v4 = (char **)*((_QWORD *)v3 + 1);
      v5 = (char **)*((_QWORD *)v3 + 2);
      if (v4 != v5)
      {
        v6 = 0;
        do
        {
          v9 = v6;
          v7 = *v4;
          *v4 = 0;
          if ((*(unsigned int (**)(char *, void *))(*(_QWORD *)v7 + 48))(v7, &llvm::ErrorInfoBase::ID))
          {
            (*(void (**)(char *))(*(_QWORD *)v7 + 8))(v7);
            v7 = 0;
          }
          v8 = v7;
          sub_1C6174794(&v9, &v8, &v10);
          v6 = v10;
          *a2 = v10;
          v10 = 0;
          if (v8)
            (*(void (**)(char *))(*(_QWORD *)v8 + 8))(v8);
          if (v9)
            (*(void (**)(char *))(*(_QWORD *)v9 + 8))(v9);
          ++v4;
        }
        while (v4 != v5);
      }
      return (char **)(*(uint64_t (**)(char *))(*(_QWORD *)v3 + 8))(v3);
    }
    else
    {
      result = (char **)(*(uint64_t (**)(char *, void *))(*(_QWORD *)v3 + 48))(v3, &llvm::ErrorInfoBase::ID);
      if ((_DWORD)result)
      {
        *a2 = 0;
        return (char **)(*(uint64_t (**)(char *))(*(_QWORD *)v3 + 8))(v3);
      }
      else
      {
        *a2 = v3;
      }
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t *sub_1C4D62D3C(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  char *v42;
  _QWORD *v43;

  v5 = *a1;
  v6 = (unint64_t)a1[1];
  v7 = a2 - (_QWORD)*a1;
  v8 = v7 >> 3;
  v9 = (uint64_t *)((char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  v10 = (unint64_t)a1[2];
  if (v6 >= v10)
  {
    v25 = ((uint64_t)(v6 - (_QWORD)v5) >> 3) + 1;
    if (v25 >> 61)
      abort();
    v26 = v10 - (_QWORD)v5;
    if (v26 >> 2 > v25)
      v25 = v26 >> 2;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
      v27 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    v43 = a1 + 2;
    if (v27)
    {
      if (v27 >> 61)
        sub_1C4764EE4();
      v28 = (char *)operator new(8 * v27);
    }
    else
    {
      v28 = 0;
    }
    v39 = (uint64_t *)v28;
    v40 = (uint64_t *)&v28[8 * v8];
    v41 = v40;
    v42 = &v28[8 * v27];
    sub_1C61749C4((uint64_t)&v39, a3);
    v23 = v40;
    v29 = *a1;
    v30 = v40;
    if (v9 != *a1)
    {
      v31 = v9;
      v30 = v40;
      do
      {
        v32 = *--v31;
        *v31 = 0;
        *--v30 = v32;
      }
      while (v31 != v29);
    }
    v40 = v30;
    v33 = a1[1];
    v34 = v41;
    if (v9 != v33)
    {
      do
      {
        v35 = *v9;
        *v9++ = 0;
        *v34++ = v35;
      }
      while (v9 != v33);
      v30 = v40;
      v9 = a1[1];
    }
    v36 = *a1;
    *a1 = v30;
    a1[1] = v34;
    v37 = (char *)a1[2];
    a1[2] = (uint64_t *)v42;
    v41 = v9;
    v42 = v37;
    v39 = v36;
    v40 = v36;
    if (v9 != v36)
    {
      do
      {
        v41 = v9 - 1;
        v38 = *(v9 - 1);
        *(v9 - 1) = 0;
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
        v9 = v41;
      }
      while (v41 != v36);
      v9 = v39;
    }
    if (v9)
      operator delete(v9);
  }
  else
  {
    if (v9 == (uint64_t *)v6)
    {
      v16 = *a3;
      *a3 = 0;
      *v9 = v16;
      a1[1] = v9 + 1;
    }
    else
    {
      v11 = v9 + 1;
      v12 = (uint64_t *)(v6 - 8);
      if (v6 < 8)
      {
        v14 = a1[1];
      }
      else
      {
        v13 = (uint64_t *)(v6 - 8);
        v14 = a1[1];
        do
        {
          v15 = *v13;
          *v13++ = 0;
          *v14++ = v15;
        }
        while ((unint64_t)v13 < v6);
      }
      a1[1] = v14;
      if ((_QWORD *)v6 != v11)
      {
        v17 = 8 * ((uint64_t)(v6 - (_QWORD)v11) >> 3);
        v18 = (uint64_t)&v5[v8 - 1];
        do
        {
          v19 = *(_QWORD *)(v18 + v17);
          *(_QWORD *)(v18 + v17) = 0;
          v20 = *v12;
          *v12 = v19;
          if (v20)
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          --v12;
          v17 -= 8;
        }
        while (v17);
      }
      v21 = *a3;
      *a3 = 0;
      v22 = *v9;
      *v9 = v21;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    }
    return v9;
  }
  return v23;
}

char *sub_1C4D62F9C(char **a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = (a1[1] - *a1) >> 3;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    abort();
  v6 = a1[2] - *a1;
  if (v6 >> 2 > v3)
    v3 = v6 >> 2;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
    v7 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (v7)
  {
    if (v7 >> 61)
      sub_1C4764EE4();
    v8 = (char *)operator new(8 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[8 * v2];
  v10 = &v8[8 * v7];
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)v9 = v11;
  v12 = v9 + 8;
  v13 = *a1;
  v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v15 = *((_QWORD *)v14 - 1);
      v14 -= 8;
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v9 - 1) = v15;
      v9 -= 8;
    }
    while (v14 != v13);
    v14 = *a1;
    v16 = a1[1];
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
    while (v16 != v14)
    {
      v18 = *((_QWORD *)v16 - 1);
      v16 -= 8;
      v17 = v18;
      *(_QWORD *)v16 = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    }
  }
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_1C4D630A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  _BYTE *v10;
  unint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;

  v3 = *(unsigned int *)(a3 + 24);
  if ((int)v3 >= 1)
  {
    v5 = 0;
    v21 = a2;
    while (1)
    {
      v6 = *(_QWORD *)(a3 + 16);
      v7 = *(unsigned __int8 *)(v6 + 16 * v5);
      if (v7 == 2)
        break;
      if (v7 == 1)
      {
        v8 = *(unsigned int *)(v6 + 16 * v5 + 8);
LABEL_7:
        v9 = *(_QWORD **)a2;
        v10 = *(_BYTE **)(*(_QWORD *)a2 + 520);
        v11 = *(_QWORD *)(*(_QWORD *)a2 + 528);
        if ((unint64_t)v10 >= v11)
        {
          v13 = (_BYTE *)v9[64];
          v14 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3) + 1;
          if (v14 > 0xAAAAAAAAAAAAAAALL)
            abort();
          v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v13) >> 3);
          if (2 * v15 > v14)
            v14 = 2 * v15;
          if (v15 >= 0x555555555555555)
            v16 = 0xAAAAAAAAAAAAAAALL;
          else
            v16 = v14;
          if (v16)
          {
            if (v16 > 0xAAAAAAAAAAAAAAALL)
              sub_1C4764EE4();
            v17 = (char *)operator new(24 * v16);
          }
          else
          {
            v17 = 0;
          }
          v18 = &v17[8 * ((v10 - v13) >> 3)];
          *v18 = v7;
          *((_QWORD *)v18 + 1) = v8;
          *((_DWORD *)v18 + 4) = v5;
          v19 = v18;
          if (v10 != v13)
          {
            do
            {
              v20 = *(_OWORD *)(v10 - 24);
              *((_DWORD *)v19 - 2) = *((_DWORD *)v10 - 2);
              *(_OWORD *)(v19 - 24) = v20;
              v19 -= 24;
              v10 -= 24;
            }
            while (v10 != v13);
            v10 = (_BYTE *)v9[64];
          }
          v9[64] = v19;
          v12 = v18 + 24;
          v9[65] = v18 + 24;
          v9[66] = &v17[24 * v16];
          if (v10)
            operator delete(v10);
          a2 = v21;
        }
        else
        {
          *v10 = v7;
          *((_QWORD *)v10 + 1) = v8;
          v12 = v10 + 24;
          *((_DWORD *)v10 + 4) = v5;
        }
        v9[65] = v12;
      }
      if (++v5 == v3)
        return;
    }
    v8 = *(_QWORD *)(v6 + 16 * v5 + 8);
    goto LABEL_7;
  }
}

_BYTE *sub_1C4D63260(_BYTE *result)
{
  result[40] = byte_1EF8F7670;
  result[42] = byte_1EF8F7671;
  result[41] = byte_1EF8F7672;
  result[43] = byte_1EF8F7673;
  return result;
}

_BYTE *sub_1C4D632A4(_BYTE *result, int a2, char a3)
{
  if (a2 == 3)
  {
    result[43] = a3;
  }
  else if (a2 == 2)
  {
    result[41] = a3;
  }
  else
  {
    result[40] = a3;
  }
  return result;
}

void sub_1C4D632CC(_QWORD *a1, int a2, int *a3, _DWORD *a4, int a5, unsigned int a6)
{
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  int v34;

  v10 = (char *)a1[10];
  if (*a4 != a5)
  {
    v11 = (char *)a1[9];
    v14 = v10 - v11;
    v15 = (unint64_t)(v10 - v11) >> 4;
    *(_DWORD *)(a1[6] + 4 * a2) = v15;
    v16 = *a3 + 1;
    *a3 = v16;
    v17 = a1[11];
    if ((unint64_t)v10 < v17)
    {
      *(_DWORD *)v10 = a5;
      *((_DWORD *)v10 + 1) = 1;
      *((_DWORD *)v10 + 2) = v15;
      *((_DWORD *)v10 + 3) = v16;
LABEL_8:
      v20 = v10 + 16;
LABEL_32:
      a1[10] = v20;
      goto LABEL_33;
    }
    v21 = v14 >> 4;
    v22 = (v14 >> 4) + 1;
    if (!(v22 >> 60))
    {
      v23 = v17 - (_QWORD)v11;
      if (v23 >> 3 > v22)
        v22 = v23 >> 3;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
        v24 = 0xFFFFFFFFFFFFFFFLL;
      else
        v24 = v22;
      if (!(v24 >> 60))
      {
        v25 = (char *)operator new(16 * v24);
        v26 = &v25[16 * v21];
        *(_DWORD *)v26 = a5;
        *((_DWORD *)v26 + 1) = 1;
        v27 = &v25[16 * v24];
        *((_DWORD *)v26 + 2) = v15;
        *((_DWORD *)v26 + 3) = v16;
        v20 = v26 + 16;
        if (v10 != v11)
        {
          do
          {
            v28 = v26 - 16;
            *((_OWORD *)v26 - 1) = *((_OWORD *)v10 - 1);
            v10 -= 16;
            v26 -= 16;
          }
          while (v10 != v11);
LABEL_30:
          a1[9] = v28;
          a1[10] = v20;
          a1[11] = v27;
          if (v11)
            operator delete(v11);
          goto LABEL_32;
        }
LABEL_29:
        v28 = v26;
        goto LABEL_30;
      }
LABEL_35:
      sub_1C4764EE4();
    }
LABEL_34:
    abort();
  }
  v11 = (char *)a1[9];
  v12 = v10 - v11;
  v13 = (unint64_t)(v10 - v11) >> 4;
  if (*((_DWORD *)v10 - 3) >= a6)
  {
    *(_DWORD *)(a1[6] + 4 * a2) = v13;
    v18 = a1[11];
    if ((unint64_t)v10 < v18)
    {
      v19 = *a3;
      *(_DWORD *)v10 = a5;
      *((_DWORD *)v10 + 1) = 1;
      *((_DWORD *)v10 + 2) = v13;
      *((_DWORD *)v10 + 3) = v19;
      goto LABEL_8;
    }
    v29 = v12 >> 4;
    v30 = (v12 >> 4) + 1;
    if (!(v30 >> 60))
    {
      v31 = v18 - (_QWORD)v11;
      if (v31 >> 3 > v30)
        v30 = v31 >> 3;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
        v32 = 0xFFFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      if (!(v32 >> 60))
      {
        v33 = (char *)operator new(16 * v32);
        v34 = *a3;
        v26 = &v33[16 * v29];
        *(_DWORD *)v26 = a5;
        *((_DWORD *)v26 + 1) = 1;
        v27 = &v33[16 * v32];
        *((_DWORD *)v26 + 2) = v13;
        *((_DWORD *)v26 + 3) = v34;
        v20 = v26 + 16;
        if (v10 != v11)
        {
          do
          {
            v28 = v26 - 16;
            *((_OWORD *)v26 - 1) = *((_OWORD *)v10 - 1);
            v10 -= 16;
            v26 -= 16;
          }
          while (v10 != v11);
          goto LABEL_30;
        }
        goto LABEL_29;
      }
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  *(_DWORD *)(a1[6] + 4 * a2) = v13 - 1;
  ++*((_DWORD *)v10 - 3);
LABEL_33:
  *a4 = a5;
}

void sub_1C4D634F4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t *v41;
  char *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  void **v67;

  v10 = 0;
  v11 = 0;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  if (!byte_1ED7EECB8)
  {
    v12 = *(_QWORD *)(a1 + 8);
    v13 = operator new();
    sub_1C4D674B0(v13, v12, a2, a3, a4, a1);
    v10 = (char *)operator new(8uLL);
    *(_QWORD *)v10 = v13;
    v11 = v10 + 8;
    *(_QWORD *)(a5 + 8) = v10 + 8;
    *(_QWORD *)(a5 + 16) = v10 + 8;
    *(_QWORD *)a5 = v10;
  }
  if (*(_BYTE *)(a1 + 43))
  {
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 32);
    v16 = operator new();
    *(_QWORD *)sub_1C5FE2B70(v16, v14, v15, a2, a3, a4, 2u) = &unk_1E8132810;
    v17 = v11 - v10;
    v18 = (v11 - v10) >> 3;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61)
      goto LABEL_72;
    if (v17 >> 2 > v19)
      v19 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    if (v20)
    {
      if (v20 >> 61)
        goto LABEL_73;
      v21 = (char *)operator new(8 * v20);
    }
    else
    {
      v21 = 0;
    }
    v23 = (uint64_t *)&v21[8 * v18];
    v24 = &v21[8 * v20];
    *v23 = v16;
    v22 = v23 + 1;
    if (v11 == v10)
    {
      *(_QWORD *)a5 = v23;
      *(_QWORD *)(a5 + 8) = v22;
      *(_QWORD *)(a5 + 16) = v24;
    }
    else
    {
      do
      {
        v25 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *--v23 = v25;
        *(_QWORD *)v11 = 0;
      }
      while (v11 != v10);
      v10 = *(char **)a5;
      v26 = *(char **)(a5 + 8);
      *(_QWORD *)a5 = v23;
      *(_QWORD *)(a5 + 8) = v22;
      *(_QWORD *)(a5 + 16) = v24;
      while (v26 != v10)
      {
        v28 = *((_QWORD *)v26 - 1);
        v26 -= 8;
        v27 = v28;
        *(_QWORD *)v26 = 0;
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 80))(v27);
      }
    }
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a5 + 8) = v22;
  }
  else
  {
    v22 = (uint64_t *)v11;
  }
  if (*(_BYTE *)(a1 + 41))
  {
    v29 = *(_QWORD *)(a1 + 8);
    v30 = *(_QWORD *)(a1 + 32);
    v31 = operator new();
    v32 = (_QWORD *)sub_1C5FDEBF4(v31, v29, a2, v30, a3, a4);
    *v32 = &unk_1E8132748;
    v32[6055] = *(_QWORD *)(v30 + 24);
    v33 = *(_QWORD *)(a5 + 16);
    if ((unint64_t)v22 >= v33)
    {
      v35 = *(uint64_t **)a5;
      v36 = ((uint64_t)v22 - *(_QWORD *)a5) >> 3;
      v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 61)
        goto LABEL_72;
      v38 = v33 - (_QWORD)v35;
      if (v38 >> 2 > v37)
        v37 = v38 >> 2;
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
        v39 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v39 = v37;
      if (v39)
      {
        if (v39 >> 61)
          goto LABEL_73;
        v40 = (char *)operator new(8 * v39);
      }
      else
      {
        v40 = 0;
      }
      v41 = (uint64_t *)&v40[8 * v36];
      v42 = &v40[8 * v39];
      *v41 = v31;
      v34 = v41 + 1;
      if (v22 == v35)
      {
        *(_QWORD *)a5 = v41;
        *(_QWORD *)(a5 + 8) = v34;
        *(_QWORD *)(a5 + 16) = v42;
      }
      else
      {
        do
        {
          v43 = *--v22;
          *v22 = 0;
          *--v41 = v43;
        }
        while (v22 != v35);
        v22 = *(uint64_t **)a5;
        v44 = *(uint64_t **)(a5 + 8);
        *(_QWORD *)a5 = v41;
        *(_QWORD *)(a5 + 8) = v34;
        *(_QWORD *)(a5 + 16) = v42;
        while (v44 != v22)
        {
          v46 = *--v44;
          v45 = v46;
          *v44 = 0;
          if (v46)
            (*(void (**)(uint64_t))(*(_QWORD *)v45 + 80))(v45);
        }
      }
      if (v22)
        operator delete(v22);
    }
    else
    {
      *v22 = v31;
      v34 = v22 + 1;
    }
    *(_QWORD *)(a5 + 8) = v34;
    v22 = v34;
  }
  sub_1C5FE269C(*(_QWORD *)(a1 + 8), a2, *(_QWORD *)(a1 + 32), a3, a4, *(unsigned __int8 *)(a1 + 42), (uint64_t)&v65);
  sub_1C4D63E68((char **)a5, (uint64_t)v22, v65, v66, v66 - v65);
  if (*(_BYTE *)(a1 + 40))
  {
    v47 = *(_QWORD *)(a1 + 8);
    v48 = operator new();
    v49 = v48;
    *(_QWORD *)v48 = off_1E8132690;
    *(_QWORD *)(v48 + 8) = v47;
    *(_QWORD *)(v48 + 16) = a2;
    *(_QWORD *)(v48 + 24) = &unk_1E80BA430;
    *(_QWORD *)(v48 + 32) = a3;
    *(_QWORD *)(v48 + 40) = a4;
    *(_QWORD *)(v48 + 56) = 0;
    *(_QWORD *)(v48 + 64) = 0;
    *(_QWORD *)(v48 + 48) = 0;
    *(_DWORD *)(v48 + 80) = 0;
    *(_BYTE *)(v48 + 112) = 0;
    *(_QWORD *)(v48 + 120) = 0;
    *(_QWORD *)(v48 + 72) = &unk_1E81A7208;
    *(_QWORD *)(v48 + 136) = v48 + 48;
    *(_DWORD *)(v48 + 128) = 0;
    *(_QWORD *)(v48 + 96) = 0;
    *(_QWORD *)(v48 + 104) = 0;
    *(_QWORD *)(v48 + 88) = 0;
    v51 = *(char **)(a5 + 8);
    v50 = *(_QWORD *)(a5 + 16);
    if ((unint64_t)v51 < v50)
    {
      *(_QWORD *)v51 = v48;
      v52 = v51 + 8;
LABEL_70:
      *(_QWORD *)(a5 + 8) = v52;
      goto LABEL_71;
    }
    v53 = *(char **)a5;
    v54 = (uint64_t)&v51[-*(_QWORD *)a5] >> 3;
    v55 = v54 + 1;
    if (!((unint64_t)(v54 + 1) >> 61))
    {
      v56 = v50 - (_QWORD)v53;
      if (v56 >> 2 > v55)
        v55 = v56 >> 2;
      if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
        v57 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v57 = v55;
      if (!v57)
      {
        v58 = 0;
        goto LABEL_61;
      }
      if (!(v57 >> 61))
      {
        v58 = (char *)operator new(8 * v57);
LABEL_61:
        v59 = (uint64_t *)&v58[8 * v54];
        v60 = &v58[8 * v57];
        *v59 = v49;
        v52 = (char *)(v59 + 1);
        if (v51 == v53)
        {
          *(_QWORD *)a5 = v59;
          *(_QWORD *)(a5 + 8) = v52;
          *(_QWORD *)(a5 + 16) = v60;
        }
        else
        {
          do
          {
            v61 = *((_QWORD *)v51 - 1);
            v51 -= 8;
            *(_QWORD *)v51 = 0;
            *--v59 = v61;
          }
          while (v51 != v53);
          v51 = *(char **)a5;
          v62 = *(char **)(a5 + 8);
          *(_QWORD *)a5 = v59;
          *(_QWORD *)(a5 + 8) = v52;
          *(_QWORD *)(a5 + 16) = v60;
          while (v62 != v51)
          {
            v64 = *((_QWORD *)v62 - 1);
            v62 -= 8;
            v63 = v64;
            *(_QWORD *)v62 = 0;
            if (v64)
              (*(void (**)(uint64_t))(*(_QWORD *)v63 + 80))(v63);
          }
        }
        if (v51)
          operator delete(v51);
        goto LABEL_70;
      }
LABEL_73:
      sub_1C4764EE4();
    }
LABEL_72:
    abort();
  }
LABEL_71:
  v67 = (void **)&v65;
  sub_1C4D63DEC(&v67);
}

uint64_t sub_1C4D639D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v4 = *(_QWORD *)(a4 + 8);
  if (*(_DWORD *)(v4 + 536) != 8277)
    return 0;
  v5 = a2;
  v6 = *(_QWORD *)(v4 + 512);
  do
  {
    v7 = v6;
    v8 = *(_DWORD *)(v6 + 16);
    v6 += 24;
  }
  while (v8);
  if (!a3)
    return 0;
  v9 = *(_QWORD *)(v7 + 8);
  v10 = a2 + 16 * a3;
  while (1)
  {
    v11 = *(_QWORD *)(v5 + 8);
    v12 = *(_DWORD *)(v11 + 536);
    v13 = 1;
    do
    {
      v14 = sub_1C4B138B4((unsigned __int16)v12);
      if ((v13 & 1) == 0)
        break;
      v13 = 0;
    }
    while (v14 == -1);
    if (v14 != -1)
    {
      v15 = *(_QWORD *)(v11 + 512);
      do
      {
        v16 = v15;
        v17 = *(_DWORD *)(v15 + 16);
        v15 += 24;
      }
      while (v17 != v14);
      if (*(_QWORD *)(v16 + 8) == v9)
        break;
    }
    v5 += 16;
    if (v5 == v10)
      return 0;
  }
  return *(unsigned int *)(v11 + 548);
}

void LLVMInitializeAGX2TargetMCA()
{
  qword_1ED82C520 = (uint64_t)sub_1C4D63AD8;
  unk_1ED82C528 = sub_1C4D63BF0;
}

uint64_t sub_1C4D63AD8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v16;
  int v17;

  v8 = operator new();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  *(_QWORD *)v8 = &off_1E8132608;
  *(_QWORD *)(v8 + 8) = a1;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_QWORD *)(v8 + 32) = a4;
  *(_DWORD *)(v8 + 40) = 0;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  v9 = a2[1];
  if ((_DWORD)v9)
  {
    sub_1C4D63CD0((char **)(v8 + 48), a2[1]);
    a2 = *(uint64_t **)(v8 + 16);
    v9 = a2[1];
  }
  v16 = -1;
  v17 = 0;
  if (v9)
  {
    v10 = 0;
    v11 = *a2;
    v12 = 8 * v9;
    do
    {
      if ((*(_BYTE *)(**(_QWORD **)(v8 + 24) + 48 * *(unsigned int *)(*(_QWORD *)(v11 + 8 * v10) + 536) + 20) & 0x20) != 0)
      {
        v13 = 1;
        v14 = 16;
      }
      else
      {
        v13 = 2;
        v14 = 1;
      }
      sub_1C4D632CC((_QWORD *)v8, v10++, &v16, &v17, v13, v14);
      v12 -= 8;
    }
    while (v12);
  }
  return v8;
}

_QWORD *sub_1C4D63BF0(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = a1;
  result[2] = a2;
  *result = &off_1E8132660;
  return result;
}

void sub_1C4D63C3C()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4D63C58(_QWORD *a1)
{
  sub_1C4D63C84(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4D63C7C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 96) = a2;
  return result;
}

_QWORD *sub_1C4D63C84(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E8132608;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1C4D63CD0(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 2)
  {
    if (a2)
    {
      bzero(a1[1], 4 * a2);
      v5 += 4 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = v5 - *a1;
    v8 = a2 + (v7 >> 2);
    if (v8 >> 62)
      abort();
    v9 = v4 - v6;
    if (v9 >> 1 > v8)
      v8 = v9 >> 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
      v10 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 62)
        sub_1C4764EE4();
      v11 = (char *)operator new(4 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[4 * (v7 >> 2)];
    v13 = &v11[4 * v10];
    bzero(v12, 4 * a2);
    while (v5 != v6)
    {
      v14 = *((_DWORD *)v5 - 1);
      v5 -= 4;
      *((_DWORD *)v12 - 1) = v14;
      v12 -= 4;
    }
    *a1 = v12;
    a1[1] = &v11[4 * a2 + v7];
    a1[2] = v13;
    if (v6)
      operator delete(v6);
  }
}

void sub_1C4D63DEC(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 80))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *sub_1C4D63E68(char **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t *v9;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;

  v5 = *a1;
  v6 = a2 - (_QWORD)*a1;
  v7 = &(*a1)[v6 & 0xFFFFFFFFFFFFFFF8];
  if (a5 < 1)
    return v7;
  v9 = a3;
  v11 = v6 >> 3;
  v12 = (unint64_t)a1[1];
  v13 = a1[2];
  if (a5 <= (uint64_t)&v13[-v12] >> 3)
  {
    v18 = (uint64_t)(v12 - (_QWORD)v7) >> 3;
    if (v18 >= a5)
    {
      v19 = &a3[a5];
      v20 = a1[1];
    }
    else
    {
      v19 = &a3[v18];
      v20 = a1[1];
      if (v19 != a4)
      {
        v21 = v19;
        v22 = a1[1];
        do
        {
          v23 = *v21;
          *v21++ = 0;
          *(_QWORD *)v22 = v23;
          v22 += 8;
          v20 += 8;
        }
        while (v21 != a4);
      }
      a1[1] = v20;
      if ((uint64_t)(v12 - (_QWORD)v7) < 1)
        return v7;
    }
    v24 = &v7[8 * a5];
    v25 = (uint64_t *)&v20[-8 * a5];
    v26 = v20;
    if ((unint64_t)v25 < v12)
    {
      v26 = v20;
      do
      {
        v27 = *v25;
        *v25++ = 0;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    a1[1] = v26;
    if (v20 != v24)
    {
      v28 = (uint64_t *)(v20 - 8);
      v29 = 8 * ((v20 - v24) >> 3);
      v30 = (uint64_t)&v5[8 * v11 - 8];
      do
      {
        v31 = *(_QWORD *)(v30 + v29);
        *(_QWORD *)(v30 + v29) = 0;
        v32 = *v28;
        *v28 = v31;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 80))(v32);
        --v28;
        v29 -= 8;
      }
      while (v29);
    }
    if (v19 != v9)
    {
      v33 = (uint64_t *)v7;
      do
      {
        v34 = *v9;
        *v9 = 0;
        v35 = *v33;
        *v33 = v34;
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 80))(v35);
        ++v9;
        ++v33;
      }
      while (v9 != v19);
    }
    return v7;
  }
  v14 = a5 + ((uint64_t)(v12 - (_QWORD)v5) >> 3);
  if (v14 >> 61)
    abort();
  v15 = v13 - v5;
  if (v15 >> 2 > v14)
    v14 = v15 >> 2;
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
    v16 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v16 = v14;
  if (v16)
  {
    if (v16 >> 61)
      sub_1C4764EE4();
    v17 = (char *)operator new(8 * v16);
  }
  else
  {
    v17 = 0;
  }
  v36 = &v17[8 * v11];
  v37 = &v36[8 * a5];
  v38 = 8 * a5;
  v39 = v36;
  do
  {
    v40 = *v9;
    *v9++ = 0;
    *(_QWORD *)v39 = v40;
    v39 += 8;
    v38 -= 8;
  }
  while (v38);
  v41 = *a1;
  v42 = &v17[8 * v11];
  if (v7 != *a1)
  {
    v43 = v7;
    v42 = &v17[8 * v11];
    do
    {
      v44 = *((_QWORD *)v43 - 1);
      v43 -= 8;
      *(_QWORD *)v43 = 0;
      *((_QWORD *)v42 - 1) = v44;
      v42 -= 8;
    }
    while (v43 != v41);
  }
  v45 = a1[1];
  if (v7 != v45)
  {
    do
    {
      v46 = *(_QWORD *)v7;
      *(_QWORD *)v7 = 0;
      v7 += 8;
      *(_QWORD *)v37 = v46;
      v37 += 8;
    }
    while (v7 != v45);
    v7 = a1[1];
  }
  v47 = *a1;
  *a1 = v42;
  a1[1] = v37;
  a1[2] = &v17[8 * v16];
  while (v7 != v47)
  {
    v49 = *((_QWORD *)v7 - 1);
    v7 -= 8;
    v48 = v49;
    *(_QWORD *)v7 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 80))(v48);
  }
  if (v47)
    operator delete(v47);
  return v36;
}

uint64_t sub_1C4D640F4()
{
  uint64_t v0;

  qword_1ED7EEC18 = (uint64_t)"Custom View Options";
  unk_1ED7EEC20 = 19;
  qword_1ED7EEC28 = (uint64_t)"";
  unk_1ED7EEC30 = 0;
  llvm::cl::OptionCategory::registerCategory((llvm::cl::OptionCategory *)&qword_1ED7EEC18);
  v0 = sub_1C47AD050((uint64_t)qword_1ED7EEC38, 0, 0);
  byte_1ED7EECB8 = 0;
  qword_1ED7EECC0 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&word_1ED7EECC8 = 0;
  qword_1ED7EEC38[0] = (uint64_t)&unk_1E819E898;
  qword_1ED7EECD0 = (uint64_t)&off_1E819E9A0;
  qword_1ED7EECD8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7EECF0 = (uint64_t)&qword_1ED7EECD8;
  llvm::cl::Option::setArgStr(v0, "disable-agx2-clause-view", 0x18uLL);
  qword_1ED7EEC58 = (uint64_t)"Omit the ClauseView in mca's output for AGX2.";
  unk_1ED7EEC60 = 45;
  llvm::cl::Option::addCategory((llvm::cl::Option *)qword_1ED7EEC38, (llvm::cl::OptionCategory *)&qword_1ED7EEC18);
  byte_1ED7EECB8 = 0;
  word_1ED7EECC8 = 256;
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED7EEC38);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, qword_1ED7EEC38, &dword_1C475E000);
}

void sub_1C4D641EC(uint64_t a1, llvm::raw_ostream *a2)
{
  unint64_t v3;
  _OWORD *v5;
  char *v6;
  llvm::raw_ostream *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  _OWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  const char *v16;
  _DWORD *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  char v22;
  BOOL v23;
  uint64_t (**v24)(llvm::format_object_base *__hidden);
  const char *v25;
  const char *v26;
  unint64_t first_not_of;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  size_t v31;
  _BYTE *v32;
  llvm::raw_ostream *v33;
  _QWORD *v34;
  const char *v35;
  size_t v36;
  llvm::raw_ostream *v37;
  char *v38;
  uint64_t (**v39)(llvm::format_object_base *__hidden);
  const char *v40;
  uint64_t v41;
  void (**v42)(llvm::raw_ostream *__hidden);
  int v43;
  char *v44;
  uint64_t v45;
  _OWORD *v46;
  char v47;
  uint64_t v48;
  int v49;
  void **p_p;
  void *__p;
  size_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  _QWORD v56[18];

  v56[16] = *MEMORY[0x1E0C80C00];
  __p = 0;
  v52 = 0;
  v53 = 0;
  v43 = 0;
  v47 = 0;
  v48 = 0;
  v42 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  p_p = &__p;
  v49 = 0;
  v45 = 0;
  v46 = 0;
  v44 = 0;
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v37 = a2;
    v54 = v56;
    v55 = 0x1000000000;
    sub_1C4D667D4((uint64_t)&v54, v3);
    sub_1C4D6473C(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t)v54, v55);
    v5 = v46;
    if ((unint64_t)(v45 - (_QWORD)v46) > 0x18)
    {
      *v46 = *(_OWORD *)"\n\nAGX2 Instruction Info:\n";
      *(_OWORD *)((char *)v5 + 9) = *(_OWORD *)"struction Info:\n";
      v6 = (char *)v46 + 25;
      v46 = (_OWORD *)((char *)v46 + 25);
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v42, "\n\nAGX2 Instruction Info:\n", 0x19uLL);
      v6 = (char *)v46;
    }
    if ((unint64_t)(v45 - (_QWORD)v6) > 0x11)
    {
      *((_WORD *)v6 + 8) = 2661;
      *(_OWORD *)v6 = *(_OWORD *)"[1]: >=Quad Scope\n";
      v8 = (char *)v46 + 18;
      v46 = (_OWORD *)((char *)v46 + 18);
      v7 = (llvm::raw_ostream *)&v42;
      v9 = &v46;
    }
    else
    {
      v7 = llvm::raw_ostream::write((llvm::raw_ostream *)&v42, "[1]: >=Quad Scope\n", 0x12uLL);
      v9 = (_QWORD *)((char *)v7 + 32);
      v8 = (char *)*((_QWORD *)v7 + 4);
    }
    if (*((_QWORD *)v7 + 3) - (_QWORD)v8 > 0x11uLL)
    {
      *((_WORD *)v8 + 8) = 2661;
      *(_OWORD *)v8 = *(_OWORD *)"[2]: >=SIMD Scope\n";
      *v9 += 18;
    }
    else
    {
      v7 = llvm::raw_ostream::write(v7, "[2]: >=SIMD Scope\n", 0x12uLL);
    }
    v10 = *((_QWORD *)v7 + 4);
    if ((unint64_t)(*((_QWORD *)v7 + 3) - v10) > 0x11)
    {
      *(_WORD *)(v10 + 16) = 2661;
      *(_OWORD *)v10 = *(_OWORD *)"[3]: >=Instr Rate\n";
      *((_QWORD *)v7 + 4) += 18;
    }
    else
    {
      llvm::raw_ostream::write(v7, "[3]: >=Instr Rate\n", 0x12uLL);
    }
    v11 = v46;
    if ((unint64_t)(v45 - (_QWORD)v46) > 0x1A)
    {
      *v46 = *(_OWORD *)"\n[1] [2] [3] Instructions:\n";
      *(_OWORD *)((char *)v11 + 11) = *(_OWORD *)"] Instructions:\n";
      v46 = (_OWORD *)((char *)v46 + 27);
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v42, "\n[1] [2] [3] Instructions:\n", 0x1BuLL);
    }
    if ((_DWORD)v55)
    {
      v12 = (char *)v54;
      v38 = (char *)v54 + 8 * v55;
      v13 = *(_QWORD *)(a1 + 32);
      v14 = 168 * *(_QWORD *)(a1 + 40);
      while (1)
      {
        v15 = (char *)v46;
        if (!v14)
          break;
        if (*v12)
          v16 = " *  ";
        else
          v16 = "    ";
        if ((unint64_t)(v45 - (_QWORD)v46) >= 4)
        {
          *(_DWORD *)v46 = *(_DWORD *)v16;
          v17 = (_DWORD *)v46 + 1;
          v46 = (_OWORD *)((char *)v46 + 4);
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v42, v16, 4uLL);
          v17 = v46;
        }
        if (v12[1])
          v18 = " *  ";
        else
          v18 = "    ";
        if ((unint64_t)(v45 - (_QWORD)v17) > 3)
        {
          *v17 = *(_DWORD *)v18;
          v46 = (_OWORD *)((char *)v46 + 4);
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v42, v18, 4uLL);
        }
        v39 = &off_1E8132728;
        v19 = *((unsigned int *)v12 + 1);
        v40 = "%3d ";
        v41 = v19;
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v42, (uint64_t)&v39);
        MEMORY[0x1CAA32ABC](a1 + 48, "");
        (*(void (**)(_QWORD, uint64_t, _QWORD, const char *, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 16)
                                                                                               + 32))(*(_QWORD *)(a1 + 16), v13, 0, "", 0, *(_QWORD *)(a1 + 8), a1 + 72);
        v20 = *(const char **)(a1 + 104);
        v21 = *(const char **)(a1 + 88);
        if (v20 != v21)
        {
          *(_QWORD *)(a1 + 104) = v21;
          llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)(a1 + 72), v21, v20 - v21);
        }
        v22 = *(_BYTE *)(a1 + 71);
        v23 = v22 < 0;
        if (v22 >= 0)
          v24 = (uint64_t (**)(llvm::format_object_base *__hidden))(a1 + 48);
        else
          v24 = *(uint64_t (***)(llvm::format_object_base *__hidden))(a1 + 48);
        v25 = (const char *)(v22 & 0x7F);
        if (v23)
          v26 = *(const char **)(a1 + 56);
        else
          v26 = v25;
        v39 = v24;
        v40 = v26;
        first_not_of = llvm::StringRef::find_first_not_of(&v39, " \t\n\v\f\r", 6, 0);
        v28 = first_not_of;
        if (first_not_of >= (unint64_t)v26)
          v29 = (unint64_t)v26;
        else
          v29 = first_not_of;
        v30 = (char *)v24 + v29;
        v31 = (size_t)&v26[-v29];
        v32 = v46;
        if ((unint64_t)&v26[-v29] <= v45 - (uint64_t)v46)
        {
          if ((unint64_t)v26 > v28)
          {
            memcpy(v46, v30, v31);
            v32 = (char *)v46 + v31;
            v46 = (_OWORD *)((char *)v46 + v31);
          }
          v33 = (llvm::raw_ostream *)&v42;
          v34 = &v46;
        }
        else
        {
          v33 = llvm::raw_ostream::write((llvm::raw_ostream *)&v42, v30, v31);
          v34 = (_QWORD *)((char *)v33 + 32);
          v32 = (_BYTE *)*((_QWORD *)v33 + 4);
        }
        if ((unint64_t)v32 >= *((_QWORD *)v33 + 3))
        {
          llvm::raw_ostream::write(v33, 10);
        }
        else
        {
          *v34 = v32 + 1;
          *v32 = 10;
        }
        v13 += 168;
        v14 -= 168;
        v12 += 8;
        if (v12 == v38)
          goto LABEL_48;
      }
    }
    else
    {
LABEL_48:
      v15 = (char *)v46;
    }
    if (v15 != v44)
    {
      v46 = v44;
      llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v42, v44, v15 - v44);
    }
    if (v53 >= 0)
      v35 = (const char *)&__p;
    else
      v35 = (const char *)__p;
    if (v53 >= 0)
      v36 = HIBYTE(v53) & 0x7F;
    else
      v36 = v52;
    llvm::raw_ostream::write(v37, v35, v36);
    if (v54 != v56)
      free(v54);
    v42 = off_1E81A6E70;
    if (v49 == 1 && v44)
      MEMORY[0x1CAA32F9C](v44, 0x1000C8077774924);
  }
  if (SHIBYTE(v53) < 0)
    operator delete(__p);
}

uint64_t sub_1C4D6473C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  BOOL v12;
  char v13;

  if (a2 && a4)
  {
    v4 = a3;
    v5 = (unsigned int *)result;
    v6 = a3 + 8 * a4;
    v7 = 168 * a2 - 168;
    do
    {
      v8 = *v5;
      v9 = byte_1C69A4600[v8];
      v10 = (v9 >> 1) & 1;
      v11 = (v9 & 4) == 0;
      v12 = (v9 & 4) != 0 || (v9 & 3) != 0;
      if (v11)
        v13 = v10;
      else
        v13 = 1;
      *(_BYTE *)v4 = v12;
      *(_BYTE *)(v4 + 1) = v13;
      result = sub_1C4C05D94(v8);
      *(_DWORD *)(v4 + 4) = result;
      if (!v7)
        break;
      v5 += 42;
      v4 += 8;
      v7 -= 168;
    }
    while (v4 != v6);
  }
  return result;
}

void sub_1C4D647D8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  unsigned int v5;
  char *v6;
  char *v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  void *v18;
  void *v19;
  int v20;
  __int128 v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  _BYTE v25[128];
  void *v26[3];
  void *v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v30[3];
  __int16 v31;
  char v32;
  uint64_t v33[3];
  __int16 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v23 = v25;
    v24 = 0x1000000000;
    sub_1C4D667D4((uint64_t)&v23, v3);
    sub_1C4D6473C(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t)v23, v24);
    v21 = 0uLL;
    v22 = 0;
    if ((_DWORD)v24)
    {
      v5 = 0;
      v6 = (char *)v23;
      v7 = (char *)v23 + 8 * v24;
      do
      {
        sub_1C4D655B0((uint64_t *)v26, "QUADScope", 9uLL);
        v8 = *v6;
        LOWORD(v27) = 1;
        LOBYTE(v28) = v8;
        sub_1C4D655B0(v30, "SIMDScope", 9uLL);
        v9 = v6[1];
        v31 = 1;
        v32 = v9;
        sub_1C4D655B0(v33, "InstrRate", 9uLL);
        v10 = *((unsigned int *)v6 + 1);
        v34 = 3;
        v35 = v10;
        sub_1C6174C6C((uint64_t)&v18, (uint64_t)v26, 3);
        v11 = 168;
        do
        {
          llvm::json::Value::destroy((void **)&v25[v11 + 96]);
          sub_1C4765904((uint64_t *)&v25[v11 + 72], 0);
          v11 -= 56;
        }
        while (v11);
        sub_1C4D655B0((uint64_t *)v26, "Instruction", 0xBuLL);
        v17 = v5;
        sub_1C4D66870((uint64_t)&v18, (uint64_t)v26, &v17, (uint64_t)&v16);
        v13 = (void **)v26[0];
        v26[0] = 0;
        if (v13)
        {
          if (*((char *)v13 + 23) < 0)
            operator delete(*v13);
          MEMORY[0x1CAA32FC0](v13, 0x1012C40EC159624);
        }
        LOWORD(v26[0]) = 7;
        v26[1] = v18;
        v12.n128_u64[0] = (unint64_t)v19;
        v26[2] = v19;
        v18 = 0;
        v19 = 0;
        LODWORD(v27) = v20;
        v20 = 0;
        v14 = *((_QWORD *)&v21 + 1);
        if (*((_QWORD *)&v21 + 1) >= v22)
        {
          v15 = sub_1C4D6610C((unsigned __int16 **)&v21, (unsigned __int16 *)v26, v12);
        }
        else
        {
          llvm::json::Value::moveFrom(*((uint64_t *)&v21 + 1), (unsigned __int16 *)v26, v12);
          v15 = v14 + 32;
        }
        *((_QWORD *)&v21 + 1) = v15;
        llvm::json::Value::destroy(v26);
        sub_1C4D65F7C((uint64_t *)&v18);
        MEMORY[0x1CAA32FB4](v18, 8);
        v6 += 8;
        ++v5;
      }
      while (v6 != v7);
    }
    sub_1C4D655B0((uint64_t *)v26, "InstructionList", 0xFuLL);
    LOWORD(v27) = 8;
    v28 = v21;
    v29 = v22;
    v21 = 0uLL;
    v22 = 0;
    sub_1C6174C6C((uint64_t)&v18, (uint64_t)v26, 1);
    *(_WORD *)a2 = 7;
    *(_QWORD *)(a2 + 8) = v18;
    *(_QWORD *)(a2 + 16) = v19;
    v18 = 0;
    v19 = 0;
    *(_DWORD *)(a2 + 24) = v20;
    v20 = 0;
    sub_1C4D65F7C((uint64_t *)&v18);
    MEMORY[0x1CAA32FB4](v18, 8);
    llvm::json::Value::destroy(&v27);
    sub_1C4765904((uint64_t *)v26, 0);
    v26[0] = &v21;
    sub_1C4D66218((void ***)v26);
    if (v23 != v25)
      free(v23);
  }
  else
  {
    *(_WORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = 0;
  }
}

uint64_t sub_1C4D64B08(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v52;
  char *v53;
  char *v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BOOL4 v67;
  BOOL v68;
  unsigned int v69;
  _BOOL4 v70;
  BOOL v71;
  unsigned int v72;
  int v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  int v79;
  char *v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  void *v97;
  uint64_t v98;
  _QWORD v99[18];

  v99[16] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 40);
  v97 = v99;
  v98 = 0x1000000000;
  sub_1C4D667D4((uint64_t)&v97, v4);
  sub_1C4D6473C(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t)v97, v98);
  if ((_DWORD)v98)
  {
    v52 = 0;
    v6 = 0;
    v53 = 0;
    v54 = (char *)v97;
    v95 = (char *)v97 + 8 * v98;
    while (1)
    {
      v96 = v6;
      v55 = *v54;
      v56 = v54[1];
      v57 = *((_DWORD *)v54 + 1);
      *(_BYTE *)(a2 + 70) = 1;
      v59 = *(_QWORD *)(a2 + 40);
      v58 = *(_QWORD *)(a2 + 48);
      v60 = *(_QWORD *)(a2 + 32);
      if (v57 || *(_BYTE *)(a2 + 80) != 0)
        break;
      v67 = 0;
LABEL_93:
      if (v56)
        v68 = 0;
      else
        v68 = !v67;
      if (v68)
      {
        v70 = 0;
      }
      else
      {
        v69 = sub_1C4D6650C(a2, v56);
        sub_1C4D66288((uint64_t *)a2, 6, v69);
        v70 = *(_BYTE *)(a2 + 80) != 0;
      }
      if (v55)
        v71 = 0;
      else
        v71 = !v70;
      if (!v71)
      {
        v72 = sub_1C4D6650C(a2, v55);
        sub_1C4D66288((uint64_t *)a2, 4, v72);
      }
      v73 = sub_1C4D66580(a2, (unsigned __int16)v60 - (unsigned __int16)v58 + (unsigned __int16)v59);
      v74 = v73;
      if ((unint64_t)v53 >= v52)
      {
        v75 = (v53 - v96) >> 2;
        v76 = v75 + 1;
        if ((unint64_t)(v75 + 1) >> 62)
          abort();
        if ((uint64_t)(v52 - (_QWORD)v96) >> 1 > v76)
          v76 = (uint64_t)(v52 - (_QWORD)v96) >> 1;
        if (v52 - (unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL)
          v77 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v77 = v76;
        if (v77)
        {
          if (v77 >> 62)
            sub_1C4764EE4();
          v78 = (char *)operator new(4 * v77);
        }
        else
        {
          v78 = 0;
        }
        v6 = &v78[4 * v75];
        *(_DWORD *)v6 = v74;
        v5 = v6 + 4;
        while (v53 != v96)
        {
          v79 = *((_DWORD *)v53 - 1);
          v53 -= 4;
          *((_DWORD *)v6 - 1) = v79;
          v6 -= 4;
        }
        v80 = &v78[4 * v77];
        if (v96)
          operator delete(v96);
        v52 = (unint64_t)v80;
      }
      else
      {
        *(_DWORD *)v53 = v73;
        v5 = v53 + 4;
        v6 = v96;
      }
      v54 += 8;
      v53 = v5;
      if (v54 == v95)
        goto LABEL_3;
    }
    v94 = v52;
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v62 = ((_BYTE)v58 - ((_BYTE)v60 + (_BYTE)v59)) & 3;
    v63 = *(_QWORD *)(a2 + 56);
    if (v58 - v63 < v62)
    {
      sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v58 - ((_BYTE)v60 + (_BYTE)v59)) & 3);
      *(_QWORD *)(a2 + 48) -= v62;
    }
    else
    {
      v64 = v58 - v62;
      *(_QWORD *)(a2 + 48) = v58 - v62;
      if ((((_BYTE)v58 - ((_BYTE)v60 + (_BYTE)v59)) & 3) == 0)
      {
LABEL_89:
        v52 = v94;
        if ((unint64_t)(v64 - v63) <= 3)
        {
          sub_1C4D663A4((uint64_t *)a2, 4uLL);
          v64 = *(_QWORD *)(a2 + 48);
        }
        *(_DWORD *)(v64 - 4) = v57;
        v66 = v64 - 4;
        *(_QWORD *)(a2 + 48) = v66;
        sub_1C4D66288((uint64_t *)a2, 8, *(_DWORD *)(a2 + 32) - v66 + *(_DWORD *)(a2 + 40));
        v67 = *(_BYTE *)(a2 + 80) != 0;
        goto LABEL_93;
      }
    }
    v65 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v65++) = 0;
    while (v62 != v65);
    v64 = *(_QWORD *)(a2 + 48);
    v63 = *(_QWORD *)(a2 + 56);
    goto LABEL_89;
  }
  v5 = 0;
  v6 = 0;
LABEL_3:
  v7 = v5 - v6;
  if (v5 == v6)
    v8 = (char *)&unk_1C85CF0F0;
  else
    v8 = v6;
  *(_BYTE *)(a2 + 70) = 1;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v9 = *(_QWORD *)(a2 + 48);
  v10 = ((_BYTE)v9 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v9 - *(_QWORD *)(a2 + 56) < v10)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v9 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v10;
  }
  else
  {
    *(_QWORD *)(a2 + 48) = v9 - v10;
    if (!v10)
      goto LABEL_14;
  }
  v11 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v11++) = 0;
  while (v10 != v11);
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
LABEL_14:
  v12 = *(_QWORD *)(a2 + 48);
  v13 = ((_BYTE)v12 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v12 - *(_QWORD *)(a2 + 56) < v13)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v12 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v13;
  }
  else
  {
    *(_QWORD *)(a2 + 48) = v12 - v13;
    if (!v13)
      goto LABEL_18;
  }
  v14 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v14++) = 0;
  while (v13 != v14);
LABEL_18:
  if (v6 != v5)
  {
    v81 = v7 >> 2;
    do
    {
      --v81;
      v82 = *(_DWORD *)&v8[4 * v81];
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
      v83 = *(_QWORD *)(a2 + 32);
      v84 = *(_QWORD *)(a2 + 40);
      v85 = *(_QWORD *)(a2 + 48);
      v86 = ((int)v85 - ((int)v83 + (int)v84)) & 3;
      if (v85 - *(_QWORD *)(a2 + 56) < v86)
      {
        sub_1C4D663A4((uint64_t *)a2, ((int)v85 - ((int)v83 + (int)v84)) & 3);
        *(_QWORD *)(a2 + 48) -= v86;
      }
      else
      {
        v87 = v85 - v86;
        *(_QWORD *)(a2 + 48) = v87;
        if (!v86)
        {
          v88 = v83 + v84 - v87;
          goto LABEL_136;
        }
      }
      v89 = 0;
      do
        *(_BYTE *)(*(_QWORD *)(a2 + 48) + v89++) = 0;
      while (v86 != v89);
      v84 = *(_QWORD *)(a2 + 40);
      v87 = *(_QWORD *)(a2 + 48);
      v83 = *(_QWORD *)(a2 + 32);
      v88 = v83 - v87 + v84;
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
LABEL_136:
      v90 = ((_BYTE)v87 - ((_BYTE)v83 + (_BYTE)v84)) & 3;
      v91 = *(_QWORD *)(a2 + 56);
      if (v87 - v91 < v90)
      {
        sub_1C4D663A4((uint64_t *)a2, v90);
        *(_QWORD *)(a2 + 48) -= v90;
LABEL_138:
        v93 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a2 + 48) + v93++) = 0;
        while (v90 != v93);
        v92 = *(_QWORD *)(a2 + 48);
        v91 = *(_QWORD *)(a2 + 56);
        goto LABEL_141;
      }
      v92 = v87 - v90;
      *(_QWORD *)(a2 + 48) = v87 - v90;
      if (v90)
        goto LABEL_138;
LABEL_141:
      if ((unint64_t)(v92 - v91) <= 3)
      {
        sub_1C4D663A4((uint64_t *)a2, 4uLL);
        v92 = *(_QWORD *)(a2 + 48);
      }
      *(_DWORD *)(v92 - 4) = v88 - v82 + 4;
      *(_QWORD *)(a2 + 48) = v92 - 4;
    }
    while (v81);
  }
  *(_BYTE *)(a2 + 70) = 0;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v16 = *(_QWORD *)(a2 + 48);
  v15 = *(_QWORD *)(a2 + 56);
  v17 = ((_BYTE)v16 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v16 - v15 < v17)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v16 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v17;
  }
  else
  {
    v18 = v16 - v17;
    *(_QWORD *)(a2 + 48) = v16 - v17;
    if (!v17)
      goto LABEL_26;
  }
  v19 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v19++) = 0;
  while (v17 != v19);
  v18 = *(_QWORD *)(a2 + 48);
  v15 = *(_QWORD *)(a2 + 56);
LABEL_26:
  if ((unint64_t)(v18 - v15) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v18 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v18 - 4) = (unint64_t)v7 >> 2;
  v20 = v18 - 4;
  *(_QWORD *)(a2 + 48) = v20;
  v21 = *(_QWORD *)(a2 + 32);
  v22 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a2 + 70) = 1;
  v23 = v21 - v20 + v22;
  if (v23)
  {
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v24 = ((_BYTE)v20 - ((_BYTE)v21 + (_BYTE)v22)) & 3;
    if (v20 - *(_QWORD *)(a2 + 56) < v24)
    {
      sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v20 - ((_BYTE)v21 + (_BYTE)v22)) & 3);
      *(_QWORD *)(a2 + 48) -= v24;
    }
    else
    {
      v25 = v20 - v24;
      *(_QWORD *)(a2 + 48) = v25;
      if (!v24)
      {
LABEL_36:
        v27 = v22 - v25 + v21 - v23 + 4;
        if ((_DWORD)v22 - (_DWORD)v25 + (_DWORD)v21 - v23 == -4 && *(_BYTE *)(a2 + 80) == 0)
          goto LABEL_50;
        if (*(_QWORD *)(a2 + 72) <= 3uLL)
          *(_QWORD *)(a2 + 72) = 4;
        v29 = ((_BYTE)v25 - ((_BYTE)v21 + (_BYTE)v22)) & 3;
        v30 = *(_QWORD *)(a2 + 56);
        if (v25 - v30 < v29)
        {
          sub_1C4D663A4((uint64_t *)a2, v29);
          *(_QWORD *)(a2 + 48) -= v29;
        }
        else
        {
          v31 = v25 - v29;
          *(_QWORD *)(a2 + 48) = v25 - v29;
          if (!v29)
          {
LABEL_47:
            if ((unint64_t)(v31 - v30) <= 3)
            {
              sub_1C4D663A4((uint64_t *)a2, 4uLL);
              v31 = *(_QWORD *)(a2 + 48);
            }
            *(_DWORD *)(v31 - 4) = v27;
            v33 = v31 - 4;
            *(_QWORD *)(a2 + 48) = v33;
            sub_1C4D66288((uint64_t *)a2, 4, *(_DWORD *)(a2 + 32) - v33 + *(_DWORD *)(a2 + 40));
            goto LABEL_50;
          }
        }
        v32 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a2 + 48) + v32++) = 0;
        while (v29 != v32);
        v31 = *(_QWORD *)(a2 + 48);
        v30 = *(_QWORD *)(a2 + 56);
        goto LABEL_47;
      }
    }
    v26 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v26++) = 0;
    while (v24 != v26);
    v22 = *(_QWORD *)(a2 + 40);
    v25 = *(_QWORD *)(a2 + 48);
    v21 = *(_QWORD *)(a2 + 32);
    goto LABEL_36;
  }
LABEL_50:
  v34 = sub_1C4D66580(a2, v23);
  *(_BYTE *)(a2 + 70) = 1;
  v35 = *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40);
  v36 = sub_1C6174D80(a2, 4);
  sub_1C4D66288((uint64_t *)a2, 4, v36);
  if (!v34)
    goto LABEL_72;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v37 = *(_QWORD *)(a2 + 32);
  v38 = *(_QWORD *)(a2 + 40);
  v39 = *(_QWORD *)(a2 + 48);
  v40 = ((_BYTE)v39 - ((_BYTE)v37 + (_BYTE)v38)) & 3;
  if (v39 - *(_QWORD *)(a2 + 56) < v40)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v39 - ((_BYTE)v37 + (_BYTE)v38)) & 3);
    *(_QWORD *)(a2 + 48) -= v40;
LABEL_55:
    v42 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v42++) = 0;
    while (v40 != v42);
    v38 = *(_QWORD *)(a2 + 40);
    v41 = *(_QWORD *)(a2 + 48);
    v37 = *(_QWORD *)(a2 + 32);
    goto LABEL_58;
  }
  v41 = v39 - v40;
  *(_QWORD *)(a2 + 48) = v41;
  if (v40)
    goto LABEL_55;
LABEL_58:
  v43 = v38 - v41 + v37 - v34 + 4;
  if ((_DWORD)v38 - (_DWORD)v41 + (_DWORD)v37 - v34 == -4 && *(_BYTE *)(a2 + 80) == 0)
    goto LABEL_72;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v45 = ((_BYTE)v41 - ((_BYTE)v37 + (_BYTE)v38)) & 3;
  v46 = *(_QWORD *)(a2 + 56);
  if (v41 - v46 < v45)
  {
    sub_1C4D663A4((uint64_t *)a2, v45);
    *(_QWORD *)(a2 + 48) -= v45;
LABEL_66:
    v48 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v48++) = 0;
    while (v45 != v48);
    v47 = *(_QWORD *)(a2 + 48);
    v46 = *(_QWORD *)(a2 + 56);
    goto LABEL_69;
  }
  v47 = v41 - v45;
  *(_QWORD *)(a2 + 48) = v41 - v45;
  if (v45)
    goto LABEL_66;
LABEL_69:
  if ((unint64_t)(v47 - v46) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v47 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v47 - 4) = v43;
  v49 = v47 - 4;
  *(_QWORD *)(a2 + 48) = v49;
  sub_1C4D66288((uint64_t *)a2, 14, *(_DWORD *)(a2 + 32) - v49 + *(_DWORD *)(a2 + 40));
LABEL_72:
  v50 = sub_1C4D66580(a2, v35);
  if (v6)
    operator delete(v6);
  if (v97 != v99)
    free(v97);
  return v50 | 0x100000000;
}

uint64_t sub_1C4D65498(uint64_t a1)
{
  uint64_t v3;

  *(_QWORD *)a1 = off_1E8132690;
  *(_QWORD *)(a1 + 72) = off_1E81A6E70;
  if (*(_DWORD *)(a1 + 128) == 1)
  {
    v3 = *(_QWORD *)(a1 + 88);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8077774924);
  }
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  return a1;
}

void sub_1C4D65510(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E8132690;
  *(_QWORD *)(a1 + 72) = off_1E81A6E70;
  if (*(_DWORD *)(a1 + 128) == 1)
  {
    v2 = *(_QWORD *)(a1 + 88);
    if (v2)
      MEMORY[0x1CAA32F9C](v2, 0x1000C8077774924);
  }
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4D65598()
{
  return "AGX2InstructionInfoView";
}

uint64_t sub_1C4D655A8()
{
  return 1;
}

uint64_t *sub_1C4D655B0(uint64_t *a1, unsigned __int8 *a2, unint64_t a3)
{
  _OWORD *v6;
  uint64_t v8;
  unint64_t v9;
  void *__p[2];
  char v11;
  unint64_t v12;
  __int128 v13;

  *a1 = 0;
  a1[1] = (uint64_t)a2;
  v6 = a1 + 1;
  a1[2] = a3;
  if (!llvm::json::isUTF8(a2, a3, 0))
  {
    llvm::json::fixUTF8((unint64_t)a2, a3, (uint64_t)__p);
    sub_1C4D65688(&v12, (uint64_t)__p);
    v8 = v12;
    v12 = 0;
    sub_1C4765904(a1, v8);
    *v6 = v13;
    v9 = v12;
    v12 = 0;
    if (v9)
    {
      if (*(char *)(v9 + 23) < 0)
        operator delete(*(void **)v9);
      MEMORY[0x1CAA32FC0](v9, 0x1012C40EC159624);
    }
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

unint64_t *sub_1C4D65688(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  char v12;
  BOOL v13;
  _QWORD *v14;
  char v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;

  v4 = operator new();
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(v4 + 16) = v5;
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = v4;
  v6 = HIBYTE(v5);
  v7 = (v6 & 0x80u) != 0;
  v8 = *(_QWORD *)(v4 + 8);
  if ((v6 & 0x80u) != 0)
    v4 = *(_QWORD *)v4;
  v9 = v6 & 0x7F;
  if (v7)
    v10 = v8;
  else
    v10 = v9;
  if (!llvm::json::isUTF8((unsigned __int8 *)v4, v10, 0))
  {
    v16 = *(_BYTE *)(*a1 + 23);
    if (v16 >= 0)
      v17 = *a1;
    else
      v17 = *(_QWORD *)*a1;
    if (v16 >= 0)
      v18 = v16 & 0x7F;
    else
      v18 = *(_QWORD *)(*a1 + 8);
    llvm::json::fixUTF8(v17, v18, (uint64_t)&v21);
    v19 = (unint64_t *)*a1;
    if (*(char *)(*a1 + 23) < 0)
      operator delete((void *)*v19);
    v20 = v21;
    v19[2] = v22;
    *(_OWORD *)v19 = v20;
  }
  v11 = (unint64_t *)*a1;
  v12 = *(_BYTE *)(*a1 + 23);
  v13 = v12 < 0;
  if (v12 < 0)
    v11 = *(unint64_t **)*a1;
  v14 = (_QWORD *)(v12 & 0x7F);
  if (v13)
    v14 = *(_QWORD **)(*a1 + 8);
  a1[1] = (unint64_t)v11;
  a1[2] = (unint64_t)v14;
  return a1;
}

uint64_t *sub_1C4D65788(uint64_t a1)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  __int128 *v6;
  __int128 *v7[3];

  *(_QWORD *)(a1 + 8) = 0;
  result = sub_1C4D655B0((uint64_t *)v7, (unsigned __int8 *)0xFFFFFFFFFFFFFFFFLL, 0);
  v3 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = 56 * v3;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      result = sub_1C4D65828(v4, v7);
      v4 += 7;
      v5 -= 56;
    }
    while (v5);
  }
  v6 = v7[0];
  v7[0] = 0;
  if (v6)
  {
    if (*((char *)v6 + 23) < 0)
      operator delete(*(void **)v6);
    return (uint64_t *)MEMORY[0x1CAA32FC0](v6, 0x1012C40EC159624);
  }
  return result;
}

uint64_t *sub_1C4D65828(uint64_t *a1, __int128 **a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  char v9;
  BOOL v10;
  uint64_t v11;

  if (*a2)
  {
    v4 = operator new();
    v5 = v4;
    v6 = *a2;
    if (*((char *)*a2 + 23) < 0)
    {
      sub_1C47EBC30((_BYTE *)v4, *(void **)v6, *((_QWORD *)v6 + 1));
    }
    else
    {
      v7 = *v6;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v4 = v7;
    }
    sub_1C4765904(a1, v5);
    v8 = *a1;
    v9 = *(_BYTE *)(*a1 + 23);
    v10 = v9 < 0;
    if (v9 < 0)
      v8 = *(_QWORD *)*a1;
    v11 = v9 & 0x7F;
    if (v10)
      v11 = *(_QWORD *)(*a1 + 8);
    a1[1] = v8;
    a1[2] = v11;
  }
  else
  {
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  }
  return a1;
}

uint64_t sub_1C4D658E0(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  const void *v10;
  size_t v11;
  const void *v12;
  size_t v13;
  int v14;
  const void *v15;
  size_t v16;
  int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  const void *v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  const void *v27;
  int v28;
  int v29;
  BOOL v30;
  BOOL v31;
  char *v32;
  const void *v33;
  size_t v34;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  const void *v43;
  size_t v44;
  const void *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  const void *v49;
  uint64_t v50;
  const void *v51;
  size_t v52;
  size_t v53;
  const void *v54;
  const void *v55;
  uint64_t v56[3];
  uint64_t v57[3];

  v4 = *((unsigned int *)a1 + 4);
  if (!(_DWORD)v4)
  {
    *a3 = 0;
    return v4;
  }
  v6 = *a1;
  sub_1C4D655B0(v57, (unsigned __int8 *)0xFFFFFFFFFFFFFFFFLL, 0);
  sub_1C4D655B0(v56, (unsigned __int8 *)0xFFFFFFFFFFFFFFFELL, 0);
  v7 = sub_1C5E3DF4C(*(_QWORD **)(a2 + 8), *(_QWORD *)(a2 + 8) + *(_QWORD *)(a2 + 16));
  v8 = 0;
  v9 = v4 - 1;
  v10 = *(const void **)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = (const void *)v57[1];
  v13 = v57[2];
  v14 = 1;
  v15 = (const void *)v56[1];
  v16 = v56[2];
  while (1)
  {
    v17 = v7 & v9;
    v18 = v6 + 56 * (v7 & v9);
    v19 = *(char **)(v18 + 8);
    v20 = *(_QWORD *)(v18 + 16);
    if (v19 == (char *)-2)
    {
      if (v10 == (const void *)-2)
        goto LABEL_34;
    }
    else if (v19 == (char *)-1)
    {
      if (v10 == (const void *)-1)
        goto LABEL_34;
    }
    else if (v11 == v20)
    {
      if (!v11)
        goto LABEL_34;
      v21 = v10;
      v43 = v12;
      v52 = v16;
      v54 = v15;
      v46 = v9;
      v22 = v13;
      v49 = v10;
      v23 = v6;
      v24 = v8;
      v25 = v14;
      v26 = memcmp(v21, v19, v11);
      v16 = v52;
      v15 = v54;
      v14 = v25;
      v13 = v22;
      v9 = v46;
      v12 = v43;
      v8 = v24;
      v6 = v23;
      v10 = v49;
      if (!v26)
      {
LABEL_34:
        v4 = 1;
        goto LABEL_35;
      }
    }
    if (v12 != (const void *)-2)
      break;
    if (v19 == (char *)-2)
      goto LABEL_45;
LABEL_21:
    if (v15 == (const void *)-2)
    {
      v30 = v19 + 2 == 0;
    }
    else if (v15 == (const void *)-1)
    {
      v30 = v19 + 1 == 0;
    }
    else
    {
      v31 = v20 == v16;
      if (!v16 || v20 != v16)
        goto LABEL_31;
      v32 = v19;
      v45 = v12;
      v33 = v15;
      v48 = v9;
      v34 = v13;
      v35 = v16;
      v51 = v10;
      v36 = v6;
      v37 = v8;
      v38 = v14;
      v39 = memcmp(v32, v15, v16);
      v16 = v35;
      v15 = v33;
      v14 = v38;
      v13 = v34;
      v9 = v48;
      v12 = v45;
      v8 = v37;
      v6 = v36;
      v10 = v51;
      v30 = v39 == 0;
    }
    v31 = v30;
LABEL_31:
    if (v31 && v8 == 0)
      v8 = v18;
    v7 = v14 + v17;
    ++v14;
  }
  if (v12 == (const void *)-1)
  {
    if (v19 == (char *)-1)
      goto LABEL_45;
    goto LABEL_21;
  }
  if (v20 != v13)
    goto LABEL_21;
  if (v13)
  {
    v44 = v11;
    v47 = v6;
    v27 = v12;
    v53 = v16;
    v55 = v15;
    v50 = v8;
    v28 = v14;
    v29 = memcmp(v19, v12, v13);
    v16 = v53;
    v15 = v55;
    v14 = v28;
    v12 = v27;
    v11 = v44;
    v6 = v47;
    v8 = v50;
    if (v29)
      goto LABEL_21;
  }
LABEL_45:
  v4 = 0;
  if (v8)
    v18 = v8;
LABEL_35:
  *a3 = v18;
  v40 = v56[0];
  v56[0] = 0;
  if (v40)
  {
    if (*(char *)(v40 + 23) < 0)
      operator delete(*(void **)v40);
    MEMORY[0x1CAA32FC0](v40, 0x1012C40EC159624);
  }
  v41 = v57[0];
  v57[0] = 0;
  if (v41)
  {
    if (*(char *)(v41 + 23) < 0)
      operator delete(*(void **)v41);
    MEMORY[0x1CAA32FC0](v41, 0x1012C40EC159624);
  }
  return v4;
}

uint64_t sub_1C4D65BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  const void *v9;
  uint64_t v10;
  uint64_t v12;
  void *__s2;
  size_t __n;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4D65D00(a1, v7);
  v12 = 0;
  sub_1C4D658E0((uint64_t *)a1, a3, &v12);
  a4 = v12;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  sub_1C4D655B0(&v12, (unsigned __int8 *)0xFFFFFFFFFFFFFFFFLL, 0);
  v9 = *(const void **)(a4 + 8);
  if (__s2 == (void *)-2)
  {
    if (v9 != (const void *)-2)
      goto LABEL_12;
  }
  else
  {
    if (__s2 == (void *)-1)
    {
      if (v9 == (const void *)-1)
        goto LABEL_13;
LABEL_12:
      --*(_DWORD *)(a1 + 12);
      goto LABEL_13;
    }
    if (*(_QWORD *)(a4 + 16) != __n || __n && memcmp(v9, __s2, __n))
      goto LABEL_12;
  }
LABEL_13:
  v10 = v12;
  v12 = 0;
  if (v10)
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    MEMORY[0x1CAA32FC0](v10, 0x1012C40EC159624);
  }
  return a4;
}

uint64_t *sub_1C4D65D00(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = operator new(56 * v8, (std::align_val_t)8uLL);
  if (v4)
  {
    sub_1C4D65DA4(a1, v4, v4 + 56 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  return sub_1C4D65788(a1);
}

uint64_t *sub_1C4D65DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *result;
  const void *v7;
  __n128 *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  size_t v16;
  uint64_t v17;
  void *__s2;
  size_t __n;
  uint64_t v20;

  sub_1C4D65788(a1);
  sub_1C4D655B0(&v17, (unsigned __int8 *)0xFFFFFFFFFFFFFFFFLL, 0);
  result = sub_1C4D655B0(&v14, (unsigned __int8 *)0xFFFFFFFFFFFFFFFELL, 0);
  while (a2 != a3)
  {
    v8 = (__n128 *)(a2 + 8);
    v7 = *(const void **)(a2 + 8);
    if (__s2 == (void *)-2)
    {
      if (v7 == (const void *)-2)
        goto LABEL_22;
    }
    else if (__s2 == (void *)-1)
    {
      if (v7 == (const void *)-1)
        goto LABEL_22;
    }
    else if (*(_QWORD *)(a2 + 16) == __n && (!__n || !memcmp(*(const void **)(a2 + 8), __s2, __n)))
    {
      goto LABEL_22;
    }
    if (v15 == (void *)-2)
    {
      if (v7 != (const void *)-2)
        goto LABEL_21;
    }
    else if (v15 == (void *)-1)
    {
      if (v7 != (const void *)-1)
        goto LABEL_21;
    }
    else if (*(_QWORD *)(a2 + 16) != v16 || v16 && memcmp(v7, v15, v16))
    {
LABEL_21:
      v20 = 0;
      sub_1C4D658E0((uint64_t *)a1, a2, &v20);
      v9 = v20;
      v10 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      sub_1C4765904((uint64_t *)v9, v10);
      v11 = *v8;
      *(__n128 *)(v9 + 8) = *v8;
      llvm::json::Value::moveFrom(v9 + 24, (unsigned __int16 *)(a2 + 24), v11);
      ++*(_DWORD *)(a1 + 8);
      llvm::json::Value::destroy((void **)(a2 + 24));
    }
LABEL_22:
    result = sub_1C4765904((uint64_t *)a2, 0);
    a2 += 56;
  }
  v12 = v14;
  v14 = 0;
  if (v12)
  {
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
    result = (uint64_t *)MEMORY[0x1CAA32FC0](v12, 0x1012C40EC159624);
  }
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    if (*(char *)(v13 + 23) < 0)
      operator delete(*(void **)v13);
    return (uint64_t *)MEMORY[0x1CAA32FC0](v13, 0x1012C40EC159624);
  }
  return result;
}

uint64_t *sub_1C4D65F7C(uint64_t *result)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  size_t v10;
  uint64_t v11;
  void *__s2;
  size_t __n;

  if (*((_DWORD *)result + 4))
  {
    v1 = (unsigned int *)result;
    sub_1C4D655B0(&v11, (unsigned __int8 *)0xFFFFFFFFFFFFFFFFLL, 0);
    result = sub_1C4D655B0(&v8, (unsigned __int8 *)0xFFFFFFFFFFFFFFFELL, 0);
    v2 = v1[4];
    if ((_DWORD)v2)
    {
      v3 = 56 * v2;
      v4 = (void **)(*(_QWORD *)v1 + 24);
      do
      {
        v5 = *(v4 - 2);
        if (__s2 == (void *)-2)
        {
          if (v5 == (const void *)-2)
            goto LABEL_23;
        }
        else if (__s2 == (void *)-1)
        {
          if (v5 == (const void *)-1)
            goto LABEL_23;
        }
        else if (*(v4 - 1) == (void *)__n && (!__n || !memcmp(*(v4 - 2), __s2, __n)))
        {
          goto LABEL_23;
        }
        if (v9 == (void *)-2)
        {
          if (v5 == (const void *)-2)
            goto LABEL_23;
        }
        else if (v9 == (void *)-1)
        {
          if (v5 == (const void *)-1)
            goto LABEL_23;
        }
        else if (*(v4 - 1) == (void *)v10 && (!v10 || !memcmp(v5, v9, v10)))
        {
          goto LABEL_23;
        }
        llvm::json::Value::destroy(v4);
LABEL_23:
        result = sub_1C4765904((uint64_t *)v4 - 3, 0);
        v4 += 7;
        v3 -= 56;
      }
      while (v3);
    }
    v6 = v8;
    v8 = 0;
    if (v6)
    {
      if (*(char *)(v6 + 23) < 0)
        operator delete(*(void **)v6);
      result = (uint64_t *)MEMORY[0x1CAA32FC0](v6, 0x1012C40EC159624);
    }
    v7 = v11;
    v11 = 0;
    if (v7)
    {
      if (*(char *)(v7 + 23) < 0)
        operator delete(*(void **)v7);
      return (uint64_t *)MEMORY[0x1CAA32FC0](v7, 0x1012C40EC159624);
    }
  }
  return result;
}

uint64_t sub_1C4D6610C(unsigned __int16 **a1, unsigned __int16 *a2, __n128 a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unsigned __int16 *v11;
  __n128 v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  void **v16;

  v3 = ((char *)a1[1] - (char *)*a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    abort();
  v7 = (char *)a1[2] - (char *)*a1;
  if (v7 >> 4 > v4)
    v4 = v7 >> 4;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0)
    v8 = 0x7FFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 >> 59)
      sub_1C4764EE4();
    v9 = (char *)operator new(32 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (uint64_t)&v9[32 * v3];
  v11 = (unsigned __int16 *)&v9[32 * v8];
  v12 = llvm::json::Value::moveFrom(v10, a2, a3);
  v13 = v10 + 32;
  v15 = *a1;
  v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = (unsigned __int16 *)v10;
    a1[1] = (unsigned __int16 *)v13;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v10 -= 32;
      v14 -= 16;
      v12 = llvm::json::Value::moveFrom(v10, v14, v12);
    }
    while (v14 != v15);
    v14 = *a1;
    v16 = (void **)a1[1];
    *a1 = (unsigned __int16 *)v10;
    a1[1] = (unsigned __int16 *)v13;
    a1[2] = v11;
    while (v16 != (void **)v14)
    {
      v16 -= 4;
      llvm::json::Value::destroy(v16);
    }
  }
  if (v14)
    operator delete(v14);
  return v13;
}

void sub_1C4D66218(void ***a1)
{
  void **v1;
  llvm::json::Value *v2;
  llvm::json::Value *v4;
  void *v5;

  v1 = *a1;
  v2 = (llvm::json::Value *)**a1;
  if (v2)
  {
    v4 = (llvm::json::Value *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 = (llvm::json::Value *)((char *)v4 - 32);
        llvm::json::Value::destroy(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_1C4D66288(uint64_t *result, uint64_t a2, unsigned int a3)
{
  uint64_t *v5;
  unint64_t *v6;
  unsigned int v7;

  v5 = result;
  v6 = (unint64_t *)result[7];
  if ((unint64_t)(result[6] - (_QWORD)v6) <= 7)
  {
    result = (uint64_t *)sub_1C4D663A4(result, 8uLL);
    v6 = (unint64_t *)v5[7];
  }
  *v6 = a3 | (unint64_t)(a2 << 32);
  v5[7] += 8;
  ++*((_DWORD *)v5 + 16);
  v7 = *((unsigned __int16 *)v5 + 34);
  if (v7 <= a2)
    LOWORD(v7) = a2;
  *((_WORD *)v5 + 34) = v7;
  return result;
}

uint64_t sub_1C4D66308(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(result + 72) < a2)
    *(_QWORD *)(result + 72) = a2;
  v2 = *(_QWORD *)(result + 48);
  v3 = (a2 - 1) & -(uint64_t)(*(_DWORD *)(result + 32) - v2 + *(_DWORD *)(result + 40));
  if (v2 - *(_QWORD *)(result + 56) < v3)
  {
    v5 = (a2 - 1) & -(uint64_t)(*(_DWORD *)(result + 32) - v2 + *(_DWORD *)(result + 40));
    v6 = result;
    sub_1C4D663A4((uint64_t *)result, v3);
    v3 = v5;
    result = v6;
    *(_QWORD *)(v6 + 48) -= v5;
  }
  else
  {
    *(_QWORD *)(result + 48) = v2 - v3;
    if (!v3)
      return result;
  }
  v4 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(result + 48) + v4++) = 0;
  while (v3 != v4);
  return result;
}

uint64_t sub_1C4D663A4(uint64_t *a1, unint64_t a2)
{
  char *v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  char *v12;

  v4 = a1[4];
  v3 = (char *)a1[5];
  v5 = &v3[v4 - a1[6]];
  v6 = a1[7] - (_QWORD)v3;
  if (v4)
    v7 = v4 >> 1;
  else
    v7 = a1[2];
  if (v7 <= a2)
    v7 = a2;
  v8 = (v4 + a1[3] + v7 - 1) & -a1[3];
  a1[4] = v8;
  v9 = *a1;
  if (!v3)
  {
    if (v9)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v8);
    else
      result = operator new[]();
    goto LABEL_12;
  }
  if (v9)
  {
    result = (*(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 32))(v9, v3, v4, v8, v5, v6);
LABEL_12:
    v10 = (char *)result;
    goto LABEL_13;
  }
  v10 = (char *)operator new[]();
  memcpy(&v10[v8 - v5], &v3[v4 - v5], v5);
  memcpy(v10, v3, v6);
  result = MEMORY[0x1CAA32F9C](v3, 0x1000C8077774924);
LABEL_13:
  v12 = &v10[a1[4] - v5];
  a1[5] = (uint64_t)v10;
  a1[6] = (uint64_t)v12;
  a1[7] = (uint64_t)&v10[v6];
  return result;
}

uint64_t sub_1C4D6650C(uint64_t a1, char a2)
{
  uint64_t v4;

  if (!*(_QWORD *)(a1 + 72))
    *(_QWORD *)(a1 + 72) = 1;
  v4 = *(_QWORD *)(a1 + 48);
  if (v4 == *(_QWORD *)(a1 + 56))
  {
    sub_1C4D663A4((uint64_t *)a1, 1uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v4 - 1;
  *(_BYTE *)(v4 - 1) = a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t sub_1C4D66580(uint64_t a1, __int16 a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int16 v12;
  unint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  char *v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  unsigned int *v23;

  if (*(_QWORD *)(a1 + 72) <= 3uLL)
    *(_QWORD *)(a1 + 72) = 4;
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = ((_BYTE)v4 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v4 - v5 < v6)
  {
    sub_1C4D663A4((uint64_t *)a1, ((_BYTE)v4 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(_QWORD *)(a1 + 48) -= v6;
  }
  else
  {
    v7 = v4 - v6;
    *(_QWORD *)(a1 + 48) = v7;
    if (!v6)
      goto LABEL_8;
  }
  v8 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + v8++) = 0;
  while (v6 != v8);
  v7 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
LABEL_8:
  if ((unint64_t)(v7 - v5) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a1, 4uLL);
    v7 = *(_QWORD *)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 56);
  }
  *(_DWORD *)(v7 - 4) = 0;
  v9 = v7 - 4;
  *(_QWORD *)(a1 + 48) = v9;
  v10 = *(_QWORD *)(a1 + 32) - v9 + *(_QWORD *)(a1 + 40);
  if ((unsigned __int16)(*(_WORD *)(a1 + 68) + 2) <= 4u)
    v11 = 4;
  else
    v11 = (unsigned __int16)(*(_WORD *)(a1 + 68) + 2);
  *(_WORD *)(a1 + 68) = v11;
  if (v9 - v5 < v11)
  {
    sub_1C4D663A4((uint64_t *)a1, v11);
    v9 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v9 - v11;
  bzero((void *)(v9 - v11), v11);
  v12 = v10 - a2;
  v14 = *(unsigned __int16 **)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v14[1] = v12;
  *v14 = *(_WORD *)(a1 + 68);
  v15 = *(unsigned int *)(a1 + 64);
  v16 = (char *)(v13 - 8 * v15);
  if ((_DWORD)v15)
  {
    v17 = (_WORD *)(v13 - 8 * v15);
    do
    {
      *(unsigned __int16 *)((char *)v14 + (unsigned __int16)v17[2]) = v10 - *v17;
      v17 += 4;
    }
    while ((unint64_t)v17 < v13);
  }
  *(_QWORD *)(a1 + 56) = v16;
  *(_DWORD *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 68) = 0;
  v19 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  LODWORD(v20) = v18 - (_DWORD)v14 + v19;
  if (*(_BYTE *)(a1 + 81) && v18 < (unint64_t)v16)
  {
    v21 = *v14;
    v22 = v18 + v19;
    v23 = *(unsigned int **)(a1 + 40);
    while (1)
    {
      v20 = *v23;
      if ((_DWORD)v21 == *(unsigned __int16 *)(v22 - v20) && !memcmp((const void *)(v22 - v20), v14, v21))
        break;
      if (++v23 >= (unsigned int *)v16)
      {
        LODWORD(v20) = v18 - (_DWORD)v14 + v19;
        goto LABEL_26;
      }
    }
    v14 = (unsigned __int16 *)((char *)v14 + (v18 - (_DWORD)v14 + v19 - v10));
    *(_QWORD *)(a1 + 48) = v14;
  }
LABEL_26:
  if ((_DWORD)v20 == (_DWORD)v19 + (_DWORD)v18 - (_DWORD)v14)
  {
    if ((unint64_t)((char *)v14 - v16) <= 3)
    {
      sub_1C4D663A4((uint64_t *)a1, 4uLL);
      v16 = *(char **)(a1 + 56);
      v19 = *(_QWORD *)(a1 + 32);
      v18 = *(_QWORD *)(a1 + 40);
    }
    *(_DWORD *)v16 = v20;
    *(_QWORD *)(a1 + 56) = v16 + 4;
  }
  *(_DWORD *)(v18 + v19 - v10) = v20 - v10;
  *(_BYTE *)(a1 + 70) = 0;
  return v10;
}

void sub_1C4D667D4(uint64_t a1, unint64_t a2)
{
  void *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  if (*(unsigned int *)(a1 + 12) < a2)
  {
    *(_DWORD *)(a1 + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, a2, 8);
    v4 = *(void **)a1;
    v5 = a2;
LABEL_10:
    memset_pattern16(v4, &unk_1C85CF100, 8 * v5);
    goto LABEL_11;
  }
  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= a2)
    v7 = a2;
  else
    v7 = *(unsigned int *)(a1 + 8);
  if (v7)
  {
    memset_pattern16(*(void **)a1, &unk_1C85CF100, 8 * v7);
    v6 = *(unsigned int *)(a1 + 8);
  }
  v5 = a2 - v6;
  if (a2 > v6)
  {
    v4 = (void *)(*(_QWORD *)a1 + 8 * v6);
    goto LABEL_10;
  }
LABEL_11:
  *(_DWORD *)(a1 + 8) = a2;
}

uint64_t sub_1C4D66870@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = 0;
  result = sub_1C4D658E0((uint64_t *)a1, a2, &v14);
  v9 = v14;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    v9 = sub_1C4D65BC4(a1, a2, a2, v14);
    v11 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    result = (uint64_t)sub_1C4765904((uint64_t *)v9, v11);
    *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + 8);
    v12 = *a3;
    *(_WORD *)(v9 + 24) = 3;
    *(_QWORD *)(v9 + 32) = v12;
    v10 = 1;
  }
  v13 = *(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v13;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

void sub_1C4D66924(uint64_t a1)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  void **v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 48296;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  v4 = (v3 + 63) >> 6;
  v15 = v17;
  v16 = 0x600000000;
  sub_1C4765AA4((char *)&v15, v4, 0);
  v18 = v3;
  v5 = v15;
  if ((void **)v2 != &v15)
  {
    if (v15 != v17)
    {
      if (*(_QWORD *)v2 != a1 + 48312)
      {
        free(*(void **)v2);
        v5 = v15;
      }
      *(_QWORD *)v2 = v5;
      *(_QWORD *)(v2 + 8) = v16;
      v15 = v17;
      HIDWORD(v16) = 0;
      goto LABEL_7;
    }
    v6 = v16;
    v7 = *(unsigned int *)(v2 + 8);
    if (v7 >= v16)
    {
      if ((_DWORD)v16)
        memmove(*(void **)v2, v17, 8 * v16);
LABEL_6:
      *(_DWORD *)(v2 + 8) = v6;
LABEL_7:
      LODWORD(v16) = 0;
      v8 = v18;
      v5 = v15;
      goto LABEL_8;
    }
    if (*(_DWORD *)(v2 + 12) < v16)
    {
      *(_DWORD *)(v2 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v2, a1 + 48312, v6, 8);
    }
    else if ((_DWORD)v7)
    {
      v14 = *(unsigned int *)(v2 + 8);
      memmove(*(void **)v2, v17, 8 * v7);
      v13 = v14;
LABEL_23:
      if (v13 != v16)
        memcpy((void *)(*(_QWORD *)v2 + 8 * v13), (char *)v15 + 8 * v13, 8 * v16 - 8 * v13);
      goto LABEL_6;
    }
    v13 = 0;
    goto LABEL_23;
  }
  v8 = v3;
LABEL_8:
  *(_DWORD *)(v2 + 64) = v8;
  if (v5 != v17)
    free(v5);
  v15 = v17;
  v16 = 0x600000000;
  sub_1C4765AA4((char *)&v15, v4, 0);
  v18 = v3;
  v9 = (void **)(v2 + 72);
  v10 = v15;
  if ((void **)(v2 + 72) != &v15)
  {
    if (v15 != v17)
    {
      if (*v9 != (void *)(a1 + 48384))
      {
        free(*v9);
        v10 = v15;
      }
      *(_QWORD *)(v2 + 72) = v10;
      *(_QWORD *)(v2 + 80) = v16;
      v15 = v17;
      HIDWORD(v16) = 0;
      goto LABEL_16;
    }
    v11 = v16;
    v12 = *(unsigned int *)(v2 + 80);
    if (v12 >= v16)
    {
      if ((_DWORD)v16)
        memmove(*v9, v17, 8 * v16);
LABEL_15:
      *(_DWORD *)(v2 + 80) = v11;
LABEL_16:
      LODWORD(v16) = 0;
      v3 = v18;
      v10 = v15;
      goto LABEL_17;
    }
    if (*(_DWORD *)(v2 + 84) < v16)
    {
      *(_DWORD *)(v2 + 80) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v2 + 72, a1 + 48384, v11, 8);
    }
    else if ((_DWORD)v12)
    {
      memmove(*v9, v17, 8 * v12);
LABEL_28:
      if (v12 != v16)
        memcpy((char *)*v9 + 8 * v12, (char *)v15 + 8 * v12, 8 * v16 - 8 * v12);
      goto LABEL_15;
    }
    v12 = 0;
    goto LABEL_28;
  }
LABEL_17:
  *(_DWORD *)(v2 + 136) = v3;
  if (v10 != v17)
    free(v10);
}

uint64_t sub_1C4D66C20()
{
  return 254;
}

uint64_t sub_1C4D66C28(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  unsigned int v6;

  v3 = *(_QWORD *)(result + 48440);
  v4 = (unint64_t)a3 >> 3;
  if (v4 < *(unsigned __int16 *)(v3 + 22)
    && ((*(unsigned __int8 *)(*(_QWORD *)(v3 + 8) + v4) >> (a3 & 7)) & 1) != 0)
  {
    if (a3 - 185 <= 0x7F)
      v5 = 2 * a3 - 369;
    else
      v5 = -1;
    if (a3 - 313 <= 0x7F)
      v6 = 2 * a3 - 626;
    else
      v6 = v5;
    *(_QWORD *)(*(_QWORD *)(a2 + 88) + 8 * (v6 >> 6)) |= 1 << v6;
  }
  return result;
}

uint64_t sub_1C4D66CA0(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  unsigned int v6;

  v3 = *(_QWORD *)(result + 48440);
  v4 = (unint64_t)a3 >> 3;
  if (v4 < *(unsigned __int16 *)(v3 + 22)
    && ((*(unsigned __int8 *)(*(_QWORD *)(v3 + 8) + v4) >> (a3 & 7)) & 1) != 0)
  {
    if (a3 - 185 <= 0x7F)
      v5 = 2 * a3 - 369;
    else
      v5 = -1;
    if (a3 - 313 <= 0x7F)
      v6 = 2 * a3 - 626;
    else
      v6 = v5;
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * (v6 >> 6)) |= 1 << v6;
  }
  return result;
}

void sub_1C4D66D18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) + 536) - 789) <= 2)
  {
    v2 = a1 + 48296;
    v3 = *(unsigned int *)(a1 + 48376);
    if ((_DWORD)v3)
      bzero(*(void **)(a1 + 48368), 8 * v3);
    v4 = *(unsigned int *)(v2 + 8);
    if ((_DWORD)v4)
      bzero(*(void **)v2, 8 * v4);
  }
}

void sub_1C4D66D80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) + 536) - 789) <= 2)
  {
    v2 = a1 + 48296;
    v3 = *(unsigned int *)(a1 + 48376);
    if ((_DWORD)v3)
      bzero(*(void **)(a1 + 48368), 8 * v3);
    v4 = *(unsigned int *)(v2 + 8);
    if ((_DWORD)v4)
      bzero(*(void **)v2, 8 * v4);
  }
}

uint64_t sub_1C4D66DE8(uint64_t a1)
{
  void **v2;
  void *v3;
  uint64_t v5;

  v2 = (void **)(a1 + 48296);
  *(_QWORD *)a1 = off_1E81AA9F8;
  v3 = *(void **)(a1 + 48368);
  if (v3 != (void *)(a1 + 48384))
    free(v3);
  if (*v2 != (void *)(a1 + 48312))
    free(*v2);
  sub_1C4D66F84((char **)(a1 + 152));
  *(_QWORD *)(a1 + 80) = off_1E81A6E70;
  if (*(_DWORD *)(a1 + 136) == 1)
  {
    v5 = *(_QWORD *)(a1 + 96);
    if (v5)
      MEMORY[0x1CAA32F9C](v5, 0x1000C8077774924);
  }
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  return a1;
}

void sub_1C4D66EA4(uint64_t a1)
{
  void **v2;
  void *v3;
  uint64_t v4;

  v2 = (void **)(a1 + 48296);
  *(_QWORD *)a1 = off_1E81AA9F8;
  v3 = *(void **)(a1 + 48368);
  if (v3 != (void *)(a1 + 48384))
    free(v3);
  if (*v2 != (void *)(a1 + 48312))
    free(*v2);
  sub_1C4D66F84((char **)(a1 + 152));
  *(_QWORD *)(a1 + 80) = off_1E81A6E70;
  if (*(_DWORD *)(a1 + 136) == 1)
  {
    v4 = *(_QWORD *)(a1 + 96);
    if (v4)
      MEMORY[0x1CAA32F9C](v4, 0x1000C8077774924);
  }
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4D66F74()
{
  return "AGXRegisterPressureView";
}

char **sub_1C4D66F84(char **a1)
{
  char *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    v4 = 0;
    v5 = 376 * v3;
    do
    {
      v6 = &v2[v5];
      v7 = *(char **)&v2[v5 - 72];
      if (&v2[v5 - 56] != v7)
        free(v7);
      v8 = (char *)*((_QWORD *)v6 - 18);
      if (v6 - 128 != v8)
        free(v8);
      v9 = &v2[v5];
      v10 = *(char **)&v2[v5 - 216];
      if (&v2[v5 - 200] != v10)
        free(v10);
      v11 = (char *)*((_QWORD *)v9 - 36);
      if (v9 - 272 != v11)
        free(v11);
      v12 = *(char **)&v2[v5 - 360];
      if (&v2[v5 - 344] != v12)
        free(v12);
      v2 -= 376;
      v4 += 376;
    }
    while (v5 != v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_1C4D6706C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a2 == 8277)
    return 1 << *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
  else
    return 0;
}

uint64_t sub_1C4D67098(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;

  v2 = *((unsigned int *)a2 + 6);
  if (!(_DWORD)v2)
    return 0;
  v3 = 0;
  result = 0;
  v5 = (_QWORD *)(*((_QWORD *)a2 + 2) + 8);
  do
  {
    if (word_1C6923ED8[word_1C691FD9C[*a2] + (unint64_t)(unsigned __int16)v3] == 123)
      result |= 1 << *v5;
    ++v3;
    v5 += 2;
  }
  while (v2 != v3);
  return result;
}

uint64_t sub_1C4D67104(uint64_t result)
{
  ++*(_DWORD *)(result + 48);
  return result;
}

uint64_t sub_1C4D67114(uint64_t a1)
{
  uint64_t v3;
  void **v4;

  *(_QWORD *)a1 = off_1E81AAAC0;
  v4 = (void **)(a1 + 176);
  sub_1C4D67294(&v4);
  v4 = (void **)(a1 + 152);
  sub_1C4D67294(&v4);
  *(_QWORD *)(a1 + 80) = off_1E81A6E70;
  if (*(_DWORD *)(a1 + 136) == 1)
  {
    v3 = *(_QWORD *)(a1 + 96);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8077774924);
  }
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  return a1;
}

uint64_t sub_1C4D671B8(uint64_t a1)
{
  uint64_t v3;
  void **v4;

  *(_QWORD *)a1 = off_1E81AAAC0;
  v4 = (void **)(a1 + 176);
  sub_1C4D67294(&v4);
  v4 = (void **)(a1 + 152);
  sub_1C4D67294(&v4);
  *(_QWORD *)(a1 + 80) = off_1E81A6E70;
  if (*(_DWORD *)(a1 + 136) == 1)
  {
    v3 = *(_QWORD *)(a1 + 96);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8077774924);
  }
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  return MEMORY[0x1CAA32FC0](a1, 0x10F3C40C9DB3135);
}

const char *sub_1C4D67270()
{
  return "AGX2WaitView";
}

uint64_t sub_1C4D67280@<X0>(uint64_t a1@<X8>)
{
  return sub_1C4D67324(a1, "not implemented", 0xFuLL);
}

void sub_1C4D67294(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void *v8;
  char *v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 32;
      do
      {
        v7 = (char *)*((_QWORD *)v6 - 2);
        if (v6 != v7)
          free(v7);
        v8 = (void *)*((_QWORD *)v6 - 5);
        if (v8)
        {
          *((_QWORD *)v6 - 4) = v8;
          operator delete(v8);
        }
        v9 = v6 - 48;
        v6 -= 80;
      }
      while (v9 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1C4D67324(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  __n128 v7;
  void *__p[2];
  char v9;
  void *v10[5];

  v10[4] = *(void **)MEMORY[0x1E0C80C00];
  *(_WORD *)a1 = 5;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  if (!llvm::json::isUTF8(a2, a3, 0))
  {
    llvm::json::fixUTF8((unint64_t)a2, a3, (uint64_t)__p);
    sub_1C4D673F4((uint64_t)v10, (unint64_t)__p);
    llvm::json::Value::destroy((void **)a1);
    llvm::json::Value::moveFrom(a1, (unsigned __int16 *)v10, v7);
    llvm::json::Value::destroy(v10);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

uint64_t sub_1C4D673F4(uint64_t a1, unint64_t a2)
{
  char v4;
  BOOL v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;

  *(_WORD *)a1 = 6;
  v4 = *(_BYTE *)(a2 + 23);
  v5 = v4 < 0;
  if (v4 >= 0)
    v6 = (unsigned __int8 *)a2;
  else
    v6 = *(unsigned __int8 **)a2;
  v7 = v4 & 0x7F;
  if (v5)
    v8 = *(_QWORD *)(a2 + 8);
  else
    v8 = v7;
  if (!llvm::json::isUTF8(v6, v8, 0))
  {
    v11 = *(_BYTE *)(a2 + 23);
    v12 = v11 < 0;
    if (v11 >= 0)
      v13 = a2;
    else
      v13 = *(_QWORD *)a2;
    v14 = v11 & 0x7F;
    if (v12)
      v15 = *(_QWORD *)(a2 + 8);
    else
      v15 = v14;
    llvm::json::fixUTF8(v13, v15, (uint64_t)&v16);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = v16;
    *(_QWORD *)(a2 + 16) = v17;
  }
  v9 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  return a1;
}

uint64_t sub_1C4D674B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  char **v7;

  *(_QWORD *)a1 = off_1E81328C0;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a6;
  *(_QWORD *)(a1 + 24) = 0;
  v7 = (char **)(a1 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 56) = a5;
  *(_QWORD *)(a1 + 64) = a2;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 96) = &unk_1E81A7208;
  *(_QWORD *)(a1 + 160) = a1 + 72;
  *(_DWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  if (a5)
    sub_1C4D63CD0(v7, a5);
  return a1;
}

uint64_t sub_1C4D67534(uint64_t result, uint64_t a2)
{
  unint64_t v2;

  v2 = **(unsigned int **)(a2 + 8);
  if (*(_QWORD *)(result + 56) > v2 && *(_DWORD *)a2 == 8)
    ++*(_DWORD *)(*(_QWORD *)(result + 24) + 4 * v2);
  return result;
}

llvm::raw_ostream *sub_1C4D67564(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int *v4;
  int *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  llvm::raw_ostream *v9;
  char **v10;
  void *v11;
  void *v12;
  _BYTE *v13;
  void *v14;
  _BYTE *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int i;
  int j;
  int v40;
  char *v41;
  unint64_t v42;
  const char *v43;
  char *v44;
  llvm::raw_ostream *v45;
  size_t v46;
  const void *v47;
  size_t v48;
  void *v49;
  _BYTE *v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  std::string v59;
  uint64_t (**v60)(llvm::raw_ostream *);
  int v61;
  char *v62;
  char *v63;
  char *v64;
  char v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  __int128 v71;
  uint64_t v72;

  v61 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 1;
  v63 = 0;
  v64 = 0;
  v62 = 0;
  v60 = &off_1E81A1100;
  v68 = 0;
  v69 = 0;
  v70 = &v72;
  v71 = xmmword_1C6612EF0;
  sub_1C4D685DC((uint64_t)&v60, a2);
  v3 = v64 - v62;
  if (v64 != v62)
  {
    v64 = v62;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v60, v62, v3);
  }
  v4 = *(int **)(a1 + 24);
  v5 = *(int **)(a1 + 32);
  if (v4 == v5)
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = *v4++;
      v6 += v8;
      if (v8)
        ++v7;
    }
    while (v4 != v5);
  }
  if ((unint64_t)(v63 - v64) > 1)
  {
    v10 = &v64;
    *(_WORD *)v64 = 2570;
    v11 = v64 + 2;
    v64 += 2;
    v9 = (llvm::raw_ostream *)&v60;
  }
  else
  {
    v9 = llvm::raw_ostream::write((llvm::raw_ostream *)&v60, "\n\n", 2uLL);
    v10 = (char **)((char *)v9 + 32);
    v11 = (void *)*((_QWORD *)v9 + 4);
  }
  if (*((_QWORD *)v9 + 3) - (_QWORD)v11 > 0xCuLL)
  {
    qmemcpy(v11, "Clause View:\n", 13);
    *v10 += 13;
  }
  else
  {
    v9 = llvm::raw_ostream::write(v9, "Clause View:\n", 0xDuLL);
  }
  v12 = (void *)*((_QWORD *)v9 + 4);
  if (*((_QWORD *)v9 + 3) - (_QWORD)v12 > 0x16uLL)
  {
    qmemcpy(v12, "Total Pipeline Stalls: ", 23);
    *((_QWORD *)v9 + 4) += 23;
  }
  else
  {
    v9 = llvm::raw_ostream::write(v9, "Total Pipeline Stalls: ", 0x17uLL);
  }
  sub_1C5E21910(v9, v7, 0, 0, 0);
  v13 = (_BYTE *)*((_QWORD *)v9 + 4);
  if (*((_BYTE **)v9 + 3) == v13)
  {
    v9 = llvm::raw_ostream::write(v9, "\n", 1uLL);
    v14 = (void *)*((_QWORD *)v9 + 4);
  }
  else
  {
    *v13 = 10;
    v14 = (void *)(*((_QWORD *)v9 + 4) + 1);
    *((_QWORD *)v9 + 4) = v14;
  }
  if (*((_QWORD *)v9 + 3) - (_QWORD)v14 > 0x1CuLL)
  {
    qmemcpy(v14, "Total Pipeline Stall Cycles: ", 29);
    *((_QWORD *)v9 + 4) += 29;
  }
  else
  {
    v9 = llvm::raw_ostream::write(v9, "Total Pipeline Stall Cycles: ", 0x1DuLL);
  }
  sub_1C5E21910(v9, v6, 0, 0, 0);
  v15 = (_BYTE *)*((_QWORD *)v9 + 4);
  if (*((_BYTE **)v9 + 3) == v15)
  {
    v9 = llvm::raw_ostream::write(v9, "\n", 1uLL);
    v16 = (void *)*((_QWORD *)v9 + 4);
  }
  else
  {
    *v15 = 10;
    v16 = (void *)(*((_QWORD *)v9 + 4) + 1);
    *((_QWORD *)v9 + 4) = v16;
  }
  if (*((_QWORD *)v9 + 3) - (_QWORD)v16 > 0x25uLL)
  {
    qmemcpy(v16, "[Clause, Chain, Cycles Stalled, Type]\n", 38);
    *((_QWORD *)v9 + 4) += 38;
  }
  else
  {
    llvm::raw_ostream::write(v9, "[Clause, Chain, Cycles Stalled, Type]\n", 0x26uLL);
  }
  v17 = v64 - v62;
  if (v64 != v62)
  {
    v64 = v62;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v60, v62, v17);
  }
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72)
      + 16
      * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48) + 4 * (*(_DWORD *)(a1 + 56) - 1));
  v19 = *(_DWORD *)(v18 + 12);
  std::to_string(&v59, *(_DWORD *)(v18 + 8));
  v20 = v59.__r_.__value_.__r.__words[1];
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  v58 = v20;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  std::to_string(&v59, v19);
  v21 = v59.__r_.__value_.__r.__words[1];
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  v57 = v21;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  v22 = *(unsigned int **)(a1 + 24);
  v23 = *(unsigned int **)(a1 + 32);
  if (v22 == v23)
  {
    v24 = 0;
  }
  else
  {
    v24 = 0;
    do
    {
      v26 = *v22++;
      v25 = v26;
      if (v26 > v24)
        v24 = v25;
    }
    while (v22 != v23);
  }
  std::to_string(&v59, v24);
  v27 = v59.__r_.__value_.__r.__words[1];
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  v56 = v27;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  v28 = *(_QWORD *)(a1 + 56);
  if (v28)
  {
    v29 = 0;
    v30 = *(_QWORD *)(a1 + 48);
    v54 = a1;
    v55 = v30 + 168 * v28;
    do
    {
      v31 = a1;
      v32 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 72)
                     + 16 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48) + 4 * v29));
      std::to_string(&v59, v32[2]);
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
      else
        v33 = v59.__r_.__value_.__r.__words[1];
      if ((*((_BYTE *)&v59.__r_.__value_.__s + 23) & 0x80) != 0)
        operator delete(v59.__r_.__value_.__l.__data_);
      std::to_string(&v59, v32[3]);
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
      else
        v34 = v59.__r_.__value_.__r.__words[1];
      if ((*((_BYTE *)&v59.__r_.__value_.__s + 23) & 0x80) != 0)
        operator delete(v59.__r_.__value_.__l.__data_);
      v35 = *(_QWORD *)(v31 + 24);
      v36 = v29;
      std::to_string(&v59, *(_DWORD *)(v35 + 4 * v29));
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
      else
        v37 = v59.__r_.__value_.__r.__words[1];
      if ((*((_BYTE *)&v59.__r_.__value_.__s + 23) & 0x80) != 0)
        operator delete(v59.__r_.__value_.__l.__data_);
      if (v63 == v64)
        llvm::raw_ostream::write((llvm::raw_ostream *)&v60, "[", 1uLL);
      else
        *v64++ = 91;
      for (i = v58 - v33; i; --i)
      {
        if (v63 == v64)
          llvm::raw_ostream::write((llvm::raw_ostream *)&v60, " ", 1uLL);
        else
          *v64++ = 32;
      }
      sub_1C5E21910((llvm::raw_ostream *)&v60, v32[2], 0, 0, 0);
      if ((unint64_t)(v63 - v64) > 1)
      {
        *(_WORD *)v64 = 8236;
        v64 += 2;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v60, ", ", 2uLL);
      }
      for (j = v57 - v34; j; --j)
      {
        if (v63 == v64)
          llvm::raw_ostream::write((llvm::raw_ostream *)&v60, " ", 1uLL);
        else
          *v64++ = 32;
      }
      sub_1C5E21910((llvm::raw_ostream *)&v60, v32[3], 0, 0, 0);
      if ((unint64_t)(v63 - v64) > 1)
      {
        *(_WORD *)v64 = 8236;
        v64 += 2;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v60, ", ", 2uLL);
      }
      v40 = v56 - v37;
      if (v56 != v37)
      {
        do
        {
          if (v63 == v64)
            llvm::raw_ostream::write((llvm::raw_ostream *)&v60, " ", 1uLL);
          else
            *v64++ = 32;
          --v40;
        }
        while (v40);
      }
      sub_1C5E21910((llvm::raw_ostream *)&v60, *(unsigned int *)(*(_QWORD *)(v54 + 24) + 4 * v36), 0, 0, 0);
      if ((unint64_t)(v63 - v64) > 1)
      {
        *(_WORD *)v64 = 8236;
        v41 = v64 + 2;
        v64 += 2;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v60, ", ", 2uLL);
        v41 = v64;
      }
      v42 = v63 - v41;
      if (*v32 == 1)
      {
        if (v42 > 2)
        {
          v41[2] = 93;
          v52 = 20548;
LABEL_114:
          *(_WORD *)v41 = v52;
          v64 += 3;
          goto LABEL_94;
        }
        v43 = "DP]";
      }
      else
      {
        if (v42 > 2)
        {
          v41[2] = 93;
          v52 = 19780;
          goto LABEL_114;
        }
        v43 = "DM]";
      }
      llvm::raw_ostream::write((llvm::raw_ostream *)&v60, v43, 3uLL);
LABEL_94:
      v44 = v64;
      if ((unint64_t)(v63 - v64) > 2)
      {
        v64[2] = 32;
        *(_WORD *)v44 = 8224;
        v64 += 3;
        v45 = (llvm::raw_ostream *)&v60;
      }
      else
      {
        v45 = llvm::raw_ostream::write((llvm::raw_ostream *)&v60, "   ", 3uLL);
      }
      a1 = v54;
      v47 = (const void *)sub_1C4D67DF4(v54, v30);
      v48 = v46;
      v49 = (void *)*((_QWORD *)v45 + 4);
      if (v46 <= *((_QWORD *)v45 + 3) - (_QWORD)v49)
      {
        if (v46)
        {
          memcpy(v49, v47, v46);
          *((_QWORD *)v45 + 4) += v48;
        }
      }
      else
      {
        v45 = llvm::raw_ostream::write(v45, (const char *)v47, v46);
      }
      v50 = (_BYTE *)*((_QWORD *)v45 + 4);
      if ((unint64_t)v50 >= *((_QWORD *)v45 + 3))
      {
        llvm::raw_ostream::write(v45, 10);
      }
      else
      {
        *((_QWORD *)v45 + 4) = v50 + 1;
        *v50 = 10;
      }
      v51 = v64 - v62;
      if (v64 != v62)
      {
        v64 = v62;
        llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v60, v62, v51);
      }
      v29 = v36 + 1;
      v30 += 168;
    }
    while (v30 != v55);
  }
  return sub_1C4D687F0((llvm::raw_ostream *)&v60);
}

uint64_t sub_1C4D67DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const char *v5;
  const char *v6;
  char v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t first_not_of;
  unint64_t v14;
  _QWORD v16[2];

  v4 = a1 + 72;
  MEMORY[0x1CAA32ABC](a1 + 72, "");
  (*(void (**)(_QWORD, uint64_t, _QWORD, const char *, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2, 0, "", 0, *(_QWORD *)(a1 + 64), a1 + 96);
  v5 = *(const char **)(a1 + 128);
  v6 = *(const char **)(a1 + 112);
  if (v5 != v6)
  {
    *(_QWORD *)(a1 + 128) = v6;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)(a1 + 96), v6, v5 - v6);
  }
  v7 = *(_BYTE *)(a1 + 95);
  v8 = v7 < 0;
  v9 = *(_QWORD *)(a1 + 80);
  if (v7 >= 0)
    v10 = v4;
  else
    v10 = *(_QWORD *)(a1 + 72);
  v11 = v7 & 0x7F;
  if (v8)
    v12 = v9;
  else
    v12 = v11;
  v16[0] = v10;
  v16[1] = v12;
  first_not_of = llvm::StringRef::find_first_not_of(v16, " \t\n\v\f\r", 6, 0);
  if (first_not_of >= v12)
    v14 = v12;
  else
    v14 = first_not_of;
  return v10 + v14;
}

void sub_1C4D67ED4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  const void *v11;
  void **p_dst;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  void **__dst;
  size_t v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  void *v23[5];

  v23[4] = *(void **)MEMORY[0x1E0C80C00];
  v22 = 0;
  v3 = 0uLL;
  v21 = 0u;
  v4 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    v6 = *(_QWORD *)(a1 + 48);
    v7 = 168 * v4;
    while (1)
    {
      v8 = sub_1C4D67DF4(a1, v6);
      if (v8)
        break;
      __dst = 0;
      v19 = 0;
      v20 = 0;
LABEL_14:
      sub_1C4D673F4((uint64_t)v23, (unint64_t)&__dst);
      v16 = *((_QWORD *)&v21 + 1);
      if (*((_QWORD *)&v21 + 1) >= v22)
      {
        v17 = sub_1C4D6610C((unsigned __int16 **)&v21, (unsigned __int16 *)v23, v15);
      }
      else
      {
        llvm::json::Value::moveFrom(*((uint64_t *)&v21 + 1), (unsigned __int16 *)v23, v15);
        v17 = v16 + 32;
      }
      *((_QWORD *)&v21 + 1) = v17;
      llvm::json::Value::destroy(v23);
      if (SHIBYTE(v20) < 0)
        operator delete(__dst);
      v6 += 168;
      v7 -= 168;
      if (!v7)
      {
        v3 = v21;
        v4 = v22;
        goto LABEL_21;
      }
    }
    v10 = v9;
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v11 = (const void *)v8;
    if (v9 >= 0x17)
    {
      v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v13 = v9 | 7;
      v14 = v13 + 1;
      p_dst = (void **)operator new(v13 + 1);
      v19 = v10;
      v20 = v14 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v20) = v9;
      p_dst = (void **)&__dst;
      if (!v9)
        goto LABEL_13;
    }
    memmove(p_dst, v11, v10);
LABEL_13:
    *((_BYTE *)p_dst + v10) = 0;
    goto LABEL_14;
  }
LABEL_21:
  *(_WORD *)a2 = 8;
  *(_OWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 24) = v4;
  v22 = 0;
  v21 = 0uLL;
  v23[0] = &v21;
  sub_1C4D66218((void ***)v23);
}

uint64_t sub_1C4D68088(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  const void *v13;
  void **v14;
  size_t v15;
  void **v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  void **p_dst;
  size_t v26;
  size_t v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  int v36;
  char *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  char *v58;
  void **__dst;
  size_t v60;
  unint64_t v61;

  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    v6 = a1;
    v7 = 0;
    v5 = 0;
    v4 = 0;
    v8 = *(_QWORD *)(a1 + 48);
    v9 = v8 + 168 * v3;
    while (1)
    {
      v10 = sub_1C4D67DF4(v6, v8);
      if (v10)
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      __dst = 0;
      v60 = 0;
      v61 = 0;
LABEL_15:
      v24 = v17 < 0;
      if (v17 >= 0)
        p_dst = (void **)&__dst;
      else
        p_dst = v16;
      v26 = v17 & 0x7F;
      if (v24)
        v27 = v15;
      else
        v27 = v26;
      v28 = sub_1C4D6889C(a2, p_dst, v27);
      v29 = v28;
      if (v4 >= v7)
      {
        v30 = (v4 - v5) >> 2;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 62)
LABEL_70:
          abort();
        if ((v7 - v5) >> 1 > v31)
          v31 = (v7 - v5) >> 1;
        if ((unint64_t)(v7 - v5) >= 0x7FFFFFFFFFFFFFFCLL)
          v32 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v32 = v31;
        if (v32)
        {
          if (v32 >> 62)
            sub_1C4764EE4();
          v33 = (char *)operator new(4 * v32);
        }
        else
        {
          v33 = 0;
        }
        v34 = &v33[4 * v30];
        *(_DWORD *)v34 = v29;
        v35 = v34 + 4;
        while (v4 != v5)
        {
          v36 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *((_DWORD *)v34 - 1) = v36;
          v34 -= 4;
        }
        v7 = &v33[4 * v32];
        if (v5)
          operator delete(v5);
        v5 = v34;
        v4 = v35;
      }
      else
      {
        *(_DWORD *)v4 = v28;
        v4 += 4;
      }
      if (SHIBYTE(v61) < 0)
        operator delete(__dst);
      v8 += 168;
      if (v8 == v9)
        goto LABEL_42;
    }
    v12 = v11;
    if (v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_70;
    v13 = (const void *)v10;
    if (v11 >= 0x17)
    {
      v18 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v18 = v11 | 7;
      v58 = v7;
      v19 = v9;
      v20 = v6;
      v21 = a2;
      v22 = v18 + 1;
      v14 = (void **)operator new(v18 + 1);
      v23 = v22 | 0x8000000000000000;
      a2 = v21;
      v6 = v20;
      v9 = v19;
      v7 = v58;
      v60 = v12;
      v61 = v23;
      __dst = v14;
    }
    else
    {
      HIBYTE(v61) = v11;
      v14 = (void **)&__dst;
      if (!v11)
        goto LABEL_14;
    }
    memmove(v14, v13, v12);
LABEL_14:
    *((_BYTE *)v14 + v12) = 0;
    v17 = HIBYTE(v61);
    v16 = __dst;
    v15 = v60;
    goto LABEL_15;
  }
  v4 = 0;
  v5 = 0;
LABEL_42:
  if (v4 == v5)
    v37 = (char *)&flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
  else
    v37 = v5;
  v38 = sub_1C6174F44(a2, (uint64_t)v37, (v4 - v5) >> 2);
  *(_BYTE *)(a2 + 70) = 1;
  v39 = *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40);
  sub_1C6174EC0((uint64_t *)a2, 4, v38);
  v40 = sub_1C4D66580(a2, v39);
  *(_BYTE *)(a2 + 70) = 1;
  v41 = *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40);
  v42 = sub_1C6174D80(a2, 3);
  sub_1C4D66288((uint64_t *)a2, 4, v42);
  if (v40)
  {
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v43 = *(_QWORD *)(a2 + 32);
    v44 = *(_QWORD *)(a2 + 40);
    v45 = *(_QWORD *)(a2 + 48);
    v46 = ((_BYTE)v45 - ((_BYTE)v43 + (_BYTE)v44)) & 3;
    if (v45 - *(_QWORD *)(a2 + 56) < v46)
    {
      sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v45 - ((_BYTE)v43 + (_BYTE)v44)) & 3);
      *(_QWORD *)(a2 + 48) -= v46;
    }
    else
    {
      v47 = v45 - v46;
      *(_QWORD *)(a2 + 48) = v47;
      if (!v46)
      {
LABEL_53:
        v49 = v44 - v47 + v43 - v40 + 4;
        if ((_DWORD)v44 - (_DWORD)v47 + (_DWORD)v43 - v40 == -4 && *(_BYTE *)(a2 + 80) == 0)
          goto LABEL_67;
        if (*(_QWORD *)(a2 + 72) <= 3uLL)
          *(_QWORD *)(a2 + 72) = 4;
        v51 = ((_BYTE)v47 - ((_BYTE)v43 + (_BYTE)v44)) & 3;
        v52 = *(_QWORD *)(a2 + 56);
        if (v47 - v52 < v51)
        {
          sub_1C4D663A4((uint64_t *)a2, v51);
          *(_QWORD *)(a2 + 48) -= v51;
        }
        else
        {
          v53 = v47 - v51;
          *(_QWORD *)(a2 + 48) = v47 - v51;
          if (!v51)
          {
LABEL_64:
            if ((unint64_t)(v53 - v52) <= 3)
            {
              sub_1C4D663A4((uint64_t *)a2, 4uLL);
              v53 = *(_QWORD *)(a2 + 48);
            }
            *(_DWORD *)(v53 - 4) = v49;
            v55 = v53 - 4;
            *(_QWORD *)(a2 + 48) = v55;
            sub_1C4D66288((uint64_t *)a2, 12, *(_DWORD *)(a2 + 32) - v55 + *(_DWORD *)(a2 + 40));
            goto LABEL_67;
          }
        }
        v54 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a2 + 48) + v54++) = 0;
        while (v51 != v54);
        v53 = *(_QWORD *)(a2 + 48);
        v52 = *(_QWORD *)(a2 + 56);
        goto LABEL_64;
      }
    }
    v48 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v48++) = 0;
    while (v46 != v48);
    v44 = *(_QWORD *)(a2 + 40);
    v47 = *(_QWORD *)(a2 + 48);
    v43 = *(_QWORD *)(a2 + 32);
    goto LABEL_53;
  }
LABEL_67:
  v56 = sub_1C4D66580(a2, v41);
  if (v5)
    operator delete(v5);
  return v56 | 0x100000000;
}

uint64_t sub_1C4D684AC(uint64_t a1)
{
  void *v2;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E81328C0;
  *(_QWORD *)(a1 + 96) = off_1E81A6E70;
  if (*(_DWORD *)(a1 + 152) == 1)
  {
    v4 = *(_QWORD *)(a1 + 112);
    if (v4)
      MEMORY[0x1CAA32F9C](v4, 0x1000C8077774924);
  }
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1C4D68534(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E81328C0;
  *(_QWORD *)(a1 + 96) = off_1E81A6E70;
  if (*(_DWORD *)(a1 + 152) == 1)
  {
    v3 = *(_QWORD *)(a1 + 112);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8077774924);
  }
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4D685CC()
{
  return "ClauseView";
}

uint64_t sub_1C4D685DC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  const char *v8;
  uint64_t *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  uint64_t *v15;
  uint64_t v16;

  result = sub_1C4D68708(a1);
  *(_QWORD *)(a1 + 64) = a2;
  v5 = *(_QWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 56))
    v6 = v5 == 0;
  else
    v6 = 0;
  if (v6)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
    v7 = result;
    if (result)
      goto LABEL_6;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 24) - v5;
    if (v7)
    {
LABEL_6:
      result = sub_1C6174E14((llvm::raw_ostream *)a1, v7);
      goto LABEL_14;
    }
  }
  v9 = (uint64_t *)(a1 + 16);
  v8 = *(const char **)(a1 + 16);
  v10 = *(const char **)(a1 + 32);
  v11 = v10 - v8;
  if (v10 != v8)
  {
    *(_QWORD *)(a1 + 32) = v8;
    result = llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, v8, v11);
  }
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    result = *v9;
    if (*v9)
      result = MEMORY[0x1CAA32F9C](result, 0x1000C8077774924, v11);
  }
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *v9 = 0;
LABEL_14:
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(const char **)(v12 + 32);
  v15 = (uint64_t *)(v12 + 16);
  v14 = *(const char **)(v12 + 16);
  v16 = v13 - v14;
  if (v13 != v14)
  {
    *(_QWORD *)(v12 + 32) = v14;
    result = llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)v12, v14, v16);
  }
  if (*(_DWORD *)(v12 + 56) == 1)
  {
    result = *v15;
    if (*v15)
      result = MEMORY[0x1CAA32F9C](result, 0x1000C8077774924, v16);
  }
  *(_DWORD *)(v12 + 56) = 0;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *v15 = 0;
  *(_QWORD *)(a1 + 80) = 0;
  return result;
}

uint64_t sub_1C4D68708(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  const char *v6;
  _QWORD *v7;
  const char *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  result = *(_QWORD *)(a1 + 64);
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (*(_DWORD *)(a1 + 56))
      v4 = v3 == 0;
    else
      v4 = 0;
    if (v4)
    {
      v9 = a1;
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
      result = *(_QWORD *)(v9 + 64);
    }
    else
    {
      v5 = *(_QWORD *)(a1 + 24) - v3;
    }
    if (v5)
    {
      return sub_1C6174E14((llvm::raw_ostream *)result, v5);
    }
    else
    {
      v7 = (_QWORD *)(result + 16);
      v6 = *(const char **)(result + 16);
      v8 = *(const char **)(result + 32);
      if (v8 != v6)
      {
        *(_QWORD *)(result + 32) = v6;
        v11 = (_QWORD *)(result + 16);
        v13 = result;
        llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)result, v6, v8 - v6);
        v7 = v11;
        result = v13;
      }
      if (*(_DWORD *)(result + 56) == 1)
      {
        if (*v7)
        {
          v10 = v7;
          v12 = result;
          MEMORY[0x1CAA32F9C](*v7, 0x1000C8077774924);
          v7 = v10;
          result = v12;
        }
      }
      *(_DWORD *)(result + 56) = 0;
      v7[1] = 0;
      v7[2] = 0;
      *v7 = 0;
    }
  }
  return result;
}

llvm::raw_ostream *sub_1C4D687F0(llvm::raw_ostream *this)
{
  const char *v2;
  const char *v3;
  char *v4;
  uint64_t v6;

  *(_QWORD *)this = &off_1E81A1100;
  v2 = (const char *)*((_QWORD *)this + 4);
  v3 = (const char *)*((_QWORD *)this + 2);
  if (v2 != v3)
  {
    *((_QWORD *)this + 4) = v3;
    llvm::raw_ostream::flush_tied_then_write(this, v3, v2 - v3);
  }
  sub_1C4D68708((uint64_t)this);
  v4 = (char *)*((_QWORD *)this + 11);
  if (v4 != (char *)this + 112)
    free(v4);
  *(_QWORD *)this = off_1E81A6E70;
  if (*((_DWORD *)this + 14) == 1)
  {
    v6 = *((_QWORD *)this + 2);
    if (v6)
      MEMORY[0x1CAA32F9C](v6, 0x1000C8077774924);
  }
  return this;
}

uint64_t sub_1C4D6889C(uint64_t a1, void *__src, size_t __n)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  if (*(_QWORD *)(a1 + 72) <= 3uLL)
    *(_QWORD *)(a1 + 72) = 4;
  v7 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v8 = (~(_BYTE)__n + (_BYTE)v7 - (*(_BYTE *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v7 - v6 < v8)
  {
    sub_1C4D663A4((uint64_t *)a1, v8);
    *(_QWORD *)(a1 + 48) -= v8;
  }
  else
  {
    v9 = v7 - v8;
    *(_QWORD *)(a1 + 48) = v7 - v8;
    if (!v8)
      goto LABEL_5;
  }
  v17 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + v17++) = 0;
  while (v8 != v17);
  v9 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
LABEL_5:
  if (v9 == v6)
  {
    sub_1C4D663A4((uint64_t *)a1, 1uLL);
    v9 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v9 - 1;
  *(_BYTE *)(v9 - 1) = 0;
  if (__n)
  {
    v10 = *(_QWORD *)(a1 + 48);
    if (v10 - *(_QWORD *)(a1 + 56) < __n)
    {
      sub_1C4D663A4((uint64_t *)a1, __n);
      v10 = *(_QWORD *)(a1 + 48);
    }
    *(_QWORD *)(a1 + 48) = v10 - __n;
    memcpy((void *)(v10 - __n), __src, __n);
  }
  if (*(_QWORD *)(a1 + 72) <= 3uLL)
    *(_QWORD *)(a1 + 72) = 4;
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = ((_BYTE)v11 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v11 - v12 < v13)
  {
    sub_1C4D663A4((uint64_t *)a1, ((_BYTE)v11 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(_QWORD *)(a1 + 48) -= v13;
  }
  else
  {
    v14 = v11 - v13;
    *(_QWORD *)(a1 + 48) = v14;
    if (!v13)
      goto LABEL_15;
  }
  v18 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + v18++) = 0;
  while (v13 != v18);
  v14 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
LABEL_15:
  if ((unint64_t)(v14 - v12) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a1, 4uLL);
    v14 = *(_QWORD *)(a1 + 48);
  }
  *(_DWORD *)(v14 - 4) = __n;
  v15 = v14 - 4;
  *(_QWORD *)(a1 + 48) = v15;
  return (*(_DWORD *)(a1 + 32) - v15 + *(_DWORD *)(a1 + 40));
}

uint64_t sub_1C4D68A6C(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;

  if (*(_QWORD *)(a1 + 72) <= 3uLL)
    *(_QWORD *)(a1 + 72) = 4;
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = ((_BYTE)v4 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v4 - v5 < v6)
  {
    v11 = ((_BYTE)v4 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
    sub_1C4D663A4((uint64_t *)a1, v6);
    v6 = v11;
    *(_QWORD *)(a1 + 48) -= v11;
  }
  else
  {
    v7 = v4 - v6;
    *(_QWORD *)(a1 + 48) = v7;
    if (!v6)
      goto LABEL_5;
  }
  v10 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + v10++) = 0;
  while (v6 != v10);
  v7 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
LABEL_5:
  if ((unint64_t)(v7 - v5) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a1, 4uLL);
    v7 = *(_QWORD *)(a1 + 48);
  }
  *(_DWORD *)(v7 - 4) = a2;
  v8 = v7 - 4;
  *(_QWORD *)(a1 + 48) = v8;
  return (*(_DWORD *)(a1 + 32) - v8 + *(_DWORD *)(a1 + 40));
}

uint64_t sub_1C4D68B54(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = result;
  if (*(_QWORD *)(result + 72) < a3)
    *(_QWORD *)(result + 72) = a3;
  v4 = *(_QWORD *)(result + 48);
  v5 = (a3 - 1) & (-a2 - (*(_DWORD *)(result + 32) - v4 + *(_DWORD *)(result + 40)));
  if (v4 - *(_QWORD *)(result + 56) < v5)
  {
    result = sub_1C4D663A4((uint64_t *)result, (a3 - 1) & (-a2 - (*(_DWORD *)(result + 32) - v4 + *(_DWORD *)(result + 40))));
    *(_QWORD *)(v3 + 48) -= v5;
  }
  else
  {
    *(_QWORD *)(result + 48) = v4 - v5;
    if (!v5)
      return result;
  }
  v6 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(v3 + 48) + v6++) = 0;
  while (v5 != v6);
  return result;
}

void sub_1C4D68BF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  _BYTE *v10;
  unint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;

  v3 = *(unsigned int *)(a3 + 24);
  if ((int)v3 >= 1)
  {
    v5 = 0;
    v21 = a2;
    while (1)
    {
      v6 = *(_QWORD *)(a3 + 16);
      v7 = *(unsigned __int8 *)(v6 + 16 * v5);
      if (v7 == 2)
        break;
      if (v7 == 1)
      {
        v8 = *(unsigned int *)(v6 + 16 * v5 + 8);
LABEL_7:
        v9 = *(_QWORD **)a2;
        v10 = *(_BYTE **)(*(_QWORD *)a2 + 520);
        v11 = *(_QWORD *)(*(_QWORD *)a2 + 528);
        if ((unint64_t)v10 >= v11)
        {
          v13 = (_BYTE *)v9[64];
          v14 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3) + 1;
          if (v14 > 0xAAAAAAAAAAAAAAALL)
            abort();
          v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v13) >> 3);
          if (2 * v15 > v14)
            v14 = 2 * v15;
          if (v15 >= 0x555555555555555)
            v16 = 0xAAAAAAAAAAAAAAALL;
          else
            v16 = v14;
          if (v16)
          {
            if (v16 > 0xAAAAAAAAAAAAAAALL)
              sub_1C4764EE4();
            v17 = (char *)operator new(24 * v16);
          }
          else
          {
            v17 = 0;
          }
          v18 = &v17[8 * ((v10 - v13) >> 3)];
          *v18 = v7;
          *((_QWORD *)v18 + 1) = v8;
          *((_DWORD *)v18 + 4) = v5;
          v19 = v18;
          if (v10 != v13)
          {
            do
            {
              v20 = *(_OWORD *)(v10 - 24);
              *((_DWORD *)v19 - 2) = *((_DWORD *)v10 - 2);
              *(_OWORD *)(v19 - 24) = v20;
              v19 -= 24;
              v10 -= 24;
            }
            while (v10 != v13);
            v10 = (_BYTE *)v9[64];
          }
          v9[64] = v19;
          v12 = v18 + 24;
          v9[65] = v18 + 24;
          v9[66] = &v17[24 * v16];
          if (v10)
            operator delete(v10);
          a2 = v21;
        }
        else
        {
          *v10 = v7;
          *((_QWORD *)v10 + 1) = v8;
          v12 = v10 + 24;
          *((_DWORD *)v10 + 4) = v5;
        }
        v9[65] = v12;
      }
      if (++v5 == v3)
        return;
    }
    v8 = *(_QWORD *)(v6 + 16 * v5 + 8);
    goto LABEL_7;
  }
}

_BYTE *sub_1C4D68DB0(_BYTE *result)
{
  result[40] = byte_1EF8F7670;
  result[41] = byte_1EF8F7671;
  result[42] = byte_1EF8F7672;
  result[43] = byte_1EF8F7673;
  return result;
}

_BYTE *sub_1C4D68DF4(_BYTE *result, int a2, char a3)
{
  if (a2 == 3)
  {
    result[43] = a3;
  }
  else if (a2 == 2)
  {
    result[42] = a3;
  }
  else
  {
    result[40] = a3;
  }
  return result;
}

void sub_1C4D68E1C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  void **v31;

  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  if (*(_BYTE *)(a1 + 43))
  {
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(_QWORD *)(a1 + 32);
    v12 = operator new();
    sub_1C4D6C708(v12, v10, v11, a2, a3, a4);
    v13 = (char *)operator new(8uLL);
    *(_QWORD *)v13 = v12;
    v14 = v13 + 8;
    *(_QWORD *)(a5 + 8) = v13 + 8;
    *(_QWORD *)(a5 + 16) = v13 + 8;
    *(_QWORD *)a5 = v13;
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  if (*(_BYTE *)(a1 + 40))
  {
    v15 = *(_QWORD *)(a1 + 8);
    v16 = operator new();
    sub_1C4D694B8(v16, v15, a2, a3, a4);
    v17 = v14 - v13;
    v18 = (v14 - v13) >> 3;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61)
      abort();
    if (v17 >> 2 > v19)
      v19 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    if (v20)
    {
      if (v20 >> 61)
        sub_1C4764EE4();
      v21 = (char *)operator new(8 * v20);
    }
    else
    {
      v21 = 0;
    }
    v23 = (uint64_t *)&v21[8 * v18];
    v24 = &v21[8 * v20];
    *v23 = v16;
    v22 = (uint64_t)(v23 + 1);
    if (v14 == v13)
    {
      *(_QWORD *)a5 = v23;
      *(_QWORD *)(a5 + 8) = v22;
      *(_QWORD *)(a5 + 16) = v24;
    }
    else
    {
      do
      {
        v25 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *--v23 = v25;
        *(_QWORD *)v14 = 0;
      }
      while (v14 != v13);
      v13 = *(char **)a5;
      v26 = *(char **)(a5 + 8);
      *(_QWORD *)a5 = v23;
      *(_QWORD *)(a5 + 8) = v22;
      *(_QWORD *)(a5 + 16) = v24;
      while (v26 != v13)
      {
        v28 = *((_QWORD *)v26 - 1);
        v26 -= 8;
        v27 = v28;
        *(_QWORD *)v26 = 0;
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 80))(v27);
      }
    }
    if (v13)
      operator delete(v13);
    *(_QWORD *)(a5 + 8) = v22;
  }
  else
  {
    v22 = (uint64_t)v14;
  }
  sub_1C5FE269C(*(_QWORD *)(a1 + 8), a2, *(_QWORD *)(a1 + 32), a3, a4, *(unsigned __int8 *)(a1 + 41), (uint64_t)&v29);
  sub_1C4D63E68((char **)a5, v22, v29, v30, v30 - v29);
  v31 = (void **)&v29;
  sub_1C4D63DEC(&v31);
}

void LLVMInitializeAGX3TargetMCA()
{
  qword_1EF8F6948 = (uint64_t)sub_1C4D69058;
  *(_QWORD *)algn_1EF8F6950 = sub_1C4D690B8;
}

uint64_t sub_1C4D69058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a3;
  *(_QWORD *)result = &off_1E8132958;
  *(_QWORD *)(result + 8) = a1;
  *(_QWORD *)(result + 32) = a4;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

_QWORD *sub_1C4D690B8(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = a1;
  result[2] = a2;
  *result = &off_1E81329B0;
  return result;
}

void sub_1C4D69104()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4D6911C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D69134()
{
  qword_1EF8EFB98 = (uint64_t)"AGX3 Custom View Options";
  unk_1EF8EFBA0 = 24;
  qword_1EF8EFBA8 = (uint64_t)"";
  unk_1EF8EFBB0 = 0;
  return llvm::cl::OptionCategory::registerCategory((llvm::cl::OptionCategory *)&qword_1EF8EFB98);
}

uint64_t sub_1C4D6915C(uint64_t result, int a2)
{
  int v2;
  int v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  const char *v10;

  switch(a2)
  {
    case 0:
      *(_BYTE *)(result + 23) = 7;
      *(_DWORD *)result = 1852534357;
      v2 = 1853321070;
      goto LABEL_24;
    case 1:
      *(_BYTE *)(result + 23) = 4;
      v3 = 1752457549;
      goto LABEL_19;
    case 2:
      *(_BYTE *)(result + 23) = 10;
      *(_WORD *)(result + 8) = 28271;
      v4 = "Comparison";
      goto LABEL_32;
    case 3:
      *(_BYTE *)(result + 23) = 6;
      *(_DWORD *)result = 1701602643;
      v5 = 29795;
      goto LABEL_14;
    case 4:
      v6 = "BitManipulation";
      goto LABEL_16;
    case 5:
      *(_BYTE *)(result + 23) = 10;
      *(_WORD *)(result + 8) = 28271;
      v4 = "Conversion";
      goto LABEL_32;
    case 6:
      *(_BYTE *)(result + 23) = 7;
      *(_DWORD *)result = 1836213584;
      v2 = 1702131053;
      goto LABEL_24;
    case 7:
      *(_BYTE *)(result + 23) = 6;
      *(_DWORD *)result = 1969513810;
      v5 = 25955;
      goto LABEL_14;
    case 8:
      *(_BYTE *)(result + 23) = 7;
      *(_DWORD *)result = 1953394499;
      v2 = 1819243124;
      goto LABEL_24;
    case 9:
      *(_BYTE *)(result + 23) = 11;
      *(_DWORD *)(result + 7) = 1852795252;
      v7 = "Predication";
      goto LABEL_29;
    case 10:
      *(_BYTE *)(result + 23) = 6;
      *(_DWORD *)result = 1886216531;
      v5 = 25964;
LABEL_14:
      *(_WORD *)(result + 4) = v5;
      *(_BYTE *)(result + 6) = 0;
      return result;
    case 11:
      v6 = "Synchronization";
LABEL_16:
      *(_BYTE *)(result + 23) = 15;
      *(_QWORD *)result = *(_QWORD *)v6;
      *(_QWORD *)(result + 7) = *(_QWORD *)(v6 + 7);
      *(_BYTE *)(result + 15) = 0;
      return result;
    case 12:
      *(_BYTE *)(result + 23) = 9;
      *(_WORD *)(result + 8) = 101;
      v8 = "LoadStore";
      goto LABEL_22;
    case 13:
      *(_BYTE *)(result + 23) = 4;
      v3 = 1684107084;
LABEL_19:
      *(_DWORD *)result = v3;
      *(_BYTE *)(result + 4) = 0;
      return result;
    case 14:
      *(_BYTE *)(result + 23) = 5;
      strcpy((char *)result, "Store");
      return result;
    case 15:
      *(_BYTE *)(result + 23) = 9;
      *(_WORD *)(result + 8) = 87;
      v8 = "AtomicRMW";
LABEL_22:
      *(_QWORD *)result = *(_QWORD *)v8;
      return result;
    case 16:
      *(_BYTE *)(result + 23) = 7;
      *(_DWORD *)result = 1920098626;
      v2 = 1919248754;
LABEL_24:
      *(_DWORD *)(result + 3) = v2;
      *(_BYTE *)(result + 7) = 0;
      return result;
    case 17:
      *(_BYTE *)(result + 23) = 16;
      v9 = "FragmentFeedback";
      goto LABEL_27;
    case 18:
      *(_BYTE *)(result + 23) = 16;
      v9 = "VertexProcessing";
LABEL_27:
      *(_OWORD *)result = *(_OWORD *)v9;
      *(_BYTE *)(result + 16) = 0;
      return result;
    case 19:
      *(_BYTE *)(result + 23) = 11;
      *(_DWORD *)(result + 7) = 1936942435;
      v7 = "ImageAccess";
LABEL_29:
      *(_QWORD *)result = *(_QWORD *)v7;
      *(_BYTE *)(result + 11) = 0;
      return result;
    case 20:
      *(_BYTE *)(result + 23) = 12;
      *(_DWORD *)(result + 8) = 1953391981;
      v10 = "DataMovement";
      goto LABEL_34;
    case 21:
      *(_BYTE *)(result + 23) = 10;
      *(_WORD *)(result + 8) = 26478;
      v4 = "RayTracing";
LABEL_32:
      *(_QWORD *)result = *(_QWORD *)v4;
      *(_BYTE *)(result + 10) = 0;
      return result;
    case 22:
      *(_BYTE *)(result + 23) = 12;
      *(_DWORD *)(result + 8) = 1684107084;
      v10 = "ImgBlockLoad";
LABEL_34:
      *(_QWORD *)result = *(_QWORD *)v10;
      *(_BYTE *)(result + 12) = 0;
      break;
    case 23:
      *(_BYTE *)(result + 23) = 13;
      strcpy((char *)result, "ImgBlockWrite");
      break;
    case 24:
      *(_BYTE *)(result + 23) = 8;
      strcpy((char *)result, "ImgWrite");
      break;
    default:
      *(_BYTE *)(result + 23) = 1;
      *(_WORD *)result = 33;
      break;
  }
  return result;
}

uint64_t sub_1C4D694B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = off_1E81329E0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = &off_1E812F0A8;
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = a5;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 72) = &unk_1E81A7208;
  *(_QWORD *)(a1 + 136) = a1 + 48;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v7 = 257;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  *(_QWORD *)(a1 + 144) = a1 + 160;
  *(_QWORD *)(a1 + 152) = 0x1000000000;
  sub_1C4D6C4B8((char *)(a1 + 144), a5, (__int128 *)&v7);
  return a1;
}

uint64_t sub_1C4D69564(uint64_t result, int a2)
{
  int v2;
  int v3;
  unsigned __int16 v4;
  uint64_t v5;
  int v6;
  __int16 v7;

  switch(a2)
  {
    case 0:
      *(_BYTE *)(result + 23) = 7;
      *(_DWORD *)result = 1852534357;
      v2 = 1853321070;
      goto LABEL_4;
    case 1:
      *(_BYTE *)(result + 23) = 4;
      v3 = 1701736270;
      goto LABEL_25;
    case 2:
      *(_BYTE *)(result + 23) = 4;
      v3 = 1313163073;
      goto LABEL_25;
    case 3:
      *(_BYTE *)(result + 23) = 3;
      v4 = 17987;
      goto LABEL_17;
    case 4:
      *(_BYTE *)(result + 23) = 8;
      v5 = 0x4E45474126554643;
      goto LABEL_22;
    case 5:
      *(_BYTE *)(result + 23) = 3;
      v6 = 3551558;
      goto LABEL_18;
    case 6:
      *(_BYTE *)(result + 23) = 3;
      v6 = 3289926;
      goto LABEL_18;
    case 7:
      *(_BYTE *)(result + 23) = 2;
      strcpy((char *)result, "IC");
      return result;
    case 8:
      *(_BYTE *)(result + 23) = 6;
      *(_DWORD *)result = 1127891785;
      v7 = 22605;
      goto LABEL_15;
    case 9:
      *(_BYTE *)(result + 23) = 6;
      *(_DWORD *)result = 1127891785;
      v7 = 21590;
      goto LABEL_15;
    case 10:
      *(_BYTE *)(result + 23) = 6;
      *(_DWORD *)result = 1228555081;
      v7 = 21325;
LABEL_15:
      *(_WORD *)(result + 4) = v7;
      *(_BYTE *)(result + 6) = 0;
      return result;
    case 11:
      *(_BYTE *)(result + 23) = 3;
      v4 = 22605;
LABEL_17:
      v6 = v4 | 0x550000;
LABEL_18:
      *(_DWORD *)result = v6;
      return result;
    case 12:
      *(_BYTE *)(result + 23) = 4;
      v3 = 1297237328;
      goto LABEL_25;
    case 13:
      *(_BYTE *)(result + 23) = 8;
      v5 = 0x363146264D524550;
      goto LABEL_22;
    case 14:
      *(_BYTE *)(result + 23) = 8;
      v5 = 0x323346264D524550;
LABEL_22:
      *(_QWORD *)result = v5;
      *(_BYTE *)(result + 8) = 0;
      break;
    case 15:
      *(_BYTE *)(result + 23) = 9;
      strcpy((char *)result, "PERM&SCIB");
      break;
    case 16:
      *(_BYTE *)(result + 23) = 4;
      v3 = 1112097619;
LABEL_25:
      *(_DWORD *)result = v3;
      *(_BYTE *)(result + 4) = 0;
      break;
    default:
      *(_BYTE *)(result + 23) = 7;
      *(_DWORD *)result = 1635151433;
      v2 = 1684630625;
LABEL_4:
      *(_DWORD *)(result + 3) = v2;
      *(_BYTE *)(result + 7) = 0;
      break;
  }
  return result;
}

_QWORD *sub_1C4D6976C(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _DWORD *v6;

  if (*(_DWORD *)a2 == 4)
  {
    v2 = (unint64_t)**(unsigned int **)(a2 + 8) % result[5];
    if (*(_QWORD *)(a2 + 24))
    {
      v3 = *(_QWORD *)(result[1] + 192);
      v4 = (**(_DWORD **)(a2 + 16) - 1);
      if ((v3 & 0x2000000000000) == 0)
      {
        if ((v3 & 0x800000000000) == 0)
          __asm { BR              X4 }
        __asm { BR              X4 }
      }
      __asm { BR              X4 }
    }
    v5 = *(_DWORD *)(result[4] + 168 * v2);
    v6 = (_DWORD *)(result[18] + 28 * v2);
    v6[3] = sub_1C4D69A44(v5);
    v6[4] = sub_1C4D69A6C(v5);
    v6[5] = sub_1C4D69A94(v5);
    result = (_QWORD *)sub_1C4D69ABC(v5);
    v6[6] = (_DWORD)result;
  }
  return result;
}

uint64_t sub_1C4D69A44(int a1)
{
  if ((a1 - 359) > 0x22DC)
    return 0;
  else
    return dword_1C85CF1D0[a1 - 359];
}

uint64_t sub_1C4D69A6C(int a1)
{
  if ((a1 - 359) > 0x22DC)
    return 0;
  else
    return dword_1C85D7D44[a1 - 359];
}

uint64_t sub_1C4D69A94(int a1)
{
  if ((a1 - 359) > 0x22DC)
    return 0;
  else
    return dword_1C85E08B8[a1 - 359];
}

uint64_t sub_1C4D69ABC(int a1)
{
  if ((a1 - 359) > 0x22DC)
    return 0;
  else
    return dword_1C85E942C[a1 - 359];
}

void sub_1C4D69AE4(uint64_t a1, llvm::raw_ostream *a2)
{
  char **v4;
  char *v5;
  llvm::raw_ostream *v6;
  char *v7;
  char **v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  _BYTE *v15;
  char *v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  char **v19;
  char *v20;
  llvm::raw_ostream *v21;
  _BYTE *v22;
  char **v23;
  char *v24;
  llvm::raw_ostream *v25;
  _BYTE *v26;
  unint64_t v27;
  const char *v28;
  const char *v29;
  const char *v30;
  const char *v31;
  char *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  int *v40;
  void **v41;
  int *v42;
  const char *v43;
  char *v44;
  const char *v45;
  void **v46;
  void **v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  unsigned __int8 v53;
  unint64_t v54;
  unsigned __int8 v55;
  __int16 v56;
  unint64_t v57;
  uint64_t v58;
  llvm::raw_ostream *v59;
  char v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  void **v65;
  __int16 v66;
  unsigned __int16 v67;
  unsigned __int16 v68;
  unsigned __int16 v69;
  int v70;
  int v71;
  __int16 v72;
  llvm::raw_ostream *v73;
  const char *v74;
  const char *v75;
  char v76;
  BOOL v77;
  uint64_t (**v78)(llvm::format_object_base *__hidden);
  const char *v79;
  const char *v80;
  unint64_t first_not_of;
  unint64_t v82;
  char *v83;
  size_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  size_t v89;
  int *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  const char *v94;
  void *__src[2];
  uint64_t v96;
  void *__p[2];
  uint64_t v98;
  uint64_t (**v99)(llvm::format_object_base *__hidden);
  const char *v100;
  void **v101;
  void (**v102)(llvm::raw_ostream *__hidden);
  int v103;
  char *v104;
  char *v105;
  char *v106;
  char v107;
  uint64_t v108;
  int v109;
  void **v110;
  char *v111;
  size_t v112;
  uint64_t v113;

  v111 = 0;
  v112 = 0;
  v113 = 0;
  v103 = 0;
  v107 = 0;
  v108 = 0;
  v102 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v110 = (void **)&v111;
  v109 = 0;
  v105 = 0;
  v106 = 0;
  v104 = 0;
  if (*(_QWORD *)(a1 + 40))
  {
    v4 = &v106;
    llvm::raw_ostream::write((llvm::raw_ostream *)&v102, "\n\nAGX3 Instruction Info:\n", 0x19uLL);
    v5 = v106;
    if (byte_1ED7EED78)
    {
      if ((unint64_t)(v105 - v106) > 0xB)
      {
        *((_DWORD *)v106 + 2) = 174417007;
        *(_QWORD *)v5 = *(_QWORD *)"[0]: Opcode\n";
        v5 = v106 + 12;
        v106 += 12;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v102, "[0]: Opcode\n", 0xCuLL);
        v5 = v106;
      }
    }
    if ((unint64_t)(v105 - v5) > 0x11)
    {
      *((_WORD *)v5 + 8) = 2661;
      *(_OWORD *)v5 = *(_OWORD *)"[1]: >=Quad Scope\n";
      v7 = v106 + 18;
      v106 += 18;
      v6 = (llvm::raw_ostream *)&v102;
      v8 = &v106;
    }
    else
    {
      v6 = llvm::raw_ostream::write((llvm::raw_ostream *)&v102, "[1]: >=Quad Scope\n", 0x12uLL);
      v8 = (char **)((char *)v6 + 32);
      v7 = (char *)*((_QWORD *)v6 + 4);
    }
    if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 0x11uLL)
    {
      *((_WORD *)v7 + 8) = 2661;
      *(_OWORD *)v7 = *(_OWORD *)"[2]: >=SIMD Scope\n";
      *v8 += 18;
    }
    else
    {
      v6 = llvm::raw_ostream::write(v6, "[2]: >=SIMD Scope\n", 0x12uLL);
    }
    v9 = (_OWORD *)*((_QWORD *)v6 + 4);
    if (*((_QWORD *)v6 + 3) - (_QWORD)v9 > 0xFuLL)
    {
      *v9 = *(_OWORD *)"[3]: Instr Rate\n";
      v10 = *((_QWORD *)v6 + 4) + 16;
      *((_QWORD *)v6 + 4) = v10;
    }
    else
    {
      v6 = llvm::raw_ostream::write(v6, "[3]: Instr Rate\n", 0x10uLL);
      v10 = *((_QWORD *)v6 + 4);
    }
    if ((unint64_t)(*((_QWORD *)v6 + 3) - v10) > 0x10)
    {
      *(_BYTE *)(v10 + 16) = 10;
      *(_OWORD *)v10 = *(_OWORD *)"[4]: ALU Subpipe\n";
      v11 = *((_QWORD *)v6 + 4) + 17;
      *((_QWORD *)v6 + 4) = v11;
    }
    else
    {
      v6 = llvm::raw_ostream::write(v6, "[4]: ALU Subpipe\n", 0x11uLL);
      v11 = *((_QWORD *)v6 + 4);
    }
    if ((unint64_t)(*((_QWORD *)v6 + 3) - v11) > 0xA)
    {
      *(_DWORD *)(v11 + 7) = 174420079;
      *(_QWORD *)v11 = *(_QWORD *)"[5]: Scope\n";
      v12 = *((_QWORD *)v6 + 4) + 11;
      *((_QWORD *)v6 + 4) = v12;
    }
    else
    {
      v6 = llvm::raw_ostream::write(v6, "[5]: Scope\n", 0xBuLL);
      v12 = *((_QWORD *)v6 + 4);
    }
    if ((unint64_t)(*((_QWORD *)v6 + 3) - v12) > 0x10)
    {
      *(_BYTE *)(v12 + 16) = 10;
      *(_OWORD *)v12 = *(_OWORD *)"[6]: Memory Type\n";
      v13 = (void *)(*((_QWORD *)v6 + 4) + 17);
      *((_QWORD *)v6 + 4) = v13;
    }
    else
    {
      v6 = llvm::raw_ostream::write(v6, "[6]: Memory Type\n", 0x11uLL);
      v13 = (void *)*((_QWORD *)v6 + 4);
    }
    if (*((_QWORD *)v6 + 3) - (_QWORD)v13 > 0xEuLL)
    {
      qmemcpy(v13, "[7]: Data Type\n", 15);
      v14 = (void *)(*((_QWORD *)v6 + 4) + 15);
      *((_QWORD *)v6 + 4) = v14;
    }
    else
    {
      v6 = llvm::raw_ostream::write(v6, "[7]: Data Type\n", 0xFuLL);
      v14 = (void *)*((_QWORD *)v6 + 4);
    }
    if (*((_QWORD *)v6 + 3) - (_QWORD)v14 > 0xEuLL)
    {
      qmemcpy(v14, "[8]: Operation\n", 15);
      v15 = (_BYTE *)(*((_QWORD *)v6 + 4) + 15);
      *((_QWORD *)v6 + 4) = v15;
    }
    else
    {
      v6 = llvm::raw_ostream::write(v6, "[8]: Operation\n", 0xFuLL);
      v15 = (_BYTE *)*((_QWORD *)v6 + 4);
    }
    if (*((_BYTE **)v6 + 3) == v15)
    {
      llvm::raw_ostream::write(v6, "\n", 1uLL);
    }
    else
    {
      *v15 = 10;
      ++*((_QWORD *)v6 + 4);
    }
    if (byte_1ED7EED78)
    {
      HIBYTE(v98) = 3;
      LODWORD(__p[0]) = 6107227;
      v99 = &off_1E8132A78;
      v100 = "%-4s";
      v101 = __p;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v102, (uint64_t)&v99);
      if (v105 == v106)
        llvm::raw_ostream::write((llvm::raw_ostream *)&v102, " ", 1uLL);
      else
        *v106++ = 32;
      if (SHIBYTE(v98) < 0)
        operator delete(__p[0]);
    }
    v16 = v106;
    if ((unint64_t)(v105 - v106) > 2)
    {
      v106[2] = 93;
      *(_WORD *)v16 = 12635;
      v18 = v106 + 3;
      v106 += 3;
      v17 = (llvm::raw_ostream *)&v102;
      v19 = &v106;
    }
    else
    {
      v17 = llvm::raw_ostream::write((llvm::raw_ostream *)&v102, "[1]", 3uLL);
      v19 = (char **)((char *)v17 + 32);
      v18 = (_BYTE *)*((_QWORD *)v17 + 4);
    }
    if (*((_BYTE **)v17 + 3) == v18)
    {
      llvm::raw_ostream::write(v17, " ", 1uLL);
    }
    else
    {
      *v18 = 32;
      ++*v19;
    }
    v20 = v106;
    if ((unint64_t)(v105 - v106) > 2)
    {
      v106[2] = 93;
      *(_WORD *)v20 = 12891;
      v22 = v106 + 3;
      v106 += 3;
      v21 = (llvm::raw_ostream *)&v102;
      v23 = &v106;
    }
    else
    {
      v21 = llvm::raw_ostream::write((llvm::raw_ostream *)&v102, "[2]", 3uLL);
      v23 = (char **)((char *)v21 + 32);
      v22 = (_BYTE *)*((_QWORD *)v21 + 4);
    }
    if (*((_BYTE **)v21 + 3) == v22)
    {
      llvm::raw_ostream::write(v21, " ", 1uLL);
    }
    else
    {
      *v22 = 32;
      ++*v23;
    }
    v24 = v106;
    if ((unint64_t)(v105 - v106) > 2)
    {
      v106[2] = 93;
      *(_WORD *)v24 = 13147;
      v26 = v106 + 3;
      v106 += 3;
      v25 = (llvm::raw_ostream *)&v102;
    }
    else
    {
      v25 = llvm::raw_ostream::write((llvm::raw_ostream *)&v102, "[3]", 3uLL);
      v4 = (char **)((char *)v25 + 32);
      v26 = (_BYTE *)*((_QWORD *)v25 + 4);
    }
    if (*((_BYTE **)v25 + 3) == v26)
    {
      llvm::raw_ostream::write(v25, " ", 1uLL);
    }
    else
    {
      *v26 = 32;
      ++*v4;
    }
    HIBYTE(v98) = 3;
    LODWORD(__p[0]) = 6108251;
    v99 = &off_1E8132A78;
    v100 = "%-9s";
    v101 = __p;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v102, (uint64_t)&v99);
    if (v105 == v106)
      llvm::raw_ostream::write((llvm::raw_ostream *)&v102, " ", 1uLL);
    else
      *v106++ = 32;
    if (SHIBYTE(v98) < 0)
      operator delete(__p[0]);
    HIBYTE(v98) = 3;
    LODWORD(__p[0]) = 6108507;
    v27 = (unint64_t)"%-3s";
    if (byte_1ED7EEE38)
      v28 = "%-11s";
    else
      v28 = "%-3s";
    v99 = &off_1E8132A78;
    v100 = v28;
    v101 = __p;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v102, (uint64_t)&v99);
    if (v105 == v106)
      llvm::raw_ostream::write((llvm::raw_ostream *)&v102, " ", 1uLL);
    else
      *v106++ = 32;
    if (SHIBYTE(v98) < 0)
      operator delete(__p[0]);
    HIBYTE(v98) = 3;
    LODWORD(__p[0]) = 6108763;
    if (byte_1ED7EEE38)
      v29 = "%-10s";
    else
      v29 = "%-3s";
    v99 = &off_1E8132A78;
    v100 = v29;
    v101 = __p;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v102, (uint64_t)&v99);
    if (v105 == v106)
      llvm::raw_ostream::write((llvm::raw_ostream *)&v102, " ", 1uLL);
    else
      *v106++ = 32;
    if (SHIBYTE(v98) < 0)
      operator delete(__p[0]);
    HIBYTE(v98) = 3;
    LODWORD(__p[0]) = 6109019;
    if (byte_1ED7EEE38)
      v30 = "%-7s";
    else
      v30 = "%-3s";
    v99 = &off_1E8132A78;
    v100 = v30;
    v101 = __p;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v102, (uint64_t)&v99);
    if (v105 == v106)
      llvm::raw_ostream::write((llvm::raw_ostream *)&v102, " ", 1uLL);
    else
      *v106++ = 32;
    if (SHIBYTE(v98) < 0)
      operator delete(__p[0]);
    HIBYTE(v98) = 3;
    LODWORD(__p[0]) = 6109275;
    if (byte_1ED7EEE38)
      v31 = "%-15s";
    else
      v31 = "%-6s";
    v99 = &off_1E8132A78;
    v100 = v31;
    v101 = __p;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v102, (uint64_t)&v99);
    if (v105 == v106)
      llvm::raw_ostream::write((llvm::raw_ostream *)&v102, " ", 1uLL);
    else
      *v106++ = 32;
    if (SHIBYTE(v98) < 0)
      operator delete(__p[0]);
    v32 = v106;
    if ((unint64_t)(v105 - v106) > 0xD)
    {
      *(_QWORD *)v106 = *(_QWORD *)"Instructions:\n";
      *(_QWORD *)(v32 + 6) = *(_QWORD *)"ctions:\n";
      v106 += 14;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v102, "Instructions:\n", 0xEuLL);
    }
    v93 = a1;
    v33 = *(_DWORD *)(a1 + 152);
    if (v33)
    {
      v34 = *(_QWORD *)(a1 + 40);
      if (v34)
      {
        v35 = 0;
        v36 = 0;
        v37 = *(_QWORD *)(a1 + 144);
        v90 = (int *)(v37 + 28 * v33);
        v38 = *(unsigned int **)(a1 + 32);
        v39 = 168 * v34 - 168;
        v40 = (int *)(v37 + 24);
        do
        {
          if (byte_1ED7EED78)
          {
            v41 = (void **)*v38;
            v99 = &off_1E8132728;
            v100 = "%4d ";
            v101 = v41;
            llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v102, (uint64_t)&v99);
          }
          v42 = v40 - 6;
          if (*((_BYTE *)v40 - 24))
            v43 = " Q  ";
          else
            v43 = " .  ";
          if ((unint64_t)(v105 - v106) > 3)
          {
            *(_DWORD *)v106 = *(_DWORD *)v43;
            v44 = v106 + 4;
            v106 += 4;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v102, v43, 4uLL);
            v44 = v106;
          }
          if (*((_BYTE *)v40 - 23))
            v45 = " S  ";
          else
            v45 = " .  ";
          if ((unint64_t)(v105 - v44) > 3)
          {
            *(_DWORD *)v44 = *(_DWORD *)v45;
            v106 += 4;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v102, v45, 4uLL);
          }
          v99 = &off_1E8132728;
          v46 = (void **)*(v40 - 5);
          v100 = "%3d ";
          v101 = v46;
          llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v102, (uint64_t)&v99);
          sub_1C4D69564((uint64_t)__p, *(v40 - 4));
          if (v98 >= 0)
            v47 = __p;
          else
            v47 = (void **)__p[0];
          v99 = &off_1E8132A78;
          v100 = "%-9s";
          v101 = v47;
          llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v102, (uint64_t)&v99);
          if (SHIBYTE(v98) < 0)
            operator delete(__p[0]);
          if (byte_1ED7EEE38)
          {
            v48 = 0;
            v49 = 0x6E614C7265746E49;
            v50 = 9;
            v51 = 101;
            switch(*(v40 - 3))
            {
              case 0:
                v49 = v27 & 0xFFFFFFFFFFFF0000 | 0x3F;
                v50 = 1;
                v48 = v36;
                v51 = v35;
                goto LABEL_115;
              case 1:
                v57 = v27 & 0xFFFFFF0000000000 | 0x656E614C;
                v50 = 4;
                goto LABEL_112;
              case 2:
                goto LABEL_115;
              case 3:
                v57 = v27 & 0xFF00000000000000 | 0x657571696C43;
                v50 = 6;
                goto LABEL_112;
              case 4:
                v49 = 0x7247646165726854;
                v50 = 11;
                v48 = 117;
                v51 = 111;
                goto LABEL_115;
              case 5:
                v51 = 0;
                v49 = 0x746E656D67617246;
                v50 = 8;
                v48 = v36;
                goto LABEL_115;
              default:
                v57 = v27 & 0xFFFFFFFFFFFF0000 | 0x21;
                v50 = 1;
LABEL_112:
                v48 = v36;
                v51 = v35;
                v49 = v57;
LABEL_115:
                v94 = (const char *)v49;
                __p[0] = (void *)v49;
                __p[1] = (void *)(v51 | (v48 << 8) | 0x700000);
                HIBYTE(v98) = v50;
                v99 = &off_1E8132A78;
                v100 = " %-11s";
                v101 = __p;
                llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v102, (uint64_t)&v99);
                if (SHIBYTE(v98) < 0)
                  operator delete(__p[0]);
                v58 = v93;
                v59 = (llvm::raw_ostream *)(v93 + 72);
                v60 = 10;
                v61 = 0x6F43726564616853;
                switch(*(v40 - 2))
                {
                  case 0:
                    v61 = v92 & 0xFFFFFFFFFFFF0000 | 0x3F;
                    goto LABEL_120;
                  case 1:
                    v92 &= 0xFFFFFFFFFFFFFF00;
                    HIBYTE(v98) = 2;
                    strcpy((char *)__p, "\"\"");
                    goto LABEL_128;
                  case 2:
                    v61 = v92 & 0xFF00000000000000 | 0x6C61626F6C47;
                    v60 = 6;
                    break;
                  case 3:
                    v62 = 0x6C61636F4CLL;
                    goto LABEL_125;
                  case 4:
                    v62 = 0x6B63617453;
LABEL_125:
                    v61 = v92 & 0xFFFF000000000000 | v62 & 0xFFFFFFFFFFFFLL;
                    v60 = 5;
                    break;
                  case 5:
                    break;
                  case 6:
                    v60 = 7;
                    v61 = 0x636972656E6547;
                    break;
                  default:
                    v61 = v92 & 0xFFFFFFFFFFFF0000 | 0x21;
LABEL_120:
                    v60 = 1;
                    break;
                }
                __p[0] = (void *)v61;
                __p[1] = (void *)25970;
                v92 = v61;
                HIBYTE(v98) = v60;
LABEL_128:
                v99 = &off_1E8132A78;
                v100 = " %-10s";
                v101 = __p;
                llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v102, (uint64_t)&v99);
                if (SHIBYTE(v98) < 0)
                  operator delete(__p[0]);
                v63 = 7;
                v64 = 0x363174616F6C46;
                switch(*(v40 - 1))
                {
                  case 0:
                    v64 = v91 & 0xFFFFFFFFFFFF0000 | 0x3F;
                    goto LABEL_133;
                  case 1:
                    v91 &= 0xFFFFFFFFFFFFFF00;
                    HIBYTE(v98) = 2;
                    strcpy((char *)__p, "\"\"");
                    goto LABEL_139;
                  case 2:
                    goto LABEL_138;
                  case 3:
                    v64 = 0x323374616F6C46;
                    goto LABEL_138;
                  case 4:
                    v64 = v91 & 0xFFFFFFFF00000000 | 0x746E49;
                    v63 = 3;
                    goto LABEL_138;
                  case 5:
                    v64 = v91 & 0xFFFFFF0000000000 | 0x73746942;
                    v63 = 4;
                    goto LABEL_138;
                  default:
                    v64 = v91 & 0xFFFFFFFFFFFF0000 | 0x21;
LABEL_133:
                    v63 = 1;
LABEL_138:
                    __p[0] = (void *)v64;
                    HIBYTE(v98) = v63;
                    v91 = v64;
LABEL_139:
                    v99 = &off_1E8132A78;
                    v100 = " %-7s";
                    v101 = __p;
                    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v102, (uint64_t)&v99);
                    if (SHIBYTE(v98) < 0)
                      operator delete(__p[0]);
                    sub_1C4D6915C((uint64_t)__src, *v40);
                    if (SHIBYTE(v96) < 0)
                    {
                      if (__src[1])
                      {
                        sub_1C47EBC30(__p, __src[0], (unint64_t)__src[1]);
                        goto LABEL_147;
                      }
                    }
                    else if (HIBYTE(v96))
                    {
                      *(_OWORD *)__p = *(_OWORD *)__src;
                      v98 = v96;
                      goto LABEL_147;
                    }
                    HIBYTE(v98) = 2;
                    strcpy((char *)__p, "\"\"");
LABEL_147:
                    v65 = __p;
                    if (v98 < 0)
                      v65 = (void **)__p[0];
                    v99 = &off_1E8132A78;
                    v100 = " %-15s";
                    v101 = v65;
                    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v102, (uint64_t)&v99);
                    if (SHIBYTE(v98) < 0)
                      operator delete(__p[0]);
                    if (SHIBYTE(v96) < 0)
                      operator delete(__src[0]);
                    break;
                }
                break;
            }
          }
          else
          {
            v52 = *(v40 - 3);
            HIBYTE(v98) = 1;
            if (v52 >= 6)
              v53 = 33;
            else
              v53 = 0x4654434D4C3FuLL >> (8 * v52);
            LOWORD(__p[0]) = v53;
            v99 = &off_1E8132A78;
            v100 = " %1s  ";
            v101 = __p;
            llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v102, (uint64_t)&v99);
            if (SHIBYTE(v98) < 0)
              operator delete(__p[0]);
            v54 = *(v40 - 2);
            HIBYTE(v98) = 1;
            if (v54 >= 7)
              v55 = 33;
            else
              v55 = 0x4E43534C472E3FuLL >> (8 * v54);
            LOWORD(__p[0]) = v55;
            v99 = &off_1E8132A78;
            v100 = " %1s  ";
            v101 = __p;
            llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v102, (uint64_t)&v99);
            if (SHIBYTE(v98) < 0)
              operator delete(__p[0]);
            v42 = v40 - 6;
            switch(*(v40 - 1))
            {
              case 0:
                HIBYTE(v98) = 1;
                v56 = 63;
                goto LABEL_159;
              case 1:
                HIBYTE(v98) = 0;
                LOBYTE(__p[0]) = 0;
                break;
              case 2:
                HIBYTE(v98) = 1;
                v56 = 70;
                goto LABEL_159;
              case 3:
                HIBYTE(v98) = 1;
                v56 = 68;
                goto LABEL_159;
              case 4:
                HIBYTE(v98) = 1;
                v56 = 73;
                goto LABEL_159;
              case 5:
                HIBYTE(v98) = 1;
                v56 = 66;
LABEL_159:
                LOWORD(__p[0]) = v56;
                break;
              default:
                HIBYTE(v98) = 1;
                LOWORD(__p[0]) = 33;
                v42 = v40 - 6;
                break;
            }
            v99 = &off_1E8132A78;
            v100 = " %1s  ";
            v101 = __p;
            llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v102, (uint64_t)&v99);
            if (SHIBYTE(v98) < 0)
              operator delete(__p[0]);
            switch(*v40)
            {
              case 0:
                HIBYTE(v98) = 1;
                v66 = 63;
                goto LABEL_167;
              case 1:
                HIBYTE(v98) = 1;
                v66 = 77;
LABEL_167:
                LOWORD(__p[0]) = v66;
                break;
              case 2:
                HIBYTE(v98) = 3;
                v67 = 27971;
                goto LABEL_179;
              case 3:
                HIBYTE(v98) = 3;
                v68 = 25939;
                goto LABEL_176;
              case 4:
                HIBYTE(v98) = 3;
                v69 = 26946;
                goto LABEL_172;
              case 5:
                HIBYTE(v98) = 3;
                v69 = 30275;
LABEL_172:
                v70 = v69 | 0x740000;
                goto LABEL_189;
              case 6:
                HIBYTE(v98) = 4;
                v71 = 1836213584;
                goto LABEL_196;
              case 7:
                HIBYTE(v98) = 4;
                v71 = 1969513810;
                goto LABEL_196;
              case 8:
                HIBYTE(v98) = 3;
                v68 = 29763;
LABEL_176:
                v70 = v68 | 0x6C0000;
                goto LABEL_189;
              case 9:
                HIBYTE(v98) = 3;
                v70 = 6581827;
                goto LABEL_189;
              case 10:
                HIBYTE(v98) = 3;
                v67 = 27987;
LABEL_179:
                v70 = v67 | 0x700000;
                goto LABEL_189;
              case 11:
                HIBYTE(v98) = 4;
                v71 = 1668184403;
                goto LABEL_196;
              case 12:
                HIBYTE(v98) = 4;
                v71 = 1951622220;
                goto LABEL_196;
              case 13:
                HIBYTE(v98) = 4;
                v71 = 1684107084;
                goto LABEL_196;
              case 14:
                HIBYTE(v98) = 5;
                LODWORD(__p[0]) = 1919906899;
                v72 = 101;
                goto LABEL_194;
              case 15:
                HIBYTE(v98) = 4;
                v71 = 1464685121;
                goto LABEL_196;
              case 16:
                HIBYTE(v98) = 3;
                v70 = 7496002;
                goto LABEL_189;
              case 17:
                HIBYTE(v98) = 4;
                v71 = 1181184582;
                goto LABEL_196;
              case 18:
                HIBYTE(v98) = 3;
                v70 = 7894102;
                goto LABEL_189;
              case 19:
                HIBYTE(v98) = 3;
                v70 = 6778185;
LABEL_189:
                LODWORD(__p[0]) = v70;
                break;
              case 20:
                HIBYTE(v98) = 4;
                v71 = 1702260557;
                goto LABEL_196;
              case 21:
                HIBYTE(v98) = 4;
                v71 = 1417240914;
                goto LABEL_196;
              case 22:
                HIBYTE(v98) = 5;
                LODWORD(__p[0]) = 1279421769;
                v72 = 100;
                goto LABEL_194;
              case 23:
                HIBYTE(v98) = 5;
                LODWORD(__p[0]) = 1463971145;
                v72 = 114;
LABEL_194:
                WORD2(__p[0]) = v72;
                break;
              case 24:
                HIBYTE(v98) = 4;
                v71 = 1466395977;
LABEL_196:
                LODWORD(__p[0]) = v71;
                BYTE4(__p[0]) = 0;
                break;
              default:
                HIBYTE(v98) = 1;
                LOWORD(__p[0]) = 33;
                break;
            }
            v99 = &off_1E8132A78;
            v100 = " %-5s ";
            v101 = __p;
            llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v102, (uint64_t)&v99);
            if (SHIBYTE(v98) < 0)
              operator delete(__p[0]);
            v48 = v36;
            v51 = v35;
            v94 = (const char *)v27;
            v58 = v93;
            v59 = (llvm::raw_ostream *)(v93 + 72);
          }
          if (v105 == v106)
          {
            v73 = llvm::raw_ostream::write((llvm::raw_ostream *)&v102, " ", 1uLL);
          }
          else
          {
            *v106++ = 32;
            v73 = (llvm::raw_ostream *)&v102;
          }
          MEMORY[0x1CAA32ABC](v93 + 48, "");
          (*(void (**)(_QWORD, unsigned int *, _QWORD, const char *, _QWORD, _QWORD, llvm::raw_ostream *))(**(_QWORD **)(v58 + 16) + 32))(*(_QWORD *)(v58 + 16), v38, 0, "", 0, *(_QWORD *)(v58 + 8), v59);
          v74 = *(const char **)(v58 + 104);
          v75 = *(const char **)(v58 + 88);
          if (v74 != v75)
          {
            *(_QWORD *)(v58 + 104) = v75;
            llvm::raw_ostream::flush_tied_then_write(v59, v75, v74 - v75);
          }
          v76 = *(_BYTE *)(v58 + 71);
          v77 = v76 < 0;
          if (v76 >= 0)
            v78 = (uint64_t (**)(llvm::format_object_base *__hidden))(v93 + 48);
          else
            v78 = *(uint64_t (***)(llvm::format_object_base *__hidden))(v58 + 48);
          v79 = (const char *)(v76 & 0x7F);
          if (v77)
            v80 = *(const char **)(v58 + 56);
          else
            v80 = v79;
          v99 = v78;
          v100 = v80;
          first_not_of = llvm::StringRef::find_first_not_of(&v99, " \t\n\v\f\r", 6, 0);
          if (first_not_of >= (unint64_t)v80)
            v82 = (unint64_t)v80;
          else
            v82 = first_not_of;
          v83 = (char *)v78 + v82;
          v84 = (size_t)&v80[-v82];
          if ((unint64_t)&v80[-v82] <= *((_QWORD *)v73 + 3) - *((_QWORD *)v73 + 4))
          {
            if ((unint64_t)v80 > first_not_of)
            {
              memcpy(*((void **)v73 + 4), v83, v84);
              *((_QWORD *)v73 + 4) += v84;
            }
          }
          else
          {
            v73 = llvm::raw_ostream::write(v73, v83, v84);
          }
          v85 = (_BYTE *)*((_QWORD *)v73 + 4);
          if ((unint64_t)v85 >= *((_QWORD *)v73 + 3))
          {
            llvm::raw_ostream::write(v73, 10);
          }
          else
          {
            *((_QWORD *)v73 + 4) = v85 + 1;
            *v85 = 10;
          }
          v27 = (unint64_t)v94;
          if (v42 + 7 == v90)
            break;
          v38 += 42;
          v86 = v39;
          v39 -= 168;
          v40 += 7;
          v35 = v51;
          v36 = v48;
        }
        while (v86);
      }
    }
    v87 = v106 - v104;
    if (v106 != v104)
    {
      v106 = v104;
      llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v102, v104, v87);
    }
    if (v113 >= 0)
      v88 = (const char *)&v111;
    else
      v88 = v111;
    if (v113 >= 0)
      v89 = HIBYTE(v113) & 0x7F;
    else
      v89 = v112;
    llvm::raw_ostream::write(a2, v88, v89);
    v102 = off_1E81A6E70;
    if (v109 == 1 && v104)
      MEMORY[0x1CAA32F9C](v104, 0x1000C8077774924);
  }
  if (SHIBYTE(v113) < 0)
    operator delete(v111);
}

uint64_t sub_1C4D6AFAC(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  BOOL v3;
  unsigned int *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  BOOL v13;
  char v14;
  int v15;
  BOOL v16;
  uint64_t v17;

  v1 = *(_QWORD *)(result + 40);
  v2 = *(_DWORD *)(result + 152);
  if (v1)
    v3 = v2 == 0;
  else
    v3 = 1;
  if (!v3)
  {
    v4 = *(unsigned int **)(result + 32);
    v5 = *(_QWORD *)(*(_QWORD *)(result + 8) + 192);
    v6 = (_DWORD *)(*(_QWORD *)(result + 144) + 4);
    v7 = 28 * v2 - 28;
    v8 = 168 * v1 - 168;
    do
    {
      v9 = *v4;
      v10 = byte_1C6A3C70C[v9];
      v11 = (v10 >> 1) & 1;
      v12 = (v10 & 4) == 0;
      v13 = (v10 & 4) != 0 || (v10 & 3) != 0;
      if (v12)
        v14 = v11;
      else
        v14 = 1;
      *((_BYTE *)v6 - 4) = v13;
      *((_BYTE *)v6 - 3) = v14;
      result = sub_1C4C085A0(v9);
      *v6 = result;
      if ((v5 & 0x800000000000) == 0
        || ((v15 = v6[1], (v15 - 7) >= 4) ? (v16 = v15 == 5) : (v16 = 1), v16))
      {
        if (!v8)
          return result;
      }
      else
      {
        *v6 = 2 * result;
        if (!v8)
          return result;
      }
      v4 += 42;
      v6 += 7;
      v17 = v7;
      v7 -= 28;
      v8 -= 168;
    }
    while (v17);
  }
  return result;
}

void sub_1C4D6B0A0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3;
  int v4;
  char *v5;
  char v6;
  char v7;
  uint64_t v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  __n128 v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  void *v21;
  int v22;
  __int128 v23;
  unint64_t v24;
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;
  _BYTE v29[23];
  char v30;
  _BYTE v31[23];
  char v32;
  void *v33;
  uint64_t v34;
  int v35;
  char v36;
  void *v37[3];
  void *v38;
  __int128 v39;
  unint64_t v40;
  uint64_t v41[3];
  __int16 v42;
  char v43;
  uint64_t v44[3];
  __int16 v45;
  uint64_t v46;
  uint64_t v47[3];
  uint64_t v48;
  uint64_t v49[3];
  uint64_t v50;
  uint64_t v51[3];
  uint64_t v52;
  uint64_t v53[3];
  uint64_t v54;
  uint64_t v55[3];
  _QWORD v56[6];

  v56[4] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 40))
  {
    v23 = 0uLL;
    v24 = 0;
    v3 = *(_DWORD *)(a1 + 152);
    if (v3)
    {
      v4 = 0;
      v5 = *(char **)(a1 + 144);
      v19 = &v5[28 * v3];
      do
      {
        sub_1C4D655B0((uint64_t *)v37, "QUADScope", 9uLL);
        v6 = *v5;
        LOWORD(v38) = 1;
        LOBYTE(v39) = v6;
        sub_1C4D655B0(v41, "SIMDScope", 9uLL);
        v7 = v5[1];
        v42 = 1;
        v43 = v7;
        sub_1C4D655B0(v44, "InstrRate", 9uLL);
        v8 = *((unsigned int *)v5 + 1);
        v45 = 3;
        v46 = v8;
        sub_1C4D655B0(v47, "ALUSubpipe", 0xAuLL);
        sub_1C4D69564((uint64_t)&v33, *((_DWORD *)v5 + 2));
        sub_1C4D673F4((uint64_t)&v48, (unint64_t)&v33);
        sub_1C4D655B0(v49, "Scope", 5uLL);
        switch(*((_DWORD *)v5 + 3))
        {
          case 0:
            v32 = 1;
            v9 = 63;
            goto LABEL_9;
          case 1:
            v32 = 4;
            strcpy(v31, "Lane");
            break;
          case 2:
            v32 = 9;
            strcpy(v31, "InterLane");
            break;
          case 3:
            v32 = 6;
            strcpy(v31, "Clique");
            break;
          case 4:
            v32 = 11;
            strcpy(v31, "ThreadGroup");
            break;
          case 5:
            v32 = 8;
            strcpy(v31, "Fragment");
            break;
          default:
            v32 = 1;
            v9 = 33;
LABEL_9:
            *(_WORD *)v31 = v9;
            break;
        }
        sub_1C4D673F4((uint64_t)&v50, (unint64_t)v31);
        sub_1C4D655B0(v51, "Memory", 6uLL);
        switch(*((_DWORD *)v5 + 4))
        {
          case 0:
            v30 = 1;
            v10 = 63;
            goto LABEL_18;
          case 1:
            v30 = 0;
            v29[0] = 0;
            break;
          case 2:
            v30 = 6;
            strcpy(v29, "Global");
            break;
          case 3:
            v30 = 5;
            *(_DWORD *)v29 = 1633906508;
            v11 = 108;
            goto LABEL_23;
          case 4:
            v30 = 5;
            *(_DWORD *)v29 = 1667331155;
            v11 = 107;
LABEL_23:
            *(_WORD *)&v29[4] = v11;
            break;
          case 5:
            v30 = 10;
            strcpy(v29, "ShaderCore");
            break;
          case 6:
            v30 = 7;
            strcpy(v29, "Generic");
            break;
          default:
            v30 = 1;
            v10 = 33;
LABEL_18:
            *(_WORD *)v29 = v10;
            break;
        }
        sub_1C4D673F4((uint64_t)&v52, (unint64_t)v29);
        sub_1C4D655B0(v53, "DataType", 8uLL);
        switch(*((_DWORD *)v5 + 5))
        {
          case 0:
            v28 = 1;
            v12 = 63;
            goto LABEL_29;
          case 1:
            v28 = 0;
            LOBYTE(v27[0]) = 0;
            break;
          case 2:
            v28 = 7;
            LODWORD(v27[0]) = 1634692166;
            v13 = 909210721;
            goto LABEL_33;
          case 3:
            v28 = 7;
            LODWORD(v27[0]) = 1634692166;
            v13 = 842232929;
LABEL_33:
            *(_DWORD *)((char *)v27 + 3) = v13;
            HIBYTE(v27[0]) = 0;
            break;
          case 4:
            v28 = 3;
            LODWORD(v27[0]) = 7630409;
            break;
          case 5:
            v28 = 4;
            strcpy((char *)v27, "Bits");
            break;
          default:
            v28 = 1;
            v12 = 33;
LABEL_29:
            LOWORD(v27[0]) = v12;
            break;
        }
        sub_1C4D673F4((uint64_t)&v54, (unint64_t)v27);
        sub_1C4D655B0(v55, "Op", 2uLL);
        sub_1C4D6915C((uint64_t)__p, *((_DWORD *)v5 + 6));
        sub_1C4D673F4((uint64_t)v56, (unint64_t)__p);
        sub_1C6174C6C((uint64_t)&v20, (uint64_t)v37, 8);
        v14 = 448;
        do
        {
          llvm::json::Value::destroy((void **)&v31[v14 + 16]);
          sub_1C4765904((uint64_t *)&v29[v14 + 16], 0);
          v14 -= 56;
        }
        while (v14);
        if (v26 < 0)
          operator delete(__p[0]);
        if (v28 < 0)
          operator delete(v27[0]);
        if (v30 < 0)
          operator delete(*(void **)v29);
        if (v32 < 0)
          operator delete(*(void **)v31);
        if (v36 < 0)
          operator delete(v33);
        sub_1C4D655B0((uint64_t *)v37, "Instruction", 0xBuLL);
        *(_DWORD *)v31 = v4;
        sub_1C4D66870((uint64_t)&v20, (uint64_t)v37, (unsigned int *)v31, (uint64_t)&v33);
        v16 = (void **)v37[0];
        v37[0] = 0;
        if (v16)
        {
          if (*((char *)v16 + 23) < 0)
            operator delete(*v16);
          MEMORY[0x1CAA32FC0](v16, 0x1012C40EC159624);
        }
        LOWORD(v37[0]) = 7;
        v37[1] = v20;
        v15.n128_u64[0] = (unint64_t)v21;
        v37[2] = v21;
        v20 = 0;
        v21 = 0;
        LODWORD(v38) = v22;
        v22 = 0;
        v17 = *((_QWORD *)&v23 + 1);
        if (*((_QWORD *)&v23 + 1) >= v24)
        {
          v18 = sub_1C4D6610C((unsigned __int16 **)&v23, (unsigned __int16 *)v37, v15);
        }
        else
        {
          llvm::json::Value::moveFrom(*((uint64_t *)&v23 + 1), (unsigned __int16 *)v37, v15);
          v18 = v17 + 32;
        }
        *((_QWORD *)&v23 + 1) = v18;
        llvm::json::Value::destroy(v37);
        sub_1C4D65F7C((uint64_t *)&v20);
        MEMORY[0x1CAA32FB4](v20, 8);
        v5 += 28;
        ++v4;
      }
      while (v5 != v19);
    }
    sub_1C4D655B0((uint64_t *)v37, "InstructionList", 0xFuLL);
    LOWORD(v38) = 8;
    v39 = v23;
    v40 = v24;
    v23 = 0uLL;
    v24 = 0;
    sub_1C6174C6C((uint64_t)&v33, (uint64_t)v37, 1);
    *(_WORD *)a2 = 7;
    *(_QWORD *)(a2 + 8) = v33;
    *(_QWORD *)(a2 + 16) = v34;
    v33 = 0;
    v34 = 0;
    *(_DWORD *)(a2 + 24) = v35;
    v35 = 0;
    sub_1C4D65F7C((uint64_t *)&v33);
    MEMORY[0x1CAA32FB4](v33, 8);
    llvm::json::Value::destroy(&v38);
    sub_1C4765904((uint64_t *)v37, 0);
    v37[0] = &v23;
    sub_1C4D66218((void ***)v37);
  }
  else
  {
    *(_WORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = 0;
  }
}

uint64_t sub_1C4D6B778(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  if (*(_DWORD *)(a1 + 152))
    __asm { BR              X9 }
  *(_BYTE *)(a2 + 70) = 1;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v3 = *(_QWORD *)(a2 + 48);
  v4 = ((_BYTE)v3 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v3 - *(_QWORD *)(a2 + 56) < v4)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v3 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v4;
  }
  else
  {
    *(_QWORD *)(a2 + 48) = v3 - v4;
    if (!v4)
      goto LABEL_10;
  }
  v5 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v5++) = 0;
  while (v4 != v5);
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
LABEL_10:
  v6 = *(_QWORD *)(a2 + 48);
  v7 = ((_BYTE)v6 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v6 - *(_QWORD *)(a2 + 56) < v7)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v6 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v7;
  }
  else
  {
    *(_QWORD *)(a2 + 48) = v6 - v7;
    if (!v7)
      goto LABEL_14;
  }
  v8 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v8++) = 0;
  while (v7 != v8);
LABEL_14:
  *(_BYTE *)(a2 + 70) = 0;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v10 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  v11 = ((_BYTE)v10 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v10 - v9 < v11)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v10 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v11;
  }
  else
  {
    v12 = v10 - v11;
    *(_QWORD *)(a2 + 48) = v10 - v11;
    if (!v11)
      goto LABEL_21;
  }
  v13 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v13++) = 0;
  while (v11 != v13);
  v12 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
LABEL_21:
  if ((unint64_t)(v12 - v9) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v12 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v12 - 4) = 0;
  v14 = v12 - 4;
  *(_QWORD *)(a2 + 48) = v14;
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a2 + 70) = 1;
  v17 = v15 - v14 + v16;
  if (v17)
  {
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v18 = ((_BYTE)v14 - ((_BYTE)v15 + (_BYTE)v16)) & 3;
    if (v14 - *(_QWORD *)(a2 + 56) < v18)
    {
      sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v14 - ((_BYTE)v15 + (_BYTE)v16)) & 3);
      *(_QWORD *)(a2 + 48) -= v18;
    }
    else
    {
      v19 = v14 - v18;
      *(_QWORD *)(a2 + 48) = v19;
      if (!v18)
      {
LABEL_31:
        v21 = v16 - v19 + v15 - v17 + 4;
        if ((_DWORD)v16 - (_DWORD)v19 + (_DWORD)v15 - v17 == -4 && *(_BYTE *)(a2 + 80) == 0)
          goto LABEL_45;
        if (*(_QWORD *)(a2 + 72) <= 3uLL)
          *(_QWORD *)(a2 + 72) = 4;
        v23 = ((_BYTE)v19 - ((_BYTE)v15 + (_BYTE)v16)) & 3;
        v24 = *(_QWORD *)(a2 + 56);
        if (v19 - v24 < v23)
        {
          sub_1C4D663A4((uint64_t *)a2, v23);
          *(_QWORD *)(a2 + 48) -= v23;
        }
        else
        {
          v25 = v19 - v23;
          *(_QWORD *)(a2 + 48) = v19 - v23;
          if (!v23)
          {
LABEL_42:
            if ((unint64_t)(v25 - v24) <= 3)
            {
              sub_1C4D663A4((uint64_t *)a2, 4uLL);
              v25 = *(_QWORD *)(a2 + 48);
            }
            *(_DWORD *)(v25 - 4) = v21;
            v27 = v25 - 4;
            *(_QWORD *)(a2 + 48) = v27;
            sub_1C4D66288((uint64_t *)a2, 4, *(_DWORD *)(a2 + 32) - v27 + *(_DWORD *)(a2 + 40));
            goto LABEL_45;
          }
        }
        v26 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a2 + 48) + v26++) = 0;
        while (v23 != v26);
        v25 = *(_QWORD *)(a2 + 48);
        v24 = *(_QWORD *)(a2 + 56);
        goto LABEL_42;
      }
    }
    v20 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v20++) = 0;
    while (v18 != v20);
    v16 = *(_QWORD *)(a2 + 40);
    v19 = *(_QWORD *)(a2 + 48);
    v15 = *(_QWORD *)(a2 + 32);
    goto LABEL_31;
  }
LABEL_45:
  v28 = sub_1C4D66580(a2, v17);
  *(_BYTE *)(a2 + 70) = 1;
  v29 = *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40);
  v30 = sub_1C6174D80(a2, 9);
  sub_1C4D66288((uint64_t *)a2, 4, v30);
  if (!v28)
    return sub_1C4D66580(a2, v29) | 0x100000000;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v31 = *(_QWORD *)(a2 + 32);
  v32 = *(_QWORD *)(a2 + 40);
  v33 = *(_QWORD *)(a2 + 48);
  v34 = ((_BYTE)v33 - ((_BYTE)v31 + (_BYTE)v32)) & 3;
  if (v33 - *(_QWORD *)(a2 + 56) < v34)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v33 - ((_BYTE)v31 + (_BYTE)v32)) & 3);
    *(_QWORD *)(a2 + 48) -= v34;
LABEL_50:
    v36 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v36++) = 0;
    while (v34 != v36);
    v32 = *(_QWORD *)(a2 + 40);
    v35 = *(_QWORD *)(a2 + 48);
    v31 = *(_QWORD *)(a2 + 32);
    goto LABEL_53;
  }
  v35 = v33 - v34;
  *(_QWORD *)(a2 + 48) = v35;
  if (v34)
    goto LABEL_50;
LABEL_53:
  v37 = v32 - v35 + v31 - v28 + 4;
  if ((_DWORD)v32 - (_DWORD)v35 + (_DWORD)v31 - v28 == -4 && *(_BYTE *)(a2 + 80) == 0)
    return sub_1C4D66580(a2, v29) | 0x100000000;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v39 = ((_BYTE)v35 - ((_BYTE)v31 + (_BYTE)v32)) & 3;
  v40 = *(_QWORD *)(a2 + 56);
  if (v35 - v40 < v39)
  {
    sub_1C4D663A4((uint64_t *)a2, v39);
    *(_QWORD *)(a2 + 48) -= v39;
LABEL_61:
    v42 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v42++) = 0;
    while (v39 != v42);
    v41 = *(_QWORD *)(a2 + 48);
    v40 = *(_QWORD *)(a2 + 56);
    goto LABEL_64;
  }
  v41 = v35 - v39;
  *(_QWORD *)(a2 + 48) = v35 - v39;
  if (v39)
    goto LABEL_61;
LABEL_64:
  if ((unint64_t)(v41 - v40) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v41 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v41 - 4) = v37;
  v43 = v41 - 4;
  *(_QWORD *)(a2 + 48) = v43;
  sub_1C4D66288((uint64_t *)a2, 24, *(_DWORD *)(a2 + 32) - v43 + *(_DWORD *)(a2 + 40));
  return sub_1C4D66580(a2, v29) | 0x100000000;
}

uint64_t sub_1C4D6C380(uint64_t a1)
{
  void *v2;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E81329E0;
  v2 = *(void **)(a1 + 144);
  if (v2 != (void *)(a1 + 160))
    free(v2);
  *(_QWORD *)(a1 + 72) = off_1E81A6E70;
  if (*(_DWORD *)(a1 + 128) == 1)
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (v4)
      MEMORY[0x1CAA32F9C](v4, 0x1000C8077774924);
  }
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  return a1;
}

void sub_1C4D6C40C(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E81329E0;
  v2 = *(void **)(a1 + 144);
  if (v2 != (void *)(a1 + 160))
    free(v2);
  *(_QWORD *)(a1 + 72) = off_1E81A6E70;
  if (*(_DWORD *)(a1 + 128) == 1)
  {
    v3 = *(_QWORD *)(a1 + 88);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8077774924);
  }
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4D6C4A8()
{
  return "AGX3InstructionInfoView";
}

char *sub_1C4D6C4B8(char *result, unint64_t a2, __int128 *a3)
{
  _OWORD **v4;
  _DWORD *v5;
  _OWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 v11;
  unint64_t v12;
  _OWORD *v13;
  __int128 v14;
  _BYTE v16[28];

  v4 = (_OWORD **)result;
  if (*((unsigned int *)result + 3) >= a2)
  {
    v5 = result + 8;
    v8 = *((unsigned int *)result + 2);
    if (v8 >= a2)
      v9 = a2;
    else
      v9 = *((unsigned int *)result + 2);
    if (v9)
    {
      v10 = *(_OWORD **)result;
      do
      {
        v11 = *a3;
        *(_OWORD *)((char *)v10 + 12) = *(__int128 *)((char *)a3 + 12);
        *v10 = v11;
        v10 = (_OWORD *)((char *)v10 + 28);
        --v9;
      }
      while (v9);
      v8 = *v5;
    }
    v12 = v8 - a2;
    if (v8 < a2)
    {
      v13 = (_OWORD *)(*(_QWORD *)result + 28 * v8);
      do
      {
        v14 = *a3;
        *(_OWORD *)((char *)v13 + 12) = *(__int128 *)((char *)a3 + 12);
        *v13 = v14;
        v13 = (_OWORD *)((char *)v13 + 28);
      }
      while (!__CFADD__(v12++, 1));
    }
  }
  else
  {
    *(_OWORD *)v16 = *a3;
    *(_OWORD *)&v16[12] = *(__int128 *)((char *)a3 + 12);
    *((_DWORD *)result + 2) = 0;
    v5 = result + 8;
    result = (char *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 16), a2, 28);
    v6 = *v4;
    v7 = a2;
    do
    {
      *v6 = *(_OWORD *)v16;
      *(_OWORD *)((char *)v6 + 12) = *(_OWORD *)&v16[12];
      v6 = (_OWORD *)((char *)v6 + 28);
      --v7;
    }
    while (v7);
  }
  *v5 = a2;
  return result;
}

uint64_t sub_1C4D6C5B4()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_1C47AD050((uint64_t)&qword_1ED7EECF8, 0, 0);
  byte_1ED7EED78 = 0;
  qword_1ED7EED80 = (uint64_t)&off_1E7F9E8D8;
  unk_1ED7EED88 = 0;
  qword_1ED7EECF8 = (uint64_t)&unk_1E819E898;
  qword_1ED7EED90 = (uint64_t)&off_1E819E9A0;
  qword_1ED7EED98 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7EEDB0 = (uint64_t)&qword_1ED7EED98;
  llvm::cl::Option::setArgStr(v0, "agx3-instr-info-include-opcode", 0x1EuLL);
  qword_1ED7EED18 = (uint64_t)"Include opcode in AGX Instr Info view";
  unk_1ED7EED20 = 37;
  word_1ED7EED02 = word_1ED7EED02 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7EECF8);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7EECF8, &dword_1C475E000);
  v1 = sub_1C47AD050((uint64_t)&qword_1ED7EEDB8, 0, 0);
  byte_1ED7EEE38 = 0;
  qword_1ED7EEE40 = (uint64_t)&off_1E7F9E8D8;
  unk_1ED7EEE48 = 0;
  qword_1ED7EEDB8 = (uint64_t)&unk_1E819E898;
  qword_1ED7EEE50 = (uint64_t)&off_1E819E9A0;
  qword_1ED7EEE58[0] = &off_1E7F9E8F8;
  qword_1ED7EEE70 = (uint64_t)qword_1ED7EEE58;
  llvm::cl::Option::setArgStr(v1, "agx3-instr-info-include-full-strings", 0x24uLL);
  qword_1ED7EEDD8 = (uint64_t)"Don't abbreviate columns";
  unk_1ED7EEDE0 = 24;
  word_1ED7EEDC2 = word_1ED7EEDC2 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7EEDB8);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7EEDB8, &dword_1C475E000);
}

uint64_t sub_1C4D6C708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v7 = sub_1C5FE2B70(a1, a2, a3, a4, a5, a6, 6u);
  *(_QWORD *)v7 = off_1E8132A98;
  *(_QWORD *)(v7 + 200) = v7 + 216;
  v8 = (_QWORD *)(v7 + 200);
  *(_QWORD *)(v7 + 208) = 0x600000000;
  sub_1C4765AA4((char *)(v7 + 200), 1uLL, -1);
  *(_DWORD *)(a1 + 264) = 6;
  v9 = *v8 + 8 * *(unsigned int *)(a1 + 208);
  *(_QWORD *)(v9 - 8) &= 0x3FuLL;
  return a1;
}

uint64_t sub_1C4D6C78C(uint64_t a1, unsigned __int16 *a2)
{
  unsigned int v3;

  v3 = sub_1C4C2FD5C(*a2);
  if (v3 == -1)
    return 0;
  else
    return *(unsigned __int8 *)(*((_QWORD *)a2 + 2) + 16 * v3 + 11);
}

uint64_t sub_1C4D6C7D0(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;

  v2 = *((unsigned int *)a2 + 6);
  if (!(_DWORD)v2)
    return 0;
  v3 = 0;
  v4 = word_1C6A96814[*a2];
  v5 = (_DWORD *)(*((_QWORD *)a2 + 2) + 8);
  do
  {
    if ((byte_1C6A9B09C[v4] & 1) != 0)
    {
      v6 = (*v5 >> 20) & 0xF;
      if (v6)
      {
        v7 = 1 << (v6 - 1);
        **(_QWORD **)(a1 + 200) |= v7;
        v3 |= v7;
      }
    }
    ++v4;
    v5 += 4;
    --v2;
  }
  while (v2);
  return v3;
}

unint64_t sub_1C4D6C850(unint64_t result, unsigned int *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  _QWORD v18[3];
  int v19;

  v3 = result;
  v4 = *a2;
  if (((*(_QWORD *)(*(_QWORD *)(result + 200) + ((v4 >> 3) & 0x1FFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = *(_QWORD *)(result + 184);
  }
  else
  {
    v5 = *(_QWORD *)(result + 184);
    v6 = v5;
    while (v6 != *(_QWORD *)(result + 176))
    {
      v7 = *(_DWORD *)(v6 - 80);
      v6 -= 80;
      if (v7 == (_DWORD)v4)
      {
        v8 = a2[10];
        if ((_DWORD)v8)
        {
          v9 = *((_QWORD *)a2 + 4);
          v10 = v9 + 32 * v8;
          v11 = *(_DWORD *)(v6 + 40);
          do
          {
            v12 = *(_QWORD *)(v9 + 8);
            v13 = *(_QWORD *)(v9 + 16);
            v14 = *(_DWORD *)(v9 + 24);
            if (v11 >= *(_DWORD *)(v6 + 44))
            {
              v18[0] = *(_QWORD *)v9;
              v18[1] = v12;
              v18[2] = v13;
              v19 = v14;
              result = sub_1C47C0F60(v6 + 32, (unint64_t)v18, 1);
              v16 = (_OWORD *)(*(_QWORD *)(v6 + 32) + 32 * *(unsigned int *)(v6 + 40));
              v17 = *(_OWORD *)(result + 16);
              *v16 = *(_OWORD *)result;
              v16[1] = v17;
            }
            else
            {
              v15 = *(_QWORD *)(v6 + 32) + 32 * v11;
              *(_QWORD *)v15 = *(_QWORD *)v9;
              *(_QWORD *)(v15 + 8) = v12;
              *(_QWORD *)(v15 + 16) = v13;
              *(_DWORD *)(v15 + 24) = v14;
            }
            v11 = *(_DWORD *)(v6 + 40) + 1;
            *(_DWORD *)(v6 + 40) = v11;
            v9 += 32;
          }
          while (v9 != v10);
        }
        return result;
      }
    }
  }
  if (v5 >= *(_QWORD *)(result + 192))
  {
    result = (unint64_t)sub_1C4D6CB9C((void **)(result + 176), (uint64_t)a2);
  }
  else
  {
    *(_DWORD *)v5 = v4;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 8) = 0;
    sub_1C4D6CDA0((_QWORD *)(v5 + 8), *((_BYTE **)a2 + 1), *((_BYTE **)a2 + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3));
    *(_QWORD *)(v5 + 32) = v5 + 48;
    *(_QWORD *)(v5 + 40) = 0x100000000;
    if (a2[10])
      sub_1C4D6CE50(v5 + 32, (uint64_t *)a2 + 4);
    result = v5 + 80;
  }
  *(_QWORD *)(v3 + 184) = result;
  *(_QWORD *)(*(_QWORD *)(v3 + 200) + (((unint64_t)*a2 >> 3) & 0x1FFFFFF8)) &= ~(1 << *a2);
  return result;
}

uint64_t sub_1C4D6C9F0(uint64_t a1)
{
  void *v2;
  uint64_t v4;
  void **v5;

  *(_QWORD *)a1 = off_1E8132A98;
  v2 = *(void **)(a1 + 200);
  if (v2 != (void *)(a1 + 216))
    free(v2);
  *(_QWORD *)a1 = off_1E81AAAC0;
  v5 = (void **)(a1 + 176);
  sub_1C4D67294(&v5);
  v5 = (void **)(a1 + 152);
  sub_1C4D67294(&v5);
  *(_QWORD *)(a1 + 80) = off_1E81A6E70;
  if (*(_DWORD *)(a1 + 136) == 1)
  {
    v4 = *(_QWORD *)(a1 + 96);
    if (v4)
      MEMORY[0x1CAA32F9C](v4, 0x1000C8077774924);
  }
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  return a1;
}

uint64_t sub_1C4D6CAB4(uint64_t a1)
{
  void *v2;
  uint64_t v4;
  void **v5;

  *(_QWORD *)a1 = off_1E8132A98;
  v2 = *(void **)(a1 + 200);
  if (v2 != (void *)(a1 + 216))
    free(v2);
  *(_QWORD *)a1 = off_1E81AAAC0;
  v5 = (void **)(a1 + 176);
  sub_1C4D67294(&v5);
  v5 = (void **)(a1 + 152);
  sub_1C4D67294(&v5);
  *(_QWORD *)(a1 + 80) = off_1E81A6E70;
  if (*(_DWORD *)(a1 + 136) == 1)
  {
    v4 = *(_QWORD *)(a1 + 96);
    if (v4)
      MEMORY[0x1CAA32F9C](v4, 0x1000C8077774924);
  }
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  return MEMORY[0x1CAA32FC0](a1, 0x10F3C4080A2E7AFLL);
}

const char *sub_1C4D6CB8C()
{
  return "AGX3WaitView";
}

char *sub_1C4D6CB9C(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  void *v19;
  char *v20;

  v2 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x333333333333333)
    abort();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v3)
    v3 = 0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x333333333333333)
      sub_1C4764EE4();
    v7 = (char *)operator new(80 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[80 * v2];
  *(_DWORD *)v8 = *(_DWORD *)a2;
  *((_QWORD *)v8 + 2) = 0;
  *((_QWORD *)v8 + 3) = 0;
  *((_QWORD *)v8 + 1) = 0;
  sub_1C4D6CDA0((_QWORD *)v8 + 1, *(_BYTE **)(a2 + 8), *(_BYTE **)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
  *((_QWORD *)v8 + 4) = v8 + 48;
  *((_QWORD *)v8 + 5) = 0x100000000;
  if (*(_DWORD *)(a2 + 40))
    sub_1C4D6CE50((uint64_t)(v8 + 32), (uint64_t *)(a2 + 32));
  v9 = &v7[80 * v6];
  v10 = v8 + 80;
  v12 = (char *)*a1;
  v11 = (char *)a1[1];
  if (v11 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v11)
      return v8 + 80;
    goto LABEL_26;
  }
  v13 = 0;
  do
  {
    v14 = &v8[v13];
    v15 = &v11[v13];
    *((_DWORD *)v14 - 20) = *(_DWORD *)&v11[v13 - 80];
    *((_QWORD *)v14 - 8) = 0;
    *((_QWORD *)v14 - 7) = 0;
    *((_QWORD *)v14 - 9) = 0;
    *(_OWORD *)(v14 - 72) = *(_OWORD *)&v11[v13 - 72];
    *((_QWORD *)v14 - 7) = *(_QWORD *)&v11[v13 - 56];
    *((_QWORD *)v15 - 9) = 0;
    *((_QWORD *)v15 - 8) = 0;
    *((_QWORD *)v15 - 7) = 0;
    *((_QWORD *)v14 - 6) = &v8[v13 - 32];
    *(_QWORD *)&v8[v13 - 40] = 0x100000000;
    if (*(_DWORD *)&v11[v13 - 40])
      sub_1C4D6CF74((uint64_t)&v8[v13 - 48], (uint64_t *)v15 - 6);
    v13 -= 80;
  }
  while (&v11[v13] != v12);
  v11 = (char *)*a1;
  v16 = (char *)a1[1];
  *a1 = &v8[v13];
  a1[1] = v10;
  a1[2] = v9;
  if (v16 != v11)
  {
    v17 = v16 - 32;
    do
    {
      v18 = (char *)*((_QWORD *)v17 - 2);
      if (v17 != v18)
        free(v18);
      v19 = (void *)*((_QWORD *)v17 - 5);
      if (v19)
      {
        *((_QWORD *)v17 - 4) = v19;
        operator delete(v19);
      }
      v20 = v17 - 48;
      v17 -= 80;
    }
    while (v20 != v11);
  }
  if (v11)
LABEL_26:
    operator delete(v11);
  return v8 + 80;
}

_QWORD *sub_1C4D6CDA0(_QWORD *result, _BYTE *a2, _BYTE *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v6 = result;
    v7 = 3 * a4;
    result = operator new(24 * a4);
    v8 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    if (a2 != a3)
    {
      v9 = 24 * ((a3 - a2 - 24) / 0x18uLL) + 24;
      result = memcpy(result, a2, v9);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v6[1] = v8;
  }
  return result;
}

uint64_t sub_1C4D6CE50(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *((unsigned int *)a2 + 2);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v6 = *a2;
        v7 = *a2 + 32 * v4;
        v8 = *(_QWORD *)a1;
        do
        {
          *(_DWORD *)v8 = *(_DWORD *)v6;
          *(_QWORD *)(v8 + 8) = *(_QWORD *)(v6 + 8);
          v9 = *(_QWORD *)(v6 + 16);
          *(_DWORD *)(v8 + 24) = *(_DWORD *)(v6 + 24);
          *(_QWORD *)(v8 + 16) = v9;
          v6 += 32;
          v8 += 32;
        }
        while (v6 != v7);
      }
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        v10 = *a2;
        v11 = *a2 + 32 * v5;
        v12 = *(_QWORD *)a1;
        do
        {
          *(_DWORD *)v12 = *(_DWORD *)v10;
          *(_QWORD *)(v12 + 8) = *(_QWORD *)(v10 + 8);
          v13 = *(_QWORD *)(v10 + 16);
          *(_DWORD *)(v12 + 24) = *(_DWORD *)(v10 + 24);
          *(_QWORD *)(v12 + 16) = v13;
          v10 += 32;
          v12 += 32;
        }
        while (v10 != v11);
LABEL_14:
        v14 = *((unsigned int *)a2 + 2);
        if (v5 != v14)
          memcpy((void *)(*(_QWORD *)a1 + 32 * v5), (const void *)(*a2 + 32 * v5), *a2 + 32 * v14 - (*a2 + 32 * v5));
LABEL_16:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4, 32);
    }
    v5 = 0;
    goto LABEL_14;
  }
  return a1;
}

uint64_t sub_1C4D6CF74(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  if ((uint64_t *)a1 != a2)
  {
    v5 = a2 + 2;
    v4 = *a2;
    if ((uint64_t *)*a2 != a2 + 2)
    {
      v6 = *(_QWORD **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = (uint64_t)v5;
      *((_DWORD *)a2 + 3) = 0;
      goto LABEL_21;
    }
    v7 = a2 + 1;
    v8 = *((unsigned int *)a2 + 2);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
      {
        v10 = v4 + 32 * v8;
        v11 = *(_QWORD **)a1;
        do
        {
          *(_DWORD *)v11 = *(_DWORD *)v4;
          v11[1] = *(_QWORD *)(v4 + 8);
          v12 = *(_QWORD *)(v4 + 16);
          *((_DWORD *)v11 + 6) = *(_DWORD *)(v4 + 24);
          v11[2] = v12;
          v4 += 32;
          v11 += 4;
        }
        while (v4 != v10);
      }
      goto LABEL_20;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        v13 = v4 + 32 * v9;
        v14 = *(_QWORD **)a1;
        do
        {
          *(_DWORD *)v14 = *(_DWORD *)v4;
          v14[1] = *(_QWORD *)(v4 + 8);
          v15 = *(_QWORD *)(v4 + 16);
          *((_DWORD *)v14 + 6) = *(_DWORD *)(v4 + 24);
          v14[2] = v15;
          v4 += 32;
          v14 += 4;
        }
        while (v4 != v13);
LABEL_18:
        v16 = *v7;
        if (v9 != v16)
          memcpy((void *)(*(_QWORD *)a1 + 32 * v9), (const void *)(*a2 + 32 * v9), *a2 + 32 * v16 - (*a2 + 32 * v9));
LABEL_20:
        *(_DWORD *)(a1 + 8) = v8;
LABEL_21:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 32);
    }
    v9 = 0;
    goto LABEL_18;
  }
  return a1;
}

void llvm::createAGCStatusReader(const char **a1@<X0>, const char **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  const char **v9[4];
  __int16 v10;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v10 = 261;
  v9[0] = a1;
  v9[1] = a2;
  llvm::MemoryBuffer::getFileOrSTDIN(v9, 0, 1, (uint64_t)v11);
  if ((v12 & 1) != 0)
  {
    v4 = v11[0];
    if (LODWORD(v11[0]))
    {
      v5 = v11[1];
      v6 = (_QWORD *)operator new();
      *v6 = &off_1E81A0D28;
      v6[1] = v4;
      v6[2] = v5;
      *(_BYTE *)(a3 + 192) |= 1u;
      *(_QWORD *)a3 = v6;
      return;
    }
  }
  else
  {
    std::system_category();
    v4 = v11[0];
  }
  *(_WORD *)(a3 + 30) = 0;
  *(_DWORD *)(a3 + 26) = 0;
  *(_QWORD *)(a3 + 33) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_DWORD *)(a3 + 49) = 0;
  *(_DWORD *)(a3 + 52) = 0;
  *(_DWORD *)(a3 + 57) = 0;
  *(_DWORD *)(a3 + 60) = 0;
  *(_DWORD *)(a3 + 65) = 0;
  *(_DWORD *)(a3 + 68) = 0;
  *(_QWORD *)(a3 + 73) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_DWORD *)(a3 + 89) = 0;
  *(_DWORD *)(a3 + 92) = 0;
  v7 = *(_QWORD *)(v4 + 8);
  v8 = *(_QWORD *)(v4 + 16) - v7;
  *(_BYTE *)(a3 + 192) &= ~1u;
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = v7;
  *(_QWORD *)(a3 + 16) = v8;
  *(_WORD *)(a3 + 24) = 256;
  *(_BYTE *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 56) = 0;
  *(_BYTE *)(a3 + 64) = 0;
  *(_BYTE *)(a3 + 72) = 0;
  *(_BYTE *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 120) = "";
  *(_QWORD *)(a3 + 128) = 0;
  *(_BYTE *)(a3 + 136) = 0;
  *(_DWORD *)(a3 + 140) = -1;
  *(_QWORD *)(a3 + 144) = "";
  *(_QWORD *)(a3 + 152) = 0;
  *(_DWORD *)(a3 + 160) = 0;
  *(_QWORD *)(a3 + 168) = "";
  *(_QWORD *)(a3 + 176) = 0;
  *(_DWORD *)(a3 + 184) = 0;
}

void llvm::AGCStatusReader::parseRecordWithFixedName(void *__s2@<X1>, size_t __n@<X2>, uint64_t a3@<X0>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  size_t v8;
  llvm *v15;
  uint64_t v16;
  size_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  int v23;
  const std::error_category *v24;
  uint64_t v25;
  unint64_t first_not_of;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD v36[4];
  __int16 v37;
  unint64_t v38[2];
  const char *v39;
  __int16 v40;
  __int128 v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a3 + 16);
  if (v8 < __n)
    goto LABEL_13;
  v15 = (llvm *)(a3 + 8);
  v16 = *(_QWORD *)(a3 + 8);
  if (__n)
  {
    if (memcmp(*(const void **)(a3 + 8), __s2, __n))
      goto LABEL_13;
  }
  v17 = v8 >= __n ? __n : v8;
  *(_QWORD *)(a3 + 8) = v16 + v17;
  *(_QWORD *)(a3 + 16) = v8 - v17;
  *(_BYTE *)(a3 + 136) = 1;
  sub_1C4D6D550((uint64_t)&v41, (char *)(v16 + v17), v8 - v17, (_QWORD *)(a3 + 168));
  if ((v42 & 1) != 0)
    goto LABEL_8;
  sub_1C4D6D67C((uint64_t)v38, " shader ", 8uLL, (char *)v41, *((size_t *)&v41 + 1));
  sub_1C6175028(&v41, v38);
  if ((v39 & 1) != 0)
  {
    v22 = v38[0];
    v38[0] = 0;
    if (v22)
      (*(void (**)(unint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  if ((v42 & 1) != 0)
  {
LABEL_8:
    v18 = 0;
    v19 = v41;
    *(_QWORD *)&v41 = 0;
    *(_BYTE *)(a7 + 8) |= 1u;
    *(_QWORD *)a7 = v19;
  }
  else
  {
    *(_OWORD *)v15 = v41;
    v38[0] = 0;
    llvm::consumeSignedInteger(v15, (llvm::StringRef *)0xA, v38, v21);
    if (!v23 && v38[0] == SLODWORD(v38[0]))
    {
      *(_DWORD *)(a3 + 140) = v38[0];
      *(_QWORD *)(a3 + 144) = a4;
      *(_QWORD *)(a3 + 152) = a5;
      *(_DWORD *)(a3 + 160) = a6;
      first_not_of = llvm::StringRef::find_first_not_of(v15, " \t\n\v\f\r", 6, 0);
      v27 = *(_QWORD *)(a3 + 16);
      v28 = first_not_of >= v27 ? *(_QWORD *)(a3 + 16) : first_not_of;
      v29 = *(_QWORD *)(a3 + 8) + v28;
      v30 = v27 - v28;
      *(_QWORD *)(a3 + 8) = v29;
      *(_QWORD *)(a3 + 16) = v30;
      if (v27 <= first_not_of)
      {
LABEL_29:
        v31 = -1;
      }
      else
      {
        v31 = 0;
        while (*(_BYTE *)(v29 + v31) == 45)
        {
          if (v30 == ++v31)
            goto LABEL_29;
        }
      }
      if (v31 >= v30)
        v31 = v30;
      v32 = v29 + v31;
      v33 = v30 - v31;
      *(_QWORD *)(a3 + 8) = v29 + v31;
      *(_QWORD *)(a3 + 16) = v30 - v31;
      v34 = llvm::StringRef::find_first_not_of(v15, " \t\n\v\f\r", 6, 0);
      v35 = v34 >= v33 ? v33 : v34;
      *(_QWORD *)(a3 + 8) = v32 + v35;
      *(_QWORD *)(a3 + 16) = v33 - v35;
      v18 = 1;
    }
    else
    {
      v37 = 1283;
      v36[0] = "Expected integer in \"";
      v36[2] = __s2;
      v36[3] = __n;
      v38[0] = (unint64_t)v36;
      v39 = "\" declaration\n";
      v40 = 770;
      v24 = std::generic_category();
      v25 = operator new();
      *(_QWORD *)v25 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)v38, (_QWORD *)(v25 + 8));
      v18 = 0;
      *(_QWORD *)(v25 + 32) = 5;
      *(_QWORD *)(v25 + 40) = v24;
      *(_BYTE *)(v25 + 48) = 1;
      *(_BYTE *)(a7 + 8) |= 1u;
      *(_QWORD *)a7 = v25;
    }
  }
  if ((v42 & 1) != 0)
  {
    v20 = v41;
    *(_QWORD *)&v41 = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  if (v18)
  {
LABEL_13:
    *(_BYTE *)(a7 + 8) &= ~1u;
    *(_BYTE *)a7 = 1;
  }
}

void sub_1C4D6D550(uint64_t a1, char *__s, size_t __n, _QWORD *a4)
{
  _BYTE *v8;
  size_t v9;
  unint64_t v10;
  const std::error_category *v12;
  char *v13;
  size_t v14;
  uint64_t v15[2];
  const char *v16;
  __int16 v17;

  v15[0] = (uint64_t)__s;
  v15[1] = __n;
  if (!__n || (v8 = memchr(__s, 10, __n)) == 0 || (v9 = v8 - __s, v8 - __s == -1))
    v9 = __n;
  v10 = llvm::StringRef::find(v15, " shader", 7uLL, 0);
  if (v10 != -1 && v9 >= v10)
  {
    if (__n >= v10)
      v14 = v10;
    else
      v14 = __n;
    *a4 = __s;
    a4[1] = v14;
    v13 = &__s[v14];
    *(_BYTE *)(a1 + 16) &= ~1u;
    *(_QWORD *)(a1 + 8) = __n - v14;
  }
  else
  {
    v12 = std::generic_category();
    v13 = (char *)operator new();
    v16 = "Expected shader type\n";
    v17 = 259;
    *(_QWORD *)v13 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v16, (_QWORD *)v13 + 1);
    *((_QWORD *)v13 + 4) = 5;
    *((_QWORD *)v13 + 5) = v12;
    v13[48] = 1;
    *(_BYTE *)(a1 + 16) |= 1u;
  }
  *(_QWORD *)a1 = v13;
}

void sub_1C4D6D67C(uint64_t a1, void *__s2, size_t __n, char *__s1, size_t a5)
{
  uint64_t v10;
  const std::error_category *v11;
  uint64_t v12;
  size_t v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  _QWORD v18[4];
  __int16 v19;
  _QWORD v20[4];
  __int16 v21;

  if (a5 >= __n && (!__n || !memcmp(__s1, __s2, __n)))
  {
    if (a5 >= __n)
      v13 = __n;
    else
      v13 = a5;
    *(_BYTE *)(a1 + 16) &= ~1u;
    *(_QWORD *)a1 = &__s1[v13];
    *(_QWORD *)(a1 + 8) = a5 - v13;
  }
  else
  {
    v15 = 1283;
    v14[0] = "Expected \"";
    v14[2] = __s2;
    v14[3] = __n;
    v16[0] = v14;
    v16[2] = "\" at \"";
    v17 = 770;
    v10 = 10;
    if (a5 < 0xA)
      v10 = a5;
    v18[0] = v16;
    v18[2] = __s1;
    v18[3] = v10;
    v19 = 1282;
    v20[0] = v18;
    v20[1] = v10;
    v20[2] = "\"\n";
    v21 = 770;
    v11 = std::generic_category();
    v12 = operator new();
    *(_QWORD *)v12 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v20, (_QWORD *)(v12 + 8));
    *(_QWORD *)(v12 + 32) = 5;
    *(_QWORD *)(v12 + 40) = v11;
    *(_BYTE *)(v12 + 48) = 1;
    *(_BYTE *)(a1 + 16) |= 1u;
    *(_QWORD *)a1 = v12;
  }
}

void llvm::AGCStatusReader::parseRecordWithName(void *__s2@<X1>, size_t __n@<X2>, uint64_t a3@<X0>, int a4@<W3>, _BYTE *a5@<X8>)
{
  size_t v6;
  llvm *v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  int v17;
  int v18;
  const std::error_category *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  size_t v23;
  char *v24;
  void *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  size_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD v35[4];
  __int16 v36;
  unint64_t v37[2];
  const char *v38;
  __int16 v39;
  __int128 v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a3 + 16);
  if (v6 < __n)
    goto LABEL_4;
  v11 = (llvm *)(a3 + 8);
  v12 = *(_QWORD *)(a3 + 8);
  if (__n)
  {
    if (memcmp(*(const void **)(a3 + 8), __s2, __n))
      goto LABEL_4;
  }
  if (v6 >= __n)
    v13 = __n;
  else
    v13 = v6;
  *(_QWORD *)(a3 + 8) = v12 + v13;
  *(_QWORD *)(a3 + 16) = v6 - v13;
  *(_BYTE *)(a3 + 136) = 1;
  sub_1C4D6D550((uint64_t)&v40, (char *)(v12 + v13), v6 - v13, (_QWORD *)(a3 + 168));
  if ((v41 & 1) != 0)
    goto LABEL_9;
  sub_1C4D6D67C((uint64_t)v37, " shader ", 8uLL, (char *)v40, *((size_t *)&v40 + 1));
  sub_1C6175028(&v40, v37);
  if ((v38 & 1) != 0)
  {
    v16 = v37[0];
    v37[0] = 0;
    if (v16)
      (*(void (**)(unint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  if ((v41 & 1) != 0)
    goto LABEL_9;
  *(_OWORD *)v11 = v40;
  v37[0] = 0;
  llvm::consumeSignedInteger(v11, (llvm::StringRef *)0xA, v37, v15);
  if (!v17)
  {
    v18 = v37[0];
    if (v37[0] == SLODWORD(v37[0]))
    {
      sub_1C4D6D67C((uint64_t)v37, " (", 2uLL, *(char **)(a3 + 8), *(_QWORD *)(a3 + 16));
      sub_1C6175028(&v40, v37);
      if ((v38 & 1) != 0)
      {
        v22 = v37[0];
        v37[0] = 0;
        if (v22)
          (*(void (**)(unint64_t))(*(_QWORD *)v22 + 8))(v22);
      }
      if ((v41 & 1) != 0)
        goto LABEL_9;
      *(_OWORD *)v11 = v40;
      v23 = *(_QWORD *)(a3 + 16);
      v24 = (char *)v23;
      if (v23)
      {
        v25 = *(void **)v11;
        v26 = (char *)memchr(*(void **)v11, 41, v23);
        if (v26 && v26 - (_BYTE *)v25 != -1)
        {
          *(_DWORD *)(a3 + 140) = v18;
          if (v23 >= v26 - (_BYTE *)v25)
            v24 = (char *)(v26 - (_BYTE *)v25);
          else
            v24 = (char *)v23;
LABEL_32:
          *(_QWORD *)(a3 + 144) = v25;
          *(_QWORD *)(a3 + 152) = v24;
          *(_QWORD *)(a3 + 8) = &v24[(_QWORD)v25];
          *(_QWORD *)(a3 + 16) = v23 - (_QWORD)v24;
          sub_1C4D6D67C((uint64_t)v37, ") -", 3uLL, &v24[(_QWORD)v25], v23 - (_QWORD)v24);
          sub_1C6175028(&v40, v37);
          if ((v38 & 1) != 0)
          {
            v27 = v37[0];
            v37[0] = 0;
            if (v27)
              (*(void (**)(unint64_t))(*(_QWORD *)v27 + 8))(v27);
          }
          if ((v41 & 1) == 0)
          {
            *(_OWORD *)v11 = v40;
            v29 = *(_QWORD *)(a3 + 8);
            v28 = *(_QWORD *)(a3 + 16);
            if (v28)
            {
              v30 = 0;
              while (*(_BYTE *)(v29 + v30) == 45)
              {
                if (v28 == ++v30)
                  goto LABEL_40;
              }
              if (v30 >= v28)
                v34 = *(_QWORD *)(a3 + 16);
              else
                v34 = v30;
              v32 = (char *)(v29 + v34);
              v31 = v28 - v34;
              *(_QWORD *)(a3 + 8) = v29 + v34;
              *(_QWORD *)(a3 + 16) = v28 - v34;
              if (v28 <= v30 || *v32 != 13)
              {
LABEL_42:
                sub_1C4D6D67C((uint64_t)v37, "\n", 1uLL, v32, v31);
                sub_1C6175028(&v40, v37);
                if ((v38 & 1) != 0)
                {
                  v33 = v37[0];
                  v37[0] = 0;
                  if (v33)
                    (*(void (**)(unint64_t))(*(_QWORD *)v33 + 8))(v33);
                }
                if ((v41 & 1) == 0)
                {
                  *(_OWORD *)v11 = v40;
                  *(_DWORD *)(a3 + 160) = a4;
LABEL_4:
                  a5[8] &= ~1u;
                  *a5 = 1;
                  return;
                }
                goto LABEL_9;
              }
              ++v32;
              --v31;
            }
            else
            {
LABEL_40:
              v31 = 0;
              v32 = (char *)(v29 + v28);
            }
            *(_QWORD *)(a3 + 8) = v32;
            *(_QWORD *)(a3 + 16) = v31;
            goto LABEL_42;
          }
LABEL_9:
          v14 = v40;
          a5[8] |= 1u;
          *(_QWORD *)a5 = v14;
          return;
        }
      }
      else
      {
        v25 = *(void **)v11;
      }
      *(_DWORD *)(a3 + 140) = v18;
      goto LABEL_32;
    }
  }
  v36 = 1283;
  v35[0] = "Expected integer in \"";
  v35[2] = __s2;
  v35[3] = __n;
  v37[0] = (unint64_t)v35;
  v38 = "\" declaration\n";
  v39 = 770;
  v19 = std::generic_category();
  v20 = operator new();
  *(_QWORD *)v20 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v37, (_QWORD *)(v20 + 8));
  *(_QWORD *)(v20 + 32) = 5;
  *(_QWORD *)(v20 + 40) = v19;
  *(_BYTE *)(v20 + 48) = 1;
  a5[8] |= 1u;
  *(_QWORD *)a5 = v20;
  if ((v41 & 1) != 0)
  {
    v21 = v40;
    *(_QWORD *)&v40 = 0;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
}

void llvm::AGCStatusReader::getNextRecord(llvm::AGCStatusReader *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  llvm::AGCStatusRecord *v5;
  uint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  BOOL v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  _BYTE *v16;
  char *v17;
  char *v18;
  char *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int128 *v41;
  __int128 v42;
  __int128 v43;
  void **v44;
  unint64_t v45;
  unint64_t v46;
  const std::error_category *v47;
  uint64_t v48;
  int v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  char v57;
  const void *v58;
  size_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t first_not_of;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  char v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  _QWORD v79[2];
  uint64_t v80;
  unint64_t v81;
  __int16 v82;
  uint64_t v83;
  char v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 2);
  *((_BYTE *)this + 24) = v4 != 0;
  v5 = (llvm::AGCStatusReader *)((char *)this + 24);
  ++*((_DWORD *)this + 46);
  if (v4)
  {
    v6 = (uint64_t *)((char *)this + 8);
    v7 = v4 - 28;
    if (v4 >= 0x1C)
    {
      v8 = (_QWORD *)*v6;
      v9 = *(_QWORD *)*v6 == 0x43202D2D2D2D2D2DLL && *(_QWORD *)(*v6 + 8) == 0x676E696C69706D6FLL;
      v10 = v9 && *(_QWORD *)(*v6 + 16) == 0x6F6974636E756620;
      if (v10 && *(_DWORD *)(*v6 + 24) == 540680302)
      {
        v17 = (char *)v8 + 28;
        *((_QWORD *)this + 1) = (char *)v8 + 28;
        *((_QWORD *)this + 2) = v7;
        if (v4 < 0x1D
          || ((v18 = (char *)memchr((char *)v8 + 28, 32, v4 - 28), v19 = (char *)(v18 - v17), v18)
            ? (v20 = v19 + 1 == 0)
            : (v20 = 1),
              v20))
        {
          v19 = (char *)v7;
        }
        *((_BYTE *)this + 136) = 1;
        if (v7 < (unint64_t)v19)
          v19 = (char *)v7;
        *((_QWORD *)this + 1) = &v19[(_QWORD)v17];
        *((_QWORD *)this + 2) = v7 - (_QWORD)v19;
        sub_1C4D6D67C((uint64_t)&v71, " ------", 7uLL, &v19[(_QWORD)v17], v7 - (_QWORD)v19);
        if ((v72 & 1) != 0)
          goto LABEL_32;
        *(_OWORD *)v6 = v71;
        v25 = *((_QWORD *)this + 2);
        if (v25)
        {
          v26 = (char *)*v6;
          if (*(_BYTE *)*v6 == 13)
          {
            ++v26;
            --v25;
            *((_QWORD *)this + 1) = v26;
            *((_QWORD *)this + 2) = v25;
          }
        }
        else
        {
          v26 = (char *)*v6;
        }
        sub_1C4D6D67C((uint64_t)v79, "\n", 1uLL, v26, v25);
        sub_1C6175028(&v71, v79);
        if ((v80 & 1) != 0)
        {
          v27 = v79[0];
          v79[0] = 0;
          if (v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        }
        if ((v72 & 1) != 0)
        {
LABEL_32:
          v21 = v71;
          *(_BYTE *)(a2 + 112) |= 1u;
          *(_QWORD *)a2 = v21;
          return;
        }
        *(_OWORD *)v6 = v71;
      }
    }
    llvm::AGCStatusReader::parseRecordWithFixedName("------ Compilation flags for ", 0x1DuLL, (uint64_t)this, (uint64_t)"compile_flags", 13, 7, (uint64_t)&v83);
    if ((v84 & 1) != 0)
      goto LABEL_14;
    llvm::AGCStatusReader::parseRecordWithFixedName("------ Start compilation key description for ", 0x2DuLL, (uint64_t)this, (uint64_t)"compile_key_desc", 16, 8, (uint64_t)&v71);
    sub_1C617509C(&v83, &v71);
    if ((BYTE8(v71) & 1) != 0)
    {
      v22 = v71;
      *(_QWORD *)&v71 = 0;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    }
    if ((v84 & 1) != 0)
      goto LABEL_14;
    llvm::AGCStatusReader::parseRecordWithFixedName("------ Start Translator Metadata ", 0x21uLL, (uint64_t)this, (uint64_t)"translator_metadata", 19, 9, (uint64_t)&v71);
    sub_1C617509C(&v83, &v71);
    if ((BYTE8(v71) & 1) != 0)
    {
      v23 = v71;
      *(_QWORD *)&v71 = 0;
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    }
    if ((v84 & 1) != 0)
      goto LABEL_14;
    llvm::AGCStatusReader::parseRecordWithFixedName("------ Start Target Translator Metadata ", 0x28uLL, (uint64_t)this, (uint64_t)"target_translator_metadata", 26, 10, (uint64_t)&v71);
    sub_1C617509C(&v83, &v71);
    if ((BYTE8(v71) & 1) != 0)
    {
      v24 = v71;
      *(_QWORD *)&v71 = 0;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    }
    if ((v84 & 1) != 0)
      goto LABEL_14;
    llvm::AGCStatusReader::parseRecordWithName("------ Start Graphics ", 0x16uLL, (uint64_t)this, 1, &v71);
    sub_1C617509C(&v83, &v71);
    if ((BYTE8(v71) & 1) != 0)
    {
      v28 = v71;
      *(_QWORD *)&v71 = 0;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    }
    if ((v84 & 1) != 0)
      goto LABEL_14;
    llvm::AGCStatusReader::parseRecordWithName("------ Start LLVM IR ", 0x15uLL, (uint64_t)this, 2, &v71);
    sub_1C617509C(&v83, &v71);
    if ((BYTE8(v71) & 1) != 0)
    {
      v29 = v71;
      *(_QWORD *)&v71 = 0;
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    }
    if ((v84 & 1) != 0)
      goto LABEL_14;
    llvm::AGCStatusReader::parseRecordWithName("------ Start USC ", 0x11uLL, (uint64_t)this, 4, &v71);
    sub_1C617509C(&v83, &v71);
    if ((BYTE8(v71) & 1) != 0)
    {
      v30 = v71;
      *(_QWORD *)&v71 = 0;
      if (v30)
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    }
    if ((v84 & 1) != 0)
    {
LABEL_14:
      v12 = v83;
      v83 = 0;
      *(_BYTE *)(a2 + 112) |= 1u;
      *(_QWORD *)a2 = v12;
    }
    else
    {
      v31 = *((_QWORD *)this + 1);
      v32 = *((_QWORD *)this + 2);
      *(_QWORD *)&v71 = v31;
      *((_QWORD *)&v71 + 1) = v32;
      v33 = llvm::StringRef::find((uint64_t *)&v71, "------ Start", 0xCuLL, 0);
      v34 = llvm::StringRef::find((uint64_t *)&v71, "------ End", 0xAuLL, 0);
      if ((unint64_t)(v34 - 1) > 0xFFFFFFFFFFFFFFFDLL)
      {
        if (v34 == -1)
          v35 = v32;
        else
          v35 = 0;
      }
      else if (*(_BYTE *)(v31 + v34 - 1) == 45)
      {
        v35 = v34 - 1;
      }
      else
      {
        v35 = v34;
      }
      v36 = llvm::StringRef::find((uint64_t *)&v71, "------ Compiling function : ", 0x1CuLL, 0);
      if (v36 == -1)
        v37 = v32;
      else
        v37 = v36;
      if (v33 == -1)
        v38 = v32;
      else
        v38 = v33;
      if (v37 >= v35)
        v37 = v35;
      if (v37 >= v38)
        v39 = v38;
      else
        v39 = v37;
      if (v39)
      {
        if (v32 >= v39)
          v40 = v39;
        else
          v40 = v32;
        *((_QWORD *)this + 15) = v31;
        v41 = (__int128 *)((char *)this + 120);
        *((_QWORD *)this + 16) = v40;
        llvm::AGCStatusReader::computeMetadata(this, v5);
        v42 = *((_OWORD *)v5 + 3);
        v73 = *((_OWORD *)v5 + 2);
        v74 = v42;
        v75 = *((_QWORD *)v5 + 8);
        v43 = *((_OWORD *)v5 + 1);
        v71 = *(_OWORD *)v5;
        v72 = v43;
        v44 = (void **)((char *)this + 96);
        if (*((char *)this + 119) < 0)
        {
          sub_1C47EBC30(&v76, *((void **)this + 12), *((_QWORD *)this + 13));
          v49 = *((char *)this + 119);
          v78 = *v41;
          *((_WORD *)this + 12) = 256;
          *(_OWORD *)((char *)this + 26) = 0u;
          *(_OWORD *)((char *)this + 42) = 0u;
          *(_OWORD *)((char *)this + 58) = 0u;
          *(_OWORD *)((char *)this + 74) = 0u;
          *((_QWORD *)this + 11) = 0;
          if (v49 < 0)
            operator delete(*v44);
        }
        else
        {
          v76 = *(_OWORD *)v44;
          v77 = *((_QWORD *)this + 14);
          v78 = *v41;
          *((_WORD *)this + 12) = 256;
          *(_OWORD *)((char *)this + 26) = 0u;
          *(_OWORD *)((char *)this + 42) = 0u;
          *(_OWORD *)((char *)this + 58) = 0u;
          *(_OWORD *)((char *)this + 74) = 0u;
          *((_QWORD *)this + 11) = 0;
        }
        v50 = 0;
        v51 = 0;
        *v44 = 0;
        *((_QWORD *)this + 13) = 0;
        *((_QWORD *)this + 14) = 0;
        *((_QWORD *)this + 15) = "";
        *((_QWORD *)this + 16) = 0;
        v53 = *((_QWORD *)this + 1);
        v52 = *((_QWORD *)this + 2);
        if (v52 >= v39)
          v54 = v39;
        else
          v54 = *((_QWORD *)this + 2);
        v55 = (char *)(v53 + v54);
        v56 = v52 - v54;
        *((_QWORD *)this + 1) = v53 + v54;
        *((_QWORD *)this + 2) = v52 - v54;
        v79[0] = "------ End";
        v79[1] = "------- End";
        do
        {
          v57 = v50;
          v58 = (const void *)v79[v51];
          if (!v58 || (v59 = strlen((const char *)v79[v51]), v56 >= v59) && (!v59 || !memcmp(v55, v58, v59)))
          {
            v70 = 10;
            v60 = llvm::StringRef::find(v6, &v70, 1uLL, 0);
            v61 = v60 + 1;
            if (v56 < v60 + 1)
              v61 = v56;
            if (v60 == -1)
              v62 = 0;
            else
              v62 = &v55[v61];
            v63 = v56 - v61;
            if (v60 == -1)
              v64 = 0;
            else
              v64 = v63;
            *((_QWORD *)this + 1) = v62;
            *((_QWORD *)this + 2) = v64;
            first_not_of = llvm::StringRef::find_first_not_of(v6, " \t\n\v\f\r", 6, 0);
            if (first_not_of >= v64)
              v66 = v64;
            else
              v66 = first_not_of;
            v55 = &v62[v66];
            v56 = v64 - v66;
            *((_QWORD *)this + 1) = v55;
            *((_QWORD *)this + 2) = v64 - v66;
          }
          v50 = 1;
          v51 = 1;
        }
        while ((v57 & 1) == 0);
        *((_QWORD *)this + 18) = "";
        *((_QWORD *)this + 19) = 0;
        *((_DWORD *)this + 40) = 5;
        *((_QWORD *)this + 21) = "";
        *((_QWORD *)this + 22) = 0;
        *(_BYTE *)(a2 + 112) &= ~1u;
        v67 = v74;
        *(_OWORD *)(a2 + 32) = v73;
        *(_OWORD *)(a2 + 48) = v67;
        *(_QWORD *)(a2 + 64) = v75;
        v68 = v72;
        *(_OWORD *)a2 = v71;
        *(_OWORD *)(a2 + 16) = v68;
        v69 = v76;
        *(_QWORD *)(a2 + 88) = v77;
        *(_OWORD *)(a2 + 72) = v69;
        *(_OWORD *)(a2 + 96) = v78;
      }
      else
      {
        LOBYTE(v71) = 10;
        v45 = llvm::StringRef::find(v6, (char *)&v71, 1uLL, 0);
        v82 = 1283;
        if (v32 >= v45)
          v46 = v45;
        else
          v46 = v32;
        if (v45 == -1)
          v46 = v32;
        v79[0] = "Unexpected \"------ Start\" or \"------ End\"\nNear ";
        v80 = v31;
        v81 = v46;
        *(_QWORD *)&v71 = v79;
        *(_QWORD *)&v72 = "\n";
        LOWORD(v73) = 770;
        v47 = std::generic_category();
        v48 = operator new();
        *(_QWORD *)v48 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&v71, (_QWORD *)(v48 + 8));
        *(_QWORD *)(v48 + 32) = 5;
        *(_QWORD *)(v48 + 40) = v47;
        *(_BYTE *)(v48 + 48) = 1;
        *(_BYTE *)(a2 + 112) |= 1u;
        *(_QWORD *)a2 = v48;
      }
    }
    if ((v84 & 1) != 0)
    {
      v13 = v83;
      v83 = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
  }
  else
  {
    *(_BYTE *)(a2 + 112) &= ~1u;
    v14 = *(_OWORD *)((char *)this + 72);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)((char *)this + 56);
    *(_OWORD *)(a2 + 48) = v14;
    *(_QWORD *)(a2 + 64) = *((_QWORD *)this + 11);
    v15 = *(_OWORD *)((char *)this + 40);
    *(_OWORD *)a2 = *(_OWORD *)v5;
    *(_OWORD *)(a2 + 16) = v15;
    v16 = (_BYTE *)(a2 + 72);
    if (*((char *)this + 119) < 0)
    {
      sub_1C47EBC30(v16, *((void **)this + 12), *((_QWORD *)this + 13));
    }
    else
    {
      *(_OWORD *)v16 = *((_OWORD *)this + 6);
      *(_QWORD *)(a2 + 88) = *((_QWORD *)this + 14);
    }
    *(_OWORD *)(a2 + 96) = *(_OWORD *)((char *)this + 120);
  }
}

void llvm::AGCStatusReader::computeMetadata(llvm::AGCStatusReader *this, llvm::AGCStatusRecord *a2)
{
  uint64_t v4;
  int v5;
  __int128 v6;
  size_t v7;
  const void *v8;
  __int128 *p_dst;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type size;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void **v21;
  int v22;
  uint64_t v23;
  __int128 *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  __int128 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::string *v33;
  std::string::size_type v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  std::string::size_type v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void **v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  void *__p[2];
  std::string::size_type v50;
  _QWORD v51[2];
  char *v52;
  uint64_t v53;
  __int16 v54;
  __int128 __dst;
  int64_t v56;

  v4 = *((int *)this + 35);
  if ((_DWORD)v4 != -1)
  {
    v5 = *((unsigned __int8 *)this + 64);
    *((_QWORD *)this + 7) = v4;
    if (!v5)
      *((_BYTE *)this + 64) = 1;
  }
  v6 = *(_OWORD *)((char *)this + 168);
  if (!*((_BYTE *)this + 48))
    *((_BYTE *)this + 48) = 1;
  *((_OWORD *)this + 2) = v6;
  v7 = *((_QWORD *)this + 19);
  if (!v7)
  {
    if (*((_BYTE *)this + 136))
    {
      std::to_string(&v46, v4);
      v10 = std::string::append(&v46, "/anonymous_");
      v11 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v45, *((_DWORD *)this + 46));
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v45;
      else
        v12 = (std::string *)v45.__r_.__value_.__r.__words[0];
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v45.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v45.__r_.__value_.__l.__size_;
      v14 = std::string::append(&v47, (const std::string::value_type *)v12, size);
      v15 = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      v16 = std::string::append(&v48, ".");
      v17 = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v50 = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      v18 = *((int *)this + 40);
      v19 = qword_1C85F1FA0[v18];
      v20 = off_1E8132B38[v18];
      v51[0] = __p;
      v52 = v20;
      v53 = v19;
      v54 = 1284;
      llvm::Twine::str((llvm::Twine *)v51, &__dst);
      v21 = (void **)((char *)a2 + 72);
      if (*((char *)a2 + 95) < 0)
        operator delete(*v21);
      *(_OWORD *)v21 = __dst;
      *((_QWORD *)a2 + 11) = v56;
      HIBYTE(v56) = 0;
      LOBYTE(__dst) = 0;
      if (SHIBYTE(v50) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v45.__r_.__value_.__l.__data_);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      *((_BYTE *)a2 + 1) = 0;
      v22 = *((_DWORD *)this + 40);
      goto LABEL_35;
    }
LABEL_34:
    MEMORY[0x1CAA32ABC]((char *)a2 + 72, "metadata.txt");
    *((_BYTE *)a2 + 1) = 0;
    v22 = 6;
LABEL_35:
    *((_DWORD *)a2 + 1) = v22;
    return;
  }
  v8 = (const void *)*((_QWORD *)this + 18);
  if (!*((_BYTE *)this + 88))
    *((_BYTE *)this + 88) = 1;
  *((_QWORD *)this + 9) = v8;
  *((_QWORD *)this + 10) = v7;
  if (!*((_BYTE *)this + 136))
    goto LABEL_34;
  if (v8)
  {
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v7 >= 0x17)
    {
      v26 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v26 = v7 | 7;
      v27 = v26 + 1;
      p_dst = (__int128 *)operator new(v26 + 1);
      *((_QWORD *)&__dst + 1) = v7;
      v56 = v27 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v56) = v7;
      p_dst = &__dst;
    }
    memmove(p_dst, v8, v7);
    *((_BYTE *)p_dst + v7) = 0;
    v25 = HIBYTE(v56);
    v23 = *((_QWORD *)&__dst + 1);
    v24 = (__int128 *)__dst;
  }
  else
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    __dst = 0uLL;
    v56 = 0;
  }
  v28 = &__dst;
  if (v25 >= 0)
    v29 = &__dst;
  else
    v29 = v24;
  v30 = v25 & 0x7F;
  if (v25 >= 0)
    v31 = v25 & 0x7F;
  else
    v31 = v23;
  if (v31)
  {
    do
    {
      if (*(_BYTE *)v29 == 32)
        *(_BYTE *)v29 = 95;
      v29 = (__int128 *)((char *)v29 + 1);
      --v31;
    }
    while (v31);
    v25 = HIBYTE(v56);
    v23 = *((_QWORD *)&__dst + 1);
    v24 = (__int128 *)__dst;
    v30 = HIBYTE(v56) & 0x7F;
  }
  if (v25 >= 0)
  {
    v32 = v30;
  }
  else
  {
    v28 = v24;
    v32 = v23;
  }
  for (; v32; --v32)
  {
    if (*(_BYTE *)v28 == 58)
      *(_BYTE *)v28 = 95;
    v28 = (__int128 *)((char *)v28 + 1);
  }
  std::to_string(&v45, *((_DWORD *)this + 35));
  v33 = std::string::append(&v45, "/");
  v34 = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  if (v56 >= 0)
    v35 = (const std::string::value_type *)&__dst;
  else
    v35 = (const std::string::value_type *)__dst;
  if (v56 >= 0)
    v36 = HIBYTE(v56) & 0x7F;
  else
    v36 = *((_QWORD *)&__dst + 1);
  v37 = std::string::append(&v46, v35, v36);
  v38 = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  v39 = std::string::append(&v47, ".");
  v40 = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  v41 = *((int *)this + 40);
  v42 = qword_1C85F1FA0[v41];
  v43 = off_1E8132B38[v41];
  v51[0] = &v48;
  v52 = v43;
  v53 = v42;
  v54 = 1284;
  llvm::Twine::str((llvm::Twine *)v51, __p);
  v44 = (void **)((char *)a2 + 72);
  if (*((char *)a2 + 95) < 0)
    operator delete(*v44);
  *(_OWORD *)v44 = *(_OWORD *)__p;
  *((_QWORD *)a2 + 11) = v50;
  HIBYTE(v50) = 0;
  LOBYTE(__p[0]) = 0;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  *((_DWORD *)a2 + 1) = *((_DWORD *)this + 40);
  if (SHIBYTE(v56) < 0)
    operator delete((void *)__dst);
}

uint64_t llvm::AGCStatusReader::getLineNumber(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unint64_t v3;
  uint64_t result;
  int v5;

  v2 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16) - (_QWORD)v2;
  result = 0;
  if (v3 >= a2 - (uint64_t)v2)
    v3 = a2 - (_QWORD)v2;
  for (; v3; --v3)
  {
    v5 = *v2++;
    if (v5 == 10)
      ++result;
  }
  return result;
}

uint64_t llvm::AGCStatusRecord::AGCStatusRecord(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(_WORD *)result = 256;
  *(_DWORD *)(result + 4) = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 16) = a4;
  *(_BYTE *)(result + 24) = 1;
  *(_QWORD *)(result + 32) = a5;
  *(_BYTE *)(result + 40) = 1;
  *(_QWORD *)(result + 48) = a6;
  *(_QWORD *)(result + 56) = a7;
  *(_BYTE *)(result + 64) = 1;
  *(_BYTE *)(result + 95) = 0;
  *(_BYTE *)(result + 72) = 0;
  *(_QWORD *)(result + 96) = &unk_1C868F0BF;
  *(_QWORD *)(result + 104) = 0;
  return result;
}

{
  *(_WORD *)result = 256;
  *(_DWORD *)(result + 4) = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 16) = a4;
  *(_BYTE *)(result + 24) = 1;
  *(_QWORD *)(result + 32) = a5;
  *(_BYTE *)(result + 40) = 1;
  *(_QWORD *)(result + 48) = a6;
  *(_QWORD *)(result + 56) = a7;
  *(_BYTE *)(result + 64) = 1;
  *(_BYTE *)(result + 95) = 0;
  *(_BYTE *)(result + 72) = 0;
  *(_QWORD *)(result + 96) = &unk_1C868F0BF;
  *(_QWORD *)(result + 104) = 0;
  return result;
}

uint64_t llvm::AGCStatusRecord::operator BOOL(unsigned __int8 *a1)
{
  return *a1;
}

llvm::raw_ostream *sub_1C4D6E95C(llvm::raw_ostream *this, const void *a2, size_t a3, uint64_t a4)
{
  llvm::raw_ostream *v7;
  _DWORD *v8;
  llvm::raw_ostream *v9;
  const char *v10;
  size_t v11;
  _DWORD *v12;
  const char *v13;
  llvm::raw_ostream *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void *v19;
  _BYTE *v20;
  const char *v21;
  unint64_t v22;
  llvm::raw_ostream *v23;
  size_t v24;
  _DWORD *v25;
  uint64_t v26;
  _BYTE *v27;
  _DWORD *v28;
  _DWORD *v29;
  const void *v30;
  size_t v31;
  uint64_t v32;
  _WORD *v33;
  _QWORD *v34;
  uint64_t v35;

  if (*(_BYTE *)(a4 + 1))
  {
    v7 = this;
    v8 = (_DWORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v8 > 6uLL)
    {
      *(_DWORD *)((char *)v8 + 3) = 539831597;
      *v8 = 757935405;
      this = (llvm::raw_ostream *)(*((_QWORD *)this + 4) + 7);
      *((_QWORD *)v7 + 4) = this;
      v9 = v7;
    }
    else
    {
      v9 = llvm::raw_ostream::write(this, "------ ", 7uLL);
      this = (llvm::raw_ostream *)*((_QWORD *)v9 + 4);
    }
    if (a3 <= *((_QWORD *)v9 + 3) - (_QWORD)this)
    {
      if (a3)
      {
        memcpy(this, a2, a3);
        this = (llvm::raw_ostream *)(*((_QWORD *)v9 + 4) + a3);
        *((_QWORD *)v9 + 4) = this;
      }
    }
    else
    {
      v9 = llvm::raw_ostream::write(v9, (const char *)a2, a3);
      this = (llvm::raw_ostream *)*((_QWORD *)v9 + 4);
    }
    if (*((llvm::raw_ostream **)v9 + 3) == this)
    {
      this = llvm::raw_ostream::write(v9, " ", 1uLL);
    }
    else
    {
      *(_BYTE *)this = 32;
      ++*((_QWORD *)v9 + 4);
    }
    v10 = "compilation flags for";
    v11 = 21;
    switch(*(_DWORD *)(a4 + 4))
    {
      case 2:
        v12 = (_DWORD *)*((_QWORD *)v7 + 4);
        if (*((_QWORD *)v7 + 3) - (_QWORD)v12 <= 6uLL)
        {
          v13 = "LLVM IR";
          v14 = v7;
          v15 = 7;
          goto LABEL_17;
        }
        *(_DWORD *)((char *)v12 + 3) = 1380524109;
        *v12 = 1297501260;
        v35 = *((_QWORD *)v7 + 4) + 7;
        goto LABEL_71;
      case 4:
        v17 = *((_QWORD *)v7 + 4);
        if ((unint64_t)(*((_QWORD *)v7 + 3) - v17) <= 2)
        {
          v13 = "USC";
          v14 = v7;
          v15 = 3;
          goto LABEL_17;
        }
        *(_BYTE *)(v17 + 2) = 67;
        *(_WORD *)v17 = 21333;
        v35 = *((_QWORD *)v7 + 4) + 3;
        goto LABEL_71;
      case 7:
        goto LABEL_22;
      case 8:
        v10 = "compilation key description for";
        v11 = 31;
        goto LABEL_22;
      case 9:
        v10 = "Translator Metadata";
        v11 = 19;
        goto LABEL_22;
      case 0xA:
        v10 = "Target Translator Metadata";
        v11 = 26;
LABEL_22:
        v19 = (void *)*((_QWORD *)v7 + 4);
        if (v11 <= *((_QWORD *)v7 + 3) - (_QWORD)v19)
        {
          this = (llvm::raw_ostream *)memcpy(v19, v10, v11);
          v18 = 0;
          *((_QWORD *)v7 + 4) += v11;
        }
        else
        {
          this = llvm::raw_ostream::write(v7, v10, v11);
          v18 = 0;
        }
        goto LABEL_25;
      default:
        v16 = *((_QWORD *)v7 + 4);
        if ((unint64_t)(*((_QWORD *)v7 + 3) - v16) > 4)
        {
          *(_BYTE *)(v16 + 4) = 114;
          *(_DWORD *)v16 = 1701344335;
          v35 = *((_QWORD *)v7 + 4) + 5;
LABEL_71:
          *((_QWORD *)v7 + 4) = v35;
        }
        else
        {
          v13 = "Other";
          v14 = v7;
          v15 = 5;
LABEL_17:
          this = llvm::raw_ostream::write(v14, v13, v15);
        }
        v18 = 1;
LABEL_25:
        v20 = (_BYTE *)*((_QWORD *)v7 + 4);
        if (*((_BYTE **)v7 + 3) == v20)
        {
          this = llvm::raw_ostream::write(v7, " ", 1uLL);
        }
        else
        {
          *v20 = 32;
          ++*((_QWORD *)v7 + 4);
        }
        if (!*(_BYTE *)(a4 + 24))
        {
          v25 = (_DWORD *)*((_QWORD *)v7 + 4);
          if (*((_QWORD *)v7 + 3) - (_QWORD)v25 <= 6uLL)
          {
            v21 = "unknown";
            v23 = v7;
            v24 = 7;
            goto LABEL_32;
          }
          *(_DWORD *)((char *)v25 + 3) = 1853321070;
          *v25 = 1852534389;
          v26 = *((_QWORD *)v7 + 4) + 7;
          goto LABEL_35;
        }
        v21 = *(const char **)(a4 + 8);
        v22 = *(_QWORD *)(a4 + 16);
        this = (llvm::raw_ostream *)*((_QWORD *)v7 + 4);
        if (v22 > *((_QWORD *)v7 + 3) - (_QWORD)this)
        {
          v23 = v7;
          v24 = *(_QWORD *)(a4 + 16);
LABEL_32:
          this = llvm::raw_ostream::write(v23, v21, v24);
          goto LABEL_36;
        }
        if (v22)
        {
          this = (llvm::raw_ostream *)memcpy(this, v21, *(_QWORD *)(a4 + 16));
          v26 = *((_QWORD *)v7 + 4) + v22;
LABEL_35:
          *((_QWORD *)v7 + 4) = v26;
        }
LABEL_36:
        v27 = (_BYTE *)*((_QWORD *)v7 + 4);
        if (*((_BYTE **)v7 + 3) == v27)
        {
          this = llvm::raw_ostream::write(v7, " ", 1uLL);
          v28 = (_DWORD *)*((_QWORD *)v7 + 4);
        }
        else
        {
          *v27 = 32;
          v28 = (_DWORD *)(*((_QWORD *)v7 + 4) + 1);
          *((_QWORD *)v7 + 4) = v28;
        }
        if (*((_QWORD *)v7 + 3) - (_QWORD)v28 > 6uLL)
        {
          *(_DWORD *)((char *)v28 + 3) = 544367972;
          *v28 = 1684105331;
          *((_QWORD *)v7 + 4) += 7;
        }
        else
        {
          this = llvm::raw_ostream::write(v7, "shader ", 7uLL);
        }
        if (*(_BYTE *)(a4 + 40))
        {
          this = llvm::raw_ostream::operator<<(v7, *(_QWORD *)(a4 + 32));
          if (!v18)
            goto LABEL_54;
        }
        else
        {
          v29 = (_DWORD *)*((_QWORD *)v7 + 4);
          if (*((_QWORD *)v7 + 3) - (_QWORD)v29 > 6uLL)
          {
            *(_DWORD *)((char *)v29 + 3) = 1853321070;
            *v29 = 1852534389;
            *((_QWORD *)v7 + 4) += 7;
            if (!v18)
              goto LABEL_54;
          }
          else
          {
            this = llvm::raw_ostream::write(v7, "unknown", 7uLL);
            if (!v18)
              goto LABEL_54;
          }
        }
        if (*(_BYTE *)(a4 + 64))
        {
          v32 = a4 + 48;
          v30 = *(const void **)(a4 + 48);
          v31 = *(_QWORD *)(v32 + 8);
          v33 = (_WORD *)*((_QWORD *)v7 + 4);
          if (*((_QWORD *)v7 + 3) - (_QWORD)v33 > 1uLL)
          {
            *v33 = 10272;
            this = (llvm::raw_ostream *)(*((_QWORD *)v7 + 4) + 2);
            *((_QWORD *)v7 + 4) = this;
          }
          else
          {
            llvm::raw_ostream::write(v7, " (", 2uLL);
            this = (llvm::raw_ostream *)*((_QWORD *)v7 + 4);
          }
          if (v31 <= *((_QWORD *)v7 + 3) - (_QWORD)this)
          {
            if (v31)
            {
              memcpy(this, v30, v31);
              this = (llvm::raw_ostream *)(*((_QWORD *)v7 + 4) + v31);
              *((_QWORD *)v7 + 4) = this;
            }
          }
          else
          {
            llvm::raw_ostream::write(v7, (const char *)v30, v31);
            this = (llvm::raw_ostream *)*((_QWORD *)v7 + 4);
          }
          if (*((llvm::raw_ostream **)v7 + 3) == this)
          {
            this = llvm::raw_ostream::write(v7, ")", 1uLL);
          }
          else
          {
            *(_BYTE *)this = 41;
            ++*((_QWORD *)v7 + 4);
          }
        }
LABEL_54:
        v34 = (_QWORD *)*((_QWORD *)v7 + 4);
        if (*((_QWORD *)v7 + 3) - (_QWORD)v34 > 7uLL)
        {
          *v34 = 0xA2D2D2D2D2D2D20;
          *((_QWORD *)v7 + 4) += 8;
        }
        else
        {
          this = llvm::raw_ostream::write(v7, " ------\n", 8uLL);
        }
        break;
    }
  }
  return this;
}

void llvm::AGCStatusRecord::emitTarRecord(llvm::AGCStatusRecord *this, llvm::raw_ostream *a2, int a3)
{
  const std::string *v6;
  unint64_t v7;
  uint64_t v8;
  std::string::size_type size;
  unsigned int v10;
  uint64_t v11;
  std::string *p_dst;
  size_t v13;
  llvm::raw_ostream *v14;
  std::string::size_type v15;
  std::string::size_type v16;
  llvm::raw_ostream *v17;
  std::string *p_p;
  uint64_t v19;
  uint64_t v20;
  std::string *v21;
  size_t v22;
  _BYTE *v23;
  _OWORD *v24;
  _BYTE *v25;
  _DWORD *v26;
  llvm::raw_ostream *v27;
  _QWORD *v28;
  _BYTE *v29;
  _OWORD *v30;
  _OWORD *v31;
  std::string *v32;
  size_t v33;
  llvm::raw_ostream *v34;
  std::string::size_type v35;
  std::string::size_type v36;
  llvm::raw_ostream *v37;
  std::string *v38;
  uint64_t v39;
  uint64_t v40;
  std::string *v41;
  size_t v42;
  std::string::size_type v43;
  std::string *v44;
  unsigned int i;
  int v46;
  std::string *v47;
  size_t v48;
  std::string *v49;
  size_t v50;
  const void *v51;
  std::string::size_type v52;
  std::string *v53;
  char v54;
  std::string *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  size_t v59;
  void *v60;
  uint64_t v61;
  std::string::size_type v62;
  std::string *v63;
  uint64_t v64;
  uint64_t v65;
  std::string *v66;
  size_t v67;
  std::string __p;
  void (**v69)(llvm::raw_ostream *__hidden);
  int v70;
  uint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  char v74;
  uint64_t v75;
  int v76;
  std::string *__str;
  void *v78[2];
  uint64_t v79;
  std::string v80;
  std::string __dst;
  char v82;

  v6 = (const std::string *)((char *)this + 72);
  if (*((char *)this + 95) < 0)
  {
    v7 = *((_QWORD *)this + 10);
    if (v7 < 0x64)
    {
      sub_1C47EBC30(&__dst, v6->__r_.__value_.__l.__data_, v7);
      goto LABEL_7;
    }
  }
  else
  {
    v7 = *((unsigned __int8 *)this + 95);
    if (*((unsigned __int8 *)this + 95) <= 0x63u)
    {
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 11);
      goto LABEL_7;
    }
  }
  std::string::basic_string(&__dst, v6, v7 - 100, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v69);
LABEL_7:
  if (*((char *)this + 95) < 0)
    v8 = *((_QWORD *)this + 10);
  else
    v8 = *((unsigned __int8 *)this + 95);
  size = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __dst.__r_.__value_.__l.__size_;
  std::string::basic_string(&v80, v6, 0, v8 - size, (std::allocator<char> *)&v69);
  v10 = 0;
  v69 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  __str = (std::string *)v78;
  v78[0] = 0;
  v11 = *((_QWORD *)this + 13);
  v78[1] = 0;
  v79 = 0;
  v70 = 0;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v72 = 0;
  v73 = 0;
  v71 = 0;
  if (a3)
    v10 = time(0);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
  else
    v13 = __dst.__r_.__value_.__l.__size_;
  v14 = llvm::raw_ostream::write((llvm::raw_ostream *)&v69, (const char *)p_dst, v13);
  v15 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v15 = __dst.__r_.__value_.__l.__size_;
  v16 = 100 - v15;
  if (100 - v15 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_148;
  v17 = v14;
  if (v16 >= 0x17)
  {
    v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v19 = v16 | 7;
    v20 = v19 + 1;
    p_p = (std::string *)operator new(v19 + 1);
    __p.__r_.__value_.__l.__size_ = v16;
    __p.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_29;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 100 - v15;
  p_p = &__p;
  if (v15 != 100)
LABEL_29:
    bzero(p_p, v16);
  p_p->__r_.__value_.__s.__data_[v16] = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &__p;
  else
    v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    v22 = __p.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(v17, (const char *)v21, v22);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_1C4D6F770((llvm::raw_ostream *)&v69, 0x1A4u, 8u, 1);
  sub_1C4D6F770((llvm::raw_ostream *)&v69, 0, 8u, 1);
  sub_1C4D6F770((llvm::raw_ostream *)&v69, 0, 8u, 1);
  sub_1C4D6F770((llvm::raw_ostream *)&v69, v11, 0xCu, 0);
  sub_1C4D6F770((llvm::raw_ostream *)&v69, v10, 0xCu, 0);
  if ((unint64_t)(v72 - v73) > 7)
  {
    *(_QWORD *)v73 = 0x2020202020202020;
    v23 = v73 + 8;
    v73 += 8;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v69, "        ", 8uLL);
    v23 = v73;
  }
  if (v72 == v23)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v69, "0", 1uLL);
  }
  else
  {
    *v23 = 48;
    ++v73;
  }
  v24 = operator new(0x68uLL);
  *v24 = 0u;
  v24[1] = 0u;
  v24[2] = 0u;
  v24[3] = 0u;
  v24[4] = 0u;
  v24[5] = 0u;
  *((_DWORD *)v24 + 24) = 0;
  llvm::raw_ostream::write((llvm::raw_ostream *)&v69, (const char *)v24, 0x63uLL);
  operator delete(v24);
  v25 = v73;
  if (v73 >= v72)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v69, 0);
  }
  else
  {
    ++v73;
    *v25 = 0;
  }
  v26 = v73;
  if ((unint64_t)(v72 - v73) > 4)
  {
    v28 = &v73;
    v73[4] = 114;
    *v26 = 1635021685;
    v29 = v73 + 5;
    v73 += 5;
    v27 = (llvm::raw_ostream *)&v69;
  }
  else
  {
    v27 = llvm::raw_ostream::write((llvm::raw_ostream *)&v69, "ustar", 5uLL);
    v28 = (_QWORD *)((char *)v27 + 32);
    v29 = (_BYTE *)*((_QWORD *)v27 + 4);
  }
  if ((unint64_t)v29 >= *((_QWORD *)v27 + 3))
  {
    llvm::raw_ostream::write(v27, 0);
  }
  else
  {
    *v28 = v29 + 1;
    *v29 = 0;
  }
  if ((unint64_t)(v72 - v73) > 1)
  {
    *(_WORD *)v73 = 12336;
    v73 += 2;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v69, "00", 2uLL);
  }
  v30 = operator new(0x28uLL);
  *v30 = 0u;
  v30[1] = 0u;
  *((_BYTE *)v30 + 32) = 0;
  llvm::raw_ostream::write((llvm::raw_ostream *)&v69, (const char *)v30, 0x20uLL);
  operator delete(v30);
  v31 = operator new(0x28uLL);
  *v31 = 0u;
  v31[1] = 0u;
  *((_BYTE *)v31 + 32) = 0;
  llvm::raw_ostream::write((llvm::raw_ostream *)&v69, (const char *)v31, 0x20uLL);
  operator delete(v31);
  sub_1C4D6F770((llvm::raw_ostream *)&v69, 0, 8u, 1);
  sub_1C4D6F770((llvm::raw_ostream *)&v69, 0, 8u, 1);
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32 = &v80;
  else
    v32 = (std::string *)v80.__r_.__value_.__r.__words[0];
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = *((_BYTE *)&v80.__r_.__value_.__s + 23) & 0x7F;
  else
    v33 = v80.__r_.__value_.__l.__size_;
  v34 = llvm::raw_ostream::write((llvm::raw_ostream *)&v69, (const char *)v32, v33);
  v35 = *((_BYTE *)&v80.__r_.__value_.__s + 23) & 0x7F;
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v35 = v80.__r_.__value_.__l.__size_;
  v36 = 155 - v35;
  if (155 - v35 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_148;
  v37 = v34;
  if (v36 >= 0x17)
  {
    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v39 = v36 | 7;
    v40 = v39 + 1;
    v38 = (std::string *)operator new(v39 + 1);
    __p.__r_.__value_.__l.__size_ = v36;
    __p.__r_.__value_.__r.__words[2] = v40 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
    goto LABEL_67;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = -101 - v35;
  v38 = &__p;
  if (v35 != 155)
LABEL_67:
    bzero(v38, v36);
  v38->__r_.__value_.__s.__data_[v36] = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = &__p;
  else
    v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    v42 = __p.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(v37, (const char *)v41, v42);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 12;
  __p.__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 5) = 0;
  llvm::raw_ostream::write((llvm::raw_ostream *)&v69, (const char *)&__p, 0xCuLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    v44 = (std::string *)__str->__r_.__value_.__r.__words[0];
    v43 = __str->__r_.__value_.__l.__size_;
  }
  else
  {
    v43 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    v44 = __str;
  }
  for (i = 0; v43; --v43)
  {
    v46 = v44->__r_.__value_.__s.__data_[0];
    v44 = (std::string *)((char *)v44 + 1);
    i += v46;
  }
  std::string::basic_string(&__p, __str, 0, 0x94uLL, (std::allocator<char> *)&v82);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v47 = &__p;
  else
    v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v48 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    v48 = __p.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(a2, (const char *)v47, v48);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_1C4D6F770(a2, i, 8u, 2);
  std::string::basic_string(&__p, __str, 0x9CuLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v82);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v49 = &__p;
  else
    v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v50 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    v50 = __p.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(a2, (const char *)v49, v50);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v51 = (const void *)*((_QWORD *)this + 12);
  if (!v51)
  {
    v54 = 0;
    memset(&__p, 0, sizeof(__p));
    v55 = &__p;
    goto LABEL_113;
  }
  v52 = *((_QWORD *)this + 13);
  if (v52 > 0x7FFFFFFFFFFFFFF7)
LABEL_148:
    abort();
  if (v52 >= 0x17)
  {
    v56 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v52 | 7) != 0x17)
      v56 = v52 | 7;
    v57 = v56 + 1;
    v53 = (std::string *)operator new(v56 + 1);
    __p.__r_.__value_.__l.__size_ = v52;
    __p.__r_.__value_.__r.__words[2] = v57 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
    goto LABEL_108;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v52;
  v53 = &__p;
  if (v52)
LABEL_108:
    memmove(v53, v51, v52);
  v53->__r_.__value_.__s.__data_[v52] = 0;
  v54 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v55 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (!__p.__r_.__value_.__r.__words[0])
    {
      v58 = 0;
LABEL_117:
      operator delete(v58);
      goto LABEL_118;
    }
  }
  else
  {
    v55 = &__p;
  }
LABEL_113:
  v59 = strlen((const char *)v55);
  v60 = (void *)*((_QWORD *)a2 + 4);
  if (v59 <= *((_QWORD *)a2 + 3) - (_QWORD)v60)
  {
    if (v59)
    {
      memcpy(v60, v55, v59);
      *((_QWORD *)a2 + 4) += v59;
    }
  }
  else
  {
    llvm::raw_ostream::write(a2, (const char *)v55, v59);
    v54 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  if (v54 < 0)
  {
    v58 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_117;
  }
LABEL_118:
  v61 = -v11;
  v62 = -v11 & 0x1FF;
  if (v62 >= 0x17)
  {
    v64 = (v61 & 0x1F8) + 8;
    if ((v62 | 7) == 0x17)
      v65 = v64;
    else
      v65 = v62 | 7;
    v63 = (std::string *)operator new(v65 + 1);
    __p.__r_.__value_.__l.__size_ = v62;
    __p.__r_.__value_.__r.__words[2] = v65 - 0x7FFFFFFFFFFFFFFFLL;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
    goto LABEL_125;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v61;
  v63 = &__p;
  if (v62)
LABEL_125:
    bzero(v63, v62);
  v63->__r_.__value_.__s.__data_[v62] = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v66 = &__p;
  else
    v66 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v67 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    v67 = __p.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(a2, (const char *)v66, v67);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v69 = off_1E81A6E70;
  if (v76 == 1 && v71)
    MEMORY[0x1CAA32F9C](v71, 0x1000C8077774924);
  if (SHIBYTE(v79) < 0)
    operator delete(v78[0]);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_1C4D6F770(llvm::raw_ostream *a1, unsigned int a2, unsigned int a3, int a4)
{
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  void **v10;
  BOOL v11;
  const char *v12;
  size_t v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  char v19;
  void *__b[2];
  char v21;

  v7 = a3 - 1;
  if (a4)
    v7 = a3;
  if ((a4 - 1) >= 2)
    v8 = v7;
  else
    v8 = a3 - 2;
  v21 = v8;
  memset(__b, 48, v8);
  *((_BYTE *)__b + v8) = 0;
  if (a2)
  {
    v9 = v8 - 1;
    do
    {
      if (v21 >= 0)
        v10 = __b;
      else
        v10 = (void **)__b[0];
      *((_BYTE *)v10 + v9--) = a2 & 7 | 0x30;
      v11 = a2 > 7;
      a2 >>= 3;
    }
    while (v11);
  }
  if (v21 >= 0)
    v12 = (const char *)__b;
  else
    v12 = (const char *)__b[0];
  if (v21 >= 0)
    v13 = v21 & 0x7F;
  else
    v13 = (size_t)__b[1];
  llvm::raw_ostream::write(a1, v12, v13);
  switch(a4)
  {
    case 2:
      v15 = (_BYTE *)*((_QWORD *)a1 + 4);
      if ((unint64_t)v15 >= *((_QWORD *)a1 + 3))
      {
        llvm::raw_ostream::write(a1, 0);
      }
      else
      {
        *((_QWORD *)a1 + 4) = v15 + 1;
        *v15 = 0;
      }
      goto LABEL_30;
    case 1:
      v14 = (_BYTE *)*((_QWORD *)a1 + 4);
      if ((unint64_t)v14 >= *((_QWORD *)a1 + 3))
      {
        llvm::raw_ostream::write(a1, 32);
      }
      else
      {
        *((_QWORD *)a1 + 4) = v14 + 1;
        *v14 = 32;
      }
      v16 = (_BYTE *)*((_QWORD *)a1 + 4);
      if ((unint64_t)v16 < *((_QWORD *)a1 + 3))
      {
        *((_QWORD *)a1 + 4) = v16 + 1;
        *v16 = 0;
        break;
      }
      v18 = a1;
      v19 = 0;
LABEL_34:
      llvm::raw_ostream::write(v18, v19);
      break;
    case 0:
LABEL_30:
      v17 = (_BYTE *)*((_QWORD *)a1 + 4);
      if ((unint64_t)v17 < *((_QWORD *)a1 + 3))
      {
        *((_QWORD *)a1 + 4) = v17 + 1;
        *v17 = 32;
        break;
      }
      v18 = a1;
      v19 = 32;
      goto LABEL_34;
  }
  if (v21 < 0)
    operator delete(__b[0]);
}

double llvm::agxapstrace::AGXAPSTraceSystem::createAddressTranslator@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  double result;

  v3 = operator new();
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_QWORD *)v3 = v3 + 16;
  *(_QWORD *)&result = 0x400000000;
  *(_QWORD *)(v3 + 8) = 0x400000000;
  *(_QWORD *)(v3 + 48) = v3 + 64;
  *(_DWORD *)(v3 + 60) = 4;
  *a1 = v3;
  return result;
}

_QWORD *llvm::agxapstrace::AGXAPSTraceSystem::createDisassembler@<X0>(const llvm::MCSubtargetInfo *a1@<X1>, const llvm::MCDisassembler *a2@<X2>, const llvm::MCInstPrinter *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = a1;
  result[1] = a2;
  result[2] = a3;
  *a4 = result;
  return result;
}

uint64_t llvm::agxapstrace::AGXAPSTraceSystem::getStreamFlagsForCPU(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  BOOL v4;
  uint64_t result;

  if (a3 != 7)
    return 0;
  if (*a2 == 1731408231 && *(_DWORD *)((char *)a2 + 3) == 811674983)
    return 0;
  v4 = *a2 == 1731408231 && *(_DWORD *)((char *)a2 + 3) == 811740519;
  result = 3;
  if (!v4)
  {
    if (*a2 ^ 0x67333167 | *(_DWORD *)((char *)a2 + 3) ^ 0x30632D67)
      return 0;
    else
      return 3;
  }
  return result;
}

llvm::raw_ostream *llvm::agxapstrace::operator<<(llvm::raw_ostream *a1, unint64_t *a2)
{
  sub_1C4D6FA7C(a1, *a2);
  return a1;
}

llvm::raw_ostream *sub_1C4D6FA7C(llvm::raw_ostream *this, unint64_t a2)
{
  unsigned int v4;
  _WORD *v5;
  unsigned int v6;
  _BYTE *v7;

  v4 = __clz(a2);
  v5 = (_WORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v5 > 1uLL)
  {
    *v5 = 30768;
    *((_QWORD *)this + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(this, "0x", 2uLL);
  }
  if (v4 >= 0x24)
  {
    v6 = v4 >> 2;
    do
    {
      v7 = (_BYTE *)*((_QWORD *)this + 4);
      if (*((_BYTE **)this + 3) == v7)
      {
        llvm::raw_ostream::write(this, "0", 1uLL);
      }
      else
      {
        *v7 = 48;
        ++*((_QWORD *)this + 4);
      }
      --v6;
    }
    while (v6 > 8);
  }
  return llvm::write_hex(this, a2, 1, 0, 0);
}

void llvm::agxapstrace::to_string(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  void (**v4)(llvm::raw_ostream *__hidden);
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  void **v12;
  void *v13;
  char v14;

  v14 = 0;
  LOBYTE(v13) = 0;
  v5 = 0;
  v9 = 0;
  v10 = 0;
  v4 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v12 = &v13;
  v11 = 0;
  v7 = 0;
  v8 = 0;
  v6 = 0;
  sub_1C4D6FA7C((llvm::raw_ostream *)&v4, *a1);
  if (*((char *)v12 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a2, *v12, (unint64_t)v12[1]);
  }
  else
  {
    v3 = *(_OWORD *)v12;
    *(_QWORD *)(a2 + 16) = v12[2];
    *(_OWORD *)a2 = v3;
  }
  v4 = off_1E81A6E70;
  if (v11 == 1 && v6)
    MEMORY[0x1CAA32F9C](v6, 0x1000C8077774924);
  if (v14 < 0)
    operator delete(v13);
}

llvm::raw_ostream *llvm::agxapstrace::operator<<(llvm::raw_ostream *this, unint64_t *a2)
{
  uint64_t v4;

  v4 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v4) > 4)
  {
    *(_BYTE *)(v4 + 4) = 43;
    *(_DWORD *)v4 = 1702060386;
    *((_QWORD *)this + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(this, "base+", 5uLL);
  }
  sub_1C4D6FA7C(this, *a2);
  return this;
}

_QWORD *llvm::agxapstrace::ObjectInfo::ObjectInfo(_QWORD *__dst, void *__src, size_t __len, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v12;
  size_t v13;
  size_t v14;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v13 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v13 = __len | 7;
    v14 = v13 + 1;
    v12 = operator new(v13 + 1);
    __dst[1] = __len;
    __dst[2] = v14 | 0x8000000000000000;
    *__dst = v12;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v12 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v12, __src, __len);
LABEL_9:
  *((_BYTE *)v12 + __len) = 0;
  __dst[3] = a4;
  __dst[4] = a5;
  __dst[5] = a6;
  return __dst;
}

{
  void *v12;
  size_t v13;
  size_t v14;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v13 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v13 = __len | 7;
    v14 = v13 + 1;
    v12 = operator new(v13 + 1);
    __dst[1] = __len;
    __dst[2] = v14 | 0x8000000000000000;
    *__dst = v12;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v12 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v12, __src, __len);
LABEL_9:
  *((_BYTE *)v12 + __len) = 0;
  __dst[3] = a4;
  __dst[4] = a5;
  __dst[5] = a6;
  return __dst;
}

llvm::raw_ostream *llvm::agxapstrace::operator<<(llvm::raw_ostream *this, _BYTE *a2)
{
  char v3;
  BOOL v4;
  size_t v5;
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;

  v3 = a2[23];
  v4 = v3 < 0;
  v5 = *((_QWORD *)a2 + 1);
  if (v3 < 0)
    a2 = *(_BYTE **)a2;
  v6 = v3 & 0x7F;
  if (v4)
    v7 = v5;
  else
    v7 = v6;
  v9 = *((_QWORD *)this + 3);
  v8 = (void *)*((_QWORD *)this + 4);
  if (v7 <= v9 - (uint64_t)v8)
  {
    if (v7)
    {
      memcpy(v8, a2, v7);
      *((_QWORD *)this + 4) += v7;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, a2, v7);
  }
  return this;
}

uint64_t *llvm::agxapstrace::SectionInfo::SectionInfo(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  a1[4] = a6;
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = a7;
  a1[8] = a8;
  llvm::agxapstrace::CachedSectionDisassembler::CachedSectionDisassembler((uint64_t)(a1 + 9), a2, (uint64_t)a1);
  a1[93] = a9;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a6 + 136))(v15, a6, a5);
  if ((v16 & 1) != 0)
  {
    a1[5] = (uint64_t)"<unknown-section-name>";
    a1[6] = 22;
    v13 = v15[0];
    v15[0] = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  else
  {
    v12 = v15[1];
    a1[5] = v15[0];
    a1[6] = v12;
  }
  return a1;
}

{
  return llvm::agxapstrace::SectionInfo::SectionInfo(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

BOOL llvm::agxapstrace::SectionInfo::isSystemAddressInSection(uint64_t a1, unint64_t a2)
{
  return *(_QWORD *)(a1 + 56) <= a2 && *(_QWORD *)(a1 + 64) > a2;
}

llvm::raw_ostream *llvm::agxapstrace::operator<<(llvm::raw_ostream *a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  unint64_t v6;
  const void *v7;
  void *v8;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  const void *v11;
  size_t v12;
  _BYTE *v13;
  llvm::raw_ostream *v14;

  v4 = llvm::agxapstrace::operator<<(a1, *(_BYTE **)a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(a1, "(", 1uLL);
  }
  else
  {
    *v5 = 40;
    ++*((_QWORD *)a1 + 4);
  }
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v7 = *(const void **)(a2 + 8);
    v8 = (void *)*((_QWORD *)a1 + 4);
    if (v6 <= *((_QWORD *)a1 + 3) - (_QWORD)v8)
    {
      memcpy(v8, v7, *(_QWORD *)(a2 + 16));
      v10 = (_BYTE *)(*((_QWORD *)a1 + 4) + v6);
      *((_QWORD *)a1 + 4) = v10;
      v9 = a1;
    }
    else
    {
      v9 = llvm::raw_ostream::write(a1, (const char *)v7, *(_QWORD *)(a2 + 16));
      v10 = (_BYTE *)*((_QWORD *)v9 + 4);
    }
    if (*((_BYTE **)v9 + 3) == v10)
    {
      llvm::raw_ostream::write(v9, ",", 1uLL);
    }
    else
    {
      *v10 = 44;
      ++*((_QWORD *)v9 + 4);
    }
  }
  v11 = *(const void **)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v13 = (_BYTE *)*((_QWORD *)a1 + 4);
  if (v12 <= *((_QWORD *)a1 + 3) - (_QWORD)v13)
  {
    if (v12)
    {
      memcpy(v13, v11, v12);
      v13 = (_BYTE *)(*((_QWORD *)a1 + 4) + v12);
      *((_QWORD *)a1 + 4) = v13;
    }
    v14 = a1;
  }
  else
  {
    v14 = llvm::raw_ostream::write(a1, (const char *)v11, v12);
    v13 = (_BYTE *)*((_QWORD *)v14 + 4);
  }
  if (*((_BYTE **)v14 + 3) == v13)
  {
    llvm::raw_ostream::write(v14, ")", 1uLL);
  }
  else
  {
    *v13 = 41;
    ++*((_QWORD *)v14 + 4);
  }
  return a1;
}

uint64_t llvm::agxapstrace::AddressTranslator::findObject(uint64_t *a1, void *__s2, size_t __n)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char v9;
  const void *v10;
  uint64_t v11;

  v3 = *a1;
  v4 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v4)
  {
    v7 = 8 * v4;
    v8 = v3 + 8 * v4;
    while (1)
    {
      v9 = *(_BYTE *)(*(_QWORD *)v3 + 23);
      v10 = v9 >= 0 ? *(const void **)v3 : **(const void ***)v3;
      v11 = v9 & 0x7F;
      if (v9 < 0)
        v11 = *(_QWORD *)(*(_QWORD *)v3 + 8);
      if (v11 == __n && (!__n || !memcmp(v10, __s2, __n)))
        break;
      v3 += 8;
      v7 -= 8;
      if (!v7)
        return v8;
    }
  }
  return v3;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char v9;
  const void *v10;
  uint64_t v11;

  v3 = *a1;
  v4 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v4)
  {
    v7 = 8 * v4;
    v8 = v3 + 8 * v4;
    while (1)
    {
      v9 = *(_BYTE *)(*(_QWORD *)v3 + 23);
      v10 = v9 >= 0 ? *(const void **)v3 : **(const void ***)v3;
      v11 = v9 & 0x7F;
      if (v9 < 0)
        v11 = *(_QWORD *)(*(_QWORD *)v3 + 8);
      if (v11 == __n && (!__n || !memcmp(v10, __s2, __n)))
        break;
      v3 += 8;
      v7 -= 8;
      if (!v7)
        return v8;
    }
  }
  return v3;
}

const void ***llvm::agxapstrace::AddressTranslator::findSection(uint64_t a1, const void ***a2, void *__s2, size_t __n, void *a5, size_t a6)
{
  const void ***v6;
  uint64_t v7;
  const void ***v12;
  char v13;
  const void *v14;
  size_t v15;
  uint64_t v16;
  const void **v17;
  _BYTE *v18;
  char v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;

  v6 = *(const void ****)(a1 + 48);
  v7 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v7)
  {
    v12 = &v6[v7];
    v13 = *((_BYTE *)*a2 + 23);
    if (v13 >= 0)
      v14 = *a2;
    else
      v14 = **a2;
    if (v13 >= 0)
      v15 = v13 & 0x7F;
    else
      v15 = (size_t)(*a2)[1];
    v16 = 8 * v7;
    while (1)
    {
      v17 = *v6;
      v18 = **v6;
      v19 = v18[23];
      v20 = *((_QWORD *)v18 + 1);
      if (v19 >= 0)
        v21 = **v6;
      else
        v21 = *(const void **)v18;
      v22 = v19 & 0x7F;
      if (v19 < 0)
        v22 = v20;
      if (v22 == v15
        && (!v15 || !memcmp(v21, v14, v15))
        && v17[2] == (const void *)__n
        && (!__n || !memcmp(v17[1], __s2, __n))
        && v17[6] == (const void *)a6
        && (!a6 || !memcmp(v17[5], a5, a6)))
      {
        break;
      }
      ++v6;
      v16 -= 8;
      if (!v16)
        return v12;
    }
  }
  return v6;
}

{
  const void ***v6;
  uint64_t v7;
  const void ***v12;
  char v13;
  const void *v14;
  size_t v15;
  uint64_t v16;
  const void **v17;
  _BYTE *v18;
  char v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;

  v6 = *(const void ****)(a1 + 48);
  v7 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v7)
  {
    v12 = &v6[v7];
    v13 = *((_BYTE *)*a2 + 23);
    if (v13 >= 0)
      v14 = *a2;
    else
      v14 = **a2;
    if (v13 >= 0)
      v15 = v13 & 0x7F;
    else
      v15 = (size_t)(*a2)[1];
    v16 = 8 * v7;
    while (1)
    {
      v17 = *v6;
      v18 = **v6;
      v19 = v18[23];
      v20 = *((_QWORD *)v18 + 1);
      if (v19 >= 0)
        v21 = **v6;
      else
        v21 = *(const void **)v18;
      v22 = v19 & 0x7F;
      if (v19 < 0)
        v22 = v20;
      if (v22 == v15
        && (!v15 || !memcmp(v21, v14, v15))
        && v17[2] == (const void *)__n
        && (!__n || !memcmp(v17[1], __s2, __n))
        && v17[6] == (const void *)a6
        && (!a6 || !memcmp(v17[5], a5, a6)))
      {
        break;
      }
      ++v6;
      v16 -= 8;
      if (!v16)
        return v12;
    }
  }
  return v6;
}

_QWORD *llvm::agxapstrace::AddressTranslator::findSectionByAddress(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *result;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v3)
  {
    result = *(_QWORD **)(a1 + 48);
    v5 = v3;
    do
    {
      v6 = v5 >> 1;
      v7 = &result[v5 >> 1];
      v9 = *v7;
      v8 = v7 + 1;
      v5 += ~(v5 >> 1);
      if (*(_QWORD *)(v9 + 64) < a2)
        result = v8;
      else
        v5 = v6;
    }
    while (v5);
  }
  else
  {
    result = *(_QWORD **)(a1 + 48);
  }
  v10 = (_QWORD *)(v2 + 8 * v3);
  if (result != v10 && (*(_QWORD *)(*result + 56) > a2 || *(_QWORD *)(*result + 64) <= a2))
    return v10;
  return result;
}

{
  uint64_t v2;
  unint64_t v3;
  _QWORD *result;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v3)
  {
    result = *(_QWORD **)(a1 + 48);
    v5 = v3;
    do
    {
      v6 = v5 >> 1;
      v7 = &result[v5 >> 1];
      v9 = *v7;
      v8 = v7 + 1;
      v5 += ~(v5 >> 1);
      if (*(_QWORD *)(v9 + 64) < a2)
        result = v8;
      else
        v5 = v6;
    }
    while (v5);
  }
  else
  {
    result = *(_QWORD **)(a1 + 48);
  }
  v10 = (_QWORD *)(v2 + 8 * v3);
  if (result != v10 && (*(_QWORD *)(*result + 56) > a2 || *(_QWORD *)(*result + 64) <= a2))
    return v10;
  return result;
}

void llvm::agxapstrace::AddressTranslator::loadObject(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, size_t a4@<X3>, size_t a5@<X4>, size_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  size_t *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  BOOL v20;
  void *v21;
  size_t v22;
  size_t v23;
  unint64_t Object;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  _BOOL4 v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  size_t *v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  size_t *v52;

  v14 = operator new();
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v15 = (size_t *)v14;
  if (a3 >= 0x17)
  {
    v17 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v17 = a3 | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    v15[1] = a3;
    v15[2] = v18 | 0x8000000000000000;
    *v15 = (size_t)v16;
    goto LABEL_8;
  }
  *(_BYTE *)(v14 + 23) = a3;
  v16 = (void *)v14;
  if (a3)
LABEL_8:
    memmove(v16, a2, a3);
  *((_BYTE *)v16 + a3) = 0;
  v15[3] = a4;
  v15[4] = a5;
  v15[5] = a6;
  v52 = v15;
  v19 = *((_BYTE *)v15 + 23);
  v20 = v19 < 0;
  if (v19 >= 0)
    v21 = v15;
  else
    v21 = (void *)*v15;
  v22 = v19 & 0x7F;
  if (v20)
    v23 = v15[1];
  else
    v23 = v22;
  Object = llvm::agxapstrace::AddressTranslator::findObject((uint64_t *)a1, v21, v23);
  v25 = *(_QWORD *)a1;
  v26 = *(unsigned int *)(a1 + 8);
  v27 = *(_QWORD *)a1 + 8 * v26;
  if (v27 == Object)
  {
    v43 = (char *)&v52;
    if (v26 >= *(_DWORD *)(a1 + 12))
    {
      v49 = v26 + 1;
      if (Object > (unint64_t)&v52 && v25 <= (unint64_t)&v52)
      {
        v51 = (char *)&v52 - v25;
        sub_1C4D71558(a1, v49);
        v25 = *(_QWORD *)a1;
        v43 = &v51[*(_QWORD *)a1];
      }
      else
      {
        sub_1C4D71558(a1, v49);
        v25 = *(_QWORD *)a1;
        v43 = (char *)&v52;
      }
    }
    v44 = *(unsigned int *)(a1 + 8);
    v45 = *(_QWORD *)v43;
    *(_QWORD *)v43 = 0;
    *(_QWORD *)(v25 + 8 * v44) = v45;
    *(_DWORD *)(a1 + 8) = v44 + 1;
    v30 = (uint64_t *)(*(_QWORD *)a1 + 8 * (v44 + 1) - 8);
  }
  else
  {
    v28 = (uint64_t)(Object - v25) >> 3;
    v29 = (uint64_t *)&v52;
    if (v26 >= *(_DWORD *)(a1 + 12))
    {
      v48 = v26 + 1;
      if (v25 <= (unint64_t)&v52 && v27 > (unint64_t)&v52)
      {
        v50 = (char *)&v52 - v25;
        sub_1C4D71558(a1, v48);
        v25 = *(_QWORD *)a1;
        v29 = (uint64_t *)&v50[*(_QWORD *)a1];
      }
      else
      {
        sub_1C4D71558(a1, v48);
        v25 = *(_QWORD *)a1;
        v29 = (uint64_t *)&v52;
      }
    }
    v30 = (uint64_t *)(v25 + 8 * v28);
    v31 = *(unsigned int *)(a1 + 8);
    v32 = (_QWORD *)(v25 + 8 * v31);
    v33 = *(v32 - 1);
    *(v32 - 1) = 0;
    *v32 = v33;
    v34 = *(_QWORD *)a1;
    v35 = (uint64_t *)(*(_QWORD *)a1 + 8 * v31 - 8);
    if (v35 != v30)
    {
      v36 = (uint64_t *)(*(_QWORD *)a1 + 8 * v31 - 8);
      do
      {
        v37 = *--v36;
        *v36 = 0;
        sub_1C4D71504(v35, v37);
        v35 = v36;
      }
      while (v36 != v30);
      LODWORD(v31) = *(_DWORD *)(a1 + 8);
      v34 = *(_QWORD *)a1;
    }
    v38 = v31 + 1;
    *(_DWORD *)(a1 + 8) = v38;
    v39 = v34 + 8 * v38;
    v41 = v29 >= v30 && (unint64_t)v29 < v39;
    v42 = v29[v41];
    v29[v41] = 0;
    sub_1C4D71504(v30, v42);
  }
  v46 = *v30;
  *(_BYTE *)(a7 + 8) &= ~1u;
  *(_QWORD *)a7 = v46;
  v47 = v52;
  v52 = 0;
  if (v47)
  {
    if (*((char *)v47 + 23) < 0)
      operator delete((void *)*v47);
    MEMORY[0x1CAA32FC0](v47, 0x10B2C40B086BF20);
  }
}

void llvm::agxapstrace::AddressTranslator::loadSection(uint64_t a1@<X0>, uint64_t *a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, const void *a5@<X4>, size_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  size_t v27;
  const char *v28;
  uint64_t v29;
  const std::error_category *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t **v49;
  uint64_t **v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t **v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unsigned int v67;
  unint64_t v68;
  _BOOL4 v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t **v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD v104[2];
  char v105;
  __int16 v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(*a2 + 24);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 344))(v12);
  v15 = v14;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 352))(v12);
  v102 = v13;
  v103 = v15;
  if (v15 == v17 && v13 == v16)
  {
LABEL_31:
    v30 = std::generic_category();
    v31 = operator new();
    v104[0] = "Section not found";
    v106 = 259;
    *(_QWORD *)v31 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v104, (_QWORD *)(v31 + 8));
    *(_QWORD *)(v31 + 32) = 22;
    *(_QWORD *)(v31 + 40) = v30;
    *(_BYTE *)(v31 + 48) = 1;
    *(_BYTE *)(a9 + 8) |= 1u;
    *(_QWORD *)a9 = v31;
  }
  else
  {
    v19 = v16;
    v20 = v17;
    while (1)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v15 + 136))(v104, v15, v13);
      v21 = v105;
      v22 = v104[0];
      v23 = (v105 & 1) != 0 ? "<unknown-section-name>" : (char *)v104[0];
      v24 = (v105 & 1) != 0 ? 22 : v104[1];
      v25 = *(_QWORD *)(*a2 + 24);
      if (v25 && (*(_DWORD *)(v25 + 8) & 0xFFFFFFFC) == 16)
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v25 + 80) + 8 * v102);
        v28 = (const char *)(v29 + 16);
        v27 = *(_BYTE *)(v29 + 31) ? 16 : strlen(v28);
      }
      else
      {
        v27 = 0;
        v28 = "";
      }
      if (v27 == a4 && (!a4 || !memcmp(v28, a3, a4)) && v24 == a6 && (!a6 || !memcmp(v23, a5, a6)))
        break;
      if ((v21 & 1) != 0)
      {
        v104[0] = 0;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v103 + 128))(v103, &v102);
      v13 = v102;
      v15 = v103;
      if (v103 == v20 && v102 == v19)
        goto LABEL_31;
    }
    v32 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v103 + 160))(v103, v102);
    v33 = *a2;
    v34 = v32 + a7;
    v35 = (uint64_t *)operator new();
    v101 = llvm::agxapstrace::SectionInfo::SectionInfo(v35, v33, (uint64_t)a3, a4, v102, v103, a7, v34, a8);
    v36 = v101[7];
    v37 = a1;
    v39 = (unint64_t *)(a1 + 48);
    v38 = *(_QWORD *)(a1 + 48);
    v40 = *(unsigned int *)(a1 + 56);
    v41 = v38;
    if ((_DWORD)v40)
    {
      v41 = *(_QWORD *)(a1 + 48);
      v42 = *(unsigned int *)(a1 + 56);
      do
      {
        v43 = v42 >> 1;
        v44 = (uint64_t *)(v41 + 8 * (v42 >> 1));
        v46 = *v44;
        v45 = v44 + 1;
        v42 += ~(v42 >> 1);
        if (*(_QWORD *)(v46 + 64) < v36)
          v41 = (unint64_t)v45;
        else
          v42 = v43;
      }
      while (v42);
    }
    v47 = v38 + 8 * v40;
    if (v41 == v47 || *(_QWORD *)(*(_QWORD *)v41 + 56) > v36 || *(_QWORD *)(*(_QWORD *)v41 + 64) <= v36)
    {
      v79 = &v101;
      if (v40 >= *(_DWORD *)(a1 + 60))
      {
        v91 = v40 + 1;
        if (v38 <= (unint64_t)&v101 && v47 > (unint64_t)&v101)
        {
          v93 = (char *)&v101 - v38;
          sub_1C4D71658(a1 + 48, v91);
          v38 = *v39;
          v79 = (uint64_t **)&v93[*v39];
        }
        else
        {
          sub_1C4D71658(a1 + 48, v91);
          v38 = *v39;
          v79 = &v101;
        }
      }
      v80 = *(unsigned int *)(a1 + 56);
      v81 = *v79;
      *v79 = 0;
      *(_QWORD *)(v38 + 8 * v80) = v81;
      *(_DWORD *)(a1 + 56) = v80 + 1;
      v50 = (uint64_t **)(*(_QWORD *)(a1 + 48) + 8 * (v80 + 1) - 8);
    }
    else
    {
      v48 = (uint64_t)(v41 - v38) >> 3;
      v49 = &v101;
      if (v40 >= *(_DWORD *)(a1 + 60))
      {
        v92 = v40 + 1;
        if (v38 <= (unint64_t)&v101 && v47 > (unint64_t)&v101)
        {
          v94 = (char *)&v101 - v38;
          sub_1C4D71658(a1 + 48, v92);
          v38 = *v39;
          v49 = (uint64_t **)&v94[*v39];
        }
        else
        {
          sub_1C4D71658(a1 + 48, v92);
          v38 = *v39;
          v49 = &v101;
        }
        v37 = a1;
      }
      v50 = (uint64_t **)(v38 + 8 * v48);
      v51 = *(unsigned int *)(v37 + 56);
      v52 = (_QWORD *)(v38 + 8 * v51);
      v53 = *(v52 - 1);
      *(v52 - 1) = 0;
      *v52 = v53;
      v54 = *(_QWORD *)(v37 + 48);
      v55 = (_QWORD *)(v54 + 8 * v51);
      v56 = (uint64_t **)(v55 - 1);
      if (v55 - 1 != v50)
      {
        do
        {
          v58 = (uint64_t)*--v56;
          v57 = v58;
          v60 = *--v55;
          v59 = v60;
          *v56 = 0;
          *v55 = v57;
          if (v60)
          {
            v61 = *(_QWORD *)(v59 + 720);
            *(_QWORD *)(v59 + 720) = 0;
            if (v61)
              MEMORY[0x1CAA32F9C](v61, 0x1000C80451B5BE8);
            v62 = *(_QWORD *)(v59 + 696);
            *(_QWORD *)(v59 + 696) = 0;
            if (v62)
              MEMORY[0x1CAA32F9C](v62, 0x20C8093837F09);
            v63 = *(char **)(v59 + 168);
            v64 = *(unsigned int *)(v59 + 176);
            if ((_DWORD)v64)
            {
              v65 = 8 * v64;
              v66 = v63 - 8;
              do
              {
                sub_1C4D71600((uint64_t *)&v66[v65]);
                v65 -= 8;
              }
              while (v65);
              v63 = *(char **)(v59 + 168);
            }
            if (v63 != (char *)(v59 + 184))
              free(v63);
            std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(v59 + 96));
            MEMORY[0x1CAA32FC0](v59, 0x10F0C405548DE63);
          }
        }
        while (v56 != v50);
        LODWORD(v51) = *(_DWORD *)(v37 + 56);
        v54 = *(_QWORD *)(v37 + 48);
      }
      v67 = v51 + 1;
      *(_DWORD *)(v37 + 56) = v67;
      v68 = v54 + 8 * v67;
      v70 = v49 >= v50 && (unint64_t)v49 < v68;
      v71 = v49[v70];
      v49[v70] = 0;
      v72 = *v50;
      *v50 = v71;
      if (v72)
      {
        v73 = v72[90];
        v72[90] = 0;
        if (v73)
          MEMORY[0x1CAA32F9C](v73, 0x1000C80451B5BE8);
        v74 = v72[87];
        v72[87] = 0;
        if (v74)
          MEMORY[0x1CAA32F9C](v74, 0x20C8093837F09);
        v75 = (char *)v72[21];
        v76 = *((unsigned int *)v72 + 44);
        if ((_DWORD)v76)
        {
          v77 = 8 * v76;
          v78 = v75 - 8;
          do
          {
            sub_1C4D71600((uint64_t *)&v78[v77]);
            v77 -= 8;
          }
          while (v77);
          v75 = (char *)v72[21];
        }
        if (v75 != (char *)(v72 + 23))
          free(v75);
        std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(v72 + 12));
        MEMORY[0x1CAA32FC0](v72, 0x10F0C405548DE63);
      }
    }
    v82 = *v50;
    *(_BYTE *)(a9 + 8) &= ~1u;
    *(_QWORD *)a9 = v82;
    v83 = v101;
    v101 = 0;
    if (v83)
    {
      v84 = v83[90];
      v83[90] = 0;
      if (v84)
        MEMORY[0x1CAA32F9C](v84, 0x1000C80451B5BE8);
      v85 = v83[87];
      v83[87] = 0;
      if (v85)
        MEMORY[0x1CAA32F9C](v85, 0x20C8093837F09);
      v86 = (uint64_t *)v83[21];
      v87 = *((unsigned int *)v83 + 44);
      if ((_DWORD)v87)
      {
        v88 = 8 * v87;
        v89 = (char *)(v86 - 1);
        do
        {
          sub_1C4D71600((uint64_t *)&v89[v88]);
          v88 -= 8;
        }
        while (v88);
        v86 = (uint64_t *)v83[21];
      }
      if (v86 != v83 + 23)
        free(v86);
      std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(v83 + 12));
      MEMORY[0x1CAA32FC0](v83, 0x10F0C405548DE63);
    }
    if ((v105 & 1) != 0)
    {
      v90 = v104[0];
      v104[0] = 0;
      if (v90)
        (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
    }
  }
}

uint64_t *llvm::agxapstrace::AddressTranslator::unloadObject(uint64_t a1, const ObjectInfo **a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;

  v3 = (uint64_t *)(a2 + 1);
  llvm::agxapstrace::AddressTranslator::unloadSectionsForObject(a1, *a2);
  v4 = *(_QWORD *)a1;
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(_QWORD *)a1 + 8 * v5;
  if (v3 != (uint64_t *)v6)
  {
    do
    {
      v7 = v3 - 1;
      v8 = *v3;
      *v3++ = 0;
      sub_1C4D71504(v7, v8);
    }
    while (v3 != (uint64_t *)v6);
    LODWORD(v5) = *(_DWORD *)(a1 + 8);
    v4 = *(_QWORD *)a1;
  }
  v9 = v5 - 1;
  *(_DWORD *)(a1 + 8) = v9;
  return sub_1C4D71504((uint64_t *)(v4 + 8 * v9), 0);
}

uint64_t llvm::agxapstrace::AddressTranslator::unloadSectionsForObject(uint64_t this, const ObjectInfo *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  const ObjectInfo ***v7;
  const ObjectInfo ***v8;
  const ObjectInfo ***v9;
  const ObjectInfo **v10;
  const ObjectInfo **v11;
  const ObjectInfo *v12;
  const ObjectInfo *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  const ObjectInfo ***v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;

  v2 = this;
  v3 = *(_QWORD *)(this + 48);
  v4 = *(unsigned int *)(this + 56);
  if ((_DWORD)v4)
  {
    v6 = 0;
    v7 = (const ObjectInfo ***)(v3 + 8 * v4);
    while (**(const ObjectInfo ***)(v3 + v6) != a2)
    {
      v6 += 8;
      if (8 * v4 == v6)
      {
        v8 = (const ObjectInfo ***)(v3 + 8 * v4);
        goto LABEL_25;
      }
    }
    v8 = (const ObjectInfo ***)(v3 + v6);
    if (8 * v4 - 8 != v6)
    {
      v9 = v8 + 1;
      do
      {
        v10 = *v9;
        if (**v9 != a2)
        {
          *v9 = 0;
          v11 = *v8;
          *v8 = v10;
          if (v11)
          {
            v12 = v11[90];
            v11[90] = 0;
            if (v12)
              MEMORY[0x1CAA32F9C](v12, 0x1000C80451B5BE8);
            v13 = v11[87];
            v11[87] = 0;
            if (v13)
              MEMORY[0x1CAA32F9C](v13, 0x20C8093837F09);
            v14 = (char *)v11[21];
            v15 = *((unsigned int *)v11 + 44);
            if ((_DWORD)v15)
            {
              v16 = 8 * v15;
              v17 = v14 - 8;
              do
              {
                sub_1C4D71600((uint64_t *)&v17[v16]);
                v16 -= 8;
              }
              while (v16);
              v14 = (char *)v11[21];
            }
            if (v14 != (char *)(v11 + 23))
              free(v14);
            std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(v11 + 12));
            this = MEMORY[0x1CAA32FC0](v11, 0x10F0C405548DE63);
          }
          ++v8;
        }
        ++v9;
      }
      while (v9 != v7);
      v3 = *(_QWORD *)(v2 + 48);
      LODWORD(v4) = *(_DWORD *)(v2 + 56);
    }
  }
  else
  {
    v8 = *(const ObjectInfo ****)(this + 48);
  }
LABEL_25:
  v18 = (const ObjectInfo ***)(v3 + 8 * v4);
  if (v18 != v8)
  {
    do
    {
      v20 = (uint64_t)*--v18;
      v19 = v20;
      *v18 = 0;
      if (v20)
      {
        v21 = *(_QWORD *)(v19 + 720);
        *(_QWORD *)(v19 + 720) = 0;
        if (v21)
          MEMORY[0x1CAA32F9C](v21, 0x1000C80451B5BE8);
        v22 = *(_QWORD *)(v19 + 696);
        *(_QWORD *)(v19 + 696) = 0;
        if (v22)
          MEMORY[0x1CAA32F9C](v22, 0x20C8093837F09);
        v23 = *(char **)(v19 + 168);
        v24 = *(unsigned int *)(v19 + 176);
        if ((_DWORD)v24)
        {
          v25 = 8 * v24;
          v26 = v23 - 8;
          do
          {
            sub_1C4D71600((uint64_t *)&v26[v25]);
            v25 -= 8;
          }
          while (v25);
          v23 = *(char **)(v19 + 168);
        }
        if (v23 != (char *)(v19 + 184))
          free(v23);
        std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(v19 + 96));
        this = MEMORY[0x1CAA32FC0](v19, 0x10F0C405548DE63);
      }
    }
    while (v18 != v8);
    v3 = *(_QWORD *)(v2 + 48);
  }
  *(_DWORD *)(v2 + 56) = ((unint64_t)v8 - v3) >> 3;
  return this;
}

uint64_t llvm::agxapstrace::AddressTranslator::toSectionRelative@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;

  v5 = result;
  v7 = *(unsigned int *)(result + 56);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD **)(result + 48);
    v9 = *(unsigned int *)(result + 56);
    do
    {
      v10 = v9 >> 1;
      v11 = &v8[v9 >> 1];
      v13 = *v11;
      v12 = v11 + 1;
      v9 += ~(v9 >> 1);
      if (*(_QWORD *)(v13 + 64) < a2)
        v8 = v12;
      else
        v9 = v10;
    }
    while (v9);
  }
  else
  {
    v8 = *(_QWORD **)(result + 48);
  }
  if (v8 == (_QWORD *)(*(_QWORD *)(result + 48) + 8 * v7)
    || (v14 = *v8, v15 = *(_QWORD *)(*v8 + 56), v16 = a2 >= v15, v17 = a2 - v15, !v16)
    || *(_QWORD *)(v14 + 64) <= a2)
  {
    if (a3
      && (result = *(_QWORD *)(result + 120)) != 0
      && (v18 = a2,
          result = (*(uint64_t (**)(uint64_t, unint64_t *))(*(_QWORD *)result + 48))(result, &v18),
          (_DWORD)result))
    {
      return llvm::agxapstrace::AddressTranslator::toSectionRelative(v5, a2, 0);
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 16) = 0;
    }
  }
  else
  {
    *(_QWORD *)a4 = v14;
    *(_QWORD *)(a4 + 8) = v17;
    *(_BYTE *)(a4 + 16) = 1;
  }
  return result;
}

char *llvm::agxapstrace::AddressTranslator::toSystem(uint64_t a1, void *a2, size_t a3, void *a4, size_t a5, void *a6, size_t a7, uint64_t a8)
{
  const void ***Object;
  const void ***Section;

  Object = (const void ***)llvm::agxapstrace::AddressTranslator::findObject((uint64_t *)a1, a2, a3);
  Section = llvm::agxapstrace::AddressTranslator::findSection(a1, Object, a4, a5, a6, a7);
  if (Section == (const void ***)(*(_QWORD *)(a1 + 48) + 8 * *(unsigned int *)(a1 + 56)))
    return 0;
  else
    return (char *)(*Section)[7] + a8;
}

llvm::raw_ostream *llvm::agxapstrace::AddressTranslator::print(llvm::agxapstrace::AddressTranslator *this, llvm::raw_ostream *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *result;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v4) > 0x10)
  {
    *(_BYTE *)(v4 + 16) = 10;
    *(_OWORD *)v4 = *(_OWORD *)"Address   : Name\n";
    *((_QWORD *)a2 + 4) += 17;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Address   : Name\n", 0x11uLL);
  }
  v5 = *((unsigned int *)this + 14);
  if (!(_DWORD)v5)
  {
    v6 = 0;
LABEL_20:
    result = sub_1C4D6FA7C(a2, v6);
    v15 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v15) <= 0xA)
      return llvm::raw_ostream::write(a2, " <invalid>\n", 0xBuLL);
    *(_DWORD *)(v15 + 7) = 171861097;
    *(_QWORD *)v15 = *(_QWORD *)" <invalid>\n";
    *((_QWORD *)a2 + 4) += 11;
    return result;
  }
  v6 = 0;
  v7 = (uint64_t *)*((_QWORD *)this + 6);
  v8 = 8 * v5;
  do
  {
    if (*(_QWORD *)(*v7 + 56) != v6)
    {
      sub_1C4D6FA7C(a2, v6);
      v9 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v9) > 0xA)
      {
        *(_DWORD *)(v9 + 7) = 171861097;
        *(_QWORD *)v9 = *(_QWORD *)" <invalid>\n";
        *((_QWORD *)a2 + 4) += 11;
      }
      else
      {
        llvm::raw_ostream::write(a2, " <invalid>\n", 0xBuLL);
      }
    }
    sub_1C4D6FA7C(a2, *(_QWORD *)(*v7 + 56));
    v10 = (_BYTE *)*((_QWORD *)a2 + 4);
    if (*((_BYTE **)a2 + 3) == v10)
    {
      v11 = llvm::raw_ostream::write(a2, " ", 1uLL);
    }
    else
    {
      *v10 = 32;
      ++*((_QWORD *)a2 + 4);
      v11 = a2;
    }
    result = llvm::agxapstrace::operator<<(v11, *v7);
    v13 = (_BYTE *)*((_QWORD *)result + 4);
    if (*((_BYTE **)result + 3) == v13)
    {
      result = llvm::raw_ostream::write(result, "\n", 1uLL);
    }
    else
    {
      *v13 = 10;
      ++*((_QWORD *)result + 4);
    }
    v14 = *v7++;
    v6 = *(_QWORD *)(v14 + 64);
    v8 -= 8;
  }
  while (v8);
  if (v6 != -1)
    goto LABEL_20;
  return result;
}

uint64_t *sub_1C4D71504(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

void sub_1C4D71558(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;

  v12 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 8, &v12);
  v4 = *(uint64_t **)a1;
  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = 8 * v5;
    v8 = v3;
    do
    {
      v9 = *v4;
      *v4++ = 0;
      *v8++ = v9;
      v7 -= 8;
    }
    while (v7);
    v10 = *(_QWORD *)a1 - 8;
    do
    {
      sub_1C4D71504((uint64_t *)(v10 + v6), 0);
      v6 -= 8;
    }
    while (v6);
    v4 = *(uint64_t **)a1;
  }
  v11 = v12;
  if (v4 != (uint64_t *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v11;
}

uint64_t *sub_1C4D71600(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 16);
    if (v3 != (void *)(v2 + 32))
      free(v3);
    MEMORY[0x1CAA32FC0](v2, 0x10D0C402C381C66);
  }
  return a1;
}

void sub_1C4D71658(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  unint64_t v20;

  v20 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 8, &v20);
  v4 = *(uint64_t **)a1;
  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = v3;
    do
    {
      v8 = *v4;
      *v4++ = 0;
      *v7++ = v8;
      v6 -= 8;
    }
    while (v6);
    v9 = *(uint64_t **)a1;
    v10 = (uint64_t *)(*(_QWORD *)a1 + 8 * v5);
    do
    {
      v12 = *--v10;
      v11 = v12;
      *v10 = 0;
      if (v12)
      {
        v13 = *(_QWORD *)(v11 + 720);
        *(_QWORD *)(v11 + 720) = 0;
        if (v13)
          MEMORY[0x1CAA32F9C](v13, 0x1000C80451B5BE8);
        v14 = *(_QWORD *)(v11 + 696);
        *(_QWORD *)(v11 + 696) = 0;
        if (v14)
          MEMORY[0x1CAA32F9C](v14, 0x20C8093837F09);
        v15 = *(char **)(v11 + 168);
        v16 = *(unsigned int *)(v11 + 176);
        if ((_DWORD)v16)
        {
          v17 = 8 * v16;
          v18 = v15 - 8;
          do
          {
            sub_1C4D71600((uint64_t *)&v18[v17]);
            v17 -= 8;
          }
          while (v17);
          v15 = *(char **)(v11 + 168);
        }
        if (v15 != (char *)(v11 + 184))
          free(v15);
        std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(v11 + 96));
        MEMORY[0x1CAA32FC0](v11, 0x10F0C405548DE63);
      }
    }
    while (v10 != v9);
    v4 = *(uint64_t **)a1;
  }
  v19 = v20;
  if (v4 != (uint64_t *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v19;
}

_QWORD *llvm::agxapstrace::Disassembler::Disassembler(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

{
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

void llvm::agxapstrace::Disassembler::getUncachedInstAt(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  const std::error_category *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  const std::error_category *v14;
  _QWORD *v15;
  _QWORD *v16;
  const char *v17;
  int v18;
  _WORD *v19;
  uint64_t v20;
  char v21;
  void (**v22)(llvm::raw_ostream *__hidden);
  uint64_t v23;
  int v24;
  uint64_t v25;
  __int128 v26;
  void *v27;
  uint64_t v28;
  _WORD v29[64];
  char v30;
  uint64_t v31;
  void *v32;
  __int128 v33;
  _BYTE v34[40];
  __int128 v35;
  _BYTE *v36;
  uint64_t v37;
  _BYTE v38[128];
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 168))(&v26, a3, a2);
  v8 = v26;
  if ((v27 & 1) != 0)
  {
    *(_BYTE *)(a5 + 176) |= 1u;
    *(_QWORD *)a5 = v8;
    return;
  }
  v9 = *((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1) - 2 < a4)
  {
    v10 = std::generic_category();
    v11 = operator new();
    *(_QWORD *)&v26 = "Offset not in section";
    v29[0] = 259;
    *(_QWORD *)v11 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v26, (_QWORD *)(v11 + 8));
    *(_QWORD *)(v11 + 32) = 22;
    *(_QWORD *)(v11 + 40) = v10;
    *(_BYTE *)(v11 + 48) = 1;
    *(_BYTE *)(a5 + 176) |= 1u;
    *(_QWORD *)a5 = v11;
    return;
  }
  v25 = 0;
  v35 = 0uLL;
  v36 = v38;
  v37 = 0x800000000;
  v39 = 0;
  v32 = v34;
  v33 = xmmword_1C64638D0;
  sub_1C613932C((uint64_t)&v22, (uint64_t)&v32);
  v12 = (*(uint64_t (**)(_QWORD, __int128 *, uint64_t *, unint64_t, unint64_t, unint64_t, void (***)(llvm::raw_ostream *__hidden)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), &v35, &v25, v8 + a4, v9 - a4, a4, &v22);
  v13 = v25;
  if (!v25)
  {
    v13 = 1;
    v25 = 1;
  }
  if (!v12)
  {
    v14 = std::generic_category();
    v15 = (_QWORD *)operator new();
    v16 = v15;
    v17 = "Instruction failed to disassemble";
    goto LABEL_11;
  }
  if (v12 != 1)
  {
    v26 = v35;
    v27 = v29;
    v28 = 0x800000000;
    v18 = v37;
    if (!(_DWORD)v37)
    {
LABEL_17:
      v21 = v39;
      v30 = v39;
      v31 = v13;
      *(_BYTE *)(a5 + 176) &= ~1u;
      *(_OWORD *)a5 = v26;
      *(_QWORD *)(a5 + 16) = a5 + 32;
      *(_QWORD *)(a5 + 24) = 0x800000000;
      if (v18)
      {
        sub_1C4D72194(a5 + 16, (uint64_t)&v27);
        v21 = v30;
        v13 = v31;
      }
      *(_BYTE *)(a5 + 160) = v21;
      *(_QWORD *)(a5 + 168) = v13;
      if (v27 != v29)
        free(v27);
      goto LABEL_21;
    }
    if (v37 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, (uint64_t)v29, v37, 16);
      v20 = v37;
      if (!(_DWORD)v37)
        goto LABEL_16;
      v19 = v27;
    }
    else
    {
      v19 = v29;
      v20 = v37;
    }
    memcpy(v19, v36, 16 * v20);
LABEL_16:
    LODWORD(v28) = v18;
    v13 = v25;
    goto LABEL_17;
  }
  v14 = std::generic_category();
  v15 = (_QWORD *)operator new();
  v16 = v15;
  v17 = "Instruction disassembled but is not architecturally valid";
LABEL_11:
  *(_QWORD *)&v26 = v17;
  v29[0] = 259;
  *v15 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v26, v15 + 1);
  v16[4] = 92;
  v16[5] = v14;
  *((_BYTE *)v16 + 48) = 1;
  *(_BYTE *)(a5 + 176) |= 1u;
  *(_QWORD *)a5 = v16;
LABEL_21:
  v22 = off_1E81A6E70;
  if (v24 == 1 && v23)
    MEMORY[0x1CAA32F9C](v23, 0x1000C8077774924);
  if (v32 != v34)
    free(v32);
  if (v36 != v38)
    free(v36);
}

uint64_t llvm::agxapstrace::CachedSectionDisassembler::CachedSectionDisassembler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  void *v6;
  unint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = (*(_QWORD *)(a3 + 64) - *(_QWORD *)(a3 + 56)) >> 1;
  MEMORY[0x1CAA32CE4](a1 + 24);
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 112;
  *(_QWORD *)(a1 + 104) = 0x4000000000;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >> 61)
    v5 = -1;
  else
    v5 = 8 * v4;
  v6 = (void *)operator new[]();
  bzero(v6, v5);
  *(_QWORD *)(a1 + 624) = v6;
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 632) = v6;
  *(_QWORD *)(a1 + 640) = v7;
  if (v7 >> 60)
    v8 = -1;
  else
    v8 = 16 * v7;
  v9 = (void *)operator new[]();
  bzero(v9, v8);
  *(_QWORD *)(a1 + 648) = v9;
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 656) = v9;
  *(_QWORD *)(a1 + 664) = v10;
  return a1;
}

void llvm::agxapstrace::CachedSectionDisassembler::getInstAt(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  const std::error_category *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void **v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  BOOL v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  void *__src;
  unsigned int v35;
  __int16 v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if ((a2 & 1) != 0)
  {
    v8 = std::generic_category();
    v9 = operator new();
    *(_QWORD *)&v33 = "Invalid offset";
    v36 = 259;
    *(_QWORD *)v9 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v33, (_QWORD *)(v9 + 8));
    *(_QWORD *)(v9 + 32) = 22;
    *(_QWORD *)(v9 + 40) = v8;
    *(_BYTE *)(v9 + 48) = 1;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v9;
    return;
  }
  v6 = a2 >> 1;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 632) + 8 * (a2 >> 1));
  if (v7)
  {
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = v7;
    return;
  }
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 24));
  v10 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 632) + 8 * v6));
  if (!v10)
  {
    llvm::agxapstrace::Disassembler::getUncachedInstAt(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), a2, (uint64_t)&v33);
    v11 = v39;
    if ((v39 & 1) != 0)
    {
      v26 = v33;
      *(_QWORD *)&v33 = 0;
      *(_BYTE *)(a3 + 8) |= 1u;
LABEL_22:
      *(_QWORD *)a3 = v26;
      if ((v11 & 1) != 0)
      {
        v27 = v33;
        *(_QWORD *)&v33 = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      }
      else if (__src != &v36)
      {
        free(__src);
      }
      goto LABEL_7;
    }
    v12 = operator new();
    v13 = v12;
    *(_OWORD *)v12 = v33;
    v14 = (void *)(v12 + 32);
    *(_QWORD *)(v12 + 16) = v12 + 32;
    v15 = (void **)(v12 + 16);
    *(_QWORD *)(v12 + 24) = 0x800000000;
    v16 = v35;
    if (!v35)
    {
LABEL_15:
      *(_BYTE *)(v13 + 160) = v37;
      *(_QWORD *)(v13 + 168) = v38;
      v32 = v13;
      v18 = *(unsigned int *)(a1 + 104);
      v19 = *(_QWORD *)(a1 + 96);
      v20 = (char *)&v32;
      if (v18 >= *(_DWORD *)(a1 + 108))
      {
        v28 = (unint64_t *)(a1 + 96);
        v29 = v18 + 1;
        v30 = v19 + 8 * v18 > (unint64_t)&v32;
        if (v19 <= (unint64_t)&v32 && v30)
        {
          v31 = (char *)&v32 - v19;
          sub_1C4D722AC(a1 + 96, v29);
          v19 = *v28;
          v20 = &v31[*v28];
        }
        else
        {
          sub_1C4D722AC(a1 + 96, v29);
          v19 = *v28;
          v20 = (char *)&v32;
        }
      }
      v21 = *(unsigned int *)(a1 + 104);
      v22 = *(_QWORD *)v20;
      *(_QWORD *)v20 = 0;
      *(_QWORD *)(v19 + 8 * v21) = v22;
      v23 = v21 + 1;
      *(_DWORD *)(a1 + 104) = v21 + 1;
      v24 = v32;
      v32 = 0;
      if (v24)
      {
        v25 = *(void **)(v24 + 16);
        if (v25 != (void *)(v24 + 32))
          free(v25);
        MEMORY[0x1CAA32FC0](v24, 0x10D0C402C381C66);
        v23 = *(_DWORD *)(a1 + 104);
      }
      __dmb(0xBu);
      atomic_store(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v23 - 8), (unint64_t *)(*(_QWORD *)(a1 + 632) + 8 * v6));
      v26 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 632) + 8 * v6));
      *(_BYTE *)(a3 + 8) &= ~1u;
      v11 = v39;
      goto LABEL_22;
    }
    if (v35 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v12 + 16, (uint64_t)v14, v35, 16);
      v17 = v35;
      if (!v35)
        goto LABEL_14;
      v14 = *v15;
    }
    else
    {
      v17 = v35;
    }
    memcpy(v14, __src, 16 * v17);
LABEL_14:
    *(_DWORD *)(v13 + 24) = v16;
    goto LABEL_15;
  }
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_QWORD *)a3 = v10;
LABEL_7:
  std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 24));
}

uint64_t llvm::agxapstrace::CachedSectionDisassembler::getBranchTarget(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v10;
  unsigned __int128 *v11;
  unsigned __int128 v12;
  uint64_t v13;
  unsigned __int128 *v14;
  unsigned __int128 v15;
  unint64_t v16;
  unsigned __int128 *v17;
  unint64_t v19;

  v10 = *a2 >> 1;
  v11 = (unsigned __int128 *)(*(_QWORD *)(a1 + 656) + 16 * v10);
  do
    v12 = __ldxp(v11);
  while (__stxp(v12, v11));
  if (BYTE8(v12))
  {
    *a5 = v12;
    return 1;
  }
  else
  {
    std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 24));
    v14 = (unsigned __int128 *)(*(_QWORD *)(a1 + 656) + 16 * v10);
    do
      v15 = __ldaxp(v14);
    while (__stxp(v15, v14));
    if (BYTE8(v15))
    {
      *a5 = v15;
      v13 = 1;
    }
    else
    {
      v19 = 0;
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, unint64_t *))(*(_QWORD *)a4 + 104))(a4, a3, *a2 + *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56), *(_QWORD *)(a3 + 168), &v19);
      if ((_DWORD)v13)
      {
        v16 = v19;
        *a5 = v19;
        v17 = (unsigned __int128 *)(*(_QWORD *)(a1 + 656) + 16 * v10);
        do
          __ldxp(v17);
        while (__stlxp(__PAIR128__(1, v16), v17));
      }
    }
    std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 24));
  }
  return v13;
}

uint64_t llvm::agxapstrace::CachedSectionDisassembler::getMCInstPrinter(llvm::agxapstrace::CachedSectionDisassembler *this)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 32) + 16);
}

uint64_t llvm::agxapstrace::CachedSectionDisassembler::getSTI(llvm::agxapstrace::CachedSectionDisassembler *this)
{
  return **(_QWORD **)(*(_QWORD *)this + 32);
}

void llvm::agxapstrace::CachedSectionDisassembler::prefetchAll(llvm::agxapstrace::CachedSectionDisassembler *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 56);
  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 64);
  v5 = v4 - v3;
  if (v4 == v3)
  {
    v6 = 0;
LABEL_6:
    *(_BYTE *)(a2 + 8) &= ~1u;
    *(_DWORD *)a2 = v6;
  }
  else
  {
    v8 = 0;
    v6 = 0;
    while (1)
    {
      llvm::agxapstrace::CachedSectionDisassembler::getInstAt((uint64_t)this, v8, (uint64_t)&v10);
      if ((v11 & 1) != 0)
        break;
      ++v6;
      v8 += *(_QWORD *)(v10 + 168);
      if (v8 >= v5)
        goto LABEL_6;
    }
    v9 = v10;
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v9;
  }
}

uint64_t sub_1C4D72194(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_17;
    }
    v7 = (_DWORD *)(a2 + 8);
    v8 = *(unsigned int *)(a2 + 8);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
        memmove(*(void **)a1, v4, 16 * v8);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        memmove(*(void **)a1, v4, 16 * v9);
        goto LABEL_14;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 16);
    }
    v9 = 0;
LABEL_14:
    v10 = *v7;
    if (v9 != v10)
      memcpy((void *)(*(_QWORD *)a1 + 16 * v9), (const void *)(*(_QWORD *)a2 + 16 * v9), *(_QWORD *)a2 + 16 * v10 - (*(_QWORD *)a2 + 16 * v9));
LABEL_16:
    *(_DWORD *)(a1 + 8) = v8;
LABEL_17:
    *v7 = 0;
  }
  return a1;
}

void sub_1C4D722AC(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;

  v12 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 8, &v12);
  v4 = *(uint64_t **)a1;
  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = 8 * v5;
    v8 = v3;
    do
    {
      v9 = *v4;
      *v4++ = 0;
      *v8++ = v9;
      v7 -= 8;
    }
    while (v7);
    v10 = *(_QWORD *)a1 - 8;
    do
    {
      sub_1C4D71600((uint64_t *)(v10 + v6));
      v6 -= 8;
    }
    while (v6);
    v4 = *(uint64_t **)a1;
  }
  v11 = v12;
  if (v4 != (uint64_t *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v11;
}

llvm::raw_ostream *llvm::agxapstrace::operator<<(llvm::raw_ostream *this, uint64_t a2)
{
  _DWORD *v4;
  llvm::raw_ostream *v5;
  void *v6;
  _BYTE *v7;

  v4 = (_DWORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v4 > 6uLL)
  {
    *(_DWORD *)((char *)v4 + 3) = 2067621236;
    *v4 = 1952543859;
    *((_QWORD *)this + 4) += 7;
    v5 = this;
  }
  else
  {
    v5 = llvm::raw_ostream::write(this, "state={", 7uLL);
  }
  sub_1C4D6FA7C(v5, *(_QWORD *)a2);
  v6 = (void *)*((_QWORD *)v5 + 4);
  if (*((_QWORD *)v5 + 3) - (_QWORD)v6 > 0xDuLL)
  {
    qmemcpy(v6, ", any-threads=", 14);
    *((_QWORD *)v5 + 4) += 14;
  }
  else
  {
    v5 = llvm::raw_ostream::write(v5, ", any-threads=", 0xEuLL);
  }
  sub_1C5E21910(v5, *(unsigned __int8 *)(a2 + 8), 0, 0, 0);
  v7 = (_BYTE *)*((_QWORD *)v5 + 4);
  if (*((_BYTE **)v5 + 3) == v7)
  {
    llvm::raw_ostream::write(v5, "}", 1uLL);
  }
  else
  {
    *v7 = 125;
    ++*((_QWORD *)v5 + 4);
  }
  return this;
}

_QWORD *llvm::agxapstrace::TracedInst::TracedInst(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

{
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

_QWORD *llvm::agxapstrace::BranchTargetResolutionError::BranchTargetResolutionError(_QWORD *a1, llvm::Twine *a2, uint64_t a3)
{
  *a1 = off_1E8132BE0;
  llvm::Twine::str(a2, a1 + 1);
  a1[4] = a3;
  return a1;
}

{
  *a1 = off_1E8132BE0;
  llvm::Twine::str(a2, a1 + 1);
  a1[4] = a3;
  return a1;
}

llvm::raw_ostream *llvm::agxapstrace::BranchTargetResolutionError::log(llvm::agxapstrace::BranchTargetResolutionError *this, llvm::raw_ostream *a2)
{
  char *v3;
  const char *v4;
  const char *v5;
  char v6;
  int v7;
  const char *v8;
  size_t v9;
  size_t v10;

  v5 = (const char *)*((_QWORD *)this + 1);
  v3 = (char *)this + 8;
  v4 = v5;
  v6 = v3[23];
  v7 = v6;
  if (v6 >= 0)
    v8 = v3;
  else
    v8 = v4;
  v9 = v6 & 0x7F;
  if (v7 >= 0)
    v10 = v9;
  else
    v10 = *((_QWORD *)v3 + 1);
  return llvm::raw_ostream::write(a2, v8, v10);
}

uint64_t llvm::agxapstrace::BranchTargetResolutionError::convertToErrorCode(llvm::agxapstrace::BranchTargetResolutionError *this)
{
  std::generic_category();
  return 45;
}

uint64_t sub_1C4D7255C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E8132BE0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1C4D72598(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E8132BE0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4D725E4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  void (**v4)(llvm::raw_ostream *__hidden);
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  void **v12;
  void *v13[2];
  uint64_t v14;

  v13[0] = 0;
  v13[1] = 0;
  v14 = 0;
  v5 = 0;
  v9 = 0;
  v10 = 0;
  v4 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v12 = v13;
  v11 = 0;
  v7 = 0;
  v8 = 0;
  v6 = 0;
  (*(void (**)(uint64_t, void (***)(llvm::raw_ostream *__hidden)))(*(_QWORD *)a1 + 16))(a1, &v4);
  if (*((char *)v12 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a2, *v12, (unint64_t)v12[1]);
  }
  else
  {
    v3 = *(_OWORD *)v12;
    *(_QWORD *)(a2 + 16) = v12[2];
    *(_OWORD *)a2 = v3;
  }
  v4 = off_1E81A6E70;
  if (v11 == 1 && v6)
    MEMORY[0x1CAA32F9C](v6, 0x1000C8077774924);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
}

void *sub_1C4D726C8()
{
  return &llvm::agxapstrace::BranchTargetResolutionError::ID;
}

BOOL sub_1C4D726D4(uint64_t a1, void *a2)
{
  return a2 == &llvm::agxapstrace::BranchTargetResolutionError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void llvm::agxclauseanalyzer::createAsmInput(const char **a1@<X0>, const char **a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, llvm::MCContext *a7@<X6>, uint64_t a8@<X8>, llvm::MCStreamer *a9, std::string **a10)
{
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  const std::error_category *v23;
  uint64_t v24;
  _QWORD *v25;
  char v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::string *v31;
  uint64_t size;
  uint64_t v33;
  const std::error_category *v34;
  uint64_t v35;
  uint64_t (*v36)(_QWORD *, llvm::MCContext *);
  uint64_t v37;
  const std::error_category *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  llvm::MCStreamer *v45;
  llvm::MCStreamer *v46;
  _QWORD *MCAsmParser;
  void (*v48)(void);
  uint64_t (*v49)(uint64_t, _QWORD *, _QWORD *, const char ***);
  uint64_t v50;
  const std::error_category *v51;
  uint64_t v52;
  uint64_t v53;
  const std::error_category *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  llvm::MCStreamer *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _OWORD v75[4];
  uint64_t v76;
  const char **v77[4];
  __int16 v78;
  char v79;
  void *v80;
  char v81;
  void *v82;
  char v83;
  void *__p;
  char v85;
  uint64_t v86;
  std::string v87;
  __int16 v88;
  uint64_t v89;
  _QWORD v90[2];
  char v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v78 = 261;
  v77[0] = a1;
  v77[1] = a2;
  llvm::MemoryBuffer::getFileOrSTDIN(v77, 0, 1, (uint64_t)v90);
  v16 = v91;
  if ((v91 & 1) != 0)
  {
    v17 = v90[0];
    if (LODWORD(v90[0]))
    {
      v18 = v90[1];
      v19 = operator new();
      v77[0] = (const char **)"Could not read input";
      v78 = 259;
      *(_QWORD *)v19 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)v77, (_QWORD *)(v19 + 8));
      *(_QWORD *)(v19 + 32) = v17;
      *(_QWORD *)(v19 + 40) = v18;
      *(_BYTE *)(v19 + 48) = 1;
      *(_BYTE *)(a8 + 8) |= 1u;
      *(_QWORD *)a8 = v19;
      if ((v16 & 1) != 0)
        return;
      goto LABEL_4;
    }
  }
  else
  {
    std::system_category();
    v17 = v90[0];
  }
  llvm::mc::InitMCTargetOptionsFromFlags((uint64_t)v77);
  v76 = 0;
  memset(v75, 0, sizeof(v75));
  v90[0] = 0;
  v74 = v17;
  sub_1C6175188((uint64_t)v75, &v74, 0);
  v20 = v74;
  v74 = 0;
  if (v20)
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = (uint64_t (*)(uint64_t))a3[8];
  if (v21 && (v22 = v21(v20)) != 0)
  {
    v25 = (_QWORD *)v22;
    v26 = *(_BYTE *)(a4 + 23);
    v27 = v26 < 0;
    v28 = *(_QWORD *)(a4 + 8);
    if (v26 < 0)
      a4 = *(_QWORD *)a4;
    v29 = v26 & 0x7F;
    if (v27)
      v30 = v28;
    else
      v30 = v29;
    sub_1C5021A04(*a10, a10[1], ",", 1uLL, &v87);
    if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = &v87;
    else
      v31 = (std::string *)v87.__r_.__value_.__r.__words[0];
    if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v87.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v87.__r_.__value_.__l.__size_;
    v33 = sub_1C4D72F0C((uint64_t)a3, a4, v30, a5, a6, (uint64_t)v31, size);
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v87.__r_.__value_.__l.__data_);
    if (v33)
    {
      v36 = (uint64_t (*)(_QWORD *, llvm::MCContext *))a3[18];
      if (v36 && (v37 = v36(v25, a7)) != 0)
      {
        v40 = v37;
        v73 = v25;
        v41 = operator new();
        v42 = *(_QWORD *)(v41 + 24);
        v43 = *(_QWORD *)(v41 + 32) - v42;
        *(_QWORD *)(v41 + 8) = v42;
        *(_QWORD *)(v41 + 16) = v43;
        *(_QWORD *)v41 = &off_1E8132C30;
        *(_OWORD *)(v41 + 72) = 0u;
        v44 = (uint64_t *)(v41 + 72);
        *(_OWORD *)(v41 + 40) = 0u;
        *(_OWORD *)(v41 + 56) = 0u;
        *(_DWORD *)(v41 + 88) = 0;
        *(_OWORD *)(v41 + 24) = 0u;
        *(_QWORD *)(v41 + 96) = v41 + 112;
        *(_QWORD *)(v41 + 104) = 0x1000000000;
        *(_QWORD *)(v41 + 248) = 0;
        *(_QWORD *)(v41 + 240) = v41 + 248;
        *(_QWORD *)(v41 + 256) = 0;
        *(_QWORD *)(v41 + 264) = 0x100000;
        sub_1C4D730E0((unint64_t *)(v41 + 24), 0x100000uLL);
        v45 = (llvm::MCStreamer *)operator new();
        v46 = llvm::MCStreamer::MCStreamer(v45, a7);
        *(_QWORD *)v46 = off_1E8132C68;
        *((_QWORD *)v46 + 34) = 0;
        *((_QWORD *)v46 + 35) = v40;
        *((_QWORD *)v46 + 36) = v41;
        MCAsmParser = (_QWORD *)llvm::createMCAsmParser((llvm *)v75, a7, v45, a9, 0);
        v48 = (void (*)(void))a3[36];
        if (v48)
          v48();
        v49 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD *, const char ***))a3[14];
        if (v49 && (v50 = v49(v33, MCAsmParser, v25, v77)) != 0)
        {
          v53 = v50;
          MCAsmParser[1] = v50;
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v50 + 16))(v50, MCAsmParser);
          if ((*(unsigned int (**)(_QWORD *, _QWORD, _QWORD))(*MCAsmParser + 80))(MCAsmParser, 0, 0))
          {
            v54 = std::generic_category();
            v55 = operator new();
            v87.__r_.__value_.__r.__words[0] = (std::string::size_type)"Failed to assemble";
            v88 = 259;
            *(_QWORD *)v55 = off_1E81A0C88;
            llvm::Twine::str((llvm::Twine *)&v87, (_QWORD *)(v55 + 8));
            *(_QWORD *)(v55 + 32) = 92;
            *(_QWORD *)(v55 + 40) = v54;
            *(_BYTE *)(v55 + 48) = 1;
            *(_BYTE *)(a8 + 8) |= 1u;
          }
          else
          {
            v70 = v53;
            v71 = MCAsmParser;
            v57 = *(_QWORD *)(v41 + 48);
            v56 = *(_QWORD *)(v41 + 56);
            if (v57 == v56)
            {
              *(_BYTE *)(a8 + 8) &= ~1u;
              v55 = v41;
              v41 = 0;
            }
            else
            {
              v67 = v45;
              v68 = v40;
              v69 = v33;
              v72 = (uint64_t)a7 + 192;
              do
              {
                if (*(_DWORD *)(v57 + 48))
                {
                  v58 = 0;
                  v59 = 0;
                  v60 = 3;
                  do
                  {
                    v61 = *(_QWORD *)(v57 + 40);
                    if (*(_BYTE *)(v61 + v58) == 5)
                    {
                      v62 = v61 + v58;
                      v63 = *(_QWORD *)(v61 + v58 + 8);
                      if (*(_BYTE *)v63 == 2)
                      {
                        v89 = *(_QWORD *)(v63 + 16);
                        v87.__r_.__value_.__r.__words[0] = 0;
                        if (sub_1C6175210(v44, &v89, &v87))
                        {
                          if (v87.__r_.__value_.__r.__words[0] != *(_QWORD *)(v41 + 72)
                                                                 + 16 * *(unsigned int *)(v41 + 88))
                          {
                            v64 = v44;
                            v65 = *(_QWORD *)(v87.__r_.__value_.__r.__words[0] + 8);
                            if (*(_BYTE *)(*(_QWORD *)(*v73 + 48 * *(unsigned int *)(v57 + 24) + 40) + v60) == 4)
                              v65 -= *(_QWORD *)v57;
                            v66 = sub_1C484358C(v72, 24, 3);
                            *(_BYTE *)v66 = 1;
                            *(_DWORD *)(v66 + 1) = *(unsigned __int8 *)(v66 + 4) << 24;
                            *(_QWORD *)(v66 + 8) = 0;
                            *(_QWORD *)(v66 + 16) = v65;
                            *(_QWORD *)(v62 + 8) = v66;
                            v44 = v64;
                          }
                        }
                      }
                    }
                    ++v59;
                    v60 += 6;
                    v58 += 16;
                  }
                  while (v59 < *(unsigned int *)(v57 + 48));
                }
                v57 += 192;
              }
              while (v57 != v56);
              *(_BYTE *)(a8 + 8) &= ~1u;
              v55 = v41;
              v41 = 0;
              v40 = v68;
              v33 = v69;
              v45 = v67;
            }
            v53 = v70;
            MCAsmParser = v71;
          }
          *(_QWORD *)a8 = v55;
          (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
        }
        else
        {
          v51 = std::generic_category();
          v52 = operator new();
          v87.__r_.__value_.__r.__words[0] = (std::string::size_type)"this target does not support assembly parsing.";
          v88 = 259;
          *(_QWORD *)v52 = off_1E81A0C88;
          llvm::Twine::str((llvm::Twine *)&v87, (_QWORD *)(v52 + 8));
          *(_QWORD *)(v52 + 32) = 45;
          *(_QWORD *)(v52 + 40) = v51;
          *(_BYTE *)(v52 + 48) = 1;
          *(_BYTE *)(a8 + 8) |= 1u;
          *(_QWORD *)a8 = v52;
        }
        v25 = v73;
        (*(void (**)(_QWORD *))(*MCAsmParser + 8))(MCAsmParser);
        (*(void (**)(llvm::MCStreamer *))(*(_QWORD *)v45 + 48))(v45);
        if (v41)
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
      }
      else
      {
        v38 = std::generic_category();
        v39 = operator new();
        v87.__r_.__value_.__r.__words[0] = (std::string::size_type)"Could not initialize assembly parser";
        v88 = 259;
        *(_QWORD *)v39 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&v87, (_QWORD *)(v39 + 8));
        *(_QWORD *)(v39 + 32) = 45;
        *(_QWORD *)(v39 + 40) = v38;
        *(_BYTE *)(v39 + 48) = 1;
        *(_BYTE *)(a8 + 8) |= 1u;
        *(_QWORD *)a8 = v39;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    }
    else
    {
      v34 = std::generic_category();
      v35 = operator new();
      v87.__r_.__value_.__r.__words[0] = (std::string::size_type)"Could not initialize assembly parser";
      v88 = 259;
      *(_QWORD *)v35 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)&v87, (_QWORD *)(v35 + 8));
      *(_QWORD *)(v35 + 32) = 45;
      *(_QWORD *)(v35 + 40) = v34;
      *(_BYTE *)(v35 + 48) = 1;
      *(_BYTE *)(a8 + 8) |= 1u;
      *(_QWORD *)a8 = v35;
    }
    MEMORY[0x1CAA32FC0](v25, 0x10F0C40CB53E019);
  }
  else
  {
    v23 = std::generic_category();
    v24 = operator new();
    v87.__r_.__value_.__r.__words[0] = (std::string::size_type)"Could not initialize assembly parser";
    v88 = 259;
    *(_QWORD *)v24 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v87, (_QWORD *)(v24 + 8));
    *(_QWORD *)(v24 + 32) = 45;
    *(_QWORD *)(v24 + 40) = v23;
    *(_BYTE *)(v24 + 48) = 1;
    *(_BYTE *)(a8 + 8) |= 1u;
    *(_QWORD *)a8 = v24;
  }
  llvm::SourceMgr::~SourceMgr((llvm::SourceMgr *)v75);
  *(_QWORD *)&v75[0] = &v86;
  sub_1C4765410((void ***)v75);
  if (v85 < 0)
    operator delete(__p);
  if (v83 < 0)
    operator delete(v82);
  if (v81 < 0)
    operator delete(v80);
  if (v79 < 0)
    operator delete(v77[2]);
  if ((v91 & 1) == 0)
  {
LABEL_4:
    if (v90[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v90[0] + 8))(v90[0]);
  }
}

uint64_t sub_1C4D72F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t (*v7)(void **, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD v14[4];
  __int16 v15;
  void *__p[2];
  char v17;

  v7 = *(uint64_t (**)(void **, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 88);
  if (!v7)
    return 0;
  v15 = 261;
  v14[0] = a2;
  v14[1] = a3;
  llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)v14);
  v12 = v7(__p, a4, a5, a6, a7);
  if (v17 < 0)
    operator delete(__p[0]);
  return v12;
}

char *sub_1C4D72FA4(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  char *v18;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  else
    v5 = v3;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    sub_1C4764EE4();
  v7 = 3 * v5;
  v8 = (char *)operator new(24 * v5);
  v9 = &v8[24 * v2];
  v10 = &v8[8 * v7];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v11 = v9 + 24;
  v12 = (char *)*a1;
  v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = &v9[v14];
      v16 = &v13[v14];
      v17 = *(_OWORD *)&v13[v14 - 24];
      *((_QWORD *)v16 - 3) = 0;
      *(_OWORD *)(v15 - 24) = v17;
      *((_QWORD *)v15 - 1) = *(_QWORD *)&v13[v14 - 8];
      *((_QWORD *)v16 - 2) = 0;
      v14 -= 24;
    }
    while (&v13[v14] != v12);
    v13 = (char *)*a1;
    v18 = (char *)a1[1];
    *a1 = &v9[v14];
    a1[1] = v11;
    a1[2] = v10;
    while (v18 != v13)
      llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)(v18 - 24));
  }
  if (v13)
    operator delete(v13);
  return v11;
}

void sub_1C4D730E0(unint64_t *a1, size_t __sz)
{
  unint64_t v2;
  char *v5;
  _BYTE *v6;
  char *v7;
  _BYTE *v8;
  char *v9;
  char v10;

  v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      abort();
    v5 = (char *)a1[1];
    v6 = operator new(__sz);
    v7 = &v5[(_QWORD)v6 - v2];
    v8 = v7;
    if (v5 != (char *)v2)
    {
      v9 = &v5[~v2];
      do
      {
        v10 = *--v5;
        (v9--)[(_QWORD)v6] = v10;
      }
      while (v5 != (char *)v2);
      v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
      operator delete((void *)v2);
  }
}

uint64_t sub_1C4D73184(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  *(_QWORD *)a1 = &off_1E8132C30;
  sub_1C47655E8(a1 + 240, *(_QWORD **)(a1 + 248));
  v2 = *(void **)(a1 + 96);
  if (v2 != (void *)(a1 + 112))
    free(v2);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 72), 8);
  v5 = (void **)(a1 + 48);
  sub_1C4D734C0(&v5);
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1C4D73200(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)a1 = &off_1E8132C30;
  sub_1C47655E8(a1 + 240, *(_QWORD **)(a1 + 248));
  v2 = *(void **)(a1 + 96);
  if (v2 != (void *)(a1 + 112))
    free(v2);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 72), 8);
  v4 = (void **)(a1 + 48);
  sub_1C4D734C0(&v4);
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4D7328C(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1C4D7353C(a3, a1, a2);
}

void sub_1C4D7329C(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  sub_1C4D7353C((uint64_t)&v5, a1, a2);
  v4 = v5;
  *(_BYTE *)(a3 + 8) = *(_BYTE *)(a3 + 8) & 0xFE | v6 & 1;
  *(_QWORD *)a3 = v4;
}

void sub_1C4D73314(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  char **v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  char *v8;
  char *v9;
  char *v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  BOOL v22;

  v4 = a3;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = *(_QWORD *)(a1 + 256);
  if (v5)
  {
    v6 = (unint64_t *)(a1 + 248);
    v7 = *(unint64_t **)(a1 + 240);
  }
  else
  {
    v7 = *(unint64_t **)(a1 + 96);
    v6 = &v7[*(unsigned int *)(a1 + 104)];
  }
  if (v7 != v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = v7 + 4;
      if (!v5)
        v11 = v7;
      v12 = *v11;
      if (*(_QWORD *)(a2 + 8) <= *v11 && v12 < *(_QWORD *)(a2 + 24))
      {
        if (v10 >= v8)
        {
          v14 = (v10 - v9) >> 3;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61)
            abort();
          if ((v8 - v9) >> 2 > v15)
            v15 = (v8 - v9) >> 2;
          if ((unint64_t)(v8 - v9) >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v15;
          if (v16)
          {
            if (v16 >> 61)
              sub_1C4764EE4();
            v17 = (char *)operator new(8 * v16);
            v4 = a3;
          }
          else
          {
            v17 = 0;
          }
          v18 = &v17[8 * v14];
          *(_QWORD *)v18 = v12;
          v13 = v18 + 8;
          while (v10 != v9)
          {
            v19 = *((_QWORD *)v10 - 1);
            v10 -= 8;
            *((_QWORD *)v18 - 1) = v19;
            v18 -= 8;
          }
          v8 = &v17[8 * v16];
          *v4 = v18;
          v4[1] = v13;
          v4[2] = v8;
          if (v9)
          {
            operator delete(v9);
            v4 = a3;
          }
          v9 = v18;
        }
        else
        {
          *(_QWORD *)v10 = v12;
          v13 = v10 + 8;
        }
        v4[1] = v13;
        v10 = v13;
      }
      if (v5)
      {
        v20 = (unint64_t *)v7[1];
        if (v20)
        {
          do
          {
            v21 = v20;
            v20 = (unint64_t *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            v21 = (unint64_t *)v7[2];
            v22 = *v21 == (_QWORD)v7;
            v7 = v21;
          }
          while (!v22);
        }
      }
      else
      {
        v21 = v7 + 1;
      }
      v7 = v21;
    }
    while (v21 != v6);
  }
}

void sub_1C4D734C0(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (char *)*((_QWORD *)v4 - 19);
        if (v4 - 136 != v6)
          free(v6);
        v4 -= 192;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C4D7353C(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  _QWORD *i;
  std::string *v6;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type v9;
  unint64_t v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  const std::error_category *v16;
  uint64_t v17;
  void *__p[2];
  uint64_t v19;
  std::string v20;
  std::string v21;
  std::string v22;
  unint64_t v23;
  void (**v24)(llvm::raw_ostream *__hidden);
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  int v31;
  __int128 *v32;
  __int128 v33;
  std::string::size_type v34;

  v23 = a3;
  for (i = (_QWORD *)a2[6]; i != (_QWORD *)a2[7]; i += 24)
  {
    if (*i == a3)
    {
      *(_BYTE *)(a1 + 8) &= ~1u;
      *(_QWORD *)a1 = i;
      return;
    }
  }
  sub_1C4D737CC(&v23, (uint64_t)&v20);
  v6 = std::string::insert(&v20, 0, "Did not assemble instr at given offset ");
  v7 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v21, " of ");
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = a2[2];
  v33 = 0uLL;
  v34 = 0;
  v25 = 0;
  v29 = 0;
  v30 = 0;
  v24 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v32 = &v33;
  v31 = 0;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  sub_1C5E21910((llvm::raw_ostream *)&v24, v10, 0, 0, 0);
  if (*((char *)v32 + 23) < 0)
  {
    sub_1C47EBC30(__p, *(void **)v32, *((_QWORD *)v32 + 1));
  }
  else
  {
    v11 = *v32;
    v19 = *((_QWORD *)v32 + 2);
    *(_OWORD *)__p = v11;
  }
  v24 = off_1E81A6E70;
  if (v31 == 1 && v26)
    MEMORY[0x1CAA32F9C](v26, 0x1000C8077774924);
  if (SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v19 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if (v19 >= 0)
    v13 = HIBYTE(v19) & 0x7F;
  else
    v13 = (std::string::size_type)__p[1];
  v14 = std::string::append(&v22, (const std::string::value_type *)v12, v13);
  v15 = v14->__r_.__value_.__r.__words[2];
  v33 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v34 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::generic_category();
  v17 = operator new();
  LOWORD(v28) = 260;
  v24 = (void (**)(llvm::raw_ostream *__hidden))&v33;
  *(_QWORD *)v17 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v24, (_QWORD *)(v17 + 8));
  *(_QWORD *)(v17 + 32) = 92;
  *(_QWORD *)(v17 + 40) = v16;
  *(_BYTE *)(v17 + 48) = 1;
  *(_BYTE *)(a1 + 8) |= 1u;
  *(_QWORD *)a1 = v17;
  if (SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
}

void sub_1C4D737CC(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  void (**v4)(llvm::raw_ostream *__hidden);
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  void **v12;
  void *v13[2];
  uint64_t v14;

  v13[0] = 0;
  v13[1] = 0;
  v14 = 0;
  v5 = 0;
  v9 = 0;
  v10 = 0;
  v4 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v12 = v13;
  v11 = 0;
  v7 = 0;
  v8 = 0;
  v6 = 0;
  sub_1C5E21910((llvm::raw_ostream *)&v4, *a1, 0, 0, 0);
  if (*((char *)v12 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a2, *v12, (unint64_t)v12[1]);
  }
  else
  {
    v3 = *(_OWORD *)v12;
    *(_QWORD *)(a2 + 16) = v12[2];
    *(_OWORD *)a2 = v3;
  }
  v4 = off_1E81A6E70;
  if (v11 == 1 && v6)
    MEMORY[0x1CAA32F9C](v6, 0x1000C8077774924);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
}

void sub_1C4D738BC(llvm::MCStreamer *a1)
{
  llvm::MCStreamer::~MCStreamer(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4D738E0()
{
  return 0;
}

uint64_t sub_1C4D738E8()
{
  return 0;
}

uint64_t sub_1C4D738F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  unint64_t *v14;
  uint64_t *v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a1 + 288);
  v15 = *(uint64_t **)(a1 + 272);
  v7 = v15;
  v16 = a2;
  sub_1C6175338((uint64_t *)(v6 + 72), &v16)[1] = v15;
  if ((*(_BYTE *)(v16 + 8) & 1) == 0)
  {
    if (*(_QWORD *)(v6 + 256))
    {
      v8 = (uint64_t **)(v6 + 240);
LABEL_4:
      sub_1C47BC21C(v8, (unint64_t *)&v15, &v15);
      return llvm::MCStreamer::emitLabel(a1, a2, a3);
    }
    v9 = *(_QWORD *)(v6 + 96);
    v10 = *(unsigned int *)(v6 + 104);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      v12 = *(uint64_t ***)(v6 + 96);
      while (*v12 != v7)
      {
        ++v12;
        v11 -= 8;
        if (!v11)
          goto LABEL_11;
      }
      if (v11)
        return llvm::MCStreamer::emitLabel(a1, a2, a3);
LABEL_11:
      if (v10 > 0xF)
      {
        do
        {
          v14 = (unint64_t *)(*(_QWORD *)(v6 + 96) + 8 * v10 - 8);
          sub_1C47BC21C((uint64_t **)(v6 + 240), v14, (uint64_t **)v14);
          LODWORD(v10) = *(_DWORD *)(v6 + 104) - 1;
          *(_DWORD *)(v6 + 104) = v10;
        }
        while ((_DWORD)v10);
        v8 = (uint64_t **)(v6 + 240);
        goto LABEL_4;
      }
    }
    if (v10 >= *(_DWORD *)(v6 + 108))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 96, v6 + 112, v10 + 1, 8);
      v9 = *(_QWORD *)(v6 + 96);
      v10 = *(unsigned int *)(v6 + 104);
    }
    *(_QWORD *)(v9 + 8 * v10) = v7;
    ++*(_DWORD *)(v6 + 104);
  }
  return llvm::MCStreamer::emitLabel(a1, a2, a3);
}

uint64_t sub_1C4D73A3C()
{
  return 1;
}

uint64_t sub_1C4D73A5C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 512))(a1);
}

void sub_1C4D73A6C(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v10;
  __int16 v11;
  __int128 v12;
  void *v13;
  uint64_t v14;
  _BYTE v15[136];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 272);
  v6 = a2 - 1 - (v5 + (unint64_t)a2 - 1) % a2;
  v7 = a4;
  if (v6 < a4)
    v7 = v6;
  if (a4)
    v8 = v7;
  else
    v8 = v6;
  v11 = 0;
  if (v8 >= 2)
  {
    do
    {
      v10 = *(_QWORD **)(a1 + 288);
      v12 = 0uLL;
      v13 = v15;
      v14 = 0x800000000;
      v15[128] = 0;
      sub_1C4D73DAC(v10, v5, (char *)&v11, 2, &v12);
      if (v13 != v15)
        free(v13);
      v5 = *(_QWORD *)(a1 + 272) + 2;
      *(_QWORD *)(a1 + 272) = v5;
      v8 -= 2;
    }
    while (v8 > 1);
  }
}

void sub_1C4D73B6C(uint64_t a1, __int128 *a2, uint64_t a3)
{
  std::string *v5;
  int64_t size;
  std::string::size_type v7;
  void (**v8)(llvm::raw_ostream *__hidden);
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  std::string *__str;
  std::string v17;
  void *v18[2];
  _QWORD v19[13];

  v19[12] = *MEMORY[0x1E0C80C00];
  memset(&v17, 0, sizeof(v17));
  v9 = 0;
  v13 = 0;
  v14 = 0;
  v8 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  __str = &v17;
  v15 = 0;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  v18[0] = v19;
  v18[1] = (void *)0x400000000;
  (*(void (**)(_QWORD, __int128 *, void (***)(llvm::raw_ostream *__hidden), void **, uint64_t))(**(_QWORD **)(a1 + 280) + 32))(*(_QWORD *)(a1 + 280), a2, &v8, v18, a3);
  std::string::operator=(&v17, __str);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v17;
  else
    v5 = (std::string *)v17.__r_.__value_.__r.__words[0];
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v17.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v17.__r_.__value_.__l.__size_;
  sub_1C4D73DAC(*(_QWORD **)(a1 + 288), *(_QWORD *)(a1 + 272), (char *)v5, size, a2);
  v7 = *((_BYTE *)&v17.__r_.__value_.__s + 23) & 0x7F;
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = v17.__r_.__value_.__l.__size_;
  *(_QWORD *)(a1 + 272) += v7;
  if (v18[0] != v19)
    free(v18[0]);
  v8 = off_1E81A6E70;
  if (v15 == 1 && v10)
    MEMORY[0x1CAA32F9C](v10, 0x1000C8077774924);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

_QWORD *sub_1C4D73CF4(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6175444(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1C4D73DAC(_QWORD *a1, uint64_t a2, char *a3, int64_t a4, __int128 *a5)
{
  char *v8;
  _QWORD *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  __int128 v15;
  void *v16;
  void **v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  char *v26;
  void *v27;
  void **v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;

  v8 = (char *)a1[4];
  v9 = a1 + 3;
  v10 = &v8[-a1[3]];
  sub_1C4D740B0((uint64_t)(a1 + 3), v8, a3, &a3[a4], a4);
  v11 = &v10[*v9];
  v12 = v9[1] - (_QWORD)v11;
  v14 = (char *)v9[4];
  v13 = v9[5];
  if ((unint64_t)v14 < v13)
  {
    *(_QWORD *)v14 = a2;
    *((_QWORD *)v14 + 1) = v11;
    *((_QWORD *)v14 + 2) = v12;
    v15 = *a5;
    v16 = v14 + 56;
    *((_QWORD *)v14 + 5) = v14 + 56;
    v17 = (void **)(v14 + 40);
    *(_OWORD *)(v14 + 24) = v15;
    *((_QWORD *)v14 + 6) = 0x800000000;
    v18 = *((_DWORD *)a5 + 6);
    if (!v18 || v17 == (void **)(a5 + 1))
      goto LABEL_8;
    if (v18 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v14 + 40), (uint64_t)(v14 + 56), *((unsigned int *)a5 + 6), 16);
      v19 = *((unsigned int *)a5 + 6);
      if (!(_DWORD)v19)
        goto LABEL_7;
      v16 = *v17;
    }
    else
    {
      v19 = *((unsigned int *)a5 + 6);
    }
    memcpy(v16, *((const void **)a5 + 2), 16 * v19);
LABEL_7:
    *((_DWORD *)v14 + 12) = v18;
LABEL_8:
    v14[184] = *((_BYTE *)a5 + 160);
    v20 = v14 + 192;
    goto LABEL_38;
  }
  v21 = (char *)a1[6];
  v22 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v21) >> 6) + 1;
  if (v22 > 0x155555555555555)
    abort();
  v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v21) >> 6);
  if (2 * v23 > v22)
    v22 = 2 * v23;
  if (v23 >= 0xAAAAAAAAAAAAAALL)
    v24 = 0x155555555555555;
  else
    v24 = v22;
  if (v24)
  {
    if (v24 > 0x155555555555555)
      sub_1C4764EE4();
    v25 = operator new(192 * v24);
  }
  else
  {
    v25 = 0;
  }
  v42 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v21) >> 6);
  v26 = &v25[64 * ((v14 - v21) >> 6)];
  *(_QWORD *)v26 = a2;
  *((_QWORD *)v26 + 1) = v11;
  *((_QWORD *)v26 + 2) = v12;
  *(_OWORD *)(v26 + 24) = *a5;
  v27 = v26 + 56;
  *((_QWORD *)v26 + 5) = v26 + 56;
  v28 = (void **)(v26 + 40);
  *((_QWORD *)v26 + 6) = 0x800000000;
  v29 = *((unsigned int *)a5 + 6);
  if ((_DWORD)v29 && v28 != (void **)(a5 + 1))
  {
    if (v29 >= 9)
    {
      *((_DWORD *)v26 + 12) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v26 + 40), (uint64_t)(v26 + 56), v29, 16);
      v30 = *((unsigned int *)a5 + 6);
      if (!(_DWORD)v30)
        goto LABEL_24;
      v27 = *v28;
    }
    else
    {
      v30 = *((unsigned int *)a5 + 6);
    }
    memcpy(v27, *((const void **)a5 + 2), 16 * v30);
LABEL_24:
    *((_DWORD *)v26 + 12) = v29;
    v21 = (char *)a1[6];
    v14 = (char *)a1[7];
  }
  v31 = &v25[192 * v24];
  v25[192 * v42 + 184] = *((_BYTE *)a5 + 160);
  v20 = v26 + 192;
  if (v14 == v21)
  {
    a1[6] = v26;
    a1[7] = v20;
    a1[8] = v31;
  }
  else
  {
    v32 = 0;
    do
    {
      v33 = &v26[v32];
      v34 = &v14[v32];
      v35 = *(_OWORD *)&v14[v32 - 192];
      *((_QWORD *)v33 - 22) = *(_QWORD *)&v14[v32 - 176];
      *((_OWORD *)v33 - 12) = v35;
      v36 = *(_OWORD *)&v14[v32 - 168];
      *(_QWORD *)&v26[v32 - 152] = &v26[v32 - 136];
      v37 = (uint64_t)&v26[v32 - 152];
      *(_OWORD *)(v37 - 16) = v36;
      *(_QWORD *)(v37 + 8) = 0x800000000;
      if (*(_DWORD *)&v14[v32 - 144])
        sub_1C4D72194(v37, (uint64_t)(v34 - 152));
      *(v33 - 8) = *(v34 - 8);
      v32 -= 192;
    }
    while (&v14[v32] != v21);
    v21 = (char *)a1[6];
    v38 = (char *)a1[7];
    a1[6] = &v26[v32];
    a1[7] = v20;
    a1[8] = v31;
    while (v38 != v21)
    {
      v39 = (char *)*((_QWORD *)v38 - 19);
      if (v38 - 136 != v39)
        free(v39);
      v38 -= 192;
    }
  }
  if (v21)
    operator delete(v21);
LABEL_38:
  a1[7] = v20;
  v40 = a1[3];
  v41 = a1[4] - v40;
  a1[1] = v40;
  a1[2] = v41;
}

char *sub_1C4D740B0(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  char *v5;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  int64_t v25;
  char v26;
  char *v27;
  char *v28;
  size_t v29;
  char *v30;
  char *v31;
  char *v32;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      abort();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
    {
      v16 = v15;
      v17 = (char *)operator new(v15);
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v27 = &v13[(_QWORD)v17];
    memcpy(&v13[(_QWORD)v17], __src, a5);
    v28 = &v13[(_QWORD)v17];
    v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(_QWORD)v17 - 1] = v13[(_QWORD)(v11 - 1)];
        --v13;
      }
      while (v13);
      v10 = *(char **)(a1 + 8);
      v28 = v17;
    }
    v30 = &v27[a5];
    v31 = &v17[v29];
    if (v10 != v5)
      memmove(v30, v5, v10 - v5);
    v32 = *(char **)a1;
    *(_QWORD *)a1 = v28;
    *(_QWORD *)(a1 + 8) = &v30[v10 - v5];
    *(_QWORD *)(a1 + 16) = v31;
    if (v32)
      operator delete(v32);
    return v27;
  }
  v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v19 = &__src[a5];
    v21 = *(char **)(a1 + 8);
LABEL_17:
    v22 = &v5[a5];
    v23 = &v21[-a5];
    v24 = v21;
    if (&v21[-a5] < v10)
    {
      v25 = &v10[a5] - v21;
      v24 = v21;
      do
      {
        v26 = *v23++;
        *v24++ = v26;
        --v25;
      }
      while (v25);
    }
    *(_QWORD *)(a1 + 8) = v24;
    if (v21 != v22)
      memmove(&v5[a5], v5, v21 - v22);
    if (v19 != __src)
      memmove(v5, __src, v19 - __src);
    return v5;
  }
  v19 = &__src[v18];
  v20 = a4 - &__src[v18];
  if (a4 != &__src[v18])
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  v21 = &v10[v20];
  *(_QWORD *)(a1 + 8) = &v10[v20];
  if (v18 >= 1)
    goto LABEL_17;
  return v5;
}

uint64_t sub_1C4D74294()
{
  return llvm::mc::RegisterMCTargetOptionsFlags::RegisterMCTargetOptionsFlags((uint64_t)&unk_1EF8EFBB8);
}

_QWORD *llvm::agxclauseanalyzer::createObjInput@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *result;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a3 + 8) + 168))(v12, *(_QWORD *)(a3 + 8), *(_QWORD *)a3);
  v9 = (_QWORD *)v12[0];
  if ((v13 & 1) != 0)
  {
    v11 = 1;
  }
  else
  {
    v10 = v12[1];
    result = (_QWORD *)operator new();
    v11 = 0;
    *result = &off_1E8133180;
    result[1] = v9;
    result[2] = v10;
    result[3] = a1;
    result[4] = a2;
    *(_OWORD *)(result + 5) = *(_OWORD *)a3;
    result[7] = 0;
    result[8] = 0;
    *((_DWORD *)result + 18) = 0;
    v9 = result;
  }
  *(_BYTE *)(a4 + 8) = *(_BYTE *)(a4 + 8) & 0xFE | v11;
  *(_QWORD *)a4 = v9;
  return result;
}

_QWORD *sub_1C4D74390(_QWORD *a1)
{
  *a1 = &off_1E8133180;
  sub_1C4D74F68(a1 + 7);
  return a1;
}

void sub_1C4D743C0(_QWORD *a1)
{
  *a1 = &off_1E8133180;
  sub_1C4D74F68(a1 + 7);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4D74400(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  const std::error_category *v13;
  _QWORD *v14;
  _QWORD *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void **v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _QWORD v29[2];
  uint64_t v30;
  int v31;
  uint64_t v32;
  _QWORD v33[4];
  __int16 v34;
  void *v35;
  __int128 v36;
  _BYTE v37[40];
  __int128 v38;
  void *__src;
  uint64_t v40;
  _BYTE v41[128];
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 56;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(unsigned int *)(a1 + 72);
  v9 = sub_1C4D7501C(v7, v8, a2);
  if ((int *)(v7 + 16 * v8) != v9)
  {
    v10 = *((_QWORD *)v9 + 1);
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = v10;
    return;
  }
  v32 = 0;
  v38 = 0uLL;
  __src = v41;
  v40 = 0x800000000;
  v42 = 0;
  v35 = v37;
  v36 = xmmword_1C64638D0;
  sub_1C613932C((uint64_t)v29, (uint64_t)&v35);
  v11 = (*(uint64_t (**)(_QWORD, __int128 *, uint64_t *, uint64_t, uint64_t, uint64_t, _QWORD *))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), &v38, &v32, *(_QWORD *)(a1 + 8) + a2, *(_QWORD *)(a1 + 16) - a2, a2, v29);
  v12 = v32;
  if (!v32)
  {
    v12 = 1;
    v32 = 1;
  }
  if (!v11)
  {
    v13 = std::generic_category();
    v14 = (_QWORD *)operator new();
    v15 = v14;
    v16 = "Instruction failed to disassemble";
    goto LABEL_10;
  }
  if (v11 != 1)
  {
    v28 = a2;
    v17 = *(_QWORD *)(a1 + 8) + a2;
    v18 = operator new();
    v19 = v18;
    *(_QWORD *)v18 = a2;
    *(_QWORD *)(v18 + 8) = v17;
    *(_QWORD *)(v18 + 16) = v12;
    *(_OWORD *)(v18 + 24) = v38;
    v20 = (void *)(v18 + 56);
    *(_QWORD *)(v18 + 40) = v18 + 56;
    v21 = (void **)(v18 + 40);
    *(_QWORD *)(v18 + 48) = 0x800000000;
    v22 = v40;
    if (!(_DWORD)v40)
    {
LABEL_16:
      *(_BYTE *)(v19 + 184) = v42;
      v27 = v19;
      sub_1C4D7507C(v33, v6, &v28, &v27);
      v24 = v27;
      if (v27)
      {
        v25 = *(void **)(v27 + 40);
        if (v25 != (void *)(v27 + 56))
          free(v25);
        MEMORY[0x1CAA32FC0](v24, 0x10D0C4008C057FALL);
      }
      v26 = *(_QWORD *)(v33[0] + 8);
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_QWORD *)a3 = v26;
      goto LABEL_21;
    }
    if (v40 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v18 + 40, (uint64_t)v20, v40, 16);
      v23 = v40;
      if (!(_DWORD)v40)
        goto LABEL_15;
      v20 = *v21;
    }
    else
    {
      v23 = v40;
    }
    memcpy(v20, __src, 16 * v23);
LABEL_15:
    *(_DWORD *)(v19 + 48) = v22;
    goto LABEL_16;
  }
  v13 = std::generic_category();
  v14 = (_QWORD *)operator new();
  v15 = v14;
  v16 = "Instruction disassembled but is not architecturally valid";
LABEL_10:
  v33[0] = v16;
  v34 = 259;
  *v14 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v33, v14 + 1);
  v15[4] = 92;
  v15[5] = v13;
  *((_BYTE *)v15 + 48) = 1;
  *(_BYTE *)(a3 + 8) |= 1u;
  *(_QWORD *)a3 = v15;
LABEL_21:
  v29[0] = off_1E81A6E70;
  if (v31 == 1 && v30)
    MEMORY[0x1CAA32F9C](v30, 0x1000C8077774924);
  if (v35 != v37)
    free(v35);
  if (__src != v41)
    free(__src);
}

void sub_1C4D74754(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  const std::error_category *v13;
  _QWORD *v14;
  _QWORD *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void **v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _QWORD v29[2];
  uint64_t v30;
  int v31;
  uint64_t v32;
  _QWORD v33[4];
  __int16 v34;
  void *v35;
  __int128 v36;
  _BYTE v37[40];
  __int128 v38;
  void *__src;
  uint64_t v40;
  _BYTE v41[128];
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 56;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(unsigned int *)(a1 + 72);
  v9 = sub_1C4D7501C(v7, v8, a2);
  if ((int *)(v7 + 16 * v8) != v9)
  {
    v10 = *((_QWORD *)v9 + 1);
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = v10;
    return;
  }
  v32 = 0;
  v38 = 0uLL;
  __src = v41;
  v40 = 0x800000000;
  v42 = 0;
  v35 = v37;
  v36 = xmmword_1C64638D0;
  sub_1C613932C((uint64_t)v29, (uint64_t)&v35);
  v11 = (*(uint64_t (**)(_QWORD, __int128 *, uint64_t *, uint64_t, uint64_t, uint64_t, _QWORD *))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), &v38, &v32, *(_QWORD *)(a1 + 8) + a2, *(_QWORD *)(a1 + 16) - a2, a2, v29);
  v12 = v32;
  if (!v32)
  {
    v12 = 1;
    v32 = 1;
  }
  if (!v11)
  {
    v13 = std::generic_category();
    v14 = (_QWORD *)operator new();
    v15 = v14;
    v16 = "Instruction failed to disassemble";
    goto LABEL_10;
  }
  if (v11 != 1)
  {
    v28 = a2;
    v17 = *(_QWORD *)(a1 + 8) + a2;
    v18 = operator new();
    v19 = v18;
    *(_QWORD *)v18 = a2;
    *(_QWORD *)(v18 + 8) = v17;
    *(_QWORD *)(v18 + 16) = v12;
    *(_OWORD *)(v18 + 24) = v38;
    v20 = (void *)(v18 + 56);
    *(_QWORD *)(v18 + 40) = v18 + 56;
    v21 = (void **)(v18 + 40);
    *(_QWORD *)(v18 + 48) = 0x800000000;
    v22 = v40;
    if (!(_DWORD)v40)
    {
LABEL_16:
      *(_BYTE *)(v19 + 184) = v42;
      v27 = v19;
      sub_1C4D7507C(v33, v6, &v28, &v27);
      v24 = v27;
      if (v27)
      {
        v25 = *(void **)(v27 + 40);
        if (v25 != (void *)(v27 + 56))
          free(v25);
        MEMORY[0x1CAA32FC0](v24, 0x10D0C4008C057FALL);
      }
      v26 = *(_QWORD *)(v33[0] + 8);
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_QWORD *)a3 = v26;
      goto LABEL_21;
    }
    if (v40 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v18 + 40, (uint64_t)v20, v40, 16);
      v23 = v40;
      if (!(_DWORD)v40)
        goto LABEL_15;
      v20 = *v21;
    }
    else
    {
      v23 = v40;
    }
    memcpy(v20, __src, 16 * v23);
LABEL_15:
    *(_DWORD *)(v19 + 48) = v22;
    goto LABEL_16;
  }
  v13 = std::generic_category();
  v14 = (_QWORD *)operator new();
  v15 = v14;
  v16 = "Instruction disassembled but is not architecturally valid";
LABEL_10:
  v33[0] = v16;
  v34 = 259;
  *v14 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v33, v14 + 1);
  v15[4] = 92;
  v15[5] = v13;
  *((_BYTE *)v15 + 48) = 1;
  *(_BYTE *)(a3 + 8) |= 1u;
  *(_QWORD *)a3 = v15;
LABEL_21:
  v29[0] = off_1E81A6E70;
  if (v31 == 1 && v30)
    MEMORY[0x1CAA32F9C](v30, 0x1000C8077774924);
  if (v35 != v37)
    free(v35);
  if (__src != v41)
    free(__src);
}

uint64_t sub_1C4D74AA8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, char **a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD v70[2];
  char v71;
  unint64_t v72;
  char v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v8 = a1[4];
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
  v11 = v10;
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8);
  v68 = v9;
  v69 = v11;
  if (v9 == v12)
    return std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
  v14 = v12;
  do
  {
    (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v69 + 80))(&v72, v69, v9);
    if ((v73 & 1) != 0)
    {
      v19 = v72;
      v72 = 0;
      v21 = a3[1];
      v20 = (unint64_t)a3[2];
      if ((unint64_t)v21 >= v20)
      {
        v27 = *a3;
        v28 = (v21 - *a3) >> 3;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 61)
          goto LABEL_92;
        v30 = v20 - (_QWORD)v27;
        if (v30 >> 2 > v29)
          v29 = v30 >> 2;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          if (v31 >> 61)
            goto LABEL_93;
          v32 = (char *)operator new(8 * v31);
        }
        else
        {
          v32 = 0;
        }
        v39 = &v32[8 * v28];
        v40 = &v32[8 * v31];
        *(_QWORD *)v39 = v19;
        v22 = v39 + 8;
        if (v21 == v27)
        {
          *a3 = v39;
          a3[1] = v22;
          a3[2] = v40;
        }
        else
        {
          do
          {
            v41 = *((_QWORD *)v21 - 1);
            v21 -= 8;
            *((_QWORD *)v39 - 1) = v41;
            v39 -= 8;
            *(_QWORD *)v21 = 0;
          }
          while (v21 != v27);
          v21 = *a3;
          v42 = a3[1];
          *a3 = v39;
          a3[1] = v22;
          a3[2] = v40;
          while (v42 != v21)
          {
            v44 = *((_QWORD *)v42 - 1);
            v42 -= 8;
            v43 = v44;
            if (v44)
              (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
          }
        }
        if (v21)
          operator delete(v21);
      }
      else
      {
        *(_QWORD *)v21 = v19;
        v22 = v21 + 8;
      }
      a3[1] = v22;
    }
    else
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v69 + 120))(v70, v69, v68);
      if ((v71 & 1) != 0)
      {
        v23 = v70[0];
        v70[0] = 0;
        v25 = a3[1];
        v24 = (unint64_t)a3[2];
        if ((unint64_t)v25 >= v24)
        {
          v33 = *a3;
          v34 = (v25 - *a3) >> 3;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 61)
            goto LABEL_92;
          v36 = v24 - (_QWORD)v33;
          if (v36 >> 2 > v35)
            v35 = v36 >> 2;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
            v37 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          if (v37)
          {
            if (v37 >> 61)
              goto LABEL_93;
            v38 = (char *)operator new(8 * v37);
          }
          else
          {
            v38 = 0;
          }
          v45 = &v38[8 * v34];
          v46 = &v38[8 * v37];
          *(_QWORD *)v45 = v23;
          v26 = v45 + 8;
          if (v25 == v33)
          {
            *a3 = v45;
            a3[1] = v26;
            a3[2] = v46;
          }
          else
          {
            do
            {
              v47 = *((_QWORD *)v25 - 1);
              v25 -= 8;
              *((_QWORD *)v45 - 1) = v47;
              v45 -= 8;
              *(_QWORD *)v25 = 0;
            }
            while (v25 != v33);
            v25 = *a3;
            v48 = a3[1];
            *a3 = v45;
            a3[1] = v26;
            a3[2] = v46;
            while (v48 != v25)
            {
              v50 = *((_QWORD *)v48 - 1);
              v48 -= 8;
              v49 = v50;
              if (v50)
                (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
            }
          }
          if (v25)
            operator delete(v25);
        }
        else
        {
          *(_QWORD *)v25 = v23;
          v26 = v25 + 8;
        }
        a3[1] = v26;
      }
      else if (v70[1] == a1[6] && v70[0] == a1[5])
      {
        v15 = v72;
        if (*(_QWORD *)(a2 + 8) <= v72 && v72 < *(_QWORD *)(a2 + 24))
        {
          v17 = a4[1];
          v16 = (unint64_t)a4[2];
          if ((unint64_t)v17 >= v16)
          {
            v53 = *a4;
            v54 = (v17 - *a4) >> 3;
            v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 61)
LABEL_92:
              abort();
            v56 = v16 - (_QWORD)v53;
            if (v56 >> 2 > v55)
              v55 = v56 >> 2;
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
              v57 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v57 = v55;
            if (v57)
            {
              if (v57 >> 61)
LABEL_93:
                sub_1C4764EE4();
              v58 = (char *)operator new(8 * v57);
            }
            else
            {
              v58 = 0;
            }
            v59 = &v58[8 * v54];
            *(_QWORD *)v59 = v15;
            v18 = v59 + 8;
            while (v17 != v53)
            {
              v60 = *((_QWORD *)v17 - 1);
              v17 -= 8;
              *((_QWORD *)v59 - 1) = v60;
              v59 -= 8;
            }
            *a4 = v59;
            a4[2] = &v58[8 * v57];
            if (v53)
              operator delete(v53);
          }
          else
          {
            *(_QWORD *)v17 = v72;
            v18 = v17 + 8;
          }
          a4[1] = v18;
        }
      }
      if ((v71 & 1) != 0)
      {
        v51 = v70[0];
        v70[0] = 0;
        if (v51)
          (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
      }
    }
    if ((v73 & 1) != 0)
    {
      v52 = v72;
      v72 = 0;
      if (v52)
        (*(void (**)(unint64_t))(*(_QWORD *)v52 + 8))(v52);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v69 + 24))(v69, &v68);
    v9 = v68;
  }
  while (v68 != v14);
  v62 = *a4;
  v61 = a4[1];
  result = std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
  if (v62 != v61)
  {
    v63 = (uint64_t *)(v62 + 8);
    while (v63 != (uint64_t *)v61)
    {
      v64 = *(v63 - 1);
      v65 = *v63++;
      if (v64 == v65)
      {
        v66 = v63 - 2;
        while (v63 != (uint64_t *)v61)
        {
          v67 = v64;
          v64 = *v63;
          if (v67 != *v63)
          {
            v66[1] = v64;
            ++v66;
          }
          ++v63;
        }
        if (v66 + 1 != (uint64_t *)v61)
          a4[1] = (char *)(v66 + 1);
        return result;
      }
    }
  }
  return result;
}

uint64_t *sub_1C4D74F68(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    v5 = (uint64_t *)(v3 + 8);
    do
    {
      if (*((_DWORD *)v5 - 2) <= 0xFFFFFFFD)
        v5 = sub_1C4D74FC4(v5);
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

uint64_t *sub_1C4D74FC4(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 40);
    if (v3 != (void *)(v2 + 56))
      free(v3);
    MEMORY[0x1CAA32FC0](v2, 0x10D0C4008C057FALL);
  }
  return a1;
}

int *sub_1C4D7501C(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;
  int *v4;
  int v5;
  int v6;
  int v7;

  if (!a2)
    return (int *)(a1 + 16 * a2);
  LODWORD(v3) = (37 * a3) & (a2 - 1);
  v4 = (int *)(a1 + 16 * v3);
  v5 = *v4;
  if (*v4 != a3)
  {
    v6 = 1;
    while (v5 != -1)
    {
      v7 = v3 + v6++;
      v3 = v7 & (a2 - 1);
      v5 = *(_DWORD *)(a1 + 16 * v3);
      if (v5 == a3)
        return (int *)(a1 + 16 * v3);
    }
    return (int *)(a1 + 16 * a2);
  }
  return v4;
}

_DWORD *sub_1C4D7507C(_DWORD *result, uint64_t a2, _DWORD *a3, uint64_t *a4)
{
  _DWORD *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  BOOL v34;
  unsigned int v35;

  v7 = result;
  v8 = *(_DWORD *)(a2 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)a2;
    v10 = v8 - 1;
    v11 = (37 * *a3) & (v8 - 1);
    v12 = *(_QWORD *)a2 + 16 * v11;
    v13 = *(_DWORD *)v12;
    if (*a3 == *(_DWORD *)v12)
    {
LABEL_3:
      v14 = 0;
      goto LABEL_10;
    }
    v17 = 0;
    v18 = 1;
    while (v13 != -1)
    {
      if (v17)
        v19 = 0;
      else
        v19 = v13 == -2;
      if (v19)
        v17 = v12;
      v20 = v11 + v18++;
      v11 = v20 & v10;
      v12 = v9 + 16 * (v20 & v10);
      v13 = *(_DWORD *)v12;
      if (*a3 == *(_DWORD *)v12)
        goto LABEL_3;
    }
    if (v17)
      v12 = v17;
  }
  else
  {
    v12 = 0;
  }
  v15 = *(_DWORD *)(a2 + 8);
  if (4 * v15 + 4 >= 3 * v8)
  {
    result = sub_1C4D752BC((uint64_t *)a2, 2 * v8);
    v21 = *(_DWORD *)(a2 + 16);
    if (v21)
    {
      v22 = v21 - 1;
      v23 = (37 * *a3) & (v21 - 1);
      v12 = *(_QWORD *)a2 + 16 * v23;
      v24 = *(_DWORD *)v12;
      if (*a3 == *(_DWORD *)v12)
        goto LABEL_7;
      v25 = 0;
      v26 = 1;
      while (v24 != -1)
      {
        if (v25)
          v27 = 0;
        else
          v27 = v24 == -2;
        if (v27)
          v25 = v12;
        v28 = v23 + v26++;
        v23 = v28 & v22;
        v12 = *(_QWORD *)a2 + 16 * (v28 & v22);
        v24 = *(_DWORD *)v12;
        if (*a3 == *(_DWORD *)v12)
          goto LABEL_7;
      }
LABEL_46:
      if (v25)
        v12 = v25;
      goto LABEL_7;
    }
LABEL_45:
    v12 = 0;
    goto LABEL_7;
  }
  if (v8 + ~v15 - *(_DWORD *)(a2 + 12) <= v8 >> 3)
  {
    result = sub_1C4D752BC((uint64_t *)a2, v8);
    v29 = *(_DWORD *)(a2 + 16);
    if (v29)
    {
      v30 = v29 - 1;
      v31 = (37 * *a3) & (v29 - 1);
      v12 = *(_QWORD *)a2 + 16 * v31;
      v32 = *(_DWORD *)v12;
      if (*a3 == *(_DWORD *)v12)
        goto LABEL_7;
      v25 = 0;
      v33 = 1;
      while (v32 != -1)
      {
        if (v25)
          v34 = 0;
        else
          v34 = v32 == -2;
        if (v34)
          v25 = v12;
        v35 = v31 + v33++;
        v31 = v35 & v30;
        v12 = *(_QWORD *)a2 + 16 * (v35 & v30);
        v32 = *(_DWORD *)v12;
        if (*a3 == *(_DWORD *)v12)
          goto LABEL_7;
      }
      goto LABEL_46;
    }
    goto LABEL_45;
  }
LABEL_7:
  ++*(_DWORD *)(a2 + 8);
  if (*(_DWORD *)v12 != -1)
    --*(_DWORD *)(a2 + 12);
  *(_DWORD *)v12 = *a3;
  v16 = *a4;
  *a4 = 0;
  *(_QWORD *)(v12 + 8) = v16;
  v9 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 16);
  v14 = 1;
LABEL_10:
  *(_QWORD *)v7 = v12;
  *((_QWORD *)v7 + 1) = v9 + 16 * v8;
  *((_BYTE *)v7 + 16) = v14;
  return result;
}

_DWORD *sub_1C4D752BC(uint64_t *a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *((unsigned int *)a1 + 4);
  v4 = (int *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -1;
        result += 4;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      v13 = &v4[4 * v3];
      do
      {
        v14 = *v12;
        if (*v12 <= 0xFFFFFFFD)
        {
          v15 = *((_DWORD *)a1 + 4) - 1;
          v16 = v15 & (37 * v14);
          v17 = *a1 + 16 * v16;
          v18 = *(_DWORD *)v17;
          if (v14 != *(_DWORD *)v17)
          {
            v20 = 0;
            v21 = 1;
            while (v18 != -1)
            {
              if (v20)
                v22 = 0;
              else
                v22 = v18 == -2;
              if (v22)
                v20 = v17;
              v23 = v16 + v21++;
              v16 = v23 & v15;
              v17 = *a1 + 16 * (v23 & v15);
              v18 = *(_DWORD *)v17;
              if (v14 == *(_DWORD *)v17)
                goto LABEL_12;
            }
            if (v20)
              v17 = v20;
          }
LABEL_12:
          v19 = *((_QWORD *)v12 + 1);
          *(_DWORD *)v17 = v14;
          *((_QWORD *)v12 + 1) = 0;
          *(_QWORD *)(v17 + 8) = v19;
          ++*((_DWORD *)a1 + 2);
          sub_1C4D74FC4((uint64_t *)v12 + 1);
        }
        v12 += 4;
      }
      while (v12 != v13);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v24 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v24)
  {
    v25 = 16 * v24;
    do
    {
      *result = -1;
      result += 4;
      v25 -= 16;
    }
    while (v25);
  }
  return result;
}

llvm::raw_ostream *llvm::agxclauseanalyzer::CAInst::printJSON(uint64_t *a1, llvm::json::OStream *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  void *__p[2];
  void *v14;
  void *v15[2];
  uint64_t v16;
  void *v17[4];
  void (**v18)(llvm::raw_ostream *__hidden);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  void **v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  llvm::json::OStream::objectBegin(a2);
  sub_1C4D67324((uint64_t)&v18, "instr", 5uLL);
  llvm::json::OStream::attributeBegin((uint64_t)a2, "type", 4uLL);
  llvm::json::OStream::value((uint64_t)a2, (uint64_t)&v18);
  --*((_DWORD *)a2 + 2);
  llvm::json::Value::destroy((void **)&v18);
  v8 = *a1;
  LOWORD(v18) = 3;
  v19 = v8;
  llvm::json::OStream::attributeBegin((uint64_t)a2, "offset", 6uLL);
  llvm::json::OStream::value((uint64_t)a2, (uint64_t)&v18);
  --*((_DWORD *)a2 + 2);
  llvm::json::Value::destroy((void **)&v18);
  v9 = a1[2];
  LOWORD(v18) = 3;
  v19 = v9;
  llvm::json::OStream::attributeBegin((uint64_t)a2, "size_in_bytes", 0xDuLL);
  llvm::json::OStream::value((uint64_t)a2, (uint64_t)&v18);
  --*((_DWORD *)a2 + 2);
  llvm::json::Value::destroy((void **)&v18);
  if (a3)
  {
    v15[0] = 0;
    v15[1] = 0;
    v16 = 0;
    LODWORD(v19) = 0;
    v23 = 0;
    v24 = 0;
    v18 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    v26 = v15;
    v25 = 0;
    v10 = *((_DWORD *)a1 + 6);
    v21 = 0;
    v22 = 0;
    v20 = 0;
    if (v10)
      (*(void (**)(uint64_t, uint64_t *, _QWORD, const char *, _QWORD, uint64_t, void (***)(llvm::raw_ostream *__hidden)))(*(_QWORD *)a3 + 32))(a3, a1 + 3, *a1, "", 0, a4, &v18);
    else
      llvm::raw_ostream::write((llvm::raw_ostream *)&v18, "nop", 3uLL);
    if (*((char *)v26 + 23) < 0)
    {
      sub_1C47EBC30(__p, *v26, (unint64_t)v26[1]);
    }
    else
    {
      v11 = *(_OWORD *)v26;
      v14 = v26[2];
      *(_OWORD *)__p = v11;
    }
    sub_1C4D673F4((uint64_t)v17, (unint64_t)__p);
    llvm::json::OStream::attributeBegin((uint64_t)a2, "assembly", 8uLL);
    llvm::json::OStream::value((uint64_t)a2, (uint64_t)v17);
    --*((_DWORD *)a2 + 2);
    llvm::json::Value::destroy(v17);
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
    v18 = off_1E81A6E70;
    if (v25 == 1 && v20)
      MEMORY[0x1CAA32F9C](v20, 0x1000C8077774924);
    if (SHIBYTE(v16) < 0)
      operator delete(v15[0]);
  }
  return llvm::json::OStream::objectEnd(a2);
}

uint64_t llvm::agxclauseanalyzer::InstrClause::getOffset(llvm::agxclauseanalyzer::InstrClause *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1 == *((_QWORD *)this + 2))
    return -1;
  else
    return **(_QWORD **)v1;
}

uint64_t llvm::agxclauseanalyzer::InstrClause::getSizeInBytes(llvm::agxclauseanalyzer::InstrClause *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;

  v1 = (uint64_t *)*((_QWORD *)this + 1);
  v2 = (uint64_t *)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  result = 0;
  do
  {
    v4 = *v1++;
    result += *(_QWORD *)(v4 + 16);
  }
  while (v1 != v2);
  return result;
}

uint64_t llvm::agxclauseanalyzer::InstrStream::getOffset(llvm::agxclauseanalyzer::InstrStream *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (uint64_t *)*((_QWORD *)this + 1);
  if (v1 == *((uint64_t **)this + 2))
    return -1;
  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 8);
  if (v3 == *(_QWORD *)(v2 + 16))
    return -1;
  else
    return **(_QWORD **)v3;
}

uint64_t llvm::agxclauseanalyzer::InstrStream::getSizeInBytes(llvm::agxclauseanalyzer::InstrStream *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  result = 0;
  do
  {
    v4 = *(uint64_t **)(*(_QWORD *)v1 + 8);
    v5 = *(uint64_t **)(*(_QWORD *)v1 + 16);
    if (v4 == v5)
    {
      v6 = 0;
    }
    else
    {
      v6 = 0;
      do
      {
        v7 = *v4++;
        v6 += *(_QWORD *)(v7 + 16);
      }
      while (v4 != v5);
    }
    result += v6;
    v1 += 8;
  }
  while (v1 != v2);
  return result;
}

uint64_t llvm::agxclauseanalyzer::InstrStream::getSizeInPhysInstrs(llvm::agxclauseanalyzer::InstrStream *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;

  v1 = (uint64_t *)*((_QWORD *)this + 1);
  v2 = (uint64_t *)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  result = 0;
  do
  {
    v4 = *v1++;
    result += (uint64_t)(*(_QWORD *)(v4 + 16) - *(_QWORD *)(v4 + 8)) >> 3;
  }
  while (v1 != v2);
  return result;
}

uint64_t llvm::agxclauseanalyzer::InstrStream::getSizeInExecInstrs(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *(uint64_t **)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 16);
  if (v2 == v3)
    return 0;
  v5 = 0;
  do
  {
    v6 = *v2++;
    v5 += (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  }
  while (v2 != v3);
  return v5;
}

llvm *dumpInst(llvm *a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  llvm *v10;
  llvm::raw_ostream *v11;
  _WORD *v12;
  _WORD *v13;
  uint64_t v14;
  llvm *v15;
  _WORD *v16;
  llvm *v17;
  uint64_t v18;
  uint64_t v19;
  llvm *v20;
  llvm *result;
  _WORD *v22;
  _QWORD v23[3];

  v10 = llvm::dbgs(a1);
  v11 = v10;
  v12 = (_WORD *)*((_QWORD *)v10 + 4);
  if (*((_QWORD *)v10 + 3) - (_QWORD)v12 > 1uLL)
  {
    *v12 = 8224;
    v13 = (_WORD *)(*((_QWORD *)v10 + 4) + 2);
    *((_QWORD *)v11 + 4) = v13;
  }
  else
  {
    v11 = llvm::raw_ostream::write(v10, "  ", 2uLL);
    v13 = (_WORD *)*((_QWORD *)v11 + 4);
  }
  if (a5 <= *((_QWORD *)v11 + 3) - (_QWORD)v13)
  {
    if (a5)
    {
      memcpy(v13, a4, a5);
      v13 = (_WORD *)(*((_QWORD *)v11 + 4) + a5);
      *((_QWORD *)v11 + 4) = v13;
    }
  }
  else
  {
    v11 = llvm::raw_ostream::write(v11, (const char *)a4, a5);
    v13 = (_WORD *)*((_QWORD *)v11 + 4);
  }
  if (*((_QWORD *)v11 + 3) - (_QWORD)v13 > 5uLL)
  {
    v13[2] = 10016;
    *(_DWORD *)v13 = 1935767328;
    *((_QWORD *)v11 + 4) += 6;
  }
  else
  {
    v11 = llvm::raw_ostream::write(v11, " was '", 6uLL);
  }
  v14 = *a3;
  v23[0] = &unk_1E8133270;
  v23[1] = "%04x";
  v23[2] = v14;
  v15 = llvm::raw_ostream::operator<<(v11, (uint64_t)v23);
  v16 = (_WORD *)*((_QWORD *)v11 + 4);
  if (*((_QWORD *)v11 + 3) - (_QWORD)v16 > 1uLL)
  {
    *v16 = 8250;
    *((_QWORD *)v11 + 4) += 2;
    if (!a1)
    {
LABEL_11:
      v17 = llvm::dbgs(v15);
      v18 = *((_QWORD *)v17 + 4);
      if ((unint64_t)(*((_QWORD *)v17 + 3) - v18) > 0x10)
      {
        *(_BYTE *)(v18 + 16) = 41;
        *(_OWORD *)v18 = *(_OWORD *)"(no inst printer)";
        *((_QWORD *)v17 + 4) += 17;
      }
      else
      {
        v17 = llvm::raw_ostream::write(v17, "(no inst printer)", 0x11uLL);
      }
      goto LABEL_17;
    }
  }
  else
  {
    v15 = llvm::raw_ostream::write(v11, ": ", 2uLL);
    if (!a1)
      goto LABEL_11;
  }
  v19 = *a3;
  v20 = llvm::dbgs(v15);
  v17 = (llvm *)(*(uint64_t (**)(llvm *, uint64_t *, uint64_t, const char *, _QWORD, uint64_t, llvm *))(*(_QWORD *)a1 + 32))(a1, a3 + 3, v19, "", 0, a2, v20);
LABEL_17:
  result = llvm::dbgs(v17);
  v22 = (_WORD *)*((_QWORD *)result + 4);
  if (*((_QWORD *)result + 3) - (_QWORD)v22 <= 1uLL)
    return llvm::raw_ostream::write(result, "'\n", 2uLL);
  *v22 = 2599;
  *((_QWORD *)result + 4) += 2;
  return result;
}

void llvm::agxclauseanalyzer::AGXClauseAnalyzer::findStreamSprings(_QWORD **a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, char **a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v6;
  __int128 v7;
  char *v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  _QWORD *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  char *v48;
  char *v49;
  int v50;
  _QWORD *v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  _QWORD *v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  BOOL v117;
  char *v118;
  uint64_t v119;
  char *v120;
  BOOL v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v126;
  uint64_t v127;
  unsigned int v128;
  char *v129;
  char *v130;
  char *v131;
  int v132;
  unint64_t v133;
  uint64_t v134;
  int v135;
  char *v136;
  unint64_t v137;
  char *v138;
  unint64_t v139;
  _QWORD *v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  __int128 v151;
  char *v152;
  unint64_t v153;
  char v154;
  char *v155;
  char *v156;
  char v158;
  uint64_t v159;
  uint64_t v161;
  _QWORD *v163;
  uint64_t v164;
  unint64_t v165;
  __int128 v166;
  __int128 v167;
  void *__p;
  char *v169;
  char *v170;
  void *v171;
  uint64_t v172;
  _BYTE v173[16];
  __int16 v174;
  uint64_t v175;
  char v176;
  void *v177;
  uint64_t v178;
  _BYTE v179[128];
  char *v180;
  uint64_t v181;
  _QWORD v182[18];

  v6 = a2;
  v182[16] = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v166 = *a2;
  v167 = v7;
  v164 = v166;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v166 + 32))(&__p);
  v8 = (char *)__p;
  v9 = v169;
  v10 = v6[1];
  if (v6[3] > v10)
  {
    if (v169 >= v170)
    {
      v12 = (v169 - (_BYTE *)__p) >> 3;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61)
LABEL_252:
        abort();
      v14 = v170 - (_BYTE *)__p;
      if ((v170 - (_BYTE *)__p) >> 2 > v13)
        v13 = v14 >> 2;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        if (v15 >> 61)
LABEL_253:
          sub_1C4764EE4();
        v16 = (char *)operator new(8 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = &v16[8 * v12];
      v18 = &v16[8 * v15];
      *(_QWORD *)v17 = v10;
      v11 = v17 + 8;
      if (v8 != v9)
      {
        v19 = v9;
        do
        {
          v20 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *((_QWORD *)v17 - 1) = v20;
          v17 -= 8;
        }
        while (v19 != v8);
      }
      __p = v17;
      v169 = v11;
      v170 = v18;
      if (v8)
        operator delete(v8);
    }
    else
    {
      *(_QWORD *)v169 = v10;
      v11 = v9 + 8;
    }
    v169 = v11;
  }
  std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
  v21 = (char *)__p;
  v22 = v169;
  v23 = (char *)__p;
  if (__p == v169)
  {
LABEL_26:
    if (v23 != v169)
    {
      v27 = v23 + 16;
      if (v23 + 16 != v169)
      {
        v28 = *(_QWORD *)v23;
        do
        {
          v29 = v28;
          v28 = *(_QWORD *)v27;
          if (v29 != *(_QWORD *)v27)
          {
            *((_QWORD *)v23 + 1) = v28;
            v23 += 8;
          }
          v27 += 8;
        }
        while (v27 != v22);
      }
      if (v23 + 8 != v22)
      {
        v22 = v23 + 8;
        v169 = v23 + 8;
      }
    }
  }
  else
  {
    v24 = (char *)__p + 8;
    while (v24 != v169)
    {
      v25 = *((_QWORD *)v24 - 1);
      v26 = *(_QWORD *)v24;
      v24 += 8;
      if (v25 == v26)
      {
        v23 = v24 - 16;
        goto LABEL_26;
      }
    }
  }
  v180 = (char *)v182;
  v181 = 0x1000000000;
  if (v21 != v22)
  {
    v30 = 0;
    do
    {
      v31 = *(_QWORD *)v21;
      if (v30 >= HIDWORD(v181))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v180, (uint64_t)v182, v30 + 1, 8);
        v30 = v181;
      }
      *(_QWORD *)&v180[8 * v30] = v31;
      v30 = v181 + 1;
      LODWORD(v181) = v181 + 1;
      v21 += 8;
    }
    while (v21 != v22);
  }
  v155 = v9;
  v156 = v8;
  v177 = v179;
  v178 = 0x1000000000;
  v33 = *v6;
  v32 = v6[1];
  v34 = v6[2];
  v161 = v6[3];
  v35 = *v6 == v34 && v32 == v6[3];
  v163 = v6;
  if (v35)
  {
    v158 = 0;
LABEL_162:
    if (v156 == v155 || (v158 & 1) != 0)
    {
      v105 = 0;
      LODWORD(v178) = 0;
    }
    else
    {
      v105 = v178;
    }
    v106 = v6[3];
    if (v105 >= HIDWORD(v178))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, (uint64_t)v179, v105 + 1, 8);
      v105 = v178;
    }
    v107 = v164;
    *((_QWORD *)v177 + v105) = v106;
    LODWORD(v178) = v178 + 1;
    std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
    v109 = (char *)__p;
    v108 = v169;
    if (__p != v169)
    {
      v110 = (char *)__p + 8;
      do
      {
        if (v110 == v169)
          goto LABEL_181;
        v111 = *((_QWORD *)v110 - 1);
        v112 = *(_QWORD *)v110;
        v110 += 8;
      }
      while (v111 != v112);
      v109 = v110 - 16;
    }
    if (v109 != v169)
    {
      v113 = v109 + 16;
      if (v109 + 16 != v169)
      {
        v114 = *(_QWORD *)v109;
        do
        {
          v115 = v114;
          v114 = *(_QWORD *)v113;
          if (v115 != *(_QWORD *)v113)
          {
            *((_QWORD *)v109 + 1) = v114;
            v109 += 8;
          }
          v113 += 8;
        }
        while (v113 != v108);
      }
      if (v109 + 8 != v108)
        v169 = v109 + 8;
    }
LABEL_181:
    v116 = &v180[8 * v181 - 8];
    if ((_DWORD)v181)
      v117 = v180 >= v116;
    else
      v117 = 1;
    if (!v117)
    {
      v118 = v180 + 8;
      do
      {
        v119 = *((_QWORD *)v118 - 1);
        *((_QWORD *)v118 - 1) = *(_QWORD *)v116;
        *(_QWORD *)v116 = v119;
        v116 -= 8;
        v117 = v118 >= v116;
        v118 += 8;
      }
      while (!v117);
    }
    v120 = (char *)v177 + 8 * v178 - 8;
    if ((_DWORD)v178)
      v121 = v177 >= v120;
    else
      v121 = 1;
    if (!v121)
    {
      v122 = (char *)v177 + 8;
      do
      {
        v123 = *((_QWORD *)v122 - 1);
        *((_QWORD *)v122 - 1) = *(_QWORD *)v120;
        *(_QWORD *)v120 = v123;
        v120 -= 8;
        v117 = v122 >= v120;
        v122 += 8;
      }
      while (!v117);
    }
    v124 = v169 - 8;
    if (__p != v169 && __p < v124)
    {
      v126 = (char *)__p + 8;
      do
      {
        v127 = *((_QWORD *)v126 - 1);
        *((_QWORD *)v126 - 1) = *(_QWORD *)v124;
        *(_QWORD *)v124 = v127;
        v124 -= 8;
        v117 = v126 >= v124;
        v126 += 8;
      }
      while (!v117);
    }
    v128 = 0;
    v129 = 0;
    v130 = 0;
    v131 = 0;
    v132 = 0;
    v171 = v173;
    v172 = 0x1000000000;
    v133 = *(_QWORD *)(v164 + 16);
    v134 = v164;
    while (1)
    {
      switch(v132)
      {
        case 0:
          LODWORD(v181) = v181 - 1;
          v132 = 1;
          continue;
        case 1:
          v133 = *((_QWORD *)v177 + v178 - 1);
          LODWORD(v178) = v178 - 1;
          if ((_DWORD)v181)
          {
            v135 = v181 - 1;
            v136 = &v180[8 * v181 - 8];
            do
            {
              v137 = *(_QWORD *)v136;
              v136 -= 8;
              if (v137 >= v133)
                break;
              LODWORD(v181) = v135--;
            }
            while (v135 != -1);
          }
          v138 = v169;
          v132 = 2;
          v134 = v107;
          if (__p != v169)
          {
            do
            {
              v139 = *((_QWORD *)v138 - 1);
              if (v139 >= v133)
                break;
              if (v128 >= HIDWORD(v172))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v171, (uint64_t)v173, v128 + 1, 16);
                v128 = v172;
              }
              v140 = (char *)v171 + 16 * v128;
              *v140 = v107;
              v140[1] = v139;
              v128 = v172 + 1;
              LODWORD(v172) = v172 + 1;
              v138 = v169 - 8;
              v169 = v138;
            }
            while (__p != v138);
            v132 = 2;
            v134 = v107;
          }
          continue;
        case 2:
          v132 = 3;
          if ((_DWORD)v178)
          {
            if (__p != v169)
            {
              v132 = 1;
              if ((_DWORD)v181)
              {
                if (*((_QWORD *)v169 - 1) < *(_QWORD *)&v180[8 * v181 - 8])
                  v132 = 1;
                else
                  v132 = 3;
              }
            }
          }
          continue;
        case 3:
          if (!v128)
            goto LABEL_242;
          v141 = (char *)v171;
          v142 = (char *)v171 + 16 * v128;
          break;
        case 4:
          *(_BYTE *)(a5 + 24) &= ~1u;
          *(_QWORD *)a5 = v131;
          *(_QWORD *)(a5 + 8) = v130;
          *(_QWORD *)(a5 + 16) = v129;
          if (v171 != v173)
            free(v171);
          goto LABEL_245;
        default:
          continue;
      }
      do
      {
        v144 = *(_QWORD *)v141;
        v143 = *((_QWORD *)v141 + 1);
        if (v130 >= v129)
        {
          v145 = (v130 - v131) >> 5;
          v146 = v145 + 1;
          if ((unint64_t)(v145 + 1) >> 59)
            goto LABEL_252;
          if ((v129 - v131) >> 4 > v146)
            v146 = (v129 - v131) >> 4;
          if ((unint64_t)(v129 - v131) >= 0x7FFFFFFFFFFFFFE0)
            v147 = 0x7FFFFFFFFFFFFFFLL;
          else
            v147 = v146;
          if (v147 >> 59)
            goto LABEL_253;
          v148 = (char *)operator new(32 * v147);
          v149 = &v148[32 * v145];
          *(_QWORD *)v149 = v144;
          *((_QWORD *)v149 + 1) = v143;
          *((_QWORD *)v149 + 2) = v134;
          *((_QWORD *)v149 + 3) = v133;
          if (v130 == v131)
          {
            v152 = &v148[32 * v145];
          }
          else
          {
            v150 = &v148[32 * v145];
            do
            {
              v151 = *((_OWORD *)v130 - 1);
              v152 = v150 - 32;
              *((_OWORD *)v150 - 2) = *((_OWORD *)v130 - 2);
              *((_OWORD *)v150 - 1) = v151;
              v130 -= 32;
              v150 -= 32;
            }
            while (v130 != v131);
          }
          v129 = &v148[32 * v147];
          v130 = v149 + 32;
          if (v131)
            operator delete(v131);
          v131 = v152;
        }
        else
        {
          *(_QWORD *)v130 = v144;
          *((_QWORD *)v130 + 1) = v143;
          *((_QWORD *)v130 + 2) = v134;
          *((_QWORD *)v130 + 3) = v133;
          v130 += 32;
        }
        v141 += 16;
      }
      while (v141 != v142);
LABEL_242:
      v128 = 0;
      LODWORD(v172) = 0;
      v107 = v164;
      v134 = v163[2];
      v133 = v163[3];
      v132 = 4 * (__p == v169);
    }
  }
  v158 = 0;
  v159 = v6[2];
  while (1)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(&v175, v33, v32);
    v36 = (_QWORD *)v175;
    if ((v176 & 1) != 0)
    {
      v175 = 0;
      *(_BYTE *)(a5 + 24) |= 1u;
      *(_QWORD *)a5 = v36;
      v50 = 1;
    }
    else
    {
      v37 = *(_DWORD *)(v175 + 24);
      v38 = *a1[1];
      if (((unsigned int (*)(_QWORD **, uint64_t))(*a1)[10])(a1, v175))
      {
        v39 = *v36;
        v40 = v36[2];
        v41 = v178;
        if (v178 >= (unint64_t)HIDWORD(v178))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, (uint64_t)v179, v178 + 1, 8);
          v41 = v178;
        }
        *((_QWORD *)v177 + v41) = v40 + v39;
        LODWORD(v178) = v178 + 1;
        v34 = v159;
      }
      v42 = v38 + 48 * v37;
      v45 = *(_QWORD *)(v42 + 8);
      v44 = (uint64_t *)(v42 + 8);
      LOWORD(v43) = v45;
      if ((v45 & 0x800) != 0)
      {
        v51 = (_QWORD *)operator new();
        v171 = "Cannot statically analyze indirect branch";
        v174 = 259;
        *v51 = off_1E81331B8;
        llvm::Twine::str((llvm::Twine *)&v171, v51 + 1);
        v51[4] = v36;
        v53 = a4[1];
        v52 = (unint64_t)a4[2];
        if ((unint64_t)v53 >= v52)
        {
          v55 = *a4;
          v56 = (v53 - *a4) >> 3;
          v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) >> 61)
            goto LABEL_252;
          v58 = v52 - (_QWORD)v55;
          if (v58 >> 2 > v57)
            v57 = v58 >> 2;
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
            v59 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v59 = v57;
          if (v59)
          {
            if (v59 >> 61)
              goto LABEL_253;
            v60 = (char *)operator new(8 * v59);
          }
          else
          {
            v60 = 0;
          }
          v65 = &v60[8 * v56];
          v66 = &v60[8 * v59];
          *(_QWORD *)v65 = v51;
          v54 = v65 + 8;
          if (v53 == v55)
          {
            *a4 = v65;
            a4[1] = v54;
            a4[2] = v66;
          }
          else
          {
            do
            {
              v67 = *((_QWORD *)v53 - 1);
              v53 -= 8;
              *((_QWORD *)v65 - 1) = v67;
              v65 -= 8;
              *(_QWORD *)v53 = 0;
            }
            while (v53 != v55);
            v53 = *a4;
            v68 = a4[1];
            *a4 = v65;
            a4[1] = v54;
            a4[2] = v66;
            while (v68 != v53)
            {
              v70 = *((_QWORD *)v68 - 1);
              v68 -= 8;
              v69 = v70;
              if (v70)
                (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
            }
          }
          v34 = v159;
          if (v53)
            operator delete(v53);
        }
        else
        {
          *(_QWORD *)v53 = v51;
          v54 = v53 + 8;
        }
        a4[1] = v54;
        v158 = 1;
        goto LABEL_81;
      }
      if ((v43 & 0x400) == 0)
        goto LABEL_116;
      v165 = 0;
      v46 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD, _QWORD, unint64_t *))(*(_QWORD *)a3 + 104))(a3, v36 + 3, *v36, v36[2], &v165);
      if (!v46)
      {
        v61 = (_QWORD *)operator new();
        v171 = "Unable to identify branch target";
        v174 = 259;
        *v61 = off_1E81331B8;
        llvm::Twine::str((llvm::Twine *)&v171, v61 + 1);
        v61[4] = v36;
        v63 = a4[1];
        v62 = (unint64_t)a4[2];
        if ((unint64_t)v63 >= v62)
        {
          v74 = *a4;
          v75 = (v63 - *a4) >> 3;
          v76 = v75 + 1;
          if ((unint64_t)(v75 + 1) >> 61)
            goto LABEL_252;
          v77 = v62 - (_QWORD)v74;
          if (v77 >> 2 > v76)
            v76 = v77 >> 2;
          if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
            v78 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v78 = v76;
          if (v78)
          {
            if (v78 >> 61)
              goto LABEL_253;
            v79 = (char *)operator new(8 * v78);
          }
          else
          {
            v79 = 0;
          }
          v80 = &v79[8 * v75];
          v81 = &v79[8 * v78];
          *(_QWORD *)v80 = v61;
          v64 = v80 + 8;
          if (v63 == v74)
          {
            *a4 = v80;
            a4[1] = v64;
            a4[2] = v81;
            v34 = v159;
            if (!v63)
              goto LABEL_114;
          }
          else
          {
            v34 = v159;
            do
            {
              v82 = *((_QWORD *)v63 - 1);
              v63 -= 8;
              *((_QWORD *)v80 - 1) = v82;
              v80 -= 8;
              *(_QWORD *)v63 = 0;
            }
            while (v63 != v74);
            v63 = *a4;
            v83 = a4[1];
            *a4 = v80;
            a4[1] = v64;
            a4[2] = v81;
            while (v83 != v63)
            {
              v85 = *((_QWORD *)v83 - 1);
              v83 -= 8;
              v84 = v85;
              if (v85)
                (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
            }
            if (!v63)
              goto LABEL_114;
          }
          operator delete(v63);
        }
        else
        {
          *(_QWORD *)v63 = v61;
          v64 = v63 + 8;
        }
LABEL_114:
        v6 = v163;
        a4[1] = v64;
LABEL_115:
        v43 = *v44;
LABEL_116:
        if ((v43 & 0x80) == 0)
        {
          v50 = 0;
          goto LABEL_82;
        }
        v86 = v36[2] + *v36;
        if (v6[1] <= v86 && v6[3] > v86)
        {
          v87 = v169;
          if (v169 >= v170)
          {
            v89 = (char *)__p;
            v90 = (v169 - (_BYTE *)__p) >> 3;
            v91 = v90 + 1;
            if ((unint64_t)(v90 + 1) >> 61)
              goto LABEL_252;
            v92 = v170 - (_BYTE *)__p;
            if ((v170 - (_BYTE *)__p) >> 2 > v91)
              v91 = v92 >> 2;
            if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
              v93 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v93 = v91;
            if (v93)
            {
              if (v93 >> 61)
                goto LABEL_253;
              v94 = (char *)operator new(8 * v93);
            }
            else
            {
              v94 = 0;
            }
            v100 = &v94[8 * v90];
            *(_QWORD *)v100 = v86;
            v88 = v100 + 8;
            if (v87 == v89)
            {
              v34 = v159;
            }
            else
            {
              v34 = v159;
              do
              {
                v101 = *((_QWORD *)v87 - 1);
                v87 -= 8;
                *((_QWORD *)v100 - 1) = v101;
                v100 -= 8;
              }
              while (v87 != v89);
            }
            __p = v100;
            v169 = v88;
            v170 = &v94[8 * v93];
            if (v89)
              operator delete(v89);
          }
          else
          {
            *(_QWORD *)v169 = v86;
            v88 = v87 + 8;
          }
          v169 = v88;
        }
LABEL_81:
        v50 = 7;
        goto LABEL_82;
      }
      v47 = v165;
      if (v6[1] > v165 || v6[3] <= v165)
        goto LABEL_81;
      v48 = v169;
      v154 = v46;
      if (v169 >= v170)
      {
        v95 = (char *)__p;
        v96 = (v169 - (_BYTE *)__p) >> 3;
        v97 = v96 + 1;
        if ((unint64_t)(v96 + 1) >> 61)
          goto LABEL_252;
        v98 = v170 - (_BYTE *)__p;
        if ((v170 - (_BYTE *)__p) >> 2 > v97)
          v97 = v98 >> 2;
        if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF8)
          v97 = 0x1FFFFFFFFFFFFFFFLL;
        v153 = v97;
        if (v97)
        {
          if (v97 >> 61)
            goto LABEL_253;
          v99 = (char *)operator new(8 * v97);
        }
        else
        {
          v99 = 0;
        }
        v102 = &v99[8 * v96];
        *(_QWORD *)v102 = v47;
        v49 = v102 + 8;
        if (v48 == v95)
        {
          v34 = v159;
          v103 = v153;
        }
        else
        {
          v34 = v159;
          v103 = v153;
          do
          {
            v104 = *((_QWORD *)v48 - 1);
            v48 -= 8;
            *((_QWORD *)v102 - 1) = v104;
            v102 -= 8;
          }
          while (v48 != v95);
        }
        __p = v102;
        v169 = v49;
        v170 = &v99[8 * v103];
        if (v95)
          operator delete(v95);
        v6 = v163;
      }
      else
      {
        *(_QWORD *)v169 = v165;
        v49 = v48 + 8;
      }
      v169 = v49;
      v50 = 7;
      if ((v154 & 1) == 0)
        goto LABEL_115;
    }
LABEL_82:
    if ((v176 & 1) != 0)
    {
      v71 = v175;
      v175 = 0;
      if (v71)
        (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
    }
    if (v50 != 7 && v50)
      break;
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(&v171, v33, v32);
    v72 = v171;
    if ((v172 & 1) != 0)
    {
      v171 = 0;
      if (v72)
        (*(void (**)(void *))(*(_QWORD *)v72 + 8))(v72);
      v73 = 1;
    }
    else
    {
      v73 = *((_QWORD *)v171 + 2);
    }
    v32 += v73;
    if (v33 == v34 && v32 == v161)
      goto LABEL_162;
  }
LABEL_245:
  if (v177 != v179)
    free(v177);
  if (v180 != (char *)v182)
    free(v180);
  if (__p)
  {
    v169 = (char *)__p;
    operator delete(__p);
  }
}

_QWORD *llvm::agxclauseanalyzer::BranchTargetResolutionError::BranchTargetResolutionError(_QWORD *a1, llvm::Twine *a2, uint64_t a3)
{
  *a1 = off_1E81331B8;
  llvm::Twine::str(a2, a1 + 1);
  a1[4] = a3;
  return a1;
}

{
  *a1 = off_1E81331B8;
  llvm::Twine::str(a2, a1 + 1);
  a1[4] = a3;
  return a1;
}

llvm::raw_ostream *llvm::agxclauseanalyzer::BranchTargetResolutionError::log(llvm::agxclauseanalyzer::BranchTargetResolutionError *this, llvm::raw_ostream *a2)
{
  char *v3;
  const char *v4;
  const char *v5;
  char v6;
  int v7;
  const char *v8;
  size_t v9;
  size_t v10;

  v5 = (const char *)*((_QWORD *)this + 1);
  v3 = (char *)this + 8;
  v4 = v5;
  v6 = v3[23];
  v7 = v6;
  if (v6 >= 0)
    v8 = v3;
  else
    v8 = v4;
  v9 = v6 & 0x7F;
  if (v7 >= 0)
    v10 = v9;
  else
    v10 = *((_QWORD *)v3 + 1);
  return llvm::raw_ostream::write(a2, v8, v10);
}

uint64_t llvm::agxclauseanalyzer::BranchTargetResolutionError::convertToErrorCode(llvm::agxclauseanalyzer::BranchTargetResolutionError *this)
{
  std::generic_category();
  return 45;
}

uint64_t sub_1C4D768FC()
{
  return 0;
}

uint64_t sub_1C4D76904(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81331B8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1C4D76940(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81331B8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C4D7698C()
{
  return &llvm::agxclauseanalyzer::BranchTargetResolutionError::ID;
}

BOOL sub_1C4D76998(uint64_t a1, void *a2)
{
  return a2 == &llvm::agxclauseanalyzer::BranchTargetResolutionError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void llvm::AGX::AGCStatusPrinter::Resetter::~Resetter(llvm::AGX::AGCStatusPrinter::Resetter *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)this + 136);
  if (v1)
    *(_QWORD *)(v1 + 64) = llvm::nulls(this);
}

{
  uint64_t v1;

  if (*(_QWORD *)(*(_QWORD *)this + 136))
  {
    v1 = *(_QWORD *)(*(_QWORD *)this + 136);
    *(_QWORD *)(v1 + 64) = llvm::nulls(this);
  }
}

uint64_t *llvm::AGX::AGCStatusPrinter::setOutput(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = result[17];
  if (v2)
  {
    if (!a2)
    {
      result = llvm::nulls((llvm *)result);
      a2 = result;
    }
    *(_QWORD *)(v2 + 64) = a2;
  }
  return result;
}

llvm::raw_ostream *llvm::AGX::AGCStatusPrinter::logAssemblyOutput(llvm::raw_ostream *result, uint64_t a2)
{
  uint64_t v2;
  char v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  BOOL v10;
  const char *v11;
  size_t v12;
  size_t v13;
  const char *v14;
  const char *v15;
  _WORD v16[2];
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  const char *v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  void *v28;
  uint64_t v29;

  v2 = *((_QWORD *)result + 17);
  if (v2)
  {
    v4 = *(_BYTE *)(v2 + 95);
    v5 = v4 < 0;
    if (v4 >= 0)
      v6 = v2 + 72;
    else
      v6 = *(_QWORD *)(v2 + 72);
    v7 = v4 & 0x7F;
    if (v5)
      v7 = *(_QWORD *)(v2 + 80);
    v8 = *(_QWORD *)(v2 + 96);
    v16[0] = 256;
    v17 = 4;
    v18 = v6;
    v19 = v7;
    v20 = 1;
    v21 = v8;
    v22 = 1;
    v23 = "compiler assembly";
    v24 = 17;
    v25 = 1;
    v27 = 0;
    v26 = 0;
    v28 = &unk_1C868F0BF;
    v29 = 0;
    sub_1C4D6E95C((llvm::raw_ostream *)v2, "Start", 5uLL, (uint64_t)v16);
    v9 = *(_BYTE *)(a2 + 23);
    v10 = v9 < 0;
    if (v9 >= 0)
      v11 = (const char *)a2;
    else
      v11 = *(const char **)a2;
    v12 = v9 & 0x7F;
    if (v10)
      v13 = *(_QWORD *)(a2 + 8);
    else
      v13 = v12;
    llvm::raw_ostream::write((llvm::raw_ostream *)v2, v11, v13);
    result = sub_1C4D6E95C((llvm::raw_ostream *)v2, "End", 3uLL, (uint64_t)v16);
    v14 = *(const char **)(v2 + 32);
    v15 = *(const char **)(v2 + 16);
    if (v14 != v15)
    {
      *(_QWORD *)(v2 + 32) = v15;
      return (llvm::raw_ostream *)llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)v2, v15, v14 - v15);
    }
  }
  return result;
}

llvm *llvm::AGX::AGCStatusPrinter::setTemporaryOutput@<X0>(llvm *result@<X0>, uint64_t *a2@<X1>, llvm **a3@<X8>)
{
  uint64_t v3;
  llvm *v4;
  llvm **v5;

  if (*((_QWORD *)result + 17))
  {
    v3 = *((_QWORD *)result + 17);
    v5 = a3;
    v4 = result;
    if (!a2)
      a2 = llvm::nulls(result);
    result = v4;
    *(_QWORD *)(v3 + 64) = a2;
    a3 = v5;
  }
  *a3 = result;
  return result;
}

void llvm::AGX::AGCStatusPrinter::hookBefore(llvm::AGX::AGCStatusPrinter *this, llvm::legacy::PassManager *a2, const llvm::Pass *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  const void *v10;
  void *v11;
  std::string::size_type v12;
  void **v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  void **v18;
  std::string::size_type v19;
  std::string::size_type v20;
  std::string *v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  std::string *p_p;
  std::string::size_type v26;
  std::string::size_type size;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  size_t v34;
  unint64_t v35;
  std::string v36;
  std::string __p;

  v3 = *((_QWORD *)this + 17);
  if (!v3)
    return;
  v6 = operator new();
  *((_BYTE *)&v36.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v36, "Before ");
  v7 = (*(uint64_t (**)(const llvm::Pass *))(*(_QWORD *)a3 + 16))(a3);
  if (!v7)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    goto LABEL_13;
  }
  v9 = v8;
  if (v8 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_40;
  v10 = (const void *)v7;
  if (v8 >= 0x17)
  {
    v15 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v15 = v8 | 7;
    v16 = v15 + 1;
    v11 = operator new(v15 + 1);
    v34 = v9;
    v35 = v16 | 0x8000000000000000;
    v33 = v11;
  }
  else
  {
    HIBYTE(v35) = v8;
    v11 = &v33;
    if (!v8)
      goto LABEL_12;
  }
  memmove(v11, v10, v9);
LABEL_12:
  *((_BYTE *)v11 + v9) = 0;
  v14 = HIBYTE(v35);
  v13 = (void **)v33;
  v12 = v34;
LABEL_13:
  v17 = v14 < 0;
  if (v14 >= 0)
    v18 = &v33;
  else
    v18 = v13;
  v19 = v14 & 0x7F;
  if (v17)
    v20 = v12;
  else
    v20 = v19;
  v21 = std::string::append(&v36, (const std::string::value_type *)v18, v20);
  __p = *v21;
  v22 = __p.__r_.__value_.__r.__words[2];
  v21->__r_.__value_.__r.__words[0] = 0;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v23 = HIBYTE(v22);
  v24 = (v23 & 0x80u) != 0;
  if ((v23 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v26 = v23 & 0x7F;
  if (v24)
    size = __p.__r_.__value_.__l.__size_;
  else
    size = v26;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = &unk_1EF8F6982;
  *(_DWORD *)(v6 + 24) = 4;
  *(_QWORD *)v6 = off_1E8133290;
  *(_QWORD *)(v6 + 32) = v3;
  if (size > 0x7FFFFFFFFFFFFFF7)
LABEL_40:
    abort();
  v28 = v3 + 72;
  v29 = v3 + 96;
  if (size >= 0x17)
  {
    v31 = (size & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((size | 7) != 0x17)
      v31 = size | 7;
    v32 = v31 + 1;
    v30 = operator new(v31 + 1);
    *(_QWORD *)(v6 + 48) = size;
    *(_QWORD *)(v6 + 56) = v32 | 0x8000000000000000;
    *(_QWORD *)(v6 + 40) = v30;
  }
  else
  {
    v30 = (void *)(v6 + 40);
    *(_BYTE *)(v6 + 63) = size;
    if (!size)
      goto LABEL_33;
  }
  memmove(v30, p_p, size);
LABEL_33:
  *((_BYTE *)v30 + size) = 0;
  *(_QWORD *)(v6 + 64) = v28;
  *(_QWORD *)(v6 + 72) = v29;
  (*(void (**)(llvm::legacy::PassManager *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35) < 0)
    operator delete(v33);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
}

void llvm::AGX::AGCStatusPrinter::hookAfter(llvm::AGX::AGCStatusPrinter *this, llvm::legacy::PassManager *a2, const llvm::Pass *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  const void *v10;
  void *v11;
  std::string::size_type v12;
  void **v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  void **v18;
  std::string::size_type v19;
  std::string::size_type v20;
  std::string *v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  std::string *p_p;
  std::string::size_type v26;
  std::string::size_type size;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  size_t v34;
  unint64_t v35;
  std::string v36;
  std::string __p;

  v3 = *((_QWORD *)this + 17);
  if (!v3)
    return;
  v6 = operator new();
  *((_BYTE *)&v36.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&v36, "After ");
  v7 = (*(uint64_t (**)(const llvm::Pass *))(*(_QWORD *)a3 + 16))(a3);
  if (!v7)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    goto LABEL_13;
  }
  v9 = v8;
  if (v8 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_40;
  v10 = (const void *)v7;
  if (v8 >= 0x17)
  {
    v15 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v15 = v8 | 7;
    v16 = v15 + 1;
    v11 = operator new(v15 + 1);
    v34 = v9;
    v35 = v16 | 0x8000000000000000;
    v33 = v11;
  }
  else
  {
    HIBYTE(v35) = v8;
    v11 = &v33;
    if (!v8)
      goto LABEL_12;
  }
  memmove(v11, v10, v9);
LABEL_12:
  *((_BYTE *)v11 + v9) = 0;
  v14 = HIBYTE(v35);
  v13 = (void **)v33;
  v12 = v34;
LABEL_13:
  v17 = v14 < 0;
  if (v14 >= 0)
    v18 = &v33;
  else
    v18 = v13;
  v19 = v14 & 0x7F;
  if (v17)
    v20 = v12;
  else
    v20 = v19;
  v21 = std::string::append(&v36, (const std::string::value_type *)v18, v20);
  __p = *v21;
  v22 = __p.__r_.__value_.__r.__words[2];
  v21->__r_.__value_.__r.__words[0] = 0;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v23 = HIBYTE(v22);
  v24 = (v23 & 0x80u) != 0;
  if ((v23 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v26 = v23 & 0x7F;
  if (v24)
    size = __p.__r_.__value_.__l.__size_;
  else
    size = v26;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = &unk_1EF8F6982;
  *(_DWORD *)(v6 + 24) = 4;
  *(_QWORD *)v6 = off_1E8133290;
  *(_QWORD *)(v6 + 32) = v3;
  if (size > 0x7FFFFFFFFFFFFFF7)
LABEL_40:
    abort();
  v28 = v3 + 72;
  v29 = v3 + 96;
  if (size >= 0x17)
  {
    v31 = (size & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((size | 7) != 0x17)
      v31 = size | 7;
    v32 = v31 + 1;
    v30 = operator new(v31 + 1);
    *(_QWORD *)(v6 + 48) = size;
    *(_QWORD *)(v6 + 56) = v32 | 0x8000000000000000;
    *(_QWORD *)(v6 + 40) = v30;
  }
  else
  {
    v30 = (void *)(v6 + 40);
    *(_BYTE *)(v6 + 63) = size;
    if (!size)
      goto LABEL_33;
  }
  memmove(v30, p_p, size);
LABEL_33:
  *((_BYTE *)v30 + size) = 0;
  *(_QWORD *)(v6 + 64) = v28;
  *(_QWORD *)(v6 + 72) = v29;
  (*(void (**)(llvm::legacy::PassManager *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35) < 0)
    operator delete(v33);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
}

uint64_t llvm::AGX::AGCStatusPrinter::startRequest(uint64_t this, const llvm::AGX::CompileRequest *a2)
{
  std::string *v3;
  const std::string *ShaderType;

  if (*(_QWORD *)(this + 136))
  {
    v3 = *(std::string **)(this + 136);
    ShaderType = (const std::string *)llvm::AGX::CompileRequest::getShaderType(a2);
    std::string::operator=(v3 + 3, ShaderType);
    this = llvm::AGX::CompileRequest::getId(a2);
    v3[4].__r_.__value_.__r.__words[0] = (int)this;
  }
  return this;
}

uint64_t *llvm::AGX::AGCStatusPrinter::enable(llvm::AGX::AGCStatusPrinter *this)
{
  uint64_t v2;
  uint64_t *result;
  uint64_t v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = operator new();
  result = llvm::nulls((llvm *)v2);
  *(_DWORD *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 56) = 1;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = &unk_1E8133330;
  *(_QWORD *)(v2 + 64) = result;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  v4 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v2;
  if (v4)
  {
    if (*(char *)(v4 + 95) < 0)
      operator delete(*(void **)(v4 + 72));
    *(_QWORD *)v4 = &unk_1E8133330;
    v5 = *(const char **)(v4 + 32);
    v6 = *(const char **)(v4 + 16);
    v7 = v5 - v6;
    if (v5 != v6)
    {
      *(_QWORD *)(v4 + 32) = v6;
      llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)v4, v6, v7);
    }
    *(_QWORD *)v4 = off_1E81A6E70;
    if (*(_DWORD *)(v4 + 56) == 1)
    {
      v8 = *(_QWORD *)(v4 + 16);
      if (v8)
        MEMORY[0x1CAA32F9C](v8, 0x1000C8077774924, v7);
    }
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

uint64_t llvm::AGX::AGCStatusPrinter::disable(uint64_t this)
{
  uint64_t v1;
  const char *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(this + 136);
  *(_QWORD *)(this + 136) = 0;
  if (v1)
  {
    if (*(char *)(v1 + 95) < 0)
      operator delete(*(void **)(v1 + 72));
    *(_QWORD *)v1 = &unk_1E8133330;
    v2 = *(const char **)(v1 + 32);
    v3 = *(const char **)(v1 + 16);
    v4 = v2 - v3;
    if (v2 != v3)
    {
      *(_QWORD *)(v1 + 32) = v3;
      llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)v1, v3, v4);
    }
    *(_QWORD *)v1 = off_1E81A6E70;
    if (*(_DWORD *)(v1 + 56) == 1)
    {
      v5 = *(_QWORD *)(v1 + 16);
      if (v5)
        MEMORY[0x1CAA32F9C](v5, 0x1000C8077774924, v4);
    }
    JUMPOUT(0x1CAA32FC0);
  }
  return this;
}

BOOL llvm::AGX::AGCStatusPrinter::isEnabled(llvm::AGX::AGCStatusPrinter *this)
{
  return *((_QWORD *)this + 17) != 0;
}

llvm::AGX::AGCStatusPrinter *llvm::AGX::AGCStatusPrinter::AGCStatusPrinter(llvm::AGX::AGCStatusPrinter *a1, int a2, uint64_t a3, int a4, int a5, char a6)
{
  void *__p[2];
  char v10;
  __int128 v11;
  char v12;
  __int128 v13;
  char v14;
  __int128 v15;
  uint64_t v16;

  v15 = *(_OWORD *)a3;
  v16 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v14 = 0;
  LOBYTE(v13) = 0;
  v12 = 0;
  LOBYTE(v11) = 0;
  v10 = 12;
  strcpy((char *)__p, "unknown type");
  sub_1C4D77894((uint64_t)a1, &v15, a4, a5, a6, a2, &v13, 0x10000, &v11, (__int128 *)__p, -1, 0);
  if (v10 < 0)
    operator delete(__p[0]);
  if (v12 < 0)
    operator delete((void *)v11);
  if (v14 < 0)
    operator delete((void *)v13);
  if (SHIBYTE(v16) < 0)
    operator delete((void *)v15);
  *((_QWORD *)a1 + 17) = 0;
  if (a2)
    llvm::AGX::AGCStatusPrinter::enable(a1);
  return a1;
}

llvm::raw_ostream *llvm::AGX::AGCStatusPrinter::flush(llvm::AGX::AGCStatusPrinter *this)
{
  llvm::raw_ostream *result;
  const char *v2;
  const char *v3;

  result = (llvm::raw_ostream *)*((_QWORD *)this + 17);
  if (result)
  {
    v2 = (const char *)*((_QWORD *)result + 4);
    v3 = (const char *)*((_QWORD *)result + 2);
    if (v2 != v3)
    {
      *((_QWORD *)result + 4) = v3;
      return (llvm::raw_ostream *)llvm::raw_ostream::flush_tied_then_write(result, v3, v2 - v3);
    }
  }
  return result;
}

__n128 llvm::AGX::AGCStatusPrinter::AGCStatusPrinter(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  uint64_t v8;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v3 = *((_QWORD *)a2 + 3);
  *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(__int128 *)((char *)a2 + 40);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  *(_OWORD *)(a1 + 40) = v4;
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  v5 = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_OWORD *)(a1 + 72) = v5;
  *((_QWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 11) = 0;
  *((_QWORD *)a2 + 9) = 0;
  v6 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 96) = v6;
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 12) = 0;
  result = *(__n128 *)((char *)a2 + 120);
  *(__n128 *)(a1 + 120) = result;
  v8 = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = 0;
  *(_QWORD *)(a1 + 136) = v8;
  return result;
}

{
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  uint64_t v8;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v3 = *((_QWORD *)a2 + 3);
  *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(__int128 *)((char *)a2 + 40);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  *(_OWORD *)(a1 + 40) = v4;
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  v5 = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_OWORD *)(a1 + 72) = v5;
  *((_QWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 11) = 0;
  *((_QWORD *)a2 + 9) = 0;
  v6 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 96) = v6;
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 12) = 0;
  result = *(__n128 *)((char *)a2 + 120);
  *(__n128 *)(a1 + 120) = result;
  v8 = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = 0;
  *(_QWORD *)(a1 + 136) = v8;
  return result;
}

uint64_t llvm::AGX::AGCStatusPrinter::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int16 v5;
  void **v6;
  __int128 v7;
  void **v8;
  __int128 v9;
  void **v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v18;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = *((_WORD *)a2 + 16);
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  *(_WORD *)(a1 + 32) = v5;
  v6 = (void **)(a1 + 40);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*v6);
  v7 = *(__int128 *)((char *)a2 + 40);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  *(_OWORD *)v6 = v7;
  *((_BYTE *)a2 + 63) = 0;
  *((_BYTE *)a2 + 40) = 0;
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  v8 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*v8);
  v9 = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_OWORD *)v8 = v9;
  *((_BYTE *)a2 + 95) = 0;
  *((_BYTE *)a2 + 72) = 0;
  v10 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v10);
  v11 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)v10 = v11;
  *((_BYTE *)a2 + 119) = 0;
  *((_BYTE *)a2 + 96) = 0;
  *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
  v12 = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = 0;
  v13 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v12;
  if (v13)
  {
    if (*(char *)(v13 + 95) < 0)
      operator delete(*(void **)(v13 + 72));
    *(_QWORD *)v13 = &unk_1E8133330;
    v14 = *(const char **)(v13 + 32);
    v15 = *(const char **)(v13 + 16);
    v16 = v14 - v15;
    if (v14 != v15)
    {
      *(_QWORD *)(v13 + 32) = v15;
      llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)v13, v15, v16);
    }
    *(_QWORD *)v13 = off_1E81A6E70;
    if (*(_DWORD *)(v13 + 56) == 1)
    {
      v18 = *(_QWORD *)(v13 + 16);
      if (v18)
        MEMORY[0x1CAA32F9C](v18, 0x1000C8077774924, v16);
    }
    MEMORY[0x1CAA32FC0](v13, 0x10B2C40A7EA51BELL);
  }
  return a1;
}

void sub_1C4D776A4(void **this)
{
  *this = off_1E8133290;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C4D776E0(void **this)
{
  *this = off_1E8133290;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4D77730(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

uint64_t sub_1C4D7773C(uint64_t a1, const std::string *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  char v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  const char *v15;
  const char *v16;
  _WORD v18[2];
  int v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  void *v30;
  uint64_t v31;

  v4 = a1 + 40;
  v3 = *(_QWORD *)(a1 + 40);
  v5 = *(uint64_t **)(a1 + 64);
  v6 = *((_BYTE *)v5 + 23);
  v7 = v6 < 0;
  v8 = v5[1];
  if (v6 < 0)
    v5 = (uint64_t *)*v5;
  v9 = v6 & 0x7F;
  if (v7)
    v9 = v8;
  v10 = **(_QWORD **)(a1 + 72);
  v11 = *(_BYTE *)(a1 + 63);
  v12 = v11;
  if (v11 >= 0)
    v3 = a1 + 40;
  v13 = v11 & 0x7F;
  if (v12 < 0)
    v13 = *(_QWORD *)(a1 + 48);
  v18[0] = 256;
  v19 = 2;
  v20 = v5;
  v21 = v9;
  v22 = 1;
  v23 = v10;
  v24 = 1;
  v25 = v3;
  v26 = v13;
  v27 = 1;
  v29 = 0;
  v28 = 0;
  v30 = &unk_1C868F0BF;
  v31 = 0;
  sub_1C4D6E95C(*(llvm::raw_ostream **)(a1 + 32), "Start", 5uLL, (uint64_t)v18);
  llvm::Module::print(a2, *(llvm::raw_ostream **)(v4 - 8), 0, 0, 1);
  sub_1C4D6E95C(*(llvm::raw_ostream **)(v4 - 8), "End", 3uLL, (uint64_t)v18);
  v14 = *(llvm::raw_ostream **)(v4 - 8);
  v15 = (const char *)*((_QWORD *)v14 + 4);
  v16 = (const char *)*((_QWORD *)v14 + 2);
  if (v15 != v16)
  {
    *((_QWORD *)v14 + 4) = v16;
    llvm::raw_ostream::flush_tied_then_write(v14, v16, v15 - v16);
  }
  return 0;
}

llvm::raw_ostream *sub_1C4D77850(uint64_t a1, const char *a2, size_t a3)
{
  return llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 64), a2, a3);
}

uint64_t sub_1C4D77858(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 64);
  return (*(uint64_t (**)(_QWORD *))(*v1 + 80))(v1) + v1[4] - v1[2];
}

uint64_t sub_1C4D77894(uint64_t a1, __int128 *a2, int a3, int a4, char a5, char a6, __int128 *a7, uint64_t a8, __int128 *a9, __int128 *a10, int a11, uint64_t a12)
{
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  _BYTE *v17;
  __int128 v18;
  __int128 v19;

  v14 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v14;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 24) = a3;
  *(_DWORD *)(a1 + 28) = a4;
  *(_BYTE *)(a1 + 32) = a5;
  *(_BYTE *)(a1 + 33) = a6;
  v15 = a1 + 40;
  if (*((char *)a7 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)v15, *(void **)a7, *((_QWORD *)a7 + 1));
  }
  else
  {
    v16 = *a7;
    *(_QWORD *)(v15 + 16) = *((_QWORD *)a7 + 2);
    *(_OWORD *)v15 = v16;
  }
  *(_QWORD *)(a1 + 64) = a8;
  v17 = (_BYTE *)(a1 + 72);
  if (*((char *)a9 + 23) < 0)
  {
    sub_1C47EBC30(v17, *(void **)a9, *((_QWORD *)a9 + 1));
  }
  else
  {
    v18 = *a9;
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a9 + 2);
    *(_OWORD *)v17 = v18;
  }
  v19 = *a10;
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a10 + 2);
  *(_OWORD *)(a1 + 96) = v19;
  *((_QWORD *)a10 + 1) = 0;
  *((_QWORD *)a10 + 2) = 0;
  *(_QWORD *)a10 = 0;
  *(_DWORD *)(a1 + 120) = a11;
  *(_QWORD *)(a1 + 128) = a12;
  return a1;
}

uint64_t sub_1C4D7796C(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void **sub_1C4D779CC(void **this)
{
  const char *v2;
  const char *v3;
  uint64_t v4;
  void *v6;

  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  *this = &unk_1E8133330;
  v2 = (const char *)this[4];
  v3 = (const char *)this[2];
  v4 = v2 - v3;
  if (v2 != v3)
  {
    this[4] = (void *)v3;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)this, v3, v4);
  }
  *this = off_1E81A6E70;
  if (*((_DWORD *)this + 14) == 1)
  {
    v6 = this[2];
    if (v6)
      MEMORY[0x1CAA32F9C](v6, 0x1000C8077774924, v4);
  }
  return this;
}

char *llvm::AGX3::getISAVersion(llvm::AGX3 *this, const llvm::MCSubtargetInfo *a2)
{
  int v2;
  _QWORD *v3;
  void (**v4)(_QWORD *);
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E8131718;
  v6[1] = this;
  v7 = v6;
  v2 = sub_1C4C0B384(v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = (void (**)(_QWORD *))(v6[0] + 32);
    v3 = v6;
  }
  else
  {
    if (!v7)
      return off_1E81333A0[v2];
    v4 = (void (**)(_QWORD *))(*v7 + 40);
  }
  (*v4)(v3);
  return off_1E81333A0[v2];
}

void llvm::AGX::AGCReplay::createFromAGCIR(llvm::AGX::AGCReplay *this@<X0>, uint64_t *a2@<X8>)
{
  llvm::AGX::AGCReplay *v3;
  uint64_t NamedMetadata;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  size_t v22;
  const void *v23;
  unint64_t v24;
  uint64_t v25;
  char **p_dst;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int v42;
  int v43;
  char v45;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  int v55;
  BOOL v57;
  char v58;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  size_t v68;
  const void *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char **v73;
  char v74;
  uint64_t v77;
  unint64_t *v78;
  size_t v79;
  const void *v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  char **v84;
  char v85;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  int v102;
  int v103;
  uint64_t v105;
  uint64_t v106;
  unint64_t *v107;
  size_t v108;
  const void *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char **v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  BOOL v120;
  int v121;
  int v122;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  unint64_t v136;
  unint64_t v137;
  int v138;
  int v139;
  int v140;
  unint64_t v142;
  unint64_t v143;
  int v144;
  unsigned int v145;
  BOOL v146;
  int v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  int v151;
  int v152;
  int v153;
  char v155;
  unint64_t v156;
  llvm::raw_ostream *v157;
  void *v158;
  const char *v159;
  char *v160;
  const char *v161;
  char v162;
  int v163;
  const char *v164;
  size_t v165;
  size_t v166;
  llvm::raw_ostream *v167;
  uint64_t v168;
  char *v169;
  int v170;
  char *v171;
  char *v172;
  char *v173;
  llvm::raw_ostream *v174;
  void *v175;
  llvm::raw_ostream *v176;
  void *v177;
  const char *v178;
  size_t v179;
  llvm *PICLevel;
  int v181;
  void *v182;
  unsigned int v183;
  unsigned __int8 v184;
  unsigned __int8 v185;
  unsigned __int8 v186;
  unsigned int v187;
  void *v188;
  void *v189;
  llvm::raw_ostream *v190;
  void *v191;
  const char *v192;
  size_t v193;
  void *v194;
  void *v195;
  llvm::raw_ostream *v196;
  void *v197;
  int v198;
  _OWORD *v199;
  void *v200;
  uint64_t v201;
  llvm::raw_ostream *v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  const char *v209;
  unint64_t v210;
  void *v211;
  BOOL v212;
  uint64_t v213;
  uint64_t v214;
  unsigned __int8 v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  llvm::Module *v219;
  char v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unsigned int v225;
  char v226;
  char v227;
  char v228;
  char v229;
  char *v230;
  char *v231;
  uint64_t *v232;
  char *__p;
  char *__src;
  int v235;
  void *v236[2];
  uint64_t v237;
  _DWORD v238[2];
  _DWORD v239[2];
  char *__dst;
  __int128 v241;
  __int16 v242;
  char *v243;
  _BYTE v244[15];
  char v245;
  __int128 v246;
  uint64_t v247;
  void *v248;
  _BYTE v249[15];
  char v250;
  _QWORD v251[2];
  _QWORD v252[5];

  v3 = this;
  v252[2] = *MEMORY[0x1E0C80C00];
  __dst = "agxcompiler.config";
  v242 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata((uint64_t)this, (uint64_t)&__dst);
  if (!NamedMetadata)
  {
    v157 = (llvm::raw_ostream *)llvm::errs(0);
    v158 = (void *)*((_QWORD *)v157 + 4);
    if (*((_QWORD *)v157 + 3) - (_QWORD)v158 > 0x3BuLL)
    {
      qmemcpy(v158, "Can't load the AGC, agxcompiler.config metadata missing in '", 60);
      *((_QWORD *)v157 + 4) += 60;
    }
    else
    {
      v157 = llvm::raw_ostream::write(v157, "Can't load the AGC, agxcompiler.config metadata missing in '", 0x3CuLL);
    }
    v161 = (const char *)*((_QWORD *)v3 + 21);
    v160 = (char *)v3 + 168;
    v159 = v161;
    v162 = v160[23];
    v163 = v162;
    if (v162 >= 0)
      v164 = v160;
    else
      v164 = v159;
    v165 = v162 & 0x7F;
    if (v163 >= 0)
      v166 = v165;
    else
      v166 = *((_QWORD *)v160 + 1);
    v167 = llvm::raw_ostream::write(v157, v164, v166);
    v168 = *((_QWORD *)v167 + 4);
    if ((unint64_t)(*((_QWORD *)v167 + 3) - v168) > 2)
    {
      *(_BYTE *)(v168 + 2) = 10;
      *(_WORD *)v168 = 11815;
      *((_QWORD *)v167 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v167, "'.\n", 3uLL);
    }
    *a2 = 0;
    return;
  }
  v6 = NamedMetadata;
  v7 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
  if (!(_DWORD)v7)
  {
    PICLevel = (llvm *)llvm::Module::getPICLevel(v3);
    v169 = 0;
    LODWORD(v11) = 0;
    v170 = 0;
    v171 = 0;
    v172 = 0;
    LODWORD(v9) = 0;
    v173 = 0;
LABEL_296:
    v174 = (llvm::raw_ostream *)llvm::errs(PICLevel);
    v175 = (void *)*((_QWORD *)v174 + 4);
    if (*((_QWORD *)v174 + 3) - (_QWORD)v175 > 0x19uLL)
    {
      qmemcpy(v175, "Error: missing TargetGPU.\n", 26);
      *((_QWORD *)v174 + 4) += 26;
    }
    else
    {
      llvm::raw_ostream::write(v174, "Error: missing TargetGPU.\n", 0x1AuLL);
    }
    LODWORD(v10) = 0;
    goto LABEL_339;
  }
  v8 = 0;
  v223 = 0;
  v224 = 0;
  v217 = 0;
  v218 = 0;
  v213 = 0;
  v214 = 0;
  v221 = 0;
  v222 = 0;
  v230 = 0;
  v231 = 0;
  v9 = 0;
  v10 = 0;
  v212 = 0;
  v220 = 0;
  v215 = 0;
  LODWORD(v216) = 0;
  __p = 0;
  __src = 0;
  v235 = 0;
  v11 = 0;
  v219 = v3;
  v12 = 8 * v7;
  v225 = *(_DWORD *)(*(_QWORD *)(NamedMetadata + 48) + 8);
  v232 = a2;
  while (2)
  {
    v13 = *(_QWORD *)(**(_QWORD **)(v6 + 48) + v8);
    v14 = (_QWORD *)(v13 - 8 * *(unsigned int *)(v13 + 8));
    if (*(_BYTE *)*v14)
    {
      v176 = (llvm::raw_ostream *)llvm::errs((llvm *)NamedMetadata);
      v177 = (void *)*((_QWORD *)v176 + 4);
      if (*((_QWORD *)v176 + 3) - (_QWORD)v177 <= 0x21uLL)
      {
        v178 = "Error: unamed metadata parameter.\n";
        v179 = 34;
        goto LABEL_337;
      }
      qmemcpy(v177, "Error: unamed metadata parameter.\n", 34);
      v201 = *((_QWORD *)v176 + 4) + 34;
      goto LABEL_404;
    }
    v15 = *(uint64_t **)(*v14 + 8);
    v17 = *v15;
    NamedMetadata = (uint64_t)(v15 + 3);
    v16 = v17;
    switch(v17)
    {
      case 7:
        if (*(_DWORD *)NamedMetadata != 1215588679 || *(_DWORD *)(NamedMetadata + 3) != 1752392008)
          goto LABEL_281;
        v19 = v14[1];
        if (*(_BYTE *)v19)
          goto LABEL_354;
        v20 = v10;
        v21 = *(unint64_t **)(v19 + 8);
        v24 = *v21;
        v23 = v21 + 3;
        v22 = v24;
        if (v24 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_414;
        v25 = v9;
        if (v22 >= 0x17)
        {
          v125 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v22 | 7) != 0x17)
            v125 = v22 | 7;
          v126 = v125 + 1;
          p_dst = (char **)operator new(v125 + 1);
          *(_QWORD *)&v241 = v22;
          *((_QWORD *)&v241 + 1) = v126 | 0x8000000000000000;
          __dst = (char *)p_dst;
          v27 = v227;
        }
        else
        {
          HIBYTE(v241) = v22;
          p_dst = &__dst;
          v27 = v227;
          if (!v22)
            goto LABEL_190;
        }
        NamedMetadata = (uint64_t)memmove(p_dst, v23, v22);
LABEL_190:
        a2 = v232;
        *((_BYTE *)p_dst + v22) = 0;
        if (v235 && v27 < 0)
          operator delete(__p);
        __p = __dst;
        v227 = HIBYTE(v241);
        v235 = 1;
        v9 = v25;
        goto LABEL_209;
      case 8:
      case 10:
      case 11:
      case 14:
      case 17:
      case 19:
      case 20:
      case 22:
      case 23:
      case 25:
        goto LABEL_281;
      case 9:
        if (*(_QWORD *)NamedMetadata == 0x5047746567726154 && *(_BYTE *)(NamedMetadata + 8) == 85)
        {
          v105 = v14[1];
          if (*(_BYTE *)v105)
          {
LABEL_354:
            v196 = (llvm::raw_ostream *)llvm::errs((llvm *)NamedMetadata);
            v197 = (void *)*((_QWORD *)v196 + 4);
            LOBYTE(v3) = v226;
            if (*((_QWORD *)v196 + 3) - (_QWORD)v197 > 0x1CuLL)
            {
              qmemcpy(v197, "Error: string meta expected.\n", 29);
              *((_QWORD *)v196 + 4) += 29;
            }
            else
            {
              llvm::raw_ostream::write(v196, "Error: string meta expected.\n", 0x1DuLL);
            }
            v172 = v230;
            v173 = v231;
            v171 = __p;
            v169 = __src;
            v170 = v235;
            goto LABEL_339;
          }
          v106 = v10;
          v107 = *(unint64_t **)(v105 + 8);
          v110 = *v107;
          v109 = v107 + 3;
          v108 = v110;
          if (v110 > 0x7FFFFFFFFFFFFFF7)
LABEL_414:
            abort();
          v111 = v11;
          v112 = v9;
          if (v108 >= 0x17)
          {
            v131 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v108 | 7) != 0x17)
              v131 = v108 | 7;
            v132 = v131 + 1;
            v113 = (char **)operator new(v131 + 1);
            *(_QWORD *)&v241 = v108;
            *((_QWORD *)&v241 + 1) = v132 | 0x8000000000000000;
            __dst = (char *)v113;
          }
          else
          {
            HIBYTE(v241) = v108;
            v113 = &__dst;
            if (!v108)
              goto LABEL_215;
          }
          NamedMetadata = (uint64_t)memmove(v113, v109, v108);
LABEL_215:
          a2 = v232;
          *((_BYTE *)v113 + v108) = 0;
          if ((_DWORD)v106)
          {
            v10 = v106;
            v9 = v112;
            if (v229 < 0)
              operator delete(v230);
            v11 = v111;
          }
          else
          {
            v10 = 1;
            v9 = v112;
            v11 = v111;
          }
          v230 = __dst;
          v210 = v241;
          v239[0] = DWORD2(v241);
          *(_DWORD *)((char *)v239 + 3) = *(_DWORD *)((char *)&v241 + 11);
          v229 = HIBYTE(v241);
          goto LABEL_281;
        }
        if (*(_QWORD *)NamedMetadata == 0x704F656C62616E45 && *(_BYTE *)(NamedMetadata + 8) == 116)
        {
          v34 = v14[1];
          if (*(_BYTE *)v34 != 1)
            goto LABEL_331;
          v35 = *(_QWORD *)(v34 + 128);
          if (*(_BYTE *)(v35 + 16) != 16)
            goto LABEL_331;
          v36 = (_QWORD *)(v35 + 24);
          if (*(_DWORD *)(v35 + 32) >= 0x41u)
            v36 = (_QWORD *)*v36;
          LOBYTE(v213) = *v36 == 1;
          LODWORD(v217) = 1;
        }
        goto LABEL_281;
      case 12:
        if (*(_QWORD *)NamedMetadata != 0x656E696C65706950 || *(_DWORD *)(NamedMetadata + 8) != 1701869908)
          goto LABEL_281;
        v38 = v14[1];
        if (*(_BYTE *)v38)
          goto LABEL_335;
        v39 = *(uint64_t **)(v38 + 8);
        v40 = *v39;
        if (*v39 == 6)
        {
          v133 = *((_DWORD *)v39 + 6);
          v134 = *((unsigned __int16 *)v39 + 14);
          if (v133 != 1986622020 || v134 != 29285)
          {
LABEL_227:
            BYTE4(v224) = 0;
            BYTE4(v221) = 0;
            goto LABEL_281;
          }
          v45 = 3;
        }
        else
        {
          if (v40 == 14)
          {
            v136 = 0x44796E616D69634CLL;
            v137 = bswap64(v39[3]);
            if (v137 == 0x44796E616D69634CLL
              && (v136 = 0x634C696272617279,
                  v137 = bswap64(*(uint64_t *)((char *)v39 + 30)),
                  v137 == 0x634C696272617279))
            {
              v138 = 0;
            }
            else if (v137 < v136)
            {
              v138 = -1;
            }
            else
            {
              v138 = 1;
            }
            BYTE4(v224) = v138 == 0;
            v155 = 4 * (v138 == 0);
            goto LABEL_275;
          }
          if (v40 != 7)
            goto LABEL_227;
          if (*((_DWORD *)v39 + 6) == 1886220099 && *(_DWORD *)((char *)v39 + 27) == 1702131056)
          {
            v155 = 1;
            BYTE4(v224) = 1;
LABEL_275:
            BYTE4(v221) = v155;
            goto LABEL_281;
          }
          v42 = *((_DWORD *)v39 + 6);
          v43 = *(_DWORD *)((char *)v39 + 27);
          if (v42 != 1885434439 || v43 != 1667852400)
            goto LABEL_227;
          v45 = 2;
        }
        BYTE4(v221) = v45;
        BYTE4(v224) = 1;
        goto LABEL_281;
      case 13:
        if (*(_QWORD *)NamedMetadata != 0x6F4C656C62616E45 || *(_QWORD *)(NamedMetadata + 5) != 0x676E6967676F4C65)
          goto LABEL_281;
        v47 = v14[1];
        if (*(_BYTE *)v47 != 1)
          goto LABEL_331;
        v48 = *(_QWORD *)(v47 + 128);
        if (*(_BYTE *)(v48 + 16) != 16)
          goto LABEL_331;
        v49 = (_QWORD *)(v48 + 24);
        if (*(_DWORD *)(v48 + 32) >= 0x41u)
          v49 = (_QWORD *)*v49;
        LOBYTE(v218) = *v49 == 1;
        HIDWORD(v222) = 1;
        goto LABEL_281;
      case 15:
        if (*(_QWORD *)NamedMetadata != 0x655374757074754FLL || *(_QWORD *)(NamedMetadata + 7) != 0x6E6F697463656C65)
          goto LABEL_281;
        v51 = v14[1];
        if (*(_BYTE *)v51)
          goto LABEL_335;
        v52 = *(uint64_t **)(v51 + 8);
        v53 = *v52;
        if (*v52 == 6)
        {
          v139 = *((_DWORD *)v52 + 6);
          v140 = *((unsigned __int16 *)v52 + 14);
          if (v139 != 1634625858 || v140 != 31090)
          {
LABEL_235:
            BYTE4(v223) = 0;
            LOBYTE(v224) = 0;
            goto LABEL_281;
          }
          BYTE4(v223) = 1;
          LOBYTE(v224) = 1;
        }
        else
        {
          if (v53 == 16)
          {
            v142 = 0x5465787475616C41;
            v143 = bswap64(v52[3]);
            if (v143 == 0x5465787475616C41
              && (v142 = 0x6E6442696E617279, v143 = bswap64(v52[4]), v143 == 0x6E6442696E617279))
            {
              v144 = 0;
            }
            else if (v143 < v142)
            {
              v144 = -1;
            }
            else
            {
              v144 = 1;
            }
            v57 = v144 == 0;
            if (v144)
              v58 = 0;
            else
              v58 = 3;
          }
          else
          {
            if (v53 != 7)
              goto LABEL_235;
            v54 = *((_DWORD *)v52 + 6);
            v55 = *(_DWORD *)((char *)v52 + 27);
            if (v54 != 1954047316 || v55 != 1818326388)
              goto LABEL_235;
            v57 = 1;
            v58 = 2;
          }
          BYTE4(v223) = v57;
          LOBYTE(v224) = v58;
        }
        goto LABEL_281;
      case 16:
        if (*(_QWORD *)NamedMetadata != 0x2E74736575716552 || *(_QWORD *)(NamedMetadata + 8) != 0x4449726564616853)
          goto LABEL_281;
        v60 = v14[1];
        if (*(_BYTE *)v60 != 1)
          goto LABEL_331;
        v61 = *(_QWORD *)(v60 + 128);
        if (*(_BYTE *)(v61 + 16) != 16)
          goto LABEL_331;
        v62 = (_QWORD *)(v61 + 24);
        if (*(_DWORD *)(v61 + 32) >= 0x41u)
          v62 = (_QWORD *)*v62;
        HIDWORD(v218) = *(_DWORD *)v62;
        LODWORD(v222) = 1;
        goto LABEL_281;
      case 18:
        if (*(_QWORD *)NamedMetadata != 0x2E74736575716552
          || *(_QWORD *)(NamedMetadata + 8) != 0x7954726564616853
          || *(_WORD *)(NamedMetadata + 16) != 25968)
        {
          goto LABEL_281;
        }
        v65 = v14[1];
        if (*(_BYTE *)v65)
          goto LABEL_354;
        v66 = v10;
        v67 = *(unint64_t **)(v65 + 8);
        v70 = *v67;
        v69 = v67 + 3;
        v68 = v70;
        if (v70 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_414;
        v71 = v11;
        v72 = v9;
        if (v68 >= 0x17)
        {
          v127 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v68 | 7) != 0x17)
            v127 = v68 | 7;
          v128 = v127 + 1;
          v73 = (char **)operator new(v127 + 1);
          *(_QWORD *)&v241 = v68;
          *((_QWORD *)&v241 + 1) = v128 | 0x8000000000000000;
          __dst = (char *)v73;
          v74 = v228;
        }
        else
        {
          HIBYTE(v241) = v68;
          v73 = &__dst;
          v74 = v228;
          if (!v68)
            goto LABEL_198;
        }
        NamedMetadata = (uint64_t)memmove(v73, v69, v68);
LABEL_198:
        a2 = v232;
        *((_BYTE *)v73 + v68) = 0;
        if ((_DWORD)v72)
        {
          v9 = v72;
          v10 = v66;
          v11 = v71;
          if (v74 < 0)
            operator delete(v231);
        }
        else
        {
          v9 = 1;
          v10 = v66;
          v11 = v71;
        }
        v231 = __dst;
        v252[0] = v241;
        *(_QWORD *)((char *)v252 + 7) = *(_QWORD *)((char *)&v241 + 7);
        v228 = HIBYTE(v241);
        goto LABEL_281;
      case 21:
        if (*(_QWORD *)NamedMetadata != 0x525458455F584741
          || *(_QWORD *)(NamedMetadata + 8) != 0x415F4D564C4C5F41
          || *(_QWORD *)(NamedMetadata + 13) != 0x4249525454415F4DLL)
        {
          goto LABEL_281;
        }
        v77 = v14[1];
        if (*(_BYTE *)v77)
          goto LABEL_354;
        v20 = v10;
        v78 = *(unint64_t **)(v77 + 8);
        v81 = *v78;
        v80 = v78 + 3;
        v79 = v81;
        if (v81 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_414;
        v82 = v11;
        v83 = v9;
        if (v79 >= 0x17)
        {
          v129 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v79 | 7) != 0x17)
            v129 = v79 | 7;
          v130 = v129 + 1;
          v84 = (char **)operator new(v129 + 1);
          *(_QWORD *)&v241 = v79;
          *((_QWORD *)&v241 + 1) = v130 | 0x8000000000000000;
          __dst = (char *)v84;
          v85 = v226;
        }
        else
        {
          HIBYTE(v241) = v79;
          v84 = &__dst;
          v85 = v226;
          if (!v79)
            goto LABEL_205;
        }
        NamedMetadata = (uint64_t)memmove(v84, v80, v79);
LABEL_205:
        a2 = v232;
        *((_BYTE *)v84 + v79) = 0;
        if (v82 && v85 < 0)
          operator delete(__src);
        __src = __dst;
        v211 = (void *)v241;
        v238[0] = DWORD2(v241);
        *(_DWORD *)((char *)v238 + 3) = *(_DWORD *)((char *)&v241 + 11);
        v226 = HIBYTE(v241);
        v9 = v83;
        v11 = 1;
LABEL_209:
        v10 = v20;
        goto LABEL_281;
      case 24:
        if (*(_QWORD *)NamedMetadata != 0x2E74736575716552
          || *(_QWORD *)(NamedMetadata + 8) != 0x2E736E6F6974704FLL
          || *(_QWORD *)(NamedMetadata + 16) != 0x6C65734974736146)
        {
          if (*(_QWORD *)NamedMetadata == 0x2E74736575716552
            && *(_QWORD *)(NamedMetadata + 8) == 0x2E736E6F6974704FLL
            && *(_QWORD *)(NamedMetadata + 16) == 0x6874614D74736146)
          {
            v90 = v14[1];
            if (*(_BYTE *)v90 != 1)
              goto LABEL_331;
            v91 = *(_QWORD *)(v90 + 128);
            if (*(_BYTE *)(v91 + 16) != 16)
              goto LABEL_331;
            v92 = (_QWORD *)(v91 + 24);
            if (*(_DWORD *)(v91 + 32) >= 0x41u)
              v92 = (_QWORD *)*v92;
            v212 = *v92 != 0;
            HIDWORD(v214) = 1;
          }
          goto LABEL_281;
        }
        v114 = v14[1];
        if (*(_BYTE *)v114 == 1)
        {
          v115 = *(_QWORD *)(v114 + 128);
          if (*(_BYTE *)(v115 + 16) == 16)
          {
            v116 = (_QWORD *)(v115 + 24);
            if (*(_DWORD *)(v115 + 32) >= 0x41u)
              v116 = (_QWORD *)*v116;
            BYTE4(v217) = *v116 != 0;
            LODWORD(v223) = 1;
LABEL_281:
            v8 += 8;
            if (v12 == v8)
            {
              PICLevel = (llvm *)llvm::Module::getPICLevel(v219);
              v181 = (int)PICLevel;
              if ((_DWORD)v11)
              {
                v173 = v231;
                if (!byte_1ED7EEEF8 || !word_1ED7EEE80)
                {
                  PICLevel = (llvm *)llvm::errs(PICLevel);
                  v188 = (void *)*((_QWORD *)PICLevel + 4);
                  if (*((_QWORD *)PICLevel + 3) - (_QWORD)v188 > 0x49uLL)
                  {
                    qmemcpy(v188, "!! AGX_EXTRA_LLVM_ATTRIB mismatch !! (-override-extra-attrib to override)\n", 74);
                    *((_QWORD *)PICLevel + 4) += 74;
                  }
                  else
                  {
                    PICLevel = llvm::raw_ostream::write(PICLevel, "!! AGX_EXTRA_LLVM_ATTRIB mismatch !! (-override-extra-attrib to override)\n", 0x4AuLL);
                  }
                  v182 = v211;
                  v183 = v225;
                  if (!byte_1ED7EEEF8)
                  {
                    *a2 = 0;
                    LODWORD(v11) = 1;
                    v172 = v230;
                    v171 = __p;
                    v169 = __src;
                    v198 = v235;
                    goto LABEL_375;
                  }
                  LODWORD(v3) = 1;
                  if ((_DWORD)v10)
                  {
LABEL_307:
                    if (BYTE4(v224))
                    {
                      if ((_DWORD)v217)
                      {
                        if (BYTE4(v223))
                          v184 = v224;
                        else
                          v184 = 1;
                        if ((_DWORD)v223)
                        {
                          if (HIDWORD(v214))
                          {
                            if (HIDWORD(v222))
                            {
                              if ((_DWORD)v222)
                              {
                                if ((_DWORD)v9)
                                {
                                  if (v220)
                                    v185 = v221;
                                  else
                                    v185 = 1;
                                  if (BYTE4(v213))
                                    v186 = v214;
                                  else
                                    v186 = 0;
                                  v187 = v183;
                                  if ((_DWORD)v11)
                                  {
                                    if (v226 < 0)
                                    {
                                      sub_1C47EBC30(v236, __src, (unint64_t)v182);
                                    }
                                    else
                                    {
                                      v236[0] = __src;
                                      v236[1] = v182;
                                      LODWORD(v237) = v238[0];
                                      *(_DWORD *)((char *)&v237 + 3) = *(_DWORD *)((char *)v238 + 3);
                                      HIBYTE(v237) = v226;
                                    }
                                  }
                                  else
                                  {
                                    v236[0] = 0;
                                    v236[1] = 0;
                                    v237 = 0;
                                  }
                                  v204 = *(_QWORD *)&v187 & 0xFFFFFFLL;
                                  v205 = operator new();
                                  if (v229 < 0)
                                  {
                                    sub_1C47EBC30(&__dst, v230, v210);
                                  }
                                  else
                                  {
                                    __dst = v230;
                                    *(_QWORD *)&v241 = v210;
                                    DWORD2(v241) = v239[0];
                                    *(_DWORD *)((char *)&v241 + 11) = *(_DWORD *)((char *)v239 + 3);
                                    HIBYTE(v241) = v229;
                                  }
                                  v248 = 0;
                                  *(_QWORD *)v249 = v251[0];
                                  *(_QWORD *)&v249[7] = *(_QWORD *)((char *)v251 + 7);
                                  v250 = 0;
                                  v251[0] = 0;
                                  *(_QWORD *)((char *)v251 + 7) = 0;
                                  v206 = ((unint64_t)v215 << 32) | (v204 << 40);
                                  if (!(_DWORD)v216)
                                    v206 = 0;
                                  v207 = (unint64_t)v186 << 24;
                                  if (v181)
                                    v207 = 0x1000000;
                                  v246 = *(_OWORD *)v236;
                                  v247 = v237;
                                  v236[0] = 0;
                                  v236[1] = 0;
                                  v237 = 0;
                                  *(_QWORD *)&v244[7] = *(_QWORD *)((char *)v252 + 7);
                                  v243 = v231;
                                  *(_QWORD *)v244 = v252[0];
                                  v245 = v228;
                                  v252[0] = 0;
                                  *(_QWORD *)((char *)v252 + 7) = 0;
                                  sub_1C4D77894(v205, (__int128 *)&__dst, BYTE4(v221), v184, v213 != 0, v218 != 0, (__int128 *)&v248, (v206 | v207) & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)v185 << 16) | ((unint64_t)(BYTE4(v217) != 0) << 8) | v212, &v246, (__int128 *)&v243, SHIDWORD(v218), 0);
                                  *a2 = v205;
                                  if (v245 < 0)
                                    operator delete(v243);
                                  v172 = v230;
                                  v171 = __p;
                                  v169 = __src;
                                  v198 = v235;
                                  if (SHIBYTE(v247) < 0)
                                    operator delete((void *)v246);
                                  if (v250 < 0)
                                    operator delete(v248);
                                  if (SHIBYTE(v241) < 0)
                                    operator delete(__dst);
                                  if (SHIBYTE(v237) < 0)
                                    operator delete(v236[0]);
                                  v173 = 0;
                                  v228 = 0;
                                  LODWORD(v9) = 1;
                                  goto LABEL_374;
                                }
                                v202 = (llvm::raw_ostream *)llvm::errs(PICLevel);
                                v203 = (void *)*((_QWORD *)v202 + 4);
                                if (*((_QWORD *)v202 + 3) - (_QWORD)v203 > 0x1AuLL)
                                {
                                  qmemcpy(v203, "Error: missing ShaderType.\n", 27);
                                  *((_QWORD *)v202 + 4) += 27;
                                }
                                else
                                {
                                  llvm::raw_ostream::write(v202, "Error: missing ShaderType.\n", 0x1BuLL);
                                }
                                v172 = v230;
                                v171 = __p;
                                v169 = __src;
                                v198 = v235;
                                LODWORD(v9) = 0;
LABEL_373:
                                *a2 = 0;
LABEL_374:
                                LODWORD(v10) = 1;
                                LODWORD(v11) = (_DWORD)v3;
LABEL_375:
                                LOBYTE(v3) = v226;
                                if (v198)
                                  goto LABEL_340;
                                goto LABEL_342;
                              }
                              v190 = (llvm::raw_ostream *)llvm::errs(PICLevel);
                              v199 = (_OWORD *)*((_QWORD *)v190 + 4);
                              if (*((_QWORD *)v190 + 3) - (_QWORD)v199 <= 0x18uLL)
                              {
                                v192 = "Error: missing ShaderID.\n";
                                goto LABEL_370;
                              }
                              v209 = "Error: missing ShaderID.\n";
                              goto LABEL_411;
                            }
                            v190 = (llvm::raw_ostream *)llvm::errs(PICLevel);
                            v200 = (void *)*((_QWORD *)v190 + 4);
                            if (*((_QWORD *)v190 + 3) - (_QWORD)v200 <= 0x1DuLL)
                            {
                              v192 = "Error: missing EnableLogging.\n";
                              v193 = 30;
                              goto LABEL_371;
                            }
                            qmemcpy(v200, "Error: missing EnableLogging.\n", 30);
                            v208 = *((_QWORD *)v190 + 4) + 30;
LABEL_412:
                            *((_QWORD *)v190 + 4) = v208;
                            goto LABEL_372;
                          }
                          v190 = (llvm::raw_ostream *)llvm::errs(PICLevel);
                          v199 = (_OWORD *)*((_QWORD *)v190 + 4);
                          if (*((_QWORD *)v190 + 3) - (_QWORD)v199 <= 0x18uLL)
                          {
                            v192 = "Error: missing FastMath.\n";
                            goto LABEL_370;
                          }
                          v209 = "Error: missing FastMath.\n";
                        }
                        else
                        {
                          v190 = (llvm::raw_ostream *)llvm::errs(PICLevel);
                          v199 = (_OWORD *)*((_QWORD *)v190 + 4);
                          if (*((_QWORD *)v190 + 3) - (_QWORD)v199 <= 0x18uLL)
                          {
                            v192 = "Error: missing FastIsel.\n";
LABEL_370:
                            v193 = 25;
                            goto LABEL_371;
                          }
                          v209 = "Error: missing FastIsel.\n";
                        }
LABEL_411:
                        *v199 = *(_OWORD *)v209;
                        *(_OWORD *)((char *)v199 + 9) = *(_OWORD *)(v209 + 9);
                        v208 = *((_QWORD *)v190 + 4) + 25;
                        goto LABEL_412;
                      }
                      v190 = (llvm::raw_ostream *)llvm::errs(PICLevel);
                      v195 = (void *)*((_QWORD *)v190 + 4);
                      if (*((_QWORD *)v190 + 3) - (_QWORD)v195 > 0x19uLL)
                      {
                        qmemcpy(v195, "Error: missing EnableOpt.\n", 26);
                        v208 = *((_QWORD *)v190 + 4) + 26;
                        goto LABEL_412;
                      }
                      v192 = "Error: missing EnableOpt.\n";
                      v193 = 26;
                    }
                    else
                    {
                      v190 = (llvm::raw_ostream *)llvm::errs(PICLevel);
                      v191 = (void *)*((_QWORD *)v190 + 4);
                      if (*((_QWORD *)v190 + 3) - (_QWORD)v191 > 0x1CuLL)
                      {
                        qmemcpy(v191, "Error: missing PipelineType.\n", 29);
                        v208 = *((_QWORD *)v190 + 4) + 29;
                        goto LABEL_412;
                      }
                      v192 = "Error: missing PipelineType.\n";
                      v193 = 29;
                    }
LABEL_371:
                    llvm::raw_ostream::write(v190, v192, v193);
LABEL_372:
                    v172 = v230;
                    v171 = __p;
                    v169 = __src;
                    v198 = v235;
                    goto LABEL_373;
                  }
                  goto LABEL_330;
                }
                LODWORD(v3) = 1;
              }
              else
              {
                LODWORD(v3) = 0;
                v173 = v231;
              }
              v182 = v211;
              v183 = v225;
              if ((_DWORD)v10)
                goto LABEL_307;
LABEL_330:
              LODWORD(v11) = (_DWORD)v3;
              v172 = v230;
              v171 = __p;
              v169 = __src;
              v170 = v235;
              LOBYTE(v3) = v226;
              goto LABEL_296;
            }
            continue;
          }
        }
LABEL_331:
        v176 = (llvm::raw_ostream *)llvm::errs((llvm *)NamedMetadata);
        v189 = (void *)*((_QWORD *)v176 + 4);
        if (*((_QWORD *)v176 + 3) - (_QWORD)v189 <= 0x19uLL)
        {
          v178 = "Error: int meta expected.\n";
          v179 = 26;
          goto LABEL_337;
        }
        qmemcpy(v189, "Error: int meta expected.\n", 26);
        v201 = *((_QWORD *)v176 + 4) + 26;
LABEL_404:
        *((_QWORD *)v176 + 4) = v201;
LABEL_338:
        v172 = v230;
        v173 = v231;
        v171 = __p;
        v169 = __src;
        v170 = v235;
        LOBYTE(v3) = v226;
LABEL_339:
        *a2 = 0;
        if (v170)
        {
LABEL_340:
          if (v227 < 0)
            operator delete(v171);
        }
LABEL_342:
        if ((_DWORD)v11 && (v3 & 0x80) != 0)
          operator delete(v169);
        if ((_DWORD)v9 && v228 < 0)
          operator delete(v173);
        if ((_DWORD)v10)
        {
          if (v229 < 0)
            operator delete(v172);
        }
        return;
      case 26:
        if (*(_QWORD *)NamedMetadata == 0x2E74736575716552
          && *(_QWORD *)(NamedMetadata + 8) == 0x2E736E6F6974704FLL
          && *(_QWORD *)(NamedMetadata + 16) == 0x6172746E6F435046
          && *(_WORD *)(NamedMetadata + 24) == 29795)
        {
          v117 = v14[1];
          if (*(_BYTE *)v117)
          {
LABEL_335:
            v176 = (llvm::raw_ostream *)llvm::errs((llvm *)NamedMetadata);
            v194 = (void *)*((_QWORD *)v176 + 4);
            if (*((_QWORD *)v176 + 3) - (_QWORD)v194 > 0x1CuLL)
            {
              qmemcpy(v194, "Error: string meta expected.\n", 29);
              v201 = *((_QWORD *)v176 + 4) + 29;
              goto LABEL_404;
            }
            v178 = "Error: string meta expected.\n";
            v179 = 29;
LABEL_337:
            llvm::raw_ostream::write(v176, v178, v179);
            goto LABEL_338;
          }
          v118 = *(uint64_t **)(v117 + 8);
          v119 = *v118;
          if (*v118 == 4)
          {
            v145 = bswap32(*((_DWORD *)v118 + 6));
            v146 = v145 >= 0x46617374;
            v147 = v145 > 0x46617374;
            v148 = !v146;
            v120 = v147 == v148;
            v124 = 2 * (v147 == v148);
            goto LABEL_245;
          }
          if (v119 == 8)
          {
            if (v118[3] != 0x647261646E617453)
            {
LABEL_244:
              v120 = 0;
              v124 = 0;
              goto LABEL_245;
            }
            v220 = 1;
            LOBYTE(v221) = 1;
          }
          else
          {
            if (v119 != 6)
              goto LABEL_244;
            v120 = 0;
            v121 = *((_DWORD *)v118 + 6);
            v122 = *((unsigned __int16 *)v118 + 14);
            if (v121 != 1769108563 || v122 != 29795)
            {
              v124 = 0;
LABEL_245:
              v220 = v120;
              LOBYTE(v221) = v124;
              goto LABEL_281;
            }
            v220 = 1;
            LOBYTE(v221) = 0;
          }
        }
        else if (*(_QWORD *)NamedMetadata == 0x2E74736575716552
               && *(_QWORD *)(NamedMetadata + 8) == 0x2E736E6F6974704FLL
               && *(_QWORD *)(NamedMetadata + 16) == 0x646F4D636F6C6552
               && *(_WORD *)(NamedMetadata + 24) == 27749)
        {
          v99 = v14[1];
          if (*(_BYTE *)v99)
            goto LABEL_335;
          v100 = *(_QWORD *)(v99 + 8);
          if (*(_QWORD *)v100 == 3)
          {
            v152 = *(unsigned __int16 *)(v100 + 24);
            v153 = *(unsigned __int8 *)(v100 + 26);
            v101 = v152 == 18768 && v153 == 67;
          }
          else if (*(_QWORD *)v100 == 6)
          {
            v101 = 0;
            v102 = *(_DWORD *)(v100 + 24);
            v103 = *(unsigned __int16 *)(v100 + 28);
            if (v102 == 1952543827 && v103 == 25449)
            {
              BYTE4(v213) = 1;
              LOBYTE(v214) = 0;
              goto LABEL_281;
            }
          }
          else
          {
            v101 = 0;
          }
          BYTE4(v213) = v101;
          LOBYTE(v214) = v101;
        }
        goto LABEL_281;
      default:
        if (v16 != 35)
          goto LABEL_281;
        NamedMetadata = memcmp((const void *)NamedMetadata, "Request.Options.ForwardProgressMode", 0x23uLL);
        if ((_DWORD)NamedMetadata)
          goto LABEL_281;
        v28 = v14[1];
        if (*(_BYTE *)v28)
          goto LABEL_335;
        v29 = *(_QWORD *)(v28 + 8);
        if (*(_QWORD *)v29 == 17)
        {
          v149 = 0x53494D4447726F75;
          v150 = bswap64(*(_QWORD *)(v29 + 24));
          if (v150 == 0x53494D4447726F75
            && (v149 = 0x70506172616C6C65, v150 = bswap64(*(_QWORD *)(v29 + 32)), v150 == 0x70506172616C6C65))
          {
            v151 = *(unsigned __int8 *)(v29 + 40) - 108;
          }
          else if (v150 < v149)
          {
            v151 = -1;
          }
          else
          {
            v151 = 1;
          }
          v30 = v151 == 0;
          v31 = v30 << 32;
          goto LABEL_272;
        }
        if (*(_QWORD *)v29 != 4 || *(_DWORD *)(v29 + 24) != 1801545047)
        {
          v30 = 0;
          v31 = 0;
LABEL_272:
          v156 = v31 | v30;
          goto LABEL_273;
        }
        v156 = 0x100000000;
LABEL_273:
        v225 = v156 >> 8;
        v215 = v156;
        v216 = HIDWORD(v156);
        goto LABEL_281;
    }
  }
}

double llvm::AGX::AGCReplay::serializeRequestToIR(llvm::AGX::AGCReplay *this, llvm::AGX::CompileRequest *a2, llvm::TargetMachine *a3)
{
  uint64_t **v6;
  llvm::NamedMDNode *NamedMetadata;
  uint64_t inserted;
  uint64_t v9;
  uint64_t *v10;
  char v11;
  BOOL v12;
  unsigned __int8 *v13;
  size_t v14;
  size_t v15;
  unsigned __int8 *Impl;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 **v20;
  uint64_t *v21;
  uint64_t *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 **v27;
  llvm::raw_ostream *v28;
  void *v29;
  double result;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  llvm::AGX::AGCReplay *v36;
  size_t v37;
  llvm::AGX::AGCReplay *v38;
  size_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  char *v44;
  void (**v45)(char *);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 **v50;
  char *v51;
  size_t v52;
  _QWORD *v53;
  uint64_t *v54;
  unsigned __int8 *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  unsigned __int8 **v59;
  char *v60;
  size_t v61;
  _QWORD *v62;
  uint64_t *v63;
  unsigned __int8 *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  unsigned __int8 **v68;
  uint64_t *v69;
  const llvm::APInt *v70;
  uint64_t v71;
  uint64_t v72;
  llvm::ConstantInt *v73;
  unint64_t v74;
  unint64_t v75;
  llvm::Value *v76;
  llvm::ValueHandleBase *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  unsigned __int8 **v82;
  uint64_t *v83;
  const llvm::APInt *v84;
  uint64_t v85;
  uint64_t v86;
  llvm::ConstantInt *v87;
  unsigned int v88;
  unint64_t v89;
  llvm::Value *v90;
  llvm::ValueHandleBase *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned __int8 *v95;
  unsigned __int8 **v96;
  uint64_t v97;
  uint64_t *v98;
  const llvm::APInt *v99;
  uint64_t v100;
  uint64_t v101;
  llvm::ConstantInt *v102;
  unsigned int v103;
  unint64_t v104;
  llvm::Value *v105;
  llvm::ValueHandleBase *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned __int8 *v110;
  unsigned __int8 **v111;
  uint64_t *v112;
  const llvm::APInt *v113;
  uint64_t v114;
  uint64_t v115;
  llvm::ConstantInt *v116;
  unsigned int v117;
  unint64_t v118;
  llvm::Value *v119;
  llvm::ValueHandleBase *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned __int8 *v124;
  unsigned __int8 **v125;
  uint64_t *v126;
  uint64_t *v127;
  int v128;
  size_t v129;
  unsigned __int8 *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned __int8 *v133;
  unsigned __int8 **v134;
  uint64_t *v135;
  uint64_t *v136;
  unsigned int v137;
  unsigned __int8 *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned __int8 *v141;
  unsigned __int8 **v142;
  uint64_t *v143;
  uint64_t *v144;
  unsigned int v145;
  unsigned __int8 *v146;
  uint64_t v147;
  uint64_t v148;
  unsigned __int8 *v149;
  unsigned __int8 **v150;
  uint64_t *v151;
  char v152;
  unsigned __int8 *v153;
  size_t v154;
  unsigned __int8 *v155;
  uint64_t v156;
  uint64_t v157;
  unsigned __int8 *v158;
  unsigned __int8 **v159;
  uint64_t *v160;
  const llvm::APInt *v161;
  uint64_t v162;
  uint64_t v163;
  llvm::ConstantInt *v164;
  unsigned int v165;
  unint64_t v166;
  llvm::Value *v167;
  llvm::ValueHandleBase *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned __int8 *v172;
  unsigned __int8 **v173;
  std::string v174;
  unsigned __int8 *v175;
  unsigned __int8 *v176;
  _QWORD *v177;
  char __p[18];
  char v179;
  char *v180;
  __int16 v181;
  uint64_t v182;

  v182 = *MEMORY[0x1E0C80C00];
  v6 = *(uint64_t ***)(*(_QWORD *)a2 + 8);
  *(_QWORD *)__p = "agxcompiler.config";
  v181 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata((uint64_t)v6, (uint64_t)__p);
  if (NamedMetadata)
    llvm::Module::eraseNamedMetadata((llvm::Module *)v6, NamedMetadata);
  inserted = llvm::Module::getOrInsertNamedMetadata((uint64_t)v6, "agxcompiler.config", 0x12uLL);
  if (!inserted)
  {
    v28 = (llvm::raw_ostream *)llvm::errs(0);
    v29 = (void *)*((_QWORD *)v28 + 4);
    if (*((_QWORD *)v28 + 3) - (_QWORD)v29 > 0x19uLL)
    {
      qmemcpy(v29, "Unexpected null ConfigMD\n.", 26);
      result = *(double *)" null ConfigMD\n.";
      *((_QWORD *)v28 + 4) += 26;
    }
    else
    {
      llvm::raw_ostream::write(v28, "Unexpected null ConfigMD\n.", 0x1AuLL);
    }
    return result;
  }
  v9 = inserted;
  v10 = *v6;
  *(_QWORD *)__p = llvm::MDString::get(*v6, "TargetGPU", 9uLL);
  v11 = *((_BYTE *)this + 23);
  v12 = v11 < 0;
  if (v11 >= 0)
    v13 = (unsigned __int8 *)this;
  else
    v13 = *(unsigned __int8 **)this;
  v14 = v11 & 0x7F;
  if (v12)
    v15 = *((_QWORD *)this + 1);
  else
    v15 = v14;
  *(_QWORD *)&__p[8] = llvm::MDString::get(*v6, v13, v15);
  Impl = (unsigned __int8 *)llvm::MDTuple::getImpl(v10, __p, 2, 0, 1);
  v176 = Impl;
  v17 = *(_QWORD *)(v9 + 48);
  v18 = *(unsigned int *)(v17 + 8);
  if (v18 >= *(_DWORD *)(v17 + 12))
  {
    sub_1C5419FD8(*(_QWORD *)(v9 + 48), &v176);
  }
  else
  {
    v19 = Impl;
    v20 = (unsigned __int8 **)(*(_QWORD *)v17 + 8 * v18);
    *v20 = v19;
    if (v19)
    {
      llvm::MetadataTracking::track((uint64_t)v20, v19, 2);
      LODWORD(v18) = *(_DWORD *)(v17 + 8);
    }
    *(_DWORD *)(v17 + 8) = v18 + 1;
  }
  v21 = *v6;
  v176 = (unsigned __int8 *)llvm::MDString::get(*v6, "GitHash", 7uLL);
  v22 = *v6;
  v179 = 0;
  __p[0] = 0;
  v177 = llvm::MDString::get(v22, (unsigned __int8 *)__p, 0);
  v23 = (unsigned __int8 *)llvm::MDTuple::getImpl(v21, &v176, 2, 0, 1);
  v175 = v23;
  v24 = *(_QWORD *)(v9 + 48);
  v25 = *(unsigned int *)(v24 + 8);
  if (v25 >= *(_DWORD *)(v24 + 12))
  {
    sub_1C5419FD8(*(_QWORD *)(v9 + 48), &v175);
  }
  else
  {
    v26 = v23;
    v27 = (unsigned __int8 **)(*(_QWORD *)v24 + 8 * v25);
    *v27 = v26;
    if (v26)
    {
      llvm::MetadataTracking::track((uint64_t)v27, v26, 2);
      LODWORD(v25) = *(_DWORD *)(v24 + 8);
    }
    *(_DWORD *)(v24 + 8) = v25 + 1;
  }
  if (v179 < 0)
    operator delete(*(void **)__p);
  if (*((char *)v6 + 239) < 0)
    sub_1C47EBC30(&v174, v6[27], (unint64_t)v6[28]);
  else
    v174 = *(std::string *)((_BYTE *)v6 + 9);
  if (!std::string::compare(&v174, 0, 4uLL, "agx1"))
  {
    v31 = 27;
  }
  else if (!std::string::compare(&v174, 0, 4uLL, "agx2"))
  {
    v31 = 28;
  }
  else if (!std::string::compare(&v174, 0, 4uLL, "agx3"))
  {
    v31 = 29;
  }
  else
  {
    v31 = 0;
  }
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v174.__r_.__value_.__l.__data_);
  if (v31 == 29)
  {
    v32 = *((unsigned __int8 *)this + 23);
    v33 = *((_QWORD *)this + 1);
    v34 = (v32 & 0x80u) == 0 ? v32 & 0x7F : *((_QWORD *)this + 1);
    if (v34 != 5)
      goto LABEL_52;
    v35 = *((unsigned __int8 *)this + 23);
    v36 = this;
    if ((v32 & 0x80) != 0)
    {
      v36 = *(llvm::AGX::AGCReplay **)this;
      v35 = *((_QWORD *)this + 1);
    }
    v37 = v35 >= 5 ? 5 : v35;
    if (memcmp(v36, "g13_3", v37) || v35 != 5)
    {
      v38 = this;
      if ((v32 & 0x80) != 0)
      {
        v38 = *(llvm::AGX::AGCReplay **)this;
        v32 = v33;
      }
      v39 = v32 >= 5 ? 5 : v32;
      if (memcmp(v38, "g14_3", v39) || v32 != 5)
      {
LABEL_52:
        v40 = *v6;
        v176 = (unsigned __int8 *)llvm::MDString::get(*v6, "TargetISA", 9uLL);
        v41 = *v6;
        v42 = *((_QWORD *)a3 + 73);
        *(_QWORD *)__p = &off_1E8131718;
        *(_QWORD *)&__p[8] = v42;
        v180 = __p;
        v43 = sub_1C4C0B384(__p);
        v44 = v180;
        if (v180 == __p)
        {
          v45 = (void (**)(char *))(*(_QWORD *)__p + 32);
          v44 = __p;
        }
        else
        {
          if (!v180)
          {
LABEL_55:
            v177 = llvm::MDString::get(v41, (unsigned __int8 *)off_1E81333A0[v43], qword_1C85F2048[v43]);
            v46 = llvm::MDTuple::getImpl(v40, &v176, 2, 0, 1);
            *(_QWORD *)__p = v46;
            v47 = *(_QWORD *)(v9 + 48);
            v48 = *(unsigned int *)(v47 + 8);
            if (v48 >= *(_DWORD *)(v47 + 12))
            {
              sub_1C5419FD8(*(_QWORD *)(v9 + 48), (unsigned __int8 **)__p);
            }
            else
            {
              v49 = (unsigned __int8 *)v46;
              v50 = (unsigned __int8 **)(*(_QWORD *)v47 + 8 * v48);
              *v50 = v49;
              if (v49)
              {
                llvm::MetadataTracking::track((uint64_t)v50, v49, 2);
                LODWORD(v48) = *(_DWORD *)(v47 + 8);
              }
              *(_DWORD *)(v47 + 8) = v48 + 1;
            }
            goto LABEL_59;
          }
          v45 = (void (**)(char *))(*(_QWORD *)v180 + 40);
        }
        (*v45)(v44);
        goto LABEL_55;
      }
    }
  }
LABEL_59:
  v51 = "Compute";
  v52 = 7;
  switch(*((_DWORD *)this + 6))
  {
    case 1:
      break;
    case 2:
      v51 = "Graphic";
      v52 = 7;
      break;
    case 3:
      v51 = "Driver";
      v52 = 6;
      break;
    case 4:
      v51 = "DynamicLibrary";
      v52 = 14;
      break;
    default:
      v51 = "unknown type";
      v52 = 12;
      break;
  }
  v53 = llvm::MDString::get(*v6, (unsigned __int8 *)v51, v52);
  v54 = *v6;
  *(_QWORD *)__p = llvm::MDString::get(*v6, "PipelineType", 0xCuLL);
  *(_QWORD *)&__p[8] = v53;
  v55 = (unsigned __int8 *)llvm::MDTuple::getImpl(v54, __p, 2, 0, 1);
  v176 = v55;
  v56 = *(_QWORD *)(v9 + 48);
  v57 = *(unsigned int *)(v56 + 8);
  if (v57 >= *(_DWORD *)(v56 + 12))
  {
    sub_1C5419FD8(*(_QWORD *)(v9 + 48), &v176);
  }
  else
  {
    v58 = v55;
    v59 = (unsigned __int8 **)(*(_QWORD *)v56 + 8 * v57);
    *v59 = v58;
    if (v58)
    {
      llvm::MetadataTracking::track((uint64_t)v59, v58, 2);
      LODWORD(v57) = *(_DWORD *)(v56 + 8);
    }
    *(_DWORD *)(v56 + 8) = v57 + 1;
  }
  v60 = "None";
  v61 = 4;
  switch(*((_DWORD *)this + 7))
  {
    case 0:
      break;
    case 1:
      v60 = "Binary";
      v61 = 6;
      break;
    case 2:
      v60 = "Textual";
      v61 = 7;
      break;
    case 3:
      v60 = "TextualAndBinary";
      v61 = 16;
      break;
    default:
      v60 = "unknown type";
      v61 = 12;
      break;
  }
  v62 = llvm::MDString::get(*v6, (unsigned __int8 *)v60, v61);
  v63 = *v6;
  *(_QWORD *)__p = llvm::MDString::get(*v6, "OutputSelection", 0xFuLL);
  *(_QWORD *)&__p[8] = v62;
  v64 = (unsigned __int8 *)llvm::MDTuple::getImpl(v63, __p, 2, 0, 1);
  v176 = v64;
  v65 = *(_QWORD *)(v9 + 48);
  v66 = *(unsigned int *)(v65 + 8);
  if (v66 >= *(_DWORD *)(v65 + 12))
  {
    sub_1C5419FD8(*(_QWORD *)(v9 + 48), &v176);
  }
  else
  {
    v67 = v64;
    v68 = (unsigned __int8 **)(*(_QWORD *)v65 + 8 * v66);
    *v68 = v67;
    if (v67)
    {
      llvm::MetadataTracking::track((uint64_t)v68, v67, 2);
      LODWORD(v66) = *(_DWORD *)(v65 + 8);
    }
    *(_DWORD *)(v65 + 8) = v66 + 1;
  }
  v69 = *v6;
  v176 = (unsigned __int8 *)llvm::MDString::get(*v6, "EnableOpt", 9uLL);
  v71 = **v6;
  v72 = *((unsigned __int8 *)this + 32);
  v73 = *(llvm::ConstantInt **)(v71 + 1888);
  v74 = *(unsigned int *)(v71 + 1896);
  *(_DWORD *)&__p[8] = v74 >> 8;
  if (v74 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)__p, v72, 0);
  }
  else
  {
    if (v74 <= 0xFF)
      v75 = 0;
    else
      v75 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v74);
    *(_QWORD *)__p = v75 & v72;
  }
  v77 = llvm::ConstantInt::get(v73, (llvm::LLVMContext *)__p, v70);
  if (*(_DWORD *)&__p[8] >= 0x41u && *(_QWORD *)__p)
    MEMORY[0x1CAA32F9C](*(_QWORD *)__p, 0x1000C8000313F17);
  v177 = llvm::ValueAsMetadata::get(v77, v76);
  v78 = llvm::MDTuple::getImpl(v69, &v176, 2, 0, 1);
  *(_QWORD *)__p = v78;
  v79 = *(_QWORD *)(v9 + 48);
  v80 = *(unsigned int *)(v79 + 8);
  if (v80 >= *(_DWORD *)(v79 + 12))
  {
    sub_1C5419FD8(*(_QWORD *)(v9 + 48), (unsigned __int8 **)__p);
  }
  else
  {
    v81 = (unsigned __int8 *)v78;
    v82 = (unsigned __int8 **)(*(_QWORD *)v79 + 8 * v80);
    *v82 = v81;
    if (v81)
    {
      llvm::MetadataTracking::track((uint64_t)v82, v81, 2);
      LODWORD(v80) = *(_DWORD *)(v79 + 8);
    }
    *(_DWORD *)(v79 + 8) = v80 + 1;
  }
  v83 = *v6;
  v176 = (unsigned __int8 *)llvm::MDString::get(*v6, "EnableLogging", 0xDuLL);
  v85 = **v6;
  v86 = *((unsigned __int8 *)this + 33);
  v87 = *(llvm::ConstantInt **)(v85 + 1888);
  v88 = *(_DWORD *)(v85 + 1896);
  *(_DWORD *)&__p[8] = v88 >> 8;
  if (v88 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)__p, v86, 0);
  }
  else
  {
    if (v88 <= 0xFF)
      v89 = 0;
    else
      v89 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v88);
    *(_QWORD *)__p = v89 & v86;
  }
  v91 = llvm::ConstantInt::get(v87, (llvm::LLVMContext *)__p, v84);
  if (*(_DWORD *)&__p[8] >= 0x41u && *(_QWORD *)__p)
    MEMORY[0x1CAA32F9C](*(_QWORD *)__p, 0x1000C8000313F17);
  v177 = llvm::ValueAsMetadata::get(v91, v90);
  v92 = llvm::MDTuple::getImpl(v83, &v176, 2, 0, 1);
  *(_QWORD *)__p = v92;
  v93 = *(_QWORD *)(v9 + 48);
  v94 = *(unsigned int *)(v93 + 8);
  if (v94 >= *(_DWORD *)(v93 + 12))
  {
    sub_1C5419FD8(*(_QWORD *)(v9 + 48), (unsigned __int8 **)__p);
  }
  else
  {
    v95 = (unsigned __int8 *)v92;
    v96 = (unsigned __int8 **)(*(_QWORD *)v93 + 8 * v94);
    *v96 = v95;
    if (v95)
    {
      llvm::MetadataTracking::track((uint64_t)v96, v95, 2);
      LODWORD(v94) = *(_DWORD *)(v93 + 8);
    }
    *(_DWORD *)(v93 + 8) = v94 + 1;
  }
  v97 = *(_QWORD *)a2;
  v98 = *v6;
  v176 = (unsigned __int8 *)llvm::MDString::get(*v6, "Request.Options.FastIsel", 0x18uLL);
  v100 = **v6;
  v101 = *(unsigned __int8 *)(v97 + 17);
  v102 = *(llvm::ConstantInt **)(v100 + 1888);
  v103 = *(_DWORD *)(v100 + 1896);
  *(_DWORD *)&__p[8] = v103 >> 8;
  if (v103 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)__p, v101, 0);
  }
  else
  {
    if (v103 <= 0xFF)
      v104 = 0;
    else
      v104 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v103);
    *(_QWORD *)__p = v104 & v101;
  }
  v106 = llvm::ConstantInt::get(v102, (llvm::LLVMContext *)__p, v99);
  if (*(_DWORD *)&__p[8] >= 0x41u && *(_QWORD *)__p)
    MEMORY[0x1CAA32F9C](*(_QWORD *)__p, 0x1000C8000313F17);
  v177 = llvm::ValueAsMetadata::get(v106, v105);
  v107 = llvm::MDTuple::getImpl(v98, &v176, 2, 0, 1);
  *(_QWORD *)__p = v107;
  v108 = *(_QWORD *)(v9 + 48);
  v109 = *(unsigned int *)(v108 + 8);
  if (v109 >= *(_DWORD *)(v108 + 12))
  {
    sub_1C5419FD8(*(_QWORD *)(v9 + 48), (unsigned __int8 **)__p);
  }
  else
  {
    v110 = (unsigned __int8 *)v107;
    v111 = (unsigned __int8 **)(*(_QWORD *)v108 + 8 * v109);
    *v111 = v110;
    if (v110)
    {
      llvm::MetadataTracking::track((uint64_t)v111, v110, 2);
      LODWORD(v109) = *(_DWORD *)(v108 + 8);
    }
    *(_DWORD *)(v108 + 8) = v109 + 1;
  }
  v112 = *v6;
  v176 = (unsigned __int8 *)llvm::MDString::get(*v6, "Request.Options.FastMath", 0x18uLL);
  v114 = **v6;
  v115 = *(unsigned __int8 *)(v97 + 16);
  v116 = *(llvm::ConstantInt **)(v114 + 1888);
  v117 = *(_DWORD *)(v114 + 1896);
  *(_DWORD *)&__p[8] = v117 >> 8;
  if (v117 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)__p, v115, 0);
  }
  else
  {
    if (v117 <= 0xFF)
      v118 = 0;
    else
      v118 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v117);
    *(_QWORD *)__p = v118 & v115;
  }
  v120 = llvm::ConstantInt::get(v116, (llvm::LLVMContext *)__p, v113);
  if (*(_DWORD *)&__p[8] >= 0x41u && *(_QWORD *)__p)
    MEMORY[0x1CAA32F9C](*(_QWORD *)__p, 0x1000C8000313F17);
  v177 = llvm::ValueAsMetadata::get(v120, v119);
  v121 = llvm::MDTuple::getImpl(v112, &v176, 2, 0, 1);
  *(_QWORD *)__p = v121;
  v122 = *(_QWORD *)(v9 + 48);
  v123 = *(unsigned int *)(v122 + 8);
  if (v123 >= *(_DWORD *)(v122 + 12))
  {
    sub_1C5419FD8(*(_QWORD *)(v9 + 48), (unsigned __int8 **)__p);
  }
  else
  {
    v124 = (unsigned __int8 *)v121;
    v125 = (unsigned __int8 **)(*(_QWORD *)v122 + 8 * v123);
    *v125 = v124;
    if (v124)
    {
      llvm::MetadataTracking::track((uint64_t)v125, v124, 2);
      LODWORD(v123) = *(_DWORD *)(v122 + 8);
    }
    *(_DWORD *)(v122 + 8) = v123 + 1;
  }
  v126 = *v6;
  v176 = (unsigned __int8 *)llvm::MDString::get(*v6, "Request.Options.FPContract", 0x1AuLL);
  v127 = *v6;
  v128 = *(unsigned __int8 *)(v97 + 18);
  if (v128 == 2)
  {
    v129 = 4;
    v179 = 4;
    strcpy(__p, "Fast");
  }
  else if (v128 == 1)
  {
    v129 = 8;
    v179 = 8;
    strcpy(__p, "Standard");
  }
  else
  {
    v129 = 6;
    v179 = 6;
    strcpy(__p, "Strict");
  }
  v177 = llvm::MDString::get(v127, (unsigned __int8 *)__p, v129);
  v130 = (unsigned __int8 *)llvm::MDTuple::getImpl(v126, &v176, 2, 0, 1);
  v175 = v130;
  v131 = *(_QWORD *)(v9 + 48);
  v132 = *(unsigned int *)(v131 + 8);
  if (v132 >= *(_DWORD *)(v131 + 12))
  {
    sub_1C5419FD8(*(_QWORD *)(v9 + 48), &v175);
  }
  else
  {
    v133 = v130;
    v134 = (unsigned __int8 **)(*(_QWORD *)v131 + 8 * v132);
    *v134 = v133;
    if (v133)
    {
      llvm::MetadataTracking::track((uint64_t)v134, v133, 2);
      LODWORD(v132) = *(_DWORD *)(v131 + 8);
    }
    *(_DWORD *)(v131 + 8) = v132 + 1;
  }
  if (v179 < 0)
    operator delete(*(void **)__p);
  v135 = *v6;
  v176 = (unsigned __int8 *)llvm::MDString::get(*v6, "Request.Options.RelocModel", 0x1AuLL);
  v136 = *v6;
  if (*(_BYTE *)(v97 + 19))
  {
    strcpy(__p, "PIC");
    v137 = 3;
  }
  else
  {
    strcpy(__p, "Static");
    v137 = 6;
  }
  v179 = v137;
  v177 = llvm::MDString::get(v136, (unsigned __int8 *)__p, v137);
  v138 = (unsigned __int8 *)llvm::MDTuple::getImpl(v135, &v176, 2, 0, 1);
  v175 = v138;
  v139 = *(_QWORD *)(v9 + 48);
  v140 = *(unsigned int *)(v139 + 8);
  if (v140 >= *(_DWORD *)(v139 + 12))
  {
    sub_1C5419FD8(*(_QWORD *)(v9 + 48), &v175);
  }
  else
  {
    v141 = v138;
    v142 = (unsigned __int8 **)(*(_QWORD *)v139 + 8 * v140);
    *v142 = v141;
    if (v141)
    {
      llvm::MetadataTracking::track((uint64_t)v142, v141, 2);
      LODWORD(v140) = *(_DWORD *)(v139 + 8);
    }
    *(_DWORD *)(v139 + 8) = v140 + 1;
  }
  if (v179 < 0)
    operator delete(*(void **)__p);
  v143 = *v6;
  v176 = (unsigned __int8 *)llvm::MDString::get(*v6, "Request.Options.ForwardProgressMode", 0x23uLL);
  v144 = *v6;
  if (*(_DWORD *)(v97 + 20))
  {
    strcpy(__p, "SIMDGroupParallel");
    v145 = 17;
  }
  else
  {
    strcpy(__p, "Weak");
    v145 = 4;
  }
  v179 = v145;
  v177 = llvm::MDString::get(v144, (unsigned __int8 *)__p, v145);
  v146 = (unsigned __int8 *)llvm::MDTuple::getImpl(v143, &v176, 2, 0, 1);
  v175 = v146;
  v147 = *(_QWORD *)(v9 + 48);
  v148 = *(unsigned int *)(v147 + 8);
  if (v148 >= *(_DWORD *)(v147 + 12))
  {
    sub_1C5419FD8(*(_QWORD *)(v9 + 48), &v175);
  }
  else
  {
    v149 = v146;
    v150 = (unsigned __int8 **)(*(_QWORD *)v147 + 8 * v148);
    *v150 = v149;
    if (v149)
    {
      llvm::MetadataTracking::track((uint64_t)v150, v149, 2);
      LODWORD(v148) = *(_DWORD *)(v147 + 8);
    }
    *(_DWORD *)(v147 + 8) = v148 + 1;
  }
  if (v179 < 0)
    operator delete(*(void **)__p);
  v151 = *v6;
  *(_QWORD *)__p = llvm::MDString::get(*v6, "Request.ShaderType", 0x12uLL);
  v152 = *(_BYTE *)(*(_QWORD *)a2 + 47);
  if (v152 >= 0)
    v153 = (unsigned __int8 *)(*(_QWORD *)a2 + 24);
  else
    v153 = *(unsigned __int8 **)(*(_QWORD *)a2 + 24);
  if (v152 >= 0)
    v154 = v152 & 0x7F;
  else
    v154 = *(_QWORD *)(*(_QWORD *)a2 + 32);
  *(_QWORD *)&__p[8] = llvm::MDString::get(*v6, v153, v154);
  v155 = (unsigned __int8 *)llvm::MDTuple::getImpl(v151, __p, 2, 0, 1);
  v176 = v155;
  v156 = *(_QWORD *)(v9 + 48);
  v157 = *(unsigned int *)(v156 + 8);
  if (v157 >= *(_DWORD *)(v156 + 12))
  {
    sub_1C5419FD8(*(_QWORD *)(v9 + 48), &v176);
  }
  else
  {
    v158 = v155;
    v159 = (unsigned __int8 **)(*(_QWORD *)v156 + 8 * v157);
    *v159 = v158;
    if (v158)
    {
      llvm::MetadataTracking::track((uint64_t)v159, v158, 2);
      LODWORD(v157) = *(_DWORD *)(v156 + 8);
    }
    *(_DWORD *)(v156 + 8) = v157 + 1;
  }
  v160 = *v6;
  v176 = (unsigned __int8 *)llvm::MDString::get(*v6, "Request.ShaderID", 0x10uLL);
  v162 = **v6;
  v163 = *(int *)(*(_QWORD *)a2 + 48);
  v164 = *(llvm::ConstantInt **)(v162 + 1960);
  v165 = *(_DWORD *)(v162 + 1968);
  *(_DWORD *)&__p[8] = v165 >> 8;
  if (v165 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)__p, v163, 0);
  }
  else
  {
    if (v165 <= 0xFF)
      v166 = 0;
    else
      v166 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v165);
    *(_QWORD *)__p = v166 & v163;
  }
  v168 = llvm::ConstantInt::get(v164, (llvm::LLVMContext *)__p, v161);
  if (*(_DWORD *)&__p[8] >= 0x41u && *(_QWORD *)__p)
    MEMORY[0x1CAA32F9C](*(_QWORD *)__p, 0x1000C8000313F17);
  v177 = llvm::ValueAsMetadata::get(v168, v167);
  v169 = llvm::MDTuple::getImpl(v160, &v176, 2, 0, 1);
  *(_QWORD *)__p = v169;
  v170 = *(_QWORD *)(v9 + 48);
  v171 = *(unsigned int *)(v170 + 8);
  if (v171 >= *(_DWORD *)(v170 + 12))
  {
    sub_1C5419FD8(v170, (unsigned __int8 **)__p);
  }
  else
  {
    v172 = (unsigned __int8 *)v169;
    v173 = (unsigned __int8 **)(*(_QWORD *)v170 + 8 * v171);
    *v173 = v172;
    if (v172)
    {
      llvm::MetadataTracking::track((uint64_t)v173, v172, 2);
      LODWORD(v171) = *(_DWORD *)(v170 + 8);
    }
    *(_DWORD *)(v170 + 8) = v171 + 1;
  }
  return result;
}

uint64_t llvm::AGX::AGCReplay::createRequest@<X0>(llvm::AGX::AGCReplay *this@<X0>, llvm::Module *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _BYTE v11[24];

  v6 = *((_QWORD *)this + 8);
  if (*((char *)this + 119) < 0)
  {
    sub_1C47EBC30(v11, *((void **)this + 12), *((_QWORD *)this + 13));
  }
  else
  {
    *(_OWORD *)v11 = *((_OWORD *)this + 6);
    *(_QWORD *)&v11[16] = *((_QWORD *)this + 14);
  }
  v7 = *((_DWORD *)this + 30);
  v8 = *((_QWORD *)this + 16);
  result = operator new();
  v10 = *(_QWORD *)&v11[8];
  *(_QWORD *)(result + 24) = *(_QWORD *)v11;
  *(_QWORD *)(result + 32) = v10;
  *(_QWORD *)(result + 39) = *(_QWORD *)&v11[15];
  LOBYTE(v10) = v11[23];
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = v6;
  *(_BYTE *)(result + 47) = v10;
  *(_DWORD *)(result + 48) = v7;
  *(_QWORD *)(result + 56) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_1C4D7A1C8()
{
  __int128 v1;
  char v2;
  char *v3;

  v2 = 1;
  v3 = &v2;
  *(_QWORD *)&v1 = "Accept mismatch between AGX_EXTRA_LLVM_ATTRIB in the Metadata and the environment.";
  *((_QWORD *)&v1 + 1) = 82;
  sub_1C617586C((uint64_t)&unk_1ED7EEE78, "override-extra-attrib", &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EEE78, &dword_1C475E000);
}

uint64_t **llvm::AGX::AGXCompiler::AGXCompiler(uint64_t **a1, __int128 *a2, uint64_t a3)
{
  uint64_t *v6;

  v6 = (uint64_t *)operator new();
  *a1 = sub_1C4D7A870(v6, a2, a3);
  return a1;
}

{
  uint64_t *v6;

  v6 = (uint64_t *)operator new();
  *a1 = sub_1C4D7A870(v6, a2, a3);
  return a1;
}

void sub_1C4D7A2F0()
{
  llvm::PassRegistry *v0;
  llvm *v2;
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  llvm::PassRegistry *v5;
  llvm::PassRegistry *v6;
  llvm::PassRegistry *v7;

  llvm::TargetRegistry::RegisterTarget((uint64_t)&unk_1ED82C308, (uint64_t)"agx1", (uint64_t)"AGX1", (uint64_t)"AGX1", (uint64_t)sub_1C6174BF0, 0);
  LLVMInitializeAGX1Target();
  qword_1ED82C338 = (uint64_t)sub_1C4B12EF8;
  qword_1ED82C348 = (uint64_t)sub_1C4B12F54;
  qword_1ED82C358 = (uint64_t)sub_1C4B12FA8;
  unk_1ED82C360 = sub_1C4B130AC;
  qword_1ED82C398 = (uint64_t)sub_1C615ACE4;
  qword_1ED82C3A8 = (uint64_t)sub_1C4B13188;
  qword_1ED82C370 = (uint64_t)sub_1C615A658;
  qword_1ED82C380 = (uint64_t)sub_1C61249B4;
  llvm::TargetRegistry::RegisterTarget((uint64_t)&unk_1ED82C430, (uint64_t)"agx2", (uint64_t)"AGX2", (uint64_t)"AGX2", (uint64_t)sub_1C6174C28, 0);
  LLVMInitializeAGX2Target();
  qword_1ED82C460 = (uint64_t)sub_1C4C05EE0;
  qword_1ED82C480 = (uint64_t)sub_1C4C05F98;
  unk_1ED82C488 = sub_1C4C0609C;
  qword_1ED82C550 = (uint64_t)sub_1C4C05E1C;
  byte_1ED82C300 = 1;
  qword_1ED82C4C0 = (uint64_t)sub_1C615B2BC;
  qword_1ED82C500 = (uint64_t)sub_1C615B970;
  unk_1ED82C508 = sub_1C615B9C0;
  qword_1ED82C4D0 = (uint64_t)sub_1C4C06178;
  qword_1ED82C498 = (uint64_t)sub_1C615B1C8;
  qword_1ED82C470 = (uint64_t)sub_1C4C05F44;
  unk_1ED82C478 = sub_1C4C06180;
  qword_1ED82C538 = (uint64_t)sub_1C615B93C;
  qword_1ED82C4A8 = (uint64_t)sub_1C6139538;
  LLVMInitializeAGX2AsmParser_0();
  llvm::TargetRegistry::RegisterTarget((uint64_t)&unk_1EF8F6858, (uint64_t)"agx3", (uint64_t)"AGX3", (uint64_t)"AGX3", (uint64_t)sub_1C6174C60, 0);
  LLVMInitializeAGX3Target();
  qword_1EF8F6888 = (uint64_t)sub_1C4C087B4;
  qword_1EF8F68A8 = (uint64_t)sub_1C4C08860;
  unk_1EF8F68B0 = sub_1C4C08964;
  qword_1EF8F6978 = (uint64_t)sub_1C4C086F0;
  byte_1EF8F66AA = 1;
  qword_1EF8F68E8 = (uint64_t)sub_1C615BC44;
  qword_1EF8F6928 = (uint64_t)sub_1C615C154;
  unk_1EF8F6930 = sub_1C615C1A4;
  qword_1EF8F68F8 = (uint64_t)sub_1C4C08A40;
  qword_1EF8F68C0 = (uint64_t)sub_1C615BA08;
  qword_1EF8F6898 = (uint64_t)sub_1C4C0880C;
  unk_1EF8F68A0 = sub_1C4C08A48;
  qword_1EF8F6960 = (uint64_t)sub_1C615C120;
  qword_1EF8F68D0 = (uint64_t)sub_1C614DAAC;
  LLVMInitializeAGX3AsmParser_0();
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v2 = (llvm *)qword_1ED830BC0[0];
  llvm::initializeCore((llvm *)qword_1ED830BC0[0], v0);
  llvm::initializeCodeGen(v2, v3);
  llvm::initializeGPUCodeGen(v2, v4);
  llvm::initializeLowerIntrinsicsPass(v2, v5);
  llvm::initializeUnreachableBlockElimLegacyPassPass(v2, v6);
  llvm::initializeScalarOpts(v2, v7);
}

void llvm::AGX::AGXCompiler::createAssemblePlan(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  _OWORD v9[2];
  int v10;
  int v11;

  v4 = *(_QWORD *)(*a1 + 8 * (a2 == 1));
  v5 = *a1 + 16;
  v6 = (_QWORD *)operator new();
  v7 = (_QWORD *)operator new();
  *v7 = v4;
  v7[1] = v5;
  *v6 = v7;
  memset(v9, 0, sizeof(v9));
  v10 = 1065353216;
  *(_BYTE *)a3 = 0;
  v8 = 0;
  *(_QWORD *)(a3 + 8) = v6;
  sub_1C4D84EE4(a3 + 16, (uint64_t *)v9);
  *(_DWORD *)(a3 + 56) = v11;
  llvm::AGX::AGXAssemblePlan::~AGXAssemblePlan(&v8);
}

__n128 llvm::AGX::AGXCompiler::createCompilePlan@<Q0>(uint64_t **a1@<X0>, int a2@<W1>, char a3@<W2>, char a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  __int128 v7;
  __n128 result;
  __int128 v9;

  llvm::AGX::AGXCompilePlan::AGXCompilePlan((uint64_t **)&v9, (uint64_t)(*a1 + 5), **a1, (uint64_t)(*a1 + 2), a2, a5, a3, a4, 0);
  *(_BYTE *)a6 = 0;
  v7 = v9;
  v9 = 0uLL;
  *(_OWORD *)(a6 + 8) = v7;
  llvm::AGX::AGXCompilePlan::~AGXCompilePlan((llvm::AGX::AGXCompilePlan *)&v9);
  return result;
}

__n128 llvm::AGX::AGXCompiler::createCompilePlan@<Q0>(uint64_t **a1@<X0>, int a2@<W1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  __int128 v8;
  __n128 result;
  __int128 v10;

  llvm::AGX::AGXCompilePlan::AGXCompilePlan((uint64_t **)&v10, (uint64_t)(*a1 + 5), **a1, (uint64_t)(*a1 + 2), a2, a6, a3, a4, a5);
  *(_BYTE *)a7 = 0;
  v8 = v10;
  v10 = 0uLL;
  *(_OWORD *)(a7 + 8) = v8;
  llvm::AGX::AGXCompilePlan::~AGXCompilePlan((llvm::AGX::AGXCompilePlan *)&v10);
  return result;
}

_QWORD *llvm::AGX::AGXCompiler::AGXCompiler(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

uint64_t **llvm::AGX::AGXCompiler::operator=(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void **v8;

  v3 = (uint64_t *)*a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (*((char *)v4 + 63) < 0)
      operator delete((void *)v4[5]);
    v8 = (void **)(v4 + 2);
    sub_1C4764BBC(&v8);
    v5 = v4[1];
    v4[1] = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *v4;
    *v4 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    MEMORY[0x1CAA32FC0](v4, 0x1032C4093FE8819);
  }
  return a1;
}

void llvm::AGX::AGXCompiler::~AGXCompiler(uint64_t **this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;

  v1 = *this;
  *this = 0;
  if (v1)
  {
    if (*((char *)v1 + 63) < 0)
      operator delete((void *)v1[5]);
    v4 = (void **)(v1 + 2);
    sub_1C4764BBC(&v4);
    v2 = v1[1];
    v1[1] = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *v1;
    *v1 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    MEMORY[0x1CAA32FC0](v1, 0x1032C4093FE8819);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;

  v2 = *this;
  *this = 0;
  if (v2)
  {
    v3 = sub_1C4D7B624(v2);
    MEMORY[0x1CAA32FC0](v3, 0x1032C4093FE8819);
  }
}

uint64_t *sub_1C4D7A870(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  char **v5;
  std::string *v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  char v14;
  BOOL v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  char *v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  uint64_t v31;
  std::string::size_type v32;
  uint64_t *v33;
  char *v34;
  uint64_t v35;
  void *v36;
  std::string::size_type size;
  uint64_t v38;
  void *v39;
  uint64_t *v40;
  char *v41;
  uint64_t v42;
  BOOL v43;
  const std::string::value_type *v44;
  std::string::size_type v45;
  std::string::size_type v46;
  std::string::size_type v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  char *v51;
  uint64_t v52;
  std::string **v53;
  uint64_t v54;
  void **v55;
  uint64_t v56;
  std::string *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::string **v61;
  uint64_t v62;
  void **v63;
  uint64_t v64;
  std::string *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t *v71;
  char *v72;
  uint64_t v73;
  uint64_t *v74;
  char *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *p_shared_owners;
  unint64_t v79;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  __int128 v85;
  uint64_t v86;
  std::string v87;
  char v88;
  int v89;
  unsigned int v90;
  int v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  __int16 v94;
  void *v95[2];
  __int128 v96;
  __int128 v97;
  int v98;
  int v99;
  __int16 v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  _BYTE v109[32];
  __int128 v110;
  uint64_t v111;
  void *__p[3];
  uint64_t v113;
  std::string __dst;
  uint64_t v115;
  void **v116[2];
  char v117;
  uint64_t v118;
  std::string *v119;
  uint64_t v120;
  char v121;
  void **v122;
  uint64_t v123;
  char v124;
  std::string v125;
  int64x2_t v126;
  void *v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  *((_OWORD *)a1 + 1) = 0u;
  v5 = (char **)(a1 + 2);
  v6 = (std::string *)(a1 + 5);
  a1[4] = 0;
  *(_OWORD *)a1 = 0u;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a1 + 40, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    a1[7] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  v8 = atomic_load(&init_flag);
  if (v8 != -1)
  {
    v87.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_1C4D7A2F0;
    v119 = &v87;
    std::__call_once(&init_flag, &v119, (void (__cdecl *)(void *))sub_1C4D7B69C);
  }
  llvm::AGX::TargetResolver::getTargetInfo(v6, (uint64_t)&v119);
  v9 = v121 & 0x7F;
  if (v121 < 0)
    v9 = v120;
  if (v9)
  {
    v126 = 0uLL;
    v127 = 0;
    v10 = llvm::TargetRegistry::lookupTarget((std::string::size_type)&v119, (uint64_t)&v126);
    if (!v10)
    {
      if (SHIBYTE(v127) < 0)
      {
        sub_1C47EBC30(__p, (void *)v126.i64[0], v126.u64[1]);
      }
      else
      {
        *(int64x2_t *)__p = v126;
        __p[2] = v127;
      }
      v38 = operator new();
      v39 = __p[1];
      *(void **)(v38 + 16) = __p[0];
      *(_QWORD *)(v38 + 24) = v39;
      *(void **)(v38 + 31) = *(void **)((char *)&__p[1] + 7);
      LOBYTE(v39) = HIBYTE(__p[2]);
      memset(__p, 0, sizeof(__p));
      *(_DWORD *)(v38 + 8) = 0;
      *(_BYTE *)(v38 + 39) = (_BYTE)v39;
      *(_QWORD *)v38 = &unk_1E8133408;
      v113 = v38;
      v40 = (uint64_t *)a1[3];
      if ((unint64_t)v40 >= a1[4])
      {
        v41 = sub_1C4D62F9C(v5, &v113);
        v42 = v113;
        a1[3] = (uint64_t)v41;
        v113 = 0;
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      }
      else
      {
        *v40 = v38;
        a1[3] = (uint64_t)(v40 + 1);
        v113 = 0;
      }
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      goto LABEL_146;
    }
    v11 = (uint64_t)v10;
    v87.__r_.__value_.__s.__data_[0] = 0;
    *(std::string::size_type *)((char *)v87.__r_.__value_.__r.__words + 4) = 0;
    WORD2(v87.__r_.__value_.__r.__words[1]) = WORD2(v87.__r_.__value_.__r.__words[1]) & 0xE000 | 0x400;
    v87.__r_.__value_.__r.__words[2] = 0x100000001;
    v88 &= 0xF8u;
    v89 = 0;
    v90 = v90 & 0xFE000000 | 0x30;
    v91 = 4;
    v92 = 0;
    v93 = 0;
    v94 &= 0xF000u;
    *(_OWORD *)v95 = 0u;
    v96 = 0u;
    v97 = xmmword_1C677F4F0;
    v98 = -65536;
    v99 = 0;
    if (byte_1ED7EEFB8)
      v12 = 2560;
    else
      v12 = 2048;
    v101 = 2;
    v110 = 0uLL;
    v102 = 0uLL;
    v103 = 0uLL;
    v104 = 0uLL;
    v105 = 0uLL;
    v106 = 0uLL;
    v107 = 0uLL;
    v108 = 0uLL;
    memset(v109, 0, sizeof(v109));
    v111 = 0;
    v100 = v100 & 0xC000 | v12 | 0x1000;
    if (a3)
    {
      v13 = *(char *)(a3 + 23);
      if (v13 < 0)
      {
        if (!*(_QWORD *)(a3 + 8))
          goto LABEL_71;
      }
      else if (!*(_BYTE *)(a3 + 23))
      {
        goto LABEL_71;
      }
      size = *((_BYTE *)&v125.__r_.__value_.__s + 23) & 0x7F;
      if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v125.__r_.__value_.__l.__size_;
      if (size)
      {
        std::string::append(&v125, ",");
        LOBYTE(v13) = *(_BYTE *)(a3 + 23);
      }
      v43 = (v13 & 0x80u) != 0;
      if ((v13 & 0x80u) == 0)
        v44 = (const std::string::value_type *)a3;
      else
        v44 = *(const std::string::value_type **)a3;
      v45 = v13 & 0x7F;
      if (v43)
        v46 = *(_QWORD *)(a3 + 8);
      else
        v46 = v45;
      std::string::append(&v125, v44, v46);
    }
LABEL_71:
    v47 = *((_BYTE *)&v125.__r_.__value_.__s + 23) & 0x7F;
    if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v47 = v125.__r_.__value_.__l.__size_;
    if (v47)
    {
      std::operator+<char>();
      v48 = operator new();
      v49 = v85;
      *(_QWORD *)(v48 + 16) = v84;
      *(_QWORD *)(v48 + 24) = v49;
      *(_QWORD *)(v48 + 31) = *(_QWORD *)((char *)&v85 + 7);
      LOBYTE(v49) = HIBYTE(v85);
      v85 = 0uLL;
      v84 = 0;
      *(_DWORD *)(v48 + 8) = 2;
      *(_BYTE *)(v48 + 39) = v49;
      *(_QWORD *)v48 = &unk_1E81333E0;
      v86 = v48;
      v50 = (uint64_t *)a1[3];
      if ((unint64_t)v50 >= a1[4])
      {
        v51 = sub_1C4D62F9C(v5, &v86);
      }
      else
      {
        v86 = 0;
        *v50 = v48;
        v51 = (char *)(v50 + 1);
      }
      a1[3] = (uint64_t)v51;
      v52 = v86;
      v86 = 0;
      if (v52)
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
      if (SHIBYTE(v85) < 0)
        operator delete(v84);
    }
    if (v121 >= 0)
      v53 = &v119;
    else
      v53 = (std::string **)v119;
    if (v121 >= 0)
      v54 = v121 & 0x7F;
    else
      v54 = v120;
    if (v124 >= 0)
      v55 = (void **)&v122;
    else
      v55 = v122;
    if (v124 >= 0)
      v56 = v124 & 0x7F;
    else
      v56 = v123;
    if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v57 = &v125;
    else
      v57 = (std::string *)v125.__r_.__value_.__r.__words[0];
    if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v58 = *((_BYTE *)&v125.__r_.__value_.__s + 23) & 0x7F;
    else
      v58 = v125.__r_.__value_.__l.__size_;
    v59 = sub_1C4D7B2D4(v11, (uint64_t)v53, v54, (uint64_t)v55, v56, (uint64_t)v57, v58, (uint64_t)&v87, 0x100000000, 0, 2, 0);
    v60 = *a1;
    *a1 = v59;
    if (v60)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
      v59 = *a1;
    }
    if (v59)
    {
      if (v121 >= 0)
        v61 = &v119;
      else
        v61 = (std::string **)v119;
      if (v121 >= 0)
        v62 = v121 & 0x7F;
      else
        v62 = v120;
      if (v124 >= 0)
        v63 = (void **)&v122;
      else
        v63 = v122;
      if (v124 >= 0)
        v64 = v124 & 0x7F;
      else
        v64 = v123;
      if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v65 = &v125;
      else
        v65 = (std::string *)v125.__r_.__value_.__r.__words[0];
      if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v66 = *((_BYTE *)&v125.__r_.__value_.__s + 23) & 0x7F;
      else
        v66 = v125.__r_.__value_.__l.__size_;
      v67 = sub_1C4D7B2D4(v11, (uint64_t)v61, v62, (uint64_t)v63, v64, (uint64_t)v65, v66, (uint64_t)&v87, 0x100000001, 0, 2, 0);
      v68 = a1[1];
      a1[1] = v67;
      if (v68)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
        v67 = a1[1];
      }
      if (v67)
        goto LABEL_129;
      v69 = (char *)operator new(0x20uLL);
      strcpy(v69, "Cannot create the TargetMachine");
      v70 = operator new();
      *(_DWORD *)(v70 + 8) = 0;
      *(_QWORD *)(v70 + 16) = v69;
      *(_QWORD *)(v70 + 24) = 31;
      *(_QWORD *)(v70 + 32) = 0x8000000000000020;
      *(_QWORD *)v70 = &unk_1E8133408;
      v82 = v70;
      v71 = (uint64_t *)a1[3];
      if ((unint64_t)v71 < a1[4])
      {
        *v71 = v70;
        a1[3] = (uint64_t)(v71 + 1);
        v82 = 0;
LABEL_129:
        if (SHIBYTE(v111) < 0)
          operator delete((void *)v110);
        v116[0] = (void **)&v109[8];
        sub_1C4765410(v116);
        if (SHIBYTE(v107) < 0)
          operator delete(*((void **)&v106 + 1));
        if (SBYTE7(v106) < 0)
          operator delete((void *)v105);
        if (SHIBYTE(v104) < 0)
          operator delete(*((void **)&v103 + 1));
        if (SBYTE7(v103) < 0)
          operator delete((void *)v102);
        if (SBYTE7(v96) < 0)
          operator delete(v95[0]);
        v77 = v93;
        if (v93)
        {
          p_shared_owners = (unint64_t *)&v93->__shared_owners_;
          do
            v79 = __ldaxr(p_shared_owners);
          while (__stlxr(v79 - 1, p_shared_owners));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
LABEL_146:
        if ((SHIBYTE(v127) & 0x80000000) == 0)
          goto LABEL_149;
        v36 = (void *)v126.i64[0];
        goto LABEL_148;
      }
      v81 = sub_1C4D62F9C(v5, &v82);
      v76 = v82;
      a1[3] = (uint64_t)v81;
      v82 = 0;
      if (!v76)
        goto LABEL_129;
    }
    else
    {
      v72 = (char *)operator new(0x20uLL);
      strcpy(v72, "Cannot create the TargetMachine");
      v73 = operator new();
      *(_DWORD *)(v73 + 8) = 0;
      *(_QWORD *)(v73 + 16) = v72;
      *(_QWORD *)(v73 + 24) = 31;
      *(_QWORD *)(v73 + 32) = 0x8000000000000020;
      *(_QWORD *)v73 = &unk_1E8133408;
      v83 = v73;
      v74 = (uint64_t *)a1[3];
      if ((unint64_t)v74 < a1[4])
      {
        *v74 = v73;
        a1[3] = (uint64_t)(v74 + 1);
        v83 = 0;
        goto LABEL_129;
      }
      v75 = sub_1C4D62F9C(v5, &v83);
      v76 = v83;
      a1[3] = (uint64_t)v75;
      v83 = 0;
      if (!v76)
        goto LABEL_129;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
    goto LABEL_129;
  }
  *((_BYTE *)&v87.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v87, "Unknown GPU ");
  v14 = *((_BYTE *)a1 + 63);
  v15 = v14 < 0;
  if (v14 >= 0)
    v16 = (const std::string::value_type *)v6;
  else
    v16 = (const std::string::value_type *)a1[5];
  v17 = v14 & 0x7F;
  if (v15)
    v18 = a1[6];
  else
    v18 = v17;
  v19 = std::string::append(&v87, v16, v18);
  v20 = v19->__r_.__value_.__r.__words[0];
  v126.i64[0] = v19->__r_.__value_.__l.__size_;
  *(uint64_t *)((char *)v126.i64 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
  v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v22 = operator new();
  *(_DWORD *)(v22 + 8) = 0;
  v23 = v126.i64[0];
  *(_QWORD *)(v22 + 16) = v20;
  *(_QWORD *)(v22 + 24) = v23;
  *(_QWORD *)(v22 + 31) = *(uint64_t *)((char *)v126.i64 + 7);
  *(_BYTE *)(v22 + 39) = v21;
  *(_QWORD *)v22 = &unk_1E8133408;
  v118 = v22;
  v24 = (uint64_t *)a1[3];
  if ((unint64_t)v24 >= a1[4])
  {
    v25 = sub_1C4D62F9C(v5, &v118);
    v26 = v118;
    a1[3] = (uint64_t)v25;
    v118 = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  }
  else
  {
    *v24 = v22;
    a1[3] = (uint64_t)(v24 + 1);
    v118 = 0;
  }
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  *((_BYTE *)&v87.__r_.__value_.__s + 23) = 18;
  strcpy((char *)&v87, "Available targets:");
  llvm::AGX::TargetResolver::getTargetList(&v126);
  v28 = v126.i64[1];
  for (i = v126.i64[0]; i != v28; i += 24)
  {
    std::operator+<char>();
    if (v117 >= 0)
      v29 = (const std::string::value_type *)v116;
    else
      v29 = (const std::string::value_type *)v116[0];
    if (v117 >= 0)
      v30 = v117 & 0x7F;
    else
      v30 = (std::string::size_type)v116[1];
    std::string::append(&v87, v29, v30);
    if (v117 < 0)
      operator delete(v116[0]);
  }
  v116[0] = (void **)&v126;
  sub_1C4765410(v116);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    sub_1C47EBC30(&__dst, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
  else
    __dst = v87;
  v31 = operator new();
  v32 = __dst.__r_.__value_.__l.__size_;
  *(_QWORD *)(v31 + 16) = __dst.__r_.__value_.__r.__words[0];
  *(_QWORD *)(v31 + 24) = v32;
  *(_QWORD *)(v31 + 31) = *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7);
  LOBYTE(v32) = *((_BYTE *)&__dst.__r_.__value_.__s + 23);
  memset(&__dst, 0, sizeof(__dst));
  *(_DWORD *)(v31 + 8) = 2;
  *(_BYTE *)(v31 + 39) = v32;
  *(_QWORD *)v31 = &unk_1E81333E0;
  v115 = v31;
  v33 = (uint64_t *)a1[3];
  if ((unint64_t)v33 >= a1[4])
  {
    v34 = sub_1C4D62F9C(v5, &v115);
    v35 = v115;
    a1[3] = (uint64_t)v34;
    v115 = 0;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
  else
  {
    *v33 = v31;
    a1[3] = (uint64_t)(v33 + 1);
    v115 = 0;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
  {
    v36 = (void *)v87.__r_.__value_.__r.__words[0];
LABEL_148:
    operator delete(v36);
  }
LABEL_149:
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v125.__r_.__value_.__l.__data_);
  if (v124 < 0)
    operator delete(v122);
  if (v121 < 0)
    operator delete(v119);
  return a1;
}

uint64_t sub_1C4D7B2D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, char a12)
{
  uint64_t (*v12)(uint64_t, void **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v21;
  _QWORD v22[4];
  __int16 v23;
  void *__p[2];
  char v25;

  v12 = *(uint64_t (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 96);
  if (!v12)
    return 0;
  v22[0] = a2;
  v23 = 261;
  v22[1] = a3;
  llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)v22);
  BYTE4(v21) = a12;
  LODWORD(v21) = a11;
  v19 = v12(a1, __p, a4, a5, a6, a7, a8, a9, a10, v21);
  if (v25 < 0)
    operator delete(__p[0]);
  return v19;
}

uint64_t sub_1C4D7B3AC(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E8133430;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1C4D7B3EC(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E8133430;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4D7B43C(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E8133430;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1C4D7B47C(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E8133430;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4D7B4CC(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E8133430;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1C4D7B50C(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E8133430;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1CAA32FC0);
}

double sub_1C4D7B55C(uint64_t a1)
{
  unsigned int v1;
  double result;

  *(_BYTE *)a1 &= ~1u;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 12) = *(_WORD *)(a1 + 12) & 0xE000 | 0x400;
  *(_QWORD *)(a1 + 16) = 0x100000001;
  *(_BYTE *)(a1 + 24) &= 0xF8u;
  v1 = *(_DWORD *)(a1 + 32) & 0xFE000000 | 0x30;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = v1;
  *(_DWORD *)(a1 + 36) = 4;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 56) &= 0xF000u;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = xmmword_1C677F4F0;
  *(_DWORD *)(a1 + 112) = -65536;
  *(_DWORD *)(a1 + 116) = 0;
  *(_QWORD *)(a1 + 124) = 2;
  *(_QWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_WORD *)(a1 + 120) = *(_WORD *)(a1 + 120) & 0xC000 | 0x1000;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  return result;
}

uint64_t *sub_1C4D7B624(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  void **v5;

  if (*((char *)a1 + 63) < 0)
    operator delete((void *)a1[5]);
  v5 = (void **)(a1 + 2);
  sub_1C4764BBC(&v5);
  v2 = a1[1];
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *a1;
  *a1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t sub_1C4D7B69C(uint64_t (***a1)(void))
{
  return (**a1)();
}

uint64_t sub_1C4D7B6A8()
{
  char v1;
  char *v2;
  __int128 v3;

  *(_QWORD *)&v3 = "Show encoding in .s output";
  *((_QWORD *)&v3 + 1) = 26;
  v1 = 1;
  v2 = &v1;
  sub_1C6136B80((uint64_t)&unk_1ED7EEF38, "show-mc-encoding", &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EEF38, &dword_1C475E000);
}

uint64_t llvm::AGX::Diagnostic::getMessage(llvm::AGX::Diagnostic *this)
{
  return (*(uint64_t (**)(llvm::AGX::Diagnostic *))(*(_QWORD *)this + 16))(this);
}

_QWORD *llvm::AGX::DiagnosticHandlerResetter::DiagnosticHandlerResetter(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  *result = a2;
  result[1] = 0;
  v2 = *(_QWORD *)(*(_QWORD *)a2 + 72);
  *(_QWORD *)(*(_QWORD *)a2 + 72) = 0;
  v3 = result[1];
  result[1] = v2;
  if (v3)
  {
    v4 = result;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    return v4;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  *result = a2;
  result[1] = 0;
  v2 = *(_QWORD *)(*(_QWORD *)a2 + 72);
  *(_QWORD *)(*(_QWORD *)a2 + 72) = 0;
  v3 = result[1];
  result[1] = v2;
  if (v3)
  {
    v4 = result;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    return v4;
  }
  return result;
}

_QWORD *llvm::AGX::DiagnosticHandlerResetter::DiagnosticHandlerResetter(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  a2[1] = 0;
  a1[1] = v3;
  v4 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  a2[1] = 0;
  a1[1] = v3;
  v4 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

void llvm::AGX::DiagnosticHandlerResetter::~DiagnosticHandlerResetter(llvm::AGX::DiagnosticHandlerResetter *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(uint64_t **)this;
  if (*(_QWORD *)this)
  {
    v3 = *v2;
    v4 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    v5 = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v3 + 72) = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_BYTE *)(*v2 + 80) = 0;
  }
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(uint64_t **)this;
  if (*(_QWORD *)this)
  {
    v3 = *v2;
    v4 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    v5 = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v3 + 72) = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_BYTE *)(*v2 + 80) = 0;
  }
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

uint64_t llvm::AGX::DiagnosticManager::temporaryInstall@<X0>(llvm::AGX::DiagnosticManager *this@<X0>, llvm::LLVMContext *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 72);
  *(_QWORD *)(*(_QWORD *)a2 + 72) = 0;
  *a3 = a2;
  a3[1] = v3;
  return llvm::AGX::DiagnosticManager::install(this, a2);
}

uint64_t llvm::AGX::DiagnosticManager::install(llvm::AGX::DiagnosticManager *this, llvm::LLVMContext *a2)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  *v4 = &off_1E81334C8;
  v4[1] = this;
  v4[2] = 0;
  v4[3] = this;
  result = *(_QWORD *)(*(_QWORD *)a2 + 72);
  *(_QWORD *)(*(_QWORD *)a2 + 72) = v4;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_BYTE *)(*(_QWORD *)a2 + 80) = 0;
  return result;
}

void llvm::AGX::operator<<(_QWORD *a1, uint64_t a2)
{
  sub_1C4D7C62C(a1, (uint64_t)"[", 1);
  __asm { BR              X10 }
}

uint64_t sub_1C4D7BA0C(_QWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, char a11, __int16 a12, char a13, int a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  char v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v35[2];
  char v36;

  v36 = 5;
  strcpy((char *)v35, "Error");
  v26 = sub_1C4D7C62C(a1, (uint64_t)v35, 5);
  v27 = sub_1C4D7C62C(v26, (uint64_t)"] ", 2);
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
  v29 = *(_BYTE *)(v28 + 23);
  v30 = v29 < 0;
  if (v29 >= 0)
    v31 = v28;
  else
    v31 = *(_QWORD *)v28;
  v32 = v29 & 0x7F;
  if (v30)
    v33 = *(_QWORD *)(v28 + 8);
  else
    v33 = v32;
  sub_1C4D7C62C(v27, v31, v33);
  if (v36 < 0)
    operator delete(v35[0]);
  return v24;
}

void llvm::AGX::operator<<(llvm::raw_ostream *this, uint64_t a2)
{
  _BYTE *v3;

  v3 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v3)
  {
    llvm::raw_ostream::write(this, "[", 1uLL);
  }
  else
  {
    *v3 = 91;
    ++*((_QWORD *)this + 4);
  }
  __asm { BR              X10 }
}

_QWORD *sub_1C4D7BD48(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  void (**v5)(_QWORD *);
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v8 = v7;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v7);
    }
    else
    {
      v8 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v8 = 0;
  }
  sub_1C48C35D8(v7, a1);
  v4 = v8;
  if (v8 == v7)
  {
    v5 = (void (**)(_QWORD *))(v7[0] + 32);
    v4 = v7;
  }
  else
  {
    if (!v8)
      return a1;
    v5 = (void (**)(_QWORD *))(*v8 + 40);
  }
  (*v5)(v4);
  return a1;
}

void sub_1C4D7BE2C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D7BE40(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8133458;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4D7BE74(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8133458;
  a2[1] = v2;
  return result;
}

void sub_1C4D7BE90(uint64_t a1, llvm::SMDiagnostic *this)
{
  uint64_t v3;
  int v4;
  void **v5;
  void *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void **v11;
  void *v12;
  char v13;
  uint64_t v14;
  void **v15;
  void *v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  void (**v22)(llvm::raw_ostream *__hidden);
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  void **v30;
  void *__p[2];
  uint64_t v32;
  uint64_t v33[3];

  v33[2] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  __p[0] = 0;
  __p[1] = 0;
  v32 = 0;
  v23 = 0;
  v27 = 0;
  v28 = 0;
  v22 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v30 = __p;
  v29 = 0;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  llvm::SMDiagnostic::print(this, "", (llvm::raw_ostream *)&v22, 0, 1);
  v4 = *((_DWORD *)this + 12);
  if ((v4 - 2) < 2)
  {
    v11 = v30;
    v12 = *v30;
    v33[0] = (uint64_t)v30[1];
    *(uint64_t *)((char *)v33 + 7) = *(uint64_t *)((char *)v30 + 15);
    v13 = *((_BYTE *)v30 + 23);
    v30[1] = 0;
    v11[2] = 0;
    *v11 = 0;
    v8 = operator new();
    *(_DWORD *)(v8 + 8) = 2;
    v14 = v33[0];
    *(_QWORD *)(v8 + 16) = v12;
    *(_QWORD *)(v8 + 24) = v14;
    *(_QWORD *)(v8 + 31) = *(uint64_t *)((char *)v33 + 7);
    *(_BYTE *)(v8 + 39) = v13;
    v10 = (char *)&unk_1E81333D0;
  }
  else if (v4 == 1)
  {
    v15 = v30;
    v16 = *v30;
    v33[0] = (uint64_t)v30[1];
    *(uint64_t *)((char *)v33 + 7) = *(uint64_t *)((char *)v30 + 15);
    v17 = *((_BYTE *)v30 + 23);
    v30[1] = 0;
    v15[2] = 0;
    *v15 = 0;
    v8 = operator new();
    *(_DWORD *)(v8 + 8) = 1;
    v18 = v33[0];
    *(_QWORD *)(v8 + 16) = v16;
    *(_QWORD *)(v8 + 24) = v18;
    *(_QWORD *)(v8 + 31) = *(uint64_t *)((char *)v33 + 7);
    *(_BYTE *)(v8 + 39) = v17;
    v10 = (char *)&unk_1E8133490;
  }
  else
  {
    if (v4)
      goto LABEL_11;
    v5 = v30;
    v6 = *v30;
    v33[0] = (uint64_t)v30[1];
    *(uint64_t *)((char *)v33 + 7) = *(uint64_t *)((char *)v30 + 15);
    v7 = *((_BYTE *)v30 + 23);
    v30[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    v8 = operator new();
    *(_DWORD *)(v8 + 8) = 0;
    v9 = v33[0];
    *(_QWORD *)(v8 + 16) = v6;
    *(_QWORD *)(v8 + 24) = v9;
    *(_QWORD *)(v8 + 31) = *(uint64_t *)((char *)v33 + 7);
    *(_BYTE *)(v8 + 39) = v7;
    v10 = (char *)&unk_1E81333F8;
  }
  *(_QWORD *)v8 = v10 + 16;
  v33[0] = v8;
  v19 = *(uint64_t **)(v3 + 8);
  if ((unint64_t)v19 >= *(_QWORD *)(v3 + 16))
  {
    v20 = sub_1C4D62F9C((char **)v3, v33);
    v21 = v33[0];
    *(_QWORD *)(v3 + 8) = v20;
    v33[0] = 0;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
  else
  {
    *v19 = v8;
    *(_QWORD *)(v3 + 8) = v19 + 1;
    v33[0] = 0;
  }
LABEL_11:
  v22 = off_1E81A6E70;
  if (v29 == 1 && v24)
    MEMORY[0x1CAA32F9C](v24, 0x1000C8077774924);
  if (SHIBYTE(v32) < 0)
    operator delete(__p[0]);
}

uint64_t sub_1C4D7C114(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E8133430;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1C4D7C154(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E8133430;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4D7C1A8()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4D7C1BC(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  char *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void *v31;
  __int128 v32;
  uint64_t v33;
  void *__p;
  __int128 v35;
  uint64_t v36;
  void *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE __dst[456];

  v4 = *(_DWORD *)(a2 + 8);
  if ((v4 - 18) >= 0xFFFFFFF7)
  {
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2))
      return 1;
    v4 = *(_DWORD *)(a2 + 8);
  }
  if (v4 == 20)
  {
    v5 = *(_QWORD *)(a1 + 24);
    memcpy(__dst, (const void *)(a2 + 16), sizeof(__dst));
    v6 = operator new();
    *(_DWORD *)(v6 + 8) = 4;
    *(_QWORD *)v6 = &off_1E8133510;
    memcpy((void *)(v6 + 16), __dst, 0x1C8uLL);
    *(_QWORD *)(v6 + 472) = 0;
    v40 = v6;
    v7 = *(uint64_t **)(v5 + 8);
    if ((unint64_t)v7 >= *(_QWORD *)(v5 + 16))
    {
      v13 = sub_1C4D62F9C((char **)v5, &v40);
      v14 = v40;
      *(_QWORD *)(v5 + 8) = v13;
      v40 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    }
    else
    {
      *v7 = v6;
      *(_QWORD *)(v5 + 8) = v7 + 1;
    }
    return 1;
  }
  v8 = *(char *)(a2 + 12);
  if ((v8 - 2) < 2)
  {
    v15 = *(_QWORD *)(a1 + 24);
    sub_1C4D7C52C((uint64_t)&v31, a2);
    v16 = operator new();
    v17 = v32;
    *(_QWORD *)(v16 + 16) = v31;
    *(_QWORD *)(v16 + 24) = v17;
    *(_QWORD *)(v16 + 31) = *(_QWORD *)((char *)&v32 + 7);
    LOBYTE(v17) = HIBYTE(v32);
    v32 = 0uLL;
    v31 = 0;
    *(_DWORD *)(v16 + 8) = 2;
    *(_BYTE *)(v16 + 39) = v17;
    *(_QWORD *)v16 = &unk_1E81333E0;
    v33 = v16;
    v18 = *(uint64_t **)(v15 + 8);
    if ((unint64_t)v18 >= *(_QWORD *)(v15 + 16))
    {
      v23 = sub_1C4D62F9C((char **)v15, &v33);
      v24 = v33;
      *(_QWORD *)(v15 + 8) = v23;
      v33 = 0;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    }
    else
    {
      *v18 = v16;
      *(_QWORD *)(v15 + 8) = v18 + 1;
      v33 = 0;
    }
    if (SHIBYTE(v32) < 0)
    {
      v25 = v31;
LABEL_30:
      operator delete(v25);
    }
  }
  else if (v8 == 1)
  {
    v19 = *(_QWORD *)(a1 + 24);
    sub_1C4D7C52C((uint64_t)&__p, a2);
    v20 = operator new();
    v21 = v35;
    *(_QWORD *)(v20 + 16) = __p;
    *(_QWORD *)(v20 + 24) = v21;
    *(_QWORD *)(v20 + 31) = *(_QWORD *)((char *)&v35 + 7);
    LOBYTE(v21) = HIBYTE(v35);
    v35 = 0uLL;
    __p = 0;
    *(_DWORD *)(v20 + 8) = 1;
    *(_BYTE *)(v20 + 39) = v21;
    *(_QWORD *)v20 = &unk_1E81334A0;
    v36 = v20;
    v22 = *(uint64_t **)(v19 + 8);
    if ((unint64_t)v22 >= *(_QWORD *)(v19 + 16))
    {
      v28 = sub_1C4D62F9C((char **)v19, &v36);
      v29 = v36;
      *(_QWORD *)(v19 + 8) = v28;
      v36 = 0;
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    }
    else
    {
      *v22 = v20;
      *(_QWORD *)(v19 + 8) = v22 + 1;
      v36 = 0;
    }
    if (SHIBYTE(v35) < 0)
    {
      v25 = __p;
      goto LABEL_30;
    }
  }
  else if (!*(_BYTE *)(a2 + 12))
  {
    v9 = *(_QWORD *)(a1 + 24);
    sub_1C4D7C52C((uint64_t)&v37, a2);
    v10 = operator new();
    v11 = v38;
    *(_QWORD *)(v10 + 16) = v37;
    *(_QWORD *)(v10 + 24) = v11;
    *(_QWORD *)(v10 + 31) = *(_QWORD *)((char *)&v38 + 7);
    LOBYTE(v11) = HIBYTE(v38);
    v38 = 0uLL;
    v37 = 0;
    *(_DWORD *)(v10 + 8) = 0;
    *(_BYTE *)(v10 + 39) = v11;
    *(_QWORD *)v10 = &unk_1E8133408;
    v39 = v10;
    v12 = *(uint64_t **)(v9 + 8);
    if ((unint64_t)v12 >= *(_QWORD *)(v9 + 16))
    {
      v26 = sub_1C4D62F9C((char **)v9, &v39);
      v27 = v39;
      *(_QWORD *)(v9 + 8) = v26;
      v39 = 0;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
    else
    {
      *v12 = v10;
      *(_QWORD *)(v9 + 8) = v12 + 1;
      v39 = 0;
    }
    if (SHIBYTE(v38) < 0)
    {
      v25 = v37;
      goto LABEL_30;
    }
  }
  return 1;
}

uint64_t sub_1C4D7C510(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t result;

  result = qword_1EF8F7060;
  if (qword_1EF8F7060)
    return llvm::Regex::match(qword_1EF8F7060, a2, a3, 0, 0);
  return result;
}

void sub_1C4D7C52C(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  _QWORD v4[2];
  void (**v5)(llvm::raw_ostream *__hidden);
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  void **v13;
  void *v14[2];
  uint64_t v15;

  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v6 = 0;
  v10 = 0;
  v11 = 0;
  v5 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v13 = v14;
  v12 = 0;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  v4[0] = &unk_1E814E990;
  v4[1] = &v5;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 24))(a2, v4);
  if (*((char *)v13 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a1, *v13, (unint64_t)v13[1]);
  }
  else
  {
    v3 = *(_OWORD *)v13;
    *(_QWORD *)(a1 + 16) = v13[2];
    *(_OWORD *)a1 = v3;
  }
  v5 = off_1E81A6E70;
  if (v12 == 1 && v7)
    MEMORY[0x1CAA32F9C](v7, 0x1000C8077774924);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
}

_QWORD *sub_1C4D7C62C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const std::locale::facet *v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x1CAA32BDC](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = a2 + a3;
    if ((*(_DWORD *)(v6 + 8) & 0xB0) == 0x20)
      v9 = v8;
    else
      v9 = a2;
    v10 = *(_DWORD *)(v6 + 144);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v10;
    }
    if (!sub_1C4D7C73C(v7, a2, v9, v8, v6, (char)v10))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1CAA32BE8](v13);
  return a1;
}

uint64_t sub_1C4D7C73C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  void *__b[2];
  int64_t v21;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        v21 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v21) = v12;
        v13 = __b;
      }
      memset(v13, __c, v12);
      *((_BYTE *)v13 + v12) = 0;
      v16 = v21 >= 0 ? __b : (void **)__b[0];
      v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 96))(v6, v16, v12);
      if (SHIBYTE(v21) < 0)
        operator delete(__b[0]);
      if (v17 != v12)
        return 0;
    }
    v18 = a4 - a3;
    if (v18 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v18) == v18)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

uint64_t sub_1C4D7C8B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = (_QWORD *)(a1 + 16);
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *v4 = v9;
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *v4 = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

uint64_t llvm::AGX::TimingDiagnostic::getMessageImpl(llvm::AGX::TimingDiagnostic *this)
{
  uint64_t result;
  uint64_t *v3;
  _QWORD *v4;
  std::string *p_p;
  uint64_t size;
  uint64_t v7;
  uint64_t v8;
  std::string __p;
  _QWORD v10[2];
  _QWORD v11[11];
  char v12;
  uint64_t v13;

  v3 = (uint64_t *)((char *)this + 24);
  result = *((_QWORD *)this + 3);
  if (!result)
  {
    sub_1C4D7C8B4((uint64_t)v10);
    v4 = sub_1C4D7C62C(v11, (uint64_t)"[Timing] ", 9);
    std::to_string(&__p, *((double *)this + 2));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_1C4D7C62C(v4, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v7 = operator new();
    std::stringbuf::str();
    sub_1C4765904(v3, v7);
    v10[0] = *MEMORY[0x1E0DE4F50];
    v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v11[0] = v8;
    v11[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v12 < 0)
      operator delete((void *)v11[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1CAA32F18](&v13);
    return *v3;
  }
  return result;
}

void sub_1C4D7CAEC(_QWORD *a1)
{
  *a1 = &off_1E8133510;
  sub_1C4765904(a1 + 59, 0);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4D7CB34(_QWORD *a1)
{
  *a1 = &off_1E8133538;
  sub_1C4765904(a1 + 3, 0);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4D7CB78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = MEMORY[0x1E0DE4F50];
  v2 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v3 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v2 - 24)) = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v3;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  return std::iostream::~basic_iostream();
}

BOOL llvm::AGX::AssemblePipeline::AssemblerImpl::run(llvm::AGX::DiagnosticManager **a1, uint64_t *a2, uint64_t a3, int a4)
{
  char v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  llvm::AGX::DiagnosticManager *v14;
  __int128 *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::MCStreamer *v33;
  uint64_t v34;
  unsigned __int8 v35;
  llvm::AGX::DiagnosticManager *v36;
  llvm::AGX::DiagnosticManager *v37;
  uint64_t (*v38)(_QWORD, _QWORD *);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(void);
  llvm::MCAsmBackend *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void **v57;
  uint64_t v58;
  _BOOL8 v59;
  uint64_t (*v60)(void);
  uint64_t v61;
  llvm::AGX::DiagnosticManager *v62;
  char *v63;
  uint64_t v64;
  uint64_t *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t MCAsmParser;
  uint64_t v70;
  void (*v71)(void);
  uint64_t (*v72)(uint64_t, uint64_t, uint64_t, _BYTE *);
  uint64_t v73;
  llvm::AGX::DiagnosticManager *v74;
  char *v75;
  uint64_t v76;
  uint64_t *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  llvm::AGX::DiagnosticManager *v82;
  char *v83;
  _QWORD *v84;
  _QWORD *v85;
  int v86;
  uint64_t v87;
  char *v88;
  llvm::AGX::DiagnosticManager *v89;
  uint64_t *v90;
  __int128 v91;
  uint64_t *i;
  uint64_t v93;
  int v94;
  BOOL v95;
  uint64_t v96;
  llvm::raw_ostream *v98;
  _BYTE *v99;
  int v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  void (**v104)(llvm::raw_ostream *__hidden);
  int v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  char *v113;
  _OWORD v114[4];
  uint64_t v115;
  _BYTE __p[24];
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  llvm::MCAsmBackend *v120;
  _BYTE v121[12];
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  void **v131;
  _QWORD v132[4];
  __int16 v133;
  uint64_t v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v115 = 0;
  memset(v114, 0, sizeof(v114));
  v7 = *((_BYTE *)a2 + 23);
  v8 = v7 < 0;
  if (v7 >= 0)
    v9 = a2;
  else
    v9 = (uint64_t *)*a2;
  v10 = v7 & 0x7F;
  if (v8)
    v11 = a2[1];
  else
    v11 = v10;
  v133 = 261;
  v132[0] = "";
  v132[1] = 0;
  *(_QWORD *)v121 = v132;
  v12 = sub_1C5E1F380(24, (const void ****)v121);
  *(_QWORD *)v12 = &off_1E81A17B0;
  *((_QWORD *)v12 + 1) = v9;
  *((_QWORD *)v12 + 2) = (char *)v9 + v11;
  v113 = v12;
  sub_1C6175188((uint64_t)v114, (uint64_t *)&v113, 0);
  v13 = (uint64_t)v113;
  v113 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v100 = a4;
  v14 = *a1;
  v15 = (__int128 *)((char *)*a1 + 448);
  v16 = *((_BYTE *)*a1 + 519);
  if (v16 >= 0)
    v17 = (uint64_t)*a1 + 496;
  else
    v17 = *((_QWORD *)*a1 + 62);
  if (v16 >= 0)
    v18 = v16 & 0x7F;
  else
    v18 = *((_QWORD *)*a1 + 63);
  v19 = *((_BYTE *)v14 + 543);
  v20 = v19;
  if (v19 >= 0)
    v21 = (uint64_t)v14 + 520;
  else
    v21 = *((_QWORD *)v14 + 65);
  v22 = v19 & 0x7F;
  if (v20 >= 0)
    v23 = v22;
  else
    v23 = *((_QWORD *)v14 + 66);
  v24 = *((_QWORD *)v14 + 1);
  v25 = *((_BYTE *)v14 + 471);
  v26 = v25 < 0;
  v28 = *((_QWORD *)v14 + 56);
  v27 = *((_QWORD *)v14 + 57);
  if (v25 >= 0)
    v29 = (uint64_t)*a1 + 448;
  else
    v29 = v28;
  v30 = v25 & 0x7F;
  if (v26)
    v31 = v27;
  else
    v31 = v30;
  v32 = sub_1C4D72F0C(v24, v29, v31, v17, v18, v21, v23);
  v33 = (llvm::MCStreamer *)*((_QWORD *)*a1 + 70);
  llvm::MCContext::MCContext((uint64_t)v132, v15, (uint64_t)v33, *((_QWORD *)*a1 + 71), v32, (uint64_t)v114, 0, 1, 0, 0);
  llvm::AGX::DiagnosticManager::install(a1[1], (llvm::MCContext *)v132);
  v34 = sub_1C6175CE4(*((_QWORD *)*a1 + 1), (llvm::MCContext *)v132, 0, 0);
  v134 = v34;
  v35 = atomic_load((unsigned __int8 *)&qword_1ED7EF008);
  if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EF008))
  {
    __cxa_atexit((void (*)(void *))sub_1C4D7D724, &qword_1ED7EF000, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7EF008);
  }
  v105 = 0;
  v109 = 0;
  v110 = 0;
  v111 = 1;
  v107 = 0;
  v108 = 0;
  v106 = 0;
  v104 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E8133330;
  v112 = a3;
  v37 = *a1;
  v36 = a1[1];
  v38 = *(uint64_t (**)(_QWORD, _QWORD *))(*((_QWORD *)*a1 + 1) + 144);
  if (!v38)
  {
    v131 = 0;
    goto LABEL_31;
  }
  v39 = *((_QWORD *)v37 + 73);
  v131 = (void **)v38(*((_QWORD *)v37 + 72), v132);
  if (!v131)
  {
LABEL_31:
    v40 = (char *)operator new(0x20uLL);
    strcpy(v40, "Can't initialize CodeEmitter");
    v41 = operator new();
    *(_DWORD *)(v41 + 8) = 0;
    *(_QWORD *)(v41 + 16) = v40;
    *(_QWORD *)(v41 + 24) = 28;
    *(_QWORD *)(v41 + 32) = 0x8000000000000020;
    *(_QWORD *)v41 = &unk_1E8133408;
    *(_QWORD *)v121 = v41;
    v42 = (uint64_t *)*((_QWORD *)v36 + 1);
    if ((unint64_t)v42 >= *((_QWORD *)v36 + 2))
    {
      v43 = sub_1C4D62F9C((char **)v36, (uint64_t *)v121);
    }
    else
    {
      *(_QWORD *)v121 = 0;
      *v42 = v41;
      v43 = (char *)(v42 + 1);
    }
    v44 = 0;
    *((_QWORD *)v36 + 1) = v43;
    v45 = *(_QWORD *)v121;
    *(_QWORD *)v121 = 0;
    if (v45)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
      v44 = 0;
    }
    goto LABEL_64;
  }
  *(_WORD *)v121 = 4096;
  *(_QWORD *)&v121[4] = 2;
  v122 = 0u;
  v123 = 0u;
  v124 = 0u;
  v125 = 0u;
  v126 = 0u;
  v127 = 0u;
  v128 = 0u;
  v129 = 0u;
  v130 = 0u;
  v46 = *(uint64_t (**)(void))(*((_QWORD *)v37 + 1) + 104);
  if (!v46)
  {
    v120 = 0;
LABEL_39:
    v48 = (char *)operator new(0x20uLL);
    strcpy(v48, "Can't initialize AsmBackend");
    v49 = operator new();
    *(_DWORD *)(v49 + 8) = 0;
    v50 = 27;
    goto LABEL_40;
  }
  v47 = (llvm::MCAsmBackend *)v46();
  v120 = v47;
  if (!v47)
    goto LABEL_39;
  v54 = *((_QWORD *)v37 + 1);
  if (*((char *)v37 + 471) < 0)
  {
    sub_1C47EBC30(__p, *((void **)v37 + 56), *((_QWORD *)v37 + 57));
    v47 = v120;
  }
  else
  {
    *(_OWORD *)__p = *((_OWORD *)v37 + 28);
    *(_QWORD *)&__p[16] = *((_QWORD *)v37 + 58);
  }
  v118 = *((_QWORD *)v37 + 61);
  v117 = *(_OWORD *)((char *)v37 + 472);
  llvm::MCAsmBackend::createObjectWriter(v47, (llvm::raw_pwrite_stream *)&v104, &v119);
  v44 = sub_1C6175EA0(v54, (uint64_t)__p, (llvm::MCContext *)v132, (uint64_t *)&v120, &v119, (uint64_t *)&v131, v39, *((_WORD *)v37 + 564) & 1, HIBYTE(*((_WORD *)v37 + 564)) & 1, 1u);
  v55 = v119;
  v119 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (v44)
    goto LABEL_54;
  v48 = (char *)operator new(0x20uLL);
  strcpy(v48, "Can't initialize ObjStreamer");
  v49 = operator new();
  *(_DWORD *)(v49 + 8) = 0;
  v50 = 28;
LABEL_40:
  *(_QWORD *)(v49 + 16) = v48;
  *(_QWORD *)(v49 + 24) = v50;
  *(_QWORD *)(v49 + 32) = 0x8000000000000020;
  *(_QWORD *)v49 = &unk_1E8133408;
  v119 = v49;
  v51 = (uint64_t *)*((_QWORD *)v36 + 1);
  if ((unint64_t)v51 >= *((_QWORD *)v36 + 2))
  {
    v52 = sub_1C4D62F9C((char **)v36, &v119);
  }
  else
  {
    v119 = 0;
    *v51 = v49;
    v52 = (char *)(v51 + 1);
  }
  v44 = 0;
  *((_QWORD *)v36 + 1) = v52;
  v53 = v119;
  v119 = 0;
  if (v53)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
    v44 = 0;
  }
LABEL_54:
  v56 = (uint64_t)v120;
  v120 = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  *(_QWORD *)__p = (char *)&v129 + 8;
  sub_1C4765410((void ***)__p);
  if (SHIBYTE(v127) < 0)
    operator delete(*((void **)&v126 + 1));
  if (SBYTE7(v126) < 0)
    operator delete((void *)v125);
  if (SHIBYTE(v124) < 0)
    operator delete(*((void **)&v123 + 1));
  if (SBYTE7(v123) < 0)
    operator delete((void *)v122);
LABEL_64:
  v57 = v131;
  v131 = 0;
  if (v57)
    (*((void (**)(void **))*v57 + 1))(v57);
  v58 = qword_1ED7EF000;
  qword_1ED7EF000 = v44;
  if (v58)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 48))(v58);
    v44 = qword_1ED7EF000;
  }
  if (!v44)
    goto LABEL_69;
  v60 = *(uint64_t (**)(void))(*((_QWORD *)*a1 + 1) + 64);
  if (v60 && (v61 = v60()) != 0)
  {
    v68 = v61;
    v129 = 0u;
    v130 = 0u;
    v127 = 0u;
    v128 = 0u;
    v125 = 0u;
    v126 = 0u;
    v123 = 0u;
    v124 = 0u;
    v122 = 0u;
    *(_QWORD *)&v121[4] = 2;
    *(_WORD *)v121 = 4096;
    MCAsmParser = llvm::createMCAsmParser((llvm *)v114, (llvm::SourceMgr *)v132, (llvm::MCContext *)qword_1ED7EF000, v33, 0);
    v70 = *((_QWORD *)*a1 + 1);
    v71 = *(void (**)(void))(v70 + 288);
    if (v71)
      v71();
    v72 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(v70 + 112);
    if (v72 && (v73 = v72(v32, MCAsmParser, v68, v121)) != 0)
    {
      v80 = v73;
      *(_BYTE *)(MCAsmParser + 33) = 0;
      *(_QWORD *)(MCAsmParser + 8) = v73;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v73 + 16))(v73, MCAsmParser);
      v81 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)MCAsmParser + 80))(MCAsmParser, 0, 0);
      v82 = a1[1];
      if (v81)
      {
        v83 = (char *)operator new(0x20uLL);
        strcpy(v83, "Error during assembler.\n");
        v84 = (_QWORD *)operator new();
        *((_DWORD *)v84 + 2) = 0;
        v84[2] = v83;
        v84[3] = 24;
        v84[4] = 0x8000000000000020;
        *v84 = &unk_1E8133408;
        v101 = v84;
        v85 = (_QWORD *)*((_QWORD *)v82 + 1);
        if ((unint64_t)v85 >= *((_QWORD *)v82 + 2))
        {
          v88 = sub_1C4D62F9C((char **)v82, (uint64_t *)&v101);
          v84 = v101;
          *((_QWORD *)v82 + 1) = v88;
          v101 = 0;
          v86 = v100;
          if (v84)
            v84 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v84 + 8))(v84);
        }
        else
        {
          *v85 = v84;
          *((_QWORD *)v82 + 1) = v85 + 1;
          v101 = 0;
          v86 = v100;
        }
        if (v86)
        {
          v89 = a1[1];
          *(_QWORD *)__p = *(_QWORD *)v89;
          v90 = *(uint64_t **)__p;
          v91 = *(_OWORD *)((char *)v89 + 8);
          *(_QWORD *)v89 = 0;
          *((_QWORD *)v89 + 1) = 0;
          *(_OWORD *)&__p[8] = v91;
          *((_QWORD *)v89 + 2) = 0;
          for (i = (uint64_t *)v91; v90 != i; ++v90)
          {
            if (*(_DWORD *)(*v90 + 8) <= 1u)
            {
              v98 = (llvm::raw_ostream *)llvm::errs((llvm *)v84);
              llvm::AGX::operator<<(v98, *v90);
              v99 = (_BYTE *)v84[4];
              if ((_BYTE *)v84[3] == v99)
              {
                v84 = llvm::raw_ostream::write((llvm::raw_ostream *)v84, "\n", 1uLL);
              }
              else
              {
                *v99 = 10;
                ++v84[4];
              }
            }
          }
          v131 = (void **)__p;
          sub_1C4764BBC(&v131);
        }
        v59 = 0;
      }
      else
      {
        v87 = *((_QWORD *)v82 + 1);
        if (*(_QWORD *)v82 == v87)
        {
          v59 = 1;
        }
        else
        {
          v93 = *(_QWORD *)v82 + 8;
          do
          {
            v94 = *(_DWORD *)(*(_QWORD *)(v93 - 8) + 8);
            v59 = v94 != 0;
            if (v94)
              v95 = v93 == v87;
            else
              v95 = 1;
            v93 += 8;
          }
          while (!v95);
        }
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
    }
    else
    {
      v74 = a1[1];
      v75 = (char *)operator new(0x38uLL);
      strcpy(v75, "Assembly parsing is not enabled for this target\n");
      v76 = operator new();
      *(_DWORD *)(v76 + 8) = 0;
      *(_QWORD *)(v76 + 16) = v75;
      *(_QWORD *)(v76 + 24) = 48;
      *(_QWORD *)(v76 + 32) = 0x8000000000000038;
      *(_QWORD *)v76 = &unk_1E8133408;
      v102 = v76;
      v77 = (uint64_t *)*((_QWORD *)v74 + 1);
      if ((unint64_t)v77 >= *((_QWORD *)v74 + 2))
      {
        v78 = sub_1C4D62F9C((char **)v74, &v102);
        v79 = v102;
        *((_QWORD *)v74 + 1) = v78;
        v102 = 0;
        if (v79)
          (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
        v59 = 0;
      }
      else
      {
        v59 = 0;
        *v77 = v76;
        *((_QWORD *)v74 + 1) = v77 + 1;
        v102 = 0;
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)MCAsmParser + 8))(MCAsmParser);
    *(_QWORD *)__p = (char *)&v129 + 8;
    sub_1C4765410((void ***)__p);
    if (SHIBYTE(v127) < 0)
      operator delete(*((void **)&v126 + 1));
    if (SBYTE7(v126) < 0)
      operator delete((void *)v125);
    if (SHIBYTE(v124) < 0)
      operator delete(*((void **)&v123 + 1));
    if (SBYTE7(v123) < 0)
      operator delete((void *)v122);
    MEMORY[0x1CAA32FC0](v68, 0x10F0C40CB53E019);
  }
  else
  {
    v62 = a1[1];
    v63 = (char *)operator new(0x20uLL);
    strcpy(v63, "Cannot create MCInstrInfo\n");
    v64 = operator new();
    *(_DWORD *)(v64 + 8) = 0;
    *(_QWORD *)(v64 + 16) = v63;
    *(_QWORD *)(v64 + 24) = 26;
    *(_QWORD *)(v64 + 32) = 0x8000000000000020;
    *(_QWORD *)v64 = &unk_1E8133408;
    v103 = v64;
    v65 = (uint64_t *)*((_QWORD *)v62 + 1);
    if ((unint64_t)v65 >= *((_QWORD *)v62 + 2))
    {
      v66 = sub_1C4D62F9C((char **)v62, &v103);
      v67 = v103;
      *((_QWORD *)v62 + 1) = v66;
      v103 = 0;
      if (v67)
        (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
LABEL_69:
      v59 = 0;
      goto LABEL_112;
    }
    v59 = 0;
    *v65 = v64;
    *((_QWORD *)v62 + 1) = v65 + 1;
    v103 = 0;
  }
LABEL_112:
  v104 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E8133330;
  v96 = v108 - v106;
  if (v108 != v106)
  {
    v108 = v106;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v104, v106, v96);
  }
  v104 = off_1E81A6E70;
  if (v111 == 1 && v106)
    MEMORY[0x1CAA32F9C](v106, 0x1000C8077774924, v96);
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  llvm::MCContext::~MCContext((llvm::MCContext *)v132);
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  llvm::SourceMgr::~SourceMgr((llvm::SourceMgr *)v114);
  return v59;
}

uint64_t *sub_1C4D7D724(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  return a1;
}

uint64_t *llvm::AGX::Pipeline::Pipeline(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, char a7, char a8, char a9)
{
  sub_1C4D7D7A4(a2, a3, a4, a5, a6, a8, a7, a9, a1);
  return a1;
}

{
  sub_1C4D7D7A4(a2, a3, a4, a5, a6, a8, a7, a9, a1);
  return a1;
}

void sub_1C4D7D7A4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, char a6@<W5>, char a7@<W6>, char a8@<W7>, uint64_t *a9@<X8>)
{
  _QWORD *v17;
  int v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 __p;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  char *v30;
  char *v31;
  void *__dst[2];
  uint64_t v33;
  uint64_t v34;
  int *v35;
  char *v36;
  char *v37;
  char *v38;
  char v39;
  char v40;
  char v41;
  int v42;
  __int128 v43;
  char v44;
  __int128 v45;
  char v46;

  v42 = a4;
  v41 = a6;
  v40 = a7;
  v39 = a8;
  v17 = (_QWORD *)operator new();
  *v17 = 0;
  v17[1] = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_1C47EBC30(__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a1;
    v33 = *(_QWORD *)(a1 + 16);
  }
  HIBYTE(v27) = 0;
  LOBYTE(__p) = 0;
  v46 = 0;
  LOBYTE(v45) = 0;
  v44 = 12;
  strcpy((char *)&v43, "unknown type");
  sub_1C4D77894((uint64_t)(v17 + 2), (__int128 *)__dst, a4, a5, a7, a6, &__p, 0x10000, &v45, &v43, -1, 0);
  if (v44 < 0)
    operator delete((void *)v43);
  if (v46 < 0)
    operator delete((void *)v45);
  if (SHIBYTE(v27) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v33) < 0)
    operator delete(__dst[0]);
  v17[19] = a2;
  *(_QWORD *)&v45 = v17;
  __dst[0] = &v45;
  __dst[1] = (void *)a1;
  v33 = a2;
  v34 = a3;
  v35 = &v42;
  v36 = &v41;
  v37 = &v40;
  v38 = &v39;
  *(_QWORD *)&__p = &v45;
  *((_QWORD *)&__p + 1) = a1;
  v27 = a2;
  v28 = a3;
  v29 = &v42;
  v30 = &v40;
  if (((a5 == 1) & a6) != 0)
    v18 = 3;
  else
    v18 = a5;
  v31 = &v39;
  switch(v18)
  {
    case 1:
      sub_1C6176038((uint64_t *)__dst);
      v24 = v45;
      if (!*(_QWORD *)(v45 + 8))
        goto LABEL_30;
      goto LABEL_28;
    case 2:
LABEL_27:
      sub_1C61760B0((uint64_t)&__p);
      v24 = v45;
      if (!*(_QWORD *)v45)
      {
LABEL_30:
        *a9 = 0;
        *(_QWORD *)&v45 = 0;
LABEL_23:
        sub_1C4D8315C((uint64_t)&v45, v24);
        return;
      }
LABEL_28:
      *a9 = v24;
      return;
    case 3:
      sub_1C6176038((uint64_t *)__dst);
      v24 = v45;
      if (!*(_QWORD *)(v45 + 8))
        goto LABEL_30;
      goto LABEL_27;
  }
  v19 = (char *)operator new(0x38uLL);
  strcpy(v19, "Can't create pipeline, unknown CodeGenOutput requested.");
  v20 = operator new();
  *(_DWORD *)(v20 + 8) = 0;
  *(_QWORD *)(v20 + 16) = v19;
  *(_QWORD *)(v20 + 24) = 55;
  *(_QWORD *)(v20 + 32) = 0x8000000000000038;
  *(_QWORD *)v20 = &unk_1E8133408;
  v25 = v20;
  v21 = *(uint64_t **)(a3 + 8);
  if ((unint64_t)v21 >= *(_QWORD *)(a3 + 16))
  {
    v22 = sub_1C4D62F9C((char **)a3, &v25);
    v23 = v25;
    *(_QWORD *)(a3 + 8) = v22;
    v25 = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
  else
  {
    *v21 = v20;
    *(_QWORD *)(a3 + 8) = v21 + 1;
    v25 = 0;
  }
  *a9 = 0;
  v24 = v45;
  *(_QWORD *)&v45 = 0;
  if (v24)
    goto LABEL_23;
}

void llvm::AGX::Pipeline::collectConfiguration(uint64_t **this, llvm::AGX::CompileRequest *a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *this;
  v3 = (*this)[1];
  if (v3 || (v3 = *v2) != 0)
    sub_1C4D81F90(v3, (uint64_t)a2);
}

void llvm::AGX::Pipeline::run(llvm::AGX::Pipeline *this@<X0>, llvm::AGX::CompileRequest *a2@<X1>, uint64_t a3@<X8>)
{
  sub_1C4D7DAD8(*(_QWORD *)this, a2, a3);
}

void sub_1C4D7DAD8(uint64_t a1@<X0>, llvm::AGX::CompileRequest *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v6;
  const std::string *v8;
  const std::error_category *v9;
  uint64_t v10;
  uint64_t **v11;
  char v12;
  uint64_t v13;
  const void *v14;
  const void *v15;
  const void *v16;
  unint64_t v17;
  const void *v18;
  size_t v19;
  _BOOL4 v20;
  uint64_t v21;
  const llvm::APInt *v22;
  uint64_t inserted;
  uint64_t v24;
  llvm::ConstantInt *v25;
  unint64_t v26;
  unint64_t v27;
  llvm::Value *v28;
  llvm::ValueHandleBase *v29;
  uint64_t Impl;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 **v34;
  llvm::TargetMachine **v35;
  std::string::size_type size;
  uint64_t i;
  char **v38;
  llvm::Module *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t j;
  uint64_t v49;
  char v50;
  uint64_t v51;
  std::string::size_type v52;
  uint64_t *v53;
  char *v54;
  std::string::size_type v55;
  uint64_t *v56;
  std::chrono::system_clock::time_point v57;
  std::string::size_type v58;
  std::string::size_type v59;
  unint64_t v60;
  std::string::size_type v61;
  std::string::size_type v62;
  std::string::size_type v63;
  std::string::size_type v64;
  std::string *v65;
  const std::error_category *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::string *v70;
  llvm::ConstantInt *v71;
  const __CFString *v72;
  int AppBooleanValue;
  __int16 v74;
  __int16 v75;
  _BYTE __dst[24];
  void **v77;
  __int16 v78;
  _QWORD *v79;
  __int16 v80;
  _QWORD v81[4];
  __int16 v82;
  _QWORD v83[4];
  __int16 v84;
  uint64_t (**v85)();
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  int v92;
  std::string::size_type *v93;
  std::error_code v94;
  std::string v95;
  __int16 v96;
  _BYTE keyExistsAndHasValidFormat[24];
  _WORD v98[68];
  _BYTE v99[12];
  __int16 v100;
  _BYTE v101[10];
  std::string::size_type v102;
  __int16 v103;
  std::string buf;
  _WORD v105[68];
  _QWORD *v106;
  __int128 v107;
  _QWORD v108[7];

  v108[4] = *MEMORY[0x1E0C80C00];
  v6 = atomic_load((unsigned __int8 *)qword_1ED7EF010);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(qword_1ED7EF010))
  {
    v72 = CFStringCreateWithCStringNoCopy(0, "LogLoweredShaders", 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    keyExistsAndHasValidFormat[0] = 0;
    AppBooleanValue = CFPreferencesGetAppBooleanValue(v72, CFSTR("com.apple.Metal"), keyExistsAndHasValidFormat);
    CFRelease(CFSTR("com.apple.Metal"));
    CFRelease(v72);
    v74 = keyExistsAndHasValidFormat[0];
    if (keyExistsAndHasValidFormat[0])
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"LogLoweredShaders";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = AppBooleanValue;
        _os_log_impl(&dword_1C475E000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Read preference %s: %d", (uint8_t *)&buf, 0x12u);
      }
      v74 = AppBooleanValue != 0;
      v75 = 1;
    }
    else
    {
      v75 = 0;
    }
    word_1ED7EEFFE = v74 | (v75 << 8);
    __cxa_guard_release(qword_1ED7EF010);
  }
  if ((unsigned __int16)word_1ED7EEFFE >= 0x100u && word_1ED7EEFFE != 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"/private/var/mobile/Library/Logs/Metal";
      _os_log_impl(&dword_1C475E000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "Logging shader %s", (uint8_t *)&buf, 0xCu);
    }
    llvm::AGX::AGCReplay::serializeRequestToIR((llvm::AGX::AGCReplay *)(a1 + 16), a2, *(llvm::TargetMachine **)(a1 + 152));
    v8 = *(const std::string **)(*(_QWORD *)a2 + 8);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)"/private/var/mobile/Library/Logs/Metal";
    v105[4] = 259;
    *(_QWORD *)&v94.__val_ = llvm::sys::fs::create_directory((unsigned __int8 *)&buf, 1, 0x1FFu);
    v94.__cat_ = v9;
    if (v94.__val_)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        std::error_code::message(&buf, &v94);
        v65 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &buf
            : (std::string *)buf.__r_.__value_.__r.__words[0];
        *(_DWORD *)keyExistsAndHasValidFormat = 136315394;
        *(_QWORD *)&keyExistsAndHasValidFormat[4] = "/private/var/mobile/Library/Logs/Metal";
        *(_WORD *)&keyExistsAndHasValidFormat[12] = 2080;
        *(_QWORD *)&keyExistsAndHasValidFormat[14] = v65;
        _os_log_error_impl(&dword_1C475E000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Could not create dir %s (%s)", keyExistsAndHasValidFormat, 0x16u);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      v106 = v108;
      v107 = xmmword_1C677F680;
      v86 = 0;
      v90 = 0;
      v91 = 0;
      v85 = &off_1E81A7280;
      v93 = (std::string::size_type *)&v106;
      v92 = 0;
      v88 = 0;
      v89 = 0;
      v87 = 0;
      v57.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      llvm::operator<<((llvm::raw_ostream *)&v85, 1000 * v57.__d_.__rep_);
      v59 = *v93;
      v58 = v93[1];
      buf.__r_.__value_.__r.__words[0] = *v93;
      buf.__r_.__value_.__l.__size_ = v58;
      keyExistsAndHasValidFormat[0] = 32;
      v60 = llvm::StringRef::find((uint64_t *)&buf, keyExistsAndHasValidFormat, 1uLL, 0);
      if (v60 == -1)
      {
        v64 = 0;
        v63 = 0;
      }
      else
      {
        if (v58 >= v60)
          v61 = v60;
        else
          v61 = v58;
        if (v58 >= v60 + 1)
          v62 = v60 + 1;
        else
          v62 = v58;
        v63 = v59 + v62;
        v64 = v58 - v62;
        v58 = v61;
      }
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v105;
      *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = xmmword_1C85F20B0;
      *(_QWORD *)keyExistsAndHasValidFormat = "/private/var/mobile/Library/Logs/Metal";
      v98[4] = 259;
      v82 = 1283;
      v81[0] = "llvm-agx-shader-";
      v81[2] = v59;
      v81[3] = v58;
      v83[0] = v81;
      v83[2] = "_";
      v84 = 770;
      *(_QWORD *)v99 = v83;
      *(_QWORD *)&v101[2] = v63;
      v102 = v64;
      v103 = 1282;
      v95.__r_.__value_.__r.__words[0] = (std::string::size_type)v99;
      v95.__r_.__value_.__r.__words[2] = (std::string::size_type)".%%%%%%%%.ll";
      v96 = 770;
      v80 = 257;
      v78 = 257;
      llvm::sys::path::append(&buf, 0, (_QWORD **)keyExistsAndHasValidFormat, &v95, &v79, &v77);
      LODWORD(v83[0]) = 0;
      *(_QWORD *)keyExistsAndHasValidFormat = v98;
      *(_OWORD *)&keyExistsAndHasValidFormat[8] = xmmword_1C85F20B0;
      v96 = 261;
      *(_OWORD *)&v95.__r_.__value_.__l.__data_ = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(_QWORD *)&v94.__val_ = sub_1C5E7D894((uint64_t)&v95, (int *)v83, keyExistsAndHasValidFormat, 0, 1, 0, 438);
      v94.__cat_ = v66;
      if (v94.__val_)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          v68 = *(_QWORD *)&keyExistsAndHasValidFormat[8];
          if ((unint64_t)(*(_QWORD *)&keyExistsAndHasValidFormat[8] + 1) > *(_QWORD *)&keyExistsAndHasValidFormat[16])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)keyExistsAndHasValidFormat, v98, *(_QWORD *)&keyExistsAndHasValidFormat[8] + 1, 1);
            v68 = *(_QWORD *)&keyExistsAndHasValidFormat[8];
          }
          *(_BYTE *)(*(_QWORD *)keyExistsAndHasValidFormat + v68) = 0;
          v69 = *(_QWORD *)keyExistsAndHasValidFormat;
          std::error_code::message(&v95, &v94);
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v70 = &v95;
          else
            v70 = (std::string *)v95.__r_.__value_.__r.__words[0];
          *(_DWORD *)v99 = 136315394;
          *(_QWORD *)&v99[4] = v69;
          v100 = 2080;
          *(_QWORD *)v101 = v70;
          _os_log_error_impl(&dword_1C475E000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Could not create file %s (%s)", v99, 0x16u);
          if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v95.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
        {
          v67 = *(_QWORD *)&keyExistsAndHasValidFormat[8];
          if ((unint64_t)(*(_QWORD *)&keyExistsAndHasValidFormat[8] + 1) > *(_QWORD *)&keyExistsAndHasValidFormat[16])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)keyExistsAndHasValidFormat, v98, *(_QWORD *)&keyExistsAndHasValidFormat[8] + 1, 1);
            v67 = *(_QWORD *)&keyExistsAndHasValidFormat[8];
          }
          *(_BYTE *)(*(_QWORD *)keyExistsAndHasValidFormat + v67) = 0;
          LODWORD(v95.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v95.__r_.__value_.__r.__words + 4) = *(_QWORD *)keyExistsAndHasValidFormat;
          _os_log_impl(&dword_1C475E000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "Writing lowered shader to %s", (uint8_t *)&v95, 0xCu);
        }
        llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v95, v83[0], 1, 0, 0);
        llvm::Module::print(v8, (llvm::raw_ostream *)&v95, 0, 0, 0);
        llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v95);
      }
      if (*(_WORD **)keyExistsAndHasValidFormat != v98)
        free(*(void **)keyExistsAndHasValidFormat);
      if (buf.__r_.__value_.__l.__data_ != (std::string::pointer)v105)
        free(buf.__r_.__value_.__l.__data_);
      v85 = (uint64_t (**)())off_1E81A6E70;
      if (v92 == 1 && v87)
        MEMORY[0x1CAA32F9C](v87, 0x1000C8077774924);
      if (v106 != v108)
        free(v106);
    }
  }
  v10 = *(_QWORD *)a2;
  v11 = *(uint64_t ***)(*(_QWORD *)a2 + 8);
  v12 = *(_BYTE *)(*(_QWORD *)a2 + 47);
  if (v12 >= 0)
    v13 = v12 & 0x7F;
  else
    v13 = *(_QWORD *)(*(_QWORD *)a2 + 32);
  if (v13 == 7)
  {
    v16 = *(const void **)(v10 + 24);
    v14 = (const void *)(v10 + 24);
    v15 = v16;
    if (v12 >= 0)
      v17 = *(unsigned __int8 *)(*(_QWORD *)a2 + 47);
    else
      v17 = *(_QWORD *)(*(_QWORD *)a2 + 32);
    if (v12 >= 0)
      v18 = v14;
    else
      v18 = v15;
    if (v17 >= 7)
      v19 = 7;
    else
      v19 = v17;
    v20 = memcmp(v18, "utility", v19) == 0;
    v21 = v17 == 7 && v20;
  }
  else
  {
    v21 = 0;
  }
  inserted = llvm::Module::getOrInsertNamedMetadata((uint64_t)v11, "agx.reduce.reg.pressure", 0x17uLL);
  v24 = **v11;
  v25 = *(llvm::ConstantInt **)(v24 + 1888);
  v26 = *(unsigned int *)(v24 + 1896);
  LODWORD(buf.__r_.__value_.__r.__words[1]) = v26 >> 8;
  if (v26 >> 8 > 0x40)
  {
    v71 = v25;
    llvm::APInt::initSlowCase((llvm::APInt *)&buf, v21, 0);
    v25 = v71;
  }
  else
  {
    if (v26 <= 0xFF)
      v27 = 0;
    else
      v27 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v26);
    buf.__r_.__value_.__r.__words[0] = v27 & v21;
  }
  v29 = llvm::ConstantInt::get(v25, (llvm::LLVMContext *)&buf, v22);
  if (LODWORD(buf.__r_.__value_.__r.__words[1]) >= 0x41 && buf.__r_.__value_.__r.__words[0])
    MEMORY[0x1CAA32F9C](buf.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
  *(_QWORD *)keyExistsAndHasValidFormat = llvm::ValueAsMetadata::get(v29, v28);
  Impl = llvm::MDTuple::getImpl(*v11, keyExistsAndHasValidFormat, 1, 0, 1);
  buf.__r_.__value_.__r.__words[0] = Impl;
  v31 = *(_QWORD *)(inserted + 48);
  v32 = *(unsigned int *)(v31 + 8);
  if (v32 >= *(_DWORD *)(v31 + 12))
  {
    sub_1C5419FD8(*(_QWORD *)(inserted + 48), (unsigned __int8 **)&buf);
  }
  else
  {
    v33 = (unsigned __int8 *)Impl;
    v34 = (unsigned __int8 **)(*(_QWORD *)v31 + 8 * v32);
    *v34 = v33;
    if (v33)
    {
      llvm::MetadataTracking::track((uint64_t)v34, v33, 2);
      LODWORD(v32) = *(_DWORD *)(v31 + 8);
    }
    *(_DWORD *)(v31 + 8) = v32 + 1;
  }
  v35 = *(llvm::TargetMachine ***)a1;
  if (!*(_QWORD *)a1)
  {
    v42 = a3;
    v35 = *(llvm::TargetMachine ***)(a1 + 8);
LABEL_47:
    sub_1C4D81FD8(v42, v35, a2);
    return;
  }
  if (!*(_QWORD *)(a1 + 8))
  {
    v42 = a3;
    goto LABEL_47;
  }
  llvm::CloneModule(*(llvm **)(*(_QWORD *)a2 + 8), (uint64_t *)&v85);
  sub_1C4D81FD8((uint64_t)&buf, *(llvm::TargetMachine ***)(a1 + 8), a2);
  size = buf.__r_.__value_.__l.__size_;
  v38 = (char **)(buf.__r_.__value_.__l.__size_ + 24);
  for (i = *(_QWORD *)(buf.__r_.__value_.__l.__size_ + 24); i != *(_QWORD *)(buf.__r_.__value_.__l.__size_ + 32); i += 8)
  {
    if (!*(_DWORD *)(*(_QWORD *)i + 8))
    {
      *(_BYTE *)a3 = 1;
      *(_QWORD *)(a3 + 8) = size;
      v39 = (llvm::Module *)v85;
      if (!v85)
        return;
LABEL_63:
      llvm::Module::~Module(v39);
      MEMORY[0x1CAA32FC0]();
      return;
    }
  }
  v106 = (_QWORD *)buf.__r_.__value_.__l.__size_;
  v39 = (llvm::Module *)v85;
  v40 = *(_QWORD *)a2;
  v41 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if (*(char *)(*(_QWORD *)a2 + 47) < 0)
  {
    sub_1C47EBC30(__dst, *(void **)(v40 + 24), *(_QWORD *)(v40 + 32));
    v40 = *(_QWORD *)a2;
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(v40 + 24);
    *(_QWORD *)&__dst[16] = *(_QWORD *)(v40 + 40);
  }
  v43 = *(_DWORD *)(v40 + 48);
  v44 = *(_QWORD *)(v40 + 56);
  v45 = operator new();
  v46 = *(_QWORD *)&__dst[8];
  *(_QWORD *)(v45 + 24) = *(_QWORD *)__dst;
  *(_QWORD *)(v45 + 32) = v46;
  *(_QWORD *)(v45 + 39) = *(_QWORD *)&__dst[15];
  LOBYTE(v46) = __dst[23];
  memset(__dst, 0, sizeof(__dst));
  *(_QWORD *)v45 = 0;
  *(_QWORD *)(v45 + 8) = v39;
  *(_QWORD *)(v45 + 16) = v41;
  *(_BYTE *)(v45 + 47) = v46;
  *(_DWORD *)(v45 + 48) = v43;
  *(_QWORD *)(v45 + 56) = v44;
  *(_QWORD *)v99 = v45;
  sub_1C4D81FD8((uint64_t)keyExistsAndHasValidFormat, *(llvm::TargetMachine ***)a1, (llvm::AGX::CompileRequest *)v99);
  v47 = *(_QWORD **)&keyExistsAndHasValidFormat[8];
  for (j = *(_QWORD *)(*(_QWORD *)&keyExistsAndHasValidFormat[8] + 24);
        j != *(_QWORD *)(*(_QWORD *)&keyExistsAndHasValidFormat[8] + 32);
        j += 8)
  {
    if (!*(_DWORD *)(*(_QWORD *)j + 8))
    {
      *(_BYTE *)a3 = 1;
      *(_QWORD *)(a3 + 8) = v47;
      goto LABEL_58;
    }
  }
  v49 = **(_QWORD **)&keyExistsAndHasValidFormat[8];
  v95.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)&keyExistsAndHasValidFormat[8] + 8);
  *(std::string::size_type *)((char *)v95.__r_.__value_.__r.__words + 7) = *(_QWORD *)(*(_QWORD *)&keyExistsAndHasValidFormat[8]
                                                                                     + 15);
  v50 = *(_BYTE *)(*(_QWORD *)&keyExistsAndHasValidFormat[8] + 23);
  *(_QWORD *)(*(_QWORD *)&keyExistsAndHasValidFormat[8] + 8) = 0;
  v47[2] = 0;
  *v47 = 0;
  v51 = operator new();
  *(_DWORD *)(v51 + 8) = 3;
  v52 = v95.__r_.__value_.__r.__words[0];
  *(_QWORD *)(v51 + 16) = v49;
  *(_QWORD *)(v51 + 24) = v52;
  *(_QWORD *)(v51 + 31) = *(std::string::size_type *)((char *)v95.__r_.__value_.__r.__words + 7);
  *(_BYTE *)(v51 + 39) = v50;
  *(_QWORD *)v51 = &unk_1E8133F38;
  v95.__r_.__value_.__r.__words[0] = v51;
  v53 = *(uint64_t **)(size + 32);
  if ((unint64_t)v53 >= *(_QWORD *)(size + 40))
  {
    v54 = sub_1C4D62F9C(v38, (uint64_t *)&v95);
    v55 = v95.__r_.__value_.__r.__words[0];
    *(_QWORD *)(size + 32) = v54;
    v95.__r_.__value_.__r.__words[0] = 0;
    if (v55)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v55 + 8))(v55);
  }
  else
  {
    *v53 = v51;
    *(_QWORD *)(size + 32) = v53 + 1;
  }
  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = size;
  v95.__r_.__value_.__r.__words[0] = 0;
  sub_1C4D85830((uint64_t)&v95, (uint64_t)v47);
  size = 0;
LABEL_58:
  v56 = *(uint64_t **)v99;
  *(_QWORD *)v99 = 0;
  if (v56)
    sub_1C4D85640((uint64_t)v99, v56);
  v106 = 0;
  if (size)
    sub_1C4D85830((uint64_t)&v106, size);
  if (v39)
    goto LABEL_63;
}

void llvm::AGX::Pipeline::~Pipeline(llvm::AGX::Pipeline *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    sub_1C4D8315C((uint64_t)this, v1);
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    sub_1C4D8315C((uint64_t)this, v1);
}

llvm::AGX::AssemblePipeline *llvm::AGX::AssemblePipeline::AssemblePipeline(llvm::AGX::AssemblePipeline *this, llvm::TargetMachine *a2, llvm::AGX::DiagnosticManager *a3)
{
  _QWORD *v6;

  v6 = (_QWORD *)operator new();
  *v6 = a2;
  v6[1] = a3;
  *(_QWORD *)this = v6;
  return this;
}

{
  _QWORD *v6;

  v6 = (_QWORD *)operator new();
  *v6 = a2;
  v6[1] = a3;
  *(_QWORD *)this = v6;
  return this;
}

void llvm::AGX::AssemblePipeline::~AssemblePipeline(llvm::AGX::AssemblePipeline *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    MEMORY[0x1CAA32FC0](v2, 0x20C40A4A59CD2);
}

{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    MEMORY[0x1CAA32FC0](v2, 0x20C40A4A59CD2);
}

void sub_1C4D7E63C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;

  v3 = (char *)sub_1C4D7E6B4 + 4 * byte_1C85F20E9[llvm::GPUBaseInfo::getDeviceTypeFromTarget(a3) - 1];
  __asm { BR              X10 }
}

void sub_1C4D7E6B4(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t **v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  _BOOL4 v14;
  _BOOL4 v17;
  __int16 v18;
  BOOL v19;
  char v20;
  __int16 v21;
  BOOL v22;
  char v23;
  __int16 v24;
  uint64_t v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char v36;
  const void **v37;
  _QWORD *v38;
  void (**v39)(_QWORD *);
  const void **v40;
  llvm *v41;
  uint64_t (**v42)(llvm *);
  const void **InstructionCombiningPass;
  _QWORD *v44;
  void (**v45)(_QWORD *);
  const void **v46;
  _QWORD *v47;
  void (**v48)(_QWORD *);
  const void **v49;
  uint64_t (***v50)();
  void (**v51)(uint64_t (***)());
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  char v55;
  char v56;
  char v57;
  uint64_t v58;
  _QWORD v59[3];
  _QWORD *v60;
  uint64_t (**v61)();
  __int128 *v62;
  uint64_t (***v63)();

  v54 = xmmword_1C85F20C0;
  v55 = dword_1ED7EEFF8;
  v56 = BYTE2(dword_1ED7EEFF8);
  v57 = word_1ED7EEFFC;
  LODWORD(v58) = a1;
  BYTE4(v58) = 1;
  if ((_BYTE)dword_1ED7EEFF8)
    *(_DWORD *)(v3 + 1040) |= 0x80000u;
  v11 = *(_DWORD *)(v3 + 472);
  v12 = v11 & 0xFFFFFFFE;
  v14 = v9 != 2 || v11 != 28;
  v17 = v6 == 3 || (v9 - 1) < 2 || (a1 - 4) < 0xC;
  if (v17)
    v18 = 4096;
  else
    v18 = 0;
  v19 = v12 == 28;
  v20 = v12 == 28 && v17;
  if (v19)
    v21 = v18;
  else
    v21 = 0;
  v22 = v9 == 3;
  if (v9 == 3)
    v23 = 0;
  else
    v23 = v20;
  if (v22)
    v24 = 0;
  else
    v24 = v21;
  *(_WORD *)(v3 + 1020) = *(_WORD *)(v3 + 1020) & 0xEFFF | v24;
  *(_DWORD *)(v3 + 1024) = v14;
  switch(v6)
  {
    case 1:
      sub_1C4D7EC50(v4, v7, v3, v1, (uint64_t)&v54, 1, v2, v5, v8, v23);
      return;
    case 2:
      sub_1C4D7EC50(v4, v7, v3, v1, (uint64_t)&v54, 2, v2, v5, v8, v23);
      return;
    case 3:
      if (v8)
      {
        v29 = (char *)operator new(0x30uLL);
        strcpy(v29, "Driver shader with opt requested (won't honor)");
        v30 = operator new();
        *(_DWORD *)(v30 + 8) = 1;
        *(_QWORD *)(v30 + 16) = v29;
        *(_QWORD *)(v30 + 24) = 46;
        *(_QWORD *)(v30 + 32) = 0x8000000000000030;
        *(_QWORD *)v30 = &unk_1E81334A0;
        v53 = v30;
        v31 = *(uint64_t **)(v1 + 8);
        if ((unint64_t)v31 >= *(_QWORD *)(v1 + 16))
        {
          v32 = sub_1C4D62F9C((char **)v1, &v53);
          v33 = v53;
          *(_QWORD *)(v1 + 8) = v32;
          v53 = 0;
          if (v33)
            (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
        }
        else
        {
          *v31 = v30;
          *(_QWORD *)(v1 + 8) = v31 + 1;
          v53 = 0;
        }
      }
      v34 = operator new();
      v35 = (uint64_t *)sub_1C4D80634(v34, v7, v3, 3, v2, v5, v8, v23);
      *v4 = v35;
      sub_1C4D807CC(v35);
      if (!byte_1ED7EF098)
      {
        v36 = v23 ^ 1;
        if (word_1ED7EF020)
          v36 = 1;
        if ((v36 & 1) != 0)
          goto LABEL_67;
      }
      *(_QWORD *)(v10 - 120) = &off_1E8133DD0;
      *(_QWORD *)(v10 - 112) = v34;
      *(_QWORD *)(v10 - 96) = v10 - 120;
      v37 = (const void **)sub_1C4D81CD8(v10 - 120);
      llvm::PMTopLevelManager::schedulePass((int32x2_t *)(*(_QWORD *)(v34 + 88) + 416), v37);
      v38 = *(_QWORD **)(v10 - 96);
      if (v38 == (_QWORD *)(v10 - 120))
      {
        v39 = (void (**)(_QWORD *))(*(_QWORD *)(v10 - 120) + 32);
        v38 = (_QWORD *)(v10 - 120);
      }
      else
      {
        if (!v38)
          goto LABEL_57;
        v39 = (void (**)(_QWORD *))(*v38 + 40);
      }
      (*v39)(v38);
LABEL_57:
      v61 = &off_1E8133E18;
      v62 = &v54;
      v63 = &v61;
      v40 = (const void **)sub_1C6282770(v54, DWORD1(v54));
      llvm::PMTopLevelManager::schedulePass((int32x2_t *)(*(_QWORD *)(v34 + 88) + 416), v40);
      v41 = (llvm *)v63;
      if (v63 == &v61)
      {
        v42 = (uint64_t (**)(llvm *))(v61 + 4);
        v41 = (llvm *)&v61;
      }
      else
      {
        if (!v63)
          goto LABEL_62;
        v42 = (uint64_t (**)(llvm *))(*v63 + 5);
      }
      v41 = (llvm *)(*v42)(v41);
LABEL_62:
      v59[0] = &off_1E8133E60;
      v60 = v59;
      InstructionCombiningPass = (const void **)llvm::createInstructionCombiningPass(v41);
      llvm::PMTopLevelManager::schedulePass((int32x2_t *)(*(_QWORD *)(v34 + 88) + 416), InstructionCombiningPass);
      v44 = v60;
      if (v60 == v59)
      {
        v45 = (void (**)(_QWORD *))(v59[0] + 32);
        v44 = v59;
      }
      else
      {
        if (!v60)
          goto LABEL_67;
        v45 = (void (**)(_QWORD *))(*v60 + 40);
      }
      (*v45)(v44);
LABEL_67:
      *(_QWORD *)(v10 - 120) = &off_1E8133680;
      *(_QWORD *)(v10 - 112) = sub_1C627FDE4;
      *(_QWORD *)(v10 - 96) = v10 - 120;
      v46 = (const void **)sub_1C627FDE4();
      llvm::PMTopLevelManager::schedulePass((int32x2_t *)(*(_QWORD *)(v34 + 88) + 416), v46);
      v47 = *(_QWORD **)(v10 - 96);
      if (v47 == (_QWORD *)(v10 - 120))
      {
        v48 = (void (**)(_QWORD *))(*(_QWORD *)(v10 - 120) + 32);
        v47 = (_QWORD *)(v10 - 120);
      }
      else
      {
        if (!v47)
          goto LABEL_72;
        v48 = (void (**)(_QWORD *))(*v47 + 40);
      }
      (*v48)(v47);
LABEL_72:
      v61 = &off_1E8133EA8;
      v62 = &v54;
      v63 = &v61;
      v49 = (const void **)sub_1C627A444(v58);
      llvm::PMTopLevelManager::schedulePass((int32x2_t *)(*(_QWORD *)(v34 + 88) + 416), v49);
      v50 = v63;
      if (v63 == &v61)
      {
        v51 = (void (**)(uint64_t (***)()))(v61 + 4);
        v50 = &v61;
      }
      else
      {
        if (!v63)
        {
LABEL_77:
          llvm::AGX::AGCStatusPrinter::hookOptimizePrinter(v34 + 104, (llvm::legacy::PassManager *)(v34 + 80));
          sub_1C4D80878(v34, v3, v2, v1);
          return;
        }
        v51 = (void (**)(uint64_t (***)()))(*v63 + 5);
      }
      (*v51)(v50);
      goto LABEL_77;
    case 4:
      sub_1C4D7EC50(v4, v7, v3, v1, (uint64_t)&v54, 4, v2, v5, v8, v23);
      return;
    default:
      v25 = operator new();
      *(_DWORD *)(v25 + 8) = 0;
      strcpy((char *)(v25 + 16), "Unknown pipeline type");
      *(_BYTE *)(v25 + 38) = 0;
      *(_BYTE *)(v25 + 39) = 21;
      *(_QWORD *)v25 = &unk_1E8133408;
      v52 = v25;
      v26 = *(uint64_t **)(v1 + 8);
      if ((unint64_t)v26 >= *(_QWORD *)(v1 + 16))
      {
        v27 = sub_1C4D62F9C((char **)v1, &v52);
        v28 = v52;
        *(_QWORD *)(v1 + 8) = v27;
        v52 = 0;
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      }
      else
      {
        *v26 = v25;
        *(_QWORD *)(v1 + 8) = v26 + 1;
      }
      *v4 = 0;
      return;
  }
}

void sub_1C4D7EC50(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8, char a9, char a10)
{
  _BOOL4 v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  void (**v21)(_QWORD *);
  uint64_t v22;
  _QWORD *v23;
  void (**v24)(_QWORD *);
  uint64_t v25;
  const void **v26;
  _QWORD *v27;
  void (**v28)(_QWORD *);
  const void **v29;
  _QWORD *v30;
  void (**v31)(_QWORD *);
  const void **v32;
  uint64_t (***v33)();
  void (**v34)(uint64_t (***)());
  const void **v35;
  uint64_t (***v36)();
  void (**v37)(uint64_t (***)());
  const void **AlwaysInlinerLegacyPass;
  llvm *v39;
  const void **v40;
  llvm *v41;
  void (**v42)(llvm *);
  const void **v43;
  llvm *v44;
  uint64_t (**v45)(llvm *);
  const void **v46;
  uint64_t (**v47)(llvm *);
  const void **ReversePostOrderFunctionAttrsPass;
  llvm *v49;
  uint64_t (**v50)(llvm *);
  const void **TypeBasedAAWrapperPass;
  llvm *v52;
  uint64_t (**v53)(llvm *);
  const void **ScopedNoAliasAAWrapperPass;
  llvm *v55;
  uint64_t (**v56)(llvm *);
  const void **BasicAAWrapperPass;
  llvm *v58;
  uint64_t (**v59)(llvm *);
  const void **GPUAAWrapperPass;
  _QWORD *v61;
  void (**v62)(_QWORD *);
  const void **v63;
  _QWORD *v64;
  void (**v65)(_QWORD *);
  const void **v66;
  _QWORD *v67;
  void (**v68)(_QWORD *);
  const void **ArgumentPromotionPass;
  llvm *v70;
  uint64_t (**v71)(llvm *);
  const void **DeadArgEliminationPass;
  llvm *v73;
  uint64_t (**v74)(llvm *);
  const void **AGXInstCombinePass;
  _QWORD *v76;
  void (**v77)(_QWORD *);
  const void **v78;
  uint64_t (**v79)(llvm *);
  const void **SROAPass;
  _QWORD *v81;
  void (**v82)(_QWORD *);
  const void **v83;
  llvm *v84;
  uint64_t (**v85)(llvm *);
  const void **StripDeadPrototypesPass;
  _QWORD *v87;
  void (**v88)(_QWORD *);
  uint64_t v89;
  _QWORD *v90;
  void (**v91)(_QWORD *);
  const void **v92;
  _QWORD *v93;
  void (**v94)(_QWORD *);
  const void **v95;
  _QWORD *v96;
  void (**v97)(_QWORD *);
  const void **v98;
  llvm *v99;
  uint64_t (**v100)(llvm *);
  const void **DeadCodeEliminationPass;
  llvm *v102;
  uint64_t (**v103)(llvm *);
  const void **ReassociatePass;
  llvm *v105;
  uint64_t (**v106)(llvm *);
  const void **SCCPPass;
  llvm *v108;
  uint64_t (**v109)(llvm *);
  const void **InstructionCombiningPass;
  _QWORD *v111;
  void (**v112)(_QWORD *);
  const void **v113;
  llvm *v114;
  uint64_t (**v115)(llvm *);
  const void **LoopSimplifyCFGPass;
  _QWORD *v117;
  void (**v118)(_QWORD *);
  const void **LoopRotatePass;
  _QWORD *v120;
  void (**v121)(_QWORD *);
  const void **LoopUnrollPass;
  llvm *v123;
  uint64_t (**v124)(llvm *);
  const void **v125;
  _QWORD *v126;
  void (**v127)(_QWORD *);
  const void **v128;
  _QWORD *v129;
  void (**v130)(_QWORD *);
  const void **v131;
  llvm *v132;
  uint64_t (**v133)(llvm *);
  const void **v134;
  _QWORD *v135;
  void (**v136)(_QWORD *);
  const void **v137;
  llvm *v138;
  uint64_t (**v139)(llvm *);
  const void **v140;
  _QWORD *v141;
  void (**v142)(_QWORD *);
  const void **v143;
  _QWORD *v144;
  void (**v145)(_QWORD *);
  const void **v146;
  _QWORD *v147;
  void (**v148)(_QWORD *);
  const void **v149;
  llvm *v150;
  uint64_t (**v151)(llvm *);
  const void **AggressiveDCEPass;
  llvm *v153;
  uint64_t (**v154)(llvm *);
  const void **v155;
  _QWORD *v156;
  void (**v157)(_QWORD *);
  uint64_t v158;
  llvm *v159;
  uint64_t (**v160)(llvm *);
  const void **v161;
  _QWORD *v162;
  void (**v163)(_QWORD *);
  const void **v164;
  _QWORD *v165;
  void (**v166)(_QWORD *);
  const void **v167;
  _QWORD *v168;
  void (**v169)(_QWORD *);
  const void **v170;
  _QWORD *v171;
  void (**v172)(_QWORD *);
  const void **v173;
  _QWORD *v174;
  void (**v175)(_QWORD *);
  const void **v176;
  _QWORD *v177;
  void (**v178)(_QWORD *);
  const void **v179;
  _QWORD *v180;
  void (**v181)(_QWORD *);
  const void **v182;
  llvm *v183;
  uint64_t (**v184)(llvm *);
  const void **v185;
  llvm *v186;
  uint64_t (**v187)(llvm *);
  const void **SinkingPass;
  _QWORD *v189;
  void (**v190)(_QWORD *);
  const void **v191;
  _QWORD *v192;
  void (**v193)(_QWORD *);
  llvm *v194;
  const void **v195;
  uint64_t (**v196)(llvm *);
  const void **GlobalOptimizerPass;
  void (**v198)(void);
  int v199;
  _BOOL4 v200;
  uint64_t *v202;
  void *__p[2];
  uint64_t v204;
  __int128 v205;
  uint64_t v206;
  _QWORD v207[3];
  _QWORD *v208;
  _QWORD v209[3];
  llvm *v210;
  _QWORD v211[3];
  _QWORD *v212;
  _QWORD v213[3];
  _QWORD *v214;
  _QWORD v215[3];
  llvm *v216;
  _QWORD v217[3];
  llvm *v218;
  _QWORD v219[3];
  _QWORD *v220;
  _QWORD v221[3];
  _QWORD *v222;
  _QWORD v223[3];
  _QWORD *v224;
  _QWORD v225[3];
  _QWORD *v226;
  _QWORD v227[3];
  _QWORD *v228;
  _QWORD v229[3];
  _QWORD *v230;
  _QWORD v231[3];
  _QWORD *v232;
  _QWORD v233[3];
  llvm *v234;
  _QWORD v235[3];
  _QWORD *v236;
  _QWORD v237[3];
  llvm *v238;
  _QWORD v239[3];
  llvm *v240;
  _QWORD v241[3];
  _QWORD *v242;
  _QWORD v243[3];
  _QWORD *v244;
  _QWORD v245[3];
  _QWORD *v246;
  _QWORD v247[3];
  llvm *v248;
  _QWORD v249[3];
  _QWORD *v250;
  _QWORD v251[3];
  llvm *v252;
  _QWORD v253[3];
  _QWORD *v254;
  _QWORD v255[3];
  _QWORD *v256;
  _QWORD v257[3];
  llvm *v258;
  _QWORD v259[3];
  _QWORD *v260;
  _QWORD v261[3];
  _QWORD *v262;
  _QWORD v263[3];
  llvm *v264;
  _QWORD v265[3];
  _QWORD *v266;
  _QWORD v267[3];
  llvm *v268;
  _QWORD v269[3];
  llvm *v270;
  _QWORD v271[3];
  llvm *v272;
  _QWORD v273[3];
  llvm *v274;
  _QWORD v275[3];
  _QWORD *v276;
  _QWORD v277[3];
  _QWORD *v278;
  _QWORD v279[3];
  _QWORD *v280;
  _QWORD v281[3];
  _QWORD *v282;
  _QWORD v283[3];
  llvm *v284;
  _QWORD v285[3];
  _QWORD *v286;
  _QWORD v287[3];
  llvm *v288;
  _QWORD v289[3];
  _QWORD *v290;
  _QWORD v291[3];
  llvm *v292;
  _QWORD v293[3];
  llvm *v294;
  _QWORD v295[3];
  _QWORD *v296;
  _QWORD v297[3];
  _QWORD *v298;
  _QWORD v299[3];
  _QWORD *v300;
  _QWORD v301[3];
  llvm *v302;
  _QWORD v303[3];
  llvm *v304;
  _QWORD v305[3];
  llvm *v306;
  _QWORD v307[3];
  llvm *v308;
  _QWORD v309[3];
  llvm *v310;
  _QWORD v311[3];
  llvm *v312;
  _QWORD v313[3];
  llvm *v314;
  uint64_t (**v315)();
  uint64_t (*v316)();
  uint64_t (***v317)();
  _QWORD v318[3];
  _QWORD *v319;
  _QWORD v320[3];
  _QWORD *v321;
  uint64_t v322;

  v322 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a3 + 471) < 0)
  {
    sub_1C47EBC30(__p, *(void **)(a3 + 448), *(_QWORD *)(a3 + 456));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a3 + 448);
    v204 = *(_QWORD *)(a3 + 464);
  }
  v205 = *(_OWORD *)(a3 + 472);
  v206 = *(_QWORD *)(a3 + 488);
  if ((_DWORD)v205 == 27)
  {
    v17 = 1;
LABEL_8:
    v200 = v17;
    goto LABEL_10;
  }
  if (a6 == 2)
  {
    v17 = *(_DWORD *)(a3 + 544) != 1;
    goto LABEL_8;
  }
  v200 = 0;
LABEL_10:
  v18 = (uint64_t *)operator new();
  v202 = (uint64_t *)sub_1C4D80634((uint64_t)v18, a2, a3, a6, a7, a8, a9, a10);
  if (!byte_1ED7EF218)
    goto LABEL_16;
  v320[0] = &off_1E8133560;
  v321 = v320;
  v19 = operator new();
  *(_QWORD *)(v19 + 40) = 0;
  *(_QWORD *)(v19 + 48) = 0;
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(v19 + 16) = &unk_1EF8F7639;
  *(_DWORD *)(v19 + 24) = 4;
  *(_QWORD *)v19 = &off_1E81A9158;
  *(_QWORD *)(v19 + 32) = &unk_1C877348F;
  *(_DWORD *)(v19 + 56) = 1;
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), (const void **)v19);
  v20 = v321;
  if (v321 == v320)
  {
    v21 = (void (**)(_QWORD *))(v320[0] + 32);
    v20 = v320;
  }
  else
  {
    if (!v321)
      goto LABEL_16;
    v21 = (void (**)(_QWORD *))(*v321 + 40);
  }
  (*v21)(v20);
LABEL_16:
  v318[0] = &off_1E81335A8;
  v319 = v318;
  v22 = operator new();
  *(_QWORD *)(v22 + 8) = 0;
  *(_QWORD *)(v22 + 16) = &unk_1EF8F7129;
  *(_DWORD *)(v22 + 24) = 4;
  *(_QWORD *)v22 = &off_1E8171EE0;
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), (const void **)v22);
  v23 = v319;
  if (v319 == v318)
  {
    v24 = (void (**)(_QWORD *))(v318[0] + 32);
    v23 = v318;
  }
  else
  {
    if (!v319)
      goto LABEL_21;
    v24 = (void (**)(_QWORD *))(*v319 + 40);
  }
  (*v24)(v23);
LABEL_21:
  sub_1C4D807CC(v18);
  if (!a9)
  {
    v25 = a4;
    goto LABEL_23;
  }
  v320[0] = &off_1E8133638;
  v320[1] = v18;
  v321 = v320;
  v26 = (const void **)sub_1C4D80C98((uint64_t)v320);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v26);
  v27 = v321;
  if (v321 == v320)
  {
    v28 = (void (**)(_QWORD *))(v320[0] + 32);
    v27 = v320;
  }
  else
  {
    if (!v321)
      goto LABEL_34;
    v28 = (void (**)(_QWORD *))(*v321 + 40);
  }
  (*v28)(v27);
LABEL_34:
  if ((*(_DWORD *)(*v18 + 472) & 0xFFFFFFFE) != 0x1C)
    goto LABEL_40;
  v318[0] = &off_1E8133680;
  v318[1] = sub_1C627CD7C;
  v319 = v318;
  v29 = (const void **)sub_1C627CD7C();
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v29);
  v30 = v319;
  if (v319 == v318)
  {
    v31 = (void (**)(_QWORD *))(v318[0] + 32);
    v30 = v318;
  }
  else
  {
    if (!v319)
      goto LABEL_40;
    v31 = (void (**)(_QWORD *))(*v319 + 40);
  }
  (*v31)(v30);
LABEL_40:
  if (!*(_BYTE *)(a5 + 17))
  {
    v315 = &off_1E8133680;
    v316 = sub_1C627A5EC;
    v317 = &v315;
    v32 = (const void **)sub_1C627A5EC();
    llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v32);
    v33 = v317;
    if (v317 == &v315)
    {
      v34 = (void (**)(uint64_t (***)()))(v315 + 4);
      v33 = &v315;
    }
    else
    {
      if (!v317)
        goto LABEL_48;
      v34 = (void (**)(uint64_t (***)()))(*v317 + 5);
    }
    (*v34)(v33);
LABEL_48:
    v313[0] = &off_1E8133878;
    v314 = (llvm *)v313;
    AlwaysInlinerLegacyPass = (const void **)llvm::createAlwaysInlinerLegacyPass(0);
    llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), AlwaysInlinerLegacyPass);
    v39 = v314;
    if (v314 == (llvm *)v313)
    {
      v39 = (llvm *)(*(uint64_t (**)(_QWORD *))(v313[0] + 32))(v313);
    }
    else if (v314)
    {
      v39 = (llvm *)(*(uint64_t (**)(llvm *))(*(_QWORD *)v314 + 40))(v314);
    }
    goto LABEL_126;
  }
  v315 = &off_1E8133680;
  v316 = sub_1C627A560;
  v317 = &v315;
  v35 = (const void **)sub_1C627A560();
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v35);
  v36 = v317;
  if (v317 == &v315)
  {
    v37 = (void (**)(uint64_t (***)()))(v315 + 4);
    v36 = &v315;
  }
  else
  {
    if (!v317)
      goto LABEL_53;
    v37 = (void (**)(uint64_t (***)()))(*v317 + 5);
  }
  (*v37)(v36);
LABEL_53:
  v313[0] = &off_1E8133680;
  v313[1] = sub_1C6283230;
  v314 = (llvm *)v313;
  v40 = (const void **)sub_1C6283230();
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v40);
  v41 = v314;
  if (v314 == (llvm *)v313)
  {
    v42 = (void (**)(llvm *))(v313[0] + 32);
    v41 = (llvm *)v313;
  }
  else
  {
    if (!v314)
      goto LABEL_60;
    v42 = (void (**)(llvm *))(*(_QWORD *)v314 + 40);
  }
  (*v42)(v41);
LABEL_60:
  v311[0] = &off_1E8133680;
  v311[1] = sub_1C6282198;
  v312 = (llvm *)v311;
  v43 = (const void **)sub_1C6282198();
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v43);
  v44 = v312;
  if (v312 == (llvm *)v311)
  {
    v45 = (uint64_t (**)(llvm *))(v311[0] + 32);
    v44 = (llvm *)v311;
  }
  else
  {
    if (!v312)
      goto LABEL_65;
    v45 = (uint64_t (**)(llvm *))(*(_QWORD *)v312 + 40);
  }
  v44 = (llvm *)(*v45)(v44);
LABEL_65:
  if ((*(_BYTE *)(*v18 + 1042) & 8) == 0)
    goto LABEL_71;
  v309[0] = &off_1E8133680;
  v309[1] = sub_1C628299C;
  v310 = (llvm *)v309;
  v46 = (const void **)sub_1C628299C();
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v46);
  v44 = v310;
  if (v310 == (llvm *)v309)
  {
    v47 = (uint64_t (**)(llvm *))(v309[0] + 32);
    v44 = (llvm *)v309;
  }
  else
  {
    if (!v310)
      goto LABEL_71;
    v47 = (uint64_t (**)(llvm *))(*(_QWORD *)v310 + 40);
  }
  v44 = (llvm *)(*v47)(v44);
LABEL_71:
  v307[0] = &off_1E8133680;
  v307[1] = llvm::createReversePostOrderFunctionAttrsPass;
  v308 = (llvm *)v307;
  ReversePostOrderFunctionAttrsPass = (const void **)llvm::createReversePostOrderFunctionAttrsPass(v44);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), ReversePostOrderFunctionAttrsPass);
  v49 = v308;
  if (v308 == (llvm *)v307)
  {
    v50 = (uint64_t (**)(llvm *))(v307[0] + 32);
    v49 = (llvm *)v307;
  }
  else
  {
    if (!v308)
      goto LABEL_76;
    v50 = (uint64_t (**)(llvm *))(*(_QWORD *)v308 + 40);
  }
  v49 = (llvm *)(*v50)(v49);
LABEL_76:
  v305[0] = &off_1E81336C8;
  v305[1] = llvm::createTypeBasedAAWrapperPass;
  v306 = (llvm *)v305;
  TypeBasedAAWrapperPass = (const void **)llvm::createTypeBasedAAWrapperPass(v49);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), TypeBasedAAWrapperPass);
  v52 = v306;
  if (v306 == (llvm *)v305)
  {
    v53 = (uint64_t (**)(llvm *))(v305[0] + 32);
    v52 = (llvm *)v305;
  }
  else
  {
    if (!v306)
      goto LABEL_81;
    v53 = (uint64_t (**)(llvm *))(*(_QWORD *)v306 + 40);
  }
  v52 = (llvm *)(*v53)(v52);
LABEL_81:
  v303[0] = &off_1E81336C8;
  v303[1] = llvm::createScopedNoAliasAAWrapperPass;
  v304 = (llvm *)v303;
  ScopedNoAliasAAWrapperPass = (const void **)llvm::createScopedNoAliasAAWrapperPass(v52);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), ScopedNoAliasAAWrapperPass);
  v55 = v304;
  if (v304 == (llvm *)v303)
  {
    v56 = (uint64_t (**)(llvm *))(v303[0] + 32);
    v55 = (llvm *)v303;
  }
  else
  {
    if (!v304)
      goto LABEL_86;
    v56 = (uint64_t (**)(llvm *))(*(_QWORD *)v304 + 40);
  }
  v55 = (llvm *)(*v56)(v55);
LABEL_86:
  v301[0] = &off_1E8133710;
  v301[1] = llvm::createBasicAAWrapperPass;
  v302 = (llvm *)v301;
  BasicAAWrapperPass = (const void **)llvm::createBasicAAWrapperPass(v55);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), BasicAAWrapperPass);
  v58 = v302;
  if (v302 == (llvm *)v301)
  {
    v59 = (uint64_t (**)(llvm *))(v301[0] + 32);
    v58 = (llvm *)v301;
  }
  else
  {
    if (!v302)
      goto LABEL_91;
    v59 = (uint64_t (**)(llvm *))(*(_QWORD *)v302 + 40);
  }
  v58 = (llvm *)(*v59)(v58);
LABEL_91:
  v299[0] = &off_1E81336C8;
  v299[1] = llvm::createGPUAAWrapperPass;
  v300 = v299;
  GPUAAWrapperPass = (const void **)llvm::createGPUAAWrapperPass(v58);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), GPUAAWrapperPass);
  v61 = v300;
  if (v300 == v299)
  {
    v62 = (void (**)(_QWORD *))(v299[0] + 32);
    v61 = v299;
  }
  else
  {
    if (!v300)
      goto LABEL_96;
    v62 = (void (**)(_QWORD *))(*v300 + 40);
  }
  (*v62)(v61);
LABEL_96:
  v297[0] = &off_1E8133758;
  v298 = v297;
  v63 = (const void **)sub_1C4D80D8C();
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v63);
  v64 = v298;
  if (v298 == v297)
  {
    v65 = (void (**)(_QWORD *))(v297[0] + 32);
    v64 = v297;
  }
  else
  {
    if (!v298)
      goto LABEL_101;
    v65 = (void (**)(_QWORD *))(*v298 + 40);
  }
  (*v65)(v64);
LABEL_101:
  v295[0] = &off_1E8133680;
  v295[1] = sub_1C627E188;
  v296 = v295;
  v66 = (const void **)sub_1C627E188();
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v66);
  v67 = v296;
  if (v296 == v295)
  {
    v68 = (void (**)(_QWORD *))(v295[0] + 32);
    v67 = v295;
  }
  else
  {
    if (!v296)
      goto LABEL_106;
    v68 = (void (**)(_QWORD *))(*v296 + 40);
  }
  (*v68)(v67);
LABEL_106:
  LODWORD(v285[0]) = 16;
  v293[0] = &off_1E81337E8;
  v293[1] = v285;
  v294 = (llvm *)v293;
  ArgumentPromotionPass = (const void **)llvm::createArgumentPromotionPass((llvm *)0x10);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), ArgumentPromotionPass);
  v70 = v294;
  if (v294 == (llvm *)v293)
  {
    v71 = (uint64_t (**)(llvm *))(v293[0] + 32);
    v70 = (llvm *)v293;
  }
  else
  {
    if (!v294)
      goto LABEL_111;
    v71 = (uint64_t (**)(llvm *))(*(_QWORD *)v294 + 40);
  }
  v70 = (llvm *)(*v71)(v70);
LABEL_111:
  v291[0] = &off_1E8133830;
  v291[1] = llvm::createDeadArgEliminationPass;
  v292 = (llvm *)v291;
  DeadArgEliminationPass = (const void **)llvm::createDeadArgEliminationPass(v70);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), DeadArgEliminationPass);
  v73 = v292;
  if (v292 == (llvm *)v291)
  {
    v74 = (uint64_t (**)(llvm *))(v291[0] + 32);
    v73 = (llvm *)v291;
  }
  else
  {
    if (!v292)
      goto LABEL_116;
    v74 = (uint64_t (**)(llvm *))(*(_QWORD *)v292 + 40);
  }
  v73 = (llvm *)(*v74)(v73);
LABEL_116:
  v289[0] = &off_1E8133710;
  v289[1] = llvm::createAGXInstCombinePass;
  v290 = v289;
  AGXInstCombinePass = (const void **)llvm::createAGXInstCombinePass(v73);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), AGXInstCombinePass);
  v76 = v290;
  if (v290 == v289)
  {
    v77 = (void (**)(_QWORD *))(v289[0] + 32);
    v76 = v289;
LABEL_120:
    (*v77)(v76);
    goto LABEL_121;
  }
  if (v290)
  {
    v77 = (void (**)(_QWORD *))(*v290 + 40);
    goto LABEL_120;
  }
LABEL_121:
  v287[0] = &off_1E8133680;
  v287[1] = sub_1C627A678;
  v288 = (llvm *)v287;
  v78 = (const void **)sub_1C627A678();
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v78);
  v39 = v288;
  if (v288 == (llvm *)v287)
  {
    v79 = (uint64_t (**)(llvm *))(v287[0] + 32);
    v39 = (llvm *)v287;
  }
  else
  {
    if (!v288)
      goto LABEL_126;
    v79 = (uint64_t (**)(llvm *))(*(_QWORD *)v288 + 40);
  }
  v39 = (llvm *)(*v79)(v39);
LABEL_126:
  v285[0] = &off_1E81338C0;
  v286 = v285;
  SROAPass = (const void **)llvm::createSROAPass(v39);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), SROAPass);
  v81 = v286;
  if (v286 == v285)
  {
    v82 = (void (**)(_QWORD *))(v285[0] + 32);
    v81 = v285;
  }
  else
  {
    if (!v286)
      goto LABEL_131;
    v82 = (void (**)(_QWORD *))(*v286 + 40);
  }
  (*v82)(v81);
LABEL_131:
  v283[0] = &off_1E8133908;
  v283[1] = a5;
  v284 = (llvm *)v283;
  v83 = (const void **)sub_1C627A444(*(_QWORD *)(a5 + 20));
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v83);
  v84 = v284;
  if (v284 == (llvm *)v283)
  {
    v85 = (uint64_t (**)(llvm *))(v283[0] + 32);
    v84 = (llvm *)v283;
  }
  else
  {
    if (!v284)
      goto LABEL_136;
    v85 = (uint64_t (**)(llvm *))(*(_QWORD *)v284 + 40);
  }
  v84 = (llvm *)(*v85)(v84);
LABEL_136:
  v281[0] = &off_1E8133830;
  v281[1] = llvm::createStripDeadPrototypesPass;
  v282 = v281;
  StripDeadPrototypesPass = (const void **)llvm::createStripDeadPrototypesPass(v84);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), StripDeadPrototypesPass);
  v87 = v282;
  if (v282 == v281)
  {
    v88 = (void (**)(_QWORD *))(v281[0] + 32);
    v87 = v281;
  }
  else
  {
    if (!v282)
      goto LABEL_141;
    v88 = (void (**)(_QWORD *))(*v282 + 40);
  }
  (*v88)(v87);
LABEL_141:
  v279[0] = &off_1E8133680;
  v279[1] = sub_1C627CE08;
  v280 = v279;
  v89 = operator new();
  *(_QWORD *)(v89 + 8) = 0;
  *(_QWORD *)(v89 + 16) = &unk_1EF8F7118;
  *(_DWORD *)(v89 + 24) = 4;
  *(_QWORD *)v89 = &off_1E81704F0;
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), (const void **)v89);
  v90 = v280;
  if (v280 == v279)
  {
    v91 = (void (**)(_QWORD *))(v279[0] + 32);
    v90 = v279;
  }
  else
  {
    if (!v280)
      goto LABEL_146;
    v91 = (void (**)(_QWORD *))(*v280 + 40);
  }
  (*v91)(v90);
LABEL_146:
  v277[0] = &off_1E8133710;
  v277[1] = sub_1C627CF18;
  v278 = v277;
  v92 = (const void **)sub_1C627CF18();
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v92);
  v93 = v278;
  if (v278 == v277)
  {
    v94 = (void (**)(_QWORD *))(v277[0] + 32);
    v93 = v277;
  }
  else
  {
    if (!v278)
      goto LABEL_151;
    v94 = (void (**)(_QWORD *))(*v278 + 40);
  }
  (*v94)(v93);
LABEL_151:
  v275[0] = &off_1E8133950;
  v275[1] = a5;
  v276 = v275;
  v95 = (const void **)sub_1C6282770(*(_DWORD *)a5, *(_DWORD *)(a5 + 4));
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v95);
  v96 = v276;
  if (v276 == v275)
  {
    v97 = (void (**)(_QWORD *))(v275[0] + 32);
    v96 = v275;
  }
  else
  {
    if (!v276)
      goto LABEL_156;
    v97 = (void (**)(_QWORD *))(*v276 + 40);
  }
  (*v97)(v96);
LABEL_156:
  v273[0] = &off_1E8133998;
  v273[1] = llvm::createEarlyCSEPass;
  v273[2] = 0;
  v274 = (llvm *)v273;
  v98 = (const void **)operator new();
  sub_1C5AF9B7C((uint64_t)v98);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v98);
  v99 = v274;
  if (v274 == (llvm *)v273)
  {
    v100 = (uint64_t (**)(llvm *))(v273[0] + 32);
    v99 = (llvm *)v273;
  }
  else
  {
    if (!v274)
      goto LABEL_161;
    v100 = (uint64_t (**)(llvm *))(*(_QWORD *)v274 + 40);
  }
  v99 = (llvm *)(*v100)(v99);
LABEL_161:
  v271[0] = &off_1E8133710;
  v271[1] = llvm::createDeadCodeEliminationPass;
  v272 = (llvm *)v271;
  DeadCodeEliminationPass = (const void **)llvm::createDeadCodeEliminationPass(v99);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), DeadCodeEliminationPass);
  v102 = v272;
  if (v272 == (llvm *)v271)
  {
    v103 = (uint64_t (**)(llvm *))(v271[0] + 32);
    v102 = (llvm *)v271;
  }
  else
  {
    if (!v272)
      goto LABEL_166;
    v103 = (uint64_t (**)(llvm *))(*(_QWORD *)v272 + 40);
  }
  v102 = (llvm *)(*v103)(v102);
LABEL_166:
  v269[0] = &off_1E8133710;
  v269[1] = llvm::createReassociatePass;
  v270 = (llvm *)v269;
  ReassociatePass = (const void **)llvm::createReassociatePass(v102);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), ReassociatePass);
  v105 = v270;
  if (v270 == (llvm *)v269)
  {
    v106 = (uint64_t (**)(llvm *))(v269[0] + 32);
    v105 = (llvm *)v269;
  }
  else
  {
    if (!v270)
      goto LABEL_171;
    v106 = (uint64_t (**)(llvm *))(*(_QWORD *)v270 + 40);
  }
  v105 = (llvm *)(*v106)(v105);
LABEL_171:
  v267[0] = &off_1E8133710;
  v267[1] = llvm::createSCCPPass;
  v268 = (llvm *)v267;
  SCCPPass = (const void **)llvm::createSCCPPass(v105);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), SCCPPass);
  v108 = v268;
  if (v268 == (llvm *)v267)
  {
    v109 = (uint64_t (**)(llvm *))(v267[0] + 32);
    v108 = (llvm *)v267;
  }
  else
  {
    if (!v268)
      goto LABEL_176;
    v109 = (uint64_t (**)(llvm *))(*(_QWORD *)v268 + 40);
  }
  v108 = (llvm *)(*v109)(v108);
LABEL_176:
  v265[0] = &off_1E81339E0;
  v266 = v265;
  InstructionCombiningPass = (const void **)llvm::createInstructionCombiningPass(v108);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), InstructionCombiningPass);
  v111 = v266;
  if (v266 == v265)
  {
    v112 = (void (**)(_QWORD *))(v265[0] + 32);
    v111 = v265;
  }
  else
  {
    if (!v266)
      goto LABEL_181;
    v112 = (void (**)(_QWORD *))(*v266 + 40);
  }
  (*v112)(v111);
LABEL_181:
  v263[0] = &off_1E8133680;
  v263[1] = sub_1C627F9E4;
  v264 = (llvm *)v263;
  v113 = (const void **)sub_1C627F9E4();
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v113);
  v114 = v264;
  if (v264 == (llvm *)v263)
  {
    v115 = (uint64_t (**)(llvm *))(v263[0] + 32);
    v114 = (llvm *)v263;
  }
  else
  {
    if (!v264)
      goto LABEL_186;
    v115 = (uint64_t (**)(llvm *))(*(_QWORD *)v264 + 40);
  }
  v114 = (llvm *)(*v115)(v114);
LABEL_186:
  v261[0] = &off_1E8133680;
  v261[1] = llvm::createLoopSimplifyCFGPass;
  v262 = v261;
  LoopSimplifyCFGPass = (const void **)llvm::createLoopSimplifyCFGPass(v114);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), LoopSimplifyCFGPass);
  v117 = v262;
  if (v262 == v261)
  {
    v118 = (void (**)(_QWORD *))(v261[0] + 32);
    v117 = v261;
  }
  else
  {
    if (!v262)
      goto LABEL_191;
    v118 = (void (**)(_QWORD *))(*v262 + 40);
  }
  (*v118)(v117);
LABEL_191:
  v259[0] = &off_1E8133A28;
  v259[1] = a5;
  v260 = v259;
  LoopRotatePass = (const void **)llvm::createLoopRotatePass((llvm *)*(unsigned int *)(a5 + 12), 0);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), LoopRotatePass);
  v120 = v260;
  if (v260 == v259)
  {
    v121 = (void (**)(_QWORD *))(v259[0] + 32);
    v120 = v259;
  }
  else
  {
    if (!v260)
      goto LABEL_196;
    v121 = (void (**)(_QWORD *))(*v260 + 40);
  }
  (*v121)(v120);
LABEL_196:
  v257[0] = &off_1E8133A70;
  v258 = (llvm *)v257;
  LoopUnrollPass = (const void **)llvm::createLoopUnrollPass((llvm *)2, 0, 0, -1, -1, -1, -1, -1, -1, v199);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), LoopUnrollPass);
  v123 = v258;
  if (v258 == (llvm *)v257)
  {
    v124 = (uint64_t (**)(llvm *))(v257[0] + 32);
    v123 = (llvm *)v257;
  }
  else
  {
    if (!v258)
      goto LABEL_201;
    v124 = (uint64_t (**)(llvm *))(*(_QWORD *)v258 + 40);
  }
  v123 = (llvm *)(*v124)(v123);
LABEL_201:
  v255[0] = &off_1E8133710;
  v255[1] = llvm::createSCCPPass;
  v256 = v255;
  v125 = (const void **)llvm::createSCCPPass(v123);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v125);
  v126 = v256;
  if (v256 == v255)
  {
    v127 = (void (**)(_QWORD *))(v255[0] + 32);
    v126 = v255;
  }
  else
  {
    if (!v256)
      goto LABEL_206;
    v127 = (void (**)(_QWORD *))(*v256 + 40);
  }
  (*v127)(v126);
LABEL_206:
  v253[0] = &off_1E8133680;
  v253[1] = sub_1C62834B4;
  v254 = v253;
  v128 = (const void **)sub_1C62834B4();
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v128);
  v129 = v254;
  if (v254 == v253)
  {
    v130 = (void (**)(_QWORD *))(v253[0] + 32);
    v129 = v253;
  }
  else
  {
    if (!v254)
      goto LABEL_211;
    v130 = (void (**)(_QWORD *))(*v254 + 40);
  }
  (*v130)(v129);
LABEL_211:
  v251[0] = &off_1E8133680;
  v251[1] = sub_1C627FDE4;
  v252 = (llvm *)v251;
  v131 = (const void **)sub_1C627FDE4();
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v131);
  v132 = v252;
  if (v252 == (llvm *)v251)
  {
    v133 = (uint64_t (**)(llvm *))(v251[0] + 32);
    v132 = (llvm *)v251;
  }
  else
  {
    if (!v252)
      goto LABEL_216;
    v133 = (uint64_t (**)(llvm *))(*(_QWORD *)v252 + 40);
  }
  v132 = (llvm *)(*v133)(v132);
LABEL_216:
  v249[0] = &off_1E8133AB8;
  v250 = v249;
  v134 = (const void **)llvm::createSROAPass(v132);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v134);
  v135 = v250;
  if (v250 == v249)
  {
    v136 = (void (**)(_QWORD *))(v249[0] + 32);
    v135 = v249;
  }
  else
  {
    if (!v250)
      goto LABEL_221;
    v136 = (void (**)(_QWORD *))(*v250 + 40);
  }
  (*v136)(v135);
LABEL_221:
  v247[0] = &off_1E8133680;
  v247[1] = sub_1C627D148;
  v248 = (llvm *)v247;
  v137 = (const void **)sub_1C627D148();
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v137);
  v138 = v248;
  if (v248 == (llvm *)v247)
  {
    v139 = (uint64_t (**)(llvm *))(v247[0] + 32);
    v138 = (llvm *)v247;
  }
  else
  {
    if (!v248)
      goto LABEL_226;
    v139 = (uint64_t (**)(llvm *))(*(_QWORD *)v248 + 40);
  }
  v138 = (llvm *)(*v139)(v138);
LABEL_226:
  v245[0] = &off_1E8133B00;
  v246 = v245;
  v140 = (const void **)llvm::createSROAPass(v138);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v140);
  v141 = v246;
  if (v246 == v245)
  {
    v142 = (void (**)(_QWORD *))(v245[0] + 32);
    v141 = v245;
  }
  else
  {
    if (!v246)
      goto LABEL_231;
    v142 = (void (**)(_QWORD *))(*v246 + 40);
  }
  (*v142)(v141);
LABEL_231:
  v243[0] = &off_1E8133680;
  v243[1] = sub_1C627A858;
  v244 = v243;
  v143 = (const void **)sub_1C627A858();
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v143);
  v144 = v244;
  if (v244 == v243)
  {
    v145 = (void (**)(_QWORD *))(v243[0] + 32);
    v144 = v243;
  }
  else
  {
    if (!v244)
      goto LABEL_236;
    v145 = (void (**)(_QWORD *))(*v244 + 40);
  }
  (*v145)(v144);
LABEL_236:
  v241[0] = &off_1E8133B48;
  v241[1] = a5;
  v242 = v241;
  v146 = (const void **)sub_1C6282770(*(_DWORD *)a5, *(_DWORD *)(a5 + 4));
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v146);
  v147 = v242;
  if (v242 == v241)
  {
    v148 = (void (**)(_QWORD *))(v241[0] + 32);
    v147 = v241;
  }
  else
  {
    if (!v242)
      goto LABEL_241;
    v148 = (void (**)(_QWORD *))(*v242 + 40);
  }
  (*v148)(v147);
LABEL_241:
  v239[0] = &off_1E8133998;
  v239[1] = llvm::createEarlyCSEPass;
  v239[2] = 1;
  v240 = (llvm *)v239;
  v149 = (const void **)operator new();
  sub_1C5AF9AB4((uint64_t)v149);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v149);
  v150 = v240;
  if (v240 == (llvm *)v239)
  {
    v151 = (uint64_t (**)(llvm *))(v239[0] + 32);
    v150 = (llvm *)v239;
  }
  else
  {
    if (!v240)
      goto LABEL_246;
    v151 = (uint64_t (**)(llvm *))(*(_QWORD *)v240 + 40);
  }
  v150 = (llvm *)(*v151)(v150);
LABEL_246:
  v237[0] = &off_1E8133710;
  v237[1] = llvm::createAggressiveDCEPass;
  v238 = (llvm *)v237;
  AggressiveDCEPass = (const void **)llvm::createAggressiveDCEPass(v150);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), AggressiveDCEPass);
  v153 = v238;
  if (v238 == (llvm *)v237)
  {
    v154 = (uint64_t (**)(llvm *))(v237[0] + 32);
    v153 = (llvm *)v237;
  }
  else
  {
    if (!v238)
      goto LABEL_251;
    v154 = (uint64_t (**)(llvm *))(*(_QWORD *)v238 + 40);
  }
  v153 = (llvm *)(*v154)(v153);
LABEL_251:
  v235[0] = &off_1E8133710;
  v235[1] = llvm::createReassociatePass;
  v236 = v235;
  v155 = (const void **)llvm::createReassociatePass(v153);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v155);
  v156 = v236;
  if (v236 == v235)
  {
    v157 = (void (**)(_QWORD *))(v235[0] + 32);
    v156 = v235;
  }
  else
  {
    if (!v236)
      goto LABEL_256;
    v157 = (void (**)(_QWORD *))(*v236 + 40);
  }
  (*v157)(v156);
LABEL_256:
  v233[0] = &off_1E8133B90;
  v234 = (llvm *)v233;
  v158 = operator new();
  *(_QWORD *)(v158 + 8) = 0;
  *(_QWORD *)(v158 + 16) = &unk_1EF8F7129;
  *(_DWORD *)(v158 + 24) = 4;
  *(_QWORD *)v158 = &off_1E8171EE0;
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), (const void **)v158);
  v159 = v234;
  if (v234 == (llvm *)v233)
  {
    v160 = (uint64_t (**)(llvm *))(v233[0] + 32);
    v159 = (llvm *)v233;
  }
  else
  {
    if (!v234)
      goto LABEL_261;
    v160 = (uint64_t (**)(llvm *))(*(_QWORD *)v234 + 40);
  }
  v159 = (llvm *)(*v160)(v159);
LABEL_261:
  v231[0] = &off_1E8133BD8;
  v232 = v231;
  v161 = (const void **)llvm::createInstructionCombiningPass(v159);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v161);
  v162 = v232;
  if (v232 == v231)
  {
    v163 = (void (**)(_QWORD *))(v231[0] + 32);
    v162 = v231;
  }
  else
  {
    if (!v232)
      goto LABEL_266;
    v163 = (void (**)(_QWORD *))(*v232 + 40);
  }
  (*v163)(v162);
LABEL_266:
  v229[0] = &off_1E8133C20;
  v229[1] = a5;
  v230 = v229;
  v164 = (const void **)sub_1C627D43C(*(_BYTE *)(a5 + 18));
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v164);
  v165 = v230;
  if (v230 == v229)
  {
    v166 = (void (**)(_QWORD *))(v229[0] + 32);
    v165 = v229;
  }
  else
  {
    if (!v230)
      goto LABEL_271;
    v166 = (void (**)(_QWORD *))(*v230 + 40);
  }
  (*v166)(v165);
LABEL_271:
  v227[0] = &off_1E8133C68;
  v228 = v227;
  v167 = (const void **)sub_1C4D818C8();
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v167);
  v168 = v228;
  if (v228 == v227)
  {
    v169 = (void (**)(_QWORD *))(v227[0] + 32);
    v168 = v227;
  }
  else
  {
    if (!v228)
      goto LABEL_276;
    v169 = (void (**)(_QWORD *))(*v228 + 40);
  }
  (*v169)(v168);
LABEL_276:
  v225[0] = &off_1E8133710;
  v225[1] = sub_1C627D5C4;
  v226 = v225;
  v170 = (const void **)sub_1C627D5C4();
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v170);
  v171 = v226;
  if (v226 == v225)
  {
    v172 = (void (**)(_QWORD *))(v225[0] + 32);
    v171 = v225;
  }
  else
  {
    if (!v226)
      goto LABEL_281;
    v172 = (void (**)(_QWORD *))(*v226 + 40);
  }
  (*v172)(v171);
LABEL_281:
  v223[0] = &off_1E8133710;
  v223[1] = sub_1C6280B74;
  v224 = v223;
  v173 = (const void **)sub_1C6280B74();
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v173);
  v174 = v224;
  if (v224 == v223)
  {
    v175 = (void (**)(_QWORD *))(v223[0] + 32);
    v174 = v223;
  }
  else
  {
    if (!v224)
      goto LABEL_286;
    v175 = (void (**)(_QWORD *))(*v224 + 40);
  }
  (*v175)(v174);
LABEL_286:
  v221[0] = &off_1E8133710;
  v221[1] = sub_1C627E34C;
  v222 = v221;
  v176 = (const void **)sub_1C627E34C();
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v176);
  v177 = v222;
  if (v222 == v221)
  {
    v178 = (void (**)(_QWORD *))(v221[0] + 32);
    v177 = v221;
  }
  else
  {
    if (!v222)
      goto LABEL_291;
    v178 = (void (**)(_QWORD *))(*v222 + 40);
  }
  (*v178)(v177);
LABEL_291:
  v219[0] = &off_1E8133998;
  v219[1] = llvm::createEarlyCSEPass;
  v219[2] = 1;
  v220 = v219;
  v179 = (const void **)operator new();
  sub_1C5AF9AB4((uint64_t)v179);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v179);
  v180 = v220;
  if (v220 == v219)
  {
    v181 = (void (**)(_QWORD *))(v219[0] + 32);
    v180 = v219;
  }
  else
  {
    if (!v220)
      goto LABEL_296;
    v181 = (void (**)(_QWORD *))(*v220 + 40);
  }
  (*v181)(v180);
LABEL_296:
  v217[0] = &off_1E8133710;
  v217[1] = sub_1C627A768;
  v218 = (llvm *)v217;
  v182 = (const void **)sub_1C627A768();
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v182);
  v183 = v218;
  if (v218 == (llvm *)v217)
  {
    v184 = (uint64_t (**)(llvm *))(v217[0] + 32);
    v183 = (llvm *)v217;
  }
  else
  {
    if (!v218)
      goto LABEL_301;
    v184 = (uint64_t (**)(llvm *))(*(_QWORD *)v218 + 40);
  }
  v183 = (llvm *)(*v184)(v183);
LABEL_301:
  v215[0] = &off_1E8133CB0;
  v216 = (llvm *)v215;
  v185 = (const void **)llvm::createInstructionCombiningPass(v183);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v185);
  v186 = v216;
  if (v216 == (llvm *)v215)
  {
    v187 = (uint64_t (**)(llvm *))(v215[0] + 32);
    v186 = (llvm *)v215;
  }
  else
  {
    if (!v216)
      goto LABEL_306;
    v187 = (uint64_t (**)(llvm *))(*(_QWORD *)v216 + 40);
  }
  v186 = (llvm *)(*v187)(v186);
LABEL_306:
  v213[0] = &off_1E8133710;
  v213[1] = llvm::createSinkingPass;
  v214 = v213;
  SinkingPass = (const void **)llvm::createSinkingPass(v186);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), SinkingPass);
  v189 = v214;
  if (v214 == v213)
  {
    v190 = (void (**)(_QWORD *))(v213[0] + 32);
    v189 = v213;
  }
  else
  {
    if (!v214)
      goto LABEL_311;
    v190 = (void (**)(_QWORD *))(*v214 + 40);
  }
  (*v190)(v189);
LABEL_311:
  v211[0] = &off_1E8133CF8;
  v212 = v211;
  v191 = (const void **)sub_1C627E3D8(0);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v191);
  v192 = v212;
  if (v212 == v211)
  {
    v193 = (void (**)(_QWORD *))(v211[0] + 32);
    v192 = v211;
  }
  else
  {
    if (!v212)
      goto LABEL_316;
    v193 = (void (**)(_QWORD *))(*v212 + 40);
  }
  (*v193)(v192);
LABEL_316:
  v194 = (llvm *)llvm::AGX::AGCStatusPrinter::hookOptimizePrinter((uint64_t)(v18 + 13), (llvm::legacy::PassManager *)(v18 + 10));
  v25 = a4;
  if (!v200)
    goto LABEL_322;
  v209[0] = &off_1E8133D40;
  v210 = (llvm *)v209;
  v195 = (const void **)sub_1C4D81A84();
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), v195);
  v194 = v210;
  if (v210 == (llvm *)v209)
  {
    v196 = (uint64_t (**)(llvm *))(v209[0] + 32);
    v194 = (llvm *)v209;
  }
  else
  {
    if (!v210)
      goto LABEL_322;
    v196 = (uint64_t (**)(llvm *))(*(_QWORD *)v210 + 40);
  }
  v194 = (llvm *)(*v196)(v194);
LABEL_322:
  v207[0] = &off_1E8133830;
  v207[1] = llvm::createGlobalOptimizerPass;
  v208 = v207;
  GlobalOptimizerPass = (const void **)llvm::createGlobalOptimizerPass(v194);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(v18[11] + 416), GlobalOptimizerPass);
  if (v208 == v207)
  {
    v198 = (void (**)(void))(v207[0] + 32);
    goto LABEL_326;
  }
  if (v208)
  {
    v198 = (void (**)(void))(*v208 + 40);
LABEL_326:
    (*v198)();
  }
  v18 = v202;
LABEL_23:
  if (sub_1C4D80878((uint64_t)v18, a3, a7, v25))
    v202 = 0;
  else
    v18 = 0;
  *a1 = v18;
  sub_1C4D81EB8((uint64_t *)&v202, 0);
  if (SHIBYTE(v204) < 0)
    operator delete(__p[0]);
}

